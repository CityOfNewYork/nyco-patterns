/ Layout
= extend('layouts/default');

= partial('partials/styles.slm');
= partial('partials/links.slm');
= partial('partials/head.mixin.slm');
= partial('partials/nav.mixin.slm');

/ Component
= partial('../objects/feed/feed.slm');

/ Content blocks
= content('head');
  = mixin('head', 'Feed');

= content('header');
  = mixin('header');

= content('content');
  h1 class='${class_demo_headers}' Feed

  section class='${class_demo}'
    div class='${class_demo_col1}'
      div class='${class_demo_cola}'

        p
          | The <b>Feed Object</b> embeds a Medium feed onto any web page. Multiple urls can be combined to display as many posts from different user profiles, publications, or tagged pages in publications. Refer to the <a href="https://help.medium.com/hc/en-us/articles/214874118-RSS-feeds">Medium RSS Feed Documentation</a> on available feeds.

        h2#usage
          a href='#usage' Usage

        h3 class='h4'
          a href='customize-your-feed' Embed

        p
          | You can <a href='customize-your-feed'>copy and paste the embeddable snippet</a> that automatically integrates the source below or you can follow the steps to integrate it manually.

        h4#manual class='h4'
          a href='#manual' Manual

        p
          | To use the feed source files, include the following scripts in your page.

        div class='code-block'
          pre
            div
              = '<script src="https://cdn.polyfill.io/v2/polyfill.js?features=Promise&gated=gated" type="text/javascript"></script> ';
              span class='code__comment' = '<!-- The feed component uses Promises so this polyfill is needed for IE support -->';
            div
              = '<script src="' + this.site.urls.cdn + '/objects/feed/Feed.js" type="text/javascript"></script>';

        p
          | Optionally, but recommended, include the base styling for the feed.

        div class='code-block'
          pre
            div
              = '<link src="' + this.site.urls.cdn + '/objects/feed/feed.css" rel="stylesheet" type="text/css" media="screen">';

        p
          | Then, add a container with the feed's id and the execution script with configuration parameters.

        div class='code-block'
          pre
            div
              = '<div id="js-feed"></div>';
            div
              = '<script type="text/javascript">';
            div
              = '  new Feed({';
            div
              = '    selector: "#js-feed", ';
              span class='code__comment' = '// The DOM element selctor for the feed. Defaults to #js-feed'
            div
              = '    feed: "https://medium.com/feed/@nycopportunity/", ';
              span class='code__comment' = '// Required. The feed you want to display. May be an array of multiple feeds'
            div
              = '  });';
            div
              = '</script>';

        p
          | <code>new Feed({});</code> creates a feed, accepting a configuration object as a parameter. <a href='customize-your-feed'>The full configuration can be viewed here</a>. The object should contain the configuration you would like for the feed. Note: the <code>selector</code> and <code>feed</code> parameters are required to display a feed. Below is a list of the rest of the default configuration options. See the <a href="https://help.medium.com/hc/en-us/articles/214874118-RSS-feeds">Medium RSS Feed Documentation</a> for more details on their feeds.

        h2#layouts
          a href='#layouts' Layouts

        p
          | In the bundled styles for this component there are three layouts for the Feed items: 1 column (default), 2 column, and 3 column. In order to utilize the 2 or 3 column layouts, configure the <code>classes.wrapper</code> parameter to <code>o-feed--3-column</code> for 3 columns and <code>o-feed--2-column</code> for 2 columns.

        h2#templates
          a href='#templates' Templates

        p
          | The feed comes shipped with ready-to-use LoDash template components for Medium feeds. Each component can be overwritten with the <code>template.component</code> configuration parameter. You can copy the templates below to get started creating your own template and refer to the <a href="https://lodash.com/docs/4.17.5#template">LoDash documentation for templates</a>.

        = mixin('feed-template');

        p
          | Here's an example of passing your own template to the configuration:

        div class='code-block'
          pre
            div = 'var MyTemplate = {';
            div = '  opener: "<div>...template content...</div>"';
            div = '  header: "<div>...template content...</div>"';
            div = '  posts: "<div>...template content...</div>"';
            div = '  closer: "<div>...template content...</div>"';
            div = '};';
            div = 'new Feed({';
            div
              = '  selector: "#feed", ';
              span class='code__comment' = '// required';
            div
              = '  feed: "https://medium.com/feed/@nycopportunity/", ';
              span class='code__comment' = '// required';
            div = '  template: MyTemplate';
            div = '});';

        p
          | Templates are passed the <code>config</code> object and whatever the response of the feed is. In Medium's case, they pass the <code>feed</code> parameter and posts within the <code>items</code> parameter in the response from their RSS feed. To see the data that gets passed to the template to use in your template, set the <code>log</code> configuration parameter to <code>true</code>. Open up the console to see the data for this particular feed demonstration.

        h2#rss-to-json
          a href='#rss-to-json' RSS to JSON

        p
          | The <b>Feed Object</b> uses an API from <a href="https://rss2json.com">https://rss2json.com</a> to convert desired RSS feed into a consumable JSON object. See the <a href="https://rss2json.com">RSS 2 JSON Online Converter</a> documentation for details.

    div class='${class_demo_col2}'
      div class='${class_demo_colb}'
        div class='border-8 p-3 border-secondary-white mx-auto' style='max-width: 300px;'
          = mixin('feed-demo');

= content('script');
  = mixin('feed-script');
