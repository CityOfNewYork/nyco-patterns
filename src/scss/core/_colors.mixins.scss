//
// Mixins
//

// Dependencies
@import 'colors.vars';

// Mixins
@mixin background-color($colors, $set) {

  @each $setting in $set {

    $namespace: map-get($setting, namespace);
    $color: map-get($colors, map-get($setting, color));
    $text: map-get($colors, map-get($setting, text));
    $hyperlink: map-get($colors, map-get($setting, hyperlink));

    .bg-#{$namespace} {
      color: $text;
      background-color: $color
    }

    .bg-#{$namespace}:not(.bg-a-inherit) a:not(.inherit):not(.btn) {
      color: $hyperlink
    }

    .bg-#{$namespace}:not(.bg-a-inherit)  a:hover:not(.inherit):not(.btn) {
      color: $hyperlink
    }

    .btn.bg-#{$namespace}:focus,
    .btn.bg-#{$namespace}:active,
    html:not(.touchevents) .btn.bg-#{$namespace}:hover {
      color: $text;
      background-color: darken($color, $delta-psuedo);
    }

  }

}

@mixin color($colors, $set) {

  @each $setting in $set {

    $namespace: map-get($setting, namespace);
    $color: map-get($colors, map-get($setting, color));
    $text: map-get($colors, map-get($setting, text));
    $hyperlink: map-get($colors, map-get($setting, hyperlink));

    .c-#{$namespace} {
      color: $color !important
    }

    .b-#{$namespace} {
      border-color: $color
    }

    .fill-#{$namespace} {
      fill: $color
    }

    .stroke-#{$namespace} {
      stroke: $color
    }

    // .filter-#{$namespace}::before {
    //   background: $color;
    // }

  }

}

@function tints-and-shades($set, $trans) {

  $return: ();
  $newsetting: $set;

  @each $transformation in $trans {

    $namespace: '-' + map-get($transformation, namespace);

    @for $i from 1 through length($set) {
      $setting: nth($set, $i);

      $name: map-get($setting, namespace) + $namespace;
      $s: map-merge($setting, (namespace: $name));

      $return: append($return, $s);

      @debug $i;
      @debug $name;
      @debug $s;
      @debug $return;

      // Todo need to transform the color

    }

  }

  @return $return

}

