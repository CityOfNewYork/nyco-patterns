var Icons=function(){"use strict";var e=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},t=function t(){return e(this,t),this};t.debug=function(){return"1"===t.getUrlParameter(t.PARAMS.DEBUG)},t.getUrlParameter=function(e,t){var n=t||window.location.search,r=e.replace(/[\[]/,"\\[").replace(/[\]]/,"\\]"),a=new RegExp("[\\?&]"+r+"=([^&#]*)").exec(n);return null===a?"":decodeURIComponent(a[1].replace(/\+/g," "))},t.localize=function(e){var t=e||"",n=(window.LOCALIZED_STRINGS||[]).filter(function(t){return!(!t.hasOwnProperty("slug")||t.slug!==e)&&t});return n[0]&&n[0].hasOwnProperty("label")?n[0].label:t},t.validateEmail=function(e){var t=document.createElement("input");return t.type="email",t.value=e,"function"==typeof t.checkValidity?t.checkValidity():/\S+@\S+\.\S+/.test(e)},t.joinValues=function(e){if(e.target.matches('input[type="checkbox"]')&&e.target.closest("[data-js-join-values]")){var t=e.target.closest("[data-js-join-values]"),n=document.querySelector(t.dataset.jsJoinValues);return n.value=Array.from(t.querySelectorAll('input[type="checkbox"]')).filter(function(e){return e.value&&e.checked}).map(function(e){return e.value}).join(", "),n}},t.valid=function(e){e.preventDefault(),t.debug()&&console.dir({init:"Validation",event:e});for(var n=e.target.checkValidity(),r=e.target.querySelectorAll('input[required="true"]'),a=0;a<r.length;a++){var i=r[a],o=i.parentNode,c=o.querySelector(".error-message");o.classList.remove("error"),c&&c.remove(),i.validity.valid||(c=document.createElement("div"),i.validity.valueMissing?c.innerHTML=t.localize("VALID_REQUIRED"):i.validity.valid?c.innerHTML=i.validationMessage:c.innerHTML=t.localize("VALID_"+i.type.toUpperCase()+"_INVALID"),c.setAttribute("aria-live","polite"),c.classList.add("error-message"),o.classList.add("error"),o.insertBefore(c,o.childNodes[0]))}return t.debug()&&console.dir({complete:"Validation",valid:n,event:e}),n?e:n},t.parseMarkdown=function(){if("undefined"==typeof markdown)return!1;for(var e=document.querySelectorAll(t.SELECTORS.parseMarkdown),n=function(n){var r=e[n];fetch(r.dataset.jsMarkdown).then(function(e){if(e.ok)return e.text();r.innerHTML="",t.debug()&&console.dir(e)}).catch(function(e){t.debug()&&console.dir(e)}).then(function(e){try{r.classList.toggle("animated"),r.classList.toggle("fadeIn"),r.innerHTML=markdown.toHTML(e)}catch(e){}})},r=0;r<e.length;r++)n(r)},t.PARAMS={DEBUG:"debug"},t.SELECTORS={parseMarkdown:'[data-js="markdown"]'};var n=function n(r){return e(this,n),r=r||n.path,fetch(r).then(function(e){if(e.ok)return e.text();t.debug()&&console.dir(e)}).catch(function(e){t.debug()&&console.dir(e)}).then(function(e){var t=document.createElement("div");t.innerHTML=e,t.setAttribute("aria-hidden",!0),t.setAttribute("style","display: none;"),document.body.appendChild(t)}),this};return n.path="icons.svg",n}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
