"use strict";var classCallCheck=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},createClass=function(){function e(e,t){for(var s=0;s<t.length;s++){var a=t[s];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,s,a){return s&&e(t.prototype,s),a&&e(t,a),t}}(),Toggle=function(){function e(t){var s=this;classCallCheck(this,e);var a=document.querySelector("body");return t=t||{},this._settings={selector:t.selector?t.selector:e.selector,namespace:t.namespace?t.namespace:e.namespace,inactiveClass:t.inactiveClass?t.inactiveClass:e.inactiveClass,activeClass:t.activeClass?t.activeClass:e.activeClass},a.addEventListener("click",function(e){e.target.matches(s._settings.selector)&&(e.preventDefault(),s._toggle(e))}),this}return createClass(e,[{key:"_toggle",value:function(e){var t=this,s=e.target,a=!1;if(a=s.getAttribute("href")?document.querySelector(s.getAttribute("href")):a,!(a=s.getAttribute("aria-controls")?document.querySelector("#"+s.getAttribute("aria-controls")):a))return this;if(this.elementToggle(s,a),s.dataset[this._settings.namespace+"Undo"]){var i=document.querySelector(s.dataset[this._settings.namespace+"Undo"]);i.addEventListener("click",function(e){e.preventDefault(),t.elementToggle(s,a),i.removeEventListener("click")})}return this}},{key:"elementToggle",value:function(t,s){""!==this._settings.activeClass&&(t.classList.toggle(this._settings.activeClass),s.classList.toggle(this._settings.activeClass)),""!==this._settings.inactiveClass&&s.classList.toggle(this._settings.inactiveClass);for(var a=0;a<e.elAriaRoles.length;a++)t.getAttribute(e.elAriaRoles[a])&&t.setAttribute(e.elAriaRoles[a],!("true"===t.getAttribute(e.elAriaRoles[a])));for(var i=0;i<e.targetAriaRoles.length;i++)s.getAttribute(e.targetAriaRoles[i])&&s.setAttribute(e.targetAriaRoles[i],!("true"===s.getAttribute(e.targetAriaRoles[i])));return t.getAttribute("href")&&s.classList.contains(this._settings.activeClass)&&(window.location.hash="",window.location.hash=t.getAttribute("href")),this}}]),e}();Toggle.selector='[data-js*="toggle"]',Toggle.namespace="toggle",Toggle.inactiveClass="hidden",Toggle.activeClass="active",Toggle.elAriaRoles=["aria-pressed","aria-expanded"],Toggle.targetAriaRoles=["aria-hidden"],module.exports=Toggle;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
