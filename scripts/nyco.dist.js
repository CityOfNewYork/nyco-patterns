var nyco=function(){"use strict";function t(t){return function(n,e){return ti(t(n),e)}}function n(t,n,e){var r=(n-t)/Math.max(0,e),i=Math.floor(Math.log(r)/Math.LN10),o=r/Math.pow(10,i);return i>=0?(o>=ri?10:o>=ii?5:o>=oi?2:1)*Math.pow(10,i):-Math.pow(10,-i)/(o>=ri?10:o>=ii?5:o>=oi?2:1)}function e(t,n,e){var r=Math.abs(n-t)/Math.max(0,e),i=Math.pow(10,Math.floor(Math.log(r)/Math.LN10)),o=r/i;return o>=ri?i*=10:o>=ii?i*=5:o>=oi&&(i*=2),n<t?-i:i}function r(t){return"translate("+(t+.5)+",0)"}function i(t){return"translate(0,"+(t+.5)+")"}function o(t){var n=Math.max(0,t.bandwidth()-1)/2;return t.round()&&(n=Math.round(n)),function(e){return t(e)+n}}function a(){return!this.__axis}function u(t,n){function e(e){var r=null==s?n.ticks?n.ticks.apply(n,u):n.domain():s,i=null==c?n.tickFormat?n.tickFormat.apply(n,u):li:c,_=Math.max(l,0)+f,v=n.range(),y=v[0]+.5,m=v[v.length-1]+.5,w=(n.bandwidth?o:li)(n.copy()),x=e.selection?e.selection():e,b=x.selectAll(".domain").data([null]),M=x.selectAll(".tick").data(r,n).order(),A=M.exit(),k=M.enter().append("g").attr("class","tick"),N=M.select("line"),T=M.select("text");b=b.merge(b.enter().insert("path",".tick").attr("class","domain").attr("stroke","#000")),M=M.merge(k),N=N.merge(k.append("line").attr("stroke","#000").attr(d+"2",p*l)),T=T.merge(k.append("text").attr("fill","#000").attr(d,p*_).attr("dy",t===hi?"0em":t===pi?"0.71em":"0.32em")),e!==x&&(b=b.transition(e),M=M.transition(e),N=N.transition(e),T=T.transition(e),A=A.transition(e).attr("opacity",gi).attr("transform",function(t){return isFinite(t=w(t))?g(t):this.getAttribute("transform")}),k.attr("opacity",gi).attr("transform",function(t){var n=this.parentNode.__axis;return g(n&&isFinite(n=n(t))?n:w(t))})),A.remove(),b.attr("d",t===di||t==fi?"M"+p*h+","+y+"H0.5V"+m+"H"+p*h:"M"+y+","+p*h+"V0.5H"+m+"V"+p*h),M.attr("opacity",1).attr("transform",function(t){return g(w(t))}),N.attr(d+"2",p*l),T.attr(d,p*_).text(i),x.filter(a).attr("fill","none").attr("font-size",10).attr("font-family","sans-serif").attr("text-anchor",t===fi?"start":t===di?"end":"middle"),x.each(function(){this.__axis=w})}var u=[],s=null,c=null,l=6,h=6,f=3,p=t===hi||t===di?-1:1,d=t===di||t===fi?"x":"y",g=t===hi||t===pi?r:i;return e.scale=function(t){return arguments.length?(n=t,e):n},e.ticks=function(){return u=ci.call(arguments),e},e.tickArguments=function(t){return arguments.length?(u=null==t?[]:ci.call(t),e):u.slice()},e.tickValues=function(t){return arguments.length?(s=null==t?null:ci.call(t),e):s&&s.slice()},e.tickFormat=function(t){return arguments.length?(c=t,e):c},e.tickSize=function(t){return arguments.length?(l=h=+t,e):l},e.tickSizeInner=function(t){return arguments.length?(l=+t,e):l},e.tickSizeOuter=function(t){return arguments.length?(h=+t,e):h},e.tickPadding=function(t){return arguments.length?(f=+t,e):f},e}function s(t){return u(pi,t)}function c(t){return u(di,t)}function l(){for(var t,n=0,e=arguments.length,r={};n<e;++n){if(!(t=arguments[n]+"")||t in r)throw new Error("illegal type: "+t);r[t]=[]}return new h(r)}function h(t){this._=t}function f(t,n){return t.trim().split(/^|\s+/).map(function(t){var e="",r=t.indexOf(".");if(r>=0&&(e=t.slice(r+1),t=t.slice(0,r)),t&&!n.hasOwnProperty(t))throw new Error("unknown type: "+t);return{type:t,name:e}})}function p(t,n){for(var e,r=0,i=t.length;r<i;++r)if((e=t[r]).name===n)return e.value}function d(t,n,e){for(var r=0,i=t.length;r<i;++r)if(t[r].name===n){t[r]=_i,t=t.slice(0,r).concat(t.slice(r+1));break}return null!=e&&t.push({name:n,value:e}),t}function g(t){return function(){var n=this.ownerDocument,e=this.namespaceURI;return e===vi&&n.documentElement.namespaceURI===vi?n.createElement(t):n.createElementNS(e,t)}}function _(t){return function(){return this.ownerDocument.createElementNS(t.space,t.local)}}function v(t,n,e){return t=y(t,n,e),function(n){var e=n.relatedTarget;e&&(e===this||8&e.compareDocumentPosition(this))||t.call(this,n)}}function y(t,n,e){return function(r){var i=Ni;Ni=r;try{t.call(this,this.__data__,n,e)}finally{Ni=i}}}function m(t){return t.trim().split(/^|\s+/).map(function(t){var n="",e=t.indexOf(".");return e>=0&&(n=t.slice(e+1),t=t.slice(0,e)),{type:t,name:n}})}function w(t){return function(){var n=this.__on;if(n){for(var e,r=0,i=-1,o=n.length;r<o;++r)e=n[r],t.type&&e.type!==t.type||e.name!==t.name?n[++i]=e:this.removeEventListener(e.type,e.listener,e.capture);++i?n.length=i:delete this.__on}}}function x(t,n,e){var r=ki.hasOwnProperty(t.type)?v:y;return function(i,o,a){var u,s=this.__on,c=r(n,o,a);if(s)for(var l=0,h=s.length;l<h;++l)if((u=s[l]).type===t.type&&u.name===t.name)return this.removeEventListener(u.type,u.listener,u.capture),this.addEventListener(u.type,u.listener=c,u.capture=e),void(u.value=n);this.addEventListener(t.type,c,e),u={type:t.type,name:t.name,value:n,listener:c,capture:e},s?s.push(u):this.__on=[u]}}function b(){}function M(){return[]}function A(t,n){this.ownerDocument=t.ownerDocument,this.namespaceURI=t.namespaceURI,this._next=null,this._parent=t,this.__data__=n}function k(t,n,e,r,i,o){for(var a,u=0,s=n.length,c=o.length;u<c;++u)(a=n[u])?(a.__data__=o[u],r[u]=a):e[u]=new A(t,o[u]);for(;u<s;++u)(a=n[u])&&(i[u]=a)}function N(t,n,e,r,i,o,a){var u,s,c,l={},h=n.length,f=o.length,p=new Array(h);for(u=0;u<h;++u)(s=n[u])&&(p[u]=c=Li+a.call(s,s.__data__,u,n),c in l?i[u]=s:l[c]=s);for(u=0;u<f;++u)(s=l[c=Li+a.call(t,o[u],u,o)])?(r[u]=s,s.__data__=o[u],l[c]=null):e[u]=new A(t,o[u]);for(u=0;u<h;++u)(s=n[u])&&l[p[u]]===s&&(i[u]=s)}function T(t,n){return t<n?-1:t>n?1:t>=n?0:NaN}function C(t){return function(){this.removeAttribute(t)}}function S(t){return function(){this.removeAttributeNS(t.space,t.local)}}function D(t,n){return function(){this.setAttribute(t,n)}}function E(t,n){return function(){this.setAttributeNS(t.space,t.local,n)}}function U(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttribute(t):this.setAttribute(t,e)}}function P(t,n){return function(){var e=n.apply(this,arguments);null==e?this.removeAttributeNS(t.space,t.local):this.setAttributeNS(t.space,t.local,e)}}function F(t){return function(){this.style.removeProperty(t)}}function H(t,n,e){return function(){this.style.setProperty(t,n,e)}}function L(t,n,e){return function(){var r=n.apply(this,arguments);null==r?this.style.removeProperty(t):this.style.setProperty(t,r,e)}}function Y(t,n){return t.style.getPropertyValue(n)||Vi(t).getComputedStyle(t,null).getPropertyValue(n)}function O(t){return function(){delete this[t]}}function j(t,n){return function(){this[t]=n}}function z(t,n){return function(){var e=n.apply(this,arguments);null==e?delete this[t]:this[t]=e}}function I(t){return t.trim().split(/^|\s+/)}function q(t){return t.classList||new $(t)}function $(t){this._node=t,this._names=I(t.getAttribute("class")||"")}function X(t,n){for(var e=q(t),r=-1,i=n.length;++r<i;)e.add(n[r])}function B(t,n){for(var e=q(t),r=-1,i=n.length;++r<i;)e.remove(n[r])}function R(t){return function(){X(this,t)}}function W(t){return function(){B(this,t)}}function Z(t,n){return function(){(n.apply(this,arguments)?X:B)(this,t)}}function V(){this.textContent=""}function G(t){return function(){this.textContent=t}}function J(t){return function(){var n=t.apply(this,arguments);this.textContent=null==n?"":n}}function Q(){this.innerHTML=""}function K(t){return function(){this.innerHTML=t}}function tt(t){return function(){var n=t.apply(this,arguments);this.innerHTML=null==n?"":n}}function nt(){this.nextSibling&&this.parentNode.appendChild(this)}function et(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function rt(){return null}function it(){var t=this.parentNode;t&&t.removeChild(this)}function ot(t,n,e){var r=Vi(t),i=r.CustomEvent;"function"==typeof i?i=new i(n,e):(i=r.document.createEvent("Event"),e?(i.initEvent(n,e.bubbles,e.cancelable),i.detail=e.detail):i.initEvent(n,!1,!1)),t.dispatchEvent(i)}function at(t,n){return function(){return ot(this,t,n)}}function ut(t,n){return function(){return ot(this,t,n.apply(this,arguments))}}function st(t,n){this._groups=t,this._parents=n}function ct(){return new st([[document.documentElement]],so)}function lt(t,n){var e=Object.create(t.prototype);for(var r in n)e[r]=n[r];return e}function ht(){}function ft(t){var n;return t=(t+"").trim().toLowerCase(),(n=go.exec(t))?(n=parseInt(n[1],16),new vt(n>>8&15|n>>4&240,n>>4&15|240&n,(15&n)<<4|15&n,1)):(n=_o.exec(t))?pt(parseInt(n[1],16)):(n=vo.exec(t))?new vt(n[1],n[2],n[3],1):(n=yo.exec(t))?new vt(255*n[1]/100,255*n[2]/100,255*n[3]/100,1):(n=mo.exec(t))?dt(n[1],n[2],n[3],n[4]):(n=wo.exec(t))?dt(255*n[1]/100,255*n[2]/100,255*n[3]/100,n[4]):(n=xo.exec(t))?yt(n[1],n[2]/100,n[3]/100,1):(n=bo.exec(t))?yt(n[1],n[2]/100,n[3]/100,n[4]):Mo.hasOwnProperty(t)?pt(Mo[t]):"transparent"===t?new vt(NaN,NaN,NaN,0):null}function pt(t){return new vt(t>>16&255,t>>8&255,255&t,1)}function dt(t,n,e,r){return r<=0&&(t=n=e=NaN),new vt(t,n,e,r)}function gt(t){return t instanceof ht||(t=ft(t)),t?(t=t.rgb(),new vt(t.r,t.g,t.b,t.opacity)):new vt}function _t(t,n,e,r){return 1===arguments.length?gt(t):new vt(t,n,e,null==r?1:r)}function vt(t,n,e,r){this.r=+t,this.g=+n,this.b=+e,this.opacity=+r}function yt(t,n,e,r){return r<=0?t=n=e=NaN:e<=0||e>=1?t=n=NaN:n<=0&&(t=NaN),new xt(t,n,e,r)}function mt(t){if(t instanceof xt)return new xt(t.h,t.s,t.l,t.opacity);if(t instanceof ht||(t=ft(t)),!t)return new xt;if(t instanceof xt)return t;var n=(t=t.rgb()).r/255,e=t.g/255,r=t.b/255,i=Math.min(n,e,r),o=Math.max(n,e,r),a=NaN,u=o-i,s=(o+i)/2;return u?(a=n===o?(e-r)/u+6*(e<r):e===o?(r-n)/u+2:(n-e)/u+4,u/=s<.5?o+i:2-o-i,a*=60):u=s>0&&s<1?0:a,new xt(a,u,s,t.opacity)}function wt(t,n,e,r){return 1===arguments.length?mt(t):new xt(t,n,e,null==r?1:r)}function xt(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function bt(t,n,e){return 255*(t<60?n+(e-n)*t/60:t<180?e:t<240?n+(e-n)*(240-t)/60:n)}function Mt(t){if(t instanceof kt)return new kt(t.l,t.a,t.b,t.opacity);if(t instanceof Ut){var n=t.h*Ao;return new kt(t.l,Math.cos(n)*t.c,Math.sin(n)*t.c,t.opacity)}t instanceof vt||(t=gt(t));var e=St(t.r),r=St(t.g),i=St(t.b),o=Nt((.4124564*e+.3575761*r+.1804375*i)/No),a=Nt((.2126729*e+.7151522*r+.072175*i)/To);return new kt(116*a-16,500*(o-a),200*(a-Nt((.0193339*e+.119192*r+.9503041*i)/Co)),t.opacity)}function At(t,n,e,r){return 1===arguments.length?Mt(t):new kt(t,n,e,null==r?1:r)}function kt(t,n,e,r){this.l=+t,this.a=+n,this.b=+e,this.opacity=+r}function Nt(t){return t>Uo?Math.pow(t,1/3):t/Eo+So}function Tt(t){return t>Do?t*t*t:Eo*(t-So)}function Ct(t){return 255*(t<=.0031308?12.92*t:1.055*Math.pow(t,1/2.4)-.055)}function St(t){return(t/=255)<=.04045?t/12.92:Math.pow((t+.055)/1.055,2.4)}function Dt(t){if(t instanceof Ut)return new Ut(t.h,t.c,t.l,t.opacity);t instanceof kt||(t=Mt(t));var n=Math.atan2(t.b,t.a)*ko;return new Ut(n<0?n+360:n,Math.sqrt(t.a*t.a+t.b*t.b),t.l,t.opacity)}function Et(t,n,e,r){return 1===arguments.length?Dt(t):new Ut(t,n,e,null==r?1:r)}function Ut(t,n,e,r){this.h=+t,this.c=+n,this.l=+e,this.opacity=+r}function Pt(t){if(t instanceof Ht)return new Ht(t.h,t.s,t.l,t.opacity);t instanceof vt||(t=gt(t));var n=t.r/255,e=t.g/255,r=t.b/255,i=(zo*r+Oo*n-jo*e)/(zo+Oo-jo),o=r-i,a=(Yo*(e-i)-Ho*o)/Lo,u=Math.sqrt(a*a+o*o)/(Yo*i*(1-i)),s=u?Math.atan2(a,o)*ko-120:NaN;return new Ht(s<0?s+360:s,u,i,t.opacity)}function Ft(t,n,e,r){return 1===arguments.length?Pt(t):new Ht(t,n,e,null==r?1:r)}function Ht(t,n,e,r){this.h=+t,this.s=+n,this.l=+e,this.opacity=+r}function Lt(t,n){return function(e){return t+e*n}}function Yt(t,n,e){return t=Math.pow(t,e),n=Math.pow(n,e)-t,e=1/e,function(r){return Math.pow(t+r*n,e)}}function Ot(t,n){var e=n-t;return e?Lt(t,e>180||e<-180?e-360*Math.round(e/360):e):Bo(isNaN(t)?n:t)}function jt(t){return 1==(t=+t)?zt:function(n,e){return e-n?Yt(n,e,t):Bo(isNaN(n)?e:n)}}function zt(t,n){var e=n-t;return e?Lt(t,e):Bo(isNaN(t)?n:t)}function It(t){return function(){return t}}function qt(t){return function(n){return t(n)+""}}function $t(t){return"none"===t?ra:(Io||(Io=document.createElement("DIV"),qo=document.documentElement,$o=document.defaultView),Io.style.transform=t,t=$o.getComputedStyle(qo.appendChild(Io),null).getPropertyValue("transform"),qo.removeChild(Io),t=t.slice(7,-1).split(","),ia(+t[0],+t[1],+t[2],+t[3],+t[4],+t[5]))}function Xt(t){return null==t?ra:(Xo||(Xo=document.createElementNS("http://www.w3.org/2000/svg","g")),Xo.setAttribute("transform",t),(t=Xo.transform.baseVal.consolidate())?(t=t.matrix,ia(t.a,t.b,t.c,t.d,t.e,t.f)):ra)}function Bt(t,n,e,r){function i(t){return t.length?t.pop()+" ":""}function o(t,r,i,o,a,u){if(t!==i||r!==o){var s=a.push("translate(",null,n,null,e);u.push({i:s-4,x:Vo(t,i)},{i:s-2,x:Vo(r,o)})}else(i||o)&&a.push("translate("+i+n+o+e)}function a(t,n,e,o){t!==n?(t-n>180?n+=360:n-t>180&&(t+=360),o.push({i:e.push(i(e)+"rotate(",null,r)-2,x:Vo(t,n)})):n&&e.push(i(e)+"rotate("+n+r)}function u(t,n,e,o){t!==n?o.push({i:e.push(i(e)+"skewX(",null,r)-2,x:Vo(t,n)}):n&&e.push(i(e)+"skewX("+n+r)}function s(t,n,e,r,o,a){if(t!==e||n!==r){var u=o.push(i(o)+"scale(",null,",",null,")");a.push({i:u-4,x:Vo(t,e)},{i:u-2,x:Vo(n,r)})}else 1===e&&1===r||o.push(i(o)+"scale("+e+","+r+")")}return function(n,e){var r=[],i=[];return n=t(n),e=t(e),o(n.translateX,n.translateY,e.translateX,e.translateY,r,i),a(n.rotate,e.rotate,r,i),u(n.skewX,e.skewX,r,i),s(n.scaleX,n.scaleY,e.scaleX,e.scaleY,r,i),n=e=null,function(t){for(var n,e=-1,o=i.length;++e<o;)r[(n=i[e]).i]=n.x(t);return r.join("")}}}function Rt(t){return function n(e){function r(n,r){var i=t((n=Ft(n)).h,(r=Ft(r)).h),o=zt(n.s,r.s),a=zt(n.l,r.l),u=zt(n.opacity,r.opacity);return function(t){return n.h=i(t),n.s=o(t),n.l=a(Math.pow(t,e)),n.opacity=u(t),n+""}}return e=+e,r.gamma=n,r}(1)}function Wt(){return ga||(ya(Zt),ga=va.now()+_a)}function Zt(){ga=0}function Vt(){this._call=this._time=this._next=null}function Gt(t,n,e){var r=new Vt;return r.restart(t,n,e),r}function Jt(){Wt(),++la;for(var t,n=ua;n;)(t=ga-n._time)>=0&&n._call.call(null,t),n=n._next;--la}function Qt(){ga=(da=va.now())+_a,la=ha=0;try{Jt()}finally{la=0,tn(),ga=0}}function Kt(){var t=va.now(),n=t-da;n>pa&&(_a-=n,da=t)}function tn(){for(var t,n,e=ua,r=1/0;e;)e._call?(r>e._time&&(r=e._time),t=e,e=e._next):(n=e._next,e._next=null,e=t?t._next=n:ua=n);sa=t,nn(r)}function nn(t){if(!la){ha&&(ha=clearTimeout(ha));var n=t-ga;n>24?(t<1/0&&(ha=setTimeout(Qt,n)),fa&&(fa=clearInterval(fa))):(fa||(da=ga,fa=setInterval(Kt,pa)),la=1,ya(Qt))}}function en(t,n){var e=t.__transition;if(!e||!(e=e[n])||e.state>ba)throw new Error("too late");return e}function rn(t,n){var e=t.__transition;if(!e||!(e=e[n])||e.state>Aa)throw new Error("too late");return e}function on(t,n){var e=t.__transition;if(!e||!(e=e[n]))throw new Error("too late");return e}function an(t,n,e){function r(t){e.state=Ma,e.timer.restart(i,e.delay,e.time),e.delay<=t&&i(t-e.delay)}function i(r){var c,l,h,f;if(e.state!==Ma)return a();for(c in s)if((f=s[c]).name===e.name){if(f.state===ka)return ma(i);f.state===Na?(f.state=Ca,f.timer.stop(),f.on.call("interrupt",t,t.__data__,f.index,f.group),delete s[c]):+c<n&&(f.state=Ca,f.timer.stop(),delete s[c])}if(ma(function(){e.state===ka&&(e.state=Na,e.timer.restart(o,e.delay,e.time),o(r))}),e.state=Aa,e.on.call("start",t,t.__data__,e.index,e.group),e.state===Aa){for(e.state=ka,u=new Array(h=e.tween.length),c=0,l=-1;c<h;++c)(f=e.tween[c].value.call(t,t.__data__,e.index,e.group))&&(u[++l]=f);u.length=l+1}}function o(n){for(var r=n<e.duration?e.ease.call(null,n/e.duration):(e.timer.restart(a),e.state=Ta,1),i=-1,o=u.length;++i<o;)u[i].call(null,r);e.state===Ta&&(e.on.call("end",t,t.__data__,e.index,e.group),a())}function a(){e.state=Ca,e.timer.stop(),delete s[n];for(var r in s)return;delete t.__transition}var u,s=t.__transition;s[n]=e,e.timer=Gt(r,0,e.time)}function un(t,n){var e,r;return function(){var i=rn(this,t),o=i.tween;if(o!==e)for(var a=0,u=(r=e=o).length;a<u;++a)if(r[a].name===n){(r=r.slice()).splice(a,1);break}i.tween=r}}function sn(t,n,e){var r,i;if("function"!=typeof e)throw new Error;return function(){var o=rn(this,t),a=o.tween;if(a!==r){i=(r=a).slice();for(var u={name:n,value:e},s=0,c=i.length;s<c;++s)if(i[s].name===n){i[s]=u;break}s===c&&i.push(u)}o.tween=i}}function cn(t,n,e){var r=t._id;return t.each(function(){var t=rn(this,r);(t.value||(t.value={}))[n]=e.apply(this,arguments)}),function(t){return on(t,r).value[n]}}function ln(t){return function(){this.removeAttribute(t)}}function hn(t){return function(){this.removeAttributeNS(t.space,t.local)}}function fn(t,n,e){var r,i;return function(){var o=this.getAttribute(t);return o===e?null:o===r?i:i=n(r=o,e)}}function pn(t,n,e){var r,i;return function(){var o=this.getAttributeNS(t.space,t.local);return o===e?null:o===r?i:i=n(r=o,e)}}function dn(t,n,e){var r,i,o;return function(){var a,u=e(this);{if(null!=u)return a=this.getAttribute(t),a===u?null:a===r&&u===i?o:o=n(r=a,i=u);this.removeAttribute(t)}}}function gn(t,n,e){var r,i,o;return function(){var a,u=e(this);{if(null!=u)return a=this.getAttributeNS(t.space,t.local),a===u?null:a===r&&u===i?o:o=n(r=a,i=u);this.removeAttributeNS(t.space,t.local)}}}function _n(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttributeNS(t.space,t.local,r(n))}}return e._value=n,e}function vn(t,n){function e(){var e=this,r=n.apply(e,arguments);return r&&function(n){e.setAttribute(t,r(n))}}return e._value=n,e}function yn(t,n){return function(){en(this,t).delay=+n.apply(this,arguments)}}function mn(t,n){return n=+n,function(){en(this,t).delay=n}}function wn(t,n){return function(){rn(this,t).duration=+n.apply(this,arguments)}}function xn(t,n){return n=+n,function(){rn(this,t).duration=n}}function bn(t,n){if("function"!=typeof n)throw new Error;return function(){rn(this,t).ease=n}}function Mn(t){return(t+"").trim().split(/^|\s+/).every(function(t){var n=t.indexOf(".");return n>=0&&(t=t.slice(0,n)),!t||"start"===t})}function An(t,n,e){var r,i,o=Mn(n)?en:rn;return function(){var a=o(this,t),u=a.on;u!==r&&(i=(r=u).copy()).on(n,e),a.on=i}}function kn(t){return function(){var n=this.parentNode;for(var e in this.__transition)if(+e!==t)return;n&&n.removeChild(this)}}function Nn(t,n){var e,r,i;return function(){var o=Y(this,t),a=(this.style.removeProperty(t),Y(this,t));return o===a?null:o===e&&a===r?i:i=n(e=o,r=a)}}function Tn(t){return function(){this.style.removeProperty(t)}}function Cn(t,n,e){var r,i;return function(){var o=Y(this,t);return o===e?null:o===r?i:i=n(r=o,e)}}function Sn(t,n,e){var r,i,o;return function(){var a=Y(this,t),u=e(this);return null==u&&(this.style.removeProperty(t),u=Y(this,t)),a===u?null:a===r&&u===i?o:o=n(r=a,i=u)}}function Dn(t,n,e){function r(){var r=this,i=n.apply(r,arguments);return i&&function(n){r.style.setProperty(t,i(n),e)}}return r._value=n,r}function En(t){return function(){this.textContent=t}}function Un(t){return function(){var n=t(this);this.textContent=null==n?"":n}}function Pn(t,n,e,r){this._groups=t,this._parents=n,this._name=e,this._id=r}function Fn(t){return ct().transition(t)}function Hn(){return++Ja}function Ln(t){return((t*=2)<=1?t*t*t:(t-=2)*t*t+2)/2}function Yn(t,n){for(var e;!(e=t.__transition)||!(e=e[n]);)if(!(t=t.parentNode))return tu.time=Wt(),tu;return e}function On(t){return{type:t}}function jn(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function zn(){return new jn}function In(){}function qn(t,n){var e=new In;if(t instanceof In)t.each(function(t,n){e.set(n,t)});else if(Array.isArray(t)){var r,i=-1,o=t.length;if(null==n)for(;++i<o;)e.set(i,t[i]);else for(;++i<o;)e.set(n(r=t[i],i,t),r)}else if(t)for(var a in t)e.set(a,t[a]);return e}function $n(){}function Xn(t,n){var e=new $n;if(t instanceof $n)t.each(function(t){e.add(t)});else if(t){var r=-1,i=t.length;if(null==n)for(;++r<i;)e.add(t[r]);else for(;++r<i;)e.add(n(t[r],r,t))}return e}function Bn(t){return new Function("d","return {"+t.map(function(t,n){return JSON.stringify(t)+": d["+n+"]"}).join(",")+"}")}function Rn(t,n){var e=Bn(t);return function(r,i){return n(e(r),i,t)}}function Wn(t){var n=Object.create(null),e=[];return t.forEach(function(t){for(var r in t)r in n||e.push(n[r]=r)}),e}function Zn(t,n,e,r){if(isNaN(n)||isNaN(e))return t;var i,o,a,u,s,c,l,h,f,p=t._root,d={data:r},g=t._x0,_=t._y0,v=t._x1,y=t._y1;if(!p)return t._root=d,t;for(;p.length;)if((c=n>=(o=(g+v)/2))?g=o:v=o,(l=e>=(a=(_+y)/2))?_=a:y=a,i=p,!(p=p[h=l<<1|c]))return i[h]=d,t;if(u=+t._x.call(null,p.data),s=+t._y.call(null,p.data),n===u&&e===s)return d.next=p,i?i[h]=d:t._root=d,t;do{i=i?i[h]=new Array(4):t._root=new Array(4),(c=n>=(o=(g+v)/2))?g=o:v=o,(l=e>=(a=(_+y)/2))?_=a:y=a}while((h=l<<1|c)==(f=(s>=a)<<1|u>=o));return i[f]=p,i[h]=d,t}function Vn(t){var n,e,r,i,o=t.length,a=new Array(o),u=new Array(o),s=1/0,c=1/0,l=-1/0,h=-1/0;for(e=0;e<o;++e)isNaN(r=+this._x.call(null,n=t[e]))||isNaN(i=+this._y.call(null,n))||(a[e]=r,u[e]=i,r<s&&(s=r),r>l&&(l=r),i<c&&(c=i),i>h&&(h=i));for(l<s&&(s=this._x0,l=this._x1),h<c&&(c=this._y0,h=this._y1),this.cover(s,c).cover(l,h),e=0;e<o;++e)Zn(this,a[e],u[e],t[e]);return this}function Gn(t){for(var n=0,e=t.length;n<e;++n)this.remove(t[n]);return this}function Jn(t){return t[0]}function Qn(t){return t[1]}function Kn(t,n,e){var r=new te(null==n?Jn:n,null==e?Qn:e,NaN,NaN,NaN,NaN);return null==t?r:r.addAll(t)}function te(t,n,e,r,i,o){this._x=t,this._y=n,this._x0=e,this._y0=r,this._x1=i,this._y1=o,this._root=void 0}function ne(t){for(var n={data:t.data},e=n;t=t.next;)e=e.next={data:t.data};return n}function ee(t){return new re(t)}function re(t){if(!(n=Cu.exec(t)))throw new Error("invalid format: "+t);var n,e=n[1]||" ",r=n[2]||">",i=n[3]||"-",o=n[4]||"",a=!!n[5],u=n[6]&&+n[6],s=!!n[7],c=n[8]&&+n[8].slice(1),l=n[9]||"";"n"===l?(s=!0,l="g"):Tu[l]||(l=""),(a||"0"===e&&"="===r)&&(a=!0,e="0",r="="),this.fill=e,this.align=r,this.sign=i,this.symbol=o,this.zero=a,this.width=u,this.comma=s,this.precision=c,this.type=l}function ie(){this.reset()}function oe(t,n,e){var r=t.s=n+e,i=r-n,o=r-i;t.t=n-o+(e-i)}function ae(t){return t>1?0:t<-1?zu:Math.acos(t)}function ue(t){return t>1?Iu:t<-1?-Iu:Math.asin(t)}function se(t){return function(n,e){var r=Xu(n),i=Xu(e),o=t(r*i);return[o*i*Bu(n),o*Bu(e)]}}function ce(t){return function(n,e){var r=Ru(n*n+e*e),i=t(r),o=Bu(i),a=Xu(i);return[$u(n*o,r*a),ue(r&&e*o/r)]}}function le(t){var n=0,e=t.children,r=e&&e.length;if(r)for(;--r>=0;)n+=e[r].value;else n=1;t.value=n}function he(t,n){if(t===n)return t;var e=t.ancestors(),r=n.ancestors(),i=null;for(t=e.pop(),n=r.pop();t===n;)i=t,t=e.pop(),n=r.pop();return i}function fe(t,n){var e,r,i,o,a,u=new ve(t),s=+t.value&&(u.value=t.value),c=[u];for(null==n&&(n=de);e=c.pop();)if(s&&(e.value=+e.data.value),(i=n(e.data))&&(a=i.length))for(e.children=new Array(a),o=a-1;o>=0;--o)c.push(r=e.children[o]=new ve(i[o])),r.parent=e,r.depth=e.depth+1;return u.eachBefore(_e)}function pe(){return fe(this).eachBefore(ge)}function de(t){return t.children}function ge(t){t.data=t.data.data}function _e(t){var n=0;do{t.height=n}while((t=t.parent)&&t.height<++n)}function ve(t){this.data=t,this.depth=this.height=0,this.parent=null}function ye(t,n){this._=t,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=n}function me(t){if(!t._start)try{we(t)}catch(n){if(t._tasks[t._ended+t._active-1])be(t,n);else if(!t._data)throw n}}function we(t){for(;t._start=t._waiting&&t._active<t._size;){var n=t._ended+t._active,e=t._tasks[n],r=e.length-1,i=e[r];e[r]=xe(t,n),--t._waiting,++t._active,e=i.apply(null,e),t._tasks[n]&&(t._tasks[n]=e||is)}}function xe(t,n){return function(e,r){t._tasks[n]&&(--t._active,++t._ended,t._tasks[n]=null,null==t._error&&(null!=e?be(t,e):(t._data[n]=r,t._waiting?me(t):Me(t))))}}function be(t,n){var e,r=t._tasks.length;for(t._error=n,t._data=void 0,t._waiting=NaN;--r>=0;)if((e=t._tasks[r])&&(t._tasks[r]=null,e.abort))try{e.abort()}catch(n){}t._active=NaN,Me(t)}function Me(t){if(!t._active&&t._call){var n=t._data;t._data=void 0,t._call(t._error,n)}}function Ae(t,n){return(n-=t=+t)?function(e){return(e-t)/n}:ss(n)}function ke(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=n?0:t>=e?1:r(t)}}}function Ne(t){return function(n,e){var r=t(n=+n,e=+e);return function(t){return t<=0?n:t>=1?e:r(t)}}}function Te(t,n,e,r){var i=t[0],o=t[1],a=n[0],u=n[1];return o<i?(i=e(o,i),a=r(u,a)):(i=e(i,o),a=r(a,u)),function(t){return a(i(t))}}function Ce(t,n,e,r){var i=Math.min(t.length,n.length)-1,o=new Array(i),a=new Array(i),u=-1;for(t[i]<t[0]&&(t=t.slice().reverse(),n=n.slice().reverse());++u<i;)o[u]=e(t[u],t[u+1]),a[u]=r(n[u],n[u+1]);return function(n){var e=ei(t,n,1,i)-1;return a[e](o[e](n))}}function Se(t,n){return n.domain(t.domain()).range(t.range()).interpolate(t.interpolate()).clamp(t.clamp())}function De(t,n){function e(){return i=Math.min(u.length,s.length)>2?Ce:Te,o=a=null,r}function r(n){return(o||(o=i(u,s,l?ke(t):t,c)))(+n)}var i,o,a,u=ls,s=ls,c=ta,l=!1;return r.invert=function(t){return(a||(a=i(s,u,Ae,l?Ne(n):n)))(+t)},r.domain=function(t){return arguments.length?(u=as.call(t,cs),e()):u.slice()},r.range=function(t){return arguments.length?(s=us.call(t),e()):s.slice()},r.rangeRound=function(t){return s=us.call(t),c=na,e()},r.clamp=function(t){return arguments.length?(l=!!t,e()):l},r.interpolate=function(t){return arguments.length?(c=t,e()):c},e()}function Ee(t){var e=t.domain;return t.ticks=function(t){var n=e();return ai(n[0],n[n.length-1],null==t?10:t)},t.tickFormat=function(t,n){return hs(e(),t,n)},t.nice=function(r){null==r&&(r=10);var i,o=e(),a=0,u=o.length-1,s=o[a],c=o[u];return c<s&&(i=s,s=c,c=i,i=a,a=u,u=i),i=n(s,c,r),i>0?i=n(s=Math.floor(s/i)*i,c=Math.ceil(c/i)*i,r):i<0&&(i=n(s=Math.ceil(s*i)/i,c=Math.floor(c*i)/i,r)),i>0?(o[a]=Math.floor(s/i)*i,o[u]=Math.ceil(c/i)*i,e(o)):i<0&&(o[a]=Math.ceil(s*i)/i,o[u]=Math.floor(c*i)/i,e(o)),t},t}function Ue(){var t=De(Ae,Vo);return t.copy=function(){return Se(t,Ue())},Ee(t)}function Pe(t,n,e,r){function i(n){return t(n=new Date(+n)),n}return i.floor=i,i.ceil=function(e){return t(e=new Date(e-1)),n(e,1),t(e),e},i.round=function(t){var n=i(t),e=i.ceil(t);return t-n<e-t?n:e},i.offset=function(t,e){return n(t=new Date(+t),null==e?1:Math.floor(e)),t},i.range=function(e,r,o){var a=[];if(e=i.ceil(e),o=null==o?1:Math.floor(o),!(e<r&&o>0))return a;do{a.push(new Date(+e))}while(n(e,o),t(e),e<r);return a},i.filter=function(e){return Pe(function(n){if(n>=n)for(;t(n),!e(n);)n.setTime(n-1)},function(t,r){if(t>=t)for(;--r>=0;)for(;n(t,1),!e(t););})},e&&(i.count=function(n,r){return ps.setTime(+n),ds.setTime(+r),t(ps),t(ds),Math.floor(e(ps,ds))},i.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?i.filter(r?function(n){return r(n)%t==0}:function(n){return i.count(0,n)%t==0}):i:null}),i}function Fe(t){return Pe(function(n){n.setDate(n.getDate()-(n.getDay()+7-t)%7),n.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+7*n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*_s)/vs})}function He(t){return Pe(function(n){n.setUTCDate(n.getUTCDate()-(n.getUTCDay()+7-t)%7),n.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+7*n)},function(t,n){return(n-t)/vs})}function Le(t){if(0<=t.y&&t.y<100){var n=new Date(-1,t.m,t.d,t.H,t.M,t.S,t.L);return n.setFullYear(t.y),n}return new Date(t.y,t.m,t.d,t.H,t.M,t.S,t.L)}function Ye(t){if(0<=t.y&&t.y<100){var n=new Date(Date.UTC(-1,t.m,t.d,t.H,t.M,t.S,t.L));return n.setUTCFullYear(t.y),n}return new Date(Date.UTC(t.y,t.m,t.d,t.H,t.M,t.S,t.L))}function Oe(t){return{y:t,m:0,d:1,H:0,M:0,S:0,L:0}}function je(t){function n(t,n){return function(e){var r,i,o,a=[],u=-1,s=0,c=t.length;for(e instanceof Date||(e=new Date(+e));++u<c;)37===t.charCodeAt(u)&&(a.push(t.slice(s,u)),null!=(i=Hs[r=t.charAt(++u)])?r=t.charAt(++u):i="e"===r?" ":"0",(o=n[r])&&(r=o(e,i)),a.push(r),s=u+1);return a.push(t.slice(s,u)),a.join("")}}function e(t,n){return function(e){var i=Oe(1900);if(r(i,t,e+="",0)!=e.length)return null;if("p"in i&&(i.H=i.H%12+12*i.p),"W"in i||"U"in i){"w"in i||(i.w="W"in i?1:0);var o="Z"in i?Ye(Oe(i.y)).getUTCDay():n(Oe(i.y)).getDay();i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(o+5)%7:i.w+7*i.U-(o+6)%7}return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,Ye(i)):n(i)}}function r(t,n,e,r){for(var i,o,a=0,u=n.length,s=e.length;a<u;){if(r>=s)return-1;if(37===(i=n.charCodeAt(a++))){if(i=n.charAt(a++),!(o=q[i in Hs?n.charAt(a++):i])||(r=o(t,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}function i(t,n,e){var r=D.exec(n.slice(e));return r?(t.p=E[r[0].toLowerCase()],e+r[0].length):-1}function o(t,n,e){var r=F.exec(n.slice(e));return r?(t.w=H[r[0].toLowerCase()],e+r[0].length):-1}function a(t,n,e){var r=U.exec(n.slice(e));return r?(t.w=P[r[0].toLowerCase()],e+r[0].length):-1}function u(t,n,e){var r=O.exec(n.slice(e));return r?(t.m=j[r[0].toLowerCase()],e+r[0].length):-1}function s(t,n,e){var r=L.exec(n.slice(e));return r?(t.m=Y[r[0].toLowerCase()],e+r[0].length):-1}function c(t,n,e){return r(t,b,n,e)}function l(t,n,e){return r(t,M,n,e)}function h(t,n,e){return r(t,A,n,e)}function f(t){return T[t.getDay()]}function p(t){return N[t.getDay()]}function d(t){return S[t.getMonth()]}function g(t){return C[t.getMonth()]}function _(t){return k[+(t.getHours()>=12)]}function v(t){return T[t.getUTCDay()]}function y(t){return N[t.getUTCDay()]}function m(t){return S[t.getUTCMonth()]}function w(t){return C[t.getUTCMonth()]}function x(t){return k[+(t.getUTCHours()>=12)]}var b=t.dateTime,M=t.date,A=t.time,k=t.periods,N=t.days,T=t.shortDays,C=t.months,S=t.shortMonths,D=qe(k),E=$e(k),U=qe(N),P=$e(N),F=qe(T),H=$e(T),L=qe(C),Y=$e(C),O=qe(S),j=$e(S),z={a:f,A:p,b:d,B:g,c:null,d:ir,e:ir,H:or,I:ar,j:ur,L:sr,m:cr,M:lr,p:_,S:hr,U:fr,w:pr,W:dr,x:null,X:null,y:gr,Y:_r,Z:vr,"%":Ur},I={a:v,A:y,b:m,B:w,c:null,d:yr,e:yr,H:mr,I:wr,j:xr,L:br,m:Mr,M:Ar,p:x,S:kr,U:Nr,w:Tr,W:Cr,x:null,X:null,y:Sr,Y:Dr,Z:Er,"%":Ur},q={a:o,A:a,b:u,B:s,c:c,d:Je,e:Je,H:Ke,I:Ke,j:Qe,L:er,m:Ge,M:tr,p:i,S:nr,U:Be,w:Xe,W:Re,x:l,X:h,y:Ze,Y:We,Z:Ve,"%":rr};return z.x=n(M,z),z.X=n(A,z),z.c=n(b,z),I.x=n(M,I),I.X=n(A,I),I.c=n(b,I),{format:function(t){var e=n(t+="",z);return e.toString=function(){return t},e},parse:function(t){var n=e(t+="",Le);return n.toString=function(){return t},n},utcFormat:function(t){var e=n(t+="",I);return e.toString=function(){return t},e},utcParse:function(t){var n=e(t,Ye);return n.toString=function(){return t},n}}}function ze(t,n,e){var r=t<0?"-":"",i=(r?-t:t)+"",o=i.length;return r+(o<e?new Array(e-o+1).join(n)+i:i)}function Ie(t){return t.replace(Os,"\\$&")}function qe(t){return new RegExp("^(?:"+t.map(Ie).join("|")+")","i")}function $e(t){for(var n={},e=-1,r=t.length;++e<r;)n[t[e].toLowerCase()]=e;return n}function Xe(t,n,e){var r=Ls.exec(n.slice(e,e+1));return r?(t.w=+r[0],e+r[0].length):-1}function Be(t,n,e){var r=Ls.exec(n.slice(e));return r?(t.U=+r[0],e+r[0].length):-1}function Re(t,n,e){var r=Ls.exec(n.slice(e));return r?(t.W=+r[0],e+r[0].length):-1}function We(t,n,e){var r=Ls.exec(n.slice(e,e+4));return r?(t.y=+r[0],e+r[0].length):-1}function Ze(t,n,e){var r=Ls.exec(n.slice(e,e+2));return r?(t.y=+r[0]+(+r[0]>68?1900:2e3),e+r[0].length):-1}function Ve(t,n,e){var r=/^(Z)|([+-]\d\d)(?:\:?(\d\d))?/.exec(n.slice(e,e+6));return r?(t.Z=r[1]?0:-(r[2]+(r[3]||"00")),e+r[0].length):-1}function Ge(t,n,e){var r=Ls.exec(n.slice(e,e+2));return r?(t.m=r[0]-1,e+r[0].length):-1}function Je(t,n,e){var r=Ls.exec(n.slice(e,e+2));return r?(t.d=+r[0],e+r[0].length):-1}function Qe(t,n,e){var r=Ls.exec(n.slice(e,e+3));return r?(t.m=0,t.d=+r[0],e+r[0].length):-1}function Ke(t,n,e){var r=Ls.exec(n.slice(e,e+2));return r?(t.H=+r[0],e+r[0].length):-1}function tr(t,n,e){var r=Ls.exec(n.slice(e,e+2));return r?(t.M=+r[0],e+r[0].length):-1}function nr(t,n,e){var r=Ls.exec(n.slice(e,e+2));return r?(t.S=+r[0],e+r[0].length):-1}function er(t,n,e){var r=Ls.exec(n.slice(e,e+3));return r?(t.L=+r[0],e+r[0].length):-1}function rr(t,n,e){var r=Ys.exec(n.slice(e,e+1));return r?e+r[0].length:-1}function ir(t,n){return ze(t.getDate(),n,2)}function or(t,n){return ze(t.getHours(),n,2)}function ar(t,n){return ze(t.getHours()%12||12,n,2)}function ur(t,n){return ze(1+xs.count(ks(t),t),n,3)}function sr(t,n){return ze(t.getMilliseconds(),n,3)}function cr(t,n){return ze(t.getMonth()+1,n,2)}function lr(t,n){return ze(t.getMinutes(),n,2)}function hr(t,n){return ze(t.getSeconds(),n,2)}function fr(t,n){return ze(bs.count(ks(t),t),n,2)}function pr(t){return t.getDay()}function dr(t,n){return ze(Ms.count(ks(t),t),n,2)}function gr(t,n){return ze(t.getFullYear()%100,n,2)}function _r(t,n){return ze(t.getFullYear()%1e4,n,4)}function vr(t){var n=t.getTimezoneOffset();return(n>0?"-":(n*=-1,"+"))+ze(n/60|0,"0",2)+ze(n%60,"0",2)}function yr(t,n){return ze(t.getUTCDate(),n,2)}function mr(t,n){return ze(t.getUTCHours(),n,2)}function wr(t,n){return ze(t.getUTCHours()%12||12,n,2)}function xr(t,n){return ze(1+Ns.count(Ss(t),t),n,3)}function br(t,n){return ze(t.getUTCMilliseconds(),n,3)}function Mr(t,n){return ze(t.getUTCMonth()+1,n,2)}function Ar(t,n){return ze(t.getUTCMinutes(),n,2)}function kr(t,n){return ze(t.getUTCSeconds(),n,2)}function Nr(t,n){return ze(Ts.count(Ss(t),t),n,2)}function Tr(t){return t.getUTCDay()}function Cr(t,n){return ze(Cs.count(Ss(t),t),n,2)}function Sr(t,n){return ze(t.getUTCFullYear()%100,n,2)}function Dr(t,n){return ze(t.getUTCFullYear()%1e4,n,4)}function Er(){return"+0000"}function Ur(){return"%"}function Pr(t){return t.toISOString()}function Fr(t){var n=new Date(t);return isNaN(n)?null:n}function Hr(t){return new Date(t)}function Lr(t){return t instanceof Date?+t:+new Date(+t)}function Yr(t,n,r,i,o,a,u,s,c){function l(e){return(u(e)<e?g:a(e)<e?_:o(e)<e?v:i(e)<e?y:n(e)<e?r(e)<e?m:w:t(e)<e?x:b)(e)}function h(n,r,i,o){if(null==n&&(n=10),"number"==typeof n){var a=Math.abs(i-r)/n,u=ni(function(t){return t[2]}).right(M,a);u===M.length?(o=e(r/Bs,i/Bs,n),n=t):u?(o=(u=M[a/M[u-1][2]<M[u][2]/a?u-1:u])[1],n=u[0]):(o=e(r,i,n),n=s)}return null==o?n:n.every(o)}var f=De(Ae,Vo),p=f.invert,d=f.domain,g=c(".%L"),_=c(":%S"),v=c("%I:%M"),y=c("%I %p"),m=c("%a %d"),w=c("%b %d"),x=c("%B"),b=c("%Y"),M=[[u,1,js],[u,5,5*js],[u,15,15*js],[u,30,30*js],[a,1,zs],[a,5,5*zs],[a,15,15*zs],[a,30,30*zs],[o,1,Is],[o,3,3*Is],[o,6,6*Is],[o,12,12*Is],[i,1,qs],[i,2,2*qs],[r,1,$s],[n,1,Xs],[n,3,3*Xs],[t,1,Bs]];return f.invert=function(t){return new Date(p(t))},f.domain=function(t){return arguments.length?d(as.call(t,Lr)):d().map(Hr)},f.ticks=function(t,n){var e,r=d(),i=r[0],o=r[r.length-1],a=o<i;return a&&(e=i,i=o,o=e),e=h(t,i,o,n),e=e?e.range(i,o+1):[],a?e.reverse():e},f.tickFormat=function(t,n){return null==n?l:c(n)},f.nice=function(t,n){var e=d();return(t=h(t,e[0],e[e.length-1],n))?d(fs(e,t)):f},f.copy=function(){return Se(f,Yr(t,n,r,i,o,a,u,s,c))},f}function Or(t){this._context=t}function jr(t){return t[0]}function zr(t){return t[1]}function Ir(t){return t<0?-1:1}function qr(t,n,e){var r=t._x1-t._x0,i=n-t._x1,o=(t._y1-t._y0)/(r||i<0&&-0),a=(e-t._y1)/(i||r<0&&-0),u=(o*i+a*r)/(r+i);return(Ir(o)+Ir(a))*Math.min(Math.abs(o),Math.abs(a),.5*Math.abs(u))||0}function $r(t,n){var e=t._x1-t._x0;return e?(3*(t._y1-t._y0)/e-n)/2:n}function Xr(t,n,e){var r=t._x0,i=t._y0,o=t._x1,a=t._y1,u=(o-r)/3;t._context.bezierCurveTo(r+u,i+u*n,o-u,a-u*e,o,a)}function Br(t){this._context=t}function Rr(t){this._context=new Wr(t)}function Wr(t){this._context=t}function Zr(t,n){return t.each(function(){var t=n.apply(this,arguments),e=co(this);for(var r in t)e.attr(r,t[r])})}function Vr(t,n){for(var e in n)t.attr(e,n[e]);return t}function Gr(t,n,e){return t.each(function(){var t=n.apply(this,arguments),r=co(this);for(var i in t)r.style(i,t[i],e)})}function Jr(t,n,e){for(var r in n)t.style(r,n[r],e);return t}function Qr(t,n){return t.each(function(){var t=n.apply(this,arguments),e=co(this);for(var r in t)e.property(r,t[r])})}function Kr(t,n){for(var e in n)t.property(e,n[e]);return t}var ti=function(t,n){return t<n?-1:t>n?1:t>=n?0:NaN},ni=function(n){return 1===n.length&&(n=t(n)),{left:function(t,e,r,i){for(null==r&&(r=0),null==i&&(i=t.length);r<i;){var o=r+i>>>1;n(t[o],e)<0?r=o+1:i=o}return r},right:function(t,e,r,i){for(null==r&&(r=0),null==i&&(i=t.length);r<i;){var o=r+i>>>1;n(t[o],e)>0?i=o:r=o+1}return r}}},ei=ni(ti).right,ri=Math.sqrt(50),ii=Math.sqrt(10),oi=Math.sqrt(2),ai=function(t,e,r){var i,o,a,u=e<t,s=-1;if(u&&(i=t,t=e,e=i),0===(a=n(t,e,r))||!isFinite(a))return[];if(a>0)for(t=Math.ceil(t/a),e=Math.floor(e/a),o=new Array(i=Math.ceil(e-t+1));++s<i;)o[s]=(t+s)*a;else for(t=Math.floor(t*a),e=Math.ceil(e*a),o=new Array(i=Math.ceil(t-e+1));++s<i;)o[s]=(t-s)/a;return u&&o.reverse(),o},ui=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&e>r&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&e>r&&(r=e);return r},si=function(t,n){var e,r,i=t.length,o=-1;if(null==n){for(;++o<i;)if(null!=(e=t[o])&&e>=e)for(r=e;++o<i;)null!=(e=t[o])&&r>e&&(r=e)}else for(;++o<i;)if(null!=(e=n(t[o],o,t))&&e>=e)for(r=e;++o<i;)null!=(e=n(t[o],o,t))&&r>e&&(r=e);return r},ci=Array.prototype.slice,li=function(t){return t},hi=1,fi=2,pi=3,di=4,gi=1e-6,_i={value:function(){}};h.prototype=l.prototype={constructor:h,on:function(t,n){var e,r=this._,i=f(t+"",r),o=-1,a=i.length;{if(!(arguments.length<2)){if(null!=n&&"function"!=typeof n)throw new Error("invalid callback: "+n);for(;++o<a;)if(e=(t=i[o]).type)r[e]=d(r[e],t.name,n);else if(null==n)for(e in r)r[e]=d(r[e],t.name,null);return this}for(;++o<a;)if((e=(t=i[o]).type)&&(e=p(r[e],t.name)))return e}},copy:function(){var t={},n=this._;for(var e in n)t[e]=n[e].slice();return new h(t)},call:function(t,n){if((e=arguments.length-2)>0)for(var e,r,i=new Array(e),o=0;o<e;++o)i[o]=arguments[o+2];if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(o=0,e=(r=this._[t]).length;o<e;++o)r[o].value.apply(n,i)},apply:function(t,n,e){if(!this._.hasOwnProperty(t))throw new Error("unknown type: "+t);for(var r=this._[t],i=0,o=r.length;i<o;++i)r[i].value.apply(n,e)}};var vi="http://www.w3.org/1999/xhtml",yi={svg:"http://www.w3.org/2000/svg",xhtml:vi,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},mi=function(t){var n=t+="",e=n.indexOf(":");return e>=0&&"xmlns"!==(n=t.slice(0,e))&&(t=t.slice(e+1)),yi.hasOwnProperty(n)?{space:yi[n],local:t}:t},wi=function(t){var n=mi(t);return(n.local?_:g)(n)},xi=function(t){return function(){return this.matches(t)}};if("undefined"!=typeof document){var bi=document.documentElement;if(!bi.matches){var Mi=bi.webkitMatchesSelector||bi.msMatchesSelector||bi.mozMatchesSelector||bi.oMatchesSelector;xi=function(t){return function(){return Mi.call(this,t)}}}}var Ai=xi,ki={},Ni=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(ki={mouseenter:"mouseover",mouseleave:"mouseout"}));var Ti=function(t,n,e){var r,i,o=m(t+""),a=o.length;{if(!(arguments.length<2)){for(u=n?x:w,null==e&&(e=!1),r=0;r<a;++r)this.each(u(o[r],n,e));return this}var u=this.node().__on;if(u)for(var s,c=0,l=u.length;c<l;++c)for(r=0,s=u[c];r<a;++r)if((i=o[r]).type===s.type&&i.name===s.name)return s.value}},Ci=function(t){return null==t?b:function(){return this.querySelector(t)}},Si=function(t){"function"!=typeof t&&(t=Ci(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a,u=n[i],s=u.length,c=r[i]=new Array(s),l=0;l<s;++l)(o=u[l])&&(a=t.call(o,o.__data__,l,u))&&("__data__"in o&&(a.__data__=o.__data__),c[l]=a);return new st(r,this._parents)},Di=function(t){return null==t?M:function(){return this.querySelectorAll(t)}},Ei=function(t){"function"!=typeof t&&(t=Di(t));for(var n=this._groups,e=n.length,r=[],i=[],o=0;o<e;++o)for(var a,u=n[o],s=u.length,c=0;c<s;++c)(a=u[c])&&(r.push(t.call(a,a.__data__,c,u)),i.push(a));return new st(r,i)},Ui=function(t){"function"!=typeof t&&(t=Ai(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,s=r[i]=[],c=0;c<u;++c)(o=a[c])&&t.call(o,o.__data__,c,a)&&s.push(o);return new st(r,this._parents)},Pi=function(t){return new Array(t.length)},Fi=function(){return new st(this._enter||this._groups.map(Pi),this._parents)};A.prototype={constructor:A,appendChild:function(t){return this._parent.insertBefore(t,this._next)},insertBefore:function(t,n){return this._parent.insertBefore(t,n)},querySelector:function(t){return this._parent.querySelector(t)},querySelectorAll:function(t){return this._parent.querySelectorAll(t)}};var Hi=function(t){return function(){return t}},Li="$",Yi=function(t,n){if(!t)return p=new Array(this.size()),c=-1,this.each(function(t){p[++c]=t}),p;var e=n?N:k,r=this._parents,i=this._groups;"function"!=typeof t&&(t=Hi(t));for(var o=i.length,a=new Array(o),u=new Array(o),s=new Array(o),c=0;c<o;++c){var l=r[c],h=i[c],f=h.length,p=t.call(l,l&&l.__data__,c,r),d=p.length,g=u[c]=new Array(d),_=a[c]=new Array(d);e(l,h,g,_,s[c]=new Array(f),p,n);for(var v,y,m=0,w=0;m<d;++m)if(v=g[m]){for(m>=w&&(w=m+1);!(y=_[w])&&++w<d;);v._next=y||null}}return a=new st(a,r),a._enter=u,a._exit=s,a},Oi=function(){return new st(this._exit||this._groups.map(Pi),this._parents)},ji=function(t){for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var s,c=n[u],l=e[u],h=c.length,f=a[u]=new Array(h),p=0;p<h;++p)(s=c[p]||l[p])&&(f[p]=s);for(;u<r;++u)a[u]=n[u];return new st(a,this._parents)},zi=function(){for(var t=this._groups,n=-1,e=t.length;++n<e;)for(var r,i=t[n],o=i.length-1,a=i[o];--o>=0;)(r=i[o])&&(a&&a!==r.nextSibling&&a.parentNode.insertBefore(r,a),a=r);return this},Ii=function(t){function n(n,e){return n&&e?t(n.__data__,e.__data__):!n-!e}t||(t=T);for(var e=this._groups,r=e.length,i=new Array(r),o=0;o<r;++o){for(var a,u=e[o],s=u.length,c=i[o]=new Array(s),l=0;l<s;++l)(a=u[l])&&(c[l]=a);c.sort(n)}return new st(i,this._parents).order()},qi=function(){var t=arguments[0];return arguments[0]=this,t.apply(null,arguments),this},$i=function(){var t=new Array(this.size()),n=-1;return this.each(function(){t[++n]=this}),t},Xi=function(){for(var t=this._groups,n=0,e=t.length;n<e;++n)for(var r=t[n],i=0,o=r.length;i<o;++i){var a=r[i];if(a)return a}return null},Bi=function(){var t=0;return this.each(function(){++t}),t},Ri=function(){return!this.node()},Wi=function(t){for(var n=this._groups,e=0,r=n.length;e<r;++e)for(var i,o=n[e],a=0,u=o.length;a<u;++a)(i=o[a])&&t.call(i,i.__data__,a,o);return this},Zi=function(t,n){var e=mi(t);if(arguments.length<2){var r=this.node();return e.local?r.getAttributeNS(e.space,e.local):r.getAttribute(e)}return this.each((null==n?e.local?S:C:"function"==typeof n?e.local?P:U:e.local?E:D)(e,n))},Vi=function(t){return t.ownerDocument&&t.ownerDocument.defaultView||t.document&&t||t.defaultView},Gi=function(t,n,e){return arguments.length>1?this.each((null==n?F:"function"==typeof n?L:H)(t,n,null==e?"":e)):Y(this.node(),t)},Ji=function(t,n){return arguments.length>1?this.each((null==n?O:"function"==typeof n?z:j)(t,n)):this.node()[t]};$.prototype={add:function(t){this._names.indexOf(t)<0&&(this._names.push(t),this._node.setAttribute("class",this._names.join(" ")))},remove:function(t){var n=this._names.indexOf(t);n>=0&&(this._names.splice(n,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(t){return this._names.indexOf(t)>=0}};var Qi=function(t,n){var e=I(t+"");if(arguments.length<2){for(var r=q(this.node()),i=-1,o=e.length;++i<o;)if(!r.contains(e[i]))return!1;return!0}return this.each(("function"==typeof n?Z:n?R:W)(e,n))},Ki=function(t){return arguments.length?this.each(null==t?V:("function"==typeof t?J:G)(t)):this.node().textContent},to=function(t){return arguments.length?this.each(null==t?Q:("function"==typeof t?tt:K)(t)):this.node().innerHTML},no=function(){return this.each(nt)},eo=function(){return this.each(et)},ro=function(t){var n="function"==typeof t?t:wi(t);return this.select(function(){return this.appendChild(n.apply(this,arguments))})},io=function(t,n){var e="function"==typeof t?t:wi(t),r=null==n?rt:"function"==typeof n?n:Ci(n);return this.select(function(){return this.insertBefore(e.apply(this,arguments),r.apply(this,arguments)||null)})},oo=function(){return this.each(it)},ao=function(t){return arguments.length?this.property("__data__",t):this.node().__data__},uo=function(t,n){return this.each(("function"==typeof n?ut:at)(t,n))},so=[null];st.prototype=ct.prototype={constructor:st,select:Si,selectAll:Ei,filter:Ui,data:Yi,enter:Fi,exit:Oi,merge:ji,order:zi,sort:Ii,call:qi,nodes:$i,node:Xi,size:Bi,empty:Ri,each:Wi,attr:Zi,style:Gi,property:Ji,classed:Qi,text:Ki,html:to,raise:no,lower:eo,append:ro,insert:io,remove:oo,datum:ao,on:Ti,dispatch:uo};var co=function(t){return"string"==typeof t?new st([[document.querySelector(t)]],[document.documentElement]):new st([[t]],so)},lo=function(t,n,e){t.prototype=n.prototype=e,e.constructor=t},ho="\\s*([+-]?\\d+)\\s*",fo="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",po="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",go=/^#([0-9a-f]{3})$/,_o=/^#([0-9a-f]{6})$/,vo=new RegExp("^rgb\\("+[ho,ho,ho]+"\\)$"),yo=new RegExp("^rgb\\("+[po,po,po]+"\\)$"),mo=new RegExp("^rgba\\("+[ho,ho,ho,fo]+"\\)$"),wo=new RegExp("^rgba\\("+[po,po,po,fo]+"\\)$"),xo=new RegExp("^hsl\\("+[fo,po,po]+"\\)$"),bo=new RegExp("^hsla\\("+[fo,po,po,fo]+"\\)$"),Mo={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};lo(ht,ft,{displayable:function(){return this.rgb().displayable()},toString:function(){return this.rgb()+""}}),lo(vt,_t,lt(ht,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new vt(this.r*t,this.g*t,this.b*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new vt(this.r*t,this.g*t,this.b*t,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},toString:function(){var t=this.opacity;return t=isNaN(t)?1:Math.max(0,Math.min(1,t)),(1===t?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===t?")":", "+t+")")}})),lo(xt,wt,lt(ht,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new xt(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new xt(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=this.h%360+360*(this.h<0),n=isNaN(t)||isNaN(this.s)?0:this.s,e=this.l,r=e+(e<.5?e:1-e)*n,i=2*e-r;return new vt(bt(t>=240?t-240:t+120,i,r),bt(t,i,r),bt(t<120?t+240:t-120,i,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var Ao=Math.PI/180,ko=180/Math.PI,No=.95047,To=1,Co=1.08883,So=4/29,Do=6/29,Eo=3*Do*Do,Uo=Do*Do*Do;lo(kt,At,lt(ht,{brighter:function(t){return new kt(this.l+18*(null==t?1:t),this.a,this.b,this.opacity)},darker:function(t){return new kt(this.l-18*(null==t?1:t),this.a,this.b,this.opacity)},rgb:function(){var t=(this.l+16)/116,n=isNaN(this.a)?t:t+this.a/500,e=isNaN(this.b)?t:t-this.b/200;return t=To*Tt(t),n=No*Tt(n),e=Co*Tt(e),new vt(Ct(3.2404542*n-1.5371385*t-.4985314*e),Ct(-.969266*n+1.8760108*t+.041556*e),Ct(.0556434*n-.2040259*t+1.0572252*e),this.opacity)}})),lo(Ut,Et,lt(ht,{brighter:function(t){return new Ut(this.h,this.c,this.l+18*(null==t?1:t),this.opacity)},darker:function(t){return new Ut(this.h,this.c,this.l-18*(null==t?1:t),this.opacity)},rgb:function(){return Mt(this).rgb()}}));var Po=-.14861,Fo=1.78277,Ho=-.29227,Lo=-.90649,Yo=1.97294,Oo=Yo*Lo,jo=Yo*Fo,zo=Fo*Ho-Lo*Po;lo(Ht,Ft,lt(ht,{brighter:function(t){return t=null==t?1/.7:Math.pow(1/.7,t),new Ht(this.h,this.s,this.l*t,this.opacity)},darker:function(t){return t=null==t?.7:Math.pow(.7,t),new Ht(this.h,this.s,this.l*t,this.opacity)},rgb:function(){var t=isNaN(this.h)?0:(this.h+120)*Ao,n=+this.l,e=isNaN(this.s)?0:this.s*n*(1-n),r=Math.cos(t),i=Math.sin(t);return new vt(255*(n+e*(Po*r+Fo*i)),255*(n+e*(Ho*r+Lo*i)),255*(n+e*(Yo*r)),this.opacity)}}));var Io,qo,$o,Xo,Bo=function(t){return function(){return t}},Ro=function t(n){function e(t,n){var e=r((t=_t(t)).r,(n=_t(n)).r),i=r(t.g,n.g),o=r(t.b,n.b),a=zt(t.opacity,n.opacity);return function(n){return t.r=e(n),t.g=i(n),t.b=o(n),t.opacity=a(n),t+""}}var r=jt(n);return e.gamma=t,e}(1),Wo=function(t,n){var e,r=n?n.length:0,i=t?Math.min(r,t.length):0,o=new Array(r),a=new Array(r);for(e=0;e<i;++e)o[e]=ta(t[e],n[e]);for(;e<r;++e)a[e]=n[e];return function(t){for(e=0;e<i;++e)a[e]=o[e](t);return a}},Zo=function(t,n){var e=new Date;return t=+t,n-=t,function(r){return e.setTime(t+n*r),e}},Vo=function(t,n){return t=+t,n-=t,function(e){return t+n*e}},Go=function(t,n){var e,r={},i={};null!==t&&"object"==typeof t||(t={}),null!==n&&"object"==typeof n||(n={});for(e in n)e in t?r[e]=ta(t[e],n[e]):i[e]=n[e];return function(t){for(e in r)i[e]=r[e](t);return i}},Jo=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,Qo=new RegExp(Jo.source,"g"),Ko=function(t,n){var e,r,i,o=Jo.lastIndex=Qo.lastIndex=0,a=-1,u=[],s=[];for(t+="",n+="";(e=Jo.exec(t))&&(r=Qo.exec(n));)(i=r.index)>o&&(i=n.slice(o,i),u[a]?u[a]+=i:u[++a]=i),(e=e[0])===(r=r[0])?u[a]?u[a]+=r:u[++a]=r:(u[++a]=null,s.push({i:a,x:Vo(e,r)})),o=Qo.lastIndex;return o<n.length&&(i=n.slice(o),u[a]?u[a]+=i:u[++a]=i),u.length<2?s[0]?qt(s[0].x):It(n):(n=s.length,function(t){for(var e,r=0;r<n;++r)u[(e=s[r]).i]=e.x(t);return u.join("")})},ta=function(t,n){var e,r=typeof n;return null==n||"boolean"===r?Bo(n):("number"===r?Vo:"string"===r?(e=ft(n))?(n=e,Ro):Ko:n instanceof ft?Ro:n instanceof Date?Zo:Array.isArray(n)?Wo:"function"!=typeof n.valueOf&&"function"!=typeof n.toString||isNaN(n)?Go:Vo)(t,n)},na=function(t,n){return t=+t,n-=t,function(e){return Math.round(t+n*e)}},ea=180/Math.PI,ra={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},ia=function(t,n,e,r,i,o){var a,u,s;return(a=Math.sqrt(t*t+n*n))&&(t/=a,n/=a),(s=t*e+n*r)&&(e-=t*s,r-=n*s),(u=Math.sqrt(e*e+r*r))&&(e/=u,r/=u,s/=u),t*r<n*e&&(t=-t,n=-n,s=-s,a=-a),{translateX:i,translateY:o,rotate:Math.atan2(n,t)*ea,skewX:Math.atan(s)*ea,scaleX:a,scaleY:u}},oa=Bt($t,"px, ","px)","deg)"),aa=Bt(Xt,", ",")",")");Rt(Ot);var ua,sa,ca=Rt(zt),la=0,ha=0,fa=0,pa=1e3,da=0,ga=0,_a=0,va="object"==typeof performance&&performance.now?performance:Date,ya="function"==typeof requestAnimationFrame?requestAnimationFrame:function(t){setTimeout(t,17)};Vt.prototype=Gt.prototype={constructor:Vt,restart:function(t,n,e){if("function"!=typeof t)throw new TypeError("callback is not a function");e=(null==e?Wt():+e)+(null==n?0:+n),this._next||sa===this||(sa?sa._next=this:ua=this,sa=this),this._call=t,this._time=e,nn()},stop:function(){this._call&&(this._call=null,this._time=1/0,nn())}};var ma=function(t,n,e){var r=new Vt;return n=null==n?0:+n,r.restart(function(e){r.stop(),t(e+n)},n,e),r},wa=l("start","end","interrupt"),xa=[],ba=0,Ma=1,Aa=2,ka=3,Na=4,Ta=5,Ca=6,Sa=function(t,n,e,r,i,o){var a=t.__transition;if(a){if(e in a)return}else t.__transition={};an(t,e,{name:n,index:r,group:i,on:wa,tween:xa,time:o.time,delay:o.delay,duration:o.duration,ease:o.ease,timer:null,state:ba})},Da=function(t,n){var e,r,i,o=t.__transition,a=!0;if(o){n=null==n?null:n+"";for(i in o)(e=o[i]).name===n?(r=e.state>Aa&&e.state<Ta,e.state=Ca,e.timer.stop(),r&&e.on.call("interrupt",t,t.__data__,e.index,e.group),delete o[i]):a=!1;a&&delete t.__transition}},Ea=function(t){return this.each(function(){Da(this,t)})},Ua=function(t,n){var e=this._id;if(t+="",arguments.length<2){for(var r,i=on(this.node(),e).tween,o=0,a=i.length;o<a;++o)if((r=i[o]).name===t)return r.value;return null}return this.each((null==n?un:sn)(e,t,n))},Pa=function(t,n){var e;return("number"==typeof n?Vo:n instanceof ft?Ro:(e=ft(n))?(n=e,Ro):Ko)(t,n)},Fa=function(t,n){var e=mi(t),r="transform"===e?aa:Pa;return this.attrTween(t,"function"==typeof n?(e.local?gn:dn)(e,r,cn(this,"attr."+t,n)):null==n?(e.local?hn:ln)(e):(e.local?pn:fn)(e,r,n+""))},Ha=function(t,n){var e="attr."+t;if(arguments.length<2)return(e=this.tween(e))&&e._value;if(null==n)return this.tween(e,null);if("function"!=typeof n)throw new Error;var r=mi(t);return this.tween(e,(r.local?_n:vn)(r,n))},La=function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?yn:mn)(n,t)):on(this.node(),n).delay},Ya=function(t){var n=this._id;return arguments.length?this.each(("function"==typeof t?wn:xn)(n,t)):on(this.node(),n).duration},Oa=function(t){var n=this._id;return arguments.length?this.each(bn(n,t)):on(this.node(),n).ease},ja=function(t){"function"!=typeof t&&(t=Ai(t));for(var n=this._groups,e=n.length,r=new Array(e),i=0;i<e;++i)for(var o,a=n[i],u=a.length,s=r[i]=[],c=0;c<u;++c)(o=a[c])&&t.call(o,o.__data__,c,a)&&s.push(o);return new Pn(r,this._parents,this._name,this._id)},za=function(t){if(t._id!==this._id)throw new Error;for(var n=this._groups,e=t._groups,r=n.length,i=e.length,o=Math.min(r,i),a=new Array(r),u=0;u<o;++u)for(var s,c=n[u],l=e[u],h=c.length,f=a[u]=new Array(h),p=0;p<h;++p)(s=c[p]||l[p])&&(f[p]=s);for(;u<r;++u)a[u]=n[u];return new Pn(a,this._parents,this._name,this._id)},Ia=function(t,n){var e=this._id;return arguments.length<2?on(this.node(),e).on.on(t):this.each(An(e,t,n))},qa=function(){return this.on("end.remove",kn(this._id))},$a=function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=Ci(t));for(var r=this._groups,i=r.length,o=new Array(i),a=0;a<i;++a)for(var u,s,c=r[a],l=c.length,h=o[a]=new Array(l),f=0;f<l;++f)(u=c[f])&&(s=t.call(u,u.__data__,f,c))&&("__data__"in u&&(s.__data__=u.__data__),h[f]=s,Sa(h[f],n,e,f,h,on(u,e)));return new Pn(o,this._parents,n,e)},Xa=function(t){var n=this._name,e=this._id;"function"!=typeof t&&(t=Di(t));for(var r=this._groups,i=r.length,o=[],a=[],u=0;u<i;++u)for(var s,c=r[u],l=c.length,h=0;h<l;++h)if(s=c[h]){for(var f,p=t.call(s,s.__data__,h,c),d=on(s,e),g=0,_=p.length;g<_;++g)(f=p[g])&&Sa(f,n,e,g,p,d);o.push(p),a.push(s)}return new Pn(o,a,n,e)},Ba=ct.prototype.constructor,Ra=function(){return new Ba(this._groups,this._parents)},Wa=function(t,n,e){var r="transform"==(t+="")?oa:Pa;return null==n?this.styleTween(t,Nn(t,r)).on("end.style."+t,Tn(t)):this.styleTween(t,"function"==typeof n?Sn(t,r,cn(this,"style."+t,n)):Cn(t,r,n+""),e)},Za=function(t,n,e){var r="style."+(t+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==n)return this.tween(r,null);if("function"!=typeof n)throw new Error;return this.tween(r,Dn(t,n,null==e?"":e))},Va=function(t){return this.tween("text","function"==typeof t?Un(cn(this,"text",t)):En(null==t?"":t+""))},Ga=function(){for(var t=this._name,n=this._id,e=Hn(),r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],s=u.length,c=0;c<s;++c)if(a=u[c]){var l=on(a,n);Sa(a,t,e,c,u,{time:l.time+l.delay+l.duration,delay:0,duration:l.duration,ease:l.ease})}return new Pn(r,this._parents,t,e)},Ja=0,Qa=ct.prototype;Pn.prototype=Fn.prototype={constructor:Pn,select:$a,selectAll:Xa,filter:ja,merge:za,selection:Ra,transition:Ga,call:Qa.call,nodes:Qa.nodes,node:Qa.node,size:Qa.size,empty:Qa.empty,each:Qa.each,on:Ia,attr:Fa,attrTween:Ha,style:Wa,styleTween:Za,text:Va,remove:qa,tween:Ua,delay:La,duration:Ya,ease:Oa};(function t(n){function e(t){return Math.pow(t,n)}return n=+n,e.exponent=t,e})(3),function t(n){function e(t){return 1-Math.pow(1-t,n)}return n=+n,e.exponent=t,e}(3),function t(n){function e(t){return((t*=2)<=1?Math.pow(t,n):2-Math.pow(2-t,n))/2}return n=+n,e.exponent=t,e}(3),function t(n){function e(t){return t*t*((n+1)*t-n)}return n=+n,e.overshoot=t,e}(1.70158),function t(n){function e(t){return--t*t*((n+1)*t+n)+1}return n=+n,e.overshoot=t,e}(1.70158),function t(n){function e(t){return((t*=2)<1?t*t*((n+1)*t-n):(t-=2)*t*((n+1)*t+n)+2)/2}return n=+n,e.overshoot=t,e}(1.70158);var Ka=2*Math.PI,tu=(function t(n,e){function r(t){return n*Math.pow(2,10*--t)*Math.sin((i-t)/e)}var i=Math.asin(1/(n=Math.max(1,n)))*(e/=Ka);return r.amplitude=function(n){return t(n,e*Ka)},r.period=function(e){return t(n,e)},r}(1,.3),function t(n,e){function r(t){return 1-n*Math.pow(2,-10*(t=+t))*Math.sin((t+i)/e)}var i=Math.asin(1/(n=Math.max(1,n)))*(e/=Ka);return r.amplitude=function(n){return t(n,e*Ka)},r.period=function(e){return t(n,e)},r}(1,.3),function t(n,e){function r(t){return((t=2*t-1)<0?n*Math.pow(2,10*t)*Math.sin((i-t)/e):2-n*Math.pow(2,-10*t)*Math.sin((i+t)/e))/2}var i=Math.asin(1/(n=Math.max(1,n)))*(e/=Ka);return r.amplitude=function(n){return t(n,e*Ka)},r.period=function(e){return t(n,e)},r}(1,.3),{time:null,delay:0,duration:250,ease:Ln}),nu=function(t){var n,e;t instanceof Pn?(n=t._id,t=t._name):(n=Hn(),(e=tu).time=Wt(),t=null==t?null:t+"");for(var r=this._groups,i=r.length,o=0;o<i;++o)for(var a,u=r[o],s=u.length,c=0;c<s;++c)(a=u[c])&&Sa(a,t,n,c,u,e||Yn(a,n));return new Pn(r,this._parents,t,n)};ct.prototype.interrupt=Ea,ct.prototype.transition=nu;["e","w"].map(On),["n","s"].map(On),["n","e","s","w","nw","ne","se","sw"].map(On),Math.PI,Math.max;var eu=Math.PI,ru=2*eu,iu=ru-1e-6;jn.prototype=zn.prototype={constructor:jn,moveTo:function(t,n){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(t,n){this._+="L"+(this._x1=+t)+","+(this._y1=+n)},quadraticCurveTo:function(t,n,e,r){this._+="Q"+ +t+","+ +n+","+(this._x1=+e)+","+(this._y1=+r)},bezierCurveTo:function(t,n,e,r,i,o){this._+="C"+ +t+","+ +n+","+ +e+","+ +r+","+(this._x1=+i)+","+(this._y1=+o)},arcTo:function(t,n,e,r,i){t=+t,n=+n,e=+e,r=+r,i=+i;var o=this._x1,a=this._y1,u=e-t,s=r-n,c=o-t,l=a-n,h=c*c+l*l;if(i<0)throw new Error("negative radius: "+i);if(null===this._x1)this._+="M"+(this._x1=t)+","+(this._y1=n);else if(h>1e-6)if(Math.abs(l*u-s*c)>1e-6&&i){var f=e-o,p=r-a,d=u*u+s*s,g=f*f+p*p,_=Math.sqrt(d),v=Math.sqrt(h),y=i*Math.tan((eu-Math.acos((d+h-g)/(2*_*v)))/2),m=y/v,w=y/_;Math.abs(m-1)>1e-6&&(this._+="L"+(t+m*c)+","+(n+m*l)),this._+="A"+i+","+i+",0,0,"+ +(l*f>c*p)+","+(this._x1=t+w*u)+","+(this._y1=n+w*s)}else this._+="L"+(this._x1=t)+","+(this._y1=n);else;},arc:function(t,n,e,r,i,o){t=+t,n=+n;var a=(e=+e)*Math.cos(r),u=e*Math.sin(r),s=t+a,c=n+u,l=1^o,h=o?r-i:i-r;if(e<0)throw new Error("negative radius: "+e);null===this._x1?this._+="M"+s+","+c:(Math.abs(this._x1-s)>1e-6||Math.abs(this._y1-c)>1e-6)&&(this._+="L"+s+","+c),e&&(h<0&&(h=h%ru+ru),h>iu?this._+="A"+e+","+e+",0,1,"+l+","+(t-a)+","+(n-u)+"A"+e+","+e+",0,1,"+l+","+(this._x1=s)+","+(this._y1=c):h>1e-6&&(this._+="A"+e+","+e+",0,"+ +(h>=eu)+","+l+","+(this._x1=t+e*Math.cos(i))+","+(this._y1=n+e*Math.sin(i))))},rect:function(t,n,e,r){this._+="M"+(this._x0=this._x1=+t)+","+(this._y0=this._y1=+n)+"h"+ +e+"v"+ +r+"h"+-e+"Z"},toString:function(){return this._}};In.prototype=qn.prototype={constructor:In,has:function(t){return"$"+t in this},get:function(t){return this["$"+t]},set:function(t,n){return this["$"+t]=n,this},remove:function(t){var n="$"+t;return n in this&&delete this[n]},clear:function(){for(var t in this)"$"===t[0]&&delete this[t]},keys:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(n.slice(1));return t},values:function(){var t=[];for(var n in this)"$"===n[0]&&t.push(this[n]);return t},entries:function(){var t=[];for(var n in this)"$"===n[0]&&t.push({key:n.slice(1),value:this[n]});return t},size:function(){var t=0;for(var n in this)"$"===n[0]&&++t;return t},empty:function(){for(var t in this)if("$"===t[0])return!1;return!0},each:function(t){for(var n in this)"$"===n[0]&&t(this[n],n.slice(1),this)}};var ou=qn.prototype;$n.prototype=Xn.prototype={constructor:$n,has:ou.has,add:function(t){return t+="",this["$"+t]=t,this},remove:ou.remove,clear:ou.clear,values:ou.keys,size:ou.size,empty:ou.empty,each:ou.each};var au=function(t){function n(t,n){var r,i,o=e(t,function(t,e){if(r)return r(t,e-1);i=t,r=n?Rn(t,n):Bn(t)});return o.columns=i,o}function e(t,n){function e(){if(l>=c)return a;if(i)return i=!1,o;var n,e=l;if(34===t.charCodeAt(e)){for(var r=e;r++<c;)if(34===t.charCodeAt(r)){if(34!==t.charCodeAt(r+1))break;++r}return l=r+2,n=t.charCodeAt(r+1),13===n?(i=!0,10===t.charCodeAt(r+2)&&++l):10===n&&(i=!0),t.slice(e+1,r).replace(/""/g,'"')}for(;l<c;){var u=1;if(10===(n=t.charCodeAt(l++)))i=!0;else if(13===n)i=!0,10===t.charCodeAt(l)&&(++l,++u);else if(n!==s)continue;return t.slice(e,l-u)}return t.slice(e)}for(var r,i,o={},a={},u=[],c=t.length,l=0,h=0;(r=e())!==a;){for(var f=[];r!==o&&r!==a;)f.push(r),r=e();n&&null==(f=n(f,h++))||u.push(f)}return u}function r(n,e){return null==e&&(e=Wn(n)),[e.map(a).join(t)].concat(n.map(function(n){return e.map(function(t){return a(n[t])}).join(t)})).join("\n")}function i(t){return t.map(o).join("\n")}function o(n){return n.map(a).join(t)}function a(t){return null==t?"":u.test(t+="")?'"'+t.replace(/\"/g,'""')+'"':t}var u=new RegExp('["'+t+"\n\r]"),s=t.charCodeAt(0);return{parse:n,parseRows:e,format:r,formatRows:i}},uu=(au(","),au("\t"),function(t){var n=+this._x.call(null,t),e=+this._y.call(null,t);return Zn(this.cover(n,e),n,e,t)}),su=function(t,n){if(isNaN(t=+t)||isNaN(n=+n))return this;var e=this._x0,r=this._y0,i=this._x1,o=this._y1;if(isNaN(e))i=(e=Math.floor(t))+1,o=(r=Math.floor(n))+1;else{if(!(e>t||t>i||r>n||n>o))return this;var a,u,s=i-e,c=this._root;switch(u=(n<(r+o)/2)<<1|t<(e+i)/2){case 0:do{a=new Array(4),a[u]=c,c=a}while(s*=2,i=e+s,o=r+s,t>i||n>o);break;case 1:do{a=new Array(4),a[u]=c,c=a}while(s*=2,e=i-s,o=r+s,e>t||n>o);break;case 2:do{a=new Array(4),a[u]=c,c=a}while(s*=2,i=e+s,r=o-s,t>i||r>n);break;case 3:do{a=new Array(4),a[u]=c,c=a}while(s*=2,e=i-s,r=o-s,e>t||r>n)}this._root&&this._root.length&&(this._root=c)}return this._x0=e,this._y0=r,this._x1=i,this._y1=o,this},cu=function(){var t=[];return this.visit(function(n){if(!n.length)do{t.push(n.data)}while(n=n.next)}),t},lu=function(t){return arguments.length?this.cover(+t[0][0],+t[0][1]).cover(+t[1][0],+t[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},hu=function(t,n,e,r,i){this.node=t,this.x0=n,this.y0=e,this.x1=r,this.y1=i},fu=function(t,n,e){var r,i,o,a,u,s,c,l=this._x0,h=this._y0,f=this._x1,p=this._y1,d=[],g=this._root;for(g&&d.push(new hu(g,l,h,f,p)),null==e?e=1/0:(l=t-e,h=n-e,f=t+e,p=n+e,e*=e);s=d.pop();)if(!(!(g=s.node)||(i=s.x0)>f||(o=s.y0)>p||(a=s.x1)<l||(u=s.y1)<h))if(g.length){var _=(i+a)/2,v=(o+u)/2;d.push(new hu(g[3],_,v,a,u),new hu(g[2],i,v,_,u),new hu(g[1],_,o,a,v),new hu(g[0],i,o,_,v)),(c=(n>=v)<<1|t>=_)&&(s=d[d.length-1],d[d.length-1]=d[d.length-1-c],d[d.length-1-c]=s)}else{var y=t-+this._x.call(null,g.data),m=n-+this._y.call(null,g.data),w=y*y+m*m;if(w<e){var x=Math.sqrt(e=w);l=t-x,h=n-x,f=t+x,p=n+x,r=g.data}}return r},pu=function(t){if(isNaN(o=+this._x.call(null,t))||isNaN(a=+this._y.call(null,t)))return this;var n,e,r,i,o,a,u,s,c,l,h,f,p=this._root,d=this._x0,g=this._y0,_=this._x1,v=this._y1;if(!p)return this;if(p.length)for(;;){if((c=o>=(u=(d+_)/2))?d=u:_=u,(l=a>=(s=(g+v)/2))?g=s:v=s,n=p,!(p=p[h=l<<1|c]))return this;if(!p.length)break;(n[h+1&3]||n[h+2&3]||n[h+3&3])&&(e=n,f=h)}for(;p.data!==t;)if(r=p,!(p=p.next))return this;return(i=p.next)&&delete p.next,r?(i?r.next=i:delete r.next,this):n?(i?n[h]=i:delete n[h],(p=n[0]||n[1]||n[2]||n[3])&&p===(n[3]||n[2]||n[1]||n[0])&&!p.length&&(e?e[f]=p:this._root=p),this):(this._root=i,this)},du=function(){return this._root},gu=function(){var t=0;return this.visit(function(n){if(!n.length)do{++t}while(n=n.next)}),t},_u=function(t){var n,e,r,i,o,a,u=[],s=this._root;for(s&&u.push(new hu(s,this._x0,this._y0,this._x1,this._y1));n=u.pop();)if(!t(s=n.node,r=n.x0,i=n.y0,o=n.x1,a=n.y1)&&s.length){var c=(r+o)/2,l=(i+a)/2;(e=s[3])&&u.push(new hu(e,c,l,o,a)),(e=s[2])&&u.push(new hu(e,r,l,c,a)),(e=s[1])&&u.push(new hu(e,c,i,o,l)),(e=s[0])&&u.push(new hu(e,r,i,c,l))}return this},vu=function(t){var n,e=[],r=[];for(this._root&&e.push(new hu(this._root,this._x0,this._y0,this._x1,this._y1));n=e.pop();){var i=n.node;if(i.length){var o,a=n.x0,u=n.y0,s=n.x1,c=n.y1,l=(a+s)/2,h=(u+c)/2;(o=i[0])&&e.push(new hu(o,a,u,l,h)),(o=i[1])&&e.push(new hu(o,l,u,s,h)),(o=i[2])&&e.push(new hu(o,a,h,l,c)),(o=i[3])&&e.push(new hu(o,l,h,s,c))}r.push(n)}for(;n=r.pop();)t(n.node,n.x0,n.y0,n.x1,n.y1);return this},yu=function(t){return arguments.length?(this._x=t,this):this._x},mu=function(t){return arguments.length?(this._y=t,this):this._y},wu=Kn.prototype=te.prototype;wu.copy=function(){var t,n,e=new te(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return e;if(!r.length)return e._root=ne(r),e;for(t=[{source:r,target:e._root=new Array(4)}];r=t.pop();)for(var i=0;i<4;++i)(n=r.source[i])&&(n.length?t.push({source:n,target:r.target[i]=new Array(4)}):r.target[i]=ne(n));return e},wu.add=uu,wu.addAll=Vn,wu.cover=su,wu.data=cu,wu.extent=lu,wu.find=fu,wu.remove=pu,wu.removeAll=Gn,wu.root=du,wu.size=gu,wu.visit=_u,wu.visitAfter=vu,wu.x=yu,wu.y=mu;var xu,bu=function(t,n){if((e=(t=n?t.toExponential(n-1):t.toExponential()).indexOf("e"))<0)return null;var e,r=t.slice(0,e);return[r.length>1?r[0]+r.slice(2):r,+t.slice(e+1)]},Mu=function(t){return t=bu(Math.abs(t)),t?t[1]:NaN},Au=function(t,n){return function(e,r){for(var i=e.length,o=[],a=0,u=t[0],s=0;i>0&&u>0&&(s+u+1>r&&(u=Math.max(1,r-s)),o.push(e.substring(i-=u,i+u)),!((s+=u+1)>r));)u=t[a=(a+1)%t.length];return o.reverse().join(n)}},ku=function(t){return function(n){return n.replace(/[0-9]/g,function(n){return t[+n]})}},Nu=function(t,n){var e=bu(t,n);if(!e)return t+"";var r=e[0],i=e[1];return i<0?"0."+new Array(-i).join("0")+r:r.length>i+1?r.slice(0,i+1)+"."+r.slice(i+1):r+new Array(i-r.length+2).join("0")},Tu={"":function(t,n){t:for(var e,r=(t=t.toPrecision(n)).length,i=1,o=-1;i<r;++i)switch(t[i]){case".":o=e=i;break;case"0":0===o&&(o=i),e=i;break;case"e":break t;default:o>0&&(o=0)}return o>0?t.slice(0,o)+t.slice(e+1):t},"%":function(t,n){return(100*t).toFixed(n)},b:function(t){return Math.round(t).toString(2)},c:function(t){return t+""},d:function(t){return Math.round(t).toString(10)},e:function(t,n){return t.toExponential(n)},f:function(t,n){return t.toFixed(n)},g:function(t,n){return t.toPrecision(n)},o:function(t){return Math.round(t).toString(8)},p:function(t,n){return Nu(100*t,n)},r:Nu,s:function(t,n){var e=bu(t,n);if(!e)return t+"";var r=e[0],i=e[1],o=i-(xu=3*Math.max(-8,Math.min(8,Math.floor(i/3))))+1,a=r.length;return o===a?r:o>a?r+new Array(o-a+1).join("0"):o>0?r.slice(0,o)+"."+r.slice(o):"0."+new Array(1-o).join("0")+bu(t,Math.max(0,n+o-1))[0]},X:function(t){return Math.round(t).toString(16).toUpperCase()},x:function(t){return Math.round(t).toString(16)}},Cu=/^(?:(.)?([<>=^]))?([+\-\( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?([a-z%])?$/i;ee.prototype=re.prototype,re.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+this.type};var Su,Du,Eu,Uu=function(t){return t},Pu=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"],Fu=function(t){function n(t){function n(t){var n,i,u,l=_,w=v;if("c"===g)w=y(t)+w,t="";else{var x=(t=+t)<0;if(t=y(Math.abs(t),d),x&&0==+t&&(x=!1),l=(x?"("===c?c:"-":"-"===c||"("===c?"":c)+l,w=w+("s"===g?Pu[8+xu/3]:"")+(x&&"("===c?")":""),m)for(n=-1,i=t.length;++n<i;)if(48>(u=t.charCodeAt(n))||u>57){w=(46===u?o+t.slice(n+1):t.slice(n))+w,t=t.slice(0,n);break}}p&&!h&&(t=r(t,1/0));var b=l.length+t.length+w.length,M=b<f?new Array(f-b+1).join(e):"";switch(p&&h&&(t=r(M+t,M.length?f-w.length:1/0),M=""),s){case"<":t=l+t+w+M;break;case"=":t=l+M+t+w;break;case"^":t=M.slice(0,b=M.length>>1)+l+t+w+M.slice(b);break;default:t=M+l+t+w}return a(t)}var e=(t=ee(t)).fill,s=t.align,c=t.sign,l=t.symbol,h=t.zero,f=t.width,p=t.comma,d=t.precision,g=t.type,_="$"===l?i[0]:"#"===l&&/[boxX]/.test(g)?"0"+g.toLowerCase():"",v="$"===l?i[1]:/[%p]/.test(g)?u:"",y=Tu[g],m=!g||/[defgprs%]/.test(g);return d=null==d?g?6:12:/[gprs]/.test(g)?Math.max(1,Math.min(21,d)):Math.max(0,Math.min(20,d)),n.toString=function(){return t+""},n}function e(t,e){var r=n((t=ee(t),t.type="f",t)),i=3*Math.max(-8,Math.min(8,Math.floor(Mu(e)/3))),o=Math.pow(10,-i),a=Pu[8+i/3];return function(t){return r(o*t)+a}}var r=t.grouping&&t.thousands?Au(t.grouping,t.thousands):Uu,i=t.currency,o=t.decimal,a=t.numerals?ku(t.numerals):Uu,u=t.percent||"%";return{format:n,formatPrefix:e}};!function(t){Su=Fu(t),Du=Su.format,Eu=Su.formatPrefix}({decimal:".",thousands:",",grouping:[3],currency:["$",""]});var Hu=function(t){return Math.max(0,-Mu(Math.abs(t)))},Lu=function(t,n){return Math.max(0,3*Math.max(-8,Math.min(8,Math.floor(Mu(n)/3)))-Mu(Math.abs(t)))},Yu=function(t,n){return t=Math.abs(t),n=Math.abs(n)-t,Math.max(0,Mu(n)-Mu(t))+1},Ou=function(){return new ie};ie.prototype={constructor:ie,reset:function(){this.s=this.t=0},add:function(t){oe(ju,t,this.t),oe(this,ju.s,this.s),this.s?this.t+=ju.t:this.s=ju.t},valueOf:function(){return this.s}};var ju=new ie,zu=Math.PI,Iu=zu/2,qu=zu/180,$u=(Math.abs,Math.atan2),Xu=Math.cos,Bu=Math.sin,Ru=Math.sqrt;Ou(),Ou(),Ou(),Ou(),Ou(),Ou(),Ou(),Ou(),Xu(30*qu);se(function(t){return Ru(2/(1+t))}).invert=ce(function(t){return 2*ue(t/2)}),se(function(t){return(t=ae(t))&&t/Bu(t)}).invert=ce(function(t){return t});var Wu=function(){return this.eachAfter(le)},Zu=function(t){var n,e,r,i,o=this,a=[o];do{for(n=a.reverse(),a=[];o=n.pop();)if(t(o),e=o.children)for(r=0,i=e.length;r<i;++r)a.push(e[r])}while(a.length);return this},Vu=function(t){for(var n,e,r=this,i=[r];r=i.pop();)if(t(r),n=r.children)for(e=n.length-1;e>=0;--e)i.push(n[e]);return this},Gu=function(t){for(var n,e,r,i=this,o=[i],a=[];i=o.pop();)if(a.push(i),n=i.children)for(e=0,r=n.length;e<r;++e)o.push(n[e]);for(;i=a.pop();)t(i);return this},Ju=function(t){return this.eachAfter(function(n){for(var e=+t(n.data)||0,r=n.children,i=r&&r.length;--i>=0;)e+=r[i].value;n.value=e})},Qu=function(t){return this.eachBefore(function(n){n.children&&n.children.sort(t)})},Ku=function(t){for(var n=this,e=he(n,t),r=[n];n!==e;)n=n.parent,r.push(n);for(var i=r.length;t!==e;)r.splice(i,0,t),t=t.parent;return r},ts=function(){for(var t=this,n=[t];t=t.parent;)n.push(t);return n},ns=function(){var t=[];return this.each(function(n){t.push(n)}),t},es=function(){var t=[];return this.eachBefore(function(n){n.children||t.push(n)}),t},rs=function(){var t=this,n=[];return t.each(function(e){e!==t&&n.push({source:e.parent,target:e})}),n};ve.prototype=fe.prototype={constructor:ve,count:Wu,each:Zu,eachAfter:Gu,eachBefore:Vu,sum:Ju,sort:Qu,path:Ku,ancestors:ts,descendants:ns,leaves:es,links:rs,copy:pe};ye.prototype=Object.create(ve.prototype);var is={},os=Array.prototype,as=os.map,us=os.slice,ss=function(t){return function(){return t}},cs=function(t){return+t},ls=[0,1],hs=function(t,n,r){var i,o=t[0],a=t[t.length-1],u=e(o,a,null==n?10:n);switch((r=ee(null==r?",f":r)).type){case"s":var s=Math.max(Math.abs(o),Math.abs(a));return null!=r.precision||isNaN(i=Lu(u,s))||(r.precision=i),Eu(r,s);case"":case"e":case"g":case"p":case"r":null!=r.precision||isNaN(i=Yu(u,Math.max(Math.abs(o),Math.abs(a))))||(r.precision=i-("e"===r.type));break;case"f":case"%":null!=r.precision||isNaN(i=Hu(u))||(r.precision=i-2*("%"===r.type))}return Du(r)},fs=function(t,n){var e,r=0,i=(t=t.slice()).length-1,o=t[r],a=t[i];return a<o&&(e=r,r=i,i=e,e=o,o=a,a=e),t[r]=n.floor(o),t[i]=n.ceil(a),t},ps=new Date,ds=new Date,gs=Pe(function(){},function(t,n){t.setTime(+t+n)},function(t,n){return n-t});gs.every=function(t){return t=Math.floor(t),isFinite(t)&&t>0?t>1?Pe(function(n){n.setTime(Math.floor(n/t)*t)},function(n,e){n.setTime(+n+e*t)},function(n,e){return(e-n)/t}):gs:null};var _s=6e4,vs=6048e5,ys=Pe(function(t){t.setTime(1e3*Math.floor(t/1e3))},function(t,n){t.setTime(+t+1e3*n)},function(t,n){return(n-t)/1e3},function(t){return t.getUTCSeconds()}),ms=Pe(function(t){t.setTime(Math.floor(t/_s)*_s)},function(t,n){t.setTime(+t+n*_s)},function(t,n){return(n-t)/_s},function(t){return t.getMinutes()}),ws=Pe(function(t){var n=t.getTimezoneOffset()*_s%36e5;n<0&&(n+=36e5),t.setTime(36e5*Math.floor((+t-n)/36e5)+n)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getHours()}),xs=Pe(function(t){t.setHours(0,0,0,0)},function(t,n){t.setDate(t.getDate()+n)},function(t,n){return(n-t-(n.getTimezoneOffset()-t.getTimezoneOffset())*_s)/864e5},function(t){return t.getDate()-1}),bs=Fe(0),Ms=Fe(1),As=(Fe(2),Fe(3),Fe(4),Fe(5),Fe(6),Pe(function(t){t.setDate(1),t.setHours(0,0,0,0)},function(t,n){t.setMonth(t.getMonth()+n)},function(t,n){return n.getMonth()-t.getMonth()+12*(n.getFullYear()-t.getFullYear())},function(t){return t.getMonth()})),ks=Pe(function(t){t.setMonth(0,1),t.setHours(0,0,0,0)},function(t,n){t.setFullYear(t.getFullYear()+n)},function(t,n){return n.getFullYear()-t.getFullYear()},function(t){return t.getFullYear()});ks.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Pe(function(n){n.setFullYear(Math.floor(n.getFullYear()/t)*t),n.setMonth(0,1),n.setHours(0,0,0,0)},function(n,e){n.setFullYear(n.getFullYear()+e*t)}):null};Pe(function(t){t.setUTCSeconds(0,0)},function(t,n){t.setTime(+t+n*_s)},function(t,n){return(n-t)/_s},function(t){return t.getUTCMinutes()}),Pe(function(t){t.setUTCMinutes(0,0,0)},function(t,n){t.setTime(+t+36e5*n)},function(t,n){return(n-t)/36e5},function(t){return t.getUTCHours()});var Ns=Pe(function(t){t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCDate(t.getUTCDate()+n)},function(t,n){return(n-t)/864e5},function(t){return t.getUTCDate()-1}),Ts=He(0),Cs=He(1),Ss=(He(2),He(3),He(4),He(5),He(6),Pe(function(t){t.setUTCDate(1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCMonth(t.getUTCMonth()+n)},function(t,n){return n.getUTCMonth()-t.getUTCMonth()+12*(n.getUTCFullYear()-t.getUTCFullYear())},function(t){return t.getUTCMonth()}),Pe(function(t){t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0)},function(t,n){t.setUTCFullYear(t.getUTCFullYear()+n)},function(t,n){return n.getUTCFullYear()-t.getUTCFullYear()},function(t){return t.getUTCFullYear()}));Ss.every=function(t){return isFinite(t=Math.floor(t))&&t>0?Pe(function(n){n.setUTCFullYear(Math.floor(n.getUTCFullYear()/t)*t),n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)},function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e*t)}):null};var Ds,Es,Us,Ps,Fs,Hs={"-":"",_:" ",0:"0"},Ls=/^\s*\d+/,Ys=/^%/,Os=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;!function(t){Ds=je(t),Es=Ds.format,Us=Ds.parse,Ps=Ds.utcFormat,Fs=Ds.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||Ps("%Y-%m-%dT%H:%M:%S.%LZ"),+new Date("2000-01-01T00:00:00.000Z")||Fs("%Y-%m-%dT%H:%M:%S.%LZ");var js=1e3,zs=60*js,Is=60*zs,qs=24*Is,$s=7*qs,Xs=30*qs,Bs=365*qs,Rs=function(){return Yr(ks,As,bs,xs,ws,ms,ys,gs,Es).domain([new Date(2e3,0,1),new Date(2e3,0,2)])},Ws=function(t){return t.match(/.{6}/g).map(function(t){return"#"+t})};Ws("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),Ws("393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6"),Ws("3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9"),Ws("1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5"),ca(Ft(300,.5,0),Ft(-240,.5,1));ca(Ft(-100,.75,.35),Ft(80,1.5,.8)),ca(Ft(260,.75,.35),Ft(80,1.5,.8)),Ft();var Zs=function(t){return function(){return t}};Or.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){switch(t=+t,n=+n,this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;default:this._context.lineTo(t,n)}}};var Vs=function(t){return new Or(t)},Gs=function(){function t(t){var u,s,c,l=t.length,h=!1;for(null==i&&(a=o(c=zn())),u=0;u<=l;++u)!(u<l&&r(s=t[u],u,t))===h&&((h=!h)?a.lineStart():a.lineEnd()),h&&a.point(+n(s,u,t),+e(s,u,t));if(c)return a=null,c+""||null}var n=jr,e=zr,r=Zs(!0),i=null,o=Vs,a=null;return t.x=function(e){return arguments.length?(n="function"==typeof e?e:Zs(+e),t):n},t.y=function(n){return arguments.length?(e="function"==typeof n?n:Zs(+n),t):e},t.defined=function(n){return arguments.length?(r="function"==typeof n?n:Zs(!!n),t):r},t.curve=function(n){return arguments.length?(o=n,null!=i&&(a=o(i)),t):o},t.context=function(n){return arguments.length?(null==n?i=a=null:a=o(i=n),t):i},t};Br.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:Xr(this,this._t0,$r(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(t,n){var e=NaN;if(t=+t,n=+n,t!==this._x1||n!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(t,n):this._context.moveTo(t,n);break;case 1:this._point=2;break;case 2:this._point=3,Xr(this,$r(this,e=qr(this,t,n)),e);break;default:Xr(this,this._t0,e=qr(this,t,n))}this._x0=this._x1,this._x1=t,this._y0=this._y1,this._y1=n,this._t0=e}}},(Rr.prototype=Object.create(Br.prototype)).point=function(t,n){Br.prototype.point.call(this,n,t)},Wr.prototype={moveTo:function(t,n){this._context.moveTo(n,t)},closePath:function(){this._context.closePath()},lineTo:function(t,n){this._context.lineTo(n,t)},bezierCurveTo:function(t,n,e,r,i,o){this._context.bezierCurveTo(n,t,r,e,o,i)}};var Js=function(t){return("function"==typeof t?Zr:Vr)(this,t)},Qs=function(t,n){return("function"==typeof t?Gr:Jr)(this,t,null==n?"":n)},Ks=function(t){return("function"==typeof t?Qr:Kr)(this,t)};ct.prototype.attrs=Js,ct.prototype.styles=Qs,ct.prototype.properties=Ks;var tc={NAMESPACE:"http://www.w3.org/2000/svg",CLASS:["o-chart"],STYLE:["font-size: 13px","font-family: Helvetica Neue, Helvetica, Arial ,sans-serif","font-weight: 400","max-width: 100%"],DOTS_RADIUS:4,BAR_GAP:.5,LEGEND_MARGIN_TOP:56,LEGEND_MARGIN_BOTTOM:10},nc=function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")},ec=function(){function t(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}return function(n,e,r){return e&&t(n.prototype,e),r&&t(n,r),n}}(),rc=function(){function t(n,e){nc(this,t),this.chart={},this.data=e,this.settings=n,this.chart.element=co(this.settings.selector),this.timeParse=Us(this.settings.formats.time)}return ec(t,[{key:"translate",value:function(t,n){return"translate("+t+","+n+")"}},{key:"slug",value:function(t,n){return t.toLowerCase().replace(/[^\w ]+/g," ").replace(/ +/g,n)}},{key:"init",value:function(){var t=this;this.render({settings:this.settings,chart:this.chart,data:this.data,namespace:"create"}),window.addEventListener("resize",function(){t.render({settings:t.settings,chart:t.chart,data:t.data,namespace:"update"})})}},{key:"render",value:function(t){var n=t.settings,e=t.chart,r=t.data,i=t.namespace;e=this.svg(n,e)[i](),n=this.define(n,r),n=this.domains(n,r),e=this.plots(n,e,r)[i](),e=this.axis(n,e)[i]()}},{key:"svg",value:function(t,n){function e(n){return{background:["o-chart__bg","fill-"+t.colors.background]}[n].join(" ")}function r(){return n.svg=n.element.append("svg").attrs({xmlns:tc.NAMESPACE}),n.bg=n.svg.append("rect").attrs({class:a.svg.classes("background")}),n.defs=n.svg.append("defs"),n.g=n.svg.append("g"),a.svg.update()}function i(){return n.svg=a.svg.selections().svg,n.g=a.svg.selections().g,t.width=n.element.property("clientWidth"),n.svg.attrs({class:tc.CLASS.join(" "),style:tc.STYLE.join(";"),width:t.width,height:t.height}),n.bg.attrs({width:t.width,height:t.height}),n.g.attrs({transform:a.translate(t.margin[3],t.margin[0])}),n}function o(){return n.svg=n.element.select("svg"),{element:n.element,svg:n.svg,g:n.svg.select("g")}}var a=this;return a.svg.create=r,a.svg.update=i,a.svg.selections=o,a.svg.classes=e,a.svg}},{key:"define",value:function(t,n){return t=this.defineLayout(t),t=this.defineScales(t),t=this.defineAxis(t),t=this.definePlots(t)}},{key:"defineLayout",value:function(t){return t.innerWidth=t.width-(t.margin[1]+t.margin[3]),t.innerHeight=t.height-(t.margin[0]+t.margin[2]),t.top=t.padding[0],t.right=t.innerWidth-(t.padding[1]+t.padding[3]),t.bottom=t.innerHeight-(t.padding[0]+t.padding[2]),t.left=t.padding[3],t}},{key:"defineScales",value:function(t){return t.scales={},t.scales.x=Rs().range([t.left,t.right]),t.scales.y=Ue().range([t.bottom,t.top]).clamp(!0),t}},{key:"defineAxis",value:function(t){return t.axis={},t.axis.x=s().scale(t.scales.x),t.axis.y=c().scale(t.scales.y),t}},{key:"definePlots",value:function(t){var n=this;return t.plots={},t.plots.line=Gs().x(function(e){return t.scales.x(n.timeParse(e[0]))}).y(function(n){return t.scales.y(n[1])}),t}},{key:"domains",value:function(t,n){var e=this,r=function(t,n){return si(t,function(t){return si(t.data,function(t){return t[n]})})},i=function(t,n){return ui(t,function(t){return ui(t.data,function(t){return t[n]})})},o=n.filter(function(t){return"bar"===t.type}).length,a=e.timeParse(r(n,0)),u=e.timeParse(i(n,0));o>0&&(a=As.offset(a,-1),u=As.offset(u,1));var s=r(n,1),c=i(n,1);return t.scales.x.domain([a,u]).nice(),t.scales.y.domain([s,c]).nice(),t}},{key:"plots",value:function(t,n,e){function r(n,e,r){return{plot:["o-chart__plot","o-chart__plot--"+s.slug(e,"-"),"o-chart__plot--"+s.slug(r,"-")],line:["o-chart__line","stroke-"+s.slug(r,"-")],dots:["o-chart__dot","fill-"+s.slug(r,"-"),"stroke-"+t.colors.background],bar:["o-chart__bar","fill-"+s.slug(r,"-")]}[n].join(" ")}function i(){return n.g.selectAll(".o-chart__plot").remove(),n.plots=n.g.selectAll(".o-chart__plot").data(e).enter().append("g").attr("class",function(){var t=co(this).data()[0];return s.plots.classes("plot",t.label,t.label)}),n.plots.each(function(t){s.plots[t.type](co(this))}),n}function o(n){n.append("path").attr("class",function(t){return s.plots.classes("line","",t.color)}).attr("d",function(n){return t.plots.line(n.data)}),n.selectAll(".o-chart__dot").data(function(t){return t.data}).enter().append("circle").attrs({cx:t.plots.line.x(),cy:t.plots.line.y(),r:tc.DOTS_RADIUS}).attr("class",function(t){var t=co(this.parentNode).data()[0];return s.plots.classes("dots","",t.color)})}function a(n){var r=e.filter(function(t){return"bar"===t.type}),i=n.data()[0],o=Math.max(0,i.data.length),a=t.right/o*tc.BAR_GAP/r.length,u=s.plots.classes("bar","",i.color),c=a*(r.map(function(t){return t.label}).indexOf(i.label)+1)-a*r.length/2;n.selectAll(".o-chart__bar").data(function(t){return i.data}).enter().append("rect").attrs({class:u,width:a,x:function(n){return t.scales.x(s.timeParse(n[0]))-c},y:function(n){return t.scales.y(Math.max(0,n[1]))},height:function(n){return Math.abs(Math.min(t.scales.y(0),t.bottom)-t.scales.y(n[1]))}})}function u(){return s.plots.create()}var s=this;return s.plots.create=i,s.plots.line=o,s.plots.bar=a,s.plots.update=u,s.plots.classes=r,s.plots}},{key:"axis",value:function(t,n){function e(n){return{axis_top:["o-chart__axis","o-chart__axis--x","o-chart__axis--top"],axis_bottom:["o-chart__axis","o-chart__axis--x","o-chart__axis--bottom"],axis_left:["o-chart__axis","o-chart__axis--y","o-chart__axis--left"],axis_right:["o-chart__axis","o-chart__axis--y","o-chart__axis--right"],label_top:["fill-"+t.colors.labels,"o-chart__label","o-chart__label--x","o-chart__label--top"],label_bottom:["fill-"+t.colors.labels,"o-chart__label","o-chart__label--x","o-chart__label--bottom"],label_left:["fill-"+t.colors.labels,"o-chart__label","o-chart__label--y","o-chart__label--left"],label_right:["fill-"+t.colors.labels,"o-chart__label","o-chart__label--y","o-chart__label--right"],ticks:["tick","fill-"+t.colors.axis],line_x:["o-chart__axis-gap--x","stroke-"+t.colors.axis],line_y:["o-chart__axis-gap--y","stroke-"+t.colors.axis]}[n].join(" ")}function r(){return n.axis={},n.axis.x=n.g.append("g").attr("class",s.axis.classes("axis_bottom")),n.axis.y=n.g.append("g").attr("class",s.axis.classes("axis_left")),s.axis.update(),s.axis.modify(),s.axis.labels()}function i(){return n.axis.x.call(t.axis.x).attr("transform",s.translate(0,t.innerHeight)),n.axis.y.call(t.axis.y),n.axis.x.select(".o-chart__axis-gap--x").attrs({x1:0,y1:0,y2:0,x2:t.innerWidth}),n.axis.y.select(".o-chart__axis-gap--y").attrs({x1:0,y1:0,x2:0,y2:t.innerHeight}),n.g.selectAll(".tick").attr("class",s.axis.classes("ticks")),n.g.select(".o-chart__label--x").attr("transform",function(){var n=co(this).select("text"),e=t.left+t.innerWidth/2,r=t.height-n.node().getBBox().height;return s.translate(e,r)}),n.g.select(".o-chart__label--y").attr("transform",function(){var n=0-t.margin[3]+co(this).node().getBBox().height,e=t.innerHeight/2;return[s.translate(n,e),"rotate(-90)"].join(" ")}),n}function o(){return n.axis.x.label=n.g.append("g").attr("class",s.axis.classes("label_bottom")),n.axis.x.label.append("text").attrs({"text-anchor":"middle"}),n.axis.y.label=n.g.append("g").attr("class",s.axis.classes("label_left")),n.axis.y.label.append("text").attrs({"text-anchor":"middle"}),s.axis.text(),n}function a(){n.g.select(".o-chart__label--x").select("text").text(t.labels.axis.x),n.g.select(".o-chart__label--y").select("text").text(t.labels.axis.y),s.axis.update()}function u(){n.axis.x.append("line").attrs({x1:0,y1:0,y2:0,x2:t.innerWidth,class:s.axis.classes("line_x")}),n.axis.x.select(".domain").attr("display","none"),n.axis.y.append("line").attrs({x1:0,y1:0,x2:0,y2:t.innerHeight,class:s.axis.classes("line_y")}),n.axis.y.select(".domain").attr("display","none")}var s=this;return s.axis.create=r,s.axis.update=i,s.axis.labels=o,s.axis.text=a,s.axis.modify=u,s.axis.classes=e,s.axis}}]),t}();return function(){function t(){nc(this,t)}return ec(t,[{key:"charts",value:function(t,n){return console.log("Here"),new rc(t,n).init()}}]),t}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
