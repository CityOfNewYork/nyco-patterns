var NycoPattterns=function(){"use strict";var t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},e=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},r=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),n="object"==("undefined"==typeof global?"undefined":t(global))&&global&&global.Object===Object&&global,o="object"==("undefined"==typeof self?"undefined":t(self))&&self&&self.Object===Object&&self,i=n||o||Function("return this")(),u=i.Symbol,a=Object.prototype,c=a.hasOwnProperty,s=a.toString,f=u?u.toStringTag:void 0;var l=Object.prototype.toString;var p="[object Null]",v="[object Undefined]",d=u?u.toStringTag:void 0;function h(t){return null==t?void 0===t?v:p:d&&d in Object(t)?function(t){var e=c.call(t,f),r=t[f];try{t[f]=void 0;var n=!0}catch(t){}var o=s.call(t);return n&&(e?t[f]=r:delete t[f]),o}(t):function(t){return l.call(t)}(t)}function _(e){var r=void 0===e?"undefined":t(e);return null!=e&&("object"==r||"function"==r)}var b="[object AsyncFunction]",g="[object Function]",y="[object GeneratorFunction]",m="[object Proxy]";function j(t){if(!_(t))return!1;var e=h(t);return e==g||e==y||e==b||e==m}var w,O=i["__core-js_shared__"],x=(w=/[^.]+$/.exec(O&&O.keys&&O.keys.IE_PROTO||""))?"Symbol(src)_1."+w:"";var S=Function.prototype.toString;function A(t){if(null!=t){try{return S.call(t)}catch(t){}try{return t+""}catch(t){}}return""}var z=/^\[object .+?Constructor\]$/,P=Function.prototype,k=Object.prototype,E=P.toString,T=k.hasOwnProperty,D=RegExp("^"+E.call(T).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");function F(t){return!(!_(t)||x&&x in t)&&(j(t)?D:z).test(A(t))}function U(t,e){var r=function(t,e){return null==t?void 0:t[e]}(t,e);return F(r)?r:void 0}var L=function(){try{var t=U(Object,"defineProperty");return t({},"",{}),t}catch(t){}}();function I(t,e,r){"__proto__"==e&&L?L(t,e,{configurable:!0,enumerable:!0,value:r,writable:!0}):t[e]=r}function $(t,e){return t===e||t!=t&&e!=e}var M=Object.prototype.hasOwnProperty;function B(t,e,r){var n=t[e];M.call(t,e)&&$(n,r)&&(void 0!==r||e in t)||I(t,e,r)}function C(t,e,r,n){var o=!r;r||(r={});for(var i=-1,u=e.length;++i<u;){var a=e[i],c=n?n(r[a],t[a],a,r,t):void 0;void 0===c&&(c=t[a]),o?I(r,a,c):B(r,a,c)}return r}function R(t){return t}function q(t,e,r){switch(r.length){case 0:return t.call(e);case 1:return t.call(e,r[0]);case 2:return t.call(e,r[0],r[1]);case 3:return t.call(e,r[0],r[1],r[2])}return t.apply(e,r)}var J=Math.max;var N=L?function(t,e){return L(t,"toString",{configurable:!0,enumerable:!1,value:(r=e,function(){return r}),writable:!0});var r}:R,V=800,H=16,W=Date.now;var G,X,K,Q=(G=N,X=0,K=0,function(){var t=W(),e=H-(t-K);if(K=t,e>0){if(++X>=V)return arguments[0]}else X=0;return G.apply(void 0,arguments)});function Y(t,e){return Q(function(t,e,r){return e=J(void 0===e?t.length-1:e,0),function(){for(var n=arguments,o=-1,i=J(n.length-e,0),u=Array(i);++o<i;)u[o]=n[e+o];o=-1;for(var a=Array(e+1);++o<e;)a[o]=n[o];return a[e]=r(u),q(t,this,a)}}(t,e,R),t+"")}var Z=9007199254740991;function tt(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=Z}function et(t){return null!=t&&tt(t.length)&&!j(t)}var rt=9007199254740991,nt=/^(?:0|[1-9]\d*)$/;function ot(e,r){var n=void 0===e?"undefined":t(e);return!!(r=null==r?rt:r)&&("number"==n||"symbol"!=n&&nt.test(e))&&e>-1&&e%1==0&&e<r}function it(e,r,n){if(!_(n))return!1;var o=void 0===r?"undefined":t(r);return!!("number"==o?et(n)&&ot(r,n.length):"string"==o&&r in n)&&$(n[r],e)}function ut(t){return Y(function(e,r){var n=-1,o=r.length,i=o>1?r[o-1]:void 0,u=o>2?r[2]:void 0;for(i=t.length>3&&"function"==typeof i?(o--,i):void 0,u&&it(r[0],r[1],u)&&(i=o<3?void 0:i,o=1),e=Object(e);++n<o;){var a=r[n];a&&t(e,a,n,i)}return e})}function at(e){return null!=e&&"object"==(void 0===e?"undefined":t(e))}var ct="[object Arguments]";function st(t){return at(t)&&h(t)==ct}var ft=Object.prototype,lt=ft.hasOwnProperty,pt=ft.propertyIsEnumerable,vt=st(function(){return arguments}())?st:function(t){return at(t)&&lt.call(t,"callee")&&!pt.call(t,"callee")},dt=Array.isArray;var ht="object"==("undefined"==typeof exports?"undefined":t(exports))&&exports&&!exports.nodeType&&exports,_t=ht&&"object"==("undefined"==typeof module?"undefined":t(module))&&module&&!module.nodeType&&module,bt=_t&&_t.exports===ht?i.Buffer:void 0,gt=(bt?bt.isBuffer:void 0)||function(){return!1},yt={};function mt(t){return function(e){return t(e)}}yt["[object Float32Array]"]=yt["[object Float64Array]"]=yt["[object Int8Array]"]=yt["[object Int16Array]"]=yt["[object Int32Array]"]=yt["[object Uint8Array]"]=yt["[object Uint8ClampedArray]"]=yt["[object Uint16Array]"]=yt["[object Uint32Array]"]=!0,yt["[object Arguments]"]=yt["[object Array]"]=yt["[object ArrayBuffer]"]=yt["[object Boolean]"]=yt["[object DataView]"]=yt["[object Date]"]=yt["[object Error]"]=yt["[object Function]"]=yt["[object Map]"]=yt["[object Number]"]=yt["[object Object]"]=yt["[object RegExp]"]=yt["[object Set]"]=yt["[object String]"]=yt["[object WeakMap]"]=!1;var jt="object"==("undefined"==typeof exports?"undefined":t(exports))&&exports&&!exports.nodeType&&exports,wt=jt&&"object"==("undefined"==typeof module?"undefined":t(module))&&module&&!module.nodeType&&module,Ot=wt&&wt.exports===jt&&n.process,xt=function(){try{var t=wt&&wt.require&&wt.require("util").types;return t||Ot&&Ot.binding&&Ot.binding("util")}catch(t){}}(),St=xt&&xt.isTypedArray,At=St?mt(St):function(t){return at(t)&&tt(t.length)&&!!yt[h(t)]},zt=Object.prototype.hasOwnProperty;function Pt(t,e){var r=dt(t),n=!r&&vt(t),o=!r&&!n&&gt(t),i=!r&&!n&&!o&&At(t),u=r||n||o||i,a=u?function(t,e){for(var r=-1,n=Array(t);++r<t;)n[r]=e(r);return n}(t.length,String):[],c=a.length;for(var s in t)!e&&!zt.call(t,s)||u&&("length"==s||o&&("offset"==s||"parent"==s)||i&&("buffer"==s||"byteLength"==s||"byteOffset"==s)||ot(s,c))||a.push(s);return a}var kt=Object.prototype;function Et(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||kt)}var Tt=Object.prototype.hasOwnProperty;function Dt(t){if(!_(t))return function(t){var e=[];if(null!=t)for(var r in Object(t))e.push(r);return e}(t);var e=Et(t),r=[];for(var n in t)("constructor"!=n||!e&&Tt.call(t,n))&&r.push(n);return r}function Ft(t){return et(t)?Pt(t,!0):Dt(t)}var Ut=ut(function(t,e,r,n){C(e,Ft(e),t,n)});function Lt(t,e){return function(r){return t(e(r))}}var It=Lt(Object.getPrototypeOf,Object),$t="[object Object]",Mt=Function.prototype,Bt=Object.prototype,Ct=Mt.toString,Rt=Bt.hasOwnProperty,qt=Ct.call(Object);function Jt(t){if(!at(t)||h(t)!=$t)return!1;var e=It(t);if(null===e)return!0;var r=Rt.call(e,"constructor")&&e.constructor;return"function"==typeof r&&r instanceof r&&Ct.call(r)==qt}var Nt="[object DOMException]",Vt="[object Error]";function Ht(t){if(!at(t))return!1;var e=h(t);return e==Vt||e==Nt||"string"==typeof t.message&&"string"==typeof t.name&&!Jt(t)}var Wt=Y(function(t,e){try{return q(t,void 0,e)}catch(t){return Ht(t)?t:new Error(t)}});function Gt(t,e){for(var r=-1,n=null==t?0:t.length,o=Array(n);++r<n;)o[r]=e(t[r],r,t);return o}function Xt(t,e){return Gt(e,function(e){return t[e]})}var Kt=Object.prototype,Qt=Kt.hasOwnProperty;function Yt(t,e,r,n){return void 0===t||$(t,Kt[r])&&!Qt.call(n,r)?e:t}var Zt={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"};function te(t){return"\\"+Zt[t]}var ee=Lt(Object.keys,Object),re=Object.prototype.hasOwnProperty;function ne(t){return et(t)?Pt(t):function(t){if(!Et(t))return ee(t);var e=[];for(var r in Object(t))re.call(t,r)&&"constructor"!=r&&e.push(r);return e}(t)}var oe=/<%=([\s\S]+?)%>/g;var ie,ue=(ie={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},function(t){return null==ie?void 0:ie[t]}),ae="[object Symbol]";function ce(e){return"symbol"==(void 0===e?"undefined":t(e))||at(e)&&h(e)==ae}var se=1/0,fe=u?u.prototype:void 0,le=fe?fe.toString:void 0;function pe(t){if("string"==typeof t)return t;if(dt(t))return Gt(t,pe)+"";if(ce(t))return le?le.call(t):"";var e=t+"";return"0"==e&&1/t==-se?"-0":e}function ve(t){return null==t?"":pe(t)}var de=/[&<>"']/g,he=RegExp(de.source);var _e={escape:/<%-([\s\S]+?)%>/g,evaluate:/<%([\s\S]+?)%>/g,interpolate:oe,variable:"",imports:{_:{escape:function(t){return(t=ve(t))&&he.test(t)?t.replace(de,ue):t}}}},be=/\b__p \+= '';/g,ge=/\b(__p \+=) '' \+/g,ye=/(__e\(.*?\)|\b__t\)) \+\n'';/g,me=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,je=/($^)/,we=/['\n\r\u2028\u2029\\]/g;function Oe(t,e){for(var r=-1,n=null==t?0:t.length;++r<n&&!1!==e(t[r],r,t););return t}var xe,Se=function(t,e,r){for(var n=-1,o=Object(t),i=r(t),u=i.length;u--;){var a=i[xe?u:++n];if(!1===e(o[a],a,o))break}return t};var Ae=function(t,e){return function(r,n){if(null==r)return r;if(!et(r))return t(r,n);for(var o=r.length,i=e?o:-1,u=Object(r);(e?i--:++i<o)&&!1!==n(u[i],i,u););return r}}(function(t,e){return t&&Se(t,e,ne)});function ze(t,e){var r;return(dt(t)?Oe:Ae)(t,"function"==typeof(r=e)?r:R)}function Pe(t,e){for(var r=t.length;r--;)if($(t[r][0],e))return r;return-1}var ke=Array.prototype.splice;function Ee(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}Ee.prototype.clear=function(){this.__data__=[],this.size=0},Ee.prototype.delete=function(t){var e=this.__data__,r=Pe(e,t);return!(r<0||(r==e.length-1?e.pop():ke.call(e,r,1),--this.size,0))},Ee.prototype.get=function(t){var e=this.__data__,r=Pe(e,t);return r<0?void 0:e[r][1]},Ee.prototype.has=function(t){return Pe(this.__data__,t)>-1},Ee.prototype.set=function(t,e){var r=this.__data__,n=Pe(r,t);return n<0?(++this.size,r.push([t,e])):r[n][1]=e,this};var Te=U(i,"Map"),De=U(Object,"create");var Fe="__lodash_hash_undefined__",Ue=Object.prototype.hasOwnProperty;var Le=Object.prototype.hasOwnProperty;var Ie="__lodash_hash_undefined__";function $e(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function Me(e,r){var n,o,i=e.__data__;return("string"==(o=void 0===(n=r)?"undefined":t(n))||"number"==o||"symbol"==o||"boolean"==o?"__proto__"!==n:null===n)?i["string"==typeof r?"string":"hash"]:i.map}function Be(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}$e.prototype.clear=function(){this.__data__=De?De(null):{},this.size=0},$e.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},$e.prototype.get=function(t){var e=this.__data__;if(De){var r=e[t];return r===Fe?void 0:r}return Ue.call(e,t)?e[t]:void 0},$e.prototype.has=function(t){var e=this.__data__;return De?void 0!==e[t]:Le.call(e,t)},$e.prototype.set=function(t,e){var r=this.__data__;return this.size+=this.has(t)?0:1,r[t]=De&&void 0===e?Ie:e,this},Be.prototype.clear=function(){this.size=0,this.__data__={hash:new $e,map:new(Te||Ee),string:new $e}},Be.prototype.delete=function(t){var e=Me(this,t).delete(t);return this.size-=e?1:0,e},Be.prototype.get=function(t){return Me(this,t).get(t)},Be.prototype.has=function(t){return Me(this,t).has(t)},Be.prototype.set=function(t,e){var r=Me(this,t),n=r.size;return r.set(t,e),this.size+=r.size==n?0:1,this};var Ce=200;function Re(t){var e=this.__data__=new Ee(t);this.size=e.size}function qe(t,e,r){(void 0===r||$(t[e],r))&&(void 0!==r||e in t)||I(t,e,r)}Re.prototype.clear=function(){this.__data__=new Ee,this.size=0},Re.prototype.delete=function(t){var e=this.__data__,r=e.delete(t);return this.size=e.size,r},Re.prototype.get=function(t){return this.__data__.get(t)},Re.prototype.has=function(t){return this.__data__.has(t)},Re.prototype.set=function(t,e){var r=this.__data__;if(r instanceof Ee){var n=r.__data__;if(!Te||n.length<Ce-1)return n.push([t,e]),this.size=++r.size,this;r=this.__data__=new Be(n)}return r.set(t,e),this.size=r.size,this};var Je="object"==("undefined"==typeof exports?"undefined":t(exports))&&exports&&!exports.nodeType&&exports,Ne=Je&&"object"==("undefined"==typeof module?"undefined":t(module))&&module&&!module.nodeType&&module,Ve=Ne&&Ne.exports===Je?i.Buffer:void 0,He=Ve?Ve.allocUnsafe:void 0;var We=i.Uint8Array;function Ge(t,e){var r,n,o=e?(r=t.buffer,n=new r.constructor(r.byteLength),new We(n).set(new We(r)),n):t.buffer;return new t.constructor(o,t.byteOffset,t.length)}var Xe=Object.create,Ke=function(){function t(){}return function(e){if(!_(e))return{};if(Xe)return Xe(e);t.prototype=e;var r=new t;return t.prototype=void 0,r}}();function Qe(t,e){if("__proto__"!=e)return t[e]}function Ye(t,e,r,n,o,i,u){var a=Qe(t,r),c=Qe(e,r),s=u.get(c);if(s)qe(t,r,s);else{var f,l=i?i(a,c,r+"",t,e,u):void 0,p=void 0===l;if(p){var v=dt(c),d=!v&&gt(c),h=!v&&!d&&At(c);l=c,v||d||h?dt(a)?l=a:at(f=a)&&et(f)?l=function(t,e){var r=-1,n=t.length;for(e||(e=Array(n));++r<n;)e[r]=t[r];return e}(a):d?(p=!1,l=function(t,e){if(e)return t.slice();var r=t.length,n=He?He(r):new t.constructor(r);return t.copy(n),n}(c,!0)):h?(p=!1,l=Ge(c,!0)):l=[]:Jt(c)||vt(c)?(l=a,vt(a)?l=function(t){return C(t,Ft(t))}(a):_(a)&&!j(a)||(l=function(t){return"function"!=typeof t.constructor||Et(t)?{}:Ke(It(t))}(c))):p=!1}p&&(u.set(c,l),o(l,c,n,i,u),u.delete(c)),qe(t,r,l)}}function Ze(t,e,r,n,o){t!==e&&Se(e,function(i,u){if(_(i))o||(o=new Re),Ye(t,e,u,r,Ze,n,o);else{var a=n?n(Qe(t,u),i,u+"",t,e,o):void 0;void 0===a&&(a=i),qe(t,u,a)}},Ft)}var tr=ut(function(t,e,r){Ze(t,e,r)});var er="__lodash_hash_undefined__";function rr(t){var e=-1,r=null==t?0:t.length;for(this.__data__=new Be;++e<r;)this.add(t[e])}function nr(t,e){for(var r=-1,n=null==t?0:t.length;++r<n;)if(e(t[r],r,t))return!0;return!1}rr.prototype.add=rr.prototype.push=function(t){return this.__data__.set(t,er),this},rr.prototype.has=function(t){return this.__data__.has(t)};var or=1,ir=2;function ur(t,e,r,n,o,i){var u=r&or,a=t.length,c=e.length;if(a!=c&&!(u&&c>a))return!1;var s=i.get(t);if(s&&i.get(e))return s==e;var f=-1,l=!0,p=r&ir?new rr:void 0;for(i.set(t,e),i.set(e,t);++f<a;){var v=t[f],d=e[f];if(n)var h=u?n(d,v,f,e,t,i):n(v,d,f,t,e,i);if(void 0!==h){if(h)continue;l=!1;break}if(p){if(!nr(e,function(t,e){if(u=e,!p.has(u)&&(v===t||o(v,t,r,n,i)))return p.push(e);var u})){l=!1;break}}else if(v!==d&&!o(v,d,r,n,i)){l=!1;break}}return i.delete(t),i.delete(e),l}function ar(t){var e=-1,r=Array(t.size);return t.forEach(function(t,n){r[++e]=[n,t]}),r}function cr(t){var e=-1,r=Array(t.size);return t.forEach(function(t){r[++e]=t}),r}var sr=1,fr=2,lr="[object Boolean]",pr="[object Date]",vr="[object Error]",dr="[object Map]",hr="[object Number]",_r="[object RegExp]",br="[object Set]",gr="[object String]",yr="[object Symbol]",mr="[object ArrayBuffer]",jr="[object DataView]",wr=u?u.prototype:void 0,Or=wr?wr.valueOf:void 0;var xr=Object.prototype.propertyIsEnumerable,Sr=Object.getOwnPropertySymbols,Ar=Sr?function(t){return null==t?[]:(t=Object(t),function(t,e){for(var r=-1,n=null==t?0:t.length,o=0,i=[];++r<n;){var u=t[r];e(u,r,t)&&(i[o++]=u)}return i}(Sr(t),function(e){return xr.call(t,e)}))}:function(){return[]};function zr(t){return function(t,e,r){var n=e(t);return dt(t)?n:function(t,e){for(var r=-1,n=e.length,o=t.length;++r<n;)t[o+r]=e[r];return t}(n,r(t))}(t,ne,Ar)}var Pr=1,kr=Object.prototype.hasOwnProperty;var Er=U(i,"DataView"),Tr=U(i,"Promise"),Dr=U(i,"Set"),Fr=U(i,"WeakMap"),Ur=A(Er),Lr=A(Te),Ir=A(Tr),$r=A(Dr),Mr=A(Fr),Br=h;(Er&&"[object DataView]"!=Br(new Er(new ArrayBuffer(1)))||Te&&"[object Map]"!=Br(new Te)||Tr&&"[object Promise]"!=Br(Tr.resolve())||Dr&&"[object Set]"!=Br(new Dr)||Fr&&"[object WeakMap]"!=Br(new Fr))&&(Br=function(t){var e=h(t),r="[object Object]"==e?t.constructor:void 0,n=r?A(r):"";if(n)switch(n){case Ur:return"[object DataView]";case Lr:return"[object Map]";case Ir:return"[object Promise]";case $r:return"[object Set]";case Mr:return"[object WeakMap]"}return e});var Cr=Br,Rr=1,qr="[object Arguments]",Jr="[object Array]",Nr="[object Object]",Vr=Object.prototype.hasOwnProperty;function Hr(t,e,r,n,o,i){var u=dt(t),a=dt(e),c=u?Jr:Cr(t),s=a?Jr:Cr(e),f=(c=c==qr?Nr:c)==Nr,l=(s=s==qr?Nr:s)==Nr,p=c==s;if(p&&gt(t)){if(!gt(e))return!1;u=!0,f=!1}if(p&&!f)return i||(i=new Re),u||At(t)?ur(t,e,r,n,o,i):function(t,e,r,n,o,i,u){switch(r){case jr:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case mr:return!(t.byteLength!=e.byteLength||!i(new We(t),new We(e)));case lr:case pr:case hr:return $(+t,+e);case vr:return t.name==e.name&&t.message==e.message;case _r:case gr:return t==e+"";case dr:var a=ar;case br:var c=n&sr;if(a||(a=cr),t.size!=e.size&&!c)return!1;var s=u.get(t);if(s)return s==e;n|=fr,u.set(t,e);var f=ur(a(t),a(e),n,o,i,u);return u.delete(t),f;case yr:if(Or)return Or.call(t)==Or.call(e)}return!1}(t,e,c,r,n,o,i);if(!(r&Rr)){var v=f&&Vr.call(t,"__wrapped__"),d=l&&Vr.call(e,"__wrapped__");if(v||d){var h=v?t.value():t,_=d?e.value():e;return i||(i=new Re),o(h,_,r,n,i)}}return!!p&&(i||(i=new Re),function(t,e,r,n,o,i){var u=r&Pr,a=zr(t),c=a.length;if(c!=zr(e).length&&!u)return!1;for(var s=c;s--;){var f=a[s];if(!(u?f in e:kr.call(e,f)))return!1}var l=i.get(t);if(l&&i.get(e))return l==e;var p=!0;i.set(t,e),i.set(e,t);for(var v=u;++s<c;){var d=t[f=a[s]],h=e[f];if(n)var _=u?n(h,d,f,e,t,i):n(d,h,f,t,e,i);if(!(void 0===_?d===h||o(d,h,r,n,i):_)){p=!1;break}v||(v="constructor"==f)}if(p&&!v){var b=t.constructor,g=e.constructor;b!=g&&"constructor"in t&&"constructor"in e&&!("function"==typeof b&&b instanceof b&&"function"==typeof g&&g instanceof g)&&(p=!1)}return i.delete(t),i.delete(e),p}(t,e,r,n,o,i))}function Wr(t,e,r,n,o){return t===e||(null==t||null==e||!at(t)&&!at(e)?t!=t&&e!=e:Hr(t,e,r,n,Wr,o))}var Gr=1,Xr=2;function Kr(t){return t==t&&!_(t)}function Qr(t,e){return function(r){return null!=r&&(r[t]===e&&(void 0!==e||t in Object(r)))}}function Yr(t){var e=function(t){for(var e=ne(t),r=e.length;r--;){var n=e[r],o=t[n];e[r]=[n,o,Kr(o)]}return e}(t);return 1==e.length&&e[0][2]?Qr(e[0][0],e[0][1]):function(r){return r===t||function(t,e,r,n){var o=r.length,i=o,u=!n;if(null==t)return!i;for(t=Object(t);o--;){var a=r[o];if(u&&a[2]?a[1]!==t[a[0]]:!(a[0]in t))return!1}for(;++o<i;){var c=(a=r[o])[0],s=t[c],f=a[1];if(u&&a[2]){if(void 0===s&&!(c in t))return!1}else{var l=new Re;if(n)var p=n(s,f,c,t,e,l);if(!(void 0===p?Wr(f,s,Gr|Xr,n,l):p))return!1}}return!0}(r,t,e)}}var Zr=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,tn=/^\w*$/;function en(e,r){if(dt(e))return!1;var n=void 0===e?"undefined":t(e);return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!ce(e))||(tn.test(e)||!Zr.test(e)||null!=r&&e in Object(r))}var rn="Expected a function";function nn(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new TypeError(rn);var r=function r(){var n=arguments,o=e?e.apply(this,n):n[0],i=r.cache;if(i.has(o))return i.get(o);var u=t.apply(this,n);return r.cache=i.set(o,u)||i,u};return r.cache=new(nn.Cache||Be),r}nn.Cache=Be;var on=500;var un=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,an=/\\(\\)?/g,cn=function(t){var e=nn(t,function(t){return r.size===on&&r.clear(),t}),r=e.cache;return e}(function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(un,function(t,r,n,o){e.push(n?o.replace(an,"$1"):r||t)}),e});function sn(t,e){return dt(t)?t:en(t,e)?[t]:cn(ve(t))}var fn=1/0;function ln(t){if("string"==typeof t||ce(t))return t;var e=t+"";return"0"==e&&1/t==-fn?"-0":e}function pn(t,e){for(var r=0,n=(e=sn(e,t)).length;null!=t&&r<n;)t=t[ln(e[r++])];return r&&r==n?t:void 0}function vn(t,e){return null!=t&&e in Object(t)}function dn(t,e){return null!=t&&function(t,e,r){for(var n=-1,o=(e=sn(e,t)).length,i=!1;++n<o;){var u=ln(e[n]);if(!(i=null!=t&&r(t,u)))break;t=t[u]}return i||++n!=o?i:!!(o=null==t?0:t.length)&&tt(o)&&ot(u,o)&&(dt(t)||vt(t))}(t,e,vn)}var hn=1,_n=2;function bn(t,e){return en(t)&&Kr(e)?Qr(ln(t),e):function(r){var n=function(t,e,r){var n=null==t?void 0:pn(t,e);return void 0===n?r:n}(r,t);return void 0===n&&n===e?dn(r,t):Wr(e,n,hn|_n)}}function gn(t){return en(t)?(e=ln(t),function(t){return null==t?void 0:t[e]}):function(t){return function(e){return pn(e,t)}}(t);var e}function yn(e){return"function"==typeof e?e:null==e?R:"object"==(void 0===e?"undefined":t(e))?dt(e)?bn(e[0],e[1]):Yr(e):gn(e)}function mn(t,e){if(t!==e){var r=void 0!==t,n=null===t,o=t==t,i=ce(t),u=void 0!==e,a=null===e,c=e==e,s=ce(e);if(!a&&!s&&!i&&t>e||i&&u&&c&&!a&&!s||n&&u&&c||!r&&c||!o)return 1;if(!n&&!i&&!s&&t<e||s&&r&&o&&!n&&!i||a&&r&&o||!u&&o||!c)return-1}return 0}function jn(t,e,r){var n=-1;return e=Gt(e.length?e:[R],mt(yn)),function(t,e){var r=t.length;for(t.sort(e);r--;)t[r]=t[r].value;return t}(function(t,e){var r=-1,n=et(t)?Array(t.length):[];return Ae(t,function(t,o,i){n[++r]=e(t,o,i)}),n}(t,function(t,r,o){return{criteria:Gt(e,function(e){return e(t)}),index:++n,value:t}}),function(t,e){return function(t,e,r){for(var n=-1,o=t.criteria,i=e.criteria,u=o.length,a=r.length;++n<u;){var c=mn(o[n],i[n]);if(c)return n>=a?c:c*("desc"==r[n]?-1:1)}return t.index-e.index}(t,e,r)})}Dr&&cr(new Dr([,-0]))[1];var wn=function(){function t(r){e(this,t),this.default=t.default,this.templates=t.templates,this.settings=tr({},t.default,r)}return r(t,[{key:"init",value:function(){var e=this,r=[],n=this.settings.feed,o={rssToJson:t.rssToJson,rssUrl:Array.isArray(n)?n:[n]};return ze(o.rssUrl,function(t,n){e._request(o,t).then(function(t){if(r.push(e._process(JSON.parse(t),e.settings)),r.length===o.rssUrl.length){e._merge(r,e.settings);var n=e._render(e._merge(r,e.settings),e.settings),i=document.querySelector(e.settings.selector);i&&(i.innerHTML=n)}})}),this}},{key:"_request",value:function(t,e){return new Promise(function(r,n){var o=new XMLHttpRequest;o.onreadystatechange=function(t){var e=t.target;4===e.readyState&&(e.status>=200&&e.status<400?r(e.response):n(new Error(e.status)))},o.ontimeout=function(){n(new Error("The Feed request timed out"))},o.open("GET",t.rssToJson+"?rss_url="+e,!0),o.send(),o=null})}},{key:"_process",value:function(e,r){return t.process[r.type](e,r)}},{key:"_merge",value:function(e,r){return t.merge[r.type](e)}},{key:"_render",value:function(t,e){var r;return t.settings=e,e.log&&console.dir(t),function(t,e,r){var n=_e.imports._.templateSettings||_e;r&&it(t,e,r)&&(e=void 0),t=ve(t),e=Ut({},e,n,Yt);var o,i,u=Ut({},e.imports,n.imports,Yt),a=ne(u),c=Xt(u,a),s=0,f=e.interpolate||je,l="__p += '",p=RegExp((e.escape||je).source+"|"+f.source+"|"+(f===oe?me:je).source+"|"+(e.evaluate||je).source+"|$","g"),v="sourceURL"in e?"//# sourceURL="+e.sourceURL+"\n":"";t.replace(p,function(e,r,n,u,a,c){return n||(n=u),l+=t.slice(s,c).replace(we,te),r&&(o=!0,l+="' +\n__e("+r+") +\n'"),a&&(i=!0,l+="';\n"+a+";\n__p += '"),n&&(l+="' +\n((__t = ("+n+")) == null ? '' : __t) +\n'"),s=c+e.length,e}),l+="';\n";var d=e.variable;d||(l="with (obj) {\n"+l+"\n}\n"),l=(i?l.replace(be,""):l).replace(ge,"$1").replace(ye,"$1;"),l="function("+(d||"obj")+") {\n"+(d?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(i?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+l+"return __p\n}";var h=Wt(function(){return Function(a,v+"return "+l).apply(void 0,c)});if(h.source=l,Ht(h))throw h;return h}((r=e.templates,null==r?[]:Xt(r,ne(r))).join(""),{imports:{_each:ze}})(t)}}]),t}();return wn.rssToJson="https://api.rss2json.com/v1/api.json",wn.templates={medium:{opener:['<section class="o-feed <%- settings.classes.wrapper %>" style="',"<% if (settings.fontSize) { %>font-size: <%- settings.fontSize %>;<% } %>","<% if (settings.postBorderColor) { %>border-color: <%- settings.postBorderColor %>;<% } %>",'">'],header:['<header class="o-feed__header <%- settings.classes.header %>">','<div class="o-feed__avatar <%- settings.classes.avatar %>">','<img src="','<% if (settings.profileImg !== "") { %>',"<%- settings.profileImg %>","<% } else { %>","<%- feed.profileImg %>",'<% } %>" ','width="<%- settings.ratioProfile[0] %>" ','height="<%- settings.ratioProfile[1] %>">',"</div>",'<a class="o-feed__url <%- settings.classes.avatar %>" ','href="<% if (settings.titleUrl !== "") { %>',"<%- settings.titleUrl %>","<% } else { %>","<%- feed.url %>",'<% } %>" ','target="_blank" rel="noopener noreferrer nofollow">','<% if (settings.title !== "") { %>',"<%- settings.title %>","<% } else { %>","<%- feed.title %>","<% } %>","</a>","</header>"],posts:['<div class="o-feed__items" style="',"border-color: <%- settings.postBorderColor %>;",'">',"<% _each(items, function(post) { %>",'<div class="c-feed-item <%- settings.classes.feedItem %>">','<h4 class="c-feed-item__title <%- settings.classes.title %>">','<a class="c-feed-item__link <%- settings.classes.link %>"','href="<%- post.guid %>"','target="_blank"','rel="noopener noreferrer nofollow">',"<%- post.title %>","</a>","</h4>",'<span class="c-feed-item__date <%- settings.classes.date %>" ','title="<%- settings.postDateTitle %>">',"<%- post.date %>","</span>",'<div class="c-feed-item__thumbnail <%- settings.classes.thumbnail %>"','style="',"background-image: url(<%- post.thumbnail %>);",'height: <%- settings.postImgHeight %>;"','aria-hidden="true">','<img style="display: none;" src="<%- post.thumbnail %>" alt="<%- post.title %>">',"</div>",'<p class="c-feed-item__excerpt <%- settings.classes.excerpt %>">',"<%- post.excerpt %><%- settings.postExcerptTrail %>","</p>",'<div class="c-feed-item__footer <%- settings.classes.itemFooter %>">','<a class="c-feed-item__cta <%- settings.classes.cta %>" ','href="<%- post.guid %>" ','target="_blank" ','rel="noopener noreferrer nofollow">',"<%- settings.postCtaText %>","</a>","</div>","</div>","<% }); %>","</div>"],closer:["</section>"]}},wn.process={medium:function(t,e){var r=e.postExcerptLength;return ze(t.items,function(t,n){var o,i="";return i=(i=(i=(i=t.description.replace(/<figure.*>.*?<\/figure>/g,"")).replace(/<(.|\n)*?>/g,"")).substr(0,r)).substr(0,Math.min(i.length,i.lastIndexOf(" "))),t.excerpt=i,o=new Date(Date.parse(t.pubDate.replace(" ","T"))).toLocaleDateString(e.postDateLocal,e.postDateFormat),t.date=o,t}),t}},wn.merge={medium:function(t){var e,r,n,o,i={},u=[];return t.forEach(function(t){u=u.concat(t.items)}),t.forEach(function(t){i=tr(i,t)}),i.items=(r="pubDate",n="desc",null==(e=u)?[]:(dt(r)||(r=null==r?[]:[r]),dt(n=o?void 0:n)||(n=null==n?[]:[n]),jn(e,r,n))),i}},wn.default={feed:"",selector:"#js-feed",type:"medium",title:"",titleUrl:"",profileImg:"",fontSize:"",ratioProfile:["50","50"],postBorderColor:"lightsteelblue",postImgHeight:"200px",postExcerptLength:120,postExcerptTrail:"…",postCtaText:"Read the full post",postDateLocal:"en-US",postDateFormat:{year:"numeric",month:"long",day:"numeric"},postDateTitle:"Published Date",classes:{wrapper:"",header:"",url:"",feedItem:"",title:"",link:"",thumbnail:"",excerpt:"",itemFooter:"",cta:"",date:""},templates:{opener:wn.templates.medium.opener.join(""),header:wn.templates.medium.header.join(""),posts:wn.templates.medium.posts.join(""),closer:wn.templates.medium.closer.join("")},log:!1,unique:!1},function(){function t(){e(this,t)}return r(t,[{key:"Feed",value:function(t){return new wn(t).init()}}]),t}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
