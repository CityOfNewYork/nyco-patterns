var NycoPattterns=function(){"use strict";var t="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},e=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")},r=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}(),n="object"==("undefined"==typeof global?"undefined":t(global))&&global&&global.Object===Object&&global,o="object"==("undefined"==typeof self?"undefined":t(self))&&self&&self.Object===Object&&self,i=n||o||Function("return this")(),a=i.Symbol,u=Object.prototype,c=u.hasOwnProperty,s=u.toString,f=a?a.toStringTag:void 0;var l=Object.prototype.toString;var p="[object Null]",v="[object Undefined]",d=a?a.toStringTag:void 0;function h(t){return null==t?void 0===t?v:p:d&&d in Object(t)?function(t){var e=c.call(t,f),r=t[f];try{t[f]=void 0;var n=!0}catch(t){}var o=s.call(t);return n&&(e?t[f]=r:delete t[f]),o}(t):function(t){return l.call(t)}(t)}function _(e){var r=void 0===e?"undefined":t(e);return null!=e&&("object"==r||"function"==r)}var b="[object AsyncFunction]",y="[object Function]",g="[object GeneratorFunction]",m="[object Proxy]";function j(t){if(!_(t))return!1;var e=h(t);return e==y||e==g||e==b||e==m}var w,O=i["__core-js_shared__"],x=(w=/[^.]+$/.exec(O&&O.keys&&O.keys.IE_PROTO||""))?"Symbol(src)_1."+w:"";var S=Function.prototype.toString;function A(t){if(null!=t){try{return S.call(t)}catch(t){}try{return t+""}catch(t){}}return""}var k=/^\[object .+?Constructor\]$/,E=Function.prototype,P=Object.prototype,z=E.toString,T=P.hasOwnProperty,D=RegExp("^"+z.call(T).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");function F(t){return!(!_(t)||x&&x in t)&&(j(t)?D:k).test(A(t))}function L(t,e){var r=function(t,e){return null==t?void 0:t[e]}(t,e);return F(r)?r:void 0}var R=function(){try{var t=L(Object,"defineProperty");return t({},"",{}),t}catch(t){}}();function $(t,e,r){"__proto__"==e&&R?R(t,e,{configurable:!0,enumerable:!0,value:r,writable:!0}):t[e]=r}function M(t,e){return t===e||t!=t&&e!=e}var U=Object.prototype.hasOwnProperty;function I(t,e,r){var n=t[e];U.call(t,e)&&M(n,r)&&(void 0!==r||e in t)||$(t,e,r)}function C(t,e,r,n){var o=!r;r||(r={});for(var i=-1,a=e.length;++i<a;){var u=e[i],c=n?n(r[u],t[u],u,r,t):void 0;void 0===c&&(c=t[u]),o?$(r,u,c):I(r,u,c)}return r}function B(t){return t}function q(t,e,r){switch(r.length){case 0:return t.call(e);case 1:return t.call(e,r[0]);case 2:return t.call(e,r[0],r[1]);case 3:return t.call(e,r[0],r[1],r[2])}return t.apply(e,r)}var J=Math.max;var N=R?function(t,e){return R(t,"toString",{configurable:!0,enumerable:!1,value:(r=e,function(){return r}),writable:!0});var r}:B,V=800,W=16,G=Date.now;var H,X,K,Q=(H=N,X=0,K=0,function(){var t=G(),e=W-(t-K);if(K=t,e>0){if(++X>=V)return arguments[0]}else X=0;return H.apply(void 0,arguments)});function Y(t,e){return Q(function(t,e,r){return e=J(void 0===e?t.length-1:e,0),function(){for(var n=arguments,o=-1,i=J(n.length-e,0),a=Array(i);++o<i;)a[o]=n[e+o];o=-1;for(var u=Array(e+1);++o<e;)u[o]=n[o];return u[e]=r(a),q(t,this,u)}}(t,e,B),t+"")}var Z=9007199254740991;function tt(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=Z}function et(t){return null!=t&&tt(t.length)&&!j(t)}var rt=9007199254740991,nt=/^(?:0|[1-9]\d*)$/;function ot(e,r){var n=void 0===e?"undefined":t(e);return!!(r=null==r?rt:r)&&("number"==n||"symbol"!=n&&nt.test(e))&&e>-1&&e%1==0&&e<r}function it(e,r,n){if(!_(n))return!1;var o=void 0===r?"undefined":t(r);return!!("number"==o?et(n)&&ot(r,n.length):"string"==o&&r in n)&&M(n[r],e)}function at(t){return Y(function(e,r){var n=-1,o=r.length,i=o>1?r[o-1]:void 0,a=o>2?r[2]:void 0;for(i=t.length>3&&"function"==typeof i?(o--,i):void 0,a&&it(r[0],r[1],a)&&(i=o<3?void 0:i,o=1),e=Object(e);++n<o;){var u=r[n];u&&t(e,u,n,i)}return e})}function ut(e){return null!=e&&"object"==(void 0===e?"undefined":t(e))}var ct="[object Arguments]";function st(t){return ut(t)&&h(t)==ct}var ft=Object.prototype,lt=ft.hasOwnProperty,pt=ft.propertyIsEnumerable,vt=st(function(){return arguments}())?st:function(t){return ut(t)&&lt.call(t,"callee")&&!pt.call(t,"callee")},dt=Array.isArray;var ht="object"==("undefined"==typeof exports?"undefined":t(exports))&&exports&&!exports.nodeType&&exports,_t=ht&&"object"==("undefined"==typeof module?"undefined":t(module))&&module&&!module.nodeType&&module,bt=_t&&_t.exports===ht?i.Buffer:void 0,yt=(bt?bt.isBuffer:void 0)||function(){return!1},gt={};function mt(t){return function(e){return t(e)}}gt["[object Float32Array]"]=gt["[object Float64Array]"]=gt["[object Int8Array]"]=gt["[object Int16Array]"]=gt["[object Int32Array]"]=gt["[object Uint8Array]"]=gt["[object Uint8ClampedArray]"]=gt["[object Uint16Array]"]=gt["[object Uint32Array]"]=!0,gt["[object Arguments]"]=gt["[object Array]"]=gt["[object ArrayBuffer]"]=gt["[object Boolean]"]=gt["[object DataView]"]=gt["[object Date]"]=gt["[object Error]"]=gt["[object Function]"]=gt["[object Map]"]=gt["[object Number]"]=gt["[object Object]"]=gt["[object RegExp]"]=gt["[object Set]"]=gt["[object String]"]=gt["[object WeakMap]"]=!1;var jt="object"==("undefined"==typeof exports?"undefined":t(exports))&&exports&&!exports.nodeType&&exports,wt=jt&&"object"==("undefined"==typeof module?"undefined":t(module))&&module&&!module.nodeType&&module,Ot=wt&&wt.exports===jt&&n.process,xt=function(){try{return Ot&&Ot.binding&&Ot.binding("util")}catch(t){}}(),St=xt&&xt.isTypedArray,At=St?mt(St):function(t){return ut(t)&&tt(t.length)&&!!gt[h(t)]},kt=Object.prototype.hasOwnProperty;function Et(t,e){var r=dt(t),n=!r&&vt(t),o=!r&&!n&&yt(t),i=!r&&!n&&!o&&At(t),a=r||n||o||i,u=a?function(t,e){for(var r=-1,n=Array(t);++r<t;)n[r]=e(r);return n}(t.length,String):[],c=u.length;for(var s in t)!e&&!kt.call(t,s)||a&&("length"==s||o&&("offset"==s||"parent"==s)||i&&("buffer"==s||"byteLength"==s||"byteOffset"==s)||ot(s,c))||u.push(s);return u}var Pt=Object.prototype;function zt(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||Pt)}var Tt=Object.prototype.hasOwnProperty;function Dt(t){if(!_(t))return function(t){var e=[];if(null!=t)for(var r in Object(t))e.push(r);return e}(t);var e=zt(t),r=[];for(var n in t)("constructor"!=n||!e&&Tt.call(t,n))&&r.push(n);return r}function Ft(t){return et(t)?Et(t,!0):Dt(t)}var Lt=at(function(t,e,r,n){C(e,Ft(e),t,n)});function Rt(t,e){return function(r){return t(e(r))}}var $t=Rt(Object.getPrototypeOf,Object),Mt="[object Object]",Ut=Function.prototype,It=Object.prototype,Ct=Ut.toString,Bt=It.hasOwnProperty,qt=Ct.call(Object);function Jt(t){if(!ut(t)||h(t)!=Mt)return!1;var e=$t(t);if(null===e)return!0;var r=Bt.call(e,"constructor")&&e.constructor;return"function"==typeof r&&r instanceof r&&Ct.call(r)==qt}var Nt="[object DOMException]",Vt="[object Error]";function Wt(t){if(!ut(t))return!1;var e=h(t);return e==Vt||e==Nt||"string"==typeof t.message&&"string"==typeof t.name&&!Jt(t)}var Gt=Y(function(t,e){try{return q(t,void 0,e)}catch(t){return Wt(t)?t:new Error(t)}});function Ht(t,e){for(var r=-1,n=null==t?0:t.length,o=Array(n);++r<n;)o[r]=e(t[r],r,t);return o}function Xt(t,e){return Ht(e,function(e){return t[e]})}var Kt=Object.prototype,Qt=Kt.hasOwnProperty;function Yt(t,e,r,n){return void 0===t||M(t,Kt[r])&&!Qt.call(n,r)?e:t}var Zt={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"};function te(t){return"\\"+Zt[t]}var ee=Rt(Object.keys,Object),re=Object.prototype.hasOwnProperty;function ne(t){return et(t)?Et(t):function(t){if(!zt(t))return ee(t);var e=[];for(var r in Object(t))re.call(t,r)&&"constructor"!=r&&e.push(r);return e}(t)}var oe=/<%=([\s\S]+?)%>/g;var ie,ae=(ie={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},function(t){return null==ie?void 0:ie[t]}),ue="[object Symbol]";function ce(e){return"symbol"==(void 0===e?"undefined":t(e))||ut(e)&&h(e)==ue}var se=1/0,fe=a?a.prototype:void 0,le=fe?fe.toString:void 0;function pe(t){if("string"==typeof t)return t;if(dt(t))return Ht(t,pe)+"";if(ce(t))return le?le.call(t):"";var e=t+"";return"0"==e&&1/t==-se?"-0":e}function ve(t){return null==t?"":pe(t)}var de=/[&<>"']/g,he=RegExp(de.source);var _e={escape:/<%-([\s\S]+?)%>/g,evaluate:/<%([\s\S]+?)%>/g,interpolate:oe,variable:"",imports:{_:{escape:function(t){return(t=ve(t))&&he.test(t)?t.replace(de,ae):t}}}},be=/\b__p \+= '';/g,ye=/\b(__p \+=) '' \+/g,ge=/(__e\(.*?\)|\b__t\)) \+\n'';/g,me=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,je=/($^)/,we=/['\n\r\u2028\u2029\\]/g;function Oe(t,e){for(var r=-1,n=null==t?0:t.length;++r<n&&!1!==e(t[r],r,t););return t}var xe,Se=function(t,e,r){for(var n=-1,o=Object(t),i=r(t),a=i.length;a--;){var u=i[xe?a:++n];if(!1===e(o[u],u,o))break}return t};var Ae=function(t,e){return function(r,n){if(null==r)return r;if(!et(r))return t(r,n);for(var o=r.length,i=e?o:-1,a=Object(r);(e?i--:++i<o)&&!1!==n(a[i],i,a););return r}}(function(t,e){return t&&Se(t,e,ne)});function ke(t,e){var r;return(dt(t)?Oe:Ae)(t,"function"==typeof(r=e)?r:B)}function Ee(t,e){for(var r=t.length;r--;)if(M(t[r][0],e))return r;return-1}var Pe=Array.prototype.splice;function ze(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}ze.prototype.clear=function(){this.__data__=[],this.size=0},ze.prototype.delete=function(t){var e=this.__data__,r=Ee(e,t);return!(r<0||(r==e.length-1?e.pop():Pe.call(e,r,1),--this.size,0))},ze.prototype.get=function(t){var e=this.__data__,r=Ee(e,t);return r<0?void 0:e[r][1]},ze.prototype.has=function(t){return Ee(this.__data__,t)>-1},ze.prototype.set=function(t,e){var r=this.__data__,n=Ee(r,t);return n<0?(++this.size,r.push([t,e])):r[n][1]=e,this};var Te=L(i,"Map"),De=L(Object,"create");var Fe="__lodash_hash_undefined__",Le=Object.prototype.hasOwnProperty;var Re=Object.prototype.hasOwnProperty;var $e="__lodash_hash_undefined__";function Me(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}function Ue(e,r){var n,o,i=e.__data__;return("string"==(o=void 0===(n=r)?"undefined":t(n))||"number"==o||"symbol"==o||"boolean"==o?"__proto__"!==n:null===n)?i["string"==typeof r?"string":"hash"]:i.map}function Ie(t){var e=-1,r=null==t?0:t.length;for(this.clear();++e<r;){var n=t[e];this.set(n[0],n[1])}}Me.prototype.clear=function(){this.__data__=De?De(null):{},this.size=0},Me.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},Me.prototype.get=function(t){var e=this.__data__;if(De){var r=e[t];return r===Fe?void 0:r}return Le.call(e,t)?e[t]:void 0},Me.prototype.has=function(t){var e=this.__data__;return De?void 0!==e[t]:Re.call(e,t)},Me.prototype.set=function(t,e){var r=this.__data__;return this.size+=this.has(t)?0:1,r[t]=De&&void 0===e?$e:e,this},Ie.prototype.clear=function(){this.size=0,this.__data__={hash:new Me,map:new(Te||ze),string:new Me}},Ie.prototype.delete=function(t){var e=Ue(this,t).delete(t);return this.size-=e?1:0,e},Ie.prototype.get=function(t){return Ue(this,t).get(t)},Ie.prototype.has=function(t){return Ue(this,t).has(t)},Ie.prototype.set=function(t,e){var r=Ue(this,t),n=r.size;return r.set(t,e),this.size+=r.size==n?0:1,this};var Ce=200;function Be(t){var e=this.__data__=new ze(t);this.size=e.size}function qe(t,e,r){(void 0===r||M(t[e],r))&&(void 0!==r||e in t)||$(t,e,r)}Be.prototype.clear=function(){this.__data__=new ze,this.size=0},Be.prototype.delete=function(t){var e=this.__data__,r=e.delete(t);return this.size=e.size,r},Be.prototype.get=function(t){return this.__data__.get(t)},Be.prototype.has=function(t){return this.__data__.has(t)},Be.prototype.set=function(t,e){var r=this.__data__;if(r instanceof ze){var n=r.__data__;if(!Te||n.length<Ce-1)return n.push([t,e]),this.size=++r.size,this;r=this.__data__=new Ie(n)}return r.set(t,e),this.size=r.size,this};var Je="object"==("undefined"==typeof exports?"undefined":t(exports))&&exports&&!exports.nodeType&&exports,Ne=Je&&"object"==("undefined"==typeof module?"undefined":t(module))&&module&&!module.nodeType&&module,Ve=Ne&&Ne.exports===Je?i.Buffer:void 0,We=Ve?Ve.allocUnsafe:void 0;var Ge=i.Uint8Array;function He(t,e){var r,n,o=e?(r=t.buffer,n=new r.constructor(r.byteLength),new Ge(n).set(new Ge(r)),n):t.buffer;return new t.constructor(o,t.byteOffset,t.length)}var Xe=Object.create,Ke=function(){function t(){}return function(e){if(!_(e))return{};if(Xe)return Xe(e);t.prototype=e;var r=new t;return t.prototype=void 0,r}}();function Qe(t,e){return"__proto__"==e?void 0:t[e]}function Ye(t,e,r,n,o,i,a){var u=Qe(t,r),c=Qe(e,r),s=a.get(c);if(s)qe(t,r,s);else{var f,l=i?i(u,c,r+"",t,e,a):void 0,p=void 0===l;if(p){var v=dt(c),d=!v&&yt(c),h=!v&&!d&&At(c);l=c,v||d||h?dt(u)?l=u:ut(f=u)&&et(f)?l=function(t,e){var r=-1,n=t.length;for(e||(e=Array(n));++r<n;)e[r]=t[r];return e}(u):d?(p=!1,l=function(t,e){if(e)return t.slice();var r=t.length,n=We?We(r):new t.constructor(r);return t.copy(n),n}(c,!0)):h?(p=!1,l=He(c,!0)):l=[]:Jt(c)||vt(c)?(l=u,vt(u)?l=function(t){return C(t,Ft(t))}(u):(!_(u)||n&&j(u))&&(l=function(t){return"function"!=typeof t.constructor||zt(t)?{}:Ke($t(t))}(c))):p=!1}p&&(a.set(c,l),o(l,c,n,i,a),a.delete(c)),qe(t,r,l)}}function Ze(t,e,r,n,o){t!==e&&Se(e,function(i,a){if(_(i))o||(o=new Be),Ye(t,e,a,r,Ze,n,o);else{var u=n?n(Qe(t,a),i,a+"",t,e,o):void 0;void 0===u&&(u=i),qe(t,a,u)}},Ft)}var tr=at(function(t,e,r){Ze(t,e,r)});var er="__lodash_hash_undefined__";function rr(t){var e=-1,r=null==t?0:t.length;for(this.__data__=new Ie;++e<r;)this.add(t[e])}function nr(t,e){for(var r=-1,n=null==t?0:t.length;++r<n;)if(e(t[r],r,t))return!0;return!1}rr.prototype.add=rr.prototype.push=function(t){return this.__data__.set(t,er),this},rr.prototype.has=function(t){return this.__data__.has(t)};var or=1,ir=2;function ar(t,e,r,n,o,i){var a=r&or,u=t.length,c=e.length;if(u!=c&&!(a&&c>u))return!1;var s=i.get(t);if(s&&i.get(e))return s==e;var f=-1,l=!0,p=r&ir?new rr:void 0;for(i.set(t,e),i.set(e,t);++f<u;){var v=t[f],d=e[f];if(n)var h=a?n(d,v,f,e,t,i):n(v,d,f,t,e,i);if(void 0!==h){if(h)continue;l=!1;break}if(p){if(!nr(e,function(t,e){if(a=e,!p.has(a)&&(v===t||o(v,t,r,n,i)))return p.push(e);var a})){l=!1;break}}else if(v!==d&&!o(v,d,r,n,i)){l=!1;break}}return i.delete(t),i.delete(e),l}function ur(t){var e=-1,r=Array(t.size);return t.forEach(function(t,n){r[++e]=[n,t]}),r}function cr(t){var e=-1,r=Array(t.size);return t.forEach(function(t){r[++e]=t}),r}var sr=1,fr=2,lr="[object Boolean]",pr="[object Date]",vr="[object Error]",dr="[object Map]",hr="[object Number]",_r="[object RegExp]",br="[object Set]",yr="[object String]",gr="[object Symbol]",mr="[object ArrayBuffer]",jr="[object DataView]",wr=a?a.prototype:void 0,Or=wr?wr.valueOf:void 0;var xr=Object.prototype.propertyIsEnumerable,Sr=Object.getOwnPropertySymbols,Ar=Sr?function(t){return null==t?[]:(t=Object(t),function(t,e){for(var r=-1,n=null==t?0:t.length,o=0,i=[];++r<n;){var a=t[r];e(a,r,t)&&(i[o++]=a)}return i}(Sr(t),function(e){return xr.call(t,e)}))}:function(){return[]};function kr(t){return function(t,e,r){var n=e(t);return dt(t)?n:function(t,e){for(var r=-1,n=e.length,o=t.length;++r<n;)t[o+r]=e[r];return t}(n,r(t))}(t,ne,Ar)}var Er=1,Pr=Object.prototype.hasOwnProperty;var zr=L(i,"DataView"),Tr=L(i,"Promise"),Dr=L(i,"Set"),Fr=L(i,"WeakMap"),Lr=A(zr),Rr=A(Te),$r=A(Tr),Mr=A(Dr),Ur=A(Fr),Ir=h;(zr&&"[object DataView]"!=Ir(new zr(new ArrayBuffer(1)))||Te&&"[object Map]"!=Ir(new Te)||Tr&&"[object Promise]"!=Ir(Tr.resolve())||Dr&&"[object Set]"!=Ir(new Dr)||Fr&&"[object WeakMap]"!=Ir(new Fr))&&(Ir=function(t){var e=h(t),r="[object Object]"==e?t.constructor:void 0,n=r?A(r):"";if(n)switch(n){case Lr:return"[object DataView]";case Rr:return"[object Map]";case $r:return"[object Promise]";case Mr:return"[object Set]";case Ur:return"[object WeakMap]"}return e});var Cr=Ir,Br=1,qr="[object Arguments]",Jr="[object Array]",Nr="[object Object]",Vr=Object.prototype.hasOwnProperty;function Wr(t,e,r,n,o,i){var a=dt(t),u=dt(e),c=a?Jr:Cr(t),s=u?Jr:Cr(e),f=(c=c==qr?Nr:c)==Nr,l=(s=s==qr?Nr:s)==Nr,p=c==s;if(p&&yt(t)){if(!yt(e))return!1;a=!0,f=!1}if(p&&!f)return i||(i=new Be),a||At(t)?ar(t,e,r,n,o,i):function(t,e,r,n,o,i,a){switch(r){case jr:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case mr:return!(t.byteLength!=e.byteLength||!i(new Ge(t),new Ge(e)));case lr:case pr:case hr:return M(+t,+e);case vr:return t.name==e.name&&t.message==e.message;case _r:case yr:return t==e+"";case dr:var u=ur;case br:var c=n&sr;if(u||(u=cr),t.size!=e.size&&!c)return!1;var s=a.get(t);if(s)return s==e;n|=fr,a.set(t,e);var f=ar(u(t),u(e),n,o,i,a);return a.delete(t),f;case gr:if(Or)return Or.call(t)==Or.call(e)}return!1}(t,e,c,r,n,o,i);if(!(r&Br)){var v=f&&Vr.call(t,"__wrapped__"),d=l&&Vr.call(e,"__wrapped__");if(v||d){var h=v?t.value():t,_=d?e.value():e;return i||(i=new Be),o(h,_,r,n,i)}}return!!p&&(i||(i=new Be),function(t,e,r,n,o,i){var a=r&Er,u=kr(t),c=u.length;if(c!=kr(e).length&&!a)return!1;for(var s=c;s--;){var f=u[s];if(!(a?f in e:Pr.call(e,f)))return!1}var l=i.get(t);if(l&&i.get(e))return l==e;var p=!0;i.set(t,e),i.set(e,t);for(var v=a;++s<c;){var d=t[f=u[s]],h=e[f];if(n)var _=a?n(h,d,f,e,t,i):n(d,h,f,t,e,i);if(!(void 0===_?d===h||o(d,h,r,n,i):_)){p=!1;break}v||(v="constructor"==f)}if(p&&!v){var b=t.constructor,y=e.constructor;b!=y&&"constructor"in t&&"constructor"in e&&!("function"==typeof b&&b instanceof b&&"function"==typeof y&&y instanceof y)&&(p=!1)}return i.delete(t),i.delete(e),p}(t,e,r,n,o,i))}function Gr(t,e,r,n,o){return t===e||(null==t||null==e||!ut(t)&&!ut(e)?t!=t&&e!=e:Wr(t,e,r,n,Gr,o))}var Hr=1,Xr=2;function Kr(t){return t==t&&!_(t)}function Qr(t,e){return function(r){return null!=r&&(r[t]===e&&(void 0!==e||t in Object(r)))}}function Yr(t){var e=function(t){for(var e=ne(t),r=e.length;r--;){var n=e[r],o=t[n];e[r]=[n,o,Kr(o)]}return e}(t);return 1==e.length&&e[0][2]?Qr(e[0][0],e[0][1]):function(r){return r===t||function(t,e,r,n){var o=r.length,i=o,a=!n;if(null==t)return!i;for(t=Object(t);o--;){var u=r[o];if(a&&u[2]?u[1]!==t[u[0]]:!(u[0]in t))return!1}for(;++o<i;){var c=(u=r[o])[0],s=t[c],f=u[1];if(a&&u[2]){if(void 0===s&&!(c in t))return!1}else{var l=new Be;if(n)var p=n(s,f,c,t,e,l);if(!(void 0===p?Gr(f,s,Hr|Xr,n,l):p))return!1}}return!0}(r,t,e)}}var Zr=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,tn=/^\w*$/;function en(e,r){if(dt(e))return!1;var n=void 0===e?"undefined":t(e);return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!ce(e))||(tn.test(e)||!Zr.test(e)||null!=r&&e in Object(r))}var rn="Expected a function";function nn(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new TypeError(rn);var r=function r(){var n=arguments,o=e?e.apply(this,n):n[0],i=r.cache;if(i.has(o))return i.get(o);var a=t.apply(this,n);return r.cache=i.set(o,a)||i,a};return r.cache=new(nn.Cache||Ie),r}nn.Cache=Ie;var on=500;var an=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,un=/\\(\\)?/g,cn=function(t){var e=nn(t,function(t){return r.size===on&&r.clear(),t}),r=e.cache;return e}(function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(an,function(t,r,n,o){e.push(n?o.replace(un,"$1"):r||t)}),e});function sn(t,e){return dt(t)?t:en(t,e)?[t]:cn(ve(t))}var fn=1/0;function ln(t){if("string"==typeof t||ce(t))return t;var e=t+"";return"0"==e&&1/t==-fn?"-0":e}function pn(t,e){for(var r=0,n=(e=sn(e,t)).length;null!=t&&r<n;)t=t[ln(e[r++])];return r&&r==n?t:void 0}function vn(t,e){return null!=t&&e in Object(t)}function dn(t,e){return null!=t&&function(t,e,r){for(var n=-1,o=(e=sn(e,t)).length,i=!1;++n<o;){var a=ln(e[n]);if(!(i=null!=t&&r(t,a)))break;t=t[a]}return i||++n!=o?i:!!(o=null==t?0:t.length)&&tt(o)&&ot(a,o)&&(dt(t)||vt(t))}(t,e,vn)}var hn=1,_n=2;function bn(t,e){return en(t)&&Kr(e)?Qr(ln(t),e):function(r){var n=function(t,e,r){var n=null==t?void 0:pn(t,e);return void 0===n?r:n}(r,t);return void 0===n&&n===e?dn(r,t):Gr(e,n,hn|_n)}}function yn(t){return en(t)?(e=ln(t),function(t){return null==t?void 0:t[e]}):function(t){return function(e){return pn(e,t)}}(t);var e}function gn(e){return"function"==typeof e?e:null==e?B:"object"==(void 0===e?"undefined":t(e))?dt(e)?bn(e[0],e[1]):Yr(e):yn(e)}function mn(t,e){if(t!==e){var r=void 0!==t,n=null===t,o=t==t,i=ce(t),a=void 0!==e,u=null===e,c=e==e,s=ce(e);if(!u&&!s&&!i&&t>e||i&&a&&c&&!u&&!s||n&&a&&c||!r&&c||!o)return 1;if(!n&&!i&&!s&&t<e||s&&r&&o&&!n&&!i||u&&r&&o||!a&&o||!c)return-1}return 0}function jn(t,e,r){var n=-1;return e=Ht(e.length?e:[B],mt(gn)),function(t,e){var r=t.length;for(t.sort(e);r--;)t[r]=t[r].value;return t}(function(t,e){var r=-1,n=et(t)?Array(t.length):[];return Ae(t,function(t,o,i){n[++r]=e(t,o,i)}),n}(t,function(t,r,o){return{criteria:Ht(e,function(e){return e(t)}),index:++n,value:t}}),function(t,e){return function(t,e,r){for(var n=-1,o=t.criteria,i=e.criteria,a=o.length,u=r.length;++n<a;){var c=mn(o[n],i[n]);if(c)return n>=u?c:c*("desc"==r[n]?-1:1)}return t.index-e.index}(t,e,r)})}Dr&&cr(new Dr([,-0]))[1];var wn=function(){function t(r){e(this,t),this.default=t.default,this.settings=tr({},t.default,r)}return r(t,[{key:"init",value:function(){var e=this,r=[],n=this.settings.feed,o={rssToJson:t.rssToJson,rssUrl:Array.isArray(n)?n:[n]};return ke(o.rssUrl,function(t,n){e._request(o,t).then(function(t){if(r.push(e._process(JSON.parse(t),e.settings)),r.length===o.rssUrl.length){e._merge(r,e.settings);var n=e._render(e._merge(r,e.settings),e.settings),i=document.querySelector(e.settings.selector);i&&(i.innerHTML=n)}})}),this}},{key:"_request",value:function(t,e){return new Promise(function(r,n){var o=new XMLHttpRequest;o.onreadystatechange=function(t){var e=t.target;4===e.readyState&&(e.status>=200&&e.status<400?r(e.response):n(new Error(e.status)))},o.ontimeout=function(){n(new Error("The Feed request timed out"))},o.open("GET",t.rssToJson+"?rss_url="+e,!0),o.send(),o=null})}},{key:"_process",value:function(e,r){return t.process[r.type](e,r)}},{key:"_merge",value:function(e,r){return t.merge[r.type](e)}},{key:"_render",value:function(t,e){var r;return t.settings=e,e.log&&console.dir(t),function(t,e,r){var n=_e.imports._.templateSettings||_e;r&&it(t,e,r)&&(e=void 0),t=ve(t),e=Lt({},e,n,Yt);var o,i,a=Lt({},e.imports,n.imports,Yt),u=ne(a),c=Xt(a,u),s=0,f=e.interpolate||je,l="__p += '",p=RegExp((e.escape||je).source+"|"+f.source+"|"+(f===oe?me:je).source+"|"+(e.evaluate||je).source+"|$","g"),v="sourceURL"in e?"//# sourceURL="+e.sourceURL+"\n":"";t.replace(p,function(e,r,n,a,u,c){return n||(n=a),l+=t.slice(s,c).replace(we,te),r&&(o=!0,l+="' +\n__e("+r+") +\n'"),u&&(i=!0,l+="';\n"+u+";\n__p += '"),n&&(l+="' +\n((__t = ("+n+")) == null ? '' : __t) +\n'"),s=c+e.length,e}),l+="';\n";var d=e.variable;d||(l="with (obj) {\n"+l+"\n}\n"),l=(i?l.replace(be,""):l).replace(ye,"$1").replace(ge,"$1;"),l="function("+(d||"obj")+") {\n"+(d?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(o?", __e = _.escape":"")+(i?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+l+"return __p\n}";var h=Gt(function(){return Function(u,v+"return "+l).apply(void 0,c)});if(h.source=l,Wt(h))throw h;return h}((r=e.templates,null==r?[]:Xt(r,ne(r))).join(""),{imports:{_each:ke}})(t)}}]),t}();return wn.rssToJson="https://api.rss2json.com/v1/api.json",wn.templates={medium:{opener:'<section class="o-feed <%- settings.classes.wrapper %>">',header:'<header class="o-feed__header <%- settings.classes.header %>">        <div class="o-feed__avatar <%- settings.classes.avatar %>">          <img src="<%- feed.image %>"                width="<%- settings.avatarImageRatio[0] %>"                height="<%- settings.avatarImageRatio[1] %>">        </div>        <a class="o-feed__url <%- settings.classes.avatar %>"           href="<%- feed.url %>" target="_blank" rel="noopener noreferrer nofollow">          <%- feed.title %>        </a>      </header>',posts:'<% _each(items, function(post) { %>        <div class="c-feed-item <%- settings.classes.card %>">          <h4 class="c-feed-item__title <%- settings.classes.title %>">            <a class="c-feed-item__link <%- settings.classes.link %>"               href="<%- post.guid %>"               target="_blank"               rel="noopener noreferrer nofollow">              <%- post.title %>            </a>          </h4>          <div class="c-feed-item__thumbnail <%- settings.classes.thumbnail %>">            <img style="width: <%- settings.postImageRatio[0] %>;max-height: <%- settings.postImageRatio[1] %>;"                  src="<%- post.thumbnail %>">          </div>          <p class="c-feed-item__excerpt <%- settings.classes.excerpt %>">            <%- post.excerpt %><%- settings.postExcerptTrail %>          </p>          <div class="c-feed-item__footer <%- settings.classes.cardFooter %>">            <a class="c-feed-item__cta <%- settings.classes.cta %>"                href="<%- post.guid %>"                target="_blank"                rel="noopener noreferrer nofollow">              <%- settings.postCtaText %>            </a>            <span class="c-feed-item__date <%- settings.classes.date %>"                   title="<%- settings.postDateTitle %>">              <%- post.date %>            </span>          </div>        </div>      <% }); %>',closer:"</section>"}},wn.process={medium:function(t,e){var r=e.postExcerptLength;return ke(t.items,function(t,n){var o,i="";return i=(i=(i=(i=t.description.replace(/<figure.*>.*?<\/figure>/g,"")).replace(/<(.|\n)*?>/g,"")).substr(0,r)).substr(0,Math.min(i.length,i.lastIndexOf(" "))),t.excerpt=i,o=new Date(t.pubDate).toLocaleDateString(e.postDateLocal,e.postDateFormat),t.date=o,t}),t}},wn.merge={medium:function(t){var e,r,n,o,i={},a=[];return t.forEach(function(t){a=a.concat(t.items)}),t.forEach(function(t){i=tr(i,t)}),i.items=(r="pubDate",n="desc",null==(e=a)?[]:(dt(r)||(r=null==r?[]:[r]),dt(n=o?void 0:n)||(n=null==n?[]:[n]),jn(e,r,n))),i}},wn.default={type:"medium",avatarImageRatio:["50","50"],postImageRatio:["auto","200px"],postExcerptLength:120,postExcerptTrail:"…",postCtaText:"Click here to read the full article",postDateLocal:"en-US",postDateFormat:{year:"numeric",month:"long",day:"numeric"},postDateTitle:"Published Date",classes:{wrapper:"",header:"",url:"",card:"",title:"",link:"",thumbnail:"",excerpt:"",cardFooter:"",cta:"",date:""},templates:{opener:wn.templates.medium.opener,header:wn.templates.medium.header,posts:wn.templates.medium.posts,closer:wn.templates.medium.closer},log:!1},function(){function t(){e(this,t)}return r(t,[{key:"Feed",value:function(t){return new wn(t).init()}}]),t}()}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
