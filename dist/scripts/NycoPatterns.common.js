"use strict";var Utility=function(){return this};Utility.debug=function(){return"1"===Utility.getUrlParameter(Utility.PARAMS.DEBUG)},Utility.getUrlParameter=function(e,t){var r=t||window.location.search,n=e.replace(/[\[]/,"\\[").replace(/[\]]/,"\\]"),i=new RegExp("[\\?&]"+n+"=([^&#]*)").exec(r);return null===i?"":decodeURIComponent(i[1].replace(/\+/g," "))},Utility.localize=function(e){var t=e||"",r=(window.LOCALIZED_STRINGS||[]).filter(function(t){return!(!t.hasOwnProperty("slug")||t.slug!==e)&&t});return r[0]&&r[0].hasOwnProperty("label")?r[0].label:t},Utility.PARAMS={DEBUG:"debug"},Utility.SELECTORS={parseMarkdown:'[data-js="markdown"]'};var Icons=function e(t){return t=t||e.path,fetch(t).then(function(e){if(e.ok)return e.text();Utility.debug()&&console.dir(e)}).catch(function(e){Utility.debug()&&console.dir(e)}).then(function(e){var t=document.createElement("div");t.innerHTML=e,t.setAttribute("aria-hidden",!0),t.setAttribute("style","display: none;"),document.body.appendChild(t)}),this};Icons.path="icons.svg";var global$1="undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},freeGlobal="object"==(void 0===global$1?"undefined":_typeof(global$1))&&global$1&&global$1.Object===Object&&global$1,freeSelf="object"==("undefined"==typeof self?"undefined":_typeof(self))&&self&&self.Object===Object&&self,root=freeGlobal||freeSelf||Function("return this")(),_Symbol=root.Symbol,objectProto=Object.prototype,hasOwnProperty=objectProto.hasOwnProperty,nativeObjectToString=objectProto.toString,symToStringTag=_Symbol?_Symbol.toStringTag:void 0;function getRawTag(e){var t=hasOwnProperty.call(e,symToStringTag),r=e[symToStringTag];try{e[symToStringTag]=void 0;var n=!0}catch(e){}var i=nativeObjectToString.call(e);return n&&(t?e[symToStringTag]=r:delete e[symToStringTag]),i}var objectProto$1=Object.prototype,nativeObjectToString$1=objectProto$1.toString;function objectToString(e){return nativeObjectToString$1.call(e)}var nullTag="[object Null]",undefinedTag="[object Undefined]",symToStringTag$1=_Symbol?_Symbol.toStringTag:void 0;function baseGetTag(e){return null==e?void 0===e?undefinedTag:nullTag:symToStringTag$1&&symToStringTag$1 in Object(e)?getRawTag(e):objectToString(e)}function isObject(e){var t=void 0===e?"undefined":_typeof(e);return null!=e&&("object"==t||"function"==t)}var asyncTag="[object AsyncFunction]",funcTag="[object Function]",genTag="[object GeneratorFunction]",proxyTag="[object Proxy]";function isFunction(e){if(!isObject(e))return!1;var t=baseGetTag(e);return t==funcTag||t==genTag||t==asyncTag||t==proxyTag}var coreJsData=root["__core-js_shared__"],maskSrcKey=function(){var e=/[^.]+$/.exec(coreJsData&&coreJsData.keys&&coreJsData.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}();function isMasked(e){return!!maskSrcKey&&maskSrcKey in e}var funcProto=Function.prototype,funcToString=funcProto.toString;function toSource(e){if(null!=e){try{return funcToString.call(e)}catch(e){}try{return e+""}catch(e){}}return""}var reRegExpChar=/[\\^$.*+?()[\]{}|]/g,reIsHostCtor=/^\[object .+?Constructor\]$/,funcProto$1=Function.prototype,objectProto$2=Object.prototype,funcToString$1=funcProto$1.toString,hasOwnProperty$1=objectProto$2.hasOwnProperty,reIsNative=RegExp("^"+funcToString$1.call(hasOwnProperty$1).replace(reRegExpChar,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");function baseIsNative(e){return!(!isObject(e)||isMasked(e))&&(isFunction(e)?reIsNative:reIsHostCtor).test(toSource(e))}function getValue(e,t){return null==e?void 0:e[t]}function getNative(e,t){var r=getValue(e,t);return baseIsNative(r)?r:void 0}var defineProperty$1=function(){try{var e=getNative(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();function baseAssignValue(e,t,r){"__proto__"==t&&defineProperty$1?defineProperty$1(e,t,{configurable:!0,enumerable:!0,value:r,writable:!0}):e[t]=r}function eq(e,t){return e===t||e!=e&&t!=t}var objectProto$3=Object.prototype,hasOwnProperty$2=objectProto$3.hasOwnProperty;function assignValue(e,t,r){var n=e[t];hasOwnProperty$2.call(e,t)&&eq(n,r)&&(void 0!==r||t in e)||baseAssignValue(e,t,r)}function copyObject(e,t,r,n){var i=!r;r||(r={});for(var a=-1,o=t.length;++a<o;){var s=t[a],l=n?n(r[s],e[s],s,r,e):void 0;void 0===l&&(l=e[s]),i?baseAssignValue(r,s,l):assignValue(r,s,l)}return r}function identity(e){return e}function apply(e,t,r){switch(r.length){case 0:return e.call(t);case 1:return e.call(t,r[0]);case 2:return e.call(t,r[0],r[1]);case 3:return e.call(t,r[0],r[1],r[2])}return e.apply(t,r)}var nativeMax=Math.max;function overRest(e,t,r){return t=nativeMax(void 0===t?e.length-1:t,0),function(){for(var n=arguments,i=-1,a=nativeMax(n.length-t,0),o=Array(a);++i<a;)o[i]=n[t+i];i=-1;for(var s=Array(t+1);++i<t;)s[i]=n[i];return s[t]=r(o),apply(e,this,s)}}function constant(e){return function(){return e}}var baseSetToString=defineProperty$1?function(e,t){return defineProperty$1(e,"toString",{configurable:!0,enumerable:!1,value:constant(t),writable:!0})}:identity,HOT_COUNT=800,HOT_SPAN=16,nativeNow=Date.now;function shortOut(e){var t=0,r=0;return function(){var n=nativeNow(),i=HOT_SPAN-(n-r);if(r=n,i>0){if(++t>=HOT_COUNT)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}var setToString=shortOut(baseSetToString);function baseRest(e,t){return setToString(overRest(e,t,identity),e+"")}var MAX_SAFE_INTEGER=9007199254740991;function isLength(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=MAX_SAFE_INTEGER}function isArrayLike(e){return null!=e&&isLength(e.length)&&!isFunction(e)}var MAX_SAFE_INTEGER$1=9007199254740991,reIsUint=/^(?:0|[1-9]\d*)$/;function isIndex(e,t){var r=void 0===e?"undefined":_typeof(e);return!!(t=null==t?MAX_SAFE_INTEGER$1:t)&&("number"==r||"symbol"!=r&&reIsUint.test(e))&&e>-1&&e%1==0&&e<t}function isIterateeCall(e,t,r){if(!isObject(r))return!1;var n=void 0===t?"undefined":_typeof(t);return!!("number"==n?isArrayLike(r)&&isIndex(t,r.length):"string"==n&&t in r)&&eq(r[t],e)}function createAssigner(e){return baseRest(function(t,r){var n=-1,i=r.length,a=i>1?r[i-1]:void 0,o=i>2?r[2]:void 0;for(a=e.length>3&&"function"==typeof a?(i--,a):void 0,o&&isIterateeCall(r[0],r[1],o)&&(a=i<3?void 0:a,i=1),t=Object(t);++n<i;){var s=r[n];s&&e(t,s,n,a)}return t})}function baseTimes(e,t){for(var r=-1,n=Array(e);++r<e;)n[r]=t(r);return n}function isObjectLike(e){return null!=e&&"object"==(void 0===e?"undefined":_typeof(e))}var argsTag="[object Arguments]";function baseIsArguments(e){return isObjectLike(e)&&baseGetTag(e)==argsTag}var objectProto$4=Object.prototype,hasOwnProperty$3=objectProto$4.hasOwnProperty,propertyIsEnumerable=objectProto$4.propertyIsEnumerable,isArguments=baseIsArguments(function(){return arguments}())?baseIsArguments:function(e){return isObjectLike(e)&&hasOwnProperty$3.call(e,"callee")&&!propertyIsEnumerable.call(e,"callee")},isArray=Array.isArray;function stubFalse(){return!1}var freeExports="object"==("undefined"==typeof exports?"undefined":_typeof(exports))&&exports&&!exports.nodeType&&exports,freeModule=freeExports&&"object"==("undefined"==typeof module?"undefined":_typeof(module))&&module&&!module.nodeType&&module,moduleExports=freeModule&&freeModule.exports===freeExports,Buffer=moduleExports?root.Buffer:void 0,nativeIsBuffer=Buffer?Buffer.isBuffer:void 0,isBuffer=nativeIsBuffer||stubFalse,argsTag$1="[object Arguments]",arrayTag="[object Array]",boolTag="[object Boolean]",dateTag="[object Date]",errorTag="[object Error]",funcTag$1="[object Function]",mapTag="[object Map]",numberTag="[object Number]",objectTag="[object Object]",regexpTag="[object RegExp]",setTag="[object Set]",stringTag="[object String]",weakMapTag="[object WeakMap]",arrayBufferTag="[object ArrayBuffer]",dataViewTag="[object DataView]",float32Tag="[object Float32Array]",float64Tag="[object Float64Array]",int8Tag="[object Int8Array]",int16Tag="[object Int16Array]",int32Tag="[object Int32Array]",uint8Tag="[object Uint8Array]",uint8ClampedTag="[object Uint8ClampedArray]",uint16Tag="[object Uint16Array]",uint32Tag="[object Uint32Array]",typedArrayTags={};function baseIsTypedArray(e){return isObjectLike(e)&&isLength(e.length)&&!!typedArrayTags[baseGetTag(e)]}function baseUnary(e){return function(t){return e(t)}}typedArrayTags[float32Tag]=typedArrayTags[float64Tag]=typedArrayTags[int8Tag]=typedArrayTags[int16Tag]=typedArrayTags[int32Tag]=typedArrayTags[uint8Tag]=typedArrayTags[uint8ClampedTag]=typedArrayTags[uint16Tag]=typedArrayTags[uint32Tag]=!0,typedArrayTags[argsTag$1]=typedArrayTags[arrayTag]=typedArrayTags[arrayBufferTag]=typedArrayTags[boolTag]=typedArrayTags[dataViewTag]=typedArrayTags[dateTag]=typedArrayTags[errorTag]=typedArrayTags[funcTag$1]=typedArrayTags[mapTag]=typedArrayTags[numberTag]=typedArrayTags[objectTag]=typedArrayTags[regexpTag]=typedArrayTags[setTag]=typedArrayTags[stringTag]=typedArrayTags[weakMapTag]=!1;var freeExports$1="object"==("undefined"==typeof exports?"undefined":_typeof(exports))&&exports&&!exports.nodeType&&exports,freeModule$1=freeExports$1&&"object"==("undefined"==typeof module?"undefined":_typeof(module))&&module&&!module.nodeType&&module,moduleExports$1=freeModule$1&&freeModule$1.exports===freeExports$1,freeProcess=moduleExports$1&&freeGlobal.process,nodeUtil=function(){try{var e=freeModule$1&&freeModule$1.require&&freeModule$1.require("util").types;return e||freeProcess&&freeProcess.binding&&freeProcess.binding("util")}catch(e){}}(),nodeIsTypedArray=nodeUtil&&nodeUtil.isTypedArray,isTypedArray=nodeIsTypedArray?baseUnary(nodeIsTypedArray):baseIsTypedArray,objectProto$5=Object.prototype,hasOwnProperty$4=objectProto$5.hasOwnProperty;function arrayLikeKeys(e,t){var r=isArray(e),n=!r&&isArguments(e),i=!r&&!n&&isBuffer(e),a=!r&&!n&&!i&&isTypedArray(e),o=r||n||i||a,s=o?baseTimes(e.length,String):[],l=s.length;for(var u in e)!t&&!hasOwnProperty$4.call(e,u)||o&&("length"==u||i&&("offset"==u||"parent"==u)||a&&("buffer"==u||"byteLength"==u||"byteOffset"==u)||isIndex(u,l))||s.push(u);return s}var objectProto$6=Object.prototype;function isPrototype(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||objectProto$6)}function nativeKeysIn(e){var t=[];if(null!=e)for(var r in Object(e))t.push(r);return t}var objectProto$7=Object.prototype,hasOwnProperty$5=objectProto$7.hasOwnProperty;function baseKeysIn(e){if(!isObject(e))return nativeKeysIn(e);var t=isPrototype(e),r=[];for(var n in e)("constructor"!=n||!t&&hasOwnProperty$5.call(e,n))&&r.push(n);return r}function keysIn(e){return isArrayLike(e)?arrayLikeKeys(e,!0):baseKeysIn(e)}var assignInWith=createAssigner(function(e,t,r,n){copyObject(t,keysIn(t),e,n)});function overArg(e,t){return function(r){return e(t(r))}}var getPrototype=overArg(Object.getPrototypeOf,Object),objectTag$1="[object Object]",funcProto$2=Function.prototype,objectProto$8=Object.prototype,funcToString$2=funcProto$2.toString,hasOwnProperty$6=objectProto$8.hasOwnProperty,objectCtorString=funcToString$2.call(Object);function isPlainObject(e){if(!isObjectLike(e)||baseGetTag(e)!=objectTag$1)return!1;var t=getPrototype(e);if(null===t)return!0;var r=hasOwnProperty$6.call(t,"constructor")&&t.constructor;return"function"==typeof r&&r instanceof r&&funcToString$2.call(r)==objectCtorString}var domExcTag="[object DOMException]",errorTag$1="[object Error]";function isError(e){if(!isObjectLike(e))return!1;var t=baseGetTag(e);return t==errorTag$1||t==domExcTag||"string"==typeof e.message&&"string"==typeof e.name&&!isPlainObject(e)}var attempt=baseRest(function(e,t){try{return apply(e,void 0,t)}catch(e){return isError(e)?e:new Error(e)}});function arrayMap(e,t){for(var r=-1,n=null==e?0:e.length,i=Array(n);++r<n;)i[r]=t(e[r],r,e);return i}function baseValues(e,t){return arrayMap(t,function(t){return e[t]})}var objectProto$9=Object.prototype,hasOwnProperty$7=objectProto$9.hasOwnProperty;function customDefaultsAssignIn(e,t,r,n){return void 0===e||eq(e,objectProto$9[r])&&!hasOwnProperty$7.call(n,r)?t:e}var stringEscapes={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"};function escapeStringChar(e){return"\\"+stringEscapes[e]}var nativeKeys=overArg(Object.keys,Object),objectProto$10=Object.prototype,hasOwnProperty$8=objectProto$10.hasOwnProperty;function baseKeys(e){if(!isPrototype(e))return nativeKeys(e);var t=[];for(var r in Object(e))hasOwnProperty$8.call(e,r)&&"constructor"!=r&&t.push(r);return t}function keys(e){return isArrayLike(e)?arrayLikeKeys(e):baseKeys(e)}var reInterpolate=/<%=([\s\S]+?)%>/g;function basePropertyOf(e){return function(t){return null==e?void 0:e[t]}}var htmlEscapes={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},escapeHtmlChar=basePropertyOf(htmlEscapes),symbolTag="[object Symbol]";function isSymbol(e){return"symbol"==(void 0===e?"undefined":_typeof(e))||isObjectLike(e)&&baseGetTag(e)==symbolTag}var INFINITY=1/0,symbolProto=_Symbol?_Symbol.prototype:void 0,symbolToString=symbolProto?symbolProto.toString:void 0;function baseToString(e){if("string"==typeof e)return e;if(isArray(e))return arrayMap(e,baseToString)+"";if(isSymbol(e))return symbolToString?symbolToString.call(e):"";var t=e+"";return"0"==t&&1/e==-INFINITY?"-0":t}function toString(e){return null==e?"":baseToString(e)}var reUnescapedHtml=/[&<>"']/g,reHasUnescapedHtml=RegExp(reUnescapedHtml.source);function escape$1(e){return(e=toString(e))&&reHasUnescapedHtml.test(e)?e.replace(reUnescapedHtml,escapeHtmlChar):e}var reEscape=/<%-([\s\S]+?)%>/g,reEvaluate=/<%([\s\S]+?)%>/g,templateSettings={escape:reEscape,evaluate:reEvaluate,interpolate:reInterpolate,variable:"",imports:{_:{escape:escape$1}}},reEmptyStringLeading=/\b__p \+= '';/g,reEmptyStringMiddle=/\b(__p \+=) '' \+/g,reEmptyStringTrailing=/(__e\(.*?\)|\b__t\)) \+\n'';/g,reEsTemplate=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,reNoMatch=/($^)/,reUnescapedString=/['\n\r\u2028\u2029\\]/g;function template(e,t,r){var n=templateSettings.imports._.templateSettings||templateSettings;r&&isIterateeCall(e,t,r)&&(t=void 0),e=toString(e),t=assignInWith({},t,n,customDefaultsAssignIn);var i,a,o=assignInWith({},t.imports,n.imports,customDefaultsAssignIn),s=keys(o),l=baseValues(o,s),u=0,c=t.interpolate||reNoMatch,d="__p += '",h=RegExp((t.escape||reNoMatch).source+"|"+c.source+"|"+(c===reInterpolate?reEsTemplate:reNoMatch).source+"|"+(t.evaluate||reNoMatch).source+"|$","g"),f="sourceURL"in t?"//# sourceURL="+t.sourceURL+"\n":"";e.replace(h,function(t,r,n,o,s,l){return n||(n=o),d+=e.slice(u,l).replace(reUnescapedString,escapeStringChar),r&&(i=!0,d+="' +\n__e("+r+") +\n'"),s&&(a=!0,d+="';\n"+s+";\n__p += '"),n&&(d+="' +\n((__t = ("+n+")) == null ? '' : __t) +\n'"),u=l+t.length,t}),d+="';\n";var p=t.variable;p||(d="with (obj) {\n"+d+"\n}\n"),d=(a?d.replace(reEmptyStringLeading,""):d).replace(reEmptyStringMiddle,"$1").replace(reEmptyStringTrailing,"$1;"),d="function("+(p||"obj")+") {\n"+(p?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+d+"return __p\n}";var g=attempt(function(){return Function(s,f+"return "+d).apply(void 0,l)});if(g.source=d,isError(g))throw g;return g}function arrayEach(e,t){for(var r=-1,n=null==e?0:e.length;++r<n&&!1!==t(e[r],r,e););return e}function createBaseFor(e){return function(t,r,n){for(var i=-1,a=Object(t),o=n(t),s=o.length;s--;){var l=o[e?s:++i];if(!1===r(a[l],l,a))break}return t}}var baseFor=createBaseFor();function baseForOwn(e,t){return e&&baseFor(e,t,keys)}function createBaseEach(e,t){return function(r,n){if(null==r)return r;if(!isArrayLike(r))return e(r,n);for(var i=r.length,a=t?i:-1,o=Object(r);(t?a--:++a<i)&&!1!==n(o[a],a,o););return r}}var baseEach=createBaseEach(baseForOwn);function castFunction(e){return"function"==typeof e?e:identity}function forEach(e,t){return(isArray(e)?arrayEach:baseEach)(e,castFunction(t))}function listCacheClear(){this.__data__=[],this.size=0}function assocIndexOf(e,t){for(var r=e.length;r--;)if(eq(e[r][0],t))return r;return-1}var arrayProto=Array.prototype,splice=arrayProto.splice;function listCacheDelete(e){var t=this.__data__,r=assocIndexOf(t,e);return!(r<0)&&(r==t.length-1?t.pop():splice.call(t,r,1),--this.size,!0)}function listCacheGet(e){var t=this.__data__,r=assocIndexOf(t,e);return r<0?void 0:t[r][1]}function listCacheHas(e){return assocIndexOf(this.__data__,e)>-1}function listCacheSet(e,t){var r=this.__data__,n=assocIndexOf(r,e);return n<0?(++this.size,r.push([e,t])):r[n][1]=t,this}function ListCache(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}function stackClear(){this.__data__=new ListCache,this.size=0}function stackDelete(e){var t=this.__data__,r=t.delete(e);return this.size=t.size,r}function stackGet(e){return this.__data__.get(e)}function stackHas(e){return this.__data__.has(e)}ListCache.prototype.clear=listCacheClear,ListCache.prototype.delete=listCacheDelete,ListCache.prototype.get=listCacheGet,ListCache.prototype.has=listCacheHas,ListCache.prototype.set=listCacheSet;var Map=getNative(root,"Map"),nativeCreate=getNative(Object,"create");function hashClear(){this.__data__=nativeCreate?nativeCreate(null):{},this.size=0}function hashDelete(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}var HASH_UNDEFINED="__lodash_hash_undefined__",objectProto$11=Object.prototype,hasOwnProperty$9=objectProto$11.hasOwnProperty;function hashGet(e){var t=this.__data__;if(nativeCreate){var r=t[e];return r===HASH_UNDEFINED?void 0:r}return hasOwnProperty$9.call(t,e)?t[e]:void 0}var objectProto$12=Object.prototype,hasOwnProperty$10=objectProto$12.hasOwnProperty;function hashHas(e){var t=this.__data__;return nativeCreate?void 0!==t[e]:hasOwnProperty$10.call(t,e)}var HASH_UNDEFINED$1="__lodash_hash_undefined__";function hashSet(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=nativeCreate&&void 0===t?HASH_UNDEFINED$1:t,this}function Hash(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}function mapCacheClear(){this.size=0,this.__data__={hash:new Hash,map:new(Map||ListCache),string:new Hash}}function isKeyable(e){var t=void 0===e?"undefined":_typeof(e);return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}function getMapData(e,t){var r=e.__data__;return isKeyable(t)?r["string"==typeof t?"string":"hash"]:r.map}function mapCacheDelete(e){var t=getMapData(this,e).delete(e);return this.size-=t?1:0,t}function mapCacheGet(e){return getMapData(this,e).get(e)}function mapCacheHas(e){return getMapData(this,e).has(e)}function mapCacheSet(e,t){var r=getMapData(this,e),n=r.size;return r.set(e,t),this.size+=r.size==n?0:1,this}function MapCache(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}Hash.prototype.clear=hashClear,Hash.prototype.delete=hashDelete,Hash.prototype.get=hashGet,Hash.prototype.has=hashHas,Hash.prototype.set=hashSet,MapCache.prototype.clear=mapCacheClear,MapCache.prototype.delete=mapCacheDelete,MapCache.prototype.get=mapCacheGet,MapCache.prototype.has=mapCacheHas,MapCache.prototype.set=mapCacheSet;var LARGE_ARRAY_SIZE=200;function stackSet(e,t){var r=this.__data__;if(r instanceof ListCache){var n=r.__data__;if(!Map||n.length<LARGE_ARRAY_SIZE-1)return n.push([e,t]),this.size=++r.size,this;r=this.__data__=new MapCache(n)}return r.set(e,t),this.size=r.size,this}function Stack(e){var t=this.__data__=new ListCache(e);this.size=t.size}function assignMergeValue(e,t,r){(void 0===r||eq(e[t],r))&&(void 0!==r||t in e)||baseAssignValue(e,t,r)}Stack.prototype.clear=stackClear,Stack.prototype.delete=stackDelete,Stack.prototype.get=stackGet,Stack.prototype.has=stackHas,Stack.prototype.set=stackSet;var freeExports$2="object"==("undefined"==typeof exports?"undefined":_typeof(exports))&&exports&&!exports.nodeType&&exports,freeModule$2=freeExports$2&&"object"==("undefined"==typeof module?"undefined":_typeof(module))&&module&&!module.nodeType&&module,moduleExports$2=freeModule$2&&freeModule$2.exports===freeExports$2,Buffer$1=moduleExports$2?root.Buffer:void 0,allocUnsafe=Buffer$1?Buffer$1.allocUnsafe:void 0;function cloneBuffer(e,t){if(t)return e.slice();var r=e.length,n=allocUnsafe?allocUnsafe(r):new e.constructor(r);return e.copy(n),n}var Uint8Array$1=root.Uint8Array;function cloneArrayBuffer(e){var t=new e.constructor(e.byteLength);return new Uint8Array$1(t).set(new Uint8Array$1(e)),t}function cloneTypedArray(e,t){var r=t?cloneArrayBuffer(e.buffer):e.buffer;return new e.constructor(r,e.byteOffset,e.length)}function copyArray(e,t){var r=-1,n=e.length;for(t||(t=Array(n));++r<n;)t[r]=e[r];return t}var objectCreate=Object.create,baseCreate=function(){function e(){}return function(t){if(!isObject(t))return{};if(objectCreate)return objectCreate(t);e.prototype=t;var r=new e;return e.prototype=void 0,r}}();function initCloneObject(e){return"function"!=typeof e.constructor||isPrototype(e)?{}:baseCreate(getPrototype(e))}function isArrayLikeObject(e){return isObjectLike(e)&&isArrayLike(e)}function safeGet(e,t){if("__proto__"!=t)return e[t]}function toPlainObject(e){return copyObject(e,keysIn(e))}function baseMergeDeep(e,t,r,n,i,a,o){var s=safeGet(e,r),l=safeGet(t,r),u=o.get(l);if(u)assignMergeValue(e,r,u);else{var c=a?a(s,l,r+"",e,t,o):void 0,d=void 0===c;if(d){var h=isArray(l),f=!h&&isBuffer(l),p=!h&&!f&&isTypedArray(l);c=l,h||f||p?isArray(s)?c=s:isArrayLikeObject(s)?c=copyArray(s):f?(d=!1,c=cloneBuffer(l,!0)):p?(d=!1,c=cloneTypedArray(l,!0)):c=[]:isPlainObject(l)||isArguments(l)?(c=s,isArguments(s)?c=toPlainObject(s):isObject(s)&&!isFunction(s)||(c=initCloneObject(l))):d=!1}d&&(o.set(l,c),i(c,l,n,a,o),o.delete(l)),assignMergeValue(e,r,c)}}function baseMerge(e,t,r,n,i){e!==t&&baseFor(t,function(a,o){if(isObject(a))i||(i=new Stack),baseMergeDeep(e,t,o,r,baseMerge,n,i);else{var s=n?n(safeGet(e,o),a,o+"",e,t,i):void 0;void 0===s&&(s=a),assignMergeValue(e,o,s)}},keysIn)}var merge=createAssigner(function(e,t,r){baseMerge(e,t,r)});function values(e){return null==e?[]:baseValues(e,keys(e))}var HASH_UNDEFINED$2="__lodash_hash_undefined__";function setCacheAdd(e){return this.__data__.set(e,HASH_UNDEFINED$2),this}function setCacheHas(e){return this.__data__.has(e)}function SetCache(e){var t=-1,r=null==e?0:e.length;for(this.__data__=new MapCache;++t<r;)this.add(e[t])}function arraySome(e,t){for(var r=-1,n=null==e?0:e.length;++r<n;)if(t(e[r],r,e))return!0;return!1}function cacheHas(e,t){return e.has(t)}SetCache.prototype.add=SetCache.prototype.push=setCacheAdd,SetCache.prototype.has=setCacheHas;var COMPARE_PARTIAL_FLAG=1,COMPARE_UNORDERED_FLAG=2;function equalArrays(e,t,r,n,i,a){var o=r&COMPARE_PARTIAL_FLAG,s=e.length,l=t.length;if(s!=l&&!(o&&l>s))return!1;var u=a.get(e);if(u&&a.get(t))return u==t;var c=-1,d=!0,h=r&COMPARE_UNORDERED_FLAG?new SetCache:void 0;for(a.set(e,t),a.set(t,e);++c<s;){var f=e[c],p=t[c];if(n)var g=o?n(p,f,c,t,e,a):n(f,p,c,e,t,a);if(void 0!==g){if(g)continue;d=!1;break}if(h){if(!arraySome(t,function(e,t){if(!cacheHas(h,t)&&(f===e||i(f,e,r,n,a)))return h.push(t)})){d=!1;break}}else if(f!==p&&!i(f,p,r,n,a)){d=!1;break}}return a.delete(e),a.delete(t),d}function mapToArray(e){var t=-1,r=Array(e.size);return e.forEach(function(e,n){r[++t]=[n,e]}),r}function setToArray(e){var t=-1,r=Array(e.size);return e.forEach(function(e){r[++t]=e}),r}var COMPARE_PARTIAL_FLAG$1=1,COMPARE_UNORDERED_FLAG$1=2,boolTag$1="[object Boolean]",dateTag$1="[object Date]",errorTag$2="[object Error]",mapTag$1="[object Map]",numberTag$1="[object Number]",regexpTag$1="[object RegExp]",setTag$1="[object Set]",stringTag$1="[object String]",symbolTag$1="[object Symbol]",arrayBufferTag$1="[object ArrayBuffer]",dataViewTag$1="[object DataView]",symbolProto$1=_Symbol?_Symbol.prototype:void 0,symbolValueOf=symbolProto$1?symbolProto$1.valueOf:void 0;function equalByTag(e,t,r,n,i,a,o){switch(r){case dataViewTag$1:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case arrayBufferTag$1:return!(e.byteLength!=t.byteLength||!a(new Uint8Array$1(e),new Uint8Array$1(t)));case boolTag$1:case dateTag$1:case numberTag$1:return eq(+e,+t);case errorTag$2:return e.name==t.name&&e.message==t.message;case regexpTag$1:case stringTag$1:return e==t+"";case mapTag$1:var s=mapToArray;case setTag$1:var l=n&COMPARE_PARTIAL_FLAG$1;if(s||(s=setToArray),e.size!=t.size&&!l)return!1;var u=o.get(e);if(u)return u==t;n|=COMPARE_UNORDERED_FLAG$1,o.set(e,t);var c=equalArrays(s(e),s(t),n,i,a,o);return o.delete(e),c;case symbolTag$1:if(symbolValueOf)return symbolValueOf.call(e)==symbolValueOf.call(t)}return!1}function arrayPush(e,t){for(var r=-1,n=t.length,i=e.length;++r<n;)e[i+r]=t[r];return e}function baseGetAllKeys(e,t,r){var n=t(e);return isArray(e)?n:arrayPush(n,r(e))}function arrayFilter(e,t){for(var r=-1,n=null==e?0:e.length,i=0,a=[];++r<n;){var o=e[r];t(o,r,e)&&(a[i++]=o)}return a}function stubArray(){return[]}var objectProto$13=Object.prototype,propertyIsEnumerable$1=objectProto$13.propertyIsEnumerable,nativeGetSymbols=Object.getOwnPropertySymbols,getSymbols=nativeGetSymbols?function(e){return null==e?[]:(e=Object(e),arrayFilter(nativeGetSymbols(e),function(t){return propertyIsEnumerable$1.call(e,t)}))}:stubArray;function getAllKeys(e){return baseGetAllKeys(e,keys,getSymbols)}var COMPARE_PARTIAL_FLAG$2=1,objectProto$14=Object.prototype,hasOwnProperty$11=objectProto$14.hasOwnProperty;function equalObjects(e,t,r,n,i,a){var o=r&COMPARE_PARTIAL_FLAG$2,s=getAllKeys(e),l=s.length;if(l!=getAllKeys(t).length&&!o)return!1;for(var u=l;u--;){var c=s[u];if(!(o?c in t:hasOwnProperty$11.call(t,c)))return!1}var d=a.get(e);if(d&&a.get(t))return d==t;var h=!0;a.set(e,t),a.set(t,e);for(var f=o;++u<l;){var p=e[c=s[u]],g=t[c];if(n)var m=o?n(g,p,c,t,e,a):n(p,g,c,e,t,a);if(!(void 0===m?p===g||i(p,g,r,n,a):m)){h=!1;break}f||(f="constructor"==c)}if(h&&!f){var v=e.constructor,y=t.constructor;v!=y&&"constructor"in e&&"constructor"in t&&!("function"==typeof v&&v instanceof v&&"function"==typeof y&&y instanceof y)&&(h=!1)}return a.delete(e),a.delete(t),h}var DataView=getNative(root,"DataView"),Promise$1=getNative(root,"Promise"),Set$1=getNative(root,"Set"),WeakMap=getNative(root,"WeakMap"),mapTag$2="[object Map]",objectTag$2="[object Object]",promiseTag="[object Promise]",setTag$2="[object Set]",weakMapTag$1="[object WeakMap]",dataViewTag$2="[object DataView]",dataViewCtorString=toSource(DataView),mapCtorString=toSource(Map),promiseCtorString=toSource(Promise$1),setCtorString=toSource(Set$1),weakMapCtorString=toSource(WeakMap),getTag=baseGetTag;(DataView&&getTag(new DataView(new ArrayBuffer(1)))!=dataViewTag$2||Map&&getTag(new Map)!=mapTag$2||Promise$1&&getTag(Promise$1.resolve())!=promiseTag||Set$1&&getTag(new Set$1)!=setTag$2||WeakMap&&getTag(new WeakMap)!=weakMapTag$1)&&(getTag=function(e){var t=baseGetTag(e),r=t==objectTag$2?e.constructor:void 0,n=r?toSource(r):"";if(n)switch(n){case dataViewCtorString:return dataViewTag$2;case mapCtorString:return mapTag$2;case promiseCtorString:return promiseTag;case setCtorString:return setTag$2;case weakMapCtorString:return weakMapTag$1}return t});var getTag$1=getTag,COMPARE_PARTIAL_FLAG$3=1,argsTag$2="[object Arguments]",arrayTag$1="[object Array]",objectTag$3="[object Object]",objectProto$15=Object.prototype,hasOwnProperty$12=objectProto$15.hasOwnProperty;function baseIsEqualDeep(e,t,r,n,i,a){var o=isArray(e),s=isArray(t),l=o?arrayTag$1:getTag$1(e),u=s?arrayTag$1:getTag$1(t),c=(l=l==argsTag$2?objectTag$3:l)==objectTag$3,d=(u=u==argsTag$2?objectTag$3:u)==objectTag$3,h=l==u;if(h&&isBuffer(e)){if(!isBuffer(t))return!1;o=!0,c=!1}if(h&&!c)return a||(a=new Stack),o||isTypedArray(e)?equalArrays(e,t,r,n,i,a):equalByTag(e,t,l,r,n,i,a);if(!(r&COMPARE_PARTIAL_FLAG$3)){var f=c&&hasOwnProperty$12.call(e,"__wrapped__"),p=d&&hasOwnProperty$12.call(t,"__wrapped__");if(f||p){var g=f?e.value():e,m=p?t.value():t;return a||(a=new Stack),i(g,m,r,n,a)}}return!!h&&(a||(a=new Stack),equalObjects(e,t,r,n,i,a))}function baseIsEqual(e,t,r,n,i){return e===t||(null==e||null==t||!isObjectLike(e)&&!isObjectLike(t)?e!=e&&t!=t:baseIsEqualDeep(e,t,r,n,baseIsEqual,i))}var COMPARE_PARTIAL_FLAG$4=1,COMPARE_UNORDERED_FLAG$2=2;function baseIsMatch(e,t,r,n){var i=r.length,a=i,o=!n;if(null==e)return!a;for(e=Object(e);i--;){var s=r[i];if(o&&s[2]?s[1]!==e[s[0]]:!(s[0]in e))return!1}for(;++i<a;){var l=(s=r[i])[0],u=e[l],c=s[1];if(o&&s[2]){if(void 0===u&&!(l in e))return!1}else{var d=new Stack;if(n)var h=n(u,c,l,e,t,d);if(!(void 0===h?baseIsEqual(c,u,COMPARE_PARTIAL_FLAG$4|COMPARE_UNORDERED_FLAG$2,n,d):h))return!1}}return!0}function isStrictComparable(e){return e==e&&!isObject(e)}function getMatchData(e){for(var t=keys(e),r=t.length;r--;){var n=t[r],i=e[n];t[r]=[n,i,isStrictComparable(i)]}return t}function matchesStrictComparable(e,t){return function(r){return null!=r&&(r[e]===t&&(void 0!==t||e in Object(r)))}}function baseMatches(e){var t=getMatchData(e);return 1==t.length&&t[0][2]?matchesStrictComparable(t[0][0],t[0][1]):function(r){return r===e||baseIsMatch(r,e,t)}}var reIsDeepProp=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,reIsPlainProp=/^\w*$/;function isKey(e,t){if(isArray(e))return!1;var r=void 0===e?"undefined":_typeof(e);return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=e&&!isSymbol(e))||(reIsPlainProp.test(e)||!reIsDeepProp.test(e)||null!=t&&e in Object(t))}var FUNC_ERROR_TEXT="Expected a function";function memoize(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError(FUNC_ERROR_TEXT);var r=function r(){var n=arguments,i=t?t.apply(this,n):n[0],a=r.cache;if(a.has(i))return a.get(i);var o=e.apply(this,n);return r.cache=a.set(i,o)||a,o};return r.cache=new(memoize.Cache||MapCache),r}memoize.Cache=MapCache;var MAX_MEMOIZE_SIZE=500;function memoizeCapped(e){var t=memoize(e,function(e){return r.size===MAX_MEMOIZE_SIZE&&r.clear(),e}),r=t.cache;return t}var rePropName=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,reEscapeChar=/\\(\\)?/g,stringToPath=memoizeCapped(function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(rePropName,function(e,r,n,i){t.push(n?i.replace(reEscapeChar,"$1"):r||e)}),t});function castPath(e,t){return isArray(e)?e:isKey(e,t)?[e]:stringToPath(toString(e))}var INFINITY$1=1/0;function toKey(e){if("string"==typeof e||isSymbol(e))return e;var t=e+"";return"0"==t&&1/e==-INFINITY$1?"-0":t}function baseGet(e,t){for(var r=0,n=(t=castPath(t,e)).length;null!=e&&r<n;)e=e[toKey(t[r++])];return r&&r==n?e:void 0}function get$1(e,t,r){var n=null==e?void 0:baseGet(e,t);return void 0===n?r:n}function baseHasIn(e,t){return null!=e&&t in Object(e)}function hasPath(e,t,r){for(var n=-1,i=(t=castPath(t,e)).length,a=!1;++n<i;){var o=toKey(t[n]);if(!(a=null!=e&&r(e,o)))break;e=e[o]}return a||++n!=i?a:!!(i=null==e?0:e.length)&&isLength(i)&&isIndex(o,i)&&(isArray(e)||isArguments(e))}function hasIn(e,t){return null!=e&&hasPath(e,t,baseHasIn)}var COMPARE_PARTIAL_FLAG$5=1,COMPARE_UNORDERED_FLAG$3=2;function baseMatchesProperty(e,t){return isKey(e)&&isStrictComparable(t)?matchesStrictComparable(toKey(e),t):function(r){var n=get$1(r,e);return void 0===n&&n===t?hasIn(r,e):baseIsEqual(t,n,COMPARE_PARTIAL_FLAG$5|COMPARE_UNORDERED_FLAG$3)}}function baseProperty(e){return function(t){return null==t?void 0:t[e]}}function basePropertyDeep(e){return function(t){return baseGet(t,e)}}function property(e){return isKey(e)?baseProperty(toKey(e)):basePropertyDeep(e)}function baseIteratee(e){return"function"==typeof e?e:null==e?identity:"object"==(void 0===e?"undefined":_typeof(e))?isArray(e)?baseMatchesProperty(e[0],e[1]):baseMatches(e):property(e)}function baseMap(e,t){var r=-1,n=isArrayLike(e)?Array(e.length):[];return baseEach(e,function(e,i,a){n[++r]=t(e,i,a)}),n}function baseSortBy(e,t){var r=e.length;for(e.sort(t);r--;)e[r]=e[r].value;return e}function compareAscending(e,t){if(e!==t){var r=void 0!==e,n=null===e,i=e==e,a=isSymbol(e),o=void 0!==t,s=null===t,l=t==t,u=isSymbol(t);if(!s&&!u&&!a&&e>t||a&&o&&l&&!s&&!u||n&&o&&l||!r&&l||!i)return 1;if(!n&&!a&&!u&&e<t||u&&r&&i&&!n&&!a||s&&r&&i||!o&&i||!l)return-1}return 0}function compareMultiple(e,t,r){for(var n=-1,i=e.criteria,a=t.criteria,o=i.length,s=r.length;++n<o;){var l=compareAscending(i[n],a[n]);if(l)return n>=s?l:l*("desc"==r[n]?-1:1)}return e.index-t.index}function baseOrderBy(e,t,r){var n=-1;return t=arrayMap(t.length?t:[identity],baseUnary(baseIteratee)),baseSortBy(baseMap(e,function(e,r,i){return{criteria:arrayMap(t,function(t){return t(e)}),index:++n,value:e}}),function(e,t){return compareMultiple(e,t,r)})}function orderBy(e,t,r,n){return null==e?[]:(isArray(t)||(t=null==t?[]:[t]),isArray(r=n?void 0:r)||(r=null==r?[]:[r]),baseOrderBy(e,t,r))}function noop(){}var INFINITY$2=1/0,createSet=Set$1&&1/setToArray(new Set$1([,-0]))[1]==INFINITY$2?function(e){return new Set$1(e)}:noop,Feed=function e(t){this.default=e.default,this._settings=merge({},e.default,t),this.init()};Feed.prototype.init=function(){var e=this,t=[],r=this._settings.feed,n={rssToJson:Feed.rssToJson,rssUrl:Array.isArray(r)?r:[r]};return forEach(n.rssUrl,function(r,i){e._request(n,r).then(function(r){if(t.push(e._process(JSON.parse(r),e._settings)),t.length===n.rssUrl.length){e._merge(t,e._settings);var i=e._render(e._merge(t,e._settings),e._settings),a=document.querySelector(e._settings.selector);a&&(a.innerHTML=i)}})}),this},Feed.prototype._request=function(e,t){return new Promise(function(r,n){var i=new XMLHttpRequest;i.onreadystatechange=function(e){var t=e.target;4===t.readyState&&(t.status>=200&&t.status<400?r(t.response):n(new Error(t.status)))},i.ontimeout=function(){n(new Error("The Feed request timed out"))},i.open("GET",e.rssToJson+"?rss_url="+t,!0),i.send(),i=null})},Feed.prototype._process=function(e,t){return Feed.process[t.type](e,t)},Feed.prototype._merge=function(e,t){return Feed.merge[t.type](e)},Feed.prototype._render=function(e,t){return e.settings=t,t.log&&console.dir(e),template(values(t.templates).join(""),{imports:{_each:forEach}})(e)},Feed.rssToJson="https://api.rss2json.com/v1/api.json",Feed.templates={medium:{opener:['<section class="o-feed <%- settings.classes.wrapper %>" style="',"<% if (settings.fontSize) { %>font-size: <%- settings.fontSize %>;<% } %>","<% if (settings.postBorderColor) { %>border-color: <%- settings.postBorderColor %>;<% } %>",'">'],header:['<header class="o-feed__header <%- settings.classes.header %>">','<div class="o-feed__avatar <%- settings.classes.avatar %>">','<img src="','<% if (settings.profileImg !== "") { %>',"<%- settings.profileImg %>","<% } else { %>","<%- feed.profileImg %>",'<% } %>" ','width="<%- settings.ratioProfile[0] %>" ','height="<%- settings.ratioProfile[1] %>">',"</div>",'<a class="o-feed__url <%- settings.classes.avatar %>" ','href="<% if (settings.titleUrl !== "") { %>',"<%- settings.titleUrl %>","<% } else { %>","<%- feed.url %>",'<% } %>" ','target="_blank" rel="noopener noreferrer nofollow">','<% if (settings.title !== "") { %>',"<%- settings.title %>","<% } else { %>","<%- feed.title %>","<% } %>","</a>","</header>"],posts:['<div class="o-feed__items" style="',"border-color: <%- settings.postBorderColor %>;",'">',"<% _each(items, function(post) { %>",'<div class="c-feed-item <%- settings.classes.feedItem %>">','<h4 class="c-feed-item__title <%- settings.classes.title %>">','<a class="c-feed-item__link <%- settings.classes.link %>"','href="<%- post.guid %>"','target="_blank"','rel="noopener noreferrer nofollow">',"<%- post.title %>","</a>","</h4>",'<span class="c-feed-item__date <%- settings.classes.date %>" ','title="<%- settings.postDateTitle %>">',"<%- post.date %>","</span>",'<div class="c-feed-item__thumbnail <%- settings.classes.thumbnail %>"','style="',"background-image: url(<%- post.thumbnail %>);",'height: <%- settings.postImgHeight %>;"','aria-hidden="true">','<img style="display: none;" src="<%- post.thumbnail %>" alt="<%- post.title %>">',"</div>",'<p class="c-feed-item__excerpt <%- settings.classes.excerpt %>">',"<%- post.excerpt %><%- settings.postExcerptTrail %>","</p>",'<div class="c-feed-item__footer <%- settings.classes.itemFooter %>">','<a class="c-feed-item__cta <%- settings.classes.cta %>" ','href="<%- post.guid %>" ','target="_blank" ','rel="noopener noreferrer nofollow">',"<%- settings.postCtaText %>","</a>","</div>","</div>","<% }); %>","</div>"],closer:["</section>"]}},Feed.process={medium:function(e,t){var r=t.postExcerptLength;return forEach(e.items,function(e,n){var i,a="";return a=(a=(a=(a=e.description.replace(/<figure.*>.*?<\/figure>/g,"")).replace(/<(.|\n)*?>/g,"")).substr(0,r)).substr(0,Math.min(a.length,a.lastIndexOf(" "))),e.excerpt=a,i=new Date(Date.parse(e.pubDate.replace(" ","T"))).toLocaleDateString(t.postDateLocal,t.postDateFormat),e.date=i,e}),e}},Feed.merge={medium:function(e){var t={},r=[];return e.forEach(function(e){r=r.concat(e.items)}),e.forEach(function(e){t=merge(t,e)}),t.items=orderBy(r,"pubDate","desc"),t}},Feed.default={feed:"",selector:"#js-feed",type:"medium",title:"",titleUrl:"",profileImg:"",fontSize:"",ratioProfile:["50","50"],postBorderColor:"lightsteelblue",postImgHeight:"200px",postExcerptLength:120,postExcerptTrail:"…",postCtaText:"Read the full post",postDateLocal:"en-US",postDateFormat:{year:"numeric",month:"long",day:"numeric"},postDateTitle:"Published Date",classes:{wrapper:"",header:"",url:"",feedItem:"",title:"",link:"",thumbnail:"",excerpt:"",itemFooter:"",cta:"",date:""},templates:{opener:Feed.templates.medium.opener.join(""),header:Feed.templates.medium.header.join(""),posts:Feed.templates.medium.posts.join(""),closer:Feed.templates.medium.closer.join("")},log:!1,unique:!1};var Toggle=function e(t){var r=this,n=document.querySelector("body");return t=t||{},this._settings={selector:t.selector?t.selector:e.selector,namespace:t.namespace?t.namespace:e.namespace,inactiveClass:t.inactiveClass?t.inactiveClass:e.inactiveClass,activeClass:t.activeClass?t.activeClass:e.activeClass},n.addEventListener("click",function(e){e.target.matches(r._settings.selector)&&(e.preventDefault(),r._toggle(e))}),this};Toggle.prototype._toggle=function(e){var t=this,r=e.target,n=!1;if(n=r.getAttribute("href")?document.querySelector(r.getAttribute("href")):n,!(n=r.getAttribute("aria-controls")?document.querySelector("#"+r.getAttribute("aria-controls")):n))return this;if(this.elementToggle(r,n),r.dataset[this._settings.namespace+"Undo"]){var i=document.querySelector(r.dataset[this._settings.namespace+"Undo"]);i.addEventListener("click",function(e){e.preventDefault(),t.elementToggle(r,n),i.removeEventListener("click")})}return this},Toggle.prototype.elementToggle=function(e,t){""!==this._settings.activeClass&&(e.classList.toggle(this._settings.activeClass),t.classList.toggle(this._settings.activeClass)),""!==this._settings.inactiveClass&&t.classList.toggle(this._settings.inactiveClass);for(var r=0;r<Toggle.elAriaRoles.length;r++)e.getAttribute(Toggle.elAriaRoles[r])&&e.setAttribute(Toggle.elAriaRoles[r],!("true"===e.getAttribute(Toggle.elAriaRoles[r])));for(var n=0;n<Toggle.targetAriaRoles.length;n++)t.getAttribute(Toggle.targetAriaRoles[n])&&t.setAttribute(Toggle.targetAriaRoles[n],!("true"===t.getAttribute(Toggle.targetAriaRoles[n])));return e.getAttribute("href")&&t.classList.contains(this._settings.activeClass)&&(window.location.hash="",window.location.hash=e.getAttribute("href")),this},Toggle.selector='[data-js*="toggle"]',Toggle.namespace="toggle",Toggle.inactiveClass="hidden",Toggle.activeClass="active",Toggle.elAriaRoles=["aria-pressed","aria-expanded"],Toggle.targetAriaRoles=["aria-hidden"];var Track=function e(t){var r=this,n=document.querySelector("body");return t=t||{},this._settings={selector:t.selector?t.selector:e.selector},n.addEventListener("click",function(e){if(e.target.matches(r._settings.selector)){var t=e.target.dataset.trackKey,n=JSON.parse(e.target.dataset.trackData);r.click(t,n)}}),this};Track.prototype.click=function(e,t){var r=t.map(function(e){return e.hasOwnProperty(Track.key)&&(e[Track.key]=window.location.pathname+"/"+e[Track.key]),e}),n=this.webtrends(e,r),i=this.gtag(e,r);return Utility.debug()&&console.dir({Track:[n,i]}),r},Track.prototype.view=function(e,t,r){var n=this.webtrends(t,r),i=this.gtagView(e,t);Utility.debug()&&console.dir({Track:[n,i]})},Track.prototype.webtrends=function(e,t){var r=[{"WT.ti":e}];t[0]&&t[0].hasOwnProperty(Track.key)?r.push({"DCS.dcsuri":t[0][Track.key]}):Object.assign(r,t);var n={argsa:r.flatMap(function(e){return Object.keys(e).flatMap(function(t){return[t,e[t]]})})};return"undefined"!=typeof Webtrends&&Webtrends.multiTrack(n),["Webtrends",n]},Track.prototype.gtag=function(e,t){var r=t.find(function(e){return e.hasOwnProperty(Track.key)}),n={event_category:e};return"undefined"!=typeof gtag&&gtag(Track.key,r[Track.key],n),["gtag",Track.key,r[Track.key],n]},Track.prototype.gtagView=function(e,t){var r={app_name:e,screen_name:t};return"undefined"!=typeof gtag&&gtag("event","screen_view",r),["gtag",Track.key,"screen_view",r]},Track.selector='[data-js*="track"]',Track.key="event";var emptyObject=Object.freeze({});function isUndef(e){return void 0===e||null===e}function isDef(e){return void 0!==e&&null!==e}function isTrue(e){return!0===e}function isFalse(e){return!1===e}function isPrimitive(e){return"string"==typeof e||"number"==typeof e||"symbol"===(void 0===e?"undefined":_typeof(e))||"boolean"==typeof e}function isObject$1(e){return null!==e&&"object"===(void 0===e?"undefined":_typeof(e))}var _toString=Object.prototype.toString;function toRawType(e){return _toString.call(e).slice(8,-1)}function isPlainObject$1(e){return"[object Object]"===_toString.call(e)}function isRegExp(e){return"[object RegExp]"===_toString.call(e)}function isValidArrayIndex(e){var t=parseFloat(String(e));return t>=0&&Math.floor(t)===t&&isFinite(e)}function isPromise(e){return isDef(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function toString$1(e){return null==e?"":Array.isArray(e)||isPlainObject$1(e)&&e.toString===_toString?JSON.stringify(e,null,2):String(e)}function toNumber(e){var t=parseFloat(e);return isNaN(t)?e:t}function makeMap(e,t){for(var r=Object.create(null),n=e.split(","),i=0;i<n.length;i++)r[n[i]]=!0;return t?function(e){return r[e.toLowerCase()]}:function(e){return r[e]}}var isBuiltInTag=makeMap("slot,component",!0),isReservedAttribute=makeMap("key,ref,slot,slot-scope,is");function remove(e,t){if(e.length){var r=e.indexOf(t);if(r>-1)return e.splice(r,1)}}var hasOwnProperty$13=Object.prototype.hasOwnProperty;function hasOwn(e,t){return hasOwnProperty$13.call(e,t)}function cached(e){var t=Object.create(null);return function(r){return t[r]||(t[r]=e(r))}}var camelizeRE=/-(\w)/g,camelize=cached(function(e){return e.replace(camelizeRE,function(e,t){return t?t.toUpperCase():""})}),capitalize=cached(function(e){return e.charAt(0).toUpperCase()+e.slice(1)}),hyphenateRE=/\B([A-Z])/g,hyphenate=cached(function(e){return e.replace(hyphenateRE,"-$1").toLowerCase()});function polyfillBind(e,t){function r(r){var n=arguments.length;return n?n>1?e.apply(t,arguments):e.call(t,r):e.call(t)}return r._length=e.length,r}function nativeBind(e,t){return e.bind(t)}var bind=Function.prototype.bind?nativeBind:polyfillBind;function toArray$1(e,t){t=t||0;for(var r=e.length-t,n=new Array(r);r--;)n[r]=e[r+t];return n}function extend(e,t){for(var r in t)e[r]=t[r];return e}function toObject(e){for(var t={},r=0;r<e.length;r++)e[r]&&extend(t,e[r]);return t}function noop$1(e,t,r){}var no=function(e,t,r){return!1},identity$1=function(e){return e};function genStaticKeys(e){return e.reduce(function(e,t){return e.concat(t.staticKeys||[])},[]).join(",")}function looseEqual(e,t){if(e===t)return!0;var r=isObject$1(e),n=isObject$1(t);if(!r||!n)return!r&&!n&&String(e)===String(t);try{var i=Array.isArray(e),a=Array.isArray(t);if(i&&a)return e.length===t.length&&e.every(function(e,r){return looseEqual(e,t[r])});if(e instanceof Date&&t instanceof Date)return e.getTime()===t.getTime();if(i||a)return!1;var o=Object.keys(e),s=Object.keys(t);return o.length===s.length&&o.every(function(r){return looseEqual(e[r],t[r])})}catch(e){return!1}}function looseIndexOf(e,t){for(var r=0;r<e.length;r++)if(looseEqual(e[r],t))return r;return-1}function once(e){var t=!1;return function(){t||(t=!0,e.apply(this,arguments))}}var SSR_ATTR="data-server-rendered",ASSET_TYPES=["component","directive","filter"],LIFECYCLE_HOOKS=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],config={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!0,devtools:!0,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:no,isReservedAttr:no,isUnknownElement:no,getTagNamespace:noop$1,parsePlatformTagName:identity$1,mustUseProp:no,async:!0,_lifecycleHooks:LIFECYCLE_HOOKS},unicodeLetters="a-zA-Z·À-ÖØ-öø-ͽͿ-῿‌-‍‿-⁀⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�";function isReserved(e){var t=(e+"").charCodeAt(0);return 36===t||95===t}function def(e,t,r,n){Object.defineProperty(e,t,{value:r,enumerable:!!n,writable:!0,configurable:!0})}var bailRE=new RegExp("[^"+unicodeLetters+".$_\\d]");function parsePath(e){if(!bailRE.test(e)){var t=e.split(".");return function(e){for(var r=0;r<t.length;r++){if(!e)return;e=e[t[r]]}return e}}}var _isServer,hasProto="__proto__"in{},inBrowser="undefined"!=typeof window,inWeex="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,weexPlatform=inWeex&&WXEnvironment.platform.toLowerCase(),UA=inBrowser&&window.navigator.userAgent.toLowerCase(),isIE=UA&&/msie|trident/.test(UA),isIE9=UA&&UA.indexOf("msie 9.0")>0,isEdge=UA&&UA.indexOf("edge/")>0,isAndroid=UA&&UA.indexOf("android")>0||"android"===weexPlatform,isIOS=UA&&/iphone|ipad|ipod|ios/.test(UA)||"ios"===weexPlatform,isChrome=UA&&/chrome\/\d+/.test(UA)&&!isEdge,isPhantomJS=UA&&/phantomjs/.test(UA),isFF=UA&&UA.match(/firefox\/(\d+)/),nativeWatch={}.watch,supportsPassive=!1;if(inBrowser)try{var opts={};Object.defineProperty(opts,"passive",{get:function(){supportsPassive=!0}}),window.addEventListener("test-passive",null,opts)}catch(e){}var isServerRendering=function(){return void 0===_isServer&&(_isServer=!inBrowser&&!inWeex&&void 0!==global$1&&(global$1.process&&"server"===global$1.process.env.VUE_ENV)),_isServer},devtools=inBrowser&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function isNative(e){return"function"==typeof e&&/native code/.test(e.toString())}var _Set,hasSymbol="undefined"!=typeof Symbol&&isNative(Symbol)&&"undefined"!=typeof Reflect&&isNative(Reflect.ownKeys);_Set="undefined"!=typeof Set&&isNative(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var warn=noop$1,tip=noop$1,generateComponentTrace=noop$1,formatComponentName=noop$1,hasConsole="undefined"!=typeof console,classifyRE=/(?:^|[-_])(\w)/g,classify=function(e){return e.replace(classifyRE,function(e){return e.toUpperCase()}).replace(/[-_]/g,"")};warn=function(e,t){var r=t?generateComponentTrace(t):"";config.warnHandler?config.warnHandler.call(null,e,t,r):hasConsole&&!config.silent&&console.error("[Vue warn]: "+e+r)},tip=function(e,t){hasConsole&&!config.silent&&console.warn("[Vue tip]: "+e+(t?generateComponentTrace(t):""))},formatComponentName=function(e,t){if(e.$root===e)return"<Root>";var r="function"==typeof e&&null!=e.cid?e.options:e._isVue?e.$options||e.constructor.options:e,n=r.name||r._componentTag,i=r.__file;if(!n&&i){var a=i.match(/([^/\\]+)\.vue$/);n=a&&a[1]}return(n?"<"+classify(n)+">":"<Anonymous>")+(i&&!1!==t?" at "+i:"")};var repeat$1=function(e,t){for(var r="";t;)t%2==1&&(r+=e),t>1&&(e+=e),t>>=1;return r};generateComponentTrace=function(e){if(e._isVue&&e.$parent){for(var t=[],r=0;e;){if(t.length>0){var n=t[t.length-1];if(n.constructor===e.constructor){r++,e=e.$parent;continue}r>0&&(t[t.length-1]=[n,r],r=0)}t.push(e),e=e.$parent}return"\n\nfound in\n\n"+t.map(function(e,t){return""+(0===t?"---\x3e ":repeat$1(" ",5+2*t))+(Array.isArray(e)?formatComponentName(e[0])+"... ("+e[1]+" recursive calls)":formatComponentName(e))}).join("\n")}return"\n\n(found in "+formatComponentName(e)+")"};var uid=0,Dep=function(){this.id=uid++,this.subs=[]};Dep.prototype.addSub=function(e){this.subs.push(e)},Dep.prototype.removeSub=function(e){remove(this.subs,e)},Dep.prototype.depend=function(){Dep.target&&Dep.target.addDep(this)},Dep.prototype.notify=function(){var e=this.subs.slice();config.async||e.sort(function(e,t){return e.id-t.id});for(var t=0,r=e.length;t<r;t++)e[t].update()},Dep.target=null;var targetStack=[];function pushTarget(e){targetStack.push(e),Dep.target=e}function popTarget(){targetStack.pop(),Dep.target=targetStack[targetStack.length-1]}var VNode=function(e,t,r,n,i,a,o,s){this.tag=e,this.data=t,this.children=r,this.text=n,this.elm=i,this.ns=void 0,this.context=a,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=t&&t.key,this.componentOptions=o,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},prototypeAccessors={child:{configurable:!0}};prototypeAccessors.child.get=function(){return this.componentInstance},Object.defineProperties(VNode.prototype,prototypeAccessors);var createEmptyVNode=function(e){void 0===e&&(e="");var t=new VNode;return t.text=e,t.isComment=!0,t};function createTextVNode(e){return new VNode(void 0,void 0,void 0,String(e))}function cloneVNode(e){var t=new VNode(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return t.ns=e.ns,t.isStatic=e.isStatic,t.key=e.key,t.isComment=e.isComment,t.fnContext=e.fnContext,t.fnOptions=e.fnOptions,t.fnScopeId=e.fnScopeId,t.asyncMeta=e.asyncMeta,t.isCloned=!0,t}var arrayProto$1=Array.prototype,arrayMethods=Object.create(arrayProto$1),methodsToPatch=["push","pop","shift","unshift","splice","sort","reverse"];methodsToPatch.forEach(function(e){var t=arrayProto$1[e];def(arrayMethods,e,function(){for(var r=[],n=arguments.length;n--;)r[n]=arguments[n];var i,a=t.apply(this,r),o=this.__ob__;switch(e){case"push":case"unshift":i=r;break;case"splice":i=r.slice(2)}return i&&o.observeArray(i),o.dep.notify(),a})});var arrayKeys=Object.getOwnPropertyNames(arrayMethods),shouldObserve=!0;function toggleObserving(e){shouldObserve=e}var Observer=function(e){this.value=e,this.dep=new Dep,this.vmCount=0,def(e,"__ob__",this),Array.isArray(e)?(hasProto?protoAugment(e,arrayMethods):copyAugment(e,arrayMethods,arrayKeys),this.observeArray(e)):this.walk(e)};function protoAugment(e,t){e.__proto__=t}function copyAugment(e,t,r){for(var n=0,i=r.length;n<i;n++){var a=r[n];def(e,a,t[a])}}function observe(e,t){var r;if(isObject$1(e)&&!(e instanceof VNode))return hasOwn(e,"__ob__")&&e.__ob__ instanceof Observer?r=e.__ob__:shouldObserve&&!isServerRendering()&&(Array.isArray(e)||isPlainObject$1(e))&&Object.isExtensible(e)&&!e._isVue&&(r=new Observer(e)),t&&r&&r.vmCount++,r}function defineReactive$$1(e,t,r,n,i){var a=new Dep,o=Object.getOwnPropertyDescriptor(e,t);if(!o||!1!==o.configurable){var s=o&&o.get,l=o&&o.set;s&&!l||2!==arguments.length||(r=e[t]);var u=!i&&observe(r);Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var t=s?s.call(e):r;return Dep.target&&(a.depend(),u&&(u.dep.depend(),Array.isArray(t)&&dependArray(t))),t},set:function(t){var o=s?s.call(e):r;t===o||t!=t&&o!=o||(n&&n(),s&&!l||(l?l.call(e,t):r=t,u=!i&&observe(t),a.notify()))}})}}function set$1(e,t,r){if((isUndef(e)||isPrimitive(e))&&warn("Cannot set reactive property on undefined, null, or primitive value: "+e),Array.isArray(e)&&isValidArrayIndex(t))return e.length=Math.max(e.length,t),e.splice(t,1,r),r;if(t in e&&!(t in Object.prototype))return e[t]=r,r;var n=e.__ob__;return e._isVue||n&&n.vmCount?(warn("Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option."),r):n?(defineReactive$$1(n.value,t,r),n.dep.notify(),r):(e[t]=r,r)}function del(e,t){if((isUndef(e)||isPrimitive(e))&&warn("Cannot delete reactive property on undefined, null, or primitive value: "+e),Array.isArray(e)&&isValidArrayIndex(t))e.splice(t,1);else{var r=e.__ob__;e._isVue||r&&r.vmCount?warn("Avoid deleting properties on a Vue instance or its root $data - just set it to null."):hasOwn(e,t)&&(delete e[t],r&&r.dep.notify())}}function dependArray(e){for(var t=void 0,r=0,n=e.length;r<n;r++)(t=e[r])&&t.__ob__&&t.__ob__.dep.depend(),Array.isArray(t)&&dependArray(t)}Observer.prototype.walk=function(e){for(var t=Object.keys(e),r=0;r<t.length;r++)defineReactive$$1(e,t[r])},Observer.prototype.observeArray=function(e){for(var t=0,r=e.length;t<r;t++)observe(e[t])};var strats=config.optionMergeStrategies;function mergeData(e,t){if(!t)return e;for(var r,n,i,a=hasSymbol?Reflect.ownKeys(t):Object.keys(t),o=0;o<a.length;o++)"__ob__"!==(r=a[o])&&(n=e[r],i=t[r],hasOwn(e,r)?n!==i&&isPlainObject$1(n)&&isPlainObject$1(i)&&mergeData(n,i):set$1(e,r,i));return e}function mergeDataOrFn(e,t,r){return r?function(){var n="function"==typeof t?t.call(r,r):t,i="function"==typeof e?e.call(r,r):e;return n?mergeData(n,i):i}:t?e?function(){return mergeData("function"==typeof t?t.call(this,this):t,"function"==typeof e?e.call(this,this):e)}:t:e}function mergeHook(e,t){var r=t?e?e.concat(t):Array.isArray(t)?t:[t]:e;return r?dedupeHooks(r):r}function dedupeHooks(e){for(var t=[],r=0;r<e.length;r++)-1===t.indexOf(e[r])&&t.push(e[r]);return t}function mergeAssets(e,t,r,n){var i=Object.create(e||null);return t?(assertObjectType(n,t,r),extend(i,t)):i}strats.el=strats.propsData=function(e,t,r,n){return r||warn('option "'+n+'" can only be used during instance creation with the `new` keyword.'),defaultStrat(e,t)},strats.data=function(e,t,r){return r?mergeDataOrFn(e,t,r):t&&"function"!=typeof t?(warn('The "data" option should be a function that returns a per-instance value in component definitions.',r),e):mergeDataOrFn(e,t)},LIFECYCLE_HOOKS.forEach(function(e){strats[e]=mergeHook}),ASSET_TYPES.forEach(function(e){strats[e+"s"]=mergeAssets}),strats.watch=function(e,t,r,n){if(e===nativeWatch&&(e=void 0),t===nativeWatch&&(t=void 0),!t)return Object.create(e||null);if(assertObjectType(n,t,r),!e)return t;var i={};for(var a in extend(i,e),t){var o=i[a],s=t[a];o&&!Array.isArray(o)&&(o=[o]),i[a]=o?o.concat(s):Array.isArray(s)?s:[s]}return i},strats.props=strats.methods=strats.inject=strats.computed=function(e,t,r,n){if(t&&assertObjectType(n,t,r),!e)return t;var i=Object.create(null);return extend(i,e),t&&extend(i,t),i},strats.provide=mergeDataOrFn;var defaultStrat=function(e,t){return void 0===t?e:t};function checkComponents(e){for(var t in e.components)validateComponentName(t)}function validateComponentName(e){new RegExp("^[a-zA-Z][\\-\\.0-9_"+unicodeLetters+"]*$").test(e)||warn('Invalid component name: "'+e+'". Component names should conform to valid custom element name in html5 specification.'),(isBuiltInTag(e)||config.isReservedTag(e))&&warn("Do not use built-in or reserved HTML elements as component id: "+e)}function normalizeProps(e,t){var r=e.props;if(r){var n,i,a={};if(Array.isArray(r))for(n=r.length;n--;)"string"==typeof(i=r[n])?a[camelize(i)]={type:null}:warn("props must be strings when using array syntax.");else if(isPlainObject$1(r))for(var o in r)i=r[o],a[camelize(o)]=isPlainObject$1(i)?i:{type:i};else warn('Invalid value for option "props": expected an Array or an Object, but got '+toRawType(r)+".",t);e.props=a}}function normalizeInject(e,t){var r=e.inject;if(r){var n=e.inject={};if(Array.isArray(r))for(var i=0;i<r.length;i++)n[r[i]]={from:r[i]};else if(isPlainObject$1(r))for(var a in r){var o=r[a];n[a]=isPlainObject$1(o)?extend({from:a},o):{from:o}}else warn('Invalid value for option "inject": expected an Array or an Object, but got '+toRawType(r)+".",t)}}function normalizeDirectives(e){var t=e.directives;if(t)for(var r in t){var n=t[r];"function"==typeof n&&(t[r]={bind:n,update:n})}}function assertObjectType(e,t,r){isPlainObject$1(t)||warn('Invalid value for option "'+e+'": expected an Object, but got '+toRawType(t)+".",r)}function mergeOptions(e,t,r){if(checkComponents(t),"function"==typeof t&&(t=t.options),normalizeProps(t,r),normalizeInject(t,r),normalizeDirectives(t),!t._base&&(t.extends&&(e=mergeOptions(e,t.extends,r)),t.mixins))for(var n=0,i=t.mixins.length;n<i;n++)e=mergeOptions(e,t.mixins[n],r);var a,o={};for(a in e)s(a);for(a in t)hasOwn(e,a)||s(a);function s(n){var i=strats[n]||defaultStrat;o[n]=i(e[n],t[n],r,n)}return o}function resolveAsset(e,t,r,n){if("string"==typeof r){var i=e[t];if(hasOwn(i,r))return i[r];var a=camelize(r);if(hasOwn(i,a))return i[a];var o=capitalize(a);if(hasOwn(i,o))return i[o];var s=i[r]||i[a]||i[o];return n&&!s&&warn("Failed to resolve "+t.slice(0,-1)+": "+r,e),s}}function validateProp(e,t,r,n){var i=t[e],a=!hasOwn(r,e),o=r[e],s=getTypeIndex(Boolean,i.type);if(s>-1)if(a&&!hasOwn(i,"default"))o=!1;else if(""===o||o===hyphenate(e)){var l=getTypeIndex(String,i.type);(l<0||s<l)&&(o=!0)}if(void 0===o){o=getPropDefaultValue(n,i,e);var u=shouldObserve;toggleObserving(!0),observe(o),toggleObserving(u)}return assertProp(i,e,o,n,a),o}function getPropDefaultValue(e,t,r){if(hasOwn(t,"default")){var n=t.default;return isObject$1(n)&&warn('Invalid default value for prop "'+r+'": Props with type Object/Array must use a factory function to return the default value.',e),e&&e.$options.propsData&&void 0===e.$options.propsData[r]&&void 0!==e._props[r]?e._props[r]:"function"==typeof n&&"Function"!==getType(t.type)?n.call(e):n}}function assertProp(e,t,r,n,i){if(e.required&&i)warn('Missing required prop: "'+t+'"',n);else if(null!=r||e.required){var a=e.type,o=!a||!0===a,s=[];if(a){Array.isArray(a)||(a=[a]);for(var l=0;l<a.length&&!o;l++){var u=assertType(r,a[l]);s.push(u.expectedType||""),o=u.valid}}if(o){var c=e.validator;c&&(c(r)||warn('Invalid prop: custom validator check failed for prop "'+t+'".',n))}else warn(getInvalidTypeMessage(t,r,s),n)}}var simpleCheckRE=/^(String|Number|Boolean|Function|Symbol)$/;function assertType(e,t){var r,n=getType(t);if(simpleCheckRE.test(n)){var i=void 0===e?"undefined":_typeof(e);(r=i===n.toLowerCase())||"object"!==i||(r=e instanceof t)}else r="Object"===n?isPlainObject$1(e):"Array"===n?Array.isArray(e):e instanceof t;return{valid:r,expectedType:n}}function getType(e){var t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:""}function isSameType(e,t){return getType(e)===getType(t)}function getTypeIndex(e,t){if(!Array.isArray(t))return isSameType(t,e)?0:-1;for(var r=0,n=t.length;r<n;r++)if(isSameType(t[r],e))return r;return-1}function getInvalidTypeMessage(e,t,r){var n='Invalid prop: type check failed for prop "'+e+'". Expected '+r.map(capitalize).join(", "),i=r[0],a=toRawType(t),o=styleValue(t,i),s=styleValue(t,a);return 1===r.length&&isExplicable(i)&&!isBoolean(i,a)&&(n+=" with value "+o),n+=", got "+a+" ",isExplicable(a)&&(n+="with value "+s+"."),n}function styleValue(e,t){return"String"===t?'"'+e+'"':"Number"===t?""+Number(e):""+e}function isExplicable(e){return["string","number","boolean"].some(function(t){return e.toLowerCase()===t})}function isBoolean(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return e.some(function(e){return"boolean"===e.toLowerCase()})}function handleError(e,t,r){if(t)for(var n=t;n=n.$parent;){var i=n.$options.errorCaptured;if(i)for(var a=0;a<i.length;a++)try{if(!1===i[a].call(n,e,t,r))return}catch(e){globalHandleError(e,n,"errorCaptured hook")}}globalHandleError(e,t,r)}function invokeWithErrorHandling(e,t,r,n,i){var a;try{(a=r?e.apply(t,r):e.call(t))&&!a._isVue&&isPromise(a)&&a.catch(function(e){return handleError(e,n,i+" (Promise/async)")})}catch(e){handleError(e,n,i)}return a}function globalHandleError(e,t,r){if(config.errorHandler)try{return config.errorHandler.call(null,e,t,r)}catch(t){t!==e&&logError(t,null,"config.errorHandler")}logError(e,t,r)}function logError(e,t,r){if(warn("Error in "+r+': "'+e.toString()+'"',t),!inBrowser&&!inWeex||"undefined"==typeof console)throw e;console.error(e)}var timerFunc,mark,measure,isUsingMicroTask=!1,callbacks=[],pending=!1;function flushCallbacks(){pending=!1;var e=callbacks.slice(0);callbacks.length=0;for(var t=0;t<e.length;t++)e[t]()}if("undefined"!=typeof Promise&&isNative(Promise)){var p=Promise.resolve();timerFunc=function(){p.then(flushCallbacks),isIOS&&setTimeout(noop$1)},isUsingMicroTask=!0}else if(isIE||"undefined"==typeof MutationObserver||!isNative(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())timerFunc="undefined"!=typeof setImmediate&&isNative(setImmediate)?function(){setImmediate(flushCallbacks)}:function(){setTimeout(flushCallbacks,0)};else{var counter=1,observer=new MutationObserver(flushCallbacks),textNode=document.createTextNode(String(counter));observer.observe(textNode,{characterData:!0}),timerFunc=function(){counter=(counter+1)%2,textNode.data=String(counter)},isUsingMicroTask=!0}function nextTick(e,t){var r;if(callbacks.push(function(){if(e)try{e.call(t)}catch(e){handleError(e,t,"nextTick")}else r&&r(t)}),pending||(pending=!0,timerFunc()),!e&&"undefined"!=typeof Promise)return new Promise(function(e){r=e})}var initProxy,perf=inBrowser&&window.performance;perf&&perf.mark&&perf.measure&&perf.clearMarks&&perf.clearMeasures&&(mark=function(e){return perf.mark(e)},measure=function(e,t,r){perf.measure(e,t,r),perf.clearMarks(t),perf.clearMarks(r)});var allowedGlobals=makeMap("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,require"),warnNonPresent=function(e,t){warn('Property or method "'+t+'" is not defined on the instance but referenced during render. Make sure that this property is reactive, either in the data option, or for class-based components, by initializing the property. See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',e)},warnReservedPrefix=function(e,t){warn('Property "'+t+'" must be accessed with "$data.'+t+'" because properties starting with "$" or "_" are not proxied in the Vue instance to prevent conflicts with Vue internalsSee: https://vuejs.org/v2/api/#data',e)},hasProxy="undefined"!=typeof Proxy&&isNative(Proxy);if(hasProxy){var isBuiltInModifier=makeMap("stop,prevent,self,ctrl,shift,alt,meta,exact");config.keyCodes=new Proxy(config.keyCodes,{set:function(e,t,r){return isBuiltInModifier(t)?(warn("Avoid overwriting built-in modifier in config.keyCodes: ."+t),!1):(e[t]=r,!0)}})}var hasHandler={has:function(e,t){var r=t in e,n=allowedGlobals(t)||"string"==typeof t&&"_"===t.charAt(0)&&!(t in e.$data);return r||n||(t in e.$data?warnReservedPrefix(e,t):warnNonPresent(e,t)),r||!n}},getHandler={get:function(e,t){return"string"!=typeof t||t in e||(t in e.$data?warnReservedPrefix(e,t):warnNonPresent(e,t)),e[t]}};initProxy=function(e){if(hasProxy){var t=e.$options,r=t.render&&t.render._withStripped?getHandler:hasHandler;e._renderProxy=new Proxy(e,r)}else e._renderProxy=e};var seenObjects=new _Set;function traverse(e){_traverse(e,seenObjects),seenObjects.clear()}function _traverse(e,t){var r,n,i=Array.isArray(e);if(!(!i&&!isObject$1(e)||Object.isFrozen(e)||e instanceof VNode)){if(e.__ob__){var a=e.__ob__.dep.id;if(t.has(a))return;t.add(a)}if(i)for(r=e.length;r--;)_traverse(e[r],t);else for(r=(n=Object.keys(e)).length;r--;)_traverse(e[n[r]],t)}}var normalizeEvent=cached(function(e){var t="&"===e.charAt(0),r="~"===(e=t?e.slice(1):e).charAt(0),n="!"===(e=r?e.slice(1):e).charAt(0);return{name:e=n?e.slice(1):e,once:r,capture:n,passive:t}});function createFnInvoker(e,t){function r(){var e=arguments,n=r.fns;if(!Array.isArray(n))return invokeWithErrorHandling(n,null,arguments,t,"v-on handler");for(var i=n.slice(),a=0;a<i.length;a++)invokeWithErrorHandling(i[a],null,e,t,"v-on handler")}return r.fns=e,r}function updateListeners(e,t,r,n,i,a){var o,s,l,u;for(o in e)s=e[o],l=t[o],u=normalizeEvent(o),isUndef(s)?warn('Invalid handler for event "'+u.name+'": got '+String(s),a):isUndef(l)?(isUndef(s.fns)&&(s=e[o]=createFnInvoker(s,a)),isTrue(u.once)&&(s=e[o]=i(u.name,s,u.capture)),r(u.name,s,u.capture,u.passive,u.params)):s!==l&&(l.fns=s,e[o]=l);for(o in t)isUndef(e[o])&&n((u=normalizeEvent(o)).name,t[o],u.capture)}function mergeVNodeHook(e,t,r){var n;e instanceof VNode&&(e=e.data.hook||(e.data.hook={}));var i=e[t];function a(){r.apply(this,arguments),remove(n.fns,a)}isUndef(i)?n=createFnInvoker([a]):isDef(i.fns)&&isTrue(i.merged)?(n=i).fns.push(a):n=createFnInvoker([i,a]),n.merged=!0,e[t]=n}function extractPropsFromVNodeData(e,t,r){var n=t.options.props;if(!isUndef(n)){var i={},a=e.attrs,o=e.props;if(isDef(a)||isDef(o))for(var s in n){var l=hyphenate(s),u=s.toLowerCase();s!==u&&a&&hasOwn(a,u)&&tip('Prop "'+u+'" is passed to component '+formatComponentName(r||t)+', but the declared prop name is "'+s+'". Note that HTML attributes are case-insensitive and camelCased props need to use their kebab-case equivalents when using in-DOM templates. You should probably use "'+l+'" instead of "'+s+'".'),checkProp(i,o,s,l,!0)||checkProp(i,a,s,l,!1)}return i}}function checkProp(e,t,r,n,i){if(isDef(t)){if(hasOwn(t,r))return e[r]=t[r],i||delete t[r],!0;if(hasOwn(t,n))return e[r]=t[n],i||delete t[n],!0}return!1}function simpleNormalizeChildren(e){for(var t=0;t<e.length;t++)if(Array.isArray(e[t]))return Array.prototype.concat.apply([],e);return e}function normalizeChildren(e){return isPrimitive(e)?[createTextVNode(e)]:Array.isArray(e)?normalizeArrayChildren(e):void 0}function isTextNode(e){return isDef(e)&&isDef(e.text)&&isFalse(e.isComment)}function normalizeArrayChildren(e,t){var r,n,i,a,o=[];for(r=0;r<e.length;r++)isUndef(n=e[r])||"boolean"==typeof n||(a=o[i=o.length-1],Array.isArray(n)?n.length>0&&(isTextNode((n=normalizeArrayChildren(n,(t||"")+"_"+r))[0])&&isTextNode(a)&&(o[i]=createTextVNode(a.text+n[0].text),n.shift()),o.push.apply(o,n)):isPrimitive(n)?isTextNode(a)?o[i]=createTextVNode(a.text+n):""!==n&&o.push(createTextVNode(n)):isTextNode(n)&&isTextNode(a)?o[i]=createTextVNode(a.text+n.text):(isTrue(e._isVList)&&isDef(n.tag)&&isUndef(n.key)&&isDef(t)&&(n.key="__vlist"+t+"_"+r+"__"),o.push(n)));return o}function initProvide(e){var t=e.$options.provide;t&&(e._provided="function"==typeof t?t.call(e):t)}function initInjections(e){var t=resolveInject(e.$options.inject,e);t&&(toggleObserving(!1),Object.keys(t).forEach(function(r){defineReactive$$1(e,r,t[r],function(){warn('Avoid mutating an injected value directly since the changes will be overwritten whenever the provided component re-renders. injection being mutated: "'+r+'"',e)})}),toggleObserving(!0))}function resolveInject(e,t){if(e){for(var r=Object.create(null),n=hasSymbol?Reflect.ownKeys(e):Object.keys(e),i=0;i<n.length;i++){var a=n[i];if("__ob__"!==a){for(var o=e[a].from,s=t;s;){if(s._provided&&hasOwn(s._provided,o)){r[a]=s._provided[o];break}s=s.$parent}if(!s)if("default"in e[a]){var l=e[a].default;r[a]="function"==typeof l?l.call(t):l}else warn('Injection "'+a+'" not found',t)}}return r}}function resolveSlots(e,t){if(!e||!e.length)return{};for(var r={},n=0,i=e.length;n<i;n++){var a=e[n],o=a.data;if(o&&o.attrs&&o.attrs.slot&&delete o.attrs.slot,a.context!==t&&a.fnContext!==t||!o||null==o.slot)(r.default||(r.default=[])).push(a);else{var s=o.slot,l=r[s]||(r[s]=[]);"template"===a.tag?l.push.apply(l,a.children||[]):l.push(a)}}for(var u in r)r[u].every(isWhitespace)&&delete r[u];return r}function isWhitespace(e){return e.isComment&&!e.asyncFactory||" "===e.text}function normalizeScopedSlots(e,t,r){var n;if(e){if(e._normalized)return e._normalized;if(e.$stable&&r&&r!==emptyObject&&0===Object.keys(t).length)return r;for(var i in n={},e)e[i]&&"$"!==i[0]&&(n[i]=normalizeScopedSlot(t,i,e[i]))}else n={};for(var a in t)a in n||(n[a]=proxyNormalSlot(t,a));return e&&Object.isExtensible(e)&&(e._normalized=n),def(n,"$stable",!e||!!e.$stable),n}function normalizeScopedSlot(e,t,r){var n=function(){var e=arguments.length?r.apply(null,arguments):r({});return(e=e&&"object"===(void 0===e?"undefined":_typeof(e))&&!Array.isArray(e)?[e]:normalizeChildren(e))&&0===e.length?void 0:e};return r.proxy&&Object.defineProperty(e,t,{get:n,enumerable:!0,configurable:!0}),n}function proxyNormalSlot(e,t){return function(){return e[t]}}function renderList(e,t){var r,n,i,a,o;if(Array.isArray(e)||"string"==typeof e)for(r=new Array(e.length),n=0,i=e.length;n<i;n++)r[n]=t(e[n],n);else if("number"==typeof e)for(r=new Array(e),n=0;n<e;n++)r[n]=t(n+1,n);else if(isObject$1(e))if(hasSymbol&&e[Symbol.iterator]){r=[];for(var s=e[Symbol.iterator](),l=s.next();!l.done;)r.push(t(l.value,r.length)),l=s.next()}else for(a=Object.keys(e),r=new Array(a.length),n=0,i=a.length;n<i;n++)o=a[n],r[n]=t(e[o],o,n);return isDef(r)||(r=[]),r._isVList=!0,r}function renderSlot(e,t,r,n){var i,a=this.$scopedSlots[e];a?(r=r||{},n&&(isObject$1(n)||warn("slot v-bind without argument expects an Object",this),r=extend(extend({},n),r)),i=a(r)||t):i=this.$slots[e]||t;var o=r&&r.slot;return o?this.$createElement("template",{slot:o},i):i}function resolveFilter(e){return resolveAsset(this.$options,"filters",e,!0)||identity$1}function isKeyNotMatch(e,t){return Array.isArray(e)?-1===e.indexOf(t):e!==t}function checkKeyCodes(e,t,r,n,i){var a=config.keyCodes[t]||r;return i&&n&&!config.keyCodes[t]?isKeyNotMatch(i,n):a?isKeyNotMatch(a,e):n?hyphenate(n)!==t:void 0}function bindObjectProps(e,t,r,n,i){if(r)if(isObject$1(r)){var a;Array.isArray(r)&&(r=toObject(r));var o=function(o){if("class"===o||"style"===o||isReservedAttribute(o))a=e;else{var s=e.attrs&&e.attrs.type;a=n||config.mustUseProp(t,s,o)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var l=camelize(o);o in a||l in a||(a[o]=r[o],i&&((e.on||(e.on={}))["update:"+l]=function(e){r[o]=e}))};for(var s in r)o(s)}else warn("v-bind without argument expects an Object or Array value",this);return e}function renderStatic(e,t){var r=this._staticTrees||(this._staticTrees=[]),n=r[e];return n&&!t?n:(markStatic(n=r[e]=this.$options.staticRenderFns[e].call(this._renderProxy,null,this),"__static__"+e,!1),n)}function markOnce(e,t,r){return markStatic(e,"__once__"+t+(r?"_"+r:""),!0),e}function markStatic(e,t,r){if(Array.isArray(e))for(var n=0;n<e.length;n++)e[n]&&"string"!=typeof e[n]&&markStaticNode(e[n],t+"_"+n,r);else markStaticNode(e,t,r)}function markStaticNode(e,t,r){e.isStatic=!0,e.key=t,e.isOnce=r}function bindObjectListeners(e,t){if(t)if(isPlainObject$1(t)){var r=e.on=e.on?extend({},e.on):{};for(var n in t){var i=r[n],a=t[n];r[n]=i?[].concat(i,a):a}}else warn("v-on without argument expects an Object value",this);return e}function resolveScopedSlots(e,t,r){r=r||{$stable:!t};for(var n=0;n<e.length;n++){var i=e[n];Array.isArray(i)?resolveScopedSlots(i,t,r):i&&(i.proxy&&(i.fn.proxy=!0),r[i.key]=i.fn)}return r}function bindDynamicKeys(e,t){for(var r=0;r<t.length;r+=2){var n=t[r];"string"==typeof n&&n?e[t[r]]=t[r+1]:""!==n&&null!==n&&warn("Invalid value for dynamic directive argument (expected string or null): "+n,this)}return e}function prependModifier(e,t){return"string"==typeof e?t+e:e}function installRenderHelpers(e){e._o=markOnce,e._n=toNumber,e._s=toString$1,e._l=renderList,e._t=renderSlot,e._q=looseEqual,e._i=looseIndexOf,e._m=renderStatic,e._f=resolveFilter,e._k=checkKeyCodes,e._b=bindObjectProps,e._v=createTextVNode,e._e=createEmptyVNode,e._u=resolveScopedSlots,e._g=bindObjectListeners,e._d=bindDynamicKeys,e._p=prependModifier}function FunctionalRenderContext(e,t,r,n,i){var a,o=this,s=i.options;hasOwn(n,"_uid")?(a=Object.create(n))._original=n:(a=n,n=n._original);var l=isTrue(s._compiled),u=!l;this.data=e,this.props=t,this.children=r,this.parent=n,this.listeners=e.on||emptyObject,this.injections=resolveInject(s.inject,n),this.slots=function(){return o.$slots||normalizeScopedSlots(e.scopedSlots,o.$slots=resolveSlots(r,n)),o.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return normalizeScopedSlots(e.scopedSlots,this.slots())}}),l&&(this.$options=s,this.$slots=this.slots(),this.$scopedSlots=normalizeScopedSlots(e.scopedSlots,this.$slots)),s._scopeId?this._c=function(e,t,r,i){var o=createElement(a,e,t,r,i,u);return o&&!Array.isArray(o)&&(o.fnScopeId=s._scopeId,o.fnContext=n),o}:this._c=function(e,t,r,n){return createElement(a,e,t,r,n,u)}}function createFunctionalComponent(e,t,r,n,i){var a=e.options,o={},s=a.props;if(isDef(s))for(var l in s)o[l]=validateProp(l,s,t||emptyObject);else isDef(r.attrs)&&mergeProps(o,r.attrs),isDef(r.props)&&mergeProps(o,r.props);var u=new FunctionalRenderContext(r,o,i,n,e),c=a.render.call(null,u._c,u);if(c instanceof VNode)return cloneAndMarkFunctionalResult(c,r,u.parent,a,u);if(Array.isArray(c)){for(var d=normalizeChildren(c)||[],h=new Array(d.length),f=0;f<d.length;f++)h[f]=cloneAndMarkFunctionalResult(d[f],r,u.parent,a,u);return h}}function cloneAndMarkFunctionalResult(e,t,r,n,i){var a=cloneVNode(e);return a.fnContext=r,a.fnOptions=n,(a.devtoolsMeta=a.devtoolsMeta||{}).renderContext=i,t.slot&&((a.data||(a.data={})).slot=t.slot),a}function mergeProps(e,t){for(var r in t)e[camelize(r)]=t[r]}installRenderHelpers(FunctionalRenderContext.prototype);var componentVNodeHooks={init:function(e,t){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var r=e;componentVNodeHooks.prepatch(r,r)}else{(e.componentInstance=createComponentInstanceForVnode(e,activeInstance)).$mount(t?e.elm:void 0,t)}},prepatch:function(e,t){var r=t.componentOptions;updateChildComponent(t.componentInstance=e.componentInstance,r.propsData,r.listeners,t,r.children)},insert:function(e){var t=e.context,r=e.componentInstance;r._isMounted||(r._isMounted=!0,callHook(r,"mounted")),e.data.keepAlive&&(t._isMounted?queueActivatedComponent(r):activateChildComponent(r,!0))},destroy:function(e){var t=e.componentInstance;t._isDestroyed||(e.data.keepAlive?deactivateChildComponent(t,!0):t.$destroy())}},hooksToMerge=Object.keys(componentVNodeHooks);function createComponent(e,t,r,n,i){if(!isUndef(e)){var a=r.$options._base;if(isObject$1(e)&&(e=a.extend(e)),"function"==typeof e){var o;if(isUndef(e.cid)&&void 0===(e=resolveAsyncComponent(o=e,a)))return createAsyncPlaceholder(o,t,r,n,i);t=t||{},resolveConstructorOptions(e),isDef(t.model)&&transformModel(e.options,t);var s=extractPropsFromVNodeData(t,e,i);if(isTrue(e.options.functional))return createFunctionalComponent(e,s,t,r,n);var l=t.on;if(t.on=t.nativeOn,isTrue(e.options.abstract)){var u=t.slot;t={},u&&(t.slot=u)}installComponentHooks(t);var c=e.options.name||i;return new VNode("vue-component-"+e.cid+(c?"-"+c:""),t,void 0,void 0,void 0,r,{Ctor:e,propsData:s,listeners:l,tag:i,children:n},o)}warn("Invalid Component definition: "+String(e),r)}}function createComponentInstanceForVnode(e,t){var r={_isComponent:!0,_parentVnode:e,parent:t},n=e.data.inlineTemplate;return isDef(n)&&(r.render=n.render,r.staticRenderFns=n.staticRenderFns),new e.componentOptions.Ctor(r)}function installComponentHooks(e){for(var t=e.hook||(e.hook={}),r=0;r<hooksToMerge.length;r++){var n=hooksToMerge[r],i=t[n],a=componentVNodeHooks[n];i===a||i&&i._merged||(t[n]=i?mergeHook$1(a,i):a)}}function mergeHook$1(e,t){var r=function(r,n){e(r,n),t(r,n)};return r._merged=!0,r}function transformModel(e,t){var r=e.model&&e.model.prop||"value",n=e.model&&e.model.event||"input";(t.attrs||(t.attrs={}))[r]=t.model.value;var i=t.on||(t.on={}),a=i[n],o=t.model.callback;isDef(a)?(Array.isArray(a)?-1===a.indexOf(o):a!==o)&&(i[n]=[o].concat(a)):i[n]=o}var SIMPLE_NORMALIZE=1,ALWAYS_NORMALIZE=2;function createElement(e,t,r,n,i,a){return(Array.isArray(r)||isPrimitive(r))&&(i=n,n=r,r=void 0),isTrue(a)&&(i=ALWAYS_NORMALIZE),_createElement(e,t,r,n,i)}function _createElement(e,t,r,n,i){if(isDef(r)&&isDef(r.__ob__))return warn("Avoid using observed data object as vnode data: "+JSON.stringify(r)+"\nAlways create fresh vnode data objects in each render!",e),createEmptyVNode();if(isDef(r)&&isDef(r.is)&&(t=r.is),!t)return createEmptyVNode();var a,o,s;(isDef(r)&&isDef(r.key)&&!isPrimitive(r.key)&&warn("Avoid using non-primitive value as key, use string/number value instead.",e),Array.isArray(n)&&"function"==typeof n[0]&&((r=r||{}).scopedSlots={default:n[0]},n.length=0),i===ALWAYS_NORMALIZE?n=normalizeChildren(n):i===SIMPLE_NORMALIZE&&(n=simpleNormalizeChildren(n)),"string"==typeof t)?(o=e.$vnode&&e.$vnode.ns||config.getTagNamespace(t),a=config.isReservedTag(t)?new VNode(config.parsePlatformTagName(t),r,n,void 0,void 0,e):r&&r.pre||!isDef(s=resolveAsset(e.$options,"components",t))?new VNode(t,r,n,void 0,void 0,e):createComponent(s,r,e,n,t)):a=createComponent(t,r,e,n);return Array.isArray(a)?a:isDef(a)?(isDef(o)&&applyNS(a,o),isDef(r)&&registerDeepBindings(r),a):createEmptyVNode()}function applyNS(e,t,r){if(e.ns=t,"foreignObject"===e.tag&&(t=void 0,r=!0),isDef(e.children))for(var n=0,i=e.children.length;n<i;n++){var a=e.children[n];isDef(a.tag)&&(isUndef(a.ns)||isTrue(r)&&"svg"!==a.tag)&&applyNS(a,t,r)}}function registerDeepBindings(e){isObject$1(e.style)&&traverse(e.style),isObject$1(e.class)&&traverse(e.class)}function initRender(e){e._vnode=null,e._staticTrees=null;var t=e.$options,r=e.$vnode=t._parentVnode,n=r&&r.context;e.$slots=resolveSlots(t._renderChildren,n),e.$scopedSlots=emptyObject,e._c=function(t,r,n,i){return createElement(e,t,r,n,i,!1)},e.$createElement=function(t,r,n,i){return createElement(e,t,r,n,i,!0)};var i=r&&r.data;defineReactive$$1(e,"$attrs",i&&i.attrs||emptyObject,function(){!isUpdatingChildComponent&&warn("$attrs is readonly.",e)},!0),defineReactive$$1(e,"$listeners",t._parentListeners||emptyObject,function(){!isUpdatingChildComponent&&warn("$listeners is readonly.",e)},!0)}var target,currentRenderingInstance=null;function renderMixin(e){installRenderHelpers(e.prototype),e.prototype.$nextTick=function(e){return nextTick(e,this)},e.prototype._render=function(){var e,t=this,r=t.$options,n=r.render,i=r._parentVnode;i&&(t.$scopedSlots=normalizeScopedSlots(i.data.scopedSlots,t.$slots,t.$scopedSlots)),t.$vnode=i;try{currentRenderingInstance=t,e=n.call(t._renderProxy,t.$createElement)}catch(r){if(handleError(r,t,"render"),t.$options.renderError)try{e=t.$options.renderError.call(t._renderProxy,t.$createElement,r)}catch(r){handleError(r,t,"renderError"),e=t._vnode}else e=t._vnode}finally{currentRenderingInstance=null}return Array.isArray(e)&&1===e.length&&(e=e[0]),e instanceof VNode||(Array.isArray(e)&&warn("Multiple root nodes returned from render function. Render function should return a single root node.",t),e=createEmptyVNode()),e.parent=i,e}}function ensureCtor(e,t){return(e.__esModule||hasSymbol&&"Module"===e[Symbol.toStringTag])&&(e=e.default),isObject$1(e)?t.extend(e):e}function createAsyncPlaceholder(e,t,r,n,i){var a=createEmptyVNode();return a.asyncFactory=e,a.asyncMeta={data:t,context:r,children:n,tag:i},a}function resolveAsyncComponent(e,t){if(isTrue(e.error)&&isDef(e.errorComp))return e.errorComp;if(isDef(e.resolved))return e.resolved;if(isTrue(e.loading)&&isDef(e.loadingComp))return e.loadingComp;var r=currentRenderingInstance;if(!isDef(e.owners)){var n=e.owners=[r],i=!0,a=function(e){for(var t=0,r=n.length;t<r;t++)n[t].$forceUpdate();e&&(n.length=0)},o=once(function(r){e.resolved=ensureCtor(r,t),i?n.length=0:a(!0)}),s=once(function(t){warn("Failed to resolve async component: "+String(e)+(t?"\nReason: "+t:"")),isDef(e.errorComp)&&(e.error=!0,a(!0))}),l=e(o,s);return isObject$1(l)&&(isPromise(l)?isUndef(e.resolved)&&l.then(o,s):isPromise(l.component)&&(l.component.then(o,s),isDef(l.error)&&(e.errorComp=ensureCtor(l.error,t)),isDef(l.loading)&&(e.loadingComp=ensureCtor(l.loading,t),0===l.delay?e.loading=!0:setTimeout(function(){isUndef(e.resolved)&&isUndef(e.error)&&(e.loading=!0,a(!1))},l.delay||200)),isDef(l.timeout)&&setTimeout(function(){isUndef(e.resolved)&&s("timeout ("+l.timeout+"ms)")},l.timeout))),i=!1,e.loading?e.loadingComp:e.resolved}e.owners.push(r)}function isAsyncPlaceholder(e){return e.isComment&&e.asyncFactory}function getFirstComponentChild(e){if(Array.isArray(e))for(var t=0;t<e.length;t++){var r=e[t];if(isDef(r)&&(isDef(r.componentOptions)||isAsyncPlaceholder(r)))return r}}function initEvents(e){e._events=Object.create(null),e._hasHookEvent=!1;var t=e.$options._parentListeners;t&&updateComponentListeners(e,t)}function add(e,t){target.$on(e,t)}function remove$1(e,t){target.$off(e,t)}function createOnceHandler(e,t){var r=target;return function n(){null!==t.apply(null,arguments)&&r.$off(e,n)}}function updateComponentListeners(e,t,r){target=e,updateListeners(t,r||{},add,remove$1,createOnceHandler,e),target=void 0}function eventsMixin(e){var t=/^hook:/;e.prototype.$on=function(e,r){var n=this;if(Array.isArray(e))for(var i=0,a=e.length;i<a;i++)n.$on(e[i],r);else(n._events[e]||(n._events[e]=[])).push(r),t.test(e)&&(n._hasHookEvent=!0);return n},e.prototype.$once=function(e,t){var r=this;function n(){r.$off(e,n),t.apply(r,arguments)}return n.fn=t,r.$on(e,n),r},e.prototype.$off=function(e,t){var r=this;if(!arguments.length)return r._events=Object.create(null),r;if(Array.isArray(e)){for(var n=0,i=e.length;n<i;n++)r.$off(e[n],t);return r}var a,o=r._events[e];if(!o)return r;if(!t)return r._events[e]=null,r;for(var s=o.length;s--;)if((a=o[s])===t||a.fn===t){o.splice(s,1);break}return r},e.prototype.$emit=function(e){var t=this,r=e.toLowerCase();r!==e&&t._events[r]&&tip('Event "'+r+'" is emitted in component '+formatComponentName(t)+' but the handler is registered for "'+e+'". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "'+hyphenate(e)+'" instead of "'+e+'".');var n=t._events[e];if(n){n=n.length>1?toArray$1(n):n;for(var i=toArray$1(arguments,1),a='event handler for "'+e+'"',o=0,s=n.length;o<s;o++)invokeWithErrorHandling(n[o],t,i,t,a)}return t}}var activeInstance=null,isUpdatingChildComponent=!1;function setActiveInstance(e){var t=activeInstance;return activeInstance=e,function(){activeInstance=t}}function initLifecycle(e){var t=e.$options,r=t.parent;if(r&&!t.abstract){for(;r.$options.abstract&&r.$parent;)r=r.$parent;r.$children.push(e)}e.$parent=r,e.$root=r?r.$root:e,e.$children=[],e.$refs={},e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}function lifecycleMixin(e){e.prototype._update=function(e,t){var r=this,n=r.$el,i=r._vnode,a=setActiveInstance(r);r._vnode=e,r.$el=i?r.__patch__(i,e):r.__patch__(r.$el,e,t,!1),a(),n&&(n.__vue__=null),r.$el&&(r.$el.__vue__=r),r.$vnode&&r.$parent&&r.$vnode===r.$parent._vnode&&(r.$parent.$el=r.$el)},e.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){callHook(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||remove(t.$children,e),e._watcher&&e._watcher.teardown();for(var r=e._watchers.length;r--;)e._watchers[r].teardown();e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),callHook(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}function mountComponent(e,t,r){var n;return e.$el=t,e.$options.render||(e.$options.render=createEmptyVNode,e.$options.template&&"#"!==e.$options.template.charAt(0)||e.$options.el||t?warn("You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.",e):warn("Failed to mount component: template or render function not defined.",e)),callHook(e,"beforeMount"),n=config.performance&&mark?function(){var t=e._name,n=e._uid,i="vue-perf-start:"+n,a="vue-perf-end:"+n;mark(i);var o=e._render();mark(a),measure("vue "+t+" render",i,a),mark(i),e._update(o,r),mark(a),measure("vue "+t+" patch",i,a)}:function(){e._update(e._render(),r)},new Watcher(e,n,noop$1,{before:function(){e._isMounted&&!e._isDestroyed&&callHook(e,"beforeUpdate")}},!0),r=!1,null==e.$vnode&&(e._isMounted=!0,callHook(e,"mounted")),e}function updateChildComponent(e,t,r,n,i){isUpdatingChildComponent=!0;var a=!!(n.data.scopedSlots&&!n.data.scopedSlots.$stable||e.$scopedSlots!==emptyObject&&!e.$scopedSlots.$stable),o=!!(i||e.$options._renderChildren||a);if(e.$options._parentVnode=n,e.$vnode=n,e._vnode&&(e._vnode.parent=n),e.$options._renderChildren=i,e.$attrs=n.data.attrs||emptyObject,e.$listeners=r||emptyObject,t&&e.$options.props){toggleObserving(!1);for(var s=e._props,l=e.$options._propKeys||[],u=0;u<l.length;u++){var c=l[u],d=e.$options.props;s[c]=validateProp(c,d,t,e)}toggleObserving(!0),e.$options.propsData=t}r=r||emptyObject;var h=e.$options._parentListeners;e.$options._parentListeners=r,updateComponentListeners(e,r,h),o&&(e.$slots=resolveSlots(i,n.context),e.$forceUpdate()),isUpdatingChildComponent=!1}function isInInactiveTree(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function activateChildComponent(e,t){if(t){if(e._directInactive=!1,isInInactiveTree(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var r=0;r<e.$children.length;r++)activateChildComponent(e.$children[r]);callHook(e,"activated")}}function deactivateChildComponent(e,t){if(!(t&&(e._directInactive=!0,isInInactiveTree(e))||e._inactive)){e._inactive=!0;for(var r=0;r<e.$children.length;r++)deactivateChildComponent(e.$children[r]);callHook(e,"deactivated")}}function callHook(e,t){pushTarget();var r=e.$options[t],n=t+" hook";if(r)for(var i=0,a=r.length;i<a;i++)invokeWithErrorHandling(r[i],e,null,e,n);e._hasHookEvent&&e.$emit("hook:"+t),popTarget()}var MAX_UPDATE_COUNT=100,queue=[],activatedChildren=[],has={},circular={},waiting=!1,flushing=!1,index=0;function resetSchedulerState(){index=queue.length=activatedChildren.length=0,has={},circular={},waiting=flushing=!1}var currentFlushTimestamp=0,getNow=Date.now;function flushSchedulerQueue(){var e,t;for(currentFlushTimestamp=getNow(),flushing=!0,queue.sort(function(e,t){return e.id-t.id}),index=0;index<queue.length;index++)if((e=queue[index]).before&&e.before(),t=e.id,has[t]=null,e.run(),null!=has[t]&&(circular[t]=(circular[t]||0)+1,circular[t]>MAX_UPDATE_COUNT)){warn("You may have an infinite update loop "+(e.user?'in watcher with expression "'+e.expression+'"':"in a component render function."),e.vm);break}var r=activatedChildren.slice(),n=queue.slice();resetSchedulerState(),callActivatedHooks(r),callUpdatedHooks(n),devtools&&config.devtools&&devtools.emit("flush")}function callUpdatedHooks(e){for(var t=e.length;t--;){var r=e[t],n=r.vm;n._watcher===r&&n._isMounted&&!n._isDestroyed&&callHook(n,"updated")}}function queueActivatedComponent(e){e._inactive=!1,activatedChildren.push(e)}function callActivatedHooks(e){for(var t=0;t<e.length;t++)e[t]._inactive=!0,activateChildComponent(e[t],!0)}function queueWatcher(e){var t=e.id;if(null==has[t]){if(has[t]=!0,flushing){for(var r=queue.length-1;r>index&&queue[r].id>e.id;)r--;queue.splice(r+1,0,e)}else queue.push(e);if(!waiting){if(waiting=!0,!config.async)return void flushSchedulerQueue();nextTick(flushSchedulerQueue)}}}inBrowser&&getNow()>document.createEvent("Event").timeStamp&&(getNow=function(){return performance.now()});var uid$2=0,Watcher=function(e,t,r,n,i){this.vm=e,i&&(e._watcher=this),e._watchers.push(this),n?(this.deep=!!n.deep,this.user=!!n.user,this.lazy=!!n.lazy,this.sync=!!n.sync,this.before=n.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=r,this.id=++uid$2,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new _Set,this.newDepIds=new _Set,this.expression=t.toString(),"function"==typeof t?this.getter=t:(this.getter=parsePath(t),this.getter||(this.getter=noop$1,warn('Failed watching path: "'+t+'" Watcher only accepts simple dot-delimited paths. For full control, use a function instead.',e))),this.value=this.lazy?void 0:this.get()};Watcher.prototype.get=function(){var e;pushTarget(this);var t=this.vm;try{e=this.getter.call(t,t)}catch(e){if(!this.user)throw e;handleError(e,t,'getter for watcher "'+this.expression+'"')}finally{this.deep&&traverse(e),popTarget(),this.cleanupDeps()}return e},Watcher.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},Watcher.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var t=this.deps[e];this.newDepIds.has(t.id)||t.removeSub(this)}var r=this.depIds;this.depIds=this.newDepIds,this.newDepIds=r,this.newDepIds.clear(),r=this.deps,this.deps=this.newDeps,this.newDeps=r,this.newDeps.length=0},Watcher.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():queueWatcher(this)},Watcher.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||isObject$1(e)||this.deep){var t=this.value;if(this.value=e,this.user)try{this.cb.call(this.vm,e,t)}catch(e){handleError(e,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,e,t)}}},Watcher.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},Watcher.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},Watcher.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||remove(this.vm._watchers,this);for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1}};var sharedPropertyDefinition={enumerable:!0,configurable:!0,get:noop$1,set:noop$1};function proxy(e,t,r){sharedPropertyDefinition.get=function(){return this[t][r]},sharedPropertyDefinition.set=function(e){this[t][r]=e},Object.defineProperty(e,r,sharedPropertyDefinition)}function initState(e){e._watchers=[];var t=e.$options;t.props&&initProps(e,t.props),t.methods&&initMethods(e,t.methods),t.data?initData(e):observe(e._data={},!0),t.computed&&initComputed(e,t.computed),t.watch&&t.watch!==nativeWatch&&initWatch(e,t.watch)}function initProps(e,t){var r=e.$options.propsData||{},n=e._props={},i=e.$options._propKeys=[],a=!e.$parent;a||toggleObserving(!1);var o=function(o){i.push(o);var s=validateProp(o,t,r,e),l=hyphenate(o);(isReservedAttribute(l)||config.isReservedAttr(l))&&warn('"'+l+'" is a reserved attribute and cannot be used as component prop.',e),defineReactive$$1(n,o,s,function(){a||isUpdatingChildComponent||warn("Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value. Prop being mutated: \""+o+'"',e)}),o in e||proxy(e,"_props",o)};for(var s in t)o(s);toggleObserving(!0)}function initData(e){var t=e.$options.data;isPlainObject$1(t=e._data="function"==typeof t?getData(t,e):t||{})||(t={},warn("data functions should return an object:\nhttps://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function",e));for(var r=Object.keys(t),n=e.$options.props,i=e.$options.methods,a=r.length;a--;){var o=r[a];i&&hasOwn(i,o)&&warn('Method "'+o+'" has already been defined as a data property.',e),n&&hasOwn(n,o)?warn('The data property "'+o+'" is already declared as a prop. Use prop default value instead.',e):isReserved(o)||proxy(e,"_data",o)}observe(t,!0)}function getData(e,t){pushTarget();try{return e.call(t,t)}catch(e){return handleError(e,t,"data()"),{}}finally{popTarget()}}var computedWatcherOptions={lazy:!0};function initComputed(e,t){var r=e._computedWatchers=Object.create(null),n=isServerRendering();for(var i in t){var a=t[i],o="function"==typeof a?a:a.get;null==o&&warn('Getter is missing for computed property "'+i+'".',e),n||(r[i]=new Watcher(e,o||noop$1,noop$1,computedWatcherOptions)),i in e?i in e.$data?warn('The computed property "'+i+'" is already defined in data.',e):e.$options.props&&i in e.$options.props&&warn('The computed property "'+i+'" is already defined as a prop.',e):defineComputed(e,i,a)}}function defineComputed(e,t,r){var n=!isServerRendering();"function"==typeof r?(sharedPropertyDefinition.get=n?createComputedGetter(t):createGetterInvoker(r),sharedPropertyDefinition.set=noop$1):(sharedPropertyDefinition.get=r.get?n&&!1!==r.cache?createComputedGetter(t):createGetterInvoker(r.get):noop$1,sharedPropertyDefinition.set=r.set||noop$1),sharedPropertyDefinition.set===noop$1&&(sharedPropertyDefinition.set=function(){warn('Computed property "'+t+'" was assigned to but it has no setter.',this)}),Object.defineProperty(e,t,sharedPropertyDefinition)}function createComputedGetter(e){return function(){var t=this._computedWatchers&&this._computedWatchers[e];if(t)return t.dirty&&t.evaluate(),Dep.target&&t.depend(),t.value}}function createGetterInvoker(e){return function(){return e.call(this,this)}}function initMethods(e,t){var r=e.$options.props;for(var n in t)"function"!=typeof t[n]&&warn('Method "'+n+'" has type "'+_typeof(t[n])+'" in the component definition. Did you reference the function correctly?',e),r&&hasOwn(r,n)&&warn('Method "'+n+'" has already been defined as a prop.',e),n in e&&isReserved(n)&&warn('Method "'+n+'" conflicts with an existing Vue instance method. Avoid defining component methods that start with _ or $.'),e[n]="function"!=typeof t[n]?noop$1:bind(t[n],e)}function initWatch(e,t){for(var r in t){var n=t[r];if(Array.isArray(n))for(var i=0;i<n.length;i++)createWatcher(e,r,n[i]);else createWatcher(e,r,n)}}function createWatcher(e,t,r,n){return isPlainObject$1(r)&&(n=r,r=r.handler),"string"==typeof r&&(r=e[r]),e.$watch(t,r,n)}function stateMixin(e){var t={get:function(){return this._data}},r={get:function(){return this._props}};t.set=function(){warn("Avoid replacing instance root $data. Use nested data properties instead.",this)},r.set=function(){warn("$props is readonly.",this)},Object.defineProperty(e.prototype,"$data",t),Object.defineProperty(e.prototype,"$props",r),e.prototype.$set=set$1,e.prototype.$delete=del,e.prototype.$watch=function(e,t,r){if(isPlainObject$1(t))return createWatcher(this,e,t,r);(r=r||{}).user=!0;var n=new Watcher(this,e,t,r);if(r.immediate)try{t.call(this,n.value)}catch(e){handleError(e,this,'callback for immediate watcher "'+n.expression+'"')}return function(){n.teardown()}}}var uid$3=0;function initMixin(e){e.prototype._init=function(e){var t,r,n=this;n._uid=uid$3++,config.performance&&mark&&(t="vue-perf-start:"+n._uid,r="vue-perf-end:"+n._uid,mark(t)),n._isVue=!0,e&&e._isComponent?initInternalComponent(n,e):n.$options=mergeOptions(resolveConstructorOptions(n.constructor),e||{},n),initProxy(n),n._self=n,initLifecycle(n),initEvents(n),initRender(n),callHook(n,"beforeCreate"),initInjections(n),initState(n),initProvide(n),callHook(n,"created"),config.performance&&mark&&(n._name=formatComponentName(n,!1),mark(r),measure("vue "+n._name+" init",t,r)),n.$options.el&&n.$mount(n.$options.el)}}function initInternalComponent(e,t){var r=e.$options=Object.create(e.constructor.options),n=t._parentVnode;r.parent=t.parent,r._parentVnode=n;var i=n.componentOptions;r.propsData=i.propsData,r._parentListeners=i.listeners,r._renderChildren=i.children,r._componentTag=i.tag,t.render&&(r.render=t.render,r.staticRenderFns=t.staticRenderFns)}function resolveConstructorOptions(e){var t=e.options;if(e.super){var r=resolveConstructorOptions(e.super);if(r!==e.superOptions){e.superOptions=r;var n=resolveModifiedOptions(e);n&&extend(e.extendOptions,n),(t=e.options=mergeOptions(r,e.extendOptions)).name&&(t.components[t.name]=e)}}return t}function resolveModifiedOptions(e){var t,r=e.options,n=e.sealedOptions;for(var i in r)r[i]!==n[i]&&(t||(t={}),t[i]=r[i]);return t}function Vue(e){this instanceof Vue||warn("Vue is a constructor and should be called with the `new` keyword"),this._init(e)}function initUse(e){e.use=function(e){var t=this._installedPlugins||(this._installedPlugins=[]);if(t.indexOf(e)>-1)return this;var r=toArray$1(arguments,1);return r.unshift(this),"function"==typeof e.install?e.install.apply(e,r):"function"==typeof e&&e.apply(null,r),t.push(e),this}}function initMixin$1(e){e.mixin=function(e){return this.options=mergeOptions(this.options,e),this}}function initExtend(e){e.cid=0;var t=1;e.extend=function(e){e=e||{};var r=this,n=r.cid,i=e._Ctor||(e._Ctor={});if(i[n])return i[n];var a=e.name||r.options.name;a&&validateComponentName(a);var o=function(e){this._init(e)};return(o.prototype=Object.create(r.prototype)).constructor=o,o.cid=t++,o.options=mergeOptions(r.options,e),o.super=r,o.options.props&&initProps$1(o),o.options.computed&&initComputed$1(o),o.extend=r.extend,o.mixin=r.mixin,o.use=r.use,ASSET_TYPES.forEach(function(e){o[e]=r[e]}),a&&(o.options.components[a]=o),o.superOptions=r.options,o.extendOptions=e,o.sealedOptions=extend({},o.options),i[n]=o,o}}function initProps$1(e){var t=e.options.props;for(var r in t)proxy(e.prototype,"_props",r)}function initComputed$1(e){var t=e.options.computed;for(var r in t)defineComputed(e.prototype,r,t[r])}function initAssetRegisters(e){ASSET_TYPES.forEach(function(t){e[t]=function(e,r){return r?("component"===t&&validateComponentName(e),"component"===t&&isPlainObject$1(r)&&(r.name=r.name||e,r=this.options._base.extend(r)),"directive"===t&&"function"==typeof r&&(r={bind:r,update:r}),this.options[t+"s"][e]=r,r):this.options[t+"s"][e]}})}function getComponentName(e){return e&&(e.Ctor.options.name||e.tag)}function matches(e,t){return Array.isArray(e)?e.indexOf(t)>-1:"string"==typeof e?e.split(",").indexOf(t)>-1:!!isRegExp(e)&&e.test(t)}function pruneCache(e,t){var r=e.cache,n=e.keys,i=e._vnode;for(var a in r){var o=r[a];if(o){var s=getComponentName(o.componentOptions);s&&!t(s)&&pruneCacheEntry(r,a,n,i)}}}function pruneCacheEntry(e,t,r,n){var i=e[t];!i||n&&i.tag===n.tag||i.componentInstance.$destroy(),e[t]=null,remove(r,t)}initMixin(Vue),stateMixin(Vue),eventsMixin(Vue),lifecycleMixin(Vue),renderMixin(Vue);var patternTypes=[String,RegExp,Array],KeepAlive={name:"keep-alive",abstract:!0,props:{include:patternTypes,exclude:patternTypes,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)pruneCacheEntry(this.cache,e,this.keys)},mounted:function(){var e=this;this.$watch("include",function(t){pruneCache(e,function(e){return matches(t,e)})}),this.$watch("exclude",function(t){pruneCache(e,function(e){return!matches(t,e)})})},render:function(){var e=this.$slots.default,t=getFirstComponentChild(e),r=t&&t.componentOptions;if(r){var n=getComponentName(r),i=this.include,a=this.exclude;if(i&&(!n||!matches(i,n))||a&&n&&matches(a,n))return t;var o=this.cache,s=this.keys,l=null==t.key?r.Ctor.cid+(r.tag?"::"+r.tag:""):t.key;o[l]?(t.componentInstance=o[l].componentInstance,remove(s,l),s.push(l)):(o[l]=t,s.push(l),this.max&&s.length>parseInt(this.max)&&pruneCacheEntry(o,s[0],s,this._vnode)),t.data.keepAlive=!0}return t||e&&e[0]}},builtInComponents={KeepAlive:KeepAlive};function initGlobalAPI(e){var t={get:function(){return config},set:function(){warn("Do not replace the Vue.config object, set individual fields instead.")}};Object.defineProperty(e,"config",t),e.util={warn:warn,extend:extend,mergeOptions:mergeOptions,defineReactive:defineReactive$$1},e.set=set$1,e.delete=del,e.nextTick=nextTick,e.observable=function(e){return observe(e),e},e.options=Object.create(null),ASSET_TYPES.forEach(function(t){e.options[t+"s"]=Object.create(null)}),e.options._base=e,extend(e.options.components,builtInComponents),initUse(e),initMixin$1(e),initExtend(e),initAssetRegisters(e)}initGlobalAPI(Vue),Object.defineProperty(Vue.prototype,"$isServer",{get:isServerRendering}),Object.defineProperty(Vue.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Vue,"FunctionalRenderContext",{value:FunctionalRenderContext}),Vue.version="2.6.6";var isReservedAttr=makeMap("style,class"),acceptValue=makeMap("input,textarea,option,select,progress"),mustUseProp=function(e,t,r){return"value"===r&&acceptValue(e)&&"button"!==t||"selected"===r&&"option"===e||"checked"===r&&"input"===e||"muted"===r&&"video"===e},isEnumeratedAttr=makeMap("contenteditable,draggable,spellcheck"),isValidContentEditableValue=makeMap("events,caret,typing,plaintext-only"),convertEnumeratedValue=function(e,t){return isFalsyAttrValue(t)||"false"===t?"false":"contenteditable"===e&&isValidContentEditableValue(t)?t:"true"},isBooleanAttr=makeMap("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),xlinkNS="http://www.w3.org/1999/xlink",isXlink=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},getXlinkProp=function(e){return isXlink(e)?e.slice(6,e.length):""},isFalsyAttrValue=function(e){return null==e||!1===e};function genClassForVnode(e){for(var t=e.data,r=e,n=e;isDef(n.componentInstance);)(n=n.componentInstance._vnode)&&n.data&&(t=mergeClassData(n.data,t));for(;isDef(r=r.parent);)r&&r.data&&(t=mergeClassData(t,r.data));return renderClass(t.staticClass,t.class)}function mergeClassData(e,t){return{staticClass:concat(e.staticClass,t.staticClass),class:isDef(e.class)?[e.class,t.class]:t.class}}function renderClass(e,t){return isDef(e)||isDef(t)?concat(e,stringifyClass(t)):""}function concat(e,t){return e?t?e+" "+t:e:t||""}function stringifyClass(e){return Array.isArray(e)?stringifyArray(e):isObject$1(e)?stringifyObject(e):"string"==typeof e?e:""}function stringifyArray(e){for(var t,r="",n=0,i=e.length;n<i;n++)isDef(t=stringifyClass(e[n]))&&""!==t&&(r&&(r+=" "),r+=t);return r}function stringifyObject(e){var t="";for(var r in e)e[r]&&(t&&(t+=" "),t+=r);return t}var namespaceMap={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},isHTMLTag=makeMap("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),isSVG=makeMap("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),isPreTag=function(e){return"pre"===e},isReservedTag=function(e){return isHTMLTag(e)||isSVG(e)};function getTagNamespace(e){return isSVG(e)?"svg":"math"===e?"math":void 0}var unknownElementCache=Object.create(null);function isUnknownElement(e){if(!inBrowser)return!0;if(isReservedTag(e))return!1;if(e=e.toLowerCase(),null!=unknownElementCache[e])return unknownElementCache[e];var t=document.createElement(e);return e.indexOf("-")>-1?unknownElementCache[e]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:unknownElementCache[e]=/HTMLUnknownElement/.test(t.toString())}var isTextInputType=makeMap("text,number,password,search,email,tel,url");function query(e){if("string"==typeof e){var t=document.querySelector(e);return t||(warn("Cannot find element: "+e),document.createElement("div"))}return e}function createElement$1(e,t){var r=document.createElement(e);return"select"!==e?r:(t.data&&t.data.attrs&&void 0!==t.data.attrs.multiple&&r.setAttribute("multiple","multiple"),r)}function createElementNS(e,t){return document.createElementNS(namespaceMap[e],t)}function createTextNode(e){return document.createTextNode(e)}function createComment(e){return document.createComment(e)}function insertBefore(e,t,r){e.insertBefore(t,r)}function removeChild(e,t){e.removeChild(t)}function appendChild(e,t){e.appendChild(t)}function parentNode(e){return e.parentNode}function nextSibling(e){return e.nextSibling}function tagName(e){return e.tagName}function setTextContent(e,t){e.textContent=t}function setStyleScope(e,t){e.setAttribute(t,"")}var nodeOps=Object.freeze({createElement:createElement$1,createElementNS:createElementNS,createTextNode:createTextNode,createComment:createComment,insertBefore:insertBefore,removeChild:removeChild,appendChild:appendChild,parentNode:parentNode,nextSibling:nextSibling,tagName:tagName,setTextContent:setTextContent,setStyleScope:setStyleScope}),ref={create:function(e,t){registerRef(t)},update:function(e,t){e.data.ref!==t.data.ref&&(registerRef(e,!0),registerRef(t))},destroy:function(e){registerRef(e,!0)}};function registerRef(e,t){var r=e.data.ref;if(isDef(r)){var n=e.context,i=e.componentInstance||e.elm,a=n.$refs;t?Array.isArray(a[r])?remove(a[r],i):a[r]===i&&(a[r]=void 0):e.data.refInFor?Array.isArray(a[r])?a[r].indexOf(i)<0&&a[r].push(i):a[r]=[i]:a[r]=i}}var emptyNode=new VNode("",{},[]),hooks=["create","activate","update","remove","destroy"];function sameVnode(e,t){return e.key===t.key&&(e.tag===t.tag&&e.isComment===t.isComment&&isDef(e.data)===isDef(t.data)&&sameInputType(e,t)||isTrue(e.isAsyncPlaceholder)&&e.asyncFactory===t.asyncFactory&&isUndef(t.asyncFactory.error))}function sameInputType(e,t){if("input"!==e.tag)return!0;var r,n=isDef(r=e.data)&&isDef(r=r.attrs)&&r.type,i=isDef(r=t.data)&&isDef(r=r.attrs)&&r.type;return n===i||isTextInputType(n)&&isTextInputType(i)}function createKeyToOldIdx(e,t,r){var n,i,a={};for(n=t;n<=r;++n)isDef(i=e[n].key)&&(a[i]=n);return a}function createPatchFunction(e){var t,r,n={},i=e.modules,a=e.nodeOps;for(t=0;t<hooks.length;++t)for(n[hooks[t]]=[],r=0;r<i.length;++r)isDef(i[r][hooks[t]])&&n[hooks[t]].push(i[r][hooks[t]]);function o(e){var t=a.parentNode(e);isDef(t)&&a.removeChild(t,e)}function s(e,t){return!t&&!e.ns&&!(config.ignoredElements.length&&config.ignoredElements.some(function(t){return isRegExp(t)?t.test(e.tag):t===e.tag}))&&config.isUnknownElement(e.tag)}var l=0;function u(e,t,r,i,o,u,f){if(isDef(e.elm)&&isDef(u)&&(e=u[f]=cloneVNode(e)),e.isRootInsert=!o,!function(e,t,r,i){var a=e.data;if(isDef(a)){var o=isDef(e.componentInstance)&&a.keepAlive;if(isDef(a=a.hook)&&isDef(a=a.init)&&a(e,!1),isDef(e.componentInstance))return c(e,t),d(r,e.elm,i),isTrue(o)&&function(e,t,r,i){var a,o=e;for(;o.componentInstance;)if(o=o.componentInstance._vnode,isDef(a=o.data)&&isDef(a=a.transition)){for(a=0;a<n.activate.length;++a)n.activate[a](emptyNode,o);t.push(o);break}d(r,e.elm,i)}(e,t,r,i),!0}}(e,t,r,i)){var m=e.data,v=e.children,y=e.tag;isDef(y)?(m&&m.pre&&l++,s(e,l)&&warn("Unknown custom element: <"+y+'> - did you register the component correctly? For recursive components, make sure to provide the "name" option.',e.context),e.elm=e.ns?a.createElementNS(e.ns,y):a.createElement(y,e),g(e),h(e,v,t),isDef(m)&&p(e,t),d(r,e.elm,i),m&&m.pre&&l--):isTrue(e.isComment)?(e.elm=a.createComment(e.text),d(r,e.elm,i)):(e.elm=a.createTextNode(e.text),d(r,e.elm,i))}}function c(e,t){isDef(e.data.pendingInsert)&&(t.push.apply(t,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,f(e)?(p(e,t),g(e)):(registerRef(e),t.push(e))}function d(e,t,r){isDef(e)&&(isDef(r)?a.parentNode(r)===e&&a.insertBefore(e,t,r):a.appendChild(e,t))}function h(e,t,r){if(Array.isArray(t)){_(t);for(var n=0;n<t.length;++n)u(t[n],r,e.elm,null,!0,t,n)}else isPrimitive(e.text)&&a.appendChild(e.elm,a.createTextNode(String(e.text)))}function f(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return isDef(e.tag)}function p(e,r){for(var i=0;i<n.create.length;++i)n.create[i](emptyNode,e);isDef(t=e.data.hook)&&(isDef(t.create)&&t.create(emptyNode,e),isDef(t.insert)&&r.push(e))}function g(e){var t;if(isDef(t=e.fnScopeId))a.setStyleScope(e.elm,t);else for(var r=e;r;)isDef(t=r.context)&&isDef(t=t.$options._scopeId)&&a.setStyleScope(e.elm,t),r=r.parent;isDef(t=activeInstance)&&t!==e.context&&t!==e.fnContext&&isDef(t=t.$options._scopeId)&&a.setStyleScope(e.elm,t)}function m(e,t,r,n,i,a){for(;n<=i;++n)u(r[n],a,e,t,!1,r,n)}function v(e){var t,r,i=e.data;if(isDef(i))for(isDef(t=i.hook)&&isDef(t=t.destroy)&&t(e),t=0;t<n.destroy.length;++t)n.destroy[t](e);if(isDef(t=e.children))for(r=0;r<e.children.length;++r)v(e.children[r])}function y(e,t,r,n){for(;r<=n;++r){var i=t[r];isDef(i)&&(isDef(i.tag)?(b(i),v(i)):o(i.elm))}}function b(e,t){if(isDef(t)||isDef(e.data)){var r,i=n.remove.length+1;for(isDef(t)?t.listeners+=i:t=function(e,t){function r(){0==--r.listeners&&o(e)}return r.listeners=t,r}(e.elm,i),isDef(r=e.componentInstance)&&isDef(r=r._vnode)&&isDef(r.data)&&b(r,t),r=0;r<n.remove.length;++r)n.remove[r](e,t);isDef(r=e.data.hook)&&isDef(r=r.remove)?r(e,t):t()}else o(e.elm)}function _(e){for(var t={},r=0;r<e.length;r++){var n=e[r],i=n.key;isDef(i)&&(t[i]?warn("Duplicate keys detected: '"+i+"'. This may cause an update error.",n.context):t[i]=!0)}}function w(e,t,r,n){for(var i=r;i<n;i++){var a=t[i];if(isDef(a)&&sameVnode(e,a))return i}}function x(e,t,r,i,o,s){if(e!==t){isDef(t.elm)&&isDef(i)&&(t=i[o]=cloneVNode(t));var l=t.elm=e.elm;if(isTrue(e.isAsyncPlaceholder))isDef(t.asyncFactory.resolved)?C(e.elm,t,r):t.isAsyncPlaceholder=!0;else if(isTrue(t.isStatic)&&isTrue(e.isStatic)&&t.key===e.key&&(isTrue(t.isCloned)||isTrue(t.isOnce)))t.componentInstance=e.componentInstance;else{var c,d=t.data;isDef(d)&&isDef(c=d.hook)&&isDef(c=c.prepatch)&&c(e,t);var h=e.children,p=t.children;if(isDef(d)&&f(t)){for(c=0;c<n.update.length;++c)n.update[c](e,t);isDef(c=d.hook)&&isDef(c=c.update)&&c(e,t)}isUndef(t.text)?isDef(h)&&isDef(p)?h!==p&&function(e,t,r,n,i){var o,s,l,c=0,d=0,h=t.length-1,f=t[0],p=t[h],g=r.length-1,v=r[0],b=r[g],S=!i;for(_(r);c<=h&&d<=g;)isUndef(f)?f=t[++c]:isUndef(p)?p=t[--h]:sameVnode(f,v)?(x(f,v,n,r,d),f=t[++c],v=r[++d]):sameVnode(p,b)?(x(p,b,n,r,g),p=t[--h],b=r[--g]):sameVnode(f,b)?(x(f,b,n,r,g),S&&a.insertBefore(e,f.elm,a.nextSibling(p.elm)),f=t[++c],b=r[--g]):sameVnode(p,v)?(x(p,v,n,r,d),S&&a.insertBefore(e,p.elm,f.elm),p=t[--h],v=r[++d]):(isUndef(o)&&(o=createKeyToOldIdx(t,c,h)),isUndef(s=isDef(v.key)?o[v.key]:w(v,t,c,h))?u(v,n,e,f.elm,!1,r,d):sameVnode(l=t[s],v)?(x(l,v,n,r,d),t[s]=void 0,S&&a.insertBefore(e,l.elm,f.elm)):u(v,n,e,f.elm,!1,r,d),v=r[++d]);c>h?m(e,isUndef(r[g+1])?null:r[g+1].elm,r,d,g,n):d>g&&y(0,t,c,h)}(l,h,p,r,s):isDef(p)?(_(p),isDef(e.text)&&a.setTextContent(l,""),m(l,null,p,0,p.length-1,r)):isDef(h)?y(0,h,0,h.length-1):isDef(e.text)&&a.setTextContent(l,""):e.text!==t.text&&a.setTextContent(l,t.text),isDef(d)&&isDef(c=d.hook)&&isDef(c=c.postpatch)&&c(e,t)}}}function S(e,t,r){if(isTrue(r)&&isDef(e.parent))e.parent.data.pendingInsert=t;else for(var n=0;n<t.length;++n)t[n].data.hook.insert(t[n])}var k=!1,$=makeMap("attrs,class,staticClass,staticStyle,key");function C(e,t,r,n){var i,a=t.tag,o=t.data,l=t.children;if(n=n||o&&o.pre,t.elm=e,isTrue(t.isComment)&&isDef(t.asyncFactory))return t.isAsyncPlaceholder=!0,!0;if(!function(e,t,r){return isDef(t.tag)?0===t.tag.indexOf("vue-component")||!s(t,r)&&t.tag.toLowerCase()===(e.tagName&&e.tagName.toLowerCase()):e.nodeType===(t.isComment?8:3)}(e,t,n))return!1;if(isDef(o)&&(isDef(i=o.hook)&&isDef(i=i.init)&&i(t,!0),isDef(i=t.componentInstance)))return c(t,r),!0;if(isDef(a)){if(isDef(l))if(e.hasChildNodes())if(isDef(i=o)&&isDef(i=i.domProps)&&isDef(i=i.innerHTML)){if(i!==e.innerHTML)return"undefined"==typeof console||k||(k=!0,console.warn("Parent: ",e),console.warn("server innerHTML: ",i),console.warn("client innerHTML: ",e.innerHTML)),!1}else{for(var u=!0,d=e.firstChild,f=0;f<l.length;f++){if(!d||!C(d,l[f],r,n)){u=!1;break}d=d.nextSibling}if(!u||d)return"undefined"==typeof console||k||(k=!0,console.warn("Parent: ",e),console.warn("Mismatching childNodes vs. VNodes: ",e.childNodes,l)),!1}else h(t,l,r);if(isDef(o)){var g=!1;for(var m in o)if(!$(m)){g=!0,p(t,r);break}!g&&o.class&&traverse(o.class)}}else e.data!==t.text&&(e.data=t.text);return!0}return function(e,t,r,i){if(!isUndef(t)){var o,s=!1,l=[];if(isUndef(e))s=!0,u(t,l);else{var c=isDef(e.nodeType);if(!c&&sameVnode(e,t))x(e,t,l,null,null,i);else{if(c){if(1===e.nodeType&&e.hasAttribute(SSR_ATTR)&&(e.removeAttribute(SSR_ATTR),r=!0),isTrue(r)){if(C(e,t,l))return S(t,l,!0),e;warn("The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside <p>, or missing <tbody>. Bailing hydration and performing full client-side render.")}o=e,e=new VNode(a.tagName(o).toLowerCase(),{},[],void 0,o)}var d=e.elm,h=a.parentNode(d);if(u(t,l,d._leaveCb?null:h,a.nextSibling(d)),isDef(t.parent))for(var p=t.parent,g=f(t);p;){for(var m=0;m<n.destroy.length;++m)n.destroy[m](p);if(p.elm=t.elm,g){for(var b=0;b<n.create.length;++b)n.create[b](emptyNode,p);var _=p.data.hook.insert;if(_.merged)for(var w=1;w<_.fns.length;w++)_.fns[w]()}else registerRef(p);p=p.parent}isDef(h)?y(0,[e],0,0):isDef(e.tag)&&v(e)}}return S(t,l,s),t.elm}isDef(e)&&v(e)}}var directives={create:updateDirectives,update:updateDirectives,destroy:function(e){updateDirectives(e,emptyNode)}};function updateDirectives(e,t){(e.data.directives||t.data.directives)&&_update(e,t)}function _update(e,t){var r,n,i,a=e===emptyNode,o=t===emptyNode,s=normalizeDirectives$1(e.data.directives,e.context),l=normalizeDirectives$1(t.data.directives,t.context),u=[],c=[];for(r in l)n=s[r],i=l[r],n?(i.oldValue=n.value,i.oldArg=n.arg,callHook$1(i,"update",t,e),i.def&&i.def.componentUpdated&&c.push(i)):(callHook$1(i,"bind",t,e),i.def&&i.def.inserted&&u.push(i));if(u.length){var d=function(){for(var r=0;r<u.length;r++)callHook$1(u[r],"inserted",t,e)};a?mergeVNodeHook(t,"insert",d):d()}if(c.length&&mergeVNodeHook(t,"postpatch",function(){for(var r=0;r<c.length;r++)callHook$1(c[r],"componentUpdated",t,e)}),!a)for(r in s)l[r]||callHook$1(s[r],"unbind",e,e,o)}var emptyModifiers=Object.create(null);function normalizeDirectives$1(e,t){var r,n,i=Object.create(null);if(!e)return i;for(r=0;r<e.length;r++)(n=e[r]).modifiers||(n.modifiers=emptyModifiers),i[getRawDirName(n)]=n,n.def=resolveAsset(t.$options,"directives",n.name,!0);return i}function getRawDirName(e){return e.rawName||e.name+"."+Object.keys(e.modifiers||{}).join(".")}function callHook$1(e,t,r,n,i){var a=e.def&&e.def[t];if(a)try{a(r.elm,e,r,n,i)}catch(n){handleError(n,r.context,"directive "+e.name+" "+t+" hook")}}var baseModules=[ref,directives];function updateAttrs(e,t){var r=t.componentOptions;if(!(isDef(r)&&!1===r.Ctor.options.inheritAttrs||isUndef(e.data.attrs)&&isUndef(t.data.attrs))){var n,i,a=t.elm,o=e.data.attrs||{},s=t.data.attrs||{};for(n in isDef(s.__ob__)&&(s=t.data.attrs=extend({},s)),s)i=s[n],o[n]!==i&&setAttr(a,n,i);for(n in(isIE||isEdge)&&s.value!==o.value&&setAttr(a,"value",s.value),o)isUndef(s[n])&&(isXlink(n)?a.removeAttributeNS(xlinkNS,getXlinkProp(n)):isEnumeratedAttr(n)||a.removeAttribute(n))}}function setAttr(e,t,r){e.tagName.indexOf("-")>-1?baseSetAttr(e,t,r):isBooleanAttr(t)?isFalsyAttrValue(r)?e.removeAttribute(t):(r="allowfullscreen"===t&&"EMBED"===e.tagName?"true":t,e.setAttribute(t,r)):isEnumeratedAttr(t)?e.setAttribute(t,convertEnumeratedValue(t,r)):isXlink(t)?isFalsyAttrValue(r)?e.removeAttributeNS(xlinkNS,getXlinkProp(t)):e.setAttributeNS(xlinkNS,t,r):baseSetAttr(e,t,r)}function baseSetAttr(e,t,r){if(isFalsyAttrValue(r))e.removeAttribute(t);else{if(isIE&&!isIE9&&"TEXTAREA"===e.tagName&&"placeholder"===t&&""!==r&&!e.__ieph){e.addEventListener("input",function t(r){r.stopImmediatePropagation(),e.removeEventListener("input",t)}),e.__ieph=!0}e.setAttribute(t,r)}}var attrs={create:updateAttrs,update:updateAttrs};function updateClass(e,t){var r=t.elm,n=t.data,i=e.data;if(!(isUndef(n.staticClass)&&isUndef(n.class)&&(isUndef(i)||isUndef(i.staticClass)&&isUndef(i.class)))){var a=genClassForVnode(t),o=r._transitionClasses;isDef(o)&&(a=concat(a,stringifyClass(o))),a!==r._prevClass&&(r.setAttribute("class",a),r._prevClass=a)}}var len,str,chr,index$1,expressionPos,expressionEndPos,warn$1,klass={create:updateClass,update:updateClass},validDivisionCharRE=/[\w).+\-_$\]]/;function parseFilters(e){var t,r,n,i,a,o=!1,s=!1,l=!1,u=!1,c=0,d=0,h=0,f=0;for(n=0;n<e.length;n++)if(r=t,t=e.charCodeAt(n),o)39===t&&92!==r&&(o=!1);else if(s)34===t&&92!==r&&(s=!1);else if(l)96===t&&92!==r&&(l=!1);else if(u)47===t&&92!==r&&(u=!1);else if(124!==t||124===e.charCodeAt(n+1)||124===e.charCodeAt(n-1)||c||d||h){switch(t){case 34:s=!0;break;case 39:o=!0;break;case 96:l=!0;break;case 40:h++;break;case 41:h--;break;case 91:d++;break;case 93:d--;break;case 123:c++;break;case 125:c--}if(47===t){for(var p=n-1,g=void 0;p>=0&&" "===(g=e.charAt(p));p--);g&&validDivisionCharRE.test(g)||(u=!0)}}else void 0===i?(f=n+1,i=e.slice(0,n).trim()):m();function m(){(a||(a=[])).push(e.slice(f,n).trim()),f=n+1}if(void 0===i?i=e.slice(0,n).trim():0!==f&&m(),a)for(n=0;n<a.length;n++)i=wrapFilter(i,a[n]);return i}function wrapFilter(e,t){var r=t.indexOf("(");if(r<0)return'_f("'+t+'")('+e+")";var n=t.slice(0,r),i=t.slice(r+1);return'_f("'+n+'")('+e+(")"!==i?","+i:i)}function baseWarn(e,t){console.error("[Vue compiler]: "+e)}function pluckModuleFunction(e,t){return e?e.map(function(e){return e[t]}).filter(function(e){return e}):[]}function addProp(e,t,r,n,i){(e.props||(e.props=[])).push(rangeSetItem({name:t,value:r,dynamic:i},n)),e.plain=!1}function addAttr(e,t,r,n,i){(i?e.dynamicAttrs||(e.dynamicAttrs=[]):e.attrs||(e.attrs=[])).push(rangeSetItem({name:t,value:r,dynamic:i},n)),e.plain=!1}function addRawAttr(e,t,r,n){e.attrsMap[t]=r,e.attrsList.push(rangeSetItem({name:t,value:r},n))}function addDirective(e,t,r,n,i,a,o,s){(e.directives||(e.directives=[])).push(rangeSetItem({name:t,rawName:r,value:n,arg:i,isDynamicArg:a,modifiers:o},s)),e.plain=!1}function prependModifierMarker(e,t,r){return r?"_p("+t+',"'+e+'")':e+t}function addHandler(e,t,r,n,i,a,o,s){var l;n=n||emptyObject,a&&n.prevent&&n.passive&&a("passive and prevent can't be used together. Passive handler can't prevent default event.",o),n.right?s?t="("+t+")==='click'?'contextmenu':("+t+")":"click"===t&&(t="contextmenu",delete n.right):n.middle&&(s?t="("+t+")==='click'?'mouseup':("+t+")":"click"===t&&(t="mouseup")),n.capture&&(delete n.capture,t=prependModifierMarker("!",t,s)),n.once&&(delete n.once,t=prependModifierMarker("~",t,s)),n.passive&&(delete n.passive,t=prependModifierMarker("&",t,s)),n.native?(delete n.native,l=e.nativeEvents||(e.nativeEvents={})):l=e.events||(e.events={});var u=rangeSetItem({value:r.trim(),dynamic:s},o);n!==emptyObject&&(u.modifiers=n);var c=l[t];Array.isArray(c)?i?c.unshift(u):c.push(u):l[t]=c?i?[u,c]:[c,u]:u,e.plain=!1}function getRawBindingAttr(e,t){return e.rawAttrsMap[":"+t]||e.rawAttrsMap["v-bind:"+t]||e.rawAttrsMap[t]}function getBindingAttr(e,t,r){var n=getAndRemoveAttr(e,":"+t)||getAndRemoveAttr(e,"v-bind:"+t);if(null!=n)return parseFilters(n);if(!1!==r){var i=getAndRemoveAttr(e,t);if(null!=i)return JSON.stringify(i)}}function getAndRemoveAttr(e,t,r){var n;if(null!=(n=e.attrsMap[t]))for(var i=e.attrsList,a=0,o=i.length;a<o;a++)if(i[a].name===t){i.splice(a,1);break}return r&&delete e.attrsMap[t],n}function getAndRemoveAttrByRegex(e,t){for(var r=e.attrsList,n=0,i=r.length;n<i;n++){var a=r[n];if(t.test(a.name))return r.splice(n,1),a}}function rangeSetItem(e,t){return t&&(null!=t.start&&(e.start=t.start),null!=t.end&&(e.end=t.end)),e}function genComponentModel(e,t,r){var n=r||{},i=n.number,a="$$v";n.trim&&(a="(typeof $$v === 'string'? $$v.trim(): $$v)"),i&&(a="_n("+a+")");var o=genAssignmentCode(t,a);e.model={value:"("+t+")",expression:JSON.stringify(t),callback:"function ($$v) {"+o+"}"}}function genAssignmentCode(e,t){var r=parseModel(e);return null===r.key?e+"="+t:"$set("+r.exp+", "+r.key+", "+t+")"}function parseModel(e){if(e=e.trim(),len=e.length,e.indexOf("[")<0||e.lastIndexOf("]")<len-1)return(index$1=e.lastIndexOf("."))>-1?{exp:e.slice(0,index$1),key:'"'+e.slice(index$1+1)+'"'}:{exp:e,key:null};for(str=e,index$1=expressionPos=expressionEndPos=0;!eof();)isStringStart(chr=next())?parseString(chr):91===chr&&parseBracket(chr);return{exp:e.slice(0,expressionPos),key:e.slice(expressionPos+1,expressionEndPos)}}function next(){return str.charCodeAt(++index$1)}function eof(){return index$1>=len}function isStringStart(e){return 34===e||39===e}function parseBracket(e){var t=1;for(expressionPos=index$1;!eof();)if(isStringStart(e=next()))parseString(e);else if(91===e&&t++,93===e&&t--,0===t){expressionEndPos=index$1;break}}function parseString(e){for(var t=e;!eof()&&(e=next())!==t;);}var target$1,RANGE_TOKEN="__r",CHECKBOX_RADIO_TOKEN="__c";function model(e,t,r){warn$1=r;var n=t.value,i=t.modifiers,a=e.tag,o=e.attrsMap.type;if("input"===a&&"file"===o&&warn$1("<"+e.tag+' v-model="'+n+'" type="file">:\nFile inputs are read only. Use a v-on:change listener instead.',e.rawAttrsMap["v-model"]),e.component)return genComponentModel(e,n,i),!1;if("select"===a)genSelect(e,n,i);else if("input"===a&&"checkbox"===o)genCheckboxModel(e,n,i);else if("input"===a&&"radio"===o)genRadioModel(e,n,i);else if("input"===a||"textarea"===a)genDefaultModel(e,n,i);else{if(!config.isReservedTag(a))return genComponentModel(e,n,i),!1;warn$1("<"+e.tag+' v-model="'+n+"\">: v-model is not supported on this element type. If you are working with contenteditable, it's recommended to wrap a library dedicated for that purpose inside a custom component.",e.rawAttrsMap["v-model"])}return!0}function genCheckboxModel(e,t,r){var n=r&&r.number,i=getBindingAttr(e,"value")||"null",a=getBindingAttr(e,"true-value")||"true",o=getBindingAttr(e,"false-value")||"false";addProp(e,"checked","Array.isArray("+t+")?_i("+t+","+i+")>-1"+("true"===a?":("+t+")":":_q("+t+","+a+")")),addHandler(e,"change","var $$a="+t+",$$el=$event.target,$$c=$$el.checked?("+a+"):("+o+");if(Array.isArray($$a)){var $$v="+(n?"_n("+i+")":i)+",$$i=_i($$a,$$v);if($$el.checked){$$i<0&&("+genAssignmentCode(t,"$$a.concat([$$v])")+")}else{$$i>-1&&("+genAssignmentCode(t,"$$a.slice(0,$$i).concat($$a.slice($$i+1))")+")}}else{"+genAssignmentCode(t,"$$c")+"}",null,!0)}function genRadioModel(e,t,r){var n=r&&r.number,i=getBindingAttr(e,"value")||"null";addProp(e,"checked","_q("+t+","+(i=n?"_n("+i+")":i)+")"),addHandler(e,"change",genAssignmentCode(t,i),null,!0)}function genSelect(e,t,r){var n="var $$selectedVal = "+('Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return '+(r&&r.number?"_n(val)":"val")+"})")+";";addHandler(e,"change",n=n+" "+genAssignmentCode(t,"$event.target.multiple ? $$selectedVal : $$selectedVal[0]"),null,!0)}function genDefaultModel(e,t,r){var n=e.attrsMap.type,i=e.attrsMap["v-bind:value"]||e.attrsMap[":value"],a=e.attrsMap["v-bind:type"]||e.attrsMap[":type"];if(i&&!a){var o=e.attrsMap["v-bind:value"]?"v-bind:value":":value";warn$1(o+'="'+i+'" conflicts with v-model on the same element because the latter already expands to a value binding internally',e.rawAttrsMap[o])}var s=r||{},l=s.lazy,u=s.number,c=s.trim,d=!l&&"range"!==n,h=l?"change":"range"===n?RANGE_TOKEN:"input",f="$event.target.value";c&&(f="$event.target.value.trim()"),u&&(f="_n("+f+")");var p=genAssignmentCode(t,f);d&&(p="if($event.target.composing)return;"+p),addProp(e,"value","("+t+")"),addHandler(e,h,p,null,!0),(c||u)&&addHandler(e,"blur","$forceUpdate()")}function normalizeEvents(e){if(isDef(e[RANGE_TOKEN])){var t=isIE?"change":"input";e[t]=[].concat(e[RANGE_TOKEN],e[t]||[]),delete e[RANGE_TOKEN]}isDef(e[CHECKBOX_RADIO_TOKEN])&&(e.change=[].concat(e[CHECKBOX_RADIO_TOKEN],e.change||[]),delete e[CHECKBOX_RADIO_TOKEN])}function createOnceHandler$1(e,t,r){var n=target$1;return function i(){null!==t.apply(null,arguments)&&remove$2(e,i,r,n)}}var useMicrotaskFix=isUsingMicroTask&&!(isFF&&Number(isFF[1])<=53);function add$1(e,t,r,n){if(useMicrotaskFix){var i=currentFlushTimestamp,a=t;t=a._wrapper=function(e){if(e.target===e.currentTarget||e.timeStamp>=i||0===e.timeStamp||e.target.ownerDocument!==document)return a.apply(this,arguments)}}target$1.addEventListener(e,t,supportsPassive?{capture:r,passive:n}:r)}function remove$2(e,t,r,n){(n||target$1).removeEventListener(e,t._wrapper||t,r)}function updateDOMListeners(e,t){if(!isUndef(e.data.on)||!isUndef(t.data.on)){var r=t.data.on||{},n=e.data.on||{};target$1=t.elm,normalizeEvents(r),updateListeners(r,n,add$1,remove$2,createOnceHandler$1,t.context),target$1=void 0}}var svgContainer,events={create:updateDOMListeners,update:updateDOMListeners};function updateDOMProps(e,t){if(!isUndef(e.data.domProps)||!isUndef(t.data.domProps)){var r,n,i=t.elm,a=e.data.domProps||{},o=t.data.domProps||{};for(r in isDef(o.__ob__)&&(o=t.data.domProps=extend({},o)),a)isUndef(o[r])&&(i[r]="");for(r in o){if(n=o[r],"textContent"===r||"innerHTML"===r){if(t.children&&(t.children.length=0),n===a[r])continue;1===i.childNodes.length&&i.removeChild(i.childNodes[0])}if("value"===r||n!==a[r])if("value"===r){i._value=n;var s=isUndef(n)?"":String(n);shouldUpdateValue(i,s)&&(i.value=s)}else if("innerHTML"===r&&isSVG(i.tagName)&&isUndef(i.innerHTML)){(svgContainer=svgContainer||document.createElement("div")).innerHTML="<svg>"+n+"</svg>";for(var l=svgContainer.firstChild;i.firstChild;)i.removeChild(i.firstChild);for(;l.firstChild;)i.appendChild(l.firstChild)}else i[r]=n}}}function shouldUpdateValue(e,t){return!e.composing&&("OPTION"===e.tagName||isNotInFocusAndDirty(e,t)||isDirtyWithModifiers(e,t))}function isNotInFocusAndDirty(e,t){var r=!0;try{r=document.activeElement!==e}catch(e){}return r&&e.value!==t}function isDirtyWithModifiers(e,t){var r=e.value,n=e._vModifiers;if(isDef(n)){if(n.number)return toNumber(r)!==toNumber(t);if(n.trim)return r.trim()!==t.trim()}return r!==t}var domProps={create:updateDOMProps,update:updateDOMProps},parseStyleText=cached(function(e){var t={},r=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach(function(e){if(e){var n=e.split(r);n.length>1&&(t[n[0].trim()]=n[1].trim())}}),t});function normalizeStyleData(e){var t=normalizeStyleBinding(e.style);return e.staticStyle?extend(e.staticStyle,t):t}function normalizeStyleBinding(e){return Array.isArray(e)?toObject(e):"string"==typeof e?parseStyleText(e):e}function getStyle(e,t){var r,n={};if(t)for(var i=e;i.componentInstance;)(i=i.componentInstance._vnode)&&i.data&&(r=normalizeStyleData(i.data))&&extend(n,r);(r=normalizeStyleData(e.data))&&extend(n,r);for(var a=e;a=a.parent;)a.data&&(r=normalizeStyleData(a.data))&&extend(n,r);return n}var emptyStyle,cssVarRE=/^--/,importantRE=/\s*!important$/,setProp=function(e,t,r){if(cssVarRE.test(t))e.style.setProperty(t,r);else if(importantRE.test(r))e.style.setProperty(hyphenate(t),r.replace(importantRE,""),"important");else{var n=normalize(t);if(Array.isArray(r))for(var i=0,a=r.length;i<a;i++)e.style[n]=r[i];else e.style[n]=r}},vendorNames=["Webkit","Moz","ms"],normalize=cached(function(e){if(emptyStyle=emptyStyle||document.createElement("div").style,"filter"!==(e=camelize(e))&&e in emptyStyle)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),r=0;r<vendorNames.length;r++){var n=vendorNames[r]+t;if(n in emptyStyle)return n}});function updateStyle(e,t){var r=t.data,n=e.data;if(!(isUndef(r.staticStyle)&&isUndef(r.style)&&isUndef(n.staticStyle)&&isUndef(n.style))){var i,a,o=t.elm,s=n.staticStyle,l=n.normalizedStyle||n.style||{},u=s||l,c=normalizeStyleBinding(t.data.style)||{};t.data.normalizedStyle=isDef(c.__ob__)?extend({},c):c;var d=getStyle(t,!0);for(a in u)isUndef(d[a])&&setProp(o,a,"");for(a in d)(i=d[a])!==u[a]&&setProp(o,a,null==i?"":i)}}var style={create:updateStyle,update:updateStyle},whitespaceRE=/\s+/;function addClass(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(whitespaceRE).forEach(function(t){return e.classList.add(t)}):e.classList.add(t);else{var r=" "+(e.getAttribute("class")||"")+" ";r.indexOf(" "+t+" ")<0&&e.setAttribute("class",(r+t).trim())}}function removeClass(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(whitespaceRE).forEach(function(t){return e.classList.remove(t)}):e.classList.remove(t),e.classList.length||e.removeAttribute("class");else{for(var r=" "+(e.getAttribute("class")||"")+" ",n=" "+t+" ";r.indexOf(n)>=0;)r=r.replace(n," ");(r=r.trim())?e.setAttribute("class",r):e.removeAttribute("class")}}function resolveTransition(e){if(e){if("object"===(void 0===e?"undefined":_typeof(e))){var t={};return!1!==e.css&&extend(t,autoCssTransition(e.name||"v")),extend(t,e),t}return"string"==typeof e?autoCssTransition(e):void 0}}var autoCssTransition=cached(function(e){return{enterClass:e+"-enter",enterToClass:e+"-enter-to",enterActiveClass:e+"-enter-active",leaveClass:e+"-leave",leaveToClass:e+"-leave-to",leaveActiveClass:e+"-leave-active"}}),hasTransition=inBrowser&&!isIE9,TRANSITION="transition",ANIMATION="animation",transitionProp="transition",transitionEndEvent="transitionend",animationProp="animation",animationEndEvent="animationend";hasTransition&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(transitionProp="WebkitTransition",transitionEndEvent="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(animationProp="WebkitAnimation",animationEndEvent="webkitAnimationEnd"));var raf=inBrowser?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function nextFrame(e){raf(function(){raf(e)})}function addTransitionClass(e,t){var r=e._transitionClasses||(e._transitionClasses=[]);r.indexOf(t)<0&&(r.push(t),addClass(e,t))}function removeTransitionClass(e,t){e._transitionClasses&&remove(e._transitionClasses,t),removeClass(e,t)}function whenTransitionEnds(e,t,r){var n=getTransitionInfo(e,t),i=n.type,a=n.timeout,o=n.propCount;if(!i)return r();var s=i===TRANSITION?transitionEndEvent:animationEndEvent,l=0,u=function(){e.removeEventListener(s,c),r()},c=function(t){t.target===e&&++l>=o&&u()};setTimeout(function(){l<o&&u()},a+1),e.addEventListener(s,c)}var transformRE=/\b(transform|all)(,|$)/;function getTransitionInfo(e,t){var r,n=window.getComputedStyle(e),i=(n[transitionProp+"Delay"]||"").split(", "),a=(n[transitionProp+"Duration"]||"").split(", "),o=getTimeout(i,a),s=(n[animationProp+"Delay"]||"").split(", "),l=(n[animationProp+"Duration"]||"").split(", "),u=getTimeout(s,l),c=0,d=0;return t===TRANSITION?o>0&&(r=TRANSITION,c=o,d=a.length):t===ANIMATION?u>0&&(r=ANIMATION,c=u,d=l.length):d=(r=(c=Math.max(o,u))>0?o>u?TRANSITION:ANIMATION:null)?r===TRANSITION?a.length:l.length:0,{type:r,timeout:c,propCount:d,hasTransform:r===TRANSITION&&transformRE.test(n[transitionProp+"Property"])}}function getTimeout(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max.apply(null,t.map(function(t,r){return toMs(t)+toMs(e[r])}))}function toMs(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function enter(e,t){var r=e.elm;isDef(r._leaveCb)&&(r._leaveCb.cancelled=!0,r._leaveCb());var n=resolveTransition(e.data.transition);if(!isUndef(n)&&!isDef(r._enterCb)&&1===r.nodeType){for(var i=n.css,a=n.type,o=n.enterClass,s=n.enterToClass,l=n.enterActiveClass,u=n.appearClass,c=n.appearToClass,d=n.appearActiveClass,h=n.beforeEnter,f=n.enter,p=n.afterEnter,g=n.enterCancelled,m=n.beforeAppear,v=n.appear,y=n.afterAppear,b=n.appearCancelled,_=n.duration,w=activeInstance,x=activeInstance.$vnode;x&&x.parent;)w=(x=x.parent).context;var S=!w._isMounted||!e.isRootInsert;if(!S||v||""===v){var k=S&&u?u:o,$=S&&d?d:l,C=S&&c?c:s,T=S&&m||h,A=S&&"function"==typeof v?v:f,M=S&&y||p,O=S&&b||g,D=toNumber(isObject$1(_)?_.enter:_);null!=D&&checkDuration(D,"enter",e);var E=!1!==i&&!isIE9,P=getHookArgumentsLength(A),R=r._enterCb=once(function(){E&&(removeTransitionClass(r,C),removeTransitionClass(r,$)),R.cancelled?(E&&removeTransitionClass(r,k),O&&O(r)):M&&M(r),r._enterCb=null});e.data.show||mergeVNodeHook(e,"insert",function(){var t=r.parentNode,n=t&&t._pending&&t._pending[e.key];n&&n.tag===e.tag&&n.elm._leaveCb&&n.elm._leaveCb(),A&&A(r,R)}),T&&T(r),E&&(addTransitionClass(r,k),addTransitionClass(r,$),nextFrame(function(){removeTransitionClass(r,k),R.cancelled||(addTransitionClass(r,C),P||(isValidDuration(D)?setTimeout(R,D):whenTransitionEnds(r,a,R)))})),e.data.show&&(t&&t(),A&&A(r,R)),E||P||R()}}}function leave(e,t){var r=e.elm;isDef(r._enterCb)&&(r._enterCb.cancelled=!0,r._enterCb());var n=resolveTransition(e.data.transition);if(isUndef(n)||1!==r.nodeType)return t();if(!isDef(r._leaveCb)){var i=n.css,a=n.type,o=n.leaveClass,s=n.leaveToClass,l=n.leaveActiveClass,u=n.beforeLeave,c=n.leave,d=n.afterLeave,h=n.leaveCancelled,f=n.delayLeave,p=n.duration,g=!1!==i&&!isIE9,m=getHookArgumentsLength(c),v=toNumber(isObject$1(p)?p.leave:p);isDef(v)&&checkDuration(v,"leave",e);var y=r._leaveCb=once(function(){r.parentNode&&r.parentNode._pending&&(r.parentNode._pending[e.key]=null),g&&(removeTransitionClass(r,s),removeTransitionClass(r,l)),y.cancelled?(g&&removeTransitionClass(r,o),h&&h(r)):(t(),d&&d(r)),r._leaveCb=null});f?f(b):b()}function b(){y.cancelled||(!e.data.show&&r.parentNode&&((r.parentNode._pending||(r.parentNode._pending={}))[e.key]=e),u&&u(r),g&&(addTransitionClass(r,o),addTransitionClass(r,l),nextFrame(function(){removeTransitionClass(r,o),y.cancelled||(addTransitionClass(r,s),m||(isValidDuration(v)?setTimeout(y,v):whenTransitionEnds(r,a,y)))})),c&&c(r,y),g||m||y())}}function checkDuration(e,t,r){"number"!=typeof e?warn("<transition> explicit "+t+" duration is not a valid number - got "+JSON.stringify(e)+".",r.context):isNaN(e)&&warn("<transition> explicit "+t+" duration is NaN - the duration expression might be incorrect.",r.context)}function isValidDuration(e){return"number"==typeof e&&!isNaN(e)}function getHookArgumentsLength(e){if(isUndef(e))return!1;var t=e.fns;return isDef(t)?getHookArgumentsLength(Array.isArray(t)?t[0]:t):(e._length||e.length)>1}function _enter(e,t){!0!==t.data.show&&enter(t)}var transition=inBrowser?{create:_enter,activate:_enter,remove:function(e,t){!0!==e.data.show?leave(e,t):t()}}:{},platformModules=[attrs,klass,events,domProps,style,transition],modules=platformModules.concat(baseModules),patch=createPatchFunction({nodeOps:nodeOps,modules:modules});isIE9&&document.addEventListener("selectionchange",function(){var e=document.activeElement;e&&e.vmodel&&trigger(e,"input")});var directive={inserted:function(e,t,r,n){"select"===r.tag?(n.elm&&!n.elm._vOptions?mergeVNodeHook(r,"postpatch",function(){directive.componentUpdated(e,t,r)}):setSelected(e,t,r.context),e._vOptions=[].map.call(e.options,getValue$1)):("textarea"===r.tag||isTextInputType(e.type))&&(e._vModifiers=t.modifiers,t.modifiers.lazy||(e.addEventListener("compositionstart",onCompositionStart),e.addEventListener("compositionend",onCompositionEnd),e.addEventListener("change",onCompositionEnd),isIE9&&(e.vmodel=!0)))},componentUpdated:function(e,t,r){if("select"===r.tag){setSelected(e,t,r.context);var n=e._vOptions,i=e._vOptions=[].map.call(e.options,getValue$1);if(i.some(function(e,t){return!looseEqual(e,n[t])}))(e.multiple?t.value.some(function(e){return hasNoMatchingOption(e,i)}):t.value!==t.oldValue&&hasNoMatchingOption(t.value,i))&&trigger(e,"change")}}};function setSelected(e,t,r){actuallySetSelected(e,t,r),(isIE||isEdge)&&setTimeout(function(){actuallySetSelected(e,t,r)},0)}function actuallySetSelected(e,t,r){var n=t.value,i=e.multiple;if(!i||Array.isArray(n)){for(var a,o,s=0,l=e.options.length;s<l;s++)if(o=e.options[s],i)a=looseIndexOf(n,getValue$1(o))>-1,o.selected!==a&&(o.selected=a);else if(looseEqual(getValue$1(o),n))return void(e.selectedIndex!==s&&(e.selectedIndex=s));i||(e.selectedIndex=-1)}else warn('<select multiple v-model="'+t.expression+'"> expects an Array value for its binding, but got '+Object.prototype.toString.call(n).slice(8,-1),r)}function hasNoMatchingOption(e,t){return t.every(function(t){return!looseEqual(t,e)})}function getValue$1(e){return"_value"in e?e._value:e.value}function onCompositionStart(e){e.target.composing=!0}function onCompositionEnd(e){e.target.composing&&(e.target.composing=!1,trigger(e.target,"input"))}function trigger(e,t){var r=document.createEvent("HTMLEvents");r.initEvent(t,!0,!0),e.dispatchEvent(r)}function locateNode(e){return!e.componentInstance||e.data&&e.data.transition?e:locateNode(e.componentInstance._vnode)}var show={bind:function(e,t,r){var n=t.value,i=(r=locateNode(r)).data&&r.data.transition,a=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;n&&i?(r.data.show=!0,enter(r,function(){e.style.display=a})):e.style.display=n?a:"none"},update:function(e,t,r){var n=t.value;!n!=!t.oldValue&&((r=locateNode(r)).data&&r.data.transition?(r.data.show=!0,n?enter(r,function(){e.style.display=e.__vOriginalDisplay}):leave(r,function(){e.style.display="none"})):e.style.display=n?e.__vOriginalDisplay:"none")},unbind:function(e,t,r,n,i){i||(e.style.display=e.__vOriginalDisplay)}},platformDirectives={model:directive,show:show},transitionProps={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function getRealChild(e){var t=e&&e.componentOptions;return t&&t.Ctor.options.abstract?getRealChild(getFirstComponentChild(t.children)):e}function extractTransitionData(e){var t={},r=e.$options;for(var n in r.propsData)t[n]=e[n];var i=r._parentListeners;for(var a in i)t[camelize(a)]=i[a];return t}function placeholder(e,t){if(/\d-keep-alive$/.test(t.tag))return e("keep-alive",{props:t.componentOptions.propsData})}function hasParentTransition(e){for(;e=e.parent;)if(e.data.transition)return!0}function isSameChild(e,t){return t.key===e.key&&t.tag===e.tag}var isNotTextNode=function(e){return e.tag||isAsyncPlaceholder(e)},isVShowDirective=function(e){return"show"===e.name},Transition={name:"transition",props:transitionProps,abstract:!0,render:function(e){var t=this,r=this.$slots.default;if(r&&(r=r.filter(isNotTextNode)).length){r.length>1&&warn("<transition> can only be used on a single element. Use <transition-group> for lists.",this.$parent);var n=this.mode;n&&"in-out"!==n&&"out-in"!==n&&warn("invalid <transition> mode: "+n,this.$parent);var i=r[0];if(hasParentTransition(this.$vnode))return i;var a=getRealChild(i);if(!a)return i;if(this._leaving)return placeholder(e,i);var o="__transition-"+this._uid+"-";a.key=null==a.key?a.isComment?o+"comment":o+a.tag:isPrimitive(a.key)?0===String(a.key).indexOf(o)?a.key:o+a.key:a.key;var s=(a.data||(a.data={})).transition=extractTransitionData(this),l=this._vnode,u=getRealChild(l);if(a.data.directives&&a.data.directives.some(isVShowDirective)&&(a.data.show=!0),u&&u.data&&!isSameChild(a,u)&&!isAsyncPlaceholder(u)&&(!u.componentInstance||!u.componentInstance._vnode.isComment)){var c=u.data.transition=extend({},s);if("out-in"===n)return this._leaving=!0,mergeVNodeHook(c,"afterLeave",function(){t._leaving=!1,t.$forceUpdate()}),placeholder(e,i);if("in-out"===n){if(isAsyncPlaceholder(a))return l;var d,h=function(){d()};mergeVNodeHook(s,"afterEnter",h),mergeVNodeHook(s,"enterCancelled",h),mergeVNodeHook(c,"delayLeave",function(e){d=e})}}return i}}},props=extend({tag:String,moveClass:String},transitionProps);delete props.mode;var TransitionGroup={props:props,beforeMount:function(){var e=this,t=this._update;this._update=function(r,n){var i=setActiveInstance(e);e.__patch__(e._vnode,e.kept,!1,!0),e._vnode=e.kept,i(),t.call(e,r,n)}},render:function(e){for(var t=this.tag||this.$vnode.data.tag||"span",r=Object.create(null),n=this.prevChildren=this.children,i=this.$slots.default||[],a=this.children=[],o=extractTransitionData(this),s=0;s<i.length;s++){var l=i[s];if(l.tag)if(null!=l.key&&0!==String(l.key).indexOf("__vlist"))a.push(l),r[l.key]=l,(l.data||(l.data={})).transition=o;else{var u=l.componentOptions,c=u?u.Ctor.options.name||u.tag||"":l.tag;warn("<transition-group> children must be keyed: <"+c+">")}}if(n){for(var d=[],h=[],f=0;f<n.length;f++){var p=n[f];p.data.transition=o,p.data.pos=p.elm.getBoundingClientRect(),r[p.key]?d.push(p):h.push(p)}this.kept=e(t,null,d),this.removed=h}return e(t,null,a)},updated:function(){var e=this.prevChildren,t=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,t)&&(e.forEach(callPendingCbs),e.forEach(recordPosition),e.forEach(applyTranslation),this._reflow=document.body.offsetHeight,e.forEach(function(e){if(e.data.moved){var r=e.elm,n=r.style;addTransitionClass(r,t),n.transform=n.WebkitTransform=n.transitionDuration="",r.addEventListener(transitionEndEvent,r._moveCb=function e(n){n&&n.target!==r||n&&!/transform$/.test(n.propertyName)||(r.removeEventListener(transitionEndEvent,e),r._moveCb=null,removeTransitionClass(r,t))})}}))},methods:{hasMove:function(e,t){if(!hasTransition)return!1;if(this._hasMove)return this._hasMove;var r=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach(function(e){removeClass(r,e)}),addClass(r,t),r.style.display="none",this.$el.appendChild(r);var n=getTransitionInfo(r);return this.$el.removeChild(r),this._hasMove=n.hasTransform}}};function callPendingCbs(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function recordPosition(e){e.data.newPos=e.elm.getBoundingClientRect()}function applyTranslation(e){var t=e.data.pos,r=e.data.newPos,n=t.left-r.left,i=t.top-r.top;if(n||i){e.data.moved=!0;var a=e.elm.style;a.transform=a.WebkitTransform="translate("+n+"px,"+i+"px)",a.transitionDuration="0s"}}var platformComponents={Transition:Transition,TransitionGroup:TransitionGroup};Vue.config.mustUseProp=mustUseProp,Vue.config.isReservedTag=isReservedTag,Vue.config.isReservedAttr=isReservedAttr,Vue.config.getTagNamespace=getTagNamespace,Vue.config.isUnknownElement=isUnknownElement,extend(Vue.options.directives,platformDirectives),extend(Vue.options.components,platformComponents),Vue.prototype.__patch__=inBrowser?patch:noop$1,Vue.prototype.$mount=function(e,t){return mountComponent(this,e=e&&inBrowser?query(e):void 0,t)},inBrowser&&setTimeout(function(){config.devtools&&(devtools?devtools.emit("init",Vue):console[console.info?"info":"log"]("Download the Vue Devtools extension for a better development experience:\nhttps://github.com/vuejs/vue-devtools")),!1!==config.productionTip&&"undefined"!=typeof console&&console[console.info?"info":"log"]("You are running Vue in development mode.\nMake sure to turn on production mode when deploying for production.\nSee more tips at https://vuejs.org/guide/deployment.html")},0);var defaultTagRE=/\{\{((?:.|\r?\n)+?)\}\}/g,regexEscapeRE=/[-.*+?^${}()|[\]\/\\]/g,buildRegex=cached(function(e){var t=e[0].replace(regexEscapeRE,"\\$&"),r=e[1].replace(regexEscapeRE,"\\$&");return new RegExp(t+"((?:.|\\n)+?)"+r,"g")});function parseText(e,t){var r=t?buildRegex(t):defaultTagRE;if(r.test(e)){for(var n,i,a,o=[],s=[],l=r.lastIndex=0;n=r.exec(e);){(i=n.index)>l&&(s.push(a=e.slice(l,i)),o.push(JSON.stringify(a)));var u=parseFilters(n[1].trim());o.push("_s("+u+")"),s.push({"@binding":u}),l=i+n[0].length}return l<e.length&&(s.push(a=e.slice(l)),o.push(JSON.stringify(a))),{expression:o.join("+"),tokens:s}}}function transformNode(e,t){var r=t.warn||baseWarn,n=getAndRemoveAttr(e,"class");n&&(parseText(n,t.delimiters)&&r('class="'+n+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div class="{{ val }}">, use <div :class="val">.',e.rawAttrsMap.class));n&&(e.staticClass=JSON.stringify(n));var i=getBindingAttr(e,"class",!1);i&&(e.classBinding=i)}function genData(e){var t="";return e.staticClass&&(t+="staticClass:"+e.staticClass+","),e.classBinding&&(t+="class:"+e.classBinding+","),t}var klass$1={staticKeys:["staticClass"],transformNode:transformNode,genData:genData};function transformNode$1(e,t){var r=t.warn||baseWarn,n=getAndRemoveAttr(e,"style");n&&(parseText(n,t.delimiters)&&r('style="'+n+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div style="{{ val }}">, use <div :style="val">.',e.rawAttrsMap.style),e.staticStyle=JSON.stringify(parseStyleText(n)));var i=getBindingAttr(e,"style",!1);i&&(e.styleBinding=i)}function genData$1(e){var t="";return e.staticStyle&&(t+="staticStyle:"+e.staticStyle+","),e.styleBinding&&(t+="style:("+e.styleBinding+"),"),t}var decoder,style$1={staticKeys:["staticStyle"],transformNode:transformNode$1,genData:genData$1},he={decode:function(e){return(decoder=decoder||document.createElement("div")).innerHTML=e,decoder.textContent}},isUnaryTag=makeMap("area,base,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr"),canBeLeftOpenTag=makeMap("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source"),isNonPhrasingTag=makeMap("address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track"),attribute=/^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,dynamicArgAttribute=/^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,ncname="[a-zA-Z_][\\-\\.0-9_a-zA-Z"+unicodeLetters+"]*",qnameCapture="((?:"+ncname+"\\:)?"+ncname+")",startTagOpen=new RegExp("^<"+qnameCapture),startTagClose=/^\s*(\/?)>/,endTag=new RegExp("^<\\/"+qnameCapture+"[^>]*>"),doctype=/^<!DOCTYPE [^>]+>/i,comment=/^<!\--/,conditionalComment=/^<!\[/,isPlainTextElement=makeMap("script,style,textarea",!0),reCache={},decodingMap={"&lt;":"<","&gt;":">","&quot;":'"',"&amp;":"&","&#10;":"\n","&#9;":"\t","&#39;":"'"},encodedAttr=/&(?:lt|gt|quot|amp|#39);/g,encodedAttrWithNewLines=/&(?:lt|gt|quot|amp|#39|#10|#9);/g,isIgnoreNewlineTag=makeMap("pre,textarea",!0),shouldIgnoreFirstNewline=function(e,t){return e&&isIgnoreNewlineTag(e)&&"\n"===t[0]};function decodeAttr(e,t){var r=t?encodedAttrWithNewLines:encodedAttr;return e.replace(r,function(e){return decodingMap[e]})}function parseHTML(e,t){for(var r,n,i=[],a=t.expectHTML,o=t.isUnaryTag||no,s=t.canBeLeftOpenTag||no,l=0;e;){if(r=e,n&&isPlainTextElement(n)){var u=0,c=n.toLowerCase(),d=reCache[c]||(reCache[c]=new RegExp("([\\s\\S]*?)(</"+c+"[^>]*>)","i")),h=e.replace(d,function(e,r,n){return u=n.length,isPlainTextElement(c)||"noscript"===c||(r=r.replace(/<!\--([\s\S]*?)-->/g,"$1").replace(/<!\[CDATA\[([\s\S]*?)]]>/g,"$1")),shouldIgnoreFirstNewline(c,r)&&(r=r.slice(1)),t.chars&&t.chars(r),""});l+=e.length-h.length,e=h,C(c,l-u,l)}else{var f=e.indexOf("<");if(0===f){if(comment.test(e)){var p=e.indexOf("--\x3e");if(p>=0){t.shouldKeepComment&&t.comment(e.substring(4,p),l,l+p+3),S(p+3);continue}}if(conditionalComment.test(e)){var g=e.indexOf("]>");if(g>=0){S(g+2);continue}}var m=e.match(doctype);if(m){S(m[0].length);continue}var v=e.match(endTag);if(v){var y=l;S(v[0].length),C(v[1],y,l);continue}var b=k();if(b){$(b),shouldIgnoreFirstNewline(b.tagName,e)&&S(1);continue}}var _=void 0,w=void 0,x=void 0;if(f>=0){for(w=e.slice(f);!(endTag.test(w)||startTagOpen.test(w)||comment.test(w)||conditionalComment.test(w)||(x=w.indexOf("<",1))<0);)f+=x,w=e.slice(f);_=e.substring(0,f)}f<0&&(_=e),_&&S(_.length),t.chars&&_&&t.chars(_,l-_.length,l)}if(e===r){t.chars&&t.chars(e),!i.length&&t.warn&&t.warn('Mal-formatted tag at end of template: "'+e+'"',{start:l+e.length});break}}function S(t){l+=t,e=e.substring(t)}function k(){var t=e.match(startTagOpen);if(t){var r,n,i={tagName:t[1],attrs:[],start:l};for(S(t[0].length);!(r=e.match(startTagClose))&&(n=e.match(dynamicArgAttribute)||e.match(attribute));)n.start=l,S(n[0].length),n.end=l,i.attrs.push(n);if(r)return i.unarySlash=r[1],S(r[0].length),i.end=l,i}}function $(e){var r=e.tagName,l=e.unarySlash;a&&("p"===n&&isNonPhrasingTag(r)&&C(n),s(r)&&n===r&&C(r));for(var u=o(r)||!!l,c=e.attrs.length,d=new Array(c),h=0;h<c;h++){var f=e.attrs[h],p=f[3]||f[4]||f[5]||"",g="a"===r&&"href"===f[1]?t.shouldDecodeNewlinesForHref:t.shouldDecodeNewlines;d[h]={name:f[1],value:decodeAttr(p,g)},t.outputSourceRange&&(d[h].start=f.start+f[0].match(/^\s*/).length,d[h].end=f.end)}u||(i.push({tag:r,lowerCasedTag:r.toLowerCase(),attrs:d,start:e.start,end:e.end}),n=r),t.start&&t.start(r,d,u,e.start,e.end)}function C(e,r,a){var o,s;if(null==r&&(r=l),null==a&&(a=l),e)for(s=e.toLowerCase(),o=i.length-1;o>=0&&i[o].lowerCasedTag!==s;o--);else o=0;if(o>=0){for(var u=i.length-1;u>=o;u--)(u>o||!e&&t.warn)&&t.warn("tag <"+i[u].tag+"> has no matching end tag.",{start:i[u].start}),t.end&&t.end(i[u].tag,r,a);i.length=o,n=o&&i[o-1].tag}else"br"===s?t.start&&t.start(e,[],!0,r,a):"p"===s&&(t.start&&t.start(e,[],!1,r,a),t.end&&t.end(e,r,a))}C()}var warn$2,delimiters,transforms,preTransforms,postTransforms,platformIsPreTag,platformMustUseProp,platformGetTagNamespace,maybeComponent,onRE=/^@|^v-on:/,dirRE=/^v-|^@|^:/,forAliasRE=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,forIteratorRE=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,stripParensRE=/^\(|\)$/g,dynamicArgRE=/^\[.*\]$/,argRE=/:(.*)$/,bindRE=/^:|^\.|^v-bind:/,modifierRE=/\.[^.]+/g,slotRE=/^v-slot(:|$)|^#/,lineBreakRE=/[\r\n]/,whitespaceRE$1=/\s+/g,invalidAttributeRE=/[\s"'<>\/=]/,decodeHTMLCached=cached(he.decode),emptySlotScopeToken="_empty_";function createASTElement(e,t,r){return{type:1,tag:e,attrsList:t,attrsMap:makeAttrsMap(t),rawAttrsMap:{},parent:r,children:[]}}function parse(e,t){warn$2=t.warn||baseWarn,platformIsPreTag=t.isPreTag||no,platformMustUseProp=t.mustUseProp||no,platformGetTagNamespace=t.getTagNamespace||no;var r=t.isReservedTag||no;maybeComponent=function(e){return!!e.component||!r(e.tag)},transforms=pluckModuleFunction(t.modules,"transformNode"),preTransforms=pluckModuleFunction(t.modules,"preTransformNode"),postTransforms=pluckModuleFunction(t.modules,"postTransformNode"),delimiters=t.delimiters;var n,i,a=[],o=!1!==t.preserveWhitespace,s=t.whitespace,l=!1,u=!1,c=!1;function d(e,t){c||(c=!0,warn$2(e,t))}function h(e){if(f(e),l||e.processed||(e=processElement(e,t)),a.length||e===n||(n.if&&(e.elseif||e.else)?(p(e),addIfCondition(n,{exp:e.elseif,block:e})):d("Component template should contain exactly one root element. If you are using v-if on multiple elements, use v-else-if to chain them instead.",{start:e.start})),i&&!e.forbidden)if(e.elseif||e.else)processIfConditions(e,i);else{if(e.slotScope){var r=e.slotTarget||'"default"';(i.scopedSlots||(i.scopedSlots={}))[r]=e}i.children.push(e),e.parent=i}e.children=e.children.filter(function(e){return!e.slotScope}),f(e),e.pre&&(l=!1),platformIsPreTag(e.tag)&&(u=!1);for(var o=0;o<postTransforms.length;o++)postTransforms[o](e,t)}function f(e){if(!u)for(var t;(t=e.children[e.children.length-1])&&3===t.type&&" "===t.text;)e.children.pop()}function p(e){"slot"!==e.tag&&"template"!==e.tag||d("Cannot use <"+e.tag+"> as component root element because it may contain multiple nodes.",{start:e.start}),e.attrsMap.hasOwnProperty("v-for")&&d("Cannot use v-for on stateful component root element because it renders multiple elements.",e.rawAttrsMap["v-for"])}return parseHTML(e,{warn:warn$2,expectHTML:t.expectHTML,isUnaryTag:t.isUnaryTag,canBeLeftOpenTag:t.canBeLeftOpenTag,shouldDecodeNewlines:t.shouldDecodeNewlines,shouldDecodeNewlinesForHref:t.shouldDecodeNewlinesForHref,shouldKeepComment:t.comments,outputSourceRange:t.outputSourceRange,start:function(e,r,o,s){var c=i&&i.ns||platformGetTagNamespace(e);isIE&&"svg"===c&&(r=guardIESVGBug(r));var d=createASTElement(e,r,i);c&&(d.ns=c),t.outputSourceRange&&(d.start=s,d.rawAttrsMap=d.attrsList.reduce(function(e,t){return e[t.name]=t,e},{})),r.forEach(function(e){invalidAttributeRE.test(e.name)&&warn$2("Invalid dynamic argument expression: attribute names cannot contain spaces, quotes, <, >, / or =.",{start:e.start+e.name.indexOf("["),end:e.start+e.name.length})}),isForbiddenTag(d)&&!isServerRendering()&&(d.forbidden=!0,warn$2("Templates should only be responsible for mapping the state to the UI. Avoid placing tags with side-effects in your templates, such as <"+e+">, as they will not be parsed.",{start:d.start}));for(var f=0;f<preTransforms.length;f++)d=preTransforms[f](d,t)||d;l||(processPre(d),d.pre&&(l=!0)),platformIsPreTag(d.tag)&&(u=!0),l?processRawAttrs(d):d.processed||(processFor(d),processIf(d),processOnce(d)),n||p(n=d),o?h(d):(i=d,a.push(d))},end:function(e,r,n){var o=a[a.length-1];a.length-=1,i=a[a.length-1],t.outputSourceRange&&(o.end=n),h(o)},chars:function(r,n,a){if(i){if(!isIE||"textarea"!==i.tag||i.attrsMap.placeholder!==r){var c,h,f=i.children;if(r=u||r.trim()?isTextTag(i)?r:decodeHTMLCached(r):f.length?s?"condense"===s&&lineBreakRE.test(r)?"":" ":o?" ":"":"")"condense"===s&&(r=r.replace(whitespaceRE$1," ")),!l&&" "!==r&&(c=parseText(r,delimiters))?h={type:2,expression:c.expression,tokens:c.tokens,text:r}:" "===r&&f.length&&" "===f[f.length-1].text||(h={type:3,text:r}),h&&(t.outputSourceRange&&(h.start=n,h.end=a),f.push(h))}}else r===e?d("Component template requires a root element, rather than just text.",{start:n}):(r=r.trim())&&d('text "'+r+'" outside root element will be ignored.',{start:n})},comment:function(e,r,n){if(i){var a={type:3,text:e,isComment:!0};t.outputSourceRange&&(a.start=r,a.end=n),i.children.push(a)}}}),n}function processPre(e){null!=getAndRemoveAttr(e,"v-pre")&&(e.pre=!0)}function processRawAttrs(e){var t=e.attrsList,r=t.length;if(r)for(var n=e.attrs=new Array(r),i=0;i<r;i++)n[i]={name:t[i].name,value:JSON.stringify(t[i].value)},null!=t[i].start&&(n[i].start=t[i].start,n[i].end=t[i].end);else e.pre||(e.plain=!0)}function processElement(e,t){processKey(e),e.plain=!e.key&&!e.scopedSlots&&!e.attrsList.length,processRef(e),processSlotContent(e),processSlotOutlet(e),processComponent(e);for(var r=0;r<transforms.length;r++)e=transforms[r](e,t)||e;return processAttrs(e),e}function processKey(e){var t=getBindingAttr(e,"key");if(t){if("template"===e.tag&&warn$2("<template> cannot be keyed. Place the key on real elements instead.",getRawBindingAttr(e,"key")),e.for){var r=e.iterator2||e.iterator1,n=e.parent;r&&r===t&&n&&"transition-group"===n.tag&&warn$2("Do not use v-for index as key on <transition-group> children, this is the same as not using keys.",getRawBindingAttr(e,"key"),!0)}e.key=t}}function processRef(e){var t=getBindingAttr(e,"ref");t&&(e.ref=t,e.refInFor=checkInFor(e))}function processFor(e){var t;if(t=getAndRemoveAttr(e,"v-for")){var r=parseFor(t);r?extend(e,r):warn$2("Invalid v-for expression: "+t,e.rawAttrsMap["v-for"])}}function parseFor(e){var t=e.match(forAliasRE);if(t){var r={};r.for=t[2].trim();var n=t[1].trim().replace(stripParensRE,""),i=n.match(forIteratorRE);return i?(r.alias=n.replace(forIteratorRE,"").trim(),r.iterator1=i[1].trim(),i[2]&&(r.iterator2=i[2].trim())):r.alias=n,r}}function processIf(e){var t=getAndRemoveAttr(e,"v-if");if(t)e.if=t,addIfCondition(e,{exp:t,block:e});else{null!=getAndRemoveAttr(e,"v-else")&&(e.else=!0);var r=getAndRemoveAttr(e,"v-else-if");r&&(e.elseif=r)}}function processIfConditions(e,t){var r=findPrevElement(t.children);r&&r.if?addIfCondition(r,{exp:e.elseif,block:e}):warn$2("v-"+(e.elseif?'else-if="'+e.elseif+'"':"else")+" used on element <"+e.tag+"> without corresponding v-if.",e.rawAttrsMap[e.elseif?"v-else-if":"v-else"])}function findPrevElement(e){for(var t=e.length;t--;){if(1===e[t].type)return e[t];" "!==e[t].text&&warn$2('text "'+e[t].text.trim()+'" between v-if and v-else(-if) will be ignored.',e[t]),e.pop()}}function addIfCondition(e,t){e.ifConditions||(e.ifConditions=[]),e.ifConditions.push(t)}function processOnce(e){null!=getAndRemoveAttr(e,"v-once")&&(e.once=!0)}function processSlotContent(e){var t;"template"===e.tag?((t=getAndRemoveAttr(e,"scope"))&&warn$2('the "scope" attribute for scoped slots have been deprecated and replaced by "slot-scope" since 2.5. The new "slot-scope" attribute can also be used on plain elements in addition to <template> to denote scoped slots.',e.rawAttrsMap.scope,!0),e.slotScope=t||getAndRemoveAttr(e,"slot-scope")):(t=getAndRemoveAttr(e,"slot-scope"))&&(e.attrsMap["v-for"]&&warn$2("Ambiguous combined usage of slot-scope and v-for on <"+e.tag+"> (v-for takes higher priority). Use a wrapper <template> for the scoped slot to make it clearer.",e.rawAttrsMap["slot-scope"],!0),e.slotScope=t);var r=getBindingAttr(e,"slot");if(r&&(e.slotTarget='""'===r?'"default"':r,e.slotTargetDynamic=!(!e.attrsMap[":slot"]&&!e.attrsMap["v-bind:slot"]),"template"===e.tag||e.slotScope||addAttr(e,"slot",r,getRawBindingAttr(e,"slot"))),"template"===e.tag){var n=getAndRemoveAttrByRegex(e,slotRE);if(n){(e.slotTarget||e.slotScope)&&warn$2("Unexpected mixed usage of different slot syntaxes.",e),e.parent&&!maybeComponent(e.parent)&&warn$2("<template v-slot> can only appear at the root level inside the receiving the component",e);var i=getSlotName(n),a=i.name,o=i.dynamic;e.slotTarget=a,e.slotTargetDynamic=o,e.slotScope=n.value||emptySlotScopeToken}}else{var s=getAndRemoveAttrByRegex(e,slotRE);if(s){maybeComponent(e)||warn$2("v-slot can only be used on components or <template>.",s),(e.slotScope||e.slotTarget)&&warn$2("Unexpected mixed usage of different slot syntaxes.",e),e.scopedSlots&&warn$2("To avoid scope ambiguity, the default slot should also use <template> syntax when there are other named slots.",s);var l=e.scopedSlots||(e.scopedSlots={}),u=getSlotName(s),c=u.name,d=u.dynamic,h=l[c]=createASTElement("template",[],e);h.slotTarget=c,h.slotTargetDynamic=d,h.children=e.children.filter(function(e){if(!e.slotScope)return e.parent=h,!0}),h.slotScope=s.value||emptySlotScopeToken,e.children=[],e.plain=!1}}}function getSlotName(e){var t=e.name.replace(slotRE,"");return t||("#"!==e.name[0]?t="default":warn$2("v-slot shorthand syntax requires a slot name.",e)),dynamicArgRE.test(t)?{name:t.slice(1,-1),dynamic:!0}:{name:'"'+t+'"',dynamic:!1}}function processSlotOutlet(e){"slot"===e.tag&&(e.slotName=getBindingAttr(e,"name"),e.key&&warn$2("`key` does not work on <slot> because slots are abstract outlets and can possibly expand into multiple elements. Use the key on a wrapping element instead.",getRawBindingAttr(e,"key")))}function processComponent(e){var t;(t=getBindingAttr(e,"is"))&&(e.component=t),null!=getAndRemoveAttr(e,"inline-template")&&(e.inlineTemplate=!0)}function processAttrs(e){var t,r,n,i,a,o,s,l,u=e.attrsList;for(t=0,r=u.length;t<r;t++){if(n=i=u[t].name,a=u[t].value,dirRE.test(n))if(e.hasBindings=!0,(o=parseModifiers(n.replace(dirRE,"")))&&(n=n.replace(modifierRE,"")),bindRE.test(n))n=n.replace(bindRE,""),a=parseFilters(a),(l=dynamicArgRE.test(n))&&(n=n.slice(1,-1)),0===a.trim().length&&warn$2('The value for a v-bind expression cannot be empty. Found in "v-bind:'+n+'"'),o&&(o.prop&&!l&&"innerHtml"===(n=camelize(n))&&(n="innerHTML"),o.camel&&!l&&(n=camelize(n)),o.sync&&(s=genAssignmentCode(a,"$event"),l?addHandler(e,'"update:"+('+n+")",s,null,!1,warn$2,u[t],!0):(addHandler(e,"update:"+camelize(n),s,null,!1,warn$2,u[t]),hyphenate(n)!==camelize(n)&&addHandler(e,"update:"+hyphenate(n),s,null,!1,warn$2,u[t])))),o&&o.prop||!e.component&&platformMustUseProp(e.tag,e.attrsMap.type,n)?addProp(e,n,a,u[t],l):addAttr(e,n,a,u[t],l);else if(onRE.test(n))n=n.replace(onRE,""),(l=dynamicArgRE.test(n))&&(n=n.slice(1,-1)),addHandler(e,n,a,o,!1,warn$2,u[t],l);else{var c=(n=n.replace(dirRE,"")).match(argRE),d=c&&c[1];l=!1,d&&(n=n.slice(0,-(d.length+1)),dynamicArgRE.test(d)&&(d=d.slice(1,-1),l=!0)),addDirective(e,n,i,a,d,l,o,u[t]),"model"===n&&checkForAliasModel(e,a)}else parseText(a,delimiters)&&warn$2(n+'="'+a+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div id="{{ val }}">, use <div :id="val">.',u[t]),addAttr(e,n,JSON.stringify(a),u[t]),!e.component&&"muted"===n&&platformMustUseProp(e.tag,e.attrsMap.type,n)&&addProp(e,n,"true",u[t])}}function checkInFor(e){for(var t=e;t;){if(void 0!==t.for)return!0;t=t.parent}return!1}function parseModifiers(e){var t=e.match(modifierRE);if(t){var r={};return t.forEach(function(e){r[e.slice(1)]=!0}),r}}function makeAttrsMap(e){for(var t={},r=0,n=e.length;r<n;r++)!t[e[r].name]||isIE||isEdge||warn$2("duplicate attribute: "+e[r].name,e[r]),t[e[r].name]=e[r].value;return t}function isTextTag(e){return"script"===e.tag||"style"===e.tag}function isForbiddenTag(e){return"style"===e.tag||"script"===e.tag&&(!e.attrsMap.type||"text/javascript"===e.attrsMap.type)}var ieNSBug=/^xmlns:NS\d+/,ieNSPrefix=/^NS\d+:/;function guardIESVGBug(e){for(var t=[],r=0;r<e.length;r++){var n=e[r];ieNSBug.test(n.name)||(n.name=n.name.replace(ieNSPrefix,""),t.push(n))}return t}function checkForAliasModel(e,t){for(var r=e;r;)r.for&&r.alias===t&&warn$2("<"+e.tag+' v-model="'+t+'">: You are binding v-model directly to a v-for iteration alias. This will not be able to modify the v-for source array because writing to the alias is like modifying a function local variable. Consider using an array of objects and use v-model on an object property instead.',e.rawAttrsMap["v-model"]),r=r.parent}function preTransformNode(e,t){if("input"===e.tag){var r,n=e.attrsMap;if(!n["v-model"])return;if((n[":type"]||n["v-bind:type"])&&(r=getBindingAttr(e,"type")),n.type||r||!n["v-bind"]||(r="("+n["v-bind"]+").type"),r){var i=getAndRemoveAttr(e,"v-if",!0),a=i?"&&("+i+")":"",o=null!=getAndRemoveAttr(e,"v-else",!0),s=getAndRemoveAttr(e,"v-else-if",!0),l=cloneASTElement(e);processFor(l),addRawAttr(l,"type","checkbox"),processElement(l,t),l.processed=!0,l.if="("+r+")==='checkbox'"+a,addIfCondition(l,{exp:l.if,block:l});var u=cloneASTElement(e);getAndRemoveAttr(u,"v-for",!0),addRawAttr(u,"type","radio"),processElement(u,t),addIfCondition(l,{exp:"("+r+")==='radio'"+a,block:u});var c=cloneASTElement(e);return getAndRemoveAttr(c,"v-for",!0),addRawAttr(c,":type",r),processElement(c,t),addIfCondition(l,{exp:i,block:c}),o?l.else=!0:s&&(l.elseif=s),l}}}function cloneASTElement(e){return createASTElement(e.tag,e.attrsList.slice(),e.parent)}var model$1={preTransformNode:preTransformNode},modules$1=[klass$1,style$1,model$1];function text(e,t){t.value&&addProp(e,"textContent","_s("+t.value+")",t)}function html(e,t){t.value&&addProp(e,"innerHTML","_s("+t.value+")",t)}var isStaticKey,isPlatformReservedTag,directives$1={model:model,text:text,html:html},baseOptions={expectHTML:!0,modules:modules$1,directives:directives$1,isPreTag:isPreTag,isUnaryTag:isUnaryTag,mustUseProp:mustUseProp,canBeLeftOpenTag:canBeLeftOpenTag,isReservedTag:isReservedTag,getTagNamespace:getTagNamespace,staticKeys:genStaticKeys(modules$1)},genStaticKeysCached=cached(genStaticKeys$1);function optimize(e,t){e&&(isStaticKey=genStaticKeysCached(t.staticKeys||""),isPlatformReservedTag=t.isReservedTag||no,markStatic$1(e),markStaticRoots(e,!1))}function genStaticKeys$1(e){return makeMap("type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap"+(e?","+e:""))}function markStatic$1(e){if(e.static=isStatic(e),1===e.type){if(!isPlatformReservedTag(e.tag)&&"slot"!==e.tag&&null==e.attrsMap["inline-template"])return;for(var t=0,r=e.children.length;t<r;t++){var n=e.children[t];markStatic$1(n),n.static||(e.static=!1)}if(e.ifConditions)for(var i=1,a=e.ifConditions.length;i<a;i++){var o=e.ifConditions[i].block;markStatic$1(o),o.static||(e.static=!1)}}}function markStaticRoots(e,t){if(1===e.type){if((e.static||e.once)&&(e.staticInFor=t),e.static&&e.children.length&&(1!==e.children.length||3!==e.children[0].type))return void(e.staticRoot=!0);if(e.staticRoot=!1,e.children)for(var r=0,n=e.children.length;r<n;r++)markStaticRoots(e.children[r],t||!!e.for);if(e.ifConditions)for(var i=1,a=e.ifConditions.length;i<a;i++)markStaticRoots(e.ifConditions[i].block,t)}}function isStatic(e){return 2!==e.type&&(3===e.type||!(!e.pre&&(e.hasBindings||e.if||e.for||isBuiltInTag(e.tag)||!isPlatformReservedTag(e.tag)||isDirectChildOfTemplateFor(e)||!Object.keys(e).every(isStaticKey))))}function isDirectChildOfTemplateFor(e){for(;e.parent;){if("template"!==(e=e.parent).tag)return!1;if(e.for)return!0}return!1}var fnExpRE=/^([\w$_]+|\([^)]*?\))\s*=>|^function\s*\(/,fnInvokeRE=/\([^)]*?\);*$/,simplePathRE=/^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/,keyCodes={esc:27,tab:9,enter:13,space:32,up:38,left:37,right:39,down:40,delete:[8,46]},keyNames={esc:["Esc","Escape"],tab:"Tab",enter:"Enter",space:[" ","Spacebar"],up:["Up","ArrowUp"],left:["Left","ArrowLeft"],right:["Right","ArrowRight"],down:["Down","ArrowDown"],delete:["Backspace","Delete","Del"]},genGuard=function(e){return"if("+e+")return null;"},modifierCode={stop:"$event.stopPropagation();",prevent:"$event.preventDefault();",self:genGuard("$event.target !== $event.currentTarget"),ctrl:genGuard("!$event.ctrlKey"),shift:genGuard("!$event.shiftKey"),alt:genGuard("!$event.altKey"),meta:genGuard("!$event.metaKey"),left:genGuard("'button' in $event && $event.button !== 0"),middle:genGuard("'button' in $event && $event.button !== 1"),right:genGuard("'button' in $event && $event.button !== 2")};function genHandlers(e,t){var r=t?"nativeOn:":"on:",n="",i="";for(var a in e){var o=genHandler(e[a]);e[a]&&e[a].dynamic?i+=a+","+o+",":n+='"'+a+'":'+o+","}return n="{"+n.slice(0,-1)+"}",i?r+"_d("+n+",["+i.slice(0,-1)+"])":r+n}function genHandler(e){if(!e)return"function(){}";if(Array.isArray(e))return"["+e.map(function(e){return genHandler(e)}).join(",")+"]";var t=simplePathRE.test(e.value),r=fnExpRE.test(e.value),n=simplePathRE.test(e.value.replace(fnInvokeRE,""));if(e.modifiers){var i="",a="",o=[];for(var s in e.modifiers)if(modifierCode[s])a+=modifierCode[s],keyCodes[s]&&o.push(s);else if("exact"===s){var l=e.modifiers;a+=genGuard(["ctrl","shift","alt","meta"].filter(function(e){return!l[e]}).map(function(e){return"$event."+e+"Key"}).join("||"))}else o.push(s);return o.length&&(i+=genKeyFilter(o)),a&&(i+=a),"function($event){"+i+(t?"return "+e.value+"($event)":r?"return ("+e.value+")($event)":n?"return "+e.value:e.value)+"}"}return t||r?e.value:"function($event){"+(n?"return "+e.value:e.value)+"}"}function genKeyFilter(e){return"if(!$event.type.indexOf('key')&&"+e.map(genFilterCode).join("&&")+")return null;"}function genFilterCode(e){var t=parseInt(e,10);if(t)return"$event.keyCode!=="+t;var r=keyCodes[e],n=keyNames[e];return"_k($event.keyCode,"+JSON.stringify(e)+","+JSON.stringify(r)+",$event.key,"+JSON.stringify(n)+")"}function on(e,t){t.modifiers&&warn("v-on without argument does not support modifiers."),e.wrapListeners=function(e){return"_g("+e+","+t.value+")"}}function bind$1(e,t){e.wrapData=function(r){return"_b("+r+",'"+e.tag+"',"+t.value+","+(t.modifiers&&t.modifiers.prop?"true":"false")+(t.modifiers&&t.modifiers.sync?",true":"")+")"}}var baseDirectives={on:on,bind:bind$1,cloak:noop$1},CodegenState=function(e){this.options=e,this.warn=e.warn||baseWarn,this.transforms=pluckModuleFunction(e.modules,"transformCode"),this.dataGenFns=pluckModuleFunction(e.modules,"genData"),this.directives=extend(extend({},baseDirectives),e.directives);var t=e.isReservedTag||no;this.maybeComponent=function(e){return!!e.component||!t(e.tag)},this.onceId=0,this.staticRenderFns=[],this.pre=!1};function generate(e,t){var r=new CodegenState(t);return{render:"with(this){return "+(e?genElement(e,r):'_c("div")')+"}",staticRenderFns:r.staticRenderFns}}function genElement(e,t){if(e.parent&&(e.pre=e.pre||e.parent.pre),e.staticRoot&&!e.staticProcessed)return genStatic(e,t);if(e.once&&!e.onceProcessed)return genOnce(e,t);if(e.for&&!e.forProcessed)return genFor(e,t);if(e.if&&!e.ifProcessed)return genIf(e,t);if("template"!==e.tag||e.slotTarget||t.pre){if("slot"===e.tag)return genSlot(e,t);var r;if(e.component)r=genComponent(e.component,e,t);else{var n;(!e.plain||e.pre&&t.maybeComponent(e))&&(n=genData$2(e,t));var i=e.inlineTemplate?null:genChildren(e,t,!0);r="_c('"+e.tag+"'"+(n?","+n:"")+(i?","+i:"")+")"}for(var a=0;a<t.transforms.length;a++)r=t.transforms[a](e,r);return r}return genChildren(e,t)||"void 0"}function genStatic(e,t){e.staticProcessed=!0;var r=t.pre;return e.pre&&(t.pre=e.pre),t.staticRenderFns.push("with(this){return "+genElement(e,t)+"}"),t.pre=r,"_m("+(t.staticRenderFns.length-1)+(e.staticInFor?",true":"")+")"}function genOnce(e,t){if(e.onceProcessed=!0,e.if&&!e.ifProcessed)return genIf(e,t);if(e.staticInFor){for(var r="",n=e.parent;n;){if(n.for){r=n.key;break}n=n.parent}return r?"_o("+genElement(e,t)+","+t.onceId+++","+r+")":(t.warn("v-once can only be used inside v-for that is keyed. ",e.rawAttrsMap["v-once"]),genElement(e,t))}return genStatic(e,t)}function genIf(e,t,r,n){return e.ifProcessed=!0,genIfConditions(e.ifConditions.slice(),t,r,n)}function genIfConditions(e,t,r,n){if(!e.length)return n||"_e()";var i=e.shift();return i.exp?"("+i.exp+")?"+a(i.block)+":"+genIfConditions(e,t,r,n):""+a(i.block);function a(e){return r?r(e,t):e.once?genOnce(e,t):genElement(e,t)}}function genFor(e,t,r,n){var i=e.for,a=e.alias,o=e.iterator1?","+e.iterator1:"",s=e.iterator2?","+e.iterator2:"";return t.maybeComponent(e)&&"slot"!==e.tag&&"template"!==e.tag&&!e.key&&t.warn("<"+e.tag+' v-for="'+a+" in "+i+'">: component lists rendered with v-for should have explicit keys. See https://vuejs.org/guide/list.html#key for more info.',e.rawAttrsMap["v-for"],!0),e.forProcessed=!0,(n||"_l")+"(("+i+"),function("+a+o+s+"){return "+(r||genElement)(e,t)+"})"}function genData$2(e,t){var r="{",n=genDirectives(e,t);n&&(r+=n+","),e.key&&(r+="key:"+e.key+","),e.ref&&(r+="ref:"+e.ref+","),e.refInFor&&(r+="refInFor:true,"),e.pre&&(r+="pre:true,"),e.component&&(r+='tag:"'+e.tag+'",');for(var i=0;i<t.dataGenFns.length;i++)r+=t.dataGenFns[i](e);if(e.attrs&&(r+="attrs:"+genProps(e.attrs)+","),e.props&&(r+="domProps:"+genProps(e.props)+","),e.events&&(r+=genHandlers(e.events,!1)+","),e.nativeEvents&&(r+=genHandlers(e.nativeEvents,!0)+","),e.slotTarget&&!e.slotScope&&(r+="slot:"+e.slotTarget+","),e.scopedSlots&&(r+=genScopedSlots(e,e.scopedSlots,t)+","),e.model&&(r+="model:{value:"+e.model.value+",callback:"+e.model.callback+",expression:"+e.model.expression+"},"),e.inlineTemplate){var a=genInlineTemplate(e,t);a&&(r+=a+",")}return r=r.replace(/,$/,"")+"}",e.dynamicAttrs&&(r="_b("+r+',"'+e.tag+'",'+genProps(e.dynamicAttrs)+")"),e.wrapData&&(r=e.wrapData(r)),e.wrapListeners&&(r=e.wrapListeners(r)),r}function genDirectives(e,t){var r=e.directives;if(r){var n,i,a,o,s="directives:[",l=!1;for(n=0,i=r.length;n<i;n++){a=r[n],o=!0;var u=t.directives[a.name];u&&(o=!!u(e,a,t.warn)),o&&(l=!0,s+='{name:"'+a.name+'",rawName:"'+a.rawName+'"'+(a.value?",value:("+a.value+"),expression:"+JSON.stringify(a.value):"")+(a.arg?",arg:"+(a.isDynamicArg?a.arg:'"'+a.arg+'"'):"")+(a.modifiers?",modifiers:"+JSON.stringify(a.modifiers):"")+"},")}return l?s.slice(0,-1)+"]":void 0}}function genInlineTemplate(e,t){var r=e.children[0];if(1===e.children.length&&1===r.type||t.warn("Inline-template components must have exactly one child element.",{start:e.start}),r&&1===r.type){var n=generate(r,t.options);return"inlineTemplate:{render:function(){"+n.render+"},staticRenderFns:["+n.staticRenderFns.map(function(e){return"function(){"+e+"}"}).join(",")+"]}"}}function genScopedSlots(e,t,r){var n=Object.keys(t).some(function(e){var r=t[e];return r.slotTargetDynamic||r.if||r.for||containsSlotChild(r)});if(!n)for(var i=e.parent;i;){if(i.slotScope&&i.slotScope!==emptySlotScopeToken){n=!0;break}i=i.parent}return"scopedSlots:_u(["+Object.keys(t).map(function(e){return genScopedSlot(t[e],r)}).join(",")+"]"+(n?",true":"")+")"}function containsSlotChild(e){return 1===e.type&&("slot"===e.tag||e.children.some(containsSlotChild))}function genScopedSlot(e,t){var r=e.attrsMap["slot-scope"];if(e.if&&!e.ifProcessed&&!r)return genIf(e,t,genScopedSlot,"null");if(e.for&&!e.forProcessed)return genFor(e,t,genScopedSlot);var n=e.slotScope===emptySlotScopeToken?"":String(e.slotScope),i="function("+n+"){return "+("template"===e.tag?e.if&&r?"("+e.if+")?"+(genChildren(e,t)||"undefined")+":undefined":genChildren(e,t)||"undefined":genElement(e,t))+"}",a=n?"":",proxy:true";return"{key:"+(e.slotTarget||'"default"')+",fn:"+i+a+"}"}function genChildren(e,t,r,n,i){var a=e.children;if(a.length){var o=a[0];if(1===a.length&&o.for&&"template"!==o.tag&&"slot"!==o.tag){var s=r?t.maybeComponent(o)?",1":",0":"";return""+(n||genElement)(o,t)+s}var l=r?getNormalizationType(a,t.maybeComponent):0,u=i||genNode;return"["+a.map(function(e){return u(e,t)}).join(",")+"]"+(l?","+l:"")}}function getNormalizationType(e,t){for(var r=0,n=0;n<e.length;n++){var i=e[n];if(1===i.type){if(needsNormalization(i)||i.ifConditions&&i.ifConditions.some(function(e){return needsNormalization(e.block)})){r=2;break}(t(i)||i.ifConditions&&i.ifConditions.some(function(e){return t(e.block)}))&&(r=1)}}return r}function needsNormalization(e){return void 0!==e.for||"template"===e.tag||"slot"===e.tag}function genNode(e,t){return 1===e.type?genElement(e,t):3===e.type&&e.isComment?genComment(e):genText(e)}function genText(e){return"_v("+(2===e.type?e.expression:transformSpecialNewlines(JSON.stringify(e.text)))+")"}function genComment(e){return"_e("+JSON.stringify(e.text)+")"}function genSlot(e,t){var r=e.slotName||'"default"',n=genChildren(e,t),i="_t("+r+(n?","+n:""),a=e.attrs||e.dynamicAttrs?genProps((e.attrs||[]).concat(e.dynamicAttrs||[]).map(function(e){return{name:camelize(e.name),value:e.value,dynamic:e.dynamic}})):null,o=e.attrsMap["v-bind"];return!a&&!o||n||(i+=",null"),a&&(i+=","+a),o&&(i+=(a?"":",null")+","+o),i+")"}function genComponent(e,t,r){var n=t.inlineTemplate?null:genChildren(t,r,!0);return"_c("+e+","+genData$2(t,r)+(n?","+n:"")+")"}function genProps(e){for(var t="",r="",n=0;n<e.length;n++){var i=e[n],a=transformSpecialNewlines(i.value);i.dynamic?r+=i.name+","+a+",":t+='"'+i.name+'":'+a+","}return t="{"+t.slice(0,-1)+"}",r?"_d("+t+",["+r.slice(0,-1)+"])":t}function transformSpecialNewlines(e){return e.replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}var prohibitedKeywordRE=new RegExp("\\b"+"do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments".split(",").join("\\b|\\b")+"\\b"),unaryOperatorsRE=new RegExp("\\b"+"delete,typeof,void".split(",").join("\\s*\\([^\\)]*\\)|\\b")+"\\s*\\([^\\)]*\\)"),stripStringRE=/'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;function detectErrors(e,t){e&&checkNode(e,t)}function checkNode(e,t){if(1===e.type){for(var r in e.attrsMap)if(dirRE.test(r)){var n=e.attrsMap[r];if(n){var i=e.rawAttrsMap[r];"v-for"===r?checkFor(e,'v-for="'+n+'"',t,i):onRE.test(r)?checkEvent(n,r+'="'+n+'"',t,i):checkExpression(n,r+'="'+n+'"',t,i)}}if(e.children)for(var a=0;a<e.children.length;a++)checkNode(e.children[a],t)}else 2===e.type&&checkExpression(e.expression,e.text,t,e)}function checkEvent(e,t,r,n){var i=e.replace(stripStringRE,""),a=i.match(unaryOperatorsRE);a&&"$"!==i.charAt(a.index-1)&&r('avoid using JavaScript unary operator as property name: "'+a[0]+'" in expression '+t.trim(),n),checkExpression(e,t,r,n)}function checkFor(e,t,r,n){checkExpression(e.for||"",t,r,n),checkIdentifier(e.alias,"v-for alias",t,r,n),checkIdentifier(e.iterator1,"v-for iterator",t,r,n),checkIdentifier(e.iterator2,"v-for iterator",t,r,n)}function checkIdentifier(e,t,r,n,i){if("string"==typeof e)try{new Function("var "+e+"=_")}catch(a){n("invalid "+t+' "'+e+'" in expression: '+r.trim(),i)}}function checkExpression(e,t,r,n){try{new Function("return "+e)}catch(a){var i=e.replace(stripStringRE,"").match(prohibitedKeywordRE);r(i?'avoid using JavaScript keyword as property name: "'+i[0]+'"\n  Raw expression: '+t.trim():"invalid expression: "+a.message+" in\n\n    "+e+"\n\n  Raw expression: "+t.trim()+"\n",n)}}var range=2;function generateCodeFrame(e,t,r){void 0===t&&(t=0),void 0===r&&(r=e.length);for(var n=e.split(/\r?\n/),i=0,a=[],o=0;o<n.length;o++)if((i+=n[o].length+1)>=t){for(var s=o-range;s<=o+range||r>i;s++)if(!(s<0||s>=n.length)){a.push(""+(s+1)+repeat(" ",3-String(s+1).length)+"|  "+n[s]);var l=n[s].length;if(s===o){var u=t-(i-l)+1,c=r>i?l-u:r-t;a.push("   |  "+repeat(" ",u)+repeat("^",c))}else if(s>o){if(r>i){var d=Math.min(r-i,l);a.push("   |  "+repeat("^",d))}i+=l+1}}break}return a.join("\n")}function repeat(e,t){for(var r="";1&t&&(r+=e),!((t>>>=1)<=0);)e+=e;return r}function createFunction(e,t){try{return new Function(e)}catch(r){return t.push({err:r,code:e}),noop$1}}function createCompileToFunctionFn(e){var t=Object.create(null);return function(r,n,i){var a=(n=extend({},n)).warn||warn;delete n.warn;try{new Function("return 1")}catch(e){e.toString().match(/unsafe-eval|CSP/)&&a("It seems you are using the standalone build of Vue.js in an environment with Content Security Policy that prohibits unsafe-eval. The template compiler cannot work in this environment. Consider relaxing the policy to allow unsafe-eval or pre-compiling your templates into render functions.")}var o=n.delimiters?String(n.delimiters)+r:r;if(t[o])return t[o];var s=e(r,n);s.errors&&s.errors.length&&(n.outputSourceRange?s.errors.forEach(function(e){a("Error compiling template:\n\n"+e.msg+"\n\n"+generateCodeFrame(r,e.start,e.end),i)}):a("Error compiling template:\n\n"+r+"\n\n"+s.errors.map(function(e){return"- "+e}).join("\n")+"\n",i)),s.tips&&s.tips.length&&(n.outputSourceRange?s.tips.forEach(function(e){return tip(e.msg,i)}):s.tips.forEach(function(e){return tip(e,i)}));var l={},u=[];return l.render=createFunction(s.render,u),l.staticRenderFns=s.staticRenderFns.map(function(e){return createFunction(e,u)}),s.errors&&s.errors.length||!u.length||a("Failed to generate render function:\n\n"+u.map(function(e){var t=e.err,r=e.code;return t.toString()+" in\n\n"+r+"\n"}).join("\n"),i),t[o]=l}}function createCompilerCreator(e){return function(t){function r(r,n){var i=Object.create(t),a=[],o=[],s=function(e,t,r){(r?o:a).push(e)};if(n){if(n.outputSourceRange){var l=r.match(/^\s*/)[0].length;s=function(e,t,r){var n={msg:e};t&&(null!=t.start&&(n.start=t.start+l),null!=t.end&&(n.end=t.end+l)),(r?o:a).push(n)}}for(var u in n.modules&&(i.modules=(t.modules||[]).concat(n.modules)),n.directives&&(i.directives=extend(Object.create(t.directives||null),n.directives)),n)"modules"!==u&&"directives"!==u&&(i[u]=n[u])}i.warn=s;var c=e(r.trim(),i);return detectErrors(c.ast,s),c.errors=a,c.tips=o,c}return{compile:r,compileToFunctions:createCompileToFunctionFn(r)}}}var div,createCompiler=createCompilerCreator(function(e,t){var r=parse(e.trim(),t);!1!==t.optimize&&optimize(r,t);var n=generate(r,t);return{ast:r,render:n.render,staticRenderFns:n.staticRenderFns}}),ref$1=createCompiler(baseOptions),compileToFunctions=ref$1.compileToFunctions;function getShouldDecode(e){return(div=div||document.createElement("div")).innerHTML=e?'<a href="\n"/>':'<div a="\n"/>',div.innerHTML.indexOf("&#10;")>0}var shouldDecodeNewlines=!!inBrowser&&getShouldDecode(!1),shouldDecodeNewlinesForHref=!!inBrowser&&getShouldDecode(!0),idToTemplate=cached(function(e){var t=query(e);return t&&t.innerHTML}),mount=Vue.prototype.$mount;function getOuterHTML(e){if(e.outerHTML)return e.outerHTML;var t=document.createElement("div");return t.appendChild(e.cloneNode(!0)),t.innerHTML}Vue.prototype.$mount=function(e,t){if((e=e&&query(e))===document.body||e===document.documentElement)return warn("Do not mount Vue to <html> or <body> - mount to normal elements instead."),this;var r=this.$options;if(!r.render){var n=r.template;if(n)if("string"==typeof n)"#"===n.charAt(0)&&((n=idToTemplate(n))||warn("Template element not found or is empty: "+r.template,this));else{if(!n.nodeType)return warn("invalid template option:"+n,this),this;n=n.innerHTML}else e&&(n=getOuterHTML(e));if(n){config.performance&&mark&&mark("compile");var i=compileToFunctions(n,{outputSourceRange:!0,shouldDecodeNewlines:shouldDecodeNewlines,shouldDecodeNewlinesForHref:shouldDecodeNewlinesForHref,delimiters:r.delimiters,comments:r.comments},this),a=i.render,o=i.staticRenderFns;r.render=a,r.staticRenderFns=o,config.performance&&mark&&(mark("compile end"),measure("vue "+this._name+" compile","compile","compile end"))}}return mount.call(this,e,t)},Vue.compile=compileToFunctions;var script={props:["options","value"],data:function(){return{selected:null}},mounted:function(){this.selected=this.value},watch:{value:function(e){this.selected=e}}};function normalizeComponent(e,t,r,n,i,a,o,s,l,u){"boolean"!=typeof o&&(l=s,s=o,o=!1);var c,d="function"==typeof r?r.options:r;if(e&&e.render&&(d.render=e.render,d.staticRenderFns=e.staticRenderFns,d._compiled=!0,i&&(d.functional=!0)),n&&(d._scopeId=n),a?(c=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),t&&t.call(this,l(e)),e&&e._registeredComponents&&e._registeredComponents.add(a)},d._ssrRegister=c):t&&(c=o?function(){t.call(this,u(this.$root.$options.shadowRoot))}:function(e){t.call(this,s(e))}),c)if(d.functional){var h=d.render;d.render=function(e,t){return c.call(t),h(e,t)}}else{var f=d.beforeCreate;d.beforeCreate=f?[].concat(f,c):[c]}return r}var normalizeComponent_1=normalizeComponent,isOldIE="undefined"!=typeof navigator&&/msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());function createInjector(e){return function(e,t){return addStyle(e,t)}}var HEAD=document.head||document.getElementsByTagName("head")[0],styles={};function addStyle(e,t){var r=isOldIE?t.media||"default":e,n=styles[r]||(styles[r]={ids:new Set,styles:[]});if(!n.ids.has(e)){n.ids.add(e);var i=t.source;if(t.map&&(i+="\n/*# sourceURL="+t.map.sources[0]+" */",i+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(t.map))))+" */"),n.element||(n.element=document.createElement("style"),n.element.type="text/css",t.media&&n.element.setAttribute("media",t.media),HEAD.appendChild(n.element)),"styleSheet"in n.element)n.styles.push(i),n.element.styleSheet.cssText=n.styles.filter(Boolean).join("\n");else{var a=n.ids.size-1,o=document.createTextNode(i),s=n.element.childNodes;s[a]&&n.element.removeChild(s[a]),s.length?n.element.insertBefore(o,s[a]):n.element.appendChild(o)}}}var browser=createInjector,__vue_script__=script,__vue_render__=function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",[r("select",{directives:[{name:"model",rawName:"v-model",value:e.selected,expression:"selected"}],staticClass:"select",on:{input:function(t){e.$emit("input",t.target.value)},change:function(t){var r=Array.prototype.filter.call(t.target.options,function(e){return e.selected}).map(function(e){return"_value"in e?e._value:e.value});e.selected=t.target.multiple?r:r[0]}}},e._l(e.options,function(t){return r("option",{key:t.value,domProps:{value:t.value}},[e._v("\n      "+e._s(t.text)+"\n    ")])}),0)])},__vue_staticRenderFns__=[];__vue_render__._withStripped=!0;var __vue_inject_styles__=function(e){e&&e("data-v-afd20650_0",{source:"\n\n\n\n\n\n\n\n\n\n",map:{version:3,sources:[],names:[],mappings:"",file:"select.vue"},media:void 0})},__vue_scope_id__=void 0,__vue_module_identifier__=void 0,__vue_is_functional_template__=!1,SelectComponent=normalizeComponent_1({render:__vue_render__,staticRenderFns:__vue_staticRenderFns__},__vue_inject_styles__,__vue_script__,__vue_scope_id__,__vue_is_functional_template__,__vue_module_identifier__,browser,void 0),SelectData=[{text:"All Boroughs",value:"all"},{text:"Brooklyn",value:"brooklyn"},{text:"Queens",value:"queens"},{text:"Manhattan",value:"manhattan"},{text:"Staten Island",value:"staten island"},{text:"The Bronx",value:"bronx"}],Select=function(e,t){void 0===e&&(e={}),void 0===t&&(t={}),this.data=t,this.settings=e,this.init()};function dataHandler(e,t){if(t){var r=this.$data._chart,n=e.datasets.map(function(e){return e.label}),i=t.datasets.map(function(e){return e.label}),a=JSON.stringify(i);JSON.stringify(n)===a&&t.datasets.length===e.datasets.length?(e.datasets.forEach(function(e,n){var i=Object.keys(t.datasets[n]),a=Object.keys(e),o=i.filter(function(e){return"_meta"!==e&&-1===a.indexOf(e)});for(var s in o.forEach(function(e){delete r.data.datasets[n][e]}),e)e.hasOwnProperty(s)&&(r.data.datasets[n][s]=e[s])}),e.hasOwnProperty("labels")&&(r.data.labels=e.labels,this.$emit("labels:update")),e.hasOwnProperty("xLabels")&&(r.data.xLabels=e.xLabels,this.$emit("xlabels:update")),e.hasOwnProperty("yLabels")&&(r.data.yLabels=e.yLabels,this.$emit("ylabels:update")),r.update(),this.$emit("chart:update")):(r&&(r.destroy(),this.$emit("chart:destroy")),this.renderChart(this.chartData,this.options),this.$emit("chart:render"))}else this.$data._chart&&(this.$data._chart.destroy(),this.$emit("chart:destroy")),this.renderChart(this.chartData,this.options),this.$emit("chart:render")}Select.prototype.init=function(){Vue.component("nyco-select",SelectComponent),new Vue({el:'[data-js="app"]',delimiters:["v{","}"],data:function(){return{options:Select.data,selected:"all"}},methods:{}})},Select.prototype._constants=function(e){console.dir(e)},Select.data=SelectData;var reactiveData={data:function(){return{chartData:null}},watch:{chartData:dataHandler}},reactiveProp={props:{chartData:{required:!0}},watch:{chartData:dataHandler}},mixins={reactiveData:reactiveData,reactiveProp:reactiveProp},helpers={noop:function(){},uid:function(){var e=0;return function(){return e++}}(),isNullOrUndef:function(e){return null===e||void 0===e},isArray:Array.isArray?Array.isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)},isObject:function(e){return null!==e&&"[object Object]"===Object.prototype.toString.call(e)},valueOrDefault:function(e,t){return void 0===e?t:e},valueAtIndexOrDefault:function(e,t,r){return helpers.valueOrDefault(helpers.isArray(e)?e[t]:e,r)},callback:function(e,t,r){if(e&&"function"==typeof e.call)return e.apply(r,t)},each:function(e,t,r,n){var i,a,o;if(helpers.isArray(e))if(a=e.length,n)for(i=a-1;i>=0;i--)t.call(r,e[i],i);else for(i=0;i<a;i++)t.call(r,e[i],i);else if(helpers.isObject(e))for(a=(o=Object.keys(e)).length,i=0;i<a;i++)t.call(r,e[o[i]],o[i])},arrayEquals:function(e,t){var r,n,i,a;if(!e||!t||e.length!==t.length)return!1;for(r=0,n=e.length;r<n;++r)if(i=e[r],a=t[r],i instanceof Array&&a instanceof Array){if(!helpers.arrayEquals(i,a))return!1}else if(i!==a)return!1;return!0},clone:function(e){if(helpers.isArray(e))return e.map(helpers.clone);if(helpers.isObject(e)){for(var t={},r=Object.keys(e),n=r.length,i=0;i<n;++i)t[r[i]]=helpers.clone(e[r[i]]);return t}return e},_merger:function(e,t,r,n){var i=t[e],a=r[e];helpers.isObject(i)&&helpers.isObject(a)?helpers.merge(i,a,n):t[e]=helpers.clone(a)},_mergerIf:function(e,t,r){var n=t[e],i=r[e];helpers.isObject(n)&&helpers.isObject(i)?helpers.mergeIf(n,i):t.hasOwnProperty(e)||(t[e]=helpers.clone(i))},merge:function(e,t,r){var n,i,a,o,s,l=helpers.isArray(t)?t:[t],u=l.length;if(!helpers.isObject(e))return e;for(n=(r=r||{}).merger||helpers._merger,i=0;i<u;++i)if(t=l[i],helpers.isObject(t))for(s=0,o=(a=Object.keys(t)).length;s<o;++s)n(a[s],e,t,r);return e},mergeIf:function(e,t){return helpers.merge(e,t,{merger:helpers._mergerIf})},extend:function(e){for(var t=arguments,r=function(t,r){e[r]=t},n=1,i=arguments.length;n<i;++n)helpers.each(t[n],r);return e},inherits:function(e){var t=this,r=e&&e.hasOwnProperty("constructor")?e.constructor:function(){return t.apply(this,arguments)},n=function(){this.constructor=r};return n.prototype=t.prototype,r.prototype=new n,r.extend=helpers.inherits,e&&helpers.extend(r.prototype,e),r.__super__=t.prototype,r}},helpers_core=helpers;helpers.callCallback=helpers.callback,helpers.indexOf=function(e,t,r){return Array.prototype.indexOf.call(e,t,r)},helpers.getValueOrDefault=helpers.valueOrDefault,helpers.getValueAtIndexOrDefault=helpers.valueAtIndexOrDefault;var effects={linear:function(e){return e},easeInQuad:function(e){return e*e},easeOutQuad:function(e){return-e*(e-2)},easeInOutQuad:function(e){return(e/=.5)<1?.5*e*e:-.5*(--e*(e-2)-1)},easeInCubic:function(e){return e*e*e},easeOutCubic:function(e){return(e-=1)*e*e+1},easeInOutCubic:function(e){return(e/=.5)<1?.5*e*e*e:.5*((e-=2)*e*e+2)},easeInQuart:function(e){return e*e*e*e},easeOutQuart:function(e){return-((e-=1)*e*e*e-1)},easeInOutQuart:function(e){return(e/=.5)<1?.5*e*e*e*e:-.5*((e-=2)*e*e*e-2)},easeInQuint:function(e){return e*e*e*e*e},easeOutQuint:function(e){return(e-=1)*e*e*e*e+1},easeInOutQuint:function(e){return(e/=.5)<1?.5*e*e*e*e*e:.5*((e-=2)*e*e*e*e+2)},easeInSine:function(e){return 1-Math.cos(e*(Math.PI/2))},easeOutSine:function(e){return Math.sin(e*(Math.PI/2))},easeInOutSine:function(e){return-.5*(Math.cos(Math.PI*e)-1)},easeInExpo:function(e){return 0===e?0:Math.pow(2,10*(e-1))},easeOutExpo:function(e){return 1===e?1:1-Math.pow(2,-10*e)},easeInOutExpo:function(e){return 0===e?0:1===e?1:(e/=.5)<1?.5*Math.pow(2,10*(e-1)):.5*(2-Math.pow(2,-10*--e))},easeInCirc:function(e){return e>=1?e:-(Math.sqrt(1-e*e)-1)},easeOutCirc:function(e){return Math.sqrt(1-(e-=1)*e)},easeInOutCirc:function(e){return(e/=.5)<1?-.5*(Math.sqrt(1-e*e)-1):.5*(Math.sqrt(1-(e-=2)*e)+1)},easeInElastic:function(e){var t=1.70158,r=0,n=1;return 0===e?0:1===e?1:(r||(r=.3),n<1?(n=1,t=r/4):t=r/(2*Math.PI)*Math.asin(1/n),-n*Math.pow(2,10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/r))},easeOutElastic:function(e){var t=1.70158,r=0,n=1;return 0===e?0:1===e?1:(r||(r=.3),n<1?(n=1,t=r/4):t=r/(2*Math.PI)*Math.asin(1/n),n*Math.pow(2,-10*e)*Math.sin((e-t)*(2*Math.PI)/r)+1)},easeInOutElastic:function(e){var t=1.70158,r=0,n=1;return 0===e?0:2==(e/=.5)?1:(r||(r=.45),n<1?(n=1,t=r/4):t=r/(2*Math.PI)*Math.asin(1/n),e<1?n*Math.pow(2,10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/r)*-.5:n*Math.pow(2,-10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/r)*.5+1)},easeInBack:function(e){var t=1.70158;return e*e*((t+1)*e-t)},easeOutBack:function(e){var t=1.70158;return(e-=1)*e*((t+1)*e+t)+1},easeInOutBack:function(e){var t=1.70158;return(e/=.5)<1?e*e*((1+(t*=1.525))*e-t)*.5:.5*((e-=2)*e*((1+(t*=1.525))*e+t)+2)},easeInBounce:function(e){return 1-effects.easeOutBounce(1-e)},easeOutBounce:function(e){return e<1/2.75?7.5625*e*e:e<2/2.75?7.5625*(e-=1.5/2.75)*e+.75:e<2.5/2.75?7.5625*(e-=2.25/2.75)*e+.9375:7.5625*(e-=2.625/2.75)*e+.984375},easeInOutBounce:function(e){return e<.5?.5*effects.easeInBounce(2*e):.5*effects.easeOutBounce(2*e-1)+.5}},helpers_easing={effects:effects};helpers_core.easingEffects=effects;var commonjsGlobal="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function commonjsRequire(){throw new Error("Dynamic requires are not currently supported by rollup-plugin-commonjs")}function createCommonjsModule(e,t){return e(t={exports:{}},t.exports),t.exports}var helpers_canvas=createCommonjsModule(function(e){var t=e.exports={clear:function(e){e.ctx.clearRect(0,0,e.width,e.height)},roundedRect:function(e,t,r,n,i,a){if(a){var o=Math.min(a,i/2-1e-7,n/2-1e-7);e.moveTo(t+o,r),e.lineTo(t+n-o,r),e.arcTo(t+n,r,t+n,r+o,o),e.lineTo(t+n,r+i-o),e.arcTo(t+n,r+i,t+n-o,r+i,o),e.lineTo(t+o,r+i),e.arcTo(t,r+i,t,r+i-o,o),e.lineTo(t,r+o),e.arcTo(t,r,t+o,r,o),e.closePath(),e.moveTo(t,r)}else e.rect(t,r,n,i)},drawPoint:function(e,t,r,n,i,a){var o,s,l,u,c,d;if(a=a||0,!t||"object"!==(void 0===t?"undefined":_typeof(t))||"[object HTMLImageElement]"!==(o=t.toString())&&"[object HTMLCanvasElement]"!==o){if(!(isNaN(r)||r<=0)){switch(e.save(),e.translate(n,i),e.rotate(a*Math.PI/180),e.beginPath(),t){default:e.arc(0,0,r,0,2*Math.PI),e.closePath();break;case"triangle":c=(s=3*r/Math.sqrt(3))*Math.sqrt(3)/2,e.moveTo(-s/2,c/3),e.lineTo(s/2,c/3),e.lineTo(0,-2*c/3),e.closePath();break;case"rect":d=1/Math.SQRT2*r,e.rect(-d,-d,2*d,2*d);break;case"rectRounded":var h=r/Math.SQRT2,f=-h,p=-h,g=Math.SQRT2*r;this.roundedRect(e,f,p,g,g,.425*r);break;case"rectRot":d=1/Math.SQRT2*r,e.moveTo(-d,0),e.lineTo(0,d),e.lineTo(d,0),e.lineTo(0,-d),e.closePath();break;case"cross":e.moveTo(0,r),e.lineTo(0,-r),e.moveTo(-r,0),e.lineTo(r,0);break;case"crossRot":l=Math.cos(Math.PI/4)*r,u=Math.sin(Math.PI/4)*r,e.moveTo(-l,-u),e.lineTo(l,u),e.moveTo(-l,u),e.lineTo(l,-u);break;case"star":e.moveTo(0,r),e.lineTo(0,-r),e.moveTo(-r,0),e.lineTo(r,0),l=Math.cos(Math.PI/4)*r,u=Math.sin(Math.PI/4)*r,e.moveTo(-l,-u),e.lineTo(l,u),e.moveTo(-l,u),e.lineTo(l,-u);break;case"line":e.moveTo(-r,0),e.lineTo(r,0);break;case"dash":e.moveTo(0,0),e.lineTo(r,0)}e.fill(),e.stroke(),e.restore()}}else e.drawImage(t,n-t.width/2,i-t.height/2,t.width,t.height)},clipArea:function(e,t){e.save(),e.beginPath(),e.rect(t.left,t.top,t.right-t.left,t.bottom-t.top),e.clip()},unclipArea:function(e){e.restore()},lineTo:function(e,t,r,n){if(r.steppedLine)return"after"===r.steppedLine&&!n||"after"!==r.steppedLine&&n?e.lineTo(t.x,r.y):e.lineTo(r.x,t.y),void e.lineTo(r.x,r.y);r.tension?e.bezierCurveTo(n?t.controlPointPreviousX:t.controlPointNextX,n?t.controlPointPreviousY:t.controlPointNextY,n?r.controlPointNextX:r.controlPointPreviousX,n?r.controlPointNextY:r.controlPointPreviousY,r.x,r.y):e.lineTo(r.x,r.y)}};helpers_core.clear=t.clear,helpers_core.drawRoundedRectangle=function(e){e.beginPath(),t.roundedRect.apply(t,arguments)}}),helpers_canvas_1=helpers_canvas.clear,helpers_canvas_2=helpers_canvas.roundedRect,helpers_canvas_3=helpers_canvas.drawPoint,helpers_canvas_4=helpers_canvas.clipArea,helpers_canvas_5=helpers_canvas.unclipArea,helpers_canvas_6=helpers_canvas.lineTo,helpers_options={toLineHeight:function(e,t){var r=(""+e).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);if(!r||"normal"===r[1])return 1.2*t;switch(e=+r[2],r[3]){case"px":return e;case"%":e/=100}return t*e},toPadding:function(e){var t,r,n,i;return helpers_core.isObject(e)?(t=+e.top||0,r=+e.right||0,n=+e.bottom||0,i=+e.left||0):t=r=n=i=+e||0,{top:t,right:r,bottom:n,left:i,height:t+n,width:i+r}},resolve:function(e,t,r){var n,i,a;for(n=0,i=e.length;n<i;++n)if(void 0!==(a=e[n])&&(void 0!==t&&"function"==typeof a&&(a=a(t)),void 0!==r&&helpers_core.isArray(a)&&(a=a[r]),void 0!==a))return a}},helpers$1=helpers_core,easing=helpers_easing,canvas=helpers_canvas,options=helpers_options;helpers$1.easing=easing,helpers$1.canvas=canvas,helpers$1.options=options;var core_defaults={_set:function(e,t){return helpers$1.merge(this[e]||(this[e]={}),t)}};core_defaults._set("global",{responsive:!0,responsiveAnimationDuration:0,maintainAspectRatio:!0,events:["mousemove","mouseout","click","touchstart","touchmove"],hover:{onHover:null,mode:"nearest",intersect:!0,animationDuration:400},onClick:null,defaultColor:"rgba(0,0,0,0.1)",defaultFontColor:"#666",defaultFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",defaultFontSize:12,defaultFontStyle:"normal",showLines:!0,elements:{},layout:{padding:{top:0,right:0,bottom:0,left:0}}});var core=function(){var e=function(e,t){return this.construct(e,t),this};return e.Chart=e,e},conversions={rgb2hsl:rgb2hsl,rgb2hsv:rgb2hsv,rgb2hwb:rgb2hwb,rgb2cmyk:rgb2cmyk,rgb2keyword:rgb2keyword,rgb2xyz:rgb2xyz,rgb2lab:rgb2lab,rgb2lch:rgb2lch,hsl2rgb:hsl2rgb,hsl2hsv:hsl2hsv,hsl2hwb:hsl2hwb,hsl2cmyk:hsl2cmyk,hsl2keyword:hsl2keyword,hsv2rgb:hsv2rgb,hsv2hsl:hsv2hsl,hsv2hwb:hsv2hwb,hsv2cmyk:hsv2cmyk,hsv2keyword:hsv2keyword,hwb2rgb:hwb2rgb,hwb2hsl:hwb2hsl,hwb2hsv:hwb2hsv,hwb2cmyk:hwb2cmyk,hwb2keyword:hwb2keyword,cmyk2rgb:cmyk2rgb,cmyk2hsl:cmyk2hsl,cmyk2hsv:cmyk2hsv,cmyk2hwb:cmyk2hwb,cmyk2keyword:cmyk2keyword,keyword2rgb:keyword2rgb,keyword2hsl:keyword2hsl,keyword2hsv:keyword2hsv,keyword2hwb:keyword2hwb,keyword2cmyk:keyword2cmyk,keyword2lab:keyword2lab,keyword2xyz:keyword2xyz,xyz2rgb:xyz2rgb,xyz2lab:xyz2lab,xyz2lch:xyz2lch,lab2xyz:lab2xyz,lab2rgb:lab2rgb,lab2lch:lab2lch,lch2lab:lch2lab,lch2xyz:lch2xyz,lch2rgb:lch2rgb};function rgb2hsl(e){var t,r,n=e[0]/255,i=e[1]/255,a=e[2]/255,o=Math.min(n,i,a),s=Math.max(n,i,a),l=s-o;return s==o?t=0:n==s?t=(i-a)/l:i==s?t=2+(a-n)/l:a==s&&(t=4+(n-i)/l),(t=Math.min(60*t,360))<0&&(t+=360),r=(o+s)/2,[t,100*(s==o?0:r<=.5?l/(s+o):l/(2-s-o)),100*r]}function rgb2hsv(e){var t,r,n=e[0],i=e[1],a=e[2],o=Math.min(n,i,a),s=Math.max(n,i,a),l=s-o;return r=0==s?0:l/s*1e3/10,s==o?t=0:n==s?t=(i-a)/l:i==s?t=2+(a-n)/l:a==s&&(t=4+(n-i)/l),(t=Math.min(60*t,360))<0&&(t+=360),[t,r,s/255*1e3/10]}function rgb2hwb(e){var t=e[0],r=e[1],n=e[2];return[rgb2hsl(e)[0],100*(1/255*Math.min(t,Math.min(r,n))),100*(n=1-1/255*Math.max(t,Math.max(r,n)))]}function rgb2cmyk(e){var t,r=e[0]/255,n=e[1]/255,i=e[2]/255;return[100*((1-r-(t=Math.min(1-r,1-n,1-i)))/(1-t)||0),100*((1-n-t)/(1-t)||0),100*((1-i-t)/(1-t)||0),100*t]}function rgb2keyword(e){return reverseKeywords[JSON.stringify(e)]}function rgb2xyz(e){var t=e[0]/255,r=e[1]/255,n=e[2]/255;return[100*(.4124*(t=t>.04045?Math.pow((t+.055)/1.055,2.4):t/12.92)+.3576*(r=r>.04045?Math.pow((r+.055)/1.055,2.4):r/12.92)+.1805*(n=n>.04045?Math.pow((n+.055)/1.055,2.4):n/12.92)),100*(.2126*t+.7152*r+.0722*n),100*(.0193*t+.1192*r+.9505*n)]}function rgb2lab(e){var t=rgb2xyz(e),r=t[0],n=t[1],i=t[2];return n/=100,i/=108.883,r=(r/=95.047)>.008856?Math.pow(r,1/3):7.787*r+16/116,[116*(n=n>.008856?Math.pow(n,1/3):7.787*n+16/116)-16,500*(r-n),200*(n-(i=i>.008856?Math.pow(i,1/3):7.787*i+16/116))]}function rgb2lch(e){return lab2lch(rgb2lab(e))}function hsl2rgb(e){var t,r,n,i,a,o=e[0]/360,s=e[1]/100,l=e[2]/100;if(0==s)return[a=255*l,a,a];t=2*l-(r=l<.5?l*(1+s):l+s-l*s),i=[0,0,0];for(var u=0;u<3;u++)(n=o+1/3*-(u-1))<0&&n++,n>1&&n--,a=6*n<1?t+6*(r-t)*n:2*n<1?r:3*n<2?t+(r-t)*(2/3-n)*6:t,i[u]=255*a;return i}function hsl2hsv(e){var t=e[0],r=e[1]/100,n=e[2]/100;return 0===n?[0,0,0]:[t,100*(2*(r*=(n*=2)<=1?n:2-n)/(n+r)),100*((n+r)/2)]}function hsl2hwb(e){return rgb2hwb(hsl2rgb(e))}function hsl2cmyk(e){return rgb2cmyk(hsl2rgb(e))}function hsl2keyword(e){return rgb2keyword(hsl2rgb(e))}function hsv2rgb(e){var t=e[0]/60,r=e[1]/100,n=e[2]/100,i=Math.floor(t)%6,a=t-Math.floor(t),o=255*n*(1-r),s=255*n*(1-r*a),l=255*n*(1-r*(1-a));n*=255;switch(i){case 0:return[n,l,o];case 1:return[s,n,o];case 2:return[o,n,l];case 3:return[o,s,n];case 4:return[l,o,n];case 5:return[n,o,s]}}function hsv2hsl(e){var t,r,n=e[0],i=e[1]/100,a=e[2]/100;return t=i*a,[n,100*(t=(t/=(r=(2-i)*a)<=1?r:2-r)||0),100*(r/=2)]}function hsv2hwb(e){return rgb2hwb(hsv2rgb(e))}function hsv2cmyk(e){return rgb2cmyk(hsv2rgb(e))}function hsv2keyword(e){return rgb2keyword(hsv2rgb(e))}function hwb2rgb(e){var t,n,i,a,o=e[0]/360,s=e[1]/100,l=e[2]/100,u=s+l;switch(u>1&&(s/=u,l/=u),n=1-l,i=6*o-(t=Math.floor(6*o)),0!=(1&t)&&(i=1-i),a=s+i*(n-s),t){default:case 6:case 0:r=n,g=a,b=s;break;case 1:r=a,g=n,b=s;break;case 2:r=s,g=n,b=a;break;case 3:r=s,g=a,b=n;break;case 4:r=a,g=s,b=n;break;case 5:r=n,g=s,b=a}return[255*r,255*g,255*b]}function hwb2hsl(e){return rgb2hsl(hwb2rgb(e))}function hwb2hsv(e){return rgb2hsv(hwb2rgb(e))}function hwb2cmyk(e){return rgb2cmyk(hwb2rgb(e))}function hwb2keyword(e){return rgb2keyword(hwb2rgb(e))}function cmyk2rgb(e){var t=e[0]/100,r=e[1]/100,n=e[2]/100,i=e[3]/100;return[255*(1-Math.min(1,t*(1-i)+i)),255*(1-Math.min(1,r*(1-i)+i)),255*(1-Math.min(1,n*(1-i)+i))]}function cmyk2hsl(e){return rgb2hsl(cmyk2rgb(e))}function cmyk2hsv(e){return rgb2hsv(cmyk2rgb(e))}function cmyk2hwb(e){return rgb2hwb(cmyk2rgb(e))}function cmyk2keyword(e){return rgb2keyword(cmyk2rgb(e))}function xyz2rgb(e){var t,r,n,i=e[0]/100,a=e[1]/100,o=e[2]/100;return r=-.9689*i+1.8758*a+.0415*o,n=.0557*i+-.204*a+1.057*o,t=(t=3.2406*i+-1.5372*a+-.4986*o)>.0031308?1.055*Math.pow(t,1/2.4)-.055:t*=12.92,r=r>.0031308?1.055*Math.pow(r,1/2.4)-.055:r*=12.92,n=n>.0031308?1.055*Math.pow(n,1/2.4)-.055:n*=12.92,[255*(t=Math.min(Math.max(0,t),1)),255*(r=Math.min(Math.max(0,r),1)),255*(n=Math.min(Math.max(0,n),1))]}function xyz2lab(e){var t=e[0],r=e[1],n=e[2];return r/=100,n/=108.883,t=(t/=95.047)>.008856?Math.pow(t,1/3):7.787*t+16/116,[116*(r=r>.008856?Math.pow(r,1/3):7.787*r+16/116)-16,500*(t-r),200*(r-(n=n>.008856?Math.pow(n,1/3):7.787*n+16/116))]}function xyz2lch(e){return lab2lch(xyz2lab(e))}function lab2xyz(e){var t,r,n,i,a=e[0],o=e[1],s=e[2];return a<=8?i=(r=100*a/903.3)/100*7.787+16/116:(r=100*Math.pow((a+16)/116,3),i=Math.pow(r/100,1/3)),[t=t/95.047<=.008856?t=95.047*(o/500+i-16/116)/7.787:95.047*Math.pow(o/500+i,3),r,n=n/108.883<=.008859?n=108.883*(i-s/200-16/116)/7.787:108.883*Math.pow(i-s/200,3)]}function lab2lch(e){var t,r=e[0],n=e[1],i=e[2];return(t=360*Math.atan2(i,n)/2/Math.PI)<0&&(t+=360),[r,Math.sqrt(n*n+i*i),t]}function lab2rgb(e){return xyz2rgb(lab2xyz(e))}function lch2lab(e){var t,r=e[0],n=e[1];return t=e[2]/360*2*Math.PI,[r,n*Math.cos(t),n*Math.sin(t)]}function lch2xyz(e){return lab2xyz(lch2lab(e))}function lch2rgb(e){return lab2rgb(lch2lab(e))}function keyword2rgb(e){return cssKeywords[e]}function keyword2hsl(e){return rgb2hsl(keyword2rgb(e))}function keyword2hsv(e){return rgb2hsv(keyword2rgb(e))}function keyword2hwb(e){return rgb2hwb(keyword2rgb(e))}function keyword2cmyk(e){return rgb2cmyk(keyword2rgb(e))}function keyword2lab(e){return rgb2lab(keyword2rgb(e))}function keyword2xyz(e){return rgb2xyz(keyword2rgb(e))}var cssKeywords={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},reverseKeywords={};for(var key in cssKeywords)reverseKeywords[JSON.stringify(cssKeywords[key])]=key;var convert=function(){return new Converter};for(var func in conversions){convert[func+"Raw"]=function(e){return function(t){return"number"==typeof t&&(t=Array.prototype.slice.call(arguments)),conversions[e](t)}}(func);var pair=/(\w+)2(\w+)/.exec(func),from=pair[1],to=pair[2];convert[from]=convert[from]||{},convert[from][to]=convert[func]=function(e){return function(t){"number"==typeof t&&(t=Array.prototype.slice.call(arguments));var r=conversions[e](t);if("string"==typeof r||void 0===r)return r;for(var n=0;n<r.length;n++)r[n]=Math.round(r[n]);return r}}(func)}var Converter=function(){this.convs={}};Converter.prototype.routeSpace=function(e,t){var r=t[0];return void 0===r?this.getValues(e):("number"==typeof r&&(r=Array.prototype.slice.call(t)),this.setValues(e,r))},Converter.prototype.setValues=function(e,t){return this.space=e,this.convs={},this.convs[e]=t,this},Converter.prototype.getValues=function(e){var t=this.convs[e];if(!t){var r=this.space,n=this.convs[r];t=convert[r][e](n),this.convs[e]=t}return t},["rgb","hsl","hsv","cmyk","keyword"].forEach(function(e){Converter.prototype[e]=function(t){return this.routeSpace(e,arguments)}});var colorConvert=convert,colorName={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},colorString={getRgba:getRgba,getHsla:getHsla,getRgb:getRgb,getHsl:getHsl,getHwb:getHwb,getAlpha:getAlpha,hexString:hexString,rgbString:rgbString,rgbaString:rgbaString,percentString:percentString,percentaString:percentaString,hslString:hslString,hslaString:hslaString,hwbString:hwbString,keyword:keyword};function getRgba(e){if(e){var t=[0,0,0],r=1,n=e.match(/^#([a-fA-F0-9]{3,4})$/i),i="";if(n){i=(n=n[1])[3];for(var a=0;a<t.length;a++)t[a]=parseInt(n[a]+n[a],16);i&&(r=Math.round(parseInt(i+i,16)/255*100)/100)}else if(n=e.match(/^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i)){i=n[2],n=n[1];for(a=0;a<t.length;a++)t[a]=parseInt(n.slice(2*a,2*a+2),16);i&&(r=Math.round(parseInt(i,16)/255*100)/100)}else if(n=e.match(/^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)){for(a=0;a<t.length;a++)t[a]=parseInt(n[a+1]);r=parseFloat(n[4])}else if(n=e.match(/^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)){for(a=0;a<t.length;a++)t[a]=Math.round(2.55*parseFloat(n[a+1]));r=parseFloat(n[4])}else if(n=e.match(/(\w+)/)){if("transparent"==n[1])return[0,0,0,0];if(!(t=colorName[n[1]]))return}for(a=0;a<t.length;a++)t[a]=scale(t[a],0,255);return r=r||0==r?scale(r,0,1):1,t[3]=r,t}}function getHsla(e){if(e){var t=e.match(/^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/);if(t){var r=parseFloat(t[4]);return[scale(parseInt(t[1]),0,360),scale(parseFloat(t[2]),0,100),scale(parseFloat(t[3]),0,100),scale(isNaN(r)?1:r,0,1)]}}}function getHwb(e){if(e){var t=e.match(/^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/);if(t){var r=parseFloat(t[4]);return[scale(parseInt(t[1]),0,360),scale(parseFloat(t[2]),0,100),scale(parseFloat(t[3]),0,100),scale(isNaN(r)?1:r,0,1)]}}}function getRgb(e){var t=getRgba(e);return t&&t.slice(0,3)}function getHsl(e){var t=getHsla(e);return t&&t.slice(0,3)}function getAlpha(e){var t=getRgba(e);return t?t[3]:(t=getHsla(e))?t[3]:(t=getHwb(e))?t[3]:void 0}function hexString(e,t){t=void 0!==t&&3===e.length?t:e[3];return"#"+hexDouble(e[0])+hexDouble(e[1])+hexDouble(e[2])+(t>=0&&t<1?hexDouble(Math.round(255*t)):"")}function rgbString(e,t){return t<1||e[3]&&e[3]<1?rgbaString(e,t):"rgb("+e[0]+", "+e[1]+", "+e[2]+")"}function rgbaString(e,t){return void 0===t&&(t=void 0!==e[3]?e[3]:1),"rgba("+e[0]+", "+e[1]+", "+e[2]+", "+t+")"}function percentString(e,t){return t<1||e[3]&&e[3]<1?percentaString(e,t):"rgb("+Math.round(e[0]/255*100)+"%, "+Math.round(e[1]/255*100)+"%, "+Math.round(e[2]/255*100)+"%)"}function percentaString(e,t){return"rgba("+Math.round(e[0]/255*100)+"%, "+Math.round(e[1]/255*100)+"%, "+Math.round(e[2]/255*100)+"%, "+(t||e[3]||1)+")"}function hslString(e,t){return t<1||e[3]&&e[3]<1?hslaString(e,t):"hsl("+e[0]+", "+e[1]+"%, "+e[2]+"%)"}function hslaString(e,t){return void 0===t&&(t=void 0!==e[3]?e[3]:1),"hsla("+e[0]+", "+e[1]+"%, "+e[2]+"%, "+t+")"}function hwbString(e,t){return void 0===t&&(t=void 0!==e[3]?e[3]:1),"hwb("+e[0]+", "+e[1]+"%, "+e[2]+"%"+(void 0!==t&&1!==t?", "+t:"")+")"}function keyword(e){return reverseNames[e.slice(0,3)]}function scale(e,t,r){return Math.min(Math.max(t,e),r)}function hexDouble(e){var t=e.toString(16).toUpperCase();return t.length<2?"0"+t:t}var reverseNames={};for(var name in colorName)reverseNames[colorName[name]]=name;var Color=function e(t){return t instanceof e?t:this instanceof e?(this.valid=!1,this.values={rgb:[0,0,0],hsl:[0,0,0],hsv:[0,0,0],hwb:[0,0,0],cmyk:[0,0,0,0],alpha:1},void("string"==typeof t?(r=colorString.getRgba(t))?this.setValues("rgb",r):(r=colorString.getHsla(t))?this.setValues("hsl",r):(r=colorString.getHwb(t))&&this.setValues("hwb",r):"object"===(void 0===t?"undefined":_typeof(t))&&(void 0!==(r=t).r||void 0!==r.red?this.setValues("rgb",r):void 0!==r.l||void 0!==r.lightness?this.setValues("hsl",r):void 0!==r.v||void 0!==r.value?this.setValues("hsv",r):void 0!==r.w||void 0!==r.whiteness?this.setValues("hwb",r):void 0===r.c&&void 0===r.cyan||this.setValues("cmyk",r)))):new e(t);var r};Color.prototype={isValid:function(){return this.valid},rgb:function(){return this.setSpace("rgb",arguments)},hsl:function(){return this.setSpace("hsl",arguments)},hsv:function(){return this.setSpace("hsv",arguments)},hwb:function(){return this.setSpace("hwb",arguments)},cmyk:function(){return this.setSpace("cmyk",arguments)},rgbArray:function(){return this.values.rgb},hslArray:function(){return this.values.hsl},hsvArray:function(){return this.values.hsv},hwbArray:function(){var e=this.values;return 1!==e.alpha?e.hwb.concat([e.alpha]):e.hwb},cmykArray:function(){return this.values.cmyk},rgbaArray:function(){var e=this.values;return e.rgb.concat([e.alpha])},hslaArray:function(){var e=this.values;return e.hsl.concat([e.alpha])},alpha:function(e){return void 0===e?this.values.alpha:(this.setValues("alpha",e),this)},red:function(e){return this.setChannel("rgb",0,e)},green:function(e){return this.setChannel("rgb",1,e)},blue:function(e){return this.setChannel("rgb",2,e)},hue:function(e){return e&&(e=(e%=360)<0?360+e:e),this.setChannel("hsl",0,e)},saturation:function(e){return this.setChannel("hsl",1,e)},lightness:function(e){return this.setChannel("hsl",2,e)},saturationv:function(e){return this.setChannel("hsv",1,e)},whiteness:function(e){return this.setChannel("hwb",1,e)},blackness:function(e){return this.setChannel("hwb",2,e)},value:function(e){return this.setChannel("hsv",2,e)},cyan:function(e){return this.setChannel("cmyk",0,e)},magenta:function(e){return this.setChannel("cmyk",1,e)},yellow:function(e){return this.setChannel("cmyk",2,e)},black:function(e){return this.setChannel("cmyk",3,e)},hexString:function(){return colorString.hexString(this.values.rgb)},rgbString:function(){return colorString.rgbString(this.values.rgb,this.values.alpha)},rgbaString:function(){return colorString.rgbaString(this.values.rgb,this.values.alpha)},percentString:function(){return colorString.percentString(this.values.rgb,this.values.alpha)},hslString:function(){return colorString.hslString(this.values.hsl,this.values.alpha)},hslaString:function(){return colorString.hslaString(this.values.hsl,this.values.alpha)},hwbString:function(){return colorString.hwbString(this.values.hwb,this.values.alpha)},keyword:function(){return colorString.keyword(this.values.rgb,this.values.alpha)},rgbNumber:function(){var e=this.values.rgb;return e[0]<<16|e[1]<<8|e[2]},luminosity:function(){for(var e=this.values.rgb,t=[],r=0;r<e.length;r++){var n=e[r]/255;t[r]=n<=.03928?n/12.92:Math.pow((n+.055)/1.055,2.4)}return.2126*t[0]+.7152*t[1]+.0722*t[2]},contrast:function(e){var t=this.luminosity(),r=e.luminosity();return t>r?(t+.05)/(r+.05):(r+.05)/(t+.05)},level:function(e){var t=this.contrast(e);return t>=7.1?"AAA":t>=4.5?"AA":""},dark:function(){var e=this.values.rgb;return(299*e[0]+587*e[1]+114*e[2])/1e3<128},light:function(){return!this.dark()},negate:function(){for(var e=[],t=0;t<3;t++)e[t]=255-this.values.rgb[t];return this.setValues("rgb",e),this},lighten:function(e){var t=this.values.hsl;return t[2]+=t[2]*e,this.setValues("hsl",t),this},darken:function(e){var t=this.values.hsl;return t[2]-=t[2]*e,this.setValues("hsl",t),this},saturate:function(e){var t=this.values.hsl;return t[1]+=t[1]*e,this.setValues("hsl",t),this},desaturate:function(e){var t=this.values.hsl;return t[1]-=t[1]*e,this.setValues("hsl",t),this},whiten:function(e){var t=this.values.hwb;return t[1]+=t[1]*e,this.setValues("hwb",t),this},blacken:function(e){var t=this.values.hwb;return t[2]+=t[2]*e,this.setValues("hwb",t),this},greyscale:function(){var e=this.values.rgb,t=.3*e[0]+.59*e[1]+.11*e[2];return this.setValues("rgb",[t,t,t]),this},clearer:function(e){var t=this.values.alpha;return this.setValues("alpha",t-t*e),this},opaquer:function(e){var t=this.values.alpha;return this.setValues("alpha",t+t*e),this},rotate:function(e){var t=this.values.hsl,r=(t[0]+e)%360;return t[0]=r<0?360+r:r,this.setValues("hsl",t),this},mix:function(e,t){var r=e,n=void 0===t?.5:t,i=2*n-1,a=this.alpha()-r.alpha(),o=((i*a==-1?i:(i+a)/(1+i*a))+1)/2,s=1-o;return this.rgb(o*this.red()+s*r.red(),o*this.green()+s*r.green(),o*this.blue()+s*r.blue()).alpha(this.alpha()*n+r.alpha()*(1-n))},toJSON:function(){return this.rgb()},clone:function(){var e,t,r=new Color,n=this.values,i=r.values;for(var a in n)n.hasOwnProperty(a)&&(e=n[a],"[object Array]"===(t={}.toString.call(e))?i[a]=e.slice(0):"[object Number]"===t?i[a]=e:console.error("unexpected color value:",e));return r}},Color.prototype.spaces={rgb:["red","green","blue"],hsl:["hue","saturation","lightness"],hsv:["hue","saturation","value"],hwb:["hue","whiteness","blackness"],cmyk:["cyan","magenta","yellow","black"]},Color.prototype.maxes={rgb:[255,255,255],hsl:[360,100,100],hsv:[360,100,100],hwb:[360,100,100],cmyk:[100,100,100,100]},Color.prototype.getValues=function(e){for(var t=this.values,r={},n=0;n<e.length;n++)r[e.charAt(n)]=t[e][n];return 1!==t.alpha&&(r.a=t.alpha),r},Color.prototype.setValues=function(e,t){var r,n,i=this.values,a=this.spaces,o=this.maxes,s=1;if(this.valid=!0,"alpha"===e)s=t;else if(t.length)i[e]=t.slice(0,e.length),s=t[e.length];else if(void 0!==t[e.charAt(0)]){for(r=0;r<e.length;r++)i[e][r]=t[e.charAt(r)];s=t.a}else if(void 0!==t[a[e][0]]){var l=a[e];for(r=0;r<e.length;r++)i[e][r]=t[l[r]];s=t.alpha}if(i.alpha=Math.max(0,Math.min(1,void 0===s?i.alpha:s)),"alpha"===e)return!1;for(r=0;r<e.length;r++)n=Math.max(0,Math.min(o[e][r],i[e][r])),i[e][r]=Math.round(n);for(var u in a)u!==e&&(i[u]=colorConvert[e][u](i[e]));return!0},Color.prototype.setSpace=function(e,t){var r=t[0];return void 0===r?this.getValues(e):("number"==typeof r&&(r=Array.prototype.slice.call(t)),this.setValues(e,r),this)},Color.prototype.setChannel=function(e,t,r){var n=this.values[e];return void 0===r?n[t]:r===n[t]?this:(n[t]=r,this.setValues(e,n),this)},"undefined"!=typeof window&&(window.Color=Color);var chartjsColor=Color;function filterByPosition(e,t){return helpers$1.where(e,function(e){return e.position===t})}function sortByWeight(e,t){e.forEach(function(e,t){return e._tmpIndex_=t,e}),e.sort(function(e,r){var n=t?r:e,i=t?e:r;return n.weight===i.weight?n._tmpIndex_-i._tmpIndex_:n.weight-i.weight}),e.forEach(function(e){delete e._tmpIndex_})}var core_layouts={defaults:{},addBox:function(e,t){e.boxes||(e.boxes=[]),t.fullWidth=t.fullWidth||!1,t.position=t.position||"top",t.weight=t.weight||0,e.boxes.push(t)},removeBox:function(e,t){var r=e.boxes?e.boxes.indexOf(t):-1;-1!==r&&e.boxes.splice(r,1)},configure:function(e,t,r){for(var n,i=["fullWidth","position","weight"],a=i.length,o=0;o<a;++o)n=i[o],r.hasOwnProperty(n)&&(t[n]=r[n])},update:function(e,t,r){if(e){var n=e.options.layout||{},i=helpers$1.options.toPadding(n.padding),a=i.left,o=i.right,s=i.top,l=i.bottom,u=filterByPosition(e.boxes,"left"),c=filterByPosition(e.boxes,"right"),d=filterByPosition(e.boxes,"top"),h=filterByPosition(e.boxes,"bottom"),f=filterByPosition(e.boxes,"chartArea");sortByWeight(u,!0),sortByWeight(c,!1),sortByWeight(d,!0),sortByWeight(h,!1);var p=t-a-o,g=r-s-l,m=g/2,v=(t-p/2)/(u.length+c.length),y=(r-m)/(d.length+h.length),b=p,_=g,w=[];helpers$1.each(u.concat(c,d,h),function(e){var t,r=e.isHorizontal();r?(t=e.update(e.fullWidth?p:b,y),_-=t.height):(t=e.update(v,_),b-=t.width),w.push({horizontal:r,minSize:t,box:e})});var x=0,S=0,k=0,$=0;helpers$1.each(d.concat(h),function(e){if(e.getPadding){var t=e.getPadding();x=Math.max(x,t.left),S=Math.max(S,t.right)}}),helpers$1.each(u.concat(c),function(e){if(e.getPadding){var t=e.getPadding();k=Math.max(k,t.top),$=Math.max($,t.bottom)}});var C=a,T=o,A=s,M=l;helpers$1.each(u.concat(c),N),helpers$1.each(u,function(e){C+=e.width}),helpers$1.each(c,function(e){T+=e.width}),helpers$1.each(d.concat(h),N),helpers$1.each(d,function(e){A+=e.height}),helpers$1.each(h,function(e){M+=e.height}),helpers$1.each(u.concat(c),function(e){var t=helpers$1.findNextWhere(w,function(t){return t.box===e}),r={left:0,right:0,top:A,bottom:M};t&&e.update(t.minSize.width,_,r)}),C=a,T=o,A=s,M=l,helpers$1.each(u,function(e){C+=e.width}),helpers$1.each(c,function(e){T+=e.width}),helpers$1.each(d,function(e){A+=e.height}),helpers$1.each(h,function(e){M+=e.height});var O=Math.max(x-C,0);C+=O,T+=Math.max(S-T,0);var D=Math.max(k-A,0);A+=D,M+=Math.max($-M,0);var E=r-A-M,P=t-C-T;P===b&&E===_||(helpers$1.each(u,function(e){e.height=E}),helpers$1.each(c,function(e){e.height=E}),helpers$1.each(d,function(e){e.fullWidth||(e.width=P)}),helpers$1.each(h,function(e){e.fullWidth||(e.width=P)}),_=E,b=P);var R=a+O,I=s+D;helpers$1.each(u.concat(d),L),R+=b,I+=_,helpers$1.each(c,L),helpers$1.each(h,L),e.chartArea={left:C,top:A,right:C+b,bottom:A+_},helpers$1.each(f,function(t){t.left=e.chartArea.left,t.top=e.chartArea.top,t.right=e.chartArea.right,t.bottom=e.chartArea.bottom,t.update(b,_)})}function N(e){var t=helpers$1.findNextWhere(w,function(t){return t.box===e});if(t)if(e.isHorizontal()){var r={left:Math.max(C,x),right:Math.max(T,S),top:0,bottom:0};e.update(e.fullWidth?p:b,g/2,r)}else e.update(t.minSize.width,_)}function L(e){e.isHorizontal()?(e.left=e.fullWidth?a:C,e.right=e.fullWidth?t-o:C+b,e.top=I,e.bottom=I+e.height,I=e.bottom):(e.left=R,e.right=R+e.width,e.top=A,e.bottom=A+_,R=e.right)}}},core_scaleService={constructors:{},defaults:{},registerScaleType:function(e,t,r){this.constructors[e]=t,this.defaults[e]=helpers$1.clone(r)},getScaleConstructor:function(e){return this.constructors.hasOwnProperty(e)?this.constructors[e]:void 0},getScaleDefaults:function(e){return this.defaults.hasOwnProperty(e)?helpers$1.merge({},[core_defaults.scale,this.defaults[e]]):{}},updateScaleDefaults:function(e,t){this.defaults.hasOwnProperty(e)&&(this.defaults[e]=helpers$1.extend(this.defaults[e],t))},addScalesToLayout:function(e){helpers$1.each(e.scales,function(t){t.fullWidth=t.options.fullWidth,t.position=t.options.position,t.weight=t.options.weight,core_layouts.addBox(e,t)})}},core_helpers=function(){function e(e,t,r){var n;return"string"==typeof e?(n=parseInt(e,10),-1!==e.indexOf("%")&&(n=n/100*t.parentNode[r])):n=e,n}function t(e){return void 0!==e&&null!==e&&"none"!==e}function r(r,n,i){var a=document.defaultView,o=helpers$1._getParentNode(r),s=a.getComputedStyle(r)[n],l=a.getComputedStyle(o)[n],u=t(s),c=t(l),d=Number.POSITIVE_INFINITY;return u||c?Math.min(u?e(s,r,i):d,c?e(l,o,i):d):"none"}helpers$1.configMerge=function(){return helpers$1.merge(helpers$1.clone(arguments[0]),[].slice.call(arguments,1),{merger:function(e,t,r,n){var i=t[e]||{},a=r[e];"scales"===e?t[e]=helpers$1.scaleMerge(i,a):"scale"===e?t[e]=helpers$1.merge(i,[core_scaleService.getScaleDefaults(a.type),a]):helpers$1._merger(e,t,r,n)}})},helpers$1.scaleMerge=function(){return helpers$1.merge(helpers$1.clone(arguments[0]),[].slice.call(arguments,1),{merger:function(e,t,r,n){if("xAxes"===e||"yAxes"===e){var i,a,o,s=r[e].length;for(t[e]||(t[e]=[]),i=0;i<s;++i)o=r[e][i],a=helpers$1.valueOrDefault(o.type,"xAxes"===e?"category":"linear"),i>=t[e].length&&t[e].push({}),!t[e][i].type||o.type&&o.type!==t[e][i].type?helpers$1.merge(t[e][i],[core_scaleService.getScaleDefaults(a),o]):helpers$1.merge(t[e][i],o)}else helpers$1._merger(e,t,r,n)}})},helpers$1.where=function(e,t){if(helpers$1.isArray(e)&&Array.prototype.filter)return e.filter(t);var r=[];return helpers$1.each(e,function(e){t(e)&&r.push(e)}),r},helpers$1.findIndex=Array.prototype.findIndex?function(e,t,r){return e.findIndex(t,r)}:function(e,t,r){r=void 0===r?e:r;for(var n=0,i=e.length;n<i;++n)if(t.call(r,e[n],n,e))return n;return-1},helpers$1.findNextWhere=function(e,t,r){helpers$1.isNullOrUndef(r)&&(r=-1);for(var n=r+1;n<e.length;n++){var i=e[n];if(t(i))return i}},helpers$1.findPreviousWhere=function(e,t,r){helpers$1.isNullOrUndef(r)&&(r=e.length);for(var n=r-1;n>=0;n--){var i=e[n];if(t(i))return i}},helpers$1.isNumber=function(e){return!isNaN(parseFloat(e))&&isFinite(e)},helpers$1.almostEquals=function(e,t,r){return Math.abs(e-t)<r},helpers$1.almostWhole=function(e,t){var r=Math.round(e);return r-t<e&&r+t>e},helpers$1.max=function(e){return e.reduce(function(e,t){return isNaN(t)?e:Math.max(e,t)},Number.NEGATIVE_INFINITY)},helpers$1.min=function(e){return e.reduce(function(e,t){return isNaN(t)?e:Math.min(e,t)},Number.POSITIVE_INFINITY)},helpers$1.sign=Math.sign?function(e){return Math.sign(e)}:function(e){return 0===(e=+e)||isNaN(e)?e:e>0?1:-1},helpers$1.log10=Math.log10?function(e){return Math.log10(e)}:function(e){var t=Math.log(e)*Math.LOG10E,r=Math.round(t);return e===Math.pow(10,r)?r:t},helpers$1.toRadians=function(e){return e*(Math.PI/180)},helpers$1.toDegrees=function(e){return e*(180/Math.PI)},helpers$1.getAngleFromPoint=function(e,t){var r=t.x-e.x,n=t.y-e.y,i=Math.sqrt(r*r+n*n),a=Math.atan2(n,r);return a<-.5*Math.PI&&(a+=2*Math.PI),{angle:a,distance:i}},helpers$1.distanceBetweenPoints=function(e,t){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))},helpers$1.aliasPixel=function(e){return e%2==0?0:.5},helpers$1.splineCurve=function(e,t,r,n){var i=e.skip?t:e,a=t,o=r.skip?t:r,s=Math.sqrt(Math.pow(a.x-i.x,2)+Math.pow(a.y-i.y,2)),l=Math.sqrt(Math.pow(o.x-a.x,2)+Math.pow(o.y-a.y,2)),u=s/(s+l),c=l/(s+l),d=n*(u=isNaN(u)?0:u),h=n*(c=isNaN(c)?0:c);return{previous:{x:a.x-d*(o.x-i.x),y:a.y-d*(o.y-i.y)},next:{x:a.x+h*(o.x-i.x),y:a.y+h*(o.y-i.y)}}},helpers$1.EPSILON=Number.EPSILON||1e-14,helpers$1.splineCurveMonotone=function(e){var t,r,n,i,a,o,s,l,u,c=(e||[]).map(function(e){return{model:e._model,deltaK:0,mK:0}}),d=c.length;for(t=0;t<d;++t)if(!(n=c[t]).model.skip){if(r=t>0?c[t-1]:null,(i=t<d-1?c[t+1]:null)&&!i.model.skip){var h=i.model.x-n.model.x;n.deltaK=0!==h?(i.model.y-n.model.y)/h:0}!r||r.model.skip?n.mK=n.deltaK:!i||i.model.skip?n.mK=r.deltaK:this.sign(r.deltaK)!==this.sign(n.deltaK)?n.mK=0:n.mK=(r.deltaK+n.deltaK)/2}for(t=0;t<d-1;++t)n=c[t],i=c[t+1],n.model.skip||i.model.skip||(helpers$1.almostEquals(n.deltaK,0,this.EPSILON)?n.mK=i.mK=0:(a=n.mK/n.deltaK,o=i.mK/n.deltaK,(l=Math.pow(a,2)+Math.pow(o,2))<=9||(s=3/Math.sqrt(l),n.mK=a*s*n.deltaK,i.mK=o*s*n.deltaK)));for(t=0;t<d;++t)(n=c[t]).model.skip||(r=t>0?c[t-1]:null,i=t<d-1?c[t+1]:null,r&&!r.model.skip&&(u=(n.model.x-r.model.x)/3,n.model.controlPointPreviousX=n.model.x-u,n.model.controlPointPreviousY=n.model.y-u*n.mK),i&&!i.model.skip&&(u=(i.model.x-n.model.x)/3,n.model.controlPointNextX=n.model.x+u,n.model.controlPointNextY=n.model.y+u*n.mK))},helpers$1.nextItem=function(e,t,r){return r?t>=e.length-1?e[0]:e[t+1]:t>=e.length-1?e[e.length-1]:e[t+1]},helpers$1.previousItem=function(e,t,r){return r?t<=0?e[e.length-1]:e[t-1]:t<=0?e[0]:e[t-1]},helpers$1.niceNum=function(e,t){var r=Math.floor(helpers$1.log10(e)),n=e/Math.pow(10,r);return(t?n<1.5?1:n<3?2:n<7?5:10:n<=1?1:n<=2?2:n<=5?5:10)*Math.pow(10,r)},helpers$1.requestAnimFrame="undefined"==typeof window?function(e){e()}:window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(e){return window.setTimeout(e,1e3/60)},helpers$1.getRelativePosition=function(e,t){var r,n,i=e.originalEvent||e,a=e.target||e.srcElement,o=a.getBoundingClientRect(),s=i.touches;s&&s.length>0?(r=s[0].clientX,n=s[0].clientY):(r=i.clientX,n=i.clientY);var l=parseFloat(helpers$1.getStyle(a,"padding-left")),u=parseFloat(helpers$1.getStyle(a,"padding-top")),c=parseFloat(helpers$1.getStyle(a,"padding-right")),d=parseFloat(helpers$1.getStyle(a,"padding-bottom")),h=o.right-o.left-l-c,f=o.bottom-o.top-u-d;return{x:r=Math.round((r-o.left-l)/h*a.width/t.currentDevicePixelRatio),y:n=Math.round((n-o.top-u)/f*a.height/t.currentDevicePixelRatio)}},helpers$1.getConstraintWidth=function(e){return r(e,"max-width","clientWidth")},helpers$1.getConstraintHeight=function(e){return r(e,"max-height","clientHeight")},helpers$1._calculatePadding=function(e,t,r){return(t=helpers$1.getStyle(e,t)).indexOf("%")>-1?r/parseInt(t,10):parseInt(t,10)},helpers$1._getParentNode=function(e){var t=e.parentNode;return t&&t.host&&(t=t.host),t},helpers$1.getMaximumWidth=function(e){var t=helpers$1._getParentNode(e);if(!t)return e.clientWidth;var r=t.clientWidth,n=r-helpers$1._calculatePadding(t,"padding-left",r)-helpers$1._calculatePadding(t,"padding-right",r),i=helpers$1.getConstraintWidth(e);return isNaN(i)?n:Math.min(n,i)},helpers$1.getMaximumHeight=function(e){var t=helpers$1._getParentNode(e);if(!t)return e.clientHeight;var r=t.clientHeight,n=r-helpers$1._calculatePadding(t,"padding-top",r)-helpers$1._calculatePadding(t,"padding-bottom",r),i=helpers$1.getConstraintHeight(e);return isNaN(i)?n:Math.min(n,i)},helpers$1.getStyle=function(e,t){return e.currentStyle?e.currentStyle[t]:document.defaultView.getComputedStyle(e,null).getPropertyValue(t)},helpers$1.retinaScale=function(e,t){var r=e.currentDevicePixelRatio=t||"undefined"!=typeof window&&window.devicePixelRatio||1;if(1!==r){var n=e.canvas,i=e.height,a=e.width;n.height=i*r,n.width=a*r,e.ctx.scale(r,r),n.style.height||n.style.width||(n.style.height=i+"px",n.style.width=a+"px")}},helpers$1.fontString=function(e,t,r){return t+" "+e+"px "+r},helpers$1.longestText=function(e,t,r,n){var i=(n=n||{}).data=n.data||{},a=n.garbageCollect=n.garbageCollect||[];n.font!==t&&(i=n.data={},a=n.garbageCollect=[],n.font=t),e.font=t;var o=0;helpers$1.each(r,function(t){void 0!==t&&null!==t&&!0!==helpers$1.isArray(t)?o=helpers$1.measureText(e,i,a,o,t):helpers$1.isArray(t)&&helpers$1.each(t,function(t){void 0===t||null===t||helpers$1.isArray(t)||(o=helpers$1.measureText(e,i,a,o,t))})});var s=a.length/2;if(s>r.length){for(var l=0;l<s;l++)delete i[a[l]];a.splice(0,s)}return o},helpers$1.measureText=function(e,t,r,n,i){var a=t[i];return a||(a=t[i]=e.measureText(i).width,r.push(i)),a>n&&(n=a),n},helpers$1.numberOfLabelLines=function(e){var t=1;return helpers$1.each(e,function(e){helpers$1.isArray(e)&&e.length>t&&(t=e.length)}),t},helpers$1.color=chartjsColor?function(e){return e instanceof CanvasGradient&&(e=core_defaults.global.defaultColor),chartjsColor(e)}:function(e){return console.error("Color.js not found!"),e},helpers$1.getHoverColor=function(e){return e instanceof CanvasPattern?e:helpers$1.color(e).saturate(.5).darken(.1).rgbString()}};function interpolate(e,t,r,n){var i,a,o,s,l,u,c,d,h,f=Object.keys(r);for(i=0,a=f.length;i<a;++i)if(u=r[o=f[i]],t.hasOwnProperty(o)||(t[o]=u),(s=t[o])!==u&&"_"!==o[0]){if(e.hasOwnProperty(o)||(e[o]=s),l=e[o],(c=void 0===u?"undefined":_typeof(u))===(void 0===l?"undefined":_typeof(l)))if("string"===c){if((d=chartjsColor(l)).valid&&(h=chartjsColor(u)).valid){t[o]=h.mix(d,n).rgbString();continue}}else if("number"===c&&isFinite(l)&&isFinite(u)){t[o]=l+(u-l)*n;continue}t[o]=u}}var Element=function(e){helpers$1.extend(this,e),this.initialize.apply(this,arguments)};helpers$1.extend(Element.prototype,{initialize:function(){this.hidden=!1},pivot:function(){var e=this;return e._view||(e._view=helpers$1.clone(e._model)),e._start={},e},transition:function(e){var t=this,r=t._model,n=t._start,i=t._view;return r&&1!==e?(i||(i=t._view={}),n||(n=t._start={}),interpolate(n,i,r,e),t):(t._view=r,t._start=null,t)},tooltipPosition:function(){return{x:this._model.x,y:this._model.y}},hasValue:function(){return helpers$1.isNumber(this._model.x)&&helpers$1.isNumber(this._model.y)}}),Element.extend=helpers$1.inherits;var core_element=Element,core_animation=createCommonjsModule(function(e){var t=e.exports=core_element.extend({chart:null,currentStep:0,numSteps:60,easing:"",render:null,onAnimationProgress:null,onAnimationComplete:null});Object.defineProperty(t.prototype,"animationObject",{get:function(){return this}}),Object.defineProperty(t.prototype,"chartInstance",{get:function(){return this.chart},set:function(e){this.chart=e}})});core_defaults._set("global",{animation:{duration:1e3,easing:"easeOutQuart",onProgress:helpers$1.noop,onComplete:helpers$1.noop}});var core_animations={frameDuration:17,animations:[],dropFrames:0,request:null,addAnimation:function(e,t,r,n){var i,a,o=this.animations;for(t.chart=e,n||(e.animating=!0),i=0,a=o.length;i<a;++i)if(o[i].chart===e)return void(o[i]=t);o.push(t),1===o.length&&this.requestAnimationFrame()},cancelAnimation:function(e){var t=helpers$1.findIndex(this.animations,function(t){return t.chart===e});-1!==t&&(this.animations.splice(t,1),e.animating=!1)},requestAnimationFrame:function(){var e=this;null===e.request&&(e.request=helpers$1.requestAnimFrame.call(window,function(){e.request=null,e.startDigest()}))},startDigest:function(){var e=this,t=Date.now(),r=0;e.dropFrames>1&&(r=Math.floor(e.dropFrames),e.dropFrames=e.dropFrames%1),e.advance(1+r);var n=Date.now();e.dropFrames+=(n-t)/e.frameDuration,e.animations.length>0&&e.requestAnimationFrame()},advance:function(e){for(var t,r,n=this.animations,i=0;i<n.length;)r=(t=n[i]).chart,t.currentStep=(t.currentStep||0)+e,t.currentStep=Math.min(t.currentStep,t.numSteps),helpers$1.callback(t.render,[r,t],r),helpers$1.callback(t.onAnimationProgress,[t],r),t.currentStep>=t.numSteps?(helpers$1.callback(t.onAnimationComplete,[t],r),r.animating=!1,n.splice(i,1)):++i}};core_defaults._set("global",{elements:{arc:{backgroundColor:core_defaults.global.defaultColor,borderColor:"#fff",borderWidth:2}}});var element_arc=core_element.extend({inLabelRange:function(e){var t=this._view;return!!t&&Math.pow(e-t.x,2)<Math.pow(t.radius+t.hoverRadius,2)},inRange:function(e,t){var r=this._view;if(r){for(var n=helpers$1.getAngleFromPoint(r,{x:e,y:t}),i=n.angle,a=n.distance,o=r.startAngle,s=r.endAngle;s<o;)s+=2*Math.PI;for(;i>s;)i-=2*Math.PI;for(;i<o;)i+=2*Math.PI;var l=i>=o&&i<=s,u=a>=r.innerRadius&&a<=r.outerRadius;return l&&u}return!1},getCenterPoint:function(){var e=this._view,t=(e.startAngle+e.endAngle)/2,r=(e.innerRadius+e.outerRadius)/2;return{x:e.x+Math.cos(t)*r,y:e.y+Math.sin(t)*r}},getArea:function(){var e=this._view;return Math.PI*((e.endAngle-e.startAngle)/(2*Math.PI))*(Math.pow(e.outerRadius,2)-Math.pow(e.innerRadius,2))},tooltipPosition:function(){var e=this._view,t=e.startAngle+(e.endAngle-e.startAngle)/2,r=(e.outerRadius-e.innerRadius)/2+e.innerRadius;return{x:e.x+Math.cos(t)*r,y:e.y+Math.sin(t)*r}},draw:function(){var e=this._chart.ctx,t=this._view,r=t.startAngle,n=t.endAngle;e.beginPath(),e.arc(t.x,t.y,t.outerRadius,r,n),e.arc(t.x,t.y,t.innerRadius,n,r,!0),e.closePath(),e.strokeStyle=t.borderColor,e.lineWidth=t.borderWidth,e.fillStyle=t.backgroundColor,e.fill(),e.lineJoin="bevel",t.borderWidth&&e.stroke()}}),globalDefaults=core_defaults.global;core_defaults._set("global",{elements:{line:{tension:.4,backgroundColor:globalDefaults.defaultColor,borderWidth:3,borderColor:globalDefaults.defaultColor,borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",capBezierPoints:!0,fill:!0}}});var element_line=core_element.extend({draw:function(){var e,t,r,n,i=this._view,a=this._chart.ctx,o=i.spanGaps,s=this._children.slice(),l=globalDefaults.elements.line,u=-1;for(this._loop&&s.length&&s.push(s[0]),a.save(),a.lineCap=i.borderCapStyle||l.borderCapStyle,a.setLineDash&&a.setLineDash(i.borderDash||l.borderDash),a.lineDashOffset=i.borderDashOffset||l.borderDashOffset,a.lineJoin=i.borderJoinStyle||l.borderJoinStyle,a.lineWidth=i.borderWidth||l.borderWidth,a.strokeStyle=i.borderColor||globalDefaults.defaultColor,a.beginPath(),u=-1,e=0;e<s.length;++e)t=s[e],r=helpers$1.previousItem(s,e),n=t._view,0===e?n.skip||(a.moveTo(n.x,n.y),u=e):(r=-1===u?r:s[u],n.skip||(u!==e-1&&!o||-1===u?a.moveTo(n.x,n.y):helpers$1.canvas.lineTo(a,r._view,t._view),u=e));a.stroke(),a.restore()}}),defaultColor=core_defaults.global.defaultColor;function xRange(e){var t=this._view;return!!t&&Math.abs(e-t.x)<t.radius+t.hitRadius}function yRange(e){var t=this._view;return!!t&&Math.abs(e-t.y)<t.radius+t.hitRadius}core_defaults._set("global",{elements:{point:{radius:3,pointStyle:"circle",backgroundColor:defaultColor,borderColor:defaultColor,borderWidth:1,hitRadius:1,hoverRadius:4,hoverBorderWidth:1}}});var element_point=core_element.extend({inRange:function(e,t){var r=this._view;return!!r&&Math.pow(e-r.x,2)+Math.pow(t-r.y,2)<Math.pow(r.hitRadius+r.radius,2)},inLabelRange:xRange,inXRange:xRange,inYRange:yRange,getCenterPoint:function(){var e=this._view;return{x:e.x,y:e.y}},getArea:function(){return Math.PI*Math.pow(this._view.radius,2)},tooltipPosition:function(){var e=this._view;return{x:e.x,y:e.y,padding:e.radius+e.borderWidth}},draw:function(e){var t=this._view,r=this._model,n=this._chart.ctx,i=t.pointStyle,a=t.rotation,o=t.radius,s=t.x,l=t.y;t.skip||(void 0===e||r.x>=e.left&&1.01*e.right>=r.x&&r.y>=e.top&&1.01*e.bottom>=r.y)&&(n.strokeStyle=t.borderColor||defaultColor,n.lineWidth=helpers$1.valueOrDefault(t.borderWidth,core_defaults.global.elements.point.borderWidth),n.fillStyle=t.backgroundColor||defaultColor,helpers$1.canvas.drawPoint(n,i,o,s,l,a))}});function isVertical(e){return void 0!==e._view.width}function getBarBounds(e){var t,r,n,i,a=e._view;if(isVertical(e)){var o=a.width/2;t=a.x-o,r=a.x+o,n=Math.min(a.y,a.base),i=Math.max(a.y,a.base)}else{var s=a.height/2;t=Math.min(a.x,a.base),r=Math.max(a.x,a.base),n=a.y-s,i=a.y+s}return{left:t,top:n,right:r,bottom:i}}core_defaults._set("global",{elements:{rectangle:{backgroundColor:core_defaults.global.defaultColor,borderColor:core_defaults.global.defaultColor,borderSkipped:"bottom",borderWidth:0}}});var element_rectangle=core_element.extend({draw:function(){var e,t,r,n,i,a,o,s=this._chart.ctx,l=this._view,u=l.borderWidth;if(l.horizontal?(e=l.base,t=l.x,r=l.y-l.height/2,n=l.y+l.height/2,i=t>e?1:-1,a=1,o=l.borderSkipped||"left"):(e=l.x-l.width/2,t=l.x+l.width/2,r=l.y,i=1,a=(n=l.base)>r?1:-1,o=l.borderSkipped||"bottom"),u){var c=Math.min(Math.abs(e-t),Math.abs(r-n)),d=(u=u>c?c:u)/2,h=e+("left"!==o?d*i:0),f=t+("right"!==o?-d*i:0),p=r+("top"!==o?d*a:0),g=n+("bottom"!==o?-d*a:0);h!==f&&(r=p,n=g),p!==g&&(e=h,t=f)}s.beginPath(),s.fillStyle=l.backgroundColor,s.strokeStyle=l.borderColor,s.lineWidth=u;var m=[[e,n],[e,r],[t,r],[t,n]],v=["bottom","left","top","right"].indexOf(o,0);function y(e){return m[(v+e)%4]}-1===v&&(v=0);var b=y(0);s.moveTo(b[0],b[1]);for(var _=1;_<4;_++)b=y(_),s.lineTo(b[0],b[1]);s.fill(),u&&s.stroke()},height:function(){var e=this._view;return e.base-e.y},inRange:function(e,t){var r=!1;if(this._view){var n=getBarBounds(this);r=e>=n.left&&e<=n.right&&t>=n.top&&t<=n.bottom}return r},inLabelRange:function(e,t){if(!this._view)return!1;var r=getBarBounds(this);return isVertical(this)?e>=r.left&&e<=r.right:t>=r.top&&t<=r.bottom},inXRange:function(e){var t=getBarBounds(this);return e>=t.left&&e<=t.right},inYRange:function(e){var t=getBarBounds(this);return e>=t.top&&e<=t.bottom},getCenterPoint:function(){var e,t,r=this._view;return isVertical(this)?(e=r.x,t=(r.y+r.base)/2):(e=(r.x+r.base)/2,t=r.y),{x:e,y:t}},getArea:function(){var e=this._view;return e.width*Math.abs(e.y-e.base)},tooltipPosition:function(){var e=this._view;return{x:e.x,y:e.y}}}),elements={},Arc=element_arc,Line=element_line,Point=element_point,Rectangle=element_rectangle;function getRelativePosition(e,t){return e.native?{x:e.x,y:e.y}:helpers$1.getRelativePosition(e,t)}function parseVisibleItems(e,t){var r,n,i,a,o;for(n=0,a=e.data.datasets.length;n<a;++n)if(e.isDatasetVisible(n))for(i=0,o=(r=e.getDatasetMeta(n)).data.length;i<o;++i){var s=r.data[i];s._view.skip||t(s)}}function getIntersectItems(e,t){var r=[];return parseVisibleItems(e,function(e){e.inRange(t.x,t.y)&&r.push(e)}),r}function getNearestItems(e,t,r,n){var i=Number.POSITIVE_INFINITY,a=[];return parseVisibleItems(e,function(e){if(!r||e.inRange(t.x,t.y)){var o=e.getCenterPoint(),s=n(t,o);s<i?(a=[e],i=s):s===i&&a.push(e)}}),a}function getDistanceMetricForAxis(e){var t=-1!==e.indexOf("x"),r=-1!==e.indexOf("y");return function(e,n){var i=t?Math.abs(e.x-n.x):0,a=r?Math.abs(e.y-n.y):0;return Math.sqrt(Math.pow(i,2)+Math.pow(a,2))}}function indexMode(e,t,r){var n=getRelativePosition(t,e);r.axis=r.axis||"x";var i=getDistanceMetricForAxis(r.axis),a=r.intersect?getIntersectItems(e,n):getNearestItems(e,n,!1,i),o=[];return a.length?(e.data.datasets.forEach(function(t,r){if(e.isDatasetVisible(r)){var n=e.getDatasetMeta(r).data[a[0]._index];n&&!n._view.skip&&o.push(n)}}),o):[]}elements.Arc=Arc,elements.Line=Line,elements.Point=Point,elements.Rectangle=Rectangle;var core_interaction={modes:{single:function(e,t){var r=getRelativePosition(t,e),n=[];return parseVisibleItems(e,function(e){if(e.inRange(r.x,r.y))return n.push(e),n}),n.slice(0,1)},label:indexMode,index:indexMode,dataset:function(e,t,r){var n=getRelativePosition(t,e);r.axis=r.axis||"xy";var i=getDistanceMetricForAxis(r.axis),a=r.intersect?getIntersectItems(e,n):getNearestItems(e,n,!1,i);return a.length>0&&(a=e.getDatasetMeta(a[0]._datasetIndex).data),a},"x-axis":function(e,t){return indexMode(e,t,{intersect:!1})},point:function(e,t){return getIntersectItems(e,getRelativePosition(t,e))},nearest:function(e,t,r){var n=getRelativePosition(t,e);r.axis=r.axis||"xy";var i=getDistanceMetricForAxis(r.axis),a=getNearestItems(e,n,r.intersect,i);return a.length>1&&a.sort(function(e,t){var r=e.getArea()-t.getArea();return 0===r&&(r=e._datasetIndex-t._datasetIndex),r}),a.slice(0,1)},x:function(e,t,r){var n=getRelativePosition(t,e),i=[],a=!1;return parseVisibleItems(e,function(e){e.inXRange(n.x)&&i.push(e),e.inRange(n.x,n.y)&&(a=!0)}),r.intersect&&!a&&(i=[]),i},y:function(e,t,r){var n=getRelativePosition(t,e),i=[],a=!1;return parseVisibleItems(e,function(e){e.inYRange(n.y)&&i.push(e),e.inRange(n.x,n.y)&&(a=!0)}),r.intersect&&!a&&(i=[]),i}}},platform_basic={acquireContext:function(e){return e&&e.canvas&&(e=e.canvas),e&&e.getContext("2d")||null}},EXPANDO_KEY="$chartjs",CSS_PREFIX="chartjs-",CSS_RENDER_MONITOR=CSS_PREFIX+"render-monitor",CSS_RENDER_ANIMATION=CSS_PREFIX+"render-animation",ANIMATION_START_EVENTS=["animationstart","webkitAnimationStart"],EVENT_TYPES={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"};function readUsedSize(e,t){var r=helpers$1.getStyle(e,t),n=r&&r.match(/^(\d+)(\.\d+)?px$/);return n?Number(n[1]):void 0}function initCanvas(e,t){var r=e.style,n=e.getAttribute("height"),i=e.getAttribute("width");if(e[EXPANDO_KEY]={initial:{height:n,width:i,style:{display:r.display,height:r.height,width:r.width}}},r.display=r.display||"block",null===i||""===i){var a=readUsedSize(e,"width");void 0!==a&&(e.width=a)}if(null===n||""===n)if(""===e.style.height)e.height=e.width/(t.options.aspectRatio||2);else{var o=readUsedSize(e,"height");void 0!==a&&(e.height=o)}return e}var supportsEventListenerOptions=function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});window.addEventListener("e",null,t)}catch(e){}return e}(),eventListenerOptions=!!supportsEventListenerOptions&&{passive:!0};function _addEventListener(e,t,r){e.addEventListener(t,r,eventListenerOptions)}function _removeEventListener(e,t,r){e.removeEventListener(t,r,eventListenerOptions)}function createEvent(e,t,r,n,i){return{type:e,chart:t,native:i||null,x:void 0!==r?r:null,y:void 0!==n?n:null}}function fromNativeEvent(e,t){var r=EVENT_TYPES[e.type]||e.type,n=helpers$1.getRelativePosition(e,t);return createEvent(r,t,n.x,n.y,e)}function throttled(e,t){var r=!1,n=[];return function(){n=Array.prototype.slice.call(arguments),t=t||this,r||(r=!0,helpers$1.requestAnimFrame.call(window,function(){r=!1,e.apply(t,n)}))}}function createResizer(e){var t=document.createElement("div"),r=CSS_PREFIX+"size-monitor",n="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;pointer-events:none;visibility:hidden;z-index:-1;";t.style.cssText=n,t.className=r,t.innerHTML='<div class="'+r+'-expand" style="'+n+'"><div style="position:absolute;width:1000000px;height:1000000px;left:0;top:0"></div></div><div class="'+r+'-shrink" style="'+n+'"><div style="position:absolute;width:200%;height:200%;left:0; top:0"></div></div>';var i=t.childNodes[0],a=t.childNodes[1];t._reset=function(){i.scrollLeft=1e6,i.scrollTop=1e6,a.scrollLeft=1e6,a.scrollTop=1e6};var o=function(){t._reset(),e()};return _addEventListener(i,"scroll",o.bind(i,"expand")),_addEventListener(a,"scroll",o.bind(a,"shrink")),t}function watchForRender(e,t){var r=e[EXPANDO_KEY]||(e[EXPANDO_KEY]={}),n=r.renderProxy=function(e){e.animationName===CSS_RENDER_ANIMATION&&t()};helpers$1.each(ANIMATION_START_EVENTS,function(t){_addEventListener(e,t,n)}),r.reflow=!!e.offsetParent,e.classList.add(CSS_RENDER_MONITOR)}function unwatchForRender(e){var t=e[EXPANDO_KEY]||{},r=t.renderProxy;r&&(helpers$1.each(ANIMATION_START_EVENTS,function(t){_removeEventListener(e,t,r)}),delete t.renderProxy),e.classList.remove(CSS_RENDER_MONITOR)}function addResizeListener(e,t,r){var n=e[EXPANDO_KEY]||(e[EXPANDO_KEY]={}),i=n.resizer=createResizer(throttled(function(){if(n.resizer)return t(createEvent("resize",r))}));watchForRender(e,function(){if(n.resizer){var t=e.parentNode;t&&t!==i.parentNode&&t.insertBefore(i,t.firstChild),i._reset()}})}function removeResizeListener(e){var t=e[EXPANDO_KEY]||{},r=t.resizer;delete t.resizer,unwatchForRender(e),r&&r.parentNode&&r.parentNode.removeChild(r)}function injectCSS(e,t){var r=e._style||document.createElement("style");e._style||(e._style=r,t="/* Chart.js */\n"+t,r.setAttribute("type","text/css"),document.getElementsByTagName("head")[0].appendChild(r)),r.appendChild(document.createTextNode(t))}var platform_dom={_enabled:"undefined"!=typeof window&&"undefined"!=typeof document,initialize:function(){var e="from{opacity:0.99}to{opacity:1}";injectCSS(this,"@-webkit-keyframes "+CSS_RENDER_ANIMATION+"{"+e+"}@keyframes "+CSS_RENDER_ANIMATION+"{"+e+"}."+CSS_RENDER_MONITOR+"{-webkit-animation:"+CSS_RENDER_ANIMATION+" 0.001s;animation:"+CSS_RENDER_ANIMATION+" 0.001s;}")},acquireContext:function(e,t){"string"==typeof e?e=document.getElementById(e):e.length&&(e=e[0]),e&&e.canvas&&(e=e.canvas);var r=e&&e.getContext&&e.getContext("2d");return r&&r.canvas===e?(initCanvas(e,t),r):null},releaseContext:function(e){var t=e.canvas;if(t[EXPANDO_KEY]){var r=t[EXPANDO_KEY].initial;["height","width"].forEach(function(e){var n=r[e];helpers$1.isNullOrUndef(n)?t.removeAttribute(e):t.setAttribute(e,n)}),helpers$1.each(r.style||{},function(e,r){t.style[r]=e}),t.width=t.width,delete t[EXPANDO_KEY]}},addEventListener:function(e,t,r){var n=e.canvas;if("resize"!==t){var i=r[EXPANDO_KEY]||(r[EXPANDO_KEY]={});_addEventListener(n,t,(i.proxies||(i.proxies={}))[e.id+"_"+t]=function(t){r(fromNativeEvent(t,e))})}else addResizeListener(n,r,e)},removeEventListener:function(e,t,r){var n=e.canvas;if("resize"!==t){var i=((r[EXPANDO_KEY]||{}).proxies||{})[e.id+"_"+t];i&&_removeEventListener(n,t,i)}else removeResizeListener(n,r)}};helpers$1.addEvent=_addEventListener,helpers$1.removeEvent=_removeEventListener;var implementation=platform_dom._enabled?platform_dom:platform_basic,platform=helpers$1.extend({initialize:function(){},acquireContext:function(){},releaseContext:function(){},addEventListener:function(){},removeEventListener:function(){}},implementation);core_defaults._set("global",{plugins:{}});var core_plugins={_plugins:[],_cacheId:0,register:function(e){var t=this._plugins;[].concat(e).forEach(function(e){-1===t.indexOf(e)&&t.push(e)}),this._cacheId++},unregister:function(e){var t=this._plugins;[].concat(e).forEach(function(e){var r=t.indexOf(e);-1!==r&&t.splice(r,1)}),this._cacheId++},clear:function(){this._plugins=[],this._cacheId++},count:function(){return this._plugins.length},getAll:function(){return this._plugins},notify:function(e,t,r){var n,i,a,o,s,l=this.descriptors(e),u=l.length;for(n=0;n<u;++n)if("function"==typeof(s=(a=(i=l[n]).plugin)[t])&&((o=[e].concat(r||[])).push(i.options),!1===s.apply(a,o)))return!1;return!0},descriptors:function(e){var t=e.$plugins||(e.$plugins={});if(t.id===this._cacheId)return t.descriptors;var r=[],n=[],i=e&&e.config||{},a=i.options&&i.options.plugins||{};return this._plugins.concat(i.plugins||[]).forEach(function(e){if(-1===r.indexOf(e)){var t=e.id,i=a[t];!1!==i&&(!0===i&&(i=helpers$1.clone(core_defaults.global.plugins[t])),r.push(e),n.push({plugin:e,options:i||{}}))}}),t.descriptors=n,t.id=this._cacheId,n},_invalidate:function(e){delete e.$plugins}},core_ticks={formatters:{values:function(e){return helpers$1.isArray(e)?e:""+e},linear:function(e,t,r){var n=r.length>3?r[2]-r[1]:r[1]-r[0];Math.abs(n)>1&&e!==Math.floor(e)&&(n=e-Math.floor(e));var i=helpers$1.log10(Math.abs(n)),a="";if(0!==e)if(Math.max(Math.abs(r[0]),Math.abs(r[r.length-1]))<1e-4){var o=helpers$1.log10(Math.abs(e));a=e.toExponential(Math.floor(o)-Math.floor(i))}else{var s=-1*Math.floor(i);s=Math.max(Math.min(s,20),0),a=e.toFixed(s)}else a="0";return a},logarithmic:function(e,t,r){var n=e/Math.pow(10,Math.floor(helpers$1.log10(e)));return 0===e?"0":1===n||2===n||5===n||0===t||t===r.length-1?e.toExponential():""}}};function labelsFromTicks(e){var t,r,n=[];for(t=0,r=e.length;t<r;++t)n.push(e[t].label);return n}function getLineValue(e,t,r){var n=e.getPixelForTick(t);return r&&(n-=0===t?(e.getPixelForTick(1)-n)/2:(n-e.getPixelForTick(t-1))/2),n}function computeTextSize(e,t,r){return helpers$1.isArray(t)?helpers$1.longestText(e,r,t):e.measureText(t).width}function parseFontOptions(e){var t=helpers$1.valueOrDefault,r=core_defaults.global,n=t(e.fontSize,r.defaultFontSize),i=t(e.fontStyle,r.defaultFontStyle),a=t(e.fontFamily,r.defaultFontFamily);return{size:n,style:i,family:a,font:helpers$1.fontString(n,i,a)}}function parseLineHeight(e){return helpers$1.options.toLineHeight(helpers$1.valueOrDefault(e.lineHeight,1.2),helpers$1.valueOrDefault(e.fontSize,core_defaults.global.defaultFontSize))}core_defaults._set("scale",{display:!0,position:"left",offset:!1,gridLines:{display:!0,color:"rgba(0, 0, 0, 0.1)",lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickMarkLength:10,zeroLineWidth:1,zeroLineColor:"rgba(0,0,0,0.25)",zeroLineBorderDash:[],zeroLineBorderDashOffset:0,offsetGridLines:!1,borderDash:[],borderDashOffset:0},scaleLabel:{display:!1,labelString:"",lineHeight:1.2,padding:{top:4,bottom:4}},ticks:{beginAtZero:!1,minRotation:0,maxRotation:50,mirror:!1,padding:0,reverse:!1,display:!0,autoSkip:!0,autoSkipPadding:0,labelOffset:0,callback:core_ticks.formatters.values,minor:{},major:{}}});var core_scale=core_element.extend({getPadding:function(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}},getTicks:function(){return this._ticks},mergeTicksOptions:function(){var e=this.options.ticks;for(var t in!1===e.minor&&(e.minor={display:!1}),!1===e.major&&(e.major={display:!1}),e)"major"!==t&&"minor"!==t&&(void 0===e.minor[t]&&(e.minor[t]=e[t]),void 0===e.major[t]&&(e.major[t]=e[t]))},beforeUpdate:function(){helpers$1.callback(this.options.beforeUpdate,[this])},update:function(e,t,r){var n,i,a,o,s,l,u=this;for(u.beforeUpdate(),u.maxWidth=e,u.maxHeight=t,u.margins=helpers$1.extend({left:0,right:0,top:0,bottom:0},r),u.longestTextCache=u.longestTextCache||{},u.beforeSetDimensions(),u.setDimensions(),u.afterSetDimensions(),u.beforeDataLimits(),u.determineDataLimits(),u.afterDataLimits(),u.beforeBuildTicks(),s=u.buildTicks()||[],u.afterBuildTicks(),u.beforeTickToLabelConversion(),a=u.convertTicksToLabels(s)||u.ticks,u.afterTickToLabelConversion(),u.ticks=a,n=0,i=a.length;n<i;++n)o=a[n],(l=s[n])?l.label=o:s.push(l={label:o,major:!1});return u._ticks=s,u.beforeCalculateTickRotation(),u.calculateTickRotation(),u.afterCalculateTickRotation(),u.beforeFit(),u.fit(),u.afterFit(),u.afterUpdate(),u.minSize},afterUpdate:function(){helpers$1.callback(this.options.afterUpdate,[this])},beforeSetDimensions:function(){helpers$1.callback(this.options.beforeSetDimensions,[this])},setDimensions:function(){var e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=0,e.right=e.width):(e.height=e.maxHeight,e.top=0,e.bottom=e.height),e.paddingLeft=0,e.paddingTop=0,e.paddingRight=0,e.paddingBottom=0},afterSetDimensions:function(){helpers$1.callback(this.options.afterSetDimensions,[this])},beforeDataLimits:function(){helpers$1.callback(this.options.beforeDataLimits,[this])},determineDataLimits:helpers$1.noop,afterDataLimits:function(){helpers$1.callback(this.options.afterDataLimits,[this])},beforeBuildTicks:function(){helpers$1.callback(this.options.beforeBuildTicks,[this])},buildTicks:helpers$1.noop,afterBuildTicks:function(){helpers$1.callback(this.options.afterBuildTicks,[this])},beforeTickToLabelConversion:function(){helpers$1.callback(this.options.beforeTickToLabelConversion,[this])},convertTicksToLabels:function(){var e=this.options.ticks;this.ticks=this.ticks.map(e.userCallback||e.callback,this)},afterTickToLabelConversion:function(){helpers$1.callback(this.options.afterTickToLabelConversion,[this])},beforeCalculateTickRotation:function(){helpers$1.callback(this.options.beforeCalculateTickRotation,[this])},calculateTickRotation:function(){var e=this,t=e.ctx,r=e.options.ticks,n=labelsFromTicks(e._ticks),i=parseFontOptions(r);t.font=i.font;var a=r.minRotation||0;if(n.length&&e.options.display&&e.isHorizontal())for(var o,s=helpers$1.longestText(t,i.font,n,e.longestTextCache),l=s,u=e.getPixelForTick(1)-e.getPixelForTick(0)-6;l>u&&a<r.maxRotation;){var c=helpers$1.toRadians(a);if(o=Math.cos(c),Math.sin(c)*s>e.maxHeight){a--;break}a++,l=o*s}e.labelRotation=a},afterCalculateTickRotation:function(){helpers$1.callback(this.options.afterCalculateTickRotation,[this])},beforeFit:function(){helpers$1.callback(this.options.beforeFit,[this])},fit:function(){var e=this,t=e.minSize={width:0,height:0},r=labelsFromTicks(e._ticks),n=e.options,i=n.ticks,a=n.scaleLabel,o=n.gridLines,s=n.display,l=e.isHorizontal(),u=parseFontOptions(i),c=n.gridLines.tickMarkLength;if(t.width=l?e.isFullWidth()?e.maxWidth-e.margins.left-e.margins.right:e.maxWidth:s&&o.drawTicks?c:0,t.height=l?s&&o.drawTicks?c:0:e.maxHeight,a.display&&s){var d=parseLineHeight(a)+helpers$1.options.toPadding(a.padding).height;l?t.height+=d:t.width+=d}if(i.display&&s){var h=helpers$1.longestText(e.ctx,u.font,r,e.longestTextCache),f=helpers$1.numberOfLabelLines(r),p=.5*u.size,g=e.options.ticks.padding;if(l){e.longestLabelWidth=h;var m=helpers$1.toRadians(e.labelRotation),v=Math.cos(m),y=Math.sin(m)*h+u.size*f+p*(f-1)+p;t.height=Math.min(e.maxHeight,t.height+y+g),e.ctx.font=u.font;var b=computeTextSize(e.ctx,r[0],u.font),_=computeTextSize(e.ctx,r[r.length-1],u.font);0!==e.labelRotation?(e.paddingLeft="bottom"===n.position?v*b+3:v*p+3,e.paddingRight="bottom"===n.position?v*p+3:v*_+3):(e.paddingLeft=b/2+3,e.paddingRight=_/2+3)}else i.mirror?h=0:h+=g+p,t.width=Math.min(e.maxWidth,t.width+h),e.paddingTop=u.size/2,e.paddingBottom=u.size/2}e.handleMargins(),e.width=t.width,e.height=t.height},handleMargins:function(){var e=this;e.margins&&(e.paddingLeft=Math.max(e.paddingLeft-e.margins.left,0),e.paddingTop=Math.max(e.paddingTop-e.margins.top,0),e.paddingRight=Math.max(e.paddingRight-e.margins.right,0),e.paddingBottom=Math.max(e.paddingBottom-e.margins.bottom,0))},afterFit:function(){helpers$1.callback(this.options.afterFit,[this])},isHorizontal:function(){return"top"===this.options.position||"bottom"===this.options.position},isFullWidth:function(){return this.options.fullWidth},getRightValue:function(e){if(helpers$1.isNullOrUndef(e))return NaN;if("number"==typeof e&&!isFinite(e))return NaN;if(e)if(this.isHorizontal()){if(void 0!==e.x)return this.getRightValue(e.x)}else if(void 0!==e.y)return this.getRightValue(e.y);return e},getLabelForIndex:helpers$1.noop,getPixelForValue:helpers$1.noop,getValueForPixel:helpers$1.noop,getPixelForTick:function(e){var t=this,r=t.options.offset;if(t.isHorizontal()){var n=(t.width-(t.paddingLeft+t.paddingRight))/Math.max(t._ticks.length-(r?0:1),1),i=n*e+t.paddingLeft;r&&(i+=n/2);var a=t.left+Math.round(i);return a+=t.isFullWidth()?t.margins.left:0}var o=t.height-(t.paddingTop+t.paddingBottom);return t.top+e*(o/(t._ticks.length-1))},getPixelForDecimal:function(e){var t=this;if(t.isHorizontal()){var r=(t.width-(t.paddingLeft+t.paddingRight))*e+t.paddingLeft,n=t.left+Math.round(r);return n+=t.isFullWidth()?t.margins.left:0}return t.top+e*t.height},getBasePixel:function(){return this.getPixelForValue(this.getBaseValue())},getBaseValue:function(){var e=this.min,t=this.max;return this.beginAtZero?0:e<0&&t<0?t:e>0&&t>0?e:0},_autoSkip:function(e){var t,r,n,i,a=this,o=a.isHorizontal(),s=a.options.ticks.minor,l=e.length,u=helpers$1.toRadians(a.labelRotation),c=Math.cos(u),d=a.longestLabelWidth*c,h=[];for(s.maxTicksLimit&&(i=s.maxTicksLimit),o&&(t=!1,(d+s.autoSkipPadding)*l>a.width-(a.paddingLeft+a.paddingRight)&&(t=1+Math.floor((d+s.autoSkipPadding)*l/(a.width-(a.paddingLeft+a.paddingRight)))),i&&l>i&&(t=Math.max(t,Math.floor(l/i)))),r=0;r<l;r++)n=e[r],(t>1&&r%t>0||r%t==0&&r+t>=l)&&r!==l-1&&delete n.label,h.push(n);return h},draw:function(e){var t=this,r=t.options;if(r.display){var n=t.ctx,i=core_defaults.global,a=r.ticks.minor,o=r.ticks.major||a,s=r.gridLines,l=r.scaleLabel,u=0!==t.labelRotation,c=t.isHorizontal(),d=a.autoSkip?t._autoSkip(t.getTicks()):t.getTicks(),h=helpers$1.valueOrDefault(a.fontColor,i.defaultFontColor),f=parseFontOptions(a),p=helpers$1.valueOrDefault(o.fontColor,i.defaultFontColor),g=parseFontOptions(o),m=s.drawTicks?s.tickMarkLength:0,v=helpers$1.valueOrDefault(l.fontColor,i.defaultFontColor),y=parseFontOptions(l),b=helpers$1.options.toPadding(l.padding),_=helpers$1.toRadians(t.labelRotation),w=[],x=t.options.gridLines.lineWidth,S="right"===r.position?t.left:t.right-x-m,k="right"===r.position?t.left+m:t.right,$="bottom"===r.position?t.top+x:t.bottom-m-x,C="bottom"===r.position?t.top+x+m:t.bottom+x;if(helpers$1.each(d,function(n,o){if(!helpers$1.isNullOrUndef(n.label)){var l,h,f,p,g,v,y,b,T,A,M,O,D,E,P=n.label;o===t.zeroLineIndex&&r.offset===s.offsetGridLines?(l=s.zeroLineWidth,h=s.zeroLineColor,f=s.zeroLineBorderDash,p=s.zeroLineBorderDashOffset):(l=helpers$1.valueAtIndexOrDefault(s.lineWidth,o),h=helpers$1.valueAtIndexOrDefault(s.color,o),f=helpers$1.valueOrDefault(s.borderDash,i.borderDash),p=helpers$1.valueOrDefault(s.borderDashOffset,i.borderDashOffset));var R="middle",I="middle",N=a.padding;if(c){var L=m+N;"bottom"===r.position?(I=u?"middle":"top",R=u?"right":"center",E=t.top+L):(I=u?"middle":"bottom",R=u?"left":"center",E=t.bottom-L);var F=getLineValue(t,o,s.offsetGridLines&&d.length>1);F<t.left&&(h="rgba(0,0,0,0)"),F+=helpers$1.aliasPixel(l),D=t.getPixelForTick(o)+a.labelOffset,g=y=T=M=F,v=$,b=C,A=e.top,O=e.bottom+x}else{var j,B="left"===r.position;a.mirror?(R=B?"left":"right",j=N):(R=B?"right":"left",j=m+N),D=B?t.right-j:t.left+j;var U=getLineValue(t,o,s.offsetGridLines&&d.length>1);U<t.top&&(h="rgba(0,0,0,0)"),U+=helpers$1.aliasPixel(l),E=t.getPixelForTick(o)+a.labelOffset,g=S,y=k,T=e.left,M=e.right+x,v=b=A=O=U}w.push({tx1:g,ty1:v,tx2:y,ty2:b,x1:T,y1:A,x2:M,y2:O,labelX:D,labelY:E,glWidth:l,glColor:h,glBorderDash:f,glBorderDashOffset:p,rotation:-1*_,label:P,major:n.major,textBaseline:I,textAlign:R})}}),helpers$1.each(w,function(e){if(s.display&&(n.save(),n.lineWidth=e.glWidth,n.strokeStyle=e.glColor,n.setLineDash&&(n.setLineDash(e.glBorderDash),n.lineDashOffset=e.glBorderDashOffset),n.beginPath(),s.drawTicks&&(n.moveTo(e.tx1,e.ty1),n.lineTo(e.tx2,e.ty2)),s.drawOnChartArea&&(n.moveTo(e.x1,e.y1),n.lineTo(e.x2,e.y2)),n.stroke(),n.restore()),a.display){n.save(),n.translate(e.labelX,e.labelY),n.rotate(e.rotation),n.font=e.major?g.font:f.font,n.fillStyle=e.major?p:h,n.textBaseline=e.textBaseline,n.textAlign=e.textAlign;var r=e.label;if(helpers$1.isArray(r))for(var i=r.length,o=1.5*f.size,l=t.isHorizontal()?0:-o*(i-1)/2,u=0;u<i;++u)n.fillText(""+r[u],0,l),l+=o;else n.fillText(r,0,0);n.restore()}}),l.display){var T,A,M=0,O=parseLineHeight(l)/2;if(c)T=t.left+(t.right-t.left)/2,A="bottom"===r.position?t.bottom-O-b.bottom:t.top+O+b.top;else{var D="left"===r.position;T=D?t.left+O+b.top:t.right-O-b.top,A=t.top+(t.bottom-t.top)/2,M=D?-.5*Math.PI:.5*Math.PI}n.save(),n.translate(T,A),n.rotate(M),n.textAlign="center",n.textBaseline="middle",n.fillStyle=v,n.font=y.font,n.fillText(l.labelString,0,0),n.restore()}if(s.drawBorder){n.lineWidth=helpers$1.valueAtIndexOrDefault(s.lineWidth,0),n.strokeStyle=helpers$1.valueAtIndexOrDefault(s.color,0);var E=t.left,P=t.right+x,R=t.top,I=t.bottom+x,N=helpers$1.aliasPixel(n.lineWidth);c?(R=I="top"===r.position?t.bottom:t.top,R+=N,I+=N):(E=P="left"===r.position?t.right:t.left,E+=N,P+=N),n.beginPath(),n.moveTo(E,R),n.lineTo(P,I),n.stroke()}}}}),core_tooltip=createCommonjsModule(function(e){core_defaults._set("global",{tooltips:{enabled:!0,custom:null,mode:"nearest",position:"average",intersect:!0,backgroundColor:"rgba(0,0,0,0.8)",titleFontStyle:"bold",titleSpacing:2,titleMarginBottom:6,titleFontColor:"#fff",titleAlign:"left",bodySpacing:2,bodyFontColor:"#fff",bodyAlign:"left",footerFontStyle:"bold",footerSpacing:2,footerMarginTop:6,footerFontColor:"#fff",footerAlign:"left",yPadding:6,xPadding:6,caretPadding:2,caretSize:5,cornerRadius:6,multiKeyBackground:"#fff",displayColors:!0,borderColor:"rgba(0,0,0,0)",borderWidth:0,callbacks:{beforeTitle:helpers$1.noop,title:function(e,t){var r="",n=t.labels,i=n?n.length:0;if(e.length>0){var a=e[0];a.xLabel?r=a.xLabel:i>0&&a.index<i&&(r=n[a.index])}return r},afterTitle:helpers$1.noop,beforeBody:helpers$1.noop,beforeLabel:helpers$1.noop,label:function(e,t){var r=t.datasets[e.datasetIndex].label||"";return r&&(r+=": "),r+=e.yLabel,r},labelColor:function(e,t){var r=t.getDatasetMeta(e.datasetIndex).data[e.index]._view;return{borderColor:r.borderColor,backgroundColor:r.backgroundColor}},labelTextColor:function(){return this._options.bodyFontColor},afterLabel:helpers$1.noop,afterBody:helpers$1.noop,beforeFooter:helpers$1.noop,footer:helpers$1.noop,afterFooter:helpers$1.noop}}});var t={average:function(e){if(!e.length)return!1;var t,r,n=0,i=0,a=0;for(t=0,r=e.length;t<r;++t){var o=e[t];if(o&&o.hasValue()){var s=o.tooltipPosition();n+=s.x,i+=s.y,++a}}return{x:Math.round(n/a),y:Math.round(i/a)}},nearest:function(e,t){var r,n,i,a=t.x,o=t.y,s=Number.POSITIVE_INFINITY;for(r=0,n=e.length;r<n;++r){var l=e[r];if(l&&l.hasValue()){var u=l.getCenterPoint(),c=helpers$1.distanceBetweenPoints(t,u);c<s&&(s=c,i=l)}}if(i){var d=i.tooltipPosition();a=d.x,o=d.y}return{x:a,y:o}}};function r(e,t){var r=helpers$1.color(e);return r.alpha(t*r.alpha()).rgbaString()}function n(e,t){return t&&(helpers$1.isArray(t)?Array.prototype.push.apply(e,t):e.push(t)),e}function i(e){return("string"==typeof e||e instanceof String)&&e.indexOf("\n")>-1?e.split("\n"):e}function a(e){var t=core_defaults.global,r=helpers$1.valueOrDefault;return{xPadding:e.xPadding,yPadding:e.yPadding,xAlign:e.xAlign,yAlign:e.yAlign,bodyFontColor:e.bodyFontColor,_bodyFontFamily:r(e.bodyFontFamily,t.defaultFontFamily),_bodyFontStyle:r(e.bodyFontStyle,t.defaultFontStyle),_bodyAlign:e.bodyAlign,bodyFontSize:r(e.bodyFontSize,t.defaultFontSize),bodySpacing:e.bodySpacing,titleFontColor:e.titleFontColor,_titleFontFamily:r(e.titleFontFamily,t.defaultFontFamily),_titleFontStyle:r(e.titleFontStyle,t.defaultFontStyle),titleFontSize:r(e.titleFontSize,t.defaultFontSize),_titleAlign:e.titleAlign,titleSpacing:e.titleSpacing,titleMarginBottom:e.titleMarginBottom,footerFontColor:e.footerFontColor,_footerFontFamily:r(e.footerFontFamily,t.defaultFontFamily),_footerFontStyle:r(e.footerFontStyle,t.defaultFontStyle),footerFontSize:r(e.footerFontSize,t.defaultFontSize),_footerAlign:e.footerAlign,footerSpacing:e.footerSpacing,footerMarginTop:e.footerMarginTop,caretSize:e.caretSize,cornerRadius:e.cornerRadius,backgroundColor:e.backgroundColor,opacity:0,legendColorBackground:e.multiKeyBackground,displayColors:e.displayColors,borderColor:e.borderColor,borderWidth:e.borderWidth}}function o(e){return n([],i(e))}(e.exports=core_element.extend({initialize:function(){this._model=a(this._options),this._lastActive=[]},getTitle:function(){var e=this._options.callbacks,t=e.beforeTitle.apply(this,arguments),r=e.title.apply(this,arguments),a=e.afterTitle.apply(this,arguments),o=[];return o=n(o=n(o=n(o,i(t)),i(r)),i(a))},getBeforeBody:function(){return o(this._options.callbacks.beforeBody.apply(this,arguments))},getBody:function(e,t){var r=this,a=r._options.callbacks,o=[];return helpers$1.each(e,function(e){var s={before:[],lines:[],after:[]};n(s.before,i(a.beforeLabel.call(r,e,t))),n(s.lines,a.label.call(r,e,t)),n(s.after,i(a.afterLabel.call(r,e,t))),o.push(s)}),o},getAfterBody:function(){return o(this._options.callbacks.afterBody.apply(this,arguments))},getFooter:function(){var e=this._options.callbacks,t=e.beforeFooter.apply(this,arguments),r=e.footer.apply(this,arguments),a=e.afterFooter.apply(this,arguments),o=[];return o=n(o=n(o=n(o,i(t)),i(r)),i(a))},update:function(e){var r,n,i,o,s,l,u,c=this,d=c._options,h=c._model,f=c._model=a(d),p=c._active,g=c._data,m={xAlign:h.xAlign,yAlign:h.yAlign},v={x:h.x,y:h.y},y={width:h.width,height:h.height},b={x:h.caretX,y:h.caretY};if(p.length){f.opacity=1;var _=[],w=[];b=t[d.position].call(c,p,c._eventPosition);var x=[];for(r=0,n=p.length;r<n;++r)x.push((i=p[r],o=void 0,s=void 0,void 0,void 0,o=i._xScale,s=i._yScale||i._scale,l=i._index,u=i._datasetIndex,{xLabel:o?o.getLabelForIndex(l,u):"",yLabel:s?s.getLabelForIndex(l,u):"",index:l,datasetIndex:u,x:i._model.x,y:i._model.y}));d.filter&&(x=x.filter(function(e){return d.filter(e,g)})),d.itemSort&&(x=x.sort(function(e,t){return d.itemSort(e,t,g)})),helpers$1.each(x,function(e){_.push(d.callbacks.labelColor.call(c,e,c._chart)),w.push(d.callbacks.labelTextColor.call(c,e,c._chart))}),f.title=c.getTitle(x,g),f.beforeBody=c.getBeforeBody(x,g),f.body=c.getBody(x,g),f.afterBody=c.getAfterBody(x,g),f.footer=c.getFooter(x,g),f.x=Math.round(b.x),f.y=Math.round(b.y),f.caretPadding=d.caretPadding,f.labelColors=_,f.labelTextColors=w,f.dataPoints=x,v=function(e,t,r,n){var i=e.x,a=e.y,o=e.caretSize,s=e.caretPadding,l=e.cornerRadius,u=r.xAlign,c=r.yAlign,d=o+s,h=l+s;return"right"===u?i-=t.width:"center"===u&&((i-=t.width/2)+t.width>n.width&&(i=n.width-t.width),i<0&&(i=0)),"top"===c?a+=d:a-="bottom"===c?t.height+d:t.height/2,"center"===c?"left"===u?i+=d:"right"===u&&(i-=d):"left"===u?i-=h:"right"===u&&(i+=h),{x:i,y:a}}(f,y=function(e,t){var r=e._chart.ctx,n=2*t.yPadding,i=0,a=t.body,o=a.reduce(function(e,t){return e+t.before.length+t.lines.length+t.after.length},0);o+=t.beforeBody.length+t.afterBody.length;var s=t.title.length,l=t.footer.length,u=t.titleFontSize,c=t.bodyFontSize,d=t.footerFontSize;n+=s*u,n+=s?(s-1)*t.titleSpacing:0,n+=s?t.titleMarginBottom:0,n+=o*c,n+=o?(o-1)*t.bodySpacing:0,n+=l?t.footerMarginTop:0,n+=l*d,n+=l?(l-1)*t.footerSpacing:0;var h=0,f=function(e){i=Math.max(i,r.measureText(e).width+h)};return r.font=helpers$1.fontString(u,t._titleFontStyle,t._titleFontFamily),helpers$1.each(t.title,f),r.font=helpers$1.fontString(c,t._bodyFontStyle,t._bodyFontFamily),helpers$1.each(t.beforeBody.concat(t.afterBody),f),h=t.displayColors?c+2:0,helpers$1.each(a,function(e){helpers$1.each(e.before,f),helpers$1.each(e.lines,f),helpers$1.each(e.after,f)}),h=0,r.font=helpers$1.fontString(d,t._footerFontStyle,t._footerFontFamily),helpers$1.each(t.footer,f),{width:i+=2*t.xPadding,height:n}}(this,f),m=function(e,t){var r,n,i,a,o,s=e._model,l=e._chart,u=e._chart.chartArea,c="center",d="center";s.y<t.height?d="top":s.y>l.height-t.height&&(d="bottom");var h=(u.left+u.right)/2,f=(u.top+u.bottom)/2;"center"===d?(r=function(e){return e<=h},n=function(e){return e>h}):(r=function(e){return e<=t.width/2},n=function(e){return e>=l.width-t.width/2}),i=function(e){return e+t.width+s.caretSize+s.caretPadding>l.width},a=function(e){return e-t.width-s.caretSize-s.caretPadding<0},o=function(e){return e<=f?"top":"bottom"},r(s.x)?(c="left",i(s.x)&&(c="center",d=o(s.y))):n(s.x)&&(c="right",a(s.x)&&(c="center",d=o(s.y)));var p=e._options;return{xAlign:p.xAlign?p.xAlign:c,yAlign:p.yAlign?p.yAlign:d}}(this,y),c._chart)}else f.opacity=0;return f.xAlign=m.xAlign,f.yAlign=m.yAlign,f.x=v.x,f.y=v.y,f.width=y.width,f.height=y.height,f.caretX=b.x,f.caretY=b.y,c._model=f,e&&d.custom&&d.custom.call(c,f),c},drawCaret:function(e,t){var r=this._chart.ctx,n=this._view,i=this.getCaretPosition(e,t,n);r.lineTo(i.x1,i.y1),r.lineTo(i.x2,i.y2),r.lineTo(i.x3,i.y3)},getCaretPosition:function(e,t,r){var n,i,a,o,s,l,u=r.caretSize,c=r.cornerRadius,d=r.xAlign,h=r.yAlign,f=e.x,p=e.y,g=t.width,m=t.height;if("center"===h)s=p+m/2,"left"===d?(i=(n=f)-u,a=n,o=s+u,l=s-u):(i=(n=f+g)+u,a=n,o=s-u,l=s+u);else if("left"===d?(n=(i=f+c+u)-u,a=i+u):"right"===d?(n=(i=f+g-c-u)-u,a=i+u):(n=(i=r.caretX)-u,a=i+u),"top"===h)s=(o=p)-u,l=o;else{s=(o=p+m)+u,l=o;var v=a;a=n,n=v}return{x1:n,x2:i,x3:a,y1:o,y2:s,y3:l}},drawTitle:function(e,t,n,i){var a=t.title;if(a.length){n.textAlign=t._titleAlign,n.textBaseline="top";var o,s,l=t.titleFontSize,u=t.titleSpacing;for(n.fillStyle=r(t.titleFontColor,i),n.font=helpers$1.fontString(l,t._titleFontStyle,t._titleFontFamily),o=0,s=a.length;o<s;++o)n.fillText(a[o],e.x,e.y),e.y+=l+u,o+1===a.length&&(e.y+=t.titleMarginBottom-u)}},drawBody:function(e,t,n,i){var a=t.bodyFontSize,o=t.bodySpacing,s=t.body;n.textAlign=t._bodyAlign,n.textBaseline="top",n.font=helpers$1.fontString(a,t._bodyFontStyle,t._bodyFontFamily);var l=0,u=function(t){n.fillText(t,e.x+l,e.y),e.y+=a+o};n.fillStyle=r(t.bodyFontColor,i),helpers$1.each(t.beforeBody,u);var c=t.displayColors;l=c?a+2:0,helpers$1.each(s,function(o,s){var l=r(t.labelTextColors[s],i);n.fillStyle=l,helpers$1.each(o.before,u),helpers$1.each(o.lines,function(o){c&&(n.fillStyle=r(t.legendColorBackground,i),n.fillRect(e.x,e.y,a,a),n.lineWidth=1,n.strokeStyle=r(t.labelColors[s].borderColor,i),n.strokeRect(e.x,e.y,a,a),n.fillStyle=r(t.labelColors[s].backgroundColor,i),n.fillRect(e.x+1,e.y+1,a-2,a-2),n.fillStyle=l),u(o)}),helpers$1.each(o.after,u)}),l=0,helpers$1.each(t.afterBody,u),e.y-=o},drawFooter:function(e,t,n,i){var a=t.footer;a.length&&(e.y+=t.footerMarginTop,n.textAlign=t._footerAlign,n.textBaseline="top",n.fillStyle=r(t.footerFontColor,i),n.font=helpers$1.fontString(t.footerFontSize,t._footerFontStyle,t._footerFontFamily),helpers$1.each(a,function(r){n.fillText(r,e.x,e.y),e.y+=t.footerFontSize+t.footerSpacing}))},drawBackground:function(e,t,n,i,a){n.fillStyle=r(t.backgroundColor,a),n.strokeStyle=r(t.borderColor,a),n.lineWidth=t.borderWidth;var o=t.xAlign,s=t.yAlign,l=e.x,u=e.y,c=i.width,d=i.height,h=t.cornerRadius;n.beginPath(),n.moveTo(l+h,u),"top"===s&&this.drawCaret(e,i),n.lineTo(l+c-h,u),n.quadraticCurveTo(l+c,u,l+c,u+h),"center"===s&&"right"===o&&this.drawCaret(e,i),n.lineTo(l+c,u+d-h),n.quadraticCurveTo(l+c,u+d,l+c-h,u+d),"bottom"===s&&this.drawCaret(e,i),n.lineTo(l+h,u+d),n.quadraticCurveTo(l,u+d,l,u+d-h),"center"===s&&"left"===o&&this.drawCaret(e,i),n.lineTo(l,u+h),n.quadraticCurveTo(l,u,l+h,u),n.closePath(),n.fill(),t.borderWidth>0&&n.stroke()},draw:function(){var e=this._chart.ctx,t=this._view;if(0!==t.opacity){var r={width:t.width,height:t.height},n={x:t.x,y:t.y},i=Math.abs(t.opacity<.001)?0:t.opacity,a=t.title.length||t.beforeBody.length||t.body.length||t.afterBody.length||t.footer.length;this._options.enabled&&a&&(this.drawBackground(n,t,e,r,i),n.x+=t.xPadding,n.y+=t.yPadding,this.drawTitle(n,t,e,i),this.drawBody(n,t,e,i),this.drawFooter(n,t,e,i))}},handleEvent:function(e){var t,r=this,n=r._options;return r._lastActive=r._lastActive||[],"mouseout"===e.type?r._active=[]:r._active=r._chart.getElementsAtEventForMode(e,n.mode,n),(t=!helpers$1.arrayEquals(r._active,r._lastActive))&&(r._lastActive=r._active,(n.enabled||n.custom)&&(r._eventPosition={x:e.x,y:e.y},r.update(!0),r.pivot())),t}})).positioners=t}),core_controller=function(e){function t(e){return"top"===e||"bottom"===e}e.types={},e.instances={},e.controllers={},helpers$1.extend(e.prototype,{construct:function(t,r){var n=this;r=function(e){var t=(e=e||{}).data=e.data||{};return t.datasets=t.datasets||[],t.labels=t.labels||[],e.options=helpers$1.configMerge(core_defaults.global,core_defaults[e.type],e.options||{}),e}(r);var i=platform.acquireContext(t,r),a=i&&i.canvas,o=a&&a.height,s=a&&a.width;n.id=helpers$1.uid(),n.ctx=i,n.canvas=a,n.config=r,n.width=s,n.height=o,n.aspectRatio=o?s/o:null,n.options=r.options,n._bufferedRender=!1,n.chart=n,n.controller=n,e.instances[n.id]=n,Object.defineProperty(n,"data",{get:function(){return n.config.data},set:function(e){n.config.data=e}}),i&&a?(n.initialize(),n.update()):console.error("Failed to create chart: can't acquire context from the given item")},initialize:function(){var e=this;return core_plugins.notify(e,"beforeInit"),helpers$1.retinaScale(e,e.options.devicePixelRatio),e.bindEvents(),e.options.responsive&&e.resize(!0),e.ensureScalesHaveIDs(),e.buildOrUpdateScales(),e.initToolTip(),core_plugins.notify(e,"afterInit"),e},clear:function(){return helpers$1.canvas.clear(this),this},stop:function(){return core_animations.cancelAnimation(this),this},resize:function(e){var t=this,r=t.options,n=t.canvas,i=r.maintainAspectRatio&&t.aspectRatio||null,a=Math.max(0,Math.floor(helpers$1.getMaximumWidth(n))),o=Math.max(0,Math.floor(i?a/i:helpers$1.getMaximumHeight(n)));if((t.width!==a||t.height!==o)&&(n.width=t.width=a,n.height=t.height=o,n.style.width=a+"px",n.style.height=o+"px",helpers$1.retinaScale(t,r.devicePixelRatio),!e)){var s={width:a,height:o};core_plugins.notify(t,"resize",[s]),t.options.onResize&&t.options.onResize(t,s),t.stop(),t.update({duration:t.options.responsiveAnimationDuration})}},ensureScalesHaveIDs:function(){var e=this.options,t=e.scales||{},r=e.scale;helpers$1.each(t.xAxes,function(e,t){e.id=e.id||"x-axis-"+t}),helpers$1.each(t.yAxes,function(e,t){e.id=e.id||"y-axis-"+t}),r&&(r.id=r.id||"scale")},buildOrUpdateScales:function(){var e=this,r=e.options,n=e.scales||{},i=[],a=Object.keys(n).reduce(function(e,t){return e[t]=!1,e},{});r.scales&&(i=i.concat((r.scales.xAxes||[]).map(function(e){return{options:e,dtype:"category",dposition:"bottom"}}),(r.scales.yAxes||[]).map(function(e){return{options:e,dtype:"linear",dposition:"left"}}))),r.scale&&i.push({options:r.scale,dtype:"radialLinear",isDefault:!0,dposition:"chartArea"}),helpers$1.each(i,function(r){var i=r.options,o=i.id,s=helpers$1.valueOrDefault(i.type,r.dtype);t(i.position)!==t(r.dposition)&&(i.position=r.dposition),a[o]=!0;var l=null;if(o in n&&n[o].type===s)(l=n[o]).options=i,l.ctx=e.ctx,l.chart=e;else{var u=core_scaleService.getScaleConstructor(s);if(!u)return;l=new u({id:o,type:s,options:i,ctx:e.ctx,chart:e}),n[l.id]=l}l.mergeTicksOptions(),r.isDefault&&(e.scale=l)}),helpers$1.each(a,function(e,t){e||delete n[t]}),e.scales=n,core_scaleService.addScalesToLayout(this)},buildOrUpdateControllers:function(){var t=this,r=[],n=[];return helpers$1.each(t.data.datasets,function(i,a){var o=t.getDatasetMeta(a),s=i.type||t.config.type;if(o.type&&o.type!==s&&(t.destroyDatasetMeta(a),o=t.getDatasetMeta(a)),o.type=s,r.push(o.type),o.controller)o.controller.updateIndex(a),o.controller.linkScales();else{var l=e.controllers[o.type];if(void 0===l)throw new Error('"'+o.type+'" is not a chart type.');o.controller=new l(t,a),n.push(o.controller)}},t),n},resetElements:function(){var e=this;helpers$1.each(e.data.datasets,function(t,r){e.getDatasetMeta(r).controller.reset()},e)},reset:function(){this.resetElements(),this.tooltip.initialize()},update:function(t){var r,n,i=this;if(t&&"object"===(void 0===t?"undefined":_typeof(t))||(t={duration:t,lazy:arguments[1]}),n=(r=i).options,helpers$1.each(r.scales,function(e){core_layouts.removeBox(r,e)}),n=helpers$1.configMerge(e.defaults.global,e.defaults[r.config.type],n),r.options=r.config.options=n,r.ensureScalesHaveIDs(),r.buildOrUpdateScales(),r.tooltip._options=n.tooltips,r.tooltip.initialize(),core_plugins._invalidate(i),!1!==core_plugins.notify(i,"beforeUpdate")){i.tooltip._data=i.data;var a=i.buildOrUpdateControllers();helpers$1.each(i.data.datasets,function(e,t){i.getDatasetMeta(t).controller.buildOrUpdateElements()},i),i.updateLayout(),i.options.animation&&i.options.animation.duration&&helpers$1.each(a,function(e){e.reset()}),i.updateDatasets(),i.tooltip.initialize(),i.lastActive=[],core_plugins.notify(i,"afterUpdate"),i._bufferedRender?i._bufferedRequest={duration:t.duration,easing:t.easing,lazy:t.lazy}:i.render(t)}},updateLayout:function(){!1!==core_plugins.notify(this,"beforeLayout")&&(core_layouts.update(this,this.width,this.height),core_plugins.notify(this,"afterScaleUpdate"),core_plugins.notify(this,"afterLayout"))},updateDatasets:function(){if(!1!==core_plugins.notify(this,"beforeDatasetsUpdate")){for(var e=0,t=this.data.datasets.length;e<t;++e)this.updateDataset(e);core_plugins.notify(this,"afterDatasetsUpdate")}},updateDataset:function(e){var t=this.getDatasetMeta(e),r={meta:t,index:e};!1!==core_plugins.notify(this,"beforeDatasetUpdate",[r])&&(t.controller.update(),core_plugins.notify(this,"afterDatasetUpdate",[r]))},render:function(e){var t=this;e&&"object"===(void 0===e?"undefined":_typeof(e))||(e={duration:e,lazy:arguments[1]});var r=e.duration,n=e.lazy;if(!1!==core_plugins.notify(t,"beforeRender")){var i=t.options.animation,a=function(e){core_plugins.notify(t,"afterRender"),helpers$1.callback(i&&i.onComplete,[e],t)};if(i&&(void 0!==r&&0!==r||void 0===r&&0!==i.duration)){var o=new core_animation({numSteps:(r||i.duration)/16.66,easing:e.easing||i.easing,render:function(e,t){var r=helpers$1.easing.effects[t.easing],n=t.currentStep,i=n/t.numSteps;e.draw(r(i),i,n)},onAnimationProgress:i.onProgress,onAnimationComplete:a});core_animations.addAnimation(t,o,r,n)}else t.draw(),a(new core_animation({numSteps:0,chart:t}));return t}},draw:function(e){var t=this;t.clear(),helpers$1.isNullOrUndef(e)&&(e=1),t.transition(e),t.width<=0||t.height<=0||!1!==core_plugins.notify(t,"beforeDraw",[e])&&(helpers$1.each(t.boxes,function(e){e.draw(t.chartArea)},t),t.scale&&t.scale.draw(),t.drawDatasets(e),t._drawTooltip(e),core_plugins.notify(t,"afterDraw",[e]))},transition:function(e){for(var t=0,r=(this.data.datasets||[]).length;t<r;++t)this.isDatasetVisible(t)&&this.getDatasetMeta(t).controller.transition(e);this.tooltip.transition(e)},drawDatasets:function(e){var t=this;if(!1!==core_plugins.notify(t,"beforeDatasetsDraw",[e])){for(var r=(t.data.datasets||[]).length-1;r>=0;--r)t.isDatasetVisible(r)&&t.drawDataset(r,e);core_plugins.notify(t,"afterDatasetsDraw",[e])}},drawDataset:function(e,t){var r=this.getDatasetMeta(e),n={meta:r,index:e,easingValue:t};!1!==core_plugins.notify(this,"beforeDatasetDraw",[n])&&(r.controller.draw(t),core_plugins.notify(this,"afterDatasetDraw",[n]))},_drawTooltip:function(e){var t=this.tooltip,r={tooltip:t,easingValue:e};!1!==core_plugins.notify(this,"beforeTooltipDraw",[r])&&(t.draw(),core_plugins.notify(this,"afterTooltipDraw",[r]))},getElementAtEvent:function(e){return core_interaction.modes.single(this,e)},getElementsAtEvent:function(e){return core_interaction.modes.label(this,e,{intersect:!0})},getElementsAtXAxis:function(e){return core_interaction.modes["x-axis"](this,e,{intersect:!0})},getElementsAtEventForMode:function(e,t,r){var n=core_interaction.modes[t];return"function"==typeof n?n(this,e,r):[]},getDatasetAtEvent:function(e){return core_interaction.modes.dataset(this,e,{intersect:!0})},getDatasetMeta:function(e){var t=this.data.datasets[e];t._meta||(t._meta={});var r=t._meta[this.id];return r||(r=t._meta[this.id]={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null}),r},getVisibleDatasetCount:function(){for(var e=0,t=0,r=this.data.datasets.length;t<r;++t)this.isDatasetVisible(t)&&e++;return e},isDatasetVisible:function(e){var t=this.getDatasetMeta(e);return"boolean"==typeof t.hidden?!t.hidden:!this.data.datasets[e].hidden},generateLegend:function(){return this.options.legendCallback(this)},destroyDatasetMeta:function(e){var t=this.id,r=this.data.datasets[e],n=r._meta&&r._meta[t];n&&(n.controller.destroy(),delete r._meta[t])},destroy:function(){var t,r,n=this,i=n.canvas;for(n.stop(),t=0,r=n.data.datasets.length;t<r;++t)n.destroyDatasetMeta(t);i&&(n.unbindEvents(),helpers$1.canvas.clear(n),platform.releaseContext(n.ctx),n.canvas=null,n.ctx=null),core_plugins.notify(n,"destroy"),delete e.instances[n.id]},toBase64Image:function(){return this.canvas.toDataURL.apply(this.canvas,arguments)},initToolTip:function(){var e=this;e.tooltip=new core_tooltip({_chart:e,_chartInstance:e,_data:e.data,_options:e.options.tooltips},e)},bindEvents:function(){var e=this,t=e._listeners={},r=function(){e.eventHandler.apply(e,arguments)};helpers$1.each(e.options.events,function(n){platform.addEventListener(e,n,r),t[n]=r}),e.options.responsive&&(r=function(){e.resize()},platform.addEventListener(e,"resize",r),t.resize=r)},unbindEvents:function(){var e=this,t=e._listeners;t&&(delete e._listeners,helpers$1.each(t,function(t,r){platform.removeEventListener(e,r,t)}))},updateHoverStyle:function(e,t,r){var n,i,a,o=r?"setHoverStyle":"removeHoverStyle";for(i=0,a=e.length;i<a;++i)(n=e[i])&&this.getDatasetMeta(n._datasetIndex).controller[o](n)},eventHandler:function(e){var t=this,r=t.tooltip;if(!1!==core_plugins.notify(t,"beforeEvent",[e])){t._bufferedRender=!0,t._bufferedRequest=null;var n=t.handleEvent(e);r&&(n=r._start?r.handleEvent(e):n|r.handleEvent(e)),core_plugins.notify(t,"afterEvent",[e]);var i=t._bufferedRequest;return i?t.render(i):n&&!t.animating&&(t.stop(),t.render({duration:t.options.hover.animationDuration,lazy:!0})),t._bufferedRender=!1,t._bufferedRequest=null,t}},handleEvent:function(e){var t,r=this,n=r.options||{},i=n.hover;return r.lastActive=r.lastActive||[],"mouseout"===e.type?r.active=[]:r.active=r.getElementsAtEventForMode(e,i.mode,i),helpers$1.callback(n.onHover||n.hover.onHover,[e.native,r.active],r),"mouseup"!==e.type&&"click"!==e.type||n.onClick&&n.onClick.call(r,e.native,r.active),r.lastActive.length&&r.updateHoverStyle(r.lastActive,i.mode,!1),r.active.length&&i.mode&&r.updateHoverStyle(r.active,i.mode,!0),t=!helpers$1.arrayEquals(r.active,r.lastActive),r.lastActive=r.active,t}}),e.Controller=e},core_datasetController=function(e){var t=["push","pop","shift","splice","unshift"];function r(e,r){var n=e._chartjs;if(n){var i=n.listeners,a=i.indexOf(r);-1!==a&&i.splice(a,1),i.length>0||(t.forEach(function(t){delete e[t]}),delete e._chartjs)}}e.DatasetController=function(e,t){this.initialize(e,t)},helpers$1.extend(e.DatasetController.prototype,{datasetElementType:null,dataElementType:null,initialize:function(e,t){this.chart=e,this.index=t,this.linkScales(),this.addElements()},updateIndex:function(e){this.index=e},linkScales:function(){var e=this,t=e.getMeta(),r=e.getDataset();null!==t.xAxisID&&t.xAxisID in e.chart.scales||(t.xAxisID=r.xAxisID||e.chart.options.scales.xAxes[0].id),null!==t.yAxisID&&t.yAxisID in e.chart.scales||(t.yAxisID=r.yAxisID||e.chart.options.scales.yAxes[0].id)},getDataset:function(){return this.chart.data.datasets[this.index]},getMeta:function(){return this.chart.getDatasetMeta(this.index)},getScaleForId:function(e){return this.chart.scales[e]},reset:function(){this.update(!0)},destroy:function(){this._data&&r(this._data,this)},createMetaDataset:function(){var e=this.datasetElementType;return e&&new e({_chart:this.chart,_datasetIndex:this.index})},createMetaData:function(e){var t=this.dataElementType;return t&&new t({_chart:this.chart,_datasetIndex:this.index,_index:e})},addElements:function(){var e,t,r=this.getMeta(),n=this.getDataset().data||[],i=r.data;for(e=0,t=n.length;e<t;++e)i[e]=i[e]||this.createMetaData(e);r.dataset=r.dataset||this.createMetaDataset()},addElementAndReset:function(e){var t=this.createMetaData(e);this.getMeta().data.splice(e,0,t),this.updateElement(t,e,!0)},buildOrUpdateElements:function(){var e,n,i=this,a=i.getDataset(),o=a.data||(a.data=[]);i._data!==o&&(i._data&&r(i._data,i),n=i,(e=o)._chartjs?e._chartjs.listeners.push(n):(Object.defineProperty(e,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[n]}}),t.forEach(function(t){var r="onData"+t.charAt(0).toUpperCase()+t.slice(1),n=e[t];Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:function(){var t=Array.prototype.slice.call(arguments),i=n.apply(this,t);return helpers$1.each(e._chartjs.listeners,function(e){"function"==typeof e[r]&&e[r].apply(e,t)}),i}})})),i._data=o),i.resyncElements()},update:helpers$1.noop,transition:function(e){for(var t=this.getMeta(),r=t.data||[],n=r.length,i=0;i<n;++i)r[i].transition(e);t.dataset&&t.dataset.transition(e)},draw:function(){var e=this.getMeta(),t=e.data||[],r=t.length,n=0;for(e.dataset&&e.dataset.draw();n<r;++n)t[n].draw()},removeHoverStyle:function(e){helpers$1.merge(e._model,e.$previousStyle||{}),delete e.$previousStyle},setHoverStyle:function(e){var t=this.chart.data.datasets[e._datasetIndex],r=e._index,n=e.custom||{},i=helpers$1.valueAtIndexOrDefault,a=helpers$1.getHoverColor,o=e._model;e.$previousStyle={backgroundColor:o.backgroundColor,borderColor:o.borderColor,borderWidth:o.borderWidth},o.backgroundColor=n.hoverBackgroundColor?n.hoverBackgroundColor:i(t.hoverBackgroundColor,r,a(o.backgroundColor)),o.borderColor=n.hoverBorderColor?n.hoverBorderColor:i(t.hoverBorderColor,r,a(o.borderColor)),o.borderWidth=n.hoverBorderWidth?n.hoverBorderWidth:i(t.hoverBorderWidth,r,o.borderWidth)},resyncElements:function(){var e=this.getMeta(),t=this.getDataset().data,r=e.data.length,n=t.length;n<r?e.data.splice(n,r-n):n>r&&this.insertElements(r,n-r)},insertElements:function(e,t){for(var r=0;r<t;++r)this.addElementAndReset(e+r)},onDataPush:function(){this.insertElements(this.getDataset().data.length-1,arguments.length)},onDataPop:function(){this.getMeta().data.pop()},onDataShift:function(){this.getMeta().data.shift()},onDataSplice:function(e,t){this.getMeta().data.splice(e,t),this.insertElements(e,arguments.length-2)},onDataUnshift:function(){this.insertElements(0,arguments.length)}}),e.DatasetController.extend=helpers$1.inherits};function generateTicks(e,t){var r,n,i,a=[];if(e.stepSize&&e.stepSize>0)i=e.stepSize;else{var o=helpers$1.niceNum(t.max-t.min,!1);i=helpers$1.niceNum(o/(e.maxTicks-1),!0),void 0!==(n=e.precision)&&(r=Math.pow(10,n),i=Math.ceil(i*r)/r)}var s=Math.floor(t.min/i)*i,l=Math.ceil(t.max/i)*i;helpers$1.isNullOrUndef(e.min)||helpers$1.isNullOrUndef(e.max)||!e.stepSize||helpers$1.almostWhole((e.max-e.min)/e.stepSize,i/1e3)&&(s=e.min,l=e.max);var u=(l-s)/i;u=helpers$1.almostEquals(u,Math.round(u),i/1e3)?Math.round(u):Math.ceil(u),n=1,i<1&&(n=Math.pow(10,1-Math.floor(helpers$1.log10(i))),s=Math.round(s*n)/n,l=Math.round(l*n)/n),a.push(void 0!==e.min?e.min:s);for(var c=1;c<u;++c)a.push(Math.round((s+c*i)*n)/n);return a.push(void 0!==e.max?e.max:l),a}var scale_linearbase=function(e){var t=helpers$1.noop;e.LinearScaleBase=core_scale.extend({getRightValue:function(e){return"string"==typeof e?+e:core_scale.prototype.getRightValue.call(this,e)},handleTickRangeOptions:function(){var e=this,t=e.options.ticks;if(t.beginAtZero){var r=helpers$1.sign(e.min),n=helpers$1.sign(e.max);r<0&&n<0?e.max=0:r>0&&n>0&&(e.min=0)}var i=void 0!==t.min||void 0!==t.suggestedMin,a=void 0!==t.max||void 0!==t.suggestedMax;void 0!==t.min?e.min=t.min:void 0!==t.suggestedMin&&(null===e.min?e.min=t.suggestedMin:e.min=Math.min(e.min,t.suggestedMin)),void 0!==t.max?e.max=t.max:void 0!==t.suggestedMax&&(null===e.max?e.max=t.suggestedMax:e.max=Math.max(e.max,t.suggestedMax)),i!==a&&e.min>=e.max&&(i?e.max=e.min+1:e.min=e.max-1),e.min===e.max&&(e.max++,t.beginAtZero||e.min--)},getTickLimit:t,handleDirectionalChanges:t,buildTicks:function(){var e=this,t=e.options.ticks,r=e.getTickLimit(),n={maxTicks:r=Math.max(2,r),min:t.min,max:t.max,precision:t.precision,stepSize:helpers$1.valueOrDefault(t.fixedStepSize,t.stepSize)},i=e.ticks=generateTicks(n,e);e.handleDirectionalChanges(),e.max=helpers$1.max(i),e.min=helpers$1.min(i),t.reverse?(i.reverse(),e.start=e.max,e.end=e.min):(e.start=e.min,e.end=e.max)},convertTicksToLabels:function(){var e=this;e.ticksAsNumbers=e.ticks.slice(),e.zeroLineIndex=e.ticks.indexOf(0),core_scale.prototype.convertTicksToLabels.call(e)}})},scale_category=function(){var e=core_scale.extend({getLabels:function(){var e=this.chart.data;return this.options.labels||(this.isHorizontal()?e.xLabels:e.yLabels)||e.labels},determineDataLimits:function(){var e,t=this,r=t.getLabels();t.minIndex=0,t.maxIndex=r.length-1,void 0!==t.options.ticks.min&&(e=r.indexOf(t.options.ticks.min),t.minIndex=-1!==e?e:t.minIndex),void 0!==t.options.ticks.max&&(e=r.indexOf(t.options.ticks.max),t.maxIndex=-1!==e?e:t.maxIndex),t.min=r[t.minIndex],t.max=r[t.maxIndex]},buildTicks:function(){var e=this,t=e.getLabels();e.ticks=0===e.minIndex&&e.maxIndex===t.length-1?t:t.slice(e.minIndex,e.maxIndex+1)},getLabelForIndex:function(e,t){var r=this,n=r.chart.data,i=r.isHorizontal();return n.yLabels&&!i?r.getRightValue(n.datasets[t].data[e]):r.ticks[e-r.minIndex]},getPixelForValue:function(e,t){var r,n=this,i=n.options.offset,a=Math.max(n.maxIndex+1-n.minIndex-(i?0:1),1);if(void 0!==e&&null!==e&&(r=n.isHorizontal()?e.x:e.y),void 0!==r||void 0!==e&&isNaN(t)){var o=n.getLabels();e=r||e;var s=o.indexOf(e);t=-1!==s?s:t}if(n.isHorizontal()){var l=n.width/a,u=l*(t-n.minIndex);return i&&(u+=l/2),n.left+Math.round(u)}var c=n.height/a,d=c*(t-n.minIndex);return i&&(d+=c/2),n.top+Math.round(d)},getPixelForTick:function(e){return this.getPixelForValue(this.ticks[e],e+this.minIndex,null)},getValueForPixel:function(e){var t=this,r=t.options.offset,n=Math.max(t._ticks.length-(r?0:1),1),i=t.isHorizontal(),a=(i?t.width:t.height)/n;return e-=i?t.left:t.top,r&&(e-=a/2),(e<=0?0:Math.round(e/a))+t.minIndex},getBasePixel:function(){return this.bottom}});core_scaleService.registerScaleType("category",e,{position:"bottom"})},scale_linear=function(e){var t={position:"left",ticks:{callback:core_ticks.formatters.linear}},r=e.LinearScaleBase.extend({determineDataLimits:function(){var e=this,t=e.options,r=e.chart,n=r.data.datasets,i=e.isHorizontal();function a(t){return i?t.xAxisID===e.id:t.yAxisID===e.id}e.min=null,e.max=null;var o=t.stacked;if(void 0===o&&helpers$1.each(n,function(e,t){if(!o){var n=r.getDatasetMeta(t);r.isDatasetVisible(t)&&a(n)&&void 0!==n.stack&&(o=!0)}}),t.stacked||o){var s={};helpers$1.each(n,function(n,i){var o=r.getDatasetMeta(i),l=[o.type,void 0===t.stacked&&void 0===o.stack?i:"",o.stack].join(".");void 0===s[l]&&(s[l]={positiveValues:[],negativeValues:[]});var u=s[l].positiveValues,c=s[l].negativeValues;r.isDatasetVisible(i)&&a(o)&&helpers$1.each(n.data,function(r,n){var i=+e.getRightValue(r);isNaN(i)||o.data[n].hidden||(u[n]=u[n]||0,c[n]=c[n]||0,t.relativePoints?u[n]=100:i<0?c[n]+=i:u[n]+=i)})}),helpers$1.each(s,function(t){var r=t.positiveValues.concat(t.negativeValues),n=helpers$1.min(r),i=helpers$1.max(r);e.min=null===e.min?n:Math.min(e.min,n),e.max=null===e.max?i:Math.max(e.max,i)})}else helpers$1.each(n,function(t,n){var i=r.getDatasetMeta(n);r.isDatasetVisible(n)&&a(i)&&helpers$1.each(t.data,function(t,r){var n=+e.getRightValue(t);isNaN(n)||i.data[r].hidden||(null===e.min?e.min=n:n<e.min&&(e.min=n),null===e.max?e.max=n:n>e.max&&(e.max=n))})});e.min=isFinite(e.min)&&!isNaN(e.min)?e.min:0,e.max=isFinite(e.max)&&!isNaN(e.max)?e.max:1,this.handleTickRangeOptions()},getTickLimit:function(){var e,t=this.options.ticks;if(this.isHorizontal())e=Math.min(t.maxTicksLimit?t.maxTicksLimit:11,Math.ceil(this.width/50));else{var r=helpers$1.valueOrDefault(t.fontSize,core_defaults.global.defaultFontSize);e=Math.min(t.maxTicksLimit?t.maxTicksLimit:11,Math.ceil(this.height/(2*r)))}return e},handleDirectionalChanges:function(){this.isHorizontal()||this.ticks.reverse()},getLabelForIndex:function(e,t){return+this.getRightValue(this.chart.data.datasets[t].data[e])},getPixelForValue:function(e){var t=this,r=t.start,n=+t.getRightValue(e),i=t.end-r;return t.isHorizontal()?t.left+t.width/i*(n-r):t.bottom-t.height/i*(n-r)},getValueForPixel:function(e){var t=this,r=t.isHorizontal(),n=r?t.width:t.height,i=(r?e-t.left:t.bottom-e)/n;return t.start+(t.end-t.start)*i},getPixelForTick:function(e){return this.getPixelForValue(this.ticksAsNumbers[e])}});core_scaleService.registerScaleType("linear",r,t)};function generateTicks$1(e,t){var r,n,i=[],a=helpers$1.valueOrDefault,o=a(e.min,Math.pow(10,Math.floor(helpers$1.log10(t.min)))),s=Math.floor(helpers$1.log10(t.max)),l=Math.ceil(t.max/Math.pow(10,s));0===o?(r=Math.floor(helpers$1.log10(t.minNotZero)),n=Math.floor(t.minNotZero/Math.pow(10,r)),i.push(o),o=n*Math.pow(10,r)):(r=Math.floor(helpers$1.log10(o)),n=Math.floor(o/Math.pow(10,r)));var u=r<0?Math.pow(10,Math.abs(r)):1;do{i.push(o),10===++n&&(n=1,u=++r>=0?1:u),o=Math.round(n*Math.pow(10,r)*u)/u}while(r<s||r===s&&n<l);var c=a(e.max,o);return i.push(c),i}var scale_logarithmic=function(e){var t={position:"left",ticks:{callback:core_ticks.formatters.logarithmic}},r=core_scale.extend({determineDataLimits:function(){var e=this,t=e.options,r=e.chart,n=r.data.datasets,i=e.isHorizontal();function a(t){return i?t.xAxisID===e.id:t.yAxisID===e.id}e.min=null,e.max=null,e.minNotZero=null;var o=t.stacked;if(void 0===o&&helpers$1.each(n,function(e,t){if(!o){var n=r.getDatasetMeta(t);r.isDatasetVisible(t)&&a(n)&&void 0!==n.stack&&(o=!0)}}),t.stacked||o){var s={};helpers$1.each(n,function(n,i){var o=r.getDatasetMeta(i),l=[o.type,void 0===t.stacked&&void 0===o.stack?i:"",o.stack].join(".");r.isDatasetVisible(i)&&a(o)&&(void 0===s[l]&&(s[l]=[]),helpers$1.each(n.data,function(t,r){var n=s[l],i=+e.getRightValue(t);isNaN(i)||o.data[r].hidden||i<0||(n[r]=n[r]||0,n[r]+=i)}))}),helpers$1.each(s,function(t){if(t.length>0){var r=helpers$1.min(t),n=helpers$1.max(t);e.min=null===e.min?r:Math.min(e.min,r),e.max=null===e.max?n:Math.max(e.max,n)}})}else helpers$1.each(n,function(t,n){var i=r.getDatasetMeta(n);r.isDatasetVisible(n)&&a(i)&&helpers$1.each(t.data,function(t,r){var n=+e.getRightValue(t);isNaN(n)||i.data[r].hidden||n<0||(null===e.min?e.min=n:n<e.min&&(e.min=n),null===e.max?e.max=n:n>e.max&&(e.max=n),0!==n&&(null===e.minNotZero||n<e.minNotZero)&&(e.minNotZero=n))})});this.handleTickRangeOptions()},handleTickRangeOptions:function(){var e=this,t=e.options.ticks,r=helpers$1.valueOrDefault;e.min=r(t.min,e.min),e.max=r(t.max,e.max),e.min===e.max&&(0!==e.min&&null!==e.min?(e.min=Math.pow(10,Math.floor(helpers$1.log10(e.min))-1),e.max=Math.pow(10,Math.floor(helpers$1.log10(e.max))+1)):(e.min=1,e.max=10)),null===e.min&&(e.min=Math.pow(10,Math.floor(helpers$1.log10(e.max))-1)),null===e.max&&(e.max=0!==e.min?Math.pow(10,Math.floor(helpers$1.log10(e.min))+1):10),null===e.minNotZero&&(e.min>0?e.minNotZero=e.min:e.max<1?e.minNotZero=Math.pow(10,Math.floor(helpers$1.log10(e.max))):e.minNotZero=1)},buildTicks:function(){var e=this,t=e.options.ticks,r=!e.isHorizontal(),n={min:t.min,max:t.max},i=e.ticks=generateTicks$1(n,e);e.max=helpers$1.max(i),e.min=helpers$1.min(i),t.reverse?(r=!r,e.start=e.max,e.end=e.min):(e.start=e.min,e.end=e.max),r&&i.reverse()},convertTicksToLabels:function(){this.tickValues=this.ticks.slice(),core_scale.prototype.convertTicksToLabels.call(this)},getLabelForIndex:function(e,t){return+this.getRightValue(this.chart.data.datasets[t].data[e])},getPixelForTick:function(e){return this.getPixelForValue(this.tickValues[e])},_getFirstTickValue:function(e){var t=Math.floor(helpers$1.log10(e));return Math.floor(e/Math.pow(10,t))*Math.pow(10,t)},getPixelForValue:function(t){var r,n,i,a,o,s=this,l=s.options.ticks.reverse,u=helpers$1.log10,c=s._getFirstTickValue(s.minNotZero),d=0;return t=+s.getRightValue(t),l?(i=s.end,a=s.start,o=-1):(i=s.start,a=s.end,o=1),s.isHorizontal()?(r=s.width,n=l?s.right:s.left):(r=s.height,o*=-1,n=l?s.top:s.bottom),t!==i&&(0===i&&(r-=d=helpers$1.getValueOrDefault(s.options.ticks.fontSize,e.defaults.global.defaultFontSize),i=c),0!==t&&(d+=r/(u(a)-u(i))*(u(t)-u(i))),n+=o*d),n},getValueForPixel:function(t){var r,n,i,a,o=this,s=o.options.ticks.reverse,l=helpers$1.log10,u=o._getFirstTickValue(o.minNotZero);if(s?(n=o.end,i=o.start):(n=o.start,i=o.end),o.isHorizontal()?(r=o.width,a=s?o.right-t:t-o.left):(r=o.height,a=s?t-o.top:o.bottom-t),a!==n){if(0===n){var c=helpers$1.getValueOrDefault(o.options.ticks.fontSize,e.defaults.global.defaultFontSize);a-=c,r-=c,n=u}a*=l(i)-l(n),a/=r,a=Math.pow(10,l(n)+a)}return a}});core_scaleService.registerScaleType("logarithmic",r,t)},scale_radialLinear=function(e){var t=core_defaults.global,r={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,color:"rgba(0, 0, 0, 0.1)",lineWidth:1},gridLines:{circular:!1},ticks:{showLabelBackdrop:!0,backdropColor:"rgba(255,255,255,0.75)",backdropPaddingY:2,backdropPaddingX:2,callback:core_ticks.formatters.linear},pointLabels:{display:!0,fontSize:10,callback:function(e){return e}}};function n(e){var t=e.options;return t.angleLines.display||t.pointLabels.display?e.chart.data.labels.length:0}function i(e){var r=e.options.pointLabels,n=helpers$1.valueOrDefault(r.fontSize,t.defaultFontSize),i=helpers$1.valueOrDefault(r.fontStyle,t.defaultFontStyle),a=helpers$1.valueOrDefault(r.fontFamily,t.defaultFontFamily);return{size:n,style:i,family:a,font:helpers$1.fontString(n,i,a)}}function a(e,t,r,n,i){return e===n||e===i?{start:t-r/2,end:t+r/2}:e<n||e>i?{start:t-r-5,end:t}:{start:t,end:t+r+5}}function o(e){return 0===e||180===e?"center":e<180?"left":"right"}function s(e,t,r,n){if(helpers$1.isArray(t))for(var i=r.y,a=1.5*n,o=0;o<t.length;++o)e.fillText(t[o],r.x,i),i+=a;else e.fillText(t,r.x,r.y)}function l(e,t,r){90===e||270===e?r.y-=t.h/2:(e>270||e<90)&&(r.y-=t.h)}function u(e){return helpers$1.isNumber(e)?e:0}var c=e.LinearScaleBase.extend({setDimensions:function(){var e=this,r=e.options,n=r.ticks;e.width=e.maxWidth,e.height=e.maxHeight,e.xCenter=Math.round(e.width/2),e.yCenter=Math.round(e.height/2);var i=helpers$1.min([e.height,e.width]),a=helpers$1.valueOrDefault(n.fontSize,t.defaultFontSize);e.drawingArea=r.display?i/2-(a/2+n.backdropPaddingY):i/2},determineDataLimits:function(){var e=this,t=e.chart,r=Number.POSITIVE_INFINITY,n=Number.NEGATIVE_INFINITY;helpers$1.each(t.data.datasets,function(i,a){if(t.isDatasetVisible(a)){var o=t.getDatasetMeta(a);helpers$1.each(i.data,function(t,i){var a=+e.getRightValue(t);isNaN(a)||o.data[i].hidden||(r=Math.min(a,r),n=Math.max(a,n))})}}),e.min=r===Number.POSITIVE_INFINITY?0:r,e.max=n===Number.NEGATIVE_INFINITY?0:n,e.handleTickRangeOptions()},getTickLimit:function(){var e=this.options.ticks,r=helpers$1.valueOrDefault(e.fontSize,t.defaultFontSize);return Math.min(e.maxTicksLimit?e.maxTicksLimit:11,Math.ceil(this.drawingArea/(1.5*r)))},convertTicksToLabels:function(){var t=this;e.LinearScaleBase.prototype.convertTicksToLabels.call(t),t.pointLabels=t.chart.data.labels.map(t.options.pointLabels.callback,t)},getLabelForIndex:function(e,t){return+this.getRightValue(this.chart.data.datasets[t].data[e])},fit:function(){var e,t;this.options.pointLabels.display?function(e){var t,r,o,s=i(e),l=Math.min(e.height/2,e.width/2),u={r:e.width,l:0,t:e.height,b:0},c={};e.ctx.font=s.font,e._pointLabelSizes=[];var d,h,f,p=n(e);for(t=0;t<p;t++){o=e.getPointPosition(t,l),d=e.ctx,h=s.size,f=e.pointLabels[t]||"",r=helpers$1.isArray(f)?{w:helpers$1.longestText(d,d.font,f),h:f.length*h+1.5*(f.length-1)*h}:{w:d.measureText(f).width,h:h},e._pointLabelSizes[t]=r;var g=e.getIndexAngle(t),m=helpers$1.toDegrees(g)%360,v=a(m,o.x,r.w,0,180),y=a(m,o.y,r.h,90,270);v.start<u.l&&(u.l=v.start,c.l=g),v.end>u.r&&(u.r=v.end,c.r=g),y.start<u.t&&(u.t=y.start,c.t=g),y.end>u.b&&(u.b=y.end,c.b=g)}e.setReductions(l,u,c)}(this):(e=this,t=Math.min(e.height/2,e.width/2),e.drawingArea=Math.round(t),e.setCenterPoint(0,0,0,0))},setReductions:function(e,t,r){var n=t.l/Math.sin(r.l),i=Math.max(t.r-this.width,0)/Math.sin(r.r),a=-t.t/Math.cos(r.t),o=-Math.max(t.b-this.height,0)/Math.cos(r.b);n=u(n),i=u(i),a=u(a),o=u(o),this.drawingArea=Math.min(Math.round(e-(n+i)/2),Math.round(e-(a+o)/2)),this.setCenterPoint(n,i,a,o)},setCenterPoint:function(e,t,r,n){var i=this,a=i.width-t-i.drawingArea,o=e+i.drawingArea,s=r+i.drawingArea,l=i.height-n-i.drawingArea;i.xCenter=Math.round((o+a)/2+i.left),i.yCenter=Math.round((s+l)/2+i.top)},getIndexAngle:function(e){return e*(2*Math.PI/n(this))+(this.chart.options&&this.chart.options.startAngle?this.chart.options.startAngle:0)*Math.PI*2/360},getDistanceFromCenterForValue:function(e){var t=this;if(null===e)return 0;var r=t.drawingArea/(t.max-t.min);return t.options.ticks.reverse?(t.max-e)*r:(e-t.min)*r},getPointPosition:function(e,t){var r=this.getIndexAngle(e)-Math.PI/2;return{x:Math.round(Math.cos(r)*t)+this.xCenter,y:Math.round(Math.sin(r)*t)+this.yCenter}},getPointPositionForValue:function(e,t){return this.getPointPosition(e,this.getDistanceFromCenterForValue(t))},getBasePosition:function(){var e=this.min,t=this.max;return this.getPointPositionForValue(0,this.beginAtZero?0:e<0&&t<0?t:e>0&&t>0?e:0)},draw:function(){var e=this,r=e.options,a=r.gridLines,u=r.ticks,c=helpers$1.valueOrDefault;if(r.display){var d=e.ctx,h=this.getIndexAngle(0),f=c(u.fontSize,t.defaultFontSize),p=c(u.fontStyle,t.defaultFontStyle),g=c(u.fontFamily,t.defaultFontFamily),m=helpers$1.fontString(f,p,g);helpers$1.each(e.ticks,function(r,i){if(i>0||u.reverse){var o=e.getDistanceFromCenterForValue(e.ticksAsNumbers[i]);if(a.display&&0!==i&&function(e,t,r,i){var a=e.ctx;if(a.strokeStyle=helpers$1.valueAtIndexOrDefault(t.color,i-1),a.lineWidth=helpers$1.valueAtIndexOrDefault(t.lineWidth,i-1),e.options.gridLines.circular)a.beginPath(),a.arc(e.xCenter,e.yCenter,r,0,2*Math.PI),a.closePath(),a.stroke();else{var o=n(e);if(0===o)return;a.beginPath();var s=e.getPointPosition(0,r);a.moveTo(s.x,s.y);for(var l=1;l<o;l++)s=e.getPointPosition(l,r),a.lineTo(s.x,s.y);a.closePath(),a.stroke()}}(e,a,o,i),u.display){var s=c(u.fontColor,t.defaultFontColor);if(d.font=m,d.save(),d.translate(e.xCenter,e.yCenter),d.rotate(h),u.showLabelBackdrop){var l=d.measureText(r).width;d.fillStyle=u.backdropColor,d.fillRect(-l/2-u.backdropPaddingX,-o-f/2-u.backdropPaddingY,l+2*u.backdropPaddingX,f+2*u.backdropPaddingY)}d.textAlign="center",d.textBaseline="middle",d.fillStyle=s,d.fillText(r,0,-o),d.restore()}}}),(r.angleLines.display||r.pointLabels.display)&&function(e){var r=e.ctx,a=e.options,u=a.angleLines,c=a.pointLabels;r.lineWidth=u.lineWidth,r.strokeStyle=u.color;var d=e.getDistanceFromCenterForValue(a.ticks.reverse?e.min:e.max),h=i(e);r.textBaseline="top";for(var f=n(e)-1;f>=0;f--){if(u.display){var p=e.getPointPosition(f,d);r.beginPath(),r.moveTo(e.xCenter,e.yCenter),r.lineTo(p.x,p.y),r.stroke(),r.closePath()}if(c.display){var g=e.getPointPosition(f,d+5),m=helpers$1.valueAtIndexOrDefault(c.fontColor,f,t.defaultFontColor);r.font=h.font,r.fillStyle=m;var v=e.getIndexAngle(f),y=helpers$1.toDegrees(v);r.textAlign=o(y),l(y,e._pointLabelSizes[f],g),s(r,e.pointLabels[f]||"",g,h.size)}}}(e)}}});core_scaleService.registerScaleType("radialLinear",c,r)},moment=createCommonjsModule(function(e,t){e.exports=function(){var t,r;function n(){return t.apply(null,arguments)}function i(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function a(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function o(e){return void 0===e}function s(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function l(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function u(e,t){var r,n=[];for(r=0;r<e.length;++r)n.push(t(e[r],r));return n}function c(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function d(e,t){for(var r in t)c(t,r)&&(e[r]=t[r]);return c(t,"toString")&&(e.toString=t.toString),c(t,"valueOf")&&(e.valueOf=t.valueOf),e}function h(e,t,r,n){return Mt(e,t,r,n,!0).utc()}function f(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function p(e){if(null==e._isValid){var t=f(e),n=r.call(t.parsedDateParts,function(e){return null!=e}),i=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n);if(e._strict&&(i=i&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return i;e._isValid=i}return e._isValid}function g(e){var t=h(NaN);return null!=e?d(f(t),e):f(t).userInvalidated=!0,t}r=Array.prototype.some?Array.prototype.some:function(e){for(var t=Object(this),r=t.length>>>0,n=0;n<r;n++)if(n in t&&e.call(this,t[n],n,t))return!0;return!1};var m=n.momentProperties=[];function v(e,t){var r,n,i;if(o(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),o(t._i)||(e._i=t._i),o(t._f)||(e._f=t._f),o(t._l)||(e._l=t._l),o(t._strict)||(e._strict=t._strict),o(t._tzm)||(e._tzm=t._tzm),o(t._isUTC)||(e._isUTC=t._isUTC),o(t._offset)||(e._offset=t._offset),o(t._pf)||(e._pf=f(t)),o(t._locale)||(e._locale=t._locale),m.length>0)for(r=0;r<m.length;r++)n=m[r],o(i=t[n])||(e[n]=i);return e}var y=!1;function b(e){v(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===y&&(y=!0,n.updateOffset(this),y=!1)}function _(e){return e instanceof b||null!=e&&null!=e._isAMomentObject}function w(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function x(e){var t=+e,r=0;return 0!==t&&isFinite(t)&&(r=w(t)),r}function S(e,t,r){var n,i=Math.min(e.length,t.length),a=Math.abs(e.length-t.length),o=0;for(n=0;n<i;n++)(r&&e[n]!==t[n]||!r&&x(e[n])!==x(t[n]))&&o++;return o+a}function k(e){!1===n.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function $(e,t){var r=!0;return d(function(){var i=arguments;if(null!=n.deprecationHandler&&n.deprecationHandler(null,e),r){for(var a,o=[],s=0;s<arguments.length;s++){if(a="","object"===_typeof(i[s])){for(var l in a+="\n["+s+"] ",arguments[0])a+=l+": "+i[0][l]+", ";a=a.slice(0,-2)}else a=i[s];o.push(a)}k(e+"\nArguments: "+Array.prototype.slice.call(o).join("")+"\n"+(new Error).stack),r=!1}return t.apply(this,arguments)},t)}var C,T={};function A(e,t){null!=n.deprecationHandler&&n.deprecationHandler(e,t),T[e]||(k(t),T[e]=!0)}function M(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function O(e,t){var r,n=d({},e);for(r in t)c(t,r)&&(a(e[r])&&a(t[r])?(n[r]={},d(n[r],e[r]),d(n[r],t[r])):null!=t[r]?n[r]=t[r]:delete n[r]);for(r in e)c(e,r)&&!c(t,r)&&a(e[r])&&(n[r]=d({},n[r]));return n}function D(e){null!=e&&this.set(e)}n.suppressDeprecationWarnings=!1,n.deprecationHandler=null,C=Object.keys?Object.keys:function(e){var t,r=[];for(t in e)c(e,t)&&r.push(t);return r};var E={};function P(e,t){var r=e.toLowerCase();E[r]=E[r+"s"]=E[t]=e}function R(e){return"string"==typeof e?E[e]||E[e.toLowerCase()]:void 0}function I(e){var t,r,n={};for(r in e)c(e,r)&&(t=R(r))&&(n[t]=e[r]);return n}var N={};function L(e,t){N[e]=t}function F(e,t,r){var n=""+Math.abs(e),i=t-n.length,a=e>=0;return(a?r?"+":"":"-")+Math.pow(10,Math.max(0,i)).toString().substr(1)+n}var j=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,B=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,U={},H={};function z(e,t,r,n){var i=n;"string"==typeof n&&(i=function(){return this[n]()}),e&&(H[e]=i),t&&(H[t[0]]=function(){return F(i.apply(this,arguments),t[1],t[2])}),r&&(H[r]=function(){return this.localeData().ordinal(i.apply(this,arguments),e)})}function V(e,t){return e.isValid()?(t=W(t,e.localeData()),U[t]=U[t]||function(e){var t,r,n,i=e.match(j);for(t=0,r=i.length;t<r;t++)H[i[t]]?i[t]=H[i[t]]:i[t]=(n=i[t]).match(/\[[\s\S]/)?n.replace(/^\[|\]$/g,""):n.replace(/\\/g,"");return function(t){var n,a="";for(n=0;n<r;n++)a+=M(i[n])?i[n].call(t,e):i[n];return a}}(t),U[t](e)):e.localeData().invalidDate()}function W(e,t){var r=5;function n(e){return t.longDateFormat(e)||e}for(B.lastIndex=0;r>=0&&B.test(e);)e=e.replace(B,n),B.lastIndex=0,r-=1;return e}var Y=/\d/,q=/\d\d/,G=/\d{3}/,K=/\d{4}/,X=/[+-]?\d{6}/,J=/\d\d?/,Z=/\d\d\d\d?/,Q=/\d\d\d\d\d\d?/,ee=/\d{1,3}/,te=/\d{1,4}/,re=/[+-]?\d{1,6}/,ne=/\d+/,ie=/[+-]?\d+/,ae=/Z|[+-]\d\d:?\d\d/gi,oe=/Z|[+-]\d\d(?::?\d\d)?/gi,se=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,le={};function ue(e,t,r){le[e]=M(t)?t:function(e,n){return e&&r?r:t}}function ce(e,t){return c(le,e)?le[e](t._strict,t._locale):new RegExp(de(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(e,t,r,n,i){return t||r||n||i})))}function de(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}var he={};function fe(e,t){var r,n=t;for("string"==typeof e&&(e=[e]),s(t)&&(n=function(e,r){r[t]=x(e)}),r=0;r<e.length;r++)he[e[r]]=n}function pe(e,t){fe(e,function(e,r,n,i){n._w=n._w||{},t(e,n._w,n,i)})}function ge(e,t,r){null!=t&&c(he,e)&&he[e](t,r._a,r,e)}var me=0,ve=1,ye=2,be=3,_e=4,we=5,xe=6,Se=7,ke=8;function $e(e){return Ce(e)?366:365}function Ce(e){return e%4==0&&e%100!=0||e%400==0}z("Y",0,0,function(){var e=this.year();return e<=9999?""+e:"+"+e}),z(0,["YY",2],0,function(){return this.year()%100}),z(0,["YYYY",4],0,"year"),z(0,["YYYYY",5],0,"year"),z(0,["YYYYYY",6,!0],0,"year"),P("year","y"),L("year",1),ue("Y",ie),ue("YY",J,q),ue("YYYY",te,K),ue("YYYYY",re,X),ue("YYYYYY",re,X),fe(["YYYYY","YYYYYY"],me),fe("YYYY",function(e,t){t[me]=2===e.length?n.parseTwoDigitYear(e):x(e)}),fe("YY",function(e,t){t[me]=n.parseTwoDigitYear(e)}),fe("Y",function(e,t){t[me]=parseInt(e,10)}),n.parseTwoDigitYear=function(e){return x(e)+(x(e)>68?1900:2e3)};var Te,Ae=Me("FullYear",!0);function Me(e,t){return function(r){return null!=r?(De(this,e,r),n.updateOffset(this,t),this):Oe(this,e)}}function Oe(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function De(e,t,r){e.isValid()&&!isNaN(r)&&("FullYear"===t&&Ce(e.year())&&1===e.month()&&29===e.date()?e._d["set"+(e._isUTC?"UTC":"")+t](r,e.month(),Ee(r,e.month())):e._d["set"+(e._isUTC?"UTC":"")+t](r))}function Ee(e,t){if(isNaN(e)||isNaN(t))return NaN;var r,n=(t%(r=12)+r)%r;return e+=(t-n)/12,1===n?Ce(e)?29:28:31-n%7%2}Te=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},z("M",["MM",2],"Mo",function(){return this.month()+1}),z("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)}),z("MMMM",0,0,function(e){return this.localeData().months(this,e)}),P("month","M"),L("month",8),ue("M",J),ue("MM",J,q),ue("MMM",function(e,t){return t.monthsShortRegex(e)}),ue("MMMM",function(e,t){return t.monthsRegex(e)}),fe(["M","MM"],function(e,t){t[ve]=x(e)-1}),fe(["MMM","MMMM"],function(e,t,r,n){var i=r._locale.monthsParse(e,n,r._strict);null!=i?t[ve]=i:f(r).invalidMonth=e});var Pe=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,Re="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Ie="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");function Ne(e,t){var r;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=x(t);else if(!s(t=e.localeData().monthsParse(t)))return e;return r=Math.min(e.date(),Ee(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,r),e}function Le(e){return null!=e?(Ne(this,e),n.updateOffset(this,!0),this):Oe(this,"Month")}var Fe=se,je=se;function Be(){function e(e,t){return t.length-e.length}var t,r,n=[],i=[],a=[];for(t=0;t<12;t++)r=h([2e3,t]),n.push(this.monthsShort(r,"")),i.push(this.months(r,"")),a.push(this.months(r,"")),a.push(this.monthsShort(r,""));for(n.sort(e),i.sort(e),a.sort(e),t=0;t<12;t++)n[t]=de(n[t]),i[t]=de(i[t]);for(t=0;t<24;t++)a[t]=de(a[t]);this._monthsRegex=new RegExp("^("+a.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+i.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+n.join("|")+")","i")}function Ue(e){var t;if(e<100&&e>=0){var r=Array.prototype.slice.call(arguments);r[0]=e+400,t=new Date(Date.UTC.apply(null,r)),isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e)}else t=new Date(Date.UTC.apply(null,arguments));return t}function He(e,t,r){var n=7+t-r,i=(7+Ue(e,0,n).getUTCDay()-t)%7;return-i+n-1}function ze(e,t,r,n,i){var a,o,s=(7+r-n)%7,l=He(e,n,i),u=1+7*(t-1)+s+l;return u<=0?o=$e(a=e-1)+u:u>$e(e)?(a=e+1,o=u-$e(e)):(a=e,o=u),{year:a,dayOfYear:o}}function Ve(e,t,r){var n,i,a=He(e.year(),t,r),o=Math.floor((e.dayOfYear()-a-1)/7)+1;return o<1?(i=e.year()-1,n=o+We(i,t,r)):o>We(e.year(),t,r)?(n=o-We(e.year(),t,r),i=e.year()+1):(i=e.year(),n=o),{week:n,year:i}}function We(e,t,r){var n=He(e,t,r),i=He(e+1,t,r);return($e(e)-n+i)/7}function Ye(e,t){return e.slice(t,7).concat(e.slice(0,t))}z("w",["ww",2],"wo","week"),z("W",["WW",2],"Wo","isoWeek"),P("week","w"),P("isoWeek","W"),L("week",5),L("isoWeek",5),ue("w",J),ue("ww",J,q),ue("W",J),ue("WW",J,q),pe(["w","ww","W","WW"],function(e,t,r,n){t[n.substr(0,1)]=x(e)}),z("d",0,"do","day"),z("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)}),z("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)}),z("dddd",0,0,function(e){return this.localeData().weekdays(this,e)}),z("e",0,0,"weekday"),z("E",0,0,"isoWeekday"),P("day","d"),P("weekday","e"),P("isoWeekday","E"),L("day",11),L("weekday",11),L("isoWeekday",11),ue("d",J),ue("e",J),ue("E",J),ue("dd",function(e,t){return t.weekdaysMinRegex(e)}),ue("ddd",function(e,t){return t.weekdaysShortRegex(e)}),ue("dddd",function(e,t){return t.weekdaysRegex(e)}),pe(["dd","ddd","dddd"],function(e,t,r,n){var i=r._locale.weekdaysParse(e,n,r._strict);null!=i?t.d=i:f(r).invalidWeekday=e}),pe(["d","e","E"],function(e,t,r,n){t[n]=x(e)});var qe="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Ge="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Ke="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),Xe=se,Je=se,Ze=se;function Qe(){function e(e,t){return t.length-e.length}var t,r,n,i,a,o=[],s=[],l=[],u=[];for(t=0;t<7;t++)r=h([2e3,1]).day(t),n=this.weekdaysMin(r,""),i=this.weekdaysShort(r,""),a=this.weekdays(r,""),o.push(n),s.push(i),l.push(a),u.push(n),u.push(i),u.push(a);for(o.sort(e),s.sort(e),l.sort(e),u.sort(e),t=0;t<7;t++)s[t]=de(s[t]),l[t]=de(l[t]),u[t]=de(u[t]);this._weekdaysRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+s.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+o.join("|")+")","i")}function et(){return this.hours()%12||12}function tt(e,t){z(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}function rt(e,t){return t._meridiemParse}z("H",["HH",2],0,"hour"),z("h",["hh",2],0,et),z("k",["kk",2],0,function(){return this.hours()||24}),z("hmm",0,0,function(){return""+et.apply(this)+F(this.minutes(),2)}),z("hmmss",0,0,function(){return""+et.apply(this)+F(this.minutes(),2)+F(this.seconds(),2)}),z("Hmm",0,0,function(){return""+this.hours()+F(this.minutes(),2)}),z("Hmmss",0,0,function(){return""+this.hours()+F(this.minutes(),2)+F(this.seconds(),2)}),tt("a",!0),tt("A",!1),P("hour","h"),L("hour",13),ue("a",rt),ue("A",rt),ue("H",J),ue("h",J),ue("k",J),ue("HH",J,q),ue("hh",J,q),ue("kk",J,q),ue("hmm",Z),ue("hmmss",Q),ue("Hmm",Z),ue("Hmmss",Q),fe(["H","HH"],be),fe(["k","kk"],function(e,t,r){var n=x(e);t[be]=24===n?0:n}),fe(["a","A"],function(e,t,r){r._isPm=r._locale.isPM(e),r._meridiem=e}),fe(["h","hh"],function(e,t,r){t[be]=x(e),f(r).bigHour=!0}),fe("hmm",function(e,t,r){var n=e.length-2;t[be]=x(e.substr(0,n)),t[_e]=x(e.substr(n)),f(r).bigHour=!0}),fe("hmmss",function(e,t,r){var n=e.length-4,i=e.length-2;t[be]=x(e.substr(0,n)),t[_e]=x(e.substr(n,2)),t[we]=x(e.substr(i)),f(r).bigHour=!0}),fe("Hmm",function(e,t,r){var n=e.length-2;t[be]=x(e.substr(0,n)),t[_e]=x(e.substr(n))}),fe("Hmmss",function(e,t,r){var n=e.length-4,i=e.length-2;t[be]=x(e.substr(0,n)),t[_e]=x(e.substr(n,2)),t[we]=x(e.substr(i))});var nt,it=Me("Hours",!0),at={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:Re,monthsShort:Ie,week:{dow:0,doy:6},weekdays:qe,weekdaysMin:Ke,weekdaysShort:Ge,meridiemParse:/[ap]\.?m?\.?/i},ot={},st={};function lt(e){return e?e.toLowerCase().replace("_","-"):e}function ut(t){var r=null;if(!ot[t]&&e&&e.exports)try{r=nt._abbr;var n=commonjsRequire;n("./locale/"+t),ct(r)}catch(e){}return ot[t]}function ct(e,t){var r;return e&&((r=o(t)?ht(e):dt(e,t))?nt=r:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),nt._abbr}function dt(e,t){if(null!==t){var r,n=at;if(t.abbr=e,null!=ot[e])A("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),n=ot[e]._config;else if(null!=t.parentLocale)if(null!=ot[t.parentLocale])n=ot[t.parentLocale]._config;else{if(null==(r=ut(t.parentLocale)))return st[t.parentLocale]||(st[t.parentLocale]=[]),st[t.parentLocale].push({name:e,config:t}),null;n=r._config}return ot[e]=new D(O(n,t)),st[e]&&st[e].forEach(function(e){dt(e.name,e.config)}),ct(e),ot[e]}return delete ot[e],null}function ht(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return nt;if(!i(e)){if(t=ut(e))return t;e=[e]}return function(e){for(var t,r,n,i,a=0;a<e.length;){for(i=lt(e[a]).split("-"),t=i.length,r=(r=lt(e[a+1]))?r.split("-"):null;t>0;){if(n=ut(i.slice(0,t).join("-")))return n;if(r&&r.length>=t&&S(i,r,!0)>=t-1)break;t--}a++}return nt}(e)}function ft(e){var t,r=e._a;return r&&-2===f(e).overflow&&(t=r[ve]<0||r[ve]>11?ve:r[ye]<1||r[ye]>Ee(r[me],r[ve])?ye:r[be]<0||r[be]>24||24===r[be]&&(0!==r[_e]||0!==r[we]||0!==r[xe])?be:r[_e]<0||r[_e]>59?_e:r[we]<0||r[we]>59?we:r[xe]<0||r[xe]>999?xe:-1,f(e)._overflowDayOfYear&&(t<me||t>ye)&&(t=ye),f(e)._overflowWeeks&&-1===t&&(t=Se),f(e)._overflowWeekday&&-1===t&&(t=ke),f(e).overflow=t),e}function pt(e,t,r){return null!=e?e:null!=t?t:r}function gt(e){var t,r,i,a,o,s=[];if(!e._d){for(i=function(e){var t=new Date(n.now());return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}(e),e._w&&null==e._a[ye]&&null==e._a[ve]&&function(e){var t,r,n,i,a,o,s,l;if(null!=(t=e._w).GG||null!=t.W||null!=t.E)a=1,o=4,r=pt(t.GG,e._a[me],Ve(Ot(),1,4).year),n=pt(t.W,1),((i=pt(t.E,1))<1||i>7)&&(l=!0);else{a=e._locale._week.dow,o=e._locale._week.doy;var u=Ve(Ot(),a,o);r=pt(t.gg,e._a[me],u.year),n=pt(t.w,u.week),null!=t.d?((i=t.d)<0||i>6)&&(l=!0):null!=t.e?(i=t.e+a,(t.e<0||t.e>6)&&(l=!0)):i=a}n<1||n>We(r,a,o)?f(e)._overflowWeeks=!0:null!=l?f(e)._overflowWeekday=!0:(s=ze(r,n,i,a,o),e._a[me]=s.year,e._dayOfYear=s.dayOfYear)}(e),null!=e._dayOfYear&&(o=pt(e._a[me],i[me]),(e._dayOfYear>$e(o)||0===e._dayOfYear)&&(f(e)._overflowDayOfYear=!0),r=Ue(o,0,e._dayOfYear),e._a[ve]=r.getUTCMonth(),e._a[ye]=r.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=s[t]=i[t];for(;t<7;t++)e._a[t]=s[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[be]&&0===e._a[_e]&&0===e._a[we]&&0===e._a[xe]&&(e._nextDay=!0,e._a[be]=0),e._d=(e._useUTC?Ue:function(e,t,r,n,i,a,o){var s;return e<100&&e>=0?(s=new Date(e+400,t,r,n,i,a,o),isFinite(s.getFullYear())&&s.setFullYear(e)):s=new Date(e,t,r,n,i,a,o),s}).apply(null,s),a=e._useUTC?e._d.getUTCDay():e._d.getDay(),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[be]=24),e._w&&void 0!==e._w.d&&e._w.d!==a&&(f(e).weekdayMismatch=!0)}}var mt=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,vt=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,yt=/Z|[+-]\d\d(?::?\d\d)?/,bt=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],_t=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],wt=/^\/?Date\((\-?\d+)/i;function xt(e){var t,r,n,i,a,o,s=e._i,l=mt.exec(s)||vt.exec(s);if(l){for(f(e).iso=!0,t=0,r=bt.length;t<r;t++)if(bt[t][1].exec(l[1])){i=bt[t][0],n=!1!==bt[t][2];break}if(null==i)return void(e._isValid=!1);if(l[3]){for(t=0,r=_t.length;t<r;t++)if(_t[t][1].exec(l[3])){a=(l[2]||" ")+_t[t][0];break}if(null==a)return void(e._isValid=!1)}if(!n&&null!=a)return void(e._isValid=!1);if(l[4]){if(!yt.exec(l[4]))return void(e._isValid=!1);o="Z"}e._f=i+(a||"")+(o||""),Tt(e)}else e._isValid=!1}var St=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;function kt(e,t,r,n,i,a){var o=[function(e){var t=parseInt(e,10);return t<=49?2e3+t:t<=999?1900+t:t}(e),Ie.indexOf(t),parseInt(r,10),parseInt(n,10),parseInt(i,10)];return a&&o.push(parseInt(a,10)),o}var $t={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function Ct(e){var t=St.exec(e._i.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(t){var r=kt(t[4],t[3],t[2],t[5],t[6],t[7]);if(!function(e,t,r){if(e){var n=Ge.indexOf(e),i=new Date(t[0],t[1],t[2]).getDay();if(n!==i)return f(r).weekdayMismatch=!0,r._isValid=!1,!1}return!0}(t[1],r,e))return;e._a=r,e._tzm=function(e,t,r){if(e)return $t[e];if(t)return 0;var n=parseInt(r,10),i=n%100,a=(n-i)/100;return 60*a+i}(t[8],t[9],t[10]),e._d=Ue.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),f(e).rfc2822=!0}else e._isValid=!1}function Tt(e){if(e._f!==n.ISO_8601)if(e._f!==n.RFC_2822){e._a=[],f(e).empty=!0;var t,r,i,a,o,s=""+e._i,l=s.length,u=0;for(i=W(e._f,e._locale).match(j)||[],t=0;t<i.length;t++)a=i[t],(r=(s.match(ce(a,e))||[])[0])&&((o=s.substr(0,s.indexOf(r))).length>0&&f(e).unusedInput.push(o),s=s.slice(s.indexOf(r)+r.length),u+=r.length),H[a]?(r?f(e).empty=!1:f(e).unusedTokens.push(a),ge(a,r,e)):e._strict&&!r&&f(e).unusedTokens.push(a);f(e).charsLeftOver=l-u,s.length>0&&f(e).unusedInput.push(s),e._a[be]<=12&&!0===f(e).bigHour&&e._a[be]>0&&(f(e).bigHour=void 0),f(e).parsedDateParts=e._a.slice(0),f(e).meridiem=e._meridiem,e._a[be]=(c=e._locale,d=e._a[be],null==(h=e._meridiem)?d:null!=c.meridiemHour?c.meridiemHour(d,h):null!=c.isPM?((p=c.isPM(h))&&d<12&&(d+=12),p||12!==d||(d=0),d):d),gt(e),ft(e)}else Ct(e);else xt(e);var c,d,h,p}function At(e){var t=e._i,r=e._f;return e._locale=e._locale||ht(e._l),null===t||void 0===r&&""===t?g({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),_(t)?new b(ft(t)):(l(t)?e._d=t:i(r)?function(e){var t,r,n,i,a;if(0===e._f.length)return f(e).invalidFormat=!0,void(e._d=new Date(NaN));for(i=0;i<e._f.length;i++)a=0,t=v({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[i],Tt(t),p(t)&&(a+=f(t).charsLeftOver,a+=10*f(t).unusedTokens.length,f(t).score=a,(null==n||a<n)&&(n=a,r=t));d(e,r||t)}(e):r?Tt(e):function(e){var t=e._i;o(t)?e._d=new Date(n.now()):l(t)?e._d=new Date(t.valueOf()):"string"==typeof t?function(e){var t=wt.exec(e._i);null===t?(xt(e),!1===e._isValid&&(delete e._isValid,Ct(e),!1===e._isValid&&(delete e._isValid,n.createFromInputFallback(e)))):e._d=new Date(+t[1])}(e):i(t)?(e._a=u(t.slice(0),function(e){return parseInt(e,10)}),gt(e)):a(t)?function(e){if(!e._d){var t=I(e._i);e._a=u([t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],function(e){return e&&parseInt(e,10)}),gt(e)}}(e):s(t)?e._d=new Date(t):n.createFromInputFallback(e)}(e),p(e)||(e._d=null),e))}function Mt(e,t,r,n,o){var s,l={};return!0!==r&&!1!==r||(n=r,r=void 0),(a(e)&&function(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(e.hasOwnProperty(t))return!1;return!0}(e)||i(e)&&0===e.length)&&(e=void 0),l._isAMomentObject=!0,l._useUTC=l._isUTC=o,l._l=r,l._i=e,l._f=t,l._strict=n,(s=new b(ft(At(l))))._nextDay&&(s.add(1,"d"),s._nextDay=void 0),s}function Ot(e,t,r,n){return Mt(e,t,r,n,!1)}n.createFromInputFallback=$("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))}),n.ISO_8601=function(){},n.RFC_2822=function(){};var Dt=$("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=Ot.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:g()}),Et=$("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=Ot.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:g()});function Pt(e,t){var r,n;if(1===t.length&&i(t[0])&&(t=t[0]),!t.length)return Ot();for(r=t[0],n=1;n<t.length;++n)t[n].isValid()&&!t[n][e](r)||(r=t[n]);return r}var Rt=["year","quarter","month","week","day","hour","minute","second","millisecond"];function It(e){var t=I(e),r=t.year||0,n=t.quarter||0,i=t.month||0,a=t.week||t.isoWeek||0,o=t.day||0,s=t.hour||0,l=t.minute||0,u=t.second||0,c=t.millisecond||0;this._isValid=function(e){for(var t in e)if(-1===Te.call(Rt,t)||null!=e[t]&&isNaN(e[t]))return!1;for(var r=!1,n=0;n<Rt.length;++n)if(e[Rt[n]]){if(r)return!1;parseFloat(e[Rt[n]])!==x(e[Rt[n]])&&(r=!0)}return!0}(t),this._milliseconds=+c+1e3*u+6e4*l+1e3*s*60*60,this._days=+o+7*a,this._months=+i+3*n+12*r,this._data={},this._locale=ht(),this._bubble()}function Nt(e){return e instanceof It}function Lt(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function Ft(e,t){z(e,0,0,function(){var e=this.utcOffset(),r="+";return e<0&&(e=-e,r="-"),r+F(~~(e/60),2)+t+F(~~e%60,2)})}Ft("Z",":"),Ft("ZZ",""),ue("Z",oe),ue("ZZ",oe),fe(["Z","ZZ"],function(e,t,r){r._useUTC=!0,r._tzm=Bt(oe,e)});var jt=/([\+\-]|\d\d)/gi;function Bt(e,t){var r=(t||"").match(e);if(null===r)return null;var n=r[r.length-1]||[],i=(n+"").match(jt)||["-",0,0],a=60*i[1]+x(i[2]);return 0===a?0:"+"===i[0]?a:-a}function Ut(e,t){var r,i;return t._isUTC?(r=t.clone(),i=(_(e)||l(e)?e.valueOf():Ot(e).valueOf())-r.valueOf(),r._d.setTime(r._d.valueOf()+i),n.updateOffset(r,!1),r):Ot(e).local()}function Ht(e){return 15*-Math.round(e._d.getTimezoneOffset()/15)}function zt(){return!!this.isValid()&&this._isUTC&&0===this._offset}n.updateOffset=function(){};var Vt=/^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,Wt=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function Yt(e,t){var r,n,i,a,o,l,u=e,d=null;return Nt(e)?u={ms:e._milliseconds,d:e._days,M:e._months}:s(e)?(u={},t?u[t]=e:u.milliseconds=e):(d=Vt.exec(e))?(r="-"===d[1]?-1:1,u={y:0,d:x(d[ye])*r,h:x(d[be])*r,m:x(d[_e])*r,s:x(d[we])*r,ms:x(Lt(1e3*d[xe]))*r}):(d=Wt.exec(e))?(r="-"===d[1]?-1:1,u={y:qt(d[2],r),M:qt(d[3],r),w:qt(d[4],r),d:qt(d[5],r),h:qt(d[6],r),m:qt(d[7],r),s:qt(d[8],r)}):null==u?u={}:"object"===(void 0===u?"undefined":_typeof(u))&&("from"in u||"to"in u)&&(a=Ot(u.from),o=Ot(u.to),i=a.isValid()&&o.isValid()?(o=Ut(o,a),a.isBefore(o)?l=Gt(a,o):((l=Gt(o,a)).milliseconds=-l.milliseconds,l.months=-l.months),l):{milliseconds:0,months:0},(u={}).ms=i.milliseconds,u.M=i.months),n=new It(u),Nt(e)&&c(e,"_locale")&&(n._locale=e._locale),n}function qt(e,t){var r=e&&parseFloat(e.replace(",","."));return(isNaN(r)?0:r)*t}function Gt(e,t){var r={};return r.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(r.months,"M").isAfter(t)&&--r.months,r.milliseconds=+t-+e.clone().add(r.months,"M"),r}function Kt(e,t){return function(r,n){var i;return null===n||isNaN(+n)||(A(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),i=r,r=n,n=i),Xt(this,Yt(r="string"==typeof r?+r:r,n),e),this}}function Xt(e,t,r,i){var a=t._milliseconds,o=Lt(t._days),s=Lt(t._months);e.isValid()&&(i=null==i||i,s&&Ne(e,Oe(e,"Month")+s*r),o&&De(e,"Date",Oe(e,"Date")+o*r),a&&e._d.setTime(e._d.valueOf()+a*r),i&&n.updateOffset(e,o||s))}Yt.fn=It.prototype,Yt.invalid=function(){return Yt(NaN)};var Jt=Kt(1,"add"),Zt=Kt(-1,"subtract");function Qt(e,t){var r,n,i=12*(t.year()-e.year())+(t.month()-e.month()),a=e.clone().add(i,"months");return t-a<0?(r=e.clone().add(i-1,"months"),n=(t-a)/(a-r)):(r=e.clone().add(i+1,"months"),n=(t-a)/(r-a)),-(i+n)||0}function er(e){var t;return void 0===e?this._locale._abbr:(null!=(t=ht(e))&&(this._locale=t),this)}n.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",n.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var tr=$("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return void 0===e?this.localeData():this.locale(e)});function rr(){return this._locale}var nr=1e3,ir=60*nr,ar=60*ir,or=3506328*ar;function sr(e,t){return(e%t+t)%t}function lr(e,t,r){return e<100&&e>=0?new Date(e+400,t,r)-or:new Date(e,t,r).valueOf()}function ur(e,t,r){return e<100&&e>=0?Date.UTC(e+400,t,r)-or:Date.UTC(e,t,r)}function cr(e,t){z(0,[e,e.length],0,t)}function dr(e,t,r,n,i){var a;return null==e?Ve(this,n,i).year:(a=We(e,n,i),t>a&&(t=a),function(e,t,r,n,i){var a=ze(e,t,r,n,i),o=Ue(a.year,0,a.dayOfYear);return this.year(o.getUTCFullYear()),this.month(o.getUTCMonth()),this.date(o.getUTCDate()),this}.call(this,e,t,r,n,i))}z(0,["gg",2],0,function(){return this.weekYear()%100}),z(0,["GG",2],0,function(){return this.isoWeekYear()%100}),cr("gggg","weekYear"),cr("ggggg","weekYear"),cr("GGGG","isoWeekYear"),cr("GGGGG","isoWeekYear"),P("weekYear","gg"),P("isoWeekYear","GG"),L("weekYear",1),L("isoWeekYear",1),ue("G",ie),ue("g",ie),ue("GG",J,q),ue("gg",J,q),ue("GGGG",te,K),ue("gggg",te,K),ue("GGGGG",re,X),ue("ggggg",re,X),pe(["gggg","ggggg","GGGG","GGGGG"],function(e,t,r,n){t[n.substr(0,2)]=x(e)}),pe(["gg","GG"],function(e,t,r,i){t[i]=n.parseTwoDigitYear(e)}),z("Q",0,"Qo","quarter"),P("quarter","Q"),L("quarter",7),ue("Q",Y),fe("Q",function(e,t){t[ve]=3*(x(e)-1)}),z("D",["DD",2],"Do","date"),P("date","D"),L("date",9),ue("D",J),ue("DD",J,q),ue("Do",function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient}),fe(["D","DD"],ye),fe("Do",function(e,t){t[ye]=x(e.match(J)[0])});var hr=Me("Date",!0);z("DDD",["DDDD",3],"DDDo","dayOfYear"),P("dayOfYear","DDD"),L("dayOfYear",4),ue("DDD",ee),ue("DDDD",G),fe(["DDD","DDDD"],function(e,t,r){r._dayOfYear=x(e)}),z("m",["mm",2],0,"minute"),P("minute","m"),L("minute",14),ue("m",J),ue("mm",J,q),fe(["m","mm"],_e);var fr=Me("Minutes",!1);z("s",["ss",2],0,"second"),P("second","s"),L("second",15),ue("s",J),ue("ss",J,q),fe(["s","ss"],we);var pr,gr=Me("Seconds",!1);for(z("S",0,0,function(){return~~(this.millisecond()/100)}),z(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),z(0,["SSS",3],0,"millisecond"),z(0,["SSSS",4],0,function(){return 10*this.millisecond()}),z(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),z(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),z(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),z(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),z(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),P("millisecond","ms"),L("millisecond",16),ue("S",ee,Y),ue("SS",ee,q),ue("SSS",ee,G),pr="SSSS";pr.length<=9;pr+="S")ue(pr,ne);function mr(e,t){t[xe]=x(1e3*("0."+e))}for(pr="S";pr.length<=9;pr+="S")fe(pr,mr);var vr=Me("Milliseconds",!1);z("z",0,0,"zoneAbbr"),z("zz",0,0,"zoneName");var yr=b.prototype;function br(e){return e}yr.add=Jt,yr.calendar=function(e,t){var r=e||Ot(),i=Ut(r,this).startOf("day"),a=n.calendarFormat(this,i)||"sameElse",o=t&&(M(t[a])?t[a].call(this,r):t[a]);return this.format(o||this.localeData().calendar(a,this,Ot(r)))},yr.clone=function(){return new b(this)},yr.diff=function(e,t,r){var n,i,a;if(!this.isValid())return NaN;if(!(n=Ut(e,this)).isValid())return NaN;switch(i=6e4*(n.utcOffset()-this.utcOffset()),t=R(t)){case"year":a=Qt(this,n)/12;break;case"month":a=Qt(this,n);break;case"quarter":a=Qt(this,n)/3;break;case"second":a=(this-n)/1e3;break;case"minute":a=(this-n)/6e4;break;case"hour":a=(this-n)/36e5;break;case"day":a=(this-n-i)/864e5;break;case"week":a=(this-n-i)/6048e5;break;default:a=this-n}return r?a:w(a)},yr.endOf=function(e){var t;if(void 0===(e=R(e))||"millisecond"===e||!this.isValid())return this;var r=this._isUTC?ur:lr;switch(e){case"year":t=r(this.year()+1,0,1)-1;break;case"quarter":t=r(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":t=r(this.year(),this.month()+1,1)-1;break;case"week":t=r(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":t=r(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":t=r(this.year(),this.month(),this.date()+1)-1;break;case"hour":t=this._d.valueOf(),t+=ar-sr(t+(this._isUTC?0:this.utcOffset()*ir),ar)-1;break;case"minute":t=this._d.valueOf(),t+=ir-sr(t,ir)-1;break;case"second":t=this._d.valueOf(),t+=nr-sr(t,nr)-1}return this._d.setTime(t),n.updateOffset(this,!0),this},yr.format=function(e){e||(e=this.isUtc()?n.defaultFormatUtc:n.defaultFormat);var t=V(this,e);return this.localeData().postformat(t)},yr.from=function(e,t){return this.isValid()&&(_(e)&&e.isValid()||Ot(e).isValid())?Yt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},yr.fromNow=function(e){return this.from(Ot(),e)},yr.to=function(e,t){return this.isValid()&&(_(e)&&e.isValid()||Ot(e).isValid())?Yt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},yr.toNow=function(e){return this.to(Ot(),e)},yr.get=function(e){return M(this[e=R(e)])?this[e]():this},yr.invalidAt=function(){return f(this).overflow},yr.isAfter=function(e,t){var r=_(e)?e:Ot(e);return!(!this.isValid()||!r.isValid())&&("millisecond"===(t=R(t)||"millisecond")?this.valueOf()>r.valueOf():r.valueOf()<this.clone().startOf(t).valueOf())},yr.isBefore=function(e,t){var r=_(e)?e:Ot(e);return!(!this.isValid()||!r.isValid())&&("millisecond"===(t=R(t)||"millisecond")?this.valueOf()<r.valueOf():this.clone().endOf(t).valueOf()<r.valueOf())},yr.isBetween=function(e,t,r,n){var i=_(e)?e:Ot(e),a=_(t)?t:Ot(t);return!!(this.isValid()&&i.isValid()&&a.isValid())&&(("("===(n=n||"()")[0]?this.isAfter(i,r):!this.isBefore(i,r))&&(")"===n[1]?this.isBefore(a,r):!this.isAfter(a,r)))},yr.isSame=function(e,t){var r,n=_(e)?e:Ot(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=R(t)||"millisecond")?this.valueOf()===n.valueOf():(r=n.valueOf(),this.clone().startOf(t).valueOf()<=r&&r<=this.clone().endOf(t).valueOf()))},yr.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},yr.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},yr.isValid=function(){return p(this)},yr.lang=tr,yr.locale=er,yr.localeData=rr,yr.max=Et,yr.min=Dt,yr.parsingFlags=function(){return d({},f(this))},yr.set=function(e,t){if("object"===(void 0===e?"undefined":_typeof(e)))for(var r=function(e){var t=[];for(var r in e)t.push({unit:r,priority:N[r]});return t.sort(function(e,t){return e.priority-t.priority}),t}(e=I(e)),n=0;n<r.length;n++)this[r[n].unit](e[r[n].unit]);else if(M(this[e=R(e)]))return this[e](t);return this},yr.startOf=function(e){var t;if(void 0===(e=R(e))||"millisecond"===e||!this.isValid())return this;var r=this._isUTC?ur:lr;switch(e){case"year":t=r(this.year(),0,1);break;case"quarter":t=r(this.year(),this.month()-this.month()%3,1);break;case"month":t=r(this.year(),this.month(),1);break;case"week":t=r(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":t=r(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":t=r(this.year(),this.month(),this.date());break;case"hour":t=this._d.valueOf(),t-=sr(t+(this._isUTC?0:this.utcOffset()*ir),ar);break;case"minute":t=this._d.valueOf(),t-=sr(t,ir);break;case"second":t=this._d.valueOf(),t-=sr(t,nr)}return this._d.setTime(t),n.updateOffset(this,!0),this},yr.subtract=Zt,yr.toArray=function(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]},yr.toObject=function(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}},yr.toDate=function(){return new Date(this.valueOf())},yr.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,r=t?this.clone().utc():this;return r.year()<0||r.year()>9999?V(r,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):M(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",V(r,"Z")):V(r,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},yr.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e="moment",t="";this.isLocal()||(e=0===this.utcOffset()?"moment.utc":"moment.parseZone",t="Z");var r="["+e+'("]',n=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",i=t+'[")]';return this.format(r+n+"-MM-DD[T]HH:mm:ss.SSS"+i)},yr.toJSON=function(){return this.isValid()?this.toISOString():null},yr.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},yr.unix=function(){return Math.floor(this.valueOf()/1e3)},yr.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},yr.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},yr.year=Ae,yr.isLeapYear=function(){return Ce(this.year())},yr.weekYear=function(e){return dr.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},yr.isoWeekYear=function(e){return dr.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},yr.quarter=yr.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},yr.month=Le,yr.daysInMonth=function(){return Ee(this.year(),this.month())},yr.week=yr.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},yr.isoWeek=yr.isoWeeks=function(e){var t=Ve(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},yr.weeksInYear=function(){var e=this.localeData()._week;return We(this.year(),e.dow,e.doy)},yr.isoWeeksInYear=function(){return We(this.year(),1,4)},yr.date=hr,yr.day=yr.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=function(e,t){return"string"!=typeof e?e:isNaN(e)?"number"==typeof(e=t.weekdaysParse(e))?e:null:parseInt(e,10)}(e,this.localeData()),this.add(e-t,"d")):t},yr.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},yr.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=function(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7},yr.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},yr.hour=yr.hours=it,yr.minute=yr.minutes=fr,yr.second=yr.seconds=gr,yr.millisecond=yr.milliseconds=vr,yr.utcOffset=function(e,t,r){var i,a=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"==typeof e){if(null===(e=Bt(oe,e)))return this}else Math.abs(e)<16&&!r&&(e*=60);return!this._isUTC&&t&&(i=Ht(this)),this._offset=e,this._isUTC=!0,null!=i&&this.add(i,"m"),a!==e&&(!t||this._changeInProgress?Xt(this,Yt(e-a,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,n.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?a:Ht(this)},yr.utc=function(e){return this.utcOffset(0,e)},yr.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Ht(this),"m")),this},yr.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=Bt(ae,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},yr.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?Ot(e).utcOffset():0,(this.utcOffset()-e)%60==0)},yr.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},yr.isLocal=function(){return!!this.isValid()&&!this._isUTC},yr.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},yr.isUtc=zt,yr.isUTC=zt,yr.zoneAbbr=function(){return this._isUTC?"UTC":""},yr.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},yr.dates=$("dates accessor is deprecated. Use date instead.",hr),yr.months=$("months accessor is deprecated. Use month instead",Le),yr.years=$("years accessor is deprecated. Use year instead",Ae),yr.zone=$("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()}),yr.isDSTShifted=$("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",function(){if(!o(this._isDSTShifted))return this._isDSTShifted;var e={};if(v(e,this),(e=At(e))._a){var t=e._isUTC?h(e._a):Ot(e._a);this._isDSTShifted=this.isValid()&&S(e._a,t.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted});var _r=D.prototype;function wr(e,t,r,n){var i=ht(),a=h().set(n,t);return i[r](a,e)}function xr(e,t,r){if(s(e)&&(t=e,e=void 0),e=e||"",null!=t)return wr(e,t,r,"month");var n,i=[];for(n=0;n<12;n++)i[n]=wr(e,n,r,"month");return i}function Sr(e,t,r,n){"boolean"==typeof e?(s(t)&&(r=t,t=void 0),t=t||""):(r=t=e,e=!1,s(t)&&(r=t,t=void 0),t=t||"");var i,a=ht(),o=e?a._week.dow:0;if(null!=r)return wr(t,(r+o)%7,n,"day");var l=[];for(i=0;i<7;i++)l[i]=wr(t,(i+o)%7,n,"day");return l}_r.calendar=function(e,t,r){var n=this._calendar[e]||this._calendar.sameElse;return M(n)?n.call(t,r):n},_r.longDateFormat=function(e){var t=this._longDateFormat[e],r=this._longDateFormat[e.toUpperCase()];return t||!r?t:(this._longDateFormat[e]=r.replace(/MMMM|MM|DD|dddd/g,function(e){return e.slice(1)}),this._longDateFormat[e])},_r.invalidDate=function(){return this._invalidDate},_r.ordinal=function(e){return this._ordinal.replace("%d",e)},_r.preparse=br,_r.postformat=br,_r.relativeTime=function(e,t,r,n){var i=this._relativeTime[r];return M(i)?i(e,t,r,n):i.replace(/%d/i,e)},_r.pastFuture=function(e,t){var r=this._relativeTime[e>0?"future":"past"];return M(r)?r(t):r.replace(/%s/i,t)},_r.set=function(e){var t,r;for(r in e)M(t=e[r])?this[r]=t:this["_"+r]=t;this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},_r.months=function(e,t){return e?i(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||Pe).test(t)?"format":"standalone"][e.month()]:i(this._months)?this._months:this._months.standalone},_r.monthsShort=function(e,t){return e?i(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[Pe.test(t)?"format":"standalone"][e.month()]:i(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},_r.monthsParse=function(e,t,r){var n,i,a;if(this._monthsParseExact)return function(e,t,r){var n,i,a,o=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],n=0;n<12;++n)a=h([2e3,n]),this._shortMonthsParse[n]=this.monthsShort(a,"").toLocaleLowerCase(),this._longMonthsParse[n]=this.months(a,"").toLocaleLowerCase();return r?"MMM"===t?-1!==(i=Te.call(this._shortMonthsParse,o))?i:null:-1!==(i=Te.call(this._longMonthsParse,o))?i:null:"MMM"===t?-1!==(i=Te.call(this._shortMonthsParse,o))?i:-1!==(i=Te.call(this._longMonthsParse,o))?i:null:-1!==(i=Te.call(this._longMonthsParse,o))?i:-1!==(i=Te.call(this._shortMonthsParse,o))?i:null}.call(this,e,t,r);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),n=0;n<12;n++){if(i=h([2e3,n]),r&&!this._longMonthsParse[n]&&(this._longMonthsParse[n]=new RegExp("^"+this.months(i,"").replace(".","")+"$","i"),this._shortMonthsParse[n]=new RegExp("^"+this.monthsShort(i,"").replace(".","")+"$","i")),r||this._monthsParse[n]||(a="^"+this.months(i,"")+"|^"+this.monthsShort(i,""),this._monthsParse[n]=new RegExp(a.replace(".",""),"i")),r&&"MMMM"===t&&this._longMonthsParse[n].test(e))return n;if(r&&"MMM"===t&&this._shortMonthsParse[n].test(e))return n;if(!r&&this._monthsParse[n].test(e))return n}},_r.monthsRegex=function(e){return this._monthsParseExact?(c(this,"_monthsRegex")||Be.call(this),e?this._monthsStrictRegex:this._monthsRegex):(c(this,"_monthsRegex")||(this._monthsRegex=je),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},_r.monthsShortRegex=function(e){return this._monthsParseExact?(c(this,"_monthsRegex")||Be.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(c(this,"_monthsShortRegex")||(this._monthsShortRegex=Fe),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},_r.week=function(e){return Ve(e,this._week.dow,this._week.doy).week},_r.firstDayOfYear=function(){return this._week.doy},_r.firstDayOfWeek=function(){return this._week.dow},_r.weekdays=function(e,t){var r=i(this._weekdays)?this._weekdays:this._weekdays[e&&!0!==e&&this._weekdays.isFormat.test(t)?"format":"standalone"];return!0===e?Ye(r,this._week.dow):e?r[e.day()]:r},_r.weekdaysMin=function(e){return!0===e?Ye(this._weekdaysMin,this._week.dow):e?this._weekdaysMin[e.day()]:this._weekdaysMin},_r.weekdaysShort=function(e){return!0===e?Ye(this._weekdaysShort,this._week.dow):e?this._weekdaysShort[e.day()]:this._weekdaysShort},_r.weekdaysParse=function(e,t,r){var n,i,a;if(this._weekdaysParseExact)return function(e,t,r){var n,i,a,o=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],n=0;n<7;++n)a=h([2e3,1]).day(n),this._minWeekdaysParse[n]=this.weekdaysMin(a,"").toLocaleLowerCase(),this._shortWeekdaysParse[n]=this.weekdaysShort(a,"").toLocaleLowerCase(),this._weekdaysParse[n]=this.weekdays(a,"").toLocaleLowerCase();return r?"dddd"===t?-1!==(i=Te.call(this._weekdaysParse,o))?i:null:"ddd"===t?-1!==(i=Te.call(this._shortWeekdaysParse,o))?i:null:-1!==(i=Te.call(this._minWeekdaysParse,o))?i:null:"dddd"===t?-1!==(i=Te.call(this._weekdaysParse,o))?i:-1!==(i=Te.call(this._shortWeekdaysParse,o))?i:-1!==(i=Te.call(this._minWeekdaysParse,o))?i:null:"ddd"===t?-1!==(i=Te.call(this._shortWeekdaysParse,o))?i:-1!==(i=Te.call(this._weekdaysParse,o))?i:-1!==(i=Te.call(this._minWeekdaysParse,o))?i:null:-1!==(i=Te.call(this._minWeekdaysParse,o))?i:-1!==(i=Te.call(this._weekdaysParse,o))?i:-1!==(i=Te.call(this._shortWeekdaysParse,o))?i:null}.call(this,e,t,r);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),n=0;n<7;n++){if(i=h([2e3,1]).day(n),r&&!this._fullWeekdaysParse[n]&&(this._fullWeekdaysParse[n]=new RegExp("^"+this.weekdays(i,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[n]=new RegExp("^"+this.weekdaysShort(i,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[n]=new RegExp("^"+this.weekdaysMin(i,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[n]||(a="^"+this.weekdays(i,"")+"|^"+this.weekdaysShort(i,"")+"|^"+this.weekdaysMin(i,""),this._weekdaysParse[n]=new RegExp(a.replace(".",""),"i")),r&&"dddd"===t&&this._fullWeekdaysParse[n].test(e))return n;if(r&&"ddd"===t&&this._shortWeekdaysParse[n].test(e))return n;if(r&&"dd"===t&&this._minWeekdaysParse[n].test(e))return n;if(!r&&this._weekdaysParse[n].test(e))return n}},_r.weekdaysRegex=function(e){return this._weekdaysParseExact?(c(this,"_weekdaysRegex")||Qe.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(c(this,"_weekdaysRegex")||(this._weekdaysRegex=Xe),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},_r.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(c(this,"_weekdaysRegex")||Qe.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(c(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Je),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},_r.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(c(this,"_weekdaysRegex")||Qe.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(c(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Ze),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},_r.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},_r.meridiem=function(e,t,r){return e>11?r?"pm":"PM":r?"am":"AM"},ct("en",{dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10,r=1===x(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+r}}),n.lang=$("moment.lang is deprecated. Use moment.locale instead.",ct),n.langData=$("moment.langData is deprecated. Use moment.localeData instead.",ht);var kr=Math.abs;function $r(e,t,r,n){var i=Yt(t,r);return e._milliseconds+=n*i._milliseconds,e._days+=n*i._days,e._months+=n*i._months,e._bubble()}function Cr(e){return e<0?Math.floor(e):Math.ceil(e)}function Tr(e){return 4800*e/146097}function Ar(e){return 146097*e/4800}function Mr(e){return function(){return this.as(e)}}var Or=Mr("ms"),Dr=Mr("s"),Er=Mr("m"),Pr=Mr("h"),Rr=Mr("d"),Ir=Mr("w"),Nr=Mr("M"),Lr=Mr("Q"),Fr=Mr("y");function jr(e){return function(){return this.isValid()?this._data[e]:NaN}}var Br=jr("milliseconds"),Ur=jr("seconds"),Hr=jr("minutes"),zr=jr("hours"),Vr=jr("days"),Wr=jr("months"),Yr=jr("years"),qr=Math.round,Gr={ss:44,s:45,m:45,h:22,d:26,M:11},Kr=Math.abs;function Xr(e){return(e>0)-(e<0)||+e}function Jr(){if(!this.isValid())return this.localeData().invalidDate();var e,t,r=Kr(this._milliseconds)/1e3,n=Kr(this._days),i=Kr(this._months);e=w(r/60),t=w(e/60),r%=60,e%=60;var a=w(i/12),o=i%=12,s=n,l=t,u=e,c=r?r.toFixed(3).replace(/\.?0+$/,""):"",d=this.asSeconds();if(!d)return"P0D";var h=d<0?"-":"",f=Xr(this._months)!==Xr(d)?"-":"",p=Xr(this._days)!==Xr(d)?"-":"",g=Xr(this._milliseconds)!==Xr(d)?"-":"";return h+"P"+(a?f+a+"Y":"")+(o?f+o+"M":"")+(s?p+s+"D":"")+(l||u||c?"T":"")+(l?g+l+"H":"")+(u?g+u+"M":"")+(c?g+c+"S":"")}var Zr=It.prototype;return Zr.isValid=function(){return this._isValid},Zr.abs=function(){var e=this._data;return this._milliseconds=kr(this._milliseconds),this._days=kr(this._days),this._months=kr(this._months),e.milliseconds=kr(e.milliseconds),e.seconds=kr(e.seconds),e.minutes=kr(e.minutes),e.hours=kr(e.hours),e.months=kr(e.months),e.years=kr(e.years),this},Zr.add=function(e,t){return $r(this,e,t,1)},Zr.subtract=function(e,t){return $r(this,e,t,-1)},Zr.as=function(e){if(!this.isValid())return NaN;var t,r,n=this._milliseconds;if("month"===(e=R(e))||"quarter"===e||"year"===e)switch(t=this._days+n/864e5,r=this._months+Tr(t),e){case"month":return r;case"quarter":return r/3;case"year":return r/12}else switch(t=this._days+Math.round(Ar(this._months)),e){case"week":return t/7+n/6048e5;case"day":return t+n/864e5;case"hour":return 24*t+n/36e5;case"minute":return 1440*t+n/6e4;case"second":return 86400*t+n/1e3;case"millisecond":return Math.floor(864e5*t)+n;default:throw new Error("Unknown unit "+e)}},Zr.asMilliseconds=Or,Zr.asSeconds=Dr,Zr.asMinutes=Er,Zr.asHours=Pr,Zr.asDays=Rr,Zr.asWeeks=Ir,Zr.asMonths=Nr,Zr.asQuarters=Lr,Zr.asYears=Fr,Zr.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*x(this._months/12):NaN},Zr._bubble=function(){var e,t,r,n,i,a=this._milliseconds,o=this._days,s=this._months,l=this._data;return a>=0&&o>=0&&s>=0||a<=0&&o<=0&&s<=0||(a+=864e5*Cr(Ar(s)+o),o=0,s=0),l.milliseconds=a%1e3,e=w(a/1e3),l.seconds=e%60,t=w(e/60),l.minutes=t%60,r=w(t/60),l.hours=r%24,o+=w(r/24),i=w(Tr(o)),s+=i,o-=Cr(Ar(i)),n=w(s/12),s%=12,l.days=o,l.months=s,l.years=n,this},Zr.clone=function(){return Yt(this)},Zr.get=function(e){return e=R(e),this.isValid()?this[e+"s"]():NaN},Zr.milliseconds=Br,Zr.seconds=Ur,Zr.minutes=Hr,Zr.hours=zr,Zr.days=Vr,Zr.weeks=function(){return w(this.days()/7)},Zr.months=Wr,Zr.years=Yr,Zr.humanize=function(e){if(!this.isValid())return this.localeData().invalidDate();var t=this.localeData(),r=function(e,t,r){var n=Yt(e).abs(),i=qr(n.as("s")),a=qr(n.as("m")),o=qr(n.as("h")),s=qr(n.as("d")),l=qr(n.as("M")),u=qr(n.as("y")),c=i<=Gr.ss&&["s",i]||i<Gr.s&&["ss",i]||a<=1&&["m"]||a<Gr.m&&["mm",a]||o<=1&&["h"]||o<Gr.h&&["hh",o]||s<=1&&["d"]||s<Gr.d&&["dd",s]||l<=1&&["M"]||l<Gr.M&&["MM",l]||u<=1&&["y"]||["yy",u];return c[2]=t,c[3]=+e>0,c[4]=r,function(e,t,r,n,i){return i.relativeTime(t||1,!!r,e,n)}.apply(null,c)}(this,!e,t);return e&&(r=t.pastFuture(+this,r)),t.postformat(r)},Zr.toISOString=Jr,Zr.toString=Jr,Zr.toJSON=Jr,Zr.locale=er,Zr.localeData=rr,Zr.toIsoString=$("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Jr),Zr.lang=tr,z("X",0,0,"unix"),z("x",0,0,"valueOf"),ue("x",ie),ue("X",/[+-]?\d+(\.\d{1,3})?/),fe("X",function(e,t,r){r._d=new Date(1e3*parseFloat(e,10))}),fe("x",function(e,t,r){r._d=new Date(x(e))}),n.version="2.24.0",t=Ot,n.fn=yr,n.min=function(){return Pt("isBefore",[].slice.call(arguments,0))},n.max=function(){return Pt("isAfter",[].slice.call(arguments,0))},n.now=function(){return Date.now?Date.now():+new Date},n.utc=h,n.unix=function(e){return Ot(1e3*e)},n.months=function(e,t){return xr(e,t,"months")},n.isDate=l,n.locale=ct,n.invalid=g,n.duration=Yt,n.isMoment=_,n.weekdays=function(e,t,r){return Sr(e,t,r,"weekdays")},n.parseZone=function(){return Ot.apply(null,arguments).parseZone()},n.localeData=ht,n.isDuration=Nt,n.monthsShort=function(e,t){return xr(e,t,"monthsShort")},n.weekdaysMin=function(e,t,r){return Sr(e,t,r,"weekdaysMin")},n.defineLocale=dt,n.updateLocale=function(e,t){if(null!=t){var r,n,i=at;null!=(n=ut(e))&&(i=n._config),t=O(i,t),(r=new D(t)).parentLocale=ot[e],ot[e]=r,ct(e)}else null!=ot[e]&&(null!=ot[e].parentLocale?ot[e]=ot[e].parentLocale:null!=ot[e]&&delete ot[e]);return ot[e]},n.locales=function(){return C(ot)},n.weekdaysShort=function(e,t,r){return Sr(e,t,r,"weekdaysShort")},n.normalizeUnits=R,n.relativeTimeRounding=function(e){return void 0===e?qr:"function"==typeof e&&(qr=e,!0)},n.relativeTimeThreshold=function(e,t){return void 0!==Gr[e]&&(void 0===t?Gr[e]:(Gr[e]=t,"s"===e&&(Gr.ss=t-1),!0))},n.calendarFormat=function(e,t){var r=e.diff(t,"days",!0);return r<-6?"sameElse":r<-1?"lastWeek":r<0?"lastDay":r<1?"sameDay":r<2?"nextDay":r<7?"nextWeek":"sameElse"},n.prototype=yr,n.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},n}()}),moment$1=moment;moment$1="function"==typeof moment$1?moment$1:window.moment;var MIN_INTEGER=Number.MIN_SAFE_INTEGER||-9007199254740991,MAX_INTEGER=Number.MAX_SAFE_INTEGER||9007199254740991,INTERVALS={millisecond:{common:!0,size:1,steps:[1,2,5,10,20,50,100,250,500]},second:{common:!0,size:1e3,steps:[1,2,5,10,15,30]},minute:{common:!0,size:6e4,steps:[1,2,5,10,15,30]},hour:{common:!0,size:36e5,steps:[1,2,3,6,12]},day:{common:!0,size:864e5,steps:[1,2,5]},week:{common:!1,size:6048e5,steps:[1,2,3,4]},month:{common:!0,size:2628e6,steps:[1,2,3]},quarter:{common:!1,size:7884e6,steps:[1,2,3,4]},year:{common:!0,size:3154e7}},UNITS=Object.keys(INTERVALS);function sorter(e,t){return e-t}function arrayUnique(e){var t,r,n,i={},a=[];for(t=0,r=e.length;t<r;++t)i[n=e[t]]||(i[n]=!0,a.push(n));return a}function buildLookupTable(e,t,r,n){if("linear"===n||!e.length)return[{time:t,pos:0},{time:r,pos:1}];var i,a,o,s,l,u=[],c=[t];for(i=0,a=e.length;i<a;++i)(s=e[i])>t&&s<r&&c.push(s);for(c.push(r),i=0,a=c.length;i<a;++i)l=c[i+1],o=c[i-1],s=c[i],void 0!==o&&void 0!==l&&Math.round((l+o)/2)===s||u.push({time:s,pos:i/(a-1)});return u}function lookup(e,t,r){for(var n,i,a,o=0,s=e.length-1;o>=0&&o<=s;){if(i=e[(n=o+s>>1)-1]||null,a=e[n],!i)return{lo:null,hi:a};if(a[t]<r)o=n+1;else{if(!(i[t]>r))return{lo:i,hi:a};s=n-1}}return{lo:a,hi:null}}function interpolate$1(e,t,r,n){var i=lookup(e,t,r),a=i.lo?i.hi?i.lo:e[e.length-2]:e[0],o=i.lo?i.hi?i.hi:e[e.length-1]:e[1],s=o[t]-a[t],l=s?(r-a[t])/s:0,u=(o[n]-a[n])*l;return a[n]+u}function momentify(e,t){var r=t.parser,n=t.parser||t.format;return"function"==typeof r?r(e):"string"==typeof e&&"string"==typeof n?moment$1(e,n):(e instanceof moment$1||(e=moment$1(e)),e.isValid()?e:"function"==typeof n?n(e):e)}function parse$1(e,t){if(helpers$1.isNullOrUndef(e))return null;var r=t.options.time,n=momentify(t.getRightValue(e),r);return n.isValid()?(r.round&&n.startOf(r.round),n.valueOf()):null}function determineStepSize(e,t,r,n){var i,a,o,s=t-e,l=INTERVALS[r],u=l.size,c=l.steps;if(!c)return Math.ceil(s/(n*u));for(i=0,a=c.length;i<a&&(o=c[i],!(Math.ceil(s/(u*o))<=n));++i);return o}function determineUnitForAutoTicks(e,t,r,n){var i,a,o,s=UNITS.length;for(i=UNITS.indexOf(e);i<s-1;++i)if(o=(a=INTERVALS[UNITS[i]]).steps?a.steps[a.steps.length-1]:MAX_INTEGER,a.common&&Math.ceil((r-t)/(o*a.size))<=n)return UNITS[i];return UNITS[s-1]}function determineUnitForFormatting(e,t,r,n){var i,a,o=moment$1.duration(moment$1(n).diff(moment$1(r)));for(i=UNITS.length-1;i>=UNITS.indexOf(t);i--)if(a=UNITS[i],INTERVALS[a].common&&o.as(a)>=e.length)return a;return UNITS[t?UNITS.indexOf(t):0]}function determineMajorUnit(e){for(var t=UNITS.indexOf(e)+1,r=UNITS.length;t<r;++t)if(INTERVALS[UNITS[t]].common)return UNITS[t]}function generate$1(e,t,r,n){var i,a=n.time,o=a.unit||determineUnitForAutoTicks(a.minUnit,e,t,r),s=determineMajorUnit(o),l=helpers$1.valueOrDefault(a.stepSize,a.unitStepSize),u="week"===o&&a.isoWeekday,c=n.ticks.major.enabled,d=INTERVALS[o],h=moment$1(e),f=moment$1(t),p=[];for(l||(l=determineStepSize(e,t,o,r)),u&&(h=h.isoWeekday(u),f=f.isoWeekday(u)),h=h.startOf(u?"day":o),(f=f.startOf(u?"day":o))<t&&f.add(1,o),i=moment$1(h),c&&s&&!u&&!a.round&&(i.startOf(s),i.add(~~((h-i)/(d.size*l))*l,o));i<f;i.add(l,o))p.push(+i);return p.push(+i),p}function computeOffsets(e,t,r,n,i){var a,o,s=0,l=0;return i.offset&&t.length&&(i.time.min||(a=t.length>1?t[1]:n,o=t[0],s=(interpolate$1(e,"time",a,"pos")-interpolate$1(e,"time",o,"pos"))/2),i.time.max||(a=t[t.length-1],o=t.length>1?t[t.length-2]:r,l=(interpolate$1(e,"time",a,"pos")-interpolate$1(e,"time",o,"pos"))/2)),{left:s,right:l}}function ticksFromTimestamps(e,t){var r,n,i,a,o=[];for(r=0,n=e.length;r<n;++r)i=e[r],a=!!t&&i===+moment$1(i).startOf(t),o.push({value:i,major:a});return o}function determineLabelFormat(e,t){var r,n,i,a=e.length;for(r=0;r<a;r++){if(0!==(n=momentify(e[r],t)).millisecond())return"MMM D, YYYY h:mm:ss.SSS a";0===n.second()&&0===n.minute()&&0===n.hour()||(i=!0)}return i?"MMM D, YYYY h:mm:ss a":"MMM D, YYYY"}var scale_time=function(){var e=core_scale.extend({initialize:function(){if(!moment$1)throw new Error("Chart.js - Moment.js could not be found! You must include it before Chart.js to use the time scale. Download at https://momentjs.com");this.mergeTicksOptions(),core_scale.prototype.initialize.call(this)},update:function(){var e=this.options;return e.time&&e.time.format&&console.warn("options.time.format is deprecated and replaced by options.time.parser."),core_scale.prototype.update.apply(this,arguments)},getRightValue:function(e){return e&&void 0!==e.t&&(e=e.t),core_scale.prototype.getRightValue.call(this,e)},determineDataLimits:function(){var e,t,r,n,i,a,o=this,s=o.chart,l=o.options.time,u=l.unit||"day",c=MAX_INTEGER,d=MIN_INTEGER,h=[],f=[],p=[];for(e=0,r=s.data.labels.length;e<r;++e)p.push(parse$1(s.data.labels[e],o));for(e=0,r=(s.data.datasets||[]).length;e<r;++e)if(s.isDatasetVisible(e))if(i=s.data.datasets[e].data,helpers$1.isObject(i[0]))for(f[e]=[],t=0,n=i.length;t<n;++t)a=parse$1(i[t],o),h.push(a),f[e][t]=a;else h.push.apply(h,p),f[e]=p.slice(0);else f[e]=[];p.length&&(p=arrayUnique(p).sort(sorter),c=Math.min(c,p[0]),d=Math.max(d,p[p.length-1])),h.length&&(h=arrayUnique(h).sort(sorter),c=Math.min(c,h[0]),d=Math.max(d,h[h.length-1])),c=parse$1(l.min,o)||c,d=parse$1(l.max,o)||d,c=c===MAX_INTEGER?+moment$1().startOf(u):c,d=d===MIN_INTEGER?+moment$1().endOf(u)+1:d,o.min=Math.min(c,d),o.max=Math.max(c+1,d),o._horizontal=o.isHorizontal(),o._table=[],o._timestamps={data:h,datasets:f,labels:p}},buildTicks:function(){var e,t,r,n=this,i=n.min,a=n.max,o=n.options,s=o.time,l=[],u=[];switch(o.ticks.source){case"data":l=n._timestamps.data;break;case"labels":l=n._timestamps.labels;break;case"auto":default:l=generate$1(i,a,n.getLabelCapacity(i),o)}for("ticks"===o.bounds&&l.length&&(i=l[0],a=l[l.length-1]),i=parse$1(s.min,n)||i,a=parse$1(s.max,n)||a,e=0,t=l.length;e<t;++e)(r=l[e])>=i&&r<=a&&u.push(r);return n.min=i,n.max=a,n._unit=s.unit||determineUnitForFormatting(u,s.minUnit,n.min,n.max),n._majorUnit=determineMajorUnit(n._unit),n._table=buildLookupTable(n._timestamps.data,i,a,o.distribution),n._offsets=computeOffsets(n._table,u,i,a,o),n._labelFormat=determineLabelFormat(n._timestamps.data,s),ticksFromTimestamps(u,n._majorUnit)},getLabelForIndex:function(e,t){var r=this.chart.data,n=this.options.time,i=r.labels&&e<r.labels.length?r.labels[e]:"",a=r.datasets[t].data[e];return helpers$1.isObject(a)&&(i=this.getRightValue(a)),n.tooltipFormat?momentify(i,n).format(n.tooltipFormat):"string"==typeof i?i:momentify(i,n).format(this._labelFormat)},tickFormatFunction:function(e,t,r,n){var i=this.options,a=e.valueOf(),o=i.time.displayFormats,s=o[this._unit],l=this._majorUnit,u=o[l],c=e.clone().startOf(l).valueOf(),d=i.ticks.major,h=d.enabled&&l&&u&&a===c,f=e.format(n||(h?u:s)),p=h?d:i.ticks.minor,g=helpers$1.valueOrDefault(p.callback,p.userCallback);return g?g(f,t,r):f},convertTicksToLabels:function(e){var t,r,n=[];for(t=0,r=e.length;t<r;++t)n.push(this.tickFormatFunction(moment$1(e[t].value),t,e));return n},getPixelForOffset:function(e){var t=this,r=t._horizontal?t.width:t.height,n=t._horizontal?t.left:t.top,i=interpolate$1(t._table,"time",e,"pos");return n+r*(t._offsets.left+i)/(t._offsets.left+1+t._offsets.right)},getPixelForValue:function(e,t,r){var n=null;if(void 0!==t&&void 0!==r&&(n=this._timestamps.datasets[r][t]),null===n&&(n=parse$1(e,this)),null!==n)return this.getPixelForOffset(n)},getPixelForTick:function(e){var t=this.getTicks();return e>=0&&e<t.length?this.getPixelForOffset(t[e].value):null},getValueForPixel:function(e){var t=this,r=t._horizontal?t.width:t.height,n=t._horizontal?t.left:t.top,i=(r?(e-n)/r:0)*(t._offsets.left+1+t._offsets.left)-t._offsets.right,a=interpolate$1(t._table,"pos",i,"time");return moment$1(a)},getLabelWidth:function(e){var t=this.options.ticks,r=this.ctx.measureText(e).width,n=helpers$1.toRadians(t.maxRotation),i=Math.cos(n),a=Math.sin(n);return r*i+helpers$1.valueOrDefault(t.fontSize,core_defaults.global.defaultFontSize)*a},getLabelCapacity:function(e){var t=this,r=t.options.time.displayFormats.millisecond,n=t.tickFormatFunction(moment$1(e),0,[],r),i=t.getLabelWidth(n),a=t.isHorizontal()?t.width:t.height,o=Math.floor(a/i);return o>0?o:1}});core_scaleService.registerScaleType("time",e,{position:"bottom",distribution:"linear",bounds:"data",time:{parser:!1,format:!1,unit:!1,round:!1,displayFormat:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{millisecond:"h:mm:ss.SSS a",second:"h:mm:ss a",minute:"h:mm a",hour:"hA",day:"MMM D",week:"ll",month:"MMM YYYY",quarter:"[Q]Q - YYYY",year:"YYYY"}},ticks:{autoSkip:!1,source:"auto",major:{enabled:!1}}})};function computeMinSampleSize(e,t){var r,n,i,a,o=e.isHorizontal()?e.width:e.height,s=e.getTicks();for(i=1,a=t.length;i<a;++i)o=Math.min(o,t[i]-t[i-1]);for(i=0,a=s.length;i<a;++i)n=e.getPixelForTick(i),o=i>0?Math.min(o,n-r):o,r=n;return o}function computeFitCategoryTraits(e,t,r){var n,i,a=r.barThickness,o=t.stackCount,s=t.pixels[e];return helpers$1.isNullOrUndef(a)?(n=t.min*r.categoryPercentage,i=r.barPercentage):(n=a*o,i=1),{chunk:n/o,ratio:i,start:s-n/2}}function computeFlexCategoryTraits(e,t,r){var n,i=t.pixels,a=i[e],o=e>0?i[e-1]:null,s=e<i.length-1?i[e+1]:null,l=r.categoryPercentage;return null===o&&(o=a-(null===s?t.end-a:s-a)),null===s&&(s=a+a-o),n=a-(a-o)/2*l,{chunk:(s-o)/2*l/t.stackCount,ratio:r.barPercentage,start:n}}core_defaults._set("bar",{hover:{mode:"label"},scales:{xAxes:[{type:"category",categoryPercentage:.8,barPercentage:.9,offset:!0,gridLines:{offsetGridLines:!0}}],yAxes:[{type:"linear"}]}}),core_defaults._set("horizontalBar",{hover:{mode:"index",axis:"y"},scales:{xAxes:[{type:"linear",position:"bottom"}],yAxes:[{position:"left",type:"category",categoryPercentage:.8,barPercentage:.9,offset:!0,gridLines:{offsetGridLines:!0}}]},elements:{rectangle:{borderSkipped:"left"}},tooltips:{callbacks:{title:function(e,t){var r="";return e.length>0&&(e[0].yLabel?r=e[0].yLabel:t.labels.length>0&&e[0].index<t.labels.length&&(r=t.labels[e[0].index])),r},label:function(e,t){return(t.datasets[e.datasetIndex].label||"")+": "+e.xLabel}},mode:"index",axis:"y"}});var controller_bar=function(e){e.controllers.bar=e.DatasetController.extend({dataElementType:elements.Rectangle,initialize:function(){var t;e.DatasetController.prototype.initialize.apply(this,arguments),(t=this.getMeta()).stack=this.getDataset().stack,t.bar=!0},update:function(e){var t,r,n=this.getMeta().data;for(this._ruler=this.getRuler(),t=0,r=n.length;t<r;++t)this.updateElement(n[t],t,e)},updateElement:function(e,t,r){var n=this,i=n.chart,a=n.getMeta(),o=n.getDataset(),s=e.custom||{},l=i.options.elements.rectangle;e._xScale=n.getScaleForId(a.xAxisID),e._yScale=n.getScaleForId(a.yAxisID),e._datasetIndex=n.index,e._index=t,e._model={datasetLabel:o.label,label:i.data.labels[t],borderSkipped:s.borderSkipped?s.borderSkipped:l.borderSkipped,backgroundColor:s.backgroundColor?s.backgroundColor:helpers$1.valueAtIndexOrDefault(o.backgroundColor,t,l.backgroundColor),borderColor:s.borderColor?s.borderColor:helpers$1.valueAtIndexOrDefault(o.borderColor,t,l.borderColor),borderWidth:s.borderWidth?s.borderWidth:helpers$1.valueAtIndexOrDefault(o.borderWidth,t,l.borderWidth)},n.updateElementGeometry(e,t,r),e.pivot()},updateElementGeometry:function(e,t,r){var n=this,i=e._model,a=n.getValueScale(),o=a.getBasePixel(),s=a.isHorizontal(),l=n._ruler||n.getRuler(),u=n.calculateBarValuePixels(n.index,t),c=n.calculateBarIndexPixels(n.index,t,l);i.horizontal=s,i.base=r?o:u.base,i.x=s?r?o:u.head:c.center,i.y=s?c.center:r?o:u.head,i.height=s?c.size:void 0,i.width=s?void 0:c.size},getValueScaleId:function(){return this.getMeta().yAxisID},getIndexScaleId:function(){return this.getMeta().xAxisID},getValueScale:function(){return this.getScaleForId(this.getValueScaleId())},getIndexScale:function(){return this.getScaleForId(this.getIndexScaleId())},_getStacks:function(e){var t,r,n=this.chart,i=this.getIndexScale().options.stacked,a=void 0===e?n.data.datasets.length:e+1,o=[];for(t=0;t<a;++t)(r=n.getDatasetMeta(t)).bar&&n.isDatasetVisible(t)&&(!1===i||!0===i&&-1===o.indexOf(r.stack)||void 0===i&&(void 0===r.stack||-1===o.indexOf(r.stack)))&&o.push(r.stack);return o},getStackCount:function(){return this._getStacks().length},getStackIndex:function(e,t){var r=this._getStacks(e),n=void 0!==t?r.indexOf(t):-1;return-1===n?r.length-1:n},getRuler:function(){var e,t,r=this.getIndexScale(),n=this.getStackCount(),i=this.index,a=r.isHorizontal(),o=a?r.left:r.top,s=o+(a?r.width:r.height),l=[];for(e=0,t=this.getMeta().data.length;e<t;++e)l.push(r.getPixelForValue(null,e,i));return{min:helpers$1.isNullOrUndef(r.options.barThickness)?computeMinSampleSize(r,l):-1,pixels:l,start:o,end:s,stackCount:n,scale:r}},calculateBarValuePixels:function(e,t){var r,n,i,a,o,s,l=this.chart,u=this.getMeta(),c=this.getValueScale(),d=l.data.datasets,h=c.getRightValue(d[e].data[t]),f=c.options.stacked,p=u.stack,g=0;if(f||void 0===f&&void 0!==p)for(r=0;r<e;++r)(n=l.getDatasetMeta(r)).bar&&n.stack===p&&n.controller.getValueScaleId()===c.id&&l.isDatasetVisible(r)&&(i=c.getRightValue(d[r].data[t]),(h<0&&i<0||h>=0&&i>0)&&(g+=i));return a=c.getPixelForValue(g),{size:s=((o=c.getPixelForValue(g+h))-a)/2,base:a,head:o,center:o+s/2}},calculateBarIndexPixels:function(e,t,r){var n=r.scale.options,i="flex"===n.barThickness?computeFlexCategoryTraits(t,r,n):computeFitCategoryTraits(t,r,n),a=this.getStackIndex(e,this.getMeta().stack),o=i.start+i.chunk*a+i.chunk/2,s=Math.min(helpers$1.valueOrDefault(n.maxBarThickness,1/0),i.chunk*i.ratio);return{base:o-s/2,head:o+s/2,center:o,size:s}},draw:function(){var e=this.chart,t=this.getValueScale(),r=this.getMeta().data,n=this.getDataset(),i=r.length,a=0;for(helpers$1.canvas.clipArea(e.ctx,e.chartArea);a<i;++a)isNaN(t.getRightValue(n.data[a]))||r[a].draw();helpers$1.canvas.unclipArea(e.ctx)}}),e.controllers.horizontalBar=e.controllers.bar.extend({getValueScaleId:function(){return this.getMeta().xAxisID},getIndexScaleId:function(){return this.getMeta().yAxisID}})};core_defaults._set("bubble",{hover:{mode:"single"},scales:{xAxes:[{type:"linear",position:"bottom",id:"x-axis-0"}],yAxes:[{type:"linear",position:"left",id:"y-axis-0"}]},tooltips:{callbacks:{title:function(){return""},label:function(e,t){var r=t.datasets[e.datasetIndex].label||"",n=t.datasets[e.datasetIndex].data[e.index];return r+": ("+e.xLabel+", "+e.yLabel+", "+n.r+")"}}}});var controller_bubble=function(e){e.controllers.bubble=e.DatasetController.extend({dataElementType:elements.Point,update:function(e){var t=this,r=t.getMeta().data;helpers$1.each(r,function(r,n){t.updateElement(r,n,e)})},updateElement:function(e,t,r){var n=this,i=n.getMeta(),a=e.custom||{},o=n.getScaleForId(i.xAxisID),s=n.getScaleForId(i.yAxisID),l=n._resolveElementOptions(e,t),u=n.getDataset().data[t],c=n.index,d=r?o.getPixelForDecimal(.5):o.getPixelForValue("object"===(void 0===u?"undefined":_typeof(u))?u:NaN,t,c),h=r?s.getBasePixel():s.getPixelForValue(u,t,c);e._xScale=o,e._yScale=s,e._options=l,e._datasetIndex=c,e._index=t,e._model={backgroundColor:l.backgroundColor,borderColor:l.borderColor,borderWidth:l.borderWidth,hitRadius:l.hitRadius,pointStyle:l.pointStyle,rotation:l.rotation,radius:r?0:l.radius,skip:a.skip||isNaN(d)||isNaN(h),x:d,y:h},e.pivot()},setHoverStyle:function(e){var t=e._model,r=e._options;e.$previousStyle={backgroundColor:t.backgroundColor,borderColor:t.borderColor,borderWidth:t.borderWidth,radius:t.radius},t.backgroundColor=helpers$1.valueOrDefault(r.hoverBackgroundColor,helpers$1.getHoverColor(r.backgroundColor)),t.borderColor=helpers$1.valueOrDefault(r.hoverBorderColor,helpers$1.getHoverColor(r.borderColor)),t.borderWidth=helpers$1.valueOrDefault(r.hoverBorderWidth,r.borderWidth),t.radius=r.radius+r.hoverRadius},_resolveElementOptions:function(e,t){var r,n,i,a=this.chart,o=a.data.datasets[this.index],s=e.custom||{},l=a.options.elements.point,u=helpers$1.options.resolve,c=o.data[t],d={},h={chart:a,dataIndex:t,dataset:o,datasetIndex:this.index},f=["backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth","hoverRadius","hitRadius","pointStyle","rotation"];for(r=0,n=f.length;r<n;++r)d[i=f[r]]=u([s[i],o[i],l[i]],h,t);return d.radius=u([s.radius,c?c.r:void 0,o.radius,l.radius],h,t),d}})};core_defaults._set("doughnut",{animation:{animateRotate:!0,animateScale:!1},hover:{mode:"single"},legendCallback:function(e){var t=[];t.push('<ul class="'+e.id+'-legend">');var r=e.data,n=r.datasets,i=r.labels;if(n.length)for(var a=0;a<n[0].data.length;++a)t.push('<li><span style="background-color:'+n[0].backgroundColor[a]+'"></span>'),i[a]&&t.push(i[a]),t.push("</li>");return t.push("</ul>"),t.join("")},legend:{labels:{generateLabels:function(e){var t=e.data;return t.labels.length&&t.datasets.length?t.labels.map(function(r,n){var i=e.getDatasetMeta(0),a=t.datasets[0],o=i.data[n],s=o&&o.custom||{},l=helpers$1.valueAtIndexOrDefault,u=e.options.elements.arc;return{text:r,fillStyle:s.backgroundColor?s.backgroundColor:l(a.backgroundColor,n,u.backgroundColor),strokeStyle:s.borderColor?s.borderColor:l(a.borderColor,n,u.borderColor),lineWidth:s.borderWidth?s.borderWidth:l(a.borderWidth,n,u.borderWidth),hidden:isNaN(a.data[n])||i.data[n].hidden,index:n}}):[]}},onClick:function(e,t){var r,n,i,a=t.index,o=this.chart;for(r=0,n=(o.data.datasets||[]).length;r<n;++r)(i=o.getDatasetMeta(r)).data[a]&&(i.data[a].hidden=!i.data[a].hidden);o.update()}},cutoutPercentage:50,rotation:-.5*Math.PI,circumference:2*Math.PI,tooltips:{callbacks:{title:function(){return""},label:function(e,t){var r=t.labels[e.index],n=": "+t.datasets[e.datasetIndex].data[e.index];return helpers$1.isArray(r)?(r=r.slice())[0]+=n:r+=n,r}}}}),core_defaults._set("pie",helpers$1.clone(core_defaults.doughnut)),core_defaults._set("pie",{cutoutPercentage:0});var controller_doughnut=function(e){e.controllers.doughnut=e.controllers.pie=e.DatasetController.extend({dataElementType:elements.Arc,linkScales:helpers$1.noop,getRingIndex:function(e){for(var t=0,r=0;r<e;++r)this.chart.isDatasetVisible(r)&&++t;return t},update:function(e){var t=this,r=t.chart,n=r.chartArea,i=r.options,a=i.elements.arc,o=n.right-n.left-a.borderWidth,s=n.bottom-n.top-a.borderWidth,l=Math.min(o,s),u={x:0,y:0},c=t.getMeta(),d=i.cutoutPercentage,h=i.circumference;if(h<2*Math.PI){var f=i.rotation%(2*Math.PI),p=(f+=2*Math.PI*(f>=Math.PI?-1:f<-Math.PI?1:0))+h,g={x:Math.cos(f),y:Math.sin(f)},m={x:Math.cos(p),y:Math.sin(p)},v=f<=0&&p>=0||f<=2*Math.PI&&2*Math.PI<=p,y=f<=.5*Math.PI&&.5*Math.PI<=p||f<=2.5*Math.PI&&2.5*Math.PI<=p,b=f<=-Math.PI&&-Math.PI<=p||f<=Math.PI&&Math.PI<=p,_=f<=.5*-Math.PI&&.5*-Math.PI<=p||f<=1.5*Math.PI&&1.5*Math.PI<=p,w=d/100,x={x:b?-1:Math.min(g.x*(g.x<0?1:w),m.x*(m.x<0?1:w)),y:_?-1:Math.min(g.y*(g.y<0?1:w),m.y*(m.y<0?1:w))},S={x:v?1:Math.max(g.x*(g.x>0?1:w),m.x*(m.x>0?1:w)),y:y?1:Math.max(g.y*(g.y>0?1:w),m.y*(m.y>0?1:w))},k={width:.5*(S.x-x.x),height:.5*(S.y-x.y)};l=Math.min(o/k.width,s/k.height),u={x:-.5*(S.x+x.x),y:-.5*(S.y+x.y)}}r.borderWidth=t.getMaxBorderWidth(c.data),r.outerRadius=Math.max((l-r.borderWidth)/2,0),r.innerRadius=Math.max(d?r.outerRadius/100*d:0,0),r.radiusLength=(r.outerRadius-r.innerRadius)/r.getVisibleDatasetCount(),r.offsetX=u.x*r.outerRadius,r.offsetY=u.y*r.outerRadius,c.total=t.calculateTotal(),t.outerRadius=r.outerRadius-r.radiusLength*t.getRingIndex(t.index),t.innerRadius=Math.max(t.outerRadius-r.radiusLength,0),helpers$1.each(c.data,function(r,n){t.updateElement(r,n,e)})},updateElement:function(e,t,r){var n=this,i=n.chart,a=i.chartArea,o=i.options,s=o.animation,l=(a.left+a.right)/2,u=(a.top+a.bottom)/2,c=o.rotation,d=o.rotation,h=n.getDataset(),f=r&&s.animateRotate?0:e.hidden?0:n.calculateCircumference(h.data[t])*(o.circumference/(2*Math.PI)),p=r&&s.animateScale?0:n.innerRadius,g=r&&s.animateScale?0:n.outerRadius,m=helpers$1.valueAtIndexOrDefault;helpers$1.extend(e,{_datasetIndex:n.index,_index:t,_model:{x:l+i.offsetX,y:u+i.offsetY,startAngle:c,endAngle:d,circumference:f,outerRadius:g,innerRadius:p,label:m(h.label,t,i.data.labels[t])}});var v=e._model,y=e.custom||{},b=helpers$1.valueAtIndexOrDefault,_=this.chart.options.elements.arc;v.backgroundColor=y.backgroundColor?y.backgroundColor:b(h.backgroundColor,t,_.backgroundColor),v.borderColor=y.borderColor?y.borderColor:b(h.borderColor,t,_.borderColor),v.borderWidth=y.borderWidth?y.borderWidth:b(h.borderWidth,t,_.borderWidth),r&&s.animateRotate||(v.startAngle=0===t?o.rotation:n.getMeta().data[t-1]._model.endAngle,v.endAngle=v.startAngle+v.circumference),e.pivot()},calculateTotal:function(){var e,t=this.getDataset(),r=this.getMeta(),n=0;return helpers$1.each(r.data,function(r,i){e=t.data[i],isNaN(e)||r.hidden||(n+=Math.abs(e))}),n},calculateCircumference:function(e){var t=this.getMeta().total;return t>0&&!isNaN(e)?2*Math.PI*(Math.abs(e)/t):0},getMaxBorderWidth:function(e){for(var t,r,n=0,i=this.index,a=e.length,o=0;o<a;o++)t=e[o]._model?e[o]._model.borderWidth:0,n=(r=e[o]._chart?e[o]._chart.config.data.datasets[i].hoverBorderWidth:0)>(n=t>n?t:n)?r:n;return n}})};core_defaults._set("line",{showLines:!0,spanGaps:!1,hover:{mode:"label"},scales:{xAxes:[{type:"category",id:"x-axis-0"}],yAxes:[{type:"linear",id:"y-axis-0"}]}});var controller_line=function(e){function t(e,t){return helpers$1.valueOrDefault(e.showLine,t.showLines)}e.controllers.line=e.DatasetController.extend({datasetElementType:elements.Line,dataElementType:elements.Point,update:function(e){var r,n,i,a=this,o=a.getMeta(),s=o.dataset,l=o.data||[],u=a.chart.options,c=u.elements.line,d=a.getScaleForId(o.yAxisID),h=a.getDataset(),f=t(h,u);for(f&&(i=s.custom||{},void 0!==h.tension&&void 0===h.lineTension&&(h.lineTension=h.tension),s._scale=d,s._datasetIndex=a.index,s._children=l,s._model={spanGaps:h.spanGaps?h.spanGaps:u.spanGaps,tension:i.tension?i.tension:helpers$1.valueOrDefault(h.lineTension,c.tension),backgroundColor:i.backgroundColor?i.backgroundColor:h.backgroundColor||c.backgroundColor,borderWidth:i.borderWidth?i.borderWidth:h.borderWidth||c.borderWidth,borderColor:i.borderColor?i.borderColor:h.borderColor||c.borderColor,borderCapStyle:i.borderCapStyle?i.borderCapStyle:h.borderCapStyle||c.borderCapStyle,borderDash:i.borderDash?i.borderDash:h.borderDash||c.borderDash,borderDashOffset:i.borderDashOffset?i.borderDashOffset:h.borderDashOffset||c.borderDashOffset,borderJoinStyle:i.borderJoinStyle?i.borderJoinStyle:h.borderJoinStyle||c.borderJoinStyle,fill:i.fill?i.fill:void 0!==h.fill?h.fill:c.fill,steppedLine:i.steppedLine?i.steppedLine:helpers$1.valueOrDefault(h.steppedLine,c.stepped),cubicInterpolationMode:i.cubicInterpolationMode?i.cubicInterpolationMode:helpers$1.valueOrDefault(h.cubicInterpolationMode,c.cubicInterpolationMode)},s.pivot()),r=0,n=l.length;r<n;++r)a.updateElement(l[r],r,e);for(f&&0!==s._model.tension&&a.updateBezierControlPoints(),r=0,n=l.length;r<n;++r)l[r].pivot()},getPointBackgroundColor:function(e,t){var r=this.chart.options.elements.point.backgroundColor,n=this.getDataset(),i=e.custom||{};return i.backgroundColor?r=i.backgroundColor:n.pointBackgroundColor?r=helpers$1.valueAtIndexOrDefault(n.pointBackgroundColor,t,r):n.backgroundColor&&(r=n.backgroundColor),r},getPointBorderColor:function(e,t){var r=this.chart.options.elements.point.borderColor,n=this.getDataset(),i=e.custom||{};return i.borderColor?r=i.borderColor:n.pointBorderColor?r=helpers$1.valueAtIndexOrDefault(n.pointBorderColor,t,r):n.borderColor&&(r=n.borderColor),r},getPointBorderWidth:function(e,t){var r=this.chart.options.elements.point.borderWidth,n=this.getDataset(),i=e.custom||{};return isNaN(i.borderWidth)?!isNaN(n.pointBorderWidth)||helpers$1.isArray(n.pointBorderWidth)?r=helpers$1.valueAtIndexOrDefault(n.pointBorderWidth,t,r):isNaN(n.borderWidth)||(r=n.borderWidth):r=i.borderWidth,r},getPointRotation:function(e,t){var r=this.chart.options.elements.point.rotation,n=this.getDataset(),i=e.custom||{};return isNaN(i.rotation)?isNaN(n.pointRotation)&&!helpers$1.isArray(n.pointRotation)||(r=helpers$1.valueAtIndexOrDefault(n.pointRotation,t,r)):r=i.rotation,r},updateElement:function(e,t,r){var n,i,a=this,o=a.getMeta(),s=e.custom||{},l=a.getDataset(),u=a.index,c=l.data[t],d=a.getScaleForId(o.yAxisID),h=a.getScaleForId(o.xAxisID),f=a.chart.options.elements.point;void 0!==l.radius&&void 0===l.pointRadius&&(l.pointRadius=l.radius),void 0!==l.hitRadius&&void 0===l.pointHitRadius&&(l.pointHitRadius=l.hitRadius),n=h.getPixelForValue("object"===(void 0===c?"undefined":_typeof(c))?c:NaN,t,u),i=r?d.getBasePixel():a.calculatePointY(c,t,u),e._xScale=h,e._yScale=d,e._datasetIndex=u,e._index=t,e._model={x:n,y:i,skip:s.skip||isNaN(n)||isNaN(i),radius:s.radius||helpers$1.valueAtIndexOrDefault(l.pointRadius,t,f.radius),pointStyle:s.pointStyle||helpers$1.valueAtIndexOrDefault(l.pointStyle,t,f.pointStyle),rotation:a.getPointRotation(e,t),backgroundColor:a.getPointBackgroundColor(e,t),borderColor:a.getPointBorderColor(e,t),borderWidth:a.getPointBorderWidth(e,t),tension:o.dataset._model?o.dataset._model.tension:0,steppedLine:!!o.dataset._model&&o.dataset._model.steppedLine,hitRadius:s.hitRadius||helpers$1.valueAtIndexOrDefault(l.pointHitRadius,t,f.hitRadius)}},calculatePointY:function(e,t,r){var n,i,a,o=this.chart,s=this.getMeta(),l=this.getScaleForId(s.yAxisID),u=0,c=0;if(l.options.stacked){for(n=0;n<r;n++)if(i=o.data.datasets[n],"line"===(a=o.getDatasetMeta(n)).type&&a.yAxisID===l.id&&o.isDatasetVisible(n)){var d=Number(l.getRightValue(i.data[t]));d<0?c+=d||0:u+=d||0}var h=Number(l.getRightValue(e));return h<0?l.getPixelForValue(c+h):l.getPixelForValue(u+h)}return l.getPixelForValue(e)},updateBezierControlPoints:function(){var e,t,r,n,i=this.getMeta(),a=this.chart.chartArea,o=i.data||[];function s(e,t,r){return Math.max(Math.min(e,r),t)}if(i.dataset._model.spanGaps&&(o=o.filter(function(e){return!e._model.skip})),"monotone"===i.dataset._model.cubicInterpolationMode)helpers$1.splineCurveMonotone(o);else for(e=0,t=o.length;e<t;++e)r=o[e]._model,n=helpers$1.splineCurve(helpers$1.previousItem(o,e)._model,r,helpers$1.nextItem(o,e)._model,i.dataset._model.tension),r.controlPointPreviousX=n.previous.x,r.controlPointPreviousY=n.previous.y,r.controlPointNextX=n.next.x,r.controlPointNextY=n.next.y;if(this.chart.options.elements.line.capBezierPoints)for(e=0,t=o.length;e<t;++e)(r=o[e]._model).controlPointPreviousX=s(r.controlPointPreviousX,a.left,a.right),r.controlPointPreviousY=s(r.controlPointPreviousY,a.top,a.bottom),r.controlPointNextX=s(r.controlPointNextX,a.left,a.right),r.controlPointNextY=s(r.controlPointNextY,a.top,a.bottom)},draw:function(){var e,r=this.chart,n=this.getMeta(),i=n.data||[],a=r.chartArea,o=i.length,s=0;for(t(this.getDataset(),r.options)&&(e=(n.dataset._model.borderWidth||0)/2,helpers$1.canvas.clipArea(r.ctx,{left:a.left,right:a.right,top:a.top-e,bottom:a.bottom+e}),n.dataset.draw(),helpers$1.canvas.unclipArea(r.ctx));s<o;++s)i[s].draw(a)},setHoverStyle:function(e){var t=this.chart.data.datasets[e._datasetIndex],r=e._index,n=e.custom||{},i=e._model;e.$previousStyle={backgroundColor:i.backgroundColor,borderColor:i.borderColor,borderWidth:i.borderWidth,radius:i.radius},i.backgroundColor=n.hoverBackgroundColor||helpers$1.valueAtIndexOrDefault(t.pointHoverBackgroundColor,r,helpers$1.getHoverColor(i.backgroundColor)),i.borderColor=n.hoverBorderColor||helpers$1.valueAtIndexOrDefault(t.pointHoverBorderColor,r,helpers$1.getHoverColor(i.borderColor)),i.borderWidth=n.hoverBorderWidth||helpers$1.valueAtIndexOrDefault(t.pointHoverBorderWidth,r,i.borderWidth),i.radius=n.hoverRadius||helpers$1.valueAtIndexOrDefault(t.pointHoverRadius,r,this.chart.options.elements.point.hoverRadius)}})};core_defaults._set("polarArea",{scale:{type:"radialLinear",angleLines:{display:!1},gridLines:{circular:!0},pointLabels:{display:!1},ticks:{beginAtZero:!0}},animation:{animateRotate:!0,animateScale:!0},startAngle:-.5*Math.PI,legendCallback:function(e){var t=[];t.push('<ul class="'+e.id+'-legend">');var r=e.data,n=r.datasets,i=r.labels;if(n.length)for(var a=0;a<n[0].data.length;++a)t.push('<li><span style="background-color:'+n[0].backgroundColor[a]+'"></span>'),i[a]&&t.push(i[a]),t.push("</li>");return t.push("</ul>"),t.join("")},legend:{labels:{generateLabels:function(e){var t=e.data;return t.labels.length&&t.datasets.length?t.labels.map(function(r,n){var i=e.getDatasetMeta(0),a=t.datasets[0],o=i.data[n].custom||{},s=helpers$1.valueAtIndexOrDefault,l=e.options.elements.arc;return{text:r,fillStyle:o.backgroundColor?o.backgroundColor:s(a.backgroundColor,n,l.backgroundColor),strokeStyle:o.borderColor?o.borderColor:s(a.borderColor,n,l.borderColor),lineWidth:o.borderWidth?o.borderWidth:s(a.borderWidth,n,l.borderWidth),hidden:isNaN(a.data[n])||i.data[n].hidden,index:n}}):[]}},onClick:function(e,t){var r,n,i,a=t.index,o=this.chart;for(r=0,n=(o.data.datasets||[]).length;r<n;++r)(i=o.getDatasetMeta(r)).data[a].hidden=!i.data[a].hidden;o.update()}},tooltips:{callbacks:{title:function(){return""},label:function(e,t){return t.labels[e.index]+": "+e.yLabel}}}});var controller_polarArea=function(e){e.controllers.polarArea=e.DatasetController.extend({dataElementType:elements.Arc,linkScales:helpers$1.noop,update:function(e){var t,r,n,i=this,a=i.getDataset(),o=i.getMeta(),s=i.chart.options.startAngle||0,l=i._starts=[],u=i._angles=[];for(i._updateRadius(),o.count=i.countVisibleElements(),t=0,r=a.data.length;t<r;t++)l[t]=s,n=i._computeAngle(t),u[t]=n,s+=n;helpers$1.each(o.data,function(t,r){i.updateElement(t,r,e)})},_updateRadius:function(){var e=this,t=e.chart,r=t.chartArea,n=t.options,i=n.elements.arc,a=Math.min(r.right-r.left,r.bottom-r.top);t.outerRadius=Math.max((a-i.borderWidth/2)/2,0),t.innerRadius=Math.max(n.cutoutPercentage?t.outerRadius/100*n.cutoutPercentage:1,0),t.radiusLength=(t.outerRadius-t.innerRadius)/t.getVisibleDatasetCount(),e.outerRadius=t.outerRadius-t.radiusLength*e.index,e.innerRadius=e.outerRadius-t.radiusLength},updateElement:function(e,t,r){var n=this,i=n.chart,a=n.getDataset(),o=i.options,s=o.animation,l=i.scale,u=i.data.labels,c=l.xCenter,d=l.yCenter,h=o.startAngle,f=e.hidden?0:l.getDistanceFromCenterForValue(a.data[t]),p=n._starts[t],g=p+(e.hidden?0:n._angles[t]),m=s.animateScale?0:l.getDistanceFromCenterForValue(a.data[t]);helpers$1.extend(e,{_datasetIndex:n.index,_index:t,_scale:l,_model:{x:c,y:d,innerRadius:0,outerRadius:r?m:f,startAngle:r&&s.animateRotate?h:p,endAngle:r&&s.animateRotate?h:g,label:helpers$1.valueAtIndexOrDefault(u,t,u[t])}});var v=this.chart.options.elements.arc,y=e.custom||{},b=helpers$1.valueAtIndexOrDefault,_=e._model;_.backgroundColor=y.backgroundColor?y.backgroundColor:b(a.backgroundColor,t,v.backgroundColor),_.borderColor=y.borderColor?y.borderColor:b(a.borderColor,t,v.borderColor),_.borderWidth=y.borderWidth?y.borderWidth:b(a.borderWidth,t,v.borderWidth),e.pivot()},countVisibleElements:function(){var e=this.getDataset(),t=this.getMeta(),r=0;return helpers$1.each(t.data,function(t,n){isNaN(e.data[n])||t.hidden||r++}),r},_computeAngle:function(e){var t=this,r=this.getMeta().count,n=t.getDataset(),i=t.getMeta();if(isNaN(n.data[e])||i.data[e].hidden)return 0;var a={chart:t.chart,dataIndex:e,dataset:n,datasetIndex:t.index};return helpers$1.options.resolve([t.chart.options.elements.arc.angle,2*Math.PI/r],a,e)}})};core_defaults._set("radar",{scale:{type:"radialLinear"},elements:{line:{tension:0}}});var controller_radar=function(e){e.controllers.radar=e.DatasetController.extend({datasetElementType:elements.Line,dataElementType:elements.Point,linkScales:helpers$1.noop,update:function(e){var t=this,r=t.getMeta(),n=r.dataset,i=r.data,a=n.custom||{},o=t.getDataset(),s=t.chart.options.elements.line,l=t.chart.scale;void 0!==o.tension&&void 0===o.lineTension&&(o.lineTension=o.tension),helpers$1.extend(r.dataset,{_datasetIndex:t.index,_scale:l,_children:i,_loop:!0,_model:{tension:a.tension?a.tension:helpers$1.valueOrDefault(o.lineTension,s.tension),backgroundColor:a.backgroundColor?a.backgroundColor:o.backgroundColor||s.backgroundColor,borderWidth:a.borderWidth?a.borderWidth:o.borderWidth||s.borderWidth,borderColor:a.borderColor?a.borderColor:o.borderColor||s.borderColor,fill:a.fill?a.fill:void 0!==o.fill?o.fill:s.fill,borderCapStyle:a.borderCapStyle?a.borderCapStyle:o.borderCapStyle||s.borderCapStyle,borderDash:a.borderDash?a.borderDash:o.borderDash||s.borderDash,borderDashOffset:a.borderDashOffset?a.borderDashOffset:o.borderDashOffset||s.borderDashOffset,borderJoinStyle:a.borderJoinStyle?a.borderJoinStyle:o.borderJoinStyle||s.borderJoinStyle}}),r.dataset.pivot(),helpers$1.each(i,function(r,n){t.updateElement(r,n,e)},t),t.updateBezierControlPoints()},updateElement:function(e,t,r){var n=this,i=e.custom||{},a=n.getDataset(),o=n.chart.scale,s=n.chart.options.elements.point,l=o.getPointPositionForValue(t,a.data[t]);void 0!==a.radius&&void 0===a.pointRadius&&(a.pointRadius=a.radius),void 0!==a.hitRadius&&void 0===a.pointHitRadius&&(a.pointHitRadius=a.hitRadius),helpers$1.extend(e,{_datasetIndex:n.index,_index:t,_scale:o,_model:{x:r?o.xCenter:l.x,y:r?o.yCenter:l.y,tension:i.tension?i.tension:helpers$1.valueOrDefault(a.lineTension,n.chart.options.elements.line.tension),radius:i.radius?i.radius:helpers$1.valueAtIndexOrDefault(a.pointRadius,t,s.radius),backgroundColor:i.backgroundColor?i.backgroundColor:helpers$1.valueAtIndexOrDefault(a.pointBackgroundColor,t,s.backgroundColor),borderColor:i.borderColor?i.borderColor:helpers$1.valueAtIndexOrDefault(a.pointBorderColor,t,s.borderColor),borderWidth:i.borderWidth?i.borderWidth:helpers$1.valueAtIndexOrDefault(a.pointBorderWidth,t,s.borderWidth),pointStyle:i.pointStyle?i.pointStyle:helpers$1.valueAtIndexOrDefault(a.pointStyle,t,s.pointStyle),rotation:i.rotation?i.rotation:helpers$1.valueAtIndexOrDefault(a.pointRotation,t,s.rotation),hitRadius:i.hitRadius?i.hitRadius:helpers$1.valueAtIndexOrDefault(a.pointHitRadius,t,s.hitRadius)}}),e._model.skip=i.skip?i.skip:isNaN(e._model.x)||isNaN(e._model.y)},updateBezierControlPoints:function(){var e=this.chart.chartArea,t=this.getMeta();helpers$1.each(t.data,function(r,n){var i=r._model,a=helpers$1.splineCurve(helpers$1.previousItem(t.data,n,!0)._model,i,helpers$1.nextItem(t.data,n,!0)._model,i.tension);i.controlPointPreviousX=Math.max(Math.min(a.previous.x,e.right),e.left),i.controlPointPreviousY=Math.max(Math.min(a.previous.y,e.bottom),e.top),i.controlPointNextX=Math.max(Math.min(a.next.x,e.right),e.left),i.controlPointNextY=Math.max(Math.min(a.next.y,e.bottom),e.top),r.pivot()})},setHoverStyle:function(e){var t=this.chart.data.datasets[e._datasetIndex],r=e.custom||{},n=e._index,i=e._model;e.$previousStyle={backgroundColor:i.backgroundColor,borderColor:i.borderColor,borderWidth:i.borderWidth,radius:i.radius},i.radius=r.hoverRadius?r.hoverRadius:helpers$1.valueAtIndexOrDefault(t.pointHoverRadius,n,this.chart.options.elements.point.hoverRadius),i.backgroundColor=r.hoverBackgroundColor?r.hoverBackgroundColor:helpers$1.valueAtIndexOrDefault(t.pointHoverBackgroundColor,n,helpers$1.getHoverColor(i.backgroundColor)),i.borderColor=r.hoverBorderColor?r.hoverBorderColor:helpers$1.valueAtIndexOrDefault(t.pointHoverBorderColor,n,helpers$1.getHoverColor(i.borderColor)),i.borderWidth=r.hoverBorderWidth?r.hoverBorderWidth:helpers$1.valueAtIndexOrDefault(t.pointHoverBorderWidth,n,i.borderWidth)}})};core_defaults._set("scatter",{hover:{mode:"single"},scales:{xAxes:[{id:"x-axis-1",type:"linear",position:"bottom"}],yAxes:[{id:"y-axis-1",type:"linear",position:"left"}]},showLines:!1,tooltips:{callbacks:{title:function(){return""},label:function(e){return"("+e.xLabel+", "+e.yLabel+")"}}}});var controller_scatter=function(e){e.controllers.scatter=e.controllers.line},Chart_Bar=function(e){e.Bar=function(t,r){return r.type="bar",new e(t,r)}},Chart_Bubble=function(e){e.Bubble=function(t,r){return r.type="bubble",new e(t,r)}},Chart_Doughnut=function(e){e.Doughnut=function(t,r){return r.type="doughnut",new e(t,r)}},Chart_Line=function(e){e.Line=function(t,r){return r.type="line",new e(t,r)}},Chart_PolarArea=function(e){e.PolarArea=function(t,r){return r.type="polarArea",new e(t,r)}},Chart_Radar=function(e){e.Radar=function(t,r){return r.type="radar",new e(t,r)}},Chart_Scatter=function(e){e.Scatter=function(t,r){return r.type="scatter",new e(t,r)}};core_defaults._set("global",{plugins:{filler:{propagate:!0}}});var mappers={dataset:function(e){var t=e.fill,r=e.chart,n=r.getDatasetMeta(t),i=n&&r.isDatasetVisible(t)&&n.dataset._children||[],a=i.length||0;return a?function(e,t){return t<a&&i[t]._view||null}:null},boundary:function(e){var t=e.boundary,r=t?t.x:null,n=t?t.y:null;return function(e){return{x:null===r?e.x:r,y:null===n?e.y:n}}}};function decodeFill(e,t,r){var n,i=e._model||{},a=i.fill;if(void 0===a&&(a=!!i.backgroundColor),!1===a||null===a)return!1;if(!0===a)return"origin";if(n=parseFloat(a,10),isFinite(n)&&Math.floor(n)===n)return"-"!==a[0]&&"+"!==a[0]||(n=t+n),!(n===t||n<0||n>=r)&&n;switch(a){case"bottom":return"start";case"top":return"end";case"zero":return"origin";case"origin":case"start":case"end":return a;default:return!1}}function computeBoundary(e){var t,r=e.el._model||{},n=e.el._scale||{},i=e.fill,a=null;if(isFinite(i))return null;if("start"===i?a=void 0===r.scaleBottom?n.bottom:r.scaleBottom:"end"===i?a=void 0===r.scaleTop?n.top:r.scaleTop:void 0!==r.scaleZero?a=r.scaleZero:n.getBasePosition?a=n.getBasePosition():n.getBasePixel&&(a=n.getBasePixel()),void 0!==a&&null!==a){if(void 0!==a.x&&void 0!==a.y)return a;if("number"==typeof a&&isFinite(a))return{x:(t=n.isHorizontal())?a:null,y:t?null:a}}return null}function resolveTarget(e,t,r){var n,i=e[t].fill,a=[t];if(!r)return i;for(;!1!==i&&-1===a.indexOf(i);){if(!isFinite(i))return i;if(!(n=e[i]))return!1;if(n.visible)return i;a.push(i),i=n.fill}return!1}function createMapper(e){var t=e.fill,r="dataset";return!1===t?null:(isFinite(t)||(r="boundary"),mappers[r](e))}function isDrawable(e){return e&&!e.skip}function drawArea(e,t,r,n,i){var a;if(n&&i){for(e.moveTo(t[0].x,t[0].y),a=1;a<n;++a)helpers$1.canvas.lineTo(e,t[a-1],t[a]);for(e.lineTo(r[i-1].x,r[i-1].y),a=i-1;a>0;--a)helpers$1.canvas.lineTo(e,r[a],r[a-1],!0)}}function doFill(e,t,r,n,i,a){var o,s,l,u,c,d,h,f=t.length,p=n.spanGaps,g=[],m=[],v=0,y=0;for(e.beginPath(),o=0,s=f+!!a;o<s;++o)c=r(u=t[l=o%f]._view,l,n),d=isDrawable(u),h=isDrawable(c),d&&h?(v=g.push(u),y=m.push(c)):v&&y&&(p?(d&&g.push(u),h&&m.push(c)):(drawArea(e,g,m,v,y),v=y=0,g=[],m=[]));drawArea(e,g,m,v,y),e.closePath(),e.fillStyle=i,e.fill()}var plugin_filler={id:"filler",afterDatasetsUpdate:function(e,t){var r,n,i,a,o=(e.data.datasets||[]).length,s=t.propagate,l=[];for(n=0;n<o;++n)a=null,(i=(r=e.getDatasetMeta(n)).dataset)&&i._model&&i instanceof elements.Line&&(a={visible:e.isDatasetVisible(n),fill:decodeFill(i,n,o),chart:e,el:i}),r.$filler=a,l.push(a);for(n=0;n<o;++n)(a=l[n])&&(a.fill=resolveTarget(l,n,s),a.boundary=computeBoundary(a),a.mapper=createMapper(a))},beforeDatasetDraw:function(e,t){var r=t.meta.$filler;if(r){var n=e.ctx,i=r.el,a=i._view,o=i._children||[],s=r.mapper,l=a.backgroundColor||core_defaults.global.defaultColor;s&&l&&o.length&&(helpers$1.canvas.clipArea(n,e.chartArea),doFill(n,o,s,a,l,i._loop),helpers$1.canvas.unclipArea(n))}}},noop$2=helpers$1.noop;function getBoxWidth(e,t){return e.usePointStyle?t*Math.SQRT2:e.boxWidth}core_defaults._set("global",{legend:{display:!0,position:"top",fullWidth:!0,reverse:!1,weight:1e3,onClick:function(e,t){var r=t.datasetIndex,n=this.chart,i=n.getDatasetMeta(r);i.hidden=null===i.hidden?!n.data.datasets[r].hidden:null,n.update()},onHover:null,labels:{boxWidth:40,padding:10,generateLabels:function(e){var t=e.data;return helpers$1.isArray(t.datasets)?t.datasets.map(function(t,r){return{text:t.label,fillStyle:helpers$1.isArray(t.backgroundColor)?t.backgroundColor[0]:t.backgroundColor,hidden:!e.isDatasetVisible(r),lineCap:t.borderCapStyle,lineDash:t.borderDash,lineDashOffset:t.borderDashOffset,lineJoin:t.borderJoinStyle,lineWidth:t.borderWidth,strokeStyle:t.borderColor,pointStyle:t.pointStyle,datasetIndex:r}},this):[]}}},legendCallback:function(e){var t=[];t.push('<ul class="'+e.id+'-legend">');for(var r=0;r<e.data.datasets.length;r++)t.push('<li><span style="background-color:'+e.data.datasets[r].backgroundColor+'"></span>'),e.data.datasets[r].label&&t.push(e.data.datasets[r].label),t.push("</li>");return t.push("</ul>"),t.join("")}});var Legend=core_element.extend({initialize:function(e){helpers$1.extend(this,e),this.legendHitBoxes=[],this.doughnutMode=!1},beforeUpdate:noop$2,update:function(e,t,r){var n=this;return n.beforeUpdate(),n.maxWidth=e,n.maxHeight=t,n.margins=r,n.beforeSetDimensions(),n.setDimensions(),n.afterSetDimensions(),n.beforeBuildLabels(),n.buildLabels(),n.afterBuildLabels(),n.beforeFit(),n.fit(),n.afterFit(),n.afterUpdate(),n.minSize},afterUpdate:noop$2,beforeSetDimensions:noop$2,setDimensions:function(){var e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=0,e.right=e.width):(e.height=e.maxHeight,e.top=0,e.bottom=e.height),e.paddingLeft=0,e.paddingTop=0,e.paddingRight=0,e.paddingBottom=0,e.minSize={width:0,height:0}},afterSetDimensions:noop$2,beforeBuildLabels:noop$2,buildLabels:function(){var e=this,t=e.options.labels||{},r=helpers$1.callback(t.generateLabels,[e.chart],e)||[];t.filter&&(r=r.filter(function(r){return t.filter(r,e.chart.data)})),e.options.reverse&&r.reverse(),e.legendItems=r},afterBuildLabels:noop$2,beforeFit:noop$2,fit:function(){var e=this,t=e.options,r=t.labels,n=t.display,i=e.ctx,a=core_defaults.global,o=helpers$1.valueOrDefault,s=o(r.fontSize,a.defaultFontSize),l=o(r.fontStyle,a.defaultFontStyle),u=o(r.fontFamily,a.defaultFontFamily),c=helpers$1.fontString(s,l,u),d=e.legendHitBoxes=[],h=e.minSize,f=e.isHorizontal();if(f?(h.width=e.maxWidth,h.height=n?10:0):(h.width=n?10:0,h.height=e.maxHeight),n)if(i.font=c,f){var p=e.lineWidths=[0],g=e.legendItems.length?s+r.padding:0;i.textAlign="left",i.textBaseline="top",helpers$1.each(e.legendItems,function(t,n){var a=getBoxWidth(r,s)+s/2+i.measureText(t.text).width;p[p.length-1]+a+r.padding>=e.width&&(g+=s+r.padding,p[p.length]=e.left),d[n]={left:0,top:0,width:a,height:s},p[p.length-1]+=a+r.padding}),h.height+=g}else{var m=r.padding,v=e.columnWidths=[],y=r.padding,b=0,_=0,w=s+m;helpers$1.each(e.legendItems,function(e,t){var n=getBoxWidth(r,s)+s/2+i.measureText(e.text).width;_+w>h.height&&(y+=b+r.padding,v.push(b),b=0,_=0),b=Math.max(b,n),_+=w,d[t]={left:0,top:0,width:n,height:s}}),y+=b,v.push(b),h.width+=y}e.width=h.width,e.height=h.height},afterFit:noop$2,isHorizontal:function(){return"top"===this.options.position||"bottom"===this.options.position},draw:function(){var e=this,t=e.options,r=t.labels,n=core_defaults.global,i=n.elements.line,a=e.width,o=e.lineWidths;if(t.display){var s,l=e.ctx,u=helpers$1.valueOrDefault,c=u(r.fontColor,n.defaultFontColor),d=u(r.fontSize,n.defaultFontSize),h=u(r.fontStyle,n.defaultFontStyle),f=u(r.fontFamily,n.defaultFontFamily),p=helpers$1.fontString(d,h,f);l.textAlign="left",l.textBaseline="middle",l.lineWidth=.5,l.strokeStyle=c,l.fillStyle=c,l.font=p;var g=getBoxWidth(r,d),m=e.legendHitBoxes,v=e.isHorizontal();s=v?{x:e.left+(a-o[0])/2,y:e.top+r.padding,line:0}:{x:e.left+r.padding,y:e.top+r.padding,line:0};var y=d+r.padding;helpers$1.each(e.legendItems,function(c,h){var f=l.measureText(c.text).width,p=g+d/2+f,b=s.x,_=s.y;v?b+p>=a&&(_=s.y+=y,s.line++,b=s.x=e.left+(a-o[s.line])/2):_+y>e.bottom&&(b=s.x=b+e.columnWidths[s.line]+r.padding,_=s.y=e.top+r.padding,s.line++),function(e,r,a){if(!(isNaN(g)||g<=0)){l.save(),l.fillStyle=u(a.fillStyle,n.defaultColor),l.lineCap=u(a.lineCap,i.borderCapStyle),l.lineDashOffset=u(a.lineDashOffset,i.borderDashOffset),l.lineJoin=u(a.lineJoin,i.borderJoinStyle),l.lineWidth=u(a.lineWidth,i.borderWidth),l.strokeStyle=u(a.strokeStyle,n.defaultColor);var o=0===u(a.lineWidth,i.borderWidth);if(l.setLineDash&&l.setLineDash(u(a.lineDash,i.borderDash)),t.labels&&t.labels.usePointStyle){var s=d*Math.SQRT2/2,c=s/Math.SQRT2,h=e+c,f=r+c;helpers$1.canvas.drawPoint(l,a.pointStyle,s,h,f)}else o||l.strokeRect(e,r,g,d),l.fillRect(e,r,g,d);l.restore()}}(b,_,c),m[h].left=b,m[h].top=_,function(e,t,r,n){var i=d/2,a=g+i+e,o=t+i;l.fillText(r.text,a,o),r.hidden&&(l.beginPath(),l.lineWidth=2,l.moveTo(a,o),l.lineTo(a+n,o),l.stroke())}(b,_,c,f),v?s.x+=p+r.padding:s.y+=y})}},handleEvent:function(e){var t=this,r=t.options,n="mouseup"===e.type?"click":e.type,i=!1;if("mousemove"===n){if(!r.onHover)return}else{if("click"!==n)return;if(!r.onClick)return}var a=e.x,o=e.y;if(a>=t.left&&a<=t.right&&o>=t.top&&o<=t.bottom)for(var s=t.legendHitBoxes,l=0;l<s.length;++l){var u=s[l];if(a>=u.left&&a<=u.left+u.width&&o>=u.top&&o<=u.top+u.height){if("click"===n){r.onClick.call(t,e.native,t.legendItems[l]),i=!0;break}if("mousemove"===n){r.onHover.call(t,e.native,t.legendItems[l]),i=!0;break}}}return i}});function createNewLegendAndAttach(e,t){var r=new Legend({ctx:e.ctx,options:t,chart:e});core_layouts.configure(e,r,t),core_layouts.addBox(e,r),e.legend=r}var plugin_legend={id:"legend",_element:Legend,beforeInit:function(e){var t=e.options.legend;t&&createNewLegendAndAttach(e,t)},beforeUpdate:function(e){var t=e.options.legend,r=e.legend;t?(helpers$1.mergeIf(t,core_defaults.global.legend),r?(core_layouts.configure(e,r,t),r.options=t):createNewLegendAndAttach(e,t)):r&&(core_layouts.removeBox(e,r),delete e.legend)},afterEvent:function(e,t){var r=e.legend;r&&r.handleEvent(t)}},noop$3=helpers$1.noop;core_defaults._set("global",{title:{display:!1,fontStyle:"bold",fullWidth:!0,lineHeight:1.2,padding:10,position:"top",text:"",weight:2e3}});var Title=core_element.extend({initialize:function(e){helpers$1.extend(this,e),this.legendHitBoxes=[]},beforeUpdate:noop$3,update:function(e,t,r){var n=this;return n.beforeUpdate(),n.maxWidth=e,n.maxHeight=t,n.margins=r,n.beforeSetDimensions(),n.setDimensions(),n.afterSetDimensions(),n.beforeBuildLabels(),n.buildLabels(),n.afterBuildLabels(),n.beforeFit(),n.fit(),n.afterFit(),n.afterUpdate(),n.minSize},afterUpdate:noop$3,beforeSetDimensions:noop$3,setDimensions:function(){var e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=0,e.right=e.width):(e.height=e.maxHeight,e.top=0,e.bottom=e.height),e.paddingLeft=0,e.paddingTop=0,e.paddingRight=0,e.paddingBottom=0,e.minSize={width:0,height:0}},afterSetDimensions:noop$3,beforeBuildLabels:noop$3,buildLabels:noop$3,afterBuildLabels:noop$3,beforeFit:noop$3,fit:function(){var e=this,t=helpers$1.valueOrDefault,r=e.options,n=r.display,i=t(r.fontSize,core_defaults.global.defaultFontSize),a=e.minSize,o=helpers$1.isArray(r.text)?r.text.length:1,s=helpers$1.options.toLineHeight(r.lineHeight,i),l=n?o*s+2*r.padding:0;e.isHorizontal()?(a.width=e.maxWidth,a.height=l):(a.width=l,a.height=e.maxHeight),e.width=a.width,e.height=a.height},afterFit:noop$3,isHorizontal:function(){var e=this.options.position;return"top"===e||"bottom"===e},draw:function(){var e=this,t=e.ctx,r=helpers$1.valueOrDefault,n=e.options,i=core_defaults.global;if(n.display){var a,o,s,l=r(n.fontSize,i.defaultFontSize),u=r(n.fontStyle,i.defaultFontStyle),c=r(n.fontFamily,i.defaultFontFamily),d=helpers$1.fontString(l,u,c),h=helpers$1.options.toLineHeight(n.lineHeight,l),f=h/2+n.padding,p=0,g=e.top,m=e.left,v=e.bottom,y=e.right;t.fillStyle=r(n.fontColor,i.defaultFontColor),t.font=d,e.isHorizontal()?(o=m+(y-m)/2,s=g+f,a=y-m):(o="left"===n.position?m+f:y-f,s=g+(v-g)/2,a=v-g,p=Math.PI*("left"===n.position?-.5:.5)),t.save(),t.translate(o,s),t.rotate(p),t.textAlign="center",t.textBaseline="middle";var b=n.text;if(helpers$1.isArray(b))for(var _=0,w=0;w<b.length;++w)t.fillText(b[w],0,_,a),_+=h;else t.fillText(b,0,0,a);t.restore()}}});function createNewTitleBlockAndAttach(e,t){var r=new Title({ctx:e.ctx,options:t,chart:e});core_layouts.configure(e,r,t),core_layouts.addBox(e,r),e.titleBlock=r}var plugin_title={id:"title",_element:Title,beforeInit:function(e){var t=e.options.title;t&&createNewTitleBlockAndAttach(e,t)},beforeUpdate:function(e){var t=e.options.title,r=e.titleBlock;t?(helpers$1.mergeIf(t,core_defaults.global.title),r?(core_layouts.configure(e,r,t),r.options=t):createNewTitleBlockAndAttach(e,t)):r&&(core_layouts.removeBox(e,r),delete e.titleBlock)}},plugins={},filler=plugin_filler,legend=plugin_legend,title=plugin_title;plugins.filler=filler,plugins.legend=legend,plugins.title=title;var Chart$1=core();for(var k in Chart$1.helpers=helpers$1,core_helpers(Chart$1),Chart$1.Animation=core_animation,Chart$1.animationService=core_animations,Chart$1.defaults=core_defaults,Chart$1.Element=core_element,Chart$1.elements=elements,Chart$1.Interaction=core_interaction,Chart$1.layouts=core_layouts,Chart$1.platform=platform,Chart$1.plugins=core_plugins,Chart$1.Scale=core_scale,Chart$1.scaleService=core_scaleService,Chart$1.Ticks=core_ticks,Chart$1.Tooltip=core_tooltip,core_controller(Chart$1),core_datasetController(Chart$1),scale_linearbase(Chart$1),scale_category(Chart$1),scale_linear(Chart$1),scale_logarithmic(Chart$1),scale_radialLinear(Chart$1),scale_time(Chart$1),controller_bar(Chart$1),controller_bubble(Chart$1),controller_doughnut(Chart$1),controller_line(Chart$1),controller_polarArea(Chart$1),controller_radar(Chart$1),controller_scatter(Chart$1),Chart_Bar(Chart$1),Chart_Bubble(Chart$1),Chart_Doughnut(Chart$1),Chart_Line(Chart$1),Chart_PolarArea(Chart$1),Chart_Radar(Chart$1),Chart_Scatter(Chart$1),plugins)plugins.hasOwnProperty(k)&&Chart$1.plugins.register(plugins[k]);Chart$1.platform.initialize();var chart=Chart$1;function generateChart(e,t){return{render:function(e){return e("div",{style:this.styles,class:this.cssClasses},[e("canvas",{attrs:{id:this.chartId,width:this.width,height:this.height},ref:"canvas"})])},props:{chartId:{default:e,type:String},width:{default:400,type:Number},height:{default:400,type:Number},cssClasses:{type:String,default:""},styles:{type:Object},plugins:{type:Array,default:function(){return[]}}},data:function(){return{_chart:null,_plugins:this.plugins}},methods:{addPlugin:function(e){this.$data._plugins.push(e)},generateLegend:function(){if(this.$data._chart)return this.$data._chart.generateLegend()},renderChart:function(e,r){this.$data._chart&&this.$data._chart.destroy(),this.$data._chart=new chart(this.$refs.canvas.getContext("2d"),{type:t,data:e,options:r,plugins:this.$data._plugins})}},beforeDestroy:function(){this.$data._chart&&this.$data._chart.destroy()}}}"undefined"!=typeof window&&(window.Chart=Chart$1),Chart$1.Legend=plugins.legend._element,Chart$1.Title=plugins.title._element,Chart$1.pluginService=Chart$1.plugins,Chart$1.PluginBase=Chart$1.Element.extend({}),Chart$1.canvasHelpers=Chart$1.helpers.canvas,Chart$1.layoutService=Chart$1.layouts;var Bar=generateChart("bar-chart","bar"),HorizontalBar=generateChart("horizontalbar-chart","horizontalBar"),Line$1=generateChart("line-chart","line"),Pie=generateChart("pie-chart","pie"),reactiveProp$1=mixins.reactiveProp;Chart.defaults.global.title.padding=20,Chart.defaults.global.title.fontSize=16,Chart.defaults.global.title.lineHeight=1.6;var script$1={extends:Bar,mixins:[reactiveProp$1],props:{options:{type:Object,default:function(){return{legend:{display:!1},lineTension:1}}}},mounted:function(){this.renderChart(this.chartData,this.options)}},__vue_script__$1=script$1,__vue_inject_styles__$1=void 0,__vue_scope_id__$1=void 0,__vue_module_identifier__$1=void 0,__vue_is_functional_template__$1=void 0,ChartComponent=normalizeComponent_1({},__vue_inject_styles__$1,__vue_script__$1,__vue_scope_id__$1,__vue_is_functional_template__$1,__vue_module_identifier__$1,void 0,void 0),chartLabels=["1980","1990","2000","2010","2020"],chartDataList=[6542564,7322564,8008278,8175133,5475133],ChartData={data:{labels:chartLabels,datasets:[{data:chartDataList,fill:!1,backgroundColor:["#2F334F","#3155A6","#F2695D","#EBBCD8","#F9A137"],borderColor:["#ACAEB9"],borderWidth:1}]},bar:{options:{title:{display:!0,text:"Population Chart"},legend:{display:!1},lineTension:1,scales:{xAxes:[{scaleLabel:{display:!0,labelString:"Years"}}],yAxes:[{scaleLabel:{display:!0,labelString:"Population"},ticks:{padding:25}}]}}},horizontalBar:{options:{title:{display:!0,text:"Population Chart"},legend:{display:!1},lineTension:1,scales:{xAxes:[{scaleLabel:{display:!0,labelString:"Population"}}],yAxes:[{scaleLabel:{display:!0,labelString:"Years"},ticks:{padding:25}}]}}},pie:{options:{title:{display:!0,text:"Population Chart"},legend:{display:!0},lineTension:1}}},chartType="bar",ChartBar=function(e,t){void 0===e&&(e={}),void 0===t&&(t={}),this.data=t,this.settings=e,this.init()};ChartBar.prototype.init=function(){Vue.component("nyco-chart-"+chartType,ChartComponent),new Vue({el:'[data-js="chart-'+chartType+'"]',delimiters:["v{","}"],data:function(){return{data:ChartData.data,options:ChartData.bar.options}}})},ChartBar.prototype._constants=function(e){console.dir(e)};var reactiveProp$2=mixins.reactiveProp;Chart.defaults.global.title.padding=20,Chart.defaults.global.title.fontSize=16,Chart.defaults.global.title.lineHeight=1.6;var script$2={extends:HorizontalBar,mixins:[reactiveProp$2],props:{options:{type:Object,default:function(){return{legend:{display:!1},lineTension:1}}}},mounted:function(){this.renderChart(this.chartData,this.options)}},__vue_script__$2=script$2,__vue_inject_styles__$2=void 0,__vue_scope_id__$2=void 0,__vue_module_identifier__$2=void 0,__vue_is_functional_template__$2=void 0,ChartComponent$1=normalizeComponent_1({},__vue_inject_styles__$2,__vue_script__$2,__vue_scope_id__$2,__vue_is_functional_template__$2,__vue_module_identifier__$2,void 0,void 0),chartType$1="horizontal-bar",ChartHorizontalBar=function(e,t){void 0===e&&(e={}),void 0===t&&(t={}),this.data=t,this.settings=e,this.init()};ChartHorizontalBar.prototype.init=function(){Vue.component("nyco-chart-"+chartType$1,ChartComponent$1),new Vue({el:'[data-js="chart-'+chartType$1+'"]',delimiters:["v{","}"],data:function(){return{data:ChartData.data,options:ChartData.horizontalBar.options}}})},ChartHorizontalBar.prototype._constants=function(e){console.dir(e)};var reactiveProp$3=mixins.reactiveProp;Chart.defaults.global.title.padding=20,Chart.defaults.global.title.fontSize=16,Chart.defaults.global.title.lineHeight=1.6;var script$3={extends:Line$1,mixins:[reactiveProp$3],props:{options:{type:Object,default:function(){return{legend:{display:!1},lineTension:1}}}},mounted:function(){this.renderChart(this.chartData,this.options)}},__vue_script__$3=script$3,__vue_inject_styles__$3=void 0,__vue_scope_id__$3=void 0,__vue_module_identifier__$3=void 0,__vue_is_functional_template__$3=void 0,ChartComponent$2=normalizeComponent_1({},__vue_inject_styles__$3,__vue_script__$3,__vue_scope_id__$3,__vue_is_functional_template__$3,__vue_module_identifier__$3,void 0,void 0),chartType$2="line",ChartLine=function(e,t){void 0===e&&(e={}),void 0===t&&(t={}),this.data=t,this.settings=e,this.init()};ChartLine.prototype.init=function(){Vue.component("nyco-chart-"+chartType$2,ChartComponent$2),new Vue({el:'[data-js="chart-'+chartType$2+'"]',delimiters:["v{","}"],data:function(){return{data:ChartData.data,options:ChartData.bar.options}}})},ChartLine.prototype._constants=function(e){console.dir(e)};var reactiveProp$4=mixins.reactiveProp;Chart.defaults.global.title.padding=20,Chart.defaults.global.title.fontSize=16,Chart.defaults.global.title.lineHeight=1.6;var script$4={extends:Pie,mixins:[reactiveProp$4],props:{options:{type:Object,default:function(){return{legend:{display:!0},lineTension:1}}}},mounted:function(){this.renderChart(this.chartData,this.options)}},__vue_script__$4=script$4,__vue_inject_styles__$4=void 0,__vue_scope_id__$4=void 0,__vue_module_identifier__$4=void 0,__vue_is_functional_template__$4=void 0,ChartComponent$3=normalizeComponent_1({},__vue_inject_styles__$4,__vue_script__$4,__vue_scope_id__$4,__vue_is_functional_template__$4,__vue_module_identifier__$4,void 0,void 0),chartType$3="pie",ChartPie=function(e,t){void 0===e&&(e={}),void 0===t&&(t={}),this.data=t,this.settings=e,this.init()};ChartPie.prototype.init=function(){Vue.component("nyco-chart-"+chartType$3,ChartComponent$3),new Vue({el:'[data-js="chart-'+chartType$3+'"]',delimiters:["v{","}"],data:function(){return{data:ChartData.data,options:ChartData.pie.options}}})},ChartPie.prototype._constants=function(e){console.dir(e)};var script$5={props:["data"],data:function(){return{map:null,mapLayers:[]}},mounted:function(){this.initializeMap()},beforeDestroy:function(){},watch:{"data.zipcodes":function(){this.createZipcodeLayer(this.map,this.data.zipcodes)},"data.boroughs":function(){this.createBoroughLayer(this.map,this.data.boroughs)},"data.neighborhoods":function(){this.createNeighborhoodLayer(this.map,this.data.neighborhoods)},mapLayers:function(){this.toggleLayers(this.map,this.mapLayers)}},methods:{trackMapLayers:function(e){if(this.mapLayers.includes(e))throw new Error("Map layer already exists");this.mapLayers.push(e)},createZipcodeLayer:function(e,t){if(!e||!t)throw Error("Required "+(e?"layerData":"map")+" param is empty");this.trackMapLayers("zipcodes"),e.on("load",function(r){e.addSource("zipcodes",{type:"geojson",data:t}),e.addLayer({id:"zipcodes",type:"fill",source:"zipcodes",paint:{"fill-color":"#6c88c1","fill-opacity":.6}})})},createBoroughLayer:function(e,t){if(!e||!t)throw Error("Required "+(e?"layerData":"map")+" param is empty");this.trackMapLayers("boroughs"),e.on("load",function(r){e.addSource("boroughs",{type:"geojson",data:t}),e.addLayer({id:"boroughs",type:"fill",source:"boroughs",paint:{"fill-color":"#ffa133","fill-opacity":.6}})})},createNeighborhoodLayer:function(e,t){if(!e||!t)throw Error("Required "+(e?"layerData":"map")+" param is empty");var r="neighborhoods";this.trackMapLayers(r),e.on("load",function(n){e.addSource(""+r,{type:"geojson",data:t}),e.addLayer({id:""+r,type:"fill",source:""+r,paint:{"fill-color":"#f2695d","fill-opacity":.5}})})},toggleLayers:function(e,t){for(var r=t,n=document.getElementById("nyco-map-menu");n.firstChild;)n.removeChild(n.firstChild);for(var i=0;i<r.length;i++){var a=r[i],o=document.createElement("a");o.href="#",o.classList.add("active","inline-block","pr-1"),o.textContent=a,o.onclick=function(t){t.preventDefault(),t.stopPropagation();var r=this.textContent;"visible"===e.getLayoutProperty(r,"visibility")?(e.setLayoutProperty(r,"visibility","none"),this.classList.remove("active")):(this.classList.add("active"),e.setLayoutProperty(r,"visibility","visible"))},n.appendChild(o)}},initializeMap:function(){mapboxgl.accessToken=this.data.api_key,this.map=new mapboxgl.Map({container:"nyco-map",center:[-73.98671,40.693391],zoom:9,style:"mapbox://styles/mapbox/streets-v11"}),this.map.addControl(new mapboxgl.NavigationControl)}}},__vue_script__$5=script$5,__vue_render__$1=function(){var e=this.$createElement;this._self._c;return this._m(0)},__vue_staticRenderFns__$1=[function(){var e=this.$createElement,t=this._self._c||e;return t("div",[t("p",[this._v("Hello, I'm a map!")]),this._v(" "),t("div",{staticStyle:{height:"400px",width:"500px"},attrs:{id:"nyco-map"}}),this._v(" "),t("div",{staticClass:"pt-2",attrs:{id:"nyco-map-menu"}})])}];__vue_render__$1._withStripped=!0;var __vue_inject_styles__$5=void 0,__vue_scope_id__$5=void 0,__vue_module_identifier__$5=void 0,__vue_is_functional_template__$5=!1,MapComponent=normalizeComponent_1({render:__vue_render__$1,staticRenderFns:__vue_staticRenderFns__$1},__vue_inject_styles__$5,__vue_script__$5,__vue_scope_id__$5,__vue_is_functional_template__$5,__vue_module_identifier__$5,void 0,void 0),MapData={data:{api_key:"XXX",boroughs:{},neighborhoods:{},zipcodes:{}}},lookup$1=[],revLookup=[],Arr="undefined"!=typeof Uint8Array?Uint8Array:Array,inited=!1;function init(){inited=!0;for(var e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",t=0,r=e.length;t<r;++t)lookup$1[t]=e[t],revLookup[e.charCodeAt(t)]=t;revLookup["-".charCodeAt(0)]=62,revLookup["_".charCodeAt(0)]=63}function toByteArray(e){var t,r,n,i,a,o;inited||init();var s=e.length;if(s%4>0)throw new Error("Invalid string. Length must be a multiple of 4");a="="===e[s-2]?2:"="===e[s-1]?1:0,o=new Arr(3*s/4-a),n=a>0?s-4:s;var l=0;for(t=0,r=0;t<n;t+=4,r+=3)i=revLookup[e.charCodeAt(t)]<<18|revLookup[e.charCodeAt(t+1)]<<12|revLookup[e.charCodeAt(t+2)]<<6|revLookup[e.charCodeAt(t+3)],o[l++]=i>>16&255,o[l++]=i>>8&255,o[l++]=255&i;return 2===a?(i=revLookup[e.charCodeAt(t)]<<2|revLookup[e.charCodeAt(t+1)]>>4,o[l++]=255&i):1===a&&(i=revLookup[e.charCodeAt(t)]<<10|revLookup[e.charCodeAt(t+1)]<<4|revLookup[e.charCodeAt(t+2)]>>2,o[l++]=i>>8&255,o[l++]=255&i),o}function tripletToBase64(e){return lookup$1[e>>18&63]+lookup$1[e>>12&63]+lookup$1[e>>6&63]+lookup$1[63&e]}function encodeChunk(e,t,r){for(var n,i=[],a=t;a<r;a+=3)n=(e[a]<<16)+(e[a+1]<<8)+e[a+2],i.push(tripletToBase64(n));return i.join("")}function fromByteArray(e){var t;inited||init();for(var r=e.length,n=r%3,i="",a=[],o=0,s=r-n;o<s;o+=16383)a.push(encodeChunk(e,o,o+16383>s?s:o+16383));return 1===n?(t=e[r-1],i+=lookup$1[t>>2],i+=lookup$1[t<<4&63],i+="=="):2===n&&(t=(e[r-2]<<8)+e[r-1],i+=lookup$1[t>>10],i+=lookup$1[t>>4&63],i+=lookup$1[t<<2&63],i+="="),a.push(i),a.join("")}function read(e,t,r,n,i){var a,o,s=8*i-n-1,l=(1<<s)-1,u=l>>1,c=-7,d=r?i-1:0,h=r?-1:1,f=e[t+d];for(d+=h,a=f&(1<<-c)-1,f>>=-c,c+=s;c>0;a=256*a+e[t+d],d+=h,c-=8);for(o=a&(1<<-c)-1,a>>=-c,c+=n;c>0;o=256*o+e[t+d],d+=h,c-=8);if(0===a)a=1-u;else{if(a===l)return o?NaN:1/0*(f?-1:1);o+=Math.pow(2,n),a-=u}return(f?-1:1)*o*Math.pow(2,a-n)}function write(e,t,r,n,i,a){var o,s,l,u=8*a-i-1,c=(1<<u)-1,d=c>>1,h=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,f=n?0:a-1,p=n?1:-1,g=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,o=c):(o=Math.floor(Math.log(t)/Math.LN2),t*(l=Math.pow(2,-o))<1&&(o--,l*=2),(t+=o+d>=1?h/l:h*Math.pow(2,1-d))*l>=2&&(o++,l/=2),o+d>=c?(s=0,o=c):o+d>=1?(s=(t*l-1)*Math.pow(2,i),o+=d):(s=t*Math.pow(2,d-1)*Math.pow(2,i),o=0));i>=8;e[r+f]=255&s,f+=p,s/=256,i-=8);for(o=o<<i|s,u+=i;u>0;e[r+f]=255&o,f+=p,o/=256,u-=8);e[r+f-p]|=128*g}var toString$2={}.toString,isArray$1=Array.isArray||function(e){return"[object Array]"==toString$2.call(e)},INSPECT_MAX_BYTES=50;function kMaxLength(){return Buffer$2.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function createBuffer(e,t){if(kMaxLength()<t)throw new RangeError("Invalid typed array length");return Buffer$2.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=Buffer$2.prototype:(null===e&&(e=new Buffer$2(t)),e.length=t),e}function Buffer$2(e,t,r){if(!(Buffer$2.TYPED_ARRAY_SUPPORT||this instanceof Buffer$2))return new Buffer$2(e,t,r);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return allocUnsafe$1(this,e)}return from$1(this,e,t,r)}function from$1(e,t,r,n){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?fromArrayBuffer(e,t,r,n):"string"==typeof t?fromString(e,t,r):fromObject(e,t)}function assertSize(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function alloc(e,t,r,n){return assertSize(t),t<=0?createBuffer(e,t):void 0!==r?"string"==typeof n?createBuffer(e,t).fill(r,n):createBuffer(e,t).fill(r):createBuffer(e,t)}function allocUnsafe$1(e,t){if(assertSize(t),e=createBuffer(e,t<0?0:0|checked(t)),!Buffer$2.TYPED_ARRAY_SUPPORT)for(var r=0;r<t;++r)e[r]=0;return e}function fromString(e,t,r){if("string"==typeof r&&""!==r||(r="utf8"),!Buffer$2.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|byteLength(t,r),i=(e=createBuffer(e,n)).write(t,r);return i!==n&&(e=e.slice(0,i)),e}function fromArrayLike(e,t){var r=t.length<0?0:0|checked(t.length);e=createBuffer(e,r);for(var n=0;n<r;n+=1)e[n]=255&t[n];return e}function fromArrayBuffer(e,t,r,n){if(t.byteLength,r<0||t.byteLength<r)throw new RangeError("'offset' is out of bounds");if(t.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");return t=void 0===r&&void 0===n?new Uint8Array(t):void 0===n?new Uint8Array(t,r):new Uint8Array(t,r,n),Buffer$2.TYPED_ARRAY_SUPPORT?(e=t).__proto__=Buffer$2.prototype:e=fromArrayLike(e,t),e}function fromObject(e,t){if(internalIsBuffer(t)){var r=0|checked(t.length);return 0===(e=createBuffer(e,r)).length?e:(t.copy(e,0,0,r),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||isnan(t.length)?createBuffer(e,0):fromArrayLike(e,t);if("Buffer"===t.type&&isArray$1(t.data))return fromArrayLike(e,t.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}function checked(e){if(e>=kMaxLength())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+kMaxLength().toString(16)+" bytes");return 0|e}function internalIsBuffer(e){return!(null==e||!e._isBuffer)}function byteLength(e,t){if(internalIsBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var n=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return utf8ToBytes(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return base64ToBytes(e).length;default:if(n)return utf8ToBytes(e).length;t=(""+t).toLowerCase(),n=!0}}function slowToString(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return hexSlice(this,t,r);case"utf8":case"utf-8":return utf8Slice(this,t,r);case"ascii":return asciiSlice(this,t,r);case"latin1":case"binary":return latin1Slice(this,t,r);case"base64":return base64Slice(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return utf16leSlice(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function swap(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function bidirectionalIndexOf(e,t,r,n,i){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=i?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(i)return-1;r=e.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof t&&(t=Buffer$2.from(t,n)),internalIsBuffer(t))return 0===t.length?-1:arrayIndexOf(e,t,r,n,i);if("number"==typeof t)return t&=255,Buffer$2.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):arrayIndexOf(e,[t],r,n,i);throw new TypeError("val must be string, number or Buffer")}function arrayIndexOf(e,t,r,n,i){var a,o=1,s=e.length,l=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;o=2,s/=2,l/=2,r/=2}function u(e,t){return 1===o?e[t]:e.readUInt16BE(t*o)}if(i){var c=-1;for(a=r;a<s;a++)if(u(e,a)===u(t,-1===c?0:a-c)){if(-1===c&&(c=a),a-c+1===l)return c*o}else-1!==c&&(a-=a-c),c=-1}else for(r+l>s&&(r=s-l),a=r;a>=0;a--){for(var d=!0,h=0;h<l;h++)if(u(e,a+h)!==u(t,h)){d=!1;break}if(d)return a}return-1}function hexWrite(e,t,r,n){r=Number(r)||0;var i=e.length-r;n?(n=Number(n))>i&&(n=i):n=i;var a=t.length;if(a%2!=0)throw new TypeError("Invalid hex string");n>a/2&&(n=a/2);for(var o=0;o<n;++o){var s=parseInt(t.substr(2*o,2),16);if(isNaN(s))return o;e[r+o]=s}return o}function utf8Write(e,t,r,n){return blitBuffer(utf8ToBytes(t,e.length-r),e,r,n)}function asciiWrite(e,t,r,n){return blitBuffer(asciiToBytes(t),e,r,n)}function latin1Write(e,t,r,n){return asciiWrite(e,t,r,n)}function base64Write(e,t,r,n){return blitBuffer(base64ToBytes(t),e,r,n)}function ucs2Write(e,t,r,n){return blitBuffer(utf16leToBytes(t,e.length-r),e,r,n)}function base64Slice(e,t,r){return 0===t&&r===e.length?fromByteArray(e):fromByteArray(e.slice(t,r))}function utf8Slice(e,t,r){r=Math.min(e.length,r);for(var n=[],i=t;i<r;){var a,o,s,l,u=e[i],c=null,d=u>239?4:u>223?3:u>191?2:1;if(i+d<=r)switch(d){case 1:u<128&&(c=u);break;case 2:128==(192&(a=e[i+1]))&&(l=(31&u)<<6|63&a)>127&&(c=l);break;case 3:a=e[i+1],o=e[i+2],128==(192&a)&&128==(192&o)&&(l=(15&u)<<12|(63&a)<<6|63&o)>2047&&(l<55296||l>57343)&&(c=l);break;case 4:a=e[i+1],o=e[i+2],s=e[i+3],128==(192&a)&&128==(192&o)&&128==(192&s)&&(l=(15&u)<<18|(63&a)<<12|(63&o)<<6|63&s)>65535&&l<1114112&&(c=l)}null===c?(c=65533,d=1):c>65535&&(c-=65536,n.push(c>>>10&1023|55296),c=56320|1023&c),n.push(c),i+=d}return decodeCodePointsArray(n)}Buffer$2.TYPED_ARRAY_SUPPORT=void 0===global$1.TYPED_ARRAY_SUPPORT||global$1.TYPED_ARRAY_SUPPORT,Buffer$2.poolSize=8192,Buffer$2._augment=function(e){return e.__proto__=Buffer$2.prototype,e},Buffer$2.from=function(e,t,r){return from$1(null,e,t,r)},Buffer$2.TYPED_ARRAY_SUPPORT&&(Buffer$2.prototype.__proto__=Uint8Array.prototype,Buffer$2.__proto__=Uint8Array),Buffer$2.alloc=function(e,t,r){return alloc(null,e,t,r)},Buffer$2.allocUnsafe=function(e){return allocUnsafe$1(null,e)},Buffer$2.allocUnsafeSlow=function(e){return allocUnsafe$1(null,e)},Buffer$2.isBuffer=isBuffer$1,Buffer$2.compare=function(e,t){if(!internalIsBuffer(e)||!internalIsBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,n=t.length,i=0,a=Math.min(r,n);i<a;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0},Buffer$2.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},Buffer$2.concat=function(e,t){if(!isArray$1(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return Buffer$2.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=Buffer$2.allocUnsafe(t),i=0;for(r=0;r<e.length;++r){var a=e[r];if(!internalIsBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(n,i),i+=a.length}return n},Buffer$2.byteLength=byteLength,Buffer$2.prototype._isBuffer=!0,Buffer$2.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)swap(this,t,t+1);return this},Buffer$2.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)swap(this,t,t+3),swap(this,t+1,t+2);return this},Buffer$2.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)swap(this,t,t+7),swap(this,t+1,t+6),swap(this,t+2,t+5),swap(this,t+3,t+4);return this},Buffer$2.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?utf8Slice(this,0,e):slowToString.apply(this,arguments)},Buffer$2.prototype.equals=function(e){if(!internalIsBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===Buffer$2.compare(this,e)},Buffer$2.prototype.inspect=function(){var e="",t=INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,t).match(/.{2}/g).join(" "),this.length>t&&(e+=" ... ")),"<Buffer "+e+">"},Buffer$2.prototype.compare=function(e,t,r,n,i){if(!internalIsBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),t<0||r>e.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&t>=r)return 0;if(n>=i)return-1;if(t>=r)return 1;if(t>>>=0,r>>>=0,n>>>=0,i>>>=0,this===e)return 0;for(var a=i-n,o=r-t,s=Math.min(a,o),l=this.slice(n,i),u=e.slice(t,r),c=0;c<s;++c)if(l[c]!==u[c]){a=l[c],o=u[c];break}return a<o?-1:o<a?1:0},Buffer$2.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},Buffer$2.prototype.indexOf=function(e,t,r){return bidirectionalIndexOf(this,e,t,r,!0)},Buffer$2.prototype.lastIndexOf=function(e,t,r){return bidirectionalIndexOf(this,e,t,r,!1)},Buffer$2.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var i=this.length-t;if((void 0===r||r>i)&&(r=i),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var a=!1;;)switch(n){case"hex":return hexWrite(this,e,t,r);case"utf8":case"utf-8":return utf8Write(this,e,t,r);case"ascii":return asciiWrite(this,e,t,r);case"latin1":case"binary":return latin1Write(this,e,t,r);case"base64":return base64Write(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return ucs2Write(this,e,t,r);default:if(a)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),a=!0}},Buffer$2.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var MAX_ARGUMENTS_LENGTH=4096;function decodeCodePointsArray(e){var t=e.length;if(t<=MAX_ARGUMENTS_LENGTH)return String.fromCharCode.apply(String,e);for(var r="",n=0;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=MAX_ARGUMENTS_LENGTH));return r}function asciiSlice(e,t,r){var n="";r=Math.min(e.length,r);for(var i=t;i<r;++i)n+=String.fromCharCode(127&e[i]);return n}function latin1Slice(e,t,r){var n="";r=Math.min(e.length,r);for(var i=t;i<r;++i)n+=String.fromCharCode(e[i]);return n}function hexSlice(e,t,r){var n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);for(var i="",a=t;a<r;++a)i+=toHex(e[a]);return i}function utf16leSlice(e,t,r){for(var n=e.slice(t,r),i="",a=0;a<n.length;a+=2)i+=String.fromCharCode(n[a]+256*n[a+1]);return i}function checkOffset(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function checkInt(e,t,r,n,i,a){if(!internalIsBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<a)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function objectWriteUInt16(e,t,r,n){t<0&&(t=65535+t+1);for(var i=0,a=Math.min(e.length-r,2);i<a;++i)e[r+i]=(t&255<<8*(n?i:1-i))>>>8*(n?i:1-i)}function objectWriteUInt32(e,t,r,n){t<0&&(t=4294967295+t+1);for(var i=0,a=Math.min(e.length-r,4);i<a;++i)e[r+i]=t>>>8*(n?i:3-i)&255}function checkIEEE754(e,t,r,n,i,a){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function writeFloat(e,t,r,n,i){return i||checkIEEE754(e,t,r,4,3.4028234663852886e38,-3.4028234663852886e38),write(e,t,r,n,23,4),r+4}function writeDouble(e,t,r,n,i){return i||checkIEEE754(e,t,r,8,1.7976931348623157e308,-1.7976931348623157e308),write(e,t,r,n,52,8),r+8}Buffer$2.prototype.slice=function(e,t){var r,n=this.length;if(e=~~e,t=void 0===t?n:~~t,e<0?(e+=n)<0&&(e=0):e>n&&(e=n),t<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e),Buffer$2.TYPED_ARRAY_SUPPORT)(r=this.subarray(e,t)).__proto__=Buffer$2.prototype;else{var i=t-e;r=new Buffer$2(i,void 0);for(var a=0;a<i;++a)r[a]=this[a+e]}return r},Buffer$2.prototype.readUIntLE=function(e,t,r){e|=0,t|=0,r||checkOffset(e,t,this.length);for(var n=this[e],i=1,a=0;++a<t&&(i*=256);)n+=this[e+a]*i;return n},Buffer$2.prototype.readUIntBE=function(e,t,r){e|=0,t|=0,r||checkOffset(e,t,this.length);for(var n=this[e+--t],i=1;t>0&&(i*=256);)n+=this[e+--t]*i;return n},Buffer$2.prototype.readUInt8=function(e,t){return t||checkOffset(e,1,this.length),this[e]},Buffer$2.prototype.readUInt16LE=function(e,t){return t||checkOffset(e,2,this.length),this[e]|this[e+1]<<8},Buffer$2.prototype.readUInt16BE=function(e,t){return t||checkOffset(e,2,this.length),this[e]<<8|this[e+1]},Buffer$2.prototype.readUInt32LE=function(e,t){return t||checkOffset(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},Buffer$2.prototype.readUInt32BE=function(e,t){return t||checkOffset(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},Buffer$2.prototype.readIntLE=function(e,t,r){e|=0,t|=0,r||checkOffset(e,t,this.length);for(var n=this[e],i=1,a=0;++a<t&&(i*=256);)n+=this[e+a]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*t)),n},Buffer$2.prototype.readIntBE=function(e,t,r){e|=0,t|=0,r||checkOffset(e,t,this.length);for(var n=t,i=1,a=this[e+--n];n>0&&(i*=256);)a+=this[e+--n]*i;return a>=(i*=128)&&(a-=Math.pow(2,8*t)),a},Buffer$2.prototype.readInt8=function(e,t){return t||checkOffset(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},Buffer$2.prototype.readInt16LE=function(e,t){t||checkOffset(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},Buffer$2.prototype.readInt16BE=function(e,t){t||checkOffset(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},Buffer$2.prototype.readInt32LE=function(e,t){return t||checkOffset(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},Buffer$2.prototype.readInt32BE=function(e,t){return t||checkOffset(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},Buffer$2.prototype.readFloatLE=function(e,t){return t||checkOffset(e,4,this.length),read(this,e,!0,23,4)},Buffer$2.prototype.readFloatBE=function(e,t){return t||checkOffset(e,4,this.length),read(this,e,!1,23,4)},Buffer$2.prototype.readDoubleLE=function(e,t){return t||checkOffset(e,8,this.length),read(this,e,!0,52,8)},Buffer$2.prototype.readDoubleBE=function(e,t){return t||checkOffset(e,8,this.length),read(this,e,!1,52,8)},Buffer$2.prototype.writeUIntLE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||checkInt(this,e,t,r,Math.pow(2,8*r)-1,0);var i=1,a=0;for(this[t]=255&e;++a<r&&(i*=256);)this[t+a]=e/i&255;return t+r},Buffer$2.prototype.writeUIntBE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||checkInt(this,e,t,r,Math.pow(2,8*r)-1,0);var i=r-1,a=1;for(this[t+i]=255&e;--i>=0&&(a*=256);)this[t+i]=e/a&255;return t+r},Buffer$2.prototype.writeUInt8=function(e,t,r){return e=+e,t|=0,r||checkInt(this,e,t,1,255,0),Buffer$2.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},Buffer$2.prototype.writeUInt16LE=function(e,t,r){return e=+e,t|=0,r||checkInt(this,e,t,2,65535,0),Buffer$2.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):objectWriteUInt16(this,e,t,!0),t+2},Buffer$2.prototype.writeUInt16BE=function(e,t,r){return e=+e,t|=0,r||checkInt(this,e,t,2,65535,0),Buffer$2.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):objectWriteUInt16(this,e,t,!1),t+2},Buffer$2.prototype.writeUInt32LE=function(e,t,r){return e=+e,t|=0,r||checkInt(this,e,t,4,4294967295,0),Buffer$2.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):objectWriteUInt32(this,e,t,!0),t+4},Buffer$2.prototype.writeUInt32BE=function(e,t,r){return e=+e,t|=0,r||checkInt(this,e,t,4,4294967295,0),Buffer$2.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):objectWriteUInt32(this,e,t,!1),t+4},Buffer$2.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t|=0,!n){var i=Math.pow(2,8*r-1);checkInt(this,e,t,r,i-1,-i)}var a=0,o=1,s=0;for(this[t]=255&e;++a<r&&(o*=256);)e<0&&0===s&&0!==this[t+a-1]&&(s=1),this[t+a]=(e/o>>0)-s&255;return t+r},Buffer$2.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t|=0,!n){var i=Math.pow(2,8*r-1);checkInt(this,e,t,r,i-1,-i)}var a=r-1,o=1,s=0;for(this[t+a]=255&e;--a>=0&&(o*=256);)e<0&&0===s&&0!==this[t+a+1]&&(s=1),this[t+a]=(e/o>>0)-s&255;return t+r},Buffer$2.prototype.writeInt8=function(e,t,r){return e=+e,t|=0,r||checkInt(this,e,t,1,127,-128),Buffer$2.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},Buffer$2.prototype.writeInt16LE=function(e,t,r){return e=+e,t|=0,r||checkInt(this,e,t,2,32767,-32768),Buffer$2.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):objectWriteUInt16(this,e,t,!0),t+2},Buffer$2.prototype.writeInt16BE=function(e,t,r){return e=+e,t|=0,r||checkInt(this,e,t,2,32767,-32768),Buffer$2.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):objectWriteUInt16(this,e,t,!1),t+2},Buffer$2.prototype.writeInt32LE=function(e,t,r){return e=+e,t|=0,r||checkInt(this,e,t,4,2147483647,-2147483648),Buffer$2.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):objectWriteUInt32(this,e,t,!0),t+4},Buffer$2.prototype.writeInt32BE=function(e,t,r){return e=+e,t|=0,r||checkInt(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),Buffer$2.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):objectWriteUInt32(this,e,t,!1),t+4},Buffer$2.prototype.writeFloatLE=function(e,t,r){return writeFloat(this,e,t,!0,r)},Buffer$2.prototype.writeFloatBE=function(e,t,r){return writeFloat(this,e,t,!1,r)},Buffer$2.prototype.writeDoubleLE=function(e,t,r){return writeDouble(this,e,t,!0,r)},Buffer$2.prototype.writeDoubleBE=function(e,t,r){return writeDouble(this,e,t,!1,r)},Buffer$2.prototype.copy=function(e,t,r,n){if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var i,a=n-r;if(this===e&&r<t&&t<n)for(i=a-1;i>=0;--i)e[i+t]=this[i+r];else if(a<1e3||!Buffer$2.TYPED_ARRAY_SUPPORT)for(i=0;i<a;++i)e[i+t]=this[i+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+a),t);return a},Buffer$2.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===e.length){var i=e.charCodeAt(0);i<256&&(e=i)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!Buffer$2.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var a;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(a=t;a<r;++a)this[a]=e;else{var o=internalIsBuffer(e)?e:utf8ToBytes(new Buffer$2(e,n).toString()),s=o.length;for(a=0;a<r-t;++a)this[a+t]=o[a%s]}return this};var INVALID_BASE64_RE=/[^+\/0-9A-Za-z-_]/g;function base64clean(e){if((e=stringtrim(e).replace(INVALID_BASE64_RE,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}function stringtrim(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}function toHex(e){return e<16?"0"+e.toString(16):e.toString(16)}function utf8ToBytes(e,t){var r;t=t||1/0;for(var n=e.length,i=null,a=[],o=0;o<n;++o){if((r=e.charCodeAt(o))>55295&&r<57344){if(!i){if(r>56319){(t-=3)>-1&&a.push(239,191,189);continue}if(o+1===n){(t-=3)>-1&&a.push(239,191,189);continue}i=r;continue}if(r<56320){(t-=3)>-1&&a.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(t-=3)>-1&&a.push(239,191,189);if(i=null,r<128){if((t-=1)<0)break;a.push(r)}else if(r<2048){if((t-=2)<0)break;a.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;a.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;a.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return a}function asciiToBytes(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}function utf16leToBytes(e,t){for(var r,n,i,a=[],o=0;o<e.length&&!((t-=2)<0);++o)n=(r=e.charCodeAt(o))>>8,i=r%256,a.push(i),a.push(n);return a}function base64ToBytes(e){return toByteArray(base64clean(e))}function blitBuffer(e,t,r,n){for(var i=0;i<n&&!(i+r>=t.length||i>=e.length);++i)t[i+r]=e[i];return i}function isnan(e){return e!=e}function isBuffer$1(e){return null!=e&&(!!e._isBuffer||isFastBuffer(e)||isSlowBuffer(e))}function isFastBuffer(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}function isSlowBuffer(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&isFastBuffer(e.slice(0,0))}function defaultSetTimout(){throw new Error("setTimeout has not been defined")}function defaultClearTimeout(){throw new Error("clearTimeout has not been defined")}var cachedSetTimeout=defaultSetTimout,cachedClearTimeout=defaultClearTimeout;function runTimeout(e){if(cachedSetTimeout===setTimeout)return setTimeout(e,0);if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout)return cachedSetTimeout=setTimeout,setTimeout(e,0);try{return cachedSetTimeout(e,0)}catch(t){try{return cachedSetTimeout.call(null,e,0)}catch(t){return cachedSetTimeout.call(this,e,0)}}}function runClearTimeout(e){if(cachedClearTimeout===clearTimeout)return clearTimeout(e);if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout)return cachedClearTimeout=clearTimeout,clearTimeout(e);try{return cachedClearTimeout(e)}catch(t){try{return cachedClearTimeout.call(null,e)}catch(t){return cachedClearTimeout.call(this,e)}}}"function"==typeof global$1.setTimeout&&(cachedSetTimeout=setTimeout),"function"==typeof global$1.clearTimeout&&(cachedClearTimeout=clearTimeout);var currentQueue,queue$1=[],draining=!1,queueIndex=-1;function cleanUpNextTick(){draining&&currentQueue&&(draining=!1,currentQueue.length?queue$1=currentQueue.concat(queue$1):queueIndex=-1,queue$1.length&&drainQueue())}function drainQueue(){if(!draining){var e=runTimeout(cleanUpNextTick);draining=!0;for(var t=queue$1.length;t;){for(currentQueue=queue$1,queue$1=[];++queueIndex<t;)currentQueue&&currentQueue[queueIndex].run();queueIndex=-1,t=queue$1.length}currentQueue=null,draining=!1,runClearTimeout(e)}}function nextTick$1(e){var t=arguments,r=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)r[n-1]=t[n];queue$1.push(new Item(e,r)),1!==queue$1.length||draining||runTimeout(drainQueue)}function Item(e,t){this.fun=e,this.array=t}Item.prototype.run=function(){this.fun.apply(null,this.array)};var title$1="browser",platform$1="browser",browser$1=!0,env={},argv=[],version="",versions={},release={},config$1={};function noop$4(){}var on$1=noop$4,addListener=noop$4,once$1=noop$4,off=noop$4,removeListener=noop$4,removeAllListeners=noop$4,emit=noop$4;function binding(e){throw new Error("process.binding is not supported")}function cwd(){return"/"}function chdir(e){throw new Error("process.chdir is not supported")}function umask(){return 0}var performance$1=global$1.performance||{},performanceNow=performance$1.now||performance$1.mozNow||performance$1.msNow||performance$1.oNow||performance$1.webkitNow||function(){return(new Date).getTime()};function hrtime(e){var t=.001*performanceNow.call(performance$1),r=Math.floor(t),n=Math.floor(t%1*1e9);return e&&(r-=e[0],(n-=e[1])<0&&(r--,n+=1e9)),[r,n]}var startTime=new Date;function uptime(){return(new Date-startTime)/1e3}var _blobConstructor,xhr,process={nextTick:nextTick$1,title:title$1,browser:browser$1,env:env,argv:argv,version:version,versions:versions,on:on$1,addListener:addListener,once:once$1,off:off,removeListener:removeListener,removeAllListeners:removeAllListeners,emit:emit,binding:binding,cwd:cwd,chdir:chdir,umask:umask,hrtime:hrtime,platform:platform$1,release:release,config:config$1,uptime:uptime},hasFetch=isFunction$1(global$1.fetch)&&isFunction$1(global$1.ReadableStream);function blobConstructor(){if(void 0!==_blobConstructor)return _blobConstructor;try{new global$1.Blob([new ArrayBuffer(1)]),_blobConstructor=!0}catch(e){_blobConstructor=!1}return _blobConstructor}function checkTypeSupport(e){xhr||(xhr=new global$1.XMLHttpRequest).open("GET",global$1.location.host?"/":"https://example.com");try{return xhr.responseType=e,xhr.responseType===e}catch(e){return!1}}var inherits$1,haveArrayBuffer=void 0!==global$1.ArrayBuffer,haveSlice=haveArrayBuffer&&isFunction$1(global$1.ArrayBuffer.prototype.slice),arraybuffer=haveArrayBuffer&&checkTypeSupport("arraybuffer"),msstream=!hasFetch&&haveSlice&&checkTypeSupport("ms-stream"),mozchunkedarraybuffer=!hasFetch&&haveArrayBuffer&&checkTypeSupport("moz-chunked-arraybuffer"),overrideMimeType=isFunction$1(xhr.overrideMimeType),vbArray=isFunction$1(global$1.VBArray);function isFunction$1(e){return"function"==typeof e}xhr=null;var inherits$2=inherits$1="function"==typeof Object.create?function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:function(e,t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e},formatRegExp=/%[sdj%]/g;function format(e){var t=arguments;if(!isString(e)){for(var r=[],n=0;n<arguments.length;n++)r.push(inspect(t[n]));return r.join(" ")}n=1;for(var i=arguments,a=i.length,o=String(e).replace(formatRegExp,function(e){if("%%"===e)return"%";if(n>=a)return e;switch(e){case"%s":return String(i[n++]);case"%d":return Number(i[n++]);case"%j":try{return JSON.stringify(i[n++])}catch(e){return"[Circular]"}default:return e}}),s=i[n];n<a;s=i[++n])isNull(s)||!isObject$2(s)?o+=" "+s:o+=" "+inspect(s);return o}function deprecate(e,t){if(isUndefined(global$1.process))return function(){return deprecate(e,t).apply(this,arguments)};if(!0===process.noDeprecation)return e;var r=!1;return function(){if(!r){if(process.throwDeprecation)throw new Error(t);process.traceDeprecation?console.trace(t):console.error(t),r=!0}return e.apply(this,arguments)}}var debugEnviron,domain,debugs={};function debuglog(e){if(isUndefined(debugEnviron)&&(debugEnviron=process.env.NODE_DEBUG||""),e=e.toUpperCase(),!debugs[e])if(new RegExp("\\b"+e+"\\b","i").test(debugEnviron)){debugs[e]=function(){var t=format.apply(null,arguments);console.error("%s %d: %s",e,0,t)}}else debugs[e]=function(){};return debugs[e]}function inspect(e,t){var r={seen:[],stylize:stylizeNoColor};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),isBoolean$1(t)?r.showHidden=t:t&&_extend(r,t),isUndefined(r.showHidden)&&(r.showHidden=!1),isUndefined(r.depth)&&(r.depth=2),isUndefined(r.colors)&&(r.colors=!1),isUndefined(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=stylizeWithColor),formatValue(r,e,r.depth)}function stylizeWithColor(e,t){var r=inspect.styles[t];return r?"["+inspect.colors[r][0]+"m"+e+"["+inspect.colors[r][1]+"m":e}function stylizeNoColor(e,t){return e}function arrayToHash(e){var t={};return e.forEach(function(e,r){t[e]=!0}),t}function formatValue(e,t,r){if(e.customInspect&&t&&isFunction$2(t.inspect)&&t.inspect!==inspect&&(!t.constructor||t.constructor.prototype!==t)){var n=t.inspect(r,e);return isString(n)||(n=formatValue(e,n,r)),n}var i=formatPrimitive(e,t);if(i)return i;var a=Object.keys(t),o=arrayToHash(a);if(e.showHidden&&(a=Object.getOwnPropertyNames(t)),isError$1(t)&&(a.indexOf("message")>=0||a.indexOf("description")>=0))return formatError(t);if(0===a.length){if(isFunction$2(t)){var s=t.name?": "+t.name:"";return e.stylize("[Function"+s+"]","special")}if(isRegExp$1(t))return e.stylize(RegExp.prototype.toString.call(t),"regexp");if(isDate(t))return e.stylize(Date.prototype.toString.call(t),"date");if(isError$1(t))return formatError(t)}var l,u="",c=!1,d=["{","}"];(isArray$2(t)&&(c=!0,d=["[","]"]),isFunction$2(t))&&(u=" [Function"+(t.name?": "+t.name:"")+"]");return isRegExp$1(t)&&(u=" "+RegExp.prototype.toString.call(t)),isDate(t)&&(u=" "+Date.prototype.toUTCString.call(t)),isError$1(t)&&(u=" "+formatError(t)),0!==a.length||c&&0!=t.length?r<0?isRegExp$1(t)?e.stylize(RegExp.prototype.toString.call(t),"regexp"):e.stylize("[Object]","special"):(e.seen.push(t),l=c?formatArray(e,t,r,o,a):a.map(function(n){return formatProperty(e,t,r,o,n,c)}),e.seen.pop(),reduceToSingleString(l,u,d)):d[0]+u+d[1]}function formatPrimitive(e,t){if(isUndefined(t))return e.stylize("undefined","undefined");if(isString(t)){var r="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(r,"string")}return isNumber(t)?e.stylize(""+t,"number"):isBoolean$1(t)?e.stylize(""+t,"boolean"):isNull(t)?e.stylize("null","null"):void 0}function formatError(e){return"["+Error.prototype.toString.call(e)+"]"}function formatArray(e,t,r,n,i){for(var a=[],o=0,s=t.length;o<s;++o)hasOwnProperty$14(t,String(o))?a.push(formatProperty(e,t,r,n,String(o),!0)):a.push("");return i.forEach(function(i){i.match(/^\d+$/)||a.push(formatProperty(e,t,r,n,i,!0))}),a}function formatProperty(e,t,r,n,i,a){var o,s,l;if((l=Object.getOwnPropertyDescriptor(t,i)||{value:t[i]}).get?s=l.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):l.set&&(s=e.stylize("[Setter]","special")),hasOwnProperty$14(n,i)||(o="["+i+"]"),s||(e.seen.indexOf(l.value)<0?(s=isNull(r)?formatValue(e,l.value,null):formatValue(e,l.value,r-1)).indexOf("\n")>-1&&(s=a?s.split("\n").map(function(e){return"  "+e}).join("\n").substr(2):"\n"+s.split("\n").map(function(e){return"   "+e}).join("\n")):s=e.stylize("[Circular]","special")),isUndefined(o)){if(a&&i.match(/^\d+$/))return s;(o=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(o=o.substr(1,o.length-2),o=e.stylize(o,"name")):(o=o.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),o=e.stylize(o,"string"))}return o+": "+s}function reduceToSingleString(e,t,r){return e.reduce(function(e,t){return t.indexOf("\n"),e+t.replace(/\u001b\[\d\d?m/g,"").length+1},0)>60?r[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+r[1]:r[0]+t+" "+e.join(", ")+" "+r[1]}function isArray$2(e){return Array.isArray(e)}function isBoolean$1(e){return"boolean"==typeof e}function isNull(e){return null===e}function isNullOrUndefined(e){return null==e}function isNumber(e){return"number"==typeof e}function isString(e){return"string"==typeof e}function isUndefined(e){return void 0===e}function isRegExp$1(e){return isObject$2(e)&&"[object RegExp]"===objectToString$1(e)}function isObject$2(e){return"object"===(void 0===e?"undefined":_typeof(e))&&null!==e}function isDate(e){return isObject$2(e)&&"[object Date]"===objectToString$1(e)}function isError$1(e){return isObject$2(e)&&("[object Error]"===objectToString$1(e)||e instanceof Error)}function isFunction$2(e){return"function"==typeof e}function objectToString$1(e){return Object.prototype.toString.call(e)}function _extend(e,t){if(!t||!isObject$2(t))return e;for(var r=Object.keys(t),n=r.length;n--;)e[r[n]]=t[r[n]];return e}function hasOwnProperty$14(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function EventHandlers(){}function EventEmitter(){EventEmitter.init.call(this)}function $getMaxListeners(e){return void 0===e._maxListeners?EventEmitter.defaultMaxListeners:e._maxListeners}function emitNone(e,t,r){if(t)e.call(r);else for(var n=e.length,i=arrayClone(e,n),a=0;a<n;++a)i[a].call(r)}function emitOne(e,t,r,n){if(t)e.call(r,n);else for(var i=e.length,a=arrayClone(e,i),o=0;o<i;++o)a[o].call(r,n)}function emitTwo(e,t,r,n,i){if(t)e.call(r,n,i);else for(var a=e.length,o=arrayClone(e,a),s=0;s<a;++s)o[s].call(r,n,i)}function emitThree(e,t,r,n,i,a){if(t)e.call(r,n,i,a);else for(var o=e.length,s=arrayClone(e,o),l=0;l<o;++l)s[l].call(r,n,i,a)}function emitMany(e,t,r,n){if(t)e.apply(r,n);else for(var i=e.length,a=arrayClone(e,i),o=0;o<i;++o)a[o].apply(r,n)}function _addListener(e,t,r,n){var i,a,o;if("function"!=typeof r)throw new TypeError('"listener" argument must be a function');if((a=e._events)?(a.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),a=e._events),o=a[t]):(a=e._events=new EventHandlers,e._eventsCount=0),o){if("function"==typeof o?o=a[t]=n?[r,o]:[o,r]:n?o.unshift(r):o.push(r),!o.warned&&(i=$getMaxListeners(e))&&i>0&&o.length>i){o.warned=!0;var s=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+t+" listeners added. Use emitter.setMaxListeners() to increase limit");s.name="MaxListenersExceededWarning",s.emitter=e,s.type=t,s.count=o.length,emitWarning(s)}}else o=a[t]=r,++e._eventsCount;return e}function emitWarning(e){"function"==typeof console.warn?console.warn(e):console.log(e)}function _onceWrap(e,t,r){var n=!1;function i(){e.removeListener(t,i),n||(n=!0,r.apply(e,arguments))}return i.listener=r,i}function listenerCount(e){var t=this._events;if(t){var r=t[e];if("function"==typeof r)return 1;if(r)return r.length}return 0}function spliceOne(e,t){for(var r=t,n=r+1,i=e.length;n<i;r+=1,n+=1)e[r]=e[n];e.pop()}function arrayClone(e,t){for(var r=new Array(t);t--;)r[t]=e[t];return r}function unwrapListeners(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}function BufferList(){this.head=null,this.tail=null,this.length=0}inspect.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},inspect.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},EventHandlers.prototype=Object.create(null),EventEmitter.EventEmitter=EventEmitter,EventEmitter.usingDomains=!1,EventEmitter.prototype.domain=void 0,EventEmitter.prototype._events=void 0,EventEmitter.prototype._maxListeners=void 0,EventEmitter.defaultMaxListeners=10,EventEmitter.init=function(){this.domain=null,EventEmitter.usingDomains&&(!domain.active||this instanceof domain.Domain||(this.domain=domain.active)),this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=new EventHandlers,this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},EventEmitter.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||isNaN(e))throw new TypeError('"n" argument must be a positive number');return this._maxListeners=e,this},EventEmitter.prototype.getMaxListeners=function(){return $getMaxListeners(this)},EventEmitter.prototype.emit=function(e){var t,r,n,i,a,o,s,l=arguments,u="error"===e;if(o=this._events)u=u&&null==o.error;else if(!u)return!1;if(s=this.domain,u){if(t=arguments[1],!s){if(t instanceof Error)throw t;var c=new Error('Uncaught, unspecified "error" event. ('+t+")");throw c.context=t,c}return t||(t=new Error('Uncaught, unspecified "error" event')),t.domainEmitter=this,t.domain=s,t.domainThrown=!1,s.emit("error",t),!1}if(!(r=o[e]))return!1;var d="function"==typeof r;switch(n=arguments.length){case 1:emitNone(r,d,this);break;case 2:emitOne(r,d,this,arguments[1]);break;case 3:emitTwo(r,d,this,arguments[1],arguments[2]);break;case 4:emitThree(r,d,this,arguments[1],arguments[2],arguments[3]);break;default:for(i=new Array(n-1),a=1;a<n;a++)i[a-1]=l[a];emitMany(r,d,this,i)}return!0},EventEmitter.prototype.addListener=function(e,t){return _addListener(this,e,t,!1)},EventEmitter.prototype.on=EventEmitter.prototype.addListener,EventEmitter.prototype.prependListener=function(e,t){return _addListener(this,e,t,!0)},EventEmitter.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.on(e,_onceWrap(this,e,t)),this},EventEmitter.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.prependListener(e,_onceWrap(this,e,t)),this},EventEmitter.prototype.removeListener=function(e,t){var r,n,i,a,o;if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');if(!(n=this._events))return this;if(!(r=n[e]))return this;if(r===t||r.listener&&r.listener===t)0==--this._eventsCount?this._events=new EventHandlers:(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(i=-1,a=r.length;a-- >0;)if(r[a]===t||r[a].listener&&r[a].listener===t){o=r[a].listener,i=a;break}if(i<0)return this;if(1===r.length){if(r[0]=void 0,0==--this._eventsCount)return this._events=new EventHandlers,this;delete n[e]}else spliceOne(r,i);n.removeListener&&this.emit("removeListener",e,o||t)}return this},EventEmitter.prototype.removeAllListeners=function(e){var t,r;if(!(r=this._events))return this;if(!r.removeListener)return 0===arguments.length?(this._events=new EventHandlers,this._eventsCount=0):r[e]&&(0==--this._eventsCount?this._events=new EventHandlers:delete r[e]),this;if(0===arguments.length){for(var n,i=Object.keys(r),a=0;a<i.length;++a)"removeListener"!==(n=i[a])&&this.removeAllListeners(n);return this.removeAllListeners("removeListener"),this._events=new EventHandlers,this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(t)do{this.removeListener(e,t[t.length-1])}while(t[0]);return this},EventEmitter.prototype.listeners=function(e){var t,r=this._events;return r&&(t=r[e])?"function"==typeof t?[t.listener||t]:unwrapListeners(t):[]},EventEmitter.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):listenerCount.call(e,t)},EventEmitter.prototype.listenerCount=listenerCount,EventEmitter.prototype.eventNames=function(){return this._eventsCount>0?Reflect.ownKeys(this._events):[]},BufferList.prototype.push=function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length},BufferList.prototype.unshift=function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length},BufferList.prototype.shift=function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}},BufferList.prototype.clear=function(){this.head=this.tail=null,this.length=0},BufferList.prototype.join=function(e){if(0===this.length)return"";for(var t=this.head,r=""+t.data;t=t.next;)r+=e+t.data;return r},BufferList.prototype.concat=function(e){if(0===this.length)return Buffer$2.alloc(0);if(1===this.length)return this.head.data;for(var t=Buffer$2.allocUnsafe(e>>>0),r=this.head,n=0;r;)r.data.copy(t,n),n+=r.data.length,r=r.next;return t};var isBufferEncoding=Buffer$2.isEncoding||function(e){switch(e&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function assertEncoding(e){if(e&&!isBufferEncoding(e))throw new Error("Unknown encoding: "+e)}function StringDecoder(e){switch(this.encoding=(e||"utf8").toLowerCase().replace(/[-_]/,""),assertEncoding(e),this.encoding){case"utf8":this.surrogateSize=3;break;case"ucs2":case"utf16le":this.surrogateSize=2,this.detectIncompleteChar=utf16DetectIncompleteChar;break;case"base64":this.surrogateSize=3,this.detectIncompleteChar=base64DetectIncompleteChar;break;default:return void(this.write=passThroughWrite)}this.charBuffer=new Buffer$2(6),this.charReceived=0,this.charLength=0}function passThroughWrite(e){return e.toString(this.encoding)}function utf16DetectIncompleteChar(e){this.charReceived=e.length%2,this.charLength=this.charReceived?2:0}function base64DetectIncompleteChar(e){this.charReceived=e.length%3,this.charLength=this.charReceived?3:0}StringDecoder.prototype.write=function(e){for(var t="";this.charLength;){var r=e.length>=this.charLength-this.charReceived?this.charLength-this.charReceived:e.length;if(e.copy(this.charBuffer,this.charReceived,0,r),this.charReceived+=r,this.charReceived<this.charLength)return"";if(e=e.slice(r,e.length),!((i=(t=this.charBuffer.slice(0,this.charLength).toString(this.encoding)).charCodeAt(t.length-1))>=55296&&i<=56319)){if(this.charReceived=this.charLength=0,0===e.length)return t;break}this.charLength+=this.surrogateSize,t=""}this.detectIncompleteChar(e);var n=e.length;this.charLength&&(e.copy(this.charBuffer,0,e.length-this.charReceived,n),n-=this.charReceived);var i;n=(t+=e.toString(this.encoding,0,n)).length-1;if((i=t.charCodeAt(n))>=55296&&i<=56319){var a=this.surrogateSize;return this.charLength+=a,this.charReceived+=a,this.charBuffer.copy(this.charBuffer,a,0,a),e.copy(this.charBuffer,0,0,a),t.substring(0,n)}return t},StringDecoder.prototype.detectIncompleteChar=function(e){for(var t=e.length>=3?3:e.length;t>0;t--){var r=e[e.length-t];if(1==t&&r>>5==6){this.charLength=2;break}if(t<=2&&r>>4==14){this.charLength=3;break}if(t<=3&&r>>3==30){this.charLength=4;break}}this.charReceived=t},StringDecoder.prototype.end=function(e){var t="";if(e&&e.length&&(t=this.write(e)),this.charReceived){var r=this.charReceived,n=this.charBuffer,i=this.encoding;t+=n.slice(0,r).toString(i)}return t},Readable.ReadableState=ReadableState;var debug=debuglog("stream");function prependListener(e,t,r){if("function"==typeof e.prependListener)return e.prependListener(t,r);e._events&&e._events[t]?Array.isArray(e._events[t])?e._events[t].unshift(r):e._events[t]=[r,e._events[t]]:e.on(t,r)}function listenerCount$1(e,t){return e.listeners(t).length}function ReadableState(e,t){e=e||{},this.objectMode=!!e.objectMode,t instanceof Duplex&&(this.objectMode=this.objectMode||!!e.readableObjectMode);var r=e.highWaterMark,n=this.objectMode?16:16384;this.highWaterMark=r||0===r?r:n,this.highWaterMark=~~this.highWaterMark,this.buffer=new BufferList,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.ranOut=!1,this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(this.decoder=new StringDecoder(e.encoding),this.encoding=e.encoding)}function Readable(e){if(!(this instanceof Readable))return new Readable(e);this._readableState=new ReadableState(e,this),this.readable=!0,e&&"function"==typeof e.read&&(this._read=e.read),EventEmitter.call(this)}function readableAddChunk(e,t,r,n,i){var a=chunkInvalid(t,r);if(a)e.emit("error",a);else if(null===r)t.reading=!1,onEofChunk(e,t);else if(t.objectMode||r&&r.length>0)if(t.ended&&!i){var o=new Error("stream.push() after EOF");e.emit("error",o)}else if(t.endEmitted&&i){var s=new Error("stream.unshift() after end event");e.emit("error",s)}else{var l;!t.decoder||i||n||(r=t.decoder.write(r),l=!t.objectMode&&0===r.length),i||(t.reading=!1),l||(t.flowing&&0===t.length&&!t.sync?(e.emit("data",r),e.read(0)):(t.length+=t.objectMode?1:r.length,i?t.buffer.unshift(r):t.buffer.push(r),t.needReadable&&emitReadable(e))),maybeReadMore(e,t)}else i||(t.reading=!1);return needMoreData(t)}function needMoreData(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}inherits$2(Readable,EventEmitter),Readable.prototype.push=function(e,t){var r=this._readableState;return r.objectMode||"string"!=typeof e||(t=t||r.defaultEncoding)!==r.encoding&&(e=Buffer$2.from(e,t),t=""),readableAddChunk(this,r,e,t,!1)},Readable.prototype.unshift=function(e){return readableAddChunk(this,this._readableState,e,"",!0)},Readable.prototype.isPaused=function(){return!1===this._readableState.flowing},Readable.prototype.setEncoding=function(e){return this._readableState.decoder=new StringDecoder(e),this._readableState.encoding=e,this};var MAX_HWM=8388608;function computeNewHighWaterMark(e){return e>=MAX_HWM?e=MAX_HWM:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}function howMuchToRead(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=computeNewHighWaterMark(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function chunkInvalid(e,t){var r=null;return isBuffer$1(t)||"string"==typeof t||null===t||void 0===t||e.objectMode||(r=new TypeError("Invalid non-string/buffer chunk")),r}function onEofChunk(e,t){if(!t.ended){if(t.decoder){var r=t.decoder.end();r&&r.length&&(t.buffer.push(r),t.length+=t.objectMode?1:r.length)}t.ended=!0,emitReadable(e)}}function emitReadable(e){var t=e._readableState;t.needReadable=!1,t.emittedReadable||(debug("emitReadable",t.flowing),t.emittedReadable=!0,t.sync?nextTick$1(emitReadable_,e):emitReadable_(e))}function emitReadable_(e){debug("emit readable"),e.emit("readable"),flow(e)}function maybeReadMore(e,t){t.readingMore||(t.readingMore=!0,nextTick$1(maybeReadMore_,e,t))}function maybeReadMore_(e,t){for(var r=t.length;!t.reading&&!t.flowing&&!t.ended&&t.length<t.highWaterMark&&(debug("maybeReadMore read 0"),e.read(0),r!==t.length);)r=t.length;t.readingMore=!1}function pipeOnDrain(e){return function(){var t=e._readableState;debug("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&e.listeners("data").length&&(t.flowing=!0,flow(e))}}function nReadingNextTick(e){debug("readable nexttick read 0"),e.read(0)}function resume(e,t){t.resumeScheduled||(t.resumeScheduled=!0,nextTick$1(resume_,e,t))}function resume_(e,t){t.reading||(debug("resume read 0"),e.read(0)),t.resumeScheduled=!1,t.awaitDrain=0,e.emit("resume"),flow(e),t.flowing&&!t.reading&&e.read(0)}function flow(e){var t=e._readableState;for(debug("flow",t.flowing);t.flowing&&null!==e.read(););}function fromList(e,t){return 0===t.length?null:(t.objectMode?r=t.buffer.shift():!e||e>=t.length?(r=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.head.data:t.buffer.concat(t.length),t.buffer.clear()):r=fromListPartial(e,t.buffer,t.decoder),r);var r}function fromListPartial(e,t,r){var n;return e<t.head.data.length?(n=t.head.data.slice(0,e),t.head.data=t.head.data.slice(e)):n=e===t.head.data.length?t.shift():r?copyFromBufferString(e,t):copyFromBuffer(e,t),n}function copyFromBufferString(e,t){var r=t.head,n=1,i=r.data;for(e-=i.length;r=r.next;){var a=r.data,o=e>a.length?a.length:e;if(o===a.length?i+=a:i+=a.slice(0,e),0===(e-=o)){o===a.length?(++n,r.next?t.head=r.next:t.head=t.tail=null):(t.head=r,r.data=a.slice(o));break}++n}return t.length-=n,i}function copyFromBuffer(e,t){var r=Buffer$2.allocUnsafe(e),n=t.head,i=1;for(n.data.copy(r),e-=n.data.length;n=n.next;){var a=n.data,o=e>a.length?a.length:e;if(a.copy(r,r.length-e,0,o),0===(e-=o)){o===a.length?(++i,n.next?t.head=n.next:t.head=t.tail=null):(t.head=n,n.data=a.slice(o));break}++i}return t.length-=i,r}function endReadable(e){var t=e._readableState;if(t.length>0)throw new Error('"endReadable()" called on non-empty stream');t.endEmitted||(t.ended=!0,nextTick$1(endReadableNT,t,e))}function endReadableNT(e,t){e.endEmitted||0!==e.length||(e.endEmitted=!0,t.readable=!1,t.emit("end"))}function forEach$1(e,t){for(var r=0,n=e.length;r<n;r++)t(e[r],r)}function indexOf(e,t){for(var r=0,n=e.length;r<n;r++)if(e[r]===t)return r;return-1}function nop(){}function WriteReq(e,t,r){this.chunk=e,this.encoding=t,this.callback=r,this.next=null}function WritableState(e,t){Object.defineProperty(this,"buffer",{get:deprecate(function(){return this.getBuffer()},"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.")}),e=e||{},this.objectMode=!!e.objectMode,t instanceof Duplex&&(this.objectMode=this.objectMode||!!e.writableObjectMode);var r=e.highWaterMark,n=this.objectMode?16:16384;this.highWaterMark=r||0===r?r:n,this.highWaterMark=~~this.highWaterMark,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1;var i=!1===e.decodeStrings;this.decodeStrings=!i,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){onwrite(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new CorkedRequest(this)}function Writable(e){if(!(this instanceof Writable||this instanceof Duplex))return new Writable(e);this._writableState=new WritableState(e,this),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev)),EventEmitter.call(this)}function writeAfterEnd(e,t){var r=new Error("write after end");e.emit("error",r),nextTick$1(t,r)}function validChunk(e,t,r,n){var i=!0,a=!1;return null===r?a=new TypeError("May not write null values to stream"):Buffer$2.isBuffer(r)||"string"==typeof r||void 0===r||t.objectMode||(a=new TypeError("Invalid non-string/buffer chunk")),a&&(e.emit("error",a),nextTick$1(n,a),i=!1),i}function decodeChunk(e,t,r){return e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=Buffer$2.from(t,r)),t}function writeOrBuffer(e,t,r,n,i){r=decodeChunk(t,r,n),Buffer$2.isBuffer(r)&&(n="buffer");var a=t.objectMode?1:r.length;t.length+=a;var o=t.length<t.highWaterMark;if(o||(t.needDrain=!0),t.writing||t.corked){var s=t.lastBufferedRequest;t.lastBufferedRequest=new WriteReq(r,n,i),s?s.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else doWrite(e,t,!1,a,r,n,i);return o}function doWrite(e,t,r,n,i,a,o){t.writelen=n,t.writecb=o,t.writing=!0,t.sync=!0,r?e._writev(i,t.onwrite):e._write(i,a,t.onwrite),t.sync=!1}function onwriteError(e,t,r,n,i){--t.pendingcb,r?nextTick$1(i,n):i(n),e._writableState.errorEmitted=!0,e.emit("error",n)}function onwriteStateUpdate(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}function onwrite(e,t){var r=e._writableState,n=r.sync,i=r.writecb;if(onwriteStateUpdate(r),t)onwriteError(e,r,n,t,i);else{var a=needFinish(r);a||r.corked||r.bufferProcessing||!r.bufferedRequest||clearBuffer(e,r),n?nextTick$1(afterWrite,e,r,a,i):afterWrite(e,r,a,i)}}function afterWrite(e,t,r,n){r||onwriteDrain(e,t),t.pendingcb--,n(),finishMaybe(e,t)}function onwriteDrain(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}function clearBuffer(e,t){t.bufferProcessing=!0;var r=t.bufferedRequest;if(e._writev&&r&&r.next){var n=t.bufferedRequestCount,i=new Array(n),a=t.corkedRequestsFree;a.entry=r;for(var o=0;r;)i[o]=r,r=r.next,o+=1;doWrite(e,t,!0,t.length,i,"",a.finish),t.pendingcb++,t.lastBufferedRequest=null,a.next?(t.corkedRequestsFree=a.next,a.next=null):t.corkedRequestsFree=new CorkedRequest(t)}else{for(;r;){var s=r.chunk,l=r.encoding,u=r.callback;if(doWrite(e,t,!1,t.objectMode?1:s.length,s,l,u),r=r.next,t.writing)break}null===r&&(t.lastBufferedRequest=null)}t.bufferedRequestCount=0,t.bufferedRequest=r,t.bufferProcessing=!1}function needFinish(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function prefinish(e,t){t.prefinished||(t.prefinished=!0,e.emit("prefinish"))}function finishMaybe(e,t){var r=needFinish(t);return r&&(0===t.pendingcb?(prefinish(e,t),t.finished=!0,e.emit("finish")):prefinish(e,t)),r}function endWritable(e,t,r){t.ending=!0,finishMaybe(e,t),r&&(t.finished?nextTick$1(r):e.once("finish",r)),t.ended=!0,e.writable=!1}function CorkedRequest(e){var t=this;this.next=null,this.entry=null,this.finish=function(r){var n=t.entry;for(t.entry=null;n;){var i=n.callback;e.pendingcb--,i(r),n=n.next}e.corkedRequestsFree?e.corkedRequestsFree.next=t:e.corkedRequestsFree=t}}Readable.prototype.read=function(e){debug("read",e),e=parseInt(e,10);var t=this._readableState,r=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&(t.length>=t.highWaterMark||t.ended))return debug("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?endReadable(this):emitReadable(this),null;if(0===(e=howMuchToRead(e,t))&&t.ended)return 0===t.length&&endReadable(this),null;var n,i=t.needReadable;return debug("need readable",i),(0===t.length||t.length-e<t.highWaterMark)&&debug("length less than watermark",i=!0),t.ended||t.reading?debug("reading or ended",i=!1):i&&(debug("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=howMuchToRead(r,t))),null===(n=e>0?fromList(e,t):null)?(t.needReadable=!0,e=0):t.length-=e,0===t.length&&(t.ended||(t.needReadable=!0),r!==e&&t.ended&&endReadable(this)),null!==n&&this.emit("data",n),n},Readable.prototype._read=function(e){this.emit("error",new Error("not implemented"))},Readable.prototype.pipe=function(e,t){var r=this,n=this._readableState;switch(n.pipesCount){case 0:n.pipes=e;break;case 1:n.pipes=[n.pipes,e];break;default:n.pipes.push(e)}n.pipesCount+=1,debug("pipe count=%d opts=%j",n.pipesCount,t);var i=!t||!1!==t.end?o:u;function a(e){debug("onunpipe"),e===r&&u()}function o(){debug("onend"),e.end()}n.endEmitted?nextTick$1(i):r.once("end",i),e.on("unpipe",a);var s=pipeOnDrain(r);e.on("drain",s);var l=!1;function u(){debug("cleanup"),e.removeListener("close",f),e.removeListener("finish",p),e.removeListener("drain",s),e.removeListener("error",h),e.removeListener("unpipe",a),r.removeListener("end",o),r.removeListener("end",u),r.removeListener("data",d),l=!0,!n.awaitDrain||e._writableState&&!e._writableState.needDrain||s()}var c=!1;function d(t){debug("ondata"),c=!1,!1!==e.write(t)||c||((1===n.pipesCount&&n.pipes===e||n.pipesCount>1&&-1!==indexOf(n.pipes,e))&&!l&&(debug("false write response, pause",r._readableState.awaitDrain),r._readableState.awaitDrain++,c=!0),r.pause())}function h(t){debug("onerror",t),g(),e.removeListener("error",h),0===listenerCount$1(e,"error")&&e.emit("error",t)}function f(){e.removeListener("finish",p),g()}function p(){debug("onfinish"),e.removeListener("close",f),g()}function g(){debug("unpipe"),r.unpipe(e)}return r.on("data",d),prependListener(e,"error",h),e.once("close",f),e.once("finish",p),e.emit("pipe",r),n.flowing||(debug("pipe resume"),r.resume()),e},Readable.prototype.unpipe=function(e){var t=this._readableState;if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes?this:(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this),this);if(!e){var r=t.pipes,n=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var i=0;i<n;i++)r[i].emit("unpipe",this);return this}var a=indexOf(t.pipes,e);return-1===a?this:(t.pipes.splice(a,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this),this)},Readable.prototype.on=function(e,t){var r=EventEmitter.prototype.on.call(this,e,t);if("data"===e)!1!==this._readableState.flowing&&this.resume();else if("readable"===e){var n=this._readableState;n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.emittedReadable=!1,n.reading?n.length&&emitReadable(this,n):nextTick$1(nReadingNextTick,this))}return r},Readable.prototype.addListener=Readable.prototype.on,Readable.prototype.resume=function(){var e=this._readableState;return e.flowing||(debug("resume"),e.flowing=!0,resume(this,e)),this},Readable.prototype.pause=function(){return debug("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(debug("pause"),this._readableState.flowing=!1,this.emit("pause")),this},Readable.prototype.wrap=function(e){var t=this._readableState,r=!1,n=this;for(var i in e.on("end",function(){if(debug("wrapped end"),t.decoder&&!t.ended){var e=t.decoder.end();e&&e.length&&n.push(e)}n.push(null)}),e.on("data",function(i){(debug("wrapped data"),t.decoder&&(i=t.decoder.write(i)),!t.objectMode||null!==i&&void 0!==i)&&((t.objectMode||i&&i.length)&&(n.push(i)||(r=!0,e.pause())))}),e)void 0===this[i]&&"function"==typeof e[i]&&(this[i]=function(t){return function(){return e[t].apply(e,arguments)}}(i));return forEach$1(["error","close","destroy","pause","resume"],function(t){e.on(t,n.emit.bind(n,t))}),n._read=function(t){debug("wrapped _read",t),r&&(r=!1,e.resume())},n},Readable._fromList=fromList,Writable.WritableState=WritableState,inherits$2(Writable,EventEmitter),WritableState.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},Writable.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},Writable.prototype.write=function(e,t,r){var n=this._writableState,i=!1;return"function"==typeof t&&(r=t,t=null),Buffer$2.isBuffer(e)?t="buffer":t||(t=n.defaultEncoding),"function"!=typeof r&&(r=nop),n.ended?writeAfterEnd(this,r):validChunk(this,n,e,r)&&(n.pendingcb++,i=writeOrBuffer(this,n,e,t,r)),i},Writable.prototype.cork=function(){this._writableState.corked++},Writable.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.bufferedRequest||clearBuffer(this,e))},Writable.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+e);return this._writableState.defaultEncoding=e,this},Writable.prototype._write=function(e,t,r){r(new Error("not implemented"))},Writable.prototype._writev=null,Writable.prototype.end=function(e,t,r){var n=this._writableState;"function"==typeof e?(r=e,e=null,t=null):"function"==typeof t&&(r=t,t=null),null!==e&&void 0!==e&&this.write(e,t),n.corked&&(n.corked=1,this.uncork()),n.ending||n.finished||endWritable(this,n,r)},inherits$2(Duplex,Readable);for(var keys$1=Object.keys(Writable.prototype),v=0;v<keys$1.length;v++){var method=keys$1[v];Duplex.prototype[method]||(Duplex.prototype[method]=Writable.prototype[method])}function Duplex(e){if(!(this instanceof Duplex))return new Duplex(e);Readable.call(this,e),Writable.call(this,e),e&&!1===e.readable&&(this.readable=!1),e&&!1===e.writable&&(this.writable=!1),this.allowHalfOpen=!0,e&&!1===e.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",onend)}function onend(){this.allowHalfOpen||this._writableState.ended||nextTick$1(onEndNT,this)}function onEndNT(e){e.end()}function TransformState(e){this.afterTransform=function(t,r){return afterTransform(e,t,r)},this.needTransform=!1,this.transforming=!1,this.writecb=null,this.writechunk=null,this.writeencoding=null}function afterTransform(e,t,r){var n=e._transformState;n.transforming=!1;var i=n.writecb;if(!i)return e.emit("error",new Error("no writecb in Transform class"));n.writechunk=null,n.writecb=null,null!==r&&void 0!==r&&e.push(r),i(t);var a=e._readableState;a.reading=!1,(a.needReadable||a.length<a.highWaterMark)&&e._read(a.highWaterMark)}function Transform(e){if(!(this instanceof Transform))return new Transform(e);Duplex.call(this,e),this._transformState=new TransformState(this);var t=this;this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.once("prefinish",function(){"function"==typeof this._flush?this._flush(function(e){done(t,e)}):done(t)})}function done(e,t){if(t)return e.emit("error",t);var r=e._writableState,n=e._transformState;if(r.length)throw new Error("Calling transform done when ws.length != 0");if(n.transforming)throw new Error("Calling transform done when still transforming");return e.push(null)}function PassThrough(e){if(!(this instanceof PassThrough))return new PassThrough(e);Transform.call(this,e)}function Stream(){EventEmitter.call(this)}inherits$2(Transform,Duplex),Transform.prototype.push=function(e,t){return this._transformState.needTransform=!1,Duplex.prototype.push.call(this,e,t)},Transform.prototype._transform=function(e,t,r){throw new Error("Not implemented")},Transform.prototype._write=function(e,t,r){var n=this._transformState;if(n.writecb=r,n.writechunk=e,n.writeencoding=t,!n.transforming){var i=this._readableState;(n.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},Transform.prototype._read=function(e){var t=this._transformState;null!==t.writechunk&&t.writecb&&!t.transforming?(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform)):t.needTransform=!0},inherits$2(PassThrough,Transform),PassThrough.prototype._transform=function(e,t,r){r(null,e)},inherits$2(Stream,EventEmitter),Stream.Readable=Readable,Stream.Writable=Writable,Stream.Duplex=Duplex,Stream.Transform=Transform,Stream.PassThrough=PassThrough,Stream.Stream=Stream,Stream.prototype.pipe=function(e,t){var r=this;function n(t){e.writable&&!1===e.write(t)&&r.pause&&r.pause()}function i(){r.readable&&r.resume&&r.resume()}r.on("data",n),e.on("drain",i),e._isStdio||t&&!1===t.end||(r.on("end",o),r.on("close",s));var a=!1;function o(){a||(a=!0,e.end())}function s(){a||(a=!0,"function"==typeof e.destroy&&e.destroy())}function l(e){if(u(),0===EventEmitter.listenerCount(this,"error"))throw e}function u(){r.removeListener("data",n),e.removeListener("drain",i),r.removeListener("end",o),r.removeListener("close",s),r.removeListener("error",l),e.removeListener("error",l),r.removeListener("end",u),r.removeListener("close",u),e.removeListener("close",u)}return r.on("error",l),e.on("error",l),r.on("end",u),r.on("close",u),e.on("close",u),e.emit("pipe",r),e};var rStates={UNSENT:0,OPENED:1,HEADERS_RECEIVED:2,LOADING:3,DONE:4};function IncomingMessage(e,t,r){var n,i=this;if(Readable.call(i),i._mode=r,i.headers={},i.rawHeaders=[],i.trailers={},i.rawTrailers=[],i.on("end",function(){nextTick$1(function(){i.emit("close")})}),"fetch"===r){i._fetchResponse=t,i.url=t.url,i.statusCode=t.status,i.statusMessage=t.statusText;for(var a,o,s=t.headers[Symbol.iterator]();a=(o=s.next()).value,!o.done;)i.headers[a[0].toLowerCase()]=a[1],i.rawHeaders.push(a[0],a[1]);var l=t.body.getReader();(n=function(){l.read().then(function(e){i._destroyed||(e.done?i.push(null):(i.push(new Buffer$2(e.value)),n()))})})()}else{if(i._xhr=e,i._pos=0,i.url=e.responseURL,i.statusCode=e.status,i.statusMessage=e.statusText,e.getAllResponseHeaders().split(/\r?\n/).forEach(function(e){var t=e.match(/^([^:]+):\s*(.*)/);if(t){var r=t[1].toLowerCase();"set-cookie"===r?(void 0===i.headers[r]&&(i.headers[r]=[]),i.headers[r].push(t[2])):void 0!==i.headers[r]?i.headers[r]+=", "+t[2]:i.headers[r]=t[2],i.rawHeaders.push(t[1],t[2])}}),i._charset="x-user-defined",!overrideMimeType){var u=i.rawHeaders["mime-type"];if(u){var c=u.match(/;\s*charset=([^;])(;|$)/);c&&(i._charset=c[1].toLowerCase())}i._charset||(i._charset="utf-8")}}}function toArrayBuffer(e){if(e instanceof Uint8Array){if(0===e.byteOffset&&e.byteLength===e.buffer.byteLength)return e.buffer;if("function"==typeof e.buffer.slice)return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}if(isBuffer$1(e)){for(var t=new Uint8Array(e.length),r=e.length,n=0;n<r;n++)t[n]=e[n];return t.buffer}throw new Error("Argument must be a Buffer")}function decideMode(e,t){return hasFetch&&t?"fetch":mozchunkedarraybuffer?"moz-chunked-arraybuffer":msstream?"ms-stream":arraybuffer&&e?"arraybuffer":vbArray&&e?"text:vbarray":"text"}function ClientRequest(e){var t,r=this;Writable.call(r),r._opts=e,r._body=[],r._headers={},e.auth&&r.setHeader("Authorization","Basic "+new Buffer$2(e.auth).toString("base64")),Object.keys(e.headers).forEach(function(t){r.setHeader(t,e.headers[t])});var n=!0;if("disable-fetch"===e.mode)n=!1,t=!0;else if("prefer-streaming"===e.mode)t=!1;else if("allow-wrong-content-type"===e.mode)t=!overrideMimeType;else{if(e.mode&&"default"!==e.mode&&"prefer-fast"!==e.mode)throw new Error("Invalid value for opts.mode");t=!0}r._mode=decideMode(t,n),r.on("finish",function(){r._onFinish()})}inherits$2(IncomingMessage,Readable),IncomingMessage.prototype._read=function(){},IncomingMessage.prototype._onXHRProgress=function(){var e=this,t=e._xhr,r=null;switch(e._mode){case"text:vbarray":if(t.readyState!==rStates.DONE)break;try{r=new global$1.VBArray(t.responseBody).toArray()}catch(e){}if(null!==r){e.push(new Buffer$2(r));break}case"text":try{r=t.responseText}catch(t){e._mode="text:vbarray";break}if(r.length>e._pos){var n=r.substr(e._pos);if("x-user-defined"===e._charset){for(var i=new Buffer$2(n.length),a=0;a<n.length;a++)i[a]=255&n.charCodeAt(a);e.push(i)}else e.push(n,e._charset);e._pos=r.length}break;case"arraybuffer":if(t.readyState!==rStates.DONE||!t.response)break;r=t.response,e.push(new Buffer$2(new Uint8Array(r)));break;case"moz-chunked-arraybuffer":if(r=t.response,t.readyState!==rStates.LOADING||!r)break;e.push(new Buffer$2(new Uint8Array(r)));break;case"ms-stream":if(r=t.response,t.readyState!==rStates.LOADING)break;var o=new global$1.MSStreamReader;o.onprogress=function(){o.result.byteLength>e._pos&&(e.push(new Buffer$2(new Uint8Array(o.result.slice(e._pos)))),e._pos=o.result.byteLength)},o.onload=function(){e.push(null)},o.readAsArrayBuffer(r)}e._xhr.readyState===rStates.DONE&&"ms-stream"!==e._mode&&e.push(null)},inherits$2(ClientRequest,Writable);var unsafeHeaders=["accept-charset","accept-encoding","access-control-request-headers","access-control-request-method","connection","content-length","cookie","cookie2","date","dnt","expect","host","keep-alive","origin","referer","te","trailer","transfer-encoding","upgrade","user-agent","via"];function statusValid(e){try{var t=e.status;return null!==t&&0!==t}catch(e){return!1}}ClientRequest.prototype.setHeader=function(e,t){var r=e.toLowerCase();-1===unsafeHeaders.indexOf(r)&&(this._headers[r]={name:e,value:t})},ClientRequest.prototype.getHeader=function(e){return this._headers[e.toLowerCase()].value},ClientRequest.prototype.removeHeader=function(e){delete this._headers[e.toLowerCase()]},ClientRequest.prototype._onFinish=function(){var e=this;if(!e._destroyed){var t,r=e._opts,n=e._headers;if("POST"!==r.method&&"PUT"!==r.method&&"PATCH"!==r.method||(t=blobConstructor()?new global$1.Blob(e._body.map(function(e){return toArrayBuffer(e)}),{type:(n["content-type"]||{}).value||""}):Buffer$2.concat(e._body).toString()),"fetch"===e._mode){var i=Object.keys(n).map(function(e){return[n[e].name,n[e].value]});global$1.fetch(e._opts.url,{method:e._opts.method,headers:i,body:t,mode:"cors",credentials:r.withCredentials?"include":"same-origin"}).then(function(t){e._fetchResponse=t,e._connect()},function(t){e.emit("error",t)})}else{var a=e._xhr=new global$1.XMLHttpRequest;try{a.open(e._opts.method,e._opts.url,!0)}catch(t){return void nextTick$1(function(){e.emit("error",t)})}"responseType"in a&&(a.responseType=e._mode.split(":")[0]),"withCredentials"in a&&(a.withCredentials=!!r.withCredentials),"text"===e._mode&&"overrideMimeType"in a&&a.overrideMimeType("text/plain; charset=x-user-defined"),Object.keys(n).forEach(function(e){a.setRequestHeader(n[e].name,n[e].value)}),e._response=null,a.onreadystatechange=function(){switch(a.readyState){case rStates.LOADING:case rStates.DONE:e._onXHRProgress()}},"moz-chunked-arraybuffer"===e._mode&&(a.onprogress=function(){e._onXHRProgress()}),a.onerror=function(){e._destroyed||e.emit("error",new Error("XHR error"))};try{a.send(t)}catch(t){return void nextTick$1(function(){e.emit("error",t)})}}}},ClientRequest.prototype._onXHRProgress=function(){statusValid(this._xhr)&&!this._destroyed&&(this._response||this._connect(),this._response._onXHRProgress())},ClientRequest.prototype._connect=function(){this._destroyed||(this._response=new IncomingMessage(this._xhr,this._fetchResponse,this._mode),this.emit("response",this._response))},ClientRequest.prototype._write=function(e,t,r){this._body.push(e),r()},ClientRequest.prototype.abort=ClientRequest.prototype.destroy=function(){this._destroyed=!0,this._response&&(this._response._destroyed=!0),this._xhr&&this._xhr.abort()},ClientRequest.prototype.end=function(e,t,r){"function"==typeof e&&(r=e,e=void 0),Writable.prototype.end.call(this,e,t,r)},ClientRequest.prototype.flushHeaders=function(){},ClientRequest.prototype.setTimeout=function(){},ClientRequest.prototype.setNoDelay=function(){},ClientRequest.prototype.setSocketKeepAlive=function(){};var maxInt=2147483647,base=36,tMin=1,tMax=26,skew=38,damp=700,initialBias=72,initialN=128,delimiter="-",regexNonASCII=/[^\x20-\x7E]/,regexSeparators=/[\x2E\u3002\uFF0E\uFF61]/g,errors={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},baseMinusTMin=base-tMin,floor=Math.floor,stringFromCharCode=String.fromCharCode;function error(e){throw new RangeError(errors[e])}function map(e,t){for(var r=e.length,n=[];r--;)n[r]=t(e[r]);return n}function mapDomain(e,t){var r=e.split("@"),n="";return r.length>1&&(n=r[0]+"@",e=r[1]),n+map((e=e.replace(regexSeparators,".")).split("."),t).join(".")}function ucs2decode(e){for(var t,r,n=[],i=0,a=e.length;i<a;)(t=e.charCodeAt(i++))>=55296&&t<=56319&&i<a?56320==(64512&(r=e.charCodeAt(i++)))?n.push(((1023&t)<<10)+(1023&r)+65536):(n.push(t),i--):n.push(t);return n}function digitToBasic(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function adapt(e,t,r){var n=0;for(e=r?floor(e/damp):e>>1,e+=floor(e/t);e>baseMinusTMin*tMax>>1;n+=base)e=floor(e/baseMinusTMin);return floor(n+(baseMinusTMin+1)*e/(e+skew))}function encode(e){var t,r,n,i,a,o,s,l,u,c,d,h,f,p,g,m=[];for(h=(e=ucs2decode(e)).length,t=initialN,r=0,a=initialBias,o=0;o<h;++o)(d=e[o])<128&&m.push(stringFromCharCode(d));for(n=i=m.length,i&&m.push(delimiter);n<h;){for(s=maxInt,o=0;o<h;++o)(d=e[o])>=t&&d<s&&(s=d);for(s-t>floor((maxInt-r)/(f=n+1))&&error("overflow"),r+=(s-t)*f,t=s,o=0;o<h;++o)if((d=e[o])<t&&++r>maxInt&&error("overflow"),d==t){for(l=r,u=base;!(l<(c=u<=a?tMin:u>=a+tMax?tMax:u-a));u+=base)g=l-c,p=base-c,m.push(stringFromCharCode(digitToBasic(c+g%p,0))),l=floor(g/p);m.push(stringFromCharCode(digitToBasic(l,0))),a=adapt(r,f,n==i),r=0,++n}++r,++t}return m.join("")}function toASCII(e){return mapDomain(e,function(e){return regexNonASCII.test(e)?"xn--"+encode(e):e})}function hasOwnProperty$15(e,t){return Object.prototype.hasOwnProperty.call(e,t)}var isArray$3=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)};function stringifyPrimitive(e){switch(void 0===e?"undefined":_typeof(e)){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}}function stringify(e,t,r,n){return t=t||"&",r=r||"=",null===e&&(e=void 0),"object"===(void 0===e?"undefined":_typeof(e))?map$1(objectKeys(e),function(n){var i=encodeURIComponent(stringifyPrimitive(n))+r;return isArray$3(e[n])?map$1(e[n],function(e){return i+encodeURIComponent(stringifyPrimitive(e))}).join(t):i+encodeURIComponent(stringifyPrimitive(e[n]))}).join(t):n?encodeURIComponent(stringifyPrimitive(n))+r+encodeURIComponent(stringifyPrimitive(e)):""}function map$1(e,t){if(e.map)return e.map(t);for(var r=[],n=0;n<e.length;n++)r.push(t(e[n],n));return r}var objectKeys=Object.keys||function(e){var t=[];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.push(r);return t};function parse$2(e,t,r,n){t=t||"&",r=r||"=";var i={};if("string"!=typeof e||0===e.length)return i;var a=/\+/g;e=e.split(t);var o=1e3;n&&"number"==typeof n.maxKeys&&(o=n.maxKeys);var s=e.length;o>0&&s>o&&(s=o);for(var l=0;l<s;++l){var u,c,d,h,f=e[l].replace(a,"%20"),p=f.indexOf(r);p>=0?(u=f.substr(0,p),c=f.substr(p+1)):(u=f,c=""),d=decodeURIComponent(u),h=decodeURIComponent(c),hasOwnProperty$15(i,d)?isArray$3(i[d])?i[d].push(h):i[d]=[i[d],h]:i[d]=h}return i}function Url(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}var protocolPattern=/^([a-z0-9.+-]+:)/i,portPattern=/:[0-9]*$/,simplePathPattern=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,delims=["<",">",'"',"`"," ","\r","\n","\t"],unwise=["{","}","|","\\","^","`"].concat(delims),autoEscape=["'"].concat(unwise),nonHostChars=["%","/","?",";","#"].concat(autoEscape),hostEndingChars=["/","?","#"],hostnameMaxLen=255,hostnamePartPattern=/^[+a-z0-9A-Z_-]{0,63}$/,hostnamePartStart=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,unsafeProtocol={javascript:!0,"javascript:":!0},hostlessProtocol={javascript:!0,"javascript:":!0},slashedProtocol={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0};function urlParse(e,t,r){if(e&&isObject$2(e)&&e instanceof Url)return e;var n=new Url;return n.parse(e,t,r),n}function parse$3(e,t,r,n){if(!isString(t))throw new TypeError("Parameter 'url' must be a string, not "+(void 0===t?"undefined":_typeof(t)));var i=t.indexOf("?"),a=-1!==i&&i<t.indexOf("#")?"?":"#",o=t.split(a);o[0]=o[0].replace(/\\/g,"/");var s=t=o.join(a);if(s=s.trim(),!n&&1===t.split("#").length){var l=simplePathPattern.exec(s);if(l)return e.path=s,e.href=s,e.pathname=l[1],l[2]?(e.search=l[2],e.query=r?parse$2(e.search.substr(1)):e.search.substr(1)):r&&(e.search="",e.query={}),e}var u,c,d,h,f=protocolPattern.exec(s);if(f){var p=(f=f[0]).toLowerCase();e.protocol=p,s=s.substr(f.length)}if(n||f||s.match(/^\/\/[^@\/]+@[^@\/]+/)){var g="//"===s.substr(0,2);!g||f&&hostlessProtocol[f]||(s=s.substr(2),e.slashes=!0)}if(!hostlessProtocol[f]&&(g||f&&!slashedProtocol[f])){var m,v,y=-1;for(u=0;u<hostEndingChars.length;u++)-1!==(c=s.indexOf(hostEndingChars[u]))&&(-1===y||c<y)&&(y=c);for(-1!==(v=-1===y?s.lastIndexOf("@"):s.lastIndexOf("@",y))&&(m=s.slice(0,v),s=s.slice(v+1),e.auth=decodeURIComponent(m)),y=-1,u=0;u<nonHostChars.length;u++)-1!==(c=s.indexOf(nonHostChars[u]))&&(-1===y||c<y)&&(y=c);-1===y&&(y=s.length),e.host=s.slice(0,y),s=s.slice(y),parseHost(e),e.hostname=e.hostname||"";var b="["===e.hostname[0]&&"]"===e.hostname[e.hostname.length-1];if(!b){var _=e.hostname.split(/\./);for(u=0,d=_.length;u<d;u++){var w=_[u];if(w&&!w.match(hostnamePartPattern)){for(var x="",S=0,k=w.length;S<k;S++)w.charCodeAt(S)>127?x+="x":x+=w[S];if(!x.match(hostnamePartPattern)){var $=_.slice(0,u),C=_.slice(u+1),T=w.match(hostnamePartStart);T&&($.push(T[1]),C.unshift(T[2])),C.length&&(s="/"+C.join(".")+s),e.hostname=$.join(".");break}}}}e.hostname.length>hostnameMaxLen?e.hostname="":e.hostname=e.hostname.toLowerCase(),b||(e.hostname=toASCII(e.hostname)),h=e.port?":"+e.port:"";var A=e.hostname||"";e.host=A+h,e.href+=e.host,b&&(e.hostname=e.hostname.substr(1,e.hostname.length-2),"/"!==s[0]&&(s="/"+s))}if(!unsafeProtocol[p])for(u=0,d=autoEscape.length;u<d;u++){var M=autoEscape[u];if(-1!==s.indexOf(M)){var O=encodeURIComponent(M);O===M&&(O=escape(M)),s=s.split(M).join(O)}}var D=s.indexOf("#");-1!==D&&(e.hash=s.substr(D),s=s.slice(0,D));var E=s.indexOf("?");if(-1!==E?(e.search=s.substr(E),e.query=s.substr(E+1),r&&(e.query=parse$2(e.query)),s=s.slice(0,E)):r&&(e.search="",e.query={}),s&&(e.pathname=s),slashedProtocol[p]&&e.hostname&&!e.pathname&&(e.pathname="/"),e.pathname||e.search){h=e.pathname||"";var P=e.search||"";e.path=h+P}return e.href=format$1(e),e}function format$1(e){var t=e.auth||"";t&&(t=(t=encodeURIComponent(t)).replace(/%3A/i,":"),t+="@");var r=e.protocol||"",n=e.pathname||"",i=e.hash||"",a=!1,o="";e.host?a=t+e.host:e.hostname&&(a=t+(-1===e.hostname.indexOf(":")?e.hostname:"["+this.hostname+"]"),e.port&&(a+=":"+e.port)),e.query&&isObject$2(e.query)&&Object.keys(e.query).length&&(o=stringify(e.query));var s=e.search||o&&"?"+o||"";return r&&":"!==r.substr(-1)&&(r+=":"),e.slashes||(!r||slashedProtocol[r])&&!1!==a?(a="//"+(a||""),n&&"/"!==n.charAt(0)&&(n="/"+n)):a||(a=""),i&&"#"!==i.charAt(0)&&(i="#"+i),s&&"?"!==s.charAt(0)&&(s="?"+s),r+a+(n=n.replace(/[?#]/g,function(e){return encodeURIComponent(e)}))+(s=s.replace("#","%23"))+i}function parseHost(e){var t=e.host,r=portPattern.exec(t);r&&(":"!==(r=r[0])&&(e.port=r.substr(1)),t=t.substr(0,t.length-r.length)),t&&(e.hostname=t)}function request(e,t){"string"==typeof e&&(e=urlParse(e));var r=-1===global$1.location.protocol.search(/^https?:$/)?"http:":"",n=e.protocol||r,i=e.hostname||e.host,a=e.port,o=e.path||"/";i&&-1!==i.indexOf(":")&&(i="["+i+"]"),e.url=(i?n+"//"+i:"")+(a?":"+a:"")+o,e.method=(e.method||"GET").toUpperCase(),e.headers=e.headers||{};var s=new ClientRequest(e);return t&&s.on("response",t),s}function get$2(e,t){var r=request(e,t);return r.end(),r}function Agent(){}Url.prototype.parse=function(e,t,r){return parse$3(this,e,t,r)},Url.prototype.format=function(){return format$1(this)},Url.prototype.resolve=function(e){return this.resolveObject(urlParse(e,!1,!0)).format()},Url.prototype.resolveObject=function(e){if(isString(e)){var t=new Url;t.parse(e,!1,!0),e=t}for(var r,n=new Url,i=Object.keys(this),a=0;a<i.length;a++){var o=i[a];n[o]=this[o]}if(n.hash=e.hash,""===e.href)return n.href=n.format(),n;if(e.slashes&&!e.protocol){for(var s=Object.keys(e),l=0;l<s.length;l++){var u=s[l];"protocol"!==u&&(n[u]=e[u])}return slashedProtocol[n.protocol]&&n.hostname&&!n.pathname&&(n.path=n.pathname="/"),n.href=n.format(),n}if(e.protocol&&e.protocol!==n.protocol){if(!slashedProtocol[e.protocol]){for(var c=Object.keys(e),d=0;d<c.length;d++){var h=c[d];n[h]=e[h]}return n.href=n.format(),n}if(n.protocol=e.protocol,e.host||hostlessProtocol[e.protocol])n.pathname=e.pathname;else{for(r=(e.pathname||"").split("/");r.length&&!(e.host=r.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==r[0]&&r.unshift(""),r.length<2&&r.unshift(""),n.pathname=r.join("/")}if(n.search=e.search,n.query=e.query,n.host=e.host||"",n.auth=e.auth,n.hostname=e.hostname||e.host,n.port=e.port,n.pathname||n.search){var f=n.pathname||"",p=n.search||"";n.path=f+p}return n.slashes=n.slashes||e.slashes,n.href=n.format(),n}var g,m=n.pathname&&"/"===n.pathname.charAt(0),v=e.host||e.pathname&&"/"===e.pathname.charAt(0),y=v||m||n.host&&e.pathname,b=y,_=n.pathname&&n.pathname.split("/")||[],w=n.protocol&&!slashedProtocol[n.protocol];if(r=e.pathname&&e.pathname.split("/")||[],w&&(n.hostname="",n.port=null,n.host&&(""===_[0]?_[0]=n.host:_.unshift(n.host)),n.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===r[0]?r[0]=e.host:r.unshift(e.host)),e.host=null),y=y&&(""===r[0]||""===_[0])),v)n.host=e.host||""===e.host?e.host:n.host,n.hostname=e.hostname||""===e.hostname?e.hostname:n.hostname,n.search=e.search,n.query=e.query,_=r;else if(r.length)_||(_=[]),_.pop(),_=_.concat(r),n.search=e.search,n.query=e.query;else if(!isNullOrUndefined(e.search))return w&&(n.hostname=n.host=_.shift(),(g=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=g.shift(),n.host=n.hostname=g.shift())),n.search=e.search,n.query=e.query,isNull(n.pathname)&&isNull(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.href=n.format(),n;if(!_.length)return n.pathname=null,n.search?n.path="/"+n.search:n.path=null,n.href=n.format(),n;for(var x=_.slice(-1)[0],S=(n.host||e.host||_.length>1)&&("."===x||".."===x)||""===x,k=0,$=_.length;$>=0;$--)"."===(x=_[$])?_.splice($,1):".."===x?(_.splice($,1),k++):k&&(_.splice($,1),k--);if(!y&&!b)for(;k--;k)_.unshift("..");!y||""===_[0]||_[0]&&"/"===_[0].charAt(0)||_.unshift(""),S&&"/"!==_.join("/").substr(-1)&&_.push("");var C=""===_[0]||_[0]&&"/"===_[0].charAt(0);return w&&(n.hostname=n.host=C?"":_.length?_.shift():"",(g=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=g.shift(),n.host=n.hostname=g.shift())),(y=y||n.host&&_.length)&&!C&&_.unshift(""),_.length?n.pathname=_.join("/"):(n.pathname=null,n.path=null),isNull(n.pathname)&&isNull(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.auth=e.auth||n.auth,n.slashes=n.slashes||e.slashes,n.href=n.format(),n},Url.prototype.parseHost=function(){return parseHost(this)},Agent.defaultMaxSockets=4;var METHODS=["CHECKOUT","CONNECT","COPY","DELETE","GET","HEAD","LOCK","M-SEARCH","MERGE","MKACTIVITY","MKCOL","MOVE","NOTIFY","OPTIONS","PATCH","POST","PROPFIND","PROPPATCH","PURGE","PUT","REPORT","SEARCH","SUBSCRIBE","TRACE","UNLOCK","UNSUBSCRIBE"],STATUS_CODES={100:"Continue",101:"Switching Protocols",102:"Processing",200:"OK",201:"Created",202:"Accepted",203:"Non-Authoritative Information",204:"No Content",205:"Reset Content",206:"Partial Content",207:"Multi-Status",300:"Multiple Choices",301:"Moved Permanently",302:"Moved Temporarily",303:"See Other",304:"Not Modified",305:"Use Proxy",307:"Temporary Redirect",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Time-out",409:"Conflict",410:"Gone",411:"Length Required",412:"Precondition Failed",413:"Request Entity Too Large",414:"Request-URI Too Large",415:"Unsupported Media Type",416:"Requested Range Not Satisfiable",417:"Expectation Failed",418:"I'm a teapot",422:"Unprocessable Entity",423:"Locked",424:"Failed Dependency",425:"Unordered Collection",426:"Upgrade Required",428:"Precondition Required",429:"Too Many Requests",431:"Request Header Fields Too Large",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Gateway Time-out",505:"HTTP Version Not Supported",506:"Variant Also Negotiates",507:"Insufficient Storage",509:"Bandwidth Limit Exceeded",510:"Not Extended",511:"Network Authentication Required"},https={request:request,get:get$2,Agent:Agent,METHODS:METHODS,STATUS_CODES:STATUS_CODES},geojson=createCommonjsModule(function(e){!function(e){function t(){var e=1<=arguments.length?[].slice.call(arguments,0):[],t=e.shift(),r=e.shift();Error.apply(this,e),this.message=this.message||"Invalid Geometry: item: "+JSON.stringify(t)+", params: "+JSON.stringify(r)}e.version="0.5.0",e.defaults={doThrows:{invalidGeometry:!1}},t.prototype=Error,e.errors={InvalidGeometryError:t},e.isGeometryValid=function(e){return!(!e||!Object.keys(e).length)&&(!!e.type&&!!e.coordinates&&Array.isArray(e.coordinates)&&!!e.coordinates.length)},e.parse=function(e,t,o){var s,l,u=function(e,t){var r=e||{};for(var n in t)t.hasOwnProperty(n)&&!r[n]&&(r[n]=t[n]);return r}(t,this.defaults);if(n.length=0,function(e){for(var t in e.geom={},e)e.hasOwnProperty(t)&&-1!==r.indexOf(t)&&(e.geom[t]=e[t],delete e[t]);!function(e){for(var t in e)e.hasOwnProperty(t)&&("string"==typeof e[t]?n.push(e[t]):"object"===_typeof(e[t])&&(n.push(e[t][0]),n.push(e[t][1])));if(0===n.length)throw new Error("No geometry attributes specified")}(e.geom)}(u),l=function(e){var t;e.exclude||e.include?e.include?t=function(t){e.include.forEach(function(e){t[e]=this[e]},this)}:e.exclude&&(t=function(t){for(var r in this)this.hasOwnProperty(r)&&-1===n.indexOf(r)&&-1===e.exclude.indexOf(r)&&(t[r]=this[r])}):t=function(e){for(var t in this)this.hasOwnProperty(t)&&-1===n.indexOf(t)&&(e[t]=this[t])};return function(){var r={};return t.call(this,r),e.extra&&function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])}(r,e.extra),r}}(u),Array.isArray(e)?(s={type:"FeatureCollection",features:[]},e.forEach(function(e){s.features.push(a({item:e,params:u,propFunc:l}))}),i(s,u)):i(s=a({item:e,params:u,propFunc:l}),u),!o||"function"!=typeof o)return s;o(s)};var r=["Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon","GeoJSON"],n=[];function i(e,t){if(t.crs&&function(e){if("name"===e.type){if(e.properties&&e.properties.name)return!0;throw new Error('Invalid CRS. Properties must contain "name" key')}if("link"===e.type){if(e.properties&&e.properties.href&&e.properties.type)return!0;throw new Error('Invalid CRS. Properties must contain "href" and "type" key')}throw new Error('Invald CRS. Type attribute must be "name" or "link"')}(t.crs)&&(t.isPostgres?e.geometry.crs=t.crs:e.crs=t.crs),t.bbox&&(e.bbox=t.bbox),t.extraGlobal)for(var r in e.properties={},t.extraGlobal)e.properties[r]=t.extraGlobal[r]}function a(r){var n=r.item,i=r.params,a=r.propFunc,s={type:"Feature"};return s.geometry=function r(n,i){var a={};for(var s in i.geom){var l=i.geom[s];if("string"==typeof l&&n.hasOwnProperty(l))"GeoJSON"===s?a=n[l]:(a.type=s,a.coordinates=n[l]);else if("object"!==(void 0===l?"undefined":_typeof(l))||Array.isArray(l)){if(Array.isArray(l)&&n.hasOwnProperty(l[0])&&n.hasOwnProperty(l[1]))a.type=s,a.coordinates=[Number(n[l[1]]),Number(n[l[0]])];else if(Array.isArray(l)&&o(l[0])&&o(l[1])){for(var u=[],c=0;c<l.length;c++){for(var d=l[c].split("."),h=n,f=0;f<d.length;f++){if(!h.hasOwnProperty(d[f]))return!1;h=h[d[f]]}u[c]=h}a.type=s,a.coordinates=[Number(u[1]),Number(u[0])]}}else{var p=Object.keys(l).map(function(e){var t=l[e],i=n[e];return r(i,{geom:{Point:t}})});a.type=s,a.coordinates=[].concat(p.map(function(e){return e.coordinates}))}}if(i.doThrows&&i.doThrows.invalidGeometry&&!e.isGeometryValid(a))throw new t(n,i);return a}(n,i),s.properties=a.call(n),s}function o(e){return/^.+\..+$/.test(e)}}(e.exports)}),RADIUS=6378137,FLATTENING=1/298.257223563,POLAR_RADIUS=6356752.3142,wgs84={RADIUS:RADIUS,FLATTENING:FLATTENING,POLAR_RADIUS:POLAR_RADIUS},geometry_1=geometry,ring=ringArea;function geometry(e){var t,r=0;switch(e.type){case"Polygon":return polygonArea(e.coordinates);case"MultiPolygon":for(t=0;t<e.coordinates.length;t++)r+=polygonArea(e.coordinates[t]);return r;case"Point":case"MultiPoint":case"LineString":case"MultiLineString":return 0;case"GeometryCollection":for(t=0;t<e.geometries.length;t++)r+=geometry(e.geometries[t]);return r}}function polygonArea(e){var t=0;if(e&&e.length>0){t+=Math.abs(ringArea(e[0]));for(var r=1;r<e.length;r++)t-=Math.abs(ringArea(e[r]))}return t}function ringArea(e){var t,r,n,i,a,o,s=0,l=e.length;if(l>2){for(o=0;o<l;o++)o===l-2?(n=l-2,i=l-1,a=0):o===l-1?(n=l-1,i=0,a=1):(n=o,i=o+1,a=o+2),t=e[n],r=e[i],s+=(rad(e[a][0])-rad(t[0]))*Math.sin(rad(r[1]));s=s*wgs84.RADIUS*wgs84.RADIUS/2}return s}function rad(e){return e*Math.PI/180}var geojsonArea={geometry:geometry_1,ring:ring},geojsonRewind=rewind;function rewind(e,t){switch(e&&e.type||null){case"FeatureCollection":return e.features=e.features.map(curryOuter(rewind,t)),e;case"Feature":return e.geometry=rewind(e.geometry,t),e;case"Polygon":case"MultiPolygon":return correct(e,t);default:return e}}function curryOuter(e,t){return function(r){return e(r,t)}}function correct(e,t){return"Polygon"===e.type?e.coordinates=correctRings(e.coordinates,t):"MultiPolygon"===e.type&&(e.coordinates=e.coordinates.map(curryOuter(correctRings,t))),e}function correctRings(e,t){t=!!t,e[0]=wind(e[0],t);for(var r=1;r<e.length;r++)e[r]=wind(e[r],!t);return e}function wind(e,t){return cw(e)===t?e:e.reverse()}function cw(e){return geojsonArea.ring(e)>=0}var Map$1=function(e,t){void 0===e&&(e={}),void 0===t&&(t={}),this.data=t,this.settings=e,this.init()};Map$1.prototype.init=function(){Vue.component("nyco-map",MapComponent),new Vue({el:'[data-js="map"]',delimiters:["v{","}"],data:function(){return{data:MapData.data}},created:function(){this.getZipcodeData(),this.getBoroughData(),this.getNeighborhoodData()},methods:{getZipcodeData:function(){https.get("https://cdn.jsdelivr.net/gh/kimpenguin/geoJSON@master/tiger-zcta.geojson",function(e){var t="";e.on("data",function(e){t+=e}),e.on("end",function(){t=JSON.parse(t),MapData.data.zipcodes=t})}).on("error",function(e){MapData.data.zipcodes={error:!0,message:e.message}})},getBoroughData:function(){var e=this;https.get("https://data.cityofnewyork.us/resource/7t3b-ywvw.json",function(t){var r="";t.on("data",function(e){r+=e}),t.on("end",function(){r=JSON.parse(r),MapData.data.boroughs=e.convertToGeoJSON(r)})}).on("error",function(e){MapData.data.boroughs={error:!0,message:e.message}})},getNeighborhoodData:function(){var e=this;https.get("https://data.cityofnewyork.us/resource/q2z5-ai38.json",function(t){var r="";t.on("data",function(e){r+=e}),t.on("end",function(){r=JSON.parse(r),MapData.data.neighborhoods=e.convertToGeoJSON(r)})}).on("error",function(e){MapData.data.neighborhoods={error:!0,message:e.message}})},convertToGeoJSON:function(e){return geojsonRewind(geojson.parse(e,{GeoJSON:"the_geom"}))}}})},Map$1.prototype._constants=function(e){console.dir(e)};var nyco=function(){};nyco.prototype.icons=function(e){return new Icons(e)},nyco.prototype.feed=function(e){return new Feed(e)},nyco.prototype.toggle=function(e){return new Toggle},nyco.prototype.track=function(e){return new Track},nyco.prototype.select=function(){return new Select},nyco.prototype.chart=function(e){return"bar"===e?new ChartBar:"horizontalBar"===e?new ChartHorizontalBar:"line"===e?new ChartLine:"pie"===e?new ChartPie:void 0},nyco.prototype.map=function(){return new Map$1},module.exports=nyco;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
