"use strict";var Utility=function(){return this};Utility.debug=function(){return"1"===Utility.getUrlParameter(Utility.PARAMS.DEBUG)},Utility.getUrlParameter=function(e,t){var r=t||window.location.search,n=e.replace(/[\[]/,"\\[").replace(/[\]]/,"\\]"),i=new RegExp("[\\?&]"+n+"=([^&#]*)").exec(r);return null===i?"":decodeURIComponent(i[1].replace(/\+/g," "))},Utility.localize=function(e){var t=e||"",r=(window.LOCALIZED_STRINGS||[]).filter(function(t){return!(!t.hasOwnProperty("slug")||t.slug!==e)&&t});return r[0]&&r[0].hasOwnProperty("label")?r[0].label:t},Utility.PARAMS={DEBUG:"debug"},Utility.SELECTORS={parseMarkdown:'[data-js="markdown"]'};var Icons=function e(t){return t=t||e.path,fetch(t).then(function(e){if(e.ok)return e.text();Utility.debug()&&console.dir(e)}).catch(function(e){Utility.debug()&&console.dir(e)}).then(function(e){var t=document.createElement("div");t.innerHTML=e,t.setAttribute("aria-hidden",!0),t.setAttribute("style","display: none;"),document.body.appendChild(t)}),this};Icons.path="icons.svg";var global$1="undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},freeGlobal="object"==(void 0===global$1?"undefined":_typeof(global$1))&&global$1&&global$1.Object===Object&&global$1,freeSelf="object"==("undefined"==typeof self?"undefined":_typeof(self))&&self&&self.Object===Object&&self,root=freeGlobal||freeSelf||Function("return this")(),_Symbol=root.Symbol,objectProto=Object.prototype,hasOwnProperty=objectProto.hasOwnProperty,nativeObjectToString=objectProto.toString,symToStringTag=_Symbol?_Symbol.toStringTag:void 0;function getRawTag(e){var t=hasOwnProperty.call(e,symToStringTag),r=e[symToStringTag];try{e[symToStringTag]=void 0;var n=!0}catch(e){}var i=nativeObjectToString.call(e);return n&&(t?e[symToStringTag]=r:delete e[symToStringTag]),i}var objectProto$1=Object.prototype,nativeObjectToString$1=objectProto$1.toString;function objectToString(e){return nativeObjectToString$1.call(e)}var nullTag="[object Null]",undefinedTag="[object Undefined]",symToStringTag$1=_Symbol?_Symbol.toStringTag:void 0;function baseGetTag(e){return null==e?void 0===e?undefinedTag:nullTag:symToStringTag$1&&symToStringTag$1 in Object(e)?getRawTag(e):objectToString(e)}function isObject(e){var t=void 0===e?"undefined":_typeof(e);return null!=e&&("object"==t||"function"==t)}var asyncTag="[object AsyncFunction]",funcTag="[object Function]",genTag="[object GeneratorFunction]",proxyTag="[object Proxy]";function isFunction(e){if(!isObject(e))return!1;var t=baseGetTag(e);return t==funcTag||t==genTag||t==asyncTag||t==proxyTag}var coreJsData=root["__core-js_shared__"],maskSrcKey=function(){var e=/[^.]+$/.exec(coreJsData&&coreJsData.keys&&coreJsData.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}();function isMasked(e){return!!maskSrcKey&&maskSrcKey in e}var funcProto=Function.prototype,funcToString=funcProto.toString;function toSource(e){if(null!=e){try{return funcToString.call(e)}catch(e){}try{return e+""}catch(e){}}return""}var reRegExpChar=/[\\^$.*+?()[\]{}|]/g,reIsHostCtor=/^\[object .+?Constructor\]$/,funcProto$1=Function.prototype,objectProto$2=Object.prototype,funcToString$1=funcProto$1.toString,hasOwnProperty$1=objectProto$2.hasOwnProperty,reIsNative=RegExp("^"+funcToString$1.call(hasOwnProperty$1).replace(reRegExpChar,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");function baseIsNative(e){return!(!isObject(e)||isMasked(e))&&(isFunction(e)?reIsNative:reIsHostCtor).test(toSource(e))}function getValue(e,t){return null==e?void 0:e[t]}function getNative(e,t){var r=getValue(e,t);return baseIsNative(r)?r:void 0}var defineProperty$1=function(){try{var e=getNative(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();function baseAssignValue(e,t,r){"__proto__"==t&&defineProperty$1?defineProperty$1(e,t,{configurable:!0,enumerable:!0,value:r,writable:!0}):e[t]=r}function eq(e,t){return e===t||e!=e&&t!=t}var objectProto$3=Object.prototype,hasOwnProperty$2=objectProto$3.hasOwnProperty;function assignValue(e,t,r){var n=e[t];hasOwnProperty$2.call(e,t)&&eq(n,r)&&(void 0!==r||t in e)||baseAssignValue(e,t,r)}function copyObject(e,t,r,n){var i=!r;r||(r={});for(var a=-1,o=t.length;++a<o;){var s=t[a],l=n?n(r[s],e[s],s,r,e):void 0;void 0===l&&(l=e[s]),i?baseAssignValue(r,s,l):assignValue(r,s,l)}return r}function identity(e){return e}function apply(e,t,r){switch(r.length){case 0:return e.call(t);case 1:return e.call(t,r[0]);case 2:return e.call(t,r[0],r[1]);case 3:return e.call(t,r[0],r[1],r[2])}return e.apply(t,r)}var nativeMax=Math.max;function overRest(e,t,r){return t=nativeMax(void 0===t?e.length-1:t,0),function(){for(var n=arguments,i=-1,a=nativeMax(n.length-t,0),o=Array(a);++i<a;)o[i]=n[t+i];i=-1;for(var s=Array(t+1);++i<t;)s[i]=n[i];return s[t]=r(o),apply(e,this,s)}}function constant(e){return function(){return e}}var baseSetToString=defineProperty$1?function(e,t){return defineProperty$1(e,"toString",{configurable:!0,enumerable:!1,value:constant(t),writable:!0})}:identity,HOT_COUNT=800,HOT_SPAN=16,nativeNow=Date.now;function shortOut(e){var t=0,r=0;return function(){var n=nativeNow(),i=HOT_SPAN-(n-r);if(r=n,i>0){if(++t>=HOT_COUNT)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}var setToString=shortOut(baseSetToString);function baseRest(e,t){return setToString(overRest(e,t,identity),e+"")}var MAX_SAFE_INTEGER=9007199254740991;function isLength(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=MAX_SAFE_INTEGER}function isArrayLike(e){return null!=e&&isLength(e.length)&&!isFunction(e)}var MAX_SAFE_INTEGER$1=9007199254740991,reIsUint=/^(?:0|[1-9]\d*)$/;function isIndex(e,t){var r=void 0===e?"undefined":_typeof(e);return!!(t=null==t?MAX_SAFE_INTEGER$1:t)&&("number"==r||"symbol"!=r&&reIsUint.test(e))&&e>-1&&e%1==0&&e<t}function isIterateeCall(e,t,r){if(!isObject(r))return!1;var n=void 0===t?"undefined":_typeof(t);return!!("number"==n?isArrayLike(r)&&isIndex(t,r.length):"string"==n&&t in r)&&eq(r[t],e)}function createAssigner(e){return baseRest(function(t,r){var n=-1,i=r.length,a=i>1?r[i-1]:void 0,o=i>2?r[2]:void 0;for(a=e.length>3&&"function"==typeof a?(i--,a):void 0,o&&isIterateeCall(r[0],r[1],o)&&(a=i<3?void 0:a,i=1),t=Object(t);++n<i;){var s=r[n];s&&e(t,s,n,a)}return t})}function baseTimes(e,t){for(var r=-1,n=Array(e);++r<e;)n[r]=t(r);return n}function isObjectLike(e){return null!=e&&"object"==(void 0===e?"undefined":_typeof(e))}var argsTag="[object Arguments]";function baseIsArguments(e){return isObjectLike(e)&&baseGetTag(e)==argsTag}var objectProto$4=Object.prototype,hasOwnProperty$3=objectProto$4.hasOwnProperty,propertyIsEnumerable=objectProto$4.propertyIsEnumerable,isArguments=baseIsArguments(function(){return arguments}())?baseIsArguments:function(e){return isObjectLike(e)&&hasOwnProperty$3.call(e,"callee")&&!propertyIsEnumerable.call(e,"callee")},isArray=Array.isArray;function stubFalse(){return!1}var freeExports="object"==("undefined"==typeof exports?"undefined":_typeof(exports))&&exports&&!exports.nodeType&&exports,freeModule=freeExports&&"object"==("undefined"==typeof module?"undefined":_typeof(module))&&module&&!module.nodeType&&module,moduleExports=freeModule&&freeModule.exports===freeExports,Buffer=moduleExports?root.Buffer:void 0,nativeIsBuffer=Buffer?Buffer.isBuffer:void 0,isBuffer=nativeIsBuffer||stubFalse,argsTag$1="[object Arguments]",arrayTag="[object Array]",boolTag="[object Boolean]",dateTag="[object Date]",errorTag="[object Error]",funcTag$1="[object Function]",mapTag="[object Map]",numberTag="[object Number]",objectTag="[object Object]",regexpTag="[object RegExp]",setTag="[object Set]",stringTag="[object String]",weakMapTag="[object WeakMap]",arrayBufferTag="[object ArrayBuffer]",dataViewTag="[object DataView]",float32Tag="[object Float32Array]",float64Tag="[object Float64Array]",int8Tag="[object Int8Array]",int16Tag="[object Int16Array]",int32Tag="[object Int32Array]",uint8Tag="[object Uint8Array]",uint8ClampedTag="[object Uint8ClampedArray]",uint16Tag="[object Uint16Array]",uint32Tag="[object Uint32Array]",typedArrayTags={};function baseIsTypedArray(e){return isObjectLike(e)&&isLength(e.length)&&!!typedArrayTags[baseGetTag(e)]}function baseUnary(e){return function(t){return e(t)}}typedArrayTags[float32Tag]=typedArrayTags[float64Tag]=typedArrayTags[int8Tag]=typedArrayTags[int16Tag]=typedArrayTags[int32Tag]=typedArrayTags[uint8Tag]=typedArrayTags[uint8ClampedTag]=typedArrayTags[uint16Tag]=typedArrayTags[uint32Tag]=!0,typedArrayTags[argsTag$1]=typedArrayTags[arrayTag]=typedArrayTags[arrayBufferTag]=typedArrayTags[boolTag]=typedArrayTags[dataViewTag]=typedArrayTags[dateTag]=typedArrayTags[errorTag]=typedArrayTags[funcTag$1]=typedArrayTags[mapTag]=typedArrayTags[numberTag]=typedArrayTags[objectTag]=typedArrayTags[regexpTag]=typedArrayTags[setTag]=typedArrayTags[stringTag]=typedArrayTags[weakMapTag]=!1;var freeExports$1="object"==("undefined"==typeof exports?"undefined":_typeof(exports))&&exports&&!exports.nodeType&&exports,freeModule$1=freeExports$1&&"object"==("undefined"==typeof module?"undefined":_typeof(module))&&module&&!module.nodeType&&module,moduleExports$1=freeModule$1&&freeModule$1.exports===freeExports$1,freeProcess=moduleExports$1&&freeGlobal.process,nodeUtil=function(){try{var e=freeModule$1&&freeModule$1.require&&freeModule$1.require("util").types;return e||freeProcess&&freeProcess.binding&&freeProcess.binding("util")}catch(e){}}(),nodeIsTypedArray=nodeUtil&&nodeUtil.isTypedArray,isTypedArray=nodeIsTypedArray?baseUnary(nodeIsTypedArray):baseIsTypedArray,objectProto$5=Object.prototype,hasOwnProperty$4=objectProto$5.hasOwnProperty;function arrayLikeKeys(e,t){var r=isArray(e),n=!r&&isArguments(e),i=!r&&!n&&isBuffer(e),a=!r&&!n&&!i&&isTypedArray(e),o=r||n||i||a,s=o?baseTimes(e.length,String):[],l=s.length;for(var u in e)!t&&!hasOwnProperty$4.call(e,u)||o&&("length"==u||i&&("offset"==u||"parent"==u)||a&&("buffer"==u||"byteLength"==u||"byteOffset"==u)||isIndex(u,l))||s.push(u);return s}var objectProto$6=Object.prototype;function isPrototype(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||objectProto$6)}function nativeKeysIn(e){var t=[];if(null!=e)for(var r in Object(e))t.push(r);return t}var objectProto$7=Object.prototype,hasOwnProperty$5=objectProto$7.hasOwnProperty;function baseKeysIn(e){if(!isObject(e))return nativeKeysIn(e);var t=isPrototype(e),r=[];for(var n in e)("constructor"!=n||!t&&hasOwnProperty$5.call(e,n))&&r.push(n);return r}function keysIn(e){return isArrayLike(e)?arrayLikeKeys(e,!0):baseKeysIn(e)}var assignInWith=createAssigner(function(e,t,r,n){copyObject(t,keysIn(t),e,n)});function overArg(e,t){return function(r){return e(t(r))}}var getPrototype=overArg(Object.getPrototypeOf,Object),objectTag$1="[object Object]",funcProto$2=Function.prototype,objectProto$8=Object.prototype,funcToString$2=funcProto$2.toString,hasOwnProperty$6=objectProto$8.hasOwnProperty,objectCtorString=funcToString$2.call(Object);function isPlainObject(e){if(!isObjectLike(e)||baseGetTag(e)!=objectTag$1)return!1;var t=getPrototype(e);if(null===t)return!0;var r=hasOwnProperty$6.call(t,"constructor")&&t.constructor;return"function"==typeof r&&r instanceof r&&funcToString$2.call(r)==objectCtorString}var domExcTag="[object DOMException]",errorTag$1="[object Error]";function isError(e){if(!isObjectLike(e))return!1;var t=baseGetTag(e);return t==errorTag$1||t==domExcTag||"string"==typeof e.message&&"string"==typeof e.name&&!isPlainObject(e)}var attempt=baseRest(function(e,t){try{return apply(e,void 0,t)}catch(e){return isError(e)?e:new Error(e)}});function arrayMap(e,t){for(var r=-1,n=null==e?0:e.length,i=Array(n);++r<n;)i[r]=t(e[r],r,e);return i}function baseValues(e,t){return arrayMap(t,function(t){return e[t]})}var objectProto$9=Object.prototype,hasOwnProperty$7=objectProto$9.hasOwnProperty;function customDefaultsAssignIn(e,t,r,n){return void 0===e||eq(e,objectProto$9[r])&&!hasOwnProperty$7.call(n,r)?t:e}var stringEscapes={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"};function escapeStringChar(e){return"\\"+stringEscapes[e]}var nativeKeys=overArg(Object.keys,Object),objectProto$10=Object.prototype,hasOwnProperty$8=objectProto$10.hasOwnProperty;function baseKeys(e){if(!isPrototype(e))return nativeKeys(e);var t=[];for(var r in Object(e))hasOwnProperty$8.call(e,r)&&"constructor"!=r&&t.push(r);return t}function keys(e){return isArrayLike(e)?arrayLikeKeys(e):baseKeys(e)}var reInterpolate=/<%=([\s\S]+?)%>/g;function basePropertyOf(e){return function(t){return null==e?void 0:e[t]}}var htmlEscapes={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},escapeHtmlChar=basePropertyOf(htmlEscapes),symbolTag="[object Symbol]";function isSymbol(e){return"symbol"==(void 0===e?"undefined":_typeof(e))||isObjectLike(e)&&baseGetTag(e)==symbolTag}var INFINITY=1/0,symbolProto=_Symbol?_Symbol.prototype:void 0,symbolToString=symbolProto?symbolProto.toString:void 0;function baseToString(e){if("string"==typeof e)return e;if(isArray(e))return arrayMap(e,baseToString)+"";if(isSymbol(e))return symbolToString?symbolToString.call(e):"";var t=e+"";return"0"==t&&1/e==-INFINITY?"-0":t}function toString(e){return null==e?"":baseToString(e)}var reUnescapedHtml=/[&<>"']/g,reHasUnescapedHtml=RegExp(reUnescapedHtml.source);function escape$1(e){return(e=toString(e))&&reHasUnescapedHtml.test(e)?e.replace(reUnescapedHtml,escapeHtmlChar):e}var reEscape=/<%-([\s\S]+?)%>/g,reEvaluate=/<%([\s\S]+?)%>/g,templateSettings={escape:reEscape,evaluate:reEvaluate,interpolate:reInterpolate,variable:"",imports:{_:{escape:escape$1}}},reEmptyStringLeading=/\b__p \+= '';/g,reEmptyStringMiddle=/\b(__p \+=) '' \+/g,reEmptyStringTrailing=/(__e\(.*?\)|\b__t\)) \+\n'';/g,reEsTemplate=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,reNoMatch=/($^)/,reUnescapedString=/['\n\r\u2028\u2029\\]/g;function template(e,t,r){var n=templateSettings.imports._.templateSettings||templateSettings;r&&isIterateeCall(e,t,r)&&(t=void 0),e=toString(e),t=assignInWith({},t,n,customDefaultsAssignIn);var i,a,o=assignInWith({},t.imports,n.imports,customDefaultsAssignIn),s=keys(o),l=baseValues(o,s),u=0,c=t.interpolate||reNoMatch,d="__p += '",h=RegExp((t.escape||reNoMatch).source+"|"+c.source+"|"+(c===reInterpolate?reEsTemplate:reNoMatch).source+"|"+(t.evaluate||reNoMatch).source+"|$","g"),f="sourceURL"in t?"//# sourceURL="+t.sourceURL+"\n":"";e.replace(h,function(t,r,n,o,s,l){return n||(n=o),d+=e.slice(u,l).replace(reUnescapedString,escapeStringChar),r&&(i=!0,d+="' +\n__e("+r+") +\n'"),s&&(a=!0,d+="';\n"+s+";\n__p += '"),n&&(d+="' +\n((__t = ("+n+")) == null ? '' : __t) +\n'"),u=l+t.length,t}),d+="';\n";var p=t.variable;p||(d="with (obj) {\n"+d+"\n}\n"),d=(a?d.replace(reEmptyStringLeading,""):d).replace(reEmptyStringMiddle,"$1").replace(reEmptyStringTrailing,"$1;"),d="function("+(p||"obj")+") {\n"+(p?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+d+"return __p\n}";var g=attempt(function(){return Function(s,f+"return "+d).apply(void 0,l)});if(g.source=d,isError(g))throw g;return g}function arrayEach(e,t){for(var r=-1,n=null==e?0:e.length;++r<n&&!1!==t(e[r],r,e););return e}function createBaseFor(e){return function(t,r,n){for(var i=-1,a=Object(t),o=n(t),s=o.length;s--;){var l=o[e?s:++i];if(!1===r(a[l],l,a))break}return t}}var baseFor=createBaseFor();function baseForOwn(e,t){return e&&baseFor(e,t,keys)}function createBaseEach(e,t){return function(r,n){if(null==r)return r;if(!isArrayLike(r))return e(r,n);for(var i=r.length,a=t?i:-1,o=Object(r);(t?a--:++a<i)&&!1!==n(o[a],a,o););return r}}var baseEach=createBaseEach(baseForOwn);function castFunction(e){return"function"==typeof e?e:identity}function forEach(e,t){return(isArray(e)?arrayEach:baseEach)(e,castFunction(t))}function listCacheClear(){this.__data__=[],this.size=0}function assocIndexOf(e,t){for(var r=e.length;r--;)if(eq(e[r][0],t))return r;return-1}var arrayProto=Array.prototype,splice=arrayProto.splice;function listCacheDelete(e){var t=this.__data__,r=assocIndexOf(t,e);return!(r<0)&&(r==t.length-1?t.pop():splice.call(t,r,1),--this.size,!0)}function listCacheGet(e){var t=this.__data__,r=assocIndexOf(t,e);return r<0?void 0:t[r][1]}function listCacheHas(e){return assocIndexOf(this.__data__,e)>-1}function listCacheSet(e,t){var r=this.__data__,n=assocIndexOf(r,e);return n<0?(++this.size,r.push([e,t])):r[n][1]=t,this}function ListCache(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}function stackClear(){this.__data__=new ListCache,this.size=0}function stackDelete(e){var t=this.__data__,r=t.delete(e);return this.size=t.size,r}function stackGet(e){return this.__data__.get(e)}function stackHas(e){return this.__data__.has(e)}ListCache.prototype.clear=listCacheClear,ListCache.prototype.delete=listCacheDelete,ListCache.prototype.get=listCacheGet,ListCache.prototype.has=listCacheHas,ListCache.prototype.set=listCacheSet;var Map=getNative(root,"Map"),nativeCreate=getNative(Object,"create");function hashClear(){this.__data__=nativeCreate?nativeCreate(null):{},this.size=0}function hashDelete(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}var HASH_UNDEFINED="__lodash_hash_undefined__",objectProto$11=Object.prototype,hasOwnProperty$9=objectProto$11.hasOwnProperty;function hashGet(e){var t=this.__data__;if(nativeCreate){var r=t[e];return r===HASH_UNDEFINED?void 0:r}return hasOwnProperty$9.call(t,e)?t[e]:void 0}var objectProto$12=Object.prototype,hasOwnProperty$10=objectProto$12.hasOwnProperty;function hashHas(e){var t=this.__data__;return nativeCreate?void 0!==t[e]:hasOwnProperty$10.call(t,e)}var HASH_UNDEFINED$1="__lodash_hash_undefined__";function hashSet(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=nativeCreate&&void 0===t?HASH_UNDEFINED$1:t,this}function Hash(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}function mapCacheClear(){this.size=0,this.__data__={hash:new Hash,map:new(Map||ListCache),string:new Hash}}function isKeyable(e){var t=void 0===e?"undefined":_typeof(e);return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}function getMapData(e,t){var r=e.__data__;return isKeyable(t)?r["string"==typeof t?"string":"hash"]:r.map}function mapCacheDelete(e){var t=getMapData(this,e).delete(e);return this.size-=t?1:0,t}function mapCacheGet(e){return getMapData(this,e).get(e)}function mapCacheHas(e){return getMapData(this,e).has(e)}function mapCacheSet(e,t){var r=getMapData(this,e),n=r.size;return r.set(e,t),this.size+=r.size==n?0:1,this}function MapCache(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var n=e[t];this.set(n[0],n[1])}}Hash.prototype.clear=hashClear,Hash.prototype.delete=hashDelete,Hash.prototype.get=hashGet,Hash.prototype.has=hashHas,Hash.prototype.set=hashSet,MapCache.prototype.clear=mapCacheClear,MapCache.prototype.delete=mapCacheDelete,MapCache.prototype.get=mapCacheGet,MapCache.prototype.has=mapCacheHas,MapCache.prototype.set=mapCacheSet;var LARGE_ARRAY_SIZE=200;function stackSet(e,t){var r=this.__data__;if(r instanceof ListCache){var n=r.__data__;if(!Map||n.length<LARGE_ARRAY_SIZE-1)return n.push([e,t]),this.size=++r.size,this;r=this.__data__=new MapCache(n)}return r.set(e,t),this.size=r.size,this}function Stack(e){var t=this.__data__=new ListCache(e);this.size=t.size}function assignMergeValue(e,t,r){(void 0===r||eq(e[t],r))&&(void 0!==r||t in e)||baseAssignValue(e,t,r)}Stack.prototype.clear=stackClear,Stack.prototype.delete=stackDelete,Stack.prototype.get=stackGet,Stack.prototype.has=stackHas,Stack.prototype.set=stackSet;var freeExports$2="object"==("undefined"==typeof exports?"undefined":_typeof(exports))&&exports&&!exports.nodeType&&exports,freeModule$2=freeExports$2&&"object"==("undefined"==typeof module?"undefined":_typeof(module))&&module&&!module.nodeType&&module,moduleExports$2=freeModule$2&&freeModule$2.exports===freeExports$2,Buffer$1=moduleExports$2?root.Buffer:void 0,allocUnsafe=Buffer$1?Buffer$1.allocUnsafe:void 0;function cloneBuffer(e,t){if(t)return e.slice();var r=e.length,n=allocUnsafe?allocUnsafe(r):new e.constructor(r);return e.copy(n),n}var Uint8Array$1=root.Uint8Array;function cloneArrayBuffer(e){var t=new e.constructor(e.byteLength);return new Uint8Array$1(t).set(new Uint8Array$1(e)),t}function cloneTypedArray(e,t){var r=t?cloneArrayBuffer(e.buffer):e.buffer;return new e.constructor(r,e.byteOffset,e.length)}function copyArray(e,t){var r=-1,n=e.length;for(t||(t=Array(n));++r<n;)t[r]=e[r];return t}var objectCreate=Object.create,baseCreate=function(){function e(){}return function(t){if(!isObject(t))return{};if(objectCreate)return objectCreate(t);e.prototype=t;var r=new e;return e.prototype=void 0,r}}();function initCloneObject(e){return"function"!=typeof e.constructor||isPrototype(e)?{}:baseCreate(getPrototype(e))}function isArrayLikeObject(e){return isObjectLike(e)&&isArrayLike(e)}function safeGet(e,t){if("__proto__"!=t)return e[t]}function toPlainObject(e){return copyObject(e,keysIn(e))}function baseMergeDeep(e,t,r,n,i,a,o){var s=safeGet(e,r),l=safeGet(t,r),u=o.get(l);if(u)assignMergeValue(e,r,u);else{var c=a?a(s,l,r+"",e,t,o):void 0,d=void 0===c;if(d){var h=isArray(l),f=!h&&isBuffer(l),p=!h&&!f&&isTypedArray(l);c=l,h||f||p?isArray(s)?c=s:isArrayLikeObject(s)?c=copyArray(s):f?(d=!1,c=cloneBuffer(l,!0)):p?(d=!1,c=cloneTypedArray(l,!0)):c=[]:isPlainObject(l)||isArguments(l)?(c=s,isArguments(s)?c=toPlainObject(s):isObject(s)&&!isFunction(s)||(c=initCloneObject(l))):d=!1}d&&(o.set(l,c),i(c,l,n,a,o),o.delete(l)),assignMergeValue(e,r,c)}}function baseMerge(e,t,r,n,i){e!==t&&baseFor(t,function(a,o){if(isObject(a))i||(i=new Stack),baseMergeDeep(e,t,o,r,baseMerge,n,i);else{var s=n?n(safeGet(e,o),a,o+"",e,t,i):void 0;void 0===s&&(s=a),assignMergeValue(e,o,s)}},keysIn)}var merge=createAssigner(function(e,t,r){baseMerge(e,t,r)});function values(e){return null==e?[]:baseValues(e,keys(e))}var HASH_UNDEFINED$2="__lodash_hash_undefined__";function setCacheAdd(e){return this.__data__.set(e,HASH_UNDEFINED$2),this}function setCacheHas(e){return this.__data__.has(e)}function SetCache(e){var t=-1,r=null==e?0:e.length;for(this.__data__=new MapCache;++t<r;)this.add(e[t])}function arraySome(e,t){for(var r=-1,n=null==e?0:e.length;++r<n;)if(t(e[r],r,e))return!0;return!1}function cacheHas(e,t){return e.has(t)}SetCache.prototype.add=SetCache.prototype.push=setCacheAdd,SetCache.prototype.has=setCacheHas;var COMPARE_PARTIAL_FLAG=1,COMPARE_UNORDERED_FLAG=2;function equalArrays(e,t,r,n,i,a){var o=r&COMPARE_PARTIAL_FLAG,s=e.length,l=t.length;if(s!=l&&!(o&&l>s))return!1;var u=a.get(e);if(u&&a.get(t))return u==t;var c=-1,d=!0,h=r&COMPARE_UNORDERED_FLAG?new SetCache:void 0;for(a.set(e,t),a.set(t,e);++c<s;){var f=e[c],p=t[c];if(n)var g=o?n(p,f,c,t,e,a):n(f,p,c,e,t,a);if(void 0!==g){if(g)continue;d=!1;break}if(h){if(!arraySome(t,function(e,t){if(!cacheHas(h,t)&&(f===e||i(f,e,r,n,a)))return h.push(t)})){d=!1;break}}else if(f!==p&&!i(f,p,r,n,a)){d=!1;break}}return a.delete(e),a.delete(t),d}function mapToArray(e){var t=-1,r=Array(e.size);return e.forEach(function(e,n){r[++t]=[n,e]}),r}function setToArray(e){var t=-1,r=Array(e.size);return e.forEach(function(e){r[++t]=e}),r}var COMPARE_PARTIAL_FLAG$1=1,COMPARE_UNORDERED_FLAG$1=2,boolTag$1="[object Boolean]",dateTag$1="[object Date]",errorTag$2="[object Error]",mapTag$1="[object Map]",numberTag$1="[object Number]",regexpTag$1="[object RegExp]",setTag$1="[object Set]",stringTag$1="[object String]",symbolTag$1="[object Symbol]",arrayBufferTag$1="[object ArrayBuffer]",dataViewTag$1="[object DataView]",symbolProto$1=_Symbol?_Symbol.prototype:void 0,symbolValueOf=symbolProto$1?symbolProto$1.valueOf:void 0;function equalByTag(e,t,r,n,i,a,o){switch(r){case dataViewTag$1:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case arrayBufferTag$1:return!(e.byteLength!=t.byteLength||!a(new Uint8Array$1(e),new Uint8Array$1(t)));case boolTag$1:case dateTag$1:case numberTag$1:return eq(+e,+t);case errorTag$2:return e.name==t.name&&e.message==t.message;case regexpTag$1:case stringTag$1:return e==t+"";case mapTag$1:var s=mapToArray;case setTag$1:var l=n&COMPARE_PARTIAL_FLAG$1;if(s||(s=setToArray),e.size!=t.size&&!l)return!1;var u=o.get(e);if(u)return u==t;n|=COMPARE_UNORDERED_FLAG$1,o.set(e,t);var c=equalArrays(s(e),s(t),n,i,a,o);return o.delete(e),c;case symbolTag$1:if(symbolValueOf)return symbolValueOf.call(e)==symbolValueOf.call(t)}return!1}function arrayPush(e,t){for(var r=-1,n=t.length,i=e.length;++r<n;)e[i+r]=t[r];return e}function baseGetAllKeys(e,t,r){var n=t(e);return isArray(e)?n:arrayPush(n,r(e))}function arrayFilter(e,t){for(var r=-1,n=null==e?0:e.length,i=0,a=[];++r<n;){var o=e[r];t(o,r,e)&&(a[i++]=o)}return a}function stubArray(){return[]}var objectProto$13=Object.prototype,propertyIsEnumerable$1=objectProto$13.propertyIsEnumerable,nativeGetSymbols=Object.getOwnPropertySymbols,getSymbols=nativeGetSymbols?function(e){return null==e?[]:(e=Object(e),arrayFilter(nativeGetSymbols(e),function(t){return propertyIsEnumerable$1.call(e,t)}))}:stubArray;function getAllKeys(e){return baseGetAllKeys(e,keys,getSymbols)}var COMPARE_PARTIAL_FLAG$2=1,objectProto$14=Object.prototype,hasOwnProperty$11=objectProto$14.hasOwnProperty;function equalObjects(e,t,r,n,i,a){var o=r&COMPARE_PARTIAL_FLAG$2,s=getAllKeys(e),l=s.length;if(l!=getAllKeys(t).length&&!o)return!1;for(var u=l;u--;){var c=s[u];if(!(o?c in t:hasOwnProperty$11.call(t,c)))return!1}var d=a.get(e);if(d&&a.get(t))return d==t;var h=!0;a.set(e,t),a.set(t,e);for(var f=o;++u<l;){var p=e[c=s[u]],g=t[c];if(n)var m=o?n(g,p,c,t,e,a):n(p,g,c,e,t,a);if(!(void 0===m?p===g||i(p,g,r,n,a):m)){h=!1;break}f||(f="constructor"==c)}if(h&&!f){var v=e.constructor,y=t.constructor;v!=y&&"constructor"in e&&"constructor"in t&&!("function"==typeof v&&v instanceof v&&"function"==typeof y&&y instanceof y)&&(h=!1)}return a.delete(e),a.delete(t),h}var DataView=getNative(root,"DataView"),Promise$1=getNative(root,"Promise"),Set$1=getNative(root,"Set"),WeakMap=getNative(root,"WeakMap"),mapTag$2="[object Map]",objectTag$2="[object Object]",promiseTag="[object Promise]",setTag$2="[object Set]",weakMapTag$1="[object WeakMap]",dataViewTag$2="[object DataView]",dataViewCtorString=toSource(DataView),mapCtorString=toSource(Map),promiseCtorString=toSource(Promise$1),setCtorString=toSource(Set$1),weakMapCtorString=toSource(WeakMap),getTag=baseGetTag;(DataView&&getTag(new DataView(new ArrayBuffer(1)))!=dataViewTag$2||Map&&getTag(new Map)!=mapTag$2||Promise$1&&getTag(Promise$1.resolve())!=promiseTag||Set$1&&getTag(new Set$1)!=setTag$2||WeakMap&&getTag(new WeakMap)!=weakMapTag$1)&&(getTag=function(e){var t=baseGetTag(e),r=t==objectTag$2?e.constructor:void 0,n=r?toSource(r):"";if(n)switch(n){case dataViewCtorString:return dataViewTag$2;case mapCtorString:return mapTag$2;case promiseCtorString:return promiseTag;case setCtorString:return setTag$2;case weakMapCtorString:return weakMapTag$1}return t});var getTag$1=getTag,COMPARE_PARTIAL_FLAG$3=1,argsTag$2="[object Arguments]",arrayTag$1="[object Array]",objectTag$3="[object Object]",objectProto$15=Object.prototype,hasOwnProperty$12=objectProto$15.hasOwnProperty;function baseIsEqualDeep(e,t,r,n,i,a){var o=isArray(e),s=isArray(t),l=o?arrayTag$1:getTag$1(e),u=s?arrayTag$1:getTag$1(t),c=(l=l==argsTag$2?objectTag$3:l)==objectTag$3,d=(u=u==argsTag$2?objectTag$3:u)==objectTag$3,h=l==u;if(h&&isBuffer(e)){if(!isBuffer(t))return!1;o=!0,c=!1}if(h&&!c)return a||(a=new Stack),o||isTypedArray(e)?equalArrays(e,t,r,n,i,a):equalByTag(e,t,l,r,n,i,a);if(!(r&COMPARE_PARTIAL_FLAG$3)){var f=c&&hasOwnProperty$12.call(e,"__wrapped__"),p=d&&hasOwnProperty$12.call(t,"__wrapped__");if(f||p){var g=f?e.value():e,m=p?t.value():t;return a||(a=new Stack),i(g,m,r,n,a)}}return!!h&&(a||(a=new Stack),equalObjects(e,t,r,n,i,a))}function baseIsEqual(e,t,r,n,i){return e===t||(null==e||null==t||!isObjectLike(e)&&!isObjectLike(t)?e!=e&&t!=t:baseIsEqualDeep(e,t,r,n,baseIsEqual,i))}var COMPARE_PARTIAL_FLAG$4=1,COMPARE_UNORDERED_FLAG$2=2;function baseIsMatch(e,t,r,n){var i=r.length,a=i,o=!n;if(null==e)return!a;for(e=Object(e);i--;){var s=r[i];if(o&&s[2]?s[1]!==e[s[0]]:!(s[0]in e))return!1}for(;++i<a;){var l=(s=r[i])[0],u=e[l],c=s[1];if(o&&s[2]){if(void 0===u&&!(l in e))return!1}else{var d=new Stack;if(n)var h=n(u,c,l,e,t,d);if(!(void 0===h?baseIsEqual(c,u,COMPARE_PARTIAL_FLAG$4|COMPARE_UNORDERED_FLAG$2,n,d):h))return!1}}return!0}function isStrictComparable(e){return e==e&&!isObject(e)}function getMatchData(e){for(var t=keys(e),r=t.length;r--;){var n=t[r],i=e[n];t[r]=[n,i,isStrictComparable(i)]}return t}function matchesStrictComparable(e,t){return function(r){return null!=r&&(r[e]===t&&(void 0!==t||e in Object(r)))}}function baseMatches(e){var t=getMatchData(e);return 1==t.length&&t[0][2]?matchesStrictComparable(t[0][0],t[0][1]):function(r){return r===e||baseIsMatch(r,e,t)}}var reIsDeepProp=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,reIsPlainProp=/^\w*$/;function isKey(e,t){if(isArray(e))return!1;var r=void 0===e?"undefined":_typeof(e);return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=e&&!isSymbol(e))||(reIsPlainProp.test(e)||!reIsDeepProp.test(e)||null!=t&&e in Object(t))}var FUNC_ERROR_TEXT="Expected a function";function memoize(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError(FUNC_ERROR_TEXT);var r=function r(){var n=arguments,i=t?t.apply(this,n):n[0],a=r.cache;if(a.has(i))return a.get(i);var o=e.apply(this,n);return r.cache=a.set(i,o)||a,o};return r.cache=new(memoize.Cache||MapCache),r}memoize.Cache=MapCache;var MAX_MEMOIZE_SIZE=500;function memoizeCapped(e){var t=memoize(e,function(e){return r.size===MAX_MEMOIZE_SIZE&&r.clear(),e}),r=t.cache;return t}var rePropName=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,reEscapeChar=/\\(\\)?/g,stringToPath=memoizeCapped(function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(rePropName,function(e,r,n,i){t.push(n?i.replace(reEscapeChar,"$1"):r||e)}),t});function castPath(e,t){return isArray(e)?e:isKey(e,t)?[e]:stringToPath(toString(e))}var INFINITY$1=1/0;function toKey(e){if("string"==typeof e||isSymbol(e))return e;var t=e+"";return"0"==t&&1/e==-INFINITY$1?"-0":t}function baseGet(e,t){for(var r=0,n=(t=castPath(t,e)).length;null!=e&&r<n;)e=e[toKey(t[r++])];return r&&r==n?e:void 0}function get$1(e,t,r){var n=null==e?void 0:baseGet(e,t);return void 0===n?r:n}function baseHasIn(e,t){return null!=e&&t in Object(e)}function hasPath(e,t,r){for(var n=-1,i=(t=castPath(t,e)).length,a=!1;++n<i;){var o=toKey(t[n]);if(!(a=null!=e&&r(e,o)))break;e=e[o]}return a||++n!=i?a:!!(i=null==e?0:e.length)&&isLength(i)&&isIndex(o,i)&&(isArray(e)||isArguments(e))}function hasIn(e,t){return null!=e&&hasPath(e,t,baseHasIn)}var COMPARE_PARTIAL_FLAG$5=1,COMPARE_UNORDERED_FLAG$3=2;function baseMatchesProperty(e,t){return isKey(e)&&isStrictComparable(t)?matchesStrictComparable(toKey(e),t):function(r){var n=get$1(r,e);return void 0===n&&n===t?hasIn(r,e):baseIsEqual(t,n,COMPARE_PARTIAL_FLAG$5|COMPARE_UNORDERED_FLAG$3)}}function baseProperty(e){return function(t){return null==t?void 0:t[e]}}function basePropertyDeep(e){return function(t){return baseGet(t,e)}}function property(e){return isKey(e)?baseProperty(toKey(e)):basePropertyDeep(e)}function baseIteratee(e){return"function"==typeof e?e:null==e?identity:"object"==(void 0===e?"undefined":_typeof(e))?isArray(e)?baseMatchesProperty(e[0],e[1]):baseMatches(e):property(e)}function baseMap(e,t){var r=-1,n=isArrayLike(e)?Array(e.length):[];return baseEach(e,function(e,i,a){n[++r]=t(e,i,a)}),n}function baseSortBy(e,t){var r=e.length;for(e.sort(t);r--;)e[r]=e[r].value;return e}function compareAscending(e,t){if(e!==t){var r=void 0!==e,n=null===e,i=e==e,a=isSymbol(e),o=void 0!==t,s=null===t,l=t==t,u=isSymbol(t);if(!s&&!u&&!a&&e>t||a&&o&&l&&!s&&!u||n&&o&&l||!r&&l||!i)return 1;if(!n&&!a&&!u&&e<t||u&&r&&i&&!n&&!a||s&&r&&i||!o&&i||!l)return-1}return 0}function compareMultiple(e,t,r){for(var n=-1,i=e.criteria,a=t.criteria,o=i.length,s=r.length;++n<o;){var l=compareAscending(i[n],a[n]);if(l)return n>=s?l:l*("desc"==r[n]?-1:1)}return e.index-t.index}function baseOrderBy(e,t,r){var n=-1;return t=arrayMap(t.length?t:[identity],baseUnary(baseIteratee)),baseSortBy(baseMap(e,function(e,r,i){return{criteria:arrayMap(t,function(t){return t(e)}),index:++n,value:e}}),function(e,t){return compareMultiple(e,t,r)})}function orderBy(e,t,r,n){return null==e?[]:(isArray(t)||(t=null==t?[]:[t]),isArray(r=n?void 0:r)||(r=null==r?[]:[r]),baseOrderBy(e,t,r))}function noop(){}var INFINITY$2=1/0,createSet=Set$1&&1/setToArray(new Set$1([,-0]))[1]==INFINITY$2?function(e){return new Set$1(e)}:noop,Feed=function e(t){this.default=e.default,this._settings=merge({},e.default,t),this.init()};Feed.prototype.init=function(){var e=this,t=[],r=this._settings.feed,n={rssToJson:Feed.rssToJson,rssUrl:Array.isArray(r)?r:[r]};return forEach(n.rssUrl,function(r,i){e._request(n,r).then(function(r){if(t.push(e._process(JSON.parse(r),e._settings)),t.length===n.rssUrl.length){e._merge(t,e._settings);var i=e._render(e._merge(t,e._settings),e._settings),a=document.querySelector(e._settings.selector);a&&(a.innerHTML=i)}})}),this},Feed.prototype._request=function(e,t){return new Promise(function(r,n){var i=new XMLHttpRequest;i.onreadystatechange=function(e){var t=e.target;4===t.readyState&&(t.status>=200&&t.status<400?r(t.response):n(new Error(t.status)))},i.ontimeout=function(){n(new Error("The Feed request timed out"))},i.open("GET",e.rssToJson+"?rss_url="+t,!0),i.send(),i=null})},Feed.prototype._process=function(e,t){return Feed.process[t.type](e,t)},Feed.prototype._merge=function(e,t){return Feed.merge[t.type](e)},Feed.prototype._render=function(e,t){return e.settings=t,t.log&&console.dir(e),template(values(t.templates).join(""),{imports:{_each:forEach}})(e)},Feed.rssToJson="https://api.rss2json.com/v1/api.json",Feed.templates={medium:{opener:['<section class="o-feed <%- settings.classes.wrapper %>" style="',"<% if (settings.fontSize) { %>font-size: <%- settings.fontSize %>;<% } %>","<% if (settings.postBorderColor) { %>border-color: <%- settings.postBorderColor %>;<% } %>",'">'],header:['<header class="o-feed__header <%- settings.classes.header %>">','<div class="o-feed__avatar <%- settings.classes.avatar %>">','<img src="','<% if (settings.profileImg !== "") { %>',"<%- settings.profileImg %>","<% } else { %>","<%- feed.profileImg %>",'<% } %>" ','width="<%- settings.ratioProfile[0] %>" ','height="<%- settings.ratioProfile[1] %>">',"</div>",'<a class="o-feed__url <%- settings.classes.avatar %>" ','href="<% if (settings.titleUrl !== "") { %>',"<%- settings.titleUrl %>","<% } else { %>","<%- feed.url %>",'<% } %>" ','target="_blank" rel="noopener noreferrer nofollow">','<% if (settings.title !== "") { %>',"<%- settings.title %>","<% } else { %>","<%- feed.title %>","<% } %>","</a>","</header>"],posts:['<div class="o-feed__items" style="',"border-color: <%- settings.postBorderColor %>;",'">',"<% _each(items, function(post) { %>",'<div class="c-feed-item <%- settings.classes.feedItem %>">','<h4 class="c-feed-item__title <%- settings.classes.title %>">','<a class="c-feed-item__link <%- settings.classes.link %>"','href="<%- post.guid %>"','target="_blank"','rel="noopener noreferrer nofollow">',"<%- post.title %>","</a>","</h4>",'<span class="c-feed-item__date <%- settings.classes.date %>" ','title="<%- settings.postDateTitle %>">',"<%- post.date %>","</span>",'<div class="c-feed-item__thumbnail <%- settings.classes.thumbnail %>"','style="',"background-image: url(<%- post.thumbnail %>);",'height: <%- settings.postImgHeight %>;"','aria-hidden="true">','<img style="display: none;" src="<%- post.thumbnail %>" alt="<%- post.title %>">',"</div>",'<p class="c-feed-item__excerpt <%- settings.classes.excerpt %>">',"<%- post.excerpt %><%- settings.postExcerptTrail %>","</p>",'<div class="c-feed-item__footer <%- settings.classes.itemFooter %>">','<a class="c-feed-item__cta <%- settings.classes.cta %>" ','href="<%- post.guid %>" ','target="_blank" ','rel="noopener noreferrer nofollow">',"<%- settings.postCtaText %>","</a>","</div>","</div>","<% }); %>","</div>"],closer:["</section>"]}},Feed.process={medium:function(e,t){var r=t.postExcerptLength;return forEach(e.items,function(e,n){var i,a="";return a=(a=(a=(a=e.description.replace(/<figure.*>.*?<\/figure>/g,"")).replace(/<(.|\n)*?>/g,"")).substr(0,r)).substr(0,Math.min(a.length,a.lastIndexOf(" "))),e.excerpt=a,i=new Date(Date.parse(e.pubDate.replace(" ","T"))).toLocaleDateString(t.postDateLocal,t.postDateFormat),e.date=i,e}),e}},Feed.merge={medium:function(e){var t={},r=[];return e.forEach(function(e){r=r.concat(e.items)}),e.forEach(function(e){t=merge(t,e)}),t.items=orderBy(r,"pubDate","desc"),t}},Feed.default={feed:"",selector:"#js-feed",type:"medium",title:"",titleUrl:"",profileImg:"",fontSize:"",ratioProfile:["50","50"],postBorderColor:"lightsteelblue",postImgHeight:"200px",postExcerptLength:120,postExcerptTrail:"…",postCtaText:"Read the full post",postDateLocal:"en-US",postDateFormat:{year:"numeric",month:"long",day:"numeric"},postDateTitle:"Published Date",classes:{wrapper:"",header:"",url:"",feedItem:"",title:"",link:"",thumbnail:"",excerpt:"",itemFooter:"",cta:"",date:""},templates:{opener:Feed.templates.medium.opener.join(""),header:Feed.templates.medium.header.join(""),posts:Feed.templates.medium.posts.join(""),closer:Feed.templates.medium.closer.join("")},log:!1,unique:!1};var Toggle=function e(t){var r=this,n=document.querySelector("body");return t=t||{},this._settings={selector:t.selector?t.selector:e.selector,namespace:t.namespace?t.namespace:e.namespace,inactiveClass:t.inactiveClass?t.inactiveClass:e.inactiveClass,activeClass:t.activeClass?t.activeClass:e.activeClass},n.addEventListener("click",function(e){e.target.matches(r._settings.selector)&&(e.preventDefault(),r._toggle(e))}),this};Toggle.prototype._toggle=function(e){var t=this,r=e.target,n=!1;if(n=r.getAttribute("href")?document.querySelector(r.getAttribute("href")):n,!(n=r.getAttribute("aria-controls")?document.querySelector("#"+r.getAttribute("aria-controls")):n))return this;if(this.elementToggle(r,n),r.dataset[this._settings.namespace+"Undo"]){var i=document.querySelector(r.dataset[this._settings.namespace+"Undo"]);i.addEventListener("click",function(e){e.preventDefault(),t.elementToggle(r,n),i.removeEventListener("click")})}return this},Toggle.prototype.elementToggle=function(e,t){""!==this._settings.activeClass&&(e.classList.toggle(this._settings.activeClass),t.classList.toggle(this._settings.activeClass)),""!==this._settings.inactiveClass&&t.classList.toggle(this._settings.inactiveClass);for(var r=0;r<Toggle.elAriaRoles.length;r++)e.getAttribute(Toggle.elAriaRoles[r])&&e.setAttribute(Toggle.elAriaRoles[r],!("true"===e.getAttribute(Toggle.elAriaRoles[r])));for(var n=0;n<Toggle.targetAriaRoles.length;n++)t.getAttribute(Toggle.targetAriaRoles[n])&&t.setAttribute(Toggle.targetAriaRoles[n],!("true"===t.getAttribute(Toggle.targetAriaRoles[n])));return e.getAttribute("href")&&t.classList.contains(this._settings.activeClass)&&(window.location.hash="",window.location.hash=e.getAttribute("href")),this},Toggle.selector='[data-js*="toggle"]',Toggle.namespace="toggle",Toggle.inactiveClass="hidden",Toggle.activeClass="active",Toggle.elAriaRoles=["aria-pressed","aria-expanded"],Toggle.targetAriaRoles=["aria-hidden"];var Track=function e(t){var r=this,n=document.querySelector("body");return t=t||{},this._settings={selector:t.selector?t.selector:e.selector},n.addEventListener("click",function(e){if(e.target.matches(r._settings.selector)){var t=e.target.dataset.trackKey,n=JSON.parse(e.target.dataset.trackData);r.click(t,n)}}),this};Track.prototype.click=function(e,t){var r=t.map(function(e){return e.hasOwnProperty(Track.key)&&(e[Track.key]=window.location.pathname+"/"+e[Track.key]),e}),n=this.webtrends(e,r),i=this.gtag(e,r);return Utility.debug()&&console.dir({Track:[n,i]}),r},Track.prototype.view=function(e,t,r){var n=this.webtrends(t,r),i=this.gtagView(e,t);Utility.debug()&&console.dir({Track:[n,i]})},Track.prototype.webtrends=function(e,t){var r=[{"WT.ti":e}];t[0]&&t[0].hasOwnProperty(Track.key)?r.push({"DCS.dcsuri":t[0][Track.key]}):Object.assign(r,t);var n={argsa:r.flatMap(function(e){return Object.keys(e).flatMap(function(t){return[t,e[t]]})})};return"undefined"!=typeof Webtrends&&Webtrends.multiTrack(n),["Webtrends",n]},Track.prototype.gtag=function(e,t){var r=t.find(function(e){return e.hasOwnProperty(Track.key)}),n={event_category:e};return"undefined"!=typeof gtag&&gtag(Track.key,r[Track.key],n),["gtag",Track.key,r[Track.key],n]},Track.prototype.gtagView=function(e,t){var r={app_name:e,screen_name:t};return"undefined"!=typeof gtag&&gtag("event","screen_view",r),["gtag",Track.key,"screen_view",r]},Track.selector='[data-js*="track"]',Track.key="event";var emptyObject=Object.freeze({});function isUndef(e){return void 0===e||null===e}function isDef(e){return void 0!==e&&null!==e}function isTrue(e){return!0===e}function isFalse(e){return!1===e}function isPrimitive(e){return"string"==typeof e||"number"==typeof e||"symbol"===(void 0===e?"undefined":_typeof(e))||"boolean"==typeof e}function isObject$1(e){return null!==e&&"object"===(void 0===e?"undefined":_typeof(e))}var _toString=Object.prototype.toString;function toRawType(e){return _toString.call(e).slice(8,-1)}function isPlainObject$1(e){return"[object Object]"===_toString.call(e)}function isRegExp(e){return"[object RegExp]"===_toString.call(e)}function isValidArrayIndex(e){var t=parseFloat(String(e));return t>=0&&Math.floor(t)===t&&isFinite(e)}function isPromise(e){return isDef(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function toString$1(e){return null==e?"":Array.isArray(e)||isPlainObject$1(e)&&e.toString===_toString?JSON.stringify(e,null,2):String(e)}function toNumber(e){var t=parseFloat(e);return isNaN(t)?e:t}function makeMap(e,t){for(var r=Object.create(null),n=e.split(","),i=0;i<n.length;i++)r[n[i]]=!0;return t?function(e){return r[e.toLowerCase()]}:function(e){return r[e]}}var isBuiltInTag=makeMap("slot,component",!0),isReservedAttribute=makeMap("key,ref,slot,slot-scope,is");function remove(e,t){if(e.length){var r=e.indexOf(t);if(r>-1)return e.splice(r,1)}}var hasOwnProperty$13=Object.prototype.hasOwnProperty;function hasOwn(e,t){return hasOwnProperty$13.call(e,t)}function cached(e){var t=Object.create(null);return function(r){return t[r]||(t[r]=e(r))}}var camelizeRE=/-(\w)/g,camelize=cached(function(e){return e.replace(camelizeRE,function(e,t){return t?t.toUpperCase():""})}),capitalize=cached(function(e){return e.charAt(0).toUpperCase()+e.slice(1)}),hyphenateRE=/\B([A-Z])/g,hyphenate=cached(function(e){return e.replace(hyphenateRE,"-$1").toLowerCase()});function polyfillBind(e,t){function r(r){var n=arguments.length;return n?n>1?e.apply(t,arguments):e.call(t,r):e.call(t)}return r._length=e.length,r}function nativeBind(e,t){return e.bind(t)}var bind=Function.prototype.bind?nativeBind:polyfillBind;function toArray$1(e,t){t=t||0;for(var r=e.length-t,n=new Array(r);r--;)n[r]=e[r+t];return n}function extend(e,t){for(var r in t)e[r]=t[r];return e}function toObject(e){for(var t={},r=0;r<e.length;r++)e[r]&&extend(t,e[r]);return t}function noop$1(e,t,r){}var no=function(e,t,r){return!1},identity$1=function(e){return e};function genStaticKeys(e){return e.reduce(function(e,t){return e.concat(t.staticKeys||[])},[]).join(",")}function looseEqual(e,t){if(e===t)return!0;var r=isObject$1(e),n=isObject$1(t);if(!r||!n)return!r&&!n&&String(e)===String(t);try{var i=Array.isArray(e),a=Array.isArray(t);if(i&&a)return e.length===t.length&&e.every(function(e,r){return looseEqual(e,t[r])});if(e instanceof Date&&t instanceof Date)return e.getTime()===t.getTime();if(i||a)return!1;var o=Object.keys(e),s=Object.keys(t);return o.length===s.length&&o.every(function(r){return looseEqual(e[r],t[r])})}catch(e){return!1}}function looseIndexOf(e,t){for(var r=0;r<e.length;r++)if(looseEqual(e[r],t))return r;return-1}function once(e){var t=!1;return function(){t||(t=!0,e.apply(this,arguments))}}var SSR_ATTR="data-server-rendered",ASSET_TYPES=["component","directive","filter"],LIFECYCLE_HOOKS=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],config={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!0,devtools:!0,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:no,isReservedAttr:no,isUnknownElement:no,getTagNamespace:noop$1,parsePlatformTagName:identity$1,mustUseProp:no,async:!0,_lifecycleHooks:LIFECYCLE_HOOKS},unicodeLetters="a-zA-Z·À-ÖØ-öø-ͽͿ-῿‌-‍‿-⁀⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�";function isReserved(e){var t=(e+"").charCodeAt(0);return 36===t||95===t}function def(e,t,r,n){Object.defineProperty(e,t,{value:r,enumerable:!!n,writable:!0,configurable:!0})}var bailRE=new RegExp("[^"+unicodeLetters+".$_\\d]");function parsePath(e){if(!bailRE.test(e)){var t=e.split(".");return function(e){for(var r=0;r<t.length;r++){if(!e)return;e=e[t[r]]}return e}}}var _isServer,hasProto="__proto__"in{},inBrowser="undefined"!=typeof window,inWeex="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,weexPlatform=inWeex&&WXEnvironment.platform.toLowerCase(),UA=inBrowser&&window.navigator.userAgent.toLowerCase(),isIE=UA&&/msie|trident/.test(UA),isIE9=UA&&UA.indexOf("msie 9.0")>0,isEdge=UA&&UA.indexOf("edge/")>0,isAndroid=UA&&UA.indexOf("android")>0||"android"===weexPlatform,isIOS=UA&&/iphone|ipad|ipod|ios/.test(UA)||"ios"===weexPlatform,isChrome=UA&&/chrome\/\d+/.test(UA)&&!isEdge,isPhantomJS=UA&&/phantomjs/.test(UA),isFF=UA&&UA.match(/firefox\/(\d+)/),nativeWatch={}.watch,supportsPassive=!1;if(inBrowser)try{var opts={};Object.defineProperty(opts,"passive",{get:function(){supportsPassive=!0}}),window.addEventListener("test-passive",null,opts)}catch(e){}var isServerRendering=function(){return void 0===_isServer&&(_isServer=!inBrowser&&!inWeex&&void 0!==global$1&&(global$1.process&&"server"===global$1.process.env.VUE_ENV)),_isServer},devtools=inBrowser&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function isNative(e){return"function"==typeof e&&/native code/.test(e.toString())}var _Set,hasSymbol="undefined"!=typeof Symbol&&isNative(Symbol)&&"undefined"!=typeof Reflect&&isNative(Reflect.ownKeys);_Set="undefined"!=typeof Set&&isNative(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var warn=noop$1,tip=noop$1,generateComponentTrace=noop$1,formatComponentName=noop$1,hasConsole="undefined"!=typeof console,classifyRE=/(?:^|[-_])(\w)/g,classify=function(e){return e.replace(classifyRE,function(e){return e.toUpperCase()}).replace(/[-_]/g,"")};warn=function(e,t){var r=t?generateComponentTrace(t):"";config.warnHandler?config.warnHandler.call(null,e,t,r):hasConsole&&!config.silent&&console.error("[Vue warn]: "+e+r)},tip=function(e,t){hasConsole&&!config.silent&&console.warn("[Vue tip]: "+e+(t?generateComponentTrace(t):""))},formatComponentName=function(e,t){if(e.$root===e)return"<Root>";var r="function"==typeof e&&null!=e.cid?e.options:e._isVue?e.$options||e.constructor.options:e,n=r.name||r._componentTag,i=r.__file;if(!n&&i){var a=i.match(/([^/\\]+)\.vue$/);n=a&&a[1]}return(n?"<"+classify(n)+">":"<Anonymous>")+(i&&!1!==t?" at "+i:"")};var repeat$1=function(e,t){for(var r="";t;)t%2==1&&(r+=e),t>1&&(e+=e),t>>=1;return r};generateComponentTrace=function(e){if(e._isVue&&e.$parent){for(var t=[],r=0;e;){if(t.length>0){var n=t[t.length-1];if(n.constructor===e.constructor){r++,e=e.$parent;continue}r>0&&(t[t.length-1]=[n,r],r=0)}t.push(e),e=e.$parent}return"\n\nfound in\n\n"+t.map(function(e,t){return""+(0===t?"---\x3e ":repeat$1(" ",5+2*t))+(Array.isArray(e)?formatComponentName(e[0])+"... ("+e[1]+" recursive calls)":formatComponentName(e))}).join("\n")}return"\n\n(found in "+formatComponentName(e)+")"};var uid=0,Dep=function(){this.id=uid++,this.subs=[]};Dep.prototype.addSub=function(e){this.subs.push(e)},Dep.prototype.removeSub=function(e){remove(this.subs,e)},Dep.prototype.depend=function(){Dep.target&&Dep.target.addDep(this)},Dep.prototype.notify=function(){var e=this.subs.slice();config.async||e.sort(function(e,t){return e.id-t.id});for(var t=0,r=e.length;t<r;t++)e[t].update()},Dep.target=null;var targetStack=[];function pushTarget(e){targetStack.push(e),Dep.target=e}function popTarget(){targetStack.pop(),Dep.target=targetStack[targetStack.length-1]}var VNode=function(e,t,r,n,i,a,o,s){this.tag=e,this.data=t,this.children=r,this.text=n,this.elm=i,this.ns=void 0,this.context=a,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=t&&t.key,this.componentOptions=o,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},prototypeAccessors={child:{configurable:!0}};prototypeAccessors.child.get=function(){return this.componentInstance},Object.defineProperties(VNode.prototype,prototypeAccessors);var createEmptyVNode=function(e){void 0===e&&(e="");var t=new VNode;return t.text=e,t.isComment=!0,t};function createTextVNode(e){return new VNode(void 0,void 0,void 0,String(e))}function cloneVNode(e){var t=new VNode(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return t.ns=e.ns,t.isStatic=e.isStatic,t.key=e.key,t.isComment=e.isComment,t.fnContext=e.fnContext,t.fnOptions=e.fnOptions,t.fnScopeId=e.fnScopeId,t.asyncMeta=e.asyncMeta,t.isCloned=!0,t}var arrayProto$1=Array.prototype,arrayMethods=Object.create(arrayProto$1),methodsToPatch=["push","pop","shift","unshift","splice","sort","reverse"];methodsToPatch.forEach(function(e){var t=arrayProto$1[e];def(arrayMethods,e,function(){for(var r=[],n=arguments.length;n--;)r[n]=arguments[n];var i,a=t.apply(this,r),o=this.__ob__;switch(e){case"push":case"unshift":i=r;break;case"splice":i=r.slice(2)}return i&&o.observeArray(i),o.dep.notify(),a})});var arrayKeys=Object.getOwnPropertyNames(arrayMethods),shouldObserve=!0;function toggleObserving(e){shouldObserve=e}var Observer=function(e){this.value=e,this.dep=new Dep,this.vmCount=0,def(e,"__ob__",this),Array.isArray(e)?(hasProto?protoAugment(e,arrayMethods):copyAugment(e,arrayMethods,arrayKeys),this.observeArray(e)):this.walk(e)};function protoAugment(e,t){e.__proto__=t}function copyAugment(e,t,r){for(var n=0,i=r.length;n<i;n++){var a=r[n];def(e,a,t[a])}}function observe(e,t){var r;if(isObject$1(e)&&!(e instanceof VNode))return hasOwn(e,"__ob__")&&e.__ob__ instanceof Observer?r=e.__ob__:shouldObserve&&!isServerRendering()&&(Array.isArray(e)||isPlainObject$1(e))&&Object.isExtensible(e)&&!e._isVue&&(r=new Observer(e)),t&&r&&r.vmCount++,r}function defineReactive$$1(e,t,r,n,i){var a=new Dep,o=Object.getOwnPropertyDescriptor(e,t);if(!o||!1!==o.configurable){var s=o&&o.get,l=o&&o.set;s&&!l||2!==arguments.length||(r=e[t]);var u=!i&&observe(r);Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var t=s?s.call(e):r;return Dep.target&&(a.depend(),u&&(u.dep.depend(),Array.isArray(t)&&dependArray(t))),t},set:function(t){var o=s?s.call(e):r;t===o||t!=t&&o!=o||(n&&n(),s&&!l||(l?l.call(e,t):r=t,u=!i&&observe(t),a.notify()))}})}}function set$1(e,t,r){if((isUndef(e)||isPrimitive(e))&&warn("Cannot set reactive property on undefined, null, or primitive value: "+e),Array.isArray(e)&&isValidArrayIndex(t))return e.length=Math.max(e.length,t),e.splice(t,1,r),r;if(t in e&&!(t in Object.prototype))return e[t]=r,r;var n=e.__ob__;return e._isVue||n&&n.vmCount?(warn("Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option."),r):n?(defineReactive$$1(n.value,t,r),n.dep.notify(),r):(e[t]=r,r)}function del(e,t){if((isUndef(e)||isPrimitive(e))&&warn("Cannot delete reactive property on undefined, null, or primitive value: "+e),Array.isArray(e)&&isValidArrayIndex(t))e.splice(t,1);else{var r=e.__ob__;e._isVue||r&&r.vmCount?warn("Avoid deleting properties on a Vue instance or its root $data - just set it to null."):hasOwn(e,t)&&(delete e[t],r&&r.dep.notify())}}function dependArray(e){for(var t=void 0,r=0,n=e.length;r<n;r++)(t=e[r])&&t.__ob__&&t.__ob__.dep.depend(),Array.isArray(t)&&dependArray(t)}Observer.prototype.walk=function(e){for(var t=Object.keys(e),r=0;r<t.length;r++)defineReactive$$1(e,t[r])},Observer.prototype.observeArray=function(e){for(var t=0,r=e.length;t<r;t++)observe(e[t])};var strats=config.optionMergeStrategies;function mergeData(e,t){if(!t)return e;for(var r,n,i,a=hasSymbol?Reflect.ownKeys(t):Object.keys(t),o=0;o<a.length;o++)"__ob__"!==(r=a[o])&&(n=e[r],i=t[r],hasOwn(e,r)?n!==i&&isPlainObject$1(n)&&isPlainObject$1(i)&&mergeData(n,i):set$1(e,r,i));return e}function mergeDataOrFn(e,t,r){return r?function(){var n="function"==typeof t?t.call(r,r):t,i="function"==typeof e?e.call(r,r):e;return n?mergeData(n,i):i}:t?e?function(){return mergeData("function"==typeof t?t.call(this,this):t,"function"==typeof e?e.call(this,this):e)}:t:e}function mergeHook(e,t){var r=t?e?e.concat(t):Array.isArray(t)?t:[t]:e;return r?dedupeHooks(r):r}function dedupeHooks(e){for(var t=[],r=0;r<e.length;r++)-1===t.indexOf(e[r])&&t.push(e[r]);return t}function mergeAssets(e,t,r,n){var i=Object.create(e||null);return t?(assertObjectType(n,t,r),extend(i,t)):i}strats.el=strats.propsData=function(e,t,r,n){return r||warn('option "'+n+'" can only be used during instance creation with the `new` keyword.'),defaultStrat(e,t)},strats.data=function(e,t,r){return r?mergeDataOrFn(e,t,r):t&&"function"!=typeof t?(warn('The "data" option should be a function that returns a per-instance value in component definitions.',r),e):mergeDataOrFn(e,t)},LIFECYCLE_HOOKS.forEach(function(e){strats[e]=mergeHook}),ASSET_TYPES.forEach(function(e){strats[e+"s"]=mergeAssets}),strats.watch=function(e,t,r,n){if(e===nativeWatch&&(e=void 0),t===nativeWatch&&(t=void 0),!t)return Object.create(e||null);if(assertObjectType(n,t,r),!e)return t;var i={};for(var a in extend(i,e),t){var o=i[a],s=t[a];o&&!Array.isArray(o)&&(o=[o]),i[a]=o?o.concat(s):Array.isArray(s)?s:[s]}return i},strats.props=strats.methods=strats.inject=strats.computed=function(e,t,r,n){if(t&&assertObjectType(n,t,r),!e)return t;var i=Object.create(null);return extend(i,e),t&&extend(i,t),i},strats.provide=mergeDataOrFn;var defaultStrat=function(e,t){return void 0===t?e:t};function checkComponents(e){for(var t in e.components)validateComponentName(t)}function validateComponentName(e){new RegExp("^[a-zA-Z][\\-\\.0-9_"+unicodeLetters+"]*$").test(e)||warn('Invalid component name: "'+e+'". Component names should conform to valid custom element name in html5 specification.'),(isBuiltInTag(e)||config.isReservedTag(e))&&warn("Do not use built-in or reserved HTML elements as component id: "+e)}function normalizeProps(e,t){var r=e.props;if(r){var n,i,a={};if(Array.isArray(r))for(n=r.length;n--;)"string"==typeof(i=r[n])?a[camelize(i)]={type:null}:warn("props must be strings when using array syntax.");else if(isPlainObject$1(r))for(var o in r)i=r[o],a[camelize(o)]=isPlainObject$1(i)?i:{type:i};else warn('Invalid value for option "props": expected an Array or an Object, but got '+toRawType(r)+".",t);e.props=a}}function normalizeInject(e,t){var r=e.inject;if(r){var n=e.inject={};if(Array.isArray(r))for(var i=0;i<r.length;i++)n[r[i]]={from:r[i]};else if(isPlainObject$1(r))for(var a in r){var o=r[a];n[a]=isPlainObject$1(o)?extend({from:a},o):{from:o}}else warn('Invalid value for option "inject": expected an Array or an Object, but got '+toRawType(r)+".",t)}}function normalizeDirectives(e){var t=e.directives;if(t)for(var r in t){var n=t[r];"function"==typeof n&&(t[r]={bind:n,update:n})}}function assertObjectType(e,t,r){isPlainObject$1(t)||warn('Invalid value for option "'+e+'": expected an Object, but got '+toRawType(t)+".",r)}function mergeOptions(e,t,r){if(checkComponents(t),"function"==typeof t&&(t=t.options),normalizeProps(t,r),normalizeInject(t,r),normalizeDirectives(t),!t._base&&(t.extends&&(e=mergeOptions(e,t.extends,r)),t.mixins))for(var n=0,i=t.mixins.length;n<i;n++)e=mergeOptions(e,t.mixins[n],r);var a,o={};for(a in e)s(a);for(a in t)hasOwn(e,a)||s(a);function s(n){var i=strats[n]||defaultStrat;o[n]=i(e[n],t[n],r,n)}return o}function resolveAsset(e,t,r,n){if("string"==typeof r){var i=e[t];if(hasOwn(i,r))return i[r];var a=camelize(r);if(hasOwn(i,a))return i[a];var o=capitalize(a);if(hasOwn(i,o))return i[o];var s=i[r]||i[a]||i[o];return n&&!s&&warn("Failed to resolve "+t.slice(0,-1)+": "+r,e),s}}function validateProp(e,t,r,n){var i=t[e],a=!hasOwn(r,e),o=r[e],s=getTypeIndex(Boolean,i.type);if(s>-1)if(a&&!hasOwn(i,"default"))o=!1;else if(""===o||o===hyphenate(e)){var l=getTypeIndex(String,i.type);(l<0||s<l)&&(o=!0)}if(void 0===o){o=getPropDefaultValue(n,i,e);var u=shouldObserve;toggleObserving(!0),observe(o),toggleObserving(u)}return assertProp(i,e,o,n,a),o}function getPropDefaultValue(e,t,r){if(hasOwn(t,"default")){var n=t.default;return isObject$1(n)&&warn('Invalid default value for prop "'+r+'": Props with type Object/Array must use a factory function to return the default value.',e),e&&e.$options.propsData&&void 0===e.$options.propsData[r]&&void 0!==e._props[r]?e._props[r]:"function"==typeof n&&"Function"!==getType(t.type)?n.call(e):n}}function assertProp(e,t,r,n,i){if(e.required&&i)warn('Missing required prop: "'+t+'"',n);else if(null!=r||e.required){var a=e.type,o=!a||!0===a,s=[];if(a){Array.isArray(a)||(a=[a]);for(var l=0;l<a.length&&!o;l++){var u=assertType(r,a[l]);s.push(u.expectedType||""),o=u.valid}}if(o){var c=e.validator;c&&(c(r)||warn('Invalid prop: custom validator check failed for prop "'+t+'".',n))}else warn(getInvalidTypeMessage(t,r,s),n)}}var simpleCheckRE=/^(String|Number|Boolean|Function|Symbol)$/;function assertType(e,t){var r,n=getType(t);if(simpleCheckRE.test(n)){var i=void 0===e?"undefined":_typeof(e);(r=i===n.toLowerCase())||"object"!==i||(r=e instanceof t)}else r="Object"===n?isPlainObject$1(e):"Array"===n?Array.isArray(e):e instanceof t;return{valid:r,expectedType:n}}function getType(e){var t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:""}function isSameType(e,t){return getType(e)===getType(t)}function getTypeIndex(e,t){if(!Array.isArray(t))return isSameType(t,e)?0:-1;for(var r=0,n=t.length;r<n;r++)if(isSameType(t[r],e))return r;return-1}function getInvalidTypeMessage(e,t,r){var n='Invalid prop: type check failed for prop "'+e+'". Expected '+r.map(capitalize).join(", "),i=r[0],a=toRawType(t),o=styleValue(t,i),s=styleValue(t,a);return 1===r.length&&isExplicable(i)&&!isBoolean(i,a)&&(n+=" with value "+o),n+=", got "+a+" ",isExplicable(a)&&(n+="with value "+s+"."),n}function styleValue(e,t){return"String"===t?'"'+e+'"':"Number"===t?""+Number(e):""+e}function isExplicable(e){return["string","number","boolean"].some(function(t){return e.toLowerCase()===t})}function isBoolean(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return e.some(function(e){return"boolean"===e.toLowerCase()})}function handleError(e,t,r){if(t)for(var n=t;n=n.$parent;){var i=n.$options.errorCaptured;if(i)for(var a=0;a<i.length;a++)try{if(!1===i[a].call(n,e,t,r))return}catch(e){globalHandleError(e,n,"errorCaptured hook")}}globalHandleError(e,t,r)}function invokeWithErrorHandling(e,t,r,n,i){var a;try{(a=r?e.apply(t,r):e.call(t))&&!a._isVue&&isPromise(a)&&a.catch(function(e){return handleError(e,n,i+" (Promise/async)")})}catch(e){handleError(e,n,i)}return a}function globalHandleError(e,t,r){if(config.errorHandler)try{return config.errorHandler.call(null,e,t,r)}catch(t){t!==e&&logError(t,null,"config.errorHandler")}logError(e,t,r)}function logError(e,t,r){if(warn("Error in "+r+': "'+e.toString()+'"',t),!inBrowser&&!inWeex||"undefined"==typeof console)throw e;console.error(e)}var timerFunc,mark,measure,isUsingMicroTask=!1,callbacks=[],pending=!1;function flushCallbacks(){pending=!1;var e=callbacks.slice(0);callbacks.length=0;for(var t=0;t<e.length;t++)e[t]()}if("undefined"!=typeof Promise&&isNative(Promise)){var p=Promise.resolve();timerFunc=function(){p.then(flushCallbacks),isIOS&&setTimeout(noop$1)},isUsingMicroTask=!0}else if(isIE||"undefined"==typeof MutationObserver||!isNative(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())timerFunc="undefined"!=typeof setImmediate&&isNative(setImmediate)?function(){setImmediate(flushCallbacks)}:function(){setTimeout(flushCallbacks,0)};else{var counter=1,observer=new MutationObserver(flushCallbacks),textNode=document.createTextNode(String(counter));observer.observe(textNode,{characterData:!0}),timerFunc=function(){counter=(counter+1)%2,textNode.data=String(counter)},isUsingMicroTask=!0}function nextTick(e,t){var r;if(callbacks.push(function(){if(e)try{e.call(t)}catch(e){handleError(e,t,"nextTick")}else r&&r(t)}),pending||(pending=!0,timerFunc()),!e&&"undefined"!=typeof Promise)return new Promise(function(e){r=e})}var initProxy,perf=inBrowser&&window.performance;perf&&perf.mark&&perf.measure&&perf.clearMarks&&perf.clearMeasures&&(mark=function(e){return perf.mark(e)},measure=function(e,t,r){perf.measure(e,t,r),perf.clearMarks(t),perf.clearMarks(r)});var allowedGlobals=makeMap("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,require"),warnNonPresent=function(e,t){warn('Property or method "'+t+'" is not defined on the instance but referenced during render. Make sure that this property is reactive, either in the data option, or for class-based components, by initializing the property. See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',e)},warnReservedPrefix=function(e,t){warn('Property "'+t+'" must be accessed with "$data.'+t+'" because properties starting with "$" or "_" are not proxied in the Vue instance to prevent conflicts with Vue internalsSee: https://vuejs.org/v2/api/#data',e)},hasProxy="undefined"!=typeof Proxy&&isNative(Proxy);if(hasProxy){var isBuiltInModifier=makeMap("stop,prevent,self,ctrl,shift,alt,meta,exact");config.keyCodes=new Proxy(config.keyCodes,{set:function(e,t,r){return isBuiltInModifier(t)?(warn("Avoid overwriting built-in modifier in config.keyCodes: ."+t),!1):(e[t]=r,!0)}})}var hasHandler={has:function(e,t){var r=t in e,n=allowedGlobals(t)||"string"==typeof t&&"_"===t.charAt(0)&&!(t in e.$data);return r||n||(t in e.$data?warnReservedPrefix(e,t):warnNonPresent(e,t)),r||!n}},getHandler={get:function(e,t){return"string"!=typeof t||t in e||(t in e.$data?warnReservedPrefix(e,t):warnNonPresent(e,t)),e[t]}};initProxy=function(e){if(hasProxy){var t=e.$options,r=t.render&&t.render._withStripped?getHandler:hasHandler;e._renderProxy=new Proxy(e,r)}else e._renderProxy=e};var seenObjects=new _Set;function traverse(e){_traverse(e,seenObjects),seenObjects.clear()}function _traverse(e,t){var r,n,i=Array.isArray(e);if(!(!i&&!isObject$1(e)||Object.isFrozen(e)||e instanceof VNode)){if(e.__ob__){var a=e.__ob__.dep.id;if(t.has(a))return;t.add(a)}if(i)for(r=e.length;r--;)_traverse(e[r],t);else for(r=(n=Object.keys(e)).length;r--;)_traverse(e[n[r]],t)}}var normalizeEvent=cached(function(e){var t="&"===e.charAt(0),r="~"===(e=t?e.slice(1):e).charAt(0),n="!"===(e=r?e.slice(1):e).charAt(0);return{name:e=n?e.slice(1):e,once:r,capture:n,passive:t}});function createFnInvoker(e,t){function r(){var e=arguments,n=r.fns;if(!Array.isArray(n))return invokeWithErrorHandling(n,null,arguments,t,"v-on handler");for(var i=n.slice(),a=0;a<i.length;a++)invokeWithErrorHandling(i[a],null,e,t,"v-on handler")}return r.fns=e,r}function updateListeners(e,t,r,n,i,a){var o,s,l,u;for(o in e)s=e[o],l=t[o],u=normalizeEvent(o),isUndef(s)?warn('Invalid handler for event "'+u.name+'": got '+String(s),a):isUndef(l)?(isUndef(s.fns)&&(s=e[o]=createFnInvoker(s,a)),isTrue(u.once)&&(s=e[o]=i(u.name,s,u.capture)),r(u.name,s,u.capture,u.passive,u.params)):s!==l&&(l.fns=s,e[o]=l);for(o in t)isUndef(e[o])&&n((u=normalizeEvent(o)).name,t[o],u.capture)}function mergeVNodeHook(e,t,r){var n;e instanceof VNode&&(e=e.data.hook||(e.data.hook={}));var i=e[t];function a(){r.apply(this,arguments),remove(n.fns,a)}isUndef(i)?n=createFnInvoker([a]):isDef(i.fns)&&isTrue(i.merged)?(n=i).fns.push(a):n=createFnInvoker([i,a]),n.merged=!0,e[t]=n}function extractPropsFromVNodeData(e,t,r){var n=t.options.props;if(!isUndef(n)){var i={},a=e.attrs,o=e.props;if(isDef(a)||isDef(o))for(var s in n){var l=hyphenate(s),u=s.toLowerCase();s!==u&&a&&hasOwn(a,u)&&tip('Prop "'+u+'" is passed to component '+formatComponentName(r||t)+', but the declared prop name is "'+s+'". Note that HTML attributes are case-insensitive and camelCased props need to use their kebab-case equivalents when using in-DOM templates. You should probably use "'+l+'" instead of "'+s+'".'),checkProp(i,o,s,l,!0)||checkProp(i,a,s,l,!1)}return i}}function checkProp(e,t,r,n,i){if(isDef(t)){if(hasOwn(t,r))return e[r]=t[r],i||delete t[r],!0;if(hasOwn(t,n))return e[r]=t[n],i||delete t[n],!0}return!1}function simpleNormalizeChildren(e){for(var t=0;t<e.length;t++)if(Array.isArray(e[t]))return Array.prototype.concat.apply([],e);return e}function normalizeChildren(e){return isPrimitive(e)?[createTextVNode(e)]:Array.isArray(e)?normalizeArrayChildren(e):void 0}function isTextNode(e){return isDef(e)&&isDef(e.text)&&isFalse(e.isComment)}function normalizeArrayChildren(e,t){var r,n,i,a,o=[];for(r=0;r<e.length;r++)isUndef(n=e[r])||"boolean"==typeof n||(a=o[i=o.length-1],Array.isArray(n)?n.length>0&&(isTextNode((n=normalizeArrayChildren(n,(t||"")+"_"+r))[0])&&isTextNode(a)&&(o[i]=createTextVNode(a.text+n[0].text),n.shift()),o.push.apply(o,n)):isPrimitive(n)?isTextNode(a)?o[i]=createTextVNode(a.text+n):""!==n&&o.push(createTextVNode(n)):isTextNode(n)&&isTextNode(a)?o[i]=createTextVNode(a.text+n.text):(isTrue(e._isVList)&&isDef(n.tag)&&isUndef(n.key)&&isDef(t)&&(n.key="__vlist"+t+"_"+r+"__"),o.push(n)));return o}function initProvide(e){var t=e.$options.provide;t&&(e._provided="function"==typeof t?t.call(e):t)}function initInjections(e){var t=resolveInject(e.$options.inject,e);t&&(toggleObserving(!1),Object.keys(t).forEach(function(r){defineReactive$$1(e,r,t[r],function(){warn('Avoid mutating an injected value directly since the changes will be overwritten whenever the provided component re-renders. injection being mutated: "'+r+'"',e)})}),toggleObserving(!0))}function resolveInject(e,t){if(e){for(var r=Object.create(null),n=hasSymbol?Reflect.ownKeys(e):Object.keys(e),i=0;i<n.length;i++){var a=n[i];if("__ob__"!==a){for(var o=e[a].from,s=t;s;){if(s._provided&&hasOwn(s._provided,o)){r[a]=s._provided[o];break}s=s.$parent}if(!s)if("default"in e[a]){var l=e[a].default;r[a]="function"==typeof l?l.call(t):l}else warn('Injection "'+a+'" not found',t)}}return r}}function resolveSlots(e,t){if(!e||!e.length)return{};for(var r={},n=0,i=e.length;n<i;n++){var a=e[n],o=a.data;if(o&&o.attrs&&o.attrs.slot&&delete o.attrs.slot,a.context!==t&&a.fnContext!==t||!o||null==o.slot)(r.default||(r.default=[])).push(a);else{var s=o.slot,l=r[s]||(r[s]=[]);"template"===a.tag?l.push.apply(l,a.children||[]):l.push(a)}}for(var u in r)r[u].every(isWhitespace)&&delete r[u];return r}function isWhitespace(e){return e.isComment&&!e.asyncFactory||" "===e.text}function normalizeScopedSlots(e,t,r){var n;if(e){if(e._normalized)return e._normalized;if(e.$stable&&r&&r!==emptyObject&&0===Object.keys(t).length)return r;for(var i in n={},e)e[i]&&"$"!==i[0]&&(n[i]=normalizeScopedSlot(t,i,e[i]))}else n={};for(var a in t)a in n||(n[a]=proxyNormalSlot(t,a));return e&&Object.isExtensible(e)&&(e._normalized=n),def(n,"$stable",!e||!!e.$stable),n}function normalizeScopedSlot(e,t,r){var n=function(){var e=arguments.length?r.apply(null,arguments):r({});return(e=e&&"object"===(void 0===e?"undefined":_typeof(e))&&!Array.isArray(e)?[e]:normalizeChildren(e))&&0===e.length?void 0:e};return r.proxy&&Object.defineProperty(e,t,{get:n,enumerable:!0,configurable:!0}),n}function proxyNormalSlot(e,t){return function(){return e[t]}}function renderList(e,t){var r,n,i,a,o;if(Array.isArray(e)||"string"==typeof e)for(r=new Array(e.length),n=0,i=e.length;n<i;n++)r[n]=t(e[n],n);else if("number"==typeof e)for(r=new Array(e),n=0;n<e;n++)r[n]=t(n+1,n);else if(isObject$1(e))if(hasSymbol&&e[Symbol.iterator]){r=[];for(var s=e[Symbol.iterator](),l=s.next();!l.done;)r.push(t(l.value,r.length)),l=s.next()}else for(a=Object.keys(e),r=new Array(a.length),n=0,i=a.length;n<i;n++)o=a[n],r[n]=t(e[o],o,n);return isDef(r)||(r=[]),r._isVList=!0,r}function renderSlot(e,t,r,n){var i,a=this.$scopedSlots[e];a?(r=r||{},n&&(isObject$1(n)||warn("slot v-bind without argument expects an Object",this),r=extend(extend({},n),r)),i=a(r)||t):i=this.$slots[e]||t;var o=r&&r.slot;return o?this.$createElement("template",{slot:o},i):i}function resolveFilter(e){return resolveAsset(this.$options,"filters",e,!0)||identity$1}function isKeyNotMatch(e,t){return Array.isArray(e)?-1===e.indexOf(t):e!==t}function checkKeyCodes(e,t,r,n,i){var a=config.keyCodes[t]||r;return i&&n&&!config.keyCodes[t]?isKeyNotMatch(i,n):a?isKeyNotMatch(a,e):n?hyphenate(n)!==t:void 0}function bindObjectProps(e,t,r,n,i){if(r)if(isObject$1(r)){var a;Array.isArray(r)&&(r=toObject(r));var o=function(o){if("class"===o||"style"===o||isReservedAttribute(o))a=e;else{var s=e.attrs&&e.attrs.type;a=n||config.mustUseProp(t,s,o)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var l=camelize(o);o in a||l in a||(a[o]=r[o],i&&((e.on||(e.on={}))["update:"+l]=function(e){r[o]=e}))};for(var s in r)o(s)}else warn("v-bind without argument expects an Object or Array value",this);return e}function renderStatic(e,t){var r=this._staticTrees||(this._staticTrees=[]),n=r[e];return n&&!t?n:(markStatic(n=r[e]=this.$options.staticRenderFns[e].call(this._renderProxy,null,this),"__static__"+e,!1),n)}function markOnce(e,t,r){return markStatic(e,"__once__"+t+(r?"_"+r:""),!0),e}function markStatic(e,t,r){if(Array.isArray(e))for(var n=0;n<e.length;n++)e[n]&&"string"!=typeof e[n]&&markStaticNode(e[n],t+"_"+n,r);else markStaticNode(e,t,r)}function markStaticNode(e,t,r){e.isStatic=!0,e.key=t,e.isOnce=r}function bindObjectListeners(e,t){if(t)if(isPlainObject$1(t)){var r=e.on=e.on?extend({},e.on):{};for(var n in t){var i=r[n],a=t[n];r[n]=i?[].concat(i,a):a}}else warn("v-on without argument expects an Object value",this);return e}function resolveScopedSlots(e,t,r){r=r||{$stable:!t};for(var n=0;n<e.length;n++){var i=e[n];Array.isArray(i)?resolveScopedSlots(i,t,r):i&&(i.proxy&&(i.fn.proxy=!0),r[i.key]=i.fn)}return r}function bindDynamicKeys(e,t){for(var r=0;r<t.length;r+=2){var n=t[r];"string"==typeof n&&n?e[t[r]]=t[r+1]:""!==n&&null!==n&&warn("Invalid value for dynamic directive argument (expected string or null): "+n,this)}return e}function prependModifier(e,t){return"string"==typeof e?t+e:e}function installRenderHelpers(e){e._o=markOnce,e._n=toNumber,e._s=toString$1,e._l=renderList,e._t=renderSlot,e._q=looseEqual,e._i=looseIndexOf,e._m=renderStatic,e._f=resolveFilter,e._k=checkKeyCodes,e._b=bindObjectProps,e._v=createTextVNode,e._e=createEmptyVNode,e._u=resolveScopedSlots,e._g=bindObjectListeners,e._d=bindDynamicKeys,e._p=prependModifier}function FunctionalRenderContext(e,t,r,n,i){var a,o=this,s=i.options;hasOwn(n,"_uid")?(a=Object.create(n))._original=n:(a=n,n=n._original);var l=isTrue(s._compiled),u=!l;this.data=e,this.props=t,this.children=r,this.parent=n,this.listeners=e.on||emptyObject,this.injections=resolveInject(s.inject,n),this.slots=function(){return o.$slots||normalizeScopedSlots(e.scopedSlots,o.$slots=resolveSlots(r,n)),o.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return normalizeScopedSlots(e.scopedSlots,this.slots())}}),l&&(this.$options=s,this.$slots=this.slots(),this.$scopedSlots=normalizeScopedSlots(e.scopedSlots,this.$slots)),s._scopeId?this._c=function(e,t,r,i){var o=createElement(a,e,t,r,i,u);return o&&!Array.isArray(o)&&(o.fnScopeId=s._scopeId,o.fnContext=n),o}:this._c=function(e,t,r,n){return createElement(a,e,t,r,n,u)}}function createFunctionalComponent(e,t,r,n,i){var a=e.options,o={},s=a.props;if(isDef(s))for(var l in s)o[l]=validateProp(l,s,t||emptyObject);else isDef(r.attrs)&&mergeProps(o,r.attrs),isDef(r.props)&&mergeProps(o,r.props);var u=new FunctionalRenderContext(r,o,i,n,e),c=a.render.call(null,u._c,u);if(c instanceof VNode)return cloneAndMarkFunctionalResult(c,r,u.parent,a,u);if(Array.isArray(c)){for(var d=normalizeChildren(c)||[],h=new Array(d.length),f=0;f<d.length;f++)h[f]=cloneAndMarkFunctionalResult(d[f],r,u.parent,a,u);return h}}function cloneAndMarkFunctionalResult(e,t,r,n,i){var a=cloneVNode(e);return a.fnContext=r,a.fnOptions=n,(a.devtoolsMeta=a.devtoolsMeta||{}).renderContext=i,t.slot&&((a.data||(a.data={})).slot=t.slot),a}function mergeProps(e,t){for(var r in t)e[camelize(r)]=t[r]}installRenderHelpers(FunctionalRenderContext.prototype);var componentVNodeHooks={init:function(e,t){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var r=e;componentVNodeHooks.prepatch(r,r)}else{(e.componentInstance=createComponentInstanceForVnode(e,activeInstance)).$mount(t?e.elm:void 0,t)}},prepatch:function(e,t){var r=t.componentOptions;updateChildComponent(t.componentInstance=e.componentInstance,r.propsData,r.listeners,t,r.children)},insert:function(e){var t=e.context,r=e.componentInstance;r._isMounted||(r._isMounted=!0,callHook(r,"mounted")),e.data.keepAlive&&(t._isMounted?queueActivatedComponent(r):activateChildComponent(r,!0))},destroy:function(e){var t=e.componentInstance;t._isDestroyed||(e.data.keepAlive?deactivateChildComponent(t,!0):t.$destroy())}},hooksToMerge=Object.keys(componentVNodeHooks);function createComponent(e,t,r,n,i){if(!isUndef(e)){var a=r.$options._base;if(isObject$1(e)&&(e=a.extend(e)),"function"==typeof e){var o;if(isUndef(e.cid)&&void 0===(e=resolveAsyncComponent(o=e,a)))return createAsyncPlaceholder(o,t,r,n,i);t=t||{},resolveConstructorOptions(e),isDef(t.model)&&transformModel(e.options,t);var s=extractPropsFromVNodeData(t,e,i);if(isTrue(e.options.functional))return createFunctionalComponent(e,s,t,r,n);var l=t.on;if(t.on=t.nativeOn,isTrue(e.options.abstract)){var u=t.slot;t={},u&&(t.slot=u)}installComponentHooks(t);var c=e.options.name||i;return new VNode("vue-component-"+e.cid+(c?"-"+c:""),t,void 0,void 0,void 0,r,{Ctor:e,propsData:s,listeners:l,tag:i,children:n},o)}warn("Invalid Component definition: "+String(e),r)}}function createComponentInstanceForVnode(e,t){var r={_isComponent:!0,_parentVnode:e,parent:t},n=e.data.inlineTemplate;return isDef(n)&&(r.render=n.render,r.staticRenderFns=n.staticRenderFns),new e.componentOptions.Ctor(r)}function installComponentHooks(e){for(var t=e.hook||(e.hook={}),r=0;r<hooksToMerge.length;r++){var n=hooksToMerge[r],i=t[n],a=componentVNodeHooks[n];i===a||i&&i._merged||(t[n]=i?mergeHook$1(a,i):a)}}function mergeHook$1(e,t){var r=function(r,n){e(r,n),t(r,n)};return r._merged=!0,r}function transformModel(e,t){var r=e.model&&e.model.prop||"value",n=e.model&&e.model.event||"input";(t.attrs||(t.attrs={}))[r]=t.model.value;var i=t.on||(t.on={}),a=i[n],o=t.model.callback;isDef(a)?(Array.isArray(a)?-1===a.indexOf(o):a!==o)&&(i[n]=[o].concat(a)):i[n]=o}var SIMPLE_NORMALIZE=1,ALWAYS_NORMALIZE=2;function createElement(e,t,r,n,i,a){return(Array.isArray(r)||isPrimitive(r))&&(i=n,n=r,r=void 0),isTrue(a)&&(i=ALWAYS_NORMALIZE),_createElement(e,t,r,n,i)}function _createElement(e,t,r,n,i){if(isDef(r)&&isDef(r.__ob__))return warn("Avoid using observed data object as vnode data: "+JSON.stringify(r)+"\nAlways create fresh vnode data objects in each render!",e),createEmptyVNode();if(isDef(r)&&isDef(r.is)&&(t=r.is),!t)return createEmptyVNode();var a,o,s;(isDef(r)&&isDef(r.key)&&!isPrimitive(r.key)&&warn("Avoid using non-primitive value as key, use string/number value instead.",e),Array.isArray(n)&&"function"==typeof n[0]&&((r=r||{}).scopedSlots={default:n[0]},n.length=0),i===ALWAYS_NORMALIZE?n=normalizeChildren(n):i===SIMPLE_NORMALIZE&&(n=simpleNormalizeChildren(n)),"string"==typeof t)?(o=e.$vnode&&e.$vnode.ns||config.getTagNamespace(t),a=config.isReservedTag(t)?new VNode(config.parsePlatformTagName(t),r,n,void 0,void 0,e):r&&r.pre||!isDef(s=resolveAsset(e.$options,"components",t))?new VNode(t,r,n,void 0,void 0,e):createComponent(s,r,e,n,t)):a=createComponent(t,r,e,n);return Array.isArray(a)?a:isDef(a)?(isDef(o)&&applyNS(a,o),isDef(r)&&registerDeepBindings(r),a):createEmptyVNode()}function applyNS(e,t,r){if(e.ns=t,"foreignObject"===e.tag&&(t=void 0,r=!0),isDef(e.children))for(var n=0,i=e.children.length;n<i;n++){var a=e.children[n];isDef(a.tag)&&(isUndef(a.ns)||isTrue(r)&&"svg"!==a.tag)&&applyNS(a,t,r)}}function registerDeepBindings(e){isObject$1(e.style)&&traverse(e.style),isObject$1(e.class)&&traverse(e.class)}function initRender(e){e._vnode=null,e._staticTrees=null;var t=e.$options,r=e.$vnode=t._parentVnode,n=r&&r.context;e.$slots=resolveSlots(t._renderChildren,n),e.$scopedSlots=emptyObject,e._c=function(t,r,n,i){return createElement(e,t,r,n,i,!1)},e.$createElement=function(t,r,n,i){return createElement(e,t,r,n,i,!0)};var i=r&&r.data;defineReactive$$1(e,"$attrs",i&&i.attrs||emptyObject,function(){!isUpdatingChildComponent&&warn("$attrs is readonly.",e)},!0),defineReactive$$1(e,"$listeners",t._parentListeners||emptyObject,function(){!isUpdatingChildComponent&&warn("$listeners is readonly.",e)},!0)}var target,currentRenderingInstance=null;function renderMixin(e){installRenderHelpers(e.prototype),e.prototype.$nextTick=function(e){return nextTick(e,this)},e.prototype._render=function(){var e,t=this,r=t.$options,n=r.render,i=r._parentVnode;i&&(t.$scopedSlots=normalizeScopedSlots(i.data.scopedSlots,t.$slots,t.$scopedSlots)),t.$vnode=i;try{currentRenderingInstance=t,e=n.call(t._renderProxy,t.$createElement)}catch(r){if(handleError(r,t,"render"),t.$options.renderError)try{e=t.$options.renderError.call(t._renderProxy,t.$createElement,r)}catch(r){handleError(r,t,"renderError"),e=t._vnode}else e=t._vnode}finally{currentRenderingInstance=null}return Array.isArray(e)&&1===e.length&&(e=e[0]),e instanceof VNode||(Array.isArray(e)&&warn("Multiple root nodes returned from render function. Render function should return a single root node.",t),e=createEmptyVNode()),e.parent=i,e}}function ensureCtor(e,t){return(e.__esModule||hasSymbol&&"Module"===e[Symbol.toStringTag])&&(e=e.default),isObject$1(e)?t.extend(e):e}function createAsyncPlaceholder(e,t,r,n,i){var a=createEmptyVNode();return a.asyncFactory=e,a.asyncMeta={data:t,context:r,children:n,tag:i},a}function resolveAsyncComponent(e,t){if(isTrue(e.error)&&isDef(e.errorComp))return e.errorComp;if(isDef(e.resolved))return e.resolved;if(isTrue(e.loading)&&isDef(e.loadingComp))return e.loadingComp;var r=currentRenderingInstance;if(!isDef(e.owners)){var n=e.owners=[r],i=!0,a=function(e){for(var t=0,r=n.length;t<r;t++)n[t].$forceUpdate();e&&(n.length=0)},o=once(function(r){e.resolved=ensureCtor(r,t),i?n.length=0:a(!0)}),s=once(function(t){warn("Failed to resolve async component: "+String(e)+(t?"\nReason: "+t:"")),isDef(e.errorComp)&&(e.error=!0,a(!0))}),l=e(o,s);return isObject$1(l)&&(isPromise(l)?isUndef(e.resolved)&&l.then(o,s):isPromise(l.component)&&(l.component.then(o,s),isDef(l.error)&&(e.errorComp=ensureCtor(l.error,t)),isDef(l.loading)&&(e.loadingComp=ensureCtor(l.loading,t),0===l.delay?e.loading=!0:setTimeout(function(){isUndef(e.resolved)&&isUndef(e.error)&&(e.loading=!0,a(!1))},l.delay||200)),isDef(l.timeout)&&setTimeout(function(){isUndef(e.resolved)&&s("timeout ("+l.timeout+"ms)")},l.timeout))),i=!1,e.loading?e.loadingComp:e.resolved}e.owners.push(r)}function isAsyncPlaceholder(e){return e.isComment&&e.asyncFactory}function getFirstComponentChild(e){if(Array.isArray(e))for(var t=0;t<e.length;t++){var r=e[t];if(isDef(r)&&(isDef(r.componentOptions)||isAsyncPlaceholder(r)))return r}}function initEvents(e){e._events=Object.create(null),e._hasHookEvent=!1;var t=e.$options._parentListeners;t&&updateComponentListeners(e,t)}function add(e,t){target.$on(e,t)}function remove$1(e,t){target.$off(e,t)}function createOnceHandler(e,t){var r=target;return function n(){null!==t.apply(null,arguments)&&r.$off(e,n)}}function updateComponentListeners(e,t,r){target=e,updateListeners(t,r||{},add,remove$1,createOnceHandler,e),target=void 0}function eventsMixin(e){var t=/^hook:/;e.prototype.$on=function(e,r){var n=this;if(Array.isArray(e))for(var i=0,a=e.length;i<a;i++)n.$on(e[i],r);else(n._events[e]||(n._events[e]=[])).push(r),t.test(e)&&(n._hasHookEvent=!0);return n},e.prototype.$once=function(e,t){var r=this;function n(){r.$off(e,n),t.apply(r,arguments)}return n.fn=t,r.$on(e,n),r},e.prototype.$off=function(e,t){var r=this;if(!arguments.length)return r._events=Object.create(null),r;if(Array.isArray(e)){for(var n=0,i=e.length;n<i;n++)r.$off(e[n],t);return r}var a,o=r._events[e];if(!o)return r;if(!t)return r._events[e]=null,r;for(var s=o.length;s--;)if((a=o[s])===t||a.fn===t){o.splice(s,1);break}return r},e.prototype.$emit=function(e){var t=this,r=e.toLowerCase();r!==e&&t._events[r]&&tip('Event "'+r+'" is emitted in component '+formatComponentName(t)+' but the handler is registered for "'+e+'". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "'+hyphenate(e)+'" instead of "'+e+'".');var n=t._events[e];if(n){n=n.length>1?toArray$1(n):n;for(var i=toArray$1(arguments,1),a='event handler for "'+e+'"',o=0,s=n.length;o<s;o++)invokeWithErrorHandling(n[o],t,i,t,a)}return t}}var activeInstance=null,isUpdatingChildComponent=!1;function setActiveInstance(e){var t=activeInstance;return activeInstance=e,function(){activeInstance=t}}function initLifecycle(e){var t=e.$options,r=t.parent;if(r&&!t.abstract){for(;r.$options.abstract&&r.$parent;)r=r.$parent;r.$children.push(e)}e.$parent=r,e.$root=r?r.$root:e,e.$children=[],e.$refs={},e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}function lifecycleMixin(e){e.prototype._update=function(e,t){var r=this,n=r.$el,i=r._vnode,a=setActiveInstance(r);r._vnode=e,r.$el=i?r.__patch__(i,e):r.__patch__(r.$el,e,t,!1),a(),n&&(n.__vue__=null),r.$el&&(r.$el.__vue__=r),r.$vnode&&r.$parent&&r.$vnode===r.$parent._vnode&&(r.$parent.$el=r.$el)},e.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){callHook(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||remove(t.$children,e),e._watcher&&e._watcher.teardown();for(var r=e._watchers.length;r--;)e._watchers[r].teardown();e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),callHook(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}function mountComponent(e,t,r){var n;return e.$el=t,e.$options.render||(e.$options.render=createEmptyVNode,e.$options.template&&"#"!==e.$options.template.charAt(0)||e.$options.el||t?warn("You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.",e):warn("Failed to mount component: template or render function not defined.",e)),callHook(e,"beforeMount"),n=config.performance&&mark?function(){var t=e._name,n=e._uid,i="vue-perf-start:"+n,a="vue-perf-end:"+n;mark(i);var o=e._render();mark(a),measure("vue "+t+" render",i,a),mark(i),e._update(o,r),mark(a),measure("vue "+t+" patch",i,a)}:function(){e._update(e._render(),r)},new Watcher(e,n,noop$1,{before:function(){e._isMounted&&!e._isDestroyed&&callHook(e,"beforeUpdate")}},!0),r=!1,null==e.$vnode&&(e._isMounted=!0,callHook(e,"mounted")),e}function updateChildComponent(e,t,r,n,i){isUpdatingChildComponent=!0;var a=!!(n.data.scopedSlots&&!n.data.scopedSlots.$stable||e.$scopedSlots!==emptyObject&&!e.$scopedSlots.$stable),o=!!(i||e.$options._renderChildren||a);if(e.$options._parentVnode=n,e.$vnode=n,e._vnode&&(e._vnode.parent=n),e.$options._renderChildren=i,e.$attrs=n.data.attrs||emptyObject,e.$listeners=r||emptyObject,t&&e.$options.props){toggleObserving(!1);for(var s=e._props,l=e.$options._propKeys||[],u=0;u<l.length;u++){var c=l[u],d=e.$options.props;s[c]=validateProp(c,d,t,e)}toggleObserving(!0),e.$options.propsData=t}r=r||emptyObject;var h=e.$options._parentListeners;e.$options._parentListeners=r,updateComponentListeners(e,r,h),o&&(e.$slots=resolveSlots(i,n.context),e.$forceUpdate()),isUpdatingChildComponent=!1}function isInInactiveTree(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function activateChildComponent(e,t){if(t){if(e._directInactive=!1,isInInactiveTree(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var r=0;r<e.$children.length;r++)activateChildComponent(e.$children[r]);callHook(e,"activated")}}function deactivateChildComponent(e,t){if(!(t&&(e._directInactive=!0,isInInactiveTree(e))||e._inactive)){e._inactive=!0;for(var r=0;r<e.$children.length;r++)deactivateChildComponent(e.$children[r]);callHook(e,"deactivated")}}function callHook(e,t){pushTarget();var r=e.$options[t],n=t+" hook";if(r)for(var i=0,a=r.length;i<a;i++)invokeWithErrorHandling(r[i],e,null,e,n);e._hasHookEvent&&e.$emit("hook:"+t),popTarget()}var MAX_UPDATE_COUNT=100,queue=[],activatedChildren=[],has={},circular={},waiting=!1,flushing=!1,index=0;function resetSchedulerState(){index=queue.length=activatedChildren.length=0,has={},circular={},waiting=flushing=!1}var currentFlushTimestamp=0,getNow=Date.now;function flushSchedulerQueue(){var e,t;for(currentFlushTimestamp=getNow(),flushing=!0,queue.sort(function(e,t){return e.id-t.id}),index=0;index<queue.length;index++)if((e=queue[index]).before&&e.before(),t=e.id,has[t]=null,e.run(),null!=has[t]&&(circular[t]=(circular[t]||0)+1,circular[t]>MAX_UPDATE_COUNT)){warn("You may have an infinite update loop "+(e.user?'in watcher with expression "'+e.expression+'"':"in a component render function."),e.vm);break}var r=activatedChildren.slice(),n=queue.slice();resetSchedulerState(),callActivatedHooks(r),callUpdatedHooks(n),devtools&&config.devtools&&devtools.emit("flush")}function callUpdatedHooks(e){for(var t=e.length;t--;){var r=e[t],n=r.vm;n._watcher===r&&n._isMounted&&!n._isDestroyed&&callHook(n,"updated")}}function queueActivatedComponent(e){e._inactive=!1,activatedChildren.push(e)}function callActivatedHooks(e){for(var t=0;t<e.length;t++)e[t]._inactive=!0,activateChildComponent(e[t],!0)}function queueWatcher(e){var t=e.id;if(null==has[t]){if(has[t]=!0,flushing){for(var r=queue.length-1;r>index&&queue[r].id>e.id;)r--;queue.splice(r+1,0,e)}else queue.push(e);if(!waiting){if(waiting=!0,!config.async)return void flushSchedulerQueue();nextTick(flushSchedulerQueue)}}}inBrowser&&getNow()>document.createEvent("Event").timeStamp&&(getNow=function(){return performance.now()});var uid$2=0,Watcher=function(e,t,r,n,i){this.vm=e,i&&(e._watcher=this),e._watchers.push(this),n?(this.deep=!!n.deep,this.user=!!n.user,this.lazy=!!n.lazy,this.sync=!!n.sync,this.before=n.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=r,this.id=++uid$2,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new _Set,this.newDepIds=new _Set,this.expression=t.toString(),"function"==typeof t?this.getter=t:(this.getter=parsePath(t),this.getter||(this.getter=noop$1,warn('Failed watching path: "'+t+'" Watcher only accepts simple dot-delimited paths. For full control, use a function instead.',e))),this.value=this.lazy?void 0:this.get()};Watcher.prototype.get=function(){var e;pushTarget(this);var t=this.vm;try{e=this.getter.call(t,t)}catch(e){if(!this.user)throw e;handleError(e,t,'getter for watcher "'+this.expression+'"')}finally{this.deep&&traverse(e),popTarget(),this.cleanupDeps()}return e},Watcher.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},Watcher.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var t=this.deps[e];this.newDepIds.has(t.id)||t.removeSub(this)}var r=this.depIds;this.depIds=this.newDepIds,this.newDepIds=r,this.newDepIds.clear(),r=this.deps,this.deps=this.newDeps,this.newDeps=r,this.newDeps.length=0},Watcher.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():queueWatcher(this)},Watcher.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||isObject$1(e)||this.deep){var t=this.value;if(this.value=e,this.user)try{this.cb.call(this.vm,e,t)}catch(e){handleError(e,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,e,t)}}},Watcher.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},Watcher.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},Watcher.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||remove(this.vm._watchers,this);for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1}};var sharedPropertyDefinition={enumerable:!0,configurable:!0,get:noop$1,set:noop$1};function proxy(e,t,r){sharedPropertyDefinition.get=function(){return this[t][r]},sharedPropertyDefinition.set=function(e){this[t][r]=e},Object.defineProperty(e,r,sharedPropertyDefinition)}function initState(e){e._watchers=[];var t=e.$options;t.props&&initProps(e,t.props),t.methods&&initMethods(e,t.methods),t.data?initData(e):observe(e._data={},!0),t.computed&&initComputed(e,t.computed),t.watch&&t.watch!==nativeWatch&&initWatch(e,t.watch)}function initProps(e,t){var r=e.$options.propsData||{},n=e._props={},i=e.$options._propKeys=[],a=!e.$parent;a||toggleObserving(!1);var o=function(o){i.push(o);var s=validateProp(o,t,r,e),l=hyphenate(o);(isReservedAttribute(l)||config.isReservedAttr(l))&&warn('"'+l+'" is a reserved attribute and cannot be used as component prop.',e),defineReactive$$1(n,o,s,function(){a||isUpdatingChildComponent||warn("Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value. Prop being mutated: \""+o+'"',e)}),o in e||proxy(e,"_props",o)};for(var s in t)o(s);toggleObserving(!0)}function initData(e){var t=e.$options.data;isPlainObject$1(t=e._data="function"==typeof t?getData(t,e):t||{})||(t={},warn("data functions should return an object:\nhttps://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function",e));for(var r=Object.keys(t),n=e.$options.props,i=e.$options.methods,a=r.length;a--;){var o=r[a];i&&hasOwn(i,o)&&warn('Method "'+o+'" has already been defined as a data property.',e),n&&hasOwn(n,o)?warn('The data property "'+o+'" is already declared as a prop. Use prop default value instead.',e):isReserved(o)||proxy(e,"_data",o)}observe(t,!0)}function getData(e,t){pushTarget();try{return e.call(t,t)}catch(e){return handleError(e,t,"data()"),{}}finally{popTarget()}}var computedWatcherOptions={lazy:!0};function initComputed(e,t){var r=e._computedWatchers=Object.create(null),n=isServerRendering();for(var i in t){var a=t[i],o="function"==typeof a?a:a.get;null==o&&warn('Getter is missing for computed property "'+i+'".',e),n||(r[i]=new Watcher(e,o||noop$1,noop$1,computedWatcherOptions)),i in e?i in e.$data?warn('The computed property "'+i+'" is already defined in data.',e):e.$options.props&&i in e.$options.props&&warn('The computed property "'+i+'" is already defined as a prop.',e):defineComputed(e,i,a)}}function defineComputed(e,t,r){var n=!isServerRendering();"function"==typeof r?(sharedPropertyDefinition.get=n?createComputedGetter(t):createGetterInvoker(r),sharedPropertyDefinition.set=noop$1):(sharedPropertyDefinition.get=r.get?n&&!1!==r.cache?createComputedGetter(t):createGetterInvoker(r.get):noop$1,sharedPropertyDefinition.set=r.set||noop$1),sharedPropertyDefinition.set===noop$1&&(sharedPropertyDefinition.set=function(){warn('Computed property "'+t+'" was assigned to but it has no setter.',this)}),Object.defineProperty(e,t,sharedPropertyDefinition)}function createComputedGetter(e){return function(){var t=this._computedWatchers&&this._computedWatchers[e];if(t)return t.dirty&&t.evaluate(),Dep.target&&t.depend(),t.value}}function createGetterInvoker(e){return function(){return e.call(this,this)}}function initMethods(e,t){var r=e.$options.props;for(var n in t)"function"!=typeof t[n]&&warn('Method "'+n+'" has type "'+_typeof(t[n])+'" in the component definition. Did you reference the function correctly?',e),r&&hasOwn(r,n)&&warn('Method "'+n+'" has already been defined as a prop.',e),n in e&&isReserved(n)&&warn('Method "'+n+'" conflicts with an existing Vue instance method. Avoid defining component methods that start with _ or $.'),e[n]="function"!=typeof t[n]?noop$1:bind(t[n],e)}function initWatch(e,t){for(var r in t){var n=t[r];if(Array.isArray(n))for(var i=0;i<n.length;i++)createWatcher(e,r,n[i]);else createWatcher(e,r,n)}}function createWatcher(e,t,r,n){return isPlainObject$1(r)&&(n=r,r=r.handler),"string"==typeof r&&(r=e[r]),e.$watch(t,r,n)}function stateMixin(e){var t={get:function(){return this._data}},r={get:function(){return this._props}};t.set=function(){warn("Avoid replacing instance root $data. Use nested data properties instead.",this)},r.set=function(){warn("$props is readonly.",this)},Object.defineProperty(e.prototype,"$data",t),Object.defineProperty(e.prototype,"$props",r),e.prototype.$set=set$1,e.prototype.$delete=del,e.prototype.$watch=function(e,t,r){if(isPlainObject$1(t))return createWatcher(this,e,t,r);(r=r||{}).user=!0;var n=new Watcher(this,e,t,r);if(r.immediate)try{t.call(this,n.value)}catch(e){handleError(e,this,'callback for immediate watcher "'+n.expression+'"')}return function(){n.teardown()}}}var uid$3=0;function initMixin(e){e.prototype._init=function(e){var t,r,n=this;n._uid=uid$3++,config.performance&&mark&&(t="vue-perf-start:"+n._uid,r="vue-perf-end:"+n._uid,mark(t)),n._isVue=!0,e&&e._isComponent?initInternalComponent(n,e):n.$options=mergeOptions(resolveConstructorOptions(n.constructor),e||{},n),initProxy(n),n._self=n,initLifecycle(n),initEvents(n),initRender(n),callHook(n,"beforeCreate"),initInjections(n),initState(n),initProvide(n),callHook(n,"created"),config.performance&&mark&&(n._name=formatComponentName(n,!1),mark(r),measure("vue "+n._name+" init",t,r)),n.$options.el&&n.$mount(n.$options.el)}}function initInternalComponent(e,t){var r=e.$options=Object.create(e.constructor.options),n=t._parentVnode;r.parent=t.parent,r._parentVnode=n;var i=n.componentOptions;r.propsData=i.propsData,r._parentListeners=i.listeners,r._renderChildren=i.children,r._componentTag=i.tag,t.render&&(r.render=t.render,r.staticRenderFns=t.staticRenderFns)}function resolveConstructorOptions(e){var t=e.options;if(e.super){var r=resolveConstructorOptions(e.super);if(r!==e.superOptions){e.superOptions=r;var n=resolveModifiedOptions(e);n&&extend(e.extendOptions,n),(t=e.options=mergeOptions(r,e.extendOptions)).name&&(t.components[t.name]=e)}}return t}function resolveModifiedOptions(e){var t,r=e.options,n=e.sealedOptions;for(var i in r)r[i]!==n[i]&&(t||(t={}),t[i]=r[i]);return t}function Vue(e){this instanceof Vue||warn("Vue is a constructor and should be called with the `new` keyword"),this._init(e)}function initUse(e){e.use=function(e){var t=this._installedPlugins||(this._installedPlugins=[]);if(t.indexOf(e)>-1)return this;var r=toArray$1(arguments,1);return r.unshift(this),"function"==typeof e.install?e.install.apply(e,r):"function"==typeof e&&e.apply(null,r),t.push(e),this}}function initMixin$1(e){e.mixin=function(e){return this.options=mergeOptions(this.options,e),this}}function initExtend(e){e.cid=0;var t=1;e.extend=function(e){e=e||{};var r=this,n=r.cid,i=e._Ctor||(e._Ctor={});if(i[n])return i[n];var a=e.name||r.options.name;a&&validateComponentName(a);var o=function(e){this._init(e)};return(o.prototype=Object.create(r.prototype)).constructor=o,o.cid=t++,o.options=mergeOptions(r.options,e),o.super=r,o.options.props&&initProps$1(o),o.options.computed&&initComputed$1(o),o.extend=r.extend,o.mixin=r.mixin,o.use=r.use,ASSET_TYPES.forEach(function(e){o[e]=r[e]}),a&&(o.options.components[a]=o),o.superOptions=r.options,o.extendOptions=e,o.sealedOptions=extend({},o.options),i[n]=o,o}}function initProps$1(e){var t=e.options.props;for(var r in t)proxy(e.prototype,"_props",r)}function initComputed$1(e){var t=e.options.computed;for(var r in t)defineComputed(e.prototype,r,t[r])}function initAssetRegisters(e){ASSET_TYPES.forEach(function(t){e[t]=function(e,r){return r?("component"===t&&validateComponentName(e),"component"===t&&isPlainObject$1(r)&&(r.name=r.name||e,r=this.options._base.extend(r)),"directive"===t&&"function"==typeof r&&(r={bind:r,update:r}),this.options[t+"s"][e]=r,r):this.options[t+"s"][e]}})}function getComponentName(e){return e&&(e.Ctor.options.name||e.tag)}function matches(e,t){return Array.isArray(e)?e.indexOf(t)>-1:"string"==typeof e?e.split(",").indexOf(t)>-1:!!isRegExp(e)&&e.test(t)}function pruneCache(e,t){var r=e.cache,n=e.keys,i=e._vnode;for(var a in r){var o=r[a];if(o){var s=getComponentName(o.componentOptions);s&&!t(s)&&pruneCacheEntry(r,a,n,i)}}}function pruneCacheEntry(e,t,r,n){var i=e[t];!i||n&&i.tag===n.tag||i.componentInstance.$destroy(),e[t]=null,remove(r,t)}initMixin(Vue),stateMixin(Vue),eventsMixin(Vue),lifecycleMixin(Vue),renderMixin(Vue);var patternTypes=[String,RegExp,Array],KeepAlive={name:"keep-alive",abstract:!0,props:{include:patternTypes,exclude:patternTypes,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)pruneCacheEntry(this.cache,e,this.keys)},mounted:function(){var e=this;this.$watch("include",function(t){pruneCache(e,function(e){return matches(t,e)})}),this.$watch("exclude",function(t){pruneCache(e,function(e){return!matches(t,e)})})},render:function(){var e=this.$slots.default,t=getFirstComponentChild(e),r=t&&t.componentOptions;if(r){var n=getComponentName(r),i=this.include,a=this.exclude;if(i&&(!n||!matches(i,n))||a&&n&&matches(a,n))return t;var o=this.cache,s=this.keys,l=null==t.key?r.Ctor.cid+(r.tag?"::"+r.tag:""):t.key;o[l]?(t.componentInstance=o[l].componentInstance,remove(s,l),s.push(l)):(o[l]=t,s.push(l),this.max&&s.length>parseInt(this.max)&&pruneCacheEntry(o,s[0],s,this._vnode)),t.data.keepAlive=!0}return t||e&&e[0]}},builtInComponents={KeepAlive:KeepAlive};function initGlobalAPI(e){var t={get:function(){return config},set:function(){warn("Do not replace the Vue.config object, set individual fields instead.")}};Object.defineProperty(e,"config",t),e.util={warn:warn,extend:extend,mergeOptions:mergeOptions,defineReactive:defineReactive$$1},e.set=set$1,e.delete=del,e.nextTick=nextTick,e.observable=function(e){return observe(e),e},e.options=Object.create(null),ASSET_TYPES.forEach(function(t){e.options[t+"s"]=Object.create(null)}),e.options._base=e,extend(e.options.components,builtInComponents),initUse(e),initMixin$1(e),initExtend(e),initAssetRegisters(e)}initGlobalAPI(Vue),Object.defineProperty(Vue.prototype,"$isServer",{get:isServerRendering}),Object.defineProperty(Vue.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Vue,"FunctionalRenderContext",{value:FunctionalRenderContext}),Vue.version="2.6.6";var isReservedAttr=makeMap("style,class"),acceptValue=makeMap("input,textarea,option,select,progress"),mustUseProp=function(e,t,r){return"value"===r&&acceptValue(e)&&"button"!==t||"selected"===r&&"option"===e||"checked"===r&&"input"===e||"muted"===r&&"video"===e},isEnumeratedAttr=makeMap("contenteditable,draggable,spellcheck"),isValidContentEditableValue=makeMap("events,caret,typing,plaintext-only"),convertEnumeratedValue=function(e,t){return isFalsyAttrValue(t)||"false"===t?"false":"contenteditable"===e&&isValidContentEditableValue(t)?t:"true"},isBooleanAttr=makeMap("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),xlinkNS="http://www.w3.org/1999/xlink",isXlink=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},getXlinkProp=function(e){return isXlink(e)?e.slice(6,e.length):""},isFalsyAttrValue=function(e){return null==e||!1===e};function genClassForVnode(e){for(var t=e.data,r=e,n=e;isDef(n.componentInstance);)(n=n.componentInstance._vnode)&&n.data&&(t=mergeClassData(n.data,t));for(;isDef(r=r.parent);)r&&r.data&&(t=mergeClassData(t,r.data));return renderClass(t.staticClass,t.class)}function mergeClassData(e,t){return{staticClass:concat(e.staticClass,t.staticClass),class:isDef(e.class)?[e.class,t.class]:t.class}}function renderClass(e,t){return isDef(e)||isDef(t)?concat(e,stringifyClass(t)):""}function concat(e,t){return e?t?e+" "+t:e:t||""}function stringifyClass(e){return Array.isArray(e)?stringifyArray(e):isObject$1(e)?stringifyObject(e):"string"==typeof e?e:""}function stringifyArray(e){for(var t,r="",n=0,i=e.length;n<i;n++)isDef(t=stringifyClass(e[n]))&&""!==t&&(r&&(r+=" "),r+=t);return r}function stringifyObject(e){var t="";for(var r in e)e[r]&&(t&&(t+=" "),t+=r);return t}var namespaceMap={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},isHTMLTag=makeMap("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),isSVG=makeMap("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),isPreTag=function(e){return"pre"===e},isReservedTag=function(e){return isHTMLTag(e)||isSVG(e)};function getTagNamespace(e){return isSVG(e)?"svg":"math"===e?"math":void 0}var unknownElementCache=Object.create(null);function isUnknownElement(e){if(!inBrowser)return!0;if(isReservedTag(e))return!1;if(e=e.toLowerCase(),null!=unknownElementCache[e])return unknownElementCache[e];var t=document.createElement(e);return e.indexOf("-")>-1?unknownElementCache[e]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:unknownElementCache[e]=/HTMLUnknownElement/.test(t.toString())}var isTextInputType=makeMap("text,number,password,search,email,tel,url");function query(e){if("string"==typeof e){var t=document.querySelector(e);return t||(warn("Cannot find element: "+e),document.createElement("div"))}return e}function createElement$1(e,t){var r=document.createElement(e);return"select"!==e?r:(t.data&&t.data.attrs&&void 0!==t.data.attrs.multiple&&r.setAttribute("multiple","multiple"),r)}function createElementNS(e,t){return document.createElementNS(namespaceMap[e],t)}function createTextNode(e){return document.createTextNode(e)}function createComment(e){return document.createComment(e)}function insertBefore(e,t,r){e.insertBefore(t,r)}function removeChild(e,t){e.removeChild(t)}function appendChild(e,t){e.appendChild(t)}function parentNode(e){return e.parentNode}function nextSibling(e){return e.nextSibling}function tagName(e){return e.tagName}function setTextContent(e,t){e.textContent=t}function setStyleScope(e,t){e.setAttribute(t,"")}var nodeOps=Object.freeze({createElement:createElement$1,createElementNS:createElementNS,createTextNode:createTextNode,createComment:createComment,insertBefore:insertBefore,removeChild:removeChild,appendChild:appendChild,parentNode:parentNode,nextSibling:nextSibling,tagName:tagName,setTextContent:setTextContent,setStyleScope:setStyleScope}),ref={create:function(e,t){registerRef(t)},update:function(e,t){e.data.ref!==t.data.ref&&(registerRef(e,!0),registerRef(t))},destroy:function(e){registerRef(e,!0)}};function registerRef(e,t){var r=e.data.ref;if(isDef(r)){var n=e.context,i=e.componentInstance||e.elm,a=n.$refs;t?Array.isArray(a[r])?remove(a[r],i):a[r]===i&&(a[r]=void 0):e.data.refInFor?Array.isArray(a[r])?a[r].indexOf(i)<0&&a[r].push(i):a[r]=[i]:a[r]=i}}var emptyNode=new VNode("",{},[]),hooks=["create","activate","update","remove","destroy"];function sameVnode(e,t){return e.key===t.key&&(e.tag===t.tag&&e.isComment===t.isComment&&isDef(e.data)===isDef(t.data)&&sameInputType(e,t)||isTrue(e.isAsyncPlaceholder)&&e.asyncFactory===t.asyncFactory&&isUndef(t.asyncFactory.error))}function sameInputType(e,t){if("input"!==e.tag)return!0;var r,n=isDef(r=e.data)&&isDef(r=r.attrs)&&r.type,i=isDef(r=t.data)&&isDef(r=r.attrs)&&r.type;return n===i||isTextInputType(n)&&isTextInputType(i)}function createKeyToOldIdx(e,t,r){var n,i,a={};for(n=t;n<=r;++n)isDef(i=e[n].key)&&(a[i]=n);return a}function createPatchFunction(e){var t,r,n={},i=e.modules,a=e.nodeOps;for(t=0;t<hooks.length;++t)for(n[hooks[t]]=[],r=0;r<i.length;++r)isDef(i[r][hooks[t]])&&n[hooks[t]].push(i[r][hooks[t]]);function o(e){var t=a.parentNode(e);isDef(t)&&a.removeChild(t,e)}function s(e,t){return!t&&!e.ns&&!(config.ignoredElements.length&&config.ignoredElements.some(function(t){return isRegExp(t)?t.test(e.tag):t===e.tag}))&&config.isUnknownElement(e.tag)}var l=0;function u(e,t,r,i,o,u,f){if(isDef(e.elm)&&isDef(u)&&(e=u[f]=cloneVNode(e)),e.isRootInsert=!o,!function(e,t,r,i){var a=e.data;if(isDef(a)){var o=isDef(e.componentInstance)&&a.keepAlive;if(isDef(a=a.hook)&&isDef(a=a.init)&&a(e,!1),isDef(e.componentInstance))return c(e,t),d(r,e.elm,i),isTrue(o)&&function(e,t,r,i){var a,o=e;for(;o.componentInstance;)if(o=o.componentInstance._vnode,isDef(a=o.data)&&isDef(a=a.transition)){for(a=0;a<n.activate.length;++a)n.activate[a](emptyNode,o);t.push(o);break}d(r,e.elm,i)}(e,t,r,i),!0}}(e,t,r,i)){var m=e.data,v=e.children,y=e.tag;isDef(y)?(m&&m.pre&&l++,s(e,l)&&warn("Unknown custom element: <"+y+'> - did you register the component correctly? For recursive components, make sure to provide the "name" option.',e.context),e.elm=e.ns?a.createElementNS(e.ns,y):a.createElement(y,e),g(e),h(e,v,t),isDef(m)&&p(e,t),d(r,e.elm,i),m&&m.pre&&l--):isTrue(e.isComment)?(e.elm=a.createComment(e.text),d(r,e.elm,i)):(e.elm=a.createTextNode(e.text),d(r,e.elm,i))}}function c(e,t){isDef(e.data.pendingInsert)&&(t.push.apply(t,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,f(e)?(p(e,t),g(e)):(registerRef(e),t.push(e))}function d(e,t,r){isDef(e)&&(isDef(r)?a.parentNode(r)===e&&a.insertBefore(e,t,r):a.appendChild(e,t))}function h(e,t,r){if(Array.isArray(t)){_(t);for(var n=0;n<t.length;++n)u(t[n],r,e.elm,null,!0,t,n)}else isPrimitive(e.text)&&a.appendChild(e.elm,a.createTextNode(String(e.text)))}function f(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return isDef(e.tag)}function p(e,r){for(var i=0;i<n.create.length;++i)n.create[i](emptyNode,e);isDef(t=e.data.hook)&&(isDef(t.create)&&t.create(emptyNode,e),isDef(t.insert)&&r.push(e))}function g(e){var t;if(isDef(t=e.fnScopeId))a.setStyleScope(e.elm,t);else for(var r=e;r;)isDef(t=r.context)&&isDef(t=t.$options._scopeId)&&a.setStyleScope(e.elm,t),r=r.parent;isDef(t=activeInstance)&&t!==e.context&&t!==e.fnContext&&isDef(t=t.$options._scopeId)&&a.setStyleScope(e.elm,t)}function m(e,t,r,n,i,a){for(;n<=i;++n)u(r[n],a,e,t,!1,r,n)}function v(e){var t,r,i=e.data;if(isDef(i))for(isDef(t=i.hook)&&isDef(t=t.destroy)&&t(e),t=0;t<n.destroy.length;++t)n.destroy[t](e);if(isDef(t=e.children))for(r=0;r<e.children.length;++r)v(e.children[r])}function y(e,t,r,n){for(;r<=n;++r){var i=t[r];isDef(i)&&(isDef(i.tag)?(b(i),v(i)):o(i.elm))}}function b(e,t){if(isDef(t)||isDef(e.data)){var r,i=n.remove.length+1;for(isDef(t)?t.listeners+=i:t=function(e,t){function r(){0==--r.listeners&&o(e)}return r.listeners=t,r}(e.elm,i),isDef(r=e.componentInstance)&&isDef(r=r._vnode)&&isDef(r.data)&&b(r,t),r=0;r<n.remove.length;++r)n.remove[r](e,t);isDef(r=e.data.hook)&&isDef(r=r.remove)?r(e,t):t()}else o(e.elm)}function _(e){for(var t={},r=0;r<e.length;r++){var n=e[r],i=n.key;isDef(i)&&(t[i]?warn("Duplicate keys detected: '"+i+"'. This may cause an update error.",n.context):t[i]=!0)}}function w(e,t,r,n){for(var i=r;i<n;i++){var a=t[i];if(isDef(a)&&sameVnode(e,a))return i}}function x(e,t,r,i,o,s){if(e!==t){isDef(t.elm)&&isDef(i)&&(t=i[o]=cloneVNode(t));var l=t.elm=e.elm;if(isTrue(e.isAsyncPlaceholder))isDef(t.asyncFactory.resolved)?C(e.elm,t,r):t.isAsyncPlaceholder=!0;else if(isTrue(t.isStatic)&&isTrue(e.isStatic)&&t.key===e.key&&(isTrue(t.isCloned)||isTrue(t.isOnce)))t.componentInstance=e.componentInstance;else{var c,d=t.data;isDef(d)&&isDef(c=d.hook)&&isDef(c=c.prepatch)&&c(e,t);var h=e.children,p=t.children;if(isDef(d)&&f(t)){for(c=0;c<n.update.length;++c)n.update[c](e,t);isDef(c=d.hook)&&isDef(c=c.update)&&c(e,t)}isUndef(t.text)?isDef(h)&&isDef(p)?h!==p&&function(e,t,r,n,i){var o,s,l,c=0,d=0,h=t.length-1,f=t[0],p=t[h],g=r.length-1,v=r[0],b=r[g],S=!i;for(_(r);c<=h&&d<=g;)isUndef(f)?f=t[++c]:isUndef(p)?p=t[--h]:sameVnode(f,v)?(x(f,v,n,r,d),f=t[++c],v=r[++d]):sameVnode(p,b)?(x(p,b,n,r,g),p=t[--h],b=r[--g]):sameVnode(f,b)?(x(f,b,n,r,g),S&&a.insertBefore(e,f.elm,a.nextSibling(p.elm)),f=t[++c],b=r[--g]):sameVnode(p,v)?(x(p,v,n,r,d),S&&a.insertBefore(e,p.elm,f.elm),p=t[--h],v=r[++d]):(isUndef(o)&&(o=createKeyToOldIdx(t,c,h)),isUndef(s=isDef(v.key)?o[v.key]:w(v,t,c,h))?u(v,n,e,f.elm,!1,r,d):sameVnode(l=t[s],v)?(x(l,v,n,r,d),t[s]=void 0,S&&a.insertBefore(e,l.elm,f.elm)):u(v,n,e,f.elm,!1,r,d),v=r[++d]);c>h?m(e,isUndef(r[g+1])?null:r[g+1].elm,r,d,g,n):d>g&&y(0,t,c,h)}(l,h,p,r,s):isDef(p)?(_(p),isDef(e.text)&&a.setTextContent(l,""),m(l,null,p,0,p.length-1,r)):isDef(h)?y(0,h,0,h.length-1):isDef(e.text)&&a.setTextContent(l,""):e.text!==t.text&&a.setTextContent(l,t.text),isDef(d)&&isDef(c=d.hook)&&isDef(c=c.postpatch)&&c(e,t)}}}function S(e,t,r){if(isTrue(r)&&isDef(e.parent))e.parent.data.pendingInsert=t;else for(var n=0;n<t.length;++n)t[n].data.hook.insert(t[n])}var k=!1,$=makeMap("attrs,class,staticClass,staticStyle,key");function C(e,t,r,n){var i,a=t.tag,o=t.data,l=t.children;if(n=n||o&&o.pre,t.elm=e,isTrue(t.isComment)&&isDef(t.asyncFactory))return t.isAsyncPlaceholder=!0,!0;if(!function(e,t,r){return isDef(t.tag)?0===t.tag.indexOf("vue-component")||!s(t,r)&&t.tag.toLowerCase()===(e.tagName&&e.tagName.toLowerCase()):e.nodeType===(t.isComment?8:3)}(e,t,n))return!1;if(isDef(o)&&(isDef(i=o.hook)&&isDef(i=i.init)&&i(t,!0),isDef(i=t.componentInstance)))return c(t,r),!0;if(isDef(a)){if(isDef(l))if(e.hasChildNodes())if(isDef(i=o)&&isDef(i=i.domProps)&&isDef(i=i.innerHTML)){if(i!==e.innerHTML)return"undefined"==typeof console||k||(k=!0,console.warn("Parent: ",e),console.warn("server innerHTML: ",i),console.warn("client innerHTML: ",e.innerHTML)),!1}else{for(var u=!0,d=e.firstChild,f=0;f<l.length;f++){if(!d||!C(d,l[f],r,n)){u=!1;break}d=d.nextSibling}if(!u||d)return"undefined"==typeof console||k||(k=!0,console.warn("Parent: ",e),console.warn("Mismatching childNodes vs. VNodes: ",e.childNodes,l)),!1}else h(t,l,r);if(isDef(o)){var g=!1;for(var m in o)if(!$(m)){g=!0,p(t,r);break}!g&&o.class&&traverse(o.class)}}else e.data!==t.text&&(e.data=t.text);return!0}return function(e,t,r,i){if(!isUndef(t)){var o,s=!1,l=[];if(isUndef(e))s=!0,u(t,l);else{var c=isDef(e.nodeType);if(!c&&sameVnode(e,t))x(e,t,l,null,null,i);else{if(c){if(1===e.nodeType&&e.hasAttribute(SSR_ATTR)&&(e.removeAttribute(SSR_ATTR),r=!0),isTrue(r)){if(C(e,t,l))return S(t,l,!0),e;warn("The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside <p>, or missing <tbody>. Bailing hydration and performing full client-side render.")}o=e,e=new VNode(a.tagName(o).toLowerCase(),{},[],void 0,o)}var d=e.elm,h=a.parentNode(d);if(u(t,l,d._leaveCb?null:h,a.nextSibling(d)),isDef(t.parent))for(var p=t.parent,g=f(t);p;){for(var m=0;m<n.destroy.length;++m)n.destroy[m](p);if(p.elm=t.elm,g){for(var b=0;b<n.create.length;++b)n.create[b](emptyNode,p);var _=p.data.hook.insert;if(_.merged)for(var w=1;w<_.fns.length;w++)_.fns[w]()}else registerRef(p);p=p.parent}isDef(h)?y(0,[e],0,0):isDef(e.tag)&&v(e)}}return S(t,l,s),t.elm}isDef(e)&&v(e)}}var directives={create:updateDirectives,update:updateDirectives,destroy:function(e){updateDirectives(e,emptyNode)}};function updateDirectives(e,t){(e.data.directives||t.data.directives)&&_update(e,t)}function _update(e,t){var r,n,i,a=e===emptyNode,o=t===emptyNode,s=normalizeDirectives$1(e.data.directives,e.context),l=normalizeDirectives$1(t.data.directives,t.context),u=[],c=[];for(r in l)n=s[r],i=l[r],n?(i.oldValue=n.value,i.oldArg=n.arg,callHook$1(i,"update",t,e),i.def&&i.def.componentUpdated&&c.push(i)):(callHook$1(i,"bind",t,e),i.def&&i.def.inserted&&u.push(i));if(u.length){var d=function(){for(var r=0;r<u.length;r++)callHook$1(u[r],"inserted",t,e)};a?mergeVNodeHook(t,"insert",d):d()}if(c.length&&mergeVNodeHook(t,"postpatch",function(){for(var r=0;r<c.length;r++)callHook$1(c[r],"componentUpdated",t,e)}),!a)for(r in s)l[r]||callHook$1(s[r],"unbind",e,e,o)}var emptyModifiers=Object.create(null);function normalizeDirectives$1(e,t){var r,n,i=Object.create(null);if(!e)return i;for(r=0;r<e.length;r++)(n=e[r]).modifiers||(n.modifiers=emptyModifiers),i[getRawDirName(n)]=n,n.def=resolveAsset(t.$options,"directives",n.name,!0);return i}function getRawDirName(e){return e.rawName||e.name+"."+Object.keys(e.modifiers||{}).join(".")}function callHook$1(e,t,r,n,i){var a=e.def&&e.def[t];if(a)try{a(r.elm,e,r,n,i)}catch(n){handleError(n,r.context,"directive "+e.name+" "+t+" hook")}}var baseModules=[ref,directives];function updateAttrs(e,t){var r=t.componentOptions;if(!(isDef(r)&&!1===r.Ctor.options.inheritAttrs||isUndef(e.data.attrs)&&isUndef(t.data.attrs))){var n,i,a=t.elm,o=e.data.attrs||{},s=t.data.attrs||{};for(n in isDef(s.__ob__)&&(s=t.data.attrs=extend({},s)),s)i=s[n],o[n]!==i&&setAttr(a,n,i);for(n in(isIE||isEdge)&&s.value!==o.value&&setAttr(a,"value",s.value),o)isUndef(s[n])&&(isXlink(n)?a.removeAttributeNS(xlinkNS,getXlinkProp(n)):isEnumeratedAttr(n)||a.removeAttribute(n))}}function setAttr(e,t,r){e.tagName.indexOf("-")>-1?baseSetAttr(e,t,r):isBooleanAttr(t)?isFalsyAttrValue(r)?e.removeAttribute(t):(r="allowfullscreen"===t&&"EMBED"===e.tagName?"true":t,e.setAttribute(t,r)):isEnumeratedAttr(t)?e.setAttribute(t,convertEnumeratedValue(t,r)):isXlink(t)?isFalsyAttrValue(r)?e.removeAttributeNS(xlinkNS,getXlinkProp(t)):e.setAttributeNS(xlinkNS,t,r):baseSetAttr(e,t,r)}function baseSetAttr(e,t,r){if(isFalsyAttrValue(r))e.removeAttribute(t);else{if(isIE&&!isIE9&&"TEXTAREA"===e.tagName&&"placeholder"===t&&""!==r&&!e.__ieph){e.addEventListener("input",function t(r){r.stopImmediatePropagation(),e.removeEventListener("input",t)}),e.__ieph=!0}e.setAttribute(t,r)}}var attrs={create:updateAttrs,update:updateAttrs};function updateClass(e,t){var r=t.elm,n=t.data,i=e.data;if(!(isUndef(n.staticClass)&&isUndef(n.class)&&(isUndef(i)||isUndef(i.staticClass)&&isUndef(i.class)))){var a=genClassForVnode(t),o=r._transitionClasses;isDef(o)&&(a=concat(a,stringifyClass(o))),a!==r._prevClass&&(r.setAttribute("class",a),r._prevClass=a)}}var len,str,chr,index$1,expressionPos,expressionEndPos,warn$1,klass={create:updateClass,update:updateClass},validDivisionCharRE=/[\w).+\-_$\]]/;function parseFilters(e){var t,r,n,i,a,o=!1,s=!1,l=!1,u=!1,c=0,d=0,h=0,f=0;for(n=0;n<e.length;n++)if(r=t,t=e.charCodeAt(n),o)39===t&&92!==r&&(o=!1);else if(s)34===t&&92!==r&&(s=!1);else if(l)96===t&&92!==r&&(l=!1);else if(u)47===t&&92!==r&&(u=!1);else if(124!==t||124===e.charCodeAt(n+1)||124===e.charCodeAt(n-1)||c||d||h){switch(t){case 34:s=!0;break;case 39:o=!0;break;case 96:l=!0;break;case 40:h++;break;case 41:h--;break;case 91:d++;break;case 93:d--;break;case 123:c++;break;case 125:c--}if(47===t){for(var p=n-1,g=void 0;p>=0&&" "===(g=e.charAt(p));p--);g&&validDivisionCharRE.test(g)||(u=!0)}}else void 0===i?(f=n+1,i=e.slice(0,n).trim()):m();function m(){(a||(a=[])).push(e.slice(f,n).trim()),f=n+1}if(void 0===i?i=e.slice(0,n).trim():0!==f&&m(),a)for(n=0;n<a.length;n++)i=wrapFilter(i,a[n]);return i}function wrapFilter(e,t){var r=t.indexOf("(");if(r<0)return'_f("'+t+'")('+e+")";var n=t.slice(0,r),i=t.slice(r+1);return'_f("'+n+'")('+e+(")"!==i?","+i:i)}function baseWarn(e,t){console.error("[Vue compiler]: "+e)}function pluckModuleFunction(e,t){return e?e.map(function(e){return e[t]}).filter(function(e){return e}):[]}function addProp(e,t,r,n,i){(e.props||(e.props=[])).push(rangeSetItem({name:t,value:r,dynamic:i},n)),e.plain=!1}function addAttr(e,t,r,n,i){(i?e.dynamicAttrs||(e.dynamicAttrs=[]):e.attrs||(e.attrs=[])).push(rangeSetItem({name:t,value:r,dynamic:i},n)),e.plain=!1}function addRawAttr(e,t,r,n){e.attrsMap[t]=r,e.attrsList.push(rangeSetItem({name:t,value:r},n))}function addDirective(e,t,r,n,i,a,o,s){(e.directives||(e.directives=[])).push(rangeSetItem({name:t,rawName:r,value:n,arg:i,isDynamicArg:a,modifiers:o},s)),e.plain=!1}function prependModifierMarker(e,t,r){return r?"_p("+t+',"'+e+'")':e+t}function addHandler(e,t,r,n,i,a,o,s){var l;n=n||emptyObject,a&&n.prevent&&n.passive&&a("passive and prevent can't be used together. Passive handler can't prevent default event.",o),n.right?s?t="("+t+")==='click'?'contextmenu':("+t+")":"click"===t&&(t="contextmenu",delete n.right):n.middle&&(s?t="("+t+")==='click'?'mouseup':("+t+")":"click"===t&&(t="mouseup")),n.capture&&(delete n.capture,t=prependModifierMarker("!",t,s)),n.once&&(delete n.once,t=prependModifierMarker("~",t,s)),n.passive&&(delete n.passive,t=prependModifierMarker("&",t,s)),n.native?(delete n.native,l=e.nativeEvents||(e.nativeEvents={})):l=e.events||(e.events={});var u=rangeSetItem({value:r.trim(),dynamic:s},o);n!==emptyObject&&(u.modifiers=n);var c=l[t];Array.isArray(c)?i?c.unshift(u):c.push(u):l[t]=c?i?[u,c]:[c,u]:u,e.plain=!1}function getRawBindingAttr(e,t){return e.rawAttrsMap[":"+t]||e.rawAttrsMap["v-bind:"+t]||e.rawAttrsMap[t]}function getBindingAttr(e,t,r){var n=getAndRemoveAttr(e,":"+t)||getAndRemoveAttr(e,"v-bind:"+t);if(null!=n)return parseFilters(n);if(!1!==r){var i=getAndRemoveAttr(e,t);if(null!=i)return JSON.stringify(i)}}function getAndRemoveAttr(e,t,r){var n;if(null!=(n=e.attrsMap[t]))for(var i=e.attrsList,a=0,o=i.length;a<o;a++)if(i[a].name===t){i.splice(a,1);break}return r&&delete e.attrsMap[t],n}function getAndRemoveAttrByRegex(e,t){for(var r=e.attrsList,n=0,i=r.length;n<i;n++){var a=r[n];if(t.test(a.name))return r.splice(n,1),a}}function rangeSetItem(e,t){return t&&(null!=t.start&&(e.start=t.start),null!=t.end&&(e.end=t.end)),e}function genComponentModel(e,t,r){var n=r||{},i=n.number,a="$$v";n.trim&&(a="(typeof $$v === 'string'? $$v.trim(): $$v)"),i&&(a="_n("+a+")");var o=genAssignmentCode(t,a);e.model={value:"("+t+")",expression:JSON.stringify(t),callback:"function ($$v) {"+o+"}"}}function genAssignmentCode(e,t){var r=parseModel(e);return null===r.key?e+"="+t:"$set("+r.exp+", "+r.key+", "+t+")"}function parseModel(e){if(e=e.trim(),len=e.length,e.indexOf("[")<0||e.lastIndexOf("]")<len-1)return(index$1=e.lastIndexOf("."))>-1?{exp:e.slice(0,index$1),key:'"'+e.slice(index$1+1)+'"'}:{exp:e,key:null};for(str=e,index$1=expressionPos=expressionEndPos=0;!eof();)isStringStart(chr=next())?parseString(chr):91===chr&&parseBracket(chr);return{exp:e.slice(0,expressionPos),key:e.slice(expressionPos+1,expressionEndPos)}}function next(){return str.charCodeAt(++index$1)}function eof(){return index$1>=len}function isStringStart(e){return 34===e||39===e}function parseBracket(e){var t=1;for(expressionPos=index$1;!eof();)if(isStringStart(e=next()))parseString(e);else if(91===e&&t++,93===e&&t--,0===t){expressionEndPos=index$1;break}}function parseString(e){for(var t=e;!eof()&&(e=next())!==t;);}var target$1,RANGE_TOKEN="__r",CHECKBOX_RADIO_TOKEN="__c";function model(e,t,r){warn$1=r;var n=t.value,i=t.modifiers,a=e.tag,o=e.attrsMap.type;if("input"===a&&"file"===o&&warn$1("<"+e.tag+' v-model="'+n+'" type="file">:\nFile inputs are read only. Use a v-on:change listener instead.',e.rawAttrsMap["v-model"]),e.component)return genComponentModel(e,n,i),!1;if("select"===a)genSelect(e,n,i);else if("input"===a&&"checkbox"===o)genCheckboxModel(e,n,i);else if("input"===a&&"radio"===o)genRadioModel(e,n,i);else if("input"===a||"textarea"===a)genDefaultModel(e,n,i);else{if(!config.isReservedTag(a))return genComponentModel(e,n,i),!1;warn$1("<"+e.tag+' v-model="'+n+"\">: v-model is not supported on this element type. If you are working with contenteditable, it's recommended to wrap a library dedicated for that purpose inside a custom component.",e.rawAttrsMap["v-model"])}return!0}function genCheckboxModel(e,t,r){var n=r&&r.number,i=getBindingAttr(e,"value")||"null",a=getBindingAttr(e,"true-value")||"true",o=getBindingAttr(e,"false-value")||"false";addProp(e,"checked","Array.isArray("+t+")?_i("+t+","+i+")>-1"+("true"===a?":("+t+")":":_q("+t+","+a+")")),addHandler(e,"change","var $$a="+t+",$$el=$event.target,$$c=$$el.checked?("+a+"):("+o+");if(Array.isArray($$a)){var $$v="+(n?"_n("+i+")":i)+",$$i=_i($$a,$$v);if($$el.checked){$$i<0&&("+genAssignmentCode(t,"$$a.concat([$$v])")+")}else{$$i>-1&&("+genAssignmentCode(t,"$$a.slice(0,$$i).concat($$a.slice($$i+1))")+")}}else{"+genAssignmentCode(t,"$$c")+"}",null,!0)}function genRadioModel(e,t,r){var n=r&&r.number,i=getBindingAttr(e,"value")||"null";addProp(e,"checked","_q("+t+","+(i=n?"_n("+i+")":i)+")"),addHandler(e,"change",genAssignmentCode(t,i),null,!0)}function genSelect(e,t,r){var n="var $$selectedVal = "+('Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return '+(r&&r.number?"_n(val)":"val")+"})")+";";addHandler(e,"change",n=n+" "+genAssignmentCode(t,"$event.target.multiple ? $$selectedVal : $$selectedVal[0]"),null,!0)}function genDefaultModel(e,t,r){var n=e.attrsMap.type,i=e.attrsMap["v-bind:value"]||e.attrsMap[":value"],a=e.attrsMap["v-bind:type"]||e.attrsMap[":type"];if(i&&!a){var o=e.attrsMap["v-bind:value"]?"v-bind:value":":value";warn$1(o+'="'+i+'" conflicts with v-model on the same element because the latter already expands to a value binding internally',e.rawAttrsMap[o])}var s=r||{},l=s.lazy,u=s.number,c=s.trim,d=!l&&"range"!==n,h=l?"change":"range"===n?RANGE_TOKEN:"input",f="$event.target.value";c&&(f="$event.target.value.trim()"),u&&(f="_n("+f+")");var p=genAssignmentCode(t,f);d&&(p="if($event.target.composing)return;"+p),addProp(e,"value","("+t+")"),addHandler(e,h,p,null,!0),(c||u)&&addHandler(e,"blur","$forceUpdate()")}function normalizeEvents(e){if(isDef(e[RANGE_TOKEN])){var t=isIE?"change":"input";e[t]=[].concat(e[RANGE_TOKEN],e[t]||[]),delete e[RANGE_TOKEN]}isDef(e[CHECKBOX_RADIO_TOKEN])&&(e.change=[].concat(e[CHECKBOX_RADIO_TOKEN],e.change||[]),delete e[CHECKBOX_RADIO_TOKEN])}function createOnceHandler$1(e,t,r){var n=target$1;return function i(){null!==t.apply(null,arguments)&&remove$2(e,i,r,n)}}var useMicrotaskFix=isUsingMicroTask&&!(isFF&&Number(isFF[1])<=53);function add$1(e,t,r,n){if(useMicrotaskFix){var i=currentFlushTimestamp,a=t;t=a._wrapper=function(e){if(e.target===e.currentTarget||e.timeStamp>=i||0===e.timeStamp||e.target.ownerDocument!==document)return a.apply(this,arguments)}}target$1.addEventListener(e,t,supportsPassive?{capture:r,passive:n}:r)}function remove$2(e,t,r,n){(n||target$1).removeEventListener(e,t._wrapper||t,r)}function updateDOMListeners(e,t){if(!isUndef(e.data.on)||!isUndef(t.data.on)){var r=t.data.on||{},n=e.data.on||{};target$1=t.elm,normalizeEvents(r),updateListeners(r,n,add$1,remove$2,createOnceHandler$1,t.context),target$1=void 0}}var svgContainer,events={create:updateDOMListeners,update:updateDOMListeners};function updateDOMProps(e,t){if(!isUndef(e.data.domProps)||!isUndef(t.data.domProps)){var r,n,i=t.elm,a=e.data.domProps||{},o=t.data.domProps||{};for(r in isDef(o.__ob__)&&(o=t.data.domProps=extend({},o)),a)isUndef(o[r])&&(i[r]="");for(r in o){if(n=o[r],"textContent"===r||"innerHTML"===r){if(t.children&&(t.children.length=0),n===a[r])continue;1===i.childNodes.length&&i.removeChild(i.childNodes[0])}if("value"===r||n!==a[r])if("value"===r){i._value=n;var s=isUndef(n)?"":String(n);shouldUpdateValue(i,s)&&(i.value=s)}else if("innerHTML"===r&&isSVG(i.tagName)&&isUndef(i.innerHTML)){(svgContainer=svgContainer||document.createElement("div")).innerHTML="<svg>"+n+"</svg>";for(var l=svgContainer.firstChild;i.firstChild;)i.removeChild(i.firstChild);for(;l.firstChild;)i.appendChild(l.firstChild)}else i[r]=n}}}function shouldUpdateValue(e,t){return!e.composing&&("OPTION"===e.tagName||isNotInFocusAndDirty(e,t)||isDirtyWithModifiers(e,t))}function isNotInFocusAndDirty(e,t){var r=!0;try{r=document.activeElement!==e}catch(e){}return r&&e.value!==t}function isDirtyWithModifiers(e,t){var r=e.value,n=e._vModifiers;if(isDef(n)){if(n.number)return toNumber(r)!==toNumber(t);if(n.trim)return r.trim()!==t.trim()}return r!==t}var domProps={create:updateDOMProps,update:updateDOMProps},parseStyleText=cached(function(e){var t={},r=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach(function(e){if(e){var n=e.split(r);n.length>1&&(t[n[0].trim()]=n[1].trim())}}),t});function normalizeStyleData(e){var t=normalizeStyleBinding(e.style);return e.staticStyle?extend(e.staticStyle,t):t}function normalizeStyleBinding(e){return Array.isArray(e)?toObject(e):"string"==typeof e?parseStyleText(e):e}function getStyle(e,t){var r,n={};if(t)for(var i=e;i.componentInstance;)(i=i.componentInstance._vnode)&&i.data&&(r=normalizeStyleData(i.data))&&extend(n,r);(r=normalizeStyleData(e.data))&&extend(n,r);for(var a=e;a=a.parent;)a.data&&(r=normalizeStyleData(a.data))&&extend(n,r);return n}var emptyStyle,cssVarRE=/^--/,importantRE=/\s*!important$/,setProp=function(e,t,r){if(cssVarRE.test(t))e.style.setProperty(t,r);else if(importantRE.test(r))e.style.setProperty(hyphenate(t),r.replace(importantRE,""),"important");else{var n=normalize(t);if(Array.isArray(r))for(var i=0,a=r.length;i<a;i++)e.style[n]=r[i];else e.style[n]=r}},vendorNames=["Webkit","Moz","ms"],normalize=cached(function(e){if(emptyStyle=emptyStyle||document.createElement("div").style,"filter"!==(e=camelize(e))&&e in emptyStyle)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),r=0;r<vendorNames.length;r++){var n=vendorNames[r]+t;if(n in emptyStyle)return n}});function updateStyle(e,t){var r=t.data,n=e.data;if(!(isUndef(r.staticStyle)&&isUndef(r.style)&&isUndef(n.staticStyle)&&isUndef(n.style))){var i,a,o=t.elm,s=n.staticStyle,l=n.normalizedStyle||n.style||{},u=s||l,c=normalizeStyleBinding(t.data.style)||{};t.data.normalizedStyle=isDef(c.__ob__)?extend({},c):c;var d=getStyle(t,!0);for(a in u)isUndef(d[a])&&setProp(o,a,"");for(a in d)(i=d[a])!==u[a]&&setProp(o,a,null==i?"":i)}}var style={create:updateStyle,update:updateStyle},whitespaceRE=/\s+/;function addClass(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(whitespaceRE).forEach(function(t){return e.classList.add(t)}):e.classList.add(t);else{var r=" "+(e.getAttribute("class")||"")+" ";r.indexOf(" "+t+" ")<0&&e.setAttribute("class",(r+t).trim())}}function removeClass(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(whitespaceRE).forEach(function(t){return e.classList.remove(t)}):e.classList.remove(t),e.classList.length||e.removeAttribute("class");else{for(var r=" "+(e.getAttribute("class")||"")+" ",n=" "+t+" ";r.indexOf(n)>=0;)r=r.replace(n," ");(r=r.trim())?e.setAttribute("class",r):e.removeAttribute("class")}}function resolveTransition(e){if(e){if("object"===(void 0===e?"undefined":_typeof(e))){var t={};return!1!==e.css&&extend(t,autoCssTransition(e.name||"v")),extend(t,e),t}return"string"==typeof e?autoCssTransition(e):void 0}}var autoCssTransition=cached(function(e){return{enterClass:e+"-enter",enterToClass:e+"-enter-to",enterActiveClass:e+"-enter-active",leaveClass:e+"-leave",leaveToClass:e+"-leave-to",leaveActiveClass:e+"-leave-active"}}),hasTransition=inBrowser&&!isIE9,TRANSITION="transition",ANIMATION="animation",transitionProp="transition",transitionEndEvent="transitionend",animationProp="animation",animationEndEvent="animationend";hasTransition&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(transitionProp="WebkitTransition",transitionEndEvent="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(animationProp="WebkitAnimation",animationEndEvent="webkitAnimationEnd"));var raf=inBrowser?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function nextFrame(e){raf(function(){raf(e)})}function addTransitionClass(e,t){var r=e._transitionClasses||(e._transitionClasses=[]);r.indexOf(t)<0&&(r.push(t),addClass(e,t))}function removeTransitionClass(e,t){e._transitionClasses&&remove(e._transitionClasses,t),removeClass(e,t)}function whenTransitionEnds(e,t,r){var n=getTransitionInfo(e,t),i=n.type,a=n.timeout,o=n.propCount;if(!i)return r();var s=i===TRANSITION?transitionEndEvent:animationEndEvent,l=0,u=function(){e.removeEventListener(s,c),r()},c=function(t){t.target===e&&++l>=o&&u()};setTimeout(function(){l<o&&u()},a+1),e.addEventListener(s,c)}var transformRE=/\b(transform|all)(,|$)/;function getTransitionInfo(e,t){var r,n=window.getComputedStyle(e),i=(n[transitionProp+"Delay"]||"").split(", "),a=(n[transitionProp+"Duration"]||"").split(", "),o=getTimeout(i,a),s=(n[animationProp+"Delay"]||"").split(", "),l=(n[animationProp+"Duration"]||"").split(", "),u=getTimeout(s,l),c=0,d=0;return t===TRANSITION?o>0&&(r=TRANSITION,c=o,d=a.length):t===ANIMATION?u>0&&(r=ANIMATION,c=u,d=l.length):d=(r=(c=Math.max(o,u))>0?o>u?TRANSITION:ANIMATION:null)?r===TRANSITION?a.length:l.length:0,{type:r,timeout:c,propCount:d,hasTransform:r===TRANSITION&&transformRE.test(n[transitionProp+"Property"])}}function getTimeout(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max.apply(null,t.map(function(t,r){return toMs(t)+toMs(e[r])}))}function toMs(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function enter(e,t){var r=e.elm;isDef(r._leaveCb)&&(r._leaveCb.cancelled=!0,r._leaveCb());var n=resolveTransition(e.data.transition);if(!isUndef(n)&&!isDef(r._enterCb)&&1===r.nodeType){for(var i=n.css,a=n.type,o=n.enterClass,s=n.enterToClass,l=n.enterActiveClass,u=n.appearClass,c=n.appearToClass,d=n.appearActiveClass,h=n.beforeEnter,f=n.enter,p=n.afterEnter,g=n.enterCancelled,m=n.beforeAppear,v=n.appear,y=n.afterAppear,b=n.appearCancelled,_=n.duration,w=activeInstance,x=activeInstance.$vnode;x&&x.parent;)w=(x=x.parent).context;var S=!w._isMounted||!e.isRootInsert;if(!S||v||""===v){var k=S&&u?u:o,$=S&&d?d:l,C=S&&c?c:s,T=S&&m||h,A=S&&"function"==typeof v?v:f,M=S&&y||p,O=S&&b||g,D=toNumber(isObject$1(_)?_.enter:_);null!=D&&checkDuration(D,"enter",e);var E=!1!==i&&!isIE9,P=getHookArgumentsLength(A),R=r._enterCb=once(function(){E&&(removeTransitionClass(r,C),removeTransitionClass(r,$)),R.cancelled?(E&&removeTransitionClass(r,k),O&&O(r)):M&&M(r),r._enterCb=null});e.data.show||mergeVNodeHook(e,"insert",function(){var t=r.parentNode,n=t&&t._pending&&t._pending[e.key];n&&n.tag===e.tag&&n.elm._leaveCb&&n.elm._leaveCb(),A&&A(r,R)}),T&&T(r),E&&(addTransitionClass(r,k),addTransitionClass(r,$),nextFrame(function(){removeTransitionClass(r,k),R.cancelled||(addTransitionClass(r,C),P||(isValidDuration(D)?setTimeout(R,D):whenTransitionEnds(r,a,R)))})),e.data.show&&(t&&t(),A&&A(r,R)),E||P||R()}}}function leave(e,t){var r=e.elm;isDef(r._enterCb)&&(r._enterCb.cancelled=!0,r._enterCb());var n=resolveTransition(e.data.transition);if(isUndef(n)||1!==r.nodeType)return t();if(!isDef(r._leaveCb)){var i=n.css,a=n.type,o=n.leaveClass,s=n.leaveToClass,l=n.leaveActiveClass,u=n.beforeLeave,c=n.leave,d=n.afterLeave,h=n.leaveCancelled,f=n.delayLeave,p=n.duration,g=!1!==i&&!isIE9,m=getHookArgumentsLength(c),v=toNumber(isObject$1(p)?p.leave:p);isDef(v)&&checkDuration(v,"leave",e);var y=r._leaveCb=once(function(){r.parentNode&&r.parentNode._pending&&(r.parentNode._pending[e.key]=null),g&&(removeTransitionClass(r,s),removeTransitionClass(r,l)),y.cancelled?(g&&removeTransitionClass(r,o),h&&h(r)):(t(),d&&d(r)),r._leaveCb=null});f?f(b):b()}function b(){y.cancelled||(!e.data.show&&r.parentNode&&((r.parentNode._pending||(r.parentNode._pending={}))[e.key]=e),u&&u(r),g&&(addTransitionClass(r,o),addTransitionClass(r,l),nextFrame(function(){removeTransitionClass(r,o),y.cancelled||(addTransitionClass(r,s),m||(isValidDuration(v)?setTimeout(y,v):whenTransitionEnds(r,a,y)))})),c&&c(r,y),g||m||y())}}function checkDuration(e,t,r){"number"!=typeof e?warn("<transition> explicit "+t+" duration is not a valid number - got "+JSON.stringify(e)+".",r.context):isNaN(e)&&warn("<transition> explicit "+t+" duration is NaN - the duration expression might be incorrect.",r.context)}function isValidDuration(e){return"number"==typeof e&&!isNaN(e)}function getHookArgumentsLength(e){if(isUndef(e))return!1;var t=e.fns;return isDef(t)?getHookArgumentsLength(Array.isArray(t)?t[0]:t):(e._length||e.length)>1}function _enter(e,t){!0!==t.data.show&&enter(t)}var transition=inBrowser?{create:_enter,activate:_enter,remove:function(e,t){!0!==e.data.show?leave(e,t):t()}}:{},platformModules=[attrs,klass,events,domProps,style,transition],modules=platformModules.concat(baseModules),patch=createPatchFunction({nodeOps:nodeOps,modules:modules});isIE9&&document.addEventListener("selectionchange",function(){var e=document.activeElement;e&&e.vmodel&&trigger(e,"input")});var directive={inserted:function(e,t,r,n){"select"===r.tag?(n.elm&&!n.elm._vOptions?mergeVNodeHook(r,"postpatch",function(){directive.componentUpdated(e,t,r)}):setSelected(e,t,r.context),e._vOptions=[].map.call(e.options,getValue$1)):("textarea"===r.tag||isTextInputType(e.type))&&(e._vModifiers=t.modifiers,t.modifiers.lazy||(e.addEventListener("compositionstart",onCompositionStart),e.addEventListener("compositionend",onCompositionEnd),e.addEventListener("change",onCompositionEnd),isIE9&&(e.vmodel=!0)))},componentUpdated:function(e,t,r){if("select"===r.tag){setSelected(e,t,r.context);var n=e._vOptions,i=e._vOptions=[].map.call(e.options,getValue$1);if(i.some(function(e,t){return!looseEqual(e,n[t])}))(e.multiple?t.value.some(function(e){return hasNoMatchingOption(e,i)}):t.value!==t.oldValue&&hasNoMatchingOption(t.value,i))&&trigger(e,"change")}}};function setSelected(e,t,r){actuallySetSelected(e,t,r),(isIE||isEdge)&&setTimeout(function(){actuallySetSelected(e,t,r)},0)}function actuallySetSelected(e,t,r){var n=t.value,i=e.multiple;if(!i||Array.isArray(n)){for(var a,o,s=0,l=e.options.length;s<l;s++)if(o=e.options[s],i)a=looseIndexOf(n,getValue$1(o))>-1,o.selected!==a&&(o.selected=a);else if(looseEqual(getValue$1(o),n))return void(e.selectedIndex!==s&&(e.selectedIndex=s));i||(e.selectedIndex=-1)}else warn('<select multiple v-model="'+t.expression+'"> expects an Array value for its binding, but got '+Object.prototype.toString.call(n).slice(8,-1),r)}function hasNoMatchingOption(e,t){return t.every(function(t){return!looseEqual(t,e)})}function getValue$1(e){return"_value"in e?e._value:e.value}function onCompositionStart(e){e.target.composing=!0}function onCompositionEnd(e){e.target.composing&&(e.target.composing=!1,trigger(e.target,"input"))}function trigger(e,t){var r=document.createEvent("HTMLEvents");r.initEvent(t,!0,!0),e.dispatchEvent(r)}function locateNode(e){return!e.componentInstance||e.data&&e.data.transition?e:locateNode(e.componentInstance._vnode)}var show={bind:function(e,t,r){var n=t.value,i=(r=locateNode(r)).data&&r.data.transition,a=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;n&&i?(r.data.show=!0,enter(r,function(){e.style.display=a})):e.style.display=n?a:"none"},update:function(e,t,r){var n=t.value;!n!=!t.oldValue&&((r=locateNode(r)).data&&r.data.transition?(r.data.show=!0,n?enter(r,function(){e.style.display=e.__vOriginalDisplay}):leave(r,function(){e.style.display="none"})):e.style.display=n?e.__vOriginalDisplay:"none")},unbind:function(e,t,r,n,i){i||(e.style.display=e.__vOriginalDisplay)}},platformDirectives={model:directive,show:show},transitionProps={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function getRealChild(e){var t=e&&e.componentOptions;return t&&t.Ctor.options.abstract?getRealChild(getFirstComponentChild(t.children)):e}function extractTransitionData(e){var t={},r=e.$options;for(var n in r.propsData)t[n]=e[n];var i=r._parentListeners;for(var a in i)t[camelize(a)]=i[a];return t}function placeholder(e,t){if(/\d-keep-alive$/.test(t.tag))return e("keep-alive",{props:t.componentOptions.propsData})}function hasParentTransition(e){for(;e=e.parent;)if(e.data.transition)return!0}function isSameChild(e,t){return t.key===e.key&&t.tag===e.tag}var isNotTextNode=function(e){return e.tag||isAsyncPlaceholder(e)},isVShowDirective=function(e){return"show"===e.name},Transition={name:"transition",props:transitionProps,abstract:!0,render:function(e){var t=this,r=this.$slots.default;if(r&&(r=r.filter(isNotTextNode)).length){r.length>1&&warn("<transition> can only be used on a single element. Use <transition-group> for lists.",this.$parent);var n=this.mode;n&&"in-out"!==n&&"out-in"!==n&&warn("invalid <transition> mode: "+n,this.$parent);var i=r[0];if(hasParentTransition(this.$vnode))return i;var a=getRealChild(i);if(!a)return i;if(this._leaving)return placeholder(e,i);var o="__transition-"+this._uid+"-";a.key=null==a.key?a.isComment?o+"comment":o+a.tag:isPrimitive(a.key)?0===String(a.key).indexOf(o)?a.key:o+a.key:a.key;var s=(a.data||(a.data={})).transition=extractTransitionData(this),l=this._vnode,u=getRealChild(l);if(a.data.directives&&a.data.directives.some(isVShowDirective)&&(a.data.show=!0),u&&u.data&&!isSameChild(a,u)&&!isAsyncPlaceholder(u)&&(!u.componentInstance||!u.componentInstance._vnode.isComment)){var c=u.data.transition=extend({},s);if("out-in"===n)return this._leaving=!0,mergeVNodeHook(c,"afterLeave",function(){t._leaving=!1,t.$forceUpdate()}),placeholder(e,i);if("in-out"===n){if(isAsyncPlaceholder(a))return l;var d,h=function(){d()};mergeVNodeHook(s,"afterEnter",h),mergeVNodeHook(s,"enterCancelled",h),mergeVNodeHook(c,"delayLeave",function(e){d=e})}}return i}}},props=extend({tag:String,moveClass:String},transitionProps);delete props.mode;var TransitionGroup={props:props,beforeMount:function(){var e=this,t=this._update;this._update=function(r,n){var i=setActiveInstance(e);e.__patch__(e._vnode,e.kept,!1,!0),e._vnode=e.kept,i(),t.call(e,r,n)}},render:function(e){for(var t=this.tag||this.$vnode.data.tag||"span",r=Object.create(null),n=this.prevChildren=this.children,i=this.$slots.default||[],a=this.children=[],o=extractTransitionData(this),s=0;s<i.length;s++){var l=i[s];if(l.tag)if(null!=l.key&&0!==String(l.key).indexOf("__vlist"))a.push(l),r[l.key]=l,(l.data||(l.data={})).transition=o;else{var u=l.componentOptions,c=u?u.Ctor.options.name||u.tag||"":l.tag;warn("<transition-group> children must be keyed: <"+c+">")}}if(n){for(var d=[],h=[],f=0;f<n.length;f++){var p=n[f];p.data.transition=o,p.data.pos=p.elm.getBoundingClientRect(),r[p.key]?d.push(p):h.push(p)}this.kept=e(t,null,d),this.removed=h}return e(t,null,a)},updated:function(){var e=this.prevChildren,t=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,t)&&(e.forEach(callPendingCbs),e.forEach(recordPosition),e.forEach(applyTranslation),this._reflow=document.body.offsetHeight,e.forEach(function(e){if(e.data.moved){var r=e.elm,n=r.style;addTransitionClass(r,t),n.transform=n.WebkitTransform=n.transitionDuration="",r.addEventListener(transitionEndEvent,r._moveCb=function e(n){n&&n.target!==r||n&&!/transform$/.test(n.propertyName)||(r.removeEventListener(transitionEndEvent,e),r._moveCb=null,removeTransitionClass(r,t))})}}))},methods:{hasMove:function(e,t){if(!hasTransition)return!1;if(this._hasMove)return this._hasMove;var r=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach(function(e){removeClass(r,e)}),addClass(r,t),r.style.display="none",this.$el.appendChild(r);var n=getTransitionInfo(r);return this.$el.removeChild(r),this._hasMove=n.hasTransform}}};function callPendingCbs(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function recordPosition(e){e.data.newPos=e.elm.getBoundingClientRect()}function applyTranslation(e){var t=e.data.pos,r=e.data.newPos,n=t.left-r.left,i=t.top-r.top;if(n||i){e.data.moved=!0;var a=e.elm.style;a.transform=a.WebkitTransform="translate("+n+"px,"+i+"px)",a.transitionDuration="0s"}}var platformComponents={Transition:Transition,TransitionGroup:TransitionGroup};Vue.config.mustUseProp=mustUseProp,Vue.config.isReservedTag=isReservedTag,Vue.config.isReservedAttr=isReservedAttr,Vue.config.getTagNamespace=getTagNamespace,Vue.config.isUnknownElement=isUnknownElement,extend(Vue.options.directives,platformDirectives),extend(Vue.options.components,platformComponents),Vue.prototype.__patch__=inBrowser?patch:noop$1,Vue.prototype.$mount=function(e,t){return mountComponent(this,e=e&&inBrowser?query(e):void 0,t)},inBrowser&&setTimeout(function(){config.devtools&&(devtools?devtools.emit("init",Vue):console[console.info?"info":"log"]("Download the Vue Devtools extension for a better development experience:\nhttps://github.com/vuejs/vue-devtools")),!1!==config.productionTip&&"undefined"!=typeof console&&console[console.info?"info":"log"]("You are running Vue in development mode.\nMake sure to turn on production mode when deploying for production.\nSee more tips at https://vuejs.org/guide/deployment.html")},0);var defaultTagRE=/\{\{((?:.|\r?\n)+?)\}\}/g,regexEscapeRE=/[-.*+?^${}()|[\]\/\\]/g,buildRegex=cached(function(e){var t=e[0].replace(regexEscapeRE,"\\$&"),r=e[1].replace(regexEscapeRE,"\\$&");return new RegExp(t+"((?:.|\\n)+?)"+r,"g")});function parseText(e,t){var r=t?buildRegex(t):defaultTagRE;if(r.test(e)){for(var n,i,a,o=[],s=[],l=r.lastIndex=0;n=r.exec(e);){(i=n.index)>l&&(s.push(a=e.slice(l,i)),o.push(JSON.stringify(a)));var u=parseFilters(n[1].trim());o.push("_s("+u+")"),s.push({"@binding":u}),l=i+n[0].length}return l<e.length&&(s.push(a=e.slice(l)),o.push(JSON.stringify(a))),{expression:o.join("+"),tokens:s}}}function transformNode(e,t){var r=t.warn||baseWarn,n=getAndRemoveAttr(e,"class");n&&(parseText(n,t.delimiters)&&r('class="'+n+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div class="{{ val }}">, use <div :class="val">.',e.rawAttrsMap.class));n&&(e.staticClass=JSON.stringify(n));var i=getBindingAttr(e,"class",!1);i&&(e.classBinding=i)}function genData(e){var t="";return e.staticClass&&(t+="staticClass:"+e.staticClass+","),e.classBinding&&(t+="class:"+e.classBinding+","),t}var klass$1={staticKeys:["staticClass"],transformNode:transformNode,genData:genData};function transformNode$1(e,t){var r=t.warn||baseWarn,n=getAndRemoveAttr(e,"style");n&&(parseText(n,t.delimiters)&&r('style="'+n+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div style="{{ val }}">, use <div :style="val">.',e.rawAttrsMap.style),e.staticStyle=JSON.stringify(parseStyleText(n)));var i=getBindingAttr(e,"style",!1);i&&(e.styleBinding=i)}function genData$1(e){var t="";return e.staticStyle&&(t+="staticStyle:"+e.staticStyle+","),e.styleBinding&&(t+="style:("+e.styleBinding+"),"),t}var decoder,style$1={staticKeys:["staticStyle"],transformNode:transformNode$1,genData:genData$1},he={decode:function(e){return(decoder=decoder||document.createElement("div")).innerHTML=e,decoder.textContent}},isUnaryTag=makeMap("area,base,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr"),canBeLeftOpenTag=makeMap("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source"),isNonPhrasingTag=makeMap("address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track"),attribute=/^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,dynamicArgAttribute=/^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,ncname="[a-zA-Z_][\\-\\.0-9_a-zA-Z"+unicodeLetters+"]*",qnameCapture="((?:"+ncname+"\\:)?"+ncname+")",startTagOpen=new RegExp("^<"+qnameCapture),startTagClose=/^\s*(\/?)>/,endTag=new RegExp("^<\\/"+qnameCapture+"[^>]*>"),doctype=/^<!DOCTYPE [^>]+>/i,comment=/^<!\--/,conditionalComment=/^<!\[/,isPlainTextElement=makeMap("script,style,textarea",!0),reCache={},decodingMap={"&lt;":"<","&gt;":">","&quot;":'"',"&amp;":"&","&#10;":"\n","&#9;":"\t","&#39;":"'"},encodedAttr=/&(?:lt|gt|quot|amp|#39);/g,encodedAttrWithNewLines=/&(?:lt|gt|quot|amp|#39|#10|#9);/g,isIgnoreNewlineTag=makeMap("pre,textarea",!0),shouldIgnoreFirstNewline=function(e,t){return e&&isIgnoreNewlineTag(e)&&"\n"===t[0]};function decodeAttr(e,t){var r=t?encodedAttrWithNewLines:encodedAttr;return e.replace(r,function(e){return decodingMap[e]})}function parseHTML(e,t){for(var r,n,i=[],a=t.expectHTML,o=t.isUnaryTag||no,s=t.canBeLeftOpenTag||no,l=0;e;){if(r=e,n&&isPlainTextElement(n)){var u=0,c=n.toLowerCase(),d=reCache[c]||(reCache[c]=new RegExp("([\\s\\S]*?)(</"+c+"[^>]*>)","i")),h=e.replace(d,function(e,r,n){return u=n.length,isPlainTextElement(c)||"noscript"===c||(r=r.replace(/<!\--([\s\S]*?)-->/g,"$1").replace(/<!\[CDATA\[([\s\S]*?)]]>/g,"$1")),shouldIgnoreFirstNewline(c,r)&&(r=r.slice(1)),t.chars&&t.chars(r),""});l+=e.length-h.length,e=h,C(c,l-u,l)}else{var f=e.indexOf("<");if(0===f){if(comment.test(e)){var p=e.indexOf("--\x3e");if(p>=0){t.shouldKeepComment&&t.comment(e.substring(4,p),l,l+p+3),S(p+3);continue}}if(conditionalComment.test(e)){var g=e.indexOf("]>");if(g>=0){S(g+2);continue}}var m=e.match(doctype);if(m){S(m[0].length);continue}var v=e.match(endTag);if(v){var y=l;S(v[0].length),C(v[1],y,l);continue}var b=k();if(b){$(b),shouldIgnoreFirstNewline(b.tagName,e)&&S(1);continue}}var _=void 0,w=void 0,x=void 0;if(f>=0){for(w=e.slice(f);!(endTag.test(w)||startTagOpen.test(w)||comment.test(w)||conditionalComment.test(w)||(x=w.indexOf("<",1))<0);)f+=x,w=e.slice(f);_=e.substring(0,f)}f<0&&(_=e),_&&S(_.length),t.chars&&_&&t.chars(_,l-_.length,l)}if(e===r){t.chars&&t.chars(e),!i.length&&t.warn&&t.warn('Mal-formatted tag at end of template: "'+e+'"',{start:l+e.length});break}}function S(t){l+=t,e=e.substring(t)}function k(){var t=e.match(startTagOpen);if(t){var r,n,i={tagName:t[1],attrs:[],start:l};for(S(t[0].length);!(r=e.match(startTagClose))&&(n=e.match(dynamicArgAttribute)||e.match(attribute));)n.start=l,S(n[0].length),n.end=l,i.attrs.push(n);if(r)return i.unarySlash=r[1],S(r[0].length),i.end=l,i}}function $(e){var r=e.tagName,l=e.unarySlash;a&&("p"===n&&isNonPhrasingTag(r)&&C(n),s(r)&&n===r&&C(r));for(var u=o(r)||!!l,c=e.attrs.length,d=new Array(c),h=0;h<c;h++){var f=e.attrs[h],p=f[3]||f[4]||f[5]||"",g="a"===r&&"href"===f[1]?t.shouldDecodeNewlinesForHref:t.shouldDecodeNewlines;d[h]={name:f[1],value:decodeAttr(p,g)},t.outputSourceRange&&(d[h].start=f.start+f[0].match(/^\s*/).length,d[h].end=f.end)}u||(i.push({tag:r,lowerCasedTag:r.toLowerCase(),attrs:d,start:e.start,end:e.end}),n=r),t.start&&t.start(r,d,u,e.start,e.end)}function C(e,r,a){var o,s;if(null==r&&(r=l),null==a&&(a=l),e)for(s=e.toLowerCase(),o=i.length-1;o>=0&&i[o].lowerCasedTag!==s;o--);else o=0;if(o>=0){for(var u=i.length-1;u>=o;u--)(u>o||!e&&t.warn)&&t.warn("tag <"+i[u].tag+"> has no matching end tag.",{start:i[u].start}),t.end&&t.end(i[u].tag,r,a);i.length=o,n=o&&i[o-1].tag}else"br"===s?t.start&&t.start(e,[],!0,r,a):"p"===s&&(t.start&&t.start(e,[],!1,r,a),t.end&&t.end(e,r,a))}C()}var warn$2,delimiters,transforms,preTransforms,postTransforms,platformIsPreTag,platformMustUseProp,platformGetTagNamespace,maybeComponent,onRE=/^@|^v-on:/,dirRE=/^v-|^@|^:/,forAliasRE=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,forIteratorRE=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,stripParensRE=/^\(|\)$/g,dynamicArgRE=/^\[.*\]$/,argRE=/:(.*)$/,bindRE=/^:|^\.|^v-bind:/,modifierRE=/\.[^.]+/g,slotRE=/^v-slot(:|$)|^#/,lineBreakRE=/[\r\n]/,whitespaceRE$1=/\s+/g,invalidAttributeRE=/[\s"'<>\/=]/,decodeHTMLCached=cached(he.decode),emptySlotScopeToken="_empty_";function createASTElement(e,t,r){return{type:1,tag:e,attrsList:t,attrsMap:makeAttrsMap(t),rawAttrsMap:{},parent:r,children:[]}}function parse(e,t){warn$2=t.warn||baseWarn,platformIsPreTag=t.isPreTag||no,platformMustUseProp=t.mustUseProp||no,platformGetTagNamespace=t.getTagNamespace||no;var r=t.isReservedTag||no;maybeComponent=function(e){return!!e.component||!r(e.tag)},transforms=pluckModuleFunction(t.modules,"transformNode"),preTransforms=pluckModuleFunction(t.modules,"preTransformNode"),postTransforms=pluckModuleFunction(t.modules,"postTransformNode"),delimiters=t.delimiters;var n,i,a=[],o=!1!==t.preserveWhitespace,s=t.whitespace,l=!1,u=!1,c=!1;function d(e,t){c||(c=!0,warn$2(e,t))}function h(e){if(f(e),l||e.processed||(e=processElement(e,t)),a.length||e===n||(n.if&&(e.elseif||e.else)?(p(e),addIfCondition(n,{exp:e.elseif,block:e})):d("Component template should contain exactly one root element. If you are using v-if on multiple elements, use v-else-if to chain them instead.",{start:e.start})),i&&!e.forbidden)if(e.elseif||e.else)processIfConditions(e,i);else{if(e.slotScope){var r=e.slotTarget||'"default"';(i.scopedSlots||(i.scopedSlots={}))[r]=e}i.children.push(e),e.parent=i}e.children=e.children.filter(function(e){return!e.slotScope}),f(e),e.pre&&(l=!1),platformIsPreTag(e.tag)&&(u=!1);for(var o=0;o<postTransforms.length;o++)postTransforms[o](e,t)}function f(e){if(!u)for(var t;(t=e.children[e.children.length-1])&&3===t.type&&" "===t.text;)e.children.pop()}function p(e){"slot"!==e.tag&&"template"!==e.tag||d("Cannot use <"+e.tag+"> as component root element because it may contain multiple nodes.",{start:e.start}),e.attrsMap.hasOwnProperty("v-for")&&d("Cannot use v-for on stateful component root element because it renders multiple elements.",e.rawAttrsMap["v-for"])}return parseHTML(e,{warn:warn$2,expectHTML:t.expectHTML,isUnaryTag:t.isUnaryTag,canBeLeftOpenTag:t.canBeLeftOpenTag,shouldDecodeNewlines:t.shouldDecodeNewlines,shouldDecodeNewlinesForHref:t.shouldDecodeNewlinesForHref,shouldKeepComment:t.comments,outputSourceRange:t.outputSourceRange,start:function(e,r,o,s){var c=i&&i.ns||platformGetTagNamespace(e);isIE&&"svg"===c&&(r=guardIESVGBug(r));var d=createASTElement(e,r,i);c&&(d.ns=c),t.outputSourceRange&&(d.start=s,d.rawAttrsMap=d.attrsList.reduce(function(e,t){return e[t.name]=t,e},{})),r.forEach(function(e){invalidAttributeRE.test(e.name)&&warn$2("Invalid dynamic argument expression: attribute names cannot contain spaces, quotes, <, >, / or =.",{start:e.start+e.name.indexOf("["),end:e.start+e.name.length})}),isForbiddenTag(d)&&!isServerRendering()&&(d.forbidden=!0,warn$2("Templates should only be responsible for mapping the state to the UI. Avoid placing tags with side-effects in your templates, such as <"+e+">, as they will not be parsed.",{start:d.start}));for(var f=0;f<preTransforms.length;f++)d=preTransforms[f](d,t)||d;l||(processPre(d),d.pre&&(l=!0)),platformIsPreTag(d.tag)&&(u=!0),l?processRawAttrs(d):d.processed||(processFor(d),processIf(d),processOnce(d)),n||p(n=d),o?h(d):(i=d,a.push(d))},end:function(e,r,n){var o=a[a.length-1];a.length-=1,i=a[a.length-1],t.outputSourceRange&&(o.end=n),h(o)},chars:function(r,n,a){if(i){if(!isIE||"textarea"!==i.tag||i.attrsMap.placeholder!==r){var c,h,f=i.children;if(r=u||r.trim()?isTextTag(i)?r:decodeHTMLCached(r):f.length?s?"condense"===s&&lineBreakRE.test(r)?"":" ":o?" ":"":"")"condense"===s&&(r=r.replace(whitespaceRE$1," ")),!l&&" "!==r&&(c=parseText(r,delimiters))?h={type:2,expression:c.expression,tokens:c.tokens,text:r}:" "===r&&f.length&&" "===f[f.length-1].text||(h={type:3,text:r}),h&&(t.outputSourceRange&&(h.start=n,h.end=a),f.push(h))}}else r===e?d("Component template requires a root element, rather than just text.",{start:n}):(r=r.trim())&&d('text "'+r+'" outside root element will be ignored.',{start:n})},comment:function(e,r,n){if(i){var a={type:3,text:e,isComment:!0};t.outputSourceRange&&(a.start=r,a.end=n),i.children.push(a)}}}),n}function processPre(e){null!=getAndRemoveAttr(e,"v-pre")&&(e.pre=!0)}function processRawAttrs(e){var t=e.attrsList,r=t.length;if(r)for(var n=e.attrs=new Array(r),i=0;i<r;i++)n[i]={name:t[i].name,value:JSON.stringify(t[i].value)},null!=t[i].start&&(n[i].start=t[i].start,n[i].end=t[i].end);else e.pre||(e.plain=!0)}function processElement(e,t){processKey(e),e.plain=!e.key&&!e.scopedSlots&&!e.attrsList.length,processRef(e),processSlotContent(e),processSlotOutlet(e),processComponent(e);for(var r=0;r<transforms.length;r++)e=transforms[r](e,t)||e;return processAttrs(e),e}function processKey(e){var t=getBindingAttr(e,"key");if(t){if("template"===e.tag&&warn$2("<template> cannot be keyed. Place the key on real elements instead.",getRawBindingAttr(e,"key")),e.for){var r=e.iterator2||e.iterator1,n=e.parent;r&&r===t&&n&&"transition-group"===n.tag&&warn$2("Do not use v-for index as key on <transition-group> children, this is the same as not using keys.",getRawBindingAttr(e,"key"),!0)}e.key=t}}function processRef(e){var t=getBindingAttr(e,"ref");t&&(e.ref=t,e.refInFor=checkInFor(e))}function processFor(e){var t;if(t=getAndRemoveAttr(e,"v-for")){var r=parseFor(t);r?extend(e,r):warn$2("Invalid v-for expression: "+t,e.rawAttrsMap["v-for"])}}function parseFor(e){var t=e.match(forAliasRE);if(t){var r={};r.for=t[2].trim();var n=t[1].trim().replace(stripParensRE,""),i=n.match(forIteratorRE);return i?(r.alias=n.replace(forIteratorRE,"").trim(),r.iterator1=i[1].trim(),i[2]&&(r.iterator2=i[2].trim())):r.alias=n,r}}function processIf(e){var t=getAndRemoveAttr(e,"v-if");if(t)e.if=t,addIfCondition(e,{exp:t,block:e});else{null!=getAndRemoveAttr(e,"v-else")&&(e.else=!0);var r=getAndRemoveAttr(e,"v-else-if");r&&(e.elseif=r)}}function processIfConditions(e,t){var r=findPrevElement(t.children);r&&r.if?addIfCondition(r,{exp:e.elseif,block:e}):warn$2("v-"+(e.elseif?'else-if="'+e.elseif+'"':"else")+" used on element <"+e.tag+"> without corresponding v-if.",e.rawAttrsMap[e.elseif?"v-else-if":"v-else"])}function findPrevElement(e){for(var t=e.length;t--;){if(1===e[t].type)return e[t];" "!==e[t].text&&warn$2('text "'+e[t].text.trim()+'" between v-if and v-else(-if) will be ignored.',e[t]),e.pop()}}function addIfCondition(e,t){e.ifConditions||(e.ifConditions=[]),e.ifConditions.push(t)}function processOnce(e){null!=getAndRemoveAttr(e,"v-once")&&(e.once=!0)}function processSlotContent(e){var t;"template"===e.tag?((t=getAndRemoveAttr(e,"scope"))&&warn$2('the "scope" attribute for scoped slots have been deprecated and replaced by "slot-scope" since 2.5. The new "slot-scope" attribute can also be used on plain elements in addition to <template> to denote scoped slots.',e.rawAttrsMap.scope,!0),e.slotScope=t||getAndRemoveAttr(e,"slot-scope")):(t=getAndRemoveAttr(e,"slot-scope"))&&(e.attrsMap["v-for"]&&warn$2("Ambiguous combined usage of slot-scope and v-for on <"+e.tag+"> (v-for takes higher priority). Use a wrapper <template> for the scoped slot to make it clearer.",e.rawAttrsMap["slot-scope"],!0),e.slotScope=t);var r=getBindingAttr(e,"slot");if(r&&(e.slotTarget='""'===r?'"default"':r,e.slotTargetDynamic=!(!e.attrsMap[":slot"]&&!e.attrsMap["v-bind:slot"]),"template"===e.tag||e.slotScope||addAttr(e,"slot",r,getRawBindingAttr(e,"slot"))),"template"===e.tag){var n=getAndRemoveAttrByRegex(e,slotRE);if(n){(e.slotTarget||e.slotScope)&&warn$2("Unexpected mixed usage of different slot syntaxes.",e),e.parent&&!maybeComponent(e.parent)&&warn$2("<template v-slot> can only appear at the root level inside the receiving the component",e);var i=getSlotName(n),a=i.name,o=i.dynamic;e.slotTarget=a,e.slotTargetDynamic=o,e.slotScope=n.value||emptySlotScopeToken}}else{var s=getAndRemoveAttrByRegex(e,slotRE);if(s){maybeComponent(e)||warn$2("v-slot can only be used on components or <template>.",s),(e.slotScope||e.slotTarget)&&warn$2("Unexpected mixed usage of different slot syntaxes.",e),e.scopedSlots&&warn$2("To avoid scope ambiguity, the default slot should also use <template> syntax when there are other named slots.",s);var l=e.scopedSlots||(e.scopedSlots={}),u=getSlotName(s),c=u.name,d=u.dynamic,h=l[c]=createASTElement("template",[],e);h.slotTarget=c,h.slotTargetDynamic=d,h.children=e.children.filter(function(e){if(!e.slotScope)return e.parent=h,!0}),h.slotScope=s.value||emptySlotScopeToken,e.children=[],e.plain=!1}}}function getSlotName(e){var t=e.name.replace(slotRE,"");return t||("#"!==e.name[0]?t="default":warn$2("v-slot shorthand syntax requires a slot name.",e)),dynamicArgRE.test(t)?{name:t.slice(1,-1),dynamic:!0}:{name:'"'+t+'"',dynamic:!1}}function processSlotOutlet(e){"slot"===e.tag&&(e.slotName=getBindingAttr(e,"name"),e.key&&warn$2("`key` does not work on <slot> because slots are abstract outlets and can possibly expand into multiple elements. Use the key on a wrapping element instead.",getRawBindingAttr(e,"key")))}function processComponent(e){var t;(t=getBindingAttr(e,"is"))&&(e.component=t),null!=getAndRemoveAttr(e,"inline-template")&&(e.inlineTemplate=!0)}function processAttrs(e){var t,r,n,i,a,o,s,l,u=e.attrsList;for(t=0,r=u.length;t<r;t++){if(n=i=u[t].name,a=u[t].value,dirRE.test(n))if(e.hasBindings=!0,(o=parseModifiers(n.replace(dirRE,"")))&&(n=n.replace(modifierRE,"")),bindRE.test(n))n=n.replace(bindRE,""),a=parseFilters(a),(l=dynamicArgRE.test(n))&&(n=n.slice(1,-1)),0===a.trim().length&&warn$2('The value for a v-bind expression cannot be empty. Found in "v-bind:'+n+'"'),o&&(o.prop&&!l&&"innerHtml"===(n=camelize(n))&&(n="innerHTML"),o.camel&&!l&&(n=camelize(n)),o.sync&&(s=genAssignmentCode(a,"$event"),l?addHandler(e,'"update:"+('+n+")",s,null,!1,warn$2,u[t],!0):(addHandler(e,"update:"+camelize(n),s,null,!1,warn$2,u[t]),hyphenate(n)!==camelize(n)&&addHandler(e,"update:"+hyphenate(n),s,null,!1,warn$2,u[t])))),o&&o.prop||!e.component&&platformMustUseProp(e.tag,e.attrsMap.type,n)?addProp(e,n,a,u[t],l):addAttr(e,n,a,u[t],l);else if(onRE.test(n))n=n.replace(onRE,""),(l=dynamicArgRE.test(n))&&(n=n.slice(1,-1)),addHandler(e,n,a,o,!1,warn$2,u[t],l);else{var c=(n=n.replace(dirRE,"")).match(argRE),d=c&&c[1];l=!1,d&&(n=n.slice(0,-(d.length+1)),dynamicArgRE.test(d)&&(d=d.slice(1,-1),l=!0)),addDirective(e,n,i,a,d,l,o,u[t]),"model"===n&&checkForAliasModel(e,a)}else parseText(a,delimiters)&&warn$2(n+'="'+a+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div id="{{ val }}">, use <div :id="val">.',u[t]),addAttr(e,n,JSON.stringify(a),u[t]),!e.component&&"muted"===n&&platformMustUseProp(e.tag,e.attrsMap.type,n)&&addProp(e,n,"true",u[t])}}function checkInFor(e){for(var t=e;t;){if(void 0!==t.for)return!0;t=t.parent}return!1}function parseModifiers(e){var t=e.match(modifierRE);if(t){var r={};return t.forEach(function(e){r[e.slice(1)]=!0}),r}}function makeAttrsMap(e){for(var t={},r=0,n=e.length;r<n;r++)!t[e[r].name]||isIE||isEdge||warn$2("duplicate attribute: "+e[r].name,e[r]),t[e[r].name]=e[r].value;return t}function isTextTag(e){return"script"===e.tag||"style"===e.tag}function isForbiddenTag(e){return"style"===e.tag||"script"===e.tag&&(!e.attrsMap.type||"text/javascript"===e.attrsMap.type)}var ieNSBug=/^xmlns:NS\d+/,ieNSPrefix=/^NS\d+:/;function guardIESVGBug(e){for(var t=[],r=0;r<e.length;r++){var n=e[r];ieNSBug.test(n.name)||(n.name=n.name.replace(ieNSPrefix,""),t.push(n))}return t}function checkForAliasModel(e,t){for(var r=e;r;)r.for&&r.alias===t&&warn$2("<"+e.tag+' v-model="'+t+'">: You are binding v-model directly to a v-for iteration alias. This will not be able to modify the v-for source array because writing to the alias is like modifying a function local variable. Consider using an array of objects and use v-model on an object property instead.',e.rawAttrsMap["v-model"]),r=r.parent}function preTransformNode(e,t){if("input"===e.tag){var r,n=e.attrsMap;if(!n["v-model"])return;if((n[":type"]||n["v-bind:type"])&&(r=getBindingAttr(e,"type")),n.type||r||!n["v-bind"]||(r="("+n["v-bind"]+").type"),r){var i=getAndRemoveAttr(e,"v-if",!0),a=i?"&&("+i+")":"",o=null!=getAndRemoveAttr(e,"v-else",!0),s=getAndRemoveAttr(e,"v-else-if",!0),l=cloneASTElement(e);processFor(l),addRawAttr(l,"type","checkbox"),processElement(l,t),l.processed=!0,l.if="("+r+")==='checkbox'"+a,addIfCondition(l,{exp:l.if,block:l});var u=cloneASTElement(e);getAndRemoveAttr(u,"v-for",!0),addRawAttr(u,"type","radio"),processElement(u,t),addIfCondition(l,{exp:"("+r+")==='radio'"+a,block:u});var c=cloneASTElement(e);return getAndRemoveAttr(c,"v-for",!0),addRawAttr(c,":type",r),processElement(c,t),addIfCondition(l,{exp:i,block:c}),o?l.else=!0:s&&(l.elseif=s),l}}}function cloneASTElement(e){return createASTElement(e.tag,e.attrsList.slice(),e.parent)}var model$1={preTransformNode:preTransformNode},modules$1=[klass$1,style$1,model$1];function text(e,t){t.value&&addProp(e,"textContent","_s("+t.value+")",t)}function html(e,t){t.value&&addProp(e,"innerHTML","_s("+t.value+")",t)}var isStaticKey,isPlatformReservedTag,directives$1={model:model,text:text,html:html},baseOptions={expectHTML:!0,modules:modules$1,directives:directives$1,isPreTag:isPreTag,isUnaryTag:isUnaryTag,mustUseProp:mustUseProp,canBeLeftOpenTag:canBeLeftOpenTag,isReservedTag:isReservedTag,getTagNamespace:getTagNamespace,staticKeys:genStaticKeys(modules$1)},genStaticKeysCached=cached(genStaticKeys$1);function optimize(e,t){e&&(isStaticKey=genStaticKeysCached(t.staticKeys||""),isPlatformReservedTag=t.isReservedTag||no,markStatic$1(e),markStaticRoots(e,!1))}function genStaticKeys$1(e){return makeMap("type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap"+(e?","+e:""))}function markStatic$1(e){if(e.static=isStatic(e),1===e.type){if(!isPlatformReservedTag(e.tag)&&"slot"!==e.tag&&null==e.attrsMap["inline-template"])return;for(var t=0,r=e.children.length;t<r;t++){var n=e.children[t];markStatic$1(n),n.static||(e.static=!1)}if(e.ifConditions)for(var i=1,a=e.ifConditions.length;i<a;i++){var o=e.ifConditions[i].block;markStatic$1(o),o.static||(e.static=!1)}}}function markStaticRoots(e,t){if(1===e.type){if((e.static||e.once)&&(e.staticInFor=t),e.static&&e.children.length&&(1!==e.children.length||3!==e.children[0].type))return void(e.staticRoot=!0);if(e.staticRoot=!1,e.children)for(var r=0,n=e.children.length;r<n;r++)markStaticRoots(e.children[r],t||!!e.for);if(e.ifConditions)for(var i=1,a=e.ifConditions.length;i<a;i++)markStaticRoots(e.ifConditions[i].block,t)}}function isStatic(e){return 2!==e.type&&(3===e.type||!(!e.pre&&(e.hasBindings||e.if||e.for||isBuiltInTag(e.tag)||!isPlatformReservedTag(e.tag)||isDirectChildOfTemplateFor(e)||!Object.keys(e).every(isStaticKey))))}function isDirectChildOfTemplateFor(e){for(;e.parent;){if("template"!==(e=e.parent).tag)return!1;if(e.for)return!0}return!1}var fnExpRE=/^([\w$_]+|\([^)]*?\))\s*=>|^function\s*\(/,fnInvokeRE=/\([^)]*?\);*$/,simplePathRE=/^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/,keyCodes={esc:27,tab:9,enter:13,space:32,up:38,left:37,right:39,down:40,delete:[8,46]},keyNames={esc:["Esc","Escape"],tab:"Tab",enter:"Enter",space:[" ","Spacebar"],up:["Up","ArrowUp"],left:["Left","ArrowLeft"],right:["Right","ArrowRight"],down:["Down","ArrowDown"],delete:["Backspace","Delete","Del"]},genGuard=function(e){return"if("+e+")return null;"},modifierCode={stop:"$event.stopPropagation();",prevent:"$event.preventDefault();",self:genGuard("$event.target !== $event.currentTarget"),ctrl:genGuard("!$event.ctrlKey"),shift:genGuard("!$event.shiftKey"),alt:genGuard("!$event.altKey"),meta:genGuard("!$event.metaKey"),left:genGuard("'button' in $event && $event.button !== 0"),middle:genGuard("'button' in $event && $event.button !== 1"),right:genGuard("'button' in $event && $event.button !== 2")};function genHandlers(e,t){var r=t?"nativeOn:":"on:",n="",i="";for(var a in e){var o=genHandler(e[a]);e[a]&&e[a].dynamic?i+=a+","+o+",":n+='"'+a+'":'+o+","}return n="{"+n.slice(0,-1)+"}",i?r+"_d("+n+",["+i.slice(0,-1)+"])":r+n}function genHandler(e){if(!e)return"function(){}";if(Array.isArray(e))return"["+e.map(function(e){return genHandler(e)}).join(",")+"]";var t=simplePathRE.test(e.value),r=fnExpRE.test(e.value),n=simplePathRE.test(e.value.replace(fnInvokeRE,""));if(e.modifiers){var i="",a="",o=[];for(var s in e.modifiers)if(modifierCode[s])a+=modifierCode[s],keyCodes[s]&&o.push(s);else if("exact"===s){var l=e.modifiers;a+=genGuard(["ctrl","shift","alt","meta"].filter(function(e){return!l[e]}).map(function(e){return"$event."+e+"Key"}).join("||"))}else o.push(s);return o.length&&(i+=genKeyFilter(o)),a&&(i+=a),"function($event){"+i+(t?"return "+e.value+"($event)":r?"return ("+e.value+")($event)":n?"return "+e.value:e.value)+"}"}return t||r?e.value:"function($event){"+(n?"return "+e.value:e.value)+"}"}function genKeyFilter(e){return"if(!$event.type.indexOf('key')&&"+e.map(genFilterCode).join("&&")+")return null;"}function genFilterCode(e){var t=parseInt(e,10);if(t)return"$event.keyCode!=="+t;var r=keyCodes[e],n=keyNames[e];return"_k($event.keyCode,"+JSON.stringify(e)+","+JSON.stringify(r)+",$event.key,"+JSON.stringify(n)+")"}function on(e,t){t.modifiers&&warn("v-on without argument does not support modifiers."),e.wrapListeners=function(e){return"_g("+e+","+t.value+")"}}function bind$1(e,t){e.wrapData=function(r){return"_b("+r+",'"+e.tag+"',"+t.value+","+(t.modifiers&&t.modifiers.prop?"true":"false")+(t.modifiers&&t.modifiers.sync?",true":"")+")"}}var baseDirectives={on:on,bind:bind$1,cloak:noop$1},CodegenState=function(e){this.options=e,this.warn=e.warn||baseWarn,this.transforms=pluckModuleFunction(e.modules,"transformCode"),this.dataGenFns=pluckModuleFunction(e.modules,"genData"),this.directives=extend(extend({},baseDirectives),e.directives);var t=e.isReservedTag||no;this.maybeComponent=function(e){return!!e.component||!t(e.tag)},this.onceId=0,this.staticRenderFns=[],this.pre=!1};function generate(e,t){var r=new CodegenState(t);return{render:"with(this){return "+(e?genElement(e,r):'_c("div")')+"}",staticRenderFns:r.staticRenderFns}}function genElement(e,t){if(e.parent&&(e.pre=e.pre||e.parent.pre),e.staticRoot&&!e.staticProcessed)return genStatic(e,t);if(e.once&&!e.onceProcessed)return genOnce(e,t);if(e.for&&!e.forProcessed)return genFor(e,t);if(e.if&&!e.ifProcessed)return genIf(e,t);if("template"!==e.tag||e.slotTarget||t.pre){if("slot"===e.tag)return genSlot(e,t);var r;if(e.component)r=genComponent(e.component,e,t);else{var n;(!e.plain||e.pre&&t.maybeComponent(e))&&(n=genData$2(e,t));var i=e.inlineTemplate?null:genChildren(e,t,!0);r="_c('"+e.tag+"'"+(n?","+n:"")+(i?","+i:"")+")"}for(var a=0;a<t.transforms.length;a++)r=t.transforms[a](e,r);return r}return genChildren(e,t)||"void 0"}function genStatic(e,t){e.staticProcessed=!0;var r=t.pre;return e.pre&&(t.pre=e.pre),t.staticRenderFns.push("with(this){return "+genElement(e,t)+"}"),t.pre=r,"_m("+(t.staticRenderFns.length-1)+(e.staticInFor?",true":"")+")"}function genOnce(e,t){if(e.onceProcessed=!0,e.if&&!e.ifProcessed)return genIf(e,t);if(e.staticInFor){for(var r="",n=e.parent;n;){if(n.for){r=n.key;break}n=n.parent}return r?"_o("+genElement(e,t)+","+t.onceId+++","+r+")":(t.warn("v-once can only be used inside v-for that is keyed. ",e.rawAttrsMap["v-once"]),genElement(e,t))}return genStatic(e,t)}function genIf(e,t,r,n){return e.ifProcessed=!0,genIfConditions(e.ifConditions.slice(),t,r,n)}function genIfConditions(e,t,r,n){if(!e.length)return n||"_e()";var i=e.shift();return i.exp?"("+i.exp+")?"+a(i.block)+":"+genIfConditions(e,t,r,n):""+a(i.block);function a(e){return r?r(e,t):e.once?genOnce(e,t):genElement(e,t)}}function genFor(e,t,r,n){var i=e.for,a=e.alias,o=e.iterator1?","+e.iterator1:"",s=e.iterator2?","+e.iterator2:"";return t.maybeComponent(e)&&"slot"!==e.tag&&"template"!==e.tag&&!e.key&&t.warn("<"+e.tag+' v-for="'+a+" in "+i+'">: component lists rendered with v-for should have explicit keys. See https://vuejs.org/guide/list.html#key for more info.',e.rawAttrsMap["v-for"],!0),e.forProcessed=!0,(n||"_l")+"(("+i+"),function("+a+o+s+"){return "+(r||genElement)(e,t)+"})"}function genData$2(e,t){var r="{",n=genDirectives(e,t);n&&(r+=n+","),e.key&&(r+="key:"+e.key+","),e.ref&&(r+="ref:"+e.ref+","),e.refInFor&&(r+="refInFor:true,"),e.pre&&(r+="pre:true,"),e.component&&(r+='tag:"'+e.tag+'",');for(var i=0;i<t.dataGenFns.length;i++)r+=t.dataGenFns[i](e);if(e.attrs&&(r+="attrs:"+genProps(e.attrs)+","),e.props&&(r+="domProps:"+genProps(e.props)+","),e.events&&(r+=genHandlers(e.events,!1)+","),e.nativeEvents&&(r+=genHandlers(e.nativeEvents,!0)+","),e.slotTarget&&!e.slotScope&&(r+="slot:"+e.slotTarget+","),e.scopedSlots&&(r+=genScopedSlots(e,e.scopedSlots,t)+","),e.model&&(r+="model:{value:"+e.model.value+",callback:"+e.model.callback+",expression:"+e.model.expression+"},"),e.inlineTemplate){var a=genInlineTemplate(e,t);a&&(r+=a+",")}return r=r.replace(/,$/,"")+"}",e.dynamicAttrs&&(r="_b("+r+',"'+e.tag+'",'+genProps(e.dynamicAttrs)+")"),e.wrapData&&(r=e.wrapData(r)),e.wrapListeners&&(r=e.wrapListeners(r)),r}function genDirectives(e,t){var r=e.directives;if(r){var n,i,a,o,s="directives:[",l=!1;for(n=0,i=r.length;n<i;n++){a=r[n],o=!0;var u=t.directives[a.name];u&&(o=!!u(e,a,t.warn)),o&&(l=!0,s+='{name:"'+a.name+'",rawName:"'+a.rawName+'"'+(a.value?",value:("+a.value+"),expression:"+JSON.stringify(a.value):"")+(a.arg?",arg:"+(a.isDynamicArg?a.arg:'"'+a.arg+'"'):"")+(a.modifiers?",modifiers:"+JSON.stringify(a.modifiers):"")+"},")}return l?s.slice(0,-1)+"]":void 0}}function genInlineTemplate(e,t){var r=e.children[0];if(1===e.children.length&&1===r.type||t.warn("Inline-template components must have exactly one child element.",{start:e.start}),r&&1===r.type){var n=generate(r,t.options);return"inlineTemplate:{render:function(){"+n.render+"},staticRenderFns:["+n.staticRenderFns.map(function(e){return"function(){"+e+"}"}).join(",")+"]}"}}function genScopedSlots(e,t,r){var n=Object.keys(t).some(function(e){var r=t[e];return r.slotTargetDynamic||r.if||r.for||containsSlotChild(r)});if(!n)for(var i=e.parent;i;){if(i.slotScope&&i.slotScope!==emptySlotScopeToken){n=!0;break}i=i.parent}return"scopedSlots:_u(["+Object.keys(t).map(function(e){return genScopedSlot(t[e],r)}).join(",")+"]"+(n?",true":"")+")"}function containsSlotChild(e){return 1===e.type&&("slot"===e.tag||e.children.some(containsSlotChild))}function genScopedSlot(e,t){var r=e.attrsMap["slot-scope"];if(e.if&&!e.ifProcessed&&!r)return genIf(e,t,genScopedSlot,"null");if(e.for&&!e.forProcessed)return genFor(e,t,genScopedSlot);var n=e.slotScope===emptySlotScopeToken?"":String(e.slotScope),i="function("+n+"){return "+("template"===e.tag?e.if&&r?"("+e.if+")?"+(genChildren(e,t)||"undefined")+":undefined":genChildren(e,t)||"undefined":genElement(e,t))+"}",a=n?"":",proxy:true";return"{key:"+(e.slotTarget||'"default"')+",fn:"+i+a+"}"}function genChildren(e,t,r,n,i){var a=e.children;if(a.length){var o=a[0];if(1===a.length&&o.for&&"template"!==o.tag&&"slot"!==o.tag){var s=r?t.maybeComponent(o)?",1":",0":"";return""+(n||genElement)(o,t)+s}var l=r?getNormalizationType(a,t.maybeComponent):0,u=i||genNode;return"["+a.map(function(e){return u(e,t)}).join(",")+"]"+(l?","+l:"")}}function getNormalizationType(e,t){for(var r=0,n=0;n<e.length;n++){var i=e[n];if(1===i.type){if(needsNormalization(i)||i.ifConditions&&i.ifConditions.some(function(e){return needsNormalization(e.block)})){r=2;break}(t(i)||i.ifConditions&&i.ifConditions.some(function(e){return t(e.block)}))&&(r=1)}}return r}function needsNormalization(e){return void 0!==e.for||"template"===e.tag||"slot"===e.tag}function genNode(e,t){return 1===e.type?genElement(e,t):3===e.type&&e.isComment?genComment(e):genText(e)}function genText(e){return"_v("+(2===e.type?e.expression:transformSpecialNewlines(JSON.stringify(e.text)))+")"}function genComment(e){return"_e("+JSON.stringify(e.text)+")"}function genSlot(e,t){var r=e.slotName||'"default"',n=genChildren(e,t),i="_t("+r+(n?","+n:""),a=e.attrs||e.dynamicAttrs?genProps((e.attrs||[]).concat(e.dynamicAttrs||[]).map(function(e){return{name:camelize(e.name),value:e.value,dynamic:e.dynamic}})):null,o=e.attrsMap["v-bind"];return!a&&!o||n||(i+=",null"),a&&(i+=","+a),o&&(i+=(a?"":",null")+","+o),i+")"}function genComponent(e,t,r){var n=t.inlineTemplate?null:genChildren(t,r,!0);return"_c("+e+","+genData$2(t,r)+(n?","+n:"")+")"}function genProps(e){for(var t="",r="",n=0;n<e.length;n++){var i=e[n],a=transformSpecialNewlines(i.value);i.dynamic?r+=i.name+","+a+",":t+='"'+i.name+'":'+a+","}return t="{"+t.slice(0,-1)+"}",r?"_d("+t+",["+r.slice(0,-1)+"])":t}function transformSpecialNewlines(e){return e.replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}var prohibitedKeywordRE=new RegExp("\\b"+"do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments".split(",").join("\\b|\\b")+"\\b"),unaryOperatorsRE=new RegExp("\\b"+"delete,typeof,void".split(",").join("\\s*\\([^\\)]*\\)|\\b")+"\\s*\\([^\\)]*\\)"),stripStringRE=/'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;function detectErrors(e,t){e&&checkNode(e,t)}function checkNode(e,t){if(1===e.type){for(var r in e.attrsMap)if(dirRE.test(r)){var n=e.attrsMap[r];if(n){var i=e.rawAttrsMap[r];"v-for"===r?checkFor(e,'v-for="'+n+'"',t,i):onRE.test(r)?checkEvent(n,r+'="'+n+'"',t,i):checkExpression(n,r+'="'+n+'"',t,i)}}if(e.children)for(var a=0;a<e.children.length;a++)checkNode(e.children[a],t)}else 2===e.type&&checkExpression(e.expression,e.text,t,e)}function checkEvent(e,t,r,n){var i=e.replace(stripStringRE,""),a=i.match(unaryOperatorsRE);a&&"$"!==i.charAt(a.index-1)&&r('avoid using JavaScript unary operator as property name: "'+a[0]+'" in expression '+t.trim(),n),checkExpression(e,t,r,n)}function checkFor(e,t,r,n){checkExpression(e.for||"",t,r,n),checkIdentifier(e.alias,"v-for alias",t,r,n),checkIdentifier(e.iterator1,"v-for iterator",t,r,n),checkIdentifier(e.iterator2,"v-for iterator",t,r,n)}function checkIdentifier(e,t,r,n,i){if("string"==typeof e)try{new Function("var "+e+"=_")}catch(a){n("invalid "+t+' "'+e+'" in expression: '+r.trim(),i)}}function checkExpression(e,t,r,n){try{new Function("return "+e)}catch(a){var i=e.replace(stripStringRE,"").match(prohibitedKeywordRE);r(i?'avoid using JavaScript keyword as property name: "'+i[0]+'"\n  Raw expression: '+t.trim():"invalid expression: "+a.message+" in\n\n    "+e+"\n\n  Raw expression: "+t.trim()+"\n",n)}}var range=2;function generateCodeFrame(e,t,r){void 0===t&&(t=0),void 0===r&&(r=e.length);for(var n=e.split(/\r?\n/),i=0,a=[],o=0;o<n.length;o++)if((i+=n[o].length+1)>=t){for(var s=o-range;s<=o+range||r>i;s++)if(!(s<0||s>=n.length)){a.push(""+(s+1)+repeat(" ",3-String(s+1).length)+"|  "+n[s]);var l=n[s].length;if(s===o){var u=t-(i-l)+1,c=r>i?l-u:r-t;a.push("   |  "+repeat(" ",u)+repeat("^",c))}else if(s>o){if(r>i){var d=Math.min(r-i,l);a.push("   |  "+repeat("^",d))}i+=l+1}}break}return a.join("\n")}function repeat(e,t){for(var r="";1&t&&(r+=e),!((t>>>=1)<=0);)e+=e;return r}function createFunction(e,t){try{return new Function(e)}catch(r){return t.push({err:r,code:e}),noop$1}}function createCompileToFunctionFn(e){var t=Object.create(null);return function(r,n,i){var a=(n=extend({},n)).warn||warn;delete n.warn;try{new Function("return 1")}catch(e){e.toString().match(/unsafe-eval|CSP/)&&a("It seems you are using the standalone build of Vue.js in an environment with Content Security Policy that prohibits unsafe-eval. The template compiler cannot work in this environment. Consider relaxing the policy to allow unsafe-eval or pre-compiling your templates into render functions.")}var o=n.delimiters?String(n.delimiters)+r:r;if(t[o])return t[o];var s=e(r,n);s.errors&&s.errors.length&&(n.outputSourceRange?s.errors.forEach(function(e){a("Error compiling template:\n\n"+e.msg+"\n\n"+generateCodeFrame(r,e.start,e.end),i)}):a("Error compiling template:\n\n"+r+"\n\n"+s.errors.map(function(e){return"- "+e}).join("\n")+"\n",i)),s.tips&&s.tips.length&&(n.outputSourceRange?s.tips.forEach(function(e){return tip(e.msg,i)}):s.tips.forEach(function(e){return tip(e,i)}));var l={},u=[];return l.render=createFunction(s.render,u),l.staticRenderFns=s.staticRenderFns.map(function(e){return createFunction(e,u)}),s.errors&&s.errors.length||!u.length||a("Failed to generate render function:\n\n"+u.map(function(e){var t=e.err,r=e.code;return t.toString()+" in\n\n"+r+"\n"}).join("\n"),i),t[o]=l}}function createCompilerCreator(e){return function(t){function r(r,n){var i=Object.create(t),a=[],o=[],s=function(e,t,r){(r?o:a).push(e)};if(n){if(n.outputSourceRange){var l=r.match(/^\s*/)[0].length;s=function(e,t,r){var n={msg:e};t&&(null!=t.start&&(n.start=t.start+l),null!=t.end&&(n.end=t.end+l)),(r?o:a).push(n)}}for(var u in n.modules&&(i.modules=(t.modules||[]).concat(n.modules)),n.directives&&(i.directives=extend(Object.create(t.directives||null),n.directives)),n)"modules"!==u&&"directives"!==u&&(i[u]=n[u])}i.warn=s;var c=e(r.trim(),i);return detectErrors(c.ast,s),c.errors=a,c.tips=o,c}return{compile:r,compileToFunctions:createCompileToFunctionFn(r)}}}var div,createCompiler=createCompilerCreator(function(e,t){var r=parse(e.trim(),t);!1!==t.optimize&&optimize(r,t);var n=generate(r,t);return{ast:r,render:n.render,staticRenderFns:n.staticRenderFns}}),ref$1=createCompiler(baseOptions),compileToFunctions=ref$1.compileToFunctions;function getShouldDecode(e){return(div=div||document.createElement("div")).innerHTML=e?'<a href="\n"/>':'<div a="\n"/>',div.innerHTML.indexOf("&#10;")>0}var shouldDecodeNewlines=!!inBrowser&&getShouldDecode(!1),shouldDecodeNewlinesForHref=!!inBrowser&&getShouldDecode(!0),idToTemplate=cached(function(e){var t=query(e);return t&&t.innerHTML}),mount=Vue.prototype.$mount;function getOuterHTML(e){if(e.outerHTML)return e.outerHTML;var t=document.createElement("div");return t.appendChild(e.cloneNode(!0)),t.innerHTML}Vue.prototype.$mount=function(e,t){if((e=e&&query(e))===document.body||e===document.documentElement)return warn("Do not mount Vue to <html> or <body> - mount to normal elements instead."),this;var r=this.$options;if(!r.render){var n=r.template;if(n)if("string"==typeof n)"#"===n.charAt(0)&&((n=idToTemplate(n))||warn("Template element not found or is empty: "+r.template,this));else{if(!n.nodeType)return warn("invalid template option:"+n,this),this;n=n.innerHTML}else e&&(n=getOuterHTML(e));if(n){config.performance&&mark&&mark("compile");var i=compileToFunctions(n,{outputSourceRange:!0,shouldDecodeNewlines:shouldDecodeNewlines,shouldDecodeNewlinesForHref:shouldDecodeNewlinesForHref,delimiters:r.delimiters,comments:r.comments},this),a=i.render,o=i.staticRenderFns;r.render=a,r.staticRenderFns=o,config.performance&&mark&&(mark("compile end"),measure("vue "+this._name+" compile","compile","compile end"))}}return mount.call(this,e,t)},Vue.compile=compileToFunctions;var script={props:["options","value"],data:function(){return{selected:null}},mounted:function(){this.selected=this.value},watch:{value:function(e){this.selected=e}}};function normalizeComponent(e,t,r,n,i,a,o,s,l,u){"boolean"!=typeof o&&(l=s,s=o,o=!1);var c,d="function"==typeof r?r.options:r;if(e&&e.render&&(d.render=e.render,d.staticRenderFns=e.staticRenderFns,d._compiled=!0,i&&(d.functional=!0)),n&&(d._scopeId=n),a?(c=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),t&&t.call(this,l(e)),e&&e._registeredComponents&&e._registeredComponents.add(a)},d._ssrRegister=c):t&&(c=o?function(){t.call(this,u(this.$root.$options.shadowRoot))}:function(e){t.call(this,s(e))}),c)if(d.functional){var h=d.render;d.render=function(e,t){return c.call(t),h(e,t)}}else{var f=d.beforeCreate;d.beforeCreate=f?[].concat(f,c):[c]}return r}var normalizeComponent_1=normalizeComponent,isOldIE="undefined"!=typeof navigator&&/msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());function createInjector(e){return function(e,t){return addStyle(e,t)}}var HEAD=document.head||document.getElementsByTagName("head")[0],styles={};function addStyle(e,t){var r=isOldIE?t.media||"default":e,n=styles[r]||(styles[r]={ids:new Set,styles:[]});if(!n.ids.has(e)){n.ids.add(e);var i=t.source;if(t.map&&(i+="\n/*# sourceURL="+t.map.sources[0]+" */",i+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(t.map))))+" */"),n.element||(n.element=document.createElement("style"),n.element.type="text/css",t.media&&n.element.setAttribute("media",t.media),HEAD.appendChild(n.element)),"styleSheet"in n.element)n.styles.push(i),n.element.styleSheet.cssText=n.styles.filter(Boolean).join("\n");else{var a=n.ids.size-1,o=document.createTextNode(i),s=n.element.childNodes;s[a]&&n.element.removeChild(s[a]),s.length?n.element.insertBefore(o,s[a]):n.element.appendChild(o)}}}var browser=createInjector,__vue_script__=script,__vue_render__=function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",[r("select",{directives:[{name:"model",rawName:"v-model",value:e.selected,expression:"selected"}],staticClass:"select",on:{input:function(t){e.$emit("input",t.target.value)},change:function(t){var r=Array.prototype.filter.call(t.target.options,function(e){return e.selected}).map(function(e){return"_value"in e?e._value:e.value});e.selected=t.target.multiple?r:r[0]}}},e._l(e.options,function(t){return r("option",{key:t.value,domProps:{value:t.value}},[e._v("\n      "+e._s(t.text)+"\n    ")])}),0)])},__vue_staticRenderFns__=[];__vue_render__._withStripped=!0;var __vue_inject_styles__=function(e){e&&e("data-v-afd20650_0",{source:"\n\n\n\n\n\n\n\n\n\n",map:{version:3,sources:[],names:[],mappings:"",file:"select.vue"},media:void 0})},__vue_scope_id__=void 0,__vue_module_identifier__=void 0,__vue_is_functional_template__=!1,SelectComponent=normalizeComponent_1({render:__vue_render__,staticRenderFns:__vue_staticRenderFns__},__vue_inject_styles__,__vue_script__,__vue_scope_id__,__vue_is_functional_template__,__vue_module_identifier__,browser,void 0),SelectData=[{text:"All Boroughs",value:"all"},{text:"Brooklyn",value:"brooklyn"},{text:"Queens",value:"queens"},{text:"Manhattan",value:"manhattan"},{text:"Staten Island",value:"staten island"},{text:"The Bronx",value:"bronx"}],Select=function(e,t){void 0===e&&(e={}),void 0===t&&(t={}),this.data=t,this.settings=e,this.init()};function dataHandler(e,t){if(t){var r=this.$data._chart,n=e.datasets.map(function(e){return e.label}),i=t.datasets.map(function(e){return e.label}),a=JSON.stringify(i);JSON.stringify(n)===a&&t.datasets.length===e.datasets.length?(e.datasets.forEach(function(e,n){var i=Object.keys(t.datasets[n]),a=Object.keys(e),o=i.filter(function(e){return"_meta"!==e&&-1===a.indexOf(e)});for(var s in o.forEach(function(e){delete r.data.datasets[n][e]}),e)e.hasOwnProperty(s)&&(r.data.datasets[n][s]=e[s])}),e.hasOwnProperty("labels")&&(r.data.labels=e.labels,this.$emit("labels:update")),e.hasOwnProperty("xLabels")&&(r.data.xLabels=e.xLabels,this.$emit("xlabels:update")),e.hasOwnProperty("yLabels")&&(r.data.yLabels=e.yLabels,this.$emit("ylabels:update")),r.update(),this.$emit("chart:update")):(r&&(r.destroy(),this.$emit("chart:destroy")),this.renderChart(this.chartData,this.options),this.$emit("chart:render"))}else this.$data._chart&&(this.$data._chart.destroy(),this.$emit("chart:destroy")),this.renderChart(this.chartData,this.options),this.$emit("chart:render")}Select.prototype.init=function(){Vue.component("nyco-select",SelectComponent),new Vue({el:'[data-js="app"]',delimiters:["v{","}"],data:function(){return{options:Select.data,selected:"all"}},methods:{}})},Select.prototype._constants=function(e){console.dir(e)},Select.data=SelectData;var reactiveData={data:function(){return{chartData:null}},watch:{chartData:dataHandler}},reactiveProp={props:{chartData:{required:!0}},watch:{chartData:dataHandler}},mixins={reactiveData:reactiveData,reactiveProp:reactiveProp},helpers={noop:function(){},uid:function(){var e=0;return function(){return e++}}(),isNullOrUndef:function(e){return null===e||void 0===e},isArray:Array.isArray?Array.isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)},isObject:function(e){return null!==e&&"[object Object]"===Object.prototype.toString.call(e)},valueOrDefault:function(e,t){return void 0===e?t:e},valueAtIndexOrDefault:function(e,t,r){return helpers.valueOrDefault(helpers.isArray(e)?e[t]:e,r)},callback:function(e,t,r){if(e&&"function"==typeof e.call)return e.apply(r,t)},each:function(e,t,r,n){var i,a,o;if(helpers.isArray(e))if(a=e.length,n)for(i=a-1;i>=0;i--)t.call(r,e[i],i);else for(i=0;i<a;i++)t.call(r,e[i],i);else if(helpers.isObject(e))for(a=(o=Object.keys(e)).length,i=0;i<a;i++)t.call(r,e[o[i]],o[i])},arrayEquals:function(e,t){var r,n,i,a;if(!e||!t||e.length!==t.length)return!1;for(r=0,n=e.length;r<n;++r)if(i=e[r],a=t[r],i instanceof Array&&a instanceof Array){if(!helpers.arrayEquals(i,a))return!1}else if(i!==a)return!1;return!0},clone:function(e){if(helpers.isArray(e))return e.map(helpers.clone);if(helpers.isObject(e)){for(var t={},r=Object.keys(e),n=r.length,i=0;i<n;++i)t[r[i]]=helpers.clone(e[r[i]]);return t}return e},_merger:function(e,t,r,n){var i=t[e],a=r[e];helpers.isObject(i)&&helpers.isObject(a)?helpers.merge(i,a,n):t[e]=helpers.clone(a)},_mergerIf:function(e,t,r){var n=t[e],i=r[e];helpers.isObject(n)&&helpers.isObject(i)?helpers.mergeIf(n,i):t.hasOwnProperty(e)||(t[e]=helpers.clone(i))},merge:function(e,t,r){var n,i,a,o,s,l=helpers.isArray(t)?t:[t],u=l.length;if(!helpers.isObject(e))return e;for(n=(r=r||{}).merger||helpers._merger,i=0;i<u;++i)if(t=l[i],helpers.isObject(t))for(s=0,o=(a=Object.keys(t)).length;s<o;++s)n(a[s],e,t,r);return e},mergeIf:function(e,t){return helpers.merge(e,t,{merger:helpers._mergerIf})},extend:function(e){for(var t=arguments,r=function(t,r){e[r]=t},n=1,i=arguments.length;n<i;++n)helpers.each(t[n],r);return e},inherits:function(e){var t=this,r=e&&e.hasOwnProperty("constructor")?e.constructor:function(){return t.apply(this,arguments)},n=function(){this.constructor=r};return n.prototype=t.prototype,r.prototype=new n,r.extend=helpers.inherits,e&&helpers.extend(r.prototype,e),r.__super__=t.prototype,r}},helpers_core=helpers;helpers.callCallback=helpers.callback,helpers.indexOf=function(e,t,r){return Array.prototype.indexOf.call(e,t,r)},helpers.getValueOrDefault=helpers.valueOrDefault,helpers.getValueAtIndexOrDefault=helpers.valueAtIndexOrDefault;var effects={linear:function(e){return e},easeInQuad:function(e){return e*e},easeOutQuad:function(e){return-e*(e-2)},easeInOutQuad:function(e){return(e/=.5)<1?.5*e*e:-.5*(--e*(e-2)-1)},easeInCubic:function(e){return e*e*e},easeOutCubic:function(e){return(e-=1)*e*e+1},easeInOutCubic:function(e){return(e/=.5)<1?.5*e*e*e:.5*((e-=2)*e*e+2)},easeInQuart:function(e){return e*e*e*e},easeOutQuart:function(e){return-((e-=1)*e*e*e-1)},easeInOutQuart:function(e){return(e/=.5)<1?.5*e*e*e*e:-.5*((e-=2)*e*e*e-2)},easeInQuint:function(e){return e*e*e*e*e},easeOutQuint:function(e){return(e-=1)*e*e*e*e+1},easeInOutQuint:function(e){return(e/=.5)<1?.5*e*e*e*e*e:.5*((e-=2)*e*e*e*e+2)},easeInSine:function(e){return 1-Math.cos(e*(Math.PI/2))},easeOutSine:function(e){return Math.sin(e*(Math.PI/2))},easeInOutSine:function(e){return-.5*(Math.cos(Math.PI*e)-1)},easeInExpo:function(e){return 0===e?0:Math.pow(2,10*(e-1))},easeOutExpo:function(e){return 1===e?1:1-Math.pow(2,-10*e)},easeInOutExpo:function(e){return 0===e?0:1===e?1:(e/=.5)<1?.5*Math.pow(2,10*(e-1)):.5*(2-Math.pow(2,-10*--e))},easeInCirc:function(e){return e>=1?e:-(Math.sqrt(1-e*e)-1)},easeOutCirc:function(e){return Math.sqrt(1-(e-=1)*e)},easeInOutCirc:function(e){return(e/=.5)<1?-.5*(Math.sqrt(1-e*e)-1):.5*(Math.sqrt(1-(e-=2)*e)+1)},easeInElastic:function(e){var t=1.70158,r=0,n=1;return 0===e?0:1===e?1:(r||(r=.3),n<1?(n=1,t=r/4):t=r/(2*Math.PI)*Math.asin(1/n),-n*Math.pow(2,10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/r))},easeOutElastic:function(e){var t=1.70158,r=0,n=1;return 0===e?0:1===e?1:(r||(r=.3),n<1?(n=1,t=r/4):t=r/(2*Math.PI)*Math.asin(1/n),n*Math.pow(2,-10*e)*Math.sin((e-t)*(2*Math.PI)/r)+1)},easeInOutElastic:function(e){var t=1.70158,r=0,n=1;return 0===e?0:2==(e/=.5)?1:(r||(r=.45),n<1?(n=1,t=r/4):t=r/(2*Math.PI)*Math.asin(1/n),e<1?n*Math.pow(2,10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/r)*-.5:n*Math.pow(2,-10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/r)*.5+1)},easeInBack:function(e){var t=1.70158;return e*e*((t+1)*e-t)},easeOutBack:function(e){var t=1.70158;return(e-=1)*e*((t+1)*e+t)+1},easeInOutBack:function(e){var t=1.70158;return(e/=.5)<1?e*e*((1+(t*=1.525))*e-t)*.5:.5*((e-=2)*e*((1+(t*=1.525))*e+t)+2)},easeInBounce:function(e){return 1-effects.easeOutBounce(1-e)},easeOutBounce:function(e){return e<1/2.75?7.5625*e*e:e<2/2.75?7.5625*(e-=1.5/2.75)*e+.75:e<2.5/2.75?7.5625*(e-=2.25/2.75)*e+.9375:7.5625*(e-=2.625/2.75)*e+.984375},easeInOutBounce:function(e){return e<.5?.5*effects.easeInBounce(2*e):.5*effects.easeOutBounce(2*e-1)+.5}},helpers_easing={effects:effects};helpers_core.easingEffects=effects;var commonjsGlobal="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function commonjsRequire(){throw new Error("Dynamic requires are not currently supported by rollup-plugin-commonjs")}function createCommonjsModule(e,t){return e(t={exports:{}},t.exports),t.exports}var helpers_canvas=createCommonjsModule(function(e){var t=e.exports={clear:function(e){e.ctx.clearRect(0,0,e.width,e.height)},roundedRect:function(e,t,r,n,i,a){if(a){var o=Math.min(a,i/2-1e-7,n/2-1e-7);e.moveTo(t+o,r),e.lineTo(t+n-o,r),e.arcTo(t+n,r,t+n,r+o,o),e.lineTo(t+n,r+i-o),e.arcTo(t+n,r+i,t+n-o,r+i,o),e.lineTo(t+o,r+i),e.arcTo(t,r+i,t,r+i-o,o),e.lineTo(t,r+o),e.arcTo(t,r,t+o,r,o),e.closePath(),e.moveTo(t,r)}else e.rect(t,r,n,i)},drawPoint:function(e,t,r,n,i,a){var o,s,l,u,c,d;if(a=a||0,!t||"object"!==(void 0===t?"undefined":_typeof(t))||"[object HTMLImageElement]"!==(o=t.toString())&&"[object HTMLCanvasElement]"!==o){if(!(isNaN(r)||r<=0)){switch(e.save(),e.translate(n,i),e.rotate(a*Math.PI/180),e.beginPath(),t){default:e.arc(0,0,r,0,2*Math.PI),e.closePath();break;case"triangle":c=(s=3*r/Math.sqrt(3))*Math.sqrt(3)/2,e.moveTo(-s/2,c/3),e.lineTo(s/2,c/3),e.lineTo(0,-2*c/3),e.closePath();break;case"rect":d=1/Math.SQRT2*r,e.rect(-d,-d,2*d,2*d);break;case"rectRounded":var h=r/Math.SQRT2,f=-h,p=-h,g=Math.SQRT2*r;this.roundedRect(e,f,p,g,g,.425*r);break;case"rectRot":d=1/Math.SQRT2*r,e.moveTo(-d,0),e.lineTo(0,d),e.lineTo(d,0),e.lineTo(0,-d),e.closePath();break;case"cross":e.moveTo(0,r),e.lineTo(0,-r),e.moveTo(-r,0),e.lineTo(r,0);break;case"crossRot":l=Math.cos(Math.PI/4)*r,u=Math.sin(Math.PI/4)*r,e.moveTo(-l,-u),e.lineTo(l,u),e.moveTo(-l,u),e.lineTo(l,-u);break;case"star":e.moveTo(0,r),e.lineTo(0,-r),e.moveTo(-r,0),e.lineTo(r,0),l=Math.cos(Math.PI/4)*r,u=Math.sin(Math.PI/4)*r,e.moveTo(-l,-u),e.lineTo(l,u),e.moveTo(-l,u),e.lineTo(l,-u);break;case"line":e.moveTo(-r,0),e.lineTo(r,0);break;case"dash":e.moveTo(0,0),e.lineTo(r,0)}e.fill(),e.stroke(),e.restore()}}else e.drawImage(t,n-t.width/2,i-t.height/2,t.width,t.height)},clipArea:function(e,t){e.save(),e.beginPath(),e.rect(t.left,t.top,t.right-t.left,t.bottom-t.top),e.clip()},unclipArea:function(e){e.restore()},lineTo:function(e,t,r,n){if(r.steppedLine)return"after"===r.steppedLine&&!n||"after"!==r.steppedLine&&n?e.lineTo(t.x,r.y):e.lineTo(r.x,t.y),void e.lineTo(r.x,r.y);r.tension?e.bezierCurveTo(n?t.controlPointPreviousX:t.controlPointNextX,n?t.controlPointPreviousY:t.controlPointNextY,n?r.controlPointNextX:r.controlPointPreviousX,n?r.controlPointNextY:r.controlPointPreviousY,r.x,r.y):e.lineTo(r.x,r.y)}};helpers_core.clear=t.clear,helpers_core.drawRoundedRectangle=function(e){e.beginPath(),t.roundedRect.apply(t,arguments)}}),helpers_canvas_1=helpers_canvas.clear,helpers_canvas_2=helpers_canvas.roundedRect,helpers_canvas_3=helpers_canvas.drawPoint,helpers_canvas_4=helpers_canvas.clipArea,helpers_canvas_5=helpers_canvas.unclipArea,helpers_canvas_6=helpers_canvas.lineTo,helpers_options={toLineHeight:function(e,t){var r=(""+e).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);if(!r||"normal"===r[1])return 1.2*t;switch(e=+r[2],r[3]){case"px":return e;case"%":e/=100}return t*e},toPadding:function(e){var t,r,n,i;return helpers_core.isObject(e)?(t=+e.top||0,r=+e.right||0,n=+e.bottom||0,i=+e.left||0):t=r=n=i=+e||0,{top:t,right:r,bottom:n,left:i,height:t+n,width:i+r}},resolve:function(e,t,r){var n,i,a;for(n=0,i=e.length;n<i;++n)if(void 0!==(a=e[n])&&(void 0!==t&&"function"==typeof a&&(a=a(t)),void 0!==r&&helpers_core.isArray(a)&&(a=a[r]),void 0!==a))return a}},helpers$1=helpers_core,easing=helpers_easing,canvas=helpers_canvas,options=helpers_options;helpers$1.easing=easing,helpers$1.canvas=canvas,helpers$1.options=options;var core_defaults={_set:function(e,t){return helpers$1.merge(this[e]||(this[e]={}),t)}};core_defaults._set("global",{responsive:!0,responsiveAnimationDuration:0,maintainAspectRatio:!0,events:["mousemove","mouseout","click","touchstart","touchmove"],hover:{onHover:null,mode:"nearest",intersect:!0,animationDuration:400},onClick:null,defaultColor:"rgba(0,0,0,0.1)",defaultFontColor:"#666",defaultFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",defaultFontSize:12,defaultFontStyle:"normal",showLines:!0,elements:{},layout:{padding:{top:0,right:0,bottom:0,left:0}}});var core=function(){var e=function(e,t){return this.construct(e,t),this};return e.Chart=e,e},conversions={rgb2hsl:rgb2hsl,rgb2hsv:rgb2hsv,rgb2hwb:rgb2hwb,rgb2cmyk:rgb2cmyk,rgb2keyword:rgb2keyword,rgb2xyz:rgb2xyz,rgb2lab:rgb2lab,rgb2lch:rgb2lch,hsl2rgb:hsl2rgb,hsl2hsv:hsl2hsv,hsl2hwb:hsl2hwb,hsl2cmyk:hsl2cmyk,hsl2keyword:hsl2keyword,hsv2rgb:hsv2rgb,hsv2hsl:hsv2hsl,hsv2hwb:hsv2hwb,hsv2cmyk:hsv2cmyk,hsv2keyword:hsv2keyword,hwb2rgb:hwb2rgb,hwb2hsl:hwb2hsl,hwb2hsv:hwb2hsv,hwb2cmyk:hwb2cmyk,hwb2keyword:hwb2keyword,cmyk2rgb:cmyk2rgb,cmyk2hsl:cmyk2hsl,cmyk2hsv:cmyk2hsv,cmyk2hwb:cmyk2hwb,cmyk2keyword:cmyk2keyword,keyword2rgb:keyword2rgb,keyword2hsl:keyword2hsl,keyword2hsv:keyword2hsv,keyword2hwb:keyword2hwb,keyword2cmyk:keyword2cmyk,keyword2lab:keyword2lab,keyword2xyz:keyword2xyz,xyz2rgb:xyz2rgb,xyz2lab:xyz2lab,xyz2lch:xyz2lch,lab2xyz:lab2xyz,lab2rgb:lab2rgb,lab2lch:lab2lch,lch2lab:lch2lab,lch2xyz:lch2xyz,lch2rgb:lch2rgb};function rgb2hsl(e){var t,r,n=e[0]/255,i=e[1]/255,a=e[2]/255,o=Math.min(n,i,a),s=Math.max(n,i,a),l=s-o;return s==o?t=0:n==s?t=(i-a)/l:i==s?t=2+(a-n)/l:a==s&&(t=4+(n-i)/l),(t=Math.min(60*t,360))<0&&(t+=360),r=(o+s)/2,[t,100*(s==o?0:r<=.5?l/(s+o):l/(2-s-o)),100*r]}function rgb2hsv(e){var t,r,n=e[0],i=e[1],a=e[2],o=Math.min(n,i,a),s=Math.max(n,i,a),l=s-o;return r=0==s?0:l/s*1e3/10,s==o?t=0:n==s?t=(i-a)/l:i==s?t=2+(a-n)/l:a==s&&(t=4+(n-i)/l),(t=Math.min(60*t,360))<0&&(t+=360),[t,r,s/255*1e3/10]}function rgb2hwb(e){var t=e[0],r=e[1],n=e[2];return[rgb2hsl(e)[0],100*(1/255*Math.min(t,Math.min(r,n))),100*(n=1-1/255*Math.max(t,Math.max(r,n)))]}function rgb2cmyk(e){var t,r=e[0]/255,n=e[1]/255,i=e[2]/255;return[100*((1-r-(t=Math.min(1-r,1-n,1-i)))/(1-t)||0),100*((1-n-t)/(1-t)||0),100*((1-i-t)/(1-t)||0),100*t]}function rgb2keyword(e){return reverseKeywords[JSON.stringify(e)]}function rgb2xyz(e){var t=e[0]/255,r=e[1]/255,n=e[2]/255;return[100*(.4124*(t=t>.04045?Math.pow((t+.055)/1.055,2.4):t/12.92)+.3576*(r=r>.04045?Math.pow((r+.055)/1.055,2.4):r/12.92)+.1805*(n=n>.04045?Math.pow((n+.055)/1.055,2.4):n/12.92)),100*(.2126*t+.7152*r+.0722*n),100*(.0193*t+.1192*r+.9505*n)]}function rgb2lab(e){var t=rgb2xyz(e),r=t[0],n=t[1],i=t[2];return n/=100,i/=108.883,r=(r/=95.047)>.008856?Math.pow(r,1/3):7.787*r+16/116,[116*(n=n>.008856?Math.pow(n,1/3):7.787*n+16/116)-16,500*(r-n),200*(n-(i=i>.008856?Math.pow(i,1/3):7.787*i+16/116))]}function rgb2lch(e){return lab2lch(rgb2lab(e))}function hsl2rgb(e){var t,r,n,i,a,o=e[0]/360,s=e[1]/100,l=e[2]/100;if(0==s)return[a=255*l,a,a];t=2*l-(r=l<.5?l*(1+s):l+s-l*s),i=[0,0,0];for(var u=0;u<3;u++)(n=o+1/3*-(u-1))<0&&n++,n>1&&n--,a=6*n<1?t+6*(r-t)*n:2*n<1?r:3*n<2?t+(r-t)*(2/3-n)*6:t,i[u]=255*a;return i}function hsl2hsv(e){var t=e[0],r=e[1]/100,n=e[2]/100;return 0===n?[0,0,0]:[t,100*(2*(r*=(n*=2)<=1?n:2-n)/(n+r)),100*((n+r)/2)]}function hsl2hwb(e){return rgb2hwb(hsl2rgb(e))}function hsl2cmyk(e){return rgb2cmyk(hsl2rgb(e))}function hsl2keyword(e){return rgb2keyword(hsl2rgb(e))}function hsv2rgb(e){var t=e[0]/60,r=e[1]/100,n=e[2]/100,i=Math.floor(t)%6,a=t-Math.floor(t),o=255*n*(1-r),s=255*n*(1-r*a),l=255*n*(1-r*(1-a));n*=255;switch(i){case 0:return[n,l,o];case 1:return[s,n,o];case 2:return[o,n,l];case 3:return[o,s,n];case 4:return[l,o,n];case 5:return[n,o,s]}}function hsv2hsl(e){var t,r,n=e[0],i=e[1]/100,a=e[2]/100;return t=i*a,[n,100*(t=(t/=(r=(2-i)*a)<=1?r:2-r)||0),100*(r/=2)]}function hsv2hwb(e){return rgb2hwb(hsv2rgb(e))}function hsv2cmyk(e){return rgb2cmyk(hsv2rgb(e))}function hsv2keyword(e){return rgb2keyword(hsv2rgb(e))}function hwb2rgb(e){var t,n,i,a,o=e[0]/360,s=e[1]/100,l=e[2]/100,u=s+l;switch(u>1&&(s/=u,l/=u),n=1-l,i=6*o-(t=Math.floor(6*o)),0!=(1&t)&&(i=1-i),a=s+i*(n-s),t){default:case 6:case 0:r=n,g=a,b=s;break;case 1:r=a,g=n,b=s;break;case 2:r=s,g=n,b=a;break;case 3:r=s,g=a,b=n;break;case 4:r=a,g=s,b=n;break;case 5:r=n,g=s,b=a}return[255*r,255*g,255*b]}function hwb2hsl(e){return rgb2hsl(hwb2rgb(e))}function hwb2hsv(e){return rgb2hsv(hwb2rgb(e))}function hwb2cmyk(e){return rgb2cmyk(hwb2rgb(e))}function hwb2keyword(e){return rgb2keyword(hwb2rgb(e))}function cmyk2rgb(e){var t=e[0]/100,r=e[1]/100,n=e[2]/100,i=e[3]/100;return[255*(1-Math.min(1,t*(1-i)+i)),255*(1-Math.min(1,r*(1-i)+i)),255*(1-Math.min(1,n*(1-i)+i))]}function cmyk2hsl(e){return rgb2hsl(cmyk2rgb(e))}function cmyk2hsv(e){return rgb2hsv(cmyk2rgb(e))}function cmyk2hwb(e){return rgb2hwb(cmyk2rgb(e))}function cmyk2keyword(e){return rgb2keyword(cmyk2rgb(e))}function xyz2rgb(e){var t,r,n,i=e[0]/100,a=e[1]/100,o=e[2]/100;return r=-.9689*i+1.8758*a+.0415*o,n=.0557*i+-.204*a+1.057*o,t=(t=3.2406*i+-1.5372*a+-.4986*o)>.0031308?1.055*Math.pow(t,1/2.4)-.055:t*=12.92,r=r>.0031308?1.055*Math.pow(r,1/2.4)-.055:r*=12.92,n=n>.0031308?1.055*Math.pow(n,1/2.4)-.055:n*=12.92,[255*(t=Math.min(Math.max(0,t),1)),255*(r=Math.min(Math.max(0,r),1)),255*(n=Math.min(Math.max(0,n),1))]}function xyz2lab(e){var t=e[0],r=e[1],n=e[2];return r/=100,n/=108.883,t=(t/=95.047)>.008856?Math.pow(t,1/3):7.787*t+16/116,[116*(r=r>.008856?Math.pow(r,1/3):7.787*r+16/116)-16,500*(t-r),200*(r-(n=n>.008856?Math.pow(n,1/3):7.787*n+16/116))]}function xyz2lch(e){return lab2lch(xyz2lab(e))}function lab2xyz(e){var t,r,n,i,a=e[0],o=e[1],s=e[2];return a<=8?i=(r=100*a/903.3)/100*7.787+16/116:(r=100*Math.pow((a+16)/116,3),i=Math.pow(r/100,1/3)),[t=t/95.047<=.008856?t=95.047*(o/500+i-16/116)/7.787:95.047*Math.pow(o/500+i,3),r,n=n/108.883<=.008859?n=108.883*(i-s/200-16/116)/7.787:108.883*Math.pow(i-s/200,3)]}function lab2lch(e){var t,r=e[0],n=e[1],i=e[2];return(t=360*Math.atan2(i,n)/2/Math.PI)<0&&(t+=360),[r,Math.sqrt(n*n+i*i),t]}function lab2rgb(e){return xyz2rgb(lab2xyz(e))}function lch2lab(e){var t,r=e[0],n=e[1];return t=e[2]/360*2*Math.PI,[r,n*Math.cos(t),n*Math.sin(t)]}function lch2xyz(e){return lab2xyz(lch2lab(e))}function lch2rgb(e){return lab2rgb(lch2lab(e))}function keyword2rgb(e){return cssKeywords[e]}function keyword2hsl(e){return rgb2hsl(keyword2rgb(e))}function keyword2hsv(e){return rgb2hsv(keyword2rgb(e))}function keyword2hwb(e){return rgb2hwb(keyword2rgb(e))}function keyword2cmyk(e){return rgb2cmyk(keyword2rgb(e))}function keyword2lab(e){return rgb2lab(keyword2rgb(e))}function keyword2xyz(e){return rgb2xyz(keyword2rgb(e))}var cssKeywords={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},reverseKeywords={};for(var key in cssKeywords)reverseKeywords[JSON.stringify(cssKeywords[key])]=key;var convert=function(){return new Converter};for(var func in conversions){convert[func+"Raw"]=function(e){return function(t){return"number"==typeof t&&(t=Array.prototype.slice.call(arguments)),conversions[e](t)}}(func);var pair=/(\w+)2(\w+)/.exec(func),from=pair[1],to=pair[2];convert[from]=convert[from]||{},convert[from][to]=convert[func]=function(e){return function(t){"number"==typeof t&&(t=Array.prototype.slice.call(arguments));var r=conversions[e](t);if("string"==typeof r||void 0===r)return r;for(var n=0;n<r.length;n++)r[n]=Math.round(r[n]);return r}}(func)}var Converter=function(){this.convs={}};Converter.prototype.routeSpace=function(e,t){var r=t[0];return void 0===r?this.getValues(e):("number"==typeof r&&(r=Array.prototype.slice.call(t)),this.setValues(e,r))},Converter.prototype.setValues=function(e,t){return this.space=e,this.convs={},this.convs[e]=t,this},Converter.prototype.getValues=function(e){var t=this.convs[e];if(!t){var r=this.space,n=this.convs[r];t=convert[r][e](n),this.convs[e]=t}return t},["rgb","hsl","hsv","cmyk","keyword"].forEach(function(e){Converter.prototype[e]=function(t){return this.routeSpace(e,arguments)}});var colorConvert=convert,colorName={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},colorString={getRgba:getRgba,getHsla:getHsla,getRgb:getRgb,getHsl:getHsl,getHwb:getHwb,getAlpha:getAlpha,hexString:hexString,rgbString:rgbString,rgbaString:rgbaString,percentString:percentString,percentaString:percentaString,hslString:hslString,hslaString:hslaString,hwbString:hwbString,keyword:keyword};function getRgba(e){if(e){var t=[0,0,0],r=1,n=e.match(/^#([a-fA-F0-9]{3,4})$/i),i="";if(n){i=(n=n[1])[3];for(var a=0;a<t.length;a++)t[a]=parseInt(n[a]+n[a],16);i&&(r=Math.round(parseInt(i+i,16)/255*100)/100)}else if(n=e.match(/^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i)){i=n[2],n=n[1];for(a=0;a<t.length;a++)t[a]=parseInt(n.slice(2*a,2*a+2),16);i&&(r=Math.round(parseInt(i,16)/255*100)/100)}else if(n=e.match(/^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)){for(a=0;a<t.length;a++)t[a]=parseInt(n[a+1]);r=parseFloat(n[4])}else if(n=e.match(/^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)){for(a=0;a<t.length;a++)t[a]=Math.round(2.55*parseFloat(n[a+1]));r=parseFloat(n[4])}else if(n=e.match(/(\w+)/)){if("transparent"==n[1])return[0,0,0,0];if(!(t=colorName[n[1]]))return}for(a=0;a<t.length;a++)t[a]=scale(t[a],0,255);return r=r||0==r?scale(r,0,1):1,t[3]=r,t}}function getHsla(e){if(e){var t=e.match(/^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/);if(t){var r=parseFloat(t[4]);return[scale(parseInt(t[1]),0,360),scale(parseFloat(t[2]),0,100),scale(parseFloat(t[3]),0,100),scale(isNaN(r)?1:r,0,1)]}}}function getHwb(e){if(e){var t=e.match(/^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/);if(t){var r=parseFloat(t[4]);return[scale(parseInt(t[1]),0,360),scale(parseFloat(t[2]),0,100),scale(parseFloat(t[3]),0,100),scale(isNaN(r)?1:r,0,1)]}}}function getRgb(e){var t=getRgba(e);return t&&t.slice(0,3)}function getHsl(e){var t=getHsla(e);return t&&t.slice(0,3)}function getAlpha(e){var t=getRgba(e);return t?t[3]:(t=getHsla(e))?t[3]:(t=getHwb(e))?t[3]:void 0}function hexString(e,t){t=void 0!==t&&3===e.length?t:e[3];return"#"+hexDouble(e[0])+hexDouble(e[1])+hexDouble(e[2])+(t>=0&&t<1?hexDouble(Math.round(255*t)):"")}function rgbString(e,t){return t<1||e[3]&&e[3]<1?rgbaString(e,t):"rgb("+e[0]+", "+e[1]+", "+e[2]+")"}function rgbaString(e,t){return void 0===t&&(t=void 0!==e[3]?e[3]:1),"rgba("+e[0]+", "+e[1]+", "+e[2]+", "+t+")"}function percentString(e,t){return t<1||e[3]&&e[3]<1?percentaString(e,t):"rgb("+Math.round(e[0]/255*100)+"%, "+Math.round(e[1]/255*100)+"%, "+Math.round(e[2]/255*100)+"%)"}function percentaString(e,t){return"rgba("+Math.round(e[0]/255*100)+"%, "+Math.round(e[1]/255*100)+"%, "+Math.round(e[2]/255*100)+"%, "+(t||e[3]||1)+")"}function hslString(e,t){return t<1||e[3]&&e[3]<1?hslaString(e,t):"hsl("+e[0]+", "+e[1]+"%, "+e[2]+"%)"}function hslaString(e,t){return void 0===t&&(t=void 0!==e[3]?e[3]:1),"hsla("+e[0]+", "+e[1]+"%, "+e[2]+"%, "+t+")"}function hwbString(e,t){return void 0===t&&(t=void 0!==e[3]?e[3]:1),"hwb("+e[0]+", "+e[1]+"%, "+e[2]+"%"+(void 0!==t&&1!==t?", "+t:"")+")"}function keyword(e){return reverseNames[e.slice(0,3)]}function scale(e,t,r){return Math.min(Math.max(t,e),r)}function hexDouble(e){var t=e.toString(16).toUpperCase();return t.length<2?"0"+t:t}var reverseNames={};for(var name in colorName)reverseNames[colorName[name]]=name;var Color=function e(t){return t instanceof e?t:this instanceof e?(this.valid=!1,this.values={rgb:[0,0,0],hsl:[0,0,0],hsv:[0,0,0],hwb:[0,0,0],cmyk:[0,0,0,0],alpha:1},void("string"==typeof t?(r=colorString.getRgba(t))?this.setValues("rgb",r):(r=colorString.getHsla(t))?this.setValues("hsl",r):(r=colorString.getHwb(t))&&this.setValues("hwb",r):"object"===(void 0===t?"undefined":_typeof(t))&&(void 0!==(r=t).r||void 0!==r.red?this.setValues("rgb",r):void 0!==r.l||void 0!==r.lightness?this.setValues("hsl",r):void 0!==r.v||void 0!==r.value?this.setValues("hsv",r):void 0!==r.w||void 0!==r.whiteness?this.setValues("hwb",r):void 0===r.c&&void 0===r.cyan||this.setValues("cmyk",r)))):new e(t);var r};Color.prototype={isValid:function(){return this.valid},rgb:function(){return this.setSpace("rgb",arguments)},hsl:function(){return this.setSpace("hsl",arguments)},hsv:function(){return this.setSpace("hsv",arguments)},hwb:function(){return this.setSpace("hwb",arguments)},cmyk:function(){return this.setSpace("cmyk",arguments)},rgbArray:function(){return this.values.rgb},hslArray:function(){return this.values.hsl},hsvArray:function(){return this.values.hsv},hwbArray:function(){var e=this.values;return 1!==e.alpha?e.hwb.concat([e.alpha]):e.hwb},cmykArray:function(){return this.values.cmyk},rgbaArray:function(){var e=this.values;return e.rgb.concat([e.alpha])},hslaArray:function(){var e=this.values;return e.hsl.concat([e.alpha])},alpha:function(e){return void 0===e?this.values.alpha:(this.setValues("alpha",e),this)},red:function(e){return this.setChannel("rgb",0,e)},green:function(e){return this.setChannel("rgb",1,e)},blue:function(e){return this.setChannel("rgb",2,e)},hue:function(e){return e&&(e=(e%=360)<0?360+e:e),this.setChannel("hsl",0,e)},saturation:function(e){return this.setChannel("hsl",1,e)},lightness:function(e){return this.setChannel("hsl",2,e)},saturationv:function(e){return this.setChannel("hsv",1,e)},whiteness:function(e){return this.setChannel("hwb",1,e)},blackness:function(e){return this.setChannel("hwb",2,e)},value:function(e){return this.setChannel("hsv",2,e)},cyan:function(e){return this.setChannel("cmyk",0,e)},magenta:function(e){return this.setChannel("cmyk",1,e)},yellow:function(e){return this.setChannel("cmyk",2,e)},black:function(e){return this.setChannel("cmyk",3,e)},hexString:function(){return colorString.hexString(this.values.rgb)},rgbString:function(){return colorString.rgbString(this.values.rgb,this.values.alpha)},rgbaString:function(){return colorString.rgbaString(this.values.rgb,this.values.alpha)},percentString:function(){return colorString.percentString(this.values.rgb,this.values.alpha)},hslString:function(){return colorString.hslString(this.values.hsl,this.values.alpha)},hslaString:function(){return colorString.hslaString(this.values.hsl,this.values.alpha)},hwbString:function(){return colorString.hwbString(this.values.hwb,this.values.alpha)},keyword:function(){return colorString.keyword(this.values.rgb,this.values.alpha)},rgbNumber:function(){var e=this.values.rgb;return e[0]<<16|e[1]<<8|e[2]},luminosity:function(){for(var e=this.values.rgb,t=[],r=0;r<e.length;r++){var n=e[r]/255;t[r]=n<=.03928?n/12.92:Math.pow((n+.055)/1.055,2.4)}return.2126*t[0]+.7152*t[1]+.0722*t[2]},contrast:function(e){var t=this.luminosity(),r=e.luminosity();return t>r?(t+.05)/(r+.05):(r+.05)/(t+.05)},level:function(e){var t=this.contrast(e);return t>=7.1?"AAA":t>=4.5?"AA":""},dark:function(){var e=this.values.rgb;return(299*e[0]+587*e[1]+114*e[2])/1e3<128},light:function(){return!this.dark()},negate:function(){for(var e=[],t=0;t<3;t++)e[t]=255-this.values.rgb[t];return this.setValues("rgb",e),this},lighten:function(e){var t=this.values.hsl;return t[2]+=t[2]*e,this.setValues("hsl",t),this},darken:function(e){var t=this.values.hsl;return t[2]-=t[2]*e,this.setValues("hsl",t),this},saturate:function(e){var t=this.values.hsl;return t[1]+=t[1]*e,this.setValues("hsl",t),this},desaturate:function(e){var t=this.values.hsl;return t[1]-=t[1]*e,this.setValues("hsl",t),this},whiten:function(e){var t=this.values.hwb;return t[1]+=t[1]*e,this.setValues("hwb",t),this},blacken:function(e){var t=this.values.hwb;return t[2]+=t[2]*e,this.setValues("hwb",t),this},greyscale:function(){var e=this.values.rgb,t=.3*e[0]+.59*e[1]+.11*e[2];return this.setValues("rgb",[t,t,t]),this},clearer:function(e){var t=this.values.alpha;return this.setValues("alpha",t-t*e),this},opaquer:function(e){var t=this.values.alpha;return this.setValues("alpha",t+t*e),this},rotate:function(e){var t=this.values.hsl,r=(t[0]+e)%360;return t[0]=r<0?360+r:r,this.setValues("hsl",t),this},mix:function(e,t){var r=e,n=void 0===t?.5:t,i=2*n-1,a=this.alpha()-r.alpha(),o=((i*a==-1?i:(i+a)/(1+i*a))+1)/2,s=1-o;return this.rgb(o*this.red()+s*r.red(),o*this.green()+s*r.green(),o*this.blue()+s*r.blue()).alpha(this.alpha()*n+r.alpha()*(1-n))},toJSON:function(){return this.rgb()},clone:function(){var e,t,r=new Color,n=this.values,i=r.values;for(var a in n)n.hasOwnProperty(a)&&(e=n[a],"[object Array]"===(t={}.toString.call(e))?i[a]=e.slice(0):"[object Number]"===t?i[a]=e:console.error("unexpected color value:",e));return r}},Color.prototype.spaces={rgb:["red","green","blue"],hsl:["hue","saturation","lightness"],hsv:["hue","saturation","value"],hwb:["hue","whiteness","blackness"],cmyk:["cyan","magenta","yellow","black"]},Color.prototype.maxes={rgb:[255,255,255],hsl:[360,100,100],hsv:[360,100,100],hwb:[360,100,100],cmyk:[100,100,100,100]},Color.prototype.getValues=function(e){for(var t=this.values,r={},n=0;n<e.length;n++)r[e.charAt(n)]=t[e][n];return 1!==t.alpha&&(r.a=t.alpha),r},Color.prototype.setValues=function(e,t){var r,n,i=this.values,a=this.spaces,o=this.maxes,s=1;if(this.valid=!0,"alpha"===e)s=t;else if(t.length)i[e]=t.slice(0,e.length),s=t[e.length];else if(void 0!==t[e.charAt(0)]){for(r=0;r<e.length;r++)i[e][r]=t[e.charAt(r)];s=t.a}else if(void 0!==t[a[e][0]]){var l=a[e];for(r=0;r<e.length;r++)i[e][r]=t[l[r]];s=t.alpha}if(i.alpha=Math.max(0,Math.min(1,void 0===s?i.alpha:s)),"alpha"===e)return!1;for(r=0;r<e.length;r++)n=Math.max(0,Math.min(o[e][r],i[e][r])),i[e][r]=Math.round(n);for(var u in a)u!==e&&(i[u]=colorConvert[e][u](i[e]));return!0},Color.prototype.setSpace=function(e,t){var r=t[0];return void 0===r?this.getValues(e):("number"==typeof r&&(r=Array.prototype.slice.call(t)),this.setValues(e,r),this)},Color.prototype.setChannel=function(e,t,r){var n=this.values[e];return void 0===r?n[t]:r===n[t]?this:(n[t]=r,this.setValues(e,n),this)},"undefined"!=typeof window&&(window.Color=Color);var chartjsColor=Color;function filterByPosition(e,t){return helpers$1.where(e,function(e){return e.position===t})}function sortByWeight(e,t){e.forEach(function(e,t){return e._tmpIndex_=t,e}),e.sort(function(e,r){var n=t?r:e,i=t?e:r;return n.weight===i.weight?n._tmpIndex_-i._tmpIndex_:n.weight-i.weight}),e.forEach(function(e){delete e._tmpIndex_})}var core_layouts={defaults:{},addBox:function(e,t){e.boxes||(e.boxes=[]),t.fullWidth=t.fullWidth||!1,t.position=t.position||"top",t.weight=t.weight||0,e.boxes.push(t)},removeBox:function(e,t){var r=e.boxes?e.boxes.indexOf(t):-1;-1!==r&&e.boxes.splice(r,1)},configure:function(e,t,r){for(var n,i=["fullWidth","position","weight"],a=i.length,o=0;o<a;++o)n=i[o],r.hasOwnProperty(n)&&(t[n]=r[n])},update:function(e,t,r){if(e){var n=e.options.layout||{},i=helpers$1.options.toPadding(n.padding),a=i.left,o=i.right,s=i.top,l=i.bottom,u=filterByPosition(e.boxes,"left"),c=filterByPosition(e.boxes,"right"),d=filterByPosition(e.boxes,"top"),h=filterByPosition(e.boxes,"bottom"),f=filterByPosition(e.boxes,"chartArea");sortByWeight(u,!0),sortByWeight(c,!1),sortByWeight(d,!0),sortByWeight(h,!1);var p=t-a-o,g=r-s-l,m=g/2,v=(t-p/2)/(u.length+c.length),y=(r-m)/(d.length+h.length),b=p,_=g,w=[];helpers$1.each(u.concat(c,d,h),function(e){var t,r=e.isHorizontal();r?(t=e.update(e.fullWidth?p:b,y),_-=t.height):(t=e.update(v,_),b-=t.width),w.push({horizontal:r,minSize:t,box:e})});var x=0,S=0,k=0,$=0;helpers$1.each(d.concat(h),function(e){if(e.getPadding){var t=e.getPadding();x=Math.max(x,t.left),S=Math.max(S,t.right)}}),helpers$1.each(u.concat(c),function(e){if(e.getPadding){var t=e.getPadding();k=Math.max(k,t.top),$=Math.max($,t.bottom)}});var C=a,T=o,A=s,M=l;helpers$1.each(u.concat(c),N),helpers$1.each(u,function(e){C+=e.width}),helpers$1.each(c,function(e){T+=e.width}),helpers$1.each(d.concat(h),N),helpers$1.each(d,function(e){A+=e.height}),helpers$1.each(h,function(e){M+=e.height}),helpers$1.each(u.concat(c),function(e){var t=helpers$1.findNextWhere(w,function(t){return t.box===e}),r={left:0,right:0,top:A,bottom:M};t&&e.update(t.minSize.width,_,r)}),C=a,T=o,A=s,M=l,helpers$1.each(u,function(e){C+=e.width}),helpers$1.each(c,function(e){T+=e.width}),helpers$1.each(d,function(e){A+=e.height}),helpers$1.each(h,function(e){M+=e.height});var O=Math.max(x-C,0);C+=O,T+=Math.max(S-T,0);var D=Math.max(k-A,0);A+=D,M+=Math.max($-M,0);var E=r-A-M,P=t-C-T;P===b&&E===_||(helpers$1.each(u,function(e){e.height=E}),helpers$1.each(c,function(e){e.height=E}),helpers$1.each(d,function(e){e.fullWidth||(e.width=P)}),helpers$1.each(h,function(e){e.fullWidth||(e.width=P)}),_=E,b=P);var R=a+O,I=s+D;helpers$1.each(u.concat(d),L),R+=b,I+=_,helpers$1.each(c,L),helpers$1.each(h,L),e.chartArea={left:C,top:A,right:C+b,bottom:A+_},helpers$1.each(f,function(t){t.left=e.chartArea.left,t.top=e.chartArea.top,t.right=e.chartArea.right,t.bottom=e.chartArea.bottom,t.update(b,_)})}function N(e){var t=helpers$1.findNextWhere(w,function(t){return t.box===e});if(t)if(e.isHorizontal()){var r={left:Math.max(C,x),right:Math.max(T,S),top:0,bottom:0};e.update(e.fullWidth?p:b,g/2,r)}else e.update(t.minSize.width,_)}function L(e){e.isHorizontal()?(e.left=e.fullWidth?a:C,e.right=e.fullWidth?t-o:C+b,e.top=I,e.bottom=I+e.height,I=e.bottom):(e.left=R,e.right=R+e.width,e.top=A,e.bottom=A+_,R=e.right)}}},core_scaleService={constructors:{},defaults:{},registerScaleType:function(e,t,r){this.constructors[e]=t,this.defaults[e]=helpers$1.clone(r)},getScaleConstructor:function(e){return this.constructors.hasOwnProperty(e)?this.constructors[e]:void 0},getScaleDefaults:function(e){return this.defaults.hasOwnProperty(e)?helpers$1.merge({},[core_defaults.scale,this.defaults[e]]):{}},updateScaleDefaults:function(e,t){this.defaults.hasOwnProperty(e)&&(this.defaults[e]=helpers$1.extend(this.defaults[e],t))},addScalesToLayout:function(e){helpers$1.each(e.scales,function(t){t.fullWidth=t.options.fullWidth,t.position=t.options.position,t.weight=t.options.weight,core_layouts.addBox(e,t)})}},core_helpers=function(){function e(e,t,r){var n;return"string"==typeof e?(n=parseInt(e,10),-1!==e.indexOf("%")&&(n=n/100*t.parentNode[r])):n=e,n}function t(e){return void 0!==e&&null!==e&&"none"!==e}function r(r,n,i){var a=document.defaultView,o=helpers$1._getParentNode(r),s=a.getComputedStyle(r)[n],l=a.getComputedStyle(o)[n],u=t(s),c=t(l),d=Number.POSITIVE_INFINITY;return u||c?Math.min(u?e(s,r,i):d,c?e(l,o,i):d):"none"}helpers$1.configMerge=function(){return helpers$1.merge(helpers$1.clone(arguments[0]),[].slice.call(arguments,1),{merger:function(e,t,r,n){var i=t[e]||{},a=r[e];"scales"===e?t[e]=helpers$1.scaleMerge(i,a):"scale"===e?t[e]=helpers$1.merge(i,[core_scaleService.getScaleDefaults(a.type),a]):helpers$1._merger(e,t,r,n)}})},helpers$1.scaleMerge=function(){return helpers$1.merge(helpers$1.clone(arguments[0]),[].slice.call(arguments,1),{merger:function(e,t,r,n){if("xAxes"===e||"yAxes"===e){var i,a,o,s=r[e].length;for(t[e]||(t[e]=[]),i=0;i<s;++i)o=r[e][i],a=helpers$1.valueOrDefault(o.type,"xAxes"===e?"category":"linear"),i>=t[e].length&&t[e].push({}),!t[e][i].type||o.type&&o.type!==t[e][i].type?helpers$1.merge(t[e][i],[core_scaleService.getScaleDefaults(a),o]):helpers$1.merge(t[e][i],o)}else helpers$1._merger(e,t,r,n)}})},helpers$1.where=function(e,t){if(helpers$1.isArray(e)&&Array.prototype.filter)return e.filter(t);var r=[];return helpers$1.each(e,function(e){t(e)&&r.push(e)}),r},helpers$1.findIndex=Array.prototype.findIndex?function(e,t,r){return e.findIndex(t,r)}:function(e,t,r){r=void 0===r?e:r;for(var n=0,i=e.length;n<i;++n)if(t.call(r,e[n],n,e))return n;return-1},helpers$1.findNextWhere=function(e,t,r){helpers$1.isNullOrUndef(r)&&(r=-1);for(var n=r+1;n<e.length;n++){var i=e[n];if(t(i))return i}},helpers$1.findPreviousWhere=function(e,t,r){helpers$1.isNullOrUndef(r)&&(r=e.length);for(var n=r-1;n>=0;n--){var i=e[n];if(t(i))return i}},helpers$1.isNumber=function(e){return!isNaN(parseFloat(e))&&isFinite(e)},helpers$1.almostEquals=function(e,t,r){return Math.abs(e-t)<r},helpers$1.almostWhole=function(e,t){var r=Math.round(e);return r-t<e&&r+t>e},helpers$1.max=function(e){return e.reduce(function(e,t){return isNaN(t)?e:Math.max(e,t)},Number.NEGATIVE_INFINITY)},helpers$1.min=function(e){return e.reduce(function(e,t){return isNaN(t)?e:Math.min(e,t)},Number.POSITIVE_INFINITY)},helpers$1.sign=Math.sign?function(e){return Math.sign(e)}:function(e){return 0===(e=+e)||isNaN(e)?e:e>0?1:-1},helpers$1.log10=Math.log10?function(e){return Math.log10(e)}:function(e){var t=Math.log(e)*Math.LOG10E,r=Math.round(t);return e===Math.pow(10,r)?r:t},helpers$1.toRadians=function(e){return e*(Math.PI/180)},helpers$1.toDegrees=function(e){return e*(180/Math.PI)},helpers$1.getAngleFromPoint=function(e,t){var r=t.x-e.x,n=t.y-e.y,i=Math.sqrt(r*r+n*n),a=Math.atan2(n,r);return a<-.5*Math.PI&&(a+=2*Math.PI),{angle:a,distance:i}},helpers$1.distanceBetweenPoints=function(e,t){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))},helpers$1.aliasPixel=function(e){return e%2==0?0:.5},helpers$1.splineCurve=function(e,t,r,n){var i=e.skip?t:e,a=t,o=r.skip?t:r,s=Math.sqrt(Math.pow(a.x-i.x,2)+Math.pow(a.y-i.y,2)),l=Math.sqrt(Math.pow(o.x-a.x,2)+Math.pow(o.y-a.y,2)),u=s/(s+l),c=l/(s+l),d=n*(u=isNaN(u)?0:u),h=n*(c=isNaN(c)?0:c);return{previous:{x:a.x-d*(o.x-i.x),y:a.y-d*(o.y-i.y)},next:{x:a.x+h*(o.x-i.x),y:a.y+h*(o.y-i.y)}}},helpers$1.EPSILON=Number.EPSILON||1e-14,helpers$1.splineCurveMonotone=function(e){var t,r,n,i,a,o,s,l,u,c=(e||[]).map(function(e){return{model:e._model,deltaK:0,mK:0}}),d=c.length;for(t=0;t<d;++t)if(!(n=c[t]).model.skip){if(r=t>0?c[t-1]:null,(i=t<d-1?c[t+1]:null)&&!i.model.skip){var h=i.model.x-n.model.x;n.deltaK=0!==h?(i.model.y-n.model.y)/h:0}!r||r.model.skip?n.mK=n.deltaK:!i||i.model.skip?n.mK=r.deltaK:this.sign(r.deltaK)!==this.sign(n.deltaK)?n.mK=0:n.mK=(r.deltaK+n.deltaK)/2}for(t=0;t<d-1;++t)n=c[t],i=c[t+1],n.model.skip||i.model.skip||(helpers$1.almostEquals(n.deltaK,0,this.EPSILON)?n.mK=i.mK=0:(a=n.mK/n.deltaK,o=i.mK/n.deltaK,(l=Math.pow(a,2)+Math.pow(o,2))<=9||(s=3/Math.sqrt(l),n.mK=a*s*n.deltaK,i.mK=o*s*n.deltaK)));for(t=0;t<d;++t)(n=c[t]).model.skip||(r=t>0?c[t-1]:null,i=t<d-1?c[t+1]:null,r&&!r.model.skip&&(u=(n.model.x-r.model.x)/3,n.model.controlPointPreviousX=n.model.x-u,n.model.controlPointPreviousY=n.model.y-u*n.mK),i&&!i.model.skip&&(u=(i.model.x-n.model.x)/3,n.model.controlPointNextX=n.model.x+u,n.model.controlPointNextY=n.model.y+u*n.mK))},helpers$1.nextItem=function(e,t,r){return r?t>=e.length-1?e[0]:e[t+1]:t>=e.length-1?e[e.length-1]:e[t+1]},helpers$1.previousItem=function(e,t,r){return r?t<=0?e[e.length-1]:e[t-1]:t<=0?e[0]:e[t-1]},helpers$1.niceNum=function(e,t){var r=Math.floor(helpers$1.log10(e)),n=e/Math.pow(10,r);return(t?n<1.5?1:n<3?2:n<7?5:10:n<=1?1:n<=2?2:n<=5?5:10)*Math.pow(10,r)},helpers$1.requestAnimFrame="undefined"==typeof window?function(e){e()}:window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(e){return window.setTimeout(e,1e3/60)},helpers$1.getRelativePosition=function(e,t){var r,n,i=e.originalEvent||e,a=e.target||e.srcElement,o=a.getBoundingClientRect(),s=i.touches;s&&s.length>0?(r=s[0].clientX,n=s[0].clientY):(r=i.clientX,n=i.clientY);var l=parseFloat(helpers$1.getStyle(a,"padding-left")),u=parseFloat(helpers$1.getStyle(a,"padding-top")),c=parseFloat(helpers$1.getStyle(a,"padding-right")),d=parseFloat(helpers$1.getStyle(a,"padding-bottom")),h=o.right-o.left-l-c,f=o.bottom-o.top-u-d;return{x:r=Math.round((r-o.left-l)/h*a.width/t.currentDevicePixelRatio),y:n=Math.round((n-o.top-u)/f*a.height/t.currentDevicePixelRatio)}},helpers$1.getConstraintWidth=function(e){return r(e,"max-width","clientWidth")},helpers$1.getConstraintHeight=function(e){return r(e,"max-height","clientHeight")},helpers$1._calculatePadding=function(e,t,r){return(t=helpers$1.getStyle(e,t)).indexOf("%")>-1?r/parseInt(t,10):parseInt(t,10)},helpers$1._getParentNode=function(e){var t=e.parentNode;return t&&t.host&&(t=t.host),t},helpers$1.getMaximumWidth=function(e){var t=helpers$1._getParentNode(e);if(!t)return e.clientWidth;var r=t.clientWidth,n=r-helpers$1._calculatePadding(t,"padding-left",r)-helpers$1._calculatePadding(t,"padding-right",r),i=helpers$1.getConstraintWidth(e);return isNaN(i)?n:Math.min(n,i)},helpers$1.getMaximumHeight=function(e){var t=helpers$1._getParentNode(e);if(!t)return e.clientHeight;var r=t.clientHeight,n=r-helpers$1._calculatePadding(t,"padding-top",r)-helpers$1._calculatePadding(t,"padding-bottom",r),i=helpers$1.getConstraintHeight(e);return isNaN(i)?n:Math.min(n,i)},helpers$1.getStyle=function(e,t){return e.currentStyle?e.currentStyle[t]:document.defaultView.getComputedStyle(e,null).getPropertyValue(t)},helpers$1.retinaScale=function(e,t){var r=e.currentDevicePixelRatio=t||"undefined"!=typeof window&&window.devicePixelRatio||1;if(1!==r){var n=e.canvas,i=e.height,a=e.width;n.height=i*r,n.width=a*r,e.ctx.scale(r,r),n.style.height||n.style.width||(n.style.height=i+"px",n.style.width=a+"px")}},helpers$1.fontString=function(e,t,r){return t+" "+e+"px "+r},helpers$1.longestText=function(e,t,r,n){var i=(n=n||{}).data=n.data||{},a=n.garbageCollect=n.garbageCollect||[];n.font!==t&&(i=n.data={},a=n.garbageCollect=[],n.font=t),e.font=t;var o=0;helpers$1.each(r,function(t){void 0!==t&&null!==t&&!0!==helpers$1.isArray(t)?o=helpers$1.measureText(e,i,a,o,t):helpers$1.isArray(t)&&helpers$1.each(t,function(t){void 0===t||null===t||helpers$1.isArray(t)||(o=helpers$1.measureText(e,i,a,o,t))})});var s=a.length/2;if(s>r.length){for(var l=0;l<s;l++)delete i[a[l]];a.splice(0,s)}return o},helpers$1.measureText=function(e,t,r,n,i){var a=t[i];return a||(a=t[i]=e.measureText(i).width,r.push(i)),a>n&&(n=a),n},helpers$1.numberOfLabelLines=function(e){var t=1;return helpers$1.each(e,function(e){helpers$1.isArray(e)&&e.length>t&&(t=e.length)}),t},helpers$1.color=chartjsColor?function(e){return e instanceof CanvasGradient&&(e=core_defaults.global.defaultColor),chartjsColor(e)}:function(e){return console.error("Color.js not found!"),e},helpers$1.getHoverColor=function(e){return e instanceof CanvasPattern?e:helpers$1.color(e).saturate(.5).darken(.1).rgbString()}};function interpolate(e,t,r,n){var i,a,o,s,l,u,c,d,h,f=Object.keys(r);for(i=0,a=f.length;i<a;++i)if(u=r[o=f[i]],t.hasOwnProperty(o)||(t[o]=u),(s=t[o])!==u&&"_"!==o[0]){if(e.hasOwnProperty(o)||(e[o]=s),l=e[o],(c=void 0===u?"undefined":_typeof(u))===(void 0===l?"undefined":_typeof(l)))if("string"===c){if((d=chartjsColor(l)).valid&&(h=chartjsColor(u)).valid){t[o]=h.mix(d,n).rgbString();continue}}else if("number"===c&&isFinite(l)&&isFinite(u)){t[o]=l+(u-l)*n;continue}t[o]=u}}var Element=function(e){helpers$1.extend(this,e),this.initialize.apply(this,arguments)};helpers$1.extend(Element.prototype,{initialize:function(){this.hidden=!1},pivot:function(){var e=this;return e._view||(e._view=helpers$1.clone(e._model)),e._start={},e},transition:function(e){var t=this,r=t._model,n=t._start,i=t._view;return r&&1!==e?(i||(i=t._view={}),n||(n=t._start={}),interpolate(n,i,r,e),t):(t._view=r,t._start=null,t)},tooltipPosition:function(){return{x:this._model.x,y:this._model.y}},hasValue:function(){return helpers$1.isNumber(this._model.x)&&helpers$1.isNumber(this._model.y)}}),Element.extend=helpers$1.inherits;var core_element=Element,core_animation=createCommonjsModule(function(e){var t=e.exports=core_element.extend({chart:null,currentStep:0,numSteps:60,easing:"",render:null,onAnimationProgress:null,onAnimationComplete:null});Object.defineProperty(t.prototype,"animationObject",{get:function(){return this}}),Object.defineProperty(t.prototype,"chartInstance",{get:function(){return this.chart},set:function(e){this.chart=e}})});core_defaults._set("global",{animation:{duration:1e3,easing:"easeOutQuart",onProgress:helpers$1.noop,onComplete:helpers$1.noop}});var core_animations={frameDuration:17,animations:[],dropFrames:0,request:null,addAnimation:function(e,t,r,n){var i,a,o=this.animations;for(t.chart=e,n||(e.animating=!0),i=0,a=o.length;i<a;++i)if(o[i].chart===e)return void(o[i]=t);o.push(t),1===o.length&&this.requestAnimationFrame()},cancelAnimation:function(e){var t=helpers$1.findIndex(this.animations,function(t){return t.chart===e});-1!==t&&(this.animations.splice(t,1),e.animating=!1)},requestAnimationFrame:function(){var e=this;null===e.request&&(e.request=helpers$1.requestAnimFrame.call(window,function(){e.request=null,e.startDigest()}))},startDigest:function(){var e=this,t=Date.now(),r=0;e.dropFrames>1&&(r=Math.floor(e.dropFrames),e.dropFrames=e.dropFrames%1),e.advance(1+r);var n=Date.now();e.dropFrames+=(n-t)/e.frameDuration,e.animations.length>0&&e.requestAnimationFrame()},advance:function(e){for(var t,r,n=this.animations,i=0;i<n.length;)r=(t=n[i]).chart,t.currentStep=(t.currentStep||0)+e,t.currentStep=Math.min(t.currentStep,t.numSteps),helpers$1.callback(t.render,[r,t],r),helpers$1.callback(t.onAnimationProgress,[t],r),t.currentStep>=t.numSteps?(helpers$1.callback(t.onAnimationComplete,[t],r),r.animating=!1,n.splice(i,1)):++i}};core_defaults._set("global",{elements:{arc:{backgroundColor:core_defaults.global.defaultColor,borderColor:"#fff",borderWidth:2}}});var element_arc=core_element.extend({inLabelRange:function(e){var t=this._view;return!!t&&Math.pow(e-t.x,2)<Math.pow(t.radius+t.hoverRadius,2)},inRange:function(e,t){var r=this._view;if(r){for(var n=helpers$1.getAngleFromPoint(r,{x:e,y:t}),i=n.angle,a=n.distance,o=r.startAngle,s=r.endAngle;s<o;)s+=2*Math.PI;for(;i>s;)i-=2*Math.PI;for(;i<o;)i+=2*Math.PI;var l=i>=o&&i<=s,u=a>=r.innerRadius&&a<=r.outerRadius;return l&&u}return!1},getCenterPoint:function(){var e=this._view,t=(e.startAngle+e.endAngle)/2,r=(e.innerRadius+e.outerRadius)/2;return{x:e.x+Math.cos(t)*r,y:e.y+Math.sin(t)*r}},getArea:function(){var e=this._view;return Math.PI*((e.endAngle-e.startAngle)/(2*Math.PI))*(Math.pow(e.outerRadius,2)-Math.pow(e.innerRadius,2))},tooltipPosition:function(){var e=this._view,t=e.startAngle+(e.endAngle-e.startAngle)/2,r=(e.outerRadius-e.innerRadius)/2+e.innerRadius;return{x:e.x+Math.cos(t)*r,y:e.y+Math.sin(t)*r}},draw:function(){var e=this._chart.ctx,t=this._view,r=t.startAngle,n=t.endAngle;e.beginPath(),e.arc(t.x,t.y,t.outerRadius,r,n),e.arc(t.x,t.y,t.innerRadius,n,r,!0),e.closePath(),e.strokeStyle=t.borderColor,e.lineWidth=t.borderWidth,e.fillStyle=t.backgroundColor,e.fill(),e.lineJoin="bevel",t.borderWidth&&e.stroke()}}),globalDefaults=core_defaults.global;core_defaults._set("global",{elements:{line:{tension:.4,backgroundColor:globalDefaults.defaultColor,borderWidth:3,borderColor:globalDefaults.defaultColor,borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",capBezierPoints:!0,fill:!0}}});var element_line=core_element.extend({draw:function(){var e,t,r,n,i=this._view,a=this._chart.ctx,o=i.spanGaps,s=this._children.slice(),l=globalDefaults.elements.line,u=-1;for(this._loop&&s.length&&s.push(s[0]),a.save(),a.lineCap=i.borderCapStyle||l.borderCapStyle,a.setLineDash&&a.setLineDash(i.borderDash||l.borderDash),a.lineDashOffset=i.borderDashOffset||l.borderDashOffset,a.lineJoin=i.borderJoinStyle||l.borderJoinStyle,a.lineWidth=i.borderWidth||l.borderWidth,a.strokeStyle=i.borderColor||globalDefaults.defaultColor,a.beginPath(),u=-1,e=0;e<s.length;++e)t=s[e],r=helpers$1.previousItem(s,e),n=t._view,0===e?n.skip||(a.moveTo(n.x,n.y),u=e):(r=-1===u?r:s[u],n.skip||(u!==e-1&&!o||-1===u?a.moveTo(n.x,n.y):helpers$1.canvas.lineTo(a,r._view,t._view),u=e));a.stroke(),a.restore()}}),defaultColor=core_defaults.global.defaultColor;function xRange(e){var t=this._view;return!!t&&Math.abs(e-t.x)<t.radius+t.hitRadius}function yRange(e){var t=this._view;return!!t&&Math.abs(e-t.y)<t.radius+t.hitRadius}core_defaults._set("global",{elements:{point:{radius:3,pointStyle:"circle",backgroundColor:defaultColor,borderColor:defaultColor,borderWidth:1,hitRadius:1,hoverRadius:4,hoverBorderWidth:1}}});var element_point=core_element.extend({inRange:function(e,t){var r=this._view;return!!r&&Math.pow(e-r.x,2)+Math.pow(t-r.y,2)<Math.pow(r.hitRadius+r.radius,2)},inLabelRange:xRange,inXRange:xRange,inYRange:yRange,getCenterPoint:function(){var e=this._view;return{x:e.x,y:e.y}},getArea:function(){return Math.PI*Math.pow(this._view.radius,2)},tooltipPosition:function(){var e=this._view;return{x:e.x,y:e.y,padding:e.radius+e.borderWidth}},draw:function(e){var t=this._view,r=this._model,n=this._chart.ctx,i=t.pointStyle,a=t.rotation,o=t.radius,s=t.x,l=t.y;t.skip||(void 0===e||r.x>=e.left&&1.01*e.right>=r.x&&r.y>=e.top&&1.01*e.bottom>=r.y)&&(n.strokeStyle=t.borderColor||defaultColor,n.lineWidth=helpers$1.valueOrDefault(t.borderWidth,core_defaults.global.elements.point.borderWidth),n.fillStyle=t.backgroundColor||defaultColor,helpers$1.canvas.drawPoint(n,i,o,s,l,a))}});function isVertical(e){return void 0!==e._view.width}function getBarBounds(e){var t,r,n,i,a=e._view;if(isVertical(e)){var o=a.width/2;t=a.x-o,r=a.x+o,n=Math.min(a.y,a.base),i=Math.max(a.y,a.base)}else{var s=a.height/2;t=Math.min(a.x,a.base),r=Math.max(a.x,a.base),n=a.y-s,i=a.y+s}return{left:t,top:n,right:r,bottom:i}}core_defaults._set("global",{elements:{rectangle:{backgroundColor:core_defaults.global.defaultColor,borderColor:core_defaults.global.defaultColor,borderSkipped:"bottom",borderWidth:0}}});var element_rectangle=core_element.extend({draw:function(){var e,t,r,n,i,a,o,s=this._chart.ctx,l=this._view,u=l.borderWidth;if(l.horizontal?(e=l.base,t=l.x,r=l.y-l.height/2,n=l.y+l.height/2,i=t>e?1:-1,a=1,o=l.borderSkipped||"left"):(e=l.x-l.width/2,t=l.x+l.width/2,r=l.y,i=1,a=(n=l.base)>r?1:-1,o=l.borderSkipped||"bottom"),u){var c=Math.min(Math.abs(e-t),Math.abs(r-n)),d=(u=u>c?c:u)/2,h=e+("left"!==o?d*i:0),f=t+("right"!==o?-d*i:0),p=r+("top"!==o?d*a:0),g=n+("bottom"!==o?-d*a:0);h!==f&&(r=p,n=g),p!==g&&(e=h,t=f)}s.beginPath(),s.fillStyle=l.backgroundColor,s.strokeStyle=l.borderColor,s.lineWidth=u;var m=[[e,n],[e,r],[t,r],[t,n]],v=["bottom","left","top","right"].indexOf(o,0);function y(e){return m[(v+e)%4]}-1===v&&(v=0);var b=y(0);s.moveTo(b[0],b[1]);for(var _=1;_<4;_++)b=y(_),s.lineTo(b[0],b[1]);s.fill(),u&&s.stroke()},height:function(){var e=this._view;return e.base-e.y},inRange:function(e,t){var r=!1;if(this._view){var n=getBarBounds(this);r=e>=n.left&&e<=n.right&&t>=n.top&&t<=n.bottom}return r},inLabelRange:function(e,t){if(!this._view)return!1;var r=getBarBounds(this);return isVertical(this)?e>=r.left&&e<=r.right:t>=r.top&&t<=r.bottom},inXRange:function(e){var t=getBarBounds(this);return e>=t.left&&e<=t.right},inYRange:function(e){var t=getBarBounds(this);return e>=t.top&&e<=t.bottom},getCenterPoint:function(){var e,t,r=this._view;return isVertical(this)?(e=r.x,t=(r.y+r.base)/2):(e=(r.x+r.base)/2,t=r.y),{x:e,y:t}},getArea:function(){var e=this._view;return e.width*Math.abs(e.y-e.base)},tooltipPosition:function(){var e=this._view;return{x:e.x,y:e.y}}}),elements={},Arc=element_arc,Line=element_line,Point=element_point,Rectangle=element_rectangle;function getRelativePosition(e,t){return e.native?{x:e.x,y:e.y}:helpers$1.getRelativePosition(e,t)}function parseVisibleItems(e,t){var r,n,i,a,o;for(n=0,a=e.data.datasets.length;n<a;++n)if(e.isDatasetVisible(n))for(i=0,o=(r=e.getDatasetMeta(n)).data.length;i<o;++i){var s=r.data[i];s._view.skip||t(s)}}function getIntersectItems(e,t){var r=[];return parseVisibleItems(e,function(e){e.inRange(t.x,t.y)&&r.push(e)}),r}function getNearestItems(e,t,r,n){var i=Number.POSITIVE_INFINITY,a=[];return parseVisibleItems(e,function(e){if(!r||e.inRange(t.x,t.y)){var o=e.getCenterPoint(),s=n(t,o);s<i?(a=[e],i=s):s===i&&a.push(e)}}),a}function getDistanceMetricForAxis(e){var t=-1!==e.indexOf("x"),r=-1!==e.indexOf("y");return function(e,n){var i=t?Math.abs(e.x-n.x):0,a=r?Math.abs(e.y-n.y):0;return Math.sqrt(Math.pow(i,2)+Math.pow(a,2))}}function indexMode(e,t,r){var n=getRelativePosition(t,e);r.axis=r.axis||"x";var i=getDistanceMetricForAxis(r.axis),a=r.intersect?getIntersectItems(e,n):getNearestItems(e,n,!1,i),o=[];return a.length?(e.data.datasets.forEach(function(t,r){if(e.isDatasetVisible(r)){var n=e.getDatasetMeta(r).data[a[0]._index];n&&!n._view.skip&&o.push(n)}}),o):[]}elements.Arc=Arc,elements.Line=Line,elements.Point=Point,elements.Rectangle=Rectangle;var core_interaction={modes:{single:function(e,t){var r=getRelativePosition(t,e),n=[];return parseVisibleItems(e,function(e){if(e.inRange(r.x,r.y))return n.push(e),n}),n.slice(0,1)},label:indexMode,index:indexMode,dataset:function(e,t,r){var n=getRelativePosition(t,e);r.axis=r.axis||"xy";var i=getDistanceMetricForAxis(r.axis),a=r.intersect?getIntersectItems(e,n):getNearestItems(e,n,!1,i);return a.length>0&&(a=e.getDatasetMeta(a[0]._datasetIndex).data),a},"x-axis":function(e,t){return indexMode(e,t,{intersect:!1})},point:function(e,t){return getIntersectItems(e,getRelativePosition(t,e))},nearest:function(e,t,r){var n=getRelativePosition(t,e);r.axis=r.axis||"xy";var i=getDistanceMetricForAxis(r.axis),a=getNearestItems(e,n,r.intersect,i);return a.length>1&&a.sort(function(e,t){var r=e.getArea()-t.getArea();return 0===r&&(r=e._datasetIndex-t._datasetIndex),r}),a.slice(0,1)},x:function(e,t,r){var n=getRelativePosition(t,e),i=[],a=!1;return parseVisibleItems(e,function(e){e.inXRange(n.x)&&i.push(e),e.inRange(n.x,n.y)&&(a=!0)}),r.intersect&&!a&&(i=[]),i},y:function(e,t,r){var n=getRelativePosition(t,e),i=[],a=!1;return parseVisibleItems(e,function(e){e.inYRange(n.y)&&i.push(e),e.inRange(n.x,n.y)&&(a=!0)}),r.intersect&&!a&&(i=[]),i}}},platform_basic={acquireContext:function(e){return e&&e.canvas&&(e=e.canvas),e&&e.getContext("2d")||null}},EXPANDO_KEY="$chartjs",CSS_PREFIX="chartjs-",CSS_RENDER_MONITOR=CSS_PREFIX+"render-monitor",CSS_RENDER_ANIMATION=CSS_PREFIX+"render-animation",ANIMATION_START_EVENTS=["animationstart","webkitAnimationStart"],EVENT_TYPES={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"};function readUsedSize(e,t){var r=helpers$1.getStyle(e,t),n=r&&r.match(/^(\d+)(\.\d+)?px$/);return n?Number(n[1]):void 0}function initCanvas(e,t){var r=e.style,n=e.getAttribute("height"),i=e.getAttribute("width");if(e[EXPANDO_KEY]={initial:{height:n,width:i,style:{display:r.display,height:r.height,width:r.width}}},r.display=r.display||"block",null===i||""===i){var a=readUsedSize(e,"width");void 0!==a&&(e.width=a)}if(null===n||""===n)if(""===e.style.height)e.height=e.width/(t.options.aspectRatio||2);else{var o=readUsedSize(e,"height");void 0!==a&&(e.height=o)}return e}var supportsEventListenerOptions=function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});window.addEventListener("e",null,t)}catch(e){}return e}(),eventListenerOptions=!!supportsEventListenerOptions&&{passive:!0};function _addEventListener(e,t,r){e.addEventListener(t,r,eventListenerOptions)}function _removeEventListener(e,t,r){e.removeEventListener(t,r,eventListenerOptions)}function createEvent(e,t,r,n,i){return{type:e,chart:t,native:i||null,x:void 0!==r?r:null,y:void 0!==n?n:null}}function fromNativeEvent(e,t){var r=EVENT_TYPES[e.type]||e.type,n=helpers$1.getRelativePosition(e,t);return createEvent(r,t,n.x,n.y,e)}function throttled(e,t){var r=!1,n=[];return function(){n=Array.prototype.slice.call(arguments),t=t||this,r||(r=!0,helpers$1.requestAnimFrame.call(window,function(){r=!1,e.apply(t,n)}))}}function createResizer(e){var t=document.createElement("div"),r=CSS_PREFIX+"size-monitor",n="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;pointer-events:none;visibility:hidden;z-index:-1;";t.style.cssText=n,t.className=r,t.innerHTML='<div class="'+r+'-expand" style="'+n+'"><div style="position:absolute;width:1000000px;height:1000000px;left:0;top:0"></div></div><div class="'+r+'-shrink" style="'+n+'"><div style="position:absolute;width:200%;height:200%;left:0; top:0"></div></div>';var i=t.childNodes[0],a=t.childNodes[1];t._reset=function(){i.scrollLeft=1e6,i.scrollTop=1e6,a.scrollLeft=1e6,a.scrollTop=1e6};var o=function(){t._reset(),e()};return _addEventListener(i,"scroll",o.bind(i,"expand")),_addEventListener(a,"scroll",o.bind(a,"shrink")),t}function watchForRender(e,t){var r=e[EXPANDO_KEY]||(e[EXPANDO_KEY]={}),n=r.renderProxy=function(e){e.animationName===CSS_RENDER_ANIMATION&&t()};helpers$1.each(ANIMATION_START_EVENTS,function(t){_addEventListener(e,t,n)}),r.reflow=!!e.offsetParent,e.classList.add(CSS_RENDER_MONITOR)}function unwatchForRender(e){var t=e[EXPANDO_KEY]||{},r=t.renderProxy;r&&(helpers$1.each(ANIMATION_START_EVENTS,function(t){_removeEventListener(e,t,r)}),delete t.renderProxy),e.classList.remove(CSS_RENDER_MONITOR)}function addResizeListener(e,t,r){var n=e[EXPANDO_KEY]||(e[EXPANDO_KEY]={}),i=n.resizer=createResizer(throttled(function(){if(n.resizer)return t(createEvent("resize",r))}));watchForRender(e,function(){if(n.resizer){var t=e.parentNode;t&&t!==i.parentNode&&t.insertBefore(i,t.firstChild),i._reset()}})}function removeResizeListener(e){var t=e[EXPANDO_KEY]||{},r=t.resizer;delete t.resizer,unwatchForRender(e),r&&r.parentNode&&r.parentNode.removeChild(r)}function injectCSS(e,t){var r=e._style||document.createElement("style");e._style||(e._style=r,t="/* Chart.js */\n"+t,r.setAttribute("type","text/css"),document.getElementsByTagName("head")[0].appendChild(r)),r.appendChild(document.createTextNode(t))}var platform_dom={_enabled:"undefined"!=typeof window&&"undefined"!=typeof document,initialize:function(){var e="from{opacity:0.99}to{opacity:1}";injectCSS(this,"@-webkit-keyframes "+CSS_RENDER_ANIMATION+"{"+e+"}@keyframes "+CSS_RENDER_ANIMATION+"{"+e+"}."+CSS_RENDER_MONITOR+"{-webkit-animation:"+CSS_RENDER_ANIMATION+" 0.001s;animation:"+CSS_RENDER_ANIMATION+" 0.001s;}")},acquireContext:function(e,t){"string"==typeof e?e=document.getElementById(e):e.length&&(e=e[0]),e&&e.canvas&&(e=e.canvas);var r=e&&e.getContext&&e.getContext("2d");return r&&r.canvas===e?(initCanvas(e,t),r):null},releaseContext:function(e){var t=e.canvas;if(t[EXPANDO_KEY]){var r=t[EXPANDO_KEY].initial;["height","width"].forEach(function(e){var n=r[e];helpers$1.isNullOrUndef(n)?t.removeAttribute(e):t.setAttribute(e,n)}),helpers$1.each(r.style||{},function(e,r){t.style[r]=e}),t.width=t.width,delete t[EXPANDO_KEY]}},addEventListener:function(e,t,r){var n=e.canvas;if("resize"!==t){var i=r[EXPANDO_KEY]||(r[EXPANDO_KEY]={});_addEventListener(n,t,(i.proxies||(i.proxies={}))[e.id+"_"+t]=function(t){r(fromNativeEvent(t,e))})}else addResizeListener(n,r,e)},removeEventListener:function(e,t,r){var n=e.canvas;if("resize"!==t){var i=((r[EXPANDO_KEY]||{}).proxies||{})[e.id+"_"+t];i&&_removeEventListener(n,t,i)}else removeResizeListener(n,r)}};helpers$1.addEvent=_addEventListener,helpers$1.removeEvent=_removeEventListener;var implementation=platform_dom._enabled?platform_dom:platform_basic,platform=helpers$1.extend({initialize:function(){},acquireContext:function(){},releaseContext:function(){},addEventListener:function(){},removeEventListener:function(){}},implementation);core_defaults._set("global",{plugins:{}});var core_plugins={_plugins:[],_cacheId:0,register:function(e){var t=this._plugins;[].concat(e).forEach(function(e){-1===t.indexOf(e)&&t.push(e)}),this._cacheId++},unregister:function(e){var t=this._plugins;[].concat(e).forEach(function(e){var r=t.indexOf(e);-1!==r&&t.splice(r,1)}),this._cacheId++},clear:function(){this._plugins=[],this._cacheId++},count:function(){return this._plugins.length},getAll:function(){return this._plugins},notify:function(e,t,r){var n,i,a,o,s,l=this.descriptors(e),u=l.length;for(n=0;n<u;++n)if("function"==typeof(s=(a=(i=l[n]).plugin)[t])&&((o=[e].concat(r||[])).push(i.options),!1===s.apply(a,o)))return!1;return!0},descriptors:function(e){var t=e.$plugins||(e.$plugins={});if(t.id===this._cacheId)return t.descriptors;var r=[],n=[],i=e&&e.config||{},a=i.options&&i.options.plugins||{};return this._plugins.concat(i.plugins||[]).forEach(function(e){if(-1===r.indexOf(e)){var t=e.id,i=a[t];!1!==i&&(!0===i&&(i=helpers$1.clone(core_defaults.global.plugins[t])),r.push(e),n.push({plugin:e,options:i||{}}))}}),t.descriptors=n,t.id=this._cacheId,n},_invalidate:function(e){delete e.$plugins}},core_ticks={formatters:{values:function(e){return helpers$1.isArray(e)?e:""+e},linear:function(e,t,r){var n=r.length>3?r[2]-r[1]:r[1]-r[0];Math.abs(n)>1&&e!==Math.floor(e)&&(n=e-Math.floor(e));var i=helpers$1.log10(Math.abs(n)),a="";if(0!==e)if(Math.max(Math.abs(r[0]),Math.abs(r[r.length-1]))<1e-4){var o=helpers$1.log10(Math.abs(e));a=e.toExponential(Math.floor(o)-Math.floor(i))}else{var s=-1*Math.floor(i);s=Math.max(Math.min(s,20),0),a=e.toFixed(s)}else a="0";return a},logarithmic:function(e,t,r){var n=e/Math.pow(10,Math.floor(helpers$1.log10(e)));return 0===e?"0":1===n||2===n||5===n||0===t||t===r.length-1?e.toExponential():""}}};function labelsFromTicks(e){var t,r,n=[];for(t=0,r=e.length;t<r;++t)n.push(e[t].label);return n}function getLineValue(e,t,r){var n=e.getPixelForTick(t);return r&&(n-=0===t?(e.getPixelForTick(1)-n)/2:(n-e.getPixelForTick(t-1))/2),n}function computeTextSize(e,t,r){return helpers$1.isArray(t)?helpers$1.longestText(e,r,t):e.measureText(t).width}function parseFontOptions(e){var t=helpers$1.valueOrDefault,r=core_defaults.global,n=t(e.fontSize,r.defaultFontSize),i=t(e.fontStyle,r.defaultFontStyle),a=t(e.fontFamily,r.defaultFontFamily);return{size:n,style:i,family:a,font:helpers$1.fontString(n,i,a)}}function parseLineHeight(e){return helpers$1.options.toLineHeight(helpers$1.valueOrDefault(e.lineHeight,1.2),helpers$1.valueOrDefault(e.fontSize,core_defaults.global.defaultFontSize))}core_defaults._set("scale",{display:!0,position:"left",offset:!1,gridLines:{display:!0,color:"rgba(0, 0, 0, 0.1)",lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickMarkLength:10,zeroLineWidth:1,zeroLineColor:"rgba(0,0,0,0.25)",zeroLineBorderDash:[],zeroLineBorderDashOffset:0,offsetGridLines:!1,borderDash:[],borderDashOffset:0},scaleLabel:{display:!1,labelString:"",lineHeight:1.2,padding:{top:4,bottom:4}},ticks:{beginAtZero:!1,minRotation:0,maxRotation:50,mirror:!1,padding:0,reverse:!1,display:!0,autoSkip:!0,autoSkipPadding:0,labelOffset:0,callback:core_ticks.formatters.values,minor:{},major:{}}});var core_scale=core_element.extend({getPadding:function(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}},getTicks:function(){return this._ticks},mergeTicksOptions:function(){var e=this.options.ticks;for(var t in!1===e.minor&&(e.minor={display:!1}),!1===e.major&&(e.major={display:!1}),e)"major"!==t&&"minor"!==t&&(void 0===e.minor[t]&&(e.minor[t]=e[t]),void 0===e.major[t]&&(e.major[t]=e[t]))},beforeUpdate:function(){helpers$1.callback(this.options.beforeUpdate,[this])},update:function(e,t,r){var n,i,a,o,s,l,u=this;for(u.beforeUpdate(),u.maxWidth=e,u.maxHeight=t,u.margins=helpers$1.extend({left:0,right:0,top:0,bottom:0},r),u.longestTextCache=u.longestTextCache||{},u.beforeSetDimensions(),u.setDimensions(),u.afterSetDimensions(),u.beforeDataLimits(),u.determineDataLimits(),u.afterDataLimits(),u.beforeBuildTicks(),s=u.buildTicks()||[],u.afterBuildTicks(),u.beforeTickToLabelConversion(),a=u.convertTicksToLabels(s)||u.ticks,u.afterTickToLabelConversion(),u.ticks=a,n=0,i=a.length;n<i;++n)o=a[n],(l=s[n])?l.label=o:s.push(l={label:o,major:!1});return u._ticks=s,u.beforeCalculateTickRotation(),u.calculateTickRotation(),u.afterCalculateTickRotation(),u.beforeFit(),u.fit(),u.afterFit(),u.afterUpdate(),u.minSize},afterUpdate:function(){helpers$1.callback(this.options.afterUpdate,[this])},beforeSetDimensions:function(){helpers$1.callback(this.options.beforeSetDimensions,[this])},setDimensions:function(){var e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=0,e.right=e.width):(e.height=e.maxHeight,e.top=0,e.bottom=e.height),e.paddingLeft=0,e.paddingTop=0,e.paddingRight=0,e.paddingBottom=0},afterSetDimensions:function(){helpers$1.callback(this.options.afterSetDimensions,[this])},beforeDataLimits:function(){helpers$1.callback(this.options.beforeDataLimits,[this])},determineDataLimits:helpers$1.noop,afterDataLimits:function(){helpers$1.callback(this.options.afterDataLimits,[this])},beforeBuildTicks:function(){helpers$1.callback(this.options.beforeBuildTicks,[this])},buildTicks:helpers$1.noop,afterBuildTicks:function(){helpers$1.callback(this.options.afterBuildTicks,[this])},beforeTickToLabelConversion:function(){helpers$1.callback(this.options.beforeTickToLabelConversion,[this])},convertTicksToLabels:function(){var e=this.options.ticks;this.ticks=this.ticks.map(e.userCallback||e.callback,this)},afterTickToLabelConversion:function(){helpers$1.callback(this.options.afterTickToLabelConversion,[this])},beforeCalculateTickRotation:function(){helpers$1.callback(this.options.beforeCalculateTickRotation,[this])},calculateTickRotation:function(){var e=this,t=e.ctx,r=e.options.ticks,n=labelsFromTicks(e._ticks),i=parseFontOptions(r);t.font=i.font;var a=r.minRotation||0;if(n.length&&e.options.display&&e.isHorizontal())for(var o,s=helpers$1.longestText(t,i.font,n,e.longestTextCache),l=s,u=e.getPixelForTick(1)-e.getPixelForTick(0)-6;l>u&&a<r.maxRotation;){var c=helpers$1.toRadians(a);if(o=Math.cos(c),Math.sin(c)*s>e.maxHeight){a--;break}a++,l=o*s}e.labelRotation=a},afterCalculateTickRotation:function(){helpers$1.callback(this.options.afterCalculateTickRotation,[this])},beforeFit:function(){helpers$1.callback(this.options.beforeFit,[this])},fit:function(){var e=this,t=e.minSize={width:0,height:0},r=labelsFromTicks(e._ticks),n=e.options,i=n.ticks,a=n.scaleLabel,o=n.gridLines,s=n.display,l=e.isHorizontal(),u=parseFontOptions(i),c=n.gridLines.tickMarkLength;if(t.width=l?e.isFullWidth()?e.maxWidth-e.margins.left-e.margins.right:e.maxWidth:s&&o.drawTicks?c:0,t.height=l?s&&o.drawTicks?c:0:e.maxHeight,a.display&&s){var d=parseLineHeight(a)+helpers$1.options.toPadding(a.padding).height;l?t.height+=d:t.width+=d}if(i.display&&s){var h=helpers$1.longestText(e.ctx,u.font,r,e.longestTextCache),f=helpers$1.numberOfLabelLines(r),p=.5*u.size,g=e.options.ticks.padding;if(l){e.longestLabelWidth=h;var m=helpers$1.toRadians(e.labelRotation),v=Math.cos(m),y=Math.sin(m)*h+u.size*f+p*(f-1)+p;t.height=Math.min(e.maxHeight,t.height+y+g),e.ctx.font=u.font;var b=computeTextSize(e.ctx,r[0],u.font),_=computeTextSize(e.ctx,r[r.length-1],u.font);0!==e.labelRotation?(e.paddingLeft="bottom"===n.position?v*b+3:v*p+3,e.paddingRight="bottom"===n.position?v*p+3:v*_+3):(e.paddingLeft=b/2+3,e.paddingRight=_/2+3)}else i.mirror?h=0:h+=g+p,t.width=Math.min(e.maxWidth,t.width+h),e.paddingTop=u.size/2,e.paddingBottom=u.size/2}e.handleMargins(),e.width=t.width,e.height=t.height},handleMargins:function(){var e=this;e.margins&&(e.paddingLeft=Math.max(e.paddingLeft-e.margins.left,0),e.paddingTop=Math.max(e.paddingTop-e.margins.top,0),e.paddingRight=Math.max(e.paddingRight-e.margins.right,0),e.paddingBottom=Math.max(e.paddingBottom-e.margins.bottom,0))},afterFit:function(){helpers$1.callback(this.options.afterFit,[this])},isHorizontal:function(){return"top"===this.options.position||"bottom"===this.options.position},isFullWidth:function(){return this.options.fullWidth},getRightValue:function(e){if(helpers$1.isNullOrUndef(e))return NaN;if("number"==typeof e&&!isFinite(e))return NaN;if(e)if(this.isHorizontal()){if(void 0!==e.x)return this.getRightValue(e.x)}else if(void 0!==e.y)return this.getRightValue(e.y);return e},getLabelForIndex:helpers$1.noop,getPixelForValue:helpers$1.noop,getValueForPixel:helpers$1.noop,getPixelForTick:function(e){var t=this,r=t.options.offset;if(t.isHorizontal()){var n=(t.width-(t.paddingLeft+t.paddingRight))/Math.max(t._ticks.length-(r?0:1),1),i=n*e+t.paddingLeft;r&&(i+=n/2);var a=t.left+Math.round(i);return a+=t.isFullWidth()?t.margins.left:0}var o=t.height-(t.paddingTop+t.paddingBottom);return t.top+e*(o/(t._ticks.length-1))},getPixelForDecimal:function(e){var t=this;if(t.isHorizontal()){var r=(t.width-(t.paddingLeft+t.paddingRight))*e+t.paddingLeft,n=t.left+Math.round(r);return n+=t.isFullWidth()?t.margins.left:0}return t.top+e*t.height},getBasePixel:function(){return this.getPixelForValue(this.getBaseValue())},getBaseValue:function(){var e=this.min,t=this.max;return this.beginAtZero?0:e<0&&t<0?t:e>0&&t>0?e:0},_autoSkip:function(e){var t,r,n,i,a=this,o=a.isHorizontal(),s=a.options.ticks.minor,l=e.length,u=helpers$1.toRadians(a.labelRotation),c=Math.cos(u),d=a.longestLabelWidth*c,h=[];for(s.maxTicksLimit&&(i=s.maxTicksLimit),o&&(t=!1,(d+s.autoSkipPadding)*l>a.width-(a.paddingLeft+a.paddingRight)&&(t=1+Math.floor((d+s.autoSkipPadding)*l/(a.width-(a.paddingLeft+a.paddingRight)))),i&&l>i&&(t=Math.max(t,Math.floor(l/i)))),r=0;r<l;r++)n=e[r],(t>1&&r%t>0||r%t==0&&r+t>=l)&&r!==l-1&&delete n.label,h.push(n);return h},draw:function(e){var t=this,r=t.options;if(r.display){var n=t.ctx,i=core_defaults.global,a=r.ticks.minor,o=r.ticks.major||a,s=r.gridLines,l=r.scaleLabel,u=0!==t.labelRotation,c=t.isHorizontal(),d=a.autoSkip?t._autoSkip(t.getTicks()):t.getTicks(),h=helpers$1.valueOrDefault(a.fontColor,i.defaultFontColor),f=parseFontOptions(a),p=helpers$1.valueOrDefault(o.fontColor,i.defaultFontColor),g=parseFontOptions(o),m=s.drawTicks?s.tickMarkLength:0,v=helpers$1.valueOrDefault(l.fontColor,i.defaultFontColor),y=parseFontOptions(l),b=helpers$1.options.toPadding(l.padding),_=helpers$1.toRadians(t.labelRotation),w=[],x=t.options.gridLines.lineWidth,S="right"===r.position?t.left:t.right-x-m,k="right"===r.position?t.left+m:t.right,$="bottom"===r.position?t.top+x:t.bottom-m-x,C="bottom"===r.position?t.top+x+m:t.bottom+x;if(helpers$1.each(d,function(n,o){if(!helpers$1.isNullOrUndef(n.label)){var l,h,f,p,g,v,y,b,T,A,M,O,D,E,P=n.label;o===t.zeroLineIndex&&r.offset===s.offsetGridLines?(l=s.zeroLineWidth,h=s.zeroLineColor,f=s.zeroLineBorderDash,p=s.zeroLineBorderDashOffset):(l=helpers$1.valueAtIndexOrDefault(s.lineWidth,o),h=helpers$1.valueAtIndexOrDefault(s.color,o),f=helpers$1.valueOrDefault(s.borderDash,i.borderDash),p=helpers$1.valueOrDefault(s.borderDashOffset,i.borderDashOffset));var R="middle",I="middle",N=a.padding;if(c){var L=m+N;"bottom"===r.position?(I=u?"middle":"top",R=u?"right":"center",E=t.top+L):(I=u?"middle":"bottom",R=u?"left":"center",E=t.bottom-L);var F=getLineValue(t,o,s.offsetGridLines&&d.length>1);F<t.left&&(h="rgba(0,0,0,0)"),F+=helpers$1.aliasPixel(l),D=t.getPixelForTick(o)+a.labelOffset,g=y=T=M=F,v=$,b=C,A=e.top,O=e.bottom+x}else{var j,B="left"===r.position;a.mirror?(R=B?"left":"right",j=N):(R=B?"right":"left",j=m+N),D=B?t.right-j:t.left+j;var U=getLineValue(t,o,s.offsetGridLines&&d.length>1);U<t.top&&(h="rgba(0,0,0,0)"),U+=helpers$1.aliasPixel(l),E=t.getPixelForTick(o)+a.labelOffset,g=S,y=k,T=e.left,M=e.right+x,v=b=A=O=U}w.push({tx1:g,ty1:v,tx2:y,ty2:b,x1:T,y1:A,x2:M,y2:O,labelX:D,labelY:E,glWidth:l,glColor:h,glBorderDash:f,glBorderDashOffset:p,rotation:-1*_,label:P,major:n.major,textBaseline:I,textAlign:R})}}),helpers$1.each(w,function(e){if(s.display&&(n.save(),n.lineWidth=e.glWidth,n.strokeStyle=e.glColor,n.setLineDash&&(n.setLineDash(e.glBorderDash),n.lineDashOffset=e.glBorderDashOffset),n.beginPath(),s.drawTicks&&(n.moveTo(e.tx1,e.ty1),n.lineTo(e.tx2,e.ty2)),s.drawOnChartArea&&(n.moveTo(e.x1,e.y1),n.lineTo(e.x2,e.y2)),n.stroke(),n.restore()),a.display){n.save(),n.translate(e.labelX,e.labelY),n.rotate(e.rotation),n.font=e.major?g.font:f.font,n.fillStyle=e.major?p:h,n.textBaseline=e.textBaseline,n.textAlign=e.textAlign;var r=e.label;if(helpers$1.isArray(r))for(var i=r.length,o=1.5*f.size,l=t.isHorizontal()?0:-o*(i-1)/2,u=0;u<i;++u)n.fillText(""+r[u],0,l),l+=o;else n.fillText(r,0,0);n.restore()}}),l.display){var T,A,M=0,O=parseLineHeight(l)/2;if(c)T=t.left+(t.right-t.left)/2,A="bottom"===r.position?t.bottom-O-b.bottom:t.top+O+b.top;else{var D="left"===r.position;T=D?t.left+O+b.top:t.right-O-b.top,A=t.top+(t.bottom-t.top)/2,M=D?-.5*Math.PI:.5*Math.PI}n.save(),n.translate(T,A),n.rotate(M),n.textAlign="center",n.textBaseline="middle",n.fillStyle=v,n.font=y.font,n.fillText(l.labelString,0,0),n.restore()}if(s.drawBorder){n.lineWidth=helpers$1.valueAtIndexOrDefault(s.lineWidth,0),n.strokeStyle=helpers$1.valueAtIndexOrDefault(s.color,0);var E=t.left,P=t.right+x,R=t.top,I=t.bottom+x,N=helpers$1.aliasPixel(n.lineWidth);c?(R=I="top"===r.position?t.bottom:t.top,R+=N,I+=N):(E=P="left"===r.position?t.right:t.left,E+=N,P+=N),n.beginPath(),n.moveTo(E,R),n.lineTo(P,I),n.stroke()}}}}),core_tooltip=createCommonjsModule(function(e){core_defaults._set("global",{tooltips:{enabled:!0,custom:null,mode:"nearest",position:"average",intersect:!0,backgroundColor:"rgba(0,0,0,0.8)",titleFontStyle:"bold",titleSpacing:2,titleMarginBottom:6,titleFontColor:"#fff",titleAlign:"left",bodySpacing:2,bodyFontColor:"#fff",bodyAlign:"left",footerFontStyle:"bold",footerSpacing:2,footerMarginTop:6,footerFontColor:"#fff",footerAlign:"left",yPadding:6,xPadding:6,caretPadding:2,caretSize:5,cornerRadius:6,multiKeyBackground:"#fff",displayColors:!0,borderColor:"rgba(0,0,0,0)",borderWidth:0,callbacks:{beforeTitle:helpers$1.noop,title:function(e,t){var r="",n=t.labels,i=n?n.length:0;if(e.length>0){var a=e[0];a.xLabel?r=a.xLabel:i>0&&a.index<i&&(r=n[a.index])}return r},afterTitle:helpers$1.noop,beforeBody:helpers$1.noop,beforeLabel:helpers$1.noop,label:function(e,t){var r=t.datasets[e.datasetIndex].label||"";return r&&(r+=": "),r+=e.yLabel,r},labelColor:function(e,t){var r=t.getDatasetMeta(e.datasetIndex).data[e.index]._view;return{borderColor:r.borderColor,backgroundColor:r.backgroundColor}},labelTextColor:function(){return this._options.bodyFontColor},afterLabel:helpers$1.noop,afterBody:helpers$1.noop,beforeFooter:helpers$1.noop,footer:helpers$1.noop,afterFooter:helpers$1.noop}}});var t={average:function(e){if(!e.length)return!1;var t,r,n=0,i=0,a=0;for(t=0,r=e.length;t<r;++t){var o=e[t];if(o&&o.hasValue()){var s=o.tooltipPosition();n+=s.x,i+=s.y,++a}}return{x:Math.round(n/a),y:Math.round(i/a)}},nearest:function(e,t){var r,n,i,a=t.x,o=t.y,s=Number.POSITIVE_INFINITY;for(r=0,n=e.length;r<n;++r){var l=e[r];if(l&&l.hasValue()){var u=l.getCenterPoint(),c=helpers$1.distanceBetweenPoints(t,u);c<s&&(s=c,i=l)}}if(i){var d=i.tooltipPosition();a=d.x,o=d.y}return{x:a,y:o}}};function r(e,t){var r=helpers$1.color(e);return r.alpha(t*r.alpha()).rgbaString()}function n(e,t){return t&&(helpers$1.isArray(t)?Array.prototype.push.apply(e,t):e.push(t)),e}function i(e){return("string"==typeof e||e instanceof String)&&e.indexOf("\n")>-1?e.split("\n"):e}function a(e){var t=core_defaults.global,r=helpers$1.valueOrDefault;return{xPadding:e.xPadding,yPadding:e.yPadding,xAlign:e.xAlign,yAlign:e.yAlign,bodyFontColor:e.bodyFontColor,_bodyFontFamily:r(e.bodyFontFamily,t.defaultFontFamily),_bodyFontStyle:r(e.bodyFontStyle,t.defaultFontStyle),_bodyAlign:e.bodyAlign,bodyFontSize:r(e.bodyFontSize,t.defaultFontSize),bodySpacing:e.bodySpacing,titleFontColor:e.titleFontColor,_titleFontFamily:r(e.titleFontFamily,t.defaultFontFamily),_titleFontStyle:r(e.titleFontStyle,t.defaultFontStyle),titleFontSize:r(e.titleFontSize,t.defaultFontSize),_titleAlign:e.titleAlign,titleSpacing:e.titleSpacing,titleMarginBottom:e.titleMarginBottom,footerFontColor:e.footerFontColor,_footerFontFamily:r(e.footerFontFamily,t.defaultFontFamily),_footerFontStyle:r(e.footerFontStyle,t.defaultFontStyle),footerFontSize:r(e.footerFontSize,t.defaultFontSize),_footerAlign:e.footerAlign,footerSpacing:e.footerSpacing,footerMarginTop:e.footerMarginTop,caretSize:e.caretSize,cornerRadius:e.cornerRadius,backgroundColor:e.backgroundColor,opacity:0,legendColorBackground:e.multiKeyBackground,displayColors:e.displayColors,borderColor:e.borderColor,borderWidth:e.borderWidth}}function o(e){return n([],i(e))}(e.exports=core_element.extend({initialize:function(){this._model=a(this._options),this._lastActive=[]},getTitle:function(){var e=this._options.callbacks,t=e.beforeTitle.apply(this,arguments),r=e.title.apply(this,arguments),a=e.afterTitle.apply(this,arguments),o=[];return o=n(o=n(o=n(o,i(t)),i(r)),i(a))},getBeforeBody:function(){return o(this._options.callbacks.beforeBody.apply(this,arguments))},getBody:function(e,t){var r=this,a=r._options.callbacks,o=[];return helpers$1.each(e,function(e){var s={before:[],lines:[],after:[]};n(s.before,i(a.beforeLabel.call(r,e,t))),n(s.lines,a.label.call(r,e,t)),n(s.after,i(a.afterLabel.call(r,e,t))),o.push(s)}),o},getAfterBody:function(){return o(this._options.callbacks.afterBody.apply(this,arguments))},getFooter:function(){var e=this._options.callbacks,t=e.beforeFooter.apply(this,arguments),r=e.footer.apply(this,arguments),a=e.afterFooter.apply(this,arguments),o=[];return o=n(o=n(o=n(o,i(t)),i(r)),i(a))},update:function(e){var r,n,i,o,s,l,u,c=this,d=c._options,h=c._model,f=c._model=a(d),p=c._active,g=c._data,m={xAlign:h.xAlign,yAlign:h.yAlign},v={x:h.x,y:h.y},y={width:h.width,height:h.height},b={x:h.caretX,y:h.caretY};if(p.length){f.opacity=1;var _=[],w=[];b=t[d.position].call(c,p,c._eventPosition);var x=[];for(r=0,n=p.length;r<n;++r)x.push((i=p[r],o=void 0,s=void 0,void 0,void 0,o=i._xScale,s=i._yScale||i._scale,l=i._index,u=i._datasetIndex,{xLabel:o?o.getLabelForIndex(l,u):"",yLabel:s?s.getLabelForIndex(l,u):"",index:l,datasetIndex:u,x:i._model.x,y:i._model.y}));d.filter&&(x=x.filter(function(e){return d.filter(e,g)})),d.itemSort&&(x=x.sort(function(e,t){return d.itemSort(e,t,g)})),helpers$1.each(x,function(e){_.push(d.callbacks.labelColor.call(c,e,c._chart)),w.push(d.callbacks.labelTextColor.call(c,e,c._chart))}),f.title=c.getTitle(x,g),f.beforeBody=c.getBeforeBody(x,g),f.body=c.getBody(x,g),f.afterBody=c.getAfterBody(x,g),f.footer=c.getFooter(x,g),f.x=Math.round(b.x),f.y=Math.round(b.y),f.caretPadding=d.caretPadding,f.labelColors=_,f.labelTextColors=w,f.dataPoints=x,v=function(e,t,r,n){var i=e.x,a=e.y,o=e.caretSize,s=e.caretPadding,l=e.cornerRadius,u=r.xAlign,c=r.yAlign,d=o+s,h=l+s;return"right"===u?i-=t.width:"center"===u&&((i-=t.width/2)+t.width>n.width&&(i=n.width-t.width),i<0&&(i=0)),"top"===c?a+=d:a-="bottom"===c?t.height+d:t.height/2,"center"===c?"left"===u?i+=d:"right"===u&&(i-=d):"left"===u?i-=h:"right"===u&&(i+=h),{x:i,y:a}}(f,y=function(e,t){var r=e._chart.ctx,n=2*t.yPadding,i=0,a=t.body,o=a.reduce(function(e,t){return e+t.before.length+t.lines.length+t.after.length},0);o+=t.beforeBody.length+t.afterBody.length;var s=t.title.length,l=t.footer.length,u=t.titleFontSize,c=t.bodyFontSize,d=t.footerFontSize;n+=s*u,n+=s?(s-1)*t.titleSpacing:0,n+=s?t.titleMarginBottom:0,n+=o*c,n+=o?(o-1)*t.bodySpacing:0,n+=l?t.footerMarginTop:0,n+=l*d,n+=l?(l-1)*t.footerSpacing:0;var h=0,f=function(e){i=Math.max(i,r.measureText(e).width+h)};return r.font=helpers$1.fontString(u,t._titleFontStyle,t._titleFontFamily),helpers$1.each(t.title,f),r.font=helpers$1.fontString(c,t._bodyFontStyle,t._bodyFontFamily),helpers$1.each(t.beforeBody.concat(t.afterBody),f),h=t.displayColors?c+2:0,helpers$1.each(a,function(e){helpers$1.each(e.before,f),helpers$1.each(e.lines,f),helpers$1.each(e.after,f)}),h=0,r.font=helpers$1.fontString(d,t._footerFontStyle,t._footerFontFamily),helpers$1.each(t.footer,f),{width:i+=2*t.xPadding,height:n}}(this,f),m=function(e,t){var r,n,i,a,o,s=e._model,l=e._chart,u=e._chart.chartArea,c="center",d="center";s.y<t.height?d="top":s.y>l.height-t.height&&(d="bottom");var h=(u.left+u.right)/2,f=(u.top+u.bottom)/2;"center"===d?(r=function(e){return e<=h},n=function(e){return e>h}):(r=function(e){return e<=t.width/2},n=function(e){return e>=l.width-t.width/2}),i=function(e){return e+t.width+s.caretSize+s.caretPadding>l.width},a=function(e){return e-t.width-s.caretSize-s.caretPadding<0},o=function(e){return e<=f?"top":"bottom"},r(s.x)?(c="left",i(s.x)&&(c="center",d=o(s.y))):n(s.x)&&(c="right",a(s.x)&&(c="center",d=o(s.y)));var p=e._options;return{xAlign:p.xAlign?p.xAlign:c,yAlign:p.yAlign?p.yAlign:d}}(this,y),c._chart)}else f.opacity=0;return f.xAlign=m.xAlign,f.yAlign=m.yAlign,f.x=v.x,f.y=v.y,f.width=y.width,f.height=y.height,f.caretX=b.x,f.caretY=b.y,c._model=f,e&&d.custom&&d.custom.call(c,f),c},drawCaret:function(e,t){var r=this._chart.ctx,n=this._view,i=this.getCaretPosition(e,t,n);r.lineTo(i.x1,i.y1),r.lineTo(i.x2,i.y2),r.lineTo(i.x3,i.y3)},getCaretPosition:function(e,t,r){var n,i,a,o,s,l,u=r.caretSize,c=r.cornerRadius,d=r.xAlign,h=r.yAlign,f=e.x,p=e.y,g=t.width,m=t.height;if("center"===h)s=p+m/2,"left"===d?(i=(n=f)-u,a=n,o=s+u,l=s-u):(i=(n=f+g)+u,a=n,o=s-u,l=s+u);else if("left"===d?(n=(i=f+c+u)-u,a=i+u):"right"===d?(n=(i=f+g-c-u)-u,a=i+u):(n=(i=r.caretX)-u,a=i+u),"top"===h)s=(o=p)-u,l=o;else{s=(o=p+m)+u,l=o;var v=a;a=n,n=v}return{x1:n,x2:i,x3:a,y1:o,y2:s,y3:l}},drawTitle:function(e,t,n,i){var a=t.title;if(a.length){n.textAlign=t._titleAlign,n.textBaseline="top";var o,s,l=t.titleFontSize,u=t.titleSpacing;for(n.fillStyle=r(t.titleFontColor,i),n.font=helpers$1.fontString(l,t._titleFontStyle,t._titleFontFamily),o=0,s=a.length;o<s;++o)n.fillText(a[o],e.x,e.y),e.y+=l+u,o+1===a.length&&(e.y+=t.titleMarginBottom-u)}},drawBody:function(e,t,n,i){var a=t.bodyFontSize,o=t.bodySpacing,s=t.body;n.textAlign=t._bodyAlign,n.textBaseline="top",n.font=helpers$1.fontString(a,t._bodyFontStyle,t._bodyFontFamily);var l=0,u=function(t){n.fillText(t,e.x+l,e.y),e.y+=a+o};n.fillStyle=r(t.bodyFontColor,i),helpers$1.each(t.beforeBody,u);var c=t.displayColors;l=c?a+2:0,helpers$1.each(s,function(o,s){var l=r(t.labelTextColors[s],i);n.fillStyle=l,helpers$1.each(o.before,u),helpers$1.each(o.lines,function(o){c&&(n.fillStyle=r(t.legendColorBackground,i),n.fillRect(e.x,e.y,a,a),n.lineWidth=1,n.strokeStyle=r(t.labelColors[s].borderColor,i),n.strokeRect(e.x,e.y,a,a),n.fillStyle=r(t.labelColors[s].backgroundColor,i),n.fillRect(e.x+1,e.y+1,a-2,a-2),n.fillStyle=l),u(o)}),helpers$1.each(o.after,u)}),l=0,helpers$1.each(t.afterBody,u),e.y-=o},drawFooter:function(e,t,n,i){var a=t.footer;a.length&&(e.y+=t.footerMarginTop,n.textAlign=t._footerAlign,n.textBaseline="top",n.fillStyle=r(t.footerFontColor,i),n.font=helpers$1.fontString(t.footerFontSize,t._footerFontStyle,t._footerFontFamily),helpers$1.each(a,function(r){n.fillText(r,e.x,e.y),e.y+=t.footerFontSize+t.footerSpacing}))},drawBackground:function(e,t,n,i,a){n.fillStyle=r(t.backgroundColor,a),n.strokeStyle=r(t.borderColor,a),n.lineWidth=t.borderWidth;var o=t.xAlign,s=t.yAlign,l=e.x,u=e.y,c=i.width,d=i.height,h=t.cornerRadius;n.beginPath(),n.moveTo(l+h,u),"top"===s&&this.drawCaret(e,i),n.lineTo(l+c-h,u),n.quadraticCurveTo(l+c,u,l+c,u+h),"center"===s&&"right"===o&&this.drawCaret(e,i),n.lineTo(l+c,u+d-h),n.quadraticCurveTo(l+c,u+d,l+c-h,u+d),"bottom"===s&&this.drawCaret(e,i),n.lineTo(l+h,u+d),n.quadraticCurveTo(l,u+d,l,u+d-h),"center"===s&&"left"===o&&this.drawCaret(e,i),n.lineTo(l,u+h),n.quadraticCurveTo(l,u,l+h,u),n.closePath(),n.fill(),t.borderWidth>0&&n.stroke()},draw:function(){var e=this._chart.ctx,t=this._view;if(0!==t.opacity){var r={width:t.width,height:t.height},n={x:t.x,y:t.y},i=Math.abs(t.opacity<.001)?0:t.opacity,a=t.title.length||t.beforeBody.length||t.body.length||t.afterBody.length||t.footer.length;this._options.enabled&&a&&(this.drawBackground(n,t,e,r,i),n.x+=t.xPadding,n.y+=t.yPadding,this.drawTitle(n,t,e,i),this.drawBody(n,t,e,i),this.drawFooter(n,t,e,i))}},handleEvent:function(e){var t,r=this,n=r._options;return r._lastActive=r._lastActive||[],"mouseout"===e.type?r._active=[]:r._active=r._chart.getElementsAtEventForMode(e,n.mode,n),(t=!helpers$1.arrayEquals(r._active,r._lastActive))&&(r._lastActive=r._active,(n.enabled||n.custom)&&(r._eventPosition={x:e.x,y:e.y},r.update(!0),r.pivot())),t}})).positioners=t}),core_controller=function(e){function t(e){return"top"===e||"bottom"===e}e.types={},e.instances={},e.controllers={},helpers$1.extend(e.prototype,{construct:function(t,r){var n=this;r=function(e){var t=(e=e||{}).data=e.data||{};return t.datasets=t.datasets||[],t.labels=t.labels||[],e.options=helpers$1.configMerge(core_defaults.global,core_defaults[e.type],e.options||{}),e}(r);var i=platform.acquireContext(t,r),a=i&&i.canvas,o=a&&a.height,s=a&&a.width;n.id=helpers$1.uid(),n.ctx=i,n.canvas=a,n.config=r,n.width=s,n.height=o,n.aspectRatio=o?s/o:null,n.options=r.options,n._bufferedRender=!1,n.chart=n,n.controller=n,e.instances[n.id]=n,Object.defineProperty(n,"data",{get:function(){return n.config.data},set:function(e){n.config.data=e}}),i&&a?(n.initialize(),n.update()):console.error("Failed to create chart: can't acquire context from the given item")},initialize:function(){var e=this;return core_plugins.notify(e,"beforeInit"),helpers$1.retinaScale(e,e.options.devicePixelRatio),e.bindEvents(),e.options.responsive&&e.resize(!0),e.ensureScalesHaveIDs(),e.buildOrUpdateScales(),e.initToolTip(),core_plugins.notify(e,"afterInit"),e},clear:function(){return helpers$1.canvas.clear(this),this},stop:function(){return core_animations.cancelAnimation(this),this},resize:function(e){var t=this,r=t.options,n=t.canvas,i=r.maintainAspectRatio&&t.aspectRatio||null,a=Math.max(0,Math.floor(helpers$1.getMaximumWidth(n))),o=Math.max(0,Math.floor(i?a/i:helpers$1.getMaximumHeight(n)));if((t.width!==a||t.height!==o)&&(n.width=t.width=a,n.height=t.height=o,n.style.width=a+"px",n.style.height=o+"px",helpers$1.retinaScale(t,r.devicePixelRatio),!e)){var s={width:a,height:o};core_plugins.notify(t,"resize",[s]),t.options.onResize&&t.options.onResize(t,s),t.stop(),t.update({duration:t.options.responsiveAnimationDuration})}},ensureScalesHaveIDs:function(){var e=this.options,t=e.scales||{},r=e.scale;helpers$1.each(t.xAxes,function(e,t){e.id=e.id||"x-axis-"+t}),helpers$1.each(t.yAxes,function(e,t){e.id=e.id||"y-axis-"+t}),r&&(r.id=r.id||"scale")},buildOrUpdateScales:function(){var e=this,r=e.options,n=e.scales||{},i=[],a=Object.keys(n).reduce(function(e,t){return e[t]=!1,e},{});r.scales&&(i=i.concat((r.scales.xAxes||[]).map(function(e){return{options:e,dtype:"category",dposition:"bottom"}}),(r.scales.yAxes||[]).map(function(e){return{options:e,dtype:"linear",dposition:"left"}}))),r.scale&&i.push({options:r.scale,dtype:"radialLinear",isDefault:!0,dposition:"chartArea"}),helpers$1.each(i,function(r){var i=r.options,o=i.id,s=helpers$1.valueOrDefault(i.type,r.dtype);t(i.position)!==t(r.dposition)&&(i.position=r.dposition),a[o]=!0;var l=null;if(o in n&&n[o].type===s)(l=n[o]).options=i,l.ctx=e.ctx,l.chart=e;else{var u=core_scaleService.getScaleConstructor(s);if(!u)return;l=new u({id:o,type:s,options:i,ctx:e.ctx,chart:e}),n[l.id]=l}l.mergeTicksOptions(),r.isDefault&&(e.scale=l)}),helpers$1.each(a,function(e,t){e||delete n[t]}),e.scales=n,core_scaleService.addScalesToLayout(this)},buildOrUpdateControllers:function(){var t=this,r=[],n=[];return helpers$1.each(t.data.datasets,function(i,a){var o=t.getDatasetMeta(a),s=i.type||t.config.type;if(o.type&&o.type!==s&&(t.destroyDatasetMeta(a),o=t.getDatasetMeta(a)),o.type=s,r.push(o.type),o.controller)o.controller.updateIndex(a),o.controller.linkScales();else{var l=e.controllers[o.type];if(void 0===l)throw new Error('"'+o.type+'" is not a chart type.');o.controller=new l(t,a),n.push(o.controller)}},t),n},resetElements:function(){var e=this;helpers$1.each(e.data.datasets,function(t,r){e.getDatasetMeta(r).controller.reset()},e)},reset:function(){this.resetElements(),this.tooltip.initialize()},update:function(t){var r,n,i=this;if(t&&"object"===(void 0===t?"undefined":_typeof(t))||(t={duration:t,lazy:arguments[1]}),n=(r=i).options,helpers$1.each(r.scales,function(e){core_layouts.removeBox(r,e)}),n=helpers$1.configMerge(e.defaults.global,e.defaults[r.config.type],n),r.options=r.config.options=n,r.ensureScalesHaveIDs(),r.buildOrUpdateScales(),r.tooltip._options=n.tooltips,r.tooltip.initialize(),core_plugins._invalidate(i),!1!==core_plugins.notify(i,"beforeUpdate")){i.tooltip._data=i.data;var a=i.buildOrUpdateControllers();helpers$1.each(i.data.datasets,function(e,t){i.getDatasetMeta(t).controller.buildOrUpdateElements()},i),i.updateLayout(),i.options.animation&&i.options.animation.duration&&helpers$1.each(a,function(e){e.reset()}),i.updateDatasets(),i.tooltip.initialize(),i.lastActive=[],core_plugins.notify(i,"afterUpdate"),i._bufferedRender?i._bufferedRequest={duration:t.duration,easing:t.easing,lazy:t.lazy}:i.render(t)}},updateLayout:function(){!1!==core_plugins.notify(this,"beforeLayout")&&(core_layouts.update(this,this.width,this.height),core_plugins.notify(this,"afterScaleUpdate"),core_plugins.notify(this,"afterLayout"))},updateDatasets:function(){if(!1!==core_plugins.notify(this,"beforeDatasetsUpdate")){for(var e=0,t=this.data.datasets.length;e<t;++e)this.updateDataset(e);core_plugins.notify(this,"afterDatasetsUpdate")}},updateDataset:function(e){var t=this.getDatasetMeta(e),r={meta:t,index:e};!1!==core_plugins.notify(this,"beforeDatasetUpdate",[r])&&(t.controller.update(),core_plugins.notify(this,"afterDatasetUpdate",[r]))},render:function(e){var t=this;e&&"object"===(void 0===e?"undefined":_typeof(e))||(e={duration:e,lazy:arguments[1]});var r=e.duration,n=e.lazy;if(!1!==core_plugins.notify(t,"beforeRender")){var i=t.options.animation,a=function(e){core_plugins.notify(t,"afterRender"),helpers$1.callback(i&&i.onComplete,[e],t)};if(i&&(void 0!==r&&0!==r||void 0===r&&0!==i.duration)){var o=new core_animation({numSteps:(r||i.duration)/16.66,easing:e.easing||i.easing,render:function(e,t){var r=helpers$1.easing.effects[t.easing],n=t.currentStep,i=n/t.numSteps;e.draw(r(i),i,n)},onAnimationProgress:i.onProgress,onAnimationComplete:a});core_animations.addAnimation(t,o,r,n)}else t.draw(),a(new core_animation({numSteps:0,chart:t}));return t}},draw:function(e){var t=this;t.clear(),helpers$1.isNullOrUndef(e)&&(e=1),t.transition(e),t.width<=0||t.height<=0||!1!==core_plugins.notify(t,"beforeDraw",[e])&&(helpers$1.each(t.boxes,function(e){e.draw(t.chartArea)},t),t.scale&&t.scale.draw(),t.drawDatasets(e),t._drawTooltip(e),core_plugins.notify(t,"afterDraw",[e]))},transition:function(e){for(var t=0,r=(this.data.datasets||[]).length;t<r;++t)this.isDatasetVisible(t)&&this.getDatasetMeta(t).controller.transition(e);this.tooltip.transition(e)},drawDatasets:function(e){var t=this;if(!1!==core_plugins.notify(t,"beforeDatasetsDraw",[e])){for(var r=(t.data.datasets||[]).length-1;r>=0;--r)t.isDatasetVisible(r)&&t.drawDataset(r,e);core_plugins.notify(t,"afterDatasetsDraw",[e])}},drawDataset:function(e,t){var r=this.getDatasetMeta(e),n={meta:r,index:e,easingValue:t};!1!==core_plugins.notify(this,"beforeDatasetDraw",[n])&&(r.controller.draw(t),core_plugins.notify(this,"afterDatasetDraw",[n]))},_drawTooltip:function(e){var t=this.tooltip,r={tooltip:t,easingValue:e};!1!==core_plugins.notify(this,"beforeTooltipDraw",[r])&&(t.draw(),core_plugins.notify(this,"afterTooltipDraw",[r]))},getElementAtEvent:function(e){return core_interaction.modes.single(this,e)},getElementsAtEvent:function(e){return core_interaction.modes.label(this,e,{intersect:!0})},getElementsAtXAxis:function(e){return core_interaction.modes["x-axis"](this,e,{intersect:!0})},getElementsAtEventForMode:function(e,t,r){var n=core_interaction.modes[t];return"function"==typeof n?n(this,e,r):[]},getDatasetAtEvent:function(e){return core_interaction.modes.dataset(this,e,{intersect:!0})},getDatasetMeta:function(e){var t=this.data.datasets[e];t._meta||(t._meta={});var r=t._meta[this.id];return r||(r=t._meta[this.id]={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null}),r},getVisibleDatasetCount:function(){for(var e=0,t=0,r=this.data.datasets.length;t<r;++t)this.isDatasetVisible(t)&&e++;return e},isDatasetVisible:function(e){var t=this.getDatasetMeta(e);return"boolean"==typeof t.hidden?!t.hidden:!this.data.datasets[e].hidden},generateLegend:function(){return this.options.legendCallback(this)},destroyDatasetMeta:function(e){var t=this.id,r=this.data.datasets[e],n=r._meta&&r._meta[t];n&&(n.controller.destroy(),delete r._meta[t])},destroy:function(){var t,r,n=this,i=n.canvas;for(n.stop(),t=0,r=n.data.datasets.length;t<r;++t)n.destroyDatasetMeta(t);i&&(n.unbindEvents(),helpers$1.canvas.clear(n),platform.releaseContext(n.ctx),n.canvas=null,n.ctx=null),core_plugins.notify(n,"destroy"),delete e.instances[n.id]},toBase64Image:function(){return this.canvas.toDataURL.apply(this.canvas,arguments)},initToolTip:function(){var e=this;e.tooltip=new core_tooltip({_chart:e,_chartInstance:e,_data:e.data,_options:e.options.tooltips},e)},bindEvents:function(){var e=this,t=e._listeners={},r=function(){e.eventHandler.apply(e,arguments)};helpers$1.each(e.options.events,function(n){platform.addEventListener(e,n,r),t[n]=r}),e.options.responsive&&(r=function(){e.resize()},platform.addEventListener(e,"resize",r),t.resize=r)},unbindEvents:function(){var e=this,t=e._listeners;t&&(delete e._listeners,helpers$1.each(t,function(t,r){platform.removeEventListener(e,r,t)}))},updateHoverStyle:function(e,t,r){var n,i,a,o=r?"setHoverStyle":"removeHoverStyle";for(i=0,a=e.length;i<a;++i)(n=e[i])&&this.getDatasetMeta(n._datasetIndex).controller[o](n)},eventHandler:function(e){var t=this,r=t.tooltip;if(!1!==core_plugins.notify(t,"beforeEvent",[e])){t._bufferedRender=!0,t._bufferedRequest=null;var n=t.handleEvent(e);r&&(n=r._start?r.handleEvent(e):n|r.handleEvent(e)),core_plugins.notify(t,"afterEvent",[e]);var i=t._bufferedRequest;return i?t.render(i):n&&!t.animating&&(t.stop(),t.render({duration:t.options.hover.animationDuration,lazy:!0})),t._bufferedRender=!1,t._bufferedRequest=null,t}},handleEvent:function(e){var t,r=this,n=r.options||{},i=n.hover;return r.lastActive=r.lastActive||[],"mouseout"===e.type?r.active=[]:r.active=r.getElementsAtEventForMode(e,i.mode,i),helpers$1.callback(n.onHover||n.hover.onHover,[e.native,r.active],r),"mouseup"!==e.type&&"click"!==e.type||n.onClick&&n.onClick.call(r,e.native,r.active),r.lastActive.length&&r.updateHoverStyle(r.lastActive,i.mode,!1),r.active.length&&i.mode&&r.updateHoverStyle(r.active,i.mode,!0),t=!helpers$1.arrayEquals(r.active,r.lastActive),r.lastActive=r.active,t}}),e.Controller=e},core_datasetController=function(e){var t=["push","pop","shift","splice","unshift"];function r(e,r){var n=e._chartjs;if(n){var i=n.listeners,a=i.indexOf(r);-1!==a&&i.splice(a,1),i.length>0||(t.forEach(function(t){delete e[t]}),delete e._chartjs)}}e.DatasetController=function(e,t){this.initialize(e,t)},helpers$1.extend(e.DatasetController.prototype,{datasetElementType:null,dataElementType:null,initialize:function(e,t){this.chart=e,this.index=t,this.linkScales(),this.addElements()},updateIndex:function(e){this.index=e},linkScales:function(){var e=this,t=e.getMeta(),r=e.getDataset();null!==t.xAxisID&&t.xAxisID in e.chart.scales||(t.xAxisID=r.xAxisID||e.chart.options.scales.xAxes[0].id),null!==t.yAxisID&&t.yAxisID in e.chart.scales||(t.yAxisID=r.yAxisID||e.chart.options.scales.yAxes[0].id)},getDataset:function(){return this.chart.data.datasets[this.index]},getMeta:function(){return this.chart.getDatasetMeta(this.index)},getScaleForId:function(e){return this.chart.scales[e]},reset:function(){this.update(!0)},destroy:function(){this._data&&r(this._data,this)},createMetaDataset:function(){var e=this.datasetElementType;return e&&new e({_chart:this.chart,_datasetIndex:this.index})},createMetaData:function(e){var t=this.dataElementType;return t&&new t({_chart:this.chart,_datasetIndex:this.index,_index:e})},addElements:function(){var e,t,r=this.getMeta(),n=this.getDataset().data||[],i=r.data;for(e=0,t=n.length;e<t;++e)i[e]=i[e]||this.createMetaData(e);r.dataset=r.dataset||this.createMetaDataset()},addElementAndReset:function(e){var t=this.createMetaData(e);this.getMeta().data.splice(e,0,t),this.updateElement(t,e,!0)},buildOrUpdateElements:function(){var e,n,i=this,a=i.getDataset(),o=a.data||(a.data=[]);i._data!==o&&(i._data&&r(i._data,i),n=i,(e=o)._chartjs?e._chartjs.listeners.push(n):(Object.defineProperty(e,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[n]}}),t.forEach(function(t){var r="onData"+t.charAt(0).toUpperCase()+t.slice(1),n=e[t];Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:function(){var t=Array.prototype.slice.call(arguments),i=n.apply(this,t);return helpers$1.each(e._chartjs.listeners,function(e){"function"==typeof e[r]&&e[r].apply(e,t)}),i}})})),i._data=o),i.resyncElements()},update:helpers$1.noop,transition:function(e){for(var t=this.getMeta(),r=t.data||[],n=r.length,i=0;i<n;++i)r[i].transition(e);t.dataset&&t.dataset.transition(e)},draw:function(){var e=this.getMeta(),t=e.data||[],r=t.length,n=0;for(e.dataset&&e.dataset.draw();n<r;++n)t[n].draw()},removeHoverStyle:function(e){helpers$1.merge(e._model,e.$previousStyle||{}),delete e.$previousStyle},setHoverStyle:function(e){var t=this.chart.data.datasets[e._datasetIndex],r=e._index,n=e.custom||{},i=helpers$1.valueAtIndexOrDefault,a=helpers$1.getHoverColor,o=e._model;e.$previousStyle={backgroundColor:o.backgroundColor,borderColor:o.borderColor,borderWidth:o.borderWidth},o.backgroundColor=n.hoverBackgroundColor?n.hoverBackgroundColor:i(t.hoverBackgroundColor,r,a(o.backgroundColor)),o.borderColor=n.hoverBorderColor?n.hoverBorderColor:i(t.hoverBorderColor,r,a(o.borderColor)),o.borderWidth=n.hoverBorderWidth?n.hoverBorderWidth:i(t.hoverBorderWidth,r,o.borderWidth)},resyncElements:function(){var e=this.getMeta(),t=this.getDataset().data,r=e.data.length,n=t.length;n<r?e.data.splice(n,r-n):n>r&&this.insertElements(r,n-r)},insertElements:function(e,t){for(var r=0;r<t;++r)this.addElementAndReset(e+r)},onDataPush:function(){this.insertElements(this.getDataset().data.length-1,arguments.length)},onDataPop:function(){this.getMeta().data.pop()},onDataShift:function(){this.getMeta().data.shift()},onDataSplice:function(e,t){this.getMeta().data.splice(e,t),this.insertElements(e,arguments.length-2)},onDataUnshift:function(){this.insertElements(0,arguments.length)}}),e.DatasetController.extend=helpers$1.inherits};function generateTicks(e,t){var r,n,i,a=[];if(e.stepSize&&e.stepSize>0)i=e.stepSize;else{var o=helpers$1.niceNum(t.max-t.min,!1);i=helpers$1.niceNum(o/(e.maxTicks-1),!0),void 0!==(n=e.precision)&&(r=Math.pow(10,n),i=Math.ceil(i*r)/r)}var s=Math.floor(t.min/i)*i,l=Math.ceil(t.max/i)*i;helpers$1.isNullOrUndef(e.min)||helpers$1.isNullOrUndef(e.max)||!e.stepSize||helpers$1.almostWhole((e.max-e.min)/e.stepSize,i/1e3)&&(s=e.min,l=e.max);var u=(l-s)/i;u=helpers$1.almostEquals(u,Math.round(u),i/1e3)?Math.round(u):Math.ceil(u),n=1,i<1&&(n=Math.pow(10,1-Math.floor(helpers$1.log10(i))),s=Math.round(s*n)/n,l=Math.round(l*n)/n),a.push(void 0!==e.min?e.min:s);for(var c=1;c<u;++c)a.push(Math.round((s+c*i)*n)/n);return a.push(void 0!==e.max?e.max:l),a}var scale_linearbase=function(e){var t=helpers$1.noop;e.LinearScaleBase=core_scale.extend({getRightValue:function(e){return"string"==typeof e?+e:core_scale.prototype.getRightValue.call(this,e)},handleTickRangeOptions:function(){var e=this,t=e.options.ticks;if(t.beginAtZero){var r=helpers$1.sign(e.min),n=helpers$1.sign(e.max);r<0&&n<0?e.max=0:r>0&&n>0&&(e.min=0)}var i=void 0!==t.min||void 0!==t.suggestedMin,a=void 0!==t.max||void 0!==t.suggestedMax;void 0!==t.min?e.min=t.min:void 0!==t.suggestedMin&&(null===e.min?e.min=t.suggestedMin:e.min=Math.min(e.min,t.suggestedMin)),void 0!==t.max?e.max=t.max:void 0!==t.suggestedMax&&(null===e.max?e.max=t.suggestedMax:e.max=Math.max(e.max,t.suggestedMax)),i!==a&&e.min>=e.max&&(i?e.max=e.min+1:e.min=e.max-1),e.min===e.max&&(e.max++,t.beginAtZero||e.min--)},getTickLimit:t,handleDirectionalChanges:t,buildTicks:function(){var e=this,t=e.options.ticks,r=e.getTickLimit(),n={maxTicks:r=Math.max(2,r),min:t.min,max:t.max,precision:t.precision,stepSize:helpers$1.valueOrDefault(t.fixedStepSize,t.stepSize)},i=e.ticks=generateTicks(n,e);e.handleDirectionalChanges(),e.max=helpers$1.max(i),e.min=helpers$1.min(i),t.reverse?(i.reverse(),e.start=e.max,e.end=e.min):(e.start=e.min,e.end=e.max)},convertTicksToLabels:function(){var e=this;e.ticksAsNumbers=e.ticks.slice(),e.zeroLineIndex=e.ticks.indexOf(0),core_scale.prototype.convertTicksToLabels.call(e)}})},scale_category=function(){var e=core_scale.extend({getLabels:function(){var e=this.chart.data;return this.options.labels||(this.isHorizontal()?e.xLabels:e.yLabels)||e.labels},determineDataLimits:function(){var e,t=this,r=t.getLabels();t.minIndex=0,t.maxIndex=r.length-1,void 0!==t.options.ticks.min&&(e=r.indexOf(t.options.ticks.min),t.minIndex=-1!==e?e:t.minIndex),void 0!==t.options.ticks.max&&(e=r.indexOf(t.options.ticks.max),t.maxIndex=-1!==e?e:t.maxIndex),t.min=r[t.minIndex],t.max=r[t.maxIndex]},buildTicks:function(){var e=this,t=e.getLabels();e.ticks=0===e.minIndex&&e.maxIndex===t.length-1?t:t.slice(e.minIndex,e.maxIndex+1)},getLabelForIndex:function(e,t){var r=this,n=r.chart.data,i=r.isHorizontal();return n.yLabels&&!i?r.getRightValue(n.datasets[t].data[e]):r.ticks[e-r.minIndex]},getPixelForValue:function(e,t){var r,n=this,i=n.options.offset,a=Math.max(n.maxIndex+1-n.minIndex-(i?0:1),1);if(void 0!==e&&null!==e&&(r=n.isHorizontal()?e.x:e.y),void 0!==r||void 0!==e&&isNaN(t)){var o=n.getLabels();e=r||e;var s=o.indexOf(e);t=-1!==s?s:t}if(n.isHorizontal()){var l=n.width/a,u=l*(t-n.minIndex);return i&&(u+=l/2),n.left+Math.round(u)}var c=n.height/a,d=c*(t-n.minIndex);return i&&(d+=c/2),n.top+Math.round(d)},getPixelForTick:function(e){return this.getPixelForValue(this.ticks[e],e+this.minIndex,null)},getValueForPixel:function(e){var t=this,r=t.options.offset,n=Math.max(t._ticks.length-(r?0:1),1),i=t.isHorizontal(),a=(i?t.width:t.height)/n;return e-=i?t.left:t.top,r&&(e-=a/2),(e<=0?0:Math.round(e/a))+t.minIndex},getBasePixel:function(){return this.bottom}});core_scaleService.registerScaleType("category",e,{position:"bottom"})},scale_linear=function(e){var t={position:"left",ticks:{callback:core_ticks.formatters.linear}},r=e.LinearScaleBase.extend({determineDataLimits:function(){var e=this,t=e.options,r=e.chart,n=r.data.datasets,i=e.isHorizontal();function a(t){return i?t.xAxisID===e.id:t.yAxisID===e.id}e.min=null,e.max=null;var o=t.stacked;if(void 0===o&&helpers$1.each(n,function(e,t){if(!o){var n=r.getDatasetMeta(t);r.isDatasetVisible(t)&&a(n)&&void 0!==n.stack&&(o=!0)}}),t.stacked||o){var s={};helpers$1.each(n,function(n,i){var o=r.getDatasetMeta(i),l=[o.type,void 0===t.stacked&&void 0===o.stack?i:"",o.stack].join(".");void 0===s[l]&&(s[l]={positiveValues:[],negativeValues:[]});var u=s[l].positiveValues,c=s[l].negativeValues;r.isDatasetVisible(i)&&a(o)&&helpers$1.each(n.data,function(r,n){var i=+e.getRightValue(r);isNaN(i)||o.data[n].hidden||(u[n]=u[n]||0,c[n]=c[n]||0,t.relativePoints?u[n]=100:i<0?c[n]+=i:u[n]+=i)})}),helpers$1.each(s,function(t){var r=t.positiveValues.concat(t.negativeValues),n=helpers$1.min(r),i=helpers$1.max(r);e.min=null===e.min?n:Math.min(e.min,n),e.max=null===e.max?i:Math.max(e.max,i)})}else helpers$1.each(n,function(t,n){var i=r.getDatasetMeta(n);r.isDatasetVisible(n)&&a(i)&&helpers$1.each(t.data,function(t,r){var n=+e.getRightValue(t);isNaN(n)||i.data[r].hidden||(null===e.min?e.min=n:n<e.min&&(e.min=n),null===e.max?e.max=n:n>e.max&&(e.max=n))})});e.min=isFinite(e.min)&&!isNaN(e.min)?e.min:0,e.max=isFinite(e.max)&&!isNaN(e.max)?e.max:1,this.handleTickRangeOptions()},getTickLimit:function(){var e,t=this.options.ticks;if(this.isHorizontal())e=Math.min(t.maxTicksLimit?t.maxTicksLimit:11,Math.ceil(this.width/50));else{var r=helpers$1.valueOrDefault(t.fontSize,core_defaults.global.defaultFontSize);e=Math.min(t.maxTicksLimit?t.maxTicksLimit:11,Math.ceil(this.height/(2*r)))}return e},handleDirectionalChanges:function(){this.isHorizontal()||this.ticks.reverse()},getLabelForIndex:function(e,t){return+this.getRightValue(this.chart.data.datasets[t].data[e])},getPixelForValue:function(e){var t=this,r=t.start,n=+t.getRightValue(e),i=t.end-r;return t.isHorizontal()?t.left+t.width/i*(n-r):t.bottom-t.height/i*(n-r)},getValueForPixel:function(e){var t=this,r=t.isHorizontal(),n=r?t.width:t.height,i=(r?e-t.left:t.bottom-e)/n;return t.start+(t.end-t.start)*i},getPixelForTick:function(e){return this.getPixelForValue(this.ticksAsNumbers[e])}});core_scaleService.registerScaleType("linear",r,t)};function generateTicks$1(e,t){var r,n,i=[],a=helpers$1.valueOrDefault,o=a(e.min,Math.pow(10,Math.floor(helpers$1.log10(t.min)))),s=Math.floor(helpers$1.log10(t.max)),l=Math.ceil(t.max/Math.pow(10,s));0===o?(r=Math.floor(helpers$1.log10(t.minNotZero)),n=Math.floor(t.minNotZero/Math.pow(10,r)),i.push(o),o=n*Math.pow(10,r)):(r=Math.floor(helpers$1.log10(o)),n=Math.floor(o/Math.pow(10,r)));var u=r<0?Math.pow(10,Math.abs(r)):1;do{i.push(o),10===++n&&(n=1,u=++r>=0?1:u),o=Math.round(n*Math.pow(10,r)*u)/u}while(r<s||r===s&&n<l);var c=a(e.max,o);return i.push(c),i}var scale_logarithmic=function(e){var t={position:"left",ticks:{callback:core_ticks.formatters.logarithmic}},r=core_scale.extend({determineDataLimits:function(){var e=this,t=e.options,r=e.chart,n=r.data.datasets,i=e.isHorizontal();function a(t){return i?t.xAxisID===e.id:t.yAxisID===e.id}e.min=null,e.max=null,e.minNotZero=null;var o=t.stacked;if(void 0===o&&helpers$1.each(n,function(e,t){if(!o){var n=r.getDatasetMeta(t);r.isDatasetVisible(t)&&a(n)&&void 0!==n.stack&&(o=!0)}}),t.stacked||o){var s={};helpers$1.each(n,function(n,i){var o=r.getDatasetMeta(i),l=[o.type,void 0===t.stacked&&void 0===o.stack?i:"",o.stack].join(".");r.isDatasetVisible(i)&&a(o)&&(void 0===s[l]&&(s[l]=[]),helpers$1.each(n.data,function(t,r){var n=s[l],i=+e.getRightValue(t);isNaN(i)||o.data[r].hidden||i<0||(n[r]=n[r]||0,n[r]+=i)}))}),helpers$1.each(s,function(t){if(t.length>0){var r=helpers$1.min(t),n=helpers$1.max(t);e.min=null===e.min?r:Math.min(e.min,r),e.max=null===e.max?n:Math.max(e.max,n)}})}else helpers$1.each(n,function(t,n){var i=r.getDatasetMeta(n);r.isDatasetVisible(n)&&a(i)&&helpers$1.each(t.data,function(t,r){var n=+e.getRightValue(t);isNaN(n)||i.data[r].hidden||n<0||(null===e.min?e.min=n:n<e.min&&(e.min=n),null===e.max?e.max=n:n>e.max&&(e.max=n),0!==n&&(null===e.minNotZero||n<e.minNotZero)&&(e.minNotZero=n))})});this.handleTickRangeOptions()},handleTickRangeOptions:function(){var e=this,t=e.options.ticks,r=helpers$1.valueOrDefault;e.min=r(t.min,e.min),e.max=r(t.max,e.max),e.min===e.max&&(0!==e.min&&null!==e.min?(e.min=Math.pow(10,Math.floor(helpers$1.log10(e.min))-1),e.max=Math.pow(10,Math.floor(helpers$1.log10(e.max))+1)):(e.min=1,e.max=10)),null===e.min&&(e.min=Math.pow(10,Math.floor(helpers$1.log10(e.max))-1)),null===e.max&&(e.max=0!==e.min?Math.pow(10,Math.floor(helpers$1.log10(e.min))+1):10),null===e.minNotZero&&(e.min>0?e.minNotZero=e.min:e.max<1?e.minNotZero=Math.pow(10,Math.floor(helpers$1.log10(e.max))):e.minNotZero=1)},buildTicks:function(){var e=this,t=e.options.ticks,r=!e.isHorizontal(),n={min:t.min,max:t.max},i=e.ticks=generateTicks$1(n,e);e.max=helpers$1.max(i),e.min=helpers$1.min(i),t.reverse?(r=!r,e.start=e.max,e.end=e.min):(e.start=e.min,e.end=e.max),r&&i.reverse()},convertTicksToLabels:function(){this.tickValues=this.ticks.slice(),core_scale.prototype.convertTicksToLabels.call(this)},getLabelForIndex:function(e,t){return+this.getRightValue(this.chart.data.datasets[t].data[e])},getPixelForTick:function(e){return this.getPixelForValue(this.tickValues[e])},_getFirstTickValue:function(e){var t=Math.floor(helpers$1.log10(e));return Math.floor(e/Math.pow(10,t))*Math.pow(10,t)},getPixelForValue:function(t){var r,n,i,a,o,s=this,l=s.options.ticks.reverse,u=helpers$1.log10,c=s._getFirstTickValue(s.minNotZero),d=0;return t=+s.getRightValue(t),l?(i=s.end,a=s.start,o=-1):(i=s.start,a=s.end,o=1),s.isHorizontal()?(r=s.width,n=l?s.right:s.left):(r=s.height,o*=-1,n=l?s.top:s.bottom),t!==i&&(0===i&&(r-=d=helpers$1.getValueOrDefault(s.options.ticks.fontSize,e.defaults.global.defaultFontSize),i=c),0!==t&&(d+=r/(u(a)-u(i))*(u(t)-u(i))),n+=o*d),n},getValueForPixel:function(t){var r,n,i,a,o=this,s=o.options.ticks.reverse,l=helpers$1.log10,u=o._getFirstTickValue(o.minNotZero);if(s?(n=o.end,i=o.start):(n=o.start,i=o.end),o.isHorizontal()?(r=o.width,a=s?o.right-t:t-o.left):(r=o.height,a=s?t-o.top:o.bottom-t),a!==n){if(0===n){var c=helpers$1.getValueOrDefault(o.options.ticks.fontSize,e.defaults.global.defaultFontSize);a-=c,r-=c,n=u}a*=l(i)-l(n),a/=r,a=Math.pow(10,l(n)+a)}return a}});core_scaleService.registerScaleType("logarithmic",r,t)},scale_radialLinear=function(e){var t=core_defaults.global,r={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,color:"rgba(0, 0, 0, 0.1)",lineWidth:1},gridLines:{circular:!1},ticks:{showLabelBackdrop:!0,backdropColor:"rgba(255,255,255,0.75)",backdropPaddingY:2,backdropPaddingX:2,callback:core_ticks.formatters.linear},pointLabels:{display:!0,fontSize:10,callback:function(e){return e}}};function n(e){var t=e.options;return t.angleLines.display||t.pointLabels.display?e.chart.data.labels.length:0}function i(e){var r=e.options.pointLabels,n=helpers$1.valueOrDefault(r.fontSize,t.defaultFontSize),i=helpers$1.valueOrDefault(r.fontStyle,t.defaultFontStyle),a=helpers$1.valueOrDefault(r.fontFamily,t.defaultFontFamily);return{size:n,style:i,family:a,font:helpers$1.fontString(n,i,a)}}function a(e,t,r,n,i){return e===n||e===i?{start:t-r/2,end:t+r/2}:e<n||e>i?{start:t-r-5,end:t}:{start:t,end:t+r+5}}function o(e){return 0===e||180===e?"center":e<180?"left":"right"}function s(e,t,r,n){if(helpers$1.isArray(t))for(var i=r.y,a=1.5*n,o=0;o<t.length;++o)e.fillText(t[o],r.x,i),i+=a;else e.fillText(t,r.x,r.y)}function l(e,t,r){90===e||270===e?r.y-=t.h/2:(e>270||e<90)&&(r.y-=t.h)}function u(e){return helpers$1.isNumber(e)?e:0}var c=e.LinearScaleBase.extend({setDimensions:function(){var e=this,r=e.options,n=r.ticks;e.width=e.maxWidth,e.height=e.maxHeight,e.xCenter=Math.round(e.width/2),e.yCenter=Math.round(e.height/2);var i=helpers$1.min([e.height,e.width]),a=helpers$1.valueOrDefault(n.fontSize,t.defaultFontSize);e.drawingArea=r.display?i/2-(a/2+n.backdropPaddingY):i/2},determineDataLimits:function(){var e=this,t=e.chart,r=Number.POSITIVE_INFINITY,n=Number.NEGATIVE_INFINITY;helpers$1.each(t.data.datasets,function(i,a){if(t.isDatasetVisible(a)){var o=t.getDatasetMeta(a);helpers$1.each(i.data,function(t,i){var a=+e.getRightValue(t);isNaN(a)||o.data[i].hidden||(r=Math.min(a,r),n=Math.max(a,n))})}}),e.min=r===Number.POSITIVE_INFINITY?0:r,e.max=n===Number.NEGATIVE_INFINITY?0:n,e.handleTickRangeOptions()},getTickLimit:function(){var e=this.options.ticks,r=helpers$1.valueOrDefault(e.fontSize,t.defaultFontSize);return Math.min(e.maxTicksLimit?e.maxTicksLimit:11,Math.ceil(this.drawingArea/(1.5*r)))},convertTicksToLabels:function(){var t=this;e.LinearScaleBase.prototype.convertTicksToLabels.call(t),t.pointLabels=t.chart.data.labels.map(t.options.pointLabels.callback,t)},getLabelForIndex:function(e,t){return+this.getRightValue(this.chart.data.datasets[t].data[e])},fit:function(){var e,t;this.options.pointLabels.display?function(e){var t,r,o,s=i(e),l=Math.min(e.height/2,e.width/2),u={r:e.width,l:0,t:e.height,b:0},c={};e.ctx.font=s.font,e._pointLabelSizes=[];var d,h,f,p=n(e);for(t=0;t<p;t++){o=e.getPointPosition(t,l),d=e.ctx,h=s.size,f=e.pointLabels[t]||"",r=helpers$1.isArray(f)?{w:helpers$1.longestText(d,d.font,f),h:f.length*h+1.5*(f.length-1)*h}:{w:d.measureText(f).width,h:h},e._pointLabelSizes[t]=r;var g=e.getIndexAngle(t),m=helpers$1.toDegrees(g)%360,v=a(m,o.x,r.w,0,180),y=a(m,o.y,r.h,90,270);v.start<u.l&&(u.l=v.start,c.l=g),v.end>u.r&&(u.r=v.end,c.r=g),y.start<u.t&&(u.t=y.start,c.t=g),y.end>u.b&&(u.b=y.end,c.b=g)}e.setReductions(l,u,c)}(this):(e=this,t=Math.min(e.height/2,e.width/2),e.drawingArea=Math.round(t),e.setCenterPoint(0,0,0,0))},setReductions:function(e,t,r){var n=t.l/Math.sin(r.l),i=Math.max(t.r-this.width,0)/Math.sin(r.r),a=-t.t/Math.cos(r.t),o=-Math.max(t.b-this.height,0)/Math.cos(r.b);n=u(n),i=u(i),a=u(a),o=u(o),this.drawingArea=Math.min(Math.round(e-(n+i)/2),Math.round(e-(a+o)/2)),this.setCenterPoint(n,i,a,o)},setCenterPoint:function(e,t,r,n){var i=this,a=i.width-t-i.drawingArea,o=e+i.drawingArea,s=r+i.drawingArea,l=i.height-n-i.drawingArea;i.xCenter=Math.round((o+a)/2+i.left),i.yCenter=Math.round((s+l)/2+i.top)},getIndexAngle:function(e){return e*(2*Math.PI/n(this))+(this.chart.options&&this.chart.options.startAngle?this.chart.options.startAngle:0)*Math.PI*2/360},getDistanceFromCenterForValue:function(e){var t=this;if(null===e)return 0;var r=t.drawingArea/(t.max-t.min);return t.options.ticks.reverse?(t.max-e)*r:(e-t.min)*r},getPointPosition:function(e,t){var r=this.getIndexAngle(e)-Math.PI/2;return{x:Math.round(Math.cos(r)*t)+this.xCenter,y:Math.round(Math.sin(r)*t)+this.yCenter}},getPointPositionForValue:function(e,t){return this.getPointPosition(e,this.getDistanceFromCenterForValue(t))},getBasePosition:function(){var e=this.min,t=this.max;return this.getPointPositionForValue(0,this.beginAtZero?0:e<0&&t<0?t:e>0&&t>0?e:0)},draw:function(){var e=this,r=e.options,a=r.gridLines,u=r.ticks,c=helpers$1.valueOrDefault;if(r.display){var d=e.ctx,h=this.getIndexAngle(0),f=c(u.fontSize,t.defaultFontSize),p=c(u.fontStyle,t.defaultFontStyle),g=c(u.fontFamily,t.defaultFontFamily),m=helpers$1.fontString(f,p,g);helpers$1.each(e.ticks,function(r,i){if(i>0||u.reverse){var o=e.getDistanceFromCenterForValue(e.ticksAsNumbers[i]);if(a.display&&0!==i&&function(e,t,r,i){var a=e.ctx;if(a.strokeStyle=helpers$1.valueAtIndexOrDefault(t.color,i-1),a.lineWidth=helpers$1.valueAtIndexOrDefault(t.lineWidth,i-1),e.options.gridLines.circular)a.beginPath(),a.arc(e.xCenter,e.yCenter,r,0,2*Math.PI),a.closePath(),a.stroke();else{var o=n(e);if(0===o)return;a.beginPath();var s=e.getPointPosition(0,r);a.moveTo(s.x,s.y);for(var l=1;l<o;l++)s=e.getPointPosition(l,r),a.lineTo(s.x,s.y);a.closePath(),a.stroke()}}(e,a,o,i),u.display){var s=c(u.fontColor,t.defaultFontColor);if(d.font=m,d.save(),d.translate(e.xCenter,e.yCenter),d.rotate(h),u.showLabelBackdrop){var l=d.measureText(r).width;d.fillStyle=u.backdropColor,d.fillRect(-l/2-u.backdropPaddingX,-o-f/2-u.backdropPaddingY,l+2*u.backdropPaddingX,f+2*u.backdropPaddingY)}d.textAlign="center",d.textBaseline="middle",d.fillStyle=s,d.fillText(r,0,-o),d.restore()}}}),(r.angleLines.display||r.pointLabels.display)&&function(e){var r=e.ctx,a=e.options,u=a.angleLines,c=a.pointLabels;r.lineWidth=u.lineWidth,r.strokeStyle=u.color;var d=e.getDistanceFromCenterForValue(a.ticks.reverse?e.min:e.max),h=i(e);r.textBaseline="top";for(var f=n(e)-1;f>=0;f--){if(u.display){var p=e.getPointPosition(f,d);r.beginPath(),r.moveTo(e.xCenter,e.yCenter),r.lineTo(p.x,p.y),r.stroke(),r.closePath()}if(c.display){var g=e.getPointPosition(f,d+5),m=helpers$1.valueAtIndexOrDefault(c.fontColor,f,t.defaultFontColor);r.font=h.font,r.fillStyle=m;var v=e.getIndexAngle(f),y=helpers$1.toDegrees(v);r.textAlign=o(y),l(y,e._pointLabelSizes[f],g),s(r,e.pointLabels[f]||"",g,h.size)}}}(e)}}});core_scaleService.registerScaleType("radialLinear",c,r)},moment=createCommonjsModule(function(e,t){e.exports=function(){var t,r;function n(){return t.apply(null,arguments)}function i(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function a(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function o(e){return void 0===e}function s(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function l(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function u(e,t){var r,n=[];for(r=0;r<e.length;++r)n.push(t(e[r],r));return n}function c(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function d(e,t){for(var r in t)c(t,r)&&(e[r]=t[r]);return c(t,"toString")&&(e.toString=t.toString),c(t,"valueOf")&&(e.valueOf=t.valueOf),e}function h(e,t,r,n){return Mt(e,t,r,n,!0).utc()}function f(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function p(e){if(null==e._isValid){var t=f(e),n=r.call(t.parsedDateParts,function(e){return null!=e}),i=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n);if(e._strict&&(i=i&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return i;e._isValid=i}return e._isValid}function g(e){var t=h(NaN);return null!=e?d(f(t),e):f(t).userInvalidated=!0,t}r=Array.prototype.some?Array.prototype.some:function(e){for(var t=Object(this),r=t.length>>>0,n=0;n<r;n++)if(n in t&&e.call(this,t[n],n,t))return!0;return!1};var m=n.momentProperties=[];function v(e,t){var r,n,i;if(o(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),o(t._i)||(e._i=t._i),o(t._f)||(e._f=t._f),o(t._l)||(e._l=t._l),o(t._strict)||(e._strict=t._strict),o(t._tzm)||(e._tzm=t._tzm),o(t._isUTC)||(e._isUTC=t._isUTC),o(t._offset)||(e._offset=t._offset),o(t._pf)||(e._pf=f(t)),o(t._locale)||(e._locale=t._locale),m.length>0)for(r=0;r<m.length;r++)n=m[r],o(i=t[n])||(e[n]=i);return e}var y=!1;function b(e){v(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===y&&(y=!0,n.updateOffset(this),y=!1)}function _(e){return e instanceof b||null!=e&&null!=e._isAMomentObject}function w(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function x(e){var t=+e,r=0;return 0!==t&&isFinite(t)&&(r=w(t)),r}function S(e,t,r){var n,i=Math.min(e.length,t.length),a=Math.abs(e.length-t.length),o=0;for(n=0;n<i;n++)(r&&e[n]!==t[n]||!r&&x(e[n])!==x(t[n]))&&o++;return o+a}function k(e){!1===n.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function $(e,t){var r=!0;return d(function(){var i=arguments;if(null!=n.deprecationHandler&&n.deprecationHandler(null,e),r){for(var a,o=[],s=0;s<arguments.length;s++){if(a="","object"===_typeof(i[s])){for(var l in a+="\n["+s+"] ",arguments[0])a+=l+": "+i[0][l]+", ";a=a.slice(0,-2)}else a=i[s];o.push(a)}k(e+"\nArguments: "+Array.prototype.slice.call(o).join("")+"\n"+(new Error).stack),r=!1}return t.apply(this,arguments)},t)}var C,T={};function A(e,t){null!=n.deprecationHandler&&n.deprecationHandler(e,t),T[e]||(k(t),T[e]=!0)}function M(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function O(e,t){var r,n=d({},e);for(r in t)c(t,r)&&(a(e[r])&&a(t[r])?(n[r]={},d(n[r],e[r]),d(n[r],t[r])):null!=t[r]?n[r]=t[r]:delete n[r]);for(r in e)c(e,r)&&!c(t,r)&&a(e[r])&&(n[r]=d({},n[r]));return n}function D(e){null!=e&&this.set(e)}n.suppressDeprecationWarnings=!1,n.deprecationHandler=null,C=Object.keys?Object.keys:function(e){var t,r=[];for(t in e)c(e,t)&&r.push(t);return r};var E={};function P(e,t){var r=e.toLowerCase();E[r]=E[r+"s"]=E[t]=e}function R(e){return"string"==typeof e?E[e]||E[e.toLowerCase()]:void 0}function I(e){var t,r,n={};for(r in e)c(e,r)&&(t=R(r))&&(n[t]=e[r]);return n}var N={};function L(e,t){N[e]=t}function F(e,t,r){var n=""+Math.abs(e),i=t-n.length,a=e>=0;return(a?r?"+":"":"-")+Math.pow(10,Math.max(0,i)).toString().substr(1)+n}var j=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,B=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,U={},H={};function z(e,t,r,n){var i=n;"string"==typeof n&&(i=function(){return this[n]()}),e&&(H[e]=i),t&&(H[t[0]]=function(){return F(i.apply(this,arguments),t[1],t[2])}),r&&(H[r]=function(){return this.localeData().ordinal(i.apply(this,arguments),e)})}function V(e,t){return e.isValid()?(t=W(t,e.localeData()),U[t]=U[t]||function(e){var t,r,n,i=e.match(j);for(t=0,r=i.length;t<r;t++)H[i[t]]?i[t]=H[i[t]]:i[t]=(n=i[t]).match(/\[[\s\S]/)?n.replace(/^\[|\]$/g,""):n.replace(/\\/g,"");return function(t){var n,a="";for(n=0;n<r;n++)a+=M(i[n])?i[n].call(t,e):i[n];return a}}(t),U[t](e)):e.localeData().invalidDate()}function W(e,t){var r=5;function n(e){return t.longDateFormat(e)||e}for(B.lastIndex=0;r>=0&&B.test(e);)e=e.replace(B,n),B.lastIndex=0,r-=1;return e}var Y=/\d/,q=/\d\d/,G=/\d{3}/,K=/\d{4}/,X=/[+-]?\d{6}/,J=/\d\d?/,Z=/\d\d\d\d?/,Q=/\d\d\d\d\d\d?/,ee=/\d{1,3}/,te=/\d{1,4}/,re=/[+-]?\d{1,6}/,ne=/\d+/,ie=/[+-]?\d+/,ae=/Z|[+-]\d\d:?\d\d/gi,oe=/Z|[+-]\d\d(?::?\d\d)?/gi,se=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,le={};function ue(e,t,r){le[e]=M(t)?t:function(e,n){return e&&r?r:t}}function ce(e,t){return c(le,e)?le[e](t._strict,t._locale):new RegExp(de(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(e,t,r,n,i){return t||r||n||i})))}function de(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}var he={};function fe(e,t){var r,n=t;for("string"==typeof e&&(e=[e]),s(t)&&(n=function(e,r){r[t]=x(e)}),r=0;r<e.length;r++)he[e[r]]=n}function pe(e,t){fe(e,function(e,r,n,i){n._w=n._w||{},t(e,n._w,n,i)})}function ge(e,t,r){null!=t&&c(he,e)&&he[e](t,r._a,r,e)}var me=0,ve=1,ye=2,be=3,_e=4,we=5,xe=6,Se=7,ke=8;function $e(e){return Ce(e)?366:365}function Ce(e){return e%4==0&&e%100!=0||e%400==0}z("Y",0,0,function(){var e=this.year();return e<=9999?""+e:"+"+e}),z(0,["YY",2],0,function(){return this.year()%100}),z(0,["YYYY",4],0,"year"),z(0,["YYYYY",5],0,"year"),z(0,["YYYYYY",6,!0],0,"year"),P("year","y"),L("year",1),ue("Y",ie),ue("YY",J,q),ue("YYYY",te,K),ue("YYYYY",re,X),ue("YYYYYY",re,X),fe(["YYYYY","YYYYYY"],me),fe("YYYY",function(e,t){t[me]=2===e.length?n.parseTwoDigitYear(e):x(e)}),fe("YY",function(e,t){t[me]=n.parseTwoDigitYear(e)}),fe("Y",function(e,t){t[me]=parseInt(e,10)}),n.parseTwoDigitYear=function(e){return x(e)+(x(e)>68?1900:2e3)};var Te,Ae=Me("FullYear",!0);function Me(e,t){return function(r){return null!=r?(De(this,e,r),n.updateOffset(this,t),this):Oe(this,e)}}function Oe(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function De(e,t,r){e.isValid()&&!isNaN(r)&&("FullYear"===t&&Ce(e.year())&&1===e.month()&&29===e.date()?e._d["set"+(e._isUTC?"UTC":"")+t](r,e.month(),Ee(r,e.month())):e._d["set"+(e._isUTC?"UTC":"")+t](r))}function Ee(e,t){if(isNaN(e)||isNaN(t))return NaN;var r,n=(t%(r=12)+r)%r;return e+=(t-n)/12,1===n?Ce(e)?29:28:31-n%7%2}Te=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},z("M",["MM",2],"Mo",function(){return this.month()+1}),z("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)}),z("MMMM",0,0,function(e){return this.localeData().months(this,e)}),P("month","M"),L("month",8),ue("M",J),ue("MM",J,q),ue("MMM",function(e,t){return t.monthsShortRegex(e)}),ue("MMMM",function(e,t){return t.monthsRegex(e)}),fe(["M","MM"],function(e,t){t[ve]=x(e)-1}),fe(["MMM","MMMM"],function(e,t,r,n){var i=r._locale.monthsParse(e,n,r._strict);null!=i?t[ve]=i:f(r).invalidMonth=e});var Pe=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,Re="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Ie="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");function Ne(e,t){var r;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=x(t);else if(!s(t=e.localeData().monthsParse(t)))return e;return r=Math.min(e.date(),Ee(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,r),e}function Le(e){return null!=e?(Ne(this,e),n.updateOffset(this,!0),this):Oe(this,"Month")}var Fe=se,je=se;function Be(){function e(e,t){return t.length-e.length}var t,r,n=[],i=[],a=[];for(t=0;t<12;t++)r=h([2e3,t]),n.push(this.monthsShort(r,"")),i.push(this.months(r,"")),a.push(this.months(r,"")),a.push(this.monthsShort(r,""));for(n.sort(e),i.sort(e),a.sort(e),t=0;t<12;t++)n[t]=de(n[t]),i[t]=de(i[t]);for(t=0;t<24;t++)a[t]=de(a[t]);this._monthsRegex=new RegExp("^("+a.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+i.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+n.join("|")+")","i")}function Ue(e){var t;if(e<100&&e>=0){var r=Array.prototype.slice.call(arguments);r[0]=e+400,t=new Date(Date.UTC.apply(null,r)),isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e)}else t=new Date(Date.UTC.apply(null,arguments));return t}function He(e,t,r){var n=7+t-r,i=(7+Ue(e,0,n).getUTCDay()-t)%7;return-i+n-1}function ze(e,t,r,n,i){var a,o,s=(7+r-n)%7,l=He(e,n,i),u=1+7*(t-1)+s+l;return u<=0?o=$e(a=e-1)+u:u>$e(e)?(a=e+1,o=u-$e(e)):(a=e,o=u),{year:a,dayOfYear:o}}function Ve(e,t,r){var n,i,a=He(e.year(),t,r),o=Math.floor((e.dayOfYear()-a-1)/7)+1;return o<1?(i=e.year()-1,n=o+We(i,t,r)):o>We(e.year(),t,r)?(n=o-We(e.year(),t,r),i=e.year()+1):(i=e.year(),n=o),{week:n,year:i}}function We(e,t,r){var n=He(e,t,r),i=He(e+1,t,r);return($e(e)-n+i)/7}function Ye(e,t){return e.slice(t,7).concat(e.slice(0,t))}z("w",["ww",2],"wo","week"),z("W",["WW",2],"Wo","isoWeek"),P("week","w"),P("isoWeek","W"),L("week",5),L("isoWeek",5),ue("w",J),ue("ww",J,q),ue("W",J),ue("WW",J,q),pe(["w","ww","W","WW"],function(e,t,r,n){t[n.substr(0,1)]=x(e)}),z("d",0,"do","day"),z("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)}),z("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)}),z("dddd",0,0,function(e){return this.localeData().weekdays(this,e)}),z("e",0,0,"weekday"),z("E",0,0,"isoWeekday"),P("day","d"),P("weekday","e"),P("isoWeekday","E"),L("day",11),L("weekday",11),L("isoWeekday",11),ue("d",J),ue("e",J),ue("E",J),ue("dd",function(e,t){return t.weekdaysMinRegex(e)}),ue("ddd",function(e,t){return t.weekdaysShortRegex(e)}),ue("dddd",function(e,t){return t.weekdaysRegex(e)}),pe(["dd","ddd","dddd"],function(e,t,r,n){var i=r._locale.weekdaysParse(e,n,r._strict);null!=i?t.d=i:f(r).invalidWeekday=e}),pe(["d","e","E"],function(e,t,r,n){t[n]=x(e)});var qe="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Ge="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Ke="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),Xe=se,Je=se,Ze=se;function Qe(){function e(e,t){return t.length-e.length}var t,r,n,i,a,o=[],s=[],l=[],u=[];for(t=0;t<7;t++)r=h([2e3,1]).day(t),n=this.weekdaysMin(r,""),i=this.weekdaysShort(r,""),a=this.weekdays(r,""),o.push(n),s.push(i),l.push(a),u.push(n),u.push(i),u.push(a);for(o.sort(e),s.sort(e),l.sort(e),u.sort(e),t=0;t<7;t++)s[t]=de(s[t]),l[t]=de(l[t]),u[t]=de(u[t]);this._weekdaysRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+s.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+o.join("|")+")","i")}function et(){return this.hours()%12||12}function tt(e,t){z(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}function rt(e,t){return t._meridiemParse}z("H",["HH",2],0,"hour"),z("h",["hh",2],0,et),z("k",["kk",2],0,function(){return this.hours()||24}),z("hmm",0,0,function(){return""+et.apply(this)+F(this.minutes(),2)}),z("hmmss",0,0,function(){return""+et.apply(this)+F(this.minutes(),2)+F(this.seconds(),2)}),z("Hmm",0,0,function(){return""+this.hours()+F(this.minutes(),2)}),z("Hmmss",0,0,function(){return""+this.hours()+F(this.minutes(),2)+F(this.seconds(),2)}),tt("a",!0),tt("A",!1),P("hour","h"),L("hour",13),ue("a",rt),ue("A",rt),ue("H",J),ue("h",J),ue("k",J),ue("HH",J,q),ue("hh",J,q),ue("kk",J,q),ue("hmm",Z),ue("hmmss",Q),ue("Hmm",Z),ue("Hmmss",Q),fe(["H","HH"],be),fe(["k","kk"],function(e,t,r){var n=x(e);t[be]=24===n?0:n}),fe(["a","A"],function(e,t,r){r._isPm=r._locale.isPM(e),r._meridiem=e}),fe(["h","hh"],function(e,t,r){t[be]=x(e),f(r).bigHour=!0}),fe("hmm",function(e,t,r){var n=e.length-2;t[be]=x(e.substr(0,n)),t[_e]=x(e.substr(n)),f(r).bigHour=!0}),fe("hmmss",function(e,t,r){var n=e.length-4,i=e.length-2;t[be]=x(e.substr(0,n)),t[_e]=x(e.substr(n,2)),t[we]=x(e.substr(i)),f(r).bigHour=!0}),fe("Hmm",function(e,t,r){var n=e.length-2;t[be]=x(e.substr(0,n)),t[_e]=x(e.substr(n))}),fe("Hmmss",function(e,t,r){var n=e.length-4,i=e.length-2;t[be]=x(e.substr(0,n)),t[_e]=x(e.substr(n,2)),t[we]=x(e.substr(i))});var nt,it=Me("Hours",!0),at={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:Re,monthsShort:Ie,week:{dow:0,doy:6},weekdays:qe,weekdaysMin:Ke,weekdaysShort:Ge,meridiemParse:/[ap]\.?m?\.?/i},ot={},st={};function lt(e){return e?e.toLowerCase().replace("_","-"):e}function ut(t){var r=null;if(!ot[t]&&e&&e.exports)try{r=nt._abbr;var n=commonjsRequire;n("./locale/"+t),ct(r)}catch(e){}return ot[t]}function ct(e,t){var r;return e&&((r=o(t)?ht(e):dt(e,t))?nt=r:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),nt._abbr}function dt(e,t){if(null!==t){var r,n=at;if(t.abbr=e,null!=ot[e])A("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),n=ot[e]._config;else if(null!=t.parentLocale)if(null!=ot[t.parentLocale])n=ot[t.parentLocale]._config;else{if(null==(r=ut(t.parentLocale)))return st[t.parentLocale]||(st[t.parentLocale]=[]),st[t.parentLocale].push({name:e,config:t}),null;n=r._config}return ot[e]=new D(O(n,t)),st[e]&&st[e].forEach(function(e){dt(e.name,e.config)}),ct(e),ot[e]}return delete ot[e],null}function ht(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return nt;if(!i(e)){if(t=ut(e))return t;e=[e]}return function(e){for(var t,r,n,i,a=0;a<e.length;){for(i=lt(e[a]).split("-"),t=i.length,r=(r=lt(e[a+1]))?r.split("-"):null;t>0;){if(n=ut(i.slice(0,t).join("-")))return n;if(r&&r.length>=t&&S(i,r,!0)>=t-1)break;t--}a++}return nt}(e)}function ft(e){var t,r=e._a;return r&&-2===f(e).overflow&&(t=r[ve]<0||r[ve]>11?ve:r[ye]<1||r[ye]>Ee(r[me],r[ve])?ye:r[be]<0||r[be]>24||24===r[be]&&(0!==r[_e]||0!==r[we]||0!==r[xe])?be:r[_e]<0||r[_e]>59?_e:r[we]<0||r[we]>59?we:r[xe]<0||r[xe]>999?xe:-1,f(e)._overflowDayOfYear&&(t<me||t>ye)&&(t=ye),f(e)._overflowWeeks&&-1===t&&(t=Se),f(e)._overflowWeekday&&-1===t&&(t=ke),f(e).overflow=t),e}function pt(e,t,r){return null!=e?e:null!=t?t:r}function gt(e){var t,r,i,a,o,s=[];if(!e._d){for(i=function(e){var t=new Date(n.now());return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}(e),e._w&&null==e._a[ye]&&null==e._a[ve]&&function(e){var t,r,n,i,a,o,s,l;if(null!=(t=e._w).GG||null!=t.W||null!=t.E)a=1,o=4,r=pt(t.GG,e._a[me],Ve(Ot(),1,4).year),n=pt(t.W,1),((i=pt(t.E,1))<1||i>7)&&(l=!0);else{a=e._locale._week.dow,o=e._locale._week.doy;var u=Ve(Ot(),a,o);r=pt(t.gg,e._a[me],u.year),n=pt(t.w,u.week),null!=t.d?((i=t.d)<0||i>6)&&(l=!0):null!=t.e?(i=t.e+a,(t.e<0||t.e>6)&&(l=!0)):i=a}n<1||n>We(r,a,o)?f(e)._overflowWeeks=!0:null!=l?f(e)._overflowWeekday=!0:(s=ze(r,n,i,a,o),e._a[me]=s.year,e._dayOfYear=s.dayOfYear)}(e),null!=e._dayOfYear&&(o=pt(e._a[me],i[me]),(e._dayOfYear>$e(o)||0===e._dayOfYear)&&(f(e)._overflowDayOfYear=!0),r=Ue(o,0,e._dayOfYear),e._a[ve]=r.getUTCMonth(),e._a[ye]=r.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=s[t]=i[t];for(;t<7;t++)e._a[t]=s[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[be]&&0===e._a[_e]&&0===e._a[we]&&0===e._a[xe]&&(e._nextDay=!0,e._a[be]=0),e._d=(e._useUTC?Ue:function(e,t,r,n,i,a,o){var s;return e<100&&e>=0?(s=new Date(e+400,t,r,n,i,a,o),isFinite(s.getFullYear())&&s.setFullYear(e)):s=new Date(e,t,r,n,i,a,o),s}).apply(null,s),a=e._useUTC?e._d.getUTCDay():e._d.getDay(),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[be]=24),e._w&&void 0!==e._w.d&&e._w.d!==a&&(f(e).weekdayMismatch=!0)}}var mt=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,vt=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,yt=/Z|[+-]\d\d(?::?\d\d)?/,bt=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],_t=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],wt=/^\/?Date\((\-?\d+)/i;function xt(e){var t,r,n,i,a,o,s=e._i,l=mt.exec(s)||vt.exec(s);if(l){for(f(e).iso=!0,t=0,r=bt.length;t<r;t++)if(bt[t][1].exec(l[1])){i=bt[t][0],n=!1!==bt[t][2];break}if(null==i)return void(e._isValid=!1);if(l[3]){for(t=0,r=_t.length;t<r;t++)if(_t[t][1].exec(l[3])){a=(l[2]||" ")+_t[t][0];break}if(null==a)return void(e._isValid=!1)}if(!n&&null!=a)return void(e._isValid=!1);if(l[4]){if(!yt.exec(l[4]))return void(e._isValid=!1);o="Z"}e._f=i+(a||"")+(o||""),Tt(e)}else e._isValid=!1}var St=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;function kt(e,t,r,n,i,a){var o=[function(e){var t=parseInt(e,10);return t<=49?2e3+t:t<=999?1900+t:t}(e),Ie.indexOf(t),parseInt(r,10),parseInt(n,10),parseInt(i,10)];return a&&o.push(parseInt(a,10)),o}var $t={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function Ct(e){var t=St.exec(e._i.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(t){var r=kt(t[4],t[3],t[2],t[5],t[6],t[7]);if(!function(e,t,r){if(e){var n=Ge.indexOf(e),i=new Date(t[0],t[1],t[2]).getDay();if(n!==i)return f(r).weekdayMismatch=!0,r._isValid=!1,!1}return!0}(t[1],r,e))return;e._a=r,e._tzm=function(e,t,r){if(e)return $t[e];if(t)return 0;var n=parseInt(r,10),i=n%100,a=(n-i)/100;return 60*a+i}(t[8],t[9],t[10]),e._d=Ue.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),f(e).rfc2822=!0}else e._isValid=!1}function Tt(e){if(e._f!==n.ISO_8601)if(e._f!==n.RFC_2822){e._a=[],f(e).empty=!0;var t,r,i,a,o,s=""+e._i,l=s.length,u=0;for(i=W(e._f,e._locale).match(j)||[],t=0;t<i.length;t++)a=i[t],(r=(s.match(ce(a,e))||[])[0])&&((o=s.substr(0,s.indexOf(r))).length>0&&f(e).unusedInput.push(o),s=s.slice(s.indexOf(r)+r.length),u+=r.length),H[a]?(r?f(e).empty=!1:f(e).unusedTokens.push(a),ge(a,r,e)):e._strict&&!r&&f(e).unusedTokens.push(a);f(e).charsLeftOver=l-u,s.length>0&&f(e).unusedInput.push(s),e._a[be]<=12&&!0===f(e).bigHour&&e._a[be]>0&&(f(e).bigHour=void 0),f(e).parsedDateParts=e._a.slice(0),f(e).meridiem=e._meridiem,e._a[be]=(c=e._locale,d=e._a[be],null==(h=e._meridiem)?d:null!=c.meridiemHour?c.meridiemHour(d,h):null!=c.isPM?((p=c.isPM(h))&&d<12&&(d+=12),p||12!==d||(d=0),d):d),gt(e),ft(e)}else Ct(e);else xt(e);var c,d,h,p}function At(e){var t=e._i,r=e._f;return e._locale=e._locale||ht(e._l),null===t||void 0===r&&""===t?g({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),_(t)?new b(ft(t)):(l(t)?e._d=t:i(r)?function(e){var t,r,n,i,a;if(0===e._f.length)return f(e).invalidFormat=!0,void(e._d=new Date(NaN));for(i=0;i<e._f.length;i++)a=0,t=v({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[i],Tt(t),p(t)&&(a+=f(t).charsLeftOver,a+=10*f(t).unusedTokens.length,f(t).score=a,(null==n||a<n)&&(n=a,r=t));d(e,r||t)}(e):r?Tt(e):function(e){var t=e._i;o(t)?e._d=new Date(n.now()):l(t)?e._d=new Date(t.valueOf()):"string"==typeof t?function(e){var t=wt.exec(e._i);null===t?(xt(e),!1===e._isValid&&(delete e._isValid,Ct(e),!1===e._isValid&&(delete e._isValid,n.createFromInputFallback(e)))):e._d=new Date(+t[1])}(e):i(t)?(e._a=u(t.slice(0),function(e){return parseInt(e,10)}),gt(e)):a(t)?function(e){if(!e._d){var t=I(e._i);e._a=u([t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],function(e){return e&&parseInt(e,10)}),gt(e)}}(e):s(t)?e._d=new Date(t):n.createFromInputFallback(e)}(e),p(e)||(e._d=null),e))}function Mt(e,t,r,n,o){var s,l={};return!0!==r&&!1!==r||(n=r,r=void 0),(a(e)&&function(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(e.hasOwnProperty(t))return!1;return!0}(e)||i(e)&&0===e.length)&&(e=void 0),l._isAMomentObject=!0,l._useUTC=l._isUTC=o,l._l=r,l._i=e,l._f=t,l._strict=n,(s=new b(ft(At(l))))._nextDay&&(s.add(1,"d"),s._nextDay=void 0),s}function Ot(e,t,r,n){return Mt(e,t,r,n,!1)}n.createFromInputFallback=$("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))}),n.ISO_8601=function(){},n.RFC_2822=function(){};var Dt=$("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=Ot.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:g()}),Et=$("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=Ot.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:g()});function Pt(e,t){var r,n;if(1===t.length&&i(t[0])&&(t=t[0]),!t.length)return Ot();for(r=t[0],n=1;n<t.length;++n)t[n].isValid()&&!t[n][e](r)||(r=t[n]);return r}var Rt=["year","quarter","month","week","day","hour","minute","second","millisecond"];function It(e){var t=I(e),r=t.year||0,n=t.quarter||0,i=t.month||0,a=t.week||t.isoWeek||0,o=t.day||0,s=t.hour||0,l=t.minute||0,u=t.second||0,c=t.millisecond||0;this._isValid=function(e){for(var t in e)if(-1===Te.call(Rt,t)||null!=e[t]&&isNaN(e[t]))return!1;for(var r=!1,n=0;n<Rt.length;++n)if(e[Rt[n]]){if(r)return!1;parseFloat(e[Rt[n]])!==x(e[Rt[n]])&&(r=!0)}return!0}(t),this._milliseconds=+c+1e3*u+6e4*l+1e3*s*60*60,this._days=+o+7*a,this._months=+i+3*n+12*r,this._data={},this._locale=ht(),this._bubble()}function Nt(e){return e instanceof It}function Lt(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function Ft(e,t){z(e,0,0,function(){var e=this.utcOffset(),r="+";return e<0&&(e=-e,r="-"),r+F(~~(e/60),2)+t+F(~~e%60,2)})}Ft("Z",":"),Ft("ZZ",""),ue("Z",oe),ue("ZZ",oe),fe(["Z","ZZ"],function(e,t,r){r._useUTC=!0,r._tzm=Bt(oe,e)});var jt=/([\+\-]|\d\d)/gi;function Bt(e,t){var r=(t||"").match(e);if(null===r)return null;var n=r[r.length-1]||[],i=(n+"").match(jt)||["-",0,0],a=60*i[1]+x(i[2]);return 0===a?0:"+"===i[0]?a:-a}function Ut(e,t){var r,i;return t._isUTC?(r=t.clone(),i=(_(e)||l(e)?e.valueOf():Ot(e).valueOf())-r.valueOf(),r._d.setTime(r._d.valueOf()+i),n.updateOffset(r,!1),r):Ot(e).local()}function Ht(e){return 15*-Math.round(e._d.getTimezoneOffset()/15)}function zt(){return!!this.isValid()&&this._isUTC&&0===this._offset}n.updateOffset=function(){};var Vt=/^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,Wt=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function Yt(e,t){var r,n,i,a,o,l,u=e,d=null;return Nt(e)?u={ms:e._milliseconds,d:e._days,M:e._months}:s(e)?(u={},t?u[t]=e:u.milliseconds=e):(d=Vt.exec(e))?(r="-"===d[1]?-1:1,u={y:0,d:x(d[ye])*r,h:x(d[be])*r,m:x(d[_e])*r,s:x(d[we])*r,ms:x(Lt(1e3*d[xe]))*r}):(d=Wt.exec(e))?(r="-"===d[1]?-1:1,u={y:qt(d[2],r),M:qt(d[3],r),w:qt(d[4],r),d:qt(d[5],r),h:qt(d[6],r),m:qt(d[7],r),s:qt(d[8],r)}):null==u?u={}:"object"===(void 0===u?"undefined":_typeof(u))&&("from"in u||"to"in u)&&(a=Ot(u.from),o=Ot(u.to),i=a.isValid()&&o.isValid()?(o=Ut(o,a),a.isBefore(o)?l=Gt(a,o):((l=Gt(o,a)).milliseconds=-l.milliseconds,l.months=-l.months),l):{milliseconds:0,months:0},(u={}).ms=i.milliseconds,u.M=i.months),n=new It(u),Nt(e)&&c(e,"_locale")&&(n._locale=e._locale),n}function qt(e,t){var r=e&&parseFloat(e.replace(",","."));return(isNaN(r)?0:r)*t}function Gt(e,t){var r={};return r.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(r.months,"M").isAfter(t)&&--r.months,r.milliseconds=+t-+e.clone().add(r.months,"M"),r}function Kt(e,t){return function(r,n){var i;return null===n||isNaN(+n)||(A(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),i=r,r=n,n=i),Xt(this,Yt(r="string"==typeof r?+r:r,n),e),this}}function Xt(e,t,r,i){var a=t._milliseconds,o=Lt(t._days),s=Lt(t._months);e.isValid()&&(i=null==i||i,s&&Ne(e,Oe(e,"Month")+s*r),o&&De(e,"Date",Oe(e,"Date")+o*r),a&&e._d.setTime(e._d.valueOf()+a*r),i&&n.updateOffset(e,o||s))}Yt.fn=It.prototype,Yt.invalid=function(){return Yt(NaN)};var Jt=Kt(1,"add"),Zt=Kt(-1,"subtract");function Qt(e,t){var r,n,i=12*(t.year()-e.year())+(t.month()-e.month()),a=e.clone().add(i,"months");return t-a<0?(r=e.clone().add(i-1,"months"),n=(t-a)/(a-r)):(r=e.clone().add(i+1,"months"),n=(t-a)/(r-a)),-(i+n)||0}function er(e){var t;return void 0===e?this._locale._abbr:(null!=(t=ht(e))&&(this._locale=t),this)}n.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",n.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var tr=$("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return void 0===e?this.localeData():this.locale(e)});function rr(){return this._locale}var nr=1e3,ir=60*nr,ar=60*ir,or=3506328*ar;function sr(e,t){return(e%t+t)%t}function lr(e,t,r){return e<100&&e>=0?new Date(e+400,t,r)-or:new Date(e,t,r).valueOf()}function ur(e,t,r){return e<100&&e>=0?Date.UTC(e+400,t,r)-or:Date.UTC(e,t,r)}function cr(e,t){z(0,[e,e.length],0,t)}function dr(e,t,r,n,i){var a;return null==e?Ve(this,n,i).year:(a=We(e,n,i),t>a&&(t=a),function(e,t,r,n,i){var a=ze(e,t,r,n,i),o=Ue(a.year,0,a.dayOfYear);return this.year(o.getUTCFullYear()),this.month(o.getUTCMonth()),this.date(o.getUTCDate()),this}.call(this,e,t,r,n,i))}z(0,["gg",2],0,function(){return this.weekYear()%100}),z(0,["GG",2],0,function(){return this.isoWeekYear()%100}),cr("gggg","weekYear"),cr("ggggg","weekYear"),cr("GGGG","isoWeekYear"),cr("GGGGG","isoWeekYear"),P("weekYear","gg"),P("isoWeekYear","GG"),L("weekYear",1),L("isoWeekYear",1),ue("G",ie),ue("g",ie),ue("GG",J,q),ue("gg",J,q),ue("GGGG",te,K),ue("gggg",te,K),ue("GGGGG",re,X),ue("ggggg",re,X),pe(["gggg","ggggg","GGGG","GGGGG"],function(e,t,r,n){t[n.substr(0,2)]=x(e)}),pe(["gg","GG"],function(e,t,r,i){t[i]=n.parseTwoDigitYear(e)}),z("Q",0,"Qo","quarter"),P("quarter","Q"),L("quarter",7),ue("Q",Y),fe("Q",function(e,t){t[ve]=3*(x(e)-1)}),z("D",["DD",2],"Do","date"),P("date","D"),L("date",9),ue("D",J),ue("DD",J,q),ue("Do",function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient}),fe(["D","DD"],ye),fe("Do",function(e,t){t[ye]=x(e.match(J)[0])});var hr=Me("Date",!0);z("DDD",["DDDD",3],"DDDo","dayOfYear"),P("dayOfYear","DDD"),L("dayOfYear",4),ue("DDD",ee),ue("DDDD",G),fe(["DDD","DDDD"],function(e,t,r){r._dayOfYear=x(e)}),z("m",["mm",2],0,"minute"),P("minute","m"),L("minute",14),ue("m",J),ue("mm",J,q),fe(["m","mm"],_e);var fr=Me("Minutes",!1);z("s",["ss",2],0,"second"),P("second","s"),L("second",15),ue("s",J),ue("ss",J,q),fe(["s","ss"],we);var pr,gr=Me("Seconds",!1);for(z("S",0,0,function(){return~~(this.millisecond()/100)}),z(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),z(0,["SSS",3],0,"millisecond"),z(0,["SSSS",4],0,function(){return 10*this.millisecond()}),z(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),z(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),z(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),z(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),z(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),P("millisecond","ms"),L("millisecond",16),ue("S",ee,Y),ue("SS",ee,q),ue("SSS",ee,G),pr="SSSS";pr.length<=9;pr+="S")ue(pr,ne);function mr(e,t){t[xe]=x(1e3*("0."+e))}for(pr="S";pr.length<=9;pr+="S")fe(pr,mr);var vr=Me("Milliseconds",!1);z("z",0,0,"zoneAbbr"),z("zz",0,0,"zoneName");var yr=b.prototype;function br(e){return e}yr.add=Jt,yr.calendar=function(e,t){var r=e||Ot(),i=Ut(r,this).startOf("day"),a=n.calendarFormat(this,i)||"sameElse",o=t&&(M(t[a])?t[a].call(this,r):t[a]);return this.format(o||this.localeData().calendar(a,this,Ot(r)))},yr.clone=function(){return new b(this)},yr.diff=function(e,t,r){var n,i,a;if(!this.isValid())return NaN;if(!(n=Ut(e,this)).isValid())return NaN;switch(i=6e4*(n.utcOffset()-this.utcOffset()),t=R(t)){case"year":a=Qt(this,n)/12;break;case"month":a=Qt(this,n);break;case"quarter":a=Qt(this,n)/3;break;case"second":a=(this-n)/1e3;break;case"minute":a=(this-n)/6e4;break;case"hour":a=(this-n)/36e5;break;case"day":a=(this-n-i)/864e5;break;case"week":a=(this-n-i)/6048e5;break;default:a=this-n}return r?a:w(a)},yr.endOf=function(e){var t;if(void 0===(e=R(e))||"millisecond"===e||!this.isValid())return this;var r=this._isUTC?ur:lr;switch(e){case"year":t=r(this.year()+1,0,1)-1;break;case"quarter":t=r(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":t=r(this.year(),this.month()+1,1)-1;break;case"week":t=r(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":t=r(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":t=r(this.year(),this.month(),this.date()+1)-1;break;case"hour":t=this._d.valueOf(),t+=ar-sr(t+(this._isUTC?0:this.utcOffset()*ir),ar)-1;break;case"minute":t=this._d.valueOf(),t+=ir-sr(t,ir)-1;break;case"second":t=this._d.valueOf(),t+=nr-sr(t,nr)-1}return this._d.setTime(t),n.updateOffset(this,!0),this},yr.format=function(e){e||(e=this.isUtc()?n.defaultFormatUtc:n.defaultFormat);var t=V(this,e);return this.localeData().postformat(t)},yr.from=function(e,t){return this.isValid()&&(_(e)&&e.isValid()||Ot(e).isValid())?Yt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},yr.fromNow=function(e){return this.from(Ot(),e)},yr.to=function(e,t){return this.isValid()&&(_(e)&&e.isValid()||Ot(e).isValid())?Yt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},yr.toNow=function(e){return this.to(Ot(),e)},yr.get=function(e){return M(this[e=R(e)])?this[e]():this},yr.invalidAt=function(){return f(this).overflow},yr.isAfter=function(e,t){var r=_(e)?e:Ot(e);return!(!this.isValid()||!r.isValid())&&("millisecond"===(t=R(t)||"millisecond")?this.valueOf()>r.valueOf():r.valueOf()<this.clone().startOf(t).valueOf())},yr.isBefore=function(e,t){var r=_(e)?e:Ot(e);return!(!this.isValid()||!r.isValid())&&("millisecond"===(t=R(t)||"millisecond")?this.valueOf()<r.valueOf():this.clone().endOf(t).valueOf()<r.valueOf())},yr.isBetween=function(e,t,r,n){var i=_(e)?e:Ot(e),a=_(t)?t:Ot(t);return!!(this.isValid()&&i.isValid()&&a.isValid())&&(("("===(n=n||"()")[0]?this.isAfter(i,r):!this.isBefore(i,r))&&(")"===n[1]?this.isBefore(a,r):!this.isAfter(a,r)))},yr.isSame=function(e,t){var r,n=_(e)?e:Ot(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=R(t)||"millisecond")?this.valueOf()===n.valueOf():(r=n.valueOf(),this.clone().startOf(t).valueOf()<=r&&r<=this.clone().endOf(t).valueOf()))},yr.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},yr.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},yr.isValid=function(){return p(this)},yr.lang=tr,yr.locale=er,yr.localeData=rr,yr.max=Et,yr.min=Dt,yr.parsingFlags=function(){return d({},f(this))},yr.set=function(e,t){if("object"===(void 0===e?"undefined":_typeof(e)))for(var r=function(e){var t=[];for(var r in e)t.push({unit:r,priority:N[r]});return t.sort(function(e,t){return e.priority-t.priority}),t}(e=I(e)),n=0;n<r.length;n++)this[r[n].unit](e[r[n].unit]);else if(M(this[e=R(e)]))return this[e](t);return this},yr.startOf=function(e){var t;if(void 0===(e=R(e))||"millisecond"===e||!this.isValid())return this;var r=this._isUTC?ur:lr;switch(e){case"year":t=r(this.year(),0,1);break;case"quarter":t=r(this.year(),this.month()-this.month()%3,1);break;case"month":t=r(this.year(),this.month(),1);break;case"week":t=r(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":t=r(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":t=r(this.year(),this.month(),this.date());break;case"hour":t=this._d.valueOf(),t-=sr(t+(this._isUTC?0:this.utcOffset()*ir),ar);break;case"minute":t=this._d.valueOf(),t-=sr(t,ir);break;case"second":t=this._d.valueOf(),t-=sr(t,nr)}return this._d.setTime(t),n.updateOffset(this,!0),this},yr.subtract=Zt,yr.toArray=function(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]},yr.toObject=function(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}},yr.toDate=function(){return new Date(this.valueOf())},yr.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,r=t?this.clone().utc():this;return r.year()<0||r.year()>9999?V(r,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):M(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",V(r,"Z")):V(r,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},yr.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e="moment",t="";this.isLocal()||(e=0===this.utcOffset()?"moment.utc":"moment.parseZone",t="Z");var r="["+e+'("]',n=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",i=t+'[")]';return this.format(r+n+"-MM-DD[T]HH:mm:ss.SSS"+i)},yr.toJSON=function(){return this.isValid()?this.toISOString():null},yr.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},yr.unix=function(){return Math.floor(this.valueOf()/1e3)},yr.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},yr.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},yr.year=Ae,yr.isLeapYear=function(){return Ce(this.year())},yr.weekYear=function(e){return dr.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},yr.isoWeekYear=function(e){return dr.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},yr.quarter=yr.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},yr.month=Le,yr.daysInMonth=function(){return Ee(this.year(),this.month())},yr.week=yr.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},yr.isoWeek=yr.isoWeeks=function(e){var t=Ve(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},yr.weeksInYear=function(){var e=this.localeData()._week;return We(this.year(),e.dow,e.doy)},yr.isoWeeksInYear=function(){return We(this.year(),1,4)},yr.date=hr,yr.day=yr.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=function(e,t){return"string"!=typeof e?e:isNaN(e)?"number"==typeof(e=t.weekdaysParse(e))?e:null:parseInt(e,10)}(e,this.localeData()),this.add(e-t,"d")):t},yr.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},yr.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=function(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7},yr.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},yr.hour=yr.hours=it,yr.minute=yr.minutes=fr,yr.second=yr.seconds=gr,yr.millisecond=yr.milliseconds=vr,yr.utcOffset=function(e,t,r){var i,a=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"==typeof e){if(null===(e=Bt(oe,e)))return this}else Math.abs(e)<16&&!r&&(e*=60);return!this._isUTC&&t&&(i=Ht(this)),this._offset=e,this._isUTC=!0,null!=i&&this.add(i,"m"),a!==e&&(!t||this._changeInProgress?Xt(this,Yt(e-a,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,n.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?a:Ht(this)},yr.utc=function(e){return this.utcOffset(0,e)},yr.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Ht(this),"m")),this},yr.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=Bt(ae,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},yr.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?Ot(e).utcOffset():0,(this.utcOffset()-e)%60==0)},yr.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},yr.isLocal=function(){return!!this.isValid()&&!this._isUTC},yr.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},yr.isUtc=zt,yr.isUTC=zt,yr.zoneAbbr=function(){return this._isUTC?"UTC":""},yr.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},yr.dates=$("dates accessor is deprecated. Use date instead.",hr),yr.months=$("months accessor is deprecated. Use month instead",Le),yr.years=$("years accessor is deprecated. Use year instead",Ae),yr.zone=$("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()}),yr.isDSTShifted=$("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",function(){if(!o(this._isDSTShifted))return this._isDSTShifted;var e={};if(v(e,this),(e=At(e))._a){var t=e._isUTC?h(e._a):Ot(e._a);this._isDSTShifted=this.isValid()&&S(e._a,t.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted});var _r=D.prototype;function wr(e,t,r,n){var i=ht(),a=h().set(n,t);return i[r](a,e)}function xr(e,t,r){if(s(e)&&(t=e,e=void 0),e=e||"",null!=t)return wr(e,t,r,"month");var n,i=[];for(n=0;n<12;n++)i[n]=wr(e,n,r,"month");return i}function Sr(e,t,r,n){"boolean"==typeof e?(s(t)&&(r=t,t=void 0),t=t||""):(r=t=e,e=!1,s(t)&&(r=t,t=void 0),t=t||"");var i,a=ht(),o=e?a._week.dow:0;if(null!=r)return wr(t,(r+o)%7,n,"day");var l=[];for(i=0;i<7;i++)l[i]=wr(t,(i+o)%7,n,"day");return l}_r.calendar=function(e,t,r){var n=this._calendar[e]||this._calendar.sameElse;return M(n)?n.call(t,r):n},_r.longDateFormat=function(e){var t=this._longDateFormat[e],r=this._longDateFormat[e.toUpperCase()];return t||!r?t:(this._longDateFormat[e]=r.replace(/MMMM|MM|DD|dddd/g,function(e){return e.slice(1)}),this._longDateFormat[e])},_r.invalidDate=function(){return this._invalidDate},_r.ordinal=function(e){return this._ordinal.replace("%d",e)},_r.preparse=br,_r.postformat=br,_r.relativeTime=function(e,t,r,n){var i=this._relativeTime[r];return M(i)?i(e,t,r,n):i.replace(/%d/i,e)},_r.pastFuture=function(e,t){var r=this._relativeTime[e>0?"future":"past"];return M(r)?r(t):r.replace(/%s/i,t)},_r.set=function(e){var t,r;for(r in e)M(t=e[r])?this[r]=t:this["_"+r]=t;this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},_r.months=function(e,t){return e?i(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||Pe).test(t)?"format":"standalone"][e.month()]:i(this._months)?this._months:this._months.standalone},_r.monthsShort=function(e,t){return e?i(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[Pe.test(t)?"format":"standalone"][e.month()]:i(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},_r.monthsParse=function(e,t,r){var n,i,a;if(this._monthsParseExact)return function(e,t,r){var n,i,a,o=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],n=0;n<12;++n)a=h([2e3,n]),this._shortMonthsParse[n]=this.monthsShort(a,"").toLocaleLowerCase(),this._longMonthsParse[n]=this.months(a,"").toLocaleLowerCase();return r?"MMM"===t?-1!==(i=Te.call(this._shortMonthsParse,o))?i:null:-1!==(i=Te.call(this._longMonthsParse,o))?i:null:"MMM"===t?-1!==(i=Te.call(this._shortMonthsParse,o))?i:-1!==(i=Te.call(this._longMonthsParse,o))?i:null:-1!==(i=Te.call(this._longMonthsParse,o))?i:-1!==(i=Te.call(this._shortMonthsParse,o))?i:null}.call(this,e,t,r);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),n=0;n<12;n++){if(i=h([2e3,n]),r&&!this._longMonthsParse[n]&&(this._longMonthsParse[n]=new RegExp("^"+this.months(i,"").replace(".","")+"$","i"),this._shortMonthsParse[n]=new RegExp("^"+this.monthsShort(i,"").replace(".","")+"$","i")),r||this._monthsParse[n]||(a="^"+this.months(i,"")+"|^"+this.monthsShort(i,""),this._monthsParse[n]=new RegExp(a.replace(".",""),"i")),r&&"MMMM"===t&&this._longMonthsParse[n].test(e))return n;if(r&&"MMM"===t&&this._shortMonthsParse[n].test(e))return n;if(!r&&this._monthsParse[n].test(e))return n}},_r.monthsRegex=function(e){return this._monthsParseExact?(c(this,"_monthsRegex")||Be.call(this),e?this._monthsStrictRegex:this._monthsRegex):(c(this,"_monthsRegex")||(this._monthsRegex=je),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},_r.monthsShortRegex=function(e){return this._monthsParseExact?(c(this,"_monthsRegex")||Be.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(c(this,"_monthsShortRegex")||(this._monthsShortRegex=Fe),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},_r.week=function(e){return Ve(e,this._week.dow,this._week.doy).week},_r.firstDayOfYear=function(){return this._week.doy},_r.firstDayOfWeek=function(){return this._week.dow},_r.weekdays=function(e,t){var r=i(this._weekdays)?this._weekdays:this._weekdays[e&&!0!==e&&this._weekdays.isFormat.test(t)?"format":"standalone"];return!0===e?Ye(r,this._week.dow):e?r[e.day()]:r},_r.weekdaysMin=function(e){return!0===e?Ye(this._weekdaysMin,this._week.dow):e?this._weekdaysMin[e.day()]:this._weekdaysMin},_r.weekdaysShort=function(e){return!0===e?Ye(this._weekdaysShort,this._week.dow):e?this._weekdaysShort[e.day()]:this._weekdaysShort},_r.weekdaysParse=function(e,t,r){var n,i,a;if(this._weekdaysParseExact)return function(e,t,r){var n,i,a,o=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],n=0;n<7;++n)a=h([2e3,1]).day(n),this._minWeekdaysParse[n]=this.weekdaysMin(a,"").toLocaleLowerCase(),this._shortWeekdaysParse[n]=this.weekdaysShort(a,"").toLocaleLowerCase(),this._weekdaysParse[n]=this.weekdays(a,"").toLocaleLowerCase();return r?"dddd"===t?-1!==(i=Te.call(this._weekdaysParse,o))?i:null:"ddd"===t?-1!==(i=Te.call(this._shortWeekdaysParse,o))?i:null:-1!==(i=Te.call(this._minWeekdaysParse,o))?i:null:"dddd"===t?-1!==(i=Te.call(this._weekdaysParse,o))?i:-1!==(i=Te.call(this._shortWeekdaysParse,o))?i:-1!==(i=Te.call(this._minWeekdaysParse,o))?i:null:"ddd"===t?-1!==(i=Te.call(this._shortWeekdaysParse,o))?i:-1!==(i=Te.call(this._weekdaysParse,o))?i:-1!==(i=Te.call(this._minWeekdaysParse,o))?i:null:-1!==(i=Te.call(this._minWeekdaysParse,o))?i:-1!==(i=Te.call(this._weekdaysParse,o))?i:-1!==(i=Te.call(this._shortWeekdaysParse,o))?i:null}.call(this,e,t,r);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),n=0;n<7;n++){if(i=h([2e3,1]).day(n),r&&!this._fullWeekdaysParse[n]&&(this._fullWeekdaysParse[n]=new RegExp("^"+this.weekdays(i,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[n]=new RegExp("^"+this.weekdaysShort(i,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[n]=new RegExp("^"+this.weekdaysMin(i,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[n]||(a="^"+this.weekdays(i,"")+"|^"+this.weekdaysShort(i,"")+"|^"+this.weekdaysMin(i,""),this._weekdaysParse[n]=new RegExp(a.replace(".",""),"i")),r&&"dddd"===t&&this._fullWeekdaysParse[n].test(e))return n;if(r&&"ddd"===t&&this._shortWeekdaysParse[n].test(e))return n;if(r&&"dd"===t&&this._minWeekdaysParse[n].test(e))return n;if(!r&&this._weekdaysParse[n].test(e))return n}},_r.weekdaysRegex=function(e){return this._weekdaysParseExact?(c(this,"_weekdaysRegex")||Qe.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(c(this,"_weekdaysRegex")||(this._weekdaysRegex=Xe),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},_r.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(c(this,"_weekdaysRegex")||Qe.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(c(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Je),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},_r.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(c(this,"_weekdaysRegex")||Qe.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(c(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Ze),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},_r.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},_r.meridiem=function(e,t,r){return e>11?r?"pm":"PM":r?"am":"AM"},ct("en",{dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10,r=1===x(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+r}}),n.lang=$("moment.lang is deprecated. Use moment.locale instead.",ct),n.langData=$("moment.langData is deprecated. Use moment.localeData instead.",ht);var kr=Math.abs;function $r(e,t,r,n){var i=Yt(t,r);return e._milliseconds+=n*i._milliseconds,e._days+=n*i._days,e._months+=n*i._months,e._bubble()}function Cr(e){return e<0?Math.floor(e):Math.ceil(e)}function Tr(e){return 4800*e/146097}function Ar(e){return 146097*e/4800}function Mr(e){return function(){return this.as(e)}}var Or=Mr("ms"),Dr=Mr("s"),Er=Mr("m"),Pr=Mr("h"),Rr=Mr("d"),Ir=Mr("w"),Nr=Mr("M"),Lr=Mr("Q"),Fr=Mr("y");function jr(e){return function(){return this.isValid()?this._data[e]:NaN}}var Br=jr("milliseconds"),Ur=jr("seconds"),Hr=jr("minutes"),zr=jr("hours"),Vr=jr("days"),Wr=jr("months"),Yr=jr("years"),qr=Math.round,Gr={ss:44,s:45,m:45,h:22,d:26,M:11},Kr=Math.abs;function Xr(e){return(e>0)-(e<0)||+e}function Jr(){if(!this.isValid())return this.localeData().invalidDate();var e,t,r=Kr(this._milliseconds)/1e3,n=Kr(this._days),i=Kr(this._months);e=w(r/60),t=w(e/60),r%=60,e%=60;var a=w(i/12),o=i%=12,s=n,l=t,u=e,c=r?r.toFixed(3).replace(/\.?0+$/,""):"",d=this.asSeconds();if(!d)return"P0D";var h=d<0?"-":"",f=Xr(this._months)!==Xr(d)?"-":"",p=Xr(this._days)!==Xr(d)?"-":"",g=Xr(this._milliseconds)!==Xr(d)?"-":"";return h+"P"+(a?f+a+"Y":"")+(o?f+o+"M":"")+(s?p+s+"D":"")+(l||u||c?"T":"")+(l?g+l+"H":"")+(u?g+u+"M":"")+(c?g+c+"S":"")}var Zr=It.prototype;return Zr.isValid=function(){return this._isValid},Zr.abs=function(){var e=this._data;return this._milliseconds=kr(this._milliseconds),this._days=kr(this._days),this._months=kr(this._months),e.milliseconds=kr(e.milliseconds),e.seconds=kr(e.seconds),e.minutes=kr(e.minutes),e.hours=kr(e.hours),e.months=kr(e.months),e.years=kr(e.years),this},Zr.add=function(e,t){return $r(this,e,t,1)},Zr.subtract=function(e,t){return $r(this,e,t,-1)},Zr.as=function(e){if(!this.isValid())return NaN;var t,r,n=this._milliseconds;if("month"===(e=R(e))||"quarter"===e||"year"===e)switch(t=this._days+n/864e5,r=this._months+Tr(t),e){case"month":return r;case"quarter":return r/3;case"year":return r/12}else switch(t=this._days+Math.round(Ar(this._months)),e){case"week":return t/7+n/6048e5;case"day":return t+n/864e5;case"hour":return 24*t+n/36e5;case"minute":return 1440*t+n/6e4;case"second":return 86400*t+n/1e3;case"millisecond":return Math.floor(864e5*t)+n;default:throw new Error("Unknown unit "+e)}},Zr.asMilliseconds=Or,Zr.asSeconds=Dr,Zr.asMinutes=Er,Zr.asHours=Pr,Zr.asDays=Rr,Zr.asWeeks=Ir,Zr.asMonths=Nr,Zr.asQuarters=Lr,Zr.asYears=Fr,Zr.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*x(this._months/12):NaN},Zr._bubble=function(){var e,t,r,n,i,a=this._milliseconds,o=this._days,s=this._months,l=this._data;return a>=0&&o>=0&&s>=0||a<=0&&o<=0&&s<=0||(a+=864e5*Cr(Ar(s)+o),o=0,s=0),l.milliseconds=a%1e3,e=w(a/1e3),l.seconds=e%60,t=w(e/60),l.minutes=t%60,r=w(t/60),l.hours=r%24,o+=w(r/24),i=w(Tr(o)),s+=i,o-=Cr(Ar(i)),n=w(s/12),s%=12,l.days=o,l.months=s,l.years=n,this},Zr.clone=function(){return Yt(this)},Zr.get=function(e){return e=R(e),this.isValid()?this[e+"s"]():NaN},Zr.milliseconds=Br,Zr.seconds=Ur,Zr.minutes=Hr,Zr.hours=zr,Zr.days=Vr,Zr.weeks=function(){return w(this.days()/7)},Zr.months=Wr,Zr.years=Yr,Zr.humanize=function(e){if(!this.isValid())return this.localeData().invalidDate();var t=this.localeData(),r=function(e,t,r){var n=Yt(e).abs(),i=qr(n.as("s")),a=qr(n.as("m")),o=qr(n.as("h")),s=qr(n.as("d")),l=qr(n.as("M")),u=qr(n.as("y")),c=i<=Gr.ss&&["s",i]||i<Gr.s&&["ss",i]||a<=1&&["m"]||a<Gr.m&&["mm",a]||o<=1&&["h"]||o<Gr.h&&["hh",o]||s<=1&&["d"]||s<Gr.d&&["dd",s]||l<=1&&["M"]||l<Gr.M&&["MM",l]||u<=1&&["y"]||["yy",u];return c[2]=t,c[3]=+e>0,c[4]=r,function(e,t,r,n,i){return i.relativeTime(t||1,!!r,e,n)}.apply(null,c)}(this,!e,t);return e&&(r=t.pastFuture(+this,r)),t.postformat(r)},Zr.toISOString=Jr,Zr.toString=Jr,Zr.toJSON=Jr,Zr.locale=er,Zr.localeData=rr,Zr.toIsoString=$("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Jr),Zr.lang=tr,z("X",0,0,"unix"),z("x",0,0,"valueOf"),ue("x",ie),ue("X",/[+-]?\d+(\.\d{1,3})?/),fe("X",function(e,t,r){r._d=new Date(1e3*parseFloat(e,10))}),fe("x",function(e,t,r){r._d=new Date(x(e))}),n.version="2.24.0",t=Ot,n.fn=yr,n.min=function(){return Pt("isBefore",[].slice.call(arguments,0))},n.max=function(){return Pt("isAfter",[].slice.call(arguments,0))},n.now=function(){return Date.now?Date.now():+new Date},n.utc=h,n.unix=function(e){return Ot(1e3*e)},n.months=function(e,t){return xr(e,t,"months")},n.isDate=l,n.locale=ct,n.invalid=g,n.duration=Yt,n.isMoment=_,n.weekdays=function(e,t,r){return Sr(e,t,r,"weekdays")},n.parseZone=function(){return Ot.apply(null,arguments).parseZone()},n.localeData=ht,n.isDuration=Nt,n.monthsShort=function(e,t){return xr(e,t,"monthsShort")},n.weekdaysMin=function(e,t,r){return Sr(e,t,r,"weekdaysMin")},n.defineLocale=dt,n.updateLocale=function(e,t){if(null!=t){var r,n,i=at;null!=(n=ut(e))&&(i=n._config),t=O(i,t),(r=new D(t)).parentLocale=ot[e],ot[e]=r,ct(e)}else null!=ot[e]&&(null!=ot[e].parentLocale?ot[e]=ot[e].parentLocale:null!=ot[e]&&delete ot[e]);return ot[e]},n.locales=function(){return C(ot)},n.weekdaysShort=function(e,t,r){return Sr(e,t,r,"weekdaysShort")},n.normalizeUnits=R,n.relativeTimeRounding=function(e){return void 0===e?qr:"function"==typeof e&&(qr=e,!0)},n.relativeTimeThreshold=function(e,t){return void 0!==Gr[e]&&(void 0===t?Gr[e]:(Gr[e]=t,"s"===e&&(Gr.ss=t-1),!0))},n.calendarFormat=function(e,t){var r=e.diff(t,"days",!0);return r<-6?"sameElse":r<-1?"lastWeek":r<0?"lastDay":r<1?"sameDay":r<2?"nextDay":r<7?"nextWeek":"sameElse"},n.prototype=yr,n.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},n}()}),moment$1=moment;moment$1="function"==typeof moment$1?moment$1:window.moment;var MIN_INTEGER=Number.MIN_SAFE_INTEGER||-9007199254740991,MAX_INTEGER=Number.MAX_SAFE_INTEGER||9007199254740991,INTERVALS={millisecond:{common:!0,size:1,steps:[1,2,5,10,20,50,100,250,500]},second:{common:!0,size:1e3,steps:[1,2,5,10,15,30]},minute:{common:!0,size:6e4,steps:[1,2,5,10,15,30]},hour:{common:!0,size:36e5,steps:[1,2,3,6,12]},day:{common:!0,size:864e5,steps:[1,2,5]},week:{common:!1,size:6048e5,steps:[1,2,3,4]},month:{common:!0,size:2628e6,steps:[1,2,3]},quarter:{common:!1,size:7884e6,steps:[1,2,3,4]},year:{common:!0,size:3154e7}},UNITS=Object.keys(INTERVALS);function sorter(e,t){return e-t}function arrayUnique(e){var t,r,n,i={},a=[];for(t=0,r=e.length;t<r;++t)i[n=e[t]]||(i[n]=!0,a.push(n));return a}function buildLookupTable(e,t,r,n){if("linear"===n||!e.length)return[{time:t,pos:0},{time:r,pos:1}];var i,a,o,s,l,u=[],c=[t];for(i=0,a=e.length;i<a;++i)(s=e[i])>t&&s<r&&c.push(s);for(c.push(r),i=0,a=c.length;i<a;++i)l=c[i+1],o=c[i-1],s=c[i],void 0!==o&&void 0!==l&&Math.round((l+o)/2)===s||u.push({time:s,pos:i/(a-1)});return u}function lookup(e,t,r){for(var n,i,a,o=0,s=e.length-1;o>=0&&o<=s;){if(i=e[(n=o+s>>1)-1]||null,a=e[n],!i)return{lo:null,hi:a};if(a[t]<r)o=n+1;else{if(!(i[t]>r))return{lo:i,hi:a};s=n-1}}return{lo:a,hi:null}}function interpolate$1(e,t,r,n){var i=lookup(e,t,r),a=i.lo?i.hi?i.lo:e[e.length-2]:e[0],o=i.lo?i.hi?i.hi:e[e.length-1]:e[1],s=o[t]-a[t],l=s?(r-a[t])/s:0,u=(o[n]-a[n])*l;return a[n]+u}function momentify(e,t){var r=t.parser,n=t.parser||t.format;return"function"==typeof r?r(e):"string"==typeof e&&"string"==typeof n?moment$1(e,n):(e instanceof moment$1||(e=moment$1(e)),e.isValid()?e:"function"==typeof n?n(e):e)}function parse$1(e,t){if(helpers$1.isNullOrUndef(e))return null;var r=t.options.time,n=momentify(t.getRightValue(e),r);return n.isValid()?(r.round&&n.startOf(r.round),n.valueOf()):null}function determineStepSize(e,t,r,n){var i,a,o,s=t-e,l=INTERVALS[r],u=l.size,c=l.steps;if(!c)return Math.ceil(s/(n*u));for(i=0,a=c.length;i<a&&(o=c[i],!(Math.ceil(s/(u*o))<=n));++i);return o}function determineUnitForAutoTicks(e,t,r,n){var i,a,o,s=UNITS.length;for(i=UNITS.indexOf(e);i<s-1;++i)if(o=(a=INTERVALS[UNITS[i]]).steps?a.steps[a.steps.length-1]:MAX_INTEGER,a.common&&Math.ceil((r-t)/(o*a.size))<=n)return UNITS[i];return UNITS[s-1]}function determineUnitForFormatting(e,t,r,n){var i,a,o=moment$1.duration(moment$1(n).diff(moment$1(r)));for(i=UNITS.length-1;i>=UNITS.indexOf(t);i--)if(a=UNITS[i],INTERVALS[a].common&&o.as(a)>=e.length)return a;return UNITS[t?UNITS.indexOf(t):0]}function determineMajorUnit(e){for(var t=UNITS.indexOf(e)+1,r=UNITS.length;t<r;++t)if(INTERVALS[UNITS[t]].common)return UNITS[t]}function generate$1(e,t,r,n){var i,a=n.time,o=a.unit||determineUnitForAutoTicks(a.minUnit,e,t,r),s=determineMajorUnit(o),l=helpers$1.valueOrDefault(a.stepSize,a.unitStepSize),u="week"===o&&a.isoWeekday,c=n.ticks.major.enabled,d=INTERVALS[o],h=moment$1(e),f=moment$1(t),p=[];for(l||(l=determineStepSize(e,t,o,r)),u&&(h=h.isoWeekday(u),f=f.isoWeekday(u)),h=h.startOf(u?"day":o),(f=f.startOf(u?"day":o))<t&&f.add(1,o),i=moment$1(h),c&&s&&!u&&!a.round&&(i.startOf(s),i.add(~~((h-i)/(d.size*l))*l,o));i<f;i.add(l,o))p.push(+i);return p.push(+i),p}function computeOffsets(e,t,r,n,i){var a,o,s=0,l=0;return i.offset&&t.length&&(i.time.min||(a=t.length>1?t[1]:n,o=t[0],s=(interpolate$1(e,"time",a,"pos")-interpolate$1(e,"time",o,"pos"))/2),i.time.max||(a=t[t.length-1],o=t.length>1?t[t.length-2]:r,l=(interpolate$1(e,"time",a,"pos")-interpolate$1(e,"time",o,"pos"))/2)),{left:s,right:l}}function ticksFromTimestamps(e,t){var r,n,i,a,o=[];for(r=0,n=e.length;r<n;++r)i=e[r],a=!!t&&i===+moment$1(i).startOf(t),o.push({value:i,major:a});return o}function determineLabelFormat(e,t){var r,n,i,a=e.length;for(r=0;r<a;r++){if(0!==(n=momentify(e[r],t)).millisecond())return"MMM D, YYYY h:mm:ss.SSS a";0===n.second()&&0===n.minute()&&0===n.hour()||(i=!0)}return i?"MMM D, YYYY h:mm:ss a":"MMM D, YYYY"}var scale_time=function(){var e=core_scale.extend({initialize:function(){if(!moment$1)throw new Error("Chart.js - Moment.js could not be found! You must include it before Chart.js to use the time scale. Download at https://momentjs.com");this.mergeTicksOptions(),core_scale.prototype.initialize.call(this)},update:function(){var e=this.options;return e.time&&e.time.format&&console.warn("options.time.format is deprecated and replaced by options.time.parser."),core_scale.prototype.update.apply(this,arguments)},getRightValue:function(e){return e&&void 0!==e.t&&(e=e.t),core_scale.prototype.getRightValue.call(this,e)},determineDataLimits:function(){var e,t,r,n,i,a,o=this,s=o.chart,l=o.options.time,u=l.unit||"day",c=MAX_INTEGER,d=MIN_INTEGER,h=[],f=[],p=[];for(e=0,r=s.data.labels.length;e<r;++e)p.push(parse$1(s.data.labels[e],o));for(e=0,r=(s.data.datasets||[]).length;e<r;++e)if(s.isDatasetVisible(e))if(i=s.data.datasets[e].data,helpers$1.isObject(i[0]))for(f[e]=[],t=0,n=i.length;t<n;++t)a=parse$1(i[t],o),h.push(a),f[e][t]=a;else h.push.apply(h,p),f[e]=p.slice(0);else f[e]=[];p.length&&(p=arrayUnique(p).sort(sorter),c=Math.min(c,p[0]),d=Math.max(d,p[p.length-1])),h.length&&(h=arrayUnique(h).sort(sorter),c=Math.min(c,h[0]),d=Math.max(d,h[h.length-1])),c=parse$1(l.min,o)||c,d=parse$1(l.max,o)||d,c=c===MAX_INTEGER?+moment$1().startOf(u):c,d=d===MIN_INTEGER?+moment$1().endOf(u)+1:d,o.min=Math.min(c,d),o.max=Math.max(c+1,d),o._horizontal=o.isHorizontal(),o._table=[],o._timestamps={data:h,datasets:f,labels:p}},buildTicks:function(){var e,t,r,n=this,i=n.min,a=n.max,o=n.options,s=o.time,l=[],u=[];switch(o.ticks.source){case"data":l=n._timestamps.data;break;case"labels":l=n._timestamps.labels;break;case"auto":default:l=generate$1(i,a,n.getLabelCapacity(i),o)}for("ticks"===o.bounds&&l.length&&(i=l[0],a=l[l.length-1]),i=parse$1(s.min,n)||i,a=parse$1(s.max,n)||a,e=0,t=l.length;e<t;++e)(r=l[e])>=i&&r<=a&&u.push(r);return n.min=i,n.max=a,n._unit=s.unit||determineUnitForFormatting(u,s.minUnit,n.min,n.max),n._majorUnit=determineMajorUnit(n._unit),n._table=buildLookupTable(n._timestamps.data,i,a,o.distribution),n._offsets=computeOffsets(n._table,u,i,a,o),n._labelFormat=determineLabelFormat(n._timestamps.data,s),ticksFromTimestamps(u,n._majorUnit)},getLabelForIndex:function(e,t){var r=this.chart.data,n=this.options.time,i=r.labels&&e<r.labels.length?r.labels[e]:"",a=r.datasets[t].data[e];return helpers$1.isObject(a)&&(i=this.getRightValue(a)),n.tooltipFormat?momentify(i,n).format(n.tooltipFormat):"string"==typeof i?i:momentify(i,n).format(this._labelFormat)},tickFormatFunction:function(e,t,r,n){var i=this.options,a=e.valueOf(),o=i.time.displayFormats,s=o[this._unit],l=this._majorUnit,u=o[l],c=e.clone().startOf(l).valueOf(),d=i.ticks.major,h=d.enabled&&l&&u&&a===c,f=e.format(n||(h?u:s)),p=h?d:i.ticks.minor,g=helpers$1.valueOrDefault(p.callback,p.userCallback);return g?g(f,t,r):f},convertTicksToLabels:function(e){var t,r,n=[];for(t=0,r=e.length;t<r;++t)n.push(this.tickFormatFunction(moment$1(e[t].value),t,e));return n},getPixelForOffset:function(e){var t=this,r=t._horizontal?t.width:t.height,n=t._horizontal?t.left:t.top,i=interpolate$1(t._table,"time",e,"pos");return n+r*(t._offsets.left+i)/(t._offsets.left+1+t._offsets.right)},getPixelForValue:function(e,t,r){var n=null;if(void 0!==t&&void 0!==r&&(n=this._timestamps.datasets[r][t]),null===n&&(n=parse$1(e,this)),null!==n)return this.getPixelForOffset(n)},getPixelForTick:function(e){var t=this.getTicks();return e>=0&&e<t.length?this.getPixelForOffset(t[e].value):null},getValueForPixel:function(e){var t=this,r=t._horizontal?t.width:t.height,n=t._horizontal?t.left:t.top,i=(r?(e-n)/r:0)*(t._offsets.left+1+t._offsets.left)-t._offsets.right,a=interpolate$1(t._table,"pos",i,"time");return moment$1(a)},getLabelWidth:function(e){var t=this.options.ticks,r=this.ctx.measureText(e).width,n=helpers$1.toRadians(t.maxRotation),i=Math.cos(n),a=Math.sin(n);return r*i+helpers$1.valueOrDefault(t.fontSize,core_defaults.global.defaultFontSize)*a},getLabelCapacity:function(e){var t=this,r=t.options.time.displayFormats.millisecond,n=t.tickFormatFunction(moment$1(e),0,[],r),i=t.getLabelWidth(n),a=t.isHorizontal()?t.width:t.height,o=Math.floor(a/i);return o>0?o:1}});core_scaleService.registerScaleType("time",e,{position:"bottom",distribution:"linear",bounds:"data",time:{parser:!1,format:!1,unit:!1,round:!1,displayFormat:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{millisecond:"h:mm:ss.SSS a",second:"h:mm:ss a",minute:"h:mm a",hour:"hA",day:"MMM D",week:"ll",month:"MMM YYYY",quarter:"[Q]Q - YYYY",year:"YYYY"}},ticks:{autoSkip:!1,source:"auto",major:{enabled:!1}}})};function computeMinSampleSize(e,t){var r,n,i,a,o=e.isHorizontal()?e.width:e.height,s=e.getTicks();for(i=1,a=t.length;i<a;++i)o=Math.min(o,t[i]-t[i-1]);for(i=0,a=s.length;i<a;++i)n=e.getPixelForTick(i),o=i>0?Math.min(o,n-r):o,r=n;return o}function computeFitCategoryTraits(e,t,r){var n,i,a=r.barThickness,o=t.stackCount,s=t.pixels[e];return helpers$1.isNullOrUndef(a)?(n=t.min*r.categoryPercentage,i=r.barPercentage):(n=a*o,i=1),{chunk:n/o,ratio:i,start:s-n/2}}function computeFlexCategoryTraits(e,t,r){var n,i=t.pixels,a=i[e],o=e>0?i[e-1]:null,s=e<i.length-1?i[e+1]:null,l=r.categoryPercentage;return null===o&&(o=a-(null===s?t.end-a:s-a)),null===s&&(s=a+a-o),n=a-(a-o)/2*l,{chunk:(s-o)/2*l/t.stackCount,ratio:r.barPercentage,start:n}}core_defaults._set("bar",{hover:{mode:"label"},scales:{xAxes:[{type:"category",categoryPercentage:.8,barPercentage:.9,offset:!0,gridLines:{offsetGridLines:!0}}],yAxes:[{type:"linear"}]}}),core_defaults._set("horizontalBar",{hover:{mode:"index",axis:"y"},scales:{xAxes:[{type:"linear",position:"bottom"}],yAxes:[{position:"left",type:"category",categoryPercentage:.8,barPercentage:.9,offset:!0,gridLines:{offsetGridLines:!0}}]},elements:{rectangle:{borderSkipped:"left"}},tooltips:{callbacks:{title:function(e,t){var r="";return e.length>0&&(e[0].yLabel?r=e[0].yLabel:t.labels.length>0&&e[0].index<t.labels.length&&(r=t.labels[e[0].index])),r},label:function(e,t){return(t.datasets[e.datasetIndex].label||"")+": "+e.xLabel}},mode:"index",axis:"y"}});var controller_bar=function(e){e.controllers.bar=e.DatasetController.extend({dataElementType:elements.Rectangle,initialize:function(){var t;e.DatasetController.prototype.initialize.apply(this,arguments),(t=this.getMeta()).stack=this.getDataset().stack,t.bar=!0},update:function(e){var t,r,n=this.getMeta().data;for(this._ruler=this.getRuler(),t=0,r=n.length;t<r;++t)this.updateElement(n[t],t,e)},updateElement:function(e,t,r){var n=this,i=n.chart,a=n.getMeta(),o=n.getDataset(),s=e.custom||{},l=i.options.elements.rectangle;e._xScale=n.getScaleForId(a.xAxisID),e._yScale=n.getScaleForId(a.yAxisID),e._datasetIndex=n.index,e._index=t,e._model={datasetLabel:o.label,label:i.data.labels[t],borderSkipped:s.borderSkipped?s.borderSkipped:l.borderSkipped,backgroundColor:s.backgroundColor?s.backgroundColor:helpers$1.valueAtIndexOrDefault(o.backgroundColor,t,l.backgroundColor),borderColor:s.borderColor?s.borderColor:helpers$1.valueAtIndexOrDefault(o.borderColor,t,l.borderColor),borderWidth:s.borderWidth?s.borderWidth:helpers$1.valueAtIndexOrDefault(o.borderWidth,t,l.borderWidth)},n.updateElementGeometry(e,t,r),e.pivot()},updateElementGeometry:function(e,t,r){var n=this,i=e._model,a=n.getValueScale(),o=a.getBasePixel(),s=a.isHorizontal(),l=n._ruler||n.getRuler(),u=n.calculateBarValuePixels(n.index,t),c=n.calculateBarIndexPixels(n.index,t,l);i.horizontal=s,i.base=r?o:u.base,i.x=s?r?o:u.head:c.center,i.y=s?c.center:r?o:u.head,i.height=s?c.size:void 0,i.width=s?void 0:c.size},getValueScaleId:function(){return this.getMeta().yAxisID},getIndexScaleId:function(){return this.getMeta().xAxisID},getValueScale:function(){return this.getScaleForId(this.getValueScaleId())},getIndexScale:function(){return this.getScaleForId(this.getIndexScaleId())},_getStacks:function(e){var t,r,n=this.chart,i=this.getIndexScale().options.stacked,a=void 0===e?n.data.datasets.length:e+1,o=[];for(t=0;t<a;++t)(r=n.getDatasetMeta(t)).bar&&n.isDatasetVisible(t)&&(!1===i||!0===i&&-1===o.indexOf(r.stack)||void 0===i&&(void 0===r.stack||-1===o.indexOf(r.stack)))&&o.push(r.stack);return o},getStackCount:function(){return this._getStacks().length},getStackIndex:function(e,t){var r=this._getStacks(e),n=void 0!==t?r.indexOf(t):-1;return-1===n?r.length-1:n},getRuler:function(){var e,t,r=this.getIndexScale(),n=this.getStackCount(),i=this.index,a=r.isHorizontal(),o=a?r.left:r.top,s=o+(a?r.width:r.height),l=[];for(e=0,t=this.getMeta().data.length;e<t;++e)l.push(r.getPixelForValue(null,e,i));return{min:helpers$1.isNullOrUndef(r.options.barThickness)?computeMinSampleSize(r,l):-1,pixels:l,start:o,end:s,stackCount:n,scale:r}},calculateBarValuePixels:function(e,t){var r,n,i,a,o,s,l=this.chart,u=this.getMeta(),c=this.getValueScale(),d=l.data.datasets,h=c.getRightValue(d[e].data[t]),f=c.options.stacked,p=u.stack,g=0;if(f||void 0===f&&void 0!==p)for(r=0;r<e;++r)(n=l.getDatasetMeta(r)).bar&&n.stack===p&&n.controller.getValueScaleId()===c.id&&l.isDatasetVisible(r)&&(i=c.getRightValue(d[r].data[t]),(h<0&&i<0||h>=0&&i>0)&&(g+=i));return a=c.getPixelForValue(g),{size:s=((o=c.getPixelForValue(g+h))-a)/2,base:a,head:o,center:o+s/2}},calculateBarIndexPixels:function(e,t,r){var n=r.scale.options,i="flex"===n.barThickness?computeFlexCategoryTraits(t,r,n):computeFitCategoryTraits(t,r,n),a=this.getStackIndex(e,this.getMeta().stack),o=i.start+i.chunk*a+i.chunk/2,s=Math.min(helpers$1.valueOrDefault(n.maxBarThickness,1/0),i.chunk*i.ratio);return{base:o-s/2,head:o+s/2,center:o,size:s}},draw:function(){var e=this.chart,t=this.getValueScale(),r=this.getMeta().data,n=this.getDataset(),i=r.length,a=0;for(helpers$1.canvas.clipArea(e.ctx,e.chartArea);a<i;++a)isNaN(t.getRightValue(n.data[a]))||r[a].draw();helpers$1.canvas.unclipArea(e.ctx)}}),e.controllers.horizontalBar=e.controllers.bar.extend({getValueScaleId:function(){return this.getMeta().xAxisID},getIndexScaleId:function(){return this.getMeta().yAxisID}})};core_defaults._set("bubble",{hover:{mode:"single"},scales:{xAxes:[{type:"linear",position:"bottom",id:"x-axis-0"}],yAxes:[{type:"linear",position:"left",id:"y-axis-0"}]},tooltips:{callbacks:{title:function(){return""},label:function(e,t){var r=t.datasets[e.datasetIndex].label||"",n=t.datasets[e.datasetIndex].data[e.index];return r+": ("+e.xLabel+", "+e.yLabel+", "+n.r+")"}}}});var controller_bubble=function(e){e.controllers.bubble=e.DatasetController.extend({dataElementType:elements.Point,update:function(e){var t=this,r=t.getMeta().data;helpers$1.each(r,function(r,n){t.updateElement(r,n,e)})},updateElement:function(e,t,r){var n=this,i=n.getMeta(),a=e.custom||{},o=n.getScaleForId(i.xAxisID),s=n.getScaleForId(i.yAxisID),l=n._resolveElementOptions(e,t),u=n.getDataset().data[t],c=n.index,d=r?o.getPixelForDecimal(.5):o.getPixelForValue("object"===(void 0===u?"undefined":_typeof(u))?u:NaN,t,c),h=r?s.getBasePixel():s.getPixelForValue(u,t,c);e._xScale=o,e._yScale=s,e._options=l,e._datasetIndex=c,e._index=t,e._model={backgroundColor:l.backgroundColor,borderColor:l.borderColor,borderWidth:l.borderWidth,hitRadius:l.hitRadius,pointStyle:l.pointStyle,rotation:l.rotation,radius:r?0:l.radius,skip:a.skip||isNaN(d)||isNaN(h),x:d,y:h},e.pivot()},setHoverStyle:function(e){var t=e._model,r=e._options;e.$previousStyle={backgroundColor:t.backgroundColor,borderColor:t.borderColor,borderWidth:t.borderWidth,radius:t.radius},t.backgroundColor=helpers$1.valueOrDefault(r.hoverBackgroundColor,helpers$1.getHoverColor(r.backgroundColor)),t.borderColor=helpers$1.valueOrDefault(r.hoverBorderColor,helpers$1.getHoverColor(r.borderColor)),t.borderWidth=helpers$1.valueOrDefault(r.hoverBorderWidth,r.borderWidth),t.radius=r.radius+r.hoverRadius},_resolveElementOptions:function(e,t){var r,n,i,a=this.chart,o=a.data.datasets[this.index],s=e.custom||{},l=a.options.elements.point,u=helpers$1.options.resolve,c=o.data[t],d={},h={chart:a,dataIndex:t,dataset:o,datasetIndex:this.index},f=["backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth","hoverRadius","hitRadius","pointStyle","rotation"];for(r=0,n=f.length;r<n;++r)d[i=f[r]]=u([s[i],o[i],l[i]],h,t);return d.radius=u([s.radius,c?c.r:void 0,o.radius,l.radius],h,t),d}})};core_defaults._set("doughnut",{animation:{animateRotate:!0,animateScale:!1},hover:{mode:"single"},legendCallback:function(e){var t=[];t.push('<ul class="'+e.id+'-legend">');var r=e.data,n=r.datasets,i=r.labels;if(n.length)for(var a=0;a<n[0].data.length;++a)t.push('<li><span style="background-color:'+n[0].backgroundColor[a]+'"></span>'),i[a]&&t.push(i[a]),t.push("</li>");return t.push("</ul>"),t.join("")},legend:{labels:{generateLabels:function(e){var t=e.data;return t.labels.length&&t.datasets.length?t.labels.map(function(r,n){var i=e.getDatasetMeta(0),a=t.datasets[0],o=i.data[n],s=o&&o.custom||{},l=helpers$1.valueAtIndexOrDefault,u=e.options.elements.arc;return{text:r,fillStyle:s.backgroundColor?s.backgroundColor:l(a.backgroundColor,n,u.backgroundColor),strokeStyle:s.borderColor?s.borderColor:l(a.borderColor,n,u.borderColor),lineWidth:s.borderWidth?s.borderWidth:l(a.borderWidth,n,u.borderWidth),hidden:isNaN(a.data[n])||i.data[n].hidden,index:n}}):[]}},onClick:function(e,t){var r,n,i,a=t.index,o=this.chart;for(r=0,n=(o.data.datasets||[]).length;r<n;++r)(i=o.getDatasetMeta(r)).data[a]&&(i.data[a].hidden=!i.data[a].hidden);o.update()}},cutoutPercentage:50,rotation:-.5*Math.PI,circumference:2*Math.PI,tooltips:{callbacks:{title:function(){return""},label:function(e,t){var r=t.labels[e.index],n=": "+t.datasets[e.datasetIndex].data[e.index];return helpers$1.isArray(r)?(r=r.slice())[0]+=n:r+=n,r}}}}),core_defaults._set("pie",helpers$1.clone(core_defaults.doughnut)),core_defaults._set("pie",{cutoutPercentage:0});var controller_doughnut=function(e){e.controllers.doughnut=e.controllers.pie=e.DatasetController.extend({dataElementType:elements.Arc,linkScales:helpers$1.noop,getRingIndex:function(e){for(var t=0,r=0;r<e;++r)this.chart.isDatasetVisible(r)&&++t;return t},update:function(e){var t=this,r=t.chart,n=r.chartArea,i=r.options,a=i.elements.arc,o=n.right-n.left-a.borderWidth,s=n.bottom-n.top-a.borderWidth,l=Math.min(o,s),u={x:0,y:0},c=t.getMeta(),d=i.cutoutPercentage,h=i.circumference;if(h<2*Math.PI){var f=i.rotation%(2*Math.PI),p=(f+=2*Math.PI*(f>=Math.PI?-1:f<-Math.PI?1:0))+h,g={x:Math.cos(f),y:Math.sin(f)},m={x:Math.cos(p),y:Math.sin(p)},v=f<=0&&p>=0||f<=2*Math.PI&&2*Math.PI<=p,y=f<=.5*Math.PI&&.5*Math.PI<=p||f<=2.5*Math.PI&&2.5*Math.PI<=p,b=f<=-Math.PI&&-Math.PI<=p||f<=Math.PI&&Math.PI<=p,_=f<=.5*-Math.PI&&.5*-Math.PI<=p||f<=1.5*Math.PI&&1.5*Math.PI<=p,w=d/100,x={x:b?-1:Math.min(g.x*(g.x<0?1:w),m.x*(m.x<0?1:w)),y:_?-1:Math.min(g.y*(g.y<0?1:w),m.y*(m.y<0?1:w))},S={x:v?1:Math.max(g.x*(g.x>0?1:w),m.x*(m.x>0?1:w)),y:y?1:Math.max(g.y*(g.y>0?1:w),m.y*(m.y>0?1:w))},k={width:.5*(S.x-x.x),height:.5*(S.y-x.y)};l=Math.min(o/k.width,s/k.height),u={x:-.5*(S.x+x.x),y:-.5*(S.y+x.y)}}r.borderWidth=t.getMaxBorderWidth(c.data),r.outerRadius=Math.max((l-r.borderWidth)/2,0),r.innerRadius=Math.max(d?r.outerRadius/100*d:0,0),r.radiusLength=(r.outerRadius-r.innerRadius)/r.getVisibleDatasetCount(),r.offsetX=u.x*r.outerRadius,r.offsetY=u.y*r.outerRadius,c.total=t.calculateTotal(),t.outerRadius=r.outerRadius-r.radiusLength*t.getRingIndex(t.index),t.innerRadius=Math.max(t.outerRadius-r.radiusLength,0),helpers$1.each(c.data,function(r,n){t.updateElement(r,n,e)})},updateElement:function(e,t,r){var n=this,i=n.chart,a=i.chartArea,o=i.options,s=o.animation,l=(a.left+a.right)/2,u=(a.top+a.bottom)/2,c=o.rotation,d=o.rotation,h=n.getDataset(),f=r&&s.animateRotate?0:e.hidden?0:n.calculateCircumference(h.data[t])*(o.circumference/(2*Math.PI)),p=r&&s.animateScale?0:n.innerRadius,g=r&&s.animateScale?0:n.outerRadius,m=helpers$1.valueAtIndexOrDefault;helpers$1.extend(e,{_datasetIndex:n.index,_index:t,_model:{x:l+i.offsetX,y:u+i.offsetY,startAngle:c,endAngle:d,circumference:f,outerRadius:g,innerRadius:p,label:m(h.label,t,i.data.labels[t])}});var v=e._model,y=e.custom||{},b=helpers$1.valueAtIndexOrDefault,_=this.chart.options.elements.arc;v.backgroundColor=y.backgroundColor?y.backgroundColor:b(h.backgroundColor,t,_.backgroundColor),v.borderColor=y.borderColor?y.borderColor:b(h.borderColor,t,_.borderColor),v.borderWidth=y.borderWidth?y.borderWidth:b(h.borderWidth,t,_.borderWidth),r&&s.animateRotate||(v.startAngle=0===t?o.rotation:n.getMeta().data[t-1]._model.endAngle,v.endAngle=v.startAngle+v.circumference),e.pivot()},calculateTotal:function(){var e,t=this.getDataset(),r=this.getMeta(),n=0;return helpers$1.each(r.data,function(r,i){e=t.data[i],isNaN(e)||r.hidden||(n+=Math.abs(e))}),n},calculateCircumference:function(e){var t=this.getMeta().total;return t>0&&!isNaN(e)?2*Math.PI*(Math.abs(e)/t):0},getMaxBorderWidth:function(e){for(var t,r,n=0,i=this.index,a=e.length,o=0;o<a;o++)t=e[o]._model?e[o]._model.borderWidth:0,n=(r=e[o]._chart?e[o]._chart.config.data.datasets[i].hoverBorderWidth:0)>(n=t>n?t:n)?r:n;return n}})};core_defaults._set("line",{showLines:!0,spanGaps:!1,hover:{mode:"label"},scales:{xAxes:[{type:"category",id:"x-axis-0"}],yAxes:[{type:"linear",id:"y-axis-0"}]}});var controller_line=function(e){function t(e,t){return helpers$1.valueOrDefault(e.showLine,t.showLines)}e.controllers.line=e.DatasetController.extend({datasetElementType:elements.Line,dataElementType:elements.Point,update:function(e){var r,n,i,a=this,o=a.getMeta(),s=o.dataset,l=o.data||[],u=a.chart.options,c=u.elements.line,d=a.getScaleForId(o.yAxisID),h=a.getDataset(),f=t(h,u);for(f&&(i=s.custom||{},void 0!==h.tension&&void 0===h.lineTension&&(h.lineTension=h.tension),s._scale=d,s._datasetIndex=a.index,s._children=l,s._model={spanGaps:h.spanGaps?h.spanGaps:u.spanGaps,tension:i.tension?i.tension:helpers$1.valueOrDefault(h.lineTension,c.tension),backgroundColor:i.backgroundColor?i.backgroundColor:h.backgroundColor||c.backgroundColor,borderWidth:i.borderWidth?i.borderWidth:h.borderWidth||c.borderWidth,borderColor:i.borderColor?i.borderColor:h.borderColor||c.borderColor,borderCapStyle:i.borderCapStyle?i.borderCapStyle:h.borderCapStyle||c.borderCapStyle,borderDash:i.borderDash?i.borderDash:h.borderDash||c.borderDash,borderDashOffset:i.borderDashOffset?i.borderDashOffset:h.borderDashOffset||c.borderDashOffset,borderJoinStyle:i.borderJoinStyle?i.borderJoinStyle:h.borderJoinStyle||c.borderJoinStyle,fill:i.fill?i.fill:void 0!==h.fill?h.fill:c.fill,steppedLine:i.steppedLine?i.steppedLine:helpers$1.valueOrDefault(h.steppedLine,c.stepped),cubicInterpolationMode:i.cubicInterpolationMode?i.cubicInterpolationMode:helpers$1.valueOrDefault(h.cubicInterpolationMode,c.cubicInterpolationMode)},s.pivot()),r=0,n=l.length;r<n;++r)a.updateElement(l[r],r,e);for(f&&0!==s._model.tension&&a.updateBezierControlPoints(),r=0,n=l.length;r<n;++r)l[r].pivot()},getPointBackgroundColor:function(e,t){var r=this.chart.options.elements.point.backgroundColor,n=this.getDataset(),i=e.custom||{};return i.backgroundColor?r=i.backgroundColor:n.pointBackgroundColor?r=helpers$1.valueAtIndexOrDefault(n.pointBackgroundColor,t,r):n.backgroundColor&&(r=n.backgroundColor),r},getPointBorderColor:function(e,t){var r=this.chart.options.elements.point.borderColor,n=this.getDataset(),i=e.custom||{};return i.borderColor?r=i.borderColor:n.pointBorderColor?r=helpers$1.valueAtIndexOrDefault(n.pointBorderColor,t,r):n.borderColor&&(r=n.borderColor),r},getPointBorderWidth:function(e,t){var r=this.chart.options.elements.point.borderWidth,n=this.getDataset(),i=e.custom||{};return isNaN(i.borderWidth)?!isNaN(n.pointBorderWidth)||helpers$1.isArray(n.pointBorderWidth)?r=helpers$1.valueAtIndexOrDefault(n.pointBorderWidth,t,r):isNaN(n.borderWidth)||(r=n.borderWidth):r=i.borderWidth,r},getPointRotation:function(e,t){var r=this.chart.options.elements.point.rotation,n=this.getDataset(),i=e.custom||{};return isNaN(i.rotation)?isNaN(n.pointRotation)&&!helpers$1.isArray(n.pointRotation)||(r=helpers$1.valueAtIndexOrDefault(n.pointRotation,t,r)):r=i.rotation,r},updateElement:function(e,t,r){var n,i,a=this,o=a.getMeta(),s=e.custom||{},l=a.getDataset(),u=a.index,c=l.data[t],d=a.getScaleForId(o.yAxisID),h=a.getScaleForId(o.xAxisID),f=a.chart.options.elements.point;void 0!==l.radius&&void 0===l.pointRadius&&(l.pointRadius=l.radius),void 0!==l.hitRadius&&void 0===l.pointHitRadius&&(l.pointHitRadius=l.hitRadius),n=h.getPixelForValue("object"===(void 0===c?"undefined":_typeof(c))?c:NaN,t,u),i=r?d.getBasePixel():a.calculatePointY(c,t,u),e._xScale=h,e._yScale=d,e._datasetIndex=u,e._index=t,e._model={x:n,y:i,skip:s.skip||isNaN(n)||isNaN(i),radius:s.radius||helpers$1.valueAtIndexOrDefault(l.pointRadius,t,f.radius),pointStyle:s.pointStyle||helpers$1.valueAtIndexOrDefault(l.pointStyle,t,f.pointStyle),rotation:a.getPointRotation(e,t),backgroundColor:a.getPointBackgroundColor(e,t),borderColor:a.getPointBorderColor(e,t),borderWidth:a.getPointBorderWidth(e,t),tension:o.dataset._model?o.dataset._model.tension:0,steppedLine:!!o.dataset._model&&o.dataset._model.steppedLine,hitRadius:s.hitRadius||helpers$1.valueAtIndexOrDefault(l.pointHitRadius,t,f.hitRadius)}},calculatePointY:function(e,t,r){var n,i,a,o=this.chart,s=this.getMeta(),l=this.getScaleForId(s.yAxisID),u=0,c=0;if(l.options.stacked){for(n=0;n<r;n++)if(i=o.data.datasets[n],"line"===(a=o.getDatasetMeta(n)).type&&a.yAxisID===l.id&&o.isDatasetVisible(n)){var d=Number(l.getRightValue(i.data[t]));d<0?c+=d||0:u+=d||0}var h=Number(l.getRightValue(e));return h<0?l.getPixelForValue(c+h):l.getPixelForValue(u+h)}return l.getPixelForValue(e)},updateBezierControlPoints:function(){var e,t,r,n,i=this.getMeta(),a=this.chart.chartArea,o=i.data||[];function s(e,t,r){return Math.max(Math.min(e,r),t)}if(i.dataset._model.spanGaps&&(o=o.filter(function(e){return!e._model.skip})),"monotone"===i.dataset._model.cubicInterpolationMode)helpers$1.splineCurveMonotone(o);else for(e=0,t=o.length;e<t;++e)r=o[e]._model,n=helpers$1.splineCurve(helpers$1.previousItem(o,e)._model,r,helpers$1.nextItem(o,e)._model,i.dataset._model.tension),r.controlPointPreviousX=n.previous.x,r.controlPointPreviousY=n.previous.y,r.controlPointNextX=n.next.x,r.controlPointNextY=n.next.y;if(this.chart.options.elements.line.capBezierPoints)for(e=0,t=o.length;e<t;++e)(r=o[e]._model).controlPointPreviousX=s(r.controlPointPreviousX,a.left,a.right),r.controlPointPreviousY=s(r.controlPointPreviousY,a.top,a.bottom),r.controlPointNextX=s(r.controlPointNextX,a.left,a.right),r.controlPointNextY=s(r.controlPointNextY,a.top,a.bottom)},draw:function(){var e,r=this.chart,n=this.getMeta(),i=n.data||[],a=r.chartArea,o=i.length,s=0;for(t(this.getDataset(),r.options)&&(e=(n.dataset._model.borderWidth||0)/2,helpers$1.canvas.clipArea(r.ctx,{left:a.left,right:a.right,top:a.top-e,bottom:a.bottom+e}),n.dataset.draw(),helpers$1.canvas.unclipArea(r.ctx));s<o;++s)i[s].draw(a)},setHoverStyle:function(e){var t=this.chart.data.datasets[e._datasetIndex],r=e._index,n=e.custom||{},i=e._model;e.$previousStyle={backgroundColor:i.backgroundColor,borderColor:i.borderColor,borderWidth:i.borderWidth,radius:i.radius},i.backgroundColor=n.hoverBackgroundColor||helpers$1.valueAtIndexOrDefault(t.pointHoverBackgroundColor,r,helpers$1.getHoverColor(i.backgroundColor)),i.borderColor=n.hoverBorderColor||helpers$1.valueAtIndexOrDefault(t.pointHoverBorderColor,r,helpers$1.getHoverColor(i.borderColor)),i.borderWidth=n.hoverBorderWidth||helpers$1.valueAtIndexOrDefault(t.pointHoverBorderWidth,r,i.borderWidth),i.radius=n.hoverRadius||helpers$1.valueAtIndexOrDefault(t.pointHoverRadius,r,this.chart.options.elements.point.hoverRadius)}})};core_defaults._set("polarArea",{scale:{type:"radialLinear",angleLines:{display:!1},gridLines:{circular:!0},pointLabels:{display:!1},ticks:{beginAtZero:!0}},animation:{animateRotate:!0,animateScale:!0},startAngle:-.5*Math.PI,legendCallback:function(e){var t=[];t.push('<ul class="'+e.id+'-legend">');var r=e.data,n=r.datasets,i=r.labels;if(n.length)for(var a=0;a<n[0].data.length;++a)t.push('<li><span style="background-color:'+n[0].backgroundColor[a]+'"></span>'),i[a]&&t.push(i[a]),t.push("</li>");return t.push("</ul>"),t.join("")},legend:{labels:{generateLabels:function(e){var t=e.data;return t.labels.length&&t.datasets.length?t.labels.map(function(r,n){var i=e.getDatasetMeta(0),a=t.datasets[0],o=i.data[n].custom||{},s=helpers$1.valueAtIndexOrDefault,l=e.options.elements.arc;return{text:r,fillStyle:o.backgroundColor?o.backgroundColor:s(a.backgroundColor,n,l.backgroundColor),strokeStyle:o.borderColor?o.borderColor:s(a.borderColor,n,l.borderColor),lineWidth:o.borderWidth?o.borderWidth:s(a.borderWidth,n,l.borderWidth),hidden:isNaN(a.data[n])||i.data[n].hidden,index:n}}):[]}},onClick:function(e,t){var r,n,i,a=t.index,o=this.chart;for(r=0,n=(o.data.datasets||[]).length;r<n;++r)(i=o.getDatasetMeta(r)).data[a].hidden=!i.data[a].hidden;o.update()}},tooltips:{callbacks:{title:function(){return""},label:function(e,t){return t.labels[e.index]+": "+e.yLabel}}}});var controller_polarArea=function(e){e.controllers.polarArea=e.DatasetController.extend({dataElementType:elements.Arc,linkScales:helpers$1.noop,update:function(e){var t,r,n,i=this,a=i.getDataset(),o=i.getMeta(),s=i.chart.options.startAngle||0,l=i._starts=[],u=i._angles=[];for(i._updateRadius(),o.count=i.countVisibleElements(),t=0,r=a.data.length;t<r;t++)l[t]=s,n=i._computeAngle(t),u[t]=n,s+=n;helpers$1.each(o.data,function(t,r){i.updateElement(t,r,e)})},_updateRadius:function(){var e=this,t=e.chart,r=t.chartArea,n=t.options,i=n.elements.arc,a=Math.min(r.right-r.left,r.bottom-r.top);t.outerRadius=Math.max((a-i.borderWidth/2)/2,0),t.innerRadius=Math.max(n.cutoutPercentage?t.outerRadius/100*n.cutoutPercentage:1,0),t.radiusLength=(t.outerRadius-t.innerRadius)/t.getVisibleDatasetCount(),e.outerRadius=t.outerRadius-t.radiusLength*e.index,e.innerRadius=e.outerRadius-t.radiusLength},updateElement:function(e,t,r){var n=this,i=n.chart,a=n.getDataset(),o=i.options,s=o.animation,l=i.scale,u=i.data.labels,c=l.xCenter,d=l.yCenter,h=o.startAngle,f=e.hidden?0:l.getDistanceFromCenterForValue(a.data[t]),p=n._starts[t],g=p+(e.hidden?0:n._angles[t]),m=s.animateScale?0:l.getDistanceFromCenterForValue(a.data[t]);helpers$1.extend(e,{_datasetIndex:n.index,_index:t,_scale:l,_model:{x:c,y:d,innerRadius:0,outerRadius:r?m:f,startAngle:r&&s.animateRotate?h:p,endAngle:r&&s.animateRotate?h:g,label:helpers$1.valueAtIndexOrDefault(u,t,u[t])}});var v=this.chart.options.elements.arc,y=e.custom||{},b=helpers$1.valueAtIndexOrDefault,_=e._model;_.backgroundColor=y.backgroundColor?y.backgroundColor:b(a.backgroundColor,t,v.backgroundColor),_.borderColor=y.borderColor?y.borderColor:b(a.borderColor,t,v.borderColor),_.borderWidth=y.borderWidth?y.borderWidth:b(a.borderWidth,t,v.borderWidth),e.pivot()},countVisibleElements:function(){var e=this.getDataset(),t=this.getMeta(),r=0;return helpers$1.each(t.data,function(t,n){isNaN(e.data[n])||t.hidden||r++}),r},_computeAngle:function(e){var t=this,r=this.getMeta().count,n=t.getDataset(),i=t.getMeta();if(isNaN(n.data[e])||i.data[e].hidden)return 0;var a={chart:t.chart,dataIndex:e,dataset:n,datasetIndex:t.index};return helpers$1.options.resolve([t.chart.options.elements.arc.angle,2*Math.PI/r],a,e)}})};core_defaults._set("radar",{scale:{type:"radialLinear"},elements:{line:{tension:0}}});var controller_radar=function(e){e.controllers.radar=e.DatasetController.extend({datasetElementType:elements.Line,dataElementType:elements.Point,linkScales:helpers$1.noop,update:function(e){var t=this,r=t.getMeta(),n=r.dataset,i=r.data,a=n.custom||{},o=t.getDataset(),s=t.chart.options.elements.line,l=t.chart.scale;void 0!==o.tension&&void 0===o.lineTension&&(o.lineTension=o.tension),helpers$1.extend(r.dataset,{_datasetIndex:t.index,_scale:l,_children:i,_loop:!0,_model:{tension:a.tension?a.tension:helpers$1.valueOrDefault(o.lineTension,s.tension),backgroundColor:a.backgroundColor?a.backgroundColor:o.backgroundColor||s.backgroundColor,borderWidth:a.borderWidth?a.borderWidth:o.borderWidth||s.borderWidth,borderColor:a.borderColor?a.borderColor:o.borderColor||s.borderColor,fill:a.fill?a.fill:void 0!==o.fill?o.fill:s.fill,borderCapStyle:a.borderCapStyle?a.borderCapStyle:o.borderCapStyle||s.borderCapStyle,borderDash:a.borderDash?a.borderDash:o.borderDash||s.borderDash,borderDashOffset:a.borderDashOffset?a.borderDashOffset:o.borderDashOffset||s.borderDashOffset,borderJoinStyle:a.borderJoinStyle?a.borderJoinStyle:o.borderJoinStyle||s.borderJoinStyle}}),r.dataset.pivot(),helpers$1.each(i,function(r,n){t.updateElement(r,n,e)},t),t.updateBezierControlPoints()},updateElement:function(e,t,r){var n=this,i=e.custom||{},a=n.getDataset(),o=n.chart.scale,s=n.chart.options.elements.point,l=o.getPointPositionForValue(t,a.data[t]);void 0!==a.radius&&void 0===a.pointRadius&&(a.pointRadius=a.radius),void 0!==a.hitRadius&&void 0===a.pointHitRadius&&(a.pointHitRadius=a.hitRadius),helpers$1.extend(e,{_datasetIndex:n.index,_index:t,_scale:o,_model:{x:r?o.xCenter:l.x,y:r?o.yCenter:l.y,tension:i.tension?i.tension:helpers$1.valueOrDefault(a.lineTension,n.chart.options.elements.line.tension),radius:i.radius?i.radius:helpers$1.valueAtIndexOrDefault(a.pointRadius,t,s.radius),backgroundColor:i.backgroundColor?i.backgroundColor:helpers$1.valueAtIndexOrDefault(a.pointBackgroundColor,t,s.backgroundColor),borderColor:i.borderColor?i.borderColor:helpers$1.valueAtIndexOrDefault(a.pointBorderColor,t,s.borderColor),borderWidth:i.borderWidth?i.borderWidth:helpers$1.valueAtIndexOrDefault(a.pointBorderWidth,t,s.borderWidth),pointStyle:i.pointStyle?i.pointStyle:helpers$1.valueAtIndexOrDefault(a.pointStyle,t,s.pointStyle),rotation:i.rotation?i.rotation:helpers$1.valueAtIndexOrDefault(a.pointRotation,t,s.rotation),hitRadius:i.hitRadius?i.hitRadius:helpers$1.valueAtIndexOrDefault(a.pointHitRadius,t,s.hitRadius)}}),e._model.skip=i.skip?i.skip:isNaN(e._model.x)||isNaN(e._model.y)},updateBezierControlPoints:function(){var e=this.chart.chartArea,t=this.getMeta();helpers$1.each(t.data,function(r,n){var i=r._model,a=helpers$1.splineCurve(helpers$1.previousItem(t.data,n,!0)._model,i,helpers$1.nextItem(t.data,n,!0)._model,i.tension);i.controlPointPreviousX=Math.max(Math.min(a.previous.x,e.right),e.left),i.controlPointPreviousY=Math.max(Math.min(a.previous.y,e.bottom),e.top),i.controlPointNextX=Math.max(Math.min(a.next.x,e.right),e.left),i.controlPointNextY=Math.max(Math.min(a.next.y,e.bottom),e.top),r.pivot()})},setHoverStyle:function(e){var t=this.chart.data.datasets[e._datasetIndex],r=e.custom||{},n=e._index,i=e._model;e.$previousStyle={backgroundColor:i.backgroundColor,borderColor:i.borderColor,borderWidth:i.borderWidth,radius:i.radius},i.radius=r.hoverRadius?r.hoverRadius:helpers$1.valueAtIndexOrDefault(t.pointHoverRadius,n,this.chart.options.elements.point.hoverRadius),i.backgroundColor=r.hoverBackgroundColor?r.hoverBackgroundColor:helpers$1.valueAtIndexOrDefault(t.pointHoverBackgroundColor,n,helpers$1.getHoverColor(i.backgroundColor)),i.borderColor=r.hoverBorderColor?r.hoverBorderColor:helpers$1.valueAtIndexOrDefault(t.pointHoverBorderColor,n,helpers$1.getHoverColor(i.borderColor)),i.borderWidth=r.hoverBorderWidth?r.hoverBorderWidth:helpers$1.valueAtIndexOrDefault(t.pointHoverBorderWidth,n,i.borderWidth)}})};core_defaults._set("scatter",{hover:{mode:"single"},scales:{xAxes:[{id:"x-axis-1",type:"linear",position:"bottom"}],yAxes:[{id:"y-axis-1",type:"linear",position:"left"}]},showLines:!1,tooltips:{callbacks:{title:function(){return""},label:function(e){return"("+e.xLabel+", "+e.yLabel+")"}}}});var controller_scatter=function(e){e.controllers.scatter=e.controllers.line},Chart_Bar=function(e){e.Bar=function(t,r){return r.type="bar",new e(t,r)}},Chart_Bubble=function(e){e.Bubble=function(t,r){return r.type="bubble",new e(t,r)}},Chart_Doughnut=function(e){e.Doughnut=function(t,r){return r.type="doughnut",new e(t,r)}},Chart_Line=function(e){e.Line=function(t,r){return r.type="line",new e(t,r)}},Chart_PolarArea=function(e){e.PolarArea=function(t,r){return r.type="polarArea",new e(t,r)}},Chart_Radar=function(e){e.Radar=function(t,r){return r.type="radar",new e(t,r)}},Chart_Scatter=function(e){e.Scatter=function(t,r){return r.type="scatter",new e(t,r)}};core_defaults._set("global",{plugins:{filler:{propagate:!0}}});var mappers={dataset:function(e){var t=e.fill,r=e.chart,n=r.getDatasetMeta(t),i=n&&r.isDatasetVisible(t)&&n.dataset._children||[],a=i.length||0;return a?function(e,t){return t<a&&i[t]._view||null}:null},boundary:function(e){var t=e.boundary,r=t?t.x:null,n=t?t.y:null;return function(e){return{x:null===r?e.x:r,y:null===n?e.y:n}}}};function decodeFill(e,t,r){var n,i=e._model||{},a=i.fill;if(void 0===a&&(a=!!i.backgroundColor),!1===a||null===a)return!1;if(!0===a)return"origin";if(n=parseFloat(a,10),isFinite(n)&&Math.floor(n)===n)return"-"!==a[0]&&"+"!==a[0]||(n=t+n),!(n===t||n<0||n>=r)&&n;switch(a){case"bottom":return"start";case"top":return"end";case"zero":return"origin";case"origin":case"start":case"end":return a;default:return!1}}function computeBoundary(e){var t,r=e.el._model||{},n=e.el._scale||{},i=e.fill,a=null;if(isFinite(i))return null;if("start"===i?a=void 0===r.scaleBottom?n.bottom:r.scaleBottom:"end"===i?a=void 0===r.scaleTop?n.top:r.scaleTop:void 0!==r.scaleZero?a=r.scaleZero:n.getBasePosition?a=n.getBasePosition():n.getBasePixel&&(a=n.getBasePixel()),void 0!==a&&null!==a){if(void 0!==a.x&&void 0!==a.y)return a;if("number"==typeof a&&isFinite(a))return{x:(t=n.isHorizontal())?a:null,y:t?null:a}}return null}function resolveTarget(e,t,r){var n,i=e[t].fill,a=[t];if(!r)return i;for(;!1!==i&&-1===a.indexOf(i);){if(!isFinite(i))return i;if(!(n=e[i]))return!1;if(n.visible)return i;a.push(i),i=n.fill}return!1}function createMapper(e){var t=e.fill,r="dataset";return!1===t?null:(isFinite(t)||(r="boundary"),mappers[r](e))}function isDrawable(e){return e&&!e.skip}function drawArea(e,t,r,n,i){var a;if(n&&i){for(e.moveTo(t[0].x,t[0].y),a=1;a<n;++a)helpers$1.canvas.lineTo(e,t[a-1],t[a]);for(e.lineTo(r[i-1].x,r[i-1].y),a=i-1;a>0;--a)helpers$1.canvas.lineTo(e,r[a],r[a-1],!0)}}function doFill(e,t,r,n,i,a){var o,s,l,u,c,d,h,f=t.length,p=n.spanGaps,g=[],m=[],v=0,y=0;for(e.beginPath(),o=0,s=f+!!a;o<s;++o)c=r(u=t[l=o%f]._view,l,n),d=isDrawable(u),h=isDrawable(c),d&&h?(v=g.push(u),y=m.push(c)):v&&y&&(p?(d&&g.push(u),h&&m.push(c)):(drawArea(e,g,m,v,y),v=y=0,g=[],m=[]));drawArea(e,g,m,v,y),e.closePath(),e.fillStyle=i,e.fill()}var plugin_filler={id:"filler",afterDatasetsUpdate:function(e,t){var r,n,i,a,o=(e.data.datasets||[]).length,s=t.propagate,l=[];for(n=0;n<o;++n)a=null,(i=(r=e.getDatasetMeta(n)).dataset)&&i._model&&i instanceof elements.Line&&(a={visible:e.isDatasetVisible(n),fill:decodeFill(i,n,o),chart:e,el:i}),r.$filler=a,l.push(a);for(n=0;n<o;++n)(a=l[n])&&(a.fill=resolveTarget(l,n,s),a.boundary=computeBoundary(a),a.mapper=createMapper(a))},beforeDatasetDraw:function(e,t){var r=t.meta.$filler;if(r){var n=e.ctx,i=r.el,a=i._view,o=i._children||[],s=r.mapper,l=a.backgroundColor||core_defaults.global.defaultColor;s&&l&&o.length&&(helpers$1.canvas.clipArea(n,e.chartArea),doFill(n,o,s,a,l,i._loop),helpers$1.canvas.unclipArea(n))}}},noop$2=helpers$1.noop;function getBoxWidth(e,t){return e.usePointStyle?t*Math.SQRT2:e.boxWidth}core_defaults._set("global",{legend:{display:!0,position:"top",fullWidth:!0,reverse:!1,weight:1e3,onClick:function(e,t){var r=t.datasetIndex,n=this.chart,i=n.getDatasetMeta(r);i.hidden=null===i.hidden?!n.data.datasets[r].hidden:null,n.update()},onHover:null,labels:{boxWidth:40,padding:10,generateLabels:function(e){var t=e.data;return helpers$1.isArray(t.datasets)?t.datasets.map(function(t,r){return{text:t.label,fillStyle:helpers$1.isArray(t.backgroundColor)?t.backgroundColor[0]:t.backgroundColor,hidden:!e.isDatasetVisible(r),lineCap:t.borderCapStyle,lineDash:t.borderDash,lineDashOffset:t.borderDashOffset,lineJoin:t.borderJoinStyle,lineWidth:t.borderWidth,strokeStyle:t.borderColor,pointStyle:t.pointStyle,datasetIndex:r}},this):[]}}},legendCallback:function(e){var t=[];t.push('<ul class="'+e.id+'-legend">');for(var r=0;r<e.data.datasets.length;r++)t.push('<li><span style="background-color:'+e.data.datasets[r].backgroundColor+'"></span>'),e.data.datasets[r].label&&t.push(e.data.datasets[r].label),t.push("</li>");return t.push("</ul>"),t.join("")}});var Legend=core_element.extend({initialize:function(e){helpers$1.extend(this,e),this.legendHitBoxes=[],this.doughnutMode=!1},beforeUpdate:noop$2,update:function(e,t,r){var n=this;return n.beforeUpdate(),n.maxWidth=e,n.maxHeight=t,n.margins=r,n.beforeSetDimensions(),n.setDimensions(),n.afterSetDimensions(),n.beforeBuildLabels(),n.buildLabels(),n.afterBuildLabels(),n.beforeFit(),n.fit(),n.afterFit(),n.afterUpdate(),n.minSize},afterUpdate:noop$2,beforeSetDimensions:noop$2,setDimensions:function(){var e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=0,e.right=e.width):(e.height=e.maxHeight,e.top=0,e.bottom=e.height),e.paddingLeft=0,e.paddingTop=0,e.paddingRight=0,e.paddingBottom=0,e.minSize={width:0,height:0}},afterSetDimensions:noop$2,beforeBuildLabels:noop$2,buildLabels:function(){var e=this,t=e.options.labels||{},r=helpers$1.callback(t.generateLabels,[e.chart],e)||[];t.filter&&(r=r.filter(function(r){return t.filter(r,e.chart.data)})),e.options.reverse&&r.reverse(),e.legendItems=r},afterBuildLabels:noop$2,beforeFit:noop$2,fit:function(){var e=this,t=e.options,r=t.labels,n=t.display,i=e.ctx,a=core_defaults.global,o=helpers$1.valueOrDefault,s=o(r.fontSize,a.defaultFontSize),l=o(r.fontStyle,a.defaultFontStyle),u=o(r.fontFamily,a.defaultFontFamily),c=helpers$1.fontString(s,l,u),d=e.legendHitBoxes=[],h=e.minSize,f=e.isHorizontal();if(f?(h.width=e.maxWidth,h.height=n?10:0):(h.width=n?10:0,h.height=e.maxHeight),n)if(i.font=c,f){var p=e.lineWidths=[0],g=e.legendItems.length?s+r.padding:0;i.textAlign="left",i.textBaseline="top",helpers$1.each(e.legendItems,function(t,n){var a=getBoxWidth(r,s)+s/2+i.measureText(t.text).width;p[p.length-1]+a+r.padding>=e.width&&(g+=s+r.padding,p[p.length]=e.left),d[n]={left:0,top:0,width:a,height:s},p[p.length-1]+=a+r.padding}),h.height+=g}else{var m=r.padding,v=e.columnWidths=[],y=r.padding,b=0,_=0,w=s+m;helpers$1.each(e.legendItems,function(e,t){var n=getBoxWidth(r,s)+s/2+i.measureText(e.text).width;_+w>h.height&&(y+=b+r.padding,v.push(b),b=0,_=0),b=Math.max(b,n),_+=w,d[t]={left:0,top:0,width:n,height:s}}),y+=b,v.push(b),h.width+=y}e.width=h.width,e.height=h.height},afterFit:noop$2,isHorizontal:function(){return"top"===this.options.position||"bottom"===this.options.position},draw:function(){var e=this,t=e.options,r=t.labels,n=core_defaults.global,i=n.elements.line,a=e.width,o=e.lineWidths;if(t.display){var s,l=e.ctx,u=helpers$1.valueOrDefault,c=u(r.fontColor,n.defaultFontColor),d=u(r.fontSize,n.defaultFontSize),h=u(r.fontStyle,n.defaultFontStyle),f=u(r.fontFamily,n.defaultFontFamily),p=helpers$1.fontString(d,h,f);l.textAlign="left",l.textBaseline="middle",l.lineWidth=.5,l.strokeStyle=c,l.fillStyle=c,l.font=p;var g=getBoxWidth(r,d),m=e.legendHitBoxes,v=e.isHorizontal();s=v?{x:e.left+(a-o[0])/2,y:e.top+r.padding,line:0}:{x:e.left+r.padding,y:e.top+r.padding,line:0};var y=d+r.padding;helpers$1.each(e.legendItems,function(c,h){var f=l.measureText(c.text).width,p=g+d/2+f,b=s.x,_=s.y;v?b+p>=a&&(_=s.y+=y,s.line++,b=s.x=e.left+(a-o[s.line])/2):_+y>e.bottom&&(b=s.x=b+e.columnWidths[s.line]+r.padding,_=s.y=e.top+r.padding,s.line++),function(e,r,a){if(!(isNaN(g)||g<=0)){l.save(),l.fillStyle=u(a.fillStyle,n.defaultColor),l.lineCap=u(a.lineCap,i.borderCapStyle),l.lineDashOffset=u(a.lineDashOffset,i.borderDashOffset),l.lineJoin=u(a.lineJoin,i.borderJoinStyle),l.lineWidth=u(a.lineWidth,i.borderWidth),l.strokeStyle=u(a.strokeStyle,n.defaultColor);var o=0===u(a.lineWidth,i.borderWidth);if(l.setLineDash&&l.setLineDash(u(a.lineDash,i.borderDash)),t.labels&&t.labels.usePointStyle){var s=d*Math.SQRT2/2,c=s/Math.SQRT2,h=e+c,f=r+c;helpers$1.canvas.drawPoint(l,a.pointStyle,s,h,f)}else o||l.strokeRect(e,r,g,d),l.fillRect(e,r,g,d);l.restore()}}(b,_,c),m[h].left=b,m[h].top=_,function(e,t,r,n){var i=d/2,a=g+i+e,o=t+i;l.fillText(r.text,a,o),r.hidden&&(l.beginPath(),l.lineWidth=2,l.moveTo(a,o),l.lineTo(a+n,o),l.stroke())}(b,_,c,f),v?s.x+=p+r.padding:s.y+=y})}},handleEvent:function(e){var t=this,r=t.options,n="mouseup"===e.type?"click":e.type,i=!1;if("mousemove"===n){if(!r.onHover)return}else{if("click"!==n)return;if(!r.onClick)return}var a=e.x,o=e.y;if(a>=t.left&&a<=t.right&&o>=t.top&&o<=t.bottom)for(var s=t.legendHitBoxes,l=0;l<s.length;++l){var u=s[l];if(a>=u.left&&a<=u.left+u.width&&o>=u.top&&o<=u.top+u.height){if("click"===n){r.onClick.call(t,e.native,t.legendItems[l]),i=!0;break}if("mousemove"===n){r.onHover.call(t,e.native,t.legendItems[l]),i=!0;break}}}return i}});function createNewLegendAndAttach(e,t){var r=new Legend({ctx:e.ctx,options:t,chart:e});core_layouts.configure(e,r,t),core_layouts.addBox(e,r),e.legend=r}var plugin_legend={id:"legend",_element:Legend,beforeInit:function(e){var t=e.options.legend;t&&createNewLegendAndAttach(e,t)},beforeUpdate:function(e){var t=e.options.legend,r=e.legend;t?(helpers$1.mergeIf(t,core_defaults.global.legend),r?(core_layouts.configure(e,r,t),r.options=t):createNewLegendAndAttach(e,t)):r&&(core_layouts.removeBox(e,r),delete e.legend)},afterEvent:function(e,t){var r=e.legend;r&&r.handleEvent(t)}},noop$3=helpers$1.noop;core_defaults._set("global",{title:{display:!1,fontStyle:"bold",fullWidth:!0,lineHeight:1.2,padding:10,position:"top",text:"",weight:2e3}});var Title=core_element.extend({initialize:function(e){helpers$1.extend(this,e),this.legendHitBoxes=[]},beforeUpdate:noop$3,update:function(e,t,r){var n=this;return n.beforeUpdate(),n.maxWidth=e,n.maxHeight=t,n.margins=r,n.beforeSetDimensions(),n.setDimensions(),n.afterSetDimensions(),n.beforeBuildLabels(),n.buildLabels(),n.afterBuildLabels(),n.beforeFit(),n.fit(),n.afterFit(),n.afterUpdate(),n.minSize},afterUpdate:noop$3,beforeSetDimensions:noop$3,setDimensions:function(){var e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=0,e.right=e.width):(e.height=e.maxHeight,e.top=0,e.bottom=e.height),e.paddingLeft=0,e.paddingTop=0,e.paddingRight=0,e.paddingBottom=0,e.minSize={width:0,height:0}},afterSetDimensions:noop$3,beforeBuildLabels:noop$3,buildLabels:noop$3,afterBuildLabels:noop$3,beforeFit:noop$3,fit:function(){var e=this,t=helpers$1.valueOrDefault,r=e.options,n=r.display,i=t(r.fontSize,core_defaults.global.defaultFontSize),a=e.minSize,o=helpers$1.isArray(r.text)?r.text.length:1,s=helpers$1.options.toLineHeight(r.lineHeight,i),l=n?o*s+2*r.padding:0;e.isHorizontal()?(a.width=e.maxWidth,a.height=l):(a.width=l,a.height=e.maxHeight),e.width=a.width,e.height=a.height},afterFit:noop$3,isHorizontal:function(){var e=this.options.position;return"top"===e||"bottom"===e},draw:function(){var e=this,t=e.ctx,r=helpers$1.valueOrDefault,n=e.options,i=core_defaults.global;if(n.display){var a,o,s,l=r(n.fontSize,i.defaultFontSize),u=r(n.fontStyle,i.defaultFontStyle),c=r(n.fontFamily,i.defaultFontFamily),d=helpers$1.fontString(l,u,c),h=helpers$1.options.toLineHeight(n.lineHeight,l),f=h/2+n.padding,p=0,g=e.top,m=e.left,v=e.bottom,y=e.right;t.fillStyle=r(n.fontColor,i.defaultFontColor),t.font=d,e.isHorizontal()?(o=m+(y-m)/2,s=g+f,a=y-m):(o="left"===n.position?m+f:y-f,s=g+(v-g)/2,a=v-g,p=Math.PI*("left"===n.position?-.5:.5)),t.save(),t.translate(o,s),t.rotate(p),t.textAlign="center",t.textBaseline="middle";var b=n.text;if(helpers$1.isArray(b))for(var _=0,w=0;w<b.length;++w)t.fillText(b[w],0,_,a),_+=h;else t.fillText(b,0,0,a);t.restore()}}});function createNewTitleBlockAndAttach(e,t){var r=new Title({ctx:e.ctx,options:t,chart:e});core_layouts.configure(e,r,t),core_layouts.addBox(e,r),e.titleBlock=r}var plugin_title={id:"title",_element:Title,beforeInit:function(e){var t=e.options.title;t&&createNewTitleBlockAndAttach(e,t)},beforeUpdate:function(e){var t=e.options.title,r=e.titleBlock;t?(helpers$1.mergeIf(t,core_defaults.global.title),r?(core_layouts.configure(e,r,t),r.options=t):createNewTitleBlockAndAttach(e,t)):r&&(core_layouts.removeBox(e,r),delete e.titleBlock)}},plugins={},filler=plugin_filler,legend=plugin_legend,title=plugin_title;plugins.filler=filler,plugins.legend=legend,plugins.title=title;var Chart$1=core();for(var k in Chart$1.helpers=helpers$1,core_helpers(Chart$1),Chart$1.Animation=core_animation,Chart$1.animationService=core_animations,Chart$1.defaults=core_defaults,Chart$1.Element=core_element,Chart$1.elements=elements,Chart$1.Interaction=core_interaction,Chart$1.layouts=core_layouts,Chart$1.platform=platform,Chart$1.plugins=core_plugins,Chart$1.Scale=core_scale,Chart$1.scaleService=core_scaleService,Chart$1.Ticks=core_ticks,Chart$1.Tooltip=core_tooltip,core_controller(Chart$1),core_datasetController(Chart$1),scale_linearbase(Chart$1),scale_category(Chart$1),scale_linear(Chart$1),scale_logarithmic(Chart$1),scale_radialLinear(Chart$1),scale_time(Chart$1),controller_bar(Chart$1),controller_bubble(Chart$1),controller_doughnut(Chart$1),controller_line(Chart$1),controller_polarArea(Chart$1),controller_radar(Chart$1),controller_scatter(Chart$1),Chart_Bar(Chart$1),Chart_Bubble(Chart$1),Chart_Doughnut(Chart$1),Chart_Line(Chart$1),Chart_PolarArea(Chart$1),Chart_Radar(Chart$1),Chart_Scatter(Chart$1),plugins)plugins.hasOwnProperty(k)&&Chart$1.plugins.register(plugins[k]);Chart$1.platform.initialize();var chart=Chart$1;function generateChart(e,t){return{render:function(e){return e("div",{style:this.styles,class:this.cssClasses},[e("canvas",{attrs:{id:this.chartId,width:this.width,height:this.height},ref:"canvas"})])},props:{chartId:{default:e,type:String},width:{default:400,type:Number},height:{default:400,type:Number},cssClasses:{type:String,default:""},styles:{type:Object},plugins:{type:Array,default:function(){return[]}}},data:function(){return{_chart:null,_plugins:this.plugins}},methods:{addPlugin:function(e){this.$data._plugins.push(e)},generateLegend:function(){if(this.$data._chart)return this.$data._chart.generateLegend()},renderChart:function(e,r){this.$data._chart&&this.$data._chart.destroy(),this.$data._chart=new chart(this.$refs.canvas.getContext("2d"),{type:t,data:e,options:r,plugins:this.$data._plugins})}},beforeDestroy:function(){this.$data._chart&&this.$data._chart.destroy()}}}"undefined"!=typeof window&&(window.Chart=Chart$1),Chart$1.Legend=plugins.legend._element,Chart$1.Title=plugins.title._element,Chart$1.pluginService=Chart$1.plugins,Chart$1.PluginBase=Chart$1.Element.extend({}),Chart$1.canvasHelpers=Chart$1.helpers.canvas,Chart$1.layoutService=Chart$1.layouts;var Bar=generateChart("bar-chart","bar"),HorizontalBar=generateChart("horizontalbar-chart","horizontalBar"),Line$1=generateChart("line-chart","line"),Pie=generateChart("pie-chart","pie"),reactiveProp$1=mixins.reactiveProp;Chart.defaults.global.title.padding=20,Chart.defaults.global.title.fontSize=16,Chart.defaults.global.title.lineHeight=1.6;var script$1={extends:Bar,mixins:[reactiveProp$1],props:{options:{type:Object,default:function(){return{legend:{display:!1},lineTension:1}}}},mounted:function(){this.renderChart(this.chartData,this.options)}},__vue_script__$1=script$1,__vue_inject_styles__$1=void 0,__vue_scope_id__$1=void 0,__vue_module_identifier__$1=void 0,__vue_is_functional_template__$1=void 0,ChartComponent=normalizeComponent_1({},__vue_inject_styles__$1,__vue_script__$1,__vue_scope_id__$1,__vue_is_functional_template__$1,__vue_module_identifier__$1,void 0,void 0),chartLabels=["1980","1990","2000","2010","2020"],chartDataList=[6542564,7322564,8008278,8175133,5475133],ChartData={data:{labels:chartLabels,datasets:[{data:chartDataList,fill:!1,backgroundColor:["#2F334F","#3155A6","#F2695D","#EBBCD8","#F9A137"],borderColor:["#ACAEB9"],borderWidth:1}]},bar:{options:{title:{display:!0,text:"Population Chart"},legend:{display:!1},lineTension:1,scales:{xAxes:[{scaleLabel:{display:!0,labelString:"Years"}}],yAxes:[{scaleLabel:{display:!0,labelString:"Population"},ticks:{padding:25}}]}}},horizontalBar:{options:{title:{display:!0,text:"Population Chart"},legend:{display:!1},lineTension:1,scales:{xAxes:[{scaleLabel:{display:!0,labelString:"Population"}}],yAxes:[{scaleLabel:{display:!0,labelString:"Years"},ticks:{padding:25}}]}}},pie:{options:{title:{display:!0,text:"Population Chart"},legend:{display:!0},lineTension:1}}},chartType="bar",ChartBar=function(e,t){void 0===e&&(e={}),void 0===t&&(t={}),this.data=t,this.settings=e,this.init()};ChartBar.prototype.init=function(){Vue.component("nyco-chart-"+chartType,ChartComponent),new Vue({el:'[data-js="chart-'+chartType+'"]',delimiters:["v{","}"],data:function(){return{data:ChartData.data,options:ChartData.bar.options}}})},ChartBar.prototype._constants=function(e){console.dir(e)};var reactiveProp$2=mixins.reactiveProp;Chart.defaults.global.title.padding=20,Chart.defaults.global.title.fontSize=16,Chart.defaults.global.title.lineHeight=1.6;var script$2={extends:HorizontalBar,mixins:[reactiveProp$2],props:{options:{type:Object,default:function(){return{legend:{display:!1},lineTension:1}}}},mounted:function(){this.renderChart(this.chartData,this.options)}},__vue_script__$2=script$2,__vue_inject_styles__$2=void 0,__vue_scope_id__$2=void 0,__vue_module_identifier__$2=void 0,__vue_is_functional_template__$2=void 0,ChartComponent$1=normalizeComponent_1({},__vue_inject_styles__$2,__vue_script__$2,__vue_scope_id__$2,__vue_is_functional_template__$2,__vue_module_identifier__$2,void 0,void 0),chartType$1="horizontal-bar",ChartHorizontalBar=function(e,t){void 0===e&&(e={}),void 0===t&&(t={}),this.data=t,this.settings=e,this.init()};ChartHorizontalBar.prototype.init=function(){Vue.component("nyco-chart-"+chartType$1,ChartComponent$1),new Vue({el:'[data-js="chart-'+chartType$1+'"]',delimiters:["v{","}"],data:function(){return{data:ChartData.data,options:ChartData.horizontalBar.options}}})},ChartHorizontalBar.prototype._constants=function(e){console.dir(e)};var reactiveProp$3=mixins.reactiveProp;Chart.defaults.global.title.padding=20,Chart.defaults.global.title.fontSize=16,Chart.defaults.global.title.lineHeight=1.6;var script$3={extends:Line$1,mixins:[reactiveProp$3],props:{options:{type:Object,default:function(){return{legend:{display:!1},lineTension:1}}}},mounted:function(){this.renderChart(this.chartData,this.options)}},__vue_script__$3=script$3,__vue_inject_styles__$3=void 0,__vue_scope_id__$3=void 0,__vue_module_identifier__$3=void 0,__vue_is_functional_template__$3=void 0,ChartComponent$2=normalizeComponent_1({},__vue_inject_styles__$3,__vue_script__$3,__vue_scope_id__$3,__vue_is_functional_template__$3,__vue_module_identifier__$3,void 0,void 0),chartType$2="line",ChartLine=function(e,t){void 0===e&&(e={}),void 0===t&&(t={}),this.data=t,this.settings=e,this.init()};ChartLine.prototype.init=function(){Vue.component("nyco-chart-"+chartType$2,ChartComponent$2),new Vue({el:'[data-js="chart-'+chartType$2+'"]',delimiters:["v{","}"],data:function(){return{data:ChartData.data,options:ChartData.bar.options}}})},ChartLine.prototype._constants=function(e){console.dir(e)};var reactiveProp$4=mixins.reactiveProp;Chart.defaults.global.title.padding=20,Chart.defaults.global.title.fontSize=16,Chart.defaults.global.title.lineHeight=1.6;var script$4={extends:Pie,mixins:[reactiveProp$4],props:{options:{type:Object,default:function(){return{legend:{display:!0},lineTension:1}}}},mounted:function(){this.renderChart(this.chartData,this.options)}},__vue_script__$4=script$4,__vue_inject_styles__$4=void 0,__vue_scope_id__$4=void 0,__vue_module_identifier__$4=void 0,__vue_is_functional_template__$4=void 0,ChartComponent$3=normalizeComponent_1({},__vue_inject_styles__$4,__vue_script__$4,__vue_scope_id__$4,__vue_is_functional_template__$4,__vue_module_identifier__$4,void 0,void 0),chartType$3="pie",ChartPie=function(e,t){void 0===e&&(e={}),void 0===t&&(t={}),this.data=t,this.settings=e,this.init()};ChartPie.prototype.init=function(){Vue.component("nyco-chart-"+chartType$3,ChartComponent$3),new Vue({el:'[data-js="chart-'+chartType$3+'"]',delimiters:["v{","}"],data:function(){return{data:ChartData.data,options:ChartData.pie.options}}})},ChartPie.prototype._constants=function(e){console.dir(e)};var script$5={props:["data"],data:function(){return{map:null,mapLayers:[]}},mounted:function(){this.initializeMap()},beforeDestroy:function(){},watch:{"data.boroughs":function(){this.createBoroughLayer(this.map,this.data.boroughs)},"data.neighborhoods":function(){this.createNeighborhoodLayer(this.map,this.data.neighborhoods)},mapLayers:function(){this.toggleLayers(this.map,this.mapLayers)}},methods:{trackMapLayers:function(e){if(this.mapLayers.includes(e))throw new Error("Map layer already exists");this.mapLayers.push(e)},createBoroughLayer:function(e,t){if(!e||!t)throw Error("Required "+(e?"layerData":"map")+" param is empty");this.trackMapLayers("boroughs"),e.on("load",function(r){e.addSource("boroughs",{type:"geojson",data:t}),e.addLayer({id:"boroughs",type:"fill",source:"boroughs",paint:{"fill-color":"#ffa133","fill-opacity":.6}})})},createNeighborhoodLayer:function(e,t){if(!e||!t)throw Error("Required "+(e?"layerData":"map")+" param is empty");var r="neighborhoods";this.trackMapLayers(r),e.on("load",function(n){e.addSource(""+r,{type:"geojson",data:t}),e.addLayer({id:""+r,type:"fill",source:""+r,paint:{"fill-color":"#f2695d","fill-opacity":.5}})})},toggleLayers:function(e,t){for(var r=t,n=document.getElementById("nyco-map-menu");n.firstChild;)n.removeChild(n.firstChild);for(var i=0;i<r.length;i++){var a=r[i],o=document.createElement("a");o.href="#",o.classList.add("active","inline-block","pr-1"),o.textContent=a,o.onclick=function(t){t.preventDefault(),t.stopPropagation();var r=this.textContent;"visible"===e.getLayoutProperty(r,"visibility")?(e.setLayoutProperty(r,"visibility","none"),this.classList.remove("active")):(this.classList.add("active"),e.setLayoutProperty(r,"visibility","visible"))},n.appendChild(o)}},initializeMap:function(){mapboxgl.accessToken=this.data.api_key,this.map=new mapboxgl.Map({container:"nyco-map",center:[-73.98671,40.693391],zoom:9,style:"mapbox://styles/mapbox/streets-v11"}),this.map.addControl(new mapboxgl.NavigationControl)}}},__vue_script__$5=script$5,__vue_render__$1=function(){var e=this.$createElement;this._self._c;return this._m(0)},__vue_staticRenderFns__$1=[function(){var e=this.$createElement,t=this._self._c||e;return t("div",[t("p",[this._v("Hello, I'm a map!")]),this._v(" "),t("div",{staticStyle:{height:"400px",width:"500px"},attrs:{id:"nyco-map"}}),this._v(" "),t("div",{staticClass:"pt-2",attrs:{id:"nyco-map-menu"}})])}];__vue_render__$1._withStripped=!0;var __vue_inject_styles__$5=void 0,__vue_scope_id__$5=void 0,__vue_module_identifier__$5=void 0,__vue_is_functional_template__$5=!1,MapComponent=normalizeComponent_1({render:__vue_render__$1,staticRenderFns:__vue_staticRenderFns__$1},__vue_inject_styles__$5,__vue_script__$5,__vue_scope_id__$5,__vue_is_functional_template__$5,__vue_module_identifier__$5,void 0,void 0),MapData={data:{api_key:"XXX",boroughs:{},neighborhoods:{}}},lookup$1=[],revLookup=[],Arr="undefined"!=typeof Uint8Array?Uint8Array:Array,inited=!1;function init(){inited=!0;for(var e="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",t=0,r=e.length;t<r;++t)lookup$1[t]=e[t],revLookup[e.charCodeAt(t)]=t;revLookup["-".charCodeAt(0)]=62,revLookup["_".charCodeAt(0)]=63}function toByteArray(e){var t,r,n,i,a,o;inited||init();var s=e.length;if(s%4>0)throw new Error("Invalid string. Length must be a multiple of 4");a="="===e[s-2]?2:"="===e[s-1]?1:0,o=new Arr(3*s/4-a),n=a>0?s-4:s;var l=0;for(t=0,r=0;t<n;t+=4,r+=3)i=revLookup[e.charCodeAt(t)]<<18|revLookup[e.charCodeAt(t+1)]<<12|revLookup[e.charCodeAt(t+2)]<<6|revLookup[e.charCodeAt(t+3)],o[l++]=i>>16&255,o[l++]=i>>8&255,o[l++]=255&i;return 2===a?(i=revLookup[e.charCodeAt(t)]<<2|revLookup[e.charCodeAt(t+1)]>>4,o[l++]=255&i):1===a&&(i=revLookup[e.charCodeAt(t)]<<10|revLookup[e.charCodeAt(t+1)]<<4|revLookup[e.charCodeAt(t+2)]>>2,o[l++]=i>>8&255,o[l++]=255&i),o}function tripletToBase64(e){return lookup$1[e>>18&63]+lookup$1[e>>12&63]+lookup$1[e>>6&63]+lookup$1[63&e]}function encodeChunk(e,t,r){for(var n,i=[],a=t;a<r;a+=3)n=(e[a]<<16)+(e[a+1]<<8)+e[a+2],i.push(tripletToBase64(n));return i.join("")}function fromByteArray(e){var t;inited||init();for(var r=e.length,n=r%3,i="",a=[],o=0,s=r-n;o<s;o+=16383)a.push(encodeChunk(e,o,o+16383>s?s:o+16383));return 1===n?(t=e[r-1],i+=lookup$1[t>>2],i+=lookup$1[t<<4&63],i+="=="):2===n&&(t=(e[r-2]<<8)+e[r-1],i+=lookup$1[t>>10],i+=lookup$1[t>>4&63],i+=lookup$1[t<<2&63],i+="="),a.push(i),a.join("")}function read(e,t,r,n,i){var a,o,s=8*i-n-1,l=(1<<s)-1,u=l>>1,c=-7,d=r?i-1:0,h=r?-1:1,f=e[t+d];for(d+=h,a=f&(1<<-c)-1,f>>=-c,c+=s;c>0;a=256*a+e[t+d],d+=h,c-=8);for(o=a&(1<<-c)-1,a>>=-c,c+=n;c>0;o=256*o+e[t+d],d+=h,c-=8);if(0===a)a=1-u;else{if(a===l)return o?NaN:1/0*(f?-1:1);o+=Math.pow(2,n),a-=u}return(f?-1:1)*o*Math.pow(2,a-n)}function write(e,t,r,n,i,a){var o,s,l,u=8*a-i-1,c=(1<<u)-1,d=c>>1,h=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,f=n?0:a-1,p=n?1:-1,g=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,o=c):(o=Math.floor(Math.log(t)/Math.LN2),t*(l=Math.pow(2,-o))<1&&(o--,l*=2),(t+=o+d>=1?h/l:h*Math.pow(2,1-d))*l>=2&&(o++,l/=2),o+d>=c?(s=0,o=c):o+d>=1?(s=(t*l-1)*Math.pow(2,i),o+=d):(s=t*Math.pow(2,d-1)*Math.pow(2,i),o=0));i>=8;e[r+f]=255&s,f+=p,s/=256,i-=8);for(o=o<<i|s,u+=i;u>0;e[r+f]=255&o,f+=p,o/=256,u-=8);e[r+f-p]|=128*g}var toString$2={}.toString,isArray$1=Array.isArray||function(e){return"[object Array]"==toString$2.call(e)},INSPECT_MAX_BYTES=50;function kMaxLength(){return Buffer$2.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function createBuffer(e,t){if(kMaxLength()<t)throw new RangeError("Invalid typed array length");return Buffer$2.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=Buffer$2.prototype:(null===e&&(e=new Buffer$2(t)),e.length=t),e}function Buffer$2(e,t,r){if(!(Buffer$2.TYPED_ARRAY_SUPPORT||this instanceof Buffer$2))return new Buffer$2(e,t,r);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return allocUnsafe$1(this,e)}return from$1(this,e,t,r)}function from$1(e,t,r,n){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?fromArrayBuffer(e,t,r,n):"string"==typeof t?fromString(e,t,r):fromObject(e,t)}function assertSize(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function alloc(e,t,r,n){return assertSize(t),t<=0?createBuffer(e,t):void 0!==r?"string"==typeof n?createBuffer(e,t).fill(r,n):createBuffer(e,t).fill(r):createBuffer(e,t)}function allocUnsafe$1(e,t){if(assertSize(t),e=createBuffer(e,t<0?0:0|checked(t)),!Buffer$2.TYPED_ARRAY_SUPPORT)for(var r=0;r<t;++r)e[r]=0;return e}function fromString(e,t,r){if("string"==typeof r&&""!==r||(r="utf8"),!Buffer$2.isEncoding(r))throw new TypeError('"encoding" must be a valid string encoding');var n=0|byteLength(t,r),i=(e=createBuffer(e,n)).write(t,r);return i!==n&&(e=e.slice(0,i)),e}function fromArrayLike(e,t){var r=t.length<0?0:0|checked(t.length);e=createBuffer(e,r);for(var n=0;n<r;n+=1)e[n]=255&t[n];return e}function fromArrayBuffer(e,t,r,n){if(t.byteLength,r<0||t.byteLength<r)throw new RangeError("'offset' is out of bounds");if(t.byteLength<r+(n||0))throw new RangeError("'length' is out of bounds");return t=void 0===r&&void 0===n?new Uint8Array(t):void 0===n?new Uint8Array(t,r):new Uint8Array(t,r,n),Buffer$2.TYPED_ARRAY_SUPPORT?(e=t).__proto__=Buffer$2.prototype:e=fromArrayLike(e,t),e}function fromObject(e,t){if(internalIsBuffer(t)){var r=0|checked(t.length);return 0===(e=createBuffer(e,r)).length?e:(t.copy(e,0,0,r),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||isnan(t.length)?createBuffer(e,0):fromArrayLike(e,t);if("Buffer"===t.type&&isArray$1(t.data))return fromArrayLike(e,t.data)}throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}function checked(e){if(e>=kMaxLength())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+kMaxLength().toString(16)+" bytes");return 0|e}function internalIsBuffer(e){return!(null==e||!e._isBuffer)}function byteLength(e,t){if(internalIsBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var r=e.length;if(0===r)return 0;for(var n=!1;;)switch(t){case"ascii":case"latin1":case"binary":return r;case"utf8":case"utf-8":case void 0:return utf8ToBytes(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*r;case"hex":return r>>>1;case"base64":return base64ToBytes(e).length;default:if(n)return utf8ToBytes(e).length;t=(""+t).toLowerCase(),n=!0}}function slowToString(e,t,r){var n=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===r||r>this.length)&&(r=this.length),r<=0)return"";if((r>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return hexSlice(this,t,r);case"utf8":case"utf-8":return utf8Slice(this,t,r);case"ascii":return asciiSlice(this,t,r);case"latin1":case"binary":return latin1Slice(this,t,r);case"base64":return base64Slice(this,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return utf16leSlice(this,t,r);default:if(n)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),n=!0}}function swap(e,t,r){var n=e[t];e[t]=e[r],e[r]=n}function bidirectionalIndexOf(e,t,r,n,i){if(0===e.length)return-1;if("string"==typeof r?(n=r,r=0):r>2147483647?r=2147483647:r<-2147483648&&(r=-2147483648),r=+r,isNaN(r)&&(r=i?0:e.length-1),r<0&&(r=e.length+r),r>=e.length){if(i)return-1;r=e.length-1}else if(r<0){if(!i)return-1;r=0}if("string"==typeof t&&(t=Buffer$2.from(t,n)),internalIsBuffer(t))return 0===t.length?-1:arrayIndexOf(e,t,r,n,i);if("number"==typeof t)return t&=255,Buffer$2.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(e,t,r):Uint8Array.prototype.lastIndexOf.call(e,t,r):arrayIndexOf(e,[t],r,n,i);throw new TypeError("val must be string, number or Buffer")}function arrayIndexOf(e,t,r,n,i){var a,o=1,s=e.length,l=t.length;if(void 0!==n&&("ucs2"===(n=String(n).toLowerCase())||"ucs-2"===n||"utf16le"===n||"utf-16le"===n)){if(e.length<2||t.length<2)return-1;o=2,s/=2,l/=2,r/=2}function u(e,t){return 1===o?e[t]:e.readUInt16BE(t*o)}if(i){var c=-1;for(a=r;a<s;a++)if(u(e,a)===u(t,-1===c?0:a-c)){if(-1===c&&(c=a),a-c+1===l)return c*o}else-1!==c&&(a-=a-c),c=-1}else for(r+l>s&&(r=s-l),a=r;a>=0;a--){for(var d=!0,h=0;h<l;h++)if(u(e,a+h)!==u(t,h)){d=!1;break}if(d)return a}return-1}function hexWrite(e,t,r,n){r=Number(r)||0;var i=e.length-r;n?(n=Number(n))>i&&(n=i):n=i;var a=t.length;if(a%2!=0)throw new TypeError("Invalid hex string");n>a/2&&(n=a/2);for(var o=0;o<n;++o){var s=parseInt(t.substr(2*o,2),16);if(isNaN(s))return o;e[r+o]=s}return o}function utf8Write(e,t,r,n){return blitBuffer(utf8ToBytes(t,e.length-r),e,r,n)}function asciiWrite(e,t,r,n){return blitBuffer(asciiToBytes(t),e,r,n)}function latin1Write(e,t,r,n){return asciiWrite(e,t,r,n)}function base64Write(e,t,r,n){return blitBuffer(base64ToBytes(t),e,r,n)}function ucs2Write(e,t,r,n){return blitBuffer(utf16leToBytes(t,e.length-r),e,r,n)}function base64Slice(e,t,r){return 0===t&&r===e.length?fromByteArray(e):fromByteArray(e.slice(t,r))}function utf8Slice(e,t,r){r=Math.min(e.length,r);for(var n=[],i=t;i<r;){var a,o,s,l,u=e[i],c=null,d=u>239?4:u>223?3:u>191?2:1;if(i+d<=r)switch(d){case 1:u<128&&(c=u);break;case 2:128==(192&(a=e[i+1]))&&(l=(31&u)<<6|63&a)>127&&(c=l);break;case 3:a=e[i+1],o=e[i+2],128==(192&a)&&128==(192&o)&&(l=(15&u)<<12|(63&a)<<6|63&o)>2047&&(l<55296||l>57343)&&(c=l);break;case 4:a=e[i+1],o=e[i+2],s=e[i+3],128==(192&a)&&128==(192&o)&&128==(192&s)&&(l=(15&u)<<18|(63&a)<<12|(63&o)<<6|63&s)>65535&&l<1114112&&(c=l)}null===c?(c=65533,d=1):c>65535&&(c-=65536,n.push(c>>>10&1023|55296),c=56320|1023&c),n.push(c),i+=d}return decodeCodePointsArray(n)}Buffer$2.TYPED_ARRAY_SUPPORT=void 0===global$1.TYPED_ARRAY_SUPPORT||global$1.TYPED_ARRAY_SUPPORT,Buffer$2.poolSize=8192,Buffer$2._augment=function(e){return e.__proto__=Buffer$2.prototype,e},Buffer$2.from=function(e,t,r){return from$1(null,e,t,r)},Buffer$2.TYPED_ARRAY_SUPPORT&&(Buffer$2.prototype.__proto__=Uint8Array.prototype,Buffer$2.__proto__=Uint8Array),Buffer$2.alloc=function(e,t,r){return alloc(null,e,t,r)},Buffer$2.allocUnsafe=function(e){return allocUnsafe$1(null,e)},Buffer$2.allocUnsafeSlow=function(e){return allocUnsafe$1(null,e)},Buffer$2.isBuffer=isBuffer$1,Buffer$2.compare=function(e,t){if(!internalIsBuffer(e)||!internalIsBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var r=e.length,n=t.length,i=0,a=Math.min(r,n);i<a;++i)if(e[i]!==t[i]){r=e[i],n=t[i];break}return r<n?-1:n<r?1:0},Buffer$2.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},Buffer$2.concat=function(e,t){if(!isArray$1(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return Buffer$2.alloc(0);var r;if(void 0===t)for(t=0,r=0;r<e.length;++r)t+=e[r].length;var n=Buffer$2.allocUnsafe(t),i=0;for(r=0;r<e.length;++r){var a=e[r];if(!internalIsBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(n,i),i+=a.length}return n},Buffer$2.byteLength=byteLength,Buffer$2.prototype._isBuffer=!0,Buffer$2.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)swap(this,t,t+1);return this},Buffer$2.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)swap(this,t,t+3),swap(this,t+1,t+2);return this},Buffer$2.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)swap(this,t,t+7),swap(this,t+1,t+6),swap(this,t+2,t+5),swap(this,t+3,t+4);return this},Buffer$2.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?utf8Slice(this,0,e):slowToString.apply(this,arguments)},Buffer$2.prototype.equals=function(e){if(!internalIsBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===Buffer$2.compare(this,e)},Buffer$2.prototype.inspect=function(){var e="",t=INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,t).match(/.{2}/g).join(" "),this.length>t&&(e+=" ... ")),"<Buffer "+e+">"},Buffer$2.prototype.compare=function(e,t,r,n,i){if(!internalIsBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===r&&(r=e?e.length:0),void 0===n&&(n=0),void 0===i&&(i=this.length),t<0||r>e.length||n<0||i>this.length)throw new RangeError("out of range index");if(n>=i&&t>=r)return 0;if(n>=i)return-1;if(t>=r)return 1;if(t>>>=0,r>>>=0,n>>>=0,i>>>=0,this===e)return 0;for(var a=i-n,o=r-t,s=Math.min(a,o),l=this.slice(n,i),u=e.slice(t,r),c=0;c<s;++c)if(l[c]!==u[c]){a=l[c],o=u[c];break}return a<o?-1:o<a?1:0},Buffer$2.prototype.includes=function(e,t,r){return-1!==this.indexOf(e,t,r)},Buffer$2.prototype.indexOf=function(e,t,r){return bidirectionalIndexOf(this,e,t,r,!0)},Buffer$2.prototype.lastIndexOf=function(e,t,r){return bidirectionalIndexOf(this,e,t,r,!1)},Buffer$2.prototype.write=function(e,t,r,n){if(void 0===t)n="utf8",r=this.length,t=0;else if(void 0===r&&"string"==typeof t)n=t,r=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(r)?(r|=0,void 0===n&&(n="utf8")):(n=r,r=void 0)}var i=this.length-t;if((void 0===r||r>i)&&(r=i),e.length>0&&(r<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");n||(n="utf8");for(var a=!1;;)switch(n){case"hex":return hexWrite(this,e,t,r);case"utf8":case"utf-8":return utf8Write(this,e,t,r);case"ascii":return asciiWrite(this,e,t,r);case"latin1":case"binary":return latin1Write(this,e,t,r);case"base64":return base64Write(this,e,t,r);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return ucs2Write(this,e,t,r);default:if(a)throw new TypeError("Unknown encoding: "+n);n=(""+n).toLowerCase(),a=!0}},Buffer$2.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var MAX_ARGUMENTS_LENGTH=4096;function decodeCodePointsArray(e){var t=e.length;if(t<=MAX_ARGUMENTS_LENGTH)return String.fromCharCode.apply(String,e);for(var r="",n=0;n<t;)r+=String.fromCharCode.apply(String,e.slice(n,n+=MAX_ARGUMENTS_LENGTH));return r}function asciiSlice(e,t,r){var n="";r=Math.min(e.length,r);for(var i=t;i<r;++i)n+=String.fromCharCode(127&e[i]);return n}function latin1Slice(e,t,r){var n="";r=Math.min(e.length,r);for(var i=t;i<r;++i)n+=String.fromCharCode(e[i]);return n}function hexSlice(e,t,r){var n=e.length;(!t||t<0)&&(t=0),(!r||r<0||r>n)&&(r=n);for(var i="",a=t;a<r;++a)i+=toHex(e[a]);return i}function utf16leSlice(e,t,r){for(var n=e.slice(t,r),i="",a=0;a<n.length;a+=2)i+=String.fromCharCode(n[a]+256*n[a+1]);return i}function checkOffset(e,t,r){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>r)throw new RangeError("Trying to access beyond buffer length")}function checkInt(e,t,r,n,i,a){if(!internalIsBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>i||t<a)throw new RangeError('"value" argument is out of bounds');if(r+n>e.length)throw new RangeError("Index out of range")}function objectWriteUInt16(e,t,r,n){t<0&&(t=65535+t+1);for(var i=0,a=Math.min(e.length-r,2);i<a;++i)e[r+i]=(t&255<<8*(n?i:1-i))>>>8*(n?i:1-i)}function objectWriteUInt32(e,t,r,n){t<0&&(t=4294967295+t+1);for(var i=0,a=Math.min(e.length-r,4);i<a;++i)e[r+i]=t>>>8*(n?i:3-i)&255}function checkIEEE754(e,t,r,n,i,a){if(r+n>e.length)throw new RangeError("Index out of range");if(r<0)throw new RangeError("Index out of range")}function writeFloat(e,t,r,n,i){return i||checkIEEE754(e,t,r,4,3.4028234663852886e38,-3.4028234663852886e38),write(e,t,r,n,23,4),r+4}function writeDouble(e,t,r,n,i){return i||checkIEEE754(e,t,r,8,1.7976931348623157e308,-1.7976931348623157e308),write(e,t,r,n,52,8),r+8}Buffer$2.prototype.slice=function(e,t){var r,n=this.length;if(e=~~e,t=void 0===t?n:~~t,e<0?(e+=n)<0&&(e=0):e>n&&(e=n),t<0?(t+=n)<0&&(t=0):t>n&&(t=n),t<e&&(t=e),Buffer$2.TYPED_ARRAY_SUPPORT)(r=this.subarray(e,t)).__proto__=Buffer$2.prototype;else{var i=t-e;r=new Buffer$2(i,void 0);for(var a=0;a<i;++a)r[a]=this[a+e]}return r},Buffer$2.prototype.readUIntLE=function(e,t,r){e|=0,t|=0,r||checkOffset(e,t,this.length);for(var n=this[e],i=1,a=0;++a<t&&(i*=256);)n+=this[e+a]*i;return n},Buffer$2.prototype.readUIntBE=function(e,t,r){e|=0,t|=0,r||checkOffset(e,t,this.length);for(var n=this[e+--t],i=1;t>0&&(i*=256);)n+=this[e+--t]*i;return n},Buffer$2.prototype.readUInt8=function(e,t){return t||checkOffset(e,1,this.length),this[e]},Buffer$2.prototype.readUInt16LE=function(e,t){return t||checkOffset(e,2,this.length),this[e]|this[e+1]<<8},Buffer$2.prototype.readUInt16BE=function(e,t){return t||checkOffset(e,2,this.length),this[e]<<8|this[e+1]},Buffer$2.prototype.readUInt32LE=function(e,t){return t||checkOffset(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},Buffer$2.prototype.readUInt32BE=function(e,t){return t||checkOffset(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},Buffer$2.prototype.readIntLE=function(e,t,r){e|=0,t|=0,r||checkOffset(e,t,this.length);for(var n=this[e],i=1,a=0;++a<t&&(i*=256);)n+=this[e+a]*i;return n>=(i*=128)&&(n-=Math.pow(2,8*t)),n},Buffer$2.prototype.readIntBE=function(e,t,r){e|=0,t|=0,r||checkOffset(e,t,this.length);for(var n=t,i=1,a=this[e+--n];n>0&&(i*=256);)a+=this[e+--n]*i;return a>=(i*=128)&&(a-=Math.pow(2,8*t)),a},Buffer$2.prototype.readInt8=function(e,t){return t||checkOffset(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},Buffer$2.prototype.readInt16LE=function(e,t){t||checkOffset(e,2,this.length);var r=this[e]|this[e+1]<<8;return 32768&r?4294901760|r:r},Buffer$2.prototype.readInt16BE=function(e,t){t||checkOffset(e,2,this.length);var r=this[e+1]|this[e]<<8;return 32768&r?4294901760|r:r},Buffer$2.prototype.readInt32LE=function(e,t){return t||checkOffset(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},Buffer$2.prototype.readInt32BE=function(e,t){return t||checkOffset(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},Buffer$2.prototype.readFloatLE=function(e,t){return t||checkOffset(e,4,this.length),read(this,e,!0,23,4)},Buffer$2.prototype.readFloatBE=function(e,t){return t||checkOffset(e,4,this.length),read(this,e,!1,23,4)},Buffer$2.prototype.readDoubleLE=function(e,t){return t||checkOffset(e,8,this.length),read(this,e,!0,52,8)},Buffer$2.prototype.readDoubleBE=function(e,t){return t||checkOffset(e,8,this.length),read(this,e,!1,52,8)},Buffer$2.prototype.writeUIntLE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||checkInt(this,e,t,r,Math.pow(2,8*r)-1,0);var i=1,a=0;for(this[t]=255&e;++a<r&&(i*=256);)this[t+a]=e/i&255;return t+r},Buffer$2.prototype.writeUIntBE=function(e,t,r,n){(e=+e,t|=0,r|=0,n)||checkInt(this,e,t,r,Math.pow(2,8*r)-1,0);var i=r-1,a=1;for(this[t+i]=255&e;--i>=0&&(a*=256);)this[t+i]=e/a&255;return t+r},Buffer$2.prototype.writeUInt8=function(e,t,r){return e=+e,t|=0,r||checkInt(this,e,t,1,255,0),Buffer$2.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},Buffer$2.prototype.writeUInt16LE=function(e,t,r){return e=+e,t|=0,r||checkInt(this,e,t,2,65535,0),Buffer$2.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):objectWriteUInt16(this,e,t,!0),t+2},Buffer$2.prototype.writeUInt16BE=function(e,t,r){return e=+e,t|=0,r||checkInt(this,e,t,2,65535,0),Buffer$2.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):objectWriteUInt16(this,e,t,!1),t+2},Buffer$2.prototype.writeUInt32LE=function(e,t,r){return e=+e,t|=0,r||checkInt(this,e,t,4,4294967295,0),Buffer$2.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):objectWriteUInt32(this,e,t,!0),t+4},Buffer$2.prototype.writeUInt32BE=function(e,t,r){return e=+e,t|=0,r||checkInt(this,e,t,4,4294967295,0),Buffer$2.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):objectWriteUInt32(this,e,t,!1),t+4},Buffer$2.prototype.writeIntLE=function(e,t,r,n){if(e=+e,t|=0,!n){var i=Math.pow(2,8*r-1);checkInt(this,e,t,r,i-1,-i)}var a=0,o=1,s=0;for(this[t]=255&e;++a<r&&(o*=256);)e<0&&0===s&&0!==this[t+a-1]&&(s=1),this[t+a]=(e/o>>0)-s&255;return t+r},Buffer$2.prototype.writeIntBE=function(e,t,r,n){if(e=+e,t|=0,!n){var i=Math.pow(2,8*r-1);checkInt(this,e,t,r,i-1,-i)}var a=r-1,o=1,s=0;for(this[t+a]=255&e;--a>=0&&(o*=256);)e<0&&0===s&&0!==this[t+a+1]&&(s=1),this[t+a]=(e/o>>0)-s&255;return t+r},Buffer$2.prototype.writeInt8=function(e,t,r){return e=+e,t|=0,r||checkInt(this,e,t,1,127,-128),Buffer$2.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},Buffer$2.prototype.writeInt16LE=function(e,t,r){return e=+e,t|=0,r||checkInt(this,e,t,2,32767,-32768),Buffer$2.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):objectWriteUInt16(this,e,t,!0),t+2},Buffer$2.prototype.writeInt16BE=function(e,t,r){return e=+e,t|=0,r||checkInt(this,e,t,2,32767,-32768),Buffer$2.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):objectWriteUInt16(this,e,t,!1),t+2},Buffer$2.prototype.writeInt32LE=function(e,t,r){return e=+e,t|=0,r||checkInt(this,e,t,4,2147483647,-2147483648),Buffer$2.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):objectWriteUInt32(this,e,t,!0),t+4},Buffer$2.prototype.writeInt32BE=function(e,t,r){return e=+e,t|=0,r||checkInt(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),Buffer$2.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):objectWriteUInt32(this,e,t,!1),t+4},Buffer$2.prototype.writeFloatLE=function(e,t,r){return writeFloat(this,e,t,!0,r)},Buffer$2.prototype.writeFloatBE=function(e,t,r){return writeFloat(this,e,t,!1,r)},Buffer$2.prototype.writeDoubleLE=function(e,t,r){return writeDouble(this,e,t,!0,r)},Buffer$2.prototype.writeDoubleBE=function(e,t,r){return writeDouble(this,e,t,!1,r)},Buffer$2.prototype.copy=function(e,t,r,n){if(r||(r=0),n||0===n||(n=this.length),t>=e.length&&(t=e.length),t||(t=0),n>0&&n<r&&(n=r),n===r)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(r<0||r>=this.length)throw new RangeError("sourceStart out of bounds");if(n<0)throw new RangeError("sourceEnd out of bounds");n>this.length&&(n=this.length),e.length-t<n-r&&(n=e.length-t+r);var i,a=n-r;if(this===e&&r<t&&t<n)for(i=a-1;i>=0;--i)e[i+t]=this[i+r];else if(a<1e3||!Buffer$2.TYPED_ARRAY_SUPPORT)for(i=0;i<a;++i)e[i+t]=this[i+r];else Uint8Array.prototype.set.call(e,this.subarray(r,r+a),t);return a},Buffer$2.prototype.fill=function(e,t,r,n){if("string"==typeof e){if("string"==typeof t?(n=t,t=0,r=this.length):"string"==typeof r&&(n=r,r=this.length),1===e.length){var i=e.charCodeAt(0);i<256&&(e=i)}if(void 0!==n&&"string"!=typeof n)throw new TypeError("encoding must be a string");if("string"==typeof n&&!Buffer$2.isEncoding(n))throw new TypeError("Unknown encoding: "+n)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<r)throw new RangeError("Out of range index");if(r<=t)return this;var a;if(t>>>=0,r=void 0===r?this.length:r>>>0,e||(e=0),"number"==typeof e)for(a=t;a<r;++a)this[a]=e;else{var o=internalIsBuffer(e)?e:utf8ToBytes(new Buffer$2(e,n).toString()),s=o.length;for(a=0;a<r-t;++a)this[a+t]=o[a%s]}return this};var INVALID_BASE64_RE=/[^+\/0-9A-Za-z-_]/g;function base64clean(e){if((e=stringtrim(e).replace(INVALID_BASE64_RE,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}function stringtrim(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}function toHex(e){return e<16?"0"+e.toString(16):e.toString(16)}function utf8ToBytes(e,t){var r;t=t||1/0;for(var n=e.length,i=null,a=[],o=0;o<n;++o){if((r=e.charCodeAt(o))>55295&&r<57344){if(!i){if(r>56319){(t-=3)>-1&&a.push(239,191,189);continue}if(o+1===n){(t-=3)>-1&&a.push(239,191,189);continue}i=r;continue}if(r<56320){(t-=3)>-1&&a.push(239,191,189),i=r;continue}r=65536+(i-55296<<10|r-56320)}else i&&(t-=3)>-1&&a.push(239,191,189);if(i=null,r<128){if((t-=1)<0)break;a.push(r)}else if(r<2048){if((t-=2)<0)break;a.push(r>>6|192,63&r|128)}else if(r<65536){if((t-=3)<0)break;a.push(r>>12|224,r>>6&63|128,63&r|128)}else{if(!(r<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;a.push(r>>18|240,r>>12&63|128,r>>6&63|128,63&r|128)}}return a}function asciiToBytes(e){for(var t=[],r=0;r<e.length;++r)t.push(255&e.charCodeAt(r));return t}function utf16leToBytes(e,t){for(var r,n,i,a=[],o=0;o<e.length&&!((t-=2)<0);++o)n=(r=e.charCodeAt(o))>>8,i=r%256,a.push(i),a.push(n);return a}function base64ToBytes(e){return toByteArray(base64clean(e))}function blitBuffer(e,t,r,n){for(var i=0;i<n&&!(i+r>=t.length||i>=e.length);++i)t[i+r]=e[i];return i}function isnan(e){return e!=e}function isBuffer$1(e){return null!=e&&(!!e._isBuffer||isFastBuffer(e)||isSlowBuffer(e))}function isFastBuffer(e){return!!e.constructor&&"function"==typeof e.constructor.isBuffer&&e.constructor.isBuffer(e)}function isSlowBuffer(e){return"function"==typeof e.readFloatLE&&"function"==typeof e.slice&&isFastBuffer(e.slice(0,0))}function defaultSetTimout(){throw new Error("setTimeout has not been defined")}function defaultClearTimeout(){throw new Error("clearTimeout has not been defined")}var cachedSetTimeout=defaultSetTimout,cachedClearTimeout=defaultClearTimeout;function runTimeout(e){if(cachedSetTimeout===setTimeout)return setTimeout(e,0);if((cachedSetTimeout===defaultSetTimout||!cachedSetTimeout)&&setTimeout)return cachedSetTimeout=setTimeout,setTimeout(e,0);try{return cachedSetTimeout(e,0)}catch(t){try{return cachedSetTimeout.call(null,e,0)}catch(t){return cachedSetTimeout.call(this,e,0)}}}function runClearTimeout(e){if(cachedClearTimeout===clearTimeout)return clearTimeout(e);if((cachedClearTimeout===defaultClearTimeout||!cachedClearTimeout)&&clearTimeout)return cachedClearTimeout=clearTimeout,clearTimeout(e);try{return cachedClearTimeout(e)}catch(t){try{return cachedClearTimeout.call(null,e)}catch(t){return cachedClearTimeout.call(this,e)}}}"function"==typeof global$1.setTimeout&&(cachedSetTimeout=setTimeout),"function"==typeof global$1.clearTimeout&&(cachedClearTimeout=clearTimeout);var currentQueue,queue$1=[],draining=!1,queueIndex=-1;function cleanUpNextTick(){draining&&currentQueue&&(draining=!1,currentQueue.length?queue$1=currentQueue.concat(queue$1):queueIndex=-1,queue$1.length&&drainQueue())}function drainQueue(){if(!draining){var e=runTimeout(cleanUpNextTick);draining=!0;for(var t=queue$1.length;t;){for(currentQueue=queue$1,queue$1=[];++queueIndex<t;)currentQueue&&currentQueue[queueIndex].run();queueIndex=-1,t=queue$1.length}currentQueue=null,draining=!1,runClearTimeout(e)}}function nextTick$1(e){var t=arguments,r=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)r[n-1]=t[n];queue$1.push(new Item(e,r)),1!==queue$1.length||draining||runTimeout(drainQueue)}function Item(e,t){this.fun=e,this.array=t}Item.prototype.run=function(){this.fun.apply(null,this.array)};var title$1="browser",platform$1="browser",browser$1=!0,env={},argv=[],version="",versions={},release={},config$1={};function noop$4(){}var on$1=noop$4,addListener=noop$4,once$1=noop$4,off=noop$4,removeListener=noop$4,removeAllListeners=noop$4,emit=noop$4;function binding(e){throw new Error("process.binding is not supported")}function cwd(){return"/"}function chdir(e){throw new Error("process.chdir is not supported")}function umask(){return 0}var performance$1=global$1.performance||{},performanceNow=performance$1.now||performance$1.mozNow||performance$1.msNow||performance$1.oNow||performance$1.webkitNow||function(){return(new Date).getTime()};function hrtime(e){var t=.001*performanceNow.call(performance$1),r=Math.floor(t),n=Math.floor(t%1*1e9);return e&&(r-=e[0],(n-=e[1])<0&&(r--,n+=1e9)),[r,n]}var startTime=new Date;function uptime(){return(new Date-startTime)/1e3}var _blobConstructor,xhr,process={nextTick:nextTick$1,title:title$1,browser:browser$1,env:env,argv:argv,version:version,versions:versions,on:on$1,addListener:addListener,once:once$1,off:off,removeListener:removeListener,removeAllListeners:removeAllListeners,emit:emit,binding:binding,cwd:cwd,chdir:chdir,umask:umask,hrtime:hrtime,platform:platform$1,release:release,config:config$1,uptime:uptime},hasFetch=isFunction$1(global$1.fetch)&&isFunction$1(global$1.ReadableStream);function blobConstructor(){if(void 0!==_blobConstructor)return _blobConstructor;try{new global$1.Blob([new ArrayBuffer(1)]),_blobConstructor=!0}catch(e){_blobConstructor=!1}return _blobConstructor}function checkTypeSupport(e){xhr||(xhr=new global$1.XMLHttpRequest).open("GET",global$1.location.host?"/":"https://example.com");try{return xhr.responseType=e,xhr.responseType===e}catch(e){return!1}}var inherits$1,haveArrayBuffer=void 0!==global$1.ArrayBuffer,haveSlice=haveArrayBuffer&&isFunction$1(global$1.ArrayBuffer.prototype.slice),arraybuffer=haveArrayBuffer&&checkTypeSupport("arraybuffer"),msstream=!hasFetch&&haveSlice&&checkTypeSupport("ms-stream"),mozchunkedarraybuffer=!hasFetch&&haveArrayBuffer&&checkTypeSupport("moz-chunked-arraybuffer"),overrideMimeType=isFunction$1(xhr.overrideMimeType),vbArray=isFunction$1(global$1.VBArray);function isFunction$1(e){return"function"==typeof e}xhr=null;var inherits$2=inherits$1="function"==typeof Object.create?function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:function(e,t){e.super_=t;var r=function(){};r.prototype=t.prototype,e.prototype=new r,e.prototype.constructor=e},formatRegExp=/%[sdj%]/g;function format(e){var t=arguments;if(!isString(e)){for(var r=[],n=0;n<arguments.length;n++)r.push(inspect(t[n]));return r.join(" ")}n=1;for(var i=arguments,a=i.length,o=String(e).replace(formatRegExp,function(e){if("%%"===e)return"%";if(n>=a)return e;switch(e){case"%s":return String(i[n++]);case"%d":return Number(i[n++]);case"%j":try{return JSON.stringify(i[n++])}catch(e){return"[Circular]"}default:return e}}),s=i[n];n<a;s=i[++n])isNull(s)||!isObject$2(s)?o+=" "+s:o+=" "+inspect(s);return o}function deprecate(e,t){if(isUndefined(global$1.process))return function(){return deprecate(e,t).apply(this,arguments)};if(!0===process.noDeprecation)return e;var r=!1;return function(){if(!r){if(process.throwDeprecation)throw new Error(t);process.traceDeprecation?console.trace(t):console.error(t),r=!0}return e.apply(this,arguments)}}var debugEnviron,domain,debugs={};function debuglog(e){if(isUndefined(debugEnviron)&&(debugEnviron=process.env.NODE_DEBUG||""),e=e.toUpperCase(),!debugs[e])if(new RegExp("\\b"+e+"\\b","i").test(debugEnviron)){debugs[e]=function(){var t=format.apply(null,arguments);console.error("%s %d: %s",e,0,t)}}else debugs[e]=function(){};return debugs[e]}function inspect(e,t){var r={seen:[],stylize:stylizeNoColor};return arguments.length>=3&&(r.depth=arguments[2]),arguments.length>=4&&(r.colors=arguments[3]),isBoolean$1(t)?r.showHidden=t:t&&_extend(r,t),isUndefined(r.showHidden)&&(r.showHidden=!1),isUndefined(r.depth)&&(r.depth=2),isUndefined(r.colors)&&(r.colors=!1),isUndefined(r.customInspect)&&(r.customInspect=!0),r.colors&&(r.stylize=stylizeWithColor),formatValue(r,e,r.depth)}function stylizeWithColor(e,t){var r=inspect.styles[t];return r?"["+inspect.colors[r][0]+"m"+e+"["+inspect.colors[r][1]+"m":e}function stylizeNoColor(e,t){return e}function arrayToHash(e){var t={};return e.forEach(function(e,r){t[e]=!0}),t}function formatValue(e,t,r){if(e.customInspect&&t&&isFunction$2(t.inspect)&&t.inspect!==inspect&&(!t.constructor||t.constructor.prototype!==t)){var n=t.inspect(r,e);return isString(n)||(n=formatValue(e,n,r)),n}var i=formatPrimitive(e,t);if(i)return i;var a=Object.keys(t),o=arrayToHash(a);if(e.showHidden&&(a=Object.getOwnPropertyNames(t)),isError$1(t)&&(a.indexOf("message")>=0||a.indexOf("description")>=0))return formatError(t);if(0===a.length){if(isFunction$2(t)){var s=t.name?": "+t.name:"";return e.stylize("[Function"+s+"]","special")}if(isRegExp$1(t))return e.stylize(RegExp.prototype.toString.call(t),"regexp");if(isDate(t))return e.stylize(Date.prototype.toString.call(t),"date");if(isError$1(t))return formatError(t)}var l,u="",c=!1,d=["{","}"];(isArray$2(t)&&(c=!0,d=["[","]"]),isFunction$2(t))&&(u=" [Function"+(t.name?": "+t.name:"")+"]");return isRegExp$1(t)&&(u=" "+RegExp.prototype.toString.call(t)),isDate(t)&&(u=" "+Date.prototype.toUTCString.call(t)),isError$1(t)&&(u=" "+formatError(t)),0!==a.length||c&&0!=t.length?r<0?isRegExp$1(t)?e.stylize(RegExp.prototype.toString.call(t),"regexp"):e.stylize("[Object]","special"):(e.seen.push(t),l=c?formatArray(e,t,r,o,a):a.map(function(n){return formatProperty(e,t,r,o,n,c)}),e.seen.pop(),reduceToSingleString(l,u,d)):d[0]+u+d[1]}function formatPrimitive(e,t){if(isUndefined(t))return e.stylize("undefined","undefined");if(isString(t)){var r="'"+JSON.stringify(t).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return e.stylize(r,"string")}return isNumber(t)?e.stylize(""+t,"number"):isBoolean$1(t)?e.stylize(""+t,"boolean"):isNull(t)?e.stylize("null","null"):void 0}function formatError(e){return"["+Error.prototype.toString.call(e)+"]"}function formatArray(e,t,r,n,i){for(var a=[],o=0,s=t.length;o<s;++o)hasOwnProperty$14(t,String(o))?a.push(formatProperty(e,t,r,n,String(o),!0)):a.push("");return i.forEach(function(i){i.match(/^\d+$/)||a.push(formatProperty(e,t,r,n,i,!0))}),a}function formatProperty(e,t,r,n,i,a){var o,s,l;if((l=Object.getOwnPropertyDescriptor(t,i)||{value:t[i]}).get?s=l.set?e.stylize("[Getter/Setter]","special"):e.stylize("[Getter]","special"):l.set&&(s=e.stylize("[Setter]","special")),hasOwnProperty$14(n,i)||(o="["+i+"]"),s||(e.seen.indexOf(l.value)<0?(s=isNull(r)?formatValue(e,l.value,null):formatValue(e,l.value,r-1)).indexOf("\n")>-1&&(s=a?s.split("\n").map(function(e){return"  "+e}).join("\n").substr(2):"\n"+s.split("\n").map(function(e){return"   "+e}).join("\n")):s=e.stylize("[Circular]","special")),isUndefined(o)){if(a&&i.match(/^\d+$/))return s;(o=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(o=o.substr(1,o.length-2),o=e.stylize(o,"name")):(o=o.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),o=e.stylize(o,"string"))}return o+": "+s}function reduceToSingleString(e,t,r){return e.reduce(function(e,t){return t.indexOf("\n"),e+t.replace(/\u001b\[\d\d?m/g,"").length+1},0)>60?r[0]+(""===t?"":t+"\n ")+" "+e.join(",\n  ")+" "+r[1]:r[0]+t+" "+e.join(", ")+" "+r[1]}function isArray$2(e){return Array.isArray(e)}function isBoolean$1(e){return"boolean"==typeof e}function isNull(e){return null===e}function isNullOrUndefined(e){return null==e}function isNumber(e){return"number"==typeof e}function isString(e){return"string"==typeof e}function isUndefined(e){return void 0===e}function isRegExp$1(e){return isObject$2(e)&&"[object RegExp]"===objectToString$1(e)}function isObject$2(e){return"object"===(void 0===e?"undefined":_typeof(e))&&null!==e}function isDate(e){return isObject$2(e)&&"[object Date]"===objectToString$1(e)}function isError$1(e){return isObject$2(e)&&("[object Error]"===objectToString$1(e)||e instanceof Error)}function isFunction$2(e){return"function"==typeof e}function objectToString$1(e){return Object.prototype.toString.call(e)}function _extend(e,t){if(!t||!isObject$2(t))return e;for(var r=Object.keys(t),n=r.length;n--;)e[r[n]]=t[r[n]];return e}function hasOwnProperty$14(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function EventHandlers(){}function EventEmitter(){EventEmitter.init.call(this)}function $getMaxListeners(e){return void 0===e._maxListeners?EventEmitter.defaultMaxListeners:e._maxListeners}function emitNone(e,t,r){if(t)e.call(r);else for(var n=e.length,i=arrayClone(e,n),a=0;a<n;++a)i[a].call(r)}function emitOne(e,t,r,n){if(t)e.call(r,n);else for(var i=e.length,a=arrayClone(e,i),o=0;o<i;++o)a[o].call(r,n)}function emitTwo(e,t,r,n,i){if(t)e.call(r,n,i);else for(var a=e.length,o=arrayClone(e,a),s=0;s<a;++s)o[s].call(r,n,i)}function emitThree(e,t,r,n,i,a){if(t)e.call(r,n,i,a);else for(var o=e.length,s=arrayClone(e,o),l=0;l<o;++l)s[l].call(r,n,i,a)}function emitMany(e,t,r,n){if(t)e.apply(r,n);else for(var i=e.length,a=arrayClone(e,i),o=0;o<i;++o)a[o].apply(r,n)}function _addListener(e,t,r,n){var i,a,o;if("function"!=typeof r)throw new TypeError('"listener" argument must be a function');if((a=e._events)?(a.newListener&&(e.emit("newListener",t,r.listener?r.listener:r),a=e._events),o=a[t]):(a=e._events=new EventHandlers,e._eventsCount=0),o){if("function"==typeof o?o=a[t]=n?[r,o]:[o,r]:n?o.unshift(r):o.push(r),!o.warned&&(i=$getMaxListeners(e))&&i>0&&o.length>i){o.warned=!0;var s=new Error("Possible EventEmitter memory leak detected. "+o.length+" "+t+" listeners added. Use emitter.setMaxListeners() to increase limit");s.name="MaxListenersExceededWarning",s.emitter=e,s.type=t,s.count=o.length,emitWarning(s)}}else o=a[t]=r,++e._eventsCount;return e}function emitWarning(e){"function"==typeof console.warn?console.warn(e):console.log(e)}function _onceWrap(e,t,r){var n=!1;function i(){e.removeListener(t,i),n||(n=!0,r.apply(e,arguments))}return i.listener=r,i}function listenerCount(e){var t=this._events;if(t){var r=t[e];if("function"==typeof r)return 1;if(r)return r.length}return 0}function spliceOne(e,t){for(var r=t,n=r+1,i=e.length;n<i;r+=1,n+=1)e[r]=e[n];e.pop()}function arrayClone(e,t){for(var r=new Array(t);t--;)r[t]=e[t];return r}function unwrapListeners(e){for(var t=new Array(e.length),r=0;r<t.length;++r)t[r]=e[r].listener||e[r];return t}function BufferList(){this.head=null,this.tail=null,this.length=0}inspect.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},inspect.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},EventHandlers.prototype=Object.create(null),EventEmitter.EventEmitter=EventEmitter,EventEmitter.usingDomains=!1,EventEmitter.prototype.domain=void 0,EventEmitter.prototype._events=void 0,EventEmitter.prototype._maxListeners=void 0,EventEmitter.defaultMaxListeners=10,EventEmitter.init=function(){this.domain=null,EventEmitter.usingDomains&&(!domain.active||this instanceof domain.Domain||(this.domain=domain.active)),this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=new EventHandlers,this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},EventEmitter.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||isNaN(e))throw new TypeError('"n" argument must be a positive number');return this._maxListeners=e,this},EventEmitter.prototype.getMaxListeners=function(){return $getMaxListeners(this)},EventEmitter.prototype.emit=function(e){var t,r,n,i,a,o,s,l=arguments,u="error"===e;if(o=this._events)u=u&&null==o.error;else if(!u)return!1;if(s=this.domain,u){if(t=arguments[1],!s){if(t instanceof Error)throw t;var c=new Error('Uncaught, unspecified "error" event. ('+t+")");throw c.context=t,c}return t||(t=new Error('Uncaught, unspecified "error" event')),t.domainEmitter=this,t.domain=s,t.domainThrown=!1,s.emit("error",t),!1}if(!(r=o[e]))return!1;var d="function"==typeof r;switch(n=arguments.length){case 1:emitNone(r,d,this);break;case 2:emitOne(r,d,this,arguments[1]);break;case 3:emitTwo(r,d,this,arguments[1],arguments[2]);break;case 4:emitThree(r,d,this,arguments[1],arguments[2],arguments[3]);break;default:for(i=new Array(n-1),a=1;a<n;a++)i[a-1]=l[a];emitMany(r,d,this,i)}return!0},EventEmitter.prototype.addListener=function(e,t){return _addListener(this,e,t,!1)},EventEmitter.prototype.on=EventEmitter.prototype.addListener,EventEmitter.prototype.prependListener=function(e,t){return _addListener(this,e,t,!0)},EventEmitter.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.on(e,_onceWrap(this,e,t)),this},EventEmitter.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');return this.prependListener(e,_onceWrap(this,e,t)),this},EventEmitter.prototype.removeListener=function(e,t){var r,n,i,a,o;if("function"!=typeof t)throw new TypeError('"listener" argument must be a function');if(!(n=this._events))return this;if(!(r=n[e]))return this;if(r===t||r.listener&&r.listener===t)0==--this._eventsCount?this._events=new EventHandlers:(delete n[e],n.removeListener&&this.emit("removeListener",e,r.listener||t));else if("function"!=typeof r){for(i=-1,a=r.length;a-- >0;)if(r[a]===t||r[a].listener&&r[a].listener===t){o=r[a].listener,i=a;break}if(i<0)return this;if(1===r.length){if(r[0]=void 0,0==--this._eventsCount)return this._events=new EventHandlers,this;delete n[e]}else spliceOne(r,i);n.removeListener&&this.emit("removeListener",e,o||t)}return this},EventEmitter.prototype.removeAllListeners=function(e){var t,r;if(!(r=this._events))return this;if(!r.removeListener)return 0===arguments.length?(this._events=new EventHandlers,this._eventsCount=0):r[e]&&(0==--this._eventsCount?this._events=new EventHandlers:delete r[e]),this;if(0===arguments.length){for(var n,i=Object.keys(r),a=0;a<i.length;++a)"removeListener"!==(n=i[a])&&this.removeAllListeners(n);return this.removeAllListeners("removeListener"),this._events=new EventHandlers,this._eventsCount=0,this}if("function"==typeof(t=r[e]))this.removeListener(e,t);else if(t)do{this.removeListener(e,t[t.length-1])}while(t[0]);return this},EventEmitter.prototype.listeners=function(e){var t,r=this._events;return r&&(t=r[e])?"function"==typeof t?[t.listener||t]:unwrapListeners(t):[]},EventEmitter.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):listenerCount.call(e,t)},EventEmitter.prototype.listenerCount=listenerCount,EventEmitter.prototype.eventNames=function(){return this._eventsCount>0?Reflect.ownKeys(this._events):[]},BufferList.prototype.push=function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length},BufferList.prototype.unshift=function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length},BufferList.prototype.shift=function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}},BufferList.prototype.clear=function(){this.head=this.tail=null,this.length=0},BufferList.prototype.join=function(e){if(0===this.length)return"";for(var t=this.head,r=""+t.data;t=t.next;)r+=e+t.data;return r},BufferList.prototype.concat=function(e){if(0===this.length)return Buffer$2.alloc(0);if(1===this.length)return this.head.data;for(var t=Buffer$2.allocUnsafe(e>>>0),r=this.head,n=0;r;)r.data.copy(t,n),n+=r.data.length,r=r.next;return t};var isBufferEncoding=Buffer$2.isEncoding||function(e){switch(e&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function assertEncoding(e){if(e&&!isBufferEncoding(e))throw new Error("Unknown encoding: "+e)}function StringDecoder(e){switch(this.encoding=(e||"utf8").toLowerCase().replace(/[-_]/,""),assertEncoding(e),this.encoding){case"utf8":this.surrogateSize=3;break;case"ucs2":case"utf16le":this.surrogateSize=2,this.detectIncompleteChar=utf16DetectIncompleteChar;break;case"base64":this.surrogateSize=3,this.detectIncompleteChar=base64DetectIncompleteChar;break;default:return void(this.write=passThroughWrite)}this.charBuffer=new Buffer$2(6),this.charReceived=0,this.charLength=0}function passThroughWrite(e){return e.toString(this.encoding)}function utf16DetectIncompleteChar(e){this.charReceived=e.length%2,this.charLength=this.charReceived?2:0}function base64DetectIncompleteChar(e){this.charReceived=e.length%3,this.charLength=this.charReceived?3:0}StringDecoder.prototype.write=function(e){for(var t="";this.charLength;){var r=e.length>=this.charLength-this.charReceived?this.charLength-this.charReceived:e.length;if(e.copy(this.charBuffer,this.charReceived,0,r),this.charReceived+=r,this.charReceived<this.charLength)return"";if(e=e.slice(r,e.length),!((i=(t=this.charBuffer.slice(0,this.charLength).toString(this.encoding)).charCodeAt(t.length-1))>=55296&&i<=56319)){if(this.charReceived=this.charLength=0,0===e.length)return t;break}this.charLength+=this.surrogateSize,t=""}this.detectIncompleteChar(e);var n=e.length;this.charLength&&(e.copy(this.charBuffer,0,e.length-this.charReceived,n),n-=this.charReceived);var i;n=(t+=e.toString(this.encoding,0,n)).length-1;if((i=t.charCodeAt(n))>=55296&&i<=56319){var a=this.surrogateSize;return this.charLength+=a,this.charReceived+=a,this.charBuffer.copy(this.charBuffer,a,0,a),e.copy(this.charBuffer,0,0,a),t.substring(0,n)}return t},StringDecoder.prototype.detectIncompleteChar=function(e){for(var t=e.length>=3?3:e.length;t>0;t--){var r=e[e.length-t];if(1==t&&r>>5==6){this.charLength=2;break}if(t<=2&&r>>4==14){this.charLength=3;break}if(t<=3&&r>>3==30){this.charLength=4;break}}this.charReceived=t},StringDecoder.prototype.end=function(e){var t="";if(e&&e.length&&(t=this.write(e)),this.charReceived){var r=this.charReceived,n=this.charBuffer,i=this.encoding;t+=n.slice(0,r).toString(i)}return t},Readable.ReadableState=ReadableState;var debug=debuglog("stream");function prependListener(e,t,r){if("function"==typeof e.prependListener)return e.prependListener(t,r);e._events&&e._events[t]?Array.isArray(e._events[t])?e._events[t].unshift(r):e._events[t]=[r,e._events[t]]:e.on(t,r)}function listenerCount$1(e,t){return e.listeners(t).length}function ReadableState(e,t){e=e||{},this.objectMode=!!e.objectMode,t instanceof Duplex&&(this.objectMode=this.objectMode||!!e.readableObjectMode);var r=e.highWaterMark,n=this.objectMode?16:16384;this.highWaterMark=r||0===r?r:n,this.highWaterMark=~~this.highWaterMark,this.buffer=new BufferList,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.ranOut=!1,this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(this.decoder=new StringDecoder(e.encoding),this.encoding=e.encoding)}function Readable(e){if(!(this instanceof Readable))return new Readable(e);this._readableState=new ReadableState(e,this),this.readable=!0,e&&"function"==typeof e.read&&(this._read=e.read),EventEmitter.call(this)}function readableAddChunk(e,t,r,n,i){var a=chunkInvalid(t,r);if(a)e.emit("error",a);else if(null===r)t.reading=!1,onEofChunk(e,t);else if(t.objectMode||r&&r.length>0)if(t.ended&&!i){var o=new Error("stream.push() after EOF");e.emit("error",o)}else if(t.endEmitted&&i){var s=new Error("stream.unshift() after end event");e.emit("error",s)}else{var l;!t.decoder||i||n||(r=t.decoder.write(r),l=!t.objectMode&&0===r.length),i||(t.reading=!1),l||(t.flowing&&0===t.length&&!t.sync?(e.emit("data",r),e.read(0)):(t.length+=t.objectMode?1:r.length,i?t.buffer.unshift(r):t.buffer.push(r),t.needReadable&&emitReadable(e))),maybeReadMore(e,t)}else i||(t.reading=!1);return needMoreData(t)}function needMoreData(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}inherits$2(Readable,EventEmitter),Readable.prototype.push=function(e,t){var r=this._readableState;return r.objectMode||"string"!=typeof e||(t=t||r.defaultEncoding)!==r.encoding&&(e=Buffer$2.from(e,t),t=""),readableAddChunk(this,r,e,t,!1)},Readable.prototype.unshift=function(e){return readableAddChunk(this,this._readableState,e,"",!0)},Readable.prototype.isPaused=function(){return!1===this._readableState.flowing},Readable.prototype.setEncoding=function(e){return this._readableState.decoder=new StringDecoder(e),this._readableState.encoding=e,this};var MAX_HWM=8388608;function computeNewHighWaterMark(e){return e>=MAX_HWM?e=MAX_HWM:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}function howMuchToRead(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=computeNewHighWaterMark(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function chunkInvalid(e,t){var r=null;return isBuffer$1(t)||"string"==typeof t||null===t||void 0===t||e.objectMode||(r=new TypeError("Invalid non-string/buffer chunk")),r}function onEofChunk(e,t){if(!t.ended){if(t.decoder){var r=t.decoder.end();r&&r.length&&(t.buffer.push(r),t.length+=t.objectMode?1:r.length)}t.ended=!0,emitReadable(e)}}function emitReadable(e){var t=e._readableState;t.needReadable=!1,t.emittedReadable||(debug("emitReadable",t.flowing),t.emittedReadable=!0,t.sync?nextTick$1(emitReadable_,e):emitReadable_(e))}function emitReadable_(e){debug("emit readable"),e.emit("readable"),flow(e)}function maybeReadMore(e,t){t.readingMore||(t.readingMore=!0,nextTick$1(maybeReadMore_,e,t))}function maybeReadMore_(e,t){for(var r=t.length;!t.reading&&!t.flowing&&!t.ended&&t.length<t.highWaterMark&&(debug("maybeReadMore read 0"),e.read(0),r!==t.length);)r=t.length;t.readingMore=!1}function pipeOnDrain(e){return function(){var t=e._readableState;debug("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&e.listeners("data").length&&(t.flowing=!0,flow(e))}}function nReadingNextTick(e){debug("readable nexttick read 0"),e.read(0)}function resume(e,t){t.resumeScheduled||(t.resumeScheduled=!0,nextTick$1(resume_,e,t))}function resume_(e,t){t.reading||(debug("resume read 0"),e.read(0)),t.resumeScheduled=!1,t.awaitDrain=0,e.emit("resume"),flow(e),t.flowing&&!t.reading&&e.read(0)}function flow(e){var t=e._readableState;for(debug("flow",t.flowing);t.flowing&&null!==e.read(););}function fromList(e,t){return 0===t.length?null:(t.objectMode?r=t.buffer.shift():!e||e>=t.length?(r=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.head.data:t.buffer.concat(t.length),t.buffer.clear()):r=fromListPartial(e,t.buffer,t.decoder),r);var r}function fromListPartial(e,t,r){var n;return e<t.head.data.length?(n=t.head.data.slice(0,e),t.head.data=t.head.data.slice(e)):n=e===t.head.data.length?t.shift():r?copyFromBufferString(e,t):copyFromBuffer(e,t),n}function copyFromBufferString(e,t){var r=t.head,n=1,i=r.data;for(e-=i.length;r=r.next;){var a=r.data,o=e>a.length?a.length:e;if(o===a.length?i+=a:i+=a.slice(0,e),0===(e-=o)){o===a.length?(++n,r.next?t.head=r.next:t.head=t.tail=null):(t.head=r,r.data=a.slice(o));break}++n}return t.length-=n,i}function copyFromBuffer(e,t){var r=Buffer$2.allocUnsafe(e),n=t.head,i=1;for(n.data.copy(r),e-=n.data.length;n=n.next;){var a=n.data,o=e>a.length?a.length:e;if(a.copy(r,r.length-e,0,o),0===(e-=o)){o===a.length?(++i,n.next?t.head=n.next:t.head=t.tail=null):(t.head=n,n.data=a.slice(o));break}++i}return t.length-=i,r}function endReadable(e){var t=e._readableState;if(t.length>0)throw new Error('"endReadable()" called on non-empty stream');t.endEmitted||(t.ended=!0,nextTick$1(endReadableNT,t,e))}function endReadableNT(e,t){e.endEmitted||0!==e.length||(e.endEmitted=!0,t.readable=!1,t.emit("end"))}function forEach$1(e,t){for(var r=0,n=e.length;r<n;r++)t(e[r],r)}function indexOf(e,t){for(var r=0,n=e.length;r<n;r++)if(e[r]===t)return r;return-1}function nop(){}function WriteReq(e,t,r){this.chunk=e,this.encoding=t,this.callback=r,this.next=null}function WritableState(e,t){Object.defineProperty(this,"buffer",{get:deprecate(function(){return this.getBuffer()},"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.")}),e=e||{},this.objectMode=!!e.objectMode,t instanceof Duplex&&(this.objectMode=this.objectMode||!!e.writableObjectMode);var r=e.highWaterMark,n=this.objectMode?16:16384;this.highWaterMark=r||0===r?r:n,this.highWaterMark=~~this.highWaterMark,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1;var i=!1===e.decodeStrings;this.decodeStrings=!i,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){onwrite(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new CorkedRequest(this)}function Writable(e){if(!(this instanceof Writable||this instanceof Duplex))return new Writable(e);this._writableState=new WritableState(e,this),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev)),EventEmitter.call(this)}function writeAfterEnd(e,t){var r=new Error("write after end");e.emit("error",r),nextTick$1(t,r)}function validChunk(e,t,r,n){var i=!0,a=!1;return null===r?a=new TypeError("May not write null values to stream"):Buffer$2.isBuffer(r)||"string"==typeof r||void 0===r||t.objectMode||(a=new TypeError("Invalid non-string/buffer chunk")),a&&(e.emit("error",a),nextTick$1(n,a),i=!1),i}function decodeChunk(e,t,r){return e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=Buffer$2.from(t,r)),t}function writeOrBuffer(e,t,r,n,i){r=decodeChunk(t,r,n),Buffer$2.isBuffer(r)&&(n="buffer");var a=t.objectMode?1:r.length;t.length+=a;var o=t.length<t.highWaterMark;if(o||(t.needDrain=!0),t.writing||t.corked){var s=t.lastBufferedRequest;t.lastBufferedRequest=new WriteReq(r,n,i),s?s.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else doWrite(e,t,!1,a,r,n,i);return o}function doWrite(e,t,r,n,i,a,o){t.writelen=n,t.writecb=o,t.writing=!0,t.sync=!0,r?e._writev(i,t.onwrite):e._write(i,a,t.onwrite),t.sync=!1}function onwriteError(e,t,r,n,i){--t.pendingcb,r?nextTick$1(i,n):i(n),e._writableState.errorEmitted=!0,e.emit("error",n)}function onwriteStateUpdate(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}function onwrite(e,t){var r=e._writableState,n=r.sync,i=r.writecb;if(onwriteStateUpdate(r),t)onwriteError(e,r,n,t,i);else{var a=needFinish(r);a||r.corked||r.bufferProcessing||!r.bufferedRequest||clearBuffer(e,r),n?nextTick$1(afterWrite,e,r,a,i):afterWrite(e,r,a,i)}}function afterWrite(e,t,r,n){r||onwriteDrain(e,t),t.pendingcb--,n(),finishMaybe(e,t)}function onwriteDrain(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}function clearBuffer(e,t){t.bufferProcessing=!0;var r=t.bufferedRequest;if(e._writev&&r&&r.next){var n=t.bufferedRequestCount,i=new Array(n),a=t.corkedRequestsFree;a.entry=r;for(var o=0;r;)i[o]=r,r=r.next,o+=1;doWrite(e,t,!0,t.length,i,"",a.finish),t.pendingcb++,t.lastBufferedRequest=null,a.next?(t.corkedRequestsFree=a.next,a.next=null):t.corkedRequestsFree=new CorkedRequest(t)}else{for(;r;){var s=r.chunk,l=r.encoding,u=r.callback;if(doWrite(e,t,!1,t.objectMode?1:s.length,s,l,u),r=r.next,t.writing)break}null===r&&(t.lastBufferedRequest=null)}t.bufferedRequestCount=0,t.bufferedRequest=r,t.bufferProcessing=!1}function needFinish(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function prefinish(e,t){t.prefinished||(t.prefinished=!0,e.emit("prefinish"))}function finishMaybe(e,t){var r=needFinish(t);return r&&(0===t.pendingcb?(prefinish(e,t),t.finished=!0,e.emit("finish")):prefinish(e,t)),r}function endWritable(e,t,r){t.ending=!0,finishMaybe(e,t),r&&(t.finished?nextTick$1(r):e.once("finish",r)),t.ended=!0,e.writable=!1}function CorkedRequest(e){var t=this;this.next=null,this.entry=null,this.finish=function(r){var n=t.entry;for(t.entry=null;n;){var i=n.callback;e.pendingcb--,i(r),n=n.next}e.corkedRequestsFree?e.corkedRequestsFree.next=t:e.corkedRequestsFree=t}}Readable.prototype.read=function(e){debug("read",e),e=parseInt(e,10);var t=this._readableState,r=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&(t.length>=t.highWaterMark||t.ended))return debug("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?endReadable(this):emitReadable(this),null;if(0===(e=howMuchToRead(e,t))&&t.ended)return 0===t.length&&endReadable(this),null;var n,i=t.needReadable;return debug("need readable",i),(0===t.length||t.length-e<t.highWaterMark)&&debug("length less than watermark",i=!0),t.ended||t.reading?debug("reading or ended",i=!1):i&&(debug("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=howMuchToRead(r,t))),null===(n=e>0?fromList(e,t):null)?(t.needReadable=!0,e=0):t.length-=e,0===t.length&&(t.ended||(t.needReadable=!0),r!==e&&t.ended&&endReadable(this)),null!==n&&this.emit("data",n),n},Readable.prototype._read=function(e){this.emit("error",new Error("not implemented"))},Readable.prototype.pipe=function(e,t){var r=this,n=this._readableState;switch(n.pipesCount){case 0:n.pipes=e;break;case 1:n.pipes=[n.pipes,e];break;default:n.pipes.push(e)}n.pipesCount+=1,debug("pipe count=%d opts=%j",n.pipesCount,t);var i=!t||!1!==t.end?o:u;function a(e){debug("onunpipe"),e===r&&u()}function o(){debug("onend"),e.end()}n.endEmitted?nextTick$1(i):r.once("end",i),e.on("unpipe",a);var s=pipeOnDrain(r);e.on("drain",s);var l=!1;function u(){debug("cleanup"),e.removeListener("close",f),e.removeListener("finish",p),e.removeListener("drain",s),e.removeListener("error",h),e.removeListener("unpipe",a),r.removeListener("end",o),r.removeListener("end",u),r.removeListener("data",d),l=!0,!n.awaitDrain||e._writableState&&!e._writableState.needDrain||s()}var c=!1;function d(t){debug("ondata"),c=!1,!1!==e.write(t)||c||((1===n.pipesCount&&n.pipes===e||n.pipesCount>1&&-1!==indexOf(n.pipes,e))&&!l&&(debug("false write response, pause",r._readableState.awaitDrain),r._readableState.awaitDrain++,c=!0),r.pause())}function h(t){debug("onerror",t),g(),e.removeListener("error",h),0===listenerCount$1(e,"error")&&e.emit("error",t)}function f(){e.removeListener("finish",p),g()}function p(){debug("onfinish"),e.removeListener("close",f),g()}function g(){debug("unpipe"),r.unpipe(e)}return r.on("data",d),prependListener(e,"error",h),e.once("close",f),e.once("finish",p),e.emit("pipe",r),n.flowing||(debug("pipe resume"),r.resume()),e},Readable.prototype.unpipe=function(e){var t=this._readableState;if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes?this:(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this),this);if(!e){var r=t.pipes,n=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var i=0;i<n;i++)r[i].emit("unpipe",this);return this}var a=indexOf(t.pipes,e);return-1===a?this:(t.pipes.splice(a,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this),this)},Readable.prototype.on=function(e,t){var r=EventEmitter.prototype.on.call(this,e,t);if("data"===e)!1!==this._readableState.flowing&&this.resume();else if("readable"===e){var n=this._readableState;n.endEmitted||n.readableListening||(n.readableListening=n.needReadable=!0,n.emittedReadable=!1,n.reading?n.length&&emitReadable(this,n):nextTick$1(nReadingNextTick,this))}return r},Readable.prototype.addListener=Readable.prototype.on,Readable.prototype.resume=function(){var e=this._readableState;return e.flowing||(debug("resume"),e.flowing=!0,resume(this,e)),this},Readable.prototype.pause=function(){return debug("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(debug("pause"),this._readableState.flowing=!1,this.emit("pause")),this},Readable.prototype.wrap=function(e){var t=this._readableState,r=!1,n=this;for(var i in e.on("end",function(){if(debug("wrapped end"),t.decoder&&!t.ended){var e=t.decoder.end();e&&e.length&&n.push(e)}n.push(null)}),e.on("data",function(i){(debug("wrapped data"),t.decoder&&(i=t.decoder.write(i)),!t.objectMode||null!==i&&void 0!==i)&&((t.objectMode||i&&i.length)&&(n.push(i)||(r=!0,e.pause())))}),e)void 0===this[i]&&"function"==typeof e[i]&&(this[i]=function(t){return function(){return e[t].apply(e,arguments)}}(i));return forEach$1(["error","close","destroy","pause","resume"],function(t){e.on(t,n.emit.bind(n,t))}),n._read=function(t){debug("wrapped _read",t),r&&(r=!1,e.resume())},n},Readable._fromList=fromList,Writable.WritableState=WritableState,inherits$2(Writable,EventEmitter),WritableState.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},Writable.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},Writable.prototype.write=function(e,t,r){var n=this._writableState,i=!1;return"function"==typeof t&&(r=t,t=null),Buffer$2.isBuffer(e)?t="buffer":t||(t=n.defaultEncoding),"function"!=typeof r&&(r=nop),n.ended?writeAfterEnd(this,r):validChunk(this,n,e,r)&&(n.pendingcb++,i=writeOrBuffer(this,n,e,t,r)),i},Writable.prototype.cork=function(){this._writableState.corked++},Writable.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.bufferedRequest||clearBuffer(this,e))},Writable.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+e);return this._writableState.defaultEncoding=e,this},Writable.prototype._write=function(e,t,r){r(new Error("not implemented"))},Writable.prototype._writev=null,Writable.prototype.end=function(e,t,r){var n=this._writableState;"function"==typeof e?(r=e,e=null,t=null):"function"==typeof t&&(r=t,t=null),null!==e&&void 0!==e&&this.write(e,t),n.corked&&(n.corked=1,this.uncork()),n.ending||n.finished||endWritable(this,n,r)},inherits$2(Duplex,Readable);for(var keys$1=Object.keys(Writable.prototype),v=0;v<keys$1.length;v++){var method=keys$1[v];Duplex.prototype[method]||(Duplex.prototype[method]=Writable.prototype[method])}function Duplex(e){if(!(this instanceof Duplex))return new Duplex(e);Readable.call(this,e),Writable.call(this,e),e&&!1===e.readable&&(this.readable=!1),e&&!1===e.writable&&(this.writable=!1),this.allowHalfOpen=!0,e&&!1===e.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",onend)}function onend(){this.allowHalfOpen||this._writableState.ended||nextTick$1(onEndNT,this)}function onEndNT(e){e.end()}function TransformState(e){this.afterTransform=function(t,r){return afterTransform(e,t,r)},this.needTransform=!1,this.transforming=!1,this.writecb=null,this.writechunk=null,this.writeencoding=null}function afterTransform(e,t,r){var n=e._transformState;n.transforming=!1;var i=n.writecb;if(!i)return e.emit("error",new Error("no writecb in Transform class"));n.writechunk=null,n.writecb=null,null!==r&&void 0!==r&&e.push(r),i(t);var a=e._readableState;a.reading=!1,(a.needReadable||a.length<a.highWaterMark)&&e._read(a.highWaterMark)}function Transform(e){if(!(this instanceof Transform))return new Transform(e);Duplex.call(this,e),this._transformState=new TransformState(this);var t=this;this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.once("prefinish",function(){"function"==typeof this._flush?this._flush(function(e){done(t,e)}):done(t)})}function done(e,t){if(t)return e.emit("error",t);var r=e._writableState,n=e._transformState;if(r.length)throw new Error("Calling transform done when ws.length != 0");if(n.transforming)throw new Error("Calling transform done when still transforming");return e.push(null)}function PassThrough(e){if(!(this instanceof PassThrough))return new PassThrough(e);Transform.call(this,e)}function Stream(){EventEmitter.call(this)}inherits$2(Transform,Duplex),Transform.prototype.push=function(e,t){return this._transformState.needTransform=!1,Duplex.prototype.push.call(this,e,t)},Transform.prototype._transform=function(e,t,r){throw new Error("Not implemented")},Transform.prototype._write=function(e,t,r){var n=this._transformState;if(n.writecb=r,n.writechunk=e,n.writeencoding=t,!n.transforming){var i=this._readableState;(n.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},Transform.prototype._read=function(e){var t=this._transformState;null!==t.writechunk&&t.writecb&&!t.transforming?(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform)):t.needTransform=!0},inherits$2(PassThrough,Transform),PassThrough.prototype._transform=function(e,t,r){r(null,e)},inherits$2(Stream,EventEmitter),Stream.Readable=Readable,Stream.Writable=Writable,Stream.Duplex=Duplex,Stream.Transform=Transform,Stream.PassThrough=PassThrough,Stream.Stream=Stream,Stream.prototype.pipe=function(e,t){var r=this;function n(t){e.writable&&!1===e.write(t)&&r.pause&&r.pause()}function i(){r.readable&&r.resume&&r.resume()}r.on("data",n),e.on("drain",i),e._isStdio||t&&!1===t.end||(r.on("end",o),r.on("close",s));var a=!1;function o(){a||(a=!0,e.end())}function s(){a||(a=!0,"function"==typeof e.destroy&&e.destroy())}function l(e){if(u(),0===EventEmitter.listenerCount(this,"error"))throw e}function u(){r.removeListener("data",n),e.removeListener("drain",i),r.removeListener("end",o),r.removeListener("close",s),r.removeListener("error",l),e.removeListener("error",l),r.removeListener("end",u),r.removeListener("close",u),e.removeListener("close",u)}return r.on("error",l),e.on("error",l),r.on("end",u),r.on("close",u),e.on("close",u),e.emit("pipe",r),e};var rStates={UNSENT:0,OPENED:1,HEADERS_RECEIVED:2,LOADING:3,DONE:4};function IncomingMessage(e,t,r){var n,i=this;if(Readable.call(i),i._mode=r,i.headers={},i.rawHeaders=[],i.trailers={},i.rawTrailers=[],i.on("end",function(){nextTick$1(function(){i.emit("close")})}),"fetch"===r){i._fetchResponse=t,i.url=t.url,i.statusCode=t.status,i.statusMessage=t.statusText;for(var a,o,s=t.headers[Symbol.iterator]();a=(o=s.next()).value,!o.done;)i.headers[a[0].toLowerCase()]=a[1],i.rawHeaders.push(a[0],a[1]);var l=t.body.getReader();(n=function(){l.read().then(function(e){i._destroyed||(e.done?i.push(null):(i.push(new Buffer$2(e.value)),n()))})})()}else{if(i._xhr=e,i._pos=0,i.url=e.responseURL,i.statusCode=e.status,i.statusMessage=e.statusText,e.getAllResponseHeaders().split(/\r?\n/).forEach(function(e){var t=e.match(/^([^:]+):\s*(.*)/);if(t){var r=t[1].toLowerCase();"set-cookie"===r?(void 0===i.headers[r]&&(i.headers[r]=[]),i.headers[r].push(t[2])):void 0!==i.headers[r]?i.headers[r]+=", "+t[2]:i.headers[r]=t[2],i.rawHeaders.push(t[1],t[2])}}),i._charset="x-user-defined",!overrideMimeType){var u=i.rawHeaders["mime-type"];if(u){var c=u.match(/;\s*charset=([^;])(;|$)/);c&&(i._charset=c[1].toLowerCase())}i._charset||(i._charset="utf-8")}}}function toArrayBuffer(e){if(e instanceof Uint8Array){if(0===e.byteOffset&&e.byteLength===e.buffer.byteLength)return e.buffer;if("function"==typeof e.buffer.slice)return e.buffer.slice(e.byteOffset,e.byteOffset+e.byteLength)}if(isBuffer$1(e)){for(var t=new Uint8Array(e.length),r=e.length,n=0;n<r;n++)t[n]=e[n];return t.buffer}throw new Error("Argument must be a Buffer")}function decideMode(e,t){return hasFetch&&t?"fetch":mozchunkedarraybuffer?"moz-chunked-arraybuffer":msstream?"ms-stream":arraybuffer&&e?"arraybuffer":vbArray&&e?"text:vbarray":"text"}function ClientRequest(e){var t,r=this;Writable.call(r),r._opts=e,r._body=[],r._headers={},e.auth&&r.setHeader("Authorization","Basic "+new Buffer$2(e.auth).toString("base64")),Object.keys(e.headers).forEach(function(t){r.setHeader(t,e.headers[t])});var n=!0;if("disable-fetch"===e.mode)n=!1,t=!0;else if("prefer-streaming"===e.mode)t=!1;else if("allow-wrong-content-type"===e.mode)t=!overrideMimeType;else{if(e.mode&&"default"!==e.mode&&"prefer-fast"!==e.mode)throw new Error("Invalid value for opts.mode");t=!0}r._mode=decideMode(t,n),r.on("finish",function(){r._onFinish()})}inherits$2(IncomingMessage,Readable),IncomingMessage.prototype._read=function(){},IncomingMessage.prototype._onXHRProgress=function(){var e=this,t=e._xhr,r=null;switch(e._mode){case"text:vbarray":if(t.readyState!==rStates.DONE)break;try{r=new global$1.VBArray(t.responseBody).toArray()}catch(e){}if(null!==r){e.push(new Buffer$2(r));break}case"text":try{r=t.responseText}catch(t){e._mode="text:vbarray";break}if(r.length>e._pos){var n=r.substr(e._pos);if("x-user-defined"===e._charset){for(var i=new Buffer$2(n.length),a=0;a<n.length;a++)i[a]=255&n.charCodeAt(a);e.push(i)}else e.push(n,e._charset);e._pos=r.length}break;case"arraybuffer":if(t.readyState!==rStates.DONE||!t.response)break;r=t.response,e.push(new Buffer$2(new Uint8Array(r)));break;case"moz-chunked-arraybuffer":if(r=t.response,t.readyState!==rStates.LOADING||!r)break;e.push(new Buffer$2(new Uint8Array(r)));break;case"ms-stream":if(r=t.response,t.readyState!==rStates.LOADING)break;var o=new global$1.MSStreamReader;o.onprogress=function(){o.result.byteLength>e._pos&&(e.push(new Buffer$2(new Uint8Array(o.result.slice(e._pos)))),e._pos=o.result.byteLength)},o.onload=function(){e.push(null)},o.readAsArrayBuffer(r)}e._xhr.readyState===rStates.DONE&&"ms-stream"!==e._mode&&e.push(null)},inherits$2(ClientRequest,Writable);var unsafeHeaders=["accept-charset","accept-encoding","access-control-request-headers","access-control-request-method","connection","content-length","cookie","cookie2","date","dnt","expect","host","keep-alive","origin","referer","te","trailer","transfer-encoding","upgrade","user-agent","via"];function statusValid(e){try{var t=e.status;return null!==t&&0!==t}catch(e){return!1}}ClientRequest.prototype.setHeader=function(e,t){var r=e.toLowerCase();-1===unsafeHeaders.indexOf(r)&&(this._headers[r]={name:e,value:t})},ClientRequest.prototype.getHeader=function(e){return this._headers[e.toLowerCase()].value},ClientRequest.prototype.removeHeader=function(e){delete this._headers[e.toLowerCase()]},ClientRequest.prototype._onFinish=function(){var e=this;if(!e._destroyed){var t,r=e._opts,n=e._headers;if("POST"!==r.method&&"PUT"!==r.method&&"PATCH"!==r.method||(t=blobConstructor()?new global$1.Blob(e._body.map(function(e){return toArrayBuffer(e)}),{type:(n["content-type"]||{}).value||""}):Buffer$2.concat(e._body).toString()),"fetch"===e._mode){var i=Object.keys(n).map(function(e){return[n[e].name,n[e].value]});global$1.fetch(e._opts.url,{method:e._opts.method,headers:i,body:t,mode:"cors",credentials:r.withCredentials?"include":"same-origin"}).then(function(t){e._fetchResponse=t,e._connect()},function(t){e.emit("error",t)})}else{var a=e._xhr=new global$1.XMLHttpRequest;try{a.open(e._opts.method,e._opts.url,!0)}catch(t){return void nextTick$1(function(){e.emit("error",t)})}"responseType"in a&&(a.responseType=e._mode.split(":")[0]),"withCredentials"in a&&(a.withCredentials=!!r.withCredentials),"text"===e._mode&&"overrideMimeType"in a&&a.overrideMimeType("text/plain; charset=x-user-defined"),Object.keys(n).forEach(function(e){a.setRequestHeader(n[e].name,n[e].value)}),e._response=null,a.onreadystatechange=function(){switch(a.readyState){case rStates.LOADING:case rStates.DONE:e._onXHRProgress()}},"moz-chunked-arraybuffer"===e._mode&&(a.onprogress=function(){e._onXHRProgress()}),a.onerror=function(){e._destroyed||e.emit("error",new Error("XHR error"))};try{a.send(t)}catch(t){return void nextTick$1(function(){e.emit("error",t)})}}}},ClientRequest.prototype._onXHRProgress=function(){statusValid(this._xhr)&&!this._destroyed&&(this._response||this._connect(),this._response._onXHRProgress())},ClientRequest.prototype._connect=function(){this._destroyed||(this._response=new IncomingMessage(this._xhr,this._fetchResponse,this._mode),this.emit("response",this._response))},ClientRequest.prototype._write=function(e,t,r){this._body.push(e),r()},ClientRequest.prototype.abort=ClientRequest.prototype.destroy=function(){this._destroyed=!0,this._response&&(this._response._destroyed=!0),this._xhr&&this._xhr.abort()},ClientRequest.prototype.end=function(e,t,r){"function"==typeof e&&(r=e,e=void 0),Writable.prototype.end.call(this,e,t,r)},ClientRequest.prototype.flushHeaders=function(){},ClientRequest.prototype.setTimeout=function(){},ClientRequest.prototype.setNoDelay=function(){},ClientRequest.prototype.setSocketKeepAlive=function(){};var maxInt=2147483647,base=36,tMin=1,tMax=26,skew=38,damp=700,initialBias=72,initialN=128,delimiter="-",regexNonASCII=/[^\x20-\x7E]/,regexSeparators=/[\x2E\u3002\uFF0E\uFF61]/g,errors={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},baseMinusTMin=base-tMin,floor=Math.floor,stringFromCharCode=String.fromCharCode;function error(e){throw new RangeError(errors[e])}function map(e,t){for(var r=e.length,n=[];r--;)n[r]=t(e[r]);return n}function mapDomain(e,t){var r=e.split("@"),n="";return r.length>1&&(n=r[0]+"@",e=r[1]),n+map((e=e.replace(regexSeparators,".")).split("."),t).join(".")}function ucs2decode(e){for(var t,r,n=[],i=0,a=e.length;i<a;)(t=e.charCodeAt(i++))>=55296&&t<=56319&&i<a?56320==(64512&(r=e.charCodeAt(i++)))?n.push(((1023&t)<<10)+(1023&r)+65536):(n.push(t),i--):n.push(t);return n}function digitToBasic(e,t){return e+22+75*(e<26)-((0!=t)<<5)}function adapt(e,t,r){var n=0;for(e=r?floor(e/damp):e>>1,e+=floor(e/t);e>baseMinusTMin*tMax>>1;n+=base)e=floor(e/baseMinusTMin);return floor(n+(baseMinusTMin+1)*e/(e+skew))}function encode(e){var t,r,n,i,a,o,s,l,u,c,d,h,f,p,g,m=[];for(h=(e=ucs2decode(e)).length,t=initialN,r=0,a=initialBias,o=0;o<h;++o)(d=e[o])<128&&m.push(stringFromCharCode(d));for(n=i=m.length,i&&m.push(delimiter);n<h;){for(s=maxInt,o=0;o<h;++o)(d=e[o])>=t&&d<s&&(s=d);for(s-t>floor((maxInt-r)/(f=n+1))&&error("overflow"),r+=(s-t)*f,t=s,o=0;o<h;++o)if((d=e[o])<t&&++r>maxInt&&error("overflow"),d==t){for(l=r,u=base;!(l<(c=u<=a?tMin:u>=a+tMax?tMax:u-a));u+=base)g=l-c,p=base-c,m.push(stringFromCharCode(digitToBasic(c+g%p,0))),l=floor(g/p);m.push(stringFromCharCode(digitToBasic(l,0))),a=adapt(r,f,n==i),r=0,++n}++r,++t}return m.join("")}function toASCII(e){return mapDomain(e,function(e){return regexNonASCII.test(e)?"xn--"+encode(e):e})}function hasOwnProperty$15(e,t){return Object.prototype.hasOwnProperty.call(e,t)}var isArray$3=Array.isArray||function(e){return"[object Array]"===Object.prototype.toString.call(e)};function stringifyPrimitive(e){switch(void 0===e?"undefined":_typeof(e)){case"string":return e;case"boolean":return e?"true":"false";case"number":return isFinite(e)?e:"";default:return""}}function stringify(e,t,r,n){return t=t||"&",r=r||"=",null===e&&(e=void 0),"object"===(void 0===e?"undefined":_typeof(e))?map$1(objectKeys(e),function(n){var i=encodeURIComponent(stringifyPrimitive(n))+r;return isArray$3(e[n])?map$1(e[n],function(e){return i+encodeURIComponent(stringifyPrimitive(e))}).join(t):i+encodeURIComponent(stringifyPrimitive(e[n]))}).join(t):n?encodeURIComponent(stringifyPrimitive(n))+r+encodeURIComponent(stringifyPrimitive(e)):""}function map$1(e,t){if(e.map)return e.map(t);for(var r=[],n=0;n<e.length;n++)r.push(t(e[n],n));return r}var objectKeys=Object.keys||function(e){var t=[];for(var r in e)Object.prototype.hasOwnProperty.call(e,r)&&t.push(r);return t};function parse$2(e,t,r,n){t=t||"&",r=r||"=";var i={};if("string"!=typeof e||0===e.length)return i;var a=/\+/g;e=e.split(t);var o=1e3;n&&"number"==typeof n.maxKeys&&(o=n.maxKeys);var s=e.length;o>0&&s>o&&(s=o);for(var l=0;l<s;++l){var u,c,d,h,f=e[l].replace(a,"%20"),p=f.indexOf(r);p>=0?(u=f.substr(0,p),c=f.substr(p+1)):(u=f,c=""),d=decodeURIComponent(u),h=decodeURIComponent(c),hasOwnProperty$15(i,d)?isArray$3(i[d])?i[d].push(h):i[d]=[i[d],h]:i[d]=h}return i}function Url(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}var protocolPattern=/^([a-z0-9.+-]+:)/i,portPattern=/:[0-9]*$/,simplePathPattern=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,delims=["<",">",'"',"`"," ","\r","\n","\t"],unwise=["{","}","|","\\","^","`"].concat(delims),autoEscape=["'"].concat(unwise),nonHostChars=["%","/","?",";","#"].concat(autoEscape),hostEndingChars=["/","?","#"],hostnameMaxLen=255,hostnamePartPattern=/^[+a-z0-9A-Z_-]{0,63}$/,hostnamePartStart=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,unsafeProtocol={javascript:!0,"javascript:":!0},hostlessProtocol={javascript:!0,"javascript:":!0},slashedProtocol={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0};function urlParse(e,t,r){if(e&&isObject$2(e)&&e instanceof Url)return e;var n=new Url;return n.parse(e,t,r),n}function parse$3(e,t,r,n){if(!isString(t))throw new TypeError("Parameter 'url' must be a string, not "+(void 0===t?"undefined":_typeof(t)));var i=t.indexOf("?"),a=-1!==i&&i<t.indexOf("#")?"?":"#",o=t.split(a);o[0]=o[0].replace(/\\/g,"/");var s=t=o.join(a);if(s=s.trim(),!n&&1===t.split("#").length){var l=simplePathPattern.exec(s);if(l)return e.path=s,e.href=s,e.pathname=l[1],l[2]?(e.search=l[2],e.query=r?parse$2(e.search.substr(1)):e.search.substr(1)):r&&(e.search="",e.query={}),e}var u,c,d,h,f=protocolPattern.exec(s);if(f){var p=(f=f[0]).toLowerCase();e.protocol=p,s=s.substr(f.length)}if(n||f||s.match(/^\/\/[^@\/]+@[^@\/]+/)){var g="//"===s.substr(0,2);!g||f&&hostlessProtocol[f]||(s=s.substr(2),e.slashes=!0)}if(!hostlessProtocol[f]&&(g||f&&!slashedProtocol[f])){var m,v,y=-1;for(u=0;u<hostEndingChars.length;u++)-1!==(c=s.indexOf(hostEndingChars[u]))&&(-1===y||c<y)&&(y=c);for(-1!==(v=-1===y?s.lastIndexOf("@"):s.lastIndexOf("@",y))&&(m=s.slice(0,v),s=s.slice(v+1),e.auth=decodeURIComponent(m)),y=-1,u=0;u<nonHostChars.length;u++)-1!==(c=s.indexOf(nonHostChars[u]))&&(-1===y||c<y)&&(y=c);-1===y&&(y=s.length),e.host=s.slice(0,y),s=s.slice(y),parseHost(e),e.hostname=e.hostname||"";var b="["===e.hostname[0]&&"]"===e.hostname[e.hostname.length-1];if(!b){var _=e.hostname.split(/\./);for(u=0,d=_.length;u<d;u++){var w=_[u];if(w&&!w.match(hostnamePartPattern)){for(var x="",S=0,k=w.length;S<k;S++)w.charCodeAt(S)>127?x+="x":x+=w[S];if(!x.match(hostnamePartPattern)){var $=_.slice(0,u),C=_.slice(u+1),T=w.match(hostnamePartStart);T&&($.push(T[1]),C.unshift(T[2])),C.length&&(s="/"+C.join(".")+s),e.hostname=$.join(".");break}}}}e.hostname.length>hostnameMaxLen?e.hostname="":e.hostname=e.hostname.toLowerCase(),b||(e.hostname=toASCII(e.hostname)),h=e.port?":"+e.port:"";var A=e.hostname||"";e.host=A+h,e.href+=e.host,b&&(e.hostname=e.hostname.substr(1,e.hostname.length-2),"/"!==s[0]&&(s="/"+s))}if(!unsafeProtocol[p])for(u=0,d=autoEscape.length;u<d;u++){var M=autoEscape[u];if(-1!==s.indexOf(M)){var O=encodeURIComponent(M);O===M&&(O=escape(M)),s=s.split(M).join(O)}}var D=s.indexOf("#");-1!==D&&(e.hash=s.substr(D),s=s.slice(0,D));var E=s.indexOf("?");if(-1!==E?(e.search=s.substr(E),e.query=s.substr(E+1),r&&(e.query=parse$2(e.query)),s=s.slice(0,E)):r&&(e.search="",e.query={}),s&&(e.pathname=s),slashedProtocol[p]&&e.hostname&&!e.pathname&&(e.pathname="/"),e.pathname||e.search){h=e.pathname||"";var P=e.search||"";e.path=h+P}return e.href=format$1(e),e}function format$1(e){var t=e.auth||"";t&&(t=(t=encodeURIComponent(t)).replace(/%3A/i,":"),t+="@");var r=e.protocol||"",n=e.pathname||"",i=e.hash||"",a=!1,o="";e.host?a=t+e.host:e.hostname&&(a=t+(-1===e.hostname.indexOf(":")?e.hostname:"["+this.hostname+"]"),e.port&&(a+=":"+e.port)),e.query&&isObject$2(e.query)&&Object.keys(e.query).length&&(o=stringify(e.query));var s=e.search||o&&"?"+o||"";return r&&":"!==r.substr(-1)&&(r+=":"),e.slashes||(!r||slashedProtocol[r])&&!1!==a?(a="//"+(a||""),n&&"/"!==n.charAt(0)&&(n="/"+n)):a||(a=""),i&&"#"!==i.charAt(0)&&(i="#"+i),s&&"?"!==s.charAt(0)&&(s="?"+s),r+a+(n=n.replace(/[?#]/g,function(e){return encodeURIComponent(e)}))+(s=s.replace("#","%23"))+i}function parseHost(e){var t=e.host,r=portPattern.exec(t);r&&(":"!==(r=r[0])&&(e.port=r.substr(1)),t=t.substr(0,t.length-r.length)),t&&(e.hostname=t)}function request(e,t){"string"==typeof e&&(e=urlParse(e));var r=-1===global$1.location.protocol.search(/^https?:$/)?"http:":"",n=e.protocol||r,i=e.hostname||e.host,a=e.port,o=e.path||"/";i&&-1!==i.indexOf(":")&&(i="["+i+"]"),e.url=(i?n+"//"+i:"")+(a?":"+a:"")+o,e.method=(e.method||"GET").toUpperCase(),e.headers=e.headers||{};var s=new ClientRequest(e);return t&&s.on("response",t),s}function get$2(e,t){var r=request(e,t);return r.end(),r}function Agent(){}Url.prototype.parse=function(e,t,r){return parse$3(this,e,t,r)},Url.prototype.format=function(){return format$1(this)},Url.prototype.resolve=function(e){return this.resolveObject(urlParse(e,!1,!0)).format()},Url.prototype.resolveObject=function(e){if(isString(e)){var t=new Url;t.parse(e,!1,!0),e=t}for(var r,n=new Url,i=Object.keys(this),a=0;a<i.length;a++){var o=i[a];n[o]=this[o]}if(n.hash=e.hash,""===e.href)return n.href=n.format(),n;if(e.slashes&&!e.protocol){for(var s=Object.keys(e),l=0;l<s.length;l++){var u=s[l];"protocol"!==u&&(n[u]=e[u])}return slashedProtocol[n.protocol]&&n.hostname&&!n.pathname&&(n.path=n.pathname="/"),n.href=n.format(),n}if(e.protocol&&e.protocol!==n.protocol){if(!slashedProtocol[e.protocol]){for(var c=Object.keys(e),d=0;d<c.length;d++){var h=c[d];n[h]=e[h]}return n.href=n.format(),n}if(n.protocol=e.protocol,e.host||hostlessProtocol[e.protocol])n.pathname=e.pathname;else{for(r=(e.pathname||"").split("/");r.length&&!(e.host=r.shift()););e.host||(e.host=""),e.hostname||(e.hostname=""),""!==r[0]&&r.unshift(""),r.length<2&&r.unshift(""),n.pathname=r.join("/")}if(n.search=e.search,n.query=e.query,n.host=e.host||"",n.auth=e.auth,n.hostname=e.hostname||e.host,n.port=e.port,n.pathname||n.search){var f=n.pathname||"",p=n.search||"";n.path=f+p}return n.slashes=n.slashes||e.slashes,n.href=n.format(),n}var g,m=n.pathname&&"/"===n.pathname.charAt(0),v=e.host||e.pathname&&"/"===e.pathname.charAt(0),y=v||m||n.host&&e.pathname,b=y,_=n.pathname&&n.pathname.split("/")||[],w=n.protocol&&!slashedProtocol[n.protocol];if(r=e.pathname&&e.pathname.split("/")||[],w&&(n.hostname="",n.port=null,n.host&&(""===_[0]?_[0]=n.host:_.unshift(n.host)),n.host="",e.protocol&&(e.hostname=null,e.port=null,e.host&&(""===r[0]?r[0]=e.host:r.unshift(e.host)),e.host=null),y=y&&(""===r[0]||""===_[0])),v)n.host=e.host||""===e.host?e.host:n.host,n.hostname=e.hostname||""===e.hostname?e.hostname:n.hostname,n.search=e.search,n.query=e.query,_=r;else if(r.length)_||(_=[]),_.pop(),_=_.concat(r),n.search=e.search,n.query=e.query;else if(!isNullOrUndefined(e.search))return w&&(n.hostname=n.host=_.shift(),(g=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=g.shift(),n.host=n.hostname=g.shift())),n.search=e.search,n.query=e.query,isNull(n.pathname)&&isNull(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.href=n.format(),n;if(!_.length)return n.pathname=null,n.search?n.path="/"+n.search:n.path=null,n.href=n.format(),n;for(var x=_.slice(-1)[0],S=(n.host||e.host||_.length>1)&&("."===x||".."===x)||""===x,k=0,$=_.length;$>=0;$--)"."===(x=_[$])?_.splice($,1):".."===x?(_.splice($,1),k++):k&&(_.splice($,1),k--);if(!y&&!b)for(;k--;k)_.unshift("..");!y||""===_[0]||_[0]&&"/"===_[0].charAt(0)||_.unshift(""),S&&"/"!==_.join("/").substr(-1)&&_.push("");var C=""===_[0]||_[0]&&"/"===_[0].charAt(0);return w&&(n.hostname=n.host=C?"":_.length?_.shift():"",(g=!!(n.host&&n.host.indexOf("@")>0)&&n.host.split("@"))&&(n.auth=g.shift(),n.host=n.hostname=g.shift())),(y=y||n.host&&_.length)&&!C&&_.unshift(""),_.length?n.pathname=_.join("/"):(n.pathname=null,n.path=null),isNull(n.pathname)&&isNull(n.search)||(n.path=(n.pathname?n.pathname:"")+(n.search?n.search:"")),n.auth=e.auth||n.auth,n.slashes=n.slashes||e.slashes,n.href=n.format(),n},Url.prototype.parseHost=function(){return parseHost(this)},Agent.defaultMaxSockets=4;var METHODS=["CHECKOUT","CONNECT","COPY","DELETE","GET","HEAD","LOCK","M-SEARCH","MERGE","MKACTIVITY","MKCOL","MOVE","NOTIFY","OPTIONS","PATCH","POST","PROPFIND","PROPPATCH","PURGE","PUT","REPORT","SEARCH","SUBSCRIBE","TRACE","UNLOCK","UNSUBSCRIBE"],STATUS_CODES={100:"Continue",101:"Switching Protocols",102:"Processing",200:"OK",201:"Created",202:"Accepted",203:"Non-Authoritative Information",204:"No Content",205:"Reset Content",206:"Partial Content",207:"Multi-Status",300:"Multiple Choices",301:"Moved Permanently",302:"Moved Temporarily",303:"See Other",304:"Not Modified",305:"Use Proxy",307:"Temporary Redirect",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Time-out",409:"Conflict",410:"Gone",411:"Length Required",412:"Precondition Failed",413:"Request Entity Too Large",414:"Request-URI Too Large",415:"Unsupported Media Type",416:"Requested Range Not Satisfiable",417:"Expectation Failed",418:"I'm a teapot",422:"Unprocessable Entity",423:"Locked",424:"Failed Dependency",425:"Unordered Collection",426:"Upgrade Required",428:"Precondition Required",429:"Too Many Requests",431:"Request Header Fields Too Large",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Gateway Time-out",505:"HTTP Version Not Supported",506:"Variant Also Negotiates",507:"Insufficient Storage",509:"Bandwidth Limit Exceeded",510:"Not Extended",511:"Network Authentication Required"},https={request:request,get:get$2,Agent:Agent,METHODS:METHODS,STATUS_CODES:STATUS_CODES},geojson=createCommonjsModule(function(e){!function(e){function t(){var e=1<=arguments.length?[].slice.call(arguments,0):[],t=e.shift(),r=e.shift();Error.apply(this,e),this.message=this.message||"Invalid Geometry: item: "+JSON.stringify(t)+", params: "+JSON.stringify(r)}e.version="0.5.0",e.defaults={doThrows:{invalidGeometry:!1}},t.prototype=Error,e.errors={InvalidGeometryError:t},e.isGeometryValid=function(e){return!(!e||!Object.keys(e).length)&&(!!e.type&&!!e.coordinates&&Array.isArray(e.coordinates)&&!!e.coordinates.length)},e.parse=function(e,t,o){var s,l,u=function(e,t){var r=e||{};for(var n in t)t.hasOwnProperty(n)&&!r[n]&&(r[n]=t[n]);return r}(t,this.defaults);if(n.length=0,function(e){for(var t in e.geom={},e)e.hasOwnProperty(t)&&-1!==r.indexOf(t)&&(e.geom[t]=e[t],delete e[t]);!function(e){for(var t in e)e.hasOwnProperty(t)&&("string"==typeof e[t]?n.push(e[t]):"object"===_typeof(e[t])&&(n.push(e[t][0]),n.push(e[t][1])));if(0===n.length)throw new Error("No geometry attributes specified")}(e.geom)}(u),l=function(e){var t;e.exclude||e.include?e.include?t=function(t){e.include.forEach(function(e){t[e]=this[e]},this)}:e.exclude&&(t=function(t){for(var r in this)this.hasOwnProperty(r)&&-1===n.indexOf(r)&&-1===e.exclude.indexOf(r)&&(t[r]=this[r])}):t=function(e){for(var t in this)this.hasOwnProperty(t)&&-1===n.indexOf(t)&&(e[t]=this[t])};return function(){var r={};return t.call(this,r),e.extra&&function(e,t){for(var r in t)t.hasOwnProperty(r)&&(e[r]=t[r])}(r,e.extra),r}}(u),Array.isArray(e)?(s={type:"FeatureCollection",features:[]},e.forEach(function(e){s.features.push(a({item:e,params:u,propFunc:l}))}),i(s,u)):i(s=a({item:e,params:u,propFunc:l}),u),!o||"function"!=typeof o)return s;o(s)};var r=["Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon","GeoJSON"],n=[];function i(e,t){if(t.crs&&function(e){if("name"===e.type){if(e.properties&&e.properties.name)return!0;throw new Error('Invalid CRS. Properties must contain "name" key')}if("link"===e.type){if(e.properties&&e.properties.href&&e.properties.type)return!0;throw new Error('Invalid CRS. Properties must contain "href" and "type" key')}throw new Error('Invald CRS. Type attribute must be "name" or "link"')}(t.crs)&&(t.isPostgres?e.geometry.crs=t.crs:e.crs=t.crs),t.bbox&&(e.bbox=t.bbox),t.extraGlobal)for(var r in e.properties={},t.extraGlobal)e.properties[r]=t.extraGlobal[r]}function a(r){var n=r.item,i=r.params,a=r.propFunc,s={type:"Feature"};return s.geometry=function r(n,i){var a={};for(var s in i.geom){var l=i.geom[s];if("string"==typeof l&&n.hasOwnProperty(l))"GeoJSON"===s?a=n[l]:(a.type=s,a.coordinates=n[l]);else if("object"!==(void 0===l?"undefined":_typeof(l))||Array.isArray(l)){if(Array.isArray(l)&&n.hasOwnProperty(l[0])&&n.hasOwnProperty(l[1]))a.type=s,a.coordinates=[Number(n[l[1]]),Number(n[l[0]])];else if(Array.isArray(l)&&o(l[0])&&o(l[1])){for(var u=[],c=0;c<l.length;c++){for(var d=l[c].split("."),h=n,f=0;f<d.length;f++){if(!h.hasOwnProperty(d[f]))return!1;h=h[d[f]]}u[c]=h}a.type=s,a.coordinates=[Number(u[1]),Number(u[0])]}}else{var p=Object.keys(l).map(function(e){var t=l[e],i=n[e];return r(i,{geom:{Point:t}})});a.type=s,a.coordinates=[].concat(p.map(function(e){return e.coordinates}))}}if(i.doThrows&&i.doThrows.invalidGeometry&&!e.isGeometryValid(a))throw new t(n,i);return a}(n,i),s.properties=a.call(n),s}function o(e){return/^.+\..+$/.test(e)}}(e.exports)}),RADIUS=6378137,FLATTENING=1/298.257223563,POLAR_RADIUS=6356752.3142,wgs84={RADIUS:RADIUS,FLATTENING:FLATTENING,POLAR_RADIUS:POLAR_RADIUS},geometry_1=geometry,ring=ringArea;function geometry(e){var t,r=0;switch(e.type){case"Polygon":return polygonArea(e.coordinates);case"MultiPolygon":for(t=0;t<e.coordinates.length;t++)r+=polygonArea(e.coordinates[t]);return r;case"Point":case"MultiPoint":case"LineString":case"MultiLineString":return 0;case"GeometryCollection":for(t=0;t<e.geometries.length;t++)r+=geometry(e.geometries[t]);return r}}function polygonArea(e){var t=0;if(e&&e.length>0){t+=Math.abs(ringArea(e[0]));for(var r=1;r<e.length;r++)t-=Math.abs(ringArea(e[r]))}return t}function ringArea(e){var t,r,n,i,a,o,s=0,l=e.length;if(l>2){for(o=0;o<l;o++)o===l-2?(n=l-2,i=l-1,a=0):o===l-1?(n=l-1,i=0,a=1):(n=o,i=o+1,a=o+2),t=e[n],r=e[i],s+=(rad(e[a][0])-rad(t[0]))*Math.sin(rad(r[1]));s=s*wgs84.RADIUS*wgs84.RADIUS/2}return s}function rad(e){return e*Math.PI/180}var geojsonArea={geometry:geometry_1,ring:ring},geojsonRewind=rewind;function rewind(e,t){switch(e&&e.type||null){case"FeatureCollection":return e.features=e.features.map(curryOuter(rewind,t)),e;case"Feature":return e.geometry=rewind(e.geometry,t),e;case"Polygon":case"MultiPolygon":return correct(e,t);default:return e}}function curryOuter(e,t){return function(r){return e(r,t)}}function correct(e,t){return"Polygon"===e.type?e.coordinates=correctRings(e.coordinates,t):"MultiPolygon"===e.type&&(e.coordinates=e.coordinates.map(curryOuter(correctRings,t))),e}function correctRings(e,t){t=!!t,e[0]=wind(e[0],t);for(var r=1;r<e.length;r++)e[r]=wind(e[r],!t);return e}function wind(e,t){return cw(e)===t?e:e.reverse()}function cw(e){return geojsonArea.ring(e)>=0}var Map$1=function(e,t){void 0===e&&(e={}),void 0===t&&(t={}),this.data=t,this.settings=e,this.init()};Map$1.prototype.init=function(){Vue.component("nyco-map",MapComponent),new Vue({el:'[data-js="map"]',delimiters:["v{","}"],data:function(){return{data:MapData.data}},created:function(){this.getBoroughData(),this.getNeighborhoodData()},methods:{getBoroughData:function(){var e=this;https.get("https://data.cityofnewyork.us/resource/7t3b-ywvw.json",function(t){var r="";t.on("data",function(e){r+=e}),t.on("end",function(){r=JSON.parse(r),MapData.data.boroughs=e.convertToGeoJSON(r)})}).on("error",function(e){MapData.data.boroughs={error:!0,message:e.message}})},getNeighborhoodData:function(){var e=this;https.get("https://data.cityofnewyork.us/resource/q2z5-ai38.json",function(t){var r="";t.on("data",function(e){r+=e}),t.on("end",function(){r=JSON.parse(r),MapData.data.neighborhoods=e.convertToGeoJSON(r)})}).on("error",function(e){MapData.data.neighborhoods={error:!0,message:e.message}})},convertToGeoJSON:function(e){return geojsonRewind(geojson.parse(e,{GeoJSON:"the_geom"}))}}})},Map$1.prototype._constants=function(e){console.dir(e)};var nyco=function(){};nyco.prototype.icons=function(e){return new Icons(e)},nyco.prototype.feed=function(e){return new Feed(e)},nyco.prototype.toggle=function(e){return new Toggle},nyco.prototype.track=function(e){return new Track},nyco.prototype.select=function(){return new Select},nyco.prototype.chart=function(e){return"bar"===e?new ChartBar:"horizontalBar"===e?new ChartHorizontalBar:"line"===e?new ChartLine:"pie"===e?new ChartPie:void 0},nyco.prototype.map=function(){return new Map$1},module.exports=nyco;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTnljb1BhdHRlcm5zLmNvbW1vbi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL2pzL21vZHVsZXMvdXRpbGl0eS5qcyIsIi4uLy4uL3NyYy9lbGVtZW50cy9pY29ucy9JY29ucy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9yb2xsdXAtcGx1Z2luLW5vZGUtZ2xvYmFscy9zcmMvZ2xvYmFsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZnJlZUdsb2JhbC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3Jvb3QuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19TeW1ib2wuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRSYXdUYWcuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19vYmplY3RUb1N0cmluZy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VHZXRUYWcuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzT2JqZWN0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc0Z1bmN0aW9uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY29yZUpzRGF0YS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2lzTWFza2VkLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fdG9Tb3VyY2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlSXNOYXRpdmUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRWYWx1ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldE5hdGl2ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2RlZmluZVByb3BlcnR5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUFzc2lnblZhbHVlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9lcS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Fzc2lnblZhbHVlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY29weU9iamVjdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaWRlbnRpdHkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19hcHBseS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX292ZXJSZXN0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9jb25zdGFudC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VTZXRUb1N0cmluZy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3Nob3J0T3V0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fc2V0VG9TdHJpbmcuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlUmVzdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNMZW5ndGguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzQXJyYXlMaWtlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faXNJbmRleC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2lzSXRlcmF0ZWVDYWxsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY3JlYXRlQXNzaWduZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlVGltZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzT2JqZWN0TGlrZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VJc0FyZ3VtZW50cy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNBcmd1bWVudHMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzQXJyYXkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL3N0dWJGYWxzZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNCdWZmZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlSXNUeXBlZEFycmF5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZVVuYXJ5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbm9kZVV0aWwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzVHlwZWRBcnJheS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2FycmF5TGlrZUtleXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pc1Byb3RvdHlwZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX25hdGl2ZUtleXNJbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VLZXlzSW4uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2tleXNJbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvYXNzaWduSW5XaXRoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fb3ZlckFyZy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldFByb3RvdHlwZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNQbGFpbk9iamVjdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNFcnJvci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvYXR0ZW1wdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2FycmF5TWFwLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZVZhbHVlcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2N1c3RvbURlZmF1bHRzQXNzaWduSW4uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19lc2NhcGVTdHJpbmdDaGFyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbmF0aXZlS2V5cy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VLZXlzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9rZXlzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fcmVJbnRlcnBvbGF0ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VQcm9wZXJ0eU9mLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZXNjYXBlSHRtbENoYXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzU3ltYm9sLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZVRvU3RyaW5nLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy90b1N0cmluZy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvZXNjYXBlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fcmVFc2NhcGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19yZUV2YWx1YXRlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy90ZW1wbGF0ZVNldHRpbmdzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy90ZW1wbGF0ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2FycmF5RWFjaC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2NyZWF0ZUJhc2VGb3IuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlRm9yLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUZvck93bi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2NyZWF0ZUJhc2VFYWNoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUVhY2guanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jYXN0RnVuY3Rpb24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2ZvckVhY2guanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19saXN0Q2FjaGVDbGVhci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Fzc29jSW5kZXhPZi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2xpc3RDYWNoZURlbGV0ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2xpc3RDYWNoZUdldC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2xpc3RDYWNoZUhhcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2xpc3RDYWNoZVNldC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX0xpc3RDYWNoZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3N0YWNrQ2xlYXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19zdGFja0RlbGV0ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3N0YWNrR2V0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fc3RhY2tIYXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19NYXAuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19uYXRpdmVDcmVhdGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19oYXNoQ2xlYXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19oYXNoRGVsZXRlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faGFzaEdldC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2hhc2hIYXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19oYXNoU2V0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fSGFzaC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX21hcENhY2hlQ2xlYXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pc0tleWFibGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRNYXBEYXRhLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbWFwQ2FjaGVEZWxldGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19tYXBDYWNoZUdldC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX21hcENhY2hlSGFzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbWFwQ2FjaGVTZXQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19NYXBDYWNoZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3N0YWNrU2V0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fU3RhY2suanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19hc3NpZ25NZXJnZVZhbHVlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY2xvbmVCdWZmZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19VaW50OEFycmF5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY2xvbmVBcnJheUJ1ZmZlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Nsb25lVHlwZWRBcnJheS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2NvcHlBcnJheS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VDcmVhdGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pbml0Q2xvbmVPYmplY3QuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzQXJyYXlMaWtlT2JqZWN0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fc2FmZUdldC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvdG9QbGFpbk9iamVjdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VNZXJnZURlZXAuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlTWVyZ2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL21lcmdlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy92YWx1ZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19zZXRDYWNoZUFkZC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3NldENhY2hlSGFzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fU2V0Q2FjaGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19hcnJheVNvbWUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jYWNoZUhhcy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2VxdWFsQXJyYXlzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbWFwVG9BcnJheS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3NldFRvQXJyYXkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19lcXVhbEJ5VGFnLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXJyYXlQdXNoLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUdldEFsbEtleXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19hcnJheUZpbHRlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvc3R1YkFycmF5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0U3ltYm9scy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldEFsbEtleXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19lcXVhbE9iamVjdHMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19EYXRhVmlldy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX1Byb21pc2UuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19TZXQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19XZWFrTWFwLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0VGFnLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUlzRXF1YWxEZWVwLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUlzRXF1YWwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlSXNNYXRjaC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2lzU3RyaWN0Q29tcGFyYWJsZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldE1hdGNoRGF0YS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX21hdGNoZXNTdHJpY3RDb21wYXJhYmxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZU1hdGNoZXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pc0tleS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvbWVtb2l6ZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX21lbW9pemVDYXBwZWQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19zdHJpbmdUb1BhdGguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jYXN0UGF0aC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3RvS2V5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUdldC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvZ2V0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUhhc0luLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faGFzUGF0aC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaGFzSW4uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlTWF0Y2hlc1Byb3BlcnR5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZVByb3BlcnR5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZVByb3BlcnR5RGVlcC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvcHJvcGVydHkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlSXRlcmF0ZWUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlTWFwLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZVNvcnRCeS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2NvbXBhcmVBc2NlbmRpbmcuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jb21wYXJlTXVsdGlwbGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlT3JkZXJCeS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvb3JkZXJCeS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvbm9vcC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2NyZWF0ZVNldC5qcyIsIi4uLy4uL3NyYy9vYmplY3RzL2ZlZWQvRmVlZC5qcyIsIi4uLy4uL3NyYy91dGlsaXRpZXMvdG9nZ2xlL1RvZ2dsZS5qcyIsIi4uLy4uL3NyYy91dGlsaXRpZXMvdHJhY2svVHJhY2suanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvdnVlL2Rpc3QvdnVlLmVzbS5icm93c2VyLmpzIiwiLi4vLi4vc3JjL2VsZW1lbnRzL3NlbGVjdC9zZWxlY3QudnVlIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1ydW50aW1lLWhlbHBlcnMvZGlzdC9ub3JtYWxpemUtY29tcG9uZW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1ydW50aW1lLWhlbHBlcnMvZGlzdC9pbmplY3Qtc3R5bGUvYnJvd3Nlci5qcyIsIi4uLy4uL3NyYy9lbGVtZW50cy9zZWxlY3Qvc2VsZWN0LmRhdGEuanMiLCIuLi8uLi9zcmMvZWxlbWVudHMvc2VsZWN0L3NlbGVjdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy92dWUtY2hhcnRqcy9lcy9taXhpbnMvaW5kZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL2hlbHBlcnMvaGVscGVycy5jb3JlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9oZWxwZXJzL2hlbHBlcnMuZWFzaW5nLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9oZWxwZXJzL2hlbHBlcnMuY2FudmFzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9oZWxwZXJzL2hlbHBlcnMub3B0aW9ucy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvaGVscGVycy9pbmRleC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvY29yZS9jb3JlLmRlZmF1bHRzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9jb3JlL2NvcmUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvY2hhcnRqcy1jb2xvci9ub2RlX21vZHVsZXMvY29sb3ItY29udmVydC9jb252ZXJzaW9ucy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9jaGFydGpzLWNvbG9yL25vZGVfbW9kdWxlcy9jb2xvci1jb252ZXJ0L2luZGV4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2NvbG9yLW5hbWUvaW5kZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvY2hhcnRqcy1jb2xvci1zdHJpbmcvY29sb3Itc3RyaW5nLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2NoYXJ0anMtY29sb3IvaW5kZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL2NvcmUvY29yZS5sYXlvdXRzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9jb3JlL2NvcmUuc2NhbGVTZXJ2aWNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9jb3JlL2NvcmUuaGVscGVycy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvY29yZS9jb3JlLmVsZW1lbnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL2NvcmUvY29yZS5hbmltYXRpb24uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL2NvcmUvY29yZS5hbmltYXRpb25zLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9lbGVtZW50cy9lbGVtZW50LmFyYy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvZWxlbWVudHMvZWxlbWVudC5saW5lLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9lbGVtZW50cy9lbGVtZW50LnBvaW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9lbGVtZW50cy9lbGVtZW50LnJlY3RhbmdsZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvZWxlbWVudHMvaW5kZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL2NvcmUvY29yZS5pbnRlcmFjdGlvbi5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvcGxhdGZvcm1zL3BsYXRmb3JtLmJhc2ljLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9wbGF0Zm9ybXMvcGxhdGZvcm0uZG9tLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9wbGF0Zm9ybXMvcGxhdGZvcm0uanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL2NvcmUvY29yZS5wbHVnaW5zLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9jb3JlL2NvcmUudGlja3MuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL2NvcmUvY29yZS5zY2FsZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvY29yZS9jb3JlLnRvb2x0aXAuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL2NvcmUvY29yZS5jb250cm9sbGVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9jb3JlL2NvcmUuZGF0YXNldENvbnRyb2xsZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL3NjYWxlcy9zY2FsZS5saW5lYXJiYXNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9zY2FsZXMvc2NhbGUuY2F0ZWdvcnkuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL3NjYWxlcy9zY2FsZS5saW5lYXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL3NjYWxlcy9zY2FsZS5sb2dhcml0aG1pYy5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvc2NhbGVzL3NjYWxlLnJhZGlhbExpbmVhci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9tb21lbnQvbW9tZW50LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9zY2FsZXMvc2NhbGUudGltZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvY29udHJvbGxlcnMvY29udHJvbGxlci5iYXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL2NvbnRyb2xsZXJzL2NvbnRyb2xsZXIuYnViYmxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9jb250cm9sbGVycy9jb250cm9sbGVyLmRvdWdobnV0LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9jb250cm9sbGVycy9jb250cm9sbGVyLmxpbmUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL2NvbnRyb2xsZXJzL2NvbnRyb2xsZXIucG9sYXJBcmVhLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9jb250cm9sbGVycy9jb250cm9sbGVyLnJhZGFyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9jb250cm9sbGVycy9jb250cm9sbGVyLnNjYXR0ZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL2NoYXJ0cy9DaGFydC5CYXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL2NoYXJ0cy9DaGFydC5CdWJibGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL2NoYXJ0cy9DaGFydC5Eb3VnaG51dC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvY2hhcnRzL0NoYXJ0LkxpbmUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL2NoYXJ0cy9DaGFydC5Qb2xhckFyZWEuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL2NoYXJ0cy9DaGFydC5SYWRhci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvY2hhcnRzL0NoYXJ0LlNjYXR0ZXIuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvY2hhcnQuanMvc3JjL3BsdWdpbnMvcGx1Z2luLmZpbGxlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvcGx1Z2lucy9wbHVnaW4ubGVnZW5kLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2NoYXJ0LmpzL3NyYy9wbHVnaW5zL3BsdWdpbi50aXRsZS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvcGx1Z2lucy9pbmRleC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9jaGFydC5qcy9zcmMvY2hhcnQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvdnVlLWNoYXJ0anMvZXMvQmFzZUNoYXJ0cy5qcyIsIi4uLy4uL3NyYy9vYmplY3RzL2NoYXJ0cy9jaGFydC0tYmFyLnZ1ZSIsIi4uLy4uL3NyYy9vYmplY3RzL2NoYXJ0cy9jaGFydC5kYXRhLmpzIiwiLi4vLi4vc3JjL29iamVjdHMvY2hhcnRzL2NoYXJ0LS1iYXIuanMiLCIuLi8uLi9zcmMvb2JqZWN0cy9jaGFydHMvY2hhcnQtLWhvcml6b250YWwtYmFyLnZ1ZSIsIi4uLy4uL3NyYy9vYmplY3RzL2NoYXJ0cy9jaGFydC0taG9yaXpvbnRhbC1iYXIuanMiLCIuLi8uLi9zcmMvb2JqZWN0cy9jaGFydHMvY2hhcnQtLWxpbmUudnVlIiwiLi4vLi4vc3JjL29iamVjdHMvY2hhcnRzL2NoYXJ0LS1saW5lLmpzIiwiLi4vLi4vc3JjL29iamVjdHMvY2hhcnRzL2NoYXJ0LS1waWUudnVlIiwiLi4vLi4vc3JjL29iamVjdHMvY2hhcnRzL2NoYXJ0LS1waWUuanMiLCIuLi8uLi9zcmMvb2JqZWN0cy9tYXBzL21hcHMudnVlIiwiLi4vLi4vc3JjL29iamVjdHMvbWFwcy9tYXAuZGF0YS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9idWZmZXItZXM2L2Jhc2U2NC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9idWZmZXItZXM2L2llZWU3NTQuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvYnVmZmVyLWVzNi9pc0FycmF5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2J1ZmZlci1lczYvaW5kZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvcHJvY2Vzcy1lczYvYnJvd3Nlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9yb2xsdXAtcGx1Z2luLW5vZGUtYnVpbHRpbnMvc3JjL2VzNi9odHRwLWxpYi9jYXBhYmlsaXR5LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3JvbGx1cC1wbHVnaW4tbm9kZS1idWlsdGlucy9zcmMvZXM2L2luaGVyaXRzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3JvbGx1cC1wbHVnaW4tbm9kZS1idWlsdGlucy9zcmMvZXM2L3V0aWwuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvcm9sbHVwLXBsdWdpbi1ub2RlLWJ1aWx0aW5zL3NyYy9lczYvZXZlbnRzLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3JvbGx1cC1wbHVnaW4tbm9kZS1idWlsdGlucy9zcmMvZXM2L3JlYWRhYmxlLXN0cmVhbS9idWZmZXItbGlzdC5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9yb2xsdXAtcGx1Z2luLW5vZGUtYnVpbHRpbnMvc3JjL2VzNi9zdHJpbmctZGVjb2Rlci5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9yb2xsdXAtcGx1Z2luLW5vZGUtYnVpbHRpbnMvc3JjL2VzNi9yZWFkYWJsZS1zdHJlYW0vcmVhZGFibGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvcm9sbHVwLXBsdWdpbi1ub2RlLWJ1aWx0aW5zL3NyYy9lczYvcmVhZGFibGUtc3RyZWFtL3dyaXRhYmxlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3JvbGx1cC1wbHVnaW4tbm9kZS1idWlsdGlucy9zcmMvZXM2L3JlYWRhYmxlLXN0cmVhbS9kdXBsZXguanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvcm9sbHVwLXBsdWdpbi1ub2RlLWJ1aWx0aW5zL3NyYy9lczYvcmVhZGFibGUtc3RyZWFtL3RyYW5zZm9ybS5qcyIsIi4uLy4uL25vZGVfbW9kdWxlcy9yb2xsdXAtcGx1Z2luLW5vZGUtYnVpbHRpbnMvc3JjL2VzNi9yZWFkYWJsZS1zdHJlYW0vcGFzc3Rocm91Z2guanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvcm9sbHVwLXBsdWdpbi1ub2RlLWJ1aWx0aW5zL3NyYy9lczYvc3RyZWFtLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3JvbGx1cC1wbHVnaW4tbm9kZS1idWlsdGlucy9zcmMvZXM2L2h0dHAtbGliL3Jlc3BvbnNlLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3JvbGx1cC1wbHVnaW4tbm9kZS1idWlsdGlucy9zcmMvZXM2L2h0dHAtbGliL3RvLWFycmF5YnVmZmVyLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3JvbGx1cC1wbHVnaW4tbm9kZS1idWlsdGlucy9zcmMvZXM2L2h0dHAtbGliL3JlcXVlc3QuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvcm9sbHVwLXBsdWdpbi1ub2RlLWJ1aWx0aW5zL3NyYy9lczYvcHVueWNvZGUuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvcm9sbHVwLXBsdWdpbi1ub2RlLWJ1aWx0aW5zL3NyYy9lczYvcXMuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvcm9sbHVwLXBsdWdpbi1ub2RlLWJ1aWx0aW5zL3NyYy9lczYvdXJsLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3JvbGx1cC1wbHVnaW4tbm9kZS1idWlsdGlucy9zcmMvZXM2L2h0dHAuanMiLCIuLi8uLi9ub2RlX21vZHVsZXMvZ2VvanNvbi9nZW9qc29uLmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL3dnczg0L2luZGV4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL0BtYXBib3gvZ2VvanNvbi1hcmVhL2luZGV4LmpzIiwiLi4vLi4vbm9kZV9tb2R1bGVzL2dlb2pzb24tcmV3aW5kL2luZGV4LmpzIiwiLi4vLi4vc3JjL29iamVjdHMvbWFwcy9NYXBzLmpzIiwiLi4vLi4vc3JjL2pzL21haW4uanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFRoZSBVdGlsaXR5IGNsYXNzXG4gKiBAY2xhc3NcbiAqL1xuY2xhc3MgVXRpbGl0eSB7XG4gIC8qKlxuICAgKiBUaGUgVXRpbGl0eSBjb25zdHJ1Y3RvclxuICAgKiBAcmV0dXJuIHtvYmplY3R9IFRoZSBVdGlsaXR5IGNsYXNzXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuXG4vKipcbiAqIEJvb2xlYW4gZm9yIGRlYnVnIG1vZGVcbiAqIEByZXR1cm4ge2Jvb2xlYW59IHdldGhlciBvciBub3QgdGhlIGZyb250LWVuZCBpcyBpbiBkZWJ1ZyBtb2RlLlxuICovXG5VdGlsaXR5LmRlYnVnID0gKCkgPT4gKFV0aWxpdHkuZ2V0VXJsUGFyYW1ldGVyKFV0aWxpdHkuUEFSQU1TLkRFQlVHKSA9PT0gJzEnKTtcblxuLyoqXG4gKiBSZXR1cm5zIHRoZSB2YWx1ZSBvZiBhIGdpdmVuIGtleSBpbiBhIFVSTCBxdWVyeSBzdHJpbmcuIElmIG5vIFVSTCBxdWVyeVxuICogc3RyaW5nIGlzIHByb3ZpZGVkLCB0aGUgY3VycmVudCBVUkwgbG9jYXRpb24gaXMgdXNlZC5cbiAqIEBwYXJhbSAge3N0cmluZ30gIG5hbWUgICAgICAgIC0gS2V5IG5hbWUuXG4gKiBAcGFyYW0gIHs/c3RyaW5nfSBxdWVyeVN0cmluZyAtIE9wdGlvbmFsIHF1ZXJ5IHN0cmluZyB0byBjaGVjay5cbiAqIEByZXR1cm4gez9zdHJpbmd9IFF1ZXJ5IHBhcmFtZXRlciB2YWx1ZS5cbiAqL1xuVXRpbGl0eS5nZXRVcmxQYXJhbWV0ZXIgPSAobmFtZSwgcXVlcnlTdHJpbmcpID0+IHtcbiAgY29uc3QgcXVlcnkgPSBxdWVyeVN0cmluZyB8fCB3aW5kb3cubG9jYXRpb24uc2VhcmNoO1xuICBjb25zdCBwYXJhbSA9IG5hbWUucmVwbGFjZSgvW1xcW10vLCAnXFxcXFsnKS5yZXBsYWNlKC9bXFxdXS8sICdcXFxcXScpO1xuICBjb25zdCByZWdleCA9IG5ldyBSZWdFeHAoJ1tcXFxcPyZdJyArIHBhcmFtICsgJz0oW14mI10qKScpO1xuICBjb25zdCByZXN1bHRzID0gcmVnZXguZXhlYyhxdWVyeSk7XG5cbiAgcmV0dXJuIHJlc3VsdHMgPT09IG51bGwgPyAnJyA6XG4gICAgZGVjb2RlVVJJQ29tcG9uZW50KHJlc3VsdHNbMV0ucmVwbGFjZSgvXFwrL2csICcgJykpO1xufTtcblxuLyoqXG4gKiBGb3IgdHJhbnNsYXRpbmcgc3RyaW5ncywgdGhlcmUgaXMgYSBnbG9iYWwgTE9DQUxJWkVEX1NUUklOR1MgYXJyYXkgdGhhdFxuICogaXMgZGVmaW5lZCBvbiB0aGUgSFRNTCB0ZW1wbGF0ZSBsZXZlbCBzbyB0aGF0IHRob3NlIHN0cmluZ3MgYXJlIGV4cG9zZWQgdG9cbiAqIFdQTUwgdHJhbnNsYXRpb24uIFRoZSBMT0NBTElaRURfU1RSSU5HUyBhcnJheSBpcyBjb21wb3NlZCBvZiBvYmplY3RzIHdpdGggYVxuICogYHNsdWdgIGtleSB3aG9zZSB2YWx1ZSBpcyBzb21lIGNvbnN0YW50LCBhbmQgYSBgbGFiZWxgIHZhbHVlIHdoaWNoIGlzIHRoZVxuICogdHJhbnNsYXRlZCBlcXVpdmFsZW50LiBUaGlzIGZ1bmN0aW9uIHRha2VzIGEgc2x1ZyBuYW1lIGFuZCByZXR1cm5zIHRoZVxuICogbGFiZWwuXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHNsdWdcbiAqIEByZXR1cm4ge3N0cmluZ30gbG9jYWxpemVkIHZhbHVlXG4gKi9cblV0aWxpdHkubG9jYWxpemUgPSBmdW5jdGlvbihzbHVnKSB7XG4gIGxldCB0ZXh0ID0gc2x1ZyB8fCAnJztcbiAgY29uc3Qgc3RyaW5ncyA9IHdpbmRvdy5MT0NBTElaRURfU1RSSU5HUyB8fCBbXTtcbiAgY29uc3QgbWF0Y2ggPSBzdHJpbmdzLmZpbHRlcihcbiAgICAocykgPT4gKHMuaGFzT3duUHJvcGVydHkoJ3NsdWcnKSAmJiBzWydzbHVnJ10gPT09IHNsdWcpID8gcyA6IGZhbHNlXG4gICk7XG4gIHJldHVybiAobWF0Y2hbMF0gJiYgbWF0Y2hbMF0uaGFzT3duUHJvcGVydHkoJ2xhYmVsJykpID8gbWF0Y2hbMF0ubGFiZWwgOiB0ZXh0O1xufTtcblxuLyoqXG4gKiBBcHBsaWNhdGlvbiBwYXJhbWV0ZXJzXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5VdGlsaXR5LlBBUkFNUyA9IHtcbiAgREVCVUc6ICdkZWJ1Zydcbn07XG5cbi8qKlxuICogU2VsZWN0b3JzIGZvciB0aGUgVXRpbGl0eSBtb2R1bGVcbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cblV0aWxpdHkuU0VMRUNUT1JTID0ge1xuICBwYXJzZU1hcmtkb3duOiAnW2RhdGEtanM9XCJtYXJrZG93blwiXSdcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFV0aWxpdHk7XG4iLCIndXNlIHN0cmljdCc7XG5cbmltcG9ydCBVdGlsaXR5IGZyb20gJy4uLy4uL2pzL21vZHVsZXMvdXRpbGl0eSc7XG5cbi8qKlxuICogVGhlIEljb24gbW9kdWxlXG4gKiBAY2xhc3NcbiAqL1xuY2xhc3MgSWNvbnMge1xuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSAge1N0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgaWNvbiBmaWxlXG4gICAqIEByZXR1cm4ge29iamVjdH0gVGhlIGNsYXNzXG4gICAqL1xuICBjb25zdHJ1Y3RvcihwYXRoKSB7XG4gICAgcGF0aCA9IChwYXRoKSA/IHBhdGggOiBJY29ucy5wYXRoO1xuXG4gICAgZmV0Y2gocGF0aClcbiAgICAgIC50aGVuKChyZXNwb25zZSkgPT4ge1xuICAgICAgICBpZiAocmVzcG9uc2Uub2spXG4gICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnRleHQoKTtcbiAgICAgICAgZWxzZVxuICAgICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb25zb2xlXG4gICAgICAgICAgaWYgKFV0aWxpdHkuZGVidWcoKSkgY29uc29sZS5kaXIocmVzcG9uc2UpO1xuICAgICAgfSlcbiAgICAgIC5jYXRjaCgoZXJyb3IpID0+IHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWNvbnNvbGVcbiAgICAgICAgaWYgKFV0aWxpdHkuZGVidWcoKSkgY29uc29sZS5kaXIoZXJyb3IpO1xuICAgICAgfSlcbiAgICAgIC50aGVuKChkYXRhKSA9PiB7XG4gICAgICAgIGNvbnN0IHNwcml0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBzcHJpdGUuaW5uZXJIVE1MID0gZGF0YTtcbiAgICAgICAgc3ByaXRlLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCB0cnVlKTtcbiAgICAgICAgc3ByaXRlLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCAnZGlzcGxheTogbm9uZTsnKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChzcHJpdGUpO1xuICAgICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxufVxuXG4vKiogQHR5cGUge1N0cmluZ30gVGhlIHBhdGggb2YgdGhlIGljb24gZmlsZSAqL1xuSWNvbnMucGF0aCA9ICdpY29ucy5zdmcnO1xuXG5leHBvcnQgZGVmYXVsdCBJY29ucztcbiIsImV4cG9ydCBkZWZhdWx0ICh0eXBlb2YgZ2xvYmFsICE9PSBcInVuZGVmaW5lZFwiID8gZ2xvYmFsIDpcbiAgICAgICAgICAgIHR5cGVvZiBzZWxmICE9PSBcInVuZGVmaW5lZFwiID8gc2VsZiA6XG4gICAgICAgICAgICB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDoge30pO1xuIiwiLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuZXhwb3J0IGRlZmF1bHQgZnJlZUdsb2JhbDtcbiIsImltcG9ydCBmcmVlR2xvYmFsIGZyb20gJy4vX2ZyZWVHbG9iYWwuanMnO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHNlbGZgLiAqL1xudmFyIGZyZWVTZWxmID0gdHlwZW9mIHNlbGYgPT0gJ29iamVjdCcgJiYgc2VsZiAmJiBzZWxmLk9iamVjdCA9PT0gT2JqZWN0ICYmIHNlbGY7XG5cbi8qKiBVc2VkIGFzIGEgcmVmZXJlbmNlIHRvIHRoZSBnbG9iYWwgb2JqZWN0LiAqL1xudmFyIHJvb3QgPSBmcmVlR2xvYmFsIHx8IGZyZWVTZWxmIHx8IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cbmV4cG9ydCBkZWZhdWx0IHJvb3Q7XG4iLCJpbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbmV4cG9ydCBkZWZhdWx0IFN5bWJvbDtcbiIsImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRSYXdUYWc7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgb2JqZWN0VG9TdHJpbmc7XG4iLCJpbXBvcnQgU3ltYm9sIGZyb20gJy4vX1N5bWJvbC5qcyc7XG5pbXBvcnQgZ2V0UmF3VGFnIGZyb20gJy4vX2dldFJhd1RhZy5qcyc7XG5pbXBvcnQgb2JqZWN0VG9TdHJpbmcgZnJvbSAnLi9fb2JqZWN0VG9TdHJpbmcuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICB9XG4gIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUdldFRhZztcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc09iamVjdDtcbiIsImltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0Z1bmN0aW9uO1xuIiwiaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbnZhciBjb3JlSnNEYXRhID0gcm9vdFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG5cbmV4cG9ydCBkZWZhdWx0IGNvcmVKc0RhdGE7XG4iLCJpbXBvcnQgY29yZUpzRGF0YSBmcm9tICcuL19jb3JlSnNEYXRhLmpzJztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1ldGhvZHMgbWFzcXVlcmFkaW5nIGFzIG5hdGl2ZS4gKi9cbnZhciBtYXNrU3JjS2V5ID0gKGZ1bmN0aW9uKCkge1xuICB2YXIgdWlkID0gL1teLl0rJC8uZXhlYyhjb3JlSnNEYXRhICYmIGNvcmVKc0RhdGEua2V5cyAmJiBjb3JlSnNEYXRhLmtleXMuSUVfUFJPVE8gfHwgJycpO1xuICByZXR1cm4gdWlkID8gKCdTeW1ib2woc3JjKV8xLicgKyB1aWQpIDogJyc7XG59KCkpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgZnVuY2AgaGFzIGl0cyBzb3VyY2UgbWFza2VkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgZnVuY2AgaXMgbWFza2VkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzTWFza2VkKGZ1bmMpIHtcbiAgcmV0dXJuICEhbWFza1NyY0tleSAmJiAobWFza1NyY0tleSBpbiBmdW5jKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNNYXNrZWQ7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAqL1xuZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRvU291cmNlO1xuIiwiaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi9pc0Z1bmN0aW9uLmpzJztcbmltcG9ydCBpc01hc2tlZCBmcm9tICcuL19pc01hc2tlZC5qcyc7XG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5pbXBvcnQgdG9Tb3VyY2UgZnJvbSAnLi9fdG9Tb3VyY2UuanMnO1xuXG4vKipcbiAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICovXG52YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG52YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG52YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbik7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXNOYXRpdmU7XG4iLCIvKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0VmFsdWU7XG4iLCJpbXBvcnQgYmFzZUlzTmF0aXZlIGZyb20gJy4vX2Jhc2VJc05hdGl2ZS5qcyc7XG5pbXBvcnQgZ2V0VmFsdWUgZnJvbSAnLi9fZ2V0VmFsdWUuanMnO1xuXG4vKipcbiAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXROYXRpdmU7XG4iLCJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICB2YXIgZnVuYyA9IGdldE5hdGl2ZShPYmplY3QsICdkZWZpbmVQcm9wZXJ0eScpO1xuICAgIGZ1bmMoe30sICcnLCB7fSk7XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVQcm9wZXJ0eTtcbiIsImltcG9ydCBkZWZpbmVQcm9wZXJ0eSBmcm9tICcuL19kZWZpbmVQcm9wZXJ0eS5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGFzc2lnblZhbHVlYCBhbmQgYGFzc2lnbk1lcmdlVmFsdWVgIHdpdGhvdXRcbiAqIHZhbHVlIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgPT0gJ19fcHJvdG9fXycgJiYgZGVmaW5lUHJvcGVydHkpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgICAnZW51bWVyYWJsZSc6IHRydWUsXG4gICAgICAndmFsdWUnOiB2YWx1ZSxcbiAgICAgICd3cml0YWJsZSc6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VBc3NpZ25WYWx1ZTtcbiIsIi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKCdhJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKE5hTiwgTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBlcTtcbiIsImltcG9ydCBiYXNlQXNzaWduVmFsdWUgZnJvbSAnLi9fYmFzZUFzc2lnblZhbHVlLmpzJztcbmltcG9ydCBlcSBmcm9tICcuL2VxLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBc3NpZ25zIGB2YWx1ZWAgdG8gYGtleWAgb2YgYG9iamVjdGAgaWYgdGhlIGV4aXN0aW5nIHZhbHVlIGlzIG5vdCBlcXVpdmFsZW50XG4gKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XTtcbiAgaWYgKCEoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgZXEob2JqVmFsdWUsIHZhbHVlKSkgfHxcbiAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgYXNzaWduVmFsdWU7XG4iLCJpbXBvcnQgYXNzaWduVmFsdWUgZnJvbSAnLi9fYXNzaWduVmFsdWUuanMnO1xuaW1wb3J0IGJhc2VBc3NpZ25WYWx1ZSBmcm9tICcuL19iYXNlQXNzaWduVmFsdWUuanMnO1xuXG4vKipcbiAqIENvcGllcyBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb20uXG4gKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMgdG8gY29weS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyB0by5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvcGllZCB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBjb3B5T2JqZWN0KHNvdXJjZSwgcHJvcHMsIG9iamVjdCwgY3VzdG9taXplcikge1xuICB2YXIgaXNOZXcgPSAhb2JqZWN0O1xuICBvYmplY3QgfHwgKG9iamVjdCA9IHt9KTtcblxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG5cbiAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICA/IGN1c3RvbWl6ZXIob2JqZWN0W2tleV0sIHNvdXJjZVtrZXldLCBrZXksIG9iamVjdCwgc291cmNlKVxuICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgbmV3VmFsdWUgPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gICAgaWYgKGlzTmV3KSB7XG4gICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9iamVjdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29weU9iamVjdDtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQgaXQgcmVjZWl2ZXMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgQW55IHZhbHVlLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKlxuICogY29uc29sZS5sb2coXy5pZGVudGl0eShvYmplY3QpID09PSBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlkZW50aXR5O1xuIiwiLyoqXG4gKiBBIGZhc3RlciBhbHRlcm5hdGl2ZSB0byBgRnVuY3Rpb24jYXBwbHlgLCB0aGlzIGZ1bmN0aW9uIGludm9rZXMgYGZ1bmNgXG4gKiB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiBgdGhpc0FyZ2AgYW5kIHRoZSBhcmd1bWVudHMgb2YgYGFyZ3NgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBpbnZva2UuXG4gKiBAcGFyYW0geyp9IHRoaXNBcmcgVGhlIGB0aGlzYCBiaW5kaW5nIG9mIGBmdW5jYC5cbiAqIEBwYXJhbSB7QXJyYXl9IGFyZ3MgVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzdWx0IG9mIGBmdW5jYC5cbiAqL1xuZnVuY3Rpb24gYXBwbHkoZnVuYywgdGhpc0FyZywgYXJncykge1xuICBzd2l0Y2ggKGFyZ3MubGVuZ3RoKSB7XG4gICAgY2FzZSAwOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcpO1xuICAgIGNhc2UgMTogcmV0dXJuIGZ1bmMuY2FsbCh0aGlzQXJnLCBhcmdzWzBdKTtcbiAgICBjYXNlIDI6IHJldHVybiBmdW5jLmNhbGwodGhpc0FyZywgYXJnc1swXSwgYXJnc1sxXSk7XG4gICAgY2FzZSAzOiByZXR1cm4gZnVuYy5jYWxsKHRoaXNBcmcsIGFyZ3NbMF0sIGFyZ3NbMV0sIGFyZ3NbMl0pO1xuICB9XG4gIHJldHVybiBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcHBseTtcbiIsImltcG9ydCBhcHBseSBmcm9tICcuL19hcHBseS5qcyc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVNYXggPSBNYXRoLm1heDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VSZXN0YCB3aGljaCB0cmFuc2Zvcm1zIHRoZSByZXN0IGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhcHBseSBhIHJlc3QgcGFyYW1ldGVyIHRvLlxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD1mdW5jLmxlbmd0aC0xXSBUaGUgc3RhcnQgcG9zaXRpb24gb2YgdGhlIHJlc3QgcGFyYW1ldGVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSByZXN0IGFycmF5IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyUmVzdChmdW5jLCBzdGFydCwgdHJhbnNmb3JtKSB7XG4gIHN0YXJ0ID0gbmF0aXZlTWF4KHN0YXJ0ID09PSB1bmRlZmluZWQgPyAoZnVuYy5sZW5ndGggLSAxKSA6IHN0YXJ0LCAwKTtcbiAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICBpbmRleCA9IC0xLFxuICAgICAgICBsZW5ndGggPSBuYXRpdmVNYXgoYXJncy5sZW5ndGggLSBzdGFydCwgMCksXG4gICAgICAgIGFycmF5ID0gQXJyYXkobGVuZ3RoKTtcblxuICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBhcnJheVtpbmRleF0gPSBhcmdzW3N0YXJ0ICsgaW5kZXhdO1xuICAgIH1cbiAgICBpbmRleCA9IC0xO1xuICAgIHZhciBvdGhlckFyZ3MgPSBBcnJheShzdGFydCArIDEpO1xuICAgIHdoaWxlICgrK2luZGV4IDwgc3RhcnQpIHtcbiAgICAgIG90aGVyQXJnc1tpbmRleF0gPSBhcmdzW2luZGV4XTtcbiAgICB9XG4gICAgb3RoZXJBcmdzW3N0YXJ0XSA9IHRyYW5zZm9ybShhcnJheSk7XG4gICAgcmV0dXJuIGFwcGx5KGZ1bmMsIHRoaXMsIG90aGVyQXJncyk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG92ZXJSZXN0O1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGB2YWx1ZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJldHVybiBmcm9tIHRoZSBuZXcgZnVuY3Rpb24uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBjb25zdGFudCBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBfLnRpbWVzKDIsIF8uY29uc3RhbnQoeyAnYSc6IDEgfSkpO1xuICpcbiAqIGNvbnNvbGUubG9nKG9iamVjdHMpO1xuICogLy8gPT4gW3sgJ2EnOiAxIH0sIHsgJ2EnOiAxIH1dXG4gKlxuICogY29uc29sZS5sb2cob2JqZWN0c1swXSA9PT0gb2JqZWN0c1sxXSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGNvbnN0YW50KHZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbnN0YW50O1xuIiwiaW1wb3J0IGNvbnN0YW50IGZyb20gJy4vY29uc3RhbnQuanMnO1xuaW1wb3J0IGRlZmluZVByb3BlcnR5IGZyb20gJy4vX2RlZmluZVByb3BlcnR5LmpzJztcbmltcG9ydCBpZGVudGl0eSBmcm9tICcuL2lkZW50aXR5LmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgc2V0VG9TdHJpbmdgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaG90IGxvb3Agc2hvcnRpbmcuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICovXG52YXIgYmFzZVNldFRvU3RyaW5nID0gIWRlZmluZVByb3BlcnR5ID8gaWRlbnRpdHkgOiBmdW5jdGlvbihmdW5jLCBzdHJpbmcpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5KGZ1bmMsICd0b1N0cmluZycsIHtcbiAgICAnY29uZmlndXJhYmxlJzogdHJ1ZSxcbiAgICAnZW51bWVyYWJsZSc6IGZhbHNlLFxuICAgICd2YWx1ZSc6IGNvbnN0YW50KHN0cmluZyksXG4gICAgJ3dyaXRhYmxlJzogdHJ1ZVxuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VTZXRUb1N0cmluZztcbiIsIi8qKiBVc2VkIHRvIGRldGVjdCBob3QgZnVuY3Rpb25zIGJ5IG51bWJlciBvZiBjYWxscyB3aXRoaW4gYSBzcGFuIG9mIG1pbGxpc2Vjb25kcy4gKi9cbnZhciBIT1RfQ09VTlQgPSA4MDAsXG4gICAgSE9UX1NQQU4gPSAxNjtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU5vdyA9IERhdGUubm93O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0J2xsIHNob3J0IG91dCBhbmQgaW52b2tlIGBpZGVudGl0eWAgaW5zdGVhZFxuICogb2YgYGZ1bmNgIHdoZW4gaXQncyBjYWxsZWQgYEhPVF9DT1VOVGAgb3IgbW9yZSB0aW1lcyBpbiBgSE9UX1NQQU5gXG4gKiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHJlc3RyaWN0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc2hvcnRhYmxlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBzaG9ydE91dChmdW5jKSB7XG4gIHZhciBjb3VudCA9IDAsXG4gICAgICBsYXN0Q2FsbGVkID0gMDtcblxuICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgdmFyIHN0YW1wID0gbmF0aXZlTm93KCksXG4gICAgICAgIHJlbWFpbmluZyA9IEhPVF9TUEFOIC0gKHN0YW1wIC0gbGFzdENhbGxlZCk7XG5cbiAgICBsYXN0Q2FsbGVkID0gc3RhbXA7XG4gICAgaWYgKHJlbWFpbmluZyA+IDApIHtcbiAgICAgIGlmICgrK2NvdW50ID49IEhPVF9DT1VOVCkge1xuICAgICAgICByZXR1cm4gYXJndW1lbnRzWzBdO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBjb3VudCA9IDA7XG4gICAgfVxuICAgIHJldHVybiBmdW5jLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2hvcnRPdXQ7XG4iLCJpbXBvcnQgYmFzZVNldFRvU3RyaW5nIGZyb20gJy4vX2Jhc2VTZXRUb1N0cmluZy5qcyc7XG5pbXBvcnQgc2hvcnRPdXQgZnJvbSAnLi9fc2hvcnRPdXQuanMnO1xuXG4vKipcbiAqIFNldHMgdGhlIGB0b1N0cmluZ2AgbWV0aG9kIG9mIGBmdW5jYCB0byByZXR1cm4gYHN0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN0cmluZyBUaGUgYHRvU3RyaW5nYCByZXN1bHQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgYGZ1bmNgLlxuICovXG52YXIgc2V0VG9TdHJpbmcgPSBzaG9ydE91dChiYXNlU2V0VG9TdHJpbmcpO1xuXG5leHBvcnQgZGVmYXVsdCBzZXRUb1N0cmluZztcbiIsImltcG9ydCBpZGVudGl0eSBmcm9tICcuL2lkZW50aXR5LmpzJztcbmltcG9ydCBvdmVyUmVzdCBmcm9tICcuL19vdmVyUmVzdC5qcyc7XG5pbXBvcnQgc2V0VG9TdHJpbmcgZnJvbSAnLi9fc2V0VG9TdHJpbmcuanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnJlc3RgIHdoaWNoIGRvZXNuJ3QgdmFsaWRhdGUgb3IgY29lcmNlIGFyZ3VtZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gYXBwbHkgYSByZXN0IHBhcmFtZXRlciB0by5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9ZnVuYy5sZW5ndGgtMV0gVGhlIHN0YXJ0IHBvc2l0aW9uIG9mIHRoZSByZXN0IHBhcmFtZXRlci5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUmVzdChmdW5jLCBzdGFydCkge1xuICByZXR1cm4gc2V0VG9TdHJpbmcob3ZlclJlc3QoZnVuYywgc3RhcnQsIGlkZW50aXR5KSwgZnVuYyArICcnKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZVJlc3Q7XG4iLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNMZW5ndGgoMyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzTGVuZ3RoO1xuIiwiaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi9pc0Z1bmN0aW9uLmpzJztcbmltcG9ydCBpc0xlbmd0aCBmcm9tICcuL2lzTGVuZ3RoLmpzJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLiBBIHZhbHVlIGlzIGNvbnNpZGVyZWQgYXJyYXktbGlrZSBpZiBpdCdzXG4gKiBub3QgYSBmdW5jdGlvbiBhbmQgaGFzIGEgYHZhbHVlLmxlbmd0aGAgdGhhdCdzIGFuIGludGVnZXIgZ3JlYXRlciB0aGFuIG9yXG4gKiBlcXVhbCB0byBgMGAgYW5kIGxlc3MgdGhhbiBvciBlcXVhbCB0byBgTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVJgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZSgnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2UodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgaXNMZW5ndGgodmFsdWUubGVuZ3RoKSAmJiAhaXNGdW5jdGlvbih2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzQXJyYXlMaWtlO1xuIiwiLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgTUFYX1NBRkVfSU5URUdFUiA9IDkwMDcxOTkyNTQ3NDA5OTE7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCB1bnNpZ25lZCBpbnRlZ2VyIHZhbHVlcy4gKi9cbnZhciByZUlzVWludCA9IC9eKD86MHxbMS05XVxcZCopJC87XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBhcnJheS1saWtlIGluZGV4LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbbGVuZ3RoPU1BWF9TQUZFX0lOVEVHRVJdIFRoZSB1cHBlciBib3VuZHMgb2YgYSB2YWxpZCBpbmRleC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgaW5kZXgsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNJbmRleCh2YWx1ZSwgbGVuZ3RoKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICBsZW5ndGggPSBsZW5ndGggPT0gbnVsbCA/IE1BWF9TQUZFX0lOVEVHRVIgOiBsZW5ndGg7XG5cbiAgcmV0dXJuICEhbGVuZ3RoICYmXG4gICAgKHR5cGUgPT0gJ251bWJlcicgfHxcbiAgICAgICh0eXBlICE9ICdzeW1ib2wnICYmIHJlSXNVaW50LnRlc3QodmFsdWUpKSkgJiZcbiAgICAgICAgKHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPCBsZW5ndGgpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0luZGV4O1xuIiwiaW1wb3J0IGVxIGZyb20gJy4vZXEuanMnO1xuaW1wb3J0IGlzQXJyYXlMaWtlIGZyb20gJy4vaXNBcnJheUxpa2UuanMnO1xuaW1wb3J0IGlzSW5kZXggZnJvbSAnLi9faXNJbmRleC5qcyc7XG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIHRoZSBnaXZlbiBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIHZhbHVlIGFyZ3VtZW50LlxuICogQHBhcmFtIHsqfSBpbmRleCBUaGUgcG90ZW50aWFsIGl0ZXJhdGVlIGluZGV4IG9yIGtleSBhcmd1bWVudC5cbiAqIEBwYXJhbSB7Kn0gb2JqZWN0IFRoZSBwb3RlbnRpYWwgaXRlcmF0ZWUgb2JqZWN0IGFyZ3VtZW50LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcmd1bWVudHMgYXJlIGZyb20gYW4gaXRlcmF0ZWUgY2FsbCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSXRlcmF0ZWVDYWxsKHZhbHVlLCBpbmRleCwgb2JqZWN0KSB7XG4gIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdHlwZSA9IHR5cGVvZiBpbmRleDtcbiAgaWYgKHR5cGUgPT0gJ251bWJlcidcbiAgICAgICAgPyAoaXNBcnJheUxpa2Uob2JqZWN0KSAmJiBpc0luZGV4KGluZGV4LCBvYmplY3QubGVuZ3RoKSlcbiAgICAgICAgOiAodHlwZSA9PSAnc3RyaW5nJyAmJiBpbmRleCBpbiBvYmplY3QpXG4gICAgICApIHtcbiAgICByZXR1cm4gZXEob2JqZWN0W2luZGV4XSwgdmFsdWUpO1xuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNJdGVyYXRlZUNhbGw7XG4iLCJpbXBvcnQgYmFzZVJlc3QgZnJvbSAnLi9fYmFzZVJlc3QuanMnO1xuaW1wb3J0IGlzSXRlcmF0ZWVDYWxsIGZyb20gJy4vX2lzSXRlcmF0ZWVDYWxsLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5hc3NpZ25gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBhc3NpZ25lciBUaGUgZnVuY3Rpb24gdG8gYXNzaWduIHZhbHVlcy5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFzc2lnbmVyIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVBc3NpZ25lcihhc3NpZ25lcikge1xuICByZXR1cm4gYmFzZVJlc3QoZnVuY3Rpb24ob2JqZWN0LCBzb3VyY2VzKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGxlbmd0aCA9IHNvdXJjZXMubGVuZ3RoLFxuICAgICAgICBjdXN0b21pemVyID0gbGVuZ3RoID4gMSA/IHNvdXJjZXNbbGVuZ3RoIC0gMV0gOiB1bmRlZmluZWQsXG4gICAgICAgIGd1YXJkID0gbGVuZ3RoID4gMiA/IHNvdXJjZXNbMl0gOiB1bmRlZmluZWQ7XG5cbiAgICBjdXN0b21pemVyID0gKGFzc2lnbmVyLmxlbmd0aCA+IDMgJiYgdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJylcbiAgICAgID8gKGxlbmd0aC0tLCBjdXN0b21pemVyKVxuICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc291cmNlc1swXSwgc291cmNlc1sxXSwgZ3VhcmQpKSB7XG4gICAgICBjdXN0b21pemVyID0gbGVuZ3RoIDwgMyA/IHVuZGVmaW5lZCA6IGN1c3RvbWl6ZXI7XG4gICAgICBsZW5ndGggPSAxO1xuICAgIH1cbiAgICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgICAgdmFyIHNvdXJjZSA9IHNvdXJjZXNbaW5kZXhdO1xuICAgICAgaWYgKHNvdXJjZSkge1xuICAgICAgICBhc3NpZ25lcihvYmplY3QsIHNvdXJjZSwgaW5kZXgsIGN1c3RvbWl6ZXIpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0O1xuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQXNzaWduZXI7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRpbWVzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHNcbiAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGluZGV4KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlVGltZXM7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNPYmplY3RMaWtlO1xuIiwiaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0FyZ3VtZW50c2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICovXG5mdW5jdGlvbiBiYXNlSXNBcmd1bWVudHModmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gYXJnc1RhZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUlzQXJndW1lbnRzO1xuIiwiaW1wb3J0IGJhc2VJc0FyZ3VtZW50cyBmcm9tICcuL19iYXNlSXNBcmd1bWVudHMuanMnO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tICcuL2lzT2JqZWN0TGlrZS5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgbGlrZWx5IGFuIGBhcmd1bWVudHNgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FyZ3VtZW50cyA9IGJhc2VJc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKSA/IGJhc2VJc0FyZ3VtZW50cyA6IGZ1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsICdjYWxsZWUnKSAmJlxuICAgICFwcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHZhbHVlLCAnY2FsbGVlJyk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBpc0FyZ3VtZW50cztcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhbiBgQXJyYXlgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXkoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXkoZG9jdW1lbnQuYm9keS5jaGlsZHJlbik7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheSgnYWJjJyk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNBcnJheShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xuXG5leHBvcnQgZGVmYXVsdCBpc0FycmF5O1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGBmYWxzZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRpbWVzKDIsIF8uc3R1YkZhbHNlKTtcbiAqIC8vID0+IFtmYWxzZSwgZmFsc2VdXG4gKi9cbmZ1bmN0aW9uIHN0dWJGYWxzZSgpIHtcbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdHViRmFsc2U7XG4iLCJpbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcbmltcG9ydCBzdHViRmFsc2UgZnJvbSAnLi9zdHViRmFsc2UuanMnO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyByb290LkJ1ZmZlciA6IHVuZGVmaW5lZDtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUlzQnVmZmVyID0gQnVmZmVyID8gQnVmZmVyLmlzQnVmZmVyIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbmV4cG9ydCBkZWZhdWx0IGlzQnVmZmVyO1xuIiwiaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgaXNMZW5ndGggZnJvbSAnLi9pc0xlbmd0aC5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgb2YgdHlwZWQgYXJyYXlzLiAqL1xudmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG50eXBlZEFycmF5VGFnc1tmbG9hdDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDhUYWddID0gdHlwZWRBcnJheVRhZ3NbaW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50OENsYW1wZWRUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbnR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbnR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID1cbnR5cGVkQXJyYXlUYWdzW2RhdGFWaWV3VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2RhdGVUYWddID1cbnR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbnR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID1cbnR5cGVkQXJyYXlUYWdzW29iamVjdFRhZ10gPSB0eXBlZEFycmF5VGFnc1tyZWdleHBUYWddID1cbnR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbnR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3NbYmFzZUdldFRhZyh2YWx1ZSldO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXNUeXBlZEFycmF5O1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmFyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBzdG9yaW5nIG1ldGFkYXRhLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlVW5hcnk7XG4iLCJpbXBvcnQgZnJlZUdsb2JhbCBmcm9tICcuL19mcmVlR2xvYmFsLmpzJztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYHByb2Nlc3NgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlUHJvY2VzcyA9IG1vZHVsZUV4cG9ydHMgJiYgZnJlZUdsb2JhbC5wcm9jZXNzO1xuXG4vKiogVXNlZCB0byBhY2Nlc3MgZmFzdGVyIE5vZGUuanMgaGVscGVycy4gKi9cbnZhciBub2RlVXRpbCA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICAvLyBVc2UgYHV0aWwudHlwZXNgIGZvciBOb2RlLmpzIDEwKy5cbiAgICB2YXIgdHlwZXMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUucmVxdWlyZSAmJiBmcmVlTW9kdWxlLnJlcXVpcmUoJ3V0aWwnKS50eXBlcztcblxuICAgIGlmICh0eXBlcykge1xuICAgICAgcmV0dXJuIHR5cGVzO1xuICAgIH1cblxuICAgIC8vIExlZ2FjeSBgcHJvY2Vzcy5iaW5kaW5nKCd1dGlsJylgIGZvciBOb2RlLmpzIDwgMTAuXG4gICAgcmV0dXJuIGZyZWVQcm9jZXNzICYmIGZyZWVQcm9jZXNzLmJpbmRpbmcgJiYgZnJlZVByb2Nlc3MuYmluZGluZygndXRpbCcpO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxuZXhwb3J0IGRlZmF1bHQgbm9kZVV0aWw7XG4iLCJpbXBvcnQgYmFzZUlzVHlwZWRBcnJheSBmcm9tICcuL19iYXNlSXNUeXBlZEFycmF5LmpzJztcbmltcG9ydCBiYXNlVW5hcnkgZnJvbSAnLi9fYmFzZVVuYXJ5LmpzJztcbmltcG9ydCBub2RlVXRpbCBmcm9tICcuL19ub2RlVXRpbC5qcyc7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzVHlwZWRBcnJheTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG5leHBvcnQgZGVmYXVsdCBpc1R5cGVkQXJyYXk7XG4iLCJpbXBvcnQgYmFzZVRpbWVzIGZyb20gJy4vX2Jhc2VUaW1lcy5qcyc7XG5pbXBvcnQgaXNBcmd1bWVudHMgZnJvbSAnLi9pc0FyZ3VtZW50cy5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IGlzQnVmZmVyIGZyb20gJy4vaXNCdWZmZXIuanMnO1xuaW1wb3J0IGlzSW5kZXggZnJvbSAnLi9faXNJbmRleC5qcyc7XG5pbXBvcnQgaXNUeXBlZEFycmF5IGZyb20gJy4vaXNUeXBlZEFycmF5LmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpLFxuICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgaXNCdWZmID0gIWlzQXJyICYmICFpc0FyZyAmJiBpc0J1ZmZlcih2YWx1ZSksXG4gICAgICBpc1R5cGUgPSAhaXNBcnIgJiYgIWlzQXJnICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHZhbHVlKSxcbiAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgIHJlc3VsdCA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAhKHNraXBJbmRleGVzICYmIChcbiAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICBrZXkgPT0gJ2xlbmd0aCcgfHxcbiAgICAgICAgICAgLy8gTm9kZS5qcyAwLjEwIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIGJ1ZmZlcnMuXG4gICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAvLyBQaGFudG9tSlMgMiBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiB0eXBlZCBhcnJheXMuXG4gICAgICAgICAgIChpc1R5cGUgJiYgKGtleSA9PSAnYnVmZmVyJyB8fCBrZXkgPT0gJ2J5dGVMZW5ndGgnIHx8IGtleSA9PSAnYnl0ZU9mZnNldCcpKSB8fFxuICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgIGlzSW5kZXgoa2V5LCBsZW5ndGgpXG4gICAgICAgICkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcnJheUxpa2VLZXlzO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc1Byb3RvdHlwZTtcbiIsIi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlXG4gKiBbYE9iamVjdC5rZXlzYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBleGNlcHQgdGhhdCBpdCBpbmNsdWRlcyBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBuYXRpdmVLZXlzSW4ob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgaWYgKG9iamVjdCAhPSBudWxsKSB7XG4gICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBuYXRpdmVLZXlzSW47XG4iLCJpbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5pbXBvcnQgaXNQcm90b3R5cGUgZnJvbSAnLi9faXNQcm90b3R5cGUuanMnO1xuaW1wb3J0IG5hdGl2ZUtleXNJbiBmcm9tICcuL19uYXRpdmVLZXlzSW4uanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNJbmAgd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBiYXNlS2V5c0luKG9iamVjdCkge1xuICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5c0luKG9iamVjdCk7XG4gIH1cbiAgdmFyIGlzUHJvdG8gPSBpc1Byb3RvdHlwZShvYmplY3QpLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgIGlmICghKGtleSA9PSAnY29uc3RydWN0b3InICYmIChpc1Byb3RvIHx8ICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlS2V5c0luO1xuIiwiaW1wb3J0IGFycmF5TGlrZUtleXMgZnJvbSAnLi9fYXJyYXlMaWtlS2V5cy5qcyc7XG5pbXBvcnQgYmFzZUtleXNJbiBmcm9tICcuL19iYXNlS2V5c0luLmpzJztcbmltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuL2lzQXJyYXlMaWtlLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5c0luKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InLCAnYyddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKi9cbmZ1bmN0aW9uIGtleXNJbihvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCwgdHJ1ZSkgOiBiYXNlS2V5c0luKG9iamVjdCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGtleXNJbjtcbiIsImltcG9ydCBjb3B5T2JqZWN0IGZyb20gJy4vX2NvcHlPYmplY3QuanMnO1xuaW1wb3J0IGNyZWF0ZUFzc2lnbmVyIGZyb20gJy4vX2NyZWF0ZUFzc2lnbmVyLmpzJztcbmltcG9ydCBrZXlzSW4gZnJvbSAnLi9rZXlzSW4uanMnO1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uYXNzaWduSW5gIGV4Y2VwdCB0aGF0IGl0IGFjY2VwdHMgYGN1c3RvbWl6ZXJgXG4gKiB3aGljaCBpcyBpbnZva2VkIHRvIHByb2R1Y2UgdGhlIGFzc2lnbmVkIHZhbHVlcy4gSWYgYGN1c3RvbWl6ZXJgIHJldHVybnNcbiAqIGB1bmRlZmluZWRgLCBhc3NpZ25tZW50IGlzIGhhbmRsZWQgYnkgdGhlIG1ldGhvZCBpbnN0ZWFkLiBUaGUgYGN1c3RvbWl6ZXJgXG4gKiBpcyBpbnZva2VkIHdpdGggZml2ZSBhcmd1bWVudHM6IChvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UpLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBtdXRhdGVzIGBvYmplY3RgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBhbGlhcyBleHRlbmRXaXRoXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0gey4uLk9iamVjdH0gc291cmNlcyBUaGUgc291cmNlIG9iamVjdHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICogQHNlZSBfLmFzc2lnbldpdGhcbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUpIHtcbiAqICAgcmV0dXJuIF8uaXNVbmRlZmluZWQob2JqVmFsdWUpID8gc3JjVmFsdWUgOiBvYmpWYWx1ZTtcbiAqIH1cbiAqXG4gKiB2YXIgZGVmYXVsdHMgPSBfLnBhcnRpYWxSaWdodChfLmFzc2lnbkluV2l0aCwgY3VzdG9taXplcik7XG4gKlxuICogZGVmYXVsdHMoeyAnYSc6IDEgfSwgeyAnYic6IDIgfSwgeyAnYSc6IDMgfSk7XG4gKiAvLyA9PiB7ICdhJzogMSwgJ2InOiAyIH1cbiAqL1xudmFyIGFzc2lnbkluV2l0aCA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplcikge1xuICBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCwgY3VzdG9taXplcik7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgYXNzaWduSW5XaXRoO1xuIiwiLyoqXG4gKiBDcmVhdGVzIGEgdW5hcnkgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGBmdW5jYCB3aXRoIGl0cyBhcmd1bWVudCB0cmFuc2Zvcm1lZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gd3JhcC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHRyYW5zZm9ybSBUaGUgYXJndW1lbnQgdHJhbnNmb3JtLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG92ZXJBcmcoZnVuYywgdHJhbnNmb3JtKSB7XG4gIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICByZXR1cm4gZnVuYyh0cmFuc2Zvcm0oYXJnKSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG92ZXJBcmc7XG4iLCJpbXBvcnQgb3ZlckFyZyBmcm9tICcuL19vdmVyQXJnLmpzJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgZ2V0UHJvdG90eXBlID0gb3ZlckFyZyhPYmplY3QuZ2V0UHJvdG90eXBlT2YsIE9iamVjdCk7XG5cbmV4cG9ydCBkZWZhdWx0IGdldFByb3RvdHlwZTtcbiIsImltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IGdldFByb3RvdHlwZSBmcm9tICcuL19nZXRQcm90b3R5cGUuanMnO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tICcuL2lzT2JqZWN0TGlrZS5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGluZmVyIHRoZSBgT2JqZWN0YCBjb25zdHJ1Y3Rvci4gKi9cbnZhciBvYmplY3RDdG9yU3RyaW5nID0gZnVuY1RvU3RyaW5nLmNhbGwoT2JqZWN0KTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgdGhhdCBpcywgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgdGhlXG4gKiBgT2JqZWN0YCBjb25zdHJ1Y3RvciBvciBvbmUgd2l0aCBhIGBbW1Byb3RvdHlwZV1dYCBvZiBgbnVsbGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjguMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogfVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChuZXcgRm9vKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdCh7ICd4JzogMCwgJ3knOiAwIH0pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgfHwgYmFzZUdldFRhZyh2YWx1ZSkgIT0gb2JqZWN0VGFnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwcm90byA9IGdldFByb3RvdHlwZSh2YWx1ZSk7XG4gIGlmIChwcm90byA9PT0gbnVsbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBDdG9yID0gaGFzT3duUHJvcGVydHkuY2FsbChwcm90bywgJ2NvbnN0cnVjdG9yJykgJiYgcHJvdG8uY29uc3RydWN0b3I7XG4gIHJldHVybiB0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IgaW5zdGFuY2VvZiBDdG9yICYmXG4gICAgZnVuY1RvU3RyaW5nLmNhbGwoQ3RvcikgPT0gb2JqZWN0Q3RvclN0cmluZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNQbGFpbk9iamVjdDtcbiIsImltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tICcuL2lzT2JqZWN0TGlrZS5qcyc7XG5pbXBvcnQgaXNQbGFpbk9iamVjdCBmcm9tICcuL2lzUGxhaW5PYmplY3QuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgZG9tRXhjVGFnID0gJ1tvYmplY3QgRE9NRXhjZXB0aW9uXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFuIGBFcnJvcmAsIGBFdmFsRXJyb3JgLCBgUmFuZ2VFcnJvcmAsIGBSZWZlcmVuY2VFcnJvcmAsXG4gKiBgU3ludGF4RXJyb3JgLCBgVHlwZUVycm9yYCwgb3IgYFVSSUVycm9yYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gZXJyb3Igb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNFcnJvcihuZXcgRXJyb3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNFcnJvcihFcnJvcik7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Vycm9yKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdGFnID0gYmFzZUdldFRhZyh2YWx1ZSk7XG4gIHJldHVybiB0YWcgPT0gZXJyb3JUYWcgfHwgdGFnID09IGRvbUV4Y1RhZyB8fFxuICAgICh0eXBlb2YgdmFsdWUubWVzc2FnZSA9PSAnc3RyaW5nJyAmJiB0eXBlb2YgdmFsdWUubmFtZSA9PSAnc3RyaW5nJyAmJiAhaXNQbGFpbk9iamVjdCh2YWx1ZSkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0Vycm9yO1xuIiwiaW1wb3J0IGFwcGx5IGZyb20gJy4vX2FwcGx5LmpzJztcbmltcG9ydCBiYXNlUmVzdCBmcm9tICcuL19iYXNlUmVzdC5qcyc7XG5pbXBvcnQgaXNFcnJvciBmcm9tICcuL2lzRXJyb3IuanMnO1xuXG4vKipcbiAqIEF0dGVtcHRzIHRvIGludm9rZSBgZnVuY2AsIHJldHVybmluZyBlaXRoZXIgdGhlIHJlc3VsdCBvciB0aGUgY2F1Z2h0IGVycm9yXG4gKiBvYmplY3QuIEFueSBhZGRpdGlvbmFsIGFyZ3VtZW50cyBhcmUgcHJvdmlkZWQgdG8gYGZ1bmNgIHdoZW4gaXQncyBpbnZva2VkLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBhdHRlbXB0LlxuICogQHBhcmFtIHsuLi4qfSBbYXJnc10gVGhlIGFyZ3VtZW50cyB0byBpbnZva2UgYGZ1bmNgIHdpdGguXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYGZ1bmNgIHJlc3VsdCBvciBlcnJvciBvYmplY3QuXG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIEF2b2lkIHRocm93aW5nIGVycm9ycyBmb3IgaW52YWxpZCBzZWxlY3RvcnMuXG4gKiB2YXIgZWxlbWVudHMgPSBfLmF0dGVtcHQoZnVuY3Rpb24oc2VsZWN0b3IpIHtcbiAqICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xuICogfSwgJz5fPicpO1xuICpcbiAqIGlmIChfLmlzRXJyb3IoZWxlbWVudHMpKSB7XG4gKiAgIGVsZW1lbnRzID0gW107XG4gKiB9XG4gKi9cbnZhciBhdHRlbXB0ID0gYmFzZVJlc3QoZnVuY3Rpb24oZnVuYywgYXJncykge1xuICB0cnkge1xuICAgIHJldHVybiBhcHBseShmdW5jLCB1bmRlZmluZWQsIGFyZ3MpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGlzRXJyb3IoZSkgPyBlIDogbmV3IEVycm9yKGUpO1xuICB9XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgYXR0ZW1wdDtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gKiBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheU1hcChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFycmF5TWFwO1xuIiwiaW1wb3J0IGFycmF5TWFwIGZyb20gJy4vX2FycmF5TWFwLmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy52YWx1ZXNgIGFuZCBgXy52YWx1ZXNJbmAgd2hpY2ggY3JlYXRlcyBhblxuICogYXJyYXkgb2YgYG9iamVjdGAgcHJvcGVydHkgdmFsdWVzIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3BlcnR5IG5hbWVzXG4gKiBvZiBgcHJvcHNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZ2V0IHZhbHVlcyBmb3IuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VWYWx1ZXMob2JqZWN0LCBwcm9wcykge1xuICByZXR1cm4gYXJyYXlNYXAocHJvcHMsIGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiBvYmplY3Rba2V5XTtcbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VWYWx1ZXM7XG4iLCJpbXBvcnQgZXEgZnJvbSAnLi9lcS5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCBieSBgXy5kZWZhdWx0c2AgdG8gY3VzdG9taXplIGl0cyBgXy5hc3NpZ25JbmAgdXNlIHRvIGFzc2lnbiBwcm9wZXJ0aWVzXG4gKiBvZiBzb3VyY2Ugb2JqZWN0cyB0byB0aGUgZGVzdGluYXRpb24gb2JqZWN0IGZvciBhbGwgZGVzdGluYXRpb24gcHJvcGVydGllc1xuICogdGhhdCByZXNvbHZlIHRvIGB1bmRlZmluZWRgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IG9ialZhbHVlIFRoZSBkZXN0aW5hdGlvbiB2YWx1ZS5cbiAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHNvdXJjZSB2YWx1ZS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgcGFyZW50IG9iamVjdCBvZiBgb2JqVmFsdWVgLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAqL1xuZnVuY3Rpb24gY3VzdG9tRGVmYXVsdHNBc3NpZ25JbihvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0KSB7XG4gIGlmIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkIHx8XG4gICAgICAoZXEob2JqVmFsdWUsIG9iamVjdFByb3RvW2tleV0pICYmICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpIHtcbiAgICByZXR1cm4gc3JjVmFsdWU7XG4gIH1cbiAgcmV0dXJuIG9ialZhbHVlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjdXN0b21EZWZhdWx0c0Fzc2lnbkluO1xuIiwiLyoqIFVzZWQgdG8gZXNjYXBlIGNoYXJhY3RlcnMgZm9yIGluY2x1c2lvbiBpbiBjb21waWxlZCBzdHJpbmcgbGl0ZXJhbHMuICovXG52YXIgc3RyaW5nRXNjYXBlcyA9IHtcbiAgJ1xcXFwnOiAnXFxcXCcsXG4gIFwiJ1wiOiBcIidcIixcbiAgJ1xcbic6ICduJyxcbiAgJ1xccic6ICdyJyxcbiAgJ1xcdTIwMjgnOiAndTIwMjgnLFxuICAnXFx1MjAyOSc6ICd1MjAyOSdcbn07XG5cbi8qKlxuICogVXNlZCBieSBgXy50ZW1wbGF0ZWAgdG8gZXNjYXBlIGNoYXJhY3RlcnMgZm9yIGluY2x1c2lvbiBpbiBjb21waWxlZCBzdHJpbmcgbGl0ZXJhbHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBjaHIgVGhlIG1hdGNoZWQgY2hhcmFjdGVyIHRvIGVzY2FwZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgY2hhcmFjdGVyLlxuICovXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmdDaGFyKGNocikge1xuICByZXR1cm4gJ1xcXFwnICsgc3RyaW5nRXNjYXBlc1tjaHJdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBlc2NhcGVTdHJpbmdDaGFyO1xuIiwiaW1wb3J0IG92ZXJBcmcgZnJvbSAnLi9fb3ZlckFyZy5qcyc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVLZXlzID0gb3ZlckFyZyhPYmplY3Qua2V5cywgT2JqZWN0KTtcblxuZXhwb3J0IGRlZmF1bHQgbmF0aXZlS2V5cztcbiIsImltcG9ydCBpc1Byb3RvdHlwZSBmcm9tICcuL19pc1Byb3RvdHlwZS5qcyc7XG5pbXBvcnQgbmF0aXZlS2V5cyBmcm9tICcuL19uYXRpdmVLZXlzLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlS2V5cztcbiIsImltcG9ydCBhcnJheUxpa2VLZXlzIGZyb20gJy4vX2FycmF5TGlrZUtleXMuanMnO1xuaW1wb3J0IGJhc2VLZXlzIGZyb20gJy4vX2Jhc2VLZXlzLmpzJztcbmltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuL2lzQXJyYXlMaWtlLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy4gU2VlIHRoZVxuICogW0VTIHNwZWNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXMobmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKlxuICogXy5rZXlzKCdoaScpO1xuICogLy8gPT4gWycwJywgJzEnXVxuICovXG5mdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0KSA6IGJhc2VLZXlzKG9iamVjdCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGtleXM7XG4iLCIvKiogVXNlZCB0byBtYXRjaCB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLiAqL1xudmFyIHJlSW50ZXJwb2xhdGUgPSAvPCU9KFtcXHNcXFNdKz8pJT4vZztcblxuZXhwb3J0IGRlZmF1bHQgcmVJbnRlcnBvbGF0ZTtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHJvcGVydHlPZmAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVByb3BlcnR5T2Yob2JqZWN0KSB7XG4gIHJldHVybiBmdW5jdGlvbihrZXkpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZVByb3BlcnR5T2Y7XG4iLCJpbXBvcnQgYmFzZVByb3BlcnR5T2YgZnJvbSAnLi9fYmFzZVByb3BlcnR5T2YuanMnO1xuXG4vKiogVXNlZCB0byBtYXAgY2hhcmFjdGVycyB0byBIVE1MIGVudGl0aWVzLiAqL1xudmFyIGh0bWxFc2NhcGVzID0ge1xuICAnJic6ICcmYW1wOycsXG4gICc8JzogJyZsdDsnLFxuICAnPic6ICcmZ3Q7JyxcbiAgJ1wiJzogJyZxdW90OycsXG4gIFwiJ1wiOiAnJiMzOTsnXG59O1xuXG4vKipcbiAqIFVzZWQgYnkgYF8uZXNjYXBlYCB0byBjb252ZXJ0IGNoYXJhY3RlcnMgdG8gSFRNTCBlbnRpdGllcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGNociBUaGUgbWF0Y2hlZCBjaGFyYWN0ZXIgdG8gZXNjYXBlLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZXNjYXBlZCBjaGFyYWN0ZXIuXG4gKi9cbnZhciBlc2NhcGVIdG1sQ2hhciA9IGJhc2VQcm9wZXJ0eU9mKGh0bWxFc2NhcGVzKTtcblxuZXhwb3J0IGRlZmF1bHQgZXNjYXBlSHRtbENoYXI7XG4iLCJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN5bWJvbFRhZyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzU3ltYm9sO1xuIiwiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuaW1wb3J0IGFycmF5TWFwIGZyb20gJy4vX2FycmF5TWFwLmpzJztcbmltcG9ydCBpc0FycmF5IGZyb20gJy4vaXNBcnJheS5qcyc7XG5pbXBvcnQgaXNTeW1ib2wgZnJvbSAnLi9pc1N5bWJvbC5qcyc7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDA7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udG9TdHJpbmcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9TdHJpbmdgIHdoaWNoIGRvZXNuJ3QgY29udmVydCBudWxsaXNoXG4gKiB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5ncy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRvU3RyaW5nKHZhbHVlKSB7XG4gIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgLy8gUmVjdXJzaXZlbHkgY29udmVydCB2YWx1ZXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIGJhc2VUb1N0cmluZykgKyAnJztcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN5bWJvbFRvU3RyaW5nID8gc3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgfVxuICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VUb1N0cmluZztcbiIsImltcG9ydCBiYXNlVG9TdHJpbmcgZnJvbSAnLi9fYmFzZVRvU3RyaW5nLmpzJztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nLiBBbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQgZm9yIGBudWxsYFxuICogYW5kIGB1bmRlZmluZWRgIHZhbHVlcy4gVGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvU3RyaW5nKG51bGwpO1xuICogLy8gPT4gJydcbiAqXG4gKiBfLnRvU3RyaW5nKC0wKTtcbiAqIC8vID0+ICctMCdcbiAqXG4gKiBfLnRvU3RyaW5nKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiAnMSwyLDMnXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiBiYXNlVG9TdHJpbmcodmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b1N0cmluZztcbiIsImltcG9ydCBlc2NhcGVIdG1sQ2hhciBmcm9tICcuL19lc2NhcGVIdG1sQ2hhci5qcyc7XG5pbXBvcnQgdG9TdHJpbmcgZnJvbSAnLi90b1N0cmluZy5qcyc7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIEhUTUwgZW50aXRpZXMgYW5kIEhUTUwgY2hhcmFjdGVycy4gKi9cbnZhciByZVVuZXNjYXBlZEh0bWwgPSAvWyY8PlwiJ10vZyxcbiAgICByZUhhc1VuZXNjYXBlZEh0bWwgPSBSZWdFeHAocmVVbmVzY2FwZWRIdG1sLnNvdXJjZSk7XG5cbi8qKlxuICogQ29udmVydHMgdGhlIGNoYXJhY3RlcnMgXCImXCIsIFwiPFwiLCBcIj5cIiwgJ1wiJywgYW5kIFwiJ1wiIGluIGBzdHJpbmdgIHRvIHRoZWlyXG4gKiBjb3JyZXNwb25kaW5nIEhUTUwgZW50aXRpZXMuXG4gKlxuICogKipOb3RlOioqIE5vIG90aGVyIGNoYXJhY3RlcnMgYXJlIGVzY2FwZWQuIFRvIGVzY2FwZSBhZGRpdGlvbmFsXG4gKiBjaGFyYWN0ZXJzIHVzZSBhIHRoaXJkLXBhcnR5IGxpYnJhcnkgbGlrZSBbX2hlX10oaHR0cHM6Ly9tdGhzLmJlL2hlKS5cbiAqXG4gKiBUaG91Z2ggdGhlIFwiPlwiIGNoYXJhY3RlciBpcyBlc2NhcGVkIGZvciBzeW1tZXRyeSwgY2hhcmFjdGVycyBsaWtlXG4gKiBcIj5cIiBhbmQgXCIvXCIgZG9uJ3QgbmVlZCBlc2NhcGluZyBpbiBIVE1MIGFuZCBoYXZlIG5vIHNwZWNpYWwgbWVhbmluZ1xuICogdW5sZXNzIHRoZXkncmUgcGFydCBvZiBhIHRhZyBvciB1bnF1b3RlZCBhdHRyaWJ1dGUgdmFsdWUuIFNlZVxuICogW01hdGhpYXMgQnluZW5zJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2FtYmlndW91cy1hbXBlcnNhbmRzKVxuICogKHVuZGVyIFwic2VtaS1yZWxhdGVkIGZ1biBmYWN0XCIpIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogV2hlbiB3b3JraW5nIHdpdGggSFRNTCB5b3Ugc2hvdWxkIGFsd2F5c1xuICogW3F1b3RlIGF0dHJpYnV0ZSB2YWx1ZXNdKGh0dHA6Ly93b25rby5jb20vcG9zdC9odG1sLWVzY2FwaW5nKSB0byByZWR1Y2VcbiAqIFhTUyB2ZWN0b3JzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBTdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGVzY2FwZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGVzY2FwZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmVzY2FwZSgnZnJlZCwgYmFybmV5LCAmIHBlYmJsZXMnKTtcbiAqIC8vID0+ICdmcmVkLCBiYXJuZXksICZhbXA7IHBlYmJsZXMnXG4gKi9cbmZ1bmN0aW9uIGVzY2FwZShzdHJpbmcpIHtcbiAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgcmV0dXJuIChzdHJpbmcgJiYgcmVIYXNVbmVzY2FwZWRIdG1sLnRlc3Qoc3RyaW5nKSlcbiAgICA/IHN0cmluZy5yZXBsYWNlKHJlVW5lc2NhcGVkSHRtbCwgZXNjYXBlSHRtbENoYXIpXG4gICAgOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGVzY2FwZTtcbiIsIi8qKiBVc2VkIHRvIG1hdGNoIHRlbXBsYXRlIGRlbGltaXRlcnMuICovXG52YXIgcmVFc2NhcGUgPSAvPCUtKFtcXHNcXFNdKz8pJT4vZztcblxuZXhwb3J0IGRlZmF1bHQgcmVFc2NhcGU7XG4iLCIvKiogVXNlZCB0byBtYXRjaCB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLiAqL1xudmFyIHJlRXZhbHVhdGUgPSAvPCUoW1xcc1xcU10rPyklPi9nO1xuXG5leHBvcnQgZGVmYXVsdCByZUV2YWx1YXRlO1xuIiwiaW1wb3J0IGVzY2FwZSBmcm9tICcuL2VzY2FwZS5qcyc7XG5pbXBvcnQgcmVFc2NhcGUgZnJvbSAnLi9fcmVFc2NhcGUuanMnO1xuaW1wb3J0IHJlRXZhbHVhdGUgZnJvbSAnLi9fcmVFdmFsdWF0ZS5qcyc7XG5pbXBvcnQgcmVJbnRlcnBvbGF0ZSBmcm9tICcuL19yZUludGVycG9sYXRlLmpzJztcblxuLyoqXG4gKiBCeSBkZWZhdWx0LCB0aGUgdGVtcGxhdGUgZGVsaW1pdGVycyB1c2VkIGJ5IGxvZGFzaCBhcmUgbGlrZSB0aG9zZSBpblxuICogZW1iZWRkZWQgUnVieSAoRVJCKSBhcyB3ZWxsIGFzIEVTMjAxNSB0ZW1wbGF0ZSBzdHJpbmdzLiBDaGFuZ2UgdGhlXG4gKiBmb2xsb3dpbmcgdGVtcGxhdGUgc2V0dGluZ3MgdG8gdXNlIGFsdGVybmF0aXZlIGRlbGltaXRlcnMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbnZhciB0ZW1wbGF0ZVNldHRpbmdzID0ge1xuXG4gIC8qKlxuICAgKiBVc2VkIHRvIGRldGVjdCBgZGF0YWAgcHJvcGVydHkgdmFsdWVzIHRvIGJlIEhUTUwtZXNjYXBlZC5cbiAgICpcbiAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgKi9cbiAgJ2VzY2FwZSc6IHJlRXNjYXBlLFxuXG4gIC8qKlxuICAgKiBVc2VkIHRvIGRldGVjdCBjb2RlIHRvIGJlIGV2YWx1YXRlZC5cbiAgICpcbiAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgKiBAdHlwZSB7UmVnRXhwfVxuICAgKi9cbiAgJ2V2YWx1YXRlJzogcmVFdmFsdWF0ZSxcblxuICAvKipcbiAgICogVXNlZCB0byBkZXRlY3QgYGRhdGFgIHByb3BlcnR5IHZhbHVlcyB0byBpbmplY3QuXG4gICAqXG4gICAqIEBtZW1iZXJPZiBfLnRlbXBsYXRlU2V0dGluZ3NcbiAgICogQHR5cGUge1JlZ0V4cH1cbiAgICovXG4gICdpbnRlcnBvbGF0ZSc6IHJlSW50ZXJwb2xhdGUsXG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gcmVmZXJlbmNlIHRoZSBkYXRhIG9iamVjdCBpbiB0aGUgdGVtcGxhdGUgdGV4dC5cbiAgICpcbiAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgKi9cbiAgJ3ZhcmlhYmxlJzogJycsXG5cbiAgLyoqXG4gICAqIFVzZWQgdG8gaW1wb3J0IHZhcmlhYmxlcyBpbnRvIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAgICpcbiAgICogQG1lbWJlck9mIF8udGVtcGxhdGVTZXR0aW5nc1xuICAgKiBAdHlwZSB7T2JqZWN0fVxuICAgKi9cbiAgJ2ltcG9ydHMnOiB7XG5cbiAgICAvKipcbiAgICAgKiBBIHJlZmVyZW5jZSB0byB0aGUgYGxvZGFzaGAgZnVuY3Rpb24uXG4gICAgICpcbiAgICAgKiBAbWVtYmVyT2YgXy50ZW1wbGF0ZVNldHRpbmdzLmltcG9ydHNcbiAgICAgKiBAdHlwZSB7RnVuY3Rpb259XG4gICAgICovXG4gICAgJ18nOiB7ICdlc2NhcGUnOiBlc2NhcGUgfVxuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCB0ZW1wbGF0ZVNldHRpbmdzO1xuIiwiaW1wb3J0IGFzc2lnbkluV2l0aCBmcm9tICcuL2Fzc2lnbkluV2l0aC5qcyc7XG5pbXBvcnQgYXR0ZW1wdCBmcm9tICcuL2F0dGVtcHQuanMnO1xuaW1wb3J0IGJhc2VWYWx1ZXMgZnJvbSAnLi9fYmFzZVZhbHVlcy5qcyc7XG5pbXBvcnQgY3VzdG9tRGVmYXVsdHNBc3NpZ25JbiBmcm9tICcuL19jdXN0b21EZWZhdWx0c0Fzc2lnbkluLmpzJztcbmltcG9ydCBlc2NhcGVTdHJpbmdDaGFyIGZyb20gJy4vX2VzY2FwZVN0cmluZ0NoYXIuanMnO1xuaW1wb3J0IGlzRXJyb3IgZnJvbSAnLi9pc0Vycm9yLmpzJztcbmltcG9ydCBpc0l0ZXJhdGVlQ2FsbCBmcm9tICcuL19pc0l0ZXJhdGVlQ2FsbC5qcyc7XG5pbXBvcnQga2V5cyBmcm9tICcuL2tleXMuanMnO1xuaW1wb3J0IHJlSW50ZXJwb2xhdGUgZnJvbSAnLi9fcmVJbnRlcnBvbGF0ZS5qcyc7XG5pbXBvcnQgdGVtcGxhdGVTZXR0aW5ncyBmcm9tICcuL3RlbXBsYXRlU2V0dGluZ3MuanMnO1xuaW1wb3J0IHRvU3RyaW5nIGZyb20gJy4vdG9TdHJpbmcuanMnO1xuXG4vKiogVXNlZCB0byBtYXRjaCBlbXB0eSBzdHJpbmcgbGl0ZXJhbHMgaW4gY29tcGlsZWQgdGVtcGxhdGUgc291cmNlLiAqL1xudmFyIHJlRW1wdHlTdHJpbmdMZWFkaW5nID0gL1xcYl9fcCBcXCs9ICcnOy9nLFxuICAgIHJlRW1wdHlTdHJpbmdNaWRkbGUgPSAvXFxiKF9fcCBcXCs9KSAnJyBcXCsvZyxcbiAgICByZUVtcHR5U3RyaW5nVHJhaWxpbmcgPSAvKF9fZVxcKC4qP1xcKXxcXGJfX3RcXCkpIFxcK1xcbicnOy9nO1xuXG4vKipcbiAqIFVzZWQgdG8gbWF0Y2hcbiAqIFtFUyB0ZW1wbGF0ZSBkZWxpbWl0ZXJzXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10ZW1wbGF0ZS1saXRlcmFsLWxleGljYWwtY29tcG9uZW50cykuXG4gKi9cbnZhciByZUVzVGVtcGxhdGUgPSAvXFwkXFx7KFteXFxcXH1dKig/OlxcXFwuW15cXFxcfV0qKSopXFx9L2c7XG5cbi8qKiBVc2VkIHRvIGVuc3VyZSBjYXB0dXJpbmcgb3JkZXIgb2YgdGVtcGxhdGUgZGVsaW1pdGVycy4gKi9cbnZhciByZU5vTWF0Y2ggPSAvKCReKS87XG5cbi8qKiBVc2VkIHRvIG1hdGNoIHVuZXNjYXBlZCBjaGFyYWN0ZXJzIGluIGNvbXBpbGVkIHN0cmluZyBsaXRlcmFscy4gKi9cbnZhciByZVVuZXNjYXBlZFN0cmluZyA9IC9bJ1xcblxcclxcdTIwMjhcXHUyMDI5XFxcXF0vZztcblxuLyoqXG4gKiBDcmVhdGVzIGEgY29tcGlsZWQgdGVtcGxhdGUgZnVuY3Rpb24gdGhhdCBjYW4gaW50ZXJwb2xhdGUgZGF0YSBwcm9wZXJ0aWVzXG4gKiBpbiBcImludGVycG9sYXRlXCIgZGVsaW1pdGVycywgSFRNTC1lc2NhcGUgaW50ZXJwb2xhdGVkIGRhdGEgcHJvcGVydGllcyBpblxuICogXCJlc2NhcGVcIiBkZWxpbWl0ZXJzLCBhbmQgZXhlY3V0ZSBKYXZhU2NyaXB0IGluIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXJzLiBEYXRhXG4gKiBwcm9wZXJ0aWVzIG1heSBiZSBhY2Nlc3NlZCBhcyBmcmVlIHZhcmlhYmxlcyBpbiB0aGUgdGVtcGxhdGUuIElmIGEgc2V0dGluZ1xuICogb2JqZWN0IGlzIGdpdmVuLCBpdCB0YWtlcyBwcmVjZWRlbmNlIG92ZXIgYF8udGVtcGxhdGVTZXR0aW5nc2AgdmFsdWVzLlxuICpcbiAqICoqTm90ZToqKiBJbiB0aGUgZGV2ZWxvcG1lbnQgYnVpbGQgYF8udGVtcGxhdGVgIHV0aWxpemVzXG4gKiBbc291cmNlVVJMc10oaHR0cDovL3d3dy5odG1sNXJvY2tzLmNvbS9lbi90dXRvcmlhbHMvZGV2ZWxvcGVydG9vbHMvc291cmNlbWFwcy8jdG9jLXNvdXJjZXVybClcbiAqIGZvciBlYXNpZXIgZGVidWdnaW5nLlxuICpcbiAqIEZvciBtb3JlIGluZm9ybWF0aW9uIG9uIHByZWNvbXBpbGluZyB0ZW1wbGF0ZXMgc2VlXG4gKiBbbG9kYXNoJ3MgY3VzdG9tIGJ1aWxkcyBkb2N1bWVudGF0aW9uXShodHRwczovL2xvZGFzaC5jb20vY3VzdG9tLWJ1aWxkcykuXG4gKlxuICogRm9yIG1vcmUgaW5mb3JtYXRpb24gb24gQ2hyb21lIGV4dGVuc2lvbiBzYW5kYm94ZXMgc2VlXG4gKiBbQ2hyb21lJ3MgZXh0ZW5zaW9ucyBkb2N1bWVudGF0aW9uXShodHRwczovL2RldmVsb3Blci5jaHJvbWUuY29tL2V4dGVuc2lvbnMvc2FuZGJveGluZ0V2YWwpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBTdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgdGVtcGxhdGUgc3RyaW5nLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XSBUaGUgb3B0aW9ucyBvYmplY3QuXG4gKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuZXNjYXBlPV8udGVtcGxhdGVTZXR0aW5ncy5lc2NhcGVdXG4gKiAgVGhlIEhUTUwgXCJlc2NhcGVcIiBkZWxpbWl0ZXIuXG4gKiBAcGFyYW0ge1JlZ0V4cH0gW29wdGlvbnMuZXZhbHVhdGU9Xy50ZW1wbGF0ZVNldHRpbmdzLmV2YWx1YXRlXVxuICogIFRoZSBcImV2YWx1YXRlXCIgZGVsaW1pdGVyLlxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zLmltcG9ydHM9Xy50ZW1wbGF0ZVNldHRpbmdzLmltcG9ydHNdXG4gKiAgQW4gb2JqZWN0IHRvIGltcG9ydCBpbnRvIHRoZSB0ZW1wbGF0ZSBhcyBmcmVlIHZhcmlhYmxlcy5cbiAqIEBwYXJhbSB7UmVnRXhwfSBbb3B0aW9ucy5pbnRlcnBvbGF0ZT1fLnRlbXBsYXRlU2V0dGluZ3MuaW50ZXJwb2xhdGVdXG4gKiAgVGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMuc291cmNlVVJMPSd0ZW1wbGF0ZVNvdXJjZXNbbl0nXVxuICogIFRoZSBzb3VyY2VVUkwgb2YgdGhlIGNvbXBpbGVkIHRlbXBsYXRlLlxuICogQHBhcmFtIHtzdHJpbmd9IFtvcHRpb25zLnZhcmlhYmxlPSdvYmonXVxuICogIFRoZSBkYXRhIG9iamVjdCB2YXJpYWJsZSBuYW1lLlxuICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgY29tcGlsZWQgdGVtcGxhdGUgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIFVzZSB0aGUgXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlciB0byBjcmVhdGUgYSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIDwlPSB1c2VyICU+IScpO1xuICogY29tcGlsZWQoeyAndXNlcic6ICdmcmVkJyB9KTtcbiAqIC8vID0+ICdoZWxsbyBmcmVkISdcbiAqXG4gKiAvLyBVc2UgdGhlIEhUTUwgXCJlc2NhcGVcIiBkZWxpbWl0ZXIgdG8gZXNjYXBlIGRhdGEgcHJvcGVydHkgdmFsdWVzLlxuICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPGI+PCUtIHZhbHVlICU+PC9iPicpO1xuICogY29tcGlsZWQoeyAndmFsdWUnOiAnPHNjcmlwdD4nIH0pO1xuICogLy8gPT4gJzxiPiZsdDtzY3JpcHQmZ3Q7PC9iPidcbiAqXG4gKiAvLyBVc2UgdGhlIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXIgdG8gZXhlY3V0ZSBKYXZhU2NyaXB0IGFuZCBnZW5lcmF0ZSBIVE1MLlxuICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCUgXy5mb3JFYWNoKHVzZXJzLCBmdW5jdGlvbih1c2VyKSB7ICU+PGxpPjwlLSB1c2VyICU+PC9saT48JSB9KTsgJT4nKTtcbiAqIGNvbXBpbGVkKHsgJ3VzZXJzJzogWydmcmVkJywgJ2Jhcm5leSddIH0pO1xuICogLy8gPT4gJzxsaT5mcmVkPC9saT48bGk+YmFybmV5PC9saT4nXG4gKlxuICogLy8gVXNlIHRoZSBpbnRlcm5hbCBgcHJpbnRgIGZ1bmN0aW9uIGluIFwiZXZhbHVhdGVcIiBkZWxpbWl0ZXJzLlxuICogdmFyIGNvbXBpbGVkID0gXy50ZW1wbGF0ZSgnPCUgcHJpbnQoXCJoZWxsbyBcIiArIHVzZXIpOyAlPiEnKTtcbiAqIGNvbXBpbGVkKHsgJ3VzZXInOiAnYmFybmV5JyB9KTtcbiAqIC8vID0+ICdoZWxsbyBiYXJuZXkhJ1xuICpcbiAqIC8vIFVzZSB0aGUgRVMgdGVtcGxhdGUgbGl0ZXJhbCBkZWxpbWl0ZXIgYXMgYW4gXCJpbnRlcnBvbGF0ZVwiIGRlbGltaXRlci5cbiAqIC8vIERpc2FibGUgc3VwcG9ydCBieSByZXBsYWNpbmcgdGhlIFwiaW50ZXJwb2xhdGVcIiBkZWxpbWl0ZXIuXG4gKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyAkeyB1c2VyIH0hJyk7XG4gKiBjb21waWxlZCh7ICd1c2VyJzogJ3BlYmJsZXMnIH0pO1xuICogLy8gPT4gJ2hlbGxvIHBlYmJsZXMhJ1xuICpcbiAqIC8vIFVzZSBiYWNrc2xhc2hlcyB0byB0cmVhdCBkZWxpbWl0ZXJzIGFzIHBsYWluIHRleHQuXG4gKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCc8JT0gXCJcXFxcPCUtIHZhbHVlICVcXFxcPlwiICU+Jyk7XG4gKiBjb21waWxlZCh7ICd2YWx1ZSc6ICdpZ25vcmVkJyB9KTtcbiAqIC8vID0+ICc8JS0gdmFsdWUgJT4nXG4gKlxuICogLy8gVXNlIHRoZSBgaW1wb3J0c2Agb3B0aW9uIHRvIGltcG9ydCBgalF1ZXJ5YCBhcyBganFgLlxuICogdmFyIHRleHQgPSAnPCUganEuZWFjaCh1c2VycywgZnVuY3Rpb24odXNlcikgeyAlPjxsaT48JS0gdXNlciAlPjwvbGk+PCUgfSk7ICU+JztcbiAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUodGV4dCwgeyAnaW1wb3J0cyc6IHsgJ2pxJzogalF1ZXJ5IH0gfSk7XG4gKiBjb21waWxlZCh7ICd1c2Vycyc6IFsnZnJlZCcsICdiYXJuZXknXSB9KTtcbiAqIC8vID0+ICc8bGk+ZnJlZDwvbGk+PGxpPmJhcm5leTwvbGk+J1xuICpcbiAqIC8vIFVzZSB0aGUgYHNvdXJjZVVSTGAgb3B0aW9uIHRvIHNwZWNpZnkgYSBjdXN0b20gc291cmNlVVJMIGZvciB0aGUgdGVtcGxhdGUuXG4gKiB2YXIgY29tcGlsZWQgPSBfLnRlbXBsYXRlKCdoZWxsbyA8JT0gdXNlciAlPiEnLCB7ICdzb3VyY2VVUkwnOiAnL2Jhc2ljL2dyZWV0aW5nLmpzdCcgfSk7XG4gKiBjb21waWxlZChkYXRhKTtcbiAqIC8vID0+IEZpbmQgdGhlIHNvdXJjZSBvZiBcImdyZWV0aW5nLmpzdFwiIHVuZGVyIHRoZSBTb3VyY2VzIHRhYiBvciBSZXNvdXJjZXMgcGFuZWwgb2YgdGhlIHdlYiBpbnNwZWN0b3IuXG4gKlxuICogLy8gVXNlIHRoZSBgdmFyaWFibGVgIG9wdGlvbiB0byBlbnN1cmUgYSB3aXRoLXN0YXRlbWVudCBpc24ndCB1c2VkIGluIHRoZSBjb21waWxlZCB0ZW1wbGF0ZS5cbiAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hpIDwlPSBkYXRhLnVzZXIgJT4hJywgeyAndmFyaWFibGUnOiAnZGF0YScgfSk7XG4gKiBjb21waWxlZC5zb3VyY2U7XG4gKiAvLyA9PiBmdW5jdGlvbihkYXRhKSB7XG4gKiAvLyAgIHZhciBfX3QsIF9fcCA9ICcnO1xuICogLy8gICBfX3AgKz0gJ2hpICcgKyAoKF9fdCA9ICggZGF0YS51c2VyICkpID09IG51bGwgPyAnJyA6IF9fdCkgKyAnISc7XG4gKiAvLyAgIHJldHVybiBfX3A7XG4gKiAvLyB9XG4gKlxuICogLy8gVXNlIGN1c3RvbSB0ZW1wbGF0ZSBkZWxpbWl0ZXJzLlxuICogXy50ZW1wbGF0ZVNldHRpbmdzLmludGVycG9sYXRlID0gL3t7KFtcXHNcXFNdKz8pfX0vZztcbiAqIHZhciBjb21waWxlZCA9IF8udGVtcGxhdGUoJ2hlbGxvIHt7IHVzZXIgfX0hJyk7XG4gKiBjb21waWxlZCh7ICd1c2VyJzogJ211c3RhY2hlJyB9KTtcbiAqIC8vID0+ICdoZWxsbyBtdXN0YWNoZSEnXG4gKlxuICogLy8gVXNlIHRoZSBgc291cmNlYCBwcm9wZXJ0eSB0byBpbmxpbmUgY29tcGlsZWQgdGVtcGxhdGVzIGZvciBtZWFuaW5nZnVsXG4gKiAvLyBsaW5lIG51bWJlcnMgaW4gZXJyb3IgbWVzc2FnZXMgYW5kIHN0YWNrIHRyYWNlcy5cbiAqIGZzLndyaXRlRmlsZVN5bmMocGF0aC5qb2luKHByb2Nlc3MuY3dkKCksICdqc3QuanMnKSwgJ1xcXG4gKiAgIHZhciBKU1QgPSB7XFxcbiAqICAgICBcIm1haW5cIjogJyArIF8udGVtcGxhdGUobWFpblRleHQpLnNvdXJjZSArICdcXFxuICogICB9O1xcXG4gKiAnKTtcbiAqL1xuZnVuY3Rpb24gdGVtcGxhdGUoc3RyaW5nLCBvcHRpb25zLCBndWFyZCkge1xuICAvLyBCYXNlZCBvbiBKb2huIFJlc2lnJ3MgYHRtcGxgIGltcGxlbWVudGF0aW9uXG4gIC8vIChodHRwOi8vZWpvaG4ub3JnL2Jsb2cvamF2YXNjcmlwdC1taWNyby10ZW1wbGF0aW5nLylcbiAgLy8gYW5kIExhdXJhIERva3Rvcm92YSdzIGRvVC5qcyAoaHR0cHM6Ly9naXRodWIuY29tL29sYWRvL2RvVCkuXG4gIHZhciBzZXR0aW5ncyA9IHRlbXBsYXRlU2V0dGluZ3MuaW1wb3J0cy5fLnRlbXBsYXRlU2V0dGluZ3MgfHwgdGVtcGxhdGVTZXR0aW5ncztcblxuICBpZiAoZ3VhcmQgJiYgaXNJdGVyYXRlZUNhbGwoc3RyaW5nLCBvcHRpb25zLCBndWFyZCkpIHtcbiAgICBvcHRpb25zID0gdW5kZWZpbmVkO1xuICB9XG4gIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gIG9wdGlvbnMgPSBhc3NpZ25JbldpdGgoe30sIG9wdGlvbnMsIHNldHRpbmdzLCBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKTtcblxuICB2YXIgaW1wb3J0cyA9IGFzc2lnbkluV2l0aCh7fSwgb3B0aW9ucy5pbXBvcnRzLCBzZXR0aW5ncy5pbXBvcnRzLCBjdXN0b21EZWZhdWx0c0Fzc2lnbkluKSxcbiAgICAgIGltcG9ydHNLZXlzID0ga2V5cyhpbXBvcnRzKSxcbiAgICAgIGltcG9ydHNWYWx1ZXMgPSBiYXNlVmFsdWVzKGltcG9ydHMsIGltcG9ydHNLZXlzKTtcblxuICB2YXIgaXNFc2NhcGluZyxcbiAgICAgIGlzRXZhbHVhdGluZyxcbiAgICAgIGluZGV4ID0gMCxcbiAgICAgIGludGVycG9sYXRlID0gb3B0aW9ucy5pbnRlcnBvbGF0ZSB8fCByZU5vTWF0Y2gsXG4gICAgICBzb3VyY2UgPSBcIl9fcCArPSAnXCI7XG5cbiAgLy8gQ29tcGlsZSB0aGUgcmVnZXhwIHRvIG1hdGNoIGVhY2ggZGVsaW1pdGVyLlxuICB2YXIgcmVEZWxpbWl0ZXJzID0gUmVnRXhwKFxuICAgIChvcHRpb25zLmVzY2FwZSB8fCByZU5vTWF0Y2gpLnNvdXJjZSArICd8JyArXG4gICAgaW50ZXJwb2xhdGUuc291cmNlICsgJ3wnICtcbiAgICAoaW50ZXJwb2xhdGUgPT09IHJlSW50ZXJwb2xhdGUgPyByZUVzVGVtcGxhdGUgOiByZU5vTWF0Y2gpLnNvdXJjZSArICd8JyArXG4gICAgKG9wdGlvbnMuZXZhbHVhdGUgfHwgcmVOb01hdGNoKS5zb3VyY2UgKyAnfCQnXG4gICwgJ2cnKTtcblxuICAvLyBVc2UgYSBzb3VyY2VVUkwgZm9yIGVhc2llciBkZWJ1Z2dpbmcuXG4gIHZhciBzb3VyY2VVUkwgPSAnc291cmNlVVJMJyBpbiBvcHRpb25zID8gJy8vIyBzb3VyY2VVUkw9JyArIG9wdGlvbnMuc291cmNlVVJMICsgJ1xcbicgOiAnJztcblxuICBzdHJpbmcucmVwbGFjZShyZURlbGltaXRlcnMsIGZ1bmN0aW9uKG1hdGNoLCBlc2NhcGVWYWx1ZSwgaW50ZXJwb2xhdGVWYWx1ZSwgZXNUZW1wbGF0ZVZhbHVlLCBldmFsdWF0ZVZhbHVlLCBvZmZzZXQpIHtcbiAgICBpbnRlcnBvbGF0ZVZhbHVlIHx8IChpbnRlcnBvbGF0ZVZhbHVlID0gZXNUZW1wbGF0ZVZhbHVlKTtcblxuICAgIC8vIEVzY2FwZSBjaGFyYWN0ZXJzIHRoYXQgY2FuJ3QgYmUgaW5jbHVkZWQgaW4gc3RyaW5nIGxpdGVyYWxzLlxuICAgIHNvdXJjZSArPSBzdHJpbmcuc2xpY2UoaW5kZXgsIG9mZnNldCkucmVwbGFjZShyZVVuZXNjYXBlZFN0cmluZywgZXNjYXBlU3RyaW5nQ2hhcik7XG5cbiAgICAvLyBSZXBsYWNlIGRlbGltaXRlcnMgd2l0aCBzbmlwcGV0cy5cbiAgICBpZiAoZXNjYXBlVmFsdWUpIHtcbiAgICAgIGlzRXNjYXBpbmcgPSB0cnVlO1xuICAgICAgc291cmNlICs9IFwiJyArXFxuX19lKFwiICsgZXNjYXBlVmFsdWUgKyBcIikgK1xcbidcIjtcbiAgICB9XG4gICAgaWYgKGV2YWx1YXRlVmFsdWUpIHtcbiAgICAgIGlzRXZhbHVhdGluZyA9IHRydWU7XG4gICAgICBzb3VyY2UgKz0gXCInO1xcblwiICsgZXZhbHVhdGVWYWx1ZSArIFwiO1xcbl9fcCArPSAnXCI7XG4gICAgfVxuICAgIGlmIChpbnRlcnBvbGF0ZVZhbHVlKSB7XG4gICAgICBzb3VyY2UgKz0gXCInICtcXG4oKF9fdCA9IChcIiArIGludGVycG9sYXRlVmFsdWUgKyBcIikpID09IG51bGwgPyAnJyA6IF9fdCkgK1xcbidcIjtcbiAgICB9XG4gICAgaW5kZXggPSBvZmZzZXQgKyBtYXRjaC5sZW5ndGg7XG5cbiAgICAvLyBUaGUgSlMgZW5naW5lIGVtYmVkZGVkIGluIEFkb2JlIHByb2R1Y3RzIG5lZWRzIGBtYXRjaGAgcmV0dXJuZWQgaW5cbiAgICAvLyBvcmRlciB0byBwcm9kdWNlIHRoZSBjb3JyZWN0IGBvZmZzZXRgIHZhbHVlLlxuICAgIHJldHVybiBtYXRjaDtcbiAgfSk7XG5cbiAgc291cmNlICs9IFwiJztcXG5cIjtcblxuICAvLyBJZiBgdmFyaWFibGVgIGlzIG5vdCBzcGVjaWZpZWQgd3JhcCBhIHdpdGgtc3RhdGVtZW50IGFyb3VuZCB0aGUgZ2VuZXJhdGVkXG4gIC8vIGNvZGUgdG8gYWRkIHRoZSBkYXRhIG9iamVjdCB0byB0aGUgdG9wIG9mIHRoZSBzY29wZSBjaGFpbi5cbiAgdmFyIHZhcmlhYmxlID0gb3B0aW9ucy52YXJpYWJsZTtcbiAgaWYgKCF2YXJpYWJsZSkge1xuICAgIHNvdXJjZSA9ICd3aXRoIChvYmopIHtcXG4nICsgc291cmNlICsgJ1xcbn1cXG4nO1xuICB9XG4gIC8vIENsZWFudXAgY29kZSBieSBzdHJpcHBpbmcgZW1wdHkgc3RyaW5ncy5cbiAgc291cmNlID0gKGlzRXZhbHVhdGluZyA/IHNvdXJjZS5yZXBsYWNlKHJlRW1wdHlTdHJpbmdMZWFkaW5nLCAnJykgOiBzb3VyY2UpXG4gICAgLnJlcGxhY2UocmVFbXB0eVN0cmluZ01pZGRsZSwgJyQxJylcbiAgICAucmVwbGFjZShyZUVtcHR5U3RyaW5nVHJhaWxpbmcsICckMTsnKTtcblxuICAvLyBGcmFtZSBjb2RlIGFzIHRoZSBmdW5jdGlvbiBib2R5LlxuICBzb3VyY2UgPSAnZnVuY3Rpb24oJyArICh2YXJpYWJsZSB8fCAnb2JqJykgKyAnKSB7XFxuJyArXG4gICAgKHZhcmlhYmxlXG4gICAgICA/ICcnXG4gICAgICA6ICdvYmogfHwgKG9iaiA9IHt9KTtcXG4nXG4gICAgKSArXG4gICAgXCJ2YXIgX190LCBfX3AgPSAnJ1wiICtcbiAgICAoaXNFc2NhcGluZ1xuICAgICAgID8gJywgX19lID0gXy5lc2NhcGUnXG4gICAgICAgOiAnJ1xuICAgICkgK1xuICAgIChpc0V2YWx1YXRpbmdcbiAgICAgID8gJywgX19qID0gQXJyYXkucHJvdG90eXBlLmpvaW47XFxuJyArXG4gICAgICAgIFwiZnVuY3Rpb24gcHJpbnQoKSB7IF9fcCArPSBfX2ouY2FsbChhcmd1bWVudHMsICcnKSB9XFxuXCJcbiAgICAgIDogJztcXG4nXG4gICAgKSArXG4gICAgc291cmNlICtcbiAgICAncmV0dXJuIF9fcFxcbn0nO1xuXG4gIHZhciByZXN1bHQgPSBhdHRlbXB0KGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBGdW5jdGlvbihpbXBvcnRzS2V5cywgc291cmNlVVJMICsgJ3JldHVybiAnICsgc291cmNlKVxuICAgICAgLmFwcGx5KHVuZGVmaW5lZCwgaW1wb3J0c1ZhbHVlcyk7XG4gIH0pO1xuXG4gIC8vIFByb3ZpZGUgdGhlIGNvbXBpbGVkIGZ1bmN0aW9uJ3Mgc291cmNlIGJ5IGl0cyBgdG9TdHJpbmdgIG1ldGhvZCBvclxuICAvLyB0aGUgYHNvdXJjZWAgcHJvcGVydHkgYXMgYSBjb252ZW5pZW5jZSBmb3IgaW5saW5pbmcgY29tcGlsZWQgdGVtcGxhdGVzLlxuICByZXN1bHQuc291cmNlID0gc291cmNlO1xuICBpZiAoaXNFcnJvcihyZXN1bHQpKSB7XG4gICAgdGhyb3cgcmVzdWx0O1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRlbXBsYXRlO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5RWFjaChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkgPT09IGZhbHNlKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcnJheUVhY2g7XG4iLCIvKipcbiAqIENyZWF0ZXMgYSBiYXNlIGZ1bmN0aW9uIGZvciBtZXRob2RzIGxpa2UgYF8uZm9ySW5gIGFuZCBgXy5mb3JPd25gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VGb3IoZnJvbVJpZ2h0KSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzRnVuYykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChvYmplY3QpLFxuICAgICAgICBwcm9wcyA9IGtleXNGdW5jKG9iamVjdCksXG4gICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgdmFyIGtleSA9IHByb3BzW2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdO1xuICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQmFzZUZvcjtcbiIsImltcG9ydCBjcmVhdGVCYXNlRm9yIGZyb20gJy4vX2NyZWF0ZUJhc2VGb3IuanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBiYXNlRm9yT3duYCB3aGljaCBpdGVyYXRlcyBvdmVyIGBvYmplY3RgXG4gKiBwcm9wZXJ0aWVzIHJldHVybmVkIGJ5IGBrZXlzRnVuY2AgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xudmFyIGJhc2VGb3IgPSBjcmVhdGVCYXNlRm9yKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VGb3I7XG4iLCJpbXBvcnQgYmFzZUZvciBmcm9tICcuL19iYXNlRm9yLmpzJztcbmltcG9ydCBrZXlzIGZyb20gJy4va2V5cy5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gYmFzZUZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gIHJldHVybiBvYmplY3QgJiYgYmFzZUZvcihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUZvck93bjtcbiIsImltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuL2lzQXJyYXlMaWtlLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgYGJhc2VFYWNoYCBvciBgYmFzZUVhY2hSaWdodGAgZnVuY3Rpb24uXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVhY2hGdW5jIFRoZSBmdW5jdGlvbiB0byBpdGVyYXRlIG92ZXIgYSBjb2xsZWN0aW9uLlxuICogQHBhcmFtIHtib29sZWFufSBbZnJvbVJpZ2h0XSBTcGVjaWZ5IGl0ZXJhdGluZyBmcm9tIHJpZ2h0IHRvIGxlZnQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBiYXNlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjcmVhdGVCYXNlRWFjaChlYWNoRnVuYywgZnJvbVJpZ2h0KSB7XG4gIHJldHVybiBmdW5jdGlvbihjb2xsZWN0aW9uLCBpdGVyYXRlZSkge1xuICAgIGlmIChjb2xsZWN0aW9uID09IG51bGwpIHtcbiAgICAgIHJldHVybiBjb2xsZWN0aW9uO1xuICAgIH1cbiAgICBpZiAoIWlzQXJyYXlMaWtlKGNvbGxlY3Rpb24pKSB7XG4gICAgICByZXR1cm4gZWFjaEZ1bmMoY29sbGVjdGlvbiwgaXRlcmF0ZWUpO1xuICAgIH1cbiAgICB2YXIgbGVuZ3RoID0gY29sbGVjdGlvbi5sZW5ndGgsXG4gICAgICAgIGluZGV4ID0gZnJvbVJpZ2h0ID8gbGVuZ3RoIDogLTEsXG4gICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KGNvbGxlY3Rpb24pO1xuXG4gICAgd2hpbGUgKChmcm9tUmlnaHQgPyBpbmRleC0tIDogKytpbmRleCA8IGxlbmd0aCkpIHtcbiAgICAgIGlmIChpdGVyYXRlZShpdGVyYWJsZVtpbmRleF0sIGluZGV4LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY29sbGVjdGlvbjtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQmFzZUVhY2g7XG4iLCJpbXBvcnQgYmFzZUZvck93biBmcm9tICcuL19iYXNlRm9yT3duLmpzJztcbmltcG9ydCBjcmVhdGVCYXNlRWFjaCBmcm9tICcuL19jcmVhdGVCYXNlRWFjaC5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yRWFjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fE9iamVjdH0gUmV0dXJucyBgY29sbGVjdGlvbmAuXG4gKi9cbnZhciBiYXNlRWFjaCA9IGNyZWF0ZUJhc2VFYWNoKGJhc2VGb3JPd24pO1xuXG5leHBvcnQgZGVmYXVsdCBiYXNlRWFjaDtcbiIsImltcG9ydCBpZGVudGl0eSBmcm9tICcuL2lkZW50aXR5LmpzJztcblxuLyoqXG4gKiBDYXN0cyBgdmFsdWVgIHRvIGBpZGVudGl0eWAgaWYgaXQncyBub3QgYSBmdW5jdGlvbi5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyBjYXN0IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjYXN0RnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nID8gdmFsdWUgOiBpZGVudGl0eTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2FzdEZ1bmN0aW9uO1xuIiwiaW1wb3J0IGFycmF5RWFjaCBmcm9tICcuL19hcnJheUVhY2guanMnO1xuaW1wb3J0IGJhc2VFYWNoIGZyb20gJy4vX2Jhc2VFYWNoLmpzJztcbmltcG9ydCBjYXN0RnVuY3Rpb24gZnJvbSAnLi9fY2FzdEZ1bmN0aW9uLmpzJztcbmltcG9ydCBpc0FycmF5IGZyb20gJy4vaXNBcnJheS5qcyc7XG5cbi8qKlxuICogSXRlcmF0ZXMgb3ZlciBlbGVtZW50cyBvZiBgY29sbGVjdGlvbmAgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBlbGVtZW50LlxuICogVGhlIGl0ZXJhdGVlIGlzIGludm9rZWQgd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwgaW5kZXh8a2V5LCBjb2xsZWN0aW9uKS5cbiAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAqXG4gKiAqKk5vdGU6KiogQXMgd2l0aCBvdGhlciBcIkNvbGxlY3Rpb25zXCIgbWV0aG9kcywgb2JqZWN0cyB3aXRoIGEgXCJsZW5ndGhcIlxuICogcHJvcGVydHkgYXJlIGl0ZXJhdGVkIGxpa2UgYXJyYXlzLiBUbyBhdm9pZCB0aGlzIGJlaGF2aW9yIHVzZSBgXy5mb3JJbmBcbiAqIG9yIGBfLmZvck93bmAgZm9yIG9iamVjdCBpdGVyYXRpb24uXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGFsaWFzIGVhY2hcbiAqIEBjYXRlZ29yeSBDb2xsZWN0aW9uXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheXxPYmplY3R9IFJldHVybnMgYGNvbGxlY3Rpb25gLlxuICogQHNlZSBfLmZvckVhY2hSaWdodFxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmZvckVhY2goWzEsIDJdLCBmdW5jdGlvbih2YWx1ZSkge1xuICogICBjb25zb2xlLmxvZyh2YWx1ZSk7XG4gKiB9KTtcbiAqIC8vID0+IExvZ3MgYDFgIHRoZW4gYDJgLlxuICpcbiAqIF8uZm9yRWFjaCh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAqICAgY29uc29sZS5sb2coa2V5KTtcbiAqIH0pO1xuICogLy8gPT4gTG9ncyAnYScgdGhlbiAnYicgKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZCkuXG4gKi9cbmZ1bmN0aW9uIGZvckVhY2goY29sbGVjdGlvbiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGZ1bmMgPSBpc0FycmF5KGNvbGxlY3Rpb24pID8gYXJyYXlFYWNoIDogYmFzZUVhY2g7XG4gIHJldHVybiBmdW5jKGNvbGxlY3Rpb24sIGNhc3RGdW5jdGlvbihpdGVyYXRlZSkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmb3JFYWNoO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBsaXN0Q2FjaGVDbGVhcjtcbiIsImltcG9ydCBlcSBmcm9tICcuL2VxLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXNzb2NJbmRleE9mO1xuIiwiaW1wb3J0IGFzc29jSW5kZXhPZiBmcm9tICcuL19hc3NvY0luZGV4T2YuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2U7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICBkYXRhLnBvcCgpO1xuICB9IGVsc2Uge1xuICAgIHNwbGljZS5jYWxsKGRhdGEsIGluZGV4LCAxKTtcbiAgfVxuICAtLXRoaXMuc2l6ZTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxpc3RDYWNoZURlbGV0ZTtcbiIsImltcG9ydCBhc3NvY0luZGV4T2YgZnJvbSAnLi9fYXNzb2NJbmRleE9mLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBkYXRhW2luZGV4XVsxXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbGlzdENhY2hlR2V0O1xuIiwiaW1wb3J0IGFzc29jSW5kZXhPZiBmcm9tICcuL19hc3NvY0luZGV4T2YuanMnO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbGlzdENhY2hlSGFzO1xuIiwiaW1wb3J0IGFzc29jSW5kZXhPZiBmcm9tICcuL19hc3NvY0luZGV4T2YuanMnO1xuXG4vKipcbiAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgICsrdGhpcy5zaXplO1xuICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9IGVsc2Uge1xuICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxpc3RDYWNoZVNldDtcbiIsImltcG9ydCBsaXN0Q2FjaGVDbGVhciBmcm9tICcuL19saXN0Q2FjaGVDbGVhci5qcyc7XG5pbXBvcnQgbGlzdENhY2hlRGVsZXRlIGZyb20gJy4vX2xpc3RDYWNoZURlbGV0ZS5qcyc7XG5pbXBvcnQgbGlzdENhY2hlR2V0IGZyb20gJy4vX2xpc3RDYWNoZUdldC5qcyc7XG5pbXBvcnQgbGlzdENhY2hlSGFzIGZyb20gJy4vX2xpc3RDYWNoZUhhcy5qcyc7XG5pbXBvcnQgbGlzdENhY2hlU2V0IGZyb20gJy4vX2xpc3RDYWNoZVNldC5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG5MaXN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gbGlzdENhY2hlQ2xlYXI7XG5MaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbkxpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuTGlzdENhY2hlLnByb3RvdHlwZS5oYXMgPSBsaXN0Q2FjaGVIYXM7XG5MaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxuZXhwb3J0IGRlZmF1bHQgTGlzdENhY2hlO1xuIiwiaW1wb3J0IExpc3RDYWNoZSBmcm9tICcuL19MaXN0Q2FjaGUuanMnO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIFN0YWNrXG4gKi9cbmZ1bmN0aW9uIHN0YWNrQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdGFja0NsZWFyO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIHJlc3VsdCA9IGRhdGFbJ2RlbGV0ZSddKGtleSk7XG5cbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdGFja0RlbGV0ZTtcbiIsIi8qKlxuICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrR2V0KGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RhY2tHZXQ7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhrZXkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdGFja0hhcztcbiIsImltcG9ydCBnZXROYXRpdmUgZnJvbSAnLi9fZ2V0TmF0aXZlLmpzJztcbmltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdNYXAnKTtcblxuZXhwb3J0IGRlZmF1bHQgTWFwO1xuIiwiaW1wb3J0IGdldE5hdGl2ZSBmcm9tICcuL19nZXROYXRpdmUuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgbmF0aXZlQ3JlYXRlID0gZ2V0TmF0aXZlKE9iamVjdCwgJ2NyZWF0ZScpO1xuXG5leHBvcnQgZGVmYXVsdCBuYXRpdmVDcmVhdGU7XG4iLCJpbXBvcnQgbmF0aXZlQ3JlYXRlIGZyb20gJy4vX25hdGl2ZUNyZWF0ZS5qcyc7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKi9cbmZ1bmN0aW9uIGhhc2hDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IG5hdGl2ZUNyZWF0ZSA/IG5hdGl2ZUNyZWF0ZShudWxsKSA6IHt9O1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBoYXNoQ2xlYXI7XG4iLCIvKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge09iamVjdH0gaGFzaCBUaGUgaGFzaCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaERlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IHRoaXMuaGFzKGtleSkgJiYgZGVsZXRlIHRoaXMuX19kYXRhX19ba2V5XTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBoYXNoRGVsZXRlO1xuIiwiaW1wb3J0IG5hdGl2ZUNyZWF0ZSBmcm9tICcuL19uYXRpdmVDcmVhdGUuanMnO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogR2V0cyB0aGUgaGFzaCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBoYXNoR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChuYXRpdmVDcmVhdGUpIHtcbiAgICB2YXIgcmVzdWx0ID0gZGF0YVtrZXldO1xuICAgIHJldHVybiByZXN1bHQgPT09IEhBU0hfVU5ERUZJTkVEID8gdW5kZWZpbmVkIDogcmVzdWx0O1xuICB9XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSkgPyBkYXRhW2tleV0gOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhhc2hHZXQ7XG4iLCJpbXBvcnQgbmF0aXZlQ3JlYXRlIGZyb20gJy4vX25hdGl2ZUNyZWF0ZS5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgaGFzaCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzaEhhcyhrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICByZXR1cm4gbmF0aXZlQ3JlYXRlID8gKGRhdGFba2V5XSAhPT0gdW5kZWZpbmVkKSA6IGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzaEhhcztcbiIsImltcG9ydCBuYXRpdmVDcmVhdGUgZnJvbSAnLi9fbmF0aXZlQ3JlYXRlLmpzJztcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIFNldHMgdGhlIGhhc2ggYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBoYXNoIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBoYXNoU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICB0aGlzLnNpemUgKz0gdGhpcy5oYXMoa2V5KSA/IDAgOiAxO1xuICBkYXRhW2tleV0gPSAobmF0aXZlQ3JlYXRlICYmIHZhbHVlID09PSB1bmRlZmluZWQpID8gSEFTSF9VTkRFRklORUQgOiB2YWx1ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhhc2hTZXQ7XG4iLCJpbXBvcnQgaGFzaENsZWFyIGZyb20gJy4vX2hhc2hDbGVhci5qcyc7XG5pbXBvcnQgaGFzaERlbGV0ZSBmcm9tICcuL19oYXNoRGVsZXRlLmpzJztcbmltcG9ydCBoYXNoR2V0IGZyb20gJy4vX2hhc2hHZXQuanMnO1xuaW1wb3J0IGhhc2hIYXMgZnJvbSAnLi9faGFzaEhhcy5qcyc7XG5pbXBvcnQgaGFzaFNldCBmcm9tICcuL19oYXNoU2V0LmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGFzaCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIEhhc2goZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgSGFzaGAuXG5IYXNoLnByb3RvdHlwZS5jbGVhciA9IGhhc2hDbGVhcjtcbkhhc2gucHJvdG90eXBlWydkZWxldGUnXSA9IGhhc2hEZWxldGU7XG5IYXNoLnByb3RvdHlwZS5nZXQgPSBoYXNoR2V0O1xuSGFzaC5wcm90b3R5cGUuaGFzID0gaGFzaEhhcztcbkhhc2gucHJvdG90eXBlLnNldCA9IGhhc2hTZXQ7XG5cbmV4cG9ydCBkZWZhdWx0IEhhc2g7XG4iLCJpbXBvcnQgSGFzaCBmcm9tICcuL19IYXNoLmpzJztcbmltcG9ydCBMaXN0Q2FjaGUgZnJvbSAnLi9fTGlzdENhY2hlLmpzJztcbmltcG9ydCBNYXAgZnJvbSAnLi9fTWFwLmpzJztcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVDbGVhcigpIHtcbiAgdGhpcy5zaXplID0gMDtcbiAgdGhpcy5fX2RhdGFfXyA9IHtcbiAgICAnaGFzaCc6IG5ldyBIYXNoLFxuICAgICdtYXAnOiBuZXcgKE1hcCB8fCBMaXN0Q2FjaGUpLFxuICAgICdzdHJpbmcnOiBuZXcgSGFzaFxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXBDYWNoZUNsZWFyO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3IgdXNlIGFzIHVuaXF1ZSBvYmplY3Qga2V5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5YWJsZSh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuICh0eXBlID09ICdzdHJpbmcnIHx8IHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJylcbiAgICA/ICh2YWx1ZSAhPT0gJ19fcHJvdG9fXycpXG4gICAgOiAodmFsdWUgPT09IG51bGwpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0tleWFibGU7XG4iLCJpbXBvcnQgaXNLZXlhYmxlIGZyb20gJy4vX2lzS2V5YWJsZS5qcyc7XG5cbi8qKlxuICogR2V0cyB0aGUgZGF0YSBmb3IgYG1hcGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIHJlZmVyZW5jZSBrZXkuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgbWFwIGRhdGEuXG4gKi9cbmZ1bmN0aW9uIGdldE1hcERhdGEobWFwLCBrZXkpIHtcbiAgdmFyIGRhdGEgPSBtYXAuX19kYXRhX187XG4gIHJldHVybiBpc0tleWFibGUoa2V5KVxuICAgID8gZGF0YVt0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8gJ3N0cmluZycgOiAnaGFzaCddXG4gICAgOiBkYXRhLm1hcDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0TWFwRGF0YTtcbiIsImltcG9ydCBnZXRNYXBEYXRhIGZyb20gJy4vX2dldE1hcERhdGEuanMnO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBtYXAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSlbJ2RlbGV0ZSddKGtleSk7XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwQ2FjaGVEZWxldGU7XG4iLCJpbXBvcnQgZ2V0TWFwRGF0YSBmcm9tICcuL19nZXRNYXBEYXRhLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBtYXAgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlR2V0KGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmdldChrZXkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXBDYWNoZUdldDtcbiIsImltcG9ydCBnZXRNYXBEYXRhIGZyb20gJy4vX2dldE1hcERhdGEuanMnO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIG1hcCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLmhhcyhrZXkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXBDYWNoZUhhcztcbiIsImltcG9ydCBnZXRNYXBEYXRhIGZyb20gJy4vX2dldE1hcERhdGEuanMnO1xuXG4vKipcbiAqIFNldHMgdGhlIG1hcCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBtYXAgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSBnZXRNYXBEYXRhKHRoaXMsIGtleSksXG4gICAgICBzaXplID0gZGF0YS5zaXplO1xuXG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgKz0gZGF0YS5zaXplID09IHNpemUgPyAwIDogMTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENhY2hlU2V0O1xuIiwiaW1wb3J0IG1hcENhY2hlQ2xlYXIgZnJvbSAnLi9fbWFwQ2FjaGVDbGVhci5qcyc7XG5pbXBvcnQgbWFwQ2FjaGVEZWxldGUgZnJvbSAnLi9fbWFwQ2FjaGVEZWxldGUuanMnO1xuaW1wb3J0IG1hcENhY2hlR2V0IGZyb20gJy4vX21hcENhY2hlR2V0LmpzJztcbmltcG9ydCBtYXBDYWNoZUhhcyBmcm9tICcuL19tYXBDYWNoZUhhcy5qcyc7XG5pbXBvcnQgbWFwQ2FjaGVTZXQgZnJvbSAnLi9fbWFwQ2FjaGVTZXQuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBtYXAgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTWFwQ2FjaGUoZW50cmllcykge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGVudHJpZXMgPT0gbnVsbCA/IDAgOiBlbnRyaWVzLmxlbmd0aDtcblxuICB0aGlzLmNsZWFyKCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGVudHJ5ID0gZW50cmllc1tpbmRleF07XG4gICAgdGhpcy5zZXQoZW50cnlbMF0sIGVudHJ5WzFdKTtcbiAgfVxufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgTWFwQ2FjaGVgLlxuTWFwQ2FjaGUucHJvdG90eXBlLmNsZWFyID0gbWFwQ2FjaGVDbGVhcjtcbk1hcENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBtYXBDYWNoZURlbGV0ZTtcbk1hcENhY2hlLnByb3RvdHlwZS5nZXQgPSBtYXBDYWNoZUdldDtcbk1hcENhY2hlLnByb3RvdHlwZS5oYXMgPSBtYXBDYWNoZUhhcztcbk1hcENhY2hlLnByb3RvdHlwZS5zZXQgPSBtYXBDYWNoZVNldDtcblxuZXhwb3J0IGRlZmF1bHQgTWFwQ2FjaGU7XG4iLCJpbXBvcnQgTGlzdENhY2hlIGZyb20gJy4vX0xpc3RDYWNoZS5qcyc7XG5pbXBvcnQgTWFwIGZyb20gJy4vX01hcC5qcyc7XG5pbXBvcnQgTWFwQ2FjaGUgZnJvbSAnLi9fTWFwQ2FjaGUuanMnO1xuXG4vKiogVXNlZCBhcyB0aGUgc2l6ZSB0byBlbmFibGUgbGFyZ2UgYXJyYXkgb3B0aW1pemF0aW9ucy4gKi9cbnZhciBMQVJHRV9BUlJBWV9TSVpFID0gMjAwO1xuXG4vKipcbiAqIFNldHMgdGhlIHN0YWNrIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIHN0YWNrIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBzdGFja1NldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKGRhdGEgaW5zdGFuY2VvZiBMaXN0Q2FjaGUpIHtcbiAgICB2YXIgcGFpcnMgPSBkYXRhLl9fZGF0YV9fO1xuICAgIGlmICghTWFwIHx8IChwYWlycy5sZW5ndGggPCBMQVJHRV9BUlJBWV9TSVpFIC0gMSkpIHtcbiAgICAgIHBhaXJzLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgICAgIHRoaXMuc2l6ZSA9ICsrZGF0YS5zaXplO1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlKHBhaXJzKTtcbiAgfVxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RhY2tTZXQ7XG4iLCJpbXBvcnQgTGlzdENhY2hlIGZyb20gJy4vX0xpc3RDYWNoZS5qcyc7XG5pbXBvcnQgc3RhY2tDbGVhciBmcm9tICcuL19zdGFja0NsZWFyLmpzJztcbmltcG9ydCBzdGFja0RlbGV0ZSBmcm9tICcuL19zdGFja0RlbGV0ZS5qcyc7XG5pbXBvcnQgc3RhY2tHZXQgZnJvbSAnLi9fc3RhY2tHZXQuanMnO1xuaW1wb3J0IHN0YWNrSGFzIGZyb20gJy4vX3N0YWNrSGFzLmpzJztcbmltcG9ydCBzdGFja1NldCBmcm9tICcuL19zdGFja1NldC5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0YWNrIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIFN0YWNrKGVudHJpZXMpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZShlbnRyaWVzKTtcbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xufVxuXG4vLyBBZGQgbWV0aG9kcyB0byBgU3RhY2tgLlxuU3RhY2sucHJvdG90eXBlLmNsZWFyID0gc3RhY2tDbGVhcjtcblN0YWNrLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBzdGFja0RlbGV0ZTtcblN0YWNrLnByb3RvdHlwZS5nZXQgPSBzdGFja0dldDtcblN0YWNrLnByb3RvdHlwZS5oYXMgPSBzdGFja0hhcztcblN0YWNrLnByb3RvdHlwZS5zZXQgPSBzdGFja1NldDtcblxuZXhwb3J0IGRlZmF1bHQgU3RhY2s7XG4iLCJpbXBvcnQgYmFzZUFzc2lnblZhbHVlIGZyb20gJy4vX2Jhc2VBc3NpZ25WYWx1ZS5qcyc7XG5pbXBvcnQgZXEgZnJvbSAnLi9lcS5qcyc7XG5cbi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlIGBhc3NpZ25WYWx1ZWAgZXhjZXB0IHRoYXQgaXQgZG9lc24ndCBhc3NpZ25cbiAqIGB1bmRlZmluZWRgIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBpZiAoKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgIWVxKG9iamVjdFtrZXldLCB2YWx1ZSkpIHx8XG4gICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzc2lnbk1lcmdlVmFsdWU7XG4iLCJpbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBleHBvcnRzYC4gKi9cbnZhciBmcmVlRXhwb3J0cyA9IHR5cGVvZiBleHBvcnRzID09ICdvYmplY3QnICYmIGV4cG9ydHMgJiYgIWV4cG9ydHMubm9kZVR5cGUgJiYgZXhwb3J0cztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBtb2R1bGVgLiAqL1xudmFyIGZyZWVNb2R1bGUgPSBmcmVlRXhwb3J0cyAmJiB0eXBlb2YgbW9kdWxlID09ICdvYmplY3QnICYmIG1vZHVsZSAmJiAhbW9kdWxlLm5vZGVUeXBlICYmIG1vZHVsZTtcblxuLyoqIERldGVjdCB0aGUgcG9wdWxhciBDb21tb25KUyBleHRlbnNpb24gYG1vZHVsZS5leHBvcnRzYC4gKi9cbnZhciBtb2R1bGVFeHBvcnRzID0gZnJlZU1vZHVsZSAmJiBmcmVlTW9kdWxlLmV4cG9ydHMgPT09IGZyZWVFeHBvcnRzO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBCdWZmZXIgPSBtb2R1bGVFeHBvcnRzID8gcm9vdC5CdWZmZXIgOiB1bmRlZmluZWQsXG4gICAgYWxsb2NVbnNhZmUgPSBCdWZmZXIgPyBCdWZmZXIuYWxsb2NVbnNhZmUgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mICBgYnVmZmVyYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtCdWZmZXJ9IGJ1ZmZlciBUaGUgYnVmZmVyIHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtCdWZmZXJ9IFJldHVybnMgdGhlIGNsb25lZCBidWZmZXIuXG4gKi9cbmZ1bmN0aW9uIGNsb25lQnVmZmVyKGJ1ZmZlciwgaXNEZWVwKSB7XG4gIGlmIChpc0RlZXApIHtcbiAgICByZXR1cm4gYnVmZmVyLnNsaWNlKCk7XG4gIH1cbiAgdmFyIGxlbmd0aCA9IGJ1ZmZlci5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBhbGxvY1Vuc2FmZSA/IGFsbG9jVW5zYWZlKGxlbmd0aCkgOiBuZXcgYnVmZmVyLmNvbnN0cnVjdG9yKGxlbmd0aCk7XG5cbiAgYnVmZmVyLmNvcHkocmVzdWx0KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xvbmVCdWZmZXI7XG4iLCJpbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgVWludDhBcnJheSA9IHJvb3QuVWludDhBcnJheTtcblxuZXhwb3J0IGRlZmF1bHQgVWludDhBcnJheTtcbiIsImltcG9ydCBVaW50OEFycmF5IGZyb20gJy4vX1VpbnQ4QXJyYXkuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgYXJyYXlCdWZmZXJgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciBUaGUgYXJyYXkgYnVmZmVyIHRvIGNsb25lLlxuICogQHJldHVybnMge0FycmF5QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYXJyYXkgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBjbG9uZUFycmF5QnVmZmVyKGFycmF5QnVmZmVyKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgYXJyYXlCdWZmZXIuY29uc3RydWN0b3IoYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG4gIG5ldyBVaW50OEFycmF5KHJlc3VsdCkuc2V0KG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsb25lQXJyYXlCdWZmZXI7XG4iLCJpbXBvcnQgY2xvbmVBcnJheUJ1ZmZlciBmcm9tICcuL19jbG9uZUFycmF5QnVmZmVyLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHR5cGVkQXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gdHlwZWRBcnJheSBUaGUgdHlwZWQgYXJyYXkgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHR5cGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBjbG9uZVR5cGVkQXJyYXkodHlwZWRBcnJheSwgaXNEZWVwKSB7XG4gIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKHR5cGVkQXJyYXkuYnVmZmVyKSA6IHR5cGVkQXJyYXkuYnVmZmVyO1xuICByZXR1cm4gbmV3IHR5cGVkQXJyYXkuY29uc3RydWN0b3IoYnVmZmVyLCB0eXBlZEFycmF5LmJ5dGVPZmZzZXQsIHR5cGVkQXJyYXkubGVuZ3RoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xvbmVUeXBlZEFycmF5O1xuIiwiLyoqXG4gKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiBgc291cmNlYCB0byBgYXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBzb3VyY2UgVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIGZyb20uXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXk9W11dIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyB0by5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBjb3B5QXJyYXkoc291cmNlLCBhcnJheSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHNvdXJjZS5sZW5ndGg7XG5cbiAgYXJyYXkgfHwgKGFycmF5ID0gQXJyYXkobGVuZ3RoKSk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYXJyYXlbaW5kZXhdID0gc291cmNlW2luZGV4XTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvcHlBcnJheTtcbiIsImltcG9ydCBpc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0Q3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jcmVhdGVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgYXNzaWduaW5nXG4gKiBwcm9wZXJ0aWVzIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHByb3RvIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAqL1xudmFyIGJhc2VDcmVhdGUgPSAoZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIG9iamVjdCgpIHt9XG4gIHJldHVybiBmdW5jdGlvbihwcm90bykge1xuICAgIGlmICghaXNPYmplY3QocHJvdG8pKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGlmIChvYmplY3RDcmVhdGUpIHtcbiAgICAgIHJldHVybiBvYmplY3RDcmVhdGUocHJvdG8pO1xuICAgIH1cbiAgICBvYmplY3QucHJvdG90eXBlID0gcHJvdG87XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBvYmplY3Q7XG4gICAgb2JqZWN0LnByb3RvdHlwZSA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufSgpKTtcblxuZXhwb3J0IGRlZmF1bHQgYmFzZUNyZWF0ZTtcbiIsImltcG9ydCBiYXNlQ3JlYXRlIGZyb20gJy4vX2Jhc2VDcmVhdGUuanMnO1xuaW1wb3J0IGdldFByb3RvdHlwZSBmcm9tICcuL19nZXRQcm90b3R5cGUuanMnO1xuaW1wb3J0IGlzUHJvdG90eXBlIGZyb20gJy4vX2lzUHJvdG90eXBlLmpzJztcblxuLyoqXG4gKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICovXG5mdW5jdGlvbiBpbml0Q2xvbmVPYmplY3Qob2JqZWN0KSB7XG4gIHJldHVybiAodHlwZW9mIG9iamVjdC5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmICFpc1Byb3RvdHlwZShvYmplY3QpKVxuICAgID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSlcbiAgICA6IHt9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBpbml0Q2xvbmVPYmplY3Q7XG4iLCJpbXBvcnQgaXNBcnJheUxpa2UgZnJvbSAnLi9pc0FycmF5TGlrZS5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmlzQXJyYXlMaWtlYCBleGNlcHQgdGhhdCBpdCBhbHNvIGNoZWNrcyBpZiBgdmFsdWVgXG4gKiBpcyBhbiBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXktbGlrZSBvYmplY3QsXG4gKiAgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlT2JqZWN0KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5TGlrZU9iamVjdChfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNBcnJheUxpa2VPYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaXNBcnJheUxpa2UodmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0FycmF5TGlrZU9iamVjdDtcbiIsIi8qKlxuICogR2V0cyB0aGUgdmFsdWUgYXQgYGtleWAsIHVubGVzcyBga2V5YCBpcyBcIl9fcHJvdG9fX1wiLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gc2FmZUdldChvYmplY3QsIGtleSkge1xuICBpZiAoa2V5ID09ICdfX3Byb3RvX18nKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgcmV0dXJuIG9iamVjdFtrZXldO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzYWZlR2V0O1xuIiwiaW1wb3J0IGNvcHlPYmplY3QgZnJvbSAnLi9fY29weU9iamVjdC5qcyc7XG5pbXBvcnQga2V5c0luIGZyb20gJy4va2V5c0luLmpzJztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgcGxhaW4gb2JqZWN0IGZsYXR0ZW5pbmcgaW5oZXJpdGVkIGVudW1lcmFibGUgc3RyaW5nXG4gKiBrZXllZCBwcm9wZXJ0aWVzIG9mIGB2YWx1ZWAgdG8gb3duIHByb3BlcnRpZXMgb2YgdGhlIHBsYWluIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBwbGFpbiBvYmplY3QuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8uYXNzaWduKHsgJ2EnOiAxIH0sIG5ldyBGb28pO1xuICogLy8gPT4geyAnYSc6IDEsICdiJzogMiB9XG4gKlxuICogXy5hc3NpZ24oeyAnYSc6IDEgfSwgXy50b1BsYWluT2JqZWN0KG5ldyBGb28pKTtcbiAqIC8vID0+IHsgJ2EnOiAxLCAnYic6IDIsICdjJzogMyB9XG4gKi9cbmZ1bmN0aW9uIHRvUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgcmV0dXJuIGNvcHlPYmplY3QodmFsdWUsIGtleXNJbih2YWx1ZSkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b1BsYWluT2JqZWN0O1xuIiwiaW1wb3J0IGFzc2lnbk1lcmdlVmFsdWUgZnJvbSAnLi9fYXNzaWduTWVyZ2VWYWx1ZS5qcyc7XG5pbXBvcnQgY2xvbmVCdWZmZXIgZnJvbSAnLi9fY2xvbmVCdWZmZXIuanMnO1xuaW1wb3J0IGNsb25lVHlwZWRBcnJheSBmcm9tICcuL19jbG9uZVR5cGVkQXJyYXkuanMnO1xuaW1wb3J0IGNvcHlBcnJheSBmcm9tICcuL19jb3B5QXJyYXkuanMnO1xuaW1wb3J0IGluaXRDbG9uZU9iamVjdCBmcm9tICcuL19pbml0Q2xvbmVPYmplY3QuanMnO1xuaW1wb3J0IGlzQXJndW1lbnRzIGZyb20gJy4vaXNBcmd1bWVudHMuanMnO1xuaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi9pc0FycmF5LmpzJztcbmltcG9ydCBpc0FycmF5TGlrZU9iamVjdCBmcm9tICcuL2lzQXJyYXlMaWtlT2JqZWN0LmpzJztcbmltcG9ydCBpc0J1ZmZlciBmcm9tICcuL2lzQnVmZmVyLmpzJztcbmltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbi5qcyc7XG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5pbXBvcnQgaXNQbGFpbk9iamVjdCBmcm9tICcuL2lzUGxhaW5PYmplY3QuanMnO1xuaW1wb3J0IGlzVHlwZWRBcnJheSBmcm9tICcuL2lzVHlwZWRBcnJheS5qcyc7XG5pbXBvcnQgc2FmZUdldCBmcm9tICcuL19zYWZlR2V0LmpzJztcbmltcG9ydCB0b1BsYWluT2JqZWN0IGZyb20gJy4vdG9QbGFpbk9iamVjdC5qcyc7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlTWVyZ2VgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAqIGRlZXAgbWVyZ2VzIGFuZCB0cmFja3MgdHJhdmVyc2VkIG9iamVjdHMgZW5hYmxpbmcgb2JqZWN0cyB3aXRoIGNpcmN1bGFyXG4gKiByZWZlcmVuY2VzIHRvIGJlIG1lcmdlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gbWVyZ2UuXG4gKiBAcGFyYW0ge251bWJlcn0gc3JjSW5kZXggVGhlIGluZGV4IG9mIGBzb3VyY2VgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gbWVyZ2VGdW5jIFRoZSBmdW5jdGlvbiB0byBtZXJnZSB2YWx1ZXMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBhc3NpZ25lZCB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICogIGNvdW50ZXJwYXJ0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZU1lcmdlRGVlcChvYmplY3QsIHNvdXJjZSwga2V5LCBzcmNJbmRleCwgbWVyZ2VGdW5jLCBjdXN0b21pemVyLCBzdGFjaykge1xuICB2YXIgb2JqVmFsdWUgPSBzYWZlR2V0KG9iamVjdCwga2V5KSxcbiAgICAgIHNyY1ZhbHVlID0gc2FmZUdldChzb3VyY2UsIGtleSksXG4gICAgICBzdGFja2VkID0gc3RhY2suZ2V0KHNyY1ZhbHVlKTtcblxuICBpZiAoc3RhY2tlZCkge1xuICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIHN0YWNrZWQpO1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgPyBjdXN0b21pemVyKG9ialZhbHVlLCBzcmNWYWx1ZSwgKGtleSArICcnKSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKVxuICAgIDogdW5kZWZpbmVkO1xuXG4gIHZhciBpc0NvbW1vbiA9IG5ld1ZhbHVlID09PSB1bmRlZmluZWQ7XG5cbiAgaWYgKGlzQ29tbW9uKSB7XG4gICAgdmFyIGlzQXJyID0gaXNBcnJheShzcmNWYWx1ZSksXG4gICAgICAgIGlzQnVmZiA9ICFpc0FyciAmJiBpc0J1ZmZlcihzcmNWYWx1ZSksXG4gICAgICAgIGlzVHlwZWQgPSAhaXNBcnIgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkoc3JjVmFsdWUpO1xuXG4gICAgbmV3VmFsdWUgPSBzcmNWYWx1ZTtcbiAgICBpZiAoaXNBcnIgfHwgaXNCdWZmIHx8IGlzVHlwZWQpIHtcbiAgICAgIGlmIChpc0FycmF5KG9ialZhbHVlKSkge1xuICAgICAgICBuZXdWYWx1ZSA9IG9ialZhbHVlO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAoaXNBcnJheUxpa2VPYmplY3Qob2JqVmFsdWUpKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gY29weUFycmF5KG9ialZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGlzQnVmZikge1xuICAgICAgICBpc0NvbW1vbiA9IGZhbHNlO1xuICAgICAgICBuZXdWYWx1ZSA9IGNsb25lQnVmZmVyKHNyY1ZhbHVlLCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKGlzVHlwZWQpIHtcbiAgICAgICAgaXNDb21tb24gPSBmYWxzZTtcbiAgICAgICAgbmV3VmFsdWUgPSBjbG9uZVR5cGVkQXJyYXkoc3JjVmFsdWUsIHRydWUpO1xuICAgICAgfVxuICAgICAgZWxzZSB7XG4gICAgICAgIG5ld1ZhbHVlID0gW107XG4gICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKGlzUGxhaW5PYmplY3Qoc3JjVmFsdWUpIHx8IGlzQXJndW1lbnRzKHNyY1ZhbHVlKSkge1xuICAgICAgbmV3VmFsdWUgPSBvYmpWYWx1ZTtcbiAgICAgIGlmIChpc0FyZ3VtZW50cyhvYmpWYWx1ZSkpIHtcbiAgICAgICAgbmV3VmFsdWUgPSB0b1BsYWluT2JqZWN0KG9ialZhbHVlKTtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKCFpc09iamVjdChvYmpWYWx1ZSkgfHwgaXNGdW5jdGlvbihvYmpWYWx1ZSkpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBpbml0Q2xvbmVPYmplY3Qoc3JjVmFsdWUpO1xuICAgICAgfVxuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIGlzQ29tbW9uID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIGlmIChpc0NvbW1vbikge1xuICAgIC8vIFJlY3Vyc2l2ZWx5IG1lcmdlIG9iamVjdHMgYW5kIGFycmF5cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIHN0YWNrLnNldChzcmNWYWx1ZSwgbmV3VmFsdWUpO1xuICAgIG1lcmdlRnVuYyhuZXdWYWx1ZSwgc3JjVmFsdWUsIHNyY0luZGV4LCBjdXN0b21pemVyLCBzdGFjayk7XG4gICAgc3RhY2tbJ2RlbGV0ZSddKHNyY1ZhbHVlKTtcbiAgfVxuICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VNZXJnZURlZXA7XG4iLCJpbXBvcnQgU3RhY2sgZnJvbSAnLi9fU3RhY2suanMnO1xuaW1wb3J0IGFzc2lnbk1lcmdlVmFsdWUgZnJvbSAnLi9fYXNzaWduTWVyZ2VWYWx1ZS5qcyc7XG5pbXBvcnQgYmFzZUZvciBmcm9tICcuL19iYXNlRm9yLmpzJztcbmltcG9ydCBiYXNlTWVyZ2VEZWVwIGZyb20gJy4vX2Jhc2VNZXJnZURlZXAuanMnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuaW1wb3J0IGtleXNJbiBmcm9tICcuL2tleXNJbi5qcyc7XG5pbXBvcnQgc2FmZUdldCBmcm9tICcuL19zYWZlR2V0LmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZXJnZWAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIG1lcmdlZCB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICogIGNvdW50ZXJwYXJ0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spIHtcbiAgaWYgKG9iamVjdCA9PT0gc291cmNlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGJhc2VGb3Ioc291cmNlLCBmdW5jdGlvbihzcmNWYWx1ZSwga2V5KSB7XG4gICAgaWYgKGlzT2JqZWN0KHNyY1ZhbHVlKSkge1xuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIGJhc2VNZXJnZURlZXAob2JqZWN0LCBzb3VyY2UsIGtleSwgc3JjSW5kZXgsIGJhc2VNZXJnZSwgY3VzdG9taXplciwgc3RhY2spO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgIHZhciBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXJcbiAgICAgICAgPyBjdXN0b21pemVyKHNhZmVHZXQob2JqZWN0LCBrZXkpLCBzcmNWYWx1ZSwgKGtleSArICcnKSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKVxuICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgbmV3VmFsdWUgPSBzcmNWYWx1ZTtcbiAgICAgIH1cbiAgICAgIGFzc2lnbk1lcmdlVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9XG4gIH0sIGtleXNJbik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VNZXJnZTtcbiIsImltcG9ydCBiYXNlTWVyZ2UgZnJvbSAnLi9fYmFzZU1lcmdlLmpzJztcbmltcG9ydCBjcmVhdGVBc3NpZ25lciBmcm9tICcuL19jcmVhdGVBc3NpZ25lci5qcyc7XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5hc3NpZ25gIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IG1lcmdlcyBvd24gYW5kXG4gKiBpbmhlcml0ZWQgZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydGllcyBvZiBzb3VyY2Ugb2JqZWN0cyBpbnRvIHRoZVxuICogZGVzdGluYXRpb24gb2JqZWN0LiBTb3VyY2UgcHJvcGVydGllcyB0aGF0IHJlc29sdmUgdG8gYHVuZGVmaW5lZGAgYXJlXG4gKiBza2lwcGVkIGlmIGEgZGVzdGluYXRpb24gdmFsdWUgZXhpc3RzLiBBcnJheSBhbmQgcGxhaW4gb2JqZWN0IHByb3BlcnRpZXNcbiAqIGFyZSBtZXJnZWQgcmVjdXJzaXZlbHkuIE90aGVyIG9iamVjdHMgYW5kIHZhbHVlIHR5cGVzIGFyZSBvdmVycmlkZGVuIGJ5XG4gKiBhc3NpZ25tZW50LiBTb3VyY2Ugb2JqZWN0cyBhcmUgYXBwbGllZCBmcm9tIGxlZnQgdG8gcmlnaHQuIFN1YnNlcXVlbnRcbiAqIHNvdXJjZXMgb3ZlcndyaXRlIHByb3BlcnR5IGFzc2lnbm1lbnRzIG9mIHByZXZpb3VzIHNvdXJjZXMuXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIG11dGF0ZXMgYG9iamVjdGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjUuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHsuLi5PYmplY3R9IFtzb3VyY2VzXSBUaGUgc291cmNlIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0ge1xuICogICAnYSc6IFt7ICdiJzogMiB9LCB7ICdkJzogNCB9XVxuICogfTtcbiAqXG4gKiB2YXIgb3RoZXIgPSB7XG4gKiAgICdhJzogW3sgJ2MnOiAzIH0sIHsgJ2UnOiA1IH1dXG4gKiB9O1xuICpcbiAqIF8ubWVyZ2Uob2JqZWN0LCBvdGhlcik7XG4gKiAvLyA9PiB7ICdhJzogW3sgJ2InOiAyLCAnYyc6IDMgfSwgeyAnZCc6IDQsICdlJzogNSB9XSB9XG4gKi9cbnZhciBtZXJnZSA9IGNyZWF0ZUFzc2lnbmVyKGZ1bmN0aW9uKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCkge1xuICBiYXNlTWVyZ2Uob2JqZWN0LCBzb3VyY2UsIHNyY0luZGV4KTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBtZXJnZTtcbiIsImltcG9ydCBiYXNlVmFsdWVzIGZyb20gJy4vX2Jhc2VWYWx1ZXMuanMnO1xuaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHkgdmFsdWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLnZhbHVlcyhuZXcgRm9vKTtcbiAqIC8vID0+IFsxLCAyXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIF8udmFsdWVzKCdoaScpO1xuICogLy8gPT4gWydoJywgJ2knXVxuICovXG5mdW5jdGlvbiB2YWx1ZXMob2JqZWN0KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZVZhbHVlcyhvYmplY3QsIGtleXMob2JqZWN0KSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbHVlcztcbiIsIi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqXG4gKiBBZGRzIGB2YWx1ZWAgdG8gdGhlIGFycmF5IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBhZGRcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQGFsaWFzIHB1c2hcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNhY2hlLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHNldENhY2hlQWRkKHZhbHVlKSB7XG4gIHRoaXMuX19kYXRhX18uc2V0KHZhbHVlLCBIQVNIX1VOREVGSU5FRCk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzZXRDYWNoZUFkZDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gdGhlIGFycmF5IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVIYXModmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2V0Q2FjaGVIYXM7XG4iLCJpbXBvcnQgTWFwQ2FjaGUgZnJvbSAnLi9fTWFwQ2FjaGUuanMnO1xuaW1wb3J0IHNldENhY2hlQWRkIGZyb20gJy4vX3NldENhY2hlQWRkLmpzJztcbmltcG9ydCBzZXRDYWNoZUhhcyBmcm9tICcuL19zZXRDYWNoZUhhcy5qcyc7XG5cbi8qKlxuICpcbiAqIENyZWF0ZXMgYW4gYXJyYXkgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIHVuaXF1ZSB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU2V0Q2FjaGUodmFsdWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gdmFsdWVzID09IG51bGwgPyAwIDogdmFsdWVzLmxlbmd0aDtcblxuICB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHRoaXMuYWRkKHZhbHVlc1tpbmRleF0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBTZXRDYWNoZWAuXG5TZXRDYWNoZS5wcm90b3R5cGUuYWRkID0gU2V0Q2FjaGUucHJvdG90eXBlLnB1c2ggPSBzZXRDYWNoZUFkZDtcblNldENhY2hlLnByb3RvdHlwZS5oYXMgPSBzZXRDYWNoZUhhcztcblxuZXhwb3J0IGRlZmF1bHQgU2V0Q2FjaGU7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zb21lYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlTb21lKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcnJheVNvbWU7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBhIGBjYWNoZWAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IGNhY2hlIFRoZSBjYWNoZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBjYWNoZUhhcyhjYWNoZSwga2V5KSB7XG4gIHJldHVybiBjYWNoZS5oYXMoa2V5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2FjaGVIYXM7XG4iLCJpbXBvcnQgU2V0Q2FjaGUgZnJvbSAnLi9fU2V0Q2FjaGUuanMnO1xuaW1wb3J0IGFycmF5U29tZSBmcm9tICcuL19hcnJheVNvbWUuanMnO1xuaW1wb3J0IGNhY2hlSGFzIGZyb20gJy4vX2NhY2hlSGFzLmpzJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgYXJyYXlzIHdpdGggc3VwcG9ydCBmb3JcbiAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge0FycmF5fSBvdGhlciBUaGUgb3RoZXIgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYGFycmF5YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcnJheXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxBcnJheXMoYXJyYXksIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICBvdGhMZW5ndGggPSBvdGhlci5sZW5ndGg7XG5cbiAgaWYgKGFyckxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIShpc1BhcnRpYWwgJiYgb3RoTGVuZ3RoID4gYXJyTGVuZ3RoKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KGFycmF5KTtcbiAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkge1xuICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICB9XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gdHJ1ZSxcbiAgICAgIHNlZW4gPSAoYml0bWFzayAmIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpID8gbmV3IFNldENhY2hlIDogdW5kZWZpbmVkO1xuXG4gIHN0YWNrLnNldChhcnJheSwgb3RoZXIpO1xuICBzdGFjay5zZXQob3RoZXIsIGFycmF5KTtcblxuICAvLyBJZ25vcmUgbm9uLWluZGV4IHByb3BlcnRpZXMuXG4gIHdoaWxlICgrK2luZGV4IDwgYXJyTGVuZ3RoKSB7XG4gICAgdmFyIGFyclZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2luZGV4XTtcblxuICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBhcnJWYWx1ZSwgaW5kZXgsIG90aGVyLCBhcnJheSwgc3RhY2spXG4gICAgICAgIDogY3VzdG9taXplcihhcnJWYWx1ZSwgb3RoVmFsdWUsIGluZGV4LCBhcnJheSwgb3RoZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgaWYgKGNvbXBhcmVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChjb21wYXJlZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgaWYgKHNlZW4pIHtcbiAgICAgIGlmICghYXJyYXlTb21lKG90aGVyLCBmdW5jdGlvbihvdGhWYWx1ZSwgb3RoSW5kZXgpIHtcbiAgICAgICAgICAgIGlmICghY2FjaGVIYXMoc2Vlbiwgb3RoSW5kZXgpICYmXG4gICAgICAgICAgICAgICAgKGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBzZWVuLnB1c2gob3RoSW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pKSB7XG4gICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCEoXG4gICAgICAgICAgYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8XG4gICAgICAgICAgICBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgc3RhY2tbJ2RlbGV0ZSddKGFycmF5KTtcbiAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZXF1YWxBcnJheXM7XG4iLCIvKipcbiAqIENvbnZlcnRzIGBtYXBgIHRvIGl0cyBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBtYXAgVGhlIG1hcCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBrZXktdmFsdWUgcGFpcnMuXG4gKi9cbmZ1bmN0aW9uIG1hcFRvQXJyYXkobWFwKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobWFwLnNpemUpO1xuXG4gIG1hcC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSBba2V5LCB2YWx1ZV07XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXBUb0FycmF5O1xuIiwiLyoqXG4gKiBDb252ZXJ0cyBgc2V0YCB0byBhbiBhcnJheSBvZiBpdHMgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc2V0IFRoZSBzZXQgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgdmFsdWVzLlxuICovXG5mdW5jdGlvbiBzZXRUb0FycmF5KHNldCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KHNldC5zaXplKTtcblxuICBzZXQuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IHZhbHVlO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2V0VG9BcnJheTtcbiIsImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcbmltcG9ydCBVaW50OEFycmF5IGZyb20gJy4vX1VpbnQ4QXJyYXkuanMnO1xuaW1wb3J0IGVxIGZyb20gJy4vZXEuanMnO1xuaW1wb3J0IGVxdWFsQXJyYXlzIGZyb20gJy4vX2VxdWFsQXJyYXlzLmpzJztcbmltcG9ydCBtYXBUb0FycmF5IGZyb20gJy4vX21hcFRvQXJyYXkuanMnO1xuaW1wb3J0IHNldFRvQXJyYXkgZnJvbSAnLi9fc2V0VG9BcnJheS5qcyc7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGNvbXBhcmluZyBvYmplY3RzIG9mXG4gKiB0aGUgc2FtZSBgdG9TdHJpbmdUYWdgLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY29tcGFyaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIG9yIGBTdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3RzIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCB0YWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgIChvYmplY3QuYnl0ZU9mZnNldCAhPSBvdGhlci5ieXRlT2Zmc2V0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBvYmplY3QuYnVmZmVyO1xuICAgICAgb3RoZXIgPSBvdGhlci5idWZmZXI7XG5cbiAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgICFlcXVhbEZ1bmMobmV3IFVpbnQ4QXJyYXkob2JqZWN0KSwgbmV3IFVpbnQ4QXJyYXkob3RoZXIpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIGNhc2UgYm9vbFRhZzpcbiAgICBjYXNlIGRhdGVUYWc6XG4gICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAvLyBDb2VyY2UgYm9vbGVhbnMgdG8gYDFgIG9yIGAwYCBhbmQgZGF0ZXMgdG8gbWlsbGlzZWNvbmRzLlxuICAgICAgLy8gSW52YWxpZCBkYXRlcyBhcmUgY29lcmNlZCB0byBgTmFOYC5cbiAgICAgIHJldHVybiBlcSgrb2JqZWN0LCArb3RoZXIpO1xuXG4gICAgY2FzZSBlcnJvclRhZzpcbiAgICAgIHJldHVybiBvYmplY3QubmFtZSA9PSBvdGhlci5uYW1lICYmIG9iamVjdC5tZXNzYWdlID09IG90aGVyLm1lc3NhZ2U7XG5cbiAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgIC8vIENvZXJjZSByZWdleGVzIHRvIHN0cmluZ3MgYW5kIHRyZWF0IHN0cmluZ3MsIHByaW1pdGl2ZXMgYW5kIG9iamVjdHMsXG4gICAgICAvLyBhcyBlcXVhbC4gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG4gICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgcmV0dXJuIG9iamVjdCA9PSAob3RoZXIgKyAnJyk7XG5cbiAgICBjYXNlIG1hcFRhZzpcbiAgICAgIHZhciBjb252ZXJ0ID0gbWFwVG9BcnJheTtcblxuICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRztcbiAgICAgIGNvbnZlcnQgfHwgKGNvbnZlcnQgPSBzZXRUb0FycmF5KTtcblxuICAgICAgaWYgKG9iamVjdC5zaXplICE9IG90aGVyLnNpemUgJiYgIWlzUGFydGlhbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICBiaXRtYXNrIHw9IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUc7XG5cbiAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgdmFyIHJlc3VsdCA9IGVxdWFsQXJyYXlzKGNvbnZlcnQob2JqZWN0KSwgY29udmVydChvdGhlciksIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICBpZiAoc3ltYm9sVmFsdWVPZikge1xuICAgICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZi5jYWxsKG9iamVjdCkgPT0gc3ltYm9sVmFsdWVPZi5jYWxsKG90aGVyKTtcbiAgICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGVxdWFsQnlUYWc7XG4iLCIvKipcbiAqIEFwcGVuZHMgdGhlIGVsZW1lbnRzIG9mIGB2YWx1ZXNgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhcHBlbmQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlQdXNoKGFycmF5LCB2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgb2Zmc2V0ID0gYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYXJyYXlbb2Zmc2V0ICsgaW5kZXhdID0gdmFsdWVzW2luZGV4XTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFycmF5UHVzaDtcbiIsImltcG9ydCBhcnJheVB1c2ggZnJvbSAnLi9fYXJyYXlQdXNoLmpzJztcbmltcG9ydCBpc0FycmF5IGZyb20gJy4vaXNBcnJheS5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldEFsbEtleXNgIGFuZCBgZ2V0QWxsS2V5c0luYCB3aGljaCB1c2VzXG4gKiBga2V5c0Z1bmNgIGFuZCBgc3ltYm9sc0Z1bmNgIHRvIGdldCB0aGUgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmRcbiAqIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzeW1ib2xzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzRnVuYywgc3ltYm9sc0Z1bmMpIHtcbiAgdmFyIHJlc3VsdCA9IGtleXNGdW5jKG9iamVjdCk7XG4gIHJldHVybiBpc0FycmF5KG9iamVjdCkgPyByZXN1bHQgOiBhcnJheVB1c2gocmVzdWx0LCBzeW1ib2xzRnVuYyhvYmplY3QpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUdldEFsbEtleXM7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlGaWx0ZXIoYXJyYXksIHByZWRpY2F0ZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFycmF5RmlsdGVyO1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBhcnJheXMgPSBfLnRpbWVzKDIsIF8uc3R1YkFycmF5KTtcbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXMpO1xuICogLy8gPT4gW1tdLCBbXV1cbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXNbMF0gPT09IGFycmF5c1sxXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBzdHViQXJyYXkoKSB7XG4gIHJldHVybiBbXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3R1YkFycmF5O1xuIiwiaW1wb3J0IGFycmF5RmlsdGVyIGZyb20gJy4vX2FycmF5RmlsdGVyLmpzJztcbmltcG9ydCBzdHViQXJyYXkgZnJvbSAnLi9zdHViQXJyYXkuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICovXG52YXIgZ2V0U3ltYm9scyA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgcmV0dXJuIGFycmF5RmlsdGVyKG5hdGl2ZUdldFN5bWJvbHMob2JqZWN0KSwgZnVuY3Rpb24oc3ltYm9sKSB7XG4gICAgcmV0dXJuIHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCBzeW1ib2wpO1xuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGdldFN5bWJvbHM7XG4iLCJpbXBvcnQgYmFzZUdldEFsbEtleXMgZnJvbSAnLi9fYmFzZUdldEFsbEtleXMuanMnO1xuaW1wb3J0IGdldFN5bWJvbHMgZnJvbSAnLi9fZ2V0U3ltYm9scy5qcyc7XG5pbXBvcnQga2V5cyBmcm9tICcuL2tleXMuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2Ygb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGdldEFsbEtleXMob2JqZWN0KSB7XG4gIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXMsIGdldFN5bWJvbHMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRBbGxLZXlzO1xuIiwiaW1wb3J0IGdldEFsbEtleXMgZnJvbSAnLi9fZ2V0QWxsS2V5cy5qcyc7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIG9iamVjdHMgd2l0aCBzdXBwb3J0IGZvclxuICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgIG9ialByb3BzID0gZ2V0QWxsS2V5cyhvYmplY3QpLFxuICAgICAgb2JqTGVuZ3RoID0gb2JqUHJvcHMubGVuZ3RoLFxuICAgICAgb3RoUHJvcHMgPSBnZXRBbGxLZXlzKG90aGVyKSxcbiAgICAgIG90aExlbmd0aCA9IG90aFByb3BzLmxlbmd0aDtcblxuICBpZiAob2JqTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBpbmRleCA9IG9iakxlbmd0aDtcbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICB2YXIga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgIGlmICghKGlzUGFydGlhbCA/IGtleSBpbiBvdGhlciA6IGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsIGtleSkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkge1xuICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICB9XG4gIHZhciByZXN1bHQgPSB0cnVlO1xuICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gIHN0YWNrLnNldChvdGhlciwgb2JqZWN0KTtcblxuICB2YXIgc2tpcEN0b3IgPSBpc1BhcnRpYWw7XG4gIHdoaWxlICgrK2luZGV4IDwgb2JqTGVuZ3RoKSB7XG4gICAga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2tleV07XG5cbiAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgb2JqVmFsdWUsIGtleSwgb3RoZXIsIG9iamVjdCwgc3RhY2spXG4gICAgICAgIDogY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUsIGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBpZiAoIShjb21wYXJlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgPyAob2JqVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhvYmpWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSlcbiAgICAgICAgICA6IGNvbXBhcmVkXG4gICAgICAgICkpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHNraXBDdG9yIHx8IChza2lwQ3RvciA9IGtleSA9PSAnY29uc3RydWN0b3InKTtcbiAgfVxuICBpZiAocmVzdWx0ICYmICFza2lwQ3Rvcikge1xuICAgIHZhciBvYmpDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yLFxuICAgICAgICBvdGhDdG9yID0gb3RoZXIuY29uc3RydWN0b3I7XG5cbiAgICAvLyBOb24gYE9iamVjdGAgb2JqZWN0IGluc3RhbmNlcyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVhbC5cbiAgICBpZiAob2JqQ3RvciAhPSBvdGhDdG9yICYmXG4gICAgICAgICgnY29uc3RydWN0b3InIGluIG9iamVjdCAmJiAnY29uc3RydWN0b3InIGluIG90aGVyKSAmJlxuICAgICAgICAhKHR5cGVvZiBvYmpDdG9yID09ICdmdW5jdGlvbicgJiYgb2JqQ3RvciBpbnN0YW5jZW9mIG9iakN0b3IgJiZcbiAgICAgICAgICB0eXBlb2Ygb3RoQ3RvciA9PSAnZnVuY3Rpb24nICYmIG90aEN0b3IgaW5zdGFuY2VvZiBvdGhDdG9yKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBlcXVhbE9iamVjdHM7XG4iLCJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5pbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIERhdGFWaWV3ID0gZ2V0TmF0aXZlKHJvb3QsICdEYXRhVmlldycpO1xuXG5leHBvcnQgZGVmYXVsdCBEYXRhVmlldztcbiIsImltcG9ydCBnZXROYXRpdmUgZnJvbSAnLi9fZ2V0TmF0aXZlLmpzJztcbmltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgUHJvbWlzZSA9IGdldE5hdGl2ZShyb290LCAnUHJvbWlzZScpO1xuXG5leHBvcnQgZGVmYXVsdCBQcm9taXNlO1xuIiwiaW1wb3J0IGdldE5hdGl2ZSBmcm9tICcuL19nZXROYXRpdmUuanMnO1xuaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBTZXQgPSBnZXROYXRpdmUocm9vdCwgJ1NldCcpO1xuXG5leHBvcnQgZGVmYXVsdCBTZXQ7XG4iLCJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5pbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFdlYWtNYXAgPSBnZXROYXRpdmUocm9vdCwgJ1dlYWtNYXAnKTtcblxuZXhwb3J0IGRlZmF1bHQgV2Vha01hcDtcbiIsImltcG9ydCBEYXRhVmlldyBmcm9tICcuL19EYXRhVmlldy5qcyc7XG5pbXBvcnQgTWFwIGZyb20gJy4vX01hcC5qcyc7XG5pbXBvcnQgUHJvbWlzZSBmcm9tICcuL19Qcm9taXNlLmpzJztcbmltcG9ydCBTZXQgZnJvbSAnLi9fU2V0LmpzJztcbmltcG9ydCBXZWFrTWFwIGZyb20gJy4vX1dlYWtNYXAuanMnO1xuaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgdG9Tb3VyY2UgZnJvbSAnLi9fdG9Tb3VyY2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcHJvbWlzZVRhZyA9ICdbb2JqZWN0IFByb21pc2VdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWFwcywgc2V0cywgYW5kIHdlYWttYXBzLiAqL1xudmFyIGRhdGFWaWV3Q3RvclN0cmluZyA9IHRvU291cmNlKERhdGFWaWV3KSxcbiAgICBtYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoTWFwKSxcbiAgICBwcm9taXNlQ3RvclN0cmluZyA9IHRvU291cmNlKFByb21pc2UpLFxuICAgIHNldEN0b3JTdHJpbmcgPSB0b1NvdXJjZShTZXQpLFxuICAgIHdlYWtNYXBDdG9yU3RyaW5nID0gdG9Tb3VyY2UoV2Vha01hcCk7XG5cbi8qKlxuICogR2V0cyB0aGUgYHRvU3RyaW5nVGFnYCBvZiBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGB0b1N0cmluZ1RhZ2AuXG4gKi9cbnZhciBnZXRUYWcgPSBiYXNlR2V0VGFnO1xuXG4vLyBGYWxsYmFjayBmb3IgZGF0YSB2aWV3cywgbWFwcywgc2V0cywgYW5kIHdlYWsgbWFwcyBpbiBJRSAxMSBhbmQgcHJvbWlzZXMgaW4gTm9kZS5qcyA8IDYuXG5pZiAoKERhdGFWaWV3ICYmIGdldFRhZyhuZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKDEpKSkgIT0gZGF0YVZpZXdUYWcpIHx8XG4gICAgKE1hcCAmJiBnZXRUYWcobmV3IE1hcCkgIT0gbWFwVGFnKSB8fFxuICAgIChQcm9taXNlICYmIGdldFRhZyhQcm9taXNlLnJlc29sdmUoKSkgIT0gcHJvbWlzZVRhZykgfHxcbiAgICAoU2V0ICYmIGdldFRhZyhuZXcgU2V0KSAhPSBzZXRUYWcpIHx8XG4gICAgKFdlYWtNYXAgJiYgZ2V0VGFnKG5ldyBXZWFrTWFwKSAhPSB3ZWFrTWFwVGFnKSkge1xuICBnZXRUYWcgPSBmdW5jdGlvbih2YWx1ZSkge1xuICAgIHZhciByZXN1bHQgPSBiYXNlR2V0VGFnKHZhbHVlKSxcbiAgICAgICAgQ3RvciA9IHJlc3VsdCA9PSBvYmplY3RUYWcgPyB2YWx1ZS5jb25zdHJ1Y3RvciA6IHVuZGVmaW5lZCxcbiAgICAgICAgY3RvclN0cmluZyA9IEN0b3IgPyB0b1NvdXJjZShDdG9yKSA6ICcnO1xuXG4gICAgaWYgKGN0b3JTdHJpbmcpIHtcbiAgICAgIHN3aXRjaCAoY3RvclN0cmluZykge1xuICAgICAgICBjYXNlIGRhdGFWaWV3Q3RvclN0cmluZzogcmV0dXJuIGRhdGFWaWV3VGFnO1xuICAgICAgICBjYXNlIG1hcEN0b3JTdHJpbmc6IHJldHVybiBtYXBUYWc7XG4gICAgICAgIGNhc2UgcHJvbWlzZUN0b3JTdHJpbmc6IHJldHVybiBwcm9taXNlVGFnO1xuICAgICAgICBjYXNlIHNldEN0b3JTdHJpbmc6IHJldHVybiBzZXRUYWc7XG4gICAgICAgIGNhc2Ugd2Vha01hcEN0b3JTdHJpbmc6IHJldHVybiB3ZWFrTWFwVGFnO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRUYWc7XG4iLCJpbXBvcnQgU3RhY2sgZnJvbSAnLi9fU3RhY2suanMnO1xuaW1wb3J0IGVxdWFsQXJyYXlzIGZyb20gJy4vX2VxdWFsQXJyYXlzLmpzJztcbmltcG9ydCBlcXVhbEJ5VGFnIGZyb20gJy4vX2VxdWFsQnlUYWcuanMnO1xuaW1wb3J0IGVxdWFsT2JqZWN0cyBmcm9tICcuL19lcXVhbE9iamVjdHMuanMnO1xuaW1wb3J0IGdldFRhZyBmcm9tICcuL19nZXRUYWcuanMnO1xuaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi9pc0FycmF5LmpzJztcbmltcG9ydCBpc0J1ZmZlciBmcm9tICcuL2lzQnVmZmVyLmpzJztcbmltcG9ydCBpc1R5cGVkQXJyYXkgZnJvbSAnLi9pc1R5cGVkQXJyYXkuanMnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDE7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAqIGRlZXAgY29tcGFyaXNvbnMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAqIHJlZmVyZW5jZXMgdG8gYmUgY29tcGFyZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsRGVlcChvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBvYmpJc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgIG90aElzQXJyID0gaXNBcnJheShvdGhlciksXG4gICAgICBvYmpUYWcgPSBvYmpJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG9iamVjdCksXG4gICAgICBvdGhUYWcgPSBvdGhJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG90aGVyKTtcblxuICBvYmpUYWcgPSBvYmpUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG9ialRhZztcbiAgb3RoVGFnID0gb3RoVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvdGhUYWc7XG5cbiAgdmFyIG9iaklzT2JqID0gb2JqVGFnID09IG9iamVjdFRhZyxcbiAgICAgIG90aElzT2JqID0gb3RoVGFnID09IG9iamVjdFRhZyxcbiAgICAgIGlzU2FtZVRhZyA9IG9ialRhZyA9PSBvdGhUYWc7XG5cbiAgaWYgKGlzU2FtZVRhZyAmJiBpc0J1ZmZlcihvYmplY3QpKSB7XG4gICAgaWYgKCFpc0J1ZmZlcihvdGhlcikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgb2JqSXNBcnIgPSB0cnVlO1xuICAgIG9iaklzT2JqID0gZmFsc2U7XG4gIH1cbiAgaWYgKGlzU2FtZVRhZyAmJiAhb2JqSXNPYmopIHtcbiAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgIHJldHVybiAob2JqSXNBcnIgfHwgaXNUeXBlZEFycmF5KG9iamVjdCkpXG4gICAgICA/IGVxdWFsQXJyYXlzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spXG4gICAgICA6IGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgb2JqVGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgfVxuICBpZiAoIShiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcpKSB7XG4gICAgdmFyIG9iaklzV3JhcHBlZCA9IG9iaklzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCAnX193cmFwcGVkX18nKSxcbiAgICAgICAgb3RoSXNXcmFwcGVkID0gb3RoSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG5cbiAgICBpZiAob2JqSXNXcmFwcGVkIHx8IG90aElzV3JhcHBlZCkge1xuICAgICAgdmFyIG9ialVud3JhcHBlZCA9IG9iaklzV3JhcHBlZCA/IG9iamVjdC52YWx1ZSgpIDogb2JqZWN0LFxuICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjtcblxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHJldHVybiBlcXVhbEZ1bmMob2JqVW53cmFwcGVkLCBvdGhVbndyYXBwZWQsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFpc1NhbWVUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgcmV0dXJuIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUlzRXF1YWxEZWVwO1xuIiwiaW1wb3J0IGJhc2VJc0VxdWFsRGVlcCBmcm9tICcuL19iYXNlSXNFcXVhbERlZXAuanMnO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tICcuL2lzT2JqZWN0TGlrZS5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNFcXVhbGAgd2hpY2ggc3VwcG9ydHMgcGFydGlhbCBjb21wYXJpc29uc1xuICogYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gKiAgMSAtIFVub3JkZXJlZCBjb21wYXJpc29uXG4gKiAgMiAtIFBhcnRpYWwgY29tcGFyaXNvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgaWYgKHZhbHVlID09PSBvdGhlcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsIHx8IG90aGVyID09IG51bGwgfHwgKCFpc09iamVjdExpa2UodmFsdWUpICYmICFpc09iamVjdExpa2Uob3RoZXIpKSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyO1xuICB9XG4gIHJldHVybiBiYXNlSXNFcXVhbERlZXAodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBiYXNlSXNFcXVhbCwgc3RhY2spO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXNFcXVhbDtcbiIsImltcG9ydCBTdGFjayBmcm9tICcuL19TdGFjay5qcyc7XG5pbXBvcnQgYmFzZUlzRXF1YWwgZnJvbSAnLi9fYmFzZUlzRXF1YWwuanMnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXRjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gKiBAcGFyYW0ge0FycmF5fSBtYXRjaERhdGEgVGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIHRvIG1hdGNoLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhLCBjdXN0b21pemVyKSB7XG4gIHZhciBpbmRleCA9IG1hdGNoRGF0YS5sZW5ndGgsXG4gICAgICBsZW5ndGggPSBpbmRleCxcbiAgICAgIG5vQ3VzdG9taXplciA9ICFjdXN0b21pemVyO1xuXG4gIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgIHJldHVybiAhbGVuZ3RoO1xuICB9XG4gIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIHZhciBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICBpZiAoKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKVxuICAgICAgICAgID8gZGF0YVsxXSAhPT0gb2JqZWN0W2RhdGFbMF1dXG4gICAgICAgICAgOiAhKGRhdGFbMF0gaW4gb2JqZWN0KVxuICAgICAgICApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICB2YXIga2V5ID0gZGF0YVswXSxcbiAgICAgICAgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgc3JjVmFsdWUgPSBkYXRhWzFdO1xuXG4gICAgaWYgKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKSB7XG4gICAgICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHN0YWNrID0gbmV3IFN0YWNrO1xuICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjayk7XG4gICAgICB9XG4gICAgICBpZiAoIShyZXN1bHQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICA6IHJlc3VsdFxuICAgICAgICAgICkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUlzTWF0Y2g7XG4iLCJpbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpZiBzdWl0YWJsZSBmb3Igc3RyaWN0XG4gKiAgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgJiYgIWlzT2JqZWN0KHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNTdHJpY3RDb21wYXJhYmxlO1xuIiwiaW1wb3J0IGlzU3RyaWN0Q29tcGFyYWJsZSBmcm9tICcuL19pc1N0cmljdENvbXBhcmFibGUuanMnO1xuaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBtYXRjaCBkYXRhIG9mIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBnZXRNYXRjaERhdGEob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSBrZXlzKG9iamVjdCksXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIHZhciBrZXkgPSByZXN1bHRbbGVuZ3RoXSxcbiAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgIHJlc3VsdFtsZW5ndGhdID0gW2tleSwgdmFsdWUsIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSldO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldE1hdGNoRGF0YTtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBtYXRjaGVzUHJvcGVydHlgIGZvciBzb3VyY2UgdmFsdWVzIHN1aXRhYmxlXG4gKiBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUoa2V5LCBzcmNWYWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Rba2V5XSA9PT0gc3JjVmFsdWUgJiZcbiAgICAgIChzcmNWYWx1ZSAhPT0gdW5kZWZpbmVkIHx8IChrZXkgaW4gT2JqZWN0KG9iamVjdCkpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWF0Y2hlc1N0cmljdENvbXBhcmFibGU7XG4iLCJpbXBvcnQgYmFzZUlzTWF0Y2ggZnJvbSAnLi9fYmFzZUlzTWF0Y2guanMnO1xuaW1wb3J0IGdldE1hdGNoRGF0YSBmcm9tICcuL19nZXRNYXRjaERhdGEuanMnO1xuaW1wb3J0IG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlIGZyb20gJy4vX21hdGNoZXNTdHJpY3RDb21wYXJhYmxlLmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzYCB3aGljaCBkb2Vzbid0IGNsb25lIGBzb3VyY2VgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZU1hdGNoZXMoc291cmNlKSB7XG4gIHZhciBtYXRjaERhdGEgPSBnZXRNYXRjaERhdGEoc291cmNlKTtcbiAgaWYgKG1hdGNoRGF0YS5sZW5ndGggPT0gMSAmJiBtYXRjaERhdGFbMF1bMl0pIHtcbiAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUobWF0Y2hEYXRhWzBdWzBdLCBtYXRjaERhdGFbMF1bMV0pO1xuICB9XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VNYXRjaGVzO1xuIiwiaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi9pc0FycmF5LmpzJztcbmltcG9ydCBpc1N5bWJvbCBmcm9tICcuL2lzU3ltYm9sLmpzJztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggcHJvcGVydHkgbmFtZXMgd2l0aGluIHByb3BlcnR5IHBhdGhzLiAqL1xudmFyIHJlSXNEZWVwUHJvcCA9IC9cXC58XFxbKD86W15bXFxdXSp8KFtcIiddKSg/Oig/IVxcMSlbXlxcXFxdfFxcXFwuKSo/XFwxKVxcXS8sXG4gICAgcmVJc1BsYWluUHJvcCA9IC9eXFx3KiQvO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSBhbmQgbm90IGEgcHJvcGVydHkgcGF0aC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzS2V5KHZhbHVlLCBvYmplY3QpIHtcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICBpZiAodHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nIHx8XG4gICAgICB2YWx1ZSA9PSBudWxsIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHJldHVybiByZUlzUGxhaW5Qcm9wLnRlc3QodmFsdWUpIHx8ICFyZUlzRGVlcFByb3AudGVzdCh2YWx1ZSkgfHxcbiAgICAob2JqZWN0ICE9IG51bGwgJiYgdmFsdWUgaW4gT2JqZWN0KG9iamVjdCkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0tleTtcbiIsImltcG9ydCBNYXBDYWNoZSBmcm9tICcuL19NYXBDYWNoZS5qcyc7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAqIHByb3ZpZGVkLCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICogcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uIGlzIHVzZWQgYXMgdGhlIG1hcCBjYWNoZSBrZXkuIFRoZSBgZnVuY2BcbiAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICpcbiAqICoqTm90ZToqKiBUaGUgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWRcbiAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAqIFtgTWFwYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcHJvcGVydGllcy1vZi10aGUtbWFwLXByb3RvdHlwZS1vYmplY3QpXG4gKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBjbGVhcmAsIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICogdmFyIG90aGVyID0geyAnYyc6IDMsICdkJzogNCB9O1xuICpcbiAqIHZhciB2YWx1ZXMgPSBfLm1lbW9pemUoXy52YWx1ZXMpO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiB2YWx1ZXMob3RoZXIpO1xuICogLy8gPT4gWzMsIDRdXG4gKlxuICogb2JqZWN0LmEgPSAyO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAqIHZhbHVlcy5jYWNoZS5zZXQob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWydhJywgJ2InXVxuICpcbiAqIC8vIFJlcGxhY2UgYF8ubWVtb2l6ZS5DYWNoZWAuXG4gKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICovXG5mdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpIHx8IGNhY2hlO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG4vLyBFeHBvc2UgYE1hcENhY2hlYC5cbm1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZTtcbiIsImltcG9ydCBtZW1vaXplIGZyb20gJy4vbWVtb2l6ZS5qcyc7XG5cbi8qKiBVc2VkIGFzIHRoZSBtYXhpbXVtIG1lbW9pemUgY2FjaGUgc2l6ZS4gKi9cbnZhciBNQVhfTUVNT0laRV9TSVpFID0gNTAwO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tZW1vaXplYCB3aGljaCBjbGVhcnMgdGhlIG1lbW9pemVkIGZ1bmN0aW9uJ3NcbiAqIGNhY2hlIHdoZW4gaXQgZXhjZWVkcyBgTUFYX01FTU9JWkVfU0laRWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBtZW1vaXplQ2FwcGVkKGZ1bmMpIHtcbiAgdmFyIHJlc3VsdCA9IG1lbW9pemUoZnVuYywgZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKGNhY2hlLnNpemUgPT09IE1BWF9NRU1PSVpFX1NJWkUpIHtcbiAgICAgIGNhY2hlLmNsZWFyKCk7XG4gICAgfVxuICAgIHJldHVybiBrZXk7XG4gIH0pO1xuXG4gIHZhciBjYWNoZSA9IHJlc3VsdC5jYWNoZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZUNhcHBlZDtcbiIsImltcG9ydCBtZW1vaXplQ2FwcGVkIGZyb20gJy4vX21lbW9pemVDYXBwZWQuanMnO1xuXG4vKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVQcm9wTmFtZSA9IC9bXi5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwkKSkvZztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggYmFja3NsYXNoZXMgaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVFc2NhcGVDaGFyID0gL1xcXFwoXFxcXCk/L2c7XG5cbi8qKlxuICogQ29udmVydHMgYHN0cmluZ2AgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqL1xudmFyIHN0cmluZ1RvUGF0aCA9IG1lbW9pemVDYXBwZWQoZnVuY3Rpb24oc3RyaW5nKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgaWYgKHN0cmluZy5jaGFyQ29kZUF0KDApID09PSA0NiAvKiAuICovKSB7XG4gICAgcmVzdWx0LnB1c2goJycpO1xuICB9XG4gIHN0cmluZy5yZXBsYWNlKHJlUHJvcE5hbWUsIGZ1bmN0aW9uKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdWJTdHJpbmcpIHtcbiAgICByZXN1bHQucHVzaChxdW90ZSA/IHN1YlN0cmluZy5yZXBsYWNlKHJlRXNjYXBlQ2hhciwgJyQxJykgOiAobnVtYmVyIHx8IG1hdGNoKSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHN0cmluZ1RvUGF0aDtcbiIsImltcG9ydCBpc0FycmF5IGZyb20gJy4vaXNBcnJheS5qcyc7XG5pbXBvcnQgaXNLZXkgZnJvbSAnLi9faXNLZXkuanMnO1xuaW1wb3J0IHN0cmluZ1RvUGF0aCBmcm9tICcuL19zdHJpbmdUb1BhdGguanMnO1xuaW1wb3J0IHRvU3RyaW5nIGZyb20gJy4vdG9TdHJpbmcuanMnO1xuXG4vKipcbiAqIENhc3RzIGB2YWx1ZWAgdG8gYSBwYXRoIGFycmF5IGlmIGl0J3Mgbm90IG9uZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNhc3QgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gY2FzdFBhdGgodmFsdWUsIG9iamVjdCkge1xuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIGlzS2V5KHZhbHVlLCBvYmplY3QpID8gW3ZhbHVlXSA6IHN0cmluZ1RvUGF0aCh0b1N0cmluZyh2YWx1ZSkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjYXN0UGF0aDtcbiIsImltcG9ydCBpc1N5bWJvbCBmcm9tICcuL2lzU3ltYm9sLmpzJztcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIGtleSBpZiBpdCdzIG5vdCBhIHN0cmluZyBvciBzeW1ib2wuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7c3RyaW5nfHN5bWJvbH0gUmV0dXJucyB0aGUga2V5LlxuICovXG5mdW5jdGlvbiB0b0tleSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRvS2V5O1xuIiwiaW1wb3J0IGNhc3RQYXRoIGZyb20gJy4vX2Nhc3RQYXRoLmpzJztcbmltcG9ydCB0b0tleSBmcm9tICcuL190b0tleS5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZ2V0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZmF1bHQgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0KG9iamVjdCwgcGF0aCkge1xuICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICB2YXIgaW5kZXggPSAwLFxuICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgd2hpbGUgKG9iamVjdCAhPSBudWxsICYmIGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgb2JqZWN0ID0gb2JqZWN0W3RvS2V5KHBhdGhbaW5kZXgrK10pXTtcbiAgfVxuICByZXR1cm4gKGluZGV4ICYmIGluZGV4ID09IGxlbmd0aCkgPyBvYmplY3QgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VHZXQ7XG4iLCJpbXBvcnQgYmFzZUdldCBmcm9tICcuL19iYXNlR2V0LmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuIElmIHRoZSByZXNvbHZlZCB2YWx1ZSBpc1xuICogYHVuZGVmaW5lZGAsIHRoZSBgZGVmYXVsdFZhbHVlYCBpcyByZXR1cm5lZCBpbiBpdHMgcGxhY2UuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjcuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGZvciBgdW5kZWZpbmVkYCByZXNvbHZlZCB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gKlxuICogXy5nZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLmdldChvYmplY3QsIFsnYScsICcwJywgJ2InLCAnYyddKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLmdldChvYmplY3QsICdhLmIuYycsICdkZWZhdWx0Jyk7XG4gKiAvLyA9PiAnZGVmYXVsdCdcbiAqL1xuZnVuY3Rpb24gZ2V0KG9iamVjdCwgcGF0aCwgZGVmYXVsdFZhbHVlKSB7XG4gIHZhciByZXN1bHQgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFZhbHVlIDogcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXQ7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc0luYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGtleSBUaGUga2V5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSGFzSW4ob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGtleSBpbiBPYmplY3Qob2JqZWN0KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUhhc0luO1xuIiwiaW1wb3J0IGNhc3RQYXRoIGZyb20gJy4vX2Nhc3RQYXRoLmpzJztcbmltcG9ydCBpc0FyZ3VtZW50cyBmcm9tICcuL2lzQXJndW1lbnRzLmpzJztcbmltcG9ydCBpc0FycmF5IGZyb20gJy4vaXNBcnJheS5qcyc7XG5pbXBvcnQgaXNJbmRleCBmcm9tICcuL19pc0luZGV4LmpzJztcbmltcG9ydCBpc0xlbmd0aCBmcm9tICcuL2lzTGVuZ3RoLmpzJztcbmltcG9ydCB0b0tleSBmcm9tICcuL190b0tleS5qcyc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBwYXRoYCBleGlzdHMgb24gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFzRnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2sgcHJvcGVydGllcy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBoYXNGdW5jKSB7XG4gIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBmYWxzZTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSk7XG4gICAgaWYgKCEocmVzdWx0ID0gb2JqZWN0ICE9IG51bGwgJiYgaGFzRnVuYyhvYmplY3QsIGtleSkpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgb2JqZWN0ID0gb2JqZWN0W2tleV07XG4gIH1cbiAgaWYgKHJlc3VsdCB8fCArK2luZGV4ICE9IGxlbmd0aCkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgbGVuZ3RoID0gb2JqZWN0ID09IG51bGwgPyAwIDogb2JqZWN0Lmxlbmd0aDtcbiAgcmV0dXJuICEhbGVuZ3RoICYmIGlzTGVuZ3RoKGxlbmd0aCkgJiYgaXNJbmRleChrZXksIGxlbmd0aCkgJiZcbiAgICAoaXNBcnJheShvYmplY3QpIHx8IGlzQXJndW1lbnRzKG9iamVjdCkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBoYXNQYXRoO1xuIiwiaW1wb3J0IGJhc2VIYXNJbiBmcm9tICcuL19iYXNlSGFzSW4uanMnO1xuaW1wb3J0IGhhc1BhdGggZnJvbSAnLi9faGFzUGF0aC5qcyc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBwYXRoYCBpcyBhIGRpcmVjdCBvciBpbmhlcml0ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0gXy5jcmVhdGUoeyAnYSc6IF8uY3JlYXRlKHsgJ2InOiAyIH0pIH0pO1xuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCAnYS5iJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXNJbihvYmplY3QsIFsnYScsICdiJ10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCAnYicpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaGFzSW4ob2JqZWN0LCBwYXRoKSB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhc0luKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzSW47XG4iLCJpbXBvcnQgYmFzZUlzRXF1YWwgZnJvbSAnLi9fYmFzZUlzRXF1YWwuanMnO1xuaW1wb3J0IGdldCBmcm9tICcuL2dldC5qcyc7XG5pbXBvcnQgaGFzSW4gZnJvbSAnLi9oYXNJbi5qcyc7XG5pbXBvcnQgaXNLZXkgZnJvbSAnLi9faXNLZXkuanMnO1xuaW1wb3J0IGlzU3RyaWN0Q29tcGFyYWJsZSBmcm9tICcuL19pc1N0cmljdENvbXBhcmFibGUuanMnO1xuaW1wb3J0IG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlIGZyb20gJy4vX21hdGNoZXNTdHJpY3RDb21wYXJhYmxlLmpzJztcbmltcG9ydCB0b0tleSBmcm9tICcuL190b0tleS5qcyc7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzUHJvcGVydHlgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNyY1ZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZU1hdGNoZXNQcm9wZXJ0eShwYXRoLCBzcmNWYWx1ZSkge1xuICBpZiAoaXNLZXkocGF0aCkgJiYgaXNTdHJpY3RDb21wYXJhYmxlKHNyY1ZhbHVlKSkge1xuICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSh0b0tleShwYXRoKSwgc3JjVmFsdWUpO1xuICB9XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIgb2JqVmFsdWUgPSBnZXQob2JqZWN0LCBwYXRoKTtcbiAgICByZXR1cm4gKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgb2JqVmFsdWUgPT09IHNyY1ZhbHVlKVxuICAgICAgPyBoYXNJbihvYmplY3QsIHBhdGgpXG4gICAgICA6IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZU1hdGNoZXNQcm9wZXJ0eTtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ucHJvcGVydHlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVByb3BlcnR5KGtleSkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VQcm9wZXJ0eTtcbiIsImltcG9ydCBiYXNlR2V0IGZyb20gJy4vX2Jhc2VHZXQuanMnO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZVByb3BlcnR5YCB3aGljaCBzdXBwb3J0cyBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VQcm9wZXJ0eURlZXAocGF0aCkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgcmV0dXJuIGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZVByb3BlcnR5RGVlcDtcbiIsImltcG9ydCBiYXNlUHJvcGVydHkgZnJvbSAnLi9fYmFzZVByb3BlcnR5LmpzJztcbmltcG9ydCBiYXNlUHJvcGVydHlEZWVwIGZyb20gJy4vX2Jhc2VQcm9wZXJ0eURlZXAuanMnO1xuaW1wb3J0IGlzS2V5IGZyb20gJy4vX2lzS2V5LmpzJztcbmltcG9ydCB0b0tleSBmcm9tICcuL190b0tleS5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGUgdmFsdWUgYXQgYHBhdGhgIG9mIGEgZ2l2ZW4gb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3RzID0gW1xuICogICB7ICdhJzogeyAnYic6IDIgfSB9LFxuICogICB7ICdhJzogeyAnYic6IDEgfSB9XG4gKiBdO1xuICpcbiAqIF8ubWFwKG9iamVjdHMsIF8ucHJvcGVydHkoJ2EuYicpKTtcbiAqIC8vID0+IFsyLCAxXVxuICpcbiAqIF8ubWFwKF8uc29ydEJ5KG9iamVjdHMsIF8ucHJvcGVydHkoWydhJywgJ2InXSkpLCAnYS5iJyk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqL1xuZnVuY3Rpb24gcHJvcGVydHkocGF0aCkge1xuICByZXR1cm4gaXNLZXkocGF0aCkgPyBiYXNlUHJvcGVydHkodG9LZXkocGF0aCkpIDogYmFzZVByb3BlcnR5RGVlcChwYXRoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcHJvcGVydHk7XG4iLCJpbXBvcnQgYmFzZU1hdGNoZXMgZnJvbSAnLi9fYmFzZU1hdGNoZXMuanMnO1xuaW1wb3J0IGJhc2VNYXRjaGVzUHJvcGVydHkgZnJvbSAnLi9fYmFzZU1hdGNoZXNQcm9wZXJ0eS5qcyc7XG5pbXBvcnQgaWRlbnRpdHkgZnJvbSAnLi9pZGVudGl0eS5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IHByb3BlcnR5IGZyb20gJy4vcHJvcGVydHkuanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLml0ZXJhdGVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSBbdmFsdWU9Xy5pZGVudGl0eV0gVGhlIHZhbHVlIHRvIGNvbnZlcnQgdG8gYW4gaXRlcmF0ZWUuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIGl0ZXJhdGVlLlxuICovXG5mdW5jdGlvbiBiYXNlSXRlcmF0ZWUodmFsdWUpIHtcbiAgLy8gRG9uJ3Qgc3RvcmUgdGhlIGB0eXBlb2ZgIHJlc3VsdCBpbiBhIHZhcmlhYmxlIHRvIGF2b2lkIGEgSklUIGJ1ZyBpbiBTYWZhcmkgOS5cbiAgLy8gU2VlIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xNTYwMzQgZm9yIG1vcmUgZGV0YWlscy5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnZnVuY3Rpb24nKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIGlkZW50aXR5O1xuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gaXNBcnJheSh2YWx1ZSlcbiAgICAgID8gYmFzZU1hdGNoZXNQcm9wZXJ0eSh2YWx1ZVswXSwgdmFsdWVbMV0pXG4gICAgICA6IGJhc2VNYXRjaGVzKHZhbHVlKTtcbiAgfVxuICByZXR1cm4gcHJvcGVydHkodmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXRlcmF0ZWU7XG4iLCJpbXBvcnQgYmFzZUVhY2ggZnJvbSAnLi9fYmFzZUVhY2guanMnO1xuaW1wb3J0IGlzQXJyYXlMaWtlIGZyb20gJy4vaXNBcnJheUxpa2UuanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hcGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBiYXNlTWFwKGNvbGxlY3Rpb24sIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gaXNBcnJheUxpa2UoY29sbGVjdGlvbikgPyBBcnJheShjb2xsZWN0aW9uLmxlbmd0aCkgOiBbXTtcblxuICBiYXNlRWFjaChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gaXRlcmF0ZWUodmFsdWUsIGtleSwgY29sbGVjdGlvbik7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlTWFwO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5zb3J0QnlgIHdoaWNoIHVzZXMgYGNvbXBhcmVyYCB0byBkZWZpbmUgdGhlXG4gKiBzb3J0IG9yZGVyIG9mIGBhcnJheWAgYW5kIHJlcGxhY2VzIGNyaXRlcmlhIG9iamVjdHMgd2l0aCB0aGVpciBjb3JyZXNwb25kaW5nXG4gKiB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzb3J0LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY29tcGFyZXIgVGhlIGZ1bmN0aW9uIHRvIGRlZmluZSBzb3J0IG9yZGVyLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VTb3J0QnkoYXJyYXksIGNvbXBhcmVyKSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgYXJyYXkuc29ydChjb21wYXJlcik7XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGFycmF5W2xlbmd0aF0gPSBhcnJheVtsZW5ndGhdLnZhbHVlO1xuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZVNvcnRCeTtcbiIsImltcG9ydCBpc1N5bWJvbCBmcm9tICcuL2lzU3ltYm9sLmpzJztcblxuLyoqXG4gKiBDb21wYXJlcyB2YWx1ZXMgdG8gc29ydCB0aGVtIGluIGFzY2VuZGluZyBvcmRlci5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzb3J0IG9yZGVyIGluZGljYXRvciBmb3IgYHZhbHVlYC5cbiAqL1xuZnVuY3Rpb24gY29tcGFyZUFzY2VuZGluZyh2YWx1ZSwgb3RoZXIpIHtcbiAgaWYgKHZhbHVlICE9PSBvdGhlcikge1xuICAgIHZhciB2YWxJc0RlZmluZWQgPSB2YWx1ZSAhPT0gdW5kZWZpbmVkLFxuICAgICAgICB2YWxJc051bGwgPSB2YWx1ZSA9PT0gbnVsbCxcbiAgICAgICAgdmFsSXNSZWZsZXhpdmUgPSB2YWx1ZSA9PT0gdmFsdWUsXG4gICAgICAgIHZhbElzU3ltYm9sID0gaXNTeW1ib2wodmFsdWUpO1xuXG4gICAgdmFyIG90aElzRGVmaW5lZCA9IG90aGVyICE9PSB1bmRlZmluZWQsXG4gICAgICAgIG90aElzTnVsbCA9IG90aGVyID09PSBudWxsLFxuICAgICAgICBvdGhJc1JlZmxleGl2ZSA9IG90aGVyID09PSBvdGhlcixcbiAgICAgICAgb3RoSXNTeW1ib2wgPSBpc1N5bWJvbChvdGhlcik7XG5cbiAgICBpZiAoKCFvdGhJc051bGwgJiYgIW90aElzU3ltYm9sICYmICF2YWxJc1N5bWJvbCAmJiB2YWx1ZSA+IG90aGVyKSB8fFxuICAgICAgICAodmFsSXNTeW1ib2wgJiYgb3RoSXNEZWZpbmVkICYmIG90aElzUmVmbGV4aXZlICYmICFvdGhJc051bGwgJiYgIW90aElzU3ltYm9sKSB8fFxuICAgICAgICAodmFsSXNOdWxsICYmIG90aElzRGVmaW5lZCAmJiBvdGhJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgKCF2YWxJc0RlZmluZWQgJiYgb3RoSXNSZWZsZXhpdmUpIHx8XG4gICAgICAgICF2YWxJc1JlZmxleGl2ZSkge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfVxuICAgIGlmICgoIXZhbElzTnVsbCAmJiAhdmFsSXNTeW1ib2wgJiYgIW90aElzU3ltYm9sICYmIHZhbHVlIDwgb3RoZXIpIHx8XG4gICAgICAgIChvdGhJc1N5bWJvbCAmJiB2YWxJc0RlZmluZWQgJiYgdmFsSXNSZWZsZXhpdmUgJiYgIXZhbElzTnVsbCAmJiAhdmFsSXNTeW1ib2wpIHx8XG4gICAgICAgIChvdGhJc051bGwgJiYgdmFsSXNEZWZpbmVkICYmIHZhbElzUmVmbGV4aXZlKSB8fFxuICAgICAgICAoIW90aElzRGVmaW5lZCAmJiB2YWxJc1JlZmxleGl2ZSkgfHxcbiAgICAgICAgIW90aElzUmVmbGV4aXZlKSB7XG4gICAgICByZXR1cm4gLTE7XG4gICAgfVxuICB9XG4gIHJldHVybiAwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjb21wYXJlQXNjZW5kaW5nO1xuIiwiaW1wb3J0IGNvbXBhcmVBc2NlbmRpbmcgZnJvbSAnLi9fY29tcGFyZUFzY2VuZGluZy5qcyc7XG5cbi8qKlxuICogVXNlZCBieSBgXy5vcmRlckJ5YCB0byBjb21wYXJlIG11bHRpcGxlIHByb3BlcnRpZXMgb2YgYSB2YWx1ZSB0byBhbm90aGVyXG4gKiBhbmQgc3RhYmxlIHNvcnQgdGhlbS5cbiAqXG4gKiBJZiBgb3JkZXJzYCBpcyB1bnNwZWNpZmllZCwgYWxsIHZhbHVlcyBhcmUgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlci4gT3RoZXJ3aXNlLFxuICogc3BlY2lmeSBhbiBvcmRlciBvZiBcImRlc2NcIiBmb3IgZGVzY2VuZGluZyBvciBcImFzY1wiIGZvciBhc2NlbmRpbmcgc29ydCBvcmRlclxuICogb2YgY29ycmVzcG9uZGluZyB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbltdfHN0cmluZ1tdfSBvcmRlcnMgVGhlIG9yZGVyIHRvIHNvcnQgYnkgZm9yIGVhY2ggcHJvcGVydHkuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBzb3J0IG9yZGVyIGluZGljYXRvciBmb3IgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGNvbXBhcmVNdWx0aXBsZShvYmplY3QsIG90aGVyLCBvcmRlcnMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBvYmpDcml0ZXJpYSA9IG9iamVjdC5jcml0ZXJpYSxcbiAgICAgIG90aENyaXRlcmlhID0gb3RoZXIuY3JpdGVyaWEsXG4gICAgICBsZW5ndGggPSBvYmpDcml0ZXJpYS5sZW5ndGgsXG4gICAgICBvcmRlcnNMZW5ndGggPSBvcmRlcnMubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIHJlc3VsdCA9IGNvbXBhcmVBc2NlbmRpbmcob2JqQ3JpdGVyaWFbaW5kZXhdLCBvdGhDcml0ZXJpYVtpbmRleF0pO1xuICAgIGlmIChyZXN1bHQpIHtcbiAgICAgIGlmIChpbmRleCA+PSBvcmRlcnNMZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgIH1cbiAgICAgIHZhciBvcmRlciA9IG9yZGVyc1tpbmRleF07XG4gICAgICByZXR1cm4gcmVzdWx0ICogKG9yZGVyID09ICdkZXNjJyA/IC0xIDogMSk7XG4gICAgfVxuICB9XG4gIC8vIEZpeGVzIGFuIGBBcnJheSNzb3J0YCBidWcgaW4gdGhlIEpTIGVuZ2luZSBlbWJlZGRlZCBpbiBBZG9iZSBhcHBsaWNhdGlvbnNcbiAgLy8gdGhhdCBjYXVzZXMgaXQsIHVuZGVyIGNlcnRhaW4gY2lyY3Vtc3RhbmNlcywgdG8gcHJvdmlkZSB0aGUgc2FtZSB2YWx1ZSBmb3JcbiAgLy8gYG9iamVjdGAgYW5kIGBvdGhlcmAuIFNlZSBodHRwczovL2dpdGh1Yi5jb20vamFzaGtlbmFzL3VuZGVyc2NvcmUvcHVsbC8xMjQ3XG4gIC8vIGZvciBtb3JlIGRldGFpbHMuXG4gIC8vXG4gIC8vIFRoaXMgYWxzbyBlbnN1cmVzIGEgc3RhYmxlIHNvcnQgaW4gVjggYW5kIG90aGVyIGVuZ2luZXMuXG4gIC8vIFNlZSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD05MCBmb3IgbW9yZSBkZXRhaWxzLlxuICByZXR1cm4gb2JqZWN0LmluZGV4IC0gb3RoZXIuaW5kZXg7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBhcmVNdWx0aXBsZTtcbiIsImltcG9ydCBhcnJheU1hcCBmcm9tICcuL19hcnJheU1hcC5qcyc7XG5pbXBvcnQgYmFzZUl0ZXJhdGVlIGZyb20gJy4vX2Jhc2VJdGVyYXRlZS5qcyc7XG5pbXBvcnQgYmFzZU1hcCBmcm9tICcuL19iYXNlTWFwLmpzJztcbmltcG9ydCBiYXNlU29ydEJ5IGZyb20gJy4vX2Jhc2VTb3J0QnkuanMnO1xuaW1wb3J0IGJhc2VVbmFyeSBmcm9tICcuL19iYXNlVW5hcnkuanMnO1xuaW1wb3J0IGNvbXBhcmVNdWx0aXBsZSBmcm9tICcuL19jb21wYXJlTXVsdGlwbGUuanMnO1xuaW1wb3J0IGlkZW50aXR5IGZyb20gJy4vaWRlbnRpdHkuanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm9yZGVyQnlgIHdpdGhvdXQgcGFyYW0gZ3VhcmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gY29sbGVjdGlvbiBUaGUgY29sbGVjdGlvbiB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9uW118T2JqZWN0W118c3RyaW5nW119IGl0ZXJhdGVlcyBUaGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBvcmRlcnMgVGhlIHNvcnQgb3JkZXJzIG9mIGBpdGVyYXRlZXNgLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgc29ydGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBiYXNlT3JkZXJCeShjb2xsZWN0aW9uLCBpdGVyYXRlZXMsIG9yZGVycykge1xuICB2YXIgaW5kZXggPSAtMTtcbiAgaXRlcmF0ZWVzID0gYXJyYXlNYXAoaXRlcmF0ZWVzLmxlbmd0aCA/IGl0ZXJhdGVlcyA6IFtpZGVudGl0eV0sIGJhc2VVbmFyeShiYXNlSXRlcmF0ZWUpKTtcblxuICB2YXIgcmVzdWx0ID0gYmFzZU1hcChjb2xsZWN0aW9uLCBmdW5jdGlvbih2YWx1ZSwga2V5LCBjb2xsZWN0aW9uKSB7XG4gICAgdmFyIGNyaXRlcmlhID0gYXJyYXlNYXAoaXRlcmF0ZWVzLCBmdW5jdGlvbihpdGVyYXRlZSkge1xuICAgICAgcmV0dXJuIGl0ZXJhdGVlKHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4geyAnY3JpdGVyaWEnOiBjcml0ZXJpYSwgJ2luZGV4JzogKytpbmRleCwgJ3ZhbHVlJzogdmFsdWUgfTtcbiAgfSk7XG5cbiAgcmV0dXJuIGJhc2VTb3J0QnkocmVzdWx0LCBmdW5jdGlvbihvYmplY3QsIG90aGVyKSB7XG4gICAgcmV0dXJuIGNvbXBhcmVNdWx0aXBsZShvYmplY3QsIG90aGVyLCBvcmRlcnMpO1xuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZU9yZGVyQnk7XG4iLCJpbXBvcnQgYmFzZU9yZGVyQnkgZnJvbSAnLi9fYmFzZU9yZGVyQnkuanMnO1xuaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi9pc0FycmF5LmpzJztcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLnNvcnRCeWAgZXhjZXB0IHRoYXQgaXQgYWxsb3dzIHNwZWNpZnlpbmcgdGhlIHNvcnRcbiAqIG9yZGVycyBvZiB0aGUgaXRlcmF0ZWVzIHRvIHNvcnQgYnkuIElmIGBvcmRlcnNgIGlzIHVuc3BlY2lmaWVkLCBhbGwgdmFsdWVzXG4gKiBhcmUgc29ydGVkIGluIGFzY2VuZGluZyBvcmRlci4gT3RoZXJ3aXNlLCBzcGVjaWZ5IGFuIG9yZGVyIG9mIFwiZGVzY1wiIGZvclxuICogZGVzY2VuZGluZyBvciBcImFzY1wiIGZvciBhc2NlbmRpbmcgc29ydCBvcmRlciBvZiBjb3JyZXNwb25kaW5nIHZhbHVlcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgQ29sbGVjdGlvblxuICogQHBhcmFtIHtBcnJheXxPYmplY3R9IGNvbGxlY3Rpb24gVGhlIGNvbGxlY3Rpb24gdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtBcnJheVtdfEZ1bmN0aW9uW118T2JqZWN0W118c3RyaW5nW119IFtpdGVyYXRlZXM9W18uaWRlbnRpdHldXVxuICogIFRoZSBpdGVyYXRlZXMgdG8gc29ydCBieS5cbiAqIEBwYXJhbSB7c3RyaW5nW119IFtvcmRlcnNdIFRoZSBzb3J0IG9yZGVycyBvZiBgaXRlcmF0ZWVzYC5cbiAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLnJlZHVjZWAuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBzb3J0ZWQgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciB1c2VycyA9IFtcbiAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDggfSxcbiAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzQgfSxcbiAqICAgeyAndXNlcic6ICdmcmVkJywgICAnYWdlJzogNDAgfSxcbiAqICAgeyAndXNlcic6ICdiYXJuZXknLCAnYWdlJzogMzYgfVxuICogXTtcbiAqXG4gKiAvLyBTb3J0IGJ5IGB1c2VyYCBpbiBhc2NlbmRpbmcgb3JkZXIgYW5kIGJ5IGBhZ2VgIGluIGRlc2NlbmRpbmcgb3JkZXIuXG4gKiBfLm9yZGVyQnkodXNlcnMsIFsndXNlcicsICdhZ2UnXSwgWydhc2MnLCAnZGVzYyddKTtcbiAqIC8vID0+IG9iamVjdHMgZm9yIFtbJ2Jhcm5leScsIDM2XSwgWydiYXJuZXknLCAzNF0sIFsnZnJlZCcsIDQ4XSwgWydmcmVkJywgNDBdXVxuICovXG5mdW5jdGlvbiBvcmRlckJ5KGNvbGxlY3Rpb24sIGl0ZXJhdGVlcywgb3JkZXJzLCBndWFyZCkge1xuICBpZiAoY29sbGVjdGlvbiA9PSBudWxsKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIGlmICghaXNBcnJheShpdGVyYXRlZXMpKSB7XG4gICAgaXRlcmF0ZWVzID0gaXRlcmF0ZWVzID09IG51bGwgPyBbXSA6IFtpdGVyYXRlZXNdO1xuICB9XG4gIG9yZGVycyA9IGd1YXJkID8gdW5kZWZpbmVkIDogb3JkZXJzO1xuICBpZiAoIWlzQXJyYXkob3JkZXJzKSkge1xuICAgIG9yZGVycyA9IG9yZGVycyA9PSBudWxsID8gW10gOiBbb3JkZXJzXTtcbiAgfVxuICByZXR1cm4gYmFzZU9yZGVyQnkoY29sbGVjdGlvbiwgaXRlcmF0ZWVzLCBvcmRlcnMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBvcmRlckJ5O1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGB1bmRlZmluZWRgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi4zLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5ub29wKTtcbiAqIC8vID0+IFt1bmRlZmluZWQsIHVuZGVmaW5lZF1cbiAqL1xuZnVuY3Rpb24gbm9vcCgpIHtcbiAgLy8gTm8gb3BlcmF0aW9uIHBlcmZvcm1lZC5cbn1cblxuZXhwb3J0IGRlZmF1bHQgbm9vcDtcbiIsImltcG9ydCBTZXQgZnJvbSAnLi9fU2V0LmpzJztcbmltcG9ydCBub29wIGZyb20gJy4vbm9vcC5qcyc7XG5pbXBvcnQgc2V0VG9BcnJheSBmcm9tICcuL19zZXRUb0FycmF5LmpzJztcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc2V0IG9iamVjdCBvZiBgdmFsdWVzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYWRkIHRvIHRoZSBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgc2V0LlxuICovXG52YXIgY3JlYXRlU2V0ID0gIShTZXQgJiYgKDEgLyBzZXRUb0FycmF5KG5ldyBTZXQoWywtMF0pKVsxXSkgPT0gSU5GSU5JVFkpID8gbm9vcCA6IGZ1bmN0aW9uKHZhbHVlcykge1xuICByZXR1cm4gbmV3IFNldCh2YWx1ZXMpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU2V0O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIERlcGVuZGVuY2llc1xuICovXG5pbXBvcnQgX3RlbXBsYXRlIGZyb20gJ2xvZGFzaC1lcy90ZW1wbGF0ZSc7XG5pbXBvcnQgX2ZvckVhY2ggZnJvbSAnbG9kYXNoLWVzL2ZvckVhY2gnO1xuaW1wb3J0IF9tZXJnZSBmcm9tICdsb2Rhc2gtZXMvbWVyZ2UnO1xuaW1wb3J0IF92YWx1ZXMgZnJvbSAnbG9kYXNoLWVzL3ZhbHVlcyc7XG5pbXBvcnQgX29yZGVyQnkgZnJvbSAnbG9kYXNoLWVzL29yZGVyQnknO1xuaW1wb3J0IF91bmlxQnkgZnJvbSAnbG9kYXNoLWVzL3VuaXFCeSc7XG5cbi8qKlxuICpcbiAqL1xuY2xhc3MgRmVlZCB7XG4gIGNvbnN0cnVjdG9yKGNvbmZpZykge1xuICAgIHRoaXMuZGVmYXVsdCA9IEZlZWQuZGVmYXVsdDtcblxuICAgIHRoaXMuX3NldHRpbmdzID0gX21lcmdlKHt9LCBGZWVkLmRlZmF1bHQsIGNvbmZpZyk7XG5cbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgbW9kdWxlXG4gICAqL1xuICBpbml0KCkge1xuICAgIGxldCBkYXRhID0gW107XG4gICAgbGV0IGZlZWQgPSB0aGlzLl9zZXR0aW5ncy5mZWVkO1xuICAgIGxldCBjb25maWcgPSB7XG4gICAgICByc3NUb0pzb246IEZlZWQucnNzVG9Kc29uLFxuICAgICAgcnNzVXJsOiAoQXJyYXkuaXNBcnJheShmZWVkKSkgPyBmZWVkIDogW2ZlZWRdXG4gICAgfTtcblxuICAgIC8vIEdvIHRocm91Z2ggZWFjaCBmZWVkXG4gICAgX2ZvckVhY2goY29uZmlnLnJzc1VybCwgKHVybCwgaW5kZXgpID0+IHtcbiAgICAgIC8vIE1ha2UgdGhlIHJlcXVlc3RcbiAgICAgIHRoaXMuX3JlcXVlc3QoY29uZmlnLCB1cmwpLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICAgICAgLy8gUHJvY2VzcyB0aGUgZGF0YVxuICAgICAgICAgIGRhdGEucHVzaCh0aGlzLl9wcm9jZXNzKEpTT04ucGFyc2UocmVzcG9uc2UpLCB0aGlzLl9zZXR0aW5ncykpO1xuICAgICAgICAgIC8vIFdoZW4gYWxsIGZlZWRzIGhhdmUgYmVlbiByZXF1ZXN0ZWQsIG1lcmdlIHRoZSBkYXRhIGFuZCBjb21waWxlXG4gICAgICAgICAgaWYgKGRhdGEubGVuZ3RoID09PSBjb25maWcucnNzVXJsLmxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5fbWVyZ2UoZGF0YSwgdGhpcy5fc2V0dGluZ3MpO1xuXG4gICAgICAgICAgICBsZXQgY29tcGlsZWQgPSB0aGlzLl9yZW5kZXIoXG4gICAgICAgICAgICAgIHRoaXMuX21lcmdlKGRhdGEsIHRoaXMuX3NldHRpbmdzKSxcbiAgICAgICAgICAgICAgdGhpcy5fc2V0dGluZ3NcbiAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgIGxldCBlbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5fc2V0dGluZ3Muc2VsZWN0b3IpO1xuICAgICAgICAgICAgaWYgKGVsKSBlbC5pbm5lckhUTUwgPSBjb21waWxlZDtcbiAgICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhbiBYSFIgcmVxdWVzdCBmb3IgdGhlIGZlZWQgZGF0YVxuICAgKiBAcGFyYW0gIHtvYmplY3R9IGNvbmZpZyBUaGUgcmVxdWVzdCBkYXRhXG4gICAqIEBwYXJhbSAge3N0cmluZ30gdXJsICAgIFRoZSByZXF1ZXN0IHVybFxuICAgKiBAcmV0dXJuIHtQcm9taXNlfSAgICAgICBSZXNvbHZlcyB3aGVuIHRoZSByZXNwb25zZSBpcyByZWFkeSwgcmVqZWN0cyB3aGVuXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgIHRoZSBvcGVyYXRpb24gdGltZXMgb3V0IG9yIHRoZXJlIGlzIGFuIGVycm9yLlxuICAgKi9cbiAgX3JlcXVlc3QoY29uZmlnLCB1cmwpIHtcbiAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgbGV0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuICAgICAgeGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICAgIGxldCBfeGhyID0gZXZlbnQudGFyZ2V0O1xuICAgICAgICBpZiAoX3hoci5yZWFkeVN0YXRlID09PSA0KSB7XG4gICAgICAgICAgaWYgKF94aHIuc3RhdHVzID49IDIwMCAmJiBfeGhyLnN0YXR1cyA8IDQwMCkge1xuICAgICAgICAgICAgcmVzb2x2ZShfeGhyLnJlc3BvbnNlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVqZWN0KG5ldyBFcnJvcihfeGhyLnN0YXR1cykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHhoci5vbnRpbWVvdXQgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBFcnJvcignVGhlIEZlZWQgcmVxdWVzdCB0aW1lZCBvdXQnKSk7XG4gICAgICB9O1xuICAgICAgeGhyLm9wZW4oJ0dFVCcsIGAke2NvbmZpZy5yc3NUb0pzb259P3Jzc191cmw9JHt1cmx9YCwgdHJ1ZSk7XG4gICAgICB4aHIuc2VuZCgpO1xuICAgICAgeGhyID0gbnVsbDtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXNzIGRhdGEgdG8gdGhlIGFwcHJvcHJpYXRlIHByb2Nlc3NpbmcgZnVuY3Rpb24gYmFzZWQgb24gdHlwZVxuICAgKiBAcGFyYW0gIHtvYmplY3R9IGRhdGEgICAgIFRoZSByZXF1ZXN0ZWQgZmVlZCBkYXRhIHRvIHBhc3NcbiAgICogQHBhcmFtICB7b2JqZWN0fSBzZXR0aW5ncyBUaGUgYXBwbGljYXRpb24gc2V0dGluZ3NcbiAgICogQHJldHVybiB7b2JqZWN0fSAgICAgICAgICBUaGUgcHJvY2Vzc2VkIGRhdGFcbiAgICovXG4gIF9wcm9jZXNzKGRhdGEsIHNldHRpbmdzKSB7XG4gICAgcmV0dXJuIEZlZWQucHJvY2Vzc1tzZXR0aW5ncy50eXBlXShkYXRhLCBzZXR0aW5ncyk7XG4gIH1cblxuICAvKipcbiAgICogUGFzcyBkYXRhIHRvIHRoZSBhcHByb3ByaWF0ZSBtZXJnZSBmdW5jdGlvbiBiYXNlZCBvbiB0eXBlXG4gICAqIEBwYXJhbSAge29iamVjdH0gZGF0YSAgICAgVGhlIHJlcXVlc3RlZCBmZWVkIGRhdGEgdG8gcGFzc1xuICAgKiBAcGFyYW0gIHtvYmplY3R9IHNldHRpbmdzIFRoZSBhcHBsaWNhdGlvbiBzZXR0aW5nc1xuICAgKiBAcmV0dXJuIHtvYmplY3R9ICAgICAgICAgIFRoZSBtZXJnZWQgZmVlZCBkYXRhXG4gICAqL1xuICBfbWVyZ2UoZGF0YSwgc2V0dGluZ3MpIHtcbiAgICByZXR1cm4gRmVlZC5tZXJnZVtzZXR0aW5ncy50eXBlXShkYXRhKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDb21iaW5lIHRlbXBsYXRlIGNvbXBvbmVudHMsIHBhc3MgZGF0YSwgYW5kIHJldHVybiBjb21waWxlZCB0ZW1sYXRlXG4gICAqIEBwYXJhbSAge29iamVjdH0gZGF0YSAgICAgVGhlIHJlcXVlc3RlZCBmZWVkIGRhdGEgdG8gcGFzc1xuICAgKiBAcGFyYW0gIHtvYmplY3R9IHNldHRpbmdzIFRoZSBhcHBsaWNhdGlvbiBzZXR0aW5nc1xuICAgKiBAcmV0dXJuIHtzdHJpbmd9ICAgICAgICAgIFRoZSBjb21wbGllZCBodG1sIHN0cmluZ1xuICAgKi9cbiAgX3JlbmRlcihkYXRhLCBzZXR0aW5ncykge1xuICAgIGRhdGEuc2V0dGluZ3MgPSBzZXR0aW5ncztcblxuICAgIGlmIChzZXR0aW5ncy5sb2cpXG4gICAgICBjb25zb2xlLmRpcihkYXRhKTtcblxuICAgIGxldCB0ZW1wbGF0ZSA9IF92YWx1ZXMoc2V0dGluZ3MudGVtcGxhdGVzKS5qb2luKCcnKTtcbiAgICBsZXQgY29tcGlsZWQgPSBfdGVtcGxhdGUoXG4gICAgICB0ZW1wbGF0ZSxcbiAgICAgIHtcbiAgICAgICAgJ2ltcG9ydHMnOiB7XG4gICAgICAgICAgJ19lYWNoJzogX2ZvckVhY2hcbiAgICAgICAgfVxuICAgICAgfVxuICAgICk7XG4gICAgcmV0dXJuIGNvbXBpbGVkKGRhdGEpO1xuICB9XG59XG5cbi8qKlxuICogQW4gb3BlbiBSU1MgdG8gSlNPTiBhcGksIHNlZSBodHRwczovL3JzczJqc29uLmNvbVxuICogQHR5cGUge1N0cmluZ31cbiAqL1xuRmVlZC5yc3NUb0pzb24gPSAnaHR0cHM6Ly9hcGkucnNzMmpzb24uY29tL3YxL2FwaS5qc29uJztcblxuLyoqXG4gKiBUaGUgdGVtcGxhdGUgZm9yIHRoZSB3aWRnZXQuXG4gKiBAdHlwZSB7U3RyaW5nfVxuICovXG5GZWVkLnRlbXBsYXRlcyA9IHtcbiAgbWVkaXVtOiB7XG4gICAgb3BlbmVyOiBbXG4gICAgICAnPHNlY3Rpb24gY2xhc3M9XCJvLWZlZWQgPCUtIHNldHRpbmdzLmNsYXNzZXMud3JhcHBlciAlPlwiIHN0eWxlPVwiJyxcbiAgICAgICAgJzwlIGlmIChzZXR0aW5ncy5mb250U2l6ZSkgeyAlPmZvbnQtc2l6ZTogPCUtIHNldHRpbmdzLmZvbnRTaXplICU+OzwlIH0gJT4nLFxuICAgICAgICAnPCUgaWYgKHNldHRpbmdzLnBvc3RCb3JkZXJDb2xvcikgeyAlPmJvcmRlci1jb2xvcjogPCUtIHNldHRpbmdzLnBvc3RCb3JkZXJDb2xvciAlPjs8JSB9ICU+JyxcbiAgICAgICdcIj4nXG4gICAgXSxcbiAgICBoZWFkZXI6IFtcbiAgICAgICc8aGVhZGVyIGNsYXNzPVwiby1mZWVkX19oZWFkZXIgPCUtIHNldHRpbmdzLmNsYXNzZXMuaGVhZGVyICU+XCI+JyxcbiAgICAgICAgJzxkaXYgY2xhc3M9XCJvLWZlZWRfX2F2YXRhciA8JS0gc2V0dGluZ3MuY2xhc3Nlcy5hdmF0YXIgJT5cIj4nLFxuICAgICAgICAgICc8aW1nIHNyYz1cIicsXG4gICAgICAgICAgICAgICAgJzwlIGlmIChzZXR0aW5ncy5wcm9maWxlSW1nICE9PSBcIlwiKSB7ICU+JyxcbiAgICAgICAgICAgICAgICAgICc8JS0gc2V0dGluZ3MucHJvZmlsZUltZyAlPicsXG4gICAgICAgICAgICAgICAgJzwlIH0gZWxzZSB7ICU+JyxcbiAgICAgICAgICAgICAgICAgICc8JS0gZmVlZC5wcm9maWxlSW1nICU+JyxcbiAgICAgICAgICAgICAgICAnPCUgfSAlPlwiICcsXG4gICAgICAgICAgICAgICAnd2lkdGg9XCI8JS0gc2V0dGluZ3MucmF0aW9Qcm9maWxlWzBdICU+XCIgJyxcbiAgICAgICAgICAgICAgICdoZWlnaHQ9XCI8JS0gc2V0dGluZ3MucmF0aW9Qcm9maWxlWzFdICU+XCI+JyxcbiAgICAgICAgJzwvZGl2PicsXG4gICAgICAgICc8YSBjbGFzcz1cIm8tZmVlZF9fdXJsIDwlLSBzZXR0aW5ncy5jbGFzc2VzLmF2YXRhciAlPlwiICcsXG4gICAgICAgICAgJ2hyZWY9XCI8JSBpZiAoc2V0dGluZ3MudGl0bGVVcmwgIT09IFwiXCIpIHsgJT4nLFxuICAgICAgICAgICAgJzwlLSBzZXR0aW5ncy50aXRsZVVybCAlPicsXG4gICAgICAgICAgJzwlIH0gZWxzZSB7ICU+JyxcbiAgICAgICAgICAgICc8JS0gZmVlZC51cmwgJT4nLFxuICAgICAgICAgICc8JSB9ICU+XCIgJyxcbiAgICAgICAgICAgJ3RhcmdldD1cIl9ibGFua1wiIHJlbD1cIm5vb3BlbmVyIG5vcmVmZXJyZXIgbm9mb2xsb3dcIj4nLFxuICAgICAgICAgICc8JSBpZiAoc2V0dGluZ3MudGl0bGUgIT09IFwiXCIpIHsgJT4nLFxuICAgICAgICAgICAgJzwlLSBzZXR0aW5ncy50aXRsZSAlPicsXG4gICAgICAgICAgJzwlIH0gZWxzZSB7ICU+JyxcbiAgICAgICAgICAgICc8JS0gZmVlZC50aXRsZSAlPicsXG4gICAgICAgICAgJzwlIH0gJT4nLFxuICAgICAgICAnPC9hPicsXG4gICAgICAnPC9oZWFkZXI+J1xuICAgIF0sXG4gICAgcG9zdHM6IFtcbiAgICAgICc8ZGl2IGNsYXNzPVwiby1mZWVkX19pdGVtc1wiIHN0eWxlPVwiJyxcbiAgICAgICAgJ2JvcmRlci1jb2xvcjogPCUtIHNldHRpbmdzLnBvc3RCb3JkZXJDb2xvciAlPjsnLFxuICAgICAgJ1wiPicsXG4gICAgICAgICc8JSBfZWFjaChpdGVtcywgZnVuY3Rpb24ocG9zdCkgeyAlPicsXG4gICAgICAgICAgJzxkaXYgY2xhc3M9XCJjLWZlZWQtaXRlbSA8JS0gc2V0dGluZ3MuY2xhc3Nlcy5mZWVkSXRlbSAlPlwiPicsXG4gICAgICAgICAgICAnPGg0IGNsYXNzPVwiYy1mZWVkLWl0ZW1fX3RpdGxlIDwlLSBzZXR0aW5ncy5jbGFzc2VzLnRpdGxlICU+XCI+JyxcbiAgICAgICAgICAgICAgJzxhIGNsYXNzPVwiYy1mZWVkLWl0ZW1fX2xpbmsgPCUtIHNldHRpbmdzLmNsYXNzZXMubGluayAlPlwiJyxcbiAgICAgICAgICAgICAgICAgJ2hyZWY9XCI8JS0gcG9zdC5ndWlkICU+XCInLFxuICAgICAgICAgICAgICAgICAndGFyZ2V0PVwiX2JsYW5rXCInLFxuICAgICAgICAgICAgICAgICAncmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlciBub2ZvbGxvd1wiPicsXG4gICAgICAgICAgICAgICAgJzwlLSBwb3N0LnRpdGxlICU+JyxcbiAgICAgICAgICAgICAgJzwvYT4nLFxuICAgICAgICAgICAgJzwvaDQ+JyxcbiAgICAgICAgICAgICc8c3BhbiBjbGFzcz1cImMtZmVlZC1pdGVtX19kYXRlIDwlLSBzZXR0aW5ncy5jbGFzc2VzLmRhdGUgJT5cIiAnLFxuICAgICAgICAgICAgICAgICAgJ3RpdGxlPVwiPCUtIHNldHRpbmdzLnBvc3REYXRlVGl0bGUgJT5cIj4nLFxuICAgICAgICAgICAgICAnPCUtIHBvc3QuZGF0ZSAlPicsXG4gICAgICAgICAgICAnPC9zcGFuPicsXG4gICAgICAgICAgICAnPGRpdiBjbGFzcz1cImMtZmVlZC1pdGVtX190aHVtYm5haWwgPCUtIHNldHRpbmdzLmNsYXNzZXMudGh1bWJuYWlsICU+XCInLFxuICAgICAgICAgICAgICAgICAnc3R5bGU9XCInLFxuICAgICAgICAgICAgICAgICAgICAnYmFja2dyb3VuZC1pbWFnZTogdXJsKDwlLSBwb3N0LnRodW1ibmFpbCAlPik7JyxcbiAgICAgICAgICAgICAgICAgICAgJ2hlaWdodDogPCUtIHNldHRpbmdzLnBvc3RJbWdIZWlnaHQgJT47XCInLFxuICAgICAgICAgICAgICAgICAnYXJpYS1oaWRkZW49XCJ0cnVlXCI+JyxcbiAgICAgICAgICAgICAgJzxpbWcgc3R5bGU9XCJkaXNwbGF5OiBub25lO1wiIHNyYz1cIjwlLSBwb3N0LnRodW1ibmFpbCAlPlwiIGFsdD1cIjwlLSBwb3N0LnRpdGxlICU+XCI+JyxcbiAgICAgICAgICAgICc8L2Rpdj4nLFxuICAgICAgICAgICAgJzxwIGNsYXNzPVwiYy1mZWVkLWl0ZW1fX2V4Y2VycHQgPCUtIHNldHRpbmdzLmNsYXNzZXMuZXhjZXJwdCAlPlwiPicsXG4gICAgICAgICAgICAgICc8JS0gcG9zdC5leGNlcnB0ICU+PCUtIHNldHRpbmdzLnBvc3RFeGNlcnB0VHJhaWwgJT4nLFxuICAgICAgICAgICAgJzwvcD4nLFxuICAgICAgICAgICAgJzxkaXYgY2xhc3M9XCJjLWZlZWQtaXRlbV9fZm9vdGVyIDwlLSBzZXR0aW5ncy5jbGFzc2VzLml0ZW1Gb290ZXIgJT5cIj4nLFxuICAgICAgICAgICAgICAnPGEgY2xhc3M9XCJjLWZlZWQtaXRlbV9fY3RhIDwlLSBzZXR0aW5ncy5jbGFzc2VzLmN0YSAlPlwiICcsXG4gICAgICAgICAgICAgICAgICdocmVmPVwiPCUtIHBvc3QuZ3VpZCAlPlwiICcsXG4gICAgICAgICAgICAgICAgICd0YXJnZXQ9XCJfYmxhbmtcIiAnLFxuICAgICAgICAgICAgICAgICAncmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlciBub2ZvbGxvd1wiPicsXG4gICAgICAgICAgICAgICAgJzwlLSBzZXR0aW5ncy5wb3N0Q3RhVGV4dCAlPicsXG4gICAgICAgICAgICAgICc8L2E+JyxcbiAgICAgICAgICAgICc8L2Rpdj4nLFxuICAgICAgICAgICc8L2Rpdj4nLFxuICAgICAgICAnPCUgfSk7ICU+JyxcbiAgICAgICc8L2Rpdj4nXG4gICAgXSxcbiAgICBjbG9zZXI6IFtcbiAgICAgICc8L3NlY3Rpb24+J1xuICAgIF1cbiAgfVxufTtcblxuLyoqXG4gKiBGdW5jdGlvbnMgZm9yIHByb2Nlc3NpbmcgdGhlIGRhdGEgYmFzZWQgb24gdGhlIGZlZWQgdHlwZS5cbiAqIEB0eXBlIHtPYmplY3R9XG4gKi9cbkZlZWQucHJvY2VzcyA9IHtcbiAgbWVkaXVtOiBmdW5jdGlvbihkYXRhLCBzZXR0aW5ncykge1xuICAgIGxldCBsZW5ndGggPSBzZXR0aW5ncy5wb3N0RXhjZXJwdExlbmd0aDtcblxuICAgIF9mb3JFYWNoKGRhdGEuaXRlbXMsIGZ1bmN0aW9uKHBvc3QsIGluZGV4KSB7XG4gICAgICBsZXQgZXhjZXJwdCA9ICcnO1xuICAgICAgbGV0IGRhdGUgPSAnJztcblxuICAgICAgLy8gUmVtb3ZlIGZpZ3VyZXMgZmlyc3RcbiAgICAgIGV4Y2VycHQgPSBwb3N0LmRlc2NyaXB0aW9uXG4gICAgICAgIC5yZXBsYWNlKC88ZmlndXJlLio+Lio/PFxcL2ZpZ3VyZT4vZywgJycpO1xuXG4gICAgICAvLyBSZW1vdmUgYWxsIHRhZ3NcbiAgICAgIGV4Y2VycHQgPSBleGNlcnB0LnJlcGxhY2UoLzwoLnxcXG4pKj8+L2csICcnKTtcblxuICAgICAgLy8gVHJpbSB0aGUgZXhjZXJwdFxuICAgICAgZXhjZXJwdCA9IGV4Y2VycHQuc3Vic3RyKDAsIGxlbmd0aCk7XG4gICAgICBleGNlcnB0ID0gZXhjZXJwdC5zdWJzdHIoMCxcbiAgICAgICAgTWF0aC5taW4oZXhjZXJwdC5sZW5ndGgsIGV4Y2VycHQubGFzdEluZGV4T2YoJyAnKSlcbiAgICAgICk7XG5cbiAgICAgIHBvc3QuZXhjZXJwdCA9IGV4Y2VycHQ7XG5cbiAgICAgIC8vIEZvcm1hdCB0aGUgZGF0ZVxuICAgICAgZGF0ZSA9IG5ldyBEYXRlKERhdGUucGFyc2UocG9zdC5wdWJEYXRlLnJlcGxhY2UoJyAnLCAnVCcpKSlcbiAgICAgICAgLnRvTG9jYWxlRGF0ZVN0cmluZyhzZXR0aW5ncy5wb3N0RGF0ZUxvY2FsLCBzZXR0aW5ncy5wb3N0RGF0ZUZvcm1hdCk7XG5cbiAgICAgIHBvc3QuZGF0ZSA9IGRhdGU7XG5cbiAgICAgIHJldHVybiBwb3N0O1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRhdGE7XG4gIH1cbn1cblxuLyoqXG4gKiBGdW5jdGlvbnMgZm9yIG1lcmdpbmcgdGhlIGRhdGEgZmVlZHMgdG9nZXRoZXIsIGJhc2VkIG9uIHRoZSBmZWVkIHR5cGUuXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5GZWVkLm1lcmdlID0ge1xuICBtZWRpdW06IGZ1bmN0aW9uKGRhdGEpIHtcbiAgICBsZXQgbWVyZ2VkID0ge307XG4gICAgbGV0IGl0ZW1zID0gW107XG5cbiAgICAvLyBDb21iaW5lIHRoZSBwb3N0IGl0ZW1zXG4gICAgZGF0YS5mb3JFYWNoKChmZWVkKSA9PiB7XG4gICAgICBpdGVtcyA9IGl0ZW1zLmNvbmNhdChmZWVkLml0ZW1zKTtcbiAgICB9KTtcblxuICAgIC8vIE1lcmdlIHRoZSBkYXRhLCB0aGlzIHdpbGwgb3ZlcnJpZGUgdmFsdWVzLCBpdCBwcm9iYWJseSB3b24ndCBiZVxuICAgIC8vIHBhcnRpY3VsYXJseSB1c2VmdWwgZm9yIGZlZWRzIHRoYXQgYXJlIHRoZSBzYW1lLCBidXQgcG90ZW50aWFsbHlcbiAgICAvLyBkaWZmZXJlbnQgZmVlZCB0eXBlcyBjb3VsZCB1c2UgdGhpcyBhbmQgY29tYmluZSB1bmlxdWUgZGF0YVxuICAgIGRhdGEuZm9yRWFjaCgoZmVlZCkgPT4ge1xuICAgICAgbWVyZ2VkID0gX21lcmdlKG1lcmdlZCwgZmVlZCk7XG4gICAgfSk7XG5cbiAgICAvLyBHZXQgdW5pcXVlIHBvc3RzXG4gICAgLy8gaXRlbXMgPSBfdW5pcUJ5KGl0ZW1zLCAoaXRlbSkgPT4gaXRlbS5ndWlkKTtcblxuICAgIG1lcmdlZC5pdGVtcyA9IF9vcmRlckJ5KGl0ZW1zLCAncHViRGF0ZScsICdkZXNjJyk7XG5cbiAgICByZXR1cm4gbWVyZ2VkO1xuICB9XG59XG5cbi8qKlxuICogU2VlIGh0dHBzOi8vcnNzMmpzb24uY29tL2RvY3MgZm9yIGRldGFpbHMgb24gZGVmYXVsdCBwYXJhbWV0ZXJzXG4gKiBAdHlwZSB7T2JqZWN0fVxuICovXG5GZWVkLmRlZmF1bHQgPSB7XG4gIGZlZWQ6ICcnLFxuICBzZWxlY3RvcjogJyNqcy1mZWVkJyxcbiAgdHlwZTogJ21lZGl1bScsXG4gIHRpdGxlOiAnJyxcbiAgdGl0bGVVcmw6ICcnLFxuICBwcm9maWxlSW1nOiAnJyxcbiAgZm9udFNpemU6ICcnLFxuICByYXRpb1Byb2ZpbGU6IFsnNTAnLCAnNTAnXSxcbiAgcG9zdEJvcmRlckNvbG9yOiAnbGlnaHRzdGVlbGJsdWUnLFxuICBwb3N0SW1nSGVpZ2h0OiAnMjAwcHgnLFxuICBwb3N0RXhjZXJwdExlbmd0aDogMTIwLFxuICBwb3N0RXhjZXJwdFRyYWlsOiAn4oCmJyxcbiAgcG9zdEN0YVRleHQ6ICdSZWFkIHRoZSBmdWxsIHBvc3QnLFxuICBwb3N0RGF0ZUxvY2FsOiAnZW4tVVMnLFxuICBwb3N0RGF0ZUZvcm1hdDoge1xuICAgIHllYXI6ICdudW1lcmljJyxcbiAgICBtb250aDogJ2xvbmcnLFxuICAgIGRheTogJ251bWVyaWMnXG4gIH0sXG4gIHBvc3REYXRlVGl0bGU6ICdQdWJsaXNoZWQgRGF0ZScsXG4gIGNsYXNzZXM6IHtcbiAgICB3cmFwcGVyOiAnJyxcbiAgICBoZWFkZXI6ICcnLFxuICAgIHVybDogJycsXG4gICAgZmVlZEl0ZW06ICcnLFxuICAgIHRpdGxlOiAnJyxcbiAgICBsaW5rOiAnJyxcbiAgICB0aHVtYm5haWw6ICcnLFxuICAgIGV4Y2VycHQ6ICcnLFxuICAgIGl0ZW1Gb290ZXI6ICcnLFxuICAgIGN0YTogJycsXG4gICAgZGF0ZTogJydcbiAgfSxcbiAgdGVtcGxhdGVzOiB7XG4gICAgb3BlbmVyOiBGZWVkLnRlbXBsYXRlcy5tZWRpdW0ub3BlbmVyLmpvaW4oJycpLFxuICAgIGhlYWRlcjogRmVlZC50ZW1wbGF0ZXMubWVkaXVtLmhlYWRlci5qb2luKCcnKSxcbiAgICBwb3N0czogRmVlZC50ZW1wbGF0ZXMubWVkaXVtLnBvc3RzLmpvaW4oJycpLFxuICAgIGNsb3NlcjogRmVlZC50ZW1wbGF0ZXMubWVkaXVtLmNsb3Nlci5qb2luKCcnKVxuICB9LFxuICBsb2c6IGZhbHNlLFxuICB1bmlxdWU6IGZhbHNlXG59O1xuXG5leHBvcnQgZGVmYXVsdCBGZWVkO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFRoZSBTaW1wbGUgVG9nZ2xlIGNsYXNzLiBUaGlzIHdpbGwgdG9nZ2xlIHRoZSBjbGFzcyAnYWN0aXZlJyBhbmQgJ2hpZGRlbidcbiAqIG9uIHRhcmdldCBlbGVtZW50cywgZGV0ZXJtaW5lZCBieSBhIGNsaWNrIGV2ZW50IG9uIGEgc2VsZWN0ZWQgbGluayBvclxuICogZWxlbWVudC4gVGhpcyB3aWxsIGFsc28gdG9nZ2xlIHRoZSBhcmlhLWhpZGRlbiBhdHRyaWJ1dGUgZm9yIHRhcmdldGVkXG4gKiBlbGVtZW50cyB0byBzdXBwb3J0IHNjcmVlbiByZWFkZXJzLiBUYXJnZXQgc2V0dGluZ3MgYW5kIG90aGVyIGZ1bmN0aW9uYWxpdHlcbiAqIGNhbiBiZSBjb250cm9sbGVkIHRocm91Z2ggZGF0YSBhdHRyaWJ1dGVzLlxuICpcbiAqIFRoaXMgdXNlcyB0aGUgLm1hdGNoZXMoKSBtZXRob2Qgd2hpY2ggd2lsbCByZXF1aXJlIGEgcG9seWZpbGwgZm9yIElFXG4gKiBodHRwczovL3BvbHlmaWxsLmlvL3YyL2RvY3MvZmVhdHVyZXMvI0VsZW1lbnRfcHJvdG90eXBlX21hdGNoZXNcbiAqXG4gKiBCYXNpYyBVc2FnZTtcbiAqXG4gKiBqYXZhc2NyaXB0OlxuICogICBuZXcgVG9nZ2xlKCkuaW5pdCgpO1xuICpcbiAqIFRvZ2dsaW5nIEFuY2hvciBsaW5rczpcbiAqICAgPGEgZGF0YS1qcz0ndG9nZ2xlJyBocmVmPScjbWFpbi1tZW51Jz5NZW51PC9hPlxuICogICA8ZGl2IGlkPSdtYWluLW1lbnUnIGFyaWEtaGlkZGVuPSd0cnVlJz4gLi4uIDwvZGl2PlxuICpcbiAqIFRvZ2dsaW5nIGFyaWEtY29udHJvbCBlbGVtZW50czpcbiAqXG4gKiAgIDxidXR0b24gZGF0YS1qcz0ndG9nZ2xlJyBhcmlhLWNvbnRyb2xzPScjbWFpbi1tZW51JyBhcmlhLXByZXNzZWQ9J2ZhbHNlJz5cbiAqICAgICAgTWVudVxuICogICA8L2J1dHRvbj5cbiAqICAgPGRpdiBpZD0nbWFpbi1tZW51JyBhcmlhLWhpZGRlbj0ndHJ1ZSc+IC4uLiA8L2Rpdj5cbiAqXG4gKiBDcmVhdGUgXCJVbmRvXCIgRXZlbnQgKHRvIGNsb3NlIGEgZGlhbG9ndWUpO1xuICogICA8YSBocmVmPScjbWFpbi1tZW51JyBkYXRhLWpzPSd0b2dnbGUnIGRhdGEtdG9nZ2xlLXVuZG89JyNjbG9zZSc+TWVudTwvYT5cbiAqICAgPGRpdiBpZD0nbWFpbi1tZW51JyBhcmlhLWhpZGRlbj0ndHJ1ZSc+XG4gKiAgICAgPGEgaWQ9XCJjbG9zZVwiPkNsb3NlPC9hPlxuICogICA8L2Rpdj5cbiAqIEBjbGFzc1xuICovXG5jbGFzcyBUb2dnbGUge1xuICAvKipcbiAgICogQGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSAge29iamVjdH0gcyBTZXR0aW5ncyBmb3IgdGhpcyBUb2dnbGUgaW5zdGFuY2VcbiAgICogQHJldHVybiB7b2JqZWN0fSAgIFRoZSBjbGFzc1xuICAgKi9cbiAgY29uc3RydWN0b3Iocykge1xuICAgIGNvbnN0IGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XG5cbiAgICBzID0gKCFzKSA/IHt9IDogcztcblxuICAgIHRoaXMuX3NldHRpbmdzID0ge1xuICAgICAgc2VsZWN0b3I6IChzLnNlbGVjdG9yKSA/IHMuc2VsZWN0b3IgOiBUb2dnbGUuc2VsZWN0b3IsXG4gICAgICBuYW1lc3BhY2U6IChzLm5hbWVzcGFjZSkgPyBzLm5hbWVzcGFjZSA6IFRvZ2dsZS5uYW1lc3BhY2UsXG4gICAgICBpbmFjdGl2ZUNsYXNzOiAocy5pbmFjdGl2ZUNsYXNzKSA/IHMuaW5hY3RpdmVDbGFzcyA6IFRvZ2dsZS5pbmFjdGl2ZUNsYXNzLFxuICAgICAgYWN0aXZlQ2xhc3M6IChzLmFjdGl2ZUNsYXNzKSA/IHMuYWN0aXZlQ2xhc3MgOiBUb2dnbGUuYWN0aXZlQ2xhc3MsXG4gICAgfTtcblxuICAgIGJvZHkuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICAgIGlmICghZXZlbnQudGFyZ2V0Lm1hdGNoZXModGhpcy5fc2V0dGluZ3Muc2VsZWN0b3IpKVxuICAgICAgICByZXR1cm47XG5cbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgIHRoaXMuX3RvZ2dsZShldmVudCk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2dzIGNvbnN0YW50cyB0byB0aGUgZGVidWdnZXJcbiAgICogQHBhcmFtICB7b2JqZWN0fSBldmVudCAgVGhlIG1haW4gY2xpY2sgZXZlbnRcbiAgICogQHJldHVybiB7b2JqZWN0fSAgICAgICAgVGhlIGNsYXNzXG4gICAqL1xuICBfdG9nZ2xlKGV2ZW50KSB7XG4gICAgbGV0IGVsID0gZXZlbnQudGFyZ2V0O1xuICAgIGxldCB0YXJnZXQgPSBmYWxzZTtcblxuICAgIC8qKiBBbmNob3IgTGlua3MgKi9cbiAgICB0YXJnZXQgPSAoZWwuZ2V0QXR0cmlidXRlKCdocmVmJykpID9cbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwuZ2V0QXR0cmlidXRlKCdocmVmJykpIDogdGFyZ2V0O1xuXG4gICAgLyoqIFRvZ2dsZSBDb250cm9scyAqL1xuICAgIC8vIGNvbnNvbGUuZGlyKGVsLmdldEF0dHJpYnV0ZSgnYXJpYS1jb250cm9scycpKTtcbiAgICB0YXJnZXQgPSAoZWwuZ2V0QXR0cmlidXRlKCdhcmlhLWNvbnRyb2xzJykpID9cbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke2VsLmdldEF0dHJpYnV0ZSgnYXJpYS1jb250cm9scycpfWApIDogdGFyZ2V0O1xuXG4gICAgLyoqIE1haW4gRnVuY3Rpb25hbGl0eSAqL1xuICAgIGlmICghdGFyZ2V0KSByZXR1cm4gdGhpcztcbiAgICB0aGlzLmVsZW1lbnRUb2dnbGUoZWwsIHRhcmdldCk7XG5cbiAgICAvKiogVW5kbyAqL1xuICAgIGlmIChlbC5kYXRhc2V0W2Ake3RoaXMuX3NldHRpbmdzLm5hbWVzcGFjZX1VbmRvYF0pIHtcbiAgICAgIGNvbnN0IHVuZG8gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxuICAgICAgICBlbC5kYXRhc2V0W2Ake3RoaXMuX3NldHRpbmdzLm5hbWVzcGFjZX1VbmRvYF1cbiAgICAgICk7XG5cbiAgICAgIHVuZG8uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZlbnQpID0+IHtcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgdGhpcy5lbGVtZW50VG9nZ2xlKGVsLCB0YXJnZXQpO1xuICAgICAgICB1bmRvLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJyk7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBUaGUgbWFpbiB0b2dnbGluZyBtZXRob2RcbiAgICogQHBhcmFtICB7b2JqZWN0fSBlbCAgICAgVGhlIGN1cnJlbnQgZWxlbWVudCB0byB0b2dnbGUgYWN0aXZlXG4gICAqIEBwYXJhbSAge29iamVjdH0gdGFyZ2V0IFRoZSB0YXJnZXQgZWxlbWVudCB0byB0b2dnbGUgYWN0aXZlL2hpZGRlblxuICAgKiBAcmV0dXJuIHtvYmplY3R9ICAgICAgICBUaGUgY2xhc3NcbiAgICovXG4gIGVsZW1lbnRUb2dnbGUoZWwsIHRhcmdldCkge1xuICAgIGlmICh0aGlzLl9zZXR0aW5ncy5hY3RpdmVDbGFzcyAhPT0gJycpIHtcbiAgICAgIGVsLmNsYXNzTGlzdC50b2dnbGUodGhpcy5fc2V0dGluZ3MuYWN0aXZlQ2xhc3MpO1xuICAgICAgdGFyZ2V0LmNsYXNzTGlzdC50b2dnbGUodGhpcy5fc2V0dGluZ3MuYWN0aXZlQ2xhc3MpO1xuICAgIH1cblxuICAgIGlmICh0aGlzLl9zZXR0aW5ncy5pbmFjdGl2ZUNsYXNzICE9PSAnJykge1xuICAgICAgdGFyZ2V0LmNsYXNzTGlzdC50b2dnbGUodGhpcy5fc2V0dGluZ3MuaW5hY3RpdmVDbGFzcyk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgdGhlIGVsZW1lbnQgZm9yIGRlZmluZWQgYXJpYSByb2xlcyBhbmQgdG9nZ2xlIHRoZW0gaWYgdGhleSBleGlzdFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgVG9nZ2xlLmVsQXJpYVJvbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoZWwuZ2V0QXR0cmlidXRlKFRvZ2dsZS5lbEFyaWFSb2xlc1tpXSkpXG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZShUb2dnbGUuZWxBcmlhUm9sZXNbaV0sXG4gICAgICAgICAgIShlbC5nZXRBdHRyaWJ1dGUoVG9nZ2xlLmVsQXJpYVJvbGVzW2ldKSA9PT0gJ3RydWUnKSk7XG4gICAgfVxuXG4gICAgLy8gQ2hlY2sgdGhlIHRhcmdldCBmb3IgZGVmaW5lZCBhcmlhIHJvbGVzIGFuZCB0b2dnbGUgdGhlbSBpZiB0aGV5IGV4aXN0XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBUb2dnbGUudGFyZ2V0QXJpYVJvbGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodGFyZ2V0LmdldEF0dHJpYnV0ZShUb2dnbGUudGFyZ2V0QXJpYVJvbGVzW2ldKSlcbiAgICAgICAgdGFyZ2V0LnNldEF0dHJpYnV0ZShUb2dnbGUudGFyZ2V0QXJpYVJvbGVzW2ldLFxuICAgICAgICAgICEodGFyZ2V0LmdldEF0dHJpYnV0ZShUb2dnbGUudGFyZ2V0QXJpYVJvbGVzW2ldKSA9PT0gJ3RydWUnKSk7XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgZWwuZ2V0QXR0cmlidXRlKCdocmVmJykgJiZcbiAgICAgIHRhcmdldC5jbGFzc0xpc3QuY29udGFpbnModGhpcy5fc2V0dGluZ3MuYWN0aXZlQ2xhc3MpKVxuICAgIHtcbiAgICAgIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gJyc7XG4gICAgICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IGVsLmdldEF0dHJpYnV0ZSgnaHJlZicpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9XG59XG5cbi8qKiBAdHlwZSB7U3RyaW5nfSBUaGUgbWFpbiBzZWxlY3RvciB0byBhZGQgdGhlIHRvZ2dsaW5nIGZ1bmN0aW9uIHRvICovXG5Ub2dnbGUuc2VsZWN0b3IgPSAnW2RhdGEtanMqPVwidG9nZ2xlXCJdJztcblxuLyoqIEB0eXBlIHtTdHJpbmd9IFRoZSBuYW1lc3BhY2UgZm9yIG91ciBkYXRhIGF0dHJpYnV0ZSBzZXR0aW5ncyAqL1xuVG9nZ2xlLm5hbWVzcGFjZSA9ICd0b2dnbGUnO1xuXG4vKiogQHR5cGUge1N0cmluZ30gVGhlIGhpZGUgY2xhc3MgKi9cblRvZ2dsZS5pbmFjdGl2ZUNsYXNzID0gJ2hpZGRlbic7XG5cbi8qKiBAdHlwZSB7U3RyaW5nfSBUaGUgYWN0aXZlIGNsYXNzICovXG5Ub2dnbGUuYWN0aXZlQ2xhc3MgPSAnYWN0aXZlJztcblxuLyoqIEB0eXBlIHtBcnJheX0gQXJpYSByb2xlcyB0byB0b2dnbGUgdHJ1ZS9mYWxzZSBvbiB0aGUgdG9nZ2xpbmcgZWxlbWVudCAqL1xuVG9nZ2xlLmVsQXJpYVJvbGVzID0gWydhcmlhLXByZXNzZWQnLCAnYXJpYS1leHBhbmRlZCddO1xuXG4vKiogQHR5cGUge0FycmF5fSBBcmlhIHJvbGVzIHRvIHRvZ2dsZSB0cnVlL2ZhbHNlIG9uIHRoZSB0YXJnZXQgZWxlbWVudCAqL1xuVG9nZ2xlLnRhcmdldEFyaWFSb2xlcyA9IFsnYXJpYS1oaWRkZW4nXTtcblxuZXhwb3J0IGRlZmF1bHQgVG9nZ2xlOyIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IFV0aWxpdHkgZnJvbSAnLi4vLi4vanMvbW9kdWxlcy91dGlsaXR5JztcblxuLyoqXG4gKiBUcmFja2luZyBidXMgZm9yIEdvb2dsZSBhbmFseXRpY3MgYW5kIFdlYnRyZW5kcy5cbiAqL1xuY2xhc3MgVHJhY2sge1xuICBjb25zdHJ1Y3RvcihzKSB7XG4gICAgY29uc3QgYm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKTtcblxuICAgIHMgPSAoIXMpID8ge30gOiBzO1xuXG4gICAgdGhpcy5fc2V0dGluZ3MgPSB7XG4gICAgICBzZWxlY3RvcjogKHMuc2VsZWN0b3IpID8gcy5zZWxlY3RvciA6IFRyYWNrLnNlbGVjdG9yLFxuICAgIH07XG5cbiAgICBib2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XG4gICAgICBpZiAoIWV2ZW50LnRhcmdldC5tYXRjaGVzKHRoaXMuX3NldHRpbmdzLnNlbGVjdG9yKSlcbiAgICAgICAgcmV0dXJuO1xuXG4gICAgICBsZXQga2V5ID0gZXZlbnQudGFyZ2V0LmRhdGFzZXQudHJhY2tLZXk7XG4gICAgICBsZXQgZGF0YSA9IEpTT04ucGFyc2UoZXZlbnQudGFyZ2V0LmRhdGFzZXQudHJhY2tEYXRhKTtcblxuICAgICAgdGhpcy5jbGljayhrZXksIGRhdGEpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogVHJhY2tpbmcgZnVuY3Rpb24gd3JhcHBlclxuICAgKiBAcGFyYW0gIHtzdHJpbmd9ICAgICBrZXkgIFRoZSBrZXkgb3IgZXZlbnQgb2YgdGhlIGRhdGFcbiAgICogQHBhcmFtICB7Y29sbGVjdGlvbn0gZGF0YSBUaGUgZGF0YSB0byB0cmFja1xuICAgKiBAcmV0dXJuIHtvYmplY3R9ICAgICAgICAgIFRoZSBmaW5hbCBkYXRhIG9iamVjdFxuICAgKi9cbiAgY2xpY2soa2V5LCBkYXRhKSB7XG4gICAgLy8gU2V0IHRoZSBwYXRoIG5hbWUgYmFzZWQgb24gdGhlIGxvY2F0aW9uXG4gICAgY29uc3QgZCA9IGRhdGEubWFwKGVsID0+IHtcbiAgICAgICAgaWYgKGVsLmhhc093blByb3BlcnR5KFRyYWNrLmtleSkpXG4gICAgICAgICAgZWxbVHJhY2sua2V5XSA9IGAke3dpbmRvdy5sb2NhdGlvbi5wYXRobmFtZX0vJHtlbFtUcmFjay5rZXldfWBcbiAgICAgICAgcmV0dXJuIGVsO1xuICAgICAgfSk7XG5cbiAgICBsZXQgd3QgPSB0aGlzLndlYnRyZW5kcyhrZXksIGQpO1xuICAgIGxldCBnYSA9IHRoaXMuZ3RhZyhrZXksIGQpO1xuXG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuICAgIGlmIChVdGlsaXR5LmRlYnVnKCkpXG4gICAgICBjb25zb2xlLmRpcih7J1RyYWNrJzogW3d0LCBnYV19KTtcbiAgICAvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbnNvbGUgKi9cblxuICAgIHJldHVybiBkO1xuICB9O1xuXG4gIC8qKlxuICAgKiBEYXRhIGJ1cyBmb3IgdHJhY2tpbmcgdmlld3MgaW4gV2VidHJlbmRzIGFuZCBHb29nbGUgQW5hbHl0aWNzXG4gICAqIEBwYXJhbSAge3N0cmluZ30gICAgIGFwcCAgVGhlIG5hbWUgb2YgdGhlIFNpbmdsZSBQYWdlIEFwcGxpY2F0aW9uIHRvIHRyYWNrXG4gICAqIEBwYXJhbSAge3N0cmluZ30gICAgIGtleSAgVGhlIGtleSBvciBldmVudCBvZiB0aGUgZGF0YVxuICAgKiBAcGFyYW0gIHtjb2xsZWN0aW9ufSBkYXRhIFRoZSBkYXRhIHRvIHRyYWNrXG4gICAqL1xuICB2aWV3KGFwcCwga2V5LCBkYXRhKSB7XG4gICAgbGV0IHd0ID0gdGhpcy53ZWJ0cmVuZHMoa2V5LCBkYXRhKTtcbiAgICBsZXQgZ2EgPSB0aGlzLmd0YWdWaWV3KGFwcCwga2V5KTtcblxuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgICBpZiAoVXRpbGl0eS5kZWJ1ZygpKVxuICAgICAgY29uc29sZS5kaXIoeydUcmFjayc6IFt3dCwgZ2FdfSk7XG4gICAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG4gIH07XG5cbiAgLyoqXG4gICAqIFB1c2ggRXZlbnRzIHRvIFdlYnRyZW5kc1xuICAgKiBAcGFyYW0gIHtzdHJpbmd9ICAgICBrZXkgIFRoZSBrZXkgb3IgZXZlbnQgb2YgdGhlIGRhdGFcbiAgICogQHBhcmFtICB7Y29sbGVjdGlvbn0gZGF0YSBUaGUgZGF0YSB0byB0cmFja1xuICAgKi9cbiAgd2VidHJlbmRzKGtleSwgZGF0YSkge1xuICAgIGxldCBldmVudCA9IFt7XG4gICAgICAnV1QudGknOiBrZXlcbiAgICB9XTtcblxuICAgIGlmIChkYXRhWzBdICYmIGRhdGFbMF0uaGFzT3duUHJvcGVydHkoVHJhY2sua2V5KSkge1xuICAgICAgZXZlbnQucHVzaCh7XG4gICAgICAgICdEQ1MuZGNzdXJpJzogZGF0YVswXVtUcmFjay5rZXldXG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgT2JqZWN0LmFzc2lnbihldmVudCwgZGF0YSk7XG4gICAgfVxuXG4gICAgLy8gRm9ybWF0IGRhdGEgZm9yIFdlYnRyZW5kc1xuICAgIGxldCB3dGQgPSB7YXJnc2E6IGV2ZW50LmZsYXRNYXAoZSA9PiB7XG4gICAgICByZXR1cm4gT2JqZWN0LmtleXMoZSkuZmxhdE1hcChrID0+IFtrLCBlW2tdXSk7XG4gICAgfSl9O1xuXG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYgKi9cbiAgICBpZiAodHlwZW9mIFdlYnRyZW5kcyAhPT0gJ3VuZGVmaW5lZCcpXG4gICAgICBXZWJ0cmVuZHMubXVsdGlUcmFjayh3dGQpO1xuICAgIC8qIGVzbGludC1kaXNhYmxlIG5vLXVuZGVmICovXG5cbiAgICByZXR1cm4gWydXZWJ0cmVuZHMnLCB3dGRdO1xuICB9O1xuXG4gIC8qKlxuICAgKiBQdXNoIENsaWNrIEV2ZW50cyB0byBHb29nbGUgQW5hbHl0aWNzXG4gICAqIEBwYXJhbSAge3N0cmluZ30gICAgIGtleSAgVGhlIGtleSBvciBldmVudCBvZiB0aGUgZGF0YVxuICAgKiBAcGFyYW0gIHtjb2xsZWN0aW9ufSBkYXRhIFRoZSBkYXRhIHRvIHRyYWNrXG4gICAqL1xuICBndGFnKGtleSwgZGF0YSkge1xuICAgIGxldCB1cmkgPSBkYXRhLmZpbmQoKGVsZW1lbnQpID0+IGVsZW1lbnQuaGFzT3duUHJvcGVydHkoVHJhY2sua2V5KSk7XG5cbiAgICBsZXQgZXZlbnQgPSB7XG4gICAgICAnZXZlbnRfY2F0ZWdvcnknOiBrZXlcbiAgICB9O1xuXG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZWYgKi9cbiAgICBpZiAodHlwZW9mIGd0YWcgIT09ICd1bmRlZmluZWQnKVxuICAgICAgZ3RhZyhUcmFjay5rZXksIHVyaVtUcmFjay5rZXldLCBldmVudCk7XG4gICAgLyogZXNsaW50LWVuYWJsZSBuby11bmRlZiAqL1xuXG4gICAgcmV0dXJuIFsnZ3RhZycsIFRyYWNrLmtleSwgdXJpW1RyYWNrLmtleV0sIGV2ZW50XTtcbiAgfTtcblxuICAvKipcbiAgICogUHVzaCBTY3JlZW4gVmlldyBFdmVudHMgdG8gR29vZ2xlIEFuYWx5dGljc1xuICAgKiBAcGFyYW0gIHtzdHJpbmd9ICAgICBhcHAgIFRoZSBuYW1lIG9mIHRoZSBhcHBsaWNhdGlvblxuICAgKiBAcGFyYW0gIHtzdHJpbmd9ICAgICBrZXkgIFRoZSBrZXkgb3IgZXZlbnQgb2YgdGhlIGRhdGFcbiAgICovXG4gIGd0YWdWaWV3KGFwcCwga2V5KSB7XG4gICAgbGV0IHZpZXcgPSB7XG4gICAgICBhcHBfbmFtZTogYXBwLFxuICAgICAgc2NyZWVuX25hbWU6IGtleVxuICAgIH07XG5cbiAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby11bmRlZiAqL1xuICAgIGlmICh0eXBlb2YgZ3RhZyAhPT0gJ3VuZGVmaW5lZCcpXG4gICAgICBndGFnKCdldmVudCcsICdzY3JlZW5fdmlldycsIHZpZXcpO1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tdW5kZWYgKi9cblxuICAgIHJldHVybiBbJ2d0YWcnLCBUcmFjay5rZXksICdzY3JlZW5fdmlldycsIHZpZXddO1xuICB9O1xufVxuXG4vKiogQHR5cGUge1N0cmluZ30gVGhlIG1haW4gc2VsZWN0b3IgdG8gYWRkIHRoZSB0cmFja2luZyBmdW5jdGlvbiB0byAqL1xuVHJhY2suc2VsZWN0b3IgPSAnW2RhdGEtanMqPVwidHJhY2tcIl0nO1xuXG4vKiogQHR5cGUge1N0cmluZ30gVGhlIG1haW4gZXZlbnQgdHJhY2tpbmcga2V5IHRvIG1hcCB0byBXZWJ0cmVuZHMgRENTLnVyaSAqL1xuVHJhY2sua2V5ID0gJ2V2ZW50JztcblxuZXhwb3J0IGRlZmF1bHQgVHJhY2s7IiwiLyohXG4gKiBWdWUuanMgdjIuNi42XG4gKiAoYykgMjAxNC0yMDE5IEV2YW4gWW91XG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cbi8qICAqL1xuXG5jb25zdCBlbXB0eU9iamVjdCA9IE9iamVjdC5mcmVlemUoe30pO1xuXG4vLyBUaGVzZSBoZWxwZXJzIHByb2R1Y2UgYmV0dGVyIFZNIGNvZGUgaW4gSlMgZW5naW5lcyBkdWUgdG8gdGhlaXJcbi8vIGV4cGxpY2l0bmVzcyBhbmQgZnVuY3Rpb24gaW5saW5pbmcuXG5mdW5jdGlvbiBpc1VuZGVmICh2KSB7XG4gIHJldHVybiB2ID09PSB1bmRlZmluZWQgfHwgdiA9PT0gbnVsbFxufVxuXG5mdW5jdGlvbiBpc0RlZiAodikge1xuICByZXR1cm4gdiAhPT0gdW5kZWZpbmVkICYmIHYgIT09IG51bGxcbn1cblxuZnVuY3Rpb24gaXNUcnVlICh2KSB7XG4gIHJldHVybiB2ID09PSB0cnVlXG59XG5cbmZ1bmN0aW9uIGlzRmFsc2UgKHYpIHtcbiAgcmV0dXJuIHYgPT09IGZhbHNlXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdmFsdWUgaXMgcHJpbWl0aXZlLlxuICovXG5mdW5jdGlvbiBpc1ByaW1pdGl2ZSAodmFsdWUpIHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8XG4gICAgdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyB8fFxuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N5bWJvbCcgfHxcbiAgICB0eXBlb2YgdmFsdWUgPT09ICdib29sZWFuJ1xuICApXG59XG5cbi8qKlxuICogUXVpY2sgb2JqZWN0IGNoZWNrIC0gdGhpcyBpcyBwcmltYXJpbHkgdXNlZCB0byB0ZWxsXG4gKiBPYmplY3RzIGZyb20gcHJpbWl0aXZlIHZhbHVlcyB3aGVuIHdlIGtub3cgdGhlIHZhbHVlXG4gKiBpcyBhIEpTT04tY29tcGxpYW50IHR5cGUuXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0IChvYmopIHtcbiAgcmV0dXJuIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0J1xufVxuXG4vKipcbiAqIEdldCB0aGUgcmF3IHR5cGUgc3RyaW5nIG9mIGEgdmFsdWUsIGUuZy4sIFtvYmplY3QgT2JqZWN0XS5cbiAqL1xuY29uc3QgX3RvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcblxuZnVuY3Rpb24gdG9SYXdUeXBlICh2YWx1ZSkge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKVxufVxuXG4vKipcbiAqIFN0cmljdCBvYmplY3QgdHlwZSBjaGVjay4gT25seSByZXR1cm5zIHRydWVcbiAqIGZvciBwbGFpbiBKYXZhU2NyaXB0IG9iamVjdHMuXG4gKi9cbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QgKG9iaikge1xuICByZXR1cm4gX3RvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSdcbn1cblxuZnVuY3Rpb24gaXNSZWdFeHAgKHYpIHtcbiAgcmV0dXJuIF90b1N0cmluZy5jYWxsKHYpID09PSAnW29iamVjdCBSZWdFeHBdJ1xufVxuXG4vKipcbiAqIENoZWNrIGlmIHZhbCBpcyBhIHZhbGlkIGFycmF5IGluZGV4LlxuICovXG5mdW5jdGlvbiBpc1ZhbGlkQXJyYXlJbmRleCAodmFsKSB7XG4gIGNvbnN0IG4gPSBwYXJzZUZsb2F0KFN0cmluZyh2YWwpKTtcbiAgcmV0dXJuIG4gPj0gMCAmJiBNYXRoLmZsb29yKG4pID09PSBuICYmIGlzRmluaXRlKHZhbClcbn1cblxuZnVuY3Rpb24gaXNQcm9taXNlICh2YWwpIHtcbiAgcmV0dXJuIChcbiAgICBpc0RlZih2YWwpICYmXG4gICAgdHlwZW9mIHZhbC50aGVuID09PSAnZnVuY3Rpb24nICYmXG4gICAgdHlwZW9mIHZhbC5jYXRjaCA9PT0gJ2Z1bmN0aW9uJ1xuICApXG59XG5cbi8qKlxuICogQ29udmVydCBhIHZhbHVlIHRvIGEgc3RyaW5nIHRoYXQgaXMgYWN0dWFsbHkgcmVuZGVyZWQuXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nICh2YWwpIHtcbiAgcmV0dXJuIHZhbCA9PSBudWxsXG4gICAgPyAnJ1xuICAgIDogQXJyYXkuaXNBcnJheSh2YWwpIHx8IChpc1BsYWluT2JqZWN0KHZhbCkgJiYgdmFsLnRvU3RyaW5nID09PSBfdG9TdHJpbmcpXG4gICAgICA/IEpTT04uc3RyaW5naWZ5KHZhbCwgbnVsbCwgMilcbiAgICAgIDogU3RyaW5nKHZhbClcbn1cblxuLyoqXG4gKiBDb252ZXJ0IGFuIGlucHV0IHZhbHVlIHRvIGEgbnVtYmVyIGZvciBwZXJzaXN0ZW5jZS5cbiAqIElmIHRoZSBjb252ZXJzaW9uIGZhaWxzLCByZXR1cm4gb3JpZ2luYWwgc3RyaW5nLlxuICovXG5mdW5jdGlvbiB0b051bWJlciAodmFsKSB7XG4gIGNvbnN0IG4gPSBwYXJzZUZsb2F0KHZhbCk7XG4gIHJldHVybiBpc05hTihuKSA/IHZhbCA6IG5cbn1cblxuLyoqXG4gKiBNYWtlIGEgbWFwIGFuZCByZXR1cm4gYSBmdW5jdGlvbiBmb3IgY2hlY2tpbmcgaWYgYSBrZXlcbiAqIGlzIGluIHRoYXQgbWFwLlxuICovXG5mdW5jdGlvbiBtYWtlTWFwIChcbiAgc3RyLFxuICBleHBlY3RzTG93ZXJDYXNlXG4pIHtcbiAgY29uc3QgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgY29uc3QgbGlzdCA9IHN0ci5zcGxpdCgnLCcpO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICBtYXBbbGlzdFtpXV0gPSB0cnVlO1xuICB9XG4gIHJldHVybiBleHBlY3RzTG93ZXJDYXNlXG4gICAgPyB2YWwgPT4gbWFwW3ZhbC50b0xvd2VyQ2FzZSgpXVxuICAgIDogdmFsID0+IG1hcFt2YWxdXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYSB0YWcgaXMgYSBidWlsdC1pbiB0YWcuXG4gKi9cbmNvbnN0IGlzQnVpbHRJblRhZyA9IG1ha2VNYXAoJ3Nsb3QsY29tcG9uZW50JywgdHJ1ZSk7XG5cbi8qKlxuICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIGlzIGEgcmVzZXJ2ZWQgYXR0cmlidXRlLlxuICovXG5jb25zdCBpc1Jlc2VydmVkQXR0cmlidXRlID0gbWFrZU1hcCgna2V5LHJlZixzbG90LHNsb3Qtc2NvcGUsaXMnKTtcblxuLyoqXG4gKiBSZW1vdmUgYW4gaXRlbSBmcm9tIGFuIGFycmF5LlxuICovXG5mdW5jdGlvbiByZW1vdmUgKGFyciwgaXRlbSkge1xuICBpZiAoYXJyLmxlbmd0aCkge1xuICAgIGNvbnN0IGluZGV4ID0gYXJyLmluZGV4T2YoaXRlbSk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHJldHVybiBhcnIuc3BsaWNlKGluZGV4LCAxKVxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIENoZWNrIHdoZXRoZXIgYW4gb2JqZWN0IGhhcyB0aGUgcHJvcGVydHkuXG4gKi9cbmNvbnN0IGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbmZ1bmN0aW9uIGhhc093biAob2JqLCBrZXkpIHtcbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgY2FjaGVkIHZlcnNpb24gb2YgYSBwdXJlIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBjYWNoZWQgKGZuKSB7XG4gIGNvbnN0IGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgcmV0dXJuIChmdW5jdGlvbiBjYWNoZWRGbiAoc3RyKSB7XG4gICAgY29uc3QgaGl0ID0gY2FjaGVbc3RyXTtcbiAgICByZXR1cm4gaGl0IHx8IChjYWNoZVtzdHJdID0gZm4oc3RyKSlcbiAgfSlcbn1cblxuLyoqXG4gKiBDYW1lbGl6ZSBhIGh5cGhlbi1kZWxpbWl0ZWQgc3RyaW5nLlxuICovXG5jb25zdCBjYW1lbGl6ZVJFID0gLy0oXFx3KS9nO1xuY29uc3QgY2FtZWxpemUgPSBjYWNoZWQoKHN0cikgPT4ge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoY2FtZWxpemVSRSwgKF8sIGMpID0+IGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJylcbn0pO1xuXG4vKipcbiAqIENhcGl0YWxpemUgYSBzdHJpbmcuXG4gKi9cbmNvbnN0IGNhcGl0YWxpemUgPSBjYWNoZWQoKHN0cikgPT4ge1xuICByZXR1cm4gc3RyLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyLnNsaWNlKDEpXG59KTtcblxuLyoqXG4gKiBIeXBoZW5hdGUgYSBjYW1lbENhc2Ugc3RyaW5nLlxuICovXG5jb25zdCBoeXBoZW5hdGVSRSA9IC9cXEIoW0EtWl0pL2c7XG5jb25zdCBoeXBoZW5hdGUgPSBjYWNoZWQoKHN0cikgPT4ge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoaHlwaGVuYXRlUkUsICctJDEnKS50b0xvd2VyQ2FzZSgpXG59KTtcblxuLyoqXG4gKiBTaW1wbGUgYmluZCBwb2x5ZmlsbCBmb3IgZW52aXJvbm1lbnRzIHRoYXQgZG8gbm90IHN1cHBvcnQgaXQsXG4gKiBlLmcuLCBQaGFudG9tSlMgMS54LiBUZWNobmljYWxseSwgd2UgZG9uJ3QgbmVlZCB0aGlzIGFueW1vcmVcbiAqIHNpbmNlIG5hdGl2ZSBiaW5kIGlzIG5vdyBwZXJmb3JtYW50IGVub3VnaCBpbiBtb3N0IGJyb3dzZXJzLlxuICogQnV0IHJlbW92aW5nIGl0IHdvdWxkIG1lYW4gYnJlYWtpbmcgY29kZSB0aGF0IHdhcyBhYmxlIHRvIHJ1biBpblxuICogUGhhbnRvbUpTIDEueCwgc28gdGhpcyBtdXN0IGJlIGtlcHQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXG4gKi9cblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIHBvbHlmaWxsQmluZCAoZm4sIGN0eCkge1xuICBmdW5jdGlvbiBib3VuZEZuIChhKSB7XG4gICAgY29uc3QgbCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgcmV0dXJuIGxcbiAgICAgID8gbCA+IDFcbiAgICAgICAgPyBmbi5hcHBseShjdHgsIGFyZ3VtZW50cylcbiAgICAgICAgOiBmbi5jYWxsKGN0eCwgYSlcbiAgICAgIDogZm4uY2FsbChjdHgpXG4gIH1cblxuICBib3VuZEZuLl9sZW5ndGggPSBmbi5sZW5ndGg7XG4gIHJldHVybiBib3VuZEZuXG59XG5cbmZ1bmN0aW9uIG5hdGl2ZUJpbmQgKGZuLCBjdHgpIHtcbiAgcmV0dXJuIGZuLmJpbmQoY3R4KVxufVxuXG5jb25zdCBiaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbiAgPyBuYXRpdmVCaW5kXG4gIDogcG9seWZpbGxCaW5kO1xuXG4vKipcbiAqIENvbnZlcnQgYW4gQXJyYXktbGlrZSBvYmplY3QgdG8gYSByZWFsIEFycmF5LlxuICovXG5mdW5jdGlvbiB0b0FycmF5IChsaXN0LCBzdGFydCkge1xuICBzdGFydCA9IHN0YXJ0IHx8IDA7XG4gIGxldCBpID0gbGlzdC5sZW5ndGggLSBzdGFydDtcbiAgY29uc3QgcmV0ID0gbmV3IEFycmF5KGkpO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgcmV0W2ldID0gbGlzdFtpICsgc3RhcnRdO1xuICB9XG4gIHJldHVybiByZXRcbn1cblxuLyoqXG4gKiBNaXggcHJvcGVydGllcyBpbnRvIHRhcmdldCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGV4dGVuZCAodG8sIF9mcm9tKSB7XG4gIGZvciAoY29uc3Qga2V5IGluIF9mcm9tKSB7XG4gICAgdG9ba2V5XSA9IF9mcm9tW2tleV07XG4gIH1cbiAgcmV0dXJuIHRvXG59XG5cbi8qKlxuICogTWVyZ2UgYW4gQXJyYXkgb2YgT2JqZWN0cyBpbnRvIGEgc2luZ2xlIE9iamVjdC5cbiAqL1xuZnVuY3Rpb24gdG9PYmplY3QgKGFycikge1xuICBjb25zdCByZXMgPSB7fTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYXJyW2ldKSB7XG4gICAgICBleHRlbmQocmVzLCBhcnJbaV0pO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5cbi8qKlxuICogUGVyZm9ybSBubyBvcGVyYXRpb24uXG4gKiBTdHViYmluZyBhcmdzIHRvIG1ha2UgRmxvdyBoYXBweSB3aXRob3V0IGxlYXZpbmcgdXNlbGVzcyB0cmFuc3BpbGVkIGNvZGVcbiAqIHdpdGggLi4ucmVzdCAoaHR0cHM6Ly9mbG93Lm9yZy9ibG9nLzIwMTcvMDUvMDcvU3RyaWN0LUZ1bmN0aW9uLUNhbGwtQXJpdHkvKS5cbiAqL1xuZnVuY3Rpb24gbm9vcCAoYSwgYiwgYykge31cblxuLyoqXG4gKiBBbHdheXMgcmV0dXJuIGZhbHNlLlxuICovXG5jb25zdCBubyA9IChhLCBiLCBjKSA9PiBmYWxzZTtcblxuLyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXG4vKipcbiAqIFJldHVybiB0aGUgc2FtZSB2YWx1ZS5cbiAqL1xuY29uc3QgaWRlbnRpdHkgPSAoXykgPT4gXztcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIHN0cmluZyBjb250YWluaW5nIHN0YXRpYyBrZXlzIGZyb20gY29tcGlsZXIgbW9kdWxlcy5cbiAqL1xuZnVuY3Rpb24gZ2VuU3RhdGljS2V5cyAobW9kdWxlcykge1xuICByZXR1cm4gbW9kdWxlcy5yZWR1Y2UoKGtleXMsIG0pID0+IHtcbiAgICByZXR1cm4ga2V5cy5jb25jYXQobS5zdGF0aWNLZXlzIHx8IFtdKVxuICB9LCBbXSkuam9pbignLCcpXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdHdvIHZhbHVlcyBhcmUgbG9vc2VseSBlcXVhbCAtIHRoYXQgaXMsXG4gKiBpZiB0aGV5IGFyZSBwbGFpbiBvYmplY3RzLCBkbyB0aGV5IGhhdmUgdGhlIHNhbWUgc2hhcGU/XG4gKi9cbmZ1bmN0aW9uIGxvb3NlRXF1YWwgKGEsIGIpIHtcbiAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlXG4gIGNvbnN0IGlzT2JqZWN0QSA9IGlzT2JqZWN0KGEpO1xuICBjb25zdCBpc09iamVjdEIgPSBpc09iamVjdChiKTtcbiAgaWYgKGlzT2JqZWN0QSAmJiBpc09iamVjdEIpIHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgaXNBcnJheUEgPSBBcnJheS5pc0FycmF5KGEpO1xuICAgICAgY29uc3QgaXNBcnJheUIgPSBBcnJheS5pc0FycmF5KGIpO1xuICAgICAgaWYgKGlzQXJyYXlBICYmIGlzQXJyYXlCKSB7XG4gICAgICAgIHJldHVybiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeSgoZSwgaSkgPT4ge1xuICAgICAgICAgIHJldHVybiBsb29zZUVxdWFsKGUsIGJbaV0pXG4gICAgICAgIH0pXG4gICAgICB9IGVsc2UgaWYgKGEgaW5zdGFuY2VvZiBEYXRlICYmIGIgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgIHJldHVybiBhLmdldFRpbWUoKSA9PT0gYi5nZXRUaW1lKClcbiAgICAgIH0gZWxzZSBpZiAoIWlzQXJyYXlBICYmICFpc0FycmF5Qikge1xuICAgICAgICBjb25zdCBrZXlzQSA9IE9iamVjdC5rZXlzKGEpO1xuICAgICAgICBjb25zdCBrZXlzQiA9IE9iamVjdC5rZXlzKGIpO1xuICAgICAgICByZXR1cm4ga2V5c0EubGVuZ3RoID09PSBrZXlzQi5sZW5ndGggJiYga2V5c0EuZXZlcnkoa2V5ID0+IHtcbiAgICAgICAgICByZXR1cm4gbG9vc2VFcXVhbChhW2tleV0sIGJba2V5XSlcbiAgICAgICAgfSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICByZXR1cm4gZmFsc2VcbiAgICB9XG4gIH0gZWxzZSBpZiAoIWlzT2JqZWN0QSAmJiAhaXNPYmplY3RCKSB7XG4gICAgcmV0dXJuIFN0cmluZyhhKSA9PT0gU3RyaW5nKGIpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbn1cblxuLyoqXG4gKiBSZXR1cm4gdGhlIGZpcnN0IGluZGV4IGF0IHdoaWNoIGEgbG9vc2VseSBlcXVhbCB2YWx1ZSBjYW4gYmVcbiAqIGZvdW5kIGluIHRoZSBhcnJheSAoaWYgdmFsdWUgaXMgYSBwbGFpbiBvYmplY3QsIHRoZSBhcnJheSBtdXN0XG4gKiBjb250YWluIGFuIG9iamVjdCBvZiB0aGUgc2FtZSBzaGFwZSksIG9yIC0xIGlmIGl0IGlzIG5vdCBwcmVzZW50LlxuICovXG5mdW5jdGlvbiBsb29zZUluZGV4T2YgKGFyciwgdmFsKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKGxvb3NlRXF1YWwoYXJyW2ldLCB2YWwpKSByZXR1cm4gaVxuICB9XG4gIHJldHVybiAtMVxufVxuXG4vKipcbiAqIEVuc3VyZSBhIGZ1bmN0aW9uIGlzIGNhbGxlZCBvbmx5IG9uY2UuXG4gKi9cbmZ1bmN0aW9uIG9uY2UgKGZuKSB7XG4gIGxldCBjYWxsZWQgPSBmYWxzZTtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIWNhbGxlZCkge1xuICAgICAgY2FsbGVkID0gdHJ1ZTtcbiAgICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IFNTUl9BVFRSID0gJ2RhdGEtc2VydmVyLXJlbmRlcmVkJztcblxuY29uc3QgQVNTRVRfVFlQRVMgPSBbXG4gICdjb21wb25lbnQnLFxuICAnZGlyZWN0aXZlJyxcbiAgJ2ZpbHRlcidcbl07XG5cbmNvbnN0IExJRkVDWUNMRV9IT09LUyA9IFtcbiAgJ2JlZm9yZUNyZWF0ZScsXG4gICdjcmVhdGVkJyxcbiAgJ2JlZm9yZU1vdW50JyxcbiAgJ21vdW50ZWQnLFxuICAnYmVmb3JlVXBkYXRlJyxcbiAgJ3VwZGF0ZWQnLFxuICAnYmVmb3JlRGVzdHJveScsXG4gICdkZXN0cm95ZWQnLFxuICAnYWN0aXZhdGVkJyxcbiAgJ2RlYWN0aXZhdGVkJyxcbiAgJ2Vycm9yQ2FwdHVyZWQnLFxuICAnc2VydmVyUHJlZmV0Y2gnXG5dO1xuXG4vKiAgKi9cblxuXG5cbnZhciBjb25maWcgPSAoe1xuICAvKipcbiAgICogT3B0aW9uIG1lcmdlIHN0cmF0ZWdpZXMgKHVzZWQgaW4gY29yZS91dGlsL29wdGlvbnMpXG4gICAqL1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgb3B0aW9uTWVyZ2VTdHJhdGVnaWVzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHN1cHByZXNzIHdhcm5pbmdzLlxuICAgKi9cbiAgc2lsZW50OiBmYWxzZSxcblxuICAvKipcbiAgICogU2hvdyBwcm9kdWN0aW9uIG1vZGUgdGlwIG1lc3NhZ2Ugb24gYm9vdD9cbiAgICovXG4gIHByb2R1Y3Rpb25UaXA6IFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIGVuYWJsZSBkZXZ0b29sc1xuICAgKi9cbiAgZGV2dG9vbHM6IFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nLFxuXG4gIC8qKlxuICAgKiBXaGV0aGVyIHRvIHJlY29yZCBwZXJmXG4gICAqL1xuICBwZXJmb3JtYW5jZTogZmFsc2UsXG5cbiAgLyoqXG4gICAqIEVycm9yIGhhbmRsZXIgZm9yIHdhdGNoZXIgZXJyb3JzXG4gICAqL1xuICBlcnJvckhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIFdhcm4gaGFuZGxlciBmb3Igd2F0Y2hlciB3YXJuc1xuICAgKi9cbiAgd2FybkhhbmRsZXI6IG51bGwsXG5cbiAgLyoqXG4gICAqIElnbm9yZSBjZXJ0YWluIGN1c3RvbSBlbGVtZW50c1xuICAgKi9cbiAgaWdub3JlZEVsZW1lbnRzOiBbXSxcblxuICAvKipcbiAgICogQ3VzdG9tIHVzZXIga2V5IGFsaWFzZXMgZm9yIHYtb25cbiAgICovXG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBrZXlDb2RlczogT2JqZWN0LmNyZWF0ZShudWxsKSxcblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSB0YWcgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgcmVnaXN0ZXJlZCBhcyBhXG4gICAqIGNvbXBvbmVudC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICovXG4gIGlzUmVzZXJ2ZWRUYWc6IG5vLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgaXMgcmVzZXJ2ZWQgc28gdGhhdCBpdCBjYW5ub3QgYmUgdXNlZCBhcyBhIGNvbXBvbmVudFxuICAgKiBwcm9wLiBUaGlzIGlzIHBsYXRmb3JtLWRlcGVuZGVudCBhbmQgbWF5IGJlIG92ZXJ3cml0dGVuLlxuICAgKi9cbiAgaXNSZXNlcnZlZEF0dHI6IG5vLFxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHRhZyBpcyBhbiB1bmtub3duIGVsZW1lbnQuXG4gICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICovXG4gIGlzVW5rbm93bkVsZW1lbnQ6IG5vLFxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIG5hbWVzcGFjZSBvZiBhbiBlbGVtZW50XG4gICAqL1xuICBnZXRUYWdOYW1lc3BhY2U6IG5vb3AsXG5cbiAgLyoqXG4gICAqIFBhcnNlIHRoZSByZWFsIHRhZyBuYW1lIGZvciB0aGUgc3BlY2lmaWMgcGxhdGZvcm0uXG4gICAqL1xuICBwYXJzZVBsYXRmb3JtVGFnTmFtZTogaWRlbnRpdHksXG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBtdXN0IGJlIGJvdW5kIHVzaW5nIHByb3BlcnR5LCBlLmcuIHZhbHVlXG4gICAqIFBsYXRmb3JtLWRlcGVuZGVudC5cbiAgICovXG4gIG11c3RVc2VQcm9wOiBubyxcblxuICAvKipcbiAgICogUGVyZm9ybSB1cGRhdGVzIGFzeW5jaHJvbm91c2x5LiBJbnRlbmRlZCB0byBiZSB1c2VkIGJ5IFZ1ZSBUZXN0IFV0aWxzXG4gICAqIFRoaXMgd2lsbCBzaWduaWZpY2FudGx5IHJlZHVjZSBwZXJmb3JtYW5jZSBpZiBzZXQgdG8gZmFsc2UuXG4gICAqL1xuICBhc3luYzogdHJ1ZSxcblxuICAvKipcbiAgICogRXhwb3NlZCBmb3IgbGVnYWN5IHJlYXNvbnNcbiAgICovXG4gIF9saWZlY3ljbGVIb29rczogTElGRUNZQ0xFX0hPT0tTXG59KTtcblxuLyogICovXG5cbi8qKlxuICogdW5pY29kZSBsZXR0ZXJzIHVzZWQgZm9yIHBhcnNpbmcgaHRtbCB0YWdzLCBjb21wb25lbnQgbmFtZXMgYW5kIHByb3BlcnR5IHBhdGhzLlxuICogdXNpbmcgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1My9zZW1hbnRpY3Mtc2NyaXB0aW5nLmh0bWwjcG90ZW50aWFsY3VzdG9tZWxlbWVudG5hbWVcbiAqIHNraXBwaW5nIFxcdTEwMDAwLVxcdUVGRkZGIGR1ZSB0byBpdCBmcmVlemluZyB1cCBQaGFudG9tSlNcbiAqL1xuY29uc3QgdW5pY29kZUxldHRlcnMgPSAnYS16QS1aXFx1MDBCN1xcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwM0YtXFx1MjA0MFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRCc7XG5cbi8qKlxuICogQ2hlY2sgaWYgYSBzdHJpbmcgc3RhcnRzIHdpdGggJCBvciBfXG4gKi9cbmZ1bmN0aW9uIGlzUmVzZXJ2ZWQgKHN0cikge1xuICBjb25zdCBjID0gKHN0ciArICcnKS5jaGFyQ29kZUF0KDApO1xuICByZXR1cm4gYyA9PT0gMHgyNCB8fCBjID09PSAweDVGXG59XG5cbi8qKlxuICogRGVmaW5lIGEgcHJvcGVydHkuXG4gKi9cbmZ1bmN0aW9uIGRlZiAob2JqLCBrZXksIHZhbCwgZW51bWVyYWJsZSkge1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICB2YWx1ZTogdmFsLFxuICAgIGVudW1lcmFibGU6ICEhZW51bWVyYWJsZSxcbiAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWVcbiAgfSk7XG59XG5cbi8qKlxuICogUGFyc2Ugc2ltcGxlIHBhdGguXG4gKi9cbmNvbnN0IGJhaWxSRSA9IG5ldyBSZWdFeHAoYFteJHt1bmljb2RlTGV0dGVyc30uJF9cXFxcZF1gKTtcbmZ1bmN0aW9uIHBhcnNlUGF0aCAocGF0aCkge1xuICBpZiAoYmFpbFJFLnRlc3QocGF0aCkpIHtcbiAgICByZXR1cm5cbiAgfVxuICBjb25zdCBzZWdtZW50cyA9IHBhdGguc3BsaXQoJy4nKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChvYmopIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNlZ21lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoIW9iaikgcmV0dXJuXG4gICAgICBvYmogPSBvYmpbc2VnbWVudHNbaV1dO1xuICAgIH1cbiAgICByZXR1cm4gb2JqXG4gIH1cbn1cblxuLyogICovXG5cbi8vIGNhbiB3ZSB1c2UgX19wcm90b19fP1xuY29uc3QgaGFzUHJvdG8gPSAnX19wcm90b19fJyBpbiB7fTtcblxuLy8gQnJvd3NlciBlbnZpcm9ubWVudCBzbmlmZmluZ1xuY29uc3QgaW5Ccm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG5jb25zdCBpbldlZXggPSB0eXBlb2YgV1hFbnZpcm9ubWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgISFXWEVudmlyb25tZW50LnBsYXRmb3JtO1xuY29uc3Qgd2VleFBsYXRmb3JtID0gaW5XZWV4ICYmIFdYRW52aXJvbm1lbnQucGxhdGZvcm0udG9Mb3dlckNhc2UoKTtcbmNvbnN0IFVBID0gaW5Ccm93c2VyICYmIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG5jb25zdCBpc0lFID0gVUEgJiYgL21zaWV8dHJpZGVudC8udGVzdChVQSk7XG5jb25zdCBpc0lFOSA9IFVBICYmIFVBLmluZGV4T2YoJ21zaWUgOS4wJykgPiAwO1xuY29uc3QgaXNFZGdlID0gVUEgJiYgVUEuaW5kZXhPZignZWRnZS8nKSA+IDA7XG5jb25zdCBpc0FuZHJvaWQgPSAoVUEgJiYgVUEuaW5kZXhPZignYW5kcm9pZCcpID4gMCkgfHwgKHdlZXhQbGF0Zm9ybSA9PT0gJ2FuZHJvaWQnKTtcbmNvbnN0IGlzSU9TID0gKFVBICYmIC9pcGhvbmV8aXBhZHxpcG9kfGlvcy8udGVzdChVQSkpIHx8ICh3ZWV4UGxhdGZvcm0gPT09ICdpb3MnKTtcbmNvbnN0IGlzQ2hyb21lID0gVUEgJiYgL2Nocm9tZVxcL1xcZCsvLnRlc3QoVUEpICYmICFpc0VkZ2U7XG5jb25zdCBpc1BoYW50b21KUyA9IFVBICYmIC9waGFudG9tanMvLnRlc3QoVUEpO1xuY29uc3QgaXNGRiA9IFVBICYmIFVBLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLyk7XG5cbi8vIEZpcmVmb3ggaGFzIGEgXCJ3YXRjaFwiIGZ1bmN0aW9uIG9uIE9iamVjdC5wcm90b3R5cGUuLi5cbmNvbnN0IG5hdGl2ZVdhdGNoID0gKHt9KS53YXRjaDtcblxubGV0IHN1cHBvcnRzUGFzc2l2ZSA9IGZhbHNlO1xuaWYgKGluQnJvd3Nlcikge1xuICB0cnkge1xuICAgIGNvbnN0IG9wdHMgPSB7fTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob3B0cywgJ3Bhc3NpdmUnLCAoe1xuICAgICAgZ2V0ICgpIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICAgICAgc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KSk7IC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mbG93L2lzc3Vlcy8yODVcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdC1wYXNzaXZlJywgbnVsbCwgb3B0cyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59XG5cbi8vIHRoaXMgbmVlZHMgdG8gYmUgbGF6eS1ldmFsZWQgYmVjYXVzZSB2dWUgbWF5IGJlIHJlcXVpcmVkIGJlZm9yZVxuLy8gdnVlLXNlcnZlci1yZW5kZXJlciBjYW4gc2V0IFZVRV9FTlZcbmxldCBfaXNTZXJ2ZXI7XG5jb25zdCBpc1NlcnZlclJlbmRlcmluZyA9ICgpID0+IHtcbiAgaWYgKF9pc1NlcnZlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFpbkJyb3dzZXIgJiYgIWluV2VleCAmJiB0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgLy8gZGV0ZWN0IHByZXNlbmNlIG9mIHZ1ZS1zZXJ2ZXItcmVuZGVyZXIgYW5kIGF2b2lkXG4gICAgICAvLyBXZWJwYWNrIHNoaW1taW5nIHRoZSBwcm9jZXNzXG4gICAgICBfaXNTZXJ2ZXIgPSBnbG9iYWxbJ3Byb2Nlc3MnXSAmJiBnbG9iYWxbJ3Byb2Nlc3MnXS5lbnYuVlVFX0VOViA9PT0gJ3NlcnZlcic7XG4gICAgfSBlbHNlIHtcbiAgICAgIF9pc1NlcnZlciA9IGZhbHNlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gX2lzU2VydmVyXG59O1xuXG4vLyBkZXRlY3QgZGV2dG9vbHNcbmNvbnN0IGRldnRvb2xzID0gaW5Ccm93c2VyICYmIHdpbmRvdy5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuZnVuY3Rpb24gaXNOYXRpdmUgKEN0b3IpIHtcbiAgcmV0dXJuIHR5cGVvZiBDdG9yID09PSAnZnVuY3Rpb24nICYmIC9uYXRpdmUgY29kZS8udGVzdChDdG9yLnRvU3RyaW5nKCkpXG59XG5cbmNvbnN0IGhhc1N5bWJvbCA9XG4gIHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFN5bWJvbCkgJiZcbiAgdHlwZW9mIFJlZmxlY3QgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFJlZmxlY3Qub3duS2V5cyk7XG5cbmxldCBfU2V0O1xuLyogaXN0YW5idWwgaWdub3JlIGlmICovIC8vICRmbG93LWRpc2FibGUtbGluZVxuaWYgKHR5cGVvZiBTZXQgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFNldCkpIHtcbiAgLy8gdXNlIG5hdGl2ZSBTZXQgd2hlbiBhdmFpbGFibGUuXG4gIF9TZXQgPSBTZXQ7XG59IGVsc2Uge1xuICAvLyBhIG5vbi1zdGFuZGFyZCBTZXQgcG9seWZpbGwgdGhhdCBvbmx5IHdvcmtzIHdpdGggcHJpbWl0aXZlIGtleXMuXG4gIF9TZXQgPSBjbGFzcyBTZXQgICB7XG4gICAgXG4gICAgY29uc3RydWN0b3IgKCkge1xuICAgICAgdGhpcy5zZXQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIH1cbiAgICBoYXMgKGtleSkge1xuICAgICAgcmV0dXJuIHRoaXMuc2V0W2tleV0gPT09IHRydWVcbiAgICB9XG4gICAgYWRkIChrZXkpIHtcbiAgICAgIHRoaXMuc2V0W2tleV0gPSB0cnVlO1xuICAgIH1cbiAgICBjbGVhciAoKSB7XG4gICAgICB0aGlzLnNldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgfVxuICB9O1xufVxuXG4vKiAgKi9cblxubGV0IHdhcm4gPSBub29wO1xubGV0IHRpcCA9IG5vb3A7XG5sZXQgZ2VuZXJhdGVDb21wb25lbnRUcmFjZSA9IChub29wKTsgLy8gd29yayBhcm91bmQgZmxvdyBjaGVja1xubGV0IGZvcm1hdENvbXBvbmVudE5hbWUgPSAobm9vcCk7XG5cbntcbiAgY29uc3QgaGFzQ29uc29sZSA9IHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJztcbiAgY29uc3QgY2xhc3NpZnlSRSA9IC8oPzpefFstX10pKFxcdykvZztcbiAgY29uc3QgY2xhc3NpZnkgPSBzdHIgPT4gc3RyXG4gICAgLnJlcGxhY2UoY2xhc3NpZnlSRSwgYyA9PiBjLnRvVXBwZXJDYXNlKCkpXG4gICAgLnJlcGxhY2UoL1stX10vZywgJycpO1xuXG4gIHdhcm4gPSAobXNnLCB2bSkgPT4ge1xuICAgIGNvbnN0IHRyYWNlID0gdm0gPyBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlKHZtKSA6ICcnO1xuXG4gICAgaWYgKGNvbmZpZy53YXJuSGFuZGxlcikge1xuICAgICAgY29uZmlnLndhcm5IYW5kbGVyLmNhbGwobnVsbCwgbXNnLCB2bSwgdHJhY2UpO1xuICAgIH0gZWxzZSBpZiAoaGFzQ29uc29sZSAmJiAoIWNvbmZpZy5zaWxlbnQpKSB7XG4gICAgICBjb25zb2xlLmVycm9yKGBbVnVlIHdhcm5dOiAke21zZ30ke3RyYWNlfWApO1xuICAgIH1cbiAgfTtcblxuICB0aXAgPSAobXNnLCB2bSkgPT4ge1xuICAgIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcbiAgICAgIGNvbnNvbGUud2FybihgW1Z1ZSB0aXBdOiAke21zZ31gICsgKFxuICAgICAgICB2bSA/IGdlbmVyYXRlQ29tcG9uZW50VHJhY2Uodm0pIDogJydcbiAgICAgICkpO1xuICAgIH1cbiAgfTtcblxuICBmb3JtYXRDb21wb25lbnROYW1lID0gKHZtLCBpbmNsdWRlRmlsZSkgPT4ge1xuICAgIGlmICh2bS4kcm9vdCA9PT0gdm0pIHtcbiAgICAgIHJldHVybiAnPFJvb3Q+J1xuICAgIH1cbiAgICBjb25zdCBvcHRpb25zID0gdHlwZW9mIHZtID09PSAnZnVuY3Rpb24nICYmIHZtLmNpZCAhPSBudWxsXG4gICAgICA/IHZtLm9wdGlvbnNcbiAgICAgIDogdm0uX2lzVnVlXG4gICAgICAgID8gdm0uJG9wdGlvbnMgfHwgdm0uY29uc3RydWN0b3Iub3B0aW9uc1xuICAgICAgICA6IHZtO1xuICAgIGxldCBuYW1lID0gb3B0aW9ucy5uYW1lIHx8IG9wdGlvbnMuX2NvbXBvbmVudFRhZztcbiAgICBjb25zdCBmaWxlID0gb3B0aW9ucy5fX2ZpbGU7XG4gICAgaWYgKCFuYW1lICYmIGZpbGUpIHtcbiAgICAgIGNvbnN0IG1hdGNoID0gZmlsZS5tYXRjaCgvKFteL1xcXFxdKylcXC52dWUkLyk7XG4gICAgICBuYW1lID0gbWF0Y2ggJiYgbWF0Y2hbMV07XG4gICAgfVxuXG4gICAgcmV0dXJuIChcbiAgICAgIChuYW1lID8gYDwke2NsYXNzaWZ5KG5hbWUpfT5gIDogYDxBbm9ueW1vdXM+YCkgK1xuICAgICAgKGZpbGUgJiYgaW5jbHVkZUZpbGUgIT09IGZhbHNlID8gYCBhdCAke2ZpbGV9YCA6ICcnKVxuICAgIClcbiAgfTtcblxuICBjb25zdCByZXBlYXQgPSAoc3RyLCBuKSA9PiB7XG4gICAgbGV0IHJlcyA9ICcnO1xuICAgIHdoaWxlIChuKSB7XG4gICAgICBpZiAobiAlIDIgPT09IDEpIHJlcyArPSBzdHI7XG4gICAgICBpZiAobiA+IDEpIHN0ciArPSBzdHI7XG4gICAgICBuID4+PSAxO1xuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH07XG5cbiAgZ2VuZXJhdGVDb21wb25lbnRUcmFjZSA9IHZtID0+IHtcbiAgICBpZiAodm0uX2lzVnVlICYmIHZtLiRwYXJlbnQpIHtcbiAgICAgIGNvbnN0IHRyZWUgPSBbXTtcbiAgICAgIGxldCBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPSAwO1xuICAgICAgd2hpbGUgKHZtKSB7XG4gICAgICAgIGlmICh0cmVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICBjb25zdCBsYXN0ID0gdHJlZVt0cmVlLmxlbmd0aCAtIDFdO1xuICAgICAgICAgIGlmIChsYXN0LmNvbnN0cnVjdG9yID09PSB2bS5jb25zdHJ1Y3Rvcikge1xuICAgICAgICAgICAgY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlKys7XG4gICAgICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSBpZiAoY3VycmVudFJlY3Vyc2l2ZVNlcXVlbmNlID4gMCkge1xuICAgICAgICAgICAgdHJlZVt0cmVlLmxlbmd0aCAtIDFdID0gW2xhc3QsIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZV07XG4gICAgICAgICAgICBjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UgPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0cmVlLnB1c2godm0pO1xuICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gJ1xcblxcbmZvdW5kIGluXFxuXFxuJyArIHRyZWVcbiAgICAgICAgLm1hcCgodm0sIGkpID0+IGAke1xuICAgICAgICAgIGkgPT09IDAgPyAnLS0tPiAnIDogcmVwZWF0KCcgJywgNSArIGkgKiAyKVxuICAgICAgICB9JHtcbiAgICAgICAgICBBcnJheS5pc0FycmF5KHZtKVxuICAgICAgICAgICAgPyBgJHtmb3JtYXRDb21wb25lbnROYW1lKHZtWzBdKX0uLi4gKCR7dm1bMV19IHJlY3Vyc2l2ZSBjYWxscylgXG4gICAgICAgICAgICA6IGZvcm1hdENvbXBvbmVudE5hbWUodm0pXG4gICAgICAgIH1gKVxuICAgICAgICAuam9pbignXFxuJylcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGBcXG5cXG4oZm91bmQgaW4gJHtmb3JtYXRDb21wb25lbnROYW1lKHZtKX0pYFxuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbmxldCB1aWQgPSAwO1xuXG4vKipcbiAqIEEgZGVwIGlzIGFuIG9ic2VydmFibGUgdGhhdCBjYW4gaGF2ZSBtdWx0aXBsZVxuICogZGlyZWN0aXZlcyBzdWJzY3JpYmluZyB0byBpdC5cbiAqL1xuY2xhc3MgRGVwIHtcbiAgXG4gIFxuICBcblxuICBjb25zdHJ1Y3RvciAoKSB7XG4gICAgdGhpcy5pZCA9IHVpZCsrO1xuICAgIHRoaXMuc3VicyA9IFtdO1xuICB9XG5cbiAgYWRkU3ViIChzdWIpIHtcbiAgICB0aGlzLnN1YnMucHVzaChzdWIpO1xuICB9XG5cbiAgcmVtb3ZlU3ViIChzdWIpIHtcbiAgICByZW1vdmUodGhpcy5zdWJzLCBzdWIpO1xuICB9XG5cbiAgZGVwZW5kICgpIHtcbiAgICBpZiAoRGVwLnRhcmdldCkge1xuICAgICAgRGVwLnRhcmdldC5hZGREZXAodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgbm90aWZ5ICgpIHtcbiAgICAvLyBzdGFiaWxpemUgdGhlIHN1YnNjcmliZXIgbGlzdCBmaXJzdFxuICAgIGNvbnN0IHN1YnMgPSB0aGlzLnN1YnMuc2xpY2UoKTtcbiAgICBpZiAoIWNvbmZpZy5hc3luYykge1xuICAgICAgLy8gc3VicyBhcmVuJ3Qgc29ydGVkIGluIHNjaGVkdWxlciBpZiBub3QgcnVubmluZyBhc3luY1xuICAgICAgLy8gd2UgbmVlZCB0byBzb3J0IHRoZW0gbm93IHRvIG1ha2Ugc3VyZSB0aGV5IGZpcmUgaW4gY29ycmVjdFxuICAgICAgLy8gb3JkZXJcbiAgICAgIHN1YnMuc29ydCgoYSwgYikgPT4gYS5pZCAtIGIuaWQpO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IHN1YnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBzdWJzW2ldLnVwZGF0ZSgpO1xuICAgIH1cbiAgfVxufVxuXG4vLyBUaGUgY3VycmVudCB0YXJnZXQgd2F0Y2hlciBiZWluZyBldmFsdWF0ZWQuXG4vLyBUaGlzIGlzIGdsb2JhbGx5IHVuaXF1ZSBiZWNhdXNlIG9ubHkgb25lIHdhdGNoZXJcbi8vIGNhbiBiZSBldmFsdWF0ZWQgYXQgYSB0aW1lLlxuRGVwLnRhcmdldCA9IG51bGw7XG5jb25zdCB0YXJnZXRTdGFjayA9IFtdO1xuXG5mdW5jdGlvbiBwdXNoVGFyZ2V0ICh0YXJnZXQpIHtcbiAgdGFyZ2V0U3RhY2sucHVzaCh0YXJnZXQpO1xuICBEZXAudGFyZ2V0ID0gdGFyZ2V0O1xufVxuXG5mdW5jdGlvbiBwb3BUYXJnZXQgKCkge1xuICB0YXJnZXRTdGFjay5wb3AoKTtcbiAgRGVwLnRhcmdldCA9IHRhcmdldFN0YWNrW3RhcmdldFN0YWNrLmxlbmd0aCAtIDFdO1xufVxuXG4vKiAgKi9cblxuY2xhc3MgVk5vZGUge1xuICBcbiAgXG4gIFxuICBcbiAgXG4gIFxuICAgLy8gcmVuZGVyZWQgaW4gdGhpcyBjb21wb25lbnQncyBzY29wZVxuICBcbiAgXG4gICAvLyBjb21wb25lbnQgaW5zdGFuY2VcbiAgIC8vIGNvbXBvbmVudCBwbGFjZWhvbGRlciBub2RlXG5cbiAgLy8gc3RyaWN0bHkgaW50ZXJuYWxcbiAgIC8vIGNvbnRhaW5zIHJhdyBIVE1MPyAoc2VydmVyIG9ubHkpXG4gICAvLyBob2lzdGVkIHN0YXRpYyBub2RlXG4gICAvLyBuZWNlc3NhcnkgZm9yIGVudGVyIHRyYW5zaXRpb24gY2hlY2tcbiAgIC8vIGVtcHR5IGNvbW1lbnQgcGxhY2Vob2xkZXI/XG4gICAvLyBpcyBhIGNsb25lZCBub2RlP1xuICAgLy8gaXMgYSB2LW9uY2Ugbm9kZT9cbiAgIC8vIGFzeW5jIGNvbXBvbmVudCBmYWN0b3J5IGZ1bmN0aW9uXG4gIFxuICBcbiAgXG4gICAvLyByZWFsIGNvbnRleHQgdm0gZm9yIGZ1bmN0aW9uYWwgbm9kZXNcbiAgIC8vIGZvciBTU1IgY2FjaGluZ1xuICAgLy8gdXNlZCB0byBzdG9yZSBmdW5jdGlvbmFsIHJlbmRlciBjb250ZXh0IGZvciBkZXZ0b29sc1xuICAgLy8gZnVuY3Rpb25hbCBzY29wZSBpZCBzdXBwb3J0XG5cbiAgY29uc3RydWN0b3IgKFxuICAgIHRhZyxcbiAgICBkYXRhLFxuICAgIGNoaWxkcmVuLFxuICAgIHRleHQsXG4gICAgZWxtLFxuICAgIGNvbnRleHQsXG4gICAgY29tcG9uZW50T3B0aW9ucyxcbiAgICBhc3luY0ZhY3RvcnlcbiAgKSB7XG4gICAgdGhpcy50YWcgPSB0YWc7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gICAgdGhpcy50ZXh0ID0gdGV4dDtcbiAgICB0aGlzLmVsbSA9IGVsbTtcbiAgICB0aGlzLm5zID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuY29udGV4dCA9IGNvbnRleHQ7XG4gICAgdGhpcy5mbkNvbnRleHQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5mbk9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5mblNjb3BlSWQgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5rZXkgPSBkYXRhICYmIGRhdGEua2V5O1xuICAgIHRoaXMuY29tcG9uZW50T3B0aW9ucyA9IGNvbXBvbmVudE9wdGlvbnM7XG4gICAgdGhpcy5jb21wb25lbnRJbnN0YW5jZSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnBhcmVudCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLnJhdyA9IGZhbHNlO1xuICAgIHRoaXMuaXNTdGF0aWMgPSBmYWxzZTtcbiAgICB0aGlzLmlzUm9vdEluc2VydCA9IHRydWU7XG4gICAgdGhpcy5pc0NvbW1lbnQgPSBmYWxzZTtcbiAgICB0aGlzLmlzQ2xvbmVkID0gZmFsc2U7XG4gICAgdGhpcy5pc09uY2UgPSBmYWxzZTtcbiAgICB0aGlzLmFzeW5jRmFjdG9yeSA9IGFzeW5jRmFjdG9yeTtcbiAgICB0aGlzLmFzeW5jTWV0YSA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmlzQXN5bmNQbGFjZWhvbGRlciA9IGZhbHNlO1xuICB9XG5cbiAgLy8gREVQUkVDQVRFRDogYWxpYXMgZm9yIGNvbXBvbmVudEluc3RhbmNlIGZvciBiYWNrd2FyZHMgY29tcGF0LlxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBnZXQgY2hpbGQgKCkge1xuICAgIHJldHVybiB0aGlzLmNvbXBvbmVudEluc3RhbmNlXG4gIH1cbn1cblxuY29uc3QgY3JlYXRlRW1wdHlWTm9kZSA9ICh0ZXh0ID0gJycpID0+IHtcbiAgY29uc3Qgbm9kZSA9IG5ldyBWTm9kZSgpO1xuICBub2RlLnRleHQgPSB0ZXh0O1xuICBub2RlLmlzQ29tbWVudCA9IHRydWU7XG4gIHJldHVybiBub2RlXG59O1xuXG5mdW5jdGlvbiBjcmVhdGVUZXh0Vk5vZGUgKHZhbCkge1xuICByZXR1cm4gbmV3IFZOb2RlKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFN0cmluZyh2YWwpKVxufVxuXG4vLyBvcHRpbWl6ZWQgc2hhbGxvdyBjbG9uZVxuLy8gdXNlZCBmb3Igc3RhdGljIG5vZGVzIGFuZCBzbG90IG5vZGVzIGJlY2F1c2UgdGhleSBtYXkgYmUgcmV1c2VkIGFjcm9zc1xuLy8gbXVsdGlwbGUgcmVuZGVycywgY2xvbmluZyB0aGVtIGF2b2lkcyBlcnJvcnMgd2hlbiBET00gbWFuaXB1bGF0aW9ucyByZWx5XG4vLyBvbiB0aGVpciBlbG0gcmVmZXJlbmNlLlxuZnVuY3Rpb24gY2xvbmVWTm9kZSAodm5vZGUpIHtcbiAgY29uc3QgY2xvbmVkID0gbmV3IFZOb2RlKFxuICAgIHZub2RlLnRhZyxcbiAgICB2bm9kZS5kYXRhLFxuICAgIC8vICM3OTc1XG4gICAgLy8gY2xvbmUgY2hpbGRyZW4gYXJyYXkgdG8gYXZvaWQgbXV0YXRpbmcgb3JpZ2luYWwgaW4gY2FzZSBvZiBjbG9uaW5nXG4gICAgLy8gYSBjaGlsZC5cbiAgICB2bm9kZS5jaGlsZHJlbiAmJiB2bm9kZS5jaGlsZHJlbi5zbGljZSgpLFxuICAgIHZub2RlLnRleHQsXG4gICAgdm5vZGUuZWxtLFxuICAgIHZub2RlLmNvbnRleHQsXG4gICAgdm5vZGUuY29tcG9uZW50T3B0aW9ucyxcbiAgICB2bm9kZS5hc3luY0ZhY3RvcnlcbiAgKTtcbiAgY2xvbmVkLm5zID0gdm5vZGUubnM7XG4gIGNsb25lZC5pc1N0YXRpYyA9IHZub2RlLmlzU3RhdGljO1xuICBjbG9uZWQua2V5ID0gdm5vZGUua2V5O1xuICBjbG9uZWQuaXNDb21tZW50ID0gdm5vZGUuaXNDb21tZW50O1xuICBjbG9uZWQuZm5Db250ZXh0ID0gdm5vZGUuZm5Db250ZXh0O1xuICBjbG9uZWQuZm5PcHRpb25zID0gdm5vZGUuZm5PcHRpb25zO1xuICBjbG9uZWQuZm5TY29wZUlkID0gdm5vZGUuZm5TY29wZUlkO1xuICBjbG9uZWQuYXN5bmNNZXRhID0gdm5vZGUuYXN5bmNNZXRhO1xuICBjbG9uZWQuaXNDbG9uZWQgPSB0cnVlO1xuICByZXR1cm4gY2xvbmVkXG59XG5cbi8qXG4gKiBub3QgdHlwZSBjaGVja2luZyB0aGlzIGZpbGUgYmVjYXVzZSBmbG93IGRvZXNuJ3QgcGxheSB3ZWxsIHdpdGhcbiAqIGR5bmFtaWNhbGx5IGFjY2Vzc2luZyBtZXRob2RzIG9uIEFycmF5IHByb3RvdHlwZVxuICovXG5cbmNvbnN0IGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5jb25zdCBhcnJheU1ldGhvZHMgPSBPYmplY3QuY3JlYXRlKGFycmF5UHJvdG8pO1xuXG5jb25zdCBtZXRob2RzVG9QYXRjaCA9IFtcbiAgJ3B1c2gnLFxuICAncG9wJyxcbiAgJ3NoaWZ0JyxcbiAgJ3Vuc2hpZnQnLFxuICAnc3BsaWNlJyxcbiAgJ3NvcnQnLFxuICAncmV2ZXJzZSdcbl07XG5cbi8qKlxuICogSW50ZXJjZXB0IG11dGF0aW5nIG1ldGhvZHMgYW5kIGVtaXQgZXZlbnRzXG4gKi9cbm1ldGhvZHNUb1BhdGNoLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xuICAvLyBjYWNoZSBvcmlnaW5hbCBtZXRob2RcbiAgY29uc3Qgb3JpZ2luYWwgPSBhcnJheVByb3RvW21ldGhvZF07XG4gIGRlZihhcnJheU1ldGhvZHMsIG1ldGhvZCwgZnVuY3Rpb24gbXV0YXRvciAoLi4uYXJncykge1xuICAgIGNvbnN0IHJlc3VsdCA9IG9yaWdpbmFsLmFwcGx5KHRoaXMsIGFyZ3MpO1xuICAgIGNvbnN0IG9iID0gdGhpcy5fX29iX187XG4gICAgbGV0IGluc2VydGVkO1xuICAgIHN3aXRjaCAobWV0aG9kKSB7XG4gICAgICBjYXNlICdwdXNoJzpcbiAgICAgIGNhc2UgJ3Vuc2hpZnQnOlxuICAgICAgICBpbnNlcnRlZCA9IGFyZ3M7XG4gICAgICAgIGJyZWFrXG4gICAgICBjYXNlICdzcGxpY2UnOlxuICAgICAgICBpbnNlcnRlZCA9IGFyZ3Muc2xpY2UoMik7XG4gICAgICAgIGJyZWFrXG4gICAgfVxuICAgIGlmIChpbnNlcnRlZCkgb2Iub2JzZXJ2ZUFycmF5KGluc2VydGVkKTtcbiAgICAvLyBub3RpZnkgY2hhbmdlXG4gICAgb2IuZGVwLm5vdGlmeSgpO1xuICAgIHJldHVybiByZXN1bHRcbiAgfSk7XG59KTtcblxuLyogICovXG5cbmNvbnN0IGFycmF5S2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGFycmF5TWV0aG9kcyk7XG5cbi8qKlxuICogSW4gc29tZSBjYXNlcyB3ZSBtYXkgd2FudCB0byBkaXNhYmxlIG9ic2VydmF0aW9uIGluc2lkZSBhIGNvbXBvbmVudCdzXG4gKiB1cGRhdGUgY29tcHV0YXRpb24uXG4gKi9cbmxldCBzaG91bGRPYnNlcnZlID0gdHJ1ZTtcblxuZnVuY3Rpb24gdG9nZ2xlT2JzZXJ2aW5nICh2YWx1ZSkge1xuICBzaG91bGRPYnNlcnZlID0gdmFsdWU7XG59XG5cbi8qKlxuICogT2JzZXJ2ZXIgY2xhc3MgdGhhdCBpcyBhdHRhY2hlZCB0byBlYWNoIG9ic2VydmVkXG4gKiBvYmplY3QuIE9uY2UgYXR0YWNoZWQsIHRoZSBvYnNlcnZlciBjb252ZXJ0cyB0aGUgdGFyZ2V0XG4gKiBvYmplY3QncyBwcm9wZXJ0eSBrZXlzIGludG8gZ2V0dGVyL3NldHRlcnMgdGhhdFxuICogY29sbGVjdCBkZXBlbmRlbmNpZXMgYW5kIGRpc3BhdGNoIHVwZGF0ZXMuXG4gKi9cbmNsYXNzIE9ic2VydmVyIHtcbiAgXG4gIFxuICAgLy8gbnVtYmVyIG9mIHZtcyB0aGF0IGhhdmUgdGhpcyBvYmplY3QgYXMgcm9vdCAkZGF0YVxuXG4gIGNvbnN0cnVjdG9yICh2YWx1ZSkge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLmRlcCA9IG5ldyBEZXAoKTtcbiAgICB0aGlzLnZtQ291bnQgPSAwO1xuICAgIGRlZih2YWx1ZSwgJ19fb2JfXycsIHRoaXMpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgaWYgKGhhc1Byb3RvKSB7XG4gICAgICAgIHByb3RvQXVnbWVudCh2YWx1ZSwgYXJyYXlNZXRob2RzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvcHlBdWdtZW50KHZhbHVlLCBhcnJheU1ldGhvZHMsIGFycmF5S2V5cyk7XG4gICAgICB9XG4gICAgICB0aGlzLm9ic2VydmVBcnJheSh2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud2Fsayh2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFdhbGsgdGhyb3VnaCBhbGwgcHJvcGVydGllcyBhbmQgY29udmVydCB0aGVtIGludG9cbiAgICogZ2V0dGVyL3NldHRlcnMuIFRoaXMgbWV0aG9kIHNob3VsZCBvbmx5IGJlIGNhbGxlZCB3aGVuXG4gICAqIHZhbHVlIHR5cGUgaXMgT2JqZWN0LlxuICAgKi9cbiAgd2FsayAob2JqKSB7XG4gICAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKG9iaik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkZWZpbmVSZWFjdGl2ZSQkMShvYmosIGtleXNbaV0pO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBPYnNlcnZlIGEgbGlzdCBvZiBBcnJheSBpdGVtcy5cbiAgICovXG4gIG9ic2VydmVBcnJheSAoaXRlbXMpIHtcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IGl0ZW1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgb2JzZXJ2ZShpdGVtc1tpXSk7XG4gICAgfVxuICB9XG59XG5cbi8vIGhlbHBlcnNcblxuLyoqXG4gKiBBdWdtZW50IGEgdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBpbnRlcmNlcHRpbmdcbiAqIHRoZSBwcm90b3R5cGUgY2hhaW4gdXNpbmcgX19wcm90b19fXG4gKi9cbmZ1bmN0aW9uIHByb3RvQXVnbWVudCAodGFyZ2V0LCBzcmMpIHtcbiAgLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbiAgdGFyZ2V0Ll9fcHJvdG9fXyA9IHNyYztcbiAgLyogZXNsaW50LWVuYWJsZSBuby1wcm90byAqL1xufVxuXG4vKipcbiAqIEF1Z21lbnQgYSB0YXJnZXQgT2JqZWN0IG9yIEFycmF5IGJ5IGRlZmluaW5nXG4gKiBoaWRkZW4gcHJvcGVydGllcy5cbiAqL1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmZ1bmN0aW9uIGNvcHlBdWdtZW50ICh0YXJnZXQsIHNyYywga2V5cykge1xuICBmb3IgKGxldCBpID0gMCwgbCA9IGtleXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgY29uc3Qga2V5ID0ga2V5c1tpXTtcbiAgICBkZWYodGFyZ2V0LCBrZXksIHNyY1trZXldKTtcbiAgfVxufVxuXG4vKipcbiAqIEF0dGVtcHQgdG8gY3JlYXRlIGFuIG9ic2VydmVyIGluc3RhbmNlIGZvciBhIHZhbHVlLFxuICogcmV0dXJucyB0aGUgbmV3IG9ic2VydmVyIGlmIHN1Y2Nlc3NmdWxseSBvYnNlcnZlZCxcbiAqIG9yIHRoZSBleGlzdGluZyBvYnNlcnZlciBpZiB0aGUgdmFsdWUgYWxyZWFkeSBoYXMgb25lLlxuICovXG5mdW5jdGlvbiBvYnNlcnZlICh2YWx1ZSwgYXNSb290RGF0YSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCB2YWx1ZSBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgbGV0IG9iO1xuICBpZiAoaGFzT3duKHZhbHVlLCAnX19vYl9fJykgJiYgdmFsdWUuX19vYl9fIGluc3RhbmNlb2YgT2JzZXJ2ZXIpIHtcbiAgICBvYiA9IHZhbHVlLl9fb2JfXztcbiAgfSBlbHNlIGlmIChcbiAgICBzaG91bGRPYnNlcnZlICYmXG4gICAgIWlzU2VydmVyUmVuZGVyaW5nKCkgJiZcbiAgICAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgfHwgaXNQbGFpbk9iamVjdCh2YWx1ZSkpICYmXG4gICAgT2JqZWN0LmlzRXh0ZW5zaWJsZSh2YWx1ZSkgJiZcbiAgICAhdmFsdWUuX2lzVnVlXG4gICkge1xuICAgIG9iID0gbmV3IE9ic2VydmVyKHZhbHVlKTtcbiAgfVxuICBpZiAoYXNSb290RGF0YSAmJiBvYikge1xuICAgIG9iLnZtQ291bnQrKztcbiAgfVxuICByZXR1cm4gb2Jcbn1cblxuLyoqXG4gKiBEZWZpbmUgYSByZWFjdGl2ZSBwcm9wZXJ0eSBvbiBhbiBPYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGRlZmluZVJlYWN0aXZlJCQxIChcbiAgb2JqLFxuICBrZXksXG4gIHZhbCxcbiAgY3VzdG9tU2V0dGVyLFxuICBzaGFsbG93XG4pIHtcbiAgY29uc3QgZGVwID0gbmV3IERlcCgpO1xuXG4gIGNvbnN0IHByb3BlcnR5ID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSk7XG4gIGlmIChwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5jb25maWd1cmFibGUgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvLyBjYXRlciBmb3IgcHJlLWRlZmluZWQgZ2V0dGVyL3NldHRlcnNcbiAgY29uc3QgZ2V0dGVyID0gcHJvcGVydHkgJiYgcHJvcGVydHkuZ2V0O1xuICBjb25zdCBzZXR0ZXIgPSBwcm9wZXJ0eSAmJiBwcm9wZXJ0eS5zZXQ7XG4gIGlmICgoIWdldHRlciB8fCBzZXR0ZXIpICYmIGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICB2YWwgPSBvYmpba2V5XTtcbiAgfVxuXG4gIGxldCBjaGlsZE9iID0gIXNoYWxsb3cgJiYgb2JzZXJ2ZSh2YWwpO1xuICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIHJlYWN0aXZlR2V0dGVyICgpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcbiAgICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICAgIGRlcC5kZXBlbmQoKTtcbiAgICAgICAgaWYgKGNoaWxkT2IpIHtcbiAgICAgICAgICBjaGlsZE9iLmRlcC5kZXBlbmQoKTtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIGRlcGVuZEFycmF5KHZhbHVlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiB2YWx1ZVxuICAgIH0sXG4gICAgc2V0OiBmdW5jdGlvbiByZWFjdGl2ZVNldHRlciAobmV3VmFsKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IGdldHRlciA/IGdldHRlci5jYWxsKG9iaikgOiB2YWw7XG4gICAgICAvKiBlc2xpbnQtZGlzYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cbiAgICAgIGlmIChuZXdWYWwgPT09IHZhbHVlIHx8IChuZXdWYWwgIT09IG5ld1ZhbCAmJiB2YWx1ZSAhPT0gdmFsdWUpKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cbiAgICAgIGlmIChjdXN0b21TZXR0ZXIpIHtcbiAgICAgICAgY3VzdG9tU2V0dGVyKCk7XG4gICAgICB9XG4gICAgICAvLyAjNzk4MTogZm9yIGFjY2Vzc29yIHByb3BlcnRpZXMgd2l0aG91dCBzZXR0ZXJcbiAgICAgIGlmIChnZXR0ZXIgJiYgIXNldHRlcikgcmV0dXJuXG4gICAgICBpZiAoc2V0dGVyKSB7XG4gICAgICAgIHNldHRlci5jYWxsKG9iaiwgbmV3VmFsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhbCA9IG5ld1ZhbDtcbiAgICAgIH1cbiAgICAgIGNoaWxkT2IgPSAhc2hhbGxvdyAmJiBvYnNlcnZlKG5ld1ZhbCk7XG4gICAgICBkZXAubm90aWZ5KCk7XG4gICAgfVxuICB9KTtcbn1cblxuLyoqXG4gKiBTZXQgYSBwcm9wZXJ0eSBvbiBhbiBvYmplY3QuIEFkZHMgdGhlIG5ldyBwcm9wZXJ0eSBhbmRcbiAqIHRyaWdnZXJzIGNoYW5nZSBub3RpZmljYXRpb24gaWYgdGhlIHByb3BlcnR5IGRvZXNuJ3RcbiAqIGFscmVhZHkgZXhpc3QuXG4gKi9cbmZ1bmN0aW9uIHNldCAodGFyZ2V0LCBrZXksIHZhbCkge1xuICBpZiAoaXNVbmRlZih0YXJnZXQpIHx8IGlzUHJpbWl0aXZlKHRhcmdldClcbiAgKSB7XG4gICAgd2FybihgQ2Fubm90IHNldCByZWFjdGl2ZSBwcm9wZXJ0eSBvbiB1bmRlZmluZWQsIG51bGwsIG9yIHByaW1pdGl2ZSB2YWx1ZTogJHsodGFyZ2V0KX1gKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHtcbiAgICB0YXJnZXQubGVuZ3RoID0gTWF0aC5tYXgodGFyZ2V0Lmxlbmd0aCwga2V5KTtcbiAgICB0YXJnZXQuc3BsaWNlKGtleSwgMSwgdmFsKTtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgaWYgKGtleSBpbiB0YXJnZXQgJiYgIShrZXkgaW4gT2JqZWN0LnByb3RvdHlwZSkpIHtcbiAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgY29uc3Qgb2IgPSAodGFyZ2V0KS5fX29iX187XG4gIGlmICh0YXJnZXQuX2lzVnVlIHx8IChvYiAmJiBvYi52bUNvdW50KSkge1xuICAgIHdhcm4oXG4gICAgICAnQXZvaWQgYWRkaW5nIHJlYWN0aXZlIHByb3BlcnRpZXMgdG8gYSBWdWUgaW5zdGFuY2Ugb3IgaXRzIHJvb3QgJGRhdGEgJyArXG4gICAgICAnYXQgcnVudGltZSAtIGRlY2xhcmUgaXQgdXBmcm9udCBpbiB0aGUgZGF0YSBvcHRpb24uJ1xuICAgICk7XG4gICAgcmV0dXJuIHZhbFxuICB9XG4gIGlmICghb2IpIHtcbiAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICByZXR1cm4gdmFsXG4gIH1cbiAgZGVmaW5lUmVhY3RpdmUkJDEob2IudmFsdWUsIGtleSwgdmFsKTtcbiAgb2IuZGVwLm5vdGlmeSgpO1xuICByZXR1cm4gdmFsXG59XG5cbi8qKlxuICogRGVsZXRlIGEgcHJvcGVydHkgYW5kIHRyaWdnZXIgY2hhbmdlIGlmIG5lY2Vzc2FyeS5cbiAqL1xuZnVuY3Rpb24gZGVsICh0YXJnZXQsIGtleSkge1xuICBpZiAoaXNVbmRlZih0YXJnZXQpIHx8IGlzUHJpbWl0aXZlKHRhcmdldClcbiAgKSB7XG4gICAgd2FybihgQ2Fubm90IGRlbGV0ZSByZWFjdGl2ZSBwcm9wZXJ0eSBvbiB1bmRlZmluZWQsIG51bGwsIG9yIHByaW1pdGl2ZSB2YWx1ZTogJHsodGFyZ2V0KX1gKTtcbiAgfVxuICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHtcbiAgICB0YXJnZXQuc3BsaWNlKGtleSwgMSk7XG4gICAgcmV0dXJuXG4gIH1cbiAgY29uc3Qgb2IgPSAodGFyZ2V0KS5fX29iX187XG4gIGlmICh0YXJnZXQuX2lzVnVlIHx8IChvYiAmJiBvYi52bUNvdW50KSkge1xuICAgIHdhcm4oXG4gICAgICAnQXZvaWQgZGVsZXRpbmcgcHJvcGVydGllcyBvbiBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcbiAgICAgICctIGp1c3Qgc2V0IGl0IHRvIG51bGwuJ1xuICAgICk7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKCFoYXNPd24odGFyZ2V0LCBrZXkpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgZGVsZXRlIHRhcmdldFtrZXldO1xuICBpZiAoIW9iKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgb2IuZGVwLm5vdGlmeSgpO1xufVxuXG4vKipcbiAqIENvbGxlY3QgZGVwZW5kZW5jaWVzIG9uIGFycmF5IGVsZW1lbnRzIHdoZW4gdGhlIGFycmF5IGlzIHRvdWNoZWQsIHNpbmNlXG4gKiB3ZSBjYW5ub3QgaW50ZXJjZXB0IGFycmF5IGVsZW1lbnQgYWNjZXNzIGxpa2UgcHJvcGVydHkgZ2V0dGVycy5cbiAqL1xuZnVuY3Rpb24gZGVwZW5kQXJyYXkgKHZhbHVlKSB7XG4gIGZvciAobGV0IGUsIGkgPSAwLCBsID0gdmFsdWUubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgZSA9IHZhbHVlW2ldO1xuICAgIGUgJiYgZS5fX29iX18gJiYgZS5fX29iX18uZGVwLmRlcGVuZCgpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGUpKSB7XG4gICAgICBkZXBlbmRBcnJheShlKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogT3B0aW9uIG92ZXJ3cml0aW5nIHN0cmF0ZWdpZXMgYXJlIGZ1bmN0aW9ucyB0aGF0IGhhbmRsZVxuICogaG93IHRvIG1lcmdlIGEgcGFyZW50IG9wdGlvbiB2YWx1ZSBhbmQgYSBjaGlsZCBvcHRpb25cbiAqIHZhbHVlIGludG8gdGhlIGZpbmFsIHZhbHVlLlxuICovXG5jb25zdCBzdHJhdHMgPSBjb25maWcub3B0aW9uTWVyZ2VTdHJhdGVnaWVzO1xuXG4vKipcbiAqIE9wdGlvbnMgd2l0aCByZXN0cmljdGlvbnNcbiAqL1xue1xuICBzdHJhdHMuZWwgPSBzdHJhdHMucHJvcHNEYXRhID0gZnVuY3Rpb24gKHBhcmVudCwgY2hpbGQsIHZtLCBrZXkpIHtcbiAgICBpZiAoIXZtKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBgb3B0aW9uIFwiJHtrZXl9XCIgY2FuIG9ubHkgYmUgdXNlZCBkdXJpbmcgaW5zdGFuY2UgYCArXG4gICAgICAgICdjcmVhdGlvbiB3aXRoIHRoZSBgbmV3YCBrZXl3b3JkLidcbiAgICAgICk7XG4gICAgfVxuICAgIHJldHVybiBkZWZhdWx0U3RyYXQocGFyZW50LCBjaGlsZClcbiAgfTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdGhhdCByZWN1cnNpdmVseSBtZXJnZXMgdHdvIGRhdGEgb2JqZWN0cyB0b2dldGhlci5cbiAqL1xuZnVuY3Rpb24gbWVyZ2VEYXRhICh0bywgZnJvbSkge1xuICBpZiAoIWZyb20pIHJldHVybiB0b1xuICBsZXQga2V5LCB0b1ZhbCwgZnJvbVZhbDtcblxuICBjb25zdCBrZXlzID0gaGFzU3ltYm9sXG4gICAgPyBSZWZsZWN0Lm93bktleXMoZnJvbSlcbiAgICA6IE9iamVjdC5rZXlzKGZyb20pO1xuXG4gIGZvciAobGV0IGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgIGtleSA9IGtleXNbaV07XG4gICAgLy8gaW4gY2FzZSB0aGUgb2JqZWN0IGlzIGFscmVhZHkgb2JzZXJ2ZWQuLi5cbiAgICBpZiAoa2V5ID09PSAnX19vYl9fJykgY29udGludWVcbiAgICB0b1ZhbCA9IHRvW2tleV07XG4gICAgZnJvbVZhbCA9IGZyb21ba2V5XTtcbiAgICBpZiAoIWhhc093bih0bywga2V5KSkge1xuICAgICAgc2V0KHRvLCBrZXksIGZyb21WYWwpO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICB0b1ZhbCAhPT0gZnJvbVZhbCAmJlxuICAgICAgaXNQbGFpbk9iamVjdCh0b1ZhbCkgJiZcbiAgICAgIGlzUGxhaW5PYmplY3QoZnJvbVZhbClcbiAgICApIHtcbiAgICAgIG1lcmdlRGF0YSh0b1ZhbCwgZnJvbVZhbCk7XG4gICAgfVxuICB9XG4gIHJldHVybiB0b1xufVxuXG4vKipcbiAqIERhdGFcbiAqL1xuZnVuY3Rpb24gbWVyZ2VEYXRhT3JGbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtXG4pIHtcbiAgaWYgKCF2bSkge1xuICAgIC8vIGluIGEgVnVlLmV4dGVuZCBtZXJnZSwgYm90aCBzaG91bGQgYmUgZnVuY3Rpb25zXG4gICAgaWYgKCFjaGlsZFZhbCkge1xuICAgICAgcmV0dXJuIHBhcmVudFZhbFxuICAgIH1cbiAgICBpZiAoIXBhcmVudFZhbCkge1xuICAgICAgcmV0dXJuIGNoaWxkVmFsXG4gICAgfVxuICAgIC8vIHdoZW4gcGFyZW50VmFsICYgY2hpbGRWYWwgYXJlIGJvdGggcHJlc2VudCxcbiAgICAvLyB3ZSBuZWVkIHRvIHJldHVybiBhIGZ1bmN0aW9uIHRoYXQgcmV0dXJucyB0aGVcbiAgICAvLyBtZXJnZWQgcmVzdWx0IG9mIGJvdGggZnVuY3Rpb25zLi4uIG5vIG5lZWQgdG9cbiAgICAvLyBjaGVjayBpZiBwYXJlbnRWYWwgaXMgYSBmdW5jdGlvbiBoZXJlIGJlY2F1c2VcbiAgICAvLyBpdCBoYXMgdG8gYmUgYSBmdW5jdGlvbiB0byBwYXNzIHByZXZpb3VzIG1lcmdlcy5cbiAgICByZXR1cm4gZnVuY3Rpb24gbWVyZ2VkRGF0YUZuICgpIHtcbiAgICAgIHJldHVybiBtZXJnZURhdGEoXG4gICAgICAgIHR5cGVvZiBjaGlsZFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IGNoaWxkVmFsLmNhbGwodGhpcywgdGhpcykgOiBjaGlsZFZhbCxcbiAgICAgICAgdHlwZW9mIHBhcmVudFZhbCA9PT0gJ2Z1bmN0aW9uJyA/IHBhcmVudFZhbC5jYWxsKHRoaXMsIHRoaXMpIDogcGFyZW50VmFsXG4gICAgICApXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWRJbnN0YW5jZURhdGFGbiAoKSB7XG4gICAgICAvLyBpbnN0YW5jZSBtZXJnZVxuICAgICAgY29uc3QgaW5zdGFuY2VEYXRhID0gdHlwZW9mIGNoaWxkVmFsID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gY2hpbGRWYWwuY2FsbCh2bSwgdm0pXG4gICAgICAgIDogY2hpbGRWYWw7XG4gICAgICBjb25zdCBkZWZhdWx0RGF0YSA9IHR5cGVvZiBwYXJlbnRWYWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyBwYXJlbnRWYWwuY2FsbCh2bSwgdm0pXG4gICAgICAgIDogcGFyZW50VmFsO1xuICAgICAgaWYgKGluc3RhbmNlRGF0YSkge1xuICAgICAgICByZXR1cm4gbWVyZ2VEYXRhKGluc3RhbmNlRGF0YSwgZGVmYXVsdERhdGEpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdERhdGFcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuc3RyYXRzLmRhdGEgPSBmdW5jdGlvbiAoXG4gIHBhcmVudFZhbCxcbiAgY2hpbGRWYWwsXG4gIHZtXG4pIHtcbiAgaWYgKCF2bSkge1xuICAgIGlmIChjaGlsZFZhbCAmJiB0eXBlb2YgY2hpbGRWYWwgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdUaGUgXCJkYXRhXCIgb3B0aW9uIHNob3VsZCBiZSBhIGZ1bmN0aW9uICcgK1xuICAgICAgICAndGhhdCByZXR1cm5zIGEgcGVyLWluc3RhbmNlIHZhbHVlIGluIGNvbXBvbmVudCAnICtcbiAgICAgICAgJ2RlZmluaXRpb25zLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuXG4gICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgfVxuICAgIHJldHVybiBtZXJnZURhdGFPckZuKHBhcmVudFZhbCwgY2hpbGRWYWwpXG4gIH1cblxuICByZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsIGNoaWxkVmFsLCB2bSlcbn07XG5cbi8qKlxuICogSG9va3MgYW5kIHByb3BzIGFyZSBtZXJnZWQgYXMgYXJyYXlzLlxuICovXG5mdW5jdGlvbiBtZXJnZUhvb2sgKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsXG4pIHtcbiAgY29uc3QgcmVzID0gY2hpbGRWYWxcbiAgICA/IHBhcmVudFZhbFxuICAgICAgPyBwYXJlbnRWYWwuY29uY2F0KGNoaWxkVmFsKVxuICAgICAgOiBBcnJheS5pc0FycmF5KGNoaWxkVmFsKVxuICAgICAgICA/IGNoaWxkVmFsXG4gICAgICAgIDogW2NoaWxkVmFsXVxuICAgIDogcGFyZW50VmFsO1xuICByZXR1cm4gcmVzXG4gICAgPyBkZWR1cGVIb29rcyhyZXMpXG4gICAgOiByZXNcbn1cblxuZnVuY3Rpb24gZGVkdXBlSG9va3MgKGhvb2tzKSB7XG4gIGNvbnN0IHJlcyA9IFtdO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHJlcy5pbmRleE9mKGhvb2tzW2ldKSA9PT0gLTEpIHtcbiAgICAgIHJlcy5wdXNoKGhvb2tzW2ldKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5MSUZFQ1lDTEVfSE9PS1MuZm9yRWFjaChob29rID0+IHtcbiAgc3RyYXRzW2hvb2tdID0gbWVyZ2VIb29rO1xufSk7XG5cbi8qKlxuICogQXNzZXRzXG4gKlxuICogV2hlbiBhIHZtIGlzIHByZXNlbnQgKGluc3RhbmNlIGNyZWF0aW9uKSwgd2UgbmVlZCB0byBkb1xuICogYSB0aHJlZS13YXkgbWVyZ2UgYmV0d2VlbiBjb25zdHJ1Y3RvciBvcHRpb25zLCBpbnN0YW5jZVxuICogb3B0aW9ucyBhbmQgcGFyZW50IG9wdGlvbnMuXG4gKi9cbmZ1bmN0aW9uIG1lcmdlQXNzZXRzIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIGNvbnN0IHJlcyA9IE9iamVjdC5jcmVhdGUocGFyZW50VmFsIHx8IG51bGwpO1xuICBpZiAoY2hpbGRWYWwpIHtcbiAgICBhc3NlcnRPYmplY3RUeXBlKGtleSwgY2hpbGRWYWwsIHZtKTtcbiAgICByZXR1cm4gZXh0ZW5kKHJlcywgY2hpbGRWYWwpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHJlc1xuICB9XG59XG5cbkFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgc3RyYXRzW3R5cGUgKyAncyddID0gbWVyZ2VBc3NldHM7XG59KTtcblxuLyoqXG4gKiBXYXRjaGVycy5cbiAqXG4gKiBXYXRjaGVycyBoYXNoZXMgc2hvdWxkIG5vdCBvdmVyd3JpdGUgb25lXG4gKiBhbm90aGVyLCBzbyB3ZSBtZXJnZSB0aGVtIGFzIGFycmF5cy5cbiAqL1xuc3RyYXRzLndhdGNoID0gZnVuY3Rpb24gKFxuICBwYXJlbnRWYWwsXG4gIGNoaWxkVmFsLFxuICB2bSxcbiAga2V5XG4pIHtcbiAgLy8gd29yayBhcm91bmQgRmlyZWZveCdzIE9iamVjdC5wcm90b3R5cGUud2F0Y2guLi5cbiAgaWYgKHBhcmVudFZhbCA9PT0gbmF0aXZlV2F0Y2gpIHBhcmVudFZhbCA9IHVuZGVmaW5lZDtcbiAgaWYgKGNoaWxkVmFsID09PSBuYXRpdmVXYXRjaCkgY2hpbGRWYWwgPSB1bmRlZmluZWQ7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoIWNoaWxkVmFsKSByZXR1cm4gT2JqZWN0LmNyZWF0ZShwYXJlbnRWYWwgfHwgbnVsbClcbiAge1xuICAgIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICB9XG4gIGlmICghcGFyZW50VmFsKSByZXR1cm4gY2hpbGRWYWxcbiAgY29uc3QgcmV0ID0ge307XG4gIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7XG4gIGZvciAoY29uc3Qga2V5IGluIGNoaWxkVmFsKSB7XG4gICAgbGV0IHBhcmVudCA9IHJldFtrZXldO1xuICAgIGNvbnN0IGNoaWxkID0gY2hpbGRWYWxba2V5XTtcbiAgICBpZiAocGFyZW50ICYmICFBcnJheS5pc0FycmF5KHBhcmVudCkpIHtcbiAgICAgIHBhcmVudCA9IFtwYXJlbnRdO1xuICAgIH1cbiAgICByZXRba2V5XSA9IHBhcmVudFxuICAgICAgPyBwYXJlbnQuY29uY2F0KGNoaWxkKVxuICAgICAgOiBBcnJheS5pc0FycmF5KGNoaWxkKSA/IGNoaWxkIDogW2NoaWxkXTtcbiAgfVxuICByZXR1cm4gcmV0XG59O1xuXG4vKipcbiAqIE90aGVyIG9iamVjdCBoYXNoZXMuXG4gKi9cbnN0cmF0cy5wcm9wcyA9XG5zdHJhdHMubWV0aG9kcyA9XG5zdHJhdHMuaW5qZWN0ID1cbnN0cmF0cy5jb21wdXRlZCA9IGZ1bmN0aW9uIChcbiAgcGFyZW50VmFsLFxuICBjaGlsZFZhbCxcbiAgdm0sXG4gIGtleVxuKSB7XG4gIGlmIChjaGlsZFZhbCAmJiBcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICB9XG4gIGlmICghcGFyZW50VmFsKSByZXR1cm4gY2hpbGRWYWxcbiAgY29uc3QgcmV0ID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgZXh0ZW5kKHJldCwgcGFyZW50VmFsKTtcbiAgaWYgKGNoaWxkVmFsKSBleHRlbmQocmV0LCBjaGlsZFZhbCk7XG4gIHJldHVybiByZXRcbn07XG5zdHJhdHMucHJvdmlkZSA9IG1lcmdlRGF0YU9yRm47XG5cbi8qKlxuICogRGVmYXVsdCBzdHJhdGVneS5cbiAqL1xuY29uc3QgZGVmYXVsdFN0cmF0ID0gZnVuY3Rpb24gKHBhcmVudFZhbCwgY2hpbGRWYWwpIHtcbiAgcmV0dXJuIGNoaWxkVmFsID09PSB1bmRlZmluZWRcbiAgICA/IHBhcmVudFZhbFxuICAgIDogY2hpbGRWYWxcbn07XG5cbi8qKlxuICogVmFsaWRhdGUgY29tcG9uZW50IG5hbWVzXG4gKi9cbmZ1bmN0aW9uIGNoZWNrQ29tcG9uZW50cyAob3B0aW9ucykge1xuICBmb3IgKGNvbnN0IGtleSBpbiBvcHRpb25zLmNvbXBvbmVudHMpIHtcbiAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUoa2V5KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB2YWxpZGF0ZUNvbXBvbmVudE5hbWUgKG5hbWUpIHtcbiAgaWYgKCFuZXcgUmVnRXhwKGBeW2EtekEtWl1bXFxcXC1cXFxcLjAtOV8ke3VuaWNvZGVMZXR0ZXJzfV0qJGApLnRlc3QobmFtZSkpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ludmFsaWQgY29tcG9uZW50IG5hbWU6IFwiJyArIG5hbWUgKyAnXCIuIENvbXBvbmVudCBuYW1lcyAnICtcbiAgICAgICdzaG91bGQgY29uZm9ybSB0byB2YWxpZCBjdXN0b20gZWxlbWVudCBuYW1lIGluIGh0bWw1IHNwZWNpZmljYXRpb24uJ1xuICAgICk7XG4gIH1cbiAgaWYgKGlzQnVpbHRJblRhZyhuYW1lKSB8fCBjb25maWcuaXNSZXNlcnZlZFRhZyhuYW1lKSkge1xuICAgIHdhcm4oXG4gICAgICAnRG8gbm90IHVzZSBidWlsdC1pbiBvciByZXNlcnZlZCBIVE1MIGVsZW1lbnRzIGFzIGNvbXBvbmVudCAnICtcbiAgICAgICdpZDogJyArIG5hbWVcbiAgICApO1xuICB9XG59XG5cbi8qKlxuICogRW5zdXJlIGFsbCBwcm9wcyBvcHRpb24gc3ludGF4IGFyZSBub3JtYWxpemVkIGludG8gdGhlXG4gKiBPYmplY3QtYmFzZWQgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVQcm9wcyAob3B0aW9ucywgdm0pIHtcbiAgY29uc3QgcHJvcHMgPSBvcHRpb25zLnByb3BzO1xuICBpZiAoIXByb3BzKSByZXR1cm5cbiAgY29uc3QgcmVzID0ge307XG4gIGxldCBpLCB2YWwsIG5hbWU7XG4gIGlmIChBcnJheS5pc0FycmF5KHByb3BzKSkge1xuICAgIGkgPSBwcm9wcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdmFsID0gcHJvcHNbaV07XG4gICAgICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgbmFtZSA9IGNhbWVsaXplKHZhbCk7XG4gICAgICAgIHJlc1tuYW1lXSA9IHsgdHlwZTogbnVsbCB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybigncHJvcHMgbXVzdCBiZSBzdHJpbmdzIHdoZW4gdXNpbmcgYXJyYXkgc3ludGF4LicpO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHByb3BzKSkge1xuICAgIGZvciAoY29uc3Qga2V5IGluIHByb3BzKSB7XG4gICAgICB2YWwgPSBwcm9wc1trZXldO1xuICAgICAgbmFtZSA9IGNhbWVsaXplKGtleSk7XG4gICAgICByZXNbbmFtZV0gPSBpc1BsYWluT2JqZWN0KHZhbClcbiAgICAgICAgPyB2YWxcbiAgICAgICAgOiB7IHR5cGU6IHZhbCB9O1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB3YXJuKFxuICAgICAgYEludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcInByb3BzXCI6IGV4cGVjdGVkIGFuIEFycmF5IG9yIGFuIE9iamVjdCwgYCArXG4gICAgICBgYnV0IGdvdCAke3RvUmF3VHlwZShwcm9wcyl9LmAsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgb3B0aW9ucy5wcm9wcyA9IHJlcztcbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgYWxsIGluamVjdGlvbnMgaW50byBPYmplY3QtYmFzZWQgZm9ybWF0XG4gKi9cbmZ1bmN0aW9uIG5vcm1hbGl6ZUluamVjdCAob3B0aW9ucywgdm0pIHtcbiAgY29uc3QgaW5qZWN0ID0gb3B0aW9ucy5pbmplY3Q7XG4gIGlmICghaW5qZWN0KSByZXR1cm5cbiAgY29uc3Qgbm9ybWFsaXplZCA9IG9wdGlvbnMuaW5qZWN0ID0ge307XG4gIGlmIChBcnJheS5pc0FycmF5KGluamVjdCkpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGluamVjdC5sZW5ndGg7IGkrKykge1xuICAgICAgbm9ybWFsaXplZFtpbmplY3RbaV1dID0geyBmcm9tOiBpbmplY3RbaV0gfTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdChpbmplY3QpKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gaW5qZWN0KSB7XG4gICAgICBjb25zdCB2YWwgPSBpbmplY3Rba2V5XTtcbiAgICAgIG5vcm1hbGl6ZWRba2V5XSA9IGlzUGxhaW5PYmplY3QodmFsKVxuICAgICAgICA/IGV4dGVuZCh7IGZyb206IGtleSB9LCB2YWwpXG4gICAgICAgIDogeyBmcm9tOiB2YWwgfTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgd2FybihcbiAgICAgIGBJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXCJpbmplY3RcIjogZXhwZWN0ZWQgYW4gQXJyYXkgb3IgYW4gT2JqZWN0LCBgICtcbiAgICAgIGBidXQgZ290ICR7dG9SYXdUeXBlKGluamVjdCl9LmAsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBOb3JtYWxpemUgcmF3IGZ1bmN0aW9uIGRpcmVjdGl2ZXMgaW50byBvYmplY3QgZm9ybWF0LlxuICovXG5mdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzIChvcHRpb25zKSB7XG4gIGNvbnN0IGRpcnMgPSBvcHRpb25zLmRpcmVjdGl2ZXM7XG4gIGlmIChkaXJzKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gZGlycykge1xuICAgICAgY29uc3QgZGVmJCQxID0gZGlyc1trZXldO1xuICAgICAgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgZGlyc1trZXldID0geyBiaW5kOiBkZWYkJDEsIHVwZGF0ZTogZGVmJCQxIH07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydE9iamVjdFR5cGUgKG5hbWUsIHZhbHVlLCB2bSkge1xuICBpZiAoIWlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgd2FybihcbiAgICAgIGBJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXCIke25hbWV9XCI6IGV4cGVjdGVkIGFuIE9iamVjdCwgYCArXG4gICAgICBgYnV0IGdvdCAke3RvUmF3VHlwZSh2YWx1ZSl9LmAsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbn1cblxuLyoqXG4gKiBNZXJnZSB0d28gb3B0aW9uIG9iamVjdHMgaW50byBhIG5ldyBvbmUuXG4gKiBDb3JlIHV0aWxpdHkgdXNlZCBpbiBib3RoIGluc3RhbnRpYXRpb24gYW5kIGluaGVyaXRhbmNlLlxuICovXG5mdW5jdGlvbiBtZXJnZU9wdGlvbnMgKFxuICBwYXJlbnQsXG4gIGNoaWxkLFxuICB2bVxuKSB7XG4gIHtcbiAgICBjaGVja0NvbXBvbmVudHMoY2hpbGQpO1xuICB9XG5cbiAgaWYgKHR5cGVvZiBjaGlsZCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNoaWxkID0gY2hpbGQub3B0aW9ucztcbiAgfVxuXG4gIG5vcm1hbGl6ZVByb3BzKGNoaWxkLCB2bSk7XG4gIG5vcm1hbGl6ZUluamVjdChjaGlsZCwgdm0pO1xuICBub3JtYWxpemVEaXJlY3RpdmVzKGNoaWxkKTtcblxuICAvLyBBcHBseSBleHRlbmRzIGFuZCBtaXhpbnMgb24gdGhlIGNoaWxkIG9wdGlvbnMsXG4gIC8vIGJ1dCBvbmx5IGlmIGl0IGlzIGEgcmF3IG9wdGlvbnMgb2JqZWN0IHRoYXQgaXNuJ3RcbiAgLy8gdGhlIHJlc3VsdCBvZiBhbm90aGVyIG1lcmdlT3B0aW9ucyBjYWxsLlxuICAvLyBPbmx5IG1lcmdlZCBvcHRpb25zIGhhcyB0aGUgX2Jhc2UgcHJvcGVydHkuXG4gIGlmICghY2hpbGQuX2Jhc2UpIHtcbiAgICBpZiAoY2hpbGQuZXh0ZW5kcykge1xuICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQuZXh0ZW5kcywgdm0pO1xuICAgIH1cbiAgICBpZiAoY2hpbGQubWl4aW5zKSB7XG4gICAgICBmb3IgKGxldCBpID0gMCwgbCA9IGNoaWxkLm1peGlucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQubWl4aW5zW2ldLCB2bSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgY29uc3Qgb3B0aW9ucyA9IHt9O1xuICBsZXQga2V5O1xuICBmb3IgKGtleSBpbiBwYXJlbnQpIHtcbiAgICBtZXJnZUZpZWxkKGtleSk7XG4gIH1cbiAgZm9yIChrZXkgaW4gY2hpbGQpIHtcbiAgICBpZiAoIWhhc093bihwYXJlbnQsIGtleSkpIHtcbiAgICAgIG1lcmdlRmllbGQoa2V5KTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gbWVyZ2VGaWVsZCAoa2V5KSB7XG4gICAgY29uc3Qgc3RyYXQgPSBzdHJhdHNba2V5XSB8fCBkZWZhdWx0U3RyYXQ7XG4gICAgb3B0aW9uc1trZXldID0gc3RyYXQocGFyZW50W2tleV0sIGNoaWxkW2tleV0sIHZtLCBrZXkpO1xuICB9XG4gIHJldHVybiBvcHRpb25zXG59XG5cbi8qKlxuICogUmVzb2x2ZSBhbiBhc3NldC5cbiAqIFRoaXMgZnVuY3Rpb24gaXMgdXNlZCBiZWNhdXNlIGNoaWxkIGluc3RhbmNlcyBuZWVkIGFjY2Vzc1xuICogdG8gYXNzZXRzIGRlZmluZWQgaW4gaXRzIGFuY2VzdG9yIGNoYWluLlxuICovXG5mdW5jdGlvbiByZXNvbHZlQXNzZXQgKFxuICBvcHRpb25zLFxuICB0eXBlLFxuICBpZCxcbiAgd2Fybk1pc3Npbmdcbikge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKHR5cGVvZiBpZCAhPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm5cbiAgfVxuICBjb25zdCBhc3NldHMgPSBvcHRpb25zW3R5cGVdO1xuICAvLyBjaGVjayBsb2NhbCByZWdpc3RyYXRpb24gdmFyaWF0aW9ucyBmaXJzdFxuICBpZiAoaGFzT3duKGFzc2V0cywgaWQpKSByZXR1cm4gYXNzZXRzW2lkXVxuICBjb25zdCBjYW1lbGl6ZWRJZCA9IGNhbWVsaXplKGlkKTtcbiAgaWYgKGhhc093bihhc3NldHMsIGNhbWVsaXplZElkKSkgcmV0dXJuIGFzc2V0c1tjYW1lbGl6ZWRJZF1cbiAgY29uc3QgUGFzY2FsQ2FzZUlkID0gY2FwaXRhbGl6ZShjYW1lbGl6ZWRJZCk7XG4gIGlmIChoYXNPd24oYXNzZXRzLCBQYXNjYWxDYXNlSWQpKSByZXR1cm4gYXNzZXRzW1Bhc2NhbENhc2VJZF1cbiAgLy8gZmFsbGJhY2sgdG8gcHJvdG90eXBlIGNoYWluXG4gIGNvbnN0IHJlcyA9IGFzc2V0c1tpZF0gfHwgYXNzZXRzW2NhbWVsaXplZElkXSB8fCBhc3NldHNbUGFzY2FsQ2FzZUlkXTtcbiAgaWYgKHdhcm5NaXNzaW5nICYmICFyZXMpIHtcbiAgICB3YXJuKFxuICAgICAgJ0ZhaWxlZCB0byByZXNvbHZlICcgKyB0eXBlLnNsaWNlKDAsIC0xKSArICc6ICcgKyBpZCxcbiAgICAgIG9wdGlvbnNcbiAgICApO1xuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cblxuXG5mdW5jdGlvbiB2YWxpZGF0ZVByb3AgKFxuICBrZXksXG4gIHByb3BPcHRpb25zLFxuICBwcm9wc0RhdGEsXG4gIHZtXG4pIHtcbiAgY29uc3QgcHJvcCA9IHByb3BPcHRpb25zW2tleV07XG4gIGNvbnN0IGFic2VudCA9ICFoYXNPd24ocHJvcHNEYXRhLCBrZXkpO1xuICBsZXQgdmFsdWUgPSBwcm9wc0RhdGFba2V5XTtcbiAgLy8gYm9vbGVhbiBjYXN0aW5nXG4gIGNvbnN0IGJvb2xlYW5JbmRleCA9IGdldFR5cGVJbmRleChCb29sZWFuLCBwcm9wLnR5cGUpO1xuICBpZiAoYm9vbGVhbkluZGV4ID4gLTEpIHtcbiAgICBpZiAoYWJzZW50ICYmICFoYXNPd24ocHJvcCwgJ2RlZmF1bHQnKSkge1xuICAgICAgdmFsdWUgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSAnJyB8fCB2YWx1ZSA9PT0gaHlwaGVuYXRlKGtleSkpIHtcbiAgICAgIC8vIG9ubHkgY2FzdCBlbXB0eSBzdHJpbmcgLyBzYW1lIG5hbWUgdG8gYm9vbGVhbiBpZlxuICAgICAgLy8gYm9vbGVhbiBoYXMgaGlnaGVyIHByaW9yaXR5XG4gICAgICBjb25zdCBzdHJpbmdJbmRleCA9IGdldFR5cGVJbmRleChTdHJpbmcsIHByb3AudHlwZSk7XG4gICAgICBpZiAoc3RyaW5nSW5kZXggPCAwIHx8IGJvb2xlYW5JbmRleCA8IHN0cmluZ0luZGV4KSB7XG4gICAgICAgIHZhbHVlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgLy8gY2hlY2sgZGVmYXVsdCB2YWx1ZVxuICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIHZhbHVlID0gZ2V0UHJvcERlZmF1bHRWYWx1ZSh2bSwgcHJvcCwga2V5KTtcbiAgICAvLyBzaW5jZSB0aGUgZGVmYXVsdCB2YWx1ZSBpcyBhIGZyZXNoIGNvcHksXG4gICAgLy8gbWFrZSBzdXJlIHRvIG9ic2VydmUgaXQuXG4gICAgY29uc3QgcHJldlNob3VsZE9ic2VydmUgPSBzaG91bGRPYnNlcnZlO1xuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgICBvYnNlcnZlKHZhbHVlKTtcbiAgICB0b2dnbGVPYnNlcnZpbmcocHJldlNob3VsZE9ic2VydmUpO1xuICB9XG4gIHtcbiAgICBhc3NlcnRQcm9wKHByb3AsIGtleSwgdmFsdWUsIHZtLCBhYnNlbnQpO1xuICB9XG4gIHJldHVybiB2YWx1ZVxufVxuXG4vKipcbiAqIEdldCB0aGUgZGVmYXVsdCB2YWx1ZSBvZiBhIHByb3AuXG4gKi9cbmZ1bmN0aW9uIGdldFByb3BEZWZhdWx0VmFsdWUgKHZtLCBwcm9wLCBrZXkpIHtcbiAgLy8gbm8gZGVmYXVsdCwgcmV0dXJuIHVuZGVmaW5lZFxuICBpZiAoIWhhc093bihwcm9wLCAnZGVmYXVsdCcpKSB7XG4gICAgcmV0dXJuIHVuZGVmaW5lZFxuICB9XG4gIGNvbnN0IGRlZiA9IHByb3AuZGVmYXVsdDtcbiAgLy8gd2FybiBhZ2FpbnN0IG5vbi1mYWN0b3J5IGRlZmF1bHRzIGZvciBPYmplY3QgJiBBcnJheVxuICBpZiAoaXNPYmplY3QoZGVmKSkge1xuICAgIHdhcm4oXG4gICAgICAnSW52YWxpZCBkZWZhdWx0IHZhbHVlIGZvciBwcm9wIFwiJyArIGtleSArICdcIjogJyArXG4gICAgICAnUHJvcHMgd2l0aCB0eXBlIE9iamVjdC9BcnJheSBtdXN0IHVzZSBhIGZhY3RvcnkgZnVuY3Rpb24gJyArXG4gICAgICAndG8gcmV0dXJuIHRoZSBkZWZhdWx0IHZhbHVlLicsXG4gICAgICB2bVxuICAgICk7XG4gIH1cbiAgLy8gdGhlIHJhdyBwcm9wIHZhbHVlIHdhcyBhbHNvIHVuZGVmaW5lZCBmcm9tIHByZXZpb3VzIHJlbmRlcixcbiAgLy8gcmV0dXJuIHByZXZpb3VzIGRlZmF1bHQgdmFsdWUgdG8gYXZvaWQgdW5uZWNlc3Nhcnkgd2F0Y2hlciB0cmlnZ2VyXG4gIGlmICh2bSAmJiB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgJiZcbiAgICB2bS4kb3B0aW9ucy5wcm9wc0RhdGFba2V5XSA9PT0gdW5kZWZpbmVkICYmXG4gICAgdm0uX3Byb3BzW2tleV0gIT09IHVuZGVmaW5lZFxuICApIHtcbiAgICByZXR1cm4gdm0uX3Byb3BzW2tleV1cbiAgfVxuICAvLyBjYWxsIGZhY3RvcnkgZnVuY3Rpb24gZm9yIG5vbi1GdW5jdGlvbiB0eXBlc1xuICAvLyBhIHZhbHVlIGlzIEZ1bmN0aW9uIGlmIGl0cyBwcm90b3R5cGUgaXMgZnVuY3Rpb24gZXZlbiBhY3Jvc3MgZGlmZmVyZW50IGV4ZWN1dGlvbiBjb250ZXh0XG4gIHJldHVybiB0eXBlb2YgZGVmID09PSAnZnVuY3Rpb24nICYmIGdldFR5cGUocHJvcC50eXBlKSAhPT0gJ0Z1bmN0aW9uJ1xuICAgID8gZGVmLmNhbGwodm0pXG4gICAgOiBkZWZcbn1cblxuLyoqXG4gKiBBc3NlcnQgd2hldGhlciBhIHByb3AgaXMgdmFsaWQuXG4gKi9cbmZ1bmN0aW9uIGFzc2VydFByb3AgKFxuICBwcm9wLFxuICBuYW1lLFxuICB2YWx1ZSxcbiAgdm0sXG4gIGFic2VudFxuKSB7XG4gIGlmIChwcm9wLnJlcXVpcmVkICYmIGFic2VudCkge1xuICAgIHdhcm4oXG4gICAgICAnTWlzc2luZyByZXF1aXJlZCBwcm9wOiBcIicgKyBuYW1lICsgJ1wiJyxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCAmJiAhcHJvcC5yZXF1aXJlZCkge1xuICAgIHJldHVyblxuICB9XG4gIGxldCB0eXBlID0gcHJvcC50eXBlO1xuICBsZXQgdmFsaWQgPSAhdHlwZSB8fCB0eXBlID09PSB0cnVlO1xuICBjb25zdCBleHBlY3RlZFR5cGVzID0gW107XG4gIGlmICh0eXBlKSB7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KHR5cGUpKSB7XG4gICAgICB0eXBlID0gW3R5cGVdO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHR5cGUubGVuZ3RoICYmICF2YWxpZDsgaSsrKSB7XG4gICAgICBjb25zdCBhc3NlcnRlZFR5cGUgPSBhc3NlcnRUeXBlKHZhbHVlLCB0eXBlW2ldKTtcbiAgICAgIGV4cGVjdGVkVHlwZXMucHVzaChhc3NlcnRlZFR5cGUuZXhwZWN0ZWRUeXBlIHx8ICcnKTtcbiAgICAgIHZhbGlkID0gYXNzZXJ0ZWRUeXBlLnZhbGlkO1xuICAgIH1cbiAgfVxuXG4gIGlmICghdmFsaWQpIHtcbiAgICB3YXJuKFxuICAgICAgZ2V0SW52YWxpZFR5cGVNZXNzYWdlKG5hbWUsIHZhbHVlLCBleHBlY3RlZFR5cGVzKSxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICBjb25zdCB2YWxpZGF0b3IgPSBwcm9wLnZhbGlkYXRvcjtcbiAgaWYgKHZhbGlkYXRvcikge1xuICAgIGlmICghdmFsaWRhdG9yKHZhbHVlKSkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0ludmFsaWQgcHJvcDogY3VzdG9tIHZhbGlkYXRvciBjaGVjayBmYWlsZWQgZm9yIHByb3AgXCInICsgbmFtZSArICdcIi4nLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuY29uc3Qgc2ltcGxlQ2hlY2tSRSA9IC9eKFN0cmluZ3xOdW1iZXJ8Qm9vbGVhbnxGdW5jdGlvbnxTeW1ib2wpJC87XG5cbmZ1bmN0aW9uIGFzc2VydFR5cGUgKHZhbHVlLCB0eXBlKSB7XG4gIGxldCB2YWxpZDtcbiAgY29uc3QgZXhwZWN0ZWRUeXBlID0gZ2V0VHlwZSh0eXBlKTtcbiAgaWYgKHNpbXBsZUNoZWNrUkUudGVzdChleHBlY3RlZFR5cGUpKSB7XG4gICAgY29uc3QgdCA9IHR5cGVvZiB2YWx1ZTtcbiAgICB2YWxpZCA9IHQgPT09IGV4cGVjdGVkVHlwZS50b0xvd2VyQ2FzZSgpO1xuICAgIC8vIGZvciBwcmltaXRpdmUgd3JhcHBlciBvYmplY3RzXG4gICAgaWYgKCF2YWxpZCAmJiB0ID09PSAnb2JqZWN0Jykge1xuICAgICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gICAgfVxuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ09iamVjdCcpIHtcbiAgICB2YWxpZCA9IGlzUGxhaW5PYmplY3QodmFsdWUpO1xuICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gJ0FycmF5Jykge1xuICAgIHZhbGlkID0gQXJyYXkuaXNBcnJheSh2YWx1ZSk7XG4gIH0gZWxzZSB7XG4gICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICB2YWxpZCxcbiAgICBleHBlY3RlZFR5cGVcbiAgfVxufVxuXG4vKipcbiAqIFVzZSBmdW5jdGlvbiBzdHJpbmcgbmFtZSB0byBjaGVjayBidWlsdC1pbiB0eXBlcyxcbiAqIGJlY2F1c2UgYSBzaW1wbGUgZXF1YWxpdHkgY2hlY2sgd2lsbCBmYWlsIHdoZW4gcnVubmluZ1xuICogYWNyb3NzIGRpZmZlcmVudCB2bXMgLyBpZnJhbWVzLlxuICovXG5mdW5jdGlvbiBnZXRUeXBlIChmbikge1xuICBjb25zdCBtYXRjaCA9IGZuICYmIGZuLnRvU3RyaW5nKCkubWF0Y2goL15cXHMqZnVuY3Rpb24gKFxcdyspLyk7XG4gIHJldHVybiBtYXRjaCA/IG1hdGNoWzFdIDogJydcbn1cblxuZnVuY3Rpb24gaXNTYW1lVHlwZSAoYSwgYikge1xuICByZXR1cm4gZ2V0VHlwZShhKSA9PT0gZ2V0VHlwZShiKVxufVxuXG5mdW5jdGlvbiBnZXRUeXBlSW5kZXggKHR5cGUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KGV4cGVjdGVkVHlwZXMpKSB7XG4gICAgcmV0dXJuIGlzU2FtZVR5cGUoZXhwZWN0ZWRUeXBlcywgdHlwZSkgPyAwIDogLTFcbiAgfVxuICBmb3IgKGxldCBpID0gMCwgbGVuID0gZXhwZWN0ZWRUeXBlcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIGlmIChpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXNbaV0sIHR5cGUpKSB7XG4gICAgICByZXR1cm4gaVxuICAgIH1cbiAgfVxuICByZXR1cm4gLTFcbn1cblxuZnVuY3Rpb24gZ2V0SW52YWxpZFR5cGVNZXNzYWdlIChuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlcykge1xuICBsZXQgbWVzc2FnZSA9IGBJbnZhbGlkIHByb3A6IHR5cGUgY2hlY2sgZmFpbGVkIGZvciBwcm9wIFwiJHtuYW1lfVwiLmAgK1xuICAgIGAgRXhwZWN0ZWQgJHtleHBlY3RlZFR5cGVzLm1hcChjYXBpdGFsaXplKS5qb2luKCcsICcpfWA7XG4gIGNvbnN0IGV4cGVjdGVkVHlwZSA9IGV4cGVjdGVkVHlwZXNbMF07XG4gIGNvbnN0IHJlY2VpdmVkVHlwZSA9IHRvUmF3VHlwZSh2YWx1ZSk7XG4gIGNvbnN0IGV4cGVjdGVkVmFsdWUgPSBzdHlsZVZhbHVlKHZhbHVlLCBleHBlY3RlZFR5cGUpO1xuICBjb25zdCByZWNlaXZlZFZhbHVlID0gc3R5bGVWYWx1ZSh2YWx1ZSwgcmVjZWl2ZWRUeXBlKTtcbiAgLy8gY2hlY2sgaWYgd2UgbmVlZCB0byBzcGVjaWZ5IGV4cGVjdGVkIHZhbHVlXG4gIGlmIChleHBlY3RlZFR5cGVzLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgaXNFeHBsaWNhYmxlKGV4cGVjdGVkVHlwZSkgJiZcbiAgICAgICFpc0Jvb2xlYW4oZXhwZWN0ZWRUeXBlLCByZWNlaXZlZFR5cGUpKSB7XG4gICAgbWVzc2FnZSArPSBgIHdpdGggdmFsdWUgJHtleHBlY3RlZFZhbHVlfWA7XG4gIH1cbiAgbWVzc2FnZSArPSBgLCBnb3QgJHtyZWNlaXZlZFR5cGV9IGA7XG4gIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3BlY2lmeSByZWNlaXZlZCB2YWx1ZVxuICBpZiAoaXNFeHBsaWNhYmxlKHJlY2VpdmVkVHlwZSkpIHtcbiAgICBtZXNzYWdlICs9IGB3aXRoIHZhbHVlICR7cmVjZWl2ZWRWYWx1ZX0uYDtcbiAgfVxuICByZXR1cm4gbWVzc2FnZVxufVxuXG5mdW5jdGlvbiBzdHlsZVZhbHVlICh2YWx1ZSwgdHlwZSkge1xuICBpZiAodHlwZSA9PT0gJ1N0cmluZycpIHtcbiAgICByZXR1cm4gYFwiJHt2YWx1ZX1cImBcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnTnVtYmVyJykge1xuICAgIHJldHVybiBgJHtOdW1iZXIodmFsdWUpfWBcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gYCR7dmFsdWV9YFxuICB9XG59XG5cbmZ1bmN0aW9uIGlzRXhwbGljYWJsZSAodmFsdWUpIHtcbiAgY29uc3QgZXhwbGljaXRUeXBlcyA9IFsnc3RyaW5nJywgJ251bWJlcicsICdib29sZWFuJ107XG4gIHJldHVybiBleHBsaWNpdFR5cGVzLnNvbWUoZWxlbSA9PiB2YWx1ZS50b0xvd2VyQ2FzZSgpID09PSBlbGVtKVxufVxuXG5mdW5jdGlvbiBpc0Jvb2xlYW4gKC4uLmFyZ3MpIHtcbiAgcmV0dXJuIGFyZ3Muc29tZShlbGVtID0+IGVsZW0udG9Mb3dlckNhc2UoKSA9PT0gJ2Jvb2xlYW4nKVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaGFuZGxlRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgaWYgKHZtKSB7XG4gICAgbGV0IGN1ciA9IHZtO1xuICAgIHdoaWxlICgoY3VyID0gY3VyLiRwYXJlbnQpKSB7XG4gICAgICBjb25zdCBob29rcyA9IGN1ci4kb3B0aW9ucy5lcnJvckNhcHR1cmVkO1xuICAgICAgaWYgKGhvb2tzKSB7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaG9va3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgY29uc3QgY2FwdHVyZSA9IGhvb2tzW2ldLmNhbGwoY3VyLCBlcnIsIHZtLCBpbmZvKSA9PT0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoY2FwdHVyZSkgcmV0dXJuXG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgZ2xvYmFsSGFuZGxlRXJyb3IoZSwgY3VyLCAnZXJyb3JDYXB0dXJlZCBob29rJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGdsb2JhbEhhbmRsZUVycm9yKGVyciwgdm0sIGluZm8pO1xufVxuXG5mdW5jdGlvbiBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyAoXG4gIGhhbmRsZXIsXG4gIGNvbnRleHQsXG4gIGFyZ3MsXG4gIHZtLFxuICBpbmZvXG4pIHtcbiAgbGV0IHJlcztcbiAgdHJ5IHtcbiAgICByZXMgPSBhcmdzID8gaGFuZGxlci5hcHBseShjb250ZXh0LCBhcmdzKSA6IGhhbmRsZXIuY2FsbChjb250ZXh0KTtcbiAgICBpZiAocmVzICYmICFyZXMuX2lzVnVlICYmIGlzUHJvbWlzZShyZXMpKSB7XG4gICAgICByZXMuY2F0Y2goZSA9PiBoYW5kbGVFcnJvcihlLCB2bSwgaW5mbyArIGAgKFByb21pc2UvYXN5bmMpYCkpO1xuICAgIH1cbiAgfSBjYXRjaCAoZSkge1xuICAgIGhhbmRsZUVycm9yKGUsIHZtLCBpbmZvKTtcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGdsb2JhbEhhbmRsZUVycm9yIChlcnIsIHZtLCBpbmZvKSB7XG4gIGlmIChjb25maWcuZXJyb3JIYW5kbGVyKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBjb25maWcuZXJyb3JIYW5kbGVyLmNhbGwobnVsbCwgZXJyLCB2bSwgaW5mbylcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBpZiB0aGUgdXNlciBpbnRlbnRpb25hbGx5IHRocm93cyB0aGUgb3JpZ2luYWwgZXJyb3IgaW4gdGhlIGhhbmRsZXIsXG4gICAgICAvLyBkbyBub3QgbG9nIGl0IHR3aWNlXG4gICAgICBpZiAoZSAhPT0gZXJyKSB7XG4gICAgICAgIGxvZ0Vycm9yKGUsIG51bGwsICdjb25maWcuZXJyb3JIYW5kbGVyJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIGxvZ0Vycm9yKGVyciwgdm0sIGluZm8pO1xufVxuXG5mdW5jdGlvbiBsb2dFcnJvciAoZXJyLCB2bSwgaW5mbykge1xuICB7XG4gICAgd2FybihgRXJyb3IgaW4gJHtpbmZvfTogXCIke2Vyci50b1N0cmluZygpfVwiYCwgdm0pO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmICgoaW5Ccm93c2VyIHx8IGluV2VleCkgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9IGVsc2Uge1xuICAgIHRocm93IGVyclxuICB9XG59XG5cbi8qICAqL1xuXG5sZXQgaXNVc2luZ01pY3JvVGFzayA9IGZhbHNlO1xuXG5jb25zdCBjYWxsYmFja3MgPSBbXTtcbmxldCBwZW5kaW5nID0gZmFsc2U7XG5cbmZ1bmN0aW9uIGZsdXNoQ2FsbGJhY2tzICgpIHtcbiAgcGVuZGluZyA9IGZhbHNlO1xuICBjb25zdCBjb3BpZXMgPSBjYWxsYmFja3Muc2xpY2UoMCk7XG4gIGNhbGxiYWNrcy5sZW5ndGggPSAwO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNvcGllcy5sZW5ndGg7IGkrKykge1xuICAgIGNvcGllc1tpXSgpO1xuICB9XG59XG5cbi8vIEhlcmUgd2UgaGF2ZSBhc3luYyBkZWZlcnJpbmcgd3JhcHBlcnMgdXNpbmcgbWljcm90YXNrcy5cbi8vIEluIDIuNSB3ZSB1c2VkIChtYWNybykgdGFza3MgKGluIGNvbWJpbmF0aW9uIHdpdGggbWljcm90YXNrcykuXG4vLyBIb3dldmVyLCBpdCBoYXMgc3VidGxlIHByb2JsZW1zIHdoZW4gc3RhdGUgaXMgY2hhbmdlZCByaWdodCBiZWZvcmUgcmVwYWludFxuLy8gKGUuZy4gIzY4MTMsIG91dC1pbiB0cmFuc2l0aW9ucykuXG4vLyBBbHNvLCB1c2luZyAobWFjcm8pIHRhc2tzIGluIGV2ZW50IGhhbmRsZXIgd291bGQgY2F1c2Ugc29tZSB3ZWlyZCBiZWhhdmlvcnNcbi8vIHRoYXQgY2Fubm90IGJlIGNpcmN1bXZlbnRlZCAoZS5nLiAjNzEwOSwgIzcxNTMsICM3NTQ2LCAjNzgzNCwgIzgxMDkpLlxuLy8gU28gd2Ugbm93IHVzZSBtaWNyb3Rhc2tzIGV2ZXJ5d2hlcmUsIGFnYWluLlxuLy8gQSBtYWpvciBkcmF3YmFjayBvZiB0aGlzIHRyYWRlb2ZmIGlzIHRoYXQgdGhlcmUgYXJlIHNvbWUgc2NlbmFyaW9zXG4vLyB3aGVyZSBtaWNyb3Rhc2tzIGhhdmUgdG9vIGhpZ2ggYSBwcmlvcml0eSBhbmQgZmlyZSBpbiBiZXR3ZWVuIHN1cHBvc2VkbHlcbi8vIHNlcXVlbnRpYWwgZXZlbnRzIChlLmcuICM0NTIxLCAjNjY5MCwgd2hpY2ggaGF2ZSB3b3JrYXJvdW5kcylcbi8vIG9yIGV2ZW4gYmV0d2VlbiBidWJibGluZyBvZiB0aGUgc2FtZSBldmVudCAoIzY1NjYpLlxubGV0IHRpbWVyRnVuYztcblxuLy8gVGhlIG5leHRUaWNrIGJlaGF2aW9yIGxldmVyYWdlcyB0aGUgbWljcm90YXNrIHF1ZXVlLCB3aGljaCBjYW4gYmUgYWNjZXNzZWRcbi8vIHZpYSBlaXRoZXIgbmF0aXZlIFByb21pc2UudGhlbiBvciBNdXRhdGlvbk9ic2VydmVyLlxuLy8gTXV0YXRpb25PYnNlcnZlciBoYXMgd2lkZXIgc3VwcG9ydCwgaG93ZXZlciBpdCBpcyBzZXJpb3VzbHkgYnVnZ2VkIGluXG4vLyBVSVdlYlZpZXcgaW4gaU9TID49IDkuMy4zIHdoZW4gdHJpZ2dlcmVkIGluIHRvdWNoIGV2ZW50IGhhbmRsZXJzLiBJdFxuLy8gY29tcGxldGVseSBzdG9wcyB3b3JraW5nIGFmdGVyIHRyaWdnZXJpbmcgYSBmZXcgdGltZXMuLi4gc28sIGlmIG5hdGl2ZVxuLy8gUHJvbWlzZSBpcyBhdmFpbGFibGUsIHdlIHdpbGwgdXNlIGl0OlxuLyogaXN0YW5idWwgaWdub3JlIG5leHQsICRmbG93LWRpc2FibGUtbGluZSAqL1xuaWYgKHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShQcm9taXNlKSkge1xuICBjb25zdCBwID0gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIHRpbWVyRnVuYyA9ICgpID0+IHtcbiAgICBwLnRoZW4oZmx1c2hDYWxsYmFja3MpO1xuICAgIC8vIEluIHByb2JsZW1hdGljIFVJV2ViVmlld3MsIFByb21pc2UudGhlbiBkb2Vzbid0IGNvbXBsZXRlbHkgYnJlYWssIGJ1dFxuICAgIC8vIGl0IGNhbiBnZXQgc3R1Y2sgaW4gYSB3ZWlyZCBzdGF0ZSB3aGVyZSBjYWxsYmFja3MgYXJlIHB1c2hlZCBpbnRvIHRoZVxuICAgIC8vIG1pY3JvdGFzayBxdWV1ZSBidXQgdGhlIHF1ZXVlIGlzbid0IGJlaW5nIGZsdXNoZWQsIHVudGlsIHRoZSBicm93c2VyXG4gICAgLy8gbmVlZHMgdG8gZG8gc29tZSBvdGhlciB3b3JrLCBlLmcuIGhhbmRsZSBhIHRpbWVyLiBUaGVyZWZvcmUgd2UgY2FuXG4gICAgLy8gXCJmb3JjZVwiIHRoZSBtaWNyb3Rhc2sgcXVldWUgdG8gYmUgZmx1c2hlZCBieSBhZGRpbmcgYW4gZW1wdHkgdGltZXIuXG4gICAgaWYgKGlzSU9TKSBzZXRUaW1lb3V0KG5vb3ApO1xuICB9O1xuICBpc1VzaW5nTWljcm9UYXNrID0gdHJ1ZTtcbn0gZWxzZSBpZiAoIWlzSUUgJiYgdHlwZW9mIE11dGF0aW9uT2JzZXJ2ZXIgIT09ICd1bmRlZmluZWQnICYmIChcbiAgaXNOYXRpdmUoTXV0YXRpb25PYnNlcnZlcikgfHxcbiAgLy8gUGhhbnRvbUpTIGFuZCBpT1MgNy54XG4gIE11dGF0aW9uT2JzZXJ2ZXIudG9TdHJpbmcoKSA9PT0gJ1tvYmplY3QgTXV0YXRpb25PYnNlcnZlckNvbnN0cnVjdG9yXSdcbikpIHtcbiAgLy8gVXNlIE11dGF0aW9uT2JzZXJ2ZXIgd2hlcmUgbmF0aXZlIFByb21pc2UgaXMgbm90IGF2YWlsYWJsZSxcbiAgLy8gZS5nLiBQaGFudG9tSlMsIGlPUzcsIEFuZHJvaWQgNC40XG4gIC8vICgjNjQ2NiBNdXRhdGlvbk9ic2VydmVyIGlzIHVucmVsaWFibGUgaW4gSUUxMSlcbiAgbGV0IGNvdW50ZXIgPSAxO1xuICBjb25zdCBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZsdXNoQ2FsbGJhY2tzKTtcbiAgY29uc3QgdGV4dE5vZGUgPSBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShTdHJpbmcoY291bnRlcikpO1xuICBvYnNlcnZlci5vYnNlcnZlKHRleHROb2RlLCB7XG4gICAgY2hhcmFjdGVyRGF0YTogdHJ1ZVxuICB9KTtcbiAgdGltZXJGdW5jID0gKCkgPT4ge1xuICAgIGNvdW50ZXIgPSAoY291bnRlciArIDEpICUgMjtcbiAgICB0ZXh0Tm9kZS5kYXRhID0gU3RyaW5nKGNvdW50ZXIpO1xuICB9O1xuICBpc1VzaW5nTWljcm9UYXNrID0gdHJ1ZTtcbn0gZWxzZSBpZiAodHlwZW9mIHNldEltbWVkaWF0ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoc2V0SW1tZWRpYXRlKSkge1xuICAvLyBGYWxsYmFjayB0byBzZXRJbW1lZGlhdGUuXG4gIC8vIFRlY2hpbmljYWxseSBpdCBsZXZlcmFnZXMgdGhlIChtYWNybykgdGFzayBxdWV1ZSxcbiAgLy8gYnV0IGl0IGlzIHN0aWxsIGEgYmV0dGVyIGNob2ljZSB0aGFuIHNldFRpbWVvdXQuXG4gIHRpbWVyRnVuYyA9ICgpID0+IHtcbiAgICBzZXRJbW1lZGlhdGUoZmx1c2hDYWxsYmFja3MpO1xuICB9O1xufSBlbHNlIHtcbiAgLy8gRmFsbGJhY2sgdG8gc2V0VGltZW91dC5cbiAgdGltZXJGdW5jID0gKCkgPT4ge1xuICAgIHNldFRpbWVvdXQoZmx1c2hDYWxsYmFja3MsIDApO1xuICB9O1xufVxuXG5mdW5jdGlvbiBuZXh0VGljayAoY2IsIGN0eCkge1xuICBsZXQgX3Jlc29sdmU7XG4gIGNhbGxiYWNrcy5wdXNoKCgpID0+IHtcbiAgICBpZiAoY2IpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGNiLmNhbGwoY3R4KTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaGFuZGxlRXJyb3IoZSwgY3R4LCAnbmV4dFRpY2snKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKF9yZXNvbHZlKSB7XG4gICAgICBfcmVzb2x2ZShjdHgpO1xuICAgIH1cbiAgfSk7XG4gIGlmICghcGVuZGluZykge1xuICAgIHBlbmRpbmcgPSB0cnVlO1xuICAgIHRpbWVyRnVuYygpO1xuICB9XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICBpZiAoIWNiICYmIHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICB9KVxuICB9XG59XG5cbi8qICAqL1xuXG5sZXQgbWFyaztcbmxldCBtZWFzdXJlO1xuXG57XG4gIGNvbnN0IHBlcmYgPSBpbkJyb3dzZXIgJiYgd2luZG93LnBlcmZvcm1hbmNlO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKFxuICAgIHBlcmYgJiZcbiAgICBwZXJmLm1hcmsgJiZcbiAgICBwZXJmLm1lYXN1cmUgJiZcbiAgICBwZXJmLmNsZWFyTWFya3MgJiZcbiAgICBwZXJmLmNsZWFyTWVhc3VyZXNcbiAgKSB7XG4gICAgbWFyayA9IHRhZyA9PiBwZXJmLm1hcmsodGFnKTtcbiAgICBtZWFzdXJlID0gKG5hbWUsIHN0YXJ0VGFnLCBlbmRUYWcpID0+IHtcbiAgICAgIHBlcmYubWVhc3VyZShuYW1lLCBzdGFydFRhZywgZW5kVGFnKTtcbiAgICAgIHBlcmYuY2xlYXJNYXJrcyhzdGFydFRhZyk7XG4gICAgICBwZXJmLmNsZWFyTWFya3MoZW5kVGFnKTtcbiAgICAgIC8vIHBlcmYuY2xlYXJNZWFzdXJlcyhuYW1lKVxuICAgIH07XG4gIH1cbn1cblxuLyogbm90IHR5cGUgY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgZmxvdyBkb2Vzbid0IHBsYXkgd2VsbCB3aXRoIFByb3h5ICovXG5cbmxldCBpbml0UHJveHk7XG5cbntcbiAgY29uc3QgYWxsb3dlZEdsb2JhbHMgPSBtYWtlTWFwKFxuICAgICdJbmZpbml0eSx1bmRlZmluZWQsTmFOLGlzRmluaXRlLGlzTmFOLCcgK1xuICAgICdwYXJzZUZsb2F0LHBhcnNlSW50LGRlY29kZVVSSSxkZWNvZGVVUklDb21wb25lbnQsZW5jb2RlVVJJLGVuY29kZVVSSUNvbXBvbmVudCwnICtcbiAgICAnTWF0aCxOdW1iZXIsRGF0ZSxBcnJheSxPYmplY3QsQm9vbGVhbixTdHJpbmcsUmVnRXhwLE1hcCxTZXQsSlNPTixJbnRsLCcgK1xuICAgICdyZXF1aXJlJyAvLyBmb3IgV2VicGFjay9Ccm93c2VyaWZ5XG4gICk7XG5cbiAgY29uc3Qgd2Fybk5vblByZXNlbnQgPSAodGFyZ2V0LCBrZXkpID0+IHtcbiAgICB3YXJuKFxuICAgICAgYFByb3BlcnR5IG9yIG1ldGhvZCBcIiR7a2V5fVwiIGlzIG5vdCBkZWZpbmVkIG9uIHRoZSBpbnN0YW5jZSBidXQgYCArXG4gICAgICAncmVmZXJlbmNlZCBkdXJpbmcgcmVuZGVyLiBNYWtlIHN1cmUgdGhhdCB0aGlzIHByb3BlcnR5IGlzIHJlYWN0aXZlLCAnICtcbiAgICAgICdlaXRoZXIgaW4gdGhlIGRhdGEgb3B0aW9uLCBvciBmb3IgY2xhc3MtYmFzZWQgY29tcG9uZW50cywgYnkgJyArXG4gICAgICAnaW5pdGlhbGl6aW5nIHRoZSBwcm9wZXJ0eS4gJyArXG4gICAgICAnU2VlOiBodHRwczovL3Z1ZWpzLm9yZy92Mi9ndWlkZS9yZWFjdGl2aXR5Lmh0bWwjRGVjbGFyaW5nLVJlYWN0aXZlLVByb3BlcnRpZXMuJyxcbiAgICAgIHRhcmdldFxuICAgICk7XG4gIH07XG5cbiAgY29uc3Qgd2FyblJlc2VydmVkUHJlZml4ID0gKHRhcmdldCwga2V5KSA9PiB7XG4gICAgd2FybihcbiAgICAgIGBQcm9wZXJ0eSBcIiR7a2V5fVwiIG11c3QgYmUgYWNjZXNzZWQgd2l0aCBcIiRkYXRhLiR7a2V5fVwiIGJlY2F1c2UgYCArXG4gICAgICAncHJvcGVydGllcyBzdGFydGluZyB3aXRoIFwiJFwiIG9yIFwiX1wiIGFyZSBub3QgcHJveGllZCBpbiB0aGUgVnVlIGluc3RhbmNlIHRvICcgK1xuICAgICAgJ3ByZXZlbnQgY29uZmxpY3RzIHdpdGggVnVlIGludGVybmFscycgK1xuICAgICAgJ1NlZTogaHR0cHM6Ly92dWVqcy5vcmcvdjIvYXBpLyNkYXRhJyxcbiAgICAgIHRhcmdldFxuICAgICk7XG4gIH07XG5cbiAgY29uc3QgaGFzUHJveHkgPVxuICAgIHR5cGVvZiBQcm94eSAhPT0gJ3VuZGVmaW5lZCcgJiYgaXNOYXRpdmUoUHJveHkpO1xuXG4gIGlmIChoYXNQcm94eSkge1xuICAgIGNvbnN0IGlzQnVpbHRJbk1vZGlmaWVyID0gbWFrZU1hcCgnc3RvcCxwcmV2ZW50LHNlbGYsY3RybCxzaGlmdCxhbHQsbWV0YSxleGFjdCcpO1xuICAgIGNvbmZpZy5rZXlDb2RlcyA9IG5ldyBQcm94eShjb25maWcua2V5Q29kZXMsIHtcbiAgICAgIHNldCAodGFyZ2V0LCBrZXksIHZhbHVlKSB7XG4gICAgICAgIGlmIChpc0J1aWx0SW5Nb2RpZmllcihrZXkpKSB7XG4gICAgICAgICAgd2FybihgQXZvaWQgb3ZlcndyaXRpbmcgYnVpbHQtaW4gbW9kaWZpZXIgaW4gY29uZmlnLmtleUNvZGVzOiAuJHtrZXl9YCk7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBjb25zdCBoYXNIYW5kbGVyID0ge1xuICAgIGhhcyAodGFyZ2V0LCBrZXkpIHtcbiAgICAgIGNvbnN0IGhhcyA9IGtleSBpbiB0YXJnZXQ7XG4gICAgICBjb25zdCBpc0FsbG93ZWQgPSBhbGxvd2VkR2xvYmFscyhrZXkpIHx8XG4gICAgICAgICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkuY2hhckF0KDApID09PSAnXycgJiYgIShrZXkgaW4gdGFyZ2V0LiRkYXRhKSk7XG4gICAgICBpZiAoIWhhcyAmJiAhaXNBbGxvd2VkKSB7XG4gICAgICAgIGlmIChrZXkgaW4gdGFyZ2V0LiRkYXRhKSB3YXJuUmVzZXJ2ZWRQcmVmaXgodGFyZ2V0LCBrZXkpO1xuICAgICAgICBlbHNlIHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBoYXMgfHwgIWlzQWxsb3dlZFxuICAgIH1cbiAgfTtcblxuICBjb25zdCBnZXRIYW5kbGVyID0ge1xuICAgIGdldCAodGFyZ2V0LCBrZXkpIHtcbiAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiAhKGtleSBpbiB0YXJnZXQpKSB7XG4gICAgICAgIGlmIChrZXkgaW4gdGFyZ2V0LiRkYXRhKSB3YXJuUmVzZXJ2ZWRQcmVmaXgodGFyZ2V0LCBrZXkpO1xuICAgICAgICBlbHNlIHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0YXJnZXRba2V5XVxuICAgIH1cbiAgfTtcblxuICBpbml0UHJveHkgPSBmdW5jdGlvbiBpbml0UHJveHkgKHZtKSB7XG4gICAgaWYgKGhhc1Byb3h5KSB7XG4gICAgICAvLyBkZXRlcm1pbmUgd2hpY2ggcHJveHkgaGFuZGxlciB0byB1c2VcbiAgICAgIGNvbnN0IG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcbiAgICAgIGNvbnN0IGhhbmRsZXJzID0gb3B0aW9ucy5yZW5kZXIgJiYgb3B0aW9ucy5yZW5kZXIuX3dpdGhTdHJpcHBlZFxuICAgICAgICA/IGdldEhhbmRsZXJcbiAgICAgICAgOiBoYXNIYW5kbGVyO1xuICAgICAgdm0uX3JlbmRlclByb3h5ID0gbmV3IFByb3h5KHZtLCBoYW5kbGVycyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZtLl9yZW5kZXJQcm94eSA9IHZtO1xuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbmNvbnN0IHNlZW5PYmplY3RzID0gbmV3IF9TZXQoKTtcblxuLyoqXG4gKiBSZWN1cnNpdmVseSB0cmF2ZXJzZSBhbiBvYmplY3QgdG8gZXZva2UgYWxsIGNvbnZlcnRlZFxuICogZ2V0dGVycywgc28gdGhhdCBldmVyeSBuZXN0ZWQgcHJvcGVydHkgaW5zaWRlIHRoZSBvYmplY3RcbiAqIGlzIGNvbGxlY3RlZCBhcyBhIFwiZGVlcFwiIGRlcGVuZGVuY3kuXG4gKi9cbmZ1bmN0aW9uIHRyYXZlcnNlICh2YWwpIHtcbiAgX3RyYXZlcnNlKHZhbCwgc2Vlbk9iamVjdHMpO1xuICBzZWVuT2JqZWN0cy5jbGVhcigpO1xufVxuXG5mdW5jdGlvbiBfdHJhdmVyc2UgKHZhbCwgc2Vlbikge1xuICBsZXQgaSwga2V5cztcbiAgY29uc3QgaXNBID0gQXJyYXkuaXNBcnJheSh2YWwpO1xuICBpZiAoKCFpc0EgJiYgIWlzT2JqZWN0KHZhbCkpIHx8IE9iamVjdC5pc0Zyb3plbih2YWwpIHx8IHZhbCBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgaWYgKHZhbC5fX29iX18pIHtcbiAgICBjb25zdCBkZXBJZCA9IHZhbC5fX29iX18uZGVwLmlkO1xuICAgIGlmIChzZWVuLmhhcyhkZXBJZCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBzZWVuLmFkZChkZXBJZCk7XG4gIH1cbiAgaWYgKGlzQSkge1xuICAgIGkgPSB2YWwubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIF90cmF2ZXJzZSh2YWxbaV0sIHNlZW4pO1xuICB9IGVsc2Uge1xuICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgIGkgPSBrZXlzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSBfdHJhdmVyc2UodmFsW2tleXNbaV1dLCBzZWVuKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuY29uc3Qgbm9ybWFsaXplRXZlbnQgPSBjYWNoZWQoKG5hbWUpID0+IHtcbiAgY29uc3QgcGFzc2l2ZSA9IG5hbWUuY2hhckF0KDApID09PSAnJic7XG4gIG5hbWUgPSBwYXNzaXZlID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gIGNvbnN0IG9uY2UkJDEgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJ34nOyAvLyBQcmVmaXhlZCBsYXN0LCBjaGVja2VkIGZpcnN0XG4gIG5hbWUgPSBvbmNlJCQxID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gIGNvbnN0IGNhcHR1cmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyEnO1xuICBuYW1lID0gY2FwdHVyZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICByZXR1cm4ge1xuICAgIG5hbWUsXG4gICAgb25jZTogb25jZSQkMSxcbiAgICBjYXB0dXJlLFxuICAgIHBhc3NpdmVcbiAgfVxufSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUZuSW52b2tlciAoZm5zLCB2bSkge1xuICBmdW5jdGlvbiBpbnZva2VyICgpIHtcbiAgICBjb25zdCBmbnMgPSBpbnZva2VyLmZucztcbiAgICBpZiAoQXJyYXkuaXNBcnJheShmbnMpKSB7XG4gICAgICBjb25zdCBjbG9uZWQgPSBmbnMuc2xpY2UoKTtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2xvbmVkLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGNsb25lZFtpXSwgbnVsbCwgYXJndW1lbnRzLCB2bSwgYHYtb24gaGFuZGxlcmApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyByZXR1cm4gaGFuZGxlciByZXR1cm4gdmFsdWUgZm9yIHNpbmdsZSBoYW5kbGVyc1xuICAgICAgcmV0dXJuIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGZucywgbnVsbCwgYXJndW1lbnRzLCB2bSwgYHYtb24gaGFuZGxlcmApXG4gICAgfVxuICB9XG4gIGludm9rZXIuZm5zID0gZm5zO1xuICByZXR1cm4gaW52b2tlclxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaXN0ZW5lcnMgKFxuICBvbixcbiAgb2xkT24sXG4gIGFkZCxcbiAgcmVtb3ZlJCQxLFxuICBjcmVhdGVPbmNlSGFuZGxlcixcbiAgdm1cbikge1xuICBsZXQgbmFtZSwgZGVmJCQxLCBjdXIsIG9sZCwgZXZlbnQ7XG4gIGZvciAobmFtZSBpbiBvbikge1xuICAgIGRlZiQkMSA9IGN1ciA9IG9uW25hbWVdO1xuICAgIG9sZCA9IG9sZE9uW25hbWVdO1xuICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XG4gICAgaWYgKGlzVW5kZWYoY3VyKSkge1xuICAgICAgd2FybihcbiAgICAgICAgYEludmFsaWQgaGFuZGxlciBmb3IgZXZlbnQgXCIke2V2ZW50Lm5hbWV9XCI6IGdvdCBgICsgU3RyaW5nKGN1ciksXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoaXNVbmRlZihvbGQpKSB7XG4gICAgICBpZiAoaXNVbmRlZihjdXIuZm5zKSkge1xuICAgICAgICBjdXIgPSBvbltuYW1lXSA9IGNyZWF0ZUZuSW52b2tlcihjdXIsIHZtKTtcbiAgICAgIH1cbiAgICAgIGlmIChpc1RydWUoZXZlbnQub25jZSkpIHtcbiAgICAgICAgY3VyID0gb25bbmFtZV0gPSBjcmVhdGVPbmNlSGFuZGxlcihldmVudC5uYW1lLCBjdXIsIGV2ZW50LmNhcHR1cmUpO1xuICAgICAgfVxuICAgICAgYWRkKGV2ZW50Lm5hbWUsIGN1ciwgZXZlbnQuY2FwdHVyZSwgZXZlbnQucGFzc2l2ZSwgZXZlbnQucGFyYW1zKTtcbiAgICB9IGVsc2UgaWYgKGN1ciAhPT0gb2xkKSB7XG4gICAgICBvbGQuZm5zID0gY3VyO1xuICAgICAgb25bbmFtZV0gPSBvbGQ7XG4gICAgfVxuICB9XG4gIGZvciAobmFtZSBpbiBvbGRPbikge1xuICAgIGlmIChpc1VuZGVmKG9uW25hbWVdKSkge1xuICAgICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICAgIHJlbW92ZSQkMShldmVudC5uYW1lLCBvbGRPbltuYW1lXSwgZXZlbnQuY2FwdHVyZSk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBtZXJnZVZOb2RlSG9vayAoZGVmLCBob29rS2V5LCBob29rKSB7XG4gIGlmIChkZWYgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgIGRlZiA9IGRlZi5kYXRhLmhvb2sgfHwgKGRlZi5kYXRhLmhvb2sgPSB7fSk7XG4gIH1cbiAgbGV0IGludm9rZXI7XG4gIGNvbnN0IG9sZEhvb2sgPSBkZWZbaG9va0tleV07XG5cbiAgZnVuY3Rpb24gd3JhcHBlZEhvb2sgKCkge1xuICAgIGhvb2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAvLyBpbXBvcnRhbnQ6IHJlbW92ZSBtZXJnZWQgaG9vayB0byBlbnN1cmUgaXQncyBjYWxsZWQgb25seSBvbmNlXG4gICAgLy8gYW5kIHByZXZlbnQgbWVtb3J5IGxlYWtcbiAgICByZW1vdmUoaW52b2tlci5mbnMsIHdyYXBwZWRIb29rKTtcbiAgfVxuXG4gIGlmIChpc1VuZGVmKG9sZEhvb2spKSB7XG4gICAgLy8gbm8gZXhpc3RpbmcgaG9va1xuICAgIGludm9rZXIgPSBjcmVhdGVGbkludm9rZXIoW3dyYXBwZWRIb29rXSk7XG4gIH0gZWxzZSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGlzRGVmKG9sZEhvb2suZm5zKSAmJiBpc1RydWUob2xkSG9vay5tZXJnZWQpKSB7XG4gICAgICAvLyBhbHJlYWR5IGEgbWVyZ2VkIGludm9rZXJcbiAgICAgIGludm9rZXIgPSBvbGRIb29rO1xuICAgICAgaW52b2tlci5mbnMucHVzaCh3cmFwcGVkSG9vayk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGV4aXN0aW5nIHBsYWluIGhvb2tcbiAgICAgIGludm9rZXIgPSBjcmVhdGVGbkludm9rZXIoW29sZEhvb2ssIHdyYXBwZWRIb29rXSk7XG4gICAgfVxuICB9XG5cbiAgaW52b2tlci5tZXJnZWQgPSB0cnVlO1xuICBkZWZbaG9va0tleV0gPSBpbnZva2VyO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZXh0cmFjdFByb3BzRnJvbVZOb2RlRGF0YSAoXG4gIGRhdGEsXG4gIEN0b3IsXG4gIHRhZ1xuKSB7XG4gIC8vIHdlIGFyZSBvbmx5IGV4dHJhY3RpbmcgcmF3IHZhbHVlcyBoZXJlLlxuICAvLyB2YWxpZGF0aW9uIGFuZCBkZWZhdWx0IHZhbHVlcyBhcmUgaGFuZGxlZCBpbiB0aGUgY2hpbGRcbiAgLy8gY29tcG9uZW50IGl0c2VsZi5cbiAgY29uc3QgcHJvcE9wdGlvbnMgPSBDdG9yLm9wdGlvbnMucHJvcHM7XG4gIGlmIChpc1VuZGVmKHByb3BPcHRpb25zKSkge1xuICAgIHJldHVyblxuICB9XG4gIGNvbnN0IHJlcyA9IHt9O1xuICBjb25zdCB7IGF0dHJzLCBwcm9wcyB9ID0gZGF0YTtcbiAgaWYgKGlzRGVmKGF0dHJzKSB8fCBpc0RlZihwcm9wcykpIHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBwcm9wT3B0aW9ucykge1xuICAgICAgY29uc3QgYWx0S2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICB7XG4gICAgICAgIGNvbnN0IGtleUluTG93ZXJDYXNlID0ga2V5LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBrZXkgIT09IGtleUluTG93ZXJDYXNlICYmXG4gICAgICAgICAgYXR0cnMgJiYgaGFzT3duKGF0dHJzLCBrZXlJbkxvd2VyQ2FzZSlcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGlwKFxuICAgICAgICAgICAgYFByb3AgXCIke2tleUluTG93ZXJDYXNlfVwiIGlzIHBhc3NlZCB0byBjb21wb25lbnQgYCArXG4gICAgICAgICAgICBgJHtmb3JtYXRDb21wb25lbnROYW1lKHRhZyB8fCBDdG9yKX0sIGJ1dCB0aGUgZGVjbGFyZWQgcHJvcCBuYW1lIGlzYCArXG4gICAgICAgICAgICBgIFwiJHtrZXl9XCIuIGAgK1xuICAgICAgICAgICAgYE5vdGUgdGhhdCBIVE1MIGF0dHJpYnV0ZXMgYXJlIGNhc2UtaW5zZW5zaXRpdmUgYW5kIGNhbWVsQ2FzZWQgYCArXG4gICAgICAgICAgICBgcHJvcHMgbmVlZCB0byB1c2UgdGhlaXIga2ViYWItY2FzZSBlcXVpdmFsZW50cyB3aGVuIHVzaW5nIGluLURPTSBgICtcbiAgICAgICAgICAgIGB0ZW1wbGF0ZXMuIFlvdSBzaG91bGQgcHJvYmFibHkgdXNlIFwiJHthbHRLZXl9XCIgaW5zdGVhZCBvZiBcIiR7a2V5fVwiLmBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBjaGVja1Byb3AocmVzLCBwcm9wcywga2V5LCBhbHRLZXksIHRydWUpIHx8XG4gICAgICBjaGVja1Byb3AocmVzLCBhdHRycywga2V5LCBhbHRLZXksIGZhbHNlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBjaGVja1Byb3AgKFxuICByZXMsXG4gIGhhc2gsXG4gIGtleSxcbiAgYWx0S2V5LFxuICBwcmVzZXJ2ZVxuKSB7XG4gIGlmIChpc0RlZihoYXNoKSkge1xuICAgIGlmIChoYXNPd24oaGFzaCwga2V5KSkge1xuICAgICAgcmVzW2tleV0gPSBoYXNoW2tleV07XG4gICAgICBpZiAoIXByZXNlcnZlKSB7XG4gICAgICAgIGRlbGV0ZSBoYXNoW2tleV07XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH0gZWxzZSBpZiAoaGFzT3duKGhhc2gsIGFsdEtleSkpIHtcbiAgICAgIHJlc1trZXldID0gaGFzaFthbHRLZXldO1xuICAgICAgaWYgKCFwcmVzZXJ2ZSkge1xuICAgICAgICBkZWxldGUgaGFzaFthbHRLZXldO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbi8qICAqL1xuXG4vLyBUaGUgdGVtcGxhdGUgY29tcGlsZXIgYXR0ZW1wdHMgdG8gbWluaW1pemUgdGhlIG5lZWQgZm9yIG5vcm1hbGl6YXRpb24gYnlcbi8vIHN0YXRpY2FsbHkgYW5hbHl6aW5nIHRoZSB0ZW1wbGF0ZSBhdCBjb21waWxlIHRpbWUuXG4vL1xuLy8gRm9yIHBsYWluIEhUTUwgbWFya3VwLCBub3JtYWxpemF0aW9uIGNhbiBiZSBjb21wbGV0ZWx5IHNraXBwZWQgYmVjYXVzZSB0aGVcbi8vIGdlbmVyYXRlZCByZW5kZXIgZnVuY3Rpb24gaXMgZ3VhcmFudGVlZCB0byByZXR1cm4gQXJyYXk8Vk5vZGU+LiBUaGVyZSBhcmVcbi8vIHR3byBjYXNlcyB3aGVyZSBleHRyYSBub3JtYWxpemF0aW9uIGlzIG5lZWRlZDpcblxuLy8gMS4gV2hlbiB0aGUgY2hpbGRyZW4gY29udGFpbnMgY29tcG9uZW50cyAtIGJlY2F1c2UgYSBmdW5jdGlvbmFsIGNvbXBvbmVudFxuLy8gbWF5IHJldHVybiBhbiBBcnJheSBpbnN0ZWFkIG9mIGEgc2luZ2xlIHJvb3QuIEluIHRoaXMgY2FzZSwganVzdCBhIHNpbXBsZVxuLy8gbm9ybWFsaXphdGlvbiBpcyBuZWVkZWQgLSBpZiBhbnkgY2hpbGQgaXMgYW4gQXJyYXksIHdlIGZsYXR0ZW4gdGhlIHdob2xlXG4vLyB0aGluZyB3aXRoIEFycmF5LnByb3RvdHlwZS5jb25jYXQuIEl0IGlzIGd1YXJhbnRlZWQgdG8gYmUgb25seSAxLWxldmVsIGRlZXBcbi8vIGJlY2F1c2UgZnVuY3Rpb25hbCBjb21wb25lbnRzIGFscmVhZHkgbm9ybWFsaXplIHRoZWlyIG93biBjaGlsZHJlbi5cbmZ1bmN0aW9uIHNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuIChjaGlsZHJlbikge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW5baV0pKSB7XG4gICAgICByZXR1cm4gQXJyYXkucHJvdG90eXBlLmNvbmNhdC5hcHBseShbXSwgY2hpbGRyZW4pXG4gICAgfVxuICB9XG4gIHJldHVybiBjaGlsZHJlblxufVxuXG4vLyAyLiBXaGVuIHRoZSBjaGlsZHJlbiBjb250YWlucyBjb25zdHJ1Y3RzIHRoYXQgYWx3YXlzIGdlbmVyYXRlZCBuZXN0ZWQgQXJyYXlzLFxuLy8gZS5nLiA8dGVtcGxhdGU+LCA8c2xvdD4sIHYtZm9yLCBvciB3aGVuIHRoZSBjaGlsZHJlbiBpcyBwcm92aWRlZCBieSB1c2VyXG4vLyB3aXRoIGhhbmQtd3JpdHRlbiByZW5kZXIgZnVuY3Rpb25zIC8gSlNYLiBJbiBzdWNoIGNhc2VzIGEgZnVsbCBub3JtYWxpemF0aW9uXG4vLyBpcyBuZWVkZWQgdG8gY2F0ZXIgdG8gYWxsIHBvc3NpYmxlIHR5cGVzIG9mIGNoaWxkcmVuIHZhbHVlcy5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUNoaWxkcmVuIChjaGlsZHJlbikge1xuICByZXR1cm4gaXNQcmltaXRpdmUoY2hpbGRyZW4pXG4gICAgPyBbY3JlYXRlVGV4dFZOb2RlKGNoaWxkcmVuKV1cbiAgICA6IEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pXG4gICAgICA/IG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oY2hpbGRyZW4pXG4gICAgICA6IHVuZGVmaW5lZFxufVxuXG5mdW5jdGlvbiBpc1RleHROb2RlIChub2RlKSB7XG4gIHJldHVybiBpc0RlZihub2RlKSAmJiBpc0RlZihub2RlLnRleHQpICYmIGlzRmFsc2Uobm9kZS5pc0NvbW1lbnQpXG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4gKGNoaWxkcmVuLCBuZXN0ZWRJbmRleCkge1xuICBjb25zdCByZXMgPSBbXTtcbiAgbGV0IGksIGMsIGxhc3RJbmRleCwgbGFzdDtcbiAgZm9yIChpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgYyA9IGNoaWxkcmVuW2ldO1xuICAgIGlmIChpc1VuZGVmKGMpIHx8IHR5cGVvZiBjID09PSAnYm9vbGVhbicpIGNvbnRpbnVlXG4gICAgbGFzdEluZGV4ID0gcmVzLmxlbmd0aCAtIDE7XG4gICAgbGFzdCA9IHJlc1tsYXN0SW5kZXhdO1xuICAgIC8vICBuZXN0ZWRcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjKSkge1xuICAgICAgaWYgKGMubGVuZ3RoID4gMCkge1xuICAgICAgICBjID0gbm9ybWFsaXplQXJyYXlDaGlsZHJlbihjLCBgJHtuZXN0ZWRJbmRleCB8fCAnJ31fJHtpfWApO1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIGlmIChpc1RleHROb2RlKGNbMF0pICYmIGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyAoY1swXSkudGV4dCk7XG4gICAgICAgICAgYy5zaGlmdCgpO1xuICAgICAgICB9XG4gICAgICAgIHJlcy5wdXNoLmFwcGx5KHJlcywgYyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1ByaW1pdGl2ZShjKSkge1xuICAgICAgaWYgKGlzVGV4dE5vZGUobGFzdCkpIHtcbiAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICAvLyB0aGlzIGlzIG5lY2Vzc2FyeSBmb3IgU1NSIGh5ZHJhdGlvbiBiZWNhdXNlIHRleHQgbm9kZXMgYXJlXG4gICAgICAgIC8vIGVzc2VudGlhbGx5IG1lcmdlZCB3aGVuIHJlbmRlcmVkIHRvIEhUTUwgc3RyaW5nc1xuICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjKTtcbiAgICAgIH0gZWxzZSBpZiAoYyAhPT0gJycpIHtcbiAgICAgICAgLy8gY29udmVydCBwcmltaXRpdmUgdG8gdm5vZGVcbiAgICAgICAgcmVzLnB1c2goY3JlYXRlVGV4dFZOb2RlKGMpKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzVGV4dE5vZGUoYykgJiYgaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgIHJlc1tsYXN0SW5kZXhdID0gY3JlYXRlVGV4dFZOb2RlKGxhc3QudGV4dCArIGMudGV4dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBkZWZhdWx0IGtleSBmb3IgbmVzdGVkIGFycmF5IGNoaWxkcmVuIChsaWtlbHkgZ2VuZXJhdGVkIGJ5IHYtZm9yKVxuICAgICAgICBpZiAoaXNUcnVlKGNoaWxkcmVuLl9pc1ZMaXN0KSAmJlxuICAgICAgICAgIGlzRGVmKGMudGFnKSAmJlxuICAgICAgICAgIGlzVW5kZWYoYy5rZXkpICYmXG4gICAgICAgICAgaXNEZWYobmVzdGVkSW5kZXgpKSB7XG4gICAgICAgICAgYy5rZXkgPSBgX192bGlzdCR7bmVzdGVkSW5kZXh9XyR7aX1fX2A7XG4gICAgICAgIH1cbiAgICAgICAgcmVzLnB1c2goYyk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRQcm92aWRlICh2bSkge1xuICBjb25zdCBwcm92aWRlID0gdm0uJG9wdGlvbnMucHJvdmlkZTtcbiAgaWYgKHByb3ZpZGUpIHtcbiAgICB2bS5fcHJvdmlkZWQgPSB0eXBlb2YgcHJvdmlkZSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyBwcm92aWRlLmNhbGwodm0pXG4gICAgICA6IHByb3ZpZGU7XG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdEluamVjdGlvbnMgKHZtKSB7XG4gIGNvbnN0IHJlc3VsdCA9IHJlc29sdmVJbmplY3Qodm0uJG9wdGlvbnMuaW5qZWN0LCB2bSk7XG4gIGlmIChyZXN1bHQpIHtcbiAgICB0b2dnbGVPYnNlcnZpbmcoZmFsc2UpO1xuICAgIE9iamVjdC5rZXlzKHJlc3VsdCkuZm9yRWFjaChrZXkgPT4ge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICAgIHtcbiAgICAgICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sIGtleSwgcmVzdWx0W2tleV0sICgpID0+IHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgYEF2b2lkIG11dGF0aW5nIGFuIGluamVjdGVkIHZhbHVlIGRpcmVjdGx5IHNpbmNlIHRoZSBjaGFuZ2VzIHdpbGwgYmUgYCArXG4gICAgICAgICAgICBgb3ZlcndyaXR0ZW4gd2hlbmV2ZXIgdGhlIHByb3ZpZGVkIGNvbXBvbmVudCByZS1yZW5kZXJzLiBgICtcbiAgICAgICAgICAgIGBpbmplY3Rpb24gYmVpbmcgbXV0YXRlZDogXCIke2tleX1cImAsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlSW5qZWN0IChpbmplY3QsIHZtKSB7XG4gIGlmIChpbmplY3QpIHtcbiAgICAvLyBpbmplY3QgaXMgOmFueSBiZWNhdXNlIGZsb3cgaXMgbm90IHNtYXJ0IGVub3VnaCB0byBmaWd1cmUgb3V0IGNhY2hlZFxuICAgIGNvbnN0IHJlc3VsdCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgY29uc3Qga2V5cyA9IGhhc1N5bWJvbFxuICAgICAgPyBSZWZsZWN0Lm93bktleXMoaW5qZWN0KVxuICAgICAgOiBPYmplY3Qua2V5cyhpbmplY3QpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgICAgLy8gIzY1NzQgaW4gY2FzZSB0aGUgaW5qZWN0IG9iamVjdCBpcyBvYnNlcnZlZC4uLlxuICAgICAgaWYgKGtleSA9PT0gJ19fb2JfXycpIGNvbnRpbnVlXG4gICAgICBjb25zdCBwcm92aWRlS2V5ID0gaW5qZWN0W2tleV0uZnJvbTtcbiAgICAgIGxldCBzb3VyY2UgPSB2bTtcbiAgICAgIHdoaWxlIChzb3VyY2UpIHtcbiAgICAgICAgaWYgKHNvdXJjZS5fcHJvdmlkZWQgJiYgaGFzT3duKHNvdXJjZS5fcHJvdmlkZWQsIHByb3ZpZGVLZXkpKSB7XG4gICAgICAgICAgcmVzdWx0W2tleV0gPSBzb3VyY2UuX3Byb3ZpZGVkW3Byb3ZpZGVLZXldO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgc291cmNlID0gc291cmNlLiRwYXJlbnQ7XG4gICAgICB9XG4gICAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgICBpZiAoJ2RlZmF1bHQnIGluIGluamVjdFtrZXldKSB7XG4gICAgICAgICAgY29uc3QgcHJvdmlkZURlZmF1bHQgPSBpbmplY3Rba2V5XS5kZWZhdWx0O1xuICAgICAgICAgIHJlc3VsdFtrZXldID0gdHlwZW9mIHByb3ZpZGVEZWZhdWx0ID09PSAnZnVuY3Rpb24nXG4gICAgICAgICAgICA/IHByb3ZpZGVEZWZhdWx0LmNhbGwodm0pXG4gICAgICAgICAgICA6IHByb3ZpZGVEZWZhdWx0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdhcm4oYEluamVjdGlvbiBcIiR7a2V5fVwiIG5vdCBmb3VuZGAsIHZtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cbn1cblxuLyogICovXG5cblxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciByZXNvbHZpbmcgcmF3IGNoaWxkcmVuIFZOb2RlcyBpbnRvIGEgc2xvdCBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVTbG90cyAoXG4gIGNoaWxkcmVuLFxuICBjb250ZXh0XG4pIHtcbiAgaWYgKCFjaGlsZHJlbiB8fCAhY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgcmV0dXJuIHt9XG4gIH1cbiAgY29uc3Qgc2xvdHMgPSB7fTtcbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBjb25zdCBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgIGNvbnN0IGRhdGEgPSBjaGlsZC5kYXRhO1xuICAgIC8vIHJlbW92ZSBzbG90IGF0dHJpYnV0ZSBpZiB0aGUgbm9kZSBpcyByZXNvbHZlZCBhcyBhIFZ1ZSBzbG90IG5vZGVcbiAgICBpZiAoZGF0YSAmJiBkYXRhLmF0dHJzICYmIGRhdGEuYXR0cnMuc2xvdCkge1xuICAgICAgZGVsZXRlIGRhdGEuYXR0cnMuc2xvdDtcbiAgICB9XG4gICAgLy8gbmFtZWQgc2xvdHMgc2hvdWxkIG9ubHkgYmUgcmVzcGVjdGVkIGlmIHRoZSB2bm9kZSB3YXMgcmVuZGVyZWQgaW4gdGhlXG4gICAgLy8gc2FtZSBjb250ZXh0LlxuICAgIGlmICgoY2hpbGQuY29udGV4dCA9PT0gY29udGV4dCB8fCBjaGlsZC5mbkNvbnRleHQgPT09IGNvbnRleHQpICYmXG4gICAgICBkYXRhICYmIGRhdGEuc2xvdCAhPSBudWxsXG4gICAgKSB7XG4gICAgICBjb25zdCBuYW1lID0gZGF0YS5zbG90O1xuICAgICAgY29uc3Qgc2xvdCA9IChzbG90c1tuYW1lXSB8fCAoc2xvdHNbbmFtZV0gPSBbXSkpO1xuICAgICAgaWYgKGNoaWxkLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgICBzbG90LnB1c2guYXBwbHkoc2xvdCwgY2hpbGQuY2hpbGRyZW4gfHwgW10pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2xvdC5wdXNoKGNoaWxkKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgKHNsb3RzLmRlZmF1bHQgfHwgKHNsb3RzLmRlZmF1bHQgPSBbXSkpLnB1c2goY2hpbGQpO1xuICAgIH1cbiAgfVxuICAvLyBpZ25vcmUgc2xvdHMgdGhhdCBjb250YWlucyBvbmx5IHdoaXRlc3BhY2VcbiAgZm9yIChjb25zdCBuYW1lIGluIHNsb3RzKSB7XG4gICAgaWYgKHNsb3RzW25hbWVdLmV2ZXJ5KGlzV2hpdGVzcGFjZSkpIHtcbiAgICAgIGRlbGV0ZSBzbG90c1tuYW1lXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHNsb3RzXG59XG5cbmZ1bmN0aW9uIGlzV2hpdGVzcGFjZSAobm9kZSkge1xuICByZXR1cm4gKG5vZGUuaXNDb21tZW50ICYmICFub2RlLmFzeW5jRmFjdG9yeSkgfHwgbm9kZS50ZXh0ID09PSAnICdcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVNjb3BlZFNsb3RzIChcbiAgc2xvdHMsXG4gIG5vcm1hbFNsb3RzLFxuICBwcmV2U2xvdHNcbikge1xuICBsZXQgcmVzO1xuICBpZiAoIXNsb3RzKSB7XG4gICAgcmVzID0ge307XG4gIH0gZWxzZSBpZiAoc2xvdHMuX25vcm1hbGl6ZWQpIHtcbiAgICAvLyBmYXN0IHBhdGggMTogY2hpbGQgY29tcG9uZW50IHJlLXJlbmRlciBvbmx5LCBwYXJlbnQgZGlkIG5vdCBjaGFuZ2VcbiAgICByZXR1cm4gc2xvdHMuX25vcm1hbGl6ZWRcbiAgfSBlbHNlIGlmIChcbiAgICBzbG90cy4kc3RhYmxlICYmXG4gICAgcHJldlNsb3RzICYmXG4gICAgcHJldlNsb3RzICE9PSBlbXB0eU9iamVjdCAmJlxuICAgIE9iamVjdC5rZXlzKG5vcm1hbFNsb3RzKS5sZW5ndGggPT09IDBcbiAgKSB7XG4gICAgLy8gZmFzdCBwYXRoIDI6IHN0YWJsZSBzY29wZWQgc2xvdHMgdy8gbm8gbm9ybWFsIHNsb3RzIHRvIHByb3h5LFxuICAgIC8vIG9ubHkgbmVlZCB0byBub3JtYWxpemUgb25jZVxuICAgIHJldHVybiBwcmV2U2xvdHNcbiAgfSBlbHNlIHtcbiAgICByZXMgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiBzbG90cykge1xuICAgICAgaWYgKHNsb3RzW2tleV0gJiYga2V5WzBdICE9PSAnJCcpIHtcbiAgICAgICAgcmVzW2tleV0gPSBub3JtYWxpemVTY29wZWRTbG90KG5vcm1hbFNsb3RzLCBrZXksIHNsb3RzW2tleV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBleHBvc2Ugbm9ybWFsIHNsb3RzIG9uIHNjb3BlZFNsb3RzXG4gIGZvciAoY29uc3Qga2V5IGluIG5vcm1hbFNsb3RzKSB7XG4gICAgaWYgKCEoa2V5IGluIHJlcykpIHtcbiAgICAgIHJlc1trZXldID0gcHJveHlOb3JtYWxTbG90KG5vcm1hbFNsb3RzLCBrZXkpO1xuICAgIH1cbiAgfVxuICAvLyBhdm9yaWF6IHNlZW1zIHRvIG1vY2sgYSBub24tZXh0ZW5zaWJsZSAkc2NvcGVkU2xvdHMgb2JqZWN0XG4gIC8vIGFuZCB3aGVuIHRoYXQgaXMgcGFzc2VkIGRvd24gdGhpcyB3b3VsZCBjYXVzZSBhbiBlcnJvclxuICBpZiAoc2xvdHMgJiYgT2JqZWN0LmlzRXh0ZW5zaWJsZShzbG90cykpIHtcbiAgICAoc2xvdHMpLl9ub3JtYWxpemVkID0gcmVzO1xuICB9XG4gIGRlZihyZXMsICckc3RhYmxlJywgc2xvdHMgPyAhIXNsb3RzLiRzdGFibGUgOiB0cnVlKTtcbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBub3JtYWxpemVTY29wZWRTbG90KG5vcm1hbFNsb3RzLCBrZXksIGZuKSB7XG4gIGNvbnN0IG5vcm1hbGl6ZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IHJlcyA9IGFyZ3VtZW50cy5sZW5ndGggPyBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpIDogZm4oe30pO1xuICAgIHJlcyA9IHJlcyAmJiB0eXBlb2YgcmVzID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShyZXMpXG4gICAgICA/IFtyZXNdIC8vIHNpbmdsZSB2bm9kZVxuICAgICAgOiBub3JtYWxpemVDaGlsZHJlbihyZXMpO1xuICAgIHJldHVybiByZXMgJiYgcmVzLmxlbmd0aCA9PT0gMFxuICAgICAgPyB1bmRlZmluZWRcbiAgICAgIDogcmVzXG4gIH07XG4gIC8vIHRoaXMgaXMgYSBzbG90IHVzaW5nIHRoZSBuZXcgdi1zbG90IHN5bnRheCB3aXRob3V0IHNjb3BlLiBhbHRob3VnaCBpdCBpc1xuICAvLyBjb21waWxlZCBhcyBhIHNjb3BlZCBzbG90LCByZW5kZXIgZm4gdXNlcnMgd291bGQgZXhwZWN0IGl0IHRvIGJlIHByZXNlbnRcbiAgLy8gb24gdGhpcy4kc2xvdHMgYmVjYXVzZSB0aGUgdXNhZ2UgaXMgc2VtYW50aWNhbGx5IGEgbm9ybWFsIHNsb3QuXG4gIGlmIChmbi5wcm94eSkge1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShub3JtYWxTbG90cywga2V5LCB7XG4gICAgICBnZXQ6IG5vcm1hbGl6ZWQsXG4gICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIG5vcm1hbGl6ZWRcbn1cblxuZnVuY3Rpb24gcHJveHlOb3JtYWxTbG90KHNsb3RzLCBrZXkpIHtcbiAgcmV0dXJuICgpID0+IHNsb3RzW2tleV1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyB2LWZvciBsaXN0cy5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyTGlzdCAoXG4gIHZhbCxcbiAgcmVuZGVyXG4pIHtcbiAgbGV0IHJldCwgaSwgbCwga2V5cywga2V5O1xuICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpIHx8IHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0ID0gbmV3IEFycmF5KHZhbC5sZW5ndGgpO1xuICAgIGZvciAoaSA9IDAsIGwgPSB2YWwubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICByZXRbaV0gPSByZW5kZXIodmFsW2ldLCBpKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICByZXQgPSBuZXcgQXJyYXkodmFsKTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgdmFsOyBpKyspIHtcbiAgICAgIHJldFtpXSA9IHJlbmRlcihpICsgMSwgaSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzT2JqZWN0KHZhbCkpIHtcbiAgICBpZiAoaGFzU3ltYm9sICYmIHZhbFtTeW1ib2wuaXRlcmF0b3JdKSB7XG4gICAgICByZXQgPSBbXTtcbiAgICAgIGNvbnN0IGl0ZXJhdG9yID0gdmFsW1N5bWJvbC5pdGVyYXRvcl0oKTtcbiAgICAgIGxldCByZXN1bHQgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICB3aGlsZSAoIXJlc3VsdC5kb25lKSB7XG4gICAgICAgIHJldC5wdXNoKHJlbmRlcihyZXN1bHQudmFsdWUsIHJldC5sZW5ndGgpKTtcbiAgICAgICAgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBrZXlzID0gT2JqZWN0LmtleXModmFsKTtcbiAgICAgIHJldCA9IG5ldyBBcnJheShrZXlzLmxlbmd0aCk7XG4gICAgICBmb3IgKGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtrZXldLCBrZXksIGkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoIWlzRGVmKHJldCkpIHtcbiAgICByZXQgPSBbXTtcbiAgfVxuICAocmV0KS5faXNWTGlzdCA9IHRydWU7XG4gIHJldHVybiByZXRcbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyA8c2xvdD5cbiAqL1xuZnVuY3Rpb24gcmVuZGVyU2xvdCAoXG4gIG5hbWUsXG4gIGZhbGxiYWNrLFxuICBwcm9wcyxcbiAgYmluZE9iamVjdFxuKSB7XG4gIGNvbnN0IHNjb3BlZFNsb3RGbiA9IHRoaXMuJHNjb3BlZFNsb3RzW25hbWVdO1xuICBsZXQgbm9kZXM7XG4gIGlmIChzY29wZWRTbG90Rm4pIHsgLy8gc2NvcGVkIHNsb3RcbiAgICBwcm9wcyA9IHByb3BzIHx8IHt9O1xuICAgIGlmIChiaW5kT2JqZWN0KSB7XG4gICAgICBpZiAoIWlzT2JqZWN0KGJpbmRPYmplY3QpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ3Nsb3Qgdi1iaW5kIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3QnLFxuICAgICAgICAgIHRoaXNcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIHByb3BzID0gZXh0ZW5kKGV4dGVuZCh7fSwgYmluZE9iamVjdCksIHByb3BzKTtcbiAgICB9XG4gICAgbm9kZXMgPSBzY29wZWRTbG90Rm4ocHJvcHMpIHx8IGZhbGxiYWNrO1xuICB9IGVsc2Uge1xuICAgIG5vZGVzID0gdGhpcy4kc2xvdHNbbmFtZV0gfHwgZmFsbGJhY2s7XG4gIH1cblxuICBjb25zdCB0YXJnZXQgPSBwcm9wcyAmJiBwcm9wcy5zbG90O1xuICBpZiAodGFyZ2V0KSB7XG4gICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJywgeyBzbG90OiB0YXJnZXQgfSwgbm9kZXMpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIG5vZGVzXG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlc29sdmluZyBmaWx0ZXJzXG4gKi9cbmZ1bmN0aW9uIHJlc29sdmVGaWx0ZXIgKGlkKSB7XG4gIHJldHVybiByZXNvbHZlQXNzZXQodGhpcy4kb3B0aW9ucywgJ2ZpbHRlcnMnLCBpZCwgdHJ1ZSkgfHwgaWRlbnRpdHlcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGlzS2V5Tm90TWF0Y2ggKGV4cGVjdCwgYWN0dWFsKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGV4cGVjdCkpIHtcbiAgICByZXR1cm4gZXhwZWN0LmluZGV4T2YoYWN0dWFsKSA9PT0gLTFcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZXhwZWN0ICE9PSBhY3R1YWxcbiAgfVxufVxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciBjaGVja2luZyBrZXlDb2RlcyBmcm9tIGNvbmZpZy5cbiAqIGV4cG9zZWQgYXMgVnVlLnByb3RvdHlwZS5fa1xuICogcGFzc2luZyBpbiBldmVudEtleU5hbWUgYXMgbGFzdCBhcmd1bWVudCBzZXBhcmF0ZWx5IGZvciBiYWNrd2FyZHMgY29tcGF0XG4gKi9cbmZ1bmN0aW9uIGNoZWNrS2V5Q29kZXMgKFxuICBldmVudEtleUNvZGUsXG4gIGtleSxcbiAgYnVpbHRJbktleUNvZGUsXG4gIGV2ZW50S2V5TmFtZSxcbiAgYnVpbHRJbktleU5hbWVcbikge1xuICBjb25zdCBtYXBwZWRLZXlDb2RlID0gY29uZmlnLmtleUNvZGVzW2tleV0gfHwgYnVpbHRJbktleUNvZGU7XG4gIGlmIChidWlsdEluS2V5TmFtZSAmJiBldmVudEtleU5hbWUgJiYgIWNvbmZpZy5rZXlDb2Rlc1trZXldKSB7XG4gICAgcmV0dXJuIGlzS2V5Tm90TWF0Y2goYnVpbHRJbktleU5hbWUsIGV2ZW50S2V5TmFtZSlcbiAgfSBlbHNlIGlmIChtYXBwZWRLZXlDb2RlKSB7XG4gICAgcmV0dXJuIGlzS2V5Tm90TWF0Y2gobWFwcGVkS2V5Q29kZSwgZXZlbnRLZXlDb2RlKVxuICB9IGVsc2UgaWYgKGV2ZW50S2V5TmFtZSkge1xuICAgIHJldHVybiBoeXBoZW5hdGUoZXZlbnRLZXlOYW1lKSAhPT0ga2V5XG4gIH1cbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIG1lcmdpbmcgdi1iaW5kPVwib2JqZWN0XCIgaW50byBhIFZOb2RlJ3MgZGF0YS5cbiAqL1xuZnVuY3Rpb24gYmluZE9iamVjdFByb3BzIChcbiAgZGF0YSxcbiAgdGFnLFxuICB2YWx1ZSxcbiAgYXNQcm9wLFxuICBpc1N5bmNcbikge1xuICBpZiAodmFsdWUpIHtcbiAgICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgd2FybihcbiAgICAgICAgJ3YtYmluZCB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IG9yIEFycmF5IHZhbHVlJyxcbiAgICAgICAgdGhpc1xuICAgICAgKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIHZhbHVlID0gdG9PYmplY3QodmFsdWUpO1xuICAgICAgfVxuICAgICAgbGV0IGhhc2g7XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiB2YWx1ZSkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAga2V5ID09PSAnY2xhc3MnIHx8XG4gICAgICAgICAga2V5ID09PSAnc3R5bGUnIHx8XG4gICAgICAgICAgaXNSZXNlcnZlZEF0dHJpYnV0ZShrZXkpXG4gICAgICAgICkge1xuICAgICAgICAgIGhhc2ggPSBkYXRhO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnN0IHR5cGUgPSBkYXRhLmF0dHJzICYmIGRhdGEuYXR0cnMudHlwZTtcbiAgICAgICAgICBoYXNoID0gYXNQcm9wIHx8IGNvbmZpZy5tdXN0VXNlUHJvcCh0YWcsIHR5cGUsIGtleSlcbiAgICAgICAgICAgID8gZGF0YS5kb21Qcm9wcyB8fCAoZGF0YS5kb21Qcm9wcyA9IHt9KVxuICAgICAgICAgICAgOiBkYXRhLmF0dHJzIHx8IChkYXRhLmF0dHJzID0ge30pO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IGNhbWVsaXplZEtleSA9IGNhbWVsaXplKGtleSk7XG4gICAgICAgIGlmICghKGtleSBpbiBoYXNoKSAmJiAhKGNhbWVsaXplZEtleSBpbiBoYXNoKSkge1xuICAgICAgICAgIGhhc2hba2V5XSA9IHZhbHVlW2tleV07XG5cbiAgICAgICAgICBpZiAoaXNTeW5jKSB7XG4gICAgICAgICAgICBjb25zdCBvbiA9IGRhdGEub24gfHwgKGRhdGEub24gPSB7fSk7XG4gICAgICAgICAgICBvbltgdXBkYXRlOiR7Y2FtZWxpemVkS2V5fWBdID0gZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgICB2YWx1ZVtrZXldID0gJGV2ZW50O1xuICAgICAgICAgICAgfTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyogICovXG5cbi8qKlxuICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyBzdGF0aWMgdHJlZXMuXG4gKi9cbmZ1bmN0aW9uIHJlbmRlclN0YXRpYyAoXG4gIGluZGV4LFxuICBpc0luRm9yXG4pIHtcbiAgY29uc3QgY2FjaGVkID0gdGhpcy5fc3RhdGljVHJlZXMgfHwgKHRoaXMuX3N0YXRpY1RyZWVzID0gW10pO1xuICBsZXQgdHJlZSA9IGNhY2hlZFtpbmRleF07XG4gIC8vIGlmIGhhcyBhbHJlYWR5LXJlbmRlcmVkIHN0YXRpYyB0cmVlIGFuZCBub3QgaW5zaWRlIHYtZm9yLFxuICAvLyB3ZSBjYW4gcmV1c2UgdGhlIHNhbWUgdHJlZS5cbiAgaWYgKHRyZWUgJiYgIWlzSW5Gb3IpIHtcbiAgICByZXR1cm4gdHJlZVxuICB9XG4gIC8vIG90aGVyd2lzZSwgcmVuZGVyIGEgZnJlc2ggdHJlZS5cbiAgdHJlZSA9IGNhY2hlZFtpbmRleF0gPSB0aGlzLiRvcHRpb25zLnN0YXRpY1JlbmRlckZuc1tpbmRleF0uY2FsbChcbiAgICB0aGlzLl9yZW5kZXJQcm94eSxcbiAgICBudWxsLFxuICAgIHRoaXMgLy8gZm9yIHJlbmRlciBmbnMgZ2VuZXJhdGVkIGZvciBmdW5jdGlvbmFsIGNvbXBvbmVudCB0ZW1wbGF0ZXNcbiAgKTtcbiAgbWFya1N0YXRpYyh0cmVlLCBgX19zdGF0aWNfXyR7aW5kZXh9YCwgZmFsc2UpO1xuICByZXR1cm4gdHJlZVxufVxuXG4vKipcbiAqIFJ1bnRpbWUgaGVscGVyIGZvciB2LW9uY2UuXG4gKiBFZmZlY3RpdmVseSBpdCBtZWFucyBtYXJraW5nIHRoZSBub2RlIGFzIHN0YXRpYyB3aXRoIGEgdW5pcXVlIGtleS5cbiAqL1xuZnVuY3Rpb24gbWFya09uY2UgKFxuICB0cmVlLFxuICBpbmRleCxcbiAga2V5XG4pIHtcbiAgbWFya1N0YXRpYyh0cmVlLCBgX19vbmNlX18ke2luZGV4fSR7a2V5ID8gYF8ke2tleX1gIDogYGB9YCwgdHJ1ZSk7XG4gIHJldHVybiB0cmVlXG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWMgKFxuICB0cmVlLFxuICBrZXksXG4gIGlzT25jZVxuKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KHRyZWUpKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0cmVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAodHJlZVtpXSAmJiB0eXBlb2YgdHJlZVtpXSAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgbWFya1N0YXRpY05vZGUodHJlZVtpXSwgYCR7a2V5fV8ke2l9YCwgaXNPbmNlKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgbWFya1N0YXRpY05vZGUodHJlZSwga2V5LCBpc09uY2UpO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hcmtTdGF0aWNOb2RlIChub2RlLCBrZXksIGlzT25jZSkge1xuICBub2RlLmlzU3RhdGljID0gdHJ1ZTtcbiAgbm9kZS5rZXkgPSBrZXk7XG4gIG5vZGUuaXNPbmNlID0gaXNPbmNlO1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gYmluZE9iamVjdExpc3RlbmVycyAoZGF0YSwgdmFsdWUpIHtcbiAgaWYgKHZhbHVlKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KHZhbHVlKSkge1xuICAgICAgd2FybihcbiAgICAgICAgJ3Ytb24gd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCB2YWx1ZScsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG9uID0gZGF0YS5vbiA9IGRhdGEub24gPyBleHRlbmQoe30sIGRhdGEub24pIDoge307XG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiB2YWx1ZSkge1xuICAgICAgICBjb25zdCBleGlzdGluZyA9IG9uW2tleV07XG4gICAgICAgIGNvbnN0IG91cnMgPSB2YWx1ZVtrZXldO1xuICAgICAgICBvbltrZXldID0gZXhpc3RpbmcgPyBbXS5jb25jYXQoZXhpc3RpbmcsIG91cnMpIDogb3VycztcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJlc29sdmVTY29wZWRTbG90cyAoXG4gIGZucywgLy8gc2VlIGZsb3cvdm5vZGVcbiAgaGFzRHluYW1pY0tleXMsXG4gIHJlc1xuKSB7XG4gIHJlcyA9IHJlcyB8fCB7ICRzdGFibGU6ICFoYXNEeW5hbWljS2V5cyB9O1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGZucy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHNsb3QgPSBmbnNbaV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoc2xvdCkpIHtcbiAgICAgIHJlc29sdmVTY29wZWRTbG90cyhzbG90LCBoYXNEeW5hbWljS2V5cywgcmVzKTtcbiAgICB9IGVsc2UgaWYgKHNsb3QpIHtcbiAgICAgIC8vIG1hcmtlciBmb3IgcmV2ZXJzZSBwcm94eWluZyB2LXNsb3Qgd2l0aG91dCBzY29wZSBvbiB0aGlzLiRzbG90c1xuICAgICAgaWYgKHNsb3QucHJveHkpIHtcbiAgICAgICAgc2xvdC5mbi5wcm94eSA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXNbc2xvdC5rZXldID0gc2xvdC5mbjtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gYmluZER5bmFtaWNLZXlzIChiYXNlT2JqLCB2YWx1ZXMpIHtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCB2YWx1ZXMubGVuZ3RoOyBpICs9IDIpIHtcbiAgICBjb25zdCBrZXkgPSB2YWx1ZXNbaV07XG4gICAgaWYgKHR5cGVvZiBrZXkgPT09ICdzdHJpbmcnICYmIGtleSkge1xuICAgICAgYmFzZU9ialt2YWx1ZXNbaV1dID0gdmFsdWVzW2kgKyAxXTtcbiAgICB9IGVsc2UgaWYgKGtleSAhPT0gJycgJiYga2V5ICE9PSBudWxsKSB7XG4gICAgICAvLyBudWxsIGlzIGEgc3BlaWNhbCB2YWx1ZSBmb3IgZXhwbGljaXRseSByZW1vdmluZyBhIGJpbmRpbmdcbiAgICAgIHdhcm4oXG4gICAgICAgIGBJbnZhbGlkIHZhbHVlIGZvciBkeW5hbWljIGRpcmVjdGl2ZSBhcmd1bWVudCAoZXhwZWN0ZWQgc3RyaW5nIG9yIG51bGwpOiAke2tleX1gLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gYmFzZU9ialxufVxuXG4vLyBoZWxwZXIgdG8gZHluYW1pY2FsbHkgYXBwZW5kIG1vZGlmaWVyIHJ1bnRpbWUgbWFya2VycyB0byBldmVudCBuYW1lcy5cbi8vIGVuc3VyZSBvbmx5IGFwcGVuZCB3aGVuIHZhbHVlIGlzIGFscmVhZHkgc3RyaW5nLCBvdGhlcndpc2UgaXQgd2lsbCBiZSBjYXN0XG4vLyB0byBzdHJpbmcgYW5kIGNhdXNlIHRoZSB0eXBlIGNoZWNrIHRvIG1pc3MuXG5mdW5jdGlvbiBwcmVwZW5kTW9kaWZpZXIgKHZhbHVlLCBzeW1ib2wpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgPyBzeW1ib2wgKyB2YWx1ZSA6IHZhbHVlXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbnN0YWxsUmVuZGVySGVscGVycyAodGFyZ2V0KSB7XG4gIHRhcmdldC5fbyA9IG1hcmtPbmNlO1xuICB0YXJnZXQuX24gPSB0b051bWJlcjtcbiAgdGFyZ2V0Ll9zID0gdG9TdHJpbmc7XG4gIHRhcmdldC5fbCA9IHJlbmRlckxpc3Q7XG4gIHRhcmdldC5fdCA9IHJlbmRlclNsb3Q7XG4gIHRhcmdldC5fcSA9IGxvb3NlRXF1YWw7XG4gIHRhcmdldC5faSA9IGxvb3NlSW5kZXhPZjtcbiAgdGFyZ2V0Ll9tID0gcmVuZGVyU3RhdGljO1xuICB0YXJnZXQuX2YgPSByZXNvbHZlRmlsdGVyO1xuICB0YXJnZXQuX2sgPSBjaGVja0tleUNvZGVzO1xuICB0YXJnZXQuX2IgPSBiaW5kT2JqZWN0UHJvcHM7XG4gIHRhcmdldC5fdiA9IGNyZWF0ZVRleHRWTm9kZTtcbiAgdGFyZ2V0Ll9lID0gY3JlYXRlRW1wdHlWTm9kZTtcbiAgdGFyZ2V0Ll91ID0gcmVzb2x2ZVNjb3BlZFNsb3RzO1xuICB0YXJnZXQuX2cgPSBiaW5kT2JqZWN0TGlzdGVuZXJzO1xuICB0YXJnZXQuX2QgPSBiaW5kRHluYW1pY0tleXM7XG4gIHRhcmdldC5fcCA9IHByZXBlbmRNb2RpZmllcjtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IChcbiAgZGF0YSxcbiAgcHJvcHMsXG4gIGNoaWxkcmVuLFxuICBwYXJlbnQsXG4gIEN0b3Jcbikge1xuICBjb25zdCBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICAvLyBlbnN1cmUgdGhlIGNyZWF0ZUVsZW1lbnQgZnVuY3Rpb24gaW4gZnVuY3Rpb25hbCBjb21wb25lbnRzXG4gIC8vIGdldHMgYSB1bmlxdWUgY29udGV4dCAtIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBjb3JyZWN0IG5hbWVkIHNsb3QgY2hlY2tcbiAgbGV0IGNvbnRleHRWbTtcbiAgaWYgKGhhc093bihwYXJlbnQsICdfdWlkJykpIHtcbiAgICBjb250ZXh0Vm0gPSBPYmplY3QuY3JlYXRlKHBhcmVudCk7XG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgY29udGV4dFZtLl9vcmlnaW5hbCA9IHBhcmVudDtcbiAgfSBlbHNlIHtcbiAgICAvLyB0aGUgY29udGV4dCB2bSBwYXNzZWQgaW4gaXMgYSBmdW5jdGlvbmFsIGNvbnRleHQgYXMgd2VsbC5cbiAgICAvLyBpbiB0aGlzIGNhc2Ugd2Ugd2FudCB0byBtYWtlIHN1cmUgd2UgYXJlIGFibGUgdG8gZ2V0IGEgaG9sZCB0byB0aGVcbiAgICAvLyByZWFsIGNvbnRleHQgaW5zdGFuY2UuXG4gICAgY29udGV4dFZtID0gcGFyZW50O1xuICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgIHBhcmVudCA9IHBhcmVudC5fb3JpZ2luYWw7XG4gIH1cbiAgY29uc3QgaXNDb21waWxlZCA9IGlzVHJ1ZShvcHRpb25zLl9jb21waWxlZCk7XG4gIGNvbnN0IG5lZWROb3JtYWxpemF0aW9uID0gIWlzQ29tcGlsZWQ7XG5cbiAgdGhpcy5kYXRhID0gZGF0YTtcbiAgdGhpcy5wcm9wcyA9IHByb3BzO1xuICB0aGlzLmNoaWxkcmVuID0gY2hpbGRyZW47XG4gIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICB0aGlzLmxpc3RlbmVycyA9IGRhdGEub24gfHwgZW1wdHlPYmplY3Q7XG4gIHRoaXMuaW5qZWN0aW9ucyA9IHJlc29sdmVJbmplY3Qob3B0aW9ucy5pbmplY3QsIHBhcmVudCk7XG4gIHRoaXMuc2xvdHMgPSAoKSA9PiB7XG4gICAgaWYgKCF0aGlzLiRzbG90cykge1xuICAgICAgbm9ybWFsaXplU2NvcGVkU2xvdHMoXG4gICAgICAgIGRhdGEuc2NvcGVkU2xvdHMsXG4gICAgICAgIHRoaXMuJHNsb3RzID0gcmVzb2x2ZVNsb3RzKGNoaWxkcmVuLCBwYXJlbnQpXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy4kc2xvdHNcbiAgfTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3Njb3BlZFNsb3RzJywgKHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldCAoKSB7XG4gICAgICByZXR1cm4gbm9ybWFsaXplU2NvcGVkU2xvdHMoZGF0YS5zY29wZWRTbG90cywgdGhpcy5zbG90cygpKVxuICAgIH1cbiAgfSkpO1xuXG4gIC8vIHN1cHBvcnQgZm9yIGNvbXBpbGVkIGZ1bmN0aW9uYWwgdGVtcGxhdGVcbiAgaWYgKGlzQ29tcGlsZWQpIHtcbiAgICAvLyBleHBvc2luZyAkb3B0aW9ucyBmb3IgcmVuZGVyU3RhdGljKClcbiAgICB0aGlzLiRvcHRpb25zID0gb3B0aW9ucztcbiAgICAvLyBwcmUtcmVzb2x2ZSBzbG90cyBmb3IgcmVuZGVyU2xvdCgpXG4gICAgdGhpcy4kc2xvdHMgPSB0aGlzLnNsb3RzKCk7XG4gICAgdGhpcy4kc2NvcGVkU2xvdHMgPSBub3JtYWxpemVTY29wZWRTbG90cyhkYXRhLnNjb3BlZFNsb3RzLCB0aGlzLiRzbG90cyk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5fc2NvcGVJZCkge1xuICAgIHRoaXMuX2MgPSAoYSwgYiwgYywgZCkgPT4ge1xuICAgICAgY29uc3Qgdm5vZGUgPSBjcmVhdGVFbGVtZW50KGNvbnRleHRWbSwgYSwgYiwgYywgZCwgbmVlZE5vcm1hbGl6YXRpb24pO1xuICAgICAgaWYgKHZub2RlICYmICFBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgICAgICB2bm9kZS5mblNjb3BlSWQgPSBvcHRpb25zLl9zY29wZUlkO1xuICAgICAgICB2bm9kZS5mbkNvbnRleHQgPSBwYXJlbnQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm5vZGVcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIHRoaXMuX2MgPSAoYSwgYiwgYywgZCkgPT4gY3JlYXRlRWxlbWVudChjb250ZXh0Vm0sIGEsIGIsIGMsIGQsIG5lZWROb3JtYWxpemF0aW9uKTtcbiAgfVxufVxuXG5pbnN0YWxsUmVuZGVySGVscGVycyhGdW5jdGlvbmFsUmVuZGVyQ29udGV4dC5wcm90b3R5cGUpO1xuXG5mdW5jdGlvbiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50IChcbiAgQ3RvcixcbiAgcHJvcHNEYXRhLFxuICBkYXRhLFxuICBjb250ZXh0Vm0sXG4gIGNoaWxkcmVuXG4pIHtcbiAgY29uc3Qgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgY29uc3QgcHJvcHMgPSB7fTtcbiAgY29uc3QgcHJvcE9wdGlvbnMgPSBvcHRpb25zLnByb3BzO1xuICBpZiAoaXNEZWYocHJvcE9wdGlvbnMpKSB7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gcHJvcE9wdGlvbnMpIHtcbiAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhIHx8IGVtcHR5T2JqZWN0KTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKGlzRGVmKGRhdGEuYXR0cnMpKSBtZXJnZVByb3BzKHByb3BzLCBkYXRhLmF0dHJzKTtcbiAgICBpZiAoaXNEZWYoZGF0YS5wcm9wcykpIG1lcmdlUHJvcHMocHJvcHMsIGRhdGEucHJvcHMpO1xuICB9XG5cbiAgY29uc3QgcmVuZGVyQ29udGV4dCA9IG5ldyBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dChcbiAgICBkYXRhLFxuICAgIHByb3BzLFxuICAgIGNoaWxkcmVuLFxuICAgIGNvbnRleHRWbSxcbiAgICBDdG9yXG4gICk7XG5cbiAgY29uc3Qgdm5vZGUgPSBvcHRpb25zLnJlbmRlci5jYWxsKG51bGwsIHJlbmRlckNvbnRleHQuX2MsIHJlbmRlckNvbnRleHQpO1xuXG4gIGlmICh2bm9kZSBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgcmV0dXJuIGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQodm5vZGUsIGRhdGEsIHJlbmRlckNvbnRleHQucGFyZW50LCBvcHRpb25zLCByZW5kZXJDb250ZXh0KVxuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgY29uc3Qgdm5vZGVzID0gbm9ybWFsaXplQ2hpbGRyZW4odm5vZGUpIHx8IFtdO1xuICAgIGNvbnN0IHJlcyA9IG5ldyBBcnJheSh2bm9kZXMubGVuZ3RoKTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgcmVzW2ldID0gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCh2bm9kZXNbaV0sIGRhdGEsIHJlbmRlckNvbnRleHQucGFyZW50LCBvcHRpb25zLCByZW5kZXJDb250ZXh0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG59XG5cbmZ1bmN0aW9uIGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQgKHZub2RlLCBkYXRhLCBjb250ZXh0Vm0sIG9wdGlvbnMsIHJlbmRlckNvbnRleHQpIHtcbiAgLy8gIzc4MTcgY2xvbmUgbm9kZSBiZWZvcmUgc2V0dGluZyBmbkNvbnRleHQsIG90aGVyd2lzZSBpZiB0aGUgbm9kZSBpcyByZXVzZWRcbiAgLy8gKGUuZy4gaXQgd2FzIGZyb20gYSBjYWNoZWQgbm9ybWFsIHNsb3QpIHRoZSBmbkNvbnRleHQgY2F1c2VzIG5hbWVkIHNsb3RzXG4gIC8vIHRoYXQgc2hvdWxkIG5vdCBiZSBtYXRjaGVkIHRvIG1hdGNoLlxuICBjb25zdCBjbG9uZSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICBjbG9uZS5mbkNvbnRleHQgPSBjb250ZXh0Vm07XG4gIGNsb25lLmZuT3B0aW9ucyA9IG9wdGlvbnM7XG4gIHtcbiAgICAoY2xvbmUuZGV2dG9vbHNNZXRhID0gY2xvbmUuZGV2dG9vbHNNZXRhIHx8IHt9KS5yZW5kZXJDb250ZXh0ID0gcmVuZGVyQ29udGV4dDtcbiAgfVxuICBpZiAoZGF0YS5zbG90KSB7XG4gICAgKGNsb25lLmRhdGEgfHwgKGNsb25lLmRhdGEgPSB7fSkpLnNsb3QgPSBkYXRhLnNsb3Q7XG4gIH1cbiAgcmV0dXJuIGNsb25lXG59XG5cbmZ1bmN0aW9uIG1lcmdlUHJvcHMgKHRvLCBmcm9tKSB7XG4gIGZvciAoY29uc3Qga2V5IGluIGZyb20pIHtcbiAgICB0b1tjYW1lbGl6ZShrZXkpXSA9IGZyb21ba2V5XTtcbiAgfVxufVxuXG4vKiAgKi9cblxuLyogICovXG5cbi8qICAqL1xuXG4vKiAgKi9cblxuLy8gaW5saW5lIGhvb2tzIHRvIGJlIGludm9rZWQgb24gY29tcG9uZW50IFZOb2RlcyBkdXJpbmcgcGF0Y2hcbmNvbnN0IGNvbXBvbmVudFZOb2RlSG9va3MgPSB7XG4gIGluaXQgKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICBpZiAoXG4gICAgICB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSAmJlxuICAgICAgIXZub2RlLmNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCAmJlxuICAgICAgdm5vZGUuZGF0YS5rZWVwQWxpdmVcbiAgICApIHtcbiAgICAgIC8vIGtlcHQtYWxpdmUgY29tcG9uZW50cywgdHJlYXQgYXMgYSBwYXRjaFxuICAgICAgY29uc3QgbW91bnRlZE5vZGUgPSB2bm9kZTsgLy8gd29yayBhcm91bmQgZmxvd1xuICAgICAgY29tcG9uZW50Vk5vZGVIb29rcy5wcmVwYXRjaChtb3VudGVkTm9kZSwgbW91bnRlZE5vZGUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBjaGlsZCA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gY3JlYXRlQ29tcG9uZW50SW5zdGFuY2VGb3JWbm9kZShcbiAgICAgICAgdm5vZGUsXG4gICAgICAgIGFjdGl2ZUluc3RhbmNlXG4gICAgICApO1xuICAgICAgY2hpbGQuJG1vdW50KGh5ZHJhdGluZyA/IHZub2RlLmVsbSA6IHVuZGVmaW5lZCwgaHlkcmF0aW5nKTtcbiAgICB9XG4gIH0sXG5cbiAgcHJlcGF0Y2ggKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICAgIGNvbnN0IGNoaWxkID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBvbGRWbm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICB1cGRhdGVDaGlsZENvbXBvbmVudChcbiAgICAgIGNoaWxkLFxuICAgICAgb3B0aW9ucy5wcm9wc0RhdGEsIC8vIHVwZGF0ZWQgcHJvcHNcbiAgICAgIG9wdGlvbnMubGlzdGVuZXJzLCAvLyB1cGRhdGVkIGxpc3RlbmVyc1xuICAgICAgdm5vZGUsIC8vIG5ldyBwYXJlbnQgdm5vZGVcbiAgICAgIG9wdGlvbnMuY2hpbGRyZW4gLy8gbmV3IGNoaWxkcmVuXG4gICAgKTtcbiAgfSxcblxuICBpbnNlcnQgKHZub2RlKSB7XG4gICAgY29uc3QgeyBjb250ZXh0LCBjb21wb25lbnRJbnN0YW5jZSB9ID0gdm5vZGU7XG4gICAgaWYgKCFjb21wb25lbnRJbnN0YW5jZS5faXNNb3VudGVkKSB7XG4gICAgICBjb21wb25lbnRJbnN0YW5jZS5faXNNb3VudGVkID0gdHJ1ZTtcbiAgICAgIGNhbGxIb29rKGNvbXBvbmVudEluc3RhbmNlLCAnbW91bnRlZCcpO1xuICAgIH1cbiAgICBpZiAodm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgIGlmIChjb250ZXh0Ll9pc01vdW50ZWQpIHtcbiAgICAgICAgLy8gdnVlLXJvdXRlciMxMjEyXG4gICAgICAgIC8vIER1cmluZyB1cGRhdGVzLCBhIGtlcHQtYWxpdmUgY29tcG9uZW50J3MgY2hpbGQgY29tcG9uZW50cyBtYXlcbiAgICAgICAgLy8gY2hhbmdlLCBzbyBkaXJlY3RseSB3YWxraW5nIHRoZSB0cmVlIGhlcmUgbWF5IGNhbGwgYWN0aXZhdGVkIGhvb2tzXG4gICAgICAgIC8vIG9uIGluY29ycmVjdCBjaGlsZHJlbi4gSW5zdGVhZCB3ZSBwdXNoIHRoZW0gaW50byBhIHF1ZXVlIHdoaWNoIHdpbGxcbiAgICAgICAgLy8gYmUgcHJvY2Vzc2VkIGFmdGVyIHRoZSB3aG9sZSBwYXRjaCBwcm9jZXNzIGVuZGVkLlxuICAgICAgICBxdWV1ZUFjdGl2YXRlZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7XG4gICAgICB9XG4gICAgfVxuICB9LFxuXG4gIGRlc3Ryb3kgKHZub2RlKSB7XG4gICAgY29uc3QgeyBjb21wb25lbnRJbnN0YW5jZSB9ID0gdm5vZGU7XG4gICAgaWYgKCFjb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQpIHtcbiAgICAgIGlmICghdm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgICAgY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudChjb21wb25lbnRJbnN0YW5jZSwgdHJ1ZSAvKiBkaXJlY3QgKi8pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuY29uc3QgaG9va3NUb01lcmdlID0gT2JqZWN0LmtleXMoY29tcG9uZW50Vk5vZGVIb29rcyk7XG5cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAoXG4gIEN0b3IsXG4gIGRhdGEsXG4gIGNvbnRleHQsXG4gIGNoaWxkcmVuLFxuICB0YWdcbikge1xuICBpZiAoaXNVbmRlZihDdG9yKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgY29uc3QgYmFzZUN0b3IgPSBjb250ZXh0LiRvcHRpb25zLl9iYXNlO1xuXG4gIC8vIHBsYWluIG9wdGlvbnMgb2JqZWN0OiB0dXJuIGl0IGludG8gYSBjb25zdHJ1Y3RvclxuICBpZiAoaXNPYmplY3QoQ3RvcikpIHtcbiAgICBDdG9yID0gYmFzZUN0b3IuZXh0ZW5kKEN0b3IpO1xuICB9XG5cbiAgLy8gaWYgYXQgdGhpcyBzdGFnZSBpdCdzIG5vdCBhIGNvbnN0cnVjdG9yIG9yIGFuIGFzeW5jIGNvbXBvbmVudCBmYWN0b3J5LFxuICAvLyByZWplY3QuXG4gIGlmICh0eXBlb2YgQ3RvciAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIHtcbiAgICAgIHdhcm4oYEludmFsaWQgQ29tcG9uZW50IGRlZmluaXRpb246ICR7U3RyaW5nKEN0b3IpfWAsIGNvbnRleHQpO1xuICAgIH1cbiAgICByZXR1cm5cbiAgfVxuXG4gIC8vIGFzeW5jIGNvbXBvbmVudFxuICBsZXQgYXN5bmNGYWN0b3J5O1xuICBpZiAoaXNVbmRlZihDdG9yLmNpZCkpIHtcbiAgICBhc3luY0ZhY3RvcnkgPSBDdG9yO1xuICAgIEN0b3IgPSByZXNvbHZlQXN5bmNDb21wb25lbnQoYXN5bmNGYWN0b3J5LCBiYXNlQ3Rvcik7XG4gICAgaWYgKEN0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gcmV0dXJuIGEgcGxhY2Vob2xkZXIgbm9kZSBmb3IgYXN5bmMgY29tcG9uZW50LCB3aGljaCBpcyByZW5kZXJlZFxuICAgICAgLy8gYXMgYSBjb21tZW50IG5vZGUgYnV0IHByZXNlcnZlcyBhbGwgdGhlIHJhdyBpbmZvcm1hdGlvbiBmb3IgdGhlIG5vZGUuXG4gICAgICAvLyB0aGUgaW5mb3JtYXRpb24gd2lsbCBiZSB1c2VkIGZvciBhc3luYyBzZXJ2ZXItcmVuZGVyaW5nIGFuZCBoeWRyYXRpb24uXG4gICAgICByZXR1cm4gY3JlYXRlQXN5bmNQbGFjZWhvbGRlcihcbiAgICAgICAgYXN5bmNGYWN0b3J5LFxuICAgICAgICBkYXRhLFxuICAgICAgICBjb250ZXh0LFxuICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgdGFnXG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgZGF0YSA9IGRhdGEgfHwge307XG5cbiAgLy8gcmVzb2x2ZSBjb25zdHJ1Y3RvciBvcHRpb25zIGluIGNhc2UgZ2xvYmFsIG1peGlucyBhcmUgYXBwbGllZCBhZnRlclxuICAvLyBjb21wb25lbnQgY29uc3RydWN0b3IgY3JlYXRpb25cbiAgcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyhDdG9yKTtcblxuICAvLyB0cmFuc2Zvcm0gY29tcG9uZW50IHYtbW9kZWwgZGF0YSBpbnRvIHByb3BzICYgZXZlbnRzXG4gIGlmIChpc0RlZihkYXRhLm1vZGVsKSkge1xuICAgIHRyYW5zZm9ybU1vZGVsKEN0b3Iub3B0aW9ucywgZGF0YSk7XG4gIH1cblxuICAvLyBleHRyYWN0IHByb3BzXG4gIGNvbnN0IHByb3BzRGF0YSA9IGV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEoZGF0YSwgQ3RvciwgdGFnKTtcblxuICAvLyBmdW5jdGlvbmFsIGNvbXBvbmVudFxuICBpZiAoaXNUcnVlKEN0b3Iub3B0aW9ucy5mdW5jdGlvbmFsKSkge1xuICAgIHJldHVybiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50KEN0b3IsIHByb3BzRGF0YSwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4pXG4gIH1cblxuICAvLyBleHRyYWN0IGxpc3RlbmVycywgc2luY2UgdGhlc2UgbmVlZHMgdG8gYmUgdHJlYXRlZCBhc1xuICAvLyBjaGlsZCBjb21wb25lbnQgbGlzdGVuZXJzIGluc3RlYWQgb2YgRE9NIGxpc3RlbmVyc1xuICBjb25zdCBsaXN0ZW5lcnMgPSBkYXRhLm9uO1xuICAvLyByZXBsYWNlIHdpdGggbGlzdGVuZXJzIHdpdGggLm5hdGl2ZSBtb2RpZmllclxuICAvLyBzbyBpdCBnZXRzIHByb2Nlc3NlZCBkdXJpbmcgcGFyZW50IGNvbXBvbmVudCBwYXRjaC5cbiAgZGF0YS5vbiA9IGRhdGEubmF0aXZlT247XG5cbiAgaWYgKGlzVHJ1ZShDdG9yLm9wdGlvbnMuYWJzdHJhY3QpKSB7XG4gICAgLy8gYWJzdHJhY3QgY29tcG9uZW50cyBkbyBub3Qga2VlcCBhbnl0aGluZ1xuICAgIC8vIG90aGVyIHRoYW4gcHJvcHMgJiBsaXN0ZW5lcnMgJiBzbG90XG5cbiAgICAvLyB3b3JrIGFyb3VuZCBmbG93XG4gICAgY29uc3Qgc2xvdCA9IGRhdGEuc2xvdDtcbiAgICBkYXRhID0ge307XG4gICAgaWYgKHNsb3QpIHtcbiAgICAgIGRhdGEuc2xvdCA9IHNsb3Q7XG4gICAgfVxuICB9XG5cbiAgLy8gaW5zdGFsbCBjb21wb25lbnQgbWFuYWdlbWVudCBob29rcyBvbnRvIHRoZSBwbGFjZWhvbGRlciBub2RlXG4gIGluc3RhbGxDb21wb25lbnRIb29rcyhkYXRhKTtcblxuICAvLyByZXR1cm4gYSBwbGFjZWhvbGRlciB2bm9kZVxuICBjb25zdCBuYW1lID0gQ3Rvci5vcHRpb25zLm5hbWUgfHwgdGFnO1xuICBjb25zdCB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICBgdnVlLWNvbXBvbmVudC0ke0N0b3IuY2lkfSR7bmFtZSA/IGAtJHtuYW1lfWAgOiAnJ31gLFxuICAgIGRhdGEsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGNvbnRleHQsXG4gICAgeyBDdG9yLCBwcm9wc0RhdGEsIGxpc3RlbmVycywgdGFnLCBjaGlsZHJlbiB9LFxuICAgIGFzeW5jRmFjdG9yeVxuICApO1xuXG4gIHJldHVybiB2bm9kZVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21wb25lbnRJbnN0YW5jZUZvclZub2RlIChcbiAgdm5vZGUsIC8vIHdlIGtub3cgaXQncyBNb3VudGVkQ29tcG9uZW50Vk5vZGUgYnV0IGZsb3cgZG9lc24ndFxuICBwYXJlbnQsIC8vIGFjdGl2ZUluc3RhbmNlIGluIGxpZmVjeWNsZSBzdGF0ZVxuKSB7XG4gIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgX2lzQ29tcG9uZW50OiB0cnVlLFxuICAgIF9wYXJlbnRWbm9kZTogdm5vZGUsXG4gICAgcGFyZW50XG4gIH07XG4gIC8vIGNoZWNrIGlubGluZS10ZW1wbGF0ZSByZW5kZXIgZnVuY3Rpb25zXG4gIGNvbnN0IGlubGluZVRlbXBsYXRlID0gdm5vZGUuZGF0YS5pbmxpbmVUZW1wbGF0ZTtcbiAgaWYgKGlzRGVmKGlubGluZVRlbXBsYXRlKSkge1xuICAgIG9wdGlvbnMucmVuZGVyID0gaW5saW5lVGVtcGxhdGUucmVuZGVyO1xuICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gaW5saW5lVGVtcGxhdGUuc3RhdGljUmVuZGVyRm5zO1xuICB9XG4gIHJldHVybiBuZXcgdm5vZGUuY29tcG9uZW50T3B0aW9ucy5DdG9yKG9wdGlvbnMpXG59XG5cbmZ1bmN0aW9uIGluc3RhbGxDb21wb25lbnRIb29rcyAoZGF0YSkge1xuICBjb25zdCBob29rcyA9IGRhdGEuaG9vayB8fCAoZGF0YS5ob29rID0ge30pO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGhvb2tzVG9NZXJnZS5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGtleSA9IGhvb2tzVG9NZXJnZVtpXTtcbiAgICBjb25zdCBleGlzdGluZyA9IGhvb2tzW2tleV07XG4gICAgY29uc3QgdG9NZXJnZSA9IGNvbXBvbmVudFZOb2RlSG9va3Nba2V5XTtcbiAgICBpZiAoZXhpc3RpbmcgIT09IHRvTWVyZ2UgJiYgIShleGlzdGluZyAmJiBleGlzdGluZy5fbWVyZ2VkKSkge1xuICAgICAgaG9va3Nba2V5XSA9IGV4aXN0aW5nID8gbWVyZ2VIb29rJDEodG9NZXJnZSwgZXhpc3RpbmcpIDogdG9NZXJnZTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbWVyZ2VIb29rJDEgKGYxLCBmMikge1xuICBjb25zdCBtZXJnZWQgPSAoYSwgYikgPT4ge1xuICAgIC8vIGZsb3cgY29tcGxhaW5zIGFib3V0IGV4dHJhIGFyZ3Mgd2hpY2ggaXMgd2h5IHdlIHVzZSBhbnlcbiAgICBmMShhLCBiKTtcbiAgICBmMihhLCBiKTtcbiAgfTtcbiAgbWVyZ2VkLl9tZXJnZWQgPSB0cnVlO1xuICByZXR1cm4gbWVyZ2VkXG59XG5cbi8vIHRyYW5zZm9ybSBjb21wb25lbnQgdi1tb2RlbCBpbmZvICh2YWx1ZSBhbmQgY2FsbGJhY2spIGludG9cbi8vIHByb3AgYW5kIGV2ZW50IGhhbmRsZXIgcmVzcGVjdGl2ZWx5LlxuZnVuY3Rpb24gdHJhbnNmb3JtTW9kZWwgKG9wdGlvbnMsIGRhdGEpIHtcbiAgY29uc3QgcHJvcCA9IChvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwucHJvcCkgfHwgJ3ZhbHVlJztcbiAgY29uc3QgZXZlbnQgPSAob3B0aW9ucy5tb2RlbCAmJiBvcHRpb25zLm1vZGVsLmV2ZW50KSB8fCAnaW5wdXQnXG4gIDsoZGF0YS5hdHRycyB8fCAoZGF0YS5hdHRycyA9IHt9KSlbcHJvcF0gPSBkYXRhLm1vZGVsLnZhbHVlO1xuICBjb25zdCBvbiA9IGRhdGEub24gfHwgKGRhdGEub24gPSB7fSk7XG4gIGNvbnN0IGV4aXN0aW5nID0gb25bZXZlbnRdO1xuICBjb25zdCBjYWxsYmFjayA9IGRhdGEubW9kZWwuY2FsbGJhY2s7XG4gIGlmIChpc0RlZihleGlzdGluZykpIHtcbiAgICBpZiAoXG4gICAgICBBcnJheS5pc0FycmF5KGV4aXN0aW5nKVxuICAgICAgICA/IGV4aXN0aW5nLmluZGV4T2YoY2FsbGJhY2spID09PSAtMVxuICAgICAgICA6IGV4aXN0aW5nICE9PSBjYWxsYmFja1xuICAgICkge1xuICAgICAgb25bZXZlbnRdID0gW2NhbGxiYWNrXS5jb25jYXQoZXhpc3RpbmcpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBvbltldmVudF0gPSBjYWxsYmFjaztcbiAgfVxufVxuXG4vKiAgKi9cblxuY29uc3QgU0lNUExFX05PUk1BTElaRSA9IDE7XG5jb25zdCBBTFdBWVNfTk9STUFMSVpFID0gMjtcblxuLy8gd3JhcHBlciBmdW5jdGlvbiBmb3IgcHJvdmlkaW5nIGEgbW9yZSBmbGV4aWJsZSBpbnRlcmZhY2Vcbi8vIHdpdGhvdXQgZ2V0dGluZyB5ZWxsZWQgYXQgYnkgZmxvd1xuZnVuY3Rpb24gY3JlYXRlRWxlbWVudCAoXG4gIGNvbnRleHQsXG4gIHRhZyxcbiAgZGF0YSxcbiAgY2hpbGRyZW4sXG4gIG5vcm1hbGl6YXRpb25UeXBlLFxuICBhbHdheXNOb3JtYWxpemVcbikge1xuICBpZiAoQXJyYXkuaXNBcnJheShkYXRhKSB8fCBpc1ByaW1pdGl2ZShkYXRhKSkge1xuICAgIG5vcm1hbGl6YXRpb25UeXBlID0gY2hpbGRyZW47XG4gICAgY2hpbGRyZW4gPSBkYXRhO1xuICAgIGRhdGEgPSB1bmRlZmluZWQ7XG4gIH1cbiAgaWYgKGlzVHJ1ZShhbHdheXNOb3JtYWxpemUpKSB7XG4gICAgbm9ybWFsaXphdGlvblR5cGUgPSBBTFdBWVNfTk9STUFMSVpFO1xuICB9XG4gIHJldHVybiBfY3JlYXRlRWxlbWVudChjb250ZXh0LCB0YWcsIGRhdGEsIGNoaWxkcmVuLCBub3JtYWxpemF0aW9uVHlwZSlcbn1cblxuZnVuY3Rpb24gX2NyZWF0ZUVsZW1lbnQgKFxuICBjb250ZXh0LFxuICB0YWcsXG4gIGRhdGEsXG4gIGNoaWxkcmVuLFxuICBub3JtYWxpemF0aW9uVHlwZVxuKSB7XG4gIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZigoZGF0YSkuX19vYl9fKSkge1xuICAgIHdhcm4oXG4gICAgICBgQXZvaWQgdXNpbmcgb2JzZXJ2ZWQgZGF0YSBvYmplY3QgYXMgdm5vZGUgZGF0YTogJHtKU09OLnN0cmluZ2lmeShkYXRhKX1cXG5gICtcbiAgICAgICdBbHdheXMgY3JlYXRlIGZyZXNoIHZub2RlIGRhdGEgb2JqZWN0cyBpbiBlYWNoIHJlbmRlciEnLFxuICAgICAgY29udGV4dFxuICAgICk7XG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG4gIC8vIG9iamVjdCBzeW50YXggaW4gdi1iaW5kXG4gIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLmlzKSkge1xuICAgIHRhZyA9IGRhdGEuaXM7XG4gIH1cbiAgaWYgKCF0YWcpIHtcbiAgICAvLyBpbiBjYXNlIG9mIGNvbXBvbmVudCA6aXMgc2V0IHRvIGZhbHN5IHZhbHVlXG4gICAgcmV0dXJuIGNyZWF0ZUVtcHR5Vk5vZGUoKVxuICB9XG4gIC8vIHdhcm4gYWdhaW5zdCBub24tcHJpbWl0aXZlIGtleVxuICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5rZXkpICYmICFpc1ByaW1pdGl2ZShkYXRhLmtleSlcbiAgKSB7XG4gICAge1xuICAgICAgd2FybihcbiAgICAgICAgJ0F2b2lkIHVzaW5nIG5vbi1wcmltaXRpdmUgdmFsdWUgYXMga2V5LCAnICtcbiAgICAgICAgJ3VzZSBzdHJpbmcvbnVtYmVyIHZhbHVlIGluc3RlYWQuJyxcbiAgICAgICAgY29udGV4dFxuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgLy8gc3VwcG9ydCBzaW5nbGUgZnVuY3Rpb24gY2hpbGRyZW4gYXMgZGVmYXVsdCBzY29wZWQgc2xvdFxuICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiZcbiAgICB0eXBlb2YgY2hpbGRyZW5bMF0gPT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgZGF0YSA9IGRhdGEgfHwge307XG4gICAgZGF0YS5zY29wZWRTbG90cyA9IHsgZGVmYXVsdDogY2hpbGRyZW5bMF0gfTtcbiAgICBjaGlsZHJlbi5sZW5ndGggPSAwO1xuICB9XG4gIGlmIChub3JtYWxpemF0aW9uVHlwZSA9PT0gQUxXQVlTX05PUk1BTElaRSkge1xuICAgIGNoaWxkcmVuID0gbm9ybWFsaXplQ2hpbGRyZW4oY2hpbGRyZW4pO1xuICB9IGVsc2UgaWYgKG5vcm1hbGl6YXRpb25UeXBlID09PSBTSU1QTEVfTk9STUFMSVpFKSB7XG4gICAgY2hpbGRyZW4gPSBzaW1wbGVOb3JtYWxpemVDaGlsZHJlbihjaGlsZHJlbik7XG4gIH1cbiAgbGV0IHZub2RlLCBucztcbiAgaWYgKHR5cGVvZiB0YWcgPT09ICdzdHJpbmcnKSB7XG4gICAgbGV0IEN0b3I7XG4gICAgbnMgPSAoY29udGV4dC4kdm5vZGUgJiYgY29udGV4dC4kdm5vZGUubnMpIHx8IGNvbmZpZy5nZXRUYWdOYW1lc3BhY2UodGFnKTtcbiAgICBpZiAoY29uZmlnLmlzUmVzZXJ2ZWRUYWcodGFnKSkge1xuICAgICAgLy8gcGxhdGZvcm0gYnVpbHQtaW4gZWxlbWVudHNcbiAgICAgIHZub2RlID0gbmV3IFZOb2RlKFxuICAgICAgICBjb25maWcucGFyc2VQbGF0Zm9ybVRhZ05hbWUodGFnKSwgZGF0YSwgY2hpbGRyZW4sXG4gICAgICAgIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0XG4gICAgICApO1xuICAgIH0gZWxzZSBpZiAoKCFkYXRhIHx8ICFkYXRhLnByZSkgJiYgaXNEZWYoQ3RvciA9IHJlc29sdmVBc3NldChjb250ZXh0LiRvcHRpb25zLCAnY29tcG9uZW50cycsIHRhZykpKSB7XG4gICAgICAvLyBjb21wb25lbnRcbiAgICAgIHZub2RlID0gY3JlYXRlQ29tcG9uZW50KEN0b3IsIGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuLCB0YWcpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB1bmtub3duIG9yIHVubGlzdGVkIG5hbWVzcGFjZWQgZWxlbWVudHNcbiAgICAgIC8vIGNoZWNrIGF0IHJ1bnRpbWUgYmVjYXVzZSBpdCBtYXkgZ2V0IGFzc2lnbmVkIGEgbmFtZXNwYWNlIHdoZW4gaXRzXG4gICAgICAvLyBwYXJlbnQgbm9ybWFsaXplcyBjaGlsZHJlblxuICAgICAgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgICAgIHRhZywgZGF0YSwgY2hpbGRyZW4sXG4gICAgICAgIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0XG4gICAgICApO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBkaXJlY3QgY29tcG9uZW50IG9wdGlvbnMgLyBjb25zdHJ1Y3RvclxuICAgIHZub2RlID0gY3JlYXRlQ29tcG9uZW50KHRhZywgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4pO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgIHJldHVybiB2bm9kZVxuICB9IGVsc2UgaWYgKGlzRGVmKHZub2RlKSkge1xuICAgIGlmIChpc0RlZihucykpIGFwcGx5TlModm5vZGUsIG5zKTtcbiAgICBpZiAoaXNEZWYoZGF0YSkpIHJlZ2lzdGVyRGVlcEJpbmRpbmdzKGRhdGEpO1xuICAgIHJldHVybiB2bm9kZVxuICB9IGVsc2Uge1xuICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgfVxufVxuXG5mdW5jdGlvbiBhcHBseU5TICh2bm9kZSwgbnMsIGZvcmNlKSB7XG4gIHZub2RlLm5zID0gbnM7XG4gIGlmICh2bm9kZS50YWcgPT09ICdmb3JlaWduT2JqZWN0Jykge1xuICAgIC8vIHVzZSBkZWZhdWx0IG5hbWVzcGFjZSBpbnNpZGUgZm9yZWlnbk9iamVjdFxuICAgIG5zID0gdW5kZWZpbmVkO1xuICAgIGZvcmNlID0gdHJ1ZTtcbiAgfVxuICBpZiAoaXNEZWYodm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGwgPSB2bm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGNvbnN0IGNoaWxkID0gdm5vZGUuY2hpbGRyZW5baV07XG4gICAgICBpZiAoaXNEZWYoY2hpbGQudGFnKSAmJiAoXG4gICAgICAgIGlzVW5kZWYoY2hpbGQubnMpIHx8IChpc1RydWUoZm9yY2UpICYmIGNoaWxkLnRhZyAhPT0gJ3N2ZycpKSkge1xuICAgICAgICBhcHBseU5TKGNoaWxkLCBucywgZm9yY2UpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyByZWYgIzUzMThcbi8vIG5lY2Vzc2FyeSB0byBlbnN1cmUgcGFyZW50IHJlLXJlbmRlciB3aGVuIGRlZXAgYmluZGluZ3MgbGlrZSA6c3R5bGUgYW5kXG4vLyA6Y2xhc3MgYXJlIHVzZWQgb24gc2xvdCBub2Rlc1xuZnVuY3Rpb24gcmVnaXN0ZXJEZWVwQmluZGluZ3MgKGRhdGEpIHtcbiAgaWYgKGlzT2JqZWN0KGRhdGEuc3R5bGUpKSB7XG4gICAgdHJhdmVyc2UoZGF0YS5zdHlsZSk7XG4gIH1cbiAgaWYgKGlzT2JqZWN0KGRhdGEuY2xhc3MpKSB7XG4gICAgdHJhdmVyc2UoZGF0YS5jbGFzcyk7XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRSZW5kZXIgKHZtKSB7XG4gIHZtLl92bm9kZSA9IG51bGw7IC8vIHRoZSByb290IG9mIHRoZSBjaGlsZCB0cmVlXG4gIHZtLl9zdGF0aWNUcmVlcyA9IG51bGw7IC8vIHYtb25jZSBjYWNoZWQgdHJlZXNcbiAgY29uc3Qgb3B0aW9ucyA9IHZtLiRvcHRpb25zO1xuICBjb25zdCBwYXJlbnRWbm9kZSA9IHZtLiR2bm9kZSA9IG9wdGlvbnMuX3BhcmVudFZub2RlOyAvLyB0aGUgcGxhY2Vob2xkZXIgbm9kZSBpbiBwYXJlbnQgdHJlZVxuICBjb25zdCByZW5kZXJDb250ZXh0ID0gcGFyZW50Vm5vZGUgJiYgcGFyZW50Vm5vZGUuY29udGV4dDtcbiAgdm0uJHNsb3RzID0gcmVzb2x2ZVNsb3RzKG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuLCByZW5kZXJDb250ZXh0KTtcbiAgdm0uJHNjb3BlZFNsb3RzID0gZW1wdHlPYmplY3Q7XG4gIC8vIGJpbmQgdGhlIGNyZWF0ZUVsZW1lbnQgZm4gdG8gdGhpcyBpbnN0YW5jZVxuICAvLyBzbyB0aGF0IHdlIGdldCBwcm9wZXIgcmVuZGVyIGNvbnRleHQgaW5zaWRlIGl0LlxuICAvLyBhcmdzIG9yZGVyOiB0YWcsIGRhdGEsIGNoaWxkcmVuLCBub3JtYWxpemF0aW9uVHlwZSwgYWx3YXlzTm9ybWFsaXplXG4gIC8vIGludGVybmFsIHZlcnNpb24gaXMgdXNlZCBieSByZW5kZXIgZnVuY3Rpb25zIGNvbXBpbGVkIGZyb20gdGVtcGxhdGVzXG4gIHZtLl9jID0gKGEsIGIsIGMsIGQpID0+IGNyZWF0ZUVsZW1lbnQodm0sIGEsIGIsIGMsIGQsIGZhbHNlKTtcbiAgLy8gbm9ybWFsaXphdGlvbiBpcyBhbHdheXMgYXBwbGllZCBmb3IgdGhlIHB1YmxpYyB2ZXJzaW9uLCB1c2VkIGluXG4gIC8vIHVzZXItd3JpdHRlbiByZW5kZXIgZnVuY3Rpb25zLlxuICB2bS4kY3JlYXRlRWxlbWVudCA9IChhLCBiLCBjLCBkKSA9PiBjcmVhdGVFbGVtZW50KHZtLCBhLCBiLCBjLCBkLCB0cnVlKTtcblxuICAvLyAkYXR0cnMgJiAkbGlzdGVuZXJzIGFyZSBleHBvc2VkIGZvciBlYXNpZXIgSE9DIGNyZWF0aW9uLlxuICAvLyB0aGV5IG5lZWQgdG8gYmUgcmVhY3RpdmUgc28gdGhhdCBIT0NzIHVzaW5nIHRoZW0gYXJlIGFsd2F5cyB1cGRhdGVkXG4gIGNvbnN0IHBhcmVudERhdGEgPSBwYXJlbnRWbm9kZSAmJiBwYXJlbnRWbm9kZS5kYXRhO1xuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIHtcbiAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwgJyRhdHRycycsIHBhcmVudERhdGEgJiYgcGFyZW50RGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdCwgKCkgPT4ge1xuICAgICAgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCAmJiB3YXJuKGAkYXR0cnMgaXMgcmVhZG9ubHkuYCwgdm0pO1xuICAgIH0sIHRydWUpO1xuICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGxpc3RlbmVycycsIG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyB8fCBlbXB0eU9iamVjdCwgKCkgPT4ge1xuICAgICAgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCAmJiB3YXJuKGAkbGlzdGVuZXJzIGlzIHJlYWRvbmx5LmAsIHZtKTtcbiAgICB9LCB0cnVlKTtcbiAgfVxufVxuXG5sZXQgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gbnVsbDtcblxuZnVuY3Rpb24gcmVuZGVyTWl4aW4gKFZ1ZSkge1xuICAvLyBpbnN0YWxsIHJ1bnRpbWUgY29udmVuaWVuY2UgaGVscGVyc1xuICBpbnN0YWxsUmVuZGVySGVscGVycyhWdWUucHJvdG90eXBlKTtcblxuICBWdWUucHJvdG90eXBlLiRuZXh0VGljayA9IGZ1bmN0aW9uIChmbikge1xuICAgIHJldHVybiBuZXh0VGljayhmbiwgdGhpcylcbiAgfTtcblxuICBWdWUucHJvdG90eXBlLl9yZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3Qgdm0gPSB0aGlzO1xuICAgIGNvbnN0IHsgcmVuZGVyLCBfcGFyZW50Vm5vZGUgfSA9IHZtLiRvcHRpb25zO1xuXG4gICAgaWYgKF9wYXJlbnRWbm9kZSkge1xuICAgICAgdm0uJHNjb3BlZFNsb3RzID0gbm9ybWFsaXplU2NvcGVkU2xvdHMoXG4gICAgICAgIF9wYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzLFxuICAgICAgICB2bS4kc2xvdHMsXG4gICAgICAgIHZtLiRzY29wZWRTbG90c1xuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBzZXQgcGFyZW50IHZub2RlLiB0aGlzIGFsbG93cyByZW5kZXIgZnVuY3Rpb25zIHRvIGhhdmUgYWNjZXNzXG4gICAgLy8gdG8gdGhlIGRhdGEgb24gdGhlIHBsYWNlaG9sZGVyIG5vZGUuXG4gICAgdm0uJHZub2RlID0gX3BhcmVudFZub2RlO1xuICAgIC8vIHJlbmRlciBzZWxmXG4gICAgbGV0IHZub2RlO1xuICAgIHRyeSB7XG4gICAgICAvLyBUaGVyZSdzIG5vIG5lZWQgdG8gbWFpbnRhaW4gYSBzdGFjayBiZWNhdWVzIGFsbCByZW5kZXIgZm5zIGFyZSBjYWxsZWRcbiAgICAgIC8vIHNlcGFyYXRlbHkgZnJvbSBvbmUgYW5vdGhlci4gTmVzdGVkIGNvbXBvbmVudCdzIHJlbmRlciBmbnMgYXJlIGNhbGxlZFxuICAgICAgLy8gd2hlbiBwYXJlbnQgY29tcG9uZW50IGlzIHBhdGNoZWQuXG4gICAgICBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSB2bTtcbiAgICAgIHZub2RlID0gcmVuZGVyLmNhbGwodm0uX3JlbmRlclByb3h5LCB2bS4kY3JlYXRlRWxlbWVudCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIGByZW5kZXJgKTtcbiAgICAgIC8vIHJldHVybiBlcnJvciByZW5kZXIgcmVzdWx0LFxuICAgICAgLy8gb3IgcHJldmlvdXMgdm5vZGUgdG8gcHJldmVudCByZW5kZXIgZXJyb3IgY2F1c2luZyBibGFuayBjb21wb25lbnRcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICBpZiAodm0uJG9wdGlvbnMucmVuZGVyRXJyb3IpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2bm9kZSA9IHZtLiRvcHRpb25zLnJlbmRlckVycm9yLmNhbGwodm0uX3JlbmRlclByb3h5LCB2bS4kY3JlYXRlRWxlbWVudCwgZSk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBoYW5kbGVFcnJvcihlLCB2bSwgYHJlbmRlckVycm9yYCk7XG4gICAgICAgICAgdm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZub2RlID0gdm0uX3Zub2RlO1xuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UgPSBudWxsO1xuICAgIH1cbiAgICAvLyBpZiB0aGUgcmV0dXJuZWQgYXJyYXkgY29udGFpbnMgb25seSBhIHNpbmdsZSBub2RlLCBhbGxvdyBpdFxuICAgIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSAmJiB2bm9kZS5sZW5ndGggPT09IDEpIHtcbiAgICAgIHZub2RlID0gdm5vZGVbMF07XG4gICAgfVxuICAgIC8vIHJldHVybiBlbXB0eSB2bm9kZSBpbiBjYXNlIHRoZSByZW5kZXIgZnVuY3Rpb24gZXJyb3JlZCBvdXRcbiAgICBpZiAoISh2bm9kZSBpbnN0YW5jZW9mIFZOb2RlKSkge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ011bHRpcGxlIHJvb3Qgbm9kZXMgcmV0dXJuZWQgZnJvbSByZW5kZXIgZnVuY3Rpb24uIFJlbmRlciBmdW5jdGlvbiAnICtcbiAgICAgICAgICAnc2hvdWxkIHJldHVybiBhIHNpbmdsZSByb290IG5vZGUuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgdm5vZGUgPSBjcmVhdGVFbXB0eVZOb2RlKCk7XG4gICAgfVxuICAgIC8vIHNldCBwYXJlbnRcbiAgICB2bm9kZS5wYXJlbnQgPSBfcGFyZW50Vm5vZGU7XG4gICAgcmV0dXJuIHZub2RlXG4gIH07XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBlbnN1cmVDdG9yIChjb21wLCBiYXNlKSB7XG4gIGlmIChcbiAgICBjb21wLl9fZXNNb2R1bGUgfHxcbiAgICAoaGFzU3ltYm9sICYmIGNvbXBbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ01vZHVsZScpXG4gICkge1xuICAgIGNvbXAgPSBjb21wLmRlZmF1bHQ7XG4gIH1cbiAgcmV0dXJuIGlzT2JqZWN0KGNvbXApXG4gICAgPyBiYXNlLmV4dGVuZChjb21wKVxuICAgIDogY29tcFxufVxuXG5mdW5jdGlvbiBjcmVhdGVBc3luY1BsYWNlaG9sZGVyIChcbiAgZmFjdG9yeSxcbiAgZGF0YSxcbiAgY29udGV4dCxcbiAgY2hpbGRyZW4sXG4gIHRhZ1xuKSB7XG4gIGNvbnN0IG5vZGUgPSBjcmVhdGVFbXB0eVZOb2RlKCk7XG4gIG5vZGUuYXN5bmNGYWN0b3J5ID0gZmFjdG9yeTtcbiAgbm9kZS5hc3luY01ldGEgPSB7IGRhdGEsIGNvbnRleHQsIGNoaWxkcmVuLCB0YWcgfTtcbiAgcmV0dXJuIG5vZGVcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZUFzeW5jQ29tcG9uZW50IChcbiAgZmFjdG9yeSxcbiAgYmFzZUN0b3Jcbikge1xuICBpZiAoaXNUcnVlKGZhY3RvcnkuZXJyb3IpICYmIGlzRGVmKGZhY3RvcnkuZXJyb3JDb21wKSkge1xuICAgIHJldHVybiBmYWN0b3J5LmVycm9yQ29tcFxuICB9XG5cbiAgaWYgKGlzRGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgcmV0dXJuIGZhY3RvcnkucmVzb2x2ZWRcbiAgfVxuXG4gIGlmIChpc1RydWUoZmFjdG9yeS5sb2FkaW5nKSAmJiBpc0RlZihmYWN0b3J5LmxvYWRpbmdDb21wKSkge1xuICAgIHJldHVybiBmYWN0b3J5LmxvYWRpbmdDb21wXG4gIH1cblxuICBjb25zdCBvd25lciA9IGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZTtcbiAgaWYgKGlzRGVmKGZhY3Rvcnkub3duZXJzKSkge1xuICAgIC8vIGFscmVhZHkgcGVuZGluZ1xuICAgIGZhY3Rvcnkub3duZXJzLnB1c2gob3duZXIpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IG93bmVycyA9IGZhY3Rvcnkub3duZXJzID0gW293bmVyXTtcbiAgICBsZXQgc3luYyA9IHRydWU7XG5cbiAgICBjb25zdCBmb3JjZVJlbmRlciA9IChyZW5kZXJDb21wbGV0ZWQpID0+IHtcbiAgICAgIGZvciAobGV0IGkgPSAwLCBsID0gb3duZXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAob3duZXJzW2ldKS4kZm9yY2VVcGRhdGUoKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHJlbmRlckNvbXBsZXRlZCkge1xuICAgICAgICBvd25lcnMubGVuZ3RoID0gMDtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgY29uc3QgcmVzb2x2ZSA9IG9uY2UoKHJlcykgPT4ge1xuICAgICAgLy8gY2FjaGUgcmVzb2x2ZWRcbiAgICAgIGZhY3RvcnkucmVzb2x2ZWQgPSBlbnN1cmVDdG9yKHJlcywgYmFzZUN0b3IpO1xuICAgICAgLy8gaW52b2tlIGNhbGxiYWNrcyBvbmx5IGlmIHRoaXMgaXMgbm90IGEgc3luY2hyb25vdXMgcmVzb2x2ZVxuICAgICAgLy8gKGFzeW5jIHJlc29sdmVzIGFyZSBzaGltbWVkIGFzIHN5bmNocm9ub3VzIGR1cmluZyBTU1IpXG4gICAgICBpZiAoIXN5bmMpIHtcbiAgICAgICAgZm9yY2VSZW5kZXIodHJ1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvd25lcnMubGVuZ3RoID0gMDtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGNvbnN0IHJlamVjdCA9IG9uY2UocmVhc29uID0+IHtcbiAgICAgIHdhcm4oXG4gICAgICAgIGBGYWlsZWQgdG8gcmVzb2x2ZSBhc3luYyBjb21wb25lbnQ6ICR7U3RyaW5nKGZhY3RvcnkpfWAgK1xuICAgICAgICAocmVhc29uID8gYFxcblJlYXNvbjogJHtyZWFzb259YCA6ICcnKVxuICAgICAgKTtcbiAgICAgIGlmIChpc0RlZihmYWN0b3J5LmVycm9yQ29tcCkpIHtcbiAgICAgICAgZmFjdG9yeS5lcnJvciA9IHRydWU7XG4gICAgICAgIGZvcmNlUmVuZGVyKHRydWUpO1xuICAgICAgfVxuICAgIH0pO1xuXG4gICAgY29uc3QgcmVzID0gZmFjdG9yeShyZXNvbHZlLCByZWplY3QpO1xuXG4gICAgaWYgKGlzT2JqZWN0KHJlcykpIHtcbiAgICAgIGlmIChpc1Byb21pc2UocmVzKSkge1xuICAgICAgICAvLyAoKSA9PiBQcm9taXNlXG4gICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgICAgcmVzLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc1Byb21pc2UocmVzLmNvbXBvbmVudCkpIHtcbiAgICAgICAgcmVzLmNvbXBvbmVudC50aGVuKHJlc29sdmUsIHJlamVjdCk7XG5cbiAgICAgICAgaWYgKGlzRGVmKHJlcy5lcnJvcikpIHtcbiAgICAgICAgICBmYWN0b3J5LmVycm9yQ29tcCA9IGVuc3VyZUN0b3IocmVzLmVycm9yLCBiYXNlQ3Rvcik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEZWYocmVzLmxvYWRpbmcpKSB7XG4gICAgICAgICAgZmFjdG9yeS5sb2FkaW5nQ29tcCA9IGVuc3VyZUN0b3IocmVzLmxvYWRpbmcsIGJhc2VDdG9yKTtcbiAgICAgICAgICBpZiAocmVzLmRlbGF5ID09PSAwKSB7XG4gICAgICAgICAgICBmYWN0b3J5LmxvYWRpbmcgPSB0cnVlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkgJiYgaXNVbmRlZihmYWN0b3J5LmVycm9yKSkge1xuICAgICAgICAgICAgICAgIGZhY3RvcnkubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgZm9yY2VSZW5kZXIoZmFsc2UpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCByZXMuZGVsYXkgfHwgMjAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNEZWYocmVzLnRpbWVvdXQpKSB7XG4gICAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICAgICAgICByZWplY3QoXG4gICAgICAgICAgICAgICAgYHRpbWVvdXQgKCR7cmVzLnRpbWVvdXR9bXMpYFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sIHJlcy50aW1lb3V0KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHN5bmMgPSBmYWxzZTtcbiAgICAvLyByZXR1cm4gaW4gY2FzZSByZXNvbHZlZCBzeW5jaHJvbm91c2x5XG4gICAgcmV0dXJuIGZhY3RvcnkubG9hZGluZ1xuICAgICAgPyBmYWN0b3J5LmxvYWRpbmdDb21wXG4gICAgICA6IGZhY3RvcnkucmVzb2x2ZWRcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaXNBc3luY1BsYWNlaG9sZGVyIChub2RlKSB7XG4gIHJldHVybiBub2RlLmlzQ29tbWVudCAmJiBub2RlLmFzeW5jRmFjdG9yeVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gZ2V0Rmlyc3RDb21wb25lbnRDaGlsZCAoY2hpbGRyZW4pIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgYyA9IGNoaWxkcmVuW2ldO1xuICAgICAgaWYgKGlzRGVmKGMpICYmIChpc0RlZihjLmNvbXBvbmVudE9wdGlvbnMpIHx8IGlzQXN5bmNQbGFjZWhvbGRlcihjKSkpIHtcbiAgICAgICAgcmV0dXJuIGNcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0RXZlbnRzICh2bSkge1xuICB2bS5fZXZlbnRzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdm0uX2hhc0hvb2tFdmVudCA9IGZhbHNlO1xuICAvLyBpbml0IHBhcmVudCBhdHRhY2hlZCBldmVudHNcbiAgY29uc3QgbGlzdGVuZXJzID0gdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgaWYgKGxpc3RlbmVycykge1xuICAgIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzKTtcbiAgfVxufVxuXG5sZXQgdGFyZ2V0O1xuXG5mdW5jdGlvbiBhZGQgKGV2ZW50LCBmbikge1xuICB0YXJnZXQuJG9uKGV2ZW50LCBmbik7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZSQxIChldmVudCwgZm4pIHtcbiAgdGFyZ2V0LiRvZmYoZXZlbnQsIGZuKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlT25jZUhhbmRsZXIgKGV2ZW50LCBmbikge1xuICBjb25zdCBfdGFyZ2V0ID0gdGFyZ2V0O1xuICByZXR1cm4gZnVuY3Rpb24gb25jZUhhbmRsZXIgKCkge1xuICAgIGNvbnN0IHJlcyA9IGZuLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgaWYgKHJlcyAhPT0gbnVsbCkge1xuICAgICAgX3RhcmdldC4kb2ZmKGV2ZW50LCBvbmNlSGFuZGxlcik7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyAoXG4gIHZtLFxuICBsaXN0ZW5lcnMsXG4gIG9sZExpc3RlbmVyc1xuKSB7XG4gIHRhcmdldCA9IHZtO1xuICB1cGRhdGVMaXN0ZW5lcnMobGlzdGVuZXJzLCBvbGRMaXN0ZW5lcnMgfHwge30sIGFkZCwgcmVtb3ZlJDEsIGNyZWF0ZU9uY2VIYW5kbGVyLCB2bSk7XG4gIHRhcmdldCA9IHVuZGVmaW5lZDtcbn1cblxuZnVuY3Rpb24gZXZlbnRzTWl4aW4gKFZ1ZSkge1xuICBjb25zdCBob29rUkUgPSAvXmhvb2s6LztcbiAgVnVlLnByb3RvdHlwZS4kb24gPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgY29uc3Qgdm0gPSB0aGlzO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50KSkge1xuICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBldmVudC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdm0uJG9uKGV2ZW50W2ldLCBmbik7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICh2bS5fZXZlbnRzW2V2ZW50XSB8fCAodm0uX2V2ZW50c1tldmVudF0gPSBbXSkpLnB1c2goZm4pO1xuICAgICAgLy8gb3B0aW1pemUgaG9vazpldmVudCBjb3N0IGJ5IHVzaW5nIGEgYm9vbGVhbiBmbGFnIG1hcmtlZCBhdCByZWdpc3RyYXRpb25cbiAgICAgIC8vIGluc3RlYWQgb2YgYSBoYXNoIGxvb2t1cFxuICAgICAgaWYgKGhvb2tSRS50ZXN0KGV2ZW50KSkge1xuICAgICAgICB2bS5faGFzSG9va0V2ZW50ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kb25jZSA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICBjb25zdCB2bSA9IHRoaXM7XG4gICAgZnVuY3Rpb24gb24gKCkge1xuICAgICAgdm0uJG9mZihldmVudCwgb24pO1xuICAgICAgZm4uYXBwbHkodm0sIGFyZ3VtZW50cyk7XG4gICAgfVxuICAgIG9uLmZuID0gZm47XG4gICAgdm0uJG9uKGV2ZW50LCBvbik7XG4gICAgcmV0dXJuIHZtXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kb2ZmID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgIGNvbnN0IHZtID0gdGhpcztcbiAgICAvLyBhbGxcbiAgICBpZiAoIWFyZ3VtZW50cy5sZW5ndGgpIHtcbiAgICAgIHZtLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIGFycmF5IG9mIGV2ZW50c1xuICAgIGlmIChBcnJheS5pc0FycmF5KGV2ZW50KSkge1xuICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBldmVudC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdm0uJG9mZihldmVudFtpXSwgZm4pO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZtXG4gICAgfVxuICAgIC8vIHNwZWNpZmljIGV2ZW50XG4gICAgY29uc3QgY2JzID0gdm0uX2V2ZW50c1tldmVudF07XG4gICAgaWYgKCFjYnMpIHtcbiAgICAgIHJldHVybiB2bVxuICAgIH1cbiAgICBpZiAoIWZuKSB7XG4gICAgICB2bS5fZXZlbnRzW2V2ZW50XSA9IG51bGw7XG4gICAgICByZXR1cm4gdm1cbiAgICB9XG4gICAgLy8gc3BlY2lmaWMgaGFuZGxlclxuICAgIGxldCBjYjtcbiAgICBsZXQgaSA9IGNicy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgY2IgPSBjYnNbaV07XG4gICAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xuICAgICAgICBjYnMuc3BsaWNlKGksIDEpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcblxuICBWdWUucHJvdG90eXBlLiRlbWl0ID0gZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgY29uc3Qgdm0gPSB0aGlzO1xuICAgIHtcbiAgICAgIGNvbnN0IGxvd2VyQ2FzZUV2ZW50ID0gZXZlbnQudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmIChsb3dlckNhc2VFdmVudCAhPT0gZXZlbnQgJiYgdm0uX2V2ZW50c1tsb3dlckNhc2VFdmVudF0pIHtcbiAgICAgICAgdGlwKFxuICAgICAgICAgIGBFdmVudCBcIiR7bG93ZXJDYXNlRXZlbnR9XCIgaXMgZW1pdHRlZCBpbiBjb21wb25lbnQgYCArXG4gICAgICAgICAgYCR7Zm9ybWF0Q29tcG9uZW50TmFtZSh2bSl9IGJ1dCB0aGUgaGFuZGxlciBpcyByZWdpc3RlcmVkIGZvciBcIiR7ZXZlbnR9XCIuIGAgK1xuICAgICAgICAgIGBOb3RlIHRoYXQgSFRNTCBhdHRyaWJ1dGVzIGFyZSBjYXNlLWluc2Vuc2l0aXZlIGFuZCB5b3UgY2Fubm90IHVzZSBgICtcbiAgICAgICAgICBgdi1vbiB0byBsaXN0ZW4gdG8gY2FtZWxDYXNlIGV2ZW50cyB3aGVuIHVzaW5nIGluLURPTSB0ZW1wbGF0ZXMuIGAgK1xuICAgICAgICAgIGBZb3Ugc2hvdWxkIHByb2JhYmx5IHVzZSBcIiR7aHlwaGVuYXRlKGV2ZW50KX1cIiBpbnN0ZWFkIG9mIFwiJHtldmVudH1cIi5gXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGxldCBjYnMgPSB2bS5fZXZlbnRzW2V2ZW50XTtcbiAgICBpZiAoY2JzKSB7XG4gICAgICBjYnMgPSBjYnMubGVuZ3RoID4gMSA/IHRvQXJyYXkoY2JzKSA6IGNicztcbiAgICAgIGNvbnN0IGFyZ3MgPSB0b0FycmF5KGFyZ3VtZW50cywgMSk7XG4gICAgICBjb25zdCBpbmZvID0gYGV2ZW50IGhhbmRsZXIgZm9yIFwiJHtldmVudH1cImA7XG4gICAgICBmb3IgKGxldCBpID0gMCwgbCA9IGNicy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoY2JzW2ldLCB2bSwgYXJncywgdm0sIGluZm8pO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdm1cbiAgfTtcbn1cblxuLyogICovXG5cbmxldCBhY3RpdmVJbnN0YW5jZSA9IG51bGw7XG5sZXQgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gZmFsc2U7XG5cbmZ1bmN0aW9uIHNldEFjdGl2ZUluc3RhbmNlKHZtKSB7XG4gIGNvbnN0IHByZXZBY3RpdmVJbnN0YW5jZSA9IGFjdGl2ZUluc3RhbmNlO1xuICBhY3RpdmVJbnN0YW5jZSA9IHZtO1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGFjdGl2ZUluc3RhbmNlID0gcHJldkFjdGl2ZUluc3RhbmNlO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRMaWZlY3ljbGUgKHZtKSB7XG4gIGNvbnN0IG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcblxuICAvLyBsb2NhdGUgZmlyc3Qgbm9uLWFic3RyYWN0IHBhcmVudFxuICBsZXQgcGFyZW50ID0gb3B0aW9ucy5wYXJlbnQ7XG4gIGlmIChwYXJlbnQgJiYgIW9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICB3aGlsZSAocGFyZW50LiRvcHRpb25zLmFic3RyYWN0ICYmIHBhcmVudC4kcGFyZW50KSB7XG4gICAgICBwYXJlbnQgPSBwYXJlbnQuJHBhcmVudDtcbiAgICB9XG4gICAgcGFyZW50LiRjaGlsZHJlbi5wdXNoKHZtKTtcbiAgfVxuXG4gIHZtLiRwYXJlbnQgPSBwYXJlbnQ7XG4gIHZtLiRyb290ID0gcGFyZW50ID8gcGFyZW50LiRyb290IDogdm07XG5cbiAgdm0uJGNoaWxkcmVuID0gW107XG4gIHZtLiRyZWZzID0ge307XG5cbiAgdm0uX3dhdGNoZXIgPSBudWxsO1xuICB2bS5faW5hY3RpdmUgPSBudWxsO1xuICB2bS5fZGlyZWN0SW5hY3RpdmUgPSBmYWxzZTtcbiAgdm0uX2lzTW91bnRlZCA9IGZhbHNlO1xuICB2bS5faXNEZXN0cm95ZWQgPSBmYWxzZTtcbiAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gbGlmZWN5Y2xlTWl4aW4gKFZ1ZSkge1xuICBWdWUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgIGNvbnN0IHZtID0gdGhpcztcbiAgICBjb25zdCBwcmV2RWwgPSB2bS4kZWw7XG4gICAgY29uc3QgcHJldlZub2RlID0gdm0uX3Zub2RlO1xuICAgIGNvbnN0IHJlc3RvcmVBY3RpdmVJbnN0YW5jZSA9IHNldEFjdGl2ZUluc3RhbmNlKHZtKTtcbiAgICB2bS5fdm5vZGUgPSB2bm9kZTtcbiAgICAvLyBWdWUucHJvdG90eXBlLl9fcGF0Y2hfXyBpcyBpbmplY3RlZCBpbiBlbnRyeSBwb2ludHNcbiAgICAvLyBiYXNlZCBvbiB0aGUgcmVuZGVyaW5nIGJhY2tlbmQgdXNlZC5cbiAgICBpZiAoIXByZXZWbm9kZSkge1xuICAgICAgLy8gaW5pdGlhbCByZW5kZXJcbiAgICAgIHZtLiRlbCA9IHZtLl9fcGF0Y2hfXyh2bS4kZWwsIHZub2RlLCBoeWRyYXRpbmcsIGZhbHNlIC8qIHJlbW92ZU9ubHkgKi8pO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB1cGRhdGVzXG4gICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18ocHJldlZub2RlLCB2bm9kZSk7XG4gICAgfVxuICAgIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSgpO1xuICAgIC8vIHVwZGF0ZSBfX3Z1ZV9fIHJlZmVyZW5jZVxuICAgIGlmIChwcmV2RWwpIHtcbiAgICAgIHByZXZFbC5fX3Z1ZV9fID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKHZtLiRlbCkge1xuICAgICAgdm0uJGVsLl9fdnVlX18gPSB2bTtcbiAgICB9XG4gICAgLy8gaWYgcGFyZW50IGlzIGFuIEhPQywgdXBkYXRlIGl0cyAkZWwgYXMgd2VsbFxuICAgIGlmICh2bS4kdm5vZGUgJiYgdm0uJHBhcmVudCAmJiB2bS4kdm5vZGUgPT09IHZtLiRwYXJlbnQuX3Zub2RlKSB7XG4gICAgICB2bS4kcGFyZW50LiRlbCA9IHZtLiRlbDtcbiAgICB9XG4gICAgLy8gdXBkYXRlZCBob29rIGlzIGNhbGxlZCBieSB0aGUgc2NoZWR1bGVyIHRvIGVuc3VyZSB0aGF0IGNoaWxkcmVuIGFyZVxuICAgIC8vIHVwZGF0ZWQgaW4gYSBwYXJlbnQncyB1cGRhdGVkIGhvb2suXG4gIH07XG5cbiAgVnVlLnByb3RvdHlwZS4kZm9yY2VVcGRhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3Qgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5fd2F0Y2hlcikge1xuICAgICAgdm0uX3dhdGNoZXIudXBkYXRlKCk7XG4gICAgfVxuICB9O1xuXG4gIFZ1ZS5wcm90b3R5cGUuJGRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3Qgdm0gPSB0aGlzO1xuICAgIGlmICh2bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlRGVzdHJveScpO1xuICAgIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAvLyByZW1vdmUgc2VsZiBmcm9tIHBhcmVudFxuICAgIGNvbnN0IHBhcmVudCA9IHZtLiRwYXJlbnQ7XG4gICAgaWYgKHBhcmVudCAmJiAhcGFyZW50Ll9pc0JlaW5nRGVzdHJveWVkICYmICF2bS4kb3B0aW9ucy5hYnN0cmFjdCkge1xuICAgICAgcmVtb3ZlKHBhcmVudC4kY2hpbGRyZW4sIHZtKTtcbiAgICB9XG4gICAgLy8gdGVhcmRvd24gd2F0Y2hlcnNcbiAgICBpZiAodm0uX3dhdGNoZXIpIHtcbiAgICAgIHZtLl93YXRjaGVyLnRlYXJkb3duKCk7XG4gICAgfVxuICAgIGxldCBpID0gdm0uX3dhdGNoZXJzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2bS5fd2F0Y2hlcnNbaV0udGVhcmRvd24oKTtcbiAgICB9XG4gICAgLy8gcmVtb3ZlIHJlZmVyZW5jZSBmcm9tIGRhdGEgb2JcbiAgICAvLyBmcm96ZW4gb2JqZWN0IG1heSBub3QgaGF2ZSBvYnNlcnZlci5cbiAgICBpZiAodm0uX2RhdGEuX19vYl9fKSB7XG4gICAgICB2bS5fZGF0YS5fX29iX18udm1Db3VudC0tO1xuICAgIH1cbiAgICAvLyBjYWxsIHRoZSBsYXN0IGhvb2suLi5cbiAgICB2bS5faXNEZXN0cm95ZWQgPSB0cnVlO1xuICAgIC8vIGludm9rZSBkZXN0cm95IGhvb2tzIG9uIGN1cnJlbnQgcmVuZGVyZWQgdHJlZVxuICAgIHZtLl9fcGF0Y2hfXyh2bS5fdm5vZGUsIG51bGwpO1xuICAgIC8vIGZpcmUgZGVzdHJveWVkIGhvb2tcbiAgICBjYWxsSG9vayh2bSwgJ2Rlc3Ryb3llZCcpO1xuICAgIC8vIHR1cm4gb2ZmIGFsbCBpbnN0YW5jZSBsaXN0ZW5lcnMuXG4gICAgdm0uJG9mZigpO1xuICAgIC8vIHJlbW92ZSBfX3Z1ZV9fIHJlZmVyZW5jZVxuICAgIGlmICh2bS4kZWwpIHtcbiAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gbnVsbDtcbiAgICB9XG4gICAgLy8gcmVsZWFzZSBjaXJjdWxhciByZWZlcmVuY2UgKCM2NzU5KVxuICAgIGlmICh2bS4kdm5vZGUpIHtcbiAgICAgIHZtLiR2bm9kZS5wYXJlbnQgPSBudWxsO1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gbW91bnRDb21wb25lbnQgKFxuICB2bSxcbiAgZWwsXG4gIGh5ZHJhdGluZ1xuKSB7XG4gIHZtLiRlbCA9IGVsO1xuICBpZiAoIXZtLiRvcHRpb25zLnJlbmRlcikge1xuICAgIHZtLiRvcHRpb25zLnJlbmRlciA9IGNyZWF0ZUVtcHR5Vk5vZGU7XG4gICAge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoKHZtLiRvcHRpb25zLnRlbXBsYXRlICYmIHZtLiRvcHRpb25zLnRlbXBsYXRlLmNoYXJBdCgwKSAhPT0gJyMnKSB8fFxuICAgICAgICB2bS4kb3B0aW9ucy5lbCB8fCBlbCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdZb3UgYXJlIHVzaW5nIHRoZSBydW50aW1lLW9ubHkgYnVpbGQgb2YgVnVlIHdoZXJlIHRoZSB0ZW1wbGF0ZSAnICtcbiAgICAgICAgICAnY29tcGlsZXIgaXMgbm90IGF2YWlsYWJsZS4gRWl0aGVyIHByZS1jb21waWxlIHRoZSB0ZW1wbGF0ZXMgaW50byAnICtcbiAgICAgICAgICAncmVuZGVyIGZ1bmN0aW9ucywgb3IgdXNlIHRoZSBjb21waWxlci1pbmNsdWRlZCBidWlsZC4nLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdGYWlsZWQgdG8gbW91bnQgY29tcG9uZW50OiB0ZW1wbGF0ZSBvciByZW5kZXIgZnVuY3Rpb24gbm90IGRlZmluZWQuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBjYWxsSG9vayh2bSwgJ2JlZm9yZU1vdW50Jyk7XG5cbiAgbGV0IHVwZGF0ZUNvbXBvbmVudDtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgIHVwZGF0ZUNvbXBvbmVudCA9ICgpID0+IHtcbiAgICAgIGNvbnN0IG5hbWUgPSB2bS5fbmFtZTtcbiAgICAgIGNvbnN0IGlkID0gdm0uX3VpZDtcbiAgICAgIGNvbnN0IHN0YXJ0VGFnID0gYHZ1ZS1wZXJmLXN0YXJ0OiR7aWR9YDtcbiAgICAgIGNvbnN0IGVuZFRhZyA9IGB2dWUtcGVyZi1lbmQ6JHtpZH1gO1xuXG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICAgIGNvbnN0IHZub2RlID0gdm0uX3JlbmRlcigpO1xuICAgICAgbWFyayhlbmRUYWcpO1xuICAgICAgbWVhc3VyZShgdnVlICR7bmFtZX0gcmVuZGVyYCwgc3RhcnRUYWcsIGVuZFRhZyk7XG5cbiAgICAgIG1hcmsoc3RhcnRUYWcpO1xuICAgICAgdm0uX3VwZGF0ZSh2bm9kZSwgaHlkcmF0aW5nKTtcbiAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgIG1lYXN1cmUoYHZ1ZSAke25hbWV9IHBhdGNoYCwgc3RhcnRUYWcsIGVuZFRhZyk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICB1cGRhdGVDb21wb25lbnQgPSAoKSA9PiB7XG4gICAgICB2bS5fdXBkYXRlKHZtLl9yZW5kZXIoKSwgaHlkcmF0aW5nKTtcbiAgICB9O1xuICB9XG5cbiAgLy8gd2Ugc2V0IHRoaXMgdG8gdm0uX3dhdGNoZXIgaW5zaWRlIHRoZSB3YXRjaGVyJ3MgY29uc3RydWN0b3JcbiAgLy8gc2luY2UgdGhlIHdhdGNoZXIncyBpbml0aWFsIHBhdGNoIG1heSBjYWxsICRmb3JjZVVwZGF0ZSAoZS5nLiBpbnNpZGUgY2hpbGRcbiAgLy8gY29tcG9uZW50J3MgbW91bnRlZCBob29rKSwgd2hpY2ggcmVsaWVzIG9uIHZtLl93YXRjaGVyIGJlaW5nIGFscmVhZHkgZGVmaW5lZFxuICBuZXcgV2F0Y2hlcih2bSwgdXBkYXRlQ29tcG9uZW50LCBub29wLCB7XG4gICAgYmVmb3JlICgpIHtcbiAgICAgIGlmICh2bS5faXNNb3VudGVkICYmICF2bS5faXNEZXN0cm95ZWQpIHtcbiAgICAgICAgY2FsbEhvb2sodm0sICdiZWZvcmVVcGRhdGUnKTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHRydWUgLyogaXNSZW5kZXJXYXRjaGVyICovKTtcbiAgaHlkcmF0aW5nID0gZmFsc2U7XG5cbiAgLy8gbWFudWFsbHkgbW91bnRlZCBpbnN0YW5jZSwgY2FsbCBtb3VudGVkIG9uIHNlbGZcbiAgLy8gbW91bnRlZCBpcyBjYWxsZWQgZm9yIHJlbmRlci1jcmVhdGVkIGNoaWxkIGNvbXBvbmVudHMgaW4gaXRzIGluc2VydGVkIGhvb2tcbiAgaWYgKHZtLiR2bm9kZSA9PSBudWxsKSB7XG4gICAgdm0uX2lzTW91bnRlZCA9IHRydWU7XG4gICAgY2FsbEhvb2sodm0sICdtb3VudGVkJyk7XG4gIH1cbiAgcmV0dXJuIHZtXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNoaWxkQ29tcG9uZW50IChcbiAgdm0sXG4gIHByb3BzRGF0YSxcbiAgbGlzdGVuZXJzLFxuICBwYXJlbnRWbm9kZSxcbiAgcmVuZGVyQ2hpbGRyZW5cbikge1xuICB7XG4gICAgaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ID0gdHJ1ZTtcbiAgfVxuXG4gIC8vIGRldGVybWluZSB3aGV0aGVyIGNvbXBvbmVudCBoYXMgc2xvdCBjaGlsZHJlblxuICAvLyB3ZSBuZWVkIHRvIGRvIHRoaXMgYmVmb3JlIG92ZXJ3cml0aW5nICRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbi5cblxuICAvLyBjaGVjayBpZiB0aGVyZSBhcmUgZHluYW1pYyBzY29wZWRTbG90cyAoaGFuZC13cml0dGVuIG9yIGNvbXBpbGVkIGJ1dCB3aXRoXG4gIC8vIGR5bmFtaWMgc2xvdCBuYW1lcykuIFN0YXRpYyBzY29wZWQgc2xvdHMgY29tcGlsZWQgZnJvbSB0ZW1wbGF0ZSBoYXMgdGhlXG4gIC8vIFwiJHN0YWJsZVwiIG1hcmtlci5cbiAgY29uc3QgaGFzRHluYW1pY1Njb3BlZFNsb3QgPSAhIShcbiAgICAocGFyZW50Vm5vZGUuZGF0YS5zY29wZWRTbG90cyAmJiAhcGFyZW50Vm5vZGUuZGF0YS5zY29wZWRTbG90cy4kc3RhYmxlKSB8fFxuICAgICh2bS4kc2NvcGVkU2xvdHMgIT09IGVtcHR5T2JqZWN0ICYmICF2bS4kc2NvcGVkU2xvdHMuJHN0YWJsZSlcbiAgKTtcblxuICAvLyBBbnkgc3RhdGljIHNsb3QgY2hpbGRyZW4gZnJvbSB0aGUgcGFyZW50IG1heSBoYXZlIGNoYW5nZWQgZHVyaW5nIHBhcmVudCdzXG4gIC8vIHVwZGF0ZS4gRHluYW1pYyBzY29wZWQgc2xvdHMgbWF5IGFsc28gaGF2ZSBjaGFuZ2VkLiBJbiBzdWNoIGNhc2VzLCBhIGZvcmNlZFxuICAvLyB1cGRhdGUgaXMgbmVjZXNzYXJ5IHRvIGVuc3VyZSBjb3JyZWN0bmVzcy5cbiAgY29uc3QgbmVlZHNGb3JjZVVwZGF0ZSA9ICEhKFxuICAgIHJlbmRlckNoaWxkcmVuIHx8ICAgICAgICAgICAgICAgLy8gaGFzIG5ldyBzdGF0aWMgc2xvdHNcbiAgICB2bS4kb3B0aW9ucy5fcmVuZGVyQ2hpbGRyZW4gfHwgIC8vIGhhcyBvbGQgc3RhdGljIHNsb3RzXG4gICAgaGFzRHluYW1pY1Njb3BlZFNsb3RcbiAgKTtcblxuICB2bS4kb3B0aW9ucy5fcGFyZW50Vm5vZGUgPSBwYXJlbnRWbm9kZTtcbiAgdm0uJHZub2RlID0gcGFyZW50Vm5vZGU7IC8vIHVwZGF0ZSB2bSdzIHBsYWNlaG9sZGVyIG5vZGUgd2l0aG91dCByZS1yZW5kZXJcblxuICBpZiAodm0uX3Zub2RlKSB7IC8vIHVwZGF0ZSBjaGlsZCB0cmVlJ3MgcGFyZW50XG4gICAgdm0uX3Zub2RlLnBhcmVudCA9IHBhcmVudFZub2RlO1xuICB9XG4gIHZtLiRvcHRpb25zLl9yZW5kZXJDaGlsZHJlbiA9IHJlbmRlckNoaWxkcmVuO1xuXG4gIC8vIHVwZGF0ZSAkYXR0cnMgYW5kICRsaXN0ZW5lcnMgaGFzaFxuICAvLyB0aGVzZSBhcmUgYWxzbyByZWFjdGl2ZSBzbyB0aGV5IG1heSB0cmlnZ2VyIGNoaWxkIHVwZGF0ZSBpZiB0aGUgY2hpbGRcbiAgLy8gdXNlZCB0aGVtIGR1cmluZyByZW5kZXJcbiAgdm0uJGF0dHJzID0gcGFyZW50Vm5vZGUuZGF0YS5hdHRycyB8fCBlbXB0eU9iamVjdDtcbiAgdm0uJGxpc3RlbmVycyA9IGxpc3RlbmVycyB8fCBlbXB0eU9iamVjdDtcblxuICAvLyB1cGRhdGUgcHJvcHNcbiAgaWYgKHByb3BzRGF0YSAmJiB2bS4kb3B0aW9ucy5wcm9wcykge1xuICAgIHRvZ2dsZU9ic2VydmluZyhmYWxzZSk7XG4gICAgY29uc3QgcHJvcHMgPSB2bS5fcHJvcHM7XG4gICAgY29uc3QgcHJvcEtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgfHwgW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9wS2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3Qga2V5ID0gcHJvcEtleXNbaV07XG4gICAgICBjb25zdCBwcm9wT3B0aW9ucyA9IHZtLiRvcHRpb25zLnByb3BzOyAvLyB3dGYgZmxvdz9cbiAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhLCB2bSk7XG4gICAgfVxuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgICAvLyBrZWVwIGEgY29weSBvZiByYXcgcHJvcHNEYXRhXG4gICAgdm0uJG9wdGlvbnMucHJvcHNEYXRhID0gcHJvcHNEYXRhO1xuICB9XG5cbiAgLy8gdXBkYXRlIGxpc3RlbmVyc1xuICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3Q7XG4gIGNvbnN0IG9sZExpc3RlbmVycyA9IHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG4gIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzLCBvbGRMaXN0ZW5lcnMpO1xuXG4gIC8vIHJlc29sdmUgc2xvdHMgKyBmb3JjZSB1cGRhdGUgaWYgaGFzIGNoaWxkcmVuXG4gIGlmIChuZWVkc0ZvcmNlVXBkYXRlKSB7XG4gICAgdm0uJHNsb3RzID0gcmVzb2x2ZVNsb3RzKHJlbmRlckNoaWxkcmVuLCBwYXJlbnRWbm9kZS5jb250ZXh0KTtcbiAgICB2bS4kZm9yY2VVcGRhdGUoKTtcbiAgfVxuXG4gIHtcbiAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0luSW5hY3RpdmVUcmVlICh2bSkge1xuICB3aGlsZSAodm0gJiYgKHZtID0gdm0uJHBhcmVudCkpIHtcbiAgICBpZiAodm0uX2luYWN0aXZlKSByZXR1cm4gdHJ1ZVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG5mdW5jdGlvbiBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50ICh2bSwgZGlyZWN0KSB7XG4gIGlmIChkaXJlY3QpIHtcbiAgICB2bS5fZGlyZWN0SW5hY3RpdmUgPSBmYWxzZTtcbiAgICBpZiAoaXNJbkluYWN0aXZlVHJlZSh2bSkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfSBlbHNlIGlmICh2bS5fZGlyZWN0SW5hY3RpdmUpIHtcbiAgICByZXR1cm5cbiAgfVxuICBpZiAodm0uX2luYWN0aXZlIHx8IHZtLl9pbmFjdGl2ZSA9PT0gbnVsbCkge1xuICAgIHZtLl9pbmFjdGl2ZSA9IGZhbHNlO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdm0uJGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHZtLiRjaGlsZHJlbltpXSk7XG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnYWN0aXZhdGVkJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50ICh2bSwgZGlyZWN0KSB7XG4gIGlmIChkaXJlY3QpIHtcbiAgICB2bS5fZGlyZWN0SW5hY3RpdmUgPSB0cnVlO1xuICAgIGlmIChpc0luSW5hY3RpdmVUcmVlKHZtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICB9XG4gIGlmICghdm0uX2luYWN0aXZlKSB7XG4gICAgdm0uX2luYWN0aXZlID0gdHJ1ZTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZtLiRjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHZtLiRjaGlsZHJlbltpXSk7XG4gICAgfVxuICAgIGNhbGxIb29rKHZtLCAnZGVhY3RpdmF0ZWQnKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjYWxsSG9vayAodm0sIGhvb2spIHtcbiAgLy8gIzc1NzMgZGlzYWJsZSBkZXAgY29sbGVjdGlvbiB3aGVuIGludm9raW5nIGxpZmVjeWNsZSBob29rc1xuICBwdXNoVGFyZ2V0KCk7XG4gIGNvbnN0IGhhbmRsZXJzID0gdm0uJG9wdGlvbnNbaG9va107XG4gIGNvbnN0IGluZm8gPSBgJHtob29rfSBob29rYDtcbiAgaWYgKGhhbmRsZXJzKSB7XG4gICAgZm9yIChsZXQgaSA9IDAsIGogPSBoYW5kbGVycy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKGhhbmRsZXJzW2ldLCB2bSwgbnVsbCwgdm0sIGluZm8pO1xuICAgIH1cbiAgfVxuICBpZiAodm0uX2hhc0hvb2tFdmVudCkge1xuICAgIHZtLiRlbWl0KCdob29rOicgKyBob29rKTtcbiAgfVxuICBwb3BUYXJnZXQoKTtcbn1cblxuLyogICovXG5cbmNvbnN0IE1BWF9VUERBVEVfQ09VTlQgPSAxMDA7XG5cbmNvbnN0IHF1ZXVlID0gW107XG5jb25zdCBhY3RpdmF0ZWRDaGlsZHJlbiA9IFtdO1xubGV0IGhhcyA9IHt9O1xubGV0IGNpcmN1bGFyID0ge307XG5sZXQgd2FpdGluZyA9IGZhbHNlO1xubGV0IGZsdXNoaW5nID0gZmFsc2U7XG5sZXQgaW5kZXggPSAwO1xuXG4vKipcbiAqIFJlc2V0IHRoZSBzY2hlZHVsZXIncyBzdGF0ZS5cbiAqL1xuZnVuY3Rpb24gcmVzZXRTY2hlZHVsZXJTdGF0ZSAoKSB7XG4gIGluZGV4ID0gcXVldWUubGVuZ3RoID0gYWN0aXZhdGVkQ2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgaGFzID0ge307XG4gIHtcbiAgICBjaXJjdWxhciA9IHt9O1xuICB9XG4gIHdhaXRpbmcgPSBmbHVzaGluZyA9IGZhbHNlO1xufVxuXG4vLyBBc3luYyBlZGdlIGNhc2UgIzY1NjYgcmVxdWlyZXMgc2F2aW5nIHRoZSB0aW1lc3RhbXAgd2hlbiBldmVudCBsaXN0ZW5lcnMgYXJlXG4vLyBhdHRhY2hlZC4gSG93ZXZlciwgY2FsbGluZyBwZXJmb3JtYW5jZS5ub3coKSBoYXMgYSBwZXJmIG92ZXJoZWFkIGVzcGVjaWFsbHlcbi8vIGlmIHRoZSBwYWdlIGhhcyB0aG91c2FuZHMgb2YgZXZlbnQgbGlzdGVuZXJzLiBJbnN0ZWFkLCB3ZSB0YWtlIGEgdGltZXN0YW1wXG4vLyBldmVyeSB0aW1lIHRoZSBzY2hlZHVsZXIgZmx1c2hlcyBhbmQgdXNlIHRoYXQgZm9yIGFsbCBldmVudCBsaXN0ZW5lcnNcbi8vIGF0dGFjaGVkIGR1cmluZyB0aGF0IGZsdXNoLlxubGV0IGN1cnJlbnRGbHVzaFRpbWVzdGFtcCA9IDA7XG5cbi8vIEFzeW5jIGVkZ2UgY2FzZSBmaXggcmVxdWlyZXMgc3RvcmluZyBhbiBldmVudCBsaXN0ZW5lcidzIGF0dGFjaCB0aW1lc3RhbXAuXG5sZXQgZ2V0Tm93ID0gRGF0ZS5ub3c7XG5cbi8vIERldGVybWluZSB3aGF0IGV2ZW50IHRpbWVzdGFtcCB0aGUgYnJvd3NlciBpcyB1c2luZy4gQW5ub3lpbmdseSwgdGhlXG4vLyB0aW1lc3RhbXAgY2FuIGVpdGhlciBiZSBoaS1yZXMgKHJlbGF0aXZlIHRvIHBhZ2UgbG9hZCkgb3IgbG93LXJlc1xuLy8gKHJlbGF0aXZlIHRvIFVOSVggZXBvY2gpLCBzbyBpbiBvcmRlciB0byBjb21wYXJlIHRpbWUgd2UgaGF2ZSB0byB1c2UgdGhlXG4vLyBzYW1lIHRpbWVzdGFtcCB0eXBlIHdoZW4gc2F2aW5nIHRoZSBmbHVzaCB0aW1lc3RhbXAuXG5pZiAoaW5Ccm93c2VyICYmIGdldE5vdygpID4gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50JykudGltZVN0YW1wKSB7XG4gIC8vIGlmIHRoZSBsb3ctcmVzIHRpbWVzdGFtcCB3aGljaCBpcyBiaWdnZXIgdGhhbiB0aGUgZXZlbnQgdGltZXN0YW1wXG4gIC8vICh3aGljaCBpcyBldmFsdWF0ZWQgQUZURVIpIGl0IG1lYW5zIHRoZSBldmVudCBpcyB1c2luZyBhIGhpLXJlcyB0aW1lc3RhbXAsXG4gIC8vIGFuZCB3ZSBuZWVkIHRvIHVzZSB0aGUgaGktcmVzIHZlcnNpb24gZm9yIGV2ZW50IGxpc3RlbmVycyBhcyB3ZWxsLlxuICBnZXROb3cgPSAoKSA9PiBwZXJmb3JtYW5jZS5ub3coKTtcbn1cblxuLyoqXG4gKiBGbHVzaCBib3RoIHF1ZXVlcyBhbmQgcnVuIHRoZSB3YXRjaGVycy5cbiAqL1xuZnVuY3Rpb24gZmx1c2hTY2hlZHVsZXJRdWV1ZSAoKSB7XG4gIGN1cnJlbnRGbHVzaFRpbWVzdGFtcCA9IGdldE5vdygpO1xuICBmbHVzaGluZyA9IHRydWU7XG4gIGxldCB3YXRjaGVyLCBpZDtcblxuICAvLyBTb3J0IHF1ZXVlIGJlZm9yZSBmbHVzaC5cbiAgLy8gVGhpcyBlbnN1cmVzIHRoYXQ6XG4gIC8vIDEuIENvbXBvbmVudHMgYXJlIHVwZGF0ZWQgZnJvbSBwYXJlbnQgdG8gY2hpbGQuIChiZWNhdXNlIHBhcmVudCBpcyBhbHdheXNcbiAgLy8gICAgY3JlYXRlZCBiZWZvcmUgdGhlIGNoaWxkKVxuICAvLyAyLiBBIGNvbXBvbmVudCdzIHVzZXIgd2F0Y2hlcnMgYXJlIHJ1biBiZWZvcmUgaXRzIHJlbmRlciB3YXRjaGVyIChiZWNhdXNlXG4gIC8vICAgIHVzZXIgd2F0Y2hlcnMgYXJlIGNyZWF0ZWQgYmVmb3JlIHRoZSByZW5kZXIgd2F0Y2hlcilcbiAgLy8gMy4gSWYgYSBjb21wb25lbnQgaXMgZGVzdHJveWVkIGR1cmluZyBhIHBhcmVudCBjb21wb25lbnQncyB3YXRjaGVyIHJ1bixcbiAgLy8gICAgaXRzIHdhdGNoZXJzIGNhbiBiZSBza2lwcGVkLlxuICBxdWV1ZS5zb3J0KChhLCBiKSA9PiBhLmlkIC0gYi5pZCk7XG5cbiAgLy8gZG8gbm90IGNhY2hlIGxlbmd0aCBiZWNhdXNlIG1vcmUgd2F0Y2hlcnMgbWlnaHQgYmUgcHVzaGVkXG4gIC8vIGFzIHdlIHJ1biBleGlzdGluZyB3YXRjaGVyc1xuICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBxdWV1ZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICB3YXRjaGVyID0gcXVldWVbaW5kZXhdO1xuICAgIGlmICh3YXRjaGVyLmJlZm9yZSkge1xuICAgICAgd2F0Y2hlci5iZWZvcmUoKTtcbiAgICB9XG4gICAgaWQgPSB3YXRjaGVyLmlkO1xuICAgIGhhc1tpZF0gPSBudWxsO1xuICAgIHdhdGNoZXIucnVuKCk7XG4gICAgLy8gaW4gZGV2IGJ1aWxkLCBjaGVjayBhbmQgc3RvcCBjaXJjdWxhciB1cGRhdGVzLlxuICAgIGlmIChoYXNbaWRdICE9IG51bGwpIHtcbiAgICAgIGNpcmN1bGFyW2lkXSA9IChjaXJjdWxhcltpZF0gfHwgMCkgKyAxO1xuICAgICAgaWYgKGNpcmN1bGFyW2lkXSA+IE1BWF9VUERBVEVfQ09VTlQpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnWW91IG1heSBoYXZlIGFuIGluZmluaXRlIHVwZGF0ZSBsb29wICcgKyAoXG4gICAgICAgICAgICB3YXRjaGVyLnVzZXJcbiAgICAgICAgICAgICAgPyBgaW4gd2F0Y2hlciB3aXRoIGV4cHJlc3Npb24gXCIke3dhdGNoZXIuZXhwcmVzc2lvbn1cImBcbiAgICAgICAgICAgICAgOiBgaW4gYSBjb21wb25lbnQgcmVuZGVyIGZ1bmN0aW9uLmBcbiAgICAgICAgICApLFxuICAgICAgICAgIHdhdGNoZXIudm1cbiAgICAgICAgKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBrZWVwIGNvcGllcyBvZiBwb3N0IHF1ZXVlcyBiZWZvcmUgcmVzZXR0aW5nIHN0YXRlXG4gIGNvbnN0IGFjdGl2YXRlZFF1ZXVlID0gYWN0aXZhdGVkQ2hpbGRyZW4uc2xpY2UoKTtcbiAgY29uc3QgdXBkYXRlZFF1ZXVlID0gcXVldWUuc2xpY2UoKTtcblxuICByZXNldFNjaGVkdWxlclN0YXRlKCk7XG5cbiAgLy8gY2FsbCBjb21wb25lbnQgdXBkYXRlZCBhbmQgYWN0aXZhdGVkIGhvb2tzXG4gIGNhbGxBY3RpdmF0ZWRIb29rcyhhY3RpdmF0ZWRRdWV1ZSk7XG4gIGNhbGxVcGRhdGVkSG9va3ModXBkYXRlZFF1ZXVlKTtcblxuICAvLyBkZXZ0b29sIGhvb2tcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChkZXZ0b29scyAmJiBjb25maWcuZGV2dG9vbHMpIHtcbiAgICBkZXZ0b29scy5lbWl0KCdmbHVzaCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGNhbGxVcGRhdGVkSG9va3MgKHF1ZXVlKSB7XG4gIGxldCBpID0gcXVldWUubGVuZ3RoO1xuICB3aGlsZSAoaS0tKSB7XG4gICAgY29uc3Qgd2F0Y2hlciA9IHF1ZXVlW2ldO1xuICAgIGNvbnN0IHZtID0gd2F0Y2hlci52bTtcbiAgICBpZiAodm0uX3dhdGNoZXIgPT09IHdhdGNoZXIgJiYgdm0uX2lzTW91bnRlZCAmJiAhdm0uX2lzRGVzdHJveWVkKSB7XG4gICAgICBjYWxsSG9vayh2bSwgJ3VwZGF0ZWQnKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBRdWV1ZSBhIGtlcHQtYWxpdmUgY29tcG9uZW50IHRoYXQgd2FzIGFjdGl2YXRlZCBkdXJpbmcgcGF0Y2guXG4gKiBUaGUgcXVldWUgd2lsbCBiZSBwcm9jZXNzZWQgYWZ0ZXIgdGhlIGVudGlyZSB0cmVlIGhhcyBiZWVuIHBhdGNoZWQuXG4gKi9cbmZ1bmN0aW9uIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50ICh2bSkge1xuICAvLyBzZXR0aW5nIF9pbmFjdGl2ZSB0byBmYWxzZSBoZXJlIHNvIHRoYXQgYSByZW5kZXIgZnVuY3Rpb24gY2FuXG4gIC8vIHJlbHkgb24gY2hlY2tpbmcgd2hldGhlciBpdCdzIGluIGFuIGluYWN0aXZlIHRyZWUgKGUuZy4gcm91dGVyLXZpZXcpXG4gIHZtLl9pbmFjdGl2ZSA9IGZhbHNlO1xuICBhY3RpdmF0ZWRDaGlsZHJlbi5wdXNoKHZtKTtcbn1cblxuZnVuY3Rpb24gY2FsbEFjdGl2YXRlZEhvb2tzIChxdWV1ZSkge1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgcXVldWVbaV0uX2luYWN0aXZlID0gdHJ1ZTtcbiAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KHF1ZXVlW2ldLCB0cnVlIC8qIHRydWUgKi8pO1xuICB9XG59XG5cbi8qKlxuICogUHVzaCBhIHdhdGNoZXIgaW50byB0aGUgd2F0Y2hlciBxdWV1ZS5cbiAqIEpvYnMgd2l0aCBkdXBsaWNhdGUgSURzIHdpbGwgYmUgc2tpcHBlZCB1bmxlc3MgaXQnc1xuICogcHVzaGVkIHdoZW4gdGhlIHF1ZXVlIGlzIGJlaW5nIGZsdXNoZWQuXG4gKi9cbmZ1bmN0aW9uIHF1ZXVlV2F0Y2hlciAod2F0Y2hlcikge1xuICBjb25zdCBpZCA9IHdhdGNoZXIuaWQ7XG4gIGlmIChoYXNbaWRdID09IG51bGwpIHtcbiAgICBoYXNbaWRdID0gdHJ1ZTtcbiAgICBpZiAoIWZsdXNoaW5nKSB7XG4gICAgICBxdWV1ZS5wdXNoKHdhdGNoZXIpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBpZiBhbHJlYWR5IGZsdXNoaW5nLCBzcGxpY2UgdGhlIHdhdGNoZXIgYmFzZWQgb24gaXRzIGlkXG4gICAgICAvLyBpZiBhbHJlYWR5IHBhc3QgaXRzIGlkLCBpdCB3aWxsIGJlIHJ1biBuZXh0IGltbWVkaWF0ZWx5LlxuICAgICAgbGV0IGkgPSBxdWV1ZS5sZW5ndGggLSAxO1xuICAgICAgd2hpbGUgKGkgPiBpbmRleCAmJiBxdWV1ZVtpXS5pZCA+IHdhdGNoZXIuaWQpIHtcbiAgICAgICAgaS0tO1xuICAgICAgfVxuICAgICAgcXVldWUuc3BsaWNlKGkgKyAxLCAwLCB3YXRjaGVyKTtcbiAgICB9XG4gICAgLy8gcXVldWUgdGhlIGZsdXNoXG4gICAgaWYgKCF3YWl0aW5nKSB7XG4gICAgICB3YWl0aW5nID0gdHJ1ZTtcblxuICAgICAgaWYgKCFjb25maWcuYXN5bmMpIHtcbiAgICAgICAgZmx1c2hTY2hlZHVsZXJRdWV1ZSgpO1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIG5leHRUaWNrKGZsdXNoU2NoZWR1bGVyUXVldWUpO1xuICAgIH1cbiAgfVxufVxuXG4vKiAgKi9cblxuXG5cbmxldCB1aWQkMiA9IDA7XG5cbi8qKlxuICogQSB3YXRjaGVyIHBhcnNlcyBhbiBleHByZXNzaW9uLCBjb2xsZWN0cyBkZXBlbmRlbmNpZXMsXG4gKiBhbmQgZmlyZXMgY2FsbGJhY2sgd2hlbiB0aGUgZXhwcmVzc2lvbiB2YWx1ZSBjaGFuZ2VzLlxuICogVGhpcyBpcyB1c2VkIGZvciBib3RoIHRoZSAkd2F0Y2goKSBhcGkgYW5kIGRpcmVjdGl2ZXMuXG4gKi9cbmNsYXNzIFdhdGNoZXIge1xuICBcbiAgXG4gIFxuICBcbiAgXG4gIFxuICBcbiAgXG4gIFxuICBcbiAgXG4gIFxuICBcbiAgXG4gIFxuICBcbiAgXG5cbiAgY29uc3RydWN0b3IgKFxuICAgIHZtLFxuICAgIGV4cE9yRm4sXG4gICAgY2IsXG4gICAgb3B0aW9ucyxcbiAgICBpc1JlbmRlcldhdGNoZXJcbiAgKSB7XG4gICAgdGhpcy52bSA9IHZtO1xuICAgIGlmIChpc1JlbmRlcldhdGNoZXIpIHtcbiAgICAgIHZtLl93YXRjaGVyID0gdGhpcztcbiAgICB9XG4gICAgdm0uX3dhdGNoZXJzLnB1c2godGhpcyk7XG4gICAgLy8gb3B0aW9uc1xuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICB0aGlzLmRlZXAgPSAhIW9wdGlvbnMuZGVlcDtcbiAgICAgIHRoaXMudXNlciA9ICEhb3B0aW9ucy51c2VyO1xuICAgICAgdGhpcy5sYXp5ID0gISFvcHRpb25zLmxhenk7XG4gICAgICB0aGlzLnN5bmMgPSAhIW9wdGlvbnMuc3luYztcbiAgICAgIHRoaXMuYmVmb3JlID0gb3B0aW9ucy5iZWZvcmU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGVlcCA9IHRoaXMudXNlciA9IHRoaXMubGF6eSA9IHRoaXMuc3luYyA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLmNiID0gY2I7XG4gICAgdGhpcy5pZCA9ICsrdWlkJDI7IC8vIHVpZCBmb3IgYmF0Y2hpbmdcbiAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gICAgdGhpcy5kaXJ0eSA9IHRoaXMubGF6eTsgLy8gZm9yIGxhenkgd2F0Y2hlcnNcbiAgICB0aGlzLmRlcHMgPSBbXTtcbiAgICB0aGlzLm5ld0RlcHMgPSBbXTtcbiAgICB0aGlzLmRlcElkcyA9IG5ldyBfU2V0KCk7XG4gICAgdGhpcy5uZXdEZXBJZHMgPSBuZXcgX1NldCgpO1xuICAgIHRoaXMuZXhwcmVzc2lvbiA9IGV4cE9yRm4udG9TdHJpbmcoKTtcbiAgICAvLyBwYXJzZSBleHByZXNzaW9uIGZvciBnZXR0ZXJcbiAgICBpZiAodHlwZW9mIGV4cE9yRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMuZ2V0dGVyID0gZXhwT3JGbjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5nZXR0ZXIgPSBwYXJzZVBhdGgoZXhwT3JGbik7XG4gICAgICBpZiAoIXRoaXMuZ2V0dGVyKSB7XG4gICAgICAgIHRoaXMuZ2V0dGVyID0gbm9vcDtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBgRmFpbGVkIHdhdGNoaW5nIHBhdGg6IFwiJHtleHBPckZufVwiIGAgK1xuICAgICAgICAgICdXYXRjaGVyIG9ubHkgYWNjZXB0cyBzaW1wbGUgZG90LWRlbGltaXRlZCBwYXRocy4gJyArXG4gICAgICAgICAgJ0ZvciBmdWxsIGNvbnRyb2wsIHVzZSBhIGZ1bmN0aW9uIGluc3RlYWQuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnZhbHVlID0gdGhpcy5sYXp5XG4gICAgICA/IHVuZGVmaW5lZFxuICAgICAgOiB0aGlzLmdldCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEV2YWx1YXRlIHRoZSBnZXR0ZXIsIGFuZCByZS1jb2xsZWN0IGRlcGVuZGVuY2llcy5cbiAgICovXG4gIGdldCAoKSB7XG4gICAgcHVzaFRhcmdldCh0aGlzKTtcbiAgICBsZXQgdmFsdWU7XG4gICAgY29uc3Qgdm0gPSB0aGlzLnZtO1xuICAgIHRyeSB7XG4gICAgICB2YWx1ZSA9IHRoaXMuZ2V0dGVyLmNhbGwodm0sIHZtKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCBgZ2V0dGVyIGZvciB3YXRjaGVyIFwiJHt0aGlzLmV4cHJlc3Npb259XCJgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IGVcbiAgICAgIH1cbiAgICB9IGZpbmFsbHkge1xuICAgICAgLy8gXCJ0b3VjaFwiIGV2ZXJ5IHByb3BlcnR5IHNvIHRoZXkgYXJlIGFsbCB0cmFja2VkIGFzXG4gICAgICAvLyBkZXBlbmRlbmNpZXMgZm9yIGRlZXAgd2F0Y2hpbmdcbiAgICAgIGlmICh0aGlzLmRlZXApIHtcbiAgICAgICAgdHJhdmVyc2UodmFsdWUpO1xuICAgICAgfVxuICAgICAgcG9wVGFyZ2V0KCk7XG4gICAgICB0aGlzLmNsZWFudXBEZXBzKCk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIGRlcGVuZGVuY3kgdG8gdGhpcyBkaXJlY3RpdmUuXG4gICAqL1xuICBhZGREZXAgKGRlcCkge1xuICAgIGNvbnN0IGlkID0gZGVwLmlkO1xuICAgIGlmICghdGhpcy5uZXdEZXBJZHMuaGFzKGlkKSkge1xuICAgICAgdGhpcy5uZXdEZXBJZHMuYWRkKGlkKTtcbiAgICAgIHRoaXMubmV3RGVwcy5wdXNoKGRlcCk7XG4gICAgICBpZiAoIXRoaXMuZGVwSWRzLmhhcyhpZCkpIHtcbiAgICAgICAgZGVwLmFkZFN1Yih0aGlzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2xlYW4gdXAgZm9yIGRlcGVuZGVuY3kgY29sbGVjdGlvbi5cbiAgICovXG4gIGNsZWFudXBEZXBzICgpIHtcbiAgICBsZXQgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgY29uc3QgZGVwID0gdGhpcy5kZXBzW2ldO1xuICAgICAgaWYgKCF0aGlzLm5ld0RlcElkcy5oYXMoZGVwLmlkKSkge1xuICAgICAgICBkZXAucmVtb3ZlU3ViKHRoaXMpO1xuICAgICAgfVxuICAgIH1cbiAgICBsZXQgdG1wID0gdGhpcy5kZXBJZHM7XG4gICAgdGhpcy5kZXBJZHMgPSB0aGlzLm5ld0RlcElkcztcbiAgICB0aGlzLm5ld0RlcElkcyA9IHRtcDtcbiAgICB0aGlzLm5ld0RlcElkcy5jbGVhcigpO1xuICAgIHRtcCA9IHRoaXMuZGVwcztcbiAgICB0aGlzLmRlcHMgPSB0aGlzLm5ld0RlcHM7XG4gICAgdGhpcy5uZXdEZXBzID0gdG1wO1xuICAgIHRoaXMubmV3RGVwcy5sZW5ndGggPSAwO1xuICB9XG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZXIgaW50ZXJmYWNlLlxuICAgKiBXaWxsIGJlIGNhbGxlZCB3aGVuIGEgZGVwZW5kZW5jeSBjaGFuZ2VzLlxuICAgKi9cbiAgdXBkYXRlICgpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmICh0aGlzLmxhenkpIHtcbiAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zeW5jKSB7XG4gICAgICB0aGlzLnJ1bigpO1xuICAgIH0gZWxzZSB7XG4gICAgICBxdWV1ZVdhdGNoZXIodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNjaGVkdWxlciBqb2IgaW50ZXJmYWNlLlxuICAgKiBXaWxsIGJlIGNhbGxlZCBieSB0aGUgc2NoZWR1bGVyLlxuICAgKi9cbiAgcnVuICgpIHtcbiAgICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5nZXQoKTtcbiAgICAgIGlmIChcbiAgICAgICAgdmFsdWUgIT09IHRoaXMudmFsdWUgfHxcbiAgICAgICAgLy8gRGVlcCB3YXRjaGVycyBhbmQgd2F0Y2hlcnMgb24gT2JqZWN0L0FycmF5cyBzaG91bGQgZmlyZSBldmVuXG4gICAgICAgIC8vIHdoZW4gdGhlIHZhbHVlIGlzIHRoZSBzYW1lLCBiZWNhdXNlIHRoZSB2YWx1ZSBtYXlcbiAgICAgICAgLy8gaGF2ZSBtdXRhdGVkLlxuICAgICAgICBpc09iamVjdCh2YWx1ZSkgfHxcbiAgICAgICAgdGhpcy5kZWVwXG4gICAgICApIHtcbiAgICAgICAgLy8gc2V0IG5ldyB2YWx1ZVxuICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHRoaXMudXNlcikge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICBoYW5kbGVFcnJvcihlLCB0aGlzLnZtLCBgY2FsbGJhY2sgZm9yIHdhdGNoZXIgXCIke3RoaXMuZXhwcmVzc2lvbn1cImApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBFdmFsdWF0ZSB0aGUgdmFsdWUgb2YgdGhlIHdhdGNoZXIuXG4gICAqIFRoaXMgb25seSBnZXRzIGNhbGxlZCBmb3IgbGF6eSB3YXRjaGVycy5cbiAgICovXG4gIGV2YWx1YXRlICgpIHtcbiAgICB0aGlzLnZhbHVlID0gdGhpcy5nZXQoKTtcbiAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gIH1cblxuICAvKipcbiAgICogRGVwZW5kIG9uIGFsbCBkZXBzIGNvbGxlY3RlZCBieSB0aGlzIHdhdGNoZXIuXG4gICAqL1xuICBkZXBlbmQgKCkge1xuICAgIGxldCBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB0aGlzLmRlcHNbaV0uZGVwZW5kKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBzZWxmIGZyb20gYWxsIGRlcGVuZGVuY2llcycgc3Vic2NyaWJlciBsaXN0LlxuICAgKi9cbiAgdGVhcmRvd24gKCkge1xuICAgIGlmICh0aGlzLmFjdGl2ZSkge1xuICAgICAgLy8gcmVtb3ZlIHNlbGYgZnJvbSB2bSdzIHdhdGNoZXIgbGlzdFxuICAgICAgLy8gdGhpcyBpcyBhIHNvbWV3aGF0IGV4cGVuc2l2ZSBvcGVyYXRpb24gc28gd2Ugc2tpcCBpdFxuICAgICAgLy8gaWYgdGhlIHZtIGlzIGJlaW5nIGRlc3Ryb3llZC5cbiAgICAgIGlmICghdGhpcy52bS5faXNCZWluZ0Rlc3Ryb3llZCkge1xuICAgICAgICByZW1vdmUodGhpcy52bS5fd2F0Y2hlcnMsIHRoaXMpO1xuICAgICAgfVxuICAgICAgbGV0IGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICB0aGlzLmRlcHNbaV0ucmVtb3ZlU3ViKHRoaXMpO1xuICAgICAgfVxuICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbmNvbnN0IHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbiA9IHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgY29uZmlndXJhYmxlOiB0cnVlLFxuICBnZXQ6IG5vb3AsXG4gIHNldDogbm9vcFxufTtcblxuZnVuY3Rpb24gcHJveHkgKHRhcmdldCwgc291cmNlS2V5LCBrZXkpIHtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IGZ1bmN0aW9uIHByb3h5R2V0dGVyICgpIHtcbiAgICByZXR1cm4gdGhpc1tzb3VyY2VLZXldW2tleV1cbiAgfTtcbiAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uIHByb3h5U2V0dGVyICh2YWwpIHtcbiAgICB0aGlzW3NvdXJjZUtleV1ba2V5XSA9IHZhbDtcbiAgfTtcbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBpbml0U3RhdGUgKHZtKSB7XG4gIHZtLl93YXRjaGVycyA9IFtdO1xuICBjb25zdCBvcHRzID0gdm0uJG9wdGlvbnM7XG4gIGlmIChvcHRzLnByb3BzKSBpbml0UHJvcHModm0sIG9wdHMucHJvcHMpO1xuICBpZiAob3B0cy5tZXRob2RzKSBpbml0TWV0aG9kcyh2bSwgb3B0cy5tZXRob2RzKTtcbiAgaWYgKG9wdHMuZGF0YSkge1xuICAgIGluaXREYXRhKHZtKTtcbiAgfSBlbHNlIHtcbiAgICBvYnNlcnZlKHZtLl9kYXRhID0ge30sIHRydWUgLyogYXNSb290RGF0YSAqLyk7XG4gIH1cbiAgaWYgKG9wdHMuY29tcHV0ZWQpIGluaXRDb21wdXRlZCh2bSwgb3B0cy5jb21wdXRlZCk7XG4gIGlmIChvcHRzLndhdGNoICYmIG9wdHMud2F0Y2ggIT09IG5hdGl2ZVdhdGNoKSB7XG4gICAgaW5pdFdhdGNoKHZtLCBvcHRzLndhdGNoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0UHJvcHMgKHZtLCBwcm9wc09wdGlvbnMpIHtcbiAgY29uc3QgcHJvcHNEYXRhID0gdm0uJG9wdGlvbnMucHJvcHNEYXRhIHx8IHt9O1xuICBjb25zdCBwcm9wcyA9IHZtLl9wcm9wcyA9IHt9O1xuICAvLyBjYWNoZSBwcm9wIGtleXMgc28gdGhhdCBmdXR1cmUgcHJvcHMgdXBkYXRlcyBjYW4gaXRlcmF0ZSB1c2luZyBBcnJheVxuICAvLyBpbnN0ZWFkIG9mIGR5bmFtaWMgb2JqZWN0IGtleSBlbnVtZXJhdGlvbi5cbiAgY29uc3Qga2V5cyA9IHZtLiRvcHRpb25zLl9wcm9wS2V5cyA9IFtdO1xuICBjb25zdCBpc1Jvb3QgPSAhdm0uJHBhcmVudDtcbiAgLy8gcm9vdCBpbnN0YW5jZSBwcm9wcyBzaG91bGQgYmUgY29udmVydGVkXG4gIGlmICghaXNSb290KSB7XG4gICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgfVxuICBmb3IgKGNvbnN0IGtleSBpbiBwcm9wc09wdGlvbnMpIHtcbiAgICBrZXlzLnB1c2goa2V5KTtcbiAgICBjb25zdCB2YWx1ZSA9IHZhbGlkYXRlUHJvcChrZXksIHByb3BzT3B0aW9ucywgcHJvcHNEYXRhLCB2bSk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICB7XG4gICAgICBjb25zdCBoeXBoZW5hdGVkS2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICBpZiAoaXNSZXNlcnZlZEF0dHJpYnV0ZShoeXBoZW5hdGVkS2V5KSB8fFxuICAgICAgICAgIGNvbmZpZy5pc1Jlc2VydmVkQXR0cihoeXBoZW5hdGVkS2V5KSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIGBcIiR7aHlwaGVuYXRlZEtleX1cIiBpcyBhIHJlc2VydmVkIGF0dHJpYnV0ZSBhbmQgY2Fubm90IGJlIHVzZWQgYXMgY29tcG9uZW50IHByb3AuYCxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgZGVmaW5lUmVhY3RpdmUkJDEocHJvcHMsIGtleSwgdmFsdWUsICgpID0+IHtcbiAgICAgICAgaWYgKCFpc1Jvb3QgJiYgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICBgQXZvaWQgbXV0YXRpbmcgYSBwcm9wIGRpcmVjdGx5IHNpbmNlIHRoZSB2YWx1ZSB3aWxsIGJlIGAgK1xuICAgICAgICAgICAgYG92ZXJ3cml0dGVuIHdoZW5ldmVyIHRoZSBwYXJlbnQgY29tcG9uZW50IHJlLXJlbmRlcnMuIGAgK1xuICAgICAgICAgICAgYEluc3RlYWQsIHVzZSBhIGRhdGEgb3IgY29tcHV0ZWQgcHJvcGVydHkgYmFzZWQgb24gdGhlIHByb3AncyBgICtcbiAgICAgICAgICAgIGB2YWx1ZS4gUHJvcCBiZWluZyBtdXRhdGVkOiBcIiR7a2V5fVwiYCxcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICAgIC8vIHN0YXRpYyBwcm9wcyBhcmUgYWxyZWFkeSBwcm94aWVkIG9uIHRoZSBjb21wb25lbnQncyBwcm90b3R5cGVcbiAgICAvLyBkdXJpbmcgVnVlLmV4dGVuZCgpLiBXZSBvbmx5IG5lZWQgdG8gcHJveHkgcHJvcHMgZGVmaW5lZCBhdFxuICAgIC8vIGluc3RhbnRpYXRpb24gaGVyZS5cbiAgICBpZiAoIShrZXkgaW4gdm0pKSB7XG4gICAgICBwcm94eSh2bSwgYF9wcm9wc2AsIGtleSk7XG4gICAgfVxuICB9XG4gIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbn1cblxuZnVuY3Rpb24gaW5pdERhdGEgKHZtKSB7XG4gIGxldCBkYXRhID0gdm0uJG9wdGlvbnMuZGF0YTtcbiAgZGF0YSA9IHZtLl9kYXRhID0gdHlwZW9mIGRhdGEgPT09ICdmdW5jdGlvbidcbiAgICA/IGdldERhdGEoZGF0YSwgdm0pXG4gICAgOiBkYXRhIHx8IHt9O1xuICBpZiAoIWlzUGxhaW5PYmplY3QoZGF0YSkpIHtcbiAgICBkYXRhID0ge307XG4gICAgd2FybihcbiAgICAgICdkYXRhIGZ1bmN0aW9ucyBzaG91bGQgcmV0dXJuIGFuIG9iamVjdDpcXG4nICtcbiAgICAgICdodHRwczovL3Z1ZWpzLm9yZy92Mi9ndWlkZS9jb21wb25lbnRzLmh0bWwjZGF0YS1NdXN0LUJlLWEtRnVuY3Rpb24nLFxuICAgICAgdm1cbiAgICApO1xuICB9XG4gIC8vIHByb3h5IGRhdGEgb24gaW5zdGFuY2VcbiAgY29uc3Qga2V5cyA9IE9iamVjdC5rZXlzKGRhdGEpO1xuICBjb25zdCBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICBjb25zdCBtZXRob2RzID0gdm0uJG9wdGlvbnMubWV0aG9kcztcbiAgbGV0IGkgPSBrZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGktLSkge1xuICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAge1xuICAgICAgaWYgKG1ldGhvZHMgJiYgaGFzT3duKG1ldGhvZHMsIGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBgTWV0aG9kIFwiJHtrZXl9XCIgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIGFzIGEgZGF0YSBwcm9wZXJ0eS5gLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChwcm9wcyAmJiBoYXNPd24ocHJvcHMsIGtleSkpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIGBUaGUgZGF0YSBwcm9wZXJ0eSBcIiR7a2V5fVwiIGlzIGFscmVhZHkgZGVjbGFyZWQgYXMgYSBwcm9wLiBgICtcbiAgICAgICAgYFVzZSBwcm9wIGRlZmF1bHQgdmFsdWUgaW5zdGVhZC5gLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKCFpc1Jlc2VydmVkKGtleSkpIHtcbiAgICAgIHByb3h5KHZtLCBgX2RhdGFgLCBrZXkpO1xuICAgIH1cbiAgfVxuICAvLyBvYnNlcnZlIGRhdGFcbiAgb2JzZXJ2ZShkYXRhLCB0cnVlIC8qIGFzUm9vdERhdGEgKi8pO1xufVxuXG5mdW5jdGlvbiBnZXREYXRhIChkYXRhLCB2bSkge1xuICAvLyAjNzU3MyBkaXNhYmxlIGRlcCBjb2xsZWN0aW9uIHdoZW4gaW52b2tpbmcgZGF0YSBnZXR0ZXJzXG4gIHB1c2hUYXJnZXQoKTtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZGF0YS5jYWxsKHZtLCB2bSlcbiAgfSBjYXRjaCAoZSkge1xuICAgIGhhbmRsZUVycm9yKGUsIHZtLCBgZGF0YSgpYCk7XG4gICAgcmV0dXJuIHt9XG4gIH0gZmluYWxseSB7XG4gICAgcG9wVGFyZ2V0KCk7XG4gIH1cbn1cblxuY29uc3QgY29tcHV0ZWRXYXRjaGVyT3B0aW9ucyA9IHsgbGF6eTogdHJ1ZSB9O1xuXG5mdW5jdGlvbiBpbml0Q29tcHV0ZWQgKHZtLCBjb21wdXRlZCkge1xuICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgY29uc3Qgd2F0Y2hlcnMgPSB2bS5fY29tcHV0ZWRXYXRjaGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIC8vIGNvbXB1dGVkIHByb3BlcnRpZXMgYXJlIGp1c3QgZ2V0dGVycyBkdXJpbmcgU1NSXG4gIGNvbnN0IGlzU1NSID0gaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcblxuICBmb3IgKGNvbnN0IGtleSBpbiBjb21wdXRlZCkge1xuICAgIGNvbnN0IHVzZXJEZWYgPSBjb21wdXRlZFtrZXldO1xuICAgIGNvbnN0IGdldHRlciA9IHR5cGVvZiB1c2VyRGVmID09PSAnZnVuY3Rpb24nID8gdXNlckRlZiA6IHVzZXJEZWYuZ2V0O1xuICAgIGlmIChnZXR0ZXIgPT0gbnVsbCkge1xuICAgICAgd2FybihcbiAgICAgICAgYEdldHRlciBpcyBtaXNzaW5nIGZvciBjb21wdXRlZCBwcm9wZXJ0eSBcIiR7a2V5fVwiLmAsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghaXNTU1IpIHtcbiAgICAgIC8vIGNyZWF0ZSBpbnRlcm5hbCB3YXRjaGVyIGZvciB0aGUgY29tcHV0ZWQgcHJvcGVydHkuXG4gICAgICB3YXRjaGVyc1trZXldID0gbmV3IFdhdGNoZXIoXG4gICAgICAgIHZtLFxuICAgICAgICBnZXR0ZXIgfHwgbm9vcCxcbiAgICAgICAgbm9vcCxcbiAgICAgICAgY29tcHV0ZWRXYXRjaGVyT3B0aW9uc1xuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBjb21wb25lbnQtZGVmaW5lZCBjb21wdXRlZCBwcm9wZXJ0aWVzIGFyZSBhbHJlYWR5IGRlZmluZWQgb24gdGhlXG4gICAgLy8gY29tcG9uZW50IHByb3RvdHlwZS4gV2Ugb25seSBuZWVkIHRvIGRlZmluZSBjb21wdXRlZCBwcm9wZXJ0aWVzIGRlZmluZWRcbiAgICAvLyBhdCBpbnN0YW50aWF0aW9uIGhlcmUuXG4gICAgaWYgKCEoa2V5IGluIHZtKSkge1xuICAgICAgZGVmaW5lQ29tcHV0ZWQodm0sIGtleSwgdXNlckRlZik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChrZXkgaW4gdm0uJGRhdGEpIHtcbiAgICAgICAgd2FybihgVGhlIGNvbXB1dGVkIHByb3BlcnR5IFwiJHtrZXl9XCIgaXMgYWxyZWFkeSBkZWZpbmVkIGluIGRhdGEuYCwgdm0pO1xuICAgICAgfSBlbHNlIGlmICh2bS4kb3B0aW9ucy5wcm9wcyAmJiBrZXkgaW4gdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICAgICAgd2FybihgVGhlIGNvbXB1dGVkIHByb3BlcnR5IFwiJHtrZXl9XCIgaXMgYWxyZWFkeSBkZWZpbmVkIGFzIGEgcHJvcC5gLCB2bSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGRlZmluZUNvbXB1dGVkIChcbiAgdGFyZ2V0LFxuICBrZXksXG4gIHVzZXJEZWZcbikge1xuICBjb25zdCBzaG91bGRDYWNoZSA9ICFpc1NlcnZlclJlbmRlcmluZygpO1xuICBpZiAodHlwZW9mIHVzZXJEZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uZ2V0ID0gc2hvdWxkQ2FjaGVcbiAgICAgID8gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIoa2V5KVxuICAgICAgOiBjcmVhdGVHZXR0ZXJJbnZva2VyKHVzZXJEZWYpO1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBub29wO1xuICB9IGVsc2Uge1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSB1c2VyRGVmLmdldFxuICAgICAgPyBzaG91bGRDYWNoZSAmJiB1c2VyRGVmLmNhY2hlICE9PSBmYWxzZVxuICAgICAgICA/IGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSlcbiAgICAgICAgOiBjcmVhdGVHZXR0ZXJJbnZva2VyKHVzZXJEZWYuZ2V0KVxuICAgICAgOiBub29wO1xuICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSB1c2VyRGVmLnNldCB8fCBub29wO1xuICB9XG4gIGlmIChzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID09PSBub29wKSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIGBDb21wdXRlZCBwcm9wZXJ0eSBcIiR7a2V5fVwiIHdhcyBhc3NpZ25lZCB0byBidXQgaXQgaGFzIG5vIHNldHRlci5gLFxuICAgICAgICB0aGlzXG4gICAgICApO1xuICAgIH07XG4gIH1cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21wdXRlZEdldHRlciAoa2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlciAoKSB7XG4gICAgY29uc3Qgd2F0Y2hlciA9IHRoaXMuX2NvbXB1dGVkV2F0Y2hlcnMgJiYgdGhpcy5fY29tcHV0ZWRXYXRjaGVyc1trZXldO1xuICAgIGlmICh3YXRjaGVyKSB7XG4gICAgICBpZiAod2F0Y2hlci5kaXJ0eSkge1xuICAgICAgICB3YXRjaGVyLmV2YWx1YXRlKCk7XG4gICAgICB9XG4gICAgICBpZiAoRGVwLnRhcmdldCkge1xuICAgICAgICB3YXRjaGVyLmRlcGVuZCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHdhdGNoZXIudmFsdWVcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlR2V0dGVySW52b2tlcihmbikge1xuICByZXR1cm4gZnVuY3Rpb24gY29tcHV0ZWRHZXR0ZXIgKCkge1xuICAgIHJldHVybiBmbi5jYWxsKHRoaXMsIHRoaXMpXG4gIH1cbn1cblxuZnVuY3Rpb24gaW5pdE1ldGhvZHMgKHZtLCBtZXRob2RzKSB7XG4gIGNvbnN0IHByb3BzID0gdm0uJG9wdGlvbnMucHJvcHM7XG4gIGZvciAoY29uc3Qga2V5IGluIG1ldGhvZHMpIHtcbiAgICB7XG4gICAgICBpZiAodHlwZW9mIG1ldGhvZHNba2V5XSAhPT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgIGBNZXRob2QgXCIke2tleX1cIiBoYXMgdHlwZSBcIiR7dHlwZW9mIG1ldGhvZHNba2V5XX1cIiBpbiB0aGUgY29tcG9uZW50IGRlZmluaXRpb24uIGAgK1xuICAgICAgICAgIGBEaWQgeW91IHJlZmVyZW5jZSB0aGUgZnVuY3Rpb24gY29ycmVjdGx5P2AsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChwcm9wcyAmJiBoYXNPd24ocHJvcHMsIGtleSkpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBgTWV0aG9kIFwiJHtrZXl9XCIgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkIGFzIGEgcHJvcC5gLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoKGtleSBpbiB2bSkgJiYgaXNSZXNlcnZlZChrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgYE1ldGhvZCBcIiR7a2V5fVwiIGNvbmZsaWN0cyB3aXRoIGFuIGV4aXN0aW5nIFZ1ZSBpbnN0YW5jZSBtZXRob2QuIGAgK1xuICAgICAgICAgIGBBdm9pZCBkZWZpbmluZyBjb21wb25lbnQgbWV0aG9kcyB0aGF0IHN0YXJ0IHdpdGggXyBvciAkLmBcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdm1ba2V5XSA9IHR5cGVvZiBtZXRob2RzW2tleV0gIT09ICdmdW5jdGlvbicgPyBub29wIDogYmluZChtZXRob2RzW2tleV0sIHZtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbml0V2F0Y2ggKHZtLCB3YXRjaCkge1xuICBmb3IgKGNvbnN0IGtleSBpbiB3YXRjaCkge1xuICAgIGNvbnN0IGhhbmRsZXIgPSB3YXRjaFtrZXldO1xuICAgIGlmIChBcnJheS5pc0FycmF5KGhhbmRsZXIpKSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGhhbmRsZXIubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY3JlYXRlV2F0Y2hlcih2bSwga2V5LCBoYW5kbGVyW2ldKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY3JlYXRlV2F0Y2hlcih2bSwga2V5LCBoYW5kbGVyKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlV2F0Y2hlciAoXG4gIHZtLFxuICBleHBPckZuLFxuICBoYW5kbGVyLFxuICBvcHRpb25zXG4pIHtcbiAgaWYgKGlzUGxhaW5PYmplY3QoaGFuZGxlcikpIHtcbiAgICBvcHRpb25zID0gaGFuZGxlcjtcbiAgICBoYW5kbGVyID0gaGFuZGxlci5oYW5kbGVyO1xuICB9XG4gIGlmICh0eXBlb2YgaGFuZGxlciA9PT0gJ3N0cmluZycpIHtcbiAgICBoYW5kbGVyID0gdm1baGFuZGxlcl07XG4gIH1cbiAgcmV0dXJuIHZtLiR3YXRjaChleHBPckZuLCBoYW5kbGVyLCBvcHRpb25zKVxufVxuXG5mdW5jdGlvbiBzdGF0ZU1peGluIChWdWUpIHtcbiAgLy8gZmxvdyBzb21laG93IGhhcyBwcm9ibGVtcyB3aXRoIGRpcmVjdGx5IGRlY2xhcmVkIGRlZmluaXRpb24gb2JqZWN0XG4gIC8vIHdoZW4gdXNpbmcgT2JqZWN0LmRlZmluZVByb3BlcnR5LCBzbyB3ZSBoYXZlIHRvIHByb2NlZHVyYWxseSBidWlsZCB1cFxuICAvLyB0aGUgb2JqZWN0IGhlcmUuXG4gIGNvbnN0IGRhdGFEZWYgPSB7fTtcbiAgZGF0YURlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9kYXRhIH07XG4gIGNvbnN0IHByb3BzRGVmID0ge307XG4gIHByb3BzRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX3Byb3BzIH07XG4gIHtcbiAgICBkYXRhRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdBdm9pZCByZXBsYWNpbmcgaW5zdGFuY2Ugcm9vdCAkZGF0YS4gJyArXG4gICAgICAgICdVc2UgbmVzdGVkIGRhdGEgcHJvcGVydGllcyBpbnN0ZWFkLicsXG4gICAgICAgIHRoaXNcbiAgICAgICk7XG4gICAgfTtcbiAgICBwcm9wc0RlZi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB3YXJuKGAkcHJvcHMgaXMgcmVhZG9ubHkuYCwgdGhpcyk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRkYXRhJywgZGF0YURlZik7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHByb3BzJywgcHJvcHNEZWYpO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJHNldCA9IHNldDtcbiAgVnVlLnByb3RvdHlwZS4kZGVsZXRlID0gZGVsO1xuXG4gIFZ1ZS5wcm90b3R5cGUuJHdhdGNoID0gZnVuY3Rpb24gKFxuICAgIGV4cE9yRm4sXG4gICAgY2IsXG4gICAgb3B0aW9uc1xuICApIHtcbiAgICBjb25zdCB2bSA9IHRoaXM7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QoY2IpKSB7XG4gICAgICByZXR1cm4gY3JlYXRlV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpXG4gICAgfVxuICAgIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICAgIG9wdGlvbnMudXNlciA9IHRydWU7XG4gICAgY29uc3Qgd2F0Y2hlciA9IG5ldyBXYXRjaGVyKHZtLCBleHBPckZuLCBjYiwgb3B0aW9ucyk7XG4gICAgaWYgKG9wdGlvbnMuaW1tZWRpYXRlKSB7XG4gICAgICB0cnkge1xuICAgICAgICBjYi5jYWxsKHZtLCB3YXRjaGVyLnZhbHVlKTtcbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGVycm9yLCB2bSwgYGNhbGxiYWNrIGZvciBpbW1lZGlhdGUgd2F0Y2hlciBcIiR7d2F0Y2hlci5leHByZXNzaW9ufVwiYCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmdW5jdGlvbiB1bndhdGNoRm4gKCkge1xuICAgICAgd2F0Y2hlci50ZWFyZG93bigpO1xuICAgIH1cbiAgfTtcbn1cblxuLyogICovXG5cbmxldCB1aWQkMyA9IDA7XG5cbmZ1bmN0aW9uIGluaXRNaXhpbiAoVnVlKSB7XG4gIFZ1ZS5wcm90b3R5cGUuX2luaXQgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuICAgIGNvbnN0IHZtID0gdGhpcztcbiAgICAvLyBhIHVpZFxuICAgIHZtLl91aWQgPSB1aWQkMysrO1xuXG4gICAgbGV0IHN0YXJ0VGFnLCBlbmRUYWc7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICBzdGFydFRhZyA9IGB2dWUtcGVyZi1zdGFydDoke3ZtLl91aWR9YDtcbiAgICAgIGVuZFRhZyA9IGB2dWUtcGVyZi1lbmQ6JHt2bS5fdWlkfWA7XG4gICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICB9XG5cbiAgICAvLyBhIGZsYWcgdG8gYXZvaWQgdGhpcyBiZWluZyBvYnNlcnZlZFxuICAgIHZtLl9pc1Z1ZSA9IHRydWU7XG4gICAgLy8gbWVyZ2Ugb3B0aW9uc1xuICAgIGlmIChvcHRpb25zICYmIG9wdGlvbnMuX2lzQ29tcG9uZW50KSB7XG4gICAgICAvLyBvcHRpbWl6ZSBpbnRlcm5hbCBjb21wb25lbnQgaW5zdGFudGlhdGlvblxuICAgICAgLy8gc2luY2UgZHluYW1pYyBvcHRpb25zIG1lcmdpbmcgaXMgcHJldHR5IHNsb3csIGFuZCBub25lIG9mIHRoZVxuICAgICAgLy8gaW50ZXJuYWwgY29tcG9uZW50IG9wdGlvbnMgbmVlZHMgc3BlY2lhbCB0cmVhdG1lbnQuXG4gICAgICBpbml0SW50ZXJuYWxDb21wb25lbnQodm0sIG9wdGlvbnMpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS4kb3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgICAgcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyh2bS5jb25zdHJ1Y3RvciksXG4gICAgICAgIG9wdGlvbnMgfHwge30sXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIHtcbiAgICAgIGluaXRQcm94eSh2bSk7XG4gICAgfVxuICAgIC8vIGV4cG9zZSByZWFsIHNlbGZcbiAgICB2bS5fc2VsZiA9IHZtO1xuICAgIGluaXRMaWZlY3ljbGUodm0pO1xuICAgIGluaXRFdmVudHModm0pO1xuICAgIGluaXRSZW5kZXIodm0pO1xuICAgIGNhbGxIb29rKHZtLCAnYmVmb3JlQ3JlYXRlJyk7XG4gICAgaW5pdEluamVjdGlvbnModm0pOyAvLyByZXNvbHZlIGluamVjdGlvbnMgYmVmb3JlIGRhdGEvcHJvcHNcbiAgICBpbml0U3RhdGUodm0pO1xuICAgIGluaXRQcm92aWRlKHZtKTsgLy8gcmVzb2x2ZSBwcm92aWRlIGFmdGVyIGRhdGEvcHJvcHNcbiAgICBjYWxsSG9vayh2bSwgJ2NyZWF0ZWQnKTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgdm0uX25hbWUgPSBmb3JtYXRDb21wb25lbnROYW1lKHZtLCBmYWxzZSk7XG4gICAgICBtYXJrKGVuZFRhZyk7XG4gICAgICBtZWFzdXJlKGB2dWUgJHt2bS5fbmFtZX0gaW5pdGAsIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgIH1cblxuICAgIGlmICh2bS4kb3B0aW9ucy5lbCkge1xuICAgICAgdm0uJG1vdW50KHZtLiRvcHRpb25zLmVsKTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIGluaXRJbnRlcm5hbENvbXBvbmVudCAodm0sIG9wdGlvbnMpIHtcbiAgY29uc3Qgb3B0cyA9IHZtLiRvcHRpb25zID0gT2JqZWN0LmNyZWF0ZSh2bS5jb25zdHJ1Y3Rvci5vcHRpb25zKTtcbiAgLy8gZG9pbmcgdGhpcyBiZWNhdXNlIGl0J3MgZmFzdGVyIHRoYW4gZHluYW1pYyBlbnVtZXJhdGlvbi5cbiAgY29uc3QgcGFyZW50Vm5vZGUgPSBvcHRpb25zLl9wYXJlbnRWbm9kZTtcbiAgb3B0cy5wYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgb3B0cy5fcGFyZW50Vm5vZGUgPSBwYXJlbnRWbm9kZTtcblxuICBjb25zdCB2bm9kZUNvbXBvbmVudE9wdGlvbnMgPSBwYXJlbnRWbm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBvcHRzLnByb3BzRGF0YSA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5wcm9wc0RhdGE7XG4gIG9wdHMuX3BhcmVudExpc3RlbmVycyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5saXN0ZW5lcnM7XG4gIG9wdHMuX3JlbmRlckNoaWxkcmVuID0gdm5vZGVDb21wb25lbnRPcHRpb25zLmNoaWxkcmVuO1xuICBvcHRzLl9jb21wb25lbnRUYWcgPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMudGFnO1xuXG4gIGlmIChvcHRpb25zLnJlbmRlcikge1xuICAgIG9wdHMucmVuZGVyID0gb3B0aW9ucy5yZW5kZXI7XG4gICAgb3B0cy5zdGF0aWNSZW5kZXJGbnMgPSBvcHRpb25zLnN0YXRpY1JlbmRlckZucztcbiAgfVxufVxuXG5mdW5jdGlvbiByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zIChDdG9yKSB7XG4gIGxldCBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICBpZiAoQ3Rvci5zdXBlcikge1xuICAgIGNvbnN0IHN1cGVyT3B0aW9ucyA9IHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMoQ3Rvci5zdXBlcik7XG4gICAgY29uc3QgY2FjaGVkU3VwZXJPcHRpb25zID0gQ3Rvci5zdXBlck9wdGlvbnM7XG4gICAgaWYgKHN1cGVyT3B0aW9ucyAhPT0gY2FjaGVkU3VwZXJPcHRpb25zKSB7XG4gICAgICAvLyBzdXBlciBvcHRpb24gY2hhbmdlZCxcbiAgICAgIC8vIG5lZWQgdG8gcmVzb2x2ZSBuZXcgb3B0aW9ucy5cbiAgICAgIEN0b3Iuc3VwZXJPcHRpb25zID0gc3VwZXJPcHRpb25zO1xuICAgICAgLy8gY2hlY2sgaWYgdGhlcmUgYXJlIGFueSBsYXRlLW1vZGlmaWVkL2F0dGFjaGVkIG9wdGlvbnMgKCM0OTc2KVxuICAgICAgY29uc3QgbW9kaWZpZWRPcHRpb25zID0gcmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyhDdG9yKTtcbiAgICAgIC8vIHVwZGF0ZSBiYXNlIGV4dGVuZCBvcHRpb25zXG4gICAgICBpZiAobW9kaWZpZWRPcHRpb25zKSB7XG4gICAgICAgIGV4dGVuZChDdG9yLmV4dGVuZE9wdGlvbnMsIG1vZGlmaWVkT3B0aW9ucyk7XG4gICAgICB9XG4gICAgICBvcHRpb25zID0gQ3Rvci5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHN1cGVyT3B0aW9ucywgQ3Rvci5leHRlbmRPcHRpb25zKTtcbiAgICAgIGlmIChvcHRpb25zLm5hbWUpIHtcbiAgICAgICAgb3B0aW9ucy5jb21wb25lbnRzW29wdGlvbnMubmFtZV0gPSBDdG9yO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gb3B0aW9uc1xufVxuXG5mdW5jdGlvbiByZXNvbHZlTW9kaWZpZWRPcHRpb25zIChDdG9yKSB7XG4gIGxldCBtb2RpZmllZDtcbiAgY29uc3QgbGF0ZXN0ID0gQ3Rvci5vcHRpb25zO1xuICBjb25zdCBzZWFsZWQgPSBDdG9yLnNlYWxlZE9wdGlvbnM7XG4gIGZvciAoY29uc3Qga2V5IGluIGxhdGVzdCkge1xuICAgIGlmIChsYXRlc3Rba2V5XSAhPT0gc2VhbGVkW2tleV0pIHtcbiAgICAgIGlmICghbW9kaWZpZWQpIG1vZGlmaWVkID0ge307XG4gICAgICBtb2RpZmllZFtrZXldID0gbGF0ZXN0W2tleV07XG4gICAgfVxuICB9XG4gIHJldHVybiBtb2RpZmllZFxufVxuXG5mdW5jdGlvbiBWdWUgKG9wdGlvbnMpIHtcbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFZ1ZSlcbiAgKSB7XG4gICAgd2FybignVnVlIGlzIGEgY29uc3RydWN0b3IgYW5kIHNob3VsZCBiZSBjYWxsZWQgd2l0aCB0aGUgYG5ld2Aga2V5d29yZCcpO1xuICB9XG4gIHRoaXMuX2luaXQob3B0aW9ucyk7XG59XG5cbmluaXRNaXhpbihWdWUpO1xuc3RhdGVNaXhpbihWdWUpO1xuZXZlbnRzTWl4aW4oVnVlKTtcbmxpZmVjeWNsZU1peGluKFZ1ZSk7XG5yZW5kZXJNaXhpbihWdWUpO1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdFVzZSAoVnVlKSB7XG4gIFZ1ZS51c2UgPSBmdW5jdGlvbiAocGx1Z2luKSB7XG4gICAgY29uc3QgaW5zdGFsbGVkUGx1Z2lucyA9ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zIHx8ICh0aGlzLl9pbnN0YWxsZWRQbHVnaW5zID0gW10pKTtcbiAgICBpZiAoaW5zdGFsbGVkUGx1Z2lucy5pbmRleE9mKHBsdWdpbikgPiAtMSkge1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICAvLyBhZGRpdGlvbmFsIHBhcmFtZXRlcnNcbiAgICBjb25zdCBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xuICAgIGFyZ3MudW5zaGlmdCh0aGlzKTtcbiAgICBpZiAodHlwZW9mIHBsdWdpbi5pbnN0YWxsID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBwbHVnaW4uaW5zdGFsbC5hcHBseShwbHVnaW4sIGFyZ3MpO1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIHBsdWdpbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcGx1Z2luLmFwcGx5KG51bGwsIGFyZ3MpO1xuICAgIH1cbiAgICBpbnN0YWxsZWRQbHVnaW5zLnB1c2gocGx1Z2luKTtcbiAgICByZXR1cm4gdGhpc1xuICB9O1xufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaW5pdE1peGluJDEgKFZ1ZSkge1xuICBWdWUubWl4aW4gPSBmdW5jdGlvbiAobWl4aW4pIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnModGhpcy5vcHRpb25zLCBtaXhpbik7XG4gICAgcmV0dXJuIHRoaXNcbiAgfTtcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGluaXRFeHRlbmQgKFZ1ZSkge1xuICAvKipcbiAgICogRWFjaCBpbnN0YW5jZSBjb25zdHJ1Y3RvciwgaW5jbHVkaW5nIFZ1ZSwgaGFzIGEgdW5pcXVlXG4gICAqIGNpZC4gVGhpcyBlbmFibGVzIHVzIHRvIGNyZWF0ZSB3cmFwcGVkIFwiY2hpbGRcbiAgICogY29uc3RydWN0b3JzXCIgZm9yIHByb3RvdHlwYWwgaW5oZXJpdGFuY2UgYW5kIGNhY2hlIHRoZW0uXG4gICAqL1xuICBWdWUuY2lkID0gMDtcbiAgbGV0IGNpZCA9IDE7XG5cbiAgLyoqXG4gICAqIENsYXNzIGluaGVyaXRhbmNlXG4gICAqL1xuICBWdWUuZXh0ZW5kID0gZnVuY3Rpb24gKGV4dGVuZE9wdGlvbnMpIHtcbiAgICBleHRlbmRPcHRpb25zID0gZXh0ZW5kT3B0aW9ucyB8fCB7fTtcbiAgICBjb25zdCBTdXBlciA9IHRoaXM7XG4gICAgY29uc3QgU3VwZXJJZCA9IFN1cGVyLmNpZDtcbiAgICBjb25zdCBjYWNoZWRDdG9ycyA9IGV4dGVuZE9wdGlvbnMuX0N0b3IgfHwgKGV4dGVuZE9wdGlvbnMuX0N0b3IgPSB7fSk7XG4gICAgaWYgKGNhY2hlZEN0b3JzW1N1cGVySWRdKSB7XG4gICAgICByZXR1cm4gY2FjaGVkQ3RvcnNbU3VwZXJJZF1cbiAgICB9XG5cbiAgICBjb25zdCBuYW1lID0gZXh0ZW5kT3B0aW9ucy5uYW1lIHx8IFN1cGVyLm9wdGlvbnMubmFtZTtcbiAgICBpZiAobmFtZSkge1xuICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKG5hbWUpO1xuICAgIH1cblxuICAgIGNvbnN0IFN1YiA9IGZ1bmN0aW9uIFZ1ZUNvbXBvbmVudCAob3B0aW9ucykge1xuICAgICAgdGhpcy5faW5pdChvcHRpb25zKTtcbiAgICB9O1xuICAgIFN1Yi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKFN1cGVyLnByb3RvdHlwZSk7XG4gICAgU3ViLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFN1YjtcbiAgICBTdWIuY2lkID0gY2lkKys7XG4gICAgU3ViLm9wdGlvbnMgPSBtZXJnZU9wdGlvbnMoXG4gICAgICBTdXBlci5vcHRpb25zLFxuICAgICAgZXh0ZW5kT3B0aW9uc1xuICAgICk7XG4gICAgU3ViWydzdXBlciddID0gU3VwZXI7XG5cbiAgICAvLyBGb3IgcHJvcHMgYW5kIGNvbXB1dGVkIHByb3BlcnRpZXMsIHdlIGRlZmluZSB0aGUgcHJveHkgZ2V0dGVycyBvblxuICAgIC8vIHRoZSBWdWUgaW5zdGFuY2VzIGF0IGV4dGVuc2lvbiB0aW1lLCBvbiB0aGUgZXh0ZW5kZWQgcHJvdG90eXBlLiBUaGlzXG4gICAgLy8gYXZvaWRzIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSBjYWxscyBmb3IgZWFjaCBpbnN0YW5jZSBjcmVhdGVkLlxuICAgIGlmIChTdWIub3B0aW9ucy5wcm9wcykge1xuICAgICAgaW5pdFByb3BzJDEoU3ViKTtcbiAgICB9XG4gICAgaWYgKFN1Yi5vcHRpb25zLmNvbXB1dGVkKSB7XG4gICAgICBpbml0Q29tcHV0ZWQkMShTdWIpO1xuICAgIH1cblxuICAgIC8vIGFsbG93IGZ1cnRoZXIgZXh0ZW5zaW9uL21peGluL3BsdWdpbiB1c2FnZVxuICAgIFN1Yi5leHRlbmQgPSBTdXBlci5leHRlbmQ7XG4gICAgU3ViLm1peGluID0gU3VwZXIubWl4aW47XG4gICAgU3ViLnVzZSA9IFN1cGVyLnVzZTtcblxuICAgIC8vIGNyZWF0ZSBhc3NldCByZWdpc3RlcnMsIHNvIGV4dGVuZGVkIGNsYXNzZXNcbiAgICAvLyBjYW4gaGF2ZSB0aGVpciBwcml2YXRlIGFzc2V0cyB0b28uXG4gICAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgU3ViW3R5cGVdID0gU3VwZXJbdHlwZV07XG4gICAgfSk7XG4gICAgLy8gZW5hYmxlIHJlY3Vyc2l2ZSBzZWxmLWxvb2t1cFxuICAgIGlmIChuYW1lKSB7XG4gICAgICBTdWIub3B0aW9ucy5jb21wb25lbnRzW25hbWVdID0gU3ViO1xuICAgIH1cblxuICAgIC8vIGtlZXAgYSByZWZlcmVuY2UgdG8gdGhlIHN1cGVyIG9wdGlvbnMgYXQgZXh0ZW5zaW9uIHRpbWUuXG4gICAgLy8gbGF0ZXIgYXQgaW5zdGFudGlhdGlvbiB3ZSBjYW4gY2hlY2sgaWYgU3VwZXIncyBvcHRpb25zIGhhdmVcbiAgICAvLyBiZWVuIHVwZGF0ZWQuXG4gICAgU3ViLnN1cGVyT3B0aW9ucyA9IFN1cGVyLm9wdGlvbnM7XG4gICAgU3ViLmV4dGVuZE9wdGlvbnMgPSBleHRlbmRPcHRpb25zO1xuICAgIFN1Yi5zZWFsZWRPcHRpb25zID0gZXh0ZW5kKHt9LCBTdWIub3B0aW9ucyk7XG5cbiAgICAvLyBjYWNoZSBjb25zdHJ1Y3RvclxuICAgIGNhY2hlZEN0b3JzW1N1cGVySWRdID0gU3ViO1xuICAgIHJldHVybiBTdWJcbiAgfTtcbn1cblxuZnVuY3Rpb24gaW5pdFByb3BzJDEgKENvbXApIHtcbiAgY29uc3QgcHJvcHMgPSBDb21wLm9wdGlvbnMucHJvcHM7XG4gIGZvciAoY29uc3Qga2V5IGluIHByb3BzKSB7XG4gICAgcHJveHkoQ29tcC5wcm90b3R5cGUsIGBfcHJvcHNgLCBrZXkpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGluaXRDb21wdXRlZCQxIChDb21wKSB7XG4gIGNvbnN0IGNvbXB1dGVkID0gQ29tcC5vcHRpb25zLmNvbXB1dGVkO1xuICBmb3IgKGNvbnN0IGtleSBpbiBjb21wdXRlZCkge1xuICAgIGRlZmluZUNvbXB1dGVkKENvbXAucHJvdG90eXBlLCBrZXksIGNvbXB1dGVkW2tleV0pO1xuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0QXNzZXRSZWdpc3RlcnMgKFZ1ZSkge1xuICAvKipcbiAgICogQ3JlYXRlIGFzc2V0IHJlZ2lzdHJhdGlvbiBtZXRob2RzLlxuICAgKi9cbiAgQVNTRVRfVFlQRVMuZm9yRWFjaCh0eXBlID0+IHtcbiAgICBWdWVbdHlwZV0gPSBmdW5jdGlvbiAoXG4gICAgICBpZCxcbiAgICAgIGRlZmluaXRpb25cbiAgICApIHtcbiAgICAgIGlmICghZGVmaW5pdGlvbikge1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zW3R5cGUgKyAncyddW2lkXVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmICh0eXBlID09PSAnY29tcG9uZW50Jykge1xuICAgICAgICAgIHZhbGlkYXRlQ29tcG9uZW50TmFtZShpZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdjb21wb25lbnQnICYmIGlzUGxhaW5PYmplY3QoZGVmaW5pdGlvbikpIHtcbiAgICAgICAgICBkZWZpbml0aW9uLm5hbWUgPSBkZWZpbml0aW9uLm5hbWUgfHwgaWQ7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHRoaXMub3B0aW9ucy5fYmFzZS5leHRlbmQoZGVmaW5pdGlvbik7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGUgPT09ICdkaXJlY3RpdmUnICYmIHR5cGVvZiBkZWZpbml0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZGVmaW5pdGlvbiA9IHsgYmluZDogZGVmaW5pdGlvbiwgdXBkYXRlOiBkZWZpbml0aW9uIH07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5vcHRpb25zW3R5cGUgKyAncyddW2lkXSA9IGRlZmluaXRpb247XG4gICAgICAgIHJldHVybiBkZWZpbml0aW9uXG4gICAgICB9XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qICAqL1xuXG5cblxuZnVuY3Rpb24gZ2V0Q29tcG9uZW50TmFtZSAob3B0cykge1xuICByZXR1cm4gb3B0cyAmJiAob3B0cy5DdG9yLm9wdGlvbnMubmFtZSB8fCBvcHRzLnRhZylcbn1cblxuZnVuY3Rpb24gbWF0Y2hlcyAocGF0dGVybiwgbmFtZSkge1xuICBpZiAoQXJyYXkuaXNBcnJheShwYXR0ZXJuKSkge1xuICAgIHJldHVybiBwYXR0ZXJuLmluZGV4T2YobmFtZSkgPiAtMVxuICB9IGVsc2UgaWYgKHR5cGVvZiBwYXR0ZXJuID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXR0ZXJuLnNwbGl0KCcsJykuaW5kZXhPZihuYW1lKSA+IC0xXG4gIH0gZWxzZSBpZiAoaXNSZWdFeHAocGF0dGVybikpIHtcbiAgICByZXR1cm4gcGF0dGVybi50ZXN0KG5hbWUpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGUgKGtlZXBBbGl2ZUluc3RhbmNlLCBmaWx0ZXIpIHtcbiAgY29uc3QgeyBjYWNoZSwga2V5cywgX3Zub2RlIH0gPSBrZWVwQWxpdmVJbnN0YW5jZTtcbiAgZm9yIChjb25zdCBrZXkgaW4gY2FjaGUpIHtcbiAgICBjb25zdCBjYWNoZWROb2RlID0gY2FjaGVba2V5XTtcbiAgICBpZiAoY2FjaGVkTm9kZSkge1xuICAgICAgY29uc3QgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY2FjaGVkTm9kZS5jb21wb25lbnRPcHRpb25zKTtcbiAgICAgIGlmIChuYW1lICYmICFmaWx0ZXIobmFtZSkpIHtcbiAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXksIGtleXMsIF92bm9kZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBydW5lQ2FjaGVFbnRyeSAoXG4gIGNhY2hlLFxuICBrZXksXG4gIGtleXMsXG4gIGN1cnJlbnRcbikge1xuICBjb25zdCBjYWNoZWQkJDEgPSBjYWNoZVtrZXldO1xuICBpZiAoY2FjaGVkJCQxICYmICghY3VycmVudCB8fCBjYWNoZWQkJDEudGFnICE9PSBjdXJyZW50LnRhZykpIHtcbiAgICBjYWNoZWQkJDEuY29tcG9uZW50SW5zdGFuY2UuJGRlc3Ryb3koKTtcbiAgfVxuICBjYWNoZVtrZXldID0gbnVsbDtcbiAgcmVtb3ZlKGtleXMsIGtleSk7XG59XG5cbmNvbnN0IHBhdHRlcm5UeXBlcyA9IFtTdHJpbmcsIFJlZ0V4cCwgQXJyYXldO1xuXG52YXIgS2VlcEFsaXZlID0ge1xuICBuYW1lOiAna2VlcC1hbGl2ZScsXG4gIGFic3RyYWN0OiB0cnVlLFxuXG4gIHByb3BzOiB7XG4gICAgaW5jbHVkZTogcGF0dGVyblR5cGVzLFxuICAgIGV4Y2x1ZGU6IHBhdHRlcm5UeXBlcyxcbiAgICBtYXg6IFtTdHJpbmcsIE51bWJlcl1cbiAgfSxcblxuICBjcmVhdGVkICgpIHtcbiAgICB0aGlzLmNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB0aGlzLmtleXMgPSBbXTtcbiAgfSxcblxuICBkZXN0cm95ZWQgKCkge1xuICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuY2FjaGUpIHtcbiAgICAgIHBydW5lQ2FjaGVFbnRyeSh0aGlzLmNhY2hlLCBrZXksIHRoaXMua2V5cyk7XG4gICAgfVxuICB9LFxuXG4gIG1vdW50ZWQgKCkge1xuICAgIHRoaXMuJHdhdGNoKCdpbmNsdWRlJywgdmFsID0+IHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcywgbmFtZSA9PiBtYXRjaGVzKHZhbCwgbmFtZSkpO1xuICAgIH0pO1xuICAgIHRoaXMuJHdhdGNoKCdleGNsdWRlJywgdmFsID0+IHtcbiAgICAgIHBydW5lQ2FjaGUodGhpcywgbmFtZSA9PiAhbWF0Y2hlcyh2YWwsIG5hbWUpKTtcbiAgICB9KTtcbiAgfSxcblxuICByZW5kZXIgKCkge1xuICAgIGNvbnN0IHNsb3QgPSB0aGlzLiRzbG90cy5kZWZhdWx0O1xuICAgIGNvbnN0IHZub2RlID0gZ2V0Rmlyc3RDb21wb25lbnRDaGlsZChzbG90KTtcbiAgICBjb25zdCBjb21wb25lbnRPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICBpZiAoY29tcG9uZW50T3B0aW9ucykge1xuICAgICAgLy8gY2hlY2sgcGF0dGVyblxuICAgICAgY29uc3QgbmFtZSA9IGdldENvbXBvbmVudE5hbWUoY29tcG9uZW50T3B0aW9ucyk7XG4gICAgICBjb25zdCB7IGluY2x1ZGUsIGV4Y2x1ZGUgfSA9IHRoaXM7XG4gICAgICBpZiAoXG4gICAgICAgIC8vIG5vdCBpbmNsdWRlZFxuICAgICAgICAoaW5jbHVkZSAmJiAoIW5hbWUgfHwgIW1hdGNoZXMoaW5jbHVkZSwgbmFtZSkpKSB8fFxuICAgICAgICAvLyBleGNsdWRlZFxuICAgICAgICAoZXhjbHVkZSAmJiBuYW1lICYmIG1hdGNoZXMoZXhjbHVkZSwgbmFtZSkpXG4gICAgICApIHtcbiAgICAgICAgcmV0dXJuIHZub2RlXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHsgY2FjaGUsIGtleXMgfSA9IHRoaXM7XG4gICAgICBjb25zdCBrZXkgPSB2bm9kZS5rZXkgPT0gbnVsbFxuICAgICAgICAvLyBzYW1lIGNvbnN0cnVjdG9yIG1heSBnZXQgcmVnaXN0ZXJlZCBhcyBkaWZmZXJlbnQgbG9jYWwgY29tcG9uZW50c1xuICAgICAgICAvLyBzbyBjaWQgYWxvbmUgaXMgbm90IGVub3VnaCAoIzMyNjkpXG4gICAgICAgID8gY29tcG9uZW50T3B0aW9ucy5DdG9yLmNpZCArIChjb21wb25lbnRPcHRpb25zLnRhZyA/IGA6OiR7Y29tcG9uZW50T3B0aW9ucy50YWd9YCA6ICcnKVxuICAgICAgICA6IHZub2RlLmtleTtcbiAgICAgIGlmIChjYWNoZVtrZXldKSB7XG4gICAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gY2FjaGVba2V5XS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICAgICAgLy8gbWFrZSBjdXJyZW50IGtleSBmcmVzaGVzdFxuICAgICAgICByZW1vdmUoa2V5cywga2V5KTtcbiAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWNoZVtrZXldID0gdm5vZGU7XG4gICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgICAvLyBwcnVuZSBvbGRlc3QgZW50cnlcbiAgICAgICAgaWYgKHRoaXMubWF4ICYmIGtleXMubGVuZ3RoID4gcGFyc2VJbnQodGhpcy5tYXgpKSB7XG4gICAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXlzWzBdLCBrZXlzLCB0aGlzLl92bm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdm5vZGUuZGF0YS5rZWVwQWxpdmUgPSB0cnVlO1xuICAgIH1cbiAgICByZXR1cm4gdm5vZGUgfHwgKHNsb3QgJiYgc2xvdFswXSlcbiAgfVxufTtcblxudmFyIGJ1aWx0SW5Db21wb25lbnRzID0ge1xuICBLZWVwQWxpdmVcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBpbml0R2xvYmFsQVBJIChWdWUpIHtcbiAgLy8gY29uZmlnXG4gIGNvbnN0IGNvbmZpZ0RlZiA9IHt9O1xuICBjb25maWdEZWYuZ2V0ID0gKCkgPT4gY29uZmlnO1xuICB7XG4gICAgY29uZmlnRGVmLnNldCA9ICgpID0+IHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdEbyBub3QgcmVwbGFjZSB0aGUgVnVlLmNvbmZpZyBvYmplY3QsIHNldCBpbmRpdmlkdWFsIGZpZWxkcyBpbnN0ZWFkLidcbiAgICAgICk7XG4gICAgfTtcbiAgfVxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLCAnY29uZmlnJywgY29uZmlnRGVmKTtcblxuICAvLyBleHBvc2VkIHV0aWwgbWV0aG9kcy5cbiAgLy8gTk9URTogdGhlc2UgYXJlIG5vdCBjb25zaWRlcmVkIHBhcnQgb2YgdGhlIHB1YmxpYyBBUEkgLSBhdm9pZCByZWx5aW5nIG9uXG4gIC8vIHRoZW0gdW5sZXNzIHlvdSBhcmUgYXdhcmUgb2YgdGhlIHJpc2suXG4gIFZ1ZS51dGlsID0ge1xuICAgIHdhcm4sXG4gICAgZXh0ZW5kLFxuICAgIG1lcmdlT3B0aW9ucyxcbiAgICBkZWZpbmVSZWFjdGl2ZTogZGVmaW5lUmVhY3RpdmUkJDFcbiAgfTtcblxuICBWdWUuc2V0ID0gc2V0O1xuICBWdWUuZGVsZXRlID0gZGVsO1xuICBWdWUubmV4dFRpY2sgPSBuZXh0VGljaztcblxuICAvLyAyLjYgZXhwbGljaXQgb2JzZXJ2YWJsZSBBUElcbiAgVnVlLm9ic2VydmFibGUgPSAob2JqKSA9PiB7XG4gICAgb2JzZXJ2ZShvYmopO1xuICAgIHJldHVybiBvYmpcbiAgfTtcblxuICBWdWUub3B0aW9ucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIEFTU0VUX1RZUEVTLmZvckVhY2godHlwZSA9PiB7XG4gICAgVnVlLm9wdGlvbnNbdHlwZSArICdzJ10gPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB9KTtcblxuICAvLyB0aGlzIGlzIHVzZWQgdG8gaWRlbnRpZnkgdGhlIFwiYmFzZVwiIGNvbnN0cnVjdG9yIHRvIGV4dGVuZCBhbGwgcGxhaW4tb2JqZWN0XG4gIC8vIGNvbXBvbmVudHMgd2l0aCBpbiBXZWV4J3MgbXVsdGktaW5zdGFuY2Ugc2NlbmFyaW9zLlxuICBWdWUub3B0aW9ucy5fYmFzZSA9IFZ1ZTtcblxuICBleHRlbmQoVnVlLm9wdGlvbnMuY29tcG9uZW50cywgYnVpbHRJbkNvbXBvbmVudHMpO1xuXG4gIGluaXRVc2UoVnVlKTtcbiAgaW5pdE1peGluJDEoVnVlKTtcbiAgaW5pdEV4dGVuZChWdWUpO1xuICBpbml0QXNzZXRSZWdpc3RlcnMoVnVlKTtcbn1cblxuaW5pdEdsb2JhbEFQSShWdWUpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRpc1NlcnZlcicsIHtcbiAgZ2V0OiBpc1NlcnZlclJlbmRlcmluZ1xufSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJHNzckNvbnRleHQnLCB7XG4gIGdldCAoKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICByZXR1cm4gdGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dFxuICB9XG59KTtcblxuLy8gZXhwb3NlIEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IGZvciBzc3IgcnVudGltZSBoZWxwZXIgaW5zdGFsbGF0aW9uXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLCAnRnVuY3Rpb25hbFJlbmRlckNvbnRleHQnLCB7XG4gIHZhbHVlOiBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dFxufSk7XG5cblZ1ZS52ZXJzaW9uID0gJzIuNi42JztcblxuLyogICovXG5cbi8vIHRoZXNlIGFyZSByZXNlcnZlZCBmb3Igd2ViIGJlY2F1c2UgdGhleSBhcmUgZGlyZWN0bHkgY29tcGlsZWQgYXdheVxuLy8gZHVyaW5nIHRlbXBsYXRlIGNvbXBpbGF0aW9uXG5jb25zdCBpc1Jlc2VydmVkQXR0ciA9IG1ha2VNYXAoJ3N0eWxlLGNsYXNzJyk7XG5cbi8vIGF0dHJpYnV0ZXMgdGhhdCBzaG91bGQgYmUgdXNpbmcgcHJvcHMgZm9yIGJpbmRpbmdcbmNvbnN0IGFjY2VwdFZhbHVlID0gbWFrZU1hcCgnaW5wdXQsdGV4dGFyZWEsb3B0aW9uLHNlbGVjdCxwcm9ncmVzcycpO1xuY29uc3QgbXVzdFVzZVByb3AgPSAodGFnLCB0eXBlLCBhdHRyKSA9PiB7XG4gIHJldHVybiAoXG4gICAgKGF0dHIgPT09ICd2YWx1ZScgJiYgYWNjZXB0VmFsdWUodGFnKSkgJiYgdHlwZSAhPT0gJ2J1dHRvbicgfHxcbiAgICAoYXR0ciA9PT0gJ3NlbGVjdGVkJyAmJiB0YWcgPT09ICdvcHRpb24nKSB8fFxuICAgIChhdHRyID09PSAnY2hlY2tlZCcgJiYgdGFnID09PSAnaW5wdXQnKSB8fFxuICAgIChhdHRyID09PSAnbXV0ZWQnICYmIHRhZyA9PT0gJ3ZpZGVvJylcbiAgKVxufTtcblxuY29uc3QgaXNFbnVtZXJhdGVkQXR0ciA9IG1ha2VNYXAoJ2NvbnRlbnRlZGl0YWJsZSxkcmFnZ2FibGUsc3BlbGxjaGVjaycpO1xuXG5jb25zdCBpc1ZhbGlkQ29udGVudEVkaXRhYmxlVmFsdWUgPSBtYWtlTWFwKCdldmVudHMsY2FyZXQsdHlwaW5nLHBsYWludGV4dC1vbmx5Jyk7XG5cbmNvbnN0IGNvbnZlcnRFbnVtZXJhdGVkVmFsdWUgPSAoa2V5LCB2YWx1ZSkgPT4ge1xuICByZXR1cm4gaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkgfHwgdmFsdWUgPT09ICdmYWxzZSdcbiAgICA/ICdmYWxzZSdcbiAgICAvLyBhbGxvdyBhcmJpdHJhcnkgc3RyaW5nIHZhbHVlIGZvciBjb250ZW50ZWRpdGFibGVcbiAgICA6IGtleSA9PT0gJ2NvbnRlbnRlZGl0YWJsZScgJiYgaXNWYWxpZENvbnRlbnRFZGl0YWJsZVZhbHVlKHZhbHVlKVxuICAgICAgPyB2YWx1ZVxuICAgICAgOiAndHJ1ZSdcbn07XG5cbmNvbnN0IGlzQm9vbGVhbkF0dHIgPSBtYWtlTWFwKFxuICAnYWxsb3dmdWxsc2NyZWVuLGFzeW5jLGF1dG9mb2N1cyxhdXRvcGxheSxjaGVja2VkLGNvbXBhY3QsY29udHJvbHMsZGVjbGFyZSwnICtcbiAgJ2RlZmF1bHQsZGVmYXVsdGNoZWNrZWQsZGVmYXVsdG11dGVkLGRlZmF1bHRzZWxlY3RlZCxkZWZlcixkaXNhYmxlZCwnICtcbiAgJ2VuYWJsZWQsZm9ybW5vdmFsaWRhdGUsaGlkZGVuLGluZGV0ZXJtaW5hdGUsaW5lcnQsaXNtYXAsaXRlbXNjb3BlLGxvb3AsbXVsdGlwbGUsJyArXG4gICdtdXRlZCxub2hyZWYsbm9yZXNpemUsbm9zaGFkZSxub3ZhbGlkYXRlLG5vd3JhcCxvcGVuLHBhdXNlb25leGl0LHJlYWRvbmx5LCcgK1xuICAncmVxdWlyZWQscmV2ZXJzZWQsc2NvcGVkLHNlYW1sZXNzLHNlbGVjdGVkLHNvcnRhYmxlLHRyYW5zbGF0ZSwnICtcbiAgJ3RydWVzcGVlZCx0eXBlbXVzdG1hdGNoLHZpc2libGUnXG4pO1xuXG5jb25zdCB4bGlua05TID0gJ2h0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsnO1xuXG5jb25zdCBpc1hsaW5rID0gKG5hbWUpID0+IHtcbiAgcmV0dXJuIG5hbWUuY2hhckF0KDUpID09PSAnOicgJiYgbmFtZS5zbGljZSgwLCA1KSA9PT0gJ3hsaW5rJ1xufTtcblxuY29uc3QgZ2V0WGxpbmtQcm9wID0gKG5hbWUpID0+IHtcbiAgcmV0dXJuIGlzWGxpbmsobmFtZSkgPyBuYW1lLnNsaWNlKDYsIG5hbWUubGVuZ3RoKSA6ICcnXG59O1xuXG5jb25zdCBpc0ZhbHN5QXR0clZhbHVlID0gKHZhbCkgPT4ge1xuICByZXR1cm4gdmFsID09IG51bGwgfHwgdmFsID09PSBmYWxzZVxufTtcblxuLyogICovXG5cbmZ1bmN0aW9uIGdlbkNsYXNzRm9yVm5vZGUgKHZub2RlKSB7XG4gIGxldCBkYXRhID0gdm5vZGUuZGF0YTtcbiAgbGV0IHBhcmVudE5vZGUgPSB2bm9kZTtcbiAgbGV0IGNoaWxkTm9kZSA9IHZub2RlO1xuICB3aGlsZSAoaXNEZWYoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgaWYgKGNoaWxkTm9kZSAmJiBjaGlsZE5vZGUuZGF0YSkge1xuICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGNoaWxkTm9kZS5kYXRhLCBkYXRhKTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKGlzRGVmKHBhcmVudE5vZGUgPSBwYXJlbnROb2RlLnBhcmVudCkpIHtcbiAgICBpZiAocGFyZW50Tm9kZSAmJiBwYXJlbnROb2RlLmRhdGEpIHtcbiAgICAgIGRhdGEgPSBtZXJnZUNsYXNzRGF0YShkYXRhLCBwYXJlbnROb2RlLmRhdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVuZGVyQ2xhc3MoZGF0YS5zdGF0aWNDbGFzcywgZGF0YS5jbGFzcylcbn1cblxuZnVuY3Rpb24gbWVyZ2VDbGFzc0RhdGEgKGNoaWxkLCBwYXJlbnQpIHtcbiAgcmV0dXJuIHtcbiAgICBzdGF0aWNDbGFzczogY29uY2F0KGNoaWxkLnN0YXRpY0NsYXNzLCBwYXJlbnQuc3RhdGljQ2xhc3MpLFxuICAgIGNsYXNzOiBpc0RlZihjaGlsZC5jbGFzcylcbiAgICAgID8gW2NoaWxkLmNsYXNzLCBwYXJlbnQuY2xhc3NdXG4gICAgICA6IHBhcmVudC5jbGFzc1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlbmRlckNsYXNzIChcbiAgc3RhdGljQ2xhc3MsXG4gIGR5bmFtaWNDbGFzc1xuKSB7XG4gIGlmIChpc0RlZihzdGF0aWNDbGFzcykgfHwgaXNEZWYoZHluYW1pY0NsYXNzKSkge1xuICAgIHJldHVybiBjb25jYXQoc3RhdGljQ2xhc3MsIHN0cmluZ2lmeUNsYXNzKGR5bmFtaWNDbGFzcykpXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuICcnXG59XG5cbmZ1bmN0aW9uIGNvbmNhdCAoYSwgYikge1xuICByZXR1cm4gYSA/IGIgPyAoYSArICcgJyArIGIpIDogYSA6IChiIHx8ICcnKVxufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlDbGFzcyAodmFsdWUpIHtcbiAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN0cmluZ2lmeUFycmF5KHZhbHVlKVxuICB9XG4gIGlmIChpc09iamVjdCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3RyaW5naWZ5T2JqZWN0KHZhbHVlKVxuICB9XG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIHZhbHVlXG4gIH1cbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgcmV0dXJuICcnXG59XG5cbmZ1bmN0aW9uIHN0cmluZ2lmeUFycmF5ICh2YWx1ZSkge1xuICBsZXQgcmVzID0gJyc7XG4gIGxldCBzdHJpbmdpZmllZDtcbiAgZm9yIChsZXQgaSA9IDAsIGwgPSB2YWx1ZS5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoaXNEZWYoc3RyaW5naWZpZWQgPSBzdHJpbmdpZnlDbGFzcyh2YWx1ZVtpXSkpICYmIHN0cmluZ2lmaWVkICE9PSAnJykge1xuICAgICAgaWYgKHJlcykgcmVzICs9ICcgJztcbiAgICAgIHJlcyArPSBzdHJpbmdpZmllZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBzdHJpbmdpZnlPYmplY3QgKHZhbHVlKSB7XG4gIGxldCByZXMgPSAnJztcbiAgZm9yIChjb25zdCBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAodmFsdWVba2V5XSkge1xuICAgICAgaWYgKHJlcykgcmVzICs9ICcgJztcbiAgICAgIHJlcyArPSBrZXk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cblxuLyogICovXG5cbmNvbnN0IG5hbWVzcGFjZU1hcCA9IHtcbiAgc3ZnOiAnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLFxuICBtYXRoOiAnaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTCdcbn07XG5cbmNvbnN0IGlzSFRNTFRhZyA9IG1ha2VNYXAoXG4gICdodG1sLGJvZHksYmFzZSxoZWFkLGxpbmssbWV0YSxzdHlsZSx0aXRsZSwnICtcbiAgJ2FkZHJlc3MsYXJ0aWNsZSxhc2lkZSxmb290ZXIsaGVhZGVyLGgxLGgyLGgzLGg0LGg1LGg2LGhncm91cCxuYXYsc2VjdGlvbiwnICtcbiAgJ2RpdixkZCxkbCxkdCxmaWdjYXB0aW9uLGZpZ3VyZSxwaWN0dXJlLGhyLGltZyxsaSxtYWluLG9sLHAscHJlLHVsLCcgK1xuICAnYSxiLGFiYnIsYmRpLGJkbyxicixjaXRlLGNvZGUsZGF0YSxkZm4sZW0saSxrYmQsbWFyayxxLHJwLHJ0LHJ0YyxydWJ5LCcgK1xuICAncyxzYW1wLHNtYWxsLHNwYW4sc3Ryb25nLHN1YixzdXAsdGltZSx1LHZhcix3YnIsYXJlYSxhdWRpbyxtYXAsdHJhY2ssdmlkZW8sJyArXG4gICdlbWJlZCxvYmplY3QscGFyYW0sc291cmNlLGNhbnZhcyxzY3JpcHQsbm9zY3JpcHQsZGVsLGlucywnICtcbiAgJ2NhcHRpb24sY29sLGNvbGdyb3VwLHRhYmxlLHRoZWFkLHRib2R5LHRkLHRoLHRyLCcgK1xuICAnYnV0dG9uLGRhdGFsaXN0LGZpZWxkc2V0LGZvcm0saW5wdXQsbGFiZWwsbGVnZW5kLG1ldGVyLG9wdGdyb3VwLG9wdGlvbiwnICtcbiAgJ291dHB1dCxwcm9ncmVzcyxzZWxlY3QsdGV4dGFyZWEsJyArXG4gICdkZXRhaWxzLGRpYWxvZyxtZW51LG1lbnVpdGVtLHN1bW1hcnksJyArXG4gICdjb250ZW50LGVsZW1lbnQsc2hhZG93LHRlbXBsYXRlLGJsb2NrcXVvdGUsaWZyYW1lLHRmb290J1xuKTtcblxuLy8gdGhpcyBtYXAgaXMgaW50ZW50aW9uYWxseSBzZWxlY3RpdmUsIG9ubHkgY292ZXJpbmcgU1ZHIGVsZW1lbnRzIHRoYXQgbWF5XG4vLyBjb250YWluIGNoaWxkIGVsZW1lbnRzLlxuY29uc3QgaXNTVkcgPSBtYWtlTWFwKFxuICAnc3ZnLGFuaW1hdGUsY2lyY2xlLGNsaXBwYXRoLGN1cnNvcixkZWZzLGRlc2MsZWxsaXBzZSxmaWx0ZXIsZm9udC1mYWNlLCcgK1xuICAnZm9yZWlnbk9iamVjdCxnLGdseXBoLGltYWdlLGxpbmUsbWFya2VyLG1hc2ssbWlzc2luZy1nbHlwaCxwYXRoLHBhdHRlcm4sJyArXG4gICdwb2x5Z29uLHBvbHlsaW5lLHJlY3Qsc3dpdGNoLHN5bWJvbCx0ZXh0LHRleHRwYXRoLHRzcGFuLHVzZSx2aWV3JyxcbiAgdHJ1ZVxuKTtcblxuY29uc3QgaXNQcmVUYWcgPSAodGFnKSA9PiB0YWcgPT09ICdwcmUnO1xuXG5jb25zdCBpc1Jlc2VydmVkVGFnID0gKHRhZykgPT4ge1xuICByZXR1cm4gaXNIVE1MVGFnKHRhZykgfHwgaXNTVkcodGFnKVxufTtcblxuZnVuY3Rpb24gZ2V0VGFnTmFtZXNwYWNlICh0YWcpIHtcbiAgaWYgKGlzU1ZHKHRhZykpIHtcbiAgICByZXR1cm4gJ3N2ZydcbiAgfVxuICAvLyBiYXNpYyBzdXBwb3J0IGZvciBNYXRoTUxcbiAgLy8gbm90ZSBpdCBkb2Vzbid0IHN1cHBvcnQgb3RoZXIgTWF0aE1MIGVsZW1lbnRzIGJlaW5nIGNvbXBvbmVudCByb290c1xuICBpZiAodGFnID09PSAnbWF0aCcpIHtcbiAgICByZXR1cm4gJ21hdGgnXG4gIH1cbn1cblxuY29uc3QgdW5rbm93bkVsZW1lbnRDYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5mdW5jdGlvbiBpc1Vua25vd25FbGVtZW50ICh0YWcpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghaW5Ccm93c2VyKSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuICBpZiAoaXNSZXNlcnZlZFRhZyh0YWcpKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgdGFnID0gdGFnLnRvTG93ZXJDYXNlKCk7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddICE9IG51bGwpIHtcbiAgICByZXR1cm4gdW5rbm93bkVsZW1lbnRDYWNoZVt0YWddXG4gIH1cbiAgY29uc3QgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gIGlmICh0YWcuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yODIxMDM2NC8xMDcwMjQ0XG4gICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAoXG4gICAgICBlbC5jb25zdHJ1Y3RvciA9PT0gd2luZG93LkhUTUxVbmtub3duRWxlbWVudCB8fFxuICAgICAgZWwuY29uc3RydWN0b3IgPT09IHdpbmRvdy5IVE1MRWxlbWVudFxuICAgICkpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAvSFRNTFVua25vd25FbGVtZW50Ly50ZXN0KGVsLnRvU3RyaW5nKCkpKVxuICB9XG59XG5cbmNvbnN0IGlzVGV4dElucHV0VHlwZSA9IG1ha2VNYXAoJ3RleHQsbnVtYmVyLHBhc3N3b3JkLHNlYXJjaCxlbWFpbCx0ZWwsdXJsJyk7XG5cbi8qICAqL1xuXG4vKipcbiAqIFF1ZXJ5IGFuIGVsZW1lbnQgc2VsZWN0b3IgaWYgaXQncyBub3QgYW4gZWxlbWVudCBhbHJlYWR5LlxuICovXG5mdW5jdGlvbiBxdWVyeSAoZWwpIHtcbiAgaWYgKHR5cGVvZiBlbCA9PT0gJ3N0cmluZycpIHtcbiAgICBjb25zdCBzZWxlY3RlZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoZWwpO1xuICAgIGlmICghc2VsZWN0ZWQpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdDYW5ub3QgZmluZCBlbGVtZW50OiAnICsgZWxcbiAgICAgICk7XG4gICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICB9XG4gICAgcmV0dXJuIHNlbGVjdGVkXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGVsXG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnQkMSAodGFnTmFtZSwgdm5vZGUpIHtcbiAgY29uc3QgZWxtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCh0YWdOYW1lKTtcbiAgaWYgKHRhZ05hbWUgIT09ICdzZWxlY3QnKSB7XG4gICAgcmV0dXJuIGVsbVxuICB9XG4gIC8vIGZhbHNlIG9yIG51bGwgd2lsbCByZW1vdmUgdGhlIGF0dHJpYnV0ZSBidXQgdW5kZWZpbmVkIHdpbGwgbm90XG4gIGlmICh2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEuYXR0cnMgJiYgdm5vZGUuZGF0YS5hdHRycy5tdWx0aXBsZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgZWxtLnNldEF0dHJpYnV0ZSgnbXVsdGlwbGUnLCAnbXVsdGlwbGUnKTtcbiAgfVxuICByZXR1cm4gZWxtXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnROUyAobmFtZXNwYWNlLCB0YWdOYW1lKSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMobmFtZXNwYWNlTWFwW25hbWVzcGFjZV0sIHRhZ05hbWUpXG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRleHROb2RlICh0ZXh0KSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZSh0ZXh0KVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21tZW50ICh0ZXh0KSB7XG4gIHJldHVybiBkb2N1bWVudC5jcmVhdGVDb21tZW50KHRleHQpXG59XG5cbmZ1bmN0aW9uIGluc2VydEJlZm9yZSAocGFyZW50Tm9kZSwgbmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSkge1xuICBwYXJlbnROb2RlLmluc2VydEJlZm9yZShuZXdOb2RlLCByZWZlcmVuY2VOb2RlKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlQ2hpbGQgKG5vZGUsIGNoaWxkKSB7XG4gIG5vZGUucmVtb3ZlQ2hpbGQoY2hpbGQpO1xufVxuXG5mdW5jdGlvbiBhcHBlbmRDaGlsZCAobm9kZSwgY2hpbGQpIHtcbiAgbm9kZS5hcHBlbmRDaGlsZChjaGlsZCk7XG59XG5cbmZ1bmN0aW9uIHBhcmVudE5vZGUgKG5vZGUpIHtcbiAgcmV0dXJuIG5vZGUucGFyZW50Tm9kZVxufVxuXG5mdW5jdGlvbiBuZXh0U2libGluZyAobm9kZSkge1xuICByZXR1cm4gbm9kZS5uZXh0U2libGluZ1xufVxuXG5mdW5jdGlvbiB0YWdOYW1lIChub2RlKSB7XG4gIHJldHVybiBub2RlLnRhZ05hbWVcbn1cblxuZnVuY3Rpb24gc2V0VGV4dENvbnRlbnQgKG5vZGUsIHRleHQpIHtcbiAgbm9kZS50ZXh0Q29udGVudCA9IHRleHQ7XG59XG5cbmZ1bmN0aW9uIHNldFN0eWxlU2NvcGUgKG5vZGUsIHNjb3BlSWQpIHtcbiAgbm9kZS5zZXRBdHRyaWJ1dGUoc2NvcGVJZCwgJycpO1xufVxuXG52YXIgbm9kZU9wcyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgY3JlYXRlRWxlbWVudDogY3JlYXRlRWxlbWVudCQxLFxuICBjcmVhdGVFbGVtZW50TlM6IGNyZWF0ZUVsZW1lbnROUyxcbiAgY3JlYXRlVGV4dE5vZGU6IGNyZWF0ZVRleHROb2RlLFxuICBjcmVhdGVDb21tZW50OiBjcmVhdGVDb21tZW50LFxuICBpbnNlcnRCZWZvcmU6IGluc2VydEJlZm9yZSxcbiAgcmVtb3ZlQ2hpbGQ6IHJlbW92ZUNoaWxkLFxuICBhcHBlbmRDaGlsZDogYXBwZW5kQ2hpbGQsXG4gIHBhcmVudE5vZGU6IHBhcmVudE5vZGUsXG4gIG5leHRTaWJsaW5nOiBuZXh0U2libGluZyxcbiAgdGFnTmFtZTogdGFnTmFtZSxcbiAgc2V0VGV4dENvbnRlbnQ6IHNldFRleHRDb250ZW50LFxuICBzZXRTdHlsZVNjb3BlOiBzZXRTdHlsZVNjb3BlXG59KTtcblxuLyogICovXG5cbnZhciByZWYgPSB7XG4gIGNyZWF0ZSAoXywgdm5vZGUpIHtcbiAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gIH0sXG4gIHVwZGF0ZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgaWYgKG9sZFZub2RlLmRhdGEucmVmICE9PSB2bm9kZS5kYXRhLnJlZikge1xuICAgICAgcmVnaXN0ZXJSZWYob2xkVm5vZGUsIHRydWUpO1xuICAgICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICAgIH1cbiAgfSxcbiAgZGVzdHJveSAodm5vZGUpIHtcbiAgICByZWdpc3RlclJlZih2bm9kZSwgdHJ1ZSk7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyUmVmICh2bm9kZSwgaXNSZW1vdmFsKSB7XG4gIGNvbnN0IGtleSA9IHZub2RlLmRhdGEucmVmO1xuICBpZiAoIWlzRGVmKGtleSkpIHJldHVyblxuXG4gIGNvbnN0IHZtID0gdm5vZGUuY29udGV4dDtcbiAgY29uc3QgcmVmID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgfHwgdm5vZGUuZWxtO1xuICBjb25zdCByZWZzID0gdm0uJHJlZnM7XG4gIGlmIChpc1JlbW92YWwpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShyZWZzW2tleV0pKSB7XG4gICAgICByZW1vdmUocmVmc1trZXldLCByZWYpO1xuICAgIH0gZWxzZSBpZiAocmVmc1trZXldID09PSByZWYpIHtcbiAgICAgIHJlZnNba2V5XSA9IHVuZGVmaW5lZDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgaWYgKHZub2RlLmRhdGEucmVmSW5Gb3IpIHtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheShyZWZzW2tleV0pKSB7XG4gICAgICAgIHJlZnNba2V5XSA9IFtyZWZdO1xuICAgICAgfSBlbHNlIGlmIChyZWZzW2tleV0uaW5kZXhPZihyZWYpIDwgMCkge1xuICAgICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgICAgcmVmc1trZXldLnB1c2gocmVmKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVmc1trZXldID0gcmVmO1xuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIFZpcnR1YWwgRE9NIHBhdGNoaW5nIGFsZ29yaXRobSBiYXNlZCBvbiBTbmFiYmRvbSBieVxuICogU2ltb24gRnJpaXMgVmluZHVtIChAcGFsZGVwaW5kKVxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gKiBodHRwczovL2dpdGh1Yi5jb20vcGFsZGVwaW5kL3NuYWJiZG9tL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqXG4gKiBtb2RpZmllZCBieSBFdmFuIFlvdSAoQHl5eDk5MDgwMylcbiAqXG4gKiBOb3QgdHlwZS1jaGVja2luZyB0aGlzIGJlY2F1c2UgdGhpcyBmaWxlIGlzIHBlcmYtY3JpdGljYWwgYW5kIHRoZSBjb3N0XG4gKiBvZiBtYWtpbmcgZmxvdyB1bmRlcnN0YW5kIGl0IGlzIG5vdCB3b3J0aCBpdC5cbiAqL1xuXG5jb25zdCBlbXB0eU5vZGUgPSBuZXcgVk5vZGUoJycsIHt9LCBbXSk7XG5cbmNvbnN0IGhvb2tzID0gWydjcmVhdGUnLCAnYWN0aXZhdGUnLCAndXBkYXRlJywgJ3JlbW92ZScsICdkZXN0cm95J107XG5cbmZ1bmN0aW9uIHNhbWVWbm9kZSAoYSwgYikge1xuICByZXR1cm4gKFxuICAgIGEua2V5ID09PSBiLmtleSAmJiAoXG4gICAgICAoXG4gICAgICAgIGEudGFnID09PSBiLnRhZyAmJlxuICAgICAgICBhLmlzQ29tbWVudCA9PT0gYi5pc0NvbW1lbnQgJiZcbiAgICAgICAgaXNEZWYoYS5kYXRhKSA9PT0gaXNEZWYoYi5kYXRhKSAmJlxuICAgICAgICBzYW1lSW5wdXRUeXBlKGEsIGIpXG4gICAgICApIHx8IChcbiAgICAgICAgaXNUcnVlKGEuaXNBc3luY1BsYWNlaG9sZGVyKSAmJlxuICAgICAgICBhLmFzeW5jRmFjdG9yeSA9PT0gYi5hc3luY0ZhY3RvcnkgJiZcbiAgICAgICAgaXNVbmRlZihiLmFzeW5jRmFjdG9yeS5lcnJvcilcbiAgICAgIClcbiAgICApXG4gIClcbn1cblxuZnVuY3Rpb24gc2FtZUlucHV0VHlwZSAoYSwgYikge1xuICBpZiAoYS50YWcgIT09ICdpbnB1dCcpIHJldHVybiB0cnVlXG4gIGxldCBpO1xuICBjb25zdCB0eXBlQSA9IGlzRGVmKGkgPSBhLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gIGNvbnN0IHR5cGVCID0gaXNEZWYoaSA9IGIuZGF0YSkgJiYgaXNEZWYoaSA9IGkuYXR0cnMpICYmIGkudHlwZTtcbiAgcmV0dXJuIHR5cGVBID09PSB0eXBlQiB8fCBpc1RleHRJbnB1dFR5cGUodHlwZUEpICYmIGlzVGV4dElucHV0VHlwZSh0eXBlQilcbn1cblxuZnVuY3Rpb24gY3JlYXRlS2V5VG9PbGRJZHggKGNoaWxkcmVuLCBiZWdpbklkeCwgZW5kSWR4KSB7XG4gIGxldCBpLCBrZXk7XG4gIGNvbnN0IG1hcCA9IHt9O1xuICBmb3IgKGkgPSBiZWdpbklkeDsgaSA8PSBlbmRJZHg7ICsraSkge1xuICAgIGtleSA9IGNoaWxkcmVuW2ldLmtleTtcbiAgICBpZiAoaXNEZWYoa2V5KSkgbWFwW2tleV0gPSBpO1xuICB9XG4gIHJldHVybiBtYXBcbn1cblxuZnVuY3Rpb24gY3JlYXRlUGF0Y2hGdW5jdGlvbiAoYmFja2VuZCkge1xuICBsZXQgaSwgajtcbiAgY29uc3QgY2JzID0ge307XG5cbiAgY29uc3QgeyBtb2R1bGVzLCBub2RlT3BzIH0gPSBiYWNrZW5kO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7ICsraSkge1xuICAgIGNic1tob29rc1tpXV0gPSBbXTtcbiAgICBmb3IgKGogPSAwOyBqIDwgbW9kdWxlcy5sZW5ndGg7ICsraikge1xuICAgICAgaWYgKGlzRGVmKG1vZHVsZXNbal1baG9va3NbaV1dKSkge1xuICAgICAgICBjYnNbaG9va3NbaV1dLnB1c2gobW9kdWxlc1tqXVtob29rc1tpXV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGVtcHR5Tm9kZUF0IChlbG0pIHtcbiAgICByZXR1cm4gbmV3IFZOb2RlKG5vZGVPcHMudGFnTmFtZShlbG0pLnRvTG93ZXJDYXNlKCksIHt9LCBbXSwgdW5kZWZpbmVkLCBlbG0pXG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVSbUNiIChjaGlsZEVsbSwgbGlzdGVuZXJzKSB7XG4gICAgZnVuY3Rpb24gcmVtb3ZlJCQxICgpIHtcbiAgICAgIGlmICgtLXJlbW92ZSQkMS5saXN0ZW5lcnMgPT09IDApIHtcbiAgICAgICAgcmVtb3ZlTm9kZShjaGlsZEVsbSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJlbW92ZSQkMS5saXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG4gICAgcmV0dXJuIHJlbW92ZSQkMVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlTm9kZSAoZWwpIHtcbiAgICBjb25zdCBwYXJlbnQgPSBub2RlT3BzLnBhcmVudE5vZGUoZWwpO1xuICAgIC8vIGVsZW1lbnQgbWF5IGhhdmUgYWxyZWFkeSBiZWVuIHJlbW92ZWQgZHVlIHRvIHYtaHRtbCAvIHYtdGV4dFxuICAgIGlmIChpc0RlZihwYXJlbnQpKSB7XG4gICAgICBub2RlT3BzLnJlbW92ZUNoaWxkKHBhcmVudCwgZWwpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzVW5rbm93bkVsZW1lbnQkJDEgKHZub2RlLCBpblZQcmUpIHtcbiAgICByZXR1cm4gKFxuICAgICAgIWluVlByZSAmJlxuICAgICAgIXZub2RlLm5zICYmXG4gICAgICAhKFxuICAgICAgICBjb25maWcuaWdub3JlZEVsZW1lbnRzLmxlbmd0aCAmJlxuICAgICAgICBjb25maWcuaWdub3JlZEVsZW1lbnRzLnNvbWUoaWdub3JlID0+IHtcbiAgICAgICAgICByZXR1cm4gaXNSZWdFeHAoaWdub3JlKVxuICAgICAgICAgICAgPyBpZ25vcmUudGVzdCh2bm9kZS50YWcpXG4gICAgICAgICAgICA6IGlnbm9yZSA9PT0gdm5vZGUudGFnXG4gICAgICAgIH0pXG4gICAgICApICYmXG4gICAgICBjb25maWcuaXNVbmtub3duRWxlbWVudCh2bm9kZS50YWcpXG4gICAgKVxuICB9XG5cbiAgbGV0IGNyZWF0aW5nRWxtSW5WUHJlID0gMDtcblxuICBmdW5jdGlvbiBjcmVhdGVFbG0gKFxuICAgIHZub2RlLFxuICAgIGluc2VydGVkVm5vZGVRdWV1ZSxcbiAgICBwYXJlbnRFbG0sXG4gICAgcmVmRWxtLFxuICAgIG5lc3RlZCxcbiAgICBvd25lckFycmF5LFxuICAgIGluZGV4XG4gICkge1xuICAgIGlmIChpc0RlZih2bm9kZS5lbG0pICYmIGlzRGVmKG93bmVyQXJyYXkpKSB7XG4gICAgICAvLyBUaGlzIHZub2RlIHdhcyB1c2VkIGluIGEgcHJldmlvdXMgcmVuZGVyIVxuICAgICAgLy8gbm93IGl0J3MgdXNlZCBhcyBhIG5ldyBub2RlLCBvdmVyd3JpdGluZyBpdHMgZWxtIHdvdWxkIGNhdXNlXG4gICAgICAvLyBwb3RlbnRpYWwgcGF0Y2ggZXJyb3JzIGRvd24gdGhlIHJvYWQgd2hlbiBpdCdzIHVzZWQgYXMgYW4gaW5zZXJ0aW9uXG4gICAgICAvLyByZWZlcmVuY2Ugbm9kZS4gSW5zdGVhZCwgd2UgY2xvbmUgdGhlIG5vZGUgb24tZGVtYW5kIGJlZm9yZSBjcmVhdGluZ1xuICAgICAgLy8gYXNzb2NpYXRlZCBET00gZWxlbWVudCBmb3IgaXQuXG4gICAgICB2bm9kZSA9IG93bmVyQXJyYXlbaW5kZXhdID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gICAgfVxuXG4gICAgdm5vZGUuaXNSb290SW5zZXJ0ID0gIW5lc3RlZDsgLy8gZm9yIHRyYW5zaXRpb24gZW50ZXIgY2hlY2tcbiAgICBpZiAoY3JlYXRlQ29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29uc3QgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgY29uc3QgY2hpbGRyZW4gPSB2bm9kZS5jaGlsZHJlbjtcbiAgICBjb25zdCB0YWcgPSB2bm9kZS50YWc7XG4gICAgaWYgKGlzRGVmKHRhZykpIHtcbiAgICAgIHtcbiAgICAgICAgaWYgKGRhdGEgJiYgZGF0YS5wcmUpIHtcbiAgICAgICAgICBjcmVhdGluZ0VsbUluVlByZSsrO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1Vua25vd25FbGVtZW50JCQxKHZub2RlLCBjcmVhdGluZ0VsbUluVlByZSkpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgJ1Vua25vd24gY3VzdG9tIGVsZW1lbnQ6IDwnICsgdGFnICsgJz4gLSBkaWQgeW91ICcgK1xuICAgICAgICAgICAgJ3JlZ2lzdGVyIHRoZSBjb21wb25lbnQgY29ycmVjdGx5PyBGb3IgcmVjdXJzaXZlIGNvbXBvbmVudHMsICcgK1xuICAgICAgICAgICAgJ21ha2Ugc3VyZSB0byBwcm92aWRlIHRoZSBcIm5hbWVcIiBvcHRpb24uJyxcbiAgICAgICAgICAgIHZub2RlLmNvbnRleHRcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZub2RlLmVsbSA9IHZub2RlLm5zXG4gICAgICAgID8gbm9kZU9wcy5jcmVhdGVFbGVtZW50TlModm5vZGUubnMsIHRhZylcbiAgICAgICAgOiBub2RlT3BzLmNyZWF0ZUVsZW1lbnQodGFnLCB2bm9kZSk7XG4gICAgICBzZXRTY29wZSh2bm9kZSk7XG5cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAge1xuICAgICAgICBjcmVhdGVDaGlsZHJlbih2bm9kZSwgY2hpbGRyZW4sIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICB9XG4gICAgICAgIGluc2VydChwYXJlbnRFbG0sIHZub2RlLmVsbSwgcmVmRWxtKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGRhdGEgJiYgZGF0YS5wcmUpIHtcbiAgICAgICAgY3JlYXRpbmdFbG1JblZQcmUtLTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzVHJ1ZSh2bm9kZS5pc0NvbW1lbnQpKSB7XG4gICAgICB2bm9kZS5lbG0gPSBub2RlT3BzLmNyZWF0ZUNvbW1lbnQodm5vZGUudGV4dCk7XG4gICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZub2RlLmVsbSA9IG5vZGVPcHMuY3JlYXRlVGV4dE5vZGUodm5vZGUudGV4dCk7XG4gICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkge1xuICAgIGxldCBpID0gdm5vZGUuZGF0YTtcbiAgICBpZiAoaXNEZWYoaSkpIHtcbiAgICAgIGNvbnN0IGlzUmVhY3RpdmF0ZWQgPSBpc0RlZih2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkgJiYgaS5rZWVwQWxpdmU7XG4gICAgICBpZiAoaXNEZWYoaSA9IGkuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHtcbiAgICAgICAgaSh2bm9kZSwgZmFsc2UgLyogaHlkcmF0aW5nICovKTtcbiAgICAgIH1cbiAgICAgIC8vIGFmdGVyIGNhbGxpbmcgdGhlIGluaXQgaG9vaywgaWYgdGhlIHZub2RlIGlzIGEgY2hpbGQgY29tcG9uZW50XG4gICAgICAvLyBpdCBzaG91bGQndmUgY3JlYXRlZCBhIGNoaWxkIGluc3RhbmNlIGFuZCBtb3VudGVkIGl0LiB0aGUgY2hpbGRcbiAgICAgIC8vIGNvbXBvbmVudCBhbHNvIGhhcyBzZXQgdGhlIHBsYWNlaG9sZGVyIHZub2RlJ3MgZWxtLlxuICAgICAgLy8gaW4gdGhhdCBjYXNlIHdlIGNhbiBqdXN0IHJldHVybiB0aGUgZWxlbWVudCBhbmQgYmUgZG9uZS5cbiAgICAgIGlmIChpc0RlZih2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgICAgICBpZiAoaXNUcnVlKGlzUmVhY3RpdmF0ZWQpKSB7XG4gICAgICAgICAgcmVhY3RpdmF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0Q29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgaWYgKGlzRGVmKHZub2RlLmRhdGEucGVuZGluZ0luc2VydCkpIHtcbiAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoLmFwcGx5KGluc2VydGVkVm5vZGVRdWV1ZSwgdm5vZGUuZGF0YS5wZW5kaW5nSW5zZXJ0KTtcbiAgICAgIHZub2RlLmRhdGEucGVuZGluZ0luc2VydCA9IG51bGw7XG4gICAgfVxuICAgIHZub2RlLmVsbSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlLiRlbDtcbiAgICBpZiAoaXNQYXRjaGFibGUodm5vZGUpKSB7XG4gICAgICBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgIHNldFNjb3BlKHZub2RlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZW1wdHkgY29tcG9uZW50IHJvb3QuXG4gICAgICAvLyBza2lwIGFsbCBlbGVtZW50LXJlbGF0ZWQgbW9kdWxlcyBleGNlcHQgZm9yIHJlZiAoIzM0NTUpXG4gICAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gICAgICAvLyBtYWtlIHN1cmUgdG8gaW52b2tlIHRoZSBpbnNlcnQgaG9va1xuICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2godm5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWN0aXZhdGVDb21wb25lbnQgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgcmVmRWxtKSB7XG4gICAgbGV0IGk7XG4gICAgLy8gaGFjayBmb3IgIzQzMzk6IGEgcmVhY3RpdmF0ZWQgY29tcG9uZW50IHdpdGggaW5uZXIgdHJhbnNpdGlvblxuICAgIC8vIGRvZXMgbm90IHRyaWdnZXIgYmVjYXVzZSB0aGUgaW5uZXIgbm9kZSdzIGNyZWF0ZWQgaG9va3MgYXJlIG5vdCBjYWxsZWRcbiAgICAvLyBhZ2Fpbi4gSXQncyBub3QgaWRlYWwgdG8gaW52b2x2ZSBtb2R1bGUtc3BlY2lmaWMgbG9naWMgaW4gaGVyZSBidXRcbiAgICAvLyB0aGVyZSBkb2Vzbid0IHNlZW0gdG8gYmUgYSBiZXR0ZXIgd2F5IHRvIGRvIGl0LlxuICAgIGxldCBpbm5lck5vZGUgPSB2bm9kZTtcbiAgICB3aGlsZSAoaW5uZXJOb2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICBpbm5lck5vZGUgPSBpbm5lck5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgICAgaWYgKGlzRGVmKGkgPSBpbm5lck5vZGUuZGF0YSkgJiYgaXNEZWYoaSA9IGkudHJhbnNpdGlvbikpIHtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGNicy5hY3RpdmF0ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGNicy5hY3RpdmF0ZVtpXShlbXB0eU5vZGUsIGlubmVyTm9kZSk7XG4gICAgICAgIH1cbiAgICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2goaW5uZXJOb2RlKTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gdW5saWtlIGEgbmV3bHkgY3JlYXRlZCBjb21wb25lbnQsXG4gICAgLy8gYSByZWFjdGl2YXRlZCBrZWVwLWFsaXZlIGNvbXBvbmVudCBkb2Vzbid0IGluc2VydCBpdHNlbGZcbiAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gIH1cblxuICBmdW5jdGlvbiBpbnNlcnQgKHBhcmVudCwgZWxtLCByZWYkJDEpIHtcbiAgICBpZiAoaXNEZWYocGFyZW50KSkge1xuICAgICAgaWYgKGlzRGVmKHJlZiQkMSkpIHtcbiAgICAgICAgaWYgKG5vZGVPcHMucGFyZW50Tm9kZShyZWYkJDEpID09PSBwYXJlbnQpIHtcbiAgICAgICAgICBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnQsIGVsbSwgcmVmJCQxKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbm9kZU9wcy5hcHBlbmRDaGlsZChwYXJlbnQsIGVsbSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ2hpbGRyZW4gKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgICB7XG4gICAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhjaGlsZHJlbik7XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIGNyZWF0ZUVsbShjaGlsZHJlbltpXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5lbG0sIG51bGwsIHRydWUsIGNoaWxkcmVuLCBpKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKHZub2RlLnRleHQpKSB7XG4gICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHZub2RlLmVsbSwgbm9kZU9wcy5jcmVhdGVUZXh0Tm9kZShTdHJpbmcodm5vZGUudGV4dCkpKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1BhdGNoYWJsZSAodm5vZGUpIHtcbiAgICB3aGlsZSAodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgIHZub2RlID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgIH1cbiAgICByZXR1cm4gaXNEZWYodm5vZGUudGFnKVxuICB9XG5cbiAgZnVuY3Rpb24gaW52b2tlQ3JlYXRlSG9va3MgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kpIHtcbiAgICAgIGNicy5jcmVhdGVbaV0oZW1wdHlOb2RlLCB2bm9kZSk7XG4gICAgfVxuICAgIGkgPSB2bm9kZS5kYXRhLmhvb2s7IC8vIFJldXNlIHZhcmlhYmxlXG4gICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICBpZiAoaXNEZWYoaS5jcmVhdGUpKSBpLmNyZWF0ZShlbXB0eU5vZGUsIHZub2RlKTtcbiAgICAgIGlmIChpc0RlZihpLmluc2VydCkpIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKHZub2RlKTtcbiAgICB9XG4gIH1cblxuICAvLyBzZXQgc2NvcGUgaWQgYXR0cmlidXRlIGZvciBzY29wZWQgQ1NTLlxuICAvLyB0aGlzIGlzIGltcGxlbWVudGVkIGFzIGEgc3BlY2lhbCBjYXNlIHRvIGF2b2lkIHRoZSBvdmVyaGVhZFxuICAvLyBvZiBnb2luZyB0aHJvdWdoIHRoZSBub3JtYWwgYXR0cmlidXRlIHBhdGNoaW5nIHByb2Nlc3MuXG4gIGZ1bmN0aW9uIHNldFNjb3BlICh2bm9kZSkge1xuICAgIGxldCBpO1xuICAgIGlmIChpc0RlZihpID0gdm5vZGUuZm5TY29wZUlkKSkge1xuICAgICAgbm9kZU9wcy5zZXRTdHlsZVNjb3BlKHZub2RlLmVsbSwgaSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxldCBhbmNlc3RvciA9IHZub2RlO1xuICAgICAgd2hpbGUgKGFuY2VzdG9yKSB7XG4gICAgICAgIGlmIChpc0RlZihpID0gYW5jZXN0b3IuY29udGV4dCkgJiYgaXNEZWYoaSA9IGkuJG9wdGlvbnMuX3Njb3BlSWQpKSB7XG4gICAgICAgICAgbm9kZU9wcy5zZXRTdHlsZVNjb3BlKHZub2RlLmVsbSwgaSk7XG4gICAgICAgIH1cbiAgICAgICAgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnQ7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGZvciBzbG90IGNvbnRlbnQgdGhleSBzaG91bGQgYWxzbyBnZXQgdGhlIHNjb3BlSWQgZnJvbSB0aGUgaG9zdCBpbnN0YW5jZS5cbiAgICBpZiAoaXNEZWYoaSA9IGFjdGl2ZUluc3RhbmNlKSAmJlxuICAgICAgaSAhPT0gdm5vZGUuY29udGV4dCAmJlxuICAgICAgaSAhPT0gdm5vZGUuZm5Db250ZXh0ICYmXG4gICAgICBpc0RlZihpID0gaS4kb3B0aW9ucy5fc2NvcGVJZClcbiAgICApIHtcbiAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZFZub2RlcyAocGFyZW50RWxtLCByZWZFbG0sIHZub2Rlcywgc3RhcnRJZHgsIGVuZElkeCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xuICAgICAgY3JlYXRlRWxtKHZub2Rlc1tzdGFydElkeF0sIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0sIGZhbHNlLCB2bm9kZXMsIHN0YXJ0SWR4KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VEZXN0cm95SG9vayAodm5vZGUpIHtcbiAgICBsZXQgaSwgajtcbiAgICBjb25zdCBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5kZXN0cm95KSkgaSh2bm9kZSk7XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmRlc3Ryb3kubGVuZ3RoOyArK2kpIGNicy5kZXN0cm95W2ldKHZub2RlKTtcbiAgICB9XG4gICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jaGlsZHJlbikpIHtcbiAgICAgIGZvciAoaiA9IDA7IGogPCB2bm9kZS5jaGlsZHJlbi5sZW5ndGg7ICsraikge1xuICAgICAgICBpbnZva2VEZXN0cm95SG9vayh2bm9kZS5jaGlsZHJlbltqXSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlVm5vZGVzIChwYXJlbnRFbG0sIHZub2Rlcywgc3RhcnRJZHgsIGVuZElkeCkge1xuICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICAgIGNvbnN0IGNoID0gdm5vZGVzW3N0YXJ0SWR4XTtcbiAgICAgIGlmIChpc0RlZihjaCkpIHtcbiAgICAgICAgaWYgKGlzRGVmKGNoLnRhZykpIHtcbiAgICAgICAgICByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGNoKTtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhjaCk7XG4gICAgICAgIH0gZWxzZSB7IC8vIFRleHQgbm9kZVxuICAgICAgICAgIHJlbW92ZU5vZGUoY2guZWxtKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2sgKHZub2RlLCBybSkge1xuICAgIGlmIChpc0RlZihybSkgfHwgaXNEZWYodm5vZGUuZGF0YSkpIHtcbiAgICAgIGxldCBpO1xuICAgICAgY29uc3QgbGlzdGVuZXJzID0gY2JzLnJlbW92ZS5sZW5ndGggKyAxO1xuICAgICAgaWYgKGlzRGVmKHJtKSkge1xuICAgICAgICAvLyB3ZSBoYXZlIGEgcmVjdXJzaXZlbHkgcGFzc2VkIGRvd24gcm0gY2FsbGJhY2tcbiAgICAgICAgLy8gaW5jcmVhc2UgdGhlIGxpc3RlbmVycyBjb3VudFxuICAgICAgICBybS5saXN0ZW5lcnMgKz0gbGlzdGVuZXJzO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZGlyZWN0bHkgcmVtb3ZpbmdcbiAgICAgICAgcm0gPSBjcmVhdGVSbUNiKHZub2RlLmVsbSwgbGlzdGVuZXJzKTtcbiAgICAgIH1cbiAgICAgIC8vIHJlY3Vyc2l2ZWx5IGludm9rZSBob29rcyBvbiBjaGlsZCBjb21wb25lbnQgcm9vdCBub2RlXG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpc0RlZihpID0gaS5fdm5vZGUpICYmIGlzRGVmKGkuZGF0YSkpIHtcbiAgICAgICAgcmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayhpLCBybSk7XG4gICAgICB9XG4gICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLnJlbW92ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICBjYnMucmVtb3ZlW2ldKHZub2RlLCBybSk7XG4gICAgICB9XG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucmVtb3ZlKSkge1xuICAgICAgICBpKHZub2RlLCBybSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBybSgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZW1vdmVOb2RlKHZub2RlLmVsbSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlQ2hpbGRyZW4gKHBhcmVudEVsbSwgb2xkQ2gsIG5ld0NoLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpIHtcbiAgICBsZXQgb2xkU3RhcnRJZHggPSAwO1xuICAgIGxldCBuZXdTdGFydElkeCA9IDA7XG4gICAgbGV0IG9sZEVuZElkeCA9IG9sZENoLmxlbmd0aCAtIDE7XG4gICAgbGV0IG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFswXTtcbiAgICBsZXQgb2xkRW5kVm5vZGUgPSBvbGRDaFtvbGRFbmRJZHhdO1xuICAgIGxldCBuZXdFbmRJZHggPSBuZXdDaC5sZW5ndGggLSAxO1xuICAgIGxldCBuZXdTdGFydFZub2RlID0gbmV3Q2hbMF07XG4gICAgbGV0IG5ld0VuZFZub2RlID0gbmV3Q2hbbmV3RW5kSWR4XTtcbiAgICBsZXQgb2xkS2V5VG9JZHgsIGlkeEluT2xkLCB2bm9kZVRvTW92ZSwgcmVmRWxtO1xuXG4gICAgLy8gcmVtb3ZlT25seSBpcyBhIHNwZWNpYWwgZmxhZyB1c2VkIG9ubHkgYnkgPHRyYW5zaXRpb24tZ3JvdXA+XG4gICAgLy8gdG8gZW5zdXJlIHJlbW92ZWQgZWxlbWVudHMgc3RheSBpbiBjb3JyZWN0IHJlbGF0aXZlIHBvc2l0aW9uc1xuICAgIC8vIGR1cmluZyBsZWF2aW5nIHRyYW5zaXRpb25zXG4gICAgY29uc3QgY2FuTW92ZSA9ICFyZW1vdmVPbmx5O1xuXG4gICAge1xuICAgICAgY2hlY2tEdXBsaWNhdGVLZXlzKG5ld0NoKTtcbiAgICB9XG5cbiAgICB3aGlsZSAob2xkU3RhcnRJZHggPD0gb2xkRW5kSWR4ICYmIG5ld1N0YXJ0SWR4IDw9IG5ld0VuZElkeCkge1xuICAgICAgaWYgKGlzVW5kZWYob2xkU3RhcnRWbm9kZSkpIHtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdOyAvLyBWbm9kZSBoYXMgYmVlbiBtb3ZlZCBsZWZ0XG4gICAgICB9IGVsc2UgaWYgKGlzVW5kZWYob2xkRW5kVm5vZGUpKSB7XG4gICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHtcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRTdGFydFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld0VuZFZub2RlKSkge1xuICAgICAgICBwYXRjaFZub2RlKG9sZEVuZFZub2RlLCBuZXdFbmRWbm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBuZXdDaCwgbmV3RW5kSWR4KTtcbiAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICAgIG5ld0VuZFZub2RlID0gbmV3Q2hbLS1uZXdFbmRJZHhdO1xuICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7IC8vIFZub2RlIG1vdmVkIHJpZ2h0XG4gICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld0VuZElkeCk7XG4gICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgbm9kZU9wcy5uZXh0U2libGluZyhvbGRFbmRWbm9kZS5lbG0pKTtcbiAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdO1xuICAgICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZEVuZFZub2RlLCBuZXdTdGFydFZub2RlKSkgeyAvLyBWbm9kZSBtb3ZlZCBsZWZ0XG4gICAgICAgIHBhdGNoVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZEVuZFZub2RlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzVW5kZWYob2xkS2V5VG9JZHgpKSBvbGRLZXlUb0lkeCA9IGNyZWF0ZUtleVRvT2xkSWR4KG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTtcbiAgICAgICAgaWR4SW5PbGQgPSBpc0RlZihuZXdTdGFydFZub2RlLmtleSlcbiAgICAgICAgICA/IG9sZEtleVRvSWR4W25ld1N0YXJ0Vm5vZGUua2V5XVxuICAgICAgICAgIDogZmluZElkeEluT2xkKG5ld1N0YXJ0Vm5vZGUsIG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTtcbiAgICAgICAgaWYgKGlzVW5kZWYoaWR4SW5PbGQpKSB7IC8vIE5ldyBlbGVtZW50XG4gICAgICAgICAgY3JlYXRlRWxtKG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgZmFsc2UsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdm5vZGVUb01vdmUgPSBvbGRDaFtpZHhJbk9sZF07XG4gICAgICAgICAgaWYgKHNhbWVWbm9kZSh2bm9kZVRvTW92ZSwgbmV3U3RhcnRWbm9kZSkpIHtcbiAgICAgICAgICAgIHBhdGNoVm5vZGUodm5vZGVUb01vdmUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgICAgIG9sZENoW2lkeEluT2xkXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIGNhbk1vdmUgJiYgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50RWxtLCB2bm9kZVRvTW92ZS5lbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gc2FtZSBrZXkgYnV0IGRpZmZlcmVudCBlbGVtZW50LiB0cmVhdCBhcyBuZXcgZWxlbWVudFxuICAgICAgICAgICAgY3JlYXRlRWxtKG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCBvbGRTdGFydFZub2RlLmVsbSwgZmFsc2UsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG9sZFN0YXJ0SWR4ID4gb2xkRW5kSWR4KSB7XG4gICAgICByZWZFbG0gPSBpc1VuZGVmKG5ld0NoW25ld0VuZElkeCArIDFdKSA/IG51bGwgOiBuZXdDaFtuZXdFbmRJZHggKyAxXS5lbG07XG4gICAgICBhZGRWbm9kZXMocGFyZW50RWxtLCByZWZFbG0sIG5ld0NoLCBuZXdTdGFydElkeCwgbmV3RW5kSWR4LCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgIH0gZWxzZSBpZiAobmV3U3RhcnRJZHggPiBuZXdFbmRJZHgpIHtcbiAgICAgIHJlbW92ZVZub2RlcyhwYXJlbnRFbG0sIG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjaGVja0R1cGxpY2F0ZUtleXMgKGNoaWxkcmVuKSB7XG4gICAgY29uc3Qgc2VlbktleXMgPSB7fTtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCB2bm9kZSA9IGNoaWxkcmVuW2ldO1xuICAgICAgY29uc3Qga2V5ID0gdm5vZGUua2V5O1xuICAgICAgaWYgKGlzRGVmKGtleSkpIHtcbiAgICAgICAgaWYgKHNlZW5LZXlzW2tleV0pIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgYER1cGxpY2F0ZSBrZXlzIGRldGVjdGVkOiAnJHtrZXl9Jy4gVGhpcyBtYXkgY2F1c2UgYW4gdXBkYXRlIGVycm9yLmAsXG4gICAgICAgICAgICB2bm9kZS5jb250ZXh0XG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZWVuS2V5c1trZXldID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGZpbmRJZHhJbk9sZCAobm9kZSwgb2xkQ2gsIHN0YXJ0LCBlbmQpIHtcbiAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgICAgY29uc3QgYyA9IG9sZENoW2ldO1xuICAgICAgaWYgKGlzRGVmKGMpICYmIHNhbWVWbm9kZShub2RlLCBjKSkgcmV0dXJuIGlcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXRjaFZub2RlIChcbiAgICBvbGRWbm9kZSxcbiAgICB2bm9kZSxcbiAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgb3duZXJBcnJheSxcbiAgICBpbmRleCxcbiAgICByZW1vdmVPbmx5XG4gICkge1xuICAgIGlmIChvbGRWbm9kZSA9PT0gdm5vZGUpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGlmIChpc0RlZih2bm9kZS5lbG0pICYmIGlzRGVmKG93bmVyQXJyYXkpKSB7XG4gICAgICAvLyBjbG9uZSByZXVzZWQgdm5vZGVcbiAgICAgIHZub2RlID0gb3duZXJBcnJheVtpbmRleF0gPSBjbG9uZVZOb2RlKHZub2RlKTtcbiAgICB9XG5cbiAgICBjb25zdCBlbG0gPSB2bm9kZS5lbG0gPSBvbGRWbm9kZS5lbG07XG5cbiAgICBpZiAoaXNUcnVlKG9sZFZub2RlLmlzQXN5bmNQbGFjZWhvbGRlcikpIHtcbiAgICAgIGlmIChpc0RlZih2bm9kZS5hc3luY0ZhY3RvcnkucmVzb2x2ZWQpKSB7XG4gICAgICAgIGh5ZHJhdGUob2xkVm5vZGUuZWxtLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZub2RlLmlzQXN5bmNQbGFjZWhvbGRlciA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyByZXVzZSBlbGVtZW50IGZvciBzdGF0aWMgdHJlZXMuXG4gICAgLy8gbm90ZSB3ZSBvbmx5IGRvIHRoaXMgaWYgdGhlIHZub2RlIGlzIGNsb25lZCAtXG4gICAgLy8gaWYgdGhlIG5ldyBub2RlIGlzIG5vdCBjbG9uZWQgaXQgbWVhbnMgdGhlIHJlbmRlciBmdW5jdGlvbnMgaGF2ZSBiZWVuXG4gICAgLy8gcmVzZXQgYnkgdGhlIGhvdC1yZWxvYWQtYXBpIGFuZCB3ZSBuZWVkIHRvIGRvIGEgcHJvcGVyIHJlLXJlbmRlci5cbiAgICBpZiAoaXNUcnVlKHZub2RlLmlzU3RhdGljKSAmJlxuICAgICAgaXNUcnVlKG9sZFZub2RlLmlzU3RhdGljKSAmJlxuICAgICAgdm5vZGUua2V5ID09PSBvbGRWbm9kZS5rZXkgJiZcbiAgICAgIChpc1RydWUodm5vZGUuaXNDbG9uZWQpIHx8IGlzVHJ1ZSh2bm9kZS5pc09uY2UpKVxuICAgICkge1xuICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgPSBvbGRWbm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGxldCBpO1xuICAgIGNvbnN0IGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wcmVwYXRjaCkpIHtcbiAgICAgIGkob2xkVm5vZGUsIHZub2RlKTtcbiAgICB9XG5cbiAgICBjb25zdCBvbGRDaCA9IG9sZFZub2RlLmNoaWxkcmVuO1xuICAgIGNvbnN0IGNoID0gdm5vZGUuY2hpbGRyZW47XG4gICAgaWYgKGlzRGVmKGRhdGEpICYmIGlzUGF0Y2hhYmxlKHZub2RlKSkge1xuICAgICAgZm9yIChpID0gMDsgaSA8IGNicy51cGRhdGUubGVuZ3RoOyArK2kpIGNicy51cGRhdGVbaV0ob2xkVm5vZGUsIHZub2RlKTtcbiAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS51cGRhdGUpKSBpKG9sZFZub2RlLCB2bm9kZSk7XG4gICAgfVxuICAgIGlmIChpc1VuZGVmKHZub2RlLnRleHQpKSB7XG4gICAgICBpZiAoaXNEZWYob2xkQ2gpICYmIGlzRGVmKGNoKSkge1xuICAgICAgICBpZiAob2xkQ2ggIT09IGNoKSB1cGRhdGVDaGlsZHJlbihlbG0sIG9sZENoLCBjaCwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCByZW1vdmVPbmx5KTtcbiAgICAgIH0gZWxzZSBpZiAoaXNEZWYoY2gpKSB7XG4gICAgICAgIHtcbiAgICAgICAgICBjaGVja0R1cGxpY2F0ZUtleXMoY2gpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc0RlZihvbGRWbm9kZS50ZXh0KSkgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sICcnKTtcbiAgICAgICAgYWRkVm5vZGVzKGVsbSwgbnVsbCwgY2gsIDAsIGNoLmxlbmd0aCAtIDEsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZENoKSkge1xuICAgICAgICByZW1vdmVWbm9kZXMoZWxtLCBvbGRDaCwgMCwgb2xkQ2gubGVuZ3RoIC0gMSk7XG4gICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZFZub2RlLnRleHQpKSB7XG4gICAgICAgIG5vZGVPcHMuc2V0VGV4dENvbnRlbnQoZWxtLCAnJyk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChvbGRWbm9kZS50ZXh0ICE9PSB2bm9kZS50ZXh0KSB7XG4gICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgdm5vZGUudGV4dCk7XG4gICAgfVxuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnBvc3RwYXRjaCkpIGkob2xkVm5vZGUsIHZub2RlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VJbnNlcnRIb29rICh2bm9kZSwgcXVldWUsIGluaXRpYWwpIHtcbiAgICAvLyBkZWxheSBpbnNlcnQgaG9va3MgZm9yIGNvbXBvbmVudCByb290IG5vZGVzLCBpbnZva2UgdGhlbSBhZnRlciB0aGVcbiAgICAvLyBlbGVtZW50IGlzIHJlYWxseSBpbnNlcnRlZFxuICAgIGlmIChpc1RydWUoaW5pdGlhbCkgJiYgaXNEZWYodm5vZGUucGFyZW50KSkge1xuICAgICAgdm5vZGUucGFyZW50LmRhdGEucGVuZGluZ0luc2VydCA9IHF1ZXVlO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHF1ZXVlLmxlbmd0aDsgKytpKSB7XG4gICAgICAgIHF1ZXVlW2ldLmRhdGEuaG9vay5pbnNlcnQocXVldWVbaV0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGxldCBoeWRyYXRpb25CYWlsZWQgPSBmYWxzZTtcbiAgLy8gbGlzdCBvZiBtb2R1bGVzIHRoYXQgY2FuIHNraXAgY3JlYXRlIGhvb2sgZHVyaW5nIGh5ZHJhdGlvbiBiZWNhdXNlIHRoZXlcbiAgLy8gYXJlIGFscmVhZHkgcmVuZGVyZWQgb24gdGhlIGNsaWVudCBvciBoYXMgbm8gbmVlZCBmb3IgaW5pdGlhbGl6YXRpb25cbiAgLy8gTm90ZTogc3R5bGUgaXMgZXhjbHVkZWQgYmVjYXVzZSBpdCByZWxpZXMgb24gaW5pdGlhbCBjbG9uZSBmb3IgZnV0dXJlXG4gIC8vIGRlZXAgdXBkYXRlcyAoIzcwNjMpLlxuICBjb25zdCBpc1JlbmRlcmVkTW9kdWxlID0gbWFrZU1hcCgnYXR0cnMsY2xhc3Msc3RhdGljQ2xhc3Msc3RhdGljU3R5bGUsa2V5Jyk7XG5cbiAgLy8gTm90ZTogdGhpcyBpcyBhIGJyb3dzZXItb25seSBmdW5jdGlvbiBzbyB3ZSBjYW4gYXNzdW1lIGVsbXMgYXJlIERPTSBub2Rlcy5cbiAgZnVuY3Rpb24gaHlkcmF0ZSAoZWxtLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpIHtcbiAgICBsZXQgaTtcbiAgICBjb25zdCB7IHRhZywgZGF0YSwgY2hpbGRyZW4gfSA9IHZub2RlO1xuICAgIGluVlByZSA9IGluVlByZSB8fCAoZGF0YSAmJiBkYXRhLnByZSk7XG4gICAgdm5vZGUuZWxtID0gZWxtO1xuXG4gICAgaWYgKGlzVHJ1ZSh2bm9kZS5pc0NvbW1lbnQpICYmIGlzRGVmKHZub2RlLmFzeW5jRmFjdG9yeSkpIHtcbiAgICAgIHZub2RlLmlzQXN5bmNQbGFjZWhvbGRlciA9IHRydWU7XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cbiAgICAvLyBhc3NlcnQgbm9kZSBtYXRjaFxuICAgIHtcbiAgICAgIGlmICghYXNzZXJ0Tm9kZU1hdGNoKGVsbSwgdm5vZGUsIGluVlByZSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgfVxuICAgIGlmIChpc0RlZihkYXRhKSkge1xuICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLmluaXQpKSBpKHZub2RlLCB0cnVlIC8qIGh5ZHJhdGluZyAqLyk7XG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICAvLyBjaGlsZCBjb21wb25lbnQuIGl0IHNob3VsZCBoYXZlIGh5ZHJhdGVkIGl0cyBvd24gdHJlZS5cbiAgICAgICAgaW5pdENvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGlzRGVmKHRhZykpIHtcbiAgICAgIGlmIChpc0RlZihjaGlsZHJlbikpIHtcbiAgICAgICAgLy8gZW1wdHkgZWxlbWVudCwgYWxsb3cgY2xpZW50IHRvIHBpY2sgdXAgYW5kIHBvcHVsYXRlIGNoaWxkcmVuXG4gICAgICAgIGlmICghZWxtLmhhc0NoaWxkTm9kZXMoKSkge1xuICAgICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB2LWh0bWwgYW5kIGRvbVByb3BzOiBpbm5lckhUTUxcbiAgICAgICAgICBpZiAoaXNEZWYoaSA9IGRhdGEpICYmIGlzRGVmKGkgPSBpLmRvbVByb3BzKSAmJiBpc0RlZihpID0gaS5pbm5lckhUTUwpKSB7XG4gICAgICAgICAgICBpZiAoaSAhPT0gZWxtLmlubmVySFRNTCkge1xuICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgICAgICFoeWRyYXRpb25CYWlsZWRcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgaHlkcmF0aW9uQmFpbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ1BhcmVudDogJywgZWxtKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ3NlcnZlciBpbm5lckhUTUw6ICcsIGkpO1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignY2xpZW50IGlubmVySFRNTDogJywgZWxtLmlubmVySFRNTCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGl0ZXJhdGUgYW5kIGNvbXBhcmUgY2hpbGRyZW4gbGlzdHNcbiAgICAgICAgICAgIGxldCBjaGlsZHJlbk1hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgIGxldCBjaGlsZE5vZGUgPSBlbG0uZmlyc3RDaGlsZDtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgaWYgKCFjaGlsZE5vZGUgfHwgIWh5ZHJhdGUoY2hpbGROb2RlLCBjaGlsZHJlbltpXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpKSB7XG4gICAgICAgICAgICAgICAgY2hpbGRyZW5NYXRjaCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgLy8gaWYgY2hpbGROb2RlIGlzIG5vdCBudWxsLCBpdCBtZWFucyB0aGUgYWN0dWFsIGNoaWxkTm9kZXMgbGlzdCBpc1xuICAgICAgICAgICAgLy8gbG9uZ2VyIHRoYW4gdGhlIHZpcnR1YWwgY2hpbGRyZW4gbGlzdC5cbiAgICAgICAgICAgIGlmICghY2hpbGRyZW5NYXRjaCB8fCBjaGlsZE5vZGUpIHtcbiAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcgJiZcbiAgICAgICAgICAgICAgICAhaHlkcmF0aW9uQmFpbGVkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIGh5ZHJhdGlvbkJhaWxlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdNaXNtYXRjaGluZyBjaGlsZE5vZGVzIHZzLiBWTm9kZXM6ICcsIGVsbS5jaGlsZE5vZGVzLCBjaGlsZHJlbik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgICAgbGV0IGZ1bGxJbnZva2UgPSBmYWxzZTtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gZGF0YSkge1xuICAgICAgICAgIGlmICghaXNSZW5kZXJlZE1vZHVsZShrZXkpKSB7XG4gICAgICAgICAgICBmdWxsSW52b2tlID0gdHJ1ZTtcbiAgICAgICAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFmdWxsSW52b2tlICYmIGRhdGFbJ2NsYXNzJ10pIHtcbiAgICAgICAgICAvLyBlbnN1cmUgY29sbGVjdGluZyBkZXBzIGZvciBkZWVwIGNsYXNzIGJpbmRpbmdzIGZvciBmdXR1cmUgdXBkYXRlc1xuICAgICAgICAgIHRyYXZlcnNlKGRhdGFbJ2NsYXNzJ10pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlbG0uZGF0YSAhPT0gdm5vZGUudGV4dCkge1xuICAgICAgZWxtLmRhdGEgPSB2bm9kZS50ZXh0O1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgZnVuY3Rpb24gYXNzZXJ0Tm9kZU1hdGNoIChub2RlLCB2bm9kZSwgaW5WUHJlKSB7XG4gICAgaWYgKGlzRGVmKHZub2RlLnRhZykpIHtcbiAgICAgIHJldHVybiB2bm9kZS50YWcuaW5kZXhPZigndnVlLWNvbXBvbmVudCcpID09PSAwIHx8IChcbiAgICAgICAgIWlzVW5rbm93bkVsZW1lbnQkJDEodm5vZGUsIGluVlByZSkgJiZcbiAgICAgICAgdm5vZGUudGFnLnRvTG93ZXJDYXNlKCkgPT09IChub2RlLnRhZ05hbWUgJiYgbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkpXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBub2RlLm5vZGVUeXBlID09PSAodm5vZGUuaXNDb21tZW50ID8gOCA6IDMpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIHBhdGNoIChvbGRWbm9kZSwgdm5vZGUsIGh5ZHJhdGluZywgcmVtb3ZlT25seSkge1xuICAgIGlmIChpc1VuZGVmKHZub2RlKSkge1xuICAgICAgaWYgKGlzRGVmKG9sZFZub2RlKSkgaW52b2tlRGVzdHJveUhvb2sob2xkVm5vZGUpO1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgbGV0IGlzSW5pdGlhbFBhdGNoID0gZmFsc2U7XG4gICAgY29uc3QgaW5zZXJ0ZWRWbm9kZVF1ZXVlID0gW107XG5cbiAgICBpZiAoaXNVbmRlZihvbGRWbm9kZSkpIHtcbiAgICAgIC8vIGVtcHR5IG1vdW50IChsaWtlbHkgYXMgY29tcG9uZW50KSwgY3JlYXRlIG5ldyByb290IGVsZW1lbnRcbiAgICAgIGlzSW5pdGlhbFBhdGNoID0gdHJ1ZTtcbiAgICAgIGNyZWF0ZUVsbSh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgaXNSZWFsRWxlbWVudCA9IGlzRGVmKG9sZFZub2RlLm5vZGVUeXBlKTtcbiAgICAgIGlmICghaXNSZWFsRWxlbWVudCAmJiBzYW1lVm5vZGUob2xkVm5vZGUsIHZub2RlKSkge1xuICAgICAgICAvLyBwYXRjaCBleGlzdGluZyByb290IG5vZGVcbiAgICAgICAgcGF0Y2hWbm9kZShvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbnVsbCwgbnVsbCwgcmVtb3ZlT25seSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoaXNSZWFsRWxlbWVudCkge1xuICAgICAgICAgIC8vIG1vdW50aW5nIHRvIGEgcmVhbCBlbGVtZW50XG4gICAgICAgICAgLy8gY2hlY2sgaWYgdGhpcyBpcyBzZXJ2ZXItcmVuZGVyZWQgY29udGVudCBhbmQgaWYgd2UgY2FuIHBlcmZvcm1cbiAgICAgICAgICAvLyBhIHN1Y2Nlc3NmdWwgaHlkcmF0aW9uLlxuICAgICAgICAgIGlmIChvbGRWbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBvbGRWbm9kZS5oYXNBdHRyaWJ1dGUoU1NSX0FUVFIpKSB7XG4gICAgICAgICAgICBvbGRWbm9kZS5yZW1vdmVBdHRyaWJ1dGUoU1NSX0FUVFIpO1xuICAgICAgICAgICAgaHlkcmF0aW5nID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzVHJ1ZShoeWRyYXRpbmcpKSB7XG4gICAgICAgICAgICBpZiAoaHlkcmF0ZShvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkpIHtcbiAgICAgICAgICAgICAgaW52b2tlSW5zZXJ0SG9vayh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB0cnVlKTtcbiAgICAgICAgICAgICAgcmV0dXJuIG9sZFZub2RlXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAgICdUaGUgY2xpZW50LXNpZGUgcmVuZGVyZWQgdmlydHVhbCBET00gdHJlZSBpcyBub3QgbWF0Y2hpbmcgJyArXG4gICAgICAgICAgICAgICAgJ3NlcnZlci1yZW5kZXJlZCBjb250ZW50LiBUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgaW5jb3JyZWN0ICcgK1xuICAgICAgICAgICAgICAgICdIVE1MIG1hcmt1cCwgZm9yIGV4YW1wbGUgbmVzdGluZyBibG9jay1sZXZlbCBlbGVtZW50cyBpbnNpZGUgJyArXG4gICAgICAgICAgICAgICAgJzxwPiwgb3IgbWlzc2luZyA8dGJvZHk+LiBCYWlsaW5nIGh5ZHJhdGlvbiBhbmQgcGVyZm9ybWluZyAnICtcbiAgICAgICAgICAgICAgICAnZnVsbCBjbGllbnQtc2lkZSByZW5kZXIuJ1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBlaXRoZXIgbm90IHNlcnZlci1yZW5kZXJlZCwgb3IgaHlkcmF0aW9uIGZhaWxlZC5cbiAgICAgICAgICAvLyBjcmVhdGUgYW4gZW1wdHkgbm9kZSBhbmQgcmVwbGFjZSBpdFxuICAgICAgICAgIG9sZFZub2RlID0gZW1wdHlOb2RlQXQob2xkVm5vZGUpO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gcmVwbGFjaW5nIGV4aXN0aW5nIGVsZW1lbnRcbiAgICAgICAgY29uc3Qgb2xkRWxtID0gb2xkVm5vZGUuZWxtO1xuICAgICAgICBjb25zdCBwYXJlbnRFbG0gPSBub2RlT3BzLnBhcmVudE5vZGUob2xkRWxtKTtcblxuICAgICAgICAvLyBjcmVhdGUgbmV3IG5vZGVcbiAgICAgICAgY3JlYXRlRWxtKFxuICAgICAgICAgIHZub2RlLFxuICAgICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZSxcbiAgICAgICAgICAvLyBleHRyZW1lbHkgcmFyZSBlZGdlIGNhc2U6IGRvIG5vdCBpbnNlcnQgaWYgb2xkIGVsZW1lbnQgaXMgaW4gYVxuICAgICAgICAgIC8vIGxlYXZpbmcgdHJhbnNpdGlvbi4gT25seSBoYXBwZW5zIHdoZW4gY29tYmluaW5nIHRyYW5zaXRpb24gK1xuICAgICAgICAgIC8vIGtlZXAtYWxpdmUgKyBIT0NzLiAoIzQ1OTApXG4gICAgICAgICAgb2xkRWxtLl9sZWF2ZUNiID8gbnVsbCA6IHBhcmVudEVsbSxcbiAgICAgICAgICBub2RlT3BzLm5leHRTaWJsaW5nKG9sZEVsbSlcbiAgICAgICAgKTtcblxuICAgICAgICAvLyB1cGRhdGUgcGFyZW50IHBsYWNlaG9sZGVyIG5vZGUgZWxlbWVudCwgcmVjdXJzaXZlbHlcbiAgICAgICAgaWYgKGlzRGVmKHZub2RlLnBhcmVudCkpIHtcbiAgICAgICAgICBsZXQgYW5jZXN0b3IgPSB2bm9kZS5wYXJlbnQ7XG4gICAgICAgICAgY29uc3QgcGF0Y2hhYmxlID0gaXNQYXRjaGFibGUodm5vZGUpO1xuICAgICAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjYnMuZGVzdHJveS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICBjYnMuZGVzdHJveVtpXShhbmNlc3Rvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhbmNlc3Rvci5lbG0gPSB2bm9kZS5lbG07XG4gICAgICAgICAgICBpZiAocGF0Y2hhYmxlKSB7XG4gICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY2JzLmNyZWF0ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgICAgICAgIGNicy5jcmVhdGVbaV0oZW1wdHlOb2RlLCBhbmNlc3Rvcik7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgLy8gIzY1MTNcbiAgICAgICAgICAgICAgLy8gaW52b2tlIGluc2VydCBob29rcyB0aGF0IG1heSBoYXZlIGJlZW4gbWVyZ2VkIGJ5IGNyZWF0ZSBob29rcy5cbiAgICAgICAgICAgICAgLy8gZS5nLiBmb3IgZGlyZWN0aXZlcyB0aGF0IHVzZXMgdGhlIFwiaW5zZXJ0ZWRcIiBob29rLlxuICAgICAgICAgICAgICBjb25zdCBpbnNlcnQgPSBhbmNlc3Rvci5kYXRhLmhvb2suaW5zZXJ0O1xuICAgICAgICAgICAgICBpZiAoaW5zZXJ0Lm1lcmdlZCkge1xuICAgICAgICAgICAgICAgIC8vIHN0YXJ0IGF0IGluZGV4IDEgdG8gYXZvaWQgcmUtaW52b2tpbmcgY29tcG9uZW50IG1vdW50ZWQgaG9va1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAxOyBpIDwgaW5zZXJ0LmZucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgaW5zZXJ0LmZuc1tpXSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgcmVnaXN0ZXJSZWYoYW5jZXN0b3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYW5jZXN0b3IgPSBhbmNlc3Rvci5wYXJlbnQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZGVzdHJveSBvbGQgbm9kZVxuICAgICAgICBpZiAoaXNEZWYocGFyZW50RWxtKSkge1xuICAgICAgICAgIHJlbW92ZVZub2RlcyhwYXJlbnRFbG0sIFtvbGRWbm9kZV0sIDAsIDApO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZFZub2RlLnRhZykpIHtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayhvbGRWbm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIGlzSW5pdGlhbFBhdGNoKTtcbiAgICByZXR1cm4gdm5vZGUuZWxtXG4gIH1cbn1cblxuLyogICovXG5cbnZhciBkaXJlY3RpdmVzID0ge1xuICBjcmVhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG4gIHVwZGF0ZTogdXBkYXRlRGlyZWN0aXZlcyxcbiAgZGVzdHJveTogZnVuY3Rpb24gdW5iaW5kRGlyZWN0aXZlcyAodm5vZGUpIHtcbiAgICB1cGRhdGVEaXJlY3RpdmVzKHZub2RlLCBlbXB0eU5vZGUpO1xuICB9XG59O1xuXG5mdW5jdGlvbiB1cGRhdGVEaXJlY3RpdmVzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgaWYgKG9sZFZub2RlLmRhdGEuZGlyZWN0aXZlcyB8fCB2bm9kZS5kYXRhLmRpcmVjdGl2ZXMpIHtcbiAgICBfdXBkYXRlKG9sZFZub2RlLCB2bm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gX3VwZGF0ZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGNvbnN0IGlzQ3JlYXRlID0gb2xkVm5vZGUgPT09IGVtcHR5Tm9kZTtcbiAgY29uc3QgaXNEZXN0cm95ID0gdm5vZGUgPT09IGVtcHR5Tm9kZTtcbiAgY29uc3Qgb2xkRGlycyA9IG5vcm1hbGl6ZURpcmVjdGl2ZXMkMShvbGRWbm9kZS5kYXRhLmRpcmVjdGl2ZXMsIG9sZFZub2RlLmNvbnRleHQpO1xuICBjb25zdCBuZXdEaXJzID0gbm9ybWFsaXplRGlyZWN0aXZlcyQxKHZub2RlLmRhdGEuZGlyZWN0aXZlcywgdm5vZGUuY29udGV4dCk7XG5cbiAgY29uc3QgZGlyc1dpdGhJbnNlcnQgPSBbXTtcbiAgY29uc3QgZGlyc1dpdGhQb3N0cGF0Y2ggPSBbXTtcblxuICBsZXQga2V5LCBvbGREaXIsIGRpcjtcbiAgZm9yIChrZXkgaW4gbmV3RGlycykge1xuICAgIG9sZERpciA9IG9sZERpcnNba2V5XTtcbiAgICBkaXIgPSBuZXdEaXJzW2tleV07XG4gICAgaWYgKCFvbGREaXIpIHtcbiAgICAgIC8vIG5ldyBkaXJlY3RpdmUsIGJpbmRcbiAgICAgIGNhbGxIb29rJDEoZGlyLCAnYmluZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICBpZiAoZGlyLmRlZiAmJiBkaXIuZGVmLmluc2VydGVkKSB7XG4gICAgICAgIGRpcnNXaXRoSW5zZXJ0LnB1c2goZGlyKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZXhpc3RpbmcgZGlyZWN0aXZlLCB1cGRhdGVcbiAgICAgIGRpci5vbGRWYWx1ZSA9IG9sZERpci52YWx1ZTtcbiAgICAgIGRpci5vbGRBcmcgPSBvbGREaXIuYXJnO1xuICAgICAgY2FsbEhvb2skMShkaXIsICd1cGRhdGUnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5jb21wb25lbnRVcGRhdGVkKSB7XG4gICAgICAgIGRpcnNXaXRoUG9zdHBhdGNoLnB1c2goZGlyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoZGlyc1dpdGhJbnNlcnQubGVuZ3RoKSB7XG4gICAgY29uc3QgY2FsbEluc2VydCA9ICgpID0+IHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGlyc1dpdGhJbnNlcnQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2FsbEhvb2skMShkaXJzV2l0aEluc2VydFtpXSwgJ2luc2VydGVkJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIGlmIChpc0NyZWF0ZSkge1xuICAgICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdpbnNlcnQnLCBjYWxsSW5zZXJ0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbEluc2VydCgpO1xuICAgIH1cbiAgfVxuXG4gIGlmIChkaXJzV2l0aFBvc3RwYXRjaC5sZW5ndGgpIHtcbiAgICBtZXJnZVZOb2RlSG9vayh2bm9kZSwgJ3Bvc3RwYXRjaCcsICgpID0+IHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY2FsbEhvb2skMShkaXJzV2l0aFBvc3RwYXRjaFtpXSwgJ2NvbXBvbmVudFVwZGF0ZWQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgaWYgKCFpc0NyZWF0ZSkge1xuICAgIGZvciAoa2V5IGluIG9sZERpcnMpIHtcbiAgICAgIGlmICghbmV3RGlyc1trZXldKSB7XG4gICAgICAgIC8vIG5vIGxvbmdlciBwcmVzZW50LCB1bmJpbmRcbiAgICAgICAgY2FsbEhvb2skMShvbGREaXJzW2tleV0sICd1bmJpbmQnLCBvbGRWbm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmNvbnN0IGVtcHR5TW9kaWZpZXJzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuZnVuY3Rpb24gbm9ybWFsaXplRGlyZWN0aXZlcyQxIChcbiAgZGlycyxcbiAgdm1cbikge1xuICBjb25zdCByZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBpZiAoIWRpcnMpIHtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICByZXR1cm4gcmVzXG4gIH1cbiAgbGV0IGksIGRpcjtcbiAgZm9yIChpID0gMDsgaSA8IGRpcnMubGVuZ3RoOyBpKyspIHtcbiAgICBkaXIgPSBkaXJzW2ldO1xuICAgIGlmICghZGlyLm1vZGlmaWVycykge1xuICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICBkaXIubW9kaWZpZXJzID0gZW1wdHlNb2RpZmllcnM7XG4gICAgfVxuICAgIHJlc1tnZXRSYXdEaXJOYW1lKGRpcildID0gZGlyO1xuICAgIGRpci5kZWYgPSByZXNvbHZlQXNzZXQodm0uJG9wdGlvbnMsICdkaXJlY3RpdmVzJywgZGlyLm5hbWUsIHRydWUpO1xuICB9XG4gIC8vICRmbG93LWRpc2FibGUtbGluZVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGdldFJhd0Rpck5hbWUgKGRpcikge1xuICByZXR1cm4gZGlyLnJhd05hbWUgfHwgYCR7ZGlyLm5hbWV9LiR7T2JqZWN0LmtleXMoZGlyLm1vZGlmaWVycyB8fCB7fSkuam9pbignLicpfWBcbn1cblxuZnVuY3Rpb24gY2FsbEhvb2skMSAoZGlyLCBob29rLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSkge1xuICBjb25zdCBmbiA9IGRpci5kZWYgJiYgZGlyLmRlZltob29rXTtcbiAgaWYgKGZuKSB7XG4gICAgdHJ5IHtcbiAgICAgIGZuKHZub2RlLmVsbSwgZGlyLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm5vZGUuY29udGV4dCwgYGRpcmVjdGl2ZSAke2Rpci5uYW1lfSAke2hvb2t9IGhvb2tgKTtcbiAgICB9XG4gIH1cbn1cblxudmFyIGJhc2VNb2R1bGVzID0gW1xuICByZWYsXG4gIGRpcmVjdGl2ZXNcbl07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB1cGRhdGVBdHRycyAob2xkVm5vZGUsIHZub2RlKSB7XG4gIGNvbnN0IG9wdHMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICBpZiAoaXNEZWYob3B0cykgJiYgb3B0cy5DdG9yLm9wdGlvbnMuaW5oZXJpdEF0dHJzID09PSBmYWxzZSkge1xuICAgIHJldHVyblxuICB9XG4gIGlmIChpc1VuZGVmKG9sZFZub2RlLmRhdGEuYXR0cnMpICYmIGlzVW5kZWYodm5vZGUuZGF0YS5hdHRycykpIHtcbiAgICByZXR1cm5cbiAgfVxuICBsZXQga2V5LCBjdXIsIG9sZDtcbiAgY29uc3QgZWxtID0gdm5vZGUuZWxtO1xuICBjb25zdCBvbGRBdHRycyA9IG9sZFZub2RlLmRhdGEuYXR0cnMgfHwge307XG4gIGxldCBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnMgfHwge307XG4gIC8vIGNsb25lIG9ic2VydmVkIG9iamVjdHMsIGFzIHRoZSB1c2VyIHByb2JhYmx5IHdhbnRzIHRvIG11dGF0ZSBpdFxuICBpZiAoaXNEZWYoYXR0cnMuX19vYl9fKSkge1xuICAgIGF0dHJzID0gdm5vZGUuZGF0YS5hdHRycyA9IGV4dGVuZCh7fSwgYXR0cnMpO1xuICB9XG5cbiAgZm9yIChrZXkgaW4gYXR0cnMpIHtcbiAgICBjdXIgPSBhdHRyc1trZXldO1xuICAgIG9sZCA9IG9sZEF0dHJzW2tleV07XG4gICAgaWYgKG9sZCAhPT0gY3VyKSB7XG4gICAgICBzZXRBdHRyKGVsbSwga2V5LCBjdXIpO1xuICAgIH1cbiAgfVxuICAvLyAjNDM5MTogaW4gSUU5LCBzZXR0aW5nIHR5cGUgY2FuIHJlc2V0IHZhbHVlIGZvciBpbnB1dFt0eXBlPXJhZGlvXVxuICAvLyAjNjY2NjogSUUvRWRnZSBmb3JjZXMgcHJvZ3Jlc3MgdmFsdWUgZG93biB0byAxIGJlZm9yZSBzZXR0aW5nIGEgbWF4XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoKGlzSUUgfHwgaXNFZGdlKSAmJiBhdHRycy52YWx1ZSAhPT0gb2xkQXR0cnMudmFsdWUpIHtcbiAgICBzZXRBdHRyKGVsbSwgJ3ZhbHVlJywgYXR0cnMudmFsdWUpO1xuICB9XG4gIGZvciAoa2V5IGluIG9sZEF0dHJzKSB7XG4gICAgaWYgKGlzVW5kZWYoYXR0cnNba2V5XSkpIHtcbiAgICAgIGlmIChpc1hsaW5rKGtleSkpIHtcbiAgICAgICAgZWxtLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsIGdldFhsaW5rUHJvcChrZXkpKTtcbiAgICAgIH0gZWxzZSBpZiAoIWlzRW51bWVyYXRlZEF0dHIoa2V5KSkge1xuICAgICAgICBlbG0ucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHNldEF0dHIgKGVsLCBrZXksIHZhbHVlKSB7XG4gIGlmIChlbC50YWdOYW1lLmluZGV4T2YoJy0nKSA+IC0xKSB7XG4gICAgYmFzZVNldEF0dHIoZWwsIGtleSwgdmFsdWUpO1xuICB9IGVsc2UgaWYgKGlzQm9vbGVhbkF0dHIoa2V5KSkge1xuICAgIC8vIHNldCBhdHRyaWJ1dGUgZm9yIGJsYW5rIHZhbHVlXG4gICAgLy8gZS5nLiA8b3B0aW9uIGRpc2FibGVkPlNlbGVjdCBvbmU8L29wdGlvbj5cbiAgICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZShrZXkpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyB0ZWNobmljYWxseSBhbGxvd2Z1bGxzY3JlZW4gaXMgYSBib29sZWFuIGF0dHJpYnV0ZSBmb3IgPGlmcmFtZT4sXG4gICAgICAvLyBidXQgRmxhc2ggZXhwZWN0cyBhIHZhbHVlIG9mIFwidHJ1ZVwiIHdoZW4gdXNlZCBvbiA8ZW1iZWQ+IHRhZ1xuICAgICAgdmFsdWUgPSBrZXkgPT09ICdhbGxvd2Z1bGxzY3JlZW4nICYmIGVsLnRhZ05hbWUgPT09ICdFTUJFRCdcbiAgICAgICAgPyAndHJ1ZSdcbiAgICAgICAgOiBrZXk7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9IGVsc2UgaWYgKGlzRW51bWVyYXRlZEF0dHIoa2V5KSkge1xuICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIGNvbnZlcnRFbnVtZXJhdGVkVmFsdWUoa2V5LCB2YWx1ZSkpO1xuICB9IGVsc2UgaWYgKGlzWGxpbmsoa2V5KSkge1xuICAgIGlmIChpc0ZhbHN5QXR0clZhbHVlKHZhbHVlKSkge1xuICAgICAgZWwucmVtb3ZlQXR0cmlidXRlTlMoeGxpbmtOUywgZ2V0WGxpbmtQcm9wKGtleSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGVOUyh4bGlua05TLCBrZXksIHZhbHVlKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgYmFzZVNldEF0dHIoZWwsIGtleSwgdmFsdWUpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2VTZXRBdHRyIChlbCwga2V5LCB2YWx1ZSkge1xuICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgfSBlbHNlIHtcbiAgICAvLyAjNzEzODogSUUxMCAmIDExIGZpcmVzIGlucHV0IGV2ZW50IHdoZW4gc2V0dGluZyBwbGFjZWhvbGRlciBvblxuICAgIC8vIDx0ZXh0YXJlYT4uLi4gYmxvY2sgdGhlIGZpcnN0IGlucHV0IGV2ZW50IGFuZCByZW1vdmUgdGhlIGJsb2NrZXJcbiAgICAvLyBpbW1lZGlhdGVseS5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoXG4gICAgICBpc0lFICYmICFpc0lFOSAmJlxuICAgICAgZWwudGFnTmFtZSA9PT0gJ1RFWFRBUkVBJyAmJlxuICAgICAga2V5ID09PSAncGxhY2Vob2xkZXInICYmIHZhbHVlICE9PSAnJyAmJiAhZWwuX19pZXBoXG4gICAgKSB7XG4gICAgICBjb25zdCBibG9ja2VyID0gZSA9PiB7XG4gICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2lucHV0JywgYmxvY2tlcik7XG4gICAgICB9O1xuICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBibG9ja2VyKTtcbiAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgZWwuX19pZXBoID0gdHJ1ZTsgLyogSUUgcGxhY2Vob2xkZXIgcGF0Y2hlZCAqL1xuICAgIH1cbiAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxudmFyIGF0dHJzID0ge1xuICBjcmVhdGU6IHVwZGF0ZUF0dHJzLFxuICB1cGRhdGU6IHVwZGF0ZUF0dHJzXG59O1xuXG4vKiAgKi9cblxuZnVuY3Rpb24gdXBkYXRlQ2xhc3MgKG9sZFZub2RlLCB2bm9kZSkge1xuICBjb25zdCBlbCA9IHZub2RlLmVsbTtcbiAgY29uc3QgZGF0YSA9IHZub2RlLmRhdGE7XG4gIGNvbnN0IG9sZERhdGEgPSBvbGRWbm9kZS5kYXRhO1xuICBpZiAoXG4gICAgaXNVbmRlZihkYXRhLnN0YXRpY0NsYXNzKSAmJlxuICAgIGlzVW5kZWYoZGF0YS5jbGFzcykgJiYgKFxuICAgICAgaXNVbmRlZihvbGREYXRhKSB8fCAoXG4gICAgICAgIGlzVW5kZWYob2xkRGF0YS5zdGF0aWNDbGFzcykgJiZcbiAgICAgICAgaXNVbmRlZihvbGREYXRhLmNsYXNzKVxuICAgICAgKVxuICAgIClcbiAgKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBsZXQgY2xzID0gZ2VuQ2xhc3NGb3JWbm9kZSh2bm9kZSk7XG5cbiAgLy8gaGFuZGxlIHRyYW5zaXRpb24gY2xhc3Nlc1xuICBjb25zdCB0cmFuc2l0aW9uQ2xhc3MgPSBlbC5fdHJhbnNpdGlvbkNsYXNzZXM7XG4gIGlmIChpc0RlZih0cmFuc2l0aW9uQ2xhc3MpKSB7XG4gICAgY2xzID0gY29uY2F0KGNscywgc3RyaW5naWZ5Q2xhc3ModHJhbnNpdGlvbkNsYXNzKSk7XG4gIH1cblxuICAvLyBzZXQgdGhlIGNsYXNzXG4gIGlmIChjbHMgIT09IGVsLl9wcmV2Q2xhc3MpIHtcbiAgICBlbC5zZXRBdHRyaWJ1dGUoJ2NsYXNzJywgY2xzKTtcbiAgICBlbC5fcHJldkNsYXNzID0gY2xzO1xuICB9XG59XG5cbnZhciBrbGFzcyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVDbGFzcyxcbiAgdXBkYXRlOiB1cGRhdGVDbGFzc1xufTtcblxuLyogICovXG5cbmNvbnN0IHZhbGlkRGl2aXNpb25DaGFyUkUgPSAvW1xcdykuK1xcLV8kXFxdXS87XG5cbmZ1bmN0aW9uIHBhcnNlRmlsdGVycyAoZXhwKSB7XG4gIGxldCBpblNpbmdsZSA9IGZhbHNlO1xuICBsZXQgaW5Eb3VibGUgPSBmYWxzZTtcbiAgbGV0IGluVGVtcGxhdGVTdHJpbmcgPSBmYWxzZTtcbiAgbGV0IGluUmVnZXggPSBmYWxzZTtcbiAgbGV0IGN1cmx5ID0gMDtcbiAgbGV0IHNxdWFyZSA9IDA7XG4gIGxldCBwYXJlbiA9IDA7XG4gIGxldCBsYXN0RmlsdGVySW5kZXggPSAwO1xuICBsZXQgYywgcHJldiwgaSwgZXhwcmVzc2lvbiwgZmlsdGVycztcblxuICBmb3IgKGkgPSAwOyBpIDwgZXhwLmxlbmd0aDsgaSsrKSB7XG4gICAgcHJldiA9IGM7XG4gICAgYyA9IGV4cC5jaGFyQ29kZUF0KGkpO1xuICAgIGlmIChpblNpbmdsZSkge1xuICAgICAgaWYgKGMgPT09IDB4MjcgJiYgcHJldiAhPT0gMHg1QykgaW5TaW5nbGUgPSBmYWxzZTtcbiAgICB9IGVsc2UgaWYgKGluRG91YmxlKSB7XG4gICAgICBpZiAoYyA9PT0gMHgyMiAmJiBwcmV2ICE9PSAweDVDKSBpbkRvdWJsZSA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoaW5UZW1wbGF0ZVN0cmluZykge1xuICAgICAgaWYgKGMgPT09IDB4NjAgJiYgcHJldiAhPT0gMHg1QykgaW5UZW1wbGF0ZVN0cmluZyA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoaW5SZWdleCkge1xuICAgICAgaWYgKGMgPT09IDB4MmYgJiYgcHJldiAhPT0gMHg1QykgaW5SZWdleCA9IGZhbHNlO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICBjID09PSAweDdDICYmIC8vIHBpcGVcbiAgICAgIGV4cC5jaGFyQ29kZUF0KGkgKyAxKSAhPT0gMHg3QyAmJlxuICAgICAgZXhwLmNoYXJDb2RlQXQoaSAtIDEpICE9PSAweDdDICYmXG4gICAgICAhY3VybHkgJiYgIXNxdWFyZSAmJiAhcGFyZW5cbiAgICApIHtcbiAgICAgIGlmIChleHByZXNzaW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgLy8gZmlyc3QgZmlsdGVyLCBlbmQgb2YgZXhwcmVzc2lvblxuICAgICAgICBsYXN0RmlsdGVySW5kZXggPSBpICsgMTtcbiAgICAgICAgZXhwcmVzc2lvbiA9IGV4cC5zbGljZSgwLCBpKS50cmltKCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBwdXNoRmlsdGVyKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHN3aXRjaCAoYykge1xuICAgICAgICBjYXNlIDB4MjI6IGluRG91YmxlID0gdHJ1ZTsgYnJlYWsgICAgICAgICAvLyBcIlxuICAgICAgICBjYXNlIDB4Mjc6IGluU2luZ2xlID0gdHJ1ZTsgYnJlYWsgICAgICAgICAvLyAnXG4gICAgICAgIGNhc2UgMHg2MDogaW5UZW1wbGF0ZVN0cmluZyA9IHRydWU7IGJyZWFrIC8vIGBcbiAgICAgICAgY2FzZSAweDI4OiBwYXJlbisrOyBicmVhayAgICAgICAgICAgICAgICAgLy8gKFxuICAgICAgICBjYXNlIDB4Mjk6IHBhcmVuLS07IGJyZWFrICAgICAgICAgICAgICAgICAvLyApXG4gICAgICAgIGNhc2UgMHg1Qjogc3F1YXJlKys7IGJyZWFrICAgICAgICAgICAgICAgIC8vIFtcbiAgICAgICAgY2FzZSAweDVEOiBzcXVhcmUtLTsgYnJlYWsgICAgICAgICAgICAgICAgLy8gXVxuICAgICAgICBjYXNlIDB4N0I6IGN1cmx5Kys7IGJyZWFrICAgICAgICAgICAgICAgICAvLyB7XG4gICAgICAgIGNhc2UgMHg3RDogY3VybHktLTsgYnJlYWsgICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgIH1cbiAgICAgIGlmIChjID09PSAweDJmKSB7IC8vIC9cbiAgICAgICAgbGV0IGogPSBpIC0gMTtcbiAgICAgICAgbGV0IHA7XG4gICAgICAgIC8vIGZpbmQgZmlyc3Qgbm9uLXdoaXRlc3BhY2UgcHJldiBjaGFyXG4gICAgICAgIGZvciAoOyBqID49IDA7IGotLSkge1xuICAgICAgICAgIHAgPSBleHAuY2hhckF0KGopO1xuICAgICAgICAgIGlmIChwICE9PSAnICcpIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFwIHx8ICF2YWxpZERpdmlzaW9uQ2hhclJFLnRlc3QocCkpIHtcbiAgICAgICAgICBpblJlZ2V4ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGlmIChleHByZXNzaW9uID09PSB1bmRlZmluZWQpIHtcbiAgICBleHByZXNzaW9uID0gZXhwLnNsaWNlKDAsIGkpLnRyaW0oKTtcbiAgfSBlbHNlIGlmIChsYXN0RmlsdGVySW5kZXggIT09IDApIHtcbiAgICBwdXNoRmlsdGVyKCk7XG4gIH1cblxuICBmdW5jdGlvbiBwdXNoRmlsdGVyICgpIHtcbiAgICAoZmlsdGVycyB8fCAoZmlsdGVycyA9IFtdKSkucHVzaChleHAuc2xpY2UobGFzdEZpbHRlckluZGV4LCBpKS50cmltKCkpO1xuICAgIGxhc3RGaWx0ZXJJbmRleCA9IGkgKyAxO1xuICB9XG5cbiAgaWYgKGZpbHRlcnMpIHtcbiAgICBmb3IgKGkgPSAwOyBpIDwgZmlsdGVycy5sZW5ndGg7IGkrKykge1xuICAgICAgZXhwcmVzc2lvbiA9IHdyYXBGaWx0ZXIoZXhwcmVzc2lvbiwgZmlsdGVyc1tpXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGV4cHJlc3Npb25cbn1cblxuZnVuY3Rpb24gd3JhcEZpbHRlciAoZXhwLCBmaWx0ZXIpIHtcbiAgY29uc3QgaSA9IGZpbHRlci5pbmRleE9mKCcoJyk7XG4gIGlmIChpIDwgMCkge1xuICAgIC8vIF9mOiByZXNvbHZlRmlsdGVyXG4gICAgcmV0dXJuIGBfZihcIiR7ZmlsdGVyfVwiKSgke2V4cH0pYFxuICB9IGVsc2Uge1xuICAgIGNvbnN0IG5hbWUgPSBmaWx0ZXIuc2xpY2UoMCwgaSk7XG4gICAgY29uc3QgYXJncyA9IGZpbHRlci5zbGljZShpICsgMSk7XG4gICAgcmV0dXJuIGBfZihcIiR7bmFtZX1cIikoJHtleHB9JHthcmdzICE9PSAnKScgPyAnLCcgKyBhcmdzIDogYXJnc31gXG4gIH1cbn1cblxuLyogICovXG5cblxuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xuZnVuY3Rpb24gYmFzZVdhcm4gKG1zZywgcmFuZ2UpIHtcbiAgY29uc29sZS5lcnJvcihgW1Z1ZSBjb21waWxlcl06ICR7bXNnfWApO1xufVxuLyogZXNsaW50LWVuYWJsZSBuby11bnVzZWQtdmFycyAqL1xuXG5mdW5jdGlvbiBwbHVja01vZHVsZUZ1bmN0aW9uIChcbiAgbW9kdWxlcyxcbiAga2V5XG4pIHtcbiAgcmV0dXJuIG1vZHVsZXNcbiAgICA/IG1vZHVsZXMubWFwKG0gPT4gbVtrZXldKS5maWx0ZXIoXyA9PiBfKVxuICAgIDogW11cbn1cblxuZnVuY3Rpb24gYWRkUHJvcCAoZWwsIG5hbWUsIHZhbHVlLCByYW5nZSwgZHluYW1pYykge1xuICAoZWwucHJvcHMgfHwgKGVsLnByb3BzID0gW10pKS5wdXNoKHJhbmdlU2V0SXRlbSh7IG5hbWUsIHZhbHVlLCBkeW5hbWljIH0sIHJhbmdlKSk7XG4gIGVsLnBsYWluID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGFkZEF0dHIgKGVsLCBuYW1lLCB2YWx1ZSwgcmFuZ2UsIGR5bmFtaWMpIHtcbiAgY29uc3QgYXR0cnMgPSBkeW5hbWljXG4gICAgPyAoZWwuZHluYW1pY0F0dHJzIHx8IChlbC5keW5hbWljQXR0cnMgPSBbXSkpXG4gICAgOiAoZWwuYXR0cnMgfHwgKGVsLmF0dHJzID0gW10pKTtcbiAgYXR0cnMucHVzaChyYW5nZVNldEl0ZW0oeyBuYW1lLCB2YWx1ZSwgZHluYW1pYyB9LCByYW5nZSkpO1xuICBlbC5wbGFpbiA9IGZhbHNlO1xufVxuXG4vLyBhZGQgYSByYXcgYXR0ciAodXNlIHRoaXMgaW4gcHJlVHJhbnNmb3JtcylcbmZ1bmN0aW9uIGFkZFJhd0F0dHIgKGVsLCBuYW1lLCB2YWx1ZSwgcmFuZ2UpIHtcbiAgZWwuYXR0cnNNYXBbbmFtZV0gPSB2YWx1ZTtcbiAgZWwuYXR0cnNMaXN0LnB1c2gocmFuZ2VTZXRJdGVtKHsgbmFtZSwgdmFsdWUgfSwgcmFuZ2UpKTtcbn1cblxuZnVuY3Rpb24gYWRkRGlyZWN0aXZlIChcbiAgZWwsXG4gIG5hbWUsXG4gIHJhd05hbWUsXG4gIHZhbHVlLFxuICBhcmcsXG4gIGlzRHluYW1pY0FyZyxcbiAgbW9kaWZpZXJzLFxuICByYW5nZVxuKSB7XG4gIChlbC5kaXJlY3RpdmVzIHx8IChlbC5kaXJlY3RpdmVzID0gW10pKS5wdXNoKHJhbmdlU2V0SXRlbSh7XG4gICAgbmFtZSxcbiAgICByYXdOYW1lLFxuICAgIHZhbHVlLFxuICAgIGFyZyxcbiAgICBpc0R5bmFtaWNBcmcsXG4gICAgbW9kaWZpZXJzXG4gIH0sIHJhbmdlKSk7XG4gIGVsLnBsYWluID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHByZXBlbmRNb2RpZmllck1hcmtlciAoc3ltYm9sLCBuYW1lLCBkeW5hbWljKSB7XG4gIHJldHVybiBkeW5hbWljXG4gICAgPyBgX3AoJHtuYW1lfSxcIiR7c3ltYm9sfVwiKWBcbiAgICA6IHN5bWJvbCArIG5hbWUgLy8gbWFyayB0aGUgZXZlbnQgYXMgY2FwdHVyZWRcbn1cblxuZnVuY3Rpb24gYWRkSGFuZGxlciAoXG4gIGVsLFxuICBuYW1lLFxuICB2YWx1ZSxcbiAgbW9kaWZpZXJzLFxuICBpbXBvcnRhbnQsXG4gIHdhcm4sXG4gIHJhbmdlLFxuICBkeW5hbWljXG4pIHtcbiAgbW9kaWZpZXJzID0gbW9kaWZpZXJzIHx8IGVtcHR5T2JqZWN0O1xuICAvLyB3YXJuIHByZXZlbnQgYW5kIHBhc3NpdmUgbW9kaWZpZXJcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChcbiAgICB3YXJuICYmXG4gICAgbW9kaWZpZXJzLnByZXZlbnQgJiYgbW9kaWZpZXJzLnBhc3NpdmVcbiAgKSB7XG4gICAgd2FybihcbiAgICAgICdwYXNzaXZlIGFuZCBwcmV2ZW50IGNhblxcJ3QgYmUgdXNlZCB0b2dldGhlci4gJyArXG4gICAgICAnUGFzc2l2ZSBoYW5kbGVyIGNhblxcJ3QgcHJldmVudCBkZWZhdWx0IGV2ZW50LicsXG4gICAgICByYW5nZVxuICAgICk7XG4gIH1cblxuICAvLyBub3JtYWxpemUgY2xpY2sucmlnaHQgYW5kIGNsaWNrLm1pZGRsZSBzaW5jZSB0aGV5IGRvbid0IGFjdHVhbGx5IGZpcmVcbiAgLy8gdGhpcyBpcyB0ZWNobmljYWxseSBicm93c2VyLXNwZWNpZmljLCBidXQgYXQgbGVhc3QgZm9yIG5vdyBicm93c2VycyBhcmVcbiAgLy8gdGhlIG9ubHkgdGFyZ2V0IGVudnMgdGhhdCBoYXZlIHJpZ2h0L21pZGRsZSBjbGlja3MuXG4gIGlmIChtb2RpZmllcnMucmlnaHQpIHtcbiAgICBpZiAoZHluYW1pYykge1xuICAgICAgbmFtZSA9IGAoJHtuYW1lfSk9PT0nY2xpY2snPydjb250ZXh0bWVudSc6KCR7bmFtZX0pYDtcbiAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdjbGljaycpIHtcbiAgICAgIG5hbWUgPSAnY29udGV4dG1lbnUnO1xuICAgICAgZGVsZXRlIG1vZGlmaWVycy5yaWdodDtcbiAgICB9XG4gIH0gZWxzZSBpZiAobW9kaWZpZXJzLm1pZGRsZSkge1xuICAgIGlmIChkeW5hbWljKSB7XG4gICAgICBuYW1lID0gYCgke25hbWV9KT09PSdjbGljayc/J21vdXNldXAnOigke25hbWV9KWA7XG4gICAgfSBlbHNlIGlmIChuYW1lID09PSAnY2xpY2snKSB7XG4gICAgICBuYW1lID0gJ21vdXNldXAnO1xuICAgIH1cbiAgfVxuXG4gIC8vIGNoZWNrIGNhcHR1cmUgbW9kaWZpZXJcbiAgaWYgKG1vZGlmaWVycy5jYXB0dXJlKSB7XG4gICAgZGVsZXRlIG1vZGlmaWVycy5jYXB0dXJlO1xuICAgIG5hbWUgPSBwcmVwZW5kTW9kaWZpZXJNYXJrZXIoJyEnLCBuYW1lLCBkeW5hbWljKTtcbiAgfVxuICBpZiAobW9kaWZpZXJzLm9uY2UpIHtcbiAgICBkZWxldGUgbW9kaWZpZXJzLm9uY2U7XG4gICAgbmFtZSA9IHByZXBlbmRNb2RpZmllck1hcmtlcignficsIG5hbWUsIGR5bmFtaWMpO1xuICB9XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAobW9kaWZpZXJzLnBhc3NpdmUpIHtcbiAgICBkZWxldGUgbW9kaWZpZXJzLnBhc3NpdmU7XG4gICAgbmFtZSA9IHByZXBlbmRNb2RpZmllck1hcmtlcignJicsIG5hbWUsIGR5bmFtaWMpO1xuICB9XG5cbiAgbGV0IGV2ZW50cztcbiAgaWYgKG1vZGlmaWVycy5uYXRpdmUpIHtcbiAgICBkZWxldGUgbW9kaWZpZXJzLm5hdGl2ZTtcbiAgICBldmVudHMgPSBlbC5uYXRpdmVFdmVudHMgfHwgKGVsLm5hdGl2ZUV2ZW50cyA9IHt9KTtcbiAgfSBlbHNlIHtcbiAgICBldmVudHMgPSBlbC5ldmVudHMgfHwgKGVsLmV2ZW50cyA9IHt9KTtcbiAgfVxuXG4gIGNvbnN0IG5ld0hhbmRsZXIgPSByYW5nZVNldEl0ZW0oeyB2YWx1ZTogdmFsdWUudHJpbSgpLCBkeW5hbWljIH0sIHJhbmdlKTtcbiAgaWYgKG1vZGlmaWVycyAhPT0gZW1wdHlPYmplY3QpIHtcbiAgICBuZXdIYW5kbGVyLm1vZGlmaWVycyA9IG1vZGlmaWVycztcbiAgfVxuXG4gIGNvbnN0IGhhbmRsZXJzID0gZXZlbnRzW25hbWVdO1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKEFycmF5LmlzQXJyYXkoaGFuZGxlcnMpKSB7XG4gICAgaW1wb3J0YW50ID8gaGFuZGxlcnMudW5zaGlmdChuZXdIYW5kbGVyKSA6IGhhbmRsZXJzLnB1c2gobmV3SGFuZGxlcik7XG4gIH0gZWxzZSBpZiAoaGFuZGxlcnMpIHtcbiAgICBldmVudHNbbmFtZV0gPSBpbXBvcnRhbnQgPyBbbmV3SGFuZGxlciwgaGFuZGxlcnNdIDogW2hhbmRsZXJzLCBuZXdIYW5kbGVyXTtcbiAgfSBlbHNlIHtcbiAgICBldmVudHNbbmFtZV0gPSBuZXdIYW5kbGVyO1xuICB9XG5cbiAgZWwucGxhaW4gPSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZ2V0UmF3QmluZGluZ0F0dHIgKFxuICBlbCxcbiAgbmFtZVxuKSB7XG4gIHJldHVybiBlbC5yYXdBdHRyc01hcFsnOicgKyBuYW1lXSB8fFxuICAgIGVsLnJhd0F0dHJzTWFwWyd2LWJpbmQ6JyArIG5hbWVdIHx8XG4gICAgZWwucmF3QXR0cnNNYXBbbmFtZV1cbn1cblxuZnVuY3Rpb24gZ2V0QmluZGluZ0F0dHIgKFxuICBlbCxcbiAgbmFtZSxcbiAgZ2V0U3RhdGljXG4pIHtcbiAgY29uc3QgZHluYW1pY1ZhbHVlID1cbiAgICBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnOicgKyBuYW1lKSB8fFxuICAgIGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWJpbmQ6JyArIG5hbWUpO1xuICBpZiAoZHluYW1pY1ZhbHVlICE9IG51bGwpIHtcbiAgICByZXR1cm4gcGFyc2VGaWx0ZXJzKGR5bmFtaWNWYWx1ZSlcbiAgfSBlbHNlIGlmIChnZXRTdGF0aWMgIT09IGZhbHNlKSB7XG4gICAgY29uc3Qgc3RhdGljVmFsdWUgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCBuYW1lKTtcbiAgICBpZiAoc3RhdGljVmFsdWUgIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHN0YXRpY1ZhbHVlKVxuICAgIH1cbiAgfVxufVxuXG4vLyBub3RlOiB0aGlzIG9ubHkgcmVtb3ZlcyB0aGUgYXR0ciBmcm9tIHRoZSBBcnJheSAoYXR0cnNMaXN0KSBzbyB0aGF0IGl0XG4vLyBkb2Vzbid0IGdldCBwcm9jZXNzZWQgYnkgcHJvY2Vzc0F0dHJzLlxuLy8gQnkgZGVmYXVsdCBpdCBkb2VzIE5PVCByZW1vdmUgaXQgZnJvbSB0aGUgbWFwIChhdHRyc01hcCkgYmVjYXVzZSB0aGUgbWFwIGlzXG4vLyBuZWVkZWQgZHVyaW5nIGNvZGVnZW4uXG5mdW5jdGlvbiBnZXRBbmRSZW1vdmVBdHRyIChcbiAgZWwsXG4gIG5hbWUsXG4gIHJlbW92ZUZyb21NYXBcbikge1xuICBsZXQgdmFsO1xuICBpZiAoKHZhbCA9IGVsLmF0dHJzTWFwW25hbWVdKSAhPSBudWxsKSB7XG4gICAgY29uc3QgbGlzdCA9IGVsLmF0dHJzTGlzdDtcbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IGxpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBpZiAobGlzdFtpXS5uYW1lID09PSBuYW1lKSB7XG4gICAgICAgIGxpc3Quc3BsaWNlKGksIDEpO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAocmVtb3ZlRnJvbU1hcCkge1xuICAgIGRlbGV0ZSBlbC5hdHRyc01hcFtuYW1lXTtcbiAgfVxuICByZXR1cm4gdmFsXG59XG5cbmZ1bmN0aW9uIGdldEFuZFJlbW92ZUF0dHJCeVJlZ2V4IChcbiAgZWwsXG4gIG5hbWVcbikge1xuICBjb25zdCBsaXN0ID0gZWwuYXR0cnNMaXN0O1xuICBmb3IgKGxldCBpID0gMCwgbCA9IGxpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgY29uc3QgYXR0ciA9IGxpc3RbaV07XG4gICAgaWYgKG5hbWUudGVzdChhdHRyLm5hbWUpKSB7XG4gICAgICBsaXN0LnNwbGljZShpLCAxKTtcbiAgICAgIHJldHVybiBhdHRyXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHJhbmdlU2V0SXRlbSAoXG4gIGl0ZW0sXG4gIHJhbmdlXG4pIHtcbiAgaWYgKHJhbmdlKSB7XG4gICAgaWYgKHJhbmdlLnN0YXJ0ICE9IG51bGwpIHtcbiAgICAgIGl0ZW0uc3RhcnQgPSByYW5nZS5zdGFydDtcbiAgICB9XG4gICAgaWYgKHJhbmdlLmVuZCAhPSBudWxsKSB7XG4gICAgICBpdGVtLmVuZCA9IHJhbmdlLmVuZDtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGl0ZW1cbn1cblxuLyogICovXG5cbi8qKlxuICogQ3Jvc3MtcGxhdGZvcm0gY29kZSBnZW5lcmF0aW9uIGZvciBjb21wb25lbnQgdi1tb2RlbFxuICovXG5mdW5jdGlvbiBnZW5Db21wb25lbnRNb2RlbCAoXG4gIGVsLFxuICB2YWx1ZSxcbiAgbW9kaWZpZXJzXG4pIHtcbiAgY29uc3QgeyBudW1iZXIsIHRyaW0gfSA9IG1vZGlmaWVycyB8fCB7fTtcblxuICBjb25zdCBiYXNlVmFsdWVFeHByZXNzaW9uID0gJyQkdic7XG4gIGxldCB2YWx1ZUV4cHJlc3Npb24gPSBiYXNlVmFsdWVFeHByZXNzaW9uO1xuICBpZiAodHJpbSkge1xuICAgIHZhbHVlRXhwcmVzc2lvbiA9XG4gICAgICBgKHR5cGVvZiAke2Jhc2VWYWx1ZUV4cHJlc3Npb259ID09PSAnc3RyaW5nJ2AgK1xuICAgICAgYD8gJHtiYXNlVmFsdWVFeHByZXNzaW9ufS50cmltKClgICtcbiAgICAgIGA6ICR7YmFzZVZhbHVlRXhwcmVzc2lvbn0pYDtcbiAgfVxuICBpZiAobnVtYmVyKSB7XG4gICAgdmFsdWVFeHByZXNzaW9uID0gYF9uKCR7dmFsdWVFeHByZXNzaW9ufSlgO1xuICB9XG4gIGNvbnN0IGFzc2lnbm1lbnQgPSBnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgdmFsdWVFeHByZXNzaW9uKTtcblxuICBlbC5tb2RlbCA9IHtcbiAgICB2YWx1ZTogYCgke3ZhbHVlfSlgLFxuICAgIGV4cHJlc3Npb246IEpTT04uc3RyaW5naWZ5KHZhbHVlKSxcbiAgICBjYWxsYmFjazogYGZ1bmN0aW9uICgke2Jhc2VWYWx1ZUV4cHJlc3Npb259KSB7JHthc3NpZ25tZW50fX1gXG4gIH07XG59XG5cbi8qKlxuICogQ3Jvc3MtcGxhdGZvcm0gY29kZWdlbiBoZWxwZXIgZm9yIGdlbmVyYXRpbmcgdi1tb2RlbCB2YWx1ZSBhc3NpZ25tZW50IGNvZGUuXG4gKi9cbmZ1bmN0aW9uIGdlbkFzc2lnbm1lbnRDb2RlIChcbiAgdmFsdWUsXG4gIGFzc2lnbm1lbnRcbikge1xuICBjb25zdCByZXMgPSBwYXJzZU1vZGVsKHZhbHVlKTtcbiAgaWYgKHJlcy5rZXkgPT09IG51bGwpIHtcbiAgICByZXR1cm4gYCR7dmFsdWV9PSR7YXNzaWdubWVudH1gXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGAkc2V0KCR7cmVzLmV4cH0sICR7cmVzLmtleX0sICR7YXNzaWdubWVudH0pYFxuICB9XG59XG5cbi8qKlxuICogUGFyc2UgYSB2LW1vZGVsIGV4cHJlc3Npb24gaW50byBhIGJhc2UgcGF0aCBhbmQgYSBmaW5hbCBrZXkgc2VnbWVudC5cbiAqIEhhbmRsZXMgYm90aCBkb3QtcGF0aCBhbmQgcG9zc2libGUgc3F1YXJlIGJyYWNrZXRzLlxuICpcbiAqIFBvc3NpYmxlIGNhc2VzOlxuICpcbiAqIC0gdGVzdFxuICogLSB0ZXN0W2tleV1cbiAqIC0gdGVzdFt0ZXN0MVtrZXldXVxuICogLSB0ZXN0W1wiYVwiXVtrZXldXG4gKiAtIHh4eC50ZXN0W2FbYV0udGVzdDFba2V5XV1cbiAqIC0gdGVzdC54eHguYVtcImFzYVwiXVt0ZXN0MVtrZXldXVxuICpcbiAqL1xuXG5sZXQgbGVuLCBzdHIsIGNociwgaW5kZXgkMSwgZXhwcmVzc2lvblBvcywgZXhwcmVzc2lvbkVuZFBvcztcblxuXG5cbmZ1bmN0aW9uIHBhcnNlTW9kZWwgKHZhbCkge1xuICAvLyBGaXggaHR0cHM6Ly9naXRodWIuY29tL3Z1ZWpzL3Z1ZS9wdWxsLzc3MzBcbiAgLy8gYWxsb3cgdi1tb2RlbD1cIm9iai52YWwgXCIgKHRyYWlsaW5nIHdoaXRlc3BhY2UpXG4gIHZhbCA9IHZhbC50cmltKCk7XG4gIGxlbiA9IHZhbC5sZW5ndGg7XG5cbiAgaWYgKHZhbC5pbmRleE9mKCdbJykgPCAwIHx8IHZhbC5sYXN0SW5kZXhPZignXScpIDwgbGVuIC0gMSkge1xuICAgIGluZGV4JDEgPSB2YWwubGFzdEluZGV4T2YoJy4nKTtcbiAgICBpZiAoaW5kZXgkMSA+IC0xKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBleHA6IHZhbC5zbGljZSgwLCBpbmRleCQxKSxcbiAgICAgICAga2V5OiAnXCInICsgdmFsLnNsaWNlKGluZGV4JDEgKyAxKSArICdcIidcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZXhwOiB2YWwsXG4gICAgICAgIGtleTogbnVsbFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0ciA9IHZhbDtcbiAgaW5kZXgkMSA9IGV4cHJlc3Npb25Qb3MgPSBleHByZXNzaW9uRW5kUG9zID0gMDtcblxuICB3aGlsZSAoIWVvZigpKSB7XG4gICAgY2hyID0gbmV4dCgpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChpc1N0cmluZ1N0YXJ0KGNocikpIHtcbiAgICAgIHBhcnNlU3RyaW5nKGNocik7XG4gICAgfSBlbHNlIGlmIChjaHIgPT09IDB4NUIpIHtcbiAgICAgIHBhcnNlQnJhY2tldChjaHIpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7XG4gICAgZXhwOiB2YWwuc2xpY2UoMCwgZXhwcmVzc2lvblBvcyksXG4gICAga2V5OiB2YWwuc2xpY2UoZXhwcmVzc2lvblBvcyArIDEsIGV4cHJlc3Npb25FbmRQb3MpXG4gIH1cbn1cblxuZnVuY3Rpb24gbmV4dCAoKSB7XG4gIHJldHVybiBzdHIuY2hhckNvZGVBdCgrK2luZGV4JDEpXG59XG5cbmZ1bmN0aW9uIGVvZiAoKSB7XG4gIHJldHVybiBpbmRleCQxID49IGxlblxufVxuXG5mdW5jdGlvbiBpc1N0cmluZ1N0YXJ0IChjaHIpIHtcbiAgcmV0dXJuIGNociA9PT0gMHgyMiB8fCBjaHIgPT09IDB4Mjdcbn1cblxuZnVuY3Rpb24gcGFyc2VCcmFja2V0IChjaHIpIHtcbiAgbGV0IGluQnJhY2tldCA9IDE7XG4gIGV4cHJlc3Npb25Qb3MgPSBpbmRleCQxO1xuICB3aGlsZSAoIWVvZigpKSB7XG4gICAgY2hyID0gbmV4dCgpO1xuICAgIGlmIChpc1N0cmluZ1N0YXJ0KGNocikpIHtcbiAgICAgIHBhcnNlU3RyaW5nKGNocik7XG4gICAgICBjb250aW51ZVxuICAgIH1cbiAgICBpZiAoY2hyID09PSAweDVCKSBpbkJyYWNrZXQrKztcbiAgICBpZiAoY2hyID09PSAweDVEKSBpbkJyYWNrZXQtLTtcbiAgICBpZiAoaW5CcmFja2V0ID09PSAwKSB7XG4gICAgICBleHByZXNzaW9uRW5kUG9zID0gaW5kZXgkMTtcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHBhcnNlU3RyaW5nIChjaHIpIHtcbiAgY29uc3Qgc3RyaW5nUXVvdGUgPSBjaHI7XG4gIHdoaWxlICghZW9mKCkpIHtcbiAgICBjaHIgPSBuZXh0KCk7XG4gICAgaWYgKGNociA9PT0gc3RyaW5nUXVvdGUpIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5sZXQgd2FybiQxO1xuXG4vLyBpbiBzb21lIGNhc2VzLCB0aGUgZXZlbnQgdXNlZCBoYXMgdG8gYmUgZGV0ZXJtaW5lZCBhdCBydW50aW1lXG4vLyBzbyB3ZSB1c2VkIHNvbWUgcmVzZXJ2ZWQgdG9rZW5zIGR1cmluZyBjb21waWxlLlxuY29uc3QgUkFOR0VfVE9LRU4gPSAnX19yJztcbmNvbnN0IENIRUNLQk9YX1JBRElPX1RPS0VOID0gJ19fYyc7XG5cbmZ1bmN0aW9uIG1vZGVsIChcbiAgZWwsXG4gIGRpcixcbiAgX3dhcm5cbikge1xuICB3YXJuJDEgPSBfd2FybjtcbiAgY29uc3QgdmFsdWUgPSBkaXIudmFsdWU7XG4gIGNvbnN0IG1vZGlmaWVycyA9IGRpci5tb2RpZmllcnM7XG4gIGNvbnN0IHRhZyA9IGVsLnRhZztcbiAgY29uc3QgdHlwZSA9IGVsLmF0dHJzTWFwLnR5cGU7XG5cbiAge1xuICAgIC8vIGlucHV0cyB3aXRoIHR5cGU9XCJmaWxlXCIgYXJlIHJlYWQgb25seSBhbmQgc2V0dGluZyB0aGUgaW5wdXQnc1xuICAgIC8vIHZhbHVlIHdpbGwgdGhyb3cgYW4gZXJyb3IuXG4gICAgaWYgKHRhZyA9PT0gJ2lucHV0JyAmJiB0eXBlID09PSAnZmlsZScpIHtcbiAgICAgIHdhcm4kMShcbiAgICAgICAgYDwke2VsLnRhZ30gdi1tb2RlbD1cIiR7dmFsdWV9XCIgdHlwZT1cImZpbGVcIj46XFxuYCArXG4gICAgICAgIGBGaWxlIGlucHV0cyBhcmUgcmVhZCBvbmx5LiBVc2UgYSB2LW9uOmNoYW5nZSBsaXN0ZW5lciBpbnN0ZWFkLmAsXG4gICAgICAgIGVsLnJhd0F0dHJzTWFwWyd2LW1vZGVsJ11cbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgaWYgKGVsLmNvbXBvbmVudCkge1xuICAgIGdlbkNvbXBvbmVudE1vZGVsKGVsLCB2YWx1ZSwgbW9kaWZpZXJzKTtcbiAgICAvLyBjb21wb25lbnQgdi1tb2RlbCBkb2Vzbid0IG5lZWQgZXh0cmEgcnVudGltZVxuICAgIHJldHVybiBmYWxzZVxuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICBnZW5TZWxlY3QoZWwsIHZhbHVlLCBtb2RpZmllcnMpO1xuICB9IGVsc2UgaWYgKHRhZyA9PT0gJ2lucHV0JyAmJiB0eXBlID09PSAnY2hlY2tib3gnKSB7XG4gICAgZ2VuQ2hlY2tib3hNb2RlbChlbCwgdmFsdWUsIG1vZGlmaWVycyk7XG4gIH0gZWxzZSBpZiAodGFnID09PSAnaW5wdXQnICYmIHR5cGUgPT09ICdyYWRpbycpIHtcbiAgICBnZW5SYWRpb01vZGVsKGVsLCB2YWx1ZSwgbW9kaWZpZXJzKTtcbiAgfSBlbHNlIGlmICh0YWcgPT09ICdpbnB1dCcgfHwgdGFnID09PSAndGV4dGFyZWEnKSB7XG4gICAgZ2VuRGVmYXVsdE1vZGVsKGVsLCB2YWx1ZSwgbW9kaWZpZXJzKTtcbiAgfSBlbHNlIGlmICghY29uZmlnLmlzUmVzZXJ2ZWRUYWcodGFnKSkge1xuICAgIGdlbkNvbXBvbmVudE1vZGVsKGVsLCB2YWx1ZSwgbW9kaWZpZXJzKTtcbiAgICAvLyBjb21wb25lbnQgdi1tb2RlbCBkb2Vzbid0IG5lZWQgZXh0cmEgcnVudGltZVxuICAgIHJldHVybiBmYWxzZVxuICB9IGVsc2Uge1xuICAgIHdhcm4kMShcbiAgICAgIGA8JHtlbC50YWd9IHYtbW9kZWw9XCIke3ZhbHVlfVwiPjogYCArXG4gICAgICBgdi1tb2RlbCBpcyBub3Qgc3VwcG9ydGVkIG9uIHRoaXMgZWxlbWVudCB0eXBlLiBgICtcbiAgICAgICdJZiB5b3UgYXJlIHdvcmtpbmcgd2l0aCBjb250ZW50ZWRpdGFibGUsIGl0XFwncyByZWNvbW1lbmRlZCB0byAnICtcbiAgICAgICd3cmFwIGEgbGlicmFyeSBkZWRpY2F0ZWQgZm9yIHRoYXQgcHVycG9zZSBpbnNpZGUgYSBjdXN0b20gY29tcG9uZW50LicsXG4gICAgICBlbC5yYXdBdHRyc01hcFsndi1tb2RlbCddXG4gICAgKTtcbiAgfVxuXG4gIC8vIGVuc3VyZSBydW50aW1lIGRpcmVjdGl2ZSBtZXRhZGF0YVxuICByZXR1cm4gdHJ1ZVxufVxuXG5mdW5jdGlvbiBnZW5DaGVja2JveE1vZGVsIChcbiAgZWwsXG4gIHZhbHVlLFxuICBtb2RpZmllcnNcbikge1xuICBjb25zdCBudW1iZXIgPSBtb2RpZmllcnMgJiYgbW9kaWZpZXJzLm51bWJlcjtcbiAgY29uc3QgdmFsdWVCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICd2YWx1ZScpIHx8ICdudWxsJztcbiAgY29uc3QgdHJ1ZVZhbHVlQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAndHJ1ZS12YWx1ZScpIHx8ICd0cnVlJztcbiAgY29uc3QgZmFsc2VWYWx1ZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ2ZhbHNlLXZhbHVlJykgfHwgJ2ZhbHNlJztcbiAgYWRkUHJvcChlbCwgJ2NoZWNrZWQnLFxuICAgIGBBcnJheS5pc0FycmF5KCR7dmFsdWV9KWAgK1xuICAgIGA/X2koJHt2YWx1ZX0sJHt2YWx1ZUJpbmRpbmd9KT4tMWAgKyAoXG4gICAgICB0cnVlVmFsdWVCaW5kaW5nID09PSAndHJ1ZSdcbiAgICAgICAgPyBgOigke3ZhbHVlfSlgXG4gICAgICAgIDogYDpfcSgke3ZhbHVlfSwke3RydWVWYWx1ZUJpbmRpbmd9KWBcbiAgICApXG4gICk7XG4gIGFkZEhhbmRsZXIoZWwsICdjaGFuZ2UnLFxuICAgIGB2YXIgJCRhPSR7dmFsdWV9LGAgK1xuICAgICAgICAnJCRlbD0kZXZlbnQudGFyZ2V0LCcgK1xuICAgICAgICBgJCRjPSQkZWwuY2hlY2tlZD8oJHt0cnVlVmFsdWVCaW5kaW5nfSk6KCR7ZmFsc2VWYWx1ZUJpbmRpbmd9KTtgICtcbiAgICAnaWYoQXJyYXkuaXNBcnJheSgkJGEpKXsnICtcbiAgICAgIGB2YXIgJCR2PSR7bnVtYmVyID8gJ19uKCcgKyB2YWx1ZUJpbmRpbmcgKyAnKScgOiB2YWx1ZUJpbmRpbmd9LGAgK1xuICAgICAgICAgICckJGk9X2koJCRhLCQkdik7JyArXG4gICAgICBgaWYoJCRlbC5jaGVja2VkKXskJGk8MCYmKCR7Z2VuQXNzaWdubWVudENvZGUodmFsdWUsICckJGEuY29uY2F0KFskJHZdKScpfSl9YCArXG4gICAgICBgZWxzZXskJGk+LTEmJigke2dlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCAnJCRhLnNsaWNlKDAsJCRpKS5jb25jYXQoJCRhLnNsaWNlKCQkaSsxKSknKX0pfWAgK1xuICAgIGB9ZWxzZXske2dlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCAnJCRjJyl9fWAsXG4gICAgbnVsbCwgdHJ1ZVxuICApO1xufVxuXG5mdW5jdGlvbiBnZW5SYWRpb01vZGVsIChcbiAgZWwsXG4gIHZhbHVlLFxuICBtb2RpZmllcnNcbikge1xuICBjb25zdCBudW1iZXIgPSBtb2RpZmllcnMgJiYgbW9kaWZpZXJzLm51bWJlcjtcbiAgbGV0IHZhbHVlQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAndmFsdWUnKSB8fCAnbnVsbCc7XG4gIHZhbHVlQmluZGluZyA9IG51bWJlciA/IGBfbigke3ZhbHVlQmluZGluZ30pYCA6IHZhbHVlQmluZGluZztcbiAgYWRkUHJvcChlbCwgJ2NoZWNrZWQnLCBgX3EoJHt2YWx1ZX0sJHt2YWx1ZUJpbmRpbmd9KWApO1xuICBhZGRIYW5kbGVyKGVsLCAnY2hhbmdlJywgZ2VuQXNzaWdubWVudENvZGUodmFsdWUsIHZhbHVlQmluZGluZyksIG51bGwsIHRydWUpO1xufVxuXG5mdW5jdGlvbiBnZW5TZWxlY3QgKFxuICBlbCxcbiAgdmFsdWUsXG4gIG1vZGlmaWVyc1xuKSB7XG4gIGNvbnN0IG51bWJlciA9IG1vZGlmaWVycyAmJiBtb2RpZmllcnMubnVtYmVyO1xuICBjb25zdCBzZWxlY3RlZFZhbCA9IGBBcnJheS5wcm90b3R5cGUuZmlsdGVyYCArXG4gICAgYC5jYWxsKCRldmVudC50YXJnZXQub3B0aW9ucyxmdW5jdGlvbihvKXtyZXR1cm4gby5zZWxlY3RlZH0pYCArXG4gICAgYC5tYXAoZnVuY3Rpb24obyl7dmFyIHZhbCA9IFwiX3ZhbHVlXCIgaW4gbyA/IG8uX3ZhbHVlIDogby52YWx1ZTtgICtcbiAgICBgcmV0dXJuICR7bnVtYmVyID8gJ19uKHZhbCknIDogJ3ZhbCd9fSlgO1xuXG4gIGNvbnN0IGFzc2lnbm1lbnQgPSAnJGV2ZW50LnRhcmdldC5tdWx0aXBsZSA/ICQkc2VsZWN0ZWRWYWwgOiAkJHNlbGVjdGVkVmFsWzBdJztcbiAgbGV0IGNvZGUgPSBgdmFyICQkc2VsZWN0ZWRWYWwgPSAke3NlbGVjdGVkVmFsfTtgO1xuICBjb2RlID0gYCR7Y29kZX0gJHtnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgYXNzaWdubWVudCl9YDtcbiAgYWRkSGFuZGxlcihlbCwgJ2NoYW5nZScsIGNvZGUsIG51bGwsIHRydWUpO1xufVxuXG5mdW5jdGlvbiBnZW5EZWZhdWx0TW9kZWwgKFxuICBlbCxcbiAgdmFsdWUsXG4gIG1vZGlmaWVyc1xuKSB7XG4gIGNvbnN0IHR5cGUgPSBlbC5hdHRyc01hcC50eXBlO1xuXG4gIC8vIHdhcm4gaWYgdi1iaW5kOnZhbHVlIGNvbmZsaWN0cyB3aXRoIHYtbW9kZWxcbiAgLy8gZXhjZXB0IGZvciBpbnB1dHMgd2l0aCB2LWJpbmQ6dHlwZVxuICB7XG4gICAgY29uc3QgdmFsdWUgPSBlbC5hdHRyc01hcFsndi1iaW5kOnZhbHVlJ10gfHwgZWwuYXR0cnNNYXBbJzp2YWx1ZSddO1xuICAgIGNvbnN0IHR5cGVCaW5kaW5nID0gZWwuYXR0cnNNYXBbJ3YtYmluZDp0eXBlJ10gfHwgZWwuYXR0cnNNYXBbJzp0eXBlJ107XG4gICAgaWYgKHZhbHVlICYmICF0eXBlQmluZGluZykge1xuICAgICAgY29uc3QgYmluZGluZyA9IGVsLmF0dHJzTWFwWyd2LWJpbmQ6dmFsdWUnXSA/ICd2LWJpbmQ6dmFsdWUnIDogJzp2YWx1ZSc7XG4gICAgICB3YXJuJDEoXG4gICAgICAgIGAke2JpbmRpbmd9PVwiJHt2YWx1ZX1cIiBjb25mbGljdHMgd2l0aCB2LW1vZGVsIG9uIHRoZSBzYW1lIGVsZW1lbnQgYCArXG4gICAgICAgICdiZWNhdXNlIHRoZSBsYXR0ZXIgYWxyZWFkeSBleHBhbmRzIHRvIGEgdmFsdWUgYmluZGluZyBpbnRlcm5hbGx5JyxcbiAgICAgICAgZWwucmF3QXR0cnNNYXBbYmluZGluZ11cbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgY29uc3QgeyBsYXp5LCBudW1iZXIsIHRyaW0gfSA9IG1vZGlmaWVycyB8fCB7fTtcbiAgY29uc3QgbmVlZENvbXBvc2l0aW9uR3VhcmQgPSAhbGF6eSAmJiB0eXBlICE9PSAncmFuZ2UnO1xuICBjb25zdCBldmVudCA9IGxhenlcbiAgICA/ICdjaGFuZ2UnXG4gICAgOiB0eXBlID09PSAncmFuZ2UnXG4gICAgICA/IFJBTkdFX1RPS0VOXG4gICAgICA6ICdpbnB1dCc7XG5cbiAgbGV0IHZhbHVlRXhwcmVzc2lvbiA9ICckZXZlbnQudGFyZ2V0LnZhbHVlJztcbiAgaWYgKHRyaW0pIHtcbiAgICB2YWx1ZUV4cHJlc3Npb24gPSBgJGV2ZW50LnRhcmdldC52YWx1ZS50cmltKClgO1xuICB9XG4gIGlmIChudW1iZXIpIHtcbiAgICB2YWx1ZUV4cHJlc3Npb24gPSBgX24oJHt2YWx1ZUV4cHJlc3Npb259KWA7XG4gIH1cblxuICBsZXQgY29kZSA9IGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCB2YWx1ZUV4cHJlc3Npb24pO1xuICBpZiAobmVlZENvbXBvc2l0aW9uR3VhcmQpIHtcbiAgICBjb2RlID0gYGlmKCRldmVudC50YXJnZXQuY29tcG9zaW5nKXJldHVybjske2NvZGV9YDtcbiAgfVxuXG4gIGFkZFByb3AoZWwsICd2YWx1ZScsIGAoJHt2YWx1ZX0pYCk7XG4gIGFkZEhhbmRsZXIoZWwsIGV2ZW50LCBjb2RlLCBudWxsLCB0cnVlKTtcbiAgaWYgKHRyaW0gfHwgbnVtYmVyKSB7XG4gICAgYWRkSGFuZGxlcihlbCwgJ2JsdXInLCAnJGZvcmNlVXBkYXRlKCknKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuLy8gbm9ybWFsaXplIHYtbW9kZWwgZXZlbnQgdG9rZW5zIHRoYXQgY2FuIG9ubHkgYmUgZGV0ZXJtaW5lZCBhdCBydW50aW1lLlxuLy8gaXQncyBpbXBvcnRhbnQgdG8gcGxhY2UgdGhlIGV2ZW50IGFzIHRoZSBmaXJzdCBpbiB0aGUgYXJyYXkgYmVjYXVzZVxuLy8gdGhlIHdob2xlIHBvaW50IGlzIGVuc3VyaW5nIHRoZSB2LW1vZGVsIGNhbGxiYWNrIGdldHMgY2FsbGVkIGJlZm9yZVxuLy8gdXNlci1hdHRhY2hlZCBoYW5kbGVycy5cbmZ1bmN0aW9uIG5vcm1hbGl6ZUV2ZW50cyAob24pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihvbltSQU5HRV9UT0tFTl0pKSB7XG4gICAgLy8gSUUgaW5wdXRbdHlwZT1yYW5nZV0gb25seSBzdXBwb3J0cyBgY2hhbmdlYCBldmVudFxuICAgIGNvbnN0IGV2ZW50ID0gaXNJRSA/ICdjaGFuZ2UnIDogJ2lucHV0JztcbiAgICBvbltldmVudF0gPSBbXS5jb25jYXQob25bUkFOR0VfVE9LRU5dLCBvbltldmVudF0gfHwgW10pO1xuICAgIGRlbGV0ZSBvbltSQU5HRV9UT0tFTl07XG4gIH1cbiAgLy8gVGhpcyB3YXMgb3JpZ2luYWxseSBpbnRlbmRlZCB0byBmaXggIzQ1MjEgYnV0IG5vIGxvbmdlciBuZWNlc3NhcnlcbiAgLy8gYWZ0ZXIgMi41LiBLZWVwaW5nIGl0IGZvciBiYWNrd2FyZHMgY29tcGF0IHdpdGggZ2VuZXJhdGVkIGNvZGUgZnJvbSA8IDIuNFxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzRGVmKG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXSkpIHtcbiAgICBvbi5jaGFuZ2UgPSBbXS5jb25jYXQob25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dLCBvbi5jaGFuZ2UgfHwgW10pO1xuICAgIGRlbGV0ZSBvbltDSEVDS0JPWF9SQURJT19UT0tFTl07XG4gIH1cbn1cblxubGV0IHRhcmdldCQxO1xuXG5mdW5jdGlvbiBjcmVhdGVPbmNlSGFuZGxlciQxIChldmVudCwgaGFuZGxlciwgY2FwdHVyZSkge1xuICBjb25zdCBfdGFyZ2V0ID0gdGFyZ2V0JDE7IC8vIHNhdmUgY3VycmVudCB0YXJnZXQgZWxlbWVudCBpbiBjbG9zdXJlXG4gIHJldHVybiBmdW5jdGlvbiBvbmNlSGFuZGxlciAoKSB7XG4gICAgY29uc3QgcmVzID0gaGFuZGxlci5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgIGlmIChyZXMgIT09IG51bGwpIHtcbiAgICAgIHJlbW92ZSQyKGV2ZW50LCBvbmNlSGFuZGxlciwgY2FwdHVyZSwgX3RhcmdldCk7XG4gICAgfVxuICB9XG59XG5cbi8vICM5NDQ2OiBGaXJlZm94IDw9IDUzIChpbiBwYXJ0aWN1bGFyLCBFU1IgNTIpIGhhcyBpbmNvcnJlY3QgRXZlbnQudGltZVN0YW1wXG4vLyBpbXBsZW1lbnRhdGlvbiBhbmQgZG9lcyBub3QgZmlyZSBtaWNyb3Rhc2tzIGluIGJldHdlZW4gZXZlbnQgcHJvcGFnYXRpb24sIHNvXG4vLyBzYWZlIHRvIGV4Y2x1ZGUuXG5jb25zdCB1c2VNaWNyb3Rhc2tGaXggPSBpc1VzaW5nTWljcm9UYXNrICYmICEoaXNGRiAmJiBOdW1iZXIoaXNGRlsxXSkgPD0gNTMpO1xuXG5mdW5jdGlvbiBhZGQkMSAoXG4gIG5hbWUsXG4gIGhhbmRsZXIsXG4gIGNhcHR1cmUsXG4gIHBhc3NpdmVcbikge1xuICAvLyBhc3luYyBlZGdlIGNhc2UgIzY1NjY6IGlubmVyIGNsaWNrIGV2ZW50IHRyaWdnZXJzIHBhdGNoLCBldmVudCBoYW5kbGVyXG4gIC8vIGF0dGFjaGVkIHRvIG91dGVyIGVsZW1lbnQgZHVyaW5nIHBhdGNoLCBhbmQgdHJpZ2dlcmVkIGFnYWluLiBUaGlzXG4gIC8vIGhhcHBlbnMgYmVjYXVzZSBicm93c2VycyBmaXJlIG1pY3JvdGFzayB0aWNrcyBiZXR3ZWVuIGV2ZW50IHByb3BhZ2F0aW9uLlxuICAvLyB0aGUgc29sdXRpb24gaXMgc2ltcGxlOiB3ZSBzYXZlIHRoZSB0aW1lc3RhbXAgd2hlbiBhIGhhbmRsZXIgaXMgYXR0YWNoZWQsXG4gIC8vIGFuZCB0aGUgaGFuZGxlciB3b3VsZCBvbmx5IGZpcmUgaWYgdGhlIGV2ZW50IHBhc3NlZCB0byBpdCB3YXMgZmlyZWRcbiAgLy8gQUZURVIgaXQgd2FzIGF0dGFjaGVkLlxuICBpZiAodXNlTWljcm90YXNrRml4KSB7XG4gICAgY29uc3QgYXR0YWNoZWRUaW1lc3RhbXAgPSBjdXJyZW50Rmx1c2hUaW1lc3RhbXA7XG4gICAgY29uc3Qgb3JpZ2luYWwgPSBoYW5kbGVyO1xuICAgIGhhbmRsZXIgPSBvcmlnaW5hbC5fd3JhcHBlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICBpZiAoXG4gICAgICAgIC8vIG5vIGJ1YmJsaW5nLCBzaG91bGQgYWx3YXlzIGZpcmUuXG4gICAgICAgIC8vIHRoaXMgaXMganVzdCBhIHNhZmV0eSBuZXQgaW4gY2FzZSBldmVudC50aW1lU3RhbXAgaXMgdW5yZWxpYWJsZSBpblxuICAgICAgICAvLyBjZXJ0YWluIHdlaXJkIGVudmlyb25tZW50cy4uLlxuICAgICAgICBlLnRhcmdldCA9PT0gZS5jdXJyZW50VGFyZ2V0IHx8XG4gICAgICAgIC8vIGV2ZW50IGlzIGZpcmVkIGFmdGVyIGhhbmRsZXIgYXR0YWNobWVudFxuICAgICAgICBlLnRpbWVTdGFtcCA+PSBhdHRhY2hlZFRpbWVzdGFtcCB8fFxuICAgICAgICAvLyAjOTQ2MiBiYWlsIGZvciBpT1MgOSBidWc6IGV2ZW50LnRpbWVTdGFtcCBpcyAwIGFmdGVyIGhpc3RvcnkucHVzaFN0YXRlXG4gICAgICAgIGUudGltZVN0YW1wID09PSAwIHx8XG4gICAgICAgIC8vICM5NDQ4IGJhaWwgaWYgZXZlbnQgaXMgZmlyZWQgaW4gYW5vdGhlciBkb2N1bWVudCBpbiBhIG11bHRpLXBhZ2VcbiAgICAgICAgLy8gZWxlY3Ryb24vbncuanMgYXBwLCBzaW5jZSBldmVudC50aW1lU3RhbXAgd2lsbCBiZSB1c2luZyBhIGRpZmZlcmVudFxuICAgICAgICAvLyBzdGFydGluZyByZWZlcmVuY2VcbiAgICAgICAgZS50YXJnZXQub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnRcbiAgICAgICkge1xuICAgICAgICByZXR1cm4gb3JpZ2luYWwuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuICAgICAgfVxuICAgIH07XG4gIH1cbiAgdGFyZ2V0JDEuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICBuYW1lLFxuICAgIGhhbmRsZXIsXG4gICAgc3VwcG9ydHNQYXNzaXZlXG4gICAgICA/IHsgY2FwdHVyZSwgcGFzc2l2ZSB9XG4gICAgICA6IGNhcHR1cmVcbiAgKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlJDIgKFxuICBuYW1lLFxuICBoYW5kbGVyLFxuICBjYXB0dXJlLFxuICBfdGFyZ2V0XG4pIHtcbiAgKF90YXJnZXQgfHwgdGFyZ2V0JDEpLnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgbmFtZSxcbiAgICBoYW5kbGVyLl93cmFwcGVyIHx8IGhhbmRsZXIsXG4gICAgY2FwdHVyZVxuICApO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVET01MaXN0ZW5lcnMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLm9uKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEub24pKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgY29uc3Qgb24gPSB2bm9kZS5kYXRhLm9uIHx8IHt9O1xuICBjb25zdCBvbGRPbiA9IG9sZFZub2RlLmRhdGEub24gfHwge307XG4gIHRhcmdldCQxID0gdm5vZGUuZWxtO1xuICBub3JtYWxpemVFdmVudHMob24pO1xuICB1cGRhdGVMaXN0ZW5lcnMob24sIG9sZE9uLCBhZGQkMSwgcmVtb3ZlJDIsIGNyZWF0ZU9uY2VIYW5kbGVyJDEsIHZub2RlLmNvbnRleHQpO1xuICB0YXJnZXQkMSA9IHVuZGVmaW5lZDtcbn1cblxudmFyIGV2ZW50cyA9IHtcbiAgY3JlYXRlOiB1cGRhdGVET01MaXN0ZW5lcnMsXG4gIHVwZGF0ZTogdXBkYXRlRE9NTGlzdGVuZXJzXG59O1xuXG4vKiAgKi9cblxubGV0IHN2Z0NvbnRhaW5lcjtcblxuZnVuY3Rpb24gdXBkYXRlRE9NUHJvcHMgKG9sZFZub2RlLCB2bm9kZSkge1xuICBpZiAoaXNVbmRlZihvbGRWbm9kZS5kYXRhLmRvbVByb3BzKSAmJiBpc1VuZGVmKHZub2RlLmRhdGEuZG9tUHJvcHMpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgbGV0IGtleSwgY3VyO1xuICBjb25zdCBlbG0gPSB2bm9kZS5lbG07XG4gIGNvbnN0IG9sZFByb3BzID0gb2xkVm5vZGUuZGF0YS5kb21Qcm9wcyB8fCB7fTtcbiAgbGV0IHByb3BzID0gdm5vZGUuZGF0YS5kb21Qcm9wcyB8fCB7fTtcbiAgLy8gY2xvbmUgb2JzZXJ2ZWQgb2JqZWN0cywgYXMgdGhlIHVzZXIgcHJvYmFibHkgd2FudHMgdG8gbXV0YXRlIGl0XG4gIGlmIChpc0RlZihwcm9wcy5fX29iX18pKSB7XG4gICAgcHJvcHMgPSB2bm9kZS5kYXRhLmRvbVByb3BzID0gZXh0ZW5kKHt9LCBwcm9wcyk7XG4gIH1cblxuICBmb3IgKGtleSBpbiBvbGRQcm9wcykge1xuICAgIGlmIChpc1VuZGVmKHByb3BzW2tleV0pKSB7XG4gICAgICBlbG1ba2V5XSA9ICcnO1xuICAgIH1cbiAgfVxuICBmb3IgKGtleSBpbiBwcm9wcykge1xuICAgIGN1ciA9IHByb3BzW2tleV07XG4gICAgLy8gaWdub3JlIGNoaWxkcmVuIGlmIHRoZSBub2RlIGhhcyB0ZXh0Q29udGVudCBvciBpbm5lckhUTUwsXG4gICAgLy8gYXMgdGhlc2Ugd2lsbCB0aHJvdyBhd2F5IGV4aXN0aW5nIERPTSBub2RlcyBhbmQgY2F1c2UgcmVtb3ZhbCBlcnJvcnNcbiAgICAvLyBvbiBzdWJzZXF1ZW50IHBhdGNoZXMgKCMzMzYwKVxuICAgIGlmIChrZXkgPT09ICd0ZXh0Q29udGVudCcgfHwga2V5ID09PSAnaW5uZXJIVE1MJykge1xuICAgICAgaWYgKHZub2RlLmNoaWxkcmVuKSB2bm9kZS5jaGlsZHJlbi5sZW5ndGggPSAwO1xuICAgICAgaWYgKGN1ciA9PT0gb2xkUHJvcHNba2V5XSkgY29udGludWVcbiAgICAgIC8vICM2NjAxIHdvcmsgYXJvdW5kIENocm9tZSB2ZXJzaW9uIDw9IDU1IGJ1ZyB3aGVyZSBzaW5nbGUgdGV4dE5vZGVcbiAgICAgIC8vIHJlcGxhY2VkIGJ5IGlubmVySFRNTC90ZXh0Q29udGVudCByZXRhaW5zIGl0cyBwYXJlbnROb2RlIHByb3BlcnR5XG4gICAgICBpZiAoZWxtLmNoaWxkTm9kZXMubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGVsbS5yZW1vdmVDaGlsZChlbG0uY2hpbGROb2Rlc1swXSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gc2tpcCB0aGUgdXBkYXRlIGlmIG9sZCBhbmQgbmV3IFZET00gc3RhdGUgaXMgdGhlIHNhbWUuXG4gICAgLy8gdGhlIG9ubHkgZXhjZXB0aW9uIGlzIGB2YWx1ZWAgd2hlcmUgdGhlIERPTSB2YWx1ZSBtYXkgYmUgdGVtcG9yYXJpbHlcbiAgICAvLyBvdXQgb2Ygc3luYyB3aXRoIFZET00gc3RhdGUgZHVlIHRvIGZvY3VzLCBjb21wb3NpdGlvbiBhbmQgbW9kaWZpZXJzLlxuICAgIC8vIFRoaXMgYWxzbyBjb3ZlcnMgIzQ1MjEgYnkgc2tpcHBpbmcgdGhlIHVubmVjZXNhcnJ5IGBjaGVja2VkYCB1cGRhdGUuXG4gICAgaWYgKGtleSAhPT0gJ3ZhbHVlJyAmJiBjdXIgPT09IG9sZFByb3BzW2tleV0pIHtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgaWYgKGtleSA9PT0gJ3ZhbHVlJykge1xuICAgICAgLy8gc3RvcmUgdmFsdWUgYXMgX3ZhbHVlIGFzIHdlbGwgc2luY2VcbiAgICAgIC8vIG5vbi1zdHJpbmcgdmFsdWVzIHdpbGwgYmUgc3RyaW5naWZpZWRcbiAgICAgIGVsbS5fdmFsdWUgPSBjdXI7XG4gICAgICAvLyBhdm9pZCByZXNldHRpbmcgY3Vyc29yIHBvc2l0aW9uIHdoZW4gdmFsdWUgaXMgdGhlIHNhbWVcbiAgICAgIGNvbnN0IHN0ckN1ciA9IGlzVW5kZWYoY3VyKSA/ICcnIDogU3RyaW5nKGN1cik7XG4gICAgICBpZiAoc2hvdWxkVXBkYXRlVmFsdWUoZWxtLCBzdHJDdXIpKSB7XG4gICAgICAgIGVsbS52YWx1ZSA9IHN0ckN1cjtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGtleSA9PT0gJ2lubmVySFRNTCcgJiYgaXNTVkcoZWxtLnRhZ05hbWUpICYmIGlzVW5kZWYoZWxtLmlubmVySFRNTCkpIHtcbiAgICAgIC8vIElFIGRvZXNuJ3Qgc3VwcG9ydCBpbm5lckhUTUwgZm9yIFNWRyBlbGVtZW50c1xuICAgICAgc3ZnQ29udGFpbmVyID0gc3ZnQ29udGFpbmVyIHx8IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgc3ZnQ29udGFpbmVyLmlubmVySFRNTCA9IGA8c3ZnPiR7Y3VyfTwvc3ZnPmA7XG4gICAgICBjb25zdCBzdmcgPSBzdmdDb250YWluZXIuZmlyc3RDaGlsZDtcbiAgICAgIHdoaWxlIChlbG0uZmlyc3RDaGlsZCkge1xuICAgICAgICBlbG0ucmVtb3ZlQ2hpbGQoZWxtLmZpcnN0Q2hpbGQpO1xuICAgICAgfVxuICAgICAgd2hpbGUgKHN2Zy5maXJzdENoaWxkKSB7XG4gICAgICAgIGVsbS5hcHBlbmRDaGlsZChzdmcuZmlyc3RDaGlsZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsbVtrZXldID0gY3VyO1xuICAgIH1cbiAgfVxufVxuXG4vLyBjaGVjayBwbGF0Zm9ybXMvd2ViL3V0aWwvYXR0cnMuanMgYWNjZXB0VmFsdWVcblxuXG5mdW5jdGlvbiBzaG91bGRVcGRhdGVWYWx1ZSAoZWxtLCBjaGVja1ZhbCkge1xuICByZXR1cm4gKCFlbG0uY29tcG9zaW5nICYmIChcbiAgICBlbG0udGFnTmFtZSA9PT0gJ09QVElPTicgfHxcbiAgICBpc05vdEluRm9jdXNBbmREaXJ0eShlbG0sIGNoZWNrVmFsKSB8fFxuICAgIGlzRGlydHlXaXRoTW9kaWZpZXJzKGVsbSwgY2hlY2tWYWwpXG4gICkpXG59XG5cbmZ1bmN0aW9uIGlzTm90SW5Gb2N1c0FuZERpcnR5IChlbG0sIGNoZWNrVmFsKSB7XG4gIC8vIHJldHVybiB0cnVlIHdoZW4gdGV4dGJveCAoLm51bWJlciBhbmQgLnRyaW0pIGxvc2VzIGZvY3VzIGFuZCBpdHMgdmFsdWUgaXNcbiAgLy8gbm90IGVxdWFsIHRvIHRoZSB1cGRhdGVkIHZhbHVlXG4gIGxldCBub3RJbkZvY3VzID0gdHJ1ZTtcbiAgLy8gIzYxNTdcbiAgLy8gd29yayBhcm91bmQgSUUgYnVnIHdoZW4gYWNjZXNzaW5nIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgaW4gYW4gaWZyYW1lXG4gIHRyeSB7IG5vdEluRm9jdXMgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBlbG07IH0gY2F0Y2ggKGUpIHt9XG4gIHJldHVybiBub3RJbkZvY3VzICYmIGVsbS52YWx1ZSAhPT0gY2hlY2tWYWxcbn1cblxuZnVuY3Rpb24gaXNEaXJ0eVdpdGhNb2RpZmllcnMgKGVsbSwgbmV3VmFsKSB7XG4gIGNvbnN0IHZhbHVlID0gZWxtLnZhbHVlO1xuICBjb25zdCBtb2RpZmllcnMgPSBlbG0uX3ZNb2RpZmllcnM7IC8vIGluamVjdGVkIGJ5IHYtbW9kZWwgcnVudGltZVxuICBpZiAoaXNEZWYobW9kaWZpZXJzKSkge1xuICAgIGlmIChtb2RpZmllcnMubnVtYmVyKSB7XG4gICAgICByZXR1cm4gdG9OdW1iZXIodmFsdWUpICE9PSB0b051bWJlcihuZXdWYWwpXG4gICAgfVxuICAgIGlmIChtb2RpZmllcnMudHJpbSkge1xuICAgICAgcmV0dXJuIHZhbHVlLnRyaW0oKSAhPT0gbmV3VmFsLnRyaW0oKVxuICAgIH1cbiAgfVxuICByZXR1cm4gdmFsdWUgIT09IG5ld1ZhbFxufVxuXG52YXIgZG9tUHJvcHMgPSB7XG4gIGNyZWF0ZTogdXBkYXRlRE9NUHJvcHMsXG4gIHVwZGF0ZTogdXBkYXRlRE9NUHJvcHNcbn07XG5cbi8qICAqL1xuXG5jb25zdCBwYXJzZVN0eWxlVGV4dCA9IGNhY2hlZChmdW5jdGlvbiAoY3NzVGV4dCkge1xuICBjb25zdCByZXMgPSB7fTtcbiAgY29uc3QgbGlzdERlbGltaXRlciA9IC87KD8hW14oXSpcXCkpL2c7XG4gIGNvbnN0IHByb3BlcnR5RGVsaW1pdGVyID0gLzooLispLztcbiAgY3NzVGV4dC5zcGxpdChsaXN0RGVsaW1pdGVyKS5mb3JFYWNoKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgaWYgKGl0ZW0pIHtcbiAgICAgIGNvbnN0IHRtcCA9IGl0ZW0uc3BsaXQocHJvcGVydHlEZWxpbWl0ZXIpO1xuICAgICAgdG1wLmxlbmd0aCA+IDEgJiYgKHJlc1t0bXBbMF0udHJpbSgpXSA9IHRtcFsxXS50cmltKCkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiByZXNcbn0pO1xuXG4vLyBtZXJnZSBzdGF0aWMgYW5kIGR5bmFtaWMgc3R5bGUgZGF0YSBvbiB0aGUgc2FtZSB2bm9kZVxuZnVuY3Rpb24gbm9ybWFsaXplU3R5bGVEYXRhIChkYXRhKSB7XG4gIGNvbnN0IHN0eWxlID0gbm9ybWFsaXplU3R5bGVCaW5kaW5nKGRhdGEuc3R5bGUpO1xuICAvLyBzdGF0aWMgc3R5bGUgaXMgcHJlLXByb2Nlc3NlZCBpbnRvIGFuIG9iamVjdCBkdXJpbmcgY29tcGlsYXRpb25cbiAgLy8gYW5kIGlzIGFsd2F5cyBhIGZyZXNoIG9iamVjdCwgc28gaXQncyBzYWZlIHRvIG1lcmdlIGludG8gaXRcbiAgcmV0dXJuIGRhdGEuc3RhdGljU3R5bGVcbiAgICA/IGV4dGVuZChkYXRhLnN0YXRpY1N0eWxlLCBzdHlsZSlcbiAgICA6IHN0eWxlXG59XG5cbi8vIG5vcm1hbGl6ZSBwb3NzaWJsZSBhcnJheSAvIHN0cmluZyB2YWx1ZXMgaW50byBPYmplY3RcbmZ1bmN0aW9uIG5vcm1hbGl6ZVN0eWxlQmluZGluZyAoYmluZGluZ1N0eWxlKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGJpbmRpbmdTdHlsZSkpIHtcbiAgICByZXR1cm4gdG9PYmplY3QoYmluZGluZ1N0eWxlKVxuICB9XG4gIGlmICh0eXBlb2YgYmluZGluZ1N0eWxlID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBwYXJzZVN0eWxlVGV4dChiaW5kaW5nU3R5bGUpXG4gIH1cbiAgcmV0dXJuIGJpbmRpbmdTdHlsZVxufVxuXG4vKipcbiAqIHBhcmVudCBjb21wb25lbnQgc3R5bGUgc2hvdWxkIGJlIGFmdGVyIGNoaWxkJ3NcbiAqIHNvIHRoYXQgcGFyZW50IGNvbXBvbmVudCdzIHN0eWxlIGNvdWxkIG92ZXJyaWRlIGl0XG4gKi9cbmZ1bmN0aW9uIGdldFN0eWxlICh2bm9kZSwgY2hlY2tDaGlsZCkge1xuICBjb25zdCByZXMgPSB7fTtcbiAgbGV0IHN0eWxlRGF0YTtcblxuICBpZiAoY2hlY2tDaGlsZCkge1xuICAgIGxldCBjaGlsZE5vZGUgPSB2bm9kZTtcbiAgICB3aGlsZSAoY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlKSB7XG4gICAgICBjaGlsZE5vZGUgPSBjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgICAgaWYgKFxuICAgICAgICBjaGlsZE5vZGUgJiYgY2hpbGROb2RlLmRhdGEgJiZcbiAgICAgICAgKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YShjaGlsZE5vZGUuZGF0YSkpXG4gICAgICApIHtcbiAgICAgICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoKHN0eWxlRGF0YSA9IG5vcm1hbGl6ZVN0eWxlRGF0YSh2bm9kZS5kYXRhKSkpIHtcbiAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICB9XG5cbiAgbGV0IHBhcmVudE5vZGUgPSB2bm9kZTtcbiAgd2hpbGUgKChwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG4gICAgaWYgKHBhcmVudE5vZGUuZGF0YSAmJiAoc3R5bGVEYXRhID0gbm9ybWFsaXplU3R5bGVEYXRhKHBhcmVudE5vZGUuZGF0YSkpKSB7XG4gICAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbi8qICAqL1xuXG5jb25zdCBjc3NWYXJSRSA9IC9eLS0vO1xuY29uc3QgaW1wb3J0YW50UkUgPSAvXFxzKiFpbXBvcnRhbnQkLztcbmNvbnN0IHNldFByb3AgPSAoZWwsIG5hbWUsIHZhbCkgPT4ge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGNzc1ZhclJFLnRlc3QobmFtZSkpIHtcbiAgICBlbC5zdHlsZS5zZXRQcm9wZXJ0eShuYW1lLCB2YWwpO1xuICB9IGVsc2UgaWYgKGltcG9ydGFudFJFLnRlc3QodmFsKSkge1xuICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KGh5cGhlbmF0ZShuYW1lKSwgdmFsLnJlcGxhY2UoaW1wb3J0YW50UkUsICcnKSwgJ2ltcG9ydGFudCcpO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IG5vcm1hbGl6ZWROYW1lID0gbm9ybWFsaXplKG5hbWUpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbCkpIHtcbiAgICAgIC8vIFN1cHBvcnQgdmFsdWVzIGFycmF5IGNyZWF0ZWQgYnkgYXV0b3ByZWZpeGVyLCBlLmcuXG4gICAgICAvLyB7ZGlzcGxheTogW1wiLXdlYmtpdC1ib3hcIiwgXCItbXMtZmxleGJveFwiLCBcImZsZXhcIl19XG4gICAgICAvLyBTZXQgdGhlbSBvbmUgYnkgb25lLCBhbmQgdGhlIGJyb3dzZXIgd2lsbCBvbmx5IHNldCB0aG9zZSBpdCBjYW4gcmVjb2duaXplXG4gICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdmFsLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGVsLnN0eWxlW25vcm1hbGl6ZWROYW1lXSA9IHZhbFtpXTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZWwuc3R5bGVbbm9ybWFsaXplZE5hbWVdID0gdmFsO1xuICAgIH1cbiAgfVxufTtcblxuY29uc3QgdmVuZG9yTmFtZXMgPSBbJ1dlYmtpdCcsICdNb3onLCAnbXMnXTtcblxubGV0IGVtcHR5U3R5bGU7XG5jb25zdCBub3JtYWxpemUgPSBjYWNoZWQoZnVuY3Rpb24gKHByb3ApIHtcbiAgZW1wdHlTdHlsZSA9IGVtcHR5U3R5bGUgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG4gIHByb3AgPSBjYW1lbGl6ZShwcm9wKTtcbiAgaWYgKHByb3AgIT09ICdmaWx0ZXInICYmIChwcm9wIGluIGVtcHR5U3R5bGUpKSB7XG4gICAgcmV0dXJuIHByb3BcbiAgfVxuICBjb25zdCBjYXBOYW1lID0gcHJvcC5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHByb3Auc2xpY2UoMSk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdmVuZG9yTmFtZXMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBuYW1lID0gdmVuZG9yTmFtZXNbaV0gKyBjYXBOYW1lO1xuICAgIGlmIChuYW1lIGluIGVtcHR5U3R5bGUpIHtcbiAgICAgIHJldHVybiBuYW1lXG4gICAgfVxuICB9XG59KTtcblxuZnVuY3Rpb24gdXBkYXRlU3R5bGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICBjb25zdCBkYXRhID0gdm5vZGUuZGF0YTtcbiAgY29uc3Qgb2xkRGF0YSA9IG9sZFZub2RlLmRhdGE7XG5cbiAgaWYgKGlzVW5kZWYoZGF0YS5zdGF0aWNTdHlsZSkgJiYgaXNVbmRlZihkYXRhLnN0eWxlKSAmJlxuICAgIGlzVW5kZWYob2xkRGF0YS5zdGF0aWNTdHlsZSkgJiYgaXNVbmRlZihvbGREYXRhLnN0eWxlKVxuICApIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGxldCBjdXIsIG5hbWU7XG4gIGNvbnN0IGVsID0gdm5vZGUuZWxtO1xuICBjb25zdCBvbGRTdGF0aWNTdHlsZSA9IG9sZERhdGEuc3RhdGljU3R5bGU7XG4gIGNvbnN0IG9sZFN0eWxlQmluZGluZyA9IG9sZERhdGEubm9ybWFsaXplZFN0eWxlIHx8IG9sZERhdGEuc3R5bGUgfHwge307XG5cbiAgLy8gaWYgc3RhdGljIHN0eWxlIGV4aXN0cywgc3R5bGViaW5kaW5nIGFscmVhZHkgbWVyZ2VkIGludG8gaXQgd2hlbiBkb2luZyBub3JtYWxpemVTdHlsZURhdGFcbiAgY29uc3Qgb2xkU3R5bGUgPSBvbGRTdGF0aWNTdHlsZSB8fCBvbGRTdHlsZUJpbmRpbmc7XG5cbiAgY29uc3Qgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcodm5vZGUuZGF0YS5zdHlsZSkgfHwge307XG5cbiAgLy8gc3RvcmUgbm9ybWFsaXplZCBzdHlsZSB1bmRlciBhIGRpZmZlcmVudCBrZXkgZm9yIG5leHQgZGlmZlxuICAvLyBtYWtlIHN1cmUgdG8gY2xvbmUgaXQgaWYgaXQncyByZWFjdGl2ZSwgc2luY2UgdGhlIHVzZXIgbGlrZWx5IHdhbnRzXG4gIC8vIHRvIG11dGF0ZSBpdC5cbiAgdm5vZGUuZGF0YS5ub3JtYWxpemVkU3R5bGUgPSBpc0RlZihzdHlsZS5fX29iX18pXG4gICAgPyBleHRlbmQoe30sIHN0eWxlKVxuICAgIDogc3R5bGU7XG5cbiAgY29uc3QgbmV3U3R5bGUgPSBnZXRTdHlsZSh2bm9kZSwgdHJ1ZSk7XG5cbiAgZm9yIChuYW1lIGluIG9sZFN0eWxlKSB7XG4gICAgaWYgKGlzVW5kZWYobmV3U3R5bGVbbmFtZV0pKSB7XG4gICAgICBzZXRQcm9wKGVsLCBuYW1lLCAnJyk7XG4gICAgfVxuICB9XG4gIGZvciAobmFtZSBpbiBuZXdTdHlsZSkge1xuICAgIGN1ciA9IG5ld1N0eWxlW25hbWVdO1xuICAgIGlmIChjdXIgIT09IG9sZFN0eWxlW25hbWVdKSB7XG4gICAgICAvLyBpZTkgc2V0dGluZyB0byBudWxsIGhhcyBubyBlZmZlY3QsIG11c3QgdXNlIGVtcHR5IHN0cmluZ1xuICAgICAgc2V0UHJvcChlbCwgbmFtZSwgY3VyID09IG51bGwgPyAnJyA6IGN1cik7XG4gICAgfVxuICB9XG59XG5cbnZhciBzdHlsZSA9IHtcbiAgY3JlYXRlOiB1cGRhdGVTdHlsZSxcbiAgdXBkYXRlOiB1cGRhdGVTdHlsZVxufTtcblxuLyogICovXG5cbmNvbnN0IHdoaXRlc3BhY2VSRSA9IC9cXHMrLztcblxuLyoqXG4gKiBBZGQgY2xhc3Mgd2l0aCBjb21wYXRpYmlsaXR5IGZvciBTVkcgc2luY2UgY2xhc3NMaXN0IGlzIG5vdCBzdXBwb3J0ZWQgb25cbiAqIFNWRyBlbGVtZW50cyBpbiBJRVxuICovXG5mdW5jdGlvbiBhZGRDbGFzcyAoZWwsIGNscykge1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKCFjbHMgfHwgIShjbHMgPSBjbHMudHJpbSgpKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgaWYgKGVsLmNsYXNzTGlzdCkge1xuICAgIGlmIChjbHMuaW5kZXhPZignICcpID4gLTEpIHtcbiAgICAgIGNscy5zcGxpdCh3aGl0ZXNwYWNlUkUpLmZvckVhY2goYyA9PiBlbC5jbGFzc0xpc3QuYWRkKGMpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWwuY2xhc3NMaXN0LmFkZChjbHMpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBjb25zdCBjdXIgPSBgICR7ZWwuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnfSBgO1xuICAgIGlmIChjdXIuaW5kZXhPZignICcgKyBjbHMgKyAnICcpIDwgMCkge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIChjdXIgKyBjbHMpLnRyaW0oKSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogUmVtb3ZlIGNsYXNzIHdpdGggY29tcGF0aWJpbGl0eSBmb3IgU1ZHIHNpbmNlIGNsYXNzTGlzdCBpcyBub3Qgc3VwcG9ydGVkIG9uXG4gKiBTVkcgZWxlbWVudHMgaW4gSUVcbiAqL1xuZnVuY3Rpb24gcmVtb3ZlQ2xhc3MgKGVsLCBjbHMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICghY2xzIHx8ICEoY2xzID0gY2xzLnRyaW0oKSkpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICBpZiAoY2xzLmluZGV4T2YoJyAnKSA+IC0xKSB7XG4gICAgICBjbHMuc3BsaXQod2hpdGVzcGFjZVJFKS5mb3JFYWNoKGMgPT4gZWwuY2xhc3NMaXN0LnJlbW92ZShjKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLmNsYXNzTGlzdC5yZW1vdmUoY2xzKTtcbiAgICB9XG4gICAgaWYgKCFlbC5jbGFzc0xpc3QubGVuZ3RoKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoJ2NsYXNzJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGxldCBjdXIgPSBgICR7ZWwuZ2V0QXR0cmlidXRlKCdjbGFzcycpIHx8ICcnfSBgO1xuICAgIGNvbnN0IHRhciA9ICcgJyArIGNscyArICcgJztcbiAgICB3aGlsZSAoY3VyLmluZGV4T2YodGFyKSA+PSAwKSB7XG4gICAgICBjdXIgPSBjdXIucmVwbGFjZSh0YXIsICcgJyk7XG4gICAgfVxuICAgIGN1ciA9IGN1ci50cmltKCk7XG4gICAgaWYgKGN1cikge1xuICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIGN1cik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHJlc29sdmVUcmFuc2l0aW9uIChkZWYkJDEpIHtcbiAgaWYgKCFkZWYkJDEpIHtcbiAgICByZXR1cm5cbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICBpZiAodHlwZW9mIGRlZiQkMSA9PT0gJ29iamVjdCcpIHtcbiAgICBjb25zdCByZXMgPSB7fTtcbiAgICBpZiAoZGVmJCQxLmNzcyAhPT0gZmFsc2UpIHtcbiAgICAgIGV4dGVuZChyZXMsIGF1dG9Dc3NUcmFuc2l0aW9uKGRlZiQkMS5uYW1lIHx8ICd2JykpO1xuICAgIH1cbiAgICBleHRlbmQocmVzLCBkZWYkJDEpO1xuICAgIHJldHVybiByZXNcbiAgfSBlbHNlIGlmICh0eXBlb2YgZGVmJCQxID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBhdXRvQ3NzVHJhbnNpdGlvbihkZWYkJDEpXG4gIH1cbn1cblxuY29uc3QgYXV0b0Nzc1RyYW5zaXRpb24gPSBjYWNoZWQobmFtZSA9PiB7XG4gIHJldHVybiB7XG4gICAgZW50ZXJDbGFzczogYCR7bmFtZX0tZW50ZXJgLFxuICAgIGVudGVyVG9DbGFzczogYCR7bmFtZX0tZW50ZXItdG9gLFxuICAgIGVudGVyQWN0aXZlQ2xhc3M6IGAke25hbWV9LWVudGVyLWFjdGl2ZWAsXG4gICAgbGVhdmVDbGFzczogYCR7bmFtZX0tbGVhdmVgLFxuICAgIGxlYXZlVG9DbGFzczogYCR7bmFtZX0tbGVhdmUtdG9gLFxuICAgIGxlYXZlQWN0aXZlQ2xhc3M6IGAke25hbWV9LWxlYXZlLWFjdGl2ZWBcbiAgfVxufSk7XG5cbmNvbnN0IGhhc1RyYW5zaXRpb24gPSBpbkJyb3dzZXIgJiYgIWlzSUU5O1xuY29uc3QgVFJBTlNJVElPTiA9ICd0cmFuc2l0aW9uJztcbmNvbnN0IEFOSU1BVElPTiA9ICdhbmltYXRpb24nO1xuXG4vLyBUcmFuc2l0aW9uIHByb3BlcnR5L2V2ZW50IHNuaWZmaW5nXG5sZXQgdHJhbnNpdGlvblByb3AgPSAndHJhbnNpdGlvbic7XG5sZXQgdHJhbnNpdGlvbkVuZEV2ZW50ID0gJ3RyYW5zaXRpb25lbmQnO1xubGV0IGFuaW1hdGlvblByb3AgPSAnYW5pbWF0aW9uJztcbmxldCBhbmltYXRpb25FbmRFdmVudCA9ICdhbmltYXRpb25lbmQnO1xuaWYgKGhhc1RyYW5zaXRpb24pIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmICh3aW5kb3cub250cmFuc2l0aW9uZW5kID09PSB1bmRlZmluZWQgJiZcbiAgICB3aW5kb3cub253ZWJraXR0cmFuc2l0aW9uZW5kICE9PSB1bmRlZmluZWRcbiAgKSB7XG4gICAgdHJhbnNpdGlvblByb3AgPSAnV2Via2l0VHJhbnNpdGlvbic7XG4gICAgdHJhbnNpdGlvbkVuZEV2ZW50ID0gJ3dlYmtpdFRyYW5zaXRpb25FbmQnO1xuICB9XG4gIGlmICh3aW5kb3cub25hbmltYXRpb25lbmQgPT09IHVuZGVmaW5lZCAmJlxuICAgIHdpbmRvdy5vbndlYmtpdGFuaW1hdGlvbmVuZCAhPT0gdW5kZWZpbmVkXG4gICkge1xuICAgIGFuaW1hdGlvblByb3AgPSAnV2Via2l0QW5pbWF0aW9uJztcbiAgICBhbmltYXRpb25FbmRFdmVudCA9ICd3ZWJraXRBbmltYXRpb25FbmQnO1xuICB9XG59XG5cbi8vIGJpbmRpbmcgdG8gd2luZG93IGlzIG5lY2Vzc2FyeSB0byBtYWtlIGhvdCByZWxvYWQgd29yayBpbiBJRSBpbiBzdHJpY3QgbW9kZVxuY29uc3QgcmFmID0gaW5Ccm93c2VyXG4gID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZVxuICAgID8gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZS5iaW5kKHdpbmRvdylcbiAgICA6IHNldFRpbWVvdXRcbiAgOiAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqLyBmbiA9PiBmbigpO1xuXG5mdW5jdGlvbiBuZXh0RnJhbWUgKGZuKSB7XG4gIHJhZigoKSA9PiB7XG4gICAgcmFmKGZuKTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGFkZFRyYW5zaXRpb25DbGFzcyAoZWwsIGNscykge1xuICBjb25zdCB0cmFuc2l0aW9uQ2xhc3NlcyA9IGVsLl90cmFuc2l0aW9uQ2xhc3NlcyB8fCAoZWwuX3RyYW5zaXRpb25DbGFzc2VzID0gW10pO1xuICBpZiAodHJhbnNpdGlvbkNsYXNzZXMuaW5kZXhPZihjbHMpIDwgMCkge1xuICAgIHRyYW5zaXRpb25DbGFzc2VzLnB1c2goY2xzKTtcbiAgICBhZGRDbGFzcyhlbCwgY2xzKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZW1vdmVUcmFuc2l0aW9uQ2xhc3MgKGVsLCBjbHMpIHtcbiAgaWYgKGVsLl90cmFuc2l0aW9uQ2xhc3Nlcykge1xuICAgIHJlbW92ZShlbC5fdHJhbnNpdGlvbkNsYXNzZXMsIGNscyk7XG4gIH1cbiAgcmVtb3ZlQ2xhc3MoZWwsIGNscyk7XG59XG5cbmZ1bmN0aW9uIHdoZW5UcmFuc2l0aW9uRW5kcyAoXG4gIGVsLFxuICBleHBlY3RlZFR5cGUsXG4gIGNiXG4pIHtcbiAgY29uc3QgeyB0eXBlLCB0aW1lb3V0LCBwcm9wQ291bnQgfSA9IGdldFRyYW5zaXRpb25JbmZvKGVsLCBleHBlY3RlZFR5cGUpO1xuICBpZiAoIXR5cGUpIHJldHVybiBjYigpXG4gIGNvbnN0IGV2ZW50ID0gdHlwZSA9PT0gVFJBTlNJVElPTiA/IHRyYW5zaXRpb25FbmRFdmVudCA6IGFuaW1hdGlvbkVuZEV2ZW50O1xuICBsZXQgZW5kZWQgPSAwO1xuICBjb25zdCBlbmQgPSAoKSA9PiB7XG4gICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpO1xuICAgIGNiKCk7XG4gIH07XG4gIGNvbnN0IG9uRW5kID0gZSA9PiB7XG4gICAgaWYgKGUudGFyZ2V0ID09PSBlbCkge1xuICAgICAgaWYgKCsrZW5kZWQgPj0gcHJvcENvdW50KSB7XG4gICAgICAgIGVuZCgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbiAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgaWYgKGVuZGVkIDwgcHJvcENvdW50KSB7XG4gICAgICBlbmQoKTtcbiAgICB9XG4gIH0sIHRpbWVvdXQgKyAxKTtcbiAgZWwuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgb25FbmQpO1xufVxuXG5jb25zdCB0cmFuc2Zvcm1SRSA9IC9cXGIodHJhbnNmb3JtfGFsbCkoLHwkKS87XG5cbmZ1bmN0aW9uIGdldFRyYW5zaXRpb25JbmZvIChlbCwgZXhwZWN0ZWRUeXBlKSB7XG4gIGNvbnN0IHN0eWxlcyA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGVsKTtcbiAgLy8gSlNET00gbWF5IHJldHVybiB1bmRlZmluZWQgZm9yIHRyYW5zaXRpb24gcHJvcGVydGllc1xuICBjb25zdCB0cmFuc2l0aW9uRGVsYXlzID0gKHN0eWxlc1t0cmFuc2l0aW9uUHJvcCArICdEZWxheSddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgY29uc3QgdHJhbnNpdGlvbkR1cmF0aW9ucyA9IChzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnRHVyYXRpb24nXSB8fCAnJykuc3BsaXQoJywgJyk7XG4gIGNvbnN0IHRyYW5zaXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dCh0cmFuc2l0aW9uRGVsYXlzLCB0cmFuc2l0aW9uRHVyYXRpb25zKTtcbiAgY29uc3QgYW5pbWF0aW9uRGVsYXlzID0gKHN0eWxlc1thbmltYXRpb25Qcm9wICsgJ0RlbGF5J10gfHwgJycpLnNwbGl0KCcsICcpO1xuICBjb25zdCBhbmltYXRpb25EdXJhdGlvbnMgPSAoc3R5bGVzW2FuaW1hdGlvblByb3AgKyAnRHVyYXRpb24nXSB8fCAnJykuc3BsaXQoJywgJyk7XG4gIGNvbnN0IGFuaW1hdGlvblRpbWVvdXQgPSBnZXRUaW1lb3V0KGFuaW1hdGlvbkRlbGF5cywgYW5pbWF0aW9uRHVyYXRpb25zKTtcblxuICBsZXQgdHlwZTtcbiAgbGV0IHRpbWVvdXQgPSAwO1xuICBsZXQgcHJvcENvdW50ID0gMDtcbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChleHBlY3RlZFR5cGUgPT09IFRSQU5TSVRJT04pIHtcbiAgICBpZiAodHJhbnNpdGlvblRpbWVvdXQgPiAwKSB7XG4gICAgICB0eXBlID0gVFJBTlNJVElPTjtcbiAgICAgIHRpbWVvdXQgPSB0cmFuc2l0aW9uVGltZW91dDtcbiAgICAgIHByb3BDb3VudCA9IHRyYW5zaXRpb25EdXJhdGlvbnMubGVuZ3RoO1xuICAgIH1cbiAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09IEFOSU1BVElPTikge1xuICAgIGlmIChhbmltYXRpb25UaW1lb3V0ID4gMCkge1xuICAgICAgdHlwZSA9IEFOSU1BVElPTjtcbiAgICAgIHRpbWVvdXQgPSBhbmltYXRpb25UaW1lb3V0O1xuICAgICAgcHJvcENvdW50ID0gYW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aDtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdGltZW91dCA9IE1hdGgubWF4KHRyYW5zaXRpb25UaW1lb3V0LCBhbmltYXRpb25UaW1lb3V0KTtcbiAgICB0eXBlID0gdGltZW91dCA+IDBcbiAgICAgID8gdHJhbnNpdGlvblRpbWVvdXQgPiBhbmltYXRpb25UaW1lb3V0XG4gICAgICAgID8gVFJBTlNJVElPTlxuICAgICAgICA6IEFOSU1BVElPTlxuICAgICAgOiBudWxsO1xuICAgIHByb3BDb3VudCA9IHR5cGVcbiAgICAgID8gdHlwZSA9PT0gVFJBTlNJVElPTlxuICAgICAgICA/IHRyYW5zaXRpb25EdXJhdGlvbnMubGVuZ3RoXG4gICAgICAgIDogYW5pbWF0aW9uRHVyYXRpb25zLmxlbmd0aFxuICAgICAgOiAwO1xuICB9XG4gIGNvbnN0IGhhc1RyYW5zZm9ybSA9XG4gICAgdHlwZSA9PT0gVFJBTlNJVElPTiAmJlxuICAgIHRyYW5zZm9ybVJFLnRlc3Qoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ1Byb3BlcnR5J10pO1xuICByZXR1cm4ge1xuICAgIHR5cGUsXG4gICAgdGltZW91dCxcbiAgICBwcm9wQ291bnQsXG4gICAgaGFzVHJhbnNmb3JtXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0VGltZW91dCAoZGVsYXlzLCBkdXJhdGlvbnMpIHtcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgd2hpbGUgKGRlbGF5cy5sZW5ndGggPCBkdXJhdGlvbnMubGVuZ3RoKSB7XG4gICAgZGVsYXlzID0gZGVsYXlzLmNvbmNhdChkZWxheXMpO1xuICB9XG5cbiAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KG51bGwsIGR1cmF0aW9ucy5tYXAoKGQsIGkpID0+IHtcbiAgICByZXR1cm4gdG9NcyhkKSArIHRvTXMoZGVsYXlzW2ldKVxuICB9KSlcbn1cblxuLy8gT2xkIHZlcnNpb25zIG9mIENocm9taXVtIChiZWxvdyA2MS4wLjMxNjMuMTAwKSBmb3JtYXRzIGZsb2F0aW5nIHBvaW50ZXIgbnVtYmVyc1xuLy8gaW4gYSBsb2NhbGUtZGVwZW5kZW50IHdheSwgdXNpbmcgYSBjb21tYSBpbnN0ZWFkIG9mIGEgZG90LlxuLy8gSWYgY29tbWEgaXMgbm90IHJlcGxhY2VkIHdpdGggYSBkb3QsIHRoZSBpbnB1dCB3aWxsIGJlIHJvdW5kZWQgZG93biAoaS5lLiBhY3Rpbmdcbi8vIGFzIGEgZmxvb3IgZnVuY3Rpb24pIGNhdXNpbmcgdW5leHBlY3RlZCBiZWhhdmlvcnNcbmZ1bmN0aW9uIHRvTXMgKHMpIHtcbiAgcmV0dXJuIE51bWJlcihzLnNsaWNlKDAsIC0xKS5yZXBsYWNlKCcsJywgJy4nKSkgKiAxMDAwXG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBlbnRlciAodm5vZGUsIHRvZ2dsZURpc3BsYXkpIHtcbiAgY29uc3QgZWwgPSB2bm9kZS5lbG07XG5cbiAgLy8gY2FsbCBsZWF2ZSBjYWxsYmFjayBub3dcbiAgaWYgKGlzRGVmKGVsLl9sZWF2ZUNiKSkge1xuICAgIGVsLl9sZWF2ZUNiLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgZWwuX2xlYXZlQ2IoKTtcbiAgfVxuXG4gIGNvbnN0IGRhdGEgPSByZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pO1xuICBpZiAoaXNVbmRlZihkYXRhKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihlbC5fZW50ZXJDYikgfHwgZWwubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGNvbnN0IHtcbiAgICBjc3MsXG4gICAgdHlwZSxcbiAgICBlbnRlckNsYXNzLFxuICAgIGVudGVyVG9DbGFzcyxcbiAgICBlbnRlckFjdGl2ZUNsYXNzLFxuICAgIGFwcGVhckNsYXNzLFxuICAgIGFwcGVhclRvQ2xhc3MsXG4gICAgYXBwZWFyQWN0aXZlQ2xhc3MsXG4gICAgYmVmb3JlRW50ZXIsXG4gICAgZW50ZXIsXG4gICAgYWZ0ZXJFbnRlcixcbiAgICBlbnRlckNhbmNlbGxlZCxcbiAgICBiZWZvcmVBcHBlYXIsXG4gICAgYXBwZWFyLFxuICAgIGFmdGVyQXBwZWFyLFxuICAgIGFwcGVhckNhbmNlbGxlZCxcbiAgICBkdXJhdGlvblxuICB9ID0gZGF0YTtcblxuICAvLyBhY3RpdmVJbnN0YW5jZSB3aWxsIGFsd2F5cyBiZSB0aGUgPHRyYW5zaXRpb24+IGNvbXBvbmVudCBtYW5hZ2luZyB0aGlzXG4gIC8vIHRyYW5zaXRpb24uIE9uZSBlZGdlIGNhc2UgdG8gY2hlY2sgaXMgd2hlbiB0aGUgPHRyYW5zaXRpb24+IGlzIHBsYWNlZFxuICAvLyBhcyB0aGUgcm9vdCBub2RlIG9mIGEgY2hpbGQgY29tcG9uZW50LiBJbiB0aGF0IGNhc2Ugd2UgbmVlZCB0byBjaGVja1xuICAvLyA8dHJhbnNpdGlvbj4ncyBwYXJlbnQgZm9yIGFwcGVhciBjaGVjay5cbiAgbGV0IGNvbnRleHQgPSBhY3RpdmVJbnN0YW5jZTtcbiAgbGV0IHRyYW5zaXRpb25Ob2RlID0gYWN0aXZlSW5zdGFuY2UuJHZub2RlO1xuICB3aGlsZSAodHJhbnNpdGlvbk5vZGUgJiYgdHJhbnNpdGlvbk5vZGUucGFyZW50KSB7XG4gICAgdHJhbnNpdGlvbk5vZGUgPSB0cmFuc2l0aW9uTm9kZS5wYXJlbnQ7XG4gICAgY29udGV4dCA9IHRyYW5zaXRpb25Ob2RlLmNvbnRleHQ7XG4gIH1cblxuICBjb25zdCBpc0FwcGVhciA9ICFjb250ZXh0Ll9pc01vdW50ZWQgfHwgIXZub2RlLmlzUm9vdEluc2VydDtcblxuICBpZiAoaXNBcHBlYXIgJiYgIWFwcGVhciAmJiBhcHBlYXIgIT09ICcnKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBjb25zdCBzdGFydENsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyQ2xhc3NcbiAgICA/IGFwcGVhckNsYXNzXG4gICAgOiBlbnRlckNsYXNzO1xuICBjb25zdCBhY3RpdmVDbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhckFjdGl2ZUNsYXNzXG4gICAgPyBhcHBlYXJBY3RpdmVDbGFzc1xuICAgIDogZW50ZXJBY3RpdmVDbGFzcztcbiAgY29uc3QgdG9DbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhclRvQ2xhc3NcbiAgICA/IGFwcGVhclRvQ2xhc3NcbiAgICA6IGVudGVyVG9DbGFzcztcblxuICBjb25zdCBiZWZvcmVFbnRlckhvb2sgPSBpc0FwcGVhclxuICAgID8gKGJlZm9yZUFwcGVhciB8fCBiZWZvcmVFbnRlcilcbiAgICA6IGJlZm9yZUVudGVyO1xuICBjb25zdCBlbnRlckhvb2sgPSBpc0FwcGVhclxuICAgID8gKHR5cGVvZiBhcHBlYXIgPT09ICdmdW5jdGlvbicgPyBhcHBlYXIgOiBlbnRlcilcbiAgICA6IGVudGVyO1xuICBjb25zdCBhZnRlckVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYWZ0ZXJBcHBlYXIgfHwgYWZ0ZXJFbnRlcilcbiAgICA6IGFmdGVyRW50ZXI7XG4gIGNvbnN0IGVudGVyQ2FuY2VsbGVkSG9vayA9IGlzQXBwZWFyXG4gICAgPyAoYXBwZWFyQ2FuY2VsbGVkIHx8IGVudGVyQ2FuY2VsbGVkKVxuICAgIDogZW50ZXJDYW5jZWxsZWQ7XG5cbiAgY29uc3QgZXhwbGljaXRFbnRlckR1cmF0aW9uID0gdG9OdW1iZXIoXG4gICAgaXNPYmplY3QoZHVyYXRpb24pXG4gICAgICA/IGR1cmF0aW9uLmVudGVyXG4gICAgICA6IGR1cmF0aW9uXG4gICk7XG5cbiAgaWYgKGV4cGxpY2l0RW50ZXJEdXJhdGlvbiAhPSBudWxsKSB7XG4gICAgY2hlY2tEdXJhdGlvbihleHBsaWNpdEVudGVyRHVyYXRpb24sICdlbnRlcicsIHZub2RlKTtcbiAgfVxuXG4gIGNvbnN0IGV4cGVjdHNDU1MgPSBjc3MgIT09IGZhbHNlICYmICFpc0lFOTtcbiAgY29uc3QgdXNlcldhbnRzQ29udHJvbCA9IGdldEhvb2tBcmd1bWVudHNMZW5ndGgoZW50ZXJIb29rKTtcblxuICBjb25zdCBjYiA9IGVsLl9lbnRlckNiID0gb25jZSgoKSA9PiB7XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgdG9DbGFzcyk7XG4gICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTtcbiAgICB9XG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICAgIH1cbiAgICAgIGVudGVyQ2FuY2VsbGVkSG9vayAmJiBlbnRlckNhbmNlbGxlZEhvb2soZWwpO1xuICAgIH0gZWxzZSB7XG4gICAgICBhZnRlckVudGVySG9vayAmJiBhZnRlckVudGVySG9vayhlbCk7XG4gICAgfVxuICAgIGVsLl9lbnRlckNiID0gbnVsbDtcbiAgfSk7XG5cbiAgaWYgKCF2bm9kZS5kYXRhLnNob3cpIHtcbiAgICAvLyByZW1vdmUgcGVuZGluZyBsZWF2ZSBlbGVtZW50IG9uIGVudGVyIGJ5IGluamVjdGluZyBhbiBpbnNlcnQgaG9va1xuICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAnaW5zZXJ0JywgKCkgPT4ge1xuICAgICAgY29uc3QgcGFyZW50ID0gZWwucGFyZW50Tm9kZTtcbiAgICAgIGNvbnN0IHBlbmRpbmdOb2RlID0gcGFyZW50ICYmIHBhcmVudC5fcGVuZGluZyAmJiBwYXJlbnQuX3BlbmRpbmdbdm5vZGUua2V5XTtcbiAgICAgIGlmIChwZW5kaW5nTm9kZSAmJlxuICAgICAgICBwZW5kaW5nTm9kZS50YWcgPT09IHZub2RlLnRhZyAmJlxuICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2JcbiAgICAgICkge1xuICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2IoKTtcbiAgICAgIH1cbiAgICAgIGVudGVySG9vayAmJiBlbnRlckhvb2soZWwsIGNiKTtcbiAgICB9KTtcbiAgfVxuXG4gIC8vIHN0YXJ0IGVudGVyIHRyYW5zaXRpb25cbiAgYmVmb3JlRW50ZXJIb29rICYmIGJlZm9yZUVudGVySG9vayhlbCk7XG4gIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTtcbiAgICBuZXh0RnJhbWUoKCkgPT4ge1xuICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7XG4gICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgdG9DbGFzcyk7XG4gICAgICAgIGlmICghdXNlcldhbnRzQ29udHJvbCkge1xuICAgICAgICAgIGlmIChpc1ZhbGlkRHVyYXRpb24oZXhwbGljaXRFbnRlckR1cmF0aW9uKSkge1xuICAgICAgICAgICAgc2V0VGltZW91dChjYiwgZXhwbGljaXRFbnRlckR1cmF0aW9uKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBjYik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBpZiAodm5vZGUuZGF0YS5zaG93KSB7XG4gICAgdG9nZ2xlRGlzcGxheSAmJiB0b2dnbGVEaXNwbGF5KCk7XG4gICAgZW50ZXJIb29rICYmIGVudGVySG9vayhlbCwgY2IpO1xuICB9XG5cbiAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgY2IoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBsZWF2ZSAodm5vZGUsIHJtKSB7XG4gIGNvbnN0IGVsID0gdm5vZGUuZWxtO1xuXG4gIC8vIGNhbGwgZW50ZXIgY2FsbGJhY2sgbm93XG4gIGlmIChpc0RlZihlbC5fZW50ZXJDYikpIHtcbiAgICBlbC5fZW50ZXJDYi5jYW5jZWxsZWQgPSB0cnVlO1xuICAgIGVsLl9lbnRlckNiKCk7XG4gIH1cblxuICBjb25zdCBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtcbiAgaWYgKGlzVW5kZWYoZGF0YSkgfHwgZWwubm9kZVR5cGUgIT09IDEpIHtcbiAgICByZXR1cm4gcm0oKVxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gIGlmIChpc0RlZihlbC5fbGVhdmVDYikpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGNvbnN0IHtcbiAgICBjc3MsXG4gICAgdHlwZSxcbiAgICBsZWF2ZUNsYXNzLFxuICAgIGxlYXZlVG9DbGFzcyxcbiAgICBsZWF2ZUFjdGl2ZUNsYXNzLFxuICAgIGJlZm9yZUxlYXZlLFxuICAgIGxlYXZlLFxuICAgIGFmdGVyTGVhdmUsXG4gICAgbGVhdmVDYW5jZWxsZWQsXG4gICAgZGVsYXlMZWF2ZSxcbiAgICBkdXJhdGlvblxuICB9ID0gZGF0YTtcblxuICBjb25zdCBleHBlY3RzQ1NTID0gY3NzICE9PSBmYWxzZSAmJiAhaXNJRTk7XG4gIGNvbnN0IHVzZXJXYW50c0NvbnRyb2wgPSBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKGxlYXZlKTtcblxuICBjb25zdCBleHBsaWNpdExlYXZlRHVyYXRpb24gPSB0b051bWJlcihcbiAgICBpc09iamVjdChkdXJhdGlvbilcbiAgICAgID8gZHVyYXRpb24ubGVhdmVcbiAgICAgIDogZHVyYXRpb25cbiAgKTtcblxuICBpZiAoaXNEZWYoZXhwbGljaXRMZWF2ZUR1cmF0aW9uKSkge1xuICAgIGNoZWNrRHVyYXRpb24oZXhwbGljaXRMZWF2ZUR1cmF0aW9uLCAnbGVhdmUnLCB2bm9kZSk7XG4gIH1cblxuICBjb25zdCBjYiA9IGVsLl9sZWF2ZUNiID0gb25jZSgoKSA9PiB7XG4gICAgaWYgKGVsLnBhcmVudE5vZGUgJiYgZWwucGFyZW50Tm9kZS5fcGVuZGluZykge1xuICAgICAgZWwucGFyZW50Tm9kZS5fcGVuZGluZ1t2bm9kZS5rZXldID0gbnVsbDtcbiAgICB9XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcbiAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG4gICAgfVxuICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVDbGFzcyk7XG4gICAgICB9XG4gICAgICBsZWF2ZUNhbmNlbGxlZCAmJiBsZWF2ZUNhbmNlbGxlZChlbCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJtKCk7XG4gICAgICBhZnRlckxlYXZlICYmIGFmdGVyTGVhdmUoZWwpO1xuICAgIH1cbiAgICBlbC5fbGVhdmVDYiA9IG51bGw7XG4gIH0pO1xuXG4gIGlmIChkZWxheUxlYXZlKSB7XG4gICAgZGVsYXlMZWF2ZShwZXJmb3JtTGVhdmUpO1xuICB9IGVsc2Uge1xuICAgIHBlcmZvcm1MZWF2ZSgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcGVyZm9ybUxlYXZlICgpIHtcbiAgICAvLyB0aGUgZGVsYXllZCBsZWF2ZSBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gY2FuY2VsbGVkXG4gICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIC8vIHJlY29yZCBsZWF2aW5nIGVsZW1lbnRcbiAgICBpZiAoIXZub2RlLmRhdGEuc2hvdyAmJiBlbC5wYXJlbnROb2RlKSB7XG4gICAgICAoZWwucGFyZW50Tm9kZS5fcGVuZGluZyB8fCAoZWwucGFyZW50Tm9kZS5fcGVuZGluZyA9IHt9KSlbKHZub2RlLmtleSldID0gdm5vZGU7XG4gICAgfVxuICAgIGJlZm9yZUxlYXZlICYmIGJlZm9yZUxlYXZlKGVsKTtcbiAgICBpZiAoZXhwZWN0c0NTUykge1xuICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVBY3RpdmVDbGFzcyk7XG4gICAgICBuZXh0RnJhbWUoKCkgPT4ge1xuICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgICBpZiAoIWNiLmNhbmNlbGxlZCkge1xuICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcbiAgICAgICAgICBpZiAoIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgICAgICAgIGlmIChpc1ZhbGlkRHVyYXRpb24oZXhwbGljaXRMZWF2ZUR1cmF0aW9uKSkge1xuICAgICAgICAgICAgICBzZXRUaW1lb3V0KGNiLCBleHBsaWNpdExlYXZlRHVyYXRpb24pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBjYik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gICAgbGVhdmUgJiYgbGVhdmUoZWwsIGNiKTtcbiAgICBpZiAoIWV4cGVjdHNDU1MgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgIGNiKCk7XG4gICAgfVxuICB9XG59XG5cbi8vIG9ubHkgdXNlZCBpbiBkZXYgbW9kZVxuZnVuY3Rpb24gY2hlY2tEdXJhdGlvbiAodmFsLCBuYW1lLCB2bm9kZSkge1xuICBpZiAodHlwZW9mIHZhbCAhPT0gJ251bWJlcicpIHtcbiAgICB3YXJuKFxuICAgICAgYDx0cmFuc2l0aW9uPiBleHBsaWNpdCAke25hbWV9IGR1cmF0aW9uIGlzIG5vdCBhIHZhbGlkIG51bWJlciAtIGAgK1xuICAgICAgYGdvdCAke0pTT04uc3RyaW5naWZ5KHZhbCl9LmAsXG4gICAgICB2bm9kZS5jb250ZXh0XG4gICAgKTtcbiAgfSBlbHNlIGlmIChpc05hTih2YWwpKSB7XG4gICAgd2FybihcbiAgICAgIGA8dHJhbnNpdGlvbj4gZXhwbGljaXQgJHtuYW1lfSBkdXJhdGlvbiBpcyBOYU4gLSBgICtcbiAgICAgICd0aGUgZHVyYXRpb24gZXhwcmVzc2lvbiBtaWdodCBiZSBpbmNvcnJlY3QuJyxcbiAgICAgIHZub2RlLmNvbnRleHRcbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGlzVmFsaWREdXJhdGlvbiAodmFsKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odmFsKVxufVxuXG4vKipcbiAqIE5vcm1hbGl6ZSBhIHRyYW5zaXRpb24gaG9vaydzIGFyZ3VtZW50IGxlbmd0aC4gVGhlIGhvb2sgbWF5IGJlOlxuICogLSBhIG1lcmdlZCBob29rIChpbnZva2VyKSB3aXRoIHRoZSBvcmlnaW5hbCBpbiAuZm5zXG4gKiAtIGEgd3JhcHBlZCBjb21wb25lbnQgbWV0aG9kIChjaGVjayAuX2xlbmd0aClcbiAqIC0gYSBwbGFpbiBmdW5jdGlvbiAoLmxlbmd0aClcbiAqL1xuZnVuY3Rpb24gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aCAoZm4pIHtcbiAgaWYgKGlzVW5kZWYoZm4pKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cbiAgY29uc3QgaW52b2tlckZucyA9IGZuLmZucztcbiAgaWYgKGlzRGVmKGludm9rZXJGbnMpKSB7XG4gICAgLy8gaW52b2tlclxuICAgIHJldHVybiBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKFxuICAgICAgQXJyYXkuaXNBcnJheShpbnZva2VyRm5zKVxuICAgICAgICA/IGludm9rZXJGbnNbMF1cbiAgICAgICAgOiBpbnZva2VyRm5zXG4gICAgKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiAoZm4uX2xlbmd0aCB8fCBmbi5sZW5ndGgpID4gMVxuICB9XG59XG5cbmZ1bmN0aW9uIF9lbnRlciAoXywgdm5vZGUpIHtcbiAgaWYgKHZub2RlLmRhdGEuc2hvdyAhPT0gdHJ1ZSkge1xuICAgIGVudGVyKHZub2RlKTtcbiAgfVxufVxuXG52YXIgdHJhbnNpdGlvbiA9IGluQnJvd3NlciA/IHtcbiAgY3JlYXRlOiBfZW50ZXIsXG4gIGFjdGl2YXRlOiBfZW50ZXIsXG4gIHJlbW92ZSAodm5vZGUsIHJtKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAodm5vZGUuZGF0YS5zaG93ICE9PSB0cnVlKSB7XG4gICAgICBsZWF2ZSh2bm9kZSwgcm0pO1xuICAgIH0gZWxzZSB7XG4gICAgICBybSgpO1xuICAgIH1cbiAgfVxufSA6IHt9O1xuXG52YXIgcGxhdGZvcm1Nb2R1bGVzID0gW1xuICBhdHRycyxcbiAga2xhc3MsXG4gIGV2ZW50cyxcbiAgZG9tUHJvcHMsXG4gIHN0eWxlLFxuICB0cmFuc2l0aW9uXG5dO1xuXG4vKiAgKi9cblxuLy8gdGhlIGRpcmVjdGl2ZSBtb2R1bGUgc2hvdWxkIGJlIGFwcGxpZWQgbGFzdCwgYWZ0ZXIgYWxsXG4vLyBidWlsdC1pbiBtb2R1bGVzIGhhdmUgYmVlbiBhcHBsaWVkLlxuY29uc3QgbW9kdWxlcyA9IHBsYXRmb3JtTW9kdWxlcy5jb25jYXQoYmFzZU1vZHVsZXMpO1xuXG5jb25zdCBwYXRjaCA9IGNyZWF0ZVBhdGNoRnVuY3Rpb24oeyBub2RlT3BzLCBtb2R1bGVzIH0pO1xuXG4vKipcbiAqIE5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBsaWtlIGF0dGFjaGluZ1xuICogcHJvcGVydGllcyB0byBFbGVtZW50cy5cbiAqL1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbmlmIChpc0lFOSkge1xuICAvLyBodHRwOi8vd3d3Lm1hdHRzNDExLmNvbS9wb3N0L2ludGVybmV0LWV4cGxvcmVyLTktb25pbnB1dC9cbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2VsZWN0aW9uY2hhbmdlJywgKCkgPT4ge1xuICAgIGNvbnN0IGVsID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgICBpZiAoZWwgJiYgZWwudm1vZGVsKSB7XG4gICAgICB0cmlnZ2VyKGVsLCAnaW5wdXQnKTtcbiAgICB9XG4gIH0pO1xufVxuXG5jb25zdCBkaXJlY3RpdmUgPSB7XG4gIGluc2VydGVkIChlbCwgYmluZGluZywgdm5vZGUsIG9sZFZub2RlKSB7XG4gICAgaWYgKHZub2RlLnRhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgIC8vICM2OTAzXG4gICAgICBpZiAob2xkVm5vZGUuZWxtICYmICFvbGRWbm9kZS5lbG0uX3ZPcHRpb25zKSB7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAncG9zdHBhdGNoJywgKCkgPT4ge1xuICAgICAgICAgIGRpcmVjdGl2ZS5jb21wb25lbnRVcGRhdGVkKGVsLCBiaW5kaW5nLCB2bm9kZSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLmNvbnRleHQpO1xuICAgICAgfVxuICAgICAgZWwuX3ZPcHRpb25zID0gW10ubWFwLmNhbGwoZWwub3B0aW9ucywgZ2V0VmFsdWUpO1xuICAgIH0gZWxzZSBpZiAodm5vZGUudGFnID09PSAndGV4dGFyZWEnIHx8IGlzVGV4dElucHV0VHlwZShlbC50eXBlKSkge1xuICAgICAgZWwuX3ZNb2RpZmllcnMgPSBiaW5kaW5nLm1vZGlmaWVycztcbiAgICAgIGlmICghYmluZGluZy5tb2RpZmllcnMubGF6eSkge1xuICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKCdjb21wb3NpdGlvbnN0YXJ0Jywgb25Db21wb3NpdGlvblN0YXJ0KTtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY29tcG9zaXRpb25lbmQnLCBvbkNvbXBvc2l0aW9uRW5kKTtcbiAgICAgICAgLy8gU2FmYXJpIDwgMTAuMiAmIFVJV2ViVmlldyBkb2Vzbid0IGZpcmUgY29tcG9zaXRpb25lbmQgd2hlblxuICAgICAgICAvLyBzd2l0Y2hpbmcgZm9jdXMgYmVmb3JlIGNvbmZpcm1pbmcgY29tcG9zaXRpb24gY2hvaWNlXG4gICAgICAgIC8vIHRoaXMgYWxzbyBmaXhlcyB0aGUgaXNzdWUgd2hlcmUgc29tZSBicm93c2VycyBlLmcuIGlPUyBDaHJvbWVcbiAgICAgICAgLy8gZmlyZXMgXCJjaGFuZ2VcIiBpbnN0ZWFkIG9mIFwiaW5wdXRcIiBvbiBhdXRvY29tcGxldGUuXG4gICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIG9uQ29tcG9zaXRpb25FbmQpO1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKGlzSUU5KSB7XG4gICAgICAgICAgZWwudm1vZGVsID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfSxcblxuICBjb21wb25lbnRVcGRhdGVkIChlbCwgYmluZGluZywgdm5vZGUpIHtcbiAgICBpZiAodm5vZGUudGFnID09PSAnc2VsZWN0Jykge1xuICAgICAgc2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZub2RlLmNvbnRleHQpO1xuICAgICAgLy8gaW4gY2FzZSB0aGUgb3B0aW9ucyByZW5kZXJlZCBieSB2LWZvciBoYXZlIGNoYW5nZWQsXG4gICAgICAvLyBpdCdzIHBvc3NpYmxlIHRoYXQgdGhlIHZhbHVlIGlzIG91dC1vZi1zeW5jIHdpdGggdGhlIHJlbmRlcmVkIG9wdGlvbnMuXG4gICAgICAvLyBkZXRlY3Qgc3VjaCBjYXNlcyBhbmQgZmlsdGVyIG91dCB2YWx1ZXMgdGhhdCBubyBsb25nZXIgaGFzIGEgbWF0Y2hpbmdcbiAgICAgIC8vIG9wdGlvbiBpbiB0aGUgRE9NLlxuICAgICAgY29uc3QgcHJldk9wdGlvbnMgPSBlbC5fdk9wdGlvbnM7XG4gICAgICBjb25zdCBjdXJPcHRpb25zID0gZWwuX3ZPcHRpb25zID0gW10ubWFwLmNhbGwoZWwub3B0aW9ucywgZ2V0VmFsdWUpO1xuICAgICAgaWYgKGN1ck9wdGlvbnMuc29tZSgobywgaSkgPT4gIWxvb3NlRXF1YWwobywgcHJldk9wdGlvbnNbaV0pKSkge1xuICAgICAgICAvLyB0cmlnZ2VyIGNoYW5nZSBldmVudCBpZlxuICAgICAgICAvLyBubyBtYXRjaGluZyBvcHRpb24gZm91bmQgZm9yIGF0IGxlYXN0IG9uZSB2YWx1ZVxuICAgICAgICBjb25zdCBuZWVkUmVzZXQgPSBlbC5tdWx0aXBsZVxuICAgICAgICAgID8gYmluZGluZy52YWx1ZS5zb21lKHYgPT4gaGFzTm9NYXRjaGluZ09wdGlvbih2LCBjdXJPcHRpb25zKSlcbiAgICAgICAgICA6IGJpbmRpbmcudmFsdWUgIT09IGJpbmRpbmcub2xkVmFsdWUgJiYgaGFzTm9NYXRjaGluZ09wdGlvbihiaW5kaW5nLnZhbHVlLCBjdXJPcHRpb25zKTtcbiAgICAgICAgaWYgKG5lZWRSZXNldCkge1xuICAgICAgICAgIHRyaWdnZXIoZWwsICdjaGFuZ2UnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuZnVuY3Rpb24gc2V0U2VsZWN0ZWQgKGVsLCBiaW5kaW5nLCB2bSkge1xuICBhY3R1YWxseVNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bSk7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoaXNJRSB8fCBpc0VkZ2UpIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIGFjdHVhbGx5U2V0U2VsZWN0ZWQoZWwsIGJpbmRpbmcsIHZtKTtcbiAgICB9LCAwKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBhY3R1YWxseVNldFNlbGVjdGVkIChlbCwgYmluZGluZywgdm0pIHtcbiAgY29uc3QgdmFsdWUgPSBiaW5kaW5nLnZhbHVlO1xuICBjb25zdCBpc011bHRpcGxlID0gZWwubXVsdGlwbGU7XG4gIGlmIChpc011bHRpcGxlICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgIHdhcm4oXG4gICAgICBgPHNlbGVjdCBtdWx0aXBsZSB2LW1vZGVsPVwiJHtiaW5kaW5nLmV4cHJlc3Npb259XCI+IGAgK1xuICAgICAgYGV4cGVjdHMgYW4gQXJyYXkgdmFsdWUgZm9yIGl0cyBiaW5kaW5nLCBidXQgZ290ICR7XG4gICAgICAgIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpXG4gICAgICB9YCxcbiAgICAgIHZtXG4gICAgKTtcbiAgICByZXR1cm5cbiAgfVxuICBsZXQgc2VsZWN0ZWQsIG9wdGlvbjtcbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBlbC5vcHRpb25zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIG9wdGlvbiA9IGVsLm9wdGlvbnNbaV07XG4gICAgaWYgKGlzTXVsdGlwbGUpIHtcbiAgICAgIHNlbGVjdGVkID0gbG9vc2VJbmRleE9mKHZhbHVlLCBnZXRWYWx1ZShvcHRpb24pKSA+IC0xO1xuICAgICAgaWYgKG9wdGlvbi5zZWxlY3RlZCAhPT0gc2VsZWN0ZWQpIHtcbiAgICAgICAgb3B0aW9uLnNlbGVjdGVkID0gc2VsZWN0ZWQ7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChsb29zZUVxdWFsKGdldFZhbHVlKG9wdGlvbiksIHZhbHVlKSkge1xuICAgICAgICBpZiAoZWwuc2VsZWN0ZWRJbmRleCAhPT0gaSkge1xuICAgICAgICAgIGVsLnNlbGVjdGVkSW5kZXggPSBpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cbiAgfVxuICBpZiAoIWlzTXVsdGlwbGUpIHtcbiAgICBlbC5zZWxlY3RlZEluZGV4ID0gLTE7XG4gIH1cbn1cblxuZnVuY3Rpb24gaGFzTm9NYXRjaGluZ09wdGlvbiAodmFsdWUsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMuZXZlcnkobyA9PiAhbG9vc2VFcXVhbChvLCB2YWx1ZSkpXG59XG5cbmZ1bmN0aW9uIGdldFZhbHVlIChvcHRpb24pIHtcbiAgcmV0dXJuICdfdmFsdWUnIGluIG9wdGlvblxuICAgID8gb3B0aW9uLl92YWx1ZVxuICAgIDogb3B0aW9uLnZhbHVlXG59XG5cbmZ1bmN0aW9uIG9uQ29tcG9zaXRpb25TdGFydCAoZSkge1xuICBlLnRhcmdldC5jb21wb3NpbmcgPSB0cnVlO1xufVxuXG5mdW5jdGlvbiBvbkNvbXBvc2l0aW9uRW5kIChlKSB7XG4gIC8vIHByZXZlbnQgdHJpZ2dlcmluZyBhbiBpbnB1dCBldmVudCBmb3Igbm8gcmVhc29uXG4gIGlmICghZS50YXJnZXQuY29tcG9zaW5nKSByZXR1cm5cbiAgZS50YXJnZXQuY29tcG9zaW5nID0gZmFsc2U7XG4gIHRyaWdnZXIoZS50YXJnZXQsICdpbnB1dCcpO1xufVxuXG5mdW5jdGlvbiB0cmlnZ2VyIChlbCwgdHlwZSkge1xuICBjb25zdCBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0hUTUxFdmVudHMnKTtcbiAgZS5pbml0RXZlbnQodHlwZSwgdHJ1ZSwgdHJ1ZSk7XG4gIGVsLmRpc3BhdGNoRXZlbnQoZSk7XG59XG5cbi8qICAqL1xuXG4vLyByZWN1cnNpdmVseSBzZWFyY2ggZm9yIHBvc3NpYmxlIHRyYW5zaXRpb24gZGVmaW5lZCBpbnNpZGUgdGhlIGNvbXBvbmVudCByb290XG5mdW5jdGlvbiBsb2NhdGVOb2RlICh2bm9kZSkge1xuICByZXR1cm4gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgJiYgKCF2bm9kZS5kYXRhIHx8ICF2bm9kZS5kYXRhLnRyYW5zaXRpb24pXG4gICAgPyBsb2NhdGVOb2RlKHZub2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZSlcbiAgICA6IHZub2RlXG59XG5cbnZhciBzaG93ID0ge1xuICBiaW5kIChlbCwgeyB2YWx1ZSB9LCB2bm9kZSkge1xuICAgIHZub2RlID0gbG9jYXRlTm9kZSh2bm9kZSk7XG4gICAgY29uc3QgdHJhbnNpdGlvbiQkMSA9IHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS50cmFuc2l0aW9uO1xuICAgIGNvbnN0IG9yaWdpbmFsRGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheSA9XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScgPyAnJyA6IGVsLnN0eWxlLmRpc3BsYXk7XG4gICAgaWYgKHZhbHVlICYmIHRyYW5zaXRpb24kJDEpIHtcbiAgICAgIHZub2RlLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgICBlbnRlcih2bm9kZSwgKCkgPT4ge1xuICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gb3JpZ2luYWxEaXNwbGF5O1xuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IG9yaWdpbmFsRGlzcGxheSA6ICdub25lJztcbiAgICB9XG4gIH0sXG5cbiAgdXBkYXRlIChlbCwgeyB2YWx1ZSwgb2xkVmFsdWUgfSwgdm5vZGUpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIXZhbHVlID09PSAhb2xkVmFsdWUpIHJldHVyblxuICAgIHZub2RlID0gbG9jYXRlTm9kZSh2bm9kZSk7XG4gICAgY29uc3QgdHJhbnNpdGlvbiQkMSA9IHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS50cmFuc2l0aW9uO1xuICAgIGlmICh0cmFuc2l0aW9uJCQxKSB7XG4gICAgICB2bm9kZS5kYXRhLnNob3cgPSB0cnVlO1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIGVudGVyKHZub2RlLCAoKSA9PiB7XG4gICAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheTtcbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBsZWF2ZSh2bm9kZSwgKCkgPT4ge1xuICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBlbC5zdHlsZS5kaXNwbGF5ID0gdmFsdWUgPyBlbC5fX3ZPcmlnaW5hbERpc3BsYXkgOiAnbm9uZSc7XG4gICAgfVxuICB9LFxuXG4gIHVuYmluZCAoXG4gICAgZWwsXG4gICAgYmluZGluZyxcbiAgICB2bm9kZSxcbiAgICBvbGRWbm9kZSxcbiAgICBpc0Rlc3Ryb3lcbiAgKSB7XG4gICAgaWYgKCFpc0Rlc3Ryb3kpIHtcbiAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXk7XG4gICAgfVxuICB9XG59O1xuXG52YXIgcGxhdGZvcm1EaXJlY3RpdmVzID0ge1xuICBtb2RlbDogZGlyZWN0aXZlLFxuICBzaG93XG59O1xuXG4vKiAgKi9cblxuY29uc3QgdHJhbnNpdGlvblByb3BzID0ge1xuICBuYW1lOiBTdHJpbmcsXG4gIGFwcGVhcjogQm9vbGVhbixcbiAgY3NzOiBCb29sZWFuLFxuICBtb2RlOiBTdHJpbmcsXG4gIHR5cGU6IFN0cmluZyxcbiAgZW50ZXJDbGFzczogU3RyaW5nLFxuICBsZWF2ZUNsYXNzOiBTdHJpbmcsXG4gIGVudGVyVG9DbGFzczogU3RyaW5nLFxuICBsZWF2ZVRvQ2xhc3M6IFN0cmluZyxcbiAgZW50ZXJBY3RpdmVDbGFzczogU3RyaW5nLFxuICBsZWF2ZUFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhckNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gIGFwcGVhclRvQ2xhc3M6IFN0cmluZyxcbiAgZHVyYXRpb246IFtOdW1iZXIsIFN0cmluZywgT2JqZWN0XVxufTtcblxuLy8gaW4gY2FzZSB0aGUgY2hpbGQgaXMgYWxzbyBhbiBhYnN0cmFjdCBjb21wb25lbnQsIGUuZy4gPGtlZXAtYWxpdmU+XG4vLyB3ZSB3YW50IHRvIHJlY3Vyc2l2ZWx5IHJldHJpZXZlIHRoZSByZWFsIGNvbXBvbmVudCB0byBiZSByZW5kZXJlZFxuZnVuY3Rpb24gZ2V0UmVhbENoaWxkICh2bm9kZSkge1xuICBjb25zdCBjb21wT3B0aW9ucyA9IHZub2RlICYmIHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gIGlmIChjb21wT3B0aW9ucyAmJiBjb21wT3B0aW9ucy5DdG9yLm9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICByZXR1cm4gZ2V0UmVhbENoaWxkKGdldEZpcnN0Q29tcG9uZW50Q2hpbGQoY29tcE9wdGlvbnMuY2hpbGRyZW4pKVxuICB9IGVsc2Uge1xuICAgIHJldHVybiB2bm9kZVxuICB9XG59XG5cbmZ1bmN0aW9uIGV4dHJhY3RUcmFuc2l0aW9uRGF0YSAoY29tcCkge1xuICBjb25zdCBkYXRhID0ge307XG4gIGNvbnN0IG9wdGlvbnMgPSBjb21wLiRvcHRpb25zO1xuICAvLyBwcm9wc1xuICBmb3IgKGNvbnN0IGtleSBpbiBvcHRpb25zLnByb3BzRGF0YSkge1xuICAgIGRhdGFba2V5XSA9IGNvbXBba2V5XTtcbiAgfVxuICAvLyBldmVudHMuXG4gIC8vIGV4dHJhY3QgbGlzdGVuZXJzIGFuZCBwYXNzIHRoZW0gZGlyZWN0bHkgdG8gdGhlIHRyYW5zaXRpb24gbWV0aG9kc1xuICBjb25zdCBsaXN0ZW5lcnMgPSBvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gIGZvciAoY29uc3Qga2V5IGluIGxpc3RlbmVycykge1xuICAgIGRhdGFbY2FtZWxpemUoa2V5KV0gPSBsaXN0ZW5lcnNba2V5XTtcbiAgfVxuICByZXR1cm4gZGF0YVxufVxuXG5mdW5jdGlvbiBwbGFjZWhvbGRlciAoaCwgcmF3Q2hpbGQpIHtcbiAgaWYgKC9cXGQta2VlcC1hbGl2ZSQvLnRlc3QocmF3Q2hpbGQudGFnKSkge1xuICAgIHJldHVybiBoKCdrZWVwLWFsaXZlJywge1xuICAgICAgcHJvcHM6IHJhd0NoaWxkLmNvbXBvbmVudE9wdGlvbnMucHJvcHNEYXRhXG4gICAgfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBoYXNQYXJlbnRUcmFuc2l0aW9uICh2bm9kZSkge1xuICB3aGlsZSAoKHZub2RlID0gdm5vZGUucGFyZW50KSkge1xuICAgIGlmICh2bm9kZS5kYXRhLnRyYW5zaXRpb24pIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGlzU2FtZUNoaWxkIChjaGlsZCwgb2xkQ2hpbGQpIHtcbiAgcmV0dXJuIG9sZENoaWxkLmtleSA9PT0gY2hpbGQua2V5ICYmIG9sZENoaWxkLnRhZyA9PT0gY2hpbGQudGFnXG59XG5cbmNvbnN0IGlzTm90VGV4dE5vZGUgPSAoYykgPT4gYy50YWcgfHwgaXNBc3luY1BsYWNlaG9sZGVyKGMpO1xuXG5jb25zdCBpc1ZTaG93RGlyZWN0aXZlID0gZCA9PiBkLm5hbWUgPT09ICdzaG93JztcblxudmFyIFRyYW5zaXRpb24gPSB7XG4gIG5hbWU6ICd0cmFuc2l0aW9uJyxcbiAgcHJvcHM6IHRyYW5zaXRpb25Qcm9wcyxcbiAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgcmVuZGVyIChoKSB7XG4gICAgbGV0IGNoaWxkcmVuID0gdGhpcy4kc2xvdHMuZGVmYXVsdDtcbiAgICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyBmaWx0ZXIgb3V0IHRleHQgbm9kZXMgKHBvc3NpYmxlIHdoaXRlc3BhY2VzKVxuICAgIGNoaWxkcmVuID0gY2hpbGRyZW4uZmlsdGVyKGlzTm90VGV4dE5vZGUpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICghY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvLyB3YXJuIG11bHRpcGxlIGVsZW1lbnRzXG4gICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA+IDEpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICc8dHJhbnNpdGlvbj4gY2FuIG9ubHkgYmUgdXNlZCBvbiBhIHNpbmdsZSBlbGVtZW50LiBVc2UgJyArXG4gICAgICAgICc8dHJhbnNpdGlvbi1ncm91cD4gZm9yIGxpc3RzLicsXG4gICAgICAgIHRoaXMuJHBhcmVudFxuICAgICAgKTtcbiAgICB9XG5cbiAgICBjb25zdCBtb2RlID0gdGhpcy5tb2RlO1xuXG4gICAgLy8gd2FybiBpbnZhbGlkIG1vZGVcbiAgICBpZiAobW9kZSAmJiBtb2RlICE9PSAnaW4tb3V0JyAmJiBtb2RlICE9PSAnb3V0LWluJ1xuICAgICkge1xuICAgICAgd2FybihcbiAgICAgICAgJ2ludmFsaWQgPHRyYW5zaXRpb24+IG1vZGU6ICcgKyBtb2RlLFxuICAgICAgICB0aGlzLiRwYXJlbnRcbiAgICAgICk7XG4gICAgfVxuXG4gICAgY29uc3QgcmF3Q2hpbGQgPSBjaGlsZHJlblswXTtcblxuICAgIC8vIGlmIHRoaXMgaXMgYSBjb21wb25lbnQgcm9vdCBub2RlIGFuZCB0aGUgY29tcG9uZW50J3NcbiAgICAvLyBwYXJlbnQgY29udGFpbmVyIG5vZGUgYWxzbyBoYXMgdHJhbnNpdGlvbiwgc2tpcC5cbiAgICBpZiAoaGFzUGFyZW50VHJhbnNpdGlvbih0aGlzLiR2bm9kZSkpIHtcbiAgICAgIHJldHVybiByYXdDaGlsZFxuICAgIH1cblxuICAgIC8vIGFwcGx5IHRyYW5zaXRpb24gZGF0YSB0byBjaGlsZFxuICAgIC8vIHVzZSBnZXRSZWFsQ2hpbGQoKSB0byBpZ25vcmUgYWJzdHJhY3QgY29tcG9uZW50cyBlLmcuIGtlZXAtYWxpdmVcbiAgICBjb25zdCBjaGlsZCA9IGdldFJlYWxDaGlsZChyYXdDaGlsZCk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFjaGlsZCkge1xuICAgICAgcmV0dXJuIHJhd0NoaWxkXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuX2xlYXZpbmcpIHtcbiAgICAgIHJldHVybiBwbGFjZWhvbGRlcihoLCByYXdDaGlsZClcbiAgICB9XG5cbiAgICAvLyBlbnN1cmUgYSBrZXkgdGhhdCBpcyB1bmlxdWUgdG8gdGhlIHZub2RlIHR5cGUgYW5kIHRvIHRoaXMgdHJhbnNpdGlvblxuICAgIC8vIGNvbXBvbmVudCBpbnN0YW5jZS4gVGhpcyBrZXkgd2lsbCBiZSB1c2VkIHRvIHJlbW92ZSBwZW5kaW5nIGxlYXZpbmcgbm9kZXNcbiAgICAvLyBkdXJpbmcgZW50ZXJpbmcuXG4gICAgY29uc3QgaWQgPSBgX190cmFuc2l0aW9uLSR7dGhpcy5fdWlkfS1gO1xuICAgIGNoaWxkLmtleSA9IGNoaWxkLmtleSA9PSBudWxsXG4gICAgICA/IGNoaWxkLmlzQ29tbWVudFxuICAgICAgICA/IGlkICsgJ2NvbW1lbnQnXG4gICAgICAgIDogaWQgKyBjaGlsZC50YWdcbiAgICAgIDogaXNQcmltaXRpdmUoY2hpbGQua2V5KVxuICAgICAgICA/IChTdHJpbmcoY2hpbGQua2V5KS5pbmRleE9mKGlkKSA9PT0gMCA/IGNoaWxkLmtleSA6IGlkICsgY2hpbGQua2V5KVxuICAgICAgICA6IGNoaWxkLmtleTtcblxuICAgIGNvbnN0IGRhdGEgPSAoY2hpbGQuZGF0YSB8fCAoY2hpbGQuZGF0YSA9IHt9KSkudHJhbnNpdGlvbiA9IGV4dHJhY3RUcmFuc2l0aW9uRGF0YSh0aGlzKTtcbiAgICBjb25zdCBvbGRSYXdDaGlsZCA9IHRoaXMuX3Zub2RlO1xuICAgIGNvbnN0IG9sZENoaWxkID0gZ2V0UmVhbENoaWxkKG9sZFJhd0NoaWxkKTtcblxuICAgIC8vIG1hcmsgdi1zaG93XG4gICAgLy8gc28gdGhhdCB0aGUgdHJhbnNpdGlvbiBtb2R1bGUgY2FuIGhhbmQgb3ZlciB0aGUgY29udHJvbCB0byB0aGUgZGlyZWN0aXZlXG4gICAgaWYgKGNoaWxkLmRhdGEuZGlyZWN0aXZlcyAmJiBjaGlsZC5kYXRhLmRpcmVjdGl2ZXMuc29tZShpc1ZTaG93RGlyZWN0aXZlKSkge1xuICAgICAgY2hpbGQuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICBvbGRDaGlsZCAmJlxuICAgICAgb2xkQ2hpbGQuZGF0YSAmJlxuICAgICAgIWlzU2FtZUNoaWxkKGNoaWxkLCBvbGRDaGlsZCkgJiZcbiAgICAgICFpc0FzeW5jUGxhY2Vob2xkZXIob2xkQ2hpbGQpICYmXG4gICAgICAvLyAjNjY4NyBjb21wb25lbnQgcm9vdCBpcyBhIGNvbW1lbnQgbm9kZVxuICAgICAgIShvbGRDaGlsZC5jb21wb25lbnRJbnN0YW5jZSAmJiBvbGRDaGlsZC5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUuaXNDb21tZW50KVxuICAgICkge1xuICAgICAgLy8gcmVwbGFjZSBvbGQgY2hpbGQgdHJhbnNpdGlvbiBkYXRhIHdpdGggZnJlc2ggb25lXG4gICAgICAvLyBpbXBvcnRhbnQgZm9yIGR5bmFtaWMgdHJhbnNpdGlvbnMhXG4gICAgICBjb25zdCBvbGREYXRhID0gb2xkQ2hpbGQuZGF0YS50cmFuc2l0aW9uID0gZXh0ZW5kKHt9LCBkYXRhKTtcbiAgICAgIC8vIGhhbmRsZSB0cmFuc2l0aW9uIG1vZGVcbiAgICAgIGlmIChtb2RlID09PSAnb3V0LWluJykge1xuICAgICAgICAvLyByZXR1cm4gcGxhY2Vob2xkZXIgbm9kZSBhbmQgcXVldWUgdXBkYXRlIHdoZW4gbGVhdmUgZmluaXNoZXNcbiAgICAgICAgdGhpcy5fbGVhdmluZyA9IHRydWU7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdhZnRlckxlYXZlJywgKCkgPT4ge1xuICAgICAgICAgIHRoaXMuX2xlYXZpbmcgPSBmYWxzZTtcbiAgICAgICAgICB0aGlzLiRmb3JjZVVwZGF0ZSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKVxuICAgICAgfSBlbHNlIGlmIChtb2RlID09PSAnaW4tb3V0Jykge1xuICAgICAgICBpZiAoaXNBc3luY1BsYWNlaG9sZGVyKGNoaWxkKSkge1xuICAgICAgICAgIHJldHVybiBvbGRSYXdDaGlsZFxuICAgICAgICB9XG4gICAgICAgIGxldCBkZWxheWVkTGVhdmU7XG4gICAgICAgIGNvbnN0IHBlcmZvcm1MZWF2ZSA9ICgpID0+IHsgZGVsYXllZExlYXZlKCk7IH07XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKGRhdGEsICdhZnRlckVudGVyJywgcGVyZm9ybUxlYXZlKTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2soZGF0YSwgJ2VudGVyQ2FuY2VsbGVkJywgcGVyZm9ybUxlYXZlKTtcbiAgICAgICAgbWVyZ2VWTm9kZUhvb2sob2xkRGF0YSwgJ2RlbGF5TGVhdmUnLCBsZWF2ZSA9PiB7IGRlbGF5ZWRMZWF2ZSA9IGxlYXZlOyB9KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmF3Q2hpbGRcbiAgfVxufTtcblxuLyogICovXG5cbmNvbnN0IHByb3BzID0gZXh0ZW5kKHtcbiAgdGFnOiBTdHJpbmcsXG4gIG1vdmVDbGFzczogU3RyaW5nXG59LCB0cmFuc2l0aW9uUHJvcHMpO1xuXG5kZWxldGUgcHJvcHMubW9kZTtcblxudmFyIFRyYW5zaXRpb25Hcm91cCA9IHtcbiAgcHJvcHMsXG5cbiAgYmVmb3JlTW91bnQgKCkge1xuICAgIGNvbnN0IHVwZGF0ZSA9IHRoaXMuX3VwZGF0ZTtcbiAgICB0aGlzLl91cGRhdGUgPSAodm5vZGUsIGh5ZHJhdGluZykgPT4ge1xuICAgICAgY29uc3QgcmVzdG9yZUFjdGl2ZUluc3RhbmNlID0gc2V0QWN0aXZlSW5zdGFuY2UodGhpcyk7XG4gICAgICAvLyBmb3JjZSByZW1vdmluZyBwYXNzXG4gICAgICB0aGlzLl9fcGF0Y2hfXyhcbiAgICAgICAgdGhpcy5fdm5vZGUsXG4gICAgICAgIHRoaXMua2VwdCxcbiAgICAgICAgZmFsc2UsIC8vIGh5ZHJhdGluZ1xuICAgICAgICB0cnVlIC8vIHJlbW92ZU9ubHkgKCFpbXBvcnRhbnQsIGF2b2lkcyB1bm5lY2Vzc2FyeSBtb3ZlcylcbiAgICAgICk7XG4gICAgICB0aGlzLl92bm9kZSA9IHRoaXMua2VwdDtcbiAgICAgIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSgpO1xuICAgICAgdXBkYXRlLmNhbGwodGhpcywgdm5vZGUsIGh5ZHJhdGluZyk7XG4gICAgfTtcbiAgfSxcblxuICByZW5kZXIgKGgpIHtcbiAgICBjb25zdCB0YWcgPSB0aGlzLnRhZyB8fCB0aGlzLiR2bm9kZS5kYXRhLnRhZyB8fCAnc3Bhbic7XG4gICAgY29uc3QgbWFwID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBjb25zdCBwcmV2Q2hpbGRyZW4gPSB0aGlzLnByZXZDaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW47XG4gICAgY29uc3QgcmF3Q2hpbGRyZW4gPSB0aGlzLiRzbG90cy5kZWZhdWx0IHx8IFtdO1xuICAgIGNvbnN0IGNoaWxkcmVuID0gdGhpcy5jaGlsZHJlbiA9IFtdO1xuICAgIGNvbnN0IHRyYW5zaXRpb25EYXRhID0gZXh0cmFjdFRyYW5zaXRpb25EYXRhKHRoaXMpO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByYXdDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgYyA9IHJhd0NoaWxkcmVuW2ldO1xuICAgICAgaWYgKGMudGFnKSB7XG4gICAgICAgIGlmIChjLmtleSAhPSBudWxsICYmIFN0cmluZyhjLmtleSkuaW5kZXhPZignX192bGlzdCcpICE9PSAwKSB7XG4gICAgICAgICAgY2hpbGRyZW4ucHVzaChjKTtcbiAgICAgICAgICBtYXBbYy5rZXldID0gY1xuICAgICAgICAgIDsoYy5kYXRhIHx8IChjLmRhdGEgPSB7fSkpLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRGF0YTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zdCBvcHRzID0gYy5jb21wb25lbnRPcHRpb25zO1xuICAgICAgICAgIGNvbnN0IG5hbWUgPSBvcHRzID8gKG9wdHMuQ3Rvci5vcHRpb25zLm5hbWUgfHwgb3B0cy50YWcgfHwgJycpIDogYy50YWc7XG4gICAgICAgICAgd2FybihgPHRyYW5zaXRpb24tZ3JvdXA+IGNoaWxkcmVuIG11c3QgYmUga2V5ZWQ6IDwke25hbWV9PmApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHByZXZDaGlsZHJlbikge1xuICAgICAgY29uc3Qga2VwdCA9IFtdO1xuICAgICAgY29uc3QgcmVtb3ZlZCA9IFtdO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcmV2Q2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgYyA9IHByZXZDaGlsZHJlbltpXTtcbiAgICAgICAgYy5kYXRhLnRyYW5zaXRpb24gPSB0cmFuc2l0aW9uRGF0YTtcbiAgICAgICAgYy5kYXRhLnBvcyA9IGMuZWxtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBpZiAobWFwW2Mua2V5XSkge1xuICAgICAgICAgIGtlcHQucHVzaChjKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZW1vdmVkLnB1c2goYyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHRoaXMua2VwdCA9IGgodGFnLCBudWxsLCBrZXB0KTtcbiAgICAgIHRoaXMucmVtb3ZlZCA9IHJlbW92ZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIGgodGFnLCBudWxsLCBjaGlsZHJlbilcbiAgfSxcblxuICB1cGRhdGVkICgpIHtcbiAgICBjb25zdCBjaGlsZHJlbiA9IHRoaXMucHJldkNoaWxkcmVuO1xuICAgIGNvbnN0IG1vdmVDbGFzcyA9IHRoaXMubW92ZUNsYXNzIHx8ICgodGhpcy5uYW1lIHx8ICd2JykgKyAnLW1vdmUnKTtcbiAgICBpZiAoIWNoaWxkcmVuLmxlbmd0aCB8fCAhdGhpcy5oYXNNb3ZlKGNoaWxkcmVuWzBdLmVsbSwgbW92ZUNsYXNzKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gd2UgZGl2aWRlIHRoZSB3b3JrIGludG8gdGhyZWUgbG9vcHMgdG8gYXZvaWQgbWl4aW5nIERPTSByZWFkcyBhbmQgd3JpdGVzXG4gICAgLy8gaW4gZWFjaCBpdGVyYXRpb24gLSB3aGljaCBoZWxwcyBwcmV2ZW50IGxheW91dCB0aHJhc2hpbmcuXG4gICAgY2hpbGRyZW4uZm9yRWFjaChjYWxsUGVuZGluZ0Nicyk7XG4gICAgY2hpbGRyZW4uZm9yRWFjaChyZWNvcmRQb3NpdGlvbik7XG4gICAgY2hpbGRyZW4uZm9yRWFjaChhcHBseVRyYW5zbGF0aW9uKTtcblxuICAgIC8vIGZvcmNlIHJlZmxvdyB0byBwdXQgZXZlcnl0aGluZyBpbiBwb3NpdGlvblxuICAgIC8vIGFzc2lnbiB0byB0aGlzIHRvIGF2b2lkIGJlaW5nIHJlbW92ZWQgaW4gdHJlZS1zaGFraW5nXG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgdGhpcy5fcmVmbG93ID0gZG9jdW1lbnQuYm9keS5vZmZzZXRIZWlnaHQ7XG5cbiAgICBjaGlsZHJlbi5mb3JFYWNoKChjKSA9PiB7XG4gICAgICBpZiAoYy5kYXRhLm1vdmVkKSB7XG4gICAgICAgIGNvbnN0IGVsID0gYy5lbG07XG4gICAgICAgIGNvbnN0IHMgPSBlbC5zdHlsZTtcbiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBtb3ZlQ2xhc3MpO1xuICAgICAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnJztcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcih0cmFuc2l0aW9uRW5kRXZlbnQsIGVsLl9tb3ZlQ2IgPSBmdW5jdGlvbiBjYiAoZSkge1xuICAgICAgICAgIGlmIChlICYmIGUudGFyZ2V0ICE9PSBlbCkge1xuICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICghZSB8fCAvdHJhbnNmb3JtJC8udGVzdChlLnByb3BlcnR5TmFtZSkpIHtcbiAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZEV2ZW50LCBjYik7XG4gICAgICAgICAgICBlbC5fbW92ZUNiID0gbnVsbDtcbiAgICAgICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuXG4gIG1ldGhvZHM6IHtcbiAgICBoYXNNb3ZlIChlbCwgbW92ZUNsYXNzKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICghaGFzVHJhbnNpdGlvbikge1xuICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgIH1cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKHRoaXMuX2hhc01vdmUpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2hhc01vdmVcbiAgICAgIH1cbiAgICAgIC8vIERldGVjdCB3aGV0aGVyIGFuIGVsZW1lbnQgd2l0aCB0aGUgbW92ZSBjbGFzcyBhcHBsaWVkIGhhc1xuICAgICAgLy8gQ1NTIHRyYW5zaXRpb25zLiBTaW5jZSB0aGUgZWxlbWVudCBtYXkgYmUgaW5zaWRlIGFuIGVudGVyaW5nXG4gICAgICAvLyB0cmFuc2l0aW9uIGF0IHRoaXMgdmVyeSBtb21lbnQsIHdlIG1ha2UgYSBjbG9uZSBvZiBpdCBhbmQgcmVtb3ZlXG4gICAgICAvLyBhbGwgb3RoZXIgdHJhbnNpdGlvbiBjbGFzc2VzIGFwcGxpZWQgdG8gZW5zdXJlIG9ubHkgdGhlIG1vdmUgY2xhc3NcbiAgICAgIC8vIGlzIGFwcGxpZWQuXG4gICAgICBjb25zdCBjbG9uZSA9IGVsLmNsb25lTm9kZSgpO1xuICAgICAgaWYgKGVsLl90cmFuc2l0aW9uQ2xhc3Nlcykge1xuICAgICAgICBlbC5fdHJhbnNpdGlvbkNsYXNzZXMuZm9yRWFjaCgoY2xzKSA9PiB7IHJlbW92ZUNsYXNzKGNsb25lLCBjbHMpOyB9KTtcbiAgICAgIH1cbiAgICAgIGFkZENsYXNzKGNsb25lLCBtb3ZlQ2xhc3MpO1xuICAgICAgY2xvbmUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgIHRoaXMuJGVsLmFwcGVuZENoaWxkKGNsb25lKTtcbiAgICAgIGNvbnN0IGluZm8gPSBnZXRUcmFuc2l0aW9uSW5mbyhjbG9uZSk7XG4gICAgICB0aGlzLiRlbC5yZW1vdmVDaGlsZChjbG9uZSk7XG4gICAgICByZXR1cm4gKHRoaXMuX2hhc01vdmUgPSBpbmZvLmhhc1RyYW5zZm9ybSlcbiAgICB9XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGNhbGxQZW5kaW5nQ2JzIChjKSB7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoYy5lbG0uX21vdmVDYikge1xuICAgIGMuZWxtLl9tb3ZlQ2IoKTtcbiAgfVxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGMuZWxtLl9lbnRlckNiKSB7XG4gICAgYy5lbG0uX2VudGVyQ2IoKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZWNvcmRQb3NpdGlvbiAoYykge1xuICBjLmRhdGEubmV3UG9zID0gYy5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG59XG5cbmZ1bmN0aW9uIGFwcGx5VHJhbnNsYXRpb24gKGMpIHtcbiAgY29uc3Qgb2xkUG9zID0gYy5kYXRhLnBvcztcbiAgY29uc3QgbmV3UG9zID0gYy5kYXRhLm5ld1BvcztcbiAgY29uc3QgZHggPSBvbGRQb3MubGVmdCAtIG5ld1Bvcy5sZWZ0O1xuICBjb25zdCBkeSA9IG9sZFBvcy50b3AgLSBuZXdQb3MudG9wO1xuICBpZiAoZHggfHwgZHkpIHtcbiAgICBjLmRhdGEubW92ZWQgPSB0cnVlO1xuICAgIGNvbnN0IHMgPSBjLmVsbS5zdHlsZTtcbiAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gYHRyYW5zbGF0ZSgke2R4fXB4LCR7ZHl9cHgpYDtcbiAgICBzLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcwcyc7XG4gIH1cbn1cblxudmFyIHBsYXRmb3JtQ29tcG9uZW50cyA9IHtcbiAgVHJhbnNpdGlvbixcbiAgVHJhbnNpdGlvbkdyb3VwXG59O1xuXG4vKiAgKi9cblxuLy8gaW5zdGFsbCBwbGF0Zm9ybSBzcGVjaWZpYyB1dGlsc1xuVnVlLmNvbmZpZy5tdXN0VXNlUHJvcCA9IG11c3RVc2VQcm9wO1xuVnVlLmNvbmZpZy5pc1Jlc2VydmVkVGFnID0gaXNSZXNlcnZlZFRhZztcblZ1ZS5jb25maWcuaXNSZXNlcnZlZEF0dHIgPSBpc1Jlc2VydmVkQXR0cjtcblZ1ZS5jb25maWcuZ2V0VGFnTmFtZXNwYWNlID0gZ2V0VGFnTmFtZXNwYWNlO1xuVnVlLmNvbmZpZy5pc1Vua25vd25FbGVtZW50ID0gaXNVbmtub3duRWxlbWVudDtcblxuLy8gaW5zdGFsbCBwbGF0Zm9ybSBydW50aW1lIGRpcmVjdGl2ZXMgJiBjb21wb25lbnRzXG5leHRlbmQoVnVlLm9wdGlvbnMuZGlyZWN0aXZlcywgcGxhdGZvcm1EaXJlY3RpdmVzKTtcbmV4dGVuZChWdWUub3B0aW9ucy5jb21wb25lbnRzLCBwbGF0Zm9ybUNvbXBvbmVudHMpO1xuXG4vLyBpbnN0YWxsIHBsYXRmb3JtIHBhdGNoIGZ1bmN0aW9uXG5WdWUucHJvdG90eXBlLl9fcGF0Y2hfXyA9IGluQnJvd3NlciA/IHBhdGNoIDogbm9vcDtcblxuLy8gcHVibGljIG1vdW50IG1ldGhvZFxuVnVlLnByb3RvdHlwZS4kbW91bnQgPSBmdW5jdGlvbiAoXG4gIGVsLFxuICBoeWRyYXRpbmdcbikge1xuICBlbCA9IGVsICYmIGluQnJvd3NlciA/IHF1ZXJ5KGVsKSA6IHVuZGVmaW5lZDtcbiAgcmV0dXJuIG1vdW50Q29tcG9uZW50KHRoaXMsIGVsLCBoeWRyYXRpbmcpXG59O1xuXG4vLyBkZXZ0b29scyBnbG9iYWwgaG9va1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbmlmIChpbkJyb3dzZXIpIHtcbiAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgaWYgKGNvbmZpZy5kZXZ0b29scykge1xuICAgICAgaWYgKGRldnRvb2xzKSB7XG4gICAgICAgIGRldnRvb2xzLmVtaXQoJ2luaXQnLCBWdWUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZVtjb25zb2xlLmluZm8gPyAnaW5mbycgOiAnbG9nJ10oXG4gICAgICAgICAgJ0Rvd25sb2FkIHRoZSBWdWUgRGV2dG9vbHMgZXh0ZW5zaW9uIGZvciBhIGJldHRlciBkZXZlbG9wbWVudCBleHBlcmllbmNlOlxcbicgK1xuICAgICAgICAgICdodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlLWRldnRvb2xzJ1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoY29uZmlnLnByb2R1Y3Rpb25UaXAgIT09IGZhbHNlICYmXG4gICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICApIHtcbiAgICAgIGNvbnNvbGVbY29uc29sZS5pbmZvID8gJ2luZm8nIDogJ2xvZyddKFxuICAgICAgICBgWW91IGFyZSBydW5uaW5nIFZ1ZSBpbiBkZXZlbG9wbWVudCBtb2RlLlxcbmAgK1xuICAgICAgICBgTWFrZSBzdXJlIHRvIHR1cm4gb24gcHJvZHVjdGlvbiBtb2RlIHdoZW4gZGVwbG95aW5nIGZvciBwcm9kdWN0aW9uLlxcbmAgK1xuICAgICAgICBgU2VlIG1vcmUgdGlwcyBhdCBodHRwczovL3Z1ZWpzLm9yZy9ndWlkZS9kZXBsb3ltZW50Lmh0bWxgXG4gICAgICApO1xuICAgIH1cbiAgfSwgMCk7XG59XG5cbi8qICAqL1xuXG5jb25zdCBkZWZhdWx0VGFnUkUgPSAvXFx7XFx7KCg/Oi58XFxyP1xcbikrPylcXH1cXH0vZztcbmNvbnN0IHJlZ2V4RXNjYXBlUkUgPSAvWy0uKis/XiR7fSgpfFtcXF1cXC9cXFxcXS9nO1xuXG5jb25zdCBidWlsZFJlZ2V4ID0gY2FjaGVkKGRlbGltaXRlcnMgPT4ge1xuICBjb25zdCBvcGVuID0gZGVsaW1pdGVyc1swXS5yZXBsYWNlKHJlZ2V4RXNjYXBlUkUsICdcXFxcJCYnKTtcbiAgY29uc3QgY2xvc2UgPSBkZWxpbWl0ZXJzWzFdLnJlcGxhY2UocmVnZXhFc2NhcGVSRSwgJ1xcXFwkJicpO1xuICByZXR1cm4gbmV3IFJlZ0V4cChvcGVuICsgJygoPzoufFxcXFxuKSs/KScgKyBjbG9zZSwgJ2cnKVxufSk7XG5cblxuXG5mdW5jdGlvbiBwYXJzZVRleHQgKFxuICB0ZXh0LFxuICBkZWxpbWl0ZXJzXG4pIHtcbiAgY29uc3QgdGFnUkUgPSBkZWxpbWl0ZXJzID8gYnVpbGRSZWdleChkZWxpbWl0ZXJzKSA6IGRlZmF1bHRUYWdSRTtcbiAgaWYgKCF0YWdSRS50ZXN0KHRleHQpKSB7XG4gICAgcmV0dXJuXG4gIH1cbiAgY29uc3QgdG9rZW5zID0gW107XG4gIGNvbnN0IHJhd1Rva2VucyA9IFtdO1xuICBsZXQgbGFzdEluZGV4ID0gdGFnUkUubGFzdEluZGV4ID0gMDtcbiAgbGV0IG1hdGNoLCBpbmRleCwgdG9rZW5WYWx1ZTtcbiAgd2hpbGUgKChtYXRjaCA9IHRhZ1JFLmV4ZWModGV4dCkpKSB7XG4gICAgaW5kZXggPSBtYXRjaC5pbmRleDtcbiAgICAvLyBwdXNoIHRleHQgdG9rZW5cbiAgICBpZiAoaW5kZXggPiBsYXN0SW5kZXgpIHtcbiAgICAgIHJhd1Rva2Vucy5wdXNoKHRva2VuVmFsdWUgPSB0ZXh0LnNsaWNlKGxhc3RJbmRleCwgaW5kZXgpKTtcbiAgICAgIHRva2Vucy5wdXNoKEpTT04uc3RyaW5naWZ5KHRva2VuVmFsdWUpKTtcbiAgICB9XG4gICAgLy8gdGFnIHRva2VuXG4gICAgY29uc3QgZXhwID0gcGFyc2VGaWx0ZXJzKG1hdGNoWzFdLnRyaW0oKSk7XG4gICAgdG9rZW5zLnB1c2goYF9zKCR7ZXhwfSlgKTtcbiAgICByYXdUb2tlbnMucHVzaCh7ICdAYmluZGluZyc6IGV4cCB9KTtcbiAgICBsYXN0SW5kZXggPSBpbmRleCArIG1hdGNoWzBdLmxlbmd0aDtcbiAgfVxuICBpZiAobGFzdEluZGV4IDwgdGV4dC5sZW5ndGgpIHtcbiAgICByYXdUb2tlbnMucHVzaCh0b2tlblZhbHVlID0gdGV4dC5zbGljZShsYXN0SW5kZXgpKTtcbiAgICB0b2tlbnMucHVzaChKU09OLnN0cmluZ2lmeSh0b2tlblZhbHVlKSk7XG4gIH1cbiAgcmV0dXJuIHtcbiAgICBleHByZXNzaW9uOiB0b2tlbnMuam9pbignKycpLFxuICAgIHRva2VuczogcmF3VG9rZW5zXG4gIH1cbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIHRyYW5zZm9ybU5vZGUgKGVsLCBvcHRpb25zKSB7XG4gIGNvbnN0IHdhcm4gPSBvcHRpb25zLndhcm4gfHwgYmFzZVdhcm47XG4gIGNvbnN0IHN0YXRpY0NsYXNzID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ2NsYXNzJyk7XG4gIGlmIChzdGF0aWNDbGFzcykge1xuICAgIGNvbnN0IHJlcyA9IHBhcnNlVGV4dChzdGF0aWNDbGFzcywgb3B0aW9ucy5kZWxpbWl0ZXJzKTtcbiAgICBpZiAocmVzKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBgY2xhc3M9XCIke3N0YXRpY0NsYXNzfVwiOiBgICtcbiAgICAgICAgJ0ludGVycG9sYXRpb24gaW5zaWRlIGF0dHJpYnV0ZXMgaGFzIGJlZW4gcmVtb3ZlZC4gJyArXG4gICAgICAgICdVc2Ugdi1iaW5kIG9yIHRoZSBjb2xvbiBzaG9ydGhhbmQgaW5zdGVhZC4gRm9yIGV4YW1wbGUsICcgK1xuICAgICAgICAnaW5zdGVhZCBvZiA8ZGl2IGNsYXNzPVwie3sgdmFsIH19XCI+LCB1c2UgPGRpdiA6Y2xhc3M9XCJ2YWxcIj4uJyxcbiAgICAgICAgZWwucmF3QXR0cnNNYXBbJ2NsYXNzJ11cbiAgICAgICk7XG4gICAgfVxuICB9XG4gIGlmIChzdGF0aWNDbGFzcykge1xuICAgIGVsLnN0YXRpY0NsYXNzID0gSlNPTi5zdHJpbmdpZnkoc3RhdGljQ2xhc3MpO1xuICB9XG4gIGNvbnN0IGNsYXNzQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAnY2xhc3MnLCBmYWxzZSAvKiBnZXRTdGF0aWMgKi8pO1xuICBpZiAoY2xhc3NCaW5kaW5nKSB7XG4gICAgZWwuY2xhc3NCaW5kaW5nID0gY2xhc3NCaW5kaW5nO1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlbkRhdGEgKGVsKSB7XG4gIGxldCBkYXRhID0gJyc7XG4gIGlmIChlbC5zdGF0aWNDbGFzcykge1xuICAgIGRhdGEgKz0gYHN0YXRpY0NsYXNzOiR7ZWwuc3RhdGljQ2xhc3N9LGA7XG4gIH1cbiAgaWYgKGVsLmNsYXNzQmluZGluZykge1xuICAgIGRhdGEgKz0gYGNsYXNzOiR7ZWwuY2xhc3NCaW5kaW5nfSxgO1xuICB9XG4gIHJldHVybiBkYXRhXG59XG5cbnZhciBrbGFzcyQxID0ge1xuICBzdGF0aWNLZXlzOiBbJ3N0YXRpY0NsYXNzJ10sXG4gIHRyYW5zZm9ybU5vZGUsXG4gIGdlbkRhdGFcbn07XG5cbi8qICAqL1xuXG5mdW5jdGlvbiB0cmFuc2Zvcm1Ob2RlJDEgKGVsLCBvcHRpb25zKSB7XG4gIGNvbnN0IHdhcm4gPSBvcHRpb25zLndhcm4gfHwgYmFzZVdhcm47XG4gIGNvbnN0IHN0YXRpY1N0eWxlID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3N0eWxlJyk7XG4gIGlmIChzdGF0aWNTdHlsZSkge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIHtcbiAgICAgIGNvbnN0IHJlcyA9IHBhcnNlVGV4dChzdGF0aWNTdHlsZSwgb3B0aW9ucy5kZWxpbWl0ZXJzKTtcbiAgICAgIGlmIChyZXMpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBgc3R5bGU9XCIke3N0YXRpY1N0eWxlfVwiOiBgICtcbiAgICAgICAgICAnSW50ZXJwb2xhdGlvbiBpbnNpZGUgYXR0cmlidXRlcyBoYXMgYmVlbiByZW1vdmVkLiAnICtcbiAgICAgICAgICAnVXNlIHYtYmluZCBvciB0aGUgY29sb24gc2hvcnRoYW5kIGluc3RlYWQuIEZvciBleGFtcGxlLCAnICtcbiAgICAgICAgICAnaW5zdGVhZCBvZiA8ZGl2IHN0eWxlPVwie3sgdmFsIH19XCI+LCB1c2UgPGRpdiA6c3R5bGU9XCJ2YWxcIj4uJyxcbiAgICAgICAgICBlbC5yYXdBdHRyc01hcFsnc3R5bGUnXVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBlbC5zdGF0aWNTdHlsZSA9IEpTT04uc3RyaW5naWZ5KHBhcnNlU3R5bGVUZXh0KHN0YXRpY1N0eWxlKSk7XG4gIH1cblxuICBjb25zdCBzdHlsZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3N0eWxlJywgZmFsc2UgLyogZ2V0U3RhdGljICovKTtcbiAgaWYgKHN0eWxlQmluZGluZykge1xuICAgIGVsLnN0eWxlQmluZGluZyA9IHN0eWxlQmluZGluZztcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5EYXRhJDEgKGVsKSB7XG4gIGxldCBkYXRhID0gJyc7XG4gIGlmIChlbC5zdGF0aWNTdHlsZSkge1xuICAgIGRhdGEgKz0gYHN0YXRpY1N0eWxlOiR7ZWwuc3RhdGljU3R5bGV9LGA7XG4gIH1cbiAgaWYgKGVsLnN0eWxlQmluZGluZykge1xuICAgIGRhdGEgKz0gYHN0eWxlOigke2VsLnN0eWxlQmluZGluZ30pLGA7XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxudmFyIHN0eWxlJDEgPSB7XG4gIHN0YXRpY0tleXM6IFsnc3RhdGljU3R5bGUnXSxcbiAgdHJhbnNmb3JtTm9kZTogdHJhbnNmb3JtTm9kZSQxLFxuICBnZW5EYXRhOiBnZW5EYXRhJDFcbn07XG5cbi8qICAqL1xuXG5sZXQgZGVjb2RlcjtcblxudmFyIGhlID0ge1xuICBkZWNvZGUgKGh0bWwpIHtcbiAgICBkZWNvZGVyID0gZGVjb2RlciB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkZWNvZGVyLmlubmVySFRNTCA9IGh0bWw7XG4gICAgcmV0dXJuIGRlY29kZXIudGV4dENvbnRlbnRcbiAgfVxufTtcblxuLyogICovXG5cbmNvbnN0IGlzVW5hcnlUYWcgPSBtYWtlTWFwKFxuICAnYXJlYSxiYXNlLGJyLGNvbCxlbWJlZCxmcmFtZSxocixpbWcsaW5wdXQsaXNpbmRleCxrZXlnZW4sJyArXG4gICdsaW5rLG1ldGEscGFyYW0sc291cmNlLHRyYWNrLHdicidcbik7XG5cbi8vIEVsZW1lbnRzIHRoYXQgeW91IGNhbiwgaW50ZW50aW9uYWxseSwgbGVhdmUgb3BlblxuLy8gKGFuZCB3aGljaCBjbG9zZSB0aGVtc2VsdmVzKVxuY29uc3QgY2FuQmVMZWZ0T3BlblRhZyA9IG1ha2VNYXAoXG4gICdjb2xncm91cCxkZCxkdCxsaSxvcHRpb25zLHAsdGQsdGZvb3QsdGgsdGhlYWQsdHIsc291cmNlJ1xuKTtcblxuLy8gSFRNTDUgdGFncyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9pbmRpY2VzLmh0bWwjZWxlbWVudHMtM1xuLy8gUGhyYXNpbmcgQ29udGVudCBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9kb20uaHRtbCNwaHJhc2luZy1jb250ZW50XG5jb25zdCBpc05vblBocmFzaW5nVGFnID0gbWFrZU1hcChcbiAgJ2FkZHJlc3MsYXJ0aWNsZSxhc2lkZSxiYXNlLGJsb2NrcXVvdGUsYm9keSxjYXB0aW9uLGNvbCxjb2xncm91cCxkZCwnICtcbiAgJ2RldGFpbHMsZGlhbG9nLGRpdixkbCxkdCxmaWVsZHNldCxmaWdjYXB0aW9uLGZpZ3VyZSxmb290ZXIsZm9ybSwnICtcbiAgJ2gxLGgyLGgzLGg0LGg1LGg2LGhlYWQsaGVhZGVyLGhncm91cCxocixodG1sLGxlZ2VuZCxsaSxtZW51aXRlbSxtZXRhLCcgK1xuICAnb3B0Z3JvdXAsb3B0aW9uLHBhcmFtLHJwLHJ0LHNvdXJjZSxzdHlsZSxzdW1tYXJ5LHRib2R5LHRkLHRmb290LHRoLHRoZWFkLCcgK1xuICAndGl0bGUsdHIsdHJhY2snXG4pO1xuXG4vKipcbiAqIE5vdCB0eXBlLWNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGl0J3MgbW9zdGx5IHZlbmRvciBjb2RlLlxuICovXG5cbi8vIFJlZ3VsYXIgRXhwcmVzc2lvbnMgZm9yIHBhcnNpbmcgdGFncyBhbmQgYXR0cmlidXRlc1xuY29uc3QgYXR0cmlidXRlID0gL15cXHMqKFteXFxzXCInPD5cXC89XSspKD86XFxzKig9KVxccyooPzpcIihbXlwiXSopXCIrfCcoW14nXSopJyt8KFteXFxzXCInPTw+YF0rKSkpPy87XG5jb25zdCBkeW5hbWljQXJnQXR0cmlidXRlID0gL15cXHMqKCg/OnYtW1xcdy1dKzp8QHw6fCMpXFxbW149XStcXF1bXlxcc1wiJzw+XFwvPV0qKSg/OlxccyooPSlcXHMqKD86XCIoW15cIl0qKVwiK3wnKFteJ10qKScrfChbXlxcc1wiJz08PmBdKykpKT8vO1xuY29uc3QgbmNuYW1lID0gYFthLXpBLVpfXVtcXFxcLVxcXFwuMC05X2EtekEtWiR7dW5pY29kZUxldHRlcnN9XSpgO1xuY29uc3QgcW5hbWVDYXB0dXJlID0gYCgoPzoke25jbmFtZX1cXFxcOik/JHtuY25hbWV9KWA7XG5jb25zdCBzdGFydFRhZ09wZW4gPSBuZXcgUmVnRXhwKGBePCR7cW5hbWVDYXB0dXJlfWApO1xuY29uc3Qgc3RhcnRUYWdDbG9zZSA9IC9eXFxzKihcXC8/KT4vO1xuY29uc3QgZW5kVGFnID0gbmV3IFJlZ0V4cChgXjxcXFxcLyR7cW5hbWVDYXB0dXJlfVtePl0qPmApO1xuY29uc3QgZG9jdHlwZSA9IC9ePCFET0NUWVBFIFtePl0rPi9pO1xuLy8gIzcyOTg6IGVzY2FwZSAtIHRvIGF2b2lkIGJlaW5nIHBhc2VkIGFzIEhUTUwgY29tbWVudCB3aGVuIGlubGluZWQgaW4gcGFnZVxuY29uc3QgY29tbWVudCA9IC9ePCFcXC0tLztcbmNvbnN0IGNvbmRpdGlvbmFsQ29tbWVudCA9IC9ePCFcXFsvO1xuXG4vLyBTcGVjaWFsIEVsZW1lbnRzIChjYW4gY29udGFpbiBhbnl0aGluZylcbmNvbnN0IGlzUGxhaW5UZXh0RWxlbWVudCA9IG1ha2VNYXAoJ3NjcmlwdCxzdHlsZSx0ZXh0YXJlYScsIHRydWUpO1xuY29uc3QgcmVDYWNoZSA9IHt9O1xuXG5jb25zdCBkZWNvZGluZ01hcCA9IHtcbiAgJyZsdDsnOiAnPCcsXG4gICcmZ3Q7JzogJz4nLFxuICAnJnF1b3Q7JzogJ1wiJyxcbiAgJyZhbXA7JzogJyYnLFxuICAnJiMxMDsnOiAnXFxuJyxcbiAgJyYjOTsnOiAnXFx0JyxcbiAgJyYjMzk7JzogXCInXCJcbn07XG5jb25zdCBlbmNvZGVkQXR0ciA9IC8mKD86bHR8Z3R8cXVvdHxhbXB8IzM5KTsvZztcbmNvbnN0IGVuY29kZWRBdHRyV2l0aE5ld0xpbmVzID0gLyYoPzpsdHxndHxxdW90fGFtcHwjMzl8IzEwfCM5KTsvZztcblxuLy8gIzU5OTJcbmNvbnN0IGlzSWdub3JlTmV3bGluZVRhZyA9IG1ha2VNYXAoJ3ByZSx0ZXh0YXJlYScsIHRydWUpO1xuY29uc3Qgc2hvdWxkSWdub3JlRmlyc3ROZXdsaW5lID0gKHRhZywgaHRtbCkgPT4gdGFnICYmIGlzSWdub3JlTmV3bGluZVRhZyh0YWcpICYmIGh0bWxbMF0gPT09ICdcXG4nO1xuXG5mdW5jdGlvbiBkZWNvZGVBdHRyICh2YWx1ZSwgc2hvdWxkRGVjb2RlTmV3bGluZXMpIHtcbiAgY29uc3QgcmUgPSBzaG91bGREZWNvZGVOZXdsaW5lcyA/IGVuY29kZWRBdHRyV2l0aE5ld0xpbmVzIDogZW5jb2RlZEF0dHI7XG4gIHJldHVybiB2YWx1ZS5yZXBsYWNlKHJlLCBtYXRjaCA9PiBkZWNvZGluZ01hcFttYXRjaF0pXG59XG5cbmZ1bmN0aW9uIHBhcnNlSFRNTCAoaHRtbCwgb3B0aW9ucykge1xuICBjb25zdCBzdGFjayA9IFtdO1xuICBjb25zdCBleHBlY3RIVE1MID0gb3B0aW9ucy5leHBlY3RIVE1MO1xuICBjb25zdCBpc1VuYXJ5VGFnJCQxID0gb3B0aW9ucy5pc1VuYXJ5VGFnIHx8IG5vO1xuICBjb25zdCBjYW5CZUxlZnRPcGVuVGFnJCQxID0gb3B0aW9ucy5jYW5CZUxlZnRPcGVuVGFnIHx8IG5vO1xuICBsZXQgaW5kZXggPSAwO1xuICBsZXQgbGFzdCwgbGFzdFRhZztcbiAgd2hpbGUgKGh0bWwpIHtcbiAgICBsYXN0ID0gaHRtbDtcbiAgICAvLyBNYWtlIHN1cmUgd2UncmUgbm90IGluIGEgcGxhaW50ZXh0IGNvbnRlbnQgZWxlbWVudCBsaWtlIHNjcmlwdC9zdHlsZVxuICAgIGlmICghbGFzdFRhZyB8fCAhaXNQbGFpblRleHRFbGVtZW50KGxhc3RUYWcpKSB7XG4gICAgICBsZXQgdGV4dEVuZCA9IGh0bWwuaW5kZXhPZignPCcpO1xuICAgICAgaWYgKHRleHRFbmQgPT09IDApIHtcbiAgICAgICAgLy8gQ29tbWVudDpcbiAgICAgICAgaWYgKGNvbW1lbnQudGVzdChodG1sKSkge1xuICAgICAgICAgIGNvbnN0IGNvbW1lbnRFbmQgPSBodG1sLmluZGV4T2YoJy0tPicpO1xuXG4gICAgICAgICAgaWYgKGNvbW1lbnRFbmQgPj0gMCkge1xuICAgICAgICAgICAgaWYgKG9wdGlvbnMuc2hvdWxkS2VlcENvbW1lbnQpIHtcbiAgICAgICAgICAgICAgb3B0aW9ucy5jb21tZW50KGh0bWwuc3Vic3RyaW5nKDQsIGNvbW1lbnRFbmQpLCBpbmRleCwgaW5kZXggKyBjb21tZW50RW5kICsgMyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBhZHZhbmNlKGNvbW1lbnRFbmQgKyAzKTtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db25kaXRpb25hbF9jb21tZW50I0Rvd25sZXZlbC1yZXZlYWxlZF9jb25kaXRpb25hbF9jb21tZW50XG4gICAgICAgIGlmIChjb25kaXRpb25hbENvbW1lbnQudGVzdChodG1sKSkge1xuICAgICAgICAgIGNvbnN0IGNvbmRpdGlvbmFsRW5kID0gaHRtbC5pbmRleE9mKCddPicpO1xuXG4gICAgICAgICAgaWYgKGNvbmRpdGlvbmFsRW5kID49IDApIHtcbiAgICAgICAgICAgIGFkdmFuY2UoY29uZGl0aW9uYWxFbmQgKyAyKTtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gRG9jdHlwZTpcbiAgICAgICAgY29uc3QgZG9jdHlwZU1hdGNoID0gaHRtbC5tYXRjaChkb2N0eXBlKTtcbiAgICAgICAgaWYgKGRvY3R5cGVNYXRjaCkge1xuICAgICAgICAgIGFkdmFuY2UoZG9jdHlwZU1hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEVuZCB0YWc6XG4gICAgICAgIGNvbnN0IGVuZFRhZ01hdGNoID0gaHRtbC5tYXRjaChlbmRUYWcpO1xuICAgICAgICBpZiAoZW5kVGFnTWF0Y2gpIHtcbiAgICAgICAgICBjb25zdCBjdXJJbmRleCA9IGluZGV4O1xuICAgICAgICAgIGFkdmFuY2UoZW5kVGFnTWF0Y2hbMF0ubGVuZ3RoKTtcbiAgICAgICAgICBwYXJzZUVuZFRhZyhlbmRUYWdNYXRjaFsxXSwgY3VySW5kZXgsIGluZGV4KTtcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gU3RhcnQgdGFnOlxuICAgICAgICBjb25zdCBzdGFydFRhZ01hdGNoID0gcGFyc2VTdGFydFRhZygpO1xuICAgICAgICBpZiAoc3RhcnRUYWdNYXRjaCkge1xuICAgICAgICAgIGhhbmRsZVN0YXJ0VGFnKHN0YXJ0VGFnTWF0Y2gpO1xuICAgICAgICAgIGlmIChzaG91bGRJZ25vcmVGaXJzdE5ld2xpbmUoc3RhcnRUYWdNYXRjaC50YWdOYW1lLCBodG1sKSkge1xuICAgICAgICAgICAgYWR2YW5jZSgxKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsZXQgdGV4dCwgcmVzdCwgbmV4dDtcbiAgICAgIGlmICh0ZXh0RW5kID49IDApIHtcbiAgICAgICAgcmVzdCA9IGh0bWwuc2xpY2UodGV4dEVuZCk7XG4gICAgICAgIHdoaWxlIChcbiAgICAgICAgICAhZW5kVGFnLnRlc3QocmVzdCkgJiZcbiAgICAgICAgICAhc3RhcnRUYWdPcGVuLnRlc3QocmVzdCkgJiZcbiAgICAgICAgICAhY29tbWVudC50ZXN0KHJlc3QpICYmXG4gICAgICAgICAgIWNvbmRpdGlvbmFsQ29tbWVudC50ZXN0KHJlc3QpXG4gICAgICAgICkge1xuICAgICAgICAgIC8vIDwgaW4gcGxhaW4gdGV4dCwgYmUgZm9yZ2l2aW5nIGFuZCB0cmVhdCBpdCBhcyB0ZXh0XG4gICAgICAgICAgbmV4dCA9IHJlc3QuaW5kZXhPZignPCcsIDEpO1xuICAgICAgICAgIGlmIChuZXh0IDwgMCkgYnJlYWtcbiAgICAgICAgICB0ZXh0RW5kICs9IG5leHQ7XG4gICAgICAgICAgcmVzdCA9IGh0bWwuc2xpY2UodGV4dEVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgdGV4dCA9IGh0bWwuc3Vic3RyaW5nKDAsIHRleHRFbmQpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGV4dEVuZCA8IDApIHtcbiAgICAgICAgdGV4dCA9IGh0bWw7XG4gICAgICB9XG5cbiAgICAgIGlmICh0ZXh0KSB7XG4gICAgICAgIGFkdmFuY2UodGV4dC5sZW5ndGgpO1xuICAgICAgfVxuXG4gICAgICBpZiAob3B0aW9ucy5jaGFycyAmJiB0ZXh0KSB7XG4gICAgICAgIG9wdGlvbnMuY2hhcnModGV4dCwgaW5kZXggLSB0ZXh0Lmxlbmd0aCwgaW5kZXgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBsZXQgZW5kVGFnTGVuZ3RoID0gMDtcbiAgICAgIGNvbnN0IHN0YWNrZWRUYWcgPSBsYXN0VGFnLnRvTG93ZXJDYXNlKCk7XG4gICAgICBjb25zdCByZVN0YWNrZWRUYWcgPSByZUNhY2hlW3N0YWNrZWRUYWddIHx8IChyZUNhY2hlW3N0YWNrZWRUYWddID0gbmV3IFJlZ0V4cCgnKFtcXFxcc1xcXFxTXSo/KSg8LycgKyBzdGFja2VkVGFnICsgJ1tePl0qPiknLCAnaScpKTtcbiAgICAgIGNvbnN0IHJlc3QgPSBodG1sLnJlcGxhY2UocmVTdGFja2VkVGFnLCBmdW5jdGlvbiAoYWxsLCB0ZXh0LCBlbmRUYWcpIHtcbiAgICAgICAgZW5kVGFnTGVuZ3RoID0gZW5kVGFnLmxlbmd0aDtcbiAgICAgICAgaWYgKCFpc1BsYWluVGV4dEVsZW1lbnQoc3RhY2tlZFRhZykgJiYgc3RhY2tlZFRhZyAhPT0gJ25vc2NyaXB0Jykge1xuICAgICAgICAgIHRleHQgPSB0ZXh0XG4gICAgICAgICAgICAucmVwbGFjZSgvPCFcXC0tKFtcXHNcXFNdKj8pLS0+L2csICckMScpIC8vICM3Mjk4XG4gICAgICAgICAgICAucmVwbGFjZSgvPCFcXFtDREFUQVxcWyhbXFxzXFxTXSo/KV1dPi9nLCAnJDEnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hvdWxkSWdub3JlRmlyc3ROZXdsaW5lKHN0YWNrZWRUYWcsIHRleHQpKSB7XG4gICAgICAgICAgdGV4dCA9IHRleHQuc2xpY2UoMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuY2hhcnMpIHtcbiAgICAgICAgICBvcHRpb25zLmNoYXJzKHRleHQpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnJ1xuICAgICAgfSk7XG4gICAgICBpbmRleCArPSBodG1sLmxlbmd0aCAtIHJlc3QubGVuZ3RoO1xuICAgICAgaHRtbCA9IHJlc3Q7XG4gICAgICBwYXJzZUVuZFRhZyhzdGFja2VkVGFnLCBpbmRleCAtIGVuZFRhZ0xlbmd0aCwgaW5kZXgpO1xuICAgIH1cblxuICAgIGlmIChodG1sID09PSBsYXN0KSB7XG4gICAgICBvcHRpb25zLmNoYXJzICYmIG9wdGlvbnMuY2hhcnMoaHRtbCk7XG4gICAgICBpZiAoIXN0YWNrLmxlbmd0aCAmJiBvcHRpb25zLndhcm4pIHtcbiAgICAgICAgb3B0aW9ucy53YXJuKGBNYWwtZm9ybWF0dGVkIHRhZyBhdCBlbmQgb2YgdGVtcGxhdGU6IFwiJHtodG1sfVwiYCwgeyBzdGFydDogaW5kZXggKyBodG1sLmxlbmd0aCB9KTtcbiAgICAgIH1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgLy8gQ2xlYW4gdXAgYW55IHJlbWFpbmluZyB0YWdzXG4gIHBhcnNlRW5kVGFnKCk7XG5cbiAgZnVuY3Rpb24gYWR2YW5jZSAobikge1xuICAgIGluZGV4ICs9IG47XG4gICAgaHRtbCA9IGh0bWwuc3Vic3RyaW5nKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gcGFyc2VTdGFydFRhZyAoKSB7XG4gICAgY29uc3Qgc3RhcnQgPSBodG1sLm1hdGNoKHN0YXJ0VGFnT3Blbik7XG4gICAgaWYgKHN0YXJ0KSB7XG4gICAgICBjb25zdCBtYXRjaCA9IHtcbiAgICAgICAgdGFnTmFtZTogc3RhcnRbMV0sXG4gICAgICAgIGF0dHJzOiBbXSxcbiAgICAgICAgc3RhcnQ6IGluZGV4XG4gICAgICB9O1xuICAgICAgYWR2YW5jZShzdGFydFswXS5sZW5ndGgpO1xuICAgICAgbGV0IGVuZCwgYXR0cjtcbiAgICAgIHdoaWxlICghKGVuZCA9IGh0bWwubWF0Y2goc3RhcnRUYWdDbG9zZSkpICYmIChhdHRyID0gaHRtbC5tYXRjaChkeW5hbWljQXJnQXR0cmlidXRlKSB8fCBodG1sLm1hdGNoKGF0dHJpYnV0ZSkpKSB7XG4gICAgICAgIGF0dHIuc3RhcnQgPSBpbmRleDtcbiAgICAgICAgYWR2YW5jZShhdHRyWzBdLmxlbmd0aCk7XG4gICAgICAgIGF0dHIuZW5kID0gaW5kZXg7XG4gICAgICAgIG1hdGNoLmF0dHJzLnB1c2goYXR0cik7XG4gICAgICB9XG4gICAgICBpZiAoZW5kKSB7XG4gICAgICAgIG1hdGNoLnVuYXJ5U2xhc2ggPSBlbmRbMV07XG4gICAgICAgIGFkdmFuY2UoZW5kWzBdLmxlbmd0aCk7XG4gICAgICAgIG1hdGNoLmVuZCA9IGluZGV4O1xuICAgICAgICByZXR1cm4gbWF0Y2hcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVTdGFydFRhZyAobWF0Y2gpIHtcbiAgICBjb25zdCB0YWdOYW1lID0gbWF0Y2gudGFnTmFtZTtcbiAgICBjb25zdCB1bmFyeVNsYXNoID0gbWF0Y2gudW5hcnlTbGFzaDtcblxuICAgIGlmIChleHBlY3RIVE1MKSB7XG4gICAgICBpZiAobGFzdFRhZyA9PT0gJ3AnICYmIGlzTm9uUGhyYXNpbmdUYWcodGFnTmFtZSkpIHtcbiAgICAgICAgcGFyc2VFbmRUYWcobGFzdFRhZyk7XG4gICAgICB9XG4gICAgICBpZiAoY2FuQmVMZWZ0T3BlblRhZyQkMSh0YWdOYW1lKSAmJiBsYXN0VGFnID09PSB0YWdOYW1lKSB7XG4gICAgICAgIHBhcnNlRW5kVGFnKHRhZ05hbWUpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IHVuYXJ5ID0gaXNVbmFyeVRhZyQkMSh0YWdOYW1lKSB8fCAhIXVuYXJ5U2xhc2g7XG5cbiAgICBjb25zdCBsID0gbWF0Y2guYXR0cnMubGVuZ3RoO1xuICAgIGNvbnN0IGF0dHJzID0gbmV3IEFycmF5KGwpO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICBjb25zdCBhcmdzID0gbWF0Y2guYXR0cnNbaV07XG4gICAgICBjb25zdCB2YWx1ZSA9IGFyZ3NbM10gfHwgYXJnc1s0XSB8fCBhcmdzWzVdIHx8ICcnO1xuICAgICAgY29uc3Qgc2hvdWxkRGVjb2RlTmV3bGluZXMgPSB0YWdOYW1lID09PSAnYScgJiYgYXJnc1sxXSA9PT0gJ2hyZWYnXG4gICAgICAgID8gb3B0aW9ucy5zaG91bGREZWNvZGVOZXdsaW5lc0ZvckhyZWZcbiAgICAgICAgOiBvcHRpb25zLnNob3VsZERlY29kZU5ld2xpbmVzO1xuICAgICAgYXR0cnNbaV0gPSB7XG4gICAgICAgIG5hbWU6IGFyZ3NbMV0sXG4gICAgICAgIHZhbHVlOiBkZWNvZGVBdHRyKHZhbHVlLCBzaG91bGREZWNvZGVOZXdsaW5lcylcbiAgICAgIH07XG4gICAgICBpZiAob3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICBhdHRyc1tpXS5zdGFydCA9IGFyZ3Muc3RhcnQgKyBhcmdzWzBdLm1hdGNoKC9eXFxzKi8pLmxlbmd0aDtcbiAgICAgICAgYXR0cnNbaV0uZW5kID0gYXJncy5lbmQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKCF1bmFyeSkge1xuICAgICAgc3RhY2sucHVzaCh7IHRhZzogdGFnTmFtZSwgbG93ZXJDYXNlZFRhZzogdGFnTmFtZS50b0xvd2VyQ2FzZSgpLCBhdHRyczogYXR0cnMsIHN0YXJ0OiBtYXRjaC5zdGFydCwgZW5kOiBtYXRjaC5lbmQgfSk7XG4gICAgICBsYXN0VGFnID0gdGFnTmFtZTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5zdGFydCkge1xuICAgICAgb3B0aW9ucy5zdGFydCh0YWdOYW1lLCBhdHRycywgdW5hcnksIG1hdGNoLnN0YXJ0LCBtYXRjaC5lbmQpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlRW5kVGFnICh0YWdOYW1lLCBzdGFydCwgZW5kKSB7XG4gICAgbGV0IHBvcywgbG93ZXJDYXNlZFRhZ05hbWU7XG4gICAgaWYgKHN0YXJ0ID09IG51bGwpIHN0YXJ0ID0gaW5kZXg7XG4gICAgaWYgKGVuZCA9PSBudWxsKSBlbmQgPSBpbmRleDtcblxuICAgIC8vIEZpbmQgdGhlIGNsb3Nlc3Qgb3BlbmVkIHRhZyBvZiB0aGUgc2FtZSB0eXBlXG4gICAgaWYgKHRhZ05hbWUpIHtcbiAgICAgIGxvd2VyQ2FzZWRUYWdOYW1lID0gdGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgZm9yIChwb3MgPSBzdGFjay5sZW5ndGggLSAxOyBwb3MgPj0gMDsgcG9zLS0pIHtcbiAgICAgICAgaWYgKHN0YWNrW3Bvc10ubG93ZXJDYXNlZFRhZyA9PT0gbG93ZXJDYXNlZFRhZ05hbWUpIHtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIElmIG5vIHRhZyBuYW1lIGlzIHByb3ZpZGVkLCBjbGVhbiBzaG9wXG4gICAgICBwb3MgPSAwO1xuICAgIH1cblxuICAgIGlmIChwb3MgPj0gMCkge1xuICAgICAgLy8gQ2xvc2UgYWxsIHRoZSBvcGVuIGVsZW1lbnRzLCB1cCB0aGUgc3RhY2tcbiAgICAgIGZvciAobGV0IGkgPSBzdGFjay5sZW5ndGggLSAxOyBpID49IHBvczsgaS0tKSB7XG4gICAgICAgIGlmIChpID4gcG9zIHx8ICF0YWdOYW1lICYmXG4gICAgICAgICAgb3B0aW9ucy53YXJuXG4gICAgICAgICkge1xuICAgICAgICAgIG9wdGlvbnMud2FybihcbiAgICAgICAgICAgIGB0YWcgPCR7c3RhY2tbaV0udGFnfT4gaGFzIG5vIG1hdGNoaW5nIGVuZCB0YWcuYCxcbiAgICAgICAgICAgIHsgc3RhcnQ6IHN0YWNrW2ldLnN0YXJ0IH1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChvcHRpb25zLmVuZCkge1xuICAgICAgICAgIG9wdGlvbnMuZW5kKHN0YWNrW2ldLnRhZywgc3RhcnQsIGVuZCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gUmVtb3ZlIHRoZSBvcGVuIGVsZW1lbnRzIGZyb20gdGhlIHN0YWNrXG4gICAgICBzdGFjay5sZW5ndGggPSBwb3M7XG4gICAgICBsYXN0VGFnID0gcG9zICYmIHN0YWNrW3BvcyAtIDFdLnRhZztcbiAgICB9IGVsc2UgaWYgKGxvd2VyQ2FzZWRUYWdOYW1lID09PSAnYnInKSB7XG4gICAgICBpZiAob3B0aW9ucy5zdGFydCkge1xuICAgICAgICBvcHRpb25zLnN0YXJ0KHRhZ05hbWUsIFtdLCB0cnVlLCBzdGFydCwgZW5kKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGxvd2VyQ2FzZWRUYWdOYW1lID09PSAncCcpIHtcbiAgICAgIGlmIChvcHRpb25zLnN0YXJ0KSB7XG4gICAgICAgIG9wdGlvbnMuc3RhcnQodGFnTmFtZSwgW10sIGZhbHNlLCBzdGFydCwgZW5kKTtcbiAgICAgIH1cbiAgICAgIGlmIChvcHRpb25zLmVuZCkge1xuICAgICAgICBvcHRpb25zLmVuZCh0YWdOYW1lLCBzdGFydCwgZW5kKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbmNvbnN0IG9uUkUgPSAvXkB8XnYtb246LztcbmNvbnN0IGRpclJFID0gL152LXxeQHxeOi87XG5jb25zdCBmb3JBbGlhc1JFID0gLyhbXFxzXFxTXSo/KVxccysoPzppbnxvZilcXHMrKFtcXHNcXFNdKikvO1xuY29uc3QgZm9ySXRlcmF0b3JSRSA9IC8sKFteLFxcfVxcXV0qKSg/OiwoW14sXFx9XFxdXSopKT8kLztcbmNvbnN0IHN0cmlwUGFyZW5zUkUgPSAvXlxcKHxcXCkkL2c7XG5jb25zdCBkeW5hbWljQXJnUkUgPSAvXlxcWy4qXFxdJC87XG5cbmNvbnN0IGFyZ1JFID0gLzooLiopJC87XG5jb25zdCBiaW5kUkUgPSAvXjp8XlxcLnxedi1iaW5kOi87XG5jb25zdCBtb2RpZmllclJFID0gL1xcLlteLl0rL2c7XG5cbmNvbnN0IHNsb3RSRSA9IC9edi1zbG90KDp8JCl8XiMvO1xuXG5jb25zdCBsaW5lQnJlYWtSRSA9IC9bXFxyXFxuXS87XG5jb25zdCB3aGl0ZXNwYWNlUkUkMSA9IC9cXHMrL2c7XG5cbmNvbnN0IGludmFsaWRBdHRyaWJ1dGVSRSA9IC9bXFxzXCInPD5cXC89XS87XG5cbmNvbnN0IGRlY29kZUhUTUxDYWNoZWQgPSBjYWNoZWQoaGUuZGVjb2RlKTtcblxuY29uc3QgZW1wdHlTbG90U2NvcGVUb2tlbiA9IGBfZW1wdHlfYDtcblxuLy8gY29uZmlndXJhYmxlIHN0YXRlXG5sZXQgd2FybiQyO1xubGV0IGRlbGltaXRlcnM7XG5sZXQgdHJhbnNmb3JtcztcbmxldCBwcmVUcmFuc2Zvcm1zO1xubGV0IHBvc3RUcmFuc2Zvcm1zO1xubGV0IHBsYXRmb3JtSXNQcmVUYWc7XG5sZXQgcGxhdGZvcm1NdXN0VXNlUHJvcDtcbmxldCBwbGF0Zm9ybUdldFRhZ05hbWVzcGFjZTtcbmxldCBtYXliZUNvbXBvbmVudDtcblxuZnVuY3Rpb24gY3JlYXRlQVNURWxlbWVudCAoXG4gIHRhZyxcbiAgYXR0cnMsXG4gIHBhcmVudFxuKSB7XG4gIHJldHVybiB7XG4gICAgdHlwZTogMSxcbiAgICB0YWcsXG4gICAgYXR0cnNMaXN0OiBhdHRycyxcbiAgICBhdHRyc01hcDogbWFrZUF0dHJzTWFwKGF0dHJzKSxcbiAgICByYXdBdHRyc01hcDoge30sXG4gICAgcGFyZW50LFxuICAgIGNoaWxkcmVuOiBbXVxuICB9XG59XG5cbi8qKlxuICogQ29udmVydCBIVE1MIHN0cmluZyB0byBBU1QuXG4gKi9cbmZ1bmN0aW9uIHBhcnNlIChcbiAgdGVtcGxhdGUsXG4gIG9wdGlvbnNcbikge1xuICB3YXJuJDIgPSBvcHRpb25zLndhcm4gfHwgYmFzZVdhcm47XG5cbiAgcGxhdGZvcm1Jc1ByZVRhZyA9IG9wdGlvbnMuaXNQcmVUYWcgfHwgbm87XG4gIHBsYXRmb3JtTXVzdFVzZVByb3AgPSBvcHRpb25zLm11c3RVc2VQcm9wIHx8IG5vO1xuICBwbGF0Zm9ybUdldFRhZ05hbWVzcGFjZSA9IG9wdGlvbnMuZ2V0VGFnTmFtZXNwYWNlIHx8IG5vO1xuICBjb25zdCBpc1Jlc2VydmVkVGFnID0gb3B0aW9ucy5pc1Jlc2VydmVkVGFnIHx8IG5vO1xuICBtYXliZUNvbXBvbmVudCA9IChlbCkgPT4gISFlbC5jb21wb25lbnQgfHwgIWlzUmVzZXJ2ZWRUYWcoZWwudGFnKTtcblxuICB0cmFuc2Zvcm1zID0gcGx1Y2tNb2R1bGVGdW5jdGlvbihvcHRpb25zLm1vZHVsZXMsICd0cmFuc2Zvcm1Ob2RlJyk7XG4gIHByZVRyYW5zZm9ybXMgPSBwbHVja01vZHVsZUZ1bmN0aW9uKG9wdGlvbnMubW9kdWxlcywgJ3ByZVRyYW5zZm9ybU5vZGUnKTtcbiAgcG9zdFRyYW5zZm9ybXMgPSBwbHVja01vZHVsZUZ1bmN0aW9uKG9wdGlvbnMubW9kdWxlcywgJ3Bvc3RUcmFuc2Zvcm1Ob2RlJyk7XG5cbiAgZGVsaW1pdGVycyA9IG9wdGlvbnMuZGVsaW1pdGVycztcblxuICBjb25zdCBzdGFjayA9IFtdO1xuICBjb25zdCBwcmVzZXJ2ZVdoaXRlc3BhY2UgPSBvcHRpb25zLnByZXNlcnZlV2hpdGVzcGFjZSAhPT0gZmFsc2U7XG4gIGNvbnN0IHdoaXRlc3BhY2VPcHRpb24gPSBvcHRpb25zLndoaXRlc3BhY2U7XG4gIGxldCByb290O1xuICBsZXQgY3VycmVudFBhcmVudDtcbiAgbGV0IGluVlByZSA9IGZhbHNlO1xuICBsZXQgaW5QcmUgPSBmYWxzZTtcbiAgbGV0IHdhcm5lZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIHdhcm5PbmNlIChtc2csIHJhbmdlKSB7XG4gICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgIHdhcm5lZCA9IHRydWU7XG4gICAgICB3YXJuJDIobXNnLCByYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2xvc2VFbGVtZW50IChlbGVtZW50KSB7XG4gICAgdHJpbUVuZGluZ1doaXRlc3BhY2UoZWxlbWVudCk7XG4gICAgaWYgKCFpblZQcmUgJiYgIWVsZW1lbnQucHJvY2Vzc2VkKSB7XG4gICAgICBlbGVtZW50ID0gcHJvY2Vzc0VsZW1lbnQoZWxlbWVudCwgb3B0aW9ucyk7XG4gICAgfVxuICAgIC8vIHRyZWUgbWFuYWdlbWVudFxuICAgIGlmICghc3RhY2subGVuZ3RoICYmIGVsZW1lbnQgIT09IHJvb3QpIHtcbiAgICAgIC8vIGFsbG93IHJvb3QgZWxlbWVudHMgd2l0aCB2LWlmLCB2LWVsc2UtaWYgYW5kIHYtZWxzZVxuICAgICAgaWYgKHJvb3QuaWYgJiYgKGVsZW1lbnQuZWxzZWlmIHx8IGVsZW1lbnQuZWxzZSkpIHtcbiAgICAgICAge1xuICAgICAgICAgIGNoZWNrUm9vdENvbnN0cmFpbnRzKGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICAgIGFkZElmQ29uZGl0aW9uKHJvb3QsIHtcbiAgICAgICAgICBleHA6IGVsZW1lbnQuZWxzZWlmLFxuICAgICAgICAgIGJsb2NrOiBlbGVtZW50XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2Fybk9uY2UoXG4gICAgICAgICAgYENvbXBvbmVudCB0ZW1wbGF0ZSBzaG91bGQgY29udGFpbiBleGFjdGx5IG9uZSByb290IGVsZW1lbnQuIGAgK1xuICAgICAgICAgIGBJZiB5b3UgYXJlIHVzaW5nIHYtaWYgb24gbXVsdGlwbGUgZWxlbWVudHMsIGAgK1xuICAgICAgICAgIGB1c2Ugdi1lbHNlLWlmIHRvIGNoYWluIHRoZW0gaW5zdGVhZC5gLFxuICAgICAgICAgIHsgc3RhcnQ6IGVsZW1lbnQuc3RhcnQgfVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoY3VycmVudFBhcmVudCAmJiAhZWxlbWVudC5mb3JiaWRkZW4pIHtcbiAgICAgIGlmIChlbGVtZW50LmVsc2VpZiB8fCBlbGVtZW50LmVsc2UpIHtcbiAgICAgICAgcHJvY2Vzc0lmQ29uZGl0aW9ucyhlbGVtZW50LCBjdXJyZW50UGFyZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGlmIChlbGVtZW50LnNsb3RTY29wZSkge1xuICAgICAgICAgIC8vIHNjb3BlZCBzbG90XG4gICAgICAgICAgLy8ga2VlcCBpdCBpbiB0aGUgY2hpbGRyZW4gbGlzdCBzbyB0aGF0IHYtZWxzZSgtaWYpIGNvbmRpdGlvbnMgY2FuXG4gICAgICAgICAgLy8gZmluZCBpdCBhcyB0aGUgcHJldiBub2RlLlxuICAgICAgICAgIGNvbnN0IG5hbWUgPSBlbGVtZW50LnNsb3RUYXJnZXQgfHwgJ1wiZGVmYXVsdFwiJ1xuICAgICAgICAgIDsoY3VycmVudFBhcmVudC5zY29wZWRTbG90cyB8fCAoY3VycmVudFBhcmVudC5zY29wZWRTbG90cyA9IHt9KSlbbmFtZV0gPSBlbGVtZW50O1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnRQYXJlbnQuY2hpbGRyZW4ucHVzaChlbGVtZW50KTtcbiAgICAgICAgZWxlbWVudC5wYXJlbnQgPSBjdXJyZW50UGFyZW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGZpbmFsIGNoaWxkcmVuIGNsZWFudXBcbiAgICAvLyBmaWx0ZXIgb3V0IHNjb3BlZCBzbG90c1xuICAgIGVsZW1lbnQuY2hpbGRyZW4gPSBlbGVtZW50LmNoaWxkcmVuLmZpbHRlcihjID0+ICEoYykuc2xvdFNjb3BlKTtcbiAgICAvLyByZW1vdmUgdHJhaWxpbmcgd2hpdGVzcGFjZSBub2RlIGFnYWluXG4gICAgdHJpbUVuZGluZ1doaXRlc3BhY2UoZWxlbWVudCk7XG5cbiAgICAvLyBjaGVjayBwcmUgc3RhdGVcbiAgICBpZiAoZWxlbWVudC5wcmUpIHtcbiAgICAgIGluVlByZSA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAocGxhdGZvcm1Jc1ByZVRhZyhlbGVtZW50LnRhZykpIHtcbiAgICAgIGluUHJlID0gZmFsc2U7XG4gICAgfVxuICAgIC8vIGFwcGx5IHBvc3QtdHJhbnNmb3Jtc1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcG9zdFRyYW5zZm9ybXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHBvc3RUcmFuc2Zvcm1zW2ldKGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHRyaW1FbmRpbmdXaGl0ZXNwYWNlIChlbCkge1xuICAgIC8vIHJlbW92ZSB0cmFpbGluZyB3aGl0ZXNwYWNlIG5vZGVcbiAgICBpZiAoIWluUHJlKSB7XG4gICAgICBsZXQgbGFzdE5vZGU7XG4gICAgICB3aGlsZSAoXG4gICAgICAgIChsYXN0Tm9kZSA9IGVsLmNoaWxkcmVuW2VsLmNoaWxkcmVuLmxlbmd0aCAtIDFdKSAmJlxuICAgICAgICBsYXN0Tm9kZS50eXBlID09PSAzICYmXG4gICAgICAgIGxhc3ROb2RlLnRleHQgPT09ICcgJ1xuICAgICAgKSB7XG4gICAgICAgIGVsLmNoaWxkcmVuLnBvcCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrUm9vdENvbnN0cmFpbnRzIChlbCkge1xuICAgIGlmIChlbC50YWcgPT09ICdzbG90JyB8fCBlbC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgIHdhcm5PbmNlKFxuICAgICAgICBgQ2Fubm90IHVzZSA8JHtlbC50YWd9PiBhcyBjb21wb25lbnQgcm9vdCBlbGVtZW50IGJlY2F1c2UgaXQgbWF5IGAgK1xuICAgICAgICAnY29udGFpbiBtdWx0aXBsZSBub2Rlcy4nLFxuICAgICAgICB7IHN0YXJ0OiBlbC5zdGFydCB9XG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoZWwuYXR0cnNNYXAuaGFzT3duUHJvcGVydHkoJ3YtZm9yJykpIHtcbiAgICAgIHdhcm5PbmNlKFxuICAgICAgICAnQ2Fubm90IHVzZSB2LWZvciBvbiBzdGF0ZWZ1bCBjb21wb25lbnQgcm9vdCBlbGVtZW50IGJlY2F1c2UgJyArXG4gICAgICAgICdpdCByZW5kZXJzIG11bHRpcGxlIGVsZW1lbnRzLicsXG4gICAgICAgIGVsLnJhd0F0dHJzTWFwWyd2LWZvciddXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIHBhcnNlSFRNTCh0ZW1wbGF0ZSwge1xuICAgIHdhcm46IHdhcm4kMixcbiAgICBleHBlY3RIVE1MOiBvcHRpb25zLmV4cGVjdEhUTUwsXG4gICAgaXNVbmFyeVRhZzogb3B0aW9ucy5pc1VuYXJ5VGFnLFxuICAgIGNhbkJlTGVmdE9wZW5UYWc6IG9wdGlvbnMuY2FuQmVMZWZ0T3BlblRhZyxcbiAgICBzaG91bGREZWNvZGVOZXdsaW5lczogb3B0aW9ucy5zaG91bGREZWNvZGVOZXdsaW5lcyxcbiAgICBzaG91bGREZWNvZGVOZXdsaW5lc0ZvckhyZWY6IG9wdGlvbnMuc2hvdWxkRGVjb2RlTmV3bGluZXNGb3JIcmVmLFxuICAgIHNob3VsZEtlZXBDb21tZW50OiBvcHRpb25zLmNvbW1lbnRzLFxuICAgIG91dHB1dFNvdXJjZVJhbmdlOiBvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlLFxuICAgIHN0YXJ0ICh0YWcsIGF0dHJzLCB1bmFyeSwgc3RhcnQpIHtcbiAgICAgIC8vIGNoZWNrIG5hbWVzcGFjZS5cbiAgICAgIC8vIGluaGVyaXQgcGFyZW50IG5zIGlmIHRoZXJlIGlzIG9uZVxuICAgICAgY29uc3QgbnMgPSAoY3VycmVudFBhcmVudCAmJiBjdXJyZW50UGFyZW50Lm5zKSB8fCBwbGF0Zm9ybUdldFRhZ05hbWVzcGFjZSh0YWcpO1xuXG4gICAgICAvLyBoYW5kbGUgSUUgc3ZnIGJ1Z1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoaXNJRSAmJiBucyA9PT0gJ3N2ZycpIHtcbiAgICAgICAgYXR0cnMgPSBndWFyZElFU1ZHQnVnKGF0dHJzKTtcbiAgICAgIH1cblxuICAgICAgbGV0IGVsZW1lbnQgPSBjcmVhdGVBU1RFbGVtZW50KHRhZywgYXR0cnMsIGN1cnJlbnRQYXJlbnQpO1xuICAgICAgaWYgKG5zKSB7XG4gICAgICAgIGVsZW1lbnQubnMgPSBucztcbiAgICAgIH1cblxuICAgICAge1xuICAgICAgICBpZiAob3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICAgIGVsZW1lbnQuc3RhcnQgPSBzdGFydDtcbiAgICAgICAgICBlbGVtZW50LnJhd0F0dHJzTWFwID0gZWxlbWVudC5hdHRyc0xpc3QucmVkdWNlKChjdW11bGF0ZWQsIGF0dHIpID0+IHtcbiAgICAgICAgICAgIGN1bXVsYXRlZFthdHRyLm5hbWVdID0gYXR0cjtcbiAgICAgICAgICAgIHJldHVybiBjdW11bGF0ZWRcbiAgICAgICAgICB9LCB7fSk7XG4gICAgICAgIH1cbiAgICAgICAgYXR0cnMuZm9yRWFjaChhdHRyID0+IHtcbiAgICAgICAgICBpZiAoaW52YWxpZEF0dHJpYnV0ZVJFLnRlc3QoYXR0ci5uYW1lKSkge1xuICAgICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgICBgSW52YWxpZCBkeW5hbWljIGFyZ3VtZW50IGV4cHJlc3Npb246IGF0dHJpYnV0ZSBuYW1lcyBjYW5ub3QgY29udGFpbiBgICtcbiAgICAgICAgICAgICAgYHNwYWNlcywgcXVvdGVzLCA8LCA+LCAvIG9yID0uYCxcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHN0YXJ0OiBhdHRyLnN0YXJ0ICsgYXR0ci5uYW1lLmluZGV4T2YoYFtgKSxcbiAgICAgICAgICAgICAgICBlbmQ6IGF0dHIuc3RhcnQgKyBhdHRyLm5hbWUubGVuZ3RoXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgaWYgKGlzRm9yYmlkZGVuVGFnKGVsZW1lbnQpICYmICFpc1NlcnZlclJlbmRlcmluZygpKSB7XG4gICAgICAgIGVsZW1lbnQuZm9yYmlkZGVuID0gdHJ1ZTtcbiAgICAgICAgd2FybiQyKFxuICAgICAgICAgICdUZW1wbGF0ZXMgc2hvdWxkIG9ubHkgYmUgcmVzcG9uc2libGUgZm9yIG1hcHBpbmcgdGhlIHN0YXRlIHRvIHRoZSAnICtcbiAgICAgICAgICAnVUkuIEF2b2lkIHBsYWNpbmcgdGFncyB3aXRoIHNpZGUtZWZmZWN0cyBpbiB5b3VyIHRlbXBsYXRlcywgc3VjaCBhcyAnICtcbiAgICAgICAgICBgPCR7dGFnfT5gICsgJywgYXMgdGhleSB3aWxsIG5vdCBiZSBwYXJzZWQuJyxcbiAgICAgICAgICB7IHN0YXJ0OiBlbGVtZW50LnN0YXJ0IH1cbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gYXBwbHkgcHJlLXRyYW5zZm9ybXNcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcHJlVHJhbnNmb3Jtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBlbGVtZW50ID0gcHJlVHJhbnNmb3Jtc1tpXShlbGVtZW50LCBvcHRpb25zKSB8fCBlbGVtZW50O1xuICAgICAgfVxuXG4gICAgICBpZiAoIWluVlByZSkge1xuICAgICAgICBwcm9jZXNzUHJlKGVsZW1lbnQpO1xuICAgICAgICBpZiAoZWxlbWVudC5wcmUpIHtcbiAgICAgICAgICBpblZQcmUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocGxhdGZvcm1Jc1ByZVRhZyhlbGVtZW50LnRhZykpIHtcbiAgICAgICAgaW5QcmUgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGluVlByZSkge1xuICAgICAgICBwcm9jZXNzUmF3QXR0cnMoZWxlbWVudCk7XG4gICAgICB9IGVsc2UgaWYgKCFlbGVtZW50LnByb2Nlc3NlZCkge1xuICAgICAgICAvLyBzdHJ1Y3R1cmFsIGRpcmVjdGl2ZXNcbiAgICAgICAgcHJvY2Vzc0ZvcihlbGVtZW50KTtcbiAgICAgICAgcHJvY2Vzc0lmKGVsZW1lbnQpO1xuICAgICAgICBwcm9jZXNzT25jZShlbGVtZW50KTtcbiAgICAgIH1cblxuICAgICAgaWYgKCFyb290KSB7XG4gICAgICAgIHJvb3QgPSBlbGVtZW50O1xuICAgICAgICB7XG4gICAgICAgICAgY2hlY2tSb290Q29uc3RyYWludHMocm9vdCk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCF1bmFyeSkge1xuICAgICAgICBjdXJyZW50UGFyZW50ID0gZWxlbWVudDtcbiAgICAgICAgc3RhY2sucHVzaChlbGVtZW50KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNsb3NlRWxlbWVudChlbGVtZW50KTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZW5kICh0YWcsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIGNvbnN0IGVsZW1lbnQgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgICAgIC8vIHBvcCBzdGFja1xuICAgICAgc3RhY2subGVuZ3RoIC09IDE7XG4gICAgICBjdXJyZW50UGFyZW50ID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gICAgICBpZiAob3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICBlbGVtZW50LmVuZCA9IGVuZDtcbiAgICAgIH1cbiAgICAgIGNsb3NlRWxlbWVudChlbGVtZW50KTtcbiAgICB9LFxuXG4gICAgY2hhcnMgKHRleHQsIHN0YXJ0LCBlbmQpIHtcbiAgICAgIGlmICghY3VycmVudFBhcmVudCkge1xuICAgICAgICB7XG4gICAgICAgICAgaWYgKHRleHQgPT09IHRlbXBsYXRlKSB7XG4gICAgICAgICAgICB3YXJuT25jZShcbiAgICAgICAgICAgICAgJ0NvbXBvbmVudCB0ZW1wbGF0ZSByZXF1aXJlcyBhIHJvb3QgZWxlbWVudCwgcmF0aGVyIHRoYW4ganVzdCB0ZXh0LicsXG4gICAgICAgICAgICAgIHsgc3RhcnQgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKCh0ZXh0ID0gdGV4dC50cmltKCkpKSB7XG4gICAgICAgICAgICB3YXJuT25jZShcbiAgICAgICAgICAgICAgYHRleHQgXCIke3RleHR9XCIgb3V0c2lkZSByb290IGVsZW1lbnQgd2lsbCBiZSBpZ25vcmVkLmAsXG4gICAgICAgICAgICAgIHsgc3RhcnQgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICAvLyBJRSB0ZXh0YXJlYSBwbGFjZWhvbGRlciBidWdcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKGlzSUUgJiZcbiAgICAgICAgY3VycmVudFBhcmVudC50YWcgPT09ICd0ZXh0YXJlYScgJiZcbiAgICAgICAgY3VycmVudFBhcmVudC5hdHRyc01hcC5wbGFjZWhvbGRlciA9PT0gdGV4dFxuICAgICAgKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgY29uc3QgY2hpbGRyZW4gPSBjdXJyZW50UGFyZW50LmNoaWxkcmVuO1xuICAgICAgaWYgKGluUHJlIHx8IHRleHQudHJpbSgpKSB7XG4gICAgICAgIHRleHQgPSBpc1RleHRUYWcoY3VycmVudFBhcmVudCkgPyB0ZXh0IDogZGVjb2RlSFRNTENhY2hlZCh0ZXh0KTtcbiAgICAgIH0gZWxzZSBpZiAoIWNoaWxkcmVuLmxlbmd0aCkge1xuICAgICAgICAvLyByZW1vdmUgdGhlIHdoaXRlc3BhY2Utb25seSBub2RlIHJpZ2h0IGFmdGVyIGFuIG9wZW5pbmcgdGFnXG4gICAgICAgIHRleHQgPSAnJztcbiAgICAgIH0gZWxzZSBpZiAod2hpdGVzcGFjZU9wdGlvbikge1xuICAgICAgICBpZiAod2hpdGVzcGFjZU9wdGlvbiA9PT0gJ2NvbmRlbnNlJykge1xuICAgICAgICAgIC8vIGluIGNvbmRlbnNlIG1vZGUsIHJlbW92ZSB0aGUgd2hpdGVzcGFjZSBub2RlIGlmIGl0IGNvbnRhaW5zXG4gICAgICAgICAgLy8gbGluZSBicmVhaywgb3RoZXJ3aXNlIGNvbmRlbnNlIHRvIGEgc2luZ2xlIHNwYWNlXG4gICAgICAgICAgdGV4dCA9IGxpbmVCcmVha1JFLnRlc3QodGV4dCkgPyAnJyA6ICcgJztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0ZXh0ID0gJyAnO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0ZXh0ID0gcHJlc2VydmVXaGl0ZXNwYWNlID8gJyAnIDogJyc7XG4gICAgICB9XG4gICAgICBpZiAodGV4dCkge1xuICAgICAgICBpZiAod2hpdGVzcGFjZU9wdGlvbiA9PT0gJ2NvbmRlbnNlJykge1xuICAgICAgICAgIC8vIGNvbmRlbnNlIGNvbnNlY3V0aXZlIHdoaXRlc3BhY2VzIGludG8gc2luZ2xlIHNwYWNlXG4gICAgICAgICAgdGV4dCA9IHRleHQucmVwbGFjZSh3aGl0ZXNwYWNlUkUkMSwgJyAnKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgcmVzO1xuICAgICAgICBsZXQgY2hpbGQ7XG4gICAgICAgIGlmICghaW5WUHJlICYmIHRleHQgIT09ICcgJyAmJiAocmVzID0gcGFyc2VUZXh0KHRleHQsIGRlbGltaXRlcnMpKSkge1xuICAgICAgICAgIGNoaWxkID0ge1xuICAgICAgICAgICAgdHlwZTogMixcbiAgICAgICAgICAgIGV4cHJlc3Npb246IHJlcy5leHByZXNzaW9uLFxuICAgICAgICAgICAgdG9rZW5zOiByZXMudG9rZW5zLFxuICAgICAgICAgICAgdGV4dFxuICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAodGV4dCAhPT0gJyAnIHx8ICFjaGlsZHJlbi5sZW5ndGggfHwgY2hpbGRyZW5bY2hpbGRyZW4ubGVuZ3RoIC0gMV0udGV4dCAhPT0gJyAnKSB7XG4gICAgICAgICAgY2hpbGQgPSB7XG4gICAgICAgICAgICB0eXBlOiAzLFxuICAgICAgICAgICAgdGV4dFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoaWxkKSB7XG4gICAgICAgICAgaWYgKG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgICAgIGNoaWxkLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgICAgICBjaGlsZC5lbmQgPSBlbmQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBjb21tZW50ICh0ZXh0LCBzdGFydCwgZW5kKSB7XG4gICAgICAvLyBhZGRpbmcgYW55dGluZyBhcyBhIHNpYmxpbmcgdG8gdGhlIHJvb3Qgbm9kZSBpcyBmb3JiaWRkZW5cbiAgICAgIC8vIGNvbW1lbnRzIHNob3VsZCBzdGlsbCBiZSBhbGxvd2VkLCBidXQgaWdub3JlZFxuICAgICAgaWYgKGN1cnJlbnRQYXJlbnQpIHtcbiAgICAgICAgY29uc3QgY2hpbGQgPSB7XG4gICAgICAgICAgdHlwZTogMyxcbiAgICAgICAgICB0ZXh0LFxuICAgICAgICAgIGlzQ29tbWVudDogdHJ1ZVxuICAgICAgICB9O1xuICAgICAgICBpZiAob3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICAgIGNoaWxkLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgICAgY2hpbGQuZW5kID0gZW5kO1xuICAgICAgICB9XG4gICAgICAgIGN1cnJlbnRQYXJlbnQuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIHJvb3Rcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc1ByZSAoZWwpIHtcbiAgaWYgKGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LXByZScpICE9IG51bGwpIHtcbiAgICBlbC5wcmUgPSB0cnVlO1xuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NSYXdBdHRycyAoZWwpIHtcbiAgY29uc3QgbGlzdCA9IGVsLmF0dHJzTGlzdDtcbiAgY29uc3QgbGVuID0gbGlzdC5sZW5ndGg7XG4gIGlmIChsZW4pIHtcbiAgICBjb25zdCBhdHRycyA9IGVsLmF0dHJzID0gbmV3IEFycmF5KGxlbik7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xuICAgICAgYXR0cnNbaV0gPSB7XG4gICAgICAgIG5hbWU6IGxpc3RbaV0ubmFtZSxcbiAgICAgICAgdmFsdWU6IEpTT04uc3RyaW5naWZ5KGxpc3RbaV0udmFsdWUpXG4gICAgICB9O1xuICAgICAgaWYgKGxpc3RbaV0uc3RhcnQgIT0gbnVsbCkge1xuICAgICAgICBhdHRyc1tpXS5zdGFydCA9IGxpc3RbaV0uc3RhcnQ7XG4gICAgICAgIGF0dHJzW2ldLmVuZCA9IGxpc3RbaV0uZW5kO1xuICAgICAgfVxuICAgIH1cbiAgfSBlbHNlIGlmICghZWwucHJlKSB7XG4gICAgLy8gbm9uIHJvb3Qgbm9kZSBpbiBwcmUgYmxvY2tzIHdpdGggbm8gYXR0cmlidXRlc1xuICAgIGVsLnBsYWluID0gdHJ1ZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzRWxlbWVudCAoXG4gIGVsZW1lbnQsXG4gIG9wdGlvbnNcbikge1xuICBwcm9jZXNzS2V5KGVsZW1lbnQpO1xuXG4gIC8vIGRldGVybWluZSB3aGV0aGVyIHRoaXMgaXMgYSBwbGFpbiBlbGVtZW50IGFmdGVyXG4gIC8vIHJlbW92aW5nIHN0cnVjdHVyYWwgYXR0cmlidXRlc1xuICBlbGVtZW50LnBsYWluID0gKFxuICAgICFlbGVtZW50LmtleSAmJlxuICAgICFlbGVtZW50LnNjb3BlZFNsb3RzICYmXG4gICAgIWVsZW1lbnQuYXR0cnNMaXN0Lmxlbmd0aFxuICApO1xuXG4gIHByb2Nlc3NSZWYoZWxlbWVudCk7XG4gIHByb2Nlc3NTbG90Q29udGVudChlbGVtZW50KTtcbiAgcHJvY2Vzc1Nsb3RPdXRsZXQoZWxlbWVudCk7XG4gIHByb2Nlc3NDb21wb25lbnQoZWxlbWVudCk7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgdHJhbnNmb3Jtcy5sZW5ndGg7IGkrKykge1xuICAgIGVsZW1lbnQgPSB0cmFuc2Zvcm1zW2ldKGVsZW1lbnQsIG9wdGlvbnMpIHx8IGVsZW1lbnQ7XG4gIH1cbiAgcHJvY2Vzc0F0dHJzKGVsZW1lbnQpO1xuICByZXR1cm4gZWxlbWVudFxufVxuXG5mdW5jdGlvbiBwcm9jZXNzS2V5IChlbCkge1xuICBjb25zdCBleHAgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ2tleScpO1xuICBpZiAoZXhwKSB7XG4gICAge1xuICAgICAgaWYgKGVsLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgYDx0ZW1wbGF0ZT4gY2Fubm90IGJlIGtleWVkLiBQbGFjZSB0aGUga2V5IG9uIHJlYWwgZWxlbWVudHMgaW5zdGVhZC5gLFxuICAgICAgICAgIGdldFJhd0JpbmRpbmdBdHRyKGVsLCAna2V5JylcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmIChlbC5mb3IpIHtcbiAgICAgICAgY29uc3QgaXRlcmF0b3IgPSBlbC5pdGVyYXRvcjIgfHwgZWwuaXRlcmF0b3IxO1xuICAgICAgICBjb25zdCBwYXJlbnQgPSBlbC5wYXJlbnQ7XG4gICAgICAgIGlmIChpdGVyYXRvciAmJiBpdGVyYXRvciA9PT0gZXhwICYmIHBhcmVudCAmJiBwYXJlbnQudGFnID09PSAndHJhbnNpdGlvbi1ncm91cCcpIHtcbiAgICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgICBgRG8gbm90IHVzZSB2LWZvciBpbmRleCBhcyBrZXkgb24gPHRyYW5zaXRpb24tZ3JvdXA+IGNoaWxkcmVuLCBgICtcbiAgICAgICAgICAgIGB0aGlzIGlzIHRoZSBzYW1lIGFzIG5vdCB1c2luZyBrZXlzLmAsXG4gICAgICAgICAgICBnZXRSYXdCaW5kaW5nQXR0cihlbCwgJ2tleScpLFxuICAgICAgICAgICAgdHJ1ZSAvKiB0aXAgKi9cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGVsLmtleSA9IGV4cDtcbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzUmVmIChlbCkge1xuICBjb25zdCByZWYgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3JlZicpO1xuICBpZiAocmVmKSB7XG4gICAgZWwucmVmID0gcmVmO1xuICAgIGVsLnJlZkluRm9yID0gY2hlY2tJbkZvcihlbCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0ZvciAoZWwpIHtcbiAgbGV0IGV4cDtcbiAgaWYgKChleHAgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1mb3InKSkpIHtcbiAgICBjb25zdCByZXMgPSBwYXJzZUZvcihleHApO1xuICAgIGlmIChyZXMpIHtcbiAgICAgIGV4dGVuZChlbCwgcmVzKTtcbiAgICB9IGVsc2Uge1xuICAgICAgd2FybiQyKFxuICAgICAgICBgSW52YWxpZCB2LWZvciBleHByZXNzaW9uOiAke2V4cH1gLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFsndi1mb3InXVxuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuXG5cbmZ1bmN0aW9uIHBhcnNlRm9yIChleHApIHtcbiAgY29uc3QgaW5NYXRjaCA9IGV4cC5tYXRjaChmb3JBbGlhc1JFKTtcbiAgaWYgKCFpbk1hdGNoKSByZXR1cm5cbiAgY29uc3QgcmVzID0ge307XG4gIHJlcy5mb3IgPSBpbk1hdGNoWzJdLnRyaW0oKTtcbiAgY29uc3QgYWxpYXMgPSBpbk1hdGNoWzFdLnRyaW0oKS5yZXBsYWNlKHN0cmlwUGFyZW5zUkUsICcnKTtcbiAgY29uc3QgaXRlcmF0b3JNYXRjaCA9IGFsaWFzLm1hdGNoKGZvckl0ZXJhdG9yUkUpO1xuICBpZiAoaXRlcmF0b3JNYXRjaCkge1xuICAgIHJlcy5hbGlhcyA9IGFsaWFzLnJlcGxhY2UoZm9ySXRlcmF0b3JSRSwgJycpLnRyaW0oKTtcbiAgICByZXMuaXRlcmF0b3IxID0gaXRlcmF0b3JNYXRjaFsxXS50cmltKCk7XG4gICAgaWYgKGl0ZXJhdG9yTWF0Y2hbMl0pIHtcbiAgICAgIHJlcy5pdGVyYXRvcjIgPSBpdGVyYXRvck1hdGNoWzJdLnRyaW0oKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmVzLmFsaWFzID0gYWxpYXM7XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBwcm9jZXNzSWYgKGVsKSB7XG4gIGNvbnN0IGV4cCA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWlmJyk7XG4gIGlmIChleHApIHtcbiAgICBlbC5pZiA9IGV4cDtcbiAgICBhZGRJZkNvbmRpdGlvbihlbCwge1xuICAgICAgZXhwOiBleHAsXG4gICAgICBibG9jazogZWxcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtZWxzZScpICE9IG51bGwpIHtcbiAgICAgIGVsLmVsc2UgPSB0cnVlO1xuICAgIH1cbiAgICBjb25zdCBlbHNlaWYgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1lbHNlLWlmJyk7XG4gICAgaWYgKGVsc2VpZikge1xuICAgICAgZWwuZWxzZWlmID0gZWxzZWlmO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBwcm9jZXNzSWZDb25kaXRpb25zIChlbCwgcGFyZW50KSB7XG4gIGNvbnN0IHByZXYgPSBmaW5kUHJldkVsZW1lbnQocGFyZW50LmNoaWxkcmVuKTtcbiAgaWYgKHByZXYgJiYgcHJldi5pZikge1xuICAgIGFkZElmQ29uZGl0aW9uKHByZXYsIHtcbiAgICAgIGV4cDogZWwuZWxzZWlmLFxuICAgICAgYmxvY2s6IGVsXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgd2FybiQyKFxuICAgICAgYHYtJHtlbC5lbHNlaWYgPyAoJ2Vsc2UtaWY9XCInICsgZWwuZWxzZWlmICsgJ1wiJykgOiAnZWxzZSd9IGAgK1xuICAgICAgYHVzZWQgb24gZWxlbWVudCA8JHtlbC50YWd9PiB3aXRob3V0IGNvcnJlc3BvbmRpbmcgdi1pZi5gLFxuICAgICAgZWwucmF3QXR0cnNNYXBbZWwuZWxzZWlmID8gJ3YtZWxzZS1pZicgOiAndi1lbHNlJ11cbiAgICApO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZpbmRQcmV2RWxlbWVudCAoY2hpbGRyZW4pIHtcbiAgbGV0IGkgPSBjaGlsZHJlbi5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICBpZiAoY2hpbGRyZW5baV0udHlwZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGNoaWxkcmVuW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChjaGlsZHJlbltpXS50ZXh0ICE9PSAnICcpIHtcbiAgICAgICAgd2FybiQyKFxuICAgICAgICAgIGB0ZXh0IFwiJHtjaGlsZHJlbltpXS50ZXh0LnRyaW0oKX1cIiBiZXR3ZWVuIHYtaWYgYW5kIHYtZWxzZSgtaWYpIGAgK1xuICAgICAgICAgIGB3aWxsIGJlIGlnbm9yZWQuYCxcbiAgICAgICAgICBjaGlsZHJlbltpXVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgY2hpbGRyZW4ucG9wKCk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGFkZElmQ29uZGl0aW9uIChlbCwgY29uZGl0aW9uKSB7XG4gIGlmICghZWwuaWZDb25kaXRpb25zKSB7XG4gICAgZWwuaWZDb25kaXRpb25zID0gW107XG4gIH1cbiAgZWwuaWZDb25kaXRpb25zLnB1c2goY29uZGl0aW9uKTtcbn1cblxuZnVuY3Rpb24gcHJvY2Vzc09uY2UgKGVsKSB7XG4gIGNvbnN0IG9uY2UkJDEgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1vbmNlJyk7XG4gIGlmIChvbmNlJCQxICE9IG51bGwpIHtcbiAgICBlbC5vbmNlID0gdHJ1ZTtcbiAgfVxufVxuXG4vLyBoYW5kbGUgY29udGVudCBiZWluZyBwYXNzZWQgdG8gYSBjb21wb25lbnQgYXMgc2xvdCxcbi8vIGUuZy4gPHRlbXBsYXRlIHNsb3Q9XCJ4eHhcIj4sIDxkaXYgc2xvdC1zY29wZT1cInh4eFwiPlxuZnVuY3Rpb24gcHJvY2Vzc1Nsb3RDb250ZW50IChlbCkge1xuICBsZXQgc2xvdFNjb3BlO1xuICBpZiAoZWwudGFnID09PSAndGVtcGxhdGUnKSB7XG4gICAgc2xvdFNjb3BlID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3Njb3BlJyk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHNsb3RTY29wZSkge1xuICAgICAgd2FybiQyKFxuICAgICAgICBgdGhlIFwic2NvcGVcIiBhdHRyaWJ1dGUgZm9yIHNjb3BlZCBzbG90cyBoYXZlIGJlZW4gZGVwcmVjYXRlZCBhbmQgYCArXG4gICAgICAgIGByZXBsYWNlZCBieSBcInNsb3Qtc2NvcGVcIiBzaW5jZSAyLjUuIFRoZSBuZXcgXCJzbG90LXNjb3BlXCIgYXR0cmlidXRlIGAgK1xuICAgICAgICBgY2FuIGFsc28gYmUgdXNlZCBvbiBwbGFpbiBlbGVtZW50cyBpbiBhZGRpdGlvbiB0byA8dGVtcGxhdGU+IHRvIGAgK1xuICAgICAgICBgZGVub3RlIHNjb3BlZCBzbG90cy5gLFxuICAgICAgICBlbC5yYXdBdHRyc01hcFsnc2NvcGUnXSxcbiAgICAgICAgdHJ1ZVxuICAgICAgKTtcbiAgICB9XG4gICAgZWwuc2xvdFNjb3BlID0gc2xvdFNjb3BlIHx8IGdldEFuZFJlbW92ZUF0dHIoZWwsICdzbG90LXNjb3BlJyk7XG4gIH0gZWxzZSBpZiAoKHNsb3RTY29wZSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICdzbG90LXNjb3BlJykpKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGVsLmF0dHJzTWFwWyd2LWZvciddKSB7XG4gICAgICB3YXJuJDIoXG4gICAgICAgIGBBbWJpZ3VvdXMgY29tYmluZWQgdXNhZ2Ugb2Ygc2xvdC1zY29wZSBhbmQgdi1mb3Igb24gPCR7ZWwudGFnfT4gYCArXG4gICAgICAgIGAodi1mb3IgdGFrZXMgaGlnaGVyIHByaW9yaXR5KS4gVXNlIGEgd3JhcHBlciA8dGVtcGxhdGU+IGZvciB0aGUgYCArXG4gICAgICAgIGBzY29wZWQgc2xvdCB0byBtYWtlIGl0IGNsZWFyZXIuYCxcbiAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3Nsb3Qtc2NvcGUnXSxcbiAgICAgICAgdHJ1ZVxuICAgICAgKTtcbiAgICB9XG4gICAgZWwuc2xvdFNjb3BlID0gc2xvdFNjb3BlO1xuICB9XG5cbiAgLy8gc2xvdD1cInh4eFwiXG4gIGNvbnN0IHNsb3RUYXJnZXQgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3Nsb3QnKTtcbiAgaWYgKHNsb3RUYXJnZXQpIHtcbiAgICBlbC5zbG90VGFyZ2V0ID0gc2xvdFRhcmdldCA9PT0gJ1wiXCInID8gJ1wiZGVmYXVsdFwiJyA6IHNsb3RUYXJnZXQ7XG4gICAgZWwuc2xvdFRhcmdldER5bmFtaWMgPSAhIShlbC5hdHRyc01hcFsnOnNsb3QnXSB8fCBlbC5hdHRyc01hcFsndi1iaW5kOnNsb3QnXSk7XG4gICAgLy8gcHJlc2VydmUgc2xvdCBhcyBhbiBhdHRyaWJ1dGUgZm9yIG5hdGl2ZSBzaGFkb3cgRE9NIGNvbXBhdFxuICAgIC8vIG9ubHkgZm9yIG5vbi1zY29wZWQgc2xvdHMuXG4gICAgaWYgKGVsLnRhZyAhPT0gJ3RlbXBsYXRlJyAmJiAhZWwuc2xvdFNjb3BlKSB7XG4gICAgICBhZGRBdHRyKGVsLCAnc2xvdCcsIHNsb3RUYXJnZXQsIGdldFJhd0JpbmRpbmdBdHRyKGVsLCAnc2xvdCcpKTtcbiAgICB9XG4gIH1cblxuICAvLyAyLjYgdi1zbG90IHN5bnRheFxuICB7XG4gICAgaWYgKGVsLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgLy8gdi1zbG90IG9uIDx0ZW1wbGF0ZT5cbiAgICAgIGNvbnN0IHNsb3RCaW5kaW5nID0gZ2V0QW5kUmVtb3ZlQXR0ckJ5UmVnZXgoZWwsIHNsb3RSRSk7XG4gICAgICBpZiAoc2xvdEJpbmRpbmcpIHtcbiAgICAgICAge1xuICAgICAgICAgIGlmIChlbC5zbG90VGFyZ2V0IHx8IGVsLnNsb3RTY29wZSkge1xuICAgICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgICBgVW5leHBlY3RlZCBtaXhlZCB1c2FnZSBvZiBkaWZmZXJlbnQgc2xvdCBzeW50YXhlcy5gLFxuICAgICAgICAgICAgICBlbFxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGVsLnBhcmVudCAmJiAhbWF5YmVDb21wb25lbnQoZWwucGFyZW50KSkge1xuICAgICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgICBgPHRlbXBsYXRlIHYtc2xvdD4gY2FuIG9ubHkgYXBwZWFyIGF0IHRoZSByb290IGxldmVsIGluc2lkZSBgICtcbiAgICAgICAgICAgICAgYHRoZSByZWNlaXZpbmcgdGhlIGNvbXBvbmVudGAsXG4gICAgICAgICAgICAgIGVsXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjb25zdCB7IG5hbWUsIGR5bmFtaWMgfSA9IGdldFNsb3ROYW1lKHNsb3RCaW5kaW5nKTtcbiAgICAgICAgZWwuc2xvdFRhcmdldCA9IG5hbWU7XG4gICAgICAgIGVsLnNsb3RUYXJnZXREeW5hbWljID0gZHluYW1pYztcbiAgICAgICAgZWwuc2xvdFNjb3BlID0gc2xvdEJpbmRpbmcudmFsdWUgfHwgZW1wdHlTbG90U2NvcGVUb2tlbjsgLy8gZm9yY2UgaXQgaW50byBhIHNjb3BlZCBzbG90IGZvciBwZXJmXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHYtc2xvdCBvbiBjb21wb25lbnQsIGRlbm90ZXMgZGVmYXVsdCBzbG90XG4gICAgICBjb25zdCBzbG90QmluZGluZyA9IGdldEFuZFJlbW92ZUF0dHJCeVJlZ2V4KGVsLCBzbG90UkUpO1xuICAgICAgaWYgKHNsb3RCaW5kaW5nKSB7XG4gICAgICAgIHtcbiAgICAgICAgICBpZiAoIW1heWJlQ29tcG9uZW50KGVsKSkge1xuICAgICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgICBgdi1zbG90IGNhbiBvbmx5IGJlIHVzZWQgb24gY29tcG9uZW50cyBvciA8dGVtcGxhdGU+LmAsXG4gICAgICAgICAgICAgIHNsb3RCaW5kaW5nXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoZWwuc2xvdFNjb3BlIHx8IGVsLnNsb3RUYXJnZXQpIHtcbiAgICAgICAgICAgIHdhcm4kMihcbiAgICAgICAgICAgICAgYFVuZXhwZWN0ZWQgbWl4ZWQgdXNhZ2Ugb2YgZGlmZmVyZW50IHNsb3Qgc3ludGF4ZXMuYCxcbiAgICAgICAgICAgICAgZWxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChlbC5zY29wZWRTbG90cykge1xuICAgICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgICBgVG8gYXZvaWQgc2NvcGUgYW1iaWd1aXR5LCB0aGUgZGVmYXVsdCBzbG90IHNob3VsZCBhbHNvIHVzZSBgICtcbiAgICAgICAgICAgICAgYDx0ZW1wbGF0ZT4gc3ludGF4IHdoZW4gdGhlcmUgYXJlIG90aGVyIG5hbWVkIHNsb3RzLmAsXG4gICAgICAgICAgICAgIHNsb3RCaW5kaW5nXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICAvLyBhZGQgdGhlIGNvbXBvbmVudCdzIGNoaWxkcmVuIHRvIGl0cyBkZWZhdWx0IHNsb3RcbiAgICAgICAgY29uc3Qgc2xvdHMgPSBlbC5zY29wZWRTbG90cyB8fCAoZWwuc2NvcGVkU2xvdHMgPSB7fSk7XG4gICAgICAgIGNvbnN0IHsgbmFtZSwgZHluYW1pYyB9ID0gZ2V0U2xvdE5hbWUoc2xvdEJpbmRpbmcpO1xuICAgICAgICBjb25zdCBzbG90Q29udGFpbmVyID0gc2xvdHNbbmFtZV0gPSBjcmVhdGVBU1RFbGVtZW50KCd0ZW1wbGF0ZScsIFtdLCBlbCk7XG4gICAgICAgIHNsb3RDb250YWluZXIuc2xvdFRhcmdldCA9IG5hbWU7XG4gICAgICAgIHNsb3RDb250YWluZXIuc2xvdFRhcmdldER5bmFtaWMgPSBkeW5hbWljO1xuICAgICAgICBzbG90Q29udGFpbmVyLmNoaWxkcmVuID0gZWwuY2hpbGRyZW4uZmlsdGVyKChjKSA9PiB7XG4gICAgICAgICAgaWYgKCFjLnNsb3RTY29wZSkge1xuICAgICAgICAgICAgYy5wYXJlbnQgPSBzbG90Q29udGFpbmVyO1xuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBzbG90Q29udGFpbmVyLnNsb3RTY29wZSA9IHNsb3RCaW5kaW5nLnZhbHVlIHx8IGVtcHR5U2xvdFNjb3BlVG9rZW47XG4gICAgICAgIC8vIHJlbW92ZSBjaGlsZHJlbiBhcyB0aGV5IGFyZSByZXR1cm5lZCBmcm9tIHNjb3BlZFNsb3RzIG5vd1xuICAgICAgICBlbC5jaGlsZHJlbiA9IFtdO1xuICAgICAgICAvLyBtYXJrIGVsIG5vbi1wbGFpbiBzbyBkYXRhIGdldHMgZ2VuZXJhdGVkXG4gICAgICAgIGVsLnBsYWluID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGdldFNsb3ROYW1lIChiaW5kaW5nKSB7XG4gIGxldCBuYW1lID0gYmluZGluZy5uYW1lLnJlcGxhY2Uoc2xvdFJFLCAnJyk7XG4gIGlmICghbmFtZSkge1xuICAgIGlmIChiaW5kaW5nLm5hbWVbMF0gIT09ICcjJykge1xuICAgICAgbmFtZSA9ICdkZWZhdWx0JztcbiAgICB9IGVsc2Uge1xuICAgICAgd2FybiQyKFxuICAgICAgICBgdi1zbG90IHNob3J0aGFuZCBzeW50YXggcmVxdWlyZXMgYSBzbG90IG5hbWUuYCxcbiAgICAgICAgYmluZGluZ1xuICAgICAgKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGR5bmFtaWNBcmdSRS50ZXN0KG5hbWUpXG4gICAgLy8gZHluYW1pYyBbbmFtZV1cbiAgICA/IHsgbmFtZTogbmFtZS5zbGljZSgxLCAtMSksIGR5bmFtaWM6IHRydWUgfVxuICAgIC8vIHN0YXRpYyBuYW1lXG4gICAgOiB7IG5hbWU6IGBcIiR7bmFtZX1cImAsIGR5bmFtaWM6IGZhbHNlIH1cbn1cblxuLy8gaGFuZGxlIDxzbG90Lz4gb3V0bGV0c1xuZnVuY3Rpb24gcHJvY2Vzc1Nsb3RPdXRsZXQgKGVsKSB7XG4gIGlmIChlbC50YWcgPT09ICdzbG90Jykge1xuICAgIGVsLnNsb3ROYW1lID0gZ2V0QmluZGluZ0F0dHIoZWwsICduYW1lJyk7XG4gICAgaWYgKGVsLmtleSkge1xuICAgICAgd2FybiQyKFxuICAgICAgICBgXFxga2V5XFxgIGRvZXMgbm90IHdvcmsgb24gPHNsb3Q+IGJlY2F1c2Ugc2xvdHMgYXJlIGFic3RyYWN0IG91dGxldHMgYCArXG4gICAgICAgIGBhbmQgY2FuIHBvc3NpYmx5IGV4cGFuZCBpbnRvIG11bHRpcGxlIGVsZW1lbnRzLiBgICtcbiAgICAgICAgYFVzZSB0aGUga2V5IG9uIGEgd3JhcHBpbmcgZWxlbWVudCBpbnN0ZWFkLmAsXG4gICAgICAgIGdldFJhd0JpbmRpbmdBdHRyKGVsLCAna2V5JylcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NDb21wb25lbnQgKGVsKSB7XG4gIGxldCBiaW5kaW5nO1xuICBpZiAoKGJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ2lzJykpKSB7XG4gICAgZWwuY29tcG9uZW50ID0gYmluZGluZztcbiAgfVxuICBpZiAoZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ2lubGluZS10ZW1wbGF0ZScpICE9IG51bGwpIHtcbiAgICBlbC5pbmxpbmVUZW1wbGF0ZSA9IHRydWU7XG4gIH1cbn1cblxuZnVuY3Rpb24gcHJvY2Vzc0F0dHJzIChlbCkge1xuICBjb25zdCBsaXN0ID0gZWwuYXR0cnNMaXN0O1xuICBsZXQgaSwgbCwgbmFtZSwgcmF3TmFtZSwgdmFsdWUsIG1vZGlmaWVycywgc3luY0dlbiwgaXNEeW5hbWljO1xuICBmb3IgKGkgPSAwLCBsID0gbGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBuYW1lID0gcmF3TmFtZSA9IGxpc3RbaV0ubmFtZTtcbiAgICB2YWx1ZSA9IGxpc3RbaV0udmFsdWU7XG4gICAgaWYgKGRpclJFLnRlc3QobmFtZSkpIHtcbiAgICAgIC8vIG1hcmsgZWxlbWVudCBhcyBkeW5hbWljXG4gICAgICBlbC5oYXNCaW5kaW5ncyA9IHRydWU7XG4gICAgICAvLyBtb2RpZmllcnNcbiAgICAgIG1vZGlmaWVycyA9IHBhcnNlTW9kaWZpZXJzKG5hbWUucmVwbGFjZShkaXJSRSwgJycpKTtcbiAgICAgIC8vIHN1cHBvcnQgLmZvbyBzaG9ydGhhbmQgc3ludGF4IGZvciB0aGUgLnByb3AgbW9kaWZpZXJcbiAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShtb2RpZmllclJFLCAnJyk7XG4gICAgICB9XG4gICAgICBpZiAoYmluZFJFLnRlc3QobmFtZSkpIHsgLy8gdi1iaW5kXG4gICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoYmluZFJFLCAnJyk7XG4gICAgICAgIHZhbHVlID0gcGFyc2VGaWx0ZXJzKHZhbHVlKTtcbiAgICAgICAgaXNEeW5hbWljID0gZHluYW1pY0FyZ1JFLnRlc3QobmFtZSk7XG4gICAgICAgIGlmIChpc0R5bmFtaWMpIHtcbiAgICAgICAgICBuYW1lID0gbmFtZS5zbGljZSgxLCAtMSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHZhbHVlLnRyaW0oKS5sZW5ndGggPT09IDBcbiAgICAgICAgKSB7XG4gICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgYFRoZSB2YWx1ZSBmb3IgYSB2LWJpbmQgZXhwcmVzc2lvbiBjYW5ub3QgYmUgZW1wdHkuIEZvdW5kIGluIFwidi1iaW5kOiR7bmFtZX1cImBcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgICBpZiAobW9kaWZpZXJzLnByb3AgJiYgIWlzRHluYW1pYykge1xuICAgICAgICAgICAgbmFtZSA9IGNhbWVsaXplKG5hbWUpO1xuICAgICAgICAgICAgaWYgKG5hbWUgPT09ICdpbm5lckh0bWwnKSBuYW1lID0gJ2lubmVySFRNTCc7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChtb2RpZmllcnMuY2FtZWwgJiYgIWlzRHluYW1pYykge1xuICAgICAgICAgICAgbmFtZSA9IGNhbWVsaXplKG5hbWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobW9kaWZpZXJzLnN5bmMpIHtcbiAgICAgICAgICAgIHN5bmNHZW4gPSBnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgYCRldmVudGApO1xuICAgICAgICAgICAgaWYgKCFpc0R5bmFtaWMpIHtcbiAgICAgICAgICAgICAgYWRkSGFuZGxlcihcbiAgICAgICAgICAgICAgICBlbCxcbiAgICAgICAgICAgICAgICBgdXBkYXRlOiR7Y2FtZWxpemUobmFtZSl9YCxcbiAgICAgICAgICAgICAgICBzeW5jR2VuLFxuICAgICAgICAgICAgICAgIG51bGwsXG4gICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgd2FybiQyLFxuICAgICAgICAgICAgICAgIGxpc3RbaV1cbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgaWYgKGh5cGhlbmF0ZShuYW1lKSAhPT0gY2FtZWxpemUobmFtZSkpIHtcbiAgICAgICAgICAgICAgICBhZGRIYW5kbGVyKFxuICAgICAgICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICAgICAgICBgdXBkYXRlOiR7aHlwaGVuYXRlKG5hbWUpfWAsXG4gICAgICAgICAgICAgICAgICBzeW5jR2VuLFxuICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgICAgd2FybiQyLFxuICAgICAgICAgICAgICAgICAgbGlzdFtpXVxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIGhhbmRsZXIgdy8gZHluYW1pYyBldmVudCBuYW1lXG4gICAgICAgICAgICAgIGFkZEhhbmRsZXIoXG4gICAgICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICAgICAgYFwidXBkYXRlOlwiKygke25hbWV9KWAsXG4gICAgICAgICAgICAgICAgc3luY0dlbixcbiAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgIGZhbHNlLFxuICAgICAgICAgICAgICAgIHdhcm4kMixcbiAgICAgICAgICAgICAgICBsaXN0W2ldLFxuICAgICAgICAgICAgICAgIHRydWUgLy8gZHluYW1pY1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoKG1vZGlmaWVycyAmJiBtb2RpZmllcnMucHJvcCkgfHwgKFxuICAgICAgICAgICFlbC5jb21wb25lbnQgJiYgcGxhdGZvcm1NdXN0VXNlUHJvcChlbC50YWcsIGVsLmF0dHJzTWFwLnR5cGUsIG5hbWUpXG4gICAgICAgICkpIHtcbiAgICAgICAgICBhZGRQcm9wKGVsLCBuYW1lLCB2YWx1ZSwgbGlzdFtpXSwgaXNEeW5hbWljKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhZGRBdHRyKGVsLCBuYW1lLCB2YWx1ZSwgbGlzdFtpXSwgaXNEeW5hbWljKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChvblJFLnRlc3QobmFtZSkpIHsgLy8gdi1vblxuICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKG9uUkUsICcnKTtcbiAgICAgICAgaXNEeW5hbWljID0gZHluYW1pY0FyZ1JFLnRlc3QobmFtZSk7XG4gICAgICAgIGlmIChpc0R5bmFtaWMpIHtcbiAgICAgICAgICBuYW1lID0gbmFtZS5zbGljZSgxLCAtMSk7XG4gICAgICAgIH1cbiAgICAgICAgYWRkSGFuZGxlcihlbCwgbmFtZSwgdmFsdWUsIG1vZGlmaWVycywgZmFsc2UsIHdhcm4kMiwgbGlzdFtpXSwgaXNEeW5hbWljKTtcbiAgICAgIH0gZWxzZSB7IC8vIG5vcm1hbCBkaXJlY3RpdmVzXG4gICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoZGlyUkUsICcnKTtcbiAgICAgICAgLy8gcGFyc2UgYXJnXG4gICAgICAgIGNvbnN0IGFyZ01hdGNoID0gbmFtZS5tYXRjaChhcmdSRSk7XG4gICAgICAgIGxldCBhcmcgPSBhcmdNYXRjaCAmJiBhcmdNYXRjaFsxXTtcbiAgICAgICAgaXNEeW5hbWljID0gZmFsc2U7XG4gICAgICAgIGlmIChhcmcpIHtcbiAgICAgICAgICBuYW1lID0gbmFtZS5zbGljZSgwLCAtKGFyZy5sZW5ndGggKyAxKSk7XG4gICAgICAgICAgaWYgKGR5bmFtaWNBcmdSRS50ZXN0KGFyZykpIHtcbiAgICAgICAgICAgIGFyZyA9IGFyZy5zbGljZSgxLCAtMSk7XG4gICAgICAgICAgICBpc0R5bmFtaWMgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBhZGREaXJlY3RpdmUoZWwsIG5hbWUsIHJhd05hbWUsIHZhbHVlLCBhcmcsIGlzRHluYW1pYywgbW9kaWZpZXJzLCBsaXN0W2ldKTtcbiAgICAgICAgaWYgKG5hbWUgPT09ICdtb2RlbCcpIHtcbiAgICAgICAgICBjaGVja0ZvckFsaWFzTW9kZWwoZWwsIHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBsaXRlcmFsIGF0dHJpYnV0ZVxuICAgICAge1xuICAgICAgICBjb25zdCByZXMgPSBwYXJzZVRleHQodmFsdWUsIGRlbGltaXRlcnMpO1xuICAgICAgICBpZiAocmVzKSB7XG4gICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgYCR7bmFtZX09XCIke3ZhbHVlfVwiOiBgICtcbiAgICAgICAgICAgICdJbnRlcnBvbGF0aW9uIGluc2lkZSBhdHRyaWJ1dGVzIGhhcyBiZWVuIHJlbW92ZWQuICcgK1xuICAgICAgICAgICAgJ1VzZSB2LWJpbmQgb3IgdGhlIGNvbG9uIHNob3J0aGFuZCBpbnN0ZWFkLiBGb3IgZXhhbXBsZSwgJyArXG4gICAgICAgICAgICAnaW5zdGVhZCBvZiA8ZGl2IGlkPVwie3sgdmFsIH19XCI+LCB1c2UgPGRpdiA6aWQ9XCJ2YWxcIj4uJyxcbiAgICAgICAgICAgIGxpc3RbaV1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBhZGRBdHRyKGVsLCBuYW1lLCBKU09OLnN0cmluZ2lmeSh2YWx1ZSksIGxpc3RbaV0pO1xuICAgICAgLy8gIzY4ODcgZmlyZWZveCBkb2Vzbid0IHVwZGF0ZSBtdXRlZCBzdGF0ZSBpZiBzZXQgdmlhIGF0dHJpYnV0ZVxuICAgICAgLy8gZXZlbiBpbW1lZGlhdGVseSBhZnRlciBlbGVtZW50IGNyZWF0aW9uXG4gICAgICBpZiAoIWVsLmNvbXBvbmVudCAmJlxuICAgICAgICAgIG5hbWUgPT09ICdtdXRlZCcgJiZcbiAgICAgICAgICBwbGF0Zm9ybU11c3RVc2VQcm9wKGVsLnRhZywgZWwuYXR0cnNNYXAudHlwZSwgbmFtZSkpIHtcbiAgICAgICAgYWRkUHJvcChlbCwgbmFtZSwgJ3RydWUnLCBsaXN0W2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tJbkZvciAoZWwpIHtcbiAgbGV0IHBhcmVudCA9IGVsO1xuICB3aGlsZSAocGFyZW50KSB7XG4gICAgaWYgKHBhcmVudC5mb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgfVxuICByZXR1cm4gZmFsc2Vcbn1cblxuZnVuY3Rpb24gcGFyc2VNb2RpZmllcnMgKG5hbWUpIHtcbiAgY29uc3QgbWF0Y2ggPSBuYW1lLm1hdGNoKG1vZGlmaWVyUkUpO1xuICBpZiAobWF0Y2gpIHtcbiAgICBjb25zdCByZXQgPSB7fTtcbiAgICBtYXRjaC5mb3JFYWNoKG0gPT4geyByZXRbbS5zbGljZSgxKV0gPSB0cnVlOyB9KTtcbiAgICByZXR1cm4gcmV0XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFrZUF0dHJzTWFwIChhdHRycykge1xuICBjb25zdCBtYXAgPSB7fTtcbiAgZm9yIChsZXQgaSA9IDAsIGwgPSBhdHRycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBpZiAoXG4gICAgICBtYXBbYXR0cnNbaV0ubmFtZV0gJiYgIWlzSUUgJiYgIWlzRWRnZVxuICAgICkge1xuICAgICAgd2FybiQyKCdkdXBsaWNhdGUgYXR0cmlidXRlOiAnICsgYXR0cnNbaV0ubmFtZSwgYXR0cnNbaV0pO1xuICAgIH1cbiAgICBtYXBbYXR0cnNbaV0ubmFtZV0gPSBhdHRyc1tpXS52YWx1ZTtcbiAgfVxuICByZXR1cm4gbWFwXG59XG5cbi8vIGZvciBzY3JpcHQgKGUuZy4gdHlwZT1cIngvdGVtcGxhdGVcIikgb3Igc3R5bGUsIGRvIG5vdCBkZWNvZGUgY29udGVudFxuZnVuY3Rpb24gaXNUZXh0VGFnIChlbCkge1xuICByZXR1cm4gZWwudGFnID09PSAnc2NyaXB0JyB8fCBlbC50YWcgPT09ICdzdHlsZSdcbn1cblxuZnVuY3Rpb24gaXNGb3JiaWRkZW5UYWcgKGVsKSB7XG4gIHJldHVybiAoXG4gICAgZWwudGFnID09PSAnc3R5bGUnIHx8XG4gICAgKGVsLnRhZyA9PT0gJ3NjcmlwdCcgJiYgKFxuICAgICAgIWVsLmF0dHJzTWFwLnR5cGUgfHxcbiAgICAgIGVsLmF0dHJzTWFwLnR5cGUgPT09ICd0ZXh0L2phdmFzY3JpcHQnXG4gICAgKSlcbiAgKVxufVxuXG5jb25zdCBpZU5TQnVnID0gL154bWxuczpOU1xcZCsvO1xuY29uc3QgaWVOU1ByZWZpeCA9IC9eTlNcXGQrOi87XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG5mdW5jdGlvbiBndWFyZElFU1ZHQnVnIChhdHRycykge1xuICBjb25zdCByZXMgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdHRycy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGF0dHIgPSBhdHRyc1tpXTtcbiAgICBpZiAoIWllTlNCdWcudGVzdChhdHRyLm5hbWUpKSB7XG4gICAgICBhdHRyLm5hbWUgPSBhdHRyLm5hbWUucmVwbGFjZShpZU5TUHJlZml4LCAnJyk7XG4gICAgICByZXMucHVzaChhdHRyKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5mdW5jdGlvbiBjaGVja0ZvckFsaWFzTW9kZWwgKGVsLCB2YWx1ZSkge1xuICBsZXQgX2VsID0gZWw7XG4gIHdoaWxlIChfZWwpIHtcbiAgICBpZiAoX2VsLmZvciAmJiBfZWwuYWxpYXMgPT09IHZhbHVlKSB7XG4gICAgICB3YXJuJDIoXG4gICAgICAgIGA8JHtlbC50YWd9IHYtbW9kZWw9XCIke3ZhbHVlfVwiPjogYCArXG4gICAgICAgIGBZb3UgYXJlIGJpbmRpbmcgdi1tb2RlbCBkaXJlY3RseSB0byBhIHYtZm9yIGl0ZXJhdGlvbiBhbGlhcy4gYCArXG4gICAgICAgIGBUaGlzIHdpbGwgbm90IGJlIGFibGUgdG8gbW9kaWZ5IHRoZSB2LWZvciBzb3VyY2UgYXJyYXkgYmVjYXVzZSBgICtcbiAgICAgICAgYHdyaXRpbmcgdG8gdGhlIGFsaWFzIGlzIGxpa2UgbW9kaWZ5aW5nIGEgZnVuY3Rpb24gbG9jYWwgdmFyaWFibGUuIGAgK1xuICAgICAgICBgQ29uc2lkZXIgdXNpbmcgYW4gYXJyYXkgb2Ygb2JqZWN0cyBhbmQgdXNlIHYtbW9kZWwgb24gYW4gb2JqZWN0IHByb3BlcnR5IGluc3RlYWQuYCxcbiAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3YtbW9kZWwnXVxuICAgICAgKTtcbiAgICB9XG4gICAgX2VsID0gX2VsLnBhcmVudDtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gcHJlVHJhbnNmb3JtTm9kZSAoZWwsIG9wdGlvbnMpIHtcbiAgaWYgKGVsLnRhZyA9PT0gJ2lucHV0Jykge1xuICAgIGNvbnN0IG1hcCA9IGVsLmF0dHJzTWFwO1xuICAgIGlmICghbWFwWyd2LW1vZGVsJ10pIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIGxldCB0eXBlQmluZGluZztcbiAgICBpZiAobWFwWyc6dHlwZSddIHx8IG1hcFsndi1iaW5kOnR5cGUnXSkge1xuICAgICAgdHlwZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3R5cGUnKTtcbiAgICB9XG4gICAgaWYgKCFtYXAudHlwZSAmJiAhdHlwZUJpbmRpbmcgJiYgbWFwWyd2LWJpbmQnXSkge1xuICAgICAgdHlwZUJpbmRpbmcgPSBgKCR7bWFwWyd2LWJpbmQnXX0pLnR5cGVgO1xuICAgIH1cblxuICAgIGlmICh0eXBlQmluZGluZykge1xuICAgICAgY29uc3QgaWZDb25kaXRpb24gPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1pZicsIHRydWUpO1xuICAgICAgY29uc3QgaWZDb25kaXRpb25FeHRyYSA9IGlmQ29uZGl0aW9uID8gYCYmKCR7aWZDb25kaXRpb259KWAgOiBgYDtcbiAgICAgIGNvbnN0IGhhc0Vsc2UgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1lbHNlJywgdHJ1ZSkgIT0gbnVsbDtcbiAgICAgIGNvbnN0IGVsc2VJZkNvbmRpdGlvbiA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LWVsc2UtaWYnLCB0cnVlKTtcbiAgICAgIC8vIDEuIGNoZWNrYm94XG4gICAgICBjb25zdCBicmFuY2gwID0gY2xvbmVBU1RFbGVtZW50KGVsKTtcbiAgICAgIC8vIHByb2Nlc3MgZm9yIG9uIHRoZSBtYWluIG5vZGVcbiAgICAgIHByb2Nlc3NGb3IoYnJhbmNoMCk7XG4gICAgICBhZGRSYXdBdHRyKGJyYW5jaDAsICd0eXBlJywgJ2NoZWNrYm94Jyk7XG4gICAgICBwcm9jZXNzRWxlbWVudChicmFuY2gwLCBvcHRpb25zKTtcbiAgICAgIGJyYW5jaDAucHJvY2Vzc2VkID0gdHJ1ZTsgLy8gcHJldmVudCBpdCBmcm9tIGRvdWJsZS1wcm9jZXNzZWRcbiAgICAgIGJyYW5jaDAuaWYgPSBgKCR7dHlwZUJpbmRpbmd9KT09PSdjaGVja2JveCdgICsgaWZDb25kaXRpb25FeHRyYTtcbiAgICAgIGFkZElmQ29uZGl0aW9uKGJyYW5jaDAsIHtcbiAgICAgICAgZXhwOiBicmFuY2gwLmlmLFxuICAgICAgICBibG9jazogYnJhbmNoMFxuICAgICAgfSk7XG4gICAgICAvLyAyLiBhZGQgcmFkaW8gZWxzZS1pZiBjb25kaXRpb25cbiAgICAgIGNvbnN0IGJyYW5jaDEgPSBjbG9uZUFTVEVsZW1lbnQoZWwpO1xuICAgICAgZ2V0QW5kUmVtb3ZlQXR0cihicmFuY2gxLCAndi1mb3InLCB0cnVlKTtcbiAgICAgIGFkZFJhd0F0dHIoYnJhbmNoMSwgJ3R5cGUnLCAncmFkaW8nKTtcbiAgICAgIHByb2Nlc3NFbGVtZW50KGJyYW5jaDEsIG9wdGlvbnMpO1xuICAgICAgYWRkSWZDb25kaXRpb24oYnJhbmNoMCwge1xuICAgICAgICBleHA6IGAoJHt0eXBlQmluZGluZ30pPT09J3JhZGlvJ2AgKyBpZkNvbmRpdGlvbkV4dHJhLFxuICAgICAgICBibG9jazogYnJhbmNoMVxuICAgICAgfSk7XG4gICAgICAvLyAzLiBvdGhlclxuICAgICAgY29uc3QgYnJhbmNoMiA9IGNsb25lQVNURWxlbWVudChlbCk7XG4gICAgICBnZXRBbmRSZW1vdmVBdHRyKGJyYW5jaDIsICd2LWZvcicsIHRydWUpO1xuICAgICAgYWRkUmF3QXR0cihicmFuY2gyLCAnOnR5cGUnLCB0eXBlQmluZGluZyk7XG4gICAgICBwcm9jZXNzRWxlbWVudChicmFuY2gyLCBvcHRpb25zKTtcbiAgICAgIGFkZElmQ29uZGl0aW9uKGJyYW5jaDAsIHtcbiAgICAgICAgZXhwOiBpZkNvbmRpdGlvbixcbiAgICAgICAgYmxvY2s6IGJyYW5jaDJcbiAgICAgIH0pO1xuXG4gICAgICBpZiAoaGFzRWxzZSkge1xuICAgICAgICBicmFuY2gwLmVsc2UgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChlbHNlSWZDb25kaXRpb24pIHtcbiAgICAgICAgYnJhbmNoMC5lbHNlaWYgPSBlbHNlSWZDb25kaXRpb247XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBicmFuY2gwXG4gICAgfVxuICB9XG59XG5cbmZ1bmN0aW9uIGNsb25lQVNURWxlbWVudCAoZWwpIHtcbiAgcmV0dXJuIGNyZWF0ZUFTVEVsZW1lbnQoZWwudGFnLCBlbC5hdHRyc0xpc3Quc2xpY2UoKSwgZWwucGFyZW50KVxufVxuXG52YXIgbW9kZWwkMSA9IHtcbiAgcHJlVHJhbnNmb3JtTm9kZVxufTtcblxudmFyIG1vZHVsZXMkMSA9IFtcbiAga2xhc3MkMSxcbiAgc3R5bGUkMSxcbiAgbW9kZWwkMVxuXTtcblxuLyogICovXG5cbmZ1bmN0aW9uIHRleHQgKGVsLCBkaXIpIHtcbiAgaWYgKGRpci52YWx1ZSkge1xuICAgIGFkZFByb3AoZWwsICd0ZXh0Q29udGVudCcsIGBfcygke2Rpci52YWx1ZX0pYCwgZGlyKTtcbiAgfVxufVxuXG4vKiAgKi9cblxuZnVuY3Rpb24gaHRtbCAoZWwsIGRpcikge1xuICBpZiAoZGlyLnZhbHVlKSB7XG4gICAgYWRkUHJvcChlbCwgJ2lubmVySFRNTCcsIGBfcygke2Rpci52YWx1ZX0pYCwgZGlyKTtcbiAgfVxufVxuXG52YXIgZGlyZWN0aXZlcyQxID0ge1xuICBtb2RlbCxcbiAgdGV4dCxcbiAgaHRtbFxufTtcblxuLyogICovXG5cbmNvbnN0IGJhc2VPcHRpb25zID0ge1xuICBleHBlY3RIVE1MOiB0cnVlLFxuICBtb2R1bGVzOiBtb2R1bGVzJDEsXG4gIGRpcmVjdGl2ZXM6IGRpcmVjdGl2ZXMkMSxcbiAgaXNQcmVUYWcsXG4gIGlzVW5hcnlUYWcsXG4gIG11c3RVc2VQcm9wLFxuICBjYW5CZUxlZnRPcGVuVGFnLFxuICBpc1Jlc2VydmVkVGFnLFxuICBnZXRUYWdOYW1lc3BhY2UsXG4gIHN0YXRpY0tleXM6IGdlblN0YXRpY0tleXMobW9kdWxlcyQxKVxufTtcblxuLyogICovXG5cbmxldCBpc1N0YXRpY0tleTtcbmxldCBpc1BsYXRmb3JtUmVzZXJ2ZWRUYWc7XG5cbmNvbnN0IGdlblN0YXRpY0tleXNDYWNoZWQgPSBjYWNoZWQoZ2VuU3RhdGljS2V5cyQxKTtcblxuLyoqXG4gKiBHb2FsIG9mIHRoZSBvcHRpbWl6ZXI6IHdhbGsgdGhlIGdlbmVyYXRlZCB0ZW1wbGF0ZSBBU1QgdHJlZVxuICogYW5kIGRldGVjdCBzdWItdHJlZXMgdGhhdCBhcmUgcHVyZWx5IHN0YXRpYywgaS5lLiBwYXJ0cyBvZlxuICogdGhlIERPTSB0aGF0IG5ldmVyIG5lZWRzIHRvIGNoYW5nZS5cbiAqXG4gKiBPbmNlIHdlIGRldGVjdCB0aGVzZSBzdWItdHJlZXMsIHdlIGNhbjpcbiAqXG4gKiAxLiBIb2lzdCB0aGVtIGludG8gY29uc3RhbnRzLCBzbyB0aGF0IHdlIG5vIGxvbmdlciBuZWVkIHRvXG4gKiAgICBjcmVhdGUgZnJlc2ggbm9kZXMgZm9yIHRoZW0gb24gZWFjaCByZS1yZW5kZXI7XG4gKiAyLiBDb21wbGV0ZWx5IHNraXAgdGhlbSBpbiB0aGUgcGF0Y2hpbmcgcHJvY2Vzcy5cbiAqL1xuZnVuY3Rpb24gb3B0aW1pemUgKHJvb3QsIG9wdGlvbnMpIHtcbiAgaWYgKCFyb290KSByZXR1cm5cbiAgaXNTdGF0aWNLZXkgPSBnZW5TdGF0aWNLZXlzQ2FjaGVkKG9wdGlvbnMuc3RhdGljS2V5cyB8fCAnJyk7XG4gIGlzUGxhdGZvcm1SZXNlcnZlZFRhZyA9IG9wdGlvbnMuaXNSZXNlcnZlZFRhZyB8fCBubztcbiAgLy8gZmlyc3QgcGFzczogbWFyayBhbGwgbm9uLXN0YXRpYyBub2Rlcy5cbiAgbWFya1N0YXRpYyQxKHJvb3QpO1xuICAvLyBzZWNvbmQgcGFzczogbWFyayBzdGF0aWMgcm9vdHMuXG4gIG1hcmtTdGF0aWNSb290cyhyb290LCBmYWxzZSk7XG59XG5cbmZ1bmN0aW9uIGdlblN0YXRpY0tleXMkMSAoa2V5cykge1xuICByZXR1cm4gbWFrZU1hcChcbiAgICAndHlwZSx0YWcsYXR0cnNMaXN0LGF0dHJzTWFwLHBsYWluLHBhcmVudCxjaGlsZHJlbixhdHRycyxzdGFydCxlbmQscmF3QXR0cnNNYXAnICtcbiAgICAoa2V5cyA/ICcsJyArIGtleXMgOiAnJylcbiAgKVxufVxuXG5mdW5jdGlvbiBtYXJrU3RhdGljJDEgKG5vZGUpIHtcbiAgbm9kZS5zdGF0aWMgPSBpc1N0YXRpYyhub2RlKTtcbiAgaWYgKG5vZGUudHlwZSA9PT0gMSkge1xuICAgIC8vIGRvIG5vdCBtYWtlIGNvbXBvbmVudCBzbG90IGNvbnRlbnQgc3RhdGljLiB0aGlzIGF2b2lkc1xuICAgIC8vIDEuIGNvbXBvbmVudHMgbm90IGFibGUgdG8gbXV0YXRlIHNsb3Qgbm9kZXNcbiAgICAvLyAyLiBzdGF0aWMgc2xvdCBjb250ZW50IGZhaWxzIGZvciBob3QtcmVsb2FkaW5nXG4gICAgaWYgKFxuICAgICAgIWlzUGxhdGZvcm1SZXNlcnZlZFRhZyhub2RlLnRhZykgJiZcbiAgICAgIG5vZGUudGFnICE9PSAnc2xvdCcgJiZcbiAgICAgIG5vZGUuYXR0cnNNYXBbJ2lubGluZS10ZW1wbGF0ZSddID09IG51bGxcbiAgICApIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMCwgbCA9IG5vZGUuY2hpbGRyZW4ubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBjb25zdCBjaGlsZCA9IG5vZGUuY2hpbGRyZW5baV07XG4gICAgICBtYXJrU3RhdGljJDEoY2hpbGQpO1xuICAgICAgaWYgKCFjaGlsZC5zdGF0aWMpIHtcbiAgICAgICAgbm9kZS5zdGF0aWMgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5vZGUuaWZDb25kaXRpb25zKSB7XG4gICAgICBmb3IgKGxldCBpID0gMSwgbCA9IG5vZGUuaWZDb25kaXRpb25zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBjb25zdCBibG9jayA9IG5vZGUuaWZDb25kaXRpb25zW2ldLmJsb2NrO1xuICAgICAgICBtYXJrU3RhdGljJDEoYmxvY2spO1xuICAgICAgICBpZiAoIWJsb2NrLnN0YXRpYykge1xuICAgICAgICAgIG5vZGUuc3RhdGljID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gbWFya1N0YXRpY1Jvb3RzIChub2RlLCBpc0luRm9yKSB7XG4gIGlmIChub2RlLnR5cGUgPT09IDEpIHtcbiAgICBpZiAobm9kZS5zdGF0aWMgfHwgbm9kZS5vbmNlKSB7XG4gICAgICBub2RlLnN0YXRpY0luRm9yID0gaXNJbkZvcjtcbiAgICB9XG4gICAgLy8gRm9yIGEgbm9kZSB0byBxdWFsaWZ5IGFzIGEgc3RhdGljIHJvb3QsIGl0IHNob3VsZCBoYXZlIGNoaWxkcmVuIHRoYXRcbiAgICAvLyBhcmUgbm90IGp1c3Qgc3RhdGljIHRleHQuIE90aGVyd2lzZSB0aGUgY29zdCBvZiBob2lzdGluZyBvdXQgd2lsbFxuICAgIC8vIG91dHdlaWdoIHRoZSBiZW5lZml0cyBhbmQgaXQncyBiZXR0ZXIgb2ZmIHRvIGp1c3QgYWx3YXlzIHJlbmRlciBpdCBmcmVzaC5cbiAgICBpZiAobm9kZS5zdGF0aWMgJiYgbm9kZS5jaGlsZHJlbi5sZW5ndGggJiYgIShcbiAgICAgIG5vZGUuY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmXG4gICAgICBub2RlLmNoaWxkcmVuWzBdLnR5cGUgPT09IDNcbiAgICApKSB7XG4gICAgICBub2RlLnN0YXRpY1Jvb3QgPSB0cnVlO1xuICAgICAgcmV0dXJuXG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGUuc3RhdGljUm9vdCA9IGZhbHNlO1xuICAgIH1cbiAgICBpZiAobm9kZS5jaGlsZHJlbikge1xuICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBtYXJrU3RhdGljUm9vdHMobm9kZS5jaGlsZHJlbltpXSwgaXNJbkZvciB8fCAhIW5vZGUuZm9yKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5vZGUuaWZDb25kaXRpb25zKSB7XG4gICAgICBmb3IgKGxldCBpID0gMSwgbCA9IG5vZGUuaWZDb25kaXRpb25zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICBtYXJrU3RhdGljUm9vdHMobm9kZS5pZkNvbmRpdGlvbnNbaV0uYmxvY2ssIGlzSW5Gb3IpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc1N0YXRpYyAobm9kZSkge1xuICBpZiAobm9kZS50eXBlID09PSAyKSB7IC8vIGV4cHJlc3Npb25cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuICBpZiAobm9kZS50eXBlID09PSAzKSB7IC8vIHRleHRcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG4gIHJldHVybiAhIShub2RlLnByZSB8fCAoXG4gICAgIW5vZGUuaGFzQmluZGluZ3MgJiYgLy8gbm8gZHluYW1pYyBiaW5kaW5nc1xuICAgICFub2RlLmlmICYmICFub2RlLmZvciAmJiAvLyBub3Qgdi1pZiBvciB2LWZvciBvciB2LWVsc2VcbiAgICAhaXNCdWlsdEluVGFnKG5vZGUudGFnKSAmJiAvLyBub3QgYSBidWlsdC1pblxuICAgIGlzUGxhdGZvcm1SZXNlcnZlZFRhZyhub2RlLnRhZykgJiYgLy8gbm90IGEgY29tcG9uZW50XG4gICAgIWlzRGlyZWN0Q2hpbGRPZlRlbXBsYXRlRm9yKG5vZGUpICYmXG4gICAgT2JqZWN0LmtleXMobm9kZSkuZXZlcnkoaXNTdGF0aWNLZXkpXG4gICkpXG59XG5cbmZ1bmN0aW9uIGlzRGlyZWN0Q2hpbGRPZlRlbXBsYXRlRm9yIChub2RlKSB7XG4gIHdoaWxlIChub2RlLnBhcmVudCkge1xuICAgIG5vZGUgPSBub2RlLnBhcmVudDtcbiAgICBpZiAobm9kZS50YWcgIT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBpZiAobm9kZS5mb3IpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZVxufVxuXG4vKiAgKi9cblxuY29uc3QgZm5FeHBSRSA9IC9eKFtcXHckX10rfFxcKFteKV0qP1xcKSlcXHMqPT58XmZ1bmN0aW9uXFxzKlxcKC87XG5jb25zdCBmbkludm9rZVJFID0gL1xcKFteKV0qP1xcKTsqJC87XG5jb25zdCBzaW1wbGVQYXRoUkUgPSAvXltBLVphLXpfJF1bXFx3JF0qKD86XFwuW0EtWmEtel8kXVtcXHckXSp8XFxbJ1teJ10qPyddfFxcW1wiW15cIl0qP1wiXXxcXFtcXGQrXXxcXFtbQS1aYS16XyRdW1xcdyRdKl0pKiQvO1xuXG4vLyBLZXlib2FyZEV2ZW50LmtleUNvZGUgYWxpYXNlc1xuY29uc3Qga2V5Q29kZXMgPSB7XG4gIGVzYzogMjcsXG4gIHRhYjogOSxcbiAgZW50ZXI6IDEzLFxuICBzcGFjZTogMzIsXG4gIHVwOiAzOCxcbiAgbGVmdDogMzcsXG4gIHJpZ2h0OiAzOSxcbiAgZG93bjogNDAsXG4gICdkZWxldGUnOiBbOCwgNDZdXG59O1xuXG4vLyBLZXlib2FyZEV2ZW50LmtleSBhbGlhc2VzXG5jb25zdCBrZXlOYW1lcyA9IHtcbiAgLy8gIzc4ODA6IElFMTEgYW5kIEVkZ2UgdXNlIGBFc2NgIGZvciBFc2NhcGUga2V5IG5hbWUuXG4gIGVzYzogWydFc2MnLCAnRXNjYXBlJ10sXG4gIHRhYjogJ1RhYicsXG4gIGVudGVyOiAnRW50ZXInLFxuICAvLyAjOTExMjogSUUxMSB1c2VzIGBTcGFjZWJhcmAgZm9yIFNwYWNlIGtleSBuYW1lLlxuICBzcGFjZTogWycgJywgJ1NwYWNlYmFyJ10sXG4gIC8vICM3ODA2OiBJRTExIHVzZXMga2V5IG5hbWVzIHdpdGhvdXQgYEFycm93YCBwcmVmaXggZm9yIGFycm93IGtleXMuXG4gIHVwOiBbJ1VwJywgJ0Fycm93VXAnXSxcbiAgbGVmdDogWydMZWZ0JywgJ0Fycm93TGVmdCddLFxuICByaWdodDogWydSaWdodCcsICdBcnJvd1JpZ2h0J10sXG4gIGRvd246IFsnRG93bicsICdBcnJvd0Rvd24nXSxcbiAgLy8gIzkxMTI6IElFMTEgdXNlcyBgRGVsYCBmb3IgRGVsZXRlIGtleSBuYW1lLlxuICAnZGVsZXRlJzogWydCYWNrc3BhY2UnLCAnRGVsZXRlJywgJ0RlbCddXG59O1xuXG4vLyAjNDg2ODogbW9kaWZpZXJzIHRoYXQgcHJldmVudCB0aGUgZXhlY3V0aW9uIG9mIHRoZSBsaXN0ZW5lclxuLy8gbmVlZCB0byBleHBsaWNpdGx5IHJldHVybiBudWxsIHNvIHRoYXQgd2UgY2FuIGRldGVybWluZSB3aGV0aGVyIHRvIHJlbW92ZVxuLy8gdGhlIGxpc3RlbmVyIGZvciAub25jZVxuY29uc3QgZ2VuR3VhcmQgPSBjb25kaXRpb24gPT4gYGlmKCR7Y29uZGl0aW9ufSlyZXR1cm4gbnVsbDtgO1xuXG5jb25zdCBtb2RpZmllckNvZGUgPSB7XG4gIHN0b3A6ICckZXZlbnQuc3RvcFByb3BhZ2F0aW9uKCk7JyxcbiAgcHJldmVudDogJyRldmVudC5wcmV2ZW50RGVmYXVsdCgpOycsXG4gIHNlbGY6IGdlbkd1YXJkKGAkZXZlbnQudGFyZ2V0ICE9PSAkZXZlbnQuY3VycmVudFRhcmdldGApLFxuICBjdHJsOiBnZW5HdWFyZChgISRldmVudC5jdHJsS2V5YCksXG4gIHNoaWZ0OiBnZW5HdWFyZChgISRldmVudC5zaGlmdEtleWApLFxuICBhbHQ6IGdlbkd1YXJkKGAhJGV2ZW50LmFsdEtleWApLFxuICBtZXRhOiBnZW5HdWFyZChgISRldmVudC5tZXRhS2V5YCksXG4gIGxlZnQ6IGdlbkd1YXJkKGAnYnV0dG9uJyBpbiAkZXZlbnQgJiYgJGV2ZW50LmJ1dHRvbiAhPT0gMGApLFxuICBtaWRkbGU6IGdlbkd1YXJkKGAnYnV0dG9uJyBpbiAkZXZlbnQgJiYgJGV2ZW50LmJ1dHRvbiAhPT0gMWApLFxuICByaWdodDogZ2VuR3VhcmQoYCdidXR0b24nIGluICRldmVudCAmJiAkZXZlbnQuYnV0dG9uICE9PSAyYClcbn07XG5cbmZ1bmN0aW9uIGdlbkhhbmRsZXJzIChcbiAgZXZlbnRzLFxuICBpc05hdGl2ZVxuKSB7XG4gIGNvbnN0IHByZWZpeCA9IGlzTmF0aXZlID8gJ25hdGl2ZU9uOicgOiAnb246JztcbiAgbGV0IHN0YXRpY0hhbmRsZXJzID0gYGA7XG4gIGxldCBkeW5hbWljSGFuZGxlcnMgPSBgYDtcbiAgZm9yIChjb25zdCBuYW1lIGluIGV2ZW50cykge1xuICAgIGNvbnN0IGhhbmRsZXJDb2RlID0gZ2VuSGFuZGxlcihldmVudHNbbmFtZV0pO1xuICAgIGlmIChldmVudHNbbmFtZV0gJiYgZXZlbnRzW25hbWVdLmR5bmFtaWMpIHtcbiAgICAgIGR5bmFtaWNIYW5kbGVycyArPSBgJHtuYW1lfSwke2hhbmRsZXJDb2RlfSxgO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0aWNIYW5kbGVycyArPSBgXCIke25hbWV9XCI6JHtoYW5kbGVyQ29kZX0sYDtcbiAgICB9XG4gIH1cbiAgc3RhdGljSGFuZGxlcnMgPSBgeyR7c3RhdGljSGFuZGxlcnMuc2xpY2UoMCwgLTEpfX1gO1xuICBpZiAoZHluYW1pY0hhbmRsZXJzKSB7XG4gICAgcmV0dXJuIHByZWZpeCArIGBfZCgke3N0YXRpY0hhbmRsZXJzfSxbJHtkeW5hbWljSGFuZGxlcnMuc2xpY2UoMCwgLTEpfV0pYFxuICB9IGVsc2Uge1xuICAgIHJldHVybiBwcmVmaXggKyBzdGF0aWNIYW5kbGVyc1xuICB9XG59XG5cbmZ1bmN0aW9uIGdlbkhhbmRsZXIgKGhhbmRsZXIpIHtcbiAgaWYgKCFoYW5kbGVyKSB7XG4gICAgcmV0dXJuICdmdW5jdGlvbigpe30nXG4gIH1cblxuICBpZiAoQXJyYXkuaXNBcnJheShoYW5kbGVyKSkge1xuICAgIHJldHVybiBgWyR7aGFuZGxlci5tYXAoaGFuZGxlciA9PiBnZW5IYW5kbGVyKGhhbmRsZXIpKS5qb2luKCcsJyl9XWBcbiAgfVxuXG4gIGNvbnN0IGlzTWV0aG9kUGF0aCA9IHNpbXBsZVBhdGhSRS50ZXN0KGhhbmRsZXIudmFsdWUpO1xuICBjb25zdCBpc0Z1bmN0aW9uRXhwcmVzc2lvbiA9IGZuRXhwUkUudGVzdChoYW5kbGVyLnZhbHVlKTtcbiAgY29uc3QgaXNGdW5jdGlvbkludm9jYXRpb24gPSBzaW1wbGVQYXRoUkUudGVzdChoYW5kbGVyLnZhbHVlLnJlcGxhY2UoZm5JbnZva2VSRSwgJycpKTtcblxuICBpZiAoIWhhbmRsZXIubW9kaWZpZXJzKSB7XG4gICAgaWYgKGlzTWV0aG9kUGF0aCB8fCBpc0Z1bmN0aW9uRXhwcmVzc2lvbikge1xuICAgICAgcmV0dXJuIGhhbmRsZXIudmFsdWVcbiAgICB9XG4gICAgcmV0dXJuIGBmdW5jdGlvbigkZXZlbnQpeyR7XG4gICAgICBpc0Z1bmN0aW9uSW52b2NhdGlvbiA/IGByZXR1cm4gJHtoYW5kbGVyLnZhbHVlfWAgOiBoYW5kbGVyLnZhbHVlXG4gICAgfX1gIC8vIGlubGluZSBzdGF0ZW1lbnRcbiAgfSBlbHNlIHtcbiAgICBsZXQgY29kZSA9ICcnO1xuICAgIGxldCBnZW5Nb2RpZmllckNvZGUgPSAnJztcbiAgICBjb25zdCBrZXlzID0gW107XG4gICAgZm9yIChjb25zdCBrZXkgaW4gaGFuZGxlci5tb2RpZmllcnMpIHtcbiAgICAgIGlmIChtb2RpZmllckNvZGVba2V5XSkge1xuICAgICAgICBnZW5Nb2RpZmllckNvZGUgKz0gbW9kaWZpZXJDb2RlW2tleV07XG4gICAgICAgIC8vIGxlZnQvcmlnaHRcbiAgICAgICAgaWYgKGtleUNvZGVzW2tleV0pIHtcbiAgICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdleGFjdCcpIHtcbiAgICAgICAgY29uc3QgbW9kaWZpZXJzID0gKGhhbmRsZXIubW9kaWZpZXJzKTtcbiAgICAgICAgZ2VuTW9kaWZpZXJDb2RlICs9IGdlbkd1YXJkKFxuICAgICAgICAgIFsnY3RybCcsICdzaGlmdCcsICdhbHQnLCAnbWV0YSddXG4gICAgICAgICAgICAuZmlsdGVyKGtleU1vZGlmaWVyID0+ICFtb2RpZmllcnNba2V5TW9kaWZpZXJdKVxuICAgICAgICAgICAgLm1hcChrZXlNb2RpZmllciA9PiBgJGV2ZW50LiR7a2V5TW9kaWZpZXJ9S2V5YClcbiAgICAgICAgICAgIC5qb2luKCd8fCcpXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKGtleXMubGVuZ3RoKSB7XG4gICAgICBjb2RlICs9IGdlbktleUZpbHRlcihrZXlzKTtcbiAgICB9XG4gICAgLy8gTWFrZSBzdXJlIG1vZGlmaWVycyBsaWtlIHByZXZlbnQgYW5kIHN0b3AgZ2V0IGV4ZWN1dGVkIGFmdGVyIGtleSBmaWx0ZXJpbmdcbiAgICBpZiAoZ2VuTW9kaWZpZXJDb2RlKSB7XG4gICAgICBjb2RlICs9IGdlbk1vZGlmaWVyQ29kZTtcbiAgICB9XG4gICAgY29uc3QgaGFuZGxlckNvZGUgPSBpc01ldGhvZFBhdGhcbiAgICAgID8gYHJldHVybiAke2hhbmRsZXIudmFsdWV9KCRldmVudClgXG4gICAgICA6IGlzRnVuY3Rpb25FeHByZXNzaW9uXG4gICAgICAgID8gYHJldHVybiAoJHtoYW5kbGVyLnZhbHVlfSkoJGV2ZW50KWBcbiAgICAgICAgOiBpc0Z1bmN0aW9uSW52b2NhdGlvblxuICAgICAgICAgID8gYHJldHVybiAke2hhbmRsZXIudmFsdWV9YFxuICAgICAgICAgIDogaGFuZGxlci52YWx1ZTtcbiAgICByZXR1cm4gYGZ1bmN0aW9uKCRldmVudCl7JHtjb2RlfSR7aGFuZGxlckNvZGV9fWBcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5LZXlGaWx0ZXIgKGtleXMpIHtcbiAgcmV0dXJuIChcbiAgICAvLyBtYWtlIHN1cmUgdGhlIGtleSBmaWx0ZXJzIG9ubHkgYXBwbHkgdG8gS2V5Ym9hcmRFdmVudHNcbiAgICAvLyAjOTQ0MTogY2FuJ3QgdXNlICdrZXlDb2RlJyBpbiAkZXZlbnQgYmVjYXVzZSBDaHJvbWUgYXV0b2ZpbGwgZmlyZXMgZmFrZVxuICAgIC8vIGtleSBldmVudHMgdGhhdCBkbyBub3QgaGF2ZSBrZXlDb2RlIHByb3BlcnR5Li4uXG4gICAgYGlmKCEkZXZlbnQudHlwZS5pbmRleE9mKCdrZXknKSYmYCArXG4gICAgYCR7a2V5cy5tYXAoZ2VuRmlsdGVyQ29kZSkuam9pbignJiYnKX0pcmV0dXJuIG51bGw7YFxuICApXG59XG5cbmZ1bmN0aW9uIGdlbkZpbHRlckNvZGUgKGtleSkge1xuICBjb25zdCBrZXlWYWwgPSBwYXJzZUludChrZXksIDEwKTtcbiAgaWYgKGtleVZhbCkge1xuICAgIHJldHVybiBgJGV2ZW50LmtleUNvZGUhPT0ke2tleVZhbH1gXG4gIH1cbiAgY29uc3Qga2V5Q29kZSA9IGtleUNvZGVzW2tleV07XG4gIGNvbnN0IGtleU5hbWUgPSBrZXlOYW1lc1trZXldO1xuICByZXR1cm4gKFxuICAgIGBfaygkZXZlbnQua2V5Q29kZSxgICtcbiAgICBgJHtKU09OLnN0cmluZ2lmeShrZXkpfSxgICtcbiAgICBgJHtKU09OLnN0cmluZ2lmeShrZXlDb2RlKX0sYCArXG4gICAgYCRldmVudC5rZXksYCArXG4gICAgYCR7SlNPTi5zdHJpbmdpZnkoa2V5TmFtZSl9YCArXG4gICAgYClgXG4gIClcbn1cblxuLyogICovXG5cbmZ1bmN0aW9uIG9uIChlbCwgZGlyKSB7XG4gIGlmIChkaXIubW9kaWZpZXJzKSB7XG4gICAgd2Fybihgdi1vbiB3aXRob3V0IGFyZ3VtZW50IGRvZXMgbm90IHN1cHBvcnQgbW9kaWZpZXJzLmApO1xuICB9XG4gIGVsLndyYXBMaXN0ZW5lcnMgPSAoY29kZSkgPT4gYF9nKCR7Y29kZX0sJHtkaXIudmFsdWV9KWA7XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBiaW5kJDEgKGVsLCBkaXIpIHtcbiAgZWwud3JhcERhdGEgPSAoY29kZSkgPT4ge1xuICAgIHJldHVybiBgX2IoJHtjb2RlfSwnJHtlbC50YWd9Jywke2Rpci52YWx1ZX0sJHtcbiAgICAgIGRpci5tb2RpZmllcnMgJiYgZGlyLm1vZGlmaWVycy5wcm9wID8gJ3RydWUnIDogJ2ZhbHNlJ1xuICAgIH0ke1xuICAgICAgZGlyLm1vZGlmaWVycyAmJiBkaXIubW9kaWZpZXJzLnN5bmMgPyAnLHRydWUnIDogJydcbiAgICB9KWBcbiAgfTtcbn1cblxuLyogICovXG5cbnZhciBiYXNlRGlyZWN0aXZlcyA9IHtcbiAgb24sXG4gIGJpbmQ6IGJpbmQkMSxcbiAgY2xvYWs6IG5vb3Bcbn07XG5cbi8qICAqL1xuXG5cblxuXG5cbmNsYXNzIENvZGVnZW5TdGF0ZSB7XG4gIFxuICBcbiAgXG4gIFxuICBcbiAgXG4gIFxuICBcbiAgXG5cbiAgY29uc3RydWN0b3IgKG9wdGlvbnMpIHtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMud2FybiA9IG9wdGlvbnMud2FybiB8fCBiYXNlV2FybjtcbiAgICB0aGlzLnRyYW5zZm9ybXMgPSBwbHVja01vZHVsZUZ1bmN0aW9uKG9wdGlvbnMubW9kdWxlcywgJ3RyYW5zZm9ybUNvZGUnKTtcbiAgICB0aGlzLmRhdGFHZW5GbnMgPSBwbHVja01vZHVsZUZ1bmN0aW9uKG9wdGlvbnMubW9kdWxlcywgJ2dlbkRhdGEnKTtcbiAgICB0aGlzLmRpcmVjdGl2ZXMgPSBleHRlbmQoZXh0ZW5kKHt9LCBiYXNlRGlyZWN0aXZlcyksIG9wdGlvbnMuZGlyZWN0aXZlcyk7XG4gICAgY29uc3QgaXNSZXNlcnZlZFRhZyA9IG9wdGlvbnMuaXNSZXNlcnZlZFRhZyB8fCBubztcbiAgICB0aGlzLm1heWJlQ29tcG9uZW50ID0gKGVsKSA9PiAhIWVsLmNvbXBvbmVudCB8fCAhaXNSZXNlcnZlZFRhZyhlbC50YWcpO1xuICAgIHRoaXMub25jZUlkID0gMDtcbiAgICB0aGlzLnN0YXRpY1JlbmRlckZucyA9IFtdO1xuICAgIHRoaXMucHJlID0gZmFsc2U7XG4gIH1cbn1cblxuXG5cbmZ1bmN0aW9uIGdlbmVyYXRlIChcbiAgYXN0LFxuICBvcHRpb25zXG4pIHtcbiAgY29uc3Qgc3RhdGUgPSBuZXcgQ29kZWdlblN0YXRlKG9wdGlvbnMpO1xuICBjb25zdCBjb2RlID0gYXN0ID8gZ2VuRWxlbWVudChhc3QsIHN0YXRlKSA6ICdfYyhcImRpdlwiKSc7XG4gIHJldHVybiB7XG4gICAgcmVuZGVyOiBgd2l0aCh0aGlzKXtyZXR1cm4gJHtjb2RlfX1gLFxuICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGUuc3RhdGljUmVuZGVyRm5zXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuRWxlbWVudCAoZWwsIHN0YXRlKSB7XG4gIGlmIChlbC5wYXJlbnQpIHtcbiAgICBlbC5wcmUgPSBlbC5wcmUgfHwgZWwucGFyZW50LnByZTtcbiAgfVxuXG4gIGlmIChlbC5zdGF0aWNSb290ICYmICFlbC5zdGF0aWNQcm9jZXNzZWQpIHtcbiAgICByZXR1cm4gZ2VuU3RhdGljKGVsLCBzdGF0ZSlcbiAgfSBlbHNlIGlmIChlbC5vbmNlICYmICFlbC5vbmNlUHJvY2Vzc2VkKSB7XG4gICAgcmV0dXJuIGdlbk9uY2UoZWwsIHN0YXRlKVxuICB9IGVsc2UgaWYgKGVsLmZvciAmJiAhZWwuZm9yUHJvY2Vzc2VkKSB7XG4gICAgcmV0dXJuIGdlbkZvcihlbCwgc3RhdGUpXG4gIH0gZWxzZSBpZiAoZWwuaWYgJiYgIWVsLmlmUHJvY2Vzc2VkKSB7XG4gICAgcmV0dXJuIGdlbklmKGVsLCBzdGF0ZSlcbiAgfSBlbHNlIGlmIChlbC50YWcgPT09ICd0ZW1wbGF0ZScgJiYgIWVsLnNsb3RUYXJnZXQgJiYgIXN0YXRlLnByZSkge1xuICAgIHJldHVybiBnZW5DaGlsZHJlbihlbCwgc3RhdGUpIHx8ICd2b2lkIDAnXG4gIH0gZWxzZSBpZiAoZWwudGFnID09PSAnc2xvdCcpIHtcbiAgICByZXR1cm4gZ2VuU2xvdChlbCwgc3RhdGUpXG4gIH0gZWxzZSB7XG4gICAgLy8gY29tcG9uZW50IG9yIGVsZW1lbnRcbiAgICBsZXQgY29kZTtcbiAgICBpZiAoZWwuY29tcG9uZW50KSB7XG4gICAgICBjb2RlID0gZ2VuQ29tcG9uZW50KGVsLmNvbXBvbmVudCwgZWwsIHN0YXRlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbGV0IGRhdGE7XG4gICAgICBpZiAoIWVsLnBsYWluIHx8IChlbC5wcmUgJiYgc3RhdGUubWF5YmVDb21wb25lbnQoZWwpKSkge1xuICAgICAgICBkYXRhID0gZ2VuRGF0YSQyKGVsLCBzdGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGNoaWxkcmVuID0gZWwuaW5saW5lVGVtcGxhdGUgPyBudWxsIDogZ2VuQ2hpbGRyZW4oZWwsIHN0YXRlLCB0cnVlKTtcbiAgICAgIGNvZGUgPSBgX2MoJyR7ZWwudGFnfScke1xuICAgICAgICBkYXRhID8gYCwke2RhdGF9YCA6ICcnIC8vIGRhdGFcbiAgICAgIH0ke1xuICAgICAgICBjaGlsZHJlbiA/IGAsJHtjaGlsZHJlbn1gIDogJycgLy8gY2hpbGRyZW5cbiAgICAgIH0pYDtcbiAgICB9XG4gICAgLy8gbW9kdWxlIHRyYW5zZm9ybXNcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN0YXRlLnRyYW5zZm9ybXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvZGUgPSBzdGF0ZS50cmFuc2Zvcm1zW2ldKGVsLCBjb2RlKTtcbiAgICB9XG4gICAgcmV0dXJuIGNvZGVcbiAgfVxufVxuXG4vLyBob2lzdCBzdGF0aWMgc3ViLXRyZWVzIG91dFxuZnVuY3Rpb24gZ2VuU3RhdGljIChlbCwgc3RhdGUpIHtcbiAgZWwuc3RhdGljUHJvY2Vzc2VkID0gdHJ1ZTtcbiAgLy8gU29tZSBlbGVtZW50cyAodGVtcGxhdGVzKSBuZWVkIHRvIGJlaGF2ZSBkaWZmZXJlbnRseSBpbnNpZGUgb2YgYSB2LXByZVxuICAvLyBub2RlLiAgQWxsIHByZSBub2RlcyBhcmUgc3RhdGljIHJvb3RzLCBzbyB3ZSBjYW4gdXNlIHRoaXMgYXMgYSBsb2NhdGlvbiB0b1xuICAvLyB3cmFwIGEgc3RhdGUgY2hhbmdlIGFuZCByZXNldCBpdCB1cG9uIGV4aXRpbmcgdGhlIHByZSBub2RlLlxuICBjb25zdCBvcmlnaW5hbFByZVN0YXRlID0gc3RhdGUucHJlO1xuICBpZiAoZWwucHJlKSB7XG4gICAgc3RhdGUucHJlID0gZWwucHJlO1xuICB9XG4gIHN0YXRlLnN0YXRpY1JlbmRlckZucy5wdXNoKGB3aXRoKHRoaXMpe3JldHVybiAke2dlbkVsZW1lbnQoZWwsIHN0YXRlKX19YCk7XG4gIHN0YXRlLnByZSA9IG9yaWdpbmFsUHJlU3RhdGU7XG4gIHJldHVybiBgX20oJHtcbiAgICBzdGF0ZS5zdGF0aWNSZW5kZXJGbnMubGVuZ3RoIC0gMVxuICB9JHtcbiAgICBlbC5zdGF0aWNJbkZvciA/ICcsdHJ1ZScgOiAnJ1xuICB9KWBcbn1cblxuLy8gdi1vbmNlXG5mdW5jdGlvbiBnZW5PbmNlIChlbCwgc3RhdGUpIHtcbiAgZWwub25jZVByb2Nlc3NlZCA9IHRydWU7XG4gIGlmIChlbC5pZiAmJiAhZWwuaWZQcm9jZXNzZWQpIHtcbiAgICByZXR1cm4gZ2VuSWYoZWwsIHN0YXRlKVxuICB9IGVsc2UgaWYgKGVsLnN0YXRpY0luRm9yKSB7XG4gICAgbGV0IGtleSA9ICcnO1xuICAgIGxldCBwYXJlbnQgPSBlbC5wYXJlbnQ7XG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudC5mb3IpIHtcbiAgICAgICAga2V5ID0gcGFyZW50LmtleTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIHBhcmVudCA9IHBhcmVudC5wYXJlbnQ7XG4gICAgfVxuICAgIGlmICgha2V5KSB7XG4gICAgICBzdGF0ZS53YXJuKFxuICAgICAgICBgdi1vbmNlIGNhbiBvbmx5IGJlIHVzZWQgaW5zaWRlIHYtZm9yIHRoYXQgaXMga2V5ZWQuIGAsXG4gICAgICAgIGVsLnJhd0F0dHJzTWFwWyd2LW9uY2UnXVxuICAgICAgKTtcbiAgICAgIHJldHVybiBnZW5FbGVtZW50KGVsLCBzdGF0ZSlcbiAgICB9XG4gICAgcmV0dXJuIGBfbygke2dlbkVsZW1lbnQoZWwsIHN0YXRlKX0sJHtzdGF0ZS5vbmNlSWQrK30sJHtrZXl9KWBcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZ2VuU3RhdGljKGVsLCBzdGF0ZSlcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5JZiAoXG4gIGVsLFxuICBzdGF0ZSxcbiAgYWx0R2VuLFxuICBhbHRFbXB0eVxuKSB7XG4gIGVsLmlmUHJvY2Vzc2VkID0gdHJ1ZTsgLy8gYXZvaWQgcmVjdXJzaW9uXG4gIHJldHVybiBnZW5JZkNvbmRpdGlvbnMoZWwuaWZDb25kaXRpb25zLnNsaWNlKCksIHN0YXRlLCBhbHRHZW4sIGFsdEVtcHR5KVxufVxuXG5mdW5jdGlvbiBnZW5JZkNvbmRpdGlvbnMgKFxuICBjb25kaXRpb25zLFxuICBzdGF0ZSxcbiAgYWx0R2VuLFxuICBhbHRFbXB0eVxuKSB7XG4gIGlmICghY29uZGl0aW9ucy5sZW5ndGgpIHtcbiAgICByZXR1cm4gYWx0RW1wdHkgfHwgJ19lKCknXG4gIH1cblxuICBjb25zdCBjb25kaXRpb24gPSBjb25kaXRpb25zLnNoaWZ0KCk7XG4gIGlmIChjb25kaXRpb24uZXhwKSB7XG4gICAgcmV0dXJuIGAoJHtjb25kaXRpb24uZXhwfSk/JHtcbiAgICAgIGdlblRlcm5hcnlFeHAoY29uZGl0aW9uLmJsb2NrKVxuICAgIH06JHtcbiAgICAgIGdlbklmQ29uZGl0aW9ucyhjb25kaXRpb25zLCBzdGF0ZSwgYWx0R2VuLCBhbHRFbXB0eSlcbiAgICB9YFxuICB9IGVsc2Uge1xuICAgIHJldHVybiBgJHtnZW5UZXJuYXJ5RXhwKGNvbmRpdGlvbi5ibG9jayl9YFxuICB9XG5cbiAgLy8gdi1pZiB3aXRoIHYtb25jZSBzaG91bGQgZ2VuZXJhdGUgY29kZSBsaWtlIChhKT9fbSgwKTpfbSgxKVxuICBmdW5jdGlvbiBnZW5UZXJuYXJ5RXhwIChlbCkge1xuICAgIHJldHVybiBhbHRHZW5cbiAgICAgID8gYWx0R2VuKGVsLCBzdGF0ZSlcbiAgICAgIDogZWwub25jZVxuICAgICAgICA/IGdlbk9uY2UoZWwsIHN0YXRlKVxuICAgICAgICA6IGdlbkVsZW1lbnQoZWwsIHN0YXRlKVxuICB9XG59XG5cbmZ1bmN0aW9uIGdlbkZvciAoXG4gIGVsLFxuICBzdGF0ZSxcbiAgYWx0R2VuLFxuICBhbHRIZWxwZXJcbikge1xuICBjb25zdCBleHAgPSBlbC5mb3I7XG4gIGNvbnN0IGFsaWFzID0gZWwuYWxpYXM7XG4gIGNvbnN0IGl0ZXJhdG9yMSA9IGVsLml0ZXJhdG9yMSA/IGAsJHtlbC5pdGVyYXRvcjF9YCA6ICcnO1xuICBjb25zdCBpdGVyYXRvcjIgPSBlbC5pdGVyYXRvcjIgPyBgLCR7ZWwuaXRlcmF0b3IyfWAgOiAnJztcblxuICBpZiAoc3RhdGUubWF5YmVDb21wb25lbnQoZWwpICYmXG4gICAgZWwudGFnICE9PSAnc2xvdCcgJiZcbiAgICBlbC50YWcgIT09ICd0ZW1wbGF0ZScgJiZcbiAgICAhZWwua2V5XG4gICkge1xuICAgIHN0YXRlLndhcm4oXG4gICAgICBgPCR7ZWwudGFnfSB2LWZvcj1cIiR7YWxpYXN9IGluICR7ZXhwfVwiPjogY29tcG9uZW50IGxpc3RzIHJlbmRlcmVkIHdpdGggYCArXG4gICAgICBgdi1mb3Igc2hvdWxkIGhhdmUgZXhwbGljaXQga2V5cy4gYCArXG4gICAgICBgU2VlIGh0dHBzOi8vdnVlanMub3JnL2d1aWRlL2xpc3QuaHRtbCNrZXkgZm9yIG1vcmUgaW5mby5gLFxuICAgICAgZWwucmF3QXR0cnNNYXBbJ3YtZm9yJ10sXG4gICAgICB0cnVlIC8qIHRpcCAqL1xuICAgICk7XG4gIH1cblxuICBlbC5mb3JQcm9jZXNzZWQgPSB0cnVlOyAvLyBhdm9pZCByZWN1cnNpb25cbiAgcmV0dXJuIGAke2FsdEhlbHBlciB8fCAnX2wnfSgoJHtleHB9KSxgICtcbiAgICBgZnVuY3Rpb24oJHthbGlhc30ke2l0ZXJhdG9yMX0ke2l0ZXJhdG9yMn0pe2AgK1xuICAgICAgYHJldHVybiAkeyhhbHRHZW4gfHwgZ2VuRWxlbWVudCkoZWwsIHN0YXRlKX1gICtcbiAgICAnfSknXG59XG5cbmZ1bmN0aW9uIGdlbkRhdGEkMiAoZWwsIHN0YXRlKSB7XG4gIGxldCBkYXRhID0gJ3snO1xuXG4gIC8vIGRpcmVjdGl2ZXMgZmlyc3QuXG4gIC8vIGRpcmVjdGl2ZXMgbWF5IG11dGF0ZSB0aGUgZWwncyBvdGhlciBwcm9wZXJ0aWVzIGJlZm9yZSB0aGV5IGFyZSBnZW5lcmF0ZWQuXG4gIGNvbnN0IGRpcnMgPSBnZW5EaXJlY3RpdmVzKGVsLCBzdGF0ZSk7XG4gIGlmIChkaXJzKSBkYXRhICs9IGRpcnMgKyAnLCc7XG5cbiAgLy8ga2V5XG4gIGlmIChlbC5rZXkpIHtcbiAgICBkYXRhICs9IGBrZXk6JHtlbC5rZXl9LGA7XG4gIH1cbiAgLy8gcmVmXG4gIGlmIChlbC5yZWYpIHtcbiAgICBkYXRhICs9IGByZWY6JHtlbC5yZWZ9LGA7XG4gIH1cbiAgaWYgKGVsLnJlZkluRm9yKSB7XG4gICAgZGF0YSArPSBgcmVmSW5Gb3I6dHJ1ZSxgO1xuICB9XG4gIC8vIHByZVxuICBpZiAoZWwucHJlKSB7XG4gICAgZGF0YSArPSBgcHJlOnRydWUsYDtcbiAgfVxuICAvLyByZWNvcmQgb3JpZ2luYWwgdGFnIG5hbWUgZm9yIGNvbXBvbmVudHMgdXNpbmcgXCJpc1wiIGF0dHJpYnV0ZVxuICBpZiAoZWwuY29tcG9uZW50KSB7XG4gICAgZGF0YSArPSBgdGFnOlwiJHtlbC50YWd9XCIsYDtcbiAgfVxuICAvLyBtb2R1bGUgZGF0YSBnZW5lcmF0aW9uIGZ1bmN0aW9uc1xuICBmb3IgKGxldCBpID0gMDsgaSA8IHN0YXRlLmRhdGFHZW5GbnMubGVuZ3RoOyBpKyspIHtcbiAgICBkYXRhICs9IHN0YXRlLmRhdGFHZW5GbnNbaV0oZWwpO1xuICB9XG4gIC8vIGF0dHJpYnV0ZXNcbiAgaWYgKGVsLmF0dHJzKSB7XG4gICAgZGF0YSArPSBgYXR0cnM6JHtnZW5Qcm9wcyhlbC5hdHRycyl9LGA7XG4gIH1cbiAgLy8gRE9NIHByb3BzXG4gIGlmIChlbC5wcm9wcykge1xuICAgIGRhdGEgKz0gYGRvbVByb3BzOiR7Z2VuUHJvcHMoZWwucHJvcHMpfSxgO1xuICB9XG4gIC8vIGV2ZW50IGhhbmRsZXJzXG4gIGlmIChlbC5ldmVudHMpIHtcbiAgICBkYXRhICs9IGAke2dlbkhhbmRsZXJzKGVsLmV2ZW50cywgZmFsc2UpfSxgO1xuICB9XG4gIGlmIChlbC5uYXRpdmVFdmVudHMpIHtcbiAgICBkYXRhICs9IGAke2dlbkhhbmRsZXJzKGVsLm5hdGl2ZUV2ZW50cywgdHJ1ZSl9LGA7XG4gIH1cbiAgLy8gc2xvdCB0YXJnZXRcbiAgLy8gb25seSBmb3Igbm9uLXNjb3BlZCBzbG90c1xuICBpZiAoZWwuc2xvdFRhcmdldCAmJiAhZWwuc2xvdFNjb3BlKSB7XG4gICAgZGF0YSArPSBgc2xvdDoke2VsLnNsb3RUYXJnZXR9LGA7XG4gIH1cbiAgLy8gc2NvcGVkIHNsb3RzXG4gIGlmIChlbC5zY29wZWRTbG90cykge1xuICAgIGRhdGEgKz0gYCR7Z2VuU2NvcGVkU2xvdHMoZWwsIGVsLnNjb3BlZFNsb3RzLCBzdGF0ZSl9LGA7XG4gIH1cbiAgLy8gY29tcG9uZW50IHYtbW9kZWxcbiAgaWYgKGVsLm1vZGVsKSB7XG4gICAgZGF0YSArPSBgbW9kZWw6e3ZhbHVlOiR7XG4gICAgICBlbC5tb2RlbC52YWx1ZVxuICAgIH0sY2FsbGJhY2s6JHtcbiAgICAgIGVsLm1vZGVsLmNhbGxiYWNrXG4gICAgfSxleHByZXNzaW9uOiR7XG4gICAgICBlbC5tb2RlbC5leHByZXNzaW9uXG4gICAgfX0sYDtcbiAgfVxuICAvLyBpbmxpbmUtdGVtcGxhdGVcbiAgaWYgKGVsLmlubGluZVRlbXBsYXRlKSB7XG4gICAgY29uc3QgaW5saW5lVGVtcGxhdGUgPSBnZW5JbmxpbmVUZW1wbGF0ZShlbCwgc3RhdGUpO1xuICAgIGlmIChpbmxpbmVUZW1wbGF0ZSkge1xuICAgICAgZGF0YSArPSBgJHtpbmxpbmVUZW1wbGF0ZX0sYDtcbiAgICB9XG4gIH1cbiAgZGF0YSA9IGRhdGEucmVwbGFjZSgvLCQvLCAnJykgKyAnfSc7XG4gIC8vIHYtYmluZCBkeW5hbWljIGFyZ3VtZW50IHdyYXBcbiAgLy8gdi1iaW5kIHdpdGggZHluYW1pYyBhcmd1bWVudHMgbXVzdCBiZSBhcHBsaWVkIHVzaW5nIHRoZSBzYW1lIHYtYmluZCBvYmplY3RcbiAgLy8gbWVyZ2UgaGVscGVyIHNvIHRoYXQgY2xhc3Mvc3R5bGUvbXVzdFVzZVByb3AgYXR0cnMgYXJlIGhhbmRsZWQgY29ycmVjdGx5LlxuICBpZiAoZWwuZHluYW1pY0F0dHJzKSB7XG4gICAgZGF0YSA9IGBfYigke2RhdGF9LFwiJHtlbC50YWd9XCIsJHtnZW5Qcm9wcyhlbC5keW5hbWljQXR0cnMpfSlgO1xuICB9XG4gIC8vIHYtYmluZCBkYXRhIHdyYXBcbiAgaWYgKGVsLndyYXBEYXRhKSB7XG4gICAgZGF0YSA9IGVsLndyYXBEYXRhKGRhdGEpO1xuICB9XG4gIC8vIHYtb24gZGF0YSB3cmFwXG4gIGlmIChlbC53cmFwTGlzdGVuZXJzKSB7XG4gICAgZGF0YSA9IGVsLndyYXBMaXN0ZW5lcnMoZGF0YSk7XG4gIH1cbiAgcmV0dXJuIGRhdGFcbn1cblxuZnVuY3Rpb24gZ2VuRGlyZWN0aXZlcyAoZWwsIHN0YXRlKSB7XG4gIGNvbnN0IGRpcnMgPSBlbC5kaXJlY3RpdmVzO1xuICBpZiAoIWRpcnMpIHJldHVyblxuICBsZXQgcmVzID0gJ2RpcmVjdGl2ZXM6Wyc7XG4gIGxldCBoYXNSdW50aW1lID0gZmFsc2U7XG4gIGxldCBpLCBsLCBkaXIsIG5lZWRSdW50aW1lO1xuICBmb3IgKGkgPSAwLCBsID0gZGlycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBkaXIgPSBkaXJzW2ldO1xuICAgIG5lZWRSdW50aW1lID0gdHJ1ZTtcbiAgICBjb25zdCBnZW4gPSBzdGF0ZS5kaXJlY3RpdmVzW2Rpci5uYW1lXTtcbiAgICBpZiAoZ2VuKSB7XG4gICAgICAvLyBjb21waWxlLXRpbWUgZGlyZWN0aXZlIHRoYXQgbWFuaXB1bGF0ZXMgQVNULlxuICAgICAgLy8gcmV0dXJucyB0cnVlIGlmIGl0IGFsc28gbmVlZHMgYSBydW50aW1lIGNvdW50ZXJwYXJ0LlxuICAgICAgbmVlZFJ1bnRpbWUgPSAhIWdlbihlbCwgZGlyLCBzdGF0ZS53YXJuKTtcbiAgICB9XG4gICAgaWYgKG5lZWRSdW50aW1lKSB7XG4gICAgICBoYXNSdW50aW1lID0gdHJ1ZTtcbiAgICAgIHJlcyArPSBge25hbWU6XCIke2Rpci5uYW1lfVwiLHJhd05hbWU6XCIke2Rpci5yYXdOYW1lfVwiJHtcbiAgICAgICAgZGlyLnZhbHVlID8gYCx2YWx1ZTooJHtkaXIudmFsdWV9KSxleHByZXNzaW9uOiR7SlNPTi5zdHJpbmdpZnkoZGlyLnZhbHVlKX1gIDogJydcbiAgICAgIH0ke1xuICAgICAgICBkaXIuYXJnID8gYCxhcmc6JHtkaXIuaXNEeW5hbWljQXJnID8gZGlyLmFyZyA6IGBcIiR7ZGlyLmFyZ31cImB9YCA6ICcnXG4gICAgICB9JHtcbiAgICAgICAgZGlyLm1vZGlmaWVycyA/IGAsbW9kaWZpZXJzOiR7SlNPTi5zdHJpbmdpZnkoZGlyLm1vZGlmaWVycyl9YCA6ICcnXG4gICAgICB9fSxgO1xuICAgIH1cbiAgfVxuICBpZiAoaGFzUnVudGltZSkge1xuICAgIHJldHVybiByZXMuc2xpY2UoMCwgLTEpICsgJ10nXG4gIH1cbn1cblxuZnVuY3Rpb24gZ2VuSW5saW5lVGVtcGxhdGUgKGVsLCBzdGF0ZSkge1xuICBjb25zdCBhc3QgPSBlbC5jaGlsZHJlblswXTtcbiAgaWYgKGVsLmNoaWxkcmVuLmxlbmd0aCAhPT0gMSB8fCBhc3QudHlwZSAhPT0gMSkge1xuICAgIHN0YXRlLndhcm4oXG4gICAgICAnSW5saW5lLXRlbXBsYXRlIGNvbXBvbmVudHMgbXVzdCBoYXZlIGV4YWN0bHkgb25lIGNoaWxkIGVsZW1lbnQuJyxcbiAgICAgIHsgc3RhcnQ6IGVsLnN0YXJ0IH1cbiAgICApO1xuICB9XG4gIGlmIChhc3QgJiYgYXN0LnR5cGUgPT09IDEpIHtcbiAgICBjb25zdCBpbmxpbmVSZW5kZXJGbnMgPSBnZW5lcmF0ZShhc3QsIHN0YXRlLm9wdGlvbnMpO1xuICAgIHJldHVybiBgaW5saW5lVGVtcGxhdGU6e3JlbmRlcjpmdW5jdGlvbigpeyR7XG4gICAgICBpbmxpbmVSZW5kZXJGbnMucmVuZGVyXG4gICAgfX0sc3RhdGljUmVuZGVyRm5zOlske1xuICAgICAgaW5saW5lUmVuZGVyRm5zLnN0YXRpY1JlbmRlckZucy5tYXAoY29kZSA9PiBgZnVuY3Rpb24oKXske2NvZGV9fWApLmpvaW4oJywnKVxuICAgIH1dfWBcbiAgfVxufVxuXG5mdW5jdGlvbiBnZW5TY29wZWRTbG90cyAoXG4gIGVsLFxuICBzbG90cyxcbiAgc3RhdGVcbikge1xuICAvLyBieSBkZWZhdWx0IHNjb3BlZCBzbG90cyBhcmUgY29uc2lkZXJlZCBcInN0YWJsZVwiLCB0aGlzIGFsbG93cyBjaGlsZFxuICAvLyBjb21wb25lbnRzIHdpdGggb25seSBzY29wZWQgc2xvdHMgdG8gc2tpcCBmb3JjZWQgdXBkYXRlcyBmcm9tIHBhcmVudC5cbiAgLy8gYnV0IGluIHNvbWUgY2FzZXMgd2UgaGF2ZSB0byBiYWlsLW91dCBvZiB0aGlzIG9wdGltaXphdGlvblxuICAvLyBmb3IgZXhhbXBsZSBpZiB0aGUgc2xvdCBjb250YWlucyBkeW5hbWljIG5hbWVzLCBoYXMgdi1pZiBvciB2LWZvciBvbiB0aGVtLi4uXG4gIGxldCBuZWVkc0ZvcmNlVXBkYXRlID0gT2JqZWN0LmtleXMoc2xvdHMpLnNvbWUoa2V5ID0+IHtcbiAgICBjb25zdCBzbG90ID0gc2xvdHNba2V5XTtcbiAgICByZXR1cm4gKFxuICAgICAgc2xvdC5zbG90VGFyZ2V0RHluYW1pYyB8fFxuICAgICAgc2xvdC5pZiB8fFxuICAgICAgc2xvdC5mb3IgfHxcbiAgICAgIGNvbnRhaW5zU2xvdENoaWxkKHNsb3QpIC8vIGlzIHBhc3NpbmcgZG93biBzbG90IGZyb20gcGFyZW50IHdoaWNoIG1heSBiZSBkeW5hbWljXG4gICAgKVxuICB9KTtcbiAgLy8gT1Igd2hlbiBpdCBpcyBpbnNpZGUgYW5vdGhlciBzY29wZWQgc2xvdCAodGhlIHJlYWN0aXZpdHkgaXMgZGlzY29ubmVjdGVkKVxuICAvLyAjOTQzOFxuICBpZiAoIW5lZWRzRm9yY2VVcGRhdGUpIHtcbiAgICBsZXQgcGFyZW50ID0gZWwucGFyZW50O1xuICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgIGlmIChwYXJlbnQuc2xvdFNjb3BlICYmIHBhcmVudC5zbG90U2NvcGUgIT09IGVtcHR5U2xvdFNjb3BlVG9rZW4pIHtcbiAgICAgICAgbmVlZHNGb3JjZVVwZGF0ZSA9IHRydWU7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBgc2NvcGVkU2xvdHM6X3UoWyR7XG4gICAgT2JqZWN0LmtleXMoc2xvdHMpLm1hcChrZXkgPT4ge1xuICAgICAgcmV0dXJuIGdlblNjb3BlZFNsb3Qoc2xvdHNba2V5XSwgc3RhdGUpXG4gICAgfSkuam9pbignLCcpXG4gIH1dJHtuZWVkc0ZvcmNlVXBkYXRlID8gYCx0cnVlYCA6IGBgfSlgXG59XG5cbmZ1bmN0aW9uIGNvbnRhaW5zU2xvdENoaWxkIChlbCkge1xuICBpZiAoZWwudHlwZSA9PT0gMSkge1xuICAgIGlmIChlbC50YWcgPT09ICdzbG90Jykge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgcmV0dXJuIGVsLmNoaWxkcmVuLnNvbWUoY29udGFpbnNTbG90Q2hpbGQpXG4gIH1cbiAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIGdlblNjb3BlZFNsb3QgKFxuICBlbCxcbiAgc3RhdGVcbikge1xuICBjb25zdCBpc0xlZ2FjeVN5bnRheCA9IGVsLmF0dHJzTWFwWydzbG90LXNjb3BlJ107XG4gIGlmIChlbC5pZiAmJiAhZWwuaWZQcm9jZXNzZWQgJiYgIWlzTGVnYWN5U3ludGF4KSB7XG4gICAgcmV0dXJuIGdlbklmKGVsLCBzdGF0ZSwgZ2VuU2NvcGVkU2xvdCwgYG51bGxgKVxuICB9XG4gIGlmIChlbC5mb3IgJiYgIWVsLmZvclByb2Nlc3NlZCkge1xuICAgIHJldHVybiBnZW5Gb3IoZWwsIHN0YXRlLCBnZW5TY29wZWRTbG90KVxuICB9XG4gIGNvbnN0IHNsb3RTY29wZSA9IGVsLnNsb3RTY29wZSA9PT0gZW1wdHlTbG90U2NvcGVUb2tlblxuICAgID8gYGBcbiAgICA6IFN0cmluZyhlbC5zbG90U2NvcGUpO1xuICBjb25zdCBmbiA9IGBmdW5jdGlvbigke3Nsb3RTY29wZX0pe2AgK1xuICAgIGByZXR1cm4gJHtlbC50YWcgPT09ICd0ZW1wbGF0ZSdcbiAgICAgID8gZWwuaWYgJiYgaXNMZWdhY3lTeW50YXhcbiAgICAgICAgPyBgKCR7ZWwuaWZ9KT8ke2dlbkNoaWxkcmVuKGVsLCBzdGF0ZSkgfHwgJ3VuZGVmaW5lZCd9OnVuZGVmaW5lZGBcbiAgICAgICAgOiBnZW5DaGlsZHJlbihlbCwgc3RhdGUpIHx8ICd1bmRlZmluZWQnXG4gICAgICA6IGdlbkVsZW1lbnQoZWwsIHN0YXRlKVxuICAgIH19YDtcbiAgLy8gcmV2ZXJzZSBwcm94eSB2LXNsb3Qgd2l0aG91dCBzY29wZSBvbiB0aGlzLiRzbG90c1xuICBjb25zdCByZXZlcnNlUHJveHkgPSBzbG90U2NvcGUgPyBgYCA6IGAscHJveHk6dHJ1ZWA7XG4gIHJldHVybiBge2tleToke2VsLnNsb3RUYXJnZXQgfHwgYFwiZGVmYXVsdFwiYH0sZm46JHtmbn0ke3JldmVyc2VQcm94eX19YFxufVxuXG5mdW5jdGlvbiBnZW5DaGlsZHJlbiAoXG4gIGVsLFxuICBzdGF0ZSxcbiAgY2hlY2tTa2lwLFxuICBhbHRHZW5FbGVtZW50LFxuICBhbHRHZW5Ob2RlXG4pIHtcbiAgY29uc3QgY2hpbGRyZW4gPSBlbC5jaGlsZHJlbjtcbiAgaWYgKGNoaWxkcmVuLmxlbmd0aCkge1xuICAgIGNvbnN0IGVsID0gY2hpbGRyZW5bMF07XG4gICAgLy8gb3B0aW1pemUgc2luZ2xlIHYtZm9yXG4gICAgaWYgKGNoaWxkcmVuLmxlbmd0aCA9PT0gMSAmJlxuICAgICAgZWwuZm9yICYmXG4gICAgICBlbC50YWcgIT09ICd0ZW1wbGF0ZScgJiZcbiAgICAgIGVsLnRhZyAhPT0gJ3Nsb3QnXG4gICAgKSB7XG4gICAgICBjb25zdCBub3JtYWxpemF0aW9uVHlwZSA9IGNoZWNrU2tpcFxuICAgICAgICA/IHN0YXRlLm1heWJlQ29tcG9uZW50KGVsKSA/IGAsMWAgOiBgLDBgXG4gICAgICAgIDogYGA7XG4gICAgICByZXR1cm4gYCR7KGFsdEdlbkVsZW1lbnQgfHwgZ2VuRWxlbWVudCkoZWwsIHN0YXRlKX0ke25vcm1hbGl6YXRpb25UeXBlfWBcbiAgICB9XG4gICAgY29uc3Qgbm9ybWFsaXphdGlvblR5cGUgPSBjaGVja1NraXBcbiAgICAgID8gZ2V0Tm9ybWFsaXphdGlvblR5cGUoY2hpbGRyZW4sIHN0YXRlLm1heWJlQ29tcG9uZW50KVxuICAgICAgOiAwO1xuICAgIGNvbnN0IGdlbiA9IGFsdEdlbk5vZGUgfHwgZ2VuTm9kZTtcbiAgICByZXR1cm4gYFske2NoaWxkcmVuLm1hcChjID0+IGdlbihjLCBzdGF0ZSkpLmpvaW4oJywnKX1dJHtcbiAgICAgIG5vcm1hbGl6YXRpb25UeXBlID8gYCwke25vcm1hbGl6YXRpb25UeXBlfWAgOiAnJ1xuICAgIH1gXG4gIH1cbn1cblxuLy8gZGV0ZXJtaW5lIHRoZSBub3JtYWxpemF0aW9uIG5lZWRlZCBmb3IgdGhlIGNoaWxkcmVuIGFycmF5LlxuLy8gMDogbm8gbm9ybWFsaXphdGlvbiBuZWVkZWRcbi8vIDE6IHNpbXBsZSBub3JtYWxpemF0aW9uIG5lZWRlZCAocG9zc2libGUgMS1sZXZlbCBkZWVwIG5lc3RlZCBhcnJheSlcbi8vIDI6IGZ1bGwgbm9ybWFsaXphdGlvbiBuZWVkZWRcbmZ1bmN0aW9uIGdldE5vcm1hbGl6YXRpb25UeXBlIChcbiAgY2hpbGRyZW4sXG4gIG1heWJlQ29tcG9uZW50XG4pIHtcbiAgbGV0IHJlcyA9IDA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBlbCA9IGNoaWxkcmVuW2ldO1xuICAgIGlmIChlbC50eXBlICE9PSAxKSB7XG4gICAgICBjb250aW51ZVxuICAgIH1cbiAgICBpZiAobmVlZHNOb3JtYWxpemF0aW9uKGVsKSB8fFxuICAgICAgICAoZWwuaWZDb25kaXRpb25zICYmIGVsLmlmQ29uZGl0aW9ucy5zb21lKGMgPT4gbmVlZHNOb3JtYWxpemF0aW9uKGMuYmxvY2spKSkpIHtcbiAgICAgIHJlcyA9IDI7XG4gICAgICBicmVha1xuICAgIH1cbiAgICBpZiAobWF5YmVDb21wb25lbnQoZWwpIHx8XG4gICAgICAgIChlbC5pZkNvbmRpdGlvbnMgJiYgZWwuaWZDb25kaXRpb25zLnNvbWUoYyA9PiBtYXliZUNvbXBvbmVudChjLmJsb2NrKSkpKSB7XG4gICAgICByZXMgPSAxO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIG5lZWRzTm9ybWFsaXphdGlvbiAoZWwpIHtcbiAgcmV0dXJuIGVsLmZvciAhPT0gdW5kZWZpbmVkIHx8IGVsLnRhZyA9PT0gJ3RlbXBsYXRlJyB8fCBlbC50YWcgPT09ICdzbG90J1xufVxuXG5mdW5jdGlvbiBnZW5Ob2RlIChub2RlLCBzdGF0ZSkge1xuICBpZiAobm9kZS50eXBlID09PSAxKSB7XG4gICAgcmV0dXJuIGdlbkVsZW1lbnQobm9kZSwgc3RhdGUpXG4gIH0gZWxzZSBpZiAobm9kZS50eXBlID09PSAzICYmIG5vZGUuaXNDb21tZW50KSB7XG4gICAgcmV0dXJuIGdlbkNvbW1lbnQobm9kZSlcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZ2VuVGV4dChub2RlKVxuICB9XG59XG5cbmZ1bmN0aW9uIGdlblRleHQgKHRleHQpIHtcbiAgcmV0dXJuIGBfdigke3RleHQudHlwZSA9PT0gMlxuICAgID8gdGV4dC5leHByZXNzaW9uIC8vIG5vIG5lZWQgZm9yICgpIGJlY2F1c2UgYWxyZWFkeSB3cmFwcGVkIGluIF9zKClcbiAgICA6IHRyYW5zZm9ybVNwZWNpYWxOZXdsaW5lcyhKU09OLnN0cmluZ2lmeSh0ZXh0LnRleHQpKVxuICB9KWBcbn1cblxuZnVuY3Rpb24gZ2VuQ29tbWVudCAoY29tbWVudCkge1xuICByZXR1cm4gYF9lKCR7SlNPTi5zdHJpbmdpZnkoY29tbWVudC50ZXh0KX0pYFxufVxuXG5mdW5jdGlvbiBnZW5TbG90IChlbCwgc3RhdGUpIHtcbiAgY29uc3Qgc2xvdE5hbWUgPSBlbC5zbG90TmFtZSB8fCAnXCJkZWZhdWx0XCInO1xuICBjb25zdCBjaGlsZHJlbiA9IGdlbkNoaWxkcmVuKGVsLCBzdGF0ZSk7XG4gIGxldCByZXMgPSBgX3QoJHtzbG90TmFtZX0ke2NoaWxkcmVuID8gYCwke2NoaWxkcmVufWAgOiAnJ31gO1xuICBjb25zdCBhdHRycyA9IGVsLmF0dHJzIHx8IGVsLmR5bmFtaWNBdHRyc1xuICAgID8gZ2VuUHJvcHMoKGVsLmF0dHJzIHx8IFtdKS5jb25jYXQoZWwuZHluYW1pY0F0dHJzIHx8IFtdKS5tYXAoYXR0ciA9PiAoe1xuICAgICAgICAvLyBzbG90IHByb3BzIGFyZSBjYW1lbGl6ZWRcbiAgICAgICAgbmFtZTogY2FtZWxpemUoYXR0ci5uYW1lKSxcbiAgICAgICAgdmFsdWU6IGF0dHIudmFsdWUsXG4gICAgICAgIGR5bmFtaWM6IGF0dHIuZHluYW1pY1xuICAgICAgfSkpKVxuICAgIDogbnVsbDtcbiAgY29uc3QgYmluZCQkMSA9IGVsLmF0dHJzTWFwWyd2LWJpbmQnXTtcbiAgaWYgKChhdHRycyB8fCBiaW5kJCQxKSAmJiAhY2hpbGRyZW4pIHtcbiAgICByZXMgKz0gYCxudWxsYDtcbiAgfVxuICBpZiAoYXR0cnMpIHtcbiAgICByZXMgKz0gYCwke2F0dHJzfWA7XG4gIH1cbiAgaWYgKGJpbmQkJDEpIHtcbiAgICByZXMgKz0gYCR7YXR0cnMgPyAnJyA6ICcsbnVsbCd9LCR7YmluZCQkMX1gO1xuICB9XG4gIHJldHVybiByZXMgKyAnKSdcbn1cblxuLy8gY29tcG9uZW50TmFtZSBpcyBlbC5jb21wb25lbnQsIHRha2UgaXQgYXMgYXJndW1lbnQgdG8gc2h1biBmbG93J3MgcGVzc2ltaXN0aWMgcmVmaW5lbWVudFxuZnVuY3Rpb24gZ2VuQ29tcG9uZW50IChcbiAgY29tcG9uZW50TmFtZSxcbiAgZWwsXG4gIHN0YXRlXG4pIHtcbiAgY29uc3QgY2hpbGRyZW4gPSBlbC5pbmxpbmVUZW1wbGF0ZSA/IG51bGwgOiBnZW5DaGlsZHJlbihlbCwgc3RhdGUsIHRydWUpO1xuICByZXR1cm4gYF9jKCR7Y29tcG9uZW50TmFtZX0sJHtnZW5EYXRhJDIoZWwsIHN0YXRlKX0ke1xuICAgIGNoaWxkcmVuID8gYCwke2NoaWxkcmVufWAgOiAnJ1xuICB9KWBcbn1cblxuZnVuY3Rpb24gZ2VuUHJvcHMgKHByb3BzKSB7XG4gIGxldCBzdGF0aWNQcm9wcyA9IGBgO1xuICBsZXQgZHluYW1pY1Byb3BzID0gYGA7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcHJvcHMubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBwcm9wID0gcHJvcHNbaV07XG4gICAgY29uc3QgdmFsdWUgPSB0cmFuc2Zvcm1TcGVjaWFsTmV3bGluZXMocHJvcC52YWx1ZSk7XG4gICAgaWYgKHByb3AuZHluYW1pYykge1xuICAgICAgZHluYW1pY1Byb3BzICs9IGAke3Byb3AubmFtZX0sJHt2YWx1ZX0sYDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RhdGljUHJvcHMgKz0gYFwiJHtwcm9wLm5hbWV9XCI6JHt2YWx1ZX0sYDtcbiAgICB9XG4gIH1cbiAgc3RhdGljUHJvcHMgPSBgeyR7c3RhdGljUHJvcHMuc2xpY2UoMCwgLTEpfX1gO1xuICBpZiAoZHluYW1pY1Byb3BzKSB7XG4gICAgcmV0dXJuIGBfZCgke3N0YXRpY1Byb3BzfSxbJHtkeW5hbWljUHJvcHMuc2xpY2UoMCwgLTEpfV0pYFxuICB9IGVsc2Uge1xuICAgIHJldHVybiBzdGF0aWNQcm9wc1xuICB9XG59XG5cbi8vICMzODk1LCAjNDI2OFxuZnVuY3Rpb24gdHJhbnNmb3JtU3BlY2lhbE5ld2xpbmVzICh0ZXh0KSB7XG4gIHJldHVybiB0ZXh0XG4gICAgLnJlcGxhY2UoL1xcdTIwMjgvZywgJ1xcXFx1MjAyOCcpXG4gICAgLnJlcGxhY2UoL1xcdTIwMjkvZywgJ1xcXFx1MjAyOScpXG59XG5cbi8qICAqL1xuXG5cblxuLy8gdGhlc2Uga2V5d29yZHMgc2hvdWxkIG5vdCBhcHBlYXIgaW5zaWRlIGV4cHJlc3Npb25zLCBidXQgb3BlcmF0b3JzIGxpa2Vcbi8vIHR5cGVvZiwgaW5zdGFuY2VvZiBhbmQgaW4gYXJlIGFsbG93ZWRcbmNvbnN0IHByb2hpYml0ZWRLZXl3b3JkUkUgPSBuZXcgUmVnRXhwKCdcXFxcYicgKyAoXG4gICdkbyxpZixmb3IsbGV0LG5ldyx0cnksdmFyLGNhc2UsZWxzZSx3aXRoLGF3YWl0LGJyZWFrLGNhdGNoLGNsYXNzLGNvbnN0LCcgK1xuICAnc3VwZXIsdGhyb3csd2hpbGUseWllbGQsZGVsZXRlLGV4cG9ydCxpbXBvcnQscmV0dXJuLHN3aXRjaCxkZWZhdWx0LCcgK1xuICAnZXh0ZW5kcyxmaW5hbGx5LGNvbnRpbnVlLGRlYnVnZ2VyLGZ1bmN0aW9uLGFyZ3VtZW50cydcbikuc3BsaXQoJywnKS5qb2luKCdcXFxcYnxcXFxcYicpICsgJ1xcXFxiJyk7XG5cbi8vIHRoZXNlIHVuYXJ5IG9wZXJhdG9ycyBzaG91bGQgbm90IGJlIHVzZWQgYXMgcHJvcGVydHkvbWV0aG9kIG5hbWVzXG5jb25zdCB1bmFyeU9wZXJhdG9yc1JFID0gbmV3IFJlZ0V4cCgnXFxcXGInICsgKFxuICAnZGVsZXRlLHR5cGVvZix2b2lkJ1xuKS5zcGxpdCgnLCcpLmpvaW4oJ1xcXFxzKlxcXFwoW15cXFxcKV0qXFxcXCl8XFxcXGInKSArICdcXFxccypcXFxcKFteXFxcXCldKlxcXFwpJyk7XG5cbi8vIHN0cmlwIHN0cmluZ3MgaW4gZXhwcmVzc2lvbnNcbmNvbnN0IHN0cmlwU3RyaW5nUkUgPSAvJyg/OlteJ1xcXFxdfFxcXFwuKSonfFwiKD86W15cIlxcXFxdfFxcXFwuKSpcInxgKD86W15gXFxcXF18XFxcXC4pKlxcJFxce3xcXH0oPzpbXmBcXFxcXXxcXFxcLikqYHxgKD86W15gXFxcXF18XFxcXC4pKmAvZztcblxuLy8gZGV0ZWN0IHByb2JsZW1hdGljIGV4cHJlc3Npb25zIGluIGEgdGVtcGxhdGVcbmZ1bmN0aW9uIGRldGVjdEVycm9ycyAoYXN0LCB3YXJuKSB7XG4gIGlmIChhc3QpIHtcbiAgICBjaGVja05vZGUoYXN0LCB3YXJuKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjaGVja05vZGUgKG5vZGUsIHdhcm4pIHtcbiAgaWYgKG5vZGUudHlwZSA9PT0gMSkge1xuICAgIGZvciAoY29uc3QgbmFtZSBpbiBub2RlLmF0dHJzTWFwKSB7XG4gICAgICBpZiAoZGlyUkUudGVzdChuYW1lKSkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IG5vZGUuYXR0cnNNYXBbbmFtZV07XG4gICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgIGNvbnN0IHJhbmdlID0gbm9kZS5yYXdBdHRyc01hcFtuYW1lXTtcbiAgICAgICAgICBpZiAobmFtZSA9PT0gJ3YtZm9yJykge1xuICAgICAgICAgICAgY2hlY2tGb3Iobm9kZSwgYHYtZm9yPVwiJHt2YWx1ZX1cImAsIHdhcm4sIHJhbmdlKTtcbiAgICAgICAgICB9IGVsc2UgaWYgKG9uUkUudGVzdChuYW1lKSkge1xuICAgICAgICAgICAgY2hlY2tFdmVudCh2YWx1ZSwgYCR7bmFtZX09XCIke3ZhbHVlfVwiYCwgd2FybiwgcmFuZ2UpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjaGVja0V4cHJlc3Npb24odmFsdWUsIGAke25hbWV9PVwiJHt2YWx1ZX1cImAsIHdhcm4sIHJhbmdlKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbm9kZS5jaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBjaGVja05vZGUobm9kZS5jaGlsZHJlbltpXSwgd2Fybik7XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2UgaWYgKG5vZGUudHlwZSA9PT0gMikge1xuICAgIGNoZWNrRXhwcmVzc2lvbihub2RlLmV4cHJlc3Npb24sIG5vZGUudGV4dCwgd2Fybiwgbm9kZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tFdmVudCAoZXhwLCB0ZXh0LCB3YXJuLCByYW5nZSkge1xuICBjb25zdCBzdGlwcGVkID0gZXhwLnJlcGxhY2Uoc3RyaXBTdHJpbmdSRSwgJycpO1xuICBjb25zdCBrZXl3b3JkTWF0Y2ggPSBzdGlwcGVkLm1hdGNoKHVuYXJ5T3BlcmF0b3JzUkUpO1xuICBpZiAoa2V5d29yZE1hdGNoICYmIHN0aXBwZWQuY2hhckF0KGtleXdvcmRNYXRjaC5pbmRleCAtIDEpICE9PSAnJCcpIHtcbiAgICB3YXJuKFxuICAgICAgYGF2b2lkIHVzaW5nIEphdmFTY3JpcHQgdW5hcnkgb3BlcmF0b3IgYXMgcHJvcGVydHkgbmFtZTogYCArXG4gICAgICBgXCIke2tleXdvcmRNYXRjaFswXX1cIiBpbiBleHByZXNzaW9uICR7dGV4dC50cmltKCl9YCxcbiAgICAgIHJhbmdlXG4gICAgKTtcbiAgfVxuICBjaGVja0V4cHJlc3Npb24oZXhwLCB0ZXh0LCB3YXJuLCByYW5nZSk7XG59XG5cbmZ1bmN0aW9uIGNoZWNrRm9yIChub2RlLCB0ZXh0LCB3YXJuLCByYW5nZSkge1xuICBjaGVja0V4cHJlc3Npb24obm9kZS5mb3IgfHwgJycsIHRleHQsIHdhcm4sIHJhbmdlKTtcbiAgY2hlY2tJZGVudGlmaWVyKG5vZGUuYWxpYXMsICd2LWZvciBhbGlhcycsIHRleHQsIHdhcm4sIHJhbmdlKTtcbiAgY2hlY2tJZGVudGlmaWVyKG5vZGUuaXRlcmF0b3IxLCAndi1mb3IgaXRlcmF0b3InLCB0ZXh0LCB3YXJuLCByYW5nZSk7XG4gIGNoZWNrSWRlbnRpZmllcihub2RlLml0ZXJhdG9yMiwgJ3YtZm9yIGl0ZXJhdG9yJywgdGV4dCwgd2FybiwgcmFuZ2UpO1xufVxuXG5mdW5jdGlvbiBjaGVja0lkZW50aWZpZXIgKFxuICBpZGVudCxcbiAgdHlwZSxcbiAgdGV4dCxcbiAgd2FybixcbiAgcmFuZ2Vcbikge1xuICBpZiAodHlwZW9mIGlkZW50ID09PSAnc3RyaW5nJykge1xuICAgIHRyeSB7XG4gICAgICBuZXcgRnVuY3Rpb24oYHZhciAke2lkZW50fT1fYCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgd2FybihgaW52YWxpZCAke3R5cGV9IFwiJHtpZGVudH1cIiBpbiBleHByZXNzaW9uOiAke3RleHQudHJpbSgpfWAsIHJhbmdlKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gY2hlY2tFeHByZXNzaW9uIChleHAsIHRleHQsIHdhcm4sIHJhbmdlKSB7XG4gIHRyeSB7XG4gICAgbmV3IEZ1bmN0aW9uKGByZXR1cm4gJHtleHB9YCk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBjb25zdCBrZXl3b3JkTWF0Y2ggPSBleHAucmVwbGFjZShzdHJpcFN0cmluZ1JFLCAnJykubWF0Y2gocHJvaGliaXRlZEtleXdvcmRSRSk7XG4gICAgaWYgKGtleXdvcmRNYXRjaCkge1xuICAgICAgd2FybihcbiAgICAgICAgYGF2b2lkIHVzaW5nIEphdmFTY3JpcHQga2V5d29yZCBhcyBwcm9wZXJ0eSBuYW1lOiBgICtcbiAgICAgICAgYFwiJHtrZXl3b3JkTWF0Y2hbMF19XCJcXG4gIFJhdyBleHByZXNzaW9uOiAke3RleHQudHJpbSgpfWAsXG4gICAgICAgIHJhbmdlXG4gICAgICApO1xuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuKFxuICAgICAgICBgaW52YWxpZCBleHByZXNzaW9uOiAke2UubWVzc2FnZX0gaW5cXG5cXG5gICtcbiAgICAgICAgYCAgICAke2V4cH1cXG5cXG5gICtcbiAgICAgICAgYCAgUmF3IGV4cHJlc3Npb246ICR7dGV4dC50cmltKCl9XFxuYCxcbiAgICAgICAgcmFuZ2VcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbi8qICAqL1xuXG5jb25zdCByYW5nZSA9IDI7XG5cbmZ1bmN0aW9uIGdlbmVyYXRlQ29kZUZyYW1lIChcbiAgc291cmNlLFxuICBzdGFydCA9IDAsXG4gIGVuZCA9IHNvdXJjZS5sZW5ndGhcbikge1xuICBjb25zdCBsaW5lcyA9IHNvdXJjZS5zcGxpdCgvXFxyP1xcbi8pO1xuICBsZXQgY291bnQgPSAwO1xuICBjb25zdCByZXMgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgIGNvdW50ICs9IGxpbmVzW2ldLmxlbmd0aCArIDE7XG4gICAgaWYgKGNvdW50ID49IHN0YXJ0KSB7XG4gICAgICBmb3IgKGxldCBqID0gaSAtIHJhbmdlOyBqIDw9IGkgKyByYW5nZSB8fCBlbmQgPiBjb3VudDsgaisrKSB7XG4gICAgICAgIGlmIChqIDwgMCB8fCBqID49IGxpbmVzLmxlbmd0aCkgY29udGludWVcbiAgICAgICAgcmVzLnB1c2goYCR7aiArIDF9JHtyZXBlYXQoYCBgLCAzIC0gU3RyaW5nKGogKyAxKS5sZW5ndGgpfXwgICR7bGluZXNbal19YCk7XG4gICAgICAgIGNvbnN0IGxpbmVMZW5ndGggPSBsaW5lc1tqXS5sZW5ndGg7XG4gICAgICAgIGlmIChqID09PSBpKSB7XG4gICAgICAgICAgLy8gcHVzaCB1bmRlcmxpbmVcbiAgICAgICAgICBjb25zdCBwYWQgPSBzdGFydCAtIChjb3VudCAtIGxpbmVMZW5ndGgpICsgMTtcbiAgICAgICAgICBjb25zdCBsZW5ndGggPSBlbmQgPiBjb3VudCA/IGxpbmVMZW5ndGggLSBwYWQgOiBlbmQgLSBzdGFydDtcbiAgICAgICAgICByZXMucHVzaChgICAgfCAgYCArIHJlcGVhdChgIGAsIHBhZCkgKyByZXBlYXQoYF5gLCBsZW5ndGgpKTtcbiAgICAgICAgfSBlbHNlIGlmIChqID4gaSkge1xuICAgICAgICAgIGlmIChlbmQgPiBjb3VudCkge1xuICAgICAgICAgICAgY29uc3QgbGVuZ3RoID0gTWF0aC5taW4oZW5kIC0gY291bnQsIGxpbmVMZW5ndGgpO1xuICAgICAgICAgICAgcmVzLnB1c2goYCAgIHwgIGAgKyByZXBlYXQoYF5gLCBsZW5ndGgpKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY291bnQgKz0gbGluZUxlbmd0aCArIDE7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG4gIHJldHVybiByZXMuam9pbignXFxuJylcbn1cblxuZnVuY3Rpb24gcmVwZWF0IChzdHIsIG4pIHtcbiAgbGV0IHJlc3VsdCA9ICcnO1xuICB3aGlsZSAodHJ1ZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgaWYgKG4gJiAxKSByZXN1bHQgKz0gc3RyO1xuICAgIG4gPj4+PSAxO1xuICAgIGlmIChuIDw9IDApIGJyZWFrXG4gICAgc3RyICs9IHN0cjtcbiAgfVxuICByZXR1cm4gcmVzdWx0XG59XG5cbi8qICAqL1xuXG5cblxuZnVuY3Rpb24gY3JlYXRlRnVuY3Rpb24gKGNvZGUsIGVycm9ycykge1xuICB0cnkge1xuICAgIHJldHVybiBuZXcgRnVuY3Rpb24oY29kZSlcbiAgfSBjYXRjaCAoZXJyKSB7XG4gICAgZXJyb3JzLnB1c2goeyBlcnIsIGNvZGUgfSk7XG4gICAgcmV0dXJuIG5vb3BcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVDb21waWxlVG9GdW5jdGlvbkZuIChjb21waWxlKSB7XG4gIGNvbnN0IGNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcblxuICByZXR1cm4gZnVuY3Rpb24gY29tcGlsZVRvRnVuY3Rpb25zIChcbiAgICB0ZW1wbGF0ZSxcbiAgICBvcHRpb25zLFxuICAgIHZtXG4gICkge1xuICAgIG9wdGlvbnMgPSBleHRlbmQoe30sIG9wdGlvbnMpO1xuICAgIGNvbnN0IHdhcm4kJDEgPSBvcHRpb25zLndhcm4gfHwgd2FybjtcbiAgICBkZWxldGUgb3B0aW9ucy53YXJuO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAge1xuICAgICAgLy8gZGV0ZWN0IHBvc3NpYmxlIENTUCByZXN0cmljdGlvblxuICAgICAgdHJ5IHtcbiAgICAgICAgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gMScpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICBpZiAoZS50b1N0cmluZygpLm1hdGNoKC91bnNhZmUtZXZhbHxDU1AvKSkge1xuICAgICAgICAgIHdhcm4kJDEoXG4gICAgICAgICAgICAnSXQgc2VlbXMgeW91IGFyZSB1c2luZyB0aGUgc3RhbmRhbG9uZSBidWlsZCBvZiBWdWUuanMgaW4gYW4gJyArXG4gICAgICAgICAgICAnZW52aXJvbm1lbnQgd2l0aCBDb250ZW50IFNlY3VyaXR5IFBvbGljeSB0aGF0IHByb2hpYml0cyB1bnNhZmUtZXZhbC4gJyArXG4gICAgICAgICAgICAnVGhlIHRlbXBsYXRlIGNvbXBpbGVyIGNhbm5vdCB3b3JrIGluIHRoaXMgZW52aXJvbm1lbnQuIENvbnNpZGVyICcgK1xuICAgICAgICAgICAgJ3JlbGF4aW5nIHRoZSBwb2xpY3kgdG8gYWxsb3cgdW5zYWZlLWV2YWwgb3IgcHJlLWNvbXBpbGluZyB5b3VyICcgK1xuICAgICAgICAgICAgJ3RlbXBsYXRlcyBpbnRvIHJlbmRlciBmdW5jdGlvbnMuJ1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBjaGVjayBjYWNoZVxuICAgIGNvbnN0IGtleSA9IG9wdGlvbnMuZGVsaW1pdGVyc1xuICAgICAgPyBTdHJpbmcob3B0aW9ucy5kZWxpbWl0ZXJzKSArIHRlbXBsYXRlXG4gICAgICA6IHRlbXBsYXRlO1xuICAgIGlmIChjYWNoZVtrZXldKSB7XG4gICAgICByZXR1cm4gY2FjaGVba2V5XVxuICAgIH1cblxuICAgIC8vIGNvbXBpbGVcbiAgICBjb25zdCBjb21waWxlZCA9IGNvbXBpbGUodGVtcGxhdGUsIG9wdGlvbnMpO1xuXG4gICAgLy8gY2hlY2sgY29tcGlsYXRpb24gZXJyb3JzL3RpcHNcbiAgICB7XG4gICAgICBpZiAoY29tcGlsZWQuZXJyb3JzICYmIGNvbXBpbGVkLmVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgICBjb21waWxlZC5lcnJvcnMuZm9yRWFjaChlID0+IHtcbiAgICAgICAgICAgIHdhcm4kJDEoXG4gICAgICAgICAgICAgIGBFcnJvciBjb21waWxpbmcgdGVtcGxhdGU6XFxuXFxuJHtlLm1zZ31cXG5cXG5gICtcbiAgICAgICAgICAgICAgZ2VuZXJhdGVDb2RlRnJhbWUodGVtcGxhdGUsIGUuc3RhcnQsIGUuZW5kKSxcbiAgICAgICAgICAgICAgdm1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2FybiQkMShcbiAgICAgICAgICAgIGBFcnJvciBjb21waWxpbmcgdGVtcGxhdGU6XFxuXFxuJHt0ZW1wbGF0ZX1cXG5cXG5gICtcbiAgICAgICAgICAgIGNvbXBpbGVkLmVycm9ycy5tYXAoZSA9PiBgLSAke2V9YCkuam9pbignXFxuJykgKyAnXFxuJyxcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNvbXBpbGVkLnRpcHMgJiYgY29tcGlsZWQudGlwcy5sZW5ndGgpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgICBjb21waWxlZC50aXBzLmZvckVhY2goZSA9PiB0aXAoZS5tc2csIHZtKSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29tcGlsZWQudGlwcy5mb3JFYWNoKG1zZyA9PiB0aXAobXNnLCB2bSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gdHVybiBjb2RlIGludG8gZnVuY3Rpb25zXG4gICAgY29uc3QgcmVzID0ge307XG4gICAgY29uc3QgZm5HZW5FcnJvcnMgPSBbXTtcbiAgICByZXMucmVuZGVyID0gY3JlYXRlRnVuY3Rpb24oY29tcGlsZWQucmVuZGVyLCBmbkdlbkVycm9ycyk7XG4gICAgcmVzLnN0YXRpY1JlbmRlckZucyA9IGNvbXBpbGVkLnN0YXRpY1JlbmRlckZucy5tYXAoY29kZSA9PiB7XG4gICAgICByZXR1cm4gY3JlYXRlRnVuY3Rpb24oY29kZSwgZm5HZW5FcnJvcnMpXG4gICAgfSk7XG5cbiAgICAvLyBjaGVjayBmdW5jdGlvbiBnZW5lcmF0aW9uIGVycm9ycy5cbiAgICAvLyB0aGlzIHNob3VsZCBvbmx5IGhhcHBlbiBpZiB0aGVyZSBpcyBhIGJ1ZyBpbiB0aGUgY29tcGlsZXIgaXRzZWxmLlxuICAgIC8vIG1vc3RseSBmb3IgY29kZWdlbiBkZXZlbG9wbWVudCB1c2VcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICB7XG4gICAgICBpZiAoKCFjb21waWxlZC5lcnJvcnMgfHwgIWNvbXBpbGVkLmVycm9ycy5sZW5ndGgpICYmIGZuR2VuRXJyb3JzLmxlbmd0aCkge1xuICAgICAgICB3YXJuJCQxKFxuICAgICAgICAgIGBGYWlsZWQgdG8gZ2VuZXJhdGUgcmVuZGVyIGZ1bmN0aW9uOlxcblxcbmAgK1xuICAgICAgICAgIGZuR2VuRXJyb3JzLm1hcCgoeyBlcnIsIGNvZGUgfSkgPT4gYCR7ZXJyLnRvU3RyaW5nKCl9IGluXFxuXFxuJHtjb2RlfVxcbmApLmpvaW4oJ1xcbicpLFxuICAgICAgICAgIHZtXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIChjYWNoZVtrZXldID0gcmVzKVxuICB9XG59XG5cbi8qICAqL1xuXG5mdW5jdGlvbiBjcmVhdGVDb21waWxlckNyZWF0b3IgKGJhc2VDb21waWxlKSB7XG4gIHJldHVybiBmdW5jdGlvbiBjcmVhdGVDb21waWxlciAoYmFzZU9wdGlvbnMpIHtcbiAgICBmdW5jdGlvbiBjb21waWxlIChcbiAgICAgIHRlbXBsYXRlLFxuICAgICAgb3B0aW9uc1xuICAgICkge1xuICAgICAgY29uc3QgZmluYWxPcHRpb25zID0gT2JqZWN0LmNyZWF0ZShiYXNlT3B0aW9ucyk7XG4gICAgICBjb25zdCBlcnJvcnMgPSBbXTtcbiAgICAgIGNvbnN0IHRpcHMgPSBbXTtcblxuICAgICAgbGV0IHdhcm4gPSAobXNnLCByYW5nZSwgdGlwKSA9PiB7XG4gICAgICAgICh0aXAgPyB0aXBzIDogZXJyb3JzKS5wdXNoKG1zZyk7XG4gICAgICB9O1xuXG4gICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICBpZiAob3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgICAgIGNvbnN0IGxlYWRpbmdTcGFjZUxlbmd0aCA9IHRlbXBsYXRlLm1hdGNoKC9eXFxzKi8pWzBdLmxlbmd0aDtcblxuICAgICAgICAgIHdhcm4gPSAobXNnLCByYW5nZSwgdGlwKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBkYXRhID0geyBtc2cgfTtcbiAgICAgICAgICAgIGlmIChyYW5nZSkge1xuICAgICAgICAgICAgICBpZiAocmFuZ2Uuc3RhcnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGRhdGEuc3RhcnQgPSByYW5nZS5zdGFydCArIGxlYWRpbmdTcGFjZUxlbmd0aDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpZiAocmFuZ2UuZW5kICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBkYXRhLmVuZCA9IHJhbmdlLmVuZCArIGxlYWRpbmdTcGFjZUxlbmd0aDtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgKHRpcCA/IHRpcHMgOiBlcnJvcnMpLnB1c2goZGF0YSk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICAvLyBtZXJnZSBjdXN0b20gbW9kdWxlc1xuICAgICAgICBpZiAob3B0aW9ucy5tb2R1bGVzKSB7XG4gICAgICAgICAgZmluYWxPcHRpb25zLm1vZHVsZXMgPVxuICAgICAgICAgICAgKGJhc2VPcHRpb25zLm1vZHVsZXMgfHwgW10pLmNvbmNhdChvcHRpb25zLm1vZHVsZXMpO1xuICAgICAgICB9XG4gICAgICAgIC8vIG1lcmdlIGN1c3RvbSBkaXJlY3RpdmVzXG4gICAgICAgIGlmIChvcHRpb25zLmRpcmVjdGl2ZXMpIHtcbiAgICAgICAgICBmaW5hbE9wdGlvbnMuZGlyZWN0aXZlcyA9IGV4dGVuZChcbiAgICAgICAgICAgIE9iamVjdC5jcmVhdGUoYmFzZU9wdGlvbnMuZGlyZWN0aXZlcyB8fCBudWxsKSxcbiAgICAgICAgICAgIG9wdGlvbnMuZGlyZWN0aXZlc1xuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gY29weSBvdGhlciBvcHRpb25zXG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIG9wdGlvbnMpIHtcbiAgICAgICAgICBpZiAoa2V5ICE9PSAnbW9kdWxlcycgJiYga2V5ICE9PSAnZGlyZWN0aXZlcycpIHtcbiAgICAgICAgICAgIGZpbmFsT3B0aW9uc1trZXldID0gb3B0aW9uc1trZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmaW5hbE9wdGlvbnMud2FybiA9IHdhcm47XG5cbiAgICAgIGNvbnN0IGNvbXBpbGVkID0gYmFzZUNvbXBpbGUodGVtcGxhdGUudHJpbSgpLCBmaW5hbE9wdGlvbnMpO1xuICAgICAge1xuICAgICAgICBkZXRlY3RFcnJvcnMoY29tcGlsZWQuYXN0LCB3YXJuKTtcbiAgICAgIH1cbiAgICAgIGNvbXBpbGVkLmVycm9ycyA9IGVycm9ycztcbiAgICAgIGNvbXBpbGVkLnRpcHMgPSB0aXBzO1xuICAgICAgcmV0dXJuIGNvbXBpbGVkXG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbXBpbGUsXG4gICAgICBjb21waWxlVG9GdW5jdGlvbnM6IGNyZWF0ZUNvbXBpbGVUb0Z1bmN0aW9uRm4oY29tcGlsZSlcbiAgICB9XG4gIH1cbn1cblxuLyogICovXG5cbi8vIGBjcmVhdGVDb21waWxlckNyZWF0b3JgIGFsbG93cyBjcmVhdGluZyBjb21waWxlcnMgdGhhdCB1c2UgYWx0ZXJuYXRpdmVcbi8vIHBhcnNlci9vcHRpbWl6ZXIvY29kZWdlbiwgZS5nIHRoZSBTU1Igb3B0aW1pemluZyBjb21waWxlci5cbi8vIEhlcmUgd2UganVzdCBleHBvcnQgYSBkZWZhdWx0IGNvbXBpbGVyIHVzaW5nIHRoZSBkZWZhdWx0IHBhcnRzLlxuY29uc3QgY3JlYXRlQ29tcGlsZXIgPSBjcmVhdGVDb21waWxlckNyZWF0b3IoZnVuY3Rpb24gYmFzZUNvbXBpbGUgKFxuICB0ZW1wbGF0ZSxcbiAgb3B0aW9uc1xuKSB7XG4gIGNvbnN0IGFzdCA9IHBhcnNlKHRlbXBsYXRlLnRyaW0oKSwgb3B0aW9ucyk7XG4gIGlmIChvcHRpb25zLm9wdGltaXplICE9PSBmYWxzZSkge1xuICAgIG9wdGltaXplKGFzdCwgb3B0aW9ucyk7XG4gIH1cbiAgY29uc3QgY29kZSA9IGdlbmVyYXRlKGFzdCwgb3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgYXN0LFxuICAgIHJlbmRlcjogY29kZS5yZW5kZXIsXG4gICAgc3RhdGljUmVuZGVyRm5zOiBjb2RlLnN0YXRpY1JlbmRlckZuc1xuICB9XG59KTtcblxuLyogICovXG5cbmNvbnN0IHsgY29tcGlsZSwgY29tcGlsZVRvRnVuY3Rpb25zIH0gPSBjcmVhdGVDb21waWxlcihiYXNlT3B0aW9ucyk7XG5cbi8qICAqL1xuXG4vLyBjaGVjayB3aGV0aGVyIGN1cnJlbnQgYnJvd3NlciBlbmNvZGVzIGEgY2hhciBpbnNpZGUgYXR0cmlidXRlIHZhbHVlc1xubGV0IGRpdjtcbmZ1bmN0aW9uIGdldFNob3VsZERlY29kZSAoaHJlZikge1xuICBkaXYgPSBkaXYgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gIGRpdi5pbm5lckhUTUwgPSBocmVmID8gYDxhIGhyZWY9XCJcXG5cIi8+YCA6IGA8ZGl2IGE9XCJcXG5cIi8+YDtcbiAgcmV0dXJuIGRpdi5pbm5lckhUTUwuaW5kZXhPZignJiMxMDsnKSA+IDBcbn1cblxuLy8gIzM2NjM6IElFIGVuY29kZXMgbmV3bGluZXMgaW5zaWRlIGF0dHJpYnV0ZSB2YWx1ZXMgd2hpbGUgb3RoZXIgYnJvd3NlcnMgZG9uJ3RcbmNvbnN0IHNob3VsZERlY29kZU5ld2xpbmVzID0gaW5Ccm93c2VyID8gZ2V0U2hvdWxkRGVjb2RlKGZhbHNlKSA6IGZhbHNlO1xuLy8gIzY4Mjg6IGNocm9tZSBlbmNvZGVzIGNvbnRlbnQgaW4gYVtocmVmXVxuY29uc3Qgc2hvdWxkRGVjb2RlTmV3bGluZXNGb3JIcmVmID0gaW5Ccm93c2VyID8gZ2V0U2hvdWxkRGVjb2RlKHRydWUpIDogZmFsc2U7XG5cbi8qICAqL1xuXG5jb25zdCBpZFRvVGVtcGxhdGUgPSBjYWNoZWQoaWQgPT4ge1xuICBjb25zdCBlbCA9IHF1ZXJ5KGlkKTtcbiAgcmV0dXJuIGVsICYmIGVsLmlubmVySFRNTFxufSk7XG5cbmNvbnN0IG1vdW50ID0gVnVlLnByb3RvdHlwZS4kbW91bnQ7XG5WdWUucHJvdG90eXBlLiRtb3VudCA9IGZ1bmN0aW9uIChcbiAgZWwsXG4gIGh5ZHJhdGluZ1xuKSB7XG4gIGVsID0gZWwgJiYgcXVlcnkoZWwpO1xuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICBpZiAoZWwgPT09IGRvY3VtZW50LmJvZHkgfHwgZWwgPT09IGRvY3VtZW50LmRvY3VtZW50RWxlbWVudCkge1xuICAgIHdhcm4oXG4gICAgICBgRG8gbm90IG1vdW50IFZ1ZSB0byA8aHRtbD4gb3IgPGJvZHk+IC0gbW91bnQgdG8gbm9ybWFsIGVsZW1lbnRzIGluc3RlYWQuYFxuICAgICk7XG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIGNvbnN0IG9wdGlvbnMgPSB0aGlzLiRvcHRpb25zO1xuICAvLyByZXNvbHZlIHRlbXBsYXRlL2VsIGFuZCBjb252ZXJ0IHRvIHJlbmRlciBmdW5jdGlvblxuICBpZiAoIW9wdGlvbnMucmVuZGVyKSB7XG4gICAgbGV0IHRlbXBsYXRlID0gb3B0aW9ucy50ZW1wbGF0ZTtcbiAgICBpZiAodGVtcGxhdGUpIHtcbiAgICAgIGlmICh0eXBlb2YgdGVtcGxhdGUgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0ZW1wbGF0ZS5jaGFyQXQoMCkgPT09ICcjJykge1xuICAgICAgICAgIHRlbXBsYXRlID0gaWRUb1RlbXBsYXRlKHRlbXBsYXRlKTtcbiAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICBpZiAoIXRlbXBsYXRlKSB7XG4gICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICBgVGVtcGxhdGUgZWxlbWVudCBub3QgZm91bmQgb3IgaXMgZW1wdHk6ICR7b3B0aW9ucy50ZW1wbGF0ZX1gLFxuICAgICAgICAgICAgICB0aGlzXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmICh0ZW1wbGF0ZS5ub2RlVHlwZSkge1xuICAgICAgICB0ZW1wbGF0ZSA9IHRlbXBsYXRlLmlubmVySFRNTDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHtcbiAgICAgICAgICB3YXJuKCdpbnZhbGlkIHRlbXBsYXRlIG9wdGlvbjonICsgdGVtcGxhdGUsIHRoaXMpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzXG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChlbCkge1xuICAgICAgdGVtcGxhdGUgPSBnZXRPdXRlckhUTUwoZWwpO1xuICAgIH1cbiAgICBpZiAodGVtcGxhdGUpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICAgIG1hcmsoJ2NvbXBpbGUnKTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9ID0gY29tcGlsZVRvRnVuY3Rpb25zKHRlbXBsYXRlLCB7XG4gICAgICAgIG91dHB1dFNvdXJjZVJhbmdlOiBcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyxcbiAgICAgICAgc2hvdWxkRGVjb2RlTmV3bGluZXMsXG4gICAgICAgIHNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZixcbiAgICAgICAgZGVsaW1pdGVyczogb3B0aW9ucy5kZWxpbWl0ZXJzLFxuICAgICAgICBjb21tZW50czogb3B0aW9ucy5jb21tZW50c1xuICAgICAgfSwgdGhpcyk7XG4gICAgICBvcHRpb25zLnJlbmRlciA9IHJlbmRlcjtcbiAgICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gc3RhdGljUmVuZGVyRm5zO1xuXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChjb25maWcucGVyZm9ybWFuY2UgJiYgbWFyaykge1xuICAgICAgICBtYXJrKCdjb21waWxlIGVuZCcpO1xuICAgICAgICBtZWFzdXJlKGB2dWUgJHt0aGlzLl9uYW1lfSBjb21waWxlYCwgJ2NvbXBpbGUnLCAnY29tcGlsZSBlbmQnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIG1vdW50LmNhbGwodGhpcywgZWwsIGh5ZHJhdGluZylcbn07XG5cbi8qKlxuICogR2V0IG91dGVySFRNTCBvZiBlbGVtZW50cywgdGFraW5nIGNhcmVcbiAqIG9mIFNWRyBlbGVtZW50cyBpbiBJRSBhcyB3ZWxsLlxuICovXG5mdW5jdGlvbiBnZXRPdXRlckhUTUwgKGVsKSB7XG4gIGlmIChlbC5vdXRlckhUTUwpIHtcbiAgICByZXR1cm4gZWwub3V0ZXJIVE1MXG4gIH0gZWxzZSB7XG4gICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgY29udGFpbmVyLmFwcGVuZENoaWxkKGVsLmNsb25lTm9kZSh0cnVlKSk7XG4gICAgcmV0dXJuIGNvbnRhaW5lci5pbm5lckhUTUxcbiAgfVxufVxuXG5WdWUuY29tcGlsZSA9IGNvbXBpbGVUb0Z1bmN0aW9ucztcblxuZXhwb3J0IGRlZmF1bHQgVnVlO1xuIiwiPHRlbXBsYXRlPlxuICA8ZGl2PlxuICAgIDxzZWxlY3QgY2xhc3M9J3NlbGVjdCcgdi1tb2RlbD0nc2VsZWN0ZWQnIEBpbnB1dD0nZXZlbnQgPT4geyAkZW1pdChcImlucHV0XCIsIGV2ZW50LnRhcmdldC52YWx1ZSkgfSc+XG4gICAgICA8b3B0aW9uIHYtZm9yPSdvcHRpb24gaW4gb3B0aW9ucycgOmtleT0nb3B0aW9uLnZhbHVlJyA6dmFsdWU9J29wdGlvbi52YWx1ZSc+XG4gICAgICAgIHt7IG9wdGlvbi50ZXh0IH19XG4gICAgICA8L29wdGlvbj5cbiAgICA8L3NlbGVjdD5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuXG48c3R5bGU+PC9zdHlsZT5cblxuPHNjcmlwdD5cbiAgZXhwb3J0IGRlZmF1bHQge1xuICAgIHByb3BzOiBbJ29wdGlvbnMnLCAndmFsdWUnXSxcbiAgICBkYXRhKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2VsZWN0ZWQ6IG51bGwsXG4gICAgICB9XG4gICAgfSxcbiAgICBtb3VudGVkKCkge1xuICAgICAgdGhpcy5zZWxlY3RlZCA9IHRoaXMudmFsdWU7XG4gICAgfSxcbiAgICB3YXRjaDoge1xuICAgICAgdmFsdWU6IGZ1bmN0aW9uKG5ld1ZhbHVlKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWQgPSBuZXdWYWx1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbjwvc2NyaXB0PiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gbm9ybWFsaXplQ29tcG9uZW50KHRlbXBsYXRlLCBzdHlsZSwgc2NyaXB0LCBzY29wZUlkLCBpc0Z1bmN0aW9uYWxUZW1wbGF0ZSwgbW9kdWxlSWRlbnRpZmllclxuLyogc2VydmVyIG9ubHkgKi9cbiwgc2hhZG93TW9kZSwgY3JlYXRlSW5qZWN0b3IsIGNyZWF0ZUluamVjdG9yU1NSLCBjcmVhdGVJbmplY3RvclNoYWRvdykge1xuICBpZiAodHlwZW9mIHNoYWRvd01vZGUgIT09ICdib29sZWFuJykge1xuICAgIGNyZWF0ZUluamVjdG9yU1NSID0gY3JlYXRlSW5qZWN0b3I7XG4gICAgY3JlYXRlSW5qZWN0b3IgPSBzaGFkb3dNb2RlO1xuICAgIHNoYWRvd01vZGUgPSBmYWxzZTtcbiAgfSAvLyBWdWUuZXh0ZW5kIGNvbnN0cnVjdG9yIGV4cG9ydCBpbnRlcm9wLlxuXG5cbiAgdmFyIG9wdGlvbnMgPSB0eXBlb2Ygc2NyaXB0ID09PSAnZnVuY3Rpb24nID8gc2NyaXB0Lm9wdGlvbnMgOiBzY3JpcHQ7IC8vIHJlbmRlciBmdW5jdGlvbnNcblxuICBpZiAodGVtcGxhdGUgJiYgdGVtcGxhdGUucmVuZGVyKSB7XG4gICAgb3B0aW9ucy5yZW5kZXIgPSB0ZW1wbGF0ZS5yZW5kZXI7XG4gICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSB0ZW1wbGF0ZS5zdGF0aWNSZW5kZXJGbnM7XG4gICAgb3B0aW9ucy5fY29tcGlsZWQgPSB0cnVlOyAvLyBmdW5jdGlvbmFsIHRlbXBsYXRlXG5cbiAgICBpZiAoaXNGdW5jdGlvbmFsVGVtcGxhdGUpIHtcbiAgICAgIG9wdGlvbnMuZnVuY3Rpb25hbCA9IHRydWU7XG4gICAgfVxuICB9IC8vIHNjb3BlZElkXG5cblxuICBpZiAoc2NvcGVJZCkge1xuICAgIG9wdGlvbnMuX3Njb3BlSWQgPSBzY29wZUlkO1xuICB9XG5cbiAgdmFyIGhvb2s7XG5cbiAgaWYgKG1vZHVsZUlkZW50aWZpZXIpIHtcbiAgICAvLyBzZXJ2ZXIgYnVpbGRcbiAgICBob29rID0gZnVuY3Rpb24gaG9vayhjb250ZXh0KSB7XG4gICAgICAvLyAyLjMgaW5qZWN0aW9uXG4gICAgICBjb250ZXh0ID0gY29udGV4dCB8fCAvLyBjYWNoZWQgY2FsbFxuICAgICAgdGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dCB8fCAvLyBzdGF0ZWZ1bFxuICAgICAgdGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuJHZub2RlICYmIHRoaXMucGFyZW50LiR2bm9kZS5zc3JDb250ZXh0OyAvLyBmdW5jdGlvbmFsXG4gICAgICAvLyAyLjIgd2l0aCBydW5Jbk5ld0NvbnRleHQ6IHRydWVcblxuICAgICAgaWYgKCFjb250ZXh0ICYmIHR5cGVvZiBfX1ZVRV9TU1JfQ09OVEVYVF9fICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICBjb250ZXh0ID0gX19WVUVfU1NSX0NPTlRFWFRfXztcbiAgICAgIH0gLy8gaW5qZWN0IGNvbXBvbmVudCBzdHlsZXNcblxuXG4gICAgICBpZiAoc3R5bGUpIHtcbiAgICAgICAgc3R5bGUuY2FsbCh0aGlzLCBjcmVhdGVJbmplY3RvclNTUihjb250ZXh0KSk7XG4gICAgICB9IC8vIHJlZ2lzdGVyIGNvbXBvbmVudCBtb2R1bGUgaWRlbnRpZmllciBmb3IgYXN5bmMgY2h1bmsgaW5mZXJlbmNlXG5cblxuICAgICAgaWYgKGNvbnRleHQgJiYgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMpIHtcbiAgICAgICAgY29udGV4dC5fcmVnaXN0ZXJlZENvbXBvbmVudHMuYWRkKG1vZHVsZUlkZW50aWZpZXIpO1xuICAgICAgfVxuICAgIH07IC8vIHVzZWQgYnkgc3NyIGluIGNhc2UgY29tcG9uZW50IGlzIGNhY2hlZCBhbmQgYmVmb3JlQ3JlYXRlXG4gICAgLy8gbmV2ZXIgZ2V0cyBjYWxsZWRcblxuXG4gICAgb3B0aW9ucy5fc3NyUmVnaXN0ZXIgPSBob29rO1xuICB9IGVsc2UgaWYgKHN0eWxlKSB7XG4gICAgaG9vayA9IHNoYWRvd01vZGUgPyBmdW5jdGlvbiAoKSB7XG4gICAgICBzdHlsZS5jYWxsKHRoaXMsIGNyZWF0ZUluamVjdG9yU2hhZG93KHRoaXMuJHJvb3QuJG9wdGlvbnMuc2hhZG93Um9vdCkpO1xuICAgIH0gOiBmdW5jdGlvbiAoY29udGV4dCkge1xuICAgICAgc3R5bGUuY2FsbCh0aGlzLCBjcmVhdGVJbmplY3Rvcihjb250ZXh0KSk7XG4gICAgfTtcbiAgfVxuXG4gIGlmIChob29rKSB7XG4gICAgaWYgKG9wdGlvbnMuZnVuY3Rpb25hbCkge1xuICAgICAgLy8gcmVnaXN0ZXIgZm9yIGZ1bmN0aW9uYWwgY29tcG9uZW50IGluIHZ1ZSBmaWxlXG4gICAgICB2YXIgb3JpZ2luYWxSZW5kZXIgPSBvcHRpb25zLnJlbmRlcjtcblxuICAgICAgb3B0aW9ucy5yZW5kZXIgPSBmdW5jdGlvbiByZW5kZXJXaXRoU3R5bGVJbmplY3Rpb24oaCwgY29udGV4dCkge1xuICAgICAgICBob29rLmNhbGwoY29udGV4dCk7XG4gICAgICAgIHJldHVybiBvcmlnaW5hbFJlbmRlcihoLCBjb250ZXh0KTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGluamVjdCBjb21wb25lbnQgcmVnaXN0cmF0aW9uIGFzIGJlZm9yZUNyZWF0ZSBob29rXG4gICAgICB2YXIgZXhpc3RpbmcgPSBvcHRpb25zLmJlZm9yZUNyZWF0ZTtcbiAgICAgIG9wdGlvbnMuYmVmb3JlQ3JlYXRlID0gZXhpc3RpbmcgPyBbXS5jb25jYXQoZXhpc3RpbmcsIGhvb2spIDogW2hvb2tdO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBzY3JpcHQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gbm9ybWFsaXplQ29tcG9uZW50O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bm9ybWFsaXplLWNvbXBvbmVudC5qcy5tYXBcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzT2xkSUUgPSB0eXBlb2YgbmF2aWdhdG9yICE9PSAndW5kZWZpbmVkJyAmJiAvbXNpZSBbNi05XVxcXFxiLy50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQudG9Mb3dlckNhc2UoKSk7XG5mdW5jdGlvbiBjcmVhdGVJbmplY3Rvcihjb250ZXh0KSB7XG4gIHJldHVybiBmdW5jdGlvbiAoaWQsIHN0eWxlKSB7XG4gICAgcmV0dXJuIGFkZFN0eWxlKGlkLCBzdHlsZSk7XG4gIH07XG59XG52YXIgSEVBRCA9IGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ2hlYWQnKVswXTtcbnZhciBzdHlsZXMgPSB7fTtcblxuZnVuY3Rpb24gYWRkU3R5bGUoaWQsIGNzcykge1xuICB2YXIgZ3JvdXAgPSBpc09sZElFID8gY3NzLm1lZGlhIHx8ICdkZWZhdWx0JyA6IGlkO1xuICB2YXIgc3R5bGUgPSBzdHlsZXNbZ3JvdXBdIHx8IChzdHlsZXNbZ3JvdXBdID0ge1xuICAgIGlkczogbmV3IFNldCgpLFxuICAgIHN0eWxlczogW11cbiAgfSk7XG5cbiAgaWYgKCFzdHlsZS5pZHMuaGFzKGlkKSkge1xuICAgIHN0eWxlLmlkcy5hZGQoaWQpO1xuICAgIHZhciBjb2RlID0gY3NzLnNvdXJjZTtcblxuICAgIGlmIChjc3MubWFwKSB7XG4gICAgICAvLyBodHRwczovL2RldmVsb3Blci5jaHJvbWUuY29tL2RldnRvb2xzL2RvY3MvamF2YXNjcmlwdC1kZWJ1Z2dpbmdcbiAgICAgIC8vIHRoaXMgbWFrZXMgc291cmNlIG1hcHMgaW5zaWRlIHN0eWxlIHRhZ3Mgd29yayBwcm9wZXJseSBpbiBDaHJvbWVcbiAgICAgIGNvZGUgKz0gJ1xcbi8qIyBzb3VyY2VVUkw9JyArIGNzcy5tYXAuc291cmNlc1swXSArICcgKi8nOyAvLyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yNjYwMzg3NVxuXG4gICAgICBjb2RlICs9ICdcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LCcgKyBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShjc3MubWFwKSkpKSArICcgKi8nO1xuICAgIH1cblxuICAgIGlmICghc3R5bGUuZWxlbWVudCkge1xuICAgICAgc3R5bGUuZWxlbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICBzdHlsZS5lbGVtZW50LnR5cGUgPSAndGV4dC9jc3MnO1xuICAgICAgaWYgKGNzcy5tZWRpYSkgc3R5bGUuZWxlbWVudC5zZXRBdHRyaWJ1dGUoJ21lZGlhJywgY3NzLm1lZGlhKTtcbiAgICAgIEhFQUQuYXBwZW5kQ2hpbGQoc3R5bGUuZWxlbWVudCk7XG4gICAgfVxuXG4gICAgaWYgKCdzdHlsZVNoZWV0JyBpbiBzdHlsZS5lbGVtZW50KSB7XG4gICAgICBzdHlsZS5zdHlsZXMucHVzaChjb2RlKTtcbiAgICAgIHN0eWxlLmVsZW1lbnQuc3R5bGVTaGVldC5jc3NUZXh0ID0gc3R5bGUuc3R5bGVzLmZpbHRlcihCb29sZWFuKS5qb2luKCdcXG4nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGluZGV4ID0gc3R5bGUuaWRzLnNpemUgLSAxO1xuICAgICAgdmFyIHRleHROb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY29kZSk7XG4gICAgICB2YXIgbm9kZXMgPSBzdHlsZS5lbGVtZW50LmNoaWxkTm9kZXM7XG4gICAgICBpZiAobm9kZXNbaW5kZXhdKSBzdHlsZS5lbGVtZW50LnJlbW92ZUNoaWxkKG5vZGVzW2luZGV4XSk7XG4gICAgICBpZiAobm9kZXMubGVuZ3RoKSBzdHlsZS5lbGVtZW50Lmluc2VydEJlZm9yZSh0ZXh0Tm9kZSwgbm9kZXNbaW5kZXhdKTtlbHNlIHN0eWxlLmVsZW1lbnQuYXBwZW5kQ2hpbGQodGV4dE5vZGUpO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUluamVjdG9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YnJvd3Nlci5qcy5tYXBcbiIsIid1c2Ugc3RyaWN0JztcblxuY29uc3QgU2VsZWN0RGF0YSA9IFtcbiAgeyB0ZXh0OiAnQWxsIEJvcm91Z2hzJywgdmFsdWU6ICdhbGwnIH0sXG4gIHsgdGV4dDogJ0Jyb29rbHluJywgdmFsdWU6ICdicm9va2x5bicgfSxcbiAgeyB0ZXh0OiAnUXVlZW5zJywgdmFsdWU6ICdxdWVlbnMnIH0sXG4gIHsgdGV4dDogJ01hbmhhdHRhbicsIHZhbHVlOiAnbWFuaGF0dGFuJyB9LFxuICB7IHRleHQ6ICdTdGF0ZW4gSXNsYW5kJywgdmFsdWU6ICdzdGF0ZW4gaXNsYW5kJyB9LFxuICB7IHRleHQ6ICdUaGUgQnJvbngnLCB2YWx1ZTogJ2Jyb254JyB9XG5dO1xuXG5leHBvcnQgZGVmYXVsdCBTZWxlY3REYXRhOyIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IFZ1ZSBmcm9tICd2dWUvZGlzdC92dWUuZXNtLmJyb3dzZXInOyAvL1xuaW1wb3J0IFNlbGVjdENvbXBvbmVudCBmcm9tICcuL3NlbGVjdC52dWUnOyAvLyBPdXIgY29tcG9uZW50XG5pbXBvcnQgU2VsZWN0RGF0YSBmcm9tICcuL3NlbGVjdC5kYXRhLmpzJzsgLy8gT3VyIHNhbXBsZSBkYXRhXG5cbmNsYXNzIFNlbGVjdCB7XG4gIGNvbnN0cnVjdG9yKHNldHRpbmdzID0ge30sIGRhdGEgPSB7fSkge1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgdGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzO1xuICAgIHRoaXMuaW5pdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBtb2R1bGVcbiAgICovXG4gIGluaXQoKSB7XG4gICAgVnVlLmNvbXBvbmVudCgnbnljby1zZWxlY3QnLCBTZWxlY3RDb21wb25lbnQpO1xuXG4gICAgbmV3IFZ1ZSh7XG4gICAgICBlbDogJ1tkYXRhLWpzPVwiYXBwXCJdJyxcbiAgICAgIGRlbGltaXRlcnM6IFsndnsnLCAnfSddLFxuICAgICAgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBvcHRpb25zOiBTZWxlY3QuZGF0YSxcbiAgICAgICAgICBzZWxlY3RlZDogJ2FsbCcsXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBtZXRob2RzOiB7fSxcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2dzIGNvbnN0YW50cyB0byB0aGUgZGVidWdnZXJcbiAgICogQHBhcmFtICB7b2JqZWN0fSBwYXJhbSAtIG91ciBjb25zdGFudHNcbiAgICovXG4gIF9jb25zdGFudHMocGFyYW0pIHtcbiAgICBjb25zb2xlLmRpcihwYXJhbSk7XG4gIH1cbn1cblxuU2VsZWN0LmRhdGEgPSBTZWxlY3REYXRhO1xuXG5leHBvcnQgZGVmYXVsdCBTZWxlY3Q7IiwiZnVuY3Rpb24gZGF0YUhhbmRsZXIobmV3RGF0YSwgb2xkRGF0YSkge1xuICBpZiAob2xkRGF0YSkge1xuICAgIHZhciBjaGFydCA9IHRoaXMuJGRhdGEuX2NoYXJ0O1xuICAgIHZhciBuZXdEYXRhc2V0TGFiZWxzID0gbmV3RGF0YS5kYXRhc2V0cy5tYXAoZnVuY3Rpb24gKGRhdGFzZXQpIHtcbiAgICAgIHJldHVybiBkYXRhc2V0LmxhYmVsO1xuICAgIH0pO1xuICAgIHZhciBvbGREYXRhc2V0TGFiZWxzID0gb2xkRGF0YS5kYXRhc2V0cy5tYXAoZnVuY3Rpb24gKGRhdGFzZXQpIHtcbiAgICAgIHJldHVybiBkYXRhc2V0LmxhYmVsO1xuICAgIH0pO1xuICAgIHZhciBvbGRMYWJlbHMgPSBKU09OLnN0cmluZ2lmeShvbGREYXRhc2V0TGFiZWxzKTtcbiAgICB2YXIgbmV3TGFiZWxzID0gSlNPTi5zdHJpbmdpZnkobmV3RGF0YXNldExhYmVscyk7XG5cbiAgICBpZiAobmV3TGFiZWxzID09PSBvbGRMYWJlbHMgJiYgb2xkRGF0YS5kYXRhc2V0cy5sZW5ndGggPT09IG5ld0RhdGEuZGF0YXNldHMubGVuZ3RoKSB7XG4gICAgICBuZXdEYXRhLmRhdGFzZXRzLmZvckVhY2goZnVuY3Rpb24gKGRhdGFzZXQsIGkpIHtcbiAgICAgICAgdmFyIG9sZERhdGFzZXRLZXlzID0gT2JqZWN0LmtleXMob2xkRGF0YS5kYXRhc2V0c1tpXSk7XG4gICAgICAgIHZhciBuZXdEYXRhc2V0S2V5cyA9IE9iamVjdC5rZXlzKGRhdGFzZXQpO1xuICAgICAgICB2YXIgZGVsZXRpb25LZXlzID0gb2xkRGF0YXNldEtleXMuZmlsdGVyKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICByZXR1cm4ga2V5ICE9PSAnX21ldGEnICYmIG5ld0RhdGFzZXRLZXlzLmluZGV4T2Yoa2V5KSA9PT0gLTE7XG4gICAgICAgIH0pO1xuICAgICAgICBkZWxldGlvbktleXMuZm9yRWFjaChmdW5jdGlvbiAoZGVsZXRpb25LZXkpIHtcbiAgICAgICAgICBkZWxldGUgY2hhcnQuZGF0YS5kYXRhc2V0c1tpXVtkZWxldGlvbktleV07XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGZvciAodmFyIGF0dHJpYnV0ZSBpbiBkYXRhc2V0KSB7XG4gICAgICAgICAgaWYgKGRhdGFzZXQuaGFzT3duUHJvcGVydHkoYXR0cmlidXRlKSkge1xuICAgICAgICAgICAgY2hhcnQuZGF0YS5kYXRhc2V0c1tpXVthdHRyaWJ1dGVdID0gZGF0YXNldFthdHRyaWJ1dGVdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmIChuZXdEYXRhLmhhc093blByb3BlcnR5KCdsYWJlbHMnKSkge1xuICAgICAgICBjaGFydC5kYXRhLmxhYmVscyA9IG5ld0RhdGEubGFiZWxzO1xuICAgICAgICB0aGlzLiRlbWl0KCdsYWJlbHM6dXBkYXRlJyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChuZXdEYXRhLmhhc093blByb3BlcnR5KCd4TGFiZWxzJykpIHtcbiAgICAgICAgY2hhcnQuZGF0YS54TGFiZWxzID0gbmV3RGF0YS54TGFiZWxzO1xuICAgICAgICB0aGlzLiRlbWl0KCd4bGFiZWxzOnVwZGF0ZScpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmV3RGF0YS5oYXNPd25Qcm9wZXJ0eSgneUxhYmVscycpKSB7XG4gICAgICAgIGNoYXJ0LmRhdGEueUxhYmVscyA9IG5ld0RhdGEueUxhYmVscztcbiAgICAgICAgdGhpcy4kZW1pdCgneWxhYmVsczp1cGRhdGUnKTtcbiAgICAgIH1cblxuICAgICAgY2hhcnQudXBkYXRlKCk7XG4gICAgICB0aGlzLiRlbWl0KCdjaGFydDp1cGRhdGUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGNoYXJ0KSB7XG4gICAgICAgIGNoYXJ0LmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy4kZW1pdCgnY2hhcnQ6ZGVzdHJveScpO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnJlbmRlckNoYXJ0KHRoaXMuY2hhcnREYXRhLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgdGhpcy4kZW1pdCgnY2hhcnQ6cmVuZGVyJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmICh0aGlzLiRkYXRhLl9jaGFydCkge1xuICAgICAgdGhpcy4kZGF0YS5fY2hhcnQuZGVzdHJveSgpO1xuXG4gICAgICB0aGlzLiRlbWl0KCdjaGFydDpkZXN0cm95Jyk7XG4gICAgfVxuXG4gICAgdGhpcy5yZW5kZXJDaGFydCh0aGlzLmNoYXJ0RGF0YSwgdGhpcy5vcHRpb25zKTtcbiAgICB0aGlzLiRlbWl0KCdjaGFydDpyZW5kZXInKTtcbiAgfVxufVxuXG5leHBvcnQgdmFyIHJlYWN0aXZlRGF0YSA9IHtcbiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgY2hhcnREYXRhOiBudWxsXG4gICAgfTtcbiAgfSxcbiAgd2F0Y2g6IHtcbiAgICAnY2hhcnREYXRhJzogZGF0YUhhbmRsZXJcbiAgfVxufTtcbmV4cG9ydCB2YXIgcmVhY3RpdmVQcm9wID0ge1xuICBwcm9wczoge1xuICAgIGNoYXJ0RGF0YToge1xuICAgICAgcmVxdWlyZWQ6IHRydWVcbiAgICB9XG4gIH0sXG4gIHdhdGNoOiB7XG4gICAgJ2NoYXJ0RGF0YSc6IGRhdGFIYW5kbGVyXG4gIH1cbn07XG5leHBvcnQgZGVmYXVsdCB7XG4gIHJlYWN0aXZlRGF0YTogcmVhY3RpdmVEYXRhLFxuICByZWFjdGl2ZVByb3A6IHJlYWN0aXZlUHJvcFxufTsiLCIndXNlIHN0cmljdCc7XG5cbi8qKlxuICogQG5hbWVzcGFjZSBDaGFydC5oZWxwZXJzXG4gKi9cbnZhciBoZWxwZXJzID0ge1xuXHQvKipcblx0ICogQW4gZW1wdHkgZnVuY3Rpb24gdGhhdCBjYW4gYmUgdXNlZCwgZm9yIGV4YW1wbGUsIGZvciBvcHRpb25hbCBjYWxsYmFjay5cblx0ICovXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0LyoqXG5cdCAqIFJldHVybnMgYSB1bmlxdWUgaWQsIHNlcXVlbnRpYWxseSBnZW5lcmF0ZWQgZnJvbSBhIGdsb2JhbCB2YXJpYWJsZS5cblx0ICogQHJldHVybnMge051bWJlcn1cblx0ICogQGZ1bmN0aW9uXG5cdCAqL1xuXHR1aWQ6IChmdW5jdGlvbigpIHtcblx0XHR2YXIgaWQgPSAwO1xuXHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBpZCsrO1xuXHRcdH07XG5cdH0oKSksXG5cblx0LyoqXG5cdCAqIFJldHVybnMgdHJ1ZSBpZiBgdmFsdWVgIGlzIG5laXRoZXIgbnVsbCBub3IgdW5kZWZpbmVkLCBlbHNlIHJldHVybnMgZmFsc2UuXG5cdCAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gdGVzdC5cblx0ICogQHJldHVybnMge0Jvb2xlYW59XG5cdCAqIEBzaW5jZSAyLjcuMFxuXHQgKi9cblx0aXNOdWxsT3JVbmRlZjogZnVuY3Rpb24odmFsdWUpIHtcblx0XHRyZXR1cm4gdmFsdWUgPT09IG51bGwgfHwgdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJztcblx0fSxcblxuXHQvKipcblx0ICogUmV0dXJucyB0cnVlIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgcmV0dXJucyBmYWxzZS5cblx0ICogQHBhcmFtIHsqfSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byB0ZXN0LlxuXHQgKiBAcmV0dXJucyB7Qm9vbGVhbn1cblx0ICogQGZ1bmN0aW9uXG5cdCAqL1xuXHRpc0FycmF5OiBBcnJheS5pc0FycmF5ID8gQXJyYXkuaXNBcnJheSA6IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0cmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IEFycmF5XSc7XG5cdH0sXG5cblx0LyoqXG5cdCAqIFJldHVybnMgdHJ1ZSBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCAoZXhjbHVkaW5nIG51bGwpLCBlbHNlIHJldHVybnMgZmFsc2UuXG5cdCAqIEBwYXJhbSB7Kn0gdmFsdWUgLSBUaGUgdmFsdWUgdG8gdGVzdC5cblx0ICogQHJldHVybnMge0Jvb2xlYW59XG5cdCAqIEBzaW5jZSAyLjcuMFxuXHQgKi9cblx0aXNPYmplY3Q6IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0cmV0dXJuIHZhbHVlICE9PSBudWxsICYmIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSkgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGB2YWx1ZWAgaWYgZGVmaW5lZCwgZWxzZSByZXR1cm5zIGBkZWZhdWx0VmFsdWVgLlxuXHQgKiBAcGFyYW0geyp9IHZhbHVlIC0gVGhlIHZhbHVlIHRvIHJldHVybiBpZiBkZWZpbmVkLlxuXHQgKiBAcGFyYW0geyp9IGRlZmF1bHRWYWx1ZSAtIFRoZSB2YWx1ZSB0byByZXR1cm4gaWYgYHZhbHVlYCBpcyB1bmRlZmluZWQuXG5cdCAqIEByZXR1cm5zIHsqfVxuXHQgKi9cblx0dmFsdWVPckRlZmF1bHQ6IGZ1bmN0aW9uKHZhbHVlLCBkZWZhdWx0VmFsdWUpIHtcblx0XHRyZXR1cm4gdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyA/IGRlZmF1bHRWYWx1ZSA6IHZhbHVlO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHZhbHVlIGF0IHRoZSBnaXZlbiBgaW5kZXhgIGluIGFycmF5IGlmIGRlZmluZWQsIGVsc2UgcmV0dXJucyBgZGVmYXVsdFZhbHVlYC5cblx0ICogQHBhcmFtIHtBcnJheX0gdmFsdWUgLSBUaGUgYXJyYXkgdG8gbG9va3VwIGZvciB2YWx1ZSBhdCBgaW5kZXhgLlxuXHQgKiBAcGFyYW0ge051bWJlcn0gaW5kZXggLSBUaGUgaW5kZXggaW4gYHZhbHVlYCB0byBsb29rdXAgZm9yIHZhbHVlLlxuXHQgKiBAcGFyYW0geyp9IGRlZmF1bHRWYWx1ZSAtIFRoZSB2YWx1ZSB0byByZXR1cm4gaWYgYHZhbHVlW2luZGV4XWAgaXMgdW5kZWZpbmVkLlxuXHQgKiBAcmV0dXJucyB7Kn1cblx0ICovXG5cdHZhbHVlQXRJbmRleE9yRGVmYXVsdDogZnVuY3Rpb24odmFsdWUsIGluZGV4LCBkZWZhdWx0VmFsdWUpIHtcblx0XHRyZXR1cm4gaGVscGVycy52YWx1ZU9yRGVmYXVsdChoZWxwZXJzLmlzQXJyYXkodmFsdWUpID8gdmFsdWVbaW5kZXhdIDogdmFsdWUsIGRlZmF1bHRWYWx1ZSk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIENhbGxzIGBmbmAgd2l0aCB0aGUgZ2l2ZW4gYGFyZ3NgIGluIHRoZSBzY29wZSBkZWZpbmVkIGJ5IGB0aGlzQXJnYCBhbmQgcmV0dXJucyB0aGVcblx0ICogdmFsdWUgcmV0dXJuZWQgYnkgYGZuYC4gSWYgYGZuYCBpcyBub3QgYSBmdW5jdGlvbiwgdGhpcyBtZXRob2QgcmV0dXJucyB1bmRlZmluZWQuXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIC0gVGhlIGZ1bmN0aW9uIHRvIGNhbGwuXG5cdCAqIEBwYXJhbSB7QXJyYXl8dW5kZWZpbmVkfG51bGx9IGFyZ3MgLSBUaGUgYXJndW1lbnRzIHdpdGggd2hpY2ggYGZuYCBzaG91bGQgYmUgY2FsbGVkLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gW3RoaXNBcmddIC0gVGhlIHZhbHVlIG9mIGB0aGlzYCBwcm92aWRlZCBmb3IgdGhlIGNhbGwgdG8gYGZuYC5cblx0ICogQHJldHVybnMgeyp9XG5cdCAqL1xuXHRjYWxsYmFjazogZnVuY3Rpb24oZm4sIGFyZ3MsIHRoaXNBcmcpIHtcblx0XHRpZiAoZm4gJiYgdHlwZW9mIGZuLmNhbGwgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdHJldHVybiBmbi5hcHBseSh0aGlzQXJnLCBhcmdzKTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIE5vdGUoU0IpIGZvciBwZXJmb3JtYW5jZSBzYWtlLCB0aGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSB1c2VkIHdoZW4gbG9vcGFibGUgdHlwZVxuXHQgKiBpcyB1bmtub3duIG9yIGluIG5vbmUgaW50ZW5zaXZlIGNvZGUgKG5vdCBjYWxsZWQgb2Z0ZW4gYW5kIHNtYWxsIGxvb3BhYmxlKS4gRWxzZVxuXHQgKiBpdCdzIHByZWZlcmFibGUgdG8gdXNlIGEgcmVndWxhciBmb3IoKSBsb29wIGFuZCBzYXZlIGV4dHJhIGZ1bmN0aW9uIGNhbGxzLlxuXHQgKiBAcGFyYW0ge09iamVjdHxBcnJheX0gbG9vcGFibGUgLSBUaGUgb2JqZWN0IG9yIGFycmF5IHRvIGJlIGl0ZXJhdGVkLlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIFRoZSBmdW5jdGlvbiB0byBjYWxsIGZvciBlYWNoIGl0ZW0uXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbdGhpc0FyZ10gLSBUaGUgdmFsdWUgb2YgYHRoaXNgIHByb3ZpZGVkIGZvciB0aGUgY2FsbCB0byBgZm5gLlxuXHQgKiBAcGFyYW0ge0Jvb2xlYW59IFtyZXZlcnNlXSAtIElmIHRydWUsIGl0ZXJhdGVzIGJhY2t3YXJkIG9uIHRoZSBsb29wYWJsZS5cblx0ICovXG5cdGVhY2g6IGZ1bmN0aW9uKGxvb3BhYmxlLCBmbiwgdGhpc0FyZywgcmV2ZXJzZSkge1xuXHRcdHZhciBpLCBsZW4sIGtleXM7XG5cdFx0aWYgKGhlbHBlcnMuaXNBcnJheShsb29wYWJsZSkpIHtcblx0XHRcdGxlbiA9IGxvb3BhYmxlLmxlbmd0aDtcblx0XHRcdGlmIChyZXZlcnNlKSB7XG5cdFx0XHRcdGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHRcdFx0Zm4uY2FsbCh0aGlzQXJnLCBsb29wYWJsZVtpXSwgaSk7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0XHRcdGZuLmNhbGwodGhpc0FyZywgbG9vcGFibGVbaV0sIGkpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChoZWxwZXJzLmlzT2JqZWN0KGxvb3BhYmxlKSkge1xuXHRcdFx0a2V5cyA9IE9iamVjdC5rZXlzKGxvb3BhYmxlKTtcblx0XHRcdGxlbiA9IGtleXMubGVuZ3RoO1xuXHRcdFx0Zm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG5cdFx0XHRcdGZuLmNhbGwodGhpc0FyZywgbG9vcGFibGVba2V5c1tpXV0sIGtleXNbaV0pO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHQvKipcblx0ICogUmV0dXJucyB0cnVlIGlmIHRoZSBgYTBgIGFuZCBgYTFgIGFycmF5cyBoYXZlIHRoZSBzYW1lIGNvbnRlbnQsIGVsc2UgcmV0dXJucyBmYWxzZS5cblx0ICogQHNlZSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8xNDg1Mzk3NFxuXHQgKiBAcGFyYW0ge0FycmF5fSBhMCAtIFRoZSBhcnJheSB0byBjb21wYXJlXG5cdCAqIEBwYXJhbSB7QXJyYXl9IGExIC0gVGhlIGFycmF5IHRvIGNvbXBhcmVcblx0ICogQHJldHVybnMge0Jvb2xlYW59XG5cdCAqL1xuXHRhcnJheUVxdWFsczogZnVuY3Rpb24oYTAsIGExKSB7XG5cdFx0dmFyIGksIGlsZW4sIHYwLCB2MTtcblxuXHRcdGlmICghYTAgfHwgIWExIHx8IGEwLmxlbmd0aCAhPT0gYTEubGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Zm9yIChpID0gMCwgaWxlbiA9IGEwLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0djAgPSBhMFtpXTtcblx0XHRcdHYxID0gYTFbaV07XG5cblx0XHRcdGlmICh2MCBpbnN0YW5jZW9mIEFycmF5ICYmIHYxIGluc3RhbmNlb2YgQXJyYXkpIHtcblx0XHRcdFx0aWYgKCFoZWxwZXJzLmFycmF5RXF1YWxzKHYwLCB2MSkpIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSBpZiAodjAgIT09IHYxKSB7XG5cdFx0XHRcdC8vIE5PVEU6IHR3byBkaWZmZXJlbnQgb2JqZWN0IGluc3RhbmNlcyB3aWxsIG5ldmVyIGJlIGVxdWFsOiB7eDoyMH0gIT0ge3g6MjB9XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHQvKipcblx0ICogUmV0dXJucyBhIGRlZXAgY29weSBvZiBgc291cmNlYCB3aXRob3V0IGtlZXBpbmcgcmVmZXJlbmNlcyBvbiBvYmplY3RzIGFuZCBhcnJheXMuXG5cdCAqIEBwYXJhbSB7Kn0gc291cmNlIC0gVGhlIHZhbHVlIHRvIGNsb25lLlxuXHQgKiBAcmV0dXJucyB7Kn1cblx0ICovXG5cdGNsb25lOiBmdW5jdGlvbihzb3VyY2UpIHtcblx0XHRpZiAoaGVscGVycy5pc0FycmF5KHNvdXJjZSkpIHtcblx0XHRcdHJldHVybiBzb3VyY2UubWFwKGhlbHBlcnMuY2xvbmUpO1xuXHRcdH1cblxuXHRcdGlmIChoZWxwZXJzLmlzT2JqZWN0KHNvdXJjZSkpIHtcblx0XHRcdHZhciB0YXJnZXQgPSB7fTtcblx0XHRcdHZhciBrZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcblx0XHRcdHZhciBrbGVuID0ga2V5cy5sZW5ndGg7XG5cdFx0XHR2YXIgayA9IDA7XG5cblx0XHRcdGZvciAoOyBrIDwga2xlbjsgKytrKSB7XG5cdFx0XHRcdHRhcmdldFtrZXlzW2tdXSA9IGhlbHBlcnMuY2xvbmUoc291cmNlW2tleXNba11dKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHRhcmdldDtcblx0XHR9XG5cblx0XHRyZXR1cm4gc291cmNlO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBUaGUgZGVmYXVsdCBtZXJnZXIgd2hlbiBDaGFydC5oZWxwZXJzLm1lcmdlIGlzIGNhbGxlZCB3aXRob3V0IG1lcmdlciBvcHRpb24uXG5cdCAqIE5vdGUoU0IpOiB0aGlzIG1ldGhvZCBpcyBhbHNvIHVzZWQgYnkgY29uZmlnTWVyZ2UgYW5kIHNjYWxlTWVyZ2UgYXMgZmFsbGJhY2suXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRfbWVyZ2VyOiBmdW5jdGlvbihrZXksIHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG5cdFx0dmFyIHR2YWwgPSB0YXJnZXRba2V5XTtcblx0XHR2YXIgc3ZhbCA9IHNvdXJjZVtrZXldO1xuXG5cdFx0aWYgKGhlbHBlcnMuaXNPYmplY3QodHZhbCkgJiYgaGVscGVycy5pc09iamVjdChzdmFsKSkge1xuXHRcdFx0aGVscGVycy5tZXJnZSh0dmFsLCBzdmFsLCBvcHRpb25zKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGFyZ2V0W2tleV0gPSBoZWxwZXJzLmNsb25lKHN2YWwpO1xuXHRcdH1cblx0fSxcblxuXHQvKipcblx0ICogTWVyZ2VzIHNvdXJjZVtrZXldIGluIHRhcmdldFtrZXldIG9ubHkgaWYgdGFyZ2V0W2tleV0gaXMgdW5kZWZpbmVkLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X21lcmdlcklmOiBmdW5jdGlvbihrZXksIHRhcmdldCwgc291cmNlKSB7XG5cdFx0dmFyIHR2YWwgPSB0YXJnZXRba2V5XTtcblx0XHR2YXIgc3ZhbCA9IHNvdXJjZVtrZXldO1xuXG5cdFx0aWYgKGhlbHBlcnMuaXNPYmplY3QodHZhbCkgJiYgaGVscGVycy5pc09iamVjdChzdmFsKSkge1xuXHRcdFx0aGVscGVycy5tZXJnZUlmKHR2YWwsIHN2YWwpO1xuXHRcdH0gZWxzZSBpZiAoIXRhcmdldC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG5cdFx0XHR0YXJnZXRba2V5XSA9IGhlbHBlcnMuY2xvbmUoc3ZhbCk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZWN1cnNpdmVseSBkZWVwIGNvcGllcyBgc291cmNlYCBwcm9wZXJ0aWVzIGludG8gYHRhcmdldGAgd2l0aCB0aGUgZ2l2ZW4gYG9wdGlvbnNgLlxuXHQgKiBJTVBPUlRBTlQ6IGB0YXJnZXRgIGlzIG5vdCBjbG9uZWQgYW5kIHdpbGwgYmUgdXBkYXRlZCB3aXRoIGBzb3VyY2VgIHByb3BlcnRpZXMuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSB0YXJnZXQgLSBUaGUgdGFyZ2V0IG9iamVjdCBpbiB3aGljaCBhbGwgc291cmNlcyBhcmUgbWVyZ2VkIGludG8uXG5cdCAqIEBwYXJhbSB7T2JqZWN0fEFycmF5KE9iamVjdCl9IHNvdXJjZSAtIE9iamVjdChzKSB0byBtZXJnZSBpbnRvIGB0YXJnZXRgLlxuXHQgKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gTWVyZ2luZyBvcHRpb25zOlxuXHQgKiBAcGFyYW0ge0Z1bmN0aW9ufSBbb3B0aW9ucy5tZXJnZXJdIC0gVGhlIG1lcmdlIG1ldGhvZCAoa2V5LCB0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucylcblx0ICogQHJldHVybnMge09iamVjdH0gVGhlIGB0YXJnZXRgIG9iamVjdC5cblx0ICovXG5cdG1lcmdlOiBmdW5jdGlvbih0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHRcdHZhciBzb3VyY2VzID0gaGVscGVycy5pc0FycmF5KHNvdXJjZSkgPyBzb3VyY2UgOiBbc291cmNlXTtcblx0XHR2YXIgaWxlbiA9IHNvdXJjZXMubGVuZ3RoO1xuXHRcdHZhciBtZXJnZSwgaSwga2V5cywga2xlbiwgaztcblxuXHRcdGlmICghaGVscGVycy5pc09iamVjdCh0YXJnZXQpKSB7XG5cdFx0XHRyZXR1cm4gdGFyZ2V0O1xuXHRcdH1cblxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXHRcdG1lcmdlID0gb3B0aW9ucy5tZXJnZXIgfHwgaGVscGVycy5fbWVyZ2VyO1xuXG5cdFx0Zm9yIChpID0gMDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0c291cmNlID0gc291cmNlc1tpXTtcblx0XHRcdGlmICghaGVscGVycy5pc09iamVjdChzb3VyY2UpKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRrZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTtcblx0XHRcdGZvciAoayA9IDAsIGtsZW4gPSBrZXlzLmxlbmd0aDsgayA8IGtsZW47ICsraykge1xuXHRcdFx0XHRtZXJnZShrZXlzW2tdLCB0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucyk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRhcmdldDtcblx0fSxcblxuXHQvKipcblx0ICogUmVjdXJzaXZlbHkgZGVlcCBjb3BpZXMgYHNvdXJjZWAgcHJvcGVydGllcyBpbnRvIGB0YXJnZXRgICpvbmx5KiBpZiBub3QgZGVmaW5lZCBpbiB0YXJnZXQuXG5cdCAqIElNUE9SVEFOVDogYHRhcmdldGAgaXMgbm90IGNsb25lZCBhbmQgd2lsbCBiZSB1cGRhdGVkIHdpdGggYHNvdXJjZWAgcHJvcGVydGllcy5cblx0ICogQHBhcmFtIHtPYmplY3R9IHRhcmdldCAtIFRoZSB0YXJnZXQgb2JqZWN0IGluIHdoaWNoIGFsbCBzb3VyY2VzIGFyZSBtZXJnZWQgaW50by5cblx0ICogQHBhcmFtIHtPYmplY3R8QXJyYXkoT2JqZWN0KX0gc291cmNlIC0gT2JqZWN0KHMpIHRvIG1lcmdlIGludG8gYHRhcmdldGAuXG5cdCAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBgdGFyZ2V0YCBvYmplY3QuXG5cdCAqL1xuXHRtZXJnZUlmOiBmdW5jdGlvbih0YXJnZXQsIHNvdXJjZSkge1xuXHRcdHJldHVybiBoZWxwZXJzLm1lcmdlKHRhcmdldCwgc291cmNlLCB7bWVyZ2VyOiBoZWxwZXJzLl9tZXJnZXJJZn0pO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBBcHBsaWVzIHRoZSBjb250ZW50cyBvZiB0d28gb3IgbW9yZSBvYmplY3RzIHRvZ2V0aGVyIGludG8gdGhlIGZpcnN0IG9iamVjdC5cblx0ICogQHBhcmFtIHtPYmplY3R9IHRhcmdldCAtIFRoZSB0YXJnZXQgb2JqZWN0IGluIHdoaWNoIGFsbCBvYmplY3RzIGFyZSBtZXJnZWQgaW50by5cblx0ICogQHBhcmFtIHtPYmplY3R9IGFyZzEgLSBPYmplY3QgY29udGFpbmluZyBhZGRpdGlvbmFsIHByb3BlcnRpZXMgdG8gbWVyZ2UgaW4gdGFyZ2V0LlxuXHQgKiBAcGFyYW0ge09iamVjdH0gYXJnTiAtIEFkZGl0aW9uYWwgb2JqZWN0cyBjb250YWluaW5nIHByb3BlcnRpZXMgdG8gbWVyZ2UgaW4gdGFyZ2V0LlxuXHQgKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgYHRhcmdldGAgb2JqZWN0LlxuXHQgKi9cblx0ZXh0ZW5kOiBmdW5jdGlvbih0YXJnZXQpIHtcblx0XHR2YXIgc2V0Rm4gPSBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG5cdFx0XHR0YXJnZXRba2V5XSA9IHZhbHVlO1xuXHRcdH07XG5cdFx0Zm9yICh2YXIgaSA9IDEsIGlsZW4gPSBhcmd1bWVudHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRoZWxwZXJzLmVhY2goYXJndW1lbnRzW2ldLCBzZXRGbik7XG5cdFx0fVxuXHRcdHJldHVybiB0YXJnZXQ7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEJhc2ljIGphdmFzY3JpcHQgaW5oZXJpdGFuY2UgYmFzZWQgb24gdGhlIG1vZGVsIGNyZWF0ZWQgaW4gQmFja2JvbmUuanNcblx0ICovXG5cdGluaGVyaXRzOiBmdW5jdGlvbihleHRlbnNpb25zKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgQ2hhcnRFbGVtZW50ID0gKGV4dGVuc2lvbnMgJiYgZXh0ZW5zaW9ucy5oYXNPd25Qcm9wZXJ0eSgnY29uc3RydWN0b3InKSkgPyBleHRlbnNpb25zLmNvbnN0cnVjdG9yIDogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gbWUuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcblx0XHR9O1xuXG5cdFx0dmFyIFN1cnJvZ2F0ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5jb25zdHJ1Y3RvciA9IENoYXJ0RWxlbWVudDtcblx0XHR9O1xuXG5cdFx0U3Vycm9nYXRlLnByb3RvdHlwZSA9IG1lLnByb3RvdHlwZTtcblx0XHRDaGFydEVsZW1lbnQucHJvdG90eXBlID0gbmV3IFN1cnJvZ2F0ZSgpO1xuXHRcdENoYXJ0RWxlbWVudC5leHRlbmQgPSBoZWxwZXJzLmluaGVyaXRzO1xuXG5cdFx0aWYgKGV4dGVuc2lvbnMpIHtcblx0XHRcdGhlbHBlcnMuZXh0ZW5kKENoYXJ0RWxlbWVudC5wcm90b3R5cGUsIGV4dGVuc2lvbnMpO1xuXHRcdH1cblxuXHRcdENoYXJ0RWxlbWVudC5fX3N1cGVyX18gPSBtZS5wcm90b3R5cGU7XG5cdFx0cmV0dXJuIENoYXJ0RWxlbWVudDtcblx0fVxufTtcblxubW9kdWxlLmV4cG9ydHMgPSBoZWxwZXJzO1xuXG4vLyBERVBSRUNBVElPTlNcblxuLyoqXG4gKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdXNlIENoYXJ0LmhlbHBlcnMuY2FsbGJhY2sgaW5zdGVhZC5cbiAqIEBmdW5jdGlvbiBDaGFydC5oZWxwZXJzLmNhbGxDYWxsYmFja1xuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjYuMFxuICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuICogQHByaXZhdGVcbiAqL1xuaGVscGVycy5jYWxsQ2FsbGJhY2sgPSBoZWxwZXJzLmNhbGxiYWNrO1xuXG4vKipcbiAqIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB1c2UgQXJyYXkucHJvdG90eXBlLmluZGV4T2YgaW5zdGVhZC5cbiAqIEFycmF5LnByb3RvdHlwZS5pbmRleE9mIGNvbXBhdGliaWxpdHk6IENocm9tZSwgT3BlcmEsIFNhZmFyaSwgRkYxLjUrLCBJRTkrXG4gKiBAZnVuY3Rpb24gQ2hhcnQuaGVscGVycy5pbmRleE9mXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuNy4wXG4gKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG4gKiBAcHJpdmF0ZVxuICovXG5oZWxwZXJzLmluZGV4T2YgPSBmdW5jdGlvbihhcnJheSwgaXRlbSwgZnJvbUluZGV4KSB7XG5cdHJldHVybiBBcnJheS5wcm90b3R5cGUuaW5kZXhPZi5jYWxsKGFycmF5LCBpdGVtLCBmcm9tSW5kZXgpO1xufTtcblxuLyoqXG4gKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdXNlIENoYXJ0LmhlbHBlcnMudmFsdWVPckRlZmF1bHQgaW5zdGVhZC5cbiAqIEBmdW5jdGlvbiBDaGFydC5oZWxwZXJzLmdldFZhbHVlT3JEZWZhdWx0XG4gKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuNy4wXG4gKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG4gKiBAcHJpdmF0ZVxuICovXG5oZWxwZXJzLmdldFZhbHVlT3JEZWZhdWx0ID0gaGVscGVycy52YWx1ZU9yRGVmYXVsdDtcblxuLyoqXG4gKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdXNlIENoYXJ0LmhlbHBlcnMudmFsdWVBdEluZGV4T3JEZWZhdWx0IGluc3RlYWQuXG4gKiBAZnVuY3Rpb24gQ2hhcnQuaGVscGVycy5nZXRWYWx1ZUF0SW5kZXhPckRlZmF1bHRcbiAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi43LjBcbiAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcbiAqIEBwcml2YXRlXG4gKi9cbmhlbHBlcnMuZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0ID0gaGVscGVycy52YWx1ZUF0SW5kZXhPckRlZmF1bHQ7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi9oZWxwZXJzLmNvcmUnKTtcblxuLyoqXG4gKiBFYXNpbmcgZnVuY3Rpb25zIGFkYXB0ZWQgZnJvbSBSb2JlcnQgUGVubmVyJ3MgZWFzaW5nIGVxdWF0aW9ucy5cbiAqIEBuYW1lc3BhY2UgQ2hhcnQuaGVscGVycy5lYXNpbmdFZmZlY3RzXG4gKiBAc2VlIGh0dHA6Ly93d3cucm9iZXJ0cGVubmVyLmNvbS9lYXNpbmcvXG4gKi9cbnZhciBlZmZlY3RzID0ge1xuXHRsaW5lYXI6IGZ1bmN0aW9uKHQpIHtcblx0XHRyZXR1cm4gdDtcblx0fSxcblxuXHRlYXNlSW5RdWFkOiBmdW5jdGlvbih0KSB7XG5cdFx0cmV0dXJuIHQgKiB0O1xuXHR9LFxuXG5cdGVhc2VPdXRRdWFkOiBmdW5jdGlvbih0KSB7XG5cdFx0cmV0dXJuIC10ICogKHQgLSAyKTtcblx0fSxcblxuXHRlYXNlSW5PdXRRdWFkOiBmdW5jdGlvbih0KSB7XG5cdFx0aWYgKCh0IC89IDAuNSkgPCAxKSB7XG5cdFx0XHRyZXR1cm4gMC41ICogdCAqIHQ7XG5cdFx0fVxuXHRcdHJldHVybiAtMC41ICogKCgtLXQpICogKHQgLSAyKSAtIDEpO1xuXHR9LFxuXG5cdGVhc2VJbkN1YmljOiBmdW5jdGlvbih0KSB7XG5cdFx0cmV0dXJuIHQgKiB0ICogdDtcblx0fSxcblxuXHRlYXNlT3V0Q3ViaWM6IGZ1bmN0aW9uKHQpIHtcblx0XHRyZXR1cm4gKHQgPSB0IC0gMSkgKiB0ICogdCArIDE7XG5cdH0sXG5cblx0ZWFzZUluT3V0Q3ViaWM6IGZ1bmN0aW9uKHQpIHtcblx0XHRpZiAoKHQgLz0gMC41KSA8IDEpIHtcblx0XHRcdHJldHVybiAwLjUgKiB0ICogdCAqIHQ7XG5cdFx0fVxuXHRcdHJldHVybiAwLjUgKiAoKHQgLT0gMikgKiB0ICogdCArIDIpO1xuXHR9LFxuXG5cdGVhc2VJblF1YXJ0OiBmdW5jdGlvbih0KSB7XG5cdFx0cmV0dXJuIHQgKiB0ICogdCAqIHQ7XG5cdH0sXG5cblx0ZWFzZU91dFF1YXJ0OiBmdW5jdGlvbih0KSB7XG5cdFx0cmV0dXJuIC0oKHQgPSB0IC0gMSkgKiB0ICogdCAqIHQgLSAxKTtcblx0fSxcblxuXHRlYXNlSW5PdXRRdWFydDogZnVuY3Rpb24odCkge1xuXHRcdGlmICgodCAvPSAwLjUpIDwgMSkge1xuXHRcdFx0cmV0dXJuIDAuNSAqIHQgKiB0ICogdCAqIHQ7XG5cdFx0fVxuXHRcdHJldHVybiAtMC41ICogKCh0IC09IDIpICogdCAqIHQgKiB0IC0gMik7XG5cdH0sXG5cblx0ZWFzZUluUXVpbnQ6IGZ1bmN0aW9uKHQpIHtcblx0XHRyZXR1cm4gdCAqIHQgKiB0ICogdCAqIHQ7XG5cdH0sXG5cblx0ZWFzZU91dFF1aW50OiBmdW5jdGlvbih0KSB7XG5cdFx0cmV0dXJuICh0ID0gdCAtIDEpICogdCAqIHQgKiB0ICogdCArIDE7XG5cdH0sXG5cblx0ZWFzZUluT3V0UXVpbnQ6IGZ1bmN0aW9uKHQpIHtcblx0XHRpZiAoKHQgLz0gMC41KSA8IDEpIHtcblx0XHRcdHJldHVybiAwLjUgKiB0ICogdCAqIHQgKiB0ICogdDtcblx0XHR9XG5cdFx0cmV0dXJuIDAuNSAqICgodCAtPSAyKSAqIHQgKiB0ICogdCAqIHQgKyAyKTtcblx0fSxcblxuXHRlYXNlSW5TaW5lOiBmdW5jdGlvbih0KSB7XG5cdFx0cmV0dXJuIC1NYXRoLmNvcyh0ICogKE1hdGguUEkgLyAyKSkgKyAxO1xuXHR9LFxuXG5cdGVhc2VPdXRTaW5lOiBmdW5jdGlvbih0KSB7XG5cdFx0cmV0dXJuIE1hdGguc2luKHQgKiAoTWF0aC5QSSAvIDIpKTtcblx0fSxcblxuXHRlYXNlSW5PdXRTaW5lOiBmdW5jdGlvbih0KSB7XG5cdFx0cmV0dXJuIC0wLjUgKiAoTWF0aC5jb3MoTWF0aC5QSSAqIHQpIC0gMSk7XG5cdH0sXG5cblx0ZWFzZUluRXhwbzogZnVuY3Rpb24odCkge1xuXHRcdHJldHVybiAodCA9PT0gMCkgPyAwIDogTWF0aC5wb3coMiwgMTAgKiAodCAtIDEpKTtcblx0fSxcblxuXHRlYXNlT3V0RXhwbzogZnVuY3Rpb24odCkge1xuXHRcdHJldHVybiAodCA9PT0gMSkgPyAxIDogLU1hdGgucG93KDIsIC0xMCAqIHQpICsgMTtcblx0fSxcblxuXHRlYXNlSW5PdXRFeHBvOiBmdW5jdGlvbih0KSB7XG5cdFx0aWYgKHQgPT09IDApIHtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblx0XHRpZiAodCA9PT0gMSkge1xuXHRcdFx0cmV0dXJuIDE7XG5cdFx0fVxuXHRcdGlmICgodCAvPSAwLjUpIDwgMSkge1xuXHRcdFx0cmV0dXJuIDAuNSAqIE1hdGgucG93KDIsIDEwICogKHQgLSAxKSk7XG5cdFx0fVxuXHRcdHJldHVybiAwLjUgKiAoLU1hdGgucG93KDIsIC0xMCAqIC0tdCkgKyAyKTtcblx0fSxcblxuXHRlYXNlSW5DaXJjOiBmdW5jdGlvbih0KSB7XG5cdFx0aWYgKHQgPj0gMSkge1xuXHRcdFx0cmV0dXJuIHQ7XG5cdFx0fVxuXHRcdHJldHVybiAtKE1hdGguc3FydCgxIC0gdCAqIHQpIC0gMSk7XG5cdH0sXG5cblx0ZWFzZU91dENpcmM6IGZ1bmN0aW9uKHQpIHtcblx0XHRyZXR1cm4gTWF0aC5zcXJ0KDEgLSAodCA9IHQgLSAxKSAqIHQpO1xuXHR9LFxuXG5cdGVhc2VJbk91dENpcmM6IGZ1bmN0aW9uKHQpIHtcblx0XHRpZiAoKHQgLz0gMC41KSA8IDEpIHtcblx0XHRcdHJldHVybiAtMC41ICogKE1hdGguc3FydCgxIC0gdCAqIHQpIC0gMSk7XG5cdFx0fVxuXHRcdHJldHVybiAwLjUgKiAoTWF0aC5zcXJ0KDEgLSAodCAtPSAyKSAqIHQpICsgMSk7XG5cdH0sXG5cblx0ZWFzZUluRWxhc3RpYzogZnVuY3Rpb24odCkge1xuXHRcdHZhciBzID0gMS43MDE1ODtcblx0XHR2YXIgcCA9IDA7XG5cdFx0dmFyIGEgPSAxO1xuXHRcdGlmICh0ID09PSAwKSB7XG5cdFx0XHRyZXR1cm4gMDtcblx0XHR9XG5cdFx0aWYgKHQgPT09IDEpIHtcblx0XHRcdHJldHVybiAxO1xuXHRcdH1cblx0XHRpZiAoIXApIHtcblx0XHRcdHAgPSAwLjM7XG5cdFx0fVxuXHRcdGlmIChhIDwgMSkge1xuXHRcdFx0YSA9IDE7XG5cdFx0XHRzID0gcCAvIDQ7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHMgPSBwIC8gKDIgKiBNYXRoLlBJKSAqIE1hdGguYXNpbigxIC8gYSk7XG5cdFx0fVxuXHRcdHJldHVybiAtKGEgKiBNYXRoLnBvdygyLCAxMCAqICh0IC09IDEpKSAqIE1hdGguc2luKCh0IC0gcykgKiAoMiAqIE1hdGguUEkpIC8gcCkpO1xuXHR9LFxuXG5cdGVhc2VPdXRFbGFzdGljOiBmdW5jdGlvbih0KSB7XG5cdFx0dmFyIHMgPSAxLjcwMTU4O1xuXHRcdHZhciBwID0gMDtcblx0XHR2YXIgYSA9IDE7XG5cdFx0aWYgKHQgPT09IDApIHtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblx0XHRpZiAodCA9PT0gMSkge1xuXHRcdFx0cmV0dXJuIDE7XG5cdFx0fVxuXHRcdGlmICghcCkge1xuXHRcdFx0cCA9IDAuMztcblx0XHR9XG5cdFx0aWYgKGEgPCAxKSB7XG5cdFx0XHRhID0gMTtcblx0XHRcdHMgPSBwIC8gNDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cyA9IHAgLyAoMiAqIE1hdGguUEkpICogTWF0aC5hc2luKDEgLyBhKTtcblx0XHR9XG5cdFx0cmV0dXJuIGEgKiBNYXRoLnBvdygyLCAtMTAgKiB0KSAqIE1hdGguc2luKCh0IC0gcykgKiAoMiAqIE1hdGguUEkpIC8gcCkgKyAxO1xuXHR9LFxuXG5cdGVhc2VJbk91dEVsYXN0aWM6IGZ1bmN0aW9uKHQpIHtcblx0XHR2YXIgcyA9IDEuNzAxNTg7XG5cdFx0dmFyIHAgPSAwO1xuXHRcdHZhciBhID0gMTtcblx0XHRpZiAodCA9PT0gMCkge1xuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fVxuXHRcdGlmICgodCAvPSAwLjUpID09PSAyKSB7XG5cdFx0XHRyZXR1cm4gMTtcblx0XHR9XG5cdFx0aWYgKCFwKSB7XG5cdFx0XHRwID0gMC40NTtcblx0XHR9XG5cdFx0aWYgKGEgPCAxKSB7XG5cdFx0XHRhID0gMTtcblx0XHRcdHMgPSBwIC8gNDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cyA9IHAgLyAoMiAqIE1hdGguUEkpICogTWF0aC5hc2luKDEgLyBhKTtcblx0XHR9XG5cdFx0aWYgKHQgPCAxKSB7XG5cdFx0XHRyZXR1cm4gLTAuNSAqIChhICogTWF0aC5wb3coMiwgMTAgKiAodCAtPSAxKSkgKiBNYXRoLnNpbigodCAtIHMpICogKDIgKiBNYXRoLlBJKSAvIHApKTtcblx0XHR9XG5cdFx0cmV0dXJuIGEgKiBNYXRoLnBvdygyLCAtMTAgKiAodCAtPSAxKSkgKiBNYXRoLnNpbigodCAtIHMpICogKDIgKiBNYXRoLlBJKSAvIHApICogMC41ICsgMTtcblx0fSxcblx0ZWFzZUluQmFjazogZnVuY3Rpb24odCkge1xuXHRcdHZhciBzID0gMS43MDE1ODtcblx0XHRyZXR1cm4gdCAqIHQgKiAoKHMgKyAxKSAqIHQgLSBzKTtcblx0fSxcblxuXHRlYXNlT3V0QmFjazogZnVuY3Rpb24odCkge1xuXHRcdHZhciBzID0gMS43MDE1ODtcblx0XHRyZXR1cm4gKHQgPSB0IC0gMSkgKiB0ICogKChzICsgMSkgKiB0ICsgcykgKyAxO1xuXHR9LFxuXG5cdGVhc2VJbk91dEJhY2s6IGZ1bmN0aW9uKHQpIHtcblx0XHR2YXIgcyA9IDEuNzAxNTg7XG5cdFx0aWYgKCh0IC89IDAuNSkgPCAxKSB7XG5cdFx0XHRyZXR1cm4gMC41ICogKHQgKiB0ICogKCgocyAqPSAoMS41MjUpKSArIDEpICogdCAtIHMpKTtcblx0XHR9XG5cdFx0cmV0dXJuIDAuNSAqICgodCAtPSAyKSAqIHQgKiAoKChzICo9ICgxLjUyNSkpICsgMSkgKiB0ICsgcykgKyAyKTtcblx0fSxcblxuXHRlYXNlSW5Cb3VuY2U6IGZ1bmN0aW9uKHQpIHtcblx0XHRyZXR1cm4gMSAtIGVmZmVjdHMuZWFzZU91dEJvdW5jZSgxIC0gdCk7XG5cdH0sXG5cblx0ZWFzZU91dEJvdW5jZTogZnVuY3Rpb24odCkge1xuXHRcdGlmICh0IDwgKDEgLyAyLjc1KSkge1xuXHRcdFx0cmV0dXJuIDcuNTYyNSAqIHQgKiB0O1xuXHRcdH1cblx0XHRpZiAodCA8ICgyIC8gMi43NSkpIHtcblx0XHRcdHJldHVybiA3LjU2MjUgKiAodCAtPSAoMS41IC8gMi43NSkpICogdCArIDAuNzU7XG5cdFx0fVxuXHRcdGlmICh0IDwgKDIuNSAvIDIuNzUpKSB7XG5cdFx0XHRyZXR1cm4gNy41NjI1ICogKHQgLT0gKDIuMjUgLyAyLjc1KSkgKiB0ICsgMC45Mzc1O1xuXHRcdH1cblx0XHRyZXR1cm4gNy41NjI1ICogKHQgLT0gKDIuNjI1IC8gMi43NSkpICogdCArIDAuOTg0Mzc1O1xuXHR9LFxuXG5cdGVhc2VJbk91dEJvdW5jZTogZnVuY3Rpb24odCkge1xuXHRcdGlmICh0IDwgMC41KSB7XG5cdFx0XHRyZXR1cm4gZWZmZWN0cy5lYXNlSW5Cb3VuY2UodCAqIDIpICogMC41O1xuXHRcdH1cblx0XHRyZXR1cm4gZWZmZWN0cy5lYXNlT3V0Qm91bmNlKHQgKiAyIC0gMSkgKiAwLjUgKyAwLjU7XG5cdH1cbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRlZmZlY3RzOiBlZmZlY3RzXG59O1xuXG4vLyBERVBSRUNBVElPTlNcblxuLyoqXG4gKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdXNlIENoYXJ0LmhlbHBlcnMuZWFzaW5nLmVmZmVjdHMgaW5zdGVhZC5cbiAqIEBmdW5jdGlvbiBDaGFydC5oZWxwZXJzLmVhc2luZ0VmZmVjdHNcbiAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi43LjBcbiAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcbiAqIEBwcml2YXRlXG4gKi9cbmhlbHBlcnMuZWFzaW5nRWZmZWN0cyA9IGVmZmVjdHM7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi9oZWxwZXJzLmNvcmUnKTtcblxuLyoqXG4gKiBAbmFtZXNwYWNlIENoYXJ0LmhlbHBlcnMuY2FudmFzXG4gKi9cbnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSB7XG5cdC8qKlxuXHQgKiBDbGVhcnMgdGhlIGVudGlyZSBjYW52YXMgYXNzb2NpYXRlZCB0byB0aGUgZ2l2ZW4gYGNoYXJ0YC5cblx0ICogQHBhcmFtIHtDaGFydH0gY2hhcnQgLSBUaGUgY2hhcnQgZm9yIHdoaWNoIHRvIGNsZWFyIHRoZSBjYW52YXMuXG5cdCAqL1xuXHRjbGVhcjogZnVuY3Rpb24oY2hhcnQpIHtcblx0XHRjaGFydC5jdHguY2xlYXJSZWN0KDAsIDAsIGNoYXJ0LndpZHRoLCBjaGFydC5oZWlnaHQpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBDcmVhdGVzIGEgXCJwYXRoXCIgZm9yIGEgcmVjdGFuZ2xlIHdpdGggcm91bmRlZCBjb3JuZXJzIGF0IHBvc2l0aW9uICh4LCB5KSB3aXRoIGFcblx0ICogZ2l2ZW4gc2l6ZSAod2lkdGgsIGhlaWdodCkgYW5kIHRoZSBzYW1lIGByYWRpdXNgIGZvciBhbGwgY29ybmVycy5cblx0ICogQHBhcmFtIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGN0eCAtIFRoZSBjYW52YXMgMkQgQ29udGV4dC5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IHggLSBUaGUgeCBheGlzIG9mIHRoZSBjb29yZGluYXRlIGZvciB0aGUgcmVjdGFuZ2xlIHN0YXJ0aW5nIHBvaW50LlxuXHQgKiBAcGFyYW0ge051bWJlcn0geSAtIFRoZSB5IGF4aXMgb2YgdGhlIGNvb3JkaW5hdGUgZm9yIHRoZSByZWN0YW5nbGUgc3RhcnRpbmcgcG9pbnQuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSB3aWR0aCAtIFRoZSByZWN0YW5nbGUncyB3aWR0aC5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IGhlaWdodCAtIFRoZSByZWN0YW5nbGUncyBoZWlnaHQuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSByYWRpdXMgLSBUaGUgcm91bmRlZCBhbW91bnQgKGluIHBpeGVscykgZm9yIHRoZSBmb3VyIGNvcm5lcnMuXG5cdCAqIEB0b2RvIGhhbmRsZSBgcmFkaXVzYCBhcyB0b3AtbGVmdCwgdG9wLXJpZ2h0LCBib3R0b20tcmlnaHQsIGJvdHRvbS1sZWZ0IGFycmF5L29iamVjdD9cblx0ICovXG5cdHJvdW5kZWRSZWN0OiBmdW5jdGlvbihjdHgsIHgsIHksIHdpZHRoLCBoZWlnaHQsIHJhZGl1cykge1xuXHRcdGlmIChyYWRpdXMpIHtcblx0XHRcdC8vIE5PVEUoU0IpIGBlcHNpbG9uYCBoZWxwcyB0byBwcmV2ZW50IG1pbm9yIGFydGlmYWN0cyBhcHBlYXJpbmdcblx0XHRcdC8vIG9uIENocm9tZSB3aGVuIGByYCBpcyBleGFjdGx5IGhhbGYgdGhlIGhlaWdodCBvciB0aGUgd2lkdGguXG5cdFx0XHR2YXIgZXBzaWxvbiA9IDAuMDAwMDAwMTtcblx0XHRcdHZhciByID0gTWF0aC5taW4ocmFkaXVzLCAoaGVpZ2h0IC8gMikgLSBlcHNpbG9uLCAod2lkdGggLyAyKSAtIGVwc2lsb24pO1xuXG5cdFx0XHRjdHgubW92ZVRvKHggKyByLCB5KTtcblx0XHRcdGN0eC5saW5lVG8oeCArIHdpZHRoIC0gciwgeSk7XG5cdFx0XHRjdHguYXJjVG8oeCArIHdpZHRoLCB5LCB4ICsgd2lkdGgsIHkgKyByLCByKTtcblx0XHRcdGN0eC5saW5lVG8oeCArIHdpZHRoLCB5ICsgaGVpZ2h0IC0gcik7XG5cdFx0XHRjdHguYXJjVG8oeCArIHdpZHRoLCB5ICsgaGVpZ2h0LCB4ICsgd2lkdGggLSByLCB5ICsgaGVpZ2h0LCByKTtcblx0XHRcdGN0eC5saW5lVG8oeCArIHIsIHkgKyBoZWlnaHQpO1xuXHRcdFx0Y3R4LmFyY1RvKHgsIHkgKyBoZWlnaHQsIHgsIHkgKyBoZWlnaHQgLSByLCByKTtcblx0XHRcdGN0eC5saW5lVG8oeCwgeSArIHIpO1xuXHRcdFx0Y3R4LmFyY1RvKHgsIHksIHggKyByLCB5LCByKTtcblx0XHRcdGN0eC5jbG9zZVBhdGgoKTtcblx0XHRcdGN0eC5tb3ZlVG8oeCwgeSk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGN0eC5yZWN0KHgsIHksIHdpZHRoLCBoZWlnaHQpO1xuXHRcdH1cblx0fSxcblxuXHRkcmF3UG9pbnQ6IGZ1bmN0aW9uKGN0eCwgc3R5bGUsIHJhZGl1cywgeCwgeSwgcm90YXRpb24pIHtcblx0XHR2YXIgdHlwZSwgZWRnZUxlbmd0aCwgeE9mZnNldCwgeU9mZnNldCwgaGVpZ2h0LCBzaXplO1xuXHRcdHJvdGF0aW9uID0gcm90YXRpb24gfHwgMDtcblxuXHRcdGlmIChzdHlsZSAmJiB0eXBlb2Ygc3R5bGUgPT09ICdvYmplY3QnKSB7XG5cdFx0XHR0eXBlID0gc3R5bGUudG9TdHJpbmcoKTtcblx0XHRcdGlmICh0eXBlID09PSAnW29iamVjdCBIVE1MSW1hZ2VFbGVtZW50XScgfHwgdHlwZSA9PT0gJ1tvYmplY3QgSFRNTENhbnZhc0VsZW1lbnRdJykge1xuXHRcdFx0XHRjdHguZHJhd0ltYWdlKHN0eWxlLCB4IC0gc3R5bGUud2lkdGggLyAyLCB5IC0gc3R5bGUuaGVpZ2h0IC8gMiwgc3R5bGUud2lkdGgsIHN0eWxlLmhlaWdodCk7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoaXNOYU4ocmFkaXVzKSB8fCByYWRpdXMgPD0gMCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGN0eC5zYXZlKCk7XG5cdFx0Y3R4LnRyYW5zbGF0ZSh4LCB5KTtcblx0XHRjdHgucm90YXRlKHJvdGF0aW9uICogTWF0aC5QSSAvIDE4MCk7XG5cdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXG5cdFx0c3dpdGNoIChzdHlsZSkge1xuXHRcdC8vIERlZmF1bHQgaW5jbHVkZXMgY2lyY2xlXG5cdFx0ZGVmYXVsdDpcblx0XHRcdGN0eC5hcmMoMCwgMCwgcmFkaXVzLCAwLCBNYXRoLlBJICogMik7XG5cdFx0XHRjdHguY2xvc2VQYXRoKCk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICd0cmlhbmdsZSc6XG5cdFx0XHRlZGdlTGVuZ3RoID0gMyAqIHJhZGl1cyAvIE1hdGguc3FydCgzKTtcblx0XHRcdGhlaWdodCA9IGVkZ2VMZW5ndGggKiBNYXRoLnNxcnQoMykgLyAyO1xuXHRcdFx0Y3R4Lm1vdmVUbygtZWRnZUxlbmd0aCAvIDIsIGhlaWdodCAvIDMpO1xuXHRcdFx0Y3R4LmxpbmVUbyhlZGdlTGVuZ3RoIC8gMiwgaGVpZ2h0IC8gMyk7XG5cdFx0XHRjdHgubGluZVRvKDAsIC0yICogaGVpZ2h0IC8gMyk7XG5cdFx0XHRjdHguY2xvc2VQYXRoKCk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICdyZWN0Jzpcblx0XHRcdHNpemUgPSAxIC8gTWF0aC5TUVJUMiAqIHJhZGl1cztcblx0XHRcdGN0eC5yZWN0KC1zaXplLCAtc2l6ZSwgMiAqIHNpemUsIDIgKiBzaXplKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ3JlY3RSb3VuZGVkJzpcblx0XHRcdHZhciBvZmZzZXQgPSByYWRpdXMgLyBNYXRoLlNRUlQyO1xuXHRcdFx0dmFyIGxlZnRYID0gLW9mZnNldDtcblx0XHRcdHZhciB0b3BZID0gLW9mZnNldDtcblx0XHRcdHZhciBzaWRlU2l6ZSA9IE1hdGguU1FSVDIgKiByYWRpdXM7XG5cblx0XHRcdC8vIE5PVEUoU0IpIHRoZSByb3VuZGVkIHJlY3QgaW1wbGVtZW50YXRpb24gY2hhbmdlZCB0byB1c2UgYGFyY1RvYFxuXHRcdFx0Ly8gaW5zdGVhZCBvZiBgcXVhZHJhdGljQ3VydmVUb2Agc2luY2UgaXQgZ2VuZXJhdGVzIGJldHRlciByZXN1bHRzXG5cdFx0XHQvLyB3aGVuIHJlY3QgaXMgYWxtb3N0IGEgY2lyY2xlLiAwLjQyNSAoaW5zdGVhZCBvZiAwLjUpIHByb2R1Y2VzXG5cdFx0XHQvLyByZXN1bHRzIHZpc3VhbGx5IGNsb3NlciB0byB0aGUgcHJldmlvdXMgaW1wbC5cblx0XHRcdHRoaXMucm91bmRlZFJlY3QoY3R4LCBsZWZ0WCwgdG9wWSwgc2lkZVNpemUsIHNpZGVTaXplLCByYWRpdXMgKiAwLjQyNSk7XG5cdFx0XHRicmVhaztcblx0XHRjYXNlICdyZWN0Um90Jzpcblx0XHRcdHNpemUgPSAxIC8gTWF0aC5TUVJUMiAqIHJhZGl1cztcblx0XHRcdGN0eC5tb3ZlVG8oLXNpemUsIDApO1xuXHRcdFx0Y3R4LmxpbmVUbygwLCBzaXplKTtcblx0XHRcdGN0eC5saW5lVG8oc2l6ZSwgMCk7XG5cdFx0XHRjdHgubGluZVRvKDAsIC1zaXplKTtcblx0XHRcdGN0eC5jbG9zZVBhdGgoKTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ2Nyb3NzJzpcblx0XHRcdGN0eC5tb3ZlVG8oMCwgcmFkaXVzKTtcblx0XHRcdGN0eC5saW5lVG8oMCwgLXJhZGl1cyk7XG5cdFx0XHRjdHgubW92ZVRvKC1yYWRpdXMsIDApO1xuXHRcdFx0Y3R4LmxpbmVUbyhyYWRpdXMsIDApO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAnY3Jvc3NSb3QnOlxuXHRcdFx0eE9mZnNldCA9IE1hdGguY29zKE1hdGguUEkgLyA0KSAqIHJhZGl1cztcblx0XHRcdHlPZmZzZXQgPSBNYXRoLnNpbihNYXRoLlBJIC8gNCkgKiByYWRpdXM7XG5cdFx0XHRjdHgubW92ZVRvKC14T2Zmc2V0LCAteU9mZnNldCk7XG5cdFx0XHRjdHgubGluZVRvKHhPZmZzZXQsIHlPZmZzZXQpO1xuXHRcdFx0Y3R4Lm1vdmVUbygteE9mZnNldCwgeU9mZnNldCk7XG5cdFx0XHRjdHgubGluZVRvKHhPZmZzZXQsIC15T2Zmc2V0KTtcblx0XHRcdGJyZWFrO1xuXHRcdGNhc2UgJ3N0YXInOlxuXHRcdFx0Y3R4Lm1vdmVUbygwLCByYWRpdXMpO1xuXHRcdFx0Y3R4LmxpbmVUbygwLCAtcmFkaXVzKTtcblx0XHRcdGN0eC5tb3ZlVG8oLXJhZGl1cywgMCk7XG5cdFx0XHRjdHgubGluZVRvKHJhZGl1cywgMCk7XG5cdFx0XHR4T2Zmc2V0ID0gTWF0aC5jb3MoTWF0aC5QSSAvIDQpICogcmFkaXVzO1xuXHRcdFx0eU9mZnNldCA9IE1hdGguc2luKE1hdGguUEkgLyA0KSAqIHJhZGl1cztcblx0XHRcdGN0eC5tb3ZlVG8oLXhPZmZzZXQsIC15T2Zmc2V0KTtcblx0XHRcdGN0eC5saW5lVG8oeE9mZnNldCwgeU9mZnNldCk7XG5cdFx0XHRjdHgubW92ZVRvKC14T2Zmc2V0LCB5T2Zmc2V0KTtcblx0XHRcdGN0eC5saW5lVG8oeE9mZnNldCwgLXlPZmZzZXQpO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAnbGluZSc6XG5cdFx0XHRjdHgubW92ZVRvKC1yYWRpdXMsIDApO1xuXHRcdFx0Y3R4LmxpbmVUbyhyYWRpdXMsIDApO1xuXHRcdFx0YnJlYWs7XG5cdFx0Y2FzZSAnZGFzaCc6XG5cdFx0XHRjdHgubW92ZVRvKDAsIDApO1xuXHRcdFx0Y3R4LmxpbmVUbyhyYWRpdXMsIDApO1xuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXG5cdFx0Y3R4LmZpbGwoKTtcblx0XHRjdHguc3Ryb2tlKCk7XG5cdFx0Y3R4LnJlc3RvcmUoKTtcblx0fSxcblxuXHRjbGlwQXJlYTogZnVuY3Rpb24oY3R4LCBhcmVhKSB7XG5cdFx0Y3R4LnNhdmUoKTtcblx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0Y3R4LnJlY3QoYXJlYS5sZWZ0LCBhcmVhLnRvcCwgYXJlYS5yaWdodCAtIGFyZWEubGVmdCwgYXJlYS5ib3R0b20gLSBhcmVhLnRvcCk7XG5cdFx0Y3R4LmNsaXAoKTtcblx0fSxcblxuXHR1bmNsaXBBcmVhOiBmdW5jdGlvbihjdHgpIHtcblx0XHRjdHgucmVzdG9yZSgpO1xuXHR9LFxuXG5cdGxpbmVUbzogZnVuY3Rpb24oY3R4LCBwcmV2aW91cywgdGFyZ2V0LCBmbGlwKSB7XG5cdFx0aWYgKHRhcmdldC5zdGVwcGVkTGluZSkge1xuXHRcdFx0aWYgKCh0YXJnZXQuc3RlcHBlZExpbmUgPT09ICdhZnRlcicgJiYgIWZsaXApIHx8ICh0YXJnZXQuc3RlcHBlZExpbmUgIT09ICdhZnRlcicgJiYgZmxpcCkpIHtcblx0XHRcdFx0Y3R4LmxpbmVUbyhwcmV2aW91cy54LCB0YXJnZXQueSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRjdHgubGluZVRvKHRhcmdldC54LCBwcmV2aW91cy55KTtcblx0XHRcdH1cblx0XHRcdGN0eC5saW5lVG8odGFyZ2V0LngsIHRhcmdldC55KTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIXRhcmdldC50ZW5zaW9uKSB7XG5cdFx0XHRjdHgubGluZVRvKHRhcmdldC54LCB0YXJnZXQueSk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Y3R4LmJlemllckN1cnZlVG8oXG5cdFx0XHRmbGlwID8gcHJldmlvdXMuY29udHJvbFBvaW50UHJldmlvdXNYIDogcHJldmlvdXMuY29udHJvbFBvaW50TmV4dFgsXG5cdFx0XHRmbGlwID8gcHJldmlvdXMuY29udHJvbFBvaW50UHJldmlvdXNZIDogcHJldmlvdXMuY29udHJvbFBvaW50TmV4dFksXG5cdFx0XHRmbGlwID8gdGFyZ2V0LmNvbnRyb2xQb2ludE5leHRYIDogdGFyZ2V0LmNvbnRyb2xQb2ludFByZXZpb3VzWCxcblx0XHRcdGZsaXAgPyB0YXJnZXQuY29udHJvbFBvaW50TmV4dFkgOiB0YXJnZXQuY29udHJvbFBvaW50UHJldmlvdXNZLFxuXHRcdFx0dGFyZ2V0LngsXG5cdFx0XHR0YXJnZXQueSk7XG5cdH1cbn07XG5cbi8vIERFUFJFQ0FUSU9OU1xuXG4vKipcbiAqIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB1c2UgQ2hhcnQuaGVscGVycy5jYW52YXMuY2xlYXIgaW5zdGVhZC5cbiAqIEBuYW1lc3BhY2UgQ2hhcnQuaGVscGVycy5jbGVhclxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjcuMFxuICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuICogQHByaXZhdGVcbiAqL1xuaGVscGVycy5jbGVhciA9IGV4cG9ydHMuY2xlYXI7XG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHVzZSBDaGFydC5oZWxwZXJzLmNhbnZhcy5yb3VuZGVkUmVjdCBpbnN0ZWFkLlxuICogQG5hbWVzcGFjZSBDaGFydC5oZWxwZXJzLmRyYXdSb3VuZGVkUmVjdGFuZ2xlXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuNy4wXG4gKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG4gKiBAcHJpdmF0ZVxuICovXG5oZWxwZXJzLmRyYXdSb3VuZGVkUmVjdGFuZ2xlID0gZnVuY3Rpb24oY3R4KSB7XG5cdGN0eC5iZWdpblBhdGgoKTtcblx0ZXhwb3J0cy5yb3VuZGVkUmVjdC5hcHBseShleHBvcnRzLCBhcmd1bWVudHMpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuL2hlbHBlcnMuY29yZScpO1xuXG4vKipcbiAqIEBhbGlhcyBDaGFydC5oZWxwZXJzLm9wdGlvbnNcbiAqIEBuYW1lc3BhY2VcbiAqL1xubW9kdWxlLmV4cG9ydHMgPSB7XG5cdC8qKlxuXHQgKiBDb252ZXJ0cyB0aGUgZ2l2ZW4gbGluZSBoZWlnaHQgYHZhbHVlYCBpbiBwaXhlbHMgZm9yIGEgc3BlY2lmaWMgZm9udCBgc2l6ZWAuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfFN0cmluZ30gdmFsdWUgLSBUaGUgbGluZUhlaWdodCB0byBwYXJzZSAoZWcuIDEuNiwgJzE0cHgnLCAnNzUlJywgJzEuNmVtJykuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfSBzaXplIC0gVGhlIGZvbnQgc2l6ZSAoaW4gcGl4ZWxzKSB1c2VkIHRvIHJlc29sdmUgcmVsYXRpdmUgYHZhbHVlYC5cblx0ICogQHJldHVybnMge051bWJlcn0gVGhlIGVmZmVjdGl2ZSBsaW5lIGhlaWdodCBpbiBwaXhlbHMgKHNpemUgKiAxLjIgaWYgdmFsdWUgaXMgaW52YWxpZCkuXG5cdCAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2xpbmUtaGVpZ2h0XG5cdCAqIEBzaW5jZSAyLjcuMFxuXHQgKi9cblx0dG9MaW5lSGVpZ2h0OiBmdW5jdGlvbih2YWx1ZSwgc2l6ZSkge1xuXHRcdHZhciBtYXRjaGVzID0gKCcnICsgdmFsdWUpLm1hdGNoKC9eKG5vcm1hbHwoXFxkKyg/OlxcLlxcZCspPykocHh8ZW18JSk/KSQvKTtcblx0XHRpZiAoIW1hdGNoZXMgfHwgbWF0Y2hlc1sxXSA9PT0gJ25vcm1hbCcpIHtcblx0XHRcdHJldHVybiBzaXplICogMS4yO1xuXHRcdH1cblxuXHRcdHZhbHVlID0gK21hdGNoZXNbMl07XG5cblx0XHRzd2l0Y2ggKG1hdGNoZXNbM10pIHtcblx0XHRjYXNlICdweCc6XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0Y2FzZSAnJSc6XG5cdFx0XHR2YWx1ZSAvPSAxMDA7XG5cdFx0XHRicmVhaztcblx0XHRkZWZhdWx0OlxuXHRcdFx0YnJlYWs7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHNpemUgKiB2YWx1ZTtcblx0fSxcblxuXHQvKipcblx0ICogQ29udmVydHMgdGhlIGdpdmVuIHZhbHVlIGludG8gYSBwYWRkaW5nIG9iamVjdCB3aXRoIHByZS1jb21wdXRlZCB3aWR0aC9oZWlnaHQuXG5cdCAqIEBwYXJhbSB7TnVtYmVyfE9iamVjdH0gdmFsdWUgLSBJZiBhIG51bWJlciwgc2V0IHRoZSB2YWx1ZSB0byBhbGwgVFJCTCBjb21wb25lbnQsXG5cdCAqICBlbHNlLCBpZiBhbmQgb2JqZWN0LCB1c2UgZGVmaW5lZCBwcm9wZXJ0aWVzIGFuZCBzZXRzIHVuZGVmaW5lZCBvbmVzIHRvIDAuXG5cdCAqIEByZXR1cm5zIHtPYmplY3R9IFRoZSBwYWRkaW5nIHZhbHVlcyAodG9wLCByaWdodCwgYm90dG9tLCBsZWZ0LCB3aWR0aCwgaGVpZ2h0KVxuXHQgKiBAc2luY2UgMi43LjBcblx0ICovXG5cdHRvUGFkZGluZzogZnVuY3Rpb24odmFsdWUpIHtcblx0XHR2YXIgdCwgciwgYiwgbDtcblxuXHRcdGlmIChoZWxwZXJzLmlzT2JqZWN0KHZhbHVlKSkge1xuXHRcdFx0dCA9ICt2YWx1ZS50b3AgfHwgMDtcblx0XHRcdHIgPSArdmFsdWUucmlnaHQgfHwgMDtcblx0XHRcdGIgPSArdmFsdWUuYm90dG9tIHx8IDA7XG5cdFx0XHRsID0gK3ZhbHVlLmxlZnQgfHwgMDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dCA9IHIgPSBiID0gbCA9ICt2YWx1ZSB8fCAwO1xuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IHQsXG5cdFx0XHRyaWdodDogcixcblx0XHRcdGJvdHRvbTogYixcblx0XHRcdGxlZnQ6IGwsXG5cdFx0XHRoZWlnaHQ6IHQgKyBiLFxuXHRcdFx0d2lkdGg6IGwgKyByXG5cdFx0fTtcblx0fSxcblxuXHQvKipcblx0ICogRXZhbHVhdGVzIHRoZSBnaXZlbiBgaW5wdXRzYCBzZXF1ZW50aWFsbHkgYW5kIHJldHVybnMgdGhlIGZpcnN0IGRlZmluZWQgdmFsdWUuXG5cdCAqIEBwYXJhbSB7QXJyYXlbXX0gaW5wdXRzIC0gQW4gYXJyYXkgb2YgdmFsdWVzLCBmYWxsaW5nIGJhY2sgdG8gdGhlIGxhc3QgdmFsdWUuXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBbY29udGV4dF0gLSBJZiBkZWZpbmVkIGFuZCB0aGUgY3VycmVudCB2YWx1ZSBpcyBhIGZ1bmN0aW9uLCB0aGUgdmFsdWVcblx0ICogaXMgY2FsbGVkIHdpdGggYGNvbnRleHRgIGFzIGZpcnN0IGFyZ3VtZW50IGFuZCB0aGUgcmVzdWx0IGJlY29tZXMgdGhlIG5ldyBpbnB1dC5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IFtpbmRleF0gLSBJZiBkZWZpbmVkIGFuZCB0aGUgY3VycmVudCB2YWx1ZSBpcyBhbiBhcnJheSwgdGhlIHZhbHVlXG5cdCAqIGF0IGBpbmRleGAgYmVjb21lIHRoZSBuZXcgaW5wdXQuXG5cdCAqIEBzaW5jZSAyLjcuMFxuXHQgKi9cblx0cmVzb2x2ZTogZnVuY3Rpb24oaW5wdXRzLCBjb250ZXh0LCBpbmRleCkge1xuXHRcdHZhciBpLCBpbGVuLCB2YWx1ZTtcblxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSBpbnB1dHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHR2YWx1ZSA9IGlucHV0c1tpXTtcblx0XHRcdGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXHRcdFx0aWYgKGNvbnRleHQgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0dmFsdWUgPSB2YWx1ZShjb250ZXh0KTtcblx0XHRcdH1cblx0XHRcdGlmIChpbmRleCAhPT0gdW5kZWZpbmVkICYmIGhlbHBlcnMuaXNBcnJheSh2YWx1ZSkpIHtcblx0XHRcdFx0dmFsdWUgPSB2YWx1ZVtpbmRleF07XG5cdFx0XHR9XG5cdFx0XHRpZiAodmFsdWUgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vaGVscGVycy5jb3JlJyk7XG5tb2R1bGUuZXhwb3J0cy5lYXNpbmcgPSByZXF1aXJlKCcuL2hlbHBlcnMuZWFzaW5nJyk7XG5tb2R1bGUuZXhwb3J0cy5jYW52YXMgPSByZXF1aXJlKCcuL2hlbHBlcnMuY2FudmFzJyk7XG5tb2R1bGUuZXhwb3J0cy5vcHRpb25zID0gcmVxdWlyZSgnLi9oZWxwZXJzLm9wdGlvbnMnKTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2luZGV4Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9zZXQ6IGZ1bmN0aW9uKHNjb3BlLCB2YWx1ZXMpIHtcblx0XHRyZXR1cm4gaGVscGVycy5tZXJnZSh0aGlzW3Njb3BlXSB8fCAodGhpc1tzY29wZV0gPSB7fSksIHZhbHVlcyk7XG5cdH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vY29yZS5kZWZhdWx0cycpO1xuXG5kZWZhdWx0cy5fc2V0KCdnbG9iYWwnLCB7XG5cdHJlc3BvbnNpdmU6IHRydWUsXG5cdHJlc3BvbnNpdmVBbmltYXRpb25EdXJhdGlvbjogMCxcblx0bWFpbnRhaW5Bc3BlY3RSYXRpbzogdHJ1ZSxcblx0ZXZlbnRzOiBbJ21vdXNlbW92ZScsICdtb3VzZW91dCcsICdjbGljaycsICd0b3VjaHN0YXJ0JywgJ3RvdWNobW92ZSddLFxuXHRob3Zlcjoge1xuXHRcdG9uSG92ZXI6IG51bGwsXG5cdFx0bW9kZTogJ25lYXJlc3QnLFxuXHRcdGludGVyc2VjdDogdHJ1ZSxcblx0XHRhbmltYXRpb25EdXJhdGlvbjogNDAwXG5cdH0sXG5cdG9uQ2xpY2s6IG51bGwsXG5cdGRlZmF1bHRDb2xvcjogJ3JnYmEoMCwwLDAsMC4xKScsXG5cdGRlZmF1bHRGb250Q29sb3I6ICcjNjY2Jyxcblx0ZGVmYXVsdEZvbnRGYW1pbHk6IFwiJ0hlbHZldGljYSBOZXVlJywgJ0hlbHZldGljYScsICdBcmlhbCcsIHNhbnMtc2VyaWZcIixcblx0ZGVmYXVsdEZvbnRTaXplOiAxMixcblx0ZGVmYXVsdEZvbnRTdHlsZTogJ25vcm1hbCcsXG5cdHNob3dMaW5lczogdHJ1ZSxcblxuXHQvLyBFbGVtZW50IGRlZmF1bHRzIGRlZmluZWQgaW4gZWxlbWVudCBleHRlbnNpb25zXG5cdGVsZW1lbnRzOiB7fSxcblxuXHQvLyBMYXlvdXQgb3B0aW9ucyBzdWNoIGFzIHBhZGRpbmdcblx0bGF5b3V0OiB7XG5cdFx0cGFkZGluZzoge1xuXHRcdFx0dG9wOiAwLFxuXHRcdFx0cmlnaHQ6IDAsXG5cdFx0XHRib3R0b206IDAsXG5cdFx0XHRsZWZ0OiAwXG5cdFx0fVxuXHR9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcblxuXHQvLyBPY2N1cHkgdGhlIGdsb2JhbCB2YXJpYWJsZSBvZiBDaGFydCwgYW5kIGNyZWF0ZSBhIHNpbXBsZSBiYXNlIGNsYXNzXG5cdHZhciBDaGFydCA9IGZ1bmN0aW9uKGl0ZW0sIGNvbmZpZykge1xuXHRcdHRoaXMuY29uc3RydWN0KGl0ZW0sIGNvbmZpZyk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH07XG5cblx0Q2hhcnQuQ2hhcnQgPSBDaGFydDtcblxuXHRyZXR1cm4gQ2hhcnQ7XG59O1xuIiwiLyogTUlUIGxpY2Vuc2UgKi9cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHJnYjJoc2w6IHJnYjJoc2wsXG4gIHJnYjJoc3Y6IHJnYjJoc3YsXG4gIHJnYjJod2I6IHJnYjJod2IsXG4gIHJnYjJjbXlrOiByZ2IyY215ayxcbiAgcmdiMmtleXdvcmQ6IHJnYjJrZXl3b3JkLFxuICByZ2IyeHl6OiByZ2IyeHl6LFxuICByZ2IybGFiOiByZ2IybGFiLFxuICByZ2IybGNoOiByZ2IybGNoLFxuXG4gIGhzbDJyZ2I6IGhzbDJyZ2IsXG4gIGhzbDJoc3Y6IGhzbDJoc3YsXG4gIGhzbDJod2I6IGhzbDJod2IsXG4gIGhzbDJjbXlrOiBoc2wyY215ayxcbiAgaHNsMmtleXdvcmQ6IGhzbDJrZXl3b3JkLFxuXG4gIGhzdjJyZ2I6IGhzdjJyZ2IsXG4gIGhzdjJoc2w6IGhzdjJoc2wsXG4gIGhzdjJod2I6IGhzdjJod2IsXG4gIGhzdjJjbXlrOiBoc3YyY215ayxcbiAgaHN2MmtleXdvcmQ6IGhzdjJrZXl3b3JkLFxuXG4gIGh3YjJyZ2I6IGh3YjJyZ2IsXG4gIGh3YjJoc2w6IGh3YjJoc2wsXG4gIGh3YjJoc3Y6IGh3YjJoc3YsXG4gIGh3YjJjbXlrOiBod2IyY215ayxcbiAgaHdiMmtleXdvcmQ6IGh3YjJrZXl3b3JkLFxuXG4gIGNteWsycmdiOiBjbXlrMnJnYixcbiAgY215azJoc2w6IGNteWsyaHNsLFxuICBjbXlrMmhzdjogY215azJoc3YsXG4gIGNteWsyaHdiOiBjbXlrMmh3YixcbiAgY215azJrZXl3b3JkOiBjbXlrMmtleXdvcmQsXG5cbiAga2V5d29yZDJyZ2I6IGtleXdvcmQycmdiLFxuICBrZXl3b3JkMmhzbDoga2V5d29yZDJoc2wsXG4gIGtleXdvcmQyaHN2OiBrZXl3b3JkMmhzdixcbiAga2V5d29yZDJod2I6IGtleXdvcmQyaHdiLFxuICBrZXl3b3JkMmNteWs6IGtleXdvcmQyY215ayxcbiAga2V5d29yZDJsYWI6IGtleXdvcmQybGFiLFxuICBrZXl3b3JkMnh5ejoga2V5d29yZDJ4eXosXG5cbiAgeHl6MnJnYjogeHl6MnJnYixcbiAgeHl6MmxhYjogeHl6MmxhYixcbiAgeHl6MmxjaDogeHl6MmxjaCxcblxuICBsYWIyeHl6OiBsYWIyeHl6LFxuICBsYWIycmdiOiBsYWIycmdiLFxuICBsYWIybGNoOiBsYWIybGNoLFxuXG4gIGxjaDJsYWI6IGxjaDJsYWIsXG4gIGxjaDJ4eXo6IGxjaDJ4eXosXG4gIGxjaDJyZ2I6IGxjaDJyZ2Jcbn1cblxuXG5mdW5jdGlvbiByZ2IyaHNsKHJnYikge1xuICB2YXIgciA9IHJnYlswXS8yNTUsXG4gICAgICBnID0gcmdiWzFdLzI1NSxcbiAgICAgIGIgPSByZ2JbMl0vMjU1LFxuICAgICAgbWluID0gTWF0aC5taW4ociwgZywgYiksXG4gICAgICBtYXggPSBNYXRoLm1heChyLCBnLCBiKSxcbiAgICAgIGRlbHRhID0gbWF4IC0gbWluLFxuICAgICAgaCwgcywgbDtcblxuICBpZiAobWF4ID09IG1pbilcbiAgICBoID0gMDtcbiAgZWxzZSBpZiAociA9PSBtYXgpXG4gICAgaCA9IChnIC0gYikgLyBkZWx0YTtcbiAgZWxzZSBpZiAoZyA9PSBtYXgpXG4gICAgaCA9IDIgKyAoYiAtIHIpIC8gZGVsdGE7XG4gIGVsc2UgaWYgKGIgPT0gbWF4KVxuICAgIGggPSA0ICsgKHIgLSBnKS8gZGVsdGE7XG5cbiAgaCA9IE1hdGgubWluKGggKiA2MCwgMzYwKTtcblxuICBpZiAoaCA8IDApXG4gICAgaCArPSAzNjA7XG5cbiAgbCA9IChtaW4gKyBtYXgpIC8gMjtcblxuICBpZiAobWF4ID09IG1pbilcbiAgICBzID0gMDtcbiAgZWxzZSBpZiAobCA8PSAwLjUpXG4gICAgcyA9IGRlbHRhIC8gKG1heCArIG1pbik7XG4gIGVsc2VcbiAgICBzID0gZGVsdGEgLyAoMiAtIG1heCAtIG1pbik7XG5cbiAgcmV0dXJuIFtoLCBzICogMTAwLCBsICogMTAwXTtcbn1cblxuZnVuY3Rpb24gcmdiMmhzdihyZ2IpIHtcbiAgdmFyIHIgPSByZ2JbMF0sXG4gICAgICBnID0gcmdiWzFdLFxuICAgICAgYiA9IHJnYlsyXSxcbiAgICAgIG1pbiA9IE1hdGgubWluKHIsIGcsIGIpLFxuICAgICAgbWF4ID0gTWF0aC5tYXgociwgZywgYiksXG4gICAgICBkZWx0YSA9IG1heCAtIG1pbixcbiAgICAgIGgsIHMsIHY7XG5cbiAgaWYgKG1heCA9PSAwKVxuICAgIHMgPSAwO1xuICBlbHNlXG4gICAgcyA9IChkZWx0YS9tYXggKiAxMDAwKS8xMDtcblxuICBpZiAobWF4ID09IG1pbilcbiAgICBoID0gMDtcbiAgZWxzZSBpZiAociA9PSBtYXgpXG4gICAgaCA9IChnIC0gYikgLyBkZWx0YTtcbiAgZWxzZSBpZiAoZyA9PSBtYXgpXG4gICAgaCA9IDIgKyAoYiAtIHIpIC8gZGVsdGE7XG4gIGVsc2UgaWYgKGIgPT0gbWF4KVxuICAgIGggPSA0ICsgKHIgLSBnKSAvIGRlbHRhO1xuXG4gIGggPSBNYXRoLm1pbihoICogNjAsIDM2MCk7XG5cbiAgaWYgKGggPCAwKVxuICAgIGggKz0gMzYwO1xuXG4gIHYgPSAoKG1heCAvIDI1NSkgKiAxMDAwKSAvIDEwO1xuXG4gIHJldHVybiBbaCwgcywgdl07XG59XG5cbmZ1bmN0aW9uIHJnYjJod2IocmdiKSB7XG4gIHZhciByID0gcmdiWzBdLFxuICAgICAgZyA9IHJnYlsxXSxcbiAgICAgIGIgPSByZ2JbMl0sXG4gICAgICBoID0gcmdiMmhzbChyZ2IpWzBdLFxuICAgICAgdyA9IDEvMjU1ICogTWF0aC5taW4ociwgTWF0aC5taW4oZywgYikpLFxuICAgICAgYiA9IDEgLSAxLzI1NSAqIE1hdGgubWF4KHIsIE1hdGgubWF4KGcsIGIpKTtcblxuICByZXR1cm4gW2gsIHcgKiAxMDAsIGIgKiAxMDBdO1xufVxuXG5mdW5jdGlvbiByZ2IyY215ayhyZ2IpIHtcbiAgdmFyIHIgPSByZ2JbMF0gLyAyNTUsXG4gICAgICBnID0gcmdiWzFdIC8gMjU1LFxuICAgICAgYiA9IHJnYlsyXSAvIDI1NSxcbiAgICAgIGMsIG0sIHksIGs7XG5cbiAgayA9IE1hdGgubWluKDEgLSByLCAxIC0gZywgMSAtIGIpO1xuICBjID0gKDEgLSByIC0gaykgLyAoMSAtIGspIHx8IDA7XG4gIG0gPSAoMSAtIGcgLSBrKSAvICgxIC0gaykgfHwgMDtcbiAgeSA9ICgxIC0gYiAtIGspIC8gKDEgLSBrKSB8fCAwO1xuICByZXR1cm4gW2MgKiAxMDAsIG0gKiAxMDAsIHkgKiAxMDAsIGsgKiAxMDBdO1xufVxuXG5mdW5jdGlvbiByZ2Iya2V5d29yZChyZ2IpIHtcbiAgcmV0dXJuIHJldmVyc2VLZXl3b3Jkc1tKU09OLnN0cmluZ2lmeShyZ2IpXTtcbn1cblxuZnVuY3Rpb24gcmdiMnh5eihyZ2IpIHtcbiAgdmFyIHIgPSByZ2JbMF0gLyAyNTUsXG4gICAgICBnID0gcmdiWzFdIC8gMjU1LFxuICAgICAgYiA9IHJnYlsyXSAvIDI1NTtcblxuICAvLyBhc3N1bWUgc1JHQlxuICByID0gciA+IDAuMDQwNDUgPyBNYXRoLnBvdygoKHIgKyAwLjA1NSkgLyAxLjA1NSksIDIuNCkgOiAociAvIDEyLjkyKTtcbiAgZyA9IGcgPiAwLjA0MDQ1ID8gTWF0aC5wb3coKChnICsgMC4wNTUpIC8gMS4wNTUpLCAyLjQpIDogKGcgLyAxMi45Mik7XG4gIGIgPSBiID4gMC4wNDA0NSA/IE1hdGgucG93KCgoYiArIDAuMDU1KSAvIDEuMDU1KSwgMi40KSA6IChiIC8gMTIuOTIpO1xuXG4gIHZhciB4ID0gKHIgKiAwLjQxMjQpICsgKGcgKiAwLjM1NzYpICsgKGIgKiAwLjE4MDUpO1xuICB2YXIgeSA9IChyICogMC4yMTI2KSArIChnICogMC43MTUyKSArIChiICogMC4wNzIyKTtcbiAgdmFyIHogPSAociAqIDAuMDE5MykgKyAoZyAqIDAuMTE5MikgKyAoYiAqIDAuOTUwNSk7XG5cbiAgcmV0dXJuIFt4ICogMTAwLCB5ICoxMDAsIHogKiAxMDBdO1xufVxuXG5mdW5jdGlvbiByZ2IybGFiKHJnYikge1xuICB2YXIgeHl6ID0gcmdiMnh5eihyZ2IpLFxuICAgICAgICB4ID0geHl6WzBdLFxuICAgICAgICB5ID0geHl6WzFdLFxuICAgICAgICB6ID0geHl6WzJdLFxuICAgICAgICBsLCBhLCBiO1xuXG4gIHggLz0gOTUuMDQ3O1xuICB5IC89IDEwMDtcbiAgeiAvPSAxMDguODgzO1xuXG4gIHggPSB4ID4gMC4wMDg4NTYgPyBNYXRoLnBvdyh4LCAxLzMpIDogKDcuNzg3ICogeCkgKyAoMTYgLyAxMTYpO1xuICB5ID0geSA+IDAuMDA4ODU2ID8gTWF0aC5wb3coeSwgMS8zKSA6ICg3Ljc4NyAqIHkpICsgKDE2IC8gMTE2KTtcbiAgeiA9IHogPiAwLjAwODg1NiA/IE1hdGgucG93KHosIDEvMykgOiAoNy43ODcgKiB6KSArICgxNiAvIDExNik7XG5cbiAgbCA9ICgxMTYgKiB5KSAtIDE2O1xuICBhID0gNTAwICogKHggLSB5KTtcbiAgYiA9IDIwMCAqICh5IC0geik7XG5cbiAgcmV0dXJuIFtsLCBhLCBiXTtcbn1cblxuZnVuY3Rpb24gcmdiMmxjaChhcmdzKSB7XG4gIHJldHVybiBsYWIybGNoKHJnYjJsYWIoYXJncykpO1xufVxuXG5mdW5jdGlvbiBoc2wycmdiKGhzbCkge1xuICB2YXIgaCA9IGhzbFswXSAvIDM2MCxcbiAgICAgIHMgPSBoc2xbMV0gLyAxMDAsXG4gICAgICBsID0gaHNsWzJdIC8gMTAwLFxuICAgICAgdDEsIHQyLCB0MywgcmdiLCB2YWw7XG5cbiAgaWYgKHMgPT0gMCkge1xuICAgIHZhbCA9IGwgKiAyNTU7XG4gICAgcmV0dXJuIFt2YWwsIHZhbCwgdmFsXTtcbiAgfVxuXG4gIGlmIChsIDwgMC41KVxuICAgIHQyID0gbCAqICgxICsgcyk7XG4gIGVsc2VcbiAgICB0MiA9IGwgKyBzIC0gbCAqIHM7XG4gIHQxID0gMiAqIGwgLSB0MjtcblxuICByZ2IgPSBbMCwgMCwgMF07XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgMzsgaSsrKSB7XG4gICAgdDMgPSBoICsgMSAvIDMgKiAtIChpIC0gMSk7XG4gICAgdDMgPCAwICYmIHQzKys7XG4gICAgdDMgPiAxICYmIHQzLS07XG5cbiAgICBpZiAoNiAqIHQzIDwgMSlcbiAgICAgIHZhbCA9IHQxICsgKHQyIC0gdDEpICogNiAqIHQzO1xuICAgIGVsc2UgaWYgKDIgKiB0MyA8IDEpXG4gICAgICB2YWwgPSB0MjtcbiAgICBlbHNlIGlmICgzICogdDMgPCAyKVxuICAgICAgdmFsID0gdDEgKyAodDIgLSB0MSkgKiAoMiAvIDMgLSB0MykgKiA2O1xuICAgIGVsc2VcbiAgICAgIHZhbCA9IHQxO1xuXG4gICAgcmdiW2ldID0gdmFsICogMjU1O1xuICB9XG5cbiAgcmV0dXJuIHJnYjtcbn1cblxuZnVuY3Rpb24gaHNsMmhzdihoc2wpIHtcbiAgdmFyIGggPSBoc2xbMF0sXG4gICAgICBzID0gaHNsWzFdIC8gMTAwLFxuICAgICAgbCA9IGhzbFsyXSAvIDEwMCxcbiAgICAgIHN2LCB2O1xuXG4gIGlmKGwgPT09IDApIHtcbiAgICAgIC8vIG5vIG5lZWQgdG8gZG8gY2FsYyBvbiBibGFja1xuICAgICAgLy8gYWxzbyBhdm9pZHMgZGl2aWRlIGJ5IDAgZXJyb3JcbiAgICAgIHJldHVybiBbMCwgMCwgMF07XG4gIH1cblxuICBsICo9IDI7XG4gIHMgKj0gKGwgPD0gMSkgPyBsIDogMiAtIGw7XG4gIHYgPSAobCArIHMpIC8gMjtcbiAgc3YgPSAoMiAqIHMpIC8gKGwgKyBzKTtcbiAgcmV0dXJuIFtoLCBzdiAqIDEwMCwgdiAqIDEwMF07XG59XG5cbmZ1bmN0aW9uIGhzbDJod2IoYXJncykge1xuICByZXR1cm4gcmdiMmh3Yihoc2wycmdiKGFyZ3MpKTtcbn1cblxuZnVuY3Rpb24gaHNsMmNteWsoYXJncykge1xuICByZXR1cm4gcmdiMmNteWsoaHNsMnJnYihhcmdzKSk7XG59XG5cbmZ1bmN0aW9uIGhzbDJrZXl3b3JkKGFyZ3MpIHtcbiAgcmV0dXJuIHJnYjJrZXl3b3JkKGhzbDJyZ2IoYXJncykpO1xufVxuXG5cbmZ1bmN0aW9uIGhzdjJyZ2IoaHN2KSB7XG4gIHZhciBoID0gaHN2WzBdIC8gNjAsXG4gICAgICBzID0gaHN2WzFdIC8gMTAwLFxuICAgICAgdiA9IGhzdlsyXSAvIDEwMCxcbiAgICAgIGhpID0gTWF0aC5mbG9vcihoKSAlIDY7XG5cbiAgdmFyIGYgPSBoIC0gTWF0aC5mbG9vcihoKSxcbiAgICAgIHAgPSAyNTUgKiB2ICogKDEgLSBzKSxcbiAgICAgIHEgPSAyNTUgKiB2ICogKDEgLSAocyAqIGYpKSxcbiAgICAgIHQgPSAyNTUgKiB2ICogKDEgLSAocyAqICgxIC0gZikpKSxcbiAgICAgIHYgPSAyNTUgKiB2O1xuXG4gIHN3aXRjaChoaSkge1xuICAgIGNhc2UgMDpcbiAgICAgIHJldHVybiBbdiwgdCwgcF07XG4gICAgY2FzZSAxOlxuICAgICAgcmV0dXJuIFtxLCB2LCBwXTtcbiAgICBjYXNlIDI6XG4gICAgICByZXR1cm4gW3AsIHYsIHRdO1xuICAgIGNhc2UgMzpcbiAgICAgIHJldHVybiBbcCwgcSwgdl07XG4gICAgY2FzZSA0OlxuICAgICAgcmV0dXJuIFt0LCBwLCB2XTtcbiAgICBjYXNlIDU6XG4gICAgICByZXR1cm4gW3YsIHAsIHFdO1xuICB9XG59XG5cbmZ1bmN0aW9uIGhzdjJoc2woaHN2KSB7XG4gIHZhciBoID0gaHN2WzBdLFxuICAgICAgcyA9IGhzdlsxXSAvIDEwMCxcbiAgICAgIHYgPSBoc3ZbMl0gLyAxMDAsXG4gICAgICBzbCwgbDtcblxuICBsID0gKDIgLSBzKSAqIHY7XG4gIHNsID0gcyAqIHY7XG4gIHNsIC89IChsIDw9IDEpID8gbCA6IDIgLSBsO1xuICBzbCA9IHNsIHx8IDA7XG4gIGwgLz0gMjtcbiAgcmV0dXJuIFtoLCBzbCAqIDEwMCwgbCAqIDEwMF07XG59XG5cbmZ1bmN0aW9uIGhzdjJod2IoYXJncykge1xuICByZXR1cm4gcmdiMmh3Yihoc3YycmdiKGFyZ3MpKVxufVxuXG5mdW5jdGlvbiBoc3YyY215ayhhcmdzKSB7XG4gIHJldHVybiByZ2IyY215ayhoc3YycmdiKGFyZ3MpKTtcbn1cblxuZnVuY3Rpb24gaHN2MmtleXdvcmQoYXJncykge1xuICByZXR1cm4gcmdiMmtleXdvcmQoaHN2MnJnYihhcmdzKSk7XG59XG5cbi8vIGh0dHA6Ly9kZXYudzMub3JnL2Nzc3dnL2Nzcy1jb2xvci8jaHdiLXRvLXJnYlxuZnVuY3Rpb24gaHdiMnJnYihod2IpIHtcbiAgdmFyIGggPSBod2JbMF0gLyAzNjAsXG4gICAgICB3aCA9IGh3YlsxXSAvIDEwMCxcbiAgICAgIGJsID0gaHdiWzJdIC8gMTAwLFxuICAgICAgcmF0aW8gPSB3aCArIGJsLFxuICAgICAgaSwgdiwgZiwgbjtcblxuICAvLyB3aCArIGJsIGNhbnQgYmUgPiAxXG4gIGlmIChyYXRpbyA+IDEpIHtcbiAgICB3aCAvPSByYXRpbztcbiAgICBibCAvPSByYXRpbztcbiAgfVxuXG4gIGkgPSBNYXRoLmZsb29yKDYgKiBoKTtcbiAgdiA9IDEgLSBibDtcbiAgZiA9IDYgKiBoIC0gaTtcbiAgaWYgKChpICYgMHgwMSkgIT0gMCkge1xuICAgIGYgPSAxIC0gZjtcbiAgfVxuICBuID0gd2ggKyBmICogKHYgLSB3aCk7ICAvLyBsaW5lYXIgaW50ZXJwb2xhdGlvblxuXG4gIHN3aXRjaCAoaSkge1xuICAgIGRlZmF1bHQ6XG4gICAgY2FzZSA2OlxuICAgIGNhc2UgMDogciA9IHY7IGcgPSBuOyBiID0gd2g7IGJyZWFrO1xuICAgIGNhc2UgMTogciA9IG47IGcgPSB2OyBiID0gd2g7IGJyZWFrO1xuICAgIGNhc2UgMjogciA9IHdoOyBnID0gdjsgYiA9IG47IGJyZWFrO1xuICAgIGNhc2UgMzogciA9IHdoOyBnID0gbjsgYiA9IHY7IGJyZWFrO1xuICAgIGNhc2UgNDogciA9IG47IGcgPSB3aDsgYiA9IHY7IGJyZWFrO1xuICAgIGNhc2UgNTogciA9IHY7IGcgPSB3aDsgYiA9IG47IGJyZWFrO1xuICB9XG5cbiAgcmV0dXJuIFtyICogMjU1LCBnICogMjU1LCBiICogMjU1XTtcbn1cblxuZnVuY3Rpb24gaHdiMmhzbChhcmdzKSB7XG4gIHJldHVybiByZ2IyaHNsKGh3YjJyZ2IoYXJncykpO1xufVxuXG5mdW5jdGlvbiBod2IyaHN2KGFyZ3MpIHtcbiAgcmV0dXJuIHJnYjJoc3YoaHdiMnJnYihhcmdzKSk7XG59XG5cbmZ1bmN0aW9uIGh3YjJjbXlrKGFyZ3MpIHtcbiAgcmV0dXJuIHJnYjJjbXlrKGh3YjJyZ2IoYXJncykpO1xufVxuXG5mdW5jdGlvbiBod2Iya2V5d29yZChhcmdzKSB7XG4gIHJldHVybiByZ2Iya2V5d29yZChod2IycmdiKGFyZ3MpKTtcbn1cblxuZnVuY3Rpb24gY215azJyZ2IoY215aykge1xuICB2YXIgYyA9IGNteWtbMF0gLyAxMDAsXG4gICAgICBtID0gY215a1sxXSAvIDEwMCxcbiAgICAgIHkgPSBjbXlrWzJdIC8gMTAwLFxuICAgICAgayA9IGNteWtbM10gLyAxMDAsXG4gICAgICByLCBnLCBiO1xuXG4gIHIgPSAxIC0gTWF0aC5taW4oMSwgYyAqICgxIC0gaykgKyBrKTtcbiAgZyA9IDEgLSBNYXRoLm1pbigxLCBtICogKDEgLSBrKSArIGspO1xuICBiID0gMSAtIE1hdGgubWluKDEsIHkgKiAoMSAtIGspICsgayk7XG4gIHJldHVybiBbciAqIDI1NSwgZyAqIDI1NSwgYiAqIDI1NV07XG59XG5cbmZ1bmN0aW9uIGNteWsyaHNsKGFyZ3MpIHtcbiAgcmV0dXJuIHJnYjJoc2woY215azJyZ2IoYXJncykpO1xufVxuXG5mdW5jdGlvbiBjbXlrMmhzdihhcmdzKSB7XG4gIHJldHVybiByZ2IyaHN2KGNteWsycmdiKGFyZ3MpKTtcbn1cblxuZnVuY3Rpb24gY215azJod2IoYXJncykge1xuICByZXR1cm4gcmdiMmh3YihjbXlrMnJnYihhcmdzKSk7XG59XG5cbmZ1bmN0aW9uIGNteWsya2V5d29yZChhcmdzKSB7XG4gIHJldHVybiByZ2Iya2V5d29yZChjbXlrMnJnYihhcmdzKSk7XG59XG5cblxuZnVuY3Rpb24geHl6MnJnYih4eXopIHtcbiAgdmFyIHggPSB4eXpbMF0gLyAxMDAsXG4gICAgICB5ID0geHl6WzFdIC8gMTAwLFxuICAgICAgeiA9IHh5elsyXSAvIDEwMCxcbiAgICAgIHIsIGcsIGI7XG5cbiAgciA9ICh4ICogMy4yNDA2KSArICh5ICogLTEuNTM3MikgKyAoeiAqIC0wLjQ5ODYpO1xuICBnID0gKHggKiAtMC45Njg5KSArICh5ICogMS44NzU4KSArICh6ICogMC4wNDE1KTtcbiAgYiA9ICh4ICogMC4wNTU3KSArICh5ICogLTAuMjA0MCkgKyAoeiAqIDEuMDU3MCk7XG5cbiAgLy8gYXNzdW1lIHNSR0JcbiAgciA9IHIgPiAwLjAwMzEzMDggPyAoKDEuMDU1ICogTWF0aC5wb3cociwgMS4wIC8gMi40KSkgLSAwLjA1NSlcbiAgICA6IHIgPSAociAqIDEyLjkyKTtcblxuICBnID0gZyA+IDAuMDAzMTMwOCA/ICgoMS4wNTUgKiBNYXRoLnBvdyhnLCAxLjAgLyAyLjQpKSAtIDAuMDU1KVxuICAgIDogZyA9IChnICogMTIuOTIpO1xuXG4gIGIgPSBiID4gMC4wMDMxMzA4ID8gKCgxLjA1NSAqIE1hdGgucG93KGIsIDEuMCAvIDIuNCkpIC0gMC4wNTUpXG4gICAgOiBiID0gKGIgKiAxMi45Mik7XG5cbiAgciA9IE1hdGgubWluKE1hdGgubWF4KDAsIHIpLCAxKTtcbiAgZyA9IE1hdGgubWluKE1hdGgubWF4KDAsIGcpLCAxKTtcbiAgYiA9IE1hdGgubWluKE1hdGgubWF4KDAsIGIpLCAxKTtcblxuICByZXR1cm4gW3IgKiAyNTUsIGcgKiAyNTUsIGIgKiAyNTVdO1xufVxuXG5mdW5jdGlvbiB4eXoybGFiKHh5eikge1xuICB2YXIgeCA9IHh5elswXSxcbiAgICAgIHkgPSB4eXpbMV0sXG4gICAgICB6ID0geHl6WzJdLFxuICAgICAgbCwgYSwgYjtcblxuICB4IC89IDk1LjA0NztcbiAgeSAvPSAxMDA7XG4gIHogLz0gMTA4Ljg4MztcblxuICB4ID0geCA+IDAuMDA4ODU2ID8gTWF0aC5wb3coeCwgMS8zKSA6ICg3Ljc4NyAqIHgpICsgKDE2IC8gMTE2KTtcbiAgeSA9IHkgPiAwLjAwODg1NiA/IE1hdGgucG93KHksIDEvMykgOiAoNy43ODcgKiB5KSArICgxNiAvIDExNik7XG4gIHogPSB6ID4gMC4wMDg4NTYgPyBNYXRoLnBvdyh6LCAxLzMpIDogKDcuNzg3ICogeikgKyAoMTYgLyAxMTYpO1xuXG4gIGwgPSAoMTE2ICogeSkgLSAxNjtcbiAgYSA9IDUwMCAqICh4IC0geSk7XG4gIGIgPSAyMDAgKiAoeSAtIHopO1xuXG4gIHJldHVybiBbbCwgYSwgYl07XG59XG5cbmZ1bmN0aW9uIHh5ejJsY2goYXJncykge1xuICByZXR1cm4gbGFiMmxjaCh4eXoybGFiKGFyZ3MpKTtcbn1cblxuZnVuY3Rpb24gbGFiMnh5eihsYWIpIHtcbiAgdmFyIGwgPSBsYWJbMF0sXG4gICAgICBhID0gbGFiWzFdLFxuICAgICAgYiA9IGxhYlsyXSxcbiAgICAgIHgsIHksIHosIHkyO1xuXG4gIGlmIChsIDw9IDgpIHtcbiAgICB5ID0gKGwgKiAxMDApIC8gOTAzLjM7XG4gICAgeTIgPSAoNy43ODcgKiAoeSAvIDEwMCkpICsgKDE2IC8gMTE2KTtcbiAgfSBlbHNlIHtcbiAgICB5ID0gMTAwICogTWF0aC5wb3coKGwgKyAxNikgLyAxMTYsIDMpO1xuICAgIHkyID0gTWF0aC5wb3coeSAvIDEwMCwgMS8zKTtcbiAgfVxuXG4gIHggPSB4IC8gOTUuMDQ3IDw9IDAuMDA4ODU2ID8geCA9ICg5NS4wNDcgKiAoKGEgLyA1MDApICsgeTIgLSAoMTYgLyAxMTYpKSkgLyA3Ljc4NyA6IDk1LjA0NyAqIE1hdGgucG93KChhIC8gNTAwKSArIHkyLCAzKTtcblxuICB6ID0geiAvIDEwOC44ODMgPD0gMC4wMDg4NTkgPyB6ID0gKDEwOC44ODMgKiAoeTIgLSAoYiAvIDIwMCkgLSAoMTYgLyAxMTYpKSkgLyA3Ljc4NyA6IDEwOC44ODMgKiBNYXRoLnBvdyh5MiAtIChiIC8gMjAwKSwgMyk7XG5cbiAgcmV0dXJuIFt4LCB5LCB6XTtcbn1cblxuZnVuY3Rpb24gbGFiMmxjaChsYWIpIHtcbiAgdmFyIGwgPSBsYWJbMF0sXG4gICAgICBhID0gbGFiWzFdLFxuICAgICAgYiA9IGxhYlsyXSxcbiAgICAgIGhyLCBoLCBjO1xuXG4gIGhyID0gTWF0aC5hdGFuMihiLCBhKTtcbiAgaCA9IGhyICogMzYwIC8gMiAvIE1hdGguUEk7XG4gIGlmIChoIDwgMCkge1xuICAgIGggKz0gMzYwO1xuICB9XG4gIGMgPSBNYXRoLnNxcnQoYSAqIGEgKyBiICogYik7XG4gIHJldHVybiBbbCwgYywgaF07XG59XG5cbmZ1bmN0aW9uIGxhYjJyZ2IoYXJncykge1xuICByZXR1cm4geHl6MnJnYihsYWIyeHl6KGFyZ3MpKTtcbn1cblxuZnVuY3Rpb24gbGNoMmxhYihsY2gpIHtcbiAgdmFyIGwgPSBsY2hbMF0sXG4gICAgICBjID0gbGNoWzFdLFxuICAgICAgaCA9IGxjaFsyXSxcbiAgICAgIGEsIGIsIGhyO1xuXG4gIGhyID0gaCAvIDM2MCAqIDIgKiBNYXRoLlBJO1xuICBhID0gYyAqIE1hdGguY29zKGhyKTtcbiAgYiA9IGMgKiBNYXRoLnNpbihocik7XG4gIHJldHVybiBbbCwgYSwgYl07XG59XG5cbmZ1bmN0aW9uIGxjaDJ4eXooYXJncykge1xuICByZXR1cm4gbGFiMnh5eihsY2gybGFiKGFyZ3MpKTtcbn1cblxuZnVuY3Rpb24gbGNoMnJnYihhcmdzKSB7XG4gIHJldHVybiBsYWIycmdiKGxjaDJsYWIoYXJncykpO1xufVxuXG5mdW5jdGlvbiBrZXl3b3JkMnJnYihrZXl3b3JkKSB7XG4gIHJldHVybiBjc3NLZXl3b3Jkc1trZXl3b3JkXTtcbn1cblxuZnVuY3Rpb24ga2V5d29yZDJoc2woYXJncykge1xuICByZXR1cm4gcmdiMmhzbChrZXl3b3JkMnJnYihhcmdzKSk7XG59XG5cbmZ1bmN0aW9uIGtleXdvcmQyaHN2KGFyZ3MpIHtcbiAgcmV0dXJuIHJnYjJoc3Yoa2V5d29yZDJyZ2IoYXJncykpO1xufVxuXG5mdW5jdGlvbiBrZXl3b3JkMmh3YihhcmdzKSB7XG4gIHJldHVybiByZ2IyaHdiKGtleXdvcmQycmdiKGFyZ3MpKTtcbn1cblxuZnVuY3Rpb24ga2V5d29yZDJjbXlrKGFyZ3MpIHtcbiAgcmV0dXJuIHJnYjJjbXlrKGtleXdvcmQycmdiKGFyZ3MpKTtcbn1cblxuZnVuY3Rpb24ga2V5d29yZDJsYWIoYXJncykge1xuICByZXR1cm4gcmdiMmxhYihrZXl3b3JkMnJnYihhcmdzKSk7XG59XG5cbmZ1bmN0aW9uIGtleXdvcmQyeHl6KGFyZ3MpIHtcbiAgcmV0dXJuIHJnYjJ4eXooa2V5d29yZDJyZ2IoYXJncykpO1xufVxuXG52YXIgY3NzS2V5d29yZHMgPSB7XG4gIGFsaWNlYmx1ZTogIFsyNDAsMjQ4LDI1NV0sXG4gIGFudGlxdWV3aGl0ZTogWzI1MCwyMzUsMjE1XSxcbiAgYXF1YTogWzAsMjU1LDI1NV0sXG4gIGFxdWFtYXJpbmU6IFsxMjcsMjU1LDIxMl0sXG4gIGF6dXJlOiAgWzI0MCwyNTUsMjU1XSxcbiAgYmVpZ2U6ICBbMjQ1LDI0NSwyMjBdLFxuICBiaXNxdWU6IFsyNTUsMjI4LDE5Nl0sXG4gIGJsYWNrOiAgWzAsMCwwXSxcbiAgYmxhbmNoZWRhbG1vbmQ6IFsyNTUsMjM1LDIwNV0sXG4gIGJsdWU6IFswLDAsMjU1XSxcbiAgYmx1ZXZpb2xldDogWzEzOCw0MywyMjZdLFxuICBicm93bjogIFsxNjUsNDIsNDJdLFxuICBidXJseXdvb2Q6ICBbMjIyLDE4NCwxMzVdLFxuICBjYWRldGJsdWU6ICBbOTUsMTU4LDE2MF0sXG4gIGNoYXJ0cmV1c2U6IFsxMjcsMjU1LDBdLFxuICBjaG9jb2xhdGU6ICBbMjEwLDEwNSwzMF0sXG4gIGNvcmFsOiAgWzI1NSwxMjcsODBdLFxuICBjb3JuZmxvd2VyYmx1ZTogWzEwMCwxNDksMjM3XSxcbiAgY29ybnNpbGs6IFsyNTUsMjQ4LDIyMF0sXG4gIGNyaW1zb246ICBbMjIwLDIwLDYwXSxcbiAgY3lhbjogWzAsMjU1LDI1NV0sXG4gIGRhcmtibHVlOiBbMCwwLDEzOV0sXG4gIGRhcmtjeWFuOiBbMCwxMzksMTM5XSxcbiAgZGFya2dvbGRlbnJvZDogIFsxODQsMTM0LDExXSxcbiAgZGFya2dyYXk6IFsxNjksMTY5LDE2OV0sXG4gIGRhcmtncmVlbjogIFswLDEwMCwwXSxcbiAgZGFya2dyZXk6IFsxNjksMTY5LDE2OV0sXG4gIGRhcmtraGFraTogIFsxODksMTgzLDEwN10sXG4gIGRhcmttYWdlbnRhOiAgWzEzOSwwLDEzOV0sXG4gIGRhcmtvbGl2ZWdyZWVuOiBbODUsMTA3LDQ3XSxcbiAgZGFya29yYW5nZTogWzI1NSwxNDAsMF0sXG4gIGRhcmtvcmNoaWQ6IFsxNTMsNTAsMjA0XSxcbiAgZGFya3JlZDogIFsxMzksMCwwXSxcbiAgZGFya3NhbG1vbjogWzIzMywxNTAsMTIyXSxcbiAgZGFya3NlYWdyZWVuOiBbMTQzLDE4OCwxNDNdLFxuICBkYXJrc2xhdGVibHVlOiAgWzcyLDYxLDEzOV0sXG4gIGRhcmtzbGF0ZWdyYXk6ICBbNDcsNzksNzldLFxuICBkYXJrc2xhdGVncmV5OiAgWzQ3LDc5LDc5XSxcbiAgZGFya3R1cnF1b2lzZTogIFswLDIwNiwyMDldLFxuICBkYXJrdmlvbGV0OiBbMTQ4LDAsMjExXSxcbiAgZGVlcHBpbms6IFsyNTUsMjAsMTQ3XSxcbiAgZGVlcHNreWJsdWU6ICBbMCwxOTEsMjU1XSxcbiAgZGltZ3JheTogIFsxMDUsMTA1LDEwNV0sXG4gIGRpbWdyZXk6ICBbMTA1LDEwNSwxMDVdLFxuICBkb2RnZXJibHVlOiBbMzAsMTQ0LDI1NV0sXG4gIGZpcmVicmljazogIFsxNzgsMzQsMzRdLFxuICBmbG9yYWx3aGl0ZTogIFsyNTUsMjUwLDI0MF0sXG4gIGZvcmVzdGdyZWVuOiAgWzM0LDEzOSwzNF0sXG4gIGZ1Y2hzaWE6ICBbMjU1LDAsMjU1XSxcbiAgZ2FpbnNib3JvOiAgWzIyMCwyMjAsMjIwXSxcbiAgZ2hvc3R3aGl0ZTogWzI0OCwyNDgsMjU1XSxcbiAgZ29sZDogWzI1NSwyMTUsMF0sXG4gIGdvbGRlbnJvZDogIFsyMTgsMTY1LDMyXSxcbiAgZ3JheTogWzEyOCwxMjgsMTI4XSxcbiAgZ3JlZW46ICBbMCwxMjgsMF0sXG4gIGdyZWVueWVsbG93OiAgWzE3MywyNTUsNDddLFxuICBncmV5OiBbMTI4LDEyOCwxMjhdLFxuICBob25leWRldzogWzI0MCwyNTUsMjQwXSxcbiAgaG90cGluazogIFsyNTUsMTA1LDE4MF0sXG4gIGluZGlhbnJlZDogIFsyMDUsOTIsOTJdLFxuICBpbmRpZ286IFs3NSwwLDEzMF0sXG4gIGl2b3J5OiAgWzI1NSwyNTUsMjQwXSxcbiAga2hha2k6ICBbMjQwLDIzMCwxNDBdLFxuICBsYXZlbmRlcjogWzIzMCwyMzAsMjUwXSxcbiAgbGF2ZW5kZXJibHVzaDogIFsyNTUsMjQwLDI0NV0sXG4gIGxhd25ncmVlbjogIFsxMjQsMjUyLDBdLFxuICBsZW1vbmNoaWZmb246IFsyNTUsMjUwLDIwNV0sXG4gIGxpZ2h0Ymx1ZTogIFsxNzMsMjE2LDIzMF0sXG4gIGxpZ2h0Y29yYWw6IFsyNDAsMTI4LDEyOF0sXG4gIGxpZ2h0Y3lhbjogIFsyMjQsMjU1LDI1NV0sXG4gIGxpZ2h0Z29sZGVucm9keWVsbG93OiBbMjUwLDI1MCwyMTBdLFxuICBsaWdodGdyYXk6ICBbMjExLDIxMSwyMTFdLFxuICBsaWdodGdyZWVuOiBbMTQ0LDIzOCwxNDRdLFxuICBsaWdodGdyZXk6ICBbMjExLDIxMSwyMTFdLFxuICBsaWdodHBpbms6ICBbMjU1LDE4MiwxOTNdLFxuICBsaWdodHNhbG1vbjogIFsyNTUsMTYwLDEyMl0sXG4gIGxpZ2h0c2VhZ3JlZW46ICBbMzIsMTc4LDE3MF0sXG4gIGxpZ2h0c2t5Ymx1ZTogWzEzNSwyMDYsMjUwXSxcbiAgbGlnaHRzbGF0ZWdyYXk6IFsxMTksMTM2LDE1M10sXG4gIGxpZ2h0c2xhdGVncmV5OiBbMTE5LDEzNiwxNTNdLFxuICBsaWdodHN0ZWVsYmx1ZTogWzE3NiwxOTYsMjIyXSxcbiAgbGlnaHR5ZWxsb3c6ICBbMjU1LDI1NSwyMjRdLFxuICBsaW1lOiBbMCwyNTUsMF0sXG4gIGxpbWVncmVlbjogIFs1MCwyMDUsNTBdLFxuICBsaW5lbjogIFsyNTAsMjQwLDIzMF0sXG4gIG1hZ2VudGE6ICBbMjU1LDAsMjU1XSxcbiAgbWFyb29uOiBbMTI4LDAsMF0sXG4gIG1lZGl1bWFxdWFtYXJpbmU6IFsxMDIsMjA1LDE3MF0sXG4gIG1lZGl1bWJsdWU6IFswLDAsMjA1XSxcbiAgbWVkaXVtb3JjaGlkOiBbMTg2LDg1LDIxMV0sXG4gIG1lZGl1bXB1cnBsZTogWzE0NywxMTIsMjE5XSxcbiAgbWVkaXVtc2VhZ3JlZW46IFs2MCwxNzksMTEzXSxcbiAgbWVkaXVtc2xhdGVibHVlOiAgWzEyMywxMDQsMjM4XSxcbiAgbWVkaXVtc3ByaW5nZ3JlZW46ICBbMCwyNTAsMTU0XSxcbiAgbWVkaXVtdHVycXVvaXNlOiAgWzcyLDIwOSwyMDRdLFxuICBtZWRpdW12aW9sZXRyZWQ6ICBbMTk5LDIxLDEzM10sXG4gIG1pZG5pZ2h0Ymx1ZTogWzI1LDI1LDExMl0sXG4gIG1pbnRjcmVhbTogIFsyNDUsMjU1LDI1MF0sXG4gIG1pc3R5cm9zZTogIFsyNTUsMjI4LDIyNV0sXG4gIG1vY2Nhc2luOiBbMjU1LDIyOCwxODFdLFxuICBuYXZham93aGl0ZTogIFsyNTUsMjIyLDE3M10sXG4gIG5hdnk6IFswLDAsMTI4XSxcbiAgb2xkbGFjZTogIFsyNTMsMjQ1LDIzMF0sXG4gIG9saXZlOiAgWzEyOCwxMjgsMF0sXG4gIG9saXZlZHJhYjogIFsxMDcsMTQyLDM1XSxcbiAgb3JhbmdlOiBbMjU1LDE2NSwwXSxcbiAgb3JhbmdlcmVkOiAgWzI1NSw2OSwwXSxcbiAgb3JjaGlkOiBbMjE4LDExMiwyMTRdLFxuICBwYWxlZ29sZGVucm9kOiAgWzIzOCwyMzIsMTcwXSxcbiAgcGFsZWdyZWVuOiAgWzE1MiwyNTEsMTUyXSxcbiAgcGFsZXR1cnF1b2lzZTogIFsxNzUsMjM4LDIzOF0sXG4gIHBhbGV2aW9sZXRyZWQ6ICBbMjE5LDExMiwxNDddLFxuICBwYXBheWF3aGlwOiBbMjU1LDIzOSwyMTNdLFxuICBwZWFjaHB1ZmY6ICBbMjU1LDIxOCwxODVdLFxuICBwZXJ1OiBbMjA1LDEzMyw2M10sXG4gIHBpbms6IFsyNTUsMTkyLDIwM10sXG4gIHBsdW06IFsyMjEsMTYwLDIyMV0sXG4gIHBvd2RlcmJsdWU6IFsxNzYsMjI0LDIzMF0sXG4gIHB1cnBsZTogWzEyOCwwLDEyOF0sXG4gIHJlYmVjY2FwdXJwbGU6IFsxMDIsIDUxLCAxNTNdLFxuICByZWQ6ICBbMjU1LDAsMF0sXG4gIHJvc3licm93bjogIFsxODgsMTQzLDE0M10sXG4gIHJveWFsYmx1ZTogIFs2NSwxMDUsMjI1XSxcbiAgc2FkZGxlYnJvd246ICBbMTM5LDY5LDE5XSxcbiAgc2FsbW9uOiBbMjUwLDEyOCwxMTRdLFxuICBzYW5keWJyb3duOiBbMjQ0LDE2NCw5Nl0sXG4gIHNlYWdyZWVuOiBbNDYsMTM5LDg3XSxcbiAgc2Vhc2hlbGw6IFsyNTUsMjQ1LDIzOF0sXG4gIHNpZW5uYTogWzE2MCw4Miw0NV0sXG4gIHNpbHZlcjogWzE5MiwxOTIsMTkyXSxcbiAgc2t5Ymx1ZTogIFsxMzUsMjA2LDIzNV0sXG4gIHNsYXRlYmx1ZTogIFsxMDYsOTAsMjA1XSxcbiAgc2xhdGVncmF5OiAgWzExMiwxMjgsMTQ0XSxcbiAgc2xhdGVncmV5OiAgWzExMiwxMjgsMTQ0XSxcbiAgc25vdzogWzI1NSwyNTAsMjUwXSxcbiAgc3ByaW5nZ3JlZW46ICBbMCwyNTUsMTI3XSxcbiAgc3RlZWxibHVlOiAgWzcwLDEzMCwxODBdLFxuICB0YW46ICBbMjEwLDE4MCwxNDBdLFxuICB0ZWFsOiBbMCwxMjgsMTI4XSxcbiAgdGhpc3RsZTogIFsyMTYsMTkxLDIxNl0sXG4gIHRvbWF0bzogWzI1NSw5OSw3MV0sXG4gIHR1cnF1b2lzZTogIFs2NCwyMjQsMjA4XSxcbiAgdmlvbGV0OiBbMjM4LDEzMCwyMzhdLFxuICB3aGVhdDogIFsyNDUsMjIyLDE3OV0sXG4gIHdoaXRlOiAgWzI1NSwyNTUsMjU1XSxcbiAgd2hpdGVzbW9rZTogWzI0NSwyNDUsMjQ1XSxcbiAgeWVsbG93OiBbMjU1LDI1NSwwXSxcbiAgeWVsbG93Z3JlZW46ICBbMTU0LDIwNSw1MF1cbn07XG5cbnZhciByZXZlcnNlS2V5d29yZHMgPSB7fTtcbmZvciAodmFyIGtleSBpbiBjc3NLZXl3b3Jkcykge1xuICByZXZlcnNlS2V5d29yZHNbSlNPTi5zdHJpbmdpZnkoY3NzS2V5d29yZHNba2V5XSldID0ga2V5O1xufVxuIiwidmFyIGNvbnZlcnNpb25zID0gcmVxdWlyZShcIi4vY29udmVyc2lvbnNcIik7XG5cbnZhciBjb252ZXJ0ID0gZnVuY3Rpb24oKSB7XG4gICByZXR1cm4gbmV3IENvbnZlcnRlcigpO1xufVxuXG5mb3IgKHZhciBmdW5jIGluIGNvbnZlcnNpb25zKSB7XG4gIC8vIGV4cG9ydCBSYXcgdmVyc2lvbnNcbiAgY29udmVydFtmdW5jICsgXCJSYXdcIl0gPSAgKGZ1bmN0aW9uKGZ1bmMpIHtcbiAgICAvLyBhY2NlcHQgYXJyYXkgb3IgcGxhaW4gYXJnc1xuICAgIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICAgIGlmICh0eXBlb2YgYXJnID09IFwibnVtYmVyXCIpXG4gICAgICAgIGFyZyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICByZXR1cm4gY29udmVyc2lvbnNbZnVuY10oYXJnKTtcbiAgICB9XG4gIH0pKGZ1bmMpO1xuXG4gIHZhciBwYWlyID0gLyhcXHcrKTIoXFx3KykvLmV4ZWMoZnVuYyksXG4gICAgICBmcm9tID0gcGFpclsxXSxcbiAgICAgIHRvID0gcGFpclsyXTtcblxuICAvLyBleHBvcnQgcmdiMmhzbCBhbmQgW1wicmdiXCJdW1wiaHNsXCJdXG4gIGNvbnZlcnRbZnJvbV0gPSBjb252ZXJ0W2Zyb21dIHx8IHt9O1xuXG4gIGNvbnZlcnRbZnJvbV1bdG9dID0gY29udmVydFtmdW5jXSA9IChmdW5jdGlvbihmdW5jKSB7IFxuICAgIHJldHVybiBmdW5jdGlvbihhcmcpIHtcbiAgICAgIGlmICh0eXBlb2YgYXJnID09IFwibnVtYmVyXCIpXG4gICAgICAgIGFyZyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cyk7XG4gICAgICBcbiAgICAgIHZhciB2YWwgPSBjb252ZXJzaW9uc1tmdW5jXShhcmcpO1xuICAgICAgaWYgKHR5cGVvZiB2YWwgPT0gXCJzdHJpbmdcIiB8fCB2YWwgPT09IHVuZGVmaW5lZClcbiAgICAgICAgcmV0dXJuIHZhbDsgLy8ga2V5d29yZFxuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbC5sZW5ndGg7IGkrKylcbiAgICAgICAgdmFsW2ldID0gTWF0aC5yb3VuZCh2YWxbaV0pO1xuICAgICAgcmV0dXJuIHZhbDtcbiAgICB9XG4gIH0pKGZ1bmMpO1xufVxuXG5cbi8qIENvbnZlcnRlciBkb2VzIGxhenkgY29udmVyc2lvbiBhbmQgY2FjaGluZyAqL1xudmFyIENvbnZlcnRlciA9IGZ1bmN0aW9uKCkge1xuICAgdGhpcy5jb252cyA9IHt9O1xufTtcblxuLyogRWl0aGVyIGdldCB0aGUgdmFsdWVzIGZvciBhIHNwYWNlIG9yXG4gIHNldCB0aGUgdmFsdWVzIGZvciBhIHNwYWNlLCBkZXBlbmRpbmcgb24gYXJncyAqL1xuQ29udmVydGVyLnByb3RvdHlwZS5yb3V0ZVNwYWNlID0gZnVuY3Rpb24oc3BhY2UsIGFyZ3MpIHtcbiAgIHZhciB2YWx1ZXMgPSBhcmdzWzBdO1xuICAgaWYgKHZhbHVlcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvLyBjb2xvci5yZ2IoKVxuICAgICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWVzKHNwYWNlKTtcbiAgIH1cbiAgIC8vIGNvbG9yLnJnYigxMCwgMTAsIDEwKVxuICAgaWYgKHR5cGVvZiB2YWx1ZXMgPT0gXCJudW1iZXJcIikge1xuICAgICAgdmFsdWVzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJncyk7ICAgICAgICBcbiAgIH1cblxuICAgcmV0dXJuIHRoaXMuc2V0VmFsdWVzKHNwYWNlLCB2YWx1ZXMpO1xufTtcbiAgXG4vKiBTZXQgdGhlIHZhbHVlcyBmb3IgYSBzcGFjZSwgaW52YWxpZGF0aW5nIGNhY2hlICovXG5Db252ZXJ0ZXIucHJvdG90eXBlLnNldFZhbHVlcyA9IGZ1bmN0aW9uKHNwYWNlLCB2YWx1ZXMpIHtcbiAgIHRoaXMuc3BhY2UgPSBzcGFjZTtcbiAgIHRoaXMuY29udnMgPSB7fTtcbiAgIHRoaXMuY29udnNbc3BhY2VdID0gdmFsdWVzO1xuICAgcmV0dXJuIHRoaXM7XG59O1xuXG4vKiBHZXQgdGhlIHZhbHVlcyBmb3IgYSBzcGFjZS4gSWYgdGhlcmUncyBhbHJlYWR5XG4gIGEgY29udmVyc2lvbiBmb3IgdGhlIHNwYWNlLCBmZXRjaCBpdCwgb3RoZXJ3aXNlXG4gIGNvbXB1dGUgaXQgKi9cbkNvbnZlcnRlci5wcm90b3R5cGUuZ2V0VmFsdWVzID0gZnVuY3Rpb24oc3BhY2UpIHtcbiAgIHZhciB2YWxzID0gdGhpcy5jb252c1tzcGFjZV07XG4gICBpZiAoIXZhbHMpIHtcbiAgICAgIHZhciBmc3BhY2UgPSB0aGlzLnNwYWNlLFxuICAgICAgICAgIGZyb20gPSB0aGlzLmNvbnZzW2ZzcGFjZV07XG4gICAgICB2YWxzID0gY29udmVydFtmc3BhY2VdW3NwYWNlXShmcm9tKTtcblxuICAgICAgdGhpcy5jb252c1tzcGFjZV0gPSB2YWxzO1xuICAgfVxuICByZXR1cm4gdmFscztcbn07XG5cbltcInJnYlwiLCBcImhzbFwiLCBcImhzdlwiLCBcImNteWtcIiwgXCJrZXl3b3JkXCJdLmZvckVhY2goZnVuY3Rpb24oc3BhY2UpIHtcbiAgIENvbnZlcnRlci5wcm90b3R5cGVbc3BhY2VdID0gZnVuY3Rpb24odmFscykge1xuICAgICAgcmV0dXJuIHRoaXMucm91dGVTcGFjZShzcGFjZSwgYXJndW1lbnRzKTtcbiAgIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbnZlcnQ7IiwiJ3VzZSBzdHJpY3QnXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuXHRcImFsaWNlYmx1ZVwiOiBbMjQwLCAyNDgsIDI1NV0sXHJcblx0XCJhbnRpcXVld2hpdGVcIjogWzI1MCwgMjM1LCAyMTVdLFxyXG5cdFwiYXF1YVwiOiBbMCwgMjU1LCAyNTVdLFxyXG5cdFwiYXF1YW1hcmluZVwiOiBbMTI3LCAyNTUsIDIxMl0sXHJcblx0XCJhenVyZVwiOiBbMjQwLCAyNTUsIDI1NV0sXHJcblx0XCJiZWlnZVwiOiBbMjQ1LCAyNDUsIDIyMF0sXHJcblx0XCJiaXNxdWVcIjogWzI1NSwgMjI4LCAxOTZdLFxyXG5cdFwiYmxhY2tcIjogWzAsIDAsIDBdLFxyXG5cdFwiYmxhbmNoZWRhbG1vbmRcIjogWzI1NSwgMjM1LCAyMDVdLFxyXG5cdFwiYmx1ZVwiOiBbMCwgMCwgMjU1XSxcclxuXHRcImJsdWV2aW9sZXRcIjogWzEzOCwgNDMsIDIyNl0sXHJcblx0XCJicm93blwiOiBbMTY1LCA0MiwgNDJdLFxyXG5cdFwiYnVybHl3b29kXCI6IFsyMjIsIDE4NCwgMTM1XSxcclxuXHRcImNhZGV0Ymx1ZVwiOiBbOTUsIDE1OCwgMTYwXSxcclxuXHRcImNoYXJ0cmV1c2VcIjogWzEyNywgMjU1LCAwXSxcclxuXHRcImNob2NvbGF0ZVwiOiBbMjEwLCAxMDUsIDMwXSxcclxuXHRcImNvcmFsXCI6IFsyNTUsIDEyNywgODBdLFxyXG5cdFwiY29ybmZsb3dlcmJsdWVcIjogWzEwMCwgMTQ5LCAyMzddLFxyXG5cdFwiY29ybnNpbGtcIjogWzI1NSwgMjQ4LCAyMjBdLFxyXG5cdFwiY3JpbXNvblwiOiBbMjIwLCAyMCwgNjBdLFxyXG5cdFwiY3lhblwiOiBbMCwgMjU1LCAyNTVdLFxyXG5cdFwiZGFya2JsdWVcIjogWzAsIDAsIDEzOV0sXHJcblx0XCJkYXJrY3lhblwiOiBbMCwgMTM5LCAxMzldLFxyXG5cdFwiZGFya2dvbGRlbnJvZFwiOiBbMTg0LCAxMzQsIDExXSxcclxuXHRcImRhcmtncmF5XCI6IFsxNjksIDE2OSwgMTY5XSxcclxuXHRcImRhcmtncmVlblwiOiBbMCwgMTAwLCAwXSxcclxuXHRcImRhcmtncmV5XCI6IFsxNjksIDE2OSwgMTY5XSxcclxuXHRcImRhcmtraGFraVwiOiBbMTg5LCAxODMsIDEwN10sXHJcblx0XCJkYXJrbWFnZW50YVwiOiBbMTM5LCAwLCAxMzldLFxyXG5cdFwiZGFya29saXZlZ3JlZW5cIjogWzg1LCAxMDcsIDQ3XSxcclxuXHRcImRhcmtvcmFuZ2VcIjogWzI1NSwgMTQwLCAwXSxcclxuXHRcImRhcmtvcmNoaWRcIjogWzE1MywgNTAsIDIwNF0sXHJcblx0XCJkYXJrcmVkXCI6IFsxMzksIDAsIDBdLFxyXG5cdFwiZGFya3NhbG1vblwiOiBbMjMzLCAxNTAsIDEyMl0sXHJcblx0XCJkYXJrc2VhZ3JlZW5cIjogWzE0MywgMTg4LCAxNDNdLFxyXG5cdFwiZGFya3NsYXRlYmx1ZVwiOiBbNzIsIDYxLCAxMzldLFxyXG5cdFwiZGFya3NsYXRlZ3JheVwiOiBbNDcsIDc5LCA3OV0sXHJcblx0XCJkYXJrc2xhdGVncmV5XCI6IFs0NywgNzksIDc5XSxcclxuXHRcImRhcmt0dXJxdW9pc2VcIjogWzAsIDIwNiwgMjA5XSxcclxuXHRcImRhcmt2aW9sZXRcIjogWzE0OCwgMCwgMjExXSxcclxuXHRcImRlZXBwaW5rXCI6IFsyNTUsIDIwLCAxNDddLFxyXG5cdFwiZGVlcHNreWJsdWVcIjogWzAsIDE5MSwgMjU1XSxcclxuXHRcImRpbWdyYXlcIjogWzEwNSwgMTA1LCAxMDVdLFxyXG5cdFwiZGltZ3JleVwiOiBbMTA1LCAxMDUsIDEwNV0sXHJcblx0XCJkb2RnZXJibHVlXCI6IFszMCwgMTQ0LCAyNTVdLFxyXG5cdFwiZmlyZWJyaWNrXCI6IFsxNzgsIDM0LCAzNF0sXHJcblx0XCJmbG9yYWx3aGl0ZVwiOiBbMjU1LCAyNTAsIDI0MF0sXHJcblx0XCJmb3Jlc3RncmVlblwiOiBbMzQsIDEzOSwgMzRdLFxyXG5cdFwiZnVjaHNpYVwiOiBbMjU1LCAwLCAyNTVdLFxyXG5cdFwiZ2FpbnNib3JvXCI6IFsyMjAsIDIyMCwgMjIwXSxcclxuXHRcImdob3N0d2hpdGVcIjogWzI0OCwgMjQ4LCAyNTVdLFxyXG5cdFwiZ29sZFwiOiBbMjU1LCAyMTUsIDBdLFxyXG5cdFwiZ29sZGVucm9kXCI6IFsyMTgsIDE2NSwgMzJdLFxyXG5cdFwiZ3JheVwiOiBbMTI4LCAxMjgsIDEyOF0sXHJcblx0XCJncmVlblwiOiBbMCwgMTI4LCAwXSxcclxuXHRcImdyZWVueWVsbG93XCI6IFsxNzMsIDI1NSwgNDddLFxyXG5cdFwiZ3JleVwiOiBbMTI4LCAxMjgsIDEyOF0sXHJcblx0XCJob25leWRld1wiOiBbMjQwLCAyNTUsIDI0MF0sXHJcblx0XCJob3RwaW5rXCI6IFsyNTUsIDEwNSwgMTgwXSxcclxuXHRcImluZGlhbnJlZFwiOiBbMjA1LCA5MiwgOTJdLFxyXG5cdFwiaW5kaWdvXCI6IFs3NSwgMCwgMTMwXSxcclxuXHRcIml2b3J5XCI6IFsyNTUsIDI1NSwgMjQwXSxcclxuXHRcImtoYWtpXCI6IFsyNDAsIDIzMCwgMTQwXSxcclxuXHRcImxhdmVuZGVyXCI6IFsyMzAsIDIzMCwgMjUwXSxcclxuXHRcImxhdmVuZGVyYmx1c2hcIjogWzI1NSwgMjQwLCAyNDVdLFxyXG5cdFwibGF3bmdyZWVuXCI6IFsxMjQsIDI1MiwgMF0sXHJcblx0XCJsZW1vbmNoaWZmb25cIjogWzI1NSwgMjUwLCAyMDVdLFxyXG5cdFwibGlnaHRibHVlXCI6IFsxNzMsIDIxNiwgMjMwXSxcclxuXHRcImxpZ2h0Y29yYWxcIjogWzI0MCwgMTI4LCAxMjhdLFxyXG5cdFwibGlnaHRjeWFuXCI6IFsyMjQsIDI1NSwgMjU1XSxcclxuXHRcImxpZ2h0Z29sZGVucm9keWVsbG93XCI6IFsyNTAsIDI1MCwgMjEwXSxcclxuXHRcImxpZ2h0Z3JheVwiOiBbMjExLCAyMTEsIDIxMV0sXHJcblx0XCJsaWdodGdyZWVuXCI6IFsxNDQsIDIzOCwgMTQ0XSxcclxuXHRcImxpZ2h0Z3JleVwiOiBbMjExLCAyMTEsIDIxMV0sXHJcblx0XCJsaWdodHBpbmtcIjogWzI1NSwgMTgyLCAxOTNdLFxyXG5cdFwibGlnaHRzYWxtb25cIjogWzI1NSwgMTYwLCAxMjJdLFxyXG5cdFwibGlnaHRzZWFncmVlblwiOiBbMzIsIDE3OCwgMTcwXSxcclxuXHRcImxpZ2h0c2t5Ymx1ZVwiOiBbMTM1LCAyMDYsIDI1MF0sXHJcblx0XCJsaWdodHNsYXRlZ3JheVwiOiBbMTE5LCAxMzYsIDE1M10sXHJcblx0XCJsaWdodHNsYXRlZ3JleVwiOiBbMTE5LCAxMzYsIDE1M10sXHJcblx0XCJsaWdodHN0ZWVsYmx1ZVwiOiBbMTc2LCAxOTYsIDIyMl0sXHJcblx0XCJsaWdodHllbGxvd1wiOiBbMjU1LCAyNTUsIDIyNF0sXHJcblx0XCJsaW1lXCI6IFswLCAyNTUsIDBdLFxyXG5cdFwibGltZWdyZWVuXCI6IFs1MCwgMjA1LCA1MF0sXHJcblx0XCJsaW5lblwiOiBbMjUwLCAyNDAsIDIzMF0sXHJcblx0XCJtYWdlbnRhXCI6IFsyNTUsIDAsIDI1NV0sXHJcblx0XCJtYXJvb25cIjogWzEyOCwgMCwgMF0sXHJcblx0XCJtZWRpdW1hcXVhbWFyaW5lXCI6IFsxMDIsIDIwNSwgMTcwXSxcclxuXHRcIm1lZGl1bWJsdWVcIjogWzAsIDAsIDIwNV0sXHJcblx0XCJtZWRpdW1vcmNoaWRcIjogWzE4NiwgODUsIDIxMV0sXHJcblx0XCJtZWRpdW1wdXJwbGVcIjogWzE0NywgMTEyLCAyMTldLFxyXG5cdFwibWVkaXVtc2VhZ3JlZW5cIjogWzYwLCAxNzksIDExM10sXHJcblx0XCJtZWRpdW1zbGF0ZWJsdWVcIjogWzEyMywgMTA0LCAyMzhdLFxyXG5cdFwibWVkaXVtc3ByaW5nZ3JlZW5cIjogWzAsIDI1MCwgMTU0XSxcclxuXHRcIm1lZGl1bXR1cnF1b2lzZVwiOiBbNzIsIDIwOSwgMjA0XSxcclxuXHRcIm1lZGl1bXZpb2xldHJlZFwiOiBbMTk5LCAyMSwgMTMzXSxcclxuXHRcIm1pZG5pZ2h0Ymx1ZVwiOiBbMjUsIDI1LCAxMTJdLFxyXG5cdFwibWludGNyZWFtXCI6IFsyNDUsIDI1NSwgMjUwXSxcclxuXHRcIm1pc3R5cm9zZVwiOiBbMjU1LCAyMjgsIDIyNV0sXHJcblx0XCJtb2NjYXNpblwiOiBbMjU1LCAyMjgsIDE4MV0sXHJcblx0XCJuYXZham93aGl0ZVwiOiBbMjU1LCAyMjIsIDE3M10sXHJcblx0XCJuYXZ5XCI6IFswLCAwLCAxMjhdLFxyXG5cdFwib2xkbGFjZVwiOiBbMjUzLCAyNDUsIDIzMF0sXHJcblx0XCJvbGl2ZVwiOiBbMTI4LCAxMjgsIDBdLFxyXG5cdFwib2xpdmVkcmFiXCI6IFsxMDcsIDE0MiwgMzVdLFxyXG5cdFwib3JhbmdlXCI6IFsyNTUsIDE2NSwgMF0sXHJcblx0XCJvcmFuZ2VyZWRcIjogWzI1NSwgNjksIDBdLFxyXG5cdFwib3JjaGlkXCI6IFsyMTgsIDExMiwgMjE0XSxcclxuXHRcInBhbGVnb2xkZW5yb2RcIjogWzIzOCwgMjMyLCAxNzBdLFxyXG5cdFwicGFsZWdyZWVuXCI6IFsxNTIsIDI1MSwgMTUyXSxcclxuXHRcInBhbGV0dXJxdW9pc2VcIjogWzE3NSwgMjM4LCAyMzhdLFxyXG5cdFwicGFsZXZpb2xldHJlZFwiOiBbMjE5LCAxMTIsIDE0N10sXHJcblx0XCJwYXBheWF3aGlwXCI6IFsyNTUsIDIzOSwgMjEzXSxcclxuXHRcInBlYWNocHVmZlwiOiBbMjU1LCAyMTgsIDE4NV0sXHJcblx0XCJwZXJ1XCI6IFsyMDUsIDEzMywgNjNdLFxyXG5cdFwicGlua1wiOiBbMjU1LCAxOTIsIDIwM10sXHJcblx0XCJwbHVtXCI6IFsyMjEsIDE2MCwgMjIxXSxcclxuXHRcInBvd2RlcmJsdWVcIjogWzE3NiwgMjI0LCAyMzBdLFxyXG5cdFwicHVycGxlXCI6IFsxMjgsIDAsIDEyOF0sXHJcblx0XCJyZWJlY2NhcHVycGxlXCI6IFsxMDIsIDUxLCAxNTNdLFxyXG5cdFwicmVkXCI6IFsyNTUsIDAsIDBdLFxyXG5cdFwicm9zeWJyb3duXCI6IFsxODgsIDE0MywgMTQzXSxcclxuXHRcInJveWFsYmx1ZVwiOiBbNjUsIDEwNSwgMjI1XSxcclxuXHRcInNhZGRsZWJyb3duXCI6IFsxMzksIDY5LCAxOV0sXHJcblx0XCJzYWxtb25cIjogWzI1MCwgMTI4LCAxMTRdLFxyXG5cdFwic2FuZHlicm93blwiOiBbMjQ0LCAxNjQsIDk2XSxcclxuXHRcInNlYWdyZWVuXCI6IFs0NiwgMTM5LCA4N10sXHJcblx0XCJzZWFzaGVsbFwiOiBbMjU1LCAyNDUsIDIzOF0sXHJcblx0XCJzaWVubmFcIjogWzE2MCwgODIsIDQ1XSxcclxuXHRcInNpbHZlclwiOiBbMTkyLCAxOTIsIDE5Ml0sXHJcblx0XCJza3libHVlXCI6IFsxMzUsIDIwNiwgMjM1XSxcclxuXHRcInNsYXRlYmx1ZVwiOiBbMTA2LCA5MCwgMjA1XSxcclxuXHRcInNsYXRlZ3JheVwiOiBbMTEyLCAxMjgsIDE0NF0sXHJcblx0XCJzbGF0ZWdyZXlcIjogWzExMiwgMTI4LCAxNDRdLFxyXG5cdFwic25vd1wiOiBbMjU1LCAyNTAsIDI1MF0sXHJcblx0XCJzcHJpbmdncmVlblwiOiBbMCwgMjU1LCAxMjddLFxyXG5cdFwic3RlZWxibHVlXCI6IFs3MCwgMTMwLCAxODBdLFxyXG5cdFwidGFuXCI6IFsyMTAsIDE4MCwgMTQwXSxcclxuXHRcInRlYWxcIjogWzAsIDEyOCwgMTI4XSxcclxuXHRcInRoaXN0bGVcIjogWzIxNiwgMTkxLCAyMTZdLFxyXG5cdFwidG9tYXRvXCI6IFsyNTUsIDk5LCA3MV0sXHJcblx0XCJ0dXJxdW9pc2VcIjogWzY0LCAyMjQsIDIwOF0sXHJcblx0XCJ2aW9sZXRcIjogWzIzOCwgMTMwLCAyMzhdLFxyXG5cdFwid2hlYXRcIjogWzI0NSwgMjIyLCAxNzldLFxyXG5cdFwid2hpdGVcIjogWzI1NSwgMjU1LCAyNTVdLFxyXG5cdFwid2hpdGVzbW9rZVwiOiBbMjQ1LCAyNDUsIDI0NV0sXHJcblx0XCJ5ZWxsb3dcIjogWzI1NSwgMjU1LCAwXSxcclxuXHRcInllbGxvd2dyZWVuXCI6IFsxNTQsIDIwNSwgNTBdXHJcbn07XHJcbiIsIi8qIE1JVCBsaWNlbnNlICovXG52YXIgY29sb3JOYW1lcyA9IHJlcXVpcmUoJ2NvbG9yLW5hbWUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gICBnZXRSZ2JhOiBnZXRSZ2JhLFxuICAgZ2V0SHNsYTogZ2V0SHNsYSxcbiAgIGdldFJnYjogZ2V0UmdiLFxuICAgZ2V0SHNsOiBnZXRIc2wsXG4gICBnZXRId2I6IGdldEh3YixcbiAgIGdldEFscGhhOiBnZXRBbHBoYSxcblxuICAgaGV4U3RyaW5nOiBoZXhTdHJpbmcsXG4gICByZ2JTdHJpbmc6IHJnYlN0cmluZyxcbiAgIHJnYmFTdHJpbmc6IHJnYmFTdHJpbmcsXG4gICBwZXJjZW50U3RyaW5nOiBwZXJjZW50U3RyaW5nLFxuICAgcGVyY2VudGFTdHJpbmc6IHBlcmNlbnRhU3RyaW5nLFxuICAgaHNsU3RyaW5nOiBoc2xTdHJpbmcsXG4gICBoc2xhU3RyaW5nOiBoc2xhU3RyaW5nLFxuICAgaHdiU3RyaW5nOiBod2JTdHJpbmcsXG4gICBrZXl3b3JkOiBrZXl3b3JkXG59XG5cbmZ1bmN0aW9uIGdldFJnYmEoc3RyaW5nKSB7XG4gICBpZiAoIXN0cmluZykge1xuICAgICAgcmV0dXJuO1xuICAgfVxuICAgdmFyIGFiYnIgPSAgL14jKFthLWZBLUYwLTldezMsNH0pJC9pLFxuICAgICAgIGhleCA9ICAvXiMoW2EtZkEtRjAtOV17Nn0oW2EtZkEtRjAtOV17Mn0pPykkL2ksXG4gICAgICAgcmdiYSA9IC9ecmdiYT9cXChcXHMqKFsrLV0/XFxkKylcXHMqLFxccyooWystXT9cXGQrKVxccyosXFxzKihbKy1dP1xcZCspXFxzKig/OixcXHMqKFsrLV0/W1xcZFxcLl0rKVxccyopP1xcKSQvaSxcbiAgICAgICBwZXIgPSAvXnJnYmE/XFwoXFxzKihbKy1dP1tcXGRcXC5dKylcXCVcXHMqLFxccyooWystXT9bXFxkXFwuXSspXFwlXFxzKixcXHMqKFsrLV0/W1xcZFxcLl0rKVxcJVxccyooPzosXFxzKihbKy1dP1tcXGRcXC5dKylcXHMqKT9cXCkkL2ksXG4gICAgICAga2V5d29yZCA9IC8oXFx3KykvO1xuXG4gICB2YXIgcmdiID0gWzAsIDAsIDBdLFxuICAgICAgIGEgPSAxLFxuICAgICAgIG1hdGNoID0gc3RyaW5nLm1hdGNoKGFiYnIpLFxuICAgICAgIGhleEFscGhhID0gXCJcIjtcbiAgIGlmIChtYXRjaCkge1xuICAgICAgbWF0Y2ggPSBtYXRjaFsxXTtcbiAgICAgIGhleEFscGhhID0gbWF0Y2hbM107XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHJnYi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgcmdiW2ldID0gcGFyc2VJbnQobWF0Y2hbaV0gKyBtYXRjaFtpXSwgMTYpO1xuICAgICAgfVxuICAgICAgaWYgKGhleEFscGhhKSB7XG4gICAgICAgICBhID0gTWF0aC5yb3VuZCgocGFyc2VJbnQoaGV4QWxwaGEgKyBoZXhBbHBoYSwgMTYpIC8gMjU1KSAqIDEwMCkgLyAxMDA7XG4gICAgICB9XG4gICB9XG4gICBlbHNlIGlmIChtYXRjaCA9IHN0cmluZy5tYXRjaChoZXgpKSB7XG4gICAgICBoZXhBbHBoYSA9IG1hdGNoWzJdO1xuICAgICAgbWF0Y2ggPSBtYXRjaFsxXTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmdiLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICByZ2JbaV0gPSBwYXJzZUludChtYXRjaC5zbGljZShpICogMiwgaSAqIDIgKyAyKSwgMTYpO1xuICAgICAgfVxuICAgICAgaWYgKGhleEFscGhhKSB7XG4gICAgICAgICBhID0gTWF0aC5yb3VuZCgocGFyc2VJbnQoaGV4QWxwaGEsIDE2KSAvIDI1NSkgKiAxMDApIC8gMTAwO1xuICAgICAgfVxuICAgfVxuICAgZWxzZSBpZiAobWF0Y2ggPSBzdHJpbmcubWF0Y2gocmdiYSkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcmdiLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICByZ2JbaV0gPSBwYXJzZUludChtYXRjaFtpICsgMV0pO1xuICAgICAgfVxuICAgICAgYSA9IHBhcnNlRmxvYXQobWF0Y2hbNF0pO1xuICAgfVxuICAgZWxzZSBpZiAobWF0Y2ggPSBzdHJpbmcubWF0Y2gocGVyKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZ2IubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgIHJnYltpXSA9IE1hdGgucm91bmQocGFyc2VGbG9hdChtYXRjaFtpICsgMV0pICogMi41NSk7XG4gICAgICB9XG4gICAgICBhID0gcGFyc2VGbG9hdChtYXRjaFs0XSk7XG4gICB9XG4gICBlbHNlIGlmIChtYXRjaCA9IHN0cmluZy5tYXRjaChrZXl3b3JkKSkge1xuICAgICAgaWYgKG1hdGNoWzFdID09IFwidHJhbnNwYXJlbnRcIikge1xuICAgICAgICAgcmV0dXJuIFswLCAwLCAwLCAwXTtcbiAgICAgIH1cbiAgICAgIHJnYiA9IGNvbG9yTmFtZXNbbWF0Y2hbMV1dO1xuICAgICAgaWYgKCFyZ2IpIHtcbiAgICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgIH1cblxuICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZ2IubGVuZ3RoOyBpKyspIHtcbiAgICAgIHJnYltpXSA9IHNjYWxlKHJnYltpXSwgMCwgMjU1KTtcbiAgIH1cbiAgIGlmICghYSAmJiBhICE9IDApIHtcbiAgICAgIGEgPSAxO1xuICAgfVxuICAgZWxzZSB7XG4gICAgICBhID0gc2NhbGUoYSwgMCwgMSk7XG4gICB9XG4gICByZ2JbM10gPSBhO1xuICAgcmV0dXJuIHJnYjtcbn1cblxuZnVuY3Rpb24gZ2V0SHNsYShzdHJpbmcpIHtcbiAgIGlmICghc3RyaW5nKSB7XG4gICAgICByZXR1cm47XG4gICB9XG4gICB2YXIgaHNsID0gL15oc2xhP1xcKFxccyooWystXT9cXGQrKSg/OmRlZyk/XFxzKixcXHMqKFsrLV0/W1xcZFxcLl0rKSVcXHMqLFxccyooWystXT9bXFxkXFwuXSspJVxccyooPzosXFxzKihbKy1dP1tcXGRcXC5dKylcXHMqKT9cXCkvO1xuICAgdmFyIG1hdGNoID0gc3RyaW5nLm1hdGNoKGhzbCk7XG4gICBpZiAobWF0Y2gpIHtcbiAgICAgIHZhciBhbHBoYSA9IHBhcnNlRmxvYXQobWF0Y2hbNF0pO1xuICAgICAgdmFyIGggPSBzY2FsZShwYXJzZUludChtYXRjaFsxXSksIDAsIDM2MCksXG4gICAgICAgICAgcyA9IHNjYWxlKHBhcnNlRmxvYXQobWF0Y2hbMl0pLCAwLCAxMDApLFxuICAgICAgICAgIGwgPSBzY2FsZShwYXJzZUZsb2F0KG1hdGNoWzNdKSwgMCwgMTAwKSxcbiAgICAgICAgICBhID0gc2NhbGUoaXNOYU4oYWxwaGEpID8gMSA6IGFscGhhLCAwLCAxKTtcbiAgICAgIHJldHVybiBbaCwgcywgbCwgYV07XG4gICB9XG59XG5cbmZ1bmN0aW9uIGdldEh3YihzdHJpbmcpIHtcbiAgIGlmICghc3RyaW5nKSB7XG4gICAgICByZXR1cm47XG4gICB9XG4gICB2YXIgaHdiID0gL15od2JcXChcXHMqKFsrLV0/XFxkKykoPzpkZWcpP1xccyosXFxzKihbKy1dP1tcXGRcXC5dKyklXFxzKixcXHMqKFsrLV0/W1xcZFxcLl0rKSVcXHMqKD86LFxccyooWystXT9bXFxkXFwuXSspXFxzKik/XFwpLztcbiAgIHZhciBtYXRjaCA9IHN0cmluZy5tYXRjaChod2IpO1xuICAgaWYgKG1hdGNoKSB7XG4gICAgdmFyIGFscGhhID0gcGFyc2VGbG9hdChtYXRjaFs0XSk7XG4gICAgICB2YXIgaCA9IHNjYWxlKHBhcnNlSW50KG1hdGNoWzFdKSwgMCwgMzYwKSxcbiAgICAgICAgICB3ID0gc2NhbGUocGFyc2VGbG9hdChtYXRjaFsyXSksIDAsIDEwMCksXG4gICAgICAgICAgYiA9IHNjYWxlKHBhcnNlRmxvYXQobWF0Y2hbM10pLCAwLCAxMDApLFxuICAgICAgICAgIGEgPSBzY2FsZShpc05hTihhbHBoYSkgPyAxIDogYWxwaGEsIDAsIDEpO1xuICAgICAgcmV0dXJuIFtoLCB3LCBiLCBhXTtcbiAgIH1cbn1cblxuZnVuY3Rpb24gZ2V0UmdiKHN0cmluZykge1xuICAgdmFyIHJnYmEgPSBnZXRSZ2JhKHN0cmluZyk7XG4gICByZXR1cm4gcmdiYSAmJiByZ2JhLnNsaWNlKDAsIDMpO1xufVxuXG5mdW5jdGlvbiBnZXRIc2woc3RyaW5nKSB7XG4gIHZhciBoc2xhID0gZ2V0SHNsYShzdHJpbmcpO1xuICByZXR1cm4gaHNsYSAmJiBoc2xhLnNsaWNlKDAsIDMpO1xufVxuXG5mdW5jdGlvbiBnZXRBbHBoYShzdHJpbmcpIHtcbiAgIHZhciB2YWxzID0gZ2V0UmdiYShzdHJpbmcpO1xuICAgaWYgKHZhbHMpIHtcbiAgICAgIHJldHVybiB2YWxzWzNdO1xuICAgfVxuICAgZWxzZSBpZiAodmFscyA9IGdldEhzbGEoc3RyaW5nKSkge1xuICAgICAgcmV0dXJuIHZhbHNbM107XG4gICB9XG4gICBlbHNlIGlmICh2YWxzID0gZ2V0SHdiKHN0cmluZykpIHtcbiAgICAgIHJldHVybiB2YWxzWzNdO1xuICAgfVxufVxuXG4vLyBnZW5lcmF0b3JzXG5mdW5jdGlvbiBoZXhTdHJpbmcocmdiYSwgYSkge1xuICAgdmFyIGEgPSAoYSAhPT0gdW5kZWZpbmVkICYmIHJnYmEubGVuZ3RoID09PSAzKSA/IGEgOiByZ2JhWzNdO1xuICAgcmV0dXJuIFwiI1wiICsgaGV4RG91YmxlKHJnYmFbMF0pIFxuICAgICAgICAgICAgICArIGhleERvdWJsZShyZ2JhWzFdKVxuICAgICAgICAgICAgICArIGhleERvdWJsZShyZ2JhWzJdKVxuICAgICAgICAgICAgICArIChcbiAgICAgICAgICAgICAgICAgKGEgPj0gMCAmJiBhIDwgMSlcbiAgICAgICAgICAgICAgICAgPyBoZXhEb3VibGUoTWF0aC5yb3VuZChhICogMjU1KSlcbiAgICAgICAgICAgICAgICAgOiBcIlwiXG4gICAgICAgICAgICAgICk7XG59XG5cbmZ1bmN0aW9uIHJnYlN0cmluZyhyZ2JhLCBhbHBoYSkge1xuICAgaWYgKGFscGhhIDwgMSB8fCAocmdiYVszXSAmJiByZ2JhWzNdIDwgMSkpIHtcbiAgICAgIHJldHVybiByZ2JhU3RyaW5nKHJnYmEsIGFscGhhKTtcbiAgIH1cbiAgIHJldHVybiBcInJnYihcIiArIHJnYmFbMF0gKyBcIiwgXCIgKyByZ2JhWzFdICsgXCIsIFwiICsgcmdiYVsyXSArIFwiKVwiO1xufVxuXG5mdW5jdGlvbiByZ2JhU3RyaW5nKHJnYmEsIGFscGhhKSB7XG4gICBpZiAoYWxwaGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgYWxwaGEgPSAocmdiYVszXSAhPT0gdW5kZWZpbmVkID8gcmdiYVszXSA6IDEpO1xuICAgfVxuICAgcmV0dXJuIFwicmdiYShcIiArIHJnYmFbMF0gKyBcIiwgXCIgKyByZ2JhWzFdICsgXCIsIFwiICsgcmdiYVsyXVxuICAgICAgICAgICArIFwiLCBcIiArIGFscGhhICsgXCIpXCI7XG59XG5cbmZ1bmN0aW9uIHBlcmNlbnRTdHJpbmcocmdiYSwgYWxwaGEpIHtcbiAgIGlmIChhbHBoYSA8IDEgfHwgKHJnYmFbM10gJiYgcmdiYVszXSA8IDEpKSB7XG4gICAgICByZXR1cm4gcGVyY2VudGFTdHJpbmcocmdiYSwgYWxwaGEpO1xuICAgfVxuICAgdmFyIHIgPSBNYXRoLnJvdW5kKHJnYmFbMF0vMjU1ICogMTAwKSxcbiAgICAgICBnID0gTWF0aC5yb3VuZChyZ2JhWzFdLzI1NSAqIDEwMCksXG4gICAgICAgYiA9IE1hdGgucm91bmQocmdiYVsyXS8yNTUgKiAxMDApO1xuXG4gICByZXR1cm4gXCJyZ2IoXCIgKyByICsgXCIlLCBcIiArIGcgKyBcIiUsIFwiICsgYiArIFwiJSlcIjtcbn1cblxuZnVuY3Rpb24gcGVyY2VudGFTdHJpbmcocmdiYSwgYWxwaGEpIHtcbiAgIHZhciByID0gTWF0aC5yb3VuZChyZ2JhWzBdLzI1NSAqIDEwMCksXG4gICAgICAgZyA9IE1hdGgucm91bmQocmdiYVsxXS8yNTUgKiAxMDApLFxuICAgICAgIGIgPSBNYXRoLnJvdW5kKHJnYmFbMl0vMjU1ICogMTAwKTtcbiAgIHJldHVybiBcInJnYmEoXCIgKyByICsgXCIlLCBcIiArIGcgKyBcIiUsIFwiICsgYiArIFwiJSwgXCIgKyAoYWxwaGEgfHwgcmdiYVszXSB8fCAxKSArIFwiKVwiO1xufVxuXG5mdW5jdGlvbiBoc2xTdHJpbmcoaHNsYSwgYWxwaGEpIHtcbiAgIGlmIChhbHBoYSA8IDEgfHwgKGhzbGFbM10gJiYgaHNsYVszXSA8IDEpKSB7XG4gICAgICByZXR1cm4gaHNsYVN0cmluZyhoc2xhLCBhbHBoYSk7XG4gICB9XG4gICByZXR1cm4gXCJoc2woXCIgKyBoc2xhWzBdICsgXCIsIFwiICsgaHNsYVsxXSArIFwiJSwgXCIgKyBoc2xhWzJdICsgXCIlKVwiO1xufVxuXG5mdW5jdGlvbiBoc2xhU3RyaW5nKGhzbGEsIGFscGhhKSB7XG4gICBpZiAoYWxwaGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgYWxwaGEgPSAoaHNsYVszXSAhPT0gdW5kZWZpbmVkID8gaHNsYVszXSA6IDEpO1xuICAgfVxuICAgcmV0dXJuIFwiaHNsYShcIiArIGhzbGFbMF0gKyBcIiwgXCIgKyBoc2xhWzFdICsgXCIlLCBcIiArIGhzbGFbMl0gKyBcIiUsIFwiXG4gICAgICAgICAgICsgYWxwaGEgKyBcIilcIjtcbn1cblxuLy8gaHdiIGlzIGEgYml0IGRpZmZlcmVudCB0aGFuIHJnYihhKSAmIGhzbChhKSBzaW5jZSB0aGVyZSBpcyBubyBhbHBoYSBzcGVjaWZpYyBzeW50YXhcbi8vIChod2IgaGF2ZSBhbHBoYSBvcHRpb25hbCAmIDEgaXMgZGVmYXVsdCB2YWx1ZSlcbmZ1bmN0aW9uIGh3YlN0cmluZyhod2IsIGFscGhhKSB7XG4gICBpZiAoYWxwaGEgPT09IHVuZGVmaW5lZCkge1xuICAgICAgYWxwaGEgPSAoaHdiWzNdICE9PSB1bmRlZmluZWQgPyBod2JbM10gOiAxKTtcbiAgIH1cbiAgIHJldHVybiBcImh3YihcIiArIGh3YlswXSArIFwiLCBcIiArIGh3YlsxXSArIFwiJSwgXCIgKyBod2JbMl0gKyBcIiVcIlxuICAgICAgICAgICArIChhbHBoYSAhPT0gdW5kZWZpbmVkICYmIGFscGhhICE9PSAxID8gXCIsIFwiICsgYWxwaGEgOiBcIlwiKSArIFwiKVwiO1xufVxuXG5mdW5jdGlvbiBrZXl3b3JkKHJnYikge1xuICByZXR1cm4gcmV2ZXJzZU5hbWVzW3JnYi5zbGljZSgwLCAzKV07XG59XG5cbi8vIGhlbHBlcnNcbmZ1bmN0aW9uIHNjYWxlKG51bSwgbWluLCBtYXgpIHtcbiAgIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChtaW4sIG51bSksIG1heCk7XG59XG5cbmZ1bmN0aW9uIGhleERvdWJsZShudW0pIHtcbiAgdmFyIHN0ciA9IG51bS50b1N0cmluZygxNikudG9VcHBlckNhc2UoKTtcbiAgcmV0dXJuIChzdHIubGVuZ3RoIDwgMikgPyBcIjBcIiArIHN0ciA6IHN0cjtcbn1cblxuXG4vL2NyZWF0ZSBhIGxpc3Qgb2YgcmV2ZXJzZSBjb2xvciBuYW1lc1xudmFyIHJldmVyc2VOYW1lcyA9IHt9O1xuZm9yICh2YXIgbmFtZSBpbiBjb2xvck5hbWVzKSB7XG4gICByZXZlcnNlTmFtZXNbY29sb3JOYW1lc1tuYW1lXV0gPSBuYW1lO1xufVxuIiwiLyogTUlUIGxpY2Vuc2UgKi9cbnZhciBjb252ZXJ0ID0gcmVxdWlyZSgnY29sb3ItY29udmVydCcpO1xudmFyIHN0cmluZyA9IHJlcXVpcmUoJ2NoYXJ0anMtY29sb3Itc3RyaW5nJyk7XG5cbnZhciBDb2xvciA9IGZ1bmN0aW9uIChvYmopIHtcblx0aWYgKG9iaiBpbnN0YW5jZW9mIENvbG9yKSB7XG5cdFx0cmV0dXJuIG9iajtcblx0fVxuXHRpZiAoISh0aGlzIGluc3RhbmNlb2YgQ29sb3IpKSB7XG5cdFx0cmV0dXJuIG5ldyBDb2xvcihvYmopO1xuXHR9XG5cblx0dGhpcy52YWxpZCA9IGZhbHNlO1xuXHR0aGlzLnZhbHVlcyA9IHtcblx0XHRyZ2I6IFswLCAwLCAwXSxcblx0XHRoc2w6IFswLCAwLCAwXSxcblx0XHRoc3Y6IFswLCAwLCAwXSxcblx0XHRod2I6IFswLCAwLCAwXSxcblx0XHRjbXlrOiBbMCwgMCwgMCwgMF0sXG5cdFx0YWxwaGE6IDFcblx0fTtcblxuXHQvLyBwYXJzZSBDb2xvcigpIGFyZ3VtZW50XG5cdHZhciB2YWxzO1xuXHRpZiAodHlwZW9mIG9iaiA9PT0gJ3N0cmluZycpIHtcblx0XHR2YWxzID0gc3RyaW5nLmdldFJnYmEob2JqKTtcblx0XHRpZiAodmFscykge1xuXHRcdFx0dGhpcy5zZXRWYWx1ZXMoJ3JnYicsIHZhbHMpO1xuXHRcdH0gZWxzZSBpZiAodmFscyA9IHN0cmluZy5nZXRIc2xhKG9iaikpIHtcblx0XHRcdHRoaXMuc2V0VmFsdWVzKCdoc2wnLCB2YWxzKTtcblx0XHR9IGVsc2UgaWYgKHZhbHMgPSBzdHJpbmcuZ2V0SHdiKG9iaikpIHtcblx0XHRcdHRoaXMuc2V0VmFsdWVzKCdod2InLCB2YWxzKTtcblx0XHR9XG5cdH0gZWxzZSBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcblx0XHR2YWxzID0gb2JqO1xuXHRcdGlmICh2YWxzLnIgIT09IHVuZGVmaW5lZCB8fCB2YWxzLnJlZCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR0aGlzLnNldFZhbHVlcygncmdiJywgdmFscyk7XG5cdFx0fSBlbHNlIGlmICh2YWxzLmwgIT09IHVuZGVmaW5lZCB8fCB2YWxzLmxpZ2h0bmVzcyAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR0aGlzLnNldFZhbHVlcygnaHNsJywgdmFscyk7XG5cdFx0fSBlbHNlIGlmICh2YWxzLnYgIT09IHVuZGVmaW5lZCB8fCB2YWxzLnZhbHVlICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHRoaXMuc2V0VmFsdWVzKCdoc3YnLCB2YWxzKTtcblx0XHR9IGVsc2UgaWYgKHZhbHMudyAhPT0gdW5kZWZpbmVkIHx8IHZhbHMud2hpdGVuZXNzICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdHRoaXMuc2V0VmFsdWVzKCdod2InLCB2YWxzKTtcblx0XHR9IGVsc2UgaWYgKHZhbHMuYyAhPT0gdW5kZWZpbmVkIHx8IHZhbHMuY3lhbiAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHR0aGlzLnNldFZhbHVlcygnY215aycsIHZhbHMpO1xuXHRcdH1cblx0fVxufTtcblxuQ29sb3IucHJvdG90eXBlID0ge1xuXHRpc1ZhbGlkOiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMudmFsaWQ7XG5cdH0sXG5cdHJnYjogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLnNldFNwYWNlKCdyZ2InLCBhcmd1bWVudHMpO1xuXHR9LFxuXHRoc2w6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy5zZXRTcGFjZSgnaHNsJywgYXJndW1lbnRzKTtcblx0fSxcblx0aHN2OiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0U3BhY2UoJ2hzdicsIGFyZ3VtZW50cyk7XG5cdH0sXG5cdGh3YjogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLnNldFNwYWNlKCdod2InLCBhcmd1bWVudHMpO1xuXHR9LFxuXHRjbXlrOiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0U3BhY2UoJ2NteWsnLCBhcmd1bWVudHMpO1xuXHR9LFxuXG5cdHJnYkFycmF5OiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHRoaXMudmFsdWVzLnJnYjtcblx0fSxcblx0aHNsQXJyYXk6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy52YWx1ZXMuaHNsO1xuXHR9LFxuXHRoc3ZBcnJheTogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLnZhbHVlcy5oc3Y7XG5cdH0sXG5cdGh3YkFycmF5OiBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIHZhbHVlcyA9IHRoaXMudmFsdWVzO1xuXHRcdGlmICh2YWx1ZXMuYWxwaGEgIT09IDEpIHtcblx0XHRcdHJldHVybiB2YWx1ZXMuaHdiLmNvbmNhdChbdmFsdWVzLmFscGhhXSk7XG5cdFx0fVxuXHRcdHJldHVybiB2YWx1ZXMuaHdiO1xuXHR9LFxuXHRjbXlrQXJyYXk6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gdGhpcy52YWx1ZXMuY215aztcblx0fSxcblx0cmdiYUFycmF5OiBmdW5jdGlvbiAoKSB7XG5cdFx0dmFyIHZhbHVlcyA9IHRoaXMudmFsdWVzO1xuXHRcdHJldHVybiB2YWx1ZXMucmdiLmNvbmNhdChbdmFsdWVzLmFscGhhXSk7XG5cdH0sXG5cdGhzbGFBcnJheTogZnVuY3Rpb24gKCkge1xuXHRcdHZhciB2YWx1ZXMgPSB0aGlzLnZhbHVlcztcblx0XHRyZXR1cm4gdmFsdWVzLmhzbC5jb25jYXQoW3ZhbHVlcy5hbHBoYV0pO1xuXHR9LFxuXHRhbHBoYTogZnVuY3Rpb24gKHZhbCkge1xuXHRcdGlmICh2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0cmV0dXJuIHRoaXMudmFsdWVzLmFscGhhO1xuXHRcdH1cblx0XHR0aGlzLnNldFZhbHVlcygnYWxwaGEnLCB2YWwpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHJlZDogZnVuY3Rpb24gKHZhbCkge1xuXHRcdHJldHVybiB0aGlzLnNldENoYW5uZWwoJ3JnYicsIDAsIHZhbCk7XG5cdH0sXG5cdGdyZWVuOiBmdW5jdGlvbiAodmFsKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0Q2hhbm5lbCgncmdiJywgMSwgdmFsKTtcblx0fSxcblx0Ymx1ZTogZnVuY3Rpb24gKHZhbCkge1xuXHRcdHJldHVybiB0aGlzLnNldENoYW5uZWwoJ3JnYicsIDIsIHZhbCk7XG5cdH0sXG5cdGh1ZTogZnVuY3Rpb24gKHZhbCkge1xuXHRcdGlmICh2YWwpIHtcblx0XHRcdHZhbCAlPSAzNjA7XG5cdFx0XHR2YWwgPSB2YWwgPCAwID8gMzYwICsgdmFsIDogdmFsO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5zZXRDaGFubmVsKCdoc2wnLCAwLCB2YWwpO1xuXHR9LFxuXHRzYXR1cmF0aW9uOiBmdW5jdGlvbiAodmFsKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0Q2hhbm5lbCgnaHNsJywgMSwgdmFsKTtcblx0fSxcblx0bGlnaHRuZXNzOiBmdW5jdGlvbiAodmFsKSB7XG5cdFx0cmV0dXJuIHRoaXMuc2V0Q2hhbm5lbCgnaHNsJywgMiwgdmFsKTtcblx0fSxcblx0c2F0dXJhdGlvbnY6IGZ1bmN0aW9uICh2YWwpIHtcblx0XHRyZXR1cm4gdGhpcy5zZXRDaGFubmVsKCdoc3YnLCAxLCB2YWwpO1xuXHR9LFxuXHR3aGl0ZW5lc3M6IGZ1bmN0aW9uICh2YWwpIHtcblx0XHRyZXR1cm4gdGhpcy5zZXRDaGFubmVsKCdod2InLCAxLCB2YWwpO1xuXHR9LFxuXHRibGFja25lc3M6IGZ1bmN0aW9uICh2YWwpIHtcblx0XHRyZXR1cm4gdGhpcy5zZXRDaGFubmVsKCdod2InLCAyLCB2YWwpO1xuXHR9LFxuXHR2YWx1ZTogZnVuY3Rpb24gKHZhbCkge1xuXHRcdHJldHVybiB0aGlzLnNldENoYW5uZWwoJ2hzdicsIDIsIHZhbCk7XG5cdH0sXG5cdGN5YW46IGZ1bmN0aW9uICh2YWwpIHtcblx0XHRyZXR1cm4gdGhpcy5zZXRDaGFubmVsKCdjbXlrJywgMCwgdmFsKTtcblx0fSxcblx0bWFnZW50YTogZnVuY3Rpb24gKHZhbCkge1xuXHRcdHJldHVybiB0aGlzLnNldENoYW5uZWwoJ2NteWsnLCAxLCB2YWwpO1xuXHR9LFxuXHR5ZWxsb3c6IGZ1bmN0aW9uICh2YWwpIHtcblx0XHRyZXR1cm4gdGhpcy5zZXRDaGFubmVsKCdjbXlrJywgMiwgdmFsKTtcblx0fSxcblx0YmxhY2s6IGZ1bmN0aW9uICh2YWwpIHtcblx0XHRyZXR1cm4gdGhpcy5zZXRDaGFubmVsKCdjbXlrJywgMywgdmFsKTtcblx0fSxcblxuXHRoZXhTdHJpbmc6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gc3RyaW5nLmhleFN0cmluZyh0aGlzLnZhbHVlcy5yZ2IpO1xuXHR9LFxuXHRyZ2JTdHJpbmc6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gc3RyaW5nLnJnYlN0cmluZyh0aGlzLnZhbHVlcy5yZ2IsIHRoaXMudmFsdWVzLmFscGhhKTtcblx0fSxcblx0cmdiYVN0cmluZzogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiBzdHJpbmcucmdiYVN0cmluZyh0aGlzLnZhbHVlcy5yZ2IsIHRoaXMudmFsdWVzLmFscGhhKTtcblx0fSxcblx0cGVyY2VudFN0cmluZzogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiBzdHJpbmcucGVyY2VudFN0cmluZyh0aGlzLnZhbHVlcy5yZ2IsIHRoaXMudmFsdWVzLmFscGhhKTtcblx0fSxcblx0aHNsU3RyaW5nOiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHN0cmluZy5oc2xTdHJpbmcodGhpcy52YWx1ZXMuaHNsLCB0aGlzLnZhbHVlcy5hbHBoYSk7XG5cdH0sXG5cdGhzbGFTdHJpbmc6IGZ1bmN0aW9uICgpIHtcblx0XHRyZXR1cm4gc3RyaW5nLmhzbGFTdHJpbmcodGhpcy52YWx1ZXMuaHNsLCB0aGlzLnZhbHVlcy5hbHBoYSk7XG5cdH0sXG5cdGh3YlN0cmluZzogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiBzdHJpbmcuaHdiU3RyaW5nKHRoaXMudmFsdWVzLmh3YiwgdGhpcy52YWx1ZXMuYWxwaGEpO1xuXHR9LFxuXHRrZXl3b3JkOiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuIHN0cmluZy5rZXl3b3JkKHRoaXMudmFsdWVzLnJnYiwgdGhpcy52YWx1ZXMuYWxwaGEpO1xuXHR9LFxuXG5cdHJnYk51bWJlcjogZnVuY3Rpb24gKCkge1xuXHRcdHZhciByZ2IgPSB0aGlzLnZhbHVlcy5yZ2I7XG5cdFx0cmV0dXJuIChyZ2JbMF0gPDwgMTYpIHwgKHJnYlsxXSA8PCA4KSB8IHJnYlsyXTtcblx0fSxcblxuXHRsdW1pbm9zaXR5OiBmdW5jdGlvbiAoKSB7XG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvV0NBRzIwLyNyZWxhdGl2ZWx1bWluYW5jZWRlZlxuXHRcdHZhciByZ2IgPSB0aGlzLnZhbHVlcy5yZ2I7XG5cdFx0dmFyIGx1bSA9IFtdO1xuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgcmdiLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgY2hhbiA9IHJnYltpXSAvIDI1NTtcblx0XHRcdGx1bVtpXSA9IChjaGFuIDw9IDAuMDM5MjgpID8gY2hhbiAvIDEyLjkyIDogTWF0aC5wb3coKChjaGFuICsgMC4wNTUpIC8gMS4wNTUpLCAyLjQpO1xuXHRcdH1cblx0XHRyZXR1cm4gMC4yMTI2ICogbHVtWzBdICsgMC43MTUyICogbHVtWzFdICsgMC4wNzIyICogbHVtWzJdO1xuXHR9LFxuXG5cdGNvbnRyYXN0OiBmdW5jdGlvbiAoY29sb3IyKSB7XG5cdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvV0NBRzIwLyNjb250cmFzdC1yYXRpb2RlZlxuXHRcdHZhciBsdW0xID0gdGhpcy5sdW1pbm9zaXR5KCk7XG5cdFx0dmFyIGx1bTIgPSBjb2xvcjIubHVtaW5vc2l0eSgpO1xuXHRcdGlmIChsdW0xID4gbHVtMikge1xuXHRcdFx0cmV0dXJuIChsdW0xICsgMC4wNSkgLyAobHVtMiArIDAuMDUpO1xuXHRcdH1cblx0XHRyZXR1cm4gKGx1bTIgKyAwLjA1KSAvIChsdW0xICsgMC4wNSk7XG5cdH0sXG5cblx0bGV2ZWw6IGZ1bmN0aW9uIChjb2xvcjIpIHtcblx0XHR2YXIgY29udHJhc3RSYXRpbyA9IHRoaXMuY29udHJhc3QoY29sb3IyKTtcblx0XHRpZiAoY29udHJhc3RSYXRpbyA+PSA3LjEpIHtcblx0XHRcdHJldHVybiAnQUFBJztcblx0XHR9XG5cblx0XHRyZXR1cm4gKGNvbnRyYXN0UmF0aW8gPj0gNC41KSA/ICdBQScgOiAnJztcblx0fSxcblxuXHRkYXJrOiBmdW5jdGlvbiAoKSB7XG5cdFx0Ly8gWUlRIGVxdWF0aW9uIGZyb20gaHR0cDovLzI0d2F5cy5vcmcvMjAxMC9jYWxjdWxhdGluZy1jb2xvci1jb250cmFzdFxuXHRcdHZhciByZ2IgPSB0aGlzLnZhbHVlcy5yZ2I7XG5cdFx0dmFyIHlpcSA9IChyZ2JbMF0gKiAyOTkgKyByZ2JbMV0gKiA1ODcgKyByZ2JbMl0gKiAxMTQpIC8gMTAwMDtcblx0XHRyZXR1cm4geWlxIDwgMTI4O1xuXHR9LFxuXG5cdGxpZ2h0OiBmdW5jdGlvbiAoKSB7XG5cdFx0cmV0dXJuICF0aGlzLmRhcmsoKTtcblx0fSxcblxuXHRuZWdhdGU6IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgcmdiID0gW107XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAzOyBpKyspIHtcblx0XHRcdHJnYltpXSA9IDI1NSAtIHRoaXMudmFsdWVzLnJnYltpXTtcblx0XHR9XG5cdFx0dGhpcy5zZXRWYWx1ZXMoJ3JnYicsIHJnYik7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0bGlnaHRlbjogZnVuY3Rpb24gKHJhdGlvKSB7XG5cdFx0dmFyIGhzbCA9IHRoaXMudmFsdWVzLmhzbDtcblx0XHRoc2xbMl0gKz0gaHNsWzJdICogcmF0aW87XG5cdFx0dGhpcy5zZXRWYWx1ZXMoJ2hzbCcsIGhzbCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0ZGFya2VuOiBmdW5jdGlvbiAocmF0aW8pIHtcblx0XHR2YXIgaHNsID0gdGhpcy52YWx1ZXMuaHNsO1xuXHRcdGhzbFsyXSAtPSBoc2xbMl0gKiByYXRpbztcblx0XHR0aGlzLnNldFZhbHVlcygnaHNsJywgaHNsKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRzYXR1cmF0ZTogZnVuY3Rpb24gKHJhdGlvKSB7XG5cdFx0dmFyIGhzbCA9IHRoaXMudmFsdWVzLmhzbDtcblx0XHRoc2xbMV0gKz0gaHNsWzFdICogcmF0aW87XG5cdFx0dGhpcy5zZXRWYWx1ZXMoJ2hzbCcsIGhzbCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0ZGVzYXR1cmF0ZTogZnVuY3Rpb24gKHJhdGlvKSB7XG5cdFx0dmFyIGhzbCA9IHRoaXMudmFsdWVzLmhzbDtcblx0XHRoc2xbMV0gLT0gaHNsWzFdICogcmF0aW87XG5cdFx0dGhpcy5zZXRWYWx1ZXMoJ2hzbCcsIGhzbCk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0d2hpdGVuOiBmdW5jdGlvbiAocmF0aW8pIHtcblx0XHR2YXIgaHdiID0gdGhpcy52YWx1ZXMuaHdiO1xuXHRcdGh3YlsxXSArPSBod2JbMV0gKiByYXRpbztcblx0XHR0aGlzLnNldFZhbHVlcygnaHdiJywgaHdiKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRibGFja2VuOiBmdW5jdGlvbiAocmF0aW8pIHtcblx0XHR2YXIgaHdiID0gdGhpcy52YWx1ZXMuaHdiO1xuXHRcdGh3YlsyXSArPSBod2JbMl0gKiByYXRpbztcblx0XHR0aGlzLnNldFZhbHVlcygnaHdiJywgaHdiKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRncmV5c2NhbGU6IGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgcmdiID0gdGhpcy52YWx1ZXMucmdiO1xuXHRcdC8vIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvR3JheXNjYWxlI0NvbnZlcnRpbmdfY29sb3JfdG9fZ3JheXNjYWxlXG5cdFx0dmFyIHZhbCA9IHJnYlswXSAqIDAuMyArIHJnYlsxXSAqIDAuNTkgKyByZ2JbMl0gKiAwLjExO1xuXHRcdHRoaXMuc2V0VmFsdWVzKCdyZ2InLCBbdmFsLCB2YWwsIHZhbF0pO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsZWFyZXI6IGZ1bmN0aW9uIChyYXRpbykge1xuXHRcdHZhciBhbHBoYSA9IHRoaXMudmFsdWVzLmFscGhhO1xuXHRcdHRoaXMuc2V0VmFsdWVzKCdhbHBoYScsIGFscGhhIC0gKGFscGhhICogcmF0aW8pKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fSxcblxuXHRvcGFxdWVyOiBmdW5jdGlvbiAocmF0aW8pIHtcblx0XHR2YXIgYWxwaGEgPSB0aGlzLnZhbHVlcy5hbHBoYTtcblx0XHR0aGlzLnNldFZhbHVlcygnYWxwaGEnLCBhbHBoYSArIChhbHBoYSAqIHJhdGlvKSk7XG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cm90YXRlOiBmdW5jdGlvbiAoZGVncmVlcykge1xuXHRcdHZhciBoc2wgPSB0aGlzLnZhbHVlcy5oc2w7XG5cdFx0dmFyIGh1ZSA9IChoc2xbMF0gKyBkZWdyZWVzKSAlIDM2MDtcblx0XHRoc2xbMF0gPSBodWUgPCAwID8gMzYwICsgaHVlIDogaHVlO1xuXHRcdHRoaXMuc2V0VmFsdWVzKCdoc2wnLCBoc2wpO1xuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBQb3J0ZWQgZnJvbSBzYXNzIGltcGxlbWVudGF0aW9uIGluIENcblx0ICogaHR0cHM6Ly9naXRodWIuY29tL3Nhc3MvbGlic2Fzcy9ibG9iLzBlNmI0YTI4NTAwOTIzNTZhYTNlY2UwN2M2YjI0OWYwMjIxY2FjZWQvZnVuY3Rpb25zLmNwcCNMMjA5XG5cdCAqL1xuXHRtaXg6IGZ1bmN0aW9uIChtaXhpbkNvbG9yLCB3ZWlnaHQpIHtcblx0XHR2YXIgY29sb3IxID0gdGhpcztcblx0XHR2YXIgY29sb3IyID0gbWl4aW5Db2xvcjtcblx0XHR2YXIgcCA9IHdlaWdodCA9PT0gdW5kZWZpbmVkID8gMC41IDogd2VpZ2h0O1xuXG5cdFx0dmFyIHcgPSAyICogcCAtIDE7XG5cdFx0dmFyIGEgPSBjb2xvcjEuYWxwaGEoKSAtIGNvbG9yMi5hbHBoYSgpO1xuXG5cdFx0dmFyIHcxID0gKCgodyAqIGEgPT09IC0xKSA/IHcgOiAodyArIGEpIC8gKDEgKyB3ICogYSkpICsgMSkgLyAyLjA7XG5cdFx0dmFyIHcyID0gMSAtIHcxO1xuXG5cdFx0cmV0dXJuIHRoaXNcblx0XHRcdC5yZ2IoXG5cdFx0XHRcdHcxICogY29sb3IxLnJlZCgpICsgdzIgKiBjb2xvcjIucmVkKCksXG5cdFx0XHRcdHcxICogY29sb3IxLmdyZWVuKCkgKyB3MiAqIGNvbG9yMi5ncmVlbigpLFxuXHRcdFx0XHR3MSAqIGNvbG9yMS5ibHVlKCkgKyB3MiAqIGNvbG9yMi5ibHVlKClcblx0XHRcdClcblx0XHRcdC5hbHBoYShjb2xvcjEuYWxwaGEoKSAqIHAgKyBjb2xvcjIuYWxwaGEoKSAqICgxIC0gcCkpO1xuXHR9LFxuXG5cdHRvSlNPTjogZnVuY3Rpb24gKCkge1xuXHRcdHJldHVybiB0aGlzLnJnYigpO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiAoKSB7XG5cdFx0Ly8gTk9URShTQik6IHVzaW5nIG5vZGUtY2xvbmUgY3JlYXRlcyBhIGRlcGVuZGVuY3kgdG8gQnVmZmVyIHdoZW4gdXNpbmcgYnJvd3NlcmlmeSxcblx0XHQvLyBtYWtpbmcgdGhlIGZpbmFsIGJ1aWxkIHdheSB0byBiaWcgdG8gZW1iZWQgaW4gQ2hhcnQuanMuIFNvIGxldCdzIGRvIGl0IG1hbnVhbGx5LFxuXHRcdC8vIGFzc3VtaW5nIHRoYXQgdmFsdWVzIHRvIGNsb25lIGFyZSAxIGRpbWVuc2lvbiBhcnJheXMgY29udGFpbmluZyBvbmx5IG51bWJlcnMsXG5cdFx0Ly8gZXhjZXB0ICdhbHBoYScgd2hpY2ggaXMgYSBudW1iZXIuXG5cdFx0dmFyIHJlc3VsdCA9IG5ldyBDb2xvcigpO1xuXHRcdHZhciBzb3VyY2UgPSB0aGlzLnZhbHVlcztcblx0XHR2YXIgdGFyZ2V0ID0gcmVzdWx0LnZhbHVlcztcblx0XHR2YXIgdmFsdWUsIHR5cGU7XG5cblx0XHRmb3IgKHZhciBwcm9wIGluIHNvdXJjZSkge1xuXHRcdFx0aWYgKHNvdXJjZS5oYXNPd25Qcm9wZXJ0eShwcm9wKSkge1xuXHRcdFx0XHR2YWx1ZSA9IHNvdXJjZVtwcm9wXTtcblx0XHRcdFx0dHlwZSA9ICh7fSkudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG5cdFx0XHRcdGlmICh0eXBlID09PSAnW29iamVjdCBBcnJheV0nKSB7XG5cdFx0XHRcdFx0dGFyZ2V0W3Byb3BdID0gdmFsdWUuc2xpY2UoMCk7XG5cdFx0XHRcdH0gZWxzZSBpZiAodHlwZSA9PT0gJ1tvYmplY3QgTnVtYmVyXScpIHtcblx0XHRcdFx0XHR0YXJnZXRbcHJvcF0gPSB2YWx1ZTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRjb25zb2xlLmVycm9yKCd1bmV4cGVjdGVkIGNvbG9yIHZhbHVlOicsIHZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH1cbn07XG5cbkNvbG9yLnByb3RvdHlwZS5zcGFjZXMgPSB7XG5cdHJnYjogWydyZWQnLCAnZ3JlZW4nLCAnYmx1ZSddLFxuXHRoc2w6IFsnaHVlJywgJ3NhdHVyYXRpb24nLCAnbGlnaHRuZXNzJ10sXG5cdGhzdjogWydodWUnLCAnc2F0dXJhdGlvbicsICd2YWx1ZSddLFxuXHRod2I6IFsnaHVlJywgJ3doaXRlbmVzcycsICdibGFja25lc3MnXSxcblx0Y215azogWydjeWFuJywgJ21hZ2VudGEnLCAneWVsbG93JywgJ2JsYWNrJ11cbn07XG5cbkNvbG9yLnByb3RvdHlwZS5tYXhlcyA9IHtcblx0cmdiOiBbMjU1LCAyNTUsIDI1NV0sXG5cdGhzbDogWzM2MCwgMTAwLCAxMDBdLFxuXHRoc3Y6IFszNjAsIDEwMCwgMTAwXSxcblx0aHdiOiBbMzYwLCAxMDAsIDEwMF0sXG5cdGNteWs6IFsxMDAsIDEwMCwgMTAwLCAxMDBdXG59O1xuXG5Db2xvci5wcm90b3R5cGUuZ2V0VmFsdWVzID0gZnVuY3Rpb24gKHNwYWNlKSB7XG5cdHZhciB2YWx1ZXMgPSB0aGlzLnZhbHVlcztcblx0dmFyIHZhbHMgPSB7fTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IHNwYWNlLmxlbmd0aDsgaSsrKSB7XG5cdFx0dmFsc1tzcGFjZS5jaGFyQXQoaSldID0gdmFsdWVzW3NwYWNlXVtpXTtcblx0fVxuXG5cdGlmICh2YWx1ZXMuYWxwaGEgIT09IDEpIHtcblx0XHR2YWxzLmEgPSB2YWx1ZXMuYWxwaGE7XG5cdH1cblxuXHQvLyB7cjogMjU1LCBnOiAyNTUsIGI6IDI1NSwgYTogMC40fVxuXHRyZXR1cm4gdmFscztcbn07XG5cbkNvbG9yLnByb3RvdHlwZS5zZXRWYWx1ZXMgPSBmdW5jdGlvbiAoc3BhY2UsIHZhbHMpIHtcblx0dmFyIHZhbHVlcyA9IHRoaXMudmFsdWVzO1xuXHR2YXIgc3BhY2VzID0gdGhpcy5zcGFjZXM7XG5cdHZhciBtYXhlcyA9IHRoaXMubWF4ZXM7XG5cdHZhciBhbHBoYSA9IDE7XG5cdHZhciBpO1xuXG5cdHRoaXMudmFsaWQgPSB0cnVlO1xuXG5cdGlmIChzcGFjZSA9PT0gJ2FscGhhJykge1xuXHRcdGFscGhhID0gdmFscztcblx0fSBlbHNlIGlmICh2YWxzLmxlbmd0aCkge1xuXHRcdC8vIFsxMCwgMTAsIDEwXVxuXHRcdHZhbHVlc1tzcGFjZV0gPSB2YWxzLnNsaWNlKDAsIHNwYWNlLmxlbmd0aCk7XG5cdFx0YWxwaGEgPSB2YWxzW3NwYWNlLmxlbmd0aF07XG5cdH0gZWxzZSBpZiAodmFsc1tzcGFjZS5jaGFyQXQoMCldICE9PSB1bmRlZmluZWQpIHtcblx0XHQvLyB7cjogMTAsIGc6IDEwLCBiOiAxMH1cblx0XHRmb3IgKGkgPSAwOyBpIDwgc3BhY2UubGVuZ3RoOyBpKyspIHtcblx0XHRcdHZhbHVlc1tzcGFjZV1baV0gPSB2YWxzW3NwYWNlLmNoYXJBdChpKV07XG5cdFx0fVxuXG5cdFx0YWxwaGEgPSB2YWxzLmE7XG5cdH0gZWxzZSBpZiAodmFsc1tzcGFjZXNbc3BhY2VdWzBdXSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0Ly8ge3JlZDogMTAsIGdyZWVuOiAxMCwgYmx1ZTogMTB9XG5cdFx0dmFyIGNoYW5zID0gc3BhY2VzW3NwYWNlXTtcblxuXHRcdGZvciAoaSA9IDA7IGkgPCBzcGFjZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFsdWVzW3NwYWNlXVtpXSA9IHZhbHNbY2hhbnNbaV1dO1xuXHRcdH1cblxuXHRcdGFscGhhID0gdmFscy5hbHBoYTtcblx0fVxuXG5cdHZhbHVlcy5hbHBoYSA9IE1hdGgubWF4KDAsIE1hdGgubWluKDEsIChhbHBoYSA9PT0gdW5kZWZpbmVkID8gdmFsdWVzLmFscGhhIDogYWxwaGEpKSk7XG5cblx0aWYgKHNwYWNlID09PSAnYWxwaGEnKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0dmFyIGNhcHBlZDtcblxuXHQvLyBjYXAgdmFsdWVzIG9mIHRoZSBzcGFjZSBwcmlvciBjb252ZXJ0aW5nIGFsbCB2YWx1ZXNcblx0Zm9yIChpID0gMDsgaSA8IHNwYWNlLmxlbmd0aDsgaSsrKSB7XG5cdFx0Y2FwcGVkID0gTWF0aC5tYXgoMCwgTWF0aC5taW4obWF4ZXNbc3BhY2VdW2ldLCB2YWx1ZXNbc3BhY2VdW2ldKSk7XG5cdFx0dmFsdWVzW3NwYWNlXVtpXSA9IE1hdGgucm91bmQoY2FwcGVkKTtcblx0fVxuXG5cdC8vIGNvbnZlcnQgdG8gYWxsIHRoZSBvdGhlciBjb2xvciBzcGFjZXNcblx0Zm9yICh2YXIgc25hbWUgaW4gc3BhY2VzKSB7XG5cdFx0aWYgKHNuYW1lICE9PSBzcGFjZSkge1xuXHRcdFx0dmFsdWVzW3NuYW1lXSA9IGNvbnZlcnRbc3BhY2VdW3NuYW1lXSh2YWx1ZXNbc3BhY2VdKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gdHJ1ZTtcbn07XG5cbkNvbG9yLnByb3RvdHlwZS5zZXRTcGFjZSA9IGZ1bmN0aW9uIChzcGFjZSwgYXJncykge1xuXHR2YXIgdmFscyA9IGFyZ3NbMF07XG5cblx0aWYgKHZhbHMgPT09IHVuZGVmaW5lZCkge1xuXHRcdC8vIGNvbG9yLnJnYigpXG5cdFx0cmV0dXJuIHRoaXMuZ2V0VmFsdWVzKHNwYWNlKTtcblx0fVxuXG5cdC8vIGNvbG9yLnJnYigxMCwgMTAsIDEwKVxuXHRpZiAodHlwZW9mIHZhbHMgPT09ICdudW1iZXInKSB7XG5cdFx0dmFscyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MpO1xuXHR9XG5cblx0dGhpcy5zZXRWYWx1ZXMoc3BhY2UsIHZhbHMpO1xuXHRyZXR1cm4gdGhpcztcbn07XG5cbkNvbG9yLnByb3RvdHlwZS5zZXRDaGFubmVsID0gZnVuY3Rpb24gKHNwYWNlLCBpbmRleCwgdmFsKSB7XG5cdHZhciBzdmFsdWVzID0gdGhpcy52YWx1ZXNbc3BhY2VdO1xuXHRpZiAodmFsID09PSB1bmRlZmluZWQpIHtcblx0XHQvLyBjb2xvci5yZWQoKVxuXHRcdHJldHVybiBzdmFsdWVzW2luZGV4XTtcblx0fSBlbHNlIGlmICh2YWwgPT09IHN2YWx1ZXNbaW5kZXhdKSB7XG5cdFx0Ly8gY29sb3IucmVkKGNvbG9yLnJlZCgpKVxuXHRcdHJldHVybiB0aGlzO1xuXHR9XG5cblx0Ly8gY29sb3IucmVkKDEwMClcblx0c3ZhbHVlc1tpbmRleF0gPSB2YWw7XG5cdHRoaXMuc2V0VmFsdWVzKHNwYWNlLCBzdmFsdWVzKTtcblxuXHRyZXR1cm4gdGhpcztcbn07XG5cbmlmICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJykge1xuXHR3aW5kb3cuQ29sb3IgPSBDb2xvcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBDb2xvcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2luZGV4Jyk7XG5cbmZ1bmN0aW9uIGZpbHRlckJ5UG9zaXRpb24oYXJyYXksIHBvc2l0aW9uKSB7XG5cdHJldHVybiBoZWxwZXJzLndoZXJlKGFycmF5LCBmdW5jdGlvbih2KSB7XG5cdFx0cmV0dXJuIHYucG9zaXRpb24gPT09IHBvc2l0aW9uO1xuXHR9KTtcbn1cblxuZnVuY3Rpb24gc29ydEJ5V2VpZ2h0KGFycmF5LCByZXZlcnNlKSB7XG5cdGFycmF5LmZvckVhY2goZnVuY3Rpb24odiwgaSkge1xuXHRcdHYuX3RtcEluZGV4XyA9IGk7XG5cdFx0cmV0dXJuIHY7XG5cdH0pO1xuXHRhcnJheS5zb3J0KGZ1bmN0aW9uKGEsIGIpIHtcblx0XHR2YXIgdjAgPSByZXZlcnNlID8gYiA6IGE7XG5cdFx0dmFyIHYxID0gcmV2ZXJzZSA/IGEgOiBiO1xuXHRcdHJldHVybiB2MC53ZWlnaHQgPT09IHYxLndlaWdodCA/XG5cdFx0XHR2MC5fdG1wSW5kZXhfIC0gdjEuX3RtcEluZGV4XyA6XG5cdFx0XHR2MC53ZWlnaHQgLSB2MS53ZWlnaHQ7XG5cdH0pO1xuXHRhcnJheS5mb3JFYWNoKGZ1bmN0aW9uKHYpIHtcblx0XHRkZWxldGUgdi5fdG1wSW5kZXhfO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBAaW50ZXJmYWNlIElMYXlvdXRJdGVtXG4gKiBAcHJvcCB7U3RyaW5nfSBwb3NpdGlvbiAtIFRoZSBwb3NpdGlvbiBvZiB0aGUgaXRlbSBpbiB0aGUgY2hhcnQgbGF5b3V0LiBQb3NzaWJsZSB2YWx1ZXMgYXJlXG4gKiAnbGVmdCcsICd0b3AnLCAncmlnaHQnLCAnYm90dG9tJywgYW5kICdjaGFydEFyZWEnXG4gKiBAcHJvcCB7TnVtYmVyfSB3ZWlnaHQgLSBUaGUgd2VpZ2h0IHVzZWQgdG8gc29ydCB0aGUgaXRlbS4gSGlnaGVyIHdlaWdodHMgYXJlIGZ1cnRoZXIgYXdheSBmcm9tIHRoZSBjaGFydCBhcmVhXG4gKiBAcHJvcCB7Qm9vbGVhbn0gZnVsbFdpZHRoIC0gaWYgdHJ1ZSwgYW5kIHRoZSBpdGVtIGlzIGhvcml6b250YWwsIHRoZW4gcHVzaCB2ZXJ0aWNhbCBib3hlcyBkb3duXG4gKiBAcHJvcCB7RnVuY3Rpb259IGlzSG9yaXpvbnRhbCAtIHJldHVybnMgdHJ1ZSBpZiB0aGUgbGF5b3V0IGl0ZW0gaXMgaG9yaXpvbnRhbCAoaWUuIHRvcCBvciBib3R0b20pXG4gKiBAcHJvcCB7RnVuY3Rpb259IHVwZGF0ZSAtIFRha2VzIHR3byBwYXJhbWV0ZXJzOiB3aWR0aCBhbmQgaGVpZ2h0LiBSZXR1cm5zIHNpemUgb2YgaXRlbVxuICogQHByb3Age0Z1bmN0aW9ufSBnZXRQYWRkaW5nIC0gIFJldHVybnMgYW4gb2JqZWN0IHdpdGggcGFkZGluZyBvbiB0aGUgZWRnZXNcbiAqIEBwcm9wIHtOdW1iZXJ9IHdpZHRoIC0gV2lkdGggb2YgaXRlbS4gTXVzdCBiZSB2YWxpZCBhZnRlciB1cGRhdGUoKVxuICogQHByb3Age051bWJlcn0gaGVpZ2h0IC0gSGVpZ2h0IG9mIGl0ZW0uIE11c3QgYmUgdmFsaWQgYWZ0ZXIgdXBkYXRlKClcbiAqIEBwcm9wIHtOdW1iZXJ9IGxlZnQgLSBMZWZ0IGVkZ2Ugb2YgdGhlIGl0ZW0uIFNldCBieSBsYXlvdXQgc3lzdGVtIGFuZCBjYW5ub3QgYmUgdXNlZCBpbiB1cGRhdGVcbiAqIEBwcm9wIHtOdW1iZXJ9IHRvcCAtIFRvcCBlZGdlIG9mIHRoZSBpdGVtLiBTZXQgYnkgbGF5b3V0IHN5c3RlbSBhbmQgY2Fubm90IGJlIHVzZWQgaW4gdXBkYXRlXG4gKiBAcHJvcCB7TnVtYmVyfSByaWdodCAtIFJpZ2h0IGVkZ2Ugb2YgdGhlIGl0ZW0uIFNldCBieSBsYXlvdXQgc3lzdGVtIGFuZCBjYW5ub3QgYmUgdXNlZCBpbiB1cGRhdGVcbiAqIEBwcm9wIHtOdW1iZXJ9IGJvdHRvbSAtIEJvdHRvbSBlZGdlIG9mIHRoZSBpdGVtLiBTZXQgYnkgbGF5b3V0IHN5c3RlbSBhbmQgY2Fubm90IGJlIHVzZWQgaW4gdXBkYXRlXG4gKi9cblxuLy8gVGhlIGxheW91dCBzZXJ2aWNlIGlzIHZlcnkgc2VsZiBleHBsYW5hdG9yeS4gIEl0J3MgcmVzcG9uc2libGUgZm9yIHRoZSBsYXlvdXQgd2l0aGluIGEgY2hhcnQuXG4vLyBTY2FsZXMsIExlZ2VuZHMgYW5kIFBsdWdpbnMgYWxsIHJlbHkgb24gdGhlIGxheW91dCBzZXJ2aWNlIGFuZCBjYW4gZWFzaWx5IHJlZ2lzdGVyIHRvIGJlIHBsYWNlZCBhbnl3aGVyZSB0aGV5IG5lZWRcbi8vIEl0IGlzIHRoaXMgc2VydmljZSdzIHJlc3BvbnNpYmlsaXR5IG9mIGNhcnJ5aW5nIG91dCB0aGF0IGxheW91dC5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRkZWZhdWx0czoge30sXG5cblx0LyoqXG5cdCAqIFJlZ2lzdGVyIGEgYm94IHRvIGEgY2hhcnQuXG5cdCAqIEEgYm94IGlzIHNpbXBseSBhIHJlZmVyZW5jZSB0byBhbiBvYmplY3QgdGhhdCByZXF1aXJlcyBsYXlvdXQuIGVnLiBTY2FsZXMsIExlZ2VuZCwgVGl0bGUuXG5cdCAqIEBwYXJhbSB7Q2hhcnR9IGNoYXJ0IC0gdGhlIGNoYXJ0IHRvIHVzZVxuXHQgKiBAcGFyYW0ge0lMYXlvdXRJdGVtfSBpdGVtIC0gdGhlIGl0ZW0gdG8gYWRkIHRvIGJlIGxheWVkIG91dFxuXHQgKi9cblx0YWRkQm94OiBmdW5jdGlvbihjaGFydCwgaXRlbSkge1xuXHRcdGlmICghY2hhcnQuYm94ZXMpIHtcblx0XHRcdGNoYXJ0LmJveGVzID0gW107XG5cdFx0fVxuXG5cdFx0Ly8gaW5pdGlhbGl6ZSBpdGVtIHdpdGggZGVmYXVsdCB2YWx1ZXNcblx0XHRpdGVtLmZ1bGxXaWR0aCA9IGl0ZW0uZnVsbFdpZHRoIHx8IGZhbHNlO1xuXHRcdGl0ZW0ucG9zaXRpb24gPSBpdGVtLnBvc2l0aW9uIHx8ICd0b3AnO1xuXHRcdGl0ZW0ud2VpZ2h0ID0gaXRlbS53ZWlnaHQgfHwgMDtcblxuXHRcdGNoYXJ0LmJveGVzLnB1c2goaXRlbSk7XG5cdH0sXG5cblx0LyoqXG5cdCAqIFJlbW92ZSBhIGxheW91dEl0ZW0gZnJvbSBhIGNoYXJ0XG5cdCAqIEBwYXJhbSB7Q2hhcnR9IGNoYXJ0IC0gdGhlIGNoYXJ0IHRvIHJlbW92ZSB0aGUgYm94IGZyb21cblx0ICogQHBhcmFtIHtPYmplY3R9IGxheW91dEl0ZW0gLSB0aGUgaXRlbSB0byByZW1vdmUgZnJvbSB0aGUgbGF5b3V0XG5cdCAqL1xuXHRyZW1vdmVCb3g6IGZ1bmN0aW9uKGNoYXJ0LCBsYXlvdXRJdGVtKSB7XG5cdFx0dmFyIGluZGV4ID0gY2hhcnQuYm94ZXMgPyBjaGFydC5ib3hlcy5pbmRleE9mKGxheW91dEl0ZW0pIDogLTE7XG5cdFx0aWYgKGluZGV4ICE9PSAtMSkge1xuXHRcdFx0Y2hhcnQuYm94ZXMuc3BsaWNlKGluZGV4LCAxKTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIFNldHMgKG9yIHVwZGF0ZXMpIG9wdGlvbnMgb24gdGhlIGdpdmVuIGBpdGVtYC5cblx0ICogQHBhcmFtIHtDaGFydH0gY2hhcnQgLSB0aGUgY2hhcnQgaW4gd2hpY2ggdGhlIGl0ZW0gbGl2ZXMgKG9yIHdpbGwgYmUgYWRkZWQgdG8pXG5cdCAqIEBwYXJhbSB7T2JqZWN0fSBpdGVtIC0gdGhlIGl0ZW0gdG8gY29uZmlndXJlIHdpdGggdGhlIGdpdmVuIG9wdGlvbnNcblx0ICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSB0aGUgbmV3IGl0ZW0gb3B0aW9ucy5cblx0ICovXG5cdGNvbmZpZ3VyZTogZnVuY3Rpb24oY2hhcnQsIGl0ZW0sIG9wdGlvbnMpIHtcblx0XHR2YXIgcHJvcHMgPSBbJ2Z1bGxXaWR0aCcsICdwb3NpdGlvbicsICd3ZWlnaHQnXTtcblx0XHR2YXIgaWxlbiA9IHByb3BzLmxlbmd0aDtcblx0XHR2YXIgaSA9IDA7XG5cdFx0dmFyIHByb3A7XG5cblx0XHRmb3IgKDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0cHJvcCA9IHByb3BzW2ldO1xuXHRcdFx0aWYgKG9wdGlvbnMuaGFzT3duUHJvcGVydHkocHJvcCkpIHtcblx0XHRcdFx0aXRlbVtwcm9wXSA9IG9wdGlvbnNbcHJvcF07XG5cdFx0XHR9XG5cdFx0fVxuXHR9LFxuXG5cdC8qKlxuXHQgKiBGaXRzIGJveGVzIG9mIHRoZSBnaXZlbiBjaGFydCBpbnRvIHRoZSBnaXZlbiBzaXplIGJ5IGhhdmluZyBlYWNoIGJveCBtZWFzdXJlIGl0c2VsZlxuXHQgKiB0aGVuIHJ1bm5pbmcgYSBmaXR0aW5nIGFsZ29yaXRobVxuXHQgKiBAcGFyYW0ge0NoYXJ0fSBjaGFydCAtIHRoZSBjaGFydFxuXHQgKiBAcGFyYW0ge051bWJlcn0gd2lkdGggLSB0aGUgd2lkdGggdG8gZml0IGludG9cblx0ICogQHBhcmFtIHtOdW1iZXJ9IGhlaWdodCAtIHRoZSBoZWlnaHQgdG8gZml0IGludG9cblx0ICovXG5cdHVwZGF0ZTogZnVuY3Rpb24oY2hhcnQsIHdpZHRoLCBoZWlnaHQpIHtcblx0XHRpZiAoIWNoYXJ0KSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIGxheW91dE9wdGlvbnMgPSBjaGFydC5vcHRpb25zLmxheW91dCB8fCB7fTtcblx0XHR2YXIgcGFkZGluZyA9IGhlbHBlcnMub3B0aW9ucy50b1BhZGRpbmcobGF5b3V0T3B0aW9ucy5wYWRkaW5nKTtcblx0XHR2YXIgbGVmdFBhZGRpbmcgPSBwYWRkaW5nLmxlZnQ7XG5cdFx0dmFyIHJpZ2h0UGFkZGluZyA9IHBhZGRpbmcucmlnaHQ7XG5cdFx0dmFyIHRvcFBhZGRpbmcgPSBwYWRkaW5nLnRvcDtcblx0XHR2YXIgYm90dG9tUGFkZGluZyA9IHBhZGRpbmcuYm90dG9tO1xuXG5cdFx0dmFyIGxlZnRCb3hlcyA9IGZpbHRlckJ5UG9zaXRpb24oY2hhcnQuYm94ZXMsICdsZWZ0Jyk7XG5cdFx0dmFyIHJpZ2h0Qm94ZXMgPSBmaWx0ZXJCeVBvc2l0aW9uKGNoYXJ0LmJveGVzLCAncmlnaHQnKTtcblx0XHR2YXIgdG9wQm94ZXMgPSBmaWx0ZXJCeVBvc2l0aW9uKGNoYXJ0LmJveGVzLCAndG9wJyk7XG5cdFx0dmFyIGJvdHRvbUJveGVzID0gZmlsdGVyQnlQb3NpdGlvbihjaGFydC5ib3hlcywgJ2JvdHRvbScpO1xuXHRcdHZhciBjaGFydEFyZWFCb3hlcyA9IGZpbHRlckJ5UG9zaXRpb24oY2hhcnQuYm94ZXMsICdjaGFydEFyZWEnKTtcblxuXHRcdC8vIFNvcnQgYm94ZXMgYnkgd2VpZ2h0LiBBIGhpZ2hlciB3ZWlnaHQgaXMgZnVydGhlciBhd2F5IGZyb20gdGhlIGNoYXJ0IGFyZWFcblx0XHRzb3J0QnlXZWlnaHQobGVmdEJveGVzLCB0cnVlKTtcblx0XHRzb3J0QnlXZWlnaHQocmlnaHRCb3hlcywgZmFsc2UpO1xuXHRcdHNvcnRCeVdlaWdodCh0b3BCb3hlcywgdHJ1ZSk7XG5cdFx0c29ydEJ5V2VpZ2h0KGJvdHRvbUJveGVzLCBmYWxzZSk7XG5cblx0XHQvLyBFc3NlbnRpYWxseSB3ZSBub3cgaGF2ZSBhbnkgbnVtYmVyIG9mIGJveGVzIG9uIGVhY2ggb2YgdGhlIDQgc2lkZXMuXG5cdFx0Ly8gT3VyIGNhbnZhcyBsb29rcyBsaWtlIHRoZSBmb2xsb3dpbmcuXG5cdFx0Ly8gVGhlIGFyZWFzIEwxIGFuZCBMMiBhcmUgdGhlIGxlZnQgYXhlcy4gUjEgaXMgdGhlIHJpZ2h0IGF4aXMsIFQxIGlzIHRoZSB0b3AgYXhpcyBhbmRcblx0XHQvLyBCMSBpcyB0aGUgYm90dG9tIGF4aXNcblx0XHQvLyBUaGVyZSBhcmUgYWxzbyA0IHF1YWRyYW50LWxpa2UgbG9jYXRpb25zIChsZWZ0IHRvIHJpZ2h0IGluc3RlYWQgb2YgY2xvY2t3aXNlKSByZXNlcnZlZCBmb3IgY2hhcnQgb3ZlcmxheXNcblx0XHQvLyBUaGVzZSBsb2NhdGlvbnMgYXJlIHNpbmdsZS1ib3ggbG9jYXRpb25zIG9ubHksIHdoZW4gdHJ5aW5nIHRvIHJlZ2lzdGVyIGEgY2hhcnRBcmVhIGxvY2F0aW9uIHRoYXQgaXMgYWxyZWFkeSB0YWtlbixcblx0XHQvLyBhbiBlcnJvciB3aWxsIGJlIHRocm93bi5cblx0XHQvL1xuXHRcdC8vIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuXHRcdC8vIHwgICAgICAgICAgICAgICAgICBUMSAoRnVsbCBXaWR0aCkgICAgICAgICAgICAgICAgICAgfFxuXHRcdC8vIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuXHRcdC8vIHwgICAgfCAgICB8ICAgICAgICAgICAgICAgICBUMiAgICAgICAgICAgICAgICAgIHwgICAgfFxuXHRcdC8vIHwgICAgfC0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tfFxuXHRcdC8vIHwgICAgfCAgICB8IEMxIHwgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEMyIHwgICAgfFxuXHRcdC8vIHwgICAgfCAgICB8LS0tLXwgICAgICAgICAgICAgICAgICAgICAgICAgICB8LS0tLXwgICAgfFxuXHRcdC8vIHwgICAgfCAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgfFxuXHRcdC8vIHwgTDEgfCBMMiB8ICAgICAgICAgICBDaGFydEFyZWEgKEMwKSAgICAgICAgICAgIHwgUjEgfFxuXHRcdC8vIHwgICAgfCAgICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgfFxuXHRcdC8vIHwgICAgfCAgICB8LS0tLXwgICAgICAgICAgICAgICAgICAgICAgICAgICB8LS0tLXwgICAgfFxuXHRcdC8vIHwgICAgfCAgICB8IEMzIHwgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEM0IHwgICAgfFxuXHRcdC8vIHwgICAgfC0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLXwtLS0tfFxuXHRcdC8vIHwgICAgfCAgICB8ICAgICAgICAgICAgICAgICBCMSAgICAgICAgICAgICAgICAgIHwgICAgfFxuXHRcdC8vIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuXHRcdC8vIHwgICAgICAgICAgICAgICAgICBCMiAoRnVsbCBXaWR0aCkgICAgICAgICAgICAgICAgICAgfFxuXHRcdC8vIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuXHRcdC8vXG5cdFx0Ly8gV2hhdCB3ZSBkbyB0byBmaW5kIHRoZSBiZXN0IHNpemluZywgd2UgZG8gdGhlIGZvbGxvd2luZ1xuXHRcdC8vIDEuIERldGVybWluZSB0aGUgbWluaW11bSBzaXplIG9mIHRoZSBjaGFydCBhcmVhLlxuXHRcdC8vIDIuIFNwbGl0IHRoZSByZW1haW5pbmcgd2lkdGggZXF1YWxseSBiZXR3ZWVuIGVhY2ggdmVydGljYWwgYXhpc1xuXHRcdC8vIDMuIFNwbGl0IHRoZSByZW1haW5pbmcgaGVpZ2h0IGVxdWFsbHkgYmV0d2VlbiBlYWNoIGhvcml6b250YWwgYXhpc1xuXHRcdC8vIDQuIEdpdmUgZWFjaCBsYXlvdXQgdGhlIG1heGltdW0gc2l6ZSBpdCBjYW4gYmUuIFRoZSBsYXlvdXQgd2lsbCByZXR1cm4gaXQncyBtaW5pbXVtIHNpemVcblx0XHQvLyA1LiBBZGp1c3QgdGhlIHNpemVzIG9mIGVhY2ggYXhpcyBiYXNlZCBvbiBpdCdzIG1pbmltdW0gcmVwb3J0ZWQgc2l6ZS5cblx0XHQvLyA2LiBSZWZpdCBlYWNoIGF4aXNcblx0XHQvLyA3LiBQb3NpdGlvbiBlYWNoIGF4aXMgaW4gdGhlIGZpbmFsIGxvY2F0aW9uXG5cdFx0Ly8gOC4gVGVsbCB0aGUgY2hhcnQgdGhlIGZpbmFsIGxvY2F0aW9uIG9mIHRoZSBjaGFydCBhcmVhXG5cdFx0Ly8gOS4gVGVsbCBhbnkgYXhlcyB0aGF0IG92ZXJsYXkgdGhlIGNoYXJ0IGFyZWEgdGhlIHBvc2l0aW9ucyBvZiB0aGUgY2hhcnQgYXJlYVxuXG5cdFx0Ly8gU3RlcCAxXG5cdFx0dmFyIGNoYXJ0V2lkdGggPSB3aWR0aCAtIGxlZnRQYWRkaW5nIC0gcmlnaHRQYWRkaW5nO1xuXHRcdHZhciBjaGFydEhlaWdodCA9IGhlaWdodCAtIHRvcFBhZGRpbmcgLSBib3R0b21QYWRkaW5nO1xuXHRcdHZhciBjaGFydEFyZWFXaWR0aCA9IGNoYXJ0V2lkdGggLyAyOyAvLyBtaW4gNTAlXG5cdFx0dmFyIGNoYXJ0QXJlYUhlaWdodCA9IGNoYXJ0SGVpZ2h0IC8gMjsgLy8gbWluIDUwJVxuXG5cdFx0Ly8gU3RlcCAyXG5cdFx0dmFyIHZlcnRpY2FsQm94V2lkdGggPSAod2lkdGggLSBjaGFydEFyZWFXaWR0aCkgLyAobGVmdEJveGVzLmxlbmd0aCArIHJpZ2h0Qm94ZXMubGVuZ3RoKTtcblxuXHRcdC8vIFN0ZXAgM1xuXHRcdHZhciBob3Jpem9udGFsQm94SGVpZ2h0ID0gKGhlaWdodCAtIGNoYXJ0QXJlYUhlaWdodCkgLyAodG9wQm94ZXMubGVuZ3RoICsgYm90dG9tQm94ZXMubGVuZ3RoKTtcblxuXHRcdC8vIFN0ZXAgNFxuXHRcdHZhciBtYXhDaGFydEFyZWFXaWR0aCA9IGNoYXJ0V2lkdGg7XG5cdFx0dmFyIG1heENoYXJ0QXJlYUhlaWdodCA9IGNoYXJ0SGVpZ2h0O1xuXHRcdHZhciBtaW5Cb3hTaXplcyA9IFtdO1xuXG5cdFx0ZnVuY3Rpb24gZ2V0TWluaW11bUJveFNpemUoYm94KSB7XG5cdFx0XHR2YXIgbWluU2l6ZTtcblx0XHRcdHZhciBpc0hvcml6b250YWwgPSBib3guaXNIb3Jpem9udGFsKCk7XG5cblx0XHRcdGlmIChpc0hvcml6b250YWwpIHtcblx0XHRcdFx0bWluU2l6ZSA9IGJveC51cGRhdGUoYm94LmZ1bGxXaWR0aCA/IGNoYXJ0V2lkdGggOiBtYXhDaGFydEFyZWFXaWR0aCwgaG9yaXpvbnRhbEJveEhlaWdodCk7XG5cdFx0XHRcdG1heENoYXJ0QXJlYUhlaWdodCAtPSBtaW5TaXplLmhlaWdodDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1pblNpemUgPSBib3gudXBkYXRlKHZlcnRpY2FsQm94V2lkdGgsIG1heENoYXJ0QXJlYUhlaWdodCk7XG5cdFx0XHRcdG1heENoYXJ0QXJlYVdpZHRoIC09IG1pblNpemUud2lkdGg7XG5cdFx0XHR9XG5cblx0XHRcdG1pbkJveFNpemVzLnB1c2goe1xuXHRcdFx0XHRob3Jpem9udGFsOiBpc0hvcml6b250YWwsXG5cdFx0XHRcdG1pblNpemU6IG1pblNpemUsXG5cdFx0XHRcdGJveDogYm94LFxuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aGVscGVycy5lYWNoKGxlZnRCb3hlcy5jb25jYXQocmlnaHRCb3hlcywgdG9wQm94ZXMsIGJvdHRvbUJveGVzKSwgZ2V0TWluaW11bUJveFNpemUpO1xuXG5cdFx0Ly8gSWYgYSBob3Jpem9udGFsIGJveCBoYXMgcGFkZGluZywgd2UgbW92ZSB0aGUgbGVmdCBib3hlcyBvdmVyIHRvIGF2b2lkIHVnbHkgY2hhcnRzIChzZWUgaXNzdWUgIzI0NzgpXG5cdFx0dmFyIG1heEhvcml6b250YWxMZWZ0UGFkZGluZyA9IDA7XG5cdFx0dmFyIG1heEhvcml6b250YWxSaWdodFBhZGRpbmcgPSAwO1xuXHRcdHZhciBtYXhWZXJ0aWNhbFRvcFBhZGRpbmcgPSAwO1xuXHRcdHZhciBtYXhWZXJ0aWNhbEJvdHRvbVBhZGRpbmcgPSAwO1xuXG5cdFx0aGVscGVycy5lYWNoKHRvcEJveGVzLmNvbmNhdChib3R0b21Cb3hlcyksIGZ1bmN0aW9uKGhvcml6b250YWxCb3gpIHtcblx0XHRcdGlmIChob3Jpem9udGFsQm94LmdldFBhZGRpbmcpIHtcblx0XHRcdFx0dmFyIGJveFBhZGRpbmcgPSBob3Jpem9udGFsQm94LmdldFBhZGRpbmcoKTtcblx0XHRcdFx0bWF4SG9yaXpvbnRhbExlZnRQYWRkaW5nID0gTWF0aC5tYXgobWF4SG9yaXpvbnRhbExlZnRQYWRkaW5nLCBib3hQYWRkaW5nLmxlZnQpO1xuXHRcdFx0XHRtYXhIb3Jpem9udGFsUmlnaHRQYWRkaW5nID0gTWF0aC5tYXgobWF4SG9yaXpvbnRhbFJpZ2h0UGFkZGluZywgYm94UGFkZGluZy5yaWdodCk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRoZWxwZXJzLmVhY2gobGVmdEJveGVzLmNvbmNhdChyaWdodEJveGVzKSwgZnVuY3Rpb24odmVydGljYWxCb3gpIHtcblx0XHRcdGlmICh2ZXJ0aWNhbEJveC5nZXRQYWRkaW5nKSB7XG5cdFx0XHRcdHZhciBib3hQYWRkaW5nID0gdmVydGljYWxCb3guZ2V0UGFkZGluZygpO1xuXHRcdFx0XHRtYXhWZXJ0aWNhbFRvcFBhZGRpbmcgPSBNYXRoLm1heChtYXhWZXJ0aWNhbFRvcFBhZGRpbmcsIGJveFBhZGRpbmcudG9wKTtcblx0XHRcdFx0bWF4VmVydGljYWxCb3R0b21QYWRkaW5nID0gTWF0aC5tYXgobWF4VmVydGljYWxCb3R0b21QYWRkaW5nLCBib3hQYWRkaW5nLmJvdHRvbSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHQvLyBBdCB0aGlzIHBvaW50LCBtYXhDaGFydEFyZWFIZWlnaHQgYW5kIG1heENoYXJ0QXJlYVdpZHRoIGFyZSB0aGUgc2l6ZSB0aGUgY2hhcnQgYXJlYSBjb3VsZFxuXHRcdC8vIGJlIGlmIHRoZSBheGVzIGFyZSBkcmF3biBhdCB0aGVpciBtaW5pbXVtIHNpemVzLlxuXHRcdC8vIFN0ZXBzIDUgJiA2XG5cdFx0dmFyIHRvdGFsTGVmdEJveGVzV2lkdGggPSBsZWZ0UGFkZGluZztcblx0XHR2YXIgdG90YWxSaWdodEJveGVzV2lkdGggPSByaWdodFBhZGRpbmc7XG5cdFx0dmFyIHRvdGFsVG9wQm94ZXNIZWlnaHQgPSB0b3BQYWRkaW5nO1xuXHRcdHZhciB0b3RhbEJvdHRvbUJveGVzSGVpZ2h0ID0gYm90dG9tUGFkZGluZztcblxuXHRcdC8vIEZ1bmN0aW9uIHRvIGZpdCBhIGJveFxuXHRcdGZ1bmN0aW9uIGZpdEJveChib3gpIHtcblx0XHRcdHZhciBtaW5Cb3hTaXplID0gaGVscGVycy5maW5kTmV4dFdoZXJlKG1pbkJveFNpemVzLCBmdW5jdGlvbihtaW5Cb3gpIHtcblx0XHRcdFx0cmV0dXJuIG1pbkJveC5ib3ggPT09IGJveDtcblx0XHRcdH0pO1xuXG5cdFx0XHRpZiAobWluQm94U2l6ZSkge1xuXHRcdFx0XHRpZiAoYm94LmlzSG9yaXpvbnRhbCgpKSB7XG5cdFx0XHRcdFx0dmFyIHNjYWxlTWFyZ2luID0ge1xuXHRcdFx0XHRcdFx0bGVmdDogTWF0aC5tYXgodG90YWxMZWZ0Qm94ZXNXaWR0aCwgbWF4SG9yaXpvbnRhbExlZnRQYWRkaW5nKSxcblx0XHRcdFx0XHRcdHJpZ2h0OiBNYXRoLm1heCh0b3RhbFJpZ2h0Qm94ZXNXaWR0aCwgbWF4SG9yaXpvbnRhbFJpZ2h0UGFkZGluZyksXG5cdFx0XHRcdFx0XHR0b3A6IDAsXG5cdFx0XHRcdFx0XHRib3R0b206IDBcblx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0Ly8gRG9uJ3QgdXNlIG1pbiBzaXplIGhlcmUgYmVjYXVzZSBvZiBsYWJlbCByb3RhdGlvbi4gV2hlbiB0aGUgbGFiZWxzIGFyZSByb3RhdGVkLCB0aGVpciByb3RhdGlvbiBoaWdobHkgZGVwZW5kc1xuXHRcdFx0XHRcdC8vIG9uIHRoZSBtYXJnaW4uIFNvbWV0aW1lcyB0aGV5IG5lZWQgdG8gaW5jcmVhc2UgaW4gc2l6ZSBzbGlnaHRseVxuXHRcdFx0XHRcdGJveC51cGRhdGUoYm94LmZ1bGxXaWR0aCA/IGNoYXJ0V2lkdGggOiBtYXhDaGFydEFyZWFXaWR0aCwgY2hhcnRIZWlnaHQgLyAyLCBzY2FsZU1hcmdpbik7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Ym94LnVwZGF0ZShtaW5Cb3hTaXplLm1pblNpemUud2lkdGgsIG1heENoYXJ0QXJlYUhlaWdodCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBVcGRhdGUsIGFuZCBjYWxjdWxhdGUgdGhlIGxlZnQgYW5kIHJpZ2h0IG1hcmdpbnMgZm9yIHRoZSBob3Jpem9udGFsIGJveGVzXG5cdFx0aGVscGVycy5lYWNoKGxlZnRCb3hlcy5jb25jYXQocmlnaHRCb3hlcyksIGZpdEJveCk7XG5cblx0XHRoZWxwZXJzLmVhY2gobGVmdEJveGVzLCBmdW5jdGlvbihib3gpIHtcblx0XHRcdHRvdGFsTGVmdEJveGVzV2lkdGggKz0gYm94LndpZHRoO1xuXHRcdH0pO1xuXG5cdFx0aGVscGVycy5lYWNoKHJpZ2h0Qm94ZXMsIGZ1bmN0aW9uKGJveCkge1xuXHRcdFx0dG90YWxSaWdodEJveGVzV2lkdGggKz0gYm94LndpZHRoO1xuXHRcdH0pO1xuXG5cdFx0Ly8gU2V0IHRoZSBMZWZ0IGFuZCBSaWdodCBtYXJnaW5zIGZvciB0aGUgaG9yaXpvbnRhbCBib3hlc1xuXHRcdGhlbHBlcnMuZWFjaCh0b3BCb3hlcy5jb25jYXQoYm90dG9tQm94ZXMpLCBmaXRCb3gpO1xuXG5cdFx0Ly8gRmlndXJlIG91dCBob3cgbXVjaCBtYXJnaW4gaXMgb24gdGhlIHRvcCBhbmQgYm90dG9tIG9mIHRoZSB2ZXJ0aWNhbCBib3hlc1xuXHRcdGhlbHBlcnMuZWFjaCh0b3BCb3hlcywgZnVuY3Rpb24oYm94KSB7XG5cdFx0XHR0b3RhbFRvcEJveGVzSGVpZ2h0ICs9IGJveC5oZWlnaHQ7XG5cdFx0fSk7XG5cblx0XHRoZWxwZXJzLmVhY2goYm90dG9tQm94ZXMsIGZ1bmN0aW9uKGJveCkge1xuXHRcdFx0dG90YWxCb3R0b21Cb3hlc0hlaWdodCArPSBib3guaGVpZ2h0O1xuXHRcdH0pO1xuXG5cdFx0ZnVuY3Rpb24gZmluYWxGaXRWZXJ0aWNhbEJveChib3gpIHtcblx0XHRcdHZhciBtaW5Cb3hTaXplID0gaGVscGVycy5maW5kTmV4dFdoZXJlKG1pbkJveFNpemVzLCBmdW5jdGlvbihtaW5TaXplKSB7XG5cdFx0XHRcdHJldHVybiBtaW5TaXplLmJveCA9PT0gYm94O1xuXHRcdFx0fSk7XG5cblx0XHRcdHZhciBzY2FsZU1hcmdpbiA9IHtcblx0XHRcdFx0bGVmdDogMCxcblx0XHRcdFx0cmlnaHQ6IDAsXG5cdFx0XHRcdHRvcDogdG90YWxUb3BCb3hlc0hlaWdodCxcblx0XHRcdFx0Ym90dG9tOiB0b3RhbEJvdHRvbUJveGVzSGVpZ2h0XG5cdFx0XHR9O1xuXG5cdFx0XHRpZiAobWluQm94U2l6ZSkge1xuXHRcdFx0XHRib3gudXBkYXRlKG1pbkJveFNpemUubWluU2l6ZS53aWR0aCwgbWF4Q2hhcnRBcmVhSGVpZ2h0LCBzY2FsZU1hcmdpbik7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gTGV0IHRoZSBsZWZ0IGxheW91dCBrbm93IHRoZSBmaW5hbCBtYXJnaW5cblx0XHRoZWxwZXJzLmVhY2gobGVmdEJveGVzLmNvbmNhdChyaWdodEJveGVzKSwgZmluYWxGaXRWZXJ0aWNhbEJveCk7XG5cblx0XHQvLyBSZWNhbGN1bGF0ZSBiZWNhdXNlIHRoZSBzaXplIG9mIGVhY2ggbGF5b3V0IG1pZ2h0IGhhdmUgY2hhbmdlZCBzbGlnaHRseSBkdWUgdG8gdGhlIG1hcmdpbnMgKGxhYmVsIHJvdGF0aW9uIGZvciBpbnN0YW5jZSlcblx0XHR0b3RhbExlZnRCb3hlc1dpZHRoID0gbGVmdFBhZGRpbmc7XG5cdFx0dG90YWxSaWdodEJveGVzV2lkdGggPSByaWdodFBhZGRpbmc7XG5cdFx0dG90YWxUb3BCb3hlc0hlaWdodCA9IHRvcFBhZGRpbmc7XG5cdFx0dG90YWxCb3R0b21Cb3hlc0hlaWdodCA9IGJvdHRvbVBhZGRpbmc7XG5cblx0XHRoZWxwZXJzLmVhY2gobGVmdEJveGVzLCBmdW5jdGlvbihib3gpIHtcblx0XHRcdHRvdGFsTGVmdEJveGVzV2lkdGggKz0gYm94LndpZHRoO1xuXHRcdH0pO1xuXG5cdFx0aGVscGVycy5lYWNoKHJpZ2h0Qm94ZXMsIGZ1bmN0aW9uKGJveCkge1xuXHRcdFx0dG90YWxSaWdodEJveGVzV2lkdGggKz0gYm94LndpZHRoO1xuXHRcdH0pO1xuXG5cdFx0aGVscGVycy5lYWNoKHRvcEJveGVzLCBmdW5jdGlvbihib3gpIHtcblx0XHRcdHRvdGFsVG9wQm94ZXNIZWlnaHQgKz0gYm94LmhlaWdodDtcblx0XHR9KTtcblx0XHRoZWxwZXJzLmVhY2goYm90dG9tQm94ZXMsIGZ1bmN0aW9uKGJveCkge1xuXHRcdFx0dG90YWxCb3R0b21Cb3hlc0hlaWdodCArPSBib3guaGVpZ2h0O1xuXHRcdH0pO1xuXG5cdFx0Ly8gV2UgbWF5IGJlIGFkZGluZyBzb21lIHBhZGRpbmcgdG8gYWNjb3VudCBmb3Igcm90YXRlZCB4IGF4aXMgbGFiZWxzXG5cdFx0dmFyIGxlZnRQYWRkaW5nQWRkaXRpb24gPSBNYXRoLm1heChtYXhIb3Jpem9udGFsTGVmdFBhZGRpbmcgLSB0b3RhbExlZnRCb3hlc1dpZHRoLCAwKTtcblx0XHR0b3RhbExlZnRCb3hlc1dpZHRoICs9IGxlZnRQYWRkaW5nQWRkaXRpb247XG5cdFx0dG90YWxSaWdodEJveGVzV2lkdGggKz0gTWF0aC5tYXgobWF4SG9yaXpvbnRhbFJpZ2h0UGFkZGluZyAtIHRvdGFsUmlnaHRCb3hlc1dpZHRoLCAwKTtcblxuXHRcdHZhciB0b3BQYWRkaW5nQWRkaXRpb24gPSBNYXRoLm1heChtYXhWZXJ0aWNhbFRvcFBhZGRpbmcgLSB0b3RhbFRvcEJveGVzSGVpZ2h0LCAwKTtcblx0XHR0b3RhbFRvcEJveGVzSGVpZ2h0ICs9IHRvcFBhZGRpbmdBZGRpdGlvbjtcblx0XHR0b3RhbEJvdHRvbUJveGVzSGVpZ2h0ICs9IE1hdGgubWF4KG1heFZlcnRpY2FsQm90dG9tUGFkZGluZyAtIHRvdGFsQm90dG9tQm94ZXNIZWlnaHQsIDApO1xuXG5cdFx0Ly8gRmlndXJlIG91dCBpZiBvdXIgY2hhcnQgYXJlYSBjaGFuZ2VkLiBUaGlzIHdvdWxkIG9jY3VyIGlmIHRoZSBkYXRhc2V0IGxheW91dCBsYWJlbCByb3RhdGlvblxuXHRcdC8vIGNoYW5nZWQgZHVlIHRvIHRoZSBhcHBsaWNhdGlvbiBvZiB0aGUgbWFyZ2lucyBpbiBzdGVwIDYuIFNpbmNlIHdlIGNhbiBvbmx5IGdldCBiaWdnZXIsIHRoaXMgaXMgc2FmZSB0byBkb1xuXHRcdC8vIHdpdGhvdXQgY2FsbGluZyBgZml0YCBhZ2FpblxuXHRcdHZhciBuZXdNYXhDaGFydEFyZWFIZWlnaHQgPSBoZWlnaHQgLSB0b3RhbFRvcEJveGVzSGVpZ2h0IC0gdG90YWxCb3R0b21Cb3hlc0hlaWdodDtcblx0XHR2YXIgbmV3TWF4Q2hhcnRBcmVhV2lkdGggPSB3aWR0aCAtIHRvdGFsTGVmdEJveGVzV2lkdGggLSB0b3RhbFJpZ2h0Qm94ZXNXaWR0aDtcblxuXHRcdGlmIChuZXdNYXhDaGFydEFyZWFXaWR0aCAhPT0gbWF4Q2hhcnRBcmVhV2lkdGggfHwgbmV3TWF4Q2hhcnRBcmVhSGVpZ2h0ICE9PSBtYXhDaGFydEFyZWFIZWlnaHQpIHtcblx0XHRcdGhlbHBlcnMuZWFjaChsZWZ0Qm94ZXMsIGZ1bmN0aW9uKGJveCkge1xuXHRcdFx0XHRib3guaGVpZ2h0ID0gbmV3TWF4Q2hhcnRBcmVhSGVpZ2h0O1xuXHRcdFx0fSk7XG5cblx0XHRcdGhlbHBlcnMuZWFjaChyaWdodEJveGVzLCBmdW5jdGlvbihib3gpIHtcblx0XHRcdFx0Ym94LmhlaWdodCA9IG5ld01heENoYXJ0QXJlYUhlaWdodDtcblx0XHRcdH0pO1xuXG5cdFx0XHRoZWxwZXJzLmVhY2godG9wQm94ZXMsIGZ1bmN0aW9uKGJveCkge1xuXHRcdFx0XHRpZiAoIWJveC5mdWxsV2lkdGgpIHtcblx0XHRcdFx0XHRib3gud2lkdGggPSBuZXdNYXhDaGFydEFyZWFXaWR0aDtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdGhlbHBlcnMuZWFjaChib3R0b21Cb3hlcywgZnVuY3Rpb24oYm94KSB7XG5cdFx0XHRcdGlmICghYm94LmZ1bGxXaWR0aCkge1xuXHRcdFx0XHRcdGJveC53aWR0aCA9IG5ld01heENoYXJ0QXJlYVdpZHRoO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0bWF4Q2hhcnRBcmVhSGVpZ2h0ID0gbmV3TWF4Q2hhcnRBcmVhSGVpZ2h0O1xuXHRcdFx0bWF4Q2hhcnRBcmVhV2lkdGggPSBuZXdNYXhDaGFydEFyZWFXaWR0aDtcblx0XHR9XG5cblx0XHQvLyBTdGVwIDcgLSBQb3NpdGlvbiB0aGUgYm94ZXNcblx0XHR2YXIgbGVmdCA9IGxlZnRQYWRkaW5nICsgbGVmdFBhZGRpbmdBZGRpdGlvbjtcblx0XHR2YXIgdG9wID0gdG9wUGFkZGluZyArIHRvcFBhZGRpbmdBZGRpdGlvbjtcblxuXHRcdGZ1bmN0aW9uIHBsYWNlQm94KGJveCkge1xuXHRcdFx0aWYgKGJveC5pc0hvcml6b250YWwoKSkge1xuXHRcdFx0XHRib3gubGVmdCA9IGJveC5mdWxsV2lkdGggPyBsZWZ0UGFkZGluZyA6IHRvdGFsTGVmdEJveGVzV2lkdGg7XG5cdFx0XHRcdGJveC5yaWdodCA9IGJveC5mdWxsV2lkdGggPyB3aWR0aCAtIHJpZ2h0UGFkZGluZyA6IHRvdGFsTGVmdEJveGVzV2lkdGggKyBtYXhDaGFydEFyZWFXaWR0aDtcblx0XHRcdFx0Ym94LnRvcCA9IHRvcDtcblx0XHRcdFx0Ym94LmJvdHRvbSA9IHRvcCArIGJveC5oZWlnaHQ7XG5cblx0XHRcdFx0Ly8gTW92ZSB0byBuZXh0IHBvaW50XG5cdFx0XHRcdHRvcCA9IGJveC5ib3R0b207XG5cblx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0Ym94LmxlZnQgPSBsZWZ0O1xuXHRcdFx0XHRib3gucmlnaHQgPSBsZWZ0ICsgYm94LndpZHRoO1xuXHRcdFx0XHRib3gudG9wID0gdG90YWxUb3BCb3hlc0hlaWdodDtcblx0XHRcdFx0Ym94LmJvdHRvbSA9IHRvdGFsVG9wQm94ZXNIZWlnaHQgKyBtYXhDaGFydEFyZWFIZWlnaHQ7XG5cblx0XHRcdFx0Ly8gTW92ZSB0byBuZXh0IHBvaW50XG5cdFx0XHRcdGxlZnQgPSBib3gucmlnaHQ7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aGVscGVycy5lYWNoKGxlZnRCb3hlcy5jb25jYXQodG9wQm94ZXMpLCBwbGFjZUJveCk7XG5cblx0XHQvLyBBY2NvdW50IGZvciBjaGFydCB3aWR0aCBhbmQgaGVpZ2h0XG5cdFx0bGVmdCArPSBtYXhDaGFydEFyZWFXaWR0aDtcblx0XHR0b3AgKz0gbWF4Q2hhcnRBcmVhSGVpZ2h0O1xuXG5cdFx0aGVscGVycy5lYWNoKHJpZ2h0Qm94ZXMsIHBsYWNlQm94KTtcblx0XHRoZWxwZXJzLmVhY2goYm90dG9tQm94ZXMsIHBsYWNlQm94KTtcblxuXHRcdC8vIFN0ZXAgOFxuXHRcdGNoYXJ0LmNoYXJ0QXJlYSA9IHtcblx0XHRcdGxlZnQ6IHRvdGFsTGVmdEJveGVzV2lkdGgsXG5cdFx0XHR0b3A6IHRvdGFsVG9wQm94ZXNIZWlnaHQsXG5cdFx0XHRyaWdodDogdG90YWxMZWZ0Qm94ZXNXaWR0aCArIG1heENoYXJ0QXJlYVdpZHRoLFxuXHRcdFx0Ym90dG9tOiB0b3RhbFRvcEJveGVzSGVpZ2h0ICsgbWF4Q2hhcnRBcmVhSGVpZ2h0XG5cdFx0fTtcblxuXHRcdC8vIFN0ZXAgOVxuXHRcdGhlbHBlcnMuZWFjaChjaGFydEFyZWFCb3hlcywgZnVuY3Rpb24oYm94KSB7XG5cdFx0XHRib3gubGVmdCA9IGNoYXJ0LmNoYXJ0QXJlYS5sZWZ0O1xuXHRcdFx0Ym94LnRvcCA9IGNoYXJ0LmNoYXJ0QXJlYS50b3A7XG5cdFx0XHRib3gucmlnaHQgPSBjaGFydC5jaGFydEFyZWEucmlnaHQ7XG5cdFx0XHRib3guYm90dG9tID0gY2hhcnQuY2hhcnRBcmVhLmJvdHRvbTtcblxuXHRcdFx0Ym94LnVwZGF0ZShtYXhDaGFydEFyZWFXaWR0aCwgbWF4Q2hhcnRBcmVhSGVpZ2h0KTtcblx0XHR9KTtcblx0fVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9jb3JlLmRlZmF1bHRzJyk7XG52YXIgaGVscGVycyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaW5kZXgnKTtcbnZhciBsYXlvdXRzID0gcmVxdWlyZSgnLi9jb3JlLmxheW91dHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdC8vIFNjYWxlIHJlZ2lzdHJhdGlvbiBvYmplY3QuIEV4dGVuc2lvbnMgY2FuIHJlZ2lzdGVyIG5ldyBzY2FsZSB0eXBlcyAoc3VjaCBhcyBsb2cgb3IgREIgc2NhbGVzKSBhbmQgdGhlblxuXHQvLyB1c2UgdGhlIG5ldyBjaGFydCBvcHRpb25zIHRvIGdyYWIgdGhlIGNvcnJlY3Qgc2NhbGVcblx0Y29uc3RydWN0b3JzOiB7fSxcblx0Ly8gVXNlIGEgcmVnaXN0cmF0aW9uIGZ1bmN0aW9uIHNvIHRoYXQgd2UgY2FuIG1vdmUgdG8gYW4gRVM2IG1hcCB3aGVuIHdlIG5vIGxvbmdlciBuZWVkIHRvIHN1cHBvcnRcblx0Ly8gb2xkIGJyb3dzZXJzXG5cblx0Ly8gU2NhbGUgY29uZmlnIGRlZmF1bHRzXG5cdGRlZmF1bHRzOiB7fSxcblx0cmVnaXN0ZXJTY2FsZVR5cGU6IGZ1bmN0aW9uKHR5cGUsIHNjYWxlQ29uc3RydWN0b3IsIHNjYWxlRGVmYXVsdHMpIHtcblx0XHR0aGlzLmNvbnN0cnVjdG9yc1t0eXBlXSA9IHNjYWxlQ29uc3RydWN0b3I7XG5cdFx0dGhpcy5kZWZhdWx0c1t0eXBlXSA9IGhlbHBlcnMuY2xvbmUoc2NhbGVEZWZhdWx0cyk7XG5cdH0sXG5cdGdldFNjYWxlQ29uc3RydWN0b3I6IGZ1bmN0aW9uKHR5cGUpIHtcblx0XHRyZXR1cm4gdGhpcy5jb25zdHJ1Y3RvcnMuaGFzT3duUHJvcGVydHkodHlwZSkgPyB0aGlzLmNvbnN0cnVjdG9yc1t0eXBlXSA6IHVuZGVmaW5lZDtcblx0fSxcblx0Z2V0U2NhbGVEZWZhdWx0czogZnVuY3Rpb24odHlwZSkge1xuXHRcdC8vIFJldHVybiB0aGUgc2NhbGUgZGVmYXVsdHMgbWVyZ2VkIHdpdGggdGhlIGdsb2JhbCBzZXR0aW5ncyBzbyB0aGF0IHdlIGFsd2F5cyB1c2UgdGhlIGxhdGVzdCBvbmVzXG5cdFx0cmV0dXJuIHRoaXMuZGVmYXVsdHMuaGFzT3duUHJvcGVydHkodHlwZSkgPyBoZWxwZXJzLm1lcmdlKHt9LCBbZGVmYXVsdHMuc2NhbGUsIHRoaXMuZGVmYXVsdHNbdHlwZV1dKSA6IHt9O1xuXHR9LFxuXHR1cGRhdGVTY2FsZURlZmF1bHRzOiBmdW5jdGlvbih0eXBlLCBhZGRpdGlvbnMpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdGlmIChtZS5kZWZhdWx0cy5oYXNPd25Qcm9wZXJ0eSh0eXBlKSkge1xuXHRcdFx0bWUuZGVmYXVsdHNbdHlwZV0gPSBoZWxwZXJzLmV4dGVuZChtZS5kZWZhdWx0c1t0eXBlXSwgYWRkaXRpb25zKTtcblx0XHR9XG5cdH0sXG5cdGFkZFNjYWxlc1RvTGF5b3V0OiBmdW5jdGlvbihjaGFydCkge1xuXHRcdC8vIEFkZHMgZWFjaCBzY2FsZSB0byB0aGUgY2hhcnQuYm94ZXMgYXJyYXkgdG8gYmUgc2l6ZWQgYWNjb3JkaW5nbHlcblx0XHRoZWxwZXJzLmVhY2goY2hhcnQuc2NhbGVzLCBmdW5jdGlvbihzY2FsZSkge1xuXHRcdFx0Ly8gU2V0IElMYXlvdXRJdGVtIHBhcmFtZXRlcnMgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5cdFx0XHRzY2FsZS5mdWxsV2lkdGggPSBzY2FsZS5vcHRpb25zLmZ1bGxXaWR0aDtcblx0XHRcdHNjYWxlLnBvc2l0aW9uID0gc2NhbGUub3B0aW9ucy5wb3NpdGlvbjtcblx0XHRcdHNjYWxlLndlaWdodCA9IHNjYWxlLm9wdGlvbnMud2VpZ2h0O1xuXHRcdFx0bGF5b3V0cy5hZGRCb3goY2hhcnQsIHNjYWxlKTtcblx0XHR9KTtcblx0fVxufTtcbiIsIi8qIGdsb2JhbCB3aW5kb3c6IGZhbHNlICovXG4vKiBnbG9iYWwgZG9jdW1lbnQ6IGZhbHNlICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBjb2xvciA9IHJlcXVpcmUoJ2NoYXJ0anMtY29sb3InKTtcbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vY29yZS5kZWZhdWx0cycpO1xudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2luZGV4Jyk7XG52YXIgc2NhbGVTZXJ2aWNlID0gcmVxdWlyZSgnLi4vY29yZS9jb3JlLnNjYWxlU2VydmljZScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuXG5cdC8vIC0tIEJhc2ljIGpzIHV0aWxpdHkgbWV0aG9kc1xuXG5cdGhlbHBlcnMuY29uZmlnTWVyZ2UgPSBmdW5jdGlvbigvKiBvYmplY3RzIC4uLiAqLykge1xuXHRcdHJldHVybiBoZWxwZXJzLm1lcmdlKGhlbHBlcnMuY2xvbmUoYXJndW1lbnRzWzBdKSwgW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLCB7XG5cdFx0XHRtZXJnZXI6IGZ1bmN0aW9uKGtleSwgdGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcblx0XHRcdFx0dmFyIHR2YWwgPSB0YXJnZXRba2V5XSB8fCB7fTtcblx0XHRcdFx0dmFyIHN2YWwgPSBzb3VyY2Vba2V5XTtcblxuXHRcdFx0XHRpZiAoa2V5ID09PSAnc2NhbGVzJykge1xuXHRcdFx0XHRcdC8vIHNjYWxlIGNvbmZpZyBtZXJnaW5nIGlzIGNvbXBsZXguIEFkZCBvdXIgb3duIGZ1bmN0aW9uIGhlcmUgZm9yIHRoYXRcblx0XHRcdFx0XHR0YXJnZXRba2V5XSA9IGhlbHBlcnMuc2NhbGVNZXJnZSh0dmFsLCBzdmFsKTtcblx0XHRcdFx0fSBlbHNlIGlmIChrZXkgPT09ICdzY2FsZScpIHtcblx0XHRcdFx0XHQvLyB1c2VkIGluIHBvbGFyIGFyZWEgJiByYWRhciBjaGFydHMgc2luY2UgdGhlcmUgaXMgb25seSBvbmUgc2NhbGVcblx0XHRcdFx0XHR0YXJnZXRba2V5XSA9IGhlbHBlcnMubWVyZ2UodHZhbCwgW3NjYWxlU2VydmljZS5nZXRTY2FsZURlZmF1bHRzKHN2YWwudHlwZSksIHN2YWxdKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRoZWxwZXJzLl9tZXJnZXIoa2V5LCB0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucyk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9KTtcblx0fTtcblxuXHRoZWxwZXJzLnNjYWxlTWVyZ2UgPSBmdW5jdGlvbigvKiBvYmplY3RzIC4uLiAqLykge1xuXHRcdHJldHVybiBoZWxwZXJzLm1lcmdlKGhlbHBlcnMuY2xvbmUoYXJndW1lbnRzWzBdKSwgW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDEpLCB7XG5cdFx0XHRtZXJnZXI6IGZ1bmN0aW9uKGtleSwgdGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcblx0XHRcdFx0aWYgKGtleSA9PT0gJ3hBeGVzJyB8fCBrZXkgPT09ICd5QXhlcycpIHtcblx0XHRcdFx0XHR2YXIgc2xlbiA9IHNvdXJjZVtrZXldLmxlbmd0aDtcblx0XHRcdFx0XHR2YXIgaSwgdHlwZSwgc2NhbGU7XG5cblx0XHRcdFx0XHRpZiAoIXRhcmdldFtrZXldKSB7XG5cdFx0XHRcdFx0XHR0YXJnZXRba2V5XSA9IFtdO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBzbGVuOyArK2kpIHtcblx0XHRcdFx0XHRcdHNjYWxlID0gc291cmNlW2tleV1baV07XG5cdFx0XHRcdFx0XHR0eXBlID0gaGVscGVycy52YWx1ZU9yRGVmYXVsdChzY2FsZS50eXBlLCBrZXkgPT09ICd4QXhlcycgPyAnY2F0ZWdvcnknIDogJ2xpbmVhcicpO1xuXG5cdFx0XHRcdFx0XHRpZiAoaSA+PSB0YXJnZXRba2V5XS5sZW5ndGgpIHtcblx0XHRcdFx0XHRcdFx0dGFyZ2V0W2tleV0ucHVzaCh7fSk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdGlmICghdGFyZ2V0W2tleV1baV0udHlwZSB8fCAoc2NhbGUudHlwZSAmJiBzY2FsZS50eXBlICE9PSB0YXJnZXRba2V5XVtpXS50eXBlKSkge1xuXHRcdFx0XHRcdFx0XHQvLyBuZXcvdW50eXBlZCBzY2FsZSBvciB0eXBlIGNoYW5nZWQ6IGxldCdzIGFwcGx5IHRoZSBuZXcgZGVmYXVsdHNcblx0XHRcdFx0XHRcdFx0Ly8gdGhlbiBtZXJnZSBzb3VyY2Ugc2NhbGUgdG8gY29ycmVjdGx5IG92ZXJ3cml0ZSB0aGUgZGVmYXVsdHMuXG5cdFx0XHRcdFx0XHRcdGhlbHBlcnMubWVyZ2UodGFyZ2V0W2tleV1baV0sIFtzY2FsZVNlcnZpY2UuZ2V0U2NhbGVEZWZhdWx0cyh0eXBlKSwgc2NhbGVdKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIHNjYWxlcyB0eXBlIGFyZSB0aGUgc2FtZVxuXHRcdFx0XHRcdFx0XHRoZWxwZXJzLm1lcmdlKHRhcmdldFtrZXldW2ldLCBzY2FsZSk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGhlbHBlcnMuX21lcmdlcihrZXksIHRhcmdldCwgc291cmNlLCBvcHRpb25zKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9O1xuXG5cdGhlbHBlcnMud2hlcmUgPSBmdW5jdGlvbihjb2xsZWN0aW9uLCBmaWx0ZXJDYWxsYmFjaykge1xuXHRcdGlmIChoZWxwZXJzLmlzQXJyYXkoY29sbGVjdGlvbikgJiYgQXJyYXkucHJvdG90eXBlLmZpbHRlcikge1xuXHRcdFx0cmV0dXJuIGNvbGxlY3Rpb24uZmlsdGVyKGZpbHRlckNhbGxiYWNrKTtcblx0XHR9XG5cdFx0dmFyIGZpbHRlcmVkID0gW107XG5cblx0XHRoZWxwZXJzLmVhY2goY29sbGVjdGlvbiwgZnVuY3Rpb24oaXRlbSkge1xuXHRcdFx0aWYgKGZpbHRlckNhbGxiYWNrKGl0ZW0pKSB7XG5cdFx0XHRcdGZpbHRlcmVkLnB1c2goaXRlbSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gZmlsdGVyZWQ7XG5cdH07XG5cdGhlbHBlcnMuZmluZEluZGV4ID0gQXJyYXkucHJvdG90eXBlLmZpbmRJbmRleCA/XG5cdFx0ZnVuY3Rpb24oYXJyYXksIGNhbGxiYWNrLCBzY29wZSkge1xuXHRcdFx0cmV0dXJuIGFycmF5LmZpbmRJbmRleChjYWxsYmFjaywgc2NvcGUpO1xuXHRcdH0gOlxuXHRcdGZ1bmN0aW9uKGFycmF5LCBjYWxsYmFjaywgc2NvcGUpIHtcblx0XHRcdHNjb3BlID0gc2NvcGUgPT09IHVuZGVmaW5lZCA/IGFycmF5IDogc2NvcGU7XG5cdFx0XHRmb3IgKHZhciBpID0gMCwgaWxlbiA9IGFycmF5Lmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0XHRpZiAoY2FsbGJhY2suY2FsbChzY29wZSwgYXJyYXlbaV0sIGksIGFycmF5KSkge1xuXHRcdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gLTE7XG5cdFx0fTtcblx0aGVscGVycy5maW5kTmV4dFdoZXJlID0gZnVuY3Rpb24oYXJyYXlUb1NlYXJjaCwgZmlsdGVyQ2FsbGJhY2ssIHN0YXJ0SW5kZXgpIHtcblx0XHQvLyBEZWZhdWx0IHRvIHN0YXJ0IG9mIHRoZSBhcnJheVxuXHRcdGlmIChoZWxwZXJzLmlzTnVsbE9yVW5kZWYoc3RhcnRJbmRleCkpIHtcblx0XHRcdHN0YXJ0SW5kZXggPSAtMTtcblx0XHR9XG5cdFx0Zm9yICh2YXIgaSA9IHN0YXJ0SW5kZXggKyAxOyBpIDwgYXJyYXlUb1NlYXJjaC5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGN1cnJlbnRJdGVtID0gYXJyYXlUb1NlYXJjaFtpXTtcblx0XHRcdGlmIChmaWx0ZXJDYWxsYmFjayhjdXJyZW50SXRlbSkpIHtcblx0XHRcdFx0cmV0dXJuIGN1cnJlbnRJdGVtO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcblx0aGVscGVycy5maW5kUHJldmlvdXNXaGVyZSA9IGZ1bmN0aW9uKGFycmF5VG9TZWFyY2gsIGZpbHRlckNhbGxiYWNrLCBzdGFydEluZGV4KSB7XG5cdFx0Ly8gRGVmYXVsdCB0byBlbmQgb2YgdGhlIGFycmF5XG5cdFx0aWYgKGhlbHBlcnMuaXNOdWxsT3JVbmRlZihzdGFydEluZGV4KSkge1xuXHRcdFx0c3RhcnRJbmRleCA9IGFycmF5VG9TZWFyY2gubGVuZ3RoO1xuXHRcdH1cblx0XHRmb3IgKHZhciBpID0gc3RhcnRJbmRleCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHR2YXIgY3VycmVudEl0ZW0gPSBhcnJheVRvU2VhcmNoW2ldO1xuXHRcdFx0aWYgKGZpbHRlckNhbGxiYWNrKGN1cnJlbnRJdGVtKSkge1xuXHRcdFx0XHRyZXR1cm4gY3VycmVudEl0ZW07XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXG5cdC8vIC0tIE1hdGggbWV0aG9kc1xuXHRoZWxwZXJzLmlzTnVtYmVyID0gZnVuY3Rpb24obikge1xuXHRcdHJldHVybiAhaXNOYU4ocGFyc2VGbG9hdChuKSkgJiYgaXNGaW5pdGUobik7XG5cdH07XG5cdGhlbHBlcnMuYWxtb3N0RXF1YWxzID0gZnVuY3Rpb24oeCwgeSwgZXBzaWxvbikge1xuXHRcdHJldHVybiBNYXRoLmFicyh4IC0geSkgPCBlcHNpbG9uO1xuXHR9O1xuXHRoZWxwZXJzLmFsbW9zdFdob2xlID0gZnVuY3Rpb24oeCwgZXBzaWxvbikge1xuXHRcdHZhciByb3VuZGVkID0gTWF0aC5yb3VuZCh4KTtcblx0XHRyZXR1cm4gKCgocm91bmRlZCAtIGVwc2lsb24pIDwgeCkgJiYgKChyb3VuZGVkICsgZXBzaWxvbikgPiB4KSk7XG5cdH07XG5cdGhlbHBlcnMubWF4ID0gZnVuY3Rpb24oYXJyYXkpIHtcblx0XHRyZXR1cm4gYXJyYXkucmVkdWNlKGZ1bmN0aW9uKG1heCwgdmFsdWUpIHtcblx0XHRcdGlmICghaXNOYU4odmFsdWUpKSB7XG5cdFx0XHRcdHJldHVybiBNYXRoLm1heChtYXgsIHZhbHVlKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXg7XG5cdFx0fSwgTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZKTtcblx0fTtcblx0aGVscGVycy5taW4gPSBmdW5jdGlvbihhcnJheSkge1xuXHRcdHJldHVybiBhcnJheS5yZWR1Y2UoZnVuY3Rpb24obWluLCB2YWx1ZSkge1xuXHRcdFx0aWYgKCFpc05hTih2YWx1ZSkpIHtcblx0XHRcdFx0cmV0dXJuIE1hdGgubWluKG1pbiwgdmFsdWUpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1pbjtcblx0XHR9LCBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkpO1xuXHR9O1xuXHRoZWxwZXJzLnNpZ24gPSBNYXRoLnNpZ24gP1xuXHRcdGZ1bmN0aW9uKHgpIHtcblx0XHRcdHJldHVybiBNYXRoLnNpZ24oeCk7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oeCkge1xuXHRcdFx0eCA9ICt4OyAvLyBjb252ZXJ0IHRvIGEgbnVtYmVyXG5cdFx0XHRpZiAoeCA9PT0gMCB8fCBpc05hTih4KSkge1xuXHRcdFx0XHRyZXR1cm4geDtcblx0XHRcdH1cblx0XHRcdHJldHVybiB4ID4gMCA/IDEgOiAtMTtcblx0XHR9O1xuXHRoZWxwZXJzLmxvZzEwID0gTWF0aC5sb2cxMCA/XG5cdFx0ZnVuY3Rpb24oeCkge1xuXHRcdFx0cmV0dXJuIE1hdGgubG9nMTAoeCk7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24oeCkge1xuXHRcdFx0dmFyIGV4cG9uZW50ID0gTWF0aC5sb2coeCkgKiBNYXRoLkxPRzEwRTsgLy8gTWF0aC5MT0cxMEUgPSAxIC8gTWF0aC5MTjEwLlxuXHRcdFx0Ly8gQ2hlY2sgZm9yIHdob2xlIHBvd2VycyBvZiAxMCxcblx0XHRcdC8vIHdoaWNoIGR1ZSB0byBmbG9hdGluZyBwb2ludCByb3VuZGluZyBlcnJvciBzaG91bGQgYmUgY29ycmVjdGVkLlxuXHRcdFx0dmFyIHBvd2VyT2YxMCA9IE1hdGgucm91bmQoZXhwb25lbnQpO1xuXHRcdFx0dmFyIGlzUG93ZXJPZjEwID0geCA9PT0gTWF0aC5wb3coMTAsIHBvd2VyT2YxMCk7XG5cblx0XHRcdHJldHVybiBpc1Bvd2VyT2YxMCA/IHBvd2VyT2YxMCA6IGV4cG9uZW50O1xuXHRcdH07XG5cdGhlbHBlcnMudG9SYWRpYW5zID0gZnVuY3Rpb24oZGVncmVlcykge1xuXHRcdHJldHVybiBkZWdyZWVzICogKE1hdGguUEkgLyAxODApO1xuXHR9O1xuXHRoZWxwZXJzLnRvRGVncmVlcyA9IGZ1bmN0aW9uKHJhZGlhbnMpIHtcblx0XHRyZXR1cm4gcmFkaWFucyAqICgxODAgLyBNYXRoLlBJKTtcblx0fTtcblx0Ly8gR2V0cyB0aGUgYW5nbGUgZnJvbSB2ZXJ0aWNhbCB1cHJpZ2h0IHRvIHRoZSBwb2ludCBhYm91dCBhIGNlbnRyZS5cblx0aGVscGVycy5nZXRBbmdsZUZyb21Qb2ludCA9IGZ1bmN0aW9uKGNlbnRyZVBvaW50LCBhbmdsZVBvaW50KSB7XG5cdFx0dmFyIGRpc3RhbmNlRnJvbVhDZW50ZXIgPSBhbmdsZVBvaW50LnggLSBjZW50cmVQb2ludC54O1xuXHRcdHZhciBkaXN0YW5jZUZyb21ZQ2VudGVyID0gYW5nbGVQb2ludC55IC0gY2VudHJlUG9pbnQueTtcblx0XHR2YXIgcmFkaWFsRGlzdGFuY2VGcm9tQ2VudGVyID0gTWF0aC5zcXJ0KGRpc3RhbmNlRnJvbVhDZW50ZXIgKiBkaXN0YW5jZUZyb21YQ2VudGVyICsgZGlzdGFuY2VGcm9tWUNlbnRlciAqIGRpc3RhbmNlRnJvbVlDZW50ZXIpO1xuXG5cdFx0dmFyIGFuZ2xlID0gTWF0aC5hdGFuMihkaXN0YW5jZUZyb21ZQ2VudGVyLCBkaXN0YW5jZUZyb21YQ2VudGVyKTtcblxuXHRcdGlmIChhbmdsZSA8ICgtMC41ICogTWF0aC5QSSkpIHtcblx0XHRcdGFuZ2xlICs9IDIuMCAqIE1hdGguUEk7IC8vIG1ha2Ugc3VyZSB0aGUgcmV0dXJuZWQgYW5nbGUgaXMgaW4gdGhlIHJhbmdlIG9mICgtUEkvMiwgM1BJLzJdXG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdGFuZ2xlOiBhbmdsZSxcblx0XHRcdGRpc3RhbmNlOiByYWRpYWxEaXN0YW5jZUZyb21DZW50ZXJcblx0XHR9O1xuXHR9O1xuXHRoZWxwZXJzLmRpc3RhbmNlQmV0d2VlblBvaW50cyA9IGZ1bmN0aW9uKHB0MSwgcHQyKSB7XG5cdFx0cmV0dXJuIE1hdGguc3FydChNYXRoLnBvdyhwdDIueCAtIHB0MS54LCAyKSArIE1hdGgucG93KHB0Mi55IC0gcHQxLnksIDIpKTtcblx0fTtcblx0aGVscGVycy5hbGlhc1BpeGVsID0gZnVuY3Rpb24ocGl4ZWxXaWR0aCkge1xuXHRcdHJldHVybiAocGl4ZWxXaWR0aCAlIDIgPT09IDApID8gMCA6IDAuNTtcblx0fTtcblx0aGVscGVycy5zcGxpbmVDdXJ2ZSA9IGZ1bmN0aW9uKGZpcnN0UG9pbnQsIG1pZGRsZVBvaW50LCBhZnRlclBvaW50LCB0KSB7XG5cdFx0Ly8gUHJvcHMgdG8gUm9iIFNwZW5jZXIgYXQgc2NhbGVkIGlubm92YXRpb24gZm9yIGhpcyBwb3N0IG9uIHNwbGluaW5nIGJldHdlZW4gcG9pbnRzXG5cdFx0Ly8gaHR0cDovL3NjYWxlZGlubm92YXRpb24uY29tL2FuYWx5dGljcy9zcGxpbmVzL2Fib3V0U3BsaW5lcy5odG1sXG5cblx0XHQvLyBUaGlzIGZ1bmN0aW9uIG11c3QgYWxzbyByZXNwZWN0IFwic2tpcHBlZFwiIHBvaW50c1xuXG5cdFx0dmFyIHByZXZpb3VzID0gZmlyc3RQb2ludC5za2lwID8gbWlkZGxlUG9pbnQgOiBmaXJzdFBvaW50O1xuXHRcdHZhciBjdXJyZW50ID0gbWlkZGxlUG9pbnQ7XG5cdFx0dmFyIG5leHQgPSBhZnRlclBvaW50LnNraXAgPyBtaWRkbGVQb2ludCA6IGFmdGVyUG9pbnQ7XG5cblx0XHR2YXIgZDAxID0gTWF0aC5zcXJ0KE1hdGgucG93KGN1cnJlbnQueCAtIHByZXZpb3VzLngsIDIpICsgTWF0aC5wb3coY3VycmVudC55IC0gcHJldmlvdXMueSwgMikpO1xuXHRcdHZhciBkMTIgPSBNYXRoLnNxcnQoTWF0aC5wb3cobmV4dC54IC0gY3VycmVudC54LCAyKSArIE1hdGgucG93KG5leHQueSAtIGN1cnJlbnQueSwgMikpO1xuXG5cdFx0dmFyIHMwMSA9IGQwMSAvIChkMDEgKyBkMTIpO1xuXHRcdHZhciBzMTIgPSBkMTIgLyAoZDAxICsgZDEyKTtcblxuXHRcdC8vIElmIGFsbCBwb2ludHMgYXJlIHRoZSBzYW1lLCBzMDEgJiBzMDIgd2lsbCBiZSBpbmZcblx0XHRzMDEgPSBpc05hTihzMDEpID8gMCA6IHMwMTtcblx0XHRzMTIgPSBpc05hTihzMTIpID8gMCA6IHMxMjtcblxuXHRcdHZhciBmYSA9IHQgKiBzMDE7IC8vIHNjYWxpbmcgZmFjdG9yIGZvciB0cmlhbmdsZSBUYVxuXHRcdHZhciBmYiA9IHQgKiBzMTI7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0cHJldmlvdXM6IHtcblx0XHRcdFx0eDogY3VycmVudC54IC0gZmEgKiAobmV4dC54IC0gcHJldmlvdXMueCksXG5cdFx0XHRcdHk6IGN1cnJlbnQueSAtIGZhICogKG5leHQueSAtIHByZXZpb3VzLnkpXG5cdFx0XHR9LFxuXHRcdFx0bmV4dDoge1xuXHRcdFx0XHR4OiBjdXJyZW50LnggKyBmYiAqIChuZXh0LnggLSBwcmV2aW91cy54KSxcblx0XHRcdFx0eTogY3VycmVudC55ICsgZmIgKiAobmV4dC55IC0gcHJldmlvdXMueSlcblx0XHRcdH1cblx0XHR9O1xuXHR9O1xuXHRoZWxwZXJzLkVQU0lMT04gPSBOdW1iZXIuRVBTSUxPTiB8fCAxZS0xNDtcblx0aGVscGVycy5zcGxpbmVDdXJ2ZU1vbm90b25lID0gZnVuY3Rpb24ocG9pbnRzKSB7XG5cdFx0Ly8gVGhpcyBmdW5jdGlvbiBjYWxjdWxhdGVzIELDqXppZXIgY29udHJvbCBwb2ludHMgaW4gYSBzaW1pbGFyIHdheSB0aGFuIHxzcGxpbmVDdXJ2ZXwsXG5cdFx0Ly8gYnV0IHByZXNlcnZlcyBtb25vdG9uaWNpdHkgb2YgdGhlIHByb3ZpZGVkIGRhdGEgYW5kIGVuc3VyZXMgbm8gbG9jYWwgZXh0cmVtdW1zIGFyZSBhZGRlZFxuXHRcdC8vIGJldHdlZW4gdGhlIGRhdGFzZXQgZGlzY3JldGUgcG9pbnRzIGR1ZSB0byB0aGUgaW50ZXJwb2xhdGlvbi5cblx0XHQvLyBTZWUgOiBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Nb25vdG9uZV9jdWJpY19pbnRlcnBvbGF0aW9uXG5cblx0XHR2YXIgcG9pbnRzV2l0aFRhbmdlbnRzID0gKHBvaW50cyB8fCBbXSkubWFwKGZ1bmN0aW9uKHBvaW50KSB7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRtb2RlbDogcG9pbnQuX21vZGVsLFxuXHRcdFx0XHRkZWx0YUs6IDAsXG5cdFx0XHRcdG1LOiAwXG5cdFx0XHR9O1xuXHRcdH0pO1xuXG5cdFx0Ly8gQ2FsY3VsYXRlIHNsb3BlcyAoZGVsdGFLKSBhbmQgaW5pdGlhbGl6ZSB0YW5nZW50cyAobUspXG5cdFx0dmFyIHBvaW50c0xlbiA9IHBvaW50c1dpdGhUYW5nZW50cy5sZW5ndGg7XG5cdFx0dmFyIGksIHBvaW50QmVmb3JlLCBwb2ludEN1cnJlbnQsIHBvaW50QWZ0ZXI7XG5cdFx0Zm9yIChpID0gMDsgaSA8IHBvaW50c0xlbjsgKytpKSB7XG5cdFx0XHRwb2ludEN1cnJlbnQgPSBwb2ludHNXaXRoVGFuZ2VudHNbaV07XG5cdFx0XHRpZiAocG9pbnRDdXJyZW50Lm1vZGVsLnNraXApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHBvaW50QmVmb3JlID0gaSA+IDAgPyBwb2ludHNXaXRoVGFuZ2VudHNbaSAtIDFdIDogbnVsbDtcblx0XHRcdHBvaW50QWZ0ZXIgPSBpIDwgcG9pbnRzTGVuIC0gMSA/IHBvaW50c1dpdGhUYW5nZW50c1tpICsgMV0gOiBudWxsO1xuXHRcdFx0aWYgKHBvaW50QWZ0ZXIgJiYgIXBvaW50QWZ0ZXIubW9kZWwuc2tpcCkge1xuXHRcdFx0XHR2YXIgc2xvcGVEZWx0YVggPSAocG9pbnRBZnRlci5tb2RlbC54IC0gcG9pbnRDdXJyZW50Lm1vZGVsLngpO1xuXG5cdFx0XHRcdC8vIEluIHRoZSBjYXNlIG9mIHR3byBwb2ludHMgdGhhdCBhcHBlYXIgYXQgdGhlIHNhbWUgeCBwaXhlbCwgc2xvcGVEZWx0YVggaXMgMFxuXHRcdFx0XHRwb2ludEN1cnJlbnQuZGVsdGFLID0gc2xvcGVEZWx0YVggIT09IDAgPyAocG9pbnRBZnRlci5tb2RlbC55IC0gcG9pbnRDdXJyZW50Lm1vZGVsLnkpIC8gc2xvcGVEZWx0YVggOiAwO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIXBvaW50QmVmb3JlIHx8IHBvaW50QmVmb3JlLm1vZGVsLnNraXApIHtcblx0XHRcdFx0cG9pbnRDdXJyZW50Lm1LID0gcG9pbnRDdXJyZW50LmRlbHRhSztcblx0XHRcdH0gZWxzZSBpZiAoIXBvaW50QWZ0ZXIgfHwgcG9pbnRBZnRlci5tb2RlbC5za2lwKSB7XG5cdFx0XHRcdHBvaW50Q3VycmVudC5tSyA9IHBvaW50QmVmb3JlLmRlbHRhSztcblx0XHRcdH0gZWxzZSBpZiAodGhpcy5zaWduKHBvaW50QmVmb3JlLmRlbHRhSykgIT09IHRoaXMuc2lnbihwb2ludEN1cnJlbnQuZGVsdGFLKSkge1xuXHRcdFx0XHRwb2ludEN1cnJlbnQubUsgPSAwO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cG9pbnRDdXJyZW50Lm1LID0gKHBvaW50QmVmb3JlLmRlbHRhSyArIHBvaW50Q3VycmVudC5kZWx0YUspIC8gMjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBZGp1c3QgdGFuZ2VudHMgdG8gZW5zdXJlIG1vbm90b25pYyBwcm9wZXJ0aWVzXG5cdFx0dmFyIGFscGhhSywgYmV0YUssIHRhdUssIHNxdWFyZWRNYWduaXR1ZGU7XG5cdFx0Zm9yIChpID0gMDsgaSA8IHBvaW50c0xlbiAtIDE7ICsraSkge1xuXHRcdFx0cG9pbnRDdXJyZW50ID0gcG9pbnRzV2l0aFRhbmdlbnRzW2ldO1xuXHRcdFx0cG9pbnRBZnRlciA9IHBvaW50c1dpdGhUYW5nZW50c1tpICsgMV07XG5cdFx0XHRpZiAocG9pbnRDdXJyZW50Lm1vZGVsLnNraXAgfHwgcG9pbnRBZnRlci5tb2RlbC5za2lwKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoaGVscGVycy5hbG1vc3RFcXVhbHMocG9pbnRDdXJyZW50LmRlbHRhSywgMCwgdGhpcy5FUFNJTE9OKSkge1xuXHRcdFx0XHRwb2ludEN1cnJlbnQubUsgPSBwb2ludEFmdGVyLm1LID0gMDtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdGFscGhhSyA9IHBvaW50Q3VycmVudC5tSyAvIHBvaW50Q3VycmVudC5kZWx0YUs7XG5cdFx0XHRiZXRhSyA9IHBvaW50QWZ0ZXIubUsgLyBwb2ludEN1cnJlbnQuZGVsdGFLO1xuXHRcdFx0c3F1YXJlZE1hZ25pdHVkZSA9IE1hdGgucG93KGFscGhhSywgMikgKyBNYXRoLnBvdyhiZXRhSywgMik7XG5cdFx0XHRpZiAoc3F1YXJlZE1hZ25pdHVkZSA8PSA5KSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHR0YXVLID0gMyAvIE1hdGguc3FydChzcXVhcmVkTWFnbml0dWRlKTtcblx0XHRcdHBvaW50Q3VycmVudC5tSyA9IGFscGhhSyAqIHRhdUsgKiBwb2ludEN1cnJlbnQuZGVsdGFLO1xuXHRcdFx0cG9pbnRBZnRlci5tSyA9IGJldGFLICogdGF1SyAqIHBvaW50Q3VycmVudC5kZWx0YUs7XG5cdFx0fVxuXG5cdFx0Ly8gQ29tcHV0ZSBjb250cm9sIHBvaW50c1xuXHRcdHZhciBkZWx0YVg7XG5cdFx0Zm9yIChpID0gMDsgaSA8IHBvaW50c0xlbjsgKytpKSB7XG5cdFx0XHRwb2ludEN1cnJlbnQgPSBwb2ludHNXaXRoVGFuZ2VudHNbaV07XG5cdFx0XHRpZiAocG9pbnRDdXJyZW50Lm1vZGVsLnNraXApIHtcblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdHBvaW50QmVmb3JlID0gaSA+IDAgPyBwb2ludHNXaXRoVGFuZ2VudHNbaSAtIDFdIDogbnVsbDtcblx0XHRcdHBvaW50QWZ0ZXIgPSBpIDwgcG9pbnRzTGVuIC0gMSA/IHBvaW50c1dpdGhUYW5nZW50c1tpICsgMV0gOiBudWxsO1xuXHRcdFx0aWYgKHBvaW50QmVmb3JlICYmICFwb2ludEJlZm9yZS5tb2RlbC5za2lwKSB7XG5cdFx0XHRcdGRlbHRhWCA9IChwb2ludEN1cnJlbnQubW9kZWwueCAtIHBvaW50QmVmb3JlLm1vZGVsLngpIC8gMztcblx0XHRcdFx0cG9pbnRDdXJyZW50Lm1vZGVsLmNvbnRyb2xQb2ludFByZXZpb3VzWCA9IHBvaW50Q3VycmVudC5tb2RlbC54IC0gZGVsdGFYO1xuXHRcdFx0XHRwb2ludEN1cnJlbnQubW9kZWwuY29udHJvbFBvaW50UHJldmlvdXNZID0gcG9pbnRDdXJyZW50Lm1vZGVsLnkgLSBkZWx0YVggKiBwb2ludEN1cnJlbnQubUs7XG5cdFx0XHR9XG5cdFx0XHRpZiAocG9pbnRBZnRlciAmJiAhcG9pbnRBZnRlci5tb2RlbC5za2lwKSB7XG5cdFx0XHRcdGRlbHRhWCA9IChwb2ludEFmdGVyLm1vZGVsLnggLSBwb2ludEN1cnJlbnQubW9kZWwueCkgLyAzO1xuXHRcdFx0XHRwb2ludEN1cnJlbnQubW9kZWwuY29udHJvbFBvaW50TmV4dFggPSBwb2ludEN1cnJlbnQubW9kZWwueCArIGRlbHRhWDtcblx0XHRcdFx0cG9pbnRDdXJyZW50Lm1vZGVsLmNvbnRyb2xQb2ludE5leHRZID0gcG9pbnRDdXJyZW50Lm1vZGVsLnkgKyBkZWx0YVggKiBwb2ludEN1cnJlbnQubUs7XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xuXHRoZWxwZXJzLm5leHRJdGVtID0gZnVuY3Rpb24oY29sbGVjdGlvbiwgaW5kZXgsIGxvb3ApIHtcblx0XHRpZiAobG9vcCkge1xuXHRcdFx0cmV0dXJuIGluZGV4ID49IGNvbGxlY3Rpb24ubGVuZ3RoIC0gMSA/IGNvbGxlY3Rpb25bMF0gOiBjb2xsZWN0aW9uW2luZGV4ICsgMV07XG5cdFx0fVxuXHRcdHJldHVybiBpbmRleCA+PSBjb2xsZWN0aW9uLmxlbmd0aCAtIDEgPyBjb2xsZWN0aW9uW2NvbGxlY3Rpb24ubGVuZ3RoIC0gMV0gOiBjb2xsZWN0aW9uW2luZGV4ICsgMV07XG5cdH07XG5cdGhlbHBlcnMucHJldmlvdXNJdGVtID0gZnVuY3Rpb24oY29sbGVjdGlvbiwgaW5kZXgsIGxvb3ApIHtcblx0XHRpZiAobG9vcCkge1xuXHRcdFx0cmV0dXJuIGluZGV4IDw9IDAgPyBjb2xsZWN0aW9uW2NvbGxlY3Rpb24ubGVuZ3RoIC0gMV0gOiBjb2xsZWN0aW9uW2luZGV4IC0gMV07XG5cdFx0fVxuXHRcdHJldHVybiBpbmRleCA8PSAwID8gY29sbGVjdGlvblswXSA6IGNvbGxlY3Rpb25baW5kZXggLSAxXTtcblx0fTtcblx0Ly8gSW1wbGVtZW50YXRpb24gb2YgdGhlIG5pY2UgbnVtYmVyIGFsZ29yaXRobSB1c2VkIGluIGRldGVybWluaW5nIHdoZXJlIGF4aXMgbGFiZWxzIHdpbGwgZ29cblx0aGVscGVycy5uaWNlTnVtID0gZnVuY3Rpb24ocmFuZ2UsIHJvdW5kKSB7XG5cdFx0dmFyIGV4cG9uZW50ID0gTWF0aC5mbG9vcihoZWxwZXJzLmxvZzEwKHJhbmdlKSk7XG5cdFx0dmFyIGZyYWN0aW9uID0gcmFuZ2UgLyBNYXRoLnBvdygxMCwgZXhwb25lbnQpO1xuXHRcdHZhciBuaWNlRnJhY3Rpb247XG5cblx0XHRpZiAocm91bmQpIHtcblx0XHRcdGlmIChmcmFjdGlvbiA8IDEuNSkge1xuXHRcdFx0XHRuaWNlRnJhY3Rpb24gPSAxO1xuXHRcdFx0fSBlbHNlIGlmIChmcmFjdGlvbiA8IDMpIHtcblx0XHRcdFx0bmljZUZyYWN0aW9uID0gMjtcblx0XHRcdH0gZWxzZSBpZiAoZnJhY3Rpb24gPCA3KSB7XG5cdFx0XHRcdG5pY2VGcmFjdGlvbiA9IDU7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRuaWNlRnJhY3Rpb24gPSAxMDtcblx0XHRcdH1cblx0XHR9IGVsc2UgaWYgKGZyYWN0aW9uIDw9IDEuMCkge1xuXHRcdFx0bmljZUZyYWN0aW9uID0gMTtcblx0XHR9IGVsc2UgaWYgKGZyYWN0aW9uIDw9IDIpIHtcblx0XHRcdG5pY2VGcmFjdGlvbiA9IDI7XG5cdFx0fSBlbHNlIGlmIChmcmFjdGlvbiA8PSA1KSB7XG5cdFx0XHRuaWNlRnJhY3Rpb24gPSA1O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRuaWNlRnJhY3Rpb24gPSAxMDtcblx0XHR9XG5cblx0XHRyZXR1cm4gbmljZUZyYWN0aW9uICogTWF0aC5wb3coMTAsIGV4cG9uZW50KTtcblx0fTtcblx0Ly8gUmVxdWVzdCBhbmltYXRpb24gcG9seWZpbGwgLSBodHRwOi8vd3d3LnBhdWxpcmlzaC5jb20vMjAxMS9yZXF1ZXN0YW5pbWF0aW9uZnJhbWUtZm9yLXNtYXJ0LWFuaW1hdGluZy9cblx0aGVscGVycy5yZXF1ZXN0QW5pbUZyYW1lID0gKGZ1bmN0aW9uKCkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKGNhbGxiYWNrKSB7XG5cdFx0XHRcdGNhbGxiYWNrKCk7XG5cdFx0XHR9O1xuXHRcdH1cblx0XHRyZXR1cm4gd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuXHRcdFx0d2luZG93LndlYmtpdFJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuXHRcdFx0d2luZG93Lm1velJlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuXHRcdFx0d2luZG93Lm9SZXF1ZXN0QW5pbWF0aW9uRnJhbWUgfHxcblx0XHRcdHdpbmRvdy5tc1JlcXVlc3RBbmltYXRpb25GcmFtZSB8fFxuXHRcdFx0ZnVuY3Rpb24oY2FsbGJhY2spIHtcblx0XHRcdFx0cmV0dXJuIHdpbmRvdy5zZXRUaW1lb3V0KGNhbGxiYWNrLCAxMDAwIC8gNjApO1xuXHRcdFx0fTtcblx0fSgpKTtcblx0Ly8gLS0gRE9NIG1ldGhvZHNcblx0aGVscGVycy5nZXRSZWxhdGl2ZVBvc2l0aW9uID0gZnVuY3Rpb24oZXZ0LCBjaGFydCkge1xuXHRcdHZhciBtb3VzZVgsIG1vdXNlWTtcblx0XHR2YXIgZSA9IGV2dC5vcmlnaW5hbEV2ZW50IHx8IGV2dDtcblx0XHR2YXIgY2FudmFzID0gZXZ0LnRhcmdldCB8fCBldnQuc3JjRWxlbWVudDtcblx0XHR2YXIgYm91bmRpbmdSZWN0ID0gY2FudmFzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuXG5cdFx0dmFyIHRvdWNoZXMgPSBlLnRvdWNoZXM7XG5cdFx0aWYgKHRvdWNoZXMgJiYgdG91Y2hlcy5sZW5ndGggPiAwKSB7XG5cdFx0XHRtb3VzZVggPSB0b3VjaGVzWzBdLmNsaWVudFg7XG5cdFx0XHRtb3VzZVkgPSB0b3VjaGVzWzBdLmNsaWVudFk7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0bW91c2VYID0gZS5jbGllbnRYO1xuXHRcdFx0bW91c2VZID0gZS5jbGllbnRZO1xuXHRcdH1cblxuXHRcdC8vIFNjYWxlIG1vdXNlIGNvb3JkaW5hdGVzIGludG8gY2FudmFzIGNvb3JkaW5hdGVzXG5cdFx0Ly8gYnkgZm9sbG93aW5nIHRoZSBwYXR0ZXJuIGxhaWQgb3V0IGJ5ICdqZXJyeWonIGluIHRoZSBjb21tZW50cyBvZlxuXHRcdC8vIGh0dHA6Ly93d3cuaHRtbDVjYW52YXN0dXRvcmlhbHMuY29tL2FkdmFuY2VkL2h0bWw1LWNhbnZhcy1tb3VzZS1jb29yZGluYXRlcy9cblx0XHR2YXIgcGFkZGluZ0xlZnQgPSBwYXJzZUZsb2F0KGhlbHBlcnMuZ2V0U3R5bGUoY2FudmFzLCAncGFkZGluZy1sZWZ0JykpO1xuXHRcdHZhciBwYWRkaW5nVG9wID0gcGFyc2VGbG9hdChoZWxwZXJzLmdldFN0eWxlKGNhbnZhcywgJ3BhZGRpbmctdG9wJykpO1xuXHRcdHZhciBwYWRkaW5nUmlnaHQgPSBwYXJzZUZsb2F0KGhlbHBlcnMuZ2V0U3R5bGUoY2FudmFzLCAncGFkZGluZy1yaWdodCcpKTtcblx0XHR2YXIgcGFkZGluZ0JvdHRvbSA9IHBhcnNlRmxvYXQoaGVscGVycy5nZXRTdHlsZShjYW52YXMsICdwYWRkaW5nLWJvdHRvbScpKTtcblx0XHR2YXIgd2lkdGggPSBib3VuZGluZ1JlY3QucmlnaHQgLSBib3VuZGluZ1JlY3QubGVmdCAtIHBhZGRpbmdMZWZ0IC0gcGFkZGluZ1JpZ2h0O1xuXHRcdHZhciBoZWlnaHQgPSBib3VuZGluZ1JlY3QuYm90dG9tIC0gYm91bmRpbmdSZWN0LnRvcCAtIHBhZGRpbmdUb3AgLSBwYWRkaW5nQm90dG9tO1xuXG5cdFx0Ly8gV2UgZGl2aWRlIGJ5IHRoZSBjdXJyZW50IGRldmljZSBwaXhlbCByYXRpbywgYmVjYXVzZSB0aGUgY2FudmFzIGlzIHNjYWxlZCB1cCBieSB0aGF0IGFtb3VudCBpbiBlYWNoIGRpcmVjdGlvbi4gSG93ZXZlclxuXHRcdC8vIHRoZSBiYWNrZW5kIG1vZGVsIGlzIGluIHVuc2NhbGVkIGNvb3JkaW5hdGVzLiBTaW5jZSB3ZSBhcmUgZ29pbmcgdG8gZGVhbCB3aXRoIG91ciBtb2RlbCBjb29yZGluYXRlcywgd2UgZ28gYmFjayBoZXJlXG5cdFx0bW91c2VYID0gTWF0aC5yb3VuZCgobW91c2VYIC0gYm91bmRpbmdSZWN0LmxlZnQgLSBwYWRkaW5nTGVmdCkgLyAod2lkdGgpICogY2FudmFzLndpZHRoIC8gY2hhcnQuY3VycmVudERldmljZVBpeGVsUmF0aW8pO1xuXHRcdG1vdXNlWSA9IE1hdGgucm91bmQoKG1vdXNlWSAtIGJvdW5kaW5nUmVjdC50b3AgLSBwYWRkaW5nVG9wKSAvIChoZWlnaHQpICogY2FudmFzLmhlaWdodCAvIGNoYXJ0LmN1cnJlbnREZXZpY2VQaXhlbFJhdGlvKTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHR4OiBtb3VzZVgsXG5cdFx0XHR5OiBtb3VzZVlcblx0XHR9O1xuXG5cdH07XG5cblx0Ly8gUHJpdmF0ZSBoZWxwZXIgZnVuY3Rpb24gdG8gY29udmVydCBtYXgtd2lkdGgvbWF4LWhlaWdodCB2YWx1ZXMgdGhhdCBtYXkgYmUgcGVyY2VudGFnZXMgaW50byBhIG51bWJlclxuXHRmdW5jdGlvbiBwYXJzZU1heFN0eWxlKHN0eWxlVmFsdWUsIG5vZGUsIHBhcmVudFByb3BlcnR5KSB7XG5cdFx0dmFyIHZhbHVlSW5QaXhlbHM7XG5cdFx0aWYgKHR5cGVvZiBzdHlsZVZhbHVlID09PSAnc3RyaW5nJykge1xuXHRcdFx0dmFsdWVJblBpeGVscyA9IHBhcnNlSW50KHN0eWxlVmFsdWUsIDEwKTtcblxuXHRcdFx0aWYgKHN0eWxlVmFsdWUuaW5kZXhPZignJScpICE9PSAtMSkge1xuXHRcdFx0XHQvLyBwZXJjZW50YWdlICogc2l6ZSBpbiBkaW1lbnNpb25cblx0XHRcdFx0dmFsdWVJblBpeGVscyA9IHZhbHVlSW5QaXhlbHMgLyAxMDAgKiBub2RlLnBhcmVudE5vZGVbcGFyZW50UHJvcGVydHldO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YWx1ZUluUGl4ZWxzID0gc3R5bGVWYWx1ZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWVJblBpeGVscztcblx0fVxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGlmIHRoZSBnaXZlbiB2YWx1ZSBjb250YWlucyBhbiBlZmZlY3RpdmUgY29uc3RyYWludC5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdGZ1bmN0aW9uIGlzQ29uc3RyYWluZWRWYWx1ZSh2YWx1ZSkge1xuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSAnbm9uZSc7XG5cdH1cblxuXHQvLyBQcml2YXRlIGhlbHBlciB0byBnZXQgYSBjb25zdHJhaW50IGRpbWVuc2lvblxuXHQvLyBAcGFyYW0gZG9tTm9kZSA6IHRoZSBub2RlIHRvIGNoZWNrIHRoZSBjb25zdHJhaW50IG9uXG5cdC8vIEBwYXJhbSBtYXhTdHlsZSA6IHRoZSBzdHlsZSB0aGF0IGRlZmluZXMgdGhlIG1heGltdW0gZm9yIHRoZSBkaXJlY3Rpb24gd2UgYXJlIHVzaW5nIChtYXhXaWR0aCAvIG1heEhlaWdodClcblx0Ly8gQHBhcmFtIHBlcmNlbnRhZ2VQcm9wZXJ0eSA6IHByb3BlcnR5IG9mIHBhcmVudCB0byB1c2Ugd2hlbiBjYWxjdWxhdGluZyB3aWR0aCBhcyBhIHBlcmNlbnRhZ2Vcblx0Ly8gQHNlZSBodHRwOi8vd3d3Lm5hdGhhbmFlbGpvbmVzLmNvbS9ibG9nLzIwMTMvcmVhZGluZy1tYXgtd2lkdGgtY3Jvc3MtYnJvd3NlclxuXHRmdW5jdGlvbiBnZXRDb25zdHJhaW50RGltZW5zaW9uKGRvbU5vZGUsIG1heFN0eWxlLCBwZXJjZW50YWdlUHJvcGVydHkpIHtcblx0XHR2YXIgdmlldyA9IGRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXHRcdHZhciBwYXJlbnROb2RlID0gaGVscGVycy5fZ2V0UGFyZW50Tm9kZShkb21Ob2RlKTtcblx0XHR2YXIgY29uc3RyYWluZWROb2RlID0gdmlldy5nZXRDb21wdXRlZFN0eWxlKGRvbU5vZGUpW21heFN0eWxlXTtcblx0XHR2YXIgY29uc3RyYWluZWRDb250YWluZXIgPSB2aWV3LmdldENvbXB1dGVkU3R5bGUocGFyZW50Tm9kZSlbbWF4U3R5bGVdO1xuXHRcdHZhciBoYXNDTm9kZSA9IGlzQ29uc3RyYWluZWRWYWx1ZShjb25zdHJhaW5lZE5vZGUpO1xuXHRcdHZhciBoYXNDQ29udGFpbmVyID0gaXNDb25zdHJhaW5lZFZhbHVlKGNvbnN0cmFpbmVkQ29udGFpbmVyKTtcblx0XHR2YXIgaW5maW5pdHkgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG5cblx0XHRpZiAoaGFzQ05vZGUgfHwgaGFzQ0NvbnRhaW5lcikge1xuXHRcdFx0cmV0dXJuIE1hdGgubWluKFxuXHRcdFx0XHRoYXNDTm9kZSA/IHBhcnNlTWF4U3R5bGUoY29uc3RyYWluZWROb2RlLCBkb21Ob2RlLCBwZXJjZW50YWdlUHJvcGVydHkpIDogaW5maW5pdHksXG5cdFx0XHRcdGhhc0NDb250YWluZXIgPyBwYXJzZU1heFN0eWxlKGNvbnN0cmFpbmVkQ29udGFpbmVyLCBwYXJlbnROb2RlLCBwZXJjZW50YWdlUHJvcGVydHkpIDogaW5maW5pdHkpO1xuXHRcdH1cblxuXHRcdHJldHVybiAnbm9uZSc7XG5cdH1cblx0Ly8gcmV0dXJucyBOdW1iZXIgb3IgdW5kZWZpbmVkIGlmIG5vIGNvbnN0cmFpbnRcblx0aGVscGVycy5nZXRDb25zdHJhaW50V2lkdGggPSBmdW5jdGlvbihkb21Ob2RlKSB7XG5cdFx0cmV0dXJuIGdldENvbnN0cmFpbnREaW1lbnNpb24oZG9tTm9kZSwgJ21heC13aWR0aCcsICdjbGllbnRXaWR0aCcpO1xuXHR9O1xuXHQvLyByZXR1cm5zIE51bWJlciBvciB1bmRlZmluZWQgaWYgbm8gY29uc3RyYWludFxuXHRoZWxwZXJzLmdldENvbnN0cmFpbnRIZWlnaHQgPSBmdW5jdGlvbihkb21Ob2RlKSB7XG5cdFx0cmV0dXJuIGdldENvbnN0cmFpbnREaW1lbnNpb24oZG9tTm9kZSwgJ21heC1oZWlnaHQnLCAnY2xpZW50SGVpZ2h0Jyk7XG5cdH07XG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuIFx0ICovXG5cdGhlbHBlcnMuX2NhbGN1bGF0ZVBhZGRpbmcgPSBmdW5jdGlvbihjb250YWluZXIsIHBhZGRpbmcsIHBhcmVudERpbWVuc2lvbikge1xuXHRcdHBhZGRpbmcgPSBoZWxwZXJzLmdldFN0eWxlKGNvbnRhaW5lciwgcGFkZGluZyk7XG5cblx0XHRyZXR1cm4gcGFkZGluZy5pbmRleE9mKCclJykgPiAtMSA/IHBhcmVudERpbWVuc2lvbiAvIHBhcnNlSW50KHBhZGRpbmcsIDEwKSA6IHBhcnNlSW50KHBhZGRpbmcsIDEwKTtcblx0fTtcblx0LyoqXG5cdCAqIEBwcml2YXRlXG5cdCAqL1xuXHRoZWxwZXJzLl9nZXRQYXJlbnROb2RlID0gZnVuY3Rpb24oZG9tTm9kZSkge1xuXHRcdHZhciBwYXJlbnQgPSBkb21Ob2RlLnBhcmVudE5vZGU7XG5cdFx0aWYgKHBhcmVudCAmJiBwYXJlbnQuaG9zdCkge1xuXHRcdFx0cGFyZW50ID0gcGFyZW50Lmhvc3Q7XG5cdFx0fVxuXHRcdHJldHVybiBwYXJlbnQ7XG5cdH07XG5cdGhlbHBlcnMuZ2V0TWF4aW11bVdpZHRoID0gZnVuY3Rpb24oZG9tTm9kZSkge1xuXHRcdHZhciBjb250YWluZXIgPSBoZWxwZXJzLl9nZXRQYXJlbnROb2RlKGRvbU5vZGUpO1xuXHRcdGlmICghY29udGFpbmVyKSB7XG5cdFx0XHRyZXR1cm4gZG9tTm9kZS5jbGllbnRXaWR0aDtcblx0XHR9XG5cblx0XHR2YXIgY2xpZW50V2lkdGggPSBjb250YWluZXIuY2xpZW50V2lkdGg7XG5cdFx0dmFyIHBhZGRpbmdMZWZ0ID0gaGVscGVycy5fY2FsY3VsYXRlUGFkZGluZyhjb250YWluZXIsICdwYWRkaW5nLWxlZnQnLCBjbGllbnRXaWR0aCk7XG5cdFx0dmFyIHBhZGRpbmdSaWdodCA9IGhlbHBlcnMuX2NhbGN1bGF0ZVBhZGRpbmcoY29udGFpbmVyLCAncGFkZGluZy1yaWdodCcsIGNsaWVudFdpZHRoKTtcblxuXHRcdHZhciB3ID0gY2xpZW50V2lkdGggLSBwYWRkaW5nTGVmdCAtIHBhZGRpbmdSaWdodDtcblx0XHR2YXIgY3cgPSBoZWxwZXJzLmdldENvbnN0cmFpbnRXaWR0aChkb21Ob2RlKTtcblx0XHRyZXR1cm4gaXNOYU4oY3cpID8gdyA6IE1hdGgubWluKHcsIGN3KTtcblx0fTtcblx0aGVscGVycy5nZXRNYXhpbXVtSGVpZ2h0ID0gZnVuY3Rpb24oZG9tTm9kZSkge1xuXHRcdHZhciBjb250YWluZXIgPSBoZWxwZXJzLl9nZXRQYXJlbnROb2RlKGRvbU5vZGUpO1xuXHRcdGlmICghY29udGFpbmVyKSB7XG5cdFx0XHRyZXR1cm4gZG9tTm9kZS5jbGllbnRIZWlnaHQ7XG5cdFx0fVxuXG5cdFx0dmFyIGNsaWVudEhlaWdodCA9IGNvbnRhaW5lci5jbGllbnRIZWlnaHQ7XG5cdFx0dmFyIHBhZGRpbmdUb3AgPSBoZWxwZXJzLl9jYWxjdWxhdGVQYWRkaW5nKGNvbnRhaW5lciwgJ3BhZGRpbmctdG9wJywgY2xpZW50SGVpZ2h0KTtcblx0XHR2YXIgcGFkZGluZ0JvdHRvbSA9IGhlbHBlcnMuX2NhbGN1bGF0ZVBhZGRpbmcoY29udGFpbmVyLCAncGFkZGluZy1ib3R0b20nLCBjbGllbnRIZWlnaHQpO1xuXG5cdFx0dmFyIGggPSBjbGllbnRIZWlnaHQgLSBwYWRkaW5nVG9wIC0gcGFkZGluZ0JvdHRvbTtcblx0XHR2YXIgY2ggPSBoZWxwZXJzLmdldENvbnN0cmFpbnRIZWlnaHQoZG9tTm9kZSk7XG5cdFx0cmV0dXJuIGlzTmFOKGNoKSA/IGggOiBNYXRoLm1pbihoLCBjaCk7XG5cdH07XG5cdGhlbHBlcnMuZ2V0U3R5bGUgPSBmdW5jdGlvbihlbCwgcHJvcGVydHkpIHtcblx0XHRyZXR1cm4gZWwuY3VycmVudFN0eWxlID9cblx0XHRcdGVsLmN1cnJlbnRTdHlsZVtwcm9wZXJ0eV0gOlxuXHRcdFx0ZG9jdW1lbnQuZGVmYXVsdFZpZXcuZ2V0Q29tcHV0ZWRTdHlsZShlbCwgbnVsbCkuZ2V0UHJvcGVydHlWYWx1ZShwcm9wZXJ0eSk7XG5cdH07XG5cdGhlbHBlcnMucmV0aW5hU2NhbGUgPSBmdW5jdGlvbihjaGFydCwgZm9yY2VSYXRpbykge1xuXHRcdHZhciBwaXhlbFJhdGlvID0gY2hhcnQuY3VycmVudERldmljZVBpeGVsUmF0aW8gPSBmb3JjZVJhdGlvIHx8ICh0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJiB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbykgfHwgMTtcblx0XHRpZiAocGl4ZWxSYXRpbyA9PT0gMSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBjYW52YXMgPSBjaGFydC5jYW52YXM7XG5cdFx0dmFyIGhlaWdodCA9IGNoYXJ0LmhlaWdodDtcblx0XHR2YXIgd2lkdGggPSBjaGFydC53aWR0aDtcblxuXHRcdGNhbnZhcy5oZWlnaHQgPSBoZWlnaHQgKiBwaXhlbFJhdGlvO1xuXHRcdGNhbnZhcy53aWR0aCA9IHdpZHRoICogcGl4ZWxSYXRpbztcblx0XHRjaGFydC5jdHguc2NhbGUocGl4ZWxSYXRpbywgcGl4ZWxSYXRpbyk7XG5cblx0XHQvLyBJZiBubyBzdHlsZSBoYXMgYmVlbiBzZXQgb24gdGhlIGNhbnZhcywgdGhlIHJlbmRlciBzaXplIGlzIHVzZWQgYXMgZGlzcGxheSBzaXplLFxuXHRcdC8vIG1ha2luZyB0aGUgY2hhcnQgdmlzdWFsbHkgYmlnZ2VyLCBzbyBsZXQncyBlbmZvcmNlIGl0IHRvIHRoZSBcImNvcnJlY3RcIiB2YWx1ZXMuXG5cdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy8zNTc1XG5cdFx0aWYgKCFjYW52YXMuc3R5bGUuaGVpZ2h0ICYmICFjYW52YXMuc3R5bGUud2lkdGgpIHtcblx0XHRcdGNhbnZhcy5zdHlsZS5oZWlnaHQgPSBoZWlnaHQgKyAncHgnO1xuXHRcdFx0Y2FudmFzLnN0eWxlLndpZHRoID0gd2lkdGggKyAncHgnO1xuXHRcdH1cblx0fTtcblx0Ly8gLS0gQ2FudmFzIG1ldGhvZHNcblx0aGVscGVycy5mb250U3RyaW5nID0gZnVuY3Rpb24ocGl4ZWxTaXplLCBmb250U3R5bGUsIGZvbnRGYW1pbHkpIHtcblx0XHRyZXR1cm4gZm9udFN0eWxlICsgJyAnICsgcGl4ZWxTaXplICsgJ3B4ICcgKyBmb250RmFtaWx5O1xuXHR9O1xuXHRoZWxwZXJzLmxvbmdlc3RUZXh0ID0gZnVuY3Rpb24oY3R4LCBmb250LCBhcnJheU9mVGhpbmdzLCBjYWNoZSkge1xuXHRcdGNhY2hlID0gY2FjaGUgfHwge307XG5cdFx0dmFyIGRhdGEgPSBjYWNoZS5kYXRhID0gY2FjaGUuZGF0YSB8fCB7fTtcblx0XHR2YXIgZ2MgPSBjYWNoZS5nYXJiYWdlQ29sbGVjdCA9IGNhY2hlLmdhcmJhZ2VDb2xsZWN0IHx8IFtdO1xuXG5cdFx0aWYgKGNhY2hlLmZvbnQgIT09IGZvbnQpIHtcblx0XHRcdGRhdGEgPSBjYWNoZS5kYXRhID0ge307XG5cdFx0XHRnYyA9IGNhY2hlLmdhcmJhZ2VDb2xsZWN0ID0gW107XG5cdFx0XHRjYWNoZS5mb250ID0gZm9udDtcblx0XHR9XG5cblx0XHRjdHguZm9udCA9IGZvbnQ7XG5cdFx0dmFyIGxvbmdlc3QgPSAwO1xuXHRcdGhlbHBlcnMuZWFjaChhcnJheU9mVGhpbmdzLCBmdW5jdGlvbih0aGluZykge1xuXHRcdFx0Ly8gVW5kZWZpbmVkIHN0cmluZ3MgYW5kIGFycmF5cyBzaG91bGQgbm90IGJlIG1lYXN1cmVkXG5cdFx0XHRpZiAodGhpbmcgIT09IHVuZGVmaW5lZCAmJiB0aGluZyAhPT0gbnVsbCAmJiBoZWxwZXJzLmlzQXJyYXkodGhpbmcpICE9PSB0cnVlKSB7XG5cdFx0XHRcdGxvbmdlc3QgPSBoZWxwZXJzLm1lYXN1cmVUZXh0KGN0eCwgZGF0YSwgZ2MsIGxvbmdlc3QsIHRoaW5nKTtcblx0XHRcdH0gZWxzZSBpZiAoaGVscGVycy5pc0FycmF5KHRoaW5nKSkge1xuXHRcdFx0XHQvLyBpZiBpdCBpcyBhbiBhcnJheSBsZXRzIG1lYXN1cmUgZWFjaCBlbGVtZW50XG5cdFx0XHRcdC8vIHRvIGRvIG1heWJlIHNpbXBsaWZ5IHRoaXMgZnVuY3Rpb24gYSBiaXQgc28gd2UgY2FuIGRvIHRoaXMgbW9yZSByZWN1cnNpdmVseT9cblx0XHRcdFx0aGVscGVycy5lYWNoKHRoaW5nLCBmdW5jdGlvbihuZXN0ZWRUaGluZykge1xuXHRcdFx0XHRcdC8vIFVuZGVmaW5lZCBzdHJpbmdzIGFuZCBhcnJheXMgc2hvdWxkIG5vdCBiZSBtZWFzdXJlZFxuXHRcdFx0XHRcdGlmIChuZXN0ZWRUaGluZyAhPT0gdW5kZWZpbmVkICYmIG5lc3RlZFRoaW5nICE9PSBudWxsICYmICFoZWxwZXJzLmlzQXJyYXkobmVzdGVkVGhpbmcpKSB7XG5cdFx0XHRcdFx0XHRsb25nZXN0ID0gaGVscGVycy5tZWFzdXJlVGV4dChjdHgsIGRhdGEsIGdjLCBsb25nZXN0LCBuZXN0ZWRUaGluZyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHZhciBnY0xlbiA9IGdjLmxlbmd0aCAvIDI7XG5cdFx0aWYgKGdjTGVuID4gYXJyYXlPZlRoaW5ncy5sZW5ndGgpIHtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgZ2NMZW47IGkrKykge1xuXHRcdFx0XHRkZWxldGUgZGF0YVtnY1tpXV07XG5cdFx0XHR9XG5cdFx0XHRnYy5zcGxpY2UoMCwgZ2NMZW4pO1xuXHRcdH1cblx0XHRyZXR1cm4gbG9uZ2VzdDtcblx0fTtcblx0aGVscGVycy5tZWFzdXJlVGV4dCA9IGZ1bmN0aW9uKGN0eCwgZGF0YSwgZ2MsIGxvbmdlc3QsIHN0cmluZykge1xuXHRcdHZhciB0ZXh0V2lkdGggPSBkYXRhW3N0cmluZ107XG5cdFx0aWYgKCF0ZXh0V2lkdGgpIHtcblx0XHRcdHRleHRXaWR0aCA9IGRhdGFbc3RyaW5nXSA9IGN0eC5tZWFzdXJlVGV4dChzdHJpbmcpLndpZHRoO1xuXHRcdFx0Z2MucHVzaChzdHJpbmcpO1xuXHRcdH1cblx0XHRpZiAodGV4dFdpZHRoID4gbG9uZ2VzdCkge1xuXHRcdFx0bG9uZ2VzdCA9IHRleHRXaWR0aDtcblx0XHR9XG5cdFx0cmV0dXJuIGxvbmdlc3Q7XG5cdH07XG5cdGhlbHBlcnMubnVtYmVyT2ZMYWJlbExpbmVzID0gZnVuY3Rpb24oYXJyYXlPZlRoaW5ncykge1xuXHRcdHZhciBudW1iZXJPZkxpbmVzID0gMTtcblx0XHRoZWxwZXJzLmVhY2goYXJyYXlPZlRoaW5ncywgZnVuY3Rpb24odGhpbmcpIHtcblx0XHRcdGlmIChoZWxwZXJzLmlzQXJyYXkodGhpbmcpKSB7XG5cdFx0XHRcdGlmICh0aGluZy5sZW5ndGggPiBudW1iZXJPZkxpbmVzKSB7XG5cdFx0XHRcdFx0bnVtYmVyT2ZMaW5lcyA9IHRoaW5nLmxlbmd0aDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdHJldHVybiBudW1iZXJPZkxpbmVzO1xuXHR9O1xuXG5cdGhlbHBlcnMuY29sb3IgPSAhY29sb3IgP1xuXHRcdGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRjb25zb2xlLmVycm9yKCdDb2xvci5qcyBub3QgZm91bmQhJyk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fSA6XG5cdFx0ZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdC8qIGdsb2JhbCBDYW52YXNHcmFkaWVudCAqL1xuXHRcdFx0aWYgKHZhbHVlIGluc3RhbmNlb2YgQ2FudmFzR3JhZGllbnQpIHtcblx0XHRcdFx0dmFsdWUgPSBkZWZhdWx0cy5nbG9iYWwuZGVmYXVsdENvbG9yO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gY29sb3IodmFsdWUpO1xuXHRcdH07XG5cblx0aGVscGVycy5nZXRIb3ZlckNvbG9yID0gZnVuY3Rpb24oY29sb3JWYWx1ZSkge1xuXHRcdC8qIGdsb2JhbCBDYW52YXNQYXR0ZXJuICovXG5cdFx0cmV0dXJuIChjb2xvclZhbHVlIGluc3RhbmNlb2YgQ2FudmFzUGF0dGVybikgP1xuXHRcdFx0Y29sb3JWYWx1ZSA6XG5cdFx0XHRoZWxwZXJzLmNvbG9yKGNvbG9yVmFsdWUpLnNhdHVyYXRlKDAuNSkuZGFya2VuKDAuMSkucmdiU3RyaW5nKCk7XG5cdH07XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgY29sb3IgPSByZXF1aXJlKCdjaGFydGpzLWNvbG9yJyk7XG52YXIgaGVscGVycyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaW5kZXgnKTtcblxuZnVuY3Rpb24gaW50ZXJwb2xhdGUoc3RhcnQsIHZpZXcsIG1vZGVsLCBlYXNlKSB7XG5cdHZhciBrZXlzID0gT2JqZWN0LmtleXMobW9kZWwpO1xuXHR2YXIgaSwgaWxlbiwga2V5LCBhY3R1YWwsIG9yaWdpbiwgdGFyZ2V0LCB0eXBlLCBjMCwgYzE7XG5cblx0Zm9yIChpID0gMCwgaWxlbiA9IGtleXMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0a2V5ID0ga2V5c1tpXTtcblxuXHRcdHRhcmdldCA9IG1vZGVsW2tleV07XG5cblx0XHQvLyBpZiBhIHZhbHVlIGlzIGFkZGVkIHRvIHRoZSBtb2RlbCBhZnRlciBwaXZvdCgpIGhhcyBiZWVuIGNhbGxlZCwgdGhlIHZpZXdcblx0XHQvLyBkb2Vzbid0IGNvbnRhaW4gaXQsIHNvIGxldCdzIGluaXRpYWxpemUgdGhlIHZpZXcgdG8gdGhlIHRhcmdldCB2YWx1ZS5cblx0XHRpZiAoIXZpZXcuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuXHRcdFx0dmlld1trZXldID0gdGFyZ2V0O1xuXHRcdH1cblxuXHRcdGFjdHVhbCA9IHZpZXdba2V5XTtcblxuXHRcdGlmIChhY3R1YWwgPT09IHRhcmdldCB8fCBrZXlbMF0gPT09ICdfJykge1xuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0aWYgKCFzdGFydC5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG5cdFx0XHRzdGFydFtrZXldID0gYWN0dWFsO1xuXHRcdH1cblxuXHRcdG9yaWdpbiA9IHN0YXJ0W2tleV07XG5cblx0XHR0eXBlID0gdHlwZW9mIHRhcmdldDtcblxuXHRcdGlmICh0eXBlID09PSB0eXBlb2Ygb3JpZ2luKSB7XG5cdFx0XHRpZiAodHlwZSA9PT0gJ3N0cmluZycpIHtcblx0XHRcdFx0YzAgPSBjb2xvcihvcmlnaW4pO1xuXHRcdFx0XHRpZiAoYzAudmFsaWQpIHtcblx0XHRcdFx0XHRjMSA9IGNvbG9yKHRhcmdldCk7XG5cdFx0XHRcdFx0aWYgKGMxLnZhbGlkKSB7XG5cdFx0XHRcdFx0XHR2aWV3W2tleV0gPSBjMS5taXgoYzAsIGVhc2UpLnJnYlN0cmluZygpO1xuXHRcdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2UgaWYgKHR5cGUgPT09ICdudW1iZXInICYmIGlzRmluaXRlKG9yaWdpbikgJiYgaXNGaW5pdGUodGFyZ2V0KSkge1xuXHRcdFx0XHR2aWV3W2tleV0gPSBvcmlnaW4gKyAodGFyZ2V0IC0gb3JpZ2luKSAqIGVhc2U7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHZpZXdba2V5XSA9IHRhcmdldDtcblx0fVxufVxuXG52YXIgRWxlbWVudCA9IGZ1bmN0aW9uKGNvbmZpZ3VyYXRpb24pIHtcblx0aGVscGVycy5leHRlbmQodGhpcywgY29uZmlndXJhdGlvbik7XG5cdHRoaXMuaW5pdGlhbGl6ZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xufTtcblxuaGVscGVycy5leHRlbmQoRWxlbWVudC5wcm90b3R5cGUsIHtcblxuXHRpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLmhpZGRlbiA9IGZhbHNlO1xuXHR9LFxuXG5cdHBpdm90OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdGlmICghbWUuX3ZpZXcpIHtcblx0XHRcdG1lLl92aWV3ID0gaGVscGVycy5jbG9uZShtZS5fbW9kZWwpO1xuXHRcdH1cblx0XHRtZS5fc3RhcnQgPSB7fTtcblx0XHRyZXR1cm4gbWU7XG5cdH0sXG5cblx0dHJhbnNpdGlvbjogZnVuY3Rpb24oZWFzZSkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG1vZGVsID0gbWUuX21vZGVsO1xuXHRcdHZhciBzdGFydCA9IG1lLl9zdGFydDtcblx0XHR2YXIgdmlldyA9IG1lLl92aWV3O1xuXG5cdFx0Ly8gTm8gYW5pbWF0aW9uIC0+IE5vIFRyYW5zaXRpb25cblx0XHRpZiAoIW1vZGVsIHx8IGVhc2UgPT09IDEpIHtcblx0XHRcdG1lLl92aWV3ID0gbW9kZWw7XG5cdFx0XHRtZS5fc3RhcnQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIG1lO1xuXHRcdH1cblxuXHRcdGlmICghdmlldykge1xuXHRcdFx0dmlldyA9IG1lLl92aWV3ID0ge307XG5cdFx0fVxuXG5cdFx0aWYgKCFzdGFydCkge1xuXHRcdFx0c3RhcnQgPSBtZS5fc3RhcnQgPSB7fTtcblx0XHR9XG5cblx0XHRpbnRlcnBvbGF0ZShzdGFydCwgdmlldywgbW9kZWwsIGVhc2UpO1xuXG5cdFx0cmV0dXJuIG1lO1xuXHR9LFxuXG5cdHRvb2x0aXBQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHg6IHRoaXMuX21vZGVsLngsXG5cdFx0XHR5OiB0aGlzLl9tb2RlbC55XG5cdFx0fTtcblx0fSxcblxuXHRoYXNWYWx1ZTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGhlbHBlcnMuaXNOdW1iZXIodGhpcy5fbW9kZWwueCkgJiYgaGVscGVycy5pc051bWJlcih0aGlzLl9tb2RlbC55KTtcblx0fVxufSk7XG5cbkVsZW1lbnQuZXh0ZW5kID0gaGVscGVycy5pbmhlcml0cztcblxubW9kdWxlLmV4cG9ydHMgPSBFbGVtZW50O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgRWxlbWVudCA9IHJlcXVpcmUoJy4vY29yZS5lbGVtZW50Jyk7XG5cbnZhciBleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBFbGVtZW50LmV4dGVuZCh7XG5cdGNoYXJ0OiBudWxsLCAvLyB0aGUgYW5pbWF0aW9uIGFzc29jaWF0ZWQgY2hhcnQgaW5zdGFuY2Vcblx0Y3VycmVudFN0ZXA6IDAsIC8vIHRoZSBjdXJyZW50IGFuaW1hdGlvbiBzdGVwXG5cdG51bVN0ZXBzOiA2MCwgLy8gZGVmYXVsdCBudW1iZXIgb2Ygc3RlcHNcblx0ZWFzaW5nOiAnJywgLy8gdGhlIGVhc2luZyB0byB1c2UgZm9yIHRoaXMgYW5pbWF0aW9uXG5cdHJlbmRlcjogbnVsbCwgLy8gcmVuZGVyIGZ1bmN0aW9uIHVzZWQgYnkgdGhlIGFuaW1hdGlvbiBzZXJ2aWNlXG5cblx0b25BbmltYXRpb25Qcm9ncmVzczogbnVsbCwgLy8gdXNlciBzcGVjaWZpZWQgY2FsbGJhY2sgdG8gZmlyZSBvbiBlYWNoIHN0ZXAgb2YgdGhlIGFuaW1hdGlvblxuXHRvbkFuaW1hdGlvbkNvbXBsZXRlOiBudWxsLCAvLyB1c2VyIHNwZWNpZmllZCBjYWxsYmFjayB0byBmaXJlIHdoZW4gdGhlIGFuaW1hdGlvbiBmaW5pc2hlc1xufSk7XG5cbi8vIERFUFJFQ0FUSU9OU1xuXG4vKipcbiAqIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB1c2UgQ2hhcnQuQW5pbWF0aW9uIGluc3RlYWRcbiAqIEBwcm9wIENoYXJ0LkFuaW1hdGlvbiNhbmltYXRpb25PYmplY3RcbiAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi42LjBcbiAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcbiAqL1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMucHJvdG90eXBlLCAnYW5pbWF0aW9uT2JqZWN0Jywge1xuXHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzO1xuXHR9XG59KTtcblxuLyoqXG4gKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdXNlIENoYXJ0LkFuaW1hdGlvbiNjaGFydCBpbnN0ZWFkXG4gKiBAcHJvcCBDaGFydC5BbmltYXRpb24jY2hhcnRJbnN0YW5jZVxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjYuMFxuICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuICovXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cy5wcm90b3R5cGUsICdjaGFydEluc3RhbmNlJywge1xuXHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmNoYXJ0O1xuXHR9LFxuXHRzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0dGhpcy5jaGFydCA9IHZhbHVlO1xuXHR9XG59KTtcbiIsIi8qIGdsb2JhbCB3aW5kb3c6IGZhbHNlICovXG4ndXNlIHN0cmljdCc7XG5cbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4vY29yZS5kZWZhdWx0cycpO1xudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2luZGV4Jyk7XG5cbmRlZmF1bHRzLl9zZXQoJ2dsb2JhbCcsIHtcblx0YW5pbWF0aW9uOiB7XG5cdFx0ZHVyYXRpb246IDEwMDAsXG5cdFx0ZWFzaW5nOiAnZWFzZU91dFF1YXJ0Jyxcblx0XHRvblByb2dyZXNzOiBoZWxwZXJzLm5vb3AsXG5cdFx0b25Db21wbGV0ZTogaGVscGVycy5ub29wXG5cdH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0ZnJhbWVEdXJhdGlvbjogMTcsXG5cdGFuaW1hdGlvbnM6IFtdLFxuXHRkcm9wRnJhbWVzOiAwLFxuXHRyZXF1ZXN0OiBudWxsLFxuXG5cdC8qKlxuXHQgKiBAcGFyYW0ge0NoYXJ0fSBjaGFydCAtIFRoZSBjaGFydCB0byBhbmltYXRlLlxuXHQgKiBAcGFyYW0ge0NoYXJ0LkFuaW1hdGlvbn0gYW5pbWF0aW9uIC0gVGhlIGFuaW1hdGlvbiB0aGF0IHdlIHdpbGwgYW5pbWF0ZS5cblx0ICogQHBhcmFtIHtOdW1iZXJ9IGR1cmF0aW9uIC0gVGhlIGFuaW1hdGlvbiBkdXJhdGlvbiBpbiBtcy5cblx0ICogQHBhcmFtIHtCb29sZWFufSBsYXp5IC0gaWYgdHJ1ZSwgdGhlIGNoYXJ0IGlzIG5vdCBtYXJrZWQgYXMgYW5pbWF0aW5nIHRvIGVuYWJsZSBtb3JlIHJlc3BvbnNpdmUgaW50ZXJhY3Rpb25zXG5cdCAqL1xuXHRhZGRBbmltYXRpb246IGZ1bmN0aW9uKGNoYXJ0LCBhbmltYXRpb24sIGR1cmF0aW9uLCBsYXp5KSB7XG5cdFx0dmFyIGFuaW1hdGlvbnMgPSB0aGlzLmFuaW1hdGlvbnM7XG5cdFx0dmFyIGksIGlsZW47XG5cblx0XHRhbmltYXRpb24uY2hhcnQgPSBjaGFydDtcblxuXHRcdGlmICghbGF6eSkge1xuXHRcdFx0Y2hhcnQuYW5pbWF0aW5nID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRmb3IgKGkgPSAwLCBpbGVuID0gYW5pbWF0aW9ucy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdGlmIChhbmltYXRpb25zW2ldLmNoYXJ0ID09PSBjaGFydCkge1xuXHRcdFx0XHRhbmltYXRpb25zW2ldID0gYW5pbWF0aW9uO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0YW5pbWF0aW9ucy5wdXNoKGFuaW1hdGlvbik7XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgbm8gYW5pbWF0aW9ucyBxdWV1ZWQsIG1hbnVhbGx5IGtpY2tzdGFydCBhIGRpZ2VzdCwgZm9yIGxhY2sgb2YgYSBiZXR0ZXIgd29yZFxuXHRcdGlmIChhbmltYXRpb25zLmxlbmd0aCA9PT0gMSkge1xuXHRcdFx0dGhpcy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKTtcblx0XHR9XG5cdH0sXG5cblx0Y2FuY2VsQW5pbWF0aW9uOiBmdW5jdGlvbihjaGFydCkge1xuXHRcdHZhciBpbmRleCA9IGhlbHBlcnMuZmluZEluZGV4KHRoaXMuYW5pbWF0aW9ucywgZnVuY3Rpb24oYW5pbWF0aW9uKSB7XG5cdFx0XHRyZXR1cm4gYW5pbWF0aW9uLmNoYXJ0ID09PSBjaGFydDtcblx0XHR9KTtcblxuXHRcdGlmIChpbmRleCAhPT0gLTEpIHtcblx0XHRcdHRoaXMuYW5pbWF0aW9ucy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0Y2hhcnQuYW5pbWF0aW5nID0gZmFsc2U7XG5cdFx0fVxuXHR9LFxuXG5cdHJlcXVlc3RBbmltYXRpb25GcmFtZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHRpZiAobWUucmVxdWVzdCA9PT0gbnVsbCkge1xuXHRcdFx0Ly8gU2tpcCBhbmltYXRpb24gZnJhbWUgcmVxdWVzdHMgdW50aWwgdGhlIGFjdGl2ZSBvbmUgaXMgZXhlY3V0ZWQuXG5cdFx0XHQvLyBUaGlzIGNhbiBoYXBwZW4gd2hlbiBwcm9jZXNzaW5nIG1vdXNlIGV2ZW50cywgZS5nLiAnbW91c2Vtb3ZlJ1xuXHRcdFx0Ly8gYW5kICdtb3VzZW91dCcgZXZlbnRzIHdpbGwgdHJpZ2dlciBtdWx0aXBsZSByZW5kZXJzLlxuXHRcdFx0bWUucmVxdWVzdCA9IGhlbHBlcnMucmVxdWVzdEFuaW1GcmFtZS5jYWxsKHdpbmRvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdG1lLnJlcXVlc3QgPSBudWxsO1xuXHRcdFx0XHRtZS5zdGFydERpZ2VzdCgpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qKlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0c3RhcnREaWdlc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIHN0YXJ0VGltZSA9IERhdGUubm93KCk7XG5cdFx0dmFyIGZyYW1lc1RvRHJvcCA9IDA7XG5cblx0XHRpZiAobWUuZHJvcEZyYW1lcyA+IDEpIHtcblx0XHRcdGZyYW1lc1RvRHJvcCA9IE1hdGguZmxvb3IobWUuZHJvcEZyYW1lcyk7XG5cdFx0XHRtZS5kcm9wRnJhbWVzID0gbWUuZHJvcEZyYW1lcyAlIDE7XG5cdFx0fVxuXG5cdFx0bWUuYWR2YW5jZSgxICsgZnJhbWVzVG9Ecm9wKTtcblxuXHRcdHZhciBlbmRUaW1lID0gRGF0ZS5ub3coKTtcblxuXHRcdG1lLmRyb3BGcmFtZXMgKz0gKGVuZFRpbWUgLSBzdGFydFRpbWUpIC8gbWUuZnJhbWVEdXJhdGlvbjtcblxuXHRcdC8vIERvIHdlIGhhdmUgbW9yZSBzdHVmZiB0byBhbmltYXRlP1xuXHRcdGlmIChtZS5hbmltYXRpb25zLmxlbmd0aCA+IDApIHtcblx0XHRcdG1lLnJlcXVlc3RBbmltYXRpb25GcmFtZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvKipcblx0ICogQHByaXZhdGVcblx0ICovXG5cdGFkdmFuY2U6IGZ1bmN0aW9uKGNvdW50KSB7XG5cdFx0dmFyIGFuaW1hdGlvbnMgPSB0aGlzLmFuaW1hdGlvbnM7XG5cdFx0dmFyIGFuaW1hdGlvbiwgY2hhcnQ7XG5cdFx0dmFyIGkgPSAwO1xuXG5cdFx0d2hpbGUgKGkgPCBhbmltYXRpb25zLmxlbmd0aCkge1xuXHRcdFx0YW5pbWF0aW9uID0gYW5pbWF0aW9uc1tpXTtcblx0XHRcdGNoYXJ0ID0gYW5pbWF0aW9uLmNoYXJ0O1xuXG5cdFx0XHRhbmltYXRpb24uY3VycmVudFN0ZXAgPSAoYW5pbWF0aW9uLmN1cnJlbnRTdGVwIHx8IDApICsgY291bnQ7XG5cdFx0XHRhbmltYXRpb24uY3VycmVudFN0ZXAgPSBNYXRoLm1pbihhbmltYXRpb24uY3VycmVudFN0ZXAsIGFuaW1hdGlvbi5udW1TdGVwcyk7XG5cblx0XHRcdGhlbHBlcnMuY2FsbGJhY2soYW5pbWF0aW9uLnJlbmRlciwgW2NoYXJ0LCBhbmltYXRpb25dLCBjaGFydCk7XG5cdFx0XHRoZWxwZXJzLmNhbGxiYWNrKGFuaW1hdGlvbi5vbkFuaW1hdGlvblByb2dyZXNzLCBbYW5pbWF0aW9uXSwgY2hhcnQpO1xuXG5cdFx0XHRpZiAoYW5pbWF0aW9uLmN1cnJlbnRTdGVwID49IGFuaW1hdGlvbi5udW1TdGVwcykge1xuXHRcdFx0XHRoZWxwZXJzLmNhbGxiYWNrKGFuaW1hdGlvbi5vbkFuaW1hdGlvbkNvbXBsZXRlLCBbYW5pbWF0aW9uXSwgY2hhcnQpO1xuXHRcdFx0XHRjaGFydC5hbmltYXRpbmcgPSBmYWxzZTtcblx0XHRcdFx0YW5pbWF0aW9ucy5zcGxpY2UoaSwgMSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHQrK2k7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9jb3JlL2NvcmUuZGVmYXVsdHMnKTtcbnZhciBFbGVtZW50ID0gcmVxdWlyZSgnLi4vY29yZS9jb3JlLmVsZW1lbnQnKTtcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi4vaGVscGVycy9pbmRleCcpO1xuXG5kZWZhdWx0cy5fc2V0KCdnbG9iYWwnLCB7XG5cdGVsZW1lbnRzOiB7XG5cdFx0YXJjOiB7XG5cdFx0XHRiYWNrZ3JvdW5kQ29sb3I6IGRlZmF1bHRzLmdsb2JhbC5kZWZhdWx0Q29sb3IsXG5cdFx0XHRib3JkZXJDb2xvcjogJyNmZmYnLFxuXHRcdFx0Ym9yZGVyV2lkdGg6IDJcblx0XHR9XG5cdH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVsZW1lbnQuZXh0ZW5kKHtcblx0aW5MYWJlbFJhbmdlOiBmdW5jdGlvbihtb3VzZVgpIHtcblx0XHR2YXIgdm0gPSB0aGlzLl92aWV3O1xuXG5cdFx0aWYgKHZtKSB7XG5cdFx0XHRyZXR1cm4gKE1hdGgucG93KG1vdXNlWCAtIHZtLngsIDIpIDwgTWF0aC5wb3codm0ucmFkaXVzICsgdm0uaG92ZXJSYWRpdXMsIDIpKTtcblx0XHR9XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9LFxuXG5cdGluUmFuZ2U6IGZ1bmN0aW9uKGNoYXJ0WCwgY2hhcnRZKSB7XG5cdFx0dmFyIHZtID0gdGhpcy5fdmlldztcblxuXHRcdGlmICh2bSkge1xuXHRcdFx0dmFyIHBvaW50UmVsYXRpdmVQb3NpdGlvbiA9IGhlbHBlcnMuZ2V0QW5nbGVGcm9tUG9pbnQodm0sIHt4OiBjaGFydFgsIHk6IGNoYXJ0WX0pO1xuXHRcdFx0dmFyXHRhbmdsZSA9IHBvaW50UmVsYXRpdmVQb3NpdGlvbi5hbmdsZTtcblx0XHRcdHZhciBkaXN0YW5jZSA9IHBvaW50UmVsYXRpdmVQb3NpdGlvbi5kaXN0YW5jZTtcblxuXHRcdFx0Ly8gU2FuaXRpc2UgYW5nbGUgcmFuZ2Vcblx0XHRcdHZhciBzdGFydEFuZ2xlID0gdm0uc3RhcnRBbmdsZTtcblx0XHRcdHZhciBlbmRBbmdsZSA9IHZtLmVuZEFuZ2xlO1xuXHRcdFx0d2hpbGUgKGVuZEFuZ2xlIDwgc3RhcnRBbmdsZSkge1xuXHRcdFx0XHRlbmRBbmdsZSArPSAyLjAgKiBNYXRoLlBJO1xuXHRcdFx0fVxuXHRcdFx0d2hpbGUgKGFuZ2xlID4gZW5kQW5nbGUpIHtcblx0XHRcdFx0YW5nbGUgLT0gMi4wICogTWF0aC5QSTtcblx0XHRcdH1cblx0XHRcdHdoaWxlIChhbmdsZSA8IHN0YXJ0QW5nbGUpIHtcblx0XHRcdFx0YW5nbGUgKz0gMi4wICogTWF0aC5QSTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2hlY2sgaWYgd2l0aGluIHRoZSByYW5nZSBvZiB0aGUgb3Blbi9jbG9zZSBhbmdsZVxuXHRcdFx0dmFyIGJldHdlZW5BbmdsZXMgPSAoYW5nbGUgPj0gc3RhcnRBbmdsZSAmJiBhbmdsZSA8PSBlbmRBbmdsZSk7XG5cdFx0XHR2YXIgd2l0aGluUmFkaXVzID0gKGRpc3RhbmNlID49IHZtLmlubmVyUmFkaXVzICYmIGRpc3RhbmNlIDw9IHZtLm91dGVyUmFkaXVzKTtcblxuXHRcdFx0cmV0dXJuIChiZXR3ZWVuQW5nbGVzICYmIHdpdGhpblJhZGl1cyk7XG5cdFx0fVxuXHRcdHJldHVybiBmYWxzZTtcblx0fSxcblxuXHRnZXRDZW50ZXJQb2ludDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHZtID0gdGhpcy5fdmlldztcblx0XHR2YXIgaGFsZkFuZ2xlID0gKHZtLnN0YXJ0QW5nbGUgKyB2bS5lbmRBbmdsZSkgLyAyO1xuXHRcdHZhciBoYWxmUmFkaXVzID0gKHZtLmlubmVyUmFkaXVzICsgdm0ub3V0ZXJSYWRpdXMpIC8gMjtcblx0XHRyZXR1cm4ge1xuXHRcdFx0eDogdm0ueCArIE1hdGguY29zKGhhbGZBbmdsZSkgKiBoYWxmUmFkaXVzLFxuXHRcdFx0eTogdm0ueSArIE1hdGguc2luKGhhbGZBbmdsZSkgKiBoYWxmUmFkaXVzXG5cdFx0fTtcblx0fSxcblxuXHRnZXRBcmVhOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgdm0gPSB0aGlzLl92aWV3O1xuXHRcdHJldHVybiBNYXRoLlBJICogKCh2bS5lbmRBbmdsZSAtIHZtLnN0YXJ0QW5nbGUpIC8gKDIgKiBNYXRoLlBJKSkgKiAoTWF0aC5wb3codm0ub3V0ZXJSYWRpdXMsIDIpIC0gTWF0aC5wb3codm0uaW5uZXJSYWRpdXMsIDIpKTtcblx0fSxcblxuXHR0b29sdGlwUG9zaXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdHZhciB2bSA9IHRoaXMuX3ZpZXc7XG5cdFx0dmFyIGNlbnRyZUFuZ2xlID0gdm0uc3RhcnRBbmdsZSArICgodm0uZW5kQW5nbGUgLSB2bS5zdGFydEFuZ2xlKSAvIDIpO1xuXHRcdHZhciByYW5nZUZyb21DZW50cmUgPSAodm0ub3V0ZXJSYWRpdXMgLSB2bS5pbm5lclJhZGl1cykgLyAyICsgdm0uaW5uZXJSYWRpdXM7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0eDogdm0ueCArIChNYXRoLmNvcyhjZW50cmVBbmdsZSkgKiByYW5nZUZyb21DZW50cmUpLFxuXHRcdFx0eTogdm0ueSArIChNYXRoLnNpbihjZW50cmVBbmdsZSkgKiByYW5nZUZyb21DZW50cmUpXG5cdFx0fTtcblx0fSxcblxuXHRkcmF3OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY3R4ID0gdGhpcy5fY2hhcnQuY3R4O1xuXHRcdHZhciB2bSA9IHRoaXMuX3ZpZXc7XG5cdFx0dmFyIHNBID0gdm0uc3RhcnRBbmdsZTtcblx0XHR2YXIgZUEgPSB2bS5lbmRBbmdsZTtcblxuXHRcdGN0eC5iZWdpblBhdGgoKTtcblxuXHRcdGN0eC5hcmModm0ueCwgdm0ueSwgdm0ub3V0ZXJSYWRpdXMsIHNBLCBlQSk7XG5cdFx0Y3R4LmFyYyh2bS54LCB2bS55LCB2bS5pbm5lclJhZGl1cywgZUEsIHNBLCB0cnVlKTtcblxuXHRcdGN0eC5jbG9zZVBhdGgoKTtcblx0XHRjdHguc3Ryb2tlU3R5bGUgPSB2bS5ib3JkZXJDb2xvcjtcblx0XHRjdHgubGluZVdpZHRoID0gdm0uYm9yZGVyV2lkdGg7XG5cblx0XHRjdHguZmlsbFN0eWxlID0gdm0uYmFja2dyb3VuZENvbG9yO1xuXG5cdFx0Y3R4LmZpbGwoKTtcblx0XHRjdHgubGluZUpvaW4gPSAnYmV2ZWwnO1xuXG5cdFx0aWYgKHZtLmJvcmRlcldpZHRoKSB7XG5cdFx0XHRjdHguc3Ryb2tlKCk7XG5cdFx0fVxuXHR9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vY29yZS9jb3JlLmRlZmF1bHRzJyk7XG52YXIgRWxlbWVudCA9IHJlcXVpcmUoJy4uL2NvcmUvY29yZS5lbGVtZW50Jyk7XG52YXIgaGVscGVycyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaW5kZXgnKTtcblxudmFyIGdsb2JhbERlZmF1bHRzID0gZGVmYXVsdHMuZ2xvYmFsO1xuXG5kZWZhdWx0cy5fc2V0KCdnbG9iYWwnLCB7XG5cdGVsZW1lbnRzOiB7XG5cdFx0bGluZToge1xuXHRcdFx0dGVuc2lvbjogMC40LFxuXHRcdFx0YmFja2dyb3VuZENvbG9yOiBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Q29sb3IsXG5cdFx0XHRib3JkZXJXaWR0aDogMyxcblx0XHRcdGJvcmRlckNvbG9yOiBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Q29sb3IsXG5cdFx0XHRib3JkZXJDYXBTdHlsZTogJ2J1dHQnLFxuXHRcdFx0Ym9yZGVyRGFzaDogW10sXG5cdFx0XHRib3JkZXJEYXNoT2Zmc2V0OiAwLjAsXG5cdFx0XHRib3JkZXJKb2luU3R5bGU6ICdtaXRlcicsXG5cdFx0XHRjYXBCZXppZXJQb2ludHM6IHRydWUsXG5cdFx0XHRmaWxsOiB0cnVlLCAvLyBkbyB3ZSBmaWxsIGluIHRoZSBhcmVhIGJldHdlZW4gdGhlIGxpbmUgYW5kIGl0cyBiYXNlIGF4aXNcblx0XHR9XG5cdH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IEVsZW1lbnQuZXh0ZW5kKHtcblx0ZHJhdzogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgdm0gPSBtZS5fdmlldztcblx0XHR2YXIgY3R4ID0gbWUuX2NoYXJ0LmN0eDtcblx0XHR2YXIgc3BhbkdhcHMgPSB2bS5zcGFuR2Fwcztcblx0XHR2YXIgcG9pbnRzID0gbWUuX2NoaWxkcmVuLnNsaWNlKCk7IC8vIGNsb25lIGFycmF5XG5cdFx0dmFyIGdsb2JhbE9wdGlvbkxpbmVFbGVtZW50cyA9IGdsb2JhbERlZmF1bHRzLmVsZW1lbnRzLmxpbmU7XG5cdFx0dmFyIGxhc3REcmF3bkluZGV4ID0gLTE7XG5cdFx0dmFyIGluZGV4LCBjdXJyZW50LCBwcmV2aW91cywgY3VycmVudFZNO1xuXG5cdFx0Ly8gSWYgd2UgYXJlIGxvb3BpbmcsIGFkZGluZyB0aGUgZmlyc3QgcG9pbnQgYWdhaW5cblx0XHRpZiAobWUuX2xvb3AgJiYgcG9pbnRzLmxlbmd0aCkge1xuXHRcdFx0cG9pbnRzLnB1c2gocG9pbnRzWzBdKTtcblx0XHR9XG5cblx0XHRjdHguc2F2ZSgpO1xuXG5cdFx0Ly8gU3Ryb2tlIExpbmUgT3B0aW9uc1xuXHRcdGN0eC5saW5lQ2FwID0gdm0uYm9yZGVyQ2FwU3R5bGUgfHwgZ2xvYmFsT3B0aW9uTGluZUVsZW1lbnRzLmJvcmRlckNhcFN0eWxlO1xuXG5cdFx0Ly8gSUUgOSBhbmQgMTAgZG8gbm90IHN1cHBvcnQgbGluZSBkYXNoXG5cdFx0aWYgKGN0eC5zZXRMaW5lRGFzaCkge1xuXHRcdFx0Y3R4LnNldExpbmVEYXNoKHZtLmJvcmRlckRhc2ggfHwgZ2xvYmFsT3B0aW9uTGluZUVsZW1lbnRzLmJvcmRlckRhc2gpO1xuXHRcdH1cblxuXHRcdGN0eC5saW5lRGFzaE9mZnNldCA9IHZtLmJvcmRlckRhc2hPZmZzZXQgfHwgZ2xvYmFsT3B0aW9uTGluZUVsZW1lbnRzLmJvcmRlckRhc2hPZmZzZXQ7XG5cdFx0Y3R4LmxpbmVKb2luID0gdm0uYm9yZGVySm9pblN0eWxlIHx8IGdsb2JhbE9wdGlvbkxpbmVFbGVtZW50cy5ib3JkZXJKb2luU3R5bGU7XG5cdFx0Y3R4LmxpbmVXaWR0aCA9IHZtLmJvcmRlcldpZHRoIHx8IGdsb2JhbE9wdGlvbkxpbmVFbGVtZW50cy5ib3JkZXJXaWR0aDtcblx0XHRjdHguc3Ryb2tlU3R5bGUgPSB2bS5ib3JkZXJDb2xvciB8fCBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Q29sb3I7XG5cblx0XHQvLyBTdHJva2UgTGluZVxuXHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRsYXN0RHJhd25JbmRleCA9IC0xO1xuXG5cdFx0Zm9yIChpbmRleCA9IDA7IGluZGV4IDwgcG9pbnRzLmxlbmd0aDsgKytpbmRleCkge1xuXHRcdFx0Y3VycmVudCA9IHBvaW50c1tpbmRleF07XG5cdFx0XHRwcmV2aW91cyA9IGhlbHBlcnMucHJldmlvdXNJdGVtKHBvaW50cywgaW5kZXgpO1xuXHRcdFx0Y3VycmVudFZNID0gY3VycmVudC5fdmlldztcblxuXHRcdFx0Ly8gRmlyc3QgcG9pbnQgbW92ZXMgdG8gaXQncyBzdGFydGluZyBwb3NpdGlvbiBubyBtYXR0ZXIgd2hhdFxuXHRcdFx0aWYgKGluZGV4ID09PSAwKSB7XG5cdFx0XHRcdGlmICghY3VycmVudFZNLnNraXApIHtcblx0XHRcdFx0XHRjdHgubW92ZVRvKGN1cnJlbnRWTS54LCBjdXJyZW50Vk0ueSk7XG5cdFx0XHRcdFx0bGFzdERyYXduSW5kZXggPSBpbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHJldmlvdXMgPSBsYXN0RHJhd25JbmRleCA9PT0gLTEgPyBwcmV2aW91cyA6IHBvaW50c1tsYXN0RHJhd25JbmRleF07XG5cblx0XHRcdFx0aWYgKCFjdXJyZW50Vk0uc2tpcCkge1xuXHRcdFx0XHRcdGlmICgobGFzdERyYXduSW5kZXggIT09IChpbmRleCAtIDEpICYmICFzcGFuR2FwcykgfHwgbGFzdERyYXduSW5kZXggPT09IC0xKSB7XG5cdFx0XHRcdFx0XHQvLyBUaGVyZSB3YXMgYSBnYXAgYW5kIHRoaXMgaXMgdGhlIGZpcnN0IHBvaW50IGFmdGVyIHRoZSBnYXBcblx0XHRcdFx0XHRcdGN0eC5tb3ZlVG8oY3VycmVudFZNLngsIGN1cnJlbnRWTS55KTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Ly8gTGluZSB0byBuZXh0IHBvaW50XG5cdFx0XHRcdFx0XHRoZWxwZXJzLmNhbnZhcy5saW5lVG8oY3R4LCBwcmV2aW91cy5fdmlldywgY3VycmVudC5fdmlldyk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGxhc3REcmF3bkluZGV4ID0gaW5kZXg7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRjdHguc3Ryb2tlKCk7XG5cdFx0Y3R4LnJlc3RvcmUoKTtcblx0fVxufSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2NvcmUvY29yZS5kZWZhdWx0cycpO1xudmFyIEVsZW1lbnQgPSByZXF1aXJlKCcuLi9jb3JlL2NvcmUuZWxlbWVudCcpO1xudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2luZGV4Jyk7XG5cbnZhciBkZWZhdWx0Q29sb3IgPSBkZWZhdWx0cy5nbG9iYWwuZGVmYXVsdENvbG9yO1xuXG5kZWZhdWx0cy5fc2V0KCdnbG9iYWwnLCB7XG5cdGVsZW1lbnRzOiB7XG5cdFx0cG9pbnQ6IHtcblx0XHRcdHJhZGl1czogMyxcblx0XHRcdHBvaW50U3R5bGU6ICdjaXJjbGUnLFxuXHRcdFx0YmFja2dyb3VuZENvbG9yOiBkZWZhdWx0Q29sb3IsXG5cdFx0XHRib3JkZXJDb2xvcjogZGVmYXVsdENvbG9yLFxuXHRcdFx0Ym9yZGVyV2lkdGg6IDEsXG5cdFx0XHQvLyBIb3ZlclxuXHRcdFx0aGl0UmFkaXVzOiAxLFxuXHRcdFx0aG92ZXJSYWRpdXM6IDQsXG5cdFx0XHRob3ZlckJvcmRlcldpZHRoOiAxXG5cdFx0fVxuXHR9XG59KTtcblxuZnVuY3Rpb24geFJhbmdlKG1vdXNlWCkge1xuXHR2YXIgdm0gPSB0aGlzLl92aWV3O1xuXHRyZXR1cm4gdm0gPyAoTWF0aC5hYnMobW91c2VYIC0gdm0ueCkgPCB2bS5yYWRpdXMgKyB2bS5oaXRSYWRpdXMpIDogZmFsc2U7XG59XG5cbmZ1bmN0aW9uIHlSYW5nZShtb3VzZVkpIHtcblx0dmFyIHZtID0gdGhpcy5fdmlldztcblx0cmV0dXJuIHZtID8gKE1hdGguYWJzKG1vdXNlWSAtIHZtLnkpIDwgdm0ucmFkaXVzICsgdm0uaGl0UmFkaXVzKSA6IGZhbHNlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEVsZW1lbnQuZXh0ZW5kKHtcblx0aW5SYW5nZTogZnVuY3Rpb24obW91c2VYLCBtb3VzZVkpIHtcblx0XHR2YXIgdm0gPSB0aGlzLl92aWV3O1xuXHRcdHJldHVybiB2bSA/ICgoTWF0aC5wb3cobW91c2VYIC0gdm0ueCwgMikgKyBNYXRoLnBvdyhtb3VzZVkgLSB2bS55LCAyKSkgPCBNYXRoLnBvdyh2bS5oaXRSYWRpdXMgKyB2bS5yYWRpdXMsIDIpKSA6IGZhbHNlO1xuXHR9LFxuXG5cdGluTGFiZWxSYW5nZTogeFJhbmdlLFxuXHRpblhSYW5nZTogeFJhbmdlLFxuXHRpbllSYW5nZTogeVJhbmdlLFxuXG5cdGdldENlbnRlclBvaW50OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgdm0gPSB0aGlzLl92aWV3O1xuXHRcdHJldHVybiB7XG5cdFx0XHR4OiB2bS54LFxuXHRcdFx0eTogdm0ueVxuXHRcdH07XG5cdH0sXG5cblx0Z2V0QXJlYTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIE1hdGguUEkgKiBNYXRoLnBvdyh0aGlzLl92aWV3LnJhZGl1cywgMik7XG5cdH0sXG5cblx0dG9vbHRpcFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgdm0gPSB0aGlzLl92aWV3O1xuXHRcdHJldHVybiB7XG5cdFx0XHR4OiB2bS54LFxuXHRcdFx0eTogdm0ueSxcblx0XHRcdHBhZGRpbmc6IHZtLnJhZGl1cyArIHZtLmJvcmRlcldpZHRoXG5cdFx0fTtcblx0fSxcblxuXHRkcmF3OiBmdW5jdGlvbihjaGFydEFyZWEpIHtcblx0XHR2YXIgdm0gPSB0aGlzLl92aWV3O1xuXHRcdHZhciBtb2RlbCA9IHRoaXMuX21vZGVsO1xuXHRcdHZhciBjdHggPSB0aGlzLl9jaGFydC5jdHg7XG5cdFx0dmFyIHBvaW50U3R5bGUgPSB2bS5wb2ludFN0eWxlO1xuXHRcdHZhciByb3RhdGlvbiA9IHZtLnJvdGF0aW9uO1xuXHRcdHZhciByYWRpdXMgPSB2bS5yYWRpdXM7XG5cdFx0dmFyIHggPSB2bS54O1xuXHRcdHZhciB5ID0gdm0ueTtcblx0XHR2YXIgZXJyTWFyZ2luID0gMS4wMTsgLy8gMS4wMSBpcyBtYXJnaW4gZm9yIEFjY3VtdWxhdGVkIGVycm9yLiAoRXNwZWNpYWxseSBFZGdlLCBJRS4pXG5cblx0XHRpZiAodm0uc2tpcCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIENsaXBwaW5nIGZvciBQb2ludHMuXG5cdFx0aWYgKGNoYXJ0QXJlYSA9PT0gdW5kZWZpbmVkIHx8IChtb2RlbC54ID49IGNoYXJ0QXJlYS5sZWZ0ICYmIGNoYXJ0QXJlYS5yaWdodCAqIGVyck1hcmdpbiA+PSBtb2RlbC54ICYmIG1vZGVsLnkgPj0gY2hhcnRBcmVhLnRvcCAmJiBjaGFydEFyZWEuYm90dG9tICogZXJyTWFyZ2luID49IG1vZGVsLnkpKSB7XG5cdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSB2bS5ib3JkZXJDb2xvciB8fCBkZWZhdWx0Q29sb3I7XG5cdFx0XHRjdHgubGluZVdpZHRoID0gaGVscGVycy52YWx1ZU9yRGVmYXVsdCh2bS5ib3JkZXJXaWR0aCwgZGVmYXVsdHMuZ2xvYmFsLmVsZW1lbnRzLnBvaW50LmJvcmRlcldpZHRoKTtcblx0XHRcdGN0eC5maWxsU3R5bGUgPSB2bS5iYWNrZ3JvdW5kQ29sb3IgfHwgZGVmYXVsdENvbG9yO1xuXHRcdFx0aGVscGVycy5jYW52YXMuZHJhd1BvaW50KGN0eCwgcG9pbnRTdHlsZSwgcmFkaXVzLCB4LCB5LCByb3RhdGlvbik7XG5cdFx0fVxuXHR9XG59KTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vY29yZS9jb3JlLmRlZmF1bHRzJyk7XG52YXIgRWxlbWVudCA9IHJlcXVpcmUoJy4uL2NvcmUvY29yZS5lbGVtZW50Jyk7XG5cbmRlZmF1bHRzLl9zZXQoJ2dsb2JhbCcsIHtcblx0ZWxlbWVudHM6IHtcblx0XHRyZWN0YW5nbGU6IHtcblx0XHRcdGJhY2tncm91bmRDb2xvcjogZGVmYXVsdHMuZ2xvYmFsLmRlZmF1bHRDb2xvcixcblx0XHRcdGJvcmRlckNvbG9yOiBkZWZhdWx0cy5nbG9iYWwuZGVmYXVsdENvbG9yLFxuXHRcdFx0Ym9yZGVyU2tpcHBlZDogJ2JvdHRvbScsXG5cdFx0XHRib3JkZXJXaWR0aDogMFxuXHRcdH1cblx0fVxufSk7XG5cbmZ1bmN0aW9uIGlzVmVydGljYWwoYmFyKSB7XG5cdHJldHVybiBiYXIuX3ZpZXcud2lkdGggIT09IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IHRoZSBib3VuZHMgb2YgdGhlIGJhciByZWdhcmRsZXNzIG9mIHRoZSBvcmllbnRhdGlvblxuICogQHBhcmFtIGJhciB7Q2hhcnQuRWxlbWVudC5SZWN0YW5nbGV9IHRoZSBiYXJcbiAqIEByZXR1cm4ge0JvdW5kc30gYm91bmRzIG9mIHRoZSBiYXJcbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGdldEJhckJvdW5kcyhiYXIpIHtcblx0dmFyIHZtID0gYmFyLl92aWV3O1xuXHR2YXIgeDEsIHgyLCB5MSwgeTI7XG5cblx0aWYgKGlzVmVydGljYWwoYmFyKSkge1xuXHRcdC8vIHZlcnRpY2FsXG5cdFx0dmFyIGhhbGZXaWR0aCA9IHZtLndpZHRoIC8gMjtcblx0XHR4MSA9IHZtLnggLSBoYWxmV2lkdGg7XG5cdFx0eDIgPSB2bS54ICsgaGFsZldpZHRoO1xuXHRcdHkxID0gTWF0aC5taW4odm0ueSwgdm0uYmFzZSk7XG5cdFx0eTIgPSBNYXRoLm1heCh2bS55LCB2bS5iYXNlKTtcblx0fSBlbHNlIHtcblx0XHQvLyBob3Jpem9udGFsIGJhclxuXHRcdHZhciBoYWxmSGVpZ2h0ID0gdm0uaGVpZ2h0IC8gMjtcblx0XHR4MSA9IE1hdGgubWluKHZtLngsIHZtLmJhc2UpO1xuXHRcdHgyID0gTWF0aC5tYXgodm0ueCwgdm0uYmFzZSk7XG5cdFx0eTEgPSB2bS55IC0gaGFsZkhlaWdodDtcblx0XHR5MiA9IHZtLnkgKyBoYWxmSGVpZ2h0O1xuXHR9XG5cblx0cmV0dXJuIHtcblx0XHRsZWZ0OiB4MSxcblx0XHR0b3A6IHkxLFxuXHRcdHJpZ2h0OiB4Mixcblx0XHRib3R0b206IHkyXG5cdH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gRWxlbWVudC5leHRlbmQoe1xuXHRkcmF3OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY3R4ID0gdGhpcy5fY2hhcnQuY3R4O1xuXHRcdHZhciB2bSA9IHRoaXMuX3ZpZXc7XG5cdFx0dmFyIGxlZnQsIHJpZ2h0LCB0b3AsIGJvdHRvbSwgc2lnblgsIHNpZ25ZLCBib3JkZXJTa2lwcGVkO1xuXHRcdHZhciBib3JkZXJXaWR0aCA9IHZtLmJvcmRlcldpZHRoO1xuXG5cdFx0aWYgKCF2bS5ob3Jpem9udGFsKSB7XG5cdFx0XHQvLyBiYXJcblx0XHRcdGxlZnQgPSB2bS54IC0gdm0ud2lkdGggLyAyO1xuXHRcdFx0cmlnaHQgPSB2bS54ICsgdm0ud2lkdGggLyAyO1xuXHRcdFx0dG9wID0gdm0ueTtcblx0XHRcdGJvdHRvbSA9IHZtLmJhc2U7XG5cdFx0XHRzaWduWCA9IDE7XG5cdFx0XHRzaWduWSA9IGJvdHRvbSA+IHRvcCA/IDEgOiAtMTtcblx0XHRcdGJvcmRlclNraXBwZWQgPSB2bS5ib3JkZXJTa2lwcGVkIHx8ICdib3R0b20nO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBob3Jpem9udGFsIGJhclxuXHRcdFx0bGVmdCA9IHZtLmJhc2U7XG5cdFx0XHRyaWdodCA9IHZtLng7XG5cdFx0XHR0b3AgPSB2bS55IC0gdm0uaGVpZ2h0IC8gMjtcblx0XHRcdGJvdHRvbSA9IHZtLnkgKyB2bS5oZWlnaHQgLyAyO1xuXHRcdFx0c2lnblggPSByaWdodCA+IGxlZnQgPyAxIDogLTE7XG5cdFx0XHRzaWduWSA9IDE7XG5cdFx0XHRib3JkZXJTa2lwcGVkID0gdm0uYm9yZGVyU2tpcHBlZCB8fCAnbGVmdCc7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FudmFzIGRvZXNuJ3QgYWxsb3cgdXMgdG8gc3Ryb2tlIGluc2lkZSB0aGUgd2lkdGggc28gd2UgY2FuXG5cdFx0Ly8gYWRqdXN0IHRoZSBzaXplcyB0byBmaXQgaWYgd2UncmUgc2V0dGluZyBhIHN0cm9rZSBvbiB0aGUgbGluZVxuXHRcdGlmIChib3JkZXJXaWR0aCkge1xuXHRcdFx0Ly8gYm9yZGVyV2lkdGggc2hvbGQgYmUgbGVzcyB0aGFuIGJhciB3aWR0aCBhbmQgYmFyIGhlaWdodC5cblx0XHRcdHZhciBiYXJTaXplID0gTWF0aC5taW4oTWF0aC5hYnMobGVmdCAtIHJpZ2h0KSwgTWF0aC5hYnModG9wIC0gYm90dG9tKSk7XG5cdFx0XHRib3JkZXJXaWR0aCA9IGJvcmRlcldpZHRoID4gYmFyU2l6ZSA/IGJhclNpemUgOiBib3JkZXJXaWR0aDtcblx0XHRcdHZhciBoYWxmU3Ryb2tlID0gYm9yZGVyV2lkdGggLyAyO1xuXHRcdFx0Ly8gQWRqdXN0IGJvcmRlcldpZHRoIHdoZW4gYmFyIHRvcCBwb3NpdGlvbiBpcyBuZWFyIHZtLmJhc2UoemVybykuXG5cdFx0XHR2YXIgYm9yZGVyTGVmdCA9IGxlZnQgKyAoYm9yZGVyU2tpcHBlZCAhPT0gJ2xlZnQnID8gaGFsZlN0cm9rZSAqIHNpZ25YIDogMCk7XG5cdFx0XHR2YXIgYm9yZGVyUmlnaHQgPSByaWdodCArIChib3JkZXJTa2lwcGVkICE9PSAncmlnaHQnID8gLWhhbGZTdHJva2UgKiBzaWduWCA6IDApO1xuXHRcdFx0dmFyIGJvcmRlclRvcCA9IHRvcCArIChib3JkZXJTa2lwcGVkICE9PSAndG9wJyA/IGhhbGZTdHJva2UgKiBzaWduWSA6IDApO1xuXHRcdFx0dmFyIGJvcmRlckJvdHRvbSA9IGJvdHRvbSArIChib3JkZXJTa2lwcGVkICE9PSAnYm90dG9tJyA/IC1oYWxmU3Ryb2tlICogc2lnblkgOiAwKTtcblx0XHRcdC8vIG5vdCBiZWNvbWUgYSB2ZXJ0aWNhbCBsaW5lP1xuXHRcdFx0aWYgKGJvcmRlckxlZnQgIT09IGJvcmRlclJpZ2h0KSB7XG5cdFx0XHRcdHRvcCA9IGJvcmRlclRvcDtcblx0XHRcdFx0Ym90dG9tID0gYm9yZGVyQm90dG9tO1xuXHRcdFx0fVxuXHRcdFx0Ly8gbm90IGJlY29tZSBhIGhvcml6b250YWwgbGluZT9cblx0XHRcdGlmIChib3JkZXJUb3AgIT09IGJvcmRlckJvdHRvbSkge1xuXHRcdFx0XHRsZWZ0ID0gYm9yZGVyTGVmdDtcblx0XHRcdFx0cmlnaHQgPSBib3JkZXJSaWdodDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0Y3R4LmZpbGxTdHlsZSA9IHZtLmJhY2tncm91bmRDb2xvcjtcblx0XHRjdHguc3Ryb2tlU3R5bGUgPSB2bS5ib3JkZXJDb2xvcjtcblx0XHRjdHgubGluZVdpZHRoID0gYm9yZGVyV2lkdGg7XG5cblx0XHQvLyBDb3JuZXIgcG9pbnRzLCBmcm9tIGJvdHRvbS1sZWZ0IHRvIGJvdHRvbS1yaWdodCBjbG9ja3dpc2Vcblx0XHQvLyB8IDEgMiB8XG5cdFx0Ly8gfCAwIDMgfFxuXHRcdHZhciBjb3JuZXJzID0gW1xuXHRcdFx0W2xlZnQsIGJvdHRvbV0sXG5cdFx0XHRbbGVmdCwgdG9wXSxcblx0XHRcdFtyaWdodCwgdG9wXSxcblx0XHRcdFtyaWdodCwgYm90dG9tXVxuXHRcdF07XG5cblx0XHQvLyBGaW5kIGZpcnN0IChzdGFydGluZykgY29ybmVyIHdpdGggZmFsbGJhY2sgdG8gJ2JvdHRvbSdcblx0XHR2YXIgYm9yZGVycyA9IFsnYm90dG9tJywgJ2xlZnQnLCAndG9wJywgJ3JpZ2h0J107XG5cdFx0dmFyIHN0YXJ0Q29ybmVyID0gYm9yZGVycy5pbmRleE9mKGJvcmRlclNraXBwZWQsIDApO1xuXHRcdGlmIChzdGFydENvcm5lciA9PT0gLTEpIHtcblx0XHRcdHN0YXJ0Q29ybmVyID0gMDtcblx0XHR9XG5cblx0XHRmdW5jdGlvbiBjb3JuZXJBdChpbmRleCkge1xuXHRcdFx0cmV0dXJuIGNvcm5lcnNbKHN0YXJ0Q29ybmVyICsgaW5kZXgpICUgNF07XG5cdFx0fVxuXG5cdFx0Ly8gRHJhdyByZWN0YW5nbGUgZnJvbSAnc3RhcnRDb3JuZXInXG5cdFx0dmFyIGNvcm5lciA9IGNvcm5lckF0KDApO1xuXHRcdGN0eC5tb3ZlVG8oY29ybmVyWzBdLCBjb3JuZXJbMV0pO1xuXG5cdFx0Zm9yICh2YXIgaSA9IDE7IGkgPCA0OyBpKyspIHtcblx0XHRcdGNvcm5lciA9IGNvcm5lckF0KGkpO1xuXHRcdFx0Y3R4LmxpbmVUbyhjb3JuZXJbMF0sIGNvcm5lclsxXSk7XG5cdFx0fVxuXG5cdFx0Y3R4LmZpbGwoKTtcblx0XHRpZiAoYm9yZGVyV2lkdGgpIHtcblx0XHRcdGN0eC5zdHJva2UoKTtcblx0XHR9XG5cdH0sXG5cblx0aGVpZ2h0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgdm0gPSB0aGlzLl92aWV3O1xuXHRcdHJldHVybiB2bS5iYXNlIC0gdm0ueTtcblx0fSxcblxuXHRpblJhbmdlOiBmdW5jdGlvbihtb3VzZVgsIG1vdXNlWSkge1xuXHRcdHZhciBpblJhbmdlID0gZmFsc2U7XG5cblx0XHRpZiAodGhpcy5fdmlldykge1xuXHRcdFx0dmFyIGJvdW5kcyA9IGdldEJhckJvdW5kcyh0aGlzKTtcblx0XHRcdGluUmFuZ2UgPSBtb3VzZVggPj0gYm91bmRzLmxlZnQgJiYgbW91c2VYIDw9IGJvdW5kcy5yaWdodCAmJiBtb3VzZVkgPj0gYm91bmRzLnRvcCAmJiBtb3VzZVkgPD0gYm91bmRzLmJvdHRvbTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaW5SYW5nZTtcblx0fSxcblxuXHRpbkxhYmVsUmFuZ2U6IGZ1bmN0aW9uKG1vdXNlWCwgbW91c2VZKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHRpZiAoIW1lLl92aWV3KSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0dmFyIGluUmFuZ2UgPSBmYWxzZTtcblx0XHR2YXIgYm91bmRzID0gZ2V0QmFyQm91bmRzKG1lKTtcblxuXHRcdGlmIChpc1ZlcnRpY2FsKG1lKSkge1xuXHRcdFx0aW5SYW5nZSA9IG1vdXNlWCA+PSBib3VuZHMubGVmdCAmJiBtb3VzZVggPD0gYm91bmRzLnJpZ2h0O1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRpblJhbmdlID0gbW91c2VZID49IGJvdW5kcy50b3AgJiYgbW91c2VZIDw9IGJvdW5kcy5ib3R0b207XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGluUmFuZ2U7XG5cdH0sXG5cblx0aW5YUmFuZ2U6IGZ1bmN0aW9uKG1vdXNlWCkge1xuXHRcdHZhciBib3VuZHMgPSBnZXRCYXJCb3VuZHModGhpcyk7XG5cdFx0cmV0dXJuIG1vdXNlWCA+PSBib3VuZHMubGVmdCAmJiBtb3VzZVggPD0gYm91bmRzLnJpZ2h0O1xuXHR9LFxuXG5cdGluWVJhbmdlOiBmdW5jdGlvbihtb3VzZVkpIHtcblx0XHR2YXIgYm91bmRzID0gZ2V0QmFyQm91bmRzKHRoaXMpO1xuXHRcdHJldHVybiBtb3VzZVkgPj0gYm91bmRzLnRvcCAmJiBtb3VzZVkgPD0gYm91bmRzLmJvdHRvbTtcblx0fSxcblxuXHRnZXRDZW50ZXJQb2ludDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHZtID0gdGhpcy5fdmlldztcblx0XHR2YXIgeCwgeTtcblx0XHRpZiAoaXNWZXJ0aWNhbCh0aGlzKSkge1xuXHRcdFx0eCA9IHZtLng7XG5cdFx0XHR5ID0gKHZtLnkgKyB2bS5iYXNlKSAvIDI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHggPSAodm0ueCArIHZtLmJhc2UpIC8gMjtcblx0XHRcdHkgPSB2bS55O1xuXHRcdH1cblxuXHRcdHJldHVybiB7eDogeCwgeTogeX07XG5cdH0sXG5cblx0Z2V0QXJlYTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIHZtID0gdGhpcy5fdmlldztcblx0XHRyZXR1cm4gdm0ud2lkdGggKiBNYXRoLmFicyh2bS55IC0gdm0uYmFzZSk7XG5cdH0sXG5cblx0dG9vbHRpcFBvc2l0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgdm0gPSB0aGlzLl92aWV3O1xuXHRcdHJldHVybiB7XG5cdFx0XHR4OiB2bS54LFxuXHRcdFx0eTogdm0ueVxuXHRcdH07XG5cdH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHt9O1xubW9kdWxlLmV4cG9ydHMuQXJjID0gcmVxdWlyZSgnLi9lbGVtZW50LmFyYycpO1xubW9kdWxlLmV4cG9ydHMuTGluZSA9IHJlcXVpcmUoJy4vZWxlbWVudC5saW5lJyk7XG5tb2R1bGUuZXhwb3J0cy5Qb2ludCA9IHJlcXVpcmUoJy4vZWxlbWVudC5wb2ludCcpO1xubW9kdWxlLmV4cG9ydHMuUmVjdGFuZ2xlID0gcmVxdWlyZSgnLi9lbGVtZW50LnJlY3RhbmdsZScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGVscGVycyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaW5kZXgnKTtcblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IHJlbGF0aXZlIHBvc2l0aW9uIGZvciBhbiBldmVudFxuICogQHBhcmFtIHtFdmVudHxJRXZlbnR9IGV2ZW50IC0gVGhlIGV2ZW50IHRvIGdldCB0aGUgcG9zaXRpb24gZm9yXG4gKiBAcGFyYW0ge0NoYXJ0fSBjaGFydCAtIFRoZSBjaGFydFxuICogQHJldHVybnMge1BvaW50fSB0aGUgZXZlbnQgcG9zaXRpb25cbiAqL1xuZnVuY3Rpb24gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCkge1xuXHRpZiAoZS5uYXRpdmUpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0eDogZS54LFxuXHRcdFx0eTogZS55XG5cdFx0fTtcblx0fVxuXG5cdHJldHVybiBoZWxwZXJzLmdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xufVxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byB0cmF2ZXJzZSBhbGwgb2YgdGhlIHZpc2libGUgZWxlbWVudHMgaW4gdGhlIGNoYXJ0XG4gKiBAcGFyYW0gY2hhcnQge2NoYXJ0fSB0aGUgY2hhcnRcbiAqIEBwYXJhbSBoYW5kbGVyIHtGdW5jdGlvbn0gdGhlIGNhbGxiYWNrIHRvIGV4ZWN1dGUgZm9yIGVhY2ggdmlzaWJsZSBpdGVtXG4gKi9cbmZ1bmN0aW9uIHBhcnNlVmlzaWJsZUl0ZW1zKGNoYXJ0LCBoYW5kbGVyKSB7XG5cdHZhciBkYXRhc2V0cyA9IGNoYXJ0LmRhdGEuZGF0YXNldHM7XG5cdHZhciBtZXRhLCBpLCBqLCBpbGVuLCBqbGVuO1xuXG5cdGZvciAoaSA9IDAsIGlsZW4gPSBkYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRpZiAoIWNoYXJ0LmlzRGF0YXNldFZpc2libGUoaSkpIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YShpKTtcblx0XHRmb3IgKGogPSAwLCBqbGVuID0gbWV0YS5kYXRhLmxlbmd0aDsgaiA8IGpsZW47ICsraikge1xuXHRcdFx0dmFyIGVsZW1lbnQgPSBtZXRhLmRhdGFbal07XG5cdFx0XHRpZiAoIWVsZW1lbnQuX3ZpZXcuc2tpcCkge1xuXHRcdFx0XHRoYW5kbGVyKGVsZW1lbnQpO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG4vKipcbiAqIEhlbHBlciBmdW5jdGlvbiB0byBnZXQgdGhlIGl0ZW1zIHRoYXQgaW50ZXJzZWN0IHRoZSBldmVudCBwb3NpdGlvblxuICogQHBhcmFtIGl0ZW1zIHtDaGFydEVsZW1lbnRbXX0gZWxlbWVudHMgdG8gZmlsdGVyXG4gKiBAcGFyYW0gcG9zaXRpb24ge1BvaW50fSB0aGUgcG9pbnQgdG8gYmUgbmVhcmVzdCB0b1xuICogQHJldHVybiB7Q2hhcnRFbGVtZW50W119IHRoZSBuZWFyZXN0IGl0ZW1zXG4gKi9cbmZ1bmN0aW9uIGdldEludGVyc2VjdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbikge1xuXHR2YXIgZWxlbWVudHMgPSBbXTtcblxuXHRwYXJzZVZpc2libGVJdGVtcyhjaGFydCwgZnVuY3Rpb24oZWxlbWVudCkge1xuXHRcdGlmIChlbGVtZW50LmluUmFuZ2UocG9zaXRpb24ueCwgcG9zaXRpb24ueSkpIHtcblx0XHRcdGVsZW1lbnRzLnB1c2goZWxlbWVudCk7XG5cdFx0fVxuXHR9KTtcblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbi8qKlxuICogSGVscGVyIGZ1bmN0aW9uIHRvIGdldCB0aGUgaXRlbXMgbmVhcmVzdCB0byB0aGUgZXZlbnQgcG9zaXRpb24gY29uc2lkZXJpbmcgYWxsIHZpc2libGUgaXRlbXMgaW4gdGVoIGNoYXJ0XG4gKiBAcGFyYW0gY2hhcnQge0NoYXJ0fSB0aGUgY2hhcnQgdG8gbG9vayBhdCBlbGVtZW50cyBmcm9tXG4gKiBAcGFyYW0gcG9zaXRpb24ge1BvaW50fSB0aGUgcG9pbnQgdG8gYmUgbmVhcmVzdCB0b1xuICogQHBhcmFtIGludGVyc2VjdCB7Qm9vbGVhbn0gaWYgdHJ1ZSwgb25seSBjb25zaWRlciBpdGVtcyB0aGF0IGludGVyc2VjdCB0aGUgcG9zaXRpb25cbiAqIEBwYXJhbSBkaXN0YW5jZU1ldHJpYyB7RnVuY3Rpb259IGZ1bmN0aW9uIHRvIHByb3ZpZGUgdGhlIGRpc3RhbmNlIGJldHdlZW4gcG9pbnRzXG4gKiBAcmV0dXJuIHtDaGFydEVsZW1lbnRbXX0gdGhlIG5lYXJlc3QgaXRlbXNcbiAqL1xuZnVuY3Rpb24gZ2V0TmVhcmVzdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgaW50ZXJzZWN0LCBkaXN0YW5jZU1ldHJpYykge1xuXHR2YXIgbWluRGlzdGFuY2UgPSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XG5cdHZhciBuZWFyZXN0SXRlbXMgPSBbXTtcblxuXHRwYXJzZVZpc2libGVJdGVtcyhjaGFydCwgZnVuY3Rpb24oZWxlbWVudCkge1xuXHRcdGlmIChpbnRlcnNlY3QgJiYgIWVsZW1lbnQuaW5SYW5nZShwb3NpdGlvbi54LCBwb3NpdGlvbi55KSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBjZW50ZXIgPSBlbGVtZW50LmdldENlbnRlclBvaW50KCk7XG5cdFx0dmFyIGRpc3RhbmNlID0gZGlzdGFuY2VNZXRyaWMocG9zaXRpb24sIGNlbnRlcik7XG5cblx0XHRpZiAoZGlzdGFuY2UgPCBtaW5EaXN0YW5jZSkge1xuXHRcdFx0bmVhcmVzdEl0ZW1zID0gW2VsZW1lbnRdO1xuXHRcdFx0bWluRGlzdGFuY2UgPSBkaXN0YW5jZTtcblx0XHR9IGVsc2UgaWYgKGRpc3RhbmNlID09PSBtaW5EaXN0YW5jZSkge1xuXHRcdFx0Ly8gQ2FuIGhhdmUgbXVsdGlwbGUgaXRlbXMgYXQgdGhlIHNhbWUgZGlzdGFuY2UgaW4gd2hpY2ggY2FzZSB3ZSBzb3J0IGJ5IHNpemVcblx0XHRcdG5lYXJlc3RJdGVtcy5wdXNoKGVsZW1lbnQpO1xuXHRcdH1cblx0fSk7XG5cblx0cmV0dXJuIG5lYXJlc3RJdGVtcztcbn1cblxuLyoqXG4gKiBHZXQgYSBkaXN0YW5jZSBtZXRyaWMgZnVuY3Rpb24gZm9yIHR3byBwb2ludHMgYmFzZWQgb24gdGhlXG4gKiBheGlzIG1vZGUgc2V0dGluZ1xuICogQHBhcmFtIHtTdHJpbmd9IGF4aXMgdGhlIGF4aXMgbW9kZS4geHx5fHh5XG4gKi9cbmZ1bmN0aW9uIGdldERpc3RhbmNlTWV0cmljRm9yQXhpcyhheGlzKSB7XG5cdHZhciB1c2VYID0gYXhpcy5pbmRleE9mKCd4JykgIT09IC0xO1xuXHR2YXIgdXNlWSA9IGF4aXMuaW5kZXhPZigneScpICE9PSAtMTtcblxuXHRyZXR1cm4gZnVuY3Rpb24ocHQxLCBwdDIpIHtcblx0XHR2YXIgZGVsdGFYID0gdXNlWCA/IE1hdGguYWJzKHB0MS54IC0gcHQyLngpIDogMDtcblx0XHR2YXIgZGVsdGFZID0gdXNlWSA/IE1hdGguYWJzKHB0MS55IC0gcHQyLnkpIDogMDtcblx0XHRyZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KGRlbHRhWCwgMikgKyBNYXRoLnBvdyhkZWx0YVksIDIpKTtcblx0fTtcbn1cblxuZnVuY3Rpb24gaW5kZXhNb2RlKGNoYXJ0LCBlLCBvcHRpb25zKSB7XG5cdHZhciBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuXHQvLyBEZWZhdWx0IGF4aXMgZm9yIGluZGV4IG1vZGUgaXMgJ3gnIHRvIG1hdGNoIG9sZCBiZWhhdmlvdXJcblx0b3B0aW9ucy5heGlzID0gb3B0aW9ucy5heGlzIHx8ICd4Jztcblx0dmFyIGRpc3RhbmNlTWV0cmljID0gZ2V0RGlzdGFuY2VNZXRyaWNGb3JBeGlzKG9wdGlvbnMuYXhpcyk7XG5cdHZhciBpdGVtcyA9IG9wdGlvbnMuaW50ZXJzZWN0ID8gZ2V0SW50ZXJzZWN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uKSA6IGdldE5lYXJlc3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGZhbHNlLCBkaXN0YW5jZU1ldHJpYyk7XG5cdHZhciBlbGVtZW50cyA9IFtdO1xuXG5cdGlmICghaXRlbXMubGVuZ3RoKSB7XG5cdFx0cmV0dXJuIFtdO1xuXHR9XG5cblx0Y2hhcnQuZGF0YS5kYXRhc2V0cy5mb3JFYWNoKGZ1bmN0aW9uKGRhdGFzZXQsIGRhdGFzZXRJbmRleCkge1xuXHRcdGlmIChjaGFydC5pc0RhdGFzZXRWaXNpYmxlKGRhdGFzZXRJbmRleCkpIHtcblx0XHRcdHZhciBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcblx0XHRcdHZhciBlbGVtZW50ID0gbWV0YS5kYXRhW2l0ZW1zWzBdLl9pbmRleF07XG5cblx0XHRcdC8vIGRvbid0IGNvdW50IGl0ZW1zIHRoYXQgYXJlIHNraXBwZWQgKG51bGwgZGF0YSlcblx0XHRcdGlmIChlbGVtZW50ICYmICFlbGVtZW50Ll92aWV3LnNraXApIHtcblx0XHRcdFx0ZWxlbWVudHMucHVzaChlbGVtZW50KTtcblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdHJldHVybiBlbGVtZW50cztcbn1cblxuLyoqXG4gKiBAaW50ZXJmYWNlIElJbnRlcmFjdGlvbk9wdGlvbnNcbiAqL1xuLyoqXG4gKiBJZiB0cnVlLCBvbmx5IGNvbnNpZGVyIGl0ZW1zIHRoYXQgaW50ZXJzZWN0IHRoZSBwb2ludFxuICogQG5hbWUgSUludGVyZmFjZU9wdGlvbnMjYm9vbGVhblxuICogQHR5cGUgQm9vbGVhblxuICovXG5cbi8qKlxuICogQ29udGFpbnMgaW50ZXJhY3Rpb24gcmVsYXRlZCBmdW5jdGlvbnNcbiAqIEBuYW1lc3BhY2UgQ2hhcnQuSW50ZXJhY3Rpb25cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSB7XG5cdC8vIEhlbHBlciBmdW5jdGlvbiBmb3IgZGlmZmVyZW50IG1vZGVzXG5cdG1vZGVzOiB7XG5cdFx0c2luZ2xlOiBmdW5jdGlvbihjaGFydCwgZSkge1xuXHRcdFx0dmFyIHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG5cdFx0XHR2YXIgZWxlbWVudHMgPSBbXTtcblxuXHRcdFx0cGFyc2VWaXNpYmxlSXRlbXMoY2hhcnQsIGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0XHRcdFx0aWYgKGVsZW1lbnQuaW5SYW5nZShwb3NpdGlvbi54LCBwb3NpdGlvbi55KSkge1xuXHRcdFx0XHRcdGVsZW1lbnRzLnB1c2goZWxlbWVudCk7XG5cdFx0XHRcdFx0cmV0dXJuIGVsZW1lbnRzO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0cmV0dXJuIGVsZW1lbnRzLnNsaWNlKDAsIDEpO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBAZnVuY3Rpb24gQ2hhcnQuSW50ZXJhY3Rpb24ubW9kZXMubGFiZWxcblx0XHQgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuNC4wXG5cdFx0ICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0bGFiZWw6IGluZGV4TW9kZSxcblxuXHRcdC8qKlxuXHRcdCAqIFJldHVybnMgaXRlbXMgYXQgdGhlIHNhbWUgaW5kZXguIElmIHRoZSBvcHRpb25zLmludGVyc2VjdCBwYXJhbWV0ZXIgaXMgdHJ1ZSwgd2Ugb25seSByZXR1cm4gaXRlbXMgaWYgd2UgaW50ZXJzZWN0IHNvbWV0aGluZ1xuXHRcdCAqIElmIHRoZSBvcHRpb25zLmludGVyc2VjdCBtb2RlIGlzIGZhbHNlLCB3ZSBmaW5kIHRoZSBuZWFyZXN0IGl0ZW0gYW5kIHJldHVybiB0aGUgaXRlbXMgYXQgdGhlIHNhbWUgaW5kZXggYXMgdGhhdCBpdGVtXG5cdFx0ICogQGZ1bmN0aW9uIENoYXJ0LkludGVyYWN0aW9uLm1vZGVzLmluZGV4XG5cdFx0ICogQHNpbmNlIHYyLjQuMFxuXHRcdCAqIEBwYXJhbSBjaGFydCB7Y2hhcnR9IHRoZSBjaGFydCB3ZSBhcmUgcmV0dXJuaW5nIGl0ZW1zIGZyb21cblx0XHQgKiBAcGFyYW0gZSB7RXZlbnR9IHRoZSBldmVudCB3ZSBhcmUgZmluZCB0aGluZ3MgYXRcblx0XHQgKiBAcGFyYW0gb3B0aW9ucyB7SUludGVyYWN0aW9uT3B0aW9uc30gb3B0aW9ucyB0byB1c2UgZHVyaW5nIGludGVyYWN0aW9uXG5cdFx0ICogQHJldHVybiB7Q2hhcnQuRWxlbWVudFtdfSBBcnJheSBvZiBlbGVtZW50cyB0aGF0IGFyZSB1bmRlciB0aGUgcG9pbnQuIElmIG5vbmUgYXJlIGZvdW5kLCBhbiBlbXB0eSBhcnJheSBpcyByZXR1cm5lZFxuXHRcdCAqL1xuXHRcdGluZGV4OiBpbmRleE1vZGUsXG5cblx0XHQvKipcblx0XHQgKiBSZXR1cm5zIGl0ZW1zIGluIHRoZSBzYW1lIGRhdGFzZXQuIElmIHRoZSBvcHRpb25zLmludGVyc2VjdCBwYXJhbWV0ZXIgaXMgdHJ1ZSwgd2Ugb25seSByZXR1cm4gaXRlbXMgaWYgd2UgaW50ZXJzZWN0IHNvbWV0aGluZ1xuXHRcdCAqIElmIHRoZSBvcHRpb25zLmludGVyc2VjdCBpcyBmYWxzZSwgd2UgZmluZCB0aGUgbmVhcmVzdCBpdGVtIGFuZCByZXR1cm4gdGhlIGl0ZW1zIGluIHRoYXQgZGF0YXNldFxuXHRcdCAqIEBmdW5jdGlvbiBDaGFydC5JbnRlcmFjdGlvbi5tb2Rlcy5kYXRhc2V0XG5cdFx0ICogQHBhcmFtIGNoYXJ0IHtjaGFydH0gdGhlIGNoYXJ0IHdlIGFyZSByZXR1cm5pbmcgaXRlbXMgZnJvbVxuXHRcdCAqIEBwYXJhbSBlIHtFdmVudH0gdGhlIGV2ZW50IHdlIGFyZSBmaW5kIHRoaW5ncyBhdFxuXHRcdCAqIEBwYXJhbSBvcHRpb25zIHtJSW50ZXJhY3Rpb25PcHRpb25zfSBvcHRpb25zIHRvIHVzZSBkdXJpbmcgaW50ZXJhY3Rpb25cblx0XHQgKiBAcmV0dXJuIHtDaGFydC5FbGVtZW50W119IEFycmF5IG9mIGVsZW1lbnRzIHRoYXQgYXJlIHVuZGVyIHRoZSBwb2ludC4gSWYgbm9uZSBhcmUgZm91bmQsIGFuIGVtcHR5IGFycmF5IGlzIHJldHVybmVkXG5cdFx0ICovXG5cdFx0ZGF0YXNldDogZnVuY3Rpb24oY2hhcnQsIGUsIG9wdGlvbnMpIHtcblx0XHRcdHZhciBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuXHRcdFx0b3B0aW9ucy5heGlzID0gb3B0aW9ucy5heGlzIHx8ICd4eSc7XG5cdFx0XHR2YXIgZGlzdGFuY2VNZXRyaWMgPSBnZXREaXN0YW5jZU1ldHJpY0ZvckF4aXMob3B0aW9ucy5heGlzKTtcblx0XHRcdHZhciBpdGVtcyA9IG9wdGlvbnMuaW50ZXJzZWN0ID8gZ2V0SW50ZXJzZWN0SXRlbXMoY2hhcnQsIHBvc2l0aW9uKSA6IGdldE5lYXJlc3RJdGVtcyhjaGFydCwgcG9zaXRpb24sIGZhbHNlLCBkaXN0YW5jZU1ldHJpYyk7XG5cblx0XHRcdGlmIChpdGVtcy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdGl0ZW1zID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoaXRlbXNbMF0uX2RhdGFzZXRJbmRleCkuZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGl0ZW1zO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBAZnVuY3Rpb24gQ2hhcnQuSW50ZXJhY3Rpb24ubW9kZXMueC1heGlzXG5cdFx0ICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjQuMC4gVXNlIGluZGV4IG1vZGUgYW5kIGludGVyc2VjdCA9PSB0cnVlXG5cdFx0ICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0J3gtYXhpcyc6IGZ1bmN0aW9uKGNoYXJ0LCBlKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhNb2RlKGNoYXJ0LCBlLCB7aW50ZXJzZWN0OiBmYWxzZX0pO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBQb2ludCBtb2RlIHJldHVybnMgYWxsIGVsZW1lbnRzIHRoYXQgaGl0IHRlc3QgYmFzZWQgb24gdGhlIGV2ZW50IHBvc2l0aW9uXG5cdFx0ICogb2YgdGhlIGV2ZW50XG5cdFx0ICogQGZ1bmN0aW9uIENoYXJ0LkludGVyYWN0aW9uLm1vZGVzLmludGVyc2VjdFxuXHRcdCAqIEBwYXJhbSBjaGFydCB7Y2hhcnR9IHRoZSBjaGFydCB3ZSBhcmUgcmV0dXJuaW5nIGl0ZW1zIGZyb21cblx0XHQgKiBAcGFyYW0gZSB7RXZlbnR9IHRoZSBldmVudCB3ZSBhcmUgZmluZCB0aGluZ3MgYXRcblx0XHQgKiBAcmV0dXJuIHtDaGFydC5FbGVtZW50W119IEFycmF5IG9mIGVsZW1lbnRzIHRoYXQgYXJlIHVuZGVyIHRoZSBwb2ludC4gSWYgbm9uZSBhcmUgZm91bmQsIGFuIGVtcHR5IGFycmF5IGlzIHJldHVybmVkXG5cdFx0ICovXG5cdFx0cG9pbnQ6IGZ1bmN0aW9uKGNoYXJ0LCBlKSB7XG5cdFx0XHR2YXIgcG9zaXRpb24gPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGUsIGNoYXJ0KTtcblx0XHRcdHJldHVybiBnZXRJbnRlcnNlY3RJdGVtcyhjaGFydCwgcG9zaXRpb24pO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBuZWFyZXN0IG1vZGUgcmV0dXJucyB0aGUgZWxlbWVudCBjbG9zZXN0IHRvIHRoZSBwb2ludFxuXHRcdCAqIEBmdW5jdGlvbiBDaGFydC5JbnRlcmFjdGlvbi5tb2Rlcy5pbnRlcnNlY3Rcblx0XHQgKiBAcGFyYW0gY2hhcnQge2NoYXJ0fSB0aGUgY2hhcnQgd2UgYXJlIHJldHVybmluZyBpdGVtcyBmcm9tXG5cdFx0ICogQHBhcmFtIGUge0V2ZW50fSB0aGUgZXZlbnQgd2UgYXJlIGZpbmQgdGhpbmdzIGF0XG5cdFx0ICogQHBhcmFtIG9wdGlvbnMge0lJbnRlcmFjdGlvbk9wdGlvbnN9IG9wdGlvbnMgdG8gdXNlXG5cdFx0ICogQHJldHVybiB7Q2hhcnQuRWxlbWVudFtdfSBBcnJheSBvZiBlbGVtZW50cyB0aGF0IGFyZSB1bmRlciB0aGUgcG9pbnQuIElmIG5vbmUgYXJlIGZvdW5kLCBhbiBlbXB0eSBhcnJheSBpcyByZXR1cm5lZFxuXHRcdCAqL1xuXHRcdG5lYXJlc3Q6IGZ1bmN0aW9uKGNoYXJ0LCBlLCBvcHRpb25zKSB7XG5cdFx0XHR2YXIgcG9zaXRpb24gPSBnZXRSZWxhdGl2ZVBvc2l0aW9uKGUsIGNoYXJ0KTtcblx0XHRcdG9wdGlvbnMuYXhpcyA9IG9wdGlvbnMuYXhpcyB8fCAneHknO1xuXHRcdFx0dmFyIGRpc3RhbmNlTWV0cmljID0gZ2V0RGlzdGFuY2VNZXRyaWNGb3JBeGlzKG9wdGlvbnMuYXhpcyk7XG5cdFx0XHR2YXIgbmVhcmVzdEl0ZW1zID0gZ2V0TmVhcmVzdEl0ZW1zKGNoYXJ0LCBwb3NpdGlvbiwgb3B0aW9ucy5pbnRlcnNlY3QsIGRpc3RhbmNlTWV0cmljKTtcblxuXHRcdFx0Ly8gV2UgaGF2ZSBtdWx0aXBsZSBpdGVtcyBhdCB0aGUgc2FtZSBkaXN0YW5jZSBmcm9tIHRoZSBldmVudC4gTm93IHNvcnQgYnkgc21hbGxlc3Rcblx0XHRcdGlmIChuZWFyZXN0SXRlbXMubGVuZ3RoID4gMSkge1xuXHRcdFx0XHRuZWFyZXN0SXRlbXMuc29ydChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHRcdFx0dmFyIHNpemVBID0gYS5nZXRBcmVhKCk7XG5cdFx0XHRcdFx0dmFyIHNpemVCID0gYi5nZXRBcmVhKCk7XG5cdFx0XHRcdFx0dmFyIHJldCA9IHNpemVBIC0gc2l6ZUI7XG5cblx0XHRcdFx0XHRpZiAocmV0ID09PSAwKSB7XG5cdFx0XHRcdFx0XHQvLyBpZiBlcXVhbCBzb3J0IGJ5IGRhdGFzZXQgaW5kZXhcblx0XHRcdFx0XHRcdHJldCA9IGEuX2RhdGFzZXRJbmRleCAtIGIuX2RhdGFzZXRJbmRleDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmV0dXJuIG9ubHkgMSBpdGVtXG5cdFx0XHRyZXR1cm4gbmVhcmVzdEl0ZW1zLnNsaWNlKDAsIDEpO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiB4IG1vZGUgcmV0dXJucyB0aGUgZWxlbWVudHMgdGhhdCBoaXQtdGVzdCBhdCB0aGUgY3VycmVudCB4IGNvb3JkaW5hdGVcblx0XHQgKiBAZnVuY3Rpb24gQ2hhcnQuSW50ZXJhY3Rpb24ubW9kZXMueFxuXHRcdCAqIEBwYXJhbSBjaGFydCB7Y2hhcnR9IHRoZSBjaGFydCB3ZSBhcmUgcmV0dXJuaW5nIGl0ZW1zIGZyb21cblx0XHQgKiBAcGFyYW0gZSB7RXZlbnR9IHRoZSBldmVudCB3ZSBhcmUgZmluZCB0aGluZ3MgYXRcblx0XHQgKiBAcGFyYW0gb3B0aW9ucyB7SUludGVyYWN0aW9uT3B0aW9uc30gb3B0aW9ucyB0byB1c2Vcblx0XHQgKiBAcmV0dXJuIHtDaGFydC5FbGVtZW50W119IEFycmF5IG9mIGVsZW1lbnRzIHRoYXQgYXJlIHVuZGVyIHRoZSBwb2ludC4gSWYgbm9uZSBhcmUgZm91bmQsIGFuIGVtcHR5IGFycmF5IGlzIHJldHVybmVkXG5cdFx0ICovXG5cdFx0eDogZnVuY3Rpb24oY2hhcnQsIGUsIG9wdGlvbnMpIHtcblx0XHRcdHZhciBwb3NpdGlvbiA9IGdldFJlbGF0aXZlUG9zaXRpb24oZSwgY2hhcnQpO1xuXHRcdFx0dmFyIGl0ZW1zID0gW107XG5cdFx0XHR2YXIgaW50ZXJzZWN0c0l0ZW0gPSBmYWxzZTtcblxuXHRcdFx0cGFyc2VWaXNpYmxlSXRlbXMoY2hhcnQsIGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0XHRcdFx0aWYgKGVsZW1lbnQuaW5YUmFuZ2UocG9zaXRpb24ueCkpIHtcblx0XHRcdFx0XHRpdGVtcy5wdXNoKGVsZW1lbnQpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKGVsZW1lbnQuaW5SYW5nZShwb3NpdGlvbi54LCBwb3NpdGlvbi55KSkge1xuXHRcdFx0XHRcdGludGVyc2VjdHNJdGVtID0gdHJ1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdC8vIElmIHdlIHdhbnQgdG8gdHJpZ2dlciBvbiBhbiBpbnRlcnNlY3QgYW5kIHdlIGRvbid0IGhhdmUgYW55IGl0ZW1zXG5cdFx0XHQvLyB0aGF0IGludGVyc2VjdCB0aGUgcG9zaXRpb24sIHJldHVybiBub3RoaW5nXG5cdFx0XHRpZiAob3B0aW9ucy5pbnRlcnNlY3QgJiYgIWludGVyc2VjdHNJdGVtKSB7XG5cdFx0XHRcdGl0ZW1zID0gW107XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gaXRlbXM7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIHkgbW9kZSByZXR1cm5zIHRoZSBlbGVtZW50cyB0aGF0IGhpdC10ZXN0IGF0IHRoZSBjdXJyZW50IHkgY29vcmRpbmF0ZVxuXHRcdCAqIEBmdW5jdGlvbiBDaGFydC5JbnRlcmFjdGlvbi5tb2Rlcy55XG5cdFx0ICogQHBhcmFtIGNoYXJ0IHtjaGFydH0gdGhlIGNoYXJ0IHdlIGFyZSByZXR1cm5pbmcgaXRlbXMgZnJvbVxuXHRcdCAqIEBwYXJhbSBlIHtFdmVudH0gdGhlIGV2ZW50IHdlIGFyZSBmaW5kIHRoaW5ncyBhdFxuXHRcdCAqIEBwYXJhbSBvcHRpb25zIHtJSW50ZXJhY3Rpb25PcHRpb25zfSBvcHRpb25zIHRvIHVzZVxuXHRcdCAqIEByZXR1cm4ge0NoYXJ0LkVsZW1lbnRbXX0gQXJyYXkgb2YgZWxlbWVudHMgdGhhdCBhcmUgdW5kZXIgdGhlIHBvaW50LiBJZiBub25lIGFyZSBmb3VuZCwgYW4gZW1wdHkgYXJyYXkgaXMgcmV0dXJuZWRcblx0XHQgKi9cblx0XHR5OiBmdW5jdGlvbihjaGFydCwgZSwgb3B0aW9ucykge1xuXHRcdFx0dmFyIHBvc2l0aW9uID0gZ2V0UmVsYXRpdmVQb3NpdGlvbihlLCBjaGFydCk7XG5cdFx0XHR2YXIgaXRlbXMgPSBbXTtcblx0XHRcdHZhciBpbnRlcnNlY3RzSXRlbSA9IGZhbHNlO1xuXG5cdFx0XHRwYXJzZVZpc2libGVJdGVtcyhjaGFydCwgZnVuY3Rpb24oZWxlbWVudCkge1xuXHRcdFx0XHRpZiAoZWxlbWVudC5pbllSYW5nZShwb3NpdGlvbi55KSkge1xuXHRcdFx0XHRcdGl0ZW1zLnB1c2goZWxlbWVudCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoZWxlbWVudC5pblJhbmdlKHBvc2l0aW9uLngsIHBvc2l0aW9uLnkpKSB7XG5cdFx0XHRcdFx0aW50ZXJzZWN0c0l0ZW0gPSB0cnVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gSWYgd2Ugd2FudCB0byB0cmlnZ2VyIG9uIGFuIGludGVyc2VjdCBhbmQgd2UgZG9uJ3QgaGF2ZSBhbnkgaXRlbXNcblx0XHRcdC8vIHRoYXQgaW50ZXJzZWN0IHRoZSBwb3NpdGlvbiwgcmV0dXJuIG5vdGhpbmdcblx0XHRcdGlmIChvcHRpb25zLmludGVyc2VjdCAmJiAhaW50ZXJzZWN0c0l0ZW0pIHtcblx0XHRcdFx0aXRlbXMgPSBbXTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBpdGVtcztcblx0XHR9XG5cdH1cbn07XG4iLCIvKipcbiAqIFBsYXRmb3JtIGZhbGxiYWNrIGltcGxlbWVudGF0aW9uIChtaW5pbWFsKS5cbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvcHVsbC80NTkxI2lzc3VlY29tbWVudC0zMTk1NzU5MzlcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0YWNxdWlyZUNvbnRleHQ6IGZ1bmN0aW9uKGl0ZW0pIHtcblx0XHRpZiAoaXRlbSAmJiBpdGVtLmNhbnZhcykge1xuXHRcdFx0Ly8gU3VwcG9ydCBmb3IgYW55IG9iamVjdCBhc3NvY2lhdGVkIHRvIGEgY2FudmFzIChpbmNsdWRpbmcgYSBjb250ZXh0MmQpXG5cdFx0XHRpdGVtID0gaXRlbS5jYW52YXM7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGl0ZW0gJiYgaXRlbS5nZXRDb250ZXh0KCcyZCcpIHx8IG51bGw7XG5cdH1cbn07XG4iLCIvKipcbiAqIENoYXJ0LlBsYXRmb3JtIGltcGxlbWVudGF0aW9uIGZvciB0YXJnZXRpbmcgYSB3ZWIgYnJvd3NlclxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2luZGV4Jyk7XG5cbnZhciBFWFBBTkRPX0tFWSA9ICckY2hhcnRqcyc7XG52YXIgQ1NTX1BSRUZJWCA9ICdjaGFydGpzLSc7XG52YXIgQ1NTX1JFTkRFUl9NT05JVE9SID0gQ1NTX1BSRUZJWCArICdyZW5kZXItbW9uaXRvcic7XG52YXIgQ1NTX1JFTkRFUl9BTklNQVRJT04gPSBDU1NfUFJFRklYICsgJ3JlbmRlci1hbmltYXRpb24nO1xudmFyIEFOSU1BVElPTl9TVEFSVF9FVkVOVFMgPSBbJ2FuaW1hdGlvbnN0YXJ0JywgJ3dlYmtpdEFuaW1hdGlvblN0YXJ0J107XG5cbi8qKlxuICogRE9NIGV2ZW50IHR5cGVzIC0+IENoYXJ0LmpzIGV2ZW50IHR5cGVzLlxuICogTm90ZTogb25seSBldmVudHMgd2l0aCBkaWZmZXJlbnQgdHlwZXMgYXJlIG1hcHBlZC5cbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvRXZlbnRzXG4gKi9cbnZhciBFVkVOVF9UWVBFUyA9IHtcblx0dG91Y2hzdGFydDogJ21vdXNlZG93bicsXG5cdHRvdWNobW92ZTogJ21vdXNlbW92ZScsXG5cdHRvdWNoZW5kOiAnbW91c2V1cCcsXG5cdHBvaW50ZXJlbnRlcjogJ21vdXNlZW50ZXInLFxuXHRwb2ludGVyZG93bjogJ21vdXNlZG93bicsXG5cdHBvaW50ZXJtb3ZlOiAnbW91c2Vtb3ZlJyxcblx0cG9pbnRlcnVwOiAnbW91c2V1cCcsXG5cdHBvaW50ZXJsZWF2ZTogJ21vdXNlb3V0Jyxcblx0cG9pbnRlcm91dDogJ21vdXNlb3V0J1xufTtcblxuLyoqXG4gKiBUaGUgXCJ1c2VkXCIgc2l6ZSBpcyB0aGUgZmluYWwgdmFsdWUgb2YgYSBkaW1lbnNpb24gcHJvcGVydHkgYWZ0ZXIgYWxsIGNhbGN1bGF0aW9ucyBoYXZlXG4gKiBiZWVuIHBlcmZvcm1lZC4gVGhpcyBtZXRob2QgdXNlcyB0aGUgY29tcHV0ZWQgc3R5bGUgb2YgYGVsZW1lbnRgIGJ1dCByZXR1cm5zIHVuZGVmaW5lZFxuICogaWYgdGhlIGNvbXB1dGVkIHN0eWxlIGlzIG5vdCBleHByZXNzZWQgaW4gcGl4ZWxzLiBUaGF0IGNhbiBoYXBwZW4gaW4gc29tZSBjYXNlcyB3aGVyZVxuICogYGVsZW1lbnRgIGhhcyBhIHNpemUgcmVsYXRpdmUgdG8gaXRzIHBhcmVudCBhbmQgdGhpcyBsYXN0IG9uZSBpcyBub3QgeWV0IGRpc3BsYXllZCxcbiAqIGZvciBleGFtcGxlIGJlY2F1c2Ugb2YgYGRpc3BsYXk6IG5vbmVgIG9uIGEgcGFyZW50IG5vZGUuXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0NTUy91c2VkX3ZhbHVlXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBTaXplIGluIHBpeGVscyBvciB1bmRlZmluZWQgaWYgdW5rbm93bi5cbiAqL1xuZnVuY3Rpb24gcmVhZFVzZWRTaXplKGVsZW1lbnQsIHByb3BlcnR5KSB7XG5cdHZhciB2YWx1ZSA9IGhlbHBlcnMuZ2V0U3R5bGUoZWxlbWVudCwgcHJvcGVydHkpO1xuXHR2YXIgbWF0Y2hlcyA9IHZhbHVlICYmIHZhbHVlLm1hdGNoKC9eKFxcZCspKFxcLlxcZCspP3B4JC8pO1xuXHRyZXR1cm4gbWF0Y2hlcyA/IE51bWJlcihtYXRjaGVzWzFdKSA6IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBJbml0aWFsaXplcyB0aGUgY2FudmFzIHN0eWxlIGFuZCByZW5kZXIgc2l6ZSB3aXRob3V0IG1vZGlmeWluZyB0aGUgY2FudmFzIGRpc3BsYXkgc2l6ZSxcbiAqIHNpbmNlIHJlc3BvbnNpdmVuZXNzIGlzIGhhbmRsZWQgYnkgdGhlIGNvbnRyb2xsZXIucmVzaXplKCkgbWV0aG9kLiBUaGUgY29uZmlnIGlzIHVzZWRcbiAqIHRvIGRldGVybWluZSB0aGUgYXNwZWN0IHJhdGlvIHRvIGFwcGx5IGluIGNhc2Ugbm8gZXhwbGljaXQgaGVpZ2h0IGhhcyBiZWVuIHNwZWNpZmllZC5cbiAqL1xuZnVuY3Rpb24gaW5pdENhbnZhcyhjYW52YXMsIGNvbmZpZykge1xuXHR2YXIgc3R5bGUgPSBjYW52YXMuc3R5bGU7XG5cblx0Ly8gTk9URShTQikgY2FudmFzLmdldEF0dHJpYnV0ZSgnd2lkdGgnKSAhPT0gY2FudmFzLndpZHRoOiBpbiB0aGUgZmlyc3QgY2FzZSBpdFxuXHQvLyByZXR1cm5zIG51bGwgb3IgJycgaWYgbm8gZXhwbGljaXQgdmFsdWUgaGFzIGJlZW4gc2V0IHRvIHRoZSBjYW52YXMgYXR0cmlidXRlLlxuXHR2YXIgcmVuZGVySGVpZ2h0ID0gY2FudmFzLmdldEF0dHJpYnV0ZSgnaGVpZ2h0Jyk7XG5cdHZhciByZW5kZXJXaWR0aCA9IGNhbnZhcy5nZXRBdHRyaWJ1dGUoJ3dpZHRoJyk7XG5cblx0Ly8gQ2hhcnQuanMgbW9kaWZpZXMgc29tZSBjYW52YXMgdmFsdWVzIHRoYXQgd2Ugd2FudCB0byByZXN0b3JlIG9uIGRlc3Ryb3lcblx0Y2FudmFzW0VYUEFORE9fS0VZXSA9IHtcblx0XHRpbml0aWFsOiB7XG5cdFx0XHRoZWlnaHQ6IHJlbmRlckhlaWdodCxcblx0XHRcdHdpZHRoOiByZW5kZXJXaWR0aCxcblx0XHRcdHN0eWxlOiB7XG5cdFx0XHRcdGRpc3BsYXk6IHN0eWxlLmRpc3BsYXksXG5cdFx0XHRcdGhlaWdodDogc3R5bGUuaGVpZ2h0LFxuXHRcdFx0XHR3aWR0aDogc3R5bGUud2lkdGhcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0Ly8gRm9yY2UgY2FudmFzIHRvIGRpc3BsYXkgYXMgYmxvY2sgdG8gYXZvaWQgZXh0cmEgc3BhY2UgY2F1c2VkIGJ5IGlubGluZVxuXHQvLyBlbGVtZW50cywgd2hpY2ggd291bGQgaW50ZXJmZXJlIHdpdGggdGhlIHJlc3BvbnNpdmUgcmVzaXplIHByb2Nlc3MuXG5cdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy8yNTM4XG5cdHN0eWxlLmRpc3BsYXkgPSBzdHlsZS5kaXNwbGF5IHx8ICdibG9jayc7XG5cblx0aWYgKHJlbmRlcldpZHRoID09PSBudWxsIHx8IHJlbmRlcldpZHRoID09PSAnJykge1xuXHRcdHZhciBkaXNwbGF5V2lkdGggPSByZWFkVXNlZFNpemUoY2FudmFzLCAnd2lkdGgnKTtcblx0XHRpZiAoZGlzcGxheVdpZHRoICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdGNhbnZhcy53aWR0aCA9IGRpc3BsYXlXaWR0aDtcblx0XHR9XG5cdH1cblxuXHRpZiAocmVuZGVySGVpZ2h0ID09PSBudWxsIHx8IHJlbmRlckhlaWdodCA9PT0gJycpIHtcblx0XHRpZiAoY2FudmFzLnN0eWxlLmhlaWdodCA9PT0gJycpIHtcblx0XHRcdC8vIElmIG5vIGV4cGxpY2l0IHJlbmRlciBoZWlnaHQgYW5kIHN0eWxlIGhlaWdodCwgbGV0J3MgYXBwbHkgdGhlIGFzcGVjdCByYXRpbyxcblx0XHRcdC8vIHdoaWNoIG9uZSBjYW4gYmUgc3BlY2lmaWVkIGJ5IHRoZSB1c2VyIGJ1dCBhbHNvIGJ5IGNoYXJ0cyBhcyBkZWZhdWx0IG9wdGlvblxuXHRcdFx0Ly8gKGkuZS4gb3B0aW9ucy5hc3BlY3RSYXRpbykuIElmIG5vdCBzcGVjaWZpZWQsIHVzZSBjYW52YXMgYXNwZWN0IHJhdGlvIG9mIDIuXG5cdFx0XHRjYW52YXMuaGVpZ2h0ID0gY2FudmFzLndpZHRoIC8gKGNvbmZpZy5vcHRpb25zLmFzcGVjdFJhdGlvIHx8IDIpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR2YXIgZGlzcGxheUhlaWdodCA9IHJlYWRVc2VkU2l6ZShjYW52YXMsICdoZWlnaHQnKTtcblx0XHRcdGlmIChkaXNwbGF5V2lkdGggIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRjYW52YXMuaGVpZ2h0ID0gZGlzcGxheUhlaWdodDtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY2FudmFzO1xufVxuXG4vKipcbiAqIERldGVjdHMgc3VwcG9ydCBmb3Igb3B0aW9ucyBvYmplY3QgYXJndW1lbnQgaW4gYWRkRXZlbnRMaXN0ZW5lci5cbiAqIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FdmVudFRhcmdldC9hZGRFdmVudExpc3RlbmVyI1NhZmVseV9kZXRlY3Rpbmdfb3B0aW9uX3N1cHBvcnRcbiAqIEBwcml2YXRlXG4gKi9cbnZhciBzdXBwb3J0c0V2ZW50TGlzdGVuZXJPcHRpb25zID0gKGZ1bmN0aW9uKCkge1xuXHR2YXIgc3VwcG9ydHMgPSBmYWxzZTtcblx0dHJ5IHtcblx0XHR2YXIgb3B0aW9ucyA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgJ3Bhc3NpdmUnLCB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzdXBwb3J0cyA9IHRydWU7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ2UnLCBudWxsLCBvcHRpb25zKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdC8vIGNvbnRpbnVlIHJlZ2FyZGxlc3Mgb2YgZXJyb3Jcblx0fVxuXHRyZXR1cm4gc3VwcG9ydHM7XG59KCkpO1xuXG4vLyBEZWZhdWx0IHBhc3NpdmUgdG8gdHJ1ZSBhcyBleHBlY3RlZCBieSBDaHJvbWUgZm9yICd0b3VjaHN0YXJ0JyBhbmQgJ3RvdWNoZW5kJyBldmVudHMuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9pc3N1ZXMvNDI4N1xudmFyIGV2ZW50TGlzdGVuZXJPcHRpb25zID0gc3VwcG9ydHNFdmVudExpc3RlbmVyT3B0aW9ucyA/IHtwYXNzaXZlOiB0cnVlfSA6IGZhbHNlO1xuXG5mdW5jdGlvbiBhZGRFdmVudExpc3RlbmVyKG5vZGUsIHR5cGUsIGxpc3RlbmVyKSB7XG5cdG5vZGUuYWRkRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgZXZlbnRMaXN0ZW5lck9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKG5vZGUsIHR5cGUsIGxpc3RlbmVyKSB7XG5cdG5vZGUucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lciwgZXZlbnRMaXN0ZW5lck9wdGlvbnMpO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVFdmVudCh0eXBlLCBjaGFydCwgeCwgeSwgbmF0aXZlRXZlbnQpIHtcblx0cmV0dXJuIHtcblx0XHR0eXBlOiB0eXBlLFxuXHRcdGNoYXJ0OiBjaGFydCxcblx0XHRuYXRpdmU6IG5hdGl2ZUV2ZW50IHx8IG51bGwsXG5cdFx0eDogeCAhPT0gdW5kZWZpbmVkID8geCA6IG51bGwsXG5cdFx0eTogeSAhPT0gdW5kZWZpbmVkID8geSA6IG51bGwsXG5cdH07XG59XG5cbmZ1bmN0aW9uIGZyb21OYXRpdmVFdmVudChldmVudCwgY2hhcnQpIHtcblx0dmFyIHR5cGUgPSBFVkVOVF9UWVBFU1tldmVudC50eXBlXSB8fCBldmVudC50eXBlO1xuXHR2YXIgcG9zID0gaGVscGVycy5nZXRSZWxhdGl2ZVBvc2l0aW9uKGV2ZW50LCBjaGFydCk7XG5cdHJldHVybiBjcmVhdGVFdmVudCh0eXBlLCBjaGFydCwgcG9zLngsIHBvcy55LCBldmVudCk7XG59XG5cbmZ1bmN0aW9uIHRocm90dGxlZChmbiwgdGhpc0FyZykge1xuXHR2YXIgdGlja2luZyA9IGZhbHNlO1xuXHR2YXIgYXJncyA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcblx0XHR0aGlzQXJnID0gdGhpc0FyZyB8fCB0aGlzO1xuXG5cdFx0aWYgKCF0aWNraW5nKSB7XG5cdFx0XHR0aWNraW5nID0gdHJ1ZTtcblx0XHRcdGhlbHBlcnMucmVxdWVzdEFuaW1GcmFtZS5jYWxsKHdpbmRvdywgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHRpY2tpbmcgPSBmYWxzZTtcblx0XHRcdFx0Zm4uYXBwbHkodGhpc0FyZywgYXJncyk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdH07XG59XG5cbi8vIEltcGxlbWVudGF0aW9uIGJhc2VkIG9uIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXJjai9jc3MtZWxlbWVudC1xdWVyaWVzXG5mdW5jdGlvbiBjcmVhdGVSZXNpemVyKGhhbmRsZXIpIHtcblx0dmFyIHJlc2l6ZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcblx0dmFyIGNscyA9IENTU19QUkVGSVggKyAnc2l6ZS1tb25pdG9yJztcblx0dmFyIG1heFNpemUgPSAxMDAwMDAwO1xuXHR2YXIgc3R5bGUgPVxuXHRcdCdwb3NpdGlvbjphYnNvbHV0ZTsnICtcblx0XHQnbGVmdDowOycgK1xuXHRcdCd0b3A6MDsnICtcblx0XHQncmlnaHQ6MDsnICtcblx0XHQnYm90dG9tOjA7JyArXG5cdFx0J292ZXJmbG93OmhpZGRlbjsnICtcblx0XHQncG9pbnRlci1ldmVudHM6bm9uZTsnICtcblx0XHQndmlzaWJpbGl0eTpoaWRkZW47JyArXG5cdFx0J3otaW5kZXg6LTE7JztcblxuXHRyZXNpemVyLnN0eWxlLmNzc1RleHQgPSBzdHlsZTtcblx0cmVzaXplci5jbGFzc05hbWUgPSBjbHM7XG5cdHJlc2l6ZXIuaW5uZXJIVE1MID1cblx0XHQnPGRpdiBjbGFzcz1cIicgKyBjbHMgKyAnLWV4cGFuZFwiIHN0eWxlPVwiJyArIHN0eWxlICsgJ1wiPicgK1xuXHRcdFx0JzxkaXYgc3R5bGU9XCInICtcblx0XHRcdFx0J3Bvc2l0aW9uOmFic29sdXRlOycgK1xuXHRcdFx0XHQnd2lkdGg6JyArIG1heFNpemUgKyAncHg7JyArXG5cdFx0XHRcdCdoZWlnaHQ6JyArIG1heFNpemUgKyAncHg7JyArXG5cdFx0XHRcdCdsZWZ0OjA7JyArXG5cdFx0XHRcdCd0b3A6MFwiPicgK1xuXHRcdFx0JzwvZGl2PicgK1xuXHRcdCc8L2Rpdj4nICtcblx0XHQnPGRpdiBjbGFzcz1cIicgKyBjbHMgKyAnLXNocmlua1wiIHN0eWxlPVwiJyArIHN0eWxlICsgJ1wiPicgK1xuXHRcdFx0JzxkaXYgc3R5bGU9XCInICtcblx0XHRcdFx0J3Bvc2l0aW9uOmFic29sdXRlOycgK1xuXHRcdFx0XHQnd2lkdGg6MjAwJTsnICtcblx0XHRcdFx0J2hlaWdodDoyMDAlOycgK1xuXHRcdFx0XHQnbGVmdDowOyAnICtcblx0XHRcdFx0J3RvcDowXCI+JyArXG5cdFx0XHQnPC9kaXY+JyArXG5cdFx0JzwvZGl2Pic7XG5cblx0dmFyIGV4cGFuZCA9IHJlc2l6ZXIuY2hpbGROb2Rlc1swXTtcblx0dmFyIHNocmluayA9IHJlc2l6ZXIuY2hpbGROb2Rlc1sxXTtcblxuXHRyZXNpemVyLl9yZXNldCA9IGZ1bmN0aW9uKCkge1xuXHRcdGV4cGFuZC5zY3JvbGxMZWZ0ID0gbWF4U2l6ZTtcblx0XHRleHBhbmQuc2Nyb2xsVG9wID0gbWF4U2l6ZTtcblx0XHRzaHJpbmsuc2Nyb2xsTGVmdCA9IG1heFNpemU7XG5cdFx0c2hyaW5rLnNjcm9sbFRvcCA9IG1heFNpemU7XG5cdH07XG5cdHZhciBvblNjcm9sbCA9IGZ1bmN0aW9uKCkge1xuXHRcdHJlc2l6ZXIuX3Jlc2V0KCk7XG5cdFx0aGFuZGxlcigpO1xuXHR9O1xuXG5cdGFkZEV2ZW50TGlzdGVuZXIoZXhwYW5kLCAnc2Nyb2xsJywgb25TY3JvbGwuYmluZChleHBhbmQsICdleHBhbmQnKSk7XG5cdGFkZEV2ZW50TGlzdGVuZXIoc2hyaW5rLCAnc2Nyb2xsJywgb25TY3JvbGwuYmluZChzaHJpbmssICdzaHJpbmsnKSk7XG5cblx0cmV0dXJuIHJlc2l6ZXI7XG59XG5cbi8vIGh0dHBzOi8vZGF2aWR3YWxzaC5uYW1lL2RldGVjdC1ub2RlLWluc2VydGlvblxuZnVuY3Rpb24gd2F0Y2hGb3JSZW5kZXIobm9kZSwgaGFuZGxlcikge1xuXHR2YXIgZXhwYW5kbyA9IG5vZGVbRVhQQU5ET19LRVldIHx8IChub2RlW0VYUEFORE9fS0VZXSA9IHt9KTtcblx0dmFyIHByb3h5ID0gZXhwYW5kby5yZW5kZXJQcm94eSA9IGZ1bmN0aW9uKGUpIHtcblx0XHRpZiAoZS5hbmltYXRpb25OYW1lID09PSBDU1NfUkVOREVSX0FOSU1BVElPTikge1xuXHRcdFx0aGFuZGxlcigpO1xuXHRcdH1cblx0fTtcblxuXHRoZWxwZXJzLmVhY2goQU5JTUFUSU9OX1NUQVJUX0VWRU5UUywgZnVuY3Rpb24odHlwZSkge1xuXHRcdGFkZEV2ZW50TGlzdGVuZXIobm9kZSwgdHlwZSwgcHJveHkpO1xuXHR9KTtcblxuXHQvLyAjNDczNzogQ2hyb21lIG1pZ2h0IHNraXAgdGhlIENTUyBhbmltYXRpb24gd2hlbiB0aGUgQ1NTX1JFTkRFUl9NT05JVE9SIGNsYXNzXG5cdC8vIGlzIHJlbW92ZWQgdGhlbiBhZGRlZCBiYWNrIGltbWVkaWF0ZWx5IChzYW1lIGFuaW1hdGlvbiBmcmFtZT8pLiBBY2Nlc3NpbmcgdGhlXG5cdC8vIGBvZmZzZXRQYXJlbnRgIHByb3BlcnR5IHdpbGwgZm9yY2UgYSByZWZsb3cgYW5kIHJlLWV2YWx1YXRlIHRoZSBDU1MgYW5pbWF0aW9uLlxuXHQvLyBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9wYXVsaXJpc2gvNWQ1MmZiMDgxYjM1NzBjODFlM2EjYm94LW1ldHJpY3Ncblx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzQ3Mzdcblx0ZXhwYW5kby5yZWZsb3cgPSAhIW5vZGUub2Zmc2V0UGFyZW50O1xuXG5cdG5vZGUuY2xhc3NMaXN0LmFkZChDU1NfUkVOREVSX01PTklUT1IpO1xufVxuXG5mdW5jdGlvbiB1bndhdGNoRm9yUmVuZGVyKG5vZGUpIHtcblx0dmFyIGV4cGFuZG8gPSBub2RlW0VYUEFORE9fS0VZXSB8fCB7fTtcblx0dmFyIHByb3h5ID0gZXhwYW5kby5yZW5kZXJQcm94eTtcblxuXHRpZiAocHJveHkpIHtcblx0XHRoZWxwZXJzLmVhY2goQU5JTUFUSU9OX1NUQVJUX0VWRU5UUywgZnVuY3Rpb24odHlwZSkge1xuXHRcdFx0cmVtb3ZlRXZlbnRMaXN0ZW5lcihub2RlLCB0eXBlLCBwcm94eSk7XG5cdFx0fSk7XG5cblx0XHRkZWxldGUgZXhwYW5kby5yZW5kZXJQcm94eTtcblx0fVxuXG5cdG5vZGUuY2xhc3NMaXN0LnJlbW92ZShDU1NfUkVOREVSX01PTklUT1IpO1xufVxuXG5mdW5jdGlvbiBhZGRSZXNpemVMaXN0ZW5lcihub2RlLCBsaXN0ZW5lciwgY2hhcnQpIHtcblx0dmFyIGV4cGFuZG8gPSBub2RlW0VYUEFORE9fS0VZXSB8fCAobm9kZVtFWFBBTkRPX0tFWV0gPSB7fSk7XG5cblx0Ly8gTGV0J3Mga2VlcCB0cmFjayBvZiB0aGlzIGFkZGVkIHJlc2l6ZXIgYW5kIHRodXMgYXZvaWQgRE9NIHF1ZXJ5IHdoZW4gcmVtb3ZpbmcgaXQuXG5cdHZhciByZXNpemVyID0gZXhwYW5kby5yZXNpemVyID0gY3JlYXRlUmVzaXplcih0aHJvdHRsZWQoZnVuY3Rpb24oKSB7XG5cdFx0aWYgKGV4cGFuZG8ucmVzaXplcikge1xuXHRcdFx0cmV0dXJuIGxpc3RlbmVyKGNyZWF0ZUV2ZW50KCdyZXNpemUnLCBjaGFydCkpO1xuXHRcdH1cblx0fSkpO1xuXG5cdC8vIFRoZSByZXNpemVyIG5lZWRzIHRvIGJlIGF0dGFjaGVkIHRvIHRoZSBub2RlIHBhcmVudCwgc28gd2UgZmlyc3QgbmVlZCB0byBiZVxuXHQvLyBzdXJlIHRoYXQgYG5vZGVgIGlzIGF0dGFjaGVkIHRvIHRoZSBET00gYmVmb3JlIGluamVjdGluZyB0aGUgcmVzaXplciBlbGVtZW50LlxuXHR3YXRjaEZvclJlbmRlcihub2RlLCBmdW5jdGlvbigpIHtcblx0XHRpZiAoZXhwYW5kby5yZXNpemVyKSB7XG5cdFx0XHR2YXIgY29udGFpbmVyID0gbm9kZS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKGNvbnRhaW5lciAmJiBjb250YWluZXIgIT09IHJlc2l6ZXIucGFyZW50Tm9kZSkge1xuXHRcdFx0XHRjb250YWluZXIuaW5zZXJ0QmVmb3JlKHJlc2l6ZXIsIGNvbnRhaW5lci5maXJzdENoaWxkKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGhlIGNvbnRhaW5lciBzaXplIG1pZ2h0IGhhdmUgY2hhbmdlZCwgbGV0J3MgcmVzZXQgdGhlIHJlc2l6ZXIgc3RhdGUuXG5cdFx0XHRyZXNpemVyLl9yZXNldCgpO1xuXHRcdH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVJlc2l6ZUxpc3RlbmVyKG5vZGUpIHtcblx0dmFyIGV4cGFuZG8gPSBub2RlW0VYUEFORE9fS0VZXSB8fCB7fTtcblx0dmFyIHJlc2l6ZXIgPSBleHBhbmRvLnJlc2l6ZXI7XG5cblx0ZGVsZXRlIGV4cGFuZG8ucmVzaXplcjtcblx0dW53YXRjaEZvclJlbmRlcihub2RlKTtcblxuXHRpZiAocmVzaXplciAmJiByZXNpemVyLnBhcmVudE5vZGUpIHtcblx0XHRyZXNpemVyLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQocmVzaXplcik7XG5cdH1cbn1cblxuZnVuY3Rpb24gaW5qZWN0Q1NTKHBsYXRmb3JtLCBjc3MpIHtcblx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3EvMzkyMjEzOVxuXHR2YXIgc3R5bGUgPSBwbGF0Zm9ybS5fc3R5bGUgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc3R5bGUnKTtcblx0aWYgKCFwbGF0Zm9ybS5fc3R5bGUpIHtcblx0XHRwbGF0Zm9ybS5fc3R5bGUgPSBzdHlsZTtcblx0XHRjc3MgPSAnLyogQ2hhcnQuanMgKi9cXG4nICsgY3NzO1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZSgndHlwZScsICd0ZXh0L2NzcycpO1xuXHRcdGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCdoZWFkJylbMF0uYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHR9XG5cblx0c3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHQvKipcblx0ICogVGhpcyBwcm9wZXJ0eSBob2xkcyB3aGV0aGVyIHRoaXMgcGxhdGZvcm0gaXMgZW5hYmxlZCBmb3IgdGhlIGN1cnJlbnQgZW52aXJvbm1lbnQuXG5cdCAqIEN1cnJlbnRseSB1c2VkIGJ5IHBsYXRmb3JtLmpzIHRvIHNlbGVjdCB0aGUgcHJvcGVyIGltcGxlbWVudGF0aW9uLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2VuYWJsZWQ6IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcsXG5cblx0aW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGtleWZyYW1lcyA9ICdmcm9te29wYWNpdHk6MC45OX10b3tvcGFjaXR5OjF9JztcblxuXHRcdGluamVjdENTUyh0aGlzLFxuXHRcdFx0Ly8gRE9NIHJlbmRlcmluZyBkZXRlY3Rpb25cblx0XHRcdC8vIGh0dHBzOi8vZGF2aWR3YWxzaC5uYW1lL2RldGVjdC1ub2RlLWluc2VydGlvblxuXHRcdFx0J0Atd2Via2l0LWtleWZyYW1lcyAnICsgQ1NTX1JFTkRFUl9BTklNQVRJT04gKyAneycgKyBrZXlmcmFtZXMgKyAnfScgK1xuXHRcdFx0J0BrZXlmcmFtZXMgJyArIENTU19SRU5ERVJfQU5JTUFUSU9OICsgJ3snICsga2V5ZnJhbWVzICsgJ30nICtcblx0XHRcdCcuJyArIENTU19SRU5ERVJfTU9OSVRPUiArICd7JyArXG5cdFx0XHRcdCctd2Via2l0LWFuaW1hdGlvbjonICsgQ1NTX1JFTkRFUl9BTklNQVRJT04gKyAnIDAuMDAxczsnICtcblx0XHRcdFx0J2FuaW1hdGlvbjonICsgQ1NTX1JFTkRFUl9BTklNQVRJT04gKyAnIDAuMDAxczsnICtcblx0XHRcdCd9J1xuXHRcdCk7XG5cdH0sXG5cblx0YWNxdWlyZUNvbnRleHQ6IGZ1bmN0aW9uKGl0ZW0sIGNvbmZpZykge1xuXHRcdGlmICh0eXBlb2YgaXRlbSA9PT0gJ3N0cmluZycpIHtcblx0XHRcdGl0ZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZChpdGVtKTtcblx0XHR9IGVsc2UgaWYgKGl0ZW0ubGVuZ3RoKSB7XG5cdFx0XHQvLyBTdXBwb3J0IGZvciBhcnJheSBiYXNlZCBxdWVyaWVzIChzdWNoIGFzIGpRdWVyeSlcblx0XHRcdGl0ZW0gPSBpdGVtWzBdO1xuXHRcdH1cblxuXHRcdGlmIChpdGVtICYmIGl0ZW0uY2FudmFzKSB7XG5cdFx0XHQvLyBTdXBwb3J0IGZvciBhbnkgb2JqZWN0IGFzc29jaWF0ZWQgdG8gYSBjYW52YXMgKGluY2x1ZGluZyBhIGNvbnRleHQyZClcblx0XHRcdGl0ZW0gPSBpdGVtLmNhbnZhcztcblx0XHR9XG5cblx0XHQvLyBUbyBwcmV2ZW50IGNhbnZhcyBmaW5nZXJwcmludGluZywgc29tZSBhZGQtb25zIHVuZGVmaW5lIHRoZSBnZXRDb250ZXh0XG5cdFx0Ly8gbWV0aG9kLCBmb3IgZXhhbXBsZTogaHR0cHM6Ly9naXRodWIuY29tL2trYXBzbmVyL0NhbnZhc0Jsb2NrZXJcblx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9pc3N1ZXMvMjgwN1xuXHRcdHZhciBjb250ZXh0ID0gaXRlbSAmJiBpdGVtLmdldENvbnRleHQgJiYgaXRlbS5nZXRDb250ZXh0KCcyZCcpO1xuXG5cdFx0Ly8gYGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQvQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJEYCBmYWlscyB3aGVuIHRoZSBpdGVtIGlzXG5cdFx0Ly8gaW5zaWRlIGFuIGlmcmFtZSBvciB3aGVuIHJ1bm5pbmcgaW4gYSBwcm90ZWN0ZWQgZW52aXJvbm1lbnQuIFdlIGNvdWxkIGd1ZXNzIHRoZVxuXHRcdC8vIHR5cGVzIGZyb20gdGhlaXIgdG9TdHJpbmcoKSB2YWx1ZSBidXQgbGV0J3Mga2VlcCB0aGluZ3MgZmxleGlibGUgYW5kIGFzc3VtZSBpdCdzXG5cdFx0Ly8gYSBzdWZmaWNpZW50IGNvbmRpdGlvbiBpZiB0aGUgaXRlbSBoYXMgYSBjb250ZXh0MkQgd2hpY2ggaGFzIGl0ZW0gYXMgYGNhbnZhc2AuXG5cdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzM4ODdcblx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9pc3N1ZXMvNDEwMlxuXHRcdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy80MTUyXG5cdFx0aWYgKGNvbnRleHQgJiYgY29udGV4dC5jYW52YXMgPT09IGl0ZW0pIHtcblx0XHRcdGluaXRDYW52YXMoaXRlbSwgY29uZmlnKTtcblx0XHRcdHJldHVybiBjb250ZXh0O1xuXHRcdH1cblxuXHRcdHJldHVybiBudWxsO1xuXHR9LFxuXG5cdHJlbGVhc2VDb250ZXh0OiBmdW5jdGlvbihjb250ZXh0KSB7XG5cdFx0dmFyIGNhbnZhcyA9IGNvbnRleHQuY2FudmFzO1xuXHRcdGlmICghY2FudmFzW0VYUEFORE9fS0VZXSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBpbml0aWFsID0gY2FudmFzW0VYUEFORE9fS0VZXS5pbml0aWFsO1xuXHRcdFsnaGVpZ2h0JywgJ3dpZHRoJ10uZm9yRWFjaChmdW5jdGlvbihwcm9wKSB7XG5cdFx0XHR2YXIgdmFsdWUgPSBpbml0aWFsW3Byb3BdO1xuXHRcdFx0aWYgKGhlbHBlcnMuaXNOdWxsT3JVbmRlZih2YWx1ZSkpIHtcblx0XHRcdFx0Y2FudmFzLnJlbW92ZUF0dHJpYnV0ZShwcm9wKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNhbnZhcy5zZXRBdHRyaWJ1dGUocHJvcCwgdmFsdWUpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0aGVscGVycy5lYWNoKGluaXRpYWwuc3R5bGUgfHwge30sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcblx0XHRcdGNhbnZhcy5zdHlsZVtrZXldID0gdmFsdWU7XG5cdFx0fSk7XG5cblx0XHQvLyBUaGUgY2FudmFzIHJlbmRlciBzaXplIG1pZ2h0IGhhdmUgYmVlbiBjaGFuZ2VkIChhbmQgdGh1cyB0aGUgc3RhdGUgc3RhY2sgZGlzY2FyZGVkKSxcblx0XHQvLyB3ZSBjYW4ndCB1c2Ugc2F2ZSgpIGFuZCByZXN0b3JlKCkgdG8gcmVzdG9yZSB0aGUgaW5pdGlhbCBzdGF0ZS4gU28gbWFrZSBzdXJlIHRoYXQgYXRcblx0XHQvLyBsZWFzdCB0aGUgY2FudmFzIGNvbnRleHQgaXMgcmVzZXQgdG8gdGhlIGRlZmF1bHQgc3RhdGUgYnkgc2V0dGluZyB0aGUgY2FudmFzIHdpZHRoLlxuXHRcdC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDExL1dELWh0bWw1LTIwMTEwNTI1L3RoZS1jYW52YXMtZWxlbWVudC5odG1sXG5cdFx0Y2FudmFzLndpZHRoID0gY2FudmFzLndpZHRoO1xuXG5cdFx0ZGVsZXRlIGNhbnZhc1tFWFBBTkRPX0tFWV07XG5cdH0sXG5cblx0YWRkRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24oY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7XG5cdFx0dmFyIGNhbnZhcyA9IGNoYXJ0LmNhbnZhcztcblx0XHRpZiAodHlwZSA9PT0gJ3Jlc2l6ZScpIHtcblx0XHRcdC8vIE5vdGU6IHRoZSByZXNpemUgZXZlbnQgaXMgbm90IHN1cHBvcnRlZCBvbiBhbGwgYnJvd3NlcnMuXG5cdFx0XHRhZGRSZXNpemVMaXN0ZW5lcihjYW52YXMsIGxpc3RlbmVyLCBjaGFydCk7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIGV4cGFuZG8gPSBsaXN0ZW5lcltFWFBBTkRPX0tFWV0gfHwgKGxpc3RlbmVyW0VYUEFORE9fS0VZXSA9IHt9KTtcblx0XHR2YXIgcHJveGllcyA9IGV4cGFuZG8ucHJveGllcyB8fCAoZXhwYW5kby5wcm94aWVzID0ge30pO1xuXHRcdHZhciBwcm94eSA9IHByb3hpZXNbY2hhcnQuaWQgKyAnXycgKyB0eXBlXSA9IGZ1bmN0aW9uKGV2ZW50KSB7XG5cdFx0XHRsaXN0ZW5lcihmcm9tTmF0aXZlRXZlbnQoZXZlbnQsIGNoYXJ0KSk7XG5cdFx0fTtcblxuXHRcdGFkZEV2ZW50TGlzdGVuZXIoY2FudmFzLCB0eXBlLCBwcm94eSk7XG5cdH0sXG5cblx0cmVtb3ZlRXZlbnRMaXN0ZW5lcjogZnVuY3Rpb24oY2hhcnQsIHR5cGUsIGxpc3RlbmVyKSB7XG5cdFx0dmFyIGNhbnZhcyA9IGNoYXJ0LmNhbnZhcztcblx0XHRpZiAodHlwZSA9PT0gJ3Jlc2l6ZScpIHtcblx0XHRcdC8vIE5vdGU6IHRoZSByZXNpemUgZXZlbnQgaXMgbm90IHN1cHBvcnRlZCBvbiBhbGwgYnJvd3NlcnMuXG5cdFx0XHRyZW1vdmVSZXNpemVMaXN0ZW5lcihjYW52YXMsIGxpc3RlbmVyKTtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHR2YXIgZXhwYW5kbyA9IGxpc3RlbmVyW0VYUEFORE9fS0VZXSB8fCB7fTtcblx0XHR2YXIgcHJveGllcyA9IGV4cGFuZG8ucHJveGllcyB8fCB7fTtcblx0XHR2YXIgcHJveHkgPSBwcm94aWVzW2NoYXJ0LmlkICsgJ18nICsgdHlwZV07XG5cdFx0aWYgKCFwcm94eSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHJlbW92ZUV2ZW50TGlzdGVuZXIoY2FudmFzLCB0eXBlLCBwcm94eSk7XG5cdH1cbn07XG5cbi8vIERFUFJFQ0FUSU9OU1xuXG4vKipcbiAqIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCB1c2UgRXZlbnRUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lciBpbnN0ZWFkLlxuICogRXZlbnRUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lciBjb21wYXRpYmlsaXR5OiBDaHJvbWUsIE9wZXJhIDcsIFNhZmFyaSwgRkYxLjUrLCBJRTkrXG4gKiBAc2VlIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FdmVudFRhcmdldC9hZGRFdmVudExpc3RlbmVyXG4gKiBAZnVuY3Rpb24gQ2hhcnQuaGVscGVycy5hZGRFdmVudFxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjcuMFxuICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuICogQHByaXZhdGVcbiAqL1xuaGVscGVycy5hZGRFdmVudCA9IGFkZEV2ZW50TGlzdGVuZXI7XG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHVzZSBFdmVudFRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyIGluc3RlYWQuXG4gKiBFdmVudFRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyIGNvbXBhdGliaWxpdHk6IENocm9tZSwgT3BlcmEgNywgU2FmYXJpLCBGRjEuNSssIElFOStcbiAqIEBzZWUgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0V2ZW50VGFyZ2V0L3JlbW92ZUV2ZW50TGlzdGVuZXJcbiAqIEBmdW5jdGlvbiBDaGFydC5oZWxwZXJzLnJlbW92ZUV2ZW50XG4gKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuNy4wXG4gKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG4gKiBAcHJpdmF0ZVxuICovXG5oZWxwZXJzLnJlbW92ZUV2ZW50ID0gcmVtb3ZlRXZlbnRMaXN0ZW5lcjtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2luZGV4Jyk7XG52YXIgYmFzaWMgPSByZXF1aXJlKCcuL3BsYXRmb3JtLmJhc2ljJyk7XG52YXIgZG9tID0gcmVxdWlyZSgnLi9wbGF0Zm9ybS5kb20nKTtcblxuLy8gQFRPRE8gTWFrZSBwb3NzaWJsZSB0byBzZWxlY3QgYW5vdGhlciBwbGF0Zm9ybSBhdCBidWlsZCB0aW1lLlxudmFyIGltcGxlbWVudGF0aW9uID0gZG9tLl9lbmFibGVkID8gZG9tIDogYmFzaWM7XG5cbi8qKlxuICogQG5hbWVzcGFjZSBDaGFydC5wbGF0Zm9ybVxuICogQHNlZSBodHRwczovL2NoYXJ0anMuZ2l0Ym9va3MuaW8vcHJvcG9zYWxzL2NvbnRlbnQvUGxhdGZvcm0uaHRtbFxuICogQHNpbmNlIDIuNC4wXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gaGVscGVycy5leHRlbmQoe1xuXHQvKipcblx0ICogQHNpbmNlIDIuNy4wXG5cdCAqL1xuXHRpbml0aWFsaXplOiBmdW5jdGlvbigpIHt9LFxuXG5cdC8qKlxuXHQgKiBDYWxsZWQgYXQgY2hhcnQgY29uc3RydWN0aW9uIHRpbWUsIHJldHVybnMgYSBjb250ZXh0MmQgaW5zdGFuY2UgaW1wbGVtZW50aW5nXG5cdCAqIHRoZSBbVzNDIENhbnZhcyAyRCBDb250ZXh0IEFQSSBzdGFuZGFyZF17QGxpbmsgaHR0cHM6Ly93d3cudzMub3JnL1RSLzJkY29udGV4dC99LlxuXHQgKiBAcGFyYW0geyp9IGl0ZW0gLSBUaGUgbmF0aXZlIGl0ZW0gZnJvbSB3aGljaCB0byBhY3F1aXJlIGNvbnRleHQgKHBsYXRmb3JtIHNwZWNpZmljKVxuXHQgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFRoZSBjaGFydCBvcHRpb25zXG5cdCAqIEByZXR1cm5zIHtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkR9IGNvbnRleHQyZCBpbnN0YW5jZVxuXHQgKi9cblx0YWNxdWlyZUNvbnRleHQ6IGZ1bmN0aW9uKCkge30sXG5cblx0LyoqXG5cdCAqIENhbGxlZCBhdCBjaGFydCBkZXN0cnVjdGlvbiB0aW1lLCByZWxlYXNlcyBhbnkgcmVzb3VyY2VzIGFzc29jaWF0ZWQgdG8gdGhlIGNvbnRleHRcblx0ICogcHJldmlvdXNseSByZXR1cm5lZCBieSB0aGUgYWNxdWlyZUNvbnRleHQoKSBtZXRob2QuXG5cdCAqIEBwYXJhbSB7Q2FudmFzUmVuZGVyaW5nQ29udGV4dDJEfSBjb250ZXh0IC0gVGhlIGNvbnRleHQyZCBpbnN0YW5jZVxuXHQgKiBAcmV0dXJucyB7Qm9vbGVhbn0gdHJ1ZSBpZiB0aGUgbWV0aG9kIHN1Y2NlZWRlZCwgZWxzZSBmYWxzZVxuXHQgKi9cblx0cmVsZWFzZUNvbnRleHQ6IGZ1bmN0aW9uKCkge30sXG5cblx0LyoqXG5cdCAqIFJlZ2lzdGVycyB0aGUgc3BlY2lmaWVkIGxpc3RlbmVyIG9uIHRoZSBnaXZlbiBjaGFydC5cblx0ICogQHBhcmFtIHtDaGFydH0gY2hhcnQgLSBDaGFydCBmcm9tIHdoaWNoIHRvIGxpc3RlbiBmb3IgZXZlbnRcblx0ICogQHBhcmFtIHtTdHJpbmd9IHR5cGUgLSBUaGUgKHtAbGluayBJRXZlbnR9KSB0eXBlIHRvIGxpc3RlbiBmb3Jcblx0ICogQHBhcmFtIHtGdW5jdGlvbn0gbGlzdGVuZXIgLSBSZWNlaXZlcyBhIG5vdGlmaWNhdGlvbiAoYW4gb2JqZWN0IHRoYXQgaW1wbGVtZW50c1xuXHQgKiB0aGUge0BsaW5rIElFdmVudH0gaW50ZXJmYWNlKSB3aGVuIGFuIGV2ZW50IG9mIHRoZSBzcGVjaWZpZWQgdHlwZSBvY2N1cnMuXG5cdCAqL1xuXHRhZGRFdmVudExpc3RlbmVyOiBmdW5jdGlvbigpIHt9LFxuXG5cdC8qKlxuXHQgKiBSZW1vdmVzIHRoZSBzcGVjaWZpZWQgbGlzdGVuZXIgcHJldmlvdXNseSByZWdpc3RlcmVkIHdpdGggYWRkRXZlbnRMaXN0ZW5lci5cblx0ICogQHBhcmFtIHtDaGFydH0gY2hhcnQgLUNoYXJ0IGZyb20gd2hpY2ggdG8gcmVtb3ZlIHRoZSBsaXN0ZW5lclxuXHQgKiBAcGFyYW0ge1N0cmluZ30gdHlwZSAtIFRoZSAoe0BsaW5rIElFdmVudH0pIHR5cGUgdG8gcmVtb3ZlXG5cdCAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIC0gVGhlIGxpc3RlbmVyIGZ1bmN0aW9uIHRvIHJlbW92ZSBmcm9tIHRoZSBldmVudCB0YXJnZXQuXG5cdCAqL1xuXHRyZW1vdmVFdmVudExpc3RlbmVyOiBmdW5jdGlvbigpIHt9XG5cbn0sIGltcGxlbWVudGF0aW9uKTtcblxuLyoqXG4gKiBAaW50ZXJmYWNlIElQbGF0Zm9ybVxuICogQWxsb3dzIGFic3RyYWN0aW5nIHBsYXRmb3JtIGRlcGVuZGVuY2llcyBhd2F5IGZyb20gdGhlIGNoYXJ0XG4gKiBAYm9ycm93cyBDaGFydC5wbGF0Zm9ybS5hY3F1aXJlQ29udGV4dCBhcyBhY3F1aXJlQ29udGV4dFxuICogQGJvcnJvd3MgQ2hhcnQucGxhdGZvcm0ucmVsZWFzZUNvbnRleHQgYXMgcmVsZWFzZUNvbnRleHRcbiAqIEBib3Jyb3dzIENoYXJ0LnBsYXRmb3JtLmFkZEV2ZW50TGlzdGVuZXIgYXMgYWRkRXZlbnRMaXN0ZW5lclxuICogQGJvcnJvd3MgQ2hhcnQucGxhdGZvcm0ucmVtb3ZlRXZlbnRMaXN0ZW5lciBhcyByZW1vdmVFdmVudExpc3RlbmVyXG4gKi9cblxuLyoqXG4gKiBAaW50ZXJmYWNlIElFdmVudFxuICogQHByb3Age1N0cmluZ30gdHlwZSAtIFRoZSBldmVudCB0eXBlIG5hbWUsIHBvc3NpYmxlIHZhbHVlcyBhcmU6XG4gKiAnY29udGV4dG1lbnUnLCAnbW91c2VlbnRlcicsICdtb3VzZWRvd24nLCAnbW91c2Vtb3ZlJywgJ21vdXNldXAnLCAnbW91c2VvdXQnLFxuICogJ2NsaWNrJywgJ2RibGNsaWNrJywgJ2tleWRvd24nLCAna2V5cHJlc3MnLCAna2V5dXAnIGFuZCAncmVzaXplJ1xuICogQHByb3Ageyp9IG5hdGl2ZSAtIFRoZSBvcmlnaW5hbCBuYXRpdmUgZXZlbnQgKG51bGwgZm9yIGVtdWxhdGVkIGV2ZW50cywgZS5nLiAncmVzaXplJylcbiAqIEBwcm9wIHtOdW1iZXJ9IHggLSBUaGUgbW91c2UgeCBwb3NpdGlvbiwgcmVsYXRpdmUgdG8gdGhlIGNhbnZhcyAobnVsbCBmb3IgaW5jb21wYXRpYmxlIGV2ZW50cylcbiAqIEBwcm9wIHtOdW1iZXJ9IHkgLSBUaGUgbW91c2UgeSBwb3NpdGlvbiwgcmVsYXRpdmUgdG8gdGhlIGNhbnZhcyAobnVsbCBmb3IgaW5jb21wYXRpYmxlIGV2ZW50cylcbiAqL1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2NvcmUuZGVmYXVsdHMnKTtcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi4vaGVscGVycy9pbmRleCcpO1xuXG5kZWZhdWx0cy5fc2V0KCdnbG9iYWwnLCB7XG5cdHBsdWdpbnM6IHt9XG59KTtcblxuLyoqXG4gKiBUaGUgcGx1Z2luIHNlcnZpY2Ugc2luZ2xldG9uXG4gKiBAbmFtZXNwYWNlIENoYXJ0LnBsdWdpbnNcbiAqIEBzaW5jZSAyLjEuMFxuICovXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0LyoqXG5cdCAqIEdsb2JhbGx5IHJlZ2lzdGVyZWQgcGx1Z2lucy5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9wbHVnaW5zOiBbXSxcblxuXHQvKipcblx0ICogVGhpcyBpZGVudGlmaWVyIGlzIHVzZWQgdG8gaW52YWxpZGF0ZSB0aGUgZGVzY3JpcHRvcnMgY2FjaGUgYXR0YWNoZWQgdG8gZWFjaCBjaGFydFxuXHQgKiB3aGVuIGEgZ2xvYmFsIHBsdWdpbiBpcyByZWdpc3RlcmVkIG9yIHVucmVnaXN0ZXJlZC4gSW4gdGhpcyBjYXNlLCB0aGUgY2FjaGUgSUQgaXNcblx0ICogaW5jcmVtZW50ZWQgYW5kIGRlc2NyaXB0b3JzIGFyZSByZWdlbmVyYXRlZCBkdXJpbmcgZm9sbG93aW5nIEFQSSBjYWxscy5cblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9jYWNoZUlkOiAwLFxuXG5cdC8qKlxuXHQgKiBSZWdpc3RlcnMgdGhlIGdpdmVuIHBsdWdpbihzKSBpZiBub3QgYWxyZWFkeSByZWdpc3RlcmVkLlxuXHQgKiBAcGFyYW0ge0FycmF5fE9iamVjdH0gcGx1Z2lucyBwbHVnaW4gaW5zdGFuY2UocykuXG5cdCAqL1xuXHRyZWdpc3RlcjogZnVuY3Rpb24ocGx1Z2lucykge1xuXHRcdHZhciBwID0gdGhpcy5fcGx1Z2lucztcblx0XHQoW10pLmNvbmNhdChwbHVnaW5zKS5mb3JFYWNoKGZ1bmN0aW9uKHBsdWdpbikge1xuXHRcdFx0aWYgKHAuaW5kZXhPZihwbHVnaW4pID09PSAtMSkge1xuXHRcdFx0XHRwLnB1c2gocGx1Z2luKTtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdHRoaXMuX2NhY2hlSWQrKztcblx0fSxcblxuXHQvKipcblx0ICogVW5yZWdpc3RlcnMgdGhlIGdpdmVuIHBsdWdpbihzKSBvbmx5IGlmIHJlZ2lzdGVyZWQuXG5cdCAqIEBwYXJhbSB7QXJyYXl8T2JqZWN0fSBwbHVnaW5zIHBsdWdpbiBpbnN0YW5jZShzKS5cblx0ICovXG5cdHVucmVnaXN0ZXI6IGZ1bmN0aW9uKHBsdWdpbnMpIHtcblx0XHR2YXIgcCA9IHRoaXMuX3BsdWdpbnM7XG5cdFx0KFtdKS5jb25jYXQocGx1Z2lucykuZm9yRWFjaChmdW5jdGlvbihwbHVnaW4pIHtcblx0XHRcdHZhciBpZHggPSBwLmluZGV4T2YocGx1Z2luKTtcblx0XHRcdGlmIChpZHggIT09IC0xKSB7XG5cdFx0XHRcdHAuc3BsaWNlKGlkeCwgMSk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHR0aGlzLl9jYWNoZUlkKys7XG5cdH0sXG5cblx0LyoqXG5cdCAqIFJlbW92ZSBhbGwgcmVnaXN0ZXJlZCBwbHVnaW5zLlxuXHQgKiBAc2luY2UgMi4xLjVcblx0ICovXG5cdGNsZWFyOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLl9wbHVnaW5zID0gW107XG5cdFx0dGhpcy5fY2FjaGVJZCsrO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBudW1iZXIgb2YgcmVnaXN0ZXJlZCBwbHVnaW5zP1xuXHQgKiBAcmV0dXJucyB7TnVtYmVyfVxuXHQgKiBAc2luY2UgMi4xLjVcblx0ICovXG5cdGNvdW50OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5fcGx1Z2lucy5sZW5ndGg7XG5cdH0sXG5cblx0LyoqXG5cdCAqIFJldHVybnMgYWxsIHJlZ2lzdGVyZWQgcGx1Z2luIGluc3RhbmNlcy5cblx0ICogQHJldHVybnMge0FycmF5fSBhcnJheSBvZiBwbHVnaW4gb2JqZWN0cy5cblx0ICogQHNpbmNlIDIuMS41XG5cdCAqL1xuXHRnZXRBbGw6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl9wbHVnaW5zO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBDYWxscyBlbmFibGVkIHBsdWdpbnMgZm9yIGBjaGFydGAgb24gdGhlIHNwZWNpZmllZCBob29rIGFuZCB3aXRoIHRoZSBnaXZlbiBhcmdzLlxuXHQgKiBUaGlzIG1ldGhvZCBpbW1lZGlhdGVseSByZXR1cm5zIGFzIHNvb24gYXMgYSBwbHVnaW4gZXhwbGljaXRseSByZXR1cm5zIGZhbHNlLiBUaGVcblx0ICogcmV0dXJuZWQgdmFsdWUgY2FuIGJlIHVzZWQsIGZvciBpbnN0YW5jZSwgdG8gaW50ZXJydXB0IHRoZSBjdXJyZW50IGFjdGlvbi5cblx0ICogQHBhcmFtIHtPYmplY3R9IGNoYXJ0IC0gVGhlIGNoYXJ0IGluc3RhbmNlIGZvciB3aGljaCBwbHVnaW5zIHNob3VsZCBiZSBjYWxsZWQuXG5cdCAqIEBwYXJhbSB7U3RyaW5nfSBob29rIC0gVGhlIG5hbWUgb2YgdGhlIHBsdWdpbiBtZXRob2QgdG8gY2FsbCAoZS5nLiAnYmVmb3JlVXBkYXRlJykuXG5cdCAqIEBwYXJhbSB7QXJyYXl9IFthcmdzXSAtIEV4dHJhIGFyZ3VtZW50cyB0byBhcHBseSB0byB0aGUgaG9vayBjYWxsLlxuXHQgKiBAcmV0dXJucyB7Qm9vbGVhbn0gZmFsc2UgaWYgYW55IG9mIHRoZSBwbHVnaW5zIHJldHVybiBmYWxzZSwgZWxzZSByZXR1cm5zIHRydWUuXG5cdCAqL1xuXHRub3RpZnk6IGZ1bmN0aW9uKGNoYXJ0LCBob29rLCBhcmdzKSB7XG5cdFx0dmFyIGRlc2NyaXB0b3JzID0gdGhpcy5kZXNjcmlwdG9ycyhjaGFydCk7XG5cdFx0dmFyIGlsZW4gPSBkZXNjcmlwdG9ycy5sZW5ndGg7XG5cdFx0dmFyIGksIGRlc2NyaXB0b3IsIHBsdWdpbiwgcGFyYW1zLCBtZXRob2Q7XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRkZXNjcmlwdG9yID0gZGVzY3JpcHRvcnNbaV07XG5cdFx0XHRwbHVnaW4gPSBkZXNjcmlwdG9yLnBsdWdpbjtcblx0XHRcdG1ldGhvZCA9IHBsdWdpbltob29rXTtcblx0XHRcdGlmICh0eXBlb2YgbWV0aG9kID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdHBhcmFtcyA9IFtjaGFydF0uY29uY2F0KGFyZ3MgfHwgW10pO1xuXHRcdFx0XHRwYXJhbXMucHVzaChkZXNjcmlwdG9yLm9wdGlvbnMpO1xuXHRcdFx0XHRpZiAobWV0aG9kLmFwcGx5KHBsdWdpbiwgcGFyYW1zKSA9PT0gZmFsc2UpIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHQvKipcblx0ICogUmV0dXJucyBkZXNjcmlwdG9ycyBvZiBlbmFibGVkIHBsdWdpbnMgZm9yIHRoZSBnaXZlbiBjaGFydC5cblx0ICogQHJldHVybnMge0FycmF5fSBbeyBwbHVnaW4sIG9wdGlvbnMgfV1cblx0ICogQHByaXZhdGVcblx0ICovXG5cdGRlc2NyaXB0b3JzOiBmdW5jdGlvbihjaGFydCkge1xuXHRcdHZhciBjYWNoZSA9IGNoYXJ0LiRwbHVnaW5zIHx8IChjaGFydC4kcGx1Z2lucyA9IHt9KTtcblx0XHRpZiAoY2FjaGUuaWQgPT09IHRoaXMuX2NhY2hlSWQpIHtcblx0XHRcdHJldHVybiBjYWNoZS5kZXNjcmlwdG9ycztcblx0XHR9XG5cblx0XHR2YXIgcGx1Z2lucyA9IFtdO1xuXHRcdHZhciBkZXNjcmlwdG9ycyA9IFtdO1xuXHRcdHZhciBjb25maWcgPSAoY2hhcnQgJiYgY2hhcnQuY29uZmlnKSB8fCB7fTtcblx0XHR2YXIgb3B0aW9ucyA9IChjb25maWcub3B0aW9ucyAmJiBjb25maWcub3B0aW9ucy5wbHVnaW5zKSB8fCB7fTtcblxuXHRcdHRoaXMuX3BsdWdpbnMuY29uY2F0KGNvbmZpZy5wbHVnaW5zIHx8IFtdKS5mb3JFYWNoKGZ1bmN0aW9uKHBsdWdpbikge1xuXHRcdFx0dmFyIGlkeCA9IHBsdWdpbnMuaW5kZXhPZihwbHVnaW4pO1xuXHRcdFx0aWYgKGlkeCAhPT0gLTEpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgaWQgPSBwbHVnaW4uaWQ7XG5cdFx0XHR2YXIgb3B0cyA9IG9wdGlvbnNbaWRdO1xuXHRcdFx0aWYgKG9wdHMgPT09IGZhbHNlKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0aWYgKG9wdHMgPT09IHRydWUpIHtcblx0XHRcdFx0b3B0cyA9IGhlbHBlcnMuY2xvbmUoZGVmYXVsdHMuZ2xvYmFsLnBsdWdpbnNbaWRdKTtcblx0XHRcdH1cblxuXHRcdFx0cGx1Z2lucy5wdXNoKHBsdWdpbik7XG5cdFx0XHRkZXNjcmlwdG9ycy5wdXNoKHtcblx0XHRcdFx0cGx1Z2luOiBwbHVnaW4sXG5cdFx0XHRcdG9wdGlvbnM6IG9wdHMgfHwge31cblx0XHRcdH0pO1xuXHRcdH0pO1xuXG5cdFx0Y2FjaGUuZGVzY3JpcHRvcnMgPSBkZXNjcmlwdG9ycztcblx0XHRjYWNoZS5pZCA9IHRoaXMuX2NhY2hlSWQ7XG5cdFx0cmV0dXJuIGRlc2NyaXB0b3JzO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBJbnZhbGlkYXRlcyBjYWNoZSBmb3IgdGhlIGdpdmVuIGNoYXJ0OiBkZXNjcmlwdG9ycyBob2xkIGEgcmVmZXJlbmNlIG9uIHBsdWdpbiBvcHRpb24sXG5cdCAqIGJ1dCBpbiBzb21lIGNhc2VzLCB0aGlzIHJlZmVyZW5jZSBjYW4gYmUgY2hhbmdlZCBieSB0aGUgdXNlciB3aGVuIHVwZGF0aW5nIG9wdGlvbnMuXG5cdCAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy81MTExI2lzc3VlY29tbWVudC0zNTU5MzQxNjdcblx0ICogQHByaXZhdGVcblx0ICovXG5cdF9pbnZhbGlkYXRlOiBmdW5jdGlvbihjaGFydCkge1xuXHRcdGRlbGV0ZSBjaGFydC4kcGx1Z2lucztcblx0fVxufTtcblxuLyoqXG4gKiBQbHVnaW4gZXh0ZW5zaW9uIGhvb2tzLlxuICogQGludGVyZmFjZSBJUGx1Z2luXG4gKiBAc2luY2UgMi4xLjBcbiAqL1xuLyoqXG4gKiBAbWV0aG9kIElQbHVnaW4jYmVmb3JlSW5pdFxuICogQGRlc2MgQ2FsbGVkIGJlZm9yZSBpbml0aWFsaXppbmcgYGNoYXJ0YC5cbiAqIEBwYXJhbSB7Q2hhcnQuQ29udHJvbGxlcn0gY2hhcnQgLSBUaGUgY2hhcnQgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFRoZSBwbHVnaW4gb3B0aW9ucy5cbiAqL1xuLyoqXG4gKiBAbWV0aG9kIElQbHVnaW4jYWZ0ZXJJbml0XG4gKiBAZGVzYyBDYWxsZWQgYWZ0ZXIgYGNoYXJ0YCBoYXMgYmVlbiBpbml0aWFsaXplZCBhbmQgYmVmb3JlIHRoZSBmaXJzdCB1cGRhdGUuXG4gKiBAcGFyYW0ge0NoYXJ0LkNvbnRyb2xsZXJ9IGNoYXJ0IC0gVGhlIGNoYXJ0IGluc3RhbmNlLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgcGx1Z2luIG9wdGlvbnMuXG4gKi9cbi8qKlxuICogQG1ldGhvZCBJUGx1Z2luI2JlZm9yZVVwZGF0ZVxuICogQGRlc2MgQ2FsbGVkIGJlZm9yZSB1cGRhdGluZyBgY2hhcnRgLiBJZiBhbnkgcGx1Z2luIHJldHVybnMgYGZhbHNlYCwgdGhlIHVwZGF0ZVxuICogaXMgY2FuY2VsbGVkIChhbmQgdGh1cyBzdWJzZXF1ZW50IHJlbmRlcihzKSkgdW50aWwgYW5vdGhlciBgdXBkYXRlYCBpcyB0cmlnZ2VyZWQuXG4gKiBAcGFyYW0ge0NoYXJ0LkNvbnRyb2xsZXJ9IGNoYXJ0IC0gVGhlIGNoYXJ0IGluc3RhbmNlLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgcGx1Z2luIG9wdGlvbnMuXG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gYGZhbHNlYCB0byBjYW5jZWwgdGhlIGNoYXJ0IHVwZGF0ZS5cbiAqL1xuLyoqXG4gKiBAbWV0aG9kIElQbHVnaW4jYWZ0ZXJVcGRhdGVcbiAqIEBkZXNjIENhbGxlZCBhZnRlciBgY2hhcnRgIGhhcyBiZWVuIHVwZGF0ZWQgYW5kIGJlZm9yZSByZW5kZXJpbmcuIE5vdGUgdGhhdCB0aGlzXG4gKiBob29rIHdpbGwgbm90IGJlIGNhbGxlZCBpZiB0aGUgY2hhcnQgdXBkYXRlIGhhcyBiZWVuIHByZXZpb3VzbHkgY2FuY2VsbGVkLlxuICogQHBhcmFtIHtDaGFydC5Db250cm9sbGVyfSBjaGFydCAtIFRoZSBjaGFydCBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIHBsdWdpbiBvcHRpb25zLlxuICovXG4vKipcbiAqIEBtZXRob2QgSVBsdWdpbiNiZWZvcmVEYXRhc2V0c1VwZGF0ZVxuICogQGRlc2MgQ2FsbGVkIGJlZm9yZSB1cGRhdGluZyB0aGUgYGNoYXJ0YCBkYXRhc2V0cy4gSWYgYW55IHBsdWdpbiByZXR1cm5zIGBmYWxzZWAsXG4gKiB0aGUgZGF0YXNldHMgdXBkYXRlIGlzIGNhbmNlbGxlZCB1bnRpbCBhbm90aGVyIGB1cGRhdGVgIGlzIHRyaWdnZXJlZC5cbiAqIEBwYXJhbSB7Q2hhcnQuQ29udHJvbGxlcn0gY2hhcnQgLSBUaGUgY2hhcnQgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFRoZSBwbHVnaW4gb3B0aW9ucy5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBmYWxzZSB0byBjYW5jZWwgdGhlIGRhdGFzZXRzIHVwZGF0ZS5cbiAqIEBzaW5jZSB2ZXJzaW9uIDIuMS41XG4qL1xuLyoqXG4gKiBAbWV0aG9kIElQbHVnaW4jYWZ0ZXJEYXRhc2V0c1VwZGF0ZVxuICogQGRlc2MgQ2FsbGVkIGFmdGVyIHRoZSBgY2hhcnRgIGRhdGFzZXRzIGhhdmUgYmVlbiB1cGRhdGVkLiBOb3RlIHRoYXQgdGhpcyBob29rXG4gKiB3aWxsIG5vdCBiZSBjYWxsZWQgaWYgdGhlIGRhdGFzZXRzIHVwZGF0ZSBoYXMgYmVlbiBwcmV2aW91c2x5IGNhbmNlbGxlZC5cbiAqIEBwYXJhbSB7Q2hhcnQuQ29udHJvbGxlcn0gY2hhcnQgLSBUaGUgY2hhcnQgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFRoZSBwbHVnaW4gb3B0aW9ucy5cbiAqIEBzaW5jZSB2ZXJzaW9uIDIuMS41XG4gKi9cbi8qKlxuICogQG1ldGhvZCBJUGx1Z2luI2JlZm9yZURhdGFzZXRVcGRhdGVcbiAqIEBkZXNjIENhbGxlZCBiZWZvcmUgdXBkYXRpbmcgdGhlIGBjaGFydGAgZGF0YXNldCBhdCB0aGUgZ2l2ZW4gYGFyZ3MuaW5kZXhgLiBJZiBhbnkgcGx1Z2luXG4gKiByZXR1cm5zIGBmYWxzZWAsIHRoZSBkYXRhc2V0cyB1cGRhdGUgaXMgY2FuY2VsbGVkIHVudGlsIGFub3RoZXIgYHVwZGF0ZWAgaXMgdHJpZ2dlcmVkLlxuICogQHBhcmFtIHtDaGFydH0gY2hhcnQgLSBUaGUgY2hhcnQgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge09iamVjdH0gYXJncyAtIFRoZSBjYWxsIGFyZ3VtZW50cy5cbiAqIEBwYXJhbSB7TnVtYmVyfSBhcmdzLmluZGV4IC0gVGhlIGRhdGFzZXQgaW5kZXguXG4gKiBAcGFyYW0ge09iamVjdH0gYXJncy5tZXRhIC0gVGhlIGRhdGFzZXQgbWV0YWRhdGEuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFRoZSBwbHVnaW4gb3B0aW9ucy5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBgZmFsc2VgIHRvIGNhbmNlbCB0aGUgY2hhcnQgZGF0YXNldHMgZHJhd2luZy5cbiAqL1xuLyoqXG4gKiBAbWV0aG9kIElQbHVnaW4jYWZ0ZXJEYXRhc2V0VXBkYXRlXG4gKiBAZGVzYyBDYWxsZWQgYWZ0ZXIgdGhlIGBjaGFydGAgZGF0YXNldHMgYXQgdGhlIGdpdmVuIGBhcmdzLmluZGV4YCBoYXMgYmVlbiB1cGRhdGVkLiBOb3RlXG4gKiB0aGF0IHRoaXMgaG9vayB3aWxsIG5vdCBiZSBjYWxsZWQgaWYgdGhlIGRhdGFzZXRzIHVwZGF0ZSBoYXMgYmVlbiBwcmV2aW91c2x5IGNhbmNlbGxlZC5cbiAqIEBwYXJhbSB7Q2hhcnR9IGNoYXJ0IC0gVGhlIGNoYXJ0IGluc3RhbmNlLlxuICogQHBhcmFtIHtPYmplY3R9IGFyZ3MgLSBUaGUgY2FsbCBhcmd1bWVudHMuXG4gKiBAcGFyYW0ge051bWJlcn0gYXJncy5pbmRleCAtIFRoZSBkYXRhc2V0IGluZGV4LlxuICogQHBhcmFtIHtPYmplY3R9IGFyZ3MubWV0YSAtIFRoZSBkYXRhc2V0IG1ldGFkYXRhLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgcGx1Z2luIG9wdGlvbnMuXG4gKi9cbi8qKlxuICogQG1ldGhvZCBJUGx1Z2luI2JlZm9yZUxheW91dFxuICogQGRlc2MgQ2FsbGVkIGJlZm9yZSBsYXlpbmcgb3V0IGBjaGFydGAuIElmIGFueSBwbHVnaW4gcmV0dXJucyBgZmFsc2VgLFxuICogdGhlIGxheW91dCB1cGRhdGUgaXMgY2FuY2VsbGVkIHVudGlsIGFub3RoZXIgYHVwZGF0ZWAgaXMgdHJpZ2dlcmVkLlxuICogQHBhcmFtIHtDaGFydC5Db250cm9sbGVyfSBjaGFydCAtIFRoZSBjaGFydCBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIHBsdWdpbiBvcHRpb25zLlxuICogQHJldHVybnMge0Jvb2xlYW59IGBmYWxzZWAgdG8gY2FuY2VsIHRoZSBjaGFydCBsYXlvdXQuXG4gKi9cbi8qKlxuICogQG1ldGhvZCBJUGx1Z2luI2FmdGVyTGF5b3V0XG4gKiBAZGVzYyBDYWxsZWQgYWZ0ZXIgdGhlIGBjaGFydGAgaGFzIGJlZW4gbGF5ZWQgb3V0LiBOb3RlIHRoYXQgdGhpcyBob29rIHdpbGwgbm90XG4gKiBiZSBjYWxsZWQgaWYgdGhlIGxheW91dCB1cGRhdGUgaGFzIGJlZW4gcHJldmlvdXNseSBjYW5jZWxsZWQuXG4gKiBAcGFyYW0ge0NoYXJ0LkNvbnRyb2xsZXJ9IGNoYXJ0IC0gVGhlIGNoYXJ0IGluc3RhbmNlLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgcGx1Z2luIG9wdGlvbnMuXG4gKi9cbi8qKlxuICogQG1ldGhvZCBJUGx1Z2luI2JlZm9yZVJlbmRlclxuICogQGRlc2MgQ2FsbGVkIGJlZm9yZSByZW5kZXJpbmcgYGNoYXJ0YC4gSWYgYW55IHBsdWdpbiByZXR1cm5zIGBmYWxzZWAsXG4gKiB0aGUgcmVuZGVyaW5nIGlzIGNhbmNlbGxlZCB1bnRpbCBhbm90aGVyIGByZW5kZXJgIGlzIHRyaWdnZXJlZC5cbiAqIEBwYXJhbSB7Q2hhcnQuQ29udHJvbGxlcn0gY2hhcnQgLSBUaGUgY2hhcnQgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFRoZSBwbHVnaW4gb3B0aW9ucy5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBgZmFsc2VgIHRvIGNhbmNlbCB0aGUgY2hhcnQgcmVuZGVyaW5nLlxuICovXG4vKipcbiAqIEBtZXRob2QgSVBsdWdpbiNhZnRlclJlbmRlclxuICogQGRlc2MgQ2FsbGVkIGFmdGVyIHRoZSBgY2hhcnRgIGhhcyBiZWVuIGZ1bGx5IHJlbmRlcmVkIChhbmQgYW5pbWF0aW9uIGNvbXBsZXRlZCkuIE5vdGVcbiAqIHRoYXQgdGhpcyBob29rIHdpbGwgbm90IGJlIGNhbGxlZCBpZiB0aGUgcmVuZGVyaW5nIGhhcyBiZWVuIHByZXZpb3VzbHkgY2FuY2VsbGVkLlxuICogQHBhcmFtIHtDaGFydC5Db250cm9sbGVyfSBjaGFydCAtIFRoZSBjaGFydCBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIHBsdWdpbiBvcHRpb25zLlxuICovXG4vKipcbiAqIEBtZXRob2QgSVBsdWdpbiNiZWZvcmVEcmF3XG4gKiBAZGVzYyBDYWxsZWQgYmVmb3JlIGRyYXdpbmcgYGNoYXJ0YCBhdCBldmVyeSBhbmltYXRpb24gZnJhbWUgc3BlY2lmaWVkIGJ5IHRoZSBnaXZlblxuICogZWFzaW5nIHZhbHVlLiBJZiBhbnkgcGx1Z2luIHJldHVybnMgYGZhbHNlYCwgdGhlIGZyYW1lIGRyYXdpbmcgaXMgY2FuY2VsbGVkIHVudGlsXG4gKiBhbm90aGVyIGByZW5kZXJgIGlzIHRyaWdnZXJlZC5cbiAqIEBwYXJhbSB7Q2hhcnQuQ29udHJvbGxlcn0gY2hhcnQgLSBUaGUgY2hhcnQgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge051bWJlcn0gZWFzaW5nVmFsdWUgLSBUaGUgY3VycmVudCBhbmltYXRpb24gdmFsdWUsIGJldHdlZW4gMC4wIGFuZCAxLjAuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFRoZSBwbHVnaW4gb3B0aW9ucy5cbiAqIEByZXR1cm5zIHtCb29sZWFufSBgZmFsc2VgIHRvIGNhbmNlbCB0aGUgY2hhcnQgZHJhd2luZy5cbiAqL1xuLyoqXG4gKiBAbWV0aG9kIElQbHVnaW4jYWZ0ZXJEcmF3XG4gKiBAZGVzYyBDYWxsZWQgYWZ0ZXIgdGhlIGBjaGFydGAgaGFzIGJlZW4gZHJhd24gZm9yIHRoZSBzcGVjaWZpYyBlYXNpbmcgdmFsdWUuIE5vdGVcbiAqIHRoYXQgdGhpcyBob29rIHdpbGwgbm90IGJlIGNhbGxlZCBpZiB0aGUgZHJhd2luZyBoYXMgYmVlbiBwcmV2aW91c2x5IGNhbmNlbGxlZC5cbiAqIEBwYXJhbSB7Q2hhcnQuQ29udHJvbGxlcn0gY2hhcnQgLSBUaGUgY2hhcnQgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge051bWJlcn0gZWFzaW5nVmFsdWUgLSBUaGUgY3VycmVudCBhbmltYXRpb24gdmFsdWUsIGJldHdlZW4gMC4wIGFuZCAxLjAuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFRoZSBwbHVnaW4gb3B0aW9ucy5cbiAqL1xuLyoqXG4gKiBAbWV0aG9kIElQbHVnaW4jYmVmb3JlRGF0YXNldHNEcmF3XG4gKiBAZGVzYyBDYWxsZWQgYmVmb3JlIGRyYXdpbmcgdGhlIGBjaGFydGAgZGF0YXNldHMuIElmIGFueSBwbHVnaW4gcmV0dXJucyBgZmFsc2VgLFxuICogdGhlIGRhdGFzZXRzIGRyYXdpbmcgaXMgY2FuY2VsbGVkIHVudGlsIGFub3RoZXIgYHJlbmRlcmAgaXMgdHJpZ2dlcmVkLlxuICogQHBhcmFtIHtDaGFydC5Db250cm9sbGVyfSBjaGFydCAtIFRoZSBjaGFydCBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7TnVtYmVyfSBlYXNpbmdWYWx1ZSAtIFRoZSBjdXJyZW50IGFuaW1hdGlvbiB2YWx1ZSwgYmV0d2VlbiAwLjAgYW5kIDEuMC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIHBsdWdpbiBvcHRpb25zLlxuICogQHJldHVybnMge0Jvb2xlYW59IGBmYWxzZWAgdG8gY2FuY2VsIHRoZSBjaGFydCBkYXRhc2V0cyBkcmF3aW5nLlxuICovXG4vKipcbiAqIEBtZXRob2QgSVBsdWdpbiNhZnRlckRhdGFzZXRzRHJhd1xuICogQGRlc2MgQ2FsbGVkIGFmdGVyIHRoZSBgY2hhcnRgIGRhdGFzZXRzIGhhdmUgYmVlbiBkcmF3bi4gTm90ZSB0aGF0IHRoaXMgaG9va1xuICogd2lsbCBub3QgYmUgY2FsbGVkIGlmIHRoZSBkYXRhc2V0cyBkcmF3aW5nIGhhcyBiZWVuIHByZXZpb3VzbHkgY2FuY2VsbGVkLlxuICogQHBhcmFtIHtDaGFydC5Db250cm9sbGVyfSBjaGFydCAtIFRoZSBjaGFydCBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7TnVtYmVyfSBlYXNpbmdWYWx1ZSAtIFRoZSBjdXJyZW50IGFuaW1hdGlvbiB2YWx1ZSwgYmV0d2VlbiAwLjAgYW5kIDEuMC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIHBsdWdpbiBvcHRpb25zLlxuICovXG4vKipcbiAqIEBtZXRob2QgSVBsdWdpbiNiZWZvcmVEYXRhc2V0RHJhd1xuICogQGRlc2MgQ2FsbGVkIGJlZm9yZSBkcmF3aW5nIHRoZSBgY2hhcnRgIGRhdGFzZXQgYXQgdGhlIGdpdmVuIGBhcmdzLmluZGV4YCAoZGF0YXNldHNcbiAqIGFyZSBkcmF3biBpbiB0aGUgcmV2ZXJzZSBvcmRlcikuIElmIGFueSBwbHVnaW4gcmV0dXJucyBgZmFsc2VgLCB0aGUgZGF0YXNldHMgZHJhd2luZ1xuICogaXMgY2FuY2VsbGVkIHVudGlsIGFub3RoZXIgYHJlbmRlcmAgaXMgdHJpZ2dlcmVkLlxuICogQHBhcmFtIHtDaGFydH0gY2hhcnQgLSBUaGUgY2hhcnQgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge09iamVjdH0gYXJncyAtIFRoZSBjYWxsIGFyZ3VtZW50cy5cbiAqIEBwYXJhbSB7TnVtYmVyfSBhcmdzLmluZGV4IC0gVGhlIGRhdGFzZXQgaW5kZXguXG4gKiBAcGFyYW0ge09iamVjdH0gYXJncy5tZXRhIC0gVGhlIGRhdGFzZXQgbWV0YWRhdGEuXG4gKiBAcGFyYW0ge051bWJlcn0gYXJncy5lYXNpbmdWYWx1ZSAtIFRoZSBjdXJyZW50IGFuaW1hdGlvbiB2YWx1ZSwgYmV0d2VlbiAwLjAgYW5kIDEuMC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIHBsdWdpbiBvcHRpb25zLlxuICogQHJldHVybnMge0Jvb2xlYW59IGBmYWxzZWAgdG8gY2FuY2VsIHRoZSBjaGFydCBkYXRhc2V0cyBkcmF3aW5nLlxuICovXG4vKipcbiAqIEBtZXRob2QgSVBsdWdpbiNhZnRlckRhdGFzZXREcmF3XG4gKiBAZGVzYyBDYWxsZWQgYWZ0ZXIgdGhlIGBjaGFydGAgZGF0YXNldHMgYXQgdGhlIGdpdmVuIGBhcmdzLmluZGV4YCBoYXZlIGJlZW4gZHJhd25cbiAqIChkYXRhc2V0cyBhcmUgZHJhd24gaW4gdGhlIHJldmVyc2Ugb3JkZXIpLiBOb3RlIHRoYXQgdGhpcyBob29rIHdpbGwgbm90IGJlIGNhbGxlZFxuICogaWYgdGhlIGRhdGFzZXRzIGRyYXdpbmcgaGFzIGJlZW4gcHJldmlvdXNseSBjYW5jZWxsZWQuXG4gKiBAcGFyYW0ge0NoYXJ0fSBjaGFydCAtIFRoZSBjaGFydCBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBhcmdzIC0gVGhlIGNhbGwgYXJndW1lbnRzLlxuICogQHBhcmFtIHtOdW1iZXJ9IGFyZ3MuaW5kZXggLSBUaGUgZGF0YXNldCBpbmRleC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBhcmdzLm1ldGEgLSBUaGUgZGF0YXNldCBtZXRhZGF0YS5cbiAqIEBwYXJhbSB7TnVtYmVyfSBhcmdzLmVhc2luZ1ZhbHVlIC0gVGhlIGN1cnJlbnQgYW5pbWF0aW9uIHZhbHVlLCBiZXR3ZWVuIDAuMCBhbmQgMS4wLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgcGx1Z2luIG9wdGlvbnMuXG4gKi9cbi8qKlxuICogQG1ldGhvZCBJUGx1Z2luI2JlZm9yZVRvb2x0aXBEcmF3XG4gKiBAZGVzYyBDYWxsZWQgYmVmb3JlIGRyYXdpbmcgdGhlIGB0b29sdGlwYC4gSWYgYW55IHBsdWdpbiByZXR1cm5zIGBmYWxzZWAsXG4gKiB0aGUgdG9vbHRpcCBkcmF3aW5nIGlzIGNhbmNlbGxlZCB1bnRpbCBhbm90aGVyIGByZW5kZXJgIGlzIHRyaWdnZXJlZC5cbiAqIEBwYXJhbSB7Q2hhcnR9IGNoYXJ0IC0gVGhlIGNoYXJ0IGluc3RhbmNlLlxuICogQHBhcmFtIHtPYmplY3R9IGFyZ3MgLSBUaGUgY2FsbCBhcmd1bWVudHMuXG4gKiBAcGFyYW0ge09iamVjdH0gYXJncy50b29sdGlwIC0gVGhlIHRvb2x0aXAuXG4gKiBAcGFyYW0ge051bWJlcn0gYXJncy5lYXNpbmdWYWx1ZSAtIFRoZSBjdXJyZW50IGFuaW1hdGlvbiB2YWx1ZSwgYmV0d2VlbiAwLjAgYW5kIDEuMC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zIC0gVGhlIHBsdWdpbiBvcHRpb25zLlxuICogQHJldHVybnMge0Jvb2xlYW59IGBmYWxzZWAgdG8gY2FuY2VsIHRoZSBjaGFydCB0b29sdGlwIGRyYXdpbmcuXG4gKi9cbi8qKlxuICogQG1ldGhvZCBJUGx1Z2luI2FmdGVyVG9vbHRpcERyYXdcbiAqIEBkZXNjIENhbGxlZCBhZnRlciBkcmF3aW5nIHRoZSBgdG9vbHRpcGAuIE5vdGUgdGhhdCB0aGlzIGhvb2sgd2lsbCBub3RcbiAqIGJlIGNhbGxlZCBpZiB0aGUgdG9vbHRpcCBkcmF3aW5nIGhhcyBiZWVuIHByZXZpb3VzbHkgY2FuY2VsbGVkLlxuICogQHBhcmFtIHtDaGFydH0gY2hhcnQgLSBUaGUgY2hhcnQgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge09iamVjdH0gYXJncyAtIFRoZSBjYWxsIGFyZ3VtZW50cy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBhcmdzLnRvb2x0aXAgLSBUaGUgdG9vbHRpcC5cbiAqIEBwYXJhbSB7TnVtYmVyfSBhcmdzLmVhc2luZ1ZhbHVlIC0gVGhlIGN1cnJlbnQgYW5pbWF0aW9uIHZhbHVlLCBiZXR3ZWVuIDAuMCBhbmQgMS4wLlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgcGx1Z2luIG9wdGlvbnMuXG4gKi9cbi8qKlxuICogQG1ldGhvZCBJUGx1Z2luI2JlZm9yZUV2ZW50XG4gKiBAZGVzYyBDYWxsZWQgYmVmb3JlIHByb2Nlc3NpbmcgdGhlIHNwZWNpZmllZCBgZXZlbnRgLiBJZiBhbnkgcGx1Z2luIHJldHVybnMgYGZhbHNlYCxcbiAqIHRoZSBldmVudCB3aWxsIGJlIGRpc2NhcmRlZC5cbiAqIEBwYXJhbSB7Q2hhcnQuQ29udHJvbGxlcn0gY2hhcnQgLSBUaGUgY2hhcnQgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge0lFdmVudH0gZXZlbnQgLSBUaGUgZXZlbnQgb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMgLSBUaGUgcGx1Z2luIG9wdGlvbnMuXG4gKi9cbi8qKlxuICogQG1ldGhvZCBJUGx1Z2luI2FmdGVyRXZlbnRcbiAqIEBkZXNjIENhbGxlZCBhZnRlciB0aGUgYGV2ZW50YCBoYXMgYmVlbiBjb25zdW1lZC4gTm90ZSB0aGF0IHRoaXMgaG9va1xuICogd2lsbCBub3QgYmUgY2FsbGVkIGlmIHRoZSBgZXZlbnRgIGhhcyBiZWVuIHByZXZpb3VzbHkgZGlzY2FyZGVkLlxuICogQHBhcmFtIHtDaGFydC5Db250cm9sbGVyfSBjaGFydCAtIFRoZSBjaGFydCBpbnN0YW5jZS5cbiAqIEBwYXJhbSB7SUV2ZW50fSBldmVudCAtIFRoZSBldmVudCBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFRoZSBwbHVnaW4gb3B0aW9ucy5cbiAqL1xuLyoqXG4gKiBAbWV0aG9kIElQbHVnaW4jcmVzaXplXG4gKiBAZGVzYyBDYWxsZWQgYWZ0ZXIgdGhlIGNoYXJ0IGFzIGJlZW4gcmVzaXplZC5cbiAqIEBwYXJhbSB7Q2hhcnQuQ29udHJvbGxlcn0gY2hhcnQgLSBUaGUgY2hhcnQgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge051bWJlcn0gc2l6ZSAtIFRoZSBuZXcgY2FudmFzIGRpc3BsYXkgc2l6ZSAoZXEuIGNhbnZhcy5zdHlsZSB3aWR0aCAmIGhlaWdodCkuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFRoZSBwbHVnaW4gb3B0aW9ucy5cbiAqL1xuLyoqXG4gKiBAbWV0aG9kIElQbHVnaW4jZGVzdHJveVxuICogQGRlc2MgQ2FsbGVkIGFmdGVyIHRoZSBjaGFydCBhcyBiZWVuIGRlc3Ryb3llZC5cbiAqIEBwYXJhbSB7Q2hhcnQuQ29udHJvbGxlcn0gY2hhcnQgLSBUaGUgY2hhcnQgaW5zdGFuY2UuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucyAtIFRoZSBwbHVnaW4gb3B0aW9ucy5cbiAqL1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgaGVscGVycyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaW5kZXgnKTtcblxuLyoqXG4gKiBOYW1lc3BhY2UgdG8gaG9sZCBzdGF0aWMgdGljayBnZW5lcmF0aW9uIGZ1bmN0aW9uc1xuICogQG5hbWVzcGFjZSBDaGFydC5UaWNrc1xuICovXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0LyoqXG5cdCAqIE5hbWVzcGFjZSB0byBob2xkIGZvcm1hdHRlcnMgZm9yIGRpZmZlcmVudCB0eXBlcyBvZiB0aWNrc1xuXHQgKiBAbmFtZXNwYWNlIENoYXJ0LlRpY2tzLmZvcm1hdHRlcnNcblx0ICovXG5cdGZvcm1hdHRlcnM6IHtcblx0XHQvKipcblx0XHQgKiBGb3JtYXR0ZXIgZm9yIHZhbHVlIGxhYmVsc1xuXHRcdCAqIEBtZXRob2QgQ2hhcnQuVGlja3MuZm9ybWF0dGVycy52YWx1ZXNcblx0XHQgKiBAcGFyYW0gdmFsdWUgdGhlIHZhbHVlIHRvIGRpc3BsYXlcblx0XHQgKiBAcmV0dXJuIHtTdHJpbmd8QXJyYXl9IHRoZSBsYWJlbCB0byBkaXNwbGF5XG5cdFx0ICovXG5cdFx0dmFsdWVzOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0cmV0dXJuIGhlbHBlcnMuaXNBcnJheSh2YWx1ZSkgPyB2YWx1ZSA6ICcnICsgdmFsdWU7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEZvcm1hdHRlciBmb3IgbGluZWFyIG51bWVyaWMgdGlja3Ncblx0XHQgKiBAbWV0aG9kIENoYXJ0LlRpY2tzLmZvcm1hdHRlcnMubGluZWFyXG5cdFx0ICogQHBhcmFtIHRpY2tWYWx1ZSB7TnVtYmVyfSB0aGUgdmFsdWUgdG8gYmUgZm9ybWF0dGVkXG5cdFx0ICogQHBhcmFtIGluZGV4IHtOdW1iZXJ9IHRoZSBwb3NpdGlvbiBvZiB0aGUgdGlja1ZhbHVlIHBhcmFtZXRlciBpbiB0aGUgdGlja3MgYXJyYXlcblx0XHQgKiBAcGFyYW0gdGlja3Mge0FycmF5PE51bWJlcj59IHRoZSBsaXN0IG9mIHRpY2tzIGJlaW5nIGNvbnZlcnRlZFxuXHRcdCAqIEByZXR1cm4ge1N0cmluZ30gc3RyaW5nIHJlcHJlc2VudGF0aW9uIG9mIHRoZSB0aWNrVmFsdWUgcGFyYW1ldGVyXG5cdFx0ICovXG5cdFx0bGluZWFyOiBmdW5jdGlvbih0aWNrVmFsdWUsIGluZGV4LCB0aWNrcykge1xuXHRcdFx0Ly8gSWYgd2UgaGF2ZSBsb3RzIG9mIHRpY2tzLCBkb24ndCB1c2UgdGhlIG9uZXNcblx0XHRcdHZhciBkZWx0YSA9IHRpY2tzLmxlbmd0aCA+IDMgPyB0aWNrc1syXSAtIHRpY2tzWzFdIDogdGlja3NbMV0gLSB0aWNrc1swXTtcblxuXHRcdFx0Ly8gSWYgd2UgaGF2ZSBhIG51bWJlciBsaWtlIDIuNSBhcyB0aGUgZGVsdGEsIGZpZ3VyZSBvdXQgaG93IG1hbnkgZGVjaW1hbCBwbGFjZXMgd2UgbmVlZFxuXHRcdFx0aWYgKE1hdGguYWJzKGRlbHRhKSA+IDEpIHtcblx0XHRcdFx0aWYgKHRpY2tWYWx1ZSAhPT0gTWF0aC5mbG9vcih0aWNrVmFsdWUpKSB7XG5cdFx0XHRcdFx0Ly8gbm90IGFuIGludGVnZXJcblx0XHRcdFx0XHRkZWx0YSA9IHRpY2tWYWx1ZSAtIE1hdGguZmxvb3IodGlja1ZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHR2YXIgbG9nRGVsdGEgPSBoZWxwZXJzLmxvZzEwKE1hdGguYWJzKGRlbHRhKSk7XG5cdFx0XHR2YXIgdGlja1N0cmluZyA9ICcnO1xuXG5cdFx0XHRpZiAodGlja1ZhbHVlICE9PSAwKSB7XG5cdFx0XHRcdHZhciBtYXhUaWNrID0gTWF0aC5tYXgoTWF0aC5hYnModGlja3NbMF0pLCBNYXRoLmFicyh0aWNrc1t0aWNrcy5sZW5ndGggLSAxXSkpO1xuXHRcdFx0XHRpZiAobWF4VGljayA8IDFlLTQpIHsgLy8gYWxsIHRpY2tzIGFyZSBzbWFsbCBudW1iZXJzOyB1c2Ugc2NpZW50aWZpYyBub3RhdGlvblxuXHRcdFx0XHRcdHZhciBsb2dUaWNrID0gaGVscGVycy5sb2cxMChNYXRoLmFicyh0aWNrVmFsdWUpKTtcblx0XHRcdFx0XHR0aWNrU3RyaW5nID0gdGlja1ZhbHVlLnRvRXhwb25lbnRpYWwoTWF0aC5mbG9vcihsb2dUaWNrKSAtIE1hdGguZmxvb3IobG9nRGVsdGEpKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHR2YXIgbnVtRGVjaW1hbCA9IC0xICogTWF0aC5mbG9vcihsb2dEZWx0YSk7XG5cdFx0XHRcdFx0bnVtRGVjaW1hbCA9IE1hdGgubWF4KE1hdGgubWluKG51bURlY2ltYWwsIDIwKSwgMCk7IC8vIHRvRml4ZWQgaGFzIGEgbWF4IG9mIDIwIGRlY2ltYWwgcGxhY2VzXG5cdFx0XHRcdFx0dGlja1N0cmluZyA9IHRpY2tWYWx1ZS50b0ZpeGVkKG51bURlY2ltYWwpO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0aWNrU3RyaW5nID0gJzAnOyAvLyBuZXZlciBzaG93IGRlY2ltYWwgcGxhY2VzIGZvciAwXG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0aWNrU3RyaW5nO1xuXHRcdH0sXG5cblx0XHRsb2dhcml0aG1pYzogZnVuY3Rpb24odGlja1ZhbHVlLCBpbmRleCwgdGlja3MpIHtcblx0XHRcdHZhciByZW1haW4gPSB0aWNrVmFsdWUgLyAoTWF0aC5wb3coMTAsIE1hdGguZmxvb3IoaGVscGVycy5sb2cxMCh0aWNrVmFsdWUpKSkpO1xuXG5cdFx0XHRpZiAodGlja1ZhbHVlID09PSAwKSB7XG5cdFx0XHRcdHJldHVybiAnMCc7XG5cdFx0XHR9IGVsc2UgaWYgKHJlbWFpbiA9PT0gMSB8fCByZW1haW4gPT09IDIgfHwgcmVtYWluID09PSA1IHx8IGluZGV4ID09PSAwIHx8IGluZGV4ID09PSB0aWNrcy5sZW5ndGggLSAxKSB7XG5cdFx0XHRcdHJldHVybiB0aWNrVmFsdWUudG9FeHBvbmVudGlhbCgpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuICcnO1xuXHRcdH1cblx0fVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9jb3JlLmRlZmF1bHRzJyk7XG52YXIgRWxlbWVudCA9IHJlcXVpcmUoJy4vY29yZS5lbGVtZW50Jyk7XG52YXIgaGVscGVycyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaW5kZXgnKTtcbnZhciBUaWNrcyA9IHJlcXVpcmUoJy4vY29yZS50aWNrcycpO1xuXG5kZWZhdWx0cy5fc2V0KCdzY2FsZScsIHtcblx0ZGlzcGxheTogdHJ1ZSxcblx0cG9zaXRpb246ICdsZWZ0Jyxcblx0b2Zmc2V0OiBmYWxzZSxcblxuXHQvLyBncmlkIGxpbmUgc2V0dGluZ3Ncblx0Z3JpZExpbmVzOiB7XG5cdFx0ZGlzcGxheTogdHJ1ZSxcblx0XHRjb2xvcjogJ3JnYmEoMCwgMCwgMCwgMC4xKScsXG5cdFx0bGluZVdpZHRoOiAxLFxuXHRcdGRyYXdCb3JkZXI6IHRydWUsXG5cdFx0ZHJhd09uQ2hhcnRBcmVhOiB0cnVlLFxuXHRcdGRyYXdUaWNrczogdHJ1ZSxcblx0XHR0aWNrTWFya0xlbmd0aDogMTAsXG5cdFx0emVyb0xpbmVXaWR0aDogMSxcblx0XHR6ZXJvTGluZUNvbG9yOiAncmdiYSgwLDAsMCwwLjI1KScsXG5cdFx0emVyb0xpbmVCb3JkZXJEYXNoOiBbXSxcblx0XHR6ZXJvTGluZUJvcmRlckRhc2hPZmZzZXQ6IDAuMCxcblx0XHRvZmZzZXRHcmlkTGluZXM6IGZhbHNlLFxuXHRcdGJvcmRlckRhc2g6IFtdLFxuXHRcdGJvcmRlckRhc2hPZmZzZXQ6IDAuMFxuXHR9LFxuXG5cdC8vIHNjYWxlIGxhYmVsXG5cdHNjYWxlTGFiZWw6IHtcblx0XHQvLyBkaXNwbGF5IHByb3BlcnR5XG5cdFx0ZGlzcGxheTogZmFsc2UsXG5cblx0XHQvLyBhY3R1YWwgbGFiZWxcblx0XHRsYWJlbFN0cmluZzogJycsXG5cblx0XHQvLyBsaW5lIGhlaWdodFxuXHRcdGxpbmVIZWlnaHQ6IDEuMixcblxuXHRcdC8vIHRvcC9ib3R0b20gcGFkZGluZ1xuXHRcdHBhZGRpbmc6IHtcblx0XHRcdHRvcDogNCxcblx0XHRcdGJvdHRvbTogNFxuXHRcdH1cblx0fSxcblxuXHQvLyBsYWJlbCBzZXR0aW5nc1xuXHR0aWNrczoge1xuXHRcdGJlZ2luQXRaZXJvOiBmYWxzZSxcblx0XHRtaW5Sb3RhdGlvbjogMCxcblx0XHRtYXhSb3RhdGlvbjogNTAsXG5cdFx0bWlycm9yOiBmYWxzZSxcblx0XHRwYWRkaW5nOiAwLFxuXHRcdHJldmVyc2U6IGZhbHNlLFxuXHRcdGRpc3BsYXk6IHRydWUsXG5cdFx0YXV0b1NraXA6IHRydWUsXG5cdFx0YXV0b1NraXBQYWRkaW5nOiAwLFxuXHRcdGxhYmVsT2Zmc2V0OiAwLFxuXHRcdC8vIFdlIHBhc3MgdGhyb3VnaCBhcnJheXMgdG8gYmUgcmVuZGVyZWQgYXMgbXVsdGlsaW5lIGxhYmVscywgd2UgY29udmVydCBPdGhlcnMgdG8gc3RyaW5ncyBoZXJlLlxuXHRcdGNhbGxiYWNrOiBUaWNrcy5mb3JtYXR0ZXJzLnZhbHVlcyxcblx0XHRtaW5vcjoge30sXG5cdFx0bWFqb3I6IHt9XG5cdH1cbn0pO1xuXG5mdW5jdGlvbiBsYWJlbHNGcm9tVGlja3ModGlja3MpIHtcblx0dmFyIGxhYmVscyA9IFtdO1xuXHR2YXIgaSwgaWxlbjtcblxuXHRmb3IgKGkgPSAwLCBpbGVuID0gdGlja3MubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0bGFiZWxzLnB1c2godGlja3NbaV0ubGFiZWwpO1xuXHR9XG5cblx0cmV0dXJuIGxhYmVscztcbn1cblxuZnVuY3Rpb24gZ2V0TGluZVZhbHVlKHNjYWxlLCBpbmRleCwgb2Zmc2V0R3JpZExpbmVzKSB7XG5cdHZhciBsaW5lVmFsdWUgPSBzY2FsZS5nZXRQaXhlbEZvclRpY2soaW5kZXgpO1xuXG5cdGlmIChvZmZzZXRHcmlkTGluZXMpIHtcblx0XHRpZiAoaW5kZXggPT09IDApIHtcblx0XHRcdGxpbmVWYWx1ZSAtPSAoc2NhbGUuZ2V0UGl4ZWxGb3JUaWNrKDEpIC0gbGluZVZhbHVlKSAvIDI7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGxpbmVWYWx1ZSAtPSAobGluZVZhbHVlIC0gc2NhbGUuZ2V0UGl4ZWxGb3JUaWNrKGluZGV4IC0gMSkpIC8gMjtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGxpbmVWYWx1ZTtcbn1cblxuZnVuY3Rpb24gY29tcHV0ZVRleHRTaXplKGNvbnRleHQsIHRpY2ssIGZvbnQpIHtcblx0cmV0dXJuIGhlbHBlcnMuaXNBcnJheSh0aWNrKSA/XG5cdFx0aGVscGVycy5sb25nZXN0VGV4dChjb250ZXh0LCBmb250LCB0aWNrKSA6XG5cdFx0Y29udGV4dC5tZWFzdXJlVGV4dCh0aWNrKS53aWR0aDtcbn1cblxuZnVuY3Rpb24gcGFyc2VGb250T3B0aW9ucyhvcHRpb25zKSB7XG5cdHZhciB2YWx1ZU9yRGVmYXVsdCA9IGhlbHBlcnMudmFsdWVPckRlZmF1bHQ7XG5cdHZhciBnbG9iYWxEZWZhdWx0cyA9IGRlZmF1bHRzLmdsb2JhbDtcblx0dmFyIHNpemUgPSB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLmZvbnRTaXplLCBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Rm9udFNpemUpO1xuXHR2YXIgc3R5bGUgPSB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLmZvbnRTdHlsZSwgZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdEZvbnRTdHlsZSk7XG5cdHZhciBmYW1pbHkgPSB2YWx1ZU9yRGVmYXVsdChvcHRpb25zLmZvbnRGYW1pbHksIGdsb2JhbERlZmF1bHRzLmRlZmF1bHRGb250RmFtaWx5KTtcblxuXHRyZXR1cm4ge1xuXHRcdHNpemU6IHNpemUsXG5cdFx0c3R5bGU6IHN0eWxlLFxuXHRcdGZhbWlseTogZmFtaWx5LFxuXHRcdGZvbnQ6IGhlbHBlcnMuZm9udFN0cmluZyhzaXplLCBzdHlsZSwgZmFtaWx5KVxuXHR9O1xufVxuXG5mdW5jdGlvbiBwYXJzZUxpbmVIZWlnaHQob3B0aW9ucykge1xuXHRyZXR1cm4gaGVscGVycy5vcHRpb25zLnRvTGluZUhlaWdodChcblx0XHRoZWxwZXJzLnZhbHVlT3JEZWZhdWx0KG9wdGlvbnMubGluZUhlaWdodCwgMS4yKSxcblx0XHRoZWxwZXJzLnZhbHVlT3JEZWZhdWx0KG9wdGlvbnMuZm9udFNpemUsIGRlZmF1bHRzLmdsb2JhbC5kZWZhdWx0Rm9udFNpemUpKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBFbGVtZW50LmV4dGVuZCh7XG5cdC8qKlxuXHQgKiBHZXQgdGhlIHBhZGRpbmcgbmVlZGVkIGZvciB0aGUgc2NhbGVcblx0ICogQG1ldGhvZCBnZXRQYWRkaW5nXG5cdCAqIEBwcml2YXRlXG5cdCAqIEByZXR1cm5zIHtQYWRkaW5nfSB0aGUgbmVjZXNzYXJ5IHBhZGRpbmdcblx0ICovXG5cdGdldFBhZGRpbmc6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0cmV0dXJuIHtcblx0XHRcdGxlZnQ6IG1lLnBhZGRpbmdMZWZ0IHx8IDAsXG5cdFx0XHR0b3A6IG1lLnBhZGRpbmdUb3AgfHwgMCxcblx0XHRcdHJpZ2h0OiBtZS5wYWRkaW5nUmlnaHQgfHwgMCxcblx0XHRcdGJvdHRvbTogbWUucGFkZGluZ0JvdHRvbSB8fCAwXG5cdFx0fTtcblx0fSxcblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgc2NhbGUgdGljayBvYmplY3RzICh7bGFiZWwsIG1ham9yfSlcblx0ICogQHNpbmNlIDIuN1xuXHQgKi9cblx0Z2V0VGlja3M6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLl90aWNrcztcblx0fSxcblxuXHQvLyBUaGVzZSBtZXRob2RzIGFyZSBvcmRlcmVkIGJ5IGxpZmVjeWxlLiBVdGlsaXRpZXMgdGhlbiBmb2xsb3cuXG5cdC8vIEFueSBmdW5jdGlvbiBkZWZpbmVkIGhlcmUgaXMgaW5oZXJpdGVkIGJ5IGFsbCBzY2FsZSB0eXBlcy5cblx0Ly8gQW55IGZ1bmN0aW9uIGNhbiBiZSBleHRlbmRlZCBieSB0aGUgc2NhbGUgdHlwZVxuXG5cdG1lcmdlVGlja3NPcHRpb25zOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgdGlja3MgPSB0aGlzLm9wdGlvbnMudGlja3M7XG5cdFx0aWYgKHRpY2tzLm1pbm9yID09PSBmYWxzZSkge1xuXHRcdFx0dGlja3MubWlub3IgPSB7XG5cdFx0XHRcdGRpc3BsYXk6IGZhbHNlXG5cdFx0XHR9O1xuXHRcdH1cblx0XHRpZiAodGlja3MubWFqb3IgPT09IGZhbHNlKSB7XG5cdFx0XHR0aWNrcy5tYWpvciA9IHtcblx0XHRcdFx0ZGlzcGxheTogZmFsc2Vcblx0XHRcdH07XG5cdFx0fVxuXHRcdGZvciAodmFyIGtleSBpbiB0aWNrcykge1xuXHRcdFx0aWYgKGtleSAhPT0gJ21ham9yJyAmJiBrZXkgIT09ICdtaW5vcicpIHtcblx0XHRcdFx0aWYgKHR5cGVvZiB0aWNrcy5taW5vcltrZXldID09PSAndW5kZWZpbmVkJykge1xuXHRcdFx0XHRcdHRpY2tzLm1pbm9yW2tleV0gPSB0aWNrc1trZXldO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh0eXBlb2YgdGlja3MubWFqb3Jba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0XHRcdFx0XHR0aWNrcy5tYWpvcltrZXldID0gdGlja3Nba2V5XTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblx0YmVmb3JlVXBkYXRlOiBmdW5jdGlvbigpIHtcblx0XHRoZWxwZXJzLmNhbGxiYWNrKHRoaXMub3B0aW9ucy5iZWZvcmVVcGRhdGUsIFt0aGlzXSk7XG5cdH0sXG5cblx0dXBkYXRlOiBmdW5jdGlvbihtYXhXaWR0aCwgbWF4SGVpZ2h0LCBtYXJnaW5zKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgaSwgaWxlbiwgbGFiZWxzLCBsYWJlbCwgdGlja3MsIHRpY2s7XG5cblx0XHQvLyBVcGRhdGUgTGlmZWN5Y2xlIC0gUHJvYmFibHkgZG9uJ3Qgd2FudCB0byBldmVyIGV4dGVuZCBvciBvdmVyd3JpdGUgdGhpcyBmdW5jdGlvbiA7KVxuXHRcdG1lLmJlZm9yZVVwZGF0ZSgpO1xuXG5cdFx0Ly8gQWJzb3JiIHRoZSBtYXN0ZXIgbWVhc3VyZW1lbnRzXG5cdFx0bWUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHRtZS5tYXhIZWlnaHQgPSBtYXhIZWlnaHQ7XG5cdFx0bWUubWFyZ2lucyA9IGhlbHBlcnMuZXh0ZW5kKHtcblx0XHRcdGxlZnQ6IDAsXG5cdFx0XHRyaWdodDogMCxcblx0XHRcdHRvcDogMCxcblx0XHRcdGJvdHRvbTogMFxuXHRcdH0sIG1hcmdpbnMpO1xuXHRcdG1lLmxvbmdlc3RUZXh0Q2FjaGUgPSBtZS5sb25nZXN0VGV4dENhY2hlIHx8IHt9O1xuXG5cdFx0Ly8gRGltZW5zaW9uc1xuXHRcdG1lLmJlZm9yZVNldERpbWVuc2lvbnMoKTtcblx0XHRtZS5zZXREaW1lbnNpb25zKCk7XG5cdFx0bWUuYWZ0ZXJTZXREaW1lbnNpb25zKCk7XG5cblx0XHQvLyBEYXRhIG1pbi9tYXhcblx0XHRtZS5iZWZvcmVEYXRhTGltaXRzKCk7XG5cdFx0bWUuZGV0ZXJtaW5lRGF0YUxpbWl0cygpO1xuXHRcdG1lLmFmdGVyRGF0YUxpbWl0cygpO1xuXG5cdFx0Ly8gVGlja3MgLSBgdGhpcy50aWNrc2AgaXMgbm93IERFUFJFQ0FURUQhXG5cdFx0Ly8gSW50ZXJuYWwgdGlja3MgYXJlIG5vdyBzdG9yZWQgYXMgb2JqZWN0cyBpbiB0aGUgUFJJVkFURSBgdGhpcy5fdGlja3NgIG1lbWJlclxuXHRcdC8vIGFuZCBtdXN0IG5vdCBiZSBhY2Nlc3NlZCBkaXJlY3RseSBmcm9tIG91dHNpZGUgdGhpcyBjbGFzcy4gYHRoaXMudGlja3NgIGJlaW5nXG5cdFx0Ly8gYXJvdW5kIGZvciBsb25nIHRpbWUgYW5kIG5vdCBtYXJrZWQgYXMgcHJpdmF0ZSwgd2UgY2FuJ3QgY2hhbmdlIGl0cyBzdHJ1Y3R1cmVcblx0XHQvLyB3aXRob3V0IHVuZXhwZWN0ZWQgYnJlYWtpbmcgY2hhbmdlcy4gSWYgeW91IG5lZWQgdG8gYWNjZXNzIHRoZSBzY2FsZSB0aWNrcyxcblx0XHQvLyB1c2Ugc2NhbGUuZ2V0VGlja3MoKSBpbnN0ZWFkLlxuXG5cdFx0bWUuYmVmb3JlQnVpbGRUaWNrcygpO1xuXG5cdFx0Ly8gTmV3IGltcGxlbWVudGF0aW9ucyBzaG91bGQgcmV0dXJuIGFuIGFycmF5IG9mIG9iamVjdHMgYnV0IGZvciBCQUNLV0FSRCBDT01QQVQsXG5cdFx0Ly8gd2Ugc3RpbGwgc3VwcG9ydCBubyByZXR1cm4gKGB0aGlzLnRpY2tzYCBpbnRlcm5hbGx5IHNldCBieSBjYWxsaW5nIHRoaXMgbWV0aG9kKS5cblx0XHR0aWNrcyA9IG1lLmJ1aWxkVGlja3MoKSB8fCBbXTtcblxuXHRcdG1lLmFmdGVyQnVpbGRUaWNrcygpO1xuXG5cdFx0bWUuYmVmb3JlVGlja1RvTGFiZWxDb252ZXJzaW9uKCk7XG5cblx0XHQvLyBOZXcgaW1wbGVtZW50YXRpb25zIHNob3VsZCByZXR1cm4gdGhlIGZvcm1hdHRlZCB0aWNrIGxhYmVscyBidXQgZm9yIEJBQ0tXQVJEXG5cdFx0Ly8gQ09NUEFULCB3ZSBzdGlsbCBzdXBwb3J0IG5vIHJldHVybiAoYHRoaXMudGlja3NgIGludGVybmFsbHkgY2hhbmdlZCBieSBjYWxsaW5nXG5cdFx0Ly8gdGhpcyBtZXRob2QgYW5kIHN1cHBvc2VkIHRvIGNvbnRhaW4gb25seSBzdHJpbmcgdmFsdWVzKS5cblx0XHRsYWJlbHMgPSBtZS5jb252ZXJ0VGlja3NUb0xhYmVscyh0aWNrcykgfHwgbWUudGlja3M7XG5cblx0XHRtZS5hZnRlclRpY2tUb0xhYmVsQ29udmVyc2lvbigpO1xuXG5cdFx0bWUudGlja3MgPSBsYWJlbHM7ICAgLy8gQkFDS1dBUkQgQ09NUEFUSUJJTElUWVxuXG5cdFx0Ly8gSU1QT1JUQU5UOiBmcm9tIHRoaXMgcG9pbnQsIHdlIGNvbnNpZGVyIHRoYXQgYHRoaXMudGlja3NgIHdpbGwgTkVWRVIgY2hhbmdlIVxuXG5cdFx0Ly8gQkFDS1dBUkQgQ09NUEFUOiBzeW5jaHJvbml6ZSBgX3RpY2tzYCB3aXRoIGxhYmVscyAoc28gcG90ZW50aWFsbHkgYHRoaXMudGlja3NgKVxuXHRcdGZvciAoaSA9IDAsIGlsZW4gPSBsYWJlbHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRsYWJlbCA9IGxhYmVsc1tpXTtcblx0XHRcdHRpY2sgPSB0aWNrc1tpXTtcblx0XHRcdGlmICghdGljaykge1xuXHRcdFx0XHR0aWNrcy5wdXNoKHRpY2sgPSB7XG5cdFx0XHRcdFx0bGFiZWw6IGxhYmVsLFxuXHRcdFx0XHRcdG1ham9yOiBmYWxzZVxuXHRcdFx0XHR9KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRpY2subGFiZWwgPSBsYWJlbDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRtZS5fdGlja3MgPSB0aWNrcztcblxuXHRcdC8vIFRpY2sgUm90YXRpb25cblx0XHRtZS5iZWZvcmVDYWxjdWxhdGVUaWNrUm90YXRpb24oKTtcblx0XHRtZS5jYWxjdWxhdGVUaWNrUm90YXRpb24oKTtcblx0XHRtZS5hZnRlckNhbGN1bGF0ZVRpY2tSb3RhdGlvbigpO1xuXHRcdC8vIEZpdFxuXHRcdG1lLmJlZm9yZUZpdCgpO1xuXHRcdG1lLmZpdCgpO1xuXHRcdG1lLmFmdGVyRml0KCk7XG5cdFx0Ly9cblx0XHRtZS5hZnRlclVwZGF0ZSgpO1xuXG5cdFx0cmV0dXJuIG1lLm1pblNpemU7XG5cblx0fSxcblx0YWZ0ZXJVcGRhdGU6IGZ1bmN0aW9uKCkge1xuXHRcdGhlbHBlcnMuY2FsbGJhY2sodGhpcy5vcHRpb25zLmFmdGVyVXBkYXRlLCBbdGhpc10pO1xuXHR9LFxuXG5cdC8vXG5cblx0YmVmb3JlU2V0RGltZW5zaW9uczogZnVuY3Rpb24oKSB7XG5cdFx0aGVscGVycy5jYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlU2V0RGltZW5zaW9ucywgW3RoaXNdKTtcblx0fSxcblx0c2V0RGltZW5zaW9uczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHQvLyBTZXQgdGhlIHVuY29uc3RyYWluZWQgZGltZW5zaW9uIGJlZm9yZSBsYWJlbCByb3RhdGlvblxuXHRcdGlmIChtZS5pc0hvcml6b250YWwoKSkge1xuXHRcdFx0Ly8gUmVzZXQgcG9zaXRpb24gYmVmb3JlIGNhbGN1bGF0aW5nIHJvdGF0aW9uXG5cdFx0XHRtZS53aWR0aCA9IG1lLm1heFdpZHRoO1xuXHRcdFx0bWUubGVmdCA9IDA7XG5cdFx0XHRtZS5yaWdodCA9IG1lLndpZHRoO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtZS5oZWlnaHQgPSBtZS5tYXhIZWlnaHQ7XG5cblx0XHRcdC8vIFJlc2V0IHBvc2l0aW9uIGJlZm9yZSBjYWxjdWxhdGluZyByb3RhdGlvblxuXHRcdFx0bWUudG9wID0gMDtcblx0XHRcdG1lLmJvdHRvbSA9IG1lLmhlaWdodDtcblx0XHR9XG5cblx0XHQvLyBSZXNldCBwYWRkaW5nXG5cdFx0bWUucGFkZGluZ0xlZnQgPSAwO1xuXHRcdG1lLnBhZGRpbmdUb3AgPSAwO1xuXHRcdG1lLnBhZGRpbmdSaWdodCA9IDA7XG5cdFx0bWUucGFkZGluZ0JvdHRvbSA9IDA7XG5cdH0sXG5cdGFmdGVyU2V0RGltZW5zaW9uczogZnVuY3Rpb24oKSB7XG5cdFx0aGVscGVycy5jYWxsYmFjayh0aGlzLm9wdGlvbnMuYWZ0ZXJTZXREaW1lbnNpb25zLCBbdGhpc10pO1xuXHR9LFxuXG5cdC8vIERhdGEgbGltaXRzXG5cdGJlZm9yZURhdGFMaW1pdHM6IGZ1bmN0aW9uKCkge1xuXHRcdGhlbHBlcnMuY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZURhdGFMaW1pdHMsIFt0aGlzXSk7XG5cdH0sXG5cdGRldGVybWluZURhdGFMaW1pdHM6IGhlbHBlcnMubm9vcCxcblx0YWZ0ZXJEYXRhTGltaXRzOiBmdW5jdGlvbigpIHtcblx0XHRoZWxwZXJzLmNhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlckRhdGFMaW1pdHMsIFt0aGlzXSk7XG5cdH0sXG5cblx0Ly9cblx0YmVmb3JlQnVpbGRUaWNrczogZnVuY3Rpb24oKSB7XG5cdFx0aGVscGVycy5jYWxsYmFjayh0aGlzLm9wdGlvbnMuYmVmb3JlQnVpbGRUaWNrcywgW3RoaXNdKTtcblx0fSxcblx0YnVpbGRUaWNrczogaGVscGVycy5ub29wLFxuXHRhZnRlckJ1aWxkVGlja3M6IGZ1bmN0aW9uKCkge1xuXHRcdGhlbHBlcnMuY2FsbGJhY2sodGhpcy5vcHRpb25zLmFmdGVyQnVpbGRUaWNrcywgW3RoaXNdKTtcblx0fSxcblxuXHRiZWZvcmVUaWNrVG9MYWJlbENvbnZlcnNpb246IGZ1bmN0aW9uKCkge1xuXHRcdGhlbHBlcnMuY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZVRpY2tUb0xhYmVsQ29udmVyc2lvbiwgW3RoaXNdKTtcblx0fSxcblx0Y29udmVydFRpY2tzVG9MYWJlbHM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0Ly8gQ29udmVydCB0aWNrcyB0byBzdHJpbmdzXG5cdFx0dmFyIHRpY2tPcHRzID0gbWUub3B0aW9ucy50aWNrcztcblx0XHRtZS50aWNrcyA9IG1lLnRpY2tzLm1hcCh0aWNrT3B0cy51c2VyQ2FsbGJhY2sgfHwgdGlja09wdHMuY2FsbGJhY2ssIHRoaXMpO1xuXHR9LFxuXHRhZnRlclRpY2tUb0xhYmVsQ29udmVyc2lvbjogZnVuY3Rpb24oKSB7XG5cdFx0aGVscGVycy5jYWxsYmFjayh0aGlzLm9wdGlvbnMuYWZ0ZXJUaWNrVG9MYWJlbENvbnZlcnNpb24sIFt0aGlzXSk7XG5cdH0sXG5cblx0Ly9cblxuXHRiZWZvcmVDYWxjdWxhdGVUaWNrUm90YXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdGhlbHBlcnMuY2FsbGJhY2sodGhpcy5vcHRpb25zLmJlZm9yZUNhbGN1bGF0ZVRpY2tSb3RhdGlvbiwgW3RoaXNdKTtcblx0fSxcblx0Y2FsY3VsYXRlVGlja1JvdGF0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBjb250ZXh0ID0gbWUuY3R4O1xuXHRcdHZhciB0aWNrT3B0cyA9IG1lLm9wdGlvbnMudGlja3M7XG5cdFx0dmFyIGxhYmVscyA9IGxhYmVsc0Zyb21UaWNrcyhtZS5fdGlja3MpO1xuXG5cdFx0Ly8gR2V0IHRoZSB3aWR0aCBvZiBlYWNoIGdyaWQgYnkgY2FsY3VsYXRpbmcgdGhlIGRpZmZlcmVuY2Vcblx0XHQvLyBiZXR3ZWVuIHggb2Zmc2V0cyBiZXR3ZWVuIDAgYW5kIDEuXG5cdFx0dmFyIHRpY2tGb250ID0gcGFyc2VGb250T3B0aW9ucyh0aWNrT3B0cyk7XG5cdFx0Y29udGV4dC5mb250ID0gdGlja0ZvbnQuZm9udDtcblxuXHRcdHZhciBsYWJlbFJvdGF0aW9uID0gdGlja09wdHMubWluUm90YXRpb24gfHwgMDtcblxuXHRcdGlmIChsYWJlbHMubGVuZ3RoICYmIG1lLm9wdGlvbnMuZGlzcGxheSAmJiBtZS5pc0hvcml6b250YWwoKSkge1xuXHRcdFx0dmFyIG9yaWdpbmFsTGFiZWxXaWR0aCA9IGhlbHBlcnMubG9uZ2VzdFRleHQoY29udGV4dCwgdGlja0ZvbnQuZm9udCwgbGFiZWxzLCBtZS5sb25nZXN0VGV4dENhY2hlKTtcblx0XHRcdHZhciBsYWJlbFdpZHRoID0gb3JpZ2luYWxMYWJlbFdpZHRoO1xuXHRcdFx0dmFyIGNvc1JvdGF0aW9uLCBzaW5Sb3RhdGlvbjtcblxuXHRcdFx0Ly8gQWxsb3cgMyBwaXhlbHMgeDIgcGFkZGluZyBlaXRoZXIgc2lkZSBmb3IgbGFiZWwgcmVhZGFiaWxpdHlcblx0XHRcdHZhciB0aWNrV2lkdGggPSBtZS5nZXRQaXhlbEZvclRpY2soMSkgLSBtZS5nZXRQaXhlbEZvclRpY2soMCkgLSA2O1xuXG5cdFx0XHQvLyBNYXggbGFiZWwgcm90YXRpb24gY2FuIGJlIHNldCBvciBkZWZhdWx0IHRvIDkwIC0gYWxzbyBhY3QgYXMgYSBsb29wIGNvdW50ZXJcblx0XHRcdHdoaWxlIChsYWJlbFdpZHRoID4gdGlja1dpZHRoICYmIGxhYmVsUm90YXRpb24gPCB0aWNrT3B0cy5tYXhSb3RhdGlvbikge1xuXHRcdFx0XHR2YXIgYW5nbGVSYWRpYW5zID0gaGVscGVycy50b1JhZGlhbnMobGFiZWxSb3RhdGlvbik7XG5cdFx0XHRcdGNvc1JvdGF0aW9uID0gTWF0aC5jb3MoYW5nbGVSYWRpYW5zKTtcblx0XHRcdFx0c2luUm90YXRpb24gPSBNYXRoLnNpbihhbmdsZVJhZGlhbnMpO1xuXG5cdFx0XHRcdGlmIChzaW5Sb3RhdGlvbiAqIG9yaWdpbmFsTGFiZWxXaWR0aCA+IG1lLm1heEhlaWdodCkge1xuXHRcdFx0XHRcdC8vIGdvIGJhY2sgb25lIHN0ZXBcblx0XHRcdFx0XHRsYWJlbFJvdGF0aW9uLS07XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRsYWJlbFJvdGF0aW9uKys7XG5cdFx0XHRcdGxhYmVsV2lkdGggPSBjb3NSb3RhdGlvbiAqIG9yaWdpbmFsTGFiZWxXaWR0aDtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRtZS5sYWJlbFJvdGF0aW9uID0gbGFiZWxSb3RhdGlvbjtcblx0fSxcblx0YWZ0ZXJDYWxjdWxhdGVUaWNrUm90YXRpb246IGZ1bmN0aW9uKCkge1xuXHRcdGhlbHBlcnMuY2FsbGJhY2sodGhpcy5vcHRpb25zLmFmdGVyQ2FsY3VsYXRlVGlja1JvdGF0aW9uLCBbdGhpc10pO1xuXHR9LFxuXG5cdC8vXG5cblx0YmVmb3JlRml0OiBmdW5jdGlvbigpIHtcblx0XHRoZWxwZXJzLmNhbGxiYWNrKHRoaXMub3B0aW9ucy5iZWZvcmVGaXQsIFt0aGlzXSk7XG5cdH0sXG5cdGZpdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHQvLyBSZXNldFxuXHRcdHZhciBtaW5TaXplID0gbWUubWluU2l6ZSA9IHtcblx0XHRcdHdpZHRoOiAwLFxuXHRcdFx0aGVpZ2h0OiAwXG5cdFx0fTtcblxuXHRcdHZhciBsYWJlbHMgPSBsYWJlbHNGcm9tVGlja3MobWUuX3RpY2tzKTtcblxuXHRcdHZhciBvcHRzID0gbWUub3B0aW9ucztcblx0XHR2YXIgdGlja09wdHMgPSBvcHRzLnRpY2tzO1xuXHRcdHZhciBzY2FsZUxhYmVsT3B0cyA9IG9wdHMuc2NhbGVMYWJlbDtcblx0XHR2YXIgZ3JpZExpbmVPcHRzID0gb3B0cy5ncmlkTGluZXM7XG5cdFx0dmFyIGRpc3BsYXkgPSBvcHRzLmRpc3BsYXk7XG5cdFx0dmFyIGlzSG9yaXpvbnRhbCA9IG1lLmlzSG9yaXpvbnRhbCgpO1xuXG5cdFx0dmFyIHRpY2tGb250ID0gcGFyc2VGb250T3B0aW9ucyh0aWNrT3B0cyk7XG5cdFx0dmFyIHRpY2tNYXJrTGVuZ3RoID0gb3B0cy5ncmlkTGluZXMudGlja01hcmtMZW5ndGg7XG5cblx0XHQvLyBXaWR0aFxuXHRcdGlmIChpc0hvcml6b250YWwpIHtcblx0XHRcdC8vIHN1YnRyYWN0IHRoZSBtYXJnaW5zIHRvIGxpbmUgdXAgd2l0aCB0aGUgY2hhcnRBcmVhIGlmIHdlIGFyZSBhIGZ1bGwgd2lkdGggc2NhbGVcblx0XHRcdG1pblNpemUud2lkdGggPSBtZS5pc0Z1bGxXaWR0aCgpID8gbWUubWF4V2lkdGggLSBtZS5tYXJnaW5zLmxlZnQgLSBtZS5tYXJnaW5zLnJpZ2h0IDogbWUubWF4V2lkdGg7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1pblNpemUud2lkdGggPSBkaXNwbGF5ICYmIGdyaWRMaW5lT3B0cy5kcmF3VGlja3MgPyB0aWNrTWFya0xlbmd0aCA6IDA7XG5cdFx0fVxuXG5cdFx0Ly8gaGVpZ2h0XG5cdFx0aWYgKGlzSG9yaXpvbnRhbCkge1xuXHRcdFx0bWluU2l6ZS5oZWlnaHQgPSBkaXNwbGF5ICYmIGdyaWRMaW5lT3B0cy5kcmF3VGlja3MgPyB0aWNrTWFya0xlbmd0aCA6IDA7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1pblNpemUuaGVpZ2h0ID0gbWUubWF4SGVpZ2h0OyAvLyBmaWxsIGFsbCB0aGUgaGVpZ2h0XG5cdFx0fVxuXG5cdFx0Ly8gQXJlIHdlIHNob3dpbmcgYSB0aXRsZSBmb3IgdGhlIHNjYWxlP1xuXHRcdGlmIChzY2FsZUxhYmVsT3B0cy5kaXNwbGF5ICYmIGRpc3BsYXkpIHtcblx0XHRcdHZhciBzY2FsZUxhYmVsTGluZUhlaWdodCA9IHBhcnNlTGluZUhlaWdodChzY2FsZUxhYmVsT3B0cyk7XG5cdFx0XHR2YXIgc2NhbGVMYWJlbFBhZGRpbmcgPSBoZWxwZXJzLm9wdGlvbnMudG9QYWRkaW5nKHNjYWxlTGFiZWxPcHRzLnBhZGRpbmcpO1xuXHRcdFx0dmFyIGRlbHRhSGVpZ2h0ID0gc2NhbGVMYWJlbExpbmVIZWlnaHQgKyBzY2FsZUxhYmVsUGFkZGluZy5oZWlnaHQ7XG5cblx0XHRcdGlmIChpc0hvcml6b250YWwpIHtcblx0XHRcdFx0bWluU2l6ZS5oZWlnaHQgKz0gZGVsdGFIZWlnaHQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtaW5TaXplLndpZHRoICs9IGRlbHRhSGVpZ2h0O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIERvbid0IGJvdGhlciBmaXR0aW5nIHRoZSB0aWNrcyBpZiB3ZSBhcmUgbm90IHNob3dpbmcgdGhlbVxuXHRcdGlmICh0aWNrT3B0cy5kaXNwbGF5ICYmIGRpc3BsYXkpIHtcblx0XHRcdHZhciBsYXJnZXN0VGV4dFdpZHRoID0gaGVscGVycy5sb25nZXN0VGV4dChtZS5jdHgsIHRpY2tGb250LmZvbnQsIGxhYmVscywgbWUubG9uZ2VzdFRleHRDYWNoZSk7XG5cdFx0XHR2YXIgdGFsbGVzdExhYmVsSGVpZ2h0SW5MaW5lcyA9IGhlbHBlcnMubnVtYmVyT2ZMYWJlbExpbmVzKGxhYmVscyk7XG5cdFx0XHR2YXIgbGluZVNwYWNlID0gdGlja0ZvbnQuc2l6ZSAqIDAuNTtcblx0XHRcdHZhciB0aWNrUGFkZGluZyA9IG1lLm9wdGlvbnMudGlja3MucGFkZGluZztcblxuXHRcdFx0aWYgKGlzSG9yaXpvbnRhbCkge1xuXHRcdFx0XHQvLyBBIGhvcml6b250YWwgYXhpcyBpcyBtb3JlIGNvbnN0cmFpbmVkIGJ5IHRoZSBoZWlnaHQuXG5cdFx0XHRcdG1lLmxvbmdlc3RMYWJlbFdpZHRoID0gbGFyZ2VzdFRleHRXaWR0aDtcblxuXHRcdFx0XHR2YXIgYW5nbGVSYWRpYW5zID0gaGVscGVycy50b1JhZGlhbnMobWUubGFiZWxSb3RhdGlvbik7XG5cdFx0XHRcdHZhciBjb3NSb3RhdGlvbiA9IE1hdGguY29zKGFuZ2xlUmFkaWFucyk7XG5cdFx0XHRcdHZhciBzaW5Sb3RhdGlvbiA9IE1hdGguc2luKGFuZ2xlUmFkaWFucyk7XG5cblx0XHRcdFx0Ly8gVE9ETyAtIGltcHJvdmUgdGhpcyBjYWxjdWxhdGlvblxuXHRcdFx0XHR2YXIgbGFiZWxIZWlnaHQgPSAoc2luUm90YXRpb24gKiBsYXJnZXN0VGV4dFdpZHRoKVxuXHRcdFx0XHRcdCsgKHRpY2tGb250LnNpemUgKiB0YWxsZXN0TGFiZWxIZWlnaHRJbkxpbmVzKVxuXHRcdFx0XHRcdCsgKGxpbmVTcGFjZSAqICh0YWxsZXN0TGFiZWxIZWlnaHRJbkxpbmVzIC0gMSkpXG5cdFx0XHRcdFx0KyBsaW5lU3BhY2U7IC8vIHBhZGRpbmdcblxuXHRcdFx0XHRtaW5TaXplLmhlaWdodCA9IE1hdGgubWluKG1lLm1heEhlaWdodCwgbWluU2l6ZS5oZWlnaHQgKyBsYWJlbEhlaWdodCArIHRpY2tQYWRkaW5nKTtcblxuXHRcdFx0XHRtZS5jdHguZm9udCA9IHRpY2tGb250LmZvbnQ7XG5cdFx0XHRcdHZhciBmaXJzdExhYmVsV2lkdGggPSBjb21wdXRlVGV4dFNpemUobWUuY3R4LCBsYWJlbHNbMF0sIHRpY2tGb250LmZvbnQpO1xuXHRcdFx0XHR2YXIgbGFzdExhYmVsV2lkdGggPSBjb21wdXRlVGV4dFNpemUobWUuY3R4LCBsYWJlbHNbbGFiZWxzLmxlbmd0aCAtIDFdLCB0aWNrRm9udC5mb250KTtcblxuXHRcdFx0XHQvLyBFbnN1cmUgdGhhdCBvdXIgdGlja3MgYXJlIGFsd2F5cyBpbnNpZGUgdGhlIGNhbnZhcy4gV2hlbiByb3RhdGVkLCB0aWNrcyBhcmUgcmlnaHQgYWxpZ25lZFxuXHRcdFx0XHQvLyB3aGljaCBtZWFucyB0aGF0IHRoZSByaWdodCBwYWRkaW5nIGlzIGRvbWluYXRlZCBieSB0aGUgZm9udCBoZWlnaHRcblx0XHRcdFx0aWYgKG1lLmxhYmVsUm90YXRpb24gIT09IDApIHtcblx0XHRcdFx0XHRtZS5wYWRkaW5nTGVmdCA9IG9wdHMucG9zaXRpb24gPT09ICdib3R0b20nID8gKGNvc1JvdGF0aW9uICogZmlyc3RMYWJlbFdpZHRoKSArIDMgOiAoY29zUm90YXRpb24gKiBsaW5lU3BhY2UpICsgMzsgLy8gYWRkIDMgcHggdG8gbW92ZSBhd2F5IGZyb20gY2FudmFzIGVkZ2VzXG5cdFx0XHRcdFx0bWUucGFkZGluZ1JpZ2h0ID0gb3B0cy5wb3NpdGlvbiA9PT0gJ2JvdHRvbScgPyAoY29zUm90YXRpb24gKiBsaW5lU3BhY2UpICsgMyA6IChjb3NSb3RhdGlvbiAqIGxhc3RMYWJlbFdpZHRoKSArIDM7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bWUucGFkZGluZ0xlZnQgPSBmaXJzdExhYmVsV2lkdGggLyAyICsgMzsgLy8gYWRkIDMgcHggdG8gbW92ZSBhd2F5IGZyb20gY2FudmFzIGVkZ2VzXG5cdFx0XHRcdFx0bWUucGFkZGluZ1JpZ2h0ID0gbGFzdExhYmVsV2lkdGggLyAyICsgMztcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gQSB2ZXJ0aWNhbCBheGlzIGlzIG1vcmUgY29uc3RyYWluZWQgYnkgdGhlIHdpZHRoLiBMYWJlbHMgYXJlIHRoZVxuXHRcdFx0XHQvLyBkb21pbmFudCBmYWN0b3IgaGVyZSwgc28gZ2V0IHRoYXQgbGVuZ3RoIGZpcnN0IGFuZCBhY2NvdW50IGZvciBwYWRkaW5nXG5cdFx0XHRcdGlmICh0aWNrT3B0cy5taXJyb3IpIHtcblx0XHRcdFx0XHRsYXJnZXN0VGV4dFdpZHRoID0gMDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyB1c2UgbGluZVNwYWNlIGZvciBjb25zaXN0ZW5jeSB3aXRoIGhvcml6b250YWwgYXhpc1xuXHRcdFx0XHRcdC8vIHRpY2tQYWRkaW5nIGlzIG5vdCBpbXBsZW1lbnRlZCBmb3IgaG9yaXpvbnRhbFxuXHRcdFx0XHRcdGxhcmdlc3RUZXh0V2lkdGggKz0gdGlja1BhZGRpbmcgKyBsaW5lU3BhY2U7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRtaW5TaXplLndpZHRoID0gTWF0aC5taW4obWUubWF4V2lkdGgsIG1pblNpemUud2lkdGggKyBsYXJnZXN0VGV4dFdpZHRoKTtcblxuXHRcdFx0XHRtZS5wYWRkaW5nVG9wID0gdGlja0ZvbnQuc2l6ZSAvIDI7XG5cdFx0XHRcdG1lLnBhZGRpbmdCb3R0b20gPSB0aWNrRm9udC5zaXplIC8gMjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRtZS5oYW5kbGVNYXJnaW5zKCk7XG5cblx0XHRtZS53aWR0aCA9IG1pblNpemUud2lkdGg7XG5cdFx0bWUuaGVpZ2h0ID0gbWluU2l6ZS5oZWlnaHQ7XG5cdH0sXG5cblx0LyoqXG5cdCAqIEhhbmRsZSBtYXJnaW5zIGFuZCBwYWRkaW5nIGludGVyYWN0aW9uc1xuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0aGFuZGxlTWFyZ2luczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHRpZiAobWUubWFyZ2lucykge1xuXHRcdFx0bWUucGFkZGluZ0xlZnQgPSBNYXRoLm1heChtZS5wYWRkaW5nTGVmdCAtIG1lLm1hcmdpbnMubGVmdCwgMCk7XG5cdFx0XHRtZS5wYWRkaW5nVG9wID0gTWF0aC5tYXgobWUucGFkZGluZ1RvcCAtIG1lLm1hcmdpbnMudG9wLCAwKTtcblx0XHRcdG1lLnBhZGRpbmdSaWdodCA9IE1hdGgubWF4KG1lLnBhZGRpbmdSaWdodCAtIG1lLm1hcmdpbnMucmlnaHQsIDApO1xuXHRcdFx0bWUucGFkZGluZ0JvdHRvbSA9IE1hdGgubWF4KG1lLnBhZGRpbmdCb3R0b20gLSBtZS5tYXJnaW5zLmJvdHRvbSwgMCk7XG5cdFx0fVxuXHR9LFxuXG5cdGFmdGVyRml0OiBmdW5jdGlvbigpIHtcblx0XHRoZWxwZXJzLmNhbGxiYWNrKHRoaXMub3B0aW9ucy5hZnRlckZpdCwgW3RoaXNdKTtcblx0fSxcblxuXHQvLyBTaGFyZWQgTWV0aG9kc1xuXHRpc0hvcml6b250YWw6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm9wdGlvbnMucG9zaXRpb24gPT09ICd0b3AnIHx8IHRoaXMub3B0aW9ucy5wb3NpdGlvbiA9PT0gJ2JvdHRvbSc7XG5cdH0sXG5cdGlzRnVsbFdpZHRoOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gKHRoaXMub3B0aW9ucy5mdWxsV2lkdGgpO1xuXHR9LFxuXG5cdC8vIEdldCB0aGUgY29ycmVjdCB2YWx1ZS4gTmFOIGJhZCBpbnB1dHMsIElmIHRoZSB2YWx1ZSB0eXBlIGlzIG9iamVjdCBnZXQgdGhlIHggb3IgeSBiYXNlZCBvbiB3aGV0aGVyIHdlIGFyZSBob3Jpem9udGFsIG9yIG5vdFxuXHRnZXRSaWdodFZhbHVlOiBmdW5jdGlvbihyYXdWYWx1ZSkge1xuXHRcdC8vIE51bGwgYW5kIHVuZGVmaW5lZCB2YWx1ZXMgZmlyc3Rcblx0XHRpZiAoaGVscGVycy5pc051bGxPclVuZGVmKHJhd1ZhbHVlKSkge1xuXHRcdFx0cmV0dXJuIE5hTjtcblx0XHR9XG5cdFx0Ly8gaXNOYU4ob2JqZWN0KSByZXR1cm5zIHRydWUsIHNvIG1ha2Ugc3VyZSBOYU4gaXMgY2hlY2tpbmcgZm9yIGEgbnVtYmVyOyBEaXNjYXJkIEluZmluaXRlIHZhbHVlc1xuXHRcdGlmICh0eXBlb2YgcmF3VmFsdWUgPT09ICdudW1iZXInICYmICFpc0Zpbml0ZShyYXdWYWx1ZSkpIHtcblx0XHRcdHJldHVybiBOYU47XG5cdFx0fVxuXHRcdC8vIElmIGl0IGlzIGluIGZhY3QgYW4gb2JqZWN0LCBkaXZlIGluIG9uZSBtb3JlIGxldmVsXG5cdFx0aWYgKHJhd1ZhbHVlKSB7XG5cdFx0XHRpZiAodGhpcy5pc0hvcml6b250YWwoKSkge1xuXHRcdFx0XHRpZiAocmF3VmFsdWUueCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXMuZ2V0UmlnaHRWYWx1ZShyYXdWYWx1ZS54KTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIGlmIChyYXdWYWx1ZS55ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuZ2V0UmlnaHRWYWx1ZShyYXdWYWx1ZS55KTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBWYWx1ZSBpcyBnb29kLCByZXR1cm4gaXRcblx0XHRyZXR1cm4gcmF3VmFsdWU7XG5cdH0sXG5cblx0LyoqXG5cdCAqIFVzZWQgdG8gZ2V0IHRoZSB2YWx1ZSB0byBkaXNwbGF5IGluIHRoZSB0b29sdGlwIGZvciB0aGUgZGF0YSBhdCB0aGUgZ2l2ZW4gaW5kZXhcblx0ICogQHBhcmFtIGluZGV4XG5cdCAqIEBwYXJhbSBkYXRhc2V0SW5kZXhcblx0ICovXG5cdGdldExhYmVsRm9ySW5kZXg6IGhlbHBlcnMubm9vcCxcblxuXHQvKipcblx0ICogUmV0dXJucyB0aGUgbG9jYXRpb24gb2YgdGhlIGdpdmVuIGRhdGEgcG9pbnQuIFZhbHVlIGNhbiBlaXRoZXIgYmUgYW4gaW5kZXggb3IgYSBudW1lcmljYWwgdmFsdWVcblx0ICogVGhlIGNvb3JkaW5hdGUgKDAsIDApIGlzIGF0IHRoZSB1cHBlci1sZWZ0IGNvcm5lciBvZiB0aGUgY2FudmFzXG5cdCAqIEBwYXJhbSB2YWx1ZVxuXHQgKiBAcGFyYW0gaW5kZXhcblx0ICogQHBhcmFtIGRhdGFzZXRJbmRleFxuXHQgKi9cblx0Z2V0UGl4ZWxGb3JWYWx1ZTogaGVscGVycy5ub29wLFxuXG5cdC8qKlxuXHQgKiBVc2VkIHRvIGdldCB0aGUgZGF0YSB2YWx1ZSBmcm9tIGEgZ2l2ZW4gcGl4ZWwuIFRoaXMgaXMgdGhlIGludmVyc2Ugb2YgZ2V0UGl4ZWxGb3JWYWx1ZVxuXHQgKiBUaGUgY29vcmRpbmF0ZSAoMCwgMCkgaXMgYXQgdGhlIHVwcGVyLWxlZnQgY29ybmVyIG9mIHRoZSBjYW52YXNcblx0ICogQHBhcmFtIHBpeGVsXG5cdCAqL1xuXHRnZXRWYWx1ZUZvclBpeGVsOiBoZWxwZXJzLm5vb3AsXG5cblx0LyoqXG5cdCAqIFJldHVybnMgdGhlIGxvY2F0aW9uIG9mIHRoZSB0aWNrIGF0IHRoZSBnaXZlbiBpbmRleFxuXHQgKiBUaGUgY29vcmRpbmF0ZSAoMCwgMCkgaXMgYXQgdGhlIHVwcGVyLWxlZnQgY29ybmVyIG9mIHRoZSBjYW52YXNcblx0ICovXG5cdGdldFBpeGVsRm9yVGljazogZnVuY3Rpb24oaW5kZXgpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBvZmZzZXQgPSBtZS5vcHRpb25zLm9mZnNldDtcblx0XHRpZiAobWUuaXNIb3Jpem9udGFsKCkpIHtcblx0XHRcdHZhciBpbm5lcldpZHRoID0gbWUud2lkdGggLSAobWUucGFkZGluZ0xlZnQgKyBtZS5wYWRkaW5nUmlnaHQpO1xuXHRcdFx0dmFyIHRpY2tXaWR0aCA9IGlubmVyV2lkdGggLyBNYXRoLm1heCgobWUuX3RpY2tzLmxlbmd0aCAtIChvZmZzZXQgPyAwIDogMSkpLCAxKTtcblx0XHRcdHZhciBwaXhlbCA9ICh0aWNrV2lkdGggKiBpbmRleCkgKyBtZS5wYWRkaW5nTGVmdDtcblxuXHRcdFx0aWYgKG9mZnNldCkge1xuXHRcdFx0XHRwaXhlbCArPSB0aWNrV2lkdGggLyAyO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgZmluYWxWYWwgPSBtZS5sZWZ0ICsgTWF0aC5yb3VuZChwaXhlbCk7XG5cdFx0XHRmaW5hbFZhbCArPSBtZS5pc0Z1bGxXaWR0aCgpID8gbWUubWFyZ2lucy5sZWZ0IDogMDtcblx0XHRcdHJldHVybiBmaW5hbFZhbDtcblx0XHR9XG5cdFx0dmFyIGlubmVySGVpZ2h0ID0gbWUuaGVpZ2h0IC0gKG1lLnBhZGRpbmdUb3AgKyBtZS5wYWRkaW5nQm90dG9tKTtcblx0XHRyZXR1cm4gbWUudG9wICsgKGluZGV4ICogKGlubmVySGVpZ2h0IC8gKG1lLl90aWNrcy5sZW5ndGggLSAxKSkpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBVdGlsaXR5IGZvciBnZXR0aW5nIHRoZSBwaXhlbCBsb2NhdGlvbiBvZiBhIHBlcmNlbnRhZ2Ugb2Ygc2NhbGVcblx0ICogVGhlIGNvb3JkaW5hdGUgKDAsIDApIGlzIGF0IHRoZSB1cHBlci1sZWZ0IGNvcm5lciBvZiB0aGUgY2FudmFzXG5cdCAqL1xuXHRnZXRQaXhlbEZvckRlY2ltYWw6IGZ1bmN0aW9uKGRlY2ltYWwpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdGlmIChtZS5pc0hvcml6b250YWwoKSkge1xuXHRcdFx0dmFyIGlubmVyV2lkdGggPSBtZS53aWR0aCAtIChtZS5wYWRkaW5nTGVmdCArIG1lLnBhZGRpbmdSaWdodCk7XG5cdFx0XHR2YXIgdmFsdWVPZmZzZXQgPSAoaW5uZXJXaWR0aCAqIGRlY2ltYWwpICsgbWUucGFkZGluZ0xlZnQ7XG5cblx0XHRcdHZhciBmaW5hbFZhbCA9IG1lLmxlZnQgKyBNYXRoLnJvdW5kKHZhbHVlT2Zmc2V0KTtcblx0XHRcdGZpbmFsVmFsICs9IG1lLmlzRnVsbFdpZHRoKCkgPyBtZS5tYXJnaW5zLmxlZnQgOiAwO1xuXHRcdFx0cmV0dXJuIGZpbmFsVmFsO1xuXHRcdH1cblx0XHRyZXR1cm4gbWUudG9wICsgKGRlY2ltYWwgKiBtZS5oZWlnaHQpO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIHRoZSBwaXhlbCBmb3IgdGhlIG1pbmltdW0gY2hhcnQgdmFsdWVcblx0ICogVGhlIGNvb3JkaW5hdGUgKDAsIDApIGlzIGF0IHRoZSB1cHBlci1sZWZ0IGNvcm5lciBvZiB0aGUgY2FudmFzXG5cdCAqL1xuXHRnZXRCYXNlUGl4ZWw6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmdldFBpeGVsRm9yVmFsdWUodGhpcy5nZXRCYXNlVmFsdWUoKSk7XG5cdH0sXG5cblx0Z2V0QmFzZVZhbHVlOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciBtaW4gPSBtZS5taW47XG5cdFx0dmFyIG1heCA9IG1lLm1heDtcblxuXHRcdHJldHVybiBtZS5iZWdpbkF0WmVybyA/IDAgOlxuXHRcdFx0bWluIDwgMCAmJiBtYXggPCAwID8gbWF4IDpcblx0XHRcdG1pbiA+IDAgJiYgbWF4ID4gMCA/IG1pbiA6XG5cdFx0XHQwO1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBSZXR1cm5zIGEgc3Vic2V0IG9mIHRpY2tzIHRvIGJlIHBsb3R0ZWQgdG8gYXZvaWQgb3ZlcmxhcHBpbmcgbGFiZWxzLlxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2F1dG9Ta2lwOiBmdW5jdGlvbih0aWNrcykge1xuXHRcdHZhciBza2lwUmF0aW87XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgaXNIb3Jpem9udGFsID0gbWUuaXNIb3Jpem9udGFsKCk7XG5cdFx0dmFyIG9wdGlvblRpY2tzID0gbWUub3B0aW9ucy50aWNrcy5taW5vcjtcblx0XHR2YXIgdGlja0NvdW50ID0gdGlja3MubGVuZ3RoO1xuXHRcdHZhciBsYWJlbFJvdGF0aW9uUmFkaWFucyA9IGhlbHBlcnMudG9SYWRpYW5zKG1lLmxhYmVsUm90YXRpb24pO1xuXHRcdHZhciBjb3NSb3RhdGlvbiA9IE1hdGguY29zKGxhYmVsUm90YXRpb25SYWRpYW5zKTtcblx0XHR2YXIgbG9uZ2VzdFJvdGF0ZWRMYWJlbCA9IG1lLmxvbmdlc3RMYWJlbFdpZHRoICogY29zUm90YXRpb247XG5cdFx0dmFyIHJlc3VsdCA9IFtdO1xuXHRcdHZhciBpLCB0aWNrLCBzaG91bGRTa2lwO1xuXG5cdFx0Ly8gZmlndXJlIG91dCB0aGUgbWF4aW11bSBudW1iZXIgb2YgZ3JpZGxpbmVzIHRvIHNob3dcblx0XHR2YXIgbWF4VGlja3M7XG5cdFx0aWYgKG9wdGlvblRpY2tzLm1heFRpY2tzTGltaXQpIHtcblx0XHRcdG1heFRpY2tzID0gb3B0aW9uVGlja3MubWF4VGlja3NMaW1pdDtcblx0XHR9XG5cblx0XHRpZiAoaXNIb3Jpem9udGFsKSB7XG5cdFx0XHRza2lwUmF0aW8gPSBmYWxzZTtcblxuXHRcdFx0aWYgKChsb25nZXN0Um90YXRlZExhYmVsICsgb3B0aW9uVGlja3MuYXV0b1NraXBQYWRkaW5nKSAqIHRpY2tDb3VudCA+IChtZS53aWR0aCAtIChtZS5wYWRkaW5nTGVmdCArIG1lLnBhZGRpbmdSaWdodCkpKSB7XG5cdFx0XHRcdHNraXBSYXRpbyA9IDEgKyBNYXRoLmZsb29yKCgobG9uZ2VzdFJvdGF0ZWRMYWJlbCArIG9wdGlvblRpY2tzLmF1dG9Ta2lwUGFkZGluZykgKiB0aWNrQ291bnQpIC8gKG1lLndpZHRoIC0gKG1lLnBhZGRpbmdMZWZ0ICsgbWUucGFkZGluZ1JpZ2h0KSkpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBpZiB0aGV5IGRlZmluZWQgYSBtYXggbnVtYmVyIG9mIG9wdGlvblRpY2tzLFxuXHRcdFx0Ly8gaW5jcmVhc2Ugc2tpcFJhdGlvIHVudGlsIHRoYXQgbnVtYmVyIGlzIG1ldFxuXHRcdFx0aWYgKG1heFRpY2tzICYmIHRpY2tDb3VudCA+IG1heFRpY2tzKSB7XG5cdFx0XHRcdHNraXBSYXRpbyA9IE1hdGgubWF4KHNraXBSYXRpbywgTWF0aC5mbG9vcih0aWNrQ291bnQgLyBtYXhUaWNrcykpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGZvciAoaSA9IDA7IGkgPCB0aWNrQ291bnQ7IGkrKykge1xuXHRcdFx0dGljayA9IHRpY2tzW2ldO1xuXG5cdFx0XHQvLyBTaW5jZSB3ZSBhbHdheXMgc2hvdyB0aGUgbGFzdCB0aWNrLHdlIG5lZWQgbWF5IG5lZWQgdG8gaGlkZSB0aGUgbGFzdCBzaG93biBvbmUgYmVmb3JlXG5cdFx0XHRzaG91bGRTa2lwID0gKHNraXBSYXRpbyA+IDEgJiYgaSAlIHNraXBSYXRpbyA+IDApIHx8IChpICUgc2tpcFJhdGlvID09PSAwICYmIGkgKyBza2lwUmF0aW8gPj0gdGlja0NvdW50KTtcblx0XHRcdGlmIChzaG91bGRTa2lwICYmIGkgIT09IHRpY2tDb3VudCAtIDEpIHtcblx0XHRcdFx0Ly8gbGVhdmUgdGljayBpbiBwbGFjZSBidXQgbWFrZSBzdXJlIGl0J3Mgbm90IGRpc3BsYXllZCAoIzQ2MzUpXG5cdFx0XHRcdGRlbGV0ZSB0aWNrLmxhYmVsO1xuXHRcdFx0fVxuXHRcdFx0cmVzdWx0LnB1c2godGljayk7XG5cdFx0fVxuXHRcdHJldHVybiByZXN1bHQ7XG5cdH0sXG5cblx0Ly8gQWN0dWFsbHkgZHJhdyB0aGUgc2NhbGUgb24gdGhlIGNhbnZhc1xuXHQvLyBAcGFyYW0ge3JlY3RhbmdsZX0gY2hhcnRBcmVhIDogdGhlIGFyZWEgb2YgdGhlIGNoYXJ0IHRvIGRyYXcgZnVsbCBncmlkIGxpbmVzIG9uXG5cdGRyYXc6IGZ1bmN0aW9uKGNoYXJ0QXJlYSkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIG9wdGlvbnMgPSBtZS5vcHRpb25zO1xuXHRcdGlmICghb3B0aW9ucy5kaXNwbGF5KSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFyIGNvbnRleHQgPSBtZS5jdHg7XG5cdFx0dmFyIGdsb2JhbERlZmF1bHRzID0gZGVmYXVsdHMuZ2xvYmFsO1xuXHRcdHZhciBvcHRpb25UaWNrcyA9IG9wdGlvbnMudGlja3MubWlub3I7XG5cdFx0dmFyIG9wdGlvbk1ham9yVGlja3MgPSBvcHRpb25zLnRpY2tzLm1ham9yIHx8IG9wdGlvblRpY2tzO1xuXHRcdHZhciBncmlkTGluZXMgPSBvcHRpb25zLmdyaWRMaW5lcztcblx0XHR2YXIgc2NhbGVMYWJlbCA9IG9wdGlvbnMuc2NhbGVMYWJlbDtcblxuXHRcdHZhciBpc1JvdGF0ZWQgPSBtZS5sYWJlbFJvdGF0aW9uICE9PSAwO1xuXHRcdHZhciBpc0hvcml6b250YWwgPSBtZS5pc0hvcml6b250YWwoKTtcblxuXHRcdHZhciB0aWNrcyA9IG9wdGlvblRpY2tzLmF1dG9Ta2lwID8gbWUuX2F1dG9Ta2lwKG1lLmdldFRpY2tzKCkpIDogbWUuZ2V0VGlja3MoKTtcblx0XHR2YXIgdGlja0ZvbnRDb2xvciA9IGhlbHBlcnMudmFsdWVPckRlZmF1bHQob3B0aW9uVGlja3MuZm9udENvbG9yLCBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Rm9udENvbG9yKTtcblx0XHR2YXIgdGlja0ZvbnQgPSBwYXJzZUZvbnRPcHRpb25zKG9wdGlvblRpY2tzKTtcblx0XHR2YXIgbWFqb3JUaWNrRm9udENvbG9yID0gaGVscGVycy52YWx1ZU9yRGVmYXVsdChvcHRpb25NYWpvclRpY2tzLmZvbnRDb2xvciwgZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdEZvbnRDb2xvcik7XG5cdFx0dmFyIG1ham9yVGlja0ZvbnQgPSBwYXJzZUZvbnRPcHRpb25zKG9wdGlvbk1ham9yVGlja3MpO1xuXG5cdFx0dmFyIHRsID0gZ3JpZExpbmVzLmRyYXdUaWNrcyA/IGdyaWRMaW5lcy50aWNrTWFya0xlbmd0aCA6IDA7XG5cblx0XHR2YXIgc2NhbGVMYWJlbEZvbnRDb2xvciA9IGhlbHBlcnMudmFsdWVPckRlZmF1bHQoc2NhbGVMYWJlbC5mb250Q29sb3IsIGdsb2JhbERlZmF1bHRzLmRlZmF1bHRGb250Q29sb3IpO1xuXHRcdHZhciBzY2FsZUxhYmVsRm9udCA9IHBhcnNlRm9udE9wdGlvbnMoc2NhbGVMYWJlbCk7XG5cdFx0dmFyIHNjYWxlTGFiZWxQYWRkaW5nID0gaGVscGVycy5vcHRpb25zLnRvUGFkZGluZyhzY2FsZUxhYmVsLnBhZGRpbmcpO1xuXHRcdHZhciBsYWJlbFJvdGF0aW9uUmFkaWFucyA9IGhlbHBlcnMudG9SYWRpYW5zKG1lLmxhYmVsUm90YXRpb24pO1xuXG5cdFx0dmFyIGl0ZW1zVG9EcmF3ID0gW107XG5cblx0XHR2YXIgYXhpc1dpZHRoID0gbWUub3B0aW9ucy5ncmlkTGluZXMubGluZVdpZHRoO1xuXHRcdHZhciB4VGlja1N0YXJ0ID0gb3B0aW9ucy5wb3NpdGlvbiA9PT0gJ3JpZ2h0JyA/IG1lLmxlZnQgOiBtZS5yaWdodCAtIGF4aXNXaWR0aCAtIHRsO1xuXHRcdHZhciB4VGlja0VuZCA9IG9wdGlvbnMucG9zaXRpb24gPT09ICdyaWdodCcgPyBtZS5sZWZ0ICsgdGwgOiBtZS5yaWdodDtcblx0XHR2YXIgeVRpY2tTdGFydCA9IG9wdGlvbnMucG9zaXRpb24gPT09ICdib3R0b20nID8gbWUudG9wICsgYXhpc1dpZHRoIDogbWUuYm90dG9tIC0gdGwgLSBheGlzV2lkdGg7XG5cdFx0dmFyIHlUaWNrRW5kID0gb3B0aW9ucy5wb3NpdGlvbiA9PT0gJ2JvdHRvbScgPyBtZS50b3AgKyBheGlzV2lkdGggKyB0bCA6IG1lLmJvdHRvbSArIGF4aXNXaWR0aDtcblxuXHRcdGhlbHBlcnMuZWFjaCh0aWNrcywgZnVuY3Rpb24odGljaywgaW5kZXgpIHtcblx0XHRcdC8vIGF1dG9za2lwcGVyIHNraXBwZWQgdGhpcyB0aWNrICgjNDYzNSlcblx0XHRcdGlmIChoZWxwZXJzLmlzTnVsbE9yVW5kZWYodGljay5sYWJlbCkpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgbGFiZWwgPSB0aWNrLmxhYmVsO1xuXHRcdFx0dmFyIGxpbmVXaWR0aCwgbGluZUNvbG9yLCBib3JkZXJEYXNoLCBib3JkZXJEYXNoT2Zmc2V0O1xuXHRcdFx0aWYgKGluZGV4ID09PSBtZS56ZXJvTGluZUluZGV4ICYmIG9wdGlvbnMub2Zmc2V0ID09PSBncmlkTGluZXMub2Zmc2V0R3JpZExpbmVzKSB7XG5cdFx0XHRcdC8vIERyYXcgdGhlIGZpcnN0IGluZGV4IHNwZWNpYWxseVxuXHRcdFx0XHRsaW5lV2lkdGggPSBncmlkTGluZXMuemVyb0xpbmVXaWR0aDtcblx0XHRcdFx0bGluZUNvbG9yID0gZ3JpZExpbmVzLnplcm9MaW5lQ29sb3I7XG5cdFx0XHRcdGJvcmRlckRhc2ggPSBncmlkTGluZXMuemVyb0xpbmVCb3JkZXJEYXNoO1xuXHRcdFx0XHRib3JkZXJEYXNoT2Zmc2V0ID0gZ3JpZExpbmVzLnplcm9MaW5lQm9yZGVyRGFzaE9mZnNldDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGxpbmVXaWR0aCA9IGhlbHBlcnMudmFsdWVBdEluZGV4T3JEZWZhdWx0KGdyaWRMaW5lcy5saW5lV2lkdGgsIGluZGV4KTtcblx0XHRcdFx0bGluZUNvbG9yID0gaGVscGVycy52YWx1ZUF0SW5kZXhPckRlZmF1bHQoZ3JpZExpbmVzLmNvbG9yLCBpbmRleCk7XG5cdFx0XHRcdGJvcmRlckRhc2ggPSBoZWxwZXJzLnZhbHVlT3JEZWZhdWx0KGdyaWRMaW5lcy5ib3JkZXJEYXNoLCBnbG9iYWxEZWZhdWx0cy5ib3JkZXJEYXNoKTtcblx0XHRcdFx0Ym9yZGVyRGFzaE9mZnNldCA9IGhlbHBlcnMudmFsdWVPckRlZmF1bHQoZ3JpZExpbmVzLmJvcmRlckRhc2hPZmZzZXQsIGdsb2JhbERlZmF1bHRzLmJvcmRlckRhc2hPZmZzZXQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb21tb24gcHJvcGVydGllc1xuXHRcdFx0dmFyIHR4MSwgdHkxLCB0eDIsIHR5MiwgeDEsIHkxLCB4MiwgeTIsIGxhYmVsWCwgbGFiZWxZO1xuXHRcdFx0dmFyIHRleHRBbGlnbiA9ICdtaWRkbGUnO1xuXHRcdFx0dmFyIHRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuXHRcdFx0dmFyIHRpY2tQYWRkaW5nID0gb3B0aW9uVGlja3MucGFkZGluZztcblxuXHRcdFx0aWYgKGlzSG9yaXpvbnRhbCkge1xuXHRcdFx0XHR2YXIgbGFiZWxZT2Zmc2V0ID0gdGwgKyB0aWNrUGFkZGluZztcblxuXHRcdFx0XHRpZiAob3B0aW9ucy5wb3NpdGlvbiA9PT0gJ2JvdHRvbScpIHtcblx0XHRcdFx0XHQvLyBib3R0b21cblx0XHRcdFx0XHR0ZXh0QmFzZWxpbmUgPSAhaXNSb3RhdGVkID8gJ3RvcCcgOiAnbWlkZGxlJztcblx0XHRcdFx0XHR0ZXh0QWxpZ24gPSAhaXNSb3RhdGVkID8gJ2NlbnRlcicgOiAncmlnaHQnO1xuXHRcdFx0XHRcdGxhYmVsWSA9IG1lLnRvcCArIGxhYmVsWU9mZnNldDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHQvLyB0b3Bcblx0XHRcdFx0XHR0ZXh0QmFzZWxpbmUgPSAhaXNSb3RhdGVkID8gJ2JvdHRvbScgOiAnbWlkZGxlJztcblx0XHRcdFx0XHR0ZXh0QWxpZ24gPSAhaXNSb3RhdGVkID8gJ2NlbnRlcicgOiAnbGVmdCc7XG5cdFx0XHRcdFx0bGFiZWxZID0gbWUuYm90dG9tIC0gbGFiZWxZT2Zmc2V0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0dmFyIHhMaW5lVmFsdWUgPSBnZXRMaW5lVmFsdWUobWUsIGluZGV4LCBncmlkTGluZXMub2Zmc2V0R3JpZExpbmVzICYmIHRpY2tzLmxlbmd0aCA+IDEpO1xuXHRcdFx0XHRpZiAoeExpbmVWYWx1ZSA8IG1lLmxlZnQpIHtcblx0XHRcdFx0XHRsaW5lQ29sb3IgPSAncmdiYSgwLDAsMCwwKSc7XG5cdFx0XHRcdH1cblx0XHRcdFx0eExpbmVWYWx1ZSArPSBoZWxwZXJzLmFsaWFzUGl4ZWwobGluZVdpZHRoKTtcblxuXHRcdFx0XHRsYWJlbFggPSBtZS5nZXRQaXhlbEZvclRpY2soaW5kZXgpICsgb3B0aW9uVGlja3MubGFiZWxPZmZzZXQ7IC8vIHggdmFsdWVzIGZvciBvcHRpb25UaWNrcyAobmVlZCB0byBjb25zaWRlciBvZmZzZXRMYWJlbCBvcHRpb24pXG5cblx0XHRcdFx0dHgxID0gdHgyID0geDEgPSB4MiA9IHhMaW5lVmFsdWU7XG5cdFx0XHRcdHR5MSA9IHlUaWNrU3RhcnQ7XG5cdFx0XHRcdHR5MiA9IHlUaWNrRW5kO1xuXHRcdFx0XHR5MSA9IGNoYXJ0QXJlYS50b3A7XG5cdFx0XHRcdHkyID0gY2hhcnRBcmVhLmJvdHRvbSArIGF4aXNXaWR0aDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHZhciBpc0xlZnQgPSBvcHRpb25zLnBvc2l0aW9uID09PSAnbGVmdCc7XG5cdFx0XHRcdHZhciBsYWJlbFhPZmZzZXQ7XG5cblx0XHRcdFx0aWYgKG9wdGlvblRpY2tzLm1pcnJvcikge1xuXHRcdFx0XHRcdHRleHRBbGlnbiA9IGlzTGVmdCA/ICdsZWZ0JyA6ICdyaWdodCc7XG5cdFx0XHRcdFx0bGFiZWxYT2Zmc2V0ID0gdGlja1BhZGRpbmc7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dGV4dEFsaWduID0gaXNMZWZ0ID8gJ3JpZ2h0JyA6ICdsZWZ0Jztcblx0XHRcdFx0XHRsYWJlbFhPZmZzZXQgPSB0bCArIHRpY2tQYWRkaW5nO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0bGFiZWxYID0gaXNMZWZ0ID8gbWUucmlnaHQgLSBsYWJlbFhPZmZzZXQgOiBtZS5sZWZ0ICsgbGFiZWxYT2Zmc2V0O1xuXG5cdFx0XHRcdHZhciB5TGluZVZhbHVlID0gZ2V0TGluZVZhbHVlKG1lLCBpbmRleCwgZ3JpZExpbmVzLm9mZnNldEdyaWRMaW5lcyAmJiB0aWNrcy5sZW5ndGggPiAxKTtcblx0XHRcdFx0aWYgKHlMaW5lVmFsdWUgPCBtZS50b3ApIHtcblx0XHRcdFx0XHRsaW5lQ29sb3IgPSAncmdiYSgwLDAsMCwwKSc7XG5cdFx0XHRcdH1cblx0XHRcdFx0eUxpbmVWYWx1ZSArPSBoZWxwZXJzLmFsaWFzUGl4ZWwobGluZVdpZHRoKTtcblxuXHRcdFx0XHRsYWJlbFkgPSBtZS5nZXRQaXhlbEZvclRpY2soaW5kZXgpICsgb3B0aW9uVGlja3MubGFiZWxPZmZzZXQ7XG5cblx0XHRcdFx0dHgxID0geFRpY2tTdGFydDtcblx0XHRcdFx0dHgyID0geFRpY2tFbmQ7XG5cdFx0XHRcdHgxID0gY2hhcnRBcmVhLmxlZnQ7XG5cdFx0XHRcdHgyID0gY2hhcnRBcmVhLnJpZ2h0ICsgYXhpc1dpZHRoO1xuXHRcdFx0XHR0eTEgPSB0eTIgPSB5MSA9IHkyID0geUxpbmVWYWx1ZTtcblx0XHRcdH1cblxuXHRcdFx0aXRlbXNUb0RyYXcucHVzaCh7XG5cdFx0XHRcdHR4MTogdHgxLFxuXHRcdFx0XHR0eTE6IHR5MSxcblx0XHRcdFx0dHgyOiB0eDIsXG5cdFx0XHRcdHR5MjogdHkyLFxuXHRcdFx0XHR4MTogeDEsXG5cdFx0XHRcdHkxOiB5MSxcblx0XHRcdFx0eDI6IHgyLFxuXHRcdFx0XHR5MjogeTIsXG5cdFx0XHRcdGxhYmVsWDogbGFiZWxYLFxuXHRcdFx0XHRsYWJlbFk6IGxhYmVsWSxcblx0XHRcdFx0Z2xXaWR0aDogbGluZVdpZHRoLFxuXHRcdFx0XHRnbENvbG9yOiBsaW5lQ29sb3IsXG5cdFx0XHRcdGdsQm9yZGVyRGFzaDogYm9yZGVyRGFzaCxcblx0XHRcdFx0Z2xCb3JkZXJEYXNoT2Zmc2V0OiBib3JkZXJEYXNoT2Zmc2V0LFxuXHRcdFx0XHRyb3RhdGlvbjogLTEgKiBsYWJlbFJvdGF0aW9uUmFkaWFucyxcblx0XHRcdFx0bGFiZWw6IGxhYmVsLFxuXHRcdFx0XHRtYWpvcjogdGljay5tYWpvcixcblx0XHRcdFx0dGV4dEJhc2VsaW5lOiB0ZXh0QmFzZWxpbmUsXG5cdFx0XHRcdHRleHRBbGlnbjogdGV4dEFsaWduXG5cdFx0XHR9KTtcblx0XHR9KTtcblxuXHRcdC8vIERyYXcgYWxsIG9mIHRoZSB0aWNrIGxhYmVscywgdGljayBtYXJrcywgYW5kIGdyaWQgbGluZXMgYXQgdGhlIGNvcnJlY3QgcGxhY2VzXG5cdFx0aGVscGVycy5lYWNoKGl0ZW1zVG9EcmF3LCBmdW5jdGlvbihpdGVtVG9EcmF3KSB7XG5cdFx0XHRpZiAoZ3JpZExpbmVzLmRpc3BsYXkpIHtcblx0XHRcdFx0Y29udGV4dC5zYXZlKCk7XG5cdFx0XHRcdGNvbnRleHQubGluZVdpZHRoID0gaXRlbVRvRHJhdy5nbFdpZHRoO1xuXHRcdFx0XHRjb250ZXh0LnN0cm9rZVN0eWxlID0gaXRlbVRvRHJhdy5nbENvbG9yO1xuXHRcdFx0XHRpZiAoY29udGV4dC5zZXRMaW5lRGFzaCkge1xuXHRcdFx0XHRcdGNvbnRleHQuc2V0TGluZURhc2goaXRlbVRvRHJhdy5nbEJvcmRlckRhc2gpO1xuXHRcdFx0XHRcdGNvbnRleHQubGluZURhc2hPZmZzZXQgPSBpdGVtVG9EcmF3LmdsQm9yZGVyRGFzaE9mZnNldDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNvbnRleHQuYmVnaW5QYXRoKCk7XG5cblx0XHRcdFx0aWYgKGdyaWRMaW5lcy5kcmF3VGlja3MpIHtcblx0XHRcdFx0XHRjb250ZXh0Lm1vdmVUbyhpdGVtVG9EcmF3LnR4MSwgaXRlbVRvRHJhdy50eTEpO1xuXHRcdFx0XHRcdGNvbnRleHQubGluZVRvKGl0ZW1Ub0RyYXcudHgyLCBpdGVtVG9EcmF3LnR5Mik7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoZ3JpZExpbmVzLmRyYXdPbkNoYXJ0QXJlYSkge1xuXHRcdFx0XHRcdGNvbnRleHQubW92ZVRvKGl0ZW1Ub0RyYXcueDEsIGl0ZW1Ub0RyYXcueTEpO1xuXHRcdFx0XHRcdGNvbnRleHQubGluZVRvKGl0ZW1Ub0RyYXcueDIsIGl0ZW1Ub0RyYXcueTIpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Y29udGV4dC5zdHJva2UoKTtcblx0XHRcdFx0Y29udGV4dC5yZXN0b3JlKCk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChvcHRpb25UaWNrcy5kaXNwbGF5KSB7XG5cdFx0XHRcdC8vIE1ha2Ugc3VyZSB3ZSBkcmF3IHRleHQgaW4gdGhlIGNvcnJlY3QgY29sb3IgYW5kIGZvbnRcblx0XHRcdFx0Y29udGV4dC5zYXZlKCk7XG5cdFx0XHRcdGNvbnRleHQudHJhbnNsYXRlKGl0ZW1Ub0RyYXcubGFiZWxYLCBpdGVtVG9EcmF3LmxhYmVsWSk7XG5cdFx0XHRcdGNvbnRleHQucm90YXRlKGl0ZW1Ub0RyYXcucm90YXRpb24pO1xuXHRcdFx0XHRjb250ZXh0LmZvbnQgPSBpdGVtVG9EcmF3Lm1ham9yID8gbWFqb3JUaWNrRm9udC5mb250IDogdGlja0ZvbnQuZm9udDtcblx0XHRcdFx0Y29udGV4dC5maWxsU3R5bGUgPSBpdGVtVG9EcmF3Lm1ham9yID8gbWFqb3JUaWNrRm9udENvbG9yIDogdGlja0ZvbnRDb2xvcjtcblx0XHRcdFx0Y29udGV4dC50ZXh0QmFzZWxpbmUgPSBpdGVtVG9EcmF3LnRleHRCYXNlbGluZTtcblx0XHRcdFx0Y29udGV4dC50ZXh0QWxpZ24gPSBpdGVtVG9EcmF3LnRleHRBbGlnbjtcblxuXHRcdFx0XHR2YXIgbGFiZWwgPSBpdGVtVG9EcmF3LmxhYmVsO1xuXHRcdFx0XHRpZiAoaGVscGVycy5pc0FycmF5KGxhYmVsKSkge1xuXHRcdFx0XHRcdHZhciBsaW5lQ291bnQgPSBsYWJlbC5sZW5ndGg7XG5cdFx0XHRcdFx0dmFyIGxpbmVIZWlnaHQgPSB0aWNrRm9udC5zaXplICogMS41O1xuXHRcdFx0XHRcdHZhciB5ID0gbWUuaXNIb3Jpem9udGFsKCkgPyAwIDogLWxpbmVIZWlnaHQgKiAobGluZUNvdW50IC0gMSkgLyAyO1xuXG5cdFx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaW5lQ291bnQ7ICsraSkge1xuXHRcdFx0XHRcdFx0Ly8gV2UganVzdCBtYWtlIHN1cmUgdGhlIG11bHRpbGluZSBlbGVtZW50IGlzIGEgc3RyaW5nIGhlcmUuLlxuXHRcdFx0XHRcdFx0Y29udGV4dC5maWxsVGV4dCgnJyArIGxhYmVsW2ldLCAwLCB5KTtcblx0XHRcdFx0XHRcdC8vIGFwcGx5IHNhbWUgbGluZVNwYWNpbmcgYXMgY2FsY3VsYXRlZCBAIEwjMzIwXG5cdFx0XHRcdFx0XHR5ICs9IGxpbmVIZWlnaHQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGNvbnRleHQuZmlsbFRleHQobGFiZWwsIDAsIDApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRleHQucmVzdG9yZSgpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0aWYgKHNjYWxlTGFiZWwuZGlzcGxheSkge1xuXHRcdFx0Ly8gRHJhdyB0aGUgc2NhbGUgbGFiZWxcblx0XHRcdHZhciBzY2FsZUxhYmVsWDtcblx0XHRcdHZhciBzY2FsZUxhYmVsWTtcblx0XHRcdHZhciByb3RhdGlvbiA9IDA7XG5cdFx0XHR2YXIgaGFsZkxpbmVIZWlnaHQgPSBwYXJzZUxpbmVIZWlnaHQoc2NhbGVMYWJlbCkgLyAyO1xuXG5cdFx0XHRpZiAoaXNIb3Jpem9udGFsKSB7XG5cdFx0XHRcdHNjYWxlTGFiZWxYID0gbWUubGVmdCArICgobWUucmlnaHQgLSBtZS5sZWZ0KSAvIDIpOyAvLyBtaWRwb2ludCBvZiB0aGUgd2lkdGhcblx0XHRcdFx0c2NhbGVMYWJlbFkgPSBvcHRpb25zLnBvc2l0aW9uID09PSAnYm90dG9tJ1xuXHRcdFx0XHRcdD8gbWUuYm90dG9tIC0gaGFsZkxpbmVIZWlnaHQgLSBzY2FsZUxhYmVsUGFkZGluZy5ib3R0b21cblx0XHRcdFx0XHQ6IG1lLnRvcCArIGhhbGZMaW5lSGVpZ2h0ICsgc2NhbGVMYWJlbFBhZGRpbmcudG9wO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFyIGlzTGVmdCA9IG9wdGlvbnMucG9zaXRpb24gPT09ICdsZWZ0Jztcblx0XHRcdFx0c2NhbGVMYWJlbFggPSBpc0xlZnRcblx0XHRcdFx0XHQ/IG1lLmxlZnQgKyBoYWxmTGluZUhlaWdodCArIHNjYWxlTGFiZWxQYWRkaW5nLnRvcFxuXHRcdFx0XHRcdDogbWUucmlnaHQgLSBoYWxmTGluZUhlaWdodCAtIHNjYWxlTGFiZWxQYWRkaW5nLnRvcDtcblx0XHRcdFx0c2NhbGVMYWJlbFkgPSBtZS50b3AgKyAoKG1lLmJvdHRvbSAtIG1lLnRvcCkgLyAyKTtcblx0XHRcdFx0cm90YXRpb24gPSBpc0xlZnQgPyAtMC41ICogTWF0aC5QSSA6IDAuNSAqIE1hdGguUEk7XG5cdFx0XHR9XG5cblx0XHRcdGNvbnRleHQuc2F2ZSgpO1xuXHRcdFx0Y29udGV4dC50cmFuc2xhdGUoc2NhbGVMYWJlbFgsIHNjYWxlTGFiZWxZKTtcblx0XHRcdGNvbnRleHQucm90YXRlKHJvdGF0aW9uKTtcblx0XHRcdGNvbnRleHQudGV4dEFsaWduID0gJ2NlbnRlcic7XG5cdFx0XHRjb250ZXh0LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuXHRcdFx0Y29udGV4dC5maWxsU3R5bGUgPSBzY2FsZUxhYmVsRm9udENvbG9yOyAvLyByZW5kZXIgaW4gY29ycmVjdCBjb2xvdXJcblx0XHRcdGNvbnRleHQuZm9udCA9IHNjYWxlTGFiZWxGb250LmZvbnQ7XG5cdFx0XHRjb250ZXh0LmZpbGxUZXh0KHNjYWxlTGFiZWwubGFiZWxTdHJpbmcsIDAsIDApO1xuXHRcdFx0Y29udGV4dC5yZXN0b3JlKCk7XG5cdFx0fVxuXG5cdFx0aWYgKGdyaWRMaW5lcy5kcmF3Qm9yZGVyKSB7XG5cdFx0XHQvLyBEcmF3IHRoZSBsaW5lIGF0IHRoZSBlZGdlIG9mIHRoZSBheGlzXG5cdFx0XHRjb250ZXh0LmxpbmVXaWR0aCA9IGhlbHBlcnMudmFsdWVBdEluZGV4T3JEZWZhdWx0KGdyaWRMaW5lcy5saW5lV2lkdGgsIDApO1xuXHRcdFx0Y29udGV4dC5zdHJva2VTdHlsZSA9IGhlbHBlcnMudmFsdWVBdEluZGV4T3JEZWZhdWx0KGdyaWRMaW5lcy5jb2xvciwgMCk7XG5cdFx0XHR2YXIgeDEgPSBtZS5sZWZ0O1xuXHRcdFx0dmFyIHgyID0gbWUucmlnaHQgKyBheGlzV2lkdGg7XG5cdFx0XHR2YXIgeTEgPSBtZS50b3A7XG5cdFx0XHR2YXIgeTIgPSBtZS5ib3R0b20gKyBheGlzV2lkdGg7XG5cblx0XHRcdHZhciBhbGlhc1BpeGVsID0gaGVscGVycy5hbGlhc1BpeGVsKGNvbnRleHQubGluZVdpZHRoKTtcblx0XHRcdGlmIChpc0hvcml6b250YWwpIHtcblx0XHRcdFx0eTEgPSB5MiA9IG9wdGlvbnMucG9zaXRpb24gPT09ICd0b3AnID8gbWUuYm90dG9tIDogbWUudG9wO1xuXHRcdFx0XHR5MSArPSBhbGlhc1BpeGVsO1xuXHRcdFx0XHR5MiArPSBhbGlhc1BpeGVsO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0eDEgPSB4MiA9IG9wdGlvbnMucG9zaXRpb24gPT09ICdsZWZ0JyA/IG1lLnJpZ2h0IDogbWUubGVmdDtcblx0XHRcdFx0eDEgKz0gYWxpYXNQaXhlbDtcblx0XHRcdFx0eDIgKz0gYWxpYXNQaXhlbDtcblx0XHRcdH1cblxuXHRcdFx0Y29udGV4dC5iZWdpblBhdGgoKTtcblx0XHRcdGNvbnRleHQubW92ZVRvKHgxLCB5MSk7XG5cdFx0XHRjb250ZXh0LmxpbmVUbyh4MiwgeTIpO1xuXHRcdFx0Y29udGV4dC5zdHJva2UoKTtcblx0XHR9XG5cdH1cbn0pO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2NvcmUuZGVmYXVsdHMnKTtcbnZhciBFbGVtZW50ID0gcmVxdWlyZSgnLi9jb3JlLmVsZW1lbnQnKTtcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi4vaGVscGVycy9pbmRleCcpO1xuXG5kZWZhdWx0cy5fc2V0KCdnbG9iYWwnLCB7XG5cdHRvb2x0aXBzOiB7XG5cdFx0ZW5hYmxlZDogdHJ1ZSxcblx0XHRjdXN0b206IG51bGwsXG5cdFx0bW9kZTogJ25lYXJlc3QnLFxuXHRcdHBvc2l0aW9uOiAnYXZlcmFnZScsXG5cdFx0aW50ZXJzZWN0OiB0cnVlLFxuXHRcdGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwwLDAsMC44KScsXG5cdFx0dGl0bGVGb250U3R5bGU6ICdib2xkJyxcblx0XHR0aXRsZVNwYWNpbmc6IDIsXG5cdFx0dGl0bGVNYXJnaW5Cb3R0b206IDYsXG5cdFx0dGl0bGVGb250Q29sb3I6ICcjZmZmJyxcblx0XHR0aXRsZUFsaWduOiAnbGVmdCcsXG5cdFx0Ym9keVNwYWNpbmc6IDIsXG5cdFx0Ym9keUZvbnRDb2xvcjogJyNmZmYnLFxuXHRcdGJvZHlBbGlnbjogJ2xlZnQnLFxuXHRcdGZvb3RlckZvbnRTdHlsZTogJ2JvbGQnLFxuXHRcdGZvb3RlclNwYWNpbmc6IDIsXG5cdFx0Zm9vdGVyTWFyZ2luVG9wOiA2LFxuXHRcdGZvb3RlckZvbnRDb2xvcjogJyNmZmYnLFxuXHRcdGZvb3RlckFsaWduOiAnbGVmdCcsXG5cdFx0eVBhZGRpbmc6IDYsXG5cdFx0eFBhZGRpbmc6IDYsXG5cdFx0Y2FyZXRQYWRkaW5nOiAyLFxuXHRcdGNhcmV0U2l6ZTogNSxcblx0XHRjb3JuZXJSYWRpdXM6IDYsXG5cdFx0bXVsdGlLZXlCYWNrZ3JvdW5kOiAnI2ZmZicsXG5cdFx0ZGlzcGxheUNvbG9yczogdHJ1ZSxcblx0XHRib3JkZXJDb2xvcjogJ3JnYmEoMCwwLDAsMCknLFxuXHRcdGJvcmRlcldpZHRoOiAwLFxuXHRcdGNhbGxiYWNrczoge1xuXHRcdFx0Ly8gQXJncyBhcmU6ICh0b29sdGlwSXRlbXMsIGRhdGEpXG5cdFx0XHRiZWZvcmVUaXRsZTogaGVscGVycy5ub29wLFxuXHRcdFx0dGl0bGU6IGZ1bmN0aW9uKHRvb2x0aXBJdGVtcywgZGF0YSkge1xuXHRcdFx0XHQvLyBQaWNrIGZpcnN0IHhMYWJlbCBmb3Igbm93XG5cdFx0XHRcdHZhciB0aXRsZSA9ICcnO1xuXHRcdFx0XHR2YXIgbGFiZWxzID0gZGF0YS5sYWJlbHM7XG5cdFx0XHRcdHZhciBsYWJlbENvdW50ID0gbGFiZWxzID8gbGFiZWxzLmxlbmd0aCA6IDA7XG5cblx0XHRcdFx0aWYgKHRvb2x0aXBJdGVtcy5sZW5ndGggPiAwKSB7XG5cdFx0XHRcdFx0dmFyIGl0ZW0gPSB0b29sdGlwSXRlbXNbMF07XG5cblx0XHRcdFx0XHRpZiAoaXRlbS54TGFiZWwpIHtcblx0XHRcdFx0XHRcdHRpdGxlID0gaXRlbS54TGFiZWw7XG5cdFx0XHRcdFx0fSBlbHNlIGlmIChsYWJlbENvdW50ID4gMCAmJiBpdGVtLmluZGV4IDwgbGFiZWxDb3VudCkge1xuXHRcdFx0XHRcdFx0dGl0bGUgPSBsYWJlbHNbaXRlbS5pbmRleF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHRpdGxlO1xuXHRcdFx0fSxcblx0XHRcdGFmdGVyVGl0bGU6IGhlbHBlcnMubm9vcCxcblxuXHRcdFx0Ly8gQXJncyBhcmU6ICh0b29sdGlwSXRlbXMsIGRhdGEpXG5cdFx0XHRiZWZvcmVCb2R5OiBoZWxwZXJzLm5vb3AsXG5cblx0XHRcdC8vIEFyZ3MgYXJlOiAodG9vbHRpcEl0ZW0sIGRhdGEpXG5cdFx0XHRiZWZvcmVMYWJlbDogaGVscGVycy5ub29wLFxuXHRcdFx0bGFiZWw6IGZ1bmN0aW9uKHRvb2x0aXBJdGVtLCBkYXRhKSB7XG5cdFx0XHRcdHZhciBsYWJlbCA9IGRhdGEuZGF0YXNldHNbdG9vbHRpcEl0ZW0uZGF0YXNldEluZGV4XS5sYWJlbCB8fCAnJztcblxuXHRcdFx0XHRpZiAobGFiZWwpIHtcblx0XHRcdFx0XHRsYWJlbCArPSAnOiAnO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGxhYmVsICs9IHRvb2x0aXBJdGVtLnlMYWJlbDtcblx0XHRcdFx0cmV0dXJuIGxhYmVsO1xuXHRcdFx0fSxcblx0XHRcdGxhYmVsQ29sb3I6IGZ1bmN0aW9uKHRvb2x0aXBJdGVtLCBjaGFydCkge1xuXHRcdFx0XHR2YXIgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKHRvb2x0aXBJdGVtLmRhdGFzZXRJbmRleCk7XG5cdFx0XHRcdHZhciBhY3RpdmVFbGVtZW50ID0gbWV0YS5kYXRhW3Rvb2x0aXBJdGVtLmluZGV4XTtcblx0XHRcdFx0dmFyIHZpZXcgPSBhY3RpdmVFbGVtZW50Ll92aWV3O1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdGJvcmRlckNvbG9yOiB2aWV3LmJvcmRlckNvbG9yLFxuXHRcdFx0XHRcdGJhY2tncm91bmRDb2xvcjogdmlldy5iYWNrZ3JvdW5kQ29sb3Jcblx0XHRcdFx0fTtcblx0XHRcdH0sXG5cdFx0XHRsYWJlbFRleHRDb2xvcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0aGlzLl9vcHRpb25zLmJvZHlGb250Q29sb3I7XG5cdFx0XHR9LFxuXHRcdFx0YWZ0ZXJMYWJlbDogaGVscGVycy5ub29wLFxuXG5cdFx0XHQvLyBBcmdzIGFyZTogKHRvb2x0aXBJdGVtcywgZGF0YSlcblx0XHRcdGFmdGVyQm9keTogaGVscGVycy5ub29wLFxuXG5cdFx0XHQvLyBBcmdzIGFyZTogKHRvb2x0aXBJdGVtcywgZGF0YSlcblx0XHRcdGJlZm9yZUZvb3RlcjogaGVscGVycy5ub29wLFxuXHRcdFx0Zm9vdGVyOiBoZWxwZXJzLm5vb3AsXG5cdFx0XHRhZnRlckZvb3RlcjogaGVscGVycy5ub29wXG5cdFx0fVxuXHR9XG59KTtcblxudmFyIHBvc2l0aW9uZXJzID0ge1xuXHQvKipcblx0ICogQXZlcmFnZSBtb2RlIHBsYWNlcyB0aGUgdG9vbHRpcCBhdCB0aGUgYXZlcmFnZSBwb3NpdGlvbiBvZiB0aGUgZWxlbWVudHMgc2hvd25cblx0ICogQGZ1bmN0aW9uIENoYXJ0LlRvb2x0aXAucG9zaXRpb25lcnMuYXZlcmFnZVxuXHQgKiBAcGFyYW0gZWxlbWVudHMge0NoYXJ0RWxlbWVudFtdfSB0aGUgZWxlbWVudHMgYmVpbmcgZGlzcGxheWVkIGluIHRoZSB0b29sdGlwXG5cdCAqIEByZXR1cm5zIHtQb2ludH0gdG9vbHRpcCBwb3NpdGlvblxuXHQgKi9cblx0YXZlcmFnZTogZnVuY3Rpb24oZWxlbWVudHMpIHtcblx0XHRpZiAoIWVsZW1lbnRzLmxlbmd0aCkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHZhciBpLCBsZW47XG5cdFx0dmFyIHggPSAwO1xuXHRcdHZhciB5ID0gMDtcblx0XHR2YXIgY291bnQgPSAwO1xuXG5cdFx0Zm9yIChpID0gMCwgbGVuID0gZWxlbWVudHMubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcblx0XHRcdHZhciBlbCA9IGVsZW1lbnRzW2ldO1xuXHRcdFx0aWYgKGVsICYmIGVsLmhhc1ZhbHVlKCkpIHtcblx0XHRcdFx0dmFyIHBvcyA9IGVsLnRvb2x0aXBQb3NpdGlvbigpO1xuXHRcdFx0XHR4ICs9IHBvcy54O1xuXHRcdFx0XHR5ICs9IHBvcy55O1xuXHRcdFx0XHQrK2NvdW50O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB7XG5cdFx0XHR4OiBNYXRoLnJvdW5kKHggLyBjb3VudCksXG5cdFx0XHR5OiBNYXRoLnJvdW5kKHkgLyBjb3VudClcblx0XHR9O1xuXHR9LFxuXG5cdC8qKlxuXHQgKiBHZXRzIHRoZSB0b29sdGlwIHBvc2l0aW9uIG5lYXJlc3Qgb2YgdGhlIGl0ZW0gbmVhcmVzdCB0byB0aGUgZXZlbnQgcG9zaXRpb25cblx0ICogQGZ1bmN0aW9uIENoYXJ0LlRvb2x0aXAucG9zaXRpb25lcnMubmVhcmVzdFxuXHQgKiBAcGFyYW0gZWxlbWVudHMge0NoYXJ0LkVsZW1lbnRbXX0gdGhlIHRvb2x0aXAgZWxlbWVudHNcblx0ICogQHBhcmFtIGV2ZW50UG9zaXRpb24ge1BvaW50fSB0aGUgcG9zaXRpb24gb2YgdGhlIGV2ZW50IGluIGNhbnZhcyBjb29yZGluYXRlc1xuXHQgKiBAcmV0dXJucyB7UG9pbnR9IHRoZSB0b29sdGlwIHBvc2l0aW9uXG5cdCAqL1xuXHRuZWFyZXN0OiBmdW5jdGlvbihlbGVtZW50cywgZXZlbnRQb3NpdGlvbikge1xuXHRcdHZhciB4ID0gZXZlbnRQb3NpdGlvbi54O1xuXHRcdHZhciB5ID0gZXZlbnRQb3NpdGlvbi55O1xuXHRcdHZhciBtaW5EaXN0YW5jZSA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcblx0XHR2YXIgaSwgbGVuLCBuZWFyZXN0RWxlbWVudDtcblxuXHRcdGZvciAoaSA9IDAsIGxlbiA9IGVsZW1lbnRzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XG5cdFx0XHR2YXIgZWwgPSBlbGVtZW50c1tpXTtcblx0XHRcdGlmIChlbCAmJiBlbC5oYXNWYWx1ZSgpKSB7XG5cdFx0XHRcdHZhciBjZW50ZXIgPSBlbC5nZXRDZW50ZXJQb2ludCgpO1xuXHRcdFx0XHR2YXIgZCA9IGhlbHBlcnMuZGlzdGFuY2VCZXR3ZWVuUG9pbnRzKGV2ZW50UG9zaXRpb24sIGNlbnRlcik7XG5cblx0XHRcdFx0aWYgKGQgPCBtaW5EaXN0YW5jZSkge1xuXHRcdFx0XHRcdG1pbkRpc3RhbmNlID0gZDtcblx0XHRcdFx0XHRuZWFyZXN0RWxlbWVudCA9IGVsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKG5lYXJlc3RFbGVtZW50KSB7XG5cdFx0XHR2YXIgdHAgPSBuZWFyZXN0RWxlbWVudC50b29sdGlwUG9zaXRpb24oKTtcblx0XHRcdHggPSB0cC54O1xuXHRcdFx0eSA9IHRwLnk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHtcblx0XHRcdHg6IHgsXG5cdFx0XHR5OiB5XG5cdFx0fTtcblx0fVxufTtcblxuLyoqXG4gKiBIZWxwZXIgbWV0aG9kIHRvIG1lcmdlIHRoZSBvcGFjaXR5IGludG8gYSBjb2xvclxuICovXG5mdW5jdGlvbiBtZXJnZU9wYWNpdHkoY29sb3JTdHJpbmcsIG9wYWNpdHkpIHtcblx0dmFyIGNvbG9yID0gaGVscGVycy5jb2xvcihjb2xvclN0cmluZyk7XG5cdHJldHVybiBjb2xvci5hbHBoYShvcGFjaXR5ICogY29sb3IuYWxwaGEoKSkucmdiYVN0cmluZygpO1xufVxuXG4vLyBIZWxwZXIgdG8gcHVzaCBvciBjb25jYXQgYmFzZWQgb24gaWYgdGhlIDJuZCBwYXJhbWV0ZXIgaXMgYW4gYXJyYXkgb3Igbm90XG5mdW5jdGlvbiBwdXNoT3JDb25jYXQoYmFzZSwgdG9QdXNoKSB7XG5cdGlmICh0b1B1c2gpIHtcblx0XHRpZiAoaGVscGVycy5pc0FycmF5KHRvUHVzaCkpIHtcblx0XHRcdC8vIGJhc2UgPSBiYXNlLmNvbmNhdCh0b1B1c2gpO1xuXHRcdFx0QXJyYXkucHJvdG90eXBlLnB1c2guYXBwbHkoYmFzZSwgdG9QdXNoKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0YmFzZS5wdXNoKHRvUHVzaCk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGJhc2U7XG59XG5cbi8qKlxuICogUmV0dXJucyBhcnJheSBvZiBzdHJpbmdzIHNwbGl0IGJ5IG5ld2xpbmVcbiAqIEBwYXJhbSB7U3RyaW5nfSB2YWx1ZSAtIFRoZSB2YWx1ZSB0byBzcGxpdCBieSBuZXdsaW5lLlxuICogQHJldHVybnMge0FycmF5fSB2YWx1ZSBpZiBuZXdsaW5lIHByZXNlbnQgLSBSZXR1cm5lZCBmcm9tIFN0cmluZyBzcGxpdCgpIG1ldGhvZFxuICogQGZ1bmN0aW9uXG4gKi9cbmZ1bmN0aW9uIHNwbGl0TmV3bGluZXMoc3RyKSB7XG5cdGlmICgodHlwZW9mIHN0ciA9PT0gJ3N0cmluZycgfHwgc3RyIGluc3RhbmNlb2YgU3RyaW5nKSAmJiBzdHIuaW5kZXhPZignXFxuJykgPiAtMSkge1xuXHRcdHJldHVybiBzdHIuc3BsaXQoJ1xcbicpO1xuXHR9XG5cdHJldHVybiBzdHI7XG59XG5cblxuLy8gUHJpdmF0ZSBoZWxwZXIgdG8gY3JlYXRlIGEgdG9vbHRpcCBpdGVtIG1vZGVsXG4vLyBAcGFyYW0gZWxlbWVudCA6IHRoZSBjaGFydCBlbGVtZW50IChwb2ludCwgYXJjLCBiYXIpIHRvIGNyZWF0ZSB0aGUgdG9vbHRpcCBpdGVtIGZvclxuLy8gQHJldHVybiA6IG5ldyB0b29sdGlwIGl0ZW1cbmZ1bmN0aW9uIGNyZWF0ZVRvb2x0aXBJdGVtKGVsZW1lbnQpIHtcblx0dmFyIHhTY2FsZSA9IGVsZW1lbnQuX3hTY2FsZTtcblx0dmFyIHlTY2FsZSA9IGVsZW1lbnQuX3lTY2FsZSB8fCBlbGVtZW50Ll9zY2FsZTsgLy8gaGFuZGxlIHJhZGFyIHx8IHBvbGFyQXJlYSBjaGFydHNcblx0dmFyIGluZGV4ID0gZWxlbWVudC5faW5kZXg7XG5cdHZhciBkYXRhc2V0SW5kZXggPSBlbGVtZW50Ll9kYXRhc2V0SW5kZXg7XG5cblx0cmV0dXJuIHtcblx0XHR4TGFiZWw6IHhTY2FsZSA/IHhTY2FsZS5nZXRMYWJlbEZvckluZGV4KGluZGV4LCBkYXRhc2V0SW5kZXgpIDogJycsXG5cdFx0eUxhYmVsOiB5U2NhbGUgPyB5U2NhbGUuZ2V0TGFiZWxGb3JJbmRleChpbmRleCwgZGF0YXNldEluZGV4KSA6ICcnLFxuXHRcdGluZGV4OiBpbmRleCxcblx0XHRkYXRhc2V0SW5kZXg6IGRhdGFzZXRJbmRleCxcblx0XHR4OiBlbGVtZW50Ll9tb2RlbC54LFxuXHRcdHk6IGVsZW1lbnQuX21vZGVsLnlcblx0fTtcbn1cblxuLyoqXG4gKiBIZWxwZXIgdG8gZ2V0IHRoZSByZXNldCBtb2RlbCBmb3IgdGhlIHRvb2x0aXBcbiAqIEBwYXJhbSB0b29sdGlwT3B0cyB7T2JqZWN0fSB0aGUgdG9vbHRpcCBvcHRpb25zXG4gKi9cbmZ1bmN0aW9uIGdldEJhc2VNb2RlbCh0b29sdGlwT3B0cykge1xuXHR2YXIgZ2xvYmFsRGVmYXVsdHMgPSBkZWZhdWx0cy5nbG9iYWw7XG5cdHZhciB2YWx1ZU9yRGVmYXVsdCA9IGhlbHBlcnMudmFsdWVPckRlZmF1bHQ7XG5cblx0cmV0dXJuIHtcblx0XHQvLyBQb3NpdGlvbmluZ1xuXHRcdHhQYWRkaW5nOiB0b29sdGlwT3B0cy54UGFkZGluZyxcblx0XHR5UGFkZGluZzogdG9vbHRpcE9wdHMueVBhZGRpbmcsXG5cdFx0eEFsaWduOiB0b29sdGlwT3B0cy54QWxpZ24sXG5cdFx0eUFsaWduOiB0b29sdGlwT3B0cy55QWxpZ24sXG5cblx0XHQvLyBCb2R5XG5cdFx0Ym9keUZvbnRDb2xvcjogdG9vbHRpcE9wdHMuYm9keUZvbnRDb2xvcixcblx0XHRfYm9keUZvbnRGYW1pbHk6IHZhbHVlT3JEZWZhdWx0KHRvb2x0aXBPcHRzLmJvZHlGb250RmFtaWx5LCBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Rm9udEZhbWlseSksXG5cdFx0X2JvZHlGb250U3R5bGU6IHZhbHVlT3JEZWZhdWx0KHRvb2x0aXBPcHRzLmJvZHlGb250U3R5bGUsIGdsb2JhbERlZmF1bHRzLmRlZmF1bHRGb250U3R5bGUpLFxuXHRcdF9ib2R5QWxpZ246IHRvb2x0aXBPcHRzLmJvZHlBbGlnbixcblx0XHRib2R5Rm9udFNpemU6IHZhbHVlT3JEZWZhdWx0KHRvb2x0aXBPcHRzLmJvZHlGb250U2l6ZSwgZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdEZvbnRTaXplKSxcblx0XHRib2R5U3BhY2luZzogdG9vbHRpcE9wdHMuYm9keVNwYWNpbmcsXG5cblx0XHQvLyBUaXRsZVxuXHRcdHRpdGxlRm9udENvbG9yOiB0b29sdGlwT3B0cy50aXRsZUZvbnRDb2xvcixcblx0XHRfdGl0bGVGb250RmFtaWx5OiB2YWx1ZU9yRGVmYXVsdCh0b29sdGlwT3B0cy50aXRsZUZvbnRGYW1pbHksIGdsb2JhbERlZmF1bHRzLmRlZmF1bHRGb250RmFtaWx5KSxcblx0XHRfdGl0bGVGb250U3R5bGU6IHZhbHVlT3JEZWZhdWx0KHRvb2x0aXBPcHRzLnRpdGxlRm9udFN0eWxlLCBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Rm9udFN0eWxlKSxcblx0XHR0aXRsZUZvbnRTaXplOiB2YWx1ZU9yRGVmYXVsdCh0b29sdGlwT3B0cy50aXRsZUZvbnRTaXplLCBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Rm9udFNpemUpLFxuXHRcdF90aXRsZUFsaWduOiB0b29sdGlwT3B0cy50aXRsZUFsaWduLFxuXHRcdHRpdGxlU3BhY2luZzogdG9vbHRpcE9wdHMudGl0bGVTcGFjaW5nLFxuXHRcdHRpdGxlTWFyZ2luQm90dG9tOiB0b29sdGlwT3B0cy50aXRsZU1hcmdpbkJvdHRvbSxcblxuXHRcdC8vIEZvb3RlclxuXHRcdGZvb3RlckZvbnRDb2xvcjogdG9vbHRpcE9wdHMuZm9vdGVyRm9udENvbG9yLFxuXHRcdF9mb290ZXJGb250RmFtaWx5OiB2YWx1ZU9yRGVmYXVsdCh0b29sdGlwT3B0cy5mb290ZXJGb250RmFtaWx5LCBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Rm9udEZhbWlseSksXG5cdFx0X2Zvb3RlckZvbnRTdHlsZTogdmFsdWVPckRlZmF1bHQodG9vbHRpcE9wdHMuZm9vdGVyRm9udFN0eWxlLCBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Rm9udFN0eWxlKSxcblx0XHRmb290ZXJGb250U2l6ZTogdmFsdWVPckRlZmF1bHQodG9vbHRpcE9wdHMuZm9vdGVyRm9udFNpemUsIGdsb2JhbERlZmF1bHRzLmRlZmF1bHRGb250U2l6ZSksXG5cdFx0X2Zvb3RlckFsaWduOiB0b29sdGlwT3B0cy5mb290ZXJBbGlnbixcblx0XHRmb290ZXJTcGFjaW5nOiB0b29sdGlwT3B0cy5mb290ZXJTcGFjaW5nLFxuXHRcdGZvb3Rlck1hcmdpblRvcDogdG9vbHRpcE9wdHMuZm9vdGVyTWFyZ2luVG9wLFxuXG5cdFx0Ly8gQXBwZWFyYW5jZVxuXHRcdGNhcmV0U2l6ZTogdG9vbHRpcE9wdHMuY2FyZXRTaXplLFxuXHRcdGNvcm5lclJhZGl1czogdG9vbHRpcE9wdHMuY29ybmVyUmFkaXVzLFxuXHRcdGJhY2tncm91bmRDb2xvcjogdG9vbHRpcE9wdHMuYmFja2dyb3VuZENvbG9yLFxuXHRcdG9wYWNpdHk6IDAsXG5cdFx0bGVnZW5kQ29sb3JCYWNrZ3JvdW5kOiB0b29sdGlwT3B0cy5tdWx0aUtleUJhY2tncm91bmQsXG5cdFx0ZGlzcGxheUNvbG9yczogdG9vbHRpcE9wdHMuZGlzcGxheUNvbG9ycyxcblx0XHRib3JkZXJDb2xvcjogdG9vbHRpcE9wdHMuYm9yZGVyQ29sb3IsXG5cdFx0Ym9yZGVyV2lkdGg6IHRvb2x0aXBPcHRzLmJvcmRlcldpZHRoXG5cdH07XG59XG5cbi8qKlxuICogR2V0IHRoZSBzaXplIG9mIHRoZSB0b29sdGlwXG4gKi9cbmZ1bmN0aW9uIGdldFRvb2x0aXBTaXplKHRvb2x0aXAsIG1vZGVsKSB7XG5cdHZhciBjdHggPSB0b29sdGlwLl9jaGFydC5jdHg7XG5cblx0dmFyIGhlaWdodCA9IG1vZGVsLnlQYWRkaW5nICogMjsgLy8gVG9vbHRpcCBQYWRkaW5nXG5cdHZhciB3aWR0aCA9IDA7XG5cblx0Ly8gQ291bnQgb2YgYWxsIGxpbmVzIGluIHRoZSBib2R5XG5cdHZhciBib2R5ID0gbW9kZWwuYm9keTtcblx0dmFyIGNvbWJpbmVkQm9keUxlbmd0aCA9IGJvZHkucmVkdWNlKGZ1bmN0aW9uKGNvdW50LCBib2R5SXRlbSkge1xuXHRcdHJldHVybiBjb3VudCArIGJvZHlJdGVtLmJlZm9yZS5sZW5ndGggKyBib2R5SXRlbS5saW5lcy5sZW5ndGggKyBib2R5SXRlbS5hZnRlci5sZW5ndGg7XG5cdH0sIDApO1xuXHRjb21iaW5lZEJvZHlMZW5ndGggKz0gbW9kZWwuYmVmb3JlQm9keS5sZW5ndGggKyBtb2RlbC5hZnRlckJvZHkubGVuZ3RoO1xuXG5cdHZhciB0aXRsZUxpbmVDb3VudCA9IG1vZGVsLnRpdGxlLmxlbmd0aDtcblx0dmFyIGZvb3RlckxpbmVDb3VudCA9IG1vZGVsLmZvb3Rlci5sZW5ndGg7XG5cdHZhciB0aXRsZUZvbnRTaXplID0gbW9kZWwudGl0bGVGb250U2l6ZTtcblx0dmFyIGJvZHlGb250U2l6ZSA9IG1vZGVsLmJvZHlGb250U2l6ZTtcblx0dmFyIGZvb3RlckZvbnRTaXplID0gbW9kZWwuZm9vdGVyRm9udFNpemU7XG5cblx0aGVpZ2h0ICs9IHRpdGxlTGluZUNvdW50ICogdGl0bGVGb250U2l6ZTsgLy8gVGl0bGUgTGluZXNcblx0aGVpZ2h0ICs9IHRpdGxlTGluZUNvdW50ID8gKHRpdGxlTGluZUNvdW50IC0gMSkgKiBtb2RlbC50aXRsZVNwYWNpbmcgOiAwOyAvLyBUaXRsZSBMaW5lIFNwYWNpbmdcblx0aGVpZ2h0ICs9IHRpdGxlTGluZUNvdW50ID8gbW9kZWwudGl0bGVNYXJnaW5Cb3R0b20gOiAwOyAvLyBUaXRsZSdzIGJvdHRvbSBNYXJnaW5cblx0aGVpZ2h0ICs9IGNvbWJpbmVkQm9keUxlbmd0aCAqIGJvZHlGb250U2l6ZTsgLy8gQm9keSBMaW5lc1xuXHRoZWlnaHQgKz0gY29tYmluZWRCb2R5TGVuZ3RoID8gKGNvbWJpbmVkQm9keUxlbmd0aCAtIDEpICogbW9kZWwuYm9keVNwYWNpbmcgOiAwOyAvLyBCb2R5IExpbmUgU3BhY2luZ1xuXHRoZWlnaHQgKz0gZm9vdGVyTGluZUNvdW50ID8gbW9kZWwuZm9vdGVyTWFyZ2luVG9wIDogMDsgLy8gRm9vdGVyIE1hcmdpblxuXHRoZWlnaHQgKz0gZm9vdGVyTGluZUNvdW50ICogKGZvb3RlckZvbnRTaXplKTsgLy8gRm9vdGVyIExpbmVzXG5cdGhlaWdodCArPSBmb290ZXJMaW5lQ291bnQgPyAoZm9vdGVyTGluZUNvdW50IC0gMSkgKiBtb2RlbC5mb290ZXJTcGFjaW5nIDogMDsgLy8gRm9vdGVyIExpbmUgU3BhY2luZ1xuXG5cdC8vIFRpdGxlIHdpZHRoXG5cdHZhciB3aWR0aFBhZGRpbmcgPSAwO1xuXHR2YXIgbWF4TGluZVdpZHRoID0gZnVuY3Rpb24obGluZSkge1xuXHRcdHdpZHRoID0gTWF0aC5tYXgod2lkdGgsIGN0eC5tZWFzdXJlVGV4dChsaW5lKS53aWR0aCArIHdpZHRoUGFkZGluZyk7XG5cdH07XG5cblx0Y3R4LmZvbnQgPSBoZWxwZXJzLmZvbnRTdHJpbmcodGl0bGVGb250U2l6ZSwgbW9kZWwuX3RpdGxlRm9udFN0eWxlLCBtb2RlbC5fdGl0bGVGb250RmFtaWx5KTtcblx0aGVscGVycy5lYWNoKG1vZGVsLnRpdGxlLCBtYXhMaW5lV2lkdGgpO1xuXG5cdC8vIEJvZHkgd2lkdGhcblx0Y3R4LmZvbnQgPSBoZWxwZXJzLmZvbnRTdHJpbmcoYm9keUZvbnRTaXplLCBtb2RlbC5fYm9keUZvbnRTdHlsZSwgbW9kZWwuX2JvZHlGb250RmFtaWx5KTtcblx0aGVscGVycy5lYWNoKG1vZGVsLmJlZm9yZUJvZHkuY29uY2F0KG1vZGVsLmFmdGVyQm9keSksIG1heExpbmVXaWR0aCk7XG5cblx0Ly8gQm9keSBsaW5lcyBtYXkgaW5jbHVkZSBzb21lIGV4dHJhIHdpZHRoIGR1ZSB0byB0aGUgY29sb3IgYm94XG5cdHdpZHRoUGFkZGluZyA9IG1vZGVsLmRpc3BsYXlDb2xvcnMgPyAoYm9keUZvbnRTaXplICsgMikgOiAwO1xuXHRoZWxwZXJzLmVhY2goYm9keSwgZnVuY3Rpb24oYm9keUl0ZW0pIHtcblx0XHRoZWxwZXJzLmVhY2goYm9keUl0ZW0uYmVmb3JlLCBtYXhMaW5lV2lkdGgpO1xuXHRcdGhlbHBlcnMuZWFjaChib2R5SXRlbS5saW5lcywgbWF4TGluZVdpZHRoKTtcblx0XHRoZWxwZXJzLmVhY2goYm9keUl0ZW0uYWZ0ZXIsIG1heExpbmVXaWR0aCk7XG5cdH0pO1xuXG5cdC8vIFJlc2V0IGJhY2sgdG8gMFxuXHR3aWR0aFBhZGRpbmcgPSAwO1xuXG5cdC8vIEZvb3RlciB3aWR0aFxuXHRjdHguZm9udCA9IGhlbHBlcnMuZm9udFN0cmluZyhmb290ZXJGb250U2l6ZSwgbW9kZWwuX2Zvb3RlckZvbnRTdHlsZSwgbW9kZWwuX2Zvb3RlckZvbnRGYW1pbHkpO1xuXHRoZWxwZXJzLmVhY2gobW9kZWwuZm9vdGVyLCBtYXhMaW5lV2lkdGgpO1xuXG5cdC8vIEFkZCBwYWRkaW5nXG5cdHdpZHRoICs9IDIgKiBtb2RlbC54UGFkZGluZztcblxuXHRyZXR1cm4ge1xuXHRcdHdpZHRoOiB3aWR0aCxcblx0XHRoZWlnaHQ6IGhlaWdodFxuXHR9O1xufVxuXG4vKipcbiAqIEhlbHBlciB0byBnZXQgdGhlIGFsaWdubWVudCBvZiBhIHRvb2x0aXAgZ2l2ZW4gdGhlIHNpemVcbiAqL1xuZnVuY3Rpb24gZGV0ZXJtaW5lQWxpZ25tZW50KHRvb2x0aXAsIHNpemUpIHtcblx0dmFyIG1vZGVsID0gdG9vbHRpcC5fbW9kZWw7XG5cdHZhciBjaGFydCA9IHRvb2x0aXAuX2NoYXJ0O1xuXHR2YXIgY2hhcnRBcmVhID0gdG9vbHRpcC5fY2hhcnQuY2hhcnRBcmVhO1xuXHR2YXIgeEFsaWduID0gJ2NlbnRlcic7XG5cdHZhciB5QWxpZ24gPSAnY2VudGVyJztcblxuXHRpZiAobW9kZWwueSA8IHNpemUuaGVpZ2h0KSB7XG5cdFx0eUFsaWduID0gJ3RvcCc7XG5cdH0gZWxzZSBpZiAobW9kZWwueSA+IChjaGFydC5oZWlnaHQgLSBzaXplLmhlaWdodCkpIHtcblx0XHR5QWxpZ24gPSAnYm90dG9tJztcblx0fVxuXG5cdHZhciBsZiwgcmY7IC8vIGZ1bmN0aW9ucyB0byBkZXRlcm1pbmUgbGVmdCwgcmlnaHQgYWxpZ25tZW50XG5cdHZhciBvbGYsIG9yZjsgLy8gZnVuY3Rpb25zIHRvIGRldGVybWluZSBpZiBsZWZ0L3JpZ2h0IGFsaWdubWVudCBjYXVzZXMgdG9vbHRpcCB0byBnbyBvdXRzaWRlIGNoYXJ0XG5cdHZhciB5ZjsgLy8gZnVuY3Rpb24gdG8gZ2V0IHRoZSB5IGFsaWdubWVudCBpZiB0aGUgdG9vbHRpcCBnb2VzIG91dHNpZGUgb2YgdGhlIGxlZnQgb3IgcmlnaHQgZWRnZXNcblx0dmFyIG1pZFggPSAoY2hhcnRBcmVhLmxlZnQgKyBjaGFydEFyZWEucmlnaHQpIC8gMjtcblx0dmFyIG1pZFkgPSAoY2hhcnRBcmVhLnRvcCArIGNoYXJ0QXJlYS5ib3R0b20pIC8gMjtcblxuXHRpZiAoeUFsaWduID09PSAnY2VudGVyJykge1xuXHRcdGxmID0gZnVuY3Rpb24oeCkge1xuXHRcdFx0cmV0dXJuIHggPD0gbWlkWDtcblx0XHR9O1xuXHRcdHJmID0gZnVuY3Rpb24oeCkge1xuXHRcdFx0cmV0dXJuIHggPiBtaWRYO1xuXHRcdH07XG5cdH0gZWxzZSB7XG5cdFx0bGYgPSBmdW5jdGlvbih4KSB7XG5cdFx0XHRyZXR1cm4geCA8PSAoc2l6ZS53aWR0aCAvIDIpO1xuXHRcdH07XG5cdFx0cmYgPSBmdW5jdGlvbih4KSB7XG5cdFx0XHRyZXR1cm4geCA+PSAoY2hhcnQud2lkdGggLSAoc2l6ZS53aWR0aCAvIDIpKTtcblx0XHR9O1xuXHR9XG5cblx0b2xmID0gZnVuY3Rpb24oeCkge1xuXHRcdHJldHVybiB4ICsgc2l6ZS53aWR0aCArIG1vZGVsLmNhcmV0U2l6ZSArIG1vZGVsLmNhcmV0UGFkZGluZyA+IGNoYXJ0LndpZHRoO1xuXHR9O1xuXHRvcmYgPSBmdW5jdGlvbih4KSB7XG5cdFx0cmV0dXJuIHggLSBzaXplLndpZHRoIC0gbW9kZWwuY2FyZXRTaXplIC0gbW9kZWwuY2FyZXRQYWRkaW5nIDwgMDtcblx0fTtcblx0eWYgPSBmdW5jdGlvbih5KSB7XG5cdFx0cmV0dXJuIHkgPD0gbWlkWSA/ICd0b3AnIDogJ2JvdHRvbSc7XG5cdH07XG5cblx0aWYgKGxmKG1vZGVsLngpKSB7XG5cdFx0eEFsaWduID0gJ2xlZnQnO1xuXG5cdFx0Ly8gSXMgdG9vbHRpcCB0b28gd2lkZSBhbmQgZ29lcyBvdmVyIHRoZSByaWdodCBzaWRlIG9mIHRoZSBjaGFydC4/XG5cdFx0aWYgKG9sZihtb2RlbC54KSkge1xuXHRcdFx0eEFsaWduID0gJ2NlbnRlcic7XG5cdFx0XHR5QWxpZ24gPSB5Zihtb2RlbC55KTtcblx0XHR9XG5cdH0gZWxzZSBpZiAocmYobW9kZWwueCkpIHtcblx0XHR4QWxpZ24gPSAncmlnaHQnO1xuXG5cdFx0Ly8gSXMgdG9vbHRpcCB0b28gd2lkZSBhbmQgZ29lcyBvdXRzaWRlIGxlZnQgZWRnZSBvZiBjYW52YXM/XG5cdFx0aWYgKG9yZihtb2RlbC54KSkge1xuXHRcdFx0eEFsaWduID0gJ2NlbnRlcic7XG5cdFx0XHR5QWxpZ24gPSB5Zihtb2RlbC55KTtcblx0XHR9XG5cdH1cblxuXHR2YXIgb3B0cyA9IHRvb2x0aXAuX29wdGlvbnM7XG5cdHJldHVybiB7XG5cdFx0eEFsaWduOiBvcHRzLnhBbGlnbiA/IG9wdHMueEFsaWduIDogeEFsaWduLFxuXHRcdHlBbGlnbjogb3B0cy55QWxpZ24gPyBvcHRzLnlBbGlnbiA6IHlBbGlnblxuXHR9O1xufVxuXG4vKipcbiAqIEhlbHBlciB0byBnZXQgdGhlIGxvY2F0aW9uIGEgdG9vbHRpcCBuZWVkcyB0byBiZSBwbGFjZWQgYXQgZ2l2ZW4gdGhlIGluaXRpYWwgcG9zaXRpb24gKHZpYSB0aGUgdm0pIGFuZCB0aGUgc2l6ZSBhbmQgYWxpZ25tZW50XG4gKi9cbmZ1bmN0aW9uIGdldEJhY2tncm91bmRQb2ludCh2bSwgc2l6ZSwgYWxpZ25tZW50LCBjaGFydCkge1xuXHQvLyBCYWNrZ3JvdW5kIFBvc2l0aW9uXG5cdHZhciB4ID0gdm0ueDtcblx0dmFyIHkgPSB2bS55O1xuXG5cdHZhciBjYXJldFNpemUgPSB2bS5jYXJldFNpemU7XG5cdHZhciBjYXJldFBhZGRpbmcgPSB2bS5jYXJldFBhZGRpbmc7XG5cdHZhciBjb3JuZXJSYWRpdXMgPSB2bS5jb3JuZXJSYWRpdXM7XG5cdHZhciB4QWxpZ24gPSBhbGlnbm1lbnQueEFsaWduO1xuXHR2YXIgeUFsaWduID0gYWxpZ25tZW50LnlBbGlnbjtcblx0dmFyIHBhZGRpbmdBbmRTaXplID0gY2FyZXRTaXplICsgY2FyZXRQYWRkaW5nO1xuXHR2YXIgcmFkaXVzQW5kUGFkZGluZyA9IGNvcm5lclJhZGl1cyArIGNhcmV0UGFkZGluZztcblxuXHRpZiAoeEFsaWduID09PSAncmlnaHQnKSB7XG5cdFx0eCAtPSBzaXplLndpZHRoO1xuXHR9IGVsc2UgaWYgKHhBbGlnbiA9PT0gJ2NlbnRlcicpIHtcblx0XHR4IC09IChzaXplLndpZHRoIC8gMik7XG5cdFx0aWYgKHggKyBzaXplLndpZHRoID4gY2hhcnQud2lkdGgpIHtcblx0XHRcdHggPSBjaGFydC53aWR0aCAtIHNpemUud2lkdGg7XG5cdFx0fVxuXHRcdGlmICh4IDwgMCkge1xuXHRcdFx0eCA9IDA7XG5cdFx0fVxuXHR9XG5cblx0aWYgKHlBbGlnbiA9PT0gJ3RvcCcpIHtcblx0XHR5ICs9IHBhZGRpbmdBbmRTaXplO1xuXHR9IGVsc2UgaWYgKHlBbGlnbiA9PT0gJ2JvdHRvbScpIHtcblx0XHR5IC09IHNpemUuaGVpZ2h0ICsgcGFkZGluZ0FuZFNpemU7XG5cdH0gZWxzZSB7XG5cdFx0eSAtPSAoc2l6ZS5oZWlnaHQgLyAyKTtcblx0fVxuXG5cdGlmICh5QWxpZ24gPT09ICdjZW50ZXInKSB7XG5cdFx0aWYgKHhBbGlnbiA9PT0gJ2xlZnQnKSB7XG5cdFx0XHR4ICs9IHBhZGRpbmdBbmRTaXplO1xuXHRcdH0gZWxzZSBpZiAoeEFsaWduID09PSAncmlnaHQnKSB7XG5cdFx0XHR4IC09IHBhZGRpbmdBbmRTaXplO1xuXHRcdH1cblx0fSBlbHNlIGlmICh4QWxpZ24gPT09ICdsZWZ0Jykge1xuXHRcdHggLT0gcmFkaXVzQW5kUGFkZGluZztcblx0fSBlbHNlIGlmICh4QWxpZ24gPT09ICdyaWdodCcpIHtcblx0XHR4ICs9IHJhZGl1c0FuZFBhZGRpbmc7XG5cdH1cblxuXHRyZXR1cm4ge1xuXHRcdHg6IHgsXG5cdFx0eTogeVxuXHR9O1xufVxuXG4vKipcbiAqIEhlbHBlciB0byBidWlsZCBiZWZvcmUgYW5kIGFmdGVyIGJvZHkgbGluZXNcbiAqL1xuZnVuY3Rpb24gZ2V0QmVmb3JlQWZ0ZXJCb2R5TGluZXMoY2FsbGJhY2spIHtcblx0cmV0dXJuIHB1c2hPckNvbmNhdChbXSwgc3BsaXROZXdsaW5lcyhjYWxsYmFjaykpO1xufVxuXG52YXIgZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gRWxlbWVudC5leHRlbmQoe1xuXHRpbml0aWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHR0aGlzLl9tb2RlbCA9IGdldEJhc2VNb2RlbCh0aGlzLl9vcHRpb25zKTtcblx0XHR0aGlzLl9sYXN0QWN0aXZlID0gW107XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSB0aXRsZVxuXHQvLyBBcmdzIGFyZTogKHRvb2x0aXBJdGVtLCBkYXRhKVxuXHRnZXRUaXRsZTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgb3B0cyA9IG1lLl9vcHRpb25zO1xuXHRcdHZhciBjYWxsYmFja3MgPSBvcHRzLmNhbGxiYWNrcztcblxuXHRcdHZhciBiZWZvcmVUaXRsZSA9IGNhbGxiYWNrcy5iZWZvcmVUaXRsZS5hcHBseShtZSwgYXJndW1lbnRzKTtcblx0XHR2YXIgdGl0bGUgPSBjYWxsYmFja3MudGl0bGUuYXBwbHkobWUsIGFyZ3VtZW50cyk7XG5cdFx0dmFyIGFmdGVyVGl0bGUgPSBjYWxsYmFja3MuYWZ0ZXJUaXRsZS5hcHBseShtZSwgYXJndW1lbnRzKTtcblxuXHRcdHZhciBsaW5lcyA9IFtdO1xuXHRcdGxpbmVzID0gcHVzaE9yQ29uY2F0KGxpbmVzLCBzcGxpdE5ld2xpbmVzKGJlZm9yZVRpdGxlKSk7XG5cdFx0bGluZXMgPSBwdXNoT3JDb25jYXQobGluZXMsIHNwbGl0TmV3bGluZXModGl0bGUpKTtcblx0XHRsaW5lcyA9IHB1c2hPckNvbmNhdChsaW5lcywgc3BsaXROZXdsaW5lcyhhZnRlclRpdGxlKSk7XG5cblx0XHRyZXR1cm4gbGluZXM7XG5cdH0sXG5cblx0Ly8gQXJncyBhcmU6ICh0b29sdGlwSXRlbSwgZGF0YSlcblx0Z2V0QmVmb3JlQm9keTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGdldEJlZm9yZUFmdGVyQm9keUxpbmVzKHRoaXMuX29wdGlvbnMuY2FsbGJhY2tzLmJlZm9yZUJvZHkuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG5cdH0sXG5cblx0Ly8gQXJncyBhcmU6ICh0b29sdGlwSXRlbSwgZGF0YSlcblx0Z2V0Qm9keTogZnVuY3Rpb24odG9vbHRpcEl0ZW1zLCBkYXRhKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgY2FsbGJhY2tzID0gbWUuX29wdGlvbnMuY2FsbGJhY2tzO1xuXHRcdHZhciBib2R5SXRlbXMgPSBbXTtcblxuXHRcdGhlbHBlcnMuZWFjaCh0b29sdGlwSXRlbXMsIGZ1bmN0aW9uKHRvb2x0aXBJdGVtKSB7XG5cdFx0XHR2YXIgYm9keUl0ZW0gPSB7XG5cdFx0XHRcdGJlZm9yZTogW10sXG5cdFx0XHRcdGxpbmVzOiBbXSxcblx0XHRcdFx0YWZ0ZXI6IFtdXG5cdFx0XHR9O1xuXHRcdFx0cHVzaE9yQ29uY2F0KGJvZHlJdGVtLmJlZm9yZSwgc3BsaXROZXdsaW5lcyhjYWxsYmFja3MuYmVmb3JlTGFiZWwuY2FsbChtZSwgdG9vbHRpcEl0ZW0sIGRhdGEpKSk7XG5cdFx0XHRwdXNoT3JDb25jYXQoYm9keUl0ZW0ubGluZXMsIGNhbGxiYWNrcy5sYWJlbC5jYWxsKG1lLCB0b29sdGlwSXRlbSwgZGF0YSkpO1xuXHRcdFx0cHVzaE9yQ29uY2F0KGJvZHlJdGVtLmFmdGVyLCBzcGxpdE5ld2xpbmVzKGNhbGxiYWNrcy5hZnRlckxhYmVsLmNhbGwobWUsIHRvb2x0aXBJdGVtLCBkYXRhKSkpO1xuXG5cdFx0XHRib2R5SXRlbXMucHVzaChib2R5SXRlbSk7XG5cdFx0fSk7XG5cblx0XHRyZXR1cm4gYm9keUl0ZW1zO1xuXHR9LFxuXG5cdC8vIEFyZ3MgYXJlOiAodG9vbHRpcEl0ZW0sIGRhdGEpXG5cdGdldEFmdGVyQm9keTogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIGdldEJlZm9yZUFmdGVyQm9keUxpbmVzKHRoaXMuX29wdGlvbnMuY2FsbGJhY2tzLmFmdGVyQm9keS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcblx0fSxcblxuXHQvLyBHZXQgdGhlIGZvb3RlciBhbmQgYmVmb3JlRm9vdGVyIGFuZCBhZnRlckZvb3RlciBsaW5lc1xuXHQvLyBBcmdzIGFyZTogKHRvb2x0aXBJdGVtLCBkYXRhKVxuXHRnZXRGb290ZXI6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGNhbGxiYWNrcyA9IG1lLl9vcHRpb25zLmNhbGxiYWNrcztcblxuXHRcdHZhciBiZWZvcmVGb290ZXIgPSBjYWxsYmFja3MuYmVmb3JlRm9vdGVyLmFwcGx5KG1lLCBhcmd1bWVudHMpO1xuXHRcdHZhciBmb290ZXIgPSBjYWxsYmFja3MuZm9vdGVyLmFwcGx5KG1lLCBhcmd1bWVudHMpO1xuXHRcdHZhciBhZnRlckZvb3RlciA9IGNhbGxiYWNrcy5hZnRlckZvb3Rlci5hcHBseShtZSwgYXJndW1lbnRzKTtcblxuXHRcdHZhciBsaW5lcyA9IFtdO1xuXHRcdGxpbmVzID0gcHVzaE9yQ29uY2F0KGxpbmVzLCBzcGxpdE5ld2xpbmVzKGJlZm9yZUZvb3RlcikpO1xuXHRcdGxpbmVzID0gcHVzaE9yQ29uY2F0KGxpbmVzLCBzcGxpdE5ld2xpbmVzKGZvb3RlcikpO1xuXHRcdGxpbmVzID0gcHVzaE9yQ29uY2F0KGxpbmVzLCBzcGxpdE5ld2xpbmVzKGFmdGVyRm9vdGVyKSk7XG5cblx0XHRyZXR1cm4gbGluZXM7XG5cdH0sXG5cblx0dXBkYXRlOiBmdW5jdGlvbihjaGFuZ2VkKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgb3B0cyA9IG1lLl9vcHRpb25zO1xuXG5cdFx0Ly8gTmVlZCB0byByZWdlbmVyYXRlIHRoZSBtb2RlbCBiZWNhdXNlIGl0cyBmYXN0ZXIgdGhhbiB1c2luZyBleHRlbmQgYW5kIGl0IGlzIG5lY2Vzc2FyeSBkdWUgdG8gdGhlIG9wdGltaXphdGlvbiBpbiBDaGFydC5FbGVtZW50LnRyYW5zaXRpb25cblx0XHQvLyB0aGF0IGRvZXMgX3ZpZXcgPSBfbW9kZWwgaWYgZWFzZSA9PT0gMS4gVGhpcyBjYXVzZXMgdGhlIDJuZCB0b29sdGlwIHVwZGF0ZSB0byBzZXQgcHJvcGVydGllcyBpbiBib3RoIHRoZSB2aWV3IGFuZCBtb2RlbCBhdCB0aGUgc2FtZSB0aW1lXG5cdFx0Ly8gd2hpY2ggYnJlYWtzIGFueSBhbmltYXRpb25zLlxuXHRcdHZhciBleGlzdGluZ01vZGVsID0gbWUuX21vZGVsO1xuXHRcdHZhciBtb2RlbCA9IG1lLl9tb2RlbCA9IGdldEJhc2VNb2RlbChvcHRzKTtcblx0XHR2YXIgYWN0aXZlID0gbWUuX2FjdGl2ZTtcblxuXHRcdHZhciBkYXRhID0gbWUuX2RhdGE7XG5cblx0XHQvLyBJbiB0aGUgY2FzZSB3aGVyZSBhY3RpdmUubGVuZ3RoID09PSAwIHdlIG5lZWQgdG8ga2VlcCB0aGVzZSBhdCBleGlzdGluZyB2YWx1ZXMgZm9yIGdvb2QgYW5pbWF0aW9uc1xuXHRcdHZhciBhbGlnbm1lbnQgPSB7XG5cdFx0XHR4QWxpZ246IGV4aXN0aW5nTW9kZWwueEFsaWduLFxuXHRcdFx0eUFsaWduOiBleGlzdGluZ01vZGVsLnlBbGlnblxuXHRcdH07XG5cdFx0dmFyIGJhY2tncm91bmRQb2ludCA9IHtcblx0XHRcdHg6IGV4aXN0aW5nTW9kZWwueCxcblx0XHRcdHk6IGV4aXN0aW5nTW9kZWwueVxuXHRcdH07XG5cdFx0dmFyIHRvb2x0aXBTaXplID0ge1xuXHRcdFx0d2lkdGg6IGV4aXN0aW5nTW9kZWwud2lkdGgsXG5cdFx0XHRoZWlnaHQ6IGV4aXN0aW5nTW9kZWwuaGVpZ2h0XG5cdFx0fTtcblx0XHR2YXIgdG9vbHRpcFBvc2l0aW9uID0ge1xuXHRcdFx0eDogZXhpc3RpbmdNb2RlbC5jYXJldFgsXG5cdFx0XHR5OiBleGlzdGluZ01vZGVsLmNhcmV0WVxuXHRcdH07XG5cblx0XHR2YXIgaSwgbGVuO1xuXG5cdFx0aWYgKGFjdGl2ZS5sZW5ndGgpIHtcblx0XHRcdG1vZGVsLm9wYWNpdHkgPSAxO1xuXG5cdFx0XHR2YXIgbGFiZWxDb2xvcnMgPSBbXTtcblx0XHRcdHZhciBsYWJlbFRleHRDb2xvcnMgPSBbXTtcblx0XHRcdHRvb2x0aXBQb3NpdGlvbiA9IHBvc2l0aW9uZXJzW29wdHMucG9zaXRpb25dLmNhbGwobWUsIGFjdGl2ZSwgbWUuX2V2ZW50UG9zaXRpb24pO1xuXG5cdFx0XHR2YXIgdG9vbHRpcEl0ZW1zID0gW107XG5cdFx0XHRmb3IgKGkgPSAwLCBsZW4gPSBhY3RpdmUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcblx0XHRcdFx0dG9vbHRpcEl0ZW1zLnB1c2goY3JlYXRlVG9vbHRpcEl0ZW0oYWN0aXZlW2ldKSk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoZSB1c2VyIHByb3ZpZGVkIGEgZmlsdGVyIGZ1bmN0aW9uLCB1c2UgaXQgdG8gbW9kaWZ5IHRoZSB0b29sdGlwIGl0ZW1zXG5cdFx0XHRpZiAob3B0cy5maWx0ZXIpIHtcblx0XHRcdFx0dG9vbHRpcEl0ZW1zID0gdG9vbHRpcEl0ZW1zLmZpbHRlcihmdW5jdGlvbihhKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wdHMuZmlsdGVyKGEsIGRhdGEpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgdGhlIHVzZXIgcHJvdmlkZWQgYSBzb3J0aW5nIGZ1bmN0aW9uLCB1c2UgaXQgdG8gbW9kaWZ5IHRoZSB0b29sdGlwIGl0ZW1zXG5cdFx0XHRpZiAob3B0cy5pdGVtU29ydCkge1xuXHRcdFx0XHR0b29sdGlwSXRlbXMgPSB0b29sdGlwSXRlbXMuc29ydChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG9wdHMuaXRlbVNvcnQoYSwgYiwgZGF0YSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBEZXRlcm1pbmUgY29sb3JzIGZvciBib3hlc1xuXHRcdFx0aGVscGVycy5lYWNoKHRvb2x0aXBJdGVtcywgZnVuY3Rpb24odG9vbHRpcEl0ZW0pIHtcblx0XHRcdFx0bGFiZWxDb2xvcnMucHVzaChvcHRzLmNhbGxiYWNrcy5sYWJlbENvbG9yLmNhbGwobWUsIHRvb2x0aXBJdGVtLCBtZS5fY2hhcnQpKTtcblx0XHRcdFx0bGFiZWxUZXh0Q29sb3JzLnB1c2gob3B0cy5jYWxsYmFja3MubGFiZWxUZXh0Q29sb3IuY2FsbChtZSwgdG9vbHRpcEl0ZW0sIG1lLl9jaGFydCkpO1xuXHRcdFx0fSk7XG5cblxuXHRcdFx0Ly8gQnVpbGQgdGhlIFRleHQgTGluZXNcblx0XHRcdG1vZGVsLnRpdGxlID0gbWUuZ2V0VGl0bGUodG9vbHRpcEl0ZW1zLCBkYXRhKTtcblx0XHRcdG1vZGVsLmJlZm9yZUJvZHkgPSBtZS5nZXRCZWZvcmVCb2R5KHRvb2x0aXBJdGVtcywgZGF0YSk7XG5cdFx0XHRtb2RlbC5ib2R5ID0gbWUuZ2V0Qm9keSh0b29sdGlwSXRlbXMsIGRhdGEpO1xuXHRcdFx0bW9kZWwuYWZ0ZXJCb2R5ID0gbWUuZ2V0QWZ0ZXJCb2R5KHRvb2x0aXBJdGVtcywgZGF0YSk7XG5cdFx0XHRtb2RlbC5mb290ZXIgPSBtZS5nZXRGb290ZXIodG9vbHRpcEl0ZW1zLCBkYXRhKTtcblxuXHRcdFx0Ly8gSW5pdGlhbCBwb3NpdGlvbmluZyBhbmQgY29sb3JzXG5cdFx0XHRtb2RlbC54ID0gTWF0aC5yb3VuZCh0b29sdGlwUG9zaXRpb24ueCk7XG5cdFx0XHRtb2RlbC55ID0gTWF0aC5yb3VuZCh0b29sdGlwUG9zaXRpb24ueSk7XG5cdFx0XHRtb2RlbC5jYXJldFBhZGRpbmcgPSBvcHRzLmNhcmV0UGFkZGluZztcblx0XHRcdG1vZGVsLmxhYmVsQ29sb3JzID0gbGFiZWxDb2xvcnM7XG5cdFx0XHRtb2RlbC5sYWJlbFRleHRDb2xvcnMgPSBsYWJlbFRleHRDb2xvcnM7XG5cblx0XHRcdC8vIGRhdGEgcG9pbnRzXG5cdFx0XHRtb2RlbC5kYXRhUG9pbnRzID0gdG9vbHRpcEl0ZW1zO1xuXG5cdFx0XHQvLyBXZSBuZWVkIHRvIGRldGVybWluZSBhbGlnbm1lbnQgb2YgdGhlIHRvb2x0aXBcblx0XHRcdHRvb2x0aXBTaXplID0gZ2V0VG9vbHRpcFNpemUodGhpcywgbW9kZWwpO1xuXHRcdFx0YWxpZ25tZW50ID0gZGV0ZXJtaW5lQWxpZ25tZW50KHRoaXMsIHRvb2x0aXBTaXplKTtcblx0XHRcdC8vIEZpbmFsIFNpemUgYW5kIFBvc2l0aW9uXG5cdFx0XHRiYWNrZ3JvdW5kUG9pbnQgPSBnZXRCYWNrZ3JvdW5kUG9pbnQobW9kZWwsIHRvb2x0aXBTaXplLCBhbGlnbm1lbnQsIG1lLl9jaGFydCk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1vZGVsLm9wYWNpdHkgPSAwO1xuXHRcdH1cblxuXHRcdG1vZGVsLnhBbGlnbiA9IGFsaWdubWVudC54QWxpZ247XG5cdFx0bW9kZWwueUFsaWduID0gYWxpZ25tZW50LnlBbGlnbjtcblx0XHRtb2RlbC54ID0gYmFja2dyb3VuZFBvaW50Lng7XG5cdFx0bW9kZWwueSA9IGJhY2tncm91bmRQb2ludC55O1xuXHRcdG1vZGVsLndpZHRoID0gdG9vbHRpcFNpemUud2lkdGg7XG5cdFx0bW9kZWwuaGVpZ2h0ID0gdG9vbHRpcFNpemUuaGVpZ2h0O1xuXG5cdFx0Ly8gUG9pbnQgd2hlcmUgdGhlIGNhcmV0IG9uIHRoZSB0b29sdGlwIHBvaW50cyB0b1xuXHRcdG1vZGVsLmNhcmV0WCA9IHRvb2x0aXBQb3NpdGlvbi54O1xuXHRcdG1vZGVsLmNhcmV0WSA9IHRvb2x0aXBQb3NpdGlvbi55O1xuXG5cdFx0bWUuX21vZGVsID0gbW9kZWw7XG5cblx0XHRpZiAoY2hhbmdlZCAmJiBvcHRzLmN1c3RvbSkge1xuXHRcdFx0b3B0cy5jdXN0b20uY2FsbChtZSwgbW9kZWwpO1xuXHRcdH1cblxuXHRcdHJldHVybiBtZTtcblx0fSxcblxuXHRkcmF3Q2FyZXQ6IGZ1bmN0aW9uKHRvb2x0aXBQb2ludCwgc2l6ZSkge1xuXHRcdHZhciBjdHggPSB0aGlzLl9jaGFydC5jdHg7XG5cdFx0dmFyIHZtID0gdGhpcy5fdmlldztcblx0XHR2YXIgY2FyZXRQb3NpdGlvbiA9IHRoaXMuZ2V0Q2FyZXRQb3NpdGlvbih0b29sdGlwUG9pbnQsIHNpemUsIHZtKTtcblxuXHRcdGN0eC5saW5lVG8oY2FyZXRQb3NpdGlvbi54MSwgY2FyZXRQb3NpdGlvbi55MSk7XG5cdFx0Y3R4LmxpbmVUbyhjYXJldFBvc2l0aW9uLngyLCBjYXJldFBvc2l0aW9uLnkyKTtcblx0XHRjdHgubGluZVRvKGNhcmV0UG9zaXRpb24ueDMsIGNhcmV0UG9zaXRpb24ueTMpO1xuXHR9LFxuXHRnZXRDYXJldFBvc2l0aW9uOiBmdW5jdGlvbih0b29sdGlwUG9pbnQsIHNpemUsIHZtKSB7XG5cdFx0dmFyIHgxLCB4MiwgeDMsIHkxLCB5MiwgeTM7XG5cdFx0dmFyIGNhcmV0U2l6ZSA9IHZtLmNhcmV0U2l6ZTtcblx0XHR2YXIgY29ybmVyUmFkaXVzID0gdm0uY29ybmVyUmFkaXVzO1xuXHRcdHZhciB4QWxpZ24gPSB2bS54QWxpZ247XG5cdFx0dmFyIHlBbGlnbiA9IHZtLnlBbGlnbjtcblx0XHR2YXIgcHRYID0gdG9vbHRpcFBvaW50Lng7XG5cdFx0dmFyIHB0WSA9IHRvb2x0aXBQb2ludC55O1xuXHRcdHZhciB3aWR0aCA9IHNpemUud2lkdGg7XG5cdFx0dmFyIGhlaWdodCA9IHNpemUuaGVpZ2h0O1xuXG5cdFx0aWYgKHlBbGlnbiA9PT0gJ2NlbnRlcicpIHtcblx0XHRcdHkyID0gcHRZICsgKGhlaWdodCAvIDIpO1xuXG5cdFx0XHRpZiAoeEFsaWduID09PSAnbGVmdCcpIHtcblx0XHRcdFx0eDEgPSBwdFg7XG5cdFx0XHRcdHgyID0geDEgLSBjYXJldFNpemU7XG5cdFx0XHRcdHgzID0geDE7XG5cblx0XHRcdFx0eTEgPSB5MiArIGNhcmV0U2l6ZTtcblx0XHRcdFx0eTMgPSB5MiAtIGNhcmV0U2l6ZTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHgxID0gcHRYICsgd2lkdGg7XG5cdFx0XHRcdHgyID0geDEgKyBjYXJldFNpemU7XG5cdFx0XHRcdHgzID0geDE7XG5cblx0XHRcdFx0eTEgPSB5MiAtIGNhcmV0U2l6ZTtcblx0XHRcdFx0eTMgPSB5MiArIGNhcmV0U2l6ZTtcblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0aWYgKHhBbGlnbiA9PT0gJ2xlZnQnKSB7XG5cdFx0XHRcdHgyID0gcHRYICsgY29ybmVyUmFkaXVzICsgKGNhcmV0U2l6ZSk7XG5cdFx0XHRcdHgxID0geDIgLSBjYXJldFNpemU7XG5cdFx0XHRcdHgzID0geDIgKyBjYXJldFNpemU7XG5cdFx0XHR9IGVsc2UgaWYgKHhBbGlnbiA9PT0gJ3JpZ2h0Jykge1xuXHRcdFx0XHR4MiA9IHB0WCArIHdpZHRoIC0gY29ybmVyUmFkaXVzIC0gY2FyZXRTaXplO1xuXHRcdFx0XHR4MSA9IHgyIC0gY2FyZXRTaXplO1xuXHRcdFx0XHR4MyA9IHgyICsgY2FyZXRTaXplO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0eDIgPSB2bS5jYXJldFg7XG5cdFx0XHRcdHgxID0geDIgLSBjYXJldFNpemU7XG5cdFx0XHRcdHgzID0geDIgKyBjYXJldFNpemU7XG5cdFx0XHR9XG5cdFx0XHRpZiAoeUFsaWduID09PSAndG9wJykge1xuXHRcdFx0XHR5MSA9IHB0WTtcblx0XHRcdFx0eTIgPSB5MSAtIGNhcmV0U2l6ZTtcblx0XHRcdFx0eTMgPSB5MTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHkxID0gcHRZICsgaGVpZ2h0O1xuXHRcdFx0XHR5MiA9IHkxICsgY2FyZXRTaXplO1xuXHRcdFx0XHR5MyA9IHkxO1xuXHRcdFx0XHQvLyBpbnZlcnQgZHJhd2luZyBvcmRlclxuXHRcdFx0XHR2YXIgdG1wID0geDM7XG5cdFx0XHRcdHgzID0geDE7XG5cdFx0XHRcdHgxID0gdG1wO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4ge3gxOiB4MSwgeDI6IHgyLCB4MzogeDMsIHkxOiB5MSwgeTI6IHkyLCB5MzogeTN9O1xuXHR9LFxuXG5cdGRyYXdUaXRsZTogZnVuY3Rpb24ocHQsIHZtLCBjdHgsIG9wYWNpdHkpIHtcblx0XHR2YXIgdGl0bGUgPSB2bS50aXRsZTtcblxuXHRcdGlmICh0aXRsZS5sZW5ndGgpIHtcblx0XHRcdGN0eC50ZXh0QWxpZ24gPSB2bS5fdGl0bGVBbGlnbjtcblx0XHRcdGN0eC50ZXh0QmFzZWxpbmUgPSAndG9wJztcblxuXHRcdFx0dmFyIHRpdGxlRm9udFNpemUgPSB2bS50aXRsZUZvbnRTaXplO1xuXHRcdFx0dmFyIHRpdGxlU3BhY2luZyA9IHZtLnRpdGxlU3BhY2luZztcblxuXHRcdFx0Y3R4LmZpbGxTdHlsZSA9IG1lcmdlT3BhY2l0eSh2bS50aXRsZUZvbnRDb2xvciwgb3BhY2l0eSk7XG5cdFx0XHRjdHguZm9udCA9IGhlbHBlcnMuZm9udFN0cmluZyh0aXRsZUZvbnRTaXplLCB2bS5fdGl0bGVGb250U3R5bGUsIHZtLl90aXRsZUZvbnRGYW1pbHkpO1xuXG5cdFx0XHR2YXIgaSwgbGVuO1xuXHRcdFx0Zm9yIChpID0gMCwgbGVuID0gdGl0bGUubGVuZ3RoOyBpIDwgbGVuOyArK2kpIHtcblx0XHRcdFx0Y3R4LmZpbGxUZXh0KHRpdGxlW2ldLCBwdC54LCBwdC55KTtcblx0XHRcdFx0cHQueSArPSB0aXRsZUZvbnRTaXplICsgdGl0bGVTcGFjaW5nOyAvLyBMaW5lIEhlaWdodCBhbmQgc3BhY2luZ1xuXG5cdFx0XHRcdGlmIChpICsgMSA9PT0gdGl0bGUubGVuZ3RoKSB7XG5cdFx0XHRcdFx0cHQueSArPSB2bS50aXRsZU1hcmdpbkJvdHRvbSAtIHRpdGxlU3BhY2luZzsgLy8gSWYgTGFzdCwgYWRkIG1hcmdpbiwgcmVtb3ZlIHNwYWNpbmdcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRkcmF3Qm9keTogZnVuY3Rpb24ocHQsIHZtLCBjdHgsIG9wYWNpdHkpIHtcblx0XHR2YXIgYm9keUZvbnRTaXplID0gdm0uYm9keUZvbnRTaXplO1xuXHRcdHZhciBib2R5U3BhY2luZyA9IHZtLmJvZHlTcGFjaW5nO1xuXHRcdHZhciBib2R5ID0gdm0uYm9keTtcblxuXHRcdGN0eC50ZXh0QWxpZ24gPSB2bS5fYm9keUFsaWduO1xuXHRcdGN0eC50ZXh0QmFzZWxpbmUgPSAndG9wJztcblx0XHRjdHguZm9udCA9IGhlbHBlcnMuZm9udFN0cmluZyhib2R5Rm9udFNpemUsIHZtLl9ib2R5Rm9udFN0eWxlLCB2bS5fYm9keUZvbnRGYW1pbHkpO1xuXG5cdFx0Ly8gQmVmb3JlIEJvZHlcblx0XHR2YXIgeExpbmVQYWRkaW5nID0gMDtcblx0XHR2YXIgZmlsbExpbmVPZlRleHQgPSBmdW5jdGlvbihsaW5lKSB7XG5cdFx0XHRjdHguZmlsbFRleHQobGluZSwgcHQueCArIHhMaW5lUGFkZGluZywgcHQueSk7XG5cdFx0XHRwdC55ICs9IGJvZHlGb250U2l6ZSArIGJvZHlTcGFjaW5nO1xuXHRcdH07XG5cblx0XHQvLyBCZWZvcmUgYm9keSBsaW5lc1xuXHRcdGN0eC5maWxsU3R5bGUgPSBtZXJnZU9wYWNpdHkodm0uYm9keUZvbnRDb2xvciwgb3BhY2l0eSk7XG5cdFx0aGVscGVycy5lYWNoKHZtLmJlZm9yZUJvZHksIGZpbGxMaW5lT2ZUZXh0KTtcblxuXHRcdHZhciBkcmF3Q29sb3JCb3hlcyA9IHZtLmRpc3BsYXlDb2xvcnM7XG5cdFx0eExpbmVQYWRkaW5nID0gZHJhd0NvbG9yQm94ZXMgPyAoYm9keUZvbnRTaXplICsgMikgOiAwO1xuXG5cdFx0Ly8gRHJhdyBib2R5IGxpbmVzIG5vd1xuXHRcdGhlbHBlcnMuZWFjaChib2R5LCBmdW5jdGlvbihib2R5SXRlbSwgaSkge1xuXHRcdFx0dmFyIHRleHRDb2xvciA9IG1lcmdlT3BhY2l0eSh2bS5sYWJlbFRleHRDb2xvcnNbaV0sIG9wYWNpdHkpO1xuXHRcdFx0Y3R4LmZpbGxTdHlsZSA9IHRleHRDb2xvcjtcblx0XHRcdGhlbHBlcnMuZWFjaChib2R5SXRlbS5iZWZvcmUsIGZpbGxMaW5lT2ZUZXh0KTtcblxuXHRcdFx0aGVscGVycy5lYWNoKGJvZHlJdGVtLmxpbmVzLCBmdW5jdGlvbihsaW5lKSB7XG5cdFx0XHRcdC8vIERyYXcgTGVnZW5kLWxpa2UgYm94ZXMgaWYgbmVlZGVkXG5cdFx0XHRcdGlmIChkcmF3Q29sb3JCb3hlcykge1xuXHRcdFx0XHRcdC8vIEZpbGwgYSB3aGl0ZSByZWN0IHNvIHRoYXQgY29sb3VycyBtZXJnZSBuaWNlbHkgaWYgdGhlIG9wYWNpdHkgaXMgPCAxXG5cdFx0XHRcdFx0Y3R4LmZpbGxTdHlsZSA9IG1lcmdlT3BhY2l0eSh2bS5sZWdlbmRDb2xvckJhY2tncm91bmQsIG9wYWNpdHkpO1xuXHRcdFx0XHRcdGN0eC5maWxsUmVjdChwdC54LCBwdC55LCBib2R5Rm9udFNpemUsIGJvZHlGb250U2l6ZSk7XG5cblx0XHRcdFx0XHQvLyBCb3JkZXJcblx0XHRcdFx0XHRjdHgubGluZVdpZHRoID0gMTtcblx0XHRcdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSBtZXJnZU9wYWNpdHkodm0ubGFiZWxDb2xvcnNbaV0uYm9yZGVyQ29sb3IsIG9wYWNpdHkpO1xuXHRcdFx0XHRcdGN0eC5zdHJva2VSZWN0KHB0LngsIHB0LnksIGJvZHlGb250U2l6ZSwgYm9keUZvbnRTaXplKTtcblxuXHRcdFx0XHRcdC8vIElubmVyIHNxdWFyZVxuXHRcdFx0XHRcdGN0eC5maWxsU3R5bGUgPSBtZXJnZU9wYWNpdHkodm0ubGFiZWxDb2xvcnNbaV0uYmFja2dyb3VuZENvbG9yLCBvcGFjaXR5KTtcblx0XHRcdFx0XHRjdHguZmlsbFJlY3QocHQueCArIDEsIHB0LnkgKyAxLCBib2R5Rm9udFNpemUgLSAyLCBib2R5Rm9udFNpemUgLSAyKTtcblx0XHRcdFx0XHRjdHguZmlsbFN0eWxlID0gdGV4dENvbG9yO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZmlsbExpbmVPZlRleHQobGluZSk7XG5cdFx0XHR9KTtcblxuXHRcdFx0aGVscGVycy5lYWNoKGJvZHlJdGVtLmFmdGVyLCBmaWxsTGluZU9mVGV4dCk7XG5cdFx0fSk7XG5cblx0XHQvLyBSZXNldCBiYWNrIHRvIDAgZm9yIGFmdGVyIGJvZHlcblx0XHR4TGluZVBhZGRpbmcgPSAwO1xuXG5cdFx0Ly8gQWZ0ZXIgYm9keSBsaW5lc1xuXHRcdGhlbHBlcnMuZWFjaCh2bS5hZnRlckJvZHksIGZpbGxMaW5lT2ZUZXh0KTtcblx0XHRwdC55IC09IGJvZHlTcGFjaW5nOyAvLyBSZW1vdmUgbGFzdCBib2R5IHNwYWNpbmdcblx0fSxcblxuXHRkcmF3Rm9vdGVyOiBmdW5jdGlvbihwdCwgdm0sIGN0eCwgb3BhY2l0eSkge1xuXHRcdHZhciBmb290ZXIgPSB2bS5mb290ZXI7XG5cblx0XHRpZiAoZm9vdGVyLmxlbmd0aCkge1xuXHRcdFx0cHQueSArPSB2bS5mb290ZXJNYXJnaW5Ub3A7XG5cblx0XHRcdGN0eC50ZXh0QWxpZ24gPSB2bS5fZm9vdGVyQWxpZ247XG5cdFx0XHRjdHgudGV4dEJhc2VsaW5lID0gJ3RvcCc7XG5cblx0XHRcdGN0eC5maWxsU3R5bGUgPSBtZXJnZU9wYWNpdHkodm0uZm9vdGVyRm9udENvbG9yLCBvcGFjaXR5KTtcblx0XHRcdGN0eC5mb250ID0gaGVscGVycy5mb250U3RyaW5nKHZtLmZvb3RlckZvbnRTaXplLCB2bS5fZm9vdGVyRm9udFN0eWxlLCB2bS5fZm9vdGVyRm9udEZhbWlseSk7XG5cblx0XHRcdGhlbHBlcnMuZWFjaChmb290ZXIsIGZ1bmN0aW9uKGxpbmUpIHtcblx0XHRcdFx0Y3R4LmZpbGxUZXh0KGxpbmUsIHB0LngsIHB0LnkpO1xuXHRcdFx0XHRwdC55ICs9IHZtLmZvb3RlckZvbnRTaXplICsgdm0uZm9vdGVyU3BhY2luZztcblx0XHRcdH0pO1xuXHRcdH1cblx0fSxcblxuXHRkcmF3QmFja2dyb3VuZDogZnVuY3Rpb24ocHQsIHZtLCBjdHgsIHRvb2x0aXBTaXplLCBvcGFjaXR5KSB7XG5cdFx0Y3R4LmZpbGxTdHlsZSA9IG1lcmdlT3BhY2l0eSh2bS5iYWNrZ3JvdW5kQ29sb3IsIG9wYWNpdHkpO1xuXHRcdGN0eC5zdHJva2VTdHlsZSA9IG1lcmdlT3BhY2l0eSh2bS5ib3JkZXJDb2xvciwgb3BhY2l0eSk7XG5cdFx0Y3R4LmxpbmVXaWR0aCA9IHZtLmJvcmRlcldpZHRoO1xuXHRcdHZhciB4QWxpZ24gPSB2bS54QWxpZ247XG5cdFx0dmFyIHlBbGlnbiA9IHZtLnlBbGlnbjtcblx0XHR2YXIgeCA9IHB0Lng7XG5cdFx0dmFyIHkgPSBwdC55O1xuXHRcdHZhciB3aWR0aCA9IHRvb2x0aXBTaXplLndpZHRoO1xuXHRcdHZhciBoZWlnaHQgPSB0b29sdGlwU2l6ZS5oZWlnaHQ7XG5cdFx0dmFyIHJhZGl1cyA9IHZtLmNvcm5lclJhZGl1cztcblxuXHRcdGN0eC5iZWdpblBhdGgoKTtcblx0XHRjdHgubW92ZVRvKHggKyByYWRpdXMsIHkpO1xuXHRcdGlmICh5QWxpZ24gPT09ICd0b3AnKSB7XG5cdFx0XHR0aGlzLmRyYXdDYXJldChwdCwgdG9vbHRpcFNpemUpO1xuXHRcdH1cblx0XHRjdHgubGluZVRvKHggKyB3aWR0aCAtIHJhZGl1cywgeSk7XG5cdFx0Y3R4LnF1YWRyYXRpY0N1cnZlVG8oeCArIHdpZHRoLCB5LCB4ICsgd2lkdGgsIHkgKyByYWRpdXMpO1xuXHRcdGlmICh5QWxpZ24gPT09ICdjZW50ZXInICYmIHhBbGlnbiA9PT0gJ3JpZ2h0Jykge1xuXHRcdFx0dGhpcy5kcmF3Q2FyZXQocHQsIHRvb2x0aXBTaXplKTtcblx0XHR9XG5cdFx0Y3R4LmxpbmVUbyh4ICsgd2lkdGgsIHkgKyBoZWlnaHQgLSByYWRpdXMpO1xuXHRcdGN0eC5xdWFkcmF0aWNDdXJ2ZVRvKHggKyB3aWR0aCwgeSArIGhlaWdodCwgeCArIHdpZHRoIC0gcmFkaXVzLCB5ICsgaGVpZ2h0KTtcblx0XHRpZiAoeUFsaWduID09PSAnYm90dG9tJykge1xuXHRcdFx0dGhpcy5kcmF3Q2FyZXQocHQsIHRvb2x0aXBTaXplKTtcblx0XHR9XG5cdFx0Y3R4LmxpbmVUbyh4ICsgcmFkaXVzLCB5ICsgaGVpZ2h0KTtcblx0XHRjdHgucXVhZHJhdGljQ3VydmVUbyh4LCB5ICsgaGVpZ2h0LCB4LCB5ICsgaGVpZ2h0IC0gcmFkaXVzKTtcblx0XHRpZiAoeUFsaWduID09PSAnY2VudGVyJyAmJiB4QWxpZ24gPT09ICdsZWZ0Jykge1xuXHRcdFx0dGhpcy5kcmF3Q2FyZXQocHQsIHRvb2x0aXBTaXplKTtcblx0XHR9XG5cdFx0Y3R4LmxpbmVUbyh4LCB5ICsgcmFkaXVzKTtcblx0XHRjdHgucXVhZHJhdGljQ3VydmVUbyh4LCB5LCB4ICsgcmFkaXVzLCB5KTtcblx0XHRjdHguY2xvc2VQYXRoKCk7XG5cblx0XHRjdHguZmlsbCgpO1xuXG5cdFx0aWYgKHZtLmJvcmRlcldpZHRoID4gMCkge1xuXHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdH1cblx0fSxcblxuXHRkcmF3OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgY3R4ID0gdGhpcy5fY2hhcnQuY3R4O1xuXHRcdHZhciB2bSA9IHRoaXMuX3ZpZXc7XG5cblx0XHRpZiAodm0ub3BhY2l0eSA9PT0gMCkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciB0b29sdGlwU2l6ZSA9IHtcblx0XHRcdHdpZHRoOiB2bS53aWR0aCxcblx0XHRcdGhlaWdodDogdm0uaGVpZ2h0XG5cdFx0fTtcblx0XHR2YXIgcHQgPSB7XG5cdFx0XHR4OiB2bS54LFxuXHRcdFx0eTogdm0ueVxuXHRcdH07XG5cblx0XHQvLyBJRTExL0VkZ2UgZG9lcyBub3QgbGlrZSB2ZXJ5IHNtYWxsIG9wYWNpdGllcywgc28gc25hcCB0byAwXG5cdFx0dmFyIG9wYWNpdHkgPSBNYXRoLmFicyh2bS5vcGFjaXR5IDwgMWUtMykgPyAwIDogdm0ub3BhY2l0eTtcblxuXHRcdC8vIFRydXRoeS9mYWxzZXkgdmFsdWUgZm9yIGVtcHR5IHRvb2x0aXBcblx0XHR2YXIgaGFzVG9vbHRpcENvbnRlbnQgPSB2bS50aXRsZS5sZW5ndGggfHwgdm0uYmVmb3JlQm9keS5sZW5ndGggfHwgdm0uYm9keS5sZW5ndGggfHwgdm0uYWZ0ZXJCb2R5Lmxlbmd0aCB8fCB2bS5mb290ZXIubGVuZ3RoO1xuXG5cdFx0aWYgKHRoaXMuX29wdGlvbnMuZW5hYmxlZCAmJiBoYXNUb29sdGlwQ29udGVudCkge1xuXHRcdFx0Ly8gRHJhdyBCYWNrZ3JvdW5kXG5cdFx0XHR0aGlzLmRyYXdCYWNrZ3JvdW5kKHB0LCB2bSwgY3R4LCB0b29sdGlwU2l6ZSwgb3BhY2l0eSk7XG5cblx0XHRcdC8vIERyYXcgVGl0bGUsIEJvZHksIGFuZCBGb290ZXJcblx0XHRcdHB0LnggKz0gdm0ueFBhZGRpbmc7XG5cdFx0XHRwdC55ICs9IHZtLnlQYWRkaW5nO1xuXG5cdFx0XHQvLyBUaXRsZXNcblx0XHRcdHRoaXMuZHJhd1RpdGxlKHB0LCB2bSwgY3R4LCBvcGFjaXR5KTtcblxuXHRcdFx0Ly8gQm9keVxuXHRcdFx0dGhpcy5kcmF3Qm9keShwdCwgdm0sIGN0eCwgb3BhY2l0eSk7XG5cblx0XHRcdC8vIEZvb3RlclxuXHRcdFx0dGhpcy5kcmF3Rm9vdGVyKHB0LCB2bSwgY3R4LCBvcGFjaXR5KTtcblx0XHR9XG5cdH0sXG5cblx0LyoqXG5cdCAqIEhhbmRsZSBhbiBldmVudFxuXHQgKiBAcHJpdmF0ZVxuXHQgKiBAcGFyYW0ge0lFdmVudH0gZXZlbnQgLSBUaGUgZXZlbnQgdG8gaGFuZGxlXG5cdCAqIEByZXR1cm5zIHtCb29sZWFufSB0cnVlIGlmIHRoZSB0b29sdGlwIGNoYW5nZWRcblx0ICovXG5cdGhhbmRsZUV2ZW50OiBmdW5jdGlvbihlKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgb3B0aW9ucyA9IG1lLl9vcHRpb25zO1xuXHRcdHZhciBjaGFuZ2VkID0gZmFsc2U7XG5cblx0XHRtZS5fbGFzdEFjdGl2ZSA9IG1lLl9sYXN0QWN0aXZlIHx8IFtdO1xuXG5cdFx0Ly8gRmluZCBBY3RpdmUgRWxlbWVudHMgZm9yIHRvb2x0aXBzXG5cdFx0aWYgKGUudHlwZSA9PT0gJ21vdXNlb3V0Jykge1xuXHRcdFx0bWUuX2FjdGl2ZSA9IFtdO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtZS5fYWN0aXZlID0gbWUuX2NoYXJ0LmdldEVsZW1lbnRzQXRFdmVudEZvck1vZGUoZSwgb3B0aW9ucy5tb2RlLCBvcHRpb25zKTtcblx0XHR9XG5cblx0XHQvLyBSZW1lbWJlciBMYXN0IEFjdGl2ZXNcblx0XHRjaGFuZ2VkID0gIWhlbHBlcnMuYXJyYXlFcXVhbHMobWUuX2FjdGl2ZSwgbWUuX2xhc3RBY3RpdmUpO1xuXG5cdFx0Ly8gT25seSBoYW5kbGUgdGFyZ2V0IGV2ZW50IG9uIHRvb2x0aXAgY2hhbmdlXG5cdFx0aWYgKGNoYW5nZWQpIHtcblx0XHRcdG1lLl9sYXN0QWN0aXZlID0gbWUuX2FjdGl2ZTtcblxuXHRcdFx0aWYgKG9wdGlvbnMuZW5hYmxlZCB8fCBvcHRpb25zLmN1c3RvbSkge1xuXHRcdFx0XHRtZS5fZXZlbnRQb3NpdGlvbiA9IHtcblx0XHRcdFx0XHR4OiBlLngsXG5cdFx0XHRcdFx0eTogZS55XG5cdFx0XHRcdH07XG5cblx0XHRcdFx0bWUudXBkYXRlKHRydWUpO1xuXHRcdFx0XHRtZS5waXZvdCgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBjaGFuZ2VkO1xuXHR9XG59KTtcblxuLyoqXG4gKiBAbmFtZXNwYWNlIENoYXJ0LlRvb2x0aXAucG9zaXRpb25lcnNcbiAqL1xuZXhwb3J0cy5wb3NpdGlvbmVycyA9IHBvc2l0aW9uZXJzO1xuXG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBBbmltYXRpb24gPSByZXF1aXJlKCcuL2NvcmUuYW5pbWF0aW9uJyk7XG52YXIgYW5pbWF0aW9ucyA9IHJlcXVpcmUoJy4vY29yZS5hbmltYXRpb25zJyk7XG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuL2NvcmUuZGVmYXVsdHMnKTtcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi4vaGVscGVycy9pbmRleCcpO1xudmFyIEludGVyYWN0aW9uID0gcmVxdWlyZSgnLi9jb3JlLmludGVyYWN0aW9uJyk7XG52YXIgbGF5b3V0cyA9IHJlcXVpcmUoJy4vY29yZS5sYXlvdXRzJyk7XG52YXIgcGxhdGZvcm0gPSByZXF1aXJlKCcuLi9wbGF0Zm9ybXMvcGxhdGZvcm0nKTtcbnZhciBwbHVnaW5zID0gcmVxdWlyZSgnLi9jb3JlLnBsdWdpbnMnKTtcbnZhciBzY2FsZVNlcnZpY2UgPSByZXF1aXJlKCcuLi9jb3JlL2NvcmUuc2NhbGVTZXJ2aWNlJyk7XG52YXIgVG9vbHRpcCA9IHJlcXVpcmUoJy4vY29yZS50b29sdGlwJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQ2hhcnQpIHtcblxuXHQvLyBDcmVhdGUgYSBkaWN0aW9uYXJ5IG9mIGNoYXJ0IHR5cGVzLCB0byBhbGxvdyBmb3IgZXh0ZW5zaW9uIG9mIGV4aXN0aW5nIHR5cGVzXG5cdENoYXJ0LnR5cGVzID0ge307XG5cblx0Ly8gU3RvcmUgYSByZWZlcmVuY2UgdG8gZWFjaCBpbnN0YW5jZSAtIGFsbG93aW5nIHVzIHRvIGdsb2JhbGx5IHJlc2l6ZSBjaGFydCBpbnN0YW5jZXMgb24gd2luZG93IHJlc2l6ZS5cblx0Ly8gRGVzdHJveSBtZXRob2Qgb24gdGhlIGNoYXJ0IHdpbGwgcmVtb3ZlIHRoZSBpbnN0YW5jZSBvZiB0aGUgY2hhcnQgZnJvbSB0aGlzIHJlZmVyZW5jZS5cblx0Q2hhcnQuaW5zdGFuY2VzID0ge307XG5cblx0Ly8gQ29udHJvbGxlcnMgYXZhaWxhYmxlIGZvciBkYXRhc2V0IHZpc3VhbGl6YXRpb24gZWcuIGJhciwgbGluZSwgc2xpY2UsIGV0Yy5cblx0Q2hhcnQuY29udHJvbGxlcnMgPSB7fTtcblxuXHQvKipcblx0ICogSW5pdGlhbGl6ZXMgdGhlIGdpdmVuIGNvbmZpZyB3aXRoIGdsb2JhbCBhbmQgY2hhcnQgZGVmYXVsdCB2YWx1ZXMuXG5cdCAqL1xuXHRmdW5jdGlvbiBpbml0Q29uZmlnKGNvbmZpZykge1xuXHRcdGNvbmZpZyA9IGNvbmZpZyB8fCB7fTtcblxuXHRcdC8vIERvIE5PVCB1c2UgY29uZmlnTWVyZ2UoKSBmb3IgdGhlIGRhdGEgb2JqZWN0IGJlY2F1c2UgdGhpcyBtZXRob2QgbWVyZ2VzIGFycmF5c1xuXHRcdC8vIGFuZCBzbyB3b3VsZCBjaGFuZ2UgcmVmZXJlbmNlcyB0byBsYWJlbHMgYW5kIGRhdGFzZXRzLCBwcmV2ZW50aW5nIGRhdGEgdXBkYXRlcy5cblx0XHR2YXIgZGF0YSA9IGNvbmZpZy5kYXRhID0gY29uZmlnLmRhdGEgfHwge307XG5cdFx0ZGF0YS5kYXRhc2V0cyA9IGRhdGEuZGF0YXNldHMgfHwgW107XG5cdFx0ZGF0YS5sYWJlbHMgPSBkYXRhLmxhYmVscyB8fCBbXTtcblxuXHRcdGNvbmZpZy5vcHRpb25zID0gaGVscGVycy5jb25maWdNZXJnZShcblx0XHRcdGRlZmF1bHRzLmdsb2JhbCxcblx0XHRcdGRlZmF1bHRzW2NvbmZpZy50eXBlXSxcblx0XHRcdGNvbmZpZy5vcHRpb25zIHx8IHt9KTtcblxuXHRcdHJldHVybiBjb25maWc7XG5cdH1cblxuXHQvKipcblx0ICogVXBkYXRlcyB0aGUgY29uZmlnIG9mIHRoZSBjaGFydFxuXHQgKiBAcGFyYW0gY2hhcnQge0NoYXJ0fSBjaGFydCB0byB1cGRhdGUgdGhlIG9wdGlvbnMgZm9yXG5cdCAqL1xuXHRmdW5jdGlvbiB1cGRhdGVDb25maWcoY2hhcnQpIHtcblx0XHR2YXIgbmV3T3B0aW9ucyA9IGNoYXJ0Lm9wdGlvbnM7XG5cblx0XHRoZWxwZXJzLmVhY2goY2hhcnQuc2NhbGVzLCBmdW5jdGlvbihzY2FsZSkge1xuXHRcdFx0bGF5b3V0cy5yZW1vdmVCb3goY2hhcnQsIHNjYWxlKTtcblx0XHR9KTtcblxuXHRcdG5ld09wdGlvbnMgPSBoZWxwZXJzLmNvbmZpZ01lcmdlKFxuXHRcdFx0Q2hhcnQuZGVmYXVsdHMuZ2xvYmFsLFxuXHRcdFx0Q2hhcnQuZGVmYXVsdHNbY2hhcnQuY29uZmlnLnR5cGVdLFxuXHRcdFx0bmV3T3B0aW9ucyk7XG5cblx0XHRjaGFydC5vcHRpb25zID0gY2hhcnQuY29uZmlnLm9wdGlvbnMgPSBuZXdPcHRpb25zO1xuXHRcdGNoYXJ0LmVuc3VyZVNjYWxlc0hhdmVJRHMoKTtcblx0XHRjaGFydC5idWlsZE9yVXBkYXRlU2NhbGVzKCk7XG5cdFx0Ly8gVG9vbHRpcFxuXHRcdGNoYXJ0LnRvb2x0aXAuX29wdGlvbnMgPSBuZXdPcHRpb25zLnRvb2x0aXBzO1xuXHRcdGNoYXJ0LnRvb2x0aXAuaW5pdGlhbGl6ZSgpO1xuXHR9XG5cblx0ZnVuY3Rpb24gcG9zaXRpb25Jc0hvcml6b250YWwocG9zaXRpb24pIHtcblx0XHRyZXR1cm4gcG9zaXRpb24gPT09ICd0b3AnIHx8IHBvc2l0aW9uID09PSAnYm90dG9tJztcblx0fVxuXG5cdGhlbHBlcnMuZXh0ZW5kKENoYXJ0LnByb3RvdHlwZSwgLyoqIEBsZW5kcyBDaGFydCAqLyB7XG5cdFx0LyoqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHRjb25zdHJ1Y3Q6IGZ1bmN0aW9uKGl0ZW0sIGNvbmZpZykge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblxuXHRcdFx0Y29uZmlnID0gaW5pdENvbmZpZyhjb25maWcpO1xuXG5cdFx0XHR2YXIgY29udGV4dCA9IHBsYXRmb3JtLmFjcXVpcmVDb250ZXh0KGl0ZW0sIGNvbmZpZyk7XG5cdFx0XHR2YXIgY2FudmFzID0gY29udGV4dCAmJiBjb250ZXh0LmNhbnZhcztcblx0XHRcdHZhciBoZWlnaHQgPSBjYW52YXMgJiYgY2FudmFzLmhlaWdodDtcblx0XHRcdHZhciB3aWR0aCA9IGNhbnZhcyAmJiBjYW52YXMud2lkdGg7XG5cblx0XHRcdG1lLmlkID0gaGVscGVycy51aWQoKTtcblx0XHRcdG1lLmN0eCA9IGNvbnRleHQ7XG5cdFx0XHRtZS5jYW52YXMgPSBjYW52YXM7XG5cdFx0XHRtZS5jb25maWcgPSBjb25maWc7XG5cdFx0XHRtZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0bWUuaGVpZ2h0ID0gaGVpZ2h0O1xuXHRcdFx0bWUuYXNwZWN0UmF0aW8gPSBoZWlnaHQgPyB3aWR0aCAvIGhlaWdodCA6IG51bGw7XG5cdFx0XHRtZS5vcHRpb25zID0gY29uZmlnLm9wdGlvbnM7XG5cdFx0XHRtZS5fYnVmZmVyZWRSZW5kZXIgPSBmYWxzZTtcblxuXHRcdFx0LyoqXG5cdFx0XHQgKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgQ2hhcnQgYW5kIENoYXJ0LkNvbnRyb2xsZXIgaGF2ZSBiZWVuIG1lcmdlZCxcblx0XHRcdCAqIHRoZSBcImluc3RhbmNlXCIgc3RpbGwgbmVlZCB0byBiZSBkZWZpbmVkIHNpbmNlIGl0IG1pZ2h0IGJlIGNhbGxlZCBmcm9tIHBsdWdpbnMuXG5cdFx0XHQgKiBAcHJvcCBDaGFydCNjaGFydFxuXHRcdFx0ICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjYuMFxuXHRcdFx0ICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuXHRcdFx0ICogQHByaXZhdGVcblx0XHRcdCAqL1xuXHRcdFx0bWUuY2hhcnQgPSBtZTtcblx0XHRcdG1lLmNvbnRyb2xsZXIgPSBtZTsgLy8gY2hhcnQuY2hhcnQuY29udHJvbGxlciAjaW5jZXB0aW9uXG5cblx0XHRcdC8vIEFkZCB0aGUgY2hhcnQgaW5zdGFuY2UgdG8gdGhlIGdsb2JhbCBuYW1lc3BhY2Vcblx0XHRcdENoYXJ0Lmluc3RhbmNlc1ttZS5pZF0gPSBtZTtcblxuXHRcdFx0Ly8gRGVmaW5lIGFsaWFzIHRvIHRoZSBjb25maWcgZGF0YTogYGNoYXJ0LmRhdGEgPT09IGNoYXJ0LmNvbmZpZy5kYXRhYFxuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1lLCAnZGF0YScsIHtcblx0XHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gbWUuY29uZmlnLmRhdGE7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdHNldDogZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdFx0XHRtZS5jb25maWcuZGF0YSA9IHZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0aWYgKCFjb250ZXh0IHx8ICFjYW52YXMpIHtcblx0XHRcdFx0Ly8gVGhlIGdpdmVuIGl0ZW0gaXMgbm90IGEgY29tcGF0aWJsZSBjb250ZXh0MmQgZWxlbWVudCwgbGV0J3MgcmV0dXJuIGJlZm9yZSBmaW5hbGl6aW5nXG5cdFx0XHRcdC8vIHRoZSBjaGFydCBpbml0aWFsaXphdGlvbiBidXQgYWZ0ZXIgc2V0dGluZyBiYXNpYyBjaGFydCAvIGNvbnRyb2xsZXIgcHJvcGVydGllcyB0aGF0XG5cdFx0XHRcdC8vIGNhbiBoZWxwIHRvIGZpZ3VyZSBvdXQgdGhhdCB0aGUgY2hhcnQgaXMgbm90IHZhbGlkIChlLmcgY2hhcnQuY2FudmFzICE9PSBudWxsKTtcblx0XHRcdFx0Ly8gaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzI4MDdcblx0XHRcdFx0Y29uc29sZS5lcnJvcihcIkZhaWxlZCB0byBjcmVhdGUgY2hhcnQ6IGNhbid0IGFjcXVpcmUgY29udGV4dCBmcm9tIHRoZSBnaXZlbiBpdGVtXCIpO1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdG1lLmluaXRpYWxpemUoKTtcblx0XHRcdG1lLnVwZGF0ZSgpO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdGluaXRpYWxpemU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblxuXHRcdFx0Ly8gQmVmb3JlIGluaXQgcGx1Z2luIG5vdGlmaWNhdGlvblxuXHRcdFx0cGx1Z2lucy5ub3RpZnkobWUsICdiZWZvcmVJbml0Jyk7XG5cblx0XHRcdGhlbHBlcnMucmV0aW5hU2NhbGUobWUsIG1lLm9wdGlvbnMuZGV2aWNlUGl4ZWxSYXRpbyk7XG5cblx0XHRcdG1lLmJpbmRFdmVudHMoKTtcblxuXHRcdFx0aWYgKG1lLm9wdGlvbnMucmVzcG9uc2l2ZSkge1xuXHRcdFx0XHQvLyBJbml0aWFsIHJlc2l6ZSBiZWZvcmUgY2hhcnQgZHJhd3MgKG11c3QgYmUgc2lsZW50IHRvIHByZXNlcnZlIGluaXRpYWwgYW5pbWF0aW9ucykuXG5cdFx0XHRcdG1lLnJlc2l6ZSh0cnVlKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHNjYWxlcyBoYXZlIElEcyBhbmQgYXJlIGJ1aWx0IGJlZm9yZSB3ZSBidWlsZCBhbnkgY29udHJvbGxlcnMuXG5cdFx0XHRtZS5lbnN1cmVTY2FsZXNIYXZlSURzKCk7XG5cdFx0XHRtZS5idWlsZE9yVXBkYXRlU2NhbGVzKCk7XG5cdFx0XHRtZS5pbml0VG9vbFRpcCgpO1xuXG5cdFx0XHQvLyBBZnRlciBpbml0IHBsdWdpbiBub3RpZmljYXRpb25cblx0XHRcdHBsdWdpbnMubm90aWZ5KG1lLCAnYWZ0ZXJJbml0Jyk7XG5cblx0XHRcdHJldHVybiBtZTtcblx0XHR9LFxuXG5cdFx0Y2xlYXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aGVscGVycy5jYW52YXMuY2xlYXIodGhpcyk7XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9LFxuXG5cdFx0c3RvcDogZnVuY3Rpb24oKSB7XG5cdFx0XHQvLyBTdG9wcyBhbnkgY3VycmVudCBhbmltYXRpb24gbG9vcCBvY2N1cnJpbmdcblx0XHRcdGFuaW1hdGlvbnMuY2FuY2VsQW5pbWF0aW9uKHRoaXMpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fSxcblxuXHRcdHJlc2l6ZTogZnVuY3Rpb24oc2lsZW50KSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIG9wdGlvbnMgPSBtZS5vcHRpb25zO1xuXHRcdFx0dmFyIGNhbnZhcyA9IG1lLmNhbnZhcztcblx0XHRcdHZhciBhc3BlY3RSYXRpbyA9IChvcHRpb25zLm1haW50YWluQXNwZWN0UmF0aW8gJiYgbWUuYXNwZWN0UmF0aW8pIHx8IG51bGw7XG5cblx0XHRcdC8vIHRoZSBjYW52YXMgcmVuZGVyIHdpZHRoIGFuZCBoZWlnaHQgd2lsbCBiZSBjYXN0ZWQgdG8gaW50ZWdlcnMgc28gbWFrZSBzdXJlIHRoYXRcblx0XHRcdC8vIHRoZSBjYW52YXMgZGlzcGxheSBzdHlsZSB1c2VzIHRoZSBzYW1lIGludGVnZXIgdmFsdWVzIHRvIGF2b2lkIGJsdXJyaW5nIGVmZmVjdC5cblxuXHRcdFx0Ly8gU2V0IHRvIDAgaW5zdGVhZCBvZiBjYW52YXMuc2l6ZSBiZWNhdXNlIHRoZSBzaXplIGRlZmF1bHRzIHRvIDMwMHgxNTAgaWYgdGhlIGVsZW1lbnQgaXMgY29sbGFwc2VkXG5cdFx0XHR2YXIgbmV3V2lkdGggPSBNYXRoLm1heCgwLCBNYXRoLmZsb29yKGhlbHBlcnMuZ2V0TWF4aW11bVdpZHRoKGNhbnZhcykpKTtcblx0XHRcdHZhciBuZXdIZWlnaHQgPSBNYXRoLm1heCgwLCBNYXRoLmZsb29yKGFzcGVjdFJhdGlvID8gbmV3V2lkdGggLyBhc3BlY3RSYXRpbyA6IGhlbHBlcnMuZ2V0TWF4aW11bUhlaWdodChjYW52YXMpKSk7XG5cblx0XHRcdGlmIChtZS53aWR0aCA9PT0gbmV3V2lkdGggJiYgbWUuaGVpZ2h0ID09PSBuZXdIZWlnaHQpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjYW52YXMud2lkdGggPSBtZS53aWR0aCA9IG5ld1dpZHRoO1xuXHRcdFx0Y2FudmFzLmhlaWdodCA9IG1lLmhlaWdodCA9IG5ld0hlaWdodDtcblx0XHRcdGNhbnZhcy5zdHlsZS53aWR0aCA9IG5ld1dpZHRoICsgJ3B4Jztcblx0XHRcdGNhbnZhcy5zdHlsZS5oZWlnaHQgPSBuZXdIZWlnaHQgKyAncHgnO1xuXG5cdFx0XHRoZWxwZXJzLnJldGluYVNjYWxlKG1lLCBvcHRpb25zLmRldmljZVBpeGVsUmF0aW8pO1xuXG5cdFx0XHRpZiAoIXNpbGVudCkge1xuXHRcdFx0XHQvLyBOb3RpZnkgYW55IHBsdWdpbnMgYWJvdXQgdGhlIHJlc2l6ZVxuXHRcdFx0XHR2YXIgbmV3U2l6ZSA9IHt3aWR0aDogbmV3V2lkdGgsIGhlaWdodDogbmV3SGVpZ2h0fTtcblx0XHRcdFx0cGx1Z2lucy5ub3RpZnkobWUsICdyZXNpemUnLCBbbmV3U2l6ZV0pO1xuXG5cdFx0XHRcdC8vIE5vdGlmeSBvZiByZXNpemVcblx0XHRcdFx0aWYgKG1lLm9wdGlvbnMub25SZXNpemUpIHtcblx0XHRcdFx0XHRtZS5vcHRpb25zLm9uUmVzaXplKG1lLCBuZXdTaXplKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdG1lLnN0b3AoKTtcblx0XHRcdFx0bWUudXBkYXRlKHtcblx0XHRcdFx0XHRkdXJhdGlvbjogbWUub3B0aW9ucy5yZXNwb25zaXZlQW5pbWF0aW9uRHVyYXRpb25cblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGVuc3VyZVNjYWxlc0hhdmVJRHM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG9wdGlvbnMgPSB0aGlzLm9wdGlvbnM7XG5cdFx0XHR2YXIgc2NhbGVzT3B0aW9ucyA9IG9wdGlvbnMuc2NhbGVzIHx8IHt9O1xuXHRcdFx0dmFyIHNjYWxlT3B0aW9ucyA9IG9wdGlvbnMuc2NhbGU7XG5cblx0XHRcdGhlbHBlcnMuZWFjaChzY2FsZXNPcHRpb25zLnhBeGVzLCBmdW5jdGlvbih4QXhpc09wdGlvbnMsIGluZGV4KSB7XG5cdFx0XHRcdHhBeGlzT3B0aW9ucy5pZCA9IHhBeGlzT3B0aW9ucy5pZCB8fCAoJ3gtYXhpcy0nICsgaW5kZXgpO1xuXHRcdFx0fSk7XG5cblx0XHRcdGhlbHBlcnMuZWFjaChzY2FsZXNPcHRpb25zLnlBeGVzLCBmdW5jdGlvbih5QXhpc09wdGlvbnMsIGluZGV4KSB7XG5cdFx0XHRcdHlBeGlzT3B0aW9ucy5pZCA9IHlBeGlzT3B0aW9ucy5pZCB8fCAoJ3ktYXhpcy0nICsgaW5kZXgpO1xuXHRcdFx0fSk7XG5cblx0XHRcdGlmIChzY2FsZU9wdGlvbnMpIHtcblx0XHRcdFx0c2NhbGVPcHRpb25zLmlkID0gc2NhbGVPcHRpb25zLmlkIHx8ICdzY2FsZSc7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEJ1aWxkcyBhIG1hcCBvZiBzY2FsZSBJRCB0byBzY2FsZSBvYmplY3QgZm9yIGZ1dHVyZSBsb29rdXAuXG5cdFx0ICovXG5cdFx0YnVpbGRPclVwZGF0ZVNjYWxlczogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIG9wdGlvbnMgPSBtZS5vcHRpb25zO1xuXHRcdFx0dmFyIHNjYWxlcyA9IG1lLnNjYWxlcyB8fCB7fTtcblx0XHRcdHZhciBpdGVtcyA9IFtdO1xuXHRcdFx0dmFyIHVwZGF0ZWQgPSBPYmplY3Qua2V5cyhzY2FsZXMpLnJlZHVjZShmdW5jdGlvbihvYmosIGlkKSB7XG5cdFx0XHRcdG9ialtpZF0gPSBmYWxzZTtcblx0XHRcdFx0cmV0dXJuIG9iajtcblx0XHRcdH0sIHt9KTtcblxuXHRcdFx0aWYgKG9wdGlvbnMuc2NhbGVzKSB7XG5cdFx0XHRcdGl0ZW1zID0gaXRlbXMuY29uY2F0KFxuXHRcdFx0XHRcdChvcHRpb25zLnNjYWxlcy54QXhlcyB8fCBbXSkubWFwKGZ1bmN0aW9uKHhBeGlzT3B0aW9ucykge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHtvcHRpb25zOiB4QXhpc09wdGlvbnMsIGR0eXBlOiAnY2F0ZWdvcnknLCBkcG9zaXRpb246ICdib3R0b20nfTtcblx0XHRcdFx0XHR9KSxcblx0XHRcdFx0XHQob3B0aW9ucy5zY2FsZXMueUF4ZXMgfHwgW10pLm1hcChmdW5jdGlvbih5QXhpc09wdGlvbnMpIHtcblx0XHRcdFx0XHRcdHJldHVybiB7b3B0aW9uczogeUF4aXNPcHRpb25zLCBkdHlwZTogJ2xpbmVhcicsIGRwb3NpdGlvbjogJ2xlZnQnfTtcblx0XHRcdFx0XHR9KVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAob3B0aW9ucy5zY2FsZSkge1xuXHRcdFx0XHRpdGVtcy5wdXNoKHtcblx0XHRcdFx0XHRvcHRpb25zOiBvcHRpb25zLnNjYWxlLFxuXHRcdFx0XHRcdGR0eXBlOiAncmFkaWFsTGluZWFyJyxcblx0XHRcdFx0XHRpc0RlZmF1bHQ6IHRydWUsXG5cdFx0XHRcdFx0ZHBvc2l0aW9uOiAnY2hhcnRBcmVhJ1xuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0aGVscGVycy5lYWNoKGl0ZW1zLCBmdW5jdGlvbihpdGVtKSB7XG5cdFx0XHRcdHZhciBzY2FsZU9wdGlvbnMgPSBpdGVtLm9wdGlvbnM7XG5cdFx0XHRcdHZhciBpZCA9IHNjYWxlT3B0aW9ucy5pZDtcblx0XHRcdFx0dmFyIHNjYWxlVHlwZSA9IGhlbHBlcnMudmFsdWVPckRlZmF1bHQoc2NhbGVPcHRpb25zLnR5cGUsIGl0ZW0uZHR5cGUpO1xuXG5cdFx0XHRcdGlmIChwb3NpdGlvbklzSG9yaXpvbnRhbChzY2FsZU9wdGlvbnMucG9zaXRpb24pICE9PSBwb3NpdGlvbklzSG9yaXpvbnRhbChpdGVtLmRwb3NpdGlvbikpIHtcblx0XHRcdFx0XHRzY2FsZU9wdGlvbnMucG9zaXRpb24gPSBpdGVtLmRwb3NpdGlvbjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHVwZGF0ZWRbaWRdID0gdHJ1ZTtcblx0XHRcdFx0dmFyIHNjYWxlID0gbnVsbDtcblx0XHRcdFx0aWYgKGlkIGluIHNjYWxlcyAmJiBzY2FsZXNbaWRdLnR5cGUgPT09IHNjYWxlVHlwZSkge1xuXHRcdFx0XHRcdHNjYWxlID0gc2NhbGVzW2lkXTtcblx0XHRcdFx0XHRzY2FsZS5vcHRpb25zID0gc2NhbGVPcHRpb25zO1xuXHRcdFx0XHRcdHNjYWxlLmN0eCA9IG1lLmN0eDtcblx0XHRcdFx0XHRzY2FsZS5jaGFydCA9IG1lO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHZhciBzY2FsZUNsYXNzID0gc2NhbGVTZXJ2aWNlLmdldFNjYWxlQ29uc3RydWN0b3Ioc2NhbGVUeXBlKTtcblx0XHRcdFx0XHRpZiAoIXNjYWxlQ2xhc3MpIHtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0c2NhbGUgPSBuZXcgc2NhbGVDbGFzcyh7XG5cdFx0XHRcdFx0XHRpZDogaWQsXG5cdFx0XHRcdFx0XHR0eXBlOiBzY2FsZVR5cGUsXG5cdFx0XHRcdFx0XHRvcHRpb25zOiBzY2FsZU9wdGlvbnMsXG5cdFx0XHRcdFx0XHRjdHg6IG1lLmN0eCxcblx0XHRcdFx0XHRcdGNoYXJ0OiBtZVxuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdHNjYWxlc1tzY2FsZS5pZF0gPSBzY2FsZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHNjYWxlLm1lcmdlVGlja3NPcHRpb25zKCk7XG5cblx0XHRcdFx0Ly8gVE9ETyhTQik6IEkgdGhpbmsgd2Ugc2hvdWxkIGJlIGFibGUgdG8gcmVtb3ZlIHRoaXMgY3VzdG9tIGNhc2UgKG9wdGlvbnMuc2NhbGUpXG5cdFx0XHRcdC8vIGFuZCBjb25zaWRlciBpdCBhcyBhIHJlZ3VsYXIgc2NhbGUgcGFydCBvZiB0aGUgXCJzY2FsZXNcIlwiIG1hcCBvbmx5ISBUaGlzIHdvdWxkXG5cdFx0XHRcdC8vIG1ha2UgdGhlIGxvZ2ljIGVhc2llciBhbmQgcmVtb3ZlIHNvbWUgdXNlbGVzcz8gY3VzdG9tIGNvZGUuXG5cdFx0XHRcdGlmIChpdGVtLmlzRGVmYXVsdCkge1xuXHRcdFx0XHRcdG1lLnNjYWxlID0gc2NhbGU7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXHRcdFx0Ly8gY2xlYXIgdXAgZGlzY2FyZGVkIHNjYWxlc1xuXHRcdFx0aGVscGVycy5lYWNoKHVwZGF0ZWQsIGZ1bmN0aW9uKGhhc1VwZGF0ZWQsIGlkKSB7XG5cdFx0XHRcdGlmICghaGFzVXBkYXRlZCkge1xuXHRcdFx0XHRcdGRlbGV0ZSBzY2FsZXNbaWRdO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0bWUuc2NhbGVzID0gc2NhbGVzO1xuXG5cdFx0XHRzY2FsZVNlcnZpY2UuYWRkU2NhbGVzVG9MYXlvdXQodGhpcyk7XG5cdFx0fSxcblxuXHRcdGJ1aWxkT3JVcGRhdGVDb250cm9sbGVyczogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIHR5cGVzID0gW107XG5cdFx0XHR2YXIgbmV3Q29udHJvbGxlcnMgPSBbXTtcblxuXHRcdFx0aGVscGVycy5lYWNoKG1lLmRhdGEuZGF0YXNldHMsIGZ1bmN0aW9uKGRhdGFzZXQsIGRhdGFzZXRJbmRleCkge1xuXHRcdFx0XHR2YXIgbWV0YSA9IG1lLmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG5cdFx0XHRcdHZhciB0eXBlID0gZGF0YXNldC50eXBlIHx8IG1lLmNvbmZpZy50eXBlO1xuXG5cdFx0XHRcdGlmIChtZXRhLnR5cGUgJiYgbWV0YS50eXBlICE9PSB0eXBlKSB7XG5cdFx0XHRcdFx0bWUuZGVzdHJveURhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG5cdFx0XHRcdFx0bWV0YSA9IG1lLmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG5cdFx0XHRcdH1cblx0XHRcdFx0bWV0YS50eXBlID0gdHlwZTtcblxuXHRcdFx0XHR0eXBlcy5wdXNoKG1ldGEudHlwZSk7XG5cblx0XHRcdFx0aWYgKG1ldGEuY29udHJvbGxlcikge1xuXHRcdFx0XHRcdG1ldGEuY29udHJvbGxlci51cGRhdGVJbmRleChkYXRhc2V0SW5kZXgpO1xuXHRcdFx0XHRcdG1ldGEuY29udHJvbGxlci5saW5rU2NhbGVzKCk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0dmFyIENvbnRyb2xsZXJDbGFzcyA9IENoYXJ0LmNvbnRyb2xsZXJzW21ldGEudHlwZV07XG5cdFx0XHRcdFx0aWYgKENvbnRyb2xsZXJDbGFzcyA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIG1ldGEudHlwZSArICdcIiBpcyBub3QgYSBjaGFydCB0eXBlLicpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdG1ldGEuY29udHJvbGxlciA9IG5ldyBDb250cm9sbGVyQ2xhc3MobWUsIGRhdGFzZXRJbmRleCk7XG5cdFx0XHRcdFx0bmV3Q29udHJvbGxlcnMucHVzaChtZXRhLmNvbnRyb2xsZXIpO1xuXHRcdFx0XHR9XG5cdFx0XHR9LCBtZSk7XG5cblx0XHRcdHJldHVybiBuZXdDb250cm9sbGVycztcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogUmVzZXQgdGhlIGVsZW1lbnRzIG9mIGFsbCBkYXRhc2V0c1xuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0cmVzZXRFbGVtZW50czogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0aGVscGVycy5lYWNoKG1lLmRhdGEuZGF0YXNldHMsIGZ1bmN0aW9uKGRhdGFzZXQsIGRhdGFzZXRJbmRleCkge1xuXHRcdFx0XHRtZS5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpLmNvbnRyb2xsZXIucmVzZXQoKTtcblx0XHRcdH0sIG1lKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0KiBSZXNldHMgdGhlIGNoYXJ0IGJhY2sgdG8gaXQncyBzdGF0ZSBiZWZvcmUgdGhlIGluaXRpYWwgYW5pbWF0aW9uXG5cdFx0Ki9cblx0XHRyZXNldDogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLnJlc2V0RWxlbWVudHMoKTtcblx0XHRcdHRoaXMudG9vbHRpcC5pbml0aWFsaXplKCk7XG5cdFx0fSxcblxuXHRcdHVwZGF0ZTogZnVuY3Rpb24oY29uZmlnKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXG5cdFx0XHRpZiAoIWNvbmZpZyB8fCB0eXBlb2YgY29uZmlnICE9PSAnb2JqZWN0Jykge1xuXHRcdFx0XHQvLyBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuXHRcdFx0XHRjb25maWcgPSB7XG5cdFx0XHRcdFx0ZHVyYXRpb246IGNvbmZpZyxcblx0XHRcdFx0XHRsYXp5OiBhcmd1bWVudHNbMV1cblx0XHRcdFx0fTtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlQ29uZmlnKG1lKTtcblxuXHRcdFx0Ly8gcGx1Z2lucyBvcHRpb25zIHJlZmVyZW5jZXMgbWlnaHQgaGF2ZSBjaGFuZ2UsIGxldCdzIGludmFsaWRhdGUgdGhlIGNhY2hlXG5cdFx0XHQvLyBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9pc3N1ZXMvNTExMSNpc3N1ZWNvbW1lbnQtMzU1OTM0MTY3XG5cdFx0XHRwbHVnaW5zLl9pbnZhbGlkYXRlKG1lKTtcblxuXHRcdFx0aWYgKHBsdWdpbnMubm90aWZ5KG1lLCAnYmVmb3JlVXBkYXRlJykgPT09IGZhbHNlKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSW4gY2FzZSB0aGUgZW50aXJlIGRhdGEgb2JqZWN0IGNoYW5nZWRcblx0XHRcdG1lLnRvb2x0aXAuX2RhdGEgPSBtZS5kYXRhO1xuXG5cdFx0XHQvLyBNYWtlIHN1cmUgZGF0YXNldCBjb250cm9sbGVycyBhcmUgdXBkYXRlZCBhbmQgbmV3IGNvbnRyb2xsZXJzIGFyZSByZXNldFxuXHRcdFx0dmFyIG5ld0NvbnRyb2xsZXJzID0gbWUuYnVpbGRPclVwZGF0ZUNvbnRyb2xsZXJzKCk7XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSBhbGwgZGF0YXNldCBjb250cm9sbGVycyBoYXZlIGNvcnJlY3QgbWV0YSBkYXRhIGNvdW50c1xuXHRcdFx0aGVscGVycy5lYWNoKG1lLmRhdGEuZGF0YXNldHMsIGZ1bmN0aW9uKGRhdGFzZXQsIGRhdGFzZXRJbmRleCkge1xuXHRcdFx0XHRtZS5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpLmNvbnRyb2xsZXIuYnVpbGRPclVwZGF0ZUVsZW1lbnRzKCk7XG5cdFx0XHR9LCBtZSk7XG5cblx0XHRcdG1lLnVwZGF0ZUxheW91dCgpO1xuXG5cdFx0XHQvLyBDYW4gb25seSByZXNldCB0aGUgbmV3IGNvbnRyb2xsZXJzIGFmdGVyIHRoZSBzY2FsZXMgaGF2ZSBiZWVuIHVwZGF0ZWRcblx0XHRcdGlmIChtZS5vcHRpb25zLmFuaW1hdGlvbiAmJiBtZS5vcHRpb25zLmFuaW1hdGlvbi5kdXJhdGlvbikge1xuXHRcdFx0XHRoZWxwZXJzLmVhY2gobmV3Q29udHJvbGxlcnMsIGZ1bmN0aW9uKGNvbnRyb2xsZXIpIHtcblx0XHRcdFx0XHRjb250cm9sbGVyLnJlc2V0KCk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRtZS51cGRhdGVEYXRhc2V0cygpO1xuXG5cdFx0XHQvLyBOZWVkIHRvIHJlc2V0IHRvb2x0aXAgaW4gY2FzZSBpdCBpcyBkaXNwbGF5ZWQgd2l0aCBlbGVtZW50cyB0aGF0IGFyZSByZW1vdmVkXG5cdFx0XHQvLyBhZnRlciB1cGRhdGUuXG5cdFx0XHRtZS50b29sdGlwLmluaXRpYWxpemUoKTtcblxuXHRcdFx0Ly8gTGFzdCBhY3RpdmUgY29udGFpbnMgaXRlbXMgdGhhdCB3ZXJlIHByZXZpb3VzbHkgaW4gdGhlIHRvb2x0aXAuXG5cdFx0XHQvLyBXaGVuIHdlIHJlc2V0IHRoZSB0b29sdGlwLCB3ZSBuZWVkIHRvIGNsZWFyIGl0XG5cdFx0XHRtZS5sYXN0QWN0aXZlID0gW107XG5cblx0XHRcdC8vIERvIHRoaXMgYmVmb3JlIHJlbmRlciBzbyB0aGF0IGFueSBwbHVnaW5zIHRoYXQgbmVlZCBmaW5hbCBzY2FsZSB1cGRhdGVzIGNhbiB1c2UgaXRcblx0XHRcdHBsdWdpbnMubm90aWZ5KG1lLCAnYWZ0ZXJVcGRhdGUnKTtcblxuXHRcdFx0aWYgKG1lLl9idWZmZXJlZFJlbmRlcikge1xuXHRcdFx0XHRtZS5fYnVmZmVyZWRSZXF1ZXN0ID0ge1xuXHRcdFx0XHRcdGR1cmF0aW9uOiBjb25maWcuZHVyYXRpb24sXG5cdFx0XHRcdFx0ZWFzaW5nOiBjb25maWcuZWFzaW5nLFxuXHRcdFx0XHRcdGxhenk6IGNvbmZpZy5sYXp5XG5cdFx0XHRcdH07XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtZS5yZW5kZXIoY29uZmlnKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogVXBkYXRlcyB0aGUgY2hhcnQgbGF5b3V0IHVubGVzcyBhIHBsdWdpbiByZXR1cm5zIGBmYWxzZWAgdG8gdGhlIGBiZWZvcmVMYXlvdXRgXG5cdFx0ICogaG9vaywgaW4gd2hpY2ggY2FzZSwgcGx1Z2lucyB3aWxsIG5vdCBiZSBjYWxsZWQgb24gYGFmdGVyTGF5b3V0YC5cblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdHVwZGF0ZUxheW91dDogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXG5cdFx0XHRpZiAocGx1Z2lucy5ub3RpZnkobWUsICdiZWZvcmVMYXlvdXQnKSA9PT0gZmFsc2UpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRsYXlvdXRzLnVwZGF0ZSh0aGlzLCB0aGlzLndpZHRoLCB0aGlzLmhlaWdodCk7XG5cblx0XHRcdC8qKlxuXHRcdFx0ICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHVzZSBgYWZ0ZXJMYXlvdXRgIGluc3RlYWQuXG5cdFx0XHQgKiBAbWV0aG9kIElQbHVnaW4jYWZ0ZXJTY2FsZVVwZGF0ZVxuXHRcdFx0ICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjUuMFxuXHRcdFx0ICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuXHRcdFx0ICogQHByaXZhdGVcblx0XHRcdCAqL1xuXHRcdFx0cGx1Z2lucy5ub3RpZnkobWUsICdhZnRlclNjYWxlVXBkYXRlJyk7XG5cdFx0XHRwbHVnaW5zLm5vdGlmeShtZSwgJ2FmdGVyTGF5b3V0Jyk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFVwZGF0ZXMgYWxsIGRhdGFzZXRzIHVubGVzcyBhIHBsdWdpbiByZXR1cm5zIGBmYWxzZWAgdG8gdGhlIGBiZWZvcmVEYXRhc2V0c1VwZGF0ZWBcblx0XHQgKiBob29rLCBpbiB3aGljaCBjYXNlLCBwbHVnaW5zIHdpbGwgbm90IGJlIGNhbGxlZCBvbiBgYWZ0ZXJEYXRhc2V0c1VwZGF0ZWAuXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHR1cGRhdGVEYXRhc2V0czogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXG5cdFx0XHRpZiAocGx1Z2lucy5ub3RpZnkobWUsICdiZWZvcmVEYXRhc2V0c1VwZGF0ZScpID09PSBmYWxzZSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGZvciAodmFyIGkgPSAwLCBpbGVuID0gbWUuZGF0YS5kYXRhc2V0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdFx0bWUudXBkYXRlRGF0YXNldChpKTtcblx0XHRcdH1cblxuXHRcdFx0cGx1Z2lucy5ub3RpZnkobWUsICdhZnRlckRhdGFzZXRzVXBkYXRlJyk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFVwZGF0ZXMgZGF0YXNldCBhdCBpbmRleCB1bmxlc3MgYSBwbHVnaW4gcmV0dXJucyBgZmFsc2VgIHRvIHRoZSBgYmVmb3JlRGF0YXNldFVwZGF0ZWBcblx0XHQgKiBob29rLCBpbiB3aGljaCBjYXNlLCBwbHVnaW5zIHdpbGwgbm90IGJlIGNhbGxlZCBvbiBgYWZ0ZXJEYXRhc2V0VXBkYXRlYC5cblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdHVwZGF0ZURhdGFzZXQ6IGZ1bmN0aW9uKGluZGV4KSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIG1ldGEgPSBtZS5nZXREYXRhc2V0TWV0YShpbmRleCk7XG5cdFx0XHR2YXIgYXJncyA9IHtcblx0XHRcdFx0bWV0YTogbWV0YSxcblx0XHRcdFx0aW5kZXg6IGluZGV4XG5cdFx0XHR9O1xuXG5cdFx0XHRpZiAocGx1Z2lucy5ub3RpZnkobWUsICdiZWZvcmVEYXRhc2V0VXBkYXRlJywgW2FyZ3NdKSA9PT0gZmFsc2UpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRtZXRhLmNvbnRyb2xsZXIudXBkYXRlKCk7XG5cblx0XHRcdHBsdWdpbnMubm90aWZ5KG1lLCAnYWZ0ZXJEYXRhc2V0VXBkYXRlJywgW2FyZ3NdKTtcblx0XHR9LFxuXG5cdFx0cmVuZGVyOiBmdW5jdGlvbihjb25maWcpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cblx0XHRcdGlmICghY29uZmlnIHx8IHR5cGVvZiBjb25maWcgIT09ICdvYmplY3QnKSB7XG5cdFx0XHRcdC8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5cdFx0XHRcdGNvbmZpZyA9IHtcblx0XHRcdFx0XHRkdXJhdGlvbjogY29uZmlnLFxuXHRcdFx0XHRcdGxhenk6IGFyZ3VtZW50c1sxXVxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgZHVyYXRpb24gPSBjb25maWcuZHVyYXRpb247XG5cdFx0XHR2YXIgbGF6eSA9IGNvbmZpZy5sYXp5O1xuXG5cdFx0XHRpZiAocGx1Z2lucy5ub3RpZnkobWUsICdiZWZvcmVSZW5kZXInKSA9PT0gZmFsc2UpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR2YXIgYW5pbWF0aW9uT3B0aW9ucyA9IG1lLm9wdGlvbnMuYW5pbWF0aW9uO1xuXHRcdFx0dmFyIG9uQ29tcGxldGUgPSBmdW5jdGlvbihhbmltYXRpb24pIHtcblx0XHRcdFx0cGx1Z2lucy5ub3RpZnkobWUsICdhZnRlclJlbmRlcicpO1xuXHRcdFx0XHRoZWxwZXJzLmNhbGxiYWNrKGFuaW1hdGlvbk9wdGlvbnMgJiYgYW5pbWF0aW9uT3B0aW9ucy5vbkNvbXBsZXRlLCBbYW5pbWF0aW9uXSwgbWUpO1xuXHRcdFx0fTtcblxuXHRcdFx0aWYgKGFuaW1hdGlvbk9wdGlvbnMgJiYgKCh0eXBlb2YgZHVyYXRpb24gIT09ICd1bmRlZmluZWQnICYmIGR1cmF0aW9uICE9PSAwKSB8fCAodHlwZW9mIGR1cmF0aW9uID09PSAndW5kZWZpbmVkJyAmJiBhbmltYXRpb25PcHRpb25zLmR1cmF0aW9uICE9PSAwKSkpIHtcblx0XHRcdFx0dmFyIGFuaW1hdGlvbiA9IG5ldyBBbmltYXRpb24oe1xuXHRcdFx0XHRcdG51bVN0ZXBzOiAoZHVyYXRpb24gfHwgYW5pbWF0aW9uT3B0aW9ucy5kdXJhdGlvbikgLyAxNi42NiwgLy8gNjAgZnBzXG5cdFx0XHRcdFx0ZWFzaW5nOiBjb25maWcuZWFzaW5nIHx8IGFuaW1hdGlvbk9wdGlvbnMuZWFzaW5nLFxuXG5cdFx0XHRcdFx0cmVuZGVyOiBmdW5jdGlvbihjaGFydCwgYW5pbWF0aW9uT2JqZWN0KSB7XG5cdFx0XHRcdFx0XHR2YXIgZWFzaW5nRnVuY3Rpb24gPSBoZWxwZXJzLmVhc2luZy5lZmZlY3RzW2FuaW1hdGlvbk9iamVjdC5lYXNpbmddO1xuXHRcdFx0XHRcdFx0dmFyIGN1cnJlbnRTdGVwID0gYW5pbWF0aW9uT2JqZWN0LmN1cnJlbnRTdGVwO1xuXHRcdFx0XHRcdFx0dmFyIHN0ZXBEZWNpbWFsID0gY3VycmVudFN0ZXAgLyBhbmltYXRpb25PYmplY3QubnVtU3RlcHM7XG5cblx0XHRcdFx0XHRcdGNoYXJ0LmRyYXcoZWFzaW5nRnVuY3Rpb24oc3RlcERlY2ltYWwpLCBzdGVwRGVjaW1hbCwgY3VycmVudFN0ZXApO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRvbkFuaW1hdGlvblByb2dyZXNzOiBhbmltYXRpb25PcHRpb25zLm9uUHJvZ3Jlc3MsXG5cdFx0XHRcdFx0b25BbmltYXRpb25Db21wbGV0ZTogb25Db21wbGV0ZVxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRhbmltYXRpb25zLmFkZEFuaW1hdGlvbihtZSwgYW5pbWF0aW9uLCBkdXJhdGlvbiwgbGF6eSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtZS5kcmF3KCk7XG5cblx0XHRcdFx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy8zNzgxXG5cdFx0XHRcdG9uQ29tcGxldGUobmV3IEFuaW1hdGlvbih7bnVtU3RlcHM6IDAsIGNoYXJ0OiBtZX0pKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1lO1xuXHRcdH0sXG5cblx0XHRkcmF3OiBmdW5jdGlvbihlYXNpbmdWYWx1ZSkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblxuXHRcdFx0bWUuY2xlYXIoKTtcblxuXHRcdFx0aWYgKGhlbHBlcnMuaXNOdWxsT3JVbmRlZihlYXNpbmdWYWx1ZSkpIHtcblx0XHRcdFx0ZWFzaW5nVmFsdWUgPSAxO1xuXHRcdFx0fVxuXG5cdFx0XHRtZS50cmFuc2l0aW9uKGVhc2luZ1ZhbHVlKTtcblxuXHRcdFx0aWYgKG1lLndpZHRoIDw9IDAgfHwgbWUuaGVpZ2h0IDw9IDApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAocGx1Z2lucy5ub3RpZnkobWUsICdiZWZvcmVEcmF3JywgW2Vhc2luZ1ZhbHVlXSkgPT09IGZhbHNlKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRHJhdyBhbGwgdGhlIHNjYWxlc1xuXHRcdFx0aGVscGVycy5lYWNoKG1lLmJveGVzLCBmdW5jdGlvbihib3gpIHtcblx0XHRcdFx0Ym94LmRyYXcobWUuY2hhcnRBcmVhKTtcblx0XHRcdH0sIG1lKTtcblxuXHRcdFx0aWYgKG1lLnNjYWxlKSB7XG5cdFx0XHRcdG1lLnNjYWxlLmRyYXcoKTtcblx0XHRcdH1cblxuXHRcdFx0bWUuZHJhd0RhdGFzZXRzKGVhc2luZ1ZhbHVlKTtcblx0XHRcdG1lLl9kcmF3VG9vbHRpcChlYXNpbmdWYWx1ZSk7XG5cblx0XHRcdHBsdWdpbnMubm90aWZ5KG1lLCAnYWZ0ZXJEcmF3JywgW2Vhc2luZ1ZhbHVlXSk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0dHJhbnNpdGlvbjogZnVuY3Rpb24oZWFzaW5nVmFsdWUpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cblx0XHRcdGZvciAodmFyIGkgPSAwLCBpbGVuID0gKG1lLmRhdGEuZGF0YXNldHMgfHwgW10pLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0XHRpZiAobWUuaXNEYXRhc2V0VmlzaWJsZShpKSkge1xuXHRcdFx0XHRcdG1lLmdldERhdGFzZXRNZXRhKGkpLmNvbnRyb2xsZXIudHJhbnNpdGlvbihlYXNpbmdWYWx1ZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0bWUudG9vbHRpcC50cmFuc2l0aW9uKGVhc2luZ1ZhbHVlKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogRHJhd3MgYWxsIGRhdGFzZXRzIHVubGVzcyBhIHBsdWdpbiByZXR1cm5zIGBmYWxzZWAgdG8gdGhlIGBiZWZvcmVEYXRhc2V0c0RyYXdgXG5cdFx0ICogaG9vaywgaW4gd2hpY2ggY2FzZSwgcGx1Z2lucyB3aWxsIG5vdCBiZSBjYWxsZWQgb24gYGFmdGVyRGF0YXNldHNEcmF3YC5cblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdGRyYXdEYXRhc2V0czogZnVuY3Rpb24oZWFzaW5nVmFsdWUpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cblx0XHRcdGlmIChwbHVnaW5zLm5vdGlmeShtZSwgJ2JlZm9yZURhdGFzZXRzRHJhdycsIFtlYXNpbmdWYWx1ZV0pID09PSBmYWxzZSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIERyYXcgZGF0YXNldHMgcmV2ZXJzZWQgdG8gc3VwcG9ydCBwcm9wZXIgbGluZSBzdGFja2luZ1xuXHRcdFx0Zm9yICh2YXIgaSA9IChtZS5kYXRhLmRhdGFzZXRzIHx8IFtdKS5sZW5ndGggLSAxOyBpID49IDA7IC0taSkge1xuXHRcdFx0XHRpZiAobWUuaXNEYXRhc2V0VmlzaWJsZShpKSkge1xuXHRcdFx0XHRcdG1lLmRyYXdEYXRhc2V0KGksIGVhc2luZ1ZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRwbHVnaW5zLm5vdGlmeShtZSwgJ2FmdGVyRGF0YXNldHNEcmF3JywgW2Vhc2luZ1ZhbHVlXSk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIERyYXdzIGRhdGFzZXQgYXQgaW5kZXggdW5sZXNzIGEgcGx1Z2luIHJldHVybnMgYGZhbHNlYCB0byB0aGUgYGJlZm9yZURhdGFzZXREcmF3YFxuXHRcdCAqIGhvb2ssIGluIHdoaWNoIGNhc2UsIHBsdWdpbnMgd2lsbCBub3QgYmUgY2FsbGVkIG9uIGBhZnRlckRhdGFzZXREcmF3YC5cblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdGRyYXdEYXRhc2V0OiBmdW5jdGlvbihpbmRleCwgZWFzaW5nVmFsdWUpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgbWV0YSA9IG1lLmdldERhdGFzZXRNZXRhKGluZGV4KTtcblx0XHRcdHZhciBhcmdzID0ge1xuXHRcdFx0XHRtZXRhOiBtZXRhLFxuXHRcdFx0XHRpbmRleDogaW5kZXgsXG5cdFx0XHRcdGVhc2luZ1ZhbHVlOiBlYXNpbmdWYWx1ZVxuXHRcdFx0fTtcblxuXHRcdFx0aWYgKHBsdWdpbnMubm90aWZ5KG1lLCAnYmVmb3JlRGF0YXNldERyYXcnLCBbYXJnc10pID09PSBmYWxzZSkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdG1ldGEuY29udHJvbGxlci5kcmF3KGVhc2luZ1ZhbHVlKTtcblxuXHRcdFx0cGx1Z2lucy5ub3RpZnkobWUsICdhZnRlckRhdGFzZXREcmF3JywgW2FyZ3NdKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogRHJhd3MgdG9vbHRpcCB1bmxlc3MgYSBwbHVnaW4gcmV0dXJucyBgZmFsc2VgIHRvIHRoZSBgYmVmb3JlVG9vbHRpcERyYXdgXG5cdFx0ICogaG9vaywgaW4gd2hpY2ggY2FzZSwgcGx1Z2lucyB3aWxsIG5vdCBiZSBjYWxsZWQgb24gYGFmdGVyVG9vbHRpcERyYXdgLlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0X2RyYXdUb29sdGlwOiBmdW5jdGlvbihlYXNpbmdWYWx1ZSkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciB0b29sdGlwID0gbWUudG9vbHRpcDtcblx0XHRcdHZhciBhcmdzID0ge1xuXHRcdFx0XHR0b29sdGlwOiB0b29sdGlwLFxuXHRcdFx0XHRlYXNpbmdWYWx1ZTogZWFzaW5nVmFsdWVcblx0XHRcdH07XG5cblx0XHRcdGlmIChwbHVnaW5zLm5vdGlmeShtZSwgJ2JlZm9yZVRvb2x0aXBEcmF3JywgW2FyZ3NdKSA9PT0gZmFsc2UpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHR0b29sdGlwLmRyYXcoKTtcblxuXHRcdFx0cGx1Z2lucy5ub3RpZnkobWUsICdhZnRlclRvb2x0aXBEcmF3JywgW2FyZ3NdKTtcblx0XHR9LFxuXG5cdFx0Ly8gR2V0IHRoZSBzaW5nbGUgZWxlbWVudCB0aGF0IHdhcyBjbGlja2VkIG9uXG5cdFx0Ly8gQHJldHVybiA6IEFuIG9iamVjdCBjb250YWluaW5nIHRoZSBkYXRhc2V0IGluZGV4IGFuZCBlbGVtZW50IGluZGV4IG9mIHRoZSBtYXRjaGluZyBlbGVtZW50LiBBbHNvIGNvbnRhaW5zIHRoZSByZWN0YW5nbGUgdGhhdCB3YXMgZHJhd1xuXHRcdGdldEVsZW1lbnRBdEV2ZW50OiBmdW5jdGlvbihlKSB7XG5cdFx0XHRyZXR1cm4gSW50ZXJhY3Rpb24ubW9kZXMuc2luZ2xlKHRoaXMsIGUpO1xuXHRcdH0sXG5cblx0XHRnZXRFbGVtZW50c0F0RXZlbnQ6IGZ1bmN0aW9uKGUpIHtcblx0XHRcdHJldHVybiBJbnRlcmFjdGlvbi5tb2Rlcy5sYWJlbCh0aGlzLCBlLCB7aW50ZXJzZWN0OiB0cnVlfSk7XG5cdFx0fSxcblxuXHRcdGdldEVsZW1lbnRzQXRYQXhpczogZnVuY3Rpb24oZSkge1xuXHRcdFx0cmV0dXJuIEludGVyYWN0aW9uLm1vZGVzWyd4LWF4aXMnXSh0aGlzLCBlLCB7aW50ZXJzZWN0OiB0cnVlfSk7XG5cdFx0fSxcblxuXHRcdGdldEVsZW1lbnRzQXRFdmVudEZvck1vZGU6IGZ1bmN0aW9uKGUsIG1vZGUsIG9wdGlvbnMpIHtcblx0XHRcdHZhciBtZXRob2QgPSBJbnRlcmFjdGlvbi5tb2Rlc1ttb2RlXTtcblx0XHRcdGlmICh0eXBlb2YgbWV0aG9kID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRcdHJldHVybiBtZXRob2QodGhpcywgZSwgb3B0aW9ucyk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBbXTtcblx0XHR9LFxuXG5cdFx0Z2V0RGF0YXNldEF0RXZlbnQ6IGZ1bmN0aW9uKGUpIHtcblx0XHRcdHJldHVybiBJbnRlcmFjdGlvbi5tb2Rlcy5kYXRhc2V0KHRoaXMsIGUsIHtpbnRlcnNlY3Q6IHRydWV9KTtcblx0XHR9LFxuXG5cdFx0Z2V0RGF0YXNldE1ldGE6IGZ1bmN0aW9uKGRhdGFzZXRJbmRleCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBkYXRhc2V0ID0gbWUuZGF0YS5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdO1xuXHRcdFx0aWYgKCFkYXRhc2V0Ll9tZXRhKSB7XG5cdFx0XHRcdGRhdGFzZXQuX21ldGEgPSB7fTtcblx0XHRcdH1cblxuXHRcdFx0dmFyIG1ldGEgPSBkYXRhc2V0Ll9tZXRhW21lLmlkXTtcblx0XHRcdGlmICghbWV0YSkge1xuXHRcdFx0XHRtZXRhID0gZGF0YXNldC5fbWV0YVttZS5pZF0gPSB7XG5cdFx0XHRcdFx0dHlwZTogbnVsbCxcblx0XHRcdFx0XHRkYXRhOiBbXSxcblx0XHRcdFx0XHRkYXRhc2V0OiBudWxsLFxuXHRcdFx0XHRcdGNvbnRyb2xsZXI6IG51bGwsXG5cdFx0XHRcdFx0aGlkZGVuOiBudWxsLFx0XHRcdC8vIFNlZSBpc0RhdGFzZXRWaXNpYmxlKCkgY29tbWVudFxuXHRcdFx0XHRcdHhBeGlzSUQ6IG51bGwsXG5cdFx0XHRcdFx0eUF4aXNJRDogbnVsbFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWV0YTtcblx0XHR9LFxuXG5cdFx0Z2V0VmlzaWJsZURhdGFzZXRDb3VudDogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgY291bnQgPSAwO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDAsIGlsZW4gPSB0aGlzLmRhdGEuZGF0YXNldHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRcdGlmICh0aGlzLmlzRGF0YXNldFZpc2libGUoaSkpIHtcblx0XHRcdFx0XHRjb3VudCsrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gY291bnQ7XG5cdFx0fSxcblxuXHRcdGlzRGF0YXNldFZpc2libGU6IGZ1bmN0aW9uKGRhdGFzZXRJbmRleCkge1xuXHRcdFx0dmFyIG1ldGEgPSB0aGlzLmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG5cblx0XHRcdC8vIG1ldGEuaGlkZGVuIGlzIGEgcGVyIGNoYXJ0IGRhdGFzZXQgaGlkZGVuIGZsYWcgb3ZlcnJpZGUgd2l0aCAzIHN0YXRlczogaWYgdHJ1ZSBvciBmYWxzZSxcblx0XHRcdC8vIHRoZSBkYXRhc2V0LmhpZGRlbiB2YWx1ZSBpcyBpZ25vcmVkLCBlbHNlIGlmIG51bGwsIHRoZSBkYXRhc2V0IGhpZGRlbiBzdGF0ZSBpcyByZXR1cm5lZC5cblx0XHRcdHJldHVybiB0eXBlb2YgbWV0YS5oaWRkZW4gPT09ICdib29sZWFuJyA/ICFtZXRhLmhpZGRlbiA6ICF0aGlzLmRhdGEuZGF0YXNldHNbZGF0YXNldEluZGV4XS5oaWRkZW47XG5cdFx0fSxcblxuXHRcdGdlbmVyYXRlTGVnZW5kOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzLm9wdGlvbnMubGVnZW5kQ2FsbGJhY2sodGhpcyk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0ZGVzdHJveURhdGFzZXRNZXRhOiBmdW5jdGlvbihkYXRhc2V0SW5kZXgpIHtcblx0XHRcdHZhciBpZCA9IHRoaXMuaWQ7XG5cdFx0XHR2YXIgZGF0YXNldCA9IHRoaXMuZGF0YS5kYXRhc2V0c1tkYXRhc2V0SW5kZXhdO1xuXHRcdFx0dmFyIG1ldGEgPSBkYXRhc2V0Ll9tZXRhICYmIGRhdGFzZXQuX21ldGFbaWRdO1xuXG5cdFx0XHRpZiAobWV0YSkge1xuXHRcdFx0XHRtZXRhLmNvbnRyb2xsZXIuZGVzdHJveSgpO1xuXHRcdFx0XHRkZWxldGUgZGF0YXNldC5fbWV0YVtpZF07XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGRlc3Ryb3k6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBjYW52YXMgPSBtZS5jYW52YXM7XG5cdFx0XHR2YXIgaSwgaWxlbjtcblxuXHRcdFx0bWUuc3RvcCgpO1xuXG5cdFx0XHQvLyBkYXRhc2V0IGNvbnRyb2xsZXJzIG5lZWQgdG8gY2xlYW51cCBhc3NvY2lhdGVkIGRhdGFcblx0XHRcdGZvciAoaSA9IDAsIGlsZW4gPSBtZS5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0XHRtZS5kZXN0cm95RGF0YXNldE1ldGEoaSk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChjYW52YXMpIHtcblx0XHRcdFx0bWUudW5iaW5kRXZlbnRzKCk7XG5cdFx0XHRcdGhlbHBlcnMuY2FudmFzLmNsZWFyKG1lKTtcblx0XHRcdFx0cGxhdGZvcm0ucmVsZWFzZUNvbnRleHQobWUuY3R4KTtcblx0XHRcdFx0bWUuY2FudmFzID0gbnVsbDtcblx0XHRcdFx0bWUuY3R4ID0gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0cGx1Z2lucy5ub3RpZnkobWUsICdkZXN0cm95Jyk7XG5cblx0XHRcdGRlbGV0ZSBDaGFydC5pbnN0YW5jZXNbbWUuaWRdO1xuXHRcdH0sXG5cblx0XHR0b0Jhc2U2NEltYWdlOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzLmNhbnZhcy50b0RhdGFVUkwuYXBwbHkodGhpcy5jYW52YXMsIGFyZ3VtZW50cyk7XG5cdFx0fSxcblxuXHRcdGluaXRUb29sVGlwOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHRtZS50b29sdGlwID0gbmV3IFRvb2x0aXAoe1xuXHRcdFx0XHRfY2hhcnQ6IG1lLFxuXHRcdFx0XHRfY2hhcnRJbnN0YW5jZTogbWUsIC8vIGRlcHJlY2F0ZWQsIGJhY2t3YXJkIGNvbXBhdGliaWxpdHlcblx0XHRcdFx0X2RhdGE6IG1lLmRhdGEsXG5cdFx0XHRcdF9vcHRpb25zOiBtZS5vcHRpb25zLnRvb2x0aXBzXG5cdFx0XHR9LCBtZSk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0YmluZEV2ZW50czogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIGxpc3RlbmVycyA9IG1lLl9saXN0ZW5lcnMgPSB7fTtcblx0XHRcdHZhciBsaXN0ZW5lciA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRtZS5ldmVudEhhbmRsZXIuYXBwbHkobWUsIGFyZ3VtZW50cyk7XG5cdFx0XHR9O1xuXG5cdFx0XHRoZWxwZXJzLmVhY2gobWUub3B0aW9ucy5ldmVudHMsIGZ1bmN0aW9uKHR5cGUpIHtcblx0XHRcdFx0cGxhdGZvcm0uYWRkRXZlbnRMaXN0ZW5lcihtZSwgdHlwZSwgbGlzdGVuZXIpO1xuXHRcdFx0XHRsaXN0ZW5lcnNbdHlwZV0gPSBsaXN0ZW5lcjtcblx0XHRcdH0pO1xuXG5cdFx0XHQvLyBFbGVtZW50cyB1c2VkIHRvIGRldGVjdCBzaXplIGNoYW5nZSBzaG91bGQgbm90IGJlIGluamVjdGVkIGZvciBub24gcmVzcG9uc2l2ZSBjaGFydHMuXG5cdFx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzIyMTBcblx0XHRcdGlmIChtZS5vcHRpb25zLnJlc3BvbnNpdmUpIHtcblx0XHRcdFx0bGlzdGVuZXIgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRtZS5yZXNpemUoKTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHRwbGF0Zm9ybS5hZGRFdmVudExpc3RlbmVyKG1lLCAncmVzaXplJywgbGlzdGVuZXIpO1xuXHRcdFx0XHRsaXN0ZW5lcnMucmVzaXplID0gbGlzdGVuZXI7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0dW5iaW5kRXZlbnRzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgbGlzdGVuZXJzID0gbWUuX2xpc3RlbmVycztcblx0XHRcdGlmICghbGlzdGVuZXJzKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0ZGVsZXRlIG1lLl9saXN0ZW5lcnM7XG5cdFx0XHRoZWxwZXJzLmVhY2gobGlzdGVuZXJzLCBmdW5jdGlvbihsaXN0ZW5lciwgdHlwZSkge1xuXHRcdFx0XHRwbGF0Zm9ybS5yZW1vdmVFdmVudExpc3RlbmVyKG1lLCB0eXBlLCBsaXN0ZW5lcik7XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0dXBkYXRlSG92ZXJTdHlsZTogZnVuY3Rpb24oZWxlbWVudHMsIG1vZGUsIGVuYWJsZWQpIHtcblx0XHRcdHZhciBtZXRob2QgPSBlbmFibGVkID8gJ3NldEhvdmVyU3R5bGUnIDogJ3JlbW92ZUhvdmVyU3R5bGUnO1xuXHRcdFx0dmFyIGVsZW1lbnQsIGksIGlsZW47XG5cblx0XHRcdGZvciAoaSA9IDAsIGlsZW4gPSBlbGVtZW50cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdFx0ZWxlbWVudCA9IGVsZW1lbnRzW2ldO1xuXHRcdFx0XHRpZiAoZWxlbWVudCkge1xuXHRcdFx0XHRcdHRoaXMuZ2V0RGF0YXNldE1ldGEoZWxlbWVudC5fZGF0YXNldEluZGV4KS5jb250cm9sbGVyW21ldGhvZF0oZWxlbWVudCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHRldmVudEhhbmRsZXI6IGZ1bmN0aW9uKGUpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgdG9vbHRpcCA9IG1lLnRvb2x0aXA7XG5cblx0XHRcdGlmIChwbHVnaW5zLm5vdGlmeShtZSwgJ2JlZm9yZUV2ZW50JywgW2VdKSA9PT0gZmFsc2UpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBCdWZmZXIgYW55IHVwZGF0ZSBjYWxscyBzbyB0aGF0IHJlbmRlcnMgZG8gbm90IG9jY3VyXG5cdFx0XHRtZS5fYnVmZmVyZWRSZW5kZXIgPSB0cnVlO1xuXHRcdFx0bWUuX2J1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG5cblx0XHRcdHZhciBjaGFuZ2VkID0gbWUuaGFuZGxlRXZlbnQoZSk7XG5cdFx0XHQvLyBmb3Igc21vb3RoIHRvb2x0aXAgYW5pbWF0aW9ucyBpc3N1ZSAjNDk4OVxuXHRcdFx0Ly8gdGhlIHRvb2x0aXAgc2hvdWxkIGJlIHRoZSBzb3VyY2Ugb2YgY2hhbmdlXG5cdFx0XHQvLyBBbmltYXRpb24gY2hlY2sgd29ya2Fyb3VuZDpcblx0XHRcdC8vIHRvb2x0aXAuX3N0YXJ0IHdpbGwgYmUgbnVsbCB3aGVuIHRvb2x0aXAgaXNuJ3QgYW5pbWF0aW5nXG5cdFx0XHRpZiAodG9vbHRpcCkge1xuXHRcdFx0XHRjaGFuZ2VkID0gdG9vbHRpcC5fc3RhcnRcblx0XHRcdFx0XHQ/IHRvb2x0aXAuaGFuZGxlRXZlbnQoZSlcblx0XHRcdFx0XHQ6IGNoYW5nZWQgfCB0b29sdGlwLmhhbmRsZUV2ZW50KGUpO1xuXHRcdFx0fVxuXG5cdFx0XHRwbHVnaW5zLm5vdGlmeShtZSwgJ2FmdGVyRXZlbnQnLCBbZV0pO1xuXG5cdFx0XHR2YXIgYnVmZmVyZWRSZXF1ZXN0ID0gbWUuX2J1ZmZlcmVkUmVxdWVzdDtcblx0XHRcdGlmIChidWZmZXJlZFJlcXVlc3QpIHtcblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBhbiB1cGRhdGUgdGhhdCB3YXMgdHJpZ2dlcmVkLCB3ZSBuZWVkIHRvIGRvIGEgbm9ybWFsIHJlbmRlclxuXHRcdFx0XHRtZS5yZW5kZXIoYnVmZmVyZWRSZXF1ZXN0KTtcblx0XHRcdH0gZWxzZSBpZiAoY2hhbmdlZCAmJiAhbWUuYW5pbWF0aW5nKSB7XG5cdFx0XHRcdC8vIElmIGVudGVyaW5nLCBsZWF2aW5nLCBvciBjaGFuZ2luZyBlbGVtZW50cywgYW5pbWF0ZSB0aGUgY2hhbmdlIHZpYSBwaXZvdFxuXHRcdFx0XHRtZS5zdG9wKCk7XG5cblx0XHRcdFx0Ly8gV2Ugb25seSBuZWVkIHRvIHJlbmRlciBhdCB0aGlzIHBvaW50LiBVcGRhdGluZyB3aWxsIGNhdXNlIHNjYWxlcyB0byBiZVxuXHRcdFx0XHQvLyByZWNvbXB1dGVkIGdlbmVyYXRpbmcgZmxpY2tlciAmIHVzaW5nIG1vcmUgbWVtb3J5IHRoYW4gbmVjZXNzYXJ5LlxuXHRcdFx0XHRtZS5yZW5kZXIoe1xuXHRcdFx0XHRcdGR1cmF0aW9uOiBtZS5vcHRpb25zLmhvdmVyLmFuaW1hdGlvbkR1cmF0aW9uLFxuXHRcdFx0XHRcdGxhenk6IHRydWVcblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdG1lLl9idWZmZXJlZFJlbmRlciA9IGZhbHNlO1xuXHRcdFx0bWUuX2J1ZmZlcmVkUmVxdWVzdCA9IG51bGw7XG5cblx0XHRcdHJldHVybiBtZTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogSGFuZGxlIGFuIGV2ZW50XG5cdFx0ICogQHByaXZhdGVcblx0XHQgKiBAcGFyYW0ge0lFdmVudH0gZXZlbnQgdGhlIGV2ZW50IHRvIGhhbmRsZVxuXHRcdCAqIEByZXR1cm4ge0Jvb2xlYW59IHRydWUgaWYgdGhlIGNoYXJ0IG5lZWRzIHRvIHJlLXJlbmRlclxuXHRcdCAqL1xuXHRcdGhhbmRsZUV2ZW50OiBmdW5jdGlvbihlKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIG9wdGlvbnMgPSBtZS5vcHRpb25zIHx8IHt9O1xuXHRcdFx0dmFyIGhvdmVyT3B0aW9ucyA9IG9wdGlvbnMuaG92ZXI7XG5cdFx0XHR2YXIgY2hhbmdlZCA9IGZhbHNlO1xuXG5cdFx0XHRtZS5sYXN0QWN0aXZlID0gbWUubGFzdEFjdGl2ZSB8fCBbXTtcblxuXHRcdFx0Ly8gRmluZCBBY3RpdmUgRWxlbWVudHMgZm9yIGhvdmVyIGFuZCB0b29sdGlwc1xuXHRcdFx0aWYgKGUudHlwZSA9PT0gJ21vdXNlb3V0Jykge1xuXHRcdFx0XHRtZS5hY3RpdmUgPSBbXTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG1lLmFjdGl2ZSA9IG1lLmdldEVsZW1lbnRzQXRFdmVudEZvck1vZGUoZSwgaG92ZXJPcHRpb25zLm1vZGUsIGhvdmVyT3B0aW9ucyk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEludm9rZSBvbkhvdmVyIGhvb2tcblx0XHRcdC8vIE5lZWQgdG8gY2FsbCB3aXRoIG5hdGl2ZSBldmVudCBoZXJlIHRvIG5vdCBicmVhayBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuXHRcdFx0aGVscGVycy5jYWxsYmFjayhvcHRpb25zLm9uSG92ZXIgfHwgb3B0aW9ucy5ob3Zlci5vbkhvdmVyLCBbZS5uYXRpdmUsIG1lLmFjdGl2ZV0sIG1lKTtcblxuXHRcdFx0aWYgKGUudHlwZSA9PT0gJ21vdXNldXAnIHx8IGUudHlwZSA9PT0gJ2NsaWNrJykge1xuXHRcdFx0XHRpZiAob3B0aW9ucy5vbkNsaWNrKSB7XG5cdFx0XHRcdFx0Ly8gVXNlIGUubmF0aXZlIGhlcmUgZm9yIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5XG5cdFx0XHRcdFx0b3B0aW9ucy5vbkNsaWNrLmNhbGwobWUsIGUubmF0aXZlLCBtZS5hY3RpdmUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlbW92ZSBzdHlsaW5nIGZvciBsYXN0IGFjdGl2ZSAoZXZlbiBpZiBpdCBtYXkgc3RpbGwgYmUgYWN0aXZlKVxuXHRcdFx0aWYgKG1lLmxhc3RBY3RpdmUubGVuZ3RoKSB7XG5cdFx0XHRcdG1lLnVwZGF0ZUhvdmVyU3R5bGUobWUubGFzdEFjdGl2ZSwgaG92ZXJPcHRpb25zLm1vZGUsIGZhbHNlKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQnVpbHQgaW4gaG92ZXIgc3R5bGluZ1xuXHRcdFx0aWYgKG1lLmFjdGl2ZS5sZW5ndGggJiYgaG92ZXJPcHRpb25zLm1vZGUpIHtcblx0XHRcdFx0bWUudXBkYXRlSG92ZXJTdHlsZShtZS5hY3RpdmUsIGhvdmVyT3B0aW9ucy5tb2RlLCB0cnVlKTtcblx0XHRcdH1cblxuXHRcdFx0Y2hhbmdlZCA9ICFoZWxwZXJzLmFycmF5RXF1YWxzKG1lLmFjdGl2ZSwgbWUubGFzdEFjdGl2ZSk7XG5cblx0XHRcdC8vIFJlbWVtYmVyIExhc3QgQWN0aXZlc1xuXHRcdFx0bWUubGFzdEFjdGl2ZSA9IG1lLmFjdGl2ZTtcblxuXHRcdFx0cmV0dXJuIGNoYW5nZWQ7XG5cdFx0fVxuXHR9KTtcblxuXHQvKipcblx0ICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHVzZSBDaGFydCBpbnN0ZWFkLlxuXHQgKiBAY2xhc3MgQ2hhcnQuQ29udHJvbGxlclxuXHQgKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuNi4wXG5cdCAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcblx0ICogQHByaXZhdGVcblx0ICovXG5cdENoYXJ0LkNvbnRyb2xsZXIgPSBDaGFydDtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi4vaGVscGVycy9pbmRleCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKENoYXJ0KSB7XG5cblx0dmFyIGFycmF5RXZlbnRzID0gWydwdXNoJywgJ3BvcCcsICdzaGlmdCcsICdzcGxpY2UnLCAndW5zaGlmdCddO1xuXG5cdC8qKlxuXHQgKiBIb29rcyB0aGUgYXJyYXkgbWV0aG9kcyB0aGF0IGFkZCBvciByZW1vdmUgdmFsdWVzICgncHVzaCcsIHBvcCcsICdzaGlmdCcsICdzcGxpY2UnLFxuXHQgKiAndW5zaGlmdCcpIGFuZCBub3RpZnkgdGhlIGxpc3RlbmVyIEFGVEVSIHRoZSBhcnJheSBoYXMgYmVlbiBhbHRlcmVkLiBMaXN0ZW5lcnMgYXJlXG5cdCAqIGNhbGxlZCBvbiB0aGUgJ29uRGF0YSonIGNhbGxiYWNrcyAoZS5nLiBvbkRhdGFQdXNoLCBldGMuKSB3aXRoIHNhbWUgYXJndW1lbnRzLlxuXHQgKi9cblx0ZnVuY3Rpb24gbGlzdGVuQXJyYXlFdmVudHMoYXJyYXksIGxpc3RlbmVyKSB7XG5cdFx0aWYgKGFycmF5Ll9jaGFydGpzKSB7XG5cdFx0XHRhcnJheS5fY2hhcnRqcy5saXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGFycmF5LCAnX2NoYXJ0anMnLCB7XG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdHZhbHVlOiB7XG5cdFx0XHRcdGxpc3RlbmVyczogW2xpc3RlbmVyXVxuXHRcdFx0fVxuXHRcdH0pO1xuXG5cdFx0YXJyYXlFdmVudHMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRcdHZhciBtZXRob2QgPSAnb25EYXRhJyArIGtleS5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIGtleS5zbGljZSgxKTtcblx0XHRcdHZhciBiYXNlID0gYXJyYXlba2V5XTtcblxuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGFycmF5LCBrZXksIHtcblx0XHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdFx0XHRlbnVtZXJhYmxlOiBmYWxzZSxcblx0XHRcdFx0dmFsdWU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdHZhciBhcmdzID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzKTtcblx0XHRcdFx0XHR2YXIgcmVzID0gYmFzZS5hcHBseSh0aGlzLCBhcmdzKTtcblxuXHRcdFx0XHRcdGhlbHBlcnMuZWFjaChhcnJheS5fY2hhcnRqcy5saXN0ZW5lcnMsIGZ1bmN0aW9uKG9iamVjdCkge1xuXHRcdFx0XHRcdFx0aWYgKHR5cGVvZiBvYmplY3RbbWV0aG9kXSA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdFx0XHRcdFx0XHRvYmplY3RbbWV0aG9kXS5hcHBseShvYmplY3QsIGFyZ3MpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH0pO1xuXG5cdFx0XHRcdFx0cmV0dXJuIHJlcztcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH1cblxuXHQvKipcblx0ICogUmVtb3ZlcyB0aGUgZ2l2ZW4gYXJyYXkgZXZlbnQgbGlzdGVuZXIgYW5kIGNsZWFudXAgZXh0cmEgYXR0YWNoZWQgcHJvcGVydGllcyAoc3VjaCBhc1xuXHQgKiB0aGUgX2NoYXJ0anMgc3R1YiBhbmQgb3ZlcnJpZGRlbiBtZXRob2RzKSBpZiBhcnJheSBkb2Vzbid0IGhhdmUgYW55IG1vcmUgbGlzdGVuZXJzLlxuXHQgKi9cblx0ZnVuY3Rpb24gdW5saXN0ZW5BcnJheUV2ZW50cyhhcnJheSwgbGlzdGVuZXIpIHtcblx0XHR2YXIgc3R1YiA9IGFycmF5Ll9jaGFydGpzO1xuXHRcdGlmICghc3R1Yikge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBsaXN0ZW5lcnMgPSBzdHViLmxpc3RlbmVycztcblx0XHR2YXIgaW5kZXggPSBsaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG5cdFx0aWYgKGluZGV4ICE9PSAtMSkge1xuXHRcdFx0bGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG5cdFx0fVxuXG5cdFx0aWYgKGxpc3RlbmVycy5sZW5ndGggPiAwKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0YXJyYXlFdmVudHMuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRcdGRlbGV0ZSBhcnJheVtrZXldO1xuXHRcdH0pO1xuXG5cdFx0ZGVsZXRlIGFycmF5Ll9jaGFydGpzO1xuXHR9XG5cblx0Ly8gQmFzZSBjbGFzcyBmb3IgYWxsIGRhdGFzZXQgY29udHJvbGxlcnMgKGxpbmUsIGJhciwgZXRjKVxuXHRDaGFydC5EYXRhc2V0Q29udHJvbGxlciA9IGZ1bmN0aW9uKGNoYXJ0LCBkYXRhc2V0SW5kZXgpIHtcblx0XHR0aGlzLmluaXRpYWxpemUoY2hhcnQsIGRhdGFzZXRJbmRleCk7XG5cdH07XG5cblx0aGVscGVycy5leHRlbmQoQ2hhcnQuRGF0YXNldENvbnRyb2xsZXIucHJvdG90eXBlLCB7XG5cblx0XHQvKipcblx0XHQgKiBFbGVtZW50IHR5cGUgdXNlZCB0byBnZW5lcmF0ZSBhIG1ldGEgZGF0YXNldCAoZS5nLiBDaGFydC5lbGVtZW50LkxpbmUpLlxuXHRcdCAqIEB0eXBlIHtDaGFydC5jb3JlLmVsZW1lbnR9XG5cdFx0ICovXG5cdFx0ZGF0YXNldEVsZW1lbnRUeXBlOiBudWxsLFxuXG5cdFx0LyoqXG5cdFx0ICogRWxlbWVudCB0eXBlIHVzZWQgdG8gZ2VuZXJhdGUgYSBtZXRhIGRhdGEgKGUuZy4gQ2hhcnQuZWxlbWVudC5Qb2ludCkuXG5cdFx0ICogQHR5cGUge0NoYXJ0LmNvcmUuZWxlbWVudH1cblx0XHQgKi9cblx0XHRkYXRhRWxlbWVudFR5cGU6IG51bGwsXG5cblx0XHRpbml0aWFsaXplOiBmdW5jdGlvbihjaGFydCwgZGF0YXNldEluZGV4KSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0bWUuY2hhcnQgPSBjaGFydDtcblx0XHRcdG1lLmluZGV4ID0gZGF0YXNldEluZGV4O1xuXHRcdFx0bWUubGlua1NjYWxlcygpO1xuXHRcdFx0bWUuYWRkRWxlbWVudHMoKTtcblx0XHR9LFxuXG5cdFx0dXBkYXRlSW5kZXg6IGZ1bmN0aW9uKGRhdGFzZXRJbmRleCkge1xuXHRcdFx0dGhpcy5pbmRleCA9IGRhdGFzZXRJbmRleDtcblx0XHR9LFxuXG5cdFx0bGlua1NjYWxlczogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIG1ldGEgPSBtZS5nZXRNZXRhKCk7XG5cdFx0XHR2YXIgZGF0YXNldCA9IG1lLmdldERhdGFzZXQoKTtcblxuXHRcdFx0aWYgKG1ldGEueEF4aXNJRCA9PT0gbnVsbCB8fCAhKG1ldGEueEF4aXNJRCBpbiBtZS5jaGFydC5zY2FsZXMpKSB7XG5cdFx0XHRcdG1ldGEueEF4aXNJRCA9IGRhdGFzZXQueEF4aXNJRCB8fCBtZS5jaGFydC5vcHRpb25zLnNjYWxlcy54QXhlc1swXS5pZDtcblx0XHRcdH1cblx0XHRcdGlmIChtZXRhLnlBeGlzSUQgPT09IG51bGwgfHwgIShtZXRhLnlBeGlzSUQgaW4gbWUuY2hhcnQuc2NhbGVzKSkge1xuXHRcdFx0XHRtZXRhLnlBeGlzSUQgPSBkYXRhc2V0LnlBeGlzSUQgfHwgbWUuY2hhcnQub3B0aW9ucy5zY2FsZXMueUF4ZXNbMF0uaWQ7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGdldERhdGFzZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1t0aGlzLmluZGV4XTtcblx0XHR9LFxuXG5cdFx0Z2V0TWV0YTogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5jaGFydC5nZXREYXRhc2V0TWV0YSh0aGlzLmluZGV4KTtcblx0XHR9LFxuXG5cdFx0Z2V0U2NhbGVGb3JJZDogZnVuY3Rpb24oc2NhbGVJRCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuY2hhcnQuc2NhbGVzW3NjYWxlSURdO1xuXHRcdH0sXG5cblx0XHRyZXNldDogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLnVwZGF0ZSh0cnVlKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHRkZXN0cm95OiBmdW5jdGlvbigpIHtcblx0XHRcdGlmICh0aGlzLl9kYXRhKSB7XG5cdFx0XHRcdHVubGlzdGVuQXJyYXlFdmVudHModGhpcy5fZGF0YSwgdGhpcyk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGNyZWF0ZU1ldGFEYXRhc2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgdHlwZSA9IG1lLmRhdGFzZXRFbGVtZW50VHlwZTtcblx0XHRcdHJldHVybiB0eXBlICYmIG5ldyB0eXBlKHtcblx0XHRcdFx0X2NoYXJ0OiBtZS5jaGFydCxcblx0XHRcdFx0X2RhdGFzZXRJbmRleDogbWUuaW5kZXhcblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRjcmVhdGVNZXRhRGF0YTogZnVuY3Rpb24oaW5kZXgpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgdHlwZSA9IG1lLmRhdGFFbGVtZW50VHlwZTtcblx0XHRcdHJldHVybiB0eXBlICYmIG5ldyB0eXBlKHtcblx0XHRcdFx0X2NoYXJ0OiBtZS5jaGFydCxcblx0XHRcdFx0X2RhdGFzZXRJbmRleDogbWUuaW5kZXgsXG5cdFx0XHRcdF9pbmRleDogaW5kZXhcblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRhZGRFbGVtZW50czogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIG1ldGEgPSBtZS5nZXRNZXRhKCk7XG5cdFx0XHR2YXIgZGF0YSA9IG1lLmdldERhdGFzZXQoKS5kYXRhIHx8IFtdO1xuXHRcdFx0dmFyIG1ldGFEYXRhID0gbWV0YS5kYXRhO1xuXHRcdFx0dmFyIGksIGlsZW47XG5cblx0XHRcdGZvciAoaSA9IDAsIGlsZW4gPSBkYXRhLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0XHRtZXRhRGF0YVtpXSA9IG1ldGFEYXRhW2ldIHx8IG1lLmNyZWF0ZU1ldGFEYXRhKGkpO1xuXHRcdFx0fVxuXG5cdFx0XHRtZXRhLmRhdGFzZXQgPSBtZXRhLmRhdGFzZXQgfHwgbWUuY3JlYXRlTWV0YURhdGFzZXQoKTtcblx0XHR9LFxuXG5cdFx0YWRkRWxlbWVudEFuZFJlc2V0OiBmdW5jdGlvbihpbmRleCkge1xuXHRcdFx0dmFyIGVsZW1lbnQgPSB0aGlzLmNyZWF0ZU1ldGFEYXRhKGluZGV4KTtcblx0XHRcdHRoaXMuZ2V0TWV0YSgpLmRhdGEuc3BsaWNlKGluZGV4LCAwLCBlbGVtZW50KTtcblx0XHRcdHRoaXMudXBkYXRlRWxlbWVudChlbGVtZW50LCBpbmRleCwgdHJ1ZSk7XG5cdFx0fSxcblxuXHRcdGJ1aWxkT3JVcGRhdGVFbGVtZW50czogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIGRhdGFzZXQgPSBtZS5nZXREYXRhc2V0KCk7XG5cdFx0XHR2YXIgZGF0YSA9IGRhdGFzZXQuZGF0YSB8fCAoZGF0YXNldC5kYXRhID0gW10pO1xuXG5cdFx0XHQvLyBJbiBvcmRlciB0byBjb3JyZWN0bHkgaGFuZGxlIGRhdGEgYWRkaXRpb24vZGVsZXRpb24gYW5pbWF0aW9uIChhbiB0aHVzIHNpbXVsYXRlXG5cdFx0XHQvLyByZWFsLXRpbWUgY2hhcnRzKSwgd2UgbmVlZCB0byBtb25pdG9yIHRoZXNlIGRhdGEgbW9kaWZpY2F0aW9ucyBhbmQgc3luY2hyb25pemVcblx0XHRcdC8vIHRoZSBpbnRlcm5hbCBtZXRhIGRhdGEgYWNjb3JkaW5nbHkuXG5cdFx0XHRpZiAobWUuX2RhdGEgIT09IGRhdGEpIHtcblx0XHRcdFx0aWYgKG1lLl9kYXRhKSB7XG5cdFx0XHRcdFx0Ly8gVGhpcyBjYXNlIGhhcHBlbnMgd2hlbiB0aGUgdXNlciByZXBsYWNlZCB0aGUgZGF0YSBhcnJheSBpbnN0YW5jZS5cblx0XHRcdFx0XHR1bmxpc3RlbkFycmF5RXZlbnRzKG1lLl9kYXRhLCBtZSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRsaXN0ZW5BcnJheUV2ZW50cyhkYXRhLCBtZSk7XG5cdFx0XHRcdG1lLl9kYXRhID0gZGF0YTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUmUtc3luYyBtZXRhIGRhdGEgaW4gY2FzZSB0aGUgdXNlciByZXBsYWNlZCB0aGUgZGF0YSBhcnJheSBvciBpZiB3ZSBtaXNzZWRcblx0XHRcdC8vIGFueSB1cGRhdGVzIGFuZCBzbyBtYWtlIHN1cmUgdGhhdCB3ZSBoYW5kbGUgbnVtYmVyIG9mIGRhdGFwb2ludHMgY2hhbmdpbmcuXG5cdFx0XHRtZS5yZXN5bmNFbGVtZW50cygpO1xuXHRcdH0sXG5cblx0XHR1cGRhdGU6IGhlbHBlcnMubm9vcCxcblxuXHRcdHRyYW5zaXRpb246IGZ1bmN0aW9uKGVhc2luZ1ZhbHVlKSB7XG5cdFx0XHR2YXIgbWV0YSA9IHRoaXMuZ2V0TWV0YSgpO1xuXHRcdFx0dmFyIGVsZW1lbnRzID0gbWV0YS5kYXRhIHx8IFtdO1xuXHRcdFx0dmFyIGlsZW4gPSBlbGVtZW50cy5sZW5ndGg7XG5cdFx0XHR2YXIgaSA9IDA7XG5cblx0XHRcdGZvciAoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRcdGVsZW1lbnRzW2ldLnRyYW5zaXRpb24oZWFzaW5nVmFsdWUpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAobWV0YS5kYXRhc2V0KSB7XG5cdFx0XHRcdG1ldGEuZGF0YXNldC50cmFuc2l0aW9uKGVhc2luZ1ZhbHVlKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0ZHJhdzogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbWV0YSA9IHRoaXMuZ2V0TWV0YSgpO1xuXHRcdFx0dmFyIGVsZW1lbnRzID0gbWV0YS5kYXRhIHx8IFtdO1xuXHRcdFx0dmFyIGlsZW4gPSBlbGVtZW50cy5sZW5ndGg7XG5cdFx0XHR2YXIgaSA9IDA7XG5cblx0XHRcdGlmIChtZXRhLmRhdGFzZXQpIHtcblx0XHRcdFx0bWV0YS5kYXRhc2V0LmRyYXcoKTtcblx0XHRcdH1cblxuXHRcdFx0Zm9yICg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdFx0ZWxlbWVudHNbaV0uZHJhdygpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRyZW1vdmVIb3ZlclN0eWxlOiBmdW5jdGlvbihlbGVtZW50KSB7XG5cdFx0XHRoZWxwZXJzLm1lcmdlKGVsZW1lbnQuX21vZGVsLCBlbGVtZW50LiRwcmV2aW91c1N0eWxlIHx8IHt9KTtcblx0XHRcdGRlbGV0ZSBlbGVtZW50LiRwcmV2aW91c1N0eWxlO1xuXHRcdH0sXG5cblx0XHRzZXRIb3ZlclN0eWxlOiBmdW5jdGlvbihlbGVtZW50KSB7XG5cdFx0XHR2YXIgZGF0YXNldCA9IHRoaXMuY2hhcnQuZGF0YS5kYXRhc2V0c1tlbGVtZW50Ll9kYXRhc2V0SW5kZXhdO1xuXHRcdFx0dmFyIGluZGV4ID0gZWxlbWVudC5faW5kZXg7XG5cdFx0XHR2YXIgY3VzdG9tID0gZWxlbWVudC5jdXN0b20gfHwge307XG5cdFx0XHR2YXIgdmFsdWVPckRlZmF1bHQgPSBoZWxwZXJzLnZhbHVlQXRJbmRleE9yRGVmYXVsdDtcblx0XHRcdHZhciBnZXRIb3ZlckNvbG9yID0gaGVscGVycy5nZXRIb3ZlckNvbG9yO1xuXHRcdFx0dmFyIG1vZGVsID0gZWxlbWVudC5fbW9kZWw7XG5cblx0XHRcdGVsZW1lbnQuJHByZXZpb3VzU3R5bGUgPSB7XG5cdFx0XHRcdGJhY2tncm91bmRDb2xvcjogbW9kZWwuYmFja2dyb3VuZENvbG9yLFxuXHRcdFx0XHRib3JkZXJDb2xvcjogbW9kZWwuYm9yZGVyQ29sb3IsXG5cdFx0XHRcdGJvcmRlcldpZHRoOiBtb2RlbC5ib3JkZXJXaWR0aFxuXHRcdFx0fTtcblxuXHRcdFx0bW9kZWwuYmFja2dyb3VuZENvbG9yID0gY3VzdG9tLmhvdmVyQmFja2dyb3VuZENvbG9yID8gY3VzdG9tLmhvdmVyQmFja2dyb3VuZENvbG9yIDogdmFsdWVPckRlZmF1bHQoZGF0YXNldC5ob3ZlckJhY2tncm91bmRDb2xvciwgaW5kZXgsIGdldEhvdmVyQ29sb3IobW9kZWwuYmFja2dyb3VuZENvbG9yKSk7XG5cdFx0XHRtb2RlbC5ib3JkZXJDb2xvciA9IGN1c3RvbS5ob3ZlckJvcmRlckNvbG9yID8gY3VzdG9tLmhvdmVyQm9yZGVyQ29sb3IgOiB2YWx1ZU9yRGVmYXVsdChkYXRhc2V0LmhvdmVyQm9yZGVyQ29sb3IsIGluZGV4LCBnZXRIb3ZlckNvbG9yKG1vZGVsLmJvcmRlckNvbG9yKSk7XG5cdFx0XHRtb2RlbC5ib3JkZXJXaWR0aCA9IGN1c3RvbS5ob3ZlckJvcmRlcldpZHRoID8gY3VzdG9tLmhvdmVyQm9yZGVyV2lkdGggOiB2YWx1ZU9yRGVmYXVsdChkYXRhc2V0LmhvdmVyQm9yZGVyV2lkdGgsIGluZGV4LCBtb2RlbC5ib3JkZXJXaWR0aCk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0cmVzeW5jRWxlbWVudHM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBtZXRhID0gbWUuZ2V0TWV0YSgpO1xuXHRcdFx0dmFyIGRhdGEgPSBtZS5nZXREYXRhc2V0KCkuZGF0YTtcblx0XHRcdHZhciBudW1NZXRhID0gbWV0YS5kYXRhLmxlbmd0aDtcblx0XHRcdHZhciBudW1EYXRhID0gZGF0YS5sZW5ndGg7XG5cblx0XHRcdGlmIChudW1EYXRhIDwgbnVtTWV0YSkge1xuXHRcdFx0XHRtZXRhLmRhdGEuc3BsaWNlKG51bURhdGEsIG51bU1ldGEgLSBudW1EYXRhKTtcblx0XHRcdH0gZWxzZSBpZiAobnVtRGF0YSA+IG51bU1ldGEpIHtcblx0XHRcdFx0bWUuaW5zZXJ0RWxlbWVudHMobnVtTWV0YSwgbnVtRGF0YSAtIG51bU1ldGEpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdGluc2VydEVsZW1lbnRzOiBmdW5jdGlvbihzdGFydCwgY291bnQpIHtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgY291bnQ7ICsraSkge1xuXHRcdFx0XHR0aGlzLmFkZEVsZW1lbnRBbmRSZXNldChzdGFydCArIGkpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdG9uRGF0YVB1c2g6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy5pbnNlcnRFbGVtZW50cyh0aGlzLmdldERhdGFzZXQoKS5kYXRhLmxlbmd0aCAtIDEsIGFyZ3VtZW50cy5sZW5ndGgpO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdG9uRGF0YVBvcDogZnVuY3Rpb24oKSB7XG5cdFx0XHR0aGlzLmdldE1ldGEoKS5kYXRhLnBvcCgpO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdG9uRGF0YVNoaWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuZ2V0TWV0YSgpLmRhdGEuc2hpZnQoKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHRvbkRhdGFTcGxpY2U6IGZ1bmN0aW9uKHN0YXJ0LCBjb3VudCkge1xuXHRcdFx0dGhpcy5nZXRNZXRhKCkuZGF0YS5zcGxpY2Uoc3RhcnQsIGNvdW50KTtcblx0XHRcdHRoaXMuaW5zZXJ0RWxlbWVudHMoc3RhcnQsIGFyZ3VtZW50cy5sZW5ndGggLSAyKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHRvbkRhdGFVbnNoaWZ0OiBmdW5jdGlvbigpIHtcblx0XHRcdHRoaXMuaW5zZXJ0RWxlbWVudHMoMCwgYXJndW1lbnRzLmxlbmd0aCk7XG5cdFx0fVxuXHR9KTtcblxuXHRDaGFydC5EYXRhc2V0Q29udHJvbGxlci5leHRlbmQgPSBoZWxwZXJzLmluaGVyaXRzO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2luZGV4Jyk7XG52YXIgU2NhbGUgPSByZXF1aXJlKCcuLi9jb3JlL2NvcmUuc2NhbGUnKTtcblxuLyoqXG4gKiBHZW5lcmF0ZSBhIHNldCBvZiBsaW5lYXIgdGlja3NcbiAqIEBwYXJhbSBnZW5lcmF0aW9uT3B0aW9ucyB0aGUgb3B0aW9ucyB1c2VkIHRvIGdlbmVyYXRlIHRoZSB0aWNrc1xuICogQHBhcmFtIGRhdGFSYW5nZSB0aGUgcmFuZ2Ugb2YgdGhlIGRhdGFcbiAqIEByZXR1cm5zIHtBcnJheTxOdW1iZXI+fSBhcnJheSBvZiB0aWNrIHZhbHVlc1xuICovXG5mdW5jdGlvbiBnZW5lcmF0ZVRpY2tzKGdlbmVyYXRpb25PcHRpb25zLCBkYXRhUmFuZ2UpIHtcblx0dmFyIHRpY2tzID0gW107XG5cdC8vIFRvIGdldCBhIFwibmljZVwiIHZhbHVlIGZvciB0aGUgdGljayBzcGFjaW5nLCB3ZSB3aWxsIHVzZSB0aGUgYXBwcm9wcmlhdGVseSBuYW1lZFxuXHQvLyBcIm5pY2UgbnVtYmVyXCIgYWxnb3JpdGhtLiBTZWUgaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL3F1ZXN0aW9ucy84NTA2ODgxL25pY2UtbGFiZWwtYWxnb3JpdGhtLWZvci1jaGFydHMtd2l0aC1taW5pbXVtLXRpY2tzXG5cdC8vIGZvciBkZXRhaWxzLlxuXG5cdHZhciBmYWN0b3I7XG5cdHZhciBwcmVjaXNpb247XG5cdHZhciBzcGFjaW5nO1xuXG5cdGlmIChnZW5lcmF0aW9uT3B0aW9ucy5zdGVwU2l6ZSAmJiBnZW5lcmF0aW9uT3B0aW9ucy5zdGVwU2l6ZSA+IDApIHtcblx0XHRzcGFjaW5nID0gZ2VuZXJhdGlvbk9wdGlvbnMuc3RlcFNpemU7XG5cdH0gZWxzZSB7XG5cdFx0dmFyIG5pY2VSYW5nZSA9IGhlbHBlcnMubmljZU51bShkYXRhUmFuZ2UubWF4IC0gZGF0YVJhbmdlLm1pbiwgZmFsc2UpO1xuXHRcdHNwYWNpbmcgPSBoZWxwZXJzLm5pY2VOdW0obmljZVJhbmdlIC8gKGdlbmVyYXRpb25PcHRpb25zLm1heFRpY2tzIC0gMSksIHRydWUpO1xuXG5cdFx0cHJlY2lzaW9uID0gZ2VuZXJhdGlvbk9wdGlvbnMucHJlY2lzaW9uO1xuXHRcdGlmIChwcmVjaXNpb24gIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0Ly8gSWYgdGhlIHVzZXIgc3BlY2lmaWVkIGEgcHJlY2lzaW9uLCByb3VuZCB0byB0aGF0IG51bWJlciBvZiBkZWNpbWFsIHBsYWNlc1xuXHRcdFx0ZmFjdG9yID0gTWF0aC5wb3coMTAsIHByZWNpc2lvbik7XG5cdFx0XHRzcGFjaW5nID0gTWF0aC5jZWlsKHNwYWNpbmcgKiBmYWN0b3IpIC8gZmFjdG9yO1xuXHRcdH1cblx0fVxuXHR2YXIgbmljZU1pbiA9IE1hdGguZmxvb3IoZGF0YVJhbmdlLm1pbiAvIHNwYWNpbmcpICogc3BhY2luZztcblx0dmFyIG5pY2VNYXggPSBNYXRoLmNlaWwoZGF0YVJhbmdlLm1heCAvIHNwYWNpbmcpICogc3BhY2luZztcblxuXHQvLyBJZiBtaW4sIG1heCBhbmQgc3RlcFNpemUgaXMgc2V0IGFuZCB0aGV5IG1ha2UgYW4gZXZlbmx5IHNwYWNlZCBzY2FsZSB1c2UgaXQuXG5cdGlmICghaGVscGVycy5pc051bGxPclVuZGVmKGdlbmVyYXRpb25PcHRpb25zLm1pbikgJiYgIWhlbHBlcnMuaXNOdWxsT3JVbmRlZihnZW5lcmF0aW9uT3B0aW9ucy5tYXgpICYmIGdlbmVyYXRpb25PcHRpb25zLnN0ZXBTaXplKSB7XG5cdFx0Ly8gSWYgdmVyeSBjbG9zZSB0byBvdXIgd2hvbGUgbnVtYmVyLCB1c2UgaXQuXG5cdFx0aWYgKGhlbHBlcnMuYWxtb3N0V2hvbGUoKGdlbmVyYXRpb25PcHRpb25zLm1heCAtIGdlbmVyYXRpb25PcHRpb25zLm1pbikgLyBnZW5lcmF0aW9uT3B0aW9ucy5zdGVwU2l6ZSwgc3BhY2luZyAvIDEwMDApKSB7XG5cdFx0XHRuaWNlTWluID0gZ2VuZXJhdGlvbk9wdGlvbnMubWluO1xuXHRcdFx0bmljZU1heCA9IGdlbmVyYXRpb25PcHRpb25zLm1heDtcblx0XHR9XG5cdH1cblxuXHR2YXIgbnVtU3BhY2VzID0gKG5pY2VNYXggLSBuaWNlTWluKSAvIHNwYWNpbmc7XG5cdC8vIElmIHZlcnkgY2xvc2UgdG8gb3VyIHJvdW5kZWQgdmFsdWUsIHVzZSBpdC5cblx0aWYgKGhlbHBlcnMuYWxtb3N0RXF1YWxzKG51bVNwYWNlcywgTWF0aC5yb3VuZChudW1TcGFjZXMpLCBzcGFjaW5nIC8gMTAwMCkpIHtcblx0XHRudW1TcGFjZXMgPSBNYXRoLnJvdW5kKG51bVNwYWNlcyk7XG5cdH0gZWxzZSB7XG5cdFx0bnVtU3BhY2VzID0gTWF0aC5jZWlsKG51bVNwYWNlcyk7XG5cdH1cblxuXHRwcmVjaXNpb24gPSAxO1xuXHRpZiAoc3BhY2luZyA8IDEpIHtcblx0XHRwcmVjaXNpb24gPSBNYXRoLnBvdygxMCwgMSAtIE1hdGguZmxvb3IoaGVscGVycy5sb2cxMChzcGFjaW5nKSkpO1xuXHRcdG5pY2VNaW4gPSBNYXRoLnJvdW5kKG5pY2VNaW4gKiBwcmVjaXNpb24pIC8gcHJlY2lzaW9uO1xuXHRcdG5pY2VNYXggPSBNYXRoLnJvdW5kKG5pY2VNYXggKiBwcmVjaXNpb24pIC8gcHJlY2lzaW9uO1xuXHR9XG5cdHRpY2tzLnB1c2goZ2VuZXJhdGlvbk9wdGlvbnMubWluICE9PSB1bmRlZmluZWQgPyBnZW5lcmF0aW9uT3B0aW9ucy5taW4gOiBuaWNlTWluKTtcblx0Zm9yICh2YXIgaiA9IDE7IGogPCBudW1TcGFjZXM7ICsraikge1xuXHRcdHRpY2tzLnB1c2goTWF0aC5yb3VuZCgobmljZU1pbiArIGogKiBzcGFjaW5nKSAqIHByZWNpc2lvbikgLyBwcmVjaXNpb24pO1xuXHR9XG5cdHRpY2tzLnB1c2goZ2VuZXJhdGlvbk9wdGlvbnMubWF4ICE9PSB1bmRlZmluZWQgPyBnZW5lcmF0aW9uT3B0aW9ucy5tYXggOiBuaWNlTWF4KTtcblxuXHRyZXR1cm4gdGlja3M7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQ2hhcnQpIHtcblxuXHR2YXIgbm9vcCA9IGhlbHBlcnMubm9vcDtcblxuXHRDaGFydC5MaW5lYXJTY2FsZUJhc2UgPSBTY2FsZS5leHRlbmQoe1xuXHRcdGdldFJpZ2h0VmFsdWU6IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHRpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuXHRcdFx0XHRyZXR1cm4gK3ZhbHVlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIFNjYWxlLnByb3RvdHlwZS5nZXRSaWdodFZhbHVlLmNhbGwodGhpcywgdmFsdWUpO1xuXHRcdH0sXG5cblx0XHRoYW5kbGVUaWNrUmFuZ2VPcHRpb25zOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgb3B0cyA9IG1lLm9wdGlvbnM7XG5cdFx0XHR2YXIgdGlja09wdHMgPSBvcHRzLnRpY2tzO1xuXG5cdFx0XHQvLyBJZiB3ZSBhcmUgZm9yY2luZyBpdCB0byBiZWdpbiBhdCAwLCBidXQgMCB3aWxsIGFscmVhZHkgYmUgcmVuZGVyZWQgb24gdGhlIGNoYXJ0LFxuXHRcdFx0Ly8gZG8gbm90aGluZyBzaW5jZSB0aGF0IHdvdWxkIG1ha2UgdGhlIGNoYXJ0IHdlaXJkLiBJZiB0aGUgdXNlciByZWFsbHkgd2FudHMgYSB3ZWlyZCBjaGFydFxuXHRcdFx0Ly8gYXhpcywgdGhleSBjYW4gbWFudWFsbHkgb3ZlcnJpZGUgaXRcblx0XHRcdGlmICh0aWNrT3B0cy5iZWdpbkF0WmVybykge1xuXHRcdFx0XHR2YXIgbWluU2lnbiA9IGhlbHBlcnMuc2lnbihtZS5taW4pO1xuXHRcdFx0XHR2YXIgbWF4U2lnbiA9IGhlbHBlcnMuc2lnbihtZS5tYXgpO1xuXG5cdFx0XHRcdGlmIChtaW5TaWduIDwgMCAmJiBtYXhTaWduIDwgMCkge1xuXHRcdFx0XHRcdC8vIG1vdmUgdGhlIHRvcCB1cCB0byAwXG5cdFx0XHRcdFx0bWUubWF4ID0gMDtcblx0XHRcdFx0fSBlbHNlIGlmIChtaW5TaWduID4gMCAmJiBtYXhTaWduID4gMCkge1xuXHRcdFx0XHRcdC8vIG1vdmUgdGhlIGJvdHRvbSBkb3duIHRvIDBcblx0XHRcdFx0XHRtZS5taW4gPSAwO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHZhciBzZXRNaW4gPSB0aWNrT3B0cy5taW4gIT09IHVuZGVmaW5lZCB8fCB0aWNrT3B0cy5zdWdnZXN0ZWRNaW4gIT09IHVuZGVmaW5lZDtcblx0XHRcdHZhciBzZXRNYXggPSB0aWNrT3B0cy5tYXggIT09IHVuZGVmaW5lZCB8fCB0aWNrT3B0cy5zdWdnZXN0ZWRNYXggIT09IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKHRpY2tPcHRzLm1pbiAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdG1lLm1pbiA9IHRpY2tPcHRzLm1pbjtcblx0XHRcdH0gZWxzZSBpZiAodGlja09wdHMuc3VnZ2VzdGVkTWluICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0aWYgKG1lLm1pbiA9PT0gbnVsbCkge1xuXHRcdFx0XHRcdG1lLm1pbiA9IHRpY2tPcHRzLnN1Z2dlc3RlZE1pbjtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRtZS5taW4gPSBNYXRoLm1pbihtZS5taW4sIHRpY2tPcHRzLnN1Z2dlc3RlZE1pbik7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKHRpY2tPcHRzLm1heCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdG1lLm1heCA9IHRpY2tPcHRzLm1heDtcblx0XHRcdH0gZWxzZSBpZiAodGlja09wdHMuc3VnZ2VzdGVkTWF4ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0aWYgKG1lLm1heCA9PT0gbnVsbCkge1xuXHRcdFx0XHRcdG1lLm1heCA9IHRpY2tPcHRzLnN1Z2dlc3RlZE1heDtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRtZS5tYXggPSBNYXRoLm1heChtZS5tYXgsIHRpY2tPcHRzLnN1Z2dlc3RlZE1heCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKHNldE1pbiAhPT0gc2V0TWF4KSB7XG5cdFx0XHRcdC8vIFdlIHNldCB0aGUgbWluIG9yIHRoZSBtYXggYnV0IG5vdCBib3RoLlxuXHRcdFx0XHQvLyBTbyBlbnN1cmUgdGhhdCBvdXIgcmFuZ2UgaXMgZ29vZFxuXHRcdFx0XHQvLyBJbnZlcnRlZCBvciAwIGxlbmd0aCByYW5nZSBjYW4gaGFwcGVuIHdoZW5cblx0XHRcdFx0Ly8gdGlja3MubWluIGlzIHNldCwgYW5kIG5vIGRhdGFzZXRzIGFyZSB2aXNpYmxlXG5cdFx0XHRcdGlmIChtZS5taW4gPj0gbWUubWF4KSB7XG5cdFx0XHRcdFx0aWYgKHNldE1pbikge1xuXHRcdFx0XHRcdFx0bWUubWF4ID0gbWUubWluICsgMTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0bWUubWluID0gbWUubWF4IC0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKG1lLm1pbiA9PT0gbWUubWF4KSB7XG5cdFx0XHRcdG1lLm1heCsrO1xuXG5cdFx0XHRcdGlmICghdGlja09wdHMuYmVnaW5BdFplcm8pIHtcblx0XHRcdFx0XHRtZS5taW4tLTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0sXG5cdFx0Z2V0VGlja0xpbWl0OiBub29wLFxuXHRcdGhhbmRsZURpcmVjdGlvbmFsQ2hhbmdlczogbm9vcCxcblxuXHRcdGJ1aWxkVGlja3M6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBvcHRzID0gbWUub3B0aW9ucztcblx0XHRcdHZhciB0aWNrT3B0cyA9IG9wdHMudGlja3M7XG5cblx0XHRcdC8vIEZpZ3VyZSBvdXQgd2hhdCB0aGUgbWF4IG51bWJlciBvZiB0aWNrcyB3ZSBjYW4gc3VwcG9ydCBpdCBpcyBiYXNlZCBvbiB0aGUgc2l6ZSBvZlxuXHRcdFx0Ly8gdGhlIGF4aXMgYXJlYS4gRm9yIG5vdywgd2Ugc2F5IHRoYXQgdGhlIG1pbmltdW0gdGljayBzcGFjaW5nIGluIHBpeGVscyBtdXN0IGJlIDUwXG5cdFx0XHQvLyBXZSBhbHNvIGxpbWl0IHRoZSBtYXhpbXVtIG51bWJlciBvZiB0aWNrcyB0byAxMSB3aGljaCBnaXZlcyBhIG5pY2UgMTAgc3F1YXJlcyBvblxuXHRcdFx0Ly8gdGhlIGdyYXBoLiBNYWtlIHN1cmUgd2UgYWx3YXlzIGhhdmUgYXQgbGVhc3QgMiB0aWNrc1xuXHRcdFx0dmFyIG1heFRpY2tzID0gbWUuZ2V0VGlja0xpbWl0KCk7XG5cdFx0XHRtYXhUaWNrcyA9IE1hdGgubWF4KDIsIG1heFRpY2tzKTtcblxuXHRcdFx0dmFyIG51bWVyaWNHZW5lcmF0b3JPcHRpb25zID0ge1xuXHRcdFx0XHRtYXhUaWNrczogbWF4VGlja3MsXG5cdFx0XHRcdG1pbjogdGlja09wdHMubWluLFxuXHRcdFx0XHRtYXg6IHRpY2tPcHRzLm1heCxcblx0XHRcdFx0cHJlY2lzaW9uOiB0aWNrT3B0cy5wcmVjaXNpb24sXG5cdFx0XHRcdHN0ZXBTaXplOiBoZWxwZXJzLnZhbHVlT3JEZWZhdWx0KHRpY2tPcHRzLmZpeGVkU3RlcFNpemUsIHRpY2tPcHRzLnN0ZXBTaXplKVxuXHRcdFx0fTtcblx0XHRcdHZhciB0aWNrcyA9IG1lLnRpY2tzID0gZ2VuZXJhdGVUaWNrcyhudW1lcmljR2VuZXJhdG9yT3B0aW9ucywgbWUpO1xuXG5cdFx0XHRtZS5oYW5kbGVEaXJlY3Rpb25hbENoYW5nZXMoKTtcblxuXHRcdFx0Ly8gQXQgdGhpcyBwb2ludCwgd2UgbmVlZCB0byB1cGRhdGUgb3VyIG1heCBhbmQgbWluIGdpdmVuIHRoZSB0aWNrIHZhbHVlcyBzaW5jZSB3ZSBoYXZlIGV4cGFuZGVkIHRoZVxuXHRcdFx0Ly8gcmFuZ2Ugb2YgdGhlIHNjYWxlXG5cdFx0XHRtZS5tYXggPSBoZWxwZXJzLm1heCh0aWNrcyk7XG5cdFx0XHRtZS5taW4gPSBoZWxwZXJzLm1pbih0aWNrcyk7XG5cblx0XHRcdGlmICh0aWNrT3B0cy5yZXZlcnNlKSB7XG5cdFx0XHRcdHRpY2tzLnJldmVyc2UoKTtcblxuXHRcdFx0XHRtZS5zdGFydCA9IG1lLm1heDtcblx0XHRcdFx0bWUuZW5kID0gbWUubWluO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWUuc3RhcnQgPSBtZS5taW47XG5cdFx0XHRcdG1lLmVuZCA9IG1lLm1heDtcblx0XHRcdH1cblx0XHR9LFxuXHRcdGNvbnZlcnRUaWNrc1RvTGFiZWxzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHRtZS50aWNrc0FzTnVtYmVycyA9IG1lLnRpY2tzLnNsaWNlKCk7XG5cdFx0XHRtZS56ZXJvTGluZUluZGV4ID0gbWUudGlja3MuaW5kZXhPZigwKTtcblxuXHRcdFx0U2NhbGUucHJvdG90eXBlLmNvbnZlcnRUaWNrc1RvTGFiZWxzLmNhbGwobWUpO1xuXHRcdH1cblx0fSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgU2NhbGUgPSByZXF1aXJlKCcuLi9jb3JlL2NvcmUuc2NhbGUnKTtcbnZhciBzY2FsZVNlcnZpY2UgPSByZXF1aXJlKCcuLi9jb3JlL2NvcmUuc2NhbGVTZXJ2aWNlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG5cblx0Ly8gRGVmYXVsdCBjb25maWcgZm9yIGEgY2F0ZWdvcnkgc2NhbGVcblx0dmFyIGRlZmF1bHRDb25maWcgPSB7XG5cdFx0cG9zaXRpb246ICdib3R0b20nXG5cdH07XG5cblx0dmFyIERhdGFzZXRTY2FsZSA9IFNjYWxlLmV4dGVuZCh7XG5cdFx0LyoqXG5cdFx0KiBJbnRlcm5hbCBmdW5jdGlvbiB0byBnZXQgdGhlIGNvcnJlY3QgbGFiZWxzLiBJZiBkYXRhLnhMYWJlbHMgb3IgZGF0YS55TGFiZWxzIGFyZSBkZWZpbmVkLCB1c2UgdGhvc2Vcblx0XHQqIGVsc2UgZmFsbCBiYWNrIHRvIGRhdGEubGFiZWxzXG5cdFx0KiBAcHJpdmF0ZVxuXHRcdCovXG5cdFx0Z2V0TGFiZWxzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBkYXRhID0gdGhpcy5jaGFydC5kYXRhO1xuXHRcdFx0cmV0dXJuIHRoaXMub3B0aW9ucy5sYWJlbHMgfHwgKHRoaXMuaXNIb3Jpem9udGFsKCkgPyBkYXRhLnhMYWJlbHMgOiBkYXRhLnlMYWJlbHMpIHx8IGRhdGEubGFiZWxzO1xuXHRcdH0sXG5cblx0XHRkZXRlcm1pbmVEYXRhTGltaXRzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgbGFiZWxzID0gbWUuZ2V0TGFiZWxzKCk7XG5cdFx0XHRtZS5taW5JbmRleCA9IDA7XG5cdFx0XHRtZS5tYXhJbmRleCA9IGxhYmVscy5sZW5ndGggLSAxO1xuXHRcdFx0dmFyIGZpbmRJbmRleDtcblxuXHRcdFx0aWYgKG1lLm9wdGlvbnMudGlja3MubWluICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0Ly8gdXNlciBzcGVjaWZpZWQgbWluIHZhbHVlXG5cdFx0XHRcdGZpbmRJbmRleCA9IGxhYmVscy5pbmRleE9mKG1lLm9wdGlvbnMudGlja3MubWluKTtcblx0XHRcdFx0bWUubWluSW5kZXggPSBmaW5kSW5kZXggIT09IC0xID8gZmluZEluZGV4IDogbWUubWluSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChtZS5vcHRpb25zLnRpY2tzLm1heCAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdC8vIHVzZXIgc3BlY2lmaWVkIG1heCB2YWx1ZVxuXHRcdFx0XHRmaW5kSW5kZXggPSBsYWJlbHMuaW5kZXhPZihtZS5vcHRpb25zLnRpY2tzLm1heCk7XG5cdFx0XHRcdG1lLm1heEluZGV4ID0gZmluZEluZGV4ICE9PSAtMSA/IGZpbmRJbmRleCA6IG1lLm1heEluZGV4O1xuXHRcdFx0fVxuXG5cdFx0XHRtZS5taW4gPSBsYWJlbHNbbWUubWluSW5kZXhdO1xuXHRcdFx0bWUubWF4ID0gbGFiZWxzW21lLm1heEluZGV4XTtcblx0XHR9LFxuXG5cdFx0YnVpbGRUaWNrczogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIGxhYmVscyA9IG1lLmdldExhYmVscygpO1xuXHRcdFx0Ly8gSWYgd2UgYXJlIHZpZXdpbmcgc29tZSBzdWJzZXQgb2YgbGFiZWxzLCBzbGljZSB0aGUgb3JpZ2luYWwgYXJyYXlcblx0XHRcdG1lLnRpY2tzID0gKG1lLm1pbkluZGV4ID09PSAwICYmIG1lLm1heEluZGV4ID09PSBsYWJlbHMubGVuZ3RoIC0gMSkgPyBsYWJlbHMgOiBsYWJlbHMuc2xpY2UobWUubWluSW5kZXgsIG1lLm1heEluZGV4ICsgMSk7XG5cdFx0fSxcblxuXHRcdGdldExhYmVsRm9ySW5kZXg6IGZ1bmN0aW9uKGluZGV4LCBkYXRhc2V0SW5kZXgpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgZGF0YSA9IG1lLmNoYXJ0LmRhdGE7XG5cdFx0XHR2YXIgaXNIb3Jpem9udGFsID0gbWUuaXNIb3Jpem9udGFsKCk7XG5cblx0XHRcdGlmIChkYXRhLnlMYWJlbHMgJiYgIWlzSG9yaXpvbnRhbCkge1xuXHRcdFx0XHRyZXR1cm4gbWUuZ2V0UmlnaHRWYWx1ZShkYXRhLmRhdGFzZXRzW2RhdGFzZXRJbmRleF0uZGF0YVtpbmRleF0pO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1lLnRpY2tzW2luZGV4IC0gbWUubWluSW5kZXhdO1xuXHRcdH0sXG5cblx0XHQvLyBVc2VkIHRvIGdldCBkYXRhIHZhbHVlIGxvY2F0aW9ucy4gIFZhbHVlIGNhbiBlaXRoZXIgYmUgYW4gaW5kZXggb3IgYSBudW1lcmljYWwgdmFsdWVcblx0XHRnZXRQaXhlbEZvclZhbHVlOiBmdW5jdGlvbih2YWx1ZSwgaW5kZXgpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgb2Zmc2V0ID0gbWUub3B0aW9ucy5vZmZzZXQ7XG5cdFx0XHQvLyAxIGlzIGFkZGVkIGJlY2F1c2Ugd2UgbmVlZCB0aGUgbGVuZ3RoIGJ1dCB3ZSBoYXZlIHRoZSBpbmRleGVzXG5cdFx0XHR2YXIgb2Zmc2V0QW10ID0gTWF0aC5tYXgoKG1lLm1heEluZGV4ICsgMSAtIG1lLm1pbkluZGV4IC0gKG9mZnNldCA/IDAgOiAxKSksIDEpO1xuXG5cdFx0XHQvLyBJZiB2YWx1ZSBpcyBhIGRhdGEgb2JqZWN0LCB0aGVuIGluZGV4IGlzIHRoZSBpbmRleCBpbiB0aGUgZGF0YSBhcnJheSxcblx0XHRcdC8vIG5vdCB0aGUgaW5kZXggb2YgdGhlIHNjYWxlLiBXZSBuZWVkIHRvIGNoYW5nZSB0aGF0LlxuXHRcdFx0dmFyIHZhbHVlQ2F0ZWdvcnk7XG5cdFx0XHRpZiAodmFsdWUgIT09IHVuZGVmaW5lZCAmJiB2YWx1ZSAhPT0gbnVsbCkge1xuXHRcdFx0XHR2YWx1ZUNhdGVnb3J5ID0gbWUuaXNIb3Jpem9udGFsKCkgPyB2YWx1ZS54IDogdmFsdWUueTtcblx0XHRcdH1cblx0XHRcdGlmICh2YWx1ZUNhdGVnb3J5ICE9PSB1bmRlZmluZWQgfHwgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgaXNOYU4oaW5kZXgpKSkge1xuXHRcdFx0XHR2YXIgbGFiZWxzID0gbWUuZ2V0TGFiZWxzKCk7XG5cdFx0XHRcdHZhbHVlID0gdmFsdWVDYXRlZ29yeSB8fCB2YWx1ZTtcblx0XHRcdFx0dmFyIGlkeCA9IGxhYmVscy5pbmRleE9mKHZhbHVlKTtcblx0XHRcdFx0aW5kZXggPSBpZHggIT09IC0xID8gaWR4IDogaW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChtZS5pc0hvcml6b250YWwoKSkge1xuXHRcdFx0XHR2YXIgdmFsdWVXaWR0aCA9IG1lLndpZHRoIC8gb2Zmc2V0QW10O1xuXHRcdFx0XHR2YXIgd2lkdGhPZmZzZXQgPSAodmFsdWVXaWR0aCAqIChpbmRleCAtIG1lLm1pbkluZGV4KSk7XG5cblx0XHRcdFx0aWYgKG9mZnNldCkge1xuXHRcdFx0XHRcdHdpZHRoT2Zmc2V0ICs9ICh2YWx1ZVdpZHRoIC8gMik7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gbWUubGVmdCArIE1hdGgucm91bmQod2lkdGhPZmZzZXQpO1xuXHRcdFx0fVxuXHRcdFx0dmFyIHZhbHVlSGVpZ2h0ID0gbWUuaGVpZ2h0IC8gb2Zmc2V0QW10O1xuXHRcdFx0dmFyIGhlaWdodE9mZnNldCA9ICh2YWx1ZUhlaWdodCAqIChpbmRleCAtIG1lLm1pbkluZGV4KSk7XG5cblx0XHRcdGlmIChvZmZzZXQpIHtcblx0XHRcdFx0aGVpZ2h0T2Zmc2V0ICs9ICh2YWx1ZUhlaWdodCAvIDIpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWUudG9wICsgTWF0aC5yb3VuZChoZWlnaHRPZmZzZXQpO1xuXHRcdH0sXG5cdFx0Z2V0UGl4ZWxGb3JUaWNrOiBmdW5jdGlvbihpbmRleCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0UGl4ZWxGb3JWYWx1ZSh0aGlzLnRpY2tzW2luZGV4XSwgaW5kZXggKyB0aGlzLm1pbkluZGV4LCBudWxsKTtcblx0XHR9LFxuXHRcdGdldFZhbHVlRm9yUGl4ZWw6IGZ1bmN0aW9uKHBpeGVsKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIG9mZnNldCA9IG1lLm9wdGlvbnMub2Zmc2V0O1xuXHRcdFx0dmFyIHZhbHVlO1xuXHRcdFx0dmFyIG9mZnNldEFtdCA9IE1hdGgubWF4KChtZS5fdGlja3MubGVuZ3RoIC0gKG9mZnNldCA/IDAgOiAxKSksIDEpO1xuXHRcdFx0dmFyIGhvcnogPSBtZS5pc0hvcml6b250YWwoKTtcblx0XHRcdHZhciB2YWx1ZURpbWVuc2lvbiA9IChob3J6ID8gbWUud2lkdGggOiBtZS5oZWlnaHQpIC8gb2Zmc2V0QW10O1xuXG5cdFx0XHRwaXhlbCAtPSBob3J6ID8gbWUubGVmdCA6IG1lLnRvcDtcblxuXHRcdFx0aWYgKG9mZnNldCkge1xuXHRcdFx0XHRwaXhlbCAtPSAodmFsdWVEaW1lbnNpb24gLyAyKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKHBpeGVsIDw9IDApIHtcblx0XHRcdFx0dmFsdWUgPSAwO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsdWUgPSBNYXRoLnJvdW5kKHBpeGVsIC8gdmFsdWVEaW1lbnNpb24pO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdmFsdWUgKyBtZS5taW5JbmRleDtcblx0XHR9LFxuXHRcdGdldEJhc2VQaXhlbDogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5ib3R0b207XG5cdFx0fVxuXHR9KTtcblxuXHRzY2FsZVNlcnZpY2UucmVnaXN0ZXJTY2FsZVR5cGUoJ2NhdGVnb3J5JywgRGF0YXNldFNjYWxlLCBkZWZhdWx0Q29uZmlnKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2NvcmUvY29yZS5kZWZhdWx0cycpO1xudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2luZGV4Jyk7XG52YXIgc2NhbGVTZXJ2aWNlID0gcmVxdWlyZSgnLi4vY29yZS9jb3JlLnNjYWxlU2VydmljZScpO1xudmFyIFRpY2tzID0gcmVxdWlyZSgnLi4vY29yZS9jb3JlLnRpY2tzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQ2hhcnQpIHtcblxuXHR2YXIgZGVmYXVsdENvbmZpZyA9IHtcblx0XHRwb3NpdGlvbjogJ2xlZnQnLFxuXHRcdHRpY2tzOiB7XG5cdFx0XHRjYWxsYmFjazogVGlja3MuZm9ybWF0dGVycy5saW5lYXJcblx0XHR9XG5cdH07XG5cblx0dmFyIExpbmVhclNjYWxlID0gQ2hhcnQuTGluZWFyU2NhbGVCYXNlLmV4dGVuZCh7XG5cblx0XHRkZXRlcm1pbmVEYXRhTGltaXRzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgb3B0cyA9IG1lLm9wdGlvbnM7XG5cdFx0XHR2YXIgY2hhcnQgPSBtZS5jaGFydDtcblx0XHRcdHZhciBkYXRhID0gY2hhcnQuZGF0YTtcblx0XHRcdHZhciBkYXRhc2V0cyA9IGRhdGEuZGF0YXNldHM7XG5cdFx0XHR2YXIgaXNIb3Jpem9udGFsID0gbWUuaXNIb3Jpem9udGFsKCk7XG5cdFx0XHR2YXIgREVGQVVMVF9NSU4gPSAwO1xuXHRcdFx0dmFyIERFRkFVTFRfTUFYID0gMTtcblxuXHRcdFx0ZnVuY3Rpb24gSURNYXRjaGVzKG1ldGEpIHtcblx0XHRcdFx0cmV0dXJuIGlzSG9yaXpvbnRhbCA/IG1ldGEueEF4aXNJRCA9PT0gbWUuaWQgOiBtZXRhLnlBeGlzSUQgPT09IG1lLmlkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBGaXJzdCBDYWxjdWxhdGUgdGhlIHJhbmdlXG5cdFx0XHRtZS5taW4gPSBudWxsO1xuXHRcdFx0bWUubWF4ID0gbnVsbDtcblxuXHRcdFx0dmFyIGhhc1N0YWNrcyA9IG9wdHMuc3RhY2tlZDtcblx0XHRcdGlmIChoYXNTdGFja3MgPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRoZWxwZXJzLmVhY2goZGF0YXNldHMsIGZ1bmN0aW9uKGRhdGFzZXQsIGRhdGFzZXRJbmRleCkge1xuXHRcdFx0XHRcdGlmIChoYXNTdGFja3MpIHtcblx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHR2YXIgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG5cdFx0XHRcdFx0aWYgKGNoYXJ0LmlzRGF0YXNldFZpc2libGUoZGF0YXNldEluZGV4KSAmJiBJRE1hdGNoZXMobWV0YSkgJiZcblx0XHRcdFx0XHRcdG1ldGEuc3RhY2sgIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0aGFzU3RhY2tzID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAob3B0cy5zdGFja2VkIHx8IGhhc1N0YWNrcykge1xuXHRcdFx0XHR2YXIgdmFsdWVzUGVyU3RhY2sgPSB7fTtcblxuXHRcdFx0XHRoZWxwZXJzLmVhY2goZGF0YXNldHMsIGZ1bmN0aW9uKGRhdGFzZXQsIGRhdGFzZXRJbmRleCkge1xuXHRcdFx0XHRcdHZhciBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcblx0XHRcdFx0XHR2YXIga2V5ID0gW1xuXHRcdFx0XHRcdFx0bWV0YS50eXBlLFxuXHRcdFx0XHRcdFx0Ly8gd2UgaGF2ZSBhIHNlcGFyYXRlIHN0YWNrIGZvciBzdGFjaz11bmRlZmluZWQgZGF0YXNldHMgd2hlbiB0aGUgb3B0cy5zdGFja2VkIGlzIHVuZGVmaW5lZFxuXHRcdFx0XHRcdFx0KChvcHRzLnN0YWNrZWQgPT09IHVuZGVmaW5lZCAmJiBtZXRhLnN0YWNrID09PSB1bmRlZmluZWQpID8gZGF0YXNldEluZGV4IDogJycpLFxuXHRcdFx0XHRcdFx0bWV0YS5zdGFja1xuXHRcdFx0XHRcdF0uam9pbignLicpO1xuXG5cdFx0XHRcdFx0aWYgKHZhbHVlc1BlclN0YWNrW2tleV0gPT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHRcdFx0dmFsdWVzUGVyU3RhY2tba2V5XSA9IHtcblx0XHRcdFx0XHRcdFx0cG9zaXRpdmVWYWx1ZXM6IFtdLFxuXHRcdFx0XHRcdFx0XHRuZWdhdGl2ZVZhbHVlczogW11cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgdGhlc2UgcGVyIHR5cGVcblx0XHRcdFx0XHR2YXIgcG9zaXRpdmVWYWx1ZXMgPSB2YWx1ZXNQZXJTdGFja1trZXldLnBvc2l0aXZlVmFsdWVzO1xuXHRcdFx0XHRcdHZhciBuZWdhdGl2ZVZhbHVlcyA9IHZhbHVlc1BlclN0YWNrW2tleV0ubmVnYXRpdmVWYWx1ZXM7XG5cblx0XHRcdFx0XHRpZiAoY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShkYXRhc2V0SW5kZXgpICYmIElETWF0Y2hlcyhtZXRhKSkge1xuXHRcdFx0XHRcdFx0aGVscGVycy5lYWNoKGRhdGFzZXQuZGF0YSwgZnVuY3Rpb24ocmF3VmFsdWUsIGluZGV4KSB7XG5cdFx0XHRcdFx0XHRcdHZhciB2YWx1ZSA9ICttZS5nZXRSaWdodFZhbHVlKHJhd1ZhbHVlKTtcblx0XHRcdFx0XHRcdFx0aWYgKGlzTmFOKHZhbHVlKSB8fCBtZXRhLmRhdGFbaW5kZXhdLmhpZGRlbikge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdHBvc2l0aXZlVmFsdWVzW2luZGV4XSA9IHBvc2l0aXZlVmFsdWVzW2luZGV4XSB8fCAwO1xuXHRcdFx0XHRcdFx0XHRuZWdhdGl2ZVZhbHVlc1tpbmRleF0gPSBuZWdhdGl2ZVZhbHVlc1tpbmRleF0gfHwgMDtcblxuXHRcdFx0XHRcdFx0XHRpZiAob3B0cy5yZWxhdGl2ZVBvaW50cykge1xuXHRcdFx0XHRcdFx0XHRcdHBvc2l0aXZlVmFsdWVzW2luZGV4XSA9IDEwMDtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICh2YWx1ZSA8IDApIHtcblx0XHRcdFx0XHRcdFx0XHRuZWdhdGl2ZVZhbHVlc1tpbmRleF0gKz0gdmFsdWU7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0cG9zaXRpdmVWYWx1ZXNbaW5kZXhdICs9IHZhbHVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGhlbHBlcnMuZWFjaCh2YWx1ZXNQZXJTdGFjaywgZnVuY3Rpb24odmFsdWVzRm9yVHlwZSkge1xuXHRcdFx0XHRcdHZhciB2YWx1ZXMgPSB2YWx1ZXNGb3JUeXBlLnBvc2l0aXZlVmFsdWVzLmNvbmNhdCh2YWx1ZXNGb3JUeXBlLm5lZ2F0aXZlVmFsdWVzKTtcblx0XHRcdFx0XHR2YXIgbWluVmFsID0gaGVscGVycy5taW4odmFsdWVzKTtcblx0XHRcdFx0XHR2YXIgbWF4VmFsID0gaGVscGVycy5tYXgodmFsdWVzKTtcblx0XHRcdFx0XHRtZS5taW4gPSBtZS5taW4gPT09IG51bGwgPyBtaW5WYWwgOiBNYXRoLm1pbihtZS5taW4sIG1pblZhbCk7XG5cdFx0XHRcdFx0bWUubWF4ID0gbWUubWF4ID09PSBudWxsID8gbWF4VmFsIDogTWF0aC5tYXgobWUubWF4LCBtYXhWYWwpO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGVscGVycy5lYWNoKGRhdGFzZXRzLCBmdW5jdGlvbihkYXRhc2V0LCBkYXRhc2V0SW5kZXgpIHtcblx0XHRcdFx0XHR2YXIgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG5cdFx0XHRcdFx0aWYgKGNoYXJ0LmlzRGF0YXNldFZpc2libGUoZGF0YXNldEluZGV4KSAmJiBJRE1hdGNoZXMobWV0YSkpIHtcblx0XHRcdFx0XHRcdGhlbHBlcnMuZWFjaChkYXRhc2V0LmRhdGEsIGZ1bmN0aW9uKHJhd1ZhbHVlLCBpbmRleCkge1xuXHRcdFx0XHRcdFx0XHR2YXIgdmFsdWUgPSArbWUuZ2V0UmlnaHRWYWx1ZShyYXdWYWx1ZSk7XG5cdFx0XHRcdFx0XHRcdGlmIChpc05hTih2YWx1ZSkgfHwgbWV0YS5kYXRhW2luZGV4XS5oaWRkZW4pIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRpZiAobWUubWluID09PSBudWxsKSB7XG5cdFx0XHRcdFx0XHRcdFx0bWUubWluID0gdmFsdWU7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAodmFsdWUgPCBtZS5taW4pIHtcblx0XHRcdFx0XHRcdFx0XHRtZS5taW4gPSB2YWx1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdGlmIChtZS5tYXggPT09IG51bGwpIHtcblx0XHRcdFx0XHRcdFx0XHRtZS5tYXggPSB2YWx1ZTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICh2YWx1ZSA+IG1lLm1heCkge1xuXHRcdFx0XHRcdFx0XHRcdG1lLm1heCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRtZS5taW4gPSBpc0Zpbml0ZShtZS5taW4pICYmICFpc05hTihtZS5taW4pID8gbWUubWluIDogREVGQVVMVF9NSU47XG5cdFx0XHRtZS5tYXggPSBpc0Zpbml0ZShtZS5tYXgpICYmICFpc05hTihtZS5tYXgpID8gbWUubWF4IDogREVGQVVMVF9NQVg7XG5cblx0XHRcdC8vIENvbW1vbiBiYXNlIGltcGxlbWVudGF0aW9uIHRvIGhhbmRsZSB0aWNrcy5taW4sIHRpY2tzLm1heCwgdGlja3MuYmVnaW5BdFplcm9cblx0XHRcdHRoaXMuaGFuZGxlVGlja1JhbmdlT3B0aW9ucygpO1xuXHRcdH0sXG5cdFx0Z2V0VGlja0xpbWl0OiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBtYXhUaWNrcztcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgdGlja09wdHMgPSBtZS5vcHRpb25zLnRpY2tzO1xuXG5cdFx0XHRpZiAobWUuaXNIb3Jpem9udGFsKCkpIHtcblx0XHRcdFx0bWF4VGlja3MgPSBNYXRoLm1pbih0aWNrT3B0cy5tYXhUaWNrc0xpbWl0ID8gdGlja09wdHMubWF4VGlja3NMaW1pdCA6IDExLCBNYXRoLmNlaWwobWUud2lkdGggLyA1MCkpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Ly8gVGhlIGZhY3RvciBvZiAyIHVzZWQgdG8gc2NhbGUgdGhlIGZvbnQgc2l6ZSBoYXMgYmVlbiBleHBlcmltZW50YWxseSBkZXRlcm1pbmVkLlxuXHRcdFx0XHR2YXIgdGlja0ZvbnRTaXplID0gaGVscGVycy52YWx1ZU9yRGVmYXVsdCh0aWNrT3B0cy5mb250U2l6ZSwgZGVmYXVsdHMuZ2xvYmFsLmRlZmF1bHRGb250U2l6ZSk7XG5cdFx0XHRcdG1heFRpY2tzID0gTWF0aC5taW4odGlja09wdHMubWF4VGlja3NMaW1pdCA/IHRpY2tPcHRzLm1heFRpY2tzTGltaXQgOiAxMSwgTWF0aC5jZWlsKG1lLmhlaWdodCAvICgyICogdGlja0ZvbnRTaXplKSkpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbWF4VGlja3M7XG5cdFx0fSxcblx0XHQvLyBDYWxsZWQgYWZ0ZXIgdGhlIHRpY2tzIGFyZSBidWlsdC4gV2UgbmVlZFxuXHRcdGhhbmRsZURpcmVjdGlvbmFsQ2hhbmdlczogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIXRoaXMuaXNIb3Jpem9udGFsKCkpIHtcblx0XHRcdFx0Ly8gV2UgYXJlIGluIGEgdmVydGljYWwgb3JpZW50YXRpb24uIFRoZSB0b3AgdmFsdWUgaXMgdGhlIGhpZ2hlc3QuIFNvIHJldmVyc2UgdGhlIGFycmF5XG5cdFx0XHRcdHRoaXMudGlja3MucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0Z2V0TGFiZWxGb3JJbmRleDogZnVuY3Rpb24oaW5kZXgsIGRhdGFzZXRJbmRleCkge1xuXHRcdFx0cmV0dXJuICt0aGlzLmdldFJpZ2h0VmFsdWUodGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzW2RhdGFzZXRJbmRleF0uZGF0YVtpbmRleF0pO1xuXHRcdH0sXG5cdFx0Ly8gVXRpbHNcblx0XHRnZXRQaXhlbEZvclZhbHVlOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0Ly8gVGhpcyBtdXN0IGJlIGNhbGxlZCBhZnRlciBmaXQgaGFzIGJlZW4gcnVuIHNvIHRoYXRcblx0XHRcdC8vIHRoaXMubGVmdCwgdGhpcy50b3AsIHRoaXMucmlnaHQsIGFuZCB0aGlzLmJvdHRvbSBoYXZlIGJlZW4gZGVmaW5lZFxuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBzdGFydCA9IG1lLnN0YXJ0O1xuXG5cdFx0XHR2YXIgcmlnaHRWYWx1ZSA9ICttZS5nZXRSaWdodFZhbHVlKHZhbHVlKTtcblx0XHRcdHZhciBwaXhlbDtcblx0XHRcdHZhciByYW5nZSA9IG1lLmVuZCAtIHN0YXJ0O1xuXG5cdFx0XHRpZiAobWUuaXNIb3Jpem9udGFsKCkpIHtcblx0XHRcdFx0cGl4ZWwgPSBtZS5sZWZ0ICsgKG1lLndpZHRoIC8gcmFuZ2UgKiAocmlnaHRWYWx1ZSAtIHN0YXJ0KSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRwaXhlbCA9IG1lLmJvdHRvbSAtIChtZS5oZWlnaHQgLyByYW5nZSAqIChyaWdodFZhbHVlIC0gc3RhcnQpKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBwaXhlbDtcblx0XHR9LFxuXHRcdGdldFZhbHVlRm9yUGl4ZWw6IGZ1bmN0aW9uKHBpeGVsKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIGlzSG9yaXpvbnRhbCA9IG1lLmlzSG9yaXpvbnRhbCgpO1xuXHRcdFx0dmFyIGlubmVyRGltZW5zaW9uID0gaXNIb3Jpem9udGFsID8gbWUud2lkdGggOiBtZS5oZWlnaHQ7XG5cdFx0XHR2YXIgb2Zmc2V0ID0gKGlzSG9yaXpvbnRhbCA/IHBpeGVsIC0gbWUubGVmdCA6IG1lLmJvdHRvbSAtIHBpeGVsKSAvIGlubmVyRGltZW5zaW9uO1xuXHRcdFx0cmV0dXJuIG1lLnN0YXJ0ICsgKChtZS5lbmQgLSBtZS5zdGFydCkgKiBvZmZzZXQpO1xuXHRcdH0sXG5cdFx0Z2V0UGl4ZWxGb3JUaWNrOiBmdW5jdGlvbihpbmRleCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0UGl4ZWxGb3JWYWx1ZSh0aGlzLnRpY2tzQXNOdW1iZXJzW2luZGV4XSk7XG5cdFx0fVxuXHR9KTtcblxuXHRzY2FsZVNlcnZpY2UucmVnaXN0ZXJTY2FsZVR5cGUoJ2xpbmVhcicsIExpbmVhclNjYWxlLCBkZWZhdWx0Q29uZmlnKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi4vaGVscGVycy9pbmRleCcpO1xudmFyIFNjYWxlID0gcmVxdWlyZSgnLi4vY29yZS9jb3JlLnNjYWxlJyk7XG52YXIgc2NhbGVTZXJ2aWNlID0gcmVxdWlyZSgnLi4vY29yZS9jb3JlLnNjYWxlU2VydmljZScpO1xudmFyIFRpY2tzID0gcmVxdWlyZSgnLi4vY29yZS9jb3JlLnRpY2tzJyk7XG5cbi8qKlxuICogR2VuZXJhdGUgYSBzZXQgb2YgbG9nYXJpdGhtaWMgdGlja3NcbiAqIEBwYXJhbSBnZW5lcmF0aW9uT3B0aW9ucyB0aGUgb3B0aW9ucyB1c2VkIHRvIGdlbmVyYXRlIHRoZSB0aWNrc1xuICogQHBhcmFtIGRhdGFSYW5nZSB0aGUgcmFuZ2Ugb2YgdGhlIGRhdGFcbiAqIEByZXR1cm5zIHtBcnJheTxOdW1iZXI+fSBhcnJheSBvZiB0aWNrIHZhbHVlc1xuICovXG5mdW5jdGlvbiBnZW5lcmF0ZVRpY2tzKGdlbmVyYXRpb25PcHRpb25zLCBkYXRhUmFuZ2UpIHtcblx0dmFyIHRpY2tzID0gW107XG5cdHZhciB2YWx1ZU9yRGVmYXVsdCA9IGhlbHBlcnMudmFsdWVPckRlZmF1bHQ7XG5cblx0Ly8gRmlndXJlIG91dCB3aGF0IHRoZSBtYXggbnVtYmVyIG9mIHRpY2tzIHdlIGNhbiBzdXBwb3J0IGl0IGlzIGJhc2VkIG9uIHRoZSBzaXplIG9mXG5cdC8vIHRoZSBheGlzIGFyZWEuIEZvciBub3csIHdlIHNheSB0aGF0IHRoZSBtaW5pbXVtIHRpY2sgc3BhY2luZyBpbiBwaXhlbHMgbXVzdCBiZSA1MFxuXHQvLyBXZSBhbHNvIGxpbWl0IHRoZSBtYXhpbXVtIG51bWJlciBvZiB0aWNrcyB0byAxMSB3aGljaCBnaXZlcyBhIG5pY2UgMTAgc3F1YXJlcyBvblxuXHQvLyB0aGUgZ3JhcGhcblx0dmFyIHRpY2tWYWwgPSB2YWx1ZU9yRGVmYXVsdChnZW5lcmF0aW9uT3B0aW9ucy5taW4sIE1hdGgucG93KDEwLCBNYXRoLmZsb29yKGhlbHBlcnMubG9nMTAoZGF0YVJhbmdlLm1pbikpKSk7XG5cblx0dmFyIGVuZEV4cCA9IE1hdGguZmxvb3IoaGVscGVycy5sb2cxMChkYXRhUmFuZ2UubWF4KSk7XG5cdHZhciBlbmRTaWduaWZpY2FuZCA9IE1hdGguY2VpbChkYXRhUmFuZ2UubWF4IC8gTWF0aC5wb3coMTAsIGVuZEV4cCkpO1xuXHR2YXIgZXhwLCBzaWduaWZpY2FuZDtcblxuXHRpZiAodGlja1ZhbCA9PT0gMCkge1xuXHRcdGV4cCA9IE1hdGguZmxvb3IoaGVscGVycy5sb2cxMChkYXRhUmFuZ2UubWluTm90WmVybykpO1xuXHRcdHNpZ25pZmljYW5kID0gTWF0aC5mbG9vcihkYXRhUmFuZ2UubWluTm90WmVybyAvIE1hdGgucG93KDEwLCBleHApKTtcblxuXHRcdHRpY2tzLnB1c2godGlja1ZhbCk7XG5cdFx0dGlja1ZhbCA9IHNpZ25pZmljYW5kICogTWF0aC5wb3coMTAsIGV4cCk7XG5cdH0gZWxzZSB7XG5cdFx0ZXhwID0gTWF0aC5mbG9vcihoZWxwZXJzLmxvZzEwKHRpY2tWYWwpKTtcblx0XHRzaWduaWZpY2FuZCA9IE1hdGguZmxvb3IodGlja1ZhbCAvIE1hdGgucG93KDEwLCBleHApKTtcblx0fVxuXHR2YXIgcHJlY2lzaW9uID0gZXhwIDwgMCA/IE1hdGgucG93KDEwLCBNYXRoLmFicyhleHApKSA6IDE7XG5cblx0ZG8ge1xuXHRcdHRpY2tzLnB1c2godGlja1ZhbCk7XG5cblx0XHQrK3NpZ25pZmljYW5kO1xuXHRcdGlmIChzaWduaWZpY2FuZCA9PT0gMTApIHtcblx0XHRcdHNpZ25pZmljYW5kID0gMTtcblx0XHRcdCsrZXhwO1xuXHRcdFx0cHJlY2lzaW9uID0gZXhwID49IDAgPyAxIDogcHJlY2lzaW9uO1xuXHRcdH1cblxuXHRcdHRpY2tWYWwgPSBNYXRoLnJvdW5kKHNpZ25pZmljYW5kICogTWF0aC5wb3coMTAsIGV4cCkgKiBwcmVjaXNpb24pIC8gcHJlY2lzaW9uO1xuXHR9IHdoaWxlIChleHAgPCBlbmRFeHAgfHwgKGV4cCA9PT0gZW5kRXhwICYmIHNpZ25pZmljYW5kIDwgZW5kU2lnbmlmaWNhbmQpKTtcblxuXHR2YXIgbGFzdFRpY2sgPSB2YWx1ZU9yRGVmYXVsdChnZW5lcmF0aW9uT3B0aW9ucy5tYXgsIHRpY2tWYWwpO1xuXHR0aWNrcy5wdXNoKGxhc3RUaWNrKTtcblxuXHRyZXR1cm4gdGlja3M7XG59XG5cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihDaGFydCkge1xuXG5cdHZhciBkZWZhdWx0Q29uZmlnID0ge1xuXHRcdHBvc2l0aW9uOiAnbGVmdCcsXG5cblx0XHQvLyBsYWJlbCBzZXR0aW5nc1xuXHRcdHRpY2tzOiB7XG5cdFx0XHRjYWxsYmFjazogVGlja3MuZm9ybWF0dGVycy5sb2dhcml0aG1pY1xuXHRcdH1cblx0fTtcblxuXHR2YXIgTG9nYXJpdGhtaWNTY2FsZSA9IFNjYWxlLmV4dGVuZCh7XG5cdFx0ZGV0ZXJtaW5lRGF0YUxpbWl0czogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIG9wdHMgPSBtZS5vcHRpb25zO1xuXHRcdFx0dmFyIGNoYXJ0ID0gbWUuY2hhcnQ7XG5cdFx0XHR2YXIgZGF0YSA9IGNoYXJ0LmRhdGE7XG5cdFx0XHR2YXIgZGF0YXNldHMgPSBkYXRhLmRhdGFzZXRzO1xuXHRcdFx0dmFyIGlzSG9yaXpvbnRhbCA9IG1lLmlzSG9yaXpvbnRhbCgpO1xuXHRcdFx0ZnVuY3Rpb24gSURNYXRjaGVzKG1ldGEpIHtcblx0XHRcdFx0cmV0dXJuIGlzSG9yaXpvbnRhbCA/IG1ldGEueEF4aXNJRCA9PT0gbWUuaWQgOiBtZXRhLnlBeGlzSUQgPT09IG1lLmlkO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxjdWxhdGUgUmFuZ2Vcblx0XHRcdG1lLm1pbiA9IG51bGw7XG5cdFx0XHRtZS5tYXggPSBudWxsO1xuXHRcdFx0bWUubWluTm90WmVybyA9IG51bGw7XG5cblx0XHRcdHZhciBoYXNTdGFja3MgPSBvcHRzLnN0YWNrZWQ7XG5cdFx0XHRpZiAoaGFzU3RhY2tzID09PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0aGVscGVycy5lYWNoKGRhdGFzZXRzLCBmdW5jdGlvbihkYXRhc2V0LCBkYXRhc2V0SW5kZXgpIHtcblx0XHRcdFx0XHRpZiAoaGFzU3RhY2tzKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0dmFyIG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YShkYXRhc2V0SW5kZXgpO1xuXHRcdFx0XHRcdGlmIChjaGFydC5pc0RhdGFzZXRWaXNpYmxlKGRhdGFzZXRJbmRleCkgJiYgSURNYXRjaGVzKG1ldGEpICYmXG5cdFx0XHRcdFx0XHRtZXRhLnN0YWNrICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRcdGhhc1N0YWNrcyA9IHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKG9wdHMuc3RhY2tlZCB8fCBoYXNTdGFja3MpIHtcblx0XHRcdFx0dmFyIHZhbHVlc1BlclN0YWNrID0ge307XG5cblx0XHRcdFx0aGVscGVycy5lYWNoKGRhdGFzZXRzLCBmdW5jdGlvbihkYXRhc2V0LCBkYXRhc2V0SW5kZXgpIHtcblx0XHRcdFx0XHR2YXIgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGRhdGFzZXRJbmRleCk7XG5cdFx0XHRcdFx0dmFyIGtleSA9IFtcblx0XHRcdFx0XHRcdG1ldGEudHlwZSxcblx0XHRcdFx0XHRcdC8vIHdlIGhhdmUgYSBzZXBhcmF0ZSBzdGFjayBmb3Igc3RhY2s9dW5kZWZpbmVkIGRhdGFzZXRzIHdoZW4gdGhlIG9wdHMuc3RhY2tlZCBpcyB1bmRlZmluZWRcblx0XHRcdFx0XHRcdCgob3B0cy5zdGFja2VkID09PSB1bmRlZmluZWQgJiYgbWV0YS5zdGFjayA9PT0gdW5kZWZpbmVkKSA/IGRhdGFzZXRJbmRleCA6ICcnKSxcblx0XHRcdFx0XHRcdG1ldGEuc3RhY2tcblx0XHRcdFx0XHRdLmpvaW4oJy4nKTtcblxuXHRcdFx0XHRcdGlmIChjaGFydC5pc0RhdGFzZXRWaXNpYmxlKGRhdGFzZXRJbmRleCkgJiYgSURNYXRjaGVzKG1ldGEpKSB7XG5cdFx0XHRcdFx0XHRpZiAodmFsdWVzUGVyU3RhY2tba2V5XSA9PT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0XHRcdHZhbHVlc1BlclN0YWNrW2tleV0gPSBbXTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aGVscGVycy5lYWNoKGRhdGFzZXQuZGF0YSwgZnVuY3Rpb24ocmF3VmFsdWUsIGluZGV4KSB7XG5cdFx0XHRcdFx0XHRcdHZhciB2YWx1ZXMgPSB2YWx1ZXNQZXJTdGFja1trZXldO1xuXHRcdFx0XHRcdFx0XHR2YXIgdmFsdWUgPSArbWUuZ2V0UmlnaHRWYWx1ZShyYXdWYWx1ZSk7XG5cdFx0XHRcdFx0XHRcdC8vIGludmFsaWQsIGhpZGRlbiBhbmQgbmVnYXRpdmUgdmFsdWVzIGFyZSBpZ25vcmVkXG5cdFx0XHRcdFx0XHRcdGlmIChpc05hTih2YWx1ZSkgfHwgbWV0YS5kYXRhW2luZGV4XS5oaWRkZW4gfHwgdmFsdWUgPCAwKSB7XG5cdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdHZhbHVlc1tpbmRleF0gPSB2YWx1ZXNbaW5kZXhdIHx8IDA7XG5cdFx0XHRcdFx0XHRcdHZhbHVlc1tpbmRleF0gKz0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9KTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdGhlbHBlcnMuZWFjaCh2YWx1ZXNQZXJTdGFjaywgZnVuY3Rpb24odmFsdWVzRm9yVHlwZSkge1xuXHRcdFx0XHRcdGlmICh2YWx1ZXNGb3JUeXBlLmxlbmd0aCA+IDApIHtcblx0XHRcdFx0XHRcdHZhciBtaW5WYWwgPSBoZWxwZXJzLm1pbih2YWx1ZXNGb3JUeXBlKTtcblx0XHRcdFx0XHRcdHZhciBtYXhWYWwgPSBoZWxwZXJzLm1heCh2YWx1ZXNGb3JUeXBlKTtcblx0XHRcdFx0XHRcdG1lLm1pbiA9IG1lLm1pbiA9PT0gbnVsbCA/IG1pblZhbCA6IE1hdGgubWluKG1lLm1pbiwgbWluVmFsKTtcblx0XHRcdFx0XHRcdG1lLm1heCA9IG1lLm1heCA9PT0gbnVsbCA/IG1heFZhbCA6IE1hdGgubWF4KG1lLm1heCwgbWF4VmFsKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRoZWxwZXJzLmVhY2goZGF0YXNldHMsIGZ1bmN0aW9uKGRhdGFzZXQsIGRhdGFzZXRJbmRleCkge1xuXHRcdFx0XHRcdHZhciBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcblx0XHRcdFx0XHRpZiAoY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShkYXRhc2V0SW5kZXgpICYmIElETWF0Y2hlcyhtZXRhKSkge1xuXHRcdFx0XHRcdFx0aGVscGVycy5lYWNoKGRhdGFzZXQuZGF0YSwgZnVuY3Rpb24ocmF3VmFsdWUsIGluZGV4KSB7XG5cdFx0XHRcdFx0XHRcdHZhciB2YWx1ZSA9ICttZS5nZXRSaWdodFZhbHVlKHJhd1ZhbHVlKTtcblx0XHRcdFx0XHRcdFx0Ly8gaW52YWxpZCwgaGlkZGVuIGFuZCBuZWdhdGl2ZSB2YWx1ZXMgYXJlIGlnbm9yZWRcblx0XHRcdFx0XHRcdFx0aWYgKGlzTmFOKHZhbHVlKSB8fCBtZXRhLmRhdGFbaW5kZXhdLmhpZGRlbiB8fCB2YWx1ZSA8IDApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRpZiAobWUubWluID09PSBudWxsKSB7XG5cdFx0XHRcdFx0XHRcdFx0bWUubWluID0gdmFsdWU7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSBpZiAodmFsdWUgPCBtZS5taW4pIHtcblx0XHRcdFx0XHRcdFx0XHRtZS5taW4gPSB2YWx1ZTtcblx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdGlmIChtZS5tYXggPT09IG51bGwpIHtcblx0XHRcdFx0XHRcdFx0XHRtZS5tYXggPSB2YWx1ZTtcblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICh2YWx1ZSA+IG1lLm1heCkge1xuXHRcdFx0XHRcdFx0XHRcdG1lLm1heCA9IHZhbHVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdFx0aWYgKHZhbHVlICE9PSAwICYmIChtZS5taW5Ob3RaZXJvID09PSBudWxsIHx8IHZhbHVlIDwgbWUubWluTm90WmVybykpIHtcblx0XHRcdFx0XHRcdFx0XHRtZS5taW5Ob3RaZXJvID0gdmFsdWU7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbW1vbiBiYXNlIGltcGxlbWVudGF0aW9uIHRvIGhhbmRsZSB0aWNrcy5taW4sIHRpY2tzLm1heFxuXHRcdFx0dGhpcy5oYW5kbGVUaWNrUmFuZ2VPcHRpb25zKCk7XG5cdFx0fSxcblx0XHRoYW5kbGVUaWNrUmFuZ2VPcHRpb25zOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgb3B0cyA9IG1lLm9wdGlvbnM7XG5cdFx0XHR2YXIgdGlja09wdHMgPSBvcHRzLnRpY2tzO1xuXHRcdFx0dmFyIHZhbHVlT3JEZWZhdWx0ID0gaGVscGVycy52YWx1ZU9yRGVmYXVsdDtcblx0XHRcdHZhciBERUZBVUxUX01JTiA9IDE7XG5cdFx0XHR2YXIgREVGQVVMVF9NQVggPSAxMDtcblxuXHRcdFx0bWUubWluID0gdmFsdWVPckRlZmF1bHQodGlja09wdHMubWluLCBtZS5taW4pO1xuXHRcdFx0bWUubWF4ID0gdmFsdWVPckRlZmF1bHQodGlja09wdHMubWF4LCBtZS5tYXgpO1xuXG5cdFx0XHRpZiAobWUubWluID09PSBtZS5tYXgpIHtcblx0XHRcdFx0aWYgKG1lLm1pbiAhPT0gMCAmJiBtZS5taW4gIT09IG51bGwpIHtcblx0XHRcdFx0XHRtZS5taW4gPSBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihoZWxwZXJzLmxvZzEwKG1lLm1pbikpIC0gMSk7XG5cdFx0XHRcdFx0bWUubWF4ID0gTWF0aC5wb3coMTAsIE1hdGguZmxvb3IoaGVscGVycy5sb2cxMChtZS5tYXgpKSArIDEpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdG1lLm1pbiA9IERFRkFVTFRfTUlOO1xuXHRcdFx0XHRcdG1lLm1heCA9IERFRkFVTFRfTUFYO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRpZiAobWUubWluID09PSBudWxsKSB7XG5cdFx0XHRcdG1lLm1pbiA9IE1hdGgucG93KDEwLCBNYXRoLmZsb29yKGhlbHBlcnMubG9nMTAobWUubWF4KSkgLSAxKTtcblx0XHRcdH1cblx0XHRcdGlmIChtZS5tYXggPT09IG51bGwpIHtcblx0XHRcdFx0bWUubWF4ID0gbWUubWluICE9PSAwXG5cdFx0XHRcdFx0PyBNYXRoLnBvdygxMCwgTWF0aC5mbG9vcihoZWxwZXJzLmxvZzEwKG1lLm1pbikpICsgMSlcblx0XHRcdFx0XHQ6IERFRkFVTFRfTUFYO1xuXHRcdFx0fVxuXHRcdFx0aWYgKG1lLm1pbk5vdFplcm8gPT09IG51bGwpIHtcblx0XHRcdFx0aWYgKG1lLm1pbiA+IDApIHtcblx0XHRcdFx0XHRtZS5taW5Ob3RaZXJvID0gbWUubWluO1xuXHRcdFx0XHR9IGVsc2UgaWYgKG1lLm1heCA8IDEpIHtcblx0XHRcdFx0XHRtZS5taW5Ob3RaZXJvID0gTWF0aC5wb3coMTAsIE1hdGguZmxvb3IoaGVscGVycy5sb2cxMChtZS5tYXgpKSk7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0bWUubWluTm90WmVybyA9IERFRkFVTFRfTUlOO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRidWlsZFRpY2tzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgb3B0cyA9IG1lLm9wdGlvbnM7XG5cdFx0XHR2YXIgdGlja09wdHMgPSBvcHRzLnRpY2tzO1xuXHRcdFx0dmFyIHJldmVyc2UgPSAhbWUuaXNIb3Jpem9udGFsKCk7XG5cblx0XHRcdHZhciBnZW5lcmF0aW9uT3B0aW9ucyA9IHtcblx0XHRcdFx0bWluOiB0aWNrT3B0cy5taW4sXG5cdFx0XHRcdG1heDogdGlja09wdHMubWF4XG5cdFx0XHR9O1xuXHRcdFx0dmFyIHRpY2tzID0gbWUudGlja3MgPSBnZW5lcmF0ZVRpY2tzKGdlbmVyYXRpb25PcHRpb25zLCBtZSk7XG5cblx0XHRcdC8vIEF0IHRoaXMgcG9pbnQsIHdlIG5lZWQgdG8gdXBkYXRlIG91ciBtYXggYW5kIG1pbiBnaXZlbiB0aGUgdGljayB2YWx1ZXMgc2luY2Ugd2UgaGF2ZSBleHBhbmRlZCB0aGVcblx0XHRcdC8vIHJhbmdlIG9mIHRoZSBzY2FsZVxuXHRcdFx0bWUubWF4ID0gaGVscGVycy5tYXgodGlja3MpO1xuXHRcdFx0bWUubWluID0gaGVscGVycy5taW4odGlja3MpO1xuXG5cdFx0XHRpZiAodGlja09wdHMucmV2ZXJzZSkge1xuXHRcdFx0XHRyZXZlcnNlID0gIXJldmVyc2U7XG5cdFx0XHRcdG1lLnN0YXJ0ID0gbWUubWF4O1xuXHRcdFx0XHRtZS5lbmQgPSBtZS5taW47XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRtZS5zdGFydCA9IG1lLm1pbjtcblx0XHRcdFx0bWUuZW5kID0gbWUubWF4O1xuXHRcdFx0fVxuXHRcdFx0aWYgKHJldmVyc2UpIHtcblx0XHRcdFx0dGlja3MucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH0sXG5cdFx0Y29udmVydFRpY2tzVG9MYWJlbHM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dGhpcy50aWNrVmFsdWVzID0gdGhpcy50aWNrcy5zbGljZSgpO1xuXG5cdFx0XHRTY2FsZS5wcm90b3R5cGUuY29udmVydFRpY2tzVG9MYWJlbHMuY2FsbCh0aGlzKTtcblx0XHR9LFxuXHRcdC8vIEdldCB0aGUgY29ycmVjdCB0b29sdGlwIGxhYmVsXG5cdFx0Z2V0TGFiZWxGb3JJbmRleDogZnVuY3Rpb24oaW5kZXgsIGRhdGFzZXRJbmRleCkge1xuXHRcdFx0cmV0dXJuICt0aGlzLmdldFJpZ2h0VmFsdWUodGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzW2RhdGFzZXRJbmRleF0uZGF0YVtpbmRleF0pO1xuXHRcdH0sXG5cdFx0Z2V0UGl4ZWxGb3JUaWNrOiBmdW5jdGlvbihpbmRleCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0UGl4ZWxGb3JWYWx1ZSh0aGlzLnRpY2tWYWx1ZXNbaW5kZXhdKTtcblx0XHR9LFxuXHRcdC8qKlxuXHRcdCAqIFJldHVybnMgdGhlIHZhbHVlIG9mIHRoZSBmaXJzdCB0aWNrLlxuXHRcdCAqIEBwYXJhbSB7TnVtYmVyfSB2YWx1ZSAtIFRoZSBtaW5pbXVtIG5vdCB6ZXJvIHZhbHVlLlxuXHRcdCAqIEByZXR1cm4ge051bWJlcn0gVGhlIGZpcnN0IHRpY2sgdmFsdWUuXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHRfZ2V0Rmlyc3RUaWNrVmFsdWU6IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHR2YXIgZXhwID0gTWF0aC5mbG9vcihoZWxwZXJzLmxvZzEwKHZhbHVlKSk7XG5cdFx0XHR2YXIgc2lnbmlmaWNhbmQgPSBNYXRoLmZsb29yKHZhbHVlIC8gTWF0aC5wb3coMTAsIGV4cCkpO1xuXG5cdFx0XHRyZXR1cm4gc2lnbmlmaWNhbmQgKiBNYXRoLnBvdygxMCwgZXhwKTtcblx0XHR9LFxuXHRcdGdldFBpeGVsRm9yVmFsdWU6IGZ1bmN0aW9uKHZhbHVlKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIHJldmVyc2UgPSBtZS5vcHRpb25zLnRpY2tzLnJldmVyc2U7XG5cdFx0XHR2YXIgbG9nMTAgPSBoZWxwZXJzLmxvZzEwO1xuXHRcdFx0dmFyIGZpcnN0VGlja1ZhbHVlID0gbWUuX2dldEZpcnN0VGlja1ZhbHVlKG1lLm1pbk5vdFplcm8pO1xuXHRcdFx0dmFyIG9mZnNldCA9IDA7XG5cdFx0XHR2YXIgaW5uZXJEaW1lbnNpb24sIHBpeGVsLCBzdGFydCwgZW5kLCBzaWduO1xuXG5cdFx0XHR2YWx1ZSA9ICttZS5nZXRSaWdodFZhbHVlKHZhbHVlKTtcblx0XHRcdGlmIChyZXZlcnNlKSB7XG5cdFx0XHRcdHN0YXJ0ID0gbWUuZW5kO1xuXHRcdFx0XHRlbmQgPSBtZS5zdGFydDtcblx0XHRcdFx0c2lnbiA9IC0xO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0c3RhcnQgPSBtZS5zdGFydDtcblx0XHRcdFx0ZW5kID0gbWUuZW5kO1xuXHRcdFx0XHRzaWduID0gMTtcblx0XHRcdH1cblx0XHRcdGlmIChtZS5pc0hvcml6b250YWwoKSkge1xuXHRcdFx0XHRpbm5lckRpbWVuc2lvbiA9IG1lLndpZHRoO1xuXHRcdFx0XHRwaXhlbCA9IHJldmVyc2UgPyBtZS5yaWdodCA6IG1lLmxlZnQ7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRpbm5lckRpbWVuc2lvbiA9IG1lLmhlaWdodDtcblx0XHRcdFx0c2lnbiAqPSAtMTsgLy8gaW52ZXJ0LCBzaW5jZSB0aGUgdXBwZXItbGVmdCBjb3JuZXIgb2YgdGhlIGNhbnZhcyBpcyBhdCBwaXhlbCAoMCwgMClcblx0XHRcdFx0cGl4ZWwgPSByZXZlcnNlID8gbWUudG9wIDogbWUuYm90dG9tO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHZhbHVlICE9PSBzdGFydCkge1xuXHRcdFx0XHRpZiAoc3RhcnQgPT09IDApIHsgLy8gaW5jbHVkZSB6ZXJvIHRpY2tcblx0XHRcdFx0XHRvZmZzZXQgPSBoZWxwZXJzLmdldFZhbHVlT3JEZWZhdWx0KFxuXHRcdFx0XHRcdFx0bWUub3B0aW9ucy50aWNrcy5mb250U2l6ZSxcblx0XHRcdFx0XHRcdENoYXJ0LmRlZmF1bHRzLmdsb2JhbC5kZWZhdWx0Rm9udFNpemVcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdGlubmVyRGltZW5zaW9uIC09IG9mZnNldDtcblx0XHRcdFx0XHRzdGFydCA9IGZpcnN0VGlja1ZhbHVlO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGlmICh2YWx1ZSAhPT0gMCkge1xuXHRcdFx0XHRcdG9mZnNldCArPSBpbm5lckRpbWVuc2lvbiAvIChsb2cxMChlbmQpIC0gbG9nMTAoc3RhcnQpKSAqIChsb2cxMCh2YWx1ZSkgLSBsb2cxMChzdGFydCkpO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHBpeGVsICs9IHNpZ24gKiBvZmZzZXQ7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcGl4ZWw7XG5cdFx0fSxcblx0XHRnZXRWYWx1ZUZvclBpeGVsOiBmdW5jdGlvbihwaXhlbCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciByZXZlcnNlID0gbWUub3B0aW9ucy50aWNrcy5yZXZlcnNlO1xuXHRcdFx0dmFyIGxvZzEwID0gaGVscGVycy5sb2cxMDtcblx0XHRcdHZhciBmaXJzdFRpY2tWYWx1ZSA9IG1lLl9nZXRGaXJzdFRpY2tWYWx1ZShtZS5taW5Ob3RaZXJvKTtcblx0XHRcdHZhciBpbm5lckRpbWVuc2lvbiwgc3RhcnQsIGVuZCwgdmFsdWU7XG5cblx0XHRcdGlmIChyZXZlcnNlKSB7XG5cdFx0XHRcdHN0YXJ0ID0gbWUuZW5kO1xuXHRcdFx0XHRlbmQgPSBtZS5zdGFydDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHN0YXJ0ID0gbWUuc3RhcnQ7XG5cdFx0XHRcdGVuZCA9IG1lLmVuZDtcblx0XHRcdH1cblx0XHRcdGlmIChtZS5pc0hvcml6b250YWwoKSkge1xuXHRcdFx0XHRpbm5lckRpbWVuc2lvbiA9IG1lLndpZHRoO1xuXHRcdFx0XHR2YWx1ZSA9IHJldmVyc2UgPyBtZS5yaWdodCAtIHBpeGVsIDogcGl4ZWwgLSBtZS5sZWZ0O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aW5uZXJEaW1lbnNpb24gPSBtZS5oZWlnaHQ7XG5cdFx0XHRcdHZhbHVlID0gcmV2ZXJzZSA/IHBpeGVsIC0gbWUudG9wIDogbWUuYm90dG9tIC0gcGl4ZWw7XG5cdFx0XHR9XG5cdFx0XHRpZiAodmFsdWUgIT09IHN0YXJ0KSB7XG5cdFx0XHRcdGlmIChzdGFydCA9PT0gMCkgeyAvLyBpbmNsdWRlIHplcm8gdGlja1xuXHRcdFx0XHRcdHZhciBvZmZzZXQgPSBoZWxwZXJzLmdldFZhbHVlT3JEZWZhdWx0KFxuXHRcdFx0XHRcdFx0bWUub3B0aW9ucy50aWNrcy5mb250U2l6ZSxcblx0XHRcdFx0XHRcdENoYXJ0LmRlZmF1bHRzLmdsb2JhbC5kZWZhdWx0Rm9udFNpemVcblx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdHZhbHVlIC09IG9mZnNldDtcblx0XHRcdFx0XHRpbm5lckRpbWVuc2lvbiAtPSBvZmZzZXQ7XG5cdFx0XHRcdFx0c3RhcnQgPSBmaXJzdFRpY2tWYWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0XHR2YWx1ZSAqPSBsb2cxMChlbmQpIC0gbG9nMTAoc3RhcnQpO1xuXHRcdFx0XHR2YWx1ZSAvPSBpbm5lckRpbWVuc2lvbjtcblx0XHRcdFx0dmFsdWUgPSBNYXRoLnBvdygxMCwgbG9nMTAoc3RhcnQpICsgdmFsdWUpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdH1cblx0fSk7XG5cblx0c2NhbGVTZXJ2aWNlLnJlZ2lzdGVyU2NhbGVUeXBlKCdsb2dhcml0aG1pYycsIExvZ2FyaXRobWljU2NhbGUsIGRlZmF1bHRDb25maWcpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vY29yZS9jb3JlLmRlZmF1bHRzJyk7XG52YXIgaGVscGVycyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaW5kZXgnKTtcbnZhciBzY2FsZVNlcnZpY2UgPSByZXF1aXJlKCcuLi9jb3JlL2NvcmUuc2NhbGVTZXJ2aWNlJyk7XG52YXIgVGlja3MgPSByZXF1aXJlKCcuLi9jb3JlL2NvcmUudGlja3MnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihDaGFydCkge1xuXG5cdHZhciBnbG9iYWxEZWZhdWx0cyA9IGRlZmF1bHRzLmdsb2JhbDtcblxuXHR2YXIgZGVmYXVsdENvbmZpZyA9IHtcblx0XHRkaXNwbGF5OiB0cnVlLFxuXG5cdFx0Ly8gQm9vbGVhbiAtIFdoZXRoZXIgdG8gYW5pbWF0ZSBzY2FsaW5nIHRoZSBjaGFydCBmcm9tIHRoZSBjZW50cmVcblx0XHRhbmltYXRlOiB0cnVlLFxuXHRcdHBvc2l0aW9uOiAnY2hhcnRBcmVhJyxcblxuXHRcdGFuZ2xlTGluZXM6IHtcblx0XHRcdGRpc3BsYXk6IHRydWUsXG5cdFx0XHRjb2xvcjogJ3JnYmEoMCwgMCwgMCwgMC4xKScsXG5cdFx0XHRsaW5lV2lkdGg6IDFcblx0XHR9LFxuXG5cdFx0Z3JpZExpbmVzOiB7XG5cdFx0XHRjaXJjdWxhcjogZmFsc2Vcblx0XHR9LFxuXG5cdFx0Ly8gbGFiZWwgc2V0dGluZ3Ncblx0XHR0aWNrczoge1xuXHRcdFx0Ly8gQm9vbGVhbiAtIFNob3cgYSBiYWNrZHJvcCB0byB0aGUgc2NhbGUgbGFiZWxcblx0XHRcdHNob3dMYWJlbEJhY2tkcm9wOiB0cnVlLFxuXG5cdFx0XHQvLyBTdHJpbmcgLSBUaGUgY29sb3VyIG9mIHRoZSBsYWJlbCBiYWNrZHJvcFxuXHRcdFx0YmFja2Ryb3BDb2xvcjogJ3JnYmEoMjU1LDI1NSwyNTUsMC43NSknLFxuXG5cdFx0XHQvLyBOdW1iZXIgLSBUaGUgYmFja2Ryb3AgcGFkZGluZyBhYm92ZSAmIGJlbG93IHRoZSBsYWJlbCBpbiBwaXhlbHNcblx0XHRcdGJhY2tkcm9wUGFkZGluZ1k6IDIsXG5cblx0XHRcdC8vIE51bWJlciAtIFRoZSBiYWNrZHJvcCBwYWRkaW5nIHRvIHRoZSBzaWRlIG9mIHRoZSBsYWJlbCBpbiBwaXhlbHNcblx0XHRcdGJhY2tkcm9wUGFkZGluZ1g6IDIsXG5cblx0XHRcdGNhbGxiYWNrOiBUaWNrcy5mb3JtYXR0ZXJzLmxpbmVhclxuXHRcdH0sXG5cblx0XHRwb2ludExhYmVsczoge1xuXHRcdFx0Ly8gQm9vbGVhbiAtIGlmIHRydWUsIHNob3cgcG9pbnQgbGFiZWxzXG5cdFx0XHRkaXNwbGF5OiB0cnVlLFxuXG5cdFx0XHQvLyBOdW1iZXIgLSBQb2ludCBsYWJlbCBmb250IHNpemUgaW4gcGl4ZWxzXG5cdFx0XHRmb250U2l6ZTogMTAsXG5cblx0XHRcdC8vIEZ1bmN0aW9uIC0gVXNlZCB0byBjb252ZXJ0IHBvaW50IGxhYmVsc1xuXHRcdFx0Y2FsbGJhY2s6IGZ1bmN0aW9uKGxhYmVsKSB7XG5cdFx0XHRcdHJldHVybiBsYWJlbDtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0ZnVuY3Rpb24gZ2V0VmFsdWVDb3VudChzY2FsZSkge1xuXHRcdHZhciBvcHRzID0gc2NhbGUub3B0aW9ucztcblx0XHRyZXR1cm4gb3B0cy5hbmdsZUxpbmVzLmRpc3BsYXkgfHwgb3B0cy5wb2ludExhYmVscy5kaXNwbGF5ID8gc2NhbGUuY2hhcnQuZGF0YS5sYWJlbHMubGVuZ3RoIDogMDtcblx0fVxuXG5cdGZ1bmN0aW9uIGdldFBvaW50TGFiZWxGb250T3B0aW9ucyhzY2FsZSkge1xuXHRcdHZhciBwb2ludExhYmVsT3B0aW9ucyA9IHNjYWxlLm9wdGlvbnMucG9pbnRMYWJlbHM7XG5cdFx0dmFyIGZvbnRTaXplID0gaGVscGVycy52YWx1ZU9yRGVmYXVsdChwb2ludExhYmVsT3B0aW9ucy5mb250U2l6ZSwgZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdEZvbnRTaXplKTtcblx0XHR2YXIgZm9udFN0eWxlID0gaGVscGVycy52YWx1ZU9yRGVmYXVsdChwb2ludExhYmVsT3B0aW9ucy5mb250U3R5bGUsIGdsb2JhbERlZmF1bHRzLmRlZmF1bHRGb250U3R5bGUpO1xuXHRcdHZhciBmb250RmFtaWx5ID0gaGVscGVycy52YWx1ZU9yRGVmYXVsdChwb2ludExhYmVsT3B0aW9ucy5mb250RmFtaWx5LCBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Rm9udEZhbWlseSk7XG5cdFx0dmFyIGZvbnQgPSBoZWxwZXJzLmZvbnRTdHJpbmcoZm9udFNpemUsIGZvbnRTdHlsZSwgZm9udEZhbWlseSk7XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0c2l6ZTogZm9udFNpemUsXG5cdFx0XHRzdHlsZTogZm9udFN0eWxlLFxuXHRcdFx0ZmFtaWx5OiBmb250RmFtaWx5LFxuXHRcdFx0Zm9udDogZm9udFxuXHRcdH07XG5cdH1cblxuXHRmdW5jdGlvbiBtZWFzdXJlTGFiZWxTaXplKGN0eCwgZm9udFNpemUsIGxhYmVsKSB7XG5cdFx0aWYgKGhlbHBlcnMuaXNBcnJheShsYWJlbCkpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHc6IGhlbHBlcnMubG9uZ2VzdFRleHQoY3R4LCBjdHguZm9udCwgbGFiZWwpLFxuXHRcdFx0XHRoOiAobGFiZWwubGVuZ3RoICogZm9udFNpemUpICsgKChsYWJlbC5sZW5ndGggLSAxKSAqIDEuNSAqIGZvbnRTaXplKVxuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0dzogY3R4Lm1lYXN1cmVUZXh0KGxhYmVsKS53aWR0aCxcblx0XHRcdGg6IGZvbnRTaXplXG5cdFx0fTtcblx0fVxuXG5cdGZ1bmN0aW9uIGRldGVybWluZUxpbWl0cyhhbmdsZSwgcG9zLCBzaXplLCBtaW4sIG1heCkge1xuXHRcdGlmIChhbmdsZSA9PT0gbWluIHx8IGFuZ2xlID09PSBtYXgpIHtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHN0YXJ0OiBwb3MgLSAoc2l6ZSAvIDIpLFxuXHRcdFx0XHRlbmQ6IHBvcyArIChzaXplIC8gMilcblx0XHRcdH07XG5cdFx0fSBlbHNlIGlmIChhbmdsZSA8IG1pbiB8fCBhbmdsZSA+IG1heCkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0c3RhcnQ6IHBvcyAtIHNpemUgLSA1LFxuXHRcdFx0XHRlbmQ6IHBvc1xuXHRcdFx0fTtcblx0XHR9XG5cblx0XHRyZXR1cm4ge1xuXHRcdFx0c3RhcnQ6IHBvcyxcblx0XHRcdGVuZDogcG9zICsgc2l6ZSArIDVcblx0XHR9O1xuXHR9XG5cblx0LyoqXG5cdCAqIEhlbHBlciBmdW5jdGlvbiB0byBmaXQgYSByYWRpYWwgbGluZWFyIHNjYWxlIHdpdGggcG9pbnQgbGFiZWxzXG5cdCAqL1xuXHRmdW5jdGlvbiBmaXRXaXRoUG9pbnRMYWJlbHMoc2NhbGUpIHtcblx0XHQvKlxuXHRcdCAqIFJpZ2h0LCB0aGlzIGlzIHJlYWxseSBjb25mdXNpbmcgYW5kIHRoZXJlIGlzIGEgbG90IG9mIG1hdGhzIGdvaW5nIG9uIGhlcmVcblx0XHQgKiBUaGUgZ2lzdCBvZiB0aGUgcHJvYmxlbSBpcyBoZXJlOiBodHRwczovL2dpc3QuZ2l0aHViLmNvbS9ubm5pY2svNjk2Y2M5YzU1ZjRiMGJlYjhmZTlcblx0XHQgKlxuXHRcdCAqIFJlYWN0aW9uOiBodHRwczovL2RsLmRyb3Bib3h1c2VyY29udGVudC5jb20vdS8zNDYwMTM2My90b29tdWNoc2NpZW5jZS5naWZcblx0XHQgKlxuXHRcdCAqIFNvbHV0aW9uOlxuXHRcdCAqXG5cdFx0ICogV2UgYXNzdW1lIHRoZSByYWRpdXMgb2YgdGhlIHBvbHlnb24gaXMgaGFsZiB0aGUgc2l6ZSBvZiB0aGUgY2FudmFzIGF0IGZpcnN0XG5cdFx0ICogYXQgZWFjaCBpbmRleCB3ZSBjaGVjayBpZiB0aGUgdGV4dCBvdmVybGFwcy5cblx0XHQgKlxuXHRcdCAqIFdoZXJlIGl0IGRvZXMsIHdlIHN0b3JlIHRoYXQgYW5nbGUgYW5kIHRoYXQgaW5kZXguXG5cdFx0ICpcblx0XHQgKiBBZnRlciBmaW5kaW5nIHRoZSBsYXJnZXN0IGluZGV4IGFuZCBhbmdsZSB3ZSBjYWxjdWxhdGUgaG93IG11Y2ggd2UgbmVlZCB0byByZW1vdmVcblx0XHQgKiBmcm9tIHRoZSBzaGFwZSByYWRpdXMgdG8gbW92ZSB0aGUgcG9pbnQgaW53YXJkcyBieSB0aGF0IHguXG5cdFx0ICpcblx0XHQgKiBXZSBhdmVyYWdlIHRoZSBsZWZ0IGFuZCByaWdodCBkaXN0YW5jZXMgdG8gZ2V0IHRoZSBtYXhpbXVtIHNoYXBlIHJhZGl1cyB0aGF0IGNhbiBmaXQgaW4gdGhlIGJveFxuXHRcdCAqIGFsb25nIHdpdGggbGFiZWxzLlxuXHRcdCAqXG5cdFx0ICogT25jZSB3ZSBoYXZlIHRoYXQsIHdlIGNhbiBmaW5kIHRoZSBjZW50cmUgcG9pbnQgZm9yIHRoZSBjaGFydCwgYnkgdGFraW5nIHRoZSB4IHRleHQgcHJvdHJ1c2lvblxuXHRcdCAqIG9uIGVhY2ggc2lkZSwgcmVtb3ZpbmcgdGhhdCBmcm9tIHRoZSBzaXplLCBoYWx2aW5nIGl0IGFuZCBhZGRpbmcgdGhlIGxlZnQgeCBwcm90cnVzaW9uIHdpZHRoLlxuXHRcdCAqXG5cdFx0ICogVGhpcyB3aWxsIG1lYW4gd2UgaGF2ZSBhIHNoYXBlIGZpdHRlZCB0byB0aGUgY2FudmFzLCBhcyBsYXJnZSBhcyBpdCBjYW4gYmUgd2l0aCB0aGUgbGFiZWxzXG5cdFx0ICogYW5kIHBvc2l0aW9uIGl0IGluIHRoZSBtb3N0IHNwYWNlIGVmZmljaWVudCBtYW5uZXJcblx0XHQgKlxuXHRcdCAqIGh0dHBzOi8vZGwuZHJvcGJveHVzZXJjb250ZW50LmNvbS91LzM0NjAxMzYzL3llYWhzY2llbmNlLmdpZlxuXHRcdCAqL1xuXG5cdFx0dmFyIHBsRm9udCA9IGdldFBvaW50TGFiZWxGb250T3B0aW9ucyhzY2FsZSk7XG5cblx0XHQvLyBHZXQgbWF4aW11bSByYWRpdXMgb2YgdGhlIHBvbHlnb24uIEVpdGhlciBoYWxmIHRoZSBoZWlnaHQgKG1pbnVzIHRoZSB0ZXh0IHdpZHRoKSBvciBoYWxmIHRoZSB3aWR0aC5cblx0XHQvLyBVc2UgdGhpcyB0byBjYWxjdWxhdGUgdGhlIG9mZnNldCArIGNoYW5nZS4gLSBNYWtlIHN1cmUgTC9SIHByb3RydXNpb24gaXMgYXQgbGVhc3QgMCB0byBzdG9wIGlzc3VlcyB3aXRoIGNlbnRyZSBwb2ludHNcblx0XHR2YXIgbGFyZ2VzdFBvc3NpYmxlUmFkaXVzID0gTWF0aC5taW4oc2NhbGUuaGVpZ2h0IC8gMiwgc2NhbGUud2lkdGggLyAyKTtcblx0XHR2YXIgZnVydGhlc3RMaW1pdHMgPSB7XG5cdFx0XHRyOiBzY2FsZS53aWR0aCxcblx0XHRcdGw6IDAsXG5cdFx0XHR0OiBzY2FsZS5oZWlnaHQsXG5cdFx0XHRiOiAwXG5cdFx0fTtcblx0XHR2YXIgZnVydGhlc3RBbmdsZXMgPSB7fTtcblx0XHR2YXIgaSwgdGV4dFNpemUsIHBvaW50UG9zaXRpb247XG5cblx0XHRzY2FsZS5jdHguZm9udCA9IHBsRm9udC5mb250O1xuXHRcdHNjYWxlLl9wb2ludExhYmVsU2l6ZXMgPSBbXTtcblxuXHRcdHZhciB2YWx1ZUNvdW50ID0gZ2V0VmFsdWVDb3VudChzY2FsZSk7XG5cdFx0Zm9yIChpID0gMDsgaSA8IHZhbHVlQ291bnQ7IGkrKykge1xuXHRcdFx0cG9pbnRQb3NpdGlvbiA9IHNjYWxlLmdldFBvaW50UG9zaXRpb24oaSwgbGFyZ2VzdFBvc3NpYmxlUmFkaXVzKTtcblx0XHRcdHRleHRTaXplID0gbWVhc3VyZUxhYmVsU2l6ZShzY2FsZS5jdHgsIHBsRm9udC5zaXplLCBzY2FsZS5wb2ludExhYmVsc1tpXSB8fCAnJyk7XG5cdFx0XHRzY2FsZS5fcG9pbnRMYWJlbFNpemVzW2ldID0gdGV4dFNpemU7XG5cblx0XHRcdC8vIEFkZCBxdWFydGVyIGNpcmNsZSB0byBtYWtlIGRlZ3JlZSAwIG1lYW4gdG9wIG9mIGNpcmNsZVxuXHRcdFx0dmFyIGFuZ2xlUmFkaWFucyA9IHNjYWxlLmdldEluZGV4QW5nbGUoaSk7XG5cdFx0XHR2YXIgYW5nbGUgPSBoZWxwZXJzLnRvRGVncmVlcyhhbmdsZVJhZGlhbnMpICUgMzYwO1xuXHRcdFx0dmFyIGhMaW1pdHMgPSBkZXRlcm1pbmVMaW1pdHMoYW5nbGUsIHBvaW50UG9zaXRpb24ueCwgdGV4dFNpemUudywgMCwgMTgwKTtcblx0XHRcdHZhciB2TGltaXRzID0gZGV0ZXJtaW5lTGltaXRzKGFuZ2xlLCBwb2ludFBvc2l0aW9uLnksIHRleHRTaXplLmgsIDkwLCAyNzApO1xuXG5cdFx0XHRpZiAoaExpbWl0cy5zdGFydCA8IGZ1cnRoZXN0TGltaXRzLmwpIHtcblx0XHRcdFx0ZnVydGhlc3RMaW1pdHMubCA9IGhMaW1pdHMuc3RhcnQ7XG5cdFx0XHRcdGZ1cnRoZXN0QW5nbGVzLmwgPSBhbmdsZVJhZGlhbnM7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChoTGltaXRzLmVuZCA+IGZ1cnRoZXN0TGltaXRzLnIpIHtcblx0XHRcdFx0ZnVydGhlc3RMaW1pdHMuciA9IGhMaW1pdHMuZW5kO1xuXHRcdFx0XHRmdXJ0aGVzdEFuZ2xlcy5yID0gYW5nbGVSYWRpYW5zO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodkxpbWl0cy5zdGFydCA8IGZ1cnRoZXN0TGltaXRzLnQpIHtcblx0XHRcdFx0ZnVydGhlc3RMaW1pdHMudCA9IHZMaW1pdHMuc3RhcnQ7XG5cdFx0XHRcdGZ1cnRoZXN0QW5nbGVzLnQgPSBhbmdsZVJhZGlhbnM7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh2TGltaXRzLmVuZCA+IGZ1cnRoZXN0TGltaXRzLmIpIHtcblx0XHRcdFx0ZnVydGhlc3RMaW1pdHMuYiA9IHZMaW1pdHMuZW5kO1xuXHRcdFx0XHRmdXJ0aGVzdEFuZ2xlcy5iID0gYW5nbGVSYWRpYW5zO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHNjYWxlLnNldFJlZHVjdGlvbnMobGFyZ2VzdFBvc3NpYmxlUmFkaXVzLCBmdXJ0aGVzdExpbWl0cywgZnVydGhlc3RBbmdsZXMpO1xuXHR9XG5cblx0LyoqXG5cdCAqIEhlbHBlciBmdW5jdGlvbiB0byBmaXQgYSByYWRpYWwgbGluZWFyIHNjYWxlIHdpdGggbm8gcG9pbnQgbGFiZWxzXG5cdCAqL1xuXHRmdW5jdGlvbiBmaXQoc2NhbGUpIHtcblx0XHR2YXIgbGFyZ2VzdFBvc3NpYmxlUmFkaXVzID0gTWF0aC5taW4oc2NhbGUuaGVpZ2h0IC8gMiwgc2NhbGUud2lkdGggLyAyKTtcblx0XHRzY2FsZS5kcmF3aW5nQXJlYSA9IE1hdGgucm91bmQobGFyZ2VzdFBvc3NpYmxlUmFkaXVzKTtcblx0XHRzY2FsZS5zZXRDZW50ZXJQb2ludCgwLCAwLCAwLCAwKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGdldFRleHRBbGlnbkZvckFuZ2xlKGFuZ2xlKSB7XG5cdFx0aWYgKGFuZ2xlID09PSAwIHx8IGFuZ2xlID09PSAxODApIHtcblx0XHRcdHJldHVybiAnY2VudGVyJztcblx0XHR9IGVsc2UgaWYgKGFuZ2xlIDwgMTgwKSB7XG5cdFx0XHRyZXR1cm4gJ2xlZnQnO1xuXHRcdH1cblxuXHRcdHJldHVybiAncmlnaHQnO1xuXHR9XG5cblx0ZnVuY3Rpb24gZmlsbFRleHQoY3R4LCB0ZXh0LCBwb3NpdGlvbiwgZm9udFNpemUpIHtcblx0XHRpZiAoaGVscGVycy5pc0FycmF5KHRleHQpKSB7XG5cdFx0XHR2YXIgeSA9IHBvc2l0aW9uLnk7XG5cdFx0XHR2YXIgc3BhY2luZyA9IDEuNSAqIGZvbnRTaXplO1xuXG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRleHQubGVuZ3RoOyArK2kpIHtcblx0XHRcdFx0Y3R4LmZpbGxUZXh0KHRleHRbaV0sIHBvc2l0aW9uLngsIHkpO1xuXHRcdFx0XHR5ICs9IHNwYWNpbmc7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGN0eC5maWxsVGV4dCh0ZXh0LCBwb3NpdGlvbi54LCBwb3NpdGlvbi55KTtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBhZGp1c3RQb2ludFBvc2l0aW9uRm9yTGFiZWxIZWlnaHQoYW5nbGUsIHRleHRTaXplLCBwb3NpdGlvbikge1xuXHRcdGlmIChhbmdsZSA9PT0gOTAgfHwgYW5nbGUgPT09IDI3MCkge1xuXHRcdFx0cG9zaXRpb24ueSAtPSAodGV4dFNpemUuaCAvIDIpO1xuXHRcdH0gZWxzZSBpZiAoYW5nbGUgPiAyNzAgfHwgYW5nbGUgPCA5MCkge1xuXHRcdFx0cG9zaXRpb24ueSAtPSB0ZXh0U2l6ZS5oO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIGRyYXdQb2ludExhYmVscyhzY2FsZSkge1xuXHRcdHZhciBjdHggPSBzY2FsZS5jdHg7XG5cdFx0dmFyIG9wdHMgPSBzY2FsZS5vcHRpb25zO1xuXHRcdHZhciBhbmdsZUxpbmVPcHRzID0gb3B0cy5hbmdsZUxpbmVzO1xuXHRcdHZhciBwb2ludExhYmVsT3B0cyA9IG9wdHMucG9pbnRMYWJlbHM7XG5cblx0XHRjdHgubGluZVdpZHRoID0gYW5nbGVMaW5lT3B0cy5saW5lV2lkdGg7XG5cdFx0Y3R4LnN0cm9rZVN0eWxlID0gYW5nbGVMaW5lT3B0cy5jb2xvcjtcblxuXHRcdHZhciBvdXRlckRpc3RhbmNlID0gc2NhbGUuZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUob3B0cy50aWNrcy5yZXZlcnNlID8gc2NhbGUubWluIDogc2NhbGUubWF4KTtcblxuXHRcdC8vIFBvaW50IExhYmVsIEZvbnRcblx0XHR2YXIgcGxGb250ID0gZ2V0UG9pbnRMYWJlbEZvbnRPcHRpb25zKHNjYWxlKTtcblxuXHRcdGN0eC50ZXh0QmFzZWxpbmUgPSAndG9wJztcblxuXHRcdGZvciAodmFyIGkgPSBnZXRWYWx1ZUNvdW50KHNjYWxlKSAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHRpZiAoYW5nbGVMaW5lT3B0cy5kaXNwbGF5KSB7XG5cdFx0XHRcdHZhciBvdXRlclBvc2l0aW9uID0gc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbihpLCBvdXRlckRpc3RhbmNlKTtcblx0XHRcdFx0Y3R4LmJlZ2luUGF0aCgpO1xuXHRcdFx0XHRjdHgubW92ZVRvKHNjYWxlLnhDZW50ZXIsIHNjYWxlLnlDZW50ZXIpO1xuXHRcdFx0XHRjdHgubGluZVRvKG91dGVyUG9zaXRpb24ueCwgb3V0ZXJQb3NpdGlvbi55KTtcblx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdFx0XHRjdHguY2xvc2VQYXRoKCk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChwb2ludExhYmVsT3B0cy5kaXNwbGF5KSB7XG5cdFx0XHRcdC8vIEV4dHJhIDNweCBvdXQgZm9yIHNvbWUgbGFiZWwgc3BhY2luZ1xuXHRcdFx0XHR2YXIgcG9pbnRMYWJlbFBvc2l0aW9uID0gc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbihpLCBvdXRlckRpc3RhbmNlICsgNSk7XG5cblx0XHRcdFx0Ly8gS2VlcCB0aGlzIGluIGxvb3Agc2luY2Ugd2UgbWF5IHN1cHBvcnQgYXJyYXkgcHJvcGVydGllcyBoZXJlXG5cdFx0XHRcdHZhciBwb2ludExhYmVsRm9udENvbG9yID0gaGVscGVycy52YWx1ZUF0SW5kZXhPckRlZmF1bHQocG9pbnRMYWJlbE9wdHMuZm9udENvbG9yLCBpLCBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Rm9udENvbG9yKTtcblx0XHRcdFx0Y3R4LmZvbnQgPSBwbEZvbnQuZm9udDtcblx0XHRcdFx0Y3R4LmZpbGxTdHlsZSA9IHBvaW50TGFiZWxGb250Q29sb3I7XG5cblx0XHRcdFx0dmFyIGFuZ2xlUmFkaWFucyA9IHNjYWxlLmdldEluZGV4QW5nbGUoaSk7XG5cdFx0XHRcdHZhciBhbmdsZSA9IGhlbHBlcnMudG9EZWdyZWVzKGFuZ2xlUmFkaWFucyk7XG5cdFx0XHRcdGN0eC50ZXh0QWxpZ24gPSBnZXRUZXh0QWxpZ25Gb3JBbmdsZShhbmdsZSk7XG5cdFx0XHRcdGFkanVzdFBvaW50UG9zaXRpb25Gb3JMYWJlbEhlaWdodChhbmdsZSwgc2NhbGUuX3BvaW50TGFiZWxTaXplc1tpXSwgcG9pbnRMYWJlbFBvc2l0aW9uKTtcblx0XHRcdFx0ZmlsbFRleHQoY3R4LCBzY2FsZS5wb2ludExhYmVsc1tpXSB8fCAnJywgcG9pbnRMYWJlbFBvc2l0aW9uLCBwbEZvbnQuc2l6ZSk7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0ZnVuY3Rpb24gZHJhd1JhZGl1c0xpbmUoc2NhbGUsIGdyaWRMaW5lT3B0cywgcmFkaXVzLCBpbmRleCkge1xuXHRcdHZhciBjdHggPSBzY2FsZS5jdHg7XG5cdFx0Y3R4LnN0cm9rZVN0eWxlID0gaGVscGVycy52YWx1ZUF0SW5kZXhPckRlZmF1bHQoZ3JpZExpbmVPcHRzLmNvbG9yLCBpbmRleCAtIDEpO1xuXHRcdGN0eC5saW5lV2lkdGggPSBoZWxwZXJzLnZhbHVlQXRJbmRleE9yRGVmYXVsdChncmlkTGluZU9wdHMubGluZVdpZHRoLCBpbmRleCAtIDEpO1xuXG5cdFx0aWYgKHNjYWxlLm9wdGlvbnMuZ3JpZExpbmVzLmNpcmN1bGFyKSB7XG5cdFx0XHQvLyBEcmF3IGNpcmN1bGFyIGFyY3MgYmV0d2VlbiB0aGUgcG9pbnRzXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRjdHguYXJjKHNjYWxlLnhDZW50ZXIsIHNjYWxlLnlDZW50ZXIsIHJhZGl1cywgMCwgTWF0aC5QSSAqIDIpO1xuXHRcdFx0Y3R4LmNsb3NlUGF0aCgpO1xuXHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHQvLyBEcmF3IHN0cmFpZ2h0IGxpbmVzIGNvbm5lY3RpbmcgZWFjaCBpbmRleFxuXHRcdFx0dmFyIHZhbHVlQ291bnQgPSBnZXRWYWx1ZUNvdW50KHNjYWxlKTtcblxuXHRcdFx0aWYgKHZhbHVlQ291bnQgPT09IDApIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHR2YXIgcG9pbnRQb3NpdGlvbiA9IHNjYWxlLmdldFBvaW50UG9zaXRpb24oMCwgcmFkaXVzKTtcblx0XHRcdGN0eC5tb3ZlVG8ocG9pbnRQb3NpdGlvbi54LCBwb2ludFBvc2l0aW9uLnkpO1xuXG5cdFx0XHRmb3IgKHZhciBpID0gMTsgaSA8IHZhbHVlQ291bnQ7IGkrKykge1xuXHRcdFx0XHRwb2ludFBvc2l0aW9uID0gc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbihpLCByYWRpdXMpO1xuXHRcdFx0XHRjdHgubGluZVRvKHBvaW50UG9zaXRpb24ueCwgcG9pbnRQb3NpdGlvbi55KTtcblx0XHRcdH1cblxuXHRcdFx0Y3R4LmNsb3NlUGF0aCgpO1xuXHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdH1cblx0fVxuXG5cdGZ1bmN0aW9uIG51bWJlck9yWmVybyhwYXJhbSkge1xuXHRcdHJldHVybiBoZWxwZXJzLmlzTnVtYmVyKHBhcmFtKSA/IHBhcmFtIDogMDtcblx0fVxuXG5cdHZhciBMaW5lYXJSYWRpYWxTY2FsZSA9IENoYXJ0LkxpbmVhclNjYWxlQmFzZS5leHRlbmQoe1xuXHRcdHNldERpbWVuc2lvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBvcHRzID0gbWUub3B0aW9ucztcblx0XHRcdHZhciB0aWNrT3B0cyA9IG9wdHMudGlja3M7XG5cdFx0XHQvLyBTZXQgdGhlIHVuY29uc3RyYWluZWQgZGltZW5zaW9uIGJlZm9yZSBsYWJlbCByb3RhdGlvblxuXHRcdFx0bWUud2lkdGggPSBtZS5tYXhXaWR0aDtcblx0XHRcdG1lLmhlaWdodCA9IG1lLm1heEhlaWdodDtcblx0XHRcdG1lLnhDZW50ZXIgPSBNYXRoLnJvdW5kKG1lLndpZHRoIC8gMik7XG5cdFx0XHRtZS55Q2VudGVyID0gTWF0aC5yb3VuZChtZS5oZWlnaHQgLyAyKTtcblxuXHRcdFx0dmFyIG1pblNpemUgPSBoZWxwZXJzLm1pbihbbWUuaGVpZ2h0LCBtZS53aWR0aF0pO1xuXHRcdFx0dmFyIHRpY2tGb250U2l6ZSA9IGhlbHBlcnMudmFsdWVPckRlZmF1bHQodGlja09wdHMuZm9udFNpemUsIGdsb2JhbERlZmF1bHRzLmRlZmF1bHRGb250U2l6ZSk7XG5cdFx0XHRtZS5kcmF3aW5nQXJlYSA9IG9wdHMuZGlzcGxheSA/IChtaW5TaXplIC8gMikgLSAodGlja0ZvbnRTaXplIC8gMiArIHRpY2tPcHRzLmJhY2tkcm9wUGFkZGluZ1kpIDogKG1pblNpemUgLyAyKTtcblx0XHR9LFxuXHRcdGRldGVybWluZURhdGFMaW1pdHM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdFx0dmFyIG1pbiA9IE51bWJlci5QT1NJVElWRV9JTkZJTklUWTtcblx0XHRcdHZhciBtYXggPSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFk7XG5cblx0XHRcdGhlbHBlcnMuZWFjaChjaGFydC5kYXRhLmRhdGFzZXRzLCBmdW5jdGlvbihkYXRhc2V0LCBkYXRhc2V0SW5kZXgpIHtcblx0XHRcdFx0aWYgKGNoYXJ0LmlzRGF0YXNldFZpc2libGUoZGF0YXNldEluZGV4KSkge1xuXHRcdFx0XHRcdHZhciBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoZGF0YXNldEluZGV4KTtcblxuXHRcdFx0XHRcdGhlbHBlcnMuZWFjaChkYXRhc2V0LmRhdGEsIGZ1bmN0aW9uKHJhd1ZhbHVlLCBpbmRleCkge1xuXHRcdFx0XHRcdFx0dmFyIHZhbHVlID0gK21lLmdldFJpZ2h0VmFsdWUocmF3VmFsdWUpO1xuXHRcdFx0XHRcdFx0aWYgKGlzTmFOKHZhbHVlKSB8fCBtZXRhLmRhdGFbaW5kZXhdLmhpZGRlbikge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm47XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdG1pbiA9IE1hdGgubWluKHZhbHVlLCBtaW4pO1xuXHRcdFx0XHRcdFx0bWF4ID0gTWF0aC5tYXgodmFsdWUsIG1heCk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRtZS5taW4gPSAobWluID09PSBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFkgPyAwIDogbWluKTtcblx0XHRcdG1lLm1heCA9IChtYXggPT09IE51bWJlci5ORUdBVElWRV9JTkZJTklUWSA/IDAgOiBtYXgpO1xuXG5cdFx0XHQvLyBDb21tb24gYmFzZSBpbXBsZW1lbnRhdGlvbiB0byBoYW5kbGUgdGlja3MubWluLCB0aWNrcy5tYXgsIHRpY2tzLmJlZ2luQXRaZXJvXG5cdFx0XHRtZS5oYW5kbGVUaWNrUmFuZ2VPcHRpb25zKCk7XG5cdFx0fSxcblx0XHRnZXRUaWNrTGltaXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHRpY2tPcHRzID0gdGhpcy5vcHRpb25zLnRpY2tzO1xuXHRcdFx0dmFyIHRpY2tGb250U2l6ZSA9IGhlbHBlcnMudmFsdWVPckRlZmF1bHQodGlja09wdHMuZm9udFNpemUsIGdsb2JhbERlZmF1bHRzLmRlZmF1bHRGb250U2l6ZSk7XG5cdFx0XHRyZXR1cm4gTWF0aC5taW4odGlja09wdHMubWF4VGlja3NMaW1pdCA/IHRpY2tPcHRzLm1heFRpY2tzTGltaXQgOiAxMSwgTWF0aC5jZWlsKHRoaXMuZHJhd2luZ0FyZWEgLyAoMS41ICogdGlja0ZvbnRTaXplKSkpO1xuXHRcdH0sXG5cdFx0Y29udmVydFRpY2tzVG9MYWJlbHM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblxuXHRcdFx0Q2hhcnQuTGluZWFyU2NhbGVCYXNlLnByb3RvdHlwZS5jb252ZXJ0VGlja3NUb0xhYmVscy5jYWxsKG1lKTtcblxuXHRcdFx0Ly8gUG9pbnQgbGFiZWxzXG5cdFx0XHRtZS5wb2ludExhYmVscyA9IG1lLmNoYXJ0LmRhdGEubGFiZWxzLm1hcChtZS5vcHRpb25zLnBvaW50TGFiZWxzLmNhbGxiYWNrLCBtZSk7XG5cdFx0fSxcblx0XHRnZXRMYWJlbEZvckluZGV4OiBmdW5jdGlvbihpbmRleCwgZGF0YXNldEluZGV4KSB7XG5cdFx0XHRyZXR1cm4gK3RoaXMuZ2V0UmlnaHRWYWx1ZSh0aGlzLmNoYXJ0LmRhdGEuZGF0YXNldHNbZGF0YXNldEluZGV4XS5kYXRhW2luZGV4XSk7XG5cdFx0fSxcblx0XHRmaXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKHRoaXMub3B0aW9ucy5wb2ludExhYmVscy5kaXNwbGF5KSB7XG5cdFx0XHRcdGZpdFdpdGhQb2ludExhYmVscyh0aGlzKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZpdCh0aGlzKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdC8qKlxuXHRcdCAqIFNldCByYWRpdXMgcmVkdWN0aW9ucyBhbmQgZGV0ZXJtaW5lIG5ldyByYWRpdXMgYW5kIGNlbnRlciBwb2ludFxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0c2V0UmVkdWN0aW9uczogZnVuY3Rpb24obGFyZ2VzdFBvc3NpYmxlUmFkaXVzLCBmdXJ0aGVzdExpbWl0cywgZnVydGhlc3RBbmdsZXMpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgcmFkaXVzUmVkdWN0aW9uTGVmdCA9IGZ1cnRoZXN0TGltaXRzLmwgLyBNYXRoLnNpbihmdXJ0aGVzdEFuZ2xlcy5sKTtcblx0XHRcdHZhciByYWRpdXNSZWR1Y3Rpb25SaWdodCA9IE1hdGgubWF4KGZ1cnRoZXN0TGltaXRzLnIgLSBtZS53aWR0aCwgMCkgLyBNYXRoLnNpbihmdXJ0aGVzdEFuZ2xlcy5yKTtcblx0XHRcdHZhciByYWRpdXNSZWR1Y3Rpb25Ub3AgPSAtZnVydGhlc3RMaW1pdHMudCAvIE1hdGguY29zKGZ1cnRoZXN0QW5nbGVzLnQpO1xuXHRcdFx0dmFyIHJhZGl1c1JlZHVjdGlvbkJvdHRvbSA9IC1NYXRoLm1heChmdXJ0aGVzdExpbWl0cy5iIC0gbWUuaGVpZ2h0LCAwKSAvIE1hdGguY29zKGZ1cnRoZXN0QW5nbGVzLmIpO1xuXG5cdFx0XHRyYWRpdXNSZWR1Y3Rpb25MZWZ0ID0gbnVtYmVyT3JaZXJvKHJhZGl1c1JlZHVjdGlvbkxlZnQpO1xuXHRcdFx0cmFkaXVzUmVkdWN0aW9uUmlnaHQgPSBudW1iZXJPclplcm8ocmFkaXVzUmVkdWN0aW9uUmlnaHQpO1xuXHRcdFx0cmFkaXVzUmVkdWN0aW9uVG9wID0gbnVtYmVyT3JaZXJvKHJhZGl1c1JlZHVjdGlvblRvcCk7XG5cdFx0XHRyYWRpdXNSZWR1Y3Rpb25Cb3R0b20gPSBudW1iZXJPclplcm8ocmFkaXVzUmVkdWN0aW9uQm90dG9tKTtcblxuXHRcdFx0bWUuZHJhd2luZ0FyZWEgPSBNYXRoLm1pbihcblx0XHRcdFx0TWF0aC5yb3VuZChsYXJnZXN0UG9zc2libGVSYWRpdXMgLSAocmFkaXVzUmVkdWN0aW9uTGVmdCArIHJhZGl1c1JlZHVjdGlvblJpZ2h0KSAvIDIpLFxuXHRcdFx0XHRNYXRoLnJvdW5kKGxhcmdlc3RQb3NzaWJsZVJhZGl1cyAtIChyYWRpdXNSZWR1Y3Rpb25Ub3AgKyByYWRpdXNSZWR1Y3Rpb25Cb3R0b20pIC8gMikpO1xuXHRcdFx0bWUuc2V0Q2VudGVyUG9pbnQocmFkaXVzUmVkdWN0aW9uTGVmdCwgcmFkaXVzUmVkdWN0aW9uUmlnaHQsIHJhZGl1c1JlZHVjdGlvblRvcCwgcmFkaXVzUmVkdWN0aW9uQm90dG9tKTtcblx0XHR9LFxuXHRcdHNldENlbnRlclBvaW50OiBmdW5jdGlvbihsZWZ0TW92ZW1lbnQsIHJpZ2h0TW92ZW1lbnQsIHRvcE1vdmVtZW50LCBib3R0b21Nb3ZlbWVudCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBtYXhSaWdodCA9IG1lLndpZHRoIC0gcmlnaHRNb3ZlbWVudCAtIG1lLmRyYXdpbmdBcmVhO1xuXHRcdFx0dmFyIG1heExlZnQgPSBsZWZ0TW92ZW1lbnQgKyBtZS5kcmF3aW5nQXJlYTtcblx0XHRcdHZhciBtYXhUb3AgPSB0b3BNb3ZlbWVudCArIG1lLmRyYXdpbmdBcmVhO1xuXHRcdFx0dmFyIG1heEJvdHRvbSA9IG1lLmhlaWdodCAtIGJvdHRvbU1vdmVtZW50IC0gbWUuZHJhd2luZ0FyZWE7XG5cblx0XHRcdG1lLnhDZW50ZXIgPSBNYXRoLnJvdW5kKCgobWF4TGVmdCArIG1heFJpZ2h0KSAvIDIpICsgbWUubGVmdCk7XG5cdFx0XHRtZS55Q2VudGVyID0gTWF0aC5yb3VuZCgoKG1heFRvcCArIG1heEJvdHRvbSkgLyAyKSArIG1lLnRvcCk7XG5cdFx0fSxcblxuXHRcdGdldEluZGV4QW5nbGU6IGZ1bmN0aW9uKGluZGV4KSB7XG5cdFx0XHR2YXIgYW5nbGVNdWx0aXBsaWVyID0gKE1hdGguUEkgKiAyKSAvIGdldFZhbHVlQ291bnQodGhpcyk7XG5cdFx0XHR2YXIgc3RhcnRBbmdsZSA9IHRoaXMuY2hhcnQub3B0aW9ucyAmJiB0aGlzLmNoYXJ0Lm9wdGlvbnMuc3RhcnRBbmdsZSA/XG5cdFx0XHRcdHRoaXMuY2hhcnQub3B0aW9ucy5zdGFydEFuZ2xlIDpcblx0XHRcdFx0MDtcblxuXHRcdFx0dmFyIHN0YXJ0QW5nbGVSYWRpYW5zID0gc3RhcnRBbmdsZSAqIE1hdGguUEkgKiAyIC8gMzYwO1xuXG5cdFx0XHQvLyBTdGFydCBmcm9tIHRoZSB0b3AgaW5zdGVhZCBvZiByaWdodCwgc28gcmVtb3ZlIGEgcXVhcnRlciBvZiB0aGUgY2lyY2xlXG5cdFx0XHRyZXR1cm4gaW5kZXggKiBhbmdsZU11bHRpcGxpZXIgKyBzdGFydEFuZ2xlUmFkaWFucztcblx0XHR9LFxuXHRcdGdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlOiBmdW5jdGlvbih2YWx1ZSkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblxuXHRcdFx0aWYgKHZhbHVlID09PSBudWxsKSB7XG5cdFx0XHRcdHJldHVybiAwOyAvLyBudWxsIGFsd2F5cyBpbiBjZW50ZXJcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGFrZSBpbnRvIGFjY291bnQgaGFsZiBmb250IHNpemUgKyB0aGUgeVBhZGRpbmcgb2YgdGhlIHRvcCB2YWx1ZVxuXHRcdFx0dmFyIHNjYWxpbmdGYWN0b3IgPSBtZS5kcmF3aW5nQXJlYSAvIChtZS5tYXggLSBtZS5taW4pO1xuXHRcdFx0aWYgKG1lLm9wdGlvbnMudGlja3MucmV2ZXJzZSkge1xuXHRcdFx0XHRyZXR1cm4gKG1lLm1heCAtIHZhbHVlKSAqIHNjYWxpbmdGYWN0b3I7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gKHZhbHVlIC0gbWUubWluKSAqIHNjYWxpbmdGYWN0b3I7XG5cdFx0fSxcblx0XHRnZXRQb2ludFBvc2l0aW9uOiBmdW5jdGlvbihpbmRleCwgZGlzdGFuY2VGcm9tQ2VudGVyKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIHRoaXNBbmdsZSA9IG1lLmdldEluZGV4QW5nbGUoaW5kZXgpIC0gKE1hdGguUEkgLyAyKTtcblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHg6IE1hdGgucm91bmQoTWF0aC5jb3ModGhpc0FuZ2xlKSAqIGRpc3RhbmNlRnJvbUNlbnRlcikgKyBtZS54Q2VudGVyLFxuXHRcdFx0XHR5OiBNYXRoLnJvdW5kKE1hdGguc2luKHRoaXNBbmdsZSkgKiBkaXN0YW5jZUZyb21DZW50ZXIpICsgbWUueUNlbnRlclxuXHRcdFx0fTtcblx0XHR9LFxuXHRcdGdldFBvaW50UG9zaXRpb25Gb3JWYWx1ZTogZnVuY3Rpb24oaW5kZXgsIHZhbHVlKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5nZXRQb2ludFBvc2l0aW9uKGluZGV4LCB0aGlzLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKHZhbHVlKSk7XG5cdFx0fSxcblxuXHRcdGdldEJhc2VQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIG1pbiA9IG1lLm1pbjtcblx0XHRcdHZhciBtYXggPSBtZS5tYXg7XG5cblx0XHRcdHJldHVybiBtZS5nZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUoMCxcblx0XHRcdFx0bWUuYmVnaW5BdFplcm8gPyAwIDpcblx0XHRcdFx0bWluIDwgMCAmJiBtYXggPCAwID8gbWF4IDpcblx0XHRcdFx0bWluID4gMCAmJiBtYXggPiAwID8gbWluIDpcblx0XHRcdFx0MCk7XG5cdFx0fSxcblxuXHRcdGRyYXc6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBvcHRzID0gbWUub3B0aW9ucztcblx0XHRcdHZhciBncmlkTGluZU9wdHMgPSBvcHRzLmdyaWRMaW5lcztcblx0XHRcdHZhciB0aWNrT3B0cyA9IG9wdHMudGlja3M7XG5cdFx0XHR2YXIgdmFsdWVPckRlZmF1bHQgPSBoZWxwZXJzLnZhbHVlT3JEZWZhdWx0O1xuXG5cdFx0XHRpZiAob3B0cy5kaXNwbGF5KSB7XG5cdFx0XHRcdHZhciBjdHggPSBtZS5jdHg7XG5cdFx0XHRcdHZhciBzdGFydEFuZ2xlID0gdGhpcy5nZXRJbmRleEFuZ2xlKDApO1xuXG5cdFx0XHRcdC8vIFRpY2sgRm9udFxuXHRcdFx0XHR2YXIgdGlja0ZvbnRTaXplID0gdmFsdWVPckRlZmF1bHQodGlja09wdHMuZm9udFNpemUsIGdsb2JhbERlZmF1bHRzLmRlZmF1bHRGb250U2l6ZSk7XG5cdFx0XHRcdHZhciB0aWNrRm9udFN0eWxlID0gdmFsdWVPckRlZmF1bHQodGlja09wdHMuZm9udFN0eWxlLCBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Rm9udFN0eWxlKTtcblx0XHRcdFx0dmFyIHRpY2tGb250RmFtaWx5ID0gdmFsdWVPckRlZmF1bHQodGlja09wdHMuZm9udEZhbWlseSwgZ2xvYmFsRGVmYXVsdHMuZGVmYXVsdEZvbnRGYW1pbHkpO1xuXHRcdFx0XHR2YXIgdGlja0xhYmVsRm9udCA9IGhlbHBlcnMuZm9udFN0cmluZyh0aWNrRm9udFNpemUsIHRpY2tGb250U3R5bGUsIHRpY2tGb250RmFtaWx5KTtcblxuXHRcdFx0XHRoZWxwZXJzLmVhY2gobWUudGlja3MsIGZ1bmN0aW9uKGxhYmVsLCBpbmRleCkge1xuXHRcdFx0XHRcdC8vIERvbid0IGRyYXcgYSBjZW50cmUgdmFsdWUgKGlmIGl0IGlzIG1pbmltdW0pXG5cdFx0XHRcdFx0aWYgKGluZGV4ID4gMCB8fCB0aWNrT3B0cy5yZXZlcnNlKSB7XG5cdFx0XHRcdFx0XHR2YXIgeUNlbnRlck9mZnNldCA9IG1lLmdldERpc3RhbmNlRnJvbUNlbnRlckZvclZhbHVlKG1lLnRpY2tzQXNOdW1iZXJzW2luZGV4XSk7XG5cblx0XHRcdFx0XHRcdC8vIERyYXcgY2lyY3VsYXIgbGluZXMgYXJvdW5kIHRoZSBzY2FsZVxuXHRcdFx0XHRcdFx0aWYgKGdyaWRMaW5lT3B0cy5kaXNwbGF5ICYmIGluZGV4ICE9PSAwKSB7XG5cdFx0XHRcdFx0XHRcdGRyYXdSYWRpdXNMaW5lKG1lLCBncmlkTGluZU9wdHMsIHlDZW50ZXJPZmZzZXQsIGluZGV4KTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKHRpY2tPcHRzLmRpc3BsYXkpIHtcblx0XHRcdFx0XHRcdFx0dmFyIHRpY2tGb250Q29sb3IgPSB2YWx1ZU9yRGVmYXVsdCh0aWNrT3B0cy5mb250Q29sb3IsIGdsb2JhbERlZmF1bHRzLmRlZmF1bHRGb250Q29sb3IpO1xuXHRcdFx0XHRcdFx0XHRjdHguZm9udCA9IHRpY2tMYWJlbEZvbnQ7XG5cblx0XHRcdFx0XHRcdFx0Y3R4LnNhdmUoKTtcblx0XHRcdFx0XHRcdFx0Y3R4LnRyYW5zbGF0ZShtZS54Q2VudGVyLCBtZS55Q2VudGVyKTtcblx0XHRcdFx0XHRcdFx0Y3R4LnJvdGF0ZShzdGFydEFuZ2xlKTtcblxuXHRcdFx0XHRcdFx0XHRpZiAodGlja09wdHMuc2hvd0xhYmVsQmFja2Ryb3ApIHtcblx0XHRcdFx0XHRcdFx0XHR2YXIgbGFiZWxXaWR0aCA9IGN0eC5tZWFzdXJlVGV4dChsYWJlbCkud2lkdGg7XG5cdFx0XHRcdFx0XHRcdFx0Y3R4LmZpbGxTdHlsZSA9IHRpY2tPcHRzLmJhY2tkcm9wQ29sb3I7XG5cdFx0XHRcdFx0XHRcdFx0Y3R4LmZpbGxSZWN0KFxuXHRcdFx0XHRcdFx0XHRcdFx0LWxhYmVsV2lkdGggLyAyIC0gdGlja09wdHMuYmFja2Ryb3BQYWRkaW5nWCxcblx0XHRcdFx0XHRcdFx0XHRcdC15Q2VudGVyT2Zmc2V0IC0gdGlja0ZvbnRTaXplIC8gMiAtIHRpY2tPcHRzLmJhY2tkcm9wUGFkZGluZ1ksXG5cdFx0XHRcdFx0XHRcdFx0XHRsYWJlbFdpZHRoICsgdGlja09wdHMuYmFja2Ryb3BQYWRkaW5nWCAqIDIsXG5cdFx0XHRcdFx0XHRcdFx0XHR0aWNrRm9udFNpemUgKyB0aWNrT3B0cy5iYWNrZHJvcFBhZGRpbmdZICogMlxuXHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRjdHgudGV4dEFsaWduID0gJ2NlbnRlcic7XG5cdFx0XHRcdFx0XHRcdGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcblx0XHRcdFx0XHRcdFx0Y3R4LmZpbGxTdHlsZSA9IHRpY2tGb250Q29sb3I7XG5cdFx0XHRcdFx0XHRcdGN0eC5maWxsVGV4dChsYWJlbCwgMCwgLXlDZW50ZXJPZmZzZXQpO1xuXHRcdFx0XHRcdFx0XHRjdHgucmVzdG9yZSgpO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0aWYgKG9wdHMuYW5nbGVMaW5lcy5kaXNwbGF5IHx8IG9wdHMucG9pbnRMYWJlbHMuZGlzcGxheSkge1xuXHRcdFx0XHRcdGRyYXdQb2ludExhYmVscyhtZSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0pO1xuXG5cdHNjYWxlU2VydmljZS5yZWdpc3RlclNjYWxlVHlwZSgncmFkaWFsTGluZWFyJywgTGluZWFyUmFkaWFsU2NhbGUsIGRlZmF1bHRDb25maWcpO1xufTtcbiIsIi8vISBtb21lbnQuanNcblxuOyhmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gICAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gbW9kdWxlLmV4cG9ydHMgPSBmYWN0b3J5KCkgOlxuICAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShmYWN0b3J5KSA6XG4gICAgZ2xvYmFsLm1vbWVudCA9IGZhY3RvcnkoKVxufSh0aGlzLCAoZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbiAgICB2YXIgaG9va0NhbGxiYWNrO1xuXG4gICAgZnVuY3Rpb24gaG9va3MgKCkge1xuICAgICAgICByZXR1cm4gaG9va0NhbGxiYWNrLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgLy8gVGhpcyBpcyBkb25lIHRvIHJlZ2lzdGVyIHRoZSBtZXRob2QgY2FsbGVkIHdpdGggbW9tZW50KClcbiAgICAvLyB3aXRob3V0IGNyZWF0aW5nIGNpcmN1bGFyIGRlcGVuZGVuY2llcy5cbiAgICBmdW5jdGlvbiBzZXRIb29rQ2FsbGJhY2sgKGNhbGxiYWNrKSB7XG4gICAgICAgIGhvb2tDYWxsYmFjayA9IGNhbGxiYWNrO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQXJyYXkoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0IGluc3RhbmNlb2YgQXJyYXkgfHwgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGlucHV0KSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc09iamVjdChpbnB1dCkge1xuICAgICAgICAvLyBJRTggd2lsbCB0cmVhdCB1bmRlZmluZWQgYW5kIG51bGwgYXMgb2JqZWN0IGlmIGl0IHdhc24ndCBmb3JcbiAgICAgICAgLy8gaW5wdXQgIT0gbnVsbFxuICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCAmJiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBPYmplY3RdJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc09iamVjdEVtcHR5KG9iaikge1xuICAgICAgICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMpIHtcbiAgICAgICAgICAgIHJldHVybiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMob2JqKS5sZW5ndGggPT09IDApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGs7XG4gICAgICAgICAgICBmb3IgKGsgaW4gb2JqKSB7XG4gICAgICAgICAgICAgICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1VuZGVmaW5lZChpbnB1dCkge1xuICAgICAgICByZXR1cm4gaW5wdXQgPT09IHZvaWQgMDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc051bWJlcihpbnB1dCkge1xuICAgICAgICByZXR1cm4gdHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJyB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBOdW1iZXJdJztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc0RhdGUoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGlucHV0IGluc3RhbmNlb2YgRGF0ZSB8fCBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoaW5wdXQpID09PSAnW29iamVjdCBEYXRlXSc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFwKGFyciwgZm4pIHtcbiAgICAgICAgdmFyIHJlcyA9IFtdLCBpO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICByZXMucHVzaChmbihhcnJbaV0sIGkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmVzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhc093blByb3AoYSwgYikge1xuICAgICAgICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGEsIGIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGV4dGVuZChhLCBiKSB7XG4gICAgICAgIGZvciAodmFyIGkgaW4gYikge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AoYiwgaSkpIHtcbiAgICAgICAgICAgICAgICBhW2ldID0gYltpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNPd25Qcm9wKGIsICd0b1N0cmluZycpKSB7XG4gICAgICAgICAgICBhLnRvU3RyaW5nID0gYi50b1N0cmluZztcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChoYXNPd25Qcm9wKGIsICd2YWx1ZU9mJykpIHtcbiAgICAgICAgICAgIGEudmFsdWVPZiA9IGIudmFsdWVPZjtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBhO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZVVUQyAoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsT3JVVEMoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QsIHRydWUpLnV0YygpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlZmF1bHRQYXJzaW5nRmxhZ3MoKSB7XG4gICAgICAgIC8vIFdlIG5lZWQgdG8gZGVlcCBjbG9uZSB0aGlzIG9iamVjdC5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGVtcHR5ICAgICAgICAgICA6IGZhbHNlLFxuICAgICAgICAgICAgdW51c2VkVG9rZW5zICAgIDogW10sXG4gICAgICAgICAgICB1bnVzZWRJbnB1dCAgICAgOiBbXSxcbiAgICAgICAgICAgIG92ZXJmbG93ICAgICAgICA6IC0yLFxuICAgICAgICAgICAgY2hhcnNMZWZ0T3ZlciAgIDogMCxcbiAgICAgICAgICAgIG51bGxJbnB1dCAgICAgICA6IGZhbHNlLFxuICAgICAgICAgICAgaW52YWxpZE1vbnRoICAgIDogbnVsbCxcbiAgICAgICAgICAgIGludmFsaWRGb3JtYXQgICA6IGZhbHNlLFxuICAgICAgICAgICAgdXNlckludmFsaWRhdGVkIDogZmFsc2UsXG4gICAgICAgICAgICBpc28gICAgICAgICAgICAgOiBmYWxzZSxcbiAgICAgICAgICAgIHBhcnNlZERhdGVQYXJ0cyA6IFtdLFxuICAgICAgICAgICAgbWVyaWRpZW0gICAgICAgIDogbnVsbCxcbiAgICAgICAgICAgIHJmYzI4MjIgICAgICAgICA6IGZhbHNlLFxuICAgICAgICAgICAgd2Vla2RheU1pc21hdGNoIDogZmFsc2VcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQYXJzaW5nRmxhZ3MobSkge1xuICAgICAgICBpZiAobS5fcGYgPT0gbnVsbCkge1xuICAgICAgICAgICAgbS5fcGYgPSBkZWZhdWx0UGFyc2luZ0ZsYWdzKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG0uX3BmO1xuICAgIH1cblxuICAgIHZhciBzb21lO1xuICAgIGlmIChBcnJheS5wcm90b3R5cGUuc29tZSkge1xuICAgICAgICBzb21lID0gQXJyYXkucHJvdG90eXBlLnNvbWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgc29tZSA9IGZ1bmN0aW9uIChmdW4pIHtcbiAgICAgICAgICAgIHZhciB0ID0gT2JqZWN0KHRoaXMpO1xuICAgICAgICAgICAgdmFyIGxlbiA9IHQubGVuZ3RoID4+PiAwO1xuXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGkgaW4gdCAmJiBmdW4uY2FsbCh0aGlzLCB0W2ldLCBpLCB0KSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1ZhbGlkKG0pIHtcbiAgICAgICAgaWYgKG0uX2lzVmFsaWQgPT0gbnVsbCkge1xuICAgICAgICAgICAgdmFyIGZsYWdzID0gZ2V0UGFyc2luZ0ZsYWdzKG0pO1xuICAgICAgICAgICAgdmFyIHBhcnNlZFBhcnRzID0gc29tZS5jYWxsKGZsYWdzLnBhcnNlZERhdGVQYXJ0cywgZnVuY3Rpb24gKGkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaSAhPSBudWxsO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB2YXIgaXNOb3dWYWxpZCA9ICFpc05hTihtLl9kLmdldFRpbWUoKSkgJiZcbiAgICAgICAgICAgICAgICBmbGFncy5vdmVyZmxvdyA8IDAgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MuZW1wdHkgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MuaW52YWxpZE1vbnRoICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLmludmFsaWRXZWVrZGF5ICYmXG4gICAgICAgICAgICAgICAgIWZsYWdzLndlZWtkYXlNaXNtYXRjaCAmJlxuICAgICAgICAgICAgICAgICFmbGFncy5udWxsSW5wdXQgJiZcbiAgICAgICAgICAgICAgICAhZmxhZ3MuaW52YWxpZEZvcm1hdCAmJlxuICAgICAgICAgICAgICAgICFmbGFncy51c2VySW52YWxpZGF0ZWQgJiZcbiAgICAgICAgICAgICAgICAoIWZsYWdzLm1lcmlkaWVtIHx8IChmbGFncy5tZXJpZGllbSAmJiBwYXJzZWRQYXJ0cykpO1xuXG4gICAgICAgICAgICBpZiAobS5fc3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgaXNOb3dWYWxpZCA9IGlzTm93VmFsaWQgJiZcbiAgICAgICAgICAgICAgICAgICAgZmxhZ3MuY2hhcnNMZWZ0T3ZlciA9PT0gMCAmJlxuICAgICAgICAgICAgICAgICAgICBmbGFncy51bnVzZWRUb2tlbnMubGVuZ3RoID09PSAwICYmXG4gICAgICAgICAgICAgICAgICAgIGZsYWdzLmJpZ0hvdXIgPT09IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKE9iamVjdC5pc0Zyb3plbiA9PSBudWxsIHx8ICFPYmplY3QuaXNGcm96ZW4obSkpIHtcbiAgICAgICAgICAgICAgICBtLl9pc1ZhbGlkID0gaXNOb3dWYWxpZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBpc05vd1ZhbGlkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtLl9pc1ZhbGlkO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUludmFsaWQgKGZsYWdzKSB7XG4gICAgICAgIHZhciBtID0gY3JlYXRlVVRDKE5hTik7XG4gICAgICAgIGlmIChmbGFncyAhPSBudWxsKSB7XG4gICAgICAgICAgICBleHRlbmQoZ2V0UGFyc2luZ0ZsYWdzKG0pLCBmbGFncyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MobSkudXNlckludmFsaWRhdGVkID0gdHJ1ZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBtO1xuICAgIH1cblxuICAgIC8vIFBsdWdpbnMgdGhhdCBhZGQgcHJvcGVydGllcyBzaG91bGQgYWxzbyBhZGQgdGhlIGtleSBoZXJlIChudWxsIHZhbHVlKSxcbiAgICAvLyBzbyB3ZSBjYW4gcHJvcGVybHkgY2xvbmUgb3Vyc2VsdmVzLlxuICAgIHZhciBtb21lbnRQcm9wZXJ0aWVzID0gaG9va3MubW9tZW50UHJvcGVydGllcyA9IFtdO1xuXG4gICAgZnVuY3Rpb24gY29weUNvbmZpZyh0bywgZnJvbSkge1xuICAgICAgICB2YXIgaSwgcHJvcCwgdmFsO1xuXG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5faXNBTW9tZW50T2JqZWN0KSkge1xuICAgICAgICAgICAgdG8uX2lzQU1vbWVudE9iamVjdCA9IGZyb20uX2lzQU1vbWVudE9iamVjdDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2kpKSB7XG4gICAgICAgICAgICB0by5faSA9IGZyb20uX2k7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9mKSkge1xuICAgICAgICAgICAgdG8uX2YgPSBmcm9tLl9mO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5fbCkpIHtcbiAgICAgICAgICAgIHRvLl9sID0gZnJvbS5fbDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX3N0cmljdCkpIHtcbiAgICAgICAgICAgIHRvLl9zdHJpY3QgPSBmcm9tLl9zdHJpY3Q7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl90em0pKSB7XG4gICAgICAgICAgICB0by5fdHptID0gZnJvbS5fdHptO1xuICAgICAgICB9XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQoZnJvbS5faXNVVEMpKSB7XG4gICAgICAgICAgICB0by5faXNVVEMgPSBmcm9tLl9pc1VUQztcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX29mZnNldCkpIHtcbiAgICAgICAgICAgIHRvLl9vZmZzZXQgPSBmcm9tLl9vZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFpc1VuZGVmaW5lZChmcm9tLl9wZikpIHtcbiAgICAgICAgICAgIHRvLl9wZiA9IGdldFBhcnNpbmdGbGFncyhmcm9tKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzVW5kZWZpbmVkKGZyb20uX2xvY2FsZSkpIHtcbiAgICAgICAgICAgIHRvLl9sb2NhbGUgPSBmcm9tLl9sb2NhbGU7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobW9tZW50UHJvcGVydGllcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgbW9tZW50UHJvcGVydGllcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHByb3AgPSBtb21lbnRQcm9wZXJ0aWVzW2ldO1xuICAgICAgICAgICAgICAgIHZhbCA9IGZyb21bcHJvcF07XG4gICAgICAgICAgICAgICAgaWYgKCFpc1VuZGVmaW5lZCh2YWwpKSB7XG4gICAgICAgICAgICAgICAgICAgIHRvW3Byb3BdID0gdmFsO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0bztcbiAgICB9XG5cbiAgICB2YXIgdXBkYXRlSW5Qcm9ncmVzcyA9IGZhbHNlO1xuXG4gICAgLy8gTW9tZW50IHByb3RvdHlwZSBvYmplY3RcbiAgICBmdW5jdGlvbiBNb21lbnQoY29uZmlnKSB7XG4gICAgICAgIGNvcHlDb25maWcodGhpcywgY29uZmlnKTtcbiAgICAgICAgdGhpcy5fZCA9IG5ldyBEYXRlKGNvbmZpZy5fZCAhPSBudWxsID8gY29uZmlnLl9kLmdldFRpbWUoKSA6IE5hTik7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHRoaXMuX2QgPSBuZXcgRGF0ZShOYU4pO1xuICAgICAgICB9XG4gICAgICAgIC8vIFByZXZlbnQgaW5maW5pdGUgbG9vcCBpbiBjYXNlIHVwZGF0ZU9mZnNldCBjcmVhdGVzIG5ldyBtb21lbnRcbiAgICAgICAgLy8gb2JqZWN0cy5cbiAgICAgICAgaWYgKHVwZGF0ZUluUHJvZ3Jlc3MgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICB1cGRhdGVJblByb2dyZXNzID0gdHJ1ZTtcbiAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzKTtcbiAgICAgICAgICAgIHVwZGF0ZUluUHJvZ3Jlc3MgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTW9tZW50IChvYmopIHtcbiAgICAgICAgcmV0dXJuIG9iaiBpbnN0YW5jZW9mIE1vbWVudCB8fCAob2JqICE9IG51bGwgJiYgb2JqLl9pc0FNb21lbnRPYmplY3QgIT0gbnVsbCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWJzRmxvb3IgKG51bWJlcikge1xuICAgICAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICAgICAgLy8gLTAgLT4gMFxuICAgICAgICAgICAgcmV0dXJuIE1hdGguY2VpbChudW1iZXIpIHx8IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5mbG9vcihudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9JbnQoYXJndW1lbnRGb3JDb2VyY2lvbikge1xuICAgICAgICB2YXIgY29lcmNlZE51bWJlciA9ICthcmd1bWVudEZvckNvZXJjaW9uLFxuICAgICAgICAgICAgdmFsdWUgPSAwO1xuXG4gICAgICAgIGlmIChjb2VyY2VkTnVtYmVyICE9PSAwICYmIGlzRmluaXRlKGNvZXJjZWROdW1iZXIpKSB7XG4gICAgICAgICAgICB2YWx1ZSA9IGFic0Zsb29yKGNvZXJjZWROdW1iZXIpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cblxuICAgIC8vIGNvbXBhcmUgdHdvIGFycmF5cywgcmV0dXJuIHRoZSBudW1iZXIgb2YgZGlmZmVyZW5jZXNcbiAgICBmdW5jdGlvbiBjb21wYXJlQXJyYXlzKGFycmF5MSwgYXJyYXkyLCBkb250Q29udmVydCkge1xuICAgICAgICB2YXIgbGVuID0gTWF0aC5taW4oYXJyYXkxLmxlbmd0aCwgYXJyYXkyLmxlbmd0aCksXG4gICAgICAgICAgICBsZW5ndGhEaWZmID0gTWF0aC5hYnMoYXJyYXkxLmxlbmd0aCAtIGFycmF5Mi5sZW5ndGgpLFxuICAgICAgICAgICAgZGlmZnMgPSAwLFxuICAgICAgICAgICAgaTtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoKGRvbnRDb252ZXJ0ICYmIGFycmF5MVtpXSAhPT0gYXJyYXkyW2ldKSB8fFxuICAgICAgICAgICAgICAgICghZG9udENvbnZlcnQgJiYgdG9JbnQoYXJyYXkxW2ldKSAhPT0gdG9JbnQoYXJyYXkyW2ldKSkpIHtcbiAgICAgICAgICAgICAgICBkaWZmcysrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkaWZmcyArIGxlbmd0aERpZmY7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Fybihtc2cpIHtcbiAgICAgICAgaWYgKGhvb2tzLnN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyA9PT0gZmFsc2UgJiZcbiAgICAgICAgICAgICAgICAodHlwZW9mIGNvbnNvbGUgIT09ICAndW5kZWZpbmVkJykgJiYgY29uc29sZS53YXJuKSB7XG4gICAgICAgICAgICBjb25zb2xlLndhcm4oJ0RlcHJlY2F0aW9uIHdhcm5pbmc6ICcgKyBtc2cpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGVwcmVjYXRlKG1zZywgZm4pIHtcbiAgICAgICAgdmFyIGZpcnN0VGltZSA9IHRydWU7XG5cbiAgICAgICAgcmV0dXJuIGV4dGVuZChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoaG9va3MuZGVwcmVjYXRpb25IYW5kbGVyICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBob29rcy5kZXByZWNhdGlvbkhhbmRsZXIobnVsbCwgbXNnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChmaXJzdFRpbWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgYXJncyA9IFtdO1xuICAgICAgICAgICAgICAgIHZhciBhcmc7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgYXJnID0gJyc7XG4gICAgICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJndW1lbnRzW2ldID09PSAnb2JqZWN0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnICs9ICdcXG5bJyArIGkgKyAnXSAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yICh2YXIga2V5IGluIGFyZ3VtZW50c1swXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFyZyArPSBrZXkgKyAnOiAnICsgYXJndW1lbnRzWzBdW2tleV0gKyAnLCAnO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJnLnNsaWNlKDAsIC0yKTsgLy8gUmVtb3ZlIHRyYWlsaW5nIGNvbW1hIGFuZCBzcGFjZVxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgYXJnID0gYXJndW1lbnRzW2ldO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGFyZ3MucHVzaChhcmcpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB3YXJuKG1zZyArICdcXG5Bcmd1bWVudHM6ICcgKyBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmdzKS5qb2luKCcnKSArICdcXG4nICsgKG5ldyBFcnJvcigpKS5zdGFjayk7XG4gICAgICAgICAgICAgICAgZmlyc3RUaW1lID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZm4uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgICAgfSwgZm4pO1xuICAgIH1cblxuICAgIHZhciBkZXByZWNhdGlvbnMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGRlcHJlY2F0ZVNpbXBsZShuYW1lLCBtc2cpIHtcbiAgICAgICAgaWYgKGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlciAhPSBudWxsKSB7XG4gICAgICAgICAgICBob29rcy5kZXByZWNhdGlvbkhhbmRsZXIobmFtZSwgbXNnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWRlcHJlY2F0aW9uc1tuYW1lXSkge1xuICAgICAgICAgICAgd2Fybihtc2cpO1xuICAgICAgICAgICAgZGVwcmVjYXRpb25zW25hbWVdID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGhvb2tzLnN1cHByZXNzRGVwcmVjYXRpb25XYXJuaW5ncyA9IGZhbHNlO1xuICAgIGhvb2tzLmRlcHJlY2F0aW9uSGFuZGxlciA9IG51bGw7XG5cbiAgICBmdW5jdGlvbiBpc0Z1bmN0aW9uKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dCBpbnN0YW5jZW9mIEZ1bmN0aW9uIHx8IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChpbnB1dCkgPT09ICdbb2JqZWN0IEZ1bmN0aW9uXSc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0IChjb25maWcpIHtcbiAgICAgICAgdmFyIHByb3AsIGk7XG4gICAgICAgIGZvciAoaSBpbiBjb25maWcpIHtcbiAgICAgICAgICAgIHByb3AgPSBjb25maWdbaV07XG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbihwcm9wKSkge1xuICAgICAgICAgICAgICAgIHRoaXNbaV0gPSBwcm9wO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzWydfJyArIGldID0gcHJvcDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jb25maWcgPSBjb25maWc7XG4gICAgICAgIC8vIExlbmllbnQgb3JkaW5hbCBwYXJzaW5nIGFjY2VwdHMganVzdCBhIG51bWJlciBpbiBhZGRpdGlvbiB0b1xuICAgICAgICAvLyBudW1iZXIgKyAocG9zc2libHkpIHN0dWZmIGNvbWluZyBmcm9tIF9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlLlxuICAgICAgICAvLyBUT0RPOiBSZW1vdmUgXCJvcmRpbmFsUGFyc2VcIiBmYWxsYmFjayBpbiBuZXh0IG1ham9yIHJlbGVhc2UuXG4gICAgICAgIHRoaXMuX2RheU9mTW9udGhPcmRpbmFsUGFyc2VMZW5pZW50ID0gbmV3IFJlZ0V4cChcbiAgICAgICAgICAgICh0aGlzLl9kYXlPZk1vbnRoT3JkaW5hbFBhcnNlLnNvdXJjZSB8fCB0aGlzLl9vcmRpbmFsUGFyc2Uuc291cmNlKSArXG4gICAgICAgICAgICAgICAgJ3wnICsgKC9cXGR7MSwyfS8pLnNvdXJjZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWVyZ2VDb25maWdzKHBhcmVudENvbmZpZywgY2hpbGRDb25maWcpIHtcbiAgICAgICAgdmFyIHJlcyA9IGV4dGVuZCh7fSwgcGFyZW50Q29uZmlnKSwgcHJvcDtcbiAgICAgICAgZm9yIChwcm9wIGluIGNoaWxkQ29uZmlnKSB7XG4gICAgICAgICAgICBpZiAoaGFzT3duUHJvcChjaGlsZENvbmZpZywgcHJvcCkpIHtcbiAgICAgICAgICAgICAgICBpZiAoaXNPYmplY3QocGFyZW50Q29uZmlnW3Byb3BdKSAmJiBpc09iamVjdChjaGlsZENvbmZpZ1twcm9wXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzW3Byb3BdID0ge307XG4gICAgICAgICAgICAgICAgICAgIGV4dGVuZChyZXNbcHJvcF0sIHBhcmVudENvbmZpZ1twcm9wXSk7XG4gICAgICAgICAgICAgICAgICAgIGV4dGVuZChyZXNbcHJvcF0sIGNoaWxkQ29uZmlnW3Byb3BdKTtcbiAgICAgICAgICAgICAgICB9IGVsc2UgaWYgKGNoaWxkQ29uZmlnW3Byb3BdICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzW3Byb3BdID0gY2hpbGRDb25maWdbcHJvcF07XG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlIHJlc1twcm9wXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChwcm9wIGluIHBhcmVudENvbmZpZykge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AocGFyZW50Q29uZmlnLCBwcm9wKSAmJlxuICAgICAgICAgICAgICAgICAgICAhaGFzT3duUHJvcChjaGlsZENvbmZpZywgcHJvcCkgJiZcbiAgICAgICAgICAgICAgICAgICAgaXNPYmplY3QocGFyZW50Q29uZmlnW3Byb3BdKSkge1xuICAgICAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSBjaGFuZ2VzIHRvIHByb3BlcnRpZXMgZG9uJ3QgbW9kaWZ5IHBhcmVudCBjb25maWdcbiAgICAgICAgICAgICAgICByZXNbcHJvcF0gPSBleHRlbmQoe30sIHJlc1twcm9wXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBMb2NhbGUoY29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy5zZXQoY29uZmlnKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBrZXlzO1xuXG4gICAgaWYgKE9iamVjdC5rZXlzKSB7XG4gICAgICAgIGtleXMgPSBPYmplY3Qua2V5cztcbiAgICB9IGVsc2Uge1xuICAgICAgICBrZXlzID0gZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgICAgdmFyIGksIHJlcyA9IFtdO1xuICAgICAgICAgICAgZm9yIChpIGluIG9iaikge1xuICAgICAgICAgICAgICAgIGlmIChoYXNPd25Qcm9wKG9iaiwgaSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmVzLnB1c2goaSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdENhbGVuZGFyID0ge1xuICAgICAgICBzYW1lRGF5IDogJ1tUb2RheSBhdF0gTFQnLFxuICAgICAgICBuZXh0RGF5IDogJ1tUb21vcnJvdyBhdF0gTFQnLFxuICAgICAgICBuZXh0V2VlayA6ICdkZGRkIFthdF0gTFQnLFxuICAgICAgICBsYXN0RGF5IDogJ1tZZXN0ZXJkYXkgYXRdIExUJyxcbiAgICAgICAgbGFzdFdlZWsgOiAnW0xhc3RdIGRkZGQgW2F0XSBMVCcsXG4gICAgICAgIHNhbWVFbHNlIDogJ0wnXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIGNhbGVuZGFyIChrZXksIG1vbSwgbm93KSB7XG4gICAgICAgIHZhciBvdXRwdXQgPSB0aGlzLl9jYWxlbmRhcltrZXldIHx8IHRoaXMuX2NhbGVuZGFyWydzYW1lRWxzZSddO1xuICAgICAgICByZXR1cm4gaXNGdW5jdGlvbihvdXRwdXQpID8gb3V0cHV0LmNhbGwobW9tLCBub3cpIDogb3V0cHV0O1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9uZ0RhdGVGb3JtYXQgPSB7XG4gICAgICAgIExUUyAgOiAnaDptbTpzcyBBJyxcbiAgICAgICAgTFQgICA6ICdoOm1tIEEnLFxuICAgICAgICBMICAgIDogJ01NL0REL1lZWVknLFxuICAgICAgICBMTCAgIDogJ01NTU0gRCwgWVlZWScsXG4gICAgICAgIExMTCAgOiAnTU1NTSBELCBZWVlZIGg6bW0gQScsXG4gICAgICAgIExMTEwgOiAnZGRkZCwgTU1NTSBELCBZWVlZIGg6bW0gQSdcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbG9uZ0RhdGVGb3JtYXQgKGtleSkge1xuICAgICAgICB2YXIgZm9ybWF0ID0gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XSxcbiAgICAgICAgICAgIGZvcm1hdFVwcGVyID0gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5LnRvVXBwZXJDYXNlKCldO1xuXG4gICAgICAgIGlmIChmb3JtYXQgfHwgIWZvcm1hdFVwcGVyKSB7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0O1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XSA9IGZvcm1hdFVwcGVyLnJlcGxhY2UoL01NTU18TU18RER8ZGRkZC9nLCBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsLnNsaWNlKDEpO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5fbG9uZ0RhdGVGb3JtYXRba2V5XTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdEludmFsaWREYXRlID0gJ0ludmFsaWQgZGF0ZSc7XG5cbiAgICBmdW5jdGlvbiBpbnZhbGlkRGF0ZSAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pbnZhbGlkRGF0ZTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdE9yZGluYWwgPSAnJWQnO1xuICAgIHZhciBkZWZhdWx0RGF5T2ZNb250aE9yZGluYWxQYXJzZSA9IC9cXGR7MSwyfS87XG5cbiAgICBmdW5jdGlvbiBvcmRpbmFsIChudW1iZXIpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX29yZGluYWwucmVwbGFjZSgnJWQnLCBudW1iZXIpO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0UmVsYXRpdmVUaW1lID0ge1xuICAgICAgICBmdXR1cmUgOiAnaW4gJXMnLFxuICAgICAgICBwYXN0ICAgOiAnJXMgYWdvJyxcbiAgICAgICAgcyAgOiAnYSBmZXcgc2Vjb25kcycsXG4gICAgICAgIHNzIDogJyVkIHNlY29uZHMnLFxuICAgICAgICBtICA6ICdhIG1pbnV0ZScsXG4gICAgICAgIG1tIDogJyVkIG1pbnV0ZXMnLFxuICAgICAgICBoICA6ICdhbiBob3VyJyxcbiAgICAgICAgaGggOiAnJWQgaG91cnMnLFxuICAgICAgICBkICA6ICdhIGRheScsXG4gICAgICAgIGRkIDogJyVkIGRheXMnLFxuICAgICAgICBNICA6ICdhIG1vbnRoJyxcbiAgICAgICAgTU0gOiAnJWQgbW9udGhzJyxcbiAgICAgICAgeSAgOiAnYSB5ZWFyJyxcbiAgICAgICAgeXkgOiAnJWQgeWVhcnMnXG4gICAgfTtcblxuICAgIGZ1bmN0aW9uIHJlbGF0aXZlVGltZSAobnVtYmVyLCB3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKSB7XG4gICAgICAgIHZhciBvdXRwdXQgPSB0aGlzLl9yZWxhdGl2ZVRpbWVbc3RyaW5nXTtcbiAgICAgICAgcmV0dXJuIChpc0Z1bmN0aW9uKG91dHB1dCkpID9cbiAgICAgICAgICAgIG91dHB1dChudW1iZXIsIHdpdGhvdXRTdWZmaXgsIHN0cmluZywgaXNGdXR1cmUpIDpcbiAgICAgICAgICAgIG91dHB1dC5yZXBsYWNlKC8lZC9pLCBudW1iZXIpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhc3RGdXR1cmUgKGRpZmYsIG91dHB1dCkge1xuICAgICAgICB2YXIgZm9ybWF0ID0gdGhpcy5fcmVsYXRpdmVUaW1lW2RpZmYgPiAwID8gJ2Z1dHVyZScgOiAncGFzdCddO1xuICAgICAgICByZXR1cm4gaXNGdW5jdGlvbihmb3JtYXQpID8gZm9ybWF0KG91dHB1dCkgOiBmb3JtYXQucmVwbGFjZSgvJXMvaSwgb3V0cHV0KTtcbiAgICB9XG5cbiAgICB2YXIgYWxpYXNlcyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gYWRkVW5pdEFsaWFzICh1bml0LCBzaG9ydGhhbmQpIHtcbiAgICAgICAgdmFyIGxvd2VyQ2FzZSA9IHVuaXQudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgYWxpYXNlc1tsb3dlckNhc2VdID0gYWxpYXNlc1tsb3dlckNhc2UgKyAncyddID0gYWxpYXNlc1tzaG9ydGhhbmRdID0gdW5pdDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBub3JtYWxpemVVbml0cyh1bml0cykge1xuICAgICAgICByZXR1cm4gdHlwZW9mIHVuaXRzID09PSAnc3RyaW5nJyA/IGFsaWFzZXNbdW5pdHNdIHx8IGFsaWFzZXNbdW5pdHMudG9Mb3dlckNhc2UoKV0gOiB1bmRlZmluZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbm9ybWFsaXplT2JqZWN0VW5pdHMoaW5wdXRPYmplY3QpIHtcbiAgICAgICAgdmFyIG5vcm1hbGl6ZWRJbnB1dCA9IHt9LFxuICAgICAgICAgICAgbm9ybWFsaXplZFByb3AsXG4gICAgICAgICAgICBwcm9wO1xuXG4gICAgICAgIGZvciAocHJvcCBpbiBpbnB1dE9iamVjdCkge1xuICAgICAgICAgICAgaWYgKGhhc093blByb3AoaW5wdXRPYmplY3QsIHByb3ApKSB7XG4gICAgICAgICAgICAgICAgbm9ybWFsaXplZFByb3AgPSBub3JtYWxpemVVbml0cyhwcm9wKTtcbiAgICAgICAgICAgICAgICBpZiAobm9ybWFsaXplZFByb3ApIHtcbiAgICAgICAgICAgICAgICAgICAgbm9ybWFsaXplZElucHV0W25vcm1hbGl6ZWRQcm9wXSA9IGlucHV0T2JqZWN0W3Byb3BdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBub3JtYWxpemVkSW5wdXQ7XG4gICAgfVxuXG4gICAgdmFyIHByaW9yaXRpZXMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIGFkZFVuaXRQcmlvcml0eSh1bml0LCBwcmlvcml0eSkge1xuICAgICAgICBwcmlvcml0aWVzW3VuaXRdID0gcHJpb3JpdHk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0UHJpb3JpdGl6ZWRVbml0cyh1bml0c09iaikge1xuICAgICAgICB2YXIgdW5pdHMgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgdSBpbiB1bml0c09iaikge1xuICAgICAgICAgICAgdW5pdHMucHVzaCh7dW5pdDogdSwgcHJpb3JpdHk6IHByaW9yaXRpZXNbdV19KTtcbiAgICAgICAgfVxuICAgICAgICB1bml0cy5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICAgICAgICByZXR1cm4gYS5wcmlvcml0eSAtIGIucHJpb3JpdHk7XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdW5pdHM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gemVyb0ZpbGwobnVtYmVyLCB0YXJnZXRMZW5ndGgsIGZvcmNlU2lnbikge1xuICAgICAgICB2YXIgYWJzTnVtYmVyID0gJycgKyBNYXRoLmFicyhudW1iZXIpLFxuICAgICAgICAgICAgemVyb3NUb0ZpbGwgPSB0YXJnZXRMZW5ndGggLSBhYnNOdW1iZXIubGVuZ3RoLFxuICAgICAgICAgICAgc2lnbiA9IG51bWJlciA+PSAwO1xuICAgICAgICByZXR1cm4gKHNpZ24gPyAoZm9yY2VTaWduID8gJysnIDogJycpIDogJy0nKSArXG4gICAgICAgICAgICBNYXRoLnBvdygxMCwgTWF0aC5tYXgoMCwgemVyb3NUb0ZpbGwpKS50b1N0cmluZygpLnN1YnN0cigxKSArIGFic051bWJlcjtcbiAgICB9XG5cbiAgICB2YXIgZm9ybWF0dGluZ1Rva2VucyA9IC8oXFxbW15cXFtdKlxcXSl8KFxcXFwpPyhbSGhdbW0oc3MpP3xNb3xNTT9NP00/fERvfERERG98REQ/RD9EP3xkZGQ/ZD98ZG8/fHdbb3x3XT98V1tvfFddP3xRbz98WVlZWVlZfFlZWVlZfFlZWVl8WVl8Z2coZ2dnPyk/fEdHKEdHRz8pP3xlfEV8YXxBfGhoP3xISD98a2s/fG1tP3xzcz98U3sxLDl9fHh8WHx6ej98Wlo/fC4pL2c7XG5cbiAgICB2YXIgbG9jYWxGb3JtYXR0aW5nVG9rZW5zID0gLyhcXFtbXlxcW10qXFxdKXwoXFxcXCk/KExUU3xMVHxMTD9MP0w/fGx7MSw0fSkvZztcblxuICAgIHZhciBmb3JtYXRGdW5jdGlvbnMgPSB7fTtcblxuICAgIHZhciBmb3JtYXRUb2tlbkZ1bmN0aW9ucyA9IHt9O1xuXG4gICAgLy8gdG9rZW46ICAgICdNJ1xuICAgIC8vIHBhZGRlZDogICBbJ01NJywgMl1cbiAgICAvLyBvcmRpbmFsOiAgJ01vJ1xuICAgIC8vIGNhbGxiYWNrOiBmdW5jdGlvbiAoKSB7IHRoaXMubW9udGgoKSArIDEgfVxuICAgIGZ1bmN0aW9uIGFkZEZvcm1hdFRva2VuICh0b2tlbiwgcGFkZGVkLCBvcmRpbmFsLCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgZnVuYyA9IGNhbGxiYWNrO1xuICAgICAgICBpZiAodHlwZW9mIGNhbGxiYWNrID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgZnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1tjYWxsYmFja10oKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRva2VuKSB7XG4gICAgICAgICAgICBmb3JtYXRUb2tlbkZ1bmN0aW9uc1t0b2tlbl0gPSBmdW5jO1xuICAgICAgICB9XG4gICAgICAgIGlmIChwYWRkZWQpIHtcbiAgICAgICAgICAgIGZvcm1hdFRva2VuRnVuY3Rpb25zW3BhZGRlZFswXV0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHplcm9GaWxsKGZ1bmMuYXBwbHkodGhpcywgYXJndW1lbnRzKSwgcGFkZGVkWzFdLCBwYWRkZWRbMl0pO1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3JkaW5hbCkge1xuICAgICAgICAgICAgZm9ybWF0VG9rZW5GdW5jdGlvbnNbb3JkaW5hbF0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm9yZGluYWwoZnVuYy5hcHBseSh0aGlzLCBhcmd1bWVudHMpLCB0b2tlbik7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlRm9ybWF0dGluZ1Rva2VucyhpbnB1dCkge1xuICAgICAgICBpZiAoaW5wdXQubWF0Y2goL1xcW1tcXHNcXFNdLykpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC9eXFxbfFxcXSQvZywgJycpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpbnB1dC5yZXBsYWNlKC9cXFxcL2csICcnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlRm9ybWF0RnVuY3Rpb24oZm9ybWF0KSB7XG4gICAgICAgIHZhciBhcnJheSA9IGZvcm1hdC5tYXRjaChmb3JtYXR0aW5nVG9rZW5zKSwgaSwgbGVuZ3RoO1xuXG4gICAgICAgIGZvciAoaSA9IDAsIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0VG9rZW5GdW5jdGlvbnNbYXJyYXlbaV1dKSB7XG4gICAgICAgICAgICAgICAgYXJyYXlbaV0gPSBmb3JtYXRUb2tlbkZ1bmN0aW9uc1thcnJheVtpXV07XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGFycmF5W2ldID0gcmVtb3ZlRm9ybWF0dGluZ1Rva2VucyhhcnJheVtpXSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKG1vbSkge1xuICAgICAgICAgICAgdmFyIG91dHB1dCA9ICcnLCBpO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgb3V0cHV0ICs9IGlzRnVuY3Rpb24oYXJyYXlbaV0pID8gYXJyYXlbaV0uY2FsbChtb20sIGZvcm1hdCkgOiBhcnJheVtpXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBvdXRwdXQ7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gZm9ybWF0IGRhdGUgdXNpbmcgbmF0aXZlIGRhdGUgb2JqZWN0XG4gICAgZnVuY3Rpb24gZm9ybWF0TW9tZW50KG0sIGZvcm1hdCkge1xuICAgICAgICBpZiAoIW0uaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gbS5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvcm1hdCA9IGV4cGFuZEZvcm1hdChmb3JtYXQsIG0ubG9jYWxlRGF0YSgpKTtcbiAgICAgICAgZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdF0gPSBmb3JtYXRGdW5jdGlvbnNbZm9ybWF0XSB8fCBtYWtlRm9ybWF0RnVuY3Rpb24oZm9ybWF0KTtcblxuICAgICAgICByZXR1cm4gZm9ybWF0RnVuY3Rpb25zW2Zvcm1hdF0obSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZXhwYW5kRm9ybWF0KGZvcm1hdCwgbG9jYWxlKSB7XG4gICAgICAgIHZhciBpID0gNTtcblxuICAgICAgICBmdW5jdGlvbiByZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnMoaW5wdXQpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbGUubG9uZ0RhdGVGb3JtYXQoaW5wdXQpIHx8IGlucHV0O1xuICAgICAgICB9XG5cbiAgICAgICAgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLmxhc3RJbmRleCA9IDA7XG4gICAgICAgIHdoaWxlIChpID49IDAgJiYgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLnRlc3QoZm9ybWF0KSkge1xuICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0LnJlcGxhY2UobG9jYWxGb3JtYXR0aW5nVG9rZW5zLCByZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnMpO1xuICAgICAgICAgICAgbG9jYWxGb3JtYXR0aW5nVG9rZW5zLmxhc3RJbmRleCA9IDA7XG4gICAgICAgICAgICBpIC09IDE7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZm9ybWF0O1xuICAgIH1cblxuICAgIHZhciBtYXRjaDEgICAgICAgICA9IC9cXGQvOyAgICAgICAgICAgIC8vICAgICAgIDAgLSA5XG4gICAgdmFyIG1hdGNoMiAgICAgICAgID0gL1xcZFxcZC87ICAgICAgICAgIC8vICAgICAgMDAgLSA5OVxuICAgIHZhciBtYXRjaDMgICAgICAgICA9IC9cXGR7M30vOyAgICAgICAgIC8vICAgICAwMDAgLSA5OTlcbiAgICB2YXIgbWF0Y2g0ICAgICAgICAgPSAvXFxkezR9LzsgICAgICAgICAvLyAgICAwMDAwIC0gOTk5OVxuICAgIHZhciBtYXRjaDYgICAgICAgICA9IC9bKy1dP1xcZHs2fS87ICAgIC8vIC05OTk5OTkgLSA5OTk5OTlcbiAgICB2YXIgbWF0Y2gxdG8yICAgICAgPSAvXFxkXFxkPy87ICAgICAgICAgLy8gICAgICAgMCAtIDk5XG4gICAgdmFyIG1hdGNoM3RvNCAgICAgID0gL1xcZFxcZFxcZFxcZD8vOyAgICAgLy8gICAgIDk5OSAtIDk5OTlcbiAgICB2YXIgbWF0Y2g1dG82ICAgICAgPSAvXFxkXFxkXFxkXFxkXFxkXFxkPy87IC8vICAgOTk5OTkgLSA5OTk5OTlcbiAgICB2YXIgbWF0Y2gxdG8zICAgICAgPSAvXFxkezEsM30vOyAgICAgICAvLyAgICAgICAwIC0gOTk5XG4gICAgdmFyIG1hdGNoMXRvNCAgICAgID0gL1xcZHsxLDR9LzsgICAgICAgLy8gICAgICAgMCAtIDk5OTlcbiAgICB2YXIgbWF0Y2gxdG82ICAgICAgPSAvWystXT9cXGR7MSw2fS87ICAvLyAtOTk5OTk5IC0gOTk5OTk5XG5cbiAgICB2YXIgbWF0Y2hVbnNpZ25lZCAgPSAvXFxkKy87ICAgICAgICAgICAvLyAgICAgICAwIC0gaW5mXG4gICAgdmFyIG1hdGNoU2lnbmVkICAgID0gL1srLV0/XFxkKy87ICAgICAgLy8gICAgLWluZiAtIGluZlxuXG4gICAgdmFyIG1hdGNoT2Zmc2V0ICAgID0gL1p8WystXVxcZFxcZDo/XFxkXFxkL2dpOyAvLyArMDA6MDAgLTAwOjAwICswMDAwIC0wMDAwIG9yIFpcbiAgICB2YXIgbWF0Y2hTaG9ydE9mZnNldCA9IC9afFsrLV1cXGRcXGQoPzo6P1xcZFxcZCk/L2dpOyAvLyArMDAgLTAwICswMDowMCAtMDA6MDAgKzAwMDAgLTAwMDAgb3IgWlxuXG4gICAgdmFyIG1hdGNoVGltZXN0YW1wID0gL1srLV0/XFxkKyhcXC5cXGR7MSwzfSk/LzsgLy8gMTIzNDU2Nzg5IDEyMzQ1Njc4OS4xMjNcblxuICAgIC8vIGFueSB3b3JkIChvciB0d28pIGNoYXJhY3RlcnMgb3IgbnVtYmVycyBpbmNsdWRpbmcgdHdvL3RocmVlIHdvcmQgbW9udGggaW4gYXJhYmljLlxuICAgIC8vIGluY2x1ZGVzIHNjb3R0aXNoIGdhZWxpYyB0d28gd29yZCBhbmQgaHlwaGVuYXRlZCBtb250aHNcbiAgICB2YXIgbWF0Y2hXb3JkID0gL1swLTldezAsMjU2fVsnYS16XFx1MDBBMC1cXHUwNUZGXFx1MDcwMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRjA3XFx1RkYxMC1cXHVGRkVGXXsxLDI1Nn18W1xcdTA2MDAtXFx1MDZGRlxcL117MSwyNTZ9KFxccyo/W1xcdTA2MDAtXFx1MDZGRl17MSwyNTZ9KXsxLDJ9L2k7XG5cbiAgICB2YXIgcmVnZXhlcyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gYWRkUmVnZXhUb2tlbiAodG9rZW4sIHJlZ2V4LCBzdHJpY3RSZWdleCkge1xuICAgICAgICByZWdleGVzW3Rva2VuXSA9IGlzRnVuY3Rpb24ocmVnZXgpID8gcmVnZXggOiBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZURhdGEpIHtcbiAgICAgICAgICAgIHJldHVybiAoaXNTdHJpY3QgJiYgc3RyaWN0UmVnZXgpID8gc3RyaWN0UmVnZXggOiByZWdleDtcbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRQYXJzZVJlZ2V4Rm9yVG9rZW4gKHRva2VuLCBjb25maWcpIHtcbiAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHJlZ2V4ZXMsIHRva2VuKSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBSZWdFeHAodW5lc2NhcGVGb3JtYXQodG9rZW4pKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZWdleGVzW3Rva2VuXShjb25maWcuX3N0cmljdCwgY29uZmlnLl9sb2NhbGUpO1xuICAgIH1cblxuICAgIC8vIENvZGUgZnJvbSBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vcXVlc3Rpb25zLzM1NjE0OTMvaXMtdGhlcmUtYS1yZWdleHAtZXNjYXBlLWZ1bmN0aW9uLWluLWphdmFzY3JpcHRcbiAgICBmdW5jdGlvbiB1bmVzY2FwZUZvcm1hdChzKSB7XG4gICAgICAgIHJldHVybiByZWdleEVzY2FwZShzLnJlcGxhY2UoJ1xcXFwnLCAnJykucmVwbGFjZSgvXFxcXChcXFspfFxcXFwoXFxdKXxcXFsoW15cXF1cXFtdKilcXF18XFxcXCguKS9nLCBmdW5jdGlvbiAobWF0Y2hlZCwgcDEsIHAyLCBwMywgcDQpIHtcbiAgICAgICAgICAgIHJldHVybiBwMSB8fCBwMiB8fCBwMyB8fCBwNDtcbiAgICAgICAgfSkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlZ2V4RXNjYXBlKHMpIHtcbiAgICAgICAgcmV0dXJuIHMucmVwbGFjZSgvWy1cXC9cXFxcXiQqKz8uKCl8W1xcXXt9XS9nLCAnXFxcXCQmJyk7XG4gICAgfVxuXG4gICAgdmFyIHRva2VucyA9IHt9O1xuXG4gICAgZnVuY3Rpb24gYWRkUGFyc2VUb2tlbiAodG9rZW4sIGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBpLCBmdW5jID0gY2FsbGJhY2s7XG4gICAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICB0b2tlbiA9IFt0b2tlbl07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzTnVtYmVyKGNhbGxiYWNrKSkge1xuICAgICAgICAgICAgZnVuYyA9IGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgICAgICAgICBhcnJheVtjYWxsYmFja10gPSB0b0ludChpbnB1dCk7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCB0b2tlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdG9rZW5zW3Rva2VuW2ldXSA9IGZ1bmM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRXZWVrUGFyc2VUb2tlbiAodG9rZW4sIGNhbGxiYWNrKSB7XG4gICAgICAgIGFkZFBhcnNlVG9rZW4odG9rZW4sIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgICAgIGNvbmZpZy5fdyA9IGNvbmZpZy5fdyB8fCB7fTtcbiAgICAgICAgICAgIGNhbGxiYWNrKGlucHV0LCBjb25maWcuX3csIGNvbmZpZywgdG9rZW4pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhZGRUaW1lVG9BcnJheUZyb21Ub2tlbih0b2tlbiwgaW5wdXQsIGNvbmZpZykge1xuICAgICAgICBpZiAoaW5wdXQgIT0gbnVsbCAmJiBoYXNPd25Qcm9wKHRva2VucywgdG9rZW4pKSB7XG4gICAgICAgICAgICB0b2tlbnNbdG9rZW5dKGlucHV0LCBjb25maWcuX2EsIGNvbmZpZywgdG9rZW4pO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIFlFQVIgPSAwO1xuICAgIHZhciBNT05USCA9IDE7XG4gICAgdmFyIERBVEUgPSAyO1xuICAgIHZhciBIT1VSID0gMztcbiAgICB2YXIgTUlOVVRFID0gNDtcbiAgICB2YXIgU0VDT05EID0gNTtcbiAgICB2YXIgTUlMTElTRUNPTkQgPSA2O1xuICAgIHZhciBXRUVLID0gNztcbiAgICB2YXIgV0VFS0RBWSA9IDg7XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignWScsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHkgPSB0aGlzLnllYXIoKTtcbiAgICAgICAgcmV0dXJuIHkgPD0gOTk5OSA/ICcnICsgeSA6ICcrJyArIHk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1lZJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMueWVhcigpICUgMTAwO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydZWVlZJywgICA0XSwgICAgICAgMCwgJ3llYXInKTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1lZWVlZJywgIDVdLCAgICAgICAwLCAneWVhcicpO1xuICAgIGFkZEZvcm1hdFRva2VuKDAsIFsnWVlZWVlZJywgNiwgdHJ1ZV0sIDAsICd5ZWFyJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ3llYXInLCAneScpO1xuXG4gICAgLy8gUFJJT1JJVElFU1xuXG4gICAgYWRkVW5pdFByaW9yaXR5KCd5ZWFyJywgMSk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdZJywgICAgICBtYXRjaFNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbignWVknLCAgICAgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1lZWVknLCAgIG1hdGNoMXRvNCwgbWF0Y2g0KTtcbiAgICBhZGRSZWdleFRva2VuKCdZWVlZWScsICBtYXRjaDF0bzYsIG1hdGNoNik7XG4gICAgYWRkUmVnZXhUb2tlbignWVlZWVlZJywgbWF0Y2gxdG82LCBtYXRjaDYpO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ1lZWVlZJywgJ1lZWVlZWSddLCBZRUFSKTtcbiAgICBhZGRQYXJzZVRva2VuKCdZWVlZJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSkge1xuICAgICAgICBhcnJheVtZRUFSXSA9IGlucHV0Lmxlbmd0aCA9PT0gMiA/IGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyKGlucHV0KSA6IHRvSW50KGlucHV0KTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdZWScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbWUVBUl0gPSBob29rcy5wYXJzZVR3b0RpZ2l0WWVhcihpbnB1dCk7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignWScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbWUVBUl0gPSBwYXJzZUludChpbnB1dCwgMTApO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgZnVuY3Rpb24gZGF5c0luWWVhcih5ZWFyKSB7XG4gICAgICAgIHJldHVybiBpc0xlYXBZZWFyKHllYXIpID8gMzY2IDogMzY1O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzTGVhcFllYXIoeWVhcikge1xuICAgICAgICByZXR1cm4gKHllYXIgJSA0ID09PSAwICYmIHllYXIgJSAxMDAgIT09IDApIHx8IHllYXIgJSA0MDAgPT09IDA7XG4gICAgfVxuXG4gICAgLy8gSE9PS1NcblxuICAgIGhvb2tzLnBhcnNlVHdvRGlnaXRZZWFyID0gZnVuY3Rpb24gKGlucHV0KSB7XG4gICAgICAgIHJldHVybiB0b0ludChpbnB1dCkgKyAodG9JbnQoaW5wdXQpID4gNjggPyAxOTAwIDogMjAwMCk7XG4gICAgfTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXRZZWFyID0gbWFrZUdldFNldCgnRnVsbFllYXInLCB0cnVlKTtcblxuICAgIGZ1bmN0aW9uIGdldElzTGVhcFllYXIgKCkge1xuICAgICAgICByZXR1cm4gaXNMZWFwWWVhcih0aGlzLnllYXIoKSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZUdldFNldCAodW5pdCwga2VlcFRpbWUpIHtcbiAgICAgICAgcmV0dXJuIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBzZXQkMSh0aGlzLCB1bml0LCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIGtlZXBUaW1lKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldCh0aGlzLCB1bml0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXQgKG1vbSwgdW5pdCkge1xuICAgICAgICByZXR1cm4gbW9tLmlzVmFsaWQoKSA/XG4gICAgICAgICAgICBtb20uX2RbJ2dldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgdW5pdF0oKSA6IE5hTjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXQkMSAobW9tLCB1bml0LCB2YWx1ZSkge1xuICAgICAgICBpZiAobW9tLmlzVmFsaWQoKSAmJiAhaXNOYU4odmFsdWUpKSB7XG4gICAgICAgICAgICBpZiAodW5pdCA9PT0gJ0Z1bGxZZWFyJyAmJiBpc0xlYXBZZWFyKG1vbS55ZWFyKCkpICYmIG1vbS5tb250aCgpID09PSAxICYmIG1vbS5kYXRlKCkgPT09IDI5KSB7XG4gICAgICAgICAgICAgICAgbW9tLl9kWydzZXQnICsgKG1vbS5faXNVVEMgPyAnVVRDJyA6ICcnKSArIHVuaXRdKHZhbHVlLCBtb20ubW9udGgoKSwgZGF5c0luTW9udGgodmFsdWUsIG1vbS5tb250aCgpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBtb20uX2RbJ3NldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgdW5pdF0odmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gc3RyaW5nR2V0ICh1bml0cykge1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgaWYgKGlzRnVuY3Rpb24odGhpc1t1bml0c10pKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpc1t1bml0c10oKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIHN0cmluZ1NldCAodW5pdHMsIHZhbHVlKSB7XG4gICAgICAgIGlmICh0eXBlb2YgdW5pdHMgPT09ICdvYmplY3QnKSB7XG4gICAgICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZU9iamVjdFVuaXRzKHVuaXRzKTtcbiAgICAgICAgICAgIHZhciBwcmlvcml0aXplZCA9IGdldFByaW9yaXRpemVkVW5pdHModW5pdHMpO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmlvcml0aXplZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIHRoaXNbcHJpb3JpdGl6ZWRbaV0udW5pdF0odW5pdHNbcHJpb3JpdGl6ZWRbaV0udW5pdF0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgICAgICBpZiAoaXNGdW5jdGlvbih0aGlzW3VuaXRzXSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpc1t1bml0c10odmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1vZChuLCB4KSB7XG4gICAgICAgIHJldHVybiAoKG4gJSB4KSArIHgpICUgeDtcbiAgICB9XG5cbiAgICB2YXIgaW5kZXhPZjtcblxuICAgIGlmIChBcnJheS5wcm90b3R5cGUuaW5kZXhPZikge1xuICAgICAgICBpbmRleE9mID0gQXJyYXkucHJvdG90eXBlLmluZGV4T2Y7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgaW5kZXhPZiA9IGZ1bmN0aW9uIChvKSB7XG4gICAgICAgICAgICAvLyBJIGtub3dcbiAgICAgICAgICAgIHZhciBpO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgICAgICBpZiAodGhpc1tpXSA9PT0gbykge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gLTE7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGF5c0luTW9udGgoeWVhciwgbW9udGgpIHtcbiAgICAgICAgaWYgKGlzTmFOKHllYXIpIHx8IGlzTmFOKG1vbnRoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgbW9kTW9udGggPSBtb2QobW9udGgsIDEyKTtcbiAgICAgICAgeWVhciArPSAobW9udGggLSBtb2RNb250aCkgLyAxMjtcbiAgICAgICAgcmV0dXJuIG1vZE1vbnRoID09PSAxID8gKGlzTGVhcFllYXIoeWVhcikgPyAyOSA6IDI4KSA6ICgzMSAtIG1vZE1vbnRoICUgNyAlIDIpO1xuICAgIH1cblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdNJywgWydNTScsIDJdLCAnTW8nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vbnRoKCkgKyAxO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ01NTScsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1vbnRoc1Nob3J0KHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignTU1NTScsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLm1vbnRocyh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdtb250aCcsICdNJyk7XG5cbiAgICAvLyBQUklPUklUWVxuXG4gICAgYWRkVW5pdFByaW9yaXR5KCdtb250aCcsIDgpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignTScsICAgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignTU0nLCAgIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdNTU0nLCAgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5tb250aHNTaG9ydFJlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcbiAgICBhZGRSZWdleFRva2VuKCdNTU1NJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS5tb250aHNSZWdleChpc1N0cmljdCk7XG4gICAgfSk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnTScsICdNTSddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W01PTlRIXSA9IHRvSW50KGlucHV0KSAtIDE7XG4gICAgfSk7XG5cbiAgICBhZGRQYXJzZVRva2VuKFsnTU1NJywgJ01NTU0nXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnLCB0b2tlbikge1xuICAgICAgICB2YXIgbW9udGggPSBjb25maWcuX2xvY2FsZS5tb250aHNQYXJzZShpbnB1dCwgdG9rZW4sIGNvbmZpZy5fc3RyaWN0KTtcbiAgICAgICAgLy8gaWYgd2UgZGlkbid0IGZpbmQgYSBtb250aCBuYW1lLCBtYXJrIHRoZSBkYXRlIGFzIGludmFsaWQuXG4gICAgICAgIGlmIChtb250aCAhPSBudWxsKSB7XG4gICAgICAgICAgICBhcnJheVtNT05USF0gPSBtb250aDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRNb250aCA9IGlucHV0O1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBMT0NBTEVTXG5cbiAgICB2YXIgTU9OVEhTX0lOX0ZPUk1BVCA9IC9EW29EXT8oXFxbW15cXFtcXF1dKlxcXXxcXHMpK01NTU0/LztcbiAgICB2YXIgZGVmYXVsdExvY2FsZU1vbnRocyA9ICdKYW51YXJ5X0ZlYnJ1YXJ5X01hcmNoX0FwcmlsX01heV9KdW5lX0p1bHlfQXVndXN0X1NlcHRlbWJlcl9PY3RvYmVyX05vdmVtYmVyX0RlY2VtYmVyJy5zcGxpdCgnXycpO1xuICAgIGZ1bmN0aW9uIGxvY2FsZU1vbnRocyAobSwgZm9ybWF0KSB7XG4gICAgICAgIGlmICghbSkge1xuICAgICAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzKSA/IHRoaXMuX21vbnRocyA6XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzWydzdGFuZGFsb25lJ107XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzQXJyYXkodGhpcy5fbW9udGhzKSA/IHRoaXMuX21vbnRoc1ttLm1vbnRoKCldIDpcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1sodGhpcy5fbW9udGhzLmlzRm9ybWF0IHx8IE1PTlRIU19JTl9GT1JNQVQpLnRlc3QoZm9ybWF0KSA/ICdmb3JtYXQnIDogJ3N0YW5kYWxvbmUnXVttLm1vbnRoKCldO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlTW9udGhzU2hvcnQgPSAnSmFuX0ZlYl9NYXJfQXByX01heV9KdW5fSnVsX0F1Z19TZXBfT2N0X05vdl9EZWMnLnNwbGl0KCdfJyk7XG4gICAgZnVuY3Rpb24gbG9jYWxlTW9udGhzU2hvcnQgKG0sIGZvcm1hdCkge1xuICAgICAgICBpZiAoIW0pIHtcbiAgICAgICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRoc1Nob3J0KSA/IHRoaXMuX21vbnRoc1Nob3J0IDpcbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNTaG9ydFsnc3RhbmRhbG9uZSddO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBpc0FycmF5KHRoaXMuX21vbnRoc1Nob3J0KSA/IHRoaXMuX21vbnRoc1Nob3J0W20ubW9udGgoKV0gOlxuICAgICAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRbTU9OVEhTX0lOX0ZPUk1BVC50ZXN0KGZvcm1hdCkgPyAnZm9ybWF0JyA6ICdzdGFuZGFsb25lJ11bbS5tb250aCgpXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVTdHJpY3RQYXJzZShtb250aE5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgICAgIHZhciBpLCBpaSwgbW9tLCBsbGMgPSBtb250aE5hbWUudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKCF0aGlzLl9tb250aHNQYXJzZSkge1xuICAgICAgICAgICAgLy8gdGhpcyBpcyBub3QgdXNlZFxuICAgICAgICAgICAgdGhpcy5fbW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgdGhpcy5fc2hvcnRNb250aHNQYXJzZSA9IFtdO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IDEyOyArK2kpIHtcbiAgICAgICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIGldKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9zaG9ydE1vbnRoc1BhcnNlW2ldID0gdGhpcy5tb250aHNTaG9ydChtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX2xvbmdNb250aHNQYXJzZVtpXSA9IHRoaXMubW9udGhzKG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnTU1NJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbG9uZ01vbnRoc1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnTU1NJykge1xuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX2xvbmdNb250aHNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9sb25nTW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3Nob3J0TW9udGhzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsZU1vbnRoc1BhcnNlIChtb250aE5hbWUsIGZvcm1hdCwgc3RyaWN0KSB7XG4gICAgICAgIHZhciBpLCBtb20sIHJlZ2V4O1xuXG4gICAgICAgIGlmICh0aGlzLl9tb250aHNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICByZXR1cm4gaGFuZGxlU3RyaWN0UGFyc2UuY2FsbCh0aGlzLCBtb250aE5hbWUsIGZvcm1hdCwgc3RyaWN0KTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghdGhpcy5fbW9udGhzUGFyc2UpIHtcbiAgICAgICAgICAgIHRoaXMuX21vbnRoc1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9sb25nTW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2UgPSBbXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFRPRE86IGFkZCBzb3J0aW5nXG4gICAgICAgIC8vIFNvcnRpbmcgbWFrZXMgc3VyZSBpZiBvbmUgbW9udGggKG9yIGFiYnIpIGlzIGEgcHJlZml4IG9mIGFub3RoZXJcbiAgICAgICAgLy8gc2VlIHNvcnRpbmcgaW4gY29tcHV0ZU1vbnRoc1BhcnNlXG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcbiAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgaV0pO1xuICAgICAgICAgICAgaWYgKHN0cmljdCAmJiAhdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbG9uZ01vbnRoc1BhcnNlW2ldID0gbmV3IFJlZ0V4cCgnXicgKyB0aGlzLm1vbnRocyhtb20sICcnKS5yZXBsYWNlKCcuJywgJycpICsgJyQnLCAnaScpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0TW9udGhzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKCdeJyArIHRoaXMubW9udGhzU2hvcnQobW9tLCAnJykucmVwbGFjZSgnLicsICcnKSArICckJywgJ2knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghc3RyaWN0ICYmICF0aGlzLl9tb250aHNQYXJzZVtpXSkge1xuICAgICAgICAgICAgICAgIHJlZ2V4ID0gJ14nICsgdGhpcy5tb250aHMobW9tLCAnJykgKyAnfF4nICsgdGhpcy5tb250aHNTaG9ydChtb20sICcnKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNQYXJzZVtpXSA9IG5ldyBSZWdFeHAocmVnZXgucmVwbGFjZSgnLicsICcnKSwgJ2knKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHRlc3QgdGhlIHJlZ2V4XG4gICAgICAgICAgICBpZiAoc3RyaWN0ICYmIGZvcm1hdCA9PT0gJ01NTU0nICYmIHRoaXMuX2xvbmdNb250aHNQYXJzZVtpXS50ZXN0KG1vbnRoTmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RyaWN0ICYmIGZvcm1hdCA9PT0gJ01NTScgJiYgdGhpcy5fc2hvcnRNb250aHNQYXJzZVtpXS50ZXN0KG1vbnRoTmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoIXN0cmljdCAmJiB0aGlzLl9tb250aHNQYXJzZVtpXS50ZXN0KG1vbnRoTmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIHNldE1vbnRoIChtb20sIHZhbHVlKSB7XG4gICAgICAgIHZhciBkYXlPZk1vbnRoO1xuXG4gICAgICAgIGlmICghbW9tLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgLy8gTm8gb3BcbiAgICAgICAgICAgIHJldHVybiBtb207XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgaWYgKC9eXFxkKyQvLnRlc3QodmFsdWUpKSB7XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0b0ludCh2YWx1ZSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHZhbHVlID0gbW9tLmxvY2FsZURhdGEoKS5tb250aHNQYXJzZSh2YWx1ZSk7XG4gICAgICAgICAgICAgICAgLy8gVE9ETzogQW5vdGhlciBzaWxlbnQgZmFpbHVyZT9cbiAgICAgICAgICAgICAgICBpZiAoIWlzTnVtYmVyKHZhbHVlKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbW9tO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGRheU9mTW9udGggPSBNYXRoLm1pbihtb20uZGF0ZSgpLCBkYXlzSW5Nb250aChtb20ueWVhcigpLCB2YWx1ZSkpO1xuICAgICAgICBtb20uX2RbJ3NldCcgKyAobW9tLl9pc1VUQyA/ICdVVEMnIDogJycpICsgJ01vbnRoJ10odmFsdWUsIGRheU9mTW9udGgpO1xuICAgICAgICByZXR1cm4gbW9tO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldE1vbnRoICh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgIT0gbnVsbCkge1xuICAgICAgICAgICAgc2V0TW9udGgodGhpcywgdmFsdWUpO1xuICAgICAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZ2V0KHRoaXMsICdNb250aCcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RGF5c0luTW9udGggKCkge1xuICAgICAgICByZXR1cm4gZGF5c0luTW9udGgodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSk7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRNb250aHNTaG9ydFJlZ2V4ID0gbWF0Y2hXb3JkO1xuICAgIGZ1bmN0aW9uIG1vbnRoc1Nob3J0UmVnZXggKGlzU3RyaWN0KSB7XG4gICAgICAgIGlmICh0aGlzLl9tb250aHNQYXJzZUV4YWN0KSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZU1vbnRoc1BhcnNlLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNTdHJpY3QpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1Nob3J0UmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNTaG9ydFJlZ2V4JykpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9tb250aHNTaG9ydFJlZ2V4ID0gZGVmYXVsdE1vbnRoc1Nob3J0UmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleCAmJiBpc1N0cmljdCA/XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRTdHJpY3RSZWdleCA6IHRoaXMuX21vbnRoc1Nob3J0UmVnZXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdE1vbnRoc1JlZ2V4ID0gbWF0Y2hXb3JkO1xuICAgIGZ1bmN0aW9uIG1vbnRoc1JlZ2V4IChpc1N0cmljdCkge1xuICAgICAgICBpZiAodGhpcy5fbW9udGhzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfbW9udGhzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIGNvbXB1dGVNb250aHNQYXJzZS5jYWxsKHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGlzU3RyaWN0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ19tb250aHNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fbW9udGhzUmVnZXggPSBkZWZhdWx0TW9udGhzUmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fbW9udGhzU3RyaWN0UmVnZXggJiYgaXNTdHJpY3QgP1xuICAgICAgICAgICAgICAgIHRoaXMuX21vbnRoc1N0cmljdFJlZ2V4IDogdGhpcy5fbW9udGhzUmVnZXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjb21wdXRlTW9udGhzUGFyc2UgKCkge1xuICAgICAgICBmdW5jdGlvbiBjbXBMZW5SZXYoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGIubGVuZ3RoIC0gYS5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgc2hvcnRQaWVjZXMgPSBbXSwgbG9uZ1BpZWNlcyA9IFtdLCBtaXhlZFBpZWNlcyA9IFtdLFxuICAgICAgICAgICAgaSwgbW9tO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIGldKTtcbiAgICAgICAgICAgIHNob3J0UGllY2VzLnB1c2godGhpcy5tb250aHNTaG9ydChtb20sICcnKSk7XG4gICAgICAgICAgICBsb25nUGllY2VzLnB1c2godGhpcy5tb250aHMobW9tLCAnJykpO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXMucHVzaCh0aGlzLm1vbnRocyhtb20sICcnKSk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHRoaXMubW9udGhzU2hvcnQobW9tLCAnJykpO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNvcnRpbmcgbWFrZXMgc3VyZSBpZiBvbmUgbW9udGggKG9yIGFiYnIpIGlzIGEgcHJlZml4IG9mIGFub3RoZXIgaXRcbiAgICAgICAgLy8gd2lsbCBtYXRjaCB0aGUgbG9uZ2VyIHBpZWNlLlxuICAgICAgICBzaG9ydFBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIGxvbmdQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBtaXhlZFBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCAxMjsgaSsrKSB7XG4gICAgICAgICAgICBzaG9ydFBpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKHNob3J0UGllY2VzW2ldKTtcbiAgICAgICAgICAgIGxvbmdQaWVjZXNbaV0gPSByZWdleEVzY2FwZShsb25nUGllY2VzW2ldKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMjQ7IGkrKykge1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXNbaV0gPSByZWdleEVzY2FwZShtaXhlZFBpZWNlc1tpXSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9tb250aHNSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG1peGVkUGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fbW9udGhzU2hvcnRSZWdleCA9IHRoaXMuX21vbnRoc1JlZ2V4O1xuICAgICAgICB0aGlzLl9tb250aHNTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIGxvbmdQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl9tb250aHNTaG9ydFN0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgc2hvcnRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZURhdGUgKHksIG0sIGQsIGgsIE0sIHMsIG1zKSB7XG4gICAgICAgIC8vIGNhbid0IGp1c3QgYXBwbHkoKSB0byBjcmVhdGUgYSBkYXRlOlxuICAgICAgICAvLyBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL3EvMTgxMzQ4XG4gICAgICAgIHZhciBkYXRlO1xuICAgICAgICAvLyB0aGUgZGF0ZSBjb25zdHJ1Y3RvciByZW1hcHMgeWVhcnMgMC05OSB0byAxOTAwLTE5OTlcbiAgICAgICAgaWYgKHkgPCAxMDAgJiYgeSA+PSAwKSB7XG4gICAgICAgICAgICAvLyBwcmVzZXJ2ZSBsZWFwIHllYXJzIHVzaW5nIGEgZnVsbCA0MDAgeWVhciBjeWNsZSwgdGhlbiByZXNldFxuICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKHkgKyA0MDAsIG0sIGQsIGgsIE0sIHMsIG1zKTtcbiAgICAgICAgICAgIGlmIChpc0Zpbml0ZShkYXRlLmdldEZ1bGxZZWFyKCkpKSB7XG4gICAgICAgICAgICAgICAgZGF0ZS5zZXRGdWxsWWVhcih5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZSh5LCBtLCBkLCBoLCBNLCBzLCBtcyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZGF0ZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVVVENEYXRlICh5KSB7XG4gICAgICAgIHZhciBkYXRlO1xuICAgICAgICAvLyB0aGUgRGF0ZS5VVEMgZnVuY3Rpb24gcmVtYXBzIHllYXJzIDAtOTkgdG8gMTkwMC0xOTk5XG4gICAgICAgIGlmICh5IDwgMTAwICYmIHkgPj0gMCkge1xuICAgICAgICAgICAgdmFyIGFyZ3MgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMpO1xuICAgICAgICAgICAgLy8gcHJlc2VydmUgbGVhcCB5ZWFycyB1c2luZyBhIGZ1bGwgNDAwIHllYXIgY3ljbGUsIHRoZW4gcmVzZXRcbiAgICAgICAgICAgIGFyZ3NbMF0gPSB5ICsgNDAwO1xuICAgICAgICAgICAgZGF0ZSA9IG5ldyBEYXRlKERhdGUuVVRDLmFwcGx5KG51bGwsIGFyZ3MpKTtcbiAgICAgICAgICAgIGlmIChpc0Zpbml0ZShkYXRlLmdldFVUQ0Z1bGxZZWFyKCkpKSB7XG4gICAgICAgICAgICAgICAgZGF0ZS5zZXRVVENGdWxsWWVhcih5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGRhdGUgPSBuZXcgRGF0ZShEYXRlLlVUQy5hcHBseShudWxsLCBhcmd1bWVudHMpKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBkYXRlO1xuICAgIH1cblxuICAgIC8vIHN0YXJ0LW9mLWZpcnN0LXdlZWsgLSBzdGFydC1vZi15ZWFyXG4gICAgZnVuY3Rpb24gZmlyc3RXZWVrT2Zmc2V0KHllYXIsIGRvdywgZG95KSB7XG4gICAgICAgIHZhciAvLyBmaXJzdC13ZWVrIGRheSAtLSB3aGljaCBqYW51YXJ5IGlzIGFsd2F5cyBpbiB0aGUgZmlyc3Qgd2VlayAoNCBmb3IgaXNvLCAxIGZvciBvdGhlcilcbiAgICAgICAgICAgIGZ3ZCA9IDcgKyBkb3cgLSBkb3ksXG4gICAgICAgICAgICAvLyBmaXJzdC13ZWVrIGRheSBsb2NhbCB3ZWVrZGF5IC0tIHdoaWNoIGxvY2FsIHdlZWtkYXkgaXMgZndkXG4gICAgICAgICAgICBmd2RsdyA9ICg3ICsgY3JlYXRlVVRDRGF0ZSh5ZWFyLCAwLCBmd2QpLmdldFVUQ0RheSgpIC0gZG93KSAlIDc7XG5cbiAgICAgICAgcmV0dXJuIC1md2RsdyArIGZ3ZCAtIDE7XG4gICAgfVxuXG4gICAgLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSVNPX3dlZWtfZGF0ZSNDYWxjdWxhdGluZ19hX2RhdGVfZ2l2ZW5fdGhlX3llYXIuMkNfd2Vla19udW1iZXJfYW5kX3dlZWtkYXlcbiAgICBmdW5jdGlvbiBkYXlPZlllYXJGcm9tV2Vla3MoeWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIGxvY2FsV2Vla2RheSA9ICg3ICsgd2Vla2RheSAtIGRvdykgJSA3LFxuICAgICAgICAgICAgd2Vla09mZnNldCA9IGZpcnN0V2Vla09mZnNldCh5ZWFyLCBkb3csIGRveSksXG4gICAgICAgICAgICBkYXlPZlllYXIgPSAxICsgNyAqICh3ZWVrIC0gMSkgKyBsb2NhbFdlZWtkYXkgKyB3ZWVrT2Zmc2V0LFxuICAgICAgICAgICAgcmVzWWVhciwgcmVzRGF5T2ZZZWFyO1xuXG4gICAgICAgIGlmIChkYXlPZlllYXIgPD0gMCkge1xuICAgICAgICAgICAgcmVzWWVhciA9IHllYXIgLSAxO1xuICAgICAgICAgICAgcmVzRGF5T2ZZZWFyID0gZGF5c0luWWVhcihyZXNZZWFyKSArIGRheU9mWWVhcjtcbiAgICAgICAgfSBlbHNlIGlmIChkYXlPZlllYXIgPiBkYXlzSW5ZZWFyKHllYXIpKSB7XG4gICAgICAgICAgICByZXNZZWFyID0geWVhciArIDE7XG4gICAgICAgICAgICByZXNEYXlPZlllYXIgPSBkYXlPZlllYXIgLSBkYXlzSW5ZZWFyKHllYXIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVzWWVhciA9IHllYXI7XG4gICAgICAgICAgICByZXNEYXlPZlllYXIgPSBkYXlPZlllYXI7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgeWVhcjogcmVzWWVhcixcbiAgICAgICAgICAgIGRheU9mWWVhcjogcmVzRGF5T2ZZZWFyXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Vla09mWWVhcihtb20sIGRvdywgZG95KSB7XG4gICAgICAgIHZhciB3ZWVrT2Zmc2V0ID0gZmlyc3RXZWVrT2Zmc2V0KG1vbS55ZWFyKCksIGRvdywgZG95KSxcbiAgICAgICAgICAgIHdlZWsgPSBNYXRoLmZsb29yKChtb20uZGF5T2ZZZWFyKCkgLSB3ZWVrT2Zmc2V0IC0gMSkgLyA3KSArIDEsXG4gICAgICAgICAgICByZXNXZWVrLCByZXNZZWFyO1xuXG4gICAgICAgIGlmICh3ZWVrIDwgMSkge1xuICAgICAgICAgICAgcmVzWWVhciA9IG1vbS55ZWFyKCkgLSAxO1xuICAgICAgICAgICAgcmVzV2VlayA9IHdlZWsgKyB3ZWVrc0luWWVhcihyZXNZZWFyLCBkb3csIGRveSk7XG4gICAgICAgIH0gZWxzZSBpZiAod2VlayA+IHdlZWtzSW5ZZWFyKG1vbS55ZWFyKCksIGRvdywgZG95KSkge1xuICAgICAgICAgICAgcmVzV2VlayA9IHdlZWsgLSB3ZWVrc0luWWVhcihtb20ueWVhcigpLCBkb3csIGRveSk7XG4gICAgICAgICAgICByZXNZZWFyID0gbW9tLnllYXIoKSArIDE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXNZZWFyID0gbW9tLnllYXIoKTtcbiAgICAgICAgICAgIHJlc1dlZWsgPSB3ZWVrO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHdlZWs6IHJlc1dlZWssXG4gICAgICAgICAgICB5ZWFyOiByZXNZZWFyXG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gd2Vla3NJblllYXIoeWVhciwgZG93LCBkb3kpIHtcbiAgICAgICAgdmFyIHdlZWtPZmZzZXQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciwgZG93LCBkb3kpLFxuICAgICAgICAgICAgd2Vla09mZnNldE5leHQgPSBmaXJzdFdlZWtPZmZzZXQoeWVhciArIDEsIGRvdywgZG95KTtcbiAgICAgICAgcmV0dXJuIChkYXlzSW5ZZWFyKHllYXIpIC0gd2Vla09mZnNldCArIHdlZWtPZmZzZXROZXh0KSAvIDc7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ3cnLCBbJ3d3JywgMl0sICd3bycsICd3ZWVrJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ1cnLCBbJ1dXJywgMl0sICdXbycsICdpc29XZWVrJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ3dlZWsnLCAndycpO1xuICAgIGFkZFVuaXRBbGlhcygnaXNvV2VlaycsICdXJyk7XG5cbiAgICAvLyBQUklPUklUSUVTXG5cbiAgICBhZGRVbml0UHJpb3JpdHkoJ3dlZWsnLCA1KTtcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2lzb1dlZWsnLCA1KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ3cnLCAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCd3dycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdXJywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignV1cnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihbJ3cnLCAnd3cnLCAnVycsICdXVyddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgd2Vla1t0b2tlbi5zdWJzdHIoMCwgMSldID0gdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgLy8gTE9DQUxFU1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlV2VlayAobW9tKSB7XG4gICAgICAgIHJldHVybiB3ZWVrT2ZZZWFyKG1vbSwgdGhpcy5fd2Vlay5kb3csIHRoaXMuX3dlZWsuZG95KS53ZWVrO1xuICAgIH1cblxuICAgIHZhciBkZWZhdWx0TG9jYWxlV2VlayA9IHtcbiAgICAgICAgZG93IDogMCwgLy8gU3VuZGF5IGlzIHRoZSBmaXJzdCBkYXkgb2YgdGhlIHdlZWsuXG4gICAgICAgIGRveSA6IDYgIC8vIFRoZSB3ZWVrIHRoYXQgY29udGFpbnMgSmFuIDZ0aCBpcyB0aGUgZmlyc3Qgd2VlayBvZiB0aGUgeWVhci5cbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gbG9jYWxlRmlyc3REYXlPZldlZWsgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fd2Vlay5kb3c7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbG9jYWxlRmlyc3REYXlPZlllYXIgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fd2Vlay5kb3k7XG4gICAgfVxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0V2VlayAoaW5wdXQpIHtcbiAgICAgICAgdmFyIHdlZWsgPSB0aGlzLmxvY2FsZURhdGEoKS53ZWVrKHRoaXMpO1xuICAgICAgICByZXR1cm4gaW5wdXQgPT0gbnVsbCA/IHdlZWsgOiB0aGlzLmFkZCgoaW5wdXQgLSB3ZWVrKSAqIDcsICdkJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0SVNPV2VlayAoaW5wdXQpIHtcbiAgICAgICAgdmFyIHdlZWsgPSB3ZWVrT2ZZZWFyKHRoaXMsIDEsIDQpLndlZWs7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2VlayA6IHRoaXMuYWRkKChpbnB1dCAtIHdlZWspICogNywgJ2QnKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignZCcsIDAsICdkbycsICdkYXknKTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdkZCcsIDAsIDAsIGZ1bmN0aW9uIChmb3JtYXQpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLndlZWtkYXlzTWluKHRoaXMsIGZvcm1hdCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignZGRkJywgMCwgMCwgZnVuY3Rpb24gKGZvcm1hdCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkud2Vla2RheXNTaG9ydCh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2RkZGQnLCAwLCAwLCBmdW5jdGlvbiAoZm9ybWF0KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS53ZWVrZGF5cyh0aGlzLCBmb3JtYXQpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ2UnLCAwLCAwLCAnd2Vla2RheScpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdFJywgMCwgMCwgJ2lzb1dlZWtkYXknKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnZGF5JywgJ2QnKTtcbiAgICBhZGRVbml0QWxpYXMoJ3dlZWtkYXknLCAnZScpO1xuICAgIGFkZFVuaXRBbGlhcygnaXNvV2Vla2RheScsICdFJyk7XG5cbiAgICAvLyBQUklPUklUWVxuICAgIGFkZFVuaXRQcmlvcml0eSgnZGF5JywgMTEpO1xuICAgIGFkZFVuaXRQcmlvcml0eSgnd2Vla2RheScsIDExKTtcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2lzb1dlZWtkYXknLCAxMSk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdkJywgICAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdlJywgICAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdFJywgICAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdkZCcsICAgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgcmV0dXJuIGxvY2FsZS53ZWVrZGF5c01pblJlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcbiAgICBhZGRSZWdleFRva2VuKCdkZGQnLCAgIGZ1bmN0aW9uIChpc1N0cmljdCwgbG9jYWxlKSB7XG4gICAgICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNTaG9ydFJlZ2V4KGlzU3RyaWN0KTtcbiAgICB9KTtcbiAgICBhZGRSZWdleFRva2VuKCdkZGRkJywgICBmdW5jdGlvbiAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLndlZWtkYXlzUmVnZXgoaXNTdHJpY3QpO1xuICAgIH0pO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWydkZCcsICdkZGQnLCAnZGRkZCddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgdmFyIHdlZWtkYXkgPSBjb25maWcuX2xvY2FsZS53ZWVrZGF5c1BhcnNlKGlucHV0LCB0b2tlbiwgY29uZmlnLl9zdHJpY3QpO1xuICAgICAgICAvLyBpZiB3ZSBkaWRuJ3QgZ2V0IGEgd2Vla2RheSBuYW1lLCBtYXJrIHRoZSBkYXRlIGFzIGludmFsaWRcbiAgICAgICAgaWYgKHdlZWtkYXkgIT0gbnVsbCkge1xuICAgICAgICAgICAgd2Vlay5kID0gd2Vla2RheTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmludmFsaWRXZWVrZGF5ID0gaW5wdXQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIGFkZFdlZWtQYXJzZVRva2VuKFsnZCcsICdlJywgJ0UnXSwgZnVuY3Rpb24gKGlucHV0LCB3ZWVrLCBjb25maWcsIHRva2VuKSB7XG4gICAgICAgIHdlZWtbdG9rZW5dID0gdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgLy8gSEVMUEVSU1xuXG4gICAgZnVuY3Rpb24gcGFyc2VXZWVrZGF5KGlucHV0LCBsb2NhbGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCAhPT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaXNOYU4oaW5wdXQpKSB7XG4gICAgICAgICAgICByZXR1cm4gcGFyc2VJbnQoaW5wdXQsIDEwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlucHV0ID0gbG9jYWxlLndlZWtkYXlzUGFyc2UoaW5wdXQpO1xuICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnbnVtYmVyJykge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0O1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcGFyc2VJc29XZWVrZGF5KGlucHV0LCBsb2NhbGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIHJldHVybiBsb2NhbGUud2Vla2RheXNQYXJzZShpbnB1dCkgJSA3IHx8IDc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGlzTmFOKGlucHV0KSA/IG51bGwgOiBpbnB1dDtcbiAgICB9XG5cbiAgICAvLyBMT0NBTEVTXG4gICAgZnVuY3Rpb24gc2hpZnRXZWVrZGF5cyAod3MsIG4pIHtcbiAgICAgICAgcmV0dXJuIHdzLnNsaWNlKG4sIDcpLmNvbmNhdCh3cy5zbGljZSgwLCBuKSk7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVXZWVrZGF5cyA9ICdTdW5kYXlfTW9uZGF5X1R1ZXNkYXlfV2VkbmVzZGF5X1RodXJzZGF5X0ZyaWRheV9TYXR1cmRheScuc3BsaXQoJ18nKTtcbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5cyAobSwgZm9ybWF0KSB7XG4gICAgICAgIHZhciB3ZWVrZGF5cyA9IGlzQXJyYXkodGhpcy5fd2Vla2RheXMpID8gdGhpcy5fd2Vla2RheXMgOlxuICAgICAgICAgICAgdGhpcy5fd2Vla2RheXNbKG0gJiYgbSAhPT0gdHJ1ZSAmJiB0aGlzLl93ZWVrZGF5cy5pc0Zvcm1hdC50ZXN0KGZvcm1hdCkpID8gJ2Zvcm1hdCcgOiAnc3RhbmRhbG9uZSddO1xuICAgICAgICByZXR1cm4gKG0gPT09IHRydWUpID8gc2hpZnRXZWVrZGF5cyh3ZWVrZGF5cywgdGhpcy5fd2Vlay5kb3cpXG4gICAgICAgICAgICA6IChtKSA/IHdlZWtkYXlzW20uZGF5KCldIDogd2Vla2RheXM7XG4gICAgfVxuXG4gICAgdmFyIGRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0ID0gJ1N1bl9Nb25fVHVlX1dlZF9UaHVfRnJpX1NhdCcuc3BsaXQoJ18nKTtcbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5c1Nob3J0IChtKSB7XG4gICAgICAgIHJldHVybiAobSA9PT0gdHJ1ZSkgPyBzaGlmdFdlZWtkYXlzKHRoaXMuX3dlZWtkYXlzU2hvcnQsIHRoaXMuX3dlZWsuZG93KVxuICAgICAgICAgICAgOiAobSkgPyB0aGlzLl93ZWVrZGF5c1Nob3J0W20uZGF5KCldIDogdGhpcy5fd2Vla2RheXNTaG9ydDtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZVdlZWtkYXlzTWluID0gJ1N1X01vX1R1X1dlX1RoX0ZyX1NhJy5zcGxpdCgnXycpO1xuICAgIGZ1bmN0aW9uIGxvY2FsZVdlZWtkYXlzTWluIChtKSB7XG4gICAgICAgIHJldHVybiAobSA9PT0gdHJ1ZSkgPyBzaGlmdFdlZWtkYXlzKHRoaXMuX3dlZWtkYXlzTWluLCB0aGlzLl93ZWVrLmRvdylcbiAgICAgICAgICAgIDogKG0pID8gdGhpcy5fd2Vla2RheXNNaW5bbS5kYXkoKV0gOiB0aGlzLl93ZWVrZGF5c01pbjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVTdHJpY3RQYXJzZSQxKHdlZWtkYXlOYW1lLCBmb3JtYXQsIHN0cmljdCkge1xuICAgICAgICB2YXIgaSwgaWksIG1vbSwgbGxjID0gd2Vla2RheU5hbWUudG9Mb2NhbGVMb3dlckNhc2UoKTtcbiAgICAgICAgaWYgKCF0aGlzLl93ZWVrZGF5c1BhcnNlKSB7XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX21pbldlZWtkYXlzUGFyc2UgPSBbXTtcblxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7ICsraSkge1xuICAgICAgICAgICAgICAgIG1vbSA9IGNyZWF0ZVVUQyhbMjAwMCwgMV0pLmRheShpKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlW2ldID0gdGhpcy53ZWVrZGF5c01pbihtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZVtpXSA9IHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKS50b0xvY2FsZUxvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2VbaV0gPSB0aGlzLndlZWtkYXlzKG1vbSwgJycpLnRvTG9jYWxlTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoc3RyaWN0KSB7XG4gICAgICAgICAgICBpZiAoZm9ybWF0ID09PSAnZGRkZCcpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl93ZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gJ2RkZCcpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gaWkgIT09IC0xID8gaWkgOiBudWxsO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGZvcm1hdCA9PT0gJ2RkZGQnKSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIGlmIChpaSAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGlpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9taW5XZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKGZvcm1hdCA9PT0gJ2RkZCcpIHtcbiAgICAgICAgICAgICAgICBpaSA9IGluZGV4T2YuY2FsbCh0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX3dlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgaWYgKGlpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gaWk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGlpID0gaW5kZXhPZi5jYWxsKHRoaXMuX21pbldlZWtkYXlzUGFyc2UsIGxsYyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGlpICE9PSAtMSA/IGlpIDogbnVsbDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fbWluV2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fd2Vla2RheXNQYXJzZSwgbGxjKTtcbiAgICAgICAgICAgICAgICBpZiAoaWkgIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBpaTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWkgPSBpbmRleE9mLmNhbGwodGhpcy5fc2hvcnRXZWVrZGF5c1BhcnNlLCBsbGMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBpaSAhPT0gLTEgPyBpaSA6IG51bGw7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVXZWVrZGF5c1BhcnNlICh3ZWVrZGF5TmFtZSwgZm9ybWF0LCBzdHJpY3QpIHtcbiAgICAgICAgdmFyIGksIG1vbSwgcmVnZXg7XG5cbiAgICAgICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgcmV0dXJuIGhhbmRsZVN0cmljdFBhcnNlJDEuY2FsbCh0aGlzLCB3ZWVrZGF5TmFtZSwgZm9ybWF0LCBzdHJpY3QpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF0aGlzLl93ZWVrZGF5c1BhcnNlKSB7XG4gICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9taW5XZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgICAgICB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2UgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuX2Z1bGxXZWVrZGF5c1BhcnNlID0gW107XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICAvLyBtYWtlIHRoZSByZWdleCBpZiB3ZSBkb24ndCBoYXZlIGl0IGFscmVhZHlcblxuICAgICAgICAgICAgbW9tID0gY3JlYXRlVVRDKFsyMDAwLCAxXSkuZGF5KGkpO1xuICAgICAgICAgICAgaWYgKHN0cmljdCAmJiAhdGhpcy5fZnVsbFdlZWtkYXlzUGFyc2VbaV0pIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9mdWxsV2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy53ZWVrZGF5cyhtb20sICcnKS5yZXBsYWNlKCcuJywgJ1xcXFwuPycpICsgJyQnLCAnaScpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nob3J0V2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy53ZWVrZGF5c1Nob3J0KG1vbSwgJycpLnJlcGxhY2UoJy4nLCAnXFxcXC4/JykgKyAnJCcsICdpJyk7XG4gICAgICAgICAgICAgICAgdGhpcy5fbWluV2Vla2RheXNQYXJzZVtpXSA9IG5ldyBSZWdFeHAoJ14nICsgdGhpcy53ZWVrZGF5c01pbihtb20sICcnKS5yZXBsYWNlKCcuJywgJ1xcXFwuPycpICsgJyQnLCAnaScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLl93ZWVrZGF5c1BhcnNlW2ldKSB7XG4gICAgICAgICAgICAgICAgcmVnZXggPSAnXicgKyB0aGlzLndlZWtkYXlzKG1vbSwgJycpICsgJ3xeJyArIHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKSArICd8XicgKyB0aGlzLndlZWtkYXlzTWluKG1vbSwgJycpO1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUGFyc2VbaV0gPSBuZXcgUmVnRXhwKHJlZ2V4LnJlcGxhY2UoJy4nLCAnJyksICdpJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyB0ZXN0IHRoZSByZWdleFxuICAgICAgICAgICAgaWYgKHN0cmljdCAmJiBmb3JtYXQgPT09ICdkZGRkJyAmJiB0aGlzLl9mdWxsV2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChzdHJpY3QgJiYgZm9ybWF0ID09PSAnZGRkJyAmJiB0aGlzLl9zaG9ydFdlZWtkYXlzUGFyc2VbaV0udGVzdCh3ZWVrZGF5TmFtZSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RyaWN0ICYmIGZvcm1hdCA9PT0gJ2RkJyAmJiB0aGlzLl9taW5XZWVrZGF5c1BhcnNlW2ldLnRlc3Qod2Vla2RheU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCFzdHJpY3QgJiYgdGhpcy5fd2Vla2RheXNQYXJzZVtpXS50ZXN0KHdlZWtkYXlOYW1lKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gTU9NRU5UU1xuXG4gICAgZnVuY3Rpb24gZ2V0U2V0RGF5T2ZXZWVrIChpbnB1dCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gaW5wdXQgIT0gbnVsbCA/IHRoaXMgOiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRheSA9IHRoaXMuX2lzVVRDID8gdGhpcy5fZC5nZXRVVENEYXkoKSA6IHRoaXMuX2QuZ2V0RGF5KCk7XG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpbnB1dCA9IHBhcnNlV2Vla2RheShpbnB1dCwgdGhpcy5sb2NhbGVEYXRhKCkpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYWRkKGlucHV0IC0gZGF5LCAnZCcpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGRheTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGdldFNldExvY2FsZURheU9mV2VlayAoaW5wdXQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgICAgICB9XG4gICAgICAgIHZhciB3ZWVrZGF5ID0gKHRoaXMuZGF5KCkgKyA3IC0gdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG93KSAlIDc7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gd2Vla2RheSA6IHRoaXMuYWRkKGlucHV0IC0gd2Vla2RheSwgJ2QnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRJU09EYXlPZldlZWsgKGlucHV0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBpbnB1dCAhPSBudWxsID8gdGhpcyA6IE5hTjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGJlaGF2ZXMgdGhlIHNhbWUgYXMgbW9tZW50I2RheSBleGNlcHRcbiAgICAgICAgLy8gYXMgYSBnZXR0ZXIsIHJldHVybnMgNyBpbnN0ZWFkIG9mIDAgKDEtNyByYW5nZSBpbnN0ZWFkIG9mIDAtNilcbiAgICAgICAgLy8gYXMgYSBzZXR0ZXIsIHN1bmRheSBzaG91bGQgYmVsb25nIHRvIHRoZSBwcmV2aW91cyB3ZWVrLlxuXG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICB2YXIgd2Vla2RheSA9IHBhcnNlSXNvV2Vla2RheShpbnB1dCwgdGhpcy5sb2NhbGVEYXRhKCkpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZGF5KHRoaXMuZGF5KCkgJSA3ID8gd2Vla2RheSA6IHdlZWtkYXkgLSA3KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmRheSgpIHx8IDc7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdFdlZWtkYXlzUmVnZXggPSBtYXRjaFdvcmQ7XG4gICAgZnVuY3Rpb24gd2Vla2RheXNSZWdleCAoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZVdlZWtkYXlzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzUmVnZXggPSBkZWZhdWx0V2Vla2RheXNSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4ICYmIGlzU3RyaWN0ID9cbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4IDogdGhpcy5fd2Vla2RheXNSZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBkZWZhdWx0V2Vla2RheXNTaG9ydFJlZ2V4ID0gbWF0Y2hXb3JkO1xuICAgIGZ1bmN0aW9uIHdlZWtkYXlzU2hvcnRSZWdleCAoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZVdlZWtkYXlzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXg7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBpZiAoIWhhc093blByb3AodGhpcywgJ193ZWVrZGF5c1Nob3J0UmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRSZWdleCA9IGRlZmF1bHRXZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNTaG9ydFN0cmljdFJlZ2V4ICYmIGlzU3RyaWN0ID9cbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXggOiB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdFdlZWtkYXlzTWluUmVnZXggPSBtYXRjaFdvcmQ7XG4gICAgZnVuY3Rpb24gd2Vla2RheXNNaW5SZWdleCAoaXNTdHJpY3QpIHtcbiAgICAgICAgaWYgKHRoaXMuX3dlZWtkYXlzUGFyc2VFeGFjdCkge1xuICAgICAgICAgICAgaWYgKCFoYXNPd25Qcm9wKHRoaXMsICdfd2Vla2RheXNSZWdleCcpKSB7XG4gICAgICAgICAgICAgICAgY29tcHV0ZVdlZWtkYXlzUGFyc2UuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChpc1N0cmljdCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5fd2Vla2RheXNNaW5SZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICghaGFzT3duUHJvcCh0aGlzLCAnX3dlZWtkYXlzTWluUmVnZXgnKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3dlZWtkYXlzTWluUmVnZXggPSBkZWZhdWx0V2Vla2RheXNNaW5SZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4ICYmIGlzU3RyaWN0ID9cbiAgICAgICAgICAgICAgICB0aGlzLl93ZWVrZGF5c01pblN0cmljdFJlZ2V4IDogdGhpcy5fd2Vla2RheXNNaW5SZWdleDtcbiAgICAgICAgfVxuICAgIH1cblxuXG4gICAgZnVuY3Rpb24gY29tcHV0ZVdlZWtkYXlzUGFyc2UgKCkge1xuICAgICAgICBmdW5jdGlvbiBjbXBMZW5SZXYoYSwgYikge1xuICAgICAgICAgICAgcmV0dXJuIGIubGVuZ3RoIC0gYS5sZW5ndGg7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgbWluUGllY2VzID0gW10sIHNob3J0UGllY2VzID0gW10sIGxvbmdQaWVjZXMgPSBbXSwgbWl4ZWRQaWVjZXMgPSBbXSxcbiAgICAgICAgICAgIGksIG1vbSwgbWlucCwgc2hvcnRwLCBsb25ncDtcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IDc7IGkrKykge1xuICAgICAgICAgICAgLy8gbWFrZSB0aGUgcmVnZXggaWYgd2UgZG9uJ3QgaGF2ZSBpdCBhbHJlYWR5XG4gICAgICAgICAgICBtb20gPSBjcmVhdGVVVEMoWzIwMDAsIDFdKS5kYXkoaSk7XG4gICAgICAgICAgICBtaW5wID0gdGhpcy53ZWVrZGF5c01pbihtb20sICcnKTtcbiAgICAgICAgICAgIHNob3J0cCA9IHRoaXMud2Vla2RheXNTaG9ydChtb20sICcnKTtcbiAgICAgICAgICAgIGxvbmdwID0gdGhpcy53ZWVrZGF5cyhtb20sICcnKTtcbiAgICAgICAgICAgIG1pblBpZWNlcy5wdXNoKG1pbnApO1xuICAgICAgICAgICAgc2hvcnRQaWVjZXMucHVzaChzaG9ydHApO1xuICAgICAgICAgICAgbG9uZ1BpZWNlcy5wdXNoKGxvbmdwKTtcbiAgICAgICAgICAgIG1peGVkUGllY2VzLnB1c2gobWlucCk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKHNob3J0cCk7XG4gICAgICAgICAgICBtaXhlZFBpZWNlcy5wdXNoKGxvbmdwKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTb3J0aW5nIG1ha2VzIHN1cmUgaWYgb25lIHdlZWtkYXkgKG9yIGFiYnIpIGlzIGEgcHJlZml4IG9mIGFub3RoZXIgaXRcbiAgICAgICAgLy8gd2lsbCBtYXRjaCB0aGUgbG9uZ2VyIHBpZWNlLlxuICAgICAgICBtaW5QaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBzaG9ydFBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIGxvbmdQaWVjZXMuc29ydChjbXBMZW5SZXYpO1xuICAgICAgICBtaXhlZFBpZWNlcy5zb3J0KGNtcExlblJldik7XG4gICAgICAgIGZvciAoaSA9IDA7IGkgPCA3OyBpKyspIHtcbiAgICAgICAgICAgIHNob3J0UGllY2VzW2ldID0gcmVnZXhFc2NhcGUoc2hvcnRQaWVjZXNbaV0pO1xuICAgICAgICAgICAgbG9uZ1BpZWNlc1tpXSA9IHJlZ2V4RXNjYXBlKGxvbmdQaWVjZXNbaV0pO1xuICAgICAgICAgICAgbWl4ZWRQaWVjZXNbaV0gPSByZWdleEVzY2FwZShtaXhlZFBpZWNlc1tpXSk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl93ZWVrZGF5c1JlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbWl4ZWRQaWVjZXMuam9pbignfCcpICsgJyknLCAnaScpO1xuICAgICAgICB0aGlzLl93ZWVrZGF5c1Nob3J0UmVnZXggPSB0aGlzLl93ZWVrZGF5c1JlZ2V4O1xuICAgICAgICB0aGlzLl93ZWVrZGF5c01pblJlZ2V4ID0gdGhpcy5fd2Vla2RheXNSZWdleDtcblxuICAgICAgICB0aGlzLl93ZWVrZGF5c1N0cmljdFJlZ2V4ID0gbmV3IFJlZ0V4cCgnXignICsgbG9uZ1BpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgICAgIHRoaXMuX3dlZWtkYXlzU2hvcnRTdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIHNob3J0UGllY2VzLmpvaW4oJ3wnKSArICcpJywgJ2knKTtcbiAgICAgICAgdGhpcy5fd2Vla2RheXNNaW5TdHJpY3RSZWdleCA9IG5ldyBSZWdFeHAoJ14oJyArIG1pblBpZWNlcy5qb2luKCd8JykgKyAnKScsICdpJyk7XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgZnVuY3Rpb24gaEZvcm1hdCgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaG91cnMoKSAlIDEyIHx8IDEyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGtGb3JtYXQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhvdXJzKCkgfHwgMjQ7XG4gICAgfVxuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0gnLCBbJ0hIJywgMl0sIDAsICdob3VyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ2gnLCBbJ2hoJywgMl0sIDAsIGhGb3JtYXQpO1xuICAgIGFkZEZvcm1hdFRva2VuKCdrJywgWydraycsIDJdLCAwLCBrRm9ybWF0KTtcblxuICAgIGFkZEZvcm1hdFRva2VuKCdobW0nLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAnJyArIGhGb3JtYXQuYXBwbHkodGhpcykgKyB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMik7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbignaG1tc3MnLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiAnJyArIGhGb3JtYXQuYXBwbHkodGhpcykgKyB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMikgK1xuICAgICAgICAgICAgemVyb0ZpbGwodGhpcy5zZWNvbmRzKCksIDIpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0htbScsIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuICcnICsgdGhpcy5ob3VycygpICsgemVyb0ZpbGwodGhpcy5taW51dGVzKCksIDIpO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ0htbXNzJywgMCwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gJycgKyB0aGlzLmhvdXJzKCkgKyB6ZXJvRmlsbCh0aGlzLm1pbnV0ZXMoKSwgMikgK1xuICAgICAgICAgICAgemVyb0ZpbGwodGhpcy5zZWNvbmRzKCksIDIpO1xuICAgIH0pO1xuXG4gICAgZnVuY3Rpb24gbWVyaWRpZW0gKHRva2VuLCBsb3dlcmNhc2UpIHtcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4odG9rZW4sIDAsIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5tZXJpZGllbSh0aGlzLmhvdXJzKCksIHRoaXMubWludXRlcygpLCBsb3dlcmNhc2UpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBtZXJpZGllbSgnYScsIHRydWUpO1xuICAgIG1lcmlkaWVtKCdBJywgZmFsc2UpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdob3VyJywgJ2gnKTtcblxuICAgIC8vIFBSSU9SSVRZXG4gICAgYWRkVW5pdFByaW9yaXR5KCdob3VyJywgMTMpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgZnVuY3Rpb24gbWF0Y2hNZXJpZGllbSAoaXNTdHJpY3QsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLl9tZXJpZGllbVBhcnNlO1xuICAgIH1cblxuICAgIGFkZFJlZ2V4VG9rZW4oJ2EnLCAgbWF0Y2hNZXJpZGllbSk7XG4gICAgYWRkUmVnZXhUb2tlbignQScsICBtYXRjaE1lcmlkaWVtKTtcbiAgICBhZGRSZWdleFRva2VuKCdIJywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignaCcsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2snLCAgbWF0Y2gxdG8yKTtcbiAgICBhZGRSZWdleFRva2VuKCdISCcsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdoaCcsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdraycsIG1hdGNoMXRvMiwgbWF0Y2gyKTtcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ2htbScsIG1hdGNoM3RvNCk7XG4gICAgYWRkUmVnZXhUb2tlbignaG1tc3MnLCBtYXRjaDV0bzYpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0htbScsIG1hdGNoM3RvNCk7XG4gICAgYWRkUmVnZXhUb2tlbignSG1tc3MnLCBtYXRjaDV0bzYpO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ0gnLCAnSEgnXSwgSE9VUik7XG4gICAgYWRkUGFyc2VUb2tlbihbJ2snLCAna2snXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBrSW5wdXQgPSB0b0ludChpbnB1dCk7XG4gICAgICAgIGFycmF5W0hPVVJdID0ga0lucHV0ID09PSAyNCA/IDAgOiBrSW5wdXQ7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbihbJ2EnLCAnQSddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9pc1BtID0gY29uZmlnLl9sb2NhbGUuaXNQTShpbnB1dCk7XG4gICAgICAgIGNvbmZpZy5fbWVyaWRpZW0gPSBpbnB1dDtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKFsnaCcsICdoaCddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dCk7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB0cnVlO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ2htbScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICB2YXIgcG9zID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zKSk7XG4gICAgICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zKSk7XG4gICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLmJpZ0hvdXIgPSB0cnVlO1xuICAgIH0pO1xuICAgIGFkZFBhcnNlVG9rZW4oJ2htbXNzJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBwb3MxID0gaW5wdXQubGVuZ3RoIC0gNDtcbiAgICAgICAgdmFyIHBvczIgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MxKSk7XG4gICAgICAgIGFycmF5W01JTlVURV0gPSB0b0ludChpbnB1dC5zdWJzdHIocG9zMSwgMikpO1xuICAgICAgICBhcnJheVtTRUNPTkRdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczIpKTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuYmlnSG91ciA9IHRydWU7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbignSG1tJywgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIHZhciBwb3MgPSBpbnB1dC5sZW5ndGggLSAyO1xuICAgICAgICBhcnJheVtIT1VSXSA9IHRvSW50KGlucHV0LnN1YnN0cigwLCBwb3MpKTtcbiAgICAgICAgYXJyYXlbTUlOVVRFXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MpKTtcbiAgICB9KTtcbiAgICBhZGRQYXJzZVRva2VuKCdIbW1zcycsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICB2YXIgcG9zMSA9IGlucHV0Lmxlbmd0aCAtIDQ7XG4gICAgICAgIHZhciBwb3MyID0gaW5wdXQubGVuZ3RoIC0gMjtcbiAgICAgICAgYXJyYXlbSE9VUl0gPSB0b0ludChpbnB1dC5zdWJzdHIoMCwgcG9zMSkpO1xuICAgICAgICBhcnJheVtNSU5VVEVdID0gdG9JbnQoaW5wdXQuc3Vic3RyKHBvczEsIDIpKTtcbiAgICAgICAgYXJyYXlbU0VDT05EXSA9IHRvSW50KGlucHV0LnN1YnN0cihwb3MyKSk7XG4gICAgfSk7XG5cbiAgICAvLyBMT0NBTEVTXG5cbiAgICBmdW5jdGlvbiBsb2NhbGVJc1BNIChpbnB1dCkge1xuICAgICAgICAvLyBJRTggUXVpcmtzIE1vZGUgJiBJRTcgU3RhbmRhcmRzIE1vZGUgZG8gbm90IGFsbG93IGFjY2Vzc2luZyBzdHJpbmdzIGxpa2UgYXJyYXlzXG4gICAgICAgIC8vIFVzaW5nIGNoYXJBdCBzaG91bGQgYmUgbW9yZSBjb21wYXRpYmxlLlxuICAgICAgICByZXR1cm4gKChpbnB1dCArICcnKS50b0xvd2VyQ2FzZSgpLmNoYXJBdCgwKSA9PT0gJ3AnKTtcbiAgICB9XG5cbiAgICB2YXIgZGVmYXVsdExvY2FsZU1lcmlkaWVtUGFyc2UgPSAvW2FwXVxcLj9tP1xcLj8vaTtcbiAgICBmdW5jdGlvbiBsb2NhbGVNZXJpZGllbSAoaG91cnMsIG1pbnV0ZXMsIGlzTG93ZXIpIHtcbiAgICAgICAgaWYgKGhvdXJzID4gMTEpIHtcbiAgICAgICAgICAgIHJldHVybiBpc0xvd2VyID8gJ3BtJyA6ICdQTSc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gaXNMb3dlciA/ICdhbScgOiAnQU0nO1xuICAgICAgICB9XG4gICAgfVxuXG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICAvLyBTZXR0aW5nIHRoZSBob3VyIHNob3VsZCBrZWVwIHRoZSB0aW1lLCBiZWNhdXNlIHRoZSB1c2VyIGV4cGxpY2l0bHlcbiAgICAvLyBzcGVjaWZpZWQgd2hpY2ggaG91ciB0aGV5IHdhbnQuIFNvIHRyeWluZyB0byBtYWludGFpbiB0aGUgc2FtZSBob3VyIChpblxuICAgIC8vIGEgbmV3IHRpbWV6b25lKSBtYWtlcyBzZW5zZS4gQWRkaW5nL3N1YnRyYWN0aW5nIGhvdXJzIGRvZXMgbm90IGZvbGxvd1xuICAgIC8vIHRoaXMgcnVsZS5cbiAgICB2YXIgZ2V0U2V0SG91ciA9IG1ha2VHZXRTZXQoJ0hvdXJzJywgdHJ1ZSk7XG5cbiAgICB2YXIgYmFzZUNvbmZpZyA9IHtcbiAgICAgICAgY2FsZW5kYXI6IGRlZmF1bHRDYWxlbmRhcixcbiAgICAgICAgbG9uZ0RhdGVGb3JtYXQ6IGRlZmF1bHRMb25nRGF0ZUZvcm1hdCxcbiAgICAgICAgaW52YWxpZERhdGU6IGRlZmF1bHRJbnZhbGlkRGF0ZSxcbiAgICAgICAgb3JkaW5hbDogZGVmYXVsdE9yZGluYWwsXG4gICAgICAgIGRheU9mTW9udGhPcmRpbmFsUGFyc2U6IGRlZmF1bHREYXlPZk1vbnRoT3JkaW5hbFBhcnNlLFxuICAgICAgICByZWxhdGl2ZVRpbWU6IGRlZmF1bHRSZWxhdGl2ZVRpbWUsXG5cbiAgICAgICAgbW9udGhzOiBkZWZhdWx0TG9jYWxlTW9udGhzLFxuICAgICAgICBtb250aHNTaG9ydDogZGVmYXVsdExvY2FsZU1vbnRoc1Nob3J0LFxuXG4gICAgICAgIHdlZWs6IGRlZmF1bHRMb2NhbGVXZWVrLFxuXG4gICAgICAgIHdlZWtkYXlzOiBkZWZhdWx0TG9jYWxlV2Vla2RheXMsXG4gICAgICAgIHdlZWtkYXlzTWluOiBkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4sXG4gICAgICAgIHdlZWtkYXlzU2hvcnQ6IGRlZmF1bHRMb2NhbGVXZWVrZGF5c1Nob3J0LFxuXG4gICAgICAgIG1lcmlkaWVtUGFyc2U6IGRlZmF1bHRMb2NhbGVNZXJpZGllbVBhcnNlXG4gICAgfTtcblxuICAgIC8vIGludGVybmFsIHN0b3JhZ2UgZm9yIGxvY2FsZSBjb25maWcgZmlsZXNcbiAgICB2YXIgbG9jYWxlcyA9IHt9O1xuICAgIHZhciBsb2NhbGVGYW1pbGllcyA9IHt9O1xuICAgIHZhciBnbG9iYWxMb2NhbGU7XG5cbiAgICBmdW5jdGlvbiBub3JtYWxpemVMb2NhbGUoa2V5KSB7XG4gICAgICAgIHJldHVybiBrZXkgPyBrZXkudG9Mb3dlckNhc2UoKS5yZXBsYWNlKCdfJywgJy0nKSA6IGtleTtcbiAgICB9XG5cbiAgICAvLyBwaWNrIHRoZSBsb2NhbGUgZnJvbSB0aGUgYXJyYXlcbiAgICAvLyB0cnkgWydlbi1hdScsICdlbi1nYiddIGFzICdlbi1hdScsICdlbi1nYicsICdlbicsIGFzIGluIG1vdmUgdGhyb3VnaCB0aGUgbGlzdCB0cnlpbmcgZWFjaFxuICAgIC8vIHN1YnN0cmluZyBmcm9tIG1vc3Qgc3BlY2lmaWMgdG8gbGVhc3QsIGJ1dCBtb3ZlIHRvIHRoZSBuZXh0IGFycmF5IGl0ZW0gaWYgaXQncyBhIG1vcmUgc3BlY2lmaWMgdmFyaWFudCB0aGFuIHRoZSBjdXJyZW50IHJvb3RcbiAgICBmdW5jdGlvbiBjaG9vc2VMb2NhbGUobmFtZXMpIHtcbiAgICAgICAgdmFyIGkgPSAwLCBqLCBuZXh0LCBsb2NhbGUsIHNwbGl0O1xuXG4gICAgICAgIHdoaWxlIChpIDwgbmFtZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICBzcGxpdCA9IG5vcm1hbGl6ZUxvY2FsZShuYW1lc1tpXSkuc3BsaXQoJy0nKTtcbiAgICAgICAgICAgIGogPSBzcGxpdC5sZW5ndGg7XG4gICAgICAgICAgICBuZXh0ID0gbm9ybWFsaXplTG9jYWxlKG5hbWVzW2kgKyAxXSk7XG4gICAgICAgICAgICBuZXh0ID0gbmV4dCA/IG5leHQuc3BsaXQoJy0nKSA6IG51bGw7XG4gICAgICAgICAgICB3aGlsZSAoaiA+IDApIHtcbiAgICAgICAgICAgICAgICBsb2NhbGUgPSBsb2FkTG9jYWxlKHNwbGl0LnNsaWNlKDAsIGopLmpvaW4oJy0nKSk7XG4gICAgICAgICAgICAgICAgaWYgKGxvY2FsZSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAobmV4dCAmJiBuZXh0Lmxlbmd0aCA+PSBqICYmIGNvbXBhcmVBcnJheXMoc3BsaXQsIG5leHQsIHRydWUpID49IGogLSAxKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vdGhlIG5leHQgYXJyYXkgaXRlbSBpcyBiZXR0ZXIgdGhhbiBhIHNoYWxsb3dlciBzdWJzdHJpbmcgb2YgdGhpcyBvbmVcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGotLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZ2xvYmFsTG9jYWxlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvYWRMb2NhbGUobmFtZSkge1xuICAgICAgICB2YXIgb2xkTG9jYWxlID0gbnVsbDtcbiAgICAgICAgLy8gVE9ETzogRmluZCBhIGJldHRlciB3YXkgdG8gcmVnaXN0ZXIgYW5kIGxvYWQgYWxsIHRoZSBsb2NhbGVzIGluIE5vZGVcbiAgICAgICAgaWYgKCFsb2NhbGVzW25hbWVdICYmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykgJiZcbiAgICAgICAgICAgICAgICBtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgb2xkTG9jYWxlID0gZ2xvYmFsTG9jYWxlLl9hYmJyO1xuICAgICAgICAgICAgICAgIHZhciBhbGlhc2VkUmVxdWlyZSA9IHJlcXVpcmU7XG4gICAgICAgICAgICAgICAgYWxpYXNlZFJlcXVpcmUoJy4vbG9jYWxlLycgKyBuYW1lKTtcbiAgICAgICAgICAgICAgICBnZXRTZXRHbG9iYWxMb2NhbGUob2xkTG9jYWxlKTtcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGxvY2FsZXNbbmFtZV07XG4gICAgfVxuXG4gICAgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGxvYWQgbG9jYWxlIGFuZCB0aGVuIHNldCB0aGUgZ2xvYmFsIGxvY2FsZS4gIElmXG4gICAgLy8gbm8gYXJndW1lbnRzIGFyZSBwYXNzZWQgaW4sIGl0IHdpbGwgc2ltcGx5IHJldHVybiB0aGUgY3VycmVudCBnbG9iYWxcbiAgICAvLyBsb2NhbGUga2V5LlxuICAgIGZ1bmN0aW9uIGdldFNldEdsb2JhbExvY2FsZSAoa2V5LCB2YWx1ZXMpIHtcbiAgICAgICAgdmFyIGRhdGE7XG4gICAgICAgIGlmIChrZXkpIHtcbiAgICAgICAgICAgIGlmIChpc1VuZGVmaW5lZCh2YWx1ZXMpKSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IGdldExvY2FsZShrZXkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgZGF0YSA9IGRlZmluZUxvY2FsZShrZXksIHZhbHVlcyk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChkYXRhKSB7XG4gICAgICAgICAgICAgICAgLy8gbW9tZW50LmR1cmF0aW9uLl9sb2NhbGUgPSBtb21lbnQuX2xvY2FsZSA9IGRhdGE7XG4gICAgICAgICAgICAgICAgZ2xvYmFsTG9jYWxlID0gZGF0YTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIGlmICgodHlwZW9mIGNvbnNvbGUgIT09ICAndW5kZWZpbmVkJykgJiYgY29uc29sZS53YXJuKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vd2FybiB1c2VyIGlmIGFyZ3VtZW50cyBhcmUgcGFzc2VkIGJ1dCB0aGUgbG9jYWxlIGNvdWxkIG5vdCBiZSBzZXRcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdMb2NhbGUgJyArIGtleSArICAnIG5vdCBmb3VuZC4gRGlkIHlvdSBmb3JnZXQgdG8gbG9hZCBpdD8nKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gZ2xvYmFsTG9jYWxlLl9hYmJyO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRlZmluZUxvY2FsZSAobmFtZSwgY29uZmlnKSB7XG4gICAgICAgIGlmIChjb25maWcgIT09IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBsb2NhbGUsIHBhcmVudENvbmZpZyA9IGJhc2VDb25maWc7XG4gICAgICAgICAgICBjb25maWcuYWJiciA9IG5hbWU7XG4gICAgICAgICAgICBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgZGVwcmVjYXRlU2ltcGxlKCdkZWZpbmVMb2NhbGVPdmVycmlkZScsXG4gICAgICAgICAgICAgICAgICAgICAgICAndXNlIG1vbWVudC51cGRhdGVMb2NhbGUobG9jYWxlTmFtZSwgY29uZmlnKSB0byBjaGFuZ2UgJyArXG4gICAgICAgICAgICAgICAgICAgICAgICAnYW4gZXhpc3RpbmcgbG9jYWxlLiBtb21lbnQuZGVmaW5lTG9jYWxlKGxvY2FsZU5hbWUsICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ2NvbmZpZykgc2hvdWxkIG9ubHkgYmUgdXNlZCBmb3IgY3JlYXRpbmcgYSBuZXcgbG9jYWxlICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgJ1NlZSBodHRwOi8vbW9tZW50anMuY29tL2d1aWRlcy8jL3dhcm5pbmdzL2RlZmluZS1sb2NhbGUvIGZvciBtb3JlIGluZm8uJyk7XG4gICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gbG9jYWxlc1tuYW1lXS5fY29uZmlnO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChjb25maWcucGFyZW50TG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBpZiAobG9jYWxlc1tjb25maWcucGFyZW50TG9jYWxlXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGxvY2FsZXNbY29uZmlnLnBhcmVudExvY2FsZV0uX2NvbmZpZztcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBsb2NhbGUgPSBsb2FkTG9jYWxlKGNvbmZpZy5wYXJlbnRMb2NhbGUpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHBhcmVudENvbmZpZyA9IGxvY2FsZS5fY29uZmlnO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCFsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2FsZUZhbWlsaWVzW2NvbmZpZy5wYXJlbnRMb2NhbGVdID0gW107XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhbGVGYW1pbGllc1tjb25maWcucGFyZW50TG9jYWxlXS5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBuYW1lLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpZzogY29uZmlnXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9IG5ldyBMb2NhbGUobWVyZ2VDb25maWdzKHBhcmVudENvbmZpZywgY29uZmlnKSk7XG5cbiAgICAgICAgICAgIGlmIChsb2NhbGVGYW1pbGllc1tuYW1lXSkge1xuICAgICAgICAgICAgICAgIGxvY2FsZUZhbWlsaWVzW25hbWVdLmZvckVhY2goZnVuY3Rpb24gKHgpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVmaW5lTG9jYWxlKHgubmFtZSwgeC5jb25maWcpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBiYWNrd2FyZHMgY29tcGF0IGZvciBub3c6IGFsc28gc2V0IHRoZSBsb2NhbGVcbiAgICAgICAgICAgIC8vIG1ha2Ugc3VyZSB3ZSBzZXQgdGhlIGxvY2FsZSBBRlRFUiBhbGwgY2hpbGQgbG9jYWxlcyBoYXZlIGJlZW5cbiAgICAgICAgICAgIC8vIGNyZWF0ZWQsIHNvIHdlIHdvbid0IGVuZCB1cCB3aXRoIHRoZSBjaGlsZCBsb2NhbGUgc2V0LlxuICAgICAgICAgICAgZ2V0U2V0R2xvYmFsTG9jYWxlKG5hbWUpO1xuXG5cbiAgICAgICAgICAgIHJldHVybiBsb2NhbGVzW25hbWVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gdXNlZnVsIGZvciB0ZXN0aW5nXG4gICAgICAgICAgICBkZWxldGUgbG9jYWxlc1tuYW1lXTtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlTG9jYWxlKG5hbWUsIGNvbmZpZykge1xuICAgICAgICBpZiAoY29uZmlnICE9IG51bGwpIHtcbiAgICAgICAgICAgIHZhciBsb2NhbGUsIHRtcExvY2FsZSwgcGFyZW50Q29uZmlnID0gYmFzZUNvbmZpZztcbiAgICAgICAgICAgIC8vIE1FUkdFXG4gICAgICAgICAgICB0bXBMb2NhbGUgPSBsb2FkTG9jYWxlKG5hbWUpO1xuICAgICAgICAgICAgaWYgKHRtcExvY2FsZSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgcGFyZW50Q29uZmlnID0gdG1wTG9jYWxlLl9jb25maWc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjb25maWcgPSBtZXJnZUNvbmZpZ3MocGFyZW50Q29uZmlnLCBjb25maWcpO1xuICAgICAgICAgICAgbG9jYWxlID0gbmV3IExvY2FsZShjb25maWcpO1xuICAgICAgICAgICAgbG9jYWxlLnBhcmVudExvY2FsZSA9IGxvY2FsZXNbbmFtZV07XG4gICAgICAgICAgICBsb2NhbGVzW25hbWVdID0gbG9jYWxlO1xuXG4gICAgICAgICAgICAvLyBiYWNrd2FyZHMgY29tcGF0IGZvciBub3c6IGFsc28gc2V0IHRoZSBsb2NhbGVcbiAgICAgICAgICAgIGdldFNldEdsb2JhbExvY2FsZShuYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIHBhc3MgbnVsbCBmb3IgY29uZmlnIHRvIHVudXBkYXRlLCB1c2VmdWwgZm9yIHRlc3RzXG4gICAgICAgICAgICBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgaWYgKGxvY2FsZXNbbmFtZV0ucGFyZW50TG9jYWxlICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgICAgbG9jYWxlc1tuYW1lXSA9IGxvY2FsZXNbbmFtZV0ucGFyZW50TG9jYWxlO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAobG9jYWxlc1tuYW1lXSAhPSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZSBsb2NhbGVzW25hbWVdO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbG9jYWxlc1tuYW1lXTtcbiAgICB9XG5cbiAgICAvLyByZXR1cm5zIGxvY2FsZSBkYXRhXG4gICAgZnVuY3Rpb24gZ2V0TG9jYWxlIChrZXkpIHtcbiAgICAgICAgdmFyIGxvY2FsZTtcblxuICAgICAgICBpZiAoa2V5ICYmIGtleS5fbG9jYWxlICYmIGtleS5fbG9jYWxlLl9hYmJyKSB7XG4gICAgICAgICAgICBrZXkgPSBrZXkuX2xvY2FsZS5fYWJicjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICgha2V5KSB7XG4gICAgICAgICAgICByZXR1cm4gZ2xvYmFsTG9jYWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFpc0FycmF5KGtleSkpIHtcbiAgICAgICAgICAgIC8vc2hvcnQtY2lyY3VpdCBldmVyeXRoaW5nIGVsc2VcbiAgICAgICAgICAgIGxvY2FsZSA9IGxvYWRMb2NhbGUoa2V5KTtcbiAgICAgICAgICAgIGlmIChsb2NhbGUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gbG9jYWxlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAga2V5ID0gW2tleV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gY2hvb3NlTG9jYWxlKGtleSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdExvY2FsZXMoKSB7XG4gICAgICAgIHJldHVybiBrZXlzKGxvY2FsZXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNoZWNrT3ZlcmZsb3cgKG0pIHtcbiAgICAgICAgdmFyIG92ZXJmbG93O1xuICAgICAgICB2YXIgYSA9IG0uX2E7XG5cbiAgICAgICAgaWYgKGEgJiYgZ2V0UGFyc2luZ0ZsYWdzKG0pLm92ZXJmbG93ID09PSAtMikge1xuICAgICAgICAgICAgb3ZlcmZsb3cgPVxuICAgICAgICAgICAgICAgIGFbTU9OVEhdICAgICAgIDwgMCB8fCBhW01PTlRIXSAgICAgICA+IDExICA/IE1PTlRIIDpcbiAgICAgICAgICAgICAgICBhW0RBVEVdICAgICAgICA8IDEgfHwgYVtEQVRFXSAgICAgICAgPiBkYXlzSW5Nb250aChhW1lFQVJdLCBhW01PTlRIXSkgPyBEQVRFIDpcbiAgICAgICAgICAgICAgICBhW0hPVVJdICAgICAgICA8IDAgfHwgYVtIT1VSXSAgICAgICAgPiAyNCB8fCAoYVtIT1VSXSA9PT0gMjQgJiYgKGFbTUlOVVRFXSAhPT0gMCB8fCBhW1NFQ09ORF0gIT09IDAgfHwgYVtNSUxMSVNFQ09ORF0gIT09IDApKSA/IEhPVVIgOlxuICAgICAgICAgICAgICAgIGFbTUlOVVRFXSAgICAgIDwgMCB8fCBhW01JTlVURV0gICAgICA+IDU5ICA/IE1JTlVURSA6XG4gICAgICAgICAgICAgICAgYVtTRUNPTkRdICAgICAgPCAwIHx8IGFbU0VDT05EXSAgICAgID4gNTkgID8gU0VDT05EIDpcbiAgICAgICAgICAgICAgICBhW01JTExJU0VDT05EXSA8IDAgfHwgYVtNSUxMSVNFQ09ORF0gPiA5OTkgPyBNSUxMSVNFQ09ORCA6XG4gICAgICAgICAgICAgICAgLTE7XG5cbiAgICAgICAgICAgIGlmIChnZXRQYXJzaW5nRmxhZ3MobSkuX292ZXJmbG93RGF5T2ZZZWFyICYmIChvdmVyZmxvdyA8IFlFQVIgfHwgb3ZlcmZsb3cgPiBEQVRFKSkge1xuICAgICAgICAgICAgICAgIG92ZXJmbG93ID0gREFURTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChnZXRQYXJzaW5nRmxhZ3MobSkuX292ZXJmbG93V2Vla3MgJiYgb3ZlcmZsb3cgPT09IC0xKSB7XG4gICAgICAgICAgICAgICAgb3ZlcmZsb3cgPSBXRUVLO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGdldFBhcnNpbmdGbGFncyhtKS5fb3ZlcmZsb3dXZWVrZGF5ICYmIG92ZXJmbG93ID09PSAtMSkge1xuICAgICAgICAgICAgICAgIG92ZXJmbG93ID0gV0VFS0RBWTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKG0pLm92ZXJmbG93ID0gb3ZlcmZsb3c7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbTtcbiAgICB9XG5cbiAgICAvLyBQaWNrIHRoZSBmaXJzdCBkZWZpbmVkIG9mIHR3byBvciB0aHJlZSBhcmd1bWVudHMuXG4gICAgZnVuY3Rpb24gZGVmYXVsdHMoYSwgYiwgYykge1xuICAgICAgICBpZiAoYSAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gYTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYiAhPSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gYjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjdXJyZW50RGF0ZUFycmF5KGNvbmZpZykge1xuICAgICAgICAvLyBob29rcyBpcyBhY3R1YWxseSB0aGUgZXhwb3J0ZWQgbW9tZW50IG9iamVjdFxuICAgICAgICB2YXIgbm93VmFsdWUgPSBuZXcgRGF0ZShob29rcy5ub3coKSk7XG4gICAgICAgIGlmIChjb25maWcuX3VzZVVUQykge1xuICAgICAgICAgICAgcmV0dXJuIFtub3dWYWx1ZS5nZXRVVENGdWxsWWVhcigpLCBub3dWYWx1ZS5nZXRVVENNb250aCgpLCBub3dWYWx1ZS5nZXRVVENEYXRlKCldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbbm93VmFsdWUuZ2V0RnVsbFllYXIoKSwgbm93VmFsdWUuZ2V0TW9udGgoKSwgbm93VmFsdWUuZ2V0RGF0ZSgpXTtcbiAgICB9XG5cbiAgICAvLyBjb252ZXJ0IGFuIGFycmF5IHRvIGEgZGF0ZS5cbiAgICAvLyB0aGUgYXJyYXkgc2hvdWxkIG1pcnJvciB0aGUgcGFyYW1ldGVycyBiZWxvd1xuICAgIC8vIG5vdGU6IGFsbCB2YWx1ZXMgcGFzdCB0aGUgeWVhciBhcmUgb3B0aW9uYWwgYW5kIHdpbGwgZGVmYXVsdCB0byB0aGUgbG93ZXN0IHBvc3NpYmxlIHZhbHVlLlxuICAgIC8vIFt5ZWFyLCBtb250aCwgZGF5ICwgaG91ciwgbWludXRlLCBzZWNvbmQsIG1pbGxpc2Vjb25kXVxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21BcnJheSAoY29uZmlnKSB7XG4gICAgICAgIHZhciBpLCBkYXRlLCBpbnB1dCA9IFtdLCBjdXJyZW50RGF0ZSwgZXhwZWN0ZWRXZWVrZGF5LCB5ZWFyVG9Vc2U7XG5cbiAgICAgICAgaWYgKGNvbmZpZy5fZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgY3VycmVudERhdGUgPSBjdXJyZW50RGF0ZUFycmF5KGNvbmZpZyk7XG5cbiAgICAgICAgLy9jb21wdXRlIGRheSBvZiB0aGUgeWVhciBmcm9tIHdlZWtzIGFuZCB3ZWVrZGF5c1xuICAgICAgICBpZiAoY29uZmlnLl93ICYmIGNvbmZpZy5fYVtEQVRFXSA9PSBudWxsICYmIGNvbmZpZy5fYVtNT05USF0gPT0gbnVsbCkge1xuICAgICAgICAgICAgZGF5T2ZZZWFyRnJvbVdlZWtJbmZvKGNvbmZpZyk7XG4gICAgICAgIH1cblxuICAgICAgICAvL2lmIHRoZSBkYXkgb2YgdGhlIHllYXIgaXMgc2V0LCBmaWd1cmUgb3V0IHdoYXQgaXQgaXNcbiAgICAgICAgaWYgKGNvbmZpZy5fZGF5T2ZZZWFyICE9IG51bGwpIHtcbiAgICAgICAgICAgIHllYXJUb1VzZSA9IGRlZmF1bHRzKGNvbmZpZy5fYVtZRUFSXSwgY3VycmVudERhdGVbWUVBUl0pO1xuXG4gICAgICAgICAgICBpZiAoY29uZmlnLl9kYXlPZlllYXIgPiBkYXlzSW5ZZWFyKHllYXJUb1VzZSkgfHwgY29uZmlnLl9kYXlPZlllYXIgPT09IDApIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5fb3ZlcmZsb3dEYXlPZlllYXIgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBkYXRlID0gY3JlYXRlVVRDRGF0ZSh5ZWFyVG9Vc2UsIDAsIGNvbmZpZy5fZGF5T2ZZZWFyKTtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtNT05USF0gPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgICAgICAgICBjb25maWcuX2FbREFURV0gPSBkYXRlLmdldFVUQ0RhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIERlZmF1bHQgdG8gY3VycmVudCBkYXRlLlxuICAgICAgICAvLyAqIGlmIG5vIHllYXIsIG1vbnRoLCBkYXkgb2YgbW9udGggYXJlIGdpdmVuLCBkZWZhdWx0IHRvIHRvZGF5XG4gICAgICAgIC8vICogaWYgZGF5IG9mIG1vbnRoIGlzIGdpdmVuLCBkZWZhdWx0IG1vbnRoIGFuZCB5ZWFyXG4gICAgICAgIC8vICogaWYgbW9udGggaXMgZ2l2ZW4sIGRlZmF1bHQgb25seSB5ZWFyXG4gICAgICAgIC8vICogaWYgeWVhciBpcyBnaXZlbiwgZG9uJ3QgZGVmYXVsdCBhbnl0aGluZ1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMyAmJiBjb25maWcuX2FbaV0gPT0gbnVsbDsgKytpKSB7XG4gICAgICAgICAgICBjb25maWcuX2FbaV0gPSBpbnB1dFtpXSA9IGN1cnJlbnREYXRlW2ldO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gWmVybyBvdXQgd2hhdGV2ZXIgd2FzIG5vdCBkZWZhdWx0ZWQsIGluY2x1ZGluZyB0aW1lXG4gICAgICAgIGZvciAoOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICBjb25maWcuX2FbaV0gPSBpbnB1dFtpXSA9IChjb25maWcuX2FbaV0gPT0gbnVsbCkgPyAoaSA9PT0gMiA/IDEgOiAwKSA6IGNvbmZpZy5fYVtpXTtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIENoZWNrIGZvciAyNDowMDowMC4wMDBcbiAgICAgICAgaWYgKGNvbmZpZy5fYVtIT1VSXSA9PT0gMjQgJiZcbiAgICAgICAgICAgICAgICBjb25maWcuX2FbTUlOVVRFXSA9PT0gMCAmJlxuICAgICAgICAgICAgICAgIGNvbmZpZy5fYVtTRUNPTkRdID09PSAwICYmXG4gICAgICAgICAgICAgICAgY29uZmlnLl9hW01JTExJU0VDT05EXSA9PT0gMCkge1xuICAgICAgICAgICAgY29uZmlnLl9uZXh0RGF5ID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbmZpZy5fYVtIT1VSXSA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWcuX2QgPSAoY29uZmlnLl91c2VVVEMgPyBjcmVhdGVVVENEYXRlIDogY3JlYXRlRGF0ZSkuYXBwbHkobnVsbCwgaW5wdXQpO1xuICAgICAgICBleHBlY3RlZFdlZWtkYXkgPSBjb25maWcuX3VzZVVUQyA/IGNvbmZpZy5fZC5nZXRVVENEYXkoKSA6IGNvbmZpZy5fZC5nZXREYXkoKTtcblxuICAgICAgICAvLyBBcHBseSB0aW1lem9uZSBvZmZzZXQgZnJvbSBpbnB1dC4gVGhlIGFjdHVhbCB1dGNPZmZzZXQgY2FuIGJlIGNoYW5nZWRcbiAgICAgICAgLy8gd2l0aCBwYXJzZVpvbmUuXG4gICAgICAgIGlmIChjb25maWcuX3R6bSAhPSBudWxsKSB7XG4gICAgICAgICAgICBjb25maWcuX2Quc2V0VVRDTWludXRlcyhjb25maWcuX2QuZ2V0VVRDTWludXRlcygpIC0gY29uZmlnLl90em0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGNvbmZpZy5fbmV4dERheSkge1xuICAgICAgICAgICAgY29uZmlnLl9hW0hPVVJdID0gMjQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjaGVjayBmb3IgbWlzbWF0Y2hpbmcgZGF5IG9mIHdlZWtcbiAgICAgICAgaWYgKGNvbmZpZy5fdyAmJiB0eXBlb2YgY29uZmlnLl93LmQgIT09ICd1bmRlZmluZWQnICYmIGNvbmZpZy5fdy5kICE9PSBleHBlY3RlZFdlZWtkYXkpIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLndlZWtkYXlNaXNtYXRjaCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBkYXlPZlllYXJGcm9tV2Vla0luZm8oY29uZmlnKSB7XG4gICAgICAgIHZhciB3LCB3ZWVrWWVhciwgd2Vlaywgd2Vla2RheSwgZG93LCBkb3ksIHRlbXAsIHdlZWtkYXlPdmVyZmxvdztcblxuICAgICAgICB3ID0gY29uZmlnLl93O1xuICAgICAgICBpZiAody5HRyAhPSBudWxsIHx8IHcuVyAhPSBudWxsIHx8IHcuRSAhPSBudWxsKSB7XG4gICAgICAgICAgICBkb3cgPSAxO1xuICAgICAgICAgICAgZG95ID0gNDtcblxuICAgICAgICAgICAgLy8gVE9ETzogV2UgbmVlZCB0byB0YWtlIHRoZSBjdXJyZW50IGlzb1dlZWtZZWFyLCBidXQgdGhhdCBkZXBlbmRzIG9uXG4gICAgICAgICAgICAvLyBob3cgd2UgaW50ZXJwcmV0IG5vdyAobG9jYWwsIHV0YywgZml4ZWQgb2Zmc2V0KS4gU28gY3JlYXRlXG4gICAgICAgICAgICAvLyBhIG5vdyB2ZXJzaW9uIG9mIGN1cnJlbnQgY29uZmlnICh0YWtlIGxvY2FsL3V0Yy9vZmZzZXQgZmxhZ3MsIGFuZFxuICAgICAgICAgICAgLy8gY3JlYXRlIG5vdykuXG4gICAgICAgICAgICB3ZWVrWWVhciA9IGRlZmF1bHRzKHcuR0csIGNvbmZpZy5fYVtZRUFSXSwgd2Vla09mWWVhcihjcmVhdGVMb2NhbCgpLCAxLCA0KS55ZWFyKTtcbiAgICAgICAgICAgIHdlZWsgPSBkZWZhdWx0cyh3LlcsIDEpO1xuICAgICAgICAgICAgd2Vla2RheSA9IGRlZmF1bHRzKHcuRSwgMSk7XG4gICAgICAgICAgICBpZiAod2Vla2RheSA8IDEgfHwgd2Vla2RheSA+IDcpIHtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5T3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZG93ID0gY29uZmlnLl9sb2NhbGUuX3dlZWsuZG93O1xuICAgICAgICAgICAgZG95ID0gY29uZmlnLl9sb2NhbGUuX3dlZWsuZG95O1xuXG4gICAgICAgICAgICB2YXIgY3VyV2VlayA9IHdlZWtPZlllYXIoY3JlYXRlTG9jYWwoKSwgZG93LCBkb3kpO1xuXG4gICAgICAgICAgICB3ZWVrWWVhciA9IGRlZmF1bHRzKHcuZ2csIGNvbmZpZy5fYVtZRUFSXSwgY3VyV2Vlay55ZWFyKTtcblxuICAgICAgICAgICAgLy8gRGVmYXVsdCB0byBjdXJyZW50IHdlZWsuXG4gICAgICAgICAgICB3ZWVrID0gZGVmYXVsdHMody53LCBjdXJXZWVrLndlZWspO1xuXG4gICAgICAgICAgICBpZiAody5kICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyB3ZWVrZGF5IC0tIGxvdyBkYXkgbnVtYmVycyBhcmUgY29uc2lkZXJlZCBuZXh0IHdlZWtcbiAgICAgICAgICAgICAgICB3ZWVrZGF5ID0gdy5kO1xuICAgICAgICAgICAgICAgIGlmICh3ZWVrZGF5IDwgMCB8fCB3ZWVrZGF5ID4gNikge1xuICAgICAgICAgICAgICAgICAgICB3ZWVrZGF5T3ZlcmZsb3cgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAody5lICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAvLyBsb2NhbCB3ZWVrZGF5IC0tIGNvdW50aW5nIHN0YXJ0cyBmcm9tIGJlZ2lubmluZyBvZiB3ZWVrXG4gICAgICAgICAgICAgICAgd2Vla2RheSA9IHcuZSArIGRvdztcbiAgICAgICAgICAgICAgICBpZiAody5lIDwgMCB8fCB3LmUgPiA2KSB7XG4gICAgICAgICAgICAgICAgICAgIHdlZWtkYXlPdmVyZmxvdyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBkZWZhdWx0IHRvIGJlZ2lubmluZyBvZiB3ZWVrXG4gICAgICAgICAgICAgICAgd2Vla2RheSA9IGRvdztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAod2VlayA8IDEgfHwgd2VlayA+IHdlZWtzSW5ZZWFyKHdlZWtZZWFyLCBkb3csIGRveSkpIHtcbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLl9vdmVyZmxvd1dlZWtzID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIGlmICh3ZWVrZGF5T3ZlcmZsb3cgIT0gbnVsbCkge1xuICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuX292ZXJmbG93V2Vla2RheSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0ZW1wID0gZGF5T2ZZZWFyRnJvbVdlZWtzKHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSk7XG4gICAgICAgICAgICBjb25maWcuX2FbWUVBUl0gPSB0ZW1wLnllYXI7XG4gICAgICAgICAgICBjb25maWcuX2RheU9mWWVhciA9IHRlbXAuZGF5T2ZZZWFyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gaXNvIDg2MDEgcmVnZXhcbiAgICAvLyAwMDAwLTAwLTAwIDAwMDAtVzAwIG9yIDAwMDAtVzAwLTAgKyBUICsgMDAgb3IgMDA6MDAgb3IgMDA6MDA6MDAgb3IgMDA6MDA6MDAuMDAwICsgKzAwOjAwIG9yICswMDAwIG9yICswMClcbiAgICB2YXIgZXh0ZW5kZWRJc29SZWdleCA9IC9eXFxzKigoPzpbKy1dXFxkezZ9fFxcZHs0fSktKD86XFxkXFxkLVxcZFxcZHxXXFxkXFxkLVxcZHxXXFxkXFxkfFxcZFxcZFxcZHxcXGRcXGQpKSg/OihUfCApKFxcZFxcZCg/OjpcXGRcXGQoPzo6XFxkXFxkKD86Wy4sXVxcZCspPyk/KT8pKFtcXCtcXC1dXFxkXFxkKD86Oj9cXGRcXGQpP3xcXHMqWik/KT8kLztcbiAgICB2YXIgYmFzaWNJc29SZWdleCA9IC9eXFxzKigoPzpbKy1dXFxkezZ9fFxcZHs0fSkoPzpcXGRcXGRcXGRcXGR8V1xcZFxcZFxcZHxXXFxkXFxkfFxcZFxcZFxcZHxcXGRcXGQpKSg/OihUfCApKFxcZFxcZCg/OlxcZFxcZCg/OlxcZFxcZCg/OlsuLF1cXGQrKT8pPyk/KShbXFwrXFwtXVxcZFxcZCg/Ojo/XFxkXFxkKT98XFxzKlopPyk/JC87XG5cbiAgICB2YXIgdHpSZWdleCA9IC9afFsrLV1cXGRcXGQoPzo6P1xcZFxcZCk/LztcblxuICAgIHZhciBpc29EYXRlcyA9IFtcbiAgICAgICAgWydZWVlZWVktTU0tREQnLCAvWystXVxcZHs2fS1cXGRcXGQtXFxkXFxkL10sXG4gICAgICAgIFsnWVlZWS1NTS1ERCcsIC9cXGR7NH0tXFxkXFxkLVxcZFxcZC9dLFxuICAgICAgICBbJ0dHR0ctW1ddV1ctRScsIC9cXGR7NH0tV1xcZFxcZC1cXGQvXSxcbiAgICAgICAgWydHR0dHLVtXXVdXJywgL1xcZHs0fS1XXFxkXFxkLywgZmFsc2VdLFxuICAgICAgICBbJ1lZWVktREREJywgL1xcZHs0fS1cXGR7M30vXSxcbiAgICAgICAgWydZWVlZLU1NJywgL1xcZHs0fS1cXGRcXGQvLCBmYWxzZV0sXG4gICAgICAgIFsnWVlZWVlZTU1ERCcsIC9bKy1dXFxkezEwfS9dLFxuICAgICAgICBbJ1lZWVlNTUREJywgL1xcZHs4fS9dLFxuICAgICAgICAvLyBZWVlZTU0gaXMgTk9UIGFsbG93ZWQgYnkgdGhlIHN0YW5kYXJkXG4gICAgICAgIFsnR0dHR1tXXVdXRScsIC9cXGR7NH1XXFxkezN9L10sXG4gICAgICAgIFsnR0dHR1tXXVdXJywgL1xcZHs0fVdcXGR7Mn0vLCBmYWxzZV0sXG4gICAgICAgIFsnWVlZWURERCcsIC9cXGR7N30vXVxuICAgIF07XG5cbiAgICAvLyBpc28gdGltZSBmb3JtYXRzIGFuZCByZWdleGVzXG4gICAgdmFyIGlzb1RpbWVzID0gW1xuICAgICAgICBbJ0hIOm1tOnNzLlNTU1MnLCAvXFxkXFxkOlxcZFxcZDpcXGRcXGRcXC5cXGQrL10sXG4gICAgICAgIFsnSEg6bW06c3MsU1NTUycsIC9cXGRcXGQ6XFxkXFxkOlxcZFxcZCxcXGQrL10sXG4gICAgICAgIFsnSEg6bW06c3MnLCAvXFxkXFxkOlxcZFxcZDpcXGRcXGQvXSxcbiAgICAgICAgWydISDptbScsIC9cXGRcXGQ6XFxkXFxkL10sXG4gICAgICAgIFsnSEhtbXNzLlNTU1MnLCAvXFxkXFxkXFxkXFxkXFxkXFxkXFwuXFxkKy9dLFxuICAgICAgICBbJ0hIbW1zcyxTU1NTJywgL1xcZFxcZFxcZFxcZFxcZFxcZCxcXGQrL10sXG4gICAgICAgIFsnSEhtbXNzJywgL1xcZFxcZFxcZFxcZFxcZFxcZC9dLFxuICAgICAgICBbJ0hIbW0nLCAvXFxkXFxkXFxkXFxkL10sXG4gICAgICAgIFsnSEgnLCAvXFxkXFxkL11cbiAgICBdO1xuXG4gICAgdmFyIGFzcE5ldEpzb25SZWdleCA9IC9eXFwvP0RhdGVcXCgoXFwtP1xcZCspL2k7XG5cbiAgICAvLyBkYXRlIGZyb20gaXNvIGZvcm1hdFxuICAgIGZ1bmN0aW9uIGNvbmZpZ0Zyb21JU08oY29uZmlnKSB7XG4gICAgICAgIHZhciBpLCBsLFxuICAgICAgICAgICAgc3RyaW5nID0gY29uZmlnLl9pLFxuICAgICAgICAgICAgbWF0Y2ggPSBleHRlbmRlZElzb1JlZ2V4LmV4ZWMoc3RyaW5nKSB8fCBiYXNpY0lzb1JlZ2V4LmV4ZWMoc3RyaW5nKSxcbiAgICAgICAgICAgIGFsbG93VGltZSwgZGF0ZUZvcm1hdCwgdGltZUZvcm1hdCwgdHpGb3JtYXQ7XG5cbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pc28gPSB0cnVlO1xuXG4gICAgICAgICAgICBmb3IgKGkgPSAwLCBsID0gaXNvRGF0ZXMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKGlzb0RhdGVzW2ldWzFdLmV4ZWMobWF0Y2hbMV0pKSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGVGb3JtYXQgPSBpc29EYXRlc1tpXVswXTtcbiAgICAgICAgICAgICAgICAgICAgYWxsb3dUaW1lID0gaXNvRGF0ZXNbaV1bMl0gIT09IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZGF0ZUZvcm1hdCA9PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgY29uZmlnLl9pc1ZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG1hdGNoWzNdKSB7XG4gICAgICAgICAgICAgICAgZm9yIChpID0gMCwgbCA9IGlzb1RpbWVzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNvVGltZXNbaV1bMV0uZXhlYyhtYXRjaFszXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG1hdGNoWzJdIHNob3VsZCBiZSAnVCcgb3Igc3BhY2VcbiAgICAgICAgICAgICAgICAgICAgICAgIHRpbWVGb3JtYXQgPSAobWF0Y2hbMl0gfHwgJyAnKSArIGlzb1RpbWVzW2ldWzBdO1xuICAgICAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgaWYgKHRpbWVGb3JtYXQgPT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghYWxsb3dUaW1lICYmIHRpbWVGb3JtYXQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtYXRjaFs0XSkge1xuICAgICAgICAgICAgICAgIGlmICh0elJlZ2V4LmV4ZWMobWF0Y2hbNF0pKSB7XG4gICAgICAgICAgICAgICAgICAgIHR6Rm9ybWF0ID0gJ1onO1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29uZmlnLl9mID0gZGF0ZUZvcm1hdCArICh0aW1lRm9ybWF0IHx8ICcnKSArICh0ekZvcm1hdCB8fCAnJyk7XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjb25maWcuX2lzVmFsaWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJGQyAyODIyIHJlZ2V4OiBGb3IgZGV0YWlscyBzZWUgaHR0cHM6Ly90b29scy5pZXRmLm9yZy9odG1sL3JmYzI4MjIjc2VjdGlvbi0zLjNcbiAgICB2YXIgcmZjMjgyMiA9IC9eKD86KE1vbnxUdWV8V2VkfFRodXxGcml8U2F0fFN1biksP1xccyk/KFxcZHsxLDJ9KVxccyhKYW58RmVifE1hcnxBcHJ8TWF5fEp1bnxKdWx8QXVnfFNlcHxPY3R8Tm92fERlYylcXHMoXFxkezIsNH0pXFxzKFxcZFxcZCk6KFxcZFxcZCkoPzo6KFxcZFxcZCkpP1xccyg/OihVVHxHTVR8W0VDTVBdW1NEXVQpfChbWnpdKXwoWystXVxcZHs0fSkpJC87XG5cbiAgICBmdW5jdGlvbiBleHRyYWN0RnJvbVJGQzI4MjJTdHJpbmdzKHllYXJTdHIsIG1vbnRoU3RyLCBkYXlTdHIsIGhvdXJTdHIsIG1pbnV0ZVN0ciwgc2Vjb25kU3RyKSB7XG4gICAgICAgIHZhciByZXN1bHQgPSBbXG4gICAgICAgICAgICB1bnRydW5jYXRlWWVhcih5ZWFyU3RyKSxcbiAgICAgICAgICAgIGRlZmF1bHRMb2NhbGVNb250aHNTaG9ydC5pbmRleE9mKG1vbnRoU3RyKSxcbiAgICAgICAgICAgIHBhcnNlSW50KGRheVN0ciwgMTApLFxuICAgICAgICAgICAgcGFyc2VJbnQoaG91clN0ciwgMTApLFxuICAgICAgICAgICAgcGFyc2VJbnQobWludXRlU3RyLCAxMClcbiAgICAgICAgXTtcblxuICAgICAgICBpZiAoc2Vjb25kU3RyKSB7XG4gICAgICAgICAgICByZXN1bHQucHVzaChwYXJzZUludChzZWNvbmRTdHIsIDEwKSk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHVudHJ1bmNhdGVZZWFyKHllYXJTdHIpIHtcbiAgICAgICAgdmFyIHllYXIgPSBwYXJzZUludCh5ZWFyU3RyLCAxMCk7XG4gICAgICAgIGlmICh5ZWFyIDw9IDQ5KSB7XG4gICAgICAgICAgICByZXR1cm4gMjAwMCArIHllYXI7XG4gICAgICAgIH0gZWxzZSBpZiAoeWVhciA8PSA5OTkpIHtcbiAgICAgICAgICAgIHJldHVybiAxOTAwICsgeWVhcjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geWVhcjtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwcmVwcm9jZXNzUkZDMjgyMihzKSB7XG4gICAgICAgIC8vIFJlbW92ZSBjb21tZW50cyBhbmQgZm9sZGluZyB3aGl0ZXNwYWNlIGFuZCByZXBsYWNlIG11bHRpcGxlLXNwYWNlcyB3aXRoIGEgc2luZ2xlIHNwYWNlXG4gICAgICAgIHJldHVybiBzLnJlcGxhY2UoL1xcKFteKV0qXFwpfFtcXG5cXHRdL2csICcgJykucmVwbGFjZSgvKFxcc1xccyspL2csICcgJykucmVwbGFjZSgvXlxcc1xccyovLCAnJykucmVwbGFjZSgvXFxzXFxzKiQvLCAnJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2hlY2tXZWVrZGF5KHdlZWtkYXlTdHIsIHBhcnNlZElucHV0LCBjb25maWcpIHtcbiAgICAgICAgaWYgKHdlZWtkYXlTdHIpIHtcbiAgICAgICAgICAgIC8vIFRPRE86IFJlcGxhY2UgdGhlIHZhbmlsbGEgSlMgRGF0ZSBvYmplY3Qgd2l0aCBhbiBpbmRlcGVudGVudCBkYXktb2Ytd2VlayBjaGVjay5cbiAgICAgICAgICAgIHZhciB3ZWVrZGF5UHJvdmlkZWQgPSBkZWZhdWx0TG9jYWxlV2Vla2RheXNTaG9ydC5pbmRleE9mKHdlZWtkYXlTdHIpLFxuICAgICAgICAgICAgICAgIHdlZWtkYXlBY3R1YWwgPSBuZXcgRGF0ZShwYXJzZWRJbnB1dFswXSwgcGFyc2VkSW5wdXRbMV0sIHBhcnNlZElucHV0WzJdKS5nZXREYXkoKTtcbiAgICAgICAgICAgIGlmICh3ZWVrZGF5UHJvdmlkZWQgIT09IHdlZWtkYXlBY3R1YWwpIHtcbiAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS53ZWVrZGF5TWlzbWF0Y2ggPSB0cnVlO1xuICAgICAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgb2JzT2Zmc2V0cyA9IHtcbiAgICAgICAgVVQ6IDAsXG4gICAgICAgIEdNVDogMCxcbiAgICAgICAgRURUOiAtNCAqIDYwLFxuICAgICAgICBFU1Q6IC01ICogNjAsXG4gICAgICAgIENEVDogLTUgKiA2MCxcbiAgICAgICAgQ1NUOiAtNiAqIDYwLFxuICAgICAgICBNRFQ6IC02ICogNjAsXG4gICAgICAgIE1TVDogLTcgKiA2MCxcbiAgICAgICAgUERUOiAtNyAqIDYwLFxuICAgICAgICBQU1Q6IC04ICogNjBcbiAgICB9O1xuXG4gICAgZnVuY3Rpb24gY2FsY3VsYXRlT2Zmc2V0KG9ic09mZnNldCwgbWlsaXRhcnlPZmZzZXQsIG51bU9mZnNldCkge1xuICAgICAgICBpZiAob2JzT2Zmc2V0KSB7XG4gICAgICAgICAgICByZXR1cm4gb2JzT2Zmc2V0c1tvYnNPZmZzZXRdO1xuICAgICAgICB9IGVsc2UgaWYgKG1pbGl0YXJ5T2Zmc2V0KSB7XG4gICAgICAgICAgICAvLyB0aGUgb25seSBhbGxvd2VkIG1pbGl0YXJ5IHR6IGlzIFpcbiAgICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIGhtID0gcGFyc2VJbnQobnVtT2Zmc2V0LCAxMCk7XG4gICAgICAgICAgICB2YXIgbSA9IGhtICUgMTAwLCBoID0gKGhtIC0gbSkgLyAxMDA7XG4gICAgICAgICAgICByZXR1cm4gaCAqIDYwICsgbTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8vIGRhdGUgYW5kIHRpbWUgZnJvbSByZWYgMjgyMiBmb3JtYXRcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tUkZDMjgyMihjb25maWcpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gcmZjMjgyMi5leGVjKHByZXByb2Nlc3NSRkMyODIyKGNvbmZpZy5faSkpO1xuICAgICAgICBpZiAobWF0Y2gpIHtcbiAgICAgICAgICAgIHZhciBwYXJzZWRBcnJheSA9IGV4dHJhY3RGcm9tUkZDMjgyMlN0cmluZ3MobWF0Y2hbNF0sIG1hdGNoWzNdLCBtYXRjaFsyXSwgbWF0Y2hbNV0sIG1hdGNoWzZdLCBtYXRjaFs3XSk7XG4gICAgICAgICAgICBpZiAoIWNoZWNrV2Vla2RheShtYXRjaFsxXSwgcGFyc2VkQXJyYXksIGNvbmZpZykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbmZpZy5fYSA9IHBhcnNlZEFycmF5O1xuICAgICAgICAgICAgY29uZmlnLl90em0gPSBjYWxjdWxhdGVPZmZzZXQobWF0Y2hbOF0sIG1hdGNoWzldLCBtYXRjaFsxMF0pO1xuXG4gICAgICAgICAgICBjb25maWcuX2QgPSBjcmVhdGVVVENEYXRlLmFwcGx5KG51bGwsIGNvbmZpZy5fYSk7XG4gICAgICAgICAgICBjb25maWcuX2Quc2V0VVRDTWludXRlcyhjb25maWcuX2QuZ2V0VVRDTWludXRlcygpIC0gY29uZmlnLl90em0pO1xuXG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5yZmMyODIyID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbmZpZy5faXNWYWxpZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZGF0ZSBmcm9tIGlzbyBmb3JtYXQgb3IgZmFsbGJhY2tcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tU3RyaW5nKGNvbmZpZykge1xuICAgICAgICB2YXIgbWF0Y2hlZCA9IGFzcE5ldEpzb25SZWdleC5leGVjKGNvbmZpZy5faSk7XG5cbiAgICAgICAgaWYgKG1hdGNoZWQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKCttYXRjaGVkWzFdKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbmZpZ0Zyb21JU08oY29uZmlnKTtcbiAgICAgICAgaWYgKGNvbmZpZy5faXNWYWxpZCA9PT0gZmFsc2UpIHtcbiAgICAgICAgICAgIGRlbGV0ZSBjb25maWcuX2lzVmFsaWQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25maWdGcm9tUkZDMjgyMihjb25maWcpO1xuICAgICAgICBpZiAoY29uZmlnLl9pc1ZhbGlkID09PSBmYWxzZSkge1xuICAgICAgICAgICAgZGVsZXRlIGNvbmZpZy5faXNWYWxpZDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIEZpbmFsIGF0dGVtcHQsIHVzZSBJbnB1dCBGYWxsYmFja1xuICAgICAgICBob29rcy5jcmVhdGVGcm9tSW5wdXRGYWxsYmFjayhjb25maWcpO1xuICAgIH1cblxuICAgIGhvb2tzLmNyZWF0ZUZyb21JbnB1dEZhbGxiYWNrID0gZGVwcmVjYXRlKFxuICAgICAgICAndmFsdWUgcHJvdmlkZWQgaXMgbm90IGluIGEgcmVjb2duaXplZCBSRkMyODIyIG9yIElTTyBmb3JtYXQuIG1vbWVudCBjb25zdHJ1Y3Rpb24gZmFsbHMgYmFjayB0byBqcyBEYXRlKCksICcgK1xuICAgICAgICAnd2hpY2ggaXMgbm90IHJlbGlhYmxlIGFjcm9zcyBhbGwgYnJvd3NlcnMgYW5kIHZlcnNpb25zLiBOb24gUkZDMjgyMi9JU08gZGF0ZSBmb3JtYXRzIGFyZSAnICtcbiAgICAgICAgJ2Rpc2NvdXJhZ2VkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gYW4gdXBjb21pbmcgbWFqb3IgcmVsZWFzZS4gUGxlYXNlIHJlZmVyIHRvICcgK1xuICAgICAgICAnaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9qcy1kYXRlLyBmb3IgbW9yZSBpbmZvLicsXG4gICAgICAgIGZ1bmN0aW9uIChjb25maWcpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGNvbmZpZy5faSArIChjb25maWcuX3VzZVVUQyA/ICcgVVRDJyA6ICcnKSk7XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgLy8gY29uc3RhbnQgdGhhdCByZWZlcnMgdG8gdGhlIElTTyBzdGFuZGFyZFxuICAgIGhvb2tzLklTT184NjAxID0gZnVuY3Rpb24gKCkge307XG5cbiAgICAvLyBjb25zdGFudCB0aGF0IHJlZmVycyB0byB0aGUgUkZDIDI4MjIgZm9ybVxuICAgIGhvb2tzLlJGQ18yODIyID0gZnVuY3Rpb24gKCkge307XG5cbiAgICAvLyBkYXRlIGZyb20gc3RyaW5nIGFuZCBmb3JtYXQgc3RyaW5nXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbVN0cmluZ0FuZEZvcm1hdChjb25maWcpIHtcbiAgICAgICAgLy8gVE9ETzogTW92ZSB0aGlzIHRvIGFub3RoZXIgcGFydCBvZiB0aGUgY3JlYXRpb24gZmxvdyB0byBwcmV2ZW50IGNpcmN1bGFyIGRlcHNcbiAgICAgICAgaWYgKGNvbmZpZy5fZiA9PT0gaG9va3MuSVNPXzg2MDEpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21JU08oY29uZmlnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoY29uZmlnLl9mID09PSBob29rcy5SRkNfMjgyMikge1xuICAgICAgICAgICAgY29uZmlnRnJvbVJGQzI4MjIoY29uZmlnKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBjb25maWcuX2EgPSBbXTtcbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuZW1wdHkgPSB0cnVlO1xuXG4gICAgICAgIC8vIFRoaXMgYXJyYXkgaXMgdXNlZCB0byBtYWtlIGEgRGF0ZSwgZWl0aGVyIHdpdGggYG5ldyBEYXRlYCBvciBgRGF0ZS5VVENgXG4gICAgICAgIHZhciBzdHJpbmcgPSAnJyArIGNvbmZpZy5faSxcbiAgICAgICAgICAgIGksIHBhcnNlZElucHV0LCB0b2tlbnMsIHRva2VuLCBza2lwcGVkLFxuICAgICAgICAgICAgc3RyaW5nTGVuZ3RoID0gc3RyaW5nLmxlbmd0aCxcbiAgICAgICAgICAgIHRvdGFsUGFyc2VkSW5wdXRMZW5ndGggPSAwO1xuXG4gICAgICAgIHRva2VucyA9IGV4cGFuZEZvcm1hdChjb25maWcuX2YsIGNvbmZpZy5fbG9jYWxlKS5tYXRjaChmb3JtYXR0aW5nVG9rZW5zKSB8fCBbXTtcblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0b2tlbiA9IHRva2Vuc1tpXTtcbiAgICAgICAgICAgIHBhcnNlZElucHV0ID0gKHN0cmluZy5tYXRjaChnZXRQYXJzZVJlZ2V4Rm9yVG9rZW4odG9rZW4sIGNvbmZpZykpIHx8IFtdKVswXTtcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCd0b2tlbicsIHRva2VuLCAncGFyc2VkSW5wdXQnLCBwYXJzZWRJbnB1dCxcbiAgICAgICAgICAgIC8vICAgICAgICAgJ3JlZ2V4JywgZ2V0UGFyc2VSZWdleEZvclRva2VuKHRva2VuLCBjb25maWcpKTtcbiAgICAgICAgICAgIGlmIChwYXJzZWRJbnB1dCkge1xuICAgICAgICAgICAgICAgIHNraXBwZWQgPSBzdHJpbmcuc3Vic3RyKDAsIHN0cmluZy5pbmRleE9mKHBhcnNlZElucHV0KSk7XG4gICAgICAgICAgICAgICAgaWYgKHNraXBwZWQubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRJbnB1dC5wdXNoKHNraXBwZWQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBzdHJpbmcgPSBzdHJpbmcuc2xpY2Uoc3RyaW5nLmluZGV4T2YocGFyc2VkSW5wdXQpICsgcGFyc2VkSW5wdXQubGVuZ3RoKTtcbiAgICAgICAgICAgICAgICB0b3RhbFBhcnNlZElucHV0TGVuZ3RoICs9IHBhcnNlZElucHV0Lmxlbmd0aDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIGRvbid0IHBhcnNlIGlmIGl0J3Mgbm90IGEga25vd24gdG9rZW5cbiAgICAgICAgICAgIGlmIChmb3JtYXRUb2tlbkZ1bmN0aW9uc1t0b2tlbl0pIHtcbiAgICAgICAgICAgICAgICBpZiAocGFyc2VkSW5wdXQpIHtcbiAgICAgICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykuZW1wdHkgPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyhjb25maWcpLnVudXNlZFRva2Vucy5wdXNoKHRva2VuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYWRkVGltZVRvQXJyYXlGcm9tVG9rZW4odG9rZW4sIHBhcnNlZElucHV0LCBjb25maWcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoY29uZmlnLl9zdHJpY3QgJiYgIXBhcnNlZElucHV0KSB7XG4gICAgICAgICAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykudW51c2VkVG9rZW5zLnB1c2godG9rZW4pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gYWRkIHJlbWFpbmluZyB1bnBhcnNlZCBpbnB1dCBsZW5ndGggdG8gdGhlIHN0cmluZ1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5jaGFyc0xlZnRPdmVyID0gc3RyaW5nTGVuZ3RoIC0gdG90YWxQYXJzZWRJbnB1dExlbmd0aDtcbiAgICAgICAgaWYgKHN0cmluZy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS51bnVzZWRJbnB1dC5wdXNoKHN0cmluZyk7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBjbGVhciBfMTJoIGZsYWcgaWYgaG91ciBpcyA8PSAxMlxuICAgICAgICBpZiAoY29uZmlnLl9hW0hPVVJdIDw9IDEyICYmXG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID09PSB0cnVlICYmXG4gICAgICAgICAgICBjb25maWcuX2FbSE9VUl0gPiAwKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5iaWdIb3VyID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG5cbiAgICAgICAgZ2V0UGFyc2luZ0ZsYWdzKGNvbmZpZykucGFyc2VkRGF0ZVBhcnRzID0gY29uZmlnLl9hLnNsaWNlKDApO1xuICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5tZXJpZGllbSA9IGNvbmZpZy5fbWVyaWRpZW07XG4gICAgICAgIC8vIGhhbmRsZSBtZXJpZGllbVxuICAgICAgICBjb25maWcuX2FbSE9VUl0gPSBtZXJpZGllbUZpeFdyYXAoY29uZmlnLl9sb2NhbGUsIGNvbmZpZy5fYVtIT1VSXSwgY29uZmlnLl9tZXJpZGllbSk7XG5cbiAgICAgICAgY29uZmlnRnJvbUFycmF5KGNvbmZpZyk7XG4gICAgICAgIGNoZWNrT3ZlcmZsb3coY29uZmlnKTtcbiAgICB9XG5cblxuICAgIGZ1bmN0aW9uIG1lcmlkaWVtRml4V3JhcCAobG9jYWxlLCBob3VyLCBtZXJpZGllbSkge1xuICAgICAgICB2YXIgaXNQbTtcblxuICAgICAgICBpZiAobWVyaWRpZW0gPT0gbnVsbCkge1xuICAgICAgICAgICAgLy8gbm90aGluZyB0byBkb1xuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxvY2FsZS5tZXJpZGllbUhvdXIgIT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsZS5tZXJpZGllbUhvdXIoaG91ciwgbWVyaWRpZW0pO1xuICAgICAgICB9IGVsc2UgaWYgKGxvY2FsZS5pc1BNICE9IG51bGwpIHtcbiAgICAgICAgICAgIC8vIEZhbGxiYWNrXG4gICAgICAgICAgICBpc1BtID0gbG9jYWxlLmlzUE0obWVyaWRpZW0pO1xuICAgICAgICAgICAgaWYgKGlzUG0gJiYgaG91ciA8IDEyKSB7XG4gICAgICAgICAgICAgICAgaG91ciArPSAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghaXNQbSAmJiBob3VyID09PSAxMikge1xuICAgICAgICAgICAgICAgIGhvdXIgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGhvdXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyB0aGlzIGlzIG5vdCBzdXBwb3NlZCB0byBoYXBwZW5cbiAgICAgICAgICAgIHJldHVybiBob3VyO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gZGF0ZSBmcm9tIHN0cmluZyBhbmQgYXJyYXkgb2YgZm9ybWF0IHN0cmluZ3NcbiAgICBmdW5jdGlvbiBjb25maWdGcm9tU3RyaW5nQW5kQXJyYXkoY29uZmlnKSB7XG4gICAgICAgIHZhciB0ZW1wQ29uZmlnLFxuICAgICAgICAgICAgYmVzdE1vbWVudCxcblxuICAgICAgICAgICAgc2NvcmVUb0JlYXQsXG4gICAgICAgICAgICBpLFxuICAgICAgICAgICAgY3VycmVudFNjb3JlO1xuXG4gICAgICAgIGlmIChjb25maWcuX2YubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICBnZXRQYXJzaW5nRmxhZ3MoY29uZmlnKS5pbnZhbGlkRm9ybWF0ID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKE5hTik7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29uZmlnLl9mLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjdXJyZW50U2NvcmUgPSAwO1xuICAgICAgICAgICAgdGVtcENvbmZpZyA9IGNvcHlDb25maWcoe30sIGNvbmZpZyk7XG4gICAgICAgICAgICBpZiAoY29uZmlnLl91c2VVVEMgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRlbXBDb25maWcuX3VzZVVUQyA9IGNvbmZpZy5fdXNlVVRDO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGVtcENvbmZpZy5fZiA9IGNvbmZpZy5fZltpXTtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQodGVtcENvbmZpZyk7XG5cbiAgICAgICAgICAgIGlmICghaXNWYWxpZCh0ZW1wQ29uZmlnKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBpZiB0aGVyZSBpcyBhbnkgaW5wdXQgdGhhdCB3YXMgbm90IHBhcnNlZCBhZGQgYSBwZW5hbHR5IGZvciB0aGF0IGZvcm1hdFxuICAgICAgICAgICAgY3VycmVudFNjb3JlICs9IGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS5jaGFyc0xlZnRPdmVyO1xuXG4gICAgICAgICAgICAvL29yIHRva2Vuc1xuICAgICAgICAgICAgY3VycmVudFNjb3JlICs9IGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS51bnVzZWRUb2tlbnMubGVuZ3RoICogMTA7XG5cbiAgICAgICAgICAgIGdldFBhcnNpbmdGbGFncyh0ZW1wQ29uZmlnKS5zY29yZSA9IGN1cnJlbnRTY29yZTtcblxuICAgICAgICAgICAgaWYgKHNjb3JlVG9CZWF0ID09IG51bGwgfHwgY3VycmVudFNjb3JlIDwgc2NvcmVUb0JlYXQpIHtcbiAgICAgICAgICAgICAgICBzY29yZVRvQmVhdCA9IGN1cnJlbnRTY29yZTtcbiAgICAgICAgICAgICAgICBiZXN0TW9tZW50ID0gdGVtcENvbmZpZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGV4dGVuZChjb25maWcsIGJlc3RNb21lbnQgfHwgdGVtcENvbmZpZyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbU9iamVjdChjb25maWcpIHtcbiAgICAgICAgaWYgKGNvbmZpZy5fZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGkgPSBub3JtYWxpemVPYmplY3RVbml0cyhjb25maWcuX2kpO1xuICAgICAgICBjb25maWcuX2EgPSBtYXAoW2kueWVhciwgaS5tb250aCwgaS5kYXkgfHwgaS5kYXRlLCBpLmhvdXIsIGkubWludXRlLCBpLnNlY29uZCwgaS5taWxsaXNlY29uZF0sIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgICAgIHJldHVybiBvYmogJiYgcGFyc2VJbnQob2JqLCAxMCk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGNvbmZpZ0Zyb21BcnJheShjb25maWcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUZyb21Db25maWcgKGNvbmZpZykge1xuICAgICAgICB2YXIgcmVzID0gbmV3IE1vbWVudChjaGVja092ZXJmbG93KHByZXBhcmVDb25maWcoY29uZmlnKSkpO1xuICAgICAgICBpZiAocmVzLl9uZXh0RGF5KSB7XG4gICAgICAgICAgICAvLyBBZGRpbmcgaXMgc21hcnQgZW5vdWdoIGFyb3VuZCBEU1RcbiAgICAgICAgICAgIHJlcy5hZGQoMSwgJ2QnKTtcbiAgICAgICAgICAgIHJlcy5fbmV4dERheSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJlcGFyZUNvbmZpZyAoY29uZmlnKSB7XG4gICAgICAgIHZhciBpbnB1dCA9IGNvbmZpZy5faSxcbiAgICAgICAgICAgIGZvcm1hdCA9IGNvbmZpZy5fZjtcblxuICAgICAgICBjb25maWcuX2xvY2FsZSA9IGNvbmZpZy5fbG9jYWxlIHx8IGdldExvY2FsZShjb25maWcuX2wpO1xuXG4gICAgICAgIGlmIChpbnB1dCA9PT0gbnVsbCB8fCAoZm9ybWF0ID09PSB1bmRlZmluZWQgJiYgaW5wdXQgPT09ICcnKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUludmFsaWQoe251bGxJbnB1dDogdHJ1ZX0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGNvbmZpZy5faSA9IGlucHV0ID0gY29uZmlnLl9sb2NhbGUucHJlcGFyc2UoaW5wdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzTW9tZW50KGlucHV0KSkge1xuICAgICAgICAgICAgcmV0dXJuIG5ldyBNb21lbnQoY2hlY2tPdmVyZmxvdyhpbnB1dCkpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGF0ZShpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IGlucHV0O1xuICAgICAgICB9IGVsc2UgaWYgKGlzQXJyYXkoZm9ybWF0KSkge1xuICAgICAgICAgICAgY29uZmlnRnJvbVN0cmluZ0FuZEFycmF5KGNvbmZpZyk7XG4gICAgICAgIH0gZWxzZSBpZiAoZm9ybWF0KSB7XG4gICAgICAgICAgICBjb25maWdGcm9tU3RyaW5nQW5kRm9ybWF0KGNvbmZpZyk7XG4gICAgICAgIH0gIGVsc2Uge1xuICAgICAgICAgICAgY29uZmlnRnJvbUlucHV0KGNvbmZpZyk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIWlzVmFsaWQoY29uZmlnKSkge1xuICAgICAgICAgICAgY29uZmlnLl9kID0gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBjb25maWc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY29uZmlnRnJvbUlucHV0KGNvbmZpZykge1xuICAgICAgICB2YXIgaW5wdXQgPSBjb25maWcuX2k7XG4gICAgICAgIGlmIChpc1VuZGVmaW5lZChpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZy5fZCA9IG5ldyBEYXRlKGhvb2tzLm5vdygpKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0RhdGUoaW5wdXQpKSB7XG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShpbnB1dC52YWx1ZU9mKCkpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbnB1dCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21TdHJpbmcoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc0FycmF5KGlucHV0KSkge1xuICAgICAgICAgICAgY29uZmlnLl9hID0gbWFwKGlucHV0LnNsaWNlKDApLCBmdW5jdGlvbiAob2JqKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHBhcnNlSW50KG9iaiwgMTApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBjb25maWdGcm9tQXJyYXkoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc09iamVjdChpbnB1dCkpIHtcbiAgICAgICAgICAgIGNvbmZpZ0Zyb21PYmplY3QoY29uZmlnKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc051bWJlcihpbnB1dCkpIHtcbiAgICAgICAgICAgIC8vIGZyb20gbWlsbGlzZWNvbmRzXG4gICAgICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZShpbnB1dCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBob29rcy5jcmVhdGVGcm9tSW5wdXRGYWxsYmFjayhjb25maWcpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlTG9jYWxPclVUQyAoaW5wdXQsIGZvcm1hdCwgbG9jYWxlLCBzdHJpY3QsIGlzVVRDKSB7XG4gICAgICAgIHZhciBjID0ge307XG5cbiAgICAgICAgaWYgKGxvY2FsZSA9PT0gdHJ1ZSB8fCBsb2NhbGUgPT09IGZhbHNlKSB7XG4gICAgICAgICAgICBzdHJpY3QgPSBsb2NhbGU7XG4gICAgICAgICAgICBsb2NhbGUgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoKGlzT2JqZWN0KGlucHV0KSAmJiBpc09iamVjdEVtcHR5KGlucHV0KSkgfHxcbiAgICAgICAgICAgICAgICAoaXNBcnJheShpbnB1dCkgJiYgaW5wdXQubGVuZ3RoID09PSAwKSkge1xuICAgICAgICAgICAgaW5wdXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICAgICAgLy8gb2JqZWN0IGNvbnN0cnVjdGlvbiBtdXN0IGJlIGRvbmUgdGhpcyB3YXkuXG4gICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8xNDIzXG4gICAgICAgIGMuX2lzQU1vbWVudE9iamVjdCA9IHRydWU7XG4gICAgICAgIGMuX3VzZVVUQyA9IGMuX2lzVVRDID0gaXNVVEM7XG4gICAgICAgIGMuX2wgPSBsb2NhbGU7XG4gICAgICAgIGMuX2kgPSBpbnB1dDtcbiAgICAgICAgYy5fZiA9IGZvcm1hdDtcbiAgICAgICAgYy5fc3RyaWN0ID0gc3RyaWN0O1xuXG4gICAgICAgIHJldHVybiBjcmVhdGVGcm9tQ29uZmlnKGMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUxvY2FsIChpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCkge1xuICAgICAgICByZXR1cm4gY3JlYXRlTG9jYWxPclVUQyhpbnB1dCwgZm9ybWF0LCBsb2NhbGUsIHN0cmljdCwgZmFsc2UpO1xuICAgIH1cblxuICAgIHZhciBwcm90b3R5cGVNaW4gPSBkZXByZWNhdGUoXG4gICAgICAgICdtb21lbnQoKS5taW4gaXMgZGVwcmVjYXRlZCwgdXNlIG1vbWVudC5tYXggaW5zdGVhZC4gaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9taW4tbWF4LycsXG4gICAgICAgIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBvdGhlciA9IGNyZWF0ZUxvY2FsLmFwcGx5KG51bGwsIGFyZ3VtZW50cyk7XG4gICAgICAgICAgICBpZiAodGhpcy5pc1ZhbGlkKCkgJiYgb3RoZXIuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG90aGVyIDwgdGhpcyA/IHRoaXMgOiBvdGhlcjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUludmFsaWQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICk7XG5cbiAgICB2YXIgcHJvdG90eXBlTWF4ID0gZGVwcmVjYXRlKFxuICAgICAgICAnbW9tZW50KCkubWF4IGlzIGRlcHJlY2F0ZWQsIHVzZSBtb21lbnQubWluIGluc3RlYWQuIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3MvbWluLW1heC8nLFxuICAgICAgICBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgb3RoZXIgPSBjcmVhdGVMb2NhbC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmIG90aGVyLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBvdGhlciA+IHRoaXMgPyB0aGlzIDogb3RoZXI7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJldHVybiBjcmVhdGVJbnZhbGlkKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICApO1xuXG4gICAgLy8gUGljayBhIG1vbWVudCBtIGZyb20gbW9tZW50cyBzbyB0aGF0IG1bZm5dKG90aGVyKSBpcyB0cnVlIGZvciBhbGxcbiAgICAvLyBvdGhlci4gVGhpcyByZWxpZXMgb24gdGhlIGZ1bmN0aW9uIGZuIHRvIGJlIHRyYW5zaXRpdmUuXG4gICAgLy9cbiAgICAvLyBtb21lbnRzIHNob3VsZCBlaXRoZXIgYmUgYW4gYXJyYXkgb2YgbW9tZW50IG9iamVjdHMgb3IgYW4gYXJyYXksIHdob3NlXG4gICAgLy8gZmlyc3QgZWxlbWVudCBpcyBhbiBhcnJheSBvZiBtb21lbnQgb2JqZWN0cy5cbiAgICBmdW5jdGlvbiBwaWNrQnkoZm4sIG1vbWVudHMpIHtcbiAgICAgICAgdmFyIHJlcywgaTtcbiAgICAgICAgaWYgKG1vbWVudHMubGVuZ3RoID09PSAxICYmIGlzQXJyYXkobW9tZW50c1swXSkpIHtcbiAgICAgICAgICAgIG1vbWVudHMgPSBtb21lbnRzWzBdO1xuICAgICAgICB9XG4gICAgICAgIGlmICghbW9tZW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVMb2NhbCgpO1xuICAgICAgICB9XG4gICAgICAgIHJlcyA9IG1vbWVudHNbMF07XG4gICAgICAgIGZvciAoaSA9IDE7IGkgPCBtb21lbnRzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAoIW1vbWVudHNbaV0uaXNWYWxpZCgpIHx8IG1vbWVudHNbaV1bZm5dKHJlcykpIHtcbiAgICAgICAgICAgICAgICByZXMgPSBtb21lbnRzW2ldO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogVXNlIFtdLnNvcnQgaW5zdGVhZD9cbiAgICBmdW5jdGlvbiBtaW4gKCkge1xuICAgICAgICB2YXIgYXJncyA9IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKTtcblxuICAgICAgICByZXR1cm4gcGlja0J5KCdpc0JlZm9yZScsIGFyZ3MpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIG1heCAoKSB7XG4gICAgICAgIHZhciBhcmdzID0gW10uc2xpY2UuY2FsbChhcmd1bWVudHMsIDApO1xuXG4gICAgICAgIHJldHVybiBwaWNrQnkoJ2lzQWZ0ZXInLCBhcmdzKTtcbiAgICB9XG5cbiAgICB2YXIgbm93ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gRGF0ZS5ub3cgPyBEYXRlLm5vdygpIDogKyhuZXcgRGF0ZSgpKTtcbiAgICB9O1xuXG4gICAgdmFyIG9yZGVyaW5nID0gWyd5ZWFyJywgJ3F1YXJ0ZXInLCAnbW9udGgnLCAnd2VlaycsICdkYXknLCAnaG91cicsICdtaW51dGUnLCAnc2Vjb25kJywgJ21pbGxpc2Vjb25kJ107XG5cbiAgICBmdW5jdGlvbiBpc0R1cmF0aW9uVmFsaWQobSkge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gbSkge1xuICAgICAgICAgICAgaWYgKCEoaW5kZXhPZi5jYWxsKG9yZGVyaW5nLCBrZXkpICE9PSAtMSAmJiAobVtrZXldID09IG51bGwgfHwgIWlzTmFOKG1ba2V5XSkpKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIHZhciB1bml0SGFzRGVjaW1hbCA9IGZhbHNlO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IG9yZGVyaW5nLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICBpZiAobVtvcmRlcmluZ1tpXV0pIHtcbiAgICAgICAgICAgICAgICBpZiAodW5pdEhhc0RlY2ltYWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlOyAvLyBvbmx5IGFsbG93IG5vbi1pbnRlZ2VycyBmb3Igc21hbGxlc3QgdW5pdFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocGFyc2VGbG9hdChtW29yZGVyaW5nW2ldXSkgIT09IHRvSW50KG1bb3JkZXJpbmdbaV1dKSkge1xuICAgICAgICAgICAgICAgICAgICB1bml0SGFzRGVjaW1hbCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNWYWxpZCQxKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNWYWxpZDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVJbnZhbGlkJDEoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbihOYU4pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIER1cmF0aW9uIChkdXJhdGlvbikge1xuICAgICAgICB2YXIgbm9ybWFsaXplZElucHV0ID0gbm9ybWFsaXplT2JqZWN0VW5pdHMoZHVyYXRpb24pLFxuICAgICAgICAgICAgeWVhcnMgPSBub3JtYWxpemVkSW5wdXQueWVhciB8fCAwLFxuICAgICAgICAgICAgcXVhcnRlcnMgPSBub3JtYWxpemVkSW5wdXQucXVhcnRlciB8fCAwLFxuICAgICAgICAgICAgbW9udGhzID0gbm9ybWFsaXplZElucHV0Lm1vbnRoIHx8IDAsXG4gICAgICAgICAgICB3ZWVrcyA9IG5vcm1hbGl6ZWRJbnB1dC53ZWVrIHx8IG5vcm1hbGl6ZWRJbnB1dC5pc29XZWVrIHx8IDAsXG4gICAgICAgICAgICBkYXlzID0gbm9ybWFsaXplZElucHV0LmRheSB8fCAwLFxuICAgICAgICAgICAgaG91cnMgPSBub3JtYWxpemVkSW5wdXQuaG91ciB8fCAwLFxuICAgICAgICAgICAgbWludXRlcyA9IG5vcm1hbGl6ZWRJbnB1dC5taW51dGUgfHwgMCxcbiAgICAgICAgICAgIHNlY29uZHMgPSBub3JtYWxpemVkSW5wdXQuc2Vjb25kIHx8IDAsXG4gICAgICAgICAgICBtaWxsaXNlY29uZHMgPSBub3JtYWxpemVkSW5wdXQubWlsbGlzZWNvbmQgfHwgMDtcblxuICAgICAgICB0aGlzLl9pc1ZhbGlkID0gaXNEdXJhdGlvblZhbGlkKG5vcm1hbGl6ZWRJbnB1dCk7XG5cbiAgICAgICAgLy8gcmVwcmVzZW50YXRpb24gZm9yIGRhdGVBZGRSZW1vdmVcbiAgICAgICAgdGhpcy5fbWlsbGlzZWNvbmRzID0gK21pbGxpc2Vjb25kcyArXG4gICAgICAgICAgICBzZWNvbmRzICogMWUzICsgLy8gMTAwMFxuICAgICAgICAgICAgbWludXRlcyAqIDZlNCArIC8vIDEwMDAgKiA2MFxuICAgICAgICAgICAgaG91cnMgKiAxMDAwICogNjAgKiA2MDsgLy91c2luZyAxMDAwICogNjAgKiA2MCBpbnN0ZWFkIG9mIDM2ZTUgdG8gYXZvaWQgZmxvYXRpbmcgcG9pbnQgcm91bmRpbmcgZXJyb3JzIGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8yOTc4XG4gICAgICAgIC8vIEJlY2F1c2Ugb2YgZGF0ZUFkZFJlbW92ZSB0cmVhdHMgMjQgaG91cnMgYXMgZGlmZmVyZW50IGZyb20gYVxuICAgICAgICAvLyBkYXkgd2hlbiB3b3JraW5nIGFyb3VuZCBEU1QsIHdlIG5lZWQgdG8gc3RvcmUgdGhlbSBzZXBhcmF0ZWx5XG4gICAgICAgIHRoaXMuX2RheXMgPSArZGF5cyArXG4gICAgICAgICAgICB3ZWVrcyAqIDc7XG4gICAgICAgIC8vIEl0IGlzIGltcG9zc2libGUgdG8gdHJhbnNsYXRlIG1vbnRocyBpbnRvIGRheXMgd2l0aG91dCBrbm93aW5nXG4gICAgICAgIC8vIHdoaWNoIG1vbnRocyB5b3UgYXJlIGFyZSB0YWxraW5nIGFib3V0LCBzbyB3ZSBoYXZlIHRvIHN0b3JlXG4gICAgICAgIC8vIGl0IHNlcGFyYXRlbHkuXG4gICAgICAgIHRoaXMuX21vbnRocyA9ICttb250aHMgK1xuICAgICAgICAgICAgcXVhcnRlcnMgKiAzICtcbiAgICAgICAgICAgIHllYXJzICogMTI7XG5cbiAgICAgICAgdGhpcy5fZGF0YSA9IHt9O1xuXG4gICAgICAgIHRoaXMuX2xvY2FsZSA9IGdldExvY2FsZSgpO1xuXG4gICAgICAgIHRoaXMuX2J1YmJsZSgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRHVyYXRpb24gKG9iaikge1xuICAgICAgICByZXR1cm4gb2JqIGluc3RhbmNlb2YgRHVyYXRpb247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWJzUm91bmQgKG51bWJlcikge1xuICAgICAgICBpZiAobnVtYmVyIDwgMCkge1xuICAgICAgICAgICAgcmV0dXJuIE1hdGgucm91bmQoLTEgKiBudW1iZXIpICogLTE7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5yb3VuZChudW1iZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgZnVuY3Rpb24gb2Zmc2V0ICh0b2tlbiwgc2VwYXJhdG9yKSB7XG4gICAgICAgIGFkZEZvcm1hdFRva2VuKHRva2VuLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy51dGNPZmZzZXQoKTtcbiAgICAgICAgICAgIHZhciBzaWduID0gJysnO1xuICAgICAgICAgICAgaWYgKG9mZnNldCA8IDApIHtcbiAgICAgICAgICAgICAgICBvZmZzZXQgPSAtb2Zmc2V0O1xuICAgICAgICAgICAgICAgIHNpZ24gPSAnLSc7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gc2lnbiArIHplcm9GaWxsKH5+KG9mZnNldCAvIDYwKSwgMikgKyBzZXBhcmF0b3IgKyB6ZXJvRmlsbCh+fihvZmZzZXQpICUgNjAsIDIpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBvZmZzZXQoJ1onLCAnOicpO1xuICAgIG9mZnNldCgnWlonLCAnJyk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdaJywgIG1hdGNoU2hvcnRPZmZzZXQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1paJywgbWF0Y2hTaG9ydE9mZnNldCk7XG4gICAgYWRkUGFyc2VUb2tlbihbJ1onLCAnWlonXSwgZnVuY3Rpb24gKGlucHV0LCBhcnJheSwgY29uZmlnKSB7XG4gICAgICAgIGNvbmZpZy5fdXNlVVRDID0gdHJ1ZTtcbiAgICAgICAgY29uZmlnLl90em0gPSBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoU2hvcnRPZmZzZXQsIGlucHV0KTtcbiAgICB9KTtcblxuICAgIC8vIEhFTFBFUlNcblxuICAgIC8vIHRpbWV6b25lIGNodW5rZXJcbiAgICAvLyAnKzEwOjAwJyA+IFsnMTAnLCAgJzAwJ11cbiAgICAvLyAnLTE1MzAnICA+IFsnLTE1JywgJzMwJ11cbiAgICB2YXIgY2h1bmtPZmZzZXQgPSAvKFtcXCtcXC1dfFxcZFxcZCkvZ2k7XG5cbiAgICBmdW5jdGlvbiBvZmZzZXRGcm9tU3RyaW5nKG1hdGNoZXIsIHN0cmluZykge1xuICAgICAgICB2YXIgbWF0Y2hlcyA9IChzdHJpbmcgfHwgJycpLm1hdGNoKG1hdGNoZXIpO1xuXG4gICAgICAgIGlmIChtYXRjaGVzID09PSBudWxsKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjaHVuayAgID0gbWF0Y2hlc1ttYXRjaGVzLmxlbmd0aCAtIDFdIHx8IFtdO1xuICAgICAgICB2YXIgcGFydHMgICA9IChjaHVuayArICcnKS5tYXRjaChjaHVua09mZnNldCkgfHwgWyctJywgMCwgMF07XG4gICAgICAgIHZhciBtaW51dGVzID0gKyhwYXJ0c1sxXSAqIDYwKSArIHRvSW50KHBhcnRzWzJdKTtcblxuICAgICAgICByZXR1cm4gbWludXRlcyA9PT0gMCA/XG4gICAgICAgICAgMCA6XG4gICAgICAgICAgcGFydHNbMF0gPT09ICcrJyA/IG1pbnV0ZXMgOiAtbWludXRlcztcbiAgICB9XG5cbiAgICAvLyBSZXR1cm4gYSBtb21lbnQgZnJvbSBpbnB1dCwgdGhhdCBpcyBsb2NhbC91dGMvem9uZSBlcXVpdmFsZW50IHRvIG1vZGVsLlxuICAgIGZ1bmN0aW9uIGNsb25lV2l0aE9mZnNldChpbnB1dCwgbW9kZWwpIHtcbiAgICAgICAgdmFyIHJlcywgZGlmZjtcbiAgICAgICAgaWYgKG1vZGVsLl9pc1VUQykge1xuICAgICAgICAgICAgcmVzID0gbW9kZWwuY2xvbmUoKTtcbiAgICAgICAgICAgIGRpZmYgPSAoaXNNb21lbnQoaW5wdXQpIHx8IGlzRGF0ZShpbnB1dCkgPyBpbnB1dC52YWx1ZU9mKCkgOiBjcmVhdGVMb2NhbChpbnB1dCkudmFsdWVPZigpKSAtIHJlcy52YWx1ZU9mKCk7XG4gICAgICAgICAgICAvLyBVc2UgbG93LWxldmVsIGFwaSwgYmVjYXVzZSB0aGlzIGZuIGlzIGxvdy1sZXZlbCBhcGkuXG4gICAgICAgICAgICByZXMuX2Quc2V0VGltZShyZXMuX2QudmFsdWVPZigpICsgZGlmZik7XG4gICAgICAgICAgICBob29rcy51cGRhdGVPZmZzZXQocmVzLCBmYWxzZSk7XG4gICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsKGlucHV0KS5sb2NhbCgpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0RGF0ZU9mZnNldCAobSkge1xuICAgICAgICAvLyBPbiBGaXJlZm94LjI0IERhdGUjZ2V0VGltZXpvbmVPZmZzZXQgcmV0dXJucyBhIGZsb2F0aW5nIHBvaW50LlxuICAgICAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbW9tZW50L21vbWVudC9wdWxsLzE4NzFcbiAgICAgICAgcmV0dXJuIC1NYXRoLnJvdW5kKG0uX2QuZ2V0VGltZXpvbmVPZmZzZXQoKSAvIDE1KSAqIDE1O1xuICAgIH1cblxuICAgIC8vIEhPT0tTXG5cbiAgICAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgY2FsbGVkIHdoZW5ldmVyIGEgbW9tZW50IGlzIG11dGF0ZWQuXG4gICAgLy8gSXQgaXMgaW50ZW5kZWQgdG8ga2VlcCB0aGUgb2Zmc2V0IGluIHN5bmMgd2l0aCB0aGUgdGltZXpvbmUuXG4gICAgaG9va3MudXBkYXRlT2Zmc2V0ID0gZnVuY3Rpb24gKCkge307XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICAvLyBrZWVwTG9jYWxUaW1lID0gdHJ1ZSBtZWFucyBvbmx5IGNoYW5nZSB0aGUgdGltZXpvbmUsIHdpdGhvdXRcbiAgICAvLyBhZmZlY3RpbmcgdGhlIGxvY2FsIGhvdXIuIFNvIDU6MzE6MjYgKzAzMDAgLS1bdXRjT2Zmc2V0KDIsIHRydWUpXS0tPlxuICAgIC8vIDU6MzE6MjYgKzAyMDAgSXQgaXMgcG9zc2libGUgdGhhdCA1OjMxOjI2IGRvZXNuJ3QgZXhpc3Qgd2l0aCBvZmZzZXRcbiAgICAvLyArMDIwMCwgc28gd2UgYWRqdXN0IHRoZSB0aW1lIGFzIG5lZWRlZCwgdG8gYmUgdmFsaWQuXG4gICAgLy9cbiAgICAvLyBLZWVwaW5nIHRoZSB0aW1lIGFjdHVhbGx5IGFkZHMvc3VidHJhY3RzIChvbmUgaG91cilcbiAgICAvLyBmcm9tIHRoZSBhY3R1YWwgcmVwcmVzZW50ZWQgdGltZS4gVGhhdCBpcyB3aHkgd2UgY2FsbCB1cGRhdGVPZmZzZXRcbiAgICAvLyBhIHNlY29uZCB0aW1lLiBJbiBjYXNlIGl0IHdhbnRzIHVzIHRvIGNoYW5nZSB0aGUgb2Zmc2V0IGFnYWluXG4gICAgLy8gX2NoYW5nZUluUHJvZ3Jlc3MgPT0gdHJ1ZSBjYXNlLCB0aGVuIHdlIGhhdmUgdG8gYWRqdXN0LCBiZWNhdXNlXG4gICAgLy8gdGhlcmUgaXMgbm8gc3VjaCB0aW1lIGluIHRoZSBnaXZlbiB0aW1lem9uZS5cbiAgICBmdW5jdGlvbiBnZXRTZXRPZmZzZXQgKGlucHV0LCBrZWVwTG9jYWxUaW1lLCBrZWVwTWludXRlcykge1xuICAgICAgICB2YXIgb2Zmc2V0ID0gdGhpcy5fb2Zmc2V0IHx8IDAsXG4gICAgICAgICAgICBsb2NhbEFkanVzdDtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIGlucHV0ICE9IG51bGwgPyB0aGlzIDogTmFOO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbnB1dCAhPSBudWxsKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGlucHV0ID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgICAgIGlucHV0ID0gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaFNob3J0T2Zmc2V0LCBpbnB1dCk7XG4gICAgICAgICAgICAgICAgaWYgKGlucHV0ID09PSBudWxsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSBpZiAoTWF0aC5hYnMoaW5wdXQpIDwgMTYgJiYgIWtlZXBNaW51dGVzKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQgPSBpbnB1dCAqIDYwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCF0aGlzLl9pc1VUQyAmJiBrZWVwTG9jYWxUaW1lKSB7XG4gICAgICAgICAgICAgICAgbG9jYWxBZGp1c3QgPSBnZXREYXRlT2Zmc2V0KHRoaXMpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fb2Zmc2V0ID0gaW5wdXQ7XG4gICAgICAgICAgICB0aGlzLl9pc1VUQyA9IHRydWU7XG4gICAgICAgICAgICBpZiAobG9jYWxBZGp1c3QgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkKGxvY2FsQWRqdXN0LCAnbScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG9mZnNldCAhPT0gaW5wdXQpIHtcbiAgICAgICAgICAgICAgICBpZiAoIWtlZXBMb2NhbFRpbWUgfHwgdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcykge1xuICAgICAgICAgICAgICAgICAgICBhZGRTdWJ0cmFjdCh0aGlzLCBjcmVhdGVEdXJhdGlvbihpbnB1dCAtIG9mZnNldCwgJ20nKSwgMSwgZmFsc2UpO1xuICAgICAgICAgICAgICAgIH0gZWxzZSBpZiAoIXRoaXMuX2NoYW5nZUluUHJvZ3Jlc3MpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fY2hhbmdlSW5Qcm9ncmVzcyA9IG51bGw7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5faXNVVEMgPyBvZmZzZXQgOiBnZXREYXRlT2Zmc2V0KHRoaXMpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0Wm9uZSAoaW5wdXQsIGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgaWYgKGlucHV0ICE9IG51bGwpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgaW5wdXQgIT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgICAgICAgaW5wdXQgPSAtaW5wdXQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KGlucHV0LCBrZWVwTG9jYWxUaW1lKTtcblxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gLXRoaXMudXRjT2Zmc2V0KCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBzZXRPZmZzZXRUb1VUQyAoa2VlcExvY2FsVGltZSkge1xuICAgICAgICByZXR1cm4gdGhpcy51dGNPZmZzZXQoMCwga2VlcExvY2FsVGltZSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0T2Zmc2V0VG9Mb2NhbCAoa2VlcExvY2FsVGltZSkge1xuICAgICAgICBpZiAodGhpcy5faXNVVEMpIHtcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KDAsIGtlZXBMb2NhbFRpbWUpO1xuICAgICAgICAgICAgdGhpcy5faXNVVEMgPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKGtlZXBMb2NhbFRpbWUpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN1YnRyYWN0KGdldERhdGVPZmZzZXQodGhpcyksICdtJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0T2Zmc2V0VG9QYXJzZWRPZmZzZXQgKCkge1xuICAgICAgICBpZiAodGhpcy5fdHptICE9IG51bGwpIHtcbiAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KHRoaXMuX3R6bSwgZmFsc2UsIHRydWUpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB0aGlzLl9pID09PSAnc3RyaW5nJykge1xuICAgICAgICAgICAgdmFyIHRab25lID0gb2Zmc2V0RnJvbVN0cmluZyhtYXRjaE9mZnNldCwgdGhpcy5faSk7XG4gICAgICAgICAgICBpZiAodFpvbmUgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KHRab25lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMudXRjT2Zmc2V0KDAsIHRydWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGhhc0FsaWduZWRIb3VyT2Zmc2V0IChpbnB1dCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgaW5wdXQgPSBpbnB1dCA/IGNyZWF0ZUxvY2FsKGlucHV0KS51dGNPZmZzZXQoKSA6IDA7XG5cbiAgICAgICAgcmV0dXJuICh0aGlzLnV0Y09mZnNldCgpIC0gaW5wdXQpICUgNjAgPT09IDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNEYXlsaWdodFNhdmluZ1RpbWUgKCkge1xuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoKSA+IHRoaXMuY2xvbmUoKS5tb250aCgwKS51dGNPZmZzZXQoKSB8fFxuICAgICAgICAgICAgdGhpcy51dGNPZmZzZXQoKSA+IHRoaXMuY2xvbmUoKS5tb250aCg1KS51dGNPZmZzZXQoKVxuICAgICAgICApO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzRGF5bGlnaHRTYXZpbmdUaW1lU2hpZnRlZCAoKSB7XG4gICAgICAgIGlmICghaXNVbmRlZmluZWQodGhpcy5faXNEU1RTaGlmdGVkKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2lzRFNUU2hpZnRlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBjID0ge307XG5cbiAgICAgICAgY29weUNvbmZpZyhjLCB0aGlzKTtcbiAgICAgICAgYyA9IHByZXBhcmVDb25maWcoYyk7XG5cbiAgICAgICAgaWYgKGMuX2EpIHtcbiAgICAgICAgICAgIHZhciBvdGhlciA9IGMuX2lzVVRDID8gY3JlYXRlVVRDKGMuX2EpIDogY3JlYXRlTG9jYWwoYy5fYSk7XG4gICAgICAgICAgICB0aGlzLl9pc0RTVFNoaWZ0ZWQgPSB0aGlzLmlzVmFsaWQoKSAmJlxuICAgICAgICAgICAgICAgIGNvbXBhcmVBcnJheXMoYy5fYSwgb3RoZXIudG9BcnJheSgpKSA+IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9pc0RTVFNoaWZ0ZWQgPSBmYWxzZTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9pc0RTVFNoaWZ0ZWQ7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNMb2NhbCAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/ICF0aGlzLl9pc1VUQyA6IGZhbHNlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVXRjT2Zmc2V0ICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy5faXNVVEMgOiBmYWxzZTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1V0YyAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuX2lzVVRDICYmIHRoaXMuX29mZnNldCA9PT0gMCA6IGZhbHNlO1xuICAgIH1cblxuICAgIC8vIEFTUC5ORVQganNvbiBkYXRlIGZvcm1hdCByZWdleFxuICAgIHZhciBhc3BOZXRSZWdleCA9IC9eKFxcLXxcXCspPyg/OihcXGQqKVsuIF0pPyhcXGQrKVxcOihcXGQrKSg/OlxcOihcXGQrKShcXC5cXGQqKT8pPyQvO1xuXG4gICAgLy8gZnJvbSBodHRwOi8vZG9jcy5jbG9zdXJlLWxpYnJhcnkuZ29vZ2xlY29kZS5jb20vZ2l0L2Nsb3N1cmVfZ29vZ19kYXRlX2RhdGUuanMuc291cmNlLmh0bWxcbiAgICAvLyBzb21ld2hhdCBtb3JlIGluIGxpbmUgd2l0aCA0LjQuMy4yIDIwMDQgc3BlYywgYnV0IGFsbG93cyBkZWNpbWFsIGFueXdoZXJlXG4gICAgLy8gYW5kIGZ1cnRoZXIgbW9kaWZpZWQgdG8gYWxsb3cgZm9yIHN0cmluZ3MgY29udGFpbmluZyBib3RoIHdlZWsgYW5kIGRheVxuICAgIHZhciBpc29SZWdleCA9IC9eKC18XFwrKT9QKD86KFstK10/WzAtOSwuXSopWSk/KD86KFstK10/WzAtOSwuXSopTSk/KD86KFstK10/WzAtOSwuXSopVyk/KD86KFstK10/WzAtOSwuXSopRCk/KD86VCg/OihbLStdP1swLTksLl0qKUgpPyg/OihbLStdP1swLTksLl0qKU0pPyg/OihbLStdP1swLTksLl0qKVMpPyk/JC87XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVEdXJhdGlvbiAoaW5wdXQsIGtleSkge1xuICAgICAgICB2YXIgZHVyYXRpb24gPSBpbnB1dCxcbiAgICAgICAgICAgIC8vIG1hdGNoaW5nIGFnYWluc3QgcmVnZXhwIGlzIGV4cGVuc2l2ZSwgZG8gaXQgb24gZGVtYW5kXG4gICAgICAgICAgICBtYXRjaCA9IG51bGwsXG4gICAgICAgICAgICBzaWduLFxuICAgICAgICAgICAgcmV0LFxuICAgICAgICAgICAgZGlmZlJlcztcblxuICAgICAgICBpZiAoaXNEdXJhdGlvbihpbnB1dCkpIHtcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge1xuICAgICAgICAgICAgICAgIG1zIDogaW5wdXQuX21pbGxpc2Vjb25kcyxcbiAgICAgICAgICAgICAgICBkICA6IGlucHV0Ll9kYXlzLFxuICAgICAgICAgICAgICAgIE0gIDogaW5wdXQuX21vbnRoc1xuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmIChpc051bWJlcihpbnB1dCkpIHtcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgICAgICAgICBpZiAoa2V5KSB7XG4gICAgICAgICAgICAgICAgZHVyYXRpb25ba2V5XSA9IGlucHV0O1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICBkdXJhdGlvbi5taWxsaXNlY29uZHMgPSBpbnB1dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICghIShtYXRjaCA9IGFzcE5ldFJlZ2V4LmV4ZWMoaW5wdXQpKSkge1xuICAgICAgICAgICAgc2lnbiA9IChtYXRjaFsxXSA9PT0gJy0nKSA/IC0xIDogMTtcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge1xuICAgICAgICAgICAgICAgIHkgIDogMCxcbiAgICAgICAgICAgICAgICBkICA6IHRvSW50KG1hdGNoW0RBVEVdKSAgICAgICAgICAgICAgICAgICAgICAgICAqIHNpZ24sXG4gICAgICAgICAgICAgICAgaCAgOiB0b0ludChtYXRjaFtIT1VSXSkgICAgICAgICAgICAgICAgICAgICAgICAgKiBzaWduLFxuICAgICAgICAgICAgICAgIG0gIDogdG9JbnQobWF0Y2hbTUlOVVRFXSkgICAgICAgICAgICAgICAgICAgICAgICogc2lnbixcbiAgICAgICAgICAgICAgICBzICA6IHRvSW50KG1hdGNoW1NFQ09ORF0pICAgICAgICAgICAgICAgICAgICAgICAqIHNpZ24sXG4gICAgICAgICAgICAgICAgbXMgOiB0b0ludChhYnNSb3VuZChtYXRjaFtNSUxMSVNFQ09ORF0gKiAxMDAwKSkgKiBzaWduIC8vIHRoZSBtaWxsaXNlY29uZCBkZWNpbWFsIHBvaW50IGlzIGluY2x1ZGVkIGluIHRoZSBtYXRjaFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSBlbHNlIGlmICghIShtYXRjaCA9IGlzb1JlZ2V4LmV4ZWMoaW5wdXQpKSkge1xuICAgICAgICAgICAgc2lnbiA9IChtYXRjaFsxXSA9PT0gJy0nKSA/IC0xIDogMTtcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge1xuICAgICAgICAgICAgICAgIHkgOiBwYXJzZUlzbyhtYXRjaFsyXSwgc2lnbiksXG4gICAgICAgICAgICAgICAgTSA6IHBhcnNlSXNvKG1hdGNoWzNdLCBzaWduKSxcbiAgICAgICAgICAgICAgICB3IDogcGFyc2VJc28obWF0Y2hbNF0sIHNpZ24pLFxuICAgICAgICAgICAgICAgIGQgOiBwYXJzZUlzbyhtYXRjaFs1XSwgc2lnbiksXG4gICAgICAgICAgICAgICAgaCA6IHBhcnNlSXNvKG1hdGNoWzZdLCBzaWduKSxcbiAgICAgICAgICAgICAgICBtIDogcGFyc2VJc28obWF0Y2hbN10sIHNpZ24pLFxuICAgICAgICAgICAgICAgIHMgOiBwYXJzZUlzbyhtYXRjaFs4XSwgc2lnbilcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0gZWxzZSBpZiAoZHVyYXRpb24gPT0gbnVsbCkgey8vIGNoZWNrcyBmb3IgbnVsbCBvciB1bmRlZmluZWRcbiAgICAgICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGR1cmF0aW9uID09PSAnb2JqZWN0JyAmJiAoJ2Zyb20nIGluIGR1cmF0aW9uIHx8ICd0bycgaW4gZHVyYXRpb24pKSB7XG4gICAgICAgICAgICBkaWZmUmVzID0gbW9tZW50c0RpZmZlcmVuY2UoY3JlYXRlTG9jYWwoZHVyYXRpb24uZnJvbSksIGNyZWF0ZUxvY2FsKGR1cmF0aW9uLnRvKSk7XG5cbiAgICAgICAgICAgIGR1cmF0aW9uID0ge307XG4gICAgICAgICAgICBkdXJhdGlvbi5tcyA9IGRpZmZSZXMubWlsbGlzZWNvbmRzO1xuICAgICAgICAgICAgZHVyYXRpb24uTSA9IGRpZmZSZXMubW9udGhzO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0ID0gbmV3IER1cmF0aW9uKGR1cmF0aW9uKTtcblxuICAgICAgICBpZiAoaXNEdXJhdGlvbihpbnB1dCkgJiYgaGFzT3duUHJvcChpbnB1dCwgJ19sb2NhbGUnKSkge1xuICAgICAgICAgICAgcmV0Ll9sb2NhbGUgPSBpbnB1dC5fbG9jYWxlO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHJldDtcbiAgICB9XG5cbiAgICBjcmVhdGVEdXJhdGlvbi5mbiA9IER1cmF0aW9uLnByb3RvdHlwZTtcbiAgICBjcmVhdGVEdXJhdGlvbi5pbnZhbGlkID0gY3JlYXRlSW52YWxpZCQxO1xuXG4gICAgZnVuY3Rpb24gcGFyc2VJc28gKGlucCwgc2lnbikge1xuICAgICAgICAvLyBXZSdkIG5vcm1hbGx5IHVzZSB+fmlucCBmb3IgdGhpcywgYnV0IHVuZm9ydHVuYXRlbHkgaXQgYWxzb1xuICAgICAgICAvLyBjb252ZXJ0cyBmbG9hdHMgdG8gaW50cy5cbiAgICAgICAgLy8gaW5wIG1heSBiZSB1bmRlZmluZWQsIHNvIGNhcmVmdWwgY2FsbGluZyByZXBsYWNlIG9uIGl0LlxuICAgICAgICB2YXIgcmVzID0gaW5wICYmIHBhcnNlRmxvYXQoaW5wLnJlcGxhY2UoJywnLCAnLicpKTtcbiAgICAgICAgLy8gYXBwbHkgc2lnbiB3aGlsZSB3ZSdyZSBhdCBpdFxuICAgICAgICByZXR1cm4gKGlzTmFOKHJlcykgPyAwIDogcmVzKSAqIHNpZ247XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcikge1xuICAgICAgICB2YXIgcmVzID0ge307XG5cbiAgICAgICAgcmVzLm1vbnRocyA9IG90aGVyLm1vbnRoKCkgLSBiYXNlLm1vbnRoKCkgK1xuICAgICAgICAgICAgKG90aGVyLnllYXIoKSAtIGJhc2UueWVhcigpKSAqIDEyO1xuICAgICAgICBpZiAoYmFzZS5jbG9uZSgpLmFkZChyZXMubW9udGhzLCAnTScpLmlzQWZ0ZXIob3RoZXIpKSB7XG4gICAgICAgICAgICAtLXJlcy5tb250aHM7XG4gICAgICAgIH1cblxuICAgICAgICByZXMubWlsbGlzZWNvbmRzID0gK290aGVyIC0gKyhiYXNlLmNsb25lKCkuYWRkKHJlcy5tb250aHMsICdNJykpO1xuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9tZW50c0RpZmZlcmVuY2UoYmFzZSwgb3RoZXIpIHtcbiAgICAgICAgdmFyIHJlcztcbiAgICAgICAgaWYgKCEoYmFzZS5pc1ZhbGlkKCkgJiYgb3RoZXIuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIHttaWxsaXNlY29uZHM6IDAsIG1vbnRoczogMH07XG4gICAgICAgIH1cblxuICAgICAgICBvdGhlciA9IGNsb25lV2l0aE9mZnNldChvdGhlciwgYmFzZSk7XG4gICAgICAgIGlmIChiYXNlLmlzQmVmb3JlKG90aGVyKSkge1xuICAgICAgICAgICAgcmVzID0gcG9zaXRpdmVNb21lbnRzRGlmZmVyZW5jZShiYXNlLCBvdGhlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXMgPSBwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlKG90aGVyLCBiYXNlKTtcbiAgICAgICAgICAgIHJlcy5taWxsaXNlY29uZHMgPSAtcmVzLm1pbGxpc2Vjb25kcztcbiAgICAgICAgICAgIHJlcy5tb250aHMgPSAtcmVzLm1vbnRocztcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiByZXM7XG4gICAgfVxuXG4gICAgLy8gVE9ETzogcmVtb3ZlICduYW1lJyBhcmcgYWZ0ZXIgZGVwcmVjYXRpb24gaXMgcmVtb3ZlZFxuICAgIGZ1bmN0aW9uIGNyZWF0ZUFkZGVyKGRpcmVjdGlvbiwgbmFtZSkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKHZhbCwgcGVyaW9kKSB7XG4gICAgICAgICAgICB2YXIgZHVyLCB0bXA7XG4gICAgICAgICAgICAvL2ludmVydCB0aGUgYXJndW1lbnRzLCBidXQgY29tcGxhaW4gYWJvdXQgaXRcbiAgICAgICAgICAgIGlmIChwZXJpb2QgIT09IG51bGwgJiYgIWlzTmFOKCtwZXJpb2QpKSB7XG4gICAgICAgICAgICAgICAgZGVwcmVjYXRlU2ltcGxlKG5hbWUsICdtb21lbnQoKS4nICsgbmFtZSAgKyAnKHBlcmlvZCwgbnVtYmVyKSBpcyBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIG1vbWVudCgpLicgKyBuYW1lICsgJyhudW1iZXIsIHBlcmlvZCkuICcgK1xuICAgICAgICAgICAgICAgICdTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9hZGQtaW52ZXJ0ZWQtcGFyYW0vIGZvciBtb3JlIGluZm8uJyk7XG4gICAgICAgICAgICAgICAgdG1wID0gdmFsOyB2YWwgPSBwZXJpb2Q7IHBlcmlvZCA9IHRtcDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgdmFsID0gdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgPyArdmFsIDogdmFsO1xuICAgICAgICAgICAgZHVyID0gY3JlYXRlRHVyYXRpb24odmFsLCBwZXJpb2QpO1xuICAgICAgICAgICAgYWRkU3VidHJhY3QodGhpcywgZHVyLCBkaXJlY3Rpb24pO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkU3VidHJhY3QgKG1vbSwgZHVyYXRpb24sIGlzQWRkaW5nLCB1cGRhdGVPZmZzZXQpIHtcbiAgICAgICAgdmFyIG1pbGxpc2Vjb25kcyA9IGR1cmF0aW9uLl9taWxsaXNlY29uZHMsXG4gICAgICAgICAgICBkYXlzID0gYWJzUm91bmQoZHVyYXRpb24uX2RheXMpLFxuICAgICAgICAgICAgbW9udGhzID0gYWJzUm91bmQoZHVyYXRpb24uX21vbnRocyk7XG5cbiAgICAgICAgaWYgKCFtb20uaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICAvLyBObyBvcFxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdXBkYXRlT2Zmc2V0ID0gdXBkYXRlT2Zmc2V0ID09IG51bGwgPyB0cnVlIDogdXBkYXRlT2Zmc2V0O1xuXG4gICAgICAgIGlmIChtb250aHMpIHtcbiAgICAgICAgICAgIHNldE1vbnRoKG1vbSwgZ2V0KG1vbSwgJ01vbnRoJykgKyBtb250aHMgKiBpc0FkZGluZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGRheXMpIHtcbiAgICAgICAgICAgIHNldCQxKG1vbSwgJ0RhdGUnLCBnZXQobW9tLCAnRGF0ZScpICsgZGF5cyAqIGlzQWRkaW5nKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobWlsbGlzZWNvbmRzKSB7XG4gICAgICAgICAgICBtb20uX2Quc2V0VGltZShtb20uX2QudmFsdWVPZigpICsgbWlsbGlzZWNvbmRzICogaXNBZGRpbmcpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh1cGRhdGVPZmZzZXQpIHtcbiAgICAgICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldChtb20sIGRheXMgfHwgbW9udGhzKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHZhciBhZGQgICAgICA9IGNyZWF0ZUFkZGVyKDEsICdhZGQnKTtcbiAgICB2YXIgc3VidHJhY3QgPSBjcmVhdGVBZGRlcigtMSwgJ3N1YnRyYWN0Jyk7XG5cbiAgICBmdW5jdGlvbiBnZXRDYWxlbmRhckZvcm1hdChteU1vbWVudCwgbm93KSB7XG4gICAgICAgIHZhciBkaWZmID0gbXlNb21lbnQuZGlmZihub3csICdkYXlzJywgdHJ1ZSk7XG4gICAgICAgIHJldHVybiBkaWZmIDwgLTYgPyAnc2FtZUVsc2UnIDpcbiAgICAgICAgICAgICAgICBkaWZmIDwgLTEgPyAnbGFzdFdlZWsnIDpcbiAgICAgICAgICAgICAgICBkaWZmIDwgMCA/ICdsYXN0RGF5JyA6XG4gICAgICAgICAgICAgICAgZGlmZiA8IDEgPyAnc2FtZURheScgOlxuICAgICAgICAgICAgICAgIGRpZmYgPCAyID8gJ25leHREYXknIDpcbiAgICAgICAgICAgICAgICBkaWZmIDwgNyA/ICduZXh0V2VlaycgOiAnc2FtZUVsc2UnO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNhbGVuZGFyJDEgKHRpbWUsIGZvcm1hdHMpIHtcbiAgICAgICAgLy8gV2Ugd2FudCB0byBjb21wYXJlIHRoZSBzdGFydCBvZiB0b2RheSwgdnMgdGhpcy5cbiAgICAgICAgLy8gR2V0dGluZyBzdGFydC1vZi10b2RheSBkZXBlbmRzIG9uIHdoZXRoZXIgd2UncmUgbG9jYWwvdXRjL29mZnNldCBvciBub3QuXG4gICAgICAgIHZhciBub3cgPSB0aW1lIHx8IGNyZWF0ZUxvY2FsKCksXG4gICAgICAgICAgICBzb2QgPSBjbG9uZVdpdGhPZmZzZXQobm93LCB0aGlzKS5zdGFydE9mKCdkYXknKSxcbiAgICAgICAgICAgIGZvcm1hdCA9IGhvb2tzLmNhbGVuZGFyRm9ybWF0KHRoaXMsIHNvZCkgfHwgJ3NhbWVFbHNlJztcblxuICAgICAgICB2YXIgb3V0cHV0ID0gZm9ybWF0cyAmJiAoaXNGdW5jdGlvbihmb3JtYXRzW2Zvcm1hdF0pID8gZm9ybWF0c1tmb3JtYXRdLmNhbGwodGhpcywgbm93KSA6IGZvcm1hdHNbZm9ybWF0XSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuZm9ybWF0KG91dHB1dCB8fCB0aGlzLmxvY2FsZURhdGEoKS5jYWxlbmRhcihmb3JtYXQsIHRoaXMsIGNyZWF0ZUxvY2FsKG5vdykpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjbG9uZSAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTW9tZW50KHRoaXMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQWZ0ZXIgKGlucHV0LCB1bml0cykge1xuICAgICAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogY3JlYXRlTG9jYWwoaW5wdXQpO1xuICAgICAgICBpZiAoISh0aGlzLmlzVmFsaWQoKSAmJiBsb2NhbElucHV0LmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKSB8fCAnbWlsbGlzZWNvbmQnO1xuICAgICAgICBpZiAodW5pdHMgPT09ICdtaWxsaXNlY29uZCcpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnZhbHVlT2YoKSA+IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGxvY2FsSW5wdXQudmFsdWVPZigpIDwgdGhpcy5jbG9uZSgpLnN0YXJ0T2YodW5pdHMpLnZhbHVlT2YoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzQmVmb3JlIChpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgdmFyIGxvY2FsSW5wdXQgPSBpc01vbWVudChpbnB1dCkgPyBpbnB1dCA6IGNyZWF0ZUxvY2FsKGlucHV0KTtcbiAgICAgICAgaWYgKCEodGhpcy5pc1ZhbGlkKCkgJiYgbG9jYWxJbnB1dC5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cykgfHwgJ21pbGxpc2Vjb25kJztcbiAgICAgICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPCBsb2NhbElucHV0LnZhbHVlT2YoKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmNsb25lKCkuZW5kT2YodW5pdHMpLnZhbHVlT2YoKSA8IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNCZXR3ZWVuIChmcm9tLCB0bywgdW5pdHMsIGluY2x1c2l2aXR5KSB7XG4gICAgICAgIHZhciBsb2NhbEZyb20gPSBpc01vbWVudChmcm9tKSA/IGZyb20gOiBjcmVhdGVMb2NhbChmcm9tKSxcbiAgICAgICAgICAgIGxvY2FsVG8gPSBpc01vbWVudCh0bykgPyB0byA6IGNyZWF0ZUxvY2FsKHRvKTtcbiAgICAgICAgaWYgKCEodGhpcy5pc1ZhbGlkKCkgJiYgbG9jYWxGcm9tLmlzVmFsaWQoKSAmJiBsb2NhbFRvLmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpbmNsdXNpdml0eSA9IGluY2x1c2l2aXR5IHx8ICcoKSc7XG4gICAgICAgIHJldHVybiAoaW5jbHVzaXZpdHlbMF0gPT09ICcoJyA/IHRoaXMuaXNBZnRlcihsb2NhbEZyb20sIHVuaXRzKSA6ICF0aGlzLmlzQmVmb3JlKGxvY2FsRnJvbSwgdW5pdHMpKSAmJlxuICAgICAgICAgICAgKGluY2x1c2l2aXR5WzFdID09PSAnKScgPyB0aGlzLmlzQmVmb3JlKGxvY2FsVG8sIHVuaXRzKSA6ICF0aGlzLmlzQWZ0ZXIobG9jYWxUbywgdW5pdHMpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1NhbWUgKGlucHV0LCB1bml0cykge1xuICAgICAgICB2YXIgbG9jYWxJbnB1dCA9IGlzTW9tZW50KGlucHV0KSA/IGlucHV0IDogY3JlYXRlTG9jYWwoaW5wdXQpLFxuICAgICAgICAgICAgaW5wdXRNcztcbiAgICAgICAgaWYgKCEodGhpcy5pc1ZhbGlkKCkgJiYgbG9jYWxJbnB1dC5pc1ZhbGlkKCkpKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cykgfHwgJ21pbGxpc2Vjb25kJztcbiAgICAgICAgaWYgKHVuaXRzID09PSAnbWlsbGlzZWNvbmQnKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZU9mKCkgPT09IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaW5wdXRNcyA9IGxvY2FsSW5wdXQudmFsdWVPZigpO1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2xvbmUoKS5zdGFydE9mKHVuaXRzKS52YWx1ZU9mKCkgPD0gaW5wdXRNcyAmJiBpbnB1dE1zIDw9IHRoaXMuY2xvbmUoKS5lbmRPZih1bml0cykudmFsdWVPZigpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaXNTYW1lT3JBZnRlciAoaW5wdXQsIHVuaXRzKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzU2FtZShpbnB1dCwgdW5pdHMpIHx8IHRoaXMuaXNBZnRlcihpbnB1dCwgdW5pdHMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzU2FtZU9yQmVmb3JlIChpbnB1dCwgdW5pdHMpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNTYW1lKGlucHV0LCB1bml0cykgfHwgdGhpcy5pc0JlZm9yZShpbnB1dCwgdW5pdHMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGRpZmYgKGlucHV0LCB1bml0cywgYXNGbG9hdCkge1xuICAgICAgICB2YXIgdGhhdCxcbiAgICAgICAgICAgIHpvbmVEZWx0YSxcbiAgICAgICAgICAgIG91dHB1dDtcblxuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gTmFOO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhhdCA9IGNsb25lV2l0aE9mZnNldChpbnB1dCwgdGhpcyk7XG5cbiAgICAgICAgaWYgKCF0aGF0LmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuXG4gICAgICAgIHpvbmVEZWx0YSA9ICh0aGF0LnV0Y09mZnNldCgpIC0gdGhpcy51dGNPZmZzZXQoKSkgKiA2ZTQ7XG5cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG5cbiAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgY2FzZSAneWVhcic6IG91dHB1dCA9IG1vbnRoRGlmZih0aGlzLCB0aGF0KSAvIDEyOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21vbnRoJzogb3V0cHV0ID0gbW9udGhEaWZmKHRoaXMsIHRoYXQpOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3F1YXJ0ZXInOiBvdXRwdXQgPSBtb250aERpZmYodGhpcywgdGhhdCkgLyAzOyBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3NlY29uZCc6IG91dHB1dCA9ICh0aGlzIC0gdGhhdCkgLyAxZTM7IGJyZWFrOyAvLyAxMDAwXG4gICAgICAgICAgICBjYXNlICdtaW51dGUnOiBvdXRwdXQgPSAodGhpcyAtIHRoYXQpIC8gNmU0OyBicmVhazsgLy8gMTAwMCAqIDYwXG4gICAgICAgICAgICBjYXNlICdob3VyJzogb3V0cHV0ID0gKHRoaXMgLSB0aGF0KSAvIDM2ZTU7IGJyZWFrOyAvLyAxMDAwICogNjAgKiA2MFxuICAgICAgICAgICAgY2FzZSAnZGF5Jzogb3V0cHV0ID0gKHRoaXMgLSB0aGF0IC0gem9uZURlbHRhKSAvIDg2NGU1OyBicmVhazsgLy8gMTAwMCAqIDYwICogNjAgKiAyNCwgbmVnYXRlIGRzdFxuICAgICAgICAgICAgY2FzZSAnd2Vlayc6IG91dHB1dCA9ICh0aGlzIC0gdGhhdCAtIHpvbmVEZWx0YSkgLyA2MDQ4ZTU7IGJyZWFrOyAvLyAxMDAwICogNjAgKiA2MCAqIDI0ICogNywgbmVnYXRlIGRzdFxuICAgICAgICAgICAgZGVmYXVsdDogb3V0cHV0ID0gdGhpcyAtIHRoYXQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYXNGbG9hdCA/IG91dHB1dCA6IGFic0Zsb29yKG91dHB1dCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbW9udGhEaWZmIChhLCBiKSB7XG4gICAgICAgIC8vIGRpZmZlcmVuY2UgaW4gbW9udGhzXG4gICAgICAgIHZhciB3aG9sZU1vbnRoRGlmZiA9ICgoYi55ZWFyKCkgLSBhLnllYXIoKSkgKiAxMikgKyAoYi5tb250aCgpIC0gYS5tb250aCgpKSxcbiAgICAgICAgICAgIC8vIGIgaXMgaW4gKGFuY2hvciAtIDEgbW9udGgsIGFuY2hvciArIDEgbW9udGgpXG4gICAgICAgICAgICBhbmNob3IgPSBhLmNsb25lKCkuYWRkKHdob2xlTW9udGhEaWZmLCAnbW9udGhzJyksXG4gICAgICAgICAgICBhbmNob3IyLCBhZGp1c3Q7XG5cbiAgICAgICAgaWYgKGIgLSBhbmNob3IgPCAwKSB7XG4gICAgICAgICAgICBhbmNob3IyID0gYS5jbG9uZSgpLmFkZCh3aG9sZU1vbnRoRGlmZiAtIDEsICdtb250aHMnKTtcbiAgICAgICAgICAgIC8vIGxpbmVhciBhY3Jvc3MgdGhlIG1vbnRoXG4gICAgICAgICAgICBhZGp1c3QgPSAoYiAtIGFuY2hvcikgLyAoYW5jaG9yIC0gYW5jaG9yMik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBhbmNob3IyID0gYS5jbG9uZSgpLmFkZCh3aG9sZU1vbnRoRGlmZiArIDEsICdtb250aHMnKTtcbiAgICAgICAgICAgIC8vIGxpbmVhciBhY3Jvc3MgdGhlIG1vbnRoXG4gICAgICAgICAgICBhZGp1c3QgPSAoYiAtIGFuY2hvcikgLyAoYW5jaG9yMiAtIGFuY2hvcik7XG4gICAgICAgIH1cblxuICAgICAgICAvL2NoZWNrIGZvciBuZWdhdGl2ZSB6ZXJvLCByZXR1cm4gemVybyBpZiBuZWdhdGl2ZSB6ZXJvXG4gICAgICAgIHJldHVybiAtKHdob2xlTW9udGhEaWZmICsgYWRqdXN0KSB8fCAwO1xuICAgIH1cblxuICAgIGhvb2tzLmRlZmF1bHRGb3JtYXQgPSAnWVlZWS1NTS1ERFRISDptbTpzc1onO1xuICAgIGhvb2tzLmRlZmF1bHRGb3JtYXRVdGMgPSAnWVlZWS1NTS1ERFRISDptbTpzc1taXSc7XG5cbiAgICBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNsb25lKCkubG9jYWxlKCdlbicpLmZvcm1hdCgnZGRkIE1NTSBERCBZWVlZIEhIOm1tOnNzIFtHTVRdWlonKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0lTT1N0cmluZyhrZWVwT2Zmc2V0KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG4gICAgICAgIHZhciB1dGMgPSBrZWVwT2Zmc2V0ICE9PSB0cnVlO1xuICAgICAgICB2YXIgbSA9IHV0YyA/IHRoaXMuY2xvbmUoKS51dGMoKSA6IHRoaXM7XG4gICAgICAgIGlmIChtLnllYXIoKSA8IDAgfHwgbS55ZWFyKCkgPiA5OTk5KSB7XG4gICAgICAgICAgICByZXR1cm4gZm9ybWF0TW9tZW50KG0sIHV0YyA/ICdZWVlZWVktTU0tRERbVF1ISDptbTpzcy5TU1NbWl0nIDogJ1lZWVlZWS1NTS1ERFtUXUhIOm1tOnNzLlNTU1onKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNGdW5jdGlvbihEYXRlLnByb3RvdHlwZS50b0lTT1N0cmluZykpIHtcbiAgICAgICAgICAgIC8vIG5hdGl2ZSBpbXBsZW1lbnRhdGlvbiBpcyB+NTB4IGZhc3RlciwgdXNlIGl0IHdoZW4gd2UgY2FuXG4gICAgICAgICAgICBpZiAodXRjKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudG9EYXRlKCkudG9JU09TdHJpbmcoKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMudmFsdWVPZigpICsgdGhpcy51dGNPZmZzZXQoKSAqIDYwICogMTAwMCkudG9JU09TdHJpbmcoKS5yZXBsYWNlKCdaJywgZm9ybWF0TW9tZW50KG0sICdaJykpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmb3JtYXRNb21lbnQobSwgdXRjID8gJ1lZWVktTU0tRERbVF1ISDptbTpzcy5TU1NbWl0nIDogJ1lZWVktTU0tRERbVF1ISDptbTpzcy5TU1NaJyk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJuIGEgaHVtYW4gcmVhZGFibGUgcmVwcmVzZW50YXRpb24gb2YgYSBtb21lbnQgdGhhdCBjYW5cbiAgICAgKiBhbHNvIGJlIGV2YWx1YXRlZCB0byBnZXQgYSBuZXcgbW9tZW50IHdoaWNoIGlzIHRoZSBzYW1lXG4gICAgICpcbiAgICAgKiBAbGluayBodHRwczovL25vZGVqcy5vcmcvZGlzdC9sYXRlc3QvZG9jcy9hcGkvdXRpbC5odG1sI3V0aWxfY3VzdG9tX2luc3BlY3RfZnVuY3Rpb25fb25fb2JqZWN0c1xuICAgICAqL1xuICAgIGZ1bmN0aW9uIGluc3BlY3QgKCkge1xuICAgICAgICBpZiAoIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gJ21vbWVudC5pbnZhbGlkKC8qICcgKyB0aGlzLl9pICsgJyAqLyknO1xuICAgICAgICB9XG4gICAgICAgIHZhciBmdW5jID0gJ21vbWVudCc7XG4gICAgICAgIHZhciB6b25lID0gJyc7XG4gICAgICAgIGlmICghdGhpcy5pc0xvY2FsKCkpIHtcbiAgICAgICAgICAgIGZ1bmMgPSB0aGlzLnV0Y09mZnNldCgpID09PSAwID8gJ21vbWVudC51dGMnIDogJ21vbWVudC5wYXJzZVpvbmUnO1xuICAgICAgICAgICAgem9uZSA9ICdaJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgcHJlZml4ID0gJ1snICsgZnVuYyArICcoXCJdJztcbiAgICAgICAgdmFyIHllYXIgPSAoMCA8PSB0aGlzLnllYXIoKSAmJiB0aGlzLnllYXIoKSA8PSA5OTk5KSA/ICdZWVlZJyA6ICdZWVlZWVknO1xuICAgICAgICB2YXIgZGF0ZXRpbWUgPSAnLU1NLUREW1RdSEg6bW06c3MuU1NTJztcbiAgICAgICAgdmFyIHN1ZmZpeCA9IHpvbmUgKyAnW1wiKV0nO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmZvcm1hdChwcmVmaXggKyB5ZWFyICsgZGF0ZXRpbWUgKyBzdWZmaXgpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGZvcm1hdCAoaW5wdXRTdHJpbmcpIHtcbiAgICAgICAgaWYgKCFpbnB1dFN0cmluZykge1xuICAgICAgICAgICAgaW5wdXRTdHJpbmcgPSB0aGlzLmlzVXRjKCkgPyBob29rcy5kZWZhdWx0Rm9ybWF0VXRjIDogaG9va3MuZGVmYXVsdEZvcm1hdDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgb3V0cHV0ID0gZm9ybWF0TW9tZW50KHRoaXMsIGlucHV0U3RyaW5nKTtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLnBvc3Rmb3JtYXQob3V0cHV0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmcm9tICh0aW1lLCB3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIGlmICh0aGlzLmlzVmFsaWQoKSAmJlxuICAgICAgICAgICAgICAgICgoaXNNb21lbnQodGltZSkgJiYgdGltZS5pc1ZhbGlkKCkpIHx8XG4gICAgICAgICAgICAgICAgIGNyZWF0ZUxvY2FsKHRpbWUpLmlzVmFsaWQoKSkpIHtcbiAgICAgICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbih7dG86IHRoaXMsIGZyb206IHRpbWV9KS5sb2NhbGUodGhpcy5sb2NhbGUoKSkuaHVtYW5pemUoIXdpdGhvdXRTdWZmaXgpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpLmludmFsaWREYXRlKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmcm9tTm93ICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZyb20oY3JlYXRlTG9jYWwoKSwgd2l0aG91dFN1ZmZpeCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG8gKHRpbWUsIHdpdGhvdXRTdWZmaXgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNWYWxpZCgpICYmXG4gICAgICAgICAgICAgICAgKChpc01vbWVudCh0aW1lKSAmJiB0aW1lLmlzVmFsaWQoKSkgfHxcbiAgICAgICAgICAgICAgICAgY3JlYXRlTG9jYWwodGltZSkuaXNWYWxpZCgpKSkge1xuICAgICAgICAgICAgcmV0dXJuIGNyZWF0ZUR1cmF0aW9uKHtmcm9tOiB0aGlzLCB0bzogdGltZX0pLmxvY2FsZSh0aGlzLmxvY2FsZSgpKS5odW1hbml6ZSghd2l0aG91dFN1ZmZpeCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGVEYXRhKCkuaW52YWxpZERhdGUoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvTm93ICh3aXRob3V0U3VmZml4KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRvKGNyZWF0ZUxvY2FsKCksIHdpdGhvdXRTdWZmaXgpO1xuICAgIH1cblxuICAgIC8vIElmIHBhc3NlZCBhIGxvY2FsZSBrZXksIGl0IHdpbGwgc2V0IHRoZSBsb2NhbGUgZm9yIHRoaXNcbiAgICAvLyBpbnN0YW5jZS4gIE90aGVyd2lzZSwgaXQgd2lsbCByZXR1cm4gdGhlIGxvY2FsZSBjb25maWd1cmF0aW9uXG4gICAgLy8gdmFyaWFibGVzIGZvciB0aGlzIGluc3RhbmNlLlxuICAgIGZ1bmN0aW9uIGxvY2FsZSAoa2V5KSB7XG4gICAgICAgIHZhciBuZXdMb2NhbGVEYXRhO1xuXG4gICAgICAgIGlmIChrZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuX2xvY2FsZS5fYWJicjtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG5ld0xvY2FsZURhdGEgPSBnZXRMb2NhbGUoa2V5KTtcbiAgICAgICAgICAgIGlmIChuZXdMb2NhbGVEYXRhICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl9sb2NhbGUgPSBuZXdMb2NhbGVEYXRhO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgbGFuZyA9IGRlcHJlY2F0ZShcbiAgICAgICAgJ21vbWVudCgpLmxhbmcoKSBpcyBkZXByZWNhdGVkLiBJbnN0ZWFkLCB1c2UgbW9tZW50KCkubG9jYWxlRGF0YSgpIHRvIGdldCB0aGUgbGFuZ3VhZ2UgY29uZmlndXJhdGlvbi4gVXNlIG1vbWVudCgpLmxvY2FsZSgpIHRvIGNoYW5nZSBsYW5ndWFnZXMuJyxcbiAgICAgICAgZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgaWYgKGtleSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxlRGF0YSgpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5sb2NhbGUoa2V5KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICk7XG5cbiAgICBmdW5jdGlvbiBsb2NhbGVEYXRhICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2xvY2FsZTtcbiAgICB9XG5cbiAgICB2YXIgTVNfUEVSX1NFQ09ORCA9IDEwMDA7XG4gICAgdmFyIE1TX1BFUl9NSU5VVEUgPSA2MCAqIE1TX1BFUl9TRUNPTkQ7XG4gICAgdmFyIE1TX1BFUl9IT1VSID0gNjAgKiBNU19QRVJfTUlOVVRFO1xuICAgIHZhciBNU19QRVJfNDAwX1lFQVJTID0gKDM2NSAqIDQwMCArIDk3KSAqIDI0ICogTVNfUEVSX0hPVVI7XG5cbiAgICAvLyBhY3R1YWwgbW9kdWxvIC0gaGFuZGxlcyBuZWdhdGl2ZSBudW1iZXJzIChmb3IgZGF0ZXMgYmVmb3JlIDE5NzApOlxuICAgIGZ1bmN0aW9uIG1vZCQxKGRpdmlkZW5kLCBkaXZpc29yKSB7XG4gICAgICAgIHJldHVybiAoZGl2aWRlbmQgJSBkaXZpc29yICsgZGl2aXNvcikgJSBkaXZpc29yO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxvY2FsU3RhcnRPZkRhdGUoeSwgbSwgZCkge1xuICAgICAgICAvLyB0aGUgZGF0ZSBjb25zdHJ1Y3RvciByZW1hcHMgeWVhcnMgMC05OSB0byAxOTAwLTE5OTlcbiAgICAgICAgaWYgKHkgPCAxMDAgJiYgeSA+PSAwKSB7XG4gICAgICAgICAgICAvLyBwcmVzZXJ2ZSBsZWFwIHllYXJzIHVzaW5nIGEgZnVsbCA0MDAgeWVhciBjeWNsZSwgdGhlbiByZXNldFxuICAgICAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHkgKyA0MDAsIG0sIGQpIC0gTVNfUEVSXzQwMF9ZRUFSUztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBuZXcgRGF0ZSh5LCBtLCBkKS52YWx1ZU9mKCk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB1dGNTdGFydE9mRGF0ZSh5LCBtLCBkKSB7XG4gICAgICAgIC8vIERhdGUuVVRDIHJlbWFwcyB5ZWFycyAwLTk5IHRvIDE5MDAtMTk5OVxuICAgICAgICBpZiAoeSA8IDEwMCAmJiB5ID49IDApIHtcbiAgICAgICAgICAgIC8vIHByZXNlcnZlIGxlYXAgeWVhcnMgdXNpbmcgYSBmdWxsIDQwMCB5ZWFyIGN5Y2xlLCB0aGVuIHJlc2V0XG4gICAgICAgICAgICByZXR1cm4gRGF0ZS5VVEMoeSArIDQwMCwgbSwgZCkgLSBNU19QRVJfNDAwX1lFQVJTO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIERhdGUuVVRDKHksIG0sIGQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc3RhcnRPZiAodW5pdHMpIHtcbiAgICAgICAgdmFyIHRpbWU7XG4gICAgICAgIHVuaXRzID0gbm9ybWFsaXplVW5pdHModW5pdHMpO1xuICAgICAgICBpZiAodW5pdHMgPT09IHVuZGVmaW5lZCB8fCB1bml0cyA9PT0gJ21pbGxpc2Vjb25kJyB8fCAhdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHN0YXJ0T2ZEYXRlID0gdGhpcy5faXNVVEMgPyB1dGNTdGFydE9mRGF0ZSA6IGxvY2FsU3RhcnRPZkRhdGU7XG5cbiAgICAgICAgc3dpdGNoICh1bml0cykge1xuICAgICAgICAgICAgY2FzZSAneWVhcic6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCAwLCAxKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3F1YXJ0ZXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpIC0gdGhpcy5tb250aCgpICUgMywgMSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdtb250aCc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnd2Vlayc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIHRoaXMuZGF0ZSgpIC0gdGhpcy53ZWVrZGF5KCkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaXNvV2Vlayc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIHRoaXMuZGF0ZSgpIC0gKHRoaXMuaXNvV2Vla2RheSgpIC0gMSkpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnZGF5JzpcbiAgICAgICAgICAgIGNhc2UgJ2RhdGUnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCB0aGlzLmRhdGUoKSk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdob3VyJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSAtPSBtb2QkMSh0aW1lICsgKHRoaXMuX2lzVVRDID8gMCA6IHRoaXMudXRjT2Zmc2V0KCkgKiBNU19QRVJfTUlOVVRFKSwgTVNfUEVSX0hPVVIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnbWludXRlJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gdGhpcy5fZC52YWx1ZU9mKCk7XG4gICAgICAgICAgICAgICAgdGltZSAtPSBtb2QkMSh0aW1lLCBNU19QRVJfTUlOVVRFKTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgLT0gbW9kJDEodGltZSwgTVNfUEVSX1NFQ09ORCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLl9kLnNldFRpbWUodGltZSk7XG4gICAgICAgIGhvb2tzLnVwZGF0ZU9mZnNldCh0aGlzLCB0cnVlKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZW5kT2YgKHVuaXRzKSB7XG4gICAgICAgIHZhciB0aW1lO1xuICAgICAgICB1bml0cyA9IG5vcm1hbGl6ZVVuaXRzKHVuaXRzKTtcbiAgICAgICAgaWYgKHVuaXRzID09PSB1bmRlZmluZWQgfHwgdW5pdHMgPT09ICdtaWxsaXNlY29uZCcgfHwgIXRoaXMuaXNWYWxpZCgpKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzdGFydE9mRGF0ZSA9IHRoaXMuX2lzVVRDID8gdXRjU3RhcnRPZkRhdGUgOiBsb2NhbFN0YXJ0T2ZEYXRlO1xuXG4gICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgIGNhc2UgJ3llYXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSArIDEsIDAsIDEpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3F1YXJ0ZXInOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpIC0gdGhpcy5tb250aCgpICUgMyArIDMsIDEpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21vbnRoJzpcbiAgICAgICAgICAgICAgICB0aW1lID0gc3RhcnRPZkRhdGUodGhpcy55ZWFyKCksIHRoaXMubW9udGgoKSArIDEsIDEpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3dlZWsnOlxuICAgICAgICAgICAgICAgIHRpbWUgPSBzdGFydE9mRGF0ZSh0aGlzLnllYXIoKSwgdGhpcy5tb250aCgpLCB0aGlzLmRhdGUoKSAtIHRoaXMud2Vla2RheSgpICsgNykgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaXNvV2Vlayc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIHRoaXMuZGF0ZSgpIC0gKHRoaXMuaXNvV2Vla2RheSgpIC0gMSkgKyA3KSAtIDE7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBjYXNlICdkYXknOlxuICAgICAgICAgICAgY2FzZSAnZGF0ZSc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHN0YXJ0T2ZEYXRlKHRoaXMueWVhcigpLCB0aGlzLm1vbnRoKCksIHRoaXMuZGF0ZSgpICsgMSkgLSAxO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSAnaG91cic6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgKz0gTVNfUEVSX0hPVVIgLSBtb2QkMSh0aW1lICsgKHRoaXMuX2lzVVRDID8gMCA6IHRoaXMudXRjT2Zmc2V0KCkgKiBNU19QRVJfTUlOVVRFKSwgTVNfUEVSX0hPVVIpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ21pbnV0ZSc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgKz0gTVNfUEVSX01JTlVURSAtIG1vZCQxKHRpbWUsIE1TX1BFUl9NSU5VVEUpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2UgJ3NlY29uZCc6XG4gICAgICAgICAgICAgICAgdGltZSA9IHRoaXMuX2QudmFsdWVPZigpO1xuICAgICAgICAgICAgICAgIHRpbWUgKz0gTVNfUEVSX1NFQ09ORCAtIG1vZCQxKHRpbWUsIE1TX1BFUl9TRUNPTkQpIC0gMTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX2Quc2V0VGltZSh0aW1lKTtcbiAgICAgICAgaG9va3MudXBkYXRlT2Zmc2V0KHRoaXMsIHRydWUpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB2YWx1ZU9mICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2QudmFsdWVPZigpIC0gKCh0aGlzLl9vZmZzZXQgfHwgMCkgKiA2MDAwMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdW5peCAoKSB7XG4gICAgICAgIHJldHVybiBNYXRoLmZsb29yKHRoaXMudmFsdWVPZigpIC8gMTAwMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9EYXRlICgpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBEYXRlKHRoaXMudmFsdWVPZigpKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b0FycmF5ICgpIHtcbiAgICAgICAgdmFyIG0gPSB0aGlzO1xuICAgICAgICByZXR1cm4gW20ueWVhcigpLCBtLm1vbnRoKCksIG0uZGF0ZSgpLCBtLmhvdXIoKSwgbS5taW51dGUoKSwgbS5zZWNvbmQoKSwgbS5taWxsaXNlY29uZCgpXTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0b09iamVjdCAoKSB7XG4gICAgICAgIHZhciBtID0gdGhpcztcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHllYXJzOiBtLnllYXIoKSxcbiAgICAgICAgICAgIG1vbnRoczogbS5tb250aCgpLFxuICAgICAgICAgICAgZGF0ZTogbS5kYXRlKCksXG4gICAgICAgICAgICBob3VyczogbS5ob3VycygpLFxuICAgICAgICAgICAgbWludXRlczogbS5taW51dGVzKCksXG4gICAgICAgICAgICBzZWNvbmRzOiBtLnNlY29uZHMoKSxcbiAgICAgICAgICAgIG1pbGxpc2Vjb25kczogbS5taWxsaXNlY29uZHMoKVxuICAgICAgICB9O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHRvSlNPTiAoKSB7XG4gICAgICAgIC8vIG5ldyBEYXRlKE5hTikudG9KU09OKCkgPT09IG51bGxcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNWYWxpZCgpID8gdGhpcy50b0lTT1N0cmluZygpIDogbnVsbDtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1ZhbGlkJDIgKCkge1xuICAgICAgICByZXR1cm4gaXNWYWxpZCh0aGlzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzaW5nRmxhZ3MgKCkge1xuICAgICAgICByZXR1cm4gZXh0ZW5kKHt9LCBnZXRQYXJzaW5nRmxhZ3ModGhpcykpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGludmFsaWRBdCAoKSB7XG4gICAgICAgIHJldHVybiBnZXRQYXJzaW5nRmxhZ3ModGhpcykub3ZlcmZsb3c7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRpb25EYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5wdXQ6IHRoaXMuX2ksXG4gICAgICAgICAgICBmb3JtYXQ6IHRoaXMuX2YsXG4gICAgICAgICAgICBsb2NhbGU6IHRoaXMuX2xvY2FsZSxcbiAgICAgICAgICAgIGlzVVRDOiB0aGlzLl9pc1VUQyxcbiAgICAgICAgICAgIHN0cmljdDogdGhpcy5fc3RyaWN0XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydnZycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLndlZWtZZWFyKCkgJSAxMDA7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ0dHJywgMl0sIDAsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNvV2Vla1llYXIoKSAlIDEwMDtcbiAgICB9KTtcblxuICAgIGZ1bmN0aW9uIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4gKHRva2VuLCBnZXR0ZXIpIHtcbiAgICAgICAgYWRkRm9ybWF0VG9rZW4oMCwgW3Rva2VuLCB0b2tlbi5sZW5ndGhdLCAwLCBnZXR0ZXIpO1xuICAgIH1cblxuICAgIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ2dnZ2cnLCAgICAgJ3dlZWtZZWFyJyk7XG4gICAgYWRkV2Vla1llYXJGb3JtYXRUb2tlbignZ2dnZ2cnLCAgICAnd2Vla1llYXInKTtcbiAgICBhZGRXZWVrWWVhckZvcm1hdFRva2VuKCdHR0dHJywgICdpc29XZWVrWWVhcicpO1xuICAgIGFkZFdlZWtZZWFyRm9ybWF0VG9rZW4oJ0dHR0dHJywgJ2lzb1dlZWtZZWFyJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ3dlZWtZZWFyJywgJ2dnJyk7XG4gICAgYWRkVW5pdEFsaWFzKCdpc29XZWVrWWVhcicsICdHRycpO1xuXG4gICAgLy8gUFJJT1JJVFlcblxuICAgIGFkZFVuaXRQcmlvcml0eSgnd2Vla1llYXInLCAxKTtcbiAgICBhZGRVbml0UHJpb3JpdHkoJ2lzb1dlZWtZZWFyJywgMSk7XG5cblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ0cnLCAgICAgIG1hdGNoU2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCdnJywgICAgICBtYXRjaFNpZ25lZCk7XG4gICAgYWRkUmVnZXhUb2tlbignR0cnLCAgICAgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ2dnJywgICAgIG1hdGNoMXRvMiwgbWF0Y2gyKTtcbiAgICBhZGRSZWdleFRva2VuKCdHR0dHJywgICBtYXRjaDF0bzQsIG1hdGNoNCk7XG4gICAgYWRkUmVnZXhUb2tlbignZ2dnZycsICAgbWF0Y2gxdG80LCBtYXRjaDQpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0dHR0dHJywgIG1hdGNoMXRvNiwgbWF0Y2g2KTtcbiAgICBhZGRSZWdleFRva2VuKCdnZ2dnZycsICBtYXRjaDF0bzYsIG1hdGNoNik7XG5cbiAgICBhZGRXZWVrUGFyc2VUb2tlbihbJ2dnZ2cnLCAnZ2dnZ2cnLCAnR0dHRycsICdHR0dHRyddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgd2Vla1t0b2tlbi5zdWJzdHIoMCwgMildID0gdG9JbnQoaW5wdXQpO1xuICAgIH0pO1xuXG4gICAgYWRkV2Vla1BhcnNlVG9rZW4oWydnZycsICdHRyddLCBmdW5jdGlvbiAoaW5wdXQsIHdlZWssIGNvbmZpZywgdG9rZW4pIHtcbiAgICAgICAgd2Vla1t0b2tlbl0gPSBob29rcy5wYXJzZVR3b0RpZ2l0WWVhcihpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXRXZWVrWWVhciAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGdldFNldFdlZWtZZWFySGVscGVyLmNhbGwodGhpcyxcbiAgICAgICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgICAgICAgICB0aGlzLndlZWsoKSxcbiAgICAgICAgICAgICAgICB0aGlzLndlZWtkYXkoKSxcbiAgICAgICAgICAgICAgICB0aGlzLmxvY2FsZURhdGEoKS5fd2Vlay5kb3csXG4gICAgICAgICAgICAgICAgdGhpcy5sb2NhbGVEYXRhKCkuX3dlZWsuZG95KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRTZXRJU09XZWVrWWVhciAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGdldFNldFdlZWtZZWFySGVscGVyLmNhbGwodGhpcyxcbiAgICAgICAgICAgICAgICBpbnB1dCwgdGhpcy5pc29XZWVrKCksIHRoaXMuaXNvV2Vla2RheSgpLCAxLCA0KTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXRJU09XZWVrc0luWWVhciAoKSB7XG4gICAgICAgIHJldHVybiB3ZWVrc0luWWVhcih0aGlzLnllYXIoKSwgMSwgNCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0V2Vla3NJblllYXIgKCkge1xuICAgICAgICB2YXIgd2Vla0luZm8gPSB0aGlzLmxvY2FsZURhdGEoKS5fd2VlaztcbiAgICAgICAgcmV0dXJuIHdlZWtzSW5ZZWFyKHRoaXMueWVhcigpLCB3ZWVrSW5mby5kb3csIHdlZWtJbmZvLmRveSk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0U2V0V2Vla1llYXJIZWxwZXIoaW5wdXQsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgICAgIHZhciB3ZWVrc1RhcmdldDtcbiAgICAgICAgaWYgKGlucHV0ID09IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiB3ZWVrT2ZZZWFyKHRoaXMsIGRvdywgZG95KS55ZWFyO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2Vla3NUYXJnZXQgPSB3ZWVrc0luWWVhcihpbnB1dCwgZG93LCBkb3kpO1xuICAgICAgICAgICAgaWYgKHdlZWsgPiB3ZWVrc1RhcmdldCkge1xuICAgICAgICAgICAgICAgIHdlZWsgPSB3ZWVrc1RhcmdldDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBzZXRXZWVrQWxsLmNhbGwodGhpcywgaW5wdXQsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHNldFdlZWtBbGwod2Vla1llYXIsIHdlZWssIHdlZWtkYXksIGRvdywgZG95KSB7XG4gICAgICAgIHZhciBkYXlPZlllYXJEYXRhID0gZGF5T2ZZZWFyRnJvbVdlZWtzKHdlZWtZZWFyLCB3ZWVrLCB3ZWVrZGF5LCBkb3csIGRveSksXG4gICAgICAgICAgICBkYXRlID0gY3JlYXRlVVRDRGF0ZShkYXlPZlllYXJEYXRhLnllYXIsIDAsIGRheU9mWWVhckRhdGEuZGF5T2ZZZWFyKTtcblxuICAgICAgICB0aGlzLnllYXIoZGF0ZS5nZXRVVENGdWxsWWVhcigpKTtcbiAgICAgICAgdGhpcy5tb250aChkYXRlLmdldFVUQ01vbnRoKCkpO1xuICAgICAgICB0aGlzLmRhdGUoZGF0ZS5nZXRVVENEYXRlKCkpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignUScsIDAsICdRbycsICdxdWFydGVyJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ3F1YXJ0ZXInLCAnUScpO1xuXG4gICAgLy8gUFJJT1JJVFlcblxuICAgIGFkZFVuaXRQcmlvcml0eSgncXVhcnRlcicsIDcpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignUScsIG1hdGNoMSk7XG4gICAgYWRkUGFyc2VUb2tlbignUScsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXkpIHtcbiAgICAgICAgYXJyYXlbTU9OVEhdID0gKHRvSW50KGlucHV0KSAtIDEpICogMztcbiAgICB9KTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIGZ1bmN0aW9uIGdldFNldFF1YXJ0ZXIgKGlucHV0KSB7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gTWF0aC5jZWlsKCh0aGlzLm1vbnRoKCkgKyAxKSAvIDMpIDogdGhpcy5tb250aCgoaW5wdXQgLSAxKSAqIDMgKyB0aGlzLm1vbnRoKCkgJSAzKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignRCcsIFsnREQnLCAyXSwgJ0RvJywgJ2RhdGUnKTtcblxuICAgIC8vIEFMSUFTRVNcblxuICAgIGFkZFVuaXRBbGlhcygnZGF0ZScsICdEJyk7XG5cbiAgICAvLyBQUklPUklUWVxuICAgIGFkZFVuaXRQcmlvcml0eSgnZGF0ZScsIDkpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignRCcsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0REJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0RvJywgZnVuY3Rpb24gKGlzU3RyaWN0LCBsb2NhbGUpIHtcbiAgICAgICAgLy8gVE9ETzogUmVtb3ZlIFwib3JkaW5hbFBhcnNlXCIgZmFsbGJhY2sgaW4gbmV4dCBtYWpvciByZWxlYXNlLlxuICAgICAgICByZXR1cm4gaXNTdHJpY3QgP1xuICAgICAgICAgIChsb2NhbGUuX2RheU9mTW9udGhPcmRpbmFsUGFyc2UgfHwgbG9jYWxlLl9vcmRpbmFsUGFyc2UpIDpcbiAgICAgICAgICBsb2NhbGUuX2RheU9mTW9udGhPcmRpbmFsUGFyc2VMZW5pZW50O1xuICAgIH0pO1xuXG4gICAgYWRkUGFyc2VUb2tlbihbJ0QnLCAnREQnXSwgREFURSk7XG4gICAgYWRkUGFyc2VUb2tlbignRG8nLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W0RBVEVdID0gdG9JbnQoaW5wdXQubWF0Y2gobWF0Y2gxdG8yKVswXSk7XG4gICAgfSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0RGF5T2ZNb250aCA9IG1ha2VHZXRTZXQoJ0RhdGUnLCB0cnVlKTtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdEREQnLCBbJ0REREQnLCAzXSwgJ0RERG8nLCAnZGF5T2ZZZWFyJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ2RheU9mWWVhcicsICdEREQnKTtcblxuICAgIC8vIFBSSU9SSVRZXG4gICAgYWRkVW5pdFByaW9yaXR5KCdkYXlPZlllYXInLCA0KTtcblxuICAgIC8vIFBBUlNJTkdcblxuICAgIGFkZFJlZ2V4VG9rZW4oJ0RERCcsICBtYXRjaDF0bzMpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ0REREQnLCBtYXRjaDMpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydEREQnLCAnRERERCddLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9kYXlPZlllYXIgPSB0b0ludChpbnB1dCk7XG4gICAgfSk7XG5cbiAgICAvLyBIRUxQRVJTXG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRTZXREYXlPZlllYXIgKGlucHV0KSB7XG4gICAgICAgIHZhciBkYXlPZlllYXIgPSBNYXRoLnJvdW5kKCh0aGlzLmNsb25lKCkuc3RhcnRPZignZGF5JykgLSB0aGlzLmNsb25lKCkuc3RhcnRPZigneWVhcicpKSAvIDg2NGU1KSArIDE7XG4gICAgICAgIHJldHVybiBpbnB1dCA9PSBudWxsID8gZGF5T2ZZZWFyIDogdGhpcy5hZGQoKGlucHV0IC0gZGF5T2ZZZWFyKSwgJ2QnKTtcbiAgICB9XG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignbScsIFsnbW0nLCAyXSwgMCwgJ21pbnV0ZScpO1xuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdtaW51dGUnLCAnbScpO1xuXG4gICAgLy8gUFJJT1JJVFlcblxuICAgIGFkZFVuaXRQcmlvcml0eSgnbWludXRlJywgMTQpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbignbScsICBtYXRjaDF0bzIpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ21tJywgbWF0Y2gxdG8yLCBtYXRjaDIpO1xuICAgIGFkZFBhcnNlVG9rZW4oWydtJywgJ21tJ10sIE1JTlVURSk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICB2YXIgZ2V0U2V0TWludXRlID0gbWFrZUdldFNldCgnTWludXRlcycsIGZhbHNlKTtcblxuICAgIC8vIEZPUk1BVFRJTkdcblxuICAgIGFkZEZvcm1hdFRva2VuKCdzJywgWydzcycsIDJdLCAwLCAnc2Vjb25kJyk7XG5cbiAgICAvLyBBTElBU0VTXG5cbiAgICBhZGRVbml0QWxpYXMoJ3NlY29uZCcsICdzJyk7XG5cbiAgICAvLyBQUklPUklUWVxuXG4gICAgYWRkVW5pdFByaW9yaXR5KCdzZWNvbmQnLCAxNSk7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdzJywgIG1hdGNoMXRvMik7XG4gICAgYWRkUmVnZXhUb2tlbignc3MnLCBtYXRjaDF0bzIsIG1hdGNoMik7XG4gICAgYWRkUGFyc2VUb2tlbihbJ3MnLCAnc3MnXSwgU0VDT05EKTtcblxuICAgIC8vIE1PTUVOVFNcblxuICAgIHZhciBnZXRTZXRTZWNvbmQgPSBtYWtlR2V0U2V0KCdTZWNvbmRzJywgZmFsc2UpO1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ1MnLCAwLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB+fih0aGlzLm1pbGxpc2Vjb25kKCkgLyAxMDApO1xuICAgIH0pO1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTUycsIDJdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB+fih0aGlzLm1pbGxpc2Vjb25kKCkgLyAxMCk7XG4gICAgfSk7XG5cbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTUycsIDNdLCAwLCAnbWlsbGlzZWNvbmQnKTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1MnLCA0XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTUycsIDVdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1MnLCA2XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDtcbiAgICB9KTtcbiAgICBhZGRGb3JtYXRUb2tlbigwLCBbJ1NTU1NTU1MnLCA3XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTUycsIDhdLCAwLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm1pbGxpc2Vjb25kKCkgKiAxMDAwMDA7XG4gICAgfSk7XG4gICAgYWRkRm9ybWF0VG9rZW4oMCwgWydTU1NTU1NTU1MnLCA5XSwgMCwgZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5taWxsaXNlY29uZCgpICogMTAwMDAwMDtcbiAgICB9KTtcblxuXG4gICAgLy8gQUxJQVNFU1xuXG4gICAgYWRkVW5pdEFsaWFzKCdtaWxsaXNlY29uZCcsICdtcycpO1xuXG4gICAgLy8gUFJJT1JJVFlcblxuICAgIGFkZFVuaXRQcmlvcml0eSgnbWlsbGlzZWNvbmQnLCAxNik7XG5cbiAgICAvLyBQQVJTSU5HXG5cbiAgICBhZGRSZWdleFRva2VuKCdTJywgICAgbWF0Y2gxdG8zLCBtYXRjaDEpO1xuICAgIGFkZFJlZ2V4VG9rZW4oJ1NTJywgICBtYXRjaDF0bzMsIG1hdGNoMik7XG4gICAgYWRkUmVnZXhUb2tlbignU1NTJywgIG1hdGNoMXRvMywgbWF0Y2gzKTtcblxuICAgIHZhciB0b2tlbjtcbiAgICBmb3IgKHRva2VuID0gJ1NTU1MnOyB0b2tlbi5sZW5ndGggPD0gOTsgdG9rZW4gKz0gJ1MnKSB7XG4gICAgICAgIGFkZFJlZ2V4VG9rZW4odG9rZW4sIG1hdGNoVW5zaWduZWQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlTXMoaW5wdXQsIGFycmF5KSB7XG4gICAgICAgIGFycmF5W01JTExJU0VDT05EXSA9IHRvSW50KCgnMC4nICsgaW5wdXQpICogMTAwMCk7XG4gICAgfVxuXG4gICAgZm9yICh0b2tlbiA9ICdTJzsgdG9rZW4ubGVuZ3RoIDw9IDk7IHRva2VuICs9ICdTJykge1xuICAgICAgICBhZGRQYXJzZVRva2VuKHRva2VuLCBwYXJzZU1zKTtcbiAgICB9XG4gICAgLy8gTU9NRU5UU1xuXG4gICAgdmFyIGdldFNldE1pbGxpc2Vjb25kID0gbWFrZUdldFNldCgnTWlsbGlzZWNvbmRzJywgZmFsc2UpO1xuXG4gICAgLy8gRk9STUFUVElOR1xuXG4gICAgYWRkRm9ybWF0VG9rZW4oJ3onLCAgMCwgMCwgJ3pvbmVBYmJyJyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ3p6JywgMCwgMCwgJ3pvbmVOYW1lJyk7XG5cbiAgICAvLyBNT01FTlRTXG5cbiAgICBmdW5jdGlvbiBnZXRab25lQWJiciAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9pc1VUQyA/ICdVVEMnIDogJyc7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Wm9uZU5hbWUgKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5faXNVVEMgPyAnQ29vcmRpbmF0ZWQgVW5pdmVyc2FsIFRpbWUnIDogJyc7XG4gICAgfVxuXG4gICAgdmFyIHByb3RvID0gTW9tZW50LnByb3RvdHlwZTtcblxuICAgIHByb3RvLmFkZCAgICAgICAgICAgICAgID0gYWRkO1xuICAgIHByb3RvLmNhbGVuZGFyICAgICAgICAgID0gY2FsZW5kYXIkMTtcbiAgICBwcm90by5jbG9uZSAgICAgICAgICAgICA9IGNsb25lO1xuICAgIHByb3RvLmRpZmYgICAgICAgICAgICAgID0gZGlmZjtcbiAgICBwcm90by5lbmRPZiAgICAgICAgICAgICA9IGVuZE9mO1xuICAgIHByb3RvLmZvcm1hdCAgICAgICAgICAgID0gZm9ybWF0O1xuICAgIHByb3RvLmZyb20gICAgICAgICAgICAgID0gZnJvbTtcbiAgICBwcm90by5mcm9tTm93ICAgICAgICAgICA9IGZyb21Ob3c7XG4gICAgcHJvdG8udG8gICAgICAgICAgICAgICAgPSB0bztcbiAgICBwcm90by50b05vdyAgICAgICAgICAgICA9IHRvTm93O1xuICAgIHByb3RvLmdldCAgICAgICAgICAgICAgID0gc3RyaW5nR2V0O1xuICAgIHByb3RvLmludmFsaWRBdCAgICAgICAgID0gaW52YWxpZEF0O1xuICAgIHByb3RvLmlzQWZ0ZXIgICAgICAgICAgID0gaXNBZnRlcjtcbiAgICBwcm90by5pc0JlZm9yZSAgICAgICAgICA9IGlzQmVmb3JlO1xuICAgIHByb3RvLmlzQmV0d2VlbiAgICAgICAgID0gaXNCZXR3ZWVuO1xuICAgIHByb3RvLmlzU2FtZSAgICAgICAgICAgID0gaXNTYW1lO1xuICAgIHByb3RvLmlzU2FtZU9yQWZ0ZXIgICAgID0gaXNTYW1lT3JBZnRlcjtcbiAgICBwcm90by5pc1NhbWVPckJlZm9yZSAgICA9IGlzU2FtZU9yQmVmb3JlO1xuICAgIHByb3RvLmlzVmFsaWQgICAgICAgICAgID0gaXNWYWxpZCQyO1xuICAgIHByb3RvLmxhbmcgICAgICAgICAgICAgID0gbGFuZztcbiAgICBwcm90by5sb2NhbGUgICAgICAgICAgICA9IGxvY2FsZTtcbiAgICBwcm90by5sb2NhbGVEYXRhICAgICAgICA9IGxvY2FsZURhdGE7XG4gICAgcHJvdG8ubWF4ICAgICAgICAgICAgICAgPSBwcm90b3R5cGVNYXg7XG4gICAgcHJvdG8ubWluICAgICAgICAgICAgICAgPSBwcm90b3R5cGVNaW47XG4gICAgcHJvdG8ucGFyc2luZ0ZsYWdzICAgICAgPSBwYXJzaW5nRmxhZ3M7XG4gICAgcHJvdG8uc2V0ICAgICAgICAgICAgICAgPSBzdHJpbmdTZXQ7XG4gICAgcHJvdG8uc3RhcnRPZiAgICAgICAgICAgPSBzdGFydE9mO1xuICAgIHByb3RvLnN1YnRyYWN0ICAgICAgICAgID0gc3VidHJhY3Q7XG4gICAgcHJvdG8udG9BcnJheSAgICAgICAgICAgPSB0b0FycmF5O1xuICAgIHByb3RvLnRvT2JqZWN0ICAgICAgICAgID0gdG9PYmplY3Q7XG4gICAgcHJvdG8udG9EYXRlICAgICAgICAgICAgPSB0b0RhdGU7XG4gICAgcHJvdG8udG9JU09TdHJpbmcgICAgICAgPSB0b0lTT1N0cmluZztcbiAgICBwcm90by5pbnNwZWN0ICAgICAgICAgICA9IGluc3BlY3Q7XG4gICAgcHJvdG8udG9KU09OICAgICAgICAgICAgPSB0b0pTT047XG4gICAgcHJvdG8udG9TdHJpbmcgICAgICAgICAgPSB0b1N0cmluZztcbiAgICBwcm90by51bml4ICAgICAgICAgICAgICA9IHVuaXg7XG4gICAgcHJvdG8udmFsdWVPZiAgICAgICAgICAgPSB2YWx1ZU9mO1xuICAgIHByb3RvLmNyZWF0aW9uRGF0YSAgICAgID0gY3JlYXRpb25EYXRhO1xuICAgIHByb3RvLnllYXIgICAgICAgPSBnZXRTZXRZZWFyO1xuICAgIHByb3RvLmlzTGVhcFllYXIgPSBnZXRJc0xlYXBZZWFyO1xuICAgIHByb3RvLndlZWtZZWFyICAgID0gZ2V0U2V0V2Vla1llYXI7XG4gICAgcHJvdG8uaXNvV2Vla1llYXIgPSBnZXRTZXRJU09XZWVrWWVhcjtcbiAgICBwcm90by5xdWFydGVyID0gcHJvdG8ucXVhcnRlcnMgPSBnZXRTZXRRdWFydGVyO1xuICAgIHByb3RvLm1vbnRoICAgICAgID0gZ2V0U2V0TW9udGg7XG4gICAgcHJvdG8uZGF5c0luTW9udGggPSBnZXREYXlzSW5Nb250aDtcbiAgICBwcm90by53ZWVrICAgICAgICAgICA9IHByb3RvLndlZWtzICAgICAgICA9IGdldFNldFdlZWs7XG4gICAgcHJvdG8uaXNvV2VlayAgICAgICAgPSBwcm90by5pc29XZWVrcyAgICAgPSBnZXRTZXRJU09XZWVrO1xuICAgIHByb3RvLndlZWtzSW5ZZWFyICAgID0gZ2V0V2Vla3NJblllYXI7XG4gICAgcHJvdG8uaXNvV2Vla3NJblllYXIgPSBnZXRJU09XZWVrc0luWWVhcjtcbiAgICBwcm90by5kYXRlICAgICAgID0gZ2V0U2V0RGF5T2ZNb250aDtcbiAgICBwcm90by5kYXkgICAgICAgID0gcHJvdG8uZGF5cyAgICAgICAgICAgICA9IGdldFNldERheU9mV2VlaztcbiAgICBwcm90by53ZWVrZGF5ICAgID0gZ2V0U2V0TG9jYWxlRGF5T2ZXZWVrO1xuICAgIHByb3RvLmlzb1dlZWtkYXkgPSBnZXRTZXRJU09EYXlPZldlZWs7XG4gICAgcHJvdG8uZGF5T2ZZZWFyICA9IGdldFNldERheU9mWWVhcjtcbiAgICBwcm90by5ob3VyID0gcHJvdG8uaG91cnMgPSBnZXRTZXRIb3VyO1xuICAgIHByb3RvLm1pbnV0ZSA9IHByb3RvLm1pbnV0ZXMgPSBnZXRTZXRNaW51dGU7XG4gICAgcHJvdG8uc2Vjb25kID0gcHJvdG8uc2Vjb25kcyA9IGdldFNldFNlY29uZDtcbiAgICBwcm90by5taWxsaXNlY29uZCA9IHByb3RvLm1pbGxpc2Vjb25kcyA9IGdldFNldE1pbGxpc2Vjb25kO1xuICAgIHByb3RvLnV0Y09mZnNldCAgICAgICAgICAgID0gZ2V0U2V0T2Zmc2V0O1xuICAgIHByb3RvLnV0YyAgICAgICAgICAgICAgICAgID0gc2V0T2Zmc2V0VG9VVEM7XG4gICAgcHJvdG8ubG9jYWwgICAgICAgICAgICAgICAgPSBzZXRPZmZzZXRUb0xvY2FsO1xuICAgIHByb3RvLnBhcnNlWm9uZSAgICAgICAgICAgID0gc2V0T2Zmc2V0VG9QYXJzZWRPZmZzZXQ7XG4gICAgcHJvdG8uaGFzQWxpZ25lZEhvdXJPZmZzZXQgPSBoYXNBbGlnbmVkSG91ck9mZnNldDtcbiAgICBwcm90by5pc0RTVCAgICAgICAgICAgICAgICA9IGlzRGF5bGlnaHRTYXZpbmdUaW1lO1xuICAgIHByb3RvLmlzTG9jYWwgICAgICAgICAgICAgID0gaXNMb2NhbDtcbiAgICBwcm90by5pc1V0Y09mZnNldCAgICAgICAgICA9IGlzVXRjT2Zmc2V0O1xuICAgIHByb3RvLmlzVXRjICAgICAgICAgICAgICAgID0gaXNVdGM7XG4gICAgcHJvdG8uaXNVVEMgICAgICAgICAgICAgICAgPSBpc1V0YztcbiAgICBwcm90by56b25lQWJiciA9IGdldFpvbmVBYmJyO1xuICAgIHByb3RvLnpvbmVOYW1lID0gZ2V0Wm9uZU5hbWU7XG4gICAgcHJvdG8uZGF0ZXMgID0gZGVwcmVjYXRlKCdkYXRlcyBhY2Nlc3NvciBpcyBkZXByZWNhdGVkLiBVc2UgZGF0ZSBpbnN0ZWFkLicsIGdldFNldERheU9mTW9udGgpO1xuICAgIHByb3RvLm1vbnRocyA9IGRlcHJlY2F0ZSgnbW9udGhzIGFjY2Vzc29yIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb250aCBpbnN0ZWFkJywgZ2V0U2V0TW9udGgpO1xuICAgIHByb3RvLnllYXJzICA9IGRlcHJlY2F0ZSgneWVhcnMgYWNjZXNzb3IgaXMgZGVwcmVjYXRlZC4gVXNlIHllYXIgaW5zdGVhZCcsIGdldFNldFllYXIpO1xuICAgIHByb3RvLnpvbmUgICA9IGRlcHJlY2F0ZSgnbW9tZW50KCkuem9uZSBpcyBkZXByZWNhdGVkLCB1c2UgbW9tZW50KCkudXRjT2Zmc2V0IGluc3RlYWQuIGh0dHA6Ly9tb21lbnRqcy5jb20vZ3VpZGVzLyMvd2FybmluZ3Mvem9uZS8nLCBnZXRTZXRab25lKTtcbiAgICBwcm90by5pc0RTVFNoaWZ0ZWQgPSBkZXByZWNhdGUoJ2lzRFNUU2hpZnRlZCBpcyBkZXByZWNhdGVkLiBTZWUgaHR0cDovL21vbWVudGpzLmNvbS9ndWlkZXMvIy93YXJuaW5ncy9kc3Qtc2hpZnRlZC8gZm9yIG1vcmUgaW5mb3JtYXRpb24nLCBpc0RheWxpZ2h0U2F2aW5nVGltZVNoaWZ0ZWQpO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlVW5peCAoaW5wdXQpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsKGlucHV0ICogMTAwMCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlSW5ab25lICgpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZUxvY2FsLmFwcGx5KG51bGwsIGFyZ3VtZW50cykucGFyc2Vab25lKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHJlUGFyc2VQb3N0Rm9ybWF0IChzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZztcbiAgICB9XG5cbiAgICB2YXIgcHJvdG8kMSA9IExvY2FsZS5wcm90b3R5cGU7XG5cbiAgICBwcm90byQxLmNhbGVuZGFyICAgICAgICA9IGNhbGVuZGFyO1xuICAgIHByb3RvJDEubG9uZ0RhdGVGb3JtYXQgID0gbG9uZ0RhdGVGb3JtYXQ7XG4gICAgcHJvdG8kMS5pbnZhbGlkRGF0ZSAgICAgPSBpbnZhbGlkRGF0ZTtcbiAgICBwcm90byQxLm9yZGluYWwgICAgICAgICA9IG9yZGluYWw7XG4gICAgcHJvdG8kMS5wcmVwYXJzZSAgICAgICAgPSBwcmVQYXJzZVBvc3RGb3JtYXQ7XG4gICAgcHJvdG8kMS5wb3N0Zm9ybWF0ICAgICAgPSBwcmVQYXJzZVBvc3RGb3JtYXQ7XG4gICAgcHJvdG8kMS5yZWxhdGl2ZVRpbWUgICAgPSByZWxhdGl2ZVRpbWU7XG4gICAgcHJvdG8kMS5wYXN0RnV0dXJlICAgICAgPSBwYXN0RnV0dXJlO1xuICAgIHByb3RvJDEuc2V0ICAgICAgICAgICAgID0gc2V0O1xuXG4gICAgcHJvdG8kMS5tb250aHMgICAgICAgICAgICA9ICAgICAgICBsb2NhbGVNb250aHM7XG4gICAgcHJvdG8kMS5tb250aHNTaG9ydCAgICAgICA9ICAgICAgICBsb2NhbGVNb250aHNTaG9ydDtcbiAgICBwcm90byQxLm1vbnRoc1BhcnNlICAgICAgID0gICAgICAgIGxvY2FsZU1vbnRoc1BhcnNlO1xuICAgIHByb3RvJDEubW9udGhzUmVnZXggICAgICAgPSBtb250aHNSZWdleDtcbiAgICBwcm90byQxLm1vbnRoc1Nob3J0UmVnZXggID0gbW9udGhzU2hvcnRSZWdleDtcbiAgICBwcm90byQxLndlZWsgPSBsb2NhbGVXZWVrO1xuICAgIHByb3RvJDEuZmlyc3REYXlPZlllYXIgPSBsb2NhbGVGaXJzdERheU9mWWVhcjtcbiAgICBwcm90byQxLmZpcnN0RGF5T2ZXZWVrID0gbG9jYWxlRmlyc3REYXlPZldlZWs7XG5cbiAgICBwcm90byQxLndlZWtkYXlzICAgICAgID0gICAgICAgIGxvY2FsZVdlZWtkYXlzO1xuICAgIHByb3RvJDEud2Vla2RheXNNaW4gICAgPSAgICAgICAgbG9jYWxlV2Vla2RheXNNaW47XG4gICAgcHJvdG8kMS53ZWVrZGF5c1Nob3J0ICA9ICAgICAgICBsb2NhbGVXZWVrZGF5c1Nob3J0O1xuICAgIHByb3RvJDEud2Vla2RheXNQYXJzZSAgPSAgICAgICAgbG9jYWxlV2Vla2RheXNQYXJzZTtcblxuICAgIHByb3RvJDEud2Vla2RheXNSZWdleCAgICAgICA9ICAgICAgICB3ZWVrZGF5c1JlZ2V4O1xuICAgIHByb3RvJDEud2Vla2RheXNTaG9ydFJlZ2V4ICA9ICAgICAgICB3ZWVrZGF5c1Nob3J0UmVnZXg7XG4gICAgcHJvdG8kMS53ZWVrZGF5c01pblJlZ2V4ICAgID0gICAgICAgIHdlZWtkYXlzTWluUmVnZXg7XG5cbiAgICBwcm90byQxLmlzUE0gPSBsb2NhbGVJc1BNO1xuICAgIHByb3RvJDEubWVyaWRpZW0gPSBsb2NhbGVNZXJpZGllbTtcblxuICAgIGZ1bmN0aW9uIGdldCQxIChmb3JtYXQsIGluZGV4LCBmaWVsZCwgc2V0dGVyKSB7XG4gICAgICAgIHZhciBsb2NhbGUgPSBnZXRMb2NhbGUoKTtcbiAgICAgICAgdmFyIHV0YyA9IGNyZWF0ZVVUQygpLnNldChzZXR0ZXIsIGluZGV4KTtcbiAgICAgICAgcmV0dXJuIGxvY2FsZVtmaWVsZF0odXRjLCBmb3JtYXQpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RNb250aHNJbXBsIChmb3JtYXQsIGluZGV4LCBmaWVsZCkge1xuICAgICAgICBpZiAoaXNOdW1iZXIoZm9ybWF0KSkge1xuICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICBmb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cblxuICAgICAgICBmb3JtYXQgPSBmb3JtYXQgfHwgJyc7XG5cbiAgICAgICAgaWYgKGluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXQkMShmb3JtYXQsIGluZGV4LCBmaWVsZCwgJ21vbnRoJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIG91dCA9IFtdO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgMTI7IGkrKykge1xuICAgICAgICAgICAgb3V0W2ldID0gZ2V0JDEoZm9ybWF0LCBpLCBmaWVsZCwgJ21vbnRoJyk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG91dDtcbiAgICB9XG5cbiAgICAvLyAoKVxuICAgIC8vICg1KVxuICAgIC8vIChmbXQsIDUpXG4gICAgLy8gKGZtdClcbiAgICAvLyAodHJ1ZSlcbiAgICAvLyAodHJ1ZSwgNSlcbiAgICAvLyAodHJ1ZSwgZm10LCA1KVxuICAgIC8vICh0cnVlLCBmbXQpXG4gICAgZnVuY3Rpb24gbGlzdFdlZWtkYXlzSW1wbCAobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCBmaWVsZCkge1xuICAgICAgICBpZiAodHlwZW9mIGxvY2FsZVNvcnRlZCA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgICAgICBpZiAoaXNOdW1iZXIoZm9ybWF0KSkge1xuICAgICAgICAgICAgICAgIGluZGV4ID0gZm9ybWF0O1xuICAgICAgICAgICAgICAgIGZvcm1hdCA9IHVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgZm9ybWF0ID0gZm9ybWF0IHx8ICcnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZm9ybWF0ID0gbG9jYWxlU29ydGVkO1xuICAgICAgICAgICAgaW5kZXggPSBmb3JtYXQ7XG4gICAgICAgICAgICBsb2NhbGVTb3J0ZWQgPSBmYWxzZTtcblxuICAgICAgICAgICAgaWYgKGlzTnVtYmVyKGZvcm1hdCkpIHtcbiAgICAgICAgICAgICAgICBpbmRleCA9IGZvcm1hdDtcbiAgICAgICAgICAgICAgICBmb3JtYXQgPSB1bmRlZmluZWQ7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGZvcm1hdCA9IGZvcm1hdCB8fCAnJztcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBsb2NhbGUgPSBnZXRMb2NhbGUoKSxcbiAgICAgICAgICAgIHNoaWZ0ID0gbG9jYWxlU29ydGVkID8gbG9jYWxlLl93ZWVrLmRvdyA6IDA7XG5cbiAgICAgICAgaWYgKGluZGV4ICE9IG51bGwpIHtcbiAgICAgICAgICAgIHJldHVybiBnZXQkMShmb3JtYXQsIChpbmRleCArIHNoaWZ0KSAlIDcsIGZpZWxkLCAnZGF5Jyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIG91dCA9IFtdO1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgNzsgaSsrKSB7XG4gICAgICAgICAgICBvdXRbaV0gPSBnZXQkMShmb3JtYXQsIChpICsgc2hpZnQpICUgNywgZmllbGQsICdkYXknKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gb3V0O1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RNb250aHMgKGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RNb250aHNJbXBsKGZvcm1hdCwgaW5kZXgsICdtb250aHMnKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBsaXN0TW9udGhzU2hvcnQgKGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RNb250aHNJbXBsKGZvcm1hdCwgaW5kZXgsICdtb250aHNTaG9ydCcpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGxpc3RXZWVrZGF5cyAobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4KSB7XG4gICAgICAgIHJldHVybiBsaXN0V2Vla2RheXNJbXBsKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCwgJ3dlZWtkYXlzJyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdFdlZWtkYXlzU2hvcnQgKGxvY2FsZVNvcnRlZCwgZm9ybWF0LCBpbmRleCkge1xuICAgICAgICByZXR1cm4gbGlzdFdlZWtkYXlzSW1wbChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgsICd3ZWVrZGF5c1Nob3J0Jyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbGlzdFdlZWtkYXlzTWluIChsb2NhbGVTb3J0ZWQsIGZvcm1hdCwgaW5kZXgpIHtcbiAgICAgICAgcmV0dXJuIGxpc3RXZWVrZGF5c0ltcGwobG9jYWxlU29ydGVkLCBmb3JtYXQsIGluZGV4LCAnd2Vla2RheXNNaW4nKTtcbiAgICB9XG5cbiAgICBnZXRTZXRHbG9iYWxMb2NhbGUoJ2VuJywge1xuICAgICAgICBkYXlPZk1vbnRoT3JkaW5hbFBhcnNlOiAvXFxkezEsMn0odGh8c3R8bmR8cmQpLyxcbiAgICAgICAgb3JkaW5hbCA6IGZ1bmN0aW9uIChudW1iZXIpIHtcbiAgICAgICAgICAgIHZhciBiID0gbnVtYmVyICUgMTAsXG4gICAgICAgICAgICAgICAgb3V0cHV0ID0gKHRvSW50KG51bWJlciAlIDEwMCAvIDEwKSA9PT0gMSkgPyAndGgnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMSkgPyAnc3QnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMikgPyAnbmQnIDpcbiAgICAgICAgICAgICAgICAoYiA9PT0gMykgPyAncmQnIDogJ3RoJztcbiAgICAgICAgICAgIHJldHVybiBudW1iZXIgKyBvdXRwdXQ7XG4gICAgICAgIH1cbiAgICB9KTtcblxuICAgIC8vIFNpZGUgZWZmZWN0IGltcG9ydHNcblxuICAgIGhvb2tzLmxhbmcgPSBkZXByZWNhdGUoJ21vbWVudC5sYW5nIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb21lbnQubG9jYWxlIGluc3RlYWQuJywgZ2V0U2V0R2xvYmFsTG9jYWxlKTtcbiAgICBob29rcy5sYW5nRGF0YSA9IGRlcHJlY2F0ZSgnbW9tZW50LmxhbmdEYXRhIGlzIGRlcHJlY2F0ZWQuIFVzZSBtb21lbnQubG9jYWxlRGF0YSBpbnN0ZWFkLicsIGdldExvY2FsZSk7XG5cbiAgICB2YXIgbWF0aEFicyA9IE1hdGguYWJzO1xuXG4gICAgZnVuY3Rpb24gYWJzICgpIHtcbiAgICAgICAgdmFyIGRhdGEgICAgICAgICAgID0gdGhpcy5fZGF0YTtcblxuICAgICAgICB0aGlzLl9taWxsaXNlY29uZHMgPSBtYXRoQWJzKHRoaXMuX21pbGxpc2Vjb25kcyk7XG4gICAgICAgIHRoaXMuX2RheXMgICAgICAgICA9IG1hdGhBYnModGhpcy5fZGF5cyk7XG4gICAgICAgIHRoaXMuX21vbnRocyAgICAgICA9IG1hdGhBYnModGhpcy5fbW9udGhzKTtcblxuICAgICAgICBkYXRhLm1pbGxpc2Vjb25kcyAgPSBtYXRoQWJzKGRhdGEubWlsbGlzZWNvbmRzKTtcbiAgICAgICAgZGF0YS5zZWNvbmRzICAgICAgID0gbWF0aEFicyhkYXRhLnNlY29uZHMpO1xuICAgICAgICBkYXRhLm1pbnV0ZXMgICAgICAgPSBtYXRoQWJzKGRhdGEubWludXRlcyk7XG4gICAgICAgIGRhdGEuaG91cnMgICAgICAgICA9IG1hdGhBYnMoZGF0YS5ob3Vycyk7XG4gICAgICAgIGRhdGEubW9udGhzICAgICAgICA9IG1hdGhBYnMoZGF0YS5tb250aHMpO1xuICAgICAgICBkYXRhLnllYXJzICAgICAgICAgPSBtYXRoQWJzKGRhdGEueWVhcnMpO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFN1YnRyYWN0JDEgKGR1cmF0aW9uLCBpbnB1dCwgdmFsdWUsIGRpcmVjdGlvbikge1xuICAgICAgICB2YXIgb3RoZXIgPSBjcmVhdGVEdXJhdGlvbihpbnB1dCwgdmFsdWUpO1xuXG4gICAgICAgIGR1cmF0aW9uLl9taWxsaXNlY29uZHMgKz0gZGlyZWN0aW9uICogb3RoZXIuX21pbGxpc2Vjb25kcztcbiAgICAgICAgZHVyYXRpb24uX2RheXMgICAgICAgICArPSBkaXJlY3Rpb24gKiBvdGhlci5fZGF5cztcbiAgICAgICAgZHVyYXRpb24uX21vbnRocyAgICAgICArPSBkaXJlY3Rpb24gKiBvdGhlci5fbW9udGhzO1xuXG4gICAgICAgIHJldHVybiBkdXJhdGlvbi5fYnViYmxlKCk7XG4gICAgfVxuXG4gICAgLy8gc3VwcG9ydHMgb25seSAyLjAtc3R5bGUgYWRkKDEsICdzJykgb3IgYWRkKGR1cmF0aW9uKVxuICAgIGZ1bmN0aW9uIGFkZCQxIChpbnB1dCwgdmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGFkZFN1YnRyYWN0JDEodGhpcywgaW5wdXQsIHZhbHVlLCAxKTtcbiAgICB9XG5cbiAgICAvLyBzdXBwb3J0cyBvbmx5IDIuMC1zdHlsZSBzdWJ0cmFjdCgxLCAncycpIG9yIHN1YnRyYWN0KGR1cmF0aW9uKVxuICAgIGZ1bmN0aW9uIHN1YnRyYWN0JDEgKGlucHV0LCB2YWx1ZSkge1xuICAgICAgICByZXR1cm4gYWRkU3VidHJhY3QkMSh0aGlzLCBpbnB1dCwgdmFsdWUsIC0xKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBhYnNDZWlsIChudW1iZXIpIHtcbiAgICAgICAgaWYgKG51bWJlciA8IDApIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLmZsb29yKG51bWJlcik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gTWF0aC5jZWlsKG51bWJlcik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBidWJibGUgKCkge1xuICAgICAgICB2YXIgbWlsbGlzZWNvbmRzID0gdGhpcy5fbWlsbGlzZWNvbmRzO1xuICAgICAgICB2YXIgZGF5cyAgICAgICAgID0gdGhpcy5fZGF5cztcbiAgICAgICAgdmFyIG1vbnRocyAgICAgICA9IHRoaXMuX21vbnRocztcbiAgICAgICAgdmFyIGRhdGEgICAgICAgICA9IHRoaXMuX2RhdGE7XG4gICAgICAgIHZhciBzZWNvbmRzLCBtaW51dGVzLCBob3VycywgeWVhcnMsIG1vbnRoc0Zyb21EYXlzO1xuXG4gICAgICAgIC8vIGlmIHdlIGhhdmUgYSBtaXggb2YgcG9zaXRpdmUgYW5kIG5lZ2F0aXZlIHZhbHVlcywgYnViYmxlIGRvd24gZmlyc3RcbiAgICAgICAgLy8gY2hlY2s6IGh0dHBzOi8vZ2l0aHViLmNvbS9tb21lbnQvbW9tZW50L2lzc3Vlcy8yMTY2XG4gICAgICAgIGlmICghKChtaWxsaXNlY29uZHMgPj0gMCAmJiBkYXlzID49IDAgJiYgbW9udGhzID49IDApIHx8XG4gICAgICAgICAgICAgICAgKG1pbGxpc2Vjb25kcyA8PSAwICYmIGRheXMgPD0gMCAmJiBtb250aHMgPD0gMCkpKSB7XG4gICAgICAgICAgICBtaWxsaXNlY29uZHMgKz0gYWJzQ2VpbChtb250aHNUb0RheXMobW9udGhzKSArIGRheXMpICogODY0ZTU7XG4gICAgICAgICAgICBkYXlzID0gMDtcbiAgICAgICAgICAgIG1vbnRocyA9IDA7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBUaGUgZm9sbG93aW5nIGNvZGUgYnViYmxlcyB1cCB2YWx1ZXMsIHNlZSB0aGUgdGVzdHMgZm9yXG4gICAgICAgIC8vIGV4YW1wbGVzIG9mIHdoYXQgdGhhdCBtZWFucy5cbiAgICAgICAgZGF0YS5taWxsaXNlY29uZHMgPSBtaWxsaXNlY29uZHMgJSAxMDAwO1xuXG4gICAgICAgIHNlY29uZHMgICAgICAgICAgID0gYWJzRmxvb3IobWlsbGlzZWNvbmRzIC8gMTAwMCk7XG4gICAgICAgIGRhdGEuc2Vjb25kcyAgICAgID0gc2Vjb25kcyAlIDYwO1xuXG4gICAgICAgIG1pbnV0ZXMgICAgICAgICAgID0gYWJzRmxvb3Ioc2Vjb25kcyAvIDYwKTtcbiAgICAgICAgZGF0YS5taW51dGVzICAgICAgPSBtaW51dGVzICUgNjA7XG5cbiAgICAgICAgaG91cnMgICAgICAgICAgICAgPSBhYnNGbG9vcihtaW51dGVzIC8gNjApO1xuICAgICAgICBkYXRhLmhvdXJzICAgICAgICA9IGhvdXJzICUgMjQ7XG5cbiAgICAgICAgZGF5cyArPSBhYnNGbG9vcihob3VycyAvIDI0KTtcblxuICAgICAgICAvLyBjb252ZXJ0IGRheXMgdG8gbW9udGhzXG4gICAgICAgIG1vbnRoc0Zyb21EYXlzID0gYWJzRmxvb3IoZGF5c1RvTW9udGhzKGRheXMpKTtcbiAgICAgICAgbW9udGhzICs9IG1vbnRoc0Zyb21EYXlzO1xuICAgICAgICBkYXlzIC09IGFic0NlaWwobW9udGhzVG9EYXlzKG1vbnRoc0Zyb21EYXlzKSk7XG5cbiAgICAgICAgLy8gMTIgbW9udGhzIC0+IDEgeWVhclxuICAgICAgICB5ZWFycyA9IGFic0Zsb29yKG1vbnRocyAvIDEyKTtcbiAgICAgICAgbW9udGhzICU9IDEyO1xuXG4gICAgICAgIGRhdGEuZGF5cyAgID0gZGF5cztcbiAgICAgICAgZGF0YS5tb250aHMgPSBtb250aHM7XG4gICAgICAgIGRhdGEueWVhcnMgID0geWVhcnM7XG5cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZGF5c1RvTW9udGhzIChkYXlzKSB7XG4gICAgICAgIC8vIDQwMCB5ZWFycyBoYXZlIDE0NjA5NyBkYXlzICh0YWtpbmcgaW50byBhY2NvdW50IGxlYXAgeWVhciBydWxlcylcbiAgICAgICAgLy8gNDAwIHllYXJzIGhhdmUgMTIgbW9udGhzID09PSA0ODAwXG4gICAgICAgIHJldHVybiBkYXlzICogNDgwMCAvIDE0NjA5NztcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtb250aHNUb0RheXMgKG1vbnRocykge1xuICAgICAgICAvLyB0aGUgcmV2ZXJzZSBvZiBkYXlzVG9Nb250aHNcbiAgICAgICAgcmV0dXJuIG1vbnRocyAqIDE0NjA5NyAvIDQ4MDA7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYXMgKHVuaXRzKSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiBOYU47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGRheXM7XG4gICAgICAgIHZhciBtb250aHM7XG4gICAgICAgIHZhciBtaWxsaXNlY29uZHMgPSB0aGlzLl9taWxsaXNlY29uZHM7XG5cbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG5cbiAgICAgICAgaWYgKHVuaXRzID09PSAnbW9udGgnIHx8IHVuaXRzID09PSAncXVhcnRlcicgfHwgdW5pdHMgPT09ICd5ZWFyJykge1xuICAgICAgICAgICAgZGF5cyA9IHRoaXMuX2RheXMgKyBtaWxsaXNlY29uZHMgLyA4NjRlNTtcbiAgICAgICAgICAgIG1vbnRocyA9IHRoaXMuX21vbnRocyArIGRheXNUb01vbnRocyhkYXlzKTtcbiAgICAgICAgICAgIHN3aXRjaCAodW5pdHMpIHtcbiAgICAgICAgICAgICAgICBjYXNlICdtb250aCc6ICAgcmV0dXJuIG1vbnRocztcbiAgICAgICAgICAgICAgICBjYXNlICdxdWFydGVyJzogcmV0dXJuIG1vbnRocyAvIDM7XG4gICAgICAgICAgICAgICAgY2FzZSAneWVhcic6ICAgIHJldHVybiBtb250aHMgLyAxMjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIC8vIGhhbmRsZSBtaWxsaXNlY29uZHMgc2VwYXJhdGVseSBiZWNhdXNlIG9mIGZsb2F0aW5nIHBvaW50IG1hdGggZXJyb3JzIChpc3N1ZSAjMTg2NylcbiAgICAgICAgICAgIGRheXMgPSB0aGlzLl9kYXlzICsgTWF0aC5yb3VuZChtb250aHNUb0RheXModGhpcy5fbW9udGhzKSk7XG4gICAgICAgICAgICBzd2l0Y2ggKHVuaXRzKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAnd2VlaycgICA6IHJldHVybiBkYXlzIC8gNyAgICAgKyBtaWxsaXNlY29uZHMgLyA2MDQ4ZTU7XG4gICAgICAgICAgICAgICAgY2FzZSAnZGF5JyAgICA6IHJldHVybiBkYXlzICAgICAgICAgKyBtaWxsaXNlY29uZHMgLyA4NjRlNTtcbiAgICAgICAgICAgICAgICBjYXNlICdob3VyJyAgIDogcmV0dXJuIGRheXMgKiAyNCAgICArIG1pbGxpc2Vjb25kcyAvIDM2ZTU7XG4gICAgICAgICAgICAgICAgY2FzZSAnbWludXRlJyA6IHJldHVybiBkYXlzICogMTQ0MCAgKyBtaWxsaXNlY29uZHMgLyA2ZTQ7XG4gICAgICAgICAgICAgICAgY2FzZSAnc2Vjb25kJyA6IHJldHVybiBkYXlzICogODY0MDAgKyBtaWxsaXNlY29uZHMgLyAxMDAwO1xuICAgICAgICAgICAgICAgIC8vIE1hdGguZmxvb3IgcHJldmVudHMgZmxvYXRpbmcgcG9pbnQgbWF0aCBlcnJvcnMgaGVyZVxuICAgICAgICAgICAgICAgIGNhc2UgJ21pbGxpc2Vjb25kJzogcmV0dXJuIE1hdGguZmxvb3IoZGF5cyAqIDg2NGU1KSArIG1pbGxpc2Vjb25kcztcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gdW5pdCAnICsgdW5pdHMpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLy8gVE9ETzogVXNlIHRoaXMuYXMoJ21zJyk/XG4gICAgZnVuY3Rpb24gdmFsdWVPZiQxICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzVmFsaWQoKSkge1xuICAgICAgICAgICAgcmV0dXJuIE5hTjtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgdGhpcy5fbWlsbGlzZWNvbmRzICtcbiAgICAgICAgICAgIHRoaXMuX2RheXMgKiA4NjRlNSArXG4gICAgICAgICAgICAodGhpcy5fbW9udGhzICUgMTIpICogMjU5MmU2ICtcbiAgICAgICAgICAgIHRvSW50KHRoaXMuX21vbnRocyAvIDEyKSAqIDMxNTM2ZTZcbiAgICAgICAgKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBtYWtlQXMgKGFsaWFzKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5hcyhhbGlhcyk7XG4gICAgICAgIH07XG4gICAgfVxuXG4gICAgdmFyIGFzTWlsbGlzZWNvbmRzID0gbWFrZUFzKCdtcycpO1xuICAgIHZhciBhc1NlY29uZHMgICAgICA9IG1ha2VBcygncycpO1xuICAgIHZhciBhc01pbnV0ZXMgICAgICA9IG1ha2VBcygnbScpO1xuICAgIHZhciBhc0hvdXJzICAgICAgICA9IG1ha2VBcygnaCcpO1xuICAgIHZhciBhc0RheXMgICAgICAgICA9IG1ha2VBcygnZCcpO1xuICAgIHZhciBhc1dlZWtzICAgICAgICA9IG1ha2VBcygndycpO1xuICAgIHZhciBhc01vbnRocyAgICAgICA9IG1ha2VBcygnTScpO1xuICAgIHZhciBhc1F1YXJ0ZXJzICAgICA9IG1ha2VBcygnUScpO1xuICAgIHZhciBhc1llYXJzICAgICAgICA9IG1ha2VBcygneScpO1xuXG4gICAgZnVuY3Rpb24gY2xvbmUkMSAoKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVEdXJhdGlvbih0aGlzKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBnZXQkMiAodW5pdHMpIHtcbiAgICAgICAgdW5pdHMgPSBub3JtYWxpemVVbml0cyh1bml0cyk7XG4gICAgICAgIHJldHVybiB0aGlzLmlzVmFsaWQoKSA/IHRoaXNbdW5pdHMgKyAncyddKCkgOiBOYU47XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gbWFrZUdldHRlcihuYW1lKSB7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLl9kYXRhW25hbWVdIDogTmFOO1xuICAgICAgICB9O1xuICAgIH1cblxuICAgIHZhciBtaWxsaXNlY29uZHMgPSBtYWtlR2V0dGVyKCdtaWxsaXNlY29uZHMnKTtcbiAgICB2YXIgc2Vjb25kcyAgICAgID0gbWFrZUdldHRlcignc2Vjb25kcycpO1xuICAgIHZhciBtaW51dGVzICAgICAgPSBtYWtlR2V0dGVyKCdtaW51dGVzJyk7XG4gICAgdmFyIGhvdXJzICAgICAgICA9IG1ha2VHZXR0ZXIoJ2hvdXJzJyk7XG4gICAgdmFyIGRheXMgICAgICAgICA9IG1ha2VHZXR0ZXIoJ2RheXMnKTtcbiAgICB2YXIgbW9udGhzICAgICAgID0gbWFrZUdldHRlcignbW9udGhzJyk7XG4gICAgdmFyIHllYXJzICAgICAgICA9IG1ha2VHZXR0ZXIoJ3llYXJzJyk7XG5cbiAgICBmdW5jdGlvbiB3ZWVrcyAoKSB7XG4gICAgICAgIHJldHVybiBhYnNGbG9vcih0aGlzLmRheXMoKSAvIDcpO1xuICAgIH1cblxuICAgIHZhciByb3VuZCA9IE1hdGgucm91bmQ7XG4gICAgdmFyIHRocmVzaG9sZHMgPSB7XG4gICAgICAgIHNzOiA0NCwgICAgICAgICAvLyBhIGZldyBzZWNvbmRzIHRvIHNlY29uZHNcbiAgICAgICAgcyA6IDQ1LCAgICAgICAgIC8vIHNlY29uZHMgdG8gbWludXRlXG4gICAgICAgIG0gOiA0NSwgICAgICAgICAvLyBtaW51dGVzIHRvIGhvdXJcbiAgICAgICAgaCA6IDIyLCAgICAgICAgIC8vIGhvdXJzIHRvIGRheVxuICAgICAgICBkIDogMjYsICAgICAgICAgLy8gZGF5cyB0byBtb250aFxuICAgICAgICBNIDogMTEgICAgICAgICAgLy8gbW9udGhzIHRvIHllYXJcbiAgICB9O1xuXG4gICAgLy8gaGVscGVyIGZ1bmN0aW9uIGZvciBtb21lbnQuZm4uZnJvbSwgbW9tZW50LmZuLmZyb21Ob3csIGFuZCBtb21lbnQuZHVyYXRpb24uZm4uaHVtYW5pemVcbiAgICBmdW5jdGlvbiBzdWJzdGl0dXRlVGltZUFnbyhzdHJpbmcsIG51bWJlciwgd2l0aG91dFN1ZmZpeCwgaXNGdXR1cmUsIGxvY2FsZSkge1xuICAgICAgICByZXR1cm4gbG9jYWxlLnJlbGF0aXZlVGltZShudW1iZXIgfHwgMSwgISF3aXRob3V0U3VmZml4LCBzdHJpbmcsIGlzRnV0dXJlKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZWxhdGl2ZVRpbWUkMSAocG9zTmVnRHVyYXRpb24sIHdpdGhvdXRTdWZmaXgsIGxvY2FsZSkge1xuICAgICAgICB2YXIgZHVyYXRpb24gPSBjcmVhdGVEdXJhdGlvbihwb3NOZWdEdXJhdGlvbikuYWJzKCk7XG4gICAgICAgIHZhciBzZWNvbmRzICA9IHJvdW5kKGR1cmF0aW9uLmFzKCdzJykpO1xuICAgICAgICB2YXIgbWludXRlcyAgPSByb3VuZChkdXJhdGlvbi5hcygnbScpKTtcbiAgICAgICAgdmFyIGhvdXJzICAgID0gcm91bmQoZHVyYXRpb24uYXMoJ2gnKSk7XG4gICAgICAgIHZhciBkYXlzICAgICA9IHJvdW5kKGR1cmF0aW9uLmFzKCdkJykpO1xuICAgICAgICB2YXIgbW9udGhzICAgPSByb3VuZChkdXJhdGlvbi5hcygnTScpKTtcbiAgICAgICAgdmFyIHllYXJzICAgID0gcm91bmQoZHVyYXRpb24uYXMoJ3knKSk7XG5cbiAgICAgICAgdmFyIGEgPSBzZWNvbmRzIDw9IHRocmVzaG9sZHMuc3MgJiYgWydzJywgc2Vjb25kc10gIHx8XG4gICAgICAgICAgICAgICAgc2Vjb25kcyA8IHRocmVzaG9sZHMucyAgICYmIFsnc3MnLCBzZWNvbmRzXSB8fFxuICAgICAgICAgICAgICAgIG1pbnV0ZXMgPD0gMSAgICAgICAgICAgICAmJiBbJ20nXSAgICAgICAgICAgfHxcbiAgICAgICAgICAgICAgICBtaW51dGVzIDwgdGhyZXNob2xkcy5tICAgJiYgWydtbScsIG1pbnV0ZXNdIHx8XG4gICAgICAgICAgICAgICAgaG91cnMgICA8PSAxICAgICAgICAgICAgICYmIFsnaCddICAgICAgICAgICB8fFxuICAgICAgICAgICAgICAgIGhvdXJzICAgPCB0aHJlc2hvbGRzLmggICAmJiBbJ2hoJywgaG91cnNdICAgfHxcbiAgICAgICAgICAgICAgICBkYXlzICAgIDw9IDEgICAgICAgICAgICAgJiYgWydkJ10gICAgICAgICAgIHx8XG4gICAgICAgICAgICAgICAgZGF5cyAgICA8IHRocmVzaG9sZHMuZCAgICYmIFsnZGQnLCBkYXlzXSAgICB8fFxuICAgICAgICAgICAgICAgIG1vbnRocyAgPD0gMSAgICAgICAgICAgICAmJiBbJ00nXSAgICAgICAgICAgfHxcbiAgICAgICAgICAgICAgICBtb250aHMgIDwgdGhyZXNob2xkcy5NICAgJiYgWydNTScsIG1vbnRoc10gIHx8XG4gICAgICAgICAgICAgICAgeWVhcnMgICA8PSAxICAgICAgICAgICAgICYmIFsneSddICAgICAgICAgICB8fCBbJ3l5JywgeWVhcnNdO1xuXG4gICAgICAgIGFbMl0gPSB3aXRob3V0U3VmZml4O1xuICAgICAgICBhWzNdID0gK3Bvc05lZ0R1cmF0aW9uID4gMDtcbiAgICAgICAgYVs0XSA9IGxvY2FsZTtcbiAgICAgICAgcmV0dXJuIHN1YnN0aXR1dGVUaW1lQWdvLmFwcGx5KG51bGwsIGEpO1xuICAgIH1cblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gYWxsb3dzIHlvdSB0byBzZXQgdGhlIHJvdW5kaW5nIGZ1bmN0aW9uIGZvciByZWxhdGl2ZSB0aW1lIHN0cmluZ3NcbiAgICBmdW5jdGlvbiBnZXRTZXRSZWxhdGl2ZVRpbWVSb3VuZGluZyAocm91bmRpbmdGdW5jdGlvbikge1xuICAgICAgICBpZiAocm91bmRpbmdGdW5jdGlvbiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICByZXR1cm4gcm91bmQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHR5cGVvZihyb3VuZGluZ0Z1bmN0aW9uKSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgcm91bmQgPSByb3VuZGluZ0Z1bmN0aW9uO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIFRoaXMgZnVuY3Rpb24gYWxsb3dzIHlvdSB0byBzZXQgYSB0aHJlc2hvbGQgZm9yIHJlbGF0aXZlIHRpbWUgc3RyaW5nc1xuICAgIGZ1bmN0aW9uIGdldFNldFJlbGF0aXZlVGltZVRocmVzaG9sZCAodGhyZXNob2xkLCBsaW1pdCkge1xuICAgICAgICBpZiAodGhyZXNob2xkc1t0aHJlc2hvbGRdID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAobGltaXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIHRocmVzaG9sZHNbdGhyZXNob2xkXTtcbiAgICAgICAgfVxuICAgICAgICB0aHJlc2hvbGRzW3RocmVzaG9sZF0gPSBsaW1pdDtcbiAgICAgICAgaWYgKHRocmVzaG9sZCA9PT0gJ3MnKSB7XG4gICAgICAgICAgICB0aHJlc2hvbGRzLnNzID0gbGltaXQgLSAxO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGh1bWFuaXplICh3aXRoU3VmZml4KSB7XG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGxvY2FsZSA9IHRoaXMubG9jYWxlRGF0YSgpO1xuICAgICAgICB2YXIgb3V0cHV0ID0gcmVsYXRpdmVUaW1lJDEodGhpcywgIXdpdGhTdWZmaXgsIGxvY2FsZSk7XG5cbiAgICAgICAgaWYgKHdpdGhTdWZmaXgpIHtcbiAgICAgICAgICAgIG91dHB1dCA9IGxvY2FsZS5wYXN0RnV0dXJlKCt0aGlzLCBvdXRwdXQpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGxvY2FsZS5wb3N0Zm9ybWF0KG91dHB1dCk7XG4gICAgfVxuXG4gICAgdmFyIGFicyQxID0gTWF0aC5hYnM7XG5cbiAgICBmdW5jdGlvbiBzaWduKHgpIHtcbiAgICAgICAgcmV0dXJuICgoeCA+IDApIC0gKHggPCAwKSkgfHwgK3g7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdG9JU09TdHJpbmckMSgpIHtcbiAgICAgICAgLy8gZm9yIElTTyBzdHJpbmdzIHdlIGRvIG5vdCB1c2UgdGhlIG5vcm1hbCBidWJibGluZyBydWxlczpcbiAgICAgICAgLy8gICogbWlsbGlzZWNvbmRzIGJ1YmJsZSB1cCB1bnRpbCB0aGV5IGJlY29tZSBob3Vyc1xuICAgICAgICAvLyAgKiBkYXlzIGRvIG5vdCBidWJibGUgYXQgYWxsXG4gICAgICAgIC8vICAqIG1vbnRocyBidWJibGUgdXAgdW50aWwgdGhleSBiZWNvbWUgeWVhcnNcbiAgICAgICAgLy8gVGhpcyBpcyBiZWNhdXNlIHRoZXJlIGlzIG5vIGNvbnRleHQtZnJlZSBjb252ZXJzaW9uIGJldHdlZW4gaG91cnMgYW5kIGRheXNcbiAgICAgICAgLy8gKHRoaW5rIG9mIGNsb2NrIGNoYW5nZXMpXG4gICAgICAgIC8vIGFuZCBhbHNvIG5vdCBiZXR3ZWVuIGRheXMgYW5kIG1vbnRocyAoMjgtMzEgZGF5cyBwZXIgbW9udGgpXG4gICAgICAgIGlmICghdGhpcy5pc1ZhbGlkKCkpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2FsZURhdGEoKS5pbnZhbGlkRGF0ZSgpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIHNlY29uZHMgPSBhYnMkMSh0aGlzLl9taWxsaXNlY29uZHMpIC8gMTAwMDtcbiAgICAgICAgdmFyIGRheXMgICAgICAgICA9IGFicyQxKHRoaXMuX2RheXMpO1xuICAgICAgICB2YXIgbW9udGhzICAgICAgID0gYWJzJDEodGhpcy5fbW9udGhzKTtcbiAgICAgICAgdmFyIG1pbnV0ZXMsIGhvdXJzLCB5ZWFycztcblxuICAgICAgICAvLyAzNjAwIHNlY29uZHMgLT4gNjAgbWludXRlcyAtPiAxIGhvdXJcbiAgICAgICAgbWludXRlcyAgICAgICAgICAgPSBhYnNGbG9vcihzZWNvbmRzIC8gNjApO1xuICAgICAgICBob3VycyAgICAgICAgICAgICA9IGFic0Zsb29yKG1pbnV0ZXMgLyA2MCk7XG4gICAgICAgIHNlY29uZHMgJT0gNjA7XG4gICAgICAgIG1pbnV0ZXMgJT0gNjA7XG5cbiAgICAgICAgLy8gMTIgbW9udGhzIC0+IDEgeWVhclxuICAgICAgICB5ZWFycyAgPSBhYnNGbG9vcihtb250aHMgLyAxMik7XG4gICAgICAgIG1vbnRocyAlPSAxMjtcblxuXG4gICAgICAgIC8vIGluc3BpcmVkIGJ5IGh0dHBzOi8vZ2l0aHViLmNvbS9kb3JkaWxsZS9tb21lbnQtaXNvZHVyYXRpb24vYmxvYi9tYXN0ZXIvbW9tZW50Lmlzb2R1cmF0aW9uLmpzXG4gICAgICAgIHZhciBZID0geWVhcnM7XG4gICAgICAgIHZhciBNID0gbW9udGhzO1xuICAgICAgICB2YXIgRCA9IGRheXM7XG4gICAgICAgIHZhciBoID0gaG91cnM7XG4gICAgICAgIHZhciBtID0gbWludXRlcztcbiAgICAgICAgdmFyIHMgPSBzZWNvbmRzID8gc2Vjb25kcy50b0ZpeGVkKDMpLnJlcGxhY2UoL1xcLj8wKyQvLCAnJykgOiAnJztcbiAgICAgICAgdmFyIHRvdGFsID0gdGhpcy5hc1NlY29uZHMoKTtcblxuICAgICAgICBpZiAoIXRvdGFsKSB7XG4gICAgICAgICAgICAvLyB0aGlzIGlzIHRoZSBzYW1lIGFzIEMjJ3MgKE5vZGEpIGFuZCBweXRob24gKGlzb2RhdGUpLi4uXG4gICAgICAgICAgICAvLyBidXQgbm90IG90aGVyIEpTIChnb29nLmRhdGUpXG4gICAgICAgICAgICByZXR1cm4gJ1AwRCc7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdG90YWxTaWduID0gdG90YWwgPCAwID8gJy0nIDogJyc7XG4gICAgICAgIHZhciB5bVNpZ24gPSBzaWduKHRoaXMuX21vbnRocykgIT09IHNpZ24odG90YWwpID8gJy0nIDogJyc7XG4gICAgICAgIHZhciBkYXlzU2lnbiA9IHNpZ24odGhpcy5fZGF5cykgIT09IHNpZ24odG90YWwpID8gJy0nIDogJyc7XG4gICAgICAgIHZhciBobXNTaWduID0gc2lnbih0aGlzLl9taWxsaXNlY29uZHMpICE9PSBzaWduKHRvdGFsKSA/ICctJyA6ICcnO1xuXG4gICAgICAgIHJldHVybiB0b3RhbFNpZ24gKyAnUCcgK1xuICAgICAgICAgICAgKFkgPyB5bVNpZ24gKyBZICsgJ1knIDogJycpICtcbiAgICAgICAgICAgIChNID8geW1TaWduICsgTSArICdNJyA6ICcnKSArXG4gICAgICAgICAgICAoRCA/IGRheXNTaWduICsgRCArICdEJyA6ICcnKSArXG4gICAgICAgICAgICAoKGggfHwgbSB8fCBzKSA/ICdUJyA6ICcnKSArXG4gICAgICAgICAgICAoaCA/IGhtc1NpZ24gKyBoICsgJ0gnIDogJycpICtcbiAgICAgICAgICAgIChtID8gaG1zU2lnbiArIG0gKyAnTScgOiAnJykgK1xuICAgICAgICAgICAgKHMgPyBobXNTaWduICsgcyArICdTJyA6ICcnKTtcbiAgICB9XG5cbiAgICB2YXIgcHJvdG8kMiA9IER1cmF0aW9uLnByb3RvdHlwZTtcblxuICAgIHByb3RvJDIuaXNWYWxpZCAgICAgICAgPSBpc1ZhbGlkJDE7XG4gICAgcHJvdG8kMi5hYnMgICAgICAgICAgICA9IGFicztcbiAgICBwcm90byQyLmFkZCAgICAgICAgICAgID0gYWRkJDE7XG4gICAgcHJvdG8kMi5zdWJ0cmFjdCAgICAgICA9IHN1YnRyYWN0JDE7XG4gICAgcHJvdG8kMi5hcyAgICAgICAgICAgICA9IGFzO1xuICAgIHByb3RvJDIuYXNNaWxsaXNlY29uZHMgPSBhc01pbGxpc2Vjb25kcztcbiAgICBwcm90byQyLmFzU2Vjb25kcyAgICAgID0gYXNTZWNvbmRzO1xuICAgIHByb3RvJDIuYXNNaW51dGVzICAgICAgPSBhc01pbnV0ZXM7XG4gICAgcHJvdG8kMi5hc0hvdXJzICAgICAgICA9IGFzSG91cnM7XG4gICAgcHJvdG8kMi5hc0RheXMgICAgICAgICA9IGFzRGF5cztcbiAgICBwcm90byQyLmFzV2Vla3MgICAgICAgID0gYXNXZWVrcztcbiAgICBwcm90byQyLmFzTW9udGhzICAgICAgID0gYXNNb250aHM7XG4gICAgcHJvdG8kMi5hc1F1YXJ0ZXJzICAgICA9IGFzUXVhcnRlcnM7XG4gICAgcHJvdG8kMi5hc1llYXJzICAgICAgICA9IGFzWWVhcnM7XG4gICAgcHJvdG8kMi52YWx1ZU9mICAgICAgICA9IHZhbHVlT2YkMTtcbiAgICBwcm90byQyLl9idWJibGUgICAgICAgID0gYnViYmxlO1xuICAgIHByb3RvJDIuY2xvbmUgICAgICAgICAgPSBjbG9uZSQxO1xuICAgIHByb3RvJDIuZ2V0ICAgICAgICAgICAgPSBnZXQkMjtcbiAgICBwcm90byQyLm1pbGxpc2Vjb25kcyAgID0gbWlsbGlzZWNvbmRzO1xuICAgIHByb3RvJDIuc2Vjb25kcyAgICAgICAgPSBzZWNvbmRzO1xuICAgIHByb3RvJDIubWludXRlcyAgICAgICAgPSBtaW51dGVzO1xuICAgIHByb3RvJDIuaG91cnMgICAgICAgICAgPSBob3VycztcbiAgICBwcm90byQyLmRheXMgICAgICAgICAgID0gZGF5cztcbiAgICBwcm90byQyLndlZWtzICAgICAgICAgID0gd2Vla3M7XG4gICAgcHJvdG8kMi5tb250aHMgICAgICAgICA9IG1vbnRocztcbiAgICBwcm90byQyLnllYXJzICAgICAgICAgID0geWVhcnM7XG4gICAgcHJvdG8kMi5odW1hbml6ZSAgICAgICA9IGh1bWFuaXplO1xuICAgIHByb3RvJDIudG9JU09TdHJpbmcgICAgPSB0b0lTT1N0cmluZyQxO1xuICAgIHByb3RvJDIudG9TdHJpbmcgICAgICAgPSB0b0lTT1N0cmluZyQxO1xuICAgIHByb3RvJDIudG9KU09OICAgICAgICAgPSB0b0lTT1N0cmluZyQxO1xuICAgIHByb3RvJDIubG9jYWxlICAgICAgICAgPSBsb2NhbGU7XG4gICAgcHJvdG8kMi5sb2NhbGVEYXRhICAgICA9IGxvY2FsZURhdGE7XG5cbiAgICBwcm90byQyLnRvSXNvU3RyaW5nID0gZGVwcmVjYXRlKCd0b0lzb1N0cmluZygpIGlzIGRlcHJlY2F0ZWQuIFBsZWFzZSB1c2UgdG9JU09TdHJpbmcoKSBpbnN0ZWFkIChub3RpY2UgdGhlIGNhcGl0YWxzKScsIHRvSVNPU3RyaW5nJDEpO1xuICAgIHByb3RvJDIubGFuZyA9IGxhbmc7XG5cbiAgICAvLyBTaWRlIGVmZmVjdCBpbXBvcnRzXG5cbiAgICAvLyBGT1JNQVRUSU5HXG5cbiAgICBhZGRGb3JtYXRUb2tlbignWCcsIDAsIDAsICd1bml4Jyk7XG4gICAgYWRkRm9ybWF0VG9rZW4oJ3gnLCAwLCAwLCAndmFsdWVPZicpO1xuXG4gICAgLy8gUEFSU0lOR1xuXG4gICAgYWRkUmVnZXhUb2tlbigneCcsIG1hdGNoU2lnbmVkKTtcbiAgICBhZGRSZWdleFRva2VuKCdYJywgbWF0Y2hUaW1lc3RhbXApO1xuICAgIGFkZFBhcnNlVG9rZW4oJ1gnLCBmdW5jdGlvbiAoaW5wdXQsIGFycmF5LCBjb25maWcpIHtcbiAgICAgICAgY29uZmlnLl9kID0gbmV3IERhdGUocGFyc2VGbG9hdChpbnB1dCwgMTApICogMTAwMCk7XG4gICAgfSk7XG4gICAgYWRkUGFyc2VUb2tlbigneCcsIGZ1bmN0aW9uIChpbnB1dCwgYXJyYXksIGNvbmZpZykge1xuICAgICAgICBjb25maWcuX2QgPSBuZXcgRGF0ZSh0b0ludChpbnB1dCkpO1xuICAgIH0pO1xuXG4gICAgLy8gU2lkZSBlZmZlY3QgaW1wb3J0c1xuXG5cbiAgICBob29rcy52ZXJzaW9uID0gJzIuMjQuMCc7XG5cbiAgICBzZXRIb29rQ2FsbGJhY2soY3JlYXRlTG9jYWwpO1xuXG4gICAgaG9va3MuZm4gICAgICAgICAgICAgICAgICAgID0gcHJvdG87XG4gICAgaG9va3MubWluICAgICAgICAgICAgICAgICAgID0gbWluO1xuICAgIGhvb2tzLm1heCAgICAgICAgICAgICAgICAgICA9IG1heDtcbiAgICBob29rcy5ub3cgICAgICAgICAgICAgICAgICAgPSBub3c7XG4gICAgaG9va3MudXRjICAgICAgICAgICAgICAgICAgID0gY3JlYXRlVVRDO1xuICAgIGhvb2tzLnVuaXggICAgICAgICAgICAgICAgICA9IGNyZWF0ZVVuaXg7XG4gICAgaG9va3MubW9udGhzICAgICAgICAgICAgICAgID0gbGlzdE1vbnRocztcbiAgICBob29rcy5pc0RhdGUgICAgICAgICAgICAgICAgPSBpc0RhdGU7XG4gICAgaG9va3MubG9jYWxlICAgICAgICAgICAgICAgID0gZ2V0U2V0R2xvYmFsTG9jYWxlO1xuICAgIGhvb2tzLmludmFsaWQgICAgICAgICAgICAgICA9IGNyZWF0ZUludmFsaWQ7XG4gICAgaG9va3MuZHVyYXRpb24gICAgICAgICAgICAgID0gY3JlYXRlRHVyYXRpb247XG4gICAgaG9va3MuaXNNb21lbnQgICAgICAgICAgICAgID0gaXNNb21lbnQ7XG4gICAgaG9va3Mud2Vla2RheXMgICAgICAgICAgICAgID0gbGlzdFdlZWtkYXlzO1xuICAgIGhvb2tzLnBhcnNlWm9uZSAgICAgICAgICAgICA9IGNyZWF0ZUluWm9uZTtcbiAgICBob29rcy5sb2NhbGVEYXRhICAgICAgICAgICAgPSBnZXRMb2NhbGU7XG4gICAgaG9va3MuaXNEdXJhdGlvbiAgICAgICAgICAgID0gaXNEdXJhdGlvbjtcbiAgICBob29rcy5tb250aHNTaG9ydCAgICAgICAgICAgPSBsaXN0TW9udGhzU2hvcnQ7XG4gICAgaG9va3Mud2Vla2RheXNNaW4gICAgICAgICAgID0gbGlzdFdlZWtkYXlzTWluO1xuICAgIGhvb2tzLmRlZmluZUxvY2FsZSAgICAgICAgICA9IGRlZmluZUxvY2FsZTtcbiAgICBob29rcy51cGRhdGVMb2NhbGUgICAgICAgICAgPSB1cGRhdGVMb2NhbGU7XG4gICAgaG9va3MubG9jYWxlcyAgICAgICAgICAgICAgID0gbGlzdExvY2FsZXM7XG4gICAgaG9va3Mud2Vla2RheXNTaG9ydCAgICAgICAgID0gbGlzdFdlZWtkYXlzU2hvcnQ7XG4gICAgaG9va3Mubm9ybWFsaXplVW5pdHMgICAgICAgID0gbm9ybWFsaXplVW5pdHM7XG4gICAgaG9va3MucmVsYXRpdmVUaW1lUm91bmRpbmcgID0gZ2V0U2V0UmVsYXRpdmVUaW1lUm91bmRpbmc7XG4gICAgaG9va3MucmVsYXRpdmVUaW1lVGhyZXNob2xkID0gZ2V0U2V0UmVsYXRpdmVUaW1lVGhyZXNob2xkO1xuICAgIGhvb2tzLmNhbGVuZGFyRm9ybWF0ICAgICAgICA9IGdldENhbGVuZGFyRm9ybWF0O1xuICAgIGhvb2tzLnByb3RvdHlwZSAgICAgICAgICAgICA9IHByb3RvO1xuXG4gICAgLy8gY3VycmVudGx5IEhUTUw1IGlucHV0IHR5cGUgb25seSBzdXBwb3J0cyAyNC1ob3VyIGZvcm1hdHNcbiAgICBob29rcy5IVE1MNV9GTVQgPSB7XG4gICAgICAgIERBVEVUSU1FX0xPQ0FMOiAnWVlZWS1NTS1ERFRISDptbScsICAgICAgICAgICAgIC8vIDxpbnB1dCB0eXBlPVwiZGF0ZXRpbWUtbG9jYWxcIiAvPlxuICAgICAgICBEQVRFVElNRV9MT0NBTF9TRUNPTkRTOiAnWVlZWS1NTS1ERFRISDptbTpzcycsICAvLyA8aW5wdXQgdHlwZT1cImRhdGV0aW1lLWxvY2FsXCIgc3RlcD1cIjFcIiAvPlxuICAgICAgICBEQVRFVElNRV9MT0NBTF9NUzogJ1lZWVktTU0tRERUSEg6bW06c3MuU1NTJywgICAvLyA8aW5wdXQgdHlwZT1cImRhdGV0aW1lLWxvY2FsXCIgc3RlcD1cIjAuMDAxXCIgLz5cbiAgICAgICAgREFURTogJ1lZWVktTU0tREQnLCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJkYXRlXCIgLz5cbiAgICAgICAgVElNRTogJ0hIOm1tJywgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJ0aW1lXCIgLz5cbiAgICAgICAgVElNRV9TRUNPTkRTOiAnSEg6bW06c3MnLCAgICAgICAgICAgICAgICAgICAgICAgLy8gPGlucHV0IHR5cGU9XCJ0aW1lXCIgc3RlcD1cIjFcIiAvPlxuICAgICAgICBUSU1FX01TOiAnSEg6bW06c3MuU1NTJywgICAgICAgICAgICAgICAgICAgICAgICAvLyA8aW5wdXQgdHlwZT1cInRpbWVcIiBzdGVwPVwiMC4wMDFcIiAvPlxuICAgICAgICBXRUVLOiAnR0dHRy1bV11XVycsICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8aW5wdXQgdHlwZT1cIndlZWtcIiAvPlxuICAgICAgICBNT05USDogJ1lZWVktTU0nICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyA8aW5wdXQgdHlwZT1cIm1vbnRoXCIgLz5cbiAgICB9O1xuXG4gICAgcmV0dXJuIGhvb2tzO1xuXG59KSkpO1xuIiwiLyogZ2xvYmFsIHdpbmRvdzogZmFsc2UgKi9cbid1c2Ugc3RyaWN0JztcblxudmFyIG1vbWVudCA9IHJlcXVpcmUoJ21vbWVudCcpO1xubW9tZW50ID0gdHlwZW9mIG1vbWVudCA9PT0gJ2Z1bmN0aW9uJyA/IG1vbWVudCA6IHdpbmRvdy5tb21lbnQ7XG5cbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2NvcmUvY29yZS5kZWZhdWx0cycpO1xudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2luZGV4Jyk7XG52YXIgU2NhbGUgPSByZXF1aXJlKCcuLi9jb3JlL2NvcmUuc2NhbGUnKTtcbnZhciBzY2FsZVNlcnZpY2UgPSByZXF1aXJlKCcuLi9jb3JlL2NvcmUuc2NhbGVTZXJ2aWNlJyk7XG5cbi8vIEludGVnZXIgY29uc3RhbnRzIGFyZSBmcm9tIHRoZSBFUzYgc3BlYy5cbnZhciBNSU5fSU5URUdFUiA9IE51bWJlci5NSU5fU0FGRV9JTlRFR0VSIHx8IC05MDA3MTk5MjU0NzQwOTkxO1xudmFyIE1BWF9JTlRFR0VSID0gTnVtYmVyLk1BWF9TQUZFX0lOVEVHRVIgfHwgOTAwNzE5OTI1NDc0MDk5MTtcblxudmFyIElOVEVSVkFMUyA9IHtcblx0bWlsbGlzZWNvbmQ6IHtcblx0XHRjb21tb246IHRydWUsXG5cdFx0c2l6ZTogMSxcblx0XHRzdGVwczogWzEsIDIsIDUsIDEwLCAyMCwgNTAsIDEwMCwgMjUwLCA1MDBdXG5cdH0sXG5cdHNlY29uZDoge1xuXHRcdGNvbW1vbjogdHJ1ZSxcblx0XHRzaXplOiAxMDAwLFxuXHRcdHN0ZXBzOiBbMSwgMiwgNSwgMTAsIDE1LCAzMF1cblx0fSxcblx0bWludXRlOiB7XG5cdFx0Y29tbW9uOiB0cnVlLFxuXHRcdHNpemU6IDYwMDAwLFxuXHRcdHN0ZXBzOiBbMSwgMiwgNSwgMTAsIDE1LCAzMF1cblx0fSxcblx0aG91cjoge1xuXHRcdGNvbW1vbjogdHJ1ZSxcblx0XHRzaXplOiAzNjAwMDAwLFxuXHRcdHN0ZXBzOiBbMSwgMiwgMywgNiwgMTJdXG5cdH0sXG5cdGRheToge1xuXHRcdGNvbW1vbjogdHJ1ZSxcblx0XHRzaXplOiA4NjQwMDAwMCxcblx0XHRzdGVwczogWzEsIDIsIDVdXG5cdH0sXG5cdHdlZWs6IHtcblx0XHRjb21tb246IGZhbHNlLFxuXHRcdHNpemU6IDYwNDgwMDAwMCxcblx0XHRzdGVwczogWzEsIDIsIDMsIDRdXG5cdH0sXG5cdG1vbnRoOiB7XG5cdFx0Y29tbW9uOiB0cnVlLFxuXHRcdHNpemU6IDIuNjI4ZTksXG5cdFx0c3RlcHM6IFsxLCAyLCAzXVxuXHR9LFxuXHRxdWFydGVyOiB7XG5cdFx0Y29tbW9uOiBmYWxzZSxcblx0XHRzaXplOiA3Ljg4NGU5LFxuXHRcdHN0ZXBzOiBbMSwgMiwgMywgNF1cblx0fSxcblx0eWVhcjoge1xuXHRcdGNvbW1vbjogdHJ1ZSxcblx0XHRzaXplOiAzLjE1NGUxMFxuXHR9XG59O1xuXG52YXIgVU5JVFMgPSBPYmplY3Qua2V5cyhJTlRFUlZBTFMpO1xuXG5mdW5jdGlvbiBzb3J0ZXIoYSwgYikge1xuXHRyZXR1cm4gYSAtIGI7XG59XG5cbmZ1bmN0aW9uIGFycmF5VW5pcXVlKGl0ZW1zKSB7XG5cdHZhciBoYXNoID0ge307XG5cdHZhciBvdXQgPSBbXTtcblx0dmFyIGksIGlsZW4sIGl0ZW07XG5cblx0Zm9yIChpID0gMCwgaWxlbiA9IGl0ZW1zLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdGl0ZW0gPSBpdGVtc1tpXTtcblx0XHRpZiAoIWhhc2hbaXRlbV0pIHtcblx0XHRcdGhhc2hbaXRlbV0gPSB0cnVlO1xuXHRcdFx0b3V0LnB1c2goaXRlbSk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG91dDtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGFuIGFycmF5IG9mIHt0aW1lLCBwb3N9IG9iamVjdHMgdXNlZCB0byBpbnRlcnBvbGF0ZSBhIHNwZWNpZmljIGB0aW1lYCBvciBwb3NpdGlvblxuICogKGBwb3NgKSBvbiB0aGUgc2NhbGUsIGJ5IHNlYXJjaGluZyBlbnRyaWVzIGJlZm9yZSBhbmQgYWZ0ZXIgdGhlIHJlcXVlc3RlZCB2YWx1ZS4gYHBvc2AgaXNcbiAqIGEgZGVjaW1hbCBiZXR3ZWVuIDAgYW5kIDE6IDAgYmVpbmcgdGhlIHN0YXJ0IG9mIHRoZSBzY2FsZSAobGVmdCBvciB0b3ApIGFuZCAxIHRoZSBvdGhlclxuICogZXh0cmVtaXR5IChsZWZ0ICsgd2lkdGggb3IgdG9wICsgaGVpZ2h0KS4gTm90ZSB0aGF0IGl0IHdvdWxkIGJlIG1vcmUgb3B0aW1pemVkIHRvIGRpcmVjdGx5XG4gKiBzdG9yZSBwcmUtY29tcHV0ZWQgcGl4ZWxzLCBidXQgdGhlIHNjYWxlIGRpbWVuc2lvbnMgYXJlIG5vdCBndWFyYW50ZWVkIGF0IHRoZSB0aW1lIHdlIG5lZWRcbiAqIHRvIGNyZWF0ZSB0aGUgbG9va3VwIHRhYmxlLiBUaGUgdGFibGUgQUxXQVlTIGNvbnRhaW5zIGF0IGxlYXN0IHR3byBpdGVtczogbWluIGFuZCBtYXguXG4gKlxuICogQHBhcmFtIHtOdW1iZXJbXX0gdGltZXN0YW1wcyAtIHRpbWVzdGFtcHMgc29ydGVkIGZyb20gbG93ZXN0IHRvIGhpZ2hlc3QuXG4gKiBAcGFyYW0ge1N0cmluZ30gZGlzdHJpYnV0aW9uIC0gSWYgJ2xpbmVhcicsIHRpbWVzdGFtcHMgd2lsbCBiZSBzcHJlYWQgbGluZWFybHkgYWxvbmcgdGhlIG1pblxuICogYW5kIG1heCByYW5nZSwgc28gYmFzaWNhbGx5LCB0aGUgdGFibGUgd2lsbCBjb250YWlucyBvbmx5IHR3byBpdGVtczoge21pbiwgMH0gYW5kIHttYXgsIDF9LlxuICogSWYgJ3NlcmllcycsIHRpbWVzdGFtcHMgd2lsbCBiZSBwb3NpdGlvbmVkIGF0IHRoZSBzYW1lIGRpc3RhbmNlIGZyb20gZWFjaCBvdGhlci4gSW4gdGhpc1xuICogY2FzZSwgb25seSB0aW1lc3RhbXBzIHRoYXQgYnJlYWsgdGhlIHRpbWUgbGluZWFyaXR5IGFyZSByZWdpc3RlcmVkLCBtZWFuaW5nIHRoYXQgaW4gdGhlXG4gKiBiZXN0IGNhc2UsIGFsbCB0aW1lc3RhbXBzIGFyZSBsaW5lYXIsIHRoZSB0YWJsZSBjb250YWlucyBvbmx5IG1pbiBhbmQgbWF4LlxuICovXG5mdW5jdGlvbiBidWlsZExvb2t1cFRhYmxlKHRpbWVzdGFtcHMsIG1pbiwgbWF4LCBkaXN0cmlidXRpb24pIHtcblx0aWYgKGRpc3RyaWJ1dGlvbiA9PT0gJ2xpbmVhcicgfHwgIXRpbWVzdGFtcHMubGVuZ3RoKSB7XG5cdFx0cmV0dXJuIFtcblx0XHRcdHt0aW1lOiBtaW4sIHBvczogMH0sXG5cdFx0XHR7dGltZTogbWF4LCBwb3M6IDF9XG5cdFx0XTtcblx0fVxuXG5cdHZhciB0YWJsZSA9IFtdO1xuXHR2YXIgaXRlbXMgPSBbbWluXTtcblx0dmFyIGksIGlsZW4sIHByZXYsIGN1cnIsIG5leHQ7XG5cblx0Zm9yIChpID0gMCwgaWxlbiA9IHRpbWVzdGFtcHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0Y3VyciA9IHRpbWVzdGFtcHNbaV07XG5cdFx0aWYgKGN1cnIgPiBtaW4gJiYgY3VyciA8IG1heCkge1xuXHRcdFx0aXRlbXMucHVzaChjdXJyKTtcblx0XHR9XG5cdH1cblxuXHRpdGVtcy5wdXNoKG1heCk7XG5cblx0Zm9yIChpID0gMCwgaWxlbiA9IGl0ZW1zLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdG5leHQgPSBpdGVtc1tpICsgMV07XG5cdFx0cHJldiA9IGl0ZW1zW2kgLSAxXTtcblx0XHRjdXJyID0gaXRlbXNbaV07XG5cblx0XHQvLyBvbmx5IGFkZCBwb2ludHMgdGhhdCBicmVha3MgdGhlIHNjYWxlIGxpbmVhcml0eVxuXHRcdGlmIChwcmV2ID09PSB1bmRlZmluZWQgfHwgbmV4dCA9PT0gdW5kZWZpbmVkIHx8IE1hdGgucm91bmQoKG5leHQgKyBwcmV2KSAvIDIpICE9PSBjdXJyKSB7XG5cdFx0XHR0YWJsZS5wdXNoKHt0aW1lOiBjdXJyLCBwb3M6IGkgLyAoaWxlbiAtIDEpfSk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHRhYmxlO1xufVxuXG4vLyBAc2VlIGFkYXB0ZWQgZnJvbSBodHRwOi8vd3d3LmFudWpnYWtoYXIuY29tLzIwMTQvMDMvMDEvYmluYXJ5LXNlYXJjaC1pbi1qYXZhc2NyaXB0L1xuZnVuY3Rpb24gbG9va3VwKHRhYmxlLCBrZXksIHZhbHVlKSB7XG5cdHZhciBsbyA9IDA7XG5cdHZhciBoaSA9IHRhYmxlLmxlbmd0aCAtIDE7XG5cdHZhciBtaWQsIGkwLCBpMTtcblxuXHR3aGlsZSAobG8gPj0gMCAmJiBsbyA8PSBoaSkge1xuXHRcdG1pZCA9IChsbyArIGhpKSA+PiAxO1xuXHRcdGkwID0gdGFibGVbbWlkIC0gMV0gfHwgbnVsbDtcblx0XHRpMSA9IHRhYmxlW21pZF07XG5cblx0XHRpZiAoIWkwKSB7XG5cdFx0XHQvLyBnaXZlbiB2YWx1ZSBpcyBvdXRzaWRlIHRhYmxlIChiZWZvcmUgZmlyc3QgaXRlbSlcblx0XHRcdHJldHVybiB7bG86IG51bGwsIGhpOiBpMX07XG5cdFx0fSBlbHNlIGlmIChpMVtrZXldIDwgdmFsdWUpIHtcblx0XHRcdGxvID0gbWlkICsgMTtcblx0XHR9IGVsc2UgaWYgKGkwW2tleV0gPiB2YWx1ZSkge1xuXHRcdFx0aGkgPSBtaWQgLSAxO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm4ge2xvOiBpMCwgaGk6IGkxfTtcblx0XHR9XG5cdH1cblxuXHQvLyBnaXZlbiB2YWx1ZSBpcyBvdXRzaWRlIHRhYmxlIChhZnRlciBsYXN0IGl0ZW0pXG5cdHJldHVybiB7bG86IGkxLCBoaTogbnVsbH07XG59XG5cbi8qKlxuICogTGluZWFybHkgaW50ZXJwb2xhdGVzIHRoZSBnaXZlbiBzb3VyY2UgYHZhbHVlYCB1c2luZyB0aGUgdGFibGUgaXRlbXMgYHNrZXlgIHZhbHVlcyBhbmRcbiAqIHJldHVybnMgdGhlIGFzc29jaWF0ZWQgYHRrZXlgIHZhbHVlLiBGb3IgZXhhbXBsZSwgaW50ZXJwb2xhdGUodGFibGUsICd0aW1lJywgNDIsICdwb3MnKVxuICogcmV0dXJucyB0aGUgcG9zaXRpb24gZm9yIGEgdGltZXN0YW1wIGVxdWFsIHRvIDQyLiBJZiB2YWx1ZSBpcyBvdXQgb2YgYm91bmRzLCB2YWx1ZXMgYXRcbiAqIGluZGV4IFswLCAxXSBvciBbbiAtIDEsIG5dIGFyZSB1c2VkIGZvciB0aGUgaW50ZXJwb2xhdGlvbi5cbiAqL1xuZnVuY3Rpb24gaW50ZXJwb2xhdGUodGFibGUsIHNrZXksIHN2YWwsIHRrZXkpIHtcblx0dmFyIHJhbmdlID0gbG9va3VwKHRhYmxlLCBza2V5LCBzdmFsKTtcblxuXHQvLyBOb3RlOiB0aGUgbG9va3VwIHRhYmxlIEFMV0FZUyBjb250YWlucyBhdCBsZWFzdCAyIGl0ZW1zIChtaW4gYW5kIG1heClcblx0dmFyIHByZXYgPSAhcmFuZ2UubG8gPyB0YWJsZVswXSA6ICFyYW5nZS5oaSA/IHRhYmxlW3RhYmxlLmxlbmd0aCAtIDJdIDogcmFuZ2UubG87XG5cdHZhciBuZXh0ID0gIXJhbmdlLmxvID8gdGFibGVbMV0gOiAhcmFuZ2UuaGkgPyB0YWJsZVt0YWJsZS5sZW5ndGggLSAxXSA6IHJhbmdlLmhpO1xuXG5cdHZhciBzcGFuID0gbmV4dFtza2V5XSAtIHByZXZbc2tleV07XG5cdHZhciByYXRpbyA9IHNwYW4gPyAoc3ZhbCAtIHByZXZbc2tleV0pIC8gc3BhbiA6IDA7XG5cdHZhciBvZmZzZXQgPSAobmV4dFt0a2V5XSAtIHByZXZbdGtleV0pICogcmF0aW87XG5cblx0cmV0dXJuIHByZXZbdGtleV0gKyBvZmZzZXQ7XG59XG5cbi8qKlxuICogQ29udmVydCB0aGUgZ2l2ZW4gdmFsdWUgdG8gYSBtb21lbnQgb2JqZWN0IHVzaW5nIHRoZSBnaXZlbiB0aW1lIG9wdGlvbnMuXG4gKiBAc2VlIGh0dHA6Ly9tb21lbnRqcy5jb20vZG9jcy8jL3BhcnNpbmcvXG4gKi9cbmZ1bmN0aW9uIG1vbWVudGlmeSh2YWx1ZSwgb3B0aW9ucykge1xuXHR2YXIgcGFyc2VyID0gb3B0aW9ucy5wYXJzZXI7XG5cdHZhciBmb3JtYXQgPSBvcHRpb25zLnBhcnNlciB8fCBvcHRpb25zLmZvcm1hdDtcblxuXHRpZiAodHlwZW9mIHBhcnNlciA9PT0gJ2Z1bmN0aW9uJykge1xuXHRcdHJldHVybiBwYXJzZXIodmFsdWUpO1xuXHR9XG5cblx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgJiYgdHlwZW9mIGZvcm1hdCA9PT0gJ3N0cmluZycpIHtcblx0XHRyZXR1cm4gbW9tZW50KHZhbHVlLCBmb3JtYXQpO1xuXHR9XG5cblx0aWYgKCEodmFsdWUgaW5zdGFuY2VvZiBtb21lbnQpKSB7XG5cdFx0dmFsdWUgPSBtb21lbnQodmFsdWUpO1xuXHR9XG5cblx0aWYgKHZhbHVlLmlzVmFsaWQoKSkge1xuXHRcdHJldHVybiB2YWx1ZTtcblx0fVxuXG5cdC8vIExhYmVscyBhcmUgaW4gYW4gaW5jb21wYXRpYmxlIG1vbWVudCBmb3JtYXQgYW5kIG5vIGBwYXJzZXJgIGhhcyBiZWVuIHByb3ZpZGVkLlxuXHQvLyBUaGUgdXNlciBtaWdodCBzdGlsbCB1c2UgdGhlIGRlcHJlY2F0ZWQgYGZvcm1hdGAgb3B0aW9uIHRvIGNvbnZlcnQgaGlzIGlucHV0cy5cblx0aWYgKHR5cGVvZiBmb3JtYXQgPT09ICdmdW5jdGlvbicpIHtcblx0XHRyZXR1cm4gZm9ybWF0KHZhbHVlKTtcblx0fVxuXG5cdHJldHVybiB2YWx1ZTtcbn1cblxuZnVuY3Rpb24gcGFyc2UoaW5wdXQsIHNjYWxlKSB7XG5cdGlmIChoZWxwZXJzLmlzTnVsbE9yVW5kZWYoaW5wdXQpKSB7XG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHR2YXIgb3B0aW9ucyA9IHNjYWxlLm9wdGlvbnMudGltZTtcblx0dmFyIHZhbHVlID0gbW9tZW50aWZ5KHNjYWxlLmdldFJpZ2h0VmFsdWUoaW5wdXQpLCBvcHRpb25zKTtcblx0aWYgKCF2YWx1ZS5pc1ZhbGlkKCkpIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdGlmIChvcHRpb25zLnJvdW5kKSB7XG5cdFx0dmFsdWUuc3RhcnRPZihvcHRpb25zLnJvdW5kKTtcblx0fVxuXG5cdHJldHVybiB2YWx1ZS52YWx1ZU9mKCk7XG59XG5cbi8qKlxuICogUmV0dXJucyB0aGUgbnVtYmVyIG9mIHVuaXQgdG8gc2tpcCB0byBiZSBhYmxlIHRvIGRpc3BsYXkgdXAgdG8gYGNhcGFjaXR5YCBudW1iZXIgb2YgdGlja3NcbiAqIGluIGB1bml0YCBmb3IgdGhlIGdpdmVuIGBtaW5gIC8gYG1heGAgcmFuZ2UgYW5kIHJlc3BlY3RpbmcgdGhlIGludGVydmFsIHN0ZXBzIGNvbnN0cmFpbnRzLlxuICovXG5mdW5jdGlvbiBkZXRlcm1pbmVTdGVwU2l6ZShtaW4sIG1heCwgdW5pdCwgY2FwYWNpdHkpIHtcblx0dmFyIHJhbmdlID0gbWF4IC0gbWluO1xuXHR2YXIgaW50ZXJ2YWwgPSBJTlRFUlZBTFNbdW5pdF07XG5cdHZhciBtaWxsaXNlY29uZHMgPSBpbnRlcnZhbC5zaXplO1xuXHR2YXIgc3RlcHMgPSBpbnRlcnZhbC5zdGVwcztcblx0dmFyIGksIGlsZW4sIGZhY3RvcjtcblxuXHRpZiAoIXN0ZXBzKSB7XG5cdFx0cmV0dXJuIE1hdGguY2VpbChyYW5nZSAvIChjYXBhY2l0eSAqIG1pbGxpc2Vjb25kcykpO1xuXHR9XG5cblx0Zm9yIChpID0gMCwgaWxlbiA9IHN0ZXBzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdGZhY3RvciA9IHN0ZXBzW2ldO1xuXHRcdGlmIChNYXRoLmNlaWwocmFuZ2UgLyAobWlsbGlzZWNvbmRzICogZmFjdG9yKSkgPD0gY2FwYWNpdHkpIHtcblx0XHRcdGJyZWFrO1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBmYWN0b3I7XG59XG5cbi8qKlxuICogRmlndXJlcyBvdXQgd2hhdCB1bml0IHJlc3VsdHMgaW4gYW4gYXBwcm9wcmlhdGUgbnVtYmVyIG9mIGF1dG8tZ2VuZXJhdGVkIHRpY2tzXG4gKi9cbmZ1bmN0aW9uIGRldGVybWluZVVuaXRGb3JBdXRvVGlja3MobWluVW5pdCwgbWluLCBtYXgsIGNhcGFjaXR5KSB7XG5cdHZhciBpbGVuID0gVU5JVFMubGVuZ3RoO1xuXHR2YXIgaSwgaW50ZXJ2YWwsIGZhY3RvcjtcblxuXHRmb3IgKGkgPSBVTklUUy5pbmRleE9mKG1pblVuaXQpOyBpIDwgaWxlbiAtIDE7ICsraSkge1xuXHRcdGludGVydmFsID0gSU5URVJWQUxTW1VOSVRTW2ldXTtcblx0XHRmYWN0b3IgPSBpbnRlcnZhbC5zdGVwcyA/IGludGVydmFsLnN0ZXBzW2ludGVydmFsLnN0ZXBzLmxlbmd0aCAtIDFdIDogTUFYX0lOVEVHRVI7XG5cblx0XHRpZiAoaW50ZXJ2YWwuY29tbW9uICYmIE1hdGguY2VpbCgobWF4IC0gbWluKSAvIChmYWN0b3IgKiBpbnRlcnZhbC5zaXplKSkgPD0gY2FwYWNpdHkpIHtcblx0XHRcdHJldHVybiBVTklUU1tpXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gVU5JVFNbaWxlbiAtIDFdO1xufVxuXG4vKipcbiAqIEZpZ3VyZXMgb3V0IHdoYXQgdW5pdCB0byBmb3JtYXQgYSBzZXQgb2YgdGlja3Mgd2l0aFxuICovXG5mdW5jdGlvbiBkZXRlcm1pbmVVbml0Rm9yRm9ybWF0dGluZyh0aWNrcywgbWluVW5pdCwgbWluLCBtYXgpIHtcblx0dmFyIGR1cmF0aW9uID0gbW9tZW50LmR1cmF0aW9uKG1vbWVudChtYXgpLmRpZmYobW9tZW50KG1pbikpKTtcblx0dmFyIGlsZW4gPSBVTklUUy5sZW5ndGg7XG5cdHZhciBpLCB1bml0O1xuXG5cdGZvciAoaSA9IGlsZW4gLSAxOyBpID49IFVOSVRTLmluZGV4T2YobWluVW5pdCk7IGktLSkge1xuXHRcdHVuaXQgPSBVTklUU1tpXTtcblx0XHRpZiAoSU5URVJWQUxTW3VuaXRdLmNvbW1vbiAmJiBkdXJhdGlvbi5hcyh1bml0KSA+PSB0aWNrcy5sZW5ndGgpIHtcblx0XHRcdHJldHVybiB1bml0O1xuXHRcdH1cblx0fVxuXG5cdHJldHVybiBVTklUU1ttaW5Vbml0ID8gVU5JVFMuaW5kZXhPZihtaW5Vbml0KSA6IDBdO1xufVxuXG5mdW5jdGlvbiBkZXRlcm1pbmVNYWpvclVuaXQodW5pdCkge1xuXHRmb3IgKHZhciBpID0gVU5JVFMuaW5kZXhPZih1bml0KSArIDEsIGlsZW4gPSBVTklUUy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRpZiAoSU5URVJWQUxTW1VOSVRTW2ldXS5jb21tb24pIHtcblx0XHRcdHJldHVybiBVTklUU1tpXTtcblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiBHZW5lcmF0ZXMgYSBtYXhpbXVtIG9mIGBjYXBhY2l0eWAgdGltZXN0YW1wcyBiZXR3ZWVuIG1pbiBhbmQgbWF4LCByb3VuZGVkIHRvIHRoZVxuICogYG1pbm9yYCB1bml0LCBhbGlnbmVkIG9uIHRoZSBgbWFqb3JgIHVuaXQgYW5kIHVzaW5nIHRoZSBnaXZlbiBzY2FsZSB0aW1lIGBvcHRpb25zYC5cbiAqIEltcG9ydGFudDogdGhpcyBtZXRob2QgY2FuIHJldHVybiB0aWNrcyBvdXRzaWRlIHRoZSBtaW4gYW5kIG1heCByYW5nZSwgaXQncyB0aGVcbiAqIHJlc3BvbnNpYmlsaXR5IG9mIHRoZSBjYWxsaW5nIGNvZGUgdG8gY2xhbXAgdmFsdWVzIGlmIG5lZWRlZC5cbiAqL1xuZnVuY3Rpb24gZ2VuZXJhdGUobWluLCBtYXgsIGNhcGFjaXR5LCBvcHRpb25zKSB7XG5cdHZhciB0aW1lT3B0cyA9IG9wdGlvbnMudGltZTtcblx0dmFyIG1pbm9yID0gdGltZU9wdHMudW5pdCB8fCBkZXRlcm1pbmVVbml0Rm9yQXV0b1RpY2tzKHRpbWVPcHRzLm1pblVuaXQsIG1pbiwgbWF4LCBjYXBhY2l0eSk7XG5cdHZhciBtYWpvciA9IGRldGVybWluZU1ham9yVW5pdChtaW5vcik7XG5cdHZhciBzdGVwU2l6ZSA9IGhlbHBlcnMudmFsdWVPckRlZmF1bHQodGltZU9wdHMuc3RlcFNpemUsIHRpbWVPcHRzLnVuaXRTdGVwU2l6ZSk7XG5cdHZhciB3ZWVrZGF5ID0gbWlub3IgPT09ICd3ZWVrJyA/IHRpbWVPcHRzLmlzb1dlZWtkYXkgOiBmYWxzZTtcblx0dmFyIG1ham9yVGlja3NFbmFibGVkID0gb3B0aW9ucy50aWNrcy5tYWpvci5lbmFibGVkO1xuXHR2YXIgaW50ZXJ2YWwgPSBJTlRFUlZBTFNbbWlub3JdO1xuXHR2YXIgZmlyc3QgPSBtb21lbnQobWluKTtcblx0dmFyIGxhc3QgPSBtb21lbnQobWF4KTtcblx0dmFyIHRpY2tzID0gW107XG5cdHZhciB0aW1lO1xuXG5cdGlmICghc3RlcFNpemUpIHtcblx0XHRzdGVwU2l6ZSA9IGRldGVybWluZVN0ZXBTaXplKG1pbiwgbWF4LCBtaW5vciwgY2FwYWNpdHkpO1xuXHR9XG5cblx0Ly8gRm9yICd3ZWVrJyB1bml0LCBoYW5kbGUgdGhlIGZpcnN0IGRheSBvZiB3ZWVrIG9wdGlvblxuXHRpZiAod2Vla2RheSkge1xuXHRcdGZpcnN0ID0gZmlyc3QuaXNvV2Vla2RheSh3ZWVrZGF5KTtcblx0XHRsYXN0ID0gbGFzdC5pc29XZWVrZGF5KHdlZWtkYXkpO1xuXHR9XG5cblx0Ly8gQWxpZ24gZmlyc3QvbGFzdCB0aWNrcyBvbiB1bml0XG5cdGZpcnN0ID0gZmlyc3Quc3RhcnRPZih3ZWVrZGF5ID8gJ2RheScgOiBtaW5vcik7XG5cdGxhc3QgPSBsYXN0LnN0YXJ0T2Yod2Vla2RheSA/ICdkYXknIDogbWlub3IpO1xuXG5cdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBsYXN0IHRpY2sgaW5jbHVkZSBtYXhcblx0aWYgKGxhc3QgPCBtYXgpIHtcblx0XHRsYXN0LmFkZCgxLCBtaW5vcik7XG5cdH1cblxuXHR0aW1lID0gbW9tZW50KGZpcnN0KTtcblxuXHRpZiAobWFqb3JUaWNrc0VuYWJsZWQgJiYgbWFqb3IgJiYgIXdlZWtkYXkgJiYgIXRpbWVPcHRzLnJvdW5kKSB7XG5cdFx0Ly8gQWxpZ24gdGhlIGZpcnN0IHRpY2sgb24gdGhlIHByZXZpb3VzIGBtaW5vcmAgdW5pdCBhbGlnbmVkIG9uIHRoZSBgbWFqb3JgIHVuaXQ6XG5cdFx0Ly8gd2UgZmlyc3QgYWxpZ25lZCB0aW1lIG9uIHRoZSBwcmV2aW91cyBgbWFqb3JgIHVuaXQgdGhlbiBhZGQgdGhlIG51bWJlciBvZiBmdWxsXG5cdFx0Ly8gc3RlcFNpemUgdGhlcmUgaXMgYmV0d2VlbiBmaXJzdCBhbmQgdGhlIHByZXZpb3VzIG1ham9yIHRpbWUuXG5cdFx0dGltZS5zdGFydE9mKG1ham9yKTtcblx0XHR0aW1lLmFkZCh+figoZmlyc3QgLSB0aW1lKSAvIChpbnRlcnZhbC5zaXplICogc3RlcFNpemUpKSAqIHN0ZXBTaXplLCBtaW5vcik7XG5cdH1cblxuXHRmb3IgKDsgdGltZSA8IGxhc3Q7IHRpbWUuYWRkKHN0ZXBTaXplLCBtaW5vcikpIHtcblx0XHR0aWNrcy5wdXNoKCt0aW1lKTtcblx0fVxuXG5cdHRpY2tzLnB1c2goK3RpbWUpO1xuXG5cdHJldHVybiB0aWNrcztcbn1cblxuLyoqXG4gKiBSZXR1cm5zIHRoZSByaWdodCBhbmQgbGVmdCBvZmZzZXRzIGZyb20gZWRnZXMgaW4gdGhlIGZvcm0gb2Yge2xlZnQsIHJpZ2h0fS5cbiAqIE9mZnNldHMgYXJlIGFkZGVkIHdoZW4gdGhlIGBvZmZzZXRgIG9wdGlvbiBpcyB0cnVlLlxuICovXG5mdW5jdGlvbiBjb21wdXRlT2Zmc2V0cyh0YWJsZSwgdGlja3MsIG1pbiwgbWF4LCBvcHRpb25zKSB7XG5cdHZhciBsZWZ0ID0gMDtcblx0dmFyIHJpZ2h0ID0gMDtcblx0dmFyIHVwcGVyLCBsb3dlcjtcblxuXHRpZiAob3B0aW9ucy5vZmZzZXQgJiYgdGlja3MubGVuZ3RoKSB7XG5cdFx0aWYgKCFvcHRpb25zLnRpbWUubWluKSB7XG5cdFx0XHR1cHBlciA9IHRpY2tzLmxlbmd0aCA+IDEgPyB0aWNrc1sxXSA6IG1heDtcblx0XHRcdGxvd2VyID0gdGlja3NbMF07XG5cdFx0XHRsZWZ0ID0gKFxuXHRcdFx0XHRpbnRlcnBvbGF0ZSh0YWJsZSwgJ3RpbWUnLCB1cHBlciwgJ3BvcycpIC1cblx0XHRcdFx0aW50ZXJwb2xhdGUodGFibGUsICd0aW1lJywgbG93ZXIsICdwb3MnKVxuXHRcdFx0KSAvIDI7XG5cdFx0fVxuXHRcdGlmICghb3B0aW9ucy50aW1lLm1heCkge1xuXHRcdFx0dXBwZXIgPSB0aWNrc1t0aWNrcy5sZW5ndGggLSAxXTtcblx0XHRcdGxvd2VyID0gdGlja3MubGVuZ3RoID4gMSA/IHRpY2tzW3RpY2tzLmxlbmd0aCAtIDJdIDogbWluO1xuXHRcdFx0cmlnaHQgPSAoXG5cdFx0XHRcdGludGVycG9sYXRlKHRhYmxlLCAndGltZScsIHVwcGVyLCAncG9zJykgLVxuXHRcdFx0XHRpbnRlcnBvbGF0ZSh0YWJsZSwgJ3RpbWUnLCBsb3dlciwgJ3BvcycpXG5cdFx0XHQpIC8gMjtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4ge2xlZnQ6IGxlZnQsIHJpZ2h0OiByaWdodH07XG59XG5cbmZ1bmN0aW9uIHRpY2tzRnJvbVRpbWVzdGFtcHModmFsdWVzLCBtYWpvclVuaXQpIHtcblx0dmFyIHRpY2tzID0gW107XG5cdHZhciBpLCBpbGVuLCB2YWx1ZSwgbWFqb3I7XG5cblx0Zm9yIChpID0gMCwgaWxlbiA9IHZhbHVlcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHR2YWx1ZSA9IHZhbHVlc1tpXTtcblx0XHRtYWpvciA9IG1ham9yVW5pdCA/IHZhbHVlID09PSArbW9tZW50KHZhbHVlKS5zdGFydE9mKG1ham9yVW5pdCkgOiBmYWxzZTtcblxuXHRcdHRpY2tzLnB1c2goe1xuXHRcdFx0dmFsdWU6IHZhbHVlLFxuXHRcdFx0bWFqb3I6IG1ham9yXG5cdFx0fSk7XG5cdH1cblxuXHRyZXR1cm4gdGlja3M7XG59XG5cbmZ1bmN0aW9uIGRldGVybWluZUxhYmVsRm9ybWF0KGRhdGEsIHRpbWVPcHRzKSB7XG5cdHZhciBpLCBtb21lbnREYXRlLCBoYXNUaW1lO1xuXHR2YXIgaWxlbiA9IGRhdGEubGVuZ3RoO1xuXG5cdC8vIGZpbmQgdGhlIGxhYmVsIHdpdGggdGhlIG1vc3QgcGFydHMgKG1pbGxpc2Vjb25kcywgbWludXRlcywgZXRjLilcblx0Ly8gZm9ybWF0IGFsbCBsYWJlbHMgd2l0aCB0aGUgc2FtZSBsZXZlbCBvZiBkZXRhaWwgYXMgdGhlIG1vc3Qgc3BlY2lmaWMgbGFiZWxcblx0Zm9yIChpID0gMDsgaSA8IGlsZW47IGkrKykge1xuXHRcdG1vbWVudERhdGUgPSBtb21lbnRpZnkoZGF0YVtpXSwgdGltZU9wdHMpO1xuXHRcdGlmIChtb21lbnREYXRlLm1pbGxpc2Vjb25kKCkgIT09IDApIHtcblx0XHRcdHJldHVybiAnTU1NIEQsIFlZWVkgaDptbTpzcy5TU1MgYSc7XG5cdFx0fVxuXHRcdGlmIChtb21lbnREYXRlLnNlY29uZCgpICE9PSAwIHx8IG1vbWVudERhdGUubWludXRlKCkgIT09IDAgfHwgbW9tZW50RGF0ZS5ob3VyKCkgIT09IDApIHtcblx0XHRcdGhhc1RpbWUgPSB0cnVlO1xuXHRcdH1cblx0fVxuXHRpZiAoaGFzVGltZSkge1xuXHRcdHJldHVybiAnTU1NIEQsIFlZWVkgaDptbTpzcyBhJztcblx0fVxuXHRyZXR1cm4gJ01NTSBELCBZWVlZJztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbigpIHtcblxuXHR2YXIgZGVmYXVsdENvbmZpZyA9IHtcblx0XHRwb3NpdGlvbjogJ2JvdHRvbScsXG5cblx0XHQvKipcblx0XHQgKiBEYXRhIGRpc3RyaWJ1dGlvbiBhbG9uZyB0aGUgc2NhbGU6XG5cdFx0ICogLSAnbGluZWFyJzogZGF0YSBhcmUgc3ByZWFkIGFjY29yZGluZyB0byB0aGVpciB0aW1lIChkaXN0YW5jZXMgY2FuIHZhcnkpLFxuXHRcdCAqIC0gJ3Nlcmllcyc6IGRhdGEgYXJlIHNwcmVhZCBhdCB0aGUgc2FtZSBkaXN0YW5jZSBmcm9tIGVhY2ggb3RoZXIuXG5cdFx0ICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9wdWxsLzQ1MDdcblx0XHQgKiBAc2luY2UgMi43LjBcblx0XHQgKi9cblx0XHRkaXN0cmlidXRpb246ICdsaW5lYXInLFxuXG5cdFx0LyoqXG5cdFx0ICogU2NhbGUgYm91bmRhcnkgc3RyYXRlZ3kgKGJ5cGFzc2VkIGJ5IG1pbi9tYXggdGltZSBvcHRpb25zKVxuXHRcdCAqIC0gYGRhdGFgOiBtYWtlIHN1cmUgZGF0YSBhcmUgZnVsbHkgdmlzaWJsZSwgdGlja3Mgb3V0c2lkZSBhcmUgcmVtb3ZlZFxuXHRcdCAqIC0gYHRpY2tzYDogbWFrZSBzdXJlIHRpY2tzIGFyZSBmdWxseSB2aXNpYmxlLCBkYXRhIG91dHNpZGUgYXJlIHRydW5jYXRlZFxuXHRcdCAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvcHVsbC80NTU2XG5cdFx0ICogQHNpbmNlIDIuNy4wXG5cdFx0ICovXG5cdFx0Ym91bmRzOiAnZGF0YScsXG5cblx0XHR0aW1lOiB7XG5cdFx0XHRwYXJzZXI6IGZhbHNlLCAvLyBmYWxzZSA9PSBhIHBhdHRlcm4gc3RyaW5nIGZyb20gaHR0cDovL21vbWVudGpzLmNvbS9kb2NzLyMvcGFyc2luZy9zdHJpbmctZm9ybWF0LyBvciBhIGN1c3RvbSBjYWxsYmFjayB0aGF0IGNvbnZlcnRzIGl0cyBhcmd1bWVudCB0byBhIG1vbWVudFxuXHRcdFx0Zm9ybWF0OiBmYWxzZSwgLy8gREVQUkVDQVRFRCBmYWxzZSA9PSBkYXRlIG9iamVjdHMsIG1vbWVudCBvYmplY3QsIGNhbGxiYWNrIG9yIGEgcGF0dGVybiBzdHJpbmcgZnJvbSBodHRwOi8vbW9tZW50anMuY29tL2RvY3MvIy9wYXJzaW5nL3N0cmluZy1mb3JtYXQvXG5cdFx0XHR1bml0OiBmYWxzZSwgLy8gZmFsc2UgPT0gYXV0b21hdGljIG9yIG92ZXJyaWRlIHdpdGggd2VlaywgbW9udGgsIHllYXIsIGV0Yy5cblx0XHRcdHJvdW5kOiBmYWxzZSwgLy8gbm9uZSwgb3Igb3ZlcnJpZGUgd2l0aCB3ZWVrLCBtb250aCwgeWVhciwgZXRjLlxuXHRcdFx0ZGlzcGxheUZvcm1hdDogZmFsc2UsIC8vIERFUFJFQ0FURURcblx0XHRcdGlzb1dlZWtkYXk6IGZhbHNlLCAvLyBvdmVycmlkZSB3ZWVrIHN0YXJ0IGRheSAtIHNlZSBodHRwOi8vbW9tZW50anMuY29tL2RvY3MvIy9nZXQtc2V0L2lzby13ZWVrZGF5L1xuXHRcdFx0bWluVW5pdDogJ21pbGxpc2Vjb25kJyxcblxuXHRcdFx0Ly8gZGVmYXVsdHMgdG8gdW5pdCdzIGNvcnJlc3BvbmRpbmcgdW5pdEZvcm1hdCBiZWxvdyBvciBvdmVycmlkZSB1c2luZyBwYXR0ZXJuIHN0cmluZyBmcm9tIGh0dHA6Ly9tb21lbnRqcy5jb20vZG9jcy8jL2Rpc3BsYXlpbmcvZm9ybWF0L1xuXHRcdFx0ZGlzcGxheUZvcm1hdHM6IHtcblx0XHRcdFx0bWlsbGlzZWNvbmQ6ICdoOm1tOnNzLlNTUyBhJywgLy8gMTE6MjA6MDEuMTIzIEFNLFxuXHRcdFx0XHRzZWNvbmQ6ICdoOm1tOnNzIGEnLCAvLyAxMToyMDowMSBBTVxuXHRcdFx0XHRtaW51dGU6ICdoOm1tIGEnLCAvLyAxMToyMCBBTVxuXHRcdFx0XHRob3VyOiAnaEEnLCAvLyA1UE1cblx0XHRcdFx0ZGF5OiAnTU1NIEQnLCAvLyBTZXAgNFxuXHRcdFx0XHR3ZWVrOiAnbGwnLCAvLyBXZWVrIDQ2LCBvciBtYXliZSBcIltXXVdXIC0gWVlZWVwiID9cblx0XHRcdFx0bW9udGg6ICdNTU0gWVlZWScsIC8vIFNlcHQgMjAxNVxuXHRcdFx0XHRxdWFydGVyOiAnW1FdUSAtIFlZWVknLCAvLyBRM1xuXHRcdFx0XHR5ZWFyOiAnWVlZWScgLy8gMjAxNVxuXHRcdFx0fSxcblx0XHR9LFxuXHRcdHRpY2tzOiB7XG5cdFx0XHRhdXRvU2tpcDogZmFsc2UsXG5cblx0XHRcdC8qKlxuXHRcdFx0ICogVGlja3MgZ2VuZXJhdGlvbiBpbnB1dCB2YWx1ZXM6XG5cdFx0XHQgKiAtICdhdXRvJzogZ2VuZXJhdGVzIFwib3B0aW1hbFwiIHRpY2tzIGJhc2VkIG9uIHNjYWxlIHNpemUgYW5kIHRpbWUgb3B0aW9ucy5cblx0XHRcdCAqIC0gJ2RhdGEnOiBnZW5lcmF0ZXMgdGlja3MgZnJvbSBkYXRhIChpbmNsdWRpbmcgbGFiZWxzIGZyb20gZGF0YSB7dHx4fHl9IG9iamVjdHMpLlxuXHRcdFx0ICogLSAnbGFiZWxzJzogZ2VuZXJhdGVzIHRpY2tzIGZyb20gdXNlciBnaXZlbiBgZGF0YS5sYWJlbHNgIHZhbHVlcyBPTkxZLlxuXHRcdFx0ICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vY2hhcnRqcy9DaGFydC5qcy9wdWxsLzQ1MDdcblx0XHRcdCAqIEBzaW5jZSAyLjcuMFxuXHRcdFx0ICovXG5cdFx0XHRzb3VyY2U6ICdhdXRvJyxcblxuXHRcdFx0bWFqb3I6IHtcblx0XHRcdFx0ZW5hYmxlZDogZmFsc2Vcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cblx0dmFyIFRpbWVTY2FsZSA9IFNjYWxlLmV4dGVuZCh7XG5cdFx0aW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoIW1vbWVudCkge1xuXHRcdFx0XHR0aHJvdyBuZXcgRXJyb3IoJ0NoYXJ0LmpzIC0gTW9tZW50LmpzIGNvdWxkIG5vdCBiZSBmb3VuZCEgWW91IG11c3QgaW5jbHVkZSBpdCBiZWZvcmUgQ2hhcnQuanMgdG8gdXNlIHRoZSB0aW1lIHNjYWxlLiBEb3dubG9hZCBhdCBodHRwczovL21vbWVudGpzLmNvbScpO1xuXHRcdFx0fVxuXG5cdFx0XHR0aGlzLm1lcmdlVGlja3NPcHRpb25zKCk7XG5cblx0XHRcdFNjYWxlLnByb3RvdHlwZS5pbml0aWFsaXplLmNhbGwodGhpcyk7XG5cdFx0fSxcblxuXHRcdHVwZGF0ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIG9wdGlvbnMgPSBtZS5vcHRpb25zO1xuXG5cdFx0XHQvLyBERVBSRUNBVElPTlM6IG91dHB1dCBhIG1lc3NhZ2Ugb25seSBvbmUgdGltZSBwZXIgdXBkYXRlXG5cdFx0XHRpZiAob3B0aW9ucy50aW1lICYmIG9wdGlvbnMudGltZS5mb3JtYXQpIHtcblx0XHRcdFx0Y29uc29sZS53YXJuKCdvcHRpb25zLnRpbWUuZm9ybWF0IGlzIGRlcHJlY2F0ZWQgYW5kIHJlcGxhY2VkIGJ5IG9wdGlvbnMudGltZS5wYXJzZXIuJyk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBTY2FsZS5wcm90b3R5cGUudXBkYXRlLmFwcGx5KG1lLCBhcmd1bWVudHMpO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBBbGxvd3MgZGF0YSB0byBiZSByZWZlcmVuY2VkIHZpYSAndCcgYXR0cmlidXRlXG5cdFx0ICovXG5cdFx0Z2V0UmlnaHRWYWx1ZTogZnVuY3Rpb24ocmF3VmFsdWUpIHtcblx0XHRcdGlmIChyYXdWYWx1ZSAmJiByYXdWYWx1ZS50ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0cmF3VmFsdWUgPSByYXdWYWx1ZS50O1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIFNjYWxlLnByb3RvdHlwZS5nZXRSaWdodFZhbHVlLmNhbGwodGhpcywgcmF3VmFsdWUpO1xuXHRcdH0sXG5cblx0XHRkZXRlcm1pbmVEYXRhTGltaXRzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgY2hhcnQgPSBtZS5jaGFydDtcblx0XHRcdHZhciB0aW1lT3B0cyA9IG1lLm9wdGlvbnMudGltZTtcblx0XHRcdHZhciB1bml0ID0gdGltZU9wdHMudW5pdCB8fCAnZGF5Jztcblx0XHRcdHZhciBtaW4gPSBNQVhfSU5URUdFUjtcblx0XHRcdHZhciBtYXggPSBNSU5fSU5URUdFUjtcblx0XHRcdHZhciB0aW1lc3RhbXBzID0gW107XG5cdFx0XHR2YXIgZGF0YXNldHMgPSBbXTtcblx0XHRcdHZhciBsYWJlbHMgPSBbXTtcblx0XHRcdHZhciBpLCBqLCBpbGVuLCBqbGVuLCBkYXRhLCB0aW1lc3RhbXA7XG5cblx0XHRcdC8vIENvbnZlcnQgbGFiZWxzIHRvIHRpbWVzdGFtcHNcblx0XHRcdGZvciAoaSA9IDAsIGlsZW4gPSBjaGFydC5kYXRhLmxhYmVscy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdFx0bGFiZWxzLnB1c2gocGFyc2UoY2hhcnQuZGF0YS5sYWJlbHNbaV0sIG1lKSk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgZGF0YSB0byB0aW1lc3RhbXBzXG5cdFx0XHRmb3IgKGkgPSAwLCBpbGVuID0gKGNoYXJ0LmRhdGEuZGF0YXNldHMgfHwgW10pLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0XHRpZiAoY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpKSkge1xuXHRcdFx0XHRcdGRhdGEgPSBjaGFydC5kYXRhLmRhdGFzZXRzW2ldLmRhdGE7XG5cblx0XHRcdFx0XHQvLyBMZXQncyBjb25zaWRlciB0aGF0IGFsbCBkYXRhIGhhdmUgdGhlIHNhbWUgZm9ybWF0LlxuXHRcdFx0XHRcdGlmIChoZWxwZXJzLmlzT2JqZWN0KGRhdGFbMF0pKSB7XG5cdFx0XHRcdFx0XHRkYXRhc2V0c1tpXSA9IFtdO1xuXG5cdFx0XHRcdFx0XHRmb3IgKGogPSAwLCBqbGVuID0gZGF0YS5sZW5ndGg7IGogPCBqbGVuOyArK2opIHtcblx0XHRcdFx0XHRcdFx0dGltZXN0YW1wID0gcGFyc2UoZGF0YVtqXSwgbWUpO1xuXHRcdFx0XHRcdFx0XHR0aW1lc3RhbXBzLnB1c2godGltZXN0YW1wKTtcblx0XHRcdFx0XHRcdFx0ZGF0YXNldHNbaV1bal0gPSB0aW1lc3RhbXA7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRpbWVzdGFtcHMucHVzaC5hcHBseSh0aW1lc3RhbXBzLCBsYWJlbHMpO1xuXHRcdFx0XHRcdFx0ZGF0YXNldHNbaV0gPSBsYWJlbHMuc2xpY2UoMCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFzZXRzW2ldID0gW107XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKGxhYmVscy5sZW5ndGgpIHtcblx0XHRcdFx0Ly8gU29ydCBsYWJlbHMgKiphZnRlcioqIGRhdGEgaGF2ZSBiZWVuIGNvbnZlcnRlZFxuXHRcdFx0XHRsYWJlbHMgPSBhcnJheVVuaXF1ZShsYWJlbHMpLnNvcnQoc29ydGVyKTtcblx0XHRcdFx0bWluID0gTWF0aC5taW4obWluLCBsYWJlbHNbMF0pO1xuXHRcdFx0XHRtYXggPSBNYXRoLm1heChtYXgsIGxhYmVsc1tsYWJlbHMubGVuZ3RoIC0gMV0pO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodGltZXN0YW1wcy5sZW5ndGgpIHtcblx0XHRcdFx0dGltZXN0YW1wcyA9IGFycmF5VW5pcXVlKHRpbWVzdGFtcHMpLnNvcnQoc29ydGVyKTtcblx0XHRcdFx0bWluID0gTWF0aC5taW4obWluLCB0aW1lc3RhbXBzWzBdKTtcblx0XHRcdFx0bWF4ID0gTWF0aC5tYXgobWF4LCB0aW1lc3RhbXBzW3RpbWVzdGFtcHMubGVuZ3RoIC0gMV0pO1xuXHRcdFx0fVxuXG5cdFx0XHRtaW4gPSBwYXJzZSh0aW1lT3B0cy5taW4sIG1lKSB8fCBtaW47XG5cdFx0XHRtYXggPSBwYXJzZSh0aW1lT3B0cy5tYXgsIG1lKSB8fCBtYXg7XG5cblx0XHRcdC8vIEluIGNhc2UgdGhlcmUgaXMgbm8gdmFsaWQgbWluL21heCwgc2V0IGxpbWl0cyBiYXNlZCBvbiB1bml0IHRpbWUgb3B0aW9uXG5cdFx0XHRtaW4gPSBtaW4gPT09IE1BWF9JTlRFR0VSID8gK21vbWVudCgpLnN0YXJ0T2YodW5pdCkgOiBtaW47XG5cdFx0XHRtYXggPSBtYXggPT09IE1JTl9JTlRFR0VSID8gK21vbWVudCgpLmVuZE9mKHVuaXQpICsgMSA6IG1heDtcblxuXHRcdFx0Ly8gTWFrZSBzdXJlIHRoYXQgbWF4IGlzIHN0cmljdGx5IGhpZ2hlciB0aGFuIG1pbiAocmVxdWlyZWQgYnkgdGhlIGxvb2t1cCB0YWJsZSlcblx0XHRcdG1lLm1pbiA9IE1hdGgubWluKG1pbiwgbWF4KTtcblx0XHRcdG1lLm1heCA9IE1hdGgubWF4KG1pbiArIDEsIG1heCk7XG5cblx0XHRcdC8vIFBSSVZBVEVcblx0XHRcdG1lLl9ob3Jpem9udGFsID0gbWUuaXNIb3Jpem9udGFsKCk7XG5cdFx0XHRtZS5fdGFibGUgPSBbXTtcblx0XHRcdG1lLl90aW1lc3RhbXBzID0ge1xuXHRcdFx0XHRkYXRhOiB0aW1lc3RhbXBzLFxuXHRcdFx0XHRkYXRhc2V0czogZGF0YXNldHMsXG5cdFx0XHRcdGxhYmVsczogbGFiZWxzXG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRidWlsZFRpY2tzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgbWluID0gbWUubWluO1xuXHRcdFx0dmFyIG1heCA9IG1lLm1heDtcblx0XHRcdHZhciBvcHRpb25zID0gbWUub3B0aW9ucztcblx0XHRcdHZhciB0aW1lT3B0cyA9IG9wdGlvbnMudGltZTtcblx0XHRcdHZhciB0aW1lc3RhbXBzID0gW107XG5cdFx0XHR2YXIgdGlja3MgPSBbXTtcblx0XHRcdHZhciBpLCBpbGVuLCB0aW1lc3RhbXA7XG5cblx0XHRcdHN3aXRjaCAob3B0aW9ucy50aWNrcy5zb3VyY2UpIHtcblx0XHRcdGNhc2UgJ2RhdGEnOlxuXHRcdFx0XHR0aW1lc3RhbXBzID0gbWUuX3RpbWVzdGFtcHMuZGF0YTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHRjYXNlICdsYWJlbHMnOlxuXHRcdFx0XHR0aW1lc3RhbXBzID0gbWUuX3RpbWVzdGFtcHMubGFiZWxzO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdGNhc2UgJ2F1dG8nOlxuXHRcdFx0ZGVmYXVsdDpcblx0XHRcdFx0dGltZXN0YW1wcyA9IGdlbmVyYXRlKG1pbiwgbWF4LCBtZS5nZXRMYWJlbENhcGFjaXR5KG1pbiksIG9wdGlvbnMpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAob3B0aW9ucy5ib3VuZHMgPT09ICd0aWNrcycgJiYgdGltZXN0YW1wcy5sZW5ndGgpIHtcblx0XHRcdFx0bWluID0gdGltZXN0YW1wc1swXTtcblx0XHRcdFx0bWF4ID0gdGltZXN0YW1wc1t0aW1lc3RhbXBzLmxlbmd0aCAtIDFdO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBFbmZvcmNlIGxpbWl0cyB3aXRoIHVzZXIgbWluL21heCBvcHRpb25zXG5cdFx0XHRtaW4gPSBwYXJzZSh0aW1lT3B0cy5taW4sIG1lKSB8fCBtaW47XG5cdFx0XHRtYXggPSBwYXJzZSh0aW1lT3B0cy5tYXgsIG1lKSB8fCBtYXg7XG5cblx0XHRcdC8vIFJlbW92ZSB0aWNrcyBvdXRzaWRlIHRoZSBtaW4vbWF4IHJhbmdlXG5cdFx0XHRmb3IgKGkgPSAwLCBpbGVuID0gdGltZXN0YW1wcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdFx0dGltZXN0YW1wID0gdGltZXN0YW1wc1tpXTtcblx0XHRcdFx0aWYgKHRpbWVzdGFtcCA+PSBtaW4gJiYgdGltZXN0YW1wIDw9IG1heCkge1xuXHRcdFx0XHRcdHRpY2tzLnB1c2godGltZXN0YW1wKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRtZS5taW4gPSBtaW47XG5cdFx0XHRtZS5tYXggPSBtYXg7XG5cblx0XHRcdC8vIFBSSVZBVEVcblx0XHRcdG1lLl91bml0ID0gdGltZU9wdHMudW5pdCB8fCBkZXRlcm1pbmVVbml0Rm9yRm9ybWF0dGluZyh0aWNrcywgdGltZU9wdHMubWluVW5pdCwgbWUubWluLCBtZS5tYXgpO1xuXHRcdFx0bWUuX21ham9yVW5pdCA9IGRldGVybWluZU1ham9yVW5pdChtZS5fdW5pdCk7XG5cdFx0XHRtZS5fdGFibGUgPSBidWlsZExvb2t1cFRhYmxlKG1lLl90aW1lc3RhbXBzLmRhdGEsIG1pbiwgbWF4LCBvcHRpb25zLmRpc3RyaWJ1dGlvbik7XG5cdFx0XHRtZS5fb2Zmc2V0cyA9IGNvbXB1dGVPZmZzZXRzKG1lLl90YWJsZSwgdGlja3MsIG1pbiwgbWF4LCBvcHRpb25zKTtcblx0XHRcdG1lLl9sYWJlbEZvcm1hdCA9IGRldGVybWluZUxhYmVsRm9ybWF0KG1lLl90aW1lc3RhbXBzLmRhdGEsIHRpbWVPcHRzKTtcblxuXHRcdFx0cmV0dXJuIHRpY2tzRnJvbVRpbWVzdGFtcHModGlja3MsIG1lLl9tYWpvclVuaXQpO1xuXHRcdH0sXG5cblx0XHRnZXRMYWJlbEZvckluZGV4OiBmdW5jdGlvbihpbmRleCwgZGF0YXNldEluZGV4KSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIGRhdGEgPSBtZS5jaGFydC5kYXRhO1xuXHRcdFx0dmFyIHRpbWVPcHRzID0gbWUub3B0aW9ucy50aW1lO1xuXHRcdFx0dmFyIGxhYmVsID0gZGF0YS5sYWJlbHMgJiYgaW5kZXggPCBkYXRhLmxhYmVscy5sZW5ndGggPyBkYXRhLmxhYmVsc1tpbmRleF0gOiAnJztcblx0XHRcdHZhciB2YWx1ZSA9IGRhdGEuZGF0YXNldHNbZGF0YXNldEluZGV4XS5kYXRhW2luZGV4XTtcblxuXHRcdFx0aWYgKGhlbHBlcnMuaXNPYmplY3QodmFsdWUpKSB7XG5cdFx0XHRcdGxhYmVsID0gbWUuZ2V0UmlnaHRWYWx1ZSh2YWx1ZSk7XG5cdFx0XHR9XG5cdFx0XHRpZiAodGltZU9wdHMudG9vbHRpcEZvcm1hdCkge1xuXHRcdFx0XHRyZXR1cm4gbW9tZW50aWZ5KGxhYmVsLCB0aW1lT3B0cykuZm9ybWF0KHRpbWVPcHRzLnRvb2x0aXBGb3JtYXQpO1xuXHRcdFx0fVxuXHRcdFx0aWYgKHR5cGVvZiBsYWJlbCA9PT0gJ3N0cmluZycpIHtcblx0XHRcdFx0cmV0dXJuIGxhYmVsO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbW9tZW50aWZ5KGxhYmVsLCB0aW1lT3B0cykuZm9ybWF0KG1lLl9sYWJlbEZvcm1hdCk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEZ1bmN0aW9uIHRvIGZvcm1hdCBhbiBpbmRpdmlkdWFsIHRpY2sgbWFya1xuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0dGlja0Zvcm1hdEZ1bmN0aW9uOiBmdW5jdGlvbih0aWNrLCBpbmRleCwgdGlja3MsIGZvcm1hdE92ZXJyaWRlKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIG9wdGlvbnMgPSBtZS5vcHRpb25zO1xuXHRcdFx0dmFyIHRpbWUgPSB0aWNrLnZhbHVlT2YoKTtcblx0XHRcdHZhciBmb3JtYXRzID0gb3B0aW9ucy50aW1lLmRpc3BsYXlGb3JtYXRzO1xuXHRcdFx0dmFyIG1pbm9yRm9ybWF0ID0gZm9ybWF0c1ttZS5fdW5pdF07XG5cdFx0XHR2YXIgbWFqb3JVbml0ID0gbWUuX21ham9yVW5pdDtcblx0XHRcdHZhciBtYWpvckZvcm1hdCA9IGZvcm1hdHNbbWFqb3JVbml0XTtcblx0XHRcdHZhciBtYWpvclRpbWUgPSB0aWNrLmNsb25lKCkuc3RhcnRPZihtYWpvclVuaXQpLnZhbHVlT2YoKTtcblx0XHRcdHZhciBtYWpvclRpY2tPcHRzID0gb3B0aW9ucy50aWNrcy5tYWpvcjtcblx0XHRcdHZhciBtYWpvciA9IG1ham9yVGlja09wdHMuZW5hYmxlZCAmJiBtYWpvclVuaXQgJiYgbWFqb3JGb3JtYXQgJiYgdGltZSA9PT0gbWFqb3JUaW1lO1xuXHRcdFx0dmFyIGxhYmVsID0gdGljay5mb3JtYXQoZm9ybWF0T3ZlcnJpZGUgPyBmb3JtYXRPdmVycmlkZSA6IG1ham9yID8gbWFqb3JGb3JtYXQgOiBtaW5vckZvcm1hdCk7XG5cdFx0XHR2YXIgdGlja09wdHMgPSBtYWpvciA/IG1ham9yVGlja09wdHMgOiBvcHRpb25zLnRpY2tzLm1pbm9yO1xuXHRcdFx0dmFyIGZvcm1hdHRlciA9IGhlbHBlcnMudmFsdWVPckRlZmF1bHQodGlja09wdHMuY2FsbGJhY2ssIHRpY2tPcHRzLnVzZXJDYWxsYmFjayk7XG5cblx0XHRcdHJldHVybiBmb3JtYXR0ZXIgPyBmb3JtYXR0ZXIobGFiZWwsIGluZGV4LCB0aWNrcykgOiBsYWJlbDtcblx0XHR9LFxuXG5cdFx0Y29udmVydFRpY2tzVG9MYWJlbHM6IGZ1bmN0aW9uKHRpY2tzKSB7XG5cdFx0XHR2YXIgbGFiZWxzID0gW107XG5cdFx0XHR2YXIgaSwgaWxlbjtcblxuXHRcdFx0Zm9yIChpID0gMCwgaWxlbiA9IHRpY2tzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0XHRsYWJlbHMucHVzaCh0aGlzLnRpY2tGb3JtYXRGdW5jdGlvbihtb21lbnQodGlja3NbaV0udmFsdWUpLCBpLCB0aWNrcykpO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gbGFiZWxzO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdGdldFBpeGVsRm9yT2Zmc2V0OiBmdW5jdGlvbih0aW1lKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIHNpemUgPSBtZS5faG9yaXpvbnRhbCA/IG1lLndpZHRoIDogbWUuaGVpZ2h0O1xuXHRcdFx0dmFyIHN0YXJ0ID0gbWUuX2hvcml6b250YWwgPyBtZS5sZWZ0IDogbWUudG9wO1xuXHRcdFx0dmFyIHBvcyA9IGludGVycG9sYXRlKG1lLl90YWJsZSwgJ3RpbWUnLCB0aW1lLCAncG9zJyk7XG5cblx0XHRcdHJldHVybiBzdGFydCArIHNpemUgKiAobWUuX29mZnNldHMubGVmdCArIHBvcykgLyAobWUuX29mZnNldHMubGVmdCArIDEgKyBtZS5fb2Zmc2V0cy5yaWdodCk7XG5cdFx0fSxcblxuXHRcdGdldFBpeGVsRm9yVmFsdWU6IGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgZGF0YXNldEluZGV4KSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIHRpbWUgPSBudWxsO1xuXG5cdFx0XHRpZiAoaW5kZXggIT09IHVuZGVmaW5lZCAmJiBkYXRhc2V0SW5kZXggIT09IHVuZGVmaW5lZCkge1xuXHRcdFx0XHR0aW1lID0gbWUuX3RpbWVzdGFtcHMuZGF0YXNldHNbZGF0YXNldEluZGV4XVtpbmRleF07XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0aW1lID09PSBudWxsKSB7XG5cdFx0XHRcdHRpbWUgPSBwYXJzZSh2YWx1ZSwgbWUpO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAodGltZSAhPT0gbnVsbCkge1xuXHRcdFx0XHRyZXR1cm4gbWUuZ2V0UGl4ZWxGb3JPZmZzZXQodGltZSk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGdldFBpeGVsRm9yVGljazogZnVuY3Rpb24oaW5kZXgpIHtcblx0XHRcdHZhciB0aWNrcyA9IHRoaXMuZ2V0VGlja3MoKTtcblx0XHRcdHJldHVybiBpbmRleCA+PSAwICYmIGluZGV4IDwgdGlja3MubGVuZ3RoID9cblx0XHRcdFx0dGhpcy5nZXRQaXhlbEZvck9mZnNldCh0aWNrc1tpbmRleF0udmFsdWUpIDpcblx0XHRcdFx0bnVsbDtcblx0XHR9LFxuXG5cdFx0Z2V0VmFsdWVGb3JQaXhlbDogZnVuY3Rpb24ocGl4ZWwpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgc2l6ZSA9IG1lLl9ob3Jpem9udGFsID8gbWUud2lkdGggOiBtZS5oZWlnaHQ7XG5cdFx0XHR2YXIgc3RhcnQgPSBtZS5faG9yaXpvbnRhbCA/IG1lLmxlZnQgOiBtZS50b3A7XG5cdFx0XHR2YXIgcG9zID0gKHNpemUgPyAocGl4ZWwgLSBzdGFydCkgLyBzaXplIDogMCkgKiAobWUuX29mZnNldHMubGVmdCArIDEgKyBtZS5fb2Zmc2V0cy5sZWZ0KSAtIG1lLl9vZmZzZXRzLnJpZ2h0O1xuXHRcdFx0dmFyIHRpbWUgPSBpbnRlcnBvbGF0ZShtZS5fdGFibGUsICdwb3MnLCBwb3MsICd0aW1lJyk7XG5cblx0XHRcdHJldHVybiBtb21lbnQodGltZSk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIENydWRlIGFwcHJveGltYXRpb24gb2Ygd2hhdCB0aGUgbGFiZWwgd2lkdGggbWlnaHQgYmVcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdGdldExhYmVsV2lkdGg6IGZ1bmN0aW9uKGxhYmVsKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIHRpY2tzT3B0cyA9IG1lLm9wdGlvbnMudGlja3M7XG5cdFx0XHR2YXIgdGlja0xhYmVsV2lkdGggPSBtZS5jdHgubWVhc3VyZVRleHQobGFiZWwpLndpZHRoO1xuXHRcdFx0dmFyIGFuZ2xlID0gaGVscGVycy50b1JhZGlhbnModGlja3NPcHRzLm1heFJvdGF0aW9uKTtcblx0XHRcdHZhciBjb3NSb3RhdGlvbiA9IE1hdGguY29zKGFuZ2xlKTtcblx0XHRcdHZhciBzaW5Sb3RhdGlvbiA9IE1hdGguc2luKGFuZ2xlKTtcblx0XHRcdHZhciB0aWNrRm9udFNpemUgPSBoZWxwZXJzLnZhbHVlT3JEZWZhdWx0KHRpY2tzT3B0cy5mb250U2l6ZSwgZGVmYXVsdHMuZ2xvYmFsLmRlZmF1bHRGb250U2l6ZSk7XG5cblx0XHRcdHJldHVybiAodGlja0xhYmVsV2lkdGggKiBjb3NSb3RhdGlvbikgKyAodGlja0ZvbnRTaXplICogc2luUm90YXRpb24pO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdGdldExhYmVsQ2FwYWNpdHk6IGZ1bmN0aW9uKGV4YW1wbGVUaW1lKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXG5cdFx0XHR2YXIgZm9ybWF0T3ZlcnJpZGUgPSBtZS5vcHRpb25zLnRpbWUuZGlzcGxheUZvcm1hdHMubWlsbGlzZWNvbmQ7XHQvLyBQaWNrIHRoZSBsb25nZXN0IGZvcm1hdCBmb3IgZ3Vlc3RpbWF0aW9uXG5cblx0XHRcdHZhciBleGFtcGxlTGFiZWwgPSBtZS50aWNrRm9ybWF0RnVuY3Rpb24obW9tZW50KGV4YW1wbGVUaW1lKSwgMCwgW10sIGZvcm1hdE92ZXJyaWRlKTtcblx0XHRcdHZhciB0aWNrTGFiZWxXaWR0aCA9IG1lLmdldExhYmVsV2lkdGgoZXhhbXBsZUxhYmVsKTtcblx0XHRcdHZhciBpbm5lcldpZHRoID0gbWUuaXNIb3Jpem9udGFsKCkgPyBtZS53aWR0aCA6IG1lLmhlaWdodDtcblxuXHRcdFx0dmFyIGNhcGFjaXR5ID0gTWF0aC5mbG9vcihpbm5lcldpZHRoIC8gdGlja0xhYmVsV2lkdGgpO1xuXHRcdFx0cmV0dXJuIGNhcGFjaXR5ID4gMCA/IGNhcGFjaXR5IDogMTtcblx0XHR9XG5cdH0pO1xuXG5cdHNjYWxlU2VydmljZS5yZWdpc3RlclNjYWxlVHlwZSgndGltZScsIFRpbWVTY2FsZSwgZGVmYXVsdENvbmZpZyk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9jb3JlL2NvcmUuZGVmYXVsdHMnKTtcbnZhciBlbGVtZW50cyA9IHJlcXVpcmUoJy4uL2VsZW1lbnRzL2luZGV4Jyk7XG52YXIgaGVscGVycyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaW5kZXgnKTtcblxuZGVmYXVsdHMuX3NldCgnYmFyJywge1xuXHRob3Zlcjoge1xuXHRcdG1vZGU6ICdsYWJlbCdcblx0fSxcblxuXHRzY2FsZXM6IHtcblx0XHR4QXhlczogW3tcblx0XHRcdHR5cGU6ICdjYXRlZ29yeScsXG5cblx0XHRcdC8vIFNwZWNpZmljIHRvIEJhciBDb250cm9sbGVyXG5cdFx0XHRjYXRlZ29yeVBlcmNlbnRhZ2U6IDAuOCxcblx0XHRcdGJhclBlcmNlbnRhZ2U6IDAuOSxcblxuXHRcdFx0Ly8gb2Zmc2V0IHNldHRpbmdzXG5cdFx0XHRvZmZzZXQ6IHRydWUsXG5cblx0XHRcdC8vIGdyaWQgbGluZSBzZXR0aW5nc1xuXHRcdFx0Z3JpZExpbmVzOiB7XG5cdFx0XHRcdG9mZnNldEdyaWRMaW5lczogdHJ1ZVxuXHRcdFx0fVxuXHRcdH1dLFxuXG5cdFx0eUF4ZXM6IFt7XG5cdFx0XHR0eXBlOiAnbGluZWFyJ1xuXHRcdH1dXG5cdH1cbn0pO1xuXG5kZWZhdWx0cy5fc2V0KCdob3Jpem9udGFsQmFyJywge1xuXHRob3Zlcjoge1xuXHRcdG1vZGU6ICdpbmRleCcsXG5cdFx0YXhpczogJ3knXG5cdH0sXG5cblx0c2NhbGVzOiB7XG5cdFx0eEF4ZXM6IFt7XG5cdFx0XHR0eXBlOiAnbGluZWFyJyxcblx0XHRcdHBvc2l0aW9uOiAnYm90dG9tJ1xuXHRcdH1dLFxuXG5cdFx0eUF4ZXM6IFt7XG5cdFx0XHRwb3NpdGlvbjogJ2xlZnQnLFxuXHRcdFx0dHlwZTogJ2NhdGVnb3J5JyxcblxuXHRcdFx0Ly8gU3BlY2lmaWMgdG8gSG9yaXpvbnRhbCBCYXIgQ29udHJvbGxlclxuXHRcdFx0Y2F0ZWdvcnlQZXJjZW50YWdlOiAwLjgsXG5cdFx0XHRiYXJQZXJjZW50YWdlOiAwLjksXG5cblx0XHRcdC8vIG9mZnNldCBzZXR0aW5nc1xuXHRcdFx0b2Zmc2V0OiB0cnVlLFxuXG5cdFx0XHQvLyBncmlkIGxpbmUgc2V0dGluZ3Ncblx0XHRcdGdyaWRMaW5lczoge1xuXHRcdFx0XHRvZmZzZXRHcmlkTGluZXM6IHRydWVcblx0XHRcdH1cblx0XHR9XVxuXHR9LFxuXG5cdGVsZW1lbnRzOiB7XG5cdFx0cmVjdGFuZ2xlOiB7XG5cdFx0XHRib3JkZXJTa2lwcGVkOiAnbGVmdCdcblx0XHR9XG5cdH0sXG5cblx0dG9vbHRpcHM6IHtcblx0XHRjYWxsYmFja3M6IHtcblx0XHRcdHRpdGxlOiBmdW5jdGlvbihpdGVtLCBkYXRhKSB7XG5cdFx0XHRcdC8vIFBpY2sgZmlyc3QgeExhYmVsIGZvciBub3dcblx0XHRcdFx0dmFyIHRpdGxlID0gJyc7XG5cblx0XHRcdFx0aWYgKGl0ZW0ubGVuZ3RoID4gMCkge1xuXHRcdFx0XHRcdGlmIChpdGVtWzBdLnlMYWJlbCkge1xuXHRcdFx0XHRcdFx0dGl0bGUgPSBpdGVtWzBdLnlMYWJlbDtcblx0XHRcdFx0XHR9IGVsc2UgaWYgKGRhdGEubGFiZWxzLmxlbmd0aCA+IDAgJiYgaXRlbVswXS5pbmRleCA8IGRhdGEubGFiZWxzLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0dGl0bGUgPSBkYXRhLmxhYmVsc1tpdGVtWzBdLmluZGV4XTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdGl0bGU7XG5cdFx0XHR9LFxuXG5cdFx0XHRsYWJlbDogZnVuY3Rpb24oaXRlbSwgZGF0YSkge1xuXHRcdFx0XHR2YXIgZGF0YXNldExhYmVsID0gZGF0YS5kYXRhc2V0c1tpdGVtLmRhdGFzZXRJbmRleF0ubGFiZWwgfHwgJyc7XG5cdFx0XHRcdHJldHVybiBkYXRhc2V0TGFiZWwgKyAnOiAnICsgaXRlbS54TGFiZWw7XG5cdFx0XHR9XG5cdFx0fSxcblx0XHRtb2RlOiAnaW5kZXgnLFxuXHRcdGF4aXM6ICd5J1xuXHR9XG59KTtcblxuLyoqXG4gKiBDb21wdXRlcyB0aGUgXCJvcHRpbWFsXCIgc2FtcGxlIHNpemUgdG8gbWFpbnRhaW4gYmFycyBlcXVhbGx5IHNpemVkIHdoaWxlIHByZXZlbnRpbmcgb3ZlcmxhcC5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVNaW5TYW1wbGVTaXplKHNjYWxlLCBwaXhlbHMpIHtcblx0dmFyIG1pbiA9IHNjYWxlLmlzSG9yaXpvbnRhbCgpID8gc2NhbGUud2lkdGggOiBzY2FsZS5oZWlnaHQ7XG5cdHZhciB0aWNrcyA9IHNjYWxlLmdldFRpY2tzKCk7XG5cdHZhciBwcmV2LCBjdXJyLCBpLCBpbGVuO1xuXG5cdGZvciAoaSA9IDEsIGlsZW4gPSBwaXhlbHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0bWluID0gTWF0aC5taW4obWluLCBwaXhlbHNbaV0gLSBwaXhlbHNbaSAtIDFdKTtcblx0fVxuXG5cdGZvciAoaSA9IDAsIGlsZW4gPSB0aWNrcy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRjdXJyID0gc2NhbGUuZ2V0UGl4ZWxGb3JUaWNrKGkpO1xuXHRcdG1pbiA9IGkgPiAwID8gTWF0aC5taW4obWluLCBjdXJyIC0gcHJldikgOiBtaW47XG5cdFx0cHJldiA9IGN1cnI7XG5cdH1cblxuXHRyZXR1cm4gbWluO1xufVxuXG4vKipcbiAqIENvbXB1dGVzIGFuIFwiaWRlYWxcIiBjYXRlZ29yeSBiYXNlZCBvbiB0aGUgYWJzb2x1dGUgYmFyIHRoaWNrbmVzcyBvciwgaWYgdW5kZWZpbmVkIG9yIG51bGwsXG4gKiB1c2VzIHRoZSBzbWFsbGVzdCBpbnRlcnZhbCAoc2VlIGNvbXB1dGVNaW5TYW1wbGVTaXplKSB0aGF0IHByZXZlbnRzIGJhciBvdmVybGFwcGluZy4gVGhpc1xuICogbW9kZSBjdXJyZW50bHkgYWx3YXlzIGdlbmVyYXRlcyBiYXJzIGVxdWFsbHkgc2l6ZWQgKHVudGlsIHdlIGludHJvZHVjZSBzY3JpcHRhYmxlIG9wdGlvbnM/KS5cbiAqIEBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIGNvbXB1dGVGaXRDYXRlZ29yeVRyYWl0cyhpbmRleCwgcnVsZXIsIG9wdGlvbnMpIHtcblx0dmFyIHRoaWNrbmVzcyA9IG9wdGlvbnMuYmFyVGhpY2tuZXNzO1xuXHR2YXIgY291bnQgPSBydWxlci5zdGFja0NvdW50O1xuXHR2YXIgY3VyciA9IHJ1bGVyLnBpeGVsc1tpbmRleF07XG5cdHZhciBzaXplLCByYXRpbztcblxuXHRpZiAoaGVscGVycy5pc051bGxPclVuZGVmKHRoaWNrbmVzcykpIHtcblx0XHRzaXplID0gcnVsZXIubWluICogb3B0aW9ucy5jYXRlZ29yeVBlcmNlbnRhZ2U7XG5cdFx0cmF0aW8gPSBvcHRpb25zLmJhclBlcmNlbnRhZ2U7XG5cdH0gZWxzZSB7XG5cdFx0Ly8gV2hlbiBiYXIgdGhpY2tuZXNzIGlzIGVuZm9yY2VkLCBjYXRlZ29yeSBhbmQgYmFyIHBlcmNlbnRhZ2VzIGFyZSBpZ25vcmVkLlxuXHRcdC8vIE5vdGUoU0IpOiB3ZSBjb3VsZCBhZGQgc3VwcG9ydCBmb3IgcmVsYXRpdmUgYmFyIHRoaWNrbmVzcyAoZS5nLiBiYXJUaGlja25lc3M6ICc1MCUnKVxuXHRcdC8vIGFuZCBkZXByZWNhdGUgYmFyUGVyY2VudGFnZSBzaW5jZSB0aGlzIHZhbHVlIGlzIGlnbm9yZWQgd2hlbiB0aGlja25lc3MgaXMgYWJzb2x1dGUuXG5cdFx0c2l6ZSA9IHRoaWNrbmVzcyAqIGNvdW50O1xuXHRcdHJhdGlvID0gMTtcblx0fVxuXG5cdHJldHVybiB7XG5cdFx0Y2h1bms6IHNpemUgLyBjb3VudCxcblx0XHRyYXRpbzogcmF0aW8sXG5cdFx0c3RhcnQ6IGN1cnIgLSAoc2l6ZSAvIDIpXG5cdH07XG59XG5cbi8qKlxuICogQ29tcHV0ZXMgYW4gXCJvcHRpbWFsXCIgY2F0ZWdvcnkgdGhhdCBnbG9iYWxseSBhcnJhbmdlcyBiYXJzIHNpZGUgYnkgc2lkZSAobm8gZ2FwIHdoZW5cbiAqIHBlcmNlbnRhZ2Ugb3B0aW9ucyBhcmUgMSksIGJhc2VkIG9uIHRoZSBwcmV2aW91cyBhbmQgZm9sbG93aW5nIGNhdGVnb3JpZXMuIFRoaXMgbW9kZVxuICogZ2VuZXJhdGVzIGJhcnMgd2l0aCBkaWZmZXJlbnQgd2lkdGhzIHdoZW4gZGF0YSBhcmUgbm90IGV2ZW5seSBzcGFjZWQuXG4gKiBAcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBjb21wdXRlRmxleENhdGVnb3J5VHJhaXRzKGluZGV4LCBydWxlciwgb3B0aW9ucykge1xuXHR2YXIgcGl4ZWxzID0gcnVsZXIucGl4ZWxzO1xuXHR2YXIgY3VyciA9IHBpeGVsc1tpbmRleF07XG5cdHZhciBwcmV2ID0gaW5kZXggPiAwID8gcGl4ZWxzW2luZGV4IC0gMV0gOiBudWxsO1xuXHR2YXIgbmV4dCA9IGluZGV4IDwgcGl4ZWxzLmxlbmd0aCAtIDEgPyBwaXhlbHNbaW5kZXggKyAxXSA6IG51bGw7XG5cdHZhciBwZXJjZW50ID0gb3B0aW9ucy5jYXRlZ29yeVBlcmNlbnRhZ2U7XG5cdHZhciBzdGFydCwgc2l6ZTtcblxuXHRpZiAocHJldiA9PT0gbnVsbCkge1xuXHRcdC8vIGZpcnN0IGRhdGE6IGl0cyBzaXplIGlzIGRvdWJsZSBiYXNlZCBvbiB0aGUgbmV4dCBwb2ludCBvcixcblx0XHQvLyBpZiBpdCdzIGFsc28gdGhlIGxhc3QgZGF0YSwgd2UgdXNlIHRoZSBzY2FsZSBlbmQgZXh0cmVtaXR5LlxuXHRcdHByZXYgPSBjdXJyIC0gKG5leHQgPT09IG51bGwgPyBydWxlci5lbmQgLSBjdXJyIDogbmV4dCAtIGN1cnIpO1xuXHR9XG5cblx0aWYgKG5leHQgPT09IG51bGwpIHtcblx0XHQvLyBsYXN0IGRhdGE6IGl0cyBzaXplIGlzIGFsc28gZG91YmxlIGJhc2VkIG9uIHRoZSBwcmV2aW91cyBwb2ludC5cblx0XHRuZXh0ID0gY3VyciArIGN1cnIgLSBwcmV2O1xuXHR9XG5cblx0c3RhcnQgPSBjdXJyIC0gKChjdXJyIC0gcHJldikgLyAyKSAqIHBlcmNlbnQ7XG5cdHNpemUgPSAoKG5leHQgLSBwcmV2KSAvIDIpICogcGVyY2VudDtcblxuXHRyZXR1cm4ge1xuXHRcdGNodW5rOiBzaXplIC8gcnVsZXIuc3RhY2tDb3VudCxcblx0XHRyYXRpbzogb3B0aW9ucy5iYXJQZXJjZW50YWdlLFxuXHRcdHN0YXJ0OiBzdGFydFxuXHR9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKENoYXJ0KSB7XG5cblx0Q2hhcnQuY29udHJvbGxlcnMuYmFyID0gQ2hhcnQuRGF0YXNldENvbnRyb2xsZXIuZXh0ZW5kKHtcblxuXHRcdGRhdGFFbGVtZW50VHlwZTogZWxlbWVudHMuUmVjdGFuZ2xlLFxuXG5cdFx0aW5pdGlhbGl6ZTogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIG1ldGE7XG5cblx0XHRcdENoYXJ0LkRhdGFzZXRDb250cm9sbGVyLnByb3RvdHlwZS5pbml0aWFsaXplLmFwcGx5KG1lLCBhcmd1bWVudHMpO1xuXG5cdFx0XHRtZXRhID0gbWUuZ2V0TWV0YSgpO1xuXHRcdFx0bWV0YS5zdGFjayA9IG1lLmdldERhdGFzZXQoKS5zdGFjaztcblx0XHRcdG1ldGEuYmFyID0gdHJ1ZTtcblx0XHR9LFxuXG5cdFx0dXBkYXRlOiBmdW5jdGlvbihyZXNldCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciByZWN0cyA9IG1lLmdldE1ldGEoKS5kYXRhO1xuXHRcdFx0dmFyIGksIGlsZW47XG5cblx0XHRcdG1lLl9ydWxlciA9IG1lLmdldFJ1bGVyKCk7XG5cblx0XHRcdGZvciAoaSA9IDAsIGlsZW4gPSByZWN0cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdFx0bWUudXBkYXRlRWxlbWVudChyZWN0c1tpXSwgaSwgcmVzZXQpO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHR1cGRhdGVFbGVtZW50OiBmdW5jdGlvbihyZWN0YW5nbGUsIGluZGV4LCByZXNldCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdFx0dmFyIG1ldGEgPSBtZS5nZXRNZXRhKCk7XG5cdFx0XHR2YXIgZGF0YXNldCA9IG1lLmdldERhdGFzZXQoKTtcblx0XHRcdHZhciBjdXN0b20gPSByZWN0YW5nbGUuY3VzdG9tIHx8IHt9O1xuXHRcdFx0dmFyIHJlY3RhbmdsZU9wdGlvbnMgPSBjaGFydC5vcHRpb25zLmVsZW1lbnRzLnJlY3RhbmdsZTtcblxuXHRcdFx0cmVjdGFuZ2xlLl94U2NhbGUgPSBtZS5nZXRTY2FsZUZvcklkKG1ldGEueEF4aXNJRCk7XG5cdFx0XHRyZWN0YW5nbGUuX3lTY2FsZSA9IG1lLmdldFNjYWxlRm9ySWQobWV0YS55QXhpc0lEKTtcblx0XHRcdHJlY3RhbmdsZS5fZGF0YXNldEluZGV4ID0gbWUuaW5kZXg7XG5cdFx0XHRyZWN0YW5nbGUuX2luZGV4ID0gaW5kZXg7XG5cblx0XHRcdHJlY3RhbmdsZS5fbW9kZWwgPSB7XG5cdFx0XHRcdGRhdGFzZXRMYWJlbDogZGF0YXNldC5sYWJlbCxcblx0XHRcdFx0bGFiZWw6IGNoYXJ0LmRhdGEubGFiZWxzW2luZGV4XSxcblx0XHRcdFx0Ym9yZGVyU2tpcHBlZDogY3VzdG9tLmJvcmRlclNraXBwZWQgPyBjdXN0b20uYm9yZGVyU2tpcHBlZCA6IHJlY3RhbmdsZU9wdGlvbnMuYm9yZGVyU2tpcHBlZCxcblx0XHRcdFx0YmFja2dyb3VuZENvbG9yOiBjdXN0b20uYmFja2dyb3VuZENvbG9yID8gY3VzdG9tLmJhY2tncm91bmRDb2xvciA6IGhlbHBlcnMudmFsdWVBdEluZGV4T3JEZWZhdWx0KGRhdGFzZXQuYmFja2dyb3VuZENvbG9yLCBpbmRleCwgcmVjdGFuZ2xlT3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IpLFxuXHRcdFx0XHRib3JkZXJDb2xvcjogY3VzdG9tLmJvcmRlckNvbG9yID8gY3VzdG9tLmJvcmRlckNvbG9yIDogaGVscGVycy52YWx1ZUF0SW5kZXhPckRlZmF1bHQoZGF0YXNldC5ib3JkZXJDb2xvciwgaW5kZXgsIHJlY3RhbmdsZU9wdGlvbnMuYm9yZGVyQ29sb3IpLFxuXHRcdFx0XHRib3JkZXJXaWR0aDogY3VzdG9tLmJvcmRlcldpZHRoID8gY3VzdG9tLmJvcmRlcldpZHRoIDogaGVscGVycy52YWx1ZUF0SW5kZXhPckRlZmF1bHQoZGF0YXNldC5ib3JkZXJXaWR0aCwgaW5kZXgsIHJlY3RhbmdsZU9wdGlvbnMuYm9yZGVyV2lkdGgpXG5cdFx0XHR9O1xuXG5cdFx0XHRtZS51cGRhdGVFbGVtZW50R2VvbWV0cnkocmVjdGFuZ2xlLCBpbmRleCwgcmVzZXQpO1xuXG5cdFx0XHRyZWN0YW5nbGUucGl2b3QoKTtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHR1cGRhdGVFbGVtZW50R2VvbWV0cnk6IGZ1bmN0aW9uKHJlY3RhbmdsZSwgaW5kZXgsIHJlc2V0KSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIG1vZGVsID0gcmVjdGFuZ2xlLl9tb2RlbDtcblx0XHRcdHZhciB2c2NhbGUgPSBtZS5nZXRWYWx1ZVNjYWxlKCk7XG5cdFx0XHR2YXIgYmFzZSA9IHZzY2FsZS5nZXRCYXNlUGl4ZWwoKTtcblx0XHRcdHZhciBob3Jpem9udGFsID0gdnNjYWxlLmlzSG9yaXpvbnRhbCgpO1xuXHRcdFx0dmFyIHJ1bGVyID0gbWUuX3J1bGVyIHx8IG1lLmdldFJ1bGVyKCk7XG5cdFx0XHR2YXIgdnBpeGVscyA9IG1lLmNhbGN1bGF0ZUJhclZhbHVlUGl4ZWxzKG1lLmluZGV4LCBpbmRleCk7XG5cdFx0XHR2YXIgaXBpeGVscyA9IG1lLmNhbGN1bGF0ZUJhckluZGV4UGl4ZWxzKG1lLmluZGV4LCBpbmRleCwgcnVsZXIpO1xuXG5cdFx0XHRtb2RlbC5ob3Jpem9udGFsID0gaG9yaXpvbnRhbDtcblx0XHRcdG1vZGVsLmJhc2UgPSByZXNldCA/IGJhc2UgOiB2cGl4ZWxzLmJhc2U7XG5cdFx0XHRtb2RlbC54ID0gaG9yaXpvbnRhbCA/IHJlc2V0ID8gYmFzZSA6IHZwaXhlbHMuaGVhZCA6IGlwaXhlbHMuY2VudGVyO1xuXHRcdFx0bW9kZWwueSA9IGhvcml6b250YWwgPyBpcGl4ZWxzLmNlbnRlciA6IHJlc2V0ID8gYmFzZSA6IHZwaXhlbHMuaGVhZDtcblx0XHRcdG1vZGVsLmhlaWdodCA9IGhvcml6b250YWwgPyBpcGl4ZWxzLnNpemUgOiB1bmRlZmluZWQ7XG5cdFx0XHRtb2RlbC53aWR0aCA9IGhvcml6b250YWwgPyB1bmRlZmluZWQgOiBpcGl4ZWxzLnNpemU7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0Z2V0VmFsdWVTY2FsZUlkOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzLmdldE1ldGEoKS55QXhpc0lEO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdGdldEluZGV4U2NhbGVJZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5nZXRNZXRhKCkueEF4aXNJRDtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHRnZXRWYWx1ZVNjYWxlOiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzLmdldFNjYWxlRm9ySWQodGhpcy5nZXRWYWx1ZVNjYWxlSWQoKSk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0Z2V0SW5kZXhTY2FsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5nZXRTY2FsZUZvcklkKHRoaXMuZ2V0SW5kZXhTY2FsZUlkKCkpO1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBSZXR1cm5zIHRoZSBzdGFja3MgYmFzZWQgb24gZ3JvdXBzIGFuZCBiYXIgdmlzaWJpbGl0eS5cblx0XHQgKiBAcGFyYW0ge051bWJlcn0gW2xhc3RdIC0gVGhlIGRhdGFzZXQgaW5kZXhcblx0XHQgKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBzdGFjayBsaXN0XG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHRfZ2V0U3RhY2tzOiBmdW5jdGlvbihsYXN0KSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIGNoYXJ0ID0gbWUuY2hhcnQ7XG5cdFx0XHR2YXIgc2NhbGUgPSBtZS5nZXRJbmRleFNjYWxlKCk7XG5cdFx0XHR2YXIgc3RhY2tlZCA9IHNjYWxlLm9wdGlvbnMuc3RhY2tlZDtcblx0XHRcdHZhciBpbGVuID0gbGFzdCA9PT0gdW5kZWZpbmVkID8gY2hhcnQuZGF0YS5kYXRhc2V0cy5sZW5ndGggOiBsYXN0ICsgMTtcblx0XHRcdHZhciBzdGFja3MgPSBbXTtcblx0XHRcdHZhciBpLCBtZXRhO1xuXG5cdFx0XHRmb3IgKGkgPSAwOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRcdG1ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YShpKTtcblx0XHRcdFx0aWYgKG1ldGEuYmFyICYmIGNoYXJ0LmlzRGF0YXNldFZpc2libGUoaSkgJiZcblx0XHRcdFx0XHQoc3RhY2tlZCA9PT0gZmFsc2UgfHxcblx0XHRcdFx0XHQoc3RhY2tlZCA9PT0gdHJ1ZSAmJiBzdGFja3MuaW5kZXhPZihtZXRhLnN0YWNrKSA9PT0gLTEpIHx8XG5cdFx0XHRcdFx0KHN0YWNrZWQgPT09IHVuZGVmaW5lZCAmJiAobWV0YS5zdGFjayA9PT0gdW5kZWZpbmVkIHx8IHN0YWNrcy5pbmRleE9mKG1ldGEuc3RhY2spID09PSAtMSkpKSkge1xuXHRcdFx0XHRcdHN0YWNrcy5wdXNoKG1ldGEuc3RhY2spO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzdGFja3M7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJldHVybnMgdGhlIGVmZmVjdGl2ZSBudW1iZXIgb2Ygc3RhY2tzIGJhc2VkIG9uIGdyb3VwcyBhbmQgYmFyIHZpc2liaWxpdHkuXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHRnZXRTdGFja0NvdW50OiBmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiB0aGlzLl9nZXRTdGFja3MoKS5sZW5ndGg7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIFJldHVybnMgdGhlIHN0YWNrIGluZGV4IGZvciB0aGUgZ2l2ZW4gZGF0YXNldCBiYXNlZCBvbiBncm91cHMgYW5kIGJhciB2aXNpYmlsaXR5LlxuXHRcdCAqIEBwYXJhbSB7TnVtYmVyfSBbZGF0YXNldEluZGV4XSAtIFRoZSBkYXRhc2V0IGluZGV4XG5cdFx0ICogQHBhcmFtIHtTdHJpbmd9IFtuYW1lXSAtIFRoZSBzdGFjayBuYW1lIHRvIGZpbmRcblx0XHQgKiBAcmV0dXJucyB7TnVtYmVyfSBUaGUgc3RhY2sgaW5kZXhcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdGdldFN0YWNrSW5kZXg6IGZ1bmN0aW9uKGRhdGFzZXRJbmRleCwgbmFtZSkge1xuXHRcdFx0dmFyIHN0YWNrcyA9IHRoaXMuX2dldFN0YWNrcyhkYXRhc2V0SW5kZXgpO1xuXHRcdFx0dmFyIGluZGV4ID0gKG5hbWUgIT09IHVuZGVmaW5lZClcblx0XHRcdFx0PyBzdGFja3MuaW5kZXhPZihuYW1lKVxuXHRcdFx0XHQ6IC0xOyAvLyBpbmRleE9mIHJldHVybnMgLTEgaWYgZWxlbWVudCBpcyBub3QgcHJlc2VudFxuXG5cdFx0XHRyZXR1cm4gKGluZGV4ID09PSAtMSlcblx0XHRcdFx0PyBzdGFja3MubGVuZ3RoIC0gMVxuXHRcdFx0XHQ6IGluZGV4O1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdGdldFJ1bGVyOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgc2NhbGUgPSBtZS5nZXRJbmRleFNjYWxlKCk7XG5cdFx0XHR2YXIgc3RhY2tDb3VudCA9IG1lLmdldFN0YWNrQ291bnQoKTtcblx0XHRcdHZhciBkYXRhc2V0SW5kZXggPSBtZS5pbmRleDtcblx0XHRcdHZhciBpc0hvcml6b250YWwgPSBzY2FsZS5pc0hvcml6b250YWwoKTtcblx0XHRcdHZhciBzdGFydCA9IGlzSG9yaXpvbnRhbCA/IHNjYWxlLmxlZnQgOiBzY2FsZS50b3A7XG5cdFx0XHR2YXIgZW5kID0gc3RhcnQgKyAoaXNIb3Jpem9udGFsID8gc2NhbGUud2lkdGggOiBzY2FsZS5oZWlnaHQpO1xuXHRcdFx0dmFyIHBpeGVscyA9IFtdO1xuXHRcdFx0dmFyIGksIGlsZW4sIG1pbjtcblxuXHRcdFx0Zm9yIChpID0gMCwgaWxlbiA9IG1lLmdldE1ldGEoKS5kYXRhLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0XHRwaXhlbHMucHVzaChzY2FsZS5nZXRQaXhlbEZvclZhbHVlKG51bGwsIGksIGRhdGFzZXRJbmRleCkpO1xuXHRcdFx0fVxuXG5cdFx0XHRtaW4gPSBoZWxwZXJzLmlzTnVsbE9yVW5kZWYoc2NhbGUub3B0aW9ucy5iYXJUaGlja25lc3MpXG5cdFx0XHRcdD8gY29tcHV0ZU1pblNhbXBsZVNpemUoc2NhbGUsIHBpeGVscylcblx0XHRcdFx0OiAtMTtcblxuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0bWluOiBtaW4sXG5cdFx0XHRcdHBpeGVsczogcGl4ZWxzLFxuXHRcdFx0XHRzdGFydDogc3RhcnQsXG5cdFx0XHRcdGVuZDogZW5kLFxuXHRcdFx0XHRzdGFja0NvdW50OiBzdGFja0NvdW50LFxuXHRcdFx0XHRzY2FsZTogc2NhbGVcblx0XHRcdH07XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIE5vdGU6IHBpeGVsIHZhbHVlcyBhcmUgbm90IGNsYW1wZWQgdG8gdGhlIHNjYWxlIGFyZWEuXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHRjYWxjdWxhdGVCYXJWYWx1ZVBpeGVsczogZnVuY3Rpb24oZGF0YXNldEluZGV4LCBpbmRleCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdFx0dmFyIG1ldGEgPSBtZS5nZXRNZXRhKCk7XG5cdFx0XHR2YXIgc2NhbGUgPSBtZS5nZXRWYWx1ZVNjYWxlKCk7XG5cdFx0XHR2YXIgZGF0YXNldHMgPSBjaGFydC5kYXRhLmRhdGFzZXRzO1xuXHRcdFx0dmFyIHZhbHVlID0gc2NhbGUuZ2V0UmlnaHRWYWx1ZShkYXRhc2V0c1tkYXRhc2V0SW5kZXhdLmRhdGFbaW5kZXhdKTtcblx0XHRcdHZhciBzdGFja2VkID0gc2NhbGUub3B0aW9ucy5zdGFja2VkO1xuXHRcdFx0dmFyIHN0YWNrID0gbWV0YS5zdGFjaztcblx0XHRcdHZhciBzdGFydCA9IDA7XG5cdFx0XHR2YXIgaSwgaW1ldGEsIGl2YWx1ZSwgYmFzZSwgaGVhZCwgc2l6ZTtcblxuXHRcdFx0aWYgKHN0YWNrZWQgfHwgKHN0YWNrZWQgPT09IHVuZGVmaW5lZCAmJiBzdGFjayAhPT0gdW5kZWZpbmVkKSkge1xuXHRcdFx0XHRmb3IgKGkgPSAwOyBpIDwgZGF0YXNldEluZGV4OyArK2kpIHtcblx0XHRcdFx0XHRpbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGkpO1xuXG5cdFx0XHRcdFx0aWYgKGltZXRhLmJhciAmJlxuXHRcdFx0XHRcdFx0aW1ldGEuc3RhY2sgPT09IHN0YWNrICYmXG5cdFx0XHRcdFx0XHRpbWV0YS5jb250cm9sbGVyLmdldFZhbHVlU2NhbGVJZCgpID09PSBzY2FsZS5pZCAmJlxuXHRcdFx0XHRcdFx0Y2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpKSkge1xuXG5cdFx0XHRcdFx0XHRpdmFsdWUgPSBzY2FsZS5nZXRSaWdodFZhbHVlKGRhdGFzZXRzW2ldLmRhdGFbaW5kZXhdKTtcblx0XHRcdFx0XHRcdGlmICgodmFsdWUgPCAwICYmIGl2YWx1ZSA8IDApIHx8ICh2YWx1ZSA+PSAwICYmIGl2YWx1ZSA+IDApKSB7XG5cdFx0XHRcdFx0XHRcdHN0YXJ0ICs9IGl2YWx1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0YmFzZSA9IHNjYWxlLmdldFBpeGVsRm9yVmFsdWUoc3RhcnQpO1xuXHRcdFx0aGVhZCA9IHNjYWxlLmdldFBpeGVsRm9yVmFsdWUoc3RhcnQgKyB2YWx1ZSk7XG5cdFx0XHRzaXplID0gKGhlYWQgLSBiYXNlKSAvIDI7XG5cblx0XHRcdHJldHVybiB7XG5cdFx0XHRcdHNpemU6IHNpemUsXG5cdFx0XHRcdGJhc2U6IGJhc2UsXG5cdFx0XHRcdGhlYWQ6IGhlYWQsXG5cdFx0XHRcdGNlbnRlcjogaGVhZCArIHNpemUgLyAyXG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHQvKipcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdGNhbGN1bGF0ZUJhckluZGV4UGl4ZWxzOiBmdW5jdGlvbihkYXRhc2V0SW5kZXgsIGluZGV4LCBydWxlcikge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBvcHRpb25zID0gcnVsZXIuc2NhbGUub3B0aW9ucztcblx0XHRcdHZhciByYW5nZSA9IG9wdGlvbnMuYmFyVGhpY2tuZXNzID09PSAnZmxleCdcblx0XHRcdFx0PyBjb21wdXRlRmxleENhdGVnb3J5VHJhaXRzKGluZGV4LCBydWxlciwgb3B0aW9ucylcblx0XHRcdFx0OiBjb21wdXRlRml0Q2F0ZWdvcnlUcmFpdHMoaW5kZXgsIHJ1bGVyLCBvcHRpb25zKTtcblxuXHRcdFx0dmFyIHN0YWNrSW5kZXggPSBtZS5nZXRTdGFja0luZGV4KGRhdGFzZXRJbmRleCwgbWUuZ2V0TWV0YSgpLnN0YWNrKTtcblx0XHRcdHZhciBjZW50ZXIgPSByYW5nZS5zdGFydCArIChyYW5nZS5jaHVuayAqIHN0YWNrSW5kZXgpICsgKHJhbmdlLmNodW5rIC8gMik7XG5cdFx0XHR2YXIgc2l6ZSA9IE1hdGgubWluKFxuXHRcdFx0XHRoZWxwZXJzLnZhbHVlT3JEZWZhdWx0KG9wdGlvbnMubWF4QmFyVGhpY2tuZXNzLCBJbmZpbml0eSksXG5cdFx0XHRcdHJhbmdlLmNodW5rICogcmFuZ2UucmF0aW8pO1xuXG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRiYXNlOiBjZW50ZXIgLSBzaXplIC8gMixcblx0XHRcdFx0aGVhZDogY2VudGVyICsgc2l6ZSAvIDIsXG5cdFx0XHRcdGNlbnRlcjogY2VudGVyLFxuXHRcdFx0XHRzaXplOiBzaXplXG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRkcmF3OiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgY2hhcnQgPSBtZS5jaGFydDtcblx0XHRcdHZhciBzY2FsZSA9IG1lLmdldFZhbHVlU2NhbGUoKTtcblx0XHRcdHZhciByZWN0cyA9IG1lLmdldE1ldGEoKS5kYXRhO1xuXHRcdFx0dmFyIGRhdGFzZXQgPSBtZS5nZXREYXRhc2V0KCk7XG5cdFx0XHR2YXIgaWxlbiA9IHJlY3RzLmxlbmd0aDtcblx0XHRcdHZhciBpID0gMDtcblxuXHRcdFx0aGVscGVycy5jYW52YXMuY2xpcEFyZWEoY2hhcnQuY3R4LCBjaGFydC5jaGFydEFyZWEpO1xuXG5cdFx0XHRmb3IgKDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0XHRpZiAoIWlzTmFOKHNjYWxlLmdldFJpZ2h0VmFsdWUoZGF0YXNldC5kYXRhW2ldKSkpIHtcblx0XHRcdFx0XHRyZWN0c1tpXS5kcmF3KCk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aGVscGVycy5jYW52YXMudW5jbGlwQXJlYShjaGFydC5jdHgpO1xuXHRcdH0sXG5cdH0pO1xuXG5cdENoYXJ0LmNvbnRyb2xsZXJzLmhvcml6b250YWxCYXIgPSBDaGFydC5jb250cm9sbGVycy5iYXIuZXh0ZW5kKHtcblx0XHQvKipcblx0XHQgKiBAcHJpdmF0ZVxuXHRcdCAqL1xuXHRcdGdldFZhbHVlU2NhbGVJZDogZnVuY3Rpb24oKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5nZXRNZXRhKCkueEF4aXNJRDtcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHRnZXRJbmRleFNjYWxlSWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZ2V0TWV0YSgpLnlBeGlzSUQ7XG5cdFx0fVxuXHR9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2NvcmUvY29yZS5kZWZhdWx0cycpO1xudmFyIGVsZW1lbnRzID0gcmVxdWlyZSgnLi4vZWxlbWVudHMvaW5kZXgnKTtcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi4vaGVscGVycy9pbmRleCcpO1xuXG5kZWZhdWx0cy5fc2V0KCdidWJibGUnLCB7XG5cdGhvdmVyOiB7XG5cdFx0bW9kZTogJ3NpbmdsZSdcblx0fSxcblxuXHRzY2FsZXM6IHtcblx0XHR4QXhlczogW3tcblx0XHRcdHR5cGU6ICdsaW5lYXInLCAvLyBidWJibGUgc2hvdWxkIHByb2JhYmx5IHVzZSBhIGxpbmVhciBzY2FsZSBieSBkZWZhdWx0XG5cdFx0XHRwb3NpdGlvbjogJ2JvdHRvbScsXG5cdFx0XHRpZDogJ3gtYXhpcy0wJyAvLyBuZWVkIGFuIElEIHNvIGRhdGFzZXRzIGNhbiByZWZlcmVuY2UgdGhlIHNjYWxlXG5cdFx0fV0sXG5cdFx0eUF4ZXM6IFt7XG5cdFx0XHR0eXBlOiAnbGluZWFyJyxcblx0XHRcdHBvc2l0aW9uOiAnbGVmdCcsXG5cdFx0XHRpZDogJ3ktYXhpcy0wJ1xuXHRcdH1dXG5cdH0sXG5cblx0dG9vbHRpcHM6IHtcblx0XHRjYWxsYmFja3M6IHtcblx0XHRcdHRpdGxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0Ly8gVGl0bGUgZG9lc24ndCBtYWtlIHNlbnNlIGZvciBzY2F0dGVyIHNpbmNlIHdlIGZvcm1hdCB0aGUgZGF0YSBhcyBhIHBvaW50XG5cdFx0XHRcdHJldHVybiAnJztcblx0XHRcdH0sXG5cdFx0XHRsYWJlbDogZnVuY3Rpb24oaXRlbSwgZGF0YSkge1xuXHRcdFx0XHR2YXIgZGF0YXNldExhYmVsID0gZGF0YS5kYXRhc2V0c1tpdGVtLmRhdGFzZXRJbmRleF0ubGFiZWwgfHwgJyc7XG5cdFx0XHRcdHZhciBkYXRhUG9pbnQgPSBkYXRhLmRhdGFzZXRzW2l0ZW0uZGF0YXNldEluZGV4XS5kYXRhW2l0ZW0uaW5kZXhdO1xuXHRcdFx0XHRyZXR1cm4gZGF0YXNldExhYmVsICsgJzogKCcgKyBpdGVtLnhMYWJlbCArICcsICcgKyBpdGVtLnlMYWJlbCArICcsICcgKyBkYXRhUG9pbnQuciArICcpJztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0pO1xuXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQ2hhcnQpIHtcblxuXHRDaGFydC5jb250cm9sbGVycy5idWJibGUgPSBDaGFydC5EYXRhc2V0Q29udHJvbGxlci5leHRlbmQoe1xuXHRcdC8qKlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHRkYXRhRWxlbWVudFR5cGU6IGVsZW1lbnRzLlBvaW50LFxuXG5cdFx0LyoqXG5cdFx0ICogQHByb3RlY3RlZFxuXHRcdCAqL1xuXHRcdHVwZGF0ZTogZnVuY3Rpb24ocmVzZXQpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgbWV0YSA9IG1lLmdldE1ldGEoKTtcblx0XHRcdHZhciBwb2ludHMgPSBtZXRhLmRhdGE7XG5cblx0XHRcdC8vIFVwZGF0ZSBQb2ludHNcblx0XHRcdGhlbHBlcnMuZWFjaChwb2ludHMsIGZ1bmN0aW9uKHBvaW50LCBpbmRleCkge1xuXHRcdFx0XHRtZS51cGRhdGVFbGVtZW50KHBvaW50LCBpbmRleCwgcmVzZXQpO1xuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHR1cGRhdGVFbGVtZW50OiBmdW5jdGlvbihwb2ludCwgaW5kZXgsIHJlc2V0KSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIG1ldGEgPSBtZS5nZXRNZXRhKCk7XG5cdFx0XHR2YXIgY3VzdG9tID0gcG9pbnQuY3VzdG9tIHx8IHt9O1xuXHRcdFx0dmFyIHhTY2FsZSA9IG1lLmdldFNjYWxlRm9ySWQobWV0YS54QXhpc0lEKTtcblx0XHRcdHZhciB5U2NhbGUgPSBtZS5nZXRTY2FsZUZvcklkKG1ldGEueUF4aXNJRCk7XG5cdFx0XHR2YXIgb3B0aW9ucyA9IG1lLl9yZXNvbHZlRWxlbWVudE9wdGlvbnMocG9pbnQsIGluZGV4KTtcblx0XHRcdHZhciBkYXRhID0gbWUuZ2V0RGF0YXNldCgpLmRhdGFbaW5kZXhdO1xuXHRcdFx0dmFyIGRzSW5kZXggPSBtZS5pbmRleDtcblxuXHRcdFx0dmFyIHggPSByZXNldCA/IHhTY2FsZS5nZXRQaXhlbEZvckRlY2ltYWwoMC41KSA6IHhTY2FsZS5nZXRQaXhlbEZvclZhbHVlKHR5cGVvZiBkYXRhID09PSAnb2JqZWN0JyA/IGRhdGEgOiBOYU4sIGluZGV4LCBkc0luZGV4KTtcblx0XHRcdHZhciB5ID0gcmVzZXQgPyB5U2NhbGUuZ2V0QmFzZVBpeGVsKCkgOiB5U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShkYXRhLCBpbmRleCwgZHNJbmRleCk7XG5cblx0XHRcdHBvaW50Ll94U2NhbGUgPSB4U2NhbGU7XG5cdFx0XHRwb2ludC5feVNjYWxlID0geVNjYWxlO1xuXHRcdFx0cG9pbnQuX29wdGlvbnMgPSBvcHRpb25zO1xuXHRcdFx0cG9pbnQuX2RhdGFzZXRJbmRleCA9IGRzSW5kZXg7XG5cdFx0XHRwb2ludC5faW5kZXggPSBpbmRleDtcblx0XHRcdHBvaW50Ll9tb2RlbCA9IHtcblx0XHRcdFx0YmFja2dyb3VuZENvbG9yOiBvcHRpb25zLmJhY2tncm91bmRDb2xvcixcblx0XHRcdFx0Ym9yZGVyQ29sb3I6IG9wdGlvbnMuYm9yZGVyQ29sb3IsXG5cdFx0XHRcdGJvcmRlcldpZHRoOiBvcHRpb25zLmJvcmRlcldpZHRoLFxuXHRcdFx0XHRoaXRSYWRpdXM6IG9wdGlvbnMuaGl0UmFkaXVzLFxuXHRcdFx0XHRwb2ludFN0eWxlOiBvcHRpb25zLnBvaW50U3R5bGUsXG5cdFx0XHRcdHJvdGF0aW9uOiBvcHRpb25zLnJvdGF0aW9uLFxuXHRcdFx0XHRyYWRpdXM6IHJlc2V0ID8gMCA6IG9wdGlvbnMucmFkaXVzLFxuXHRcdFx0XHRza2lwOiBjdXN0b20uc2tpcCB8fCBpc05hTih4KSB8fCBpc05hTih5KSxcblx0XHRcdFx0eDogeCxcblx0XHRcdFx0eTogeSxcblx0XHRcdH07XG5cblx0XHRcdHBvaW50LnBpdm90KCk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEBwcm90ZWN0ZWRcblx0XHQgKi9cblx0XHRzZXRIb3ZlclN0eWxlOiBmdW5jdGlvbihwb2ludCkge1xuXHRcdFx0dmFyIG1vZGVsID0gcG9pbnQuX21vZGVsO1xuXHRcdFx0dmFyIG9wdGlvbnMgPSBwb2ludC5fb3B0aW9ucztcblx0XHRcdHBvaW50LiRwcmV2aW91c1N0eWxlID0ge1xuXHRcdFx0XHRiYWNrZ3JvdW5kQ29sb3I6IG1vZGVsLmJhY2tncm91bmRDb2xvcixcblx0XHRcdFx0Ym9yZGVyQ29sb3I6IG1vZGVsLmJvcmRlckNvbG9yLFxuXHRcdFx0XHRib3JkZXJXaWR0aDogbW9kZWwuYm9yZGVyV2lkdGgsXG5cdFx0XHRcdHJhZGl1czogbW9kZWwucmFkaXVzXG5cdFx0XHR9O1xuXHRcdFx0bW9kZWwuYmFja2dyb3VuZENvbG9yID0gaGVscGVycy52YWx1ZU9yRGVmYXVsdChvcHRpb25zLmhvdmVyQmFja2dyb3VuZENvbG9yLCBoZWxwZXJzLmdldEhvdmVyQ29sb3Iob3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IpKTtcblx0XHRcdG1vZGVsLmJvcmRlckNvbG9yID0gaGVscGVycy52YWx1ZU9yRGVmYXVsdChvcHRpb25zLmhvdmVyQm9yZGVyQ29sb3IsIGhlbHBlcnMuZ2V0SG92ZXJDb2xvcihvcHRpb25zLmJvcmRlckNvbG9yKSk7XG5cdFx0XHRtb2RlbC5ib3JkZXJXaWR0aCA9IGhlbHBlcnMudmFsdWVPckRlZmF1bHQob3B0aW9ucy5ob3ZlckJvcmRlcldpZHRoLCBvcHRpb25zLmJvcmRlcldpZHRoKTtcblx0XHRcdG1vZGVsLnJhZGl1cyA9IG9wdGlvbnMucmFkaXVzICsgb3B0aW9ucy5ob3ZlclJhZGl1cztcblx0XHR9LFxuXG5cdFx0LyoqXG5cdFx0ICogQHByaXZhdGVcblx0XHQgKi9cblx0XHRfcmVzb2x2ZUVsZW1lbnRPcHRpb25zOiBmdW5jdGlvbihwb2ludCwgaW5kZXgpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgY2hhcnQgPSBtZS5jaGFydDtcblx0XHRcdHZhciBkYXRhc2V0cyA9IGNoYXJ0LmRhdGEuZGF0YXNldHM7XG5cdFx0XHR2YXIgZGF0YXNldCA9IGRhdGFzZXRzW21lLmluZGV4XTtcblx0XHRcdHZhciBjdXN0b20gPSBwb2ludC5jdXN0b20gfHwge307XG5cdFx0XHR2YXIgb3B0aW9ucyA9IGNoYXJ0Lm9wdGlvbnMuZWxlbWVudHMucG9pbnQ7XG5cdFx0XHR2YXIgcmVzb2x2ZSA9IGhlbHBlcnMub3B0aW9ucy5yZXNvbHZlO1xuXHRcdFx0dmFyIGRhdGEgPSBkYXRhc2V0LmRhdGFbaW5kZXhdO1xuXHRcdFx0dmFyIHZhbHVlcyA9IHt9O1xuXHRcdFx0dmFyIGksIGlsZW4sIGtleTtcblxuXHRcdFx0Ly8gU2NyaXB0YWJsZSBvcHRpb25zXG5cdFx0XHR2YXIgY29udGV4dCA9IHtcblx0XHRcdFx0Y2hhcnQ6IGNoYXJ0LFxuXHRcdFx0XHRkYXRhSW5kZXg6IGluZGV4LFxuXHRcdFx0XHRkYXRhc2V0OiBkYXRhc2V0LFxuXHRcdFx0XHRkYXRhc2V0SW5kZXg6IG1lLmluZGV4XG5cdFx0XHR9O1xuXG5cdFx0XHR2YXIga2V5cyA9IFtcblx0XHRcdFx0J2JhY2tncm91bmRDb2xvcicsXG5cdFx0XHRcdCdib3JkZXJDb2xvcicsXG5cdFx0XHRcdCdib3JkZXJXaWR0aCcsXG5cdFx0XHRcdCdob3ZlckJhY2tncm91bmRDb2xvcicsXG5cdFx0XHRcdCdob3ZlckJvcmRlckNvbG9yJyxcblx0XHRcdFx0J2hvdmVyQm9yZGVyV2lkdGgnLFxuXHRcdFx0XHQnaG92ZXJSYWRpdXMnLFxuXHRcdFx0XHQnaGl0UmFkaXVzJyxcblx0XHRcdFx0J3BvaW50U3R5bGUnLFxuXHRcdFx0XHQncm90YXRpb24nXG5cdFx0XHRdO1xuXG5cdFx0XHRmb3IgKGkgPSAwLCBpbGVuID0ga2V5cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdFx0a2V5ID0ga2V5c1tpXTtcblx0XHRcdFx0dmFsdWVzW2tleV0gPSByZXNvbHZlKFtcblx0XHRcdFx0XHRjdXN0b21ba2V5XSxcblx0XHRcdFx0XHRkYXRhc2V0W2tleV0sXG5cdFx0XHRcdFx0b3B0aW9uc1trZXldXG5cdFx0XHRcdF0sIGNvbnRleHQsIGluZGV4KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ3VzdG9tIHJhZGl1cyByZXNvbHV0aW9uXG5cdFx0XHR2YWx1ZXMucmFkaXVzID0gcmVzb2x2ZShbXG5cdFx0XHRcdGN1c3RvbS5yYWRpdXMsXG5cdFx0XHRcdGRhdGEgPyBkYXRhLnIgOiB1bmRlZmluZWQsXG5cdFx0XHRcdGRhdGFzZXQucmFkaXVzLFxuXHRcdFx0XHRvcHRpb25zLnJhZGl1c1xuXHRcdFx0XSwgY29udGV4dCwgaW5kZXgpO1xuXHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHR9XG5cdH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vY29yZS9jb3JlLmRlZmF1bHRzJyk7XG52YXIgZWxlbWVudHMgPSByZXF1aXJlKCcuLi9lbGVtZW50cy9pbmRleCcpO1xudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2luZGV4Jyk7XG5cbmRlZmF1bHRzLl9zZXQoJ2RvdWdobnV0Jywge1xuXHRhbmltYXRpb246IHtcblx0XHQvLyBCb29sZWFuIC0gV2hldGhlciB3ZSBhbmltYXRlIHRoZSByb3RhdGlvbiBvZiB0aGUgRG91Z2hudXRcblx0XHRhbmltYXRlUm90YXRlOiB0cnVlLFxuXHRcdC8vIEJvb2xlYW4gLSBXaGV0aGVyIHdlIGFuaW1hdGUgc2NhbGluZyB0aGUgRG91Z2hudXQgZnJvbSB0aGUgY2VudHJlXG5cdFx0YW5pbWF0ZVNjYWxlOiBmYWxzZVxuXHR9LFxuXHRob3Zlcjoge1xuXHRcdG1vZGU6ICdzaW5nbGUnXG5cdH0sXG5cdGxlZ2VuZENhbGxiYWNrOiBmdW5jdGlvbihjaGFydCkge1xuXHRcdHZhciB0ZXh0ID0gW107XG5cdFx0dGV4dC5wdXNoKCc8dWwgY2xhc3M9XCInICsgY2hhcnQuaWQgKyAnLWxlZ2VuZFwiPicpO1xuXG5cdFx0dmFyIGRhdGEgPSBjaGFydC5kYXRhO1xuXHRcdHZhciBkYXRhc2V0cyA9IGRhdGEuZGF0YXNldHM7XG5cdFx0dmFyIGxhYmVscyA9IGRhdGEubGFiZWxzO1xuXG5cdFx0aWYgKGRhdGFzZXRzLmxlbmd0aCkge1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhc2V0c1swXS5kYXRhLmxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdHRleHQucHVzaCgnPGxpPjxzcGFuIHN0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjonICsgZGF0YXNldHNbMF0uYmFja2dyb3VuZENvbG9yW2ldICsgJ1wiPjwvc3Bhbj4nKTtcblx0XHRcdFx0aWYgKGxhYmVsc1tpXSkge1xuXHRcdFx0XHRcdHRleHQucHVzaChsYWJlbHNbaV0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRleHQucHVzaCgnPC9saT4nKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0ZXh0LnB1c2goJzwvdWw+Jyk7XG5cdFx0cmV0dXJuIHRleHQuam9pbignJyk7XG5cdH0sXG5cdGxlZ2VuZDoge1xuXHRcdGxhYmVsczoge1xuXHRcdFx0Z2VuZXJhdGVMYWJlbHM6IGZ1bmN0aW9uKGNoYXJ0KSB7XG5cdFx0XHRcdHZhciBkYXRhID0gY2hhcnQuZGF0YTtcblx0XHRcdFx0aWYgKGRhdGEubGFiZWxzLmxlbmd0aCAmJiBkYXRhLmRhdGFzZXRzLmxlbmd0aCkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhLmxhYmVscy5tYXAoZnVuY3Rpb24obGFiZWwsIGkpIHtcblx0XHRcdFx0XHRcdHZhciBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoMCk7XG5cdFx0XHRcdFx0XHR2YXIgZHMgPSBkYXRhLmRhdGFzZXRzWzBdO1xuXHRcdFx0XHRcdFx0dmFyIGFyYyA9IG1ldGEuZGF0YVtpXTtcblx0XHRcdFx0XHRcdHZhciBjdXN0b20gPSBhcmMgJiYgYXJjLmN1c3RvbSB8fCB7fTtcblx0XHRcdFx0XHRcdHZhciB2YWx1ZUF0SW5kZXhPckRlZmF1bHQgPSBoZWxwZXJzLnZhbHVlQXRJbmRleE9yRGVmYXVsdDtcblx0XHRcdFx0XHRcdHZhciBhcmNPcHRzID0gY2hhcnQub3B0aW9ucy5lbGVtZW50cy5hcmM7XG5cdFx0XHRcdFx0XHR2YXIgZmlsbCA9IGN1c3RvbS5iYWNrZ3JvdW5kQ29sb3IgPyBjdXN0b20uYmFja2dyb3VuZENvbG9yIDogdmFsdWVBdEluZGV4T3JEZWZhdWx0KGRzLmJhY2tncm91bmRDb2xvciwgaSwgYXJjT3B0cy5iYWNrZ3JvdW5kQ29sb3IpO1xuXHRcdFx0XHRcdFx0dmFyIHN0cm9rZSA9IGN1c3RvbS5ib3JkZXJDb2xvciA/IGN1c3RvbS5ib3JkZXJDb2xvciA6IHZhbHVlQXRJbmRleE9yRGVmYXVsdChkcy5ib3JkZXJDb2xvciwgaSwgYXJjT3B0cy5ib3JkZXJDb2xvcik7XG5cdFx0XHRcdFx0XHR2YXIgYncgPSBjdXN0b20uYm9yZGVyV2lkdGggPyBjdXN0b20uYm9yZGVyV2lkdGggOiB2YWx1ZUF0SW5kZXhPckRlZmF1bHQoZHMuYm9yZGVyV2lkdGgsIGksIGFyY09wdHMuYm9yZGVyV2lkdGgpO1xuXG5cdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHR0ZXh0OiBsYWJlbCxcblx0XHRcdFx0XHRcdFx0ZmlsbFN0eWxlOiBmaWxsLFxuXHRcdFx0XHRcdFx0XHRzdHJva2VTdHlsZTogc3Ryb2tlLFxuXHRcdFx0XHRcdFx0XHRsaW5lV2lkdGg6IGJ3LFxuXHRcdFx0XHRcdFx0XHRoaWRkZW46IGlzTmFOKGRzLmRhdGFbaV0pIHx8IG1ldGEuZGF0YVtpXS5oaWRkZW4sXG5cblx0XHRcdFx0XHRcdFx0Ly8gRXh0cmEgZGF0YSB1c2VkIGZvciB0b2dnbGluZyB0aGUgY29ycmVjdCBpdGVtXG5cdFx0XHRcdFx0XHRcdGluZGV4OiBpXG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBbXTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0b25DbGljazogZnVuY3Rpb24oZSwgbGVnZW5kSXRlbSkge1xuXHRcdFx0dmFyIGluZGV4ID0gbGVnZW5kSXRlbS5pbmRleDtcblx0XHRcdHZhciBjaGFydCA9IHRoaXMuY2hhcnQ7XG5cdFx0XHR2YXIgaSwgaWxlbiwgbWV0YTtcblxuXHRcdFx0Zm9yIChpID0gMCwgaWxlbiA9IChjaGFydC5kYXRhLmRhdGFzZXRzIHx8IFtdKS5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdFx0bWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGkpO1xuXHRcdFx0XHQvLyB0b2dnbGUgdmlzaWJpbGl0eSBvZiBpbmRleCBpZiBleGlzdHNcblx0XHRcdFx0aWYgKG1ldGEuZGF0YVtpbmRleF0pIHtcblx0XHRcdFx0XHRtZXRhLmRhdGFbaW5kZXhdLmhpZGRlbiA9ICFtZXRhLmRhdGFbaW5kZXhdLmhpZGRlbjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRjaGFydC51cGRhdGUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gVGhlIHBlcmNlbnRhZ2Ugb2YgdGhlIGNoYXJ0IHRoYXQgd2UgY3V0IG91dCBvZiB0aGUgbWlkZGxlLlxuXHRjdXRvdXRQZXJjZW50YWdlOiA1MCxcblxuXHQvLyBUaGUgcm90YXRpb24gb2YgdGhlIGNoYXJ0LCB3aGVyZSB0aGUgZmlyc3QgZGF0YSBhcmMgYmVnaW5zLlxuXHRyb3RhdGlvbjogTWF0aC5QSSAqIC0wLjUsXG5cblx0Ly8gVGhlIHRvdGFsIGNpcmN1bWZlcmVuY2Ugb2YgdGhlIGNoYXJ0LlxuXHRjaXJjdW1mZXJlbmNlOiBNYXRoLlBJICogMi4wLFxuXG5cdC8vIE5lZWQgdG8gb3ZlcnJpZGUgdGhlc2UgdG8gZ2l2ZSBhIG5pY2UgZGVmYXVsdFxuXHR0b29sdGlwczoge1xuXHRcdGNhbGxiYWNrczoge1xuXHRcdFx0dGl0bGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gJyc7XG5cdFx0XHR9LFxuXHRcdFx0bGFiZWw6IGZ1bmN0aW9uKHRvb2x0aXBJdGVtLCBkYXRhKSB7XG5cdFx0XHRcdHZhciBkYXRhTGFiZWwgPSBkYXRhLmxhYmVsc1t0b29sdGlwSXRlbS5pbmRleF07XG5cdFx0XHRcdHZhciB2YWx1ZSA9ICc6ICcgKyBkYXRhLmRhdGFzZXRzW3Rvb2x0aXBJdGVtLmRhdGFzZXRJbmRleF0uZGF0YVt0b29sdGlwSXRlbS5pbmRleF07XG5cblx0XHRcdFx0aWYgKGhlbHBlcnMuaXNBcnJheShkYXRhTGFiZWwpKSB7XG5cdFx0XHRcdFx0Ly8gc2hvdyB2YWx1ZSBvbiBmaXJzdCBsaW5lIG9mIG11bHRpbGluZSBsYWJlbFxuXHRcdFx0XHRcdC8vIG5lZWQgdG8gY2xvbmUgYmVjYXVzZSB3ZSBhcmUgY2hhbmdpbmcgdGhlIHZhbHVlXG5cdFx0XHRcdFx0ZGF0YUxhYmVsID0gZGF0YUxhYmVsLnNsaWNlKCk7XG5cdFx0XHRcdFx0ZGF0YUxhYmVsWzBdICs9IHZhbHVlO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRhdGFMYWJlbCArPSB2YWx1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBkYXRhTGFiZWw7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59KTtcblxuZGVmYXVsdHMuX3NldCgncGllJywgaGVscGVycy5jbG9uZShkZWZhdWx0cy5kb3VnaG51dCkpO1xuZGVmYXVsdHMuX3NldCgncGllJywge1xuXHRjdXRvdXRQZXJjZW50YWdlOiAwXG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihDaGFydCkge1xuXG5cdENoYXJ0LmNvbnRyb2xsZXJzLmRvdWdobnV0ID0gQ2hhcnQuY29udHJvbGxlcnMucGllID0gQ2hhcnQuRGF0YXNldENvbnRyb2xsZXIuZXh0ZW5kKHtcblxuXHRcdGRhdGFFbGVtZW50VHlwZTogZWxlbWVudHMuQXJjLFxuXG5cdFx0bGlua1NjYWxlczogaGVscGVycy5ub29wLFxuXG5cdFx0Ly8gR2V0IGluZGV4IG9mIHRoZSBkYXRhc2V0IGluIHJlbGF0aW9uIHRvIHRoZSB2aXNpYmxlIGRhdGFzZXRzLiBUaGlzIGFsbG93cyBkZXRlcm1pbmluZyB0aGUgaW5uZXIgYW5kIG91dGVyIHJhZGl1cyBjb3JyZWN0bHlcblx0XHRnZXRSaW5nSW5kZXg6IGZ1bmN0aW9uKGRhdGFzZXRJbmRleCkge1xuXHRcdFx0dmFyIHJpbmdJbmRleCA9IDA7XG5cblx0XHRcdGZvciAodmFyIGogPSAwOyBqIDwgZGF0YXNldEluZGV4OyArK2opIHtcblx0XHRcdFx0aWYgKHRoaXMuY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShqKSkge1xuXHRcdFx0XHRcdCsrcmluZ0luZGV4O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiByaW5nSW5kZXg7XG5cdFx0fSxcblxuXHRcdHVwZGF0ZTogZnVuY3Rpb24ocmVzZXQpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgY2hhcnQgPSBtZS5jaGFydDtcblx0XHRcdHZhciBjaGFydEFyZWEgPSBjaGFydC5jaGFydEFyZWE7XG5cdFx0XHR2YXIgb3B0cyA9IGNoYXJ0Lm9wdGlvbnM7XG5cdFx0XHR2YXIgYXJjT3B0cyA9IG9wdHMuZWxlbWVudHMuYXJjO1xuXHRcdFx0dmFyIGF2YWlsYWJsZVdpZHRoID0gY2hhcnRBcmVhLnJpZ2h0IC0gY2hhcnRBcmVhLmxlZnQgLSBhcmNPcHRzLmJvcmRlcldpZHRoO1xuXHRcdFx0dmFyIGF2YWlsYWJsZUhlaWdodCA9IGNoYXJ0QXJlYS5ib3R0b20gLSBjaGFydEFyZWEudG9wIC0gYXJjT3B0cy5ib3JkZXJXaWR0aDtcblx0XHRcdHZhciBtaW5TaXplID0gTWF0aC5taW4oYXZhaWxhYmxlV2lkdGgsIGF2YWlsYWJsZUhlaWdodCk7XG5cdFx0XHR2YXIgb2Zmc2V0ID0ge3g6IDAsIHk6IDB9O1xuXHRcdFx0dmFyIG1ldGEgPSBtZS5nZXRNZXRhKCk7XG5cdFx0XHR2YXIgY3V0b3V0UGVyY2VudGFnZSA9IG9wdHMuY3V0b3V0UGVyY2VudGFnZTtcblx0XHRcdHZhciBjaXJjdW1mZXJlbmNlID0gb3B0cy5jaXJjdW1mZXJlbmNlO1xuXG5cdFx0XHQvLyBJZiB0aGUgY2hhcnQncyBjaXJjdW1mZXJlbmNlIGlzbid0IGEgZnVsbCBjaXJjbGUsIGNhbGN1bGF0ZSBtaW5TaXplIGFzIGEgcmF0aW8gb2YgdGhlIHdpZHRoL2hlaWdodCBvZiB0aGUgYXJjXG5cdFx0XHRpZiAoY2lyY3VtZmVyZW5jZSA8IE1hdGguUEkgKiAyLjApIHtcblx0XHRcdFx0dmFyIHN0YXJ0QW5nbGUgPSBvcHRzLnJvdGF0aW9uICUgKE1hdGguUEkgKiAyLjApO1xuXHRcdFx0XHRzdGFydEFuZ2xlICs9IE1hdGguUEkgKiAyLjAgKiAoc3RhcnRBbmdsZSA+PSBNYXRoLlBJID8gLTEgOiBzdGFydEFuZ2xlIDwgLU1hdGguUEkgPyAxIDogMCk7XG5cdFx0XHRcdHZhciBlbmRBbmdsZSA9IHN0YXJ0QW5nbGUgKyBjaXJjdW1mZXJlbmNlO1xuXHRcdFx0XHR2YXIgc3RhcnQgPSB7eDogTWF0aC5jb3Moc3RhcnRBbmdsZSksIHk6IE1hdGguc2luKHN0YXJ0QW5nbGUpfTtcblx0XHRcdFx0dmFyIGVuZCA9IHt4OiBNYXRoLmNvcyhlbmRBbmdsZSksIHk6IE1hdGguc2luKGVuZEFuZ2xlKX07XG5cdFx0XHRcdHZhciBjb250YWluczAgPSAoc3RhcnRBbmdsZSA8PSAwICYmIGVuZEFuZ2xlID49IDApIHx8IChzdGFydEFuZ2xlIDw9IE1hdGguUEkgKiAyLjAgJiYgTWF0aC5QSSAqIDIuMCA8PSBlbmRBbmdsZSk7XG5cdFx0XHRcdHZhciBjb250YWluczkwID0gKHN0YXJ0QW5nbGUgPD0gTWF0aC5QSSAqIDAuNSAmJiBNYXRoLlBJICogMC41IDw9IGVuZEFuZ2xlKSB8fCAoc3RhcnRBbmdsZSA8PSBNYXRoLlBJICogMi41ICYmIE1hdGguUEkgKiAyLjUgPD0gZW5kQW5nbGUpO1xuXHRcdFx0XHR2YXIgY29udGFpbnMxODAgPSAoc3RhcnRBbmdsZSA8PSAtTWF0aC5QSSAmJiAtTWF0aC5QSSA8PSBlbmRBbmdsZSkgfHwgKHN0YXJ0QW5nbGUgPD0gTWF0aC5QSSAmJiBNYXRoLlBJIDw9IGVuZEFuZ2xlKTtcblx0XHRcdFx0dmFyIGNvbnRhaW5zMjcwID0gKHN0YXJ0QW5nbGUgPD0gLU1hdGguUEkgKiAwLjUgJiYgLU1hdGguUEkgKiAwLjUgPD0gZW5kQW5nbGUpIHx8IChzdGFydEFuZ2xlIDw9IE1hdGguUEkgKiAxLjUgJiYgTWF0aC5QSSAqIDEuNSA8PSBlbmRBbmdsZSk7XG5cdFx0XHRcdHZhciBjdXRvdXQgPSBjdXRvdXRQZXJjZW50YWdlIC8gMTAwLjA7XG5cdFx0XHRcdHZhciBtaW4gPSB7eDogY29udGFpbnMxODAgPyAtMSA6IE1hdGgubWluKHN0YXJ0LnggKiAoc3RhcnQueCA8IDAgPyAxIDogY3V0b3V0KSwgZW5kLnggKiAoZW5kLnggPCAwID8gMSA6IGN1dG91dCkpLCB5OiBjb250YWluczI3MCA/IC0xIDogTWF0aC5taW4oc3RhcnQueSAqIChzdGFydC55IDwgMCA/IDEgOiBjdXRvdXQpLCBlbmQueSAqIChlbmQueSA8IDAgPyAxIDogY3V0b3V0KSl9O1xuXHRcdFx0XHR2YXIgbWF4ID0ge3g6IGNvbnRhaW5zMCA/IDEgOiBNYXRoLm1heChzdGFydC54ICogKHN0YXJ0LnggPiAwID8gMSA6IGN1dG91dCksIGVuZC54ICogKGVuZC54ID4gMCA/IDEgOiBjdXRvdXQpKSwgeTogY29udGFpbnM5MCA/IDEgOiBNYXRoLm1heChzdGFydC55ICogKHN0YXJ0LnkgPiAwID8gMSA6IGN1dG91dCksIGVuZC55ICogKGVuZC55ID4gMCA/IDEgOiBjdXRvdXQpKX07XG5cdFx0XHRcdHZhciBzaXplID0ge3dpZHRoOiAobWF4LnggLSBtaW4ueCkgKiAwLjUsIGhlaWdodDogKG1heC55IC0gbWluLnkpICogMC41fTtcblx0XHRcdFx0bWluU2l6ZSA9IE1hdGgubWluKGF2YWlsYWJsZVdpZHRoIC8gc2l6ZS53aWR0aCwgYXZhaWxhYmxlSGVpZ2h0IC8gc2l6ZS5oZWlnaHQpO1xuXHRcdFx0XHRvZmZzZXQgPSB7eDogKG1heC54ICsgbWluLngpICogLTAuNSwgeTogKG1heC55ICsgbWluLnkpICogLTAuNX07XG5cdFx0XHR9XG5cblx0XHRcdGNoYXJ0LmJvcmRlcldpZHRoID0gbWUuZ2V0TWF4Qm9yZGVyV2lkdGgobWV0YS5kYXRhKTtcblx0XHRcdGNoYXJ0Lm91dGVyUmFkaXVzID0gTWF0aC5tYXgoKG1pblNpemUgLSBjaGFydC5ib3JkZXJXaWR0aCkgLyAyLCAwKTtcblx0XHRcdGNoYXJ0LmlubmVyUmFkaXVzID0gTWF0aC5tYXgoY3V0b3V0UGVyY2VudGFnZSA/IChjaGFydC5vdXRlclJhZGl1cyAvIDEwMCkgKiAoY3V0b3V0UGVyY2VudGFnZSkgOiAwLCAwKTtcblx0XHRcdGNoYXJ0LnJhZGl1c0xlbmd0aCA9IChjaGFydC5vdXRlclJhZGl1cyAtIGNoYXJ0LmlubmVyUmFkaXVzKSAvIGNoYXJ0LmdldFZpc2libGVEYXRhc2V0Q291bnQoKTtcblx0XHRcdGNoYXJ0Lm9mZnNldFggPSBvZmZzZXQueCAqIGNoYXJ0Lm91dGVyUmFkaXVzO1xuXHRcdFx0Y2hhcnQub2Zmc2V0WSA9IG9mZnNldC55ICogY2hhcnQub3V0ZXJSYWRpdXM7XG5cblx0XHRcdG1ldGEudG90YWwgPSBtZS5jYWxjdWxhdGVUb3RhbCgpO1xuXG5cdFx0XHRtZS5vdXRlclJhZGl1cyA9IGNoYXJ0Lm91dGVyUmFkaXVzIC0gKGNoYXJ0LnJhZGl1c0xlbmd0aCAqIG1lLmdldFJpbmdJbmRleChtZS5pbmRleCkpO1xuXHRcdFx0bWUuaW5uZXJSYWRpdXMgPSBNYXRoLm1heChtZS5vdXRlclJhZGl1cyAtIGNoYXJ0LnJhZGl1c0xlbmd0aCwgMCk7XG5cblx0XHRcdGhlbHBlcnMuZWFjaChtZXRhLmRhdGEsIGZ1bmN0aW9uKGFyYywgaW5kZXgpIHtcblx0XHRcdFx0bWUudXBkYXRlRWxlbWVudChhcmMsIGluZGV4LCByZXNldCk7XG5cdFx0XHR9KTtcblx0XHR9LFxuXG5cdFx0dXBkYXRlRWxlbWVudDogZnVuY3Rpb24oYXJjLCBpbmRleCwgcmVzZXQpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgY2hhcnQgPSBtZS5jaGFydDtcblx0XHRcdHZhciBjaGFydEFyZWEgPSBjaGFydC5jaGFydEFyZWE7XG5cdFx0XHR2YXIgb3B0cyA9IGNoYXJ0Lm9wdGlvbnM7XG5cdFx0XHR2YXIgYW5pbWF0aW9uT3B0cyA9IG9wdHMuYW5pbWF0aW9uO1xuXHRcdFx0dmFyIGNlbnRlclggPSAoY2hhcnRBcmVhLmxlZnQgKyBjaGFydEFyZWEucmlnaHQpIC8gMjtcblx0XHRcdHZhciBjZW50ZXJZID0gKGNoYXJ0QXJlYS50b3AgKyBjaGFydEFyZWEuYm90dG9tKSAvIDI7XG5cdFx0XHR2YXIgc3RhcnRBbmdsZSA9IG9wdHMucm90YXRpb247IC8vIG5vbiByZXNldCBjYXNlIGhhbmRsZWQgbGF0ZXJcblx0XHRcdHZhciBlbmRBbmdsZSA9IG9wdHMucm90YXRpb247IC8vIG5vbiByZXNldCBjYXNlIGhhbmRsZWQgbGF0ZXJcblx0XHRcdHZhciBkYXRhc2V0ID0gbWUuZ2V0RGF0YXNldCgpO1xuXHRcdFx0dmFyIGNpcmN1bWZlcmVuY2UgPSByZXNldCAmJiBhbmltYXRpb25PcHRzLmFuaW1hdGVSb3RhdGUgPyAwIDogYXJjLmhpZGRlbiA/IDAgOiBtZS5jYWxjdWxhdGVDaXJjdW1mZXJlbmNlKGRhdGFzZXQuZGF0YVtpbmRleF0pICogKG9wdHMuY2lyY3VtZmVyZW5jZSAvICgyLjAgKiBNYXRoLlBJKSk7XG5cdFx0XHR2YXIgaW5uZXJSYWRpdXMgPSByZXNldCAmJiBhbmltYXRpb25PcHRzLmFuaW1hdGVTY2FsZSA/IDAgOiBtZS5pbm5lclJhZGl1cztcblx0XHRcdHZhciBvdXRlclJhZGl1cyA9IHJlc2V0ICYmIGFuaW1hdGlvbk9wdHMuYW5pbWF0ZVNjYWxlID8gMCA6IG1lLm91dGVyUmFkaXVzO1xuXHRcdFx0dmFyIHZhbHVlQXRJbmRleE9yRGVmYXVsdCA9IGhlbHBlcnMudmFsdWVBdEluZGV4T3JEZWZhdWx0O1xuXG5cdFx0XHRoZWxwZXJzLmV4dGVuZChhcmMsIHtcblx0XHRcdFx0Ly8gVXRpbGl0eVxuXHRcdFx0XHRfZGF0YXNldEluZGV4OiBtZS5pbmRleCxcblx0XHRcdFx0X2luZGV4OiBpbmRleCxcblxuXHRcdFx0XHQvLyBEZXNpcmVkIHZpZXcgcHJvcGVydGllc1xuXHRcdFx0XHRfbW9kZWw6IHtcblx0XHRcdFx0XHR4OiBjZW50ZXJYICsgY2hhcnQub2Zmc2V0WCxcblx0XHRcdFx0XHR5OiBjZW50ZXJZICsgY2hhcnQub2Zmc2V0WSxcblx0XHRcdFx0XHRzdGFydEFuZ2xlOiBzdGFydEFuZ2xlLFxuXHRcdFx0XHRcdGVuZEFuZ2xlOiBlbmRBbmdsZSxcblx0XHRcdFx0XHRjaXJjdW1mZXJlbmNlOiBjaXJjdW1mZXJlbmNlLFxuXHRcdFx0XHRcdG91dGVyUmFkaXVzOiBvdXRlclJhZGl1cyxcblx0XHRcdFx0XHRpbm5lclJhZGl1czogaW5uZXJSYWRpdXMsXG5cdFx0XHRcdFx0bGFiZWw6IHZhbHVlQXRJbmRleE9yRGVmYXVsdChkYXRhc2V0LmxhYmVsLCBpbmRleCwgY2hhcnQuZGF0YS5sYWJlbHNbaW5kZXhdKVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0dmFyIG1vZGVsID0gYXJjLl9tb2RlbDtcblxuXHRcdFx0Ly8gUmVzZXRzIHRoZSB2aXN1YWwgc3R5bGVzXG5cdFx0XHR2YXIgY3VzdG9tID0gYXJjLmN1c3RvbSB8fCB7fTtcblx0XHRcdHZhciB2YWx1ZU9yRGVmYXVsdCA9IGhlbHBlcnMudmFsdWVBdEluZGV4T3JEZWZhdWx0O1xuXHRcdFx0dmFyIGVsZW1lbnRPcHRzID0gdGhpcy5jaGFydC5vcHRpb25zLmVsZW1lbnRzLmFyYztcblx0XHRcdG1vZGVsLmJhY2tncm91bmRDb2xvciA9IGN1c3RvbS5iYWNrZ3JvdW5kQ29sb3IgPyBjdXN0b20uYmFja2dyb3VuZENvbG9yIDogdmFsdWVPckRlZmF1bHQoZGF0YXNldC5iYWNrZ3JvdW5kQ29sb3IsIGluZGV4LCBlbGVtZW50T3B0cy5iYWNrZ3JvdW5kQ29sb3IpO1xuXHRcdFx0bW9kZWwuYm9yZGVyQ29sb3IgPSBjdXN0b20uYm9yZGVyQ29sb3IgPyBjdXN0b20uYm9yZGVyQ29sb3IgOiB2YWx1ZU9yRGVmYXVsdChkYXRhc2V0LmJvcmRlckNvbG9yLCBpbmRleCwgZWxlbWVudE9wdHMuYm9yZGVyQ29sb3IpO1xuXHRcdFx0bW9kZWwuYm9yZGVyV2lkdGggPSBjdXN0b20uYm9yZGVyV2lkdGggPyBjdXN0b20uYm9yZGVyV2lkdGggOiB2YWx1ZU9yRGVmYXVsdChkYXRhc2V0LmJvcmRlcldpZHRoLCBpbmRleCwgZWxlbWVudE9wdHMuYm9yZGVyV2lkdGgpO1xuXG5cdFx0XHQvLyBTZXQgY29ycmVjdCBhbmdsZXMgaWYgbm90IHJlc2V0dGluZ1xuXHRcdFx0aWYgKCFyZXNldCB8fCAhYW5pbWF0aW9uT3B0cy5hbmltYXRlUm90YXRlKSB7XG5cdFx0XHRcdGlmIChpbmRleCA9PT0gMCkge1xuXHRcdFx0XHRcdG1vZGVsLnN0YXJ0QW5nbGUgPSBvcHRzLnJvdGF0aW9uO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdG1vZGVsLnN0YXJ0QW5nbGUgPSBtZS5nZXRNZXRhKCkuZGF0YVtpbmRleCAtIDFdLl9tb2RlbC5lbmRBbmdsZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdG1vZGVsLmVuZEFuZ2xlID0gbW9kZWwuc3RhcnRBbmdsZSArIG1vZGVsLmNpcmN1bWZlcmVuY2U7XG5cdFx0XHR9XG5cblx0XHRcdGFyYy5waXZvdCgpO1xuXHRcdH0sXG5cblx0XHRjYWxjdWxhdGVUb3RhbDogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgZGF0YXNldCA9IHRoaXMuZ2V0RGF0YXNldCgpO1xuXHRcdFx0dmFyIG1ldGEgPSB0aGlzLmdldE1ldGEoKTtcblx0XHRcdHZhciB0b3RhbCA9IDA7XG5cdFx0XHR2YXIgdmFsdWU7XG5cblx0XHRcdGhlbHBlcnMuZWFjaChtZXRhLmRhdGEsIGZ1bmN0aW9uKGVsZW1lbnQsIGluZGV4KSB7XG5cdFx0XHRcdHZhbHVlID0gZGF0YXNldC5kYXRhW2luZGV4XTtcblx0XHRcdFx0aWYgKCFpc05hTih2YWx1ZSkgJiYgIWVsZW1lbnQuaGlkZGVuKSB7XG5cdFx0XHRcdFx0dG90YWwgKz0gTWF0aC5hYnModmFsdWUpO1xuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0LyogaWYgKHRvdGFsID09PSAwKSB7XG5cdFx0XHRcdHRvdGFsID0gTmFOO1xuXHRcdFx0fSovXG5cblx0XHRcdHJldHVybiB0b3RhbDtcblx0XHR9LFxuXG5cdFx0Y2FsY3VsYXRlQ2lyY3VtZmVyZW5jZTogZnVuY3Rpb24odmFsdWUpIHtcblx0XHRcdHZhciB0b3RhbCA9IHRoaXMuZ2V0TWV0YSgpLnRvdGFsO1xuXHRcdFx0aWYgKHRvdGFsID4gMCAmJiAhaXNOYU4odmFsdWUpKSB7XG5cdFx0XHRcdHJldHVybiAoTWF0aC5QSSAqIDIuMCkgKiAoTWF0aC5hYnModmFsdWUpIC8gdG90YWwpO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIDA7XG5cdFx0fSxcblxuXHRcdC8vIGdldHMgdGhlIG1heCBib3JkZXIgb3IgaG92ZXIgd2lkdGggdG8gcHJvcGVybHkgc2NhbGUgcGllIGNoYXJ0c1xuXHRcdGdldE1heEJvcmRlcldpZHRoOiBmdW5jdGlvbihhcmNzKSB7XG5cdFx0XHR2YXIgbWF4ID0gMDtcblx0XHRcdHZhciBpbmRleCA9IHRoaXMuaW5kZXg7XG5cdFx0XHR2YXIgbGVuZ3RoID0gYXJjcy5sZW5ndGg7XG5cdFx0XHR2YXIgYm9yZGVyV2lkdGg7XG5cdFx0XHR2YXIgaG92ZXJXaWR0aDtcblxuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xuXHRcdFx0XHRib3JkZXJXaWR0aCA9IGFyY3NbaV0uX21vZGVsID8gYXJjc1tpXS5fbW9kZWwuYm9yZGVyV2lkdGggOiAwO1xuXHRcdFx0XHRob3ZlcldpZHRoID0gYXJjc1tpXS5fY2hhcnQgPyBhcmNzW2ldLl9jaGFydC5jb25maWcuZGF0YS5kYXRhc2V0c1tpbmRleF0uaG92ZXJCb3JkZXJXaWR0aCA6IDA7XG5cblx0XHRcdFx0bWF4ID0gYm9yZGVyV2lkdGggPiBtYXggPyBib3JkZXJXaWR0aCA6IG1heDtcblx0XHRcdFx0bWF4ID0gaG92ZXJXaWR0aCA+IG1heCA/IGhvdmVyV2lkdGggOiBtYXg7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF4O1xuXHRcdH1cblx0fSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9jb3JlL2NvcmUuZGVmYXVsdHMnKTtcbnZhciBlbGVtZW50cyA9IHJlcXVpcmUoJy4uL2VsZW1lbnRzL2luZGV4Jyk7XG52YXIgaGVscGVycyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaW5kZXgnKTtcblxuZGVmYXVsdHMuX3NldCgnbGluZScsIHtcblx0c2hvd0xpbmVzOiB0cnVlLFxuXHRzcGFuR2FwczogZmFsc2UsXG5cblx0aG92ZXI6IHtcblx0XHRtb2RlOiAnbGFiZWwnXG5cdH0sXG5cblx0c2NhbGVzOiB7XG5cdFx0eEF4ZXM6IFt7XG5cdFx0XHR0eXBlOiAnY2F0ZWdvcnknLFxuXHRcdFx0aWQ6ICd4LWF4aXMtMCdcblx0XHR9XSxcblx0XHR5QXhlczogW3tcblx0XHRcdHR5cGU6ICdsaW5lYXInLFxuXHRcdFx0aWQ6ICd5LWF4aXMtMCdcblx0XHR9XVxuXHR9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihDaGFydCkge1xuXG5cdGZ1bmN0aW9uIGxpbmVFbmFibGVkKGRhdGFzZXQsIG9wdGlvbnMpIHtcblx0XHRyZXR1cm4gaGVscGVycy52YWx1ZU9yRGVmYXVsdChkYXRhc2V0LnNob3dMaW5lLCBvcHRpb25zLnNob3dMaW5lcyk7XG5cdH1cblxuXHRDaGFydC5jb250cm9sbGVycy5saW5lID0gQ2hhcnQuRGF0YXNldENvbnRyb2xsZXIuZXh0ZW5kKHtcblxuXHRcdGRhdGFzZXRFbGVtZW50VHlwZTogZWxlbWVudHMuTGluZSxcblxuXHRcdGRhdGFFbGVtZW50VHlwZTogZWxlbWVudHMuUG9pbnQsXG5cblx0XHR1cGRhdGU6IGZ1bmN0aW9uKHJlc2V0KSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIG1ldGEgPSBtZS5nZXRNZXRhKCk7XG5cdFx0XHR2YXIgbGluZSA9IG1ldGEuZGF0YXNldDtcblx0XHRcdHZhciBwb2ludHMgPSBtZXRhLmRhdGEgfHwgW107XG5cdFx0XHR2YXIgb3B0aW9ucyA9IG1lLmNoYXJ0Lm9wdGlvbnM7XG5cdFx0XHR2YXIgbGluZUVsZW1lbnRPcHRpb25zID0gb3B0aW9ucy5lbGVtZW50cy5saW5lO1xuXHRcdFx0dmFyIHNjYWxlID0gbWUuZ2V0U2NhbGVGb3JJZChtZXRhLnlBeGlzSUQpO1xuXHRcdFx0dmFyIGksIGlsZW4sIGN1c3RvbTtcblx0XHRcdHZhciBkYXRhc2V0ID0gbWUuZ2V0RGF0YXNldCgpO1xuXHRcdFx0dmFyIHNob3dMaW5lID0gbGluZUVuYWJsZWQoZGF0YXNldCwgb3B0aW9ucyk7XG5cblx0XHRcdC8vIFVwZGF0ZSBMaW5lXG5cdFx0XHRpZiAoc2hvd0xpbmUpIHtcblx0XHRcdFx0Y3VzdG9tID0gbGluZS5jdXN0b20gfHwge307XG5cblx0XHRcdFx0Ly8gQ29tcGF0aWJpbGl0eTogSWYgdGhlIHByb3BlcnRpZXMgYXJlIGRlZmluZWQgd2l0aCBvbmx5IHRoZSBvbGQgbmFtZSwgdXNlIHRob3NlIHZhbHVlc1xuXHRcdFx0XHRpZiAoKGRhdGFzZXQudGVuc2lvbiAhPT0gdW5kZWZpbmVkKSAmJiAoZGF0YXNldC5saW5lVGVuc2lvbiA9PT0gdW5kZWZpbmVkKSkge1xuXHRcdFx0XHRcdGRhdGFzZXQubGluZVRlbnNpb24gPSBkYXRhc2V0LnRlbnNpb247XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBVdGlsaXR5XG5cdFx0XHRcdGxpbmUuX3NjYWxlID0gc2NhbGU7XG5cdFx0XHRcdGxpbmUuX2RhdGFzZXRJbmRleCA9IG1lLmluZGV4O1xuXHRcdFx0XHQvLyBEYXRhXG5cdFx0XHRcdGxpbmUuX2NoaWxkcmVuID0gcG9pbnRzO1xuXHRcdFx0XHQvLyBNb2RlbFxuXHRcdFx0XHRsaW5lLl9tb2RlbCA9IHtcblx0XHRcdFx0XHQvLyBBcHBlYXJhbmNlXG5cdFx0XHRcdFx0Ly8gVGhlIGRlZmF1bHQgYmVoYXZpb3Igb2YgbGluZXMgaXMgdG8gYnJlYWsgYXQgbnVsbCB2YWx1ZXMsIGFjY29yZGluZ1xuXHRcdFx0XHRcdC8vIHRvIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy8yNDM1I2lzc3VlY29tbWVudC0yMTY3MTgxNThcblx0XHRcdFx0XHQvLyBUaGlzIG9wdGlvbiBnaXZlcyBsaW5lcyB0aGUgYWJpbGl0eSB0byBzcGFuIGdhcHNcblx0XHRcdFx0XHRzcGFuR2FwczogZGF0YXNldC5zcGFuR2FwcyA/IGRhdGFzZXQuc3BhbkdhcHMgOiBvcHRpb25zLnNwYW5HYXBzLFxuXHRcdFx0XHRcdHRlbnNpb246IGN1c3RvbS50ZW5zaW9uID8gY3VzdG9tLnRlbnNpb24gOiBoZWxwZXJzLnZhbHVlT3JEZWZhdWx0KGRhdGFzZXQubGluZVRlbnNpb24sIGxpbmVFbGVtZW50T3B0aW9ucy50ZW5zaW9uKSxcblx0XHRcdFx0XHRiYWNrZ3JvdW5kQ29sb3I6IGN1c3RvbS5iYWNrZ3JvdW5kQ29sb3IgPyBjdXN0b20uYmFja2dyb3VuZENvbG9yIDogKGRhdGFzZXQuYmFja2dyb3VuZENvbG9yIHx8IGxpbmVFbGVtZW50T3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IpLFxuXHRcdFx0XHRcdGJvcmRlcldpZHRoOiBjdXN0b20uYm9yZGVyV2lkdGggPyBjdXN0b20uYm9yZGVyV2lkdGggOiAoZGF0YXNldC5ib3JkZXJXaWR0aCB8fCBsaW5lRWxlbWVudE9wdGlvbnMuYm9yZGVyV2lkdGgpLFxuXHRcdFx0XHRcdGJvcmRlckNvbG9yOiBjdXN0b20uYm9yZGVyQ29sb3IgPyBjdXN0b20uYm9yZGVyQ29sb3IgOiAoZGF0YXNldC5ib3JkZXJDb2xvciB8fCBsaW5lRWxlbWVudE9wdGlvbnMuYm9yZGVyQ29sb3IpLFxuXHRcdFx0XHRcdGJvcmRlckNhcFN0eWxlOiBjdXN0b20uYm9yZGVyQ2FwU3R5bGUgPyBjdXN0b20uYm9yZGVyQ2FwU3R5bGUgOiAoZGF0YXNldC5ib3JkZXJDYXBTdHlsZSB8fCBsaW5lRWxlbWVudE9wdGlvbnMuYm9yZGVyQ2FwU3R5bGUpLFxuXHRcdFx0XHRcdGJvcmRlckRhc2g6IGN1c3RvbS5ib3JkZXJEYXNoID8gY3VzdG9tLmJvcmRlckRhc2ggOiAoZGF0YXNldC5ib3JkZXJEYXNoIHx8IGxpbmVFbGVtZW50T3B0aW9ucy5ib3JkZXJEYXNoKSxcblx0XHRcdFx0XHRib3JkZXJEYXNoT2Zmc2V0OiBjdXN0b20uYm9yZGVyRGFzaE9mZnNldCA/IGN1c3RvbS5ib3JkZXJEYXNoT2Zmc2V0IDogKGRhdGFzZXQuYm9yZGVyRGFzaE9mZnNldCB8fCBsaW5lRWxlbWVudE9wdGlvbnMuYm9yZGVyRGFzaE9mZnNldCksXG5cdFx0XHRcdFx0Ym9yZGVySm9pblN0eWxlOiBjdXN0b20uYm9yZGVySm9pblN0eWxlID8gY3VzdG9tLmJvcmRlckpvaW5TdHlsZSA6IChkYXRhc2V0LmJvcmRlckpvaW5TdHlsZSB8fCBsaW5lRWxlbWVudE9wdGlvbnMuYm9yZGVySm9pblN0eWxlKSxcblx0XHRcdFx0XHRmaWxsOiBjdXN0b20uZmlsbCA/IGN1c3RvbS5maWxsIDogKGRhdGFzZXQuZmlsbCAhPT0gdW5kZWZpbmVkID8gZGF0YXNldC5maWxsIDogbGluZUVsZW1lbnRPcHRpb25zLmZpbGwpLFxuXHRcdFx0XHRcdHN0ZXBwZWRMaW5lOiBjdXN0b20uc3RlcHBlZExpbmUgPyBjdXN0b20uc3RlcHBlZExpbmUgOiBoZWxwZXJzLnZhbHVlT3JEZWZhdWx0KGRhdGFzZXQuc3RlcHBlZExpbmUsIGxpbmVFbGVtZW50T3B0aW9ucy5zdGVwcGVkKSxcblx0XHRcdFx0XHRjdWJpY0ludGVycG9sYXRpb25Nb2RlOiBjdXN0b20uY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSA/IGN1c3RvbS5jdWJpY0ludGVycG9sYXRpb25Nb2RlIDogaGVscGVycy52YWx1ZU9yRGVmYXVsdChkYXRhc2V0LmN1YmljSW50ZXJwb2xhdGlvbk1vZGUsIGxpbmVFbGVtZW50T3B0aW9ucy5jdWJpY0ludGVycG9sYXRpb25Nb2RlKSxcblx0XHRcdFx0fTtcblxuXHRcdFx0XHRsaW5lLnBpdm90KCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFVwZGF0ZSBQb2ludHNcblx0XHRcdGZvciAoaSA9IDAsIGlsZW4gPSBwb2ludHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRcdG1lLnVwZGF0ZUVsZW1lbnQocG9pbnRzW2ldLCBpLCByZXNldCk7XG5cdFx0XHR9XG5cblx0XHRcdGlmIChzaG93TGluZSAmJiBsaW5lLl9tb2RlbC50ZW5zaW9uICE9PSAwKSB7XG5cdFx0XHRcdG1lLnVwZGF0ZUJlemllckNvbnRyb2xQb2ludHMoKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTm93IHBpdm90IHRoZSBwb2ludCBmb3IgYW5pbWF0aW9uXG5cdFx0XHRmb3IgKGkgPSAwLCBpbGVuID0gcG9pbnRzLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0XHRwb2ludHNbaV0ucGl2b3QoKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0Z2V0UG9pbnRCYWNrZ3JvdW5kQ29sb3I6IGZ1bmN0aW9uKHBvaW50LCBpbmRleCkge1xuXHRcdFx0dmFyIGJhY2tncm91bmRDb2xvciA9IHRoaXMuY2hhcnQub3B0aW9ucy5lbGVtZW50cy5wb2ludC5iYWNrZ3JvdW5kQ29sb3I7XG5cdFx0XHR2YXIgZGF0YXNldCA9IHRoaXMuZ2V0RGF0YXNldCgpO1xuXHRcdFx0dmFyIGN1c3RvbSA9IHBvaW50LmN1c3RvbSB8fCB7fTtcblxuXHRcdFx0aWYgKGN1c3RvbS5iYWNrZ3JvdW5kQ29sb3IpIHtcblx0XHRcdFx0YmFja2dyb3VuZENvbG9yID0gY3VzdG9tLmJhY2tncm91bmRDb2xvcjtcblx0XHRcdH0gZWxzZSBpZiAoZGF0YXNldC5wb2ludEJhY2tncm91bmRDb2xvcikge1xuXHRcdFx0XHRiYWNrZ3JvdW5kQ29sb3IgPSBoZWxwZXJzLnZhbHVlQXRJbmRleE9yRGVmYXVsdChkYXRhc2V0LnBvaW50QmFja2dyb3VuZENvbG9yLCBpbmRleCwgYmFja2dyb3VuZENvbG9yKTtcblx0XHRcdH0gZWxzZSBpZiAoZGF0YXNldC5iYWNrZ3JvdW5kQ29sb3IpIHtcblx0XHRcdFx0YmFja2dyb3VuZENvbG9yID0gZGF0YXNldC5iYWNrZ3JvdW5kQ29sb3I7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBiYWNrZ3JvdW5kQ29sb3I7XG5cdFx0fSxcblxuXHRcdGdldFBvaW50Qm9yZGVyQ29sb3I6IGZ1bmN0aW9uKHBvaW50LCBpbmRleCkge1xuXHRcdFx0dmFyIGJvcmRlckNvbG9yID0gdGhpcy5jaGFydC5vcHRpb25zLmVsZW1lbnRzLnBvaW50LmJvcmRlckNvbG9yO1xuXHRcdFx0dmFyIGRhdGFzZXQgPSB0aGlzLmdldERhdGFzZXQoKTtcblx0XHRcdHZhciBjdXN0b20gPSBwb2ludC5jdXN0b20gfHwge307XG5cblx0XHRcdGlmIChjdXN0b20uYm9yZGVyQ29sb3IpIHtcblx0XHRcdFx0Ym9yZGVyQ29sb3IgPSBjdXN0b20uYm9yZGVyQ29sb3I7XG5cdFx0XHR9IGVsc2UgaWYgKGRhdGFzZXQucG9pbnRCb3JkZXJDb2xvcikge1xuXHRcdFx0XHRib3JkZXJDb2xvciA9IGhlbHBlcnMudmFsdWVBdEluZGV4T3JEZWZhdWx0KGRhdGFzZXQucG9pbnRCb3JkZXJDb2xvciwgaW5kZXgsIGJvcmRlckNvbG9yKTtcblx0XHRcdH0gZWxzZSBpZiAoZGF0YXNldC5ib3JkZXJDb2xvcikge1xuXHRcdFx0XHRib3JkZXJDb2xvciA9IGRhdGFzZXQuYm9yZGVyQ29sb3I7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBib3JkZXJDb2xvcjtcblx0XHR9LFxuXG5cdFx0Z2V0UG9pbnRCb3JkZXJXaWR0aDogZnVuY3Rpb24ocG9pbnQsIGluZGV4KSB7XG5cdFx0XHR2YXIgYm9yZGVyV2lkdGggPSB0aGlzLmNoYXJ0Lm9wdGlvbnMuZWxlbWVudHMucG9pbnQuYm9yZGVyV2lkdGg7XG5cdFx0XHR2YXIgZGF0YXNldCA9IHRoaXMuZ2V0RGF0YXNldCgpO1xuXHRcdFx0dmFyIGN1c3RvbSA9IHBvaW50LmN1c3RvbSB8fCB7fTtcblxuXHRcdFx0aWYgKCFpc05hTihjdXN0b20uYm9yZGVyV2lkdGgpKSB7XG5cdFx0XHRcdGJvcmRlcldpZHRoID0gY3VzdG9tLmJvcmRlcldpZHRoO1xuXHRcdFx0fSBlbHNlIGlmICghaXNOYU4oZGF0YXNldC5wb2ludEJvcmRlcldpZHRoKSB8fCBoZWxwZXJzLmlzQXJyYXkoZGF0YXNldC5wb2ludEJvcmRlcldpZHRoKSkge1xuXHRcdFx0XHRib3JkZXJXaWR0aCA9IGhlbHBlcnMudmFsdWVBdEluZGV4T3JEZWZhdWx0KGRhdGFzZXQucG9pbnRCb3JkZXJXaWR0aCwgaW5kZXgsIGJvcmRlcldpZHRoKTtcblx0XHRcdH0gZWxzZSBpZiAoIWlzTmFOKGRhdGFzZXQuYm9yZGVyV2lkdGgpKSB7XG5cdFx0XHRcdGJvcmRlcldpZHRoID0gZGF0YXNldC5ib3JkZXJXaWR0aDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGJvcmRlcldpZHRoO1xuXHRcdH0sXG5cblx0XHRnZXRQb2ludFJvdGF0aW9uOiBmdW5jdGlvbihwb2ludCwgaW5kZXgpIHtcblx0XHRcdHZhciBwb2ludFJvdGF0aW9uID0gdGhpcy5jaGFydC5vcHRpb25zLmVsZW1lbnRzLnBvaW50LnJvdGF0aW9uO1xuXHRcdFx0dmFyIGRhdGFzZXQgPSB0aGlzLmdldERhdGFzZXQoKTtcblx0XHRcdHZhciBjdXN0b20gPSBwb2ludC5jdXN0b20gfHwge307XG5cblx0XHRcdGlmICghaXNOYU4oY3VzdG9tLnJvdGF0aW9uKSkge1xuXHRcdFx0XHRwb2ludFJvdGF0aW9uID0gY3VzdG9tLnJvdGF0aW9uO1xuXHRcdFx0fSBlbHNlIGlmICghaXNOYU4oZGF0YXNldC5wb2ludFJvdGF0aW9uKSB8fCBoZWxwZXJzLmlzQXJyYXkoZGF0YXNldC5wb2ludFJvdGF0aW9uKSkge1xuXHRcdFx0XHRwb2ludFJvdGF0aW9uID0gaGVscGVycy52YWx1ZUF0SW5kZXhPckRlZmF1bHQoZGF0YXNldC5wb2ludFJvdGF0aW9uLCBpbmRleCwgcG9pbnRSb3RhdGlvbik7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcG9pbnRSb3RhdGlvbjtcblx0XHR9LFxuXG5cdFx0dXBkYXRlRWxlbWVudDogZnVuY3Rpb24ocG9pbnQsIGluZGV4LCByZXNldCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBtZXRhID0gbWUuZ2V0TWV0YSgpO1xuXHRcdFx0dmFyIGN1c3RvbSA9IHBvaW50LmN1c3RvbSB8fCB7fTtcblx0XHRcdHZhciBkYXRhc2V0ID0gbWUuZ2V0RGF0YXNldCgpO1xuXHRcdFx0dmFyIGRhdGFzZXRJbmRleCA9IG1lLmluZGV4O1xuXHRcdFx0dmFyIHZhbHVlID0gZGF0YXNldC5kYXRhW2luZGV4XTtcblx0XHRcdHZhciB5U2NhbGUgPSBtZS5nZXRTY2FsZUZvcklkKG1ldGEueUF4aXNJRCk7XG5cdFx0XHR2YXIgeFNjYWxlID0gbWUuZ2V0U2NhbGVGb3JJZChtZXRhLnhBeGlzSUQpO1xuXHRcdFx0dmFyIHBvaW50T3B0aW9ucyA9IG1lLmNoYXJ0Lm9wdGlvbnMuZWxlbWVudHMucG9pbnQ7XG5cdFx0XHR2YXIgeCwgeTtcblxuXHRcdFx0Ly8gQ29tcGF0aWJpbGl0eTogSWYgdGhlIHByb3BlcnRpZXMgYXJlIGRlZmluZWQgd2l0aCBvbmx5IHRoZSBvbGQgbmFtZSwgdXNlIHRob3NlIHZhbHVlc1xuXHRcdFx0aWYgKChkYXRhc2V0LnJhZGl1cyAhPT0gdW5kZWZpbmVkKSAmJiAoZGF0YXNldC5wb2ludFJhZGl1cyA9PT0gdW5kZWZpbmVkKSkge1xuXHRcdFx0XHRkYXRhc2V0LnBvaW50UmFkaXVzID0gZGF0YXNldC5yYWRpdXM7XG5cdFx0XHR9XG5cdFx0XHRpZiAoKGRhdGFzZXQuaGl0UmFkaXVzICE9PSB1bmRlZmluZWQpICYmIChkYXRhc2V0LnBvaW50SGl0UmFkaXVzID09PSB1bmRlZmluZWQpKSB7XG5cdFx0XHRcdGRhdGFzZXQucG9pbnRIaXRSYWRpdXMgPSBkYXRhc2V0LmhpdFJhZGl1cztcblx0XHRcdH1cblxuXHRcdFx0eCA9IHhTY2FsZS5nZXRQaXhlbEZvclZhbHVlKHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCcgPyB2YWx1ZSA6IE5hTiwgaW5kZXgsIGRhdGFzZXRJbmRleCk7XG5cdFx0XHR5ID0gcmVzZXQgPyB5U2NhbGUuZ2V0QmFzZVBpeGVsKCkgOiBtZS5jYWxjdWxhdGVQb2ludFkodmFsdWUsIGluZGV4LCBkYXRhc2V0SW5kZXgpO1xuXG5cdFx0XHQvLyBVdGlsaXR5XG5cdFx0XHRwb2ludC5feFNjYWxlID0geFNjYWxlO1xuXHRcdFx0cG9pbnQuX3lTY2FsZSA9IHlTY2FsZTtcblx0XHRcdHBvaW50Ll9kYXRhc2V0SW5kZXggPSBkYXRhc2V0SW5kZXg7XG5cdFx0XHRwb2ludC5faW5kZXggPSBpbmRleDtcblxuXHRcdFx0Ly8gRGVzaXJlZCB2aWV3IHByb3BlcnRpZXNcblx0XHRcdHBvaW50Ll9tb2RlbCA9IHtcblx0XHRcdFx0eDogeCxcblx0XHRcdFx0eTogeSxcblx0XHRcdFx0c2tpcDogY3VzdG9tLnNraXAgfHwgaXNOYU4oeCkgfHwgaXNOYU4oeSksXG5cdFx0XHRcdC8vIEFwcGVhcmFuY2Vcblx0XHRcdFx0cmFkaXVzOiBjdXN0b20ucmFkaXVzIHx8IGhlbHBlcnMudmFsdWVBdEluZGV4T3JEZWZhdWx0KGRhdGFzZXQucG9pbnRSYWRpdXMsIGluZGV4LCBwb2ludE9wdGlvbnMucmFkaXVzKSxcblx0XHRcdFx0cG9pbnRTdHlsZTogY3VzdG9tLnBvaW50U3R5bGUgfHwgaGVscGVycy52YWx1ZUF0SW5kZXhPckRlZmF1bHQoZGF0YXNldC5wb2ludFN0eWxlLCBpbmRleCwgcG9pbnRPcHRpb25zLnBvaW50U3R5bGUpLFxuXHRcdFx0XHRyb3RhdGlvbjogbWUuZ2V0UG9pbnRSb3RhdGlvbihwb2ludCwgaW5kZXgpLFxuXHRcdFx0XHRiYWNrZ3JvdW5kQ29sb3I6IG1lLmdldFBvaW50QmFja2dyb3VuZENvbG9yKHBvaW50LCBpbmRleCksXG5cdFx0XHRcdGJvcmRlckNvbG9yOiBtZS5nZXRQb2ludEJvcmRlckNvbG9yKHBvaW50LCBpbmRleCksXG5cdFx0XHRcdGJvcmRlcldpZHRoOiBtZS5nZXRQb2ludEJvcmRlcldpZHRoKHBvaW50LCBpbmRleCksXG5cdFx0XHRcdHRlbnNpb246IG1ldGEuZGF0YXNldC5fbW9kZWwgPyBtZXRhLmRhdGFzZXQuX21vZGVsLnRlbnNpb24gOiAwLFxuXHRcdFx0XHRzdGVwcGVkTGluZTogbWV0YS5kYXRhc2V0Ll9tb2RlbCA/IG1ldGEuZGF0YXNldC5fbW9kZWwuc3RlcHBlZExpbmUgOiBmYWxzZSxcblx0XHRcdFx0Ly8gVG9vbHRpcFxuXHRcdFx0XHRoaXRSYWRpdXM6IGN1c3RvbS5oaXRSYWRpdXMgfHwgaGVscGVycy52YWx1ZUF0SW5kZXhPckRlZmF1bHQoZGF0YXNldC5wb2ludEhpdFJhZGl1cywgaW5kZXgsIHBvaW50T3B0aW9ucy5oaXRSYWRpdXMpXG5cdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRjYWxjdWxhdGVQb2ludFk6IGZ1bmN0aW9uKHZhbHVlLCBpbmRleCwgZGF0YXNldEluZGV4KSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIGNoYXJ0ID0gbWUuY2hhcnQ7XG5cdFx0XHR2YXIgbWV0YSA9IG1lLmdldE1ldGEoKTtcblx0XHRcdHZhciB5U2NhbGUgPSBtZS5nZXRTY2FsZUZvcklkKG1ldGEueUF4aXNJRCk7XG5cdFx0XHR2YXIgc3VtUG9zID0gMDtcblx0XHRcdHZhciBzdW1OZWcgPSAwO1xuXHRcdFx0dmFyIGksIGRzLCBkc01ldGE7XG5cblx0XHRcdGlmICh5U2NhbGUub3B0aW9ucy5zdGFja2VkKSB7XG5cdFx0XHRcdGZvciAoaSA9IDA7IGkgPCBkYXRhc2V0SW5kZXg7IGkrKykge1xuXHRcdFx0XHRcdGRzID0gY2hhcnQuZGF0YS5kYXRhc2V0c1tpXTtcblx0XHRcdFx0XHRkc01ldGEgPSBjaGFydC5nZXREYXRhc2V0TWV0YShpKTtcblx0XHRcdFx0XHRpZiAoZHNNZXRhLnR5cGUgPT09ICdsaW5lJyAmJiBkc01ldGEueUF4aXNJRCA9PT0geVNjYWxlLmlkICYmIGNoYXJ0LmlzRGF0YXNldFZpc2libGUoaSkpIHtcblx0XHRcdFx0XHRcdHZhciBzdGFja2VkUmlnaHRWYWx1ZSA9IE51bWJlcih5U2NhbGUuZ2V0UmlnaHRWYWx1ZShkcy5kYXRhW2luZGV4XSkpO1xuXHRcdFx0XHRcdFx0aWYgKHN0YWNrZWRSaWdodFZhbHVlIDwgMCkge1xuXHRcdFx0XHRcdFx0XHRzdW1OZWcgKz0gc3RhY2tlZFJpZ2h0VmFsdWUgfHwgMDtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdHN1bVBvcyArPSBzdGFja2VkUmlnaHRWYWx1ZSB8fCAwO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdHZhciByaWdodFZhbHVlID0gTnVtYmVyKHlTY2FsZS5nZXRSaWdodFZhbHVlKHZhbHVlKSk7XG5cdFx0XHRcdGlmIChyaWdodFZhbHVlIDwgMCkge1xuXHRcdFx0XHRcdHJldHVybiB5U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZShzdW1OZWcgKyByaWdodFZhbHVlKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4geVNjYWxlLmdldFBpeGVsRm9yVmFsdWUoc3VtUG9zICsgcmlnaHRWYWx1ZSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB5U2NhbGUuZ2V0UGl4ZWxGb3JWYWx1ZSh2YWx1ZSk7XG5cdFx0fSxcblxuXHRcdHVwZGF0ZUJlemllckNvbnRyb2xQb2ludHM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBtZXRhID0gbWUuZ2V0TWV0YSgpO1xuXHRcdFx0dmFyIGFyZWEgPSBtZS5jaGFydC5jaGFydEFyZWE7XG5cdFx0XHR2YXIgcG9pbnRzID0gKG1ldGEuZGF0YSB8fCBbXSk7XG5cdFx0XHR2YXIgaSwgaWxlbiwgcG9pbnQsIG1vZGVsLCBjb250cm9sUG9pbnRzO1xuXG5cdFx0XHQvLyBPbmx5IGNvbnNpZGVyIHBvaW50cyB0aGF0IGFyZSBkcmF3biBpbiBjYXNlIHRoZSBzcGFuR2FwcyBvcHRpb24gaXMgdXNlZFxuXHRcdFx0aWYgKG1ldGEuZGF0YXNldC5fbW9kZWwuc3BhbkdhcHMpIHtcblx0XHRcdFx0cG9pbnRzID0gcG9pbnRzLmZpbHRlcihmdW5jdGlvbihwdCkge1xuXHRcdFx0XHRcdHJldHVybiAhcHQuX21vZGVsLnNraXA7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXG5cdFx0XHRmdW5jdGlvbiBjYXBDb250cm9sUG9pbnQocHQsIG1pbiwgbWF4KSB7XG5cdFx0XHRcdHJldHVybiBNYXRoLm1heChNYXRoLm1pbihwdCwgbWF4KSwgbWluKTtcblx0XHRcdH1cblxuXHRcdFx0aWYgKG1ldGEuZGF0YXNldC5fbW9kZWwuY3ViaWNJbnRlcnBvbGF0aW9uTW9kZSA9PT0gJ21vbm90b25lJykge1xuXHRcdFx0XHRoZWxwZXJzLnNwbGluZUN1cnZlTW9ub3RvbmUocG9pbnRzKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGZvciAoaSA9IDAsIGlsZW4gPSBwb2ludHMubGVuZ3RoOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0XHRcdFx0cG9pbnQgPSBwb2ludHNbaV07XG5cdFx0XHRcdFx0bW9kZWwgPSBwb2ludC5fbW9kZWw7XG5cdFx0XHRcdFx0Y29udHJvbFBvaW50cyA9IGhlbHBlcnMuc3BsaW5lQ3VydmUoXG5cdFx0XHRcdFx0XHRoZWxwZXJzLnByZXZpb3VzSXRlbShwb2ludHMsIGkpLl9tb2RlbCxcblx0XHRcdFx0XHRcdG1vZGVsLFxuXHRcdFx0XHRcdFx0aGVscGVycy5uZXh0SXRlbShwb2ludHMsIGkpLl9tb2RlbCxcblx0XHRcdFx0XHRcdG1ldGEuZGF0YXNldC5fbW9kZWwudGVuc2lvblxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0bW9kZWwuY29udHJvbFBvaW50UHJldmlvdXNYID0gY29udHJvbFBvaW50cy5wcmV2aW91cy54O1xuXHRcdFx0XHRcdG1vZGVsLmNvbnRyb2xQb2ludFByZXZpb3VzWSA9IGNvbnRyb2xQb2ludHMucHJldmlvdXMueTtcblx0XHRcdFx0XHRtb2RlbC5jb250cm9sUG9pbnROZXh0WCA9IGNvbnRyb2xQb2ludHMubmV4dC54O1xuXHRcdFx0XHRcdG1vZGVsLmNvbnRyb2xQb2ludE5leHRZID0gY29udHJvbFBvaW50cy5uZXh0Lnk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0aWYgKG1lLmNoYXJ0Lm9wdGlvbnMuZWxlbWVudHMubGluZS5jYXBCZXppZXJQb2ludHMpIHtcblx0XHRcdFx0Zm9yIChpID0gMCwgaWxlbiA9IHBvaW50cy5sZW5ndGg7IGkgPCBpbGVuOyArK2kpIHtcblx0XHRcdFx0XHRtb2RlbCA9IHBvaW50c1tpXS5fbW9kZWw7XG5cdFx0XHRcdFx0bW9kZWwuY29udHJvbFBvaW50UHJldmlvdXNYID0gY2FwQ29udHJvbFBvaW50KG1vZGVsLmNvbnRyb2xQb2ludFByZXZpb3VzWCwgYXJlYS5sZWZ0LCBhcmVhLnJpZ2h0KTtcblx0XHRcdFx0XHRtb2RlbC5jb250cm9sUG9pbnRQcmV2aW91c1kgPSBjYXBDb250cm9sUG9pbnQobW9kZWwuY29udHJvbFBvaW50UHJldmlvdXNZLCBhcmVhLnRvcCwgYXJlYS5ib3R0b20pO1xuXHRcdFx0XHRcdG1vZGVsLmNvbnRyb2xQb2ludE5leHRYID0gY2FwQ29udHJvbFBvaW50KG1vZGVsLmNvbnRyb2xQb2ludE5leHRYLCBhcmVhLmxlZnQsIGFyZWEucmlnaHQpO1xuXHRcdFx0XHRcdG1vZGVsLmNvbnRyb2xQb2ludE5leHRZID0gY2FwQ29udHJvbFBvaW50KG1vZGVsLmNvbnRyb2xQb2ludE5leHRZLCBhcmVhLnRvcCwgYXJlYS5ib3R0b20pO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdGRyYXc6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdFx0dmFyIG1ldGEgPSBtZS5nZXRNZXRhKCk7XG5cdFx0XHR2YXIgcG9pbnRzID0gbWV0YS5kYXRhIHx8IFtdO1xuXHRcdFx0dmFyIGFyZWEgPSBjaGFydC5jaGFydEFyZWE7XG5cdFx0XHR2YXIgaWxlbiA9IHBvaW50cy5sZW5ndGg7XG5cdFx0XHR2YXIgaGFsZkJvcmRlcldpZHRoO1xuXHRcdFx0dmFyIGkgPSAwO1xuXG5cdFx0XHRpZiAobGluZUVuYWJsZWQobWUuZ2V0RGF0YXNldCgpLCBjaGFydC5vcHRpb25zKSkge1xuXHRcdFx0XHRoYWxmQm9yZGVyV2lkdGggPSAobWV0YS5kYXRhc2V0Ll9tb2RlbC5ib3JkZXJXaWR0aCB8fCAwKSAvIDI7XG5cblx0XHRcdFx0aGVscGVycy5jYW52YXMuY2xpcEFyZWEoY2hhcnQuY3R4LCB7XG5cdFx0XHRcdFx0bGVmdDogYXJlYS5sZWZ0LFxuXHRcdFx0XHRcdHJpZ2h0OiBhcmVhLnJpZ2h0LFxuXHRcdFx0XHRcdHRvcDogYXJlYS50b3AgLSBoYWxmQm9yZGVyV2lkdGgsXG5cdFx0XHRcdFx0Ym90dG9tOiBhcmVhLmJvdHRvbSArIGhhbGZCb3JkZXJXaWR0aFxuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRtZXRhLmRhdGFzZXQuZHJhdygpO1xuXG5cdFx0XHRcdGhlbHBlcnMuY2FudmFzLnVuY2xpcEFyZWEoY2hhcnQuY3R4KTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRHJhdyB0aGUgcG9pbnRzXG5cdFx0XHRmb3IgKDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0XHRwb2ludHNbaV0uZHJhdyhhcmVhKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0c2V0SG92ZXJTdHlsZTogZnVuY3Rpb24oZWxlbWVudCkge1xuXHRcdFx0Ly8gUG9pbnRcblx0XHRcdHZhciBkYXRhc2V0ID0gdGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzW2VsZW1lbnQuX2RhdGFzZXRJbmRleF07XG5cdFx0XHR2YXIgaW5kZXggPSBlbGVtZW50Ll9pbmRleDtcblx0XHRcdHZhciBjdXN0b20gPSBlbGVtZW50LmN1c3RvbSB8fCB7fTtcblx0XHRcdHZhciBtb2RlbCA9IGVsZW1lbnQuX21vZGVsO1xuXG5cdFx0XHRlbGVtZW50LiRwcmV2aW91c1N0eWxlID0ge1xuXHRcdFx0XHRiYWNrZ3JvdW5kQ29sb3I6IG1vZGVsLmJhY2tncm91bmRDb2xvcixcblx0XHRcdFx0Ym9yZGVyQ29sb3I6IG1vZGVsLmJvcmRlckNvbG9yLFxuXHRcdFx0XHRib3JkZXJXaWR0aDogbW9kZWwuYm9yZGVyV2lkdGgsXG5cdFx0XHRcdHJhZGl1czogbW9kZWwucmFkaXVzXG5cdFx0XHR9O1xuXG5cdFx0XHRtb2RlbC5iYWNrZ3JvdW5kQ29sb3IgPSBjdXN0b20uaG92ZXJCYWNrZ3JvdW5kQ29sb3IgfHwgaGVscGVycy52YWx1ZUF0SW5kZXhPckRlZmF1bHQoZGF0YXNldC5wb2ludEhvdmVyQmFja2dyb3VuZENvbG9yLCBpbmRleCwgaGVscGVycy5nZXRIb3ZlckNvbG9yKG1vZGVsLmJhY2tncm91bmRDb2xvcikpO1xuXHRcdFx0bW9kZWwuYm9yZGVyQ29sb3IgPSBjdXN0b20uaG92ZXJCb3JkZXJDb2xvciB8fCBoZWxwZXJzLnZhbHVlQXRJbmRleE9yRGVmYXVsdChkYXRhc2V0LnBvaW50SG92ZXJCb3JkZXJDb2xvciwgaW5kZXgsIGhlbHBlcnMuZ2V0SG92ZXJDb2xvcihtb2RlbC5ib3JkZXJDb2xvcikpO1xuXHRcdFx0bW9kZWwuYm9yZGVyV2lkdGggPSBjdXN0b20uaG92ZXJCb3JkZXJXaWR0aCB8fCBoZWxwZXJzLnZhbHVlQXRJbmRleE9yRGVmYXVsdChkYXRhc2V0LnBvaW50SG92ZXJCb3JkZXJXaWR0aCwgaW5kZXgsIG1vZGVsLmJvcmRlcldpZHRoKTtcblx0XHRcdG1vZGVsLnJhZGl1cyA9IGN1c3RvbS5ob3ZlclJhZGl1cyB8fCBoZWxwZXJzLnZhbHVlQXRJbmRleE9yRGVmYXVsdChkYXRhc2V0LnBvaW50SG92ZXJSYWRpdXMsIGluZGV4LCB0aGlzLmNoYXJ0Lm9wdGlvbnMuZWxlbWVudHMucG9pbnQuaG92ZXJSYWRpdXMpO1xuXHRcdH0sXG5cdH0pO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vY29yZS9jb3JlLmRlZmF1bHRzJyk7XG52YXIgZWxlbWVudHMgPSByZXF1aXJlKCcuLi9lbGVtZW50cy9pbmRleCcpO1xudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2luZGV4Jyk7XG5cbmRlZmF1bHRzLl9zZXQoJ3BvbGFyQXJlYScsIHtcblx0c2NhbGU6IHtcblx0XHR0eXBlOiAncmFkaWFsTGluZWFyJyxcblx0XHRhbmdsZUxpbmVzOiB7XG5cdFx0XHRkaXNwbGF5OiBmYWxzZVxuXHRcdH0sXG5cdFx0Z3JpZExpbmVzOiB7XG5cdFx0XHRjaXJjdWxhcjogdHJ1ZVxuXHRcdH0sXG5cdFx0cG9pbnRMYWJlbHM6IHtcblx0XHRcdGRpc3BsYXk6IGZhbHNlXG5cdFx0fSxcblx0XHR0aWNrczoge1xuXHRcdFx0YmVnaW5BdFplcm86IHRydWVcblx0XHR9XG5cdH0sXG5cblx0Ly8gQm9vbGVhbiAtIFdoZXRoZXIgdG8gYW5pbWF0ZSB0aGUgcm90YXRpb24gb2YgdGhlIGNoYXJ0XG5cdGFuaW1hdGlvbjoge1xuXHRcdGFuaW1hdGVSb3RhdGU6IHRydWUsXG5cdFx0YW5pbWF0ZVNjYWxlOiB0cnVlXG5cdH0sXG5cblx0c3RhcnRBbmdsZTogLTAuNSAqIE1hdGguUEksXG5cdGxlZ2VuZENhbGxiYWNrOiBmdW5jdGlvbihjaGFydCkge1xuXHRcdHZhciB0ZXh0ID0gW107XG5cdFx0dGV4dC5wdXNoKCc8dWwgY2xhc3M9XCInICsgY2hhcnQuaWQgKyAnLWxlZ2VuZFwiPicpO1xuXG5cdFx0dmFyIGRhdGEgPSBjaGFydC5kYXRhO1xuXHRcdHZhciBkYXRhc2V0cyA9IGRhdGEuZGF0YXNldHM7XG5cdFx0dmFyIGxhYmVscyA9IGRhdGEubGFiZWxzO1xuXG5cdFx0aWYgKGRhdGFzZXRzLmxlbmd0aCkge1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBkYXRhc2V0c1swXS5kYXRhLmxlbmd0aDsgKytpKSB7XG5cdFx0XHRcdHRleHQucHVzaCgnPGxpPjxzcGFuIHN0eWxlPVwiYmFja2dyb3VuZC1jb2xvcjonICsgZGF0YXNldHNbMF0uYmFja2dyb3VuZENvbG9yW2ldICsgJ1wiPjwvc3Bhbj4nKTtcblx0XHRcdFx0aWYgKGxhYmVsc1tpXSkge1xuXHRcdFx0XHRcdHRleHQucHVzaChsYWJlbHNbaV0pO1xuXHRcdFx0XHR9XG5cdFx0XHRcdHRleHQucHVzaCgnPC9saT4nKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHR0ZXh0LnB1c2goJzwvdWw+Jyk7XG5cdFx0cmV0dXJuIHRleHQuam9pbignJyk7XG5cdH0sXG5cdGxlZ2VuZDoge1xuXHRcdGxhYmVsczoge1xuXHRcdFx0Z2VuZXJhdGVMYWJlbHM6IGZ1bmN0aW9uKGNoYXJ0KSB7XG5cdFx0XHRcdHZhciBkYXRhID0gY2hhcnQuZGF0YTtcblx0XHRcdFx0aWYgKGRhdGEubGFiZWxzLmxlbmd0aCAmJiBkYXRhLmRhdGFzZXRzLmxlbmd0aCkge1xuXHRcdFx0XHRcdHJldHVybiBkYXRhLmxhYmVscy5tYXAoZnVuY3Rpb24obGFiZWwsIGkpIHtcblx0XHRcdFx0XHRcdHZhciBtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoMCk7XG5cdFx0XHRcdFx0XHR2YXIgZHMgPSBkYXRhLmRhdGFzZXRzWzBdO1xuXHRcdFx0XHRcdFx0dmFyIGFyYyA9IG1ldGEuZGF0YVtpXTtcblx0XHRcdFx0XHRcdHZhciBjdXN0b20gPSBhcmMuY3VzdG9tIHx8IHt9O1xuXHRcdFx0XHRcdFx0dmFyIHZhbHVlQXRJbmRleE9yRGVmYXVsdCA9IGhlbHBlcnMudmFsdWVBdEluZGV4T3JEZWZhdWx0O1xuXHRcdFx0XHRcdFx0dmFyIGFyY09wdHMgPSBjaGFydC5vcHRpb25zLmVsZW1lbnRzLmFyYztcblx0XHRcdFx0XHRcdHZhciBmaWxsID0gY3VzdG9tLmJhY2tncm91bmRDb2xvciA/IGN1c3RvbS5iYWNrZ3JvdW5kQ29sb3IgOiB2YWx1ZUF0SW5kZXhPckRlZmF1bHQoZHMuYmFja2dyb3VuZENvbG9yLCBpLCBhcmNPcHRzLmJhY2tncm91bmRDb2xvcik7XG5cdFx0XHRcdFx0XHR2YXIgc3Ryb2tlID0gY3VzdG9tLmJvcmRlckNvbG9yID8gY3VzdG9tLmJvcmRlckNvbG9yIDogdmFsdWVBdEluZGV4T3JEZWZhdWx0KGRzLmJvcmRlckNvbG9yLCBpLCBhcmNPcHRzLmJvcmRlckNvbG9yKTtcblx0XHRcdFx0XHRcdHZhciBidyA9IGN1c3RvbS5ib3JkZXJXaWR0aCA/IGN1c3RvbS5ib3JkZXJXaWR0aCA6IHZhbHVlQXRJbmRleE9yRGVmYXVsdChkcy5ib3JkZXJXaWR0aCwgaSwgYXJjT3B0cy5ib3JkZXJXaWR0aCk7XG5cblx0XHRcdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0XHRcdHRleHQ6IGxhYmVsLFxuXHRcdFx0XHRcdFx0XHRmaWxsU3R5bGU6IGZpbGwsXG5cdFx0XHRcdFx0XHRcdHN0cm9rZVN0eWxlOiBzdHJva2UsXG5cdFx0XHRcdFx0XHRcdGxpbmVXaWR0aDogYncsXG5cdFx0XHRcdFx0XHRcdGhpZGRlbjogaXNOYU4oZHMuZGF0YVtpXSkgfHwgbWV0YS5kYXRhW2ldLmhpZGRlbixcblxuXHRcdFx0XHRcdFx0XHQvLyBFeHRyYSBkYXRhIHVzZWQgZm9yIHRvZ2dsaW5nIHRoZSBjb3JyZWN0IGl0ZW1cblx0XHRcdFx0XHRcdFx0aW5kZXg6IGlcblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH0sXG5cblx0XHRvbkNsaWNrOiBmdW5jdGlvbihlLCBsZWdlbmRJdGVtKSB7XG5cdFx0XHR2YXIgaW5kZXggPSBsZWdlbmRJdGVtLmluZGV4O1xuXHRcdFx0dmFyIGNoYXJ0ID0gdGhpcy5jaGFydDtcblx0XHRcdHZhciBpLCBpbGVuLCBtZXRhO1xuXG5cdFx0XHRmb3IgKGkgPSAwLCBpbGVuID0gKGNoYXJ0LmRhdGEuZGF0YXNldHMgfHwgW10pLmxlbmd0aDsgaSA8IGlsZW47ICsraSkge1xuXHRcdFx0XHRtZXRhID0gY2hhcnQuZ2V0RGF0YXNldE1ldGEoaSk7XG5cdFx0XHRcdG1ldGEuZGF0YVtpbmRleF0uaGlkZGVuID0gIW1ldGEuZGF0YVtpbmRleF0uaGlkZGVuO1xuXHRcdFx0fVxuXG5cdFx0XHRjaGFydC51cGRhdGUoKTtcblx0XHR9XG5cdH0sXG5cblx0Ly8gTmVlZCB0byBvdmVycmlkZSB0aGVzZSB0byBnaXZlIGEgbmljZSBkZWZhdWx0XG5cdHRvb2x0aXBzOiB7XG5cdFx0Y2FsbGJhY2tzOiB7XG5cdFx0XHR0aXRsZTogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiAnJztcblx0XHRcdH0sXG5cdFx0XHRsYWJlbDogZnVuY3Rpb24oaXRlbSwgZGF0YSkge1xuXHRcdFx0XHRyZXR1cm4gZGF0YS5sYWJlbHNbaXRlbS5pbmRleF0gKyAnOiAnICsgaXRlbS55TGFiZWw7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihDaGFydCkge1xuXG5cdENoYXJ0LmNvbnRyb2xsZXJzLnBvbGFyQXJlYSA9IENoYXJ0LkRhdGFzZXRDb250cm9sbGVyLmV4dGVuZCh7XG5cblx0XHRkYXRhRWxlbWVudFR5cGU6IGVsZW1lbnRzLkFyYyxcblxuXHRcdGxpbmtTY2FsZXM6IGhlbHBlcnMubm9vcCxcblxuXHRcdHVwZGF0ZTogZnVuY3Rpb24ocmVzZXQpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgZGF0YXNldCA9IG1lLmdldERhdGFzZXQoKTtcblx0XHRcdHZhciBtZXRhID0gbWUuZ2V0TWV0YSgpO1xuXHRcdFx0dmFyIHN0YXJ0ID0gbWUuY2hhcnQub3B0aW9ucy5zdGFydEFuZ2xlIHx8IDA7XG5cdFx0XHR2YXIgc3RhcnRzID0gbWUuX3N0YXJ0cyA9IFtdO1xuXHRcdFx0dmFyIGFuZ2xlcyA9IG1lLl9hbmdsZXMgPSBbXTtcblx0XHRcdHZhciBpLCBpbGVuLCBhbmdsZTtcblxuXHRcdFx0bWUuX3VwZGF0ZVJhZGl1cygpO1xuXG5cdFx0XHRtZXRhLmNvdW50ID0gbWUuY291bnRWaXNpYmxlRWxlbWVudHMoKTtcblxuXHRcdFx0Zm9yIChpID0gMCwgaWxlbiA9IGRhdGFzZXQuZGF0YS5sZW5ndGg7IGkgPCBpbGVuOyBpKyspIHtcblx0XHRcdFx0c3RhcnRzW2ldID0gc3RhcnQ7XG5cdFx0XHRcdGFuZ2xlID0gbWUuX2NvbXB1dGVBbmdsZShpKTtcblx0XHRcdFx0YW5nbGVzW2ldID0gYW5nbGU7XG5cdFx0XHRcdHN0YXJ0ICs9IGFuZ2xlO1xuXHRcdFx0fVxuXG5cdFx0XHRoZWxwZXJzLmVhY2gobWV0YS5kYXRhLCBmdW5jdGlvbihhcmMsIGluZGV4KSB7XG5cdFx0XHRcdG1lLnVwZGF0ZUVsZW1lbnQoYXJjLCBpbmRleCwgcmVzZXQpO1xuXHRcdFx0fSk7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0X3VwZGF0ZVJhZGl1czogZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIGNoYXJ0ID0gbWUuY2hhcnQ7XG5cdFx0XHR2YXIgY2hhcnRBcmVhID0gY2hhcnQuY2hhcnRBcmVhO1xuXHRcdFx0dmFyIG9wdHMgPSBjaGFydC5vcHRpb25zO1xuXHRcdFx0dmFyIGFyY09wdHMgPSBvcHRzLmVsZW1lbnRzLmFyYztcblx0XHRcdHZhciBtaW5TaXplID0gTWF0aC5taW4oY2hhcnRBcmVhLnJpZ2h0IC0gY2hhcnRBcmVhLmxlZnQsIGNoYXJ0QXJlYS5ib3R0b20gLSBjaGFydEFyZWEudG9wKTtcblxuXHRcdFx0Y2hhcnQub3V0ZXJSYWRpdXMgPSBNYXRoLm1heCgobWluU2l6ZSAtIGFyY09wdHMuYm9yZGVyV2lkdGggLyAyKSAvIDIsIDApO1xuXHRcdFx0Y2hhcnQuaW5uZXJSYWRpdXMgPSBNYXRoLm1heChvcHRzLmN1dG91dFBlcmNlbnRhZ2UgPyAoY2hhcnQub3V0ZXJSYWRpdXMgLyAxMDApICogKG9wdHMuY3V0b3V0UGVyY2VudGFnZSkgOiAxLCAwKTtcblx0XHRcdGNoYXJ0LnJhZGl1c0xlbmd0aCA9IChjaGFydC5vdXRlclJhZGl1cyAtIGNoYXJ0LmlubmVyUmFkaXVzKSAvIGNoYXJ0LmdldFZpc2libGVEYXRhc2V0Q291bnQoKTtcblxuXHRcdFx0bWUub3V0ZXJSYWRpdXMgPSBjaGFydC5vdXRlclJhZGl1cyAtIChjaGFydC5yYWRpdXNMZW5ndGggKiBtZS5pbmRleCk7XG5cdFx0XHRtZS5pbm5lclJhZGl1cyA9IG1lLm91dGVyUmFkaXVzIC0gY2hhcnQucmFkaXVzTGVuZ3RoO1xuXHRcdH0sXG5cblx0XHR1cGRhdGVFbGVtZW50OiBmdW5jdGlvbihhcmMsIGluZGV4LCByZXNldCkge1xuXHRcdFx0dmFyIG1lID0gdGhpcztcblx0XHRcdHZhciBjaGFydCA9IG1lLmNoYXJ0O1xuXHRcdFx0dmFyIGRhdGFzZXQgPSBtZS5nZXREYXRhc2V0KCk7XG5cdFx0XHR2YXIgb3B0cyA9IGNoYXJ0Lm9wdGlvbnM7XG5cdFx0XHR2YXIgYW5pbWF0aW9uT3B0cyA9IG9wdHMuYW5pbWF0aW9uO1xuXHRcdFx0dmFyIHNjYWxlID0gY2hhcnQuc2NhbGU7XG5cdFx0XHR2YXIgbGFiZWxzID0gY2hhcnQuZGF0YS5sYWJlbHM7XG5cblx0XHRcdHZhciBjZW50ZXJYID0gc2NhbGUueENlbnRlcjtcblx0XHRcdHZhciBjZW50ZXJZID0gc2NhbGUueUNlbnRlcjtcblxuXHRcdFx0Ly8gdmFyIG5lZ0hhbGZQSSA9IC0wLjUgKiBNYXRoLlBJO1xuXHRcdFx0dmFyIGRhdGFzZXRTdGFydEFuZ2xlID0gb3B0cy5zdGFydEFuZ2xlO1xuXHRcdFx0dmFyIGRpc3RhbmNlID0gYXJjLmhpZGRlbiA/IDAgOiBzY2FsZS5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZShkYXRhc2V0LmRhdGFbaW5kZXhdKTtcblx0XHRcdHZhciBzdGFydEFuZ2xlID0gbWUuX3N0YXJ0c1tpbmRleF07XG5cdFx0XHR2YXIgZW5kQW5nbGUgPSBzdGFydEFuZ2xlICsgKGFyYy5oaWRkZW4gPyAwIDogbWUuX2FuZ2xlc1tpbmRleF0pO1xuXG5cdFx0XHR2YXIgcmVzZXRSYWRpdXMgPSBhbmltYXRpb25PcHRzLmFuaW1hdGVTY2FsZSA/IDAgOiBzY2FsZS5nZXREaXN0YW5jZUZyb21DZW50ZXJGb3JWYWx1ZShkYXRhc2V0LmRhdGFbaW5kZXhdKTtcblxuXHRcdFx0aGVscGVycy5leHRlbmQoYXJjLCB7XG5cdFx0XHRcdC8vIFV0aWxpdHlcblx0XHRcdFx0X2RhdGFzZXRJbmRleDogbWUuaW5kZXgsXG5cdFx0XHRcdF9pbmRleDogaW5kZXgsXG5cdFx0XHRcdF9zY2FsZTogc2NhbGUsXG5cblx0XHRcdFx0Ly8gRGVzaXJlZCB2aWV3IHByb3BlcnRpZXNcblx0XHRcdFx0X21vZGVsOiB7XG5cdFx0XHRcdFx0eDogY2VudGVyWCxcblx0XHRcdFx0XHR5OiBjZW50ZXJZLFxuXHRcdFx0XHRcdGlubmVyUmFkaXVzOiAwLFxuXHRcdFx0XHRcdG91dGVyUmFkaXVzOiByZXNldCA/IHJlc2V0UmFkaXVzIDogZGlzdGFuY2UsXG5cdFx0XHRcdFx0c3RhcnRBbmdsZTogcmVzZXQgJiYgYW5pbWF0aW9uT3B0cy5hbmltYXRlUm90YXRlID8gZGF0YXNldFN0YXJ0QW5nbGUgOiBzdGFydEFuZ2xlLFxuXHRcdFx0XHRcdGVuZEFuZ2xlOiByZXNldCAmJiBhbmltYXRpb25PcHRzLmFuaW1hdGVSb3RhdGUgPyBkYXRhc2V0U3RhcnRBbmdsZSA6IGVuZEFuZ2xlLFxuXHRcdFx0XHRcdGxhYmVsOiBoZWxwZXJzLnZhbHVlQXRJbmRleE9yRGVmYXVsdChsYWJlbHMsIGluZGV4LCBsYWJlbHNbaW5kZXhdKVxuXHRcdFx0XHR9XG5cdFx0XHR9KTtcblxuXHRcdFx0Ly8gQXBwbHkgYm9yZGVyIGFuZCBmaWxsIHN0eWxlXG5cdFx0XHR2YXIgZWxlbWVudE9wdHMgPSB0aGlzLmNoYXJ0Lm9wdGlvbnMuZWxlbWVudHMuYXJjO1xuXHRcdFx0dmFyIGN1c3RvbSA9IGFyYy5jdXN0b20gfHwge307XG5cdFx0XHR2YXIgdmFsdWVPckRlZmF1bHQgPSBoZWxwZXJzLnZhbHVlQXRJbmRleE9yRGVmYXVsdDtcblx0XHRcdHZhciBtb2RlbCA9IGFyYy5fbW9kZWw7XG5cblx0XHRcdG1vZGVsLmJhY2tncm91bmRDb2xvciA9IGN1c3RvbS5iYWNrZ3JvdW5kQ29sb3IgPyBjdXN0b20uYmFja2dyb3VuZENvbG9yIDogdmFsdWVPckRlZmF1bHQoZGF0YXNldC5iYWNrZ3JvdW5kQ29sb3IsIGluZGV4LCBlbGVtZW50T3B0cy5iYWNrZ3JvdW5kQ29sb3IpO1xuXHRcdFx0bW9kZWwuYm9yZGVyQ29sb3IgPSBjdXN0b20uYm9yZGVyQ29sb3IgPyBjdXN0b20uYm9yZGVyQ29sb3IgOiB2YWx1ZU9yRGVmYXVsdChkYXRhc2V0LmJvcmRlckNvbG9yLCBpbmRleCwgZWxlbWVudE9wdHMuYm9yZGVyQ29sb3IpO1xuXHRcdFx0bW9kZWwuYm9yZGVyV2lkdGggPSBjdXN0b20uYm9yZGVyV2lkdGggPyBjdXN0b20uYm9yZGVyV2lkdGggOiB2YWx1ZU9yRGVmYXVsdChkYXRhc2V0LmJvcmRlcldpZHRoLCBpbmRleCwgZWxlbWVudE9wdHMuYm9yZGVyV2lkdGgpO1xuXG5cdFx0XHRhcmMucGl2b3QoKTtcblx0XHR9LFxuXG5cdFx0Y291bnRWaXNpYmxlRWxlbWVudHM6IGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRhdGFzZXQgPSB0aGlzLmdldERhdGFzZXQoKTtcblx0XHRcdHZhciBtZXRhID0gdGhpcy5nZXRNZXRhKCk7XG5cdFx0XHR2YXIgY291bnQgPSAwO1xuXG5cdFx0XHRoZWxwZXJzLmVhY2gobWV0YS5kYXRhLCBmdW5jdGlvbihlbGVtZW50LCBpbmRleCkge1xuXHRcdFx0XHRpZiAoIWlzTmFOKGRhdGFzZXQuZGF0YVtpbmRleF0pICYmICFlbGVtZW50LmhpZGRlbikge1xuXHRcdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRyZXR1cm4gY291bnQ7XG5cdFx0fSxcblxuXHRcdC8qKlxuXHRcdCAqIEBwcml2YXRlXG5cdFx0ICovXG5cdFx0X2NvbXB1dGVBbmdsZTogZnVuY3Rpb24oaW5kZXgpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgY291bnQgPSB0aGlzLmdldE1ldGEoKS5jb3VudDtcblx0XHRcdHZhciBkYXRhc2V0ID0gbWUuZ2V0RGF0YXNldCgpO1xuXHRcdFx0dmFyIG1ldGEgPSBtZS5nZXRNZXRhKCk7XG5cblx0XHRcdGlmIChpc05hTihkYXRhc2V0LmRhdGFbaW5kZXhdKSB8fCBtZXRhLmRhdGFbaW5kZXhdLmhpZGRlbikge1xuXHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2NyaXB0YWJsZSBvcHRpb25zXG5cdFx0XHR2YXIgY29udGV4dCA9IHtcblx0XHRcdFx0Y2hhcnQ6IG1lLmNoYXJ0LFxuXHRcdFx0XHRkYXRhSW5kZXg6IGluZGV4LFxuXHRcdFx0XHRkYXRhc2V0OiBkYXRhc2V0LFxuXHRcdFx0XHRkYXRhc2V0SW5kZXg6IG1lLmluZGV4XG5cdFx0XHR9O1xuXG5cdFx0XHRyZXR1cm4gaGVscGVycy5vcHRpb25zLnJlc29sdmUoW1xuXHRcdFx0XHRtZS5jaGFydC5vcHRpb25zLmVsZW1lbnRzLmFyYy5hbmdsZSxcblx0XHRcdFx0KDIgKiBNYXRoLlBJKSAvIGNvdW50XG5cdFx0XHRdLCBjb250ZXh0LCBpbmRleCk7XG5cdFx0fVxuXHR9KTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2NvcmUvY29yZS5kZWZhdWx0cycpO1xudmFyIGVsZW1lbnRzID0gcmVxdWlyZSgnLi4vZWxlbWVudHMvaW5kZXgnKTtcbnZhciBoZWxwZXJzID0gcmVxdWlyZSgnLi4vaGVscGVycy9pbmRleCcpO1xuXG5kZWZhdWx0cy5fc2V0KCdyYWRhcicsIHtcblx0c2NhbGU6IHtcblx0XHR0eXBlOiAncmFkaWFsTGluZWFyJ1xuXHR9LFxuXHRlbGVtZW50czoge1xuXHRcdGxpbmU6IHtcblx0XHRcdHRlbnNpb246IDAgLy8gbm8gYmV6aWVyIGluIHJhZGFyXG5cdFx0fVxuXHR9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihDaGFydCkge1xuXG5cdENoYXJ0LmNvbnRyb2xsZXJzLnJhZGFyID0gQ2hhcnQuRGF0YXNldENvbnRyb2xsZXIuZXh0ZW5kKHtcblxuXHRcdGRhdGFzZXRFbGVtZW50VHlwZTogZWxlbWVudHMuTGluZSxcblxuXHRcdGRhdGFFbGVtZW50VHlwZTogZWxlbWVudHMuUG9pbnQsXG5cblx0XHRsaW5rU2NhbGVzOiBoZWxwZXJzLm5vb3AsXG5cblx0XHR1cGRhdGU6IGZ1bmN0aW9uKHJlc2V0KSB7XG5cdFx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdFx0dmFyIG1ldGEgPSBtZS5nZXRNZXRhKCk7XG5cdFx0XHR2YXIgbGluZSA9IG1ldGEuZGF0YXNldDtcblx0XHRcdHZhciBwb2ludHMgPSBtZXRhLmRhdGE7XG5cdFx0XHR2YXIgY3VzdG9tID0gbGluZS5jdXN0b20gfHwge307XG5cdFx0XHR2YXIgZGF0YXNldCA9IG1lLmdldERhdGFzZXQoKTtcblx0XHRcdHZhciBsaW5lRWxlbWVudE9wdGlvbnMgPSBtZS5jaGFydC5vcHRpb25zLmVsZW1lbnRzLmxpbmU7XG5cdFx0XHR2YXIgc2NhbGUgPSBtZS5jaGFydC5zY2FsZTtcblxuXHRcdFx0Ly8gQ29tcGF0aWJpbGl0eTogSWYgdGhlIHByb3BlcnRpZXMgYXJlIGRlZmluZWQgd2l0aCBvbmx5IHRoZSBvbGQgbmFtZSwgdXNlIHRob3NlIHZhbHVlc1xuXHRcdFx0aWYgKChkYXRhc2V0LnRlbnNpb24gIT09IHVuZGVmaW5lZCkgJiYgKGRhdGFzZXQubGluZVRlbnNpb24gPT09IHVuZGVmaW5lZCkpIHtcblx0XHRcdFx0ZGF0YXNldC5saW5lVGVuc2lvbiA9IGRhdGFzZXQudGVuc2lvbjtcblx0XHRcdH1cblxuXHRcdFx0aGVscGVycy5leHRlbmQobWV0YS5kYXRhc2V0LCB7XG5cdFx0XHRcdC8vIFV0aWxpdHlcblx0XHRcdFx0X2RhdGFzZXRJbmRleDogbWUuaW5kZXgsXG5cdFx0XHRcdF9zY2FsZTogc2NhbGUsXG5cdFx0XHRcdC8vIERhdGFcblx0XHRcdFx0X2NoaWxkcmVuOiBwb2ludHMsXG5cdFx0XHRcdF9sb29wOiB0cnVlLFxuXHRcdFx0XHQvLyBNb2RlbFxuXHRcdFx0XHRfbW9kZWw6IHtcblx0XHRcdFx0XHQvLyBBcHBlYXJhbmNlXG5cdFx0XHRcdFx0dGVuc2lvbjogY3VzdG9tLnRlbnNpb24gPyBjdXN0b20udGVuc2lvbiA6IGhlbHBlcnMudmFsdWVPckRlZmF1bHQoZGF0YXNldC5saW5lVGVuc2lvbiwgbGluZUVsZW1lbnRPcHRpb25zLnRlbnNpb24pLFxuXHRcdFx0XHRcdGJhY2tncm91bmRDb2xvcjogY3VzdG9tLmJhY2tncm91bmRDb2xvciA/IGN1c3RvbS5iYWNrZ3JvdW5kQ29sb3IgOiAoZGF0YXNldC5iYWNrZ3JvdW5kQ29sb3IgfHwgbGluZUVsZW1lbnRPcHRpb25zLmJhY2tncm91bmRDb2xvciksXG5cdFx0XHRcdFx0Ym9yZGVyV2lkdGg6IGN1c3RvbS5ib3JkZXJXaWR0aCA/IGN1c3RvbS5ib3JkZXJXaWR0aCA6IChkYXRhc2V0LmJvcmRlcldpZHRoIHx8IGxpbmVFbGVtZW50T3B0aW9ucy5ib3JkZXJXaWR0aCksXG5cdFx0XHRcdFx0Ym9yZGVyQ29sb3I6IGN1c3RvbS5ib3JkZXJDb2xvciA/IGN1c3RvbS5ib3JkZXJDb2xvciA6IChkYXRhc2V0LmJvcmRlckNvbG9yIHx8IGxpbmVFbGVtZW50T3B0aW9ucy5ib3JkZXJDb2xvciksXG5cdFx0XHRcdFx0ZmlsbDogY3VzdG9tLmZpbGwgPyBjdXN0b20uZmlsbCA6IChkYXRhc2V0LmZpbGwgIT09IHVuZGVmaW5lZCA/IGRhdGFzZXQuZmlsbCA6IGxpbmVFbGVtZW50T3B0aW9ucy5maWxsKSxcblx0XHRcdFx0XHRib3JkZXJDYXBTdHlsZTogY3VzdG9tLmJvcmRlckNhcFN0eWxlID8gY3VzdG9tLmJvcmRlckNhcFN0eWxlIDogKGRhdGFzZXQuYm9yZGVyQ2FwU3R5bGUgfHwgbGluZUVsZW1lbnRPcHRpb25zLmJvcmRlckNhcFN0eWxlKSxcblx0XHRcdFx0XHRib3JkZXJEYXNoOiBjdXN0b20uYm9yZGVyRGFzaCA/IGN1c3RvbS5ib3JkZXJEYXNoIDogKGRhdGFzZXQuYm9yZGVyRGFzaCB8fCBsaW5lRWxlbWVudE9wdGlvbnMuYm9yZGVyRGFzaCksXG5cdFx0XHRcdFx0Ym9yZGVyRGFzaE9mZnNldDogY3VzdG9tLmJvcmRlckRhc2hPZmZzZXQgPyBjdXN0b20uYm9yZGVyRGFzaE9mZnNldCA6IChkYXRhc2V0LmJvcmRlckRhc2hPZmZzZXQgfHwgbGluZUVsZW1lbnRPcHRpb25zLmJvcmRlckRhc2hPZmZzZXQpLFxuXHRcdFx0XHRcdGJvcmRlckpvaW5TdHlsZTogY3VzdG9tLmJvcmRlckpvaW5TdHlsZSA/IGN1c3RvbS5ib3JkZXJKb2luU3R5bGUgOiAoZGF0YXNldC5ib3JkZXJKb2luU3R5bGUgfHwgbGluZUVsZW1lbnRPcHRpb25zLmJvcmRlckpvaW5TdHlsZSksXG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRtZXRhLmRhdGFzZXQucGl2b3QoKTtcblxuXHRcdFx0Ly8gVXBkYXRlIFBvaW50c1xuXHRcdFx0aGVscGVycy5lYWNoKHBvaW50cywgZnVuY3Rpb24ocG9pbnQsIGluZGV4KSB7XG5cdFx0XHRcdG1lLnVwZGF0ZUVsZW1lbnQocG9pbnQsIGluZGV4LCByZXNldCk7XG5cdFx0XHR9LCBtZSk7XG5cblx0XHRcdC8vIFVwZGF0ZSBiZXppZXIgY29udHJvbCBwb2ludHNcblx0XHRcdG1lLnVwZGF0ZUJlemllckNvbnRyb2xQb2ludHMoKTtcblx0XHR9LFxuXHRcdHVwZGF0ZUVsZW1lbnQ6IGZ1bmN0aW9uKHBvaW50LCBpbmRleCwgcmVzZXQpIHtcblx0XHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0XHR2YXIgY3VzdG9tID0gcG9pbnQuY3VzdG9tIHx8IHt9O1xuXHRcdFx0dmFyIGRhdGFzZXQgPSBtZS5nZXREYXRhc2V0KCk7XG5cdFx0XHR2YXIgc2NhbGUgPSBtZS5jaGFydC5zY2FsZTtcblx0XHRcdHZhciBwb2ludEVsZW1lbnRPcHRpb25zID0gbWUuY2hhcnQub3B0aW9ucy5lbGVtZW50cy5wb2ludDtcblx0XHRcdHZhciBwb2ludFBvc2l0aW9uID0gc2NhbGUuZ2V0UG9pbnRQb3NpdGlvbkZvclZhbHVlKGluZGV4LCBkYXRhc2V0LmRhdGFbaW5kZXhdKTtcblxuXHRcdFx0Ly8gQ29tcGF0aWJpbGl0eTogSWYgdGhlIHByb3BlcnRpZXMgYXJlIGRlZmluZWQgd2l0aCBvbmx5IHRoZSBvbGQgbmFtZSwgdXNlIHRob3NlIHZhbHVlc1xuXHRcdFx0aWYgKChkYXRhc2V0LnJhZGl1cyAhPT0gdW5kZWZpbmVkKSAmJiAoZGF0YXNldC5wb2ludFJhZGl1cyA9PT0gdW5kZWZpbmVkKSkge1xuXHRcdFx0XHRkYXRhc2V0LnBvaW50UmFkaXVzID0gZGF0YXNldC5yYWRpdXM7XG5cdFx0XHR9XG5cdFx0XHRpZiAoKGRhdGFzZXQuaGl0UmFkaXVzICE9PSB1bmRlZmluZWQpICYmIChkYXRhc2V0LnBvaW50SGl0UmFkaXVzID09PSB1bmRlZmluZWQpKSB7XG5cdFx0XHRcdGRhdGFzZXQucG9pbnRIaXRSYWRpdXMgPSBkYXRhc2V0LmhpdFJhZGl1cztcblx0XHRcdH1cblxuXHRcdFx0aGVscGVycy5leHRlbmQocG9pbnQsIHtcblx0XHRcdFx0Ly8gVXRpbGl0eVxuXHRcdFx0XHRfZGF0YXNldEluZGV4OiBtZS5pbmRleCxcblx0XHRcdFx0X2luZGV4OiBpbmRleCxcblx0XHRcdFx0X3NjYWxlOiBzY2FsZSxcblxuXHRcdFx0XHQvLyBEZXNpcmVkIHZpZXcgcHJvcGVydGllc1xuXHRcdFx0XHRfbW9kZWw6IHtcblx0XHRcdFx0XHR4OiByZXNldCA/IHNjYWxlLnhDZW50ZXIgOiBwb2ludFBvc2l0aW9uLngsIC8vIHZhbHVlIG5vdCB1c2VkIGluIGRhdGFzZXQgc2NhbGUsIGJ1dCB3ZSB3YW50IGEgY29uc2lzdGVudCBBUEkgYmV0d2VlbiBzY2FsZXNcblx0XHRcdFx0XHR5OiByZXNldCA/IHNjYWxlLnlDZW50ZXIgOiBwb2ludFBvc2l0aW9uLnksXG5cblx0XHRcdFx0XHQvLyBBcHBlYXJhbmNlXG5cdFx0XHRcdFx0dGVuc2lvbjogY3VzdG9tLnRlbnNpb24gPyBjdXN0b20udGVuc2lvbiA6IGhlbHBlcnMudmFsdWVPckRlZmF1bHQoZGF0YXNldC5saW5lVGVuc2lvbiwgbWUuY2hhcnQub3B0aW9ucy5lbGVtZW50cy5saW5lLnRlbnNpb24pLFxuXHRcdFx0XHRcdHJhZGl1czogY3VzdG9tLnJhZGl1cyA/IGN1c3RvbS5yYWRpdXMgOiBoZWxwZXJzLnZhbHVlQXRJbmRleE9yRGVmYXVsdChkYXRhc2V0LnBvaW50UmFkaXVzLCBpbmRleCwgcG9pbnRFbGVtZW50T3B0aW9ucy5yYWRpdXMpLFxuXHRcdFx0XHRcdGJhY2tncm91bmRDb2xvcjogY3VzdG9tLmJhY2tncm91bmRDb2xvciA/IGN1c3RvbS5iYWNrZ3JvdW5kQ29sb3IgOiBoZWxwZXJzLnZhbHVlQXRJbmRleE9yRGVmYXVsdChkYXRhc2V0LnBvaW50QmFja2dyb3VuZENvbG9yLCBpbmRleCwgcG9pbnRFbGVtZW50T3B0aW9ucy5iYWNrZ3JvdW5kQ29sb3IpLFxuXHRcdFx0XHRcdGJvcmRlckNvbG9yOiBjdXN0b20uYm9yZGVyQ29sb3IgPyBjdXN0b20uYm9yZGVyQ29sb3IgOiBoZWxwZXJzLnZhbHVlQXRJbmRleE9yRGVmYXVsdChkYXRhc2V0LnBvaW50Qm9yZGVyQ29sb3IsIGluZGV4LCBwb2ludEVsZW1lbnRPcHRpb25zLmJvcmRlckNvbG9yKSxcblx0XHRcdFx0XHRib3JkZXJXaWR0aDogY3VzdG9tLmJvcmRlcldpZHRoID8gY3VzdG9tLmJvcmRlcldpZHRoIDogaGVscGVycy52YWx1ZUF0SW5kZXhPckRlZmF1bHQoZGF0YXNldC5wb2ludEJvcmRlcldpZHRoLCBpbmRleCwgcG9pbnRFbGVtZW50T3B0aW9ucy5ib3JkZXJXaWR0aCksXG5cdFx0XHRcdFx0cG9pbnRTdHlsZTogY3VzdG9tLnBvaW50U3R5bGUgPyBjdXN0b20ucG9pbnRTdHlsZSA6IGhlbHBlcnMudmFsdWVBdEluZGV4T3JEZWZhdWx0KGRhdGFzZXQucG9pbnRTdHlsZSwgaW5kZXgsIHBvaW50RWxlbWVudE9wdGlvbnMucG9pbnRTdHlsZSksXG5cdFx0XHRcdFx0cm90YXRpb246IGN1c3RvbS5yb3RhdGlvbiA/IGN1c3RvbS5yb3RhdGlvbiA6IGhlbHBlcnMudmFsdWVBdEluZGV4T3JEZWZhdWx0KGRhdGFzZXQucG9pbnRSb3RhdGlvbiwgaW5kZXgsIHBvaW50RWxlbWVudE9wdGlvbnMucm90YXRpb24pLFxuXG5cdFx0XHRcdFx0Ly8gVG9vbHRpcFxuXHRcdFx0XHRcdGhpdFJhZGl1czogY3VzdG9tLmhpdFJhZGl1cyA/IGN1c3RvbS5oaXRSYWRpdXMgOiBoZWxwZXJzLnZhbHVlQXRJbmRleE9yRGVmYXVsdChkYXRhc2V0LnBvaW50SGl0UmFkaXVzLCBpbmRleCwgcG9pbnRFbGVtZW50T3B0aW9ucy5oaXRSYWRpdXMpXG5cdFx0XHRcdH1cblx0XHRcdH0pO1xuXG5cdFx0XHRwb2ludC5fbW9kZWwuc2tpcCA9IGN1c3RvbS5za2lwID8gY3VzdG9tLnNraXAgOiAoaXNOYU4ocG9pbnQuX21vZGVsLngpIHx8IGlzTmFOKHBvaW50Ll9tb2RlbC55KSk7XG5cdFx0fSxcblx0XHR1cGRhdGVCZXppZXJDb250cm9sUG9pbnRzOiBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjaGFydEFyZWEgPSB0aGlzLmNoYXJ0LmNoYXJ0QXJlYTtcblx0XHRcdHZhciBtZXRhID0gdGhpcy5nZXRNZXRhKCk7XG5cblx0XHRcdGhlbHBlcnMuZWFjaChtZXRhLmRhdGEsIGZ1bmN0aW9uKHBvaW50LCBpbmRleCkge1xuXHRcdFx0XHR2YXIgbW9kZWwgPSBwb2ludC5fbW9kZWw7XG5cdFx0XHRcdHZhciBjb250cm9sUG9pbnRzID0gaGVscGVycy5zcGxpbmVDdXJ2ZShcblx0XHRcdFx0XHRoZWxwZXJzLnByZXZpb3VzSXRlbShtZXRhLmRhdGEsIGluZGV4LCB0cnVlKS5fbW9kZWwsXG5cdFx0XHRcdFx0bW9kZWwsXG5cdFx0XHRcdFx0aGVscGVycy5uZXh0SXRlbShtZXRhLmRhdGEsIGluZGV4LCB0cnVlKS5fbW9kZWwsXG5cdFx0XHRcdFx0bW9kZWwudGVuc2lvblxuXHRcdFx0XHQpO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgdGhlIGJlemllciBnb2luZyBvdXRzaWRlIG9mIHRoZSBib3VuZHMgb2YgdGhlIGdyYXBoXG5cdFx0XHRcdG1vZGVsLmNvbnRyb2xQb2ludFByZXZpb3VzWCA9IE1hdGgubWF4KE1hdGgubWluKGNvbnRyb2xQb2ludHMucHJldmlvdXMueCwgY2hhcnRBcmVhLnJpZ2h0KSwgY2hhcnRBcmVhLmxlZnQpO1xuXHRcdFx0XHRtb2RlbC5jb250cm9sUG9pbnRQcmV2aW91c1kgPSBNYXRoLm1heChNYXRoLm1pbihjb250cm9sUG9pbnRzLnByZXZpb3VzLnksIGNoYXJ0QXJlYS5ib3R0b20pLCBjaGFydEFyZWEudG9wKTtcblxuXHRcdFx0XHRtb2RlbC5jb250cm9sUG9pbnROZXh0WCA9IE1hdGgubWF4KE1hdGgubWluKGNvbnRyb2xQb2ludHMubmV4dC54LCBjaGFydEFyZWEucmlnaHQpLCBjaGFydEFyZWEubGVmdCk7XG5cdFx0XHRcdG1vZGVsLmNvbnRyb2xQb2ludE5leHRZID0gTWF0aC5tYXgoTWF0aC5taW4oY29udHJvbFBvaW50cy5uZXh0LnksIGNoYXJ0QXJlYS5ib3R0b20pLCBjaGFydEFyZWEudG9wKTtcblxuXHRcdFx0XHQvLyBOb3cgcGl2b3QgdGhlIHBvaW50IGZvciBhbmltYXRpb25cblx0XHRcdFx0cG9pbnQucGl2b3QoKTtcblx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRzZXRIb3ZlclN0eWxlOiBmdW5jdGlvbihwb2ludCkge1xuXHRcdFx0Ly8gUG9pbnRcblx0XHRcdHZhciBkYXRhc2V0ID0gdGhpcy5jaGFydC5kYXRhLmRhdGFzZXRzW3BvaW50Ll9kYXRhc2V0SW5kZXhdO1xuXHRcdFx0dmFyIGN1c3RvbSA9IHBvaW50LmN1c3RvbSB8fCB7fTtcblx0XHRcdHZhciBpbmRleCA9IHBvaW50Ll9pbmRleDtcblx0XHRcdHZhciBtb2RlbCA9IHBvaW50Ll9tb2RlbDtcblxuXHRcdFx0cG9pbnQuJHByZXZpb3VzU3R5bGUgPSB7XG5cdFx0XHRcdGJhY2tncm91bmRDb2xvcjogbW9kZWwuYmFja2dyb3VuZENvbG9yLFxuXHRcdFx0XHRib3JkZXJDb2xvcjogbW9kZWwuYm9yZGVyQ29sb3IsXG5cdFx0XHRcdGJvcmRlcldpZHRoOiBtb2RlbC5ib3JkZXJXaWR0aCxcblx0XHRcdFx0cmFkaXVzOiBtb2RlbC5yYWRpdXNcblx0XHRcdH07XG5cblx0XHRcdG1vZGVsLnJhZGl1cyA9IGN1c3RvbS5ob3ZlclJhZGl1cyA/IGN1c3RvbS5ob3ZlclJhZGl1cyA6IGhlbHBlcnMudmFsdWVBdEluZGV4T3JEZWZhdWx0KGRhdGFzZXQucG9pbnRIb3ZlclJhZGl1cywgaW5kZXgsIHRoaXMuY2hhcnQub3B0aW9ucy5lbGVtZW50cy5wb2ludC5ob3ZlclJhZGl1cyk7XG5cdFx0XHRtb2RlbC5iYWNrZ3JvdW5kQ29sb3IgPSBjdXN0b20uaG92ZXJCYWNrZ3JvdW5kQ29sb3IgPyBjdXN0b20uaG92ZXJCYWNrZ3JvdW5kQ29sb3IgOiBoZWxwZXJzLnZhbHVlQXRJbmRleE9yRGVmYXVsdChkYXRhc2V0LnBvaW50SG92ZXJCYWNrZ3JvdW5kQ29sb3IsIGluZGV4LCBoZWxwZXJzLmdldEhvdmVyQ29sb3IobW9kZWwuYmFja2dyb3VuZENvbG9yKSk7XG5cdFx0XHRtb2RlbC5ib3JkZXJDb2xvciA9IGN1c3RvbS5ob3ZlckJvcmRlckNvbG9yID8gY3VzdG9tLmhvdmVyQm9yZGVyQ29sb3IgOiBoZWxwZXJzLnZhbHVlQXRJbmRleE9yRGVmYXVsdChkYXRhc2V0LnBvaW50SG92ZXJCb3JkZXJDb2xvciwgaW5kZXgsIGhlbHBlcnMuZ2V0SG92ZXJDb2xvcihtb2RlbC5ib3JkZXJDb2xvcikpO1xuXHRcdFx0bW9kZWwuYm9yZGVyV2lkdGggPSBjdXN0b20uaG92ZXJCb3JkZXJXaWR0aCA/IGN1c3RvbS5ob3ZlckJvcmRlcldpZHRoIDogaGVscGVycy52YWx1ZUF0SW5kZXhPckRlZmF1bHQoZGF0YXNldC5wb2ludEhvdmVyQm9yZGVyV2lkdGgsIGluZGV4LCBtb2RlbC5ib3JkZXJXaWR0aCk7XG5cdFx0fSxcblx0fSk7XG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG52YXIgZGVmYXVsdHMgPSByZXF1aXJlKCcuLi9jb3JlL2NvcmUuZGVmYXVsdHMnKTtcblxuZGVmYXVsdHMuX3NldCgnc2NhdHRlcicsIHtcblx0aG92ZXI6IHtcblx0XHRtb2RlOiAnc2luZ2xlJ1xuXHR9LFxuXG5cdHNjYWxlczoge1xuXHRcdHhBeGVzOiBbe1xuXHRcdFx0aWQ6ICd4LWF4aXMtMScsICAgIC8vIG5lZWQgYW4gSUQgc28gZGF0YXNldHMgY2FuIHJlZmVyZW5jZSB0aGUgc2NhbGVcblx0XHRcdHR5cGU6ICdsaW5lYXInLCAgICAvLyBzY2F0dGVyIHNob3VsZCBub3QgdXNlIGEgY2F0ZWdvcnkgYXhpc1xuXHRcdFx0cG9zaXRpb246ICdib3R0b20nXG5cdFx0fV0sXG5cdFx0eUF4ZXM6IFt7XG5cdFx0XHRpZDogJ3ktYXhpcy0xJyxcblx0XHRcdHR5cGU6ICdsaW5lYXInLFxuXHRcdFx0cG9zaXRpb246ICdsZWZ0J1xuXHRcdH1dXG5cdH0sXG5cblx0c2hvd0xpbmVzOiBmYWxzZSxcblxuXHR0b29sdGlwczoge1xuXHRcdGNhbGxiYWNrczoge1xuXHRcdFx0dGl0bGU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gJyc7ICAgICAvLyBkb2Vzbid0IG1ha2Ugc2Vuc2UgZm9yIHNjYXR0ZXIgc2luY2UgZGF0YSBhcmUgZm9ybWF0dGVkIGFzIGEgcG9pbnRcblx0XHRcdH0sXG5cdFx0XHRsYWJlbDogZnVuY3Rpb24oaXRlbSkge1xuXHRcdFx0XHRyZXR1cm4gJygnICsgaXRlbS54TGFiZWwgKyAnLCAnICsgaXRlbS55TGFiZWwgKyAnKSc7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59KTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihDaGFydCkge1xuXG5cdC8vIFNjYXR0ZXIgY2hhcnRzIHVzZSBsaW5lIGNvbnRyb2xsZXJzXG5cdENoYXJ0LmNvbnRyb2xsZXJzLnNjYXR0ZXIgPSBDaGFydC5jb250cm9sbGVycy5saW5lO1xuXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKENoYXJ0KSB7XG5cblx0Q2hhcnQuQmFyID0gZnVuY3Rpb24oY29udGV4dCwgY29uZmlnKSB7XG5cdFx0Y29uZmlnLnR5cGUgPSAnYmFyJztcblxuXHRcdHJldHVybiBuZXcgQ2hhcnQoY29udGV4dCwgY29uZmlnKTtcblx0fTtcblxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihDaGFydCkge1xuXG5cdENoYXJ0LkJ1YmJsZSA9IGZ1bmN0aW9uKGNvbnRleHQsIGNvbmZpZykge1xuXHRcdGNvbmZpZy50eXBlID0gJ2J1YmJsZSc7XG5cdFx0cmV0dXJuIG5ldyBDaGFydChjb250ZXh0LCBjb25maWcpO1xuXHR9O1xuXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKENoYXJ0KSB7XG5cblx0Q2hhcnQuRG91Z2hudXQgPSBmdW5jdGlvbihjb250ZXh0LCBjb25maWcpIHtcblx0XHRjb25maWcudHlwZSA9ICdkb3VnaG51dCc7XG5cblx0XHRyZXR1cm4gbmV3IENoYXJ0KGNvbnRleHQsIGNvbmZpZyk7XG5cdH07XG5cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQ2hhcnQpIHtcblxuXHRDaGFydC5MaW5lID0gZnVuY3Rpb24oY29udGV4dCwgY29uZmlnKSB7XG5cdFx0Y29uZmlnLnR5cGUgPSAnbGluZSc7XG5cblx0XHRyZXR1cm4gbmV3IENoYXJ0KGNvbnRleHQsIGNvbmZpZyk7XG5cdH07XG5cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQ2hhcnQpIHtcblxuXHRDaGFydC5Qb2xhckFyZWEgPSBmdW5jdGlvbihjb250ZXh0LCBjb25maWcpIHtcblx0XHRjb25maWcudHlwZSA9ICdwb2xhckFyZWEnO1xuXG5cdFx0cmV0dXJuIG5ldyBDaGFydChjb250ZXh0LCBjb25maWcpO1xuXHR9O1xuXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKENoYXJ0KSB7XG5cblx0Q2hhcnQuUmFkYXIgPSBmdW5jdGlvbihjb250ZXh0LCBjb25maWcpIHtcblx0XHRjb25maWcudHlwZSA9ICdyYWRhcic7XG5cblx0XHRyZXR1cm4gbmV3IENoYXJ0KGNvbnRleHQsIGNvbmZpZyk7XG5cdH07XG5cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oQ2hhcnQpIHtcblx0Q2hhcnQuU2NhdHRlciA9IGZ1bmN0aW9uKGNvbnRleHQsIGNvbmZpZykge1xuXHRcdGNvbmZpZy50eXBlID0gJ3NjYXR0ZXInO1xuXHRcdHJldHVybiBuZXcgQ2hhcnQoY29udGV4dCwgY29uZmlnKTtcblx0fTtcbn07XG4iLCIvKipcbiAqIFBsdWdpbiBiYXNlZCBvbiBkaXNjdXNzaW9uIGZyb20gdGhlIGZvbGxvd2luZyBDaGFydC5qcyBpc3N1ZXM6XG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL2lzc3Vlcy8yMzgwI2lzc3VlY29tbWVudC0yNzk5NjE1NjlcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2NoYXJ0anMvQ2hhcnQuanMvaXNzdWVzLzI0NDAjaXNzdWVjb21tZW50LTI1NjQ2MTg5N1xuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vY29yZS9jb3JlLmRlZmF1bHRzJyk7XG52YXIgZWxlbWVudHMgPSByZXF1aXJlKCcuLi9lbGVtZW50cy9pbmRleCcpO1xudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2luZGV4Jyk7XG5cbmRlZmF1bHRzLl9zZXQoJ2dsb2JhbCcsIHtcblx0cGx1Z2luczoge1xuXHRcdGZpbGxlcjoge1xuXHRcdFx0cHJvcGFnYXRlOiB0cnVlXG5cdFx0fVxuXHR9XG59KTtcblxudmFyIG1hcHBlcnMgPSB7XG5cdGRhdGFzZXQ6IGZ1bmN0aW9uKHNvdXJjZSkge1xuXHRcdHZhciBpbmRleCA9IHNvdXJjZS5maWxsO1xuXHRcdHZhciBjaGFydCA9IHNvdXJjZS5jaGFydDtcblx0XHR2YXIgbWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGluZGV4KTtcblx0XHR2YXIgdmlzaWJsZSA9IG1ldGEgJiYgY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpbmRleCk7XG5cdFx0dmFyIHBvaW50cyA9ICh2aXNpYmxlICYmIG1ldGEuZGF0YXNldC5fY2hpbGRyZW4pIHx8IFtdO1xuXHRcdHZhciBsZW5ndGggPSBwb2ludHMubGVuZ3RoIHx8IDA7XG5cblx0XHRyZXR1cm4gIWxlbmd0aCA/IG51bGwgOiBmdW5jdGlvbihwb2ludCwgaSkge1xuXHRcdFx0cmV0dXJuIChpIDwgbGVuZ3RoICYmIHBvaW50c1tpXS5fdmlldykgfHwgbnVsbDtcblx0XHR9O1xuXHR9LFxuXG5cdGJvdW5kYXJ5OiBmdW5jdGlvbihzb3VyY2UpIHtcblx0XHR2YXIgYm91bmRhcnkgPSBzb3VyY2UuYm91bmRhcnk7XG5cdFx0dmFyIHggPSBib3VuZGFyeSA/IGJvdW5kYXJ5LnggOiBudWxsO1xuXHRcdHZhciB5ID0gYm91bmRhcnkgPyBib3VuZGFyeS55IDogbnVsbDtcblxuXHRcdHJldHVybiBmdW5jdGlvbihwb2ludCkge1xuXHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0eDogeCA9PT0gbnVsbCA/IHBvaW50LnggOiB4LFxuXHRcdFx0XHR5OiB5ID09PSBudWxsID8gcG9pbnQueSA6IHksXG5cdFx0XHR9O1xuXHRcdH07XG5cdH1cbn07XG5cbi8vIEB0b2RvIGlmIChmaWxsWzBdID09PSAnIycpXG5mdW5jdGlvbiBkZWNvZGVGaWxsKGVsLCBpbmRleCwgY291bnQpIHtcblx0dmFyIG1vZGVsID0gZWwuX21vZGVsIHx8IHt9O1xuXHR2YXIgZmlsbCA9IG1vZGVsLmZpbGw7XG5cdHZhciB0YXJnZXQ7XG5cblx0aWYgKGZpbGwgPT09IHVuZGVmaW5lZCkge1xuXHRcdGZpbGwgPSAhIW1vZGVsLmJhY2tncm91bmRDb2xvcjtcblx0fVxuXG5cdGlmIChmaWxsID09PSBmYWxzZSB8fCBmaWxsID09PSBudWxsKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKGZpbGwgPT09IHRydWUpIHtcblx0XHRyZXR1cm4gJ29yaWdpbic7XG5cdH1cblxuXHR0YXJnZXQgPSBwYXJzZUZsb2F0KGZpbGwsIDEwKTtcblx0aWYgKGlzRmluaXRlKHRhcmdldCkgJiYgTWF0aC5mbG9vcih0YXJnZXQpID09PSB0YXJnZXQpIHtcblx0XHRpZiAoZmlsbFswXSA9PT0gJy0nIHx8IGZpbGxbMF0gPT09ICcrJykge1xuXHRcdFx0dGFyZ2V0ID0gaW5kZXggKyB0YXJnZXQ7XG5cdFx0fVxuXG5cdFx0aWYgKHRhcmdldCA9PT0gaW5kZXggfHwgdGFyZ2V0IDwgMCB8fCB0YXJnZXQgPj0gY291bnQpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGFyZ2V0O1xuXHR9XG5cblx0c3dpdGNoIChmaWxsKSB7XG5cdC8vIGNvbXBhdGliaWxpdHlcblx0Y2FzZSAnYm90dG9tJzpcblx0XHRyZXR1cm4gJ3N0YXJ0Jztcblx0Y2FzZSAndG9wJzpcblx0XHRyZXR1cm4gJ2VuZCc7XG5cdGNhc2UgJ3plcm8nOlxuXHRcdHJldHVybiAnb3JpZ2luJztcblx0Ly8gc3VwcG9ydGVkIGJvdW5kYXJpZXNcblx0Y2FzZSAnb3JpZ2luJzpcblx0Y2FzZSAnc3RhcnQnOlxuXHRjYXNlICdlbmQnOlxuXHRcdHJldHVybiBmaWxsO1xuXHQvLyBpbnZhbGlkIGZpbGwgdmFsdWVzXG5cdGRlZmF1bHQ6XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNvbXB1dGVCb3VuZGFyeShzb3VyY2UpIHtcblx0dmFyIG1vZGVsID0gc291cmNlLmVsLl9tb2RlbCB8fCB7fTtcblx0dmFyIHNjYWxlID0gc291cmNlLmVsLl9zY2FsZSB8fCB7fTtcblx0dmFyIGZpbGwgPSBzb3VyY2UuZmlsbDtcblx0dmFyIHRhcmdldCA9IG51bGw7XG5cdHZhciBob3Jpem9udGFsO1xuXG5cdGlmIChpc0Zpbml0ZShmaWxsKSkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gQmFja3dhcmQgY29tcGF0aWJpbGl0eTogdW50aWwgdjMsIHdlIHN0aWxsIG5lZWQgdG8gc3VwcG9ydCBib3VuZGFyeSB2YWx1ZXMgc2V0IG9uXG5cdC8vIHRoZSBtb2RlbCAoc2NhbGVUb3AsIHNjYWxlQm90dG9tIGFuZCBzY2FsZVplcm8pIGJlY2F1c2Ugc29tZSBleHRlcm5hbCBwbHVnaW5zIGFuZFxuXHQvLyBjb250cm9sbGVycyBtaWdodCBzdGlsbCB1c2UgaXQgKGUuZy4gdGhlIFNtaXRoIGNoYXJ0KS5cblxuXHRpZiAoZmlsbCA9PT0gJ3N0YXJ0Jykge1xuXHRcdHRhcmdldCA9IG1vZGVsLnNjYWxlQm90dG9tID09PSB1bmRlZmluZWQgPyBzY2FsZS5ib3R0b20gOiBtb2RlbC5zY2FsZUJvdHRvbTtcblx0fSBlbHNlIGlmIChmaWxsID09PSAnZW5kJykge1xuXHRcdHRhcmdldCA9IG1vZGVsLnNjYWxlVG9wID09PSB1bmRlZmluZWQgPyBzY2FsZS50b3AgOiBtb2RlbC5zY2FsZVRvcDtcblx0fSBlbHNlIGlmIChtb2RlbC5zY2FsZVplcm8gIT09IHVuZGVmaW5lZCkge1xuXHRcdHRhcmdldCA9IG1vZGVsLnNjYWxlWmVybztcblx0fSBlbHNlIGlmIChzY2FsZS5nZXRCYXNlUG9zaXRpb24pIHtcblx0XHR0YXJnZXQgPSBzY2FsZS5nZXRCYXNlUG9zaXRpb24oKTtcblx0fSBlbHNlIGlmIChzY2FsZS5nZXRCYXNlUGl4ZWwpIHtcblx0XHR0YXJnZXQgPSBzY2FsZS5nZXRCYXNlUGl4ZWwoKTtcblx0fVxuXG5cdGlmICh0YXJnZXQgIT09IHVuZGVmaW5lZCAmJiB0YXJnZXQgIT09IG51bGwpIHtcblx0XHRpZiAodGFyZ2V0LnggIT09IHVuZGVmaW5lZCAmJiB0YXJnZXQueSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRyZXR1cm4gdGFyZ2V0O1xuXHRcdH1cblxuXHRcdGlmICh0eXBlb2YgdGFyZ2V0ID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZSh0YXJnZXQpKSB7XG5cdFx0XHRob3Jpem9udGFsID0gc2NhbGUuaXNIb3Jpem9udGFsKCk7XG5cdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHR4OiBob3Jpem9udGFsID8gdGFyZ2V0IDogbnVsbCxcblx0XHRcdFx0eTogaG9yaXpvbnRhbCA/IG51bGwgOiB0YXJnZXRcblx0XHRcdH07XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIG51bGw7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVUYXJnZXQoc291cmNlcywgaW5kZXgsIHByb3BhZ2F0ZSkge1xuXHR2YXIgc291cmNlID0gc291cmNlc1tpbmRleF07XG5cdHZhciBmaWxsID0gc291cmNlLmZpbGw7XG5cdHZhciB2aXNpdGVkID0gW2luZGV4XTtcblx0dmFyIHRhcmdldDtcblxuXHRpZiAoIXByb3BhZ2F0ZSkge1xuXHRcdHJldHVybiBmaWxsO1xuXHR9XG5cblx0d2hpbGUgKGZpbGwgIT09IGZhbHNlICYmIHZpc2l0ZWQuaW5kZXhPZihmaWxsKSA9PT0gLTEpIHtcblx0XHRpZiAoIWlzRmluaXRlKGZpbGwpKSB7XG5cdFx0XHRyZXR1cm4gZmlsbDtcblx0XHR9XG5cblx0XHR0YXJnZXQgPSBzb3VyY2VzW2ZpbGxdO1xuXHRcdGlmICghdGFyZ2V0KSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0aWYgKHRhcmdldC52aXNpYmxlKSB7XG5cdFx0XHRyZXR1cm4gZmlsbDtcblx0XHR9XG5cblx0XHR2aXNpdGVkLnB1c2goZmlsbCk7XG5cdFx0ZmlsbCA9IHRhcmdldC5maWxsO1xuXHR9XG5cblx0cmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVNYXBwZXIoc291cmNlKSB7XG5cdHZhciBmaWxsID0gc291cmNlLmZpbGw7XG5cdHZhciB0eXBlID0gJ2RhdGFzZXQnO1xuXG5cdGlmIChmaWxsID09PSBmYWxzZSkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0aWYgKCFpc0Zpbml0ZShmaWxsKSkge1xuXHRcdHR5cGUgPSAnYm91bmRhcnknO1xuXHR9XG5cblx0cmV0dXJuIG1hcHBlcnNbdHlwZV0oc291cmNlKTtcbn1cblxuZnVuY3Rpb24gaXNEcmF3YWJsZShwb2ludCkge1xuXHRyZXR1cm4gcG9pbnQgJiYgIXBvaW50LnNraXA7XG59XG5cbmZ1bmN0aW9uIGRyYXdBcmVhKGN0eCwgY3VydmUwLCBjdXJ2ZTEsIGxlbjAsIGxlbjEpIHtcblx0dmFyIGk7XG5cblx0aWYgKCFsZW4wIHx8ICFsZW4xKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Ly8gYnVpbGRpbmcgZmlyc3QgYXJlYSBjdXJ2ZSAobm9ybWFsKVxuXHRjdHgubW92ZVRvKGN1cnZlMFswXS54LCBjdXJ2ZTBbMF0ueSk7XG5cdGZvciAoaSA9IDE7IGkgPCBsZW4wOyArK2kpIHtcblx0XHRoZWxwZXJzLmNhbnZhcy5saW5lVG8oY3R4LCBjdXJ2ZTBbaSAtIDFdLCBjdXJ2ZTBbaV0pO1xuXHR9XG5cblx0Ly8gam9pbmluZyB0aGUgdHdvIGFyZWEgY3VydmVzXG5cdGN0eC5saW5lVG8oY3VydmUxW2xlbjEgLSAxXS54LCBjdXJ2ZTFbbGVuMSAtIDFdLnkpO1xuXG5cdC8vIGJ1aWxkaW5nIG9wcG9zaXRlIGFyZWEgY3VydmUgKHJldmVyc2UpXG5cdGZvciAoaSA9IGxlbjEgLSAxOyBpID4gMDsgLS1pKSB7XG5cdFx0aGVscGVycy5jYW52YXMubGluZVRvKGN0eCwgY3VydmUxW2ldLCBjdXJ2ZTFbaSAtIDFdLCB0cnVlKTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb0ZpbGwoY3R4LCBwb2ludHMsIG1hcHBlciwgdmlldywgY29sb3IsIGxvb3ApIHtcblx0dmFyIGNvdW50ID0gcG9pbnRzLmxlbmd0aDtcblx0dmFyIHNwYW4gPSB2aWV3LnNwYW5HYXBzO1xuXHR2YXIgY3VydmUwID0gW107XG5cdHZhciBjdXJ2ZTEgPSBbXTtcblx0dmFyIGxlbjAgPSAwO1xuXHR2YXIgbGVuMSA9IDA7XG5cdHZhciBpLCBpbGVuLCBpbmRleCwgcDAsIHAxLCBkMCwgZDE7XG5cblx0Y3R4LmJlZ2luUGF0aCgpO1xuXG5cdGZvciAoaSA9IDAsIGlsZW4gPSAoY291bnQgKyAhIWxvb3ApOyBpIDwgaWxlbjsgKytpKSB7XG5cdFx0aW5kZXggPSBpICUgY291bnQ7XG5cdFx0cDAgPSBwb2ludHNbaW5kZXhdLl92aWV3O1xuXHRcdHAxID0gbWFwcGVyKHAwLCBpbmRleCwgdmlldyk7XG5cdFx0ZDAgPSBpc0RyYXdhYmxlKHAwKTtcblx0XHRkMSA9IGlzRHJhd2FibGUocDEpO1xuXG5cdFx0aWYgKGQwICYmIGQxKSB7XG5cdFx0XHRsZW4wID0gY3VydmUwLnB1c2gocDApO1xuXHRcdFx0bGVuMSA9IGN1cnZlMS5wdXNoKHAxKTtcblx0XHR9IGVsc2UgaWYgKGxlbjAgJiYgbGVuMSkge1xuXHRcdFx0aWYgKCFzcGFuKSB7XG5cdFx0XHRcdGRyYXdBcmVhKGN0eCwgY3VydmUwLCBjdXJ2ZTEsIGxlbjAsIGxlbjEpO1xuXHRcdFx0XHRsZW4wID0gbGVuMSA9IDA7XG5cdFx0XHRcdGN1cnZlMCA9IFtdO1xuXHRcdFx0XHRjdXJ2ZTEgPSBbXTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGlmIChkMCkge1xuXHRcdFx0XHRcdGN1cnZlMC5wdXNoKHAwKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoZDEpIHtcblx0XHRcdFx0XHRjdXJ2ZTEucHVzaChwMSk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRkcmF3QXJlYShjdHgsIGN1cnZlMCwgY3VydmUxLCBsZW4wLCBsZW4xKTtcblxuXHRjdHguY2xvc2VQYXRoKCk7XG5cdGN0eC5maWxsU3R5bGUgPSBjb2xvcjtcblx0Y3R4LmZpbGwoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG5cdGlkOiAnZmlsbGVyJyxcblxuXHRhZnRlckRhdGFzZXRzVXBkYXRlOiBmdW5jdGlvbihjaGFydCwgb3B0aW9ucykge1xuXHRcdHZhciBjb3VudCA9IChjaGFydC5kYXRhLmRhdGFzZXRzIHx8IFtdKS5sZW5ndGg7XG5cdFx0dmFyIHByb3BhZ2F0ZSA9IG9wdGlvbnMucHJvcGFnYXRlO1xuXHRcdHZhciBzb3VyY2VzID0gW107XG5cdFx0dmFyIG1ldGEsIGksIGVsLCBzb3VyY2U7XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgY291bnQ7ICsraSkge1xuXHRcdFx0bWV0YSA9IGNoYXJ0LmdldERhdGFzZXRNZXRhKGkpO1xuXHRcdFx0ZWwgPSBtZXRhLmRhdGFzZXQ7XG5cdFx0XHRzb3VyY2UgPSBudWxsO1xuXG5cdFx0XHRpZiAoZWwgJiYgZWwuX21vZGVsICYmIGVsIGluc3RhbmNlb2YgZWxlbWVudHMuTGluZSkge1xuXHRcdFx0XHRzb3VyY2UgPSB7XG5cdFx0XHRcdFx0dmlzaWJsZTogY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpKSxcblx0XHRcdFx0XHRmaWxsOiBkZWNvZGVGaWxsKGVsLCBpLCBjb3VudCksXG5cdFx0XHRcdFx0Y2hhcnQ6IGNoYXJ0LFxuXHRcdFx0XHRcdGVsOiBlbFxuXHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRtZXRhLiRmaWxsZXIgPSBzb3VyY2U7XG5cdFx0XHRzb3VyY2VzLnB1c2goc291cmNlKTtcblx0XHR9XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgY291bnQ7ICsraSkge1xuXHRcdFx0c291cmNlID0gc291cmNlc1tpXTtcblx0XHRcdGlmICghc291cmNlKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzb3VyY2UuZmlsbCA9IHJlc29sdmVUYXJnZXQoc291cmNlcywgaSwgcHJvcGFnYXRlKTtcblx0XHRcdHNvdXJjZS5ib3VuZGFyeSA9IGNvbXB1dGVCb3VuZGFyeShzb3VyY2UpO1xuXHRcdFx0c291cmNlLm1hcHBlciA9IGNyZWF0ZU1hcHBlcihzb3VyY2UpO1xuXHRcdH1cblx0fSxcblxuXHRiZWZvcmVEYXRhc2V0RHJhdzogZnVuY3Rpb24oY2hhcnQsIGFyZ3MpIHtcblx0XHR2YXIgbWV0YSA9IGFyZ3MubWV0YS4kZmlsbGVyO1xuXHRcdGlmICghbWV0YSkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBjdHggPSBjaGFydC5jdHg7XG5cdFx0dmFyIGVsID0gbWV0YS5lbDtcblx0XHR2YXIgdmlldyA9IGVsLl92aWV3O1xuXHRcdHZhciBwb2ludHMgPSBlbC5fY2hpbGRyZW4gfHwgW107XG5cdFx0dmFyIG1hcHBlciA9IG1ldGEubWFwcGVyO1xuXHRcdHZhciBjb2xvciA9IHZpZXcuYmFja2dyb3VuZENvbG9yIHx8IGRlZmF1bHRzLmdsb2JhbC5kZWZhdWx0Q29sb3I7XG5cblx0XHRpZiAobWFwcGVyICYmIGNvbG9yICYmIHBvaW50cy5sZW5ndGgpIHtcblx0XHRcdGhlbHBlcnMuY2FudmFzLmNsaXBBcmVhKGN0eCwgY2hhcnQuY2hhcnRBcmVhKTtcblx0XHRcdGRvRmlsbChjdHgsIHBvaW50cywgbWFwcGVyLCB2aWV3LCBjb2xvciwgZWwuX2xvb3ApO1xuXHRcdFx0aGVscGVycy5jYW52YXMudW5jbGlwQXJlYShjdHgpO1xuXHRcdH1cblx0fVxufTtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi4vY29yZS9jb3JlLmRlZmF1bHRzJyk7XG52YXIgRWxlbWVudCA9IHJlcXVpcmUoJy4uL2NvcmUvY29yZS5lbGVtZW50Jyk7XG52YXIgaGVscGVycyA9IHJlcXVpcmUoJy4uL2hlbHBlcnMvaW5kZXgnKTtcbnZhciBsYXlvdXRzID0gcmVxdWlyZSgnLi4vY29yZS9jb3JlLmxheW91dHMnKTtcblxudmFyIG5vb3AgPSBoZWxwZXJzLm5vb3A7XG5cbmRlZmF1bHRzLl9zZXQoJ2dsb2JhbCcsIHtcblx0bGVnZW5kOiB7XG5cdFx0ZGlzcGxheTogdHJ1ZSxcblx0XHRwb3NpdGlvbjogJ3RvcCcsXG5cdFx0ZnVsbFdpZHRoOiB0cnVlLFxuXHRcdHJldmVyc2U6IGZhbHNlLFxuXHRcdHdlaWdodDogMTAwMCxcblxuXHRcdC8vIGEgY2FsbGJhY2sgdGhhdCB3aWxsIGhhbmRsZVxuXHRcdG9uQ2xpY2s6IGZ1bmN0aW9uKGUsIGxlZ2VuZEl0ZW0pIHtcblx0XHRcdHZhciBpbmRleCA9IGxlZ2VuZEl0ZW0uZGF0YXNldEluZGV4O1xuXHRcdFx0dmFyIGNpID0gdGhpcy5jaGFydDtcblx0XHRcdHZhciBtZXRhID0gY2kuZ2V0RGF0YXNldE1ldGEoaW5kZXgpO1xuXG5cdFx0XHQvLyBTZWUgY29udHJvbGxlci5pc0RhdGFzZXRWaXNpYmxlIGNvbW1lbnRcblx0XHRcdG1ldGEuaGlkZGVuID0gbWV0YS5oaWRkZW4gPT09IG51bGwgPyAhY2kuZGF0YS5kYXRhc2V0c1tpbmRleF0uaGlkZGVuIDogbnVsbDtcblxuXHRcdFx0Ly8gV2UgaGlkIGEgZGF0YXNldCAuLi4gcmVyZW5kZXIgdGhlIGNoYXJ0XG5cdFx0XHRjaS51cGRhdGUoKTtcblx0XHR9LFxuXG5cdFx0b25Ib3ZlcjogbnVsbCxcblxuXHRcdGxhYmVsczoge1xuXHRcdFx0Ym94V2lkdGg6IDQwLFxuXHRcdFx0cGFkZGluZzogMTAsXG5cdFx0XHQvLyBHZW5lcmF0ZXMgbGFiZWxzIHNob3duIGluIHRoZSBsZWdlbmRcblx0XHRcdC8vIFZhbGlkIHByb3BlcnRpZXMgdG8gcmV0dXJuOlxuXHRcdFx0Ly8gdGV4dCA6IHRleHQgdG8gZGlzcGxheVxuXHRcdFx0Ly8gZmlsbFN0eWxlIDogZmlsbCBvZiBjb2xvdXJlZCBib3hcblx0XHRcdC8vIHN0cm9rZVN0eWxlOiBzdHJva2Ugb2YgY29sb3VyZWQgYm94XG5cdFx0XHQvLyBoaWRkZW4gOiBpZiB0aGlzIGxlZ2VuZCBpdGVtIHJlZmVycyB0byBhIGhpZGRlbiBpdGVtXG5cdFx0XHQvLyBsaW5lQ2FwIDogY2FwIHN0eWxlIGZvciBsaW5lXG5cdFx0XHQvLyBsaW5lRGFzaFxuXHRcdFx0Ly8gbGluZURhc2hPZmZzZXQgOlxuXHRcdFx0Ly8gbGluZUpvaW4gOlxuXHRcdFx0Ly8gbGluZVdpZHRoIDpcblx0XHRcdGdlbmVyYXRlTGFiZWxzOiBmdW5jdGlvbihjaGFydCkge1xuXHRcdFx0XHR2YXIgZGF0YSA9IGNoYXJ0LmRhdGE7XG5cdFx0XHRcdHJldHVybiBoZWxwZXJzLmlzQXJyYXkoZGF0YS5kYXRhc2V0cykgPyBkYXRhLmRhdGFzZXRzLm1hcChmdW5jdGlvbihkYXRhc2V0LCBpKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHtcblx0XHRcdFx0XHRcdHRleHQ6IGRhdGFzZXQubGFiZWwsXG5cdFx0XHRcdFx0XHRmaWxsU3R5bGU6ICghaGVscGVycy5pc0FycmF5KGRhdGFzZXQuYmFja2dyb3VuZENvbG9yKSA/IGRhdGFzZXQuYmFja2dyb3VuZENvbG9yIDogZGF0YXNldC5iYWNrZ3JvdW5kQ29sb3JbMF0pLFxuXHRcdFx0XHRcdFx0aGlkZGVuOiAhY2hhcnQuaXNEYXRhc2V0VmlzaWJsZShpKSxcblx0XHRcdFx0XHRcdGxpbmVDYXA6IGRhdGFzZXQuYm9yZGVyQ2FwU3R5bGUsXG5cdFx0XHRcdFx0XHRsaW5lRGFzaDogZGF0YXNldC5ib3JkZXJEYXNoLFxuXHRcdFx0XHRcdFx0bGluZURhc2hPZmZzZXQ6IGRhdGFzZXQuYm9yZGVyRGFzaE9mZnNldCxcblx0XHRcdFx0XHRcdGxpbmVKb2luOiBkYXRhc2V0LmJvcmRlckpvaW5TdHlsZSxcblx0XHRcdFx0XHRcdGxpbmVXaWR0aDogZGF0YXNldC5ib3JkZXJXaWR0aCxcblx0XHRcdFx0XHRcdHN0cm9rZVN0eWxlOiBkYXRhc2V0LmJvcmRlckNvbG9yLFxuXHRcdFx0XHRcdFx0cG9pbnRTdHlsZTogZGF0YXNldC5wb2ludFN0eWxlLFxuXG5cdFx0XHRcdFx0XHQvLyBCZWxvdyBpcyBleHRyYSBkYXRhIHVzZWQgZm9yIHRvZ2dsaW5nIHRoZSBkYXRhc2V0c1xuXHRcdFx0XHRcdFx0ZGF0YXNldEluZGV4OiBpXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fSwgdGhpcykgOiBbXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0bGVnZW5kQ2FsbGJhY2s6IGZ1bmN0aW9uKGNoYXJ0KSB7XG5cdFx0dmFyIHRleHQgPSBbXTtcblx0XHR0ZXh0LnB1c2goJzx1bCBjbGFzcz1cIicgKyBjaGFydC5pZCArICctbGVnZW5kXCI+Jyk7XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBjaGFydC5kYXRhLmRhdGFzZXRzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR0ZXh0LnB1c2goJzxsaT48c3BhbiBzdHlsZT1cImJhY2tncm91bmQtY29sb3I6JyArIGNoYXJ0LmRhdGEuZGF0YXNldHNbaV0uYmFja2dyb3VuZENvbG9yICsgJ1wiPjwvc3Bhbj4nKTtcblx0XHRcdGlmIChjaGFydC5kYXRhLmRhdGFzZXRzW2ldLmxhYmVsKSB7XG5cdFx0XHRcdHRleHQucHVzaChjaGFydC5kYXRhLmRhdGFzZXRzW2ldLmxhYmVsKTtcblx0XHRcdH1cblx0XHRcdHRleHQucHVzaCgnPC9saT4nKTtcblx0XHR9XG5cdFx0dGV4dC5wdXNoKCc8L3VsPicpO1xuXHRcdHJldHVybiB0ZXh0LmpvaW4oJycpO1xuXHR9XG59KTtcblxuLyoqXG4gKiBIZWxwZXIgZnVuY3Rpb24gdG8gZ2V0IHRoZSBib3ggd2lkdGggYmFzZWQgb24gdGhlIHVzZVBvaW50U3R5bGUgb3B0aW9uXG4gKiBAcGFyYW0gbGFiZWxvcHRzIHtPYmplY3R9IHRoZSBsYWJlbCBvcHRpb25zIG9uIHRoZSBsZWdlbmRcbiAqIEBwYXJhbSBmb250U2l6ZSB7TnVtYmVyfSB0aGUgbGFiZWwgZm9udCBzaXplXG4gKiBAcmV0dXJuIHtOdW1iZXJ9IHdpZHRoIG9mIHRoZSBjb2xvciBib3ggYXJlYVxuICovXG5mdW5jdGlvbiBnZXRCb3hXaWR0aChsYWJlbE9wdHMsIGZvbnRTaXplKSB7XG5cdHJldHVybiBsYWJlbE9wdHMudXNlUG9pbnRTdHlsZSA/XG5cdFx0Zm9udFNpemUgKiBNYXRoLlNRUlQyIDpcblx0XHRsYWJlbE9wdHMuYm94V2lkdGg7XG59XG5cbi8qKlxuICogSU1QT1JUQU5UOiB0aGlzIGNsYXNzIGlzIGV4cG9zZWQgcHVibGljbHkgYXMgQ2hhcnQuTGVnZW5kLCBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHJlcXVpcmVkIVxuICovXG52YXIgTGVnZW5kID0gRWxlbWVudC5leHRlbmQoe1xuXG5cdGluaXRpYWxpemU6IGZ1bmN0aW9uKGNvbmZpZykge1xuXHRcdGhlbHBlcnMuZXh0ZW5kKHRoaXMsIGNvbmZpZyk7XG5cblx0XHQvLyBDb250YWlucyBoaXQgYm94ZXMgZm9yIGVhY2ggZGF0YXNldCAoaW4gZGF0YXNldCBvcmRlcilcblx0XHR0aGlzLmxlZ2VuZEhpdEJveGVzID0gW107XG5cblx0XHQvLyBBcmUgd2UgaW4gZG91Z2hudXQgbW9kZSB3aGljaCBoYXMgYSBkaWZmZXJlbnQgZGF0YSB0eXBlXG5cdFx0dGhpcy5kb3VnaG51dE1vZGUgPSBmYWxzZTtcblx0fSxcblxuXHQvLyBUaGVzZSBtZXRob2RzIGFyZSBvcmRlcmVkIGJ5IGxpZmVjeWNsZS4gVXRpbGl0aWVzIHRoZW4gZm9sbG93LlxuXHQvLyBBbnkgZnVuY3Rpb24gZGVmaW5lZCBoZXJlIGlzIGluaGVyaXRlZCBieSBhbGwgbGVnZW5kIHR5cGVzLlxuXHQvLyBBbnkgZnVuY3Rpb24gY2FuIGJlIGV4dGVuZGVkIGJ5IHRoZSBsZWdlbmQgdHlwZVxuXG5cdGJlZm9yZVVwZGF0ZTogbm9vcCxcblx0dXBkYXRlOiBmdW5jdGlvbihtYXhXaWR0aCwgbWF4SGVpZ2h0LCBtYXJnaW5zKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblxuXHRcdC8vIFVwZGF0ZSBMaWZlY3ljbGUgLSBQcm9iYWJseSBkb24ndCB3YW50IHRvIGV2ZXIgZXh0ZW5kIG9yIG92ZXJ3cml0ZSB0aGlzIGZ1bmN0aW9uIDspXG5cdFx0bWUuYmVmb3JlVXBkYXRlKCk7XG5cblx0XHQvLyBBYnNvcmIgdGhlIG1hc3RlciBtZWFzdXJlbWVudHNcblx0XHRtZS5tYXhXaWR0aCA9IG1heFdpZHRoO1xuXHRcdG1lLm1heEhlaWdodCA9IG1heEhlaWdodDtcblx0XHRtZS5tYXJnaW5zID0gbWFyZ2lucztcblxuXHRcdC8vIERpbWVuc2lvbnNcblx0XHRtZS5iZWZvcmVTZXREaW1lbnNpb25zKCk7XG5cdFx0bWUuc2V0RGltZW5zaW9ucygpO1xuXHRcdG1lLmFmdGVyU2V0RGltZW5zaW9ucygpO1xuXHRcdC8vIExhYmVsc1xuXHRcdG1lLmJlZm9yZUJ1aWxkTGFiZWxzKCk7XG5cdFx0bWUuYnVpbGRMYWJlbHMoKTtcblx0XHRtZS5hZnRlckJ1aWxkTGFiZWxzKCk7XG5cblx0XHQvLyBGaXRcblx0XHRtZS5iZWZvcmVGaXQoKTtcblx0XHRtZS5maXQoKTtcblx0XHRtZS5hZnRlckZpdCgpO1xuXHRcdC8vXG5cdFx0bWUuYWZ0ZXJVcGRhdGUoKTtcblxuXHRcdHJldHVybiBtZS5taW5TaXplO1xuXHR9LFxuXHRhZnRlclVwZGF0ZTogbm9vcCxcblxuXHQvL1xuXG5cdGJlZm9yZVNldERpbWVuc2lvbnM6IG5vb3AsXG5cdHNldERpbWVuc2lvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0Ly8gU2V0IHRoZSB1bmNvbnN0cmFpbmVkIGRpbWVuc2lvbiBiZWZvcmUgbGFiZWwgcm90YXRpb25cblx0XHRpZiAobWUuaXNIb3Jpem9udGFsKCkpIHtcblx0XHRcdC8vIFJlc2V0IHBvc2l0aW9uIGJlZm9yZSBjYWxjdWxhdGluZyByb3RhdGlvblxuXHRcdFx0bWUud2lkdGggPSBtZS5tYXhXaWR0aDtcblx0XHRcdG1lLmxlZnQgPSAwO1xuXHRcdFx0bWUucmlnaHQgPSBtZS53aWR0aDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWUuaGVpZ2h0ID0gbWUubWF4SGVpZ2h0O1xuXG5cdFx0XHQvLyBSZXNldCBwb3NpdGlvbiBiZWZvcmUgY2FsY3VsYXRpbmcgcm90YXRpb25cblx0XHRcdG1lLnRvcCA9IDA7XG5cdFx0XHRtZS5ib3R0b20gPSBtZS5oZWlnaHQ7XG5cdFx0fVxuXG5cdFx0Ly8gUmVzZXQgcGFkZGluZ1xuXHRcdG1lLnBhZGRpbmdMZWZ0ID0gMDtcblx0XHRtZS5wYWRkaW5nVG9wID0gMDtcblx0XHRtZS5wYWRkaW5nUmlnaHQgPSAwO1xuXHRcdG1lLnBhZGRpbmdCb3R0b20gPSAwO1xuXG5cdFx0Ly8gUmVzZXQgbWluU2l6ZVxuXHRcdG1lLm1pblNpemUgPSB7XG5cdFx0XHR3aWR0aDogMCxcblx0XHRcdGhlaWdodDogMFxuXHRcdH07XG5cdH0sXG5cdGFmdGVyU2V0RGltZW5zaW9uczogbm9vcCxcblxuXHQvL1xuXG5cdGJlZm9yZUJ1aWxkTGFiZWxzOiBub29wLFxuXHRidWlsZExhYmVsczogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgbGFiZWxPcHRzID0gbWUub3B0aW9ucy5sYWJlbHMgfHwge307XG5cdFx0dmFyIGxlZ2VuZEl0ZW1zID0gaGVscGVycy5jYWxsYmFjayhsYWJlbE9wdHMuZ2VuZXJhdGVMYWJlbHMsIFttZS5jaGFydF0sIG1lKSB8fCBbXTtcblxuXHRcdGlmIChsYWJlbE9wdHMuZmlsdGVyKSB7XG5cdFx0XHRsZWdlbmRJdGVtcyA9IGxlZ2VuZEl0ZW1zLmZpbHRlcihmdW5jdGlvbihpdGVtKSB7XG5cdFx0XHRcdHJldHVybiBsYWJlbE9wdHMuZmlsdGVyKGl0ZW0sIG1lLmNoYXJ0LmRhdGEpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXG5cdFx0aWYgKG1lLm9wdGlvbnMucmV2ZXJzZSkge1xuXHRcdFx0bGVnZW5kSXRlbXMucmV2ZXJzZSgpO1xuXHRcdH1cblxuXHRcdG1lLmxlZ2VuZEl0ZW1zID0gbGVnZW5kSXRlbXM7XG5cdH0sXG5cdGFmdGVyQnVpbGRMYWJlbHM6IG5vb3AsXG5cblx0Ly9cblxuXHRiZWZvcmVGaXQ6IG5vb3AsXG5cdGZpdDogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgb3B0cyA9IG1lLm9wdGlvbnM7XG5cdFx0dmFyIGxhYmVsT3B0cyA9IG9wdHMubGFiZWxzO1xuXHRcdHZhciBkaXNwbGF5ID0gb3B0cy5kaXNwbGF5O1xuXG5cdFx0dmFyIGN0eCA9IG1lLmN0eDtcblxuXHRcdHZhciBnbG9iYWxEZWZhdWx0ID0gZGVmYXVsdHMuZ2xvYmFsO1xuXHRcdHZhciB2YWx1ZU9yRGVmYXVsdCA9IGhlbHBlcnMudmFsdWVPckRlZmF1bHQ7XG5cdFx0dmFyIGZvbnRTaXplID0gdmFsdWVPckRlZmF1bHQobGFiZWxPcHRzLmZvbnRTaXplLCBnbG9iYWxEZWZhdWx0LmRlZmF1bHRGb250U2l6ZSk7XG5cdFx0dmFyIGZvbnRTdHlsZSA9IHZhbHVlT3JEZWZhdWx0KGxhYmVsT3B0cy5mb250U3R5bGUsIGdsb2JhbERlZmF1bHQuZGVmYXVsdEZvbnRTdHlsZSk7XG5cdFx0dmFyIGZvbnRGYW1pbHkgPSB2YWx1ZU9yRGVmYXVsdChsYWJlbE9wdHMuZm9udEZhbWlseSwgZ2xvYmFsRGVmYXVsdC5kZWZhdWx0Rm9udEZhbWlseSk7XG5cdFx0dmFyIGxhYmVsRm9udCA9IGhlbHBlcnMuZm9udFN0cmluZyhmb250U2l6ZSwgZm9udFN0eWxlLCBmb250RmFtaWx5KTtcblxuXHRcdC8vIFJlc2V0IGhpdCBib3hlc1xuXHRcdHZhciBoaXRib3hlcyA9IG1lLmxlZ2VuZEhpdEJveGVzID0gW107XG5cblx0XHR2YXIgbWluU2l6ZSA9IG1lLm1pblNpemU7XG5cdFx0dmFyIGlzSG9yaXpvbnRhbCA9IG1lLmlzSG9yaXpvbnRhbCgpO1xuXG5cdFx0aWYgKGlzSG9yaXpvbnRhbCkge1xuXHRcdFx0bWluU2l6ZS53aWR0aCA9IG1lLm1heFdpZHRoOyAvLyBmaWxsIGFsbCB0aGUgd2lkdGhcblx0XHRcdG1pblNpemUuaGVpZ2h0ID0gZGlzcGxheSA/IDEwIDogMDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWluU2l6ZS53aWR0aCA9IGRpc3BsYXkgPyAxMCA6IDA7XG5cdFx0XHRtaW5TaXplLmhlaWdodCA9IG1lLm1heEhlaWdodDsgLy8gZmlsbCBhbGwgdGhlIGhlaWdodFxuXHRcdH1cblxuXHRcdC8vIEluY3JlYXNlIHNpemVzIGhlcmVcblx0XHRpZiAoZGlzcGxheSkge1xuXHRcdFx0Y3R4LmZvbnQgPSBsYWJlbEZvbnQ7XG5cblx0XHRcdGlmIChpc0hvcml6b250YWwpIHtcblx0XHRcdFx0Ly8gTGFiZWxzXG5cblx0XHRcdFx0Ly8gV2lkdGggb2YgZWFjaCBsaW5lIG9mIGxlZ2VuZCBib3hlcy4gTGFiZWxzIHdyYXAgb250byBtdWx0aXBsZSBsaW5lcyB3aGVuIHRoZXJlIGFyZSB0b28gbWFueSB0byBmaXQgb24gb25lXG5cdFx0XHRcdHZhciBsaW5lV2lkdGhzID0gbWUubGluZVdpZHRocyA9IFswXTtcblx0XHRcdFx0dmFyIHRvdGFsSGVpZ2h0ID0gbWUubGVnZW5kSXRlbXMubGVuZ3RoID8gZm9udFNpemUgKyAobGFiZWxPcHRzLnBhZGRpbmcpIDogMDtcblxuXHRcdFx0XHRjdHgudGV4dEFsaWduID0gJ2xlZnQnO1xuXHRcdFx0XHRjdHgudGV4dEJhc2VsaW5lID0gJ3RvcCc7XG5cblx0XHRcdFx0aGVscGVycy5lYWNoKG1lLmxlZ2VuZEl0ZW1zLCBmdW5jdGlvbihsZWdlbmRJdGVtLCBpKSB7XG5cdFx0XHRcdFx0dmFyIGJveFdpZHRoID0gZ2V0Qm94V2lkdGgobGFiZWxPcHRzLCBmb250U2l6ZSk7XG5cdFx0XHRcdFx0dmFyIHdpZHRoID0gYm94V2lkdGggKyAoZm9udFNpemUgLyAyKSArIGN0eC5tZWFzdXJlVGV4dChsZWdlbmRJdGVtLnRleHQpLndpZHRoO1xuXG5cdFx0XHRcdFx0aWYgKGxpbmVXaWR0aHNbbGluZVdpZHRocy5sZW5ndGggLSAxXSArIHdpZHRoICsgbGFiZWxPcHRzLnBhZGRpbmcgPj0gbWUud2lkdGgpIHtcblx0XHRcdFx0XHRcdHRvdGFsSGVpZ2h0ICs9IGZvbnRTaXplICsgKGxhYmVsT3B0cy5wYWRkaW5nKTtcblx0XHRcdFx0XHRcdGxpbmVXaWR0aHNbbGluZVdpZHRocy5sZW5ndGhdID0gbWUubGVmdDtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTdG9yZSB0aGUgaGl0Ym94IHdpZHRoIGFuZCBoZWlnaHQgaGVyZS4gRmluYWwgcG9zaXRpb24gd2lsbCBiZSB1cGRhdGVkIGluIGBkcmF3YFxuXHRcdFx0XHRcdGhpdGJveGVzW2ldID0ge1xuXHRcdFx0XHRcdFx0bGVmdDogMCxcblx0XHRcdFx0XHRcdHRvcDogMCxcblx0XHRcdFx0XHRcdHdpZHRoOiB3aWR0aCxcblx0XHRcdFx0XHRcdGhlaWdodDogZm9udFNpemVcblx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0bGluZVdpZHRoc1tsaW5lV2lkdGhzLmxlbmd0aCAtIDFdICs9IHdpZHRoICsgbGFiZWxPcHRzLnBhZGRpbmc7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdG1pblNpemUuaGVpZ2h0ICs9IHRvdGFsSGVpZ2h0O1xuXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2YXIgdlBhZGRpbmcgPSBsYWJlbE9wdHMucGFkZGluZztcblx0XHRcdFx0dmFyIGNvbHVtbldpZHRocyA9IG1lLmNvbHVtbldpZHRocyA9IFtdO1xuXHRcdFx0XHR2YXIgdG90YWxXaWR0aCA9IGxhYmVsT3B0cy5wYWRkaW5nO1xuXHRcdFx0XHR2YXIgY3VycmVudENvbFdpZHRoID0gMDtcblx0XHRcdFx0dmFyIGN1cnJlbnRDb2xIZWlnaHQgPSAwO1xuXHRcdFx0XHR2YXIgaXRlbUhlaWdodCA9IGZvbnRTaXplICsgdlBhZGRpbmc7XG5cblx0XHRcdFx0aGVscGVycy5lYWNoKG1lLmxlZ2VuZEl0ZW1zLCBmdW5jdGlvbihsZWdlbmRJdGVtLCBpKSB7XG5cdFx0XHRcdFx0dmFyIGJveFdpZHRoID0gZ2V0Qm94V2lkdGgobGFiZWxPcHRzLCBmb250U2l6ZSk7XG5cdFx0XHRcdFx0dmFyIGl0ZW1XaWR0aCA9IGJveFdpZHRoICsgKGZvbnRTaXplIC8gMikgKyBjdHgubWVhc3VyZVRleHQobGVnZW5kSXRlbS50ZXh0KS53aWR0aDtcblxuXHRcdFx0XHRcdC8vIElmIHRvbyB0YWxsLCBnbyB0byBuZXcgY29sdW1uXG5cdFx0XHRcdFx0aWYgKGN1cnJlbnRDb2xIZWlnaHQgKyBpdGVtSGVpZ2h0ID4gbWluU2l6ZS5oZWlnaHQpIHtcblx0XHRcdFx0XHRcdHRvdGFsV2lkdGggKz0gY3VycmVudENvbFdpZHRoICsgbGFiZWxPcHRzLnBhZGRpbmc7XG5cdFx0XHRcdFx0XHRjb2x1bW5XaWR0aHMucHVzaChjdXJyZW50Q29sV2lkdGgpOyAvLyBwcmV2aW91cyBjb2x1bW4gd2lkdGhcblxuXHRcdFx0XHRcdFx0Y3VycmVudENvbFdpZHRoID0gMDtcblx0XHRcdFx0XHRcdGN1cnJlbnRDb2xIZWlnaHQgPSAwO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIEdldCBtYXggd2lkdGhcblx0XHRcdFx0XHRjdXJyZW50Q29sV2lkdGggPSBNYXRoLm1heChjdXJyZW50Q29sV2lkdGgsIGl0ZW1XaWR0aCk7XG5cdFx0XHRcdFx0Y3VycmVudENvbEhlaWdodCArPSBpdGVtSGVpZ2h0O1xuXG5cdFx0XHRcdFx0Ly8gU3RvcmUgdGhlIGhpdGJveCB3aWR0aCBhbmQgaGVpZ2h0IGhlcmUuIEZpbmFsIHBvc2l0aW9uIHdpbGwgYmUgdXBkYXRlZCBpbiBgZHJhd2Bcblx0XHRcdFx0XHRoaXRib3hlc1tpXSA9IHtcblx0XHRcdFx0XHRcdGxlZnQ6IDAsXG5cdFx0XHRcdFx0XHR0b3A6IDAsXG5cdFx0XHRcdFx0XHR3aWR0aDogaXRlbVdpZHRoLFxuXHRcdFx0XHRcdFx0aGVpZ2h0OiBmb250U2l6ZVxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdHRvdGFsV2lkdGggKz0gY3VycmVudENvbFdpZHRoO1xuXHRcdFx0XHRjb2x1bW5XaWR0aHMucHVzaChjdXJyZW50Q29sV2lkdGgpO1xuXHRcdFx0XHRtaW5TaXplLndpZHRoICs9IHRvdGFsV2lkdGg7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0bWUud2lkdGggPSBtaW5TaXplLndpZHRoO1xuXHRcdG1lLmhlaWdodCA9IG1pblNpemUuaGVpZ2h0O1xuXHR9LFxuXHRhZnRlckZpdDogbm9vcCxcblxuXHQvLyBTaGFyZWQgTWV0aG9kc1xuXHRpc0hvcml6b250YWw6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm9wdGlvbnMucG9zaXRpb24gPT09ICd0b3AnIHx8IHRoaXMub3B0aW9ucy5wb3NpdGlvbiA9PT0gJ2JvdHRvbSc7XG5cdH0sXG5cblx0Ly8gQWN0dWFsbHkgZHJhdyB0aGUgbGVnZW5kIG9uIHRoZSBjYW52YXNcblx0ZHJhdzogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgb3B0cyA9IG1lLm9wdGlvbnM7XG5cdFx0dmFyIGxhYmVsT3B0cyA9IG9wdHMubGFiZWxzO1xuXHRcdHZhciBnbG9iYWxEZWZhdWx0ID0gZGVmYXVsdHMuZ2xvYmFsO1xuXHRcdHZhciBsaW5lRGVmYXVsdCA9IGdsb2JhbERlZmF1bHQuZWxlbWVudHMubGluZTtcblx0XHR2YXIgbGVnZW5kV2lkdGggPSBtZS53aWR0aDtcblx0XHR2YXIgbGluZVdpZHRocyA9IG1lLmxpbmVXaWR0aHM7XG5cblx0XHRpZiAob3B0cy5kaXNwbGF5KSB7XG5cdFx0XHR2YXIgY3R4ID0gbWUuY3R4O1xuXHRcdFx0dmFyIHZhbHVlT3JEZWZhdWx0ID0gaGVscGVycy52YWx1ZU9yRGVmYXVsdDtcblx0XHRcdHZhciBmb250Q29sb3IgPSB2YWx1ZU9yRGVmYXVsdChsYWJlbE9wdHMuZm9udENvbG9yLCBnbG9iYWxEZWZhdWx0LmRlZmF1bHRGb250Q29sb3IpO1xuXHRcdFx0dmFyIGZvbnRTaXplID0gdmFsdWVPckRlZmF1bHQobGFiZWxPcHRzLmZvbnRTaXplLCBnbG9iYWxEZWZhdWx0LmRlZmF1bHRGb250U2l6ZSk7XG5cdFx0XHR2YXIgZm9udFN0eWxlID0gdmFsdWVPckRlZmF1bHQobGFiZWxPcHRzLmZvbnRTdHlsZSwgZ2xvYmFsRGVmYXVsdC5kZWZhdWx0Rm9udFN0eWxlKTtcblx0XHRcdHZhciBmb250RmFtaWx5ID0gdmFsdWVPckRlZmF1bHQobGFiZWxPcHRzLmZvbnRGYW1pbHksIGdsb2JhbERlZmF1bHQuZGVmYXVsdEZvbnRGYW1pbHkpO1xuXHRcdFx0dmFyIGxhYmVsRm9udCA9IGhlbHBlcnMuZm9udFN0cmluZyhmb250U2l6ZSwgZm9udFN0eWxlLCBmb250RmFtaWx5KTtcblx0XHRcdHZhciBjdXJzb3I7XG5cblx0XHRcdC8vIENhbnZhcyBzZXR1cFxuXHRcdFx0Y3R4LnRleHRBbGlnbiA9ICdsZWZ0Jztcblx0XHRcdGN0eC50ZXh0QmFzZWxpbmUgPSAnbWlkZGxlJztcblx0XHRcdGN0eC5saW5lV2lkdGggPSAwLjU7XG5cdFx0XHRjdHguc3Ryb2tlU3R5bGUgPSBmb250Q29sb3I7IC8vIGZvciBzdHJpa2V0aHJvdWdoIGVmZmVjdFxuXHRcdFx0Y3R4LmZpbGxTdHlsZSA9IGZvbnRDb2xvcjsgLy8gcmVuZGVyIGluIGNvcnJlY3QgY29sb3VyXG5cdFx0XHRjdHguZm9udCA9IGxhYmVsRm9udDtcblxuXHRcdFx0dmFyIGJveFdpZHRoID0gZ2V0Qm94V2lkdGgobGFiZWxPcHRzLCBmb250U2l6ZSk7XG5cdFx0XHR2YXIgaGl0Ym94ZXMgPSBtZS5sZWdlbmRIaXRCb3hlcztcblxuXHRcdFx0Ly8gY3VycmVudCBwb3NpdGlvblxuXHRcdFx0dmFyIGRyYXdMZWdlbmRCb3ggPSBmdW5jdGlvbih4LCB5LCBsZWdlbmRJdGVtKSB7XG5cdFx0XHRcdGlmIChpc05hTihib3hXaWR0aCkgfHwgYm94V2lkdGggPD0gMCkge1xuXHRcdFx0XHRcdHJldHVybjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCB0aGUgY3R4IGZvciB0aGUgYm94XG5cdFx0XHRcdGN0eC5zYXZlKCk7XG5cblx0XHRcdFx0Y3R4LmZpbGxTdHlsZSA9IHZhbHVlT3JEZWZhdWx0KGxlZ2VuZEl0ZW0uZmlsbFN0eWxlLCBnbG9iYWxEZWZhdWx0LmRlZmF1bHRDb2xvcik7XG5cdFx0XHRcdGN0eC5saW5lQ2FwID0gdmFsdWVPckRlZmF1bHQobGVnZW5kSXRlbS5saW5lQ2FwLCBsaW5lRGVmYXVsdC5ib3JkZXJDYXBTdHlsZSk7XG5cdFx0XHRcdGN0eC5saW5lRGFzaE9mZnNldCA9IHZhbHVlT3JEZWZhdWx0KGxlZ2VuZEl0ZW0ubGluZURhc2hPZmZzZXQsIGxpbmVEZWZhdWx0LmJvcmRlckRhc2hPZmZzZXQpO1xuXHRcdFx0XHRjdHgubGluZUpvaW4gPSB2YWx1ZU9yRGVmYXVsdChsZWdlbmRJdGVtLmxpbmVKb2luLCBsaW5lRGVmYXVsdC5ib3JkZXJKb2luU3R5bGUpO1xuXHRcdFx0XHRjdHgubGluZVdpZHRoID0gdmFsdWVPckRlZmF1bHQobGVnZW5kSXRlbS5saW5lV2lkdGgsIGxpbmVEZWZhdWx0LmJvcmRlcldpZHRoKTtcblx0XHRcdFx0Y3R4LnN0cm9rZVN0eWxlID0gdmFsdWVPckRlZmF1bHQobGVnZW5kSXRlbS5zdHJva2VTdHlsZSwgZ2xvYmFsRGVmYXVsdC5kZWZhdWx0Q29sb3IpO1xuXHRcdFx0XHR2YXIgaXNMaW5lV2lkdGhaZXJvID0gKHZhbHVlT3JEZWZhdWx0KGxlZ2VuZEl0ZW0ubGluZVdpZHRoLCBsaW5lRGVmYXVsdC5ib3JkZXJXaWR0aCkgPT09IDApO1xuXG5cdFx0XHRcdGlmIChjdHguc2V0TGluZURhc2gpIHtcblx0XHRcdFx0XHQvLyBJRSA5IGFuZCAxMCBkbyBub3Qgc3VwcG9ydCBsaW5lIGRhc2hcblx0XHRcdFx0XHRjdHguc2V0TGluZURhc2godmFsdWVPckRlZmF1bHQobGVnZW5kSXRlbS5saW5lRGFzaCwgbGluZURlZmF1bHQuYm9yZGVyRGFzaCkpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0aWYgKG9wdHMubGFiZWxzICYmIG9wdHMubGFiZWxzLnVzZVBvaW50U3R5bGUpIHtcblx0XHRcdFx0XHQvLyBSZWNhbGN1bGF0ZSB4IGFuZCB5IGZvciBkcmF3UG9pbnQoKSBiZWNhdXNlIGl0cyBleHBlY3Rpbmdcblx0XHRcdFx0XHQvLyB4IGFuZCB5IHRvIGJlIGNlbnRlciBvZiBmaWd1cmUgKGluc3RlYWQgb2YgdG9wIGxlZnQpXG5cdFx0XHRcdFx0dmFyIHJhZGl1cyA9IGZvbnRTaXplICogTWF0aC5TUVJUMiAvIDI7XG5cdFx0XHRcdFx0dmFyIG9mZlNldCA9IHJhZGl1cyAvIE1hdGguU1FSVDI7XG5cdFx0XHRcdFx0dmFyIGNlbnRlclggPSB4ICsgb2ZmU2V0O1xuXHRcdFx0XHRcdHZhciBjZW50ZXJZID0geSArIG9mZlNldDtcblxuXHRcdFx0XHRcdC8vIERyYXcgcG9pbnRTdHlsZSBhcyBsZWdlbmQgc3ltYm9sXG5cdFx0XHRcdFx0aGVscGVycy5jYW52YXMuZHJhd1BvaW50KGN0eCwgbGVnZW5kSXRlbS5wb2ludFN0eWxlLCByYWRpdXMsIGNlbnRlclgsIGNlbnRlclkpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdC8vIERyYXcgYm94IGFzIGxlZ2VuZCBzeW1ib2xcblx0XHRcdFx0XHRpZiAoIWlzTGluZVdpZHRoWmVybykge1xuXHRcdFx0XHRcdFx0Y3R4LnN0cm9rZVJlY3QoeCwgeSwgYm94V2lkdGgsIGZvbnRTaXplKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y3R4LmZpbGxSZWN0KHgsIHksIGJveFdpZHRoLCBmb250U2l6ZSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjdHgucmVzdG9yZSgpO1xuXHRcdFx0fTtcblx0XHRcdHZhciBmaWxsVGV4dCA9IGZ1bmN0aW9uKHgsIHksIGxlZ2VuZEl0ZW0sIHRleHRXaWR0aCkge1xuXHRcdFx0XHR2YXIgaGFsZkZvbnRTaXplID0gZm9udFNpemUgLyAyO1xuXHRcdFx0XHR2YXIgeExlZnQgPSBib3hXaWR0aCArIGhhbGZGb250U2l6ZSArIHg7XG5cdFx0XHRcdHZhciB5TWlkZGxlID0geSArIGhhbGZGb250U2l6ZTtcblxuXHRcdFx0XHRjdHguZmlsbFRleHQobGVnZW5kSXRlbS50ZXh0LCB4TGVmdCwgeU1pZGRsZSk7XG5cblx0XHRcdFx0aWYgKGxlZ2VuZEl0ZW0uaGlkZGVuKSB7XG5cdFx0XHRcdFx0Ly8gU3RyaWtldGhyb3VnaCB0aGUgdGV4dCBpZiBoaWRkZW5cblx0XHRcdFx0XHRjdHguYmVnaW5QYXRoKCk7XG5cdFx0XHRcdFx0Y3R4LmxpbmVXaWR0aCA9IDI7XG5cdFx0XHRcdFx0Y3R4Lm1vdmVUbyh4TGVmdCwgeU1pZGRsZSk7XG5cdFx0XHRcdFx0Y3R4LmxpbmVUbyh4TGVmdCArIHRleHRXaWR0aCwgeU1pZGRsZSk7XG5cdFx0XHRcdFx0Y3R4LnN0cm9rZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0XHQvLyBIb3Jpem9udGFsXG5cdFx0XHR2YXIgaXNIb3Jpem9udGFsID0gbWUuaXNIb3Jpem9udGFsKCk7XG5cdFx0XHRpZiAoaXNIb3Jpem9udGFsKSB7XG5cdFx0XHRcdGN1cnNvciA9IHtcblx0XHRcdFx0XHR4OiBtZS5sZWZ0ICsgKChsZWdlbmRXaWR0aCAtIGxpbmVXaWR0aHNbMF0pIC8gMiksXG5cdFx0XHRcdFx0eTogbWUudG9wICsgbGFiZWxPcHRzLnBhZGRpbmcsXG5cdFx0XHRcdFx0bGluZTogMFxuXHRcdFx0XHR9O1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3Vyc29yID0ge1xuXHRcdFx0XHRcdHg6IG1lLmxlZnQgKyBsYWJlbE9wdHMucGFkZGluZyxcblx0XHRcdFx0XHR5OiBtZS50b3AgKyBsYWJlbE9wdHMucGFkZGluZyxcblx0XHRcdFx0XHRsaW5lOiAwXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cblx0XHRcdHZhciBpdGVtSGVpZ2h0ID0gZm9udFNpemUgKyBsYWJlbE9wdHMucGFkZGluZztcblx0XHRcdGhlbHBlcnMuZWFjaChtZS5sZWdlbmRJdGVtcywgZnVuY3Rpb24obGVnZW5kSXRlbSwgaSkge1xuXHRcdFx0XHR2YXIgdGV4dFdpZHRoID0gY3R4Lm1lYXN1cmVUZXh0KGxlZ2VuZEl0ZW0udGV4dCkud2lkdGg7XG5cdFx0XHRcdHZhciB3aWR0aCA9IGJveFdpZHRoICsgKGZvbnRTaXplIC8gMikgKyB0ZXh0V2lkdGg7XG5cdFx0XHRcdHZhciB4ID0gY3Vyc29yLng7XG5cdFx0XHRcdHZhciB5ID0gY3Vyc29yLnk7XG5cblx0XHRcdFx0aWYgKGlzSG9yaXpvbnRhbCkge1xuXHRcdFx0XHRcdGlmICh4ICsgd2lkdGggPj0gbGVnZW5kV2lkdGgpIHtcblx0XHRcdFx0XHRcdHkgPSBjdXJzb3IueSArPSBpdGVtSGVpZ2h0O1xuXHRcdFx0XHRcdFx0Y3Vyc29yLmxpbmUrKztcblx0XHRcdFx0XHRcdHggPSBjdXJzb3IueCA9IG1lLmxlZnQgKyAoKGxlZ2VuZFdpZHRoIC0gbGluZVdpZHRoc1tjdXJzb3IubGluZV0pIC8gMik7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9IGVsc2UgaWYgKHkgKyBpdGVtSGVpZ2h0ID4gbWUuYm90dG9tKSB7XG5cdFx0XHRcdFx0eCA9IGN1cnNvci54ID0geCArIG1lLmNvbHVtbldpZHRoc1tjdXJzb3IubGluZV0gKyBsYWJlbE9wdHMucGFkZGluZztcblx0XHRcdFx0XHR5ID0gY3Vyc29yLnkgPSBtZS50b3AgKyBsYWJlbE9wdHMucGFkZGluZztcblx0XHRcdFx0XHRjdXJzb3IubGluZSsrO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZHJhd0xlZ2VuZEJveCh4LCB5LCBsZWdlbmRJdGVtKTtcblxuXHRcdFx0XHRoaXRib3hlc1tpXS5sZWZ0ID0geDtcblx0XHRcdFx0aGl0Ym94ZXNbaV0udG9wID0geTtcblxuXHRcdFx0XHQvLyBGaWxsIHRoZSBhY3R1YWwgbGFiZWxcblx0XHRcdFx0ZmlsbFRleHQoeCwgeSwgbGVnZW5kSXRlbSwgdGV4dFdpZHRoKTtcblxuXHRcdFx0XHRpZiAoaXNIb3Jpem9udGFsKSB7XG5cdFx0XHRcdFx0Y3Vyc29yLnggKz0gd2lkdGggKyAobGFiZWxPcHRzLnBhZGRpbmcpO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGN1cnNvci55ICs9IGl0ZW1IZWlnaHQ7XG5cdFx0XHRcdH1cblxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9LFxuXG5cdC8qKlxuXHQgKiBIYW5kbGUgYW4gZXZlbnRcblx0ICogQHByaXZhdGVcblx0ICogQHBhcmFtIHtJRXZlbnR9IGV2ZW50IC0gVGhlIGV2ZW50IHRvIGhhbmRsZVxuXHQgKiBAcmV0dXJuIHtCb29sZWFufSB0cnVlIGlmIGEgY2hhbmdlIG9jY3VyZWRcblx0ICovXG5cdGhhbmRsZUV2ZW50OiBmdW5jdGlvbihlKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHR2YXIgb3B0cyA9IG1lLm9wdGlvbnM7XG5cdFx0dmFyIHR5cGUgPSBlLnR5cGUgPT09ICdtb3VzZXVwJyA/ICdjbGljaycgOiBlLnR5cGU7XG5cdFx0dmFyIGNoYW5nZWQgPSBmYWxzZTtcblxuXHRcdGlmICh0eXBlID09PSAnbW91c2Vtb3ZlJykge1xuXHRcdFx0aWYgKCFvcHRzLm9uSG92ZXIpIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSBpZiAodHlwZSA9PT0gJ2NsaWNrJykge1xuXHRcdFx0aWYgKCFvcHRzLm9uQ2xpY2spIHtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXHRcdH0gZWxzZSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gQ2hhcnQgZXZlbnQgYWxyZWFkeSBoYXMgcmVsYXRpdmUgcG9zaXRpb24gaW4gaXRcblx0XHR2YXIgeCA9IGUueDtcblx0XHR2YXIgeSA9IGUueTtcblxuXHRcdGlmICh4ID49IG1lLmxlZnQgJiYgeCA8PSBtZS5yaWdodCAmJiB5ID49IG1lLnRvcCAmJiB5IDw9IG1lLmJvdHRvbSkge1xuXHRcdFx0Ly8gU2VlIGlmIHdlIGFyZSB0b3VjaGluZyBvbmUgb2YgdGhlIGRhdGFzZXQgYm94ZXNcblx0XHRcdHZhciBsaCA9IG1lLmxlZ2VuZEhpdEJveGVzO1xuXHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCBsaC5sZW5ndGg7ICsraSkge1xuXHRcdFx0XHR2YXIgaGl0Qm94ID0gbGhbaV07XG5cblx0XHRcdFx0aWYgKHggPj0gaGl0Qm94LmxlZnQgJiYgeCA8PSBoaXRCb3gubGVmdCArIGhpdEJveC53aWR0aCAmJiB5ID49IGhpdEJveC50b3AgJiYgeSA8PSBoaXRCb3gudG9wICsgaGl0Qm94LmhlaWdodCkge1xuXHRcdFx0XHRcdC8vIFRvdWNoaW5nIGFuIGVsZW1lbnRcblx0XHRcdFx0XHRpZiAodHlwZSA9PT0gJ2NsaWNrJykge1xuXHRcdFx0XHRcdFx0Ly8gdXNlIGUubmF0aXZlIGZvciBiYWNrd2FyZHMgY29tcGF0aWJpbGl0eVxuXHRcdFx0XHRcdFx0b3B0cy5vbkNsaWNrLmNhbGwobWUsIGUubmF0aXZlLCBtZS5sZWdlbmRJdGVtc1tpXSk7XG5cdFx0XHRcdFx0XHRjaGFuZ2VkID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH0gZWxzZSBpZiAodHlwZSA9PT0gJ21vdXNlbW92ZScpIHtcblx0XHRcdFx0XHRcdC8vIHVzZSBlLm5hdGl2ZSBmb3IgYmFja3dhcmRzIGNvbXBhdGliaWxpdHlcblx0XHRcdFx0XHRcdG9wdHMub25Ib3Zlci5jYWxsKG1lLCBlLm5hdGl2ZSwgbWUubGVnZW5kSXRlbXNbaV0pO1xuXHRcdFx0XHRcdFx0Y2hhbmdlZCA9IHRydWU7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gY2hhbmdlZDtcblx0fVxufSk7XG5cbmZ1bmN0aW9uIGNyZWF0ZU5ld0xlZ2VuZEFuZEF0dGFjaChjaGFydCwgbGVnZW5kT3B0cykge1xuXHR2YXIgbGVnZW5kID0gbmV3IExlZ2VuZCh7XG5cdFx0Y3R4OiBjaGFydC5jdHgsXG5cdFx0b3B0aW9uczogbGVnZW5kT3B0cyxcblx0XHRjaGFydDogY2hhcnRcblx0fSk7XG5cblx0bGF5b3V0cy5jb25maWd1cmUoY2hhcnQsIGxlZ2VuZCwgbGVnZW5kT3B0cyk7XG5cdGxheW91dHMuYWRkQm94KGNoYXJ0LCBsZWdlbmQpO1xuXHRjaGFydC5sZWdlbmQgPSBsZWdlbmQ7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuXHRpZDogJ2xlZ2VuZCcsXG5cblx0LyoqXG5cdCAqIEJhY2t3YXJkIGNvbXBhdGliaWxpdHk6IHNpbmNlIDIuMS41LCB0aGUgbGVnZW5kIGlzIHJlZ2lzdGVyZWQgYXMgYSBwbHVnaW4sIG1ha2luZ1xuXHQgKiBDaGFydC5MZWdlbmQgb2Jzb2xldGUuIFRvIGF2b2lkIGEgYnJlYWtpbmcgY2hhbmdlLCB3ZSBleHBvcnQgdGhlIExlZ2VuZCBhcyBwYXJ0IG9mXG5cdCAqIHRoZSBwbHVnaW4sIHdoaWNoIG9uZSB3aWxsIGJlIHJlLWV4cG9zZWQgaW4gdGhlIGNoYXJ0LmpzIGZpbGUuXG5cdCAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL3B1bGwvMjY0MFxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2VsZW1lbnQ6IExlZ2VuZCxcblxuXHRiZWZvcmVJbml0OiBmdW5jdGlvbihjaGFydCkge1xuXHRcdHZhciBsZWdlbmRPcHRzID0gY2hhcnQub3B0aW9ucy5sZWdlbmQ7XG5cblx0XHRpZiAobGVnZW5kT3B0cykge1xuXHRcdFx0Y3JlYXRlTmV3TGVnZW5kQW5kQXR0YWNoKGNoYXJ0LCBsZWdlbmRPcHRzKTtcblx0XHR9XG5cdH0sXG5cblx0YmVmb3JlVXBkYXRlOiBmdW5jdGlvbihjaGFydCkge1xuXHRcdHZhciBsZWdlbmRPcHRzID0gY2hhcnQub3B0aW9ucy5sZWdlbmQ7XG5cdFx0dmFyIGxlZ2VuZCA9IGNoYXJ0LmxlZ2VuZDtcblxuXHRcdGlmIChsZWdlbmRPcHRzKSB7XG5cdFx0XHRoZWxwZXJzLm1lcmdlSWYobGVnZW5kT3B0cywgZGVmYXVsdHMuZ2xvYmFsLmxlZ2VuZCk7XG5cblx0XHRcdGlmIChsZWdlbmQpIHtcblx0XHRcdFx0bGF5b3V0cy5jb25maWd1cmUoY2hhcnQsIGxlZ2VuZCwgbGVnZW5kT3B0cyk7XG5cdFx0XHRcdGxlZ2VuZC5vcHRpb25zID0gbGVnZW5kT3B0cztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNyZWF0ZU5ld0xlZ2VuZEFuZEF0dGFjaChjaGFydCwgbGVnZW5kT3B0cyk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmIChsZWdlbmQpIHtcblx0XHRcdGxheW91dHMucmVtb3ZlQm94KGNoYXJ0LCBsZWdlbmQpO1xuXHRcdFx0ZGVsZXRlIGNoYXJ0LmxlZ2VuZDtcblx0XHR9XG5cdH0sXG5cblx0YWZ0ZXJFdmVudDogZnVuY3Rpb24oY2hhcnQsIGUpIHtcblx0XHR2YXIgbGVnZW5kID0gY2hhcnQubGVnZW5kO1xuXHRcdGlmIChsZWdlbmQpIHtcblx0XHRcdGxlZ2VuZC5oYW5kbGVFdmVudChlKTtcblx0XHR9XG5cdH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBkZWZhdWx0cyA9IHJlcXVpcmUoJy4uL2NvcmUvY29yZS5kZWZhdWx0cycpO1xudmFyIEVsZW1lbnQgPSByZXF1aXJlKCcuLi9jb3JlL2NvcmUuZWxlbWVudCcpO1xudmFyIGhlbHBlcnMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL2luZGV4Jyk7XG52YXIgbGF5b3V0cyA9IHJlcXVpcmUoJy4uL2NvcmUvY29yZS5sYXlvdXRzJyk7XG5cbnZhciBub29wID0gaGVscGVycy5ub29wO1xuXG5kZWZhdWx0cy5fc2V0KCdnbG9iYWwnLCB7XG5cdHRpdGxlOiB7XG5cdFx0ZGlzcGxheTogZmFsc2UsXG5cdFx0Zm9udFN0eWxlOiAnYm9sZCcsXG5cdFx0ZnVsbFdpZHRoOiB0cnVlLFxuXHRcdGxpbmVIZWlnaHQ6IDEuMixcblx0XHRwYWRkaW5nOiAxMCxcblx0XHRwb3NpdGlvbjogJ3RvcCcsXG5cdFx0dGV4dDogJycsXG5cdFx0d2VpZ2h0OiAyMDAwICAgICAgICAgLy8gYnkgZGVmYXVsdCBncmVhdGVyIHRoYW4gbGVnZW5kICgxMDAwKSB0byBiZSBhYm92ZVxuXHR9XG59KTtcblxuLyoqXG4gKiBJTVBPUlRBTlQ6IHRoaXMgY2xhc3MgaXMgZXhwb3NlZCBwdWJsaWNseSBhcyBDaGFydC5MZWdlbmQsIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgcmVxdWlyZWQhXG4gKi9cbnZhciBUaXRsZSA9IEVsZW1lbnQuZXh0ZW5kKHtcblx0aW5pdGlhbGl6ZTogZnVuY3Rpb24oY29uZmlnKSB7XG5cdFx0dmFyIG1lID0gdGhpcztcblx0XHRoZWxwZXJzLmV4dGVuZChtZSwgY29uZmlnKTtcblxuXHRcdC8vIENvbnRhaW5zIGhpdCBib3hlcyBmb3IgZWFjaCBkYXRhc2V0IChpbiBkYXRhc2V0IG9yZGVyKVxuXHRcdG1lLmxlZ2VuZEhpdEJveGVzID0gW107XG5cdH0sXG5cblx0Ly8gVGhlc2UgbWV0aG9kcyBhcmUgb3JkZXJlZCBieSBsaWZlY3ljbGUuIFV0aWxpdGllcyB0aGVuIGZvbGxvdy5cblxuXHRiZWZvcmVVcGRhdGU6IG5vb3AsXG5cdHVwZGF0ZTogZnVuY3Rpb24obWF4V2lkdGgsIG1heEhlaWdodCwgbWFyZ2lucykge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cblx0XHQvLyBVcGRhdGUgTGlmZWN5Y2xlIC0gUHJvYmFibHkgZG9uJ3Qgd2FudCB0byBldmVyIGV4dGVuZCBvciBvdmVyd3JpdGUgdGhpcyBmdW5jdGlvbiA7KVxuXHRcdG1lLmJlZm9yZVVwZGF0ZSgpO1xuXG5cdFx0Ly8gQWJzb3JiIHRoZSBtYXN0ZXIgbWVhc3VyZW1lbnRzXG5cdFx0bWUubWF4V2lkdGggPSBtYXhXaWR0aDtcblx0XHRtZS5tYXhIZWlnaHQgPSBtYXhIZWlnaHQ7XG5cdFx0bWUubWFyZ2lucyA9IG1hcmdpbnM7XG5cblx0XHQvLyBEaW1lbnNpb25zXG5cdFx0bWUuYmVmb3JlU2V0RGltZW5zaW9ucygpO1xuXHRcdG1lLnNldERpbWVuc2lvbnMoKTtcblx0XHRtZS5hZnRlclNldERpbWVuc2lvbnMoKTtcblx0XHQvLyBMYWJlbHNcblx0XHRtZS5iZWZvcmVCdWlsZExhYmVscygpO1xuXHRcdG1lLmJ1aWxkTGFiZWxzKCk7XG5cdFx0bWUuYWZ0ZXJCdWlsZExhYmVscygpO1xuXG5cdFx0Ly8gRml0XG5cdFx0bWUuYmVmb3JlRml0KCk7XG5cdFx0bWUuZml0KCk7XG5cdFx0bWUuYWZ0ZXJGaXQoKTtcblx0XHQvL1xuXHRcdG1lLmFmdGVyVXBkYXRlKCk7XG5cblx0XHRyZXR1cm4gbWUubWluU2l6ZTtcblxuXHR9LFxuXHRhZnRlclVwZGF0ZTogbm9vcCxcblxuXHQvL1xuXG5cdGJlZm9yZVNldERpbWVuc2lvbnM6IG5vb3AsXG5cdHNldERpbWVuc2lvbnM6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0Ly8gU2V0IHRoZSB1bmNvbnN0cmFpbmVkIGRpbWVuc2lvbiBiZWZvcmUgbGFiZWwgcm90YXRpb25cblx0XHRpZiAobWUuaXNIb3Jpem9udGFsKCkpIHtcblx0XHRcdC8vIFJlc2V0IHBvc2l0aW9uIGJlZm9yZSBjYWxjdWxhdGluZyByb3RhdGlvblxuXHRcdFx0bWUud2lkdGggPSBtZS5tYXhXaWR0aDtcblx0XHRcdG1lLmxlZnQgPSAwO1xuXHRcdFx0bWUucmlnaHQgPSBtZS53aWR0aDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWUuaGVpZ2h0ID0gbWUubWF4SGVpZ2h0O1xuXG5cdFx0XHQvLyBSZXNldCBwb3NpdGlvbiBiZWZvcmUgY2FsY3VsYXRpbmcgcm90YXRpb25cblx0XHRcdG1lLnRvcCA9IDA7XG5cdFx0XHRtZS5ib3R0b20gPSBtZS5oZWlnaHQ7XG5cdFx0fVxuXG5cdFx0Ly8gUmVzZXQgcGFkZGluZ1xuXHRcdG1lLnBhZGRpbmdMZWZ0ID0gMDtcblx0XHRtZS5wYWRkaW5nVG9wID0gMDtcblx0XHRtZS5wYWRkaW5nUmlnaHQgPSAwO1xuXHRcdG1lLnBhZGRpbmdCb3R0b20gPSAwO1xuXG5cdFx0Ly8gUmVzZXQgbWluU2l6ZVxuXHRcdG1lLm1pblNpemUgPSB7XG5cdFx0XHR3aWR0aDogMCxcblx0XHRcdGhlaWdodDogMFxuXHRcdH07XG5cdH0sXG5cdGFmdGVyU2V0RGltZW5zaW9uczogbm9vcCxcblxuXHQvL1xuXG5cdGJlZm9yZUJ1aWxkTGFiZWxzOiBub29wLFxuXHRidWlsZExhYmVsczogbm9vcCxcblx0YWZ0ZXJCdWlsZExhYmVsczogbm9vcCxcblxuXHQvL1xuXG5cdGJlZm9yZUZpdDogbm9vcCxcblx0Zml0OiBmdW5jdGlvbigpIHtcblx0XHR2YXIgbWUgPSB0aGlzO1xuXHRcdHZhciB2YWx1ZU9yRGVmYXVsdCA9IGhlbHBlcnMudmFsdWVPckRlZmF1bHQ7XG5cdFx0dmFyIG9wdHMgPSBtZS5vcHRpb25zO1xuXHRcdHZhciBkaXNwbGF5ID0gb3B0cy5kaXNwbGF5O1xuXHRcdHZhciBmb250U2l6ZSA9IHZhbHVlT3JEZWZhdWx0KG9wdHMuZm9udFNpemUsIGRlZmF1bHRzLmdsb2JhbC5kZWZhdWx0Rm9udFNpemUpO1xuXHRcdHZhciBtaW5TaXplID0gbWUubWluU2l6ZTtcblx0XHR2YXIgbGluZUNvdW50ID0gaGVscGVycy5pc0FycmF5KG9wdHMudGV4dCkgPyBvcHRzLnRleHQubGVuZ3RoIDogMTtcblx0XHR2YXIgbGluZUhlaWdodCA9IGhlbHBlcnMub3B0aW9ucy50b0xpbmVIZWlnaHQob3B0cy5saW5lSGVpZ2h0LCBmb250U2l6ZSk7XG5cdFx0dmFyIHRleHRTaXplID0gZGlzcGxheSA/IChsaW5lQ291bnQgKiBsaW5lSGVpZ2h0KSArIChvcHRzLnBhZGRpbmcgKiAyKSA6IDA7XG5cblx0XHRpZiAobWUuaXNIb3Jpem9udGFsKCkpIHtcblx0XHRcdG1pblNpemUud2lkdGggPSBtZS5tYXhXaWR0aDsgLy8gZmlsbCBhbGwgdGhlIHdpZHRoXG5cdFx0XHRtaW5TaXplLmhlaWdodCA9IHRleHRTaXplO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRtaW5TaXplLndpZHRoID0gdGV4dFNpemU7XG5cdFx0XHRtaW5TaXplLmhlaWdodCA9IG1lLm1heEhlaWdodDsgLy8gZmlsbCBhbGwgdGhlIGhlaWdodFxuXHRcdH1cblxuXHRcdG1lLndpZHRoID0gbWluU2l6ZS53aWR0aDtcblx0XHRtZS5oZWlnaHQgPSBtaW5TaXplLmhlaWdodDtcblxuXHR9LFxuXHRhZnRlckZpdDogbm9vcCxcblxuXHQvLyBTaGFyZWQgTWV0aG9kc1xuXHRpc0hvcml6b250YWw6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBwb3MgPSB0aGlzLm9wdGlvbnMucG9zaXRpb247XG5cdFx0cmV0dXJuIHBvcyA9PT0gJ3RvcCcgfHwgcG9zID09PSAnYm90dG9tJztcblx0fSxcblxuXHQvLyBBY3R1YWxseSBkcmF3IHRoZSB0aXRsZSBibG9jayBvbiB0aGUgY2FudmFzXG5cdGRyYXc6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBtZSA9IHRoaXM7XG5cdFx0dmFyIGN0eCA9IG1lLmN0eDtcblx0XHR2YXIgdmFsdWVPckRlZmF1bHQgPSBoZWxwZXJzLnZhbHVlT3JEZWZhdWx0O1xuXHRcdHZhciBvcHRzID0gbWUub3B0aW9ucztcblx0XHR2YXIgZ2xvYmFsRGVmYXVsdHMgPSBkZWZhdWx0cy5nbG9iYWw7XG5cblx0XHRpZiAob3B0cy5kaXNwbGF5KSB7XG5cdFx0XHR2YXIgZm9udFNpemUgPSB2YWx1ZU9yRGVmYXVsdChvcHRzLmZvbnRTaXplLCBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Rm9udFNpemUpO1xuXHRcdFx0dmFyIGZvbnRTdHlsZSA9IHZhbHVlT3JEZWZhdWx0KG9wdHMuZm9udFN0eWxlLCBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Rm9udFN0eWxlKTtcblx0XHRcdHZhciBmb250RmFtaWx5ID0gdmFsdWVPckRlZmF1bHQob3B0cy5mb250RmFtaWx5LCBnbG9iYWxEZWZhdWx0cy5kZWZhdWx0Rm9udEZhbWlseSk7XG5cdFx0XHR2YXIgdGl0bGVGb250ID0gaGVscGVycy5mb250U3RyaW5nKGZvbnRTaXplLCBmb250U3R5bGUsIGZvbnRGYW1pbHkpO1xuXHRcdFx0dmFyIGxpbmVIZWlnaHQgPSBoZWxwZXJzLm9wdGlvbnMudG9MaW5lSGVpZ2h0KG9wdHMubGluZUhlaWdodCwgZm9udFNpemUpO1xuXHRcdFx0dmFyIG9mZnNldCA9IGxpbmVIZWlnaHQgLyAyICsgb3B0cy5wYWRkaW5nO1xuXHRcdFx0dmFyIHJvdGF0aW9uID0gMDtcblx0XHRcdHZhciB0b3AgPSBtZS50b3A7XG5cdFx0XHR2YXIgbGVmdCA9IG1lLmxlZnQ7XG5cdFx0XHR2YXIgYm90dG9tID0gbWUuYm90dG9tO1xuXHRcdFx0dmFyIHJpZ2h0ID0gbWUucmlnaHQ7XG5cdFx0XHR2YXIgbWF4V2lkdGgsIHRpdGxlWCwgdGl0bGVZO1xuXG5cdFx0XHRjdHguZmlsbFN0eWxlID0gdmFsdWVPckRlZmF1bHQob3B0cy5mb250Q29sb3IsIGdsb2JhbERlZmF1bHRzLmRlZmF1bHRGb250Q29sb3IpOyAvLyByZW5kZXIgaW4gY29ycmVjdCBjb2xvdXJcblx0XHRcdGN0eC5mb250ID0gdGl0bGVGb250O1xuXG5cdFx0XHQvLyBIb3Jpem9udGFsXG5cdFx0XHRpZiAobWUuaXNIb3Jpem9udGFsKCkpIHtcblx0XHRcdFx0dGl0bGVYID0gbGVmdCArICgocmlnaHQgLSBsZWZ0KSAvIDIpOyAvLyBtaWRwb2ludCBvZiB0aGUgd2lkdGhcblx0XHRcdFx0dGl0bGVZID0gdG9wICsgb2Zmc2V0O1xuXHRcdFx0XHRtYXhXaWR0aCA9IHJpZ2h0IC0gbGVmdDtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHRpdGxlWCA9IG9wdHMucG9zaXRpb24gPT09ICdsZWZ0JyA/IGxlZnQgKyBvZmZzZXQgOiByaWdodCAtIG9mZnNldDtcblx0XHRcdFx0dGl0bGVZID0gdG9wICsgKChib3R0b20gLSB0b3ApIC8gMik7XG5cdFx0XHRcdG1heFdpZHRoID0gYm90dG9tIC0gdG9wO1xuXHRcdFx0XHRyb3RhdGlvbiA9IE1hdGguUEkgKiAob3B0cy5wb3NpdGlvbiA9PT0gJ2xlZnQnID8gLTAuNSA6IDAuNSk7XG5cdFx0XHR9XG5cblx0XHRcdGN0eC5zYXZlKCk7XG5cdFx0XHRjdHgudHJhbnNsYXRlKHRpdGxlWCwgdGl0bGVZKTtcblx0XHRcdGN0eC5yb3RhdGUocm90YXRpb24pO1xuXHRcdFx0Y3R4LnRleHRBbGlnbiA9ICdjZW50ZXInO1xuXHRcdFx0Y3R4LnRleHRCYXNlbGluZSA9ICdtaWRkbGUnO1xuXG5cdFx0XHR2YXIgdGV4dCA9IG9wdHMudGV4dDtcblx0XHRcdGlmIChoZWxwZXJzLmlzQXJyYXkodGV4dCkpIHtcblx0XHRcdFx0dmFyIHkgPSAwO1xuXHRcdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHRleHQubGVuZ3RoOyArK2kpIHtcblx0XHRcdFx0XHRjdHguZmlsbFRleHQodGV4dFtpXSwgMCwgeSwgbWF4V2lkdGgpO1xuXHRcdFx0XHRcdHkgKz0gbGluZUhlaWdodDtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3R4LmZpbGxUZXh0KHRleHQsIDAsIDAsIG1heFdpZHRoKTtcblx0XHRcdH1cblxuXHRcdFx0Y3R4LnJlc3RvcmUoKTtcblx0XHR9XG5cdH1cbn0pO1xuXG5mdW5jdGlvbiBjcmVhdGVOZXdUaXRsZUJsb2NrQW5kQXR0YWNoKGNoYXJ0LCB0aXRsZU9wdHMpIHtcblx0dmFyIHRpdGxlID0gbmV3IFRpdGxlKHtcblx0XHRjdHg6IGNoYXJ0LmN0eCxcblx0XHRvcHRpb25zOiB0aXRsZU9wdHMsXG5cdFx0Y2hhcnQ6IGNoYXJ0XG5cdH0pO1xuXG5cdGxheW91dHMuY29uZmlndXJlKGNoYXJ0LCB0aXRsZSwgdGl0bGVPcHRzKTtcblx0bGF5b3V0cy5hZGRCb3goY2hhcnQsIHRpdGxlKTtcblx0Y2hhcnQudGl0bGVCbG9jayA9IHRpdGxlO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcblx0aWQ6ICd0aXRsZScsXG5cblx0LyoqXG5cdCAqIEJhY2t3YXJkIGNvbXBhdGliaWxpdHk6IHNpbmNlIDIuMS41LCB0aGUgdGl0bGUgaXMgcmVnaXN0ZXJlZCBhcyBhIHBsdWdpbiwgbWFraW5nXG5cdCAqIENoYXJ0LlRpdGxlIG9ic29sZXRlLiBUbyBhdm9pZCBhIGJyZWFraW5nIGNoYW5nZSwgd2UgZXhwb3J0IHRoZSBUaXRsZSBhcyBwYXJ0IG9mXG5cdCAqIHRoZSBwbHVnaW4sIHdoaWNoIG9uZSB3aWxsIGJlIHJlLWV4cG9zZWQgaW4gdGhlIGNoYXJ0LmpzIGZpbGUuXG5cdCAqIGh0dHBzOi8vZ2l0aHViLmNvbS9jaGFydGpzL0NoYXJ0LmpzL3B1bGwvMjY0MFxuXHQgKiBAcHJpdmF0ZVxuXHQgKi9cblx0X2VsZW1lbnQ6IFRpdGxlLFxuXG5cdGJlZm9yZUluaXQ6IGZ1bmN0aW9uKGNoYXJ0KSB7XG5cdFx0dmFyIHRpdGxlT3B0cyA9IGNoYXJ0Lm9wdGlvbnMudGl0bGU7XG5cblx0XHRpZiAodGl0bGVPcHRzKSB7XG5cdFx0XHRjcmVhdGVOZXdUaXRsZUJsb2NrQW5kQXR0YWNoKGNoYXJ0LCB0aXRsZU9wdHMpO1xuXHRcdH1cblx0fSxcblxuXHRiZWZvcmVVcGRhdGU6IGZ1bmN0aW9uKGNoYXJ0KSB7XG5cdFx0dmFyIHRpdGxlT3B0cyA9IGNoYXJ0Lm9wdGlvbnMudGl0bGU7XG5cdFx0dmFyIHRpdGxlQmxvY2sgPSBjaGFydC50aXRsZUJsb2NrO1xuXG5cdFx0aWYgKHRpdGxlT3B0cykge1xuXHRcdFx0aGVscGVycy5tZXJnZUlmKHRpdGxlT3B0cywgZGVmYXVsdHMuZ2xvYmFsLnRpdGxlKTtcblxuXHRcdFx0aWYgKHRpdGxlQmxvY2spIHtcblx0XHRcdFx0bGF5b3V0cy5jb25maWd1cmUoY2hhcnQsIHRpdGxlQmxvY2ssIHRpdGxlT3B0cyk7XG5cdFx0XHRcdHRpdGxlQmxvY2sub3B0aW9ucyA9IHRpdGxlT3B0cztcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGNyZWF0ZU5ld1RpdGxlQmxvY2tBbmRBdHRhY2goY2hhcnQsIHRpdGxlT3B0cyk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIGlmICh0aXRsZUJsb2NrKSB7XG5cdFx0XHRsYXlvdXRzLnJlbW92ZUJveChjaGFydCwgdGl0bGVCbG9jayk7XG5cdFx0XHRkZWxldGUgY2hhcnQudGl0bGVCbG9jaztcblx0XHR9XG5cdH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbm1vZHVsZS5leHBvcnRzID0ge307XG5tb2R1bGUuZXhwb3J0cy5maWxsZXIgPSByZXF1aXJlKCcuL3BsdWdpbi5maWxsZXInKTtcbm1vZHVsZS5leHBvcnRzLmxlZ2VuZCA9IHJlcXVpcmUoJy4vcGx1Z2luLmxlZ2VuZCcpO1xubW9kdWxlLmV4cG9ydHMudGl0bGUgPSByZXF1aXJlKCcuL3BsdWdpbi50aXRsZScpO1xuIiwiLyoqXG4gKiBAbmFtZXNwYWNlIENoYXJ0XG4gKi9cbnZhciBDaGFydCA9IHJlcXVpcmUoJy4vY29yZS9jb3JlJykoKTtcblxuQ2hhcnQuaGVscGVycyA9IHJlcXVpcmUoJy4vaGVscGVycy9pbmRleCcpO1xuXG4vLyBAdG9kbyBkaXNwYXRjaCB0aGVzZSBoZWxwZXJzIGludG8gYXBwcm9wcmlhdGVkIGhlbHBlcnMvaGVscGVycy4qIGZpbGUgYW5kIHdyaXRlIHVuaXQgdGVzdHMhXG5yZXF1aXJlKCcuL2NvcmUvY29yZS5oZWxwZXJzJykoQ2hhcnQpO1xuXG5DaGFydC5BbmltYXRpb24gPSByZXF1aXJlKCcuL2NvcmUvY29yZS5hbmltYXRpb24nKTtcbkNoYXJ0LmFuaW1hdGlvblNlcnZpY2UgPSByZXF1aXJlKCcuL2NvcmUvY29yZS5hbmltYXRpb25zJyk7XG5DaGFydC5kZWZhdWx0cyA9IHJlcXVpcmUoJy4vY29yZS9jb3JlLmRlZmF1bHRzJyk7XG5DaGFydC5FbGVtZW50ID0gcmVxdWlyZSgnLi9jb3JlL2NvcmUuZWxlbWVudCcpO1xuQ2hhcnQuZWxlbWVudHMgPSByZXF1aXJlKCcuL2VsZW1lbnRzL2luZGV4Jyk7XG5DaGFydC5JbnRlcmFjdGlvbiA9IHJlcXVpcmUoJy4vY29yZS9jb3JlLmludGVyYWN0aW9uJyk7XG5DaGFydC5sYXlvdXRzID0gcmVxdWlyZSgnLi9jb3JlL2NvcmUubGF5b3V0cycpO1xuQ2hhcnQucGxhdGZvcm0gPSByZXF1aXJlKCcuL3BsYXRmb3Jtcy9wbGF0Zm9ybScpO1xuQ2hhcnQucGx1Z2lucyA9IHJlcXVpcmUoJy4vY29yZS9jb3JlLnBsdWdpbnMnKTtcbkNoYXJ0LlNjYWxlID0gcmVxdWlyZSgnLi9jb3JlL2NvcmUuc2NhbGUnKTtcbkNoYXJ0LnNjYWxlU2VydmljZSA9IHJlcXVpcmUoJy4vY29yZS9jb3JlLnNjYWxlU2VydmljZScpO1xuQ2hhcnQuVGlja3MgPSByZXF1aXJlKCcuL2NvcmUvY29yZS50aWNrcycpO1xuQ2hhcnQuVG9vbHRpcCA9IHJlcXVpcmUoJy4vY29yZS9jb3JlLnRvb2x0aXAnKTtcblxucmVxdWlyZSgnLi9jb3JlL2NvcmUuY29udHJvbGxlcicpKENoYXJ0KTtcbnJlcXVpcmUoJy4vY29yZS9jb3JlLmRhdGFzZXRDb250cm9sbGVyJykoQ2hhcnQpO1xuXG5yZXF1aXJlKCcuL3NjYWxlcy9zY2FsZS5saW5lYXJiYXNlJykoQ2hhcnQpO1xucmVxdWlyZSgnLi9zY2FsZXMvc2NhbGUuY2F0ZWdvcnknKShDaGFydCk7XG5yZXF1aXJlKCcuL3NjYWxlcy9zY2FsZS5saW5lYXInKShDaGFydCk7XG5yZXF1aXJlKCcuL3NjYWxlcy9zY2FsZS5sb2dhcml0aG1pYycpKENoYXJ0KTtcbnJlcXVpcmUoJy4vc2NhbGVzL3NjYWxlLnJhZGlhbExpbmVhcicpKENoYXJ0KTtcbnJlcXVpcmUoJy4vc2NhbGVzL3NjYWxlLnRpbWUnKShDaGFydCk7XG5cbi8vIENvbnRyb2xsZXJzIG11c3QgYmUgbG9hZGVkIGFmdGVyIGVsZW1lbnRzXG4vLyBTZWUgQ2hhcnQuY29yZS5kYXRhc2V0Q29udHJvbGxlci5kYXRhRWxlbWVudFR5cGVcbnJlcXVpcmUoJy4vY29udHJvbGxlcnMvY29udHJvbGxlci5iYXInKShDaGFydCk7XG5yZXF1aXJlKCcuL2NvbnRyb2xsZXJzL2NvbnRyb2xsZXIuYnViYmxlJykoQ2hhcnQpO1xucmVxdWlyZSgnLi9jb250cm9sbGVycy9jb250cm9sbGVyLmRvdWdobnV0JykoQ2hhcnQpO1xucmVxdWlyZSgnLi9jb250cm9sbGVycy9jb250cm9sbGVyLmxpbmUnKShDaGFydCk7XG5yZXF1aXJlKCcuL2NvbnRyb2xsZXJzL2NvbnRyb2xsZXIucG9sYXJBcmVhJykoQ2hhcnQpO1xucmVxdWlyZSgnLi9jb250cm9sbGVycy9jb250cm9sbGVyLnJhZGFyJykoQ2hhcnQpO1xucmVxdWlyZSgnLi9jb250cm9sbGVycy9jb250cm9sbGVyLnNjYXR0ZXInKShDaGFydCk7XG5cbnJlcXVpcmUoJy4vY2hhcnRzL0NoYXJ0LkJhcicpKENoYXJ0KTtcbnJlcXVpcmUoJy4vY2hhcnRzL0NoYXJ0LkJ1YmJsZScpKENoYXJ0KTtcbnJlcXVpcmUoJy4vY2hhcnRzL0NoYXJ0LkRvdWdobnV0JykoQ2hhcnQpO1xucmVxdWlyZSgnLi9jaGFydHMvQ2hhcnQuTGluZScpKENoYXJ0KTtcbnJlcXVpcmUoJy4vY2hhcnRzL0NoYXJ0LlBvbGFyQXJlYScpKENoYXJ0KTtcbnJlcXVpcmUoJy4vY2hhcnRzL0NoYXJ0LlJhZGFyJykoQ2hhcnQpO1xucmVxdWlyZSgnLi9jaGFydHMvQ2hhcnQuU2NhdHRlcicpKENoYXJ0KTtcblxuLy8gTG9hZGluZyBidWlsdC1pbiBwbHVnaW5zXG52YXIgcGx1Z2lucyA9IHJlcXVpcmUoJy4vcGx1Z2lucycpO1xuZm9yICh2YXIgayBpbiBwbHVnaW5zKSB7XG5cdGlmIChwbHVnaW5zLmhhc093blByb3BlcnR5KGspKSB7XG5cdFx0Q2hhcnQucGx1Z2lucy5yZWdpc3RlcihwbHVnaW5zW2tdKTtcblx0fVxufVxuXG5DaGFydC5wbGF0Zm9ybS5pbml0aWFsaXplKCk7XG5cbm1vZHVsZS5leHBvcnRzID0gQ2hhcnQ7XG5pZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHtcblx0d2luZG93LkNoYXJ0ID0gQ2hhcnQ7XG59XG5cbi8vIERFUFJFQ0FUSU9OU1xuXG4vKipcbiAqIFByb3ZpZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCBub3QgYXZhaWxhYmxlIGFueW1vcmVcbiAqIEBuYW1lc3BhY2UgQ2hhcnQuTGVnZW5kXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuMS41XG4gKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG4gKiBAcHJpdmF0ZVxuICovXG5DaGFydC5MZWdlbmQgPSBwbHVnaW5zLmxlZ2VuZC5fZWxlbWVudDtcblxuLyoqXG4gKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgbm90IGF2YWlsYWJsZSBhbnltb3JlXG4gKiBAbmFtZXNwYWNlIENoYXJ0LlRpdGxlXG4gKiBAZGVwcmVjYXRlZCBzaW5jZSB2ZXJzaW9uIDIuMS41XG4gKiBAdG9kbyByZW1vdmUgYXQgdmVyc2lvbiAzXG4gKiBAcHJpdmF0ZVxuICovXG5DaGFydC5UaXRsZSA9IHBsdWdpbnMudGl0bGUuX2VsZW1lbnQ7XG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIHVzZSBDaGFydC5wbHVnaW5zIGluc3RlYWRcbiAqIEBuYW1lc3BhY2UgQ2hhcnQucGx1Z2luU2VydmljZVxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjEuNVxuICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuICogQHByaXZhdGVcbiAqL1xuQ2hhcnQucGx1Z2luU2VydmljZSA9IENoYXJ0LnBsdWdpbnM7XG5cbi8qKlxuICogUHJvdmlkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIGluaGVyaXRpbmcgZnJvbSBDaGFydC5QbHVnaW5nQmFzZSBoYXMgbm9cbiAqIGVmZmVjdCwgaW5zdGVhZCBzaW1wbHkgY3JlYXRlL3JlZ2lzdGVyIHBsdWdpbnMgdmlhIHBsYWluIEphdmFTY3JpcHQgb2JqZWN0cy5cbiAqIEBpbnRlcmZhY2UgQ2hhcnQuUGx1Z2luQmFzZVxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjUuMFxuICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuICogQHByaXZhdGVcbiAqL1xuQ2hhcnQuUGx1Z2luQmFzZSA9IENoYXJ0LkVsZW1lbnQuZXh0ZW5kKHt9KTtcblxuLyoqXG4gKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdXNlIENoYXJ0LmhlbHBlcnMuY2FudmFzIGluc3RlYWQuXG4gKiBAbmFtZXNwYWNlIENoYXJ0LmNhbnZhc0hlbHBlcnNcbiAqIEBkZXByZWNhdGVkIHNpbmNlIHZlcnNpb24gMi42LjBcbiAqIEB0b2RvIHJlbW92ZSBhdCB2ZXJzaW9uIDNcbiAqIEBwcml2YXRlXG4gKi9cbkNoYXJ0LmNhbnZhc0hlbHBlcnMgPSBDaGFydC5oZWxwZXJzLmNhbnZhcztcblxuLyoqXG4gKiBQcm92aWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgdXNlIENoYXJ0LmxheW91dHMgaW5zdGVhZC5cbiAqIEBuYW1lc3BhY2UgQ2hhcnQubGF5b3V0U2VydmljZVxuICogQGRlcHJlY2F0ZWQgc2luY2UgdmVyc2lvbiAyLjguMFxuICogQHRvZG8gcmVtb3ZlIGF0IHZlcnNpb24gM1xuICogQHByaXZhdGVcbiAqL1xuQ2hhcnQubGF5b3V0U2VydmljZSA9IENoYXJ0LmxheW91dHM7XG4iLCJpbXBvcnQgQ2hhcnQgZnJvbSAnY2hhcnQuanMnO1xuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlQ2hhcnQoY2hhcnRJZCwgY2hhcnRUeXBlKSB7XG4gIHJldHVybiB7XG4gICAgcmVuZGVyOiBmdW5jdGlvbiByZW5kZXIoY3JlYXRlRWxlbWVudCkge1xuICAgICAgcmV0dXJuIGNyZWF0ZUVsZW1lbnQoJ2RpdicsIHtcbiAgICAgICAgc3R5bGU6IHRoaXMuc3R5bGVzLFxuICAgICAgICBjbGFzczogdGhpcy5jc3NDbGFzc2VzXG4gICAgICB9LCBbY3JlYXRlRWxlbWVudCgnY2FudmFzJywge1xuICAgICAgICBhdHRyczoge1xuICAgICAgICAgIGlkOiB0aGlzLmNoYXJ0SWQsXG4gICAgICAgICAgd2lkdGg6IHRoaXMud2lkdGgsXG4gICAgICAgICAgaGVpZ2h0OiB0aGlzLmhlaWdodFxuICAgICAgICB9LFxuICAgICAgICByZWY6ICdjYW52YXMnXG4gICAgICB9KV0pO1xuICAgIH0sXG4gICAgcHJvcHM6IHtcbiAgICAgIGNoYXJ0SWQ6IHtcbiAgICAgICAgZGVmYXVsdDogY2hhcnRJZCxcbiAgICAgICAgdHlwZTogU3RyaW5nXG4gICAgICB9LFxuICAgICAgd2lkdGg6IHtcbiAgICAgICAgZGVmYXVsdDogNDAwLFxuICAgICAgICB0eXBlOiBOdW1iZXJcbiAgICAgIH0sXG4gICAgICBoZWlnaHQ6IHtcbiAgICAgICAgZGVmYXVsdDogNDAwLFxuICAgICAgICB0eXBlOiBOdW1iZXJcbiAgICAgIH0sXG4gICAgICBjc3NDbGFzc2VzOiB7XG4gICAgICAgIHR5cGU6IFN0cmluZyxcbiAgICAgICAgZGVmYXVsdDogJydcbiAgICAgIH0sXG4gICAgICBzdHlsZXM6IHtcbiAgICAgICAgdHlwZTogT2JqZWN0XG4gICAgICB9LFxuICAgICAgcGx1Z2luczoge1xuICAgICAgICB0eXBlOiBBcnJheSxcbiAgICAgICAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoKSB7XG4gICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgX2NoYXJ0OiBudWxsLFxuICAgICAgICBfcGx1Z2luczogdGhpcy5wbHVnaW5zXG4gICAgICB9O1xuICAgIH0sXG4gICAgbWV0aG9kczoge1xuICAgICAgYWRkUGx1Z2luOiBmdW5jdGlvbiBhZGRQbHVnaW4ocGx1Z2luKSB7XG4gICAgICAgIHRoaXMuJGRhdGEuX3BsdWdpbnMucHVzaChwbHVnaW4pO1xuICAgICAgfSxcbiAgICAgIGdlbmVyYXRlTGVnZW5kOiBmdW5jdGlvbiBnZW5lcmF0ZUxlZ2VuZCgpIHtcbiAgICAgICAgaWYgKHRoaXMuJGRhdGEuX2NoYXJ0KSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuJGRhdGEuX2NoYXJ0LmdlbmVyYXRlTGVnZW5kKCk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICByZW5kZXJDaGFydDogZnVuY3Rpb24gcmVuZGVyQ2hhcnQoZGF0YSwgb3B0aW9ucykge1xuICAgICAgICBpZiAodGhpcy4kZGF0YS5fY2hhcnQpIHRoaXMuJGRhdGEuX2NoYXJ0LmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy4kZGF0YS5fY2hhcnQgPSBuZXcgQ2hhcnQodGhpcy4kcmVmcy5jYW52YXMuZ2V0Q29udGV4dCgnMmQnKSwge1xuICAgICAgICAgIHR5cGU6IGNoYXJ0VHlwZSxcbiAgICAgICAgICBkYXRhOiBkYXRhLFxuICAgICAgICAgIG9wdGlvbnM6IG9wdGlvbnMsXG4gICAgICAgICAgcGx1Z2luczogdGhpcy4kZGF0YS5fcGx1Z2luc1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGJlZm9yZURlc3Ryb3k6IGZ1bmN0aW9uIGJlZm9yZURlc3Ryb3koKSB7XG4gICAgICBpZiAodGhpcy4kZGF0YS5fY2hhcnQpIHtcbiAgICAgICAgdGhpcy4kZGF0YS5fY2hhcnQuZGVzdHJveSgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcbn1cbmV4cG9ydCB2YXIgQmFyID0gZ2VuZXJhdGVDaGFydCgnYmFyLWNoYXJ0JywgJ2JhcicpO1xuZXhwb3J0IHZhciBIb3Jpem9udGFsQmFyID0gZ2VuZXJhdGVDaGFydCgnaG9yaXpvbnRhbGJhci1jaGFydCcsICdob3Jpem9udGFsQmFyJyk7XG5leHBvcnQgdmFyIERvdWdobnV0ID0gZ2VuZXJhdGVDaGFydCgnZG91Z2hudXQtY2hhcnQnLCAnZG91Z2hudXQnKTtcbmV4cG9ydCB2YXIgTGluZSA9IGdlbmVyYXRlQ2hhcnQoJ2xpbmUtY2hhcnQnLCAnbGluZScpO1xuZXhwb3J0IHZhciBQaWUgPSBnZW5lcmF0ZUNoYXJ0KCdwaWUtY2hhcnQnLCAncGllJyk7XG5leHBvcnQgdmFyIFBvbGFyQXJlYSA9IGdlbmVyYXRlQ2hhcnQoJ3BvbGFyLWNoYXJ0JywgJ3BvbGFyQXJlYScpO1xuZXhwb3J0IHZhciBSYWRhciA9IGdlbmVyYXRlQ2hhcnQoJ3JhZGFyLWNoYXJ0JywgJ3JhZGFyJyk7XG5leHBvcnQgdmFyIEJ1YmJsZSA9IGdlbmVyYXRlQ2hhcnQoJ2J1YmJsZS1jaGFydCcsICdidWJibGUnKTtcbmV4cG9ydCB2YXIgU2NhdHRlciA9IGdlbmVyYXRlQ2hhcnQoJ3NjYXR0ZXItY2hhcnQnLCAnc2NhdHRlcicpO1xuZXhwb3J0IGRlZmF1bHQge1xuICBCYXI6IEJhcixcbiAgSG9yaXpvbnRhbEJhcjogSG9yaXpvbnRhbEJhcixcbiAgRG91Z2hudXQ6IERvdWdobnV0LFxuICBMaW5lOiBMaW5lLFxuICBQaWU6IFBpZSxcbiAgUG9sYXJBcmVhOiBQb2xhckFyZWEsXG4gIFJhZGFyOiBSYWRhcixcbiAgQnViYmxlOiBCdWJibGUsXG4gIFNjYXR0ZXI6IFNjYXR0ZXJcbn07IiwiPHNjcmlwdD5cbiAgaW1wb3J0IHsgQmFyLCBtaXhpbnMgfSBmcm9tICd2dWUtY2hhcnRqcyc7XG4gIGNvbnN0IHsgcmVhY3RpdmVQcm9wIH0gPSBtaXhpbnM7XG5cbiAgQ2hhcnQuZGVmYXVsdHMuZ2xvYmFsLnRpdGxlLnBhZGRpbmcgPSAyMDtcbiAgQ2hhcnQuZGVmYXVsdHMuZ2xvYmFsLnRpdGxlLmZvbnRTaXplID0gMTY7XG4gIENoYXJ0LmRlZmF1bHRzLmdsb2JhbC50aXRsZS5saW5lSGVpZ2h0ID0gMS42O1xuXG4gIGV4cG9ydCBkZWZhdWx0IHtcbiAgICBleHRlbmRzOiBCYXIsXG4gICAgbWl4aW5zOiBbcmVhY3RpdmVQcm9wXSxcbiAgICBwcm9wczoge1xuICAgICAgb3B0aW9uczoge1xuICAgICAgICB0eXBlOiBPYmplY3QsXG4gICAgICAgIGRlZmF1bHQoKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGxlZ2VuZDoge1xuICAgICAgICAgICAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBsaW5lVGVuc2lvbjogMSxcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuICAgIG1vdW50ZWQoKSB7XG4gICAgICB0aGlzLnJlbmRlckNoYXJ0KHRoaXMuY2hhcnREYXRhLCB0aGlzLm9wdGlvbnMpO1xuICAgIH0sXG4gIH07XG48L3NjcmlwdD4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IGNoYXJ0TGFiZWxzID0gWycxOTgwJywgJzE5OTAnLCAnMjAwMCcsICcyMDEwJywgJzIwMjAnXTtcblxuY29uc3QgY2hhcnREYXRhTGlzdCA9IFs2NTQyNTY0LCA3MzIyNTY0LCA4MDA4Mjc4LCA4MTc1MTMzLCA1NDc1MTMzXTtcblxuY29uc3QgQ2hhcnREYXRhID0ge1xuICBkYXRhOiB7XG4gICAgbGFiZWxzOiBjaGFydExhYmVscyxcbiAgICBkYXRhc2V0czogW1xuICAgICAge1xuICAgICAgICBkYXRhOiBjaGFydERhdGFMaXN0LFxuICAgICAgICBmaWxsOiBmYWxzZSwgLy8gdXNlZCBieSBsaW5lIGNoYXJ0XG4gICAgICAgIGJhY2tncm91bmRDb2xvcjogW1xuICAgICAgICAgICcjMkYzMzRGJyxcbiAgICAgICAgICAnIzMxNTVBNicsXG4gICAgICAgICAgJyNGMjY5NUQnLFxuICAgICAgICAgICcjRUJCQ0Q4JyxcbiAgICAgICAgICAnI0Y5QTEzNycsXG4gICAgICAgIF0sXG4gICAgICAgIGJvcmRlckNvbG9yOiBbXG4gICAgICAgICAgJyNBQ0FFQjknXG4gICAgICAgIF0sXG4gICAgICAgIGJvcmRlcldpZHRoOiAxXG4gICAgICB9LFxuICAgIF1cbiAgfSxcbiAgYmFyOiB7XG4gICAgb3B0aW9uczoge1xuICAgICAgdGl0bGU6IHtcbiAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgdGV4dDogJ1BvcHVsYXRpb24gQ2hhcnQnLFxuICAgICAgfSxcbiAgICAgIGxlZ2VuZDoge1xuICAgICAgICBkaXNwbGF5OiBmYWxzZSxcbiAgICAgIH0sXG4gICAgICBsaW5lVGVuc2lvbjogMSxcbiAgICAgIHNjYWxlczoge1xuICAgICAgICB4QXhlczogW3tcbiAgICAgICAgICBzY2FsZUxhYmVsOiB7XG4gICAgICAgICAgICBkaXNwbGF5OiB0cnVlLFxuICAgICAgICAgICAgbGFiZWxTdHJpbmc6ICdZZWFycycsXG4gICAgICAgICAgfVxuICAgICAgICB9XSxcbiAgICAgICAgeUF4ZXM6IFt7XG4gICAgICAgICAgc2NhbGVMYWJlbDoge1xuICAgICAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgICAgIGxhYmVsU3RyaW5nOiAnUG9wdWxhdGlvbicsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB0aWNrczoge1xuICAgICAgICAgICAgcGFkZGluZzogMjUsXG4gICAgICAgICAgfVxuICAgICAgICB9XVxuICAgICAgfVxuICAgIH1cbiAgfSxcbiAgaG9yaXpvbnRhbEJhcjoge1xuICAgIG9wdGlvbnM6IHtcbiAgICAgIHRpdGxlOiB7XG4gICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgIHRleHQ6ICdQb3B1bGF0aW9uIENoYXJ0JyxcbiAgICAgIH0sXG4gICAgICBsZWdlbmQ6IHtcbiAgICAgICAgZGlzcGxheTogZmFsc2UsXG4gICAgICB9LFxuICAgICAgbGluZVRlbnNpb246IDEsXG4gICAgICBzY2FsZXM6IHtcbiAgICAgICAgeEF4ZXM6IFt7XG4gICAgICAgICAgc2NhbGVMYWJlbDoge1xuICAgICAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgICAgIGxhYmVsU3RyaW5nOiAnUG9wdWxhdGlvbicsXG4gICAgICAgICAgfVxuICAgICAgICB9XSxcbiAgICAgICAgeUF4ZXM6IFt7XG4gICAgICAgICAgc2NhbGVMYWJlbDoge1xuICAgICAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgICAgICAgIGxhYmVsU3RyaW5nOiAnWWVhcnMnLFxuICAgICAgICAgIH0sXG4gICAgICAgICAgdGlja3M6IHtcbiAgICAgICAgICAgIHBhZGRpbmc6IDI1LFxuICAgICAgICAgIH1cbiAgICAgICAgfV1cbiAgICAgIH1cbiAgICB9XG4gIH0sXG4gIHBpZToge1xuICAgIG9wdGlvbnM6IHtcbiAgICAgIHRpdGxlOiB7XG4gICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgIHRleHQ6ICdQb3B1bGF0aW9uIENoYXJ0JyxcbiAgICAgIH0sXG4gICAgICBsZWdlbmQ6IHtcbiAgICAgICAgZGlzcGxheTogdHJ1ZSxcbiAgICAgIH0sXG4gICAgICBsaW5lVGVuc2lvbjogMSxcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2hhcnREYXRhOyIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IFZ1ZSBmcm9tICd2dWUvZGlzdC92dWUuZXNtLmJyb3dzZXInO1xuaW1wb3J0IENoYXJ0Q29tcG9uZW50IGZyb20gJy4vY2hhcnQtLWJhci52dWUnOyAvLyBPdXIgY29tcG9uZW50XG5pbXBvcnQgQ2hhcnREYXRhIGZyb20gJy4vY2hhcnQuZGF0YSc7IC8vIE91ciBzYW1wbGUgZGF0YVxuXG5jb25zdCBjaGFydFR5cGUgPSAnYmFyJztcblxuY2xhc3MgQ2hhcnRCYXIge1xuICBjb25zdHJ1Y3RvcihzZXR0aW5ncyA9IHt9LCBkYXRhID0ge30pIHtcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIHRoaXMuc2V0dGluZ3MgPSBzZXR0aW5ncztcbiAgICB0aGlzLmluaXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJbml0aWFsaXplcyB0aGUgbW9kdWxlXG4gICAqL1xuICBpbml0KCkge1xuICAgIFZ1ZS5jb21wb25lbnQoYG55Y28tY2hhcnQtJHtjaGFydFR5cGV9YCwgQ2hhcnRDb21wb25lbnQpO1xuXG4gICAgbmV3IFZ1ZSh7XG4gICAgICBlbDogYFtkYXRhLWpzPVwiY2hhcnQtJHtjaGFydFR5cGV9XCJdYCxcbiAgICAgIGRlbGltaXRlcnM6IFsndnsnLCAnfSddLFxuICAgICAgZGF0YSgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBkYXRhOiBDaGFydERhdGEuZGF0YSxcbiAgICAgICAgICBvcHRpb25zOiBDaGFydERhdGEuYmFyLm9wdGlvbnNcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIExvZ3MgY29uc3RhbnRzIHRvIHRoZSBkZWJ1Z2dlclxuICAgKiBAcGFyYW0gIHtvYmplY3R9IHBhcmFtIC0gb3VyIGNvbnN0YW50c1xuICAgKi9cbiAgX2NvbnN0YW50cyhwYXJhbSkge1xuICAgIGNvbnNvbGUuZGlyKHBhcmFtKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBDaGFydEJhcjsiLCI8c2NyaXB0PlxuICBpbXBvcnQgeyBIb3Jpem9udGFsQmFyLCBtaXhpbnMgfSBmcm9tICd2dWUtY2hhcnRqcyc7XG4gIGNvbnN0IHsgcmVhY3RpdmVQcm9wIH0gPSBtaXhpbnM7XG5cbiAgQ2hhcnQuZGVmYXVsdHMuZ2xvYmFsLnRpdGxlLnBhZGRpbmcgPSAyMDtcbiAgQ2hhcnQuZGVmYXVsdHMuZ2xvYmFsLnRpdGxlLmZvbnRTaXplID0gMTY7XG4gIENoYXJ0LmRlZmF1bHRzLmdsb2JhbC50aXRsZS5saW5lSGVpZ2h0ID0gMS42O1xuXG4gIGV4cG9ydCBkZWZhdWx0IHtcbiAgICBleHRlbmRzOiBIb3Jpem9udGFsQmFyLFxuICAgIG1peGluczogW3JlYWN0aXZlUHJvcF0sXG4gICAgcHJvcHM6IHtcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgICBkZWZhdWx0KCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgICAgZGlzcGxheTogZmFsc2UsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGluZVRlbnNpb246IDEsXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBtb3VudGVkKCkge1xuICAgICAgdGhpcy5yZW5kZXJDaGFydCh0aGlzLmNoYXJ0RGF0YSwgdGhpcy5vcHRpb25zKTtcbiAgICB9LFxuICB9O1xuPC9zY3JpcHQ+IiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgVnVlIGZyb20gJ3Z1ZS9kaXN0L3Z1ZS5lc20uYnJvd3Nlcic7XG5pbXBvcnQgQ2hhcnRDb21wb25lbnQgZnJvbSAnLi9jaGFydC0taG9yaXpvbnRhbC1iYXIudnVlJzsgLy8gT3VyIGNvbXBvbmVudFxuaW1wb3J0IENoYXJ0RGF0YSBmcm9tICcuL2NoYXJ0LmRhdGEnOyAvLyBPdXIgc2FtcGxlIGRhdGFcblxuY29uc3QgY2hhcnRUeXBlID0gJ2hvcml6b250YWwtYmFyJztcblxuY2xhc3MgQ2hhcnRIb3Jpem9udGFsQmFyIHtcbiAgY29uc3RydWN0b3Ioc2V0dGluZ3MgPSB7fSwgZGF0YSA9IHt9KSB7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB0aGlzLnNldHRpbmdzID0gc2V0dGluZ3M7XG4gICAgdGhpcy5pbml0KCk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIG1vZHVsZVxuICAgKi9cbiAgaW5pdCgpIHtcbiAgICBWdWUuY29tcG9uZW50KGBueWNvLWNoYXJ0LSR7Y2hhcnRUeXBlfWAsIENoYXJ0Q29tcG9uZW50KTtcblxuICAgIG5ldyBWdWUoe1xuICAgICAgZWw6IGBbZGF0YS1qcz1cImNoYXJ0LSR7Y2hhcnRUeXBlfVwiXWAsXG4gICAgICBkZWxpbWl0ZXJzOiBbJ3Z7JywgJ30nXSxcbiAgICAgIGRhdGEoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgZGF0YTogQ2hhcnREYXRhLmRhdGEsXG4gICAgICAgICAgb3B0aW9uczogQ2hhcnREYXRhLmhvcml6b250YWxCYXIub3B0aW9uc1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogTG9ncyBjb25zdGFudHMgdG8gdGhlIGRlYnVnZ2VyXG4gICAqIEBwYXJhbSAge29iamVjdH0gcGFyYW0gLSBvdXIgY29uc3RhbnRzXG4gICAqL1xuICBfY29uc3RhbnRzKHBhcmFtKSB7XG4gICAgY29uc29sZS5kaXIocGFyYW0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENoYXJ0SG9yaXpvbnRhbEJhcjsiLCI8c2NyaXB0PlxuICBpbXBvcnQgeyBMaW5lLCBtaXhpbnMgfSBmcm9tICd2dWUtY2hhcnRqcyc7XG4gIGNvbnN0IHsgcmVhY3RpdmVQcm9wIH0gPSBtaXhpbnM7XG5cbiAgQ2hhcnQuZGVmYXVsdHMuZ2xvYmFsLnRpdGxlLnBhZGRpbmcgPSAyMDtcbiAgQ2hhcnQuZGVmYXVsdHMuZ2xvYmFsLnRpdGxlLmZvbnRTaXplID0gMTY7XG4gIENoYXJ0LmRlZmF1bHRzLmdsb2JhbC50aXRsZS5saW5lSGVpZ2h0ID0gMS42O1xuXG4gIGV4cG9ydCBkZWZhdWx0IHtcbiAgICBleHRlbmRzOiBMaW5lLFxuICAgIG1peGluczogW3JlYWN0aXZlUHJvcF0sXG4gICAgcHJvcHM6IHtcbiAgICAgIG9wdGlvbnM6IHtcbiAgICAgICAgdHlwZTogT2JqZWN0LFxuICAgICAgICBkZWZhdWx0KCkge1xuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBsZWdlbmQ6IHtcbiAgICAgICAgICAgICAgZGlzcGxheTogZmFsc2UsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGluZVRlbnNpb246IDEsXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBtb3VudGVkKCkge1xuICAgICAgdGhpcy5yZW5kZXJDaGFydCh0aGlzLmNoYXJ0RGF0YSwgdGhpcy5vcHRpb25zKTtcbiAgICB9LFxuICB9O1xuPC9zY3JpcHQ+IiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgVnVlIGZyb20gJ3Z1ZS9kaXN0L3Z1ZS5lc20uYnJvd3Nlcic7XG5pbXBvcnQgQ2hhcnRDb21wb25lbnQgZnJvbSAnLi9jaGFydC0tbGluZS52dWUnOyAvLyBPdXIgY29tcG9uZW50XG5pbXBvcnQgQ2hhcnREYXRhIGZyb20gJy4vY2hhcnQuZGF0YSc7IC8vIE91ciBzYW1wbGUgZGF0YVxuXG5jb25zdCBjaGFydFR5cGUgPSAnbGluZSc7XG5cbmNsYXNzIENoYXJ0TGluZSB7XG4gIGNvbnN0cnVjdG9yKHNldHRpbmdzID0ge30sIGRhdGEgPSB7fSkge1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgdGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzO1xuICAgIHRoaXMuaW5pdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBtb2R1bGVcbiAgICovXG4gIGluaXQoKSB7XG4gICAgVnVlLmNvbXBvbmVudChgbnljby1jaGFydC0ke2NoYXJ0VHlwZX1gLCBDaGFydENvbXBvbmVudCk7XG5cbiAgICBuZXcgVnVlKHtcbiAgICAgIGVsOiBgW2RhdGEtanM9XCJjaGFydC0ke2NoYXJ0VHlwZX1cIl1gLFxuICAgICAgZGVsaW1pdGVyczogWyd2eycsICd9J10sXG4gICAgICBkYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRhdGE6IENoYXJ0RGF0YS5kYXRhLFxuICAgICAgICAgIG9wdGlvbnM6IENoYXJ0RGF0YS5iYXIub3B0aW9uc1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogTG9ncyBjb25zdGFudHMgdG8gdGhlIGRlYnVnZ2VyXG4gICAqIEBwYXJhbSAge29iamVjdH0gcGFyYW0gLSBvdXIgY29uc3RhbnRzXG4gICAqL1xuICBfY29uc3RhbnRzKHBhcmFtKSB7XG4gICAgY29uc29sZS5kaXIocGFyYW0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENoYXJ0TGluZTsiLCI8c2NyaXB0PlxuICBpbXBvcnQgeyBQaWUsIG1peGlucyB9IGZyb20gJ3Z1ZS1jaGFydGpzJztcbiAgY29uc3QgeyByZWFjdGl2ZVByb3AgfSA9IG1peGlucztcblxuICBDaGFydC5kZWZhdWx0cy5nbG9iYWwudGl0bGUucGFkZGluZyA9IDIwO1xuICBDaGFydC5kZWZhdWx0cy5nbG9iYWwudGl0bGUuZm9udFNpemUgPSAxNjtcbiAgQ2hhcnQuZGVmYXVsdHMuZ2xvYmFsLnRpdGxlLmxpbmVIZWlnaHQgPSAxLjY7XG5cbiAgZXhwb3J0IGRlZmF1bHQge1xuICAgIGV4dGVuZHM6IFBpZSxcbiAgICBtaXhpbnM6IFtyZWFjdGl2ZVByb3BdLFxuICAgIHByb3BzOiB7XG4gICAgICBvcHRpb25zOiB7XG4gICAgICAgIHR5cGU6IE9iamVjdCxcbiAgICAgICAgZGVmYXVsdCgpIHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgbGVnZW5kOiB7XG4gICAgICAgICAgICAgIGRpc3BsYXk6IHRydWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbGluZVRlbnNpb246IDEsXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBtb3VudGVkKCkge1xuICAgICAgdGhpcy5yZW5kZXJDaGFydCh0aGlzLmNoYXJ0RGF0YSwgdGhpcy5vcHRpb25zKTtcbiAgICB9LFxuICB9O1xuPC9zY3JpcHQ+IiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgVnVlIGZyb20gJ3Z1ZS9kaXN0L3Z1ZS5lc20uYnJvd3Nlcic7XG5pbXBvcnQgQ2hhcnRDb21wb25lbnQgZnJvbSAnLi9jaGFydC0tcGllLnZ1ZSc7IC8vIE91ciBjb21wb25lbnRcbmltcG9ydCBDaGFydERhdGEgZnJvbSAnLi9jaGFydC5kYXRhJzsgLy8gT3VyIHNhbXBsZSBkYXRhXG5cbmNvbnN0IGNoYXJ0VHlwZSA9ICdwaWUnO1xuXG5jbGFzcyBDaGFydFBpZSB7XG4gIGNvbnN0cnVjdG9yKHNldHRpbmdzID0ge30sIGRhdGEgPSB7fSkge1xuICAgIHRoaXMuZGF0YSA9IGRhdGE7XG4gICAgdGhpcy5zZXR0aW5ncyA9IHNldHRpbmdzO1xuICAgIHRoaXMuaW5pdCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEluaXRpYWxpemVzIHRoZSBtb2R1bGVcbiAgICovXG4gIGluaXQoKSB7XG4gICAgVnVlLmNvbXBvbmVudChgbnljby1jaGFydC0ke2NoYXJ0VHlwZX1gLCBDaGFydENvbXBvbmVudCk7XG5cbiAgICBuZXcgVnVlKHtcbiAgICAgIGVsOiBgW2RhdGEtanM9XCJjaGFydC0ke2NoYXJ0VHlwZX1cIl1gLFxuICAgICAgZGVsaW1pdGVyczogWyd2eycsICd9J10sXG4gICAgICBkYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRhdGE6IENoYXJ0RGF0YS5kYXRhLFxuICAgICAgICAgIG9wdGlvbnM6IENoYXJ0RGF0YS5waWUub3B0aW9uc1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogTG9ncyBjb25zdGFudHMgdG8gdGhlIGRlYnVnZ2VyXG4gICAqIEBwYXJhbSAge29iamVjdH0gcGFyYW0gLSBvdXIgY29uc3RhbnRzXG4gICAqL1xuICBfY29uc3RhbnRzKHBhcmFtKSB7XG4gICAgY29uc29sZS5kaXIocGFyYW0pO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IENoYXJ0UGllOyIsIjx0ZW1wbGF0ZT5cbiAgPGRpdj5cbiAgICA8cD5IZWxsbywgSSdtIGEgbWFwITwvcD5cbiAgICA8ZGl2IGlkPSdueWNvLW1hcCcgc3R5bGU9J2hlaWdodDogNDAwcHg7IHdpZHRoOiA1MDBweCc+PC9kaXY+XG4gICAgPGRpdiBpZD0nbnljby1tYXAtbWVudScgY2xhc3M9J3B0LTInPjwvZGl2PlxuICA8L2Rpdj5cbjwvdGVtcGxhdGU+XG5cbjxzY3JpcHQ+XG4gIGV4cG9ydCBkZWZhdWx0IHtcbiAgICBwcm9wczogW1xuICAgICAgJ2RhdGEnXG4gICAgXSxcbiAgICBkYXRhKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbWFwOiBudWxsLFxuICAgICAgICBtYXBMYXllcnM6IFtdLFxuICAgICAgfTtcbiAgICB9LFxuICAgIG1vdW50ZWQoKSB7XG4gICAgICB0aGlzLmluaXRpYWxpemVNYXAoKTtcbiAgICB9LFxuICAgIGJlZm9yZURlc3Ryb3koKSB7XG4gICAgICAvL2Rlc3Ryb3kgbWFwXG4gICAgfSxcbiAgICB3YXRjaDoge1xuICAgICAgJ2RhdGEuYm9yb3VnaHMnOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY3JlYXRlQm9yb3VnaExheWVyKHRoaXMubWFwLCB0aGlzLmRhdGEuYm9yb3VnaHMpO1xuICAgICAgfSxcbiAgICAgICdkYXRhLm5laWdoYm9yaG9vZHMnOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY3JlYXRlTmVpZ2hib3Job29kTGF5ZXIodGhpcy5tYXAsIHRoaXMuZGF0YS5uZWlnaGJvcmhvb2RzKTtcbiAgICAgIH0sXG4gICAgICAnbWFwTGF5ZXJzJzogZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnRvZ2dsZUxheWVycyh0aGlzLm1hcCwgdGhpcy5tYXBMYXllcnMpO1xuICAgICAgfSxcbiAgICB9LFxuICAgIG1ldGhvZHM6IHtcbiAgICAgIHRyYWNrTWFwTGF5ZXJzKGxheWVyUmVmKSB7XG4gICAgICAgIGlmICghdGhpcy5tYXBMYXllcnMuaW5jbHVkZXMobGF5ZXJSZWYpKSB7XG4gICAgICAgICAgdGhpcy5tYXBMYXllcnMucHVzaChsYXllclJlZik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiTWFwIGxheWVyIGFscmVhZHkgZXhpc3RzXCIpO1xuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgY3JlYXRlQm9yb3VnaExheWVyKG1hcCwgbGF5ZXJEYXRhKSB7XG4gICAgICAgIGlmICghbWFwIHx8ICFsYXllckRhdGEpIHtcbiAgICAgICAgICB0aHJvdyBFcnJvcihgUmVxdWlyZWQgJHttYXAgPyAnbGF5ZXJEYXRhJyA6ICdtYXAnfSBwYXJhbSBpcyBlbXB0eWApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbGF5ZXJSZWYgPSAnYm9yb3VnaHMnO1xuICAgICAgICB0aGlzLnRyYWNrTWFwTGF5ZXJzKGxheWVyUmVmKTtcblxuICAgICAgICBtYXAub24oJ2xvYWQnLCBmdW5jdGlvbihlKSB7XG4gICAgICAgICAgbWFwLmFkZFNvdXJjZShgJHtsYXllclJlZn1gLCB7XG4gICAgICAgICAgICAndHlwZSc6ICdnZW9qc29uJyxcbiAgICAgICAgICAgICdkYXRhJzogbGF5ZXJEYXRhXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICBtYXAuYWRkTGF5ZXIoe1xuICAgICAgICAgICAgJ2lkJzogYCR7bGF5ZXJSZWZ9YCxcbiAgICAgICAgICAgICd0eXBlJzogJ2ZpbGwnLFxuICAgICAgICAgICAgJ3NvdXJjZSc6IGAke2xheWVyUmVmfWAsXG4gICAgICAgICAgICAncGFpbnQnOiB7XG4gICAgICAgICAgICAgICdmaWxsLWNvbG9yJzogJyNmZmExMzMnLFxuICAgICAgICAgICAgICAnZmlsbC1vcGFjaXR5JzogMC42XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0pO1xuICAgICAgfSxcbiAgICAgIGNyZWF0ZU5laWdoYm9yaG9vZExheWVyKG1hcCwgbGF5ZXJEYXRhKSB7XG4gICAgICAgIGlmICghbWFwIHx8ICFsYXllckRhdGEpIHtcbiAgICAgICAgICB0aHJvdyBFcnJvcihgUmVxdWlyZWQgJHttYXAgPyAnbGF5ZXJEYXRhJyA6ICdtYXAnfSBwYXJhbSBpcyBlbXB0eWApO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgbGF5ZXJSZWYgPSAnbmVpZ2hib3Job29kcyc7XG4gICAgICAgIHRoaXMudHJhY2tNYXBMYXllcnMobGF5ZXJSZWYpO1xuXG4gICAgICAgIG1hcC5vbignbG9hZCcsIGZ1bmN0aW9uKGUpIHtcbiAgICAgICAgICBtYXAuYWRkU291cmNlKGAke2xheWVyUmVmfWAsIHtcbiAgICAgICAgICAgICd0eXBlJzogJ2dlb2pzb24nLFxuICAgICAgICAgICAgJ2RhdGEnOiBsYXllckRhdGFcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIG1hcC5hZGRMYXllcih7XG4gICAgICAgICAgICAnaWQnOiBgJHtsYXllclJlZn1gLFxuICAgICAgICAgICAgJ3R5cGUnOiAnZmlsbCcsXG4gICAgICAgICAgICAnc291cmNlJzogYCR7bGF5ZXJSZWZ9YCxcbiAgICAgICAgICAgICdwYWludCc6IHtcbiAgICAgICAgICAgICAgJ2ZpbGwtY29sb3InOiAnI2YyNjk1ZCcsXG4gICAgICAgICAgICAgICdmaWxsLW9wYWNpdHknOiAwLjVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgICB9LFxuICAgICAgdG9nZ2xlTGF5ZXJzKG1hcCwgbGF5ZXJzVG9Ub2dnbGUpIHtcbiAgICAgICAgY29uc3QgdG9nZ2xlYWJsZUxheWVySWRzID0gbGF5ZXJzVG9Ub2dnbGU7XG4gICAgICAgIGNvbnN0IGxheWVycyA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdueWNvLW1hcC1tZW51Jyk7XG5cbiAgICAgICAgLy8gY2xlYXIgYWxsIGNoaWxkIG5vZGVzIGJlZm9yZSBhZGRpbmcgbmV3IG9uZXNcbiAgICAgICAgd2hpbGUgKGxheWVycy5maXJzdENoaWxkKSB7XG4gICAgICAgICAgbGF5ZXJzLnJlbW92ZUNoaWxkKGxheWVycy5maXJzdENoaWxkKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG9nZ2xlYWJsZUxheWVySWRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY29uc3QgaWQgPSB0b2dnbGVhYmxlTGF5ZXJJZHNbaV07XG4gICAgICAgICAgY29uc3QgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKTtcblxuICAgICAgICAgIGxpbmsuaHJlZiA9ICcjJztcbiAgICAgICAgICBsaW5rLmNsYXNzTGlzdC5hZGQoJ2FjdGl2ZScsICdpbmxpbmUtYmxvY2snLCAncHItMScpO1xuICAgICAgICAgIGxpbmsudGV4dENvbnRlbnQgPSBpZDtcblxuICAgICAgICAgIGxpbmsub25jbGljayA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuXG4gICAgICAgICAgICBjb25zdCBjbGlja2VkTGF5ZXIgPSB0aGlzLnRleHRDb250ZW50O1xuICAgICAgICAgICAgY29uc3QgdmlzaWJpbGl0eSA9IG1hcC5nZXRMYXlvdXRQcm9wZXJ0eShjbGlja2VkTGF5ZXIsICd2aXNpYmlsaXR5Jyk7XG5cbiAgICAgICAgICAgIGlmICh2aXNpYmlsaXR5ID09PSAndmlzaWJsZScpIHtcbiAgICAgICAgICAgICAgbWFwLnNldExheW91dFByb3BlcnR5KGNsaWNrZWRMYXllciwgJ3Zpc2liaWxpdHknLCAnbm9uZScpO1xuICAgICAgICAgICAgICB0aGlzLmNsYXNzTGlzdC5yZW1vdmUoJ2FjdGl2ZScpO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdGhpcy5jbGFzc0xpc3QuYWRkKCdhY3RpdmUnKTtcbiAgICAgICAgICAgICAgbWFwLnNldExheW91dFByb3BlcnR5KGNsaWNrZWRMYXllciwgJ3Zpc2liaWxpdHknLCAndmlzaWJsZScpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBsYXllcnMuYXBwZW5kQ2hpbGQobGluayk7XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBpbml0aWFsaXplTWFwKCkge1xuICAgICAgICBtYXBib3hnbC5hY2Nlc3NUb2tlbiA9IHRoaXMuZGF0YS5hcGlfa2V5O1xuXG4gICAgICAgIHRoaXMubWFwID0gbmV3IG1hcGJveGdsLk1hcCh7XG4gICAgICAgICAgY29udGFpbmVyOiAnbnljby1tYXAnLFxuICAgICAgICAgIC8vIFtsb25naXR1ZGUsIGxhdGl0dWRlXVxuICAgICAgICAgIGNlbnRlcjogWy03My45ODY3MTAsIDQwLjY5MzM5MV0sXG4gICAgICAgICAgLy8gdGhlIGluaXRpYWwgem9vbSBsZXZlbCBvZiB0aGUgbWFwXG4gICAgICAgICAgem9vbTogOSxcbiAgICAgICAgICBzdHlsZTogJ21hcGJveDovL3N0eWxlcy9tYXBib3gvc3RyZWV0cy12MTEnXG4gICAgICAgIH0pO1xuXG4gICAgICAgIHRoaXMubWFwLmFkZENvbnRyb2wobmV3IG1hcGJveGdsLk5hdmlnYXRpb25Db250cm9sKCkpO1xuICAgICAgfSxcbiAgICB9XG4gIH07XG48L3NjcmlwdD4iLCIndXNlIHN0cmljdCc7XG5cbmNvbnN0IE1hcERhdGEgPSB7XG4gIGRhdGE6IHtcbiAgICBhcGlfa2V5OiAnWFhYJyxcbiAgICBib3JvdWdoczoge30sXG4gICAgbmVpZ2hib3Job29kczoge31cbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBNYXBEYXRhOyIsIlxudmFyIGxvb2t1cCA9IFtdXG52YXIgcmV2TG9va3VwID0gW11cbnZhciBBcnIgPSB0eXBlb2YgVWludDhBcnJheSAhPT0gJ3VuZGVmaW5lZCcgPyBVaW50OEFycmF5IDogQXJyYXlcbnZhciBpbml0ZWQgPSBmYWxzZTtcbmZ1bmN0aW9uIGluaXQgKCkge1xuICBpbml0ZWQgPSB0cnVlO1xuICB2YXIgY29kZSA9ICdBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvJ1xuICBmb3IgKHZhciBpID0gMCwgbGVuID0gY29kZS5sZW5ndGg7IGkgPCBsZW47ICsraSkge1xuICAgIGxvb2t1cFtpXSA9IGNvZGVbaV1cbiAgICByZXZMb29rdXBbY29kZS5jaGFyQ29kZUF0KGkpXSA9IGlcbiAgfVxuXG4gIHJldkxvb2t1cFsnLScuY2hhckNvZGVBdCgwKV0gPSA2MlxuICByZXZMb29rdXBbJ18nLmNoYXJDb2RlQXQoMCldID0gNjNcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHRvQnl0ZUFycmF5IChiNjQpIHtcbiAgaWYgKCFpbml0ZWQpIHtcbiAgICBpbml0KCk7XG4gIH1cbiAgdmFyIGksIGosIGwsIHRtcCwgcGxhY2VIb2xkZXJzLCBhcnJcbiAgdmFyIGxlbiA9IGI2NC5sZW5ndGhcblxuICBpZiAobGVuICUgNCA+IDApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgc3RyaW5nLiBMZW5ndGggbXVzdCBiZSBhIG11bHRpcGxlIG9mIDQnKVxuICB9XG5cbiAgLy8gdGhlIG51bWJlciBvZiBlcXVhbCBzaWducyAocGxhY2UgaG9sZGVycylcbiAgLy8gaWYgdGhlcmUgYXJlIHR3byBwbGFjZWhvbGRlcnMsIHRoYW4gdGhlIHR3byBjaGFyYWN0ZXJzIGJlZm9yZSBpdFxuICAvLyByZXByZXNlbnQgb25lIGJ5dGVcbiAgLy8gaWYgdGhlcmUgaXMgb25seSBvbmUsIHRoZW4gdGhlIHRocmVlIGNoYXJhY3RlcnMgYmVmb3JlIGl0IHJlcHJlc2VudCAyIGJ5dGVzXG4gIC8vIHRoaXMgaXMganVzdCBhIGNoZWFwIGhhY2sgdG8gbm90IGRvIGluZGV4T2YgdHdpY2VcbiAgcGxhY2VIb2xkZXJzID0gYjY0W2xlbiAtIDJdID09PSAnPScgPyAyIDogYjY0W2xlbiAtIDFdID09PSAnPScgPyAxIDogMFxuXG4gIC8vIGJhc2U2NCBpcyA0LzMgKyB1cCB0byB0d28gY2hhcmFjdGVycyBvZiB0aGUgb3JpZ2luYWwgZGF0YVxuICBhcnIgPSBuZXcgQXJyKGxlbiAqIDMgLyA0IC0gcGxhY2VIb2xkZXJzKVxuXG4gIC8vIGlmIHRoZXJlIGFyZSBwbGFjZWhvbGRlcnMsIG9ubHkgZ2V0IHVwIHRvIHRoZSBsYXN0IGNvbXBsZXRlIDQgY2hhcnNcbiAgbCA9IHBsYWNlSG9sZGVycyA+IDAgPyBsZW4gLSA0IDogbGVuXG5cbiAgdmFyIEwgPSAwXG5cbiAgZm9yIChpID0gMCwgaiA9IDA7IGkgPCBsOyBpICs9IDQsIGogKz0gMykge1xuICAgIHRtcCA9IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDE4KSB8IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDEpXSA8PCAxMikgfCAocmV2TG9va3VwW2I2NC5jaGFyQ29kZUF0KGkgKyAyKV0gPDwgNikgfCByZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSArIDMpXVxuICAgIGFycltMKytdID0gKHRtcCA+PiAxNikgJiAweEZGXG4gICAgYXJyW0wrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltMKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgaWYgKHBsYWNlSG9sZGVycyA9PT0gMikge1xuICAgIHRtcCA9IChyZXZMb29rdXBbYjY0LmNoYXJDb2RlQXQoaSldIDw8IDIpIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldID4+IDQpXG4gICAgYXJyW0wrK10gPSB0bXAgJiAweEZGXG4gIH0gZWxzZSBpZiAocGxhY2VIb2xkZXJzID09PSAxKSB7XG4gICAgdG1wID0gKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpKV0gPDwgMTApIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMSldIDw8IDQpIHwgKHJldkxvb2t1cFtiNjQuY2hhckNvZGVBdChpICsgMildID4+IDIpXG4gICAgYXJyW0wrK10gPSAodG1wID4+IDgpICYgMHhGRlxuICAgIGFycltMKytdID0gdG1wICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIGFyclxufVxuXG5mdW5jdGlvbiB0cmlwbGV0VG9CYXNlNjQgKG51bSkge1xuICByZXR1cm4gbG9va3VwW251bSA+PiAxOCAmIDB4M0ZdICsgbG9va3VwW251bSA+PiAxMiAmIDB4M0ZdICsgbG9va3VwW251bSA+PiA2ICYgMHgzRl0gKyBsb29rdXBbbnVtICYgMHgzRl1cbn1cblxuZnVuY3Rpb24gZW5jb2RlQ2h1bmsgKHVpbnQ4LCBzdGFydCwgZW5kKSB7XG4gIHZhciB0bXBcbiAgdmFyIG91dHB1dCA9IFtdXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgaSArPSAzKSB7XG4gICAgdG1wID0gKHVpbnQ4W2ldIDw8IDE2KSArICh1aW50OFtpICsgMV0gPDwgOCkgKyAodWludDhbaSArIDJdKVxuICAgIG91dHB1dC5wdXNoKHRyaXBsZXRUb0Jhc2U2NCh0bXApKVxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJylcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZyb21CeXRlQXJyYXkgKHVpbnQ4KSB7XG4gIGlmICghaW5pdGVkKSB7XG4gICAgaW5pdCgpO1xuICB9XG4gIHZhciB0bXBcbiAgdmFyIGxlbiA9IHVpbnQ4Lmxlbmd0aFxuICB2YXIgZXh0cmFCeXRlcyA9IGxlbiAlIDMgLy8gaWYgd2UgaGF2ZSAxIGJ5dGUgbGVmdCwgcGFkIDIgYnl0ZXNcbiAgdmFyIG91dHB1dCA9ICcnXG4gIHZhciBwYXJ0cyA9IFtdXG4gIHZhciBtYXhDaHVua0xlbmd0aCA9IDE2MzgzIC8vIG11c3QgYmUgbXVsdGlwbGUgb2YgM1xuXG4gIC8vIGdvIHRocm91Z2ggdGhlIGFycmF5IGV2ZXJ5IHRocmVlIGJ5dGVzLCB3ZSdsbCBkZWFsIHdpdGggdHJhaWxpbmcgc3R1ZmYgbGF0ZXJcbiAgZm9yICh2YXIgaSA9IDAsIGxlbjIgPSBsZW4gLSBleHRyYUJ5dGVzOyBpIDwgbGVuMjsgaSArPSBtYXhDaHVua0xlbmd0aCkge1xuICAgIHBhcnRzLnB1c2goZW5jb2RlQ2h1bmsodWludDgsIGksIChpICsgbWF4Q2h1bmtMZW5ndGgpID4gbGVuMiA/IGxlbjIgOiAoaSArIG1heENodW5rTGVuZ3RoKSkpXG4gIH1cblxuICAvLyBwYWQgdGhlIGVuZCB3aXRoIHplcm9zLCBidXQgbWFrZSBzdXJlIHRvIG5vdCBmb3JnZXQgdGhlIGV4dHJhIGJ5dGVzXG4gIGlmIChleHRyYUJ5dGVzID09PSAxKSB7XG4gICAgdG1wID0gdWludDhbbGVuIC0gMV1cbiAgICBvdXRwdXQgKz0gbG9va3VwW3RtcCA+PiAyXVxuICAgIG91dHB1dCArPSBsb29rdXBbKHRtcCA8PCA0KSAmIDB4M0ZdXG4gICAgb3V0cHV0ICs9ICc9PSdcbiAgfSBlbHNlIGlmIChleHRyYUJ5dGVzID09PSAyKSB7XG4gICAgdG1wID0gKHVpbnQ4W2xlbiAtIDJdIDw8IDgpICsgKHVpbnQ4W2xlbiAtIDFdKVxuICAgIG91dHB1dCArPSBsb29rdXBbdG1wID4+IDEwXVxuICAgIG91dHB1dCArPSBsb29rdXBbKHRtcCA+PiA0KSAmIDB4M0ZdXG4gICAgb3V0cHV0ICs9IGxvb2t1cFsodG1wIDw8IDIpICYgMHgzRl1cbiAgICBvdXRwdXQgKz0gJz0nXG4gIH1cblxuICBwYXJ0cy5wdXNoKG91dHB1dClcblxuICByZXR1cm4gcGFydHMuam9pbignJylcbn1cbiIsIlxuZXhwb3J0IGZ1bmN0aW9uIHJlYWQgKGJ1ZmZlciwgb2Zmc2V0LCBpc0xFLCBtTGVuLCBuQnl0ZXMpIHtcbiAgdmFyIGUsIG1cbiAgdmFyIGVMZW4gPSBuQnl0ZXMgKiA4IC0gbUxlbiAtIDFcbiAgdmFyIGVNYXggPSAoMSA8PCBlTGVuKSAtIDFcbiAgdmFyIGVCaWFzID0gZU1heCA+PiAxXG4gIHZhciBuQml0cyA9IC03XG4gIHZhciBpID0gaXNMRSA/IChuQnl0ZXMgLSAxKSA6IDBcbiAgdmFyIGQgPSBpc0xFID8gLTEgOiAxXG4gIHZhciBzID0gYnVmZmVyW29mZnNldCArIGldXG5cbiAgaSArPSBkXG5cbiAgZSA9IHMgJiAoKDEgPDwgKC1uQml0cykpIC0gMSlcbiAgcyA+Pj0gKC1uQml0cylcbiAgbkJpdHMgKz0gZUxlblxuICBmb3IgKDsgbkJpdHMgPiAwOyBlID0gZSAqIDI1NiArIGJ1ZmZlcltvZmZzZXQgKyBpXSwgaSArPSBkLCBuQml0cyAtPSA4KSB7fVxuXG4gIG0gPSBlICYgKCgxIDw8ICgtbkJpdHMpKSAtIDEpXG4gIGUgPj49ICgtbkJpdHMpXG4gIG5CaXRzICs9IG1MZW5cbiAgZm9yICg7IG5CaXRzID4gMDsgbSA9IG0gKiAyNTYgKyBidWZmZXJbb2Zmc2V0ICsgaV0sIGkgKz0gZCwgbkJpdHMgLT0gOCkge31cblxuICBpZiAoZSA9PT0gMCkge1xuICAgIGUgPSAxIC0gZUJpYXNcbiAgfSBlbHNlIGlmIChlID09PSBlTWF4KSB7XG4gICAgcmV0dXJuIG0gPyBOYU4gOiAoKHMgPyAtMSA6IDEpICogSW5maW5pdHkpXG4gIH0gZWxzZSB7XG4gICAgbSA9IG0gKyBNYXRoLnBvdygyLCBtTGVuKVxuICAgIGUgPSBlIC0gZUJpYXNcbiAgfVxuICByZXR1cm4gKHMgPyAtMSA6IDEpICogbSAqIE1hdGgucG93KDIsIGUgLSBtTGVuKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gd3JpdGUgKGJ1ZmZlciwgdmFsdWUsIG9mZnNldCwgaXNMRSwgbUxlbiwgbkJ5dGVzKSB7XG4gIHZhciBlLCBtLCBjXG4gIHZhciBlTGVuID0gbkJ5dGVzICogOCAtIG1MZW4gLSAxXG4gIHZhciBlTWF4ID0gKDEgPDwgZUxlbikgLSAxXG4gIHZhciBlQmlhcyA9IGVNYXggPj4gMVxuICB2YXIgcnQgPSAobUxlbiA9PT0gMjMgPyBNYXRoLnBvdygyLCAtMjQpIC0gTWF0aC5wb3coMiwgLTc3KSA6IDApXG4gIHZhciBpID0gaXNMRSA/IDAgOiAobkJ5dGVzIC0gMSlcbiAgdmFyIGQgPSBpc0xFID8gMSA6IC0xXG4gIHZhciBzID0gdmFsdWUgPCAwIHx8ICh2YWx1ZSA9PT0gMCAmJiAxIC8gdmFsdWUgPCAwKSA/IDEgOiAwXG5cbiAgdmFsdWUgPSBNYXRoLmFicyh2YWx1ZSlcblxuICBpZiAoaXNOYU4odmFsdWUpIHx8IHZhbHVlID09PSBJbmZpbml0eSkge1xuICAgIG0gPSBpc05hTih2YWx1ZSkgPyAxIDogMFxuICAgIGUgPSBlTWF4XG4gIH0gZWxzZSB7XG4gICAgZSA9IE1hdGguZmxvb3IoTWF0aC5sb2codmFsdWUpIC8gTWF0aC5MTjIpXG4gICAgaWYgKHZhbHVlICogKGMgPSBNYXRoLnBvdygyLCAtZSkpIDwgMSkge1xuICAgICAgZS0tXG4gICAgICBjICo9IDJcbiAgICB9XG4gICAgaWYgKGUgKyBlQmlhcyA+PSAxKSB7XG4gICAgICB2YWx1ZSArPSBydCAvIGNcbiAgICB9IGVsc2Uge1xuICAgICAgdmFsdWUgKz0gcnQgKiBNYXRoLnBvdygyLCAxIC0gZUJpYXMpXG4gICAgfVxuICAgIGlmICh2YWx1ZSAqIGMgPj0gMikge1xuICAgICAgZSsrXG4gICAgICBjIC89IDJcbiAgICB9XG5cbiAgICBpZiAoZSArIGVCaWFzID49IGVNYXgpIHtcbiAgICAgIG0gPSAwXG4gICAgICBlID0gZU1heFxuICAgIH0gZWxzZSBpZiAoZSArIGVCaWFzID49IDEpIHtcbiAgICAgIG0gPSAodmFsdWUgKiBjIC0gMSkgKiBNYXRoLnBvdygyLCBtTGVuKVxuICAgICAgZSA9IGUgKyBlQmlhc1xuICAgIH0gZWxzZSB7XG4gICAgICBtID0gdmFsdWUgKiBNYXRoLnBvdygyLCBlQmlhcyAtIDEpICogTWF0aC5wb3coMiwgbUxlbilcbiAgICAgIGUgPSAwXG4gICAgfVxuICB9XG5cbiAgZm9yICg7IG1MZW4gPj0gODsgYnVmZmVyW29mZnNldCArIGldID0gbSAmIDB4ZmYsIGkgKz0gZCwgbSAvPSAyNTYsIG1MZW4gLT0gOCkge31cblxuICBlID0gKGUgPDwgbUxlbikgfCBtXG4gIGVMZW4gKz0gbUxlblxuICBmb3IgKDsgZUxlbiA+IDA7IGJ1ZmZlcltvZmZzZXQgKyBpXSA9IGUgJiAweGZmLCBpICs9IGQsIGUgLz0gMjU2LCBlTGVuIC09IDgpIHt9XG5cbiAgYnVmZmVyW29mZnNldCArIGkgLSBkXSB8PSBzICogMTI4XG59XG4iLCJ2YXIgdG9TdHJpbmcgPSB7fS50b1N0cmluZztcblxuZXhwb3J0IGRlZmF1bHQgQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCIvKiFcbiAqIFRoZSBidWZmZXIgbW9kdWxlIGZyb20gbm9kZS5qcywgZm9yIHRoZSBicm93c2VyLlxuICpcbiAqIEBhdXRob3IgICBGZXJvc3MgQWJvdWtoYWRpamVoIDxmZXJvc3NAZmVyb3NzLm9yZz4gPGh0dHA6Ly9mZXJvc3Mub3JnPlxuICogQGxpY2Vuc2UgIE1JVFxuICovXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xuXG5cbmltcG9ydCAqIGFzIGJhc2U2NCBmcm9tICcuL2Jhc2U2NCdcbmltcG9ydCAqIGFzIGllZWU3NTQgZnJvbSAnLi9pZWVlNzU0J1xuaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi9pc0FycmF5J1xuXG5leHBvcnQgdmFyIElOU1BFQ1RfTUFYX0JZVEVTID0gNTBcblxuLyoqXG4gKiBJZiBgQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlRgOlxuICogICA9PT0gdHJ1ZSAgICBVc2UgVWludDhBcnJheSBpbXBsZW1lbnRhdGlvbiAoZmFzdGVzdClcbiAqICAgPT09IGZhbHNlICAgVXNlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiAobW9zdCBjb21wYXRpYmxlLCBldmVuIElFNilcbiAqXG4gKiBCcm93c2VycyB0aGF0IHN1cHBvcnQgdHlwZWQgYXJyYXlzIGFyZSBJRSAxMCssIEZpcmVmb3ggNCssIENocm9tZSA3KywgU2FmYXJpIDUuMSssXG4gKiBPcGVyYSAxMS42KywgaU9TIDQuMisuXG4gKlxuICogRHVlIHRvIHZhcmlvdXMgYnJvd3NlciBidWdzLCBzb21ldGltZXMgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiB3aWxsIGJlIHVzZWQgZXZlblxuICogd2hlbiB0aGUgYnJvd3NlciBzdXBwb3J0cyB0eXBlZCBhcnJheXMuXG4gKlxuICogTm90ZTpcbiAqXG4gKiAgIC0gRmlyZWZveCA0LTI5IGxhY2tzIHN1cHBvcnQgZm9yIGFkZGluZyBuZXcgcHJvcGVydGllcyB0byBgVWludDhBcnJheWAgaW5zdGFuY2VzLFxuICogICAgIFNlZTogaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njk1NDM4LlxuICpcbiAqICAgLSBDaHJvbWUgOS0xMCBpcyBtaXNzaW5nIHRoZSBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uLlxuICpcbiAqICAgLSBJRTEwIGhhcyBhIGJyb2tlbiBgVHlwZWRBcnJheS5wcm90b3R5cGUuc3ViYXJyYXlgIGZ1bmN0aW9uIHdoaWNoIHJldHVybnMgYXJyYXlzIG9mXG4gKiAgICAgaW5jb3JyZWN0IGxlbmd0aCBpbiBzb21lIHNpdHVhdGlvbnMuXG5cbiAqIFdlIGRldGVjdCB0aGVzZSBidWdneSBicm93c2VycyBhbmQgc2V0IGBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVGAgdG8gYGZhbHNlYCBzbyB0aGV5XG4gKiBnZXQgdGhlIE9iamVjdCBpbXBsZW1lbnRhdGlvbiwgd2hpY2ggaXMgc2xvd2VyIGJ1dCBiZWhhdmVzIGNvcnJlY3RseS5cbiAqL1xuQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgPSBnbG9iYWwuVFlQRURfQVJSQVlfU1VQUE9SVCAhPT0gdW5kZWZpbmVkXG4gID8gZ2xvYmFsLlRZUEVEX0FSUkFZX1NVUFBPUlRcbiAgOiB0cnVlXG5cbi8qXG4gKiBFeHBvcnQga01heExlbmd0aCBhZnRlciB0eXBlZCBhcnJheSBzdXBwb3J0IGlzIGRldGVybWluZWQuXG4gKi9cbnZhciBfa01heExlbmd0aCA9IGtNYXhMZW5ndGgoKVxuZXhwb3J0IHtfa01heExlbmd0aCBhcyBrTWF4TGVuZ3RofTtcbmZ1bmN0aW9uIHR5cGVkQXJyYXlTdXBwb3J0ICgpIHtcbiAgcmV0dXJuIHRydWU7XG4gIC8vIHJvbGx1cCBpc3N1ZXNcbiAgLy8gdHJ5IHtcbiAgLy8gICB2YXIgYXJyID0gbmV3IFVpbnQ4QXJyYXkoMSlcbiAgLy8gICBhcnIuX19wcm90b19fID0ge1xuICAvLyAgICAgX19wcm90b19fOiBVaW50OEFycmF5LnByb3RvdHlwZSxcbiAgLy8gICAgIGZvbzogZnVuY3Rpb24gKCkgeyByZXR1cm4gNDIgfVxuICAvLyAgIH1cbiAgLy8gICByZXR1cm4gYXJyLmZvbygpID09PSA0MiAmJiAvLyB0eXBlZCBhcnJheSBpbnN0YW5jZXMgY2FuIGJlIGF1Z21lbnRlZFxuICAvLyAgICAgICB0eXBlb2YgYXJyLnN1YmFycmF5ID09PSAnZnVuY3Rpb24nICYmIC8vIGNocm9tZSA5LTEwIGxhY2sgYHN1YmFycmF5YFxuICAvLyAgICAgICBhcnIuc3ViYXJyYXkoMSwgMSkuYnl0ZUxlbmd0aCA9PT0gMCAvLyBpZTEwIGhhcyBicm9rZW4gYHN1YmFycmF5YFxuICAvLyB9IGNhdGNoIChlKSB7XG4gIC8vICAgcmV0dXJuIGZhbHNlXG4gIC8vIH1cbn1cblxuZnVuY3Rpb24ga01heExlbmd0aCAoKSB7XG4gIHJldHVybiBCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVFxuICAgID8gMHg3ZmZmZmZmZlxuICAgIDogMHgzZmZmZmZmZlxufVxuXG5mdW5jdGlvbiBjcmVhdGVCdWZmZXIgKHRoYXQsIGxlbmd0aCkge1xuICBpZiAoa01heExlbmd0aCgpIDwgbGVuZ3RoKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgdHlwZWQgYXJyYXkgbGVuZ3RoJylcbiAgfVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICAvLyBSZXR1cm4gYW4gYXVnbWVudGVkIGBVaW50OEFycmF5YCBpbnN0YW5jZSwgZm9yIGJlc3QgcGVyZm9ybWFuY2VcbiAgICB0aGF0ID0gbmV3IFVpbnQ4QXJyYXkobGVuZ3RoKVxuICAgIHRoYXQuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICB9IGVsc2Uge1xuICAgIC8vIEZhbGxiYWNrOiBSZXR1cm4gYW4gb2JqZWN0IGluc3RhbmNlIG9mIHRoZSBCdWZmZXIgY2xhc3NcbiAgICBpZiAodGhhdCA9PT0gbnVsbCkge1xuICAgICAgdGhhdCA9IG5ldyBCdWZmZXIobGVuZ3RoKVxuICAgIH1cbiAgICB0aGF0Lmxlbmd0aCA9IGxlbmd0aFxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBUaGUgQnVmZmVyIGNvbnN0cnVjdG9yIHJldHVybnMgaW5zdGFuY2VzIG9mIGBVaW50OEFycmF5YCB0aGF0IGhhdmUgdGhlaXJcbiAqIHByb3RvdHlwZSBjaGFuZ2VkIHRvIGBCdWZmZXIucHJvdG90eXBlYC4gRnVydGhlcm1vcmUsIGBCdWZmZXJgIGlzIGEgc3ViY2xhc3Mgb2ZcbiAqIGBVaW50OEFycmF5YCwgc28gdGhlIHJldHVybmVkIGluc3RhbmNlcyB3aWxsIGhhdmUgYWxsIHRoZSBub2RlIGBCdWZmZXJgIG1ldGhvZHNcbiAqIGFuZCB0aGUgYFVpbnQ4QXJyYXlgIG1ldGhvZHMuIFNxdWFyZSBicmFja2V0IG5vdGF0aW9uIHdvcmtzIGFzIGV4cGVjdGVkIC0tIGl0XG4gKiByZXR1cm5zIGEgc2luZ2xlIG9jdGV0LlxuICpcbiAqIFRoZSBgVWludDhBcnJheWAgcHJvdG90eXBlIHJlbWFpbnMgdW5tb2RpZmllZC5cbiAqL1xuXG5leHBvcnQgZnVuY3Rpb24gQnVmZmVyIChhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICBpZiAoIUJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUICYmICEodGhpcyBpbnN0YW5jZW9mIEJ1ZmZlcikpIHtcbiAgICByZXR1cm4gbmV3IEJ1ZmZlcihhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIC8vIENvbW1vbiBjYXNlLlxuICBpZiAodHlwZW9mIGFyZyA9PT0gJ251bWJlcicpIHtcbiAgICBpZiAodHlwZW9mIGVuY29kaW5nT3JPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdJZiBlbmNvZGluZyBpcyBzcGVjaWZpZWQgdGhlbiB0aGUgZmlyc3QgYXJndW1lbnQgbXVzdCBiZSBhIHN0cmluZydcbiAgICAgIClcbiAgICB9XG4gICAgcmV0dXJuIGFsbG9jVW5zYWZlKHRoaXMsIGFyZylcbiAgfVxuICByZXR1cm4gZnJvbSh0aGlzLCBhcmcsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbn1cblxuQnVmZmVyLnBvb2xTaXplID0gODE5MiAvLyBub3QgdXNlZCBieSB0aGlzIGltcGxlbWVudGF0aW9uXG5cbi8vIFRPRE86IExlZ2FjeSwgbm90IG5lZWRlZCBhbnltb3JlLiBSZW1vdmUgaW4gbmV4dCBtYWpvciB2ZXJzaW9uLlxuQnVmZmVyLl9hdWdtZW50ID0gZnVuY3Rpb24gKGFycikge1xuICBhcnIuX19wcm90b19fID0gQnVmZmVyLnByb3RvdHlwZVxuICByZXR1cm4gYXJyXG59XG5cbmZ1bmN0aW9uIGZyb20gKHRoYXQsIHZhbHVlLCBlbmNvZGluZ09yT2Zmc2V0LCBsZW5ndGgpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInZhbHVlXCIgYXJndW1lbnQgbXVzdCBub3QgYmUgYSBudW1iZXInKVxuICB9XG5cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdmFsdWUgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikge1xuICAgIHJldHVybiBmcm9tQXJyYXlCdWZmZXIodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aClcbiAgfVxuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnKSB7XG4gICAgcmV0dXJuIGZyb21TdHJpbmcodGhhdCwgdmFsdWUsIGVuY29kaW5nT3JPZmZzZXQpXG4gIH1cblxuICByZXR1cm4gZnJvbU9iamVjdCh0aGF0LCB2YWx1ZSlcbn1cblxuLyoqXG4gKiBGdW5jdGlvbmFsbHkgZXF1aXZhbGVudCB0byBCdWZmZXIoYXJnLCBlbmNvZGluZykgYnV0IHRocm93cyBhIFR5cGVFcnJvclxuICogaWYgdmFsdWUgaXMgYSBudW1iZXIuXG4gKiBCdWZmZXIuZnJvbShzdHJbLCBlbmNvZGluZ10pXG4gKiBCdWZmZXIuZnJvbShhcnJheSlcbiAqIEJ1ZmZlci5mcm9tKGJ1ZmZlcilcbiAqIEJ1ZmZlci5mcm9tKGFycmF5QnVmZmVyWywgYnl0ZU9mZnNldFssIGxlbmd0aF1dKVxuICoqL1xuQnVmZmVyLmZyb20gPSBmdW5jdGlvbiAodmFsdWUsIGVuY29kaW5nT3JPZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gZnJvbShudWxsLCB2YWx1ZSwgZW5jb2RpbmdPck9mZnNldCwgbGVuZ3RoKVxufVxuXG5pZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgQnVmZmVyLnByb3RvdHlwZS5fX3Byb3RvX18gPSBVaW50OEFycmF5LnByb3RvdHlwZVxuICBCdWZmZXIuX19wcm90b19fID0gVWludDhBcnJheVxuICBpZiAodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnNwZWNpZXMgJiZcbiAgICAgIEJ1ZmZlcltTeW1ib2wuc3BlY2llc10gPT09IEJ1ZmZlcikge1xuICAgIC8vIEZpeCBzdWJhcnJheSgpIGluIEVTMjAxNi4gU2VlOiBodHRwczovL2dpdGh1Yi5jb20vZmVyb3NzL2J1ZmZlci9wdWxsLzk3XG4gICAgLy8gT2JqZWN0LmRlZmluZVByb3BlcnR5KEJ1ZmZlciwgU3ltYm9sLnNwZWNpZXMsIHtcbiAgICAvLyAgIHZhbHVlOiBudWxsLFxuICAgIC8vICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgLy8gfSlcbiAgfVxufVxuXG5mdW5jdGlvbiBhc3NlcnRTaXplIChzaXplKSB7XG4gIGlmICh0eXBlb2Ygc2l6ZSAhPT0gJ251bWJlcicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IGJlIGEgbnVtYmVyJylcbiAgfSBlbHNlIGlmIChzaXplIDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcInNpemVcIiBhcmd1bWVudCBtdXN0IG5vdCBiZSBuZWdhdGl2ZScpXG4gIH1cbn1cblxuZnVuY3Rpb24gYWxsb2MgKHRoYXQsIHNpemUsIGZpbGwsIGVuY29kaW5nKSB7XG4gIGFzc2VydFNpemUoc2l6ZSlcbiAgaWYgKHNpemUgPD0gMCkge1xuICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbiAgfVxuICBpZiAoZmlsbCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgLy8gT25seSBwYXkgYXR0ZW50aW9uIHRvIGVuY29kaW5nIGlmIGl0J3MgYSBzdHJpbmcuIFRoaXNcbiAgICAvLyBwcmV2ZW50cyBhY2NpZGVudGFsbHkgc2VuZGluZyBpbiBhIG51bWJlciB0aGF0IHdvdWxkXG4gICAgLy8gYmUgaW50ZXJwcmV0dGVkIGFzIGEgc3RhcnQgb2Zmc2V0LlxuICAgIHJldHVybiB0eXBlb2YgZW5jb2RpbmcgPT09ICdzdHJpbmcnXG4gICAgICA/IGNyZWF0ZUJ1ZmZlcih0aGF0LCBzaXplKS5maWxsKGZpbGwsIGVuY29kaW5nKVxuICAgICAgOiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSkuZmlsbChmaWxsKVxuICB9XG4gIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSlcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgbmV3IGZpbGxlZCBCdWZmZXIgaW5zdGFuY2UuXG4gKiBhbGxvYyhzaXplWywgZmlsbFssIGVuY29kaW5nXV0pXG4gKiovXG5CdWZmZXIuYWxsb2MgPSBmdW5jdGlvbiAoc2l6ZSwgZmlsbCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGFsbG9jKG51bGwsIHNpemUsIGZpbGwsIGVuY29kaW5nKVxufVxuXG5mdW5jdGlvbiBhbGxvY1Vuc2FmZSAodGhhdCwgc2l6ZSkge1xuICBhc3NlcnRTaXplKHNpemUpXG4gIHRoYXQgPSBjcmVhdGVCdWZmZXIodGhhdCwgc2l6ZSA8IDAgPyAwIDogY2hlY2tlZChzaXplKSB8IDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNpemU7ICsraSkge1xuICAgICAgdGhhdFtpXSA9IDBcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHRoYXRcbn1cblxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIEJ1ZmZlcihudW0pLCBieSBkZWZhdWx0IGNyZWF0ZXMgYSBub24temVyby1maWxsZWQgQnVmZmVyIGluc3RhbmNlLlxuICogKi9cbkJ1ZmZlci5hbGxvY1Vuc2FmZSA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuLyoqXG4gKiBFcXVpdmFsZW50IHRvIFNsb3dCdWZmZXIobnVtKSwgYnkgZGVmYXVsdCBjcmVhdGVzIGEgbm9uLXplcm8tZmlsbGVkIEJ1ZmZlciBpbnN0YW5jZS5cbiAqL1xuQnVmZmVyLmFsbG9jVW5zYWZlU2xvdyA9IGZ1bmN0aW9uIChzaXplKSB7XG4gIHJldHVybiBhbGxvY1Vuc2FmZShudWxsLCBzaXplKVxufVxuXG5mdW5jdGlvbiBmcm9tU3RyaW5nICh0aGF0LCBzdHJpbmcsIGVuY29kaW5nKSB7XG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnIHx8IGVuY29kaW5nID09PSAnJykge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gIH1cblxuICBpZiAoIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiZW5jb2RpbmdcIiBtdXN0IGJlIGEgdmFsaWQgc3RyaW5nIGVuY29kaW5nJylcbiAgfVxuXG4gIHZhciBsZW5ndGggPSBieXRlTGVuZ3RoKHN0cmluZywgZW5jb2RpbmcpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcblxuICB2YXIgYWN0dWFsID0gdGhhdC53cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuXG4gIGlmIChhY3R1YWwgIT09IGxlbmd0aCkge1xuICAgIC8vIFdyaXRpbmcgYSBoZXggc3RyaW5nLCBmb3IgZXhhbXBsZSwgdGhhdCBjb250YWlucyBpbnZhbGlkIGNoYXJhY3RlcnMgd2lsbFxuICAgIC8vIGNhdXNlIGV2ZXJ5dGhpbmcgYWZ0ZXIgdGhlIGZpcnN0IGludmFsaWQgY2hhcmFjdGVyIHRvIGJlIGlnbm9yZWQuIChlLmcuXG4gICAgLy8gJ2FieHhjZCcgd2lsbCBiZSB0cmVhdGVkIGFzICdhYicpXG4gICAgdGhhdCA9IHRoYXQuc2xpY2UoMCwgYWN0dWFsKVxuICB9XG5cbiAgcmV0dXJuIHRoYXRcbn1cblxuZnVuY3Rpb24gZnJvbUFycmF5TGlrZSAodGhhdCwgYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCA8IDAgPyAwIDogY2hlY2tlZChhcnJheS5sZW5ndGgpIHwgMFxuICB0aGF0ID0gY3JlYXRlQnVmZmVyKHRoYXQsIGxlbmd0aClcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW5ndGg7IGkgKz0gMSkge1xuICAgIHRoYXRbaV0gPSBhcnJheVtpXSAmIDI1NVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21BcnJheUJ1ZmZlciAodGhhdCwgYXJyYXksIGJ5dGVPZmZzZXQsIGxlbmd0aCkge1xuICBhcnJheS5ieXRlTGVuZ3RoIC8vIHRoaXMgdGhyb3dzIGlmIGBhcnJheWAgaXMgbm90IGEgdmFsaWQgQXJyYXlCdWZmZXJcblxuICBpZiAoYnl0ZU9mZnNldCA8IDAgfHwgYXJyYXkuYnl0ZUxlbmd0aCA8IGJ5dGVPZmZzZXQpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignXFwnb2Zmc2V0XFwnIGlzIG91dCBvZiBib3VuZHMnKVxuICB9XG5cbiAgaWYgKGFycmF5LmJ5dGVMZW5ndGggPCBieXRlT2Zmc2V0ICsgKGxlbmd0aCB8fCAwKSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdcXCdsZW5ndGhcXCcgaXMgb3V0IG9mIGJvdW5kcycpXG4gIH1cblxuICBpZiAoYnl0ZU9mZnNldCA9PT0gdW5kZWZpbmVkICYmIGxlbmd0aCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSlcbiAgfSBlbHNlIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGFycmF5ID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXksIGJ5dGVPZmZzZXQpXG4gIH0gZWxzZSB7XG4gICAgYXJyYXkgPSBuZXcgVWludDhBcnJheShhcnJheSwgYnl0ZU9mZnNldCwgbGVuZ3RoKVxuICB9XG5cbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgLy8gUmV0dXJuIGFuIGF1Z21lbnRlZCBgVWludDhBcnJheWAgaW5zdGFuY2UsIGZvciBiZXN0IHBlcmZvcm1hbmNlXG4gICAgdGhhdCA9IGFycmF5XG4gICAgdGhhdC5fX3Byb3RvX18gPSBCdWZmZXIucHJvdG90eXBlXG4gIH0gZWxzZSB7XG4gICAgLy8gRmFsbGJhY2s6IFJldHVybiBhbiBvYmplY3QgaW5zdGFuY2Ugb2YgdGhlIEJ1ZmZlciBjbGFzc1xuICAgIHRoYXQgPSBmcm9tQXJyYXlMaWtlKHRoYXQsIGFycmF5KVxuICB9XG4gIHJldHVybiB0aGF0XG59XG5cbmZ1bmN0aW9uIGZyb21PYmplY3QgKHRoYXQsIG9iaikge1xuICBpZiAoaW50ZXJuYWxJc0J1ZmZlcihvYmopKSB7XG4gICAgdmFyIGxlbiA9IGNoZWNrZWQob2JqLmxlbmd0aCkgfCAwXG4gICAgdGhhdCA9IGNyZWF0ZUJ1ZmZlcih0aGF0LCBsZW4pXG5cbiAgICBpZiAodGhhdC5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiB0aGF0XG4gICAgfVxuXG4gICAgb2JqLmNvcHkodGhhdCwgMCwgMCwgbGVuKVxuICAgIHJldHVybiB0aGF0XG4gIH1cblxuICBpZiAob2JqKSB7XG4gICAgaWYgKCh0eXBlb2YgQXJyYXlCdWZmZXIgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgIG9iai5idWZmZXIgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlcikgfHwgJ2xlbmd0aCcgaW4gb2JqKSB7XG4gICAgICBpZiAodHlwZW9mIG9iai5sZW5ndGggIT09ICdudW1iZXInIHx8IGlzbmFuKG9iai5sZW5ndGgpKSB7XG4gICAgICAgIHJldHVybiBjcmVhdGVCdWZmZXIodGhhdCwgMClcbiAgICAgIH1cbiAgICAgIHJldHVybiBmcm9tQXJyYXlMaWtlKHRoYXQsIG9iailcbiAgICB9XG5cbiAgICBpZiAob2JqLnR5cGUgPT09ICdCdWZmZXInICYmIGlzQXJyYXkob2JqLmRhdGEpKSB7XG4gICAgICByZXR1cm4gZnJvbUFycmF5TGlrZSh0aGF0LCBvYmouZGF0YSlcbiAgICB9XG4gIH1cblxuICB0aHJvdyBuZXcgVHlwZUVycm9yKCdGaXJzdCBhcmd1bWVudCBtdXN0IGJlIGEgc3RyaW5nLCBCdWZmZXIsIEFycmF5QnVmZmVyLCBBcnJheSwgb3IgYXJyYXktbGlrZSBvYmplY3QuJylcbn1cblxuZnVuY3Rpb24gY2hlY2tlZCAobGVuZ3RoKSB7XG4gIC8vIE5vdGU6IGNhbm5vdCB1c2UgYGxlbmd0aCA8IGtNYXhMZW5ndGgoKWAgaGVyZSBiZWNhdXNlIHRoYXQgZmFpbHMgd2hlblxuICAvLyBsZW5ndGggaXMgTmFOICh3aGljaCBpcyBvdGhlcndpc2UgY29lcmNlZCB0byB6ZXJvLilcbiAgaWYgKGxlbmd0aCA+PSBrTWF4TGVuZ3RoKCkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byBhbGxvY2F0ZSBCdWZmZXIgbGFyZ2VyIHRoYW4gbWF4aW11bSAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAnc2l6ZTogMHgnICsga01heExlbmd0aCgpLnRvU3RyaW5nKDE2KSArICcgYnl0ZXMnKVxuICB9XG4gIHJldHVybiBsZW5ndGggfCAwXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBTbG93QnVmZmVyIChsZW5ndGgpIHtcbiAgaWYgKCtsZW5ndGggIT0gbGVuZ3RoKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgZXFlcWVxXG4gICAgbGVuZ3RoID0gMFxuICB9XG4gIHJldHVybiBCdWZmZXIuYWxsb2MoK2xlbmd0aClcbn1cbkJ1ZmZlci5pc0J1ZmZlciA9IGlzQnVmZmVyO1xuZnVuY3Rpb24gaW50ZXJuYWxJc0J1ZmZlciAoYikge1xuICByZXR1cm4gISEoYiAhPSBudWxsICYmIGIuX2lzQnVmZmVyKVxufVxuXG5CdWZmZXIuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKGEsIGIpIHtcbiAgaWYgKCFpbnRlcm5hbElzQnVmZmVyKGEpIHx8ICFpbnRlcm5hbElzQnVmZmVyKGIpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnRzIG11c3QgYmUgQnVmZmVycycpXG4gIH1cblxuICBpZiAoYSA9PT0gYikgcmV0dXJuIDBcblxuICB2YXIgeCA9IGEubGVuZ3RoXG4gIHZhciB5ID0gYi5sZW5ndGhcblxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gTWF0aC5taW4oeCwgeSk7IGkgPCBsZW47ICsraSkge1xuICAgIGlmIChhW2ldICE9PSBiW2ldKSB7XG4gICAgICB4ID0gYVtpXVxuICAgICAgeSA9IGJbaV1cbiAgICAgIGJyZWFrXG4gICAgfVxuICB9XG5cbiAgaWYgKHggPCB5KSByZXR1cm4gLTFcbiAgaWYgKHkgPCB4KSByZXR1cm4gMVxuICByZXR1cm4gMFxufVxuXG5CdWZmZXIuaXNFbmNvZGluZyA9IGZ1bmN0aW9uIGlzRW5jb2RpbmcgKGVuY29kaW5nKSB7XG4gIHN3aXRjaCAoU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpKSB7XG4gICAgY2FzZSAnaGV4JzpcbiAgICBjYXNlICd1dGY4JzpcbiAgICBjYXNlICd1dGYtOCc6XG4gICAgY2FzZSAnYXNjaWknOlxuICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgY2FzZSAnYmluYXJ5JzpcbiAgICBjYXNlICdiYXNlNjQnOlxuICAgIGNhc2UgJ3VjczInOlxuICAgIGNhc2UgJ3Vjcy0yJzpcbiAgICBjYXNlICd1dGYxNmxlJzpcbiAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5CdWZmZXIuY29uY2F0ID0gZnVuY3Rpb24gY29uY2F0IChsaXN0LCBsZW5ndGgpIHtcbiAgaWYgKCFpc0FycmF5KGxpc3QpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgfVxuXG4gIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBCdWZmZXIuYWxsb2MoMClcbiAgfVxuXG4gIHZhciBpXG4gIGlmIChsZW5ndGggPT09IHVuZGVmaW5lZCkge1xuICAgIGxlbmd0aCA9IDBcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7ICsraSkge1xuICAgICAgbGVuZ3RoICs9IGxpc3RbaV0ubGVuZ3RoXG4gICAgfVxuICB9XG5cbiAgdmFyIGJ1ZmZlciA9IEJ1ZmZlci5hbGxvY1Vuc2FmZShsZW5ndGgpXG4gIHZhciBwb3MgPSAwXG4gIGZvciAoaSA9IDA7IGkgPCBsaXN0Lmxlbmd0aDsgKytpKSB7XG4gICAgdmFyIGJ1ZiA9IGxpc3RbaV1cbiAgICBpZiAoIWludGVybmFsSXNCdWZmZXIoYnVmKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignXCJsaXN0XCIgYXJndW1lbnQgbXVzdCBiZSBhbiBBcnJheSBvZiBCdWZmZXJzJylcbiAgICB9XG4gICAgYnVmLmNvcHkoYnVmZmVyLCBwb3MpXG4gICAgcG9zICs9IGJ1Zi5sZW5ndGhcbiAgfVxuICByZXR1cm4gYnVmZmVyXG59XG5cbmZ1bmN0aW9uIGJ5dGVMZW5ndGggKHN0cmluZywgZW5jb2RpbmcpIHtcbiAgaWYgKGludGVybmFsSXNCdWZmZXIoc3RyaW5nKSkge1xuICAgIHJldHVybiBzdHJpbmcubGVuZ3RoXG4gIH1cbiAgaWYgKHR5cGVvZiBBcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIEFycmF5QnVmZmVyLmlzVmlldyA9PT0gJ2Z1bmN0aW9uJyAmJlxuICAgICAgKEFycmF5QnVmZmVyLmlzVmlldyhzdHJpbmcpIHx8IHN0cmluZyBpbnN0YW5jZW9mIEFycmF5QnVmZmVyKSkge1xuICAgIHJldHVybiBzdHJpbmcuYnl0ZUxlbmd0aFxuICB9XG4gIGlmICh0eXBlb2Ygc3RyaW5nICE9PSAnc3RyaW5nJykge1xuICAgIHN0cmluZyA9ICcnICsgc3RyaW5nXG4gIH1cblxuICB2YXIgbGVuID0gc3RyaW5nLmxlbmd0aFxuICBpZiAobGVuID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIFVzZSBhIGZvciBsb29wIHRvIGF2b2lkIHJlY3Vyc2lvblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnYXNjaWknOlxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsZW5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgY2FzZSB1bmRlZmluZWQ6XG4gICAgICAgIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aFxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIGxlbiAqIDJcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBsZW4gPj4+IDFcbiAgICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAgIHJldHVybiBiYXNlNjRUb0J5dGVzKHN0cmluZykubGVuZ3RoXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHJldHVybiB1dGY4VG9CeXRlcyhzdHJpbmcpLmxlbmd0aCAvLyBhc3N1bWUgdXRmOFxuICAgICAgICBlbmNvZGluZyA9ICgnJyArIGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIGxvd2VyZWRDYXNlID0gdHJ1ZVxuICAgIH1cbiAgfVxufVxuQnVmZmVyLmJ5dGVMZW5ndGggPSBieXRlTGVuZ3RoXG5cbmZ1bmN0aW9uIHNsb3dUb1N0cmluZyAoZW5jb2RpbmcsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxvd2VyZWRDYXNlID0gZmFsc2VcblxuICAvLyBObyBuZWVkIHRvIHZlcmlmeSB0aGF0IFwidGhpcy5sZW5ndGggPD0gTUFYX1VJTlQzMlwiIHNpbmNlIGl0J3MgYSByZWFkLW9ubHlcbiAgLy8gcHJvcGVydHkgb2YgYSB0eXBlZCBhcnJheS5cblxuICAvLyBUaGlzIGJlaGF2ZXMgbmVpdGhlciBsaWtlIFN0cmluZyBub3IgVWludDhBcnJheSBpbiB0aGF0IHdlIHNldCBzdGFydC9lbmRcbiAgLy8gdG8gdGhlaXIgdXBwZXIvbG93ZXIgYm91bmRzIGlmIHRoZSB2YWx1ZSBwYXNzZWQgaXMgb3V0IG9mIHJhbmdlLlxuICAvLyB1bmRlZmluZWQgaXMgaGFuZGxlZCBzcGVjaWFsbHkgYXMgcGVyIEVDTUEtMjYyIDZ0aCBFZGl0aW9uLFxuICAvLyBTZWN0aW9uIDEzLjMuMy43IFJ1bnRpbWUgU2VtYW50aWNzOiBLZXllZEJpbmRpbmdJbml0aWFsaXphdGlvbi5cbiAgaWYgKHN0YXJ0ID09PSB1bmRlZmluZWQgfHwgc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAwXG4gIH1cbiAgLy8gUmV0dXJuIGVhcmx5IGlmIHN0YXJ0ID4gdGhpcy5sZW5ndGguIERvbmUgaGVyZSB0byBwcmV2ZW50IHBvdGVudGlhbCB1aW50MzJcbiAgLy8gY29lcmNpb24gZmFpbCBiZWxvdy5cbiAgaWYgKHN0YXJ0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCB8fCBlbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIGVuZCA9IHRoaXMubGVuZ3RoXG4gIH1cblxuICBpZiAoZW5kIDw9IDApIHtcbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIC8vIEZvcmNlIGNvZXJzaW9uIHRvIHVpbnQzMi4gVGhpcyB3aWxsIGFsc28gY29lcmNlIGZhbHNleS9OYU4gdmFsdWVzIHRvIDAuXG4gIGVuZCA+Pj49IDBcbiAgc3RhcnQgPj4+PSAwXG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB3aGlsZSAodHJ1ZSkge1xuICAgIHN3aXRjaCAoZW5jb2RpbmcpIHtcbiAgICAgIGNhc2UgJ2hleCc6XG4gICAgICAgIHJldHVybiBoZXhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICd1dGY4JzpcbiAgICAgIGNhc2UgJ3V0Zi04JzpcbiAgICAgICAgcmV0dXJuIHV0ZjhTbGljZSh0aGlzLCBzdGFydCwgZW5kKVxuXG4gICAgICBjYXNlICdhc2NpaSc6XG4gICAgICAgIHJldHVybiBhc2NpaVNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ2xhdGluMSc6XG4gICAgICBjYXNlICdiaW5hcnknOlxuICAgICAgICByZXR1cm4gbGF0aW4xU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgY2FzZSAnYmFzZTY0JzpcbiAgICAgICAgcmV0dXJuIGJhc2U2NFNsaWNlKHRoaXMsIHN0YXJ0LCBlbmQpXG5cbiAgICAgIGNhc2UgJ3VjczInOlxuICAgICAgY2FzZSAndWNzLTInOlxuICAgICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICBjYXNlICd1dGYtMTZsZSc6XG4gICAgICAgIHJldHVybiB1dGYxNmxlU2xpY2UodGhpcywgc3RhcnQsIGVuZClcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgaWYgKGxvd2VyZWRDYXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdVbmtub3duIGVuY29kaW5nOiAnICsgZW5jb2RpbmcpXG4gICAgICAgIGVuY29kaW5nID0gKGVuY29kaW5nICsgJycpLnRvTG93ZXJDYXNlKClcbiAgICAgICAgbG93ZXJlZENhc2UgPSB0cnVlXG4gICAgfVxuICB9XG59XG5cbi8vIFRoZSBwcm9wZXJ0eSBpcyB1c2VkIGJ5IGBCdWZmZXIuaXNCdWZmZXJgIGFuZCBgaXMtYnVmZmVyYCAoaW4gU2FmYXJpIDUtNykgdG8gZGV0ZWN0XG4vLyBCdWZmZXIgaW5zdGFuY2VzLlxuQnVmZmVyLnByb3RvdHlwZS5faXNCdWZmZXIgPSB0cnVlXG5cbmZ1bmN0aW9uIHN3YXAgKGIsIG4sIG0pIHtcbiAgdmFyIGkgPSBiW25dXG4gIGJbbl0gPSBiW21dXG4gIGJbbV0gPSBpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuc3dhcDE2ID0gZnVuY3Rpb24gc3dhcDE2ICgpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIGlmIChsZW4gJSAyICE9PSAwKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0J1ZmZlciBzaXplIG11c3QgYmUgYSBtdWx0aXBsZSBvZiAxNi1iaXRzJylcbiAgfVxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSArPSAyKSB7XG4gICAgc3dhcCh0aGlzLCBpLCBpICsgMSlcbiAgfVxuICByZXR1cm4gdGhpc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnN3YXAzMiA9IGZ1bmN0aW9uIHN3YXAzMiAoKSB7XG4gIHZhciBsZW4gPSB0aGlzLmxlbmd0aFxuICBpZiAobGVuICUgNCAhPT0gMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdCdWZmZXIgc2l6ZSBtdXN0IGJlIGEgbXVsdGlwbGUgb2YgMzItYml0cycpXG4gIH1cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47IGkgKz0gNCkge1xuICAgIHN3YXAodGhpcywgaSwgaSArIDMpXG4gICAgc3dhcCh0aGlzLCBpICsgMSwgaSArIDIpXG4gIH1cbiAgcmV0dXJuIHRoaXNcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5zd2FwNjQgPSBmdW5jdGlvbiBzd2FwNjQgKCkge1xuICB2YXIgbGVuID0gdGhpcy5sZW5ndGhcbiAgaWYgKGxlbiAlIDggIT09IDApIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQnVmZmVyIHNpemUgbXVzdCBiZSBhIG11bHRpcGxlIG9mIDY0LWJpdHMnKVxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpICs9IDgpIHtcbiAgICBzd2FwKHRoaXMsIGksIGkgKyA3KVxuICAgIHN3YXAodGhpcywgaSArIDEsIGkgKyA2KVxuICAgIHN3YXAodGhpcywgaSArIDIsIGkgKyA1KVxuICAgIHN3YXAodGhpcywgaSArIDMsIGkgKyA0KVxuICB9XG4gIHJldHVybiB0aGlzXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZyAoKSB7XG4gIHZhciBsZW5ndGggPSB0aGlzLmxlbmd0aCB8IDBcbiAgaWYgKGxlbmd0aCA9PT0gMCkgcmV0dXJuICcnXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdXRmOFNsaWNlKHRoaXMsIDAsIGxlbmd0aClcbiAgcmV0dXJuIHNsb3dUb1N0cmluZy5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuZXF1YWxzID0gZnVuY3Rpb24gZXF1YWxzIChiKSB7XG4gIGlmICghaW50ZXJuYWxJc0J1ZmZlcihiKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIGlmICh0aGlzID09PSBiKSByZXR1cm4gdHJ1ZVxuICByZXR1cm4gQnVmZmVyLmNvbXBhcmUodGhpcywgYikgPT09IDBcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5pbnNwZWN0ID0gZnVuY3Rpb24gaW5zcGVjdCAoKSB7XG4gIHZhciBzdHIgPSAnJ1xuICB2YXIgbWF4ID0gSU5TUEVDVF9NQVhfQllURVNcbiAgaWYgKHRoaXMubGVuZ3RoID4gMCkge1xuICAgIHN0ciA9IHRoaXMudG9TdHJpbmcoJ2hleCcsIDAsIG1heCkubWF0Y2goLy57Mn0vZykuam9pbignICcpXG4gICAgaWYgKHRoaXMubGVuZ3RoID4gbWF4KSBzdHIgKz0gJyAuLi4gJ1xuICB9XG4gIHJldHVybiAnPEJ1ZmZlciAnICsgc3RyICsgJz4nXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuY29tcGFyZSA9IGZ1bmN0aW9uIGNvbXBhcmUgKHRhcmdldCwgc3RhcnQsIGVuZCwgdGhpc1N0YXJ0LCB0aGlzRW5kKSB7XG4gIGlmICghaW50ZXJuYWxJc0J1ZmZlcih0YXJnZXQpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIH1cblxuICBpZiAoc3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgIHN0YXJ0ID0gMFxuICB9XG4gIGlmIChlbmQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuZCA9IHRhcmdldCA/IHRhcmdldC5sZW5ndGggOiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhpc1N0YXJ0ID0gMFxuICB9XG4gIGlmICh0aGlzRW5kID09PSB1bmRlZmluZWQpIHtcbiAgICB0aGlzRW5kID0gdGhpcy5sZW5ndGhcbiAgfVxuXG4gIGlmIChzdGFydCA8IDAgfHwgZW5kID4gdGFyZ2V0Lmxlbmd0aCB8fCB0aGlzU3RhcnQgPCAwIHx8IHRoaXNFbmQgPiB0aGlzLmxlbmd0aCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdvdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kICYmIHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAwXG4gIH1cbiAgaWYgKHRoaXNTdGFydCA+PSB0aGlzRW5kKSB7XG4gICAgcmV0dXJuIC0xXG4gIH1cbiAgaWYgKHN0YXJ0ID49IGVuZCkge1xuICAgIHJldHVybiAxXG4gIH1cblxuICBzdGFydCA+Pj49IDBcbiAgZW5kID4+Pj0gMFxuICB0aGlzU3RhcnQgPj4+PSAwXG4gIHRoaXNFbmQgPj4+PSAwXG5cbiAgaWYgKHRoaXMgPT09IHRhcmdldCkgcmV0dXJuIDBcblxuICB2YXIgeCA9IHRoaXNFbmQgLSB0aGlzU3RhcnRcbiAgdmFyIHkgPSBlbmQgLSBzdGFydFxuICB2YXIgbGVuID0gTWF0aC5taW4oeCwgeSlcblxuICB2YXIgdGhpc0NvcHkgPSB0aGlzLnNsaWNlKHRoaXNTdGFydCwgdGhpc0VuZClcbiAgdmFyIHRhcmdldENvcHkgPSB0YXJnZXQuc2xpY2Uoc3RhcnQsIGVuZClcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKSB7XG4gICAgaWYgKHRoaXNDb3B5W2ldICE9PSB0YXJnZXRDb3B5W2ldKSB7XG4gICAgICB4ID0gdGhpc0NvcHlbaV1cbiAgICAgIHkgPSB0YXJnZXRDb3B5W2ldXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICh4IDwgeSkgcmV0dXJuIC0xXG4gIGlmICh5IDwgeCkgcmV0dXJuIDFcbiAgcmV0dXJuIDBcbn1cblxuLy8gRmluZHMgZWl0aGVyIHRoZSBmaXJzdCBpbmRleCBvZiBgdmFsYCBpbiBgYnVmZmVyYCBhdCBvZmZzZXQgPj0gYGJ5dGVPZmZzZXRgLFxuLy8gT1IgdGhlIGxhc3QgaW5kZXggb2YgYHZhbGAgaW4gYGJ1ZmZlcmAgYXQgb2Zmc2V0IDw9IGBieXRlT2Zmc2V0YC5cbi8vXG4vLyBBcmd1bWVudHM6XG4vLyAtIGJ1ZmZlciAtIGEgQnVmZmVyIHRvIHNlYXJjaFxuLy8gLSB2YWwgLSBhIHN0cmluZywgQnVmZmVyLCBvciBudW1iZXJcbi8vIC0gYnl0ZU9mZnNldCAtIGFuIGluZGV4IGludG8gYGJ1ZmZlcmA7IHdpbGwgYmUgY2xhbXBlZCB0byBhbiBpbnQzMlxuLy8gLSBlbmNvZGluZyAtIGFuIG9wdGlvbmFsIGVuY29kaW5nLCByZWxldmFudCBpcyB2YWwgaXMgYSBzdHJpbmdcbi8vIC0gZGlyIC0gdHJ1ZSBmb3IgaW5kZXhPZiwgZmFsc2UgZm9yIGxhc3RJbmRleE9mXG5mdW5jdGlvbiBiaWRpcmVjdGlvbmFsSW5kZXhPZiAoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgLy8gRW1wdHkgYnVmZmVyIG1lYW5zIG5vIG1hdGNoXG4gIGlmIChidWZmZXIubGVuZ3RoID09PSAwKSByZXR1cm4gLTFcblxuICAvLyBOb3JtYWxpemUgYnl0ZU9mZnNldFxuICBpZiAodHlwZW9mIGJ5dGVPZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBieXRlT2Zmc2V0XG4gICAgYnl0ZU9mZnNldCA9IDBcbiAgfSBlbHNlIGlmIChieXRlT2Zmc2V0ID4gMHg3ZmZmZmZmZikge1xuICAgIGJ5dGVPZmZzZXQgPSAweDdmZmZmZmZmXG4gIH0gZWxzZSBpZiAoYnl0ZU9mZnNldCA8IC0weDgwMDAwMDAwKSB7XG4gICAgYnl0ZU9mZnNldCA9IC0weDgwMDAwMDAwXG4gIH1cbiAgYnl0ZU9mZnNldCA9ICtieXRlT2Zmc2V0ICAvLyBDb2VyY2UgdG8gTnVtYmVyLlxuICBpZiAoaXNOYU4oYnl0ZU9mZnNldCkpIHtcbiAgICAvLyBieXRlT2Zmc2V0OiBpdCBpdCdzIHVuZGVmaW5lZCwgbnVsbCwgTmFOLCBcImZvb1wiLCBldGMsIHNlYXJjaCB3aG9sZSBidWZmZXJcbiAgICBieXRlT2Zmc2V0ID0gZGlyID8gMCA6IChidWZmZXIubGVuZ3RoIC0gMSlcbiAgfVxuXG4gIC8vIE5vcm1hbGl6ZSBieXRlT2Zmc2V0OiBuZWdhdGl2ZSBvZmZzZXRzIHN0YXJ0IGZyb20gdGhlIGVuZCBvZiB0aGUgYnVmZmVyXG4gIGlmIChieXRlT2Zmc2V0IDwgMCkgYnl0ZU9mZnNldCA9IGJ1ZmZlci5sZW5ndGggKyBieXRlT2Zmc2V0XG4gIGlmIChieXRlT2Zmc2V0ID49IGJ1ZmZlci5sZW5ndGgpIHtcbiAgICBpZiAoZGlyKSByZXR1cm4gLTFcbiAgICBlbHNlIGJ5dGVPZmZzZXQgPSBidWZmZXIubGVuZ3RoIC0gMVxuICB9IGVsc2UgaWYgKGJ5dGVPZmZzZXQgPCAwKSB7XG4gICAgaWYgKGRpcikgYnl0ZU9mZnNldCA9IDBcbiAgICBlbHNlIHJldHVybiAtMVxuICB9XG5cbiAgLy8gTm9ybWFsaXplIHZhbFxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICB2YWwgPSBCdWZmZXIuZnJvbSh2YWwsIGVuY29kaW5nKVxuICB9XG5cbiAgLy8gRmluYWxseSwgc2VhcmNoIGVpdGhlciBpbmRleE9mIChpZiBkaXIgaXMgdHJ1ZSkgb3IgbGFzdEluZGV4T2ZcbiAgaWYgKGludGVybmFsSXNCdWZmZXIodmFsKSkge1xuICAgIC8vIFNwZWNpYWwgY2FzZTogbG9va2luZyBmb3IgZW1wdHkgc3RyaW5nL2J1ZmZlciBhbHdheXMgZmFpbHNcbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIC0xXG4gICAgfVxuICAgIHJldHVybiBhcnJheUluZGV4T2YoYnVmZmVyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpXG4gIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICB2YWwgPSB2YWwgJiAweEZGIC8vIFNlYXJjaCBmb3IgYSBieXRlIHZhbHVlIFswLTI1NV1cbiAgICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQgJiZcbiAgICAgICAgdHlwZW9mIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGlmIChkaXIpIHtcbiAgICAgICAgcmV0dXJuIFVpbnQ4QXJyYXkucHJvdG90eXBlLmluZGV4T2YuY2FsbChidWZmZXIsIHZhbCwgYnl0ZU9mZnNldClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBVaW50OEFycmF5LnByb3RvdHlwZS5sYXN0SW5kZXhPZi5jYWxsKGJ1ZmZlciwgdmFsLCBieXRlT2Zmc2V0KVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlJbmRleE9mKGJ1ZmZlciwgWyB2YWwgXSwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGRpcilcbiAgfVxuXG4gIHRocm93IG5ldyBUeXBlRXJyb3IoJ3ZhbCBtdXN0IGJlIHN0cmluZywgbnVtYmVyIG9yIEJ1ZmZlcicpXG59XG5cbmZ1bmN0aW9uIGFycmF5SW5kZXhPZiAoYXJyLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCBkaXIpIHtcbiAgdmFyIGluZGV4U2l6ZSA9IDFcbiAgdmFyIGFyckxlbmd0aCA9IGFyci5sZW5ndGhcbiAgdmFyIHZhbExlbmd0aCA9IHZhbC5sZW5ndGhcblxuICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gU3RyaW5nKGVuY29kaW5nKS50b0xvd2VyQ2FzZSgpXG4gICAgaWYgKGVuY29kaW5nID09PSAndWNzMicgfHwgZW5jb2RpbmcgPT09ICd1Y3MtMicgfHxcbiAgICAgICAgZW5jb2RpbmcgPT09ICd1dGYxNmxlJyB8fCBlbmNvZGluZyA9PT0gJ3V0Zi0xNmxlJykge1xuICAgICAgaWYgKGFyci5sZW5ndGggPCAyIHx8IHZhbC5sZW5ndGggPCAyKSB7XG4gICAgICAgIHJldHVybiAtMVxuICAgICAgfVxuICAgICAgaW5kZXhTaXplID0gMlxuICAgICAgYXJyTGVuZ3RoIC89IDJcbiAgICAgIHZhbExlbmd0aCAvPSAyXG4gICAgICBieXRlT2Zmc2V0IC89IDJcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZWFkIChidWYsIGkpIHtcbiAgICBpZiAoaW5kZXhTaXplID09PSAxKSB7XG4gICAgICByZXR1cm4gYnVmW2ldXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBidWYucmVhZFVJbnQxNkJFKGkgKiBpbmRleFNpemUpXG4gICAgfVxuICB9XG5cbiAgdmFyIGlcbiAgaWYgKGRpcikge1xuICAgIHZhciBmb3VuZEluZGV4ID0gLTFcbiAgICBmb3IgKGkgPSBieXRlT2Zmc2V0OyBpIDwgYXJyTGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChyZWFkKGFyciwgaSkgPT09IHJlYWQodmFsLCBmb3VuZEluZGV4ID09PSAtMSA/IDAgOiBpIC0gZm91bmRJbmRleCkpIHtcbiAgICAgICAgaWYgKGZvdW5kSW5kZXggPT09IC0xKSBmb3VuZEluZGV4ID0gaVxuICAgICAgICBpZiAoaSAtIGZvdW5kSW5kZXggKyAxID09PSB2YWxMZW5ndGgpIHJldHVybiBmb3VuZEluZGV4ICogaW5kZXhTaXplXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoZm91bmRJbmRleCAhPT0gLTEpIGkgLT0gaSAtIGZvdW5kSW5kZXhcbiAgICAgICAgZm91bmRJbmRleCA9IC0xXG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChieXRlT2Zmc2V0ICsgdmFsTGVuZ3RoID4gYXJyTGVuZ3RoKSBieXRlT2Zmc2V0ID0gYXJyTGVuZ3RoIC0gdmFsTGVuZ3RoXG4gICAgZm9yIChpID0gYnl0ZU9mZnNldDsgaSA+PSAwOyBpLS0pIHtcbiAgICAgIHZhciBmb3VuZCA9IHRydWVcbiAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdmFsTGVuZ3RoOyBqKyspIHtcbiAgICAgICAgaWYgKHJlYWQoYXJyLCBpICsgaikgIT09IHJlYWQodmFsLCBqKSkge1xuICAgICAgICAgIGZvdW5kID0gZmFsc2VcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoZm91bmQpIHJldHVybiBpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIC0xXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUuaW5jbHVkZXMgPSBmdW5jdGlvbiBpbmNsdWRlcyAodmFsLCBieXRlT2Zmc2V0LCBlbmNvZGluZykge1xuICByZXR1cm4gdGhpcy5pbmRleE9mKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpICE9PSAtMVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmluZGV4T2YgPSBmdW5jdGlvbiBpbmRleE9mICh2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nKSB7XG4gIHJldHVybiBiaWRpcmVjdGlvbmFsSW5kZXhPZih0aGlzLCB2YWwsIGJ5dGVPZmZzZXQsIGVuY29kaW5nLCB0cnVlKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLmxhc3RJbmRleE9mID0gZnVuY3Rpb24gbGFzdEluZGV4T2YgKHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcpIHtcbiAgcmV0dXJuIGJpZGlyZWN0aW9uYWxJbmRleE9mKHRoaXMsIHZhbCwgYnl0ZU9mZnNldCwgZW5jb2RpbmcsIGZhbHNlKVxufVxuXG5mdW5jdGlvbiBoZXhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIG9mZnNldCA9IE51bWJlcihvZmZzZXQpIHx8IDBcbiAgdmFyIHJlbWFpbmluZyA9IGJ1Zi5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKCFsZW5ndGgpIHtcbiAgICBsZW5ndGggPSByZW1haW5pbmdcbiAgfSBlbHNlIHtcbiAgICBsZW5ndGggPSBOdW1iZXIobGVuZ3RoKVxuICAgIGlmIChsZW5ndGggPiByZW1haW5pbmcpIHtcbiAgICAgIGxlbmd0aCA9IHJlbWFpbmluZ1xuICAgIH1cbiAgfVxuXG4gIC8vIG11c3QgYmUgYW4gZXZlbiBudW1iZXIgb2YgZGlnaXRzXG4gIHZhciBzdHJMZW4gPSBzdHJpbmcubGVuZ3RoXG4gIGlmIChzdHJMZW4gJSAyICE9PSAwKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdJbnZhbGlkIGhleCBzdHJpbmcnKVxuXG4gIGlmIChsZW5ndGggPiBzdHJMZW4gLyAyKSB7XG4gICAgbGVuZ3RoID0gc3RyTGVuIC8gMlxuICB9XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICB2YXIgcGFyc2VkID0gcGFyc2VJbnQoc3RyaW5nLnN1YnN0cihpICogMiwgMiksIDE2KVxuICAgIGlmIChpc05hTihwYXJzZWQpKSByZXR1cm4gaVxuICAgIGJ1ZltvZmZzZXQgKyBpXSA9IHBhcnNlZFxuICB9XG4gIHJldHVybiBpXG59XG5cbmZ1bmN0aW9uIHV0ZjhXcml0ZSAoYnVmLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIHJldHVybiBibGl0QnVmZmVyKHV0ZjhUb0J5dGVzKHN0cmluZywgYnVmLmxlbmd0aCAtIG9mZnNldCksIGJ1Ziwgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGFzY2lpV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcihhc2NpaVRvQnl0ZXMoc3RyaW5nKSwgYnVmLCBvZmZzZXQsIGxlbmd0aClcbn1cblxuZnVuY3Rpb24gbGF0aW4xV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYXNjaWlXcml0ZShidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG59XG5cbmZ1bmN0aW9uIGJhc2U2NFdyaXRlIChidWYsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpIHtcbiAgcmV0dXJuIGJsaXRCdWZmZXIoYmFzZTY0VG9CeXRlcyhzdHJpbmcpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5mdW5jdGlvbiB1Y3MyV3JpdGUgKGJ1Ziwgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aCkge1xuICByZXR1cm4gYmxpdEJ1ZmZlcih1dGYxNmxlVG9CeXRlcyhzdHJpbmcsIGJ1Zi5sZW5ndGggLSBvZmZzZXQpLCBidWYsIG9mZnNldCwgbGVuZ3RoKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gd3JpdGUgKHN0cmluZywgb2Zmc2V0LCBsZW5ndGgsIGVuY29kaW5nKSB7XG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcpXG4gIGlmIChvZmZzZXQgPT09IHVuZGVmaW5lZCkge1xuICAgIGVuY29kaW5nID0gJ3V0ZjgnXG4gICAgbGVuZ3RoID0gdGhpcy5sZW5ndGhcbiAgICBvZmZzZXQgPSAwXG4gIC8vIEJ1ZmZlciN3cml0ZShzdHJpbmcsIGVuY29kaW5nKVxuICB9IGVsc2UgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkICYmIHR5cGVvZiBvZmZzZXQgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBvZmZzZXRcbiAgICBsZW5ndGggPSB0aGlzLmxlbmd0aFxuICAgIG9mZnNldCA9IDBcbiAgLy8gQnVmZmVyI3dyaXRlKHN0cmluZywgb2Zmc2V0WywgbGVuZ3RoXVssIGVuY29kaW5nXSlcbiAgfSBlbHNlIGlmIChpc0Zpbml0ZShvZmZzZXQpKSB7XG4gICAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICAgIGlmIChpc0Zpbml0ZShsZW5ndGgpKSB7XG4gICAgICBsZW5ndGggPSBsZW5ndGggfCAwXG4gICAgICBpZiAoZW5jb2RpbmcgPT09IHVuZGVmaW5lZCkgZW5jb2RpbmcgPSAndXRmOCdcbiAgICB9IGVsc2Uge1xuICAgICAgZW5jb2RpbmcgPSBsZW5ndGhcbiAgICAgIGxlbmd0aCA9IHVuZGVmaW5lZFxuICAgIH1cbiAgLy8gbGVnYWN5IHdyaXRlKHN0cmluZywgZW5jb2RpbmcsIG9mZnNldCwgbGVuZ3RoKSAtIHJlbW92ZSBpbiB2MC4xM1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdCdWZmZXIud3JpdGUoc3RyaW5nLCBlbmNvZGluZywgb2Zmc2V0WywgbGVuZ3RoXSkgaXMgbm8gbG9uZ2VyIHN1cHBvcnRlZCdcbiAgICApXG4gIH1cblxuICB2YXIgcmVtYWluaW5nID0gdGhpcy5sZW5ndGggLSBvZmZzZXRcbiAgaWYgKGxlbmd0aCA9PT0gdW5kZWZpbmVkIHx8IGxlbmd0aCA+IHJlbWFpbmluZykgbGVuZ3RoID0gcmVtYWluaW5nXG5cbiAgaWYgKChzdHJpbmcubGVuZ3RoID4gMCAmJiAobGVuZ3RoIDwgMCB8fCBvZmZzZXQgPCAwKSkgfHwgb2Zmc2V0ID4gdGhpcy5sZW5ndGgpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignQXR0ZW1wdCB0byB3cml0ZSBvdXRzaWRlIGJ1ZmZlciBib3VuZHMnKVxuICB9XG5cbiAgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSAndXRmOCdcblxuICB2YXIgbG93ZXJlZENhc2UgPSBmYWxzZVxuICBmb3IgKDs7KSB7XG4gICAgc3dpdGNoIChlbmNvZGluZykge1xuICAgICAgY2FzZSAnaGV4JzpcbiAgICAgICAgcmV0dXJuIGhleFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgY2FzZSAndXRmLTgnOlxuICAgICAgICByZXR1cm4gdXRmOFdyaXRlKHRoaXMsIHN0cmluZywgb2Zmc2V0LCBsZW5ndGgpXG5cbiAgICAgIGNhc2UgJ2FzY2lpJzpcbiAgICAgICAgcmV0dXJuIGFzY2lpV3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAnbGF0aW4xJzpcbiAgICAgIGNhc2UgJ2JpbmFyeSc6XG4gICAgICAgIHJldHVybiBsYXRpbjFXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBjYXNlICdiYXNlNjQnOlxuICAgICAgICAvLyBXYXJuaW5nOiBtYXhMZW5ndGggbm90IHRha2VuIGludG8gYWNjb3VudCBpbiBiYXNlNjRXcml0ZVxuICAgICAgICByZXR1cm4gYmFzZTY0V3JpdGUodGhpcywgc3RyaW5nLCBvZmZzZXQsIGxlbmd0aClcblxuICAgICAgY2FzZSAndWNzMic6XG4gICAgICBjYXNlICd1Y3MtMic6XG4gICAgICBjYXNlICd1dGYxNmxlJzpcbiAgICAgIGNhc2UgJ3V0Zi0xNmxlJzpcbiAgICAgICAgcmV0dXJuIHVjczJXcml0ZSh0aGlzLCBzdHJpbmcsIG9mZnNldCwgbGVuZ3RoKVxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICBpZiAobG93ZXJlZENhc2UpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1Vua25vd24gZW5jb2Rpbmc6ICcgKyBlbmNvZGluZylcbiAgICAgICAgZW5jb2RpbmcgPSAoJycgKyBlbmNvZGluZykudG9Mb3dlckNhc2UoKVxuICAgICAgICBsb3dlcmVkQ2FzZSA9IHRydWVcbiAgICB9XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04gKCkge1xuICByZXR1cm4ge1xuICAgIHR5cGU6ICdCdWZmZXInLFxuICAgIGRhdGE6IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKHRoaXMuX2FyciB8fCB0aGlzLCAwKVxuICB9XG59XG5cbmZ1bmN0aW9uIGJhc2U2NFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgaWYgKHN0YXJ0ID09PSAwICYmIGVuZCA9PT0gYnVmLmxlbmd0aCkge1xuICAgIHJldHVybiBiYXNlNjQuZnJvbUJ5dGVBcnJheShidWYpXG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGJhc2U2NC5mcm9tQnl0ZUFycmF5KGJ1Zi5zbGljZShzdGFydCwgZW5kKSlcbiAgfVxufVxuXG5mdW5jdGlvbiB1dGY4U2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICBlbmQgPSBNYXRoLm1pbihidWYubGVuZ3RoLCBlbmQpXG4gIHZhciByZXMgPSBbXVxuXG4gIHZhciBpID0gc3RhcnRcbiAgd2hpbGUgKGkgPCBlbmQpIHtcbiAgICB2YXIgZmlyc3RCeXRlID0gYnVmW2ldXG4gICAgdmFyIGNvZGVQb2ludCA9IG51bGxcbiAgICB2YXIgYnl0ZXNQZXJTZXF1ZW5jZSA9IChmaXJzdEJ5dGUgPiAweEVGKSA/IDRcbiAgICAgIDogKGZpcnN0Qnl0ZSA+IDB4REYpID8gM1xuICAgICAgOiAoZmlyc3RCeXRlID4gMHhCRikgPyAyXG4gICAgICA6IDFcblxuICAgIGlmIChpICsgYnl0ZXNQZXJTZXF1ZW5jZSA8PSBlbmQpIHtcbiAgICAgIHZhciBzZWNvbmRCeXRlLCB0aGlyZEJ5dGUsIGZvdXJ0aEJ5dGUsIHRlbXBDb2RlUG9pbnRcblxuICAgICAgc3dpdGNoIChieXRlc1BlclNlcXVlbmNlKSB7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICBpZiAoZmlyc3RCeXRlIDwgMHg4MCkge1xuICAgICAgICAgICAgY29kZVBvaW50ID0gZmlyc3RCeXRlXG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4MUYpIDw8IDB4NiB8IChzZWNvbmRCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHg3Rikge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBpZiAoKHNlY29uZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAodGhpcmRCeXRlICYgMHhDMCkgPT09IDB4ODApIHtcbiAgICAgICAgICAgIHRlbXBDb2RlUG9pbnQgPSAoZmlyc3RCeXRlICYgMHhGKSA8PCAweEMgfCAoc2Vjb25kQnl0ZSAmIDB4M0YpIDw8IDB4NiB8ICh0aGlyZEJ5dGUgJiAweDNGKVxuICAgICAgICAgICAgaWYgKHRlbXBDb2RlUG9pbnQgPiAweDdGRiAmJiAodGVtcENvZGVQb2ludCA8IDB4RDgwMCB8fCB0ZW1wQ29kZVBvaW50ID4gMHhERkZGKSkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICBzZWNvbmRCeXRlID0gYnVmW2kgKyAxXVxuICAgICAgICAgIHRoaXJkQnl0ZSA9IGJ1ZltpICsgMl1cbiAgICAgICAgICBmb3VydGhCeXRlID0gYnVmW2kgKyAzXVxuICAgICAgICAgIGlmICgoc2Vjb25kQnl0ZSAmIDB4QzApID09PSAweDgwICYmICh0aGlyZEJ5dGUgJiAweEMwKSA9PT0gMHg4MCAmJiAoZm91cnRoQnl0ZSAmIDB4QzApID09PSAweDgwKSB7XG4gICAgICAgICAgICB0ZW1wQ29kZVBvaW50ID0gKGZpcnN0Qnl0ZSAmIDB4RikgPDwgMHgxMiB8IChzZWNvbmRCeXRlICYgMHgzRikgPDwgMHhDIHwgKHRoaXJkQnl0ZSAmIDB4M0YpIDw8IDB4NiB8IChmb3VydGhCeXRlICYgMHgzRilcbiAgICAgICAgICAgIGlmICh0ZW1wQ29kZVBvaW50ID4gMHhGRkZGICYmIHRlbXBDb2RlUG9pbnQgPCAweDExMDAwMCkge1xuICAgICAgICAgICAgICBjb2RlUG9pbnQgPSB0ZW1wQ29kZVBvaW50XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjb2RlUG9pbnQgPT09IG51bGwpIHtcbiAgICAgIC8vIHdlIGRpZCBub3QgZ2VuZXJhdGUgYSB2YWxpZCBjb2RlUG9pbnQgc28gaW5zZXJ0IGFcbiAgICAgIC8vIHJlcGxhY2VtZW50IGNoYXIgKFUrRkZGRCkgYW5kIGFkdmFuY2Ugb25seSAxIGJ5dGVcbiAgICAgIGNvZGVQb2ludCA9IDB4RkZGRFxuICAgICAgYnl0ZXNQZXJTZXF1ZW5jZSA9IDFcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA+IDB4RkZGRikge1xuICAgICAgLy8gZW5jb2RlIHRvIHV0ZjE2IChzdXJyb2dhdGUgcGFpciBkYW5jZSlcbiAgICAgIGNvZGVQb2ludCAtPSAweDEwMDAwXG4gICAgICByZXMucHVzaChjb2RlUG9pbnQgPj4+IDEwICYgMHgzRkYgfCAweEQ4MDApXG4gICAgICBjb2RlUG9pbnQgPSAweERDMDAgfCBjb2RlUG9pbnQgJiAweDNGRlxuICAgIH1cblxuICAgIHJlcy5wdXNoKGNvZGVQb2ludClcbiAgICBpICs9IGJ5dGVzUGVyU2VxdWVuY2VcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkocmVzKVxufVxuXG4vLyBCYXNlZCBvbiBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8yMjc0NzI3Mi82ODA3NDIsIHRoZSBicm93c2VyIHdpdGhcbi8vIHRoZSBsb3dlc3QgbGltaXQgaXMgQ2hyb21lLCB3aXRoIDB4MTAwMDAgYXJncy5cbi8vIFdlIGdvIDEgbWFnbml0dWRlIGxlc3MsIGZvciBzYWZldHlcbnZhciBNQVhfQVJHVU1FTlRTX0xFTkdUSCA9IDB4MTAwMFxuXG5mdW5jdGlvbiBkZWNvZGVDb2RlUG9pbnRzQXJyYXkgKGNvZGVQb2ludHMpIHtcbiAgdmFyIGxlbiA9IGNvZGVQb2ludHMubGVuZ3RoXG4gIGlmIChsZW4gPD0gTUFYX0FSR1VNRU5UU19MRU5HVEgpIHtcbiAgICByZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShTdHJpbmcsIGNvZGVQb2ludHMpIC8vIGF2b2lkIGV4dHJhIHNsaWNlKClcbiAgfVxuXG4gIC8vIERlY29kZSBpbiBjaHVua3MgdG8gYXZvaWQgXCJjYWxsIHN0YWNrIHNpemUgZXhjZWVkZWRcIi5cbiAgdmFyIHJlcyA9ICcnXG4gIHZhciBpID0gMFxuICB3aGlsZSAoaSA8IGxlbikge1xuICAgIHJlcyArPSBTdHJpbmcuZnJvbUNoYXJDb2RlLmFwcGx5KFxuICAgICAgU3RyaW5nLFxuICAgICAgY29kZVBvaW50cy5zbGljZShpLCBpICs9IE1BWF9BUkdVTUVOVFNfTEVOR1RIKVxuICAgIClcbiAgfVxuICByZXR1cm4gcmVzXG59XG5cbmZ1bmN0aW9uIGFzY2lpU2xpY2UgKGJ1Ziwgc3RhcnQsIGVuZCkge1xuICB2YXIgcmV0ID0gJydcbiAgZW5kID0gTWF0aC5taW4oYnVmLmxlbmd0aCwgZW5kKVxuXG4gIGZvciAodmFyIGkgPSBzdGFydDsgaSA8IGVuZDsgKytpKSB7XG4gICAgcmV0ICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnVmW2ldICYgMHg3RilcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGxhdGluMVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIHJldCA9ICcnXG4gIGVuZCA9IE1hdGgubWluKGJ1Zi5sZW5ndGgsIGVuZClcblxuICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7ICsraSkge1xuICAgIHJldCArPSBTdHJpbmcuZnJvbUNoYXJDb2RlKGJ1ZltpXSlcbiAgfVxuICByZXR1cm4gcmV0XG59XG5cbmZ1bmN0aW9uIGhleFNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IGJ1Zi5sZW5ndGhcblxuICBpZiAoIXN0YXJ0IHx8IHN0YXJ0IDwgMCkgc3RhcnQgPSAwXG4gIGlmICghZW5kIHx8IGVuZCA8IDAgfHwgZW5kID4gbGVuKSBlbmQgPSBsZW5cblxuICB2YXIgb3V0ID0gJydcbiAgZm9yICh2YXIgaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICBvdXQgKz0gdG9IZXgoYnVmW2ldKVxuICB9XG4gIHJldHVybiBvdXRcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVNsaWNlIChidWYsIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGJ5dGVzID0gYnVmLnNsaWNlKHN0YXJ0LCBlbmQpXG4gIHZhciByZXMgPSAnJ1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGJ5dGVzLmxlbmd0aDsgaSArPSAyKSB7XG4gICAgcmVzICs9IFN0cmluZy5mcm9tQ2hhckNvZGUoYnl0ZXNbaV0gKyBieXRlc1tpICsgMV0gKiAyNTYpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuXG5CdWZmZXIucHJvdG90eXBlLnNsaWNlID0gZnVuY3Rpb24gc2xpY2UgKHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbiA9IHRoaXMubGVuZ3RoXG4gIHN0YXJ0ID0gfn5zdGFydFxuICBlbmQgPSBlbmQgPT09IHVuZGVmaW5lZCA/IGxlbiA6IH5+ZW5kXG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ICs9IGxlblxuICAgIGlmIChzdGFydCA8IDApIHN0YXJ0ID0gMFxuICB9IGVsc2UgaWYgKHN0YXJ0ID4gbGVuKSB7XG4gICAgc3RhcnQgPSBsZW5cbiAgfVxuXG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlblxuICAgIGlmIChlbmQgPCAwKSBlbmQgPSAwXG4gIH0gZWxzZSBpZiAoZW5kID4gbGVuKSB7XG4gICAgZW5kID0gbGVuXG4gIH1cblxuICBpZiAoZW5kIDwgc3RhcnQpIGVuZCA9IHN0YXJ0XG5cbiAgdmFyIG5ld0J1ZlxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICBuZXdCdWYgPSB0aGlzLnN1YmFycmF5KHN0YXJ0LCBlbmQpXG4gICAgbmV3QnVmLl9fcHJvdG9fXyA9IEJ1ZmZlci5wcm90b3R5cGVcbiAgfSBlbHNlIHtcbiAgICB2YXIgc2xpY2VMZW4gPSBlbmQgLSBzdGFydFxuICAgIG5ld0J1ZiA9IG5ldyBCdWZmZXIoc2xpY2VMZW4sIHVuZGVmaW5lZClcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHNsaWNlTGVuOyArK2kpIHtcbiAgICAgIG5ld0J1ZltpXSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuZXdCdWZcbn1cblxuLypcbiAqIE5lZWQgdG8gbWFrZSBzdXJlIHRoYXQgYnVmZmVyIGlzbid0IHRyeWluZyB0byB3cml0ZSBvdXQgb2YgYm91bmRzLlxuICovXG5mdW5jdGlvbiBjaGVja09mZnNldCAob2Zmc2V0LCBleHQsIGxlbmd0aCkge1xuICBpZiAoKG9mZnNldCAlIDEpICE9PSAwIHx8IG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdvZmZzZXQgaXMgbm90IHVpbnQnKVxuICBpZiAob2Zmc2V0ICsgZXh0ID4gbGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignVHJ5aW5nIHRvIGFjY2VzcyBiZXlvbmQgYnVmZmVyIGxlbmd0aCcpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRMRSA9IGZ1bmN0aW9uIHJlYWRVSW50TEUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCBieXRlTGVuZ3RoLCB0aGlzLmxlbmd0aClcblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXRdXG4gIHZhciBtdWwgPSAxXG4gIHZhciBpID0gMFxuICB3aGlsZSAoKytpIDwgYnl0ZUxlbmd0aCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIGldICogbXVsXG4gIH1cblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnRCRSA9IGZ1bmN0aW9uIHJlYWRVSW50QkUgKG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBieXRlTGVuZ3RoID0gYnl0ZUxlbmd0aCB8IDBcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG4gIH1cblxuICB2YXIgdmFsID0gdGhpc1tvZmZzZXQgKyAtLWJ5dGVMZW5ndGhdXG4gIHZhciBtdWwgPSAxXG4gIHdoaWxlIChieXRlTGVuZ3RoID4gMCAmJiAobXVsICo9IDB4MTAwKSkge1xuICAgIHZhbCArPSB0aGlzW29mZnNldCArIC0tYnl0ZUxlbmd0aF0gKiBtdWxcbiAgfVxuXG4gIHJldHVybiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDggPSBmdW5jdGlvbiByZWFkVUludDggKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAxLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuIHRoaXNbb2Zmc2V0XVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MTZMRSA9IGZ1bmN0aW9uIHJlYWRVSW50MTZMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDIsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gdGhpc1tvZmZzZXRdIHwgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkVUludDE2QkUgPSBmdW5jdGlvbiByZWFkVUludDE2QkUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgcmV0dXJuICh0aGlzW29mZnNldF0gPDwgOCkgfCB0aGlzW29mZnNldCArIDFdXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZFVJbnQzMkxFID0gZnVuY3Rpb24gcmVhZFVJbnQzMkxFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgNCwgdGhpcy5sZW5ndGgpXG5cbiAgcmV0dXJuICgodGhpc1tvZmZzZXRdKSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAxXSA8PCA4KSB8XG4gICAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCAxNikpICtcbiAgICAgICh0aGlzW29mZnNldCArIDNdICogMHgxMDAwMDAwKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRVSW50MzJCRSA9IGZ1bmN0aW9uIHJlYWRVSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdICogMHgxMDAwMDAwKSArXG4gICAgKCh0aGlzW29mZnNldCArIDFdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMl0gPDwgOCkgfFxuICAgIHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludExFID0gZnVuY3Rpb24gcmVhZEludExFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XVxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgd2hpbGUgKCsraSA8IGJ5dGVMZW5ndGggJiYgKG11bCAqPSAweDEwMCkpIHtcbiAgICB2YWwgKz0gdGhpc1tvZmZzZXQgKyBpXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludEJFID0gZnVuY3Rpb24gcmVhZEludEJFIChvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgYnl0ZUxlbmd0aCwgdGhpcy5sZW5ndGgpXG5cbiAgdmFyIGkgPSBieXRlTGVuZ3RoXG4gIHZhciBtdWwgPSAxXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIC0taV1cbiAgd2hpbGUgKGkgPiAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdmFsICs9IHRoaXNbb2Zmc2V0ICsgLS1pXSAqIG11bFxuICB9XG4gIG11bCAqPSAweDgwXG5cbiAgaWYgKHZhbCA+PSBtdWwpIHZhbCAtPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aClcblxuICByZXR1cm4gdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDggPSBmdW5jdGlvbiByZWFkSW50OCAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDEsIHRoaXMubGVuZ3RoKVxuICBpZiAoISh0aGlzW29mZnNldF0gJiAweDgwKSkgcmV0dXJuICh0aGlzW29mZnNldF0pXG4gIHJldHVybiAoKDB4ZmYgLSB0aGlzW29mZnNldF0gKyAxKSAqIC0xKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWRJbnQxNkxFID0gZnVuY3Rpb24gcmVhZEludDE2TEUgKG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tPZmZzZXQob2Zmc2V0LCAyLCB0aGlzLmxlbmd0aClcbiAgdmFyIHZhbCA9IHRoaXNbb2Zmc2V0XSB8ICh0aGlzW29mZnNldCArIDFdIDw8IDgpXG4gIHJldHVybiAodmFsICYgMHg4MDAwKSA/IHZhbCB8IDB4RkZGRjAwMDAgOiB2YWxcbn1cblxuQnVmZmVyLnByb3RvdHlwZS5yZWFkSW50MTZCRSA9IGZ1bmN0aW9uIHJlYWRJbnQxNkJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgMiwgdGhpcy5sZW5ndGgpXG4gIHZhciB2YWwgPSB0aGlzW29mZnNldCArIDFdIHwgKHRoaXNbb2Zmc2V0XSA8PCA4KVxuICByZXR1cm4gKHZhbCAmIDB4ODAwMCkgPyB2YWwgfCAweEZGRkYwMDAwIDogdmFsXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyTEUgPSBmdW5jdGlvbiByZWFkSW50MzJMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdKSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgOCkgfFxuICAgICh0aGlzW29mZnNldCArIDJdIDw8IDE2KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10gPDwgMjQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEludDMyQkUgPSBmdW5jdGlvbiByZWFkSW50MzJCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuXG4gIHJldHVybiAodGhpc1tvZmZzZXRdIDw8IDI0KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgMV0gPDwgMTYpIHxcbiAgICAodGhpc1tvZmZzZXQgKyAyXSA8PCA4KSB8XG4gICAgKHRoaXNbb2Zmc2V0ICsgM10pXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0TEUgPSBmdW5jdGlvbiByZWFkRmxvYXRMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgMjMsIDQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZEZsb2F0QkUgPSBmdW5jdGlvbiByZWFkRmxvYXRCRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDQsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgZmFsc2UsIDIzLCA0KVxufVxuXG5CdWZmZXIucHJvdG90eXBlLnJlYWREb3VibGVMRSA9IGZ1bmN0aW9uIHJlYWREb3VibGVMRSAob2Zmc2V0LCBub0Fzc2VydCkge1xuICBpZiAoIW5vQXNzZXJ0KSBjaGVja09mZnNldChvZmZzZXQsIDgsIHRoaXMubGVuZ3RoKVxuICByZXR1cm4gaWVlZTc1NC5yZWFkKHRoaXMsIG9mZnNldCwgdHJ1ZSwgNTIsIDgpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUucmVhZERvdWJsZUJFID0gZnVuY3Rpb24gcmVhZERvdWJsZUJFIChvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrT2Zmc2V0KG9mZnNldCwgOCwgdGhpcy5sZW5ndGgpXG4gIHJldHVybiBpZWVlNzU0LnJlYWQodGhpcywgb2Zmc2V0LCBmYWxzZSwgNTIsIDgpXG59XG5cbmZ1bmN0aW9uIGNoZWNrSW50IChidWYsIHZhbHVlLCBvZmZzZXQsIGV4dCwgbWF4LCBtaW4pIHtcbiAgaWYgKCFpbnRlcm5hbElzQnVmZmVyKGJ1ZikpIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wiYnVmZmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlciBpbnN0YW5jZScpXG4gIGlmICh2YWx1ZSA+IG1heCB8fCB2YWx1ZSA8IG1pbikgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ1widmFsdWVcIiBhcmd1bWVudCBpcyBvdXQgb2YgYm91bmRzJylcbiAgaWYgKG9mZnNldCArIGV4dCA+IGJ1Zi5sZW5ndGgpIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludExFID0gZnVuY3Rpb24gd3JpdGVVSW50TEUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgbXVsID0gMVxuICB2YXIgaSA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludEJFID0gZnVuY3Rpb24gd3JpdGVVSW50QkUgKHZhbHVlLCBvZmZzZXQsIGJ5dGVMZW5ndGgsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgYnl0ZUxlbmd0aCA9IGJ5dGVMZW5ndGggfCAwXG4gIGlmICghbm9Bc3NlcnQpIHtcbiAgICB2YXIgbWF4Qnl0ZXMgPSBNYXRoLnBvdygyLCA4ICogYnl0ZUxlbmd0aCkgLSAxXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbWF4Qnl0ZXMsIDApXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICh2YWx1ZSAvIG11bCkgJiAweEZGXG4gIH1cblxuICByZXR1cm4gb2Zmc2V0ICsgYnl0ZUxlbmd0aFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlVUludDggPSBmdW5jdGlvbiB3cml0ZVVJbnQ4ICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDEsIDB4ZmYsIDApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgcmV0dXJuIG9mZnNldCArIDFcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MTYgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmICsgdmFsdWUgKyAxXG4gIGZvciAodmFyIGkgPSAwLCBqID0gTWF0aC5taW4oYnVmLmxlbmd0aCAtIG9mZnNldCwgMik7IGkgPCBqOyArK2kpIHtcbiAgICBidWZbb2Zmc2V0ICsgaV0gPSAodmFsdWUgJiAoMHhmZiA8PCAoOCAqIChsaXR0bGVFbmRpYW4gPyBpIDogMSAtIGkpKSkpID4+PlxuICAgICAgKGxpdHRsZUVuZGlhbiA/IGkgOiAxIC0gaSkgKiA4XG4gIH1cbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVVSW50MTZMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCAyLCAweGZmZmYsIDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQxNih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyAyXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MTZCRSA9IGZ1bmN0aW9uIHdyaXRlVUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHhmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuZnVuY3Rpb24gb2JqZWN0V3JpdGVVSW50MzIgKGJ1ZiwgdmFsdWUsIG9mZnNldCwgbGl0dGxlRW5kaWFuKSB7XG4gIGlmICh2YWx1ZSA8IDApIHZhbHVlID0gMHhmZmZmZmZmZiArIHZhbHVlICsgMVxuICBmb3IgKHZhciBpID0gMCwgaiA9IE1hdGgubWluKGJ1Zi5sZW5ndGggLSBvZmZzZXQsIDQpOyBpIDwgajsgKytpKSB7XG4gICAgYnVmW29mZnNldCArIGldID0gKHZhbHVlID4+PiAobGl0dGxlRW5kaWFuID8gaSA6IDMgLSBpKSAqIDgpICYgMHhmZlxuICB9XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVVSW50MzJMRSA9IGZ1bmN0aW9uIHdyaXRlVUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHhmZmZmZmZmZiwgMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSA+Pj4gMjQpXG4gICAgdGhpc1tvZmZzZXQgKyAyXSA9ICh2YWx1ZSA+Pj4gMTYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZVVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVVSW50MzJCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSBjaGVja0ludCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCA0LCAweGZmZmZmZmZmLCAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDI0KVxuICAgIHRoaXNbb2Zmc2V0ICsgMV0gPSAodmFsdWUgPj4+IDE2KVxuICAgIHRoaXNbb2Zmc2V0ICsgMl0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAzXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MzIodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDRcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludExFID0gZnVuY3Rpb24gd3JpdGVJbnRMRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IDBcbiAgdmFyIG11bCA9IDFcbiAgdmFyIHN1YiA9IDBcbiAgdGhpc1tvZmZzZXRdID0gdmFsdWUgJiAweEZGXG4gIHdoaWxlICgrK2kgPCBieXRlTGVuZ3RoICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpIC0gMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludEJFID0gZnVuY3Rpb24gd3JpdGVJbnRCRSAodmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbm9Bc3NlcnQpIHtcbiAgdmFsdWUgPSArdmFsdWVcbiAgb2Zmc2V0ID0gb2Zmc2V0IHwgMFxuICBpZiAoIW5vQXNzZXJ0KSB7XG4gICAgdmFyIGxpbWl0ID0gTWF0aC5wb3coMiwgOCAqIGJ5dGVMZW5ndGggLSAxKVxuXG4gICAgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgYnl0ZUxlbmd0aCwgbGltaXQgLSAxLCAtbGltaXQpXG4gIH1cblxuICB2YXIgaSA9IGJ5dGVMZW5ndGggLSAxXG4gIHZhciBtdWwgPSAxXG4gIHZhciBzdWIgPSAwXG4gIHRoaXNbb2Zmc2V0ICsgaV0gPSB2YWx1ZSAmIDB4RkZcbiAgd2hpbGUgKC0taSA+PSAwICYmIChtdWwgKj0gMHgxMDApKSB7XG4gICAgaWYgKHZhbHVlIDwgMCAmJiBzdWIgPT09IDAgJiYgdGhpc1tvZmZzZXQgKyBpICsgMV0gIT09IDApIHtcbiAgICAgIHN1YiA9IDFcbiAgICB9XG4gICAgdGhpc1tvZmZzZXQgKyBpXSA9ICgodmFsdWUgLyBtdWwpID4+IDApIC0gc3ViICYgMHhGRlxuICB9XG5cbiAgcmV0dXJuIG9mZnNldCArIGJ5dGVMZW5ndGhcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDggPSBmdW5jdGlvbiB3cml0ZUludDggKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMSwgMHg3ZiwgLTB4ODApXG4gIGlmICghQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHZhbHVlID0gTWF0aC5mbG9vcih2YWx1ZSlcbiAgaWYgKHZhbHVlIDwgMCkgdmFsdWUgPSAweGZmICsgdmFsdWUgKyAxXG4gIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIHJldHVybiBvZmZzZXQgKyAxXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQxNkxFID0gZnVuY3Rpb24gd3JpdGVJbnQxNkxFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDIsIDB4N2ZmZiwgLTB4ODAwMClcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlICYgMHhmZilcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiA4KVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDE2KHRoaXMsIHZhbHVlLCBvZmZzZXQsIHRydWUpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDE2QkUgPSBmdW5jdGlvbiB3cml0ZUludDE2QkUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgMiwgMHg3ZmZmLCAtMHg4MDAwKVxuICBpZiAoQnVmZmVyLlRZUEVEX0FSUkFZX1NVUFBPUlQpIHtcbiAgICB0aGlzW29mZnNldF0gPSAodmFsdWUgPj4+IDgpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSAmIDB4ZmYpXG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0V3JpdGVVSW50MTYodGhpcywgdmFsdWUsIG9mZnNldCwgZmFsc2UpXG4gIH1cbiAgcmV0dXJuIG9mZnNldCArIDJcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZUludDMyTEUgPSBmdW5jdGlvbiB3cml0ZUludDMyTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHZhbHVlID0gK3ZhbHVlXG4gIG9mZnNldCA9IG9mZnNldCB8IDBcbiAgaWYgKCFub0Fzc2VydCkgY2hlY2tJbnQodGhpcywgdmFsdWUsIG9mZnNldCwgNCwgMHg3ZmZmZmZmZiwgLTB4ODAwMDAwMDApXG4gIGlmIChCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIHRoaXNbb2Zmc2V0XSA9ICh2YWx1ZSAmIDB4ZmYpXG4gICAgdGhpc1tvZmZzZXQgKyAxXSA9ICh2YWx1ZSA+Pj4gOClcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDNdID0gKHZhbHVlID4+PiAyNClcbiAgfSBlbHNlIHtcbiAgICBvYmplY3RXcml0ZVVJbnQzMih0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVJbnQzMkJFID0gZnVuY3Rpb24gd3JpdGVJbnQzMkJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICB2YWx1ZSA9ICt2YWx1ZVxuICBvZmZzZXQgPSBvZmZzZXQgfCAwXG4gIGlmICghbm9Bc3NlcnQpIGNoZWNrSW50KHRoaXMsIHZhbHVlLCBvZmZzZXQsIDQsIDB4N2ZmZmZmZmYsIC0weDgwMDAwMDAwKVxuICBpZiAodmFsdWUgPCAwKSB2YWx1ZSA9IDB4ZmZmZmZmZmYgKyB2YWx1ZSArIDFcbiAgaWYgKEJ1ZmZlci5UWVBFRF9BUlJBWV9TVVBQT1JUKSB7XG4gICAgdGhpc1tvZmZzZXRdID0gKHZhbHVlID4+PiAyNClcbiAgICB0aGlzW29mZnNldCArIDFdID0gKHZhbHVlID4+PiAxNilcbiAgICB0aGlzW29mZnNldCArIDJdID0gKHZhbHVlID4+PiA4KVxuICAgIHRoaXNbb2Zmc2V0ICsgM10gPSAodmFsdWUgJiAweGZmKVxuICB9IGVsc2Uge1xuICAgIG9iamVjdFdyaXRlVUludDMyKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlKVxuICB9XG4gIHJldHVybiBvZmZzZXQgKyA0XG59XG5cbmZ1bmN0aW9uIGNoZWNrSUVFRTc1NCAoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBleHQsIG1heCwgbWluKSB7XG4gIGlmIChvZmZzZXQgKyBleHQgPiBidWYubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW5kZXggb3V0IG9mIHJhbmdlJylcbiAgaWYgKG9mZnNldCA8IDApIHRocm93IG5ldyBSYW5nZUVycm9yKCdJbmRleCBvdXQgb2YgcmFuZ2UnKVxufVxuXG5mdW5jdGlvbiB3cml0ZUZsb2F0IChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDQsIDMuNDAyODIzNDY2Mzg1Mjg4NmUrMzgsIC0zLjQwMjgyMzQ2NjM4NTI4ODZlKzM4KVxuICB9XG4gIGllZWU3NTQud3JpdGUoYnVmLCB2YWx1ZSwgb2Zmc2V0LCBsaXR0bGVFbmRpYW4sIDIzLCA0KVxuICByZXR1cm4gb2Zmc2V0ICsgNFxufVxuXG5CdWZmZXIucHJvdG90eXBlLndyaXRlRmxvYXRMRSA9IGZ1bmN0aW9uIHdyaXRlRmxvYXRMRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRmxvYXQodGhpcywgdmFsdWUsIG9mZnNldCwgdHJ1ZSwgbm9Bc3NlcnQpXG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVGbG9hdEJFID0gZnVuY3Rpb24gd3JpdGVGbG9hdEJFICh2YWx1ZSwgb2Zmc2V0LCBub0Fzc2VydCkge1xuICByZXR1cm4gd3JpdGVGbG9hdCh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCBmYWxzZSwgbm9Bc3NlcnQpXG59XG5cbmZ1bmN0aW9uIHdyaXRlRG91YmxlIChidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgbm9Bc3NlcnQpIHtcbiAgaWYgKCFub0Fzc2VydCkge1xuICAgIGNoZWNrSUVFRTc1NChidWYsIHZhbHVlLCBvZmZzZXQsIDgsIDEuNzk3NjkzMTM0ODYyMzE1N0UrMzA4LCAtMS43OTc2OTMxMzQ4NjIzMTU3RSszMDgpXG4gIH1cbiAgaWVlZTc1NC53cml0ZShidWYsIHZhbHVlLCBvZmZzZXQsIGxpdHRsZUVuZGlhbiwgNTIsIDgpXG4gIHJldHVybiBvZmZzZXQgKyA4XG59XG5cbkJ1ZmZlci5wcm90b3R5cGUud3JpdGVEb3VibGVMRSA9IGZ1bmN0aW9uIHdyaXRlRG91YmxlTEUgKHZhbHVlLCBvZmZzZXQsIG5vQXNzZXJ0KSB7XG4gIHJldHVybiB3cml0ZURvdWJsZSh0aGlzLCB2YWx1ZSwgb2Zmc2V0LCB0cnVlLCBub0Fzc2VydClcbn1cblxuQnVmZmVyLnByb3RvdHlwZS53cml0ZURvdWJsZUJFID0gZnVuY3Rpb24gd3JpdGVEb3VibGVCRSAodmFsdWUsIG9mZnNldCwgbm9Bc3NlcnQpIHtcbiAgcmV0dXJuIHdyaXRlRG91YmxlKHRoaXMsIHZhbHVlLCBvZmZzZXQsIGZhbHNlLCBub0Fzc2VydClcbn1cblxuLy8gY29weSh0YXJnZXRCdWZmZXIsIHRhcmdldFN0YXJ0PTAsIHNvdXJjZVN0YXJ0PTAsIHNvdXJjZUVuZD1idWZmZXIubGVuZ3RoKVxuQnVmZmVyLnByb3RvdHlwZS5jb3B5ID0gZnVuY3Rpb24gY29weSAodGFyZ2V0LCB0YXJnZXRTdGFydCwgc3RhcnQsIGVuZCkge1xuICBpZiAoIXN0YXJ0KSBzdGFydCA9IDBcbiAgaWYgKCFlbmQgJiYgZW5kICE9PSAwKSBlbmQgPSB0aGlzLmxlbmd0aFxuICBpZiAodGFyZ2V0U3RhcnQgPj0gdGFyZ2V0Lmxlbmd0aCkgdGFyZ2V0U3RhcnQgPSB0YXJnZXQubGVuZ3RoXG4gIGlmICghdGFyZ2V0U3RhcnQpIHRhcmdldFN0YXJ0ID0gMFxuICBpZiAoZW5kID4gMCAmJiBlbmQgPCBzdGFydCkgZW5kID0gc3RhcnRcblxuICAvLyBDb3B5IDAgYnl0ZXM7IHdlJ3JlIGRvbmVcbiAgaWYgKGVuZCA9PT0gc3RhcnQpIHJldHVybiAwXG4gIGlmICh0YXJnZXQubGVuZ3RoID09PSAwIHx8IHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm4gMFxuXG4gIC8vIEZhdGFsIGVycm9yIGNvbmRpdGlvbnNcbiAgaWYgKHRhcmdldFN0YXJ0IDwgMCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd0YXJnZXRTdGFydCBvdXQgb2YgYm91bmRzJylcbiAgfVxuICBpZiAoc3RhcnQgPCAwIHx8IHN0YXJ0ID49IHRoaXMubGVuZ3RoKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlU3RhcnQgb3V0IG9mIGJvdW5kcycpXG4gIGlmIChlbmQgPCAwKSB0aHJvdyBuZXcgUmFuZ2VFcnJvcignc291cmNlRW5kIG91dCBvZiBib3VuZHMnKVxuXG4gIC8vIEFyZSB3ZSBvb2I/XG4gIGlmIChlbmQgPiB0aGlzLmxlbmd0aCkgZW5kID0gdGhpcy5sZW5ndGhcbiAgaWYgKHRhcmdldC5sZW5ndGggLSB0YXJnZXRTdGFydCA8IGVuZCAtIHN0YXJ0KSB7XG4gICAgZW5kID0gdGFyZ2V0Lmxlbmd0aCAtIHRhcmdldFN0YXJ0ICsgc3RhcnRcbiAgfVxuXG4gIHZhciBsZW4gPSBlbmQgLSBzdGFydFxuICB2YXIgaVxuXG4gIGlmICh0aGlzID09PSB0YXJnZXQgJiYgc3RhcnQgPCB0YXJnZXRTdGFydCAmJiB0YXJnZXRTdGFydCA8IGVuZCkge1xuICAgIC8vIGRlc2NlbmRpbmcgY29weSBmcm9tIGVuZFxuICAgIGZvciAoaSA9IGxlbiAtIDE7IGkgPj0gMDsgLS1pKSB7XG4gICAgICB0YXJnZXRbaSArIHRhcmdldFN0YXJ0XSA9IHRoaXNbaSArIHN0YXJ0XVxuICAgIH1cbiAgfSBlbHNlIGlmIChsZW4gPCAxMDAwIHx8ICFCdWZmZXIuVFlQRURfQVJSQVlfU1VQUE9SVCkge1xuICAgIC8vIGFzY2VuZGluZyBjb3B5IGZyb20gc3RhcnRcbiAgICBmb3IgKGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICAgIHRhcmdldFtpICsgdGFyZ2V0U3RhcnRdID0gdGhpc1tpICsgc3RhcnRdXG4gICAgfVxuICB9IGVsc2Uge1xuICAgIFVpbnQ4QXJyYXkucHJvdG90eXBlLnNldC5jYWxsKFxuICAgICAgdGFyZ2V0LFxuICAgICAgdGhpcy5zdWJhcnJheShzdGFydCwgc3RhcnQgKyBsZW4pLFxuICAgICAgdGFyZ2V0U3RhcnRcbiAgICApXG4gIH1cblxuICByZXR1cm4gbGVuXG59XG5cbi8vIFVzYWdlOlxuLy8gICAgYnVmZmVyLmZpbGwobnVtYmVyWywgb2Zmc2V0WywgZW5kXV0pXG4vLyAgICBidWZmZXIuZmlsbChidWZmZXJbLCBvZmZzZXRbLCBlbmRdXSlcbi8vICAgIGJ1ZmZlci5maWxsKHN0cmluZ1ssIG9mZnNldFssIGVuZF1dWywgZW5jb2RpbmddKVxuQnVmZmVyLnByb3RvdHlwZS5maWxsID0gZnVuY3Rpb24gZmlsbCAodmFsLCBzdGFydCwgZW5kLCBlbmNvZGluZykge1xuICAvLyBIYW5kbGUgc3RyaW5nIGNhc2VzOlxuICBpZiAodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICBpZiAodHlwZW9mIHN0YXJ0ID09PSAnc3RyaW5nJykge1xuICAgICAgZW5jb2RpbmcgPSBzdGFydFxuICAgICAgc3RhcnQgPSAwXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIGVuZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGVuY29kaW5nID0gZW5kXG4gICAgICBlbmQgPSB0aGlzLmxlbmd0aFxuICAgIH1cbiAgICBpZiAodmFsLmxlbmd0aCA9PT0gMSkge1xuICAgICAgdmFyIGNvZGUgPSB2YWwuY2hhckNvZGVBdCgwKVxuICAgICAgaWYgKGNvZGUgPCAyNTYpIHtcbiAgICAgICAgdmFsID0gY29kZVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoZW5jb2RpbmcgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2YgZW5jb2RpbmcgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdlbmNvZGluZyBtdXN0IGJlIGEgc3RyaW5nJylcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycgJiYgIUJ1ZmZlci5pc0VuY29kaW5nKGVuY29kaW5nKSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKVxuICAgIH1cbiAgfSBlbHNlIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIHZhbCA9IHZhbCAmIDI1NVxuICB9XG5cbiAgLy8gSW52YWxpZCByYW5nZXMgYXJlIG5vdCBzZXQgdG8gYSBkZWZhdWx0LCBzbyBjYW4gcmFuZ2UgY2hlY2sgZWFybHkuXG4gIGlmIChzdGFydCA8IDAgfHwgdGhpcy5sZW5ndGggPCBzdGFydCB8fCB0aGlzLmxlbmd0aCA8IGVuZCkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdPdXQgb2YgcmFuZ2UgaW5kZXgnKVxuICB9XG5cbiAgaWYgKGVuZCA8PSBzdGFydCkge1xuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICBzdGFydCA9IHN0YXJ0ID4+PiAwXG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gdGhpcy5sZW5ndGggOiBlbmQgPj4+IDBcblxuICBpZiAoIXZhbCkgdmFsID0gMFxuXG4gIHZhciBpXG4gIGlmICh0eXBlb2YgdmFsID09PSAnbnVtYmVyJykge1xuICAgIGZvciAoaSA9IHN0YXJ0OyBpIDwgZW5kOyArK2kpIHtcbiAgICAgIHRoaXNbaV0gPSB2YWxcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgdmFyIGJ5dGVzID0gaW50ZXJuYWxJc0J1ZmZlcih2YWwpXG4gICAgICA/IHZhbFxuICAgICAgOiB1dGY4VG9CeXRlcyhuZXcgQnVmZmVyKHZhbCwgZW5jb2RpbmcpLnRvU3RyaW5nKCkpXG4gICAgdmFyIGxlbiA9IGJ5dGVzLmxlbmd0aFxuICAgIGZvciAoaSA9IDA7IGkgPCBlbmQgLSBzdGFydDsgKytpKSB7XG4gICAgICB0aGlzW2kgKyBzdGFydF0gPSBieXRlc1tpICUgbGVuXVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0aGlzXG59XG5cbi8vIEhFTFBFUiBGVU5DVElPTlNcbi8vID09PT09PT09PT09PT09PT1cblxudmFyIElOVkFMSURfQkFTRTY0X1JFID0gL1teK1xcLzAtOUEtWmEtei1fXS9nXG5cbmZ1bmN0aW9uIGJhc2U2NGNsZWFuIChzdHIpIHtcbiAgLy8gTm9kZSBzdHJpcHMgb3V0IGludmFsaWQgY2hhcmFjdGVycyBsaWtlIFxcbiBhbmQgXFx0IGZyb20gdGhlIHN0cmluZywgYmFzZTY0LWpzIGRvZXMgbm90XG4gIHN0ciA9IHN0cmluZ3RyaW0oc3RyKS5yZXBsYWNlKElOVkFMSURfQkFTRTY0X1JFLCAnJylcbiAgLy8gTm9kZSBjb252ZXJ0cyBzdHJpbmdzIHdpdGggbGVuZ3RoIDwgMiB0byAnJ1xuICBpZiAoc3RyLmxlbmd0aCA8IDIpIHJldHVybiAnJ1xuICAvLyBOb2RlIGFsbG93cyBmb3Igbm9uLXBhZGRlZCBiYXNlNjQgc3RyaW5ncyAobWlzc2luZyB0cmFpbGluZyA9PT0pLCBiYXNlNjQtanMgZG9lcyBub3RcbiAgd2hpbGUgKHN0ci5sZW5ndGggJSA0ICE9PSAwKSB7XG4gICAgc3RyID0gc3RyICsgJz0nXG4gIH1cbiAgcmV0dXJuIHN0clxufVxuXG5mdW5jdGlvbiBzdHJpbmd0cmltIChzdHIpIHtcbiAgaWYgKHN0ci50cmltKSByZXR1cm4gc3RyLnRyaW0oKVxuICByZXR1cm4gc3RyLnJlcGxhY2UoL15cXHMrfFxccyskL2csICcnKVxufVxuXG5mdW5jdGlvbiB0b0hleCAobikge1xuICBpZiAobiA8IDE2KSByZXR1cm4gJzAnICsgbi50b1N0cmluZygxNilcbiAgcmV0dXJuIG4udG9TdHJpbmcoMTYpXG59XG5cbmZ1bmN0aW9uIHV0ZjhUb0J5dGVzIChzdHJpbmcsIHVuaXRzKSB7XG4gIHVuaXRzID0gdW5pdHMgfHwgSW5maW5pdHlcbiAgdmFyIGNvZGVQb2ludFxuICB2YXIgbGVuZ3RoID0gc3RyaW5nLmxlbmd0aFxuICB2YXIgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcbiAgdmFyIGJ5dGVzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbmd0aDsgKytpKSB7XG4gICAgY29kZVBvaW50ID0gc3RyaW5nLmNoYXJDb2RlQXQoaSlcblxuICAgIC8vIGlzIHN1cnJvZ2F0ZSBjb21wb25lbnRcbiAgICBpZiAoY29kZVBvaW50ID4gMHhEN0ZGICYmIGNvZGVQb2ludCA8IDB4RTAwMCkge1xuICAgICAgLy8gbGFzdCBjaGFyIHdhcyBhIGxlYWRcbiAgICAgIGlmICghbGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgICAvLyBubyBsZWFkIHlldFxuICAgICAgICBpZiAoY29kZVBvaW50ID4gMHhEQkZGKSB7XG4gICAgICAgICAgLy8gdW5leHBlY3RlZCB0cmFpbFxuICAgICAgICAgIGlmICgodW5pdHMgLT0gMykgPiAtMSkgYnl0ZXMucHVzaCgweEVGLCAweEJGLCAweEJEKVxuICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgIH0gZWxzZSBpZiAoaSArIDEgPT09IGxlbmd0aCkge1xuICAgICAgICAgIC8vIHVucGFpcmVkIGxlYWRcbiAgICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gdmFsaWQgbGVhZFxuICAgICAgICBsZWFkU3Vycm9nYXRlID0gY29kZVBvaW50XG5cbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgLy8gMiBsZWFkcyBpbiBhIHJvd1xuICAgICAgaWYgKGNvZGVQb2ludCA8IDB4REMwMCkge1xuICAgICAgICBpZiAoKHVuaXRzIC09IDMpID4gLTEpIGJ5dGVzLnB1c2goMHhFRiwgMHhCRiwgMHhCRClcbiAgICAgICAgbGVhZFN1cnJvZ2F0ZSA9IGNvZGVQb2ludFxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICAvLyB2YWxpZCBzdXJyb2dhdGUgcGFpclxuICAgICAgY29kZVBvaW50ID0gKGxlYWRTdXJyb2dhdGUgLSAweEQ4MDAgPDwgMTAgfCBjb2RlUG9pbnQgLSAweERDMDApICsgMHgxMDAwMFxuICAgIH0gZWxzZSBpZiAobGVhZFN1cnJvZ2F0ZSkge1xuICAgICAgLy8gdmFsaWQgYm1wIGNoYXIsIGJ1dCBsYXN0IGNoYXIgd2FzIGEgbGVhZFxuICAgICAgaWYgKCh1bml0cyAtPSAzKSA+IC0xKSBieXRlcy5wdXNoKDB4RUYsIDB4QkYsIDB4QkQpXG4gICAgfVxuXG4gICAgbGVhZFN1cnJvZ2F0ZSA9IG51bGxcblxuICAgIC8vIGVuY29kZSB1dGY4XG4gICAgaWYgKGNvZGVQb2ludCA8IDB4ODApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMSkgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChjb2RlUG9pbnQpXG4gICAgfSBlbHNlIGlmIChjb2RlUG9pbnQgPCAweDgwMCkge1xuICAgICAgaWYgKCh1bml0cyAtPSAyKSA8IDApIGJyZWFrXG4gICAgICBieXRlcy5wdXNoKFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2IHwgMHhDMCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTAwMDApIHtcbiAgICAgIGlmICgodW5pdHMgLT0gMykgPCAwKSBicmVha1xuICAgICAgYnl0ZXMucHVzaChcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyB8IDB4RTAsXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDYgJiAweDNGIHwgMHg4MCxcbiAgICAgICAgY29kZVBvaW50ICYgMHgzRiB8IDB4ODBcbiAgICAgIClcbiAgICB9IGVsc2UgaWYgKGNvZGVQb2ludCA8IDB4MTEwMDAwKSB7XG4gICAgICBpZiAoKHVuaXRzIC09IDQpIDwgMCkgYnJlYWtcbiAgICAgIGJ5dGVzLnB1c2goXG4gICAgICAgIGNvZGVQb2ludCA+PiAweDEyIHwgMHhGMCxcbiAgICAgICAgY29kZVBvaW50ID4+IDB4QyAmIDB4M0YgfCAweDgwLFxuICAgICAgICBjb2RlUG9pbnQgPj4gMHg2ICYgMHgzRiB8IDB4ODAsXG4gICAgICAgIGNvZGVQb2ludCAmIDB4M0YgfCAweDgwXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCBjb2RlIHBvaW50JylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYnl0ZXNcbn1cblxuZnVuY3Rpb24gYXNjaWlUb0J5dGVzIChzdHIpIHtcbiAgdmFyIGJ5dGVBcnJheSA9IFtdXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgKytpKSB7XG4gICAgLy8gTm9kZSdzIGNvZGUgc2VlbXMgdG8gYmUgZG9pbmcgdGhpcyBhbmQgbm90ICYgMHg3Ri4uXG4gICAgYnl0ZUFycmF5LnB1c2goc3RyLmNoYXJDb2RlQXQoaSkgJiAweEZGKVxuICB9XG4gIHJldHVybiBieXRlQXJyYXlcbn1cblxuZnVuY3Rpb24gdXRmMTZsZVRvQnl0ZXMgKHN0ciwgdW5pdHMpIHtcbiAgdmFyIGMsIGhpLCBsb1xuICB2YXIgYnl0ZUFycmF5ID0gW11cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKHVuaXRzIC09IDIpIDwgMCkgYnJlYWtcblxuICAgIGMgPSBzdHIuY2hhckNvZGVBdChpKVxuICAgIGhpID0gYyA+PiA4XG4gICAgbG8gPSBjICUgMjU2XG4gICAgYnl0ZUFycmF5LnB1c2gobG8pXG4gICAgYnl0ZUFycmF5LnB1c2goaGkpXG4gIH1cblxuICByZXR1cm4gYnl0ZUFycmF5XG59XG5cblxuZnVuY3Rpb24gYmFzZTY0VG9CeXRlcyAoc3RyKSB7XG4gIHJldHVybiBiYXNlNjQudG9CeXRlQXJyYXkoYmFzZTY0Y2xlYW4oc3RyKSlcbn1cblxuZnVuY3Rpb24gYmxpdEJ1ZmZlciAoc3JjLCBkc3QsIG9mZnNldCwgbGVuZ3RoKSB7XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuZ3RoOyArK2kpIHtcbiAgICBpZiAoKGkgKyBvZmZzZXQgPj0gZHN0Lmxlbmd0aCkgfHwgKGkgPj0gc3JjLmxlbmd0aCkpIGJyZWFrXG4gICAgZHN0W2kgKyBvZmZzZXRdID0gc3JjW2ldXG4gIH1cbiAgcmV0dXJuIGlcbn1cblxuZnVuY3Rpb24gaXNuYW4gKHZhbCkge1xuICByZXR1cm4gdmFsICE9PSB2YWwgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1zZWxmLWNvbXBhcmVcbn1cblxuXG4vLyB0aGUgZm9sbG93aW5nIGlzIGZyb20gaXMtYnVmZmVyLCBhbHNvIGJ5IEZlcm9zcyBBYm91a2hhZGlqZWggYW5kIHdpdGggc2FtZSBsaXNlbmNlXG4vLyBUaGUgX2lzQnVmZmVyIGNoZWNrIGlzIGZvciBTYWZhcmkgNS03IHN1cHBvcnQsIGJlY2F1c2UgaXQncyBtaXNzaW5nXG4vLyBPYmplY3QucHJvdG90eXBlLmNvbnN0cnVjdG9yLiBSZW1vdmUgdGhpcyBldmVudHVhbGx5XG5leHBvcnQgZnVuY3Rpb24gaXNCdWZmZXIob2JqKSB7XG4gIHJldHVybiBvYmogIT0gbnVsbCAmJiAoISFvYmouX2lzQnVmZmVyIHx8IGlzRmFzdEJ1ZmZlcihvYmopIHx8IGlzU2xvd0J1ZmZlcihvYmopKVxufVxuXG5mdW5jdGlvbiBpc0Zhc3RCdWZmZXIgKG9iaikge1xuICByZXR1cm4gISFvYmouY29uc3RydWN0b3IgJiYgdHlwZW9mIG9iai5jb25zdHJ1Y3Rvci5pc0J1ZmZlciA9PT0gJ2Z1bmN0aW9uJyAmJiBvYmouY29uc3RydWN0b3IuaXNCdWZmZXIob2JqKVxufVxuXG4vLyBGb3IgTm9kZSB2MC4xMCBzdXBwb3J0LiBSZW1vdmUgdGhpcyBldmVudHVhbGx5LlxuZnVuY3Rpb24gaXNTbG93QnVmZmVyIChvYmopIHtcbiAgcmV0dXJuIHR5cGVvZiBvYmoucmVhZEZsb2F0TEUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIG9iai5zbGljZSA9PT0gJ2Z1bmN0aW9uJyAmJiBpc0Zhc3RCdWZmZXIob2JqLnNsaWNlKDAsIDApKVxufVxuIiwiLy8gc2hpbSBmb3IgdXNpbmcgcHJvY2VzcyBpbiBicm93c2VyXG4vLyBiYXNlZCBvZmYgaHR0cHM6Ly9naXRodWIuY29tL2RlZnVuY3R6b21iaWUvbm9kZS1wcm9jZXNzL2Jsb2IvbWFzdGVyL2Jyb3dzZXIuanNcblxuZnVuY3Rpb24gZGVmYXVsdFNldFRpbW91dCgpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3NldFRpbWVvdXQgaGFzIG5vdCBiZWVuIGRlZmluZWQnKTtcbn1cbmZ1bmN0aW9uIGRlZmF1bHRDbGVhclRpbWVvdXQgKCkge1xuICAgIHRocm93IG5ldyBFcnJvcignY2xlYXJUaW1lb3V0IGhhcyBub3QgYmVlbiBkZWZpbmVkJyk7XG59XG52YXIgY2FjaGVkU2V0VGltZW91dCA9IGRlZmF1bHRTZXRUaW1vdXQ7XG52YXIgY2FjaGVkQ2xlYXJUaW1lb3V0ID0gZGVmYXVsdENsZWFyVGltZW91dDtcbmlmICh0eXBlb2YgZ2xvYmFsLnNldFRpbWVvdXQgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYWNoZWRTZXRUaW1lb3V0ID0gc2V0VGltZW91dDtcbn1cbmlmICh0eXBlb2YgZ2xvYmFsLmNsZWFyVGltZW91dCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNhY2hlZENsZWFyVGltZW91dCA9IGNsZWFyVGltZW91dDtcbn1cblxuZnVuY3Rpb24gcnVuVGltZW91dChmdW4pIHtcbiAgICBpZiAoY2FjaGVkU2V0VGltZW91dCA9PT0gc2V0VGltZW91dCkge1xuICAgICAgICAvL25vcm1hbCBlbnZpcm9tZW50cyBpbiBzYW5lIHNpdHVhdGlvbnNcbiAgICAgICAgcmV0dXJuIHNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9XG4gICAgLy8gaWYgc2V0VGltZW91dCB3YXNuJ3QgYXZhaWxhYmxlIGJ1dCB3YXMgbGF0dGVyIGRlZmluZWRcbiAgICBpZiAoKGNhY2hlZFNldFRpbWVvdXQgPT09IGRlZmF1bHRTZXRUaW1vdXQgfHwgIWNhY2hlZFNldFRpbWVvdXQpICYmIHNldFRpbWVvdXQpIHtcbiAgICAgICAgY2FjaGVkU2V0VGltZW91dCA9IHNldFRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1biwgMCk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAgIC8vIHdoZW4gd2hlbiBzb21lYm9keSBoYXMgc2NyZXdlZCB3aXRoIHNldFRpbWVvdXQgYnV0IG5vIEkuRS4gbWFkZG5lc3NcbiAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQoZnVuLCAwKTtcbiAgICB9IGNhdGNoKGUpe1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgLy8gV2hlbiB3ZSBhcmUgaW4gSS5FLiBidXQgdGhlIHNjcmlwdCBoYXMgYmVlbiBldmFsZWQgc28gSS5FLiBkb2Vzbid0IHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkU2V0VGltZW91dC5jYWxsKG51bGwsIGZ1biwgMCk7XG4gICAgICAgIH0gY2F0Y2goZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvclxuICAgICAgICAgICAgcmV0dXJuIGNhY2hlZFNldFRpbWVvdXQuY2FsbCh0aGlzLCBmdW4sIDApO1xuICAgICAgICB9XG4gICAgfVxuXG5cbn1cbmZ1bmN0aW9uIHJ1bkNsZWFyVGltZW91dChtYXJrZXIpIHtcbiAgICBpZiAoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBjbGVhclRpbWVvdXQpIHtcbiAgICAgICAgLy9ub3JtYWwgZW52aXJvbWVudHMgaW4gc2FuZSBzaXR1YXRpb25zXG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgLy8gaWYgY2xlYXJUaW1lb3V0IHdhc24ndCBhdmFpbGFibGUgYnV0IHdhcyBsYXR0ZXIgZGVmaW5lZFxuICAgIGlmICgoY2FjaGVkQ2xlYXJUaW1lb3V0ID09PSBkZWZhdWx0Q2xlYXJUaW1lb3V0IHx8ICFjYWNoZWRDbGVhclRpbWVvdXQpICYmIGNsZWFyVGltZW91dCkge1xuICAgICAgICBjYWNoZWRDbGVhclRpbWVvdXQgPSBjbGVhclRpbWVvdXQ7XG4gICAgICAgIHJldHVybiBjbGVhclRpbWVvdXQobWFya2VyKTtcbiAgICB9XG4gICAgdHJ5IHtcbiAgICAgICAgLy8gd2hlbiB3aGVuIHNvbWVib2R5IGhhcyBzY3Jld2VkIHdpdGggc2V0VGltZW91dCBidXQgbm8gSS5FLiBtYWRkbmVzc1xuICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0KG1hcmtlcik7XG4gICAgfSBjYXRjaCAoZSl7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBXaGVuIHdlIGFyZSBpbiBJLkUuIGJ1dCB0aGUgc2NyaXB0IGhhcyBiZWVuIGV2YWxlZCBzbyBJLkUuIGRvZXNuJ3QgIHRydXN0IHRoZSBnbG9iYWwgb2JqZWN0IHdoZW4gY2FsbGVkIG5vcm1hbGx5XG4gICAgICAgICAgICByZXR1cm4gY2FjaGVkQ2xlYXJUaW1lb3V0LmNhbGwobnVsbCwgbWFya2VyKTtcbiAgICAgICAgfSBjYXRjaCAoZSl7XG4gICAgICAgICAgICAvLyBzYW1lIGFzIGFib3ZlIGJ1dCB3aGVuIGl0J3MgYSB2ZXJzaW9uIG9mIEkuRS4gdGhhdCBtdXN0IGhhdmUgdGhlIGdsb2JhbCBvYmplY3QgZm9yICd0aGlzJywgaG9wZnVsbHkgb3VyIGNvbnRleHQgY29ycmVjdCBvdGhlcndpc2UgaXQgd2lsbCB0aHJvdyBhIGdsb2JhbCBlcnJvci5cbiAgICAgICAgICAgIC8vIFNvbWUgdmVyc2lvbnMgb2YgSS5FLiBoYXZlIGRpZmZlcmVudCBydWxlcyBmb3IgY2xlYXJUaW1lb3V0IHZzIHNldFRpbWVvdXRcbiAgICAgICAgICAgIHJldHVybiBjYWNoZWRDbGVhclRpbWVvdXQuY2FsbCh0aGlzLCBtYXJrZXIpO1xuICAgICAgICB9XG4gICAgfVxuXG5cblxufVxudmFyIHF1ZXVlID0gW107XG52YXIgZHJhaW5pbmcgPSBmYWxzZTtcbnZhciBjdXJyZW50UXVldWU7XG52YXIgcXVldWVJbmRleCA9IC0xO1xuXG5mdW5jdGlvbiBjbGVhblVwTmV4dFRpY2soKSB7XG4gICAgaWYgKCFkcmFpbmluZyB8fCAhY3VycmVudFF1ZXVlKSB7XG4gICAgICAgIHJldHVybjtcbiAgICB9XG4gICAgZHJhaW5pbmcgPSBmYWxzZTtcbiAgICBpZiAoY3VycmVudFF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBxdWV1ZSA9IGN1cnJlbnRRdWV1ZS5jb25jYXQocXVldWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICB9XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCkge1xuICAgICAgICBkcmFpblF1ZXVlKCk7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBkcmFpblF1ZXVlKCkge1xuICAgIGlmIChkcmFpbmluZykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0aW1lb3V0ID0gcnVuVGltZW91dChjbGVhblVwTmV4dFRpY2spO1xuICAgIGRyYWluaW5nID0gdHJ1ZTtcblxuICAgIHZhciBsZW4gPSBxdWV1ZS5sZW5ndGg7XG4gICAgd2hpbGUobGVuKSB7XG4gICAgICAgIGN1cnJlbnRRdWV1ZSA9IHF1ZXVlO1xuICAgICAgICBxdWV1ZSA9IFtdO1xuICAgICAgICB3aGlsZSAoKytxdWV1ZUluZGV4IDwgbGVuKSB7XG4gICAgICAgICAgICBpZiAoY3VycmVudFF1ZXVlKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudFF1ZXVlW3F1ZXVlSW5kZXhdLnJ1bigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHF1ZXVlSW5kZXggPSAtMTtcbiAgICAgICAgbGVuID0gcXVldWUubGVuZ3RoO1xuICAgIH1cbiAgICBjdXJyZW50UXVldWUgPSBudWxsO1xuICAgIGRyYWluaW5nID0gZmFsc2U7XG4gICAgcnVuQ2xlYXJUaW1lb3V0KHRpbWVvdXQpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIG5leHRUaWNrKGZ1bikge1xuICAgIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKTtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHF1ZXVlLnB1c2gobmV3IEl0ZW0oZnVuLCBhcmdzKSk7XG4gICAgaWYgKHF1ZXVlLmxlbmd0aCA9PT0gMSAmJiAhZHJhaW5pbmcpIHtcbiAgICAgICAgcnVuVGltZW91dChkcmFpblF1ZXVlKTtcbiAgICB9XG59XG4vLyB2OCBsaWtlcyBwcmVkaWN0aWJsZSBvYmplY3RzXG5mdW5jdGlvbiBJdGVtKGZ1biwgYXJyYXkpIHtcbiAgICB0aGlzLmZ1biA9IGZ1bjtcbiAgICB0aGlzLmFycmF5ID0gYXJyYXk7XG59XG5JdGVtLnByb3RvdHlwZS5ydW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgdGhpcy5mdW4uYXBwbHkobnVsbCwgdGhpcy5hcnJheSk7XG59O1xuZXhwb3J0IHZhciB0aXRsZSA9ICdicm93c2VyJztcbmV4cG9ydCB2YXIgcGxhdGZvcm0gPSAnYnJvd3Nlcic7XG5leHBvcnQgdmFyIGJyb3dzZXIgPSB0cnVlO1xuZXhwb3J0IHZhciBlbnYgPSB7fTtcbmV4cG9ydCB2YXIgYXJndiA9IFtdO1xuZXhwb3J0IHZhciB2ZXJzaW9uID0gJyc7IC8vIGVtcHR5IHN0cmluZyB0byBhdm9pZCByZWdleHAgaXNzdWVzXG5leHBvcnQgdmFyIHZlcnNpb25zID0ge307XG5leHBvcnQgdmFyIHJlbGVhc2UgPSB7fTtcbmV4cG9ydCB2YXIgY29uZmlnID0ge307XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG5leHBvcnQgdmFyIG9uID0gbm9vcDtcbmV4cG9ydCB2YXIgYWRkTGlzdGVuZXIgPSBub29wO1xuZXhwb3J0IHZhciBvbmNlID0gbm9vcDtcbmV4cG9ydCB2YXIgb2ZmID0gbm9vcDtcbmV4cG9ydCB2YXIgcmVtb3ZlTGlzdGVuZXIgPSBub29wO1xuZXhwb3J0IHZhciByZW1vdmVBbGxMaXN0ZW5lcnMgPSBub29wO1xuZXhwb3J0IHZhciBlbWl0ID0gbm9vcDtcblxuZXhwb3J0IGZ1bmN0aW9uIGJpbmRpbmcobmFtZSkge1xuICAgIHRocm93IG5ldyBFcnJvcigncHJvY2Vzcy5iaW5kaW5nIGlzIG5vdCBzdXBwb3J0ZWQnKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGN3ZCAoKSB7IHJldHVybiAnLycgfVxuZXhwb3J0IGZ1bmN0aW9uIGNoZGlyIChkaXIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ3Byb2Nlc3MuY2hkaXIgaXMgbm90IHN1cHBvcnRlZCcpO1xufTtcbmV4cG9ydCBmdW5jdGlvbiB1bWFzaygpIHsgcmV0dXJuIDA7IH1cblxuLy8gZnJvbSBodHRwczovL2dpdGh1Yi5jb20va3VtYXZpcy9icm93c2VyLXByb2Nlc3MtaHJ0aW1lL2Jsb2IvbWFzdGVyL2luZGV4LmpzXG52YXIgcGVyZm9ybWFuY2UgPSBnbG9iYWwucGVyZm9ybWFuY2UgfHwge31cbnZhciBwZXJmb3JtYW5jZU5vdyA9XG4gIHBlcmZvcm1hbmNlLm5vdyAgICAgICAgfHxcbiAgcGVyZm9ybWFuY2UubW96Tm93ICAgICB8fFxuICBwZXJmb3JtYW5jZS5tc05vdyAgICAgIHx8XG4gIHBlcmZvcm1hbmNlLm9Ob3cgICAgICAgfHxcbiAgcGVyZm9ybWFuY2Uud2Via2l0Tm93ICB8fFxuICBmdW5jdGlvbigpeyByZXR1cm4gKG5ldyBEYXRlKCkpLmdldFRpbWUoKSB9XG5cbi8vIGdlbmVyYXRlIHRpbWVzdGFtcCBvciBkZWx0YVxuLy8gc2VlIGh0dHA6Ly9ub2RlanMub3JnL2FwaS9wcm9jZXNzLmh0bWwjcHJvY2Vzc19wcm9jZXNzX2hydGltZVxuZXhwb3J0IGZ1bmN0aW9uIGhydGltZShwcmV2aW91c1RpbWVzdGFtcCl7XG4gIHZhciBjbG9ja3RpbWUgPSBwZXJmb3JtYW5jZU5vdy5jYWxsKHBlcmZvcm1hbmNlKSoxZS0zXG4gIHZhciBzZWNvbmRzID0gTWF0aC5mbG9vcihjbG9ja3RpbWUpXG4gIHZhciBuYW5vc2Vjb25kcyA9IE1hdGguZmxvb3IoKGNsb2NrdGltZSUxKSoxZTkpXG4gIGlmIChwcmV2aW91c1RpbWVzdGFtcCkge1xuICAgIHNlY29uZHMgPSBzZWNvbmRzIC0gcHJldmlvdXNUaW1lc3RhbXBbMF1cbiAgICBuYW5vc2Vjb25kcyA9IG5hbm9zZWNvbmRzIC0gcHJldmlvdXNUaW1lc3RhbXBbMV1cbiAgICBpZiAobmFub3NlY29uZHM8MCkge1xuICAgICAgc2Vjb25kcy0tXG4gICAgICBuYW5vc2Vjb25kcyArPSAxZTlcbiAgICB9XG4gIH1cbiAgcmV0dXJuIFtzZWNvbmRzLG5hbm9zZWNvbmRzXVxufVxuXG52YXIgc3RhcnRUaW1lID0gbmV3IERhdGUoKTtcbmV4cG9ydCBmdW5jdGlvbiB1cHRpbWUoKSB7XG4gIHZhciBjdXJyZW50VGltZSA9IG5ldyBEYXRlKCk7XG4gIHZhciBkaWYgPSBjdXJyZW50VGltZSAtIHN0YXJ0VGltZTtcbiAgcmV0dXJuIGRpZiAvIDEwMDA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgbmV4dFRpY2s6IG5leHRUaWNrLFxuICB0aXRsZTogdGl0bGUsXG4gIGJyb3dzZXI6IGJyb3dzZXIsXG4gIGVudjogZW52LFxuICBhcmd2OiBhcmd2LFxuICB2ZXJzaW9uOiB2ZXJzaW9uLFxuICB2ZXJzaW9uczogdmVyc2lvbnMsXG4gIG9uOiBvbixcbiAgYWRkTGlzdGVuZXI6IGFkZExpc3RlbmVyLFxuICBvbmNlOiBvbmNlLFxuICBvZmY6IG9mZixcbiAgcmVtb3ZlTGlzdGVuZXI6IHJlbW92ZUxpc3RlbmVyLFxuICByZW1vdmVBbGxMaXN0ZW5lcnM6IHJlbW92ZUFsbExpc3RlbmVycyxcbiAgZW1pdDogZW1pdCxcbiAgYmluZGluZzogYmluZGluZyxcbiAgY3dkOiBjd2QsXG4gIGNoZGlyOiBjaGRpcixcbiAgdW1hc2s6IHVtYXNrLFxuICBocnRpbWU6IGhydGltZSxcbiAgcGxhdGZvcm06IHBsYXRmb3JtLFxuICByZWxlYXNlOiByZWxlYXNlLFxuICBjb25maWc6IGNvbmZpZyxcbiAgdXB0aW1lOiB1cHRpbWVcbn07XG4iLCJleHBvcnQgdmFyIGhhc0ZldGNoID0gaXNGdW5jdGlvbihnbG9iYWwuZmV0Y2gpICYmIGlzRnVuY3Rpb24oZ2xvYmFsLlJlYWRhYmxlU3RyZWFtKVxuXG52YXIgX2Jsb2JDb25zdHJ1Y3RvcjtcbmV4cG9ydCBmdW5jdGlvbiBibG9iQ29uc3RydWN0b3IoKSB7XG4gIGlmICh0eXBlb2YgX2Jsb2JDb25zdHJ1Y3RvciAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICByZXR1cm4gX2Jsb2JDb25zdHJ1Y3RvcjtcbiAgfVxuICB0cnkge1xuICAgIG5ldyBnbG9iYWwuQmxvYihbbmV3IEFycmF5QnVmZmVyKDEpXSlcbiAgICBfYmxvYkNvbnN0cnVjdG9yID0gdHJ1ZVxuICB9IGNhdGNoIChlKSB7XG4gICAgX2Jsb2JDb25zdHJ1Y3RvciA9IGZhbHNlXG4gIH1cbiAgcmV0dXJuIF9ibG9iQ29uc3RydWN0b3Jcbn1cbnZhciB4aHI7XG5cbmZ1bmN0aW9uIGNoZWNrVHlwZVN1cHBvcnQodHlwZSkge1xuICBpZiAoIXhocikge1xuICAgIHhociA9IG5ldyBnbG9iYWwuWE1MSHR0cFJlcXVlc3QoKVxuICAgIC8vIElmIGxvY2F0aW9uLmhvc3QgaXMgZW1wdHksIGUuZy4gaWYgdGhpcyBwYWdlL3dvcmtlciB3YXMgbG9hZGVkXG4gICAgLy8gZnJvbSBhIEJsb2IsIHRoZW4gdXNlIGV4YW1wbGUuY29tIHRvIGF2b2lkIGFuIGVycm9yXG4gICAgeGhyLm9wZW4oJ0dFVCcsIGdsb2JhbC5sb2NhdGlvbi5ob3N0ID8gJy8nIDogJ2h0dHBzOi8vZXhhbXBsZS5jb20nKVxuICB9XG4gIHRyeSB7XG4gICAgeGhyLnJlc3BvbnNlVHlwZSA9IHR5cGVcbiAgICByZXR1cm4geGhyLnJlc3BvbnNlVHlwZSA9PT0gdHlwZVxuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxufVxuXG4vLyBGb3Igc29tZSBzdHJhbmdlIHJlYXNvbiwgU2FmYXJpIDcuMCByZXBvcnRzIHR5cGVvZiBnbG9iYWwuQXJyYXlCdWZmZXIgPT09ICdvYmplY3QnLlxuLy8gU2FmYXJpIDcuMSBhcHBlYXJzIHRvIGhhdmUgZml4ZWQgdGhpcyBidWcuXG52YXIgaGF2ZUFycmF5QnVmZmVyID0gdHlwZW9mIGdsb2JhbC5BcnJheUJ1ZmZlciAhPT0gJ3VuZGVmaW5lZCdcbnZhciBoYXZlU2xpY2UgPSBoYXZlQXJyYXlCdWZmZXIgJiYgaXNGdW5jdGlvbihnbG9iYWwuQXJyYXlCdWZmZXIucHJvdG90eXBlLnNsaWNlKVxuXG5leHBvcnQgdmFyIGFycmF5YnVmZmVyID0gaGF2ZUFycmF5QnVmZmVyICYmIGNoZWNrVHlwZVN1cHBvcnQoJ2FycmF5YnVmZmVyJylcbiAgLy8gVGhlc2UgbmV4dCB0d28gdGVzdHMgdW5hdm9pZGFibHkgc2hvdyB3YXJuaW5ncyBpbiBDaHJvbWUuIFNpbmNlIGZldGNoIHdpbGwgYWx3YXlzXG4gIC8vIGJlIHVzZWQgaWYgaXQncyBhdmFpbGFibGUsIGp1c3QgcmV0dXJuIGZhbHNlIGZvciB0aGVzZSB0byBhdm9pZCB0aGUgd2FybmluZ3MuXG5leHBvcnQgdmFyIG1zc3RyZWFtID0gIWhhc0ZldGNoICYmIGhhdmVTbGljZSAmJiBjaGVja1R5cGVTdXBwb3J0KCdtcy1zdHJlYW0nKVxuZXhwb3J0IHZhciBtb3pjaHVua2VkYXJyYXlidWZmZXIgPSAhaGFzRmV0Y2ggJiYgaGF2ZUFycmF5QnVmZmVyICYmXG4gIGNoZWNrVHlwZVN1cHBvcnQoJ21vei1jaHVua2VkLWFycmF5YnVmZmVyJylcbmV4cG9ydCB2YXIgb3ZlcnJpZGVNaW1lVHlwZSA9IGlzRnVuY3Rpb24oeGhyLm92ZXJyaWRlTWltZVR5cGUpXG5leHBvcnQgdmFyIHZiQXJyYXkgPSBpc0Z1bmN0aW9uKGdsb2JhbC5WQkFycmF5KVxuXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbidcbn1cblxueGhyID0gbnVsbCAvLyBIZWxwIGdjXG4iLCJcbnZhciBpbmhlcml0cztcbmlmICh0eXBlb2YgT2JqZWN0LmNyZWF0ZSA9PT0gJ2Z1bmN0aW9uJyl7XG4gIGluaGVyaXRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgLy8gaW1wbGVtZW50YXRpb24gZnJvbSBzdGFuZGFyZCBub2RlLmpzICd1dGlsJyBtb2R1bGVcbiAgICBjdG9yLnN1cGVyXyA9IHN1cGVyQ3RvclxuICAgIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgICB2YWx1ZTogY3RvcixcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIHdyaXRhYmxlOiB0cnVlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcbn0gZWxzZSB7XG4gIGluaGVyaXRzID0gZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yKSB7XG4gICAgY3Rvci5zdXBlcl8gPSBzdXBlckN0b3JcbiAgICB2YXIgVGVtcEN0b3IgPSBmdW5jdGlvbiAoKSB7fVxuICAgIFRlbXBDdG9yLnByb3RvdHlwZSA9IHN1cGVyQ3Rvci5wcm90b3R5cGVcbiAgICBjdG9yLnByb3RvdHlwZSA9IG5ldyBUZW1wQ3RvcigpXG4gICAgY3Rvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBjdG9yXG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IGluaGVyaXRzO1xuIiwiLy8gQ29weXJpZ2h0IEpveWVudCwgSW5jLiBhbmQgb3RoZXIgTm9kZSBjb250cmlidXRvcnMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGFcbi8vIGNvcHkgb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGVcbi8vIFwiU29mdHdhcmVcIiksIHRvIGRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xuLy8gd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLFxuLy8gZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdFxuLy8gcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpcyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlXG4vLyBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZFxuLy8gaW4gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTU1xuLy8gT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRlxuLy8gTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTlxuLy8gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sXG4vLyBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1Jcbi8vIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEVcbi8vIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5pbXBvcnQgcHJvY2VzcyBmcm9tICdwcm9jZXNzJztcbnZhciBmb3JtYXRSZWdFeHAgPSAvJVtzZGolXS9nO1xuZXhwb3J0IGZ1bmN0aW9uIGZvcm1hdChmKSB7XG4gIGlmICghaXNTdHJpbmcoZikpIHtcbiAgICB2YXIgb2JqZWN0cyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBvYmplY3RzLnB1c2goaW5zcGVjdChhcmd1bWVudHNbaV0pKTtcbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdHMuam9pbignICcpO1xuICB9XG5cbiAgdmFyIGkgPSAxO1xuICB2YXIgYXJncyA9IGFyZ3VtZW50cztcbiAgdmFyIGxlbiA9IGFyZ3MubGVuZ3RoO1xuICB2YXIgc3RyID0gU3RyaW5nKGYpLnJlcGxhY2UoZm9ybWF0UmVnRXhwLCBmdW5jdGlvbih4KSB7XG4gICAgaWYgKHggPT09ICclJScpIHJldHVybiAnJSc7XG4gICAgaWYgKGkgPj0gbGVuKSByZXR1cm4geDtcbiAgICBzd2l0Y2ggKHgpIHtcbiAgICAgIGNhc2UgJyVzJzogcmV0dXJuIFN0cmluZyhhcmdzW2krK10pO1xuICAgICAgY2FzZSAnJWQnOiByZXR1cm4gTnVtYmVyKGFyZ3NbaSsrXSk7XG4gICAgICBjYXNlICclaic6XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGFyZ3NbaSsrXSk7XG4gICAgICAgIH0gY2F0Y2ggKF8pIHtcbiAgICAgICAgICByZXR1cm4gJ1tDaXJjdWxhcl0nO1xuICAgICAgICB9XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4geDtcbiAgICB9XG4gIH0pO1xuICBmb3IgKHZhciB4ID0gYXJnc1tpXTsgaSA8IGxlbjsgeCA9IGFyZ3NbKytpXSkge1xuICAgIGlmIChpc051bGwoeCkgfHwgIWlzT2JqZWN0KHgpKSB7XG4gICAgICBzdHIgKz0gJyAnICsgeDtcbiAgICB9IGVsc2Uge1xuICAgICAgc3RyICs9ICcgJyArIGluc3BlY3QoeCk7XG4gICAgfVxuICB9XG4gIHJldHVybiBzdHI7XG59O1xuXG5cbi8vIE1hcmsgdGhhdCBhIG1ldGhvZCBzaG91bGQgbm90IGJlIHVzZWQuXG4vLyBSZXR1cm5zIGEgbW9kaWZpZWQgZnVuY3Rpb24gd2hpY2ggd2FybnMgb25jZSBieSBkZWZhdWx0LlxuLy8gSWYgLS1uby1kZXByZWNhdGlvbiBpcyBzZXQsIHRoZW4gaXQgaXMgYSBuby1vcC5cbmV4cG9ydCBmdW5jdGlvbiBkZXByZWNhdGUoZm4sIG1zZykge1xuICAvLyBBbGxvdyBmb3IgZGVwcmVjYXRpbmcgdGhpbmdzIGluIHRoZSBwcm9jZXNzIG9mIHN0YXJ0aW5nIHVwLlxuICBpZiAoaXNVbmRlZmluZWQoZ2xvYmFsLnByb2Nlc3MpKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uKCkge1xuICAgICAgcmV0dXJuIGRlcHJlY2F0ZShmbiwgbXNnKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgIH07XG4gIH1cblxuICBpZiAocHJvY2Vzcy5ub0RlcHJlY2F0aW9uID09PSB0cnVlKSB7XG4gICAgcmV0dXJuIGZuO1xuICB9XG5cbiAgdmFyIHdhcm5lZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBkZXByZWNhdGVkKCkge1xuICAgIGlmICghd2FybmVkKSB7XG4gICAgICBpZiAocHJvY2Vzcy50aHJvd0RlcHJlY2F0aW9uKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtc2cpO1xuICAgICAgfSBlbHNlIGlmIChwcm9jZXNzLnRyYWNlRGVwcmVjYXRpb24pIHtcbiAgICAgICAgY29uc29sZS50cmFjZShtc2cpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY29uc29sZS5lcnJvcihtc2cpO1xuICAgICAgfVxuICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICB9XG4gICAgcmV0dXJuIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gIH1cblxuICByZXR1cm4gZGVwcmVjYXRlZDtcbn07XG5cblxudmFyIGRlYnVncyA9IHt9O1xudmFyIGRlYnVnRW52aXJvbjtcbmV4cG9ydCBmdW5jdGlvbiBkZWJ1Z2xvZyhzZXQpIHtcbiAgaWYgKGlzVW5kZWZpbmVkKGRlYnVnRW52aXJvbikpXG4gICAgZGVidWdFbnZpcm9uID0gcHJvY2Vzcy5lbnYuTk9ERV9ERUJVRyB8fCAnJztcbiAgc2V0ID0gc2V0LnRvVXBwZXJDYXNlKCk7XG4gIGlmICghZGVidWdzW3NldF0pIHtcbiAgICBpZiAobmV3IFJlZ0V4cCgnXFxcXGInICsgc2V0ICsgJ1xcXFxiJywgJ2knKS50ZXN0KGRlYnVnRW52aXJvbikpIHtcbiAgICAgIHZhciBwaWQgPSAwO1xuICAgICAgZGVidWdzW3NldF0gPSBmdW5jdGlvbigpIHtcbiAgICAgICAgdmFyIG1zZyA9IGZvcm1hdC5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgICBjb25zb2xlLmVycm9yKCclcyAlZDogJXMnLCBzZXQsIHBpZCwgbXNnKTtcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlYnVnc1tzZXRdID0gZnVuY3Rpb24oKSB7fTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRlYnVnc1tzZXRdO1xufTtcblxuXG4vKipcbiAqIEVjaG9zIHRoZSB2YWx1ZSBvZiBhIHZhbHVlLiBUcnlzIHRvIHByaW50IHRoZSB2YWx1ZSBvdXRcbiAqIGluIHRoZSBiZXN0IHdheSBwb3NzaWJsZSBnaXZlbiB0aGUgZGlmZmVyZW50IHR5cGVzLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmogVGhlIG9iamVjdCB0byBwcmludCBvdXQuXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0cyBPcHRpb25hbCBvcHRpb25zIG9iamVjdCB0aGF0IGFsdGVycyB0aGUgb3V0cHV0LlxuICovXG4vKiBsZWdhY3k6IG9iaiwgc2hvd0hpZGRlbiwgZGVwdGgsIGNvbG9ycyovXG5leHBvcnQgZnVuY3Rpb24gaW5zcGVjdChvYmosIG9wdHMpIHtcbiAgLy8gZGVmYXVsdCBvcHRpb25zXG4gIHZhciBjdHggPSB7XG4gICAgc2VlbjogW10sXG4gICAgc3R5bGl6ZTogc3R5bGl6ZU5vQ29sb3JcbiAgfTtcbiAgLy8gbGVnYWN5Li4uXG4gIGlmIChhcmd1bWVudHMubGVuZ3RoID49IDMpIGN0eC5kZXB0aCA9IGFyZ3VtZW50c1syXTtcbiAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPj0gNCkgY3R4LmNvbG9ycyA9IGFyZ3VtZW50c1szXTtcbiAgaWYgKGlzQm9vbGVhbihvcHRzKSkge1xuICAgIC8vIGxlZ2FjeS4uLlxuICAgIGN0eC5zaG93SGlkZGVuID0gb3B0cztcbiAgfSBlbHNlIGlmIChvcHRzKSB7XG4gICAgLy8gZ290IGFuIFwib3B0aW9uc1wiIG9iamVjdFxuICAgIF9leHRlbmQoY3R4LCBvcHRzKTtcbiAgfVxuICAvLyBzZXQgZGVmYXVsdCBvcHRpb25zXG4gIGlmIChpc1VuZGVmaW5lZChjdHguc2hvd0hpZGRlbikpIGN0eC5zaG93SGlkZGVuID0gZmFsc2U7XG4gIGlmIChpc1VuZGVmaW5lZChjdHguZGVwdGgpKSBjdHguZGVwdGggPSAyO1xuICBpZiAoaXNVbmRlZmluZWQoY3R4LmNvbG9ycykpIGN0eC5jb2xvcnMgPSBmYWxzZTtcbiAgaWYgKGlzVW5kZWZpbmVkKGN0eC5jdXN0b21JbnNwZWN0KSkgY3R4LmN1c3RvbUluc3BlY3QgPSB0cnVlO1xuICBpZiAoY3R4LmNvbG9ycykgY3R4LnN0eWxpemUgPSBzdHlsaXplV2l0aENvbG9yO1xuICByZXR1cm4gZm9ybWF0VmFsdWUoY3R4LCBvYmosIGN0eC5kZXB0aCk7XG59XG5cbi8vIGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQU5TSV9lc2NhcGVfY29kZSNncmFwaGljc1xuaW5zcGVjdC5jb2xvcnMgPSB7XG4gICdib2xkJyA6IFsxLCAyMl0sXG4gICdpdGFsaWMnIDogWzMsIDIzXSxcbiAgJ3VuZGVybGluZScgOiBbNCwgMjRdLFxuICAnaW52ZXJzZScgOiBbNywgMjddLFxuICAnd2hpdGUnIDogWzM3LCAzOV0sXG4gICdncmV5JyA6IFs5MCwgMzldLFxuICAnYmxhY2snIDogWzMwLCAzOV0sXG4gICdibHVlJyA6IFszNCwgMzldLFxuICAnY3lhbicgOiBbMzYsIDM5XSxcbiAgJ2dyZWVuJyA6IFszMiwgMzldLFxuICAnbWFnZW50YScgOiBbMzUsIDM5XSxcbiAgJ3JlZCcgOiBbMzEsIDM5XSxcbiAgJ3llbGxvdycgOiBbMzMsIDM5XVxufTtcblxuLy8gRG9uJ3QgdXNlICdibHVlJyBub3QgdmlzaWJsZSBvbiBjbWQuZXhlXG5pbnNwZWN0LnN0eWxlcyA9IHtcbiAgJ3NwZWNpYWwnOiAnY3lhbicsXG4gICdudW1iZXInOiAneWVsbG93JyxcbiAgJ2Jvb2xlYW4nOiAneWVsbG93JyxcbiAgJ3VuZGVmaW5lZCc6ICdncmV5JyxcbiAgJ251bGwnOiAnYm9sZCcsXG4gICdzdHJpbmcnOiAnZ3JlZW4nLFxuICAnZGF0ZSc6ICdtYWdlbnRhJyxcbiAgLy8gXCJuYW1lXCI6IGludGVudGlvbmFsbHkgbm90IHN0eWxpbmdcbiAgJ3JlZ2V4cCc6ICdyZWQnXG59O1xuXG5cbmZ1bmN0aW9uIHN0eWxpemVXaXRoQ29sb3Ioc3RyLCBzdHlsZVR5cGUpIHtcbiAgdmFyIHN0eWxlID0gaW5zcGVjdC5zdHlsZXNbc3R5bGVUeXBlXTtcblxuICBpZiAoc3R5bGUpIHtcbiAgICByZXR1cm4gJ1xcdTAwMWJbJyArIGluc3BlY3QuY29sb3JzW3N0eWxlXVswXSArICdtJyArIHN0ciArXG4gICAgICAgICAgICdcXHUwMDFiWycgKyBpbnNwZWN0LmNvbG9yc1tzdHlsZV1bMV0gKyAnbSc7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0cjtcbiAgfVxufVxuXG5cbmZ1bmN0aW9uIHN0eWxpemVOb0NvbG9yKHN0ciwgc3R5bGVUeXBlKSB7XG4gIHJldHVybiBzdHI7XG59XG5cblxuZnVuY3Rpb24gYXJyYXlUb0hhc2goYXJyYXkpIHtcbiAgdmFyIGhhc2ggPSB7fTtcblxuICBhcnJheS5mb3JFYWNoKGZ1bmN0aW9uKHZhbCwgaWR4KSB7XG4gICAgaGFzaFt2YWxdID0gdHJ1ZTtcbiAgfSk7XG5cbiAgcmV0dXJuIGhhc2g7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0VmFsdWUoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzKSB7XG4gIC8vIFByb3ZpZGUgYSBob29rIGZvciB1c2VyLXNwZWNpZmllZCBpbnNwZWN0IGZ1bmN0aW9ucy5cbiAgLy8gQ2hlY2sgdGhhdCB2YWx1ZSBpcyBhbiBvYmplY3Qgd2l0aCBhbiBpbnNwZWN0IGZ1bmN0aW9uIG9uIGl0XG4gIGlmIChjdHguY3VzdG9tSW5zcGVjdCAmJlxuICAgICAgdmFsdWUgJiZcbiAgICAgIGlzRnVuY3Rpb24odmFsdWUuaW5zcGVjdCkgJiZcbiAgICAgIC8vIEZpbHRlciBvdXQgdGhlIHV0aWwgbW9kdWxlLCBpdCdzIGluc3BlY3QgZnVuY3Rpb24gaXMgc3BlY2lhbFxuICAgICAgdmFsdWUuaW5zcGVjdCAhPT0gaW5zcGVjdCAmJlxuICAgICAgLy8gQWxzbyBmaWx0ZXIgb3V0IGFueSBwcm90b3R5cGUgb2JqZWN0cyB1c2luZyB0aGUgY2lyY3VsYXIgY2hlY2suXG4gICAgICAhKHZhbHVlLmNvbnN0cnVjdG9yICYmIHZhbHVlLmNvbnN0cnVjdG9yLnByb3RvdHlwZSA9PT0gdmFsdWUpKSB7XG4gICAgdmFyIHJldCA9IHZhbHVlLmluc3BlY3QocmVjdXJzZVRpbWVzLCBjdHgpO1xuICAgIGlmICghaXNTdHJpbmcocmV0KSkge1xuICAgICAgcmV0ID0gZm9ybWF0VmFsdWUoY3R4LCByZXQsIHJlY3Vyc2VUaW1lcyk7XG4gICAgfVxuICAgIHJldHVybiByZXQ7XG4gIH1cblxuICAvLyBQcmltaXRpdmUgdHlwZXMgY2Fubm90IGhhdmUgcHJvcGVydGllc1xuICB2YXIgcHJpbWl0aXZlID0gZm9ybWF0UHJpbWl0aXZlKGN0eCwgdmFsdWUpO1xuICBpZiAocHJpbWl0aXZlKSB7XG4gICAgcmV0dXJuIHByaW1pdGl2ZTtcbiAgfVxuXG4gIC8vIExvb2sgdXAgdGhlIGtleXMgb2YgdGhlIG9iamVjdC5cbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyh2YWx1ZSk7XG4gIHZhciB2aXNpYmxlS2V5cyA9IGFycmF5VG9IYXNoKGtleXMpO1xuXG4gIGlmIChjdHguc2hvd0hpZGRlbikge1xuICAgIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh2YWx1ZSk7XG4gIH1cblxuICAvLyBJRSBkb2Vzbid0IG1ha2UgZXJyb3IgZmllbGRzIG5vbi1lbnVtZXJhYmxlXG4gIC8vIGh0dHA6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9pZS9kd3c1MnNidCh2PXZzLjk0KS5hc3B4XG4gIGlmIChpc0Vycm9yKHZhbHVlKVxuICAgICAgJiYgKGtleXMuaW5kZXhPZignbWVzc2FnZScpID49IDAgfHwga2V5cy5pbmRleE9mKCdkZXNjcmlwdGlvbicpID49IDApKSB7XG4gICAgcmV0dXJuIGZvcm1hdEVycm9yKHZhbHVlKTtcbiAgfVxuXG4gIC8vIFNvbWUgdHlwZSBvZiBvYmplY3Qgd2l0aG91dCBwcm9wZXJ0aWVzIGNhbiBiZSBzaG9ydGN1dHRlZC5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwKSB7XG4gICAgaWYgKGlzRnVuY3Rpb24odmFsdWUpKSB7XG4gICAgICB2YXIgbmFtZSA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKCdbRnVuY3Rpb24nICsgbmFtZSArICddJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gICAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGN0eC5zdHlsaXplKFJlZ0V4cC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSksICdyZWdleHAnKTtcbiAgICB9XG4gICAgaWYgKGlzRGF0ZSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShEYXRlLnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKSwgJ2RhdGUnKTtcbiAgICB9XG4gICAgaWYgKGlzRXJyb3IodmFsdWUpKSB7XG4gICAgICByZXR1cm4gZm9ybWF0RXJyb3IodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBiYXNlID0gJycsIGFycmF5ID0gZmFsc2UsIGJyYWNlcyA9IFsneycsICd9J107XG5cbiAgLy8gTWFrZSBBcnJheSBzYXkgdGhhdCB0aGV5IGFyZSBBcnJheVxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICBhcnJheSA9IHRydWU7XG4gICAgYnJhY2VzID0gWydbJywgJ10nXTtcbiAgfVxuXG4gIC8vIE1ha2UgZnVuY3Rpb25zIHNheSB0aGF0IHRoZXkgYXJlIGZ1bmN0aW9uc1xuICBpZiAoaXNGdW5jdGlvbih2YWx1ZSkpIHtcbiAgICB2YXIgbiA9IHZhbHVlLm5hbWUgPyAnOiAnICsgdmFsdWUubmFtZSA6ICcnO1xuICAgIGJhc2UgPSAnIFtGdW5jdGlvbicgKyBuICsgJ10nO1xuICB9XG5cbiAgLy8gTWFrZSBSZWdFeHBzIHNheSB0aGF0IHRoZXkgYXJlIFJlZ0V4cHNcbiAgaWYgKGlzUmVnRXhwKHZhbHVlKSkge1xuICAgIGJhc2UgPSAnICcgKyBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBkYXRlcyB3aXRoIHByb3BlcnRpZXMgZmlyc3Qgc2F5IHRoZSBkYXRlXG4gIGlmIChpc0RhdGUodmFsdWUpKSB7XG4gICAgYmFzZSA9ICcgJyArIERhdGUucHJvdG90eXBlLnRvVVRDU3RyaW5nLmNhbGwodmFsdWUpO1xuICB9XG5cbiAgLy8gTWFrZSBlcnJvciB3aXRoIG1lc3NhZ2UgZmlyc3Qgc2F5IHRoZSBlcnJvclxuICBpZiAoaXNFcnJvcih2YWx1ZSkpIHtcbiAgICBiYXNlID0gJyAnICsgZm9ybWF0RXJyb3IodmFsdWUpO1xuICB9XG5cbiAgaWYgKGtleXMubGVuZ3RoID09PSAwICYmICghYXJyYXkgfHwgdmFsdWUubGVuZ3RoID09IDApKSB7XG4gICAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyBicmFjZXNbMV07XG4gIH1cblxuICBpZiAocmVjdXJzZVRpbWVzIDwgMCkge1xuICAgIGlmIChpc1JlZ0V4cCh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZShSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLCAncmVnZXhwJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBjdHguc3R5bGl6ZSgnW09iamVjdF0nLCAnc3BlY2lhbCcpO1xuICAgIH1cbiAgfVxuXG4gIGN0eC5zZWVuLnB1c2godmFsdWUpO1xuXG4gIHZhciBvdXRwdXQ7XG4gIGlmIChhcnJheSkge1xuICAgIG91dHB1dCA9IGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpO1xuICB9IGVsc2Uge1xuICAgIG91dHB1dCA9IGtleXMubWFwKGZ1bmN0aW9uKGtleSkge1xuICAgICAgcmV0dXJuIGZvcm1hdFByb3BlcnR5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleSwgYXJyYXkpO1xuICAgIH0pO1xuICB9XG5cbiAgY3R4LnNlZW4ucG9wKCk7XG5cbiAgcmV0dXJuIHJlZHVjZVRvU2luZ2xlU3RyaW5nKG91dHB1dCwgYmFzZSwgYnJhY2VzKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRQcmltaXRpdmUoY3R4LCB2YWx1ZSkge1xuICBpZiAoaXNVbmRlZmluZWQodmFsdWUpKVxuICAgIHJldHVybiBjdHguc3R5bGl6ZSgndW5kZWZpbmVkJywgJ3VuZGVmaW5lZCcpO1xuICBpZiAoaXNTdHJpbmcodmFsdWUpKSB7XG4gICAgdmFyIHNpbXBsZSA9ICdcXCcnICsgSlNPTi5zdHJpbmdpZnkodmFsdWUpLnJlcGxhY2UoL15cInxcIiQvZywgJycpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAucmVwbGFjZSgvXFxcXFwiL2csICdcIicpICsgJ1xcJyc7XG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKHNpbXBsZSwgJ3N0cmluZycpO1xuICB9XG4gIGlmIChpc051bWJlcih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdudW1iZXInKTtcbiAgaWYgKGlzQm9vbGVhbih2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCcnICsgdmFsdWUsICdib29sZWFuJyk7XG4gIC8vIEZvciBzb21lIHJlYXNvbiB0eXBlb2YgbnVsbCBpcyBcIm9iamVjdFwiLCBzbyBzcGVjaWFsIGNhc2UgaGVyZS5cbiAgaWYgKGlzTnVsbCh2YWx1ZSkpXG4gICAgcmV0dXJuIGN0eC5zdHlsaXplKCdudWxsJywgJ251bGwnKTtcbn1cblxuXG5mdW5jdGlvbiBmb3JtYXRFcnJvcih2YWx1ZSkge1xuICByZXR1cm4gJ1snICsgRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpICsgJ10nO1xufVxuXG5cbmZ1bmN0aW9uIGZvcm1hdEFycmF5KGN0eCwgdmFsdWUsIHJlY3Vyc2VUaW1lcywgdmlzaWJsZUtleXMsIGtleXMpIHtcbiAgdmFyIG91dHB1dCA9IFtdO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7ICsraSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eSh2YWx1ZSwgU3RyaW5nKGkpKSkge1xuICAgICAgb3V0cHV0LnB1c2goZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cyxcbiAgICAgICAgICBTdHJpbmcoaSksIHRydWUpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3V0cHV0LnB1c2goJycpO1xuICAgIH1cbiAgfVxuICBrZXlzLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKCFrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICBvdXRwdXQucHVzaChmb3JtYXRQcm9wZXJ0eShjdHgsIHZhbHVlLCByZWN1cnNlVGltZXMsIHZpc2libGVLZXlzLFxuICAgICAgICAgIGtleSwgdHJ1ZSkpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBvdXRwdXQ7XG59XG5cblxuZnVuY3Rpb24gZm9ybWF0UHJvcGVydHkoY3R4LCB2YWx1ZSwgcmVjdXJzZVRpbWVzLCB2aXNpYmxlS2V5cywga2V5LCBhcnJheSkge1xuICB2YXIgbmFtZSwgc3RyLCBkZXNjO1xuICBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih2YWx1ZSwga2V5KSB8fCB7IHZhbHVlOiB2YWx1ZVtrZXldIH07XG4gIGlmIChkZXNjLmdldCkge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tHZXR0ZXIvU2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0ciA9IGN0eC5zdHlsaXplKCdbR2V0dGVyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChkZXNjLnNldCkge1xuICAgICAgc3RyID0gY3R4LnN0eWxpemUoJ1tTZXR0ZXJdJywgJ3NwZWNpYWwnKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFoYXNPd25Qcm9wZXJ0eSh2aXNpYmxlS2V5cywga2V5KSkge1xuICAgIG5hbWUgPSAnWycgKyBrZXkgKyAnXSc7XG4gIH1cbiAgaWYgKCFzdHIpIHtcbiAgICBpZiAoY3R4LnNlZW4uaW5kZXhPZihkZXNjLnZhbHVlKSA8IDApIHtcbiAgICAgIGlmIChpc051bGwocmVjdXJzZVRpbWVzKSkge1xuICAgICAgICBzdHIgPSBmb3JtYXRWYWx1ZShjdHgsIGRlc2MudmFsdWUsIG51bGwpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgc3RyID0gZm9ybWF0VmFsdWUoY3R4LCBkZXNjLnZhbHVlLCByZWN1cnNlVGltZXMgLSAxKTtcbiAgICAgIH1cbiAgICAgIGlmIChzdHIuaW5kZXhPZignXFxuJykgPiAtMSkge1xuICAgICAgICBpZiAoYXJyYXkpIHtcbiAgICAgICAgICBzdHIgPSBzdHIuc3BsaXQoJ1xcbicpLm1hcChmdW5jdGlvbihsaW5lKSB7XG4gICAgICAgICAgICByZXR1cm4gJyAgJyArIGxpbmU7XG4gICAgICAgICAgfSkuam9pbignXFxuJykuc3Vic3RyKDIpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0ciA9ICdcXG4nICsgc3RyLnNwbGl0KCdcXG4nKS5tYXAoZnVuY3Rpb24obGluZSkge1xuICAgICAgICAgICAgcmV0dXJuICcgICAnICsgbGluZTtcbiAgICAgICAgICB9KS5qb2luKCdcXG4nKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBzdHIgPSBjdHguc3R5bGl6ZSgnW0NpcmN1bGFyXScsICdzcGVjaWFsJyk7XG4gICAgfVxuICB9XG4gIGlmIChpc1VuZGVmaW5lZChuYW1lKSkge1xuICAgIGlmIChhcnJheSAmJiBrZXkubWF0Y2goL15cXGQrJC8pKSB7XG4gICAgICByZXR1cm4gc3RyO1xuICAgIH1cbiAgICBuYW1lID0gSlNPTi5zdHJpbmdpZnkoJycgKyBrZXkpO1xuICAgIGlmIChuYW1lLm1hdGNoKC9eXCIoW2EtekEtWl9dW2EtekEtWl8wLTldKilcIiQvKSkge1xuICAgICAgbmFtZSA9IG5hbWUuc3Vic3RyKDEsIG5hbWUubGVuZ3RoIC0gMik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ25hbWUnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZSgvJy9nLCBcIlxcXFwnXCIpXG4gICAgICAgICAgICAgICAgIC5yZXBsYWNlKC9cXFxcXCIvZywgJ1wiJylcbiAgICAgICAgICAgICAgICAgLnJlcGxhY2UoLyheXCJ8XCIkKS9nLCBcIidcIik7XG4gICAgICBuYW1lID0gY3R4LnN0eWxpemUobmFtZSwgJ3N0cmluZycpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBuYW1lICsgJzogJyArIHN0cjtcbn1cblxuXG5mdW5jdGlvbiByZWR1Y2VUb1NpbmdsZVN0cmluZyhvdXRwdXQsIGJhc2UsIGJyYWNlcykge1xuICB2YXIgbnVtTGluZXNFc3QgPSAwO1xuICB2YXIgbGVuZ3RoID0gb3V0cHV0LnJlZHVjZShmdW5jdGlvbihwcmV2LCBjdXIpIHtcbiAgICBudW1MaW5lc0VzdCsrO1xuICAgIGlmIChjdXIuaW5kZXhPZignXFxuJykgPj0gMCkgbnVtTGluZXNFc3QrKztcbiAgICByZXR1cm4gcHJldiArIGN1ci5yZXBsYWNlKC9cXHUwMDFiXFxbXFxkXFxkP20vZywgJycpLmxlbmd0aCArIDE7XG4gIH0sIDApO1xuXG4gIGlmIChsZW5ndGggPiA2MCkge1xuICAgIHJldHVybiBicmFjZXNbMF0gK1xuICAgICAgICAgICAoYmFzZSA9PT0gJycgPyAnJyA6IGJhc2UgKyAnXFxuICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgb3V0cHV0LmpvaW4oJyxcXG4gICcpICtcbiAgICAgICAgICAgJyAnICtcbiAgICAgICAgICAgYnJhY2VzWzFdO1xuICB9XG5cbiAgcmV0dXJuIGJyYWNlc1swXSArIGJhc2UgKyAnICcgKyBvdXRwdXQuam9pbignLCAnKSArICcgJyArIGJyYWNlc1sxXTtcbn1cblxuXG4vLyBOT1RFOiBUaGVzZSB0eXBlIGNoZWNraW5nIGZ1bmN0aW9ucyBpbnRlbnRpb25hbGx5IGRvbid0IHVzZSBgaW5zdGFuY2VvZmBcbi8vIGJlY2F1c2UgaXQgaXMgZnJhZ2lsZSBhbmQgY2FuIGJlIGVhc2lseSBmYWtlZCB3aXRoIGBPYmplY3QuY3JlYXRlKClgLlxuZXhwb3J0IGZ1bmN0aW9uIGlzQXJyYXkoYXIpIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkoYXIpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNCb29sZWFuKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Jvb2xlYW4nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOdWxsKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNOdWxsT3JVbmRlZmluZWQoYXJnKSB7XG4gIHJldHVybiBhcmcgPT0gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTnVtYmVyKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ251bWJlcic7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1N0cmluZyhhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdzdHJpbmcnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTeW1ib2woYXJnKSB7XG4gIHJldHVybiB0eXBlb2YgYXJnID09PSAnc3ltYm9sJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzVW5kZWZpbmVkKGFyZykge1xuICByZXR1cm4gYXJnID09PSB2b2lkIDA7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1JlZ0V4cChyZSkge1xuICByZXR1cm4gaXNPYmplY3QocmUpICYmIG9iamVjdFRvU3RyaW5nKHJlKSA9PT0gJ1tvYmplY3QgUmVnRXhwXSc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc09iamVjdChhcmcpIHtcbiAgcmV0dXJuIHR5cGVvZiBhcmcgPT09ICdvYmplY3QnICYmIGFyZyAhPT0gbnVsbDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzRGF0ZShkKSB7XG4gIHJldHVybiBpc09iamVjdChkKSAmJiBvYmplY3RUb1N0cmluZyhkKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNFcnJvcihlKSB7XG4gIHJldHVybiBpc09iamVjdChlKSAmJlxuICAgICAgKG9iamVjdFRvU3RyaW5nKGUpID09PSAnW29iamVjdCBFcnJvcl0nIHx8IGUgaW5zdGFuY2VvZiBFcnJvcik7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Z1bmN0aW9uKGFyZykge1xuICByZXR1cm4gdHlwZW9mIGFyZyA9PT0gJ2Z1bmN0aW9uJztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJpbWl0aXZlKGFyZykge1xuICByZXR1cm4gYXJnID09PSBudWxsIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnYm9vbGVhbicgfHxcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICdudW1iZXInIHx8XG4gICAgICAgICB0eXBlb2YgYXJnID09PSAnc3RyaW5nJyB8fFxuICAgICAgICAgdHlwZW9mIGFyZyA9PT0gJ3N5bWJvbCcgfHwgIC8vIEVTNiBzeW1ib2xcbiAgICAgICAgIHR5cGVvZiBhcmcgPT09ICd1bmRlZmluZWQnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNCdWZmZXIobWF5YmVCdWYpIHtcbiAgcmV0dXJuIEJ1ZmZlci5pc0J1ZmZlcihtYXliZUJ1Zik7XG59XG5cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKG8pIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKTtcbn1cblxuXG5mdW5jdGlvbiBwYWQobikge1xuICByZXR1cm4gbiA8IDEwID8gJzAnICsgbi50b1N0cmluZygxMCkgOiBuLnRvU3RyaW5nKDEwKTtcbn1cblxuXG52YXIgbW9udGhzID0gWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsXG4gICAgICAgICAgICAgICdPY3QnLCAnTm92JywgJ0RlYyddO1xuXG4vLyAyNiBGZWIgMTY6MTk6MzRcbmZ1bmN0aW9uIHRpbWVzdGFtcCgpIHtcbiAgdmFyIGQgPSBuZXcgRGF0ZSgpO1xuICB2YXIgdGltZSA9IFtwYWQoZC5nZXRIb3VycygpKSxcbiAgICAgICAgICAgICAgcGFkKGQuZ2V0TWludXRlcygpKSxcbiAgICAgICAgICAgICAgcGFkKGQuZ2V0U2Vjb25kcygpKV0uam9pbignOicpO1xuICByZXR1cm4gW2QuZ2V0RGF0ZSgpLCBtb250aHNbZC5nZXRNb250aCgpXSwgdGltZV0uam9pbignICcpO1xufVxuXG5cbi8vIGxvZyBpcyBqdXN0IGEgdGhpbiB3cmFwcGVyIHRvIGNvbnNvbGUubG9nIHRoYXQgcHJlcGVuZHMgYSB0aW1lc3RhbXBcbmV4cG9ydCBmdW5jdGlvbiBsb2coKSB7XG4gIGNvbnNvbGUubG9nKCclcyAtICVzJywgdGltZXN0YW1wKCksIGZvcm1hdC5hcHBseShudWxsLCBhcmd1bWVudHMpKTtcbn1cblxuXG4vKipcbiAqIEluaGVyaXQgdGhlIHByb3RvdHlwZSBtZXRob2RzIGZyb20gb25lIGNvbnN0cnVjdG9yIGludG8gYW5vdGhlci5cbiAqXG4gKiBUaGUgRnVuY3Rpb24ucHJvdG90eXBlLmluaGVyaXRzIGZyb20gbGFuZy5qcyByZXdyaXR0ZW4gYXMgYSBzdGFuZGFsb25lXG4gKiBmdW5jdGlvbiAobm90IG9uIEZ1bmN0aW9uLnByb3RvdHlwZSkuIE5PVEU6IElmIHRoaXMgZmlsZSBpcyB0byBiZSBsb2FkZWRcbiAqIGR1cmluZyBib290c3RyYXBwaW5nIHRoaXMgZnVuY3Rpb24gbmVlZHMgdG8gYmUgcmV3cml0dGVuIHVzaW5nIHNvbWUgbmF0aXZlXG4gKiBmdW5jdGlvbnMgYXMgcHJvdG90eXBlIHNldHVwIHVzaW5nIG5vcm1hbCBKYXZhU2NyaXB0IGRvZXMgbm90IHdvcmsgYXNcbiAqIGV4cGVjdGVkIGR1cmluZyBib290c3RyYXBwaW5nIChzZWUgbWlycm9yLmpzIGluIHIxMTQ5MDMpLlxuICpcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gd2hpY2ggbmVlZHMgdG8gaW5oZXJpdCB0aGVcbiAqICAgICBwcm90b3R5cGUuXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBzdXBlckN0b3IgQ29uc3RydWN0b3IgZnVuY3Rpb24gdG8gaW5oZXJpdCBwcm90b3R5cGUgZnJvbS5cbiAqL1xuaW1wb3J0IGluaGVyaXRzIGZyb20gJy4vaW5oZXJpdHMnO1xuZXhwb3J0IHtpbmhlcml0c31cblxuZXhwb3J0IGZ1bmN0aW9uIF9leHRlbmQob3JpZ2luLCBhZGQpIHtcbiAgLy8gRG9uJ3QgZG8gYW55dGhpbmcgaWYgYWRkIGlzbid0IGFuIG9iamVjdFxuICBpZiAoIWFkZCB8fCAhaXNPYmplY3QoYWRkKSkgcmV0dXJuIG9yaWdpbjtcblxuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGFkZCk7XG4gIHZhciBpID0ga2V5cy5sZW5ndGg7XG4gIHdoaWxlIChpLS0pIHtcbiAgICBvcmlnaW5ba2V5c1tpXV0gPSBhZGRba2V5c1tpXV07XG4gIH1cbiAgcmV0dXJuIG9yaWdpbjtcbn07XG5cbmZ1bmN0aW9uIGhhc093blByb3BlcnR5KG9iaiwgcHJvcCkge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgaW5oZXJpdHM6IGluaGVyaXRzLFxuICBfZXh0ZW5kOiBfZXh0ZW5kLFxuICBsb2c6IGxvZyxcbiAgaXNCdWZmZXI6IGlzQnVmZmVyLFxuICBpc1ByaW1pdGl2ZTogaXNQcmltaXRpdmUsXG4gIGlzRnVuY3Rpb246IGlzRnVuY3Rpb24sXG4gIGlzRXJyb3I6IGlzRXJyb3IsXG4gIGlzRGF0ZTogaXNEYXRlLFxuICBpc09iamVjdDogaXNPYmplY3QsXG4gIGlzUmVnRXhwOiBpc1JlZ0V4cCxcbiAgaXNVbmRlZmluZWQ6IGlzVW5kZWZpbmVkLFxuICBpc1N5bWJvbDogaXNTeW1ib2wsXG4gIGlzU3RyaW5nOiBpc1N0cmluZyxcbiAgaXNOdW1iZXI6IGlzTnVtYmVyLFxuICBpc051bGxPclVuZGVmaW5lZDogaXNOdWxsT3JVbmRlZmluZWQsXG4gIGlzTnVsbDogaXNOdWxsLFxuICBpc0Jvb2xlYW46IGlzQm9vbGVhbixcbiAgaXNBcnJheTogaXNBcnJheSxcbiAgaW5zcGVjdDogaW5zcGVjdCxcbiAgZGVwcmVjYXRlOiBkZXByZWNhdGUsXG4gIGZvcm1hdDogZm9ybWF0LFxuICBkZWJ1Z2xvZzogZGVidWdsb2dcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGRvbWFpbjtcblxuLy8gVGhpcyBjb25zdHJ1Y3RvciBpcyB1c2VkIHRvIHN0b3JlIGV2ZW50IGhhbmRsZXJzLiBJbnN0YW50aWF0aW5nIHRoaXMgaXNcbi8vIGZhc3RlciB0aGFuIGV4cGxpY2l0bHkgY2FsbGluZyBgT2JqZWN0LmNyZWF0ZShudWxsKWAgdG8gZ2V0IGEgXCJjbGVhblwiIGVtcHR5XG4vLyBvYmplY3QgKHRlc3RlZCB3aXRoIHY4IHY0LjkpLlxuZnVuY3Rpb24gRXZlbnRIYW5kbGVycygpIHt9XG5FdmVudEhhbmRsZXJzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbmZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgRXZlbnRFbWl0dGVyLmluaXQuY2FsbCh0aGlzKTtcbn1cbmV4cG9ydCBkZWZhdWx0IEV2ZW50RW1pdHRlcjtcbmV4cG9ydCB7RXZlbnRFbWl0dGVyfTtcblxuLy8gbm9kZWpzIG9kZGl0eVxuLy8gcmVxdWlyZSgnZXZlbnRzJykgPT09IHJlcXVpcmUoJ2V2ZW50cycpLkV2ZW50RW1pdHRlclxuRXZlbnRFbWl0dGVyLkV2ZW50RW1pdHRlciA9IEV2ZW50RW1pdHRlclxuXG5FdmVudEVtaXR0ZXIudXNpbmdEb21haW5zID0gZmFsc2U7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZG9tYWluID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fZXZlbnRzID0gdW5kZWZpbmVkO1xuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5fbWF4TGlzdGVuZXJzID0gdW5kZWZpbmVkO1xuXG4vLyBCeSBkZWZhdWx0IEV2ZW50RW1pdHRlcnMgd2lsbCBwcmludCBhIHdhcm5pbmcgaWYgbW9yZSB0aGFuIDEwIGxpc3RlbmVycyBhcmVcbi8vIGFkZGVkIHRvIGl0LiBUaGlzIGlzIGEgdXNlZnVsIGRlZmF1bHQgd2hpY2ggaGVscHMgZmluZGluZyBtZW1vcnkgbGVha3MuXG5FdmVudEVtaXR0ZXIuZGVmYXVsdE1heExpc3RlbmVycyA9IDEwO1xuXG5FdmVudEVtaXR0ZXIuaW5pdCA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLmRvbWFpbiA9IG51bGw7XG4gIGlmIChFdmVudEVtaXR0ZXIudXNpbmdEb21haW5zKSB7XG4gICAgLy8gaWYgdGhlcmUgaXMgYW4gYWN0aXZlIGRvbWFpbiwgdGhlbiBhdHRhY2ggdG8gaXQuXG4gICAgaWYgKGRvbWFpbi5hY3RpdmUgJiYgISh0aGlzIGluc3RhbmNlb2YgZG9tYWluLkRvbWFpbikpIHtcbiAgICAgIHRoaXMuZG9tYWluID0gZG9tYWluLmFjdGl2ZTtcbiAgICB9XG4gIH1cblxuICBpZiAoIXRoaXMuX2V2ZW50cyB8fCB0aGlzLl9ldmVudHMgPT09IE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fZXZlbnRzKSB7XG4gICAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50SGFuZGxlcnMoKTtcbiAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gIH1cblxuICB0aGlzLl9tYXhMaXN0ZW5lcnMgPSB0aGlzLl9tYXhMaXN0ZW5lcnMgfHwgdW5kZWZpbmVkO1xufTtcblxuLy8gT2J2aW91c2x5IG5vdCBhbGwgRW1pdHRlcnMgc2hvdWxkIGJlIGxpbWl0ZWQgdG8gMTAuIFRoaXMgZnVuY3Rpb24gYWxsb3dzXG4vLyB0aGF0IHRvIGJlIGluY3JlYXNlZC4gU2V0IHRvIHplcm8gZm9yIHVubGltaXRlZC5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuc2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gc2V0TWF4TGlzdGVuZXJzKG4pIHtcbiAgaWYgKHR5cGVvZiBuICE9PSAnbnVtYmVyJyB8fCBuIDwgMCB8fCBpc05hTihuKSlcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcIm5cIiBhcmd1bWVudCBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyJyk7XG4gIHRoaXMuX21heExpc3RlbmVycyA9IG47XG4gIHJldHVybiB0aGlzO1xufTtcblxuZnVuY3Rpb24gJGdldE1heExpc3RlbmVycyh0aGF0KSB7XG4gIGlmICh0aGF0Ll9tYXhMaXN0ZW5lcnMgPT09IHVuZGVmaW5lZClcbiAgICByZXR1cm4gRXZlbnRFbWl0dGVyLmRlZmF1bHRNYXhMaXN0ZW5lcnM7XG4gIHJldHVybiB0aGF0Ll9tYXhMaXN0ZW5lcnM7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZ2V0TWF4TGlzdGVuZXJzID0gZnVuY3Rpb24gZ2V0TWF4TGlzdGVuZXJzKCkge1xuICByZXR1cm4gJGdldE1heExpc3RlbmVycyh0aGlzKTtcbn07XG5cbi8vIFRoZXNlIHN0YW5kYWxvbmUgZW1pdCogZnVuY3Rpb25zIGFyZSB1c2VkIHRvIG9wdGltaXplIGNhbGxpbmcgb2YgZXZlbnRcbi8vIGhhbmRsZXJzIGZvciBmYXN0IGNhc2VzIGJlY2F1c2UgZW1pdCgpIGl0c2VsZiBvZnRlbiBoYXMgYSB2YXJpYWJsZSBudW1iZXIgb2Zcbi8vIGFyZ3VtZW50cyBhbmQgY2FuIGJlIGRlb3B0aW1pemVkIGJlY2F1c2Ugb2YgdGhhdC4gVGhlc2UgZnVuY3Rpb25zIGFsd2F5cyBoYXZlXG4vLyB0aGUgc2FtZSBudW1iZXIgb2YgYXJndW1lbnRzIGFuZCB0aHVzIGRvIG5vdCBnZXQgZGVvcHRpbWl6ZWQsIHNvIHRoZSBjb2RlXG4vLyBpbnNpZGUgdGhlbSBjYW4gZXhlY3V0ZSBmYXN0ZXIuXG5mdW5jdGlvbiBlbWl0Tm9uZShoYW5kbGVyLCBpc0ZuLCBzZWxmKSB7XG4gIGlmIChpc0ZuKVxuICAgIGhhbmRsZXIuY2FsbChzZWxmKTtcbiAgZWxzZSB7XG4gICAgdmFyIGxlbiA9IGhhbmRsZXIubGVuZ3RoO1xuICAgIHZhciBsaXN0ZW5lcnMgPSBhcnJheUNsb25lKGhhbmRsZXIsIGxlbik7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsZW47ICsraSlcbiAgICAgIGxpc3RlbmVyc1tpXS5jYWxsKHNlbGYpO1xuICB9XG59XG5mdW5jdGlvbiBlbWl0T25lKGhhbmRsZXIsIGlzRm4sIHNlbGYsIGFyZzEpIHtcbiAgaWYgKGlzRm4pXG4gICAgaGFuZGxlci5jYWxsKHNlbGYsIGFyZzEpO1xuICBlbHNlIHtcbiAgICB2YXIgbGVuID0gaGFuZGxlci5sZW5ndGg7XG4gICAgdmFyIGxpc3RlbmVycyA9IGFycmF5Q2xvbmUoaGFuZGxlciwgbGVuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKVxuICAgICAgbGlzdGVuZXJzW2ldLmNhbGwoc2VsZiwgYXJnMSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGVtaXRUd28oaGFuZGxlciwgaXNGbiwgc2VsZiwgYXJnMSwgYXJnMikge1xuICBpZiAoaXNGbilcbiAgICBoYW5kbGVyLmNhbGwoc2VsZiwgYXJnMSwgYXJnMik7XG4gIGVsc2Uge1xuICAgIHZhciBsZW4gPSBoYW5kbGVyLmxlbmd0aDtcbiAgICB2YXIgbGlzdGVuZXJzID0gYXJyYXlDbG9uZShoYW5kbGVyLCBsZW4pO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpXG4gICAgICBsaXN0ZW5lcnNbaV0uY2FsbChzZWxmLCBhcmcxLCBhcmcyKTtcbiAgfVxufVxuZnVuY3Rpb24gZW1pdFRocmVlKGhhbmRsZXIsIGlzRm4sIHNlbGYsIGFyZzEsIGFyZzIsIGFyZzMpIHtcbiAgaWYgKGlzRm4pXG4gICAgaGFuZGxlci5jYWxsKHNlbGYsIGFyZzEsIGFyZzIsIGFyZzMpO1xuICBlbHNlIHtcbiAgICB2YXIgbGVuID0gaGFuZGxlci5sZW5ndGg7XG4gICAgdmFyIGxpc3RlbmVycyA9IGFycmF5Q2xvbmUoaGFuZGxlciwgbGVuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKVxuICAgICAgbGlzdGVuZXJzW2ldLmNhbGwoc2VsZiwgYXJnMSwgYXJnMiwgYXJnMyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW1pdE1hbnkoaGFuZGxlciwgaXNGbiwgc2VsZiwgYXJncykge1xuICBpZiAoaXNGbilcbiAgICBoYW5kbGVyLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICBlbHNlIHtcbiAgICB2YXIgbGVuID0gaGFuZGxlci5sZW5ndGg7XG4gICAgdmFyIGxpc3RlbmVycyA9IGFycmF5Q2xvbmUoaGFuZGxlciwgbGVuKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgKytpKVxuICAgICAgbGlzdGVuZXJzW2ldLmFwcGx5KHNlbGYsIGFyZ3MpO1xuICB9XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uIGVtaXQodHlwZSkge1xuICB2YXIgZXIsIGhhbmRsZXIsIGxlbiwgYXJncywgaSwgZXZlbnRzLCBkb21haW47XG4gIHZhciBuZWVkRG9tYWluRXhpdCA9IGZhbHNlO1xuICB2YXIgZG9FcnJvciA9ICh0eXBlID09PSAnZXJyb3InKTtcblxuICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gIGlmIChldmVudHMpXG4gICAgZG9FcnJvciA9IChkb0Vycm9yICYmIGV2ZW50cy5lcnJvciA9PSBudWxsKTtcbiAgZWxzZSBpZiAoIWRvRXJyb3IpXG4gICAgcmV0dXJuIGZhbHNlO1xuXG4gIGRvbWFpbiA9IHRoaXMuZG9tYWluO1xuXG4gIC8vIElmIHRoZXJlIGlzIG5vICdlcnJvcicgZXZlbnQgbGlzdGVuZXIgdGhlbiB0aHJvdy5cbiAgaWYgKGRvRXJyb3IpIHtcbiAgICBlciA9IGFyZ3VtZW50c1sxXTtcbiAgICBpZiAoZG9tYWluKSB7XG4gICAgICBpZiAoIWVyKVxuICAgICAgICBlciA9IG5ldyBFcnJvcignVW5jYXVnaHQsIHVuc3BlY2lmaWVkIFwiZXJyb3JcIiBldmVudCcpO1xuICAgICAgZXIuZG9tYWluRW1pdHRlciA9IHRoaXM7XG4gICAgICBlci5kb21haW4gPSBkb21haW47XG4gICAgICBlci5kb21haW5UaHJvd24gPSBmYWxzZTtcbiAgICAgIGRvbWFpbi5lbWl0KCdlcnJvcicsIGVyKTtcbiAgICB9IGVsc2UgaWYgKGVyIGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHRocm93IGVyOyAvLyBVbmhhbmRsZWQgJ2Vycm9yJyBldmVudFxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBBdCBsZWFzdCBnaXZlIHNvbWUga2luZCBvZiBjb250ZXh0IHRvIHRoZSB1c2VyXG4gICAgICB2YXIgZXJyID0gbmV3IEVycm9yKCdVbmNhdWdodCwgdW5zcGVjaWZpZWQgXCJlcnJvclwiIGV2ZW50LiAoJyArIGVyICsgJyknKTtcbiAgICAgIGVyci5jb250ZXh0ID0gZXI7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIGhhbmRsZXIgPSBldmVudHNbdHlwZV07XG5cbiAgaWYgKCFoYW5kbGVyKVxuICAgIHJldHVybiBmYWxzZTtcblxuICB2YXIgaXNGbiA9IHR5cGVvZiBoYW5kbGVyID09PSAnZnVuY3Rpb24nO1xuICBsZW4gPSBhcmd1bWVudHMubGVuZ3RoO1xuICBzd2l0Y2ggKGxlbikge1xuICAgIC8vIGZhc3QgY2FzZXNcbiAgICBjYXNlIDE6XG4gICAgICBlbWl0Tm9uZShoYW5kbGVyLCBpc0ZuLCB0aGlzKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMjpcbiAgICAgIGVtaXRPbmUoaGFuZGxlciwgaXNGbiwgdGhpcywgYXJndW1lbnRzWzFdKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMzpcbiAgICAgIGVtaXRUd28oaGFuZGxlciwgaXNGbiwgdGhpcywgYXJndW1lbnRzWzFdLCBhcmd1bWVudHNbMl0pO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSA0OlxuICAgICAgZW1pdFRocmVlKGhhbmRsZXIsIGlzRm4sIHRoaXMsIGFyZ3VtZW50c1sxXSwgYXJndW1lbnRzWzJdLCBhcmd1bWVudHNbM10pO1xuICAgICAgYnJlYWs7XG4gICAgLy8gc2xvd2VyXG4gICAgZGVmYXVsdDpcbiAgICAgIGFyZ3MgPSBuZXcgQXJyYXkobGVuIC0gMSk7XG4gICAgICBmb3IgKGkgPSAxOyBpIDwgbGVuOyBpKyspXG4gICAgICAgIGFyZ3NbaSAtIDFdID0gYXJndW1lbnRzW2ldO1xuICAgICAgZW1pdE1hbnkoaGFuZGxlciwgaXNGbiwgdGhpcywgYXJncyk7XG4gIH1cblxuICBpZiAobmVlZERvbWFpbkV4aXQpXG4gICAgZG9tYWluLmV4aXQoKTtcblxuICByZXR1cm4gdHJ1ZTtcbn07XG5cbmZ1bmN0aW9uIF9hZGRMaXN0ZW5lcih0YXJnZXQsIHR5cGUsIGxpc3RlbmVyLCBwcmVwZW5kKSB7XG4gIHZhciBtO1xuICB2YXIgZXZlbnRzO1xuICB2YXIgZXhpc3Rpbmc7XG5cbiAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJylcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG5cbiAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHM7XG4gIGlmICghZXZlbnRzKSB7XG4gICAgZXZlbnRzID0gdGFyZ2V0Ll9ldmVudHMgPSBuZXcgRXZlbnRIYW5kbGVycygpO1xuICAgIHRhcmdldC5fZXZlbnRzQ291bnQgPSAwO1xuICB9IGVsc2Uge1xuICAgIC8vIFRvIGF2b2lkIHJlY3Vyc2lvbiBpbiB0aGUgY2FzZSB0aGF0IHR5cGUgPT09IFwibmV3TGlzdGVuZXJcIiEgQmVmb3JlXG4gICAgLy8gYWRkaW5nIGl0IHRvIHRoZSBsaXN0ZW5lcnMsIGZpcnN0IGVtaXQgXCJuZXdMaXN0ZW5lclwiLlxuICAgIGlmIChldmVudHMubmV3TGlzdGVuZXIpIHtcbiAgICAgIHRhcmdldC5lbWl0KCduZXdMaXN0ZW5lcicsIHR5cGUsXG4gICAgICAgICAgICAgICAgICBsaXN0ZW5lci5saXN0ZW5lciA/IGxpc3RlbmVyLmxpc3RlbmVyIDogbGlzdGVuZXIpO1xuXG4gICAgICAvLyBSZS1hc3NpZ24gYGV2ZW50c2AgYmVjYXVzZSBhIG5ld0xpc3RlbmVyIGhhbmRsZXIgY291bGQgaGF2ZSBjYXVzZWQgdGhlXG4gICAgICAvLyB0aGlzLl9ldmVudHMgdG8gYmUgYXNzaWduZWQgdG8gYSBuZXcgb2JqZWN0XG4gICAgICBldmVudHMgPSB0YXJnZXQuX2V2ZW50cztcbiAgICB9XG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV07XG4gIH1cblxuICBpZiAoIWV4aXN0aW5nKSB7XG4gICAgLy8gT3B0aW1pemUgdGhlIGNhc2Ugb2Ygb25lIGxpc3RlbmVyLiBEb24ndCBuZWVkIHRoZSBleHRyYSBhcnJheSBvYmplY3QuXG4gICAgZXhpc3RpbmcgPSBldmVudHNbdHlwZV0gPSBsaXN0ZW5lcjtcbiAgICArK3RhcmdldC5fZXZlbnRzQ291bnQ7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHR5cGVvZiBleGlzdGluZyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gQWRkaW5nIHRoZSBzZWNvbmQgZWxlbWVudCwgbmVlZCB0byBjaGFuZ2UgdG8gYXJyYXkuXG4gICAgICBleGlzdGluZyA9IGV2ZW50c1t0eXBlXSA9IHByZXBlbmQgPyBbbGlzdGVuZXIsIGV4aXN0aW5nXSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbZXhpc3RpbmcsIGxpc3RlbmVyXTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gSWYgd2UndmUgYWxyZWFkeSBnb3QgYW4gYXJyYXksIGp1c3QgYXBwZW5kLlxuICAgICAgaWYgKHByZXBlbmQpIHtcbiAgICAgICAgZXhpc3RpbmcudW5zaGlmdChsaXN0ZW5lcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBleGlzdGluZy5wdXNoKGxpc3RlbmVyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBDaGVjayBmb3IgbGlzdGVuZXIgbGVha1xuICAgIGlmICghZXhpc3Rpbmcud2FybmVkKSB7XG4gICAgICBtID0gJGdldE1heExpc3RlbmVycyh0YXJnZXQpO1xuICAgICAgaWYgKG0gJiYgbSA+IDAgJiYgZXhpc3RpbmcubGVuZ3RoID4gbSkge1xuICAgICAgICBleGlzdGluZy53YXJuZWQgPSB0cnVlO1xuICAgICAgICB2YXIgdyA9IG5ldyBFcnJvcignUG9zc2libGUgRXZlbnRFbWl0dGVyIG1lbW9yeSBsZWFrIGRldGVjdGVkLiAnICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBleGlzdGluZy5sZW5ndGggKyAnICcgKyB0eXBlICsgJyBsaXN0ZW5lcnMgYWRkZWQuICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdVc2UgZW1pdHRlci5zZXRNYXhMaXN0ZW5lcnMoKSB0byBpbmNyZWFzZSBsaW1pdCcpO1xuICAgICAgICB3Lm5hbWUgPSAnTWF4TGlzdGVuZXJzRXhjZWVkZWRXYXJuaW5nJztcbiAgICAgICAgdy5lbWl0dGVyID0gdGFyZ2V0O1xuICAgICAgICB3LnR5cGUgPSB0eXBlO1xuICAgICAgICB3LmNvdW50ID0gZXhpc3RpbmcubGVuZ3RoO1xuICAgICAgICBlbWl0V2FybmluZyh3KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuZnVuY3Rpb24gZW1pdFdhcm5pbmcoZSkge1xuICB0eXBlb2YgY29uc29sZS53YXJuID09PSAnZnVuY3Rpb24nID8gY29uc29sZS53YXJuKGUpIDogY29uc29sZS5sb2coZSk7XG59XG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmFkZExpc3RlbmVyID0gZnVuY3Rpb24gYWRkTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIF9hZGRMaXN0ZW5lcih0aGlzLCB0eXBlLCBsaXN0ZW5lciwgZmFsc2UpO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUuYWRkTGlzdGVuZXI7XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucHJlcGVuZExpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kTGlzdGVuZXIodHlwZSwgbGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBfYWRkTGlzdGVuZXIodGhpcywgdHlwZSwgbGlzdGVuZXIsIHRydWUpO1xuICAgIH07XG5cbmZ1bmN0aW9uIF9vbmNlV3JhcCh0YXJnZXQsIHR5cGUsIGxpc3RlbmVyKSB7XG4gIHZhciBmaXJlZCA9IGZhbHNlO1xuICBmdW5jdGlvbiBnKCkge1xuICAgIHRhcmdldC5yZW1vdmVMaXN0ZW5lcih0eXBlLCBnKTtcbiAgICBpZiAoIWZpcmVkKSB7XG4gICAgICBmaXJlZCA9IHRydWU7XG4gICAgICBsaXN0ZW5lci5hcHBseSh0YXJnZXQsIGFyZ3VtZW50cyk7XG4gICAgfVxuICB9XG4gIGcubGlzdGVuZXIgPSBsaXN0ZW5lcjtcbiAgcmV0dXJuIGc7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUub25jZSA9IGZ1bmN0aW9uIG9uY2UodHlwZSwgbGlzdGVuZXIpIHtcbiAgaWYgKHR5cGVvZiBsaXN0ZW5lciAhPT0gJ2Z1bmN0aW9uJylcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gIHRoaXMub24odHlwZSwgX29uY2VXcmFwKHRoaXMsIHR5cGUsIGxpc3RlbmVyKSk7XG4gIHJldHVybiB0aGlzO1xufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5wcmVwZW5kT25jZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiBwcmVwZW5kT25jZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyKSB7XG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKVxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdcImxpc3RlbmVyXCIgYXJndW1lbnQgbXVzdCBiZSBhIGZ1bmN0aW9uJyk7XG4gICAgICB0aGlzLnByZXBlbmRMaXN0ZW5lcih0eXBlLCBfb25jZVdyYXAodGhpcywgdHlwZSwgbGlzdGVuZXIpKTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbi8vIGVtaXRzIGEgJ3JlbW92ZUxpc3RlbmVyJyBldmVudCBpZmYgdGhlIGxpc3RlbmVyIHdhcyByZW1vdmVkXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cbiAgICBmdW5jdGlvbiByZW1vdmVMaXN0ZW5lcih0eXBlLCBsaXN0ZW5lcikge1xuICAgICAgdmFyIGxpc3QsIGV2ZW50cywgcG9zaXRpb24sIGksIG9yaWdpbmFsTGlzdGVuZXI7XG5cbiAgICAgIGlmICh0eXBlb2YgbGlzdGVuZXIgIT09ICdmdW5jdGlvbicpXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1wibGlzdGVuZXJcIiBhcmd1bWVudCBtdXN0IGJlIGEgZnVuY3Rpb24nKTtcblxuICAgICAgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuICAgICAgaWYgKCFldmVudHMpXG4gICAgICAgIHJldHVybiB0aGlzO1xuXG4gICAgICBsaXN0ID0gZXZlbnRzW3R5cGVdO1xuICAgICAgaWYgKCFsaXN0KVxuICAgICAgICByZXR1cm4gdGhpcztcblxuICAgICAgaWYgKGxpc3QgPT09IGxpc3RlbmVyIHx8IChsaXN0Lmxpc3RlbmVyICYmIGxpc3QubGlzdGVuZXIgPT09IGxpc3RlbmVyKSkge1xuICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMClcbiAgICAgICAgICB0aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRIYW5kbGVycygpO1xuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICAgIGlmIChldmVudHMucmVtb3ZlTGlzdGVuZXIpXG4gICAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgbGlzdC5saXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAodHlwZW9mIGxpc3QgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgcG9zaXRpb24gPSAtMTtcblxuICAgICAgICBmb3IgKGkgPSBsaXN0Lmxlbmd0aDsgaS0tID4gMDspIHtcbiAgICAgICAgICBpZiAobGlzdFtpXSA9PT0gbGlzdGVuZXIgfHxcbiAgICAgICAgICAgICAgKGxpc3RbaV0ubGlzdGVuZXIgJiYgbGlzdFtpXS5saXN0ZW5lciA9PT0gbGlzdGVuZXIpKSB7XG4gICAgICAgICAgICBvcmlnaW5hbExpc3RlbmVyID0gbGlzdFtpXS5saXN0ZW5lcjtcbiAgICAgICAgICAgIHBvc2l0aW9uID0gaTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChwb3NpdGlvbiA8IDApXG4gICAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgICAgaWYgKGxpc3QubGVuZ3RoID09PSAxKSB7XG4gICAgICAgICAgbGlzdFswXSA9IHVuZGVmaW5lZDtcbiAgICAgICAgICBpZiAoLS10aGlzLl9ldmVudHNDb3VudCA9PT0gMCkge1xuICAgICAgICAgICAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50SGFuZGxlcnMoKTtcbiAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZWxldGUgZXZlbnRzW3R5cGVdO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzcGxpY2VPbmUobGlzdCwgcG9zaXRpb24pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGV2ZW50cy5yZW1vdmVMaXN0ZW5lcilcbiAgICAgICAgICB0aGlzLmVtaXQoJ3JlbW92ZUxpc3RlbmVyJywgdHlwZSwgb3JpZ2luYWxMaXN0ZW5lciB8fCBsaXN0ZW5lcik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH07XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cbiAgICBmdW5jdGlvbiByZW1vdmVBbGxMaXN0ZW5lcnModHlwZSkge1xuICAgICAgdmFyIGxpc3RlbmVycywgZXZlbnRzO1xuXG4gICAgICBldmVudHMgPSB0aGlzLl9ldmVudHM7XG4gICAgICBpZiAoIWV2ZW50cylcbiAgICAgICAgcmV0dXJuIHRoaXM7XG5cbiAgICAgIC8vIG5vdCBsaXN0ZW5pbmcgZm9yIHJlbW92ZUxpc3RlbmVyLCBubyBuZWVkIHRvIGVtaXRcbiAgICAgIGlmICghZXZlbnRzLnJlbW92ZUxpc3RlbmVyKSB7XG4gICAgICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50SGFuZGxlcnMoKTtcbiAgICAgICAgICB0aGlzLl9ldmVudHNDb3VudCA9IDA7XG4gICAgICAgIH0gZWxzZSBpZiAoZXZlbnRzW3R5cGVdKSB7XG4gICAgICAgICAgaWYgKC0tdGhpcy5fZXZlbnRzQ291bnQgPT09IDApXG4gICAgICAgICAgICB0aGlzLl9ldmVudHMgPSBuZXcgRXZlbnRIYW5kbGVycygpO1xuICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgIGRlbGV0ZSBldmVudHNbdHlwZV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICB9XG5cbiAgICAgIC8vIGVtaXQgcmVtb3ZlTGlzdGVuZXIgZm9yIGFsbCBsaXN0ZW5lcnMgb24gYWxsIGV2ZW50c1xuICAgICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhldmVudHMpO1xuICAgICAgICBmb3IgKHZhciBpID0gMCwga2V5OyBpIDwga2V5cy5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgaWYgKGtleSA9PT0gJ3JlbW92ZUxpc3RlbmVyJykgY29udGludWU7XG4gICAgICAgICAgdGhpcy5yZW1vdmVBbGxMaXN0ZW5lcnMoa2V5KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlbW92ZUFsbExpc3RlbmVycygncmVtb3ZlTGlzdGVuZXInKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzID0gbmV3IEV2ZW50SGFuZGxlcnMoKTtcbiAgICAgICAgdGhpcy5fZXZlbnRzQ291bnQgPSAwO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgIH1cblxuICAgICAgbGlzdGVuZXJzID0gZXZlbnRzW3R5cGVdO1xuXG4gICAgICBpZiAodHlwZW9mIGxpc3RlbmVycyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVycyk7XG4gICAgICB9IGVsc2UgaWYgKGxpc3RlbmVycykge1xuICAgICAgICAvLyBMSUZPIG9yZGVyXG4gICAgICAgIGRvIHtcbiAgICAgICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKHR5cGUsIGxpc3RlbmVyc1tsaXN0ZW5lcnMubGVuZ3RoIC0gMV0pO1xuICAgICAgICB9IHdoaWxlIChsaXN0ZW5lcnNbMF0pO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9O1xuXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmxpc3RlbmVycyA9IGZ1bmN0aW9uIGxpc3RlbmVycyh0eXBlKSB7XG4gIHZhciBldmxpc3RlbmVyO1xuICB2YXIgcmV0O1xuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuXG4gIGlmICghZXZlbnRzKVxuICAgIHJldCA9IFtdO1xuICBlbHNlIHtcbiAgICBldmxpc3RlbmVyID0gZXZlbnRzW3R5cGVdO1xuICAgIGlmICghZXZsaXN0ZW5lcilcbiAgICAgIHJldCA9IFtdO1xuICAgIGVsc2UgaWYgKHR5cGVvZiBldmxpc3RlbmVyID09PSAnZnVuY3Rpb24nKVxuICAgICAgcmV0ID0gW2V2bGlzdGVuZXIubGlzdGVuZXIgfHwgZXZsaXN0ZW5lcl07XG4gICAgZWxzZVxuICAgICAgcmV0ID0gdW53cmFwTGlzdGVuZXJzKGV2bGlzdGVuZXIpO1xuICB9XG5cbiAgcmV0dXJuIHJldDtcbn07XG5cbkV2ZW50RW1pdHRlci5saXN0ZW5lckNvdW50ID0gZnVuY3Rpb24oZW1pdHRlciwgdHlwZSkge1xuICBpZiAodHlwZW9mIGVtaXR0ZXIubGlzdGVuZXJDb3VudCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiBlbWl0dGVyLmxpc3RlbmVyQ291bnQodHlwZSk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIGxpc3RlbmVyQ291bnQuY2FsbChlbWl0dGVyLCB0eXBlKTtcbiAgfVxufTtcblxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lckNvdW50ID0gbGlzdGVuZXJDb3VudDtcbmZ1bmN0aW9uIGxpc3RlbmVyQ291bnQodHlwZSkge1xuICB2YXIgZXZlbnRzID0gdGhpcy5fZXZlbnRzO1xuXG4gIGlmIChldmVudHMpIHtcbiAgICB2YXIgZXZsaXN0ZW5lciA9IGV2ZW50c1t0eXBlXTtcblxuICAgIGlmICh0eXBlb2YgZXZsaXN0ZW5lciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgcmV0dXJuIDE7XG4gICAgfSBlbHNlIGlmIChldmxpc3RlbmVyKSB7XG4gICAgICByZXR1cm4gZXZsaXN0ZW5lci5sZW5ndGg7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIDA7XG59XG5cbkV2ZW50RW1pdHRlci5wcm90b3R5cGUuZXZlbnROYW1lcyA9IGZ1bmN0aW9uIGV2ZW50TmFtZXMoKSB7XG4gIHJldHVybiB0aGlzLl9ldmVudHNDb3VudCA+IDAgPyBSZWZsZWN0Lm93bktleXModGhpcy5fZXZlbnRzKSA6IFtdO1xufTtcblxuLy8gQWJvdXQgMS41eCBmYXN0ZXIgdGhhbiB0aGUgdHdvLWFyZyB2ZXJzaW9uIG9mIEFycmF5I3NwbGljZSgpLlxuZnVuY3Rpb24gc3BsaWNlT25lKGxpc3QsIGluZGV4KSB7XG4gIGZvciAodmFyIGkgPSBpbmRleCwgayA9IGkgKyAxLCBuID0gbGlzdC5sZW5ndGg7IGsgPCBuOyBpICs9IDEsIGsgKz0gMSlcbiAgICBsaXN0W2ldID0gbGlzdFtrXTtcbiAgbGlzdC5wb3AoKTtcbn1cblxuZnVuY3Rpb24gYXJyYXlDbG9uZShhcnIsIGkpIHtcbiAgdmFyIGNvcHkgPSBuZXcgQXJyYXkoaSk7XG4gIHdoaWxlIChpLS0pXG4gICAgY29weVtpXSA9IGFycltpXTtcbiAgcmV0dXJuIGNvcHk7XG59XG5cbmZ1bmN0aW9uIHVud3JhcExpc3RlbmVycyhhcnIpIHtcbiAgdmFyIHJldCA9IG5ldyBBcnJheShhcnIubGVuZ3RoKTtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXQubGVuZ3RoOyArK2kpIHtcbiAgICByZXRbaV0gPSBhcnJbaV0ubGlzdGVuZXIgfHwgYXJyW2ldO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG4iLCJpbXBvcnQge0J1ZmZlcn0gZnJvbSAnYnVmZmVyJztcblxuZXhwb3J0IGRlZmF1bHQgQnVmZmVyTGlzdDtcblxuZnVuY3Rpb24gQnVmZmVyTGlzdCgpIHtcbiAgdGhpcy5oZWFkID0gbnVsbDtcbiAgdGhpcy50YWlsID0gbnVsbDtcbiAgdGhpcy5sZW5ndGggPSAwO1xufVxuXG5CdWZmZXJMaXN0LnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKHYpIHtcbiAgdmFyIGVudHJ5ID0geyBkYXRhOiB2LCBuZXh0OiBudWxsIH07XG4gIGlmICh0aGlzLmxlbmd0aCA+IDApIHRoaXMudGFpbC5uZXh0ID0gZW50cnk7ZWxzZSB0aGlzLmhlYWQgPSBlbnRyeTtcbiAgdGhpcy50YWlsID0gZW50cnk7XG4gICsrdGhpcy5sZW5ndGg7XG59O1xuXG5CdWZmZXJMaXN0LnByb3RvdHlwZS51bnNoaWZ0ID0gZnVuY3Rpb24gKHYpIHtcbiAgdmFyIGVudHJ5ID0geyBkYXRhOiB2LCBuZXh0OiB0aGlzLmhlYWQgfTtcbiAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSB0aGlzLnRhaWwgPSBlbnRyeTtcbiAgdGhpcy5oZWFkID0gZW50cnk7XG4gICsrdGhpcy5sZW5ndGg7XG59O1xuXG5CdWZmZXJMaXN0LnByb3RvdHlwZS5zaGlmdCA9IGZ1bmN0aW9uICgpIHtcbiAgaWYgKHRoaXMubGVuZ3RoID09PSAwKSByZXR1cm47XG4gIHZhciByZXQgPSB0aGlzLmhlYWQuZGF0YTtcbiAgaWYgKHRoaXMubGVuZ3RoID09PSAxKSB0aGlzLmhlYWQgPSB0aGlzLnRhaWwgPSBudWxsO2Vsc2UgdGhpcy5oZWFkID0gdGhpcy5oZWFkLm5leHQ7XG4gIC0tdGhpcy5sZW5ndGg7XG4gIHJldHVybiByZXQ7XG59O1xuXG5CdWZmZXJMaXN0LnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uICgpIHtcbiAgdGhpcy5oZWFkID0gdGhpcy50YWlsID0gbnVsbDtcbiAgdGhpcy5sZW5ndGggPSAwO1xufTtcblxuQnVmZmVyTGlzdC5wcm90b3R5cGUuam9pbiA9IGZ1bmN0aW9uIChzKSB7XG4gIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuICcnO1xuICB2YXIgcCA9IHRoaXMuaGVhZDtcbiAgdmFyIHJldCA9ICcnICsgcC5kYXRhO1xuICB3aGlsZSAocCA9IHAubmV4dCkge1xuICAgIHJldCArPSBzICsgcC5kYXRhO1xuICB9cmV0dXJuIHJldDtcbn07XG5cbkJ1ZmZlckxpc3QucHJvdG90eXBlLmNvbmNhdCA9IGZ1bmN0aW9uIChuKSB7XG4gIGlmICh0aGlzLmxlbmd0aCA9PT0gMCkgcmV0dXJuIEJ1ZmZlci5hbGxvYygwKTtcbiAgaWYgKHRoaXMubGVuZ3RoID09PSAxKSByZXR1cm4gdGhpcy5oZWFkLmRhdGE7XG4gIHZhciByZXQgPSBCdWZmZXIuYWxsb2NVbnNhZmUobiA+Pj4gMCk7XG4gIHZhciBwID0gdGhpcy5oZWFkO1xuICB2YXIgaSA9IDA7XG4gIHdoaWxlIChwKSB7XG4gICAgcC5kYXRhLmNvcHkocmV0LCBpKTtcbiAgICBpICs9IHAuZGF0YS5sZW5ndGg7XG4gICAgcCA9IHAubmV4dDtcbiAgfVxuICByZXR1cm4gcmV0O1xufTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG5pbXBvcnQge0J1ZmZlcn0gZnJvbSAnYnVmZmVyJztcbnZhciBpc0J1ZmZlckVuY29kaW5nID0gQnVmZmVyLmlzRW5jb2RpbmdcbiAgfHwgZnVuY3Rpb24oZW5jb2RpbmcpIHtcbiAgICAgICBzd2l0Y2ggKGVuY29kaW5nICYmIGVuY29kaW5nLnRvTG93ZXJDYXNlKCkpIHtcbiAgICAgICAgIGNhc2UgJ2hleCc6IGNhc2UgJ3V0ZjgnOiBjYXNlICd1dGYtOCc6IGNhc2UgJ2FzY2lpJzogY2FzZSAnYmluYXJ5JzogY2FzZSAnYmFzZTY0JzogY2FzZSAndWNzMic6IGNhc2UgJ3Vjcy0yJzogY2FzZSAndXRmMTZsZSc6IGNhc2UgJ3V0Zi0xNmxlJzogY2FzZSAncmF3JzogcmV0dXJuIHRydWU7XG4gICAgICAgICBkZWZhdWx0OiByZXR1cm4gZmFsc2U7XG4gICAgICAgfVxuICAgICB9XG5cblxuZnVuY3Rpb24gYXNzZXJ0RW5jb2RpbmcoZW5jb2RpbmcpIHtcbiAgaWYgKGVuY29kaW5nICYmICFpc0J1ZmZlckVuY29kaW5nKGVuY29kaW5nKSkge1xuICAgIHRocm93IG5ldyBFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKTtcbiAgfVxufVxuXG4vLyBTdHJpbmdEZWNvZGVyIHByb3ZpZGVzIGFuIGludGVyZmFjZSBmb3IgZWZmaWNpZW50bHkgc3BsaXR0aW5nIGEgc2VyaWVzIG9mXG4vLyBidWZmZXJzIGludG8gYSBzZXJpZXMgb2YgSlMgc3RyaW5ncyB3aXRob3V0IGJyZWFraW5nIGFwYXJ0IG11bHRpLWJ5dGVcbi8vIGNoYXJhY3RlcnMuIENFU1UtOCBpcyBoYW5kbGVkIGFzIHBhcnQgb2YgdGhlIFVURi04IGVuY29kaW5nLlxuLy9cbi8vIEBUT0RPIEhhbmRsaW5nIGFsbCBlbmNvZGluZ3MgaW5zaWRlIGEgc2luZ2xlIG9iamVjdCBtYWtlcyBpdCB2ZXJ5IGRpZmZpY3VsdFxuLy8gdG8gcmVhc29uIGFib3V0IHRoaXMgY29kZSwgc28gaXQgc2hvdWxkIGJlIHNwbGl0IHVwIGluIHRoZSBmdXR1cmUuXG4vLyBAVE9ETyBUaGVyZSBzaG91bGQgYmUgYSB1dGY4LXN0cmljdCBlbmNvZGluZyB0aGF0IHJlamVjdHMgaW52YWxpZCBVVEYtOCBjb2RlXG4vLyBwb2ludHMgYXMgdXNlZCBieSBDRVNVLTguXG5leHBvcnQgZnVuY3Rpb24gU3RyaW5nRGVjb2RlcihlbmNvZGluZykge1xuICB0aGlzLmVuY29kaW5nID0gKGVuY29kaW5nIHx8ICd1dGY4JykudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bLV9dLywgJycpO1xuICBhc3NlcnRFbmNvZGluZyhlbmNvZGluZyk7XG4gIHN3aXRjaCAodGhpcy5lbmNvZGluZykge1xuICAgIGNhc2UgJ3V0ZjgnOlxuICAgICAgLy8gQ0VTVS04IHJlcHJlc2VudHMgZWFjaCBvZiBTdXJyb2dhdGUgUGFpciBieSAzLWJ5dGVzXG4gICAgICB0aGlzLnN1cnJvZ2F0ZVNpemUgPSAzO1xuICAgICAgYnJlYWs7XG4gICAgY2FzZSAndWNzMic6XG4gICAgY2FzZSAndXRmMTZsZSc6XG4gICAgICAvLyBVVEYtMTYgcmVwcmVzZW50cyBlYWNoIG9mIFN1cnJvZ2F0ZSBQYWlyIGJ5IDItYnl0ZXNcbiAgICAgIHRoaXMuc3Vycm9nYXRlU2l6ZSA9IDI7XG4gICAgICB0aGlzLmRldGVjdEluY29tcGxldGVDaGFyID0gdXRmMTZEZXRlY3RJbmNvbXBsZXRlQ2hhcjtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgJ2Jhc2U2NCc6XG4gICAgICAvLyBCYXNlLTY0IHN0b3JlcyAzIGJ5dGVzIGluIDQgY2hhcnMsIGFuZCBwYWRzIHRoZSByZW1haW5kZXIuXG4gICAgICB0aGlzLnN1cnJvZ2F0ZVNpemUgPSAzO1xuICAgICAgdGhpcy5kZXRlY3RJbmNvbXBsZXRlQ2hhciA9IGJhc2U2NERldGVjdEluY29tcGxldGVDaGFyO1xuICAgICAgYnJlYWs7XG4gICAgZGVmYXVsdDpcbiAgICAgIHRoaXMud3JpdGUgPSBwYXNzVGhyb3VnaFdyaXRlO1xuICAgICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gRW5vdWdoIHNwYWNlIHRvIHN0b3JlIGFsbCBieXRlcyBvZiBhIHNpbmdsZSBjaGFyYWN0ZXIuIFVURi04IG5lZWRzIDRcbiAgLy8gYnl0ZXMsIGJ1dCBDRVNVLTggbWF5IHJlcXVpcmUgdXAgdG8gNiAoMyBieXRlcyBwZXIgc3Vycm9nYXRlKS5cbiAgdGhpcy5jaGFyQnVmZmVyID0gbmV3IEJ1ZmZlcig2KTtcbiAgLy8gTnVtYmVyIG9mIGJ5dGVzIHJlY2VpdmVkIGZvciB0aGUgY3VycmVudCBpbmNvbXBsZXRlIG11bHRpLWJ5dGUgY2hhcmFjdGVyLlxuICB0aGlzLmNoYXJSZWNlaXZlZCA9IDA7XG4gIC8vIE51bWJlciBvZiBieXRlcyBleHBlY3RlZCBmb3IgdGhlIGN1cnJlbnQgaW5jb21wbGV0ZSBtdWx0aS1ieXRlIGNoYXJhY3Rlci5cbiAgdGhpcy5jaGFyTGVuZ3RoID0gMDtcbn07XG5cblxuLy8gd3JpdGUgZGVjb2RlcyB0aGUgZ2l2ZW4gYnVmZmVyIGFuZCByZXR1cm5zIGl0IGFzIEpTIHN0cmluZyB0aGF0IGlzXG4vLyBndWFyYW50ZWVkIHRvIG5vdCBjb250YWluIGFueSBwYXJ0aWFsIG11bHRpLWJ5dGUgY2hhcmFjdGVycy4gQW55IHBhcnRpYWxcbi8vIGNoYXJhY3RlciBmb3VuZCBhdCB0aGUgZW5kIG9mIHRoZSBidWZmZXIgaXMgYnVmZmVyZWQgdXAsIGFuZCB3aWxsIGJlXG4vLyByZXR1cm5lZCB3aGVuIGNhbGxpbmcgd3JpdGUgYWdhaW4gd2l0aCB0aGUgcmVtYWluaW5nIGJ5dGVzLlxuLy9cbi8vIE5vdGU6IENvbnZlcnRpbmcgYSBCdWZmZXIgY29udGFpbmluZyBhbiBvcnBoYW4gc3Vycm9nYXRlIHRvIGEgU3RyaW5nXG4vLyBjdXJyZW50bHkgd29ya3MsIGJ1dCBjb252ZXJ0aW5nIGEgU3RyaW5nIHRvIGEgQnVmZmVyICh2aWEgYG5ldyBCdWZmZXJgLCBvclxuLy8gQnVmZmVyI3dyaXRlKSB3aWxsIHJlcGxhY2UgaW5jb21wbGV0ZSBzdXJyb2dhdGVzIHdpdGggdGhlIHVuaWNvZGVcbi8vIHJlcGxhY2VtZW50IGNoYXJhY3Rlci4gU2VlIGh0dHBzOi8vY29kZXJldmlldy5jaHJvbWl1bS5vcmcvMTIxMTczMDA5LyAuXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS53cml0ZSA9IGZ1bmN0aW9uKGJ1ZmZlcikge1xuICB2YXIgY2hhclN0ciA9ICcnO1xuICAvLyBpZiBvdXIgbGFzdCB3cml0ZSBlbmRlZCB3aXRoIGFuIGluY29tcGxldGUgbXVsdGlieXRlIGNoYXJhY3RlclxuICB3aGlsZSAodGhpcy5jaGFyTGVuZ3RoKSB7XG4gICAgLy8gZGV0ZXJtaW5lIGhvdyBtYW55IHJlbWFpbmluZyBieXRlcyB0aGlzIGJ1ZmZlciBoYXMgdG8gb2ZmZXIgZm9yIHRoaXMgY2hhclxuICAgIHZhciBhdmFpbGFibGUgPSAoYnVmZmVyLmxlbmd0aCA+PSB0aGlzLmNoYXJMZW5ndGggLSB0aGlzLmNoYXJSZWNlaXZlZCkgP1xuICAgICAgICB0aGlzLmNoYXJMZW5ndGggLSB0aGlzLmNoYXJSZWNlaXZlZCA6XG4gICAgICAgIGJ1ZmZlci5sZW5ndGg7XG5cbiAgICAvLyBhZGQgdGhlIG5ldyBieXRlcyB0byB0aGUgY2hhciBidWZmZXJcbiAgICBidWZmZXIuY29weSh0aGlzLmNoYXJCdWZmZXIsIHRoaXMuY2hhclJlY2VpdmVkLCAwLCBhdmFpbGFibGUpO1xuICAgIHRoaXMuY2hhclJlY2VpdmVkICs9IGF2YWlsYWJsZTtcblxuICAgIGlmICh0aGlzLmNoYXJSZWNlaXZlZCA8IHRoaXMuY2hhckxlbmd0aCkge1xuICAgICAgLy8gc3RpbGwgbm90IGVub3VnaCBjaGFycyBpbiB0aGlzIGJ1ZmZlcj8gd2FpdCBmb3IgbW9yZSAuLi5cbiAgICAgIHJldHVybiAnJztcbiAgICB9XG5cbiAgICAvLyByZW1vdmUgYnl0ZXMgYmVsb25naW5nIHRvIHRoZSBjdXJyZW50IGNoYXJhY3RlciBmcm9tIHRoZSBidWZmZXJcbiAgICBidWZmZXIgPSBidWZmZXIuc2xpY2UoYXZhaWxhYmxlLCBidWZmZXIubGVuZ3RoKTtcblxuICAgIC8vIGdldCB0aGUgY2hhcmFjdGVyIHRoYXQgd2FzIHNwbGl0XG4gICAgY2hhclN0ciA9IHRoaXMuY2hhckJ1ZmZlci5zbGljZSgwLCB0aGlzLmNoYXJMZW5ndGgpLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcpO1xuXG4gICAgLy8gQ0VTVS04OiBsZWFkIHN1cnJvZ2F0ZSAoRDgwMC1EQkZGKSBpcyBhbHNvIHRoZSBpbmNvbXBsZXRlIGNoYXJhY3RlclxuICAgIHZhciBjaGFyQ29kZSA9IGNoYXJTdHIuY2hhckNvZGVBdChjaGFyU3RyLmxlbmd0aCAtIDEpO1xuICAgIGlmIChjaGFyQ29kZSA+PSAweEQ4MDAgJiYgY2hhckNvZGUgPD0gMHhEQkZGKSB7XG4gICAgICB0aGlzLmNoYXJMZW5ndGggKz0gdGhpcy5zdXJyb2dhdGVTaXplO1xuICAgICAgY2hhclN0ciA9ICcnO1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHRoaXMuY2hhclJlY2VpdmVkID0gdGhpcy5jaGFyTGVuZ3RoID0gMDtcblxuICAgIC8vIGlmIHRoZXJlIGFyZSBubyBtb3JlIGJ5dGVzIGluIHRoaXMgYnVmZmVyLCBqdXN0IGVtaXQgb3VyIGNoYXJcbiAgICBpZiAoYnVmZmVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIGNoYXJTdHI7XG4gICAgfVxuICAgIGJyZWFrO1xuICB9XG5cbiAgLy8gZGV0ZXJtaW5lIGFuZCBzZXQgY2hhckxlbmd0aCAvIGNoYXJSZWNlaXZlZFxuICB0aGlzLmRldGVjdEluY29tcGxldGVDaGFyKGJ1ZmZlcik7XG5cbiAgdmFyIGVuZCA9IGJ1ZmZlci5sZW5ndGg7XG4gIGlmICh0aGlzLmNoYXJMZW5ndGgpIHtcbiAgICAvLyBidWZmZXIgdGhlIGluY29tcGxldGUgY2hhcmFjdGVyIGJ5dGVzIHdlIGdvdFxuICAgIGJ1ZmZlci5jb3B5KHRoaXMuY2hhckJ1ZmZlciwgMCwgYnVmZmVyLmxlbmd0aCAtIHRoaXMuY2hhclJlY2VpdmVkLCBlbmQpO1xuICAgIGVuZCAtPSB0aGlzLmNoYXJSZWNlaXZlZDtcbiAgfVxuXG4gIGNoYXJTdHIgKz0gYnVmZmVyLnRvU3RyaW5nKHRoaXMuZW5jb2RpbmcsIDAsIGVuZCk7XG5cbiAgdmFyIGVuZCA9IGNoYXJTdHIubGVuZ3RoIC0gMTtcbiAgdmFyIGNoYXJDb2RlID0gY2hhclN0ci5jaGFyQ29kZUF0KGVuZCk7XG4gIC8vIENFU1UtODogbGVhZCBzdXJyb2dhdGUgKEQ4MDAtREJGRikgaXMgYWxzbyB0aGUgaW5jb21wbGV0ZSBjaGFyYWN0ZXJcbiAgaWYgKGNoYXJDb2RlID49IDB4RDgwMCAmJiBjaGFyQ29kZSA8PSAweERCRkYpIHtcbiAgICB2YXIgc2l6ZSA9IHRoaXMuc3Vycm9nYXRlU2l6ZTtcbiAgICB0aGlzLmNoYXJMZW5ndGggKz0gc2l6ZTtcbiAgICB0aGlzLmNoYXJSZWNlaXZlZCArPSBzaXplO1xuICAgIHRoaXMuY2hhckJ1ZmZlci5jb3B5KHRoaXMuY2hhckJ1ZmZlciwgc2l6ZSwgMCwgc2l6ZSk7XG4gICAgYnVmZmVyLmNvcHkodGhpcy5jaGFyQnVmZmVyLCAwLCAwLCBzaXplKTtcbiAgICByZXR1cm4gY2hhclN0ci5zdWJzdHJpbmcoMCwgZW5kKTtcbiAgfVxuXG4gIC8vIG9yIGp1c3QgZW1pdCB0aGUgY2hhclN0clxuICByZXR1cm4gY2hhclN0cjtcbn07XG5cbi8vIGRldGVjdEluY29tcGxldGVDaGFyIGRldGVybWluZXMgaWYgdGhlcmUgaXMgYW4gaW5jb21wbGV0ZSBVVEYtOCBjaGFyYWN0ZXIgYXRcbi8vIHRoZSBlbmQgb2YgdGhlIGdpdmVuIGJ1ZmZlci4gSWYgc28sIGl0IHNldHMgdGhpcy5jaGFyTGVuZ3RoIHRvIHRoZSBieXRlXG4vLyBsZW5ndGggdGhhdCBjaGFyYWN0ZXIsIGFuZCBzZXRzIHRoaXMuY2hhclJlY2VpdmVkIHRvIHRoZSBudW1iZXIgb2YgYnl0ZXNcbi8vIHRoYXQgYXJlIGF2YWlsYWJsZSBmb3IgdGhpcyBjaGFyYWN0ZXIuXG5TdHJpbmdEZWNvZGVyLnByb3RvdHlwZS5kZXRlY3RJbmNvbXBsZXRlQ2hhciA9IGZ1bmN0aW9uKGJ1ZmZlcikge1xuICAvLyBkZXRlcm1pbmUgaG93IG1hbnkgYnl0ZXMgd2UgaGF2ZSB0byBjaGVjayBhdCB0aGUgZW5kIG9mIHRoaXMgYnVmZmVyXG4gIHZhciBpID0gKGJ1ZmZlci5sZW5ndGggPj0gMykgPyAzIDogYnVmZmVyLmxlbmd0aDtcblxuICAvLyBGaWd1cmUgb3V0IGlmIG9uZSBvZiB0aGUgbGFzdCBpIGJ5dGVzIG9mIG91ciBidWZmZXIgYW5ub3VuY2VzIGFuXG4gIC8vIGluY29tcGxldGUgY2hhci5cbiAgZm9yICg7IGkgPiAwOyBpLS0pIHtcbiAgICB2YXIgYyA9IGJ1ZmZlcltidWZmZXIubGVuZ3RoIC0gaV07XG5cbiAgICAvLyBTZWUgaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9VVEYtOCNEZXNjcmlwdGlvblxuXG4gICAgLy8gMTEwWFhYWFhcbiAgICBpZiAoaSA9PSAxICYmIGMgPj4gNSA9PSAweDA2KSB7XG4gICAgICB0aGlzLmNoYXJMZW5ndGggPSAyO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgLy8gMTExMFhYWFhcbiAgICBpZiAoaSA8PSAyICYmIGMgPj4gNCA9PSAweDBFKSB7XG4gICAgICB0aGlzLmNoYXJMZW5ndGggPSAzO1xuICAgICAgYnJlYWs7XG4gICAgfVxuXG4gICAgLy8gMTExMTBYWFhcbiAgICBpZiAoaSA8PSAzICYmIGMgPj4gMyA9PSAweDFFKSB7XG4gICAgICB0aGlzLmNoYXJMZW5ndGggPSA0O1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHRoaXMuY2hhclJlY2VpdmVkID0gaTtcbn07XG5cblN0cmluZ0RlY29kZXIucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKGJ1ZmZlcikge1xuICB2YXIgcmVzID0gJyc7XG4gIGlmIChidWZmZXIgJiYgYnVmZmVyLmxlbmd0aClcbiAgICByZXMgPSB0aGlzLndyaXRlKGJ1ZmZlcik7XG5cbiAgaWYgKHRoaXMuY2hhclJlY2VpdmVkKSB7XG4gICAgdmFyIGNyID0gdGhpcy5jaGFyUmVjZWl2ZWQ7XG4gICAgdmFyIGJ1ZiA9IHRoaXMuY2hhckJ1ZmZlcjtcbiAgICB2YXIgZW5jID0gdGhpcy5lbmNvZGluZztcbiAgICByZXMgKz0gYnVmLnNsaWNlKDAsIGNyKS50b1N0cmluZyhlbmMpO1xuICB9XG5cbiAgcmV0dXJuIHJlcztcbn07XG5cbmZ1bmN0aW9uIHBhc3NUaHJvdWdoV3JpdGUoYnVmZmVyKSB7XG4gIHJldHVybiBidWZmZXIudG9TdHJpbmcodGhpcy5lbmNvZGluZyk7XG59XG5cbmZ1bmN0aW9uIHV0ZjE2RGV0ZWN0SW5jb21wbGV0ZUNoYXIoYnVmZmVyKSB7XG4gIHRoaXMuY2hhclJlY2VpdmVkID0gYnVmZmVyLmxlbmd0aCAlIDI7XG4gIHRoaXMuY2hhckxlbmd0aCA9IHRoaXMuY2hhclJlY2VpdmVkID8gMiA6IDA7XG59XG5cbmZ1bmN0aW9uIGJhc2U2NERldGVjdEluY29tcGxldGVDaGFyKGJ1ZmZlcikge1xuICB0aGlzLmNoYXJSZWNlaXZlZCA9IGJ1ZmZlci5sZW5ndGggJSAzO1xuICB0aGlzLmNoYXJMZW5ndGggPSB0aGlzLmNoYXJSZWNlaXZlZCA/IDMgOiAwO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5cblJlYWRhYmxlLlJlYWRhYmxlU3RhdGUgPSBSZWFkYWJsZVN0YXRlO1xuaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICdldmVudHMnO1xuaW1wb3J0IHtpbmhlcml0cywgZGVidWdsb2d9IGZyb20gJ3V0aWwnO1xuaW1wb3J0IEJ1ZmZlckxpc3QgZnJvbSAnLi9idWZmZXItbGlzdCc7XG5pbXBvcnQge1N0cmluZ0RlY29kZXJ9IGZyb20gJ3N0cmluZ19kZWNvZGVyJztcbmltcG9ydCB7RHVwbGV4fSBmcm9tICcuL2R1cGxleCc7XG5pbXBvcnQge25leHRUaWNrfSBmcm9tICdwcm9jZXNzJztcblxudmFyIGRlYnVnID0gZGVidWdsb2coJ3N0cmVhbScpO1xuaW5oZXJpdHMoUmVhZGFibGUsIEV2ZW50RW1pdHRlcik7XG5cbmZ1bmN0aW9uIHByZXBlbmRMaXN0ZW5lcihlbWl0dGVyLCBldmVudCwgZm4pIHtcbiAgLy8gU2FkbHkgdGhpcyBpcyBub3QgY2FjaGVhYmxlIGFzIHNvbWUgbGlicmFyaWVzIGJ1bmRsZSB0aGVpciBvd25cbiAgLy8gZXZlbnQgZW1pdHRlciBpbXBsZW1lbnRhdGlvbiB3aXRoIHRoZW0uXG4gIGlmICh0eXBlb2YgZW1pdHRlci5wcmVwZW5kTGlzdGVuZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gZW1pdHRlci5wcmVwZW5kTGlzdGVuZXIoZXZlbnQsIGZuKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBUaGlzIGlzIGEgaGFjayB0byBtYWtlIHN1cmUgdGhhdCBvdXIgZXJyb3IgaGFuZGxlciBpcyBhdHRhY2hlZCBiZWZvcmUgYW55XG4gICAgLy8gdXNlcmxhbmQgb25lcy4gIE5FVkVSIERPIFRISVMuIFRoaXMgaXMgaGVyZSBvbmx5IGJlY2F1c2UgdGhpcyBjb2RlIG5lZWRzXG4gICAgLy8gdG8gY29udGludWUgdG8gd29yayB3aXRoIG9sZGVyIHZlcnNpb25zIG9mIE5vZGUuanMgdGhhdCBkbyBub3QgaW5jbHVkZVxuICAgIC8vIHRoZSBwcmVwZW5kTGlzdGVuZXIoKSBtZXRob2QuIFRoZSBnb2FsIGlzIHRvIGV2ZW50dWFsbHkgcmVtb3ZlIHRoaXMgaGFjay5cbiAgICBpZiAoIWVtaXR0ZXIuX2V2ZW50cyB8fCAhZW1pdHRlci5fZXZlbnRzW2V2ZW50XSlcbiAgICAgIGVtaXR0ZXIub24oZXZlbnQsIGZuKTtcbiAgICBlbHNlIGlmIChBcnJheS5pc0FycmF5KGVtaXR0ZXIuX2V2ZW50c1tldmVudF0pKVxuICAgICAgZW1pdHRlci5fZXZlbnRzW2V2ZW50XS51bnNoaWZ0KGZuKTtcbiAgICBlbHNlXG4gICAgICBlbWl0dGVyLl9ldmVudHNbZXZlbnRdID0gW2ZuLCBlbWl0dGVyLl9ldmVudHNbZXZlbnRdXTtcbiAgfVxufVxuZnVuY3Rpb24gbGlzdGVuZXJDb3VudCAoZW1pdHRlciwgdHlwZSkge1xuICByZXR1cm4gZW1pdHRlci5saXN0ZW5lcnModHlwZSkubGVuZ3RoO1xufVxuZnVuY3Rpb24gUmVhZGFibGVTdGF0ZShvcHRpb25zLCBzdHJlYW0pIHtcblxuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcblxuICAvLyBvYmplY3Qgc3RyZWFtIGZsYWcuIFVzZWQgdG8gbWFrZSByZWFkKG4pIGlnbm9yZSBuIGFuZCB0b1xuICAvLyBtYWtlIGFsbCB0aGUgYnVmZmVyIG1lcmdpbmcgYW5kIGxlbmd0aCBjaGVja3MgZ28gYXdheVxuICB0aGlzLm9iamVjdE1vZGUgPSAhIW9wdGlvbnMub2JqZWN0TW9kZTtcblxuICBpZiAoc3RyZWFtIGluc3RhbmNlb2YgRHVwbGV4KSB0aGlzLm9iamVjdE1vZGUgPSB0aGlzLm9iamVjdE1vZGUgfHwgISFvcHRpb25zLnJlYWRhYmxlT2JqZWN0TW9kZTtcblxuICAvLyB0aGUgcG9pbnQgYXQgd2hpY2ggaXQgc3RvcHMgY2FsbGluZyBfcmVhZCgpIHRvIGZpbGwgdGhlIGJ1ZmZlclxuICAvLyBOb3RlOiAwIGlzIGEgdmFsaWQgdmFsdWUsIG1lYW5zIFwiZG9uJ3QgY2FsbCBfcmVhZCBwcmVlbXB0aXZlbHkgZXZlclwiXG4gIHZhciBod20gPSBvcHRpb25zLmhpZ2hXYXRlck1hcms7XG4gIHZhciBkZWZhdWx0SHdtID0gdGhpcy5vYmplY3RNb2RlID8gMTYgOiAxNiAqIDEwMjQ7XG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IGh3bSB8fCBod20gPT09IDAgPyBod20gOiBkZWZhdWx0SHdtO1xuXG4gIC8vIGNhc3QgdG8gaW50cy5cbiAgdGhpcy5oaWdoV2F0ZXJNYXJrID0gfiB+dGhpcy5oaWdoV2F0ZXJNYXJrO1xuXG4gIC8vIEEgbGlua2VkIGxpc3QgaXMgdXNlZCB0byBzdG9yZSBkYXRhIGNodW5rcyBpbnN0ZWFkIG9mIGFuIGFycmF5IGJlY2F1c2UgdGhlXG4gIC8vIGxpbmtlZCBsaXN0IGNhbiByZW1vdmUgZWxlbWVudHMgZnJvbSB0aGUgYmVnaW5uaW5nIGZhc3RlciB0aGFuXG4gIC8vIGFycmF5LnNoaWZ0KClcbiAgdGhpcy5idWZmZXIgPSBuZXcgQnVmZmVyTGlzdCgpO1xuICB0aGlzLmxlbmd0aCA9IDA7XG4gIHRoaXMucGlwZXMgPSBudWxsO1xuICB0aGlzLnBpcGVzQ291bnQgPSAwO1xuICB0aGlzLmZsb3dpbmcgPSBudWxsO1xuICB0aGlzLmVuZGVkID0gZmFsc2U7XG4gIHRoaXMuZW5kRW1pdHRlZCA9IGZhbHNlO1xuICB0aGlzLnJlYWRpbmcgPSBmYWxzZTtcblxuICAvLyBhIGZsYWcgdG8gYmUgYWJsZSB0byB0ZWxsIGlmIHRoZSBvbndyaXRlIGNiIGlzIGNhbGxlZCBpbW1lZGlhdGVseSxcbiAgLy8gb3Igb24gYSBsYXRlciB0aWNrLiAgV2Ugc2V0IHRoaXMgdG8gdHJ1ZSBhdCBmaXJzdCwgYmVjYXVzZSBhbnlcbiAgLy8gYWN0aW9ucyB0aGF0IHNob3VsZG4ndCBoYXBwZW4gdW50aWwgXCJsYXRlclwiIHNob3VsZCBnZW5lcmFsbHkgYWxzb1xuICAvLyBub3QgaGFwcGVuIGJlZm9yZSB0aGUgZmlyc3Qgd3JpdGUgY2FsbC5cbiAgdGhpcy5zeW5jID0gdHJ1ZTtcblxuICAvLyB3aGVuZXZlciB3ZSByZXR1cm4gbnVsbCwgdGhlbiB3ZSBzZXQgYSBmbGFnIHRvIHNheVxuICAvLyB0aGF0IHdlJ3JlIGF3YWl0aW5nIGEgJ3JlYWRhYmxlJyBldmVudCBlbWlzc2lvbi5cbiAgdGhpcy5uZWVkUmVhZGFibGUgPSBmYWxzZTtcbiAgdGhpcy5lbWl0dGVkUmVhZGFibGUgPSBmYWxzZTtcbiAgdGhpcy5yZWFkYWJsZUxpc3RlbmluZyA9IGZhbHNlO1xuICB0aGlzLnJlc3VtZVNjaGVkdWxlZCA9IGZhbHNlO1xuXG4gIC8vIENyeXB0byBpcyBraW5kIG9mIG9sZCBhbmQgY3J1c3R5LiAgSGlzdG9yaWNhbGx5LCBpdHMgZGVmYXVsdCBzdHJpbmdcbiAgLy8gZW5jb2RpbmcgaXMgJ2JpbmFyeScgc28gd2UgaGF2ZSB0byBtYWtlIHRoaXMgY29uZmlndXJhYmxlLlxuICAvLyBFdmVyeXRoaW5nIGVsc2UgaW4gdGhlIHVuaXZlcnNlIHVzZXMgJ3V0ZjgnLCB0aG91Z2guXG4gIHRoaXMuZGVmYXVsdEVuY29kaW5nID0gb3B0aW9ucy5kZWZhdWx0RW5jb2RpbmcgfHwgJ3V0ZjgnO1xuXG4gIC8vIHdoZW4gcGlwaW5nLCB3ZSBvbmx5IGNhcmUgYWJvdXQgJ3JlYWRhYmxlJyBldmVudHMgdGhhdCBoYXBwZW5cbiAgLy8gYWZ0ZXIgcmVhZCgpaW5nIGFsbCB0aGUgYnl0ZXMgYW5kIG5vdCBnZXR0aW5nIGFueSBwdXNoYmFjay5cbiAgdGhpcy5yYW5PdXQgPSBmYWxzZTtcblxuICAvLyB0aGUgbnVtYmVyIG9mIHdyaXRlcnMgdGhhdCBhcmUgYXdhaXRpbmcgYSBkcmFpbiBldmVudCBpbiAucGlwZSgpc1xuICB0aGlzLmF3YWl0RHJhaW4gPSAwO1xuXG4gIC8vIGlmIHRydWUsIGEgbWF5YmVSZWFkTW9yZSBoYXMgYmVlbiBzY2hlZHVsZWRcbiAgdGhpcy5yZWFkaW5nTW9yZSA9IGZhbHNlO1xuXG4gIHRoaXMuZGVjb2RlciA9IG51bGw7XG4gIHRoaXMuZW5jb2RpbmcgPSBudWxsO1xuICBpZiAob3B0aW9ucy5lbmNvZGluZykge1xuICAgIHRoaXMuZGVjb2RlciA9IG5ldyBTdHJpbmdEZWNvZGVyKG9wdGlvbnMuZW5jb2RpbmcpO1xuICAgIHRoaXMuZW5jb2RpbmcgPSBvcHRpb25zLmVuY29kaW5nO1xuICB9XG59XG5leHBvcnQgZGVmYXVsdCBSZWFkYWJsZTtcbmV4cG9ydCBmdW5jdGlvbiBSZWFkYWJsZShvcHRpb25zKSB7XG5cbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFJlYWRhYmxlKSkgcmV0dXJuIG5ldyBSZWFkYWJsZShvcHRpb25zKTtcblxuICB0aGlzLl9yZWFkYWJsZVN0YXRlID0gbmV3IFJlYWRhYmxlU3RhdGUob3B0aW9ucywgdGhpcyk7XG5cbiAgLy8gbGVnYWN5XG4gIHRoaXMucmVhZGFibGUgPSB0cnVlO1xuXG4gIGlmIChvcHRpb25zICYmIHR5cGVvZiBvcHRpb25zLnJlYWQgPT09ICdmdW5jdGlvbicpIHRoaXMuX3JlYWQgPSBvcHRpb25zLnJlYWQ7XG5cbiAgRXZlbnRFbWl0dGVyLmNhbGwodGhpcyk7XG59XG5cbi8vIE1hbnVhbGx5IHNob3ZlIHNvbWV0aGluZyBpbnRvIHRoZSByZWFkKCkgYnVmZmVyLlxuLy8gVGhpcyByZXR1cm5zIHRydWUgaWYgdGhlIGhpZ2hXYXRlck1hcmsgaGFzIG5vdCBiZWVuIGhpdCB5ZXQsXG4vLyBzaW1pbGFyIHRvIGhvdyBXcml0YWJsZS53cml0ZSgpIHJldHVybnMgdHJ1ZSBpZiB5b3Ugc2hvdWxkXG4vLyB3cml0ZSgpIHNvbWUgbW9yZS5cblJlYWRhYmxlLnByb3RvdHlwZS5wdXNoID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZykge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuXG4gIGlmICghc3RhdGUub2JqZWN0TW9kZSAmJiB0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnKSB7XG4gICAgZW5jb2RpbmcgPSBlbmNvZGluZyB8fCBzdGF0ZS5kZWZhdWx0RW5jb2Rpbmc7XG4gICAgaWYgKGVuY29kaW5nICE9PSBzdGF0ZS5lbmNvZGluZykge1xuICAgICAgY2h1bmsgPSBCdWZmZXIuZnJvbShjaHVuaywgZW5jb2RpbmcpO1xuICAgICAgZW5jb2RpbmcgPSAnJztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVhZGFibGVBZGRDaHVuayh0aGlzLCBzdGF0ZSwgY2h1bmssIGVuY29kaW5nLCBmYWxzZSk7XG59O1xuXG4vLyBVbnNoaWZ0IHNob3VsZCAqYWx3YXlzKiBiZSBzb21ldGhpbmcgZGlyZWN0bHkgb3V0IG9mIHJlYWQoKVxuUmVhZGFibGUucHJvdG90eXBlLnVuc2hpZnQgPSBmdW5jdGlvbiAoY2h1bmspIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgcmV0dXJuIHJlYWRhYmxlQWRkQ2h1bmsodGhpcywgc3RhdGUsIGNodW5rLCAnJywgdHJ1ZSk7XG59O1xuXG5SZWFkYWJsZS5wcm90b3R5cGUuaXNQYXVzZWQgPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgPT09IGZhbHNlO1xufTtcblxuZnVuY3Rpb24gcmVhZGFibGVBZGRDaHVuayhzdHJlYW0sIHN0YXRlLCBjaHVuaywgZW5jb2RpbmcsIGFkZFRvRnJvbnQpIHtcbiAgdmFyIGVyID0gY2h1bmtJbnZhbGlkKHN0YXRlLCBjaHVuayk7XG4gIGlmIChlcikge1xuICAgIHN0cmVhbS5lbWl0KCdlcnJvcicsIGVyKTtcbiAgfSBlbHNlIGlmIChjaHVuayA9PT0gbnVsbCkge1xuICAgIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcbiAgICBvbkVvZkNodW5rKHN0cmVhbSwgc3RhdGUpO1xuICB9IGVsc2UgaWYgKHN0YXRlLm9iamVjdE1vZGUgfHwgY2h1bmsgJiYgY2h1bmsubGVuZ3RoID4gMCkge1xuICAgIGlmIChzdGF0ZS5lbmRlZCAmJiAhYWRkVG9Gcm9udCkge1xuICAgICAgdmFyIGUgPSBuZXcgRXJyb3IoJ3N0cmVhbS5wdXNoKCkgYWZ0ZXIgRU9GJyk7XG4gICAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlKTtcbiAgICB9IGVsc2UgaWYgKHN0YXRlLmVuZEVtaXR0ZWQgJiYgYWRkVG9Gcm9udCkge1xuICAgICAgdmFyIF9lID0gbmV3IEVycm9yKCdzdHJlYW0udW5zaGlmdCgpIGFmdGVyIGVuZCBldmVudCcpO1xuICAgICAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgX2UpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc2tpcEFkZDtcbiAgICAgIGlmIChzdGF0ZS5kZWNvZGVyICYmICFhZGRUb0Zyb250ICYmICFlbmNvZGluZykge1xuICAgICAgICBjaHVuayA9IHN0YXRlLmRlY29kZXIud3JpdGUoY2h1bmspO1xuICAgICAgICBza2lwQWRkID0gIXN0YXRlLm9iamVjdE1vZGUgJiYgY2h1bmsubGVuZ3RoID09PSAwO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWFkZFRvRnJvbnQpIHN0YXRlLnJlYWRpbmcgPSBmYWxzZTtcblxuICAgICAgLy8gRG9uJ3QgYWRkIHRvIHRoZSBidWZmZXIgaWYgd2UndmUgZGVjb2RlZCB0byBhbiBlbXB0eSBzdHJpbmcgY2h1bmsgYW5kXG4gICAgICAvLyB3ZSdyZSBub3QgaW4gb2JqZWN0IG1vZGVcbiAgICAgIGlmICghc2tpcEFkZCkge1xuICAgICAgICAvLyBpZiB3ZSB3YW50IHRoZSBkYXRhIG5vdywganVzdCBlbWl0IGl0LlxuICAgICAgICBpZiAoc3RhdGUuZmxvd2luZyAmJiBzdGF0ZS5sZW5ndGggPT09IDAgJiYgIXN0YXRlLnN5bmMpIHtcbiAgICAgICAgICBzdHJlYW0uZW1pdCgnZGF0YScsIGNodW5rKTtcbiAgICAgICAgICBzdHJlYW0ucmVhZCgwKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvLyB1cGRhdGUgdGhlIGJ1ZmZlciBpbmZvLlxuICAgICAgICAgIHN0YXRlLmxlbmd0aCArPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICAgICAgICBpZiAoYWRkVG9Gcm9udCkgc3RhdGUuYnVmZmVyLnVuc2hpZnQoY2h1bmspO2Vsc2Ugc3RhdGUuYnVmZmVyLnB1c2goY2h1bmspO1xuXG4gICAgICAgICAgaWYgKHN0YXRlLm5lZWRSZWFkYWJsZSkgZW1pdFJlYWRhYmxlKHN0cmVhbSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbWF5YmVSZWFkTW9yZShzdHJlYW0sIHN0YXRlKTtcbiAgICB9XG4gIH0gZWxzZSBpZiAoIWFkZFRvRnJvbnQpIHtcbiAgICBzdGF0ZS5yZWFkaW5nID0gZmFsc2U7XG4gIH1cblxuICByZXR1cm4gbmVlZE1vcmVEYXRhKHN0YXRlKTtcbn1cblxuLy8gaWYgaXQncyBwYXN0IHRoZSBoaWdoIHdhdGVyIG1hcmssIHdlIGNhbiBwdXNoIGluIHNvbWUgbW9yZS5cbi8vIEFsc28sIGlmIHdlIGhhdmUgbm8gZGF0YSB5ZXQsIHdlIGNhbiBzdGFuZCBzb21lXG4vLyBtb3JlIGJ5dGVzLiAgVGhpcyBpcyB0byB3b3JrIGFyb3VuZCBjYXNlcyB3aGVyZSBod209MCxcbi8vIHN1Y2ggYXMgdGhlIHJlcGwuICBBbHNvLCBpZiB0aGUgcHVzaCgpIHRyaWdnZXJlZCBhXG4vLyByZWFkYWJsZSBldmVudCwgYW5kIHRoZSB1c2VyIGNhbGxlZCByZWFkKGxhcmdlTnVtYmVyKSBzdWNoIHRoYXRcbi8vIG5lZWRSZWFkYWJsZSB3YXMgc2V0LCB0aGVuIHdlIG91Z2h0IHRvIHB1c2ggbW9yZSwgc28gdGhhdCBhbm90aGVyXG4vLyAncmVhZGFibGUnIGV2ZW50IHdpbGwgYmUgdHJpZ2dlcmVkLlxuZnVuY3Rpb24gbmVlZE1vcmVEYXRhKHN0YXRlKSB7XG4gIHJldHVybiAhc3RhdGUuZW5kZWQgJiYgKHN0YXRlLm5lZWRSZWFkYWJsZSB8fCBzdGF0ZS5sZW5ndGggPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrIHx8IHN0YXRlLmxlbmd0aCA9PT0gMCk7XG59XG5cbi8vIGJhY2t3YXJkcyBjb21wYXRpYmlsaXR5LlxuUmVhZGFibGUucHJvdG90eXBlLnNldEVuY29kaW5nID0gZnVuY3Rpb24gKGVuYykge1xuICB0aGlzLl9yZWFkYWJsZVN0YXRlLmRlY29kZXIgPSBuZXcgU3RyaW5nRGVjb2RlcihlbmMpO1xuICB0aGlzLl9yZWFkYWJsZVN0YXRlLmVuY29kaW5nID0gZW5jO1xuICByZXR1cm4gdGhpcztcbn07XG5cbi8vIERvbid0IHJhaXNlIHRoZSBod20gPiA4TUJcbnZhciBNQVhfSFdNID0gMHg4MDAwMDA7XG5mdW5jdGlvbiBjb21wdXRlTmV3SGlnaFdhdGVyTWFyayhuKSB7XG4gIGlmIChuID49IE1BWF9IV00pIHtcbiAgICBuID0gTUFYX0hXTTtcbiAgfSBlbHNlIHtcbiAgICAvLyBHZXQgdGhlIG5leHQgaGlnaGVzdCBwb3dlciBvZiAyIHRvIHByZXZlbnQgaW5jcmVhc2luZyBod20gZXhjZXNzaXZlbHkgaW5cbiAgICAvLyB0aW55IGFtb3VudHNcbiAgICBuLS07XG4gICAgbiB8PSBuID4+PiAxO1xuICAgIG4gfD0gbiA+Pj4gMjtcbiAgICBuIHw9IG4gPj4+IDQ7XG4gICAgbiB8PSBuID4+PiA4O1xuICAgIG4gfD0gbiA+Pj4gMTY7XG4gICAgbisrO1xuICB9XG4gIHJldHVybiBuO1xufVxuXG4vLyBUaGlzIGZ1bmN0aW9uIGlzIGRlc2lnbmVkIHRvIGJlIGlubGluYWJsZSwgc28gcGxlYXNlIHRha2UgY2FyZSB3aGVuIG1ha2luZ1xuLy8gY2hhbmdlcyB0byB0aGUgZnVuY3Rpb24gYm9keS5cbmZ1bmN0aW9uIGhvd011Y2hUb1JlYWQobiwgc3RhdGUpIHtcbiAgaWYgKG4gPD0gMCB8fCBzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuZW5kZWQpIHJldHVybiAwO1xuICBpZiAoc3RhdGUub2JqZWN0TW9kZSkgcmV0dXJuIDE7XG4gIGlmIChuICE9PSBuKSB7XG4gICAgLy8gT25seSBmbG93IG9uZSBidWZmZXIgYXQgYSB0aW1lXG4gICAgaWYgKHN0YXRlLmZsb3dpbmcgJiYgc3RhdGUubGVuZ3RoKSByZXR1cm4gc3RhdGUuYnVmZmVyLmhlYWQuZGF0YS5sZW5ndGg7ZWxzZSByZXR1cm4gc3RhdGUubGVuZ3RoO1xuICB9XG4gIC8vIElmIHdlJ3JlIGFza2luZyBmb3IgbW9yZSB0aGFuIHRoZSBjdXJyZW50IGh3bSwgdGhlbiByYWlzZSB0aGUgaHdtLlxuICBpZiAobiA+IHN0YXRlLmhpZ2hXYXRlck1hcmspIHN0YXRlLmhpZ2hXYXRlck1hcmsgPSBjb21wdXRlTmV3SGlnaFdhdGVyTWFyayhuKTtcbiAgaWYgKG4gPD0gc3RhdGUubGVuZ3RoKSByZXR1cm4gbjtcbiAgLy8gRG9uJ3QgaGF2ZSBlbm91Z2hcbiAgaWYgKCFzdGF0ZS5lbmRlZCkge1xuICAgIHN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG4gICAgcmV0dXJuIDA7XG4gIH1cbiAgcmV0dXJuIHN0YXRlLmxlbmd0aDtcbn1cblxuLy8geW91IGNhbiBvdmVycmlkZSBlaXRoZXIgdGhpcyBtZXRob2QsIG9yIHRoZSBhc3luYyBfcmVhZChuKSBiZWxvdy5cblJlYWRhYmxlLnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24gKG4pIHtcbiAgZGVidWcoJ3JlYWQnLCBuKTtcbiAgbiA9IHBhcnNlSW50KG4sIDEwKTtcbiAgdmFyIHN0YXRlID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgdmFyIG5PcmlnID0gbjtcblxuICBpZiAobiAhPT0gMCkgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gZmFsc2U7XG5cbiAgLy8gaWYgd2UncmUgZG9pbmcgcmVhZCgwKSB0byB0cmlnZ2VyIGEgcmVhZGFibGUgZXZlbnQsIGJ1dCB3ZVxuICAvLyBhbHJlYWR5IGhhdmUgYSBidW5jaCBvZiBkYXRhIGluIHRoZSBidWZmZXIsIHRoZW4ganVzdCB0cmlnZ2VyXG4gIC8vIHRoZSAncmVhZGFibGUnIGV2ZW50IGFuZCBtb3ZlIG9uLlxuICBpZiAobiA9PT0gMCAmJiBzdGF0ZS5uZWVkUmVhZGFibGUgJiYgKHN0YXRlLmxlbmd0aCA+PSBzdGF0ZS5oaWdoV2F0ZXJNYXJrIHx8IHN0YXRlLmVuZGVkKSkge1xuICAgIGRlYnVnKCdyZWFkOiBlbWl0UmVhZGFibGUnLCBzdGF0ZS5sZW5ndGgsIHN0YXRlLmVuZGVkKTtcbiAgICBpZiAoc3RhdGUubGVuZ3RoID09PSAwICYmIHN0YXRlLmVuZGVkKSBlbmRSZWFkYWJsZSh0aGlzKTtlbHNlIGVtaXRSZWFkYWJsZSh0aGlzKTtcbiAgICByZXR1cm4gbnVsbDtcbiAgfVxuXG4gIG4gPSBob3dNdWNoVG9SZWFkKG4sIHN0YXRlKTtcblxuICAvLyBpZiB3ZSd2ZSBlbmRlZCwgYW5kIHdlJ3JlIG5vdyBjbGVhciwgdGhlbiBmaW5pc2ggaXQgdXAuXG4gIGlmIChuID09PSAwICYmIHN0YXRlLmVuZGVkKSB7XG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgZW5kUmVhZGFibGUodGhpcyk7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cblxuICAvLyBBbGwgdGhlIGFjdHVhbCBjaHVuayBnZW5lcmF0aW9uIGxvZ2ljIG5lZWRzIHRvIGJlXG4gIC8vICpiZWxvdyogdGhlIGNhbGwgdG8gX3JlYWQuICBUaGUgcmVhc29uIGlzIHRoYXQgaW4gY2VydGFpblxuICAvLyBzeW50aGV0aWMgc3RyZWFtIGNhc2VzLCBzdWNoIGFzIHBhc3N0aHJvdWdoIHN0cmVhbXMsIF9yZWFkXG4gIC8vIG1heSBiZSBhIGNvbXBsZXRlbHkgc3luY2hyb25vdXMgb3BlcmF0aW9uIHdoaWNoIG1heSBjaGFuZ2VcbiAgLy8gdGhlIHN0YXRlIG9mIHRoZSByZWFkIGJ1ZmZlciwgcHJvdmlkaW5nIGVub3VnaCBkYXRhIHdoZW5cbiAgLy8gYmVmb3JlIHRoZXJlIHdhcyAqbm90KiBlbm91Z2guXG4gIC8vXG4gIC8vIFNvLCB0aGUgc3RlcHMgYXJlOlxuICAvLyAxLiBGaWd1cmUgb3V0IHdoYXQgdGhlIHN0YXRlIG9mIHRoaW5ncyB3aWxsIGJlIGFmdGVyIHdlIGRvXG4gIC8vIGEgcmVhZCBmcm9tIHRoZSBidWZmZXIuXG4gIC8vXG4gIC8vIDIuIElmIHRoYXQgcmVzdWx0aW5nIHN0YXRlIHdpbGwgdHJpZ2dlciBhIF9yZWFkLCB0aGVuIGNhbGwgX3JlYWQuXG4gIC8vIE5vdGUgdGhhdCB0aGlzIG1heSBiZSBhc3luY2hyb25vdXMsIG9yIHN5bmNocm9ub3VzLiAgWWVzLCBpdCBpc1xuICAvLyBkZWVwbHkgdWdseSB0byB3cml0ZSBBUElzIHRoaXMgd2F5LCBidXQgdGhhdCBzdGlsbCBkb2Vzbid0IG1lYW5cbiAgLy8gdGhhdCB0aGUgUmVhZGFibGUgY2xhc3Mgc2hvdWxkIGJlaGF2ZSBpbXByb3Blcmx5LCBhcyBzdHJlYW1zIGFyZVxuICAvLyBkZXNpZ25lZCB0byBiZSBzeW5jL2FzeW5jIGFnbm9zdGljLlxuICAvLyBUYWtlIG5vdGUgaWYgdGhlIF9yZWFkIGNhbGwgaXMgc3luYyBvciBhc3luYyAoaWUsIGlmIHRoZSByZWFkIGNhbGxcbiAgLy8gaGFzIHJldHVybmVkIHlldCksIHNvIHRoYXQgd2Uga25vdyB3aGV0aGVyIG9yIG5vdCBpdCdzIHNhZmUgdG8gZW1pdFxuICAvLyAncmVhZGFibGUnIGV0Yy5cbiAgLy9cbiAgLy8gMy4gQWN0dWFsbHkgcHVsbCB0aGUgcmVxdWVzdGVkIGNodW5rcyBvdXQgb2YgdGhlIGJ1ZmZlciBhbmQgcmV0dXJuLlxuXG4gIC8vIGlmIHdlIG5lZWQgYSByZWFkYWJsZSBldmVudCwgdGhlbiB3ZSBuZWVkIHRvIGRvIHNvbWUgcmVhZGluZy5cbiAgdmFyIGRvUmVhZCA9IHN0YXRlLm5lZWRSZWFkYWJsZTtcbiAgZGVidWcoJ25lZWQgcmVhZGFibGUnLCBkb1JlYWQpO1xuXG4gIC8vIGlmIHdlIGN1cnJlbnRseSBoYXZlIGxlc3MgdGhhbiB0aGUgaGlnaFdhdGVyTWFyaywgdGhlbiBhbHNvIHJlYWQgc29tZVxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwIHx8IHN0YXRlLmxlbmd0aCAtIG4gPCBzdGF0ZS5oaWdoV2F0ZXJNYXJrKSB7XG4gICAgZG9SZWFkID0gdHJ1ZTtcbiAgICBkZWJ1ZygnbGVuZ3RoIGxlc3MgdGhhbiB3YXRlcm1hcmsnLCBkb1JlYWQpO1xuICB9XG5cbiAgLy8gaG93ZXZlciwgaWYgd2UndmUgZW5kZWQsIHRoZW4gdGhlcmUncyBubyBwb2ludCwgYW5kIGlmIHdlJ3JlIGFscmVhZHlcbiAgLy8gcmVhZGluZywgdGhlbiBpdCdzIHVubmVjZXNzYXJ5LlxuICBpZiAoc3RhdGUuZW5kZWQgfHwgc3RhdGUucmVhZGluZykge1xuICAgIGRvUmVhZCA9IGZhbHNlO1xuICAgIGRlYnVnKCdyZWFkaW5nIG9yIGVuZGVkJywgZG9SZWFkKTtcbiAgfSBlbHNlIGlmIChkb1JlYWQpIHtcbiAgICBkZWJ1ZygnZG8gcmVhZCcpO1xuICAgIHN0YXRlLnJlYWRpbmcgPSB0cnVlO1xuICAgIHN0YXRlLnN5bmMgPSB0cnVlO1xuICAgIC8vIGlmIHRoZSBsZW5ndGggaXMgY3VycmVudGx5IHplcm8sIHRoZW4gd2UgKm5lZWQqIGEgcmVhZGFibGUgZXZlbnQuXG4gICAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkgc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAvLyBjYWxsIGludGVybmFsIHJlYWQgbWV0aG9kXG4gICAgdGhpcy5fcmVhZChzdGF0ZS5oaWdoV2F0ZXJNYXJrKTtcbiAgICBzdGF0ZS5zeW5jID0gZmFsc2U7XG4gICAgLy8gSWYgX3JlYWQgcHVzaGVkIGRhdGEgc3luY2hyb25vdXNseSwgdGhlbiBgcmVhZGluZ2Agd2lsbCBiZSBmYWxzZSxcbiAgICAvLyBhbmQgd2UgbmVlZCB0byByZS1ldmFsdWF0ZSBob3cgbXVjaCBkYXRhIHdlIGNhbiByZXR1cm4gdG8gdGhlIHVzZXIuXG4gICAgaWYgKCFzdGF0ZS5yZWFkaW5nKSBuID0gaG93TXVjaFRvUmVhZChuT3JpZywgc3RhdGUpO1xuICB9XG5cbiAgdmFyIHJldDtcbiAgaWYgKG4gPiAwKSByZXQgPSBmcm9tTGlzdChuLCBzdGF0ZSk7ZWxzZSByZXQgPSBudWxsO1xuXG4gIGlmIChyZXQgPT09IG51bGwpIHtcbiAgICBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuICAgIG4gPSAwO1xuICB9IGVsc2Uge1xuICAgIHN0YXRlLmxlbmd0aCAtPSBuO1xuICB9XG5cbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCkge1xuICAgIC8vIElmIHdlIGhhdmUgbm90aGluZyBpbiB0aGUgYnVmZmVyLCB0aGVuIHdlIHdhbnQgdG8ga25vd1xuICAgIC8vIGFzIHNvb24gYXMgd2UgKmRvKiBnZXQgc29tZXRoaW5nIGludG8gdGhlIGJ1ZmZlci5cbiAgICBpZiAoIXN0YXRlLmVuZGVkKSBzdGF0ZS5uZWVkUmVhZGFibGUgPSB0cnVlO1xuXG4gICAgLy8gSWYgd2UgdHJpZWQgdG8gcmVhZCgpIHBhc3QgdGhlIEVPRiwgdGhlbiBlbWl0IGVuZCBvbiB0aGUgbmV4dCB0aWNrLlxuICAgIGlmIChuT3JpZyAhPT0gbiAmJiBzdGF0ZS5lbmRlZCkgZW5kUmVhZGFibGUodGhpcyk7XG4gIH1cblxuICBpZiAocmV0ICE9PSBudWxsKSB0aGlzLmVtaXQoJ2RhdGEnLCByZXQpO1xuXG4gIHJldHVybiByZXQ7XG59O1xuXG5mdW5jdGlvbiBjaHVua0ludmFsaWQoc3RhdGUsIGNodW5rKSB7XG4gIHZhciBlciA9IG51bGw7XG4gIGlmICghQnVmZmVyLmlzQnVmZmVyKGNodW5rKSAmJiB0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmIGNodW5rICE9PSBudWxsICYmIGNodW5rICE9PSB1bmRlZmluZWQgJiYgIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgbm9uLXN0cmluZy9idWZmZXIgY2h1bmsnKTtcbiAgfVxuICByZXR1cm4gZXI7XG59XG5cbmZ1bmN0aW9uIG9uRW9mQ2h1bmsoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoc3RhdGUuZW5kZWQpIHJldHVybjtcbiAgaWYgKHN0YXRlLmRlY29kZXIpIHtcbiAgICB2YXIgY2h1bmsgPSBzdGF0ZS5kZWNvZGVyLmVuZCgpO1xuICAgIGlmIChjaHVuayAmJiBjaHVuay5sZW5ndGgpIHtcbiAgICAgIHN0YXRlLmJ1ZmZlci5wdXNoKGNodW5rKTtcbiAgICAgIHN0YXRlLmxlbmd0aCArPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcbiAgICB9XG4gIH1cbiAgc3RhdGUuZW5kZWQgPSB0cnVlO1xuXG4gIC8vIGVtaXQgJ3JlYWRhYmxlJyBub3cgdG8gbWFrZSBzdXJlIGl0IGdldHMgcGlja2VkIHVwLlxuICBlbWl0UmVhZGFibGUoc3RyZWFtKTtcbn1cblxuLy8gRG9uJ3QgZW1pdCByZWFkYWJsZSByaWdodCBhd2F5IGluIHN5bmMgbW9kZSwgYmVjYXVzZSB0aGlzIGNhbiB0cmlnZ2VyXG4vLyBhbm90aGVyIHJlYWQoKSBjYWxsID0+IHN0YWNrIG92ZXJmbG93LiAgVGhpcyB3YXksIGl0IG1pZ2h0IHRyaWdnZXJcbi8vIGEgbmV4dFRpY2sgcmVjdXJzaW9uIHdhcm5pbmcsIGJ1dCB0aGF0J3Mgbm90IHNvIGJhZC5cbmZ1bmN0aW9uIGVtaXRSZWFkYWJsZShzdHJlYW0pIHtcbiAgdmFyIHN0YXRlID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBzdGF0ZS5uZWVkUmVhZGFibGUgPSBmYWxzZTtcbiAgaWYgKCFzdGF0ZS5lbWl0dGVkUmVhZGFibGUpIHtcbiAgICBkZWJ1ZygnZW1pdFJlYWRhYmxlJywgc3RhdGUuZmxvd2luZyk7XG4gICAgc3RhdGUuZW1pdHRlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICBpZiAoc3RhdGUuc3luYykgbmV4dFRpY2soZW1pdFJlYWRhYmxlXywgc3RyZWFtKTtlbHNlIGVtaXRSZWFkYWJsZV8oc3RyZWFtKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBlbWl0UmVhZGFibGVfKHN0cmVhbSkge1xuICBkZWJ1ZygnZW1pdCByZWFkYWJsZScpO1xuICBzdHJlYW0uZW1pdCgncmVhZGFibGUnKTtcbiAgZmxvdyhzdHJlYW0pO1xufVxuXG4vLyBhdCB0aGlzIHBvaW50LCB0aGUgdXNlciBoYXMgcHJlc3VtYWJseSBzZWVuIHRoZSAncmVhZGFibGUnIGV2ZW50LFxuLy8gYW5kIGNhbGxlZCByZWFkKCkgdG8gY29uc3VtZSBzb21lIGRhdGEuICB0aGF0IG1heSBoYXZlIHRyaWdnZXJlZFxuLy8gaW4gdHVybiBhbm90aGVyIF9yZWFkKG4pIGNhbGwsIGluIHdoaWNoIGNhc2UgcmVhZGluZyA9IHRydWUgaWZcbi8vIGl0J3MgaW4gcHJvZ3Jlc3MuXG4vLyBIb3dldmVyLCBpZiB3ZSdyZSBub3QgZW5kZWQsIG9yIHJlYWRpbmcsIGFuZCB0aGUgbGVuZ3RoIDwgaHdtLFxuLy8gdGhlbiBnbyBhaGVhZCBhbmQgdHJ5IHRvIHJlYWQgc29tZSBtb3JlIHByZWVtcHRpdmVseS5cbmZ1bmN0aW9uIG1heWJlUmVhZE1vcmUoc3RyZWFtLCBzdGF0ZSkge1xuICBpZiAoIXN0YXRlLnJlYWRpbmdNb3JlKSB7XG4gICAgc3RhdGUucmVhZGluZ01vcmUgPSB0cnVlO1xuICAgIG5leHRUaWNrKG1heWJlUmVhZE1vcmVfLCBzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBtYXliZVJlYWRNb3JlXyhzdHJlYW0sIHN0YXRlKSB7XG4gIHZhciBsZW4gPSBzdGF0ZS5sZW5ndGg7XG4gIHdoaWxlICghc3RhdGUucmVhZGluZyAmJiAhc3RhdGUuZmxvd2luZyAmJiAhc3RhdGUuZW5kZWQgJiYgc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyaykge1xuICAgIGRlYnVnKCdtYXliZVJlYWRNb3JlIHJlYWQgMCcpO1xuICAgIHN0cmVhbS5yZWFkKDApO1xuICAgIGlmIChsZW4gPT09IHN0YXRlLmxlbmd0aClcbiAgICAgIC8vIGRpZG4ndCBnZXQgYW55IGRhdGEsIHN0b3Agc3Bpbm5pbmcuXG4gICAgICBicmVhaztlbHNlIGxlbiA9IHN0YXRlLmxlbmd0aDtcbiAgfVxuICBzdGF0ZS5yZWFkaW5nTW9yZSA9IGZhbHNlO1xufVxuXG4vLyBhYnN0cmFjdCBtZXRob2QuICB0byBiZSBvdmVycmlkZGVuIGluIHNwZWNpZmljIGltcGxlbWVudGF0aW9uIGNsYXNzZXMuXG4vLyBjYWxsIGNiKGVyLCBkYXRhKSB3aGVyZSBkYXRhIGlzIDw9IG4gaW4gbGVuZ3RoLlxuLy8gZm9yIHZpcnR1YWwgKG5vbi1zdHJpbmcsIG5vbi1idWZmZXIpIHN0cmVhbXMsIFwibGVuZ3RoXCIgaXMgc29tZXdoYXRcbi8vIGFyYml0cmFyeSwgYW5kIHBlcmhhcHMgbm90IHZlcnkgbWVhbmluZ2Z1bC5cblJlYWRhYmxlLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ25vdCBpbXBsZW1lbnRlZCcpKTtcbn07XG5cblJlYWRhYmxlLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24gKGRlc3QsIHBpcGVPcHRzKSB7XG4gIHZhciBzcmMgPSB0aGlzO1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuXG4gIHN3aXRjaCAoc3RhdGUucGlwZXNDb3VudCkge1xuICAgIGNhc2UgMDpcbiAgICAgIHN0YXRlLnBpcGVzID0gZGVzdDtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgMTpcbiAgICAgIHN0YXRlLnBpcGVzID0gW3N0YXRlLnBpcGVzLCBkZXN0XTtcbiAgICAgIGJyZWFrO1xuICAgIGRlZmF1bHQ6XG4gICAgICBzdGF0ZS5waXBlcy5wdXNoKGRlc3QpO1xuICAgICAgYnJlYWs7XG4gIH1cbiAgc3RhdGUucGlwZXNDb3VudCArPSAxO1xuICBkZWJ1ZygncGlwZSBjb3VudD0lZCBvcHRzPSVqJywgc3RhdGUucGlwZXNDb3VudCwgcGlwZU9wdHMpO1xuXG4gIHZhciBkb0VuZCA9ICghcGlwZU9wdHMgfHwgcGlwZU9wdHMuZW5kICE9PSBmYWxzZSk7XG5cbiAgdmFyIGVuZEZuID0gZG9FbmQgPyBvbmVuZCA6IGNsZWFudXA7XG4gIGlmIChzdGF0ZS5lbmRFbWl0dGVkKSBuZXh0VGljayhlbmRGbik7ZWxzZSBzcmMub25jZSgnZW5kJywgZW5kRm4pO1xuXG4gIGRlc3Qub24oJ3VucGlwZScsIG9udW5waXBlKTtcbiAgZnVuY3Rpb24gb251bnBpcGUocmVhZGFibGUpIHtcbiAgICBkZWJ1Zygnb251bnBpcGUnKTtcbiAgICBpZiAocmVhZGFibGUgPT09IHNyYykge1xuICAgICAgY2xlYW51cCgpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG9uZW5kKCkge1xuICAgIGRlYnVnKCdvbmVuZCcpO1xuICAgIGRlc3QuZW5kKCk7XG4gIH1cblxuICAvLyB3aGVuIHRoZSBkZXN0IGRyYWlucywgaXQgcmVkdWNlcyB0aGUgYXdhaXREcmFpbiBjb3VudGVyXG4gIC8vIG9uIHRoZSBzb3VyY2UuICBUaGlzIHdvdWxkIGJlIG1vcmUgZWxlZ2FudCB3aXRoIGEgLm9uY2UoKVxuICAvLyBoYW5kbGVyIGluIGZsb3coKSwgYnV0IGFkZGluZyBhbmQgcmVtb3ZpbmcgcmVwZWF0ZWRseSBpc1xuICAvLyB0b28gc2xvdy5cbiAgdmFyIG9uZHJhaW4gPSBwaXBlT25EcmFpbihzcmMpO1xuICBkZXN0Lm9uKCdkcmFpbicsIG9uZHJhaW4pO1xuXG4gIHZhciBjbGVhbmVkVXAgPSBmYWxzZTtcbiAgZnVuY3Rpb24gY2xlYW51cCgpIHtcbiAgICBkZWJ1ZygnY2xlYW51cCcpO1xuICAgIC8vIGNsZWFudXAgZXZlbnQgaGFuZGxlcnMgb25jZSB0aGUgcGlwZSBpcyBicm9rZW5cbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIG9uY2xvc2UpO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdkcmFpbicsIG9uZHJhaW4pO1xuICAgIGRlc3QucmVtb3ZlTGlzdGVuZXIoJ2Vycm9yJywgb25lcnJvcik7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcigndW5waXBlJywgb251bnBpcGUpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25lbmQpO1xuICAgIHNyYy5yZW1vdmVMaXN0ZW5lcignZW5kJywgY2xlYW51cCk7XG4gICAgc3JjLnJlbW92ZUxpc3RlbmVyKCdkYXRhJywgb25kYXRhKTtcblxuICAgIGNsZWFuZWRVcCA9IHRydWU7XG5cbiAgICAvLyBpZiB0aGUgcmVhZGVyIGlzIHdhaXRpbmcgZm9yIGEgZHJhaW4gZXZlbnQgZnJvbSB0aGlzXG4gICAgLy8gc3BlY2lmaWMgd3JpdGVyLCB0aGVuIGl0IHdvdWxkIGNhdXNlIGl0IHRvIG5ldmVyIHN0YXJ0XG4gICAgLy8gZmxvd2luZyBhZ2Fpbi5cbiAgICAvLyBTbywgaWYgdGhpcyBpcyBhd2FpdGluZyBhIGRyYWluLCB0aGVuIHdlIGp1c3QgY2FsbCBpdCBub3cuXG4gICAgLy8gSWYgd2UgZG9uJ3Qga25vdywgdGhlbiBhc3N1bWUgdGhhdCB3ZSBhcmUgd2FpdGluZyBmb3Igb25lLlxuICAgIGlmIChzdGF0ZS5hd2FpdERyYWluICYmICghZGVzdC5fd3JpdGFibGVTdGF0ZSB8fCBkZXN0Ll93cml0YWJsZVN0YXRlLm5lZWREcmFpbikpIG9uZHJhaW4oKTtcbiAgfVxuXG4gIC8vIElmIHRoZSB1c2VyIHB1c2hlcyBtb3JlIGRhdGEgd2hpbGUgd2UncmUgd3JpdGluZyB0byBkZXN0IHRoZW4gd2UnbGwgZW5kIHVwXG4gIC8vIGluIG9uZGF0YSBhZ2Fpbi4gSG93ZXZlciwgd2Ugb25seSB3YW50IHRvIGluY3JlYXNlIGF3YWl0RHJhaW4gb25jZSBiZWNhdXNlXG4gIC8vIGRlc3Qgd2lsbCBvbmx5IGVtaXQgb25lICdkcmFpbicgZXZlbnQgZm9yIHRoZSBtdWx0aXBsZSB3cml0ZXMuXG4gIC8vID0+IEludHJvZHVjZSBhIGd1YXJkIG9uIGluY3JlYXNpbmcgYXdhaXREcmFpbi5cbiAgdmFyIGluY3JlYXNlZEF3YWl0RHJhaW4gPSBmYWxzZTtcbiAgc3JjLm9uKCdkYXRhJywgb25kYXRhKTtcbiAgZnVuY3Rpb24gb25kYXRhKGNodW5rKSB7XG4gICAgZGVidWcoJ29uZGF0YScpO1xuICAgIGluY3JlYXNlZEF3YWl0RHJhaW4gPSBmYWxzZTtcbiAgICB2YXIgcmV0ID0gZGVzdC53cml0ZShjaHVuayk7XG4gICAgaWYgKGZhbHNlID09PSByZXQgJiYgIWluY3JlYXNlZEF3YWl0RHJhaW4pIHtcbiAgICAgIC8vIElmIHRoZSB1c2VyIHVucGlwZWQgZHVyaW5nIGBkZXN0LndyaXRlKClgLCBpdCBpcyBwb3NzaWJsZVxuICAgICAgLy8gdG8gZ2V0IHN0dWNrIGluIGEgcGVybWFuZW50bHkgcGF1c2VkIHN0YXRlIGlmIHRoYXQgd3JpdGVcbiAgICAgIC8vIGFsc28gcmV0dXJuZWQgZmFsc2UuXG4gICAgICAvLyA9PiBDaGVjayB3aGV0aGVyIGBkZXN0YCBpcyBzdGlsbCBhIHBpcGluZyBkZXN0aW5hdGlvbi5cbiAgICAgIGlmICgoc3RhdGUucGlwZXNDb3VudCA9PT0gMSAmJiBzdGF0ZS5waXBlcyA9PT0gZGVzdCB8fCBzdGF0ZS5waXBlc0NvdW50ID4gMSAmJiBpbmRleE9mKHN0YXRlLnBpcGVzLCBkZXN0KSAhPT0gLTEpICYmICFjbGVhbmVkVXApIHtcbiAgICAgICAgZGVidWcoJ2ZhbHNlIHdyaXRlIHJlc3BvbnNlLCBwYXVzZScsIHNyYy5fcmVhZGFibGVTdGF0ZS5hd2FpdERyYWluKTtcbiAgICAgICAgc3JjLl9yZWFkYWJsZVN0YXRlLmF3YWl0RHJhaW4rKztcbiAgICAgICAgaW5jcmVhc2VkQXdhaXREcmFpbiA9IHRydWU7XG4gICAgICB9XG4gICAgICBzcmMucGF1c2UoKTtcbiAgICB9XG4gIH1cblxuICAvLyBpZiB0aGUgZGVzdCBoYXMgYW4gZXJyb3IsIHRoZW4gc3RvcCBwaXBpbmcgaW50byBpdC5cbiAgLy8gaG93ZXZlciwgZG9uJ3Qgc3VwcHJlc3MgdGhlIHRocm93aW5nIGJlaGF2aW9yIGZvciB0aGlzLlxuICBmdW5jdGlvbiBvbmVycm9yKGVyKSB7XG4gICAgZGVidWcoJ29uZXJyb3InLCBlcik7XG4gICAgdW5waXBlKCk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICBpZiAobGlzdGVuZXJDb3VudChkZXN0LCAnZXJyb3InKSA9PT0gMCkgZGVzdC5lbWl0KCdlcnJvcicsIGVyKTtcbiAgfVxuXG4gIC8vIE1ha2Ugc3VyZSBvdXIgZXJyb3IgaGFuZGxlciBpcyBhdHRhY2hlZCBiZWZvcmUgdXNlcmxhbmQgb25lcy5cbiAgcHJlcGVuZExpc3RlbmVyKGRlc3QsICdlcnJvcicsIG9uZXJyb3IpO1xuXG4gIC8vIEJvdGggY2xvc2UgYW5kIGZpbmlzaCBzaG91bGQgdHJpZ2dlciB1bnBpcGUsIGJ1dCBvbmx5IG9uY2UuXG4gIGZ1bmN0aW9uIG9uY2xvc2UoKSB7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZmluaXNoJywgb25maW5pc2gpO1xuICAgIHVucGlwZSgpO1xuICB9XG4gIGRlc3Qub25jZSgnY2xvc2UnLCBvbmNsb3NlKTtcbiAgZnVuY3Rpb24gb25maW5pc2goKSB7XG4gICAgZGVidWcoJ29uZmluaXNoJyk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcbiAgICB1bnBpcGUoKTtcbiAgfVxuICBkZXN0Lm9uY2UoJ2ZpbmlzaCcsIG9uZmluaXNoKTtcblxuICBmdW5jdGlvbiB1bnBpcGUoKSB7XG4gICAgZGVidWcoJ3VucGlwZScpO1xuICAgIHNyYy51bnBpcGUoZGVzdCk7XG4gIH1cblxuICAvLyB0ZWxsIHRoZSBkZXN0IHRoYXQgaXQncyBiZWluZyBwaXBlZCB0b1xuICBkZXN0LmVtaXQoJ3BpcGUnLCBzcmMpO1xuXG4gIC8vIHN0YXJ0IHRoZSBmbG93IGlmIGl0IGhhc24ndCBiZWVuIHN0YXJ0ZWQgYWxyZWFkeS5cbiAgaWYgKCFzdGF0ZS5mbG93aW5nKSB7XG4gICAgZGVidWcoJ3BpcGUgcmVzdW1lJyk7XG4gICAgc3JjLnJlc3VtZSgpO1xuICB9XG5cbiAgcmV0dXJuIGRlc3Q7XG59O1xuXG5mdW5jdGlvbiBwaXBlT25EcmFpbihzcmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3RhdGUgPSBzcmMuX3JlYWRhYmxlU3RhdGU7XG4gICAgZGVidWcoJ3BpcGVPbkRyYWluJywgc3RhdGUuYXdhaXREcmFpbik7XG4gICAgaWYgKHN0YXRlLmF3YWl0RHJhaW4pIHN0YXRlLmF3YWl0RHJhaW4tLTtcbiAgICBpZiAoc3RhdGUuYXdhaXREcmFpbiA9PT0gMCAmJiBzcmMubGlzdGVuZXJzKCdkYXRhJykubGVuZ3RoKSB7XG4gICAgICBzdGF0ZS5mbG93aW5nID0gdHJ1ZTtcbiAgICAgIGZsb3coc3JjKTtcbiAgICB9XG4gIH07XG59XG5cblJlYWRhYmxlLnByb3RvdHlwZS51bnBpcGUgPSBmdW5jdGlvbiAoZGVzdCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuXG4gIC8vIGlmIHdlJ3JlIG5vdCBwaXBpbmcgYW55d2hlcmUsIHRoZW4gZG8gbm90aGluZy5cbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDApIHJldHVybiB0aGlzO1xuXG4gIC8vIGp1c3Qgb25lIGRlc3RpbmF0aW9uLiAgbW9zdCBjb21tb24gY2FzZS5cbiAgaWYgKHN0YXRlLnBpcGVzQ291bnQgPT09IDEpIHtcbiAgICAvLyBwYXNzZWQgaW4gb25lLCBidXQgaXQncyBub3QgdGhlIHJpZ2h0IG9uZS5cbiAgICBpZiAoZGVzdCAmJiBkZXN0ICE9PSBzdGF0ZS5waXBlcykgcmV0dXJuIHRoaXM7XG5cbiAgICBpZiAoIWRlc3QpIGRlc3QgPSBzdGF0ZS5waXBlcztcblxuICAgIC8vIGdvdCBhIG1hdGNoLlxuICAgIHN0YXRlLnBpcGVzID0gbnVsbDtcbiAgICBzdGF0ZS5waXBlc0NvdW50ID0gMDtcbiAgICBzdGF0ZS5mbG93aW5nID0gZmFsc2U7XG4gICAgaWYgKGRlc3QpIGRlc3QuZW1pdCgndW5waXBlJywgdGhpcyk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyBzbG93IGNhc2UuIG11bHRpcGxlIHBpcGUgZGVzdGluYXRpb25zLlxuXG4gIGlmICghZGVzdCkge1xuICAgIC8vIHJlbW92ZSBhbGwuXG4gICAgdmFyIGRlc3RzID0gc3RhdGUucGlwZXM7XG4gICAgdmFyIGxlbiA9IHN0YXRlLnBpcGVzQ291bnQ7XG4gICAgc3RhdGUucGlwZXMgPSBudWxsO1xuICAgIHN0YXRlLnBpcGVzQ291bnQgPSAwO1xuICAgIHN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsZW47IF9pKyspIHtcbiAgICAgIGRlc3RzW19pXS5lbWl0KCd1bnBpcGUnLCB0aGlzKTtcbiAgICB9cmV0dXJuIHRoaXM7XG4gIH1cblxuICAvLyB0cnkgdG8gZmluZCB0aGUgcmlnaHQgb25lLlxuICB2YXIgaSA9IGluZGV4T2Yoc3RhdGUucGlwZXMsIGRlc3QpO1xuICBpZiAoaSA9PT0gLTEpIHJldHVybiB0aGlzO1xuXG4gIHN0YXRlLnBpcGVzLnNwbGljZShpLCAxKTtcbiAgc3RhdGUucGlwZXNDb3VudCAtPSAxO1xuICBpZiAoc3RhdGUucGlwZXNDb3VudCA9PT0gMSkgc3RhdGUucGlwZXMgPSBzdGF0ZS5waXBlc1swXTtcblxuICBkZXN0LmVtaXQoJ3VucGlwZScsIHRoaXMpO1xuXG4gIHJldHVybiB0aGlzO1xufTtcblxuLy8gc2V0IHVwIGRhdGEgZXZlbnRzIGlmIHRoZXkgYXJlIGFza2VkIGZvclxuLy8gRW5zdXJlIHJlYWRhYmxlIGxpc3RlbmVycyBldmVudHVhbGx5IGdldCBzb21ldGhpbmdcblJlYWRhYmxlLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIChldiwgZm4pIHtcbiAgdmFyIHJlcyA9IEV2ZW50RW1pdHRlci5wcm90b3R5cGUub24uY2FsbCh0aGlzLCBldiwgZm4pO1xuXG4gIGlmIChldiA9PT0gJ2RhdGEnKSB7XG4gICAgLy8gU3RhcnQgZmxvd2luZyBvbiBuZXh0IHRpY2sgaWYgc3RyZWFtIGlzbid0IGV4cGxpY2l0bHkgcGF1c2VkXG4gICAgaWYgKHRoaXMuX3JlYWRhYmxlU3RhdGUuZmxvd2luZyAhPT0gZmFsc2UpIHRoaXMucmVzdW1lKCk7XG4gIH0gZWxzZSBpZiAoZXYgPT09ICdyZWFkYWJsZScpIHtcbiAgICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICAgIGlmICghc3RhdGUuZW5kRW1pdHRlZCAmJiAhc3RhdGUucmVhZGFibGVMaXN0ZW5pbmcpIHtcbiAgICAgIHN0YXRlLnJlYWRhYmxlTGlzdGVuaW5nID0gc3RhdGUubmVlZFJlYWRhYmxlID0gdHJ1ZTtcbiAgICAgIHN0YXRlLmVtaXR0ZWRSZWFkYWJsZSA9IGZhbHNlO1xuICAgICAgaWYgKCFzdGF0ZS5yZWFkaW5nKSB7XG4gICAgICAgIG5leHRUaWNrKG5SZWFkaW5nTmV4dFRpY2ssIHRoaXMpO1xuICAgICAgfSBlbHNlIGlmIChzdGF0ZS5sZW5ndGgpIHtcbiAgICAgICAgZW1pdFJlYWRhYmxlKHRoaXMsIHN0YXRlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzO1xufTtcblJlYWRhYmxlLnByb3RvdHlwZS5hZGRMaXN0ZW5lciA9IFJlYWRhYmxlLnByb3RvdHlwZS5vbjtcblxuZnVuY3Rpb24gblJlYWRpbmdOZXh0VGljayhzZWxmKSB7XG4gIGRlYnVnKCdyZWFkYWJsZSBuZXh0dGljayByZWFkIDAnKTtcbiAgc2VsZi5yZWFkKDApO1xufVxuXG4vLyBwYXVzZSgpIGFuZCByZXN1bWUoKSBhcmUgcmVtbmFudHMgb2YgdGhlIGxlZ2FjeSByZWFkYWJsZSBzdHJlYW0gQVBJXG4vLyBJZiB0aGUgdXNlciB1c2VzIHRoZW0sIHRoZW4gc3dpdGNoIGludG8gb2xkIG1vZGUuXG5SZWFkYWJsZS5wcm90b3R5cGUucmVzdW1lID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICBpZiAoIXN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncmVzdW1lJyk7XG4gICAgc3RhdGUuZmxvd2luZyA9IHRydWU7XG4gICAgcmVzdW1lKHRoaXMsIHN0YXRlKTtcbiAgfVxuICByZXR1cm4gdGhpcztcbn07XG5cbmZ1bmN0aW9uIHJlc3VtZShzdHJlYW0sIHN0YXRlKSB7XG4gIGlmICghc3RhdGUucmVzdW1lU2NoZWR1bGVkKSB7XG4gICAgc3RhdGUucmVzdW1lU2NoZWR1bGVkID0gdHJ1ZTtcbiAgICBuZXh0VGljayhyZXN1bWVfLCBzdHJlYW0sIHN0YXRlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiByZXN1bWVfKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5yZWFkaW5nKSB7XG4gICAgZGVidWcoJ3Jlc3VtZSByZWFkIDAnKTtcbiAgICBzdHJlYW0ucmVhZCgwKTtcbiAgfVxuXG4gIHN0YXRlLnJlc3VtZVNjaGVkdWxlZCA9IGZhbHNlO1xuICBzdGF0ZS5hd2FpdERyYWluID0gMDtcbiAgc3RyZWFtLmVtaXQoJ3Jlc3VtZScpO1xuICBmbG93KHN0cmVhbSk7XG4gIGlmIChzdGF0ZS5mbG93aW5nICYmICFzdGF0ZS5yZWFkaW5nKSBzdHJlYW0ucmVhZCgwKTtcbn1cblxuUmVhZGFibGUucHJvdG90eXBlLnBhdXNlID0gZnVuY3Rpb24gKCkge1xuICBkZWJ1ZygnY2FsbCBwYXVzZSBmbG93aW5nPSVqJywgdGhpcy5fcmVhZGFibGVTdGF0ZS5mbG93aW5nKTtcbiAgaWYgKGZhbHNlICE9PSB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcpIHtcbiAgICBkZWJ1ZygncGF1c2UnKTtcbiAgICB0aGlzLl9yZWFkYWJsZVN0YXRlLmZsb3dpbmcgPSBmYWxzZTtcbiAgICB0aGlzLmVtaXQoJ3BhdXNlJyk7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBmbG93KHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSBzdHJlYW0uX3JlYWRhYmxlU3RhdGU7XG4gIGRlYnVnKCdmbG93Jywgc3RhdGUuZmxvd2luZyk7XG4gIHdoaWxlIChzdGF0ZS5mbG93aW5nICYmIHN0cmVhbS5yZWFkKCkgIT09IG51bGwpIHt9XG59XG5cbi8vIHdyYXAgYW4gb2xkLXN0eWxlIHN0cmVhbSBhcyB0aGUgYXN5bmMgZGF0YSBzb3VyY2UuXG4vLyBUaGlzIGlzICpub3QqIHBhcnQgb2YgdGhlIHJlYWRhYmxlIHN0cmVhbSBpbnRlcmZhY2UuXG4vLyBJdCBpcyBhbiB1Z2x5IHVuZm9ydHVuYXRlIG1lc3Mgb2YgaGlzdG9yeS5cblJlYWRhYmxlLnByb3RvdHlwZS53cmFwID0gZnVuY3Rpb24gKHN0cmVhbSkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl9yZWFkYWJsZVN0YXRlO1xuICB2YXIgcGF1c2VkID0gZmFsc2U7XG5cbiAgdmFyIHNlbGYgPSB0aGlzO1xuICBzdHJlYW0ub24oJ2VuZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBkZWJ1Zygnd3JhcHBlZCBlbmQnKTtcbiAgICBpZiAoc3RhdGUuZGVjb2RlciAmJiAhc3RhdGUuZW5kZWQpIHtcbiAgICAgIHZhciBjaHVuayA9IHN0YXRlLmRlY29kZXIuZW5kKCk7XG4gICAgICBpZiAoY2h1bmsgJiYgY2h1bmsubGVuZ3RoKSBzZWxmLnB1c2goY2h1bmspO1xuICAgIH1cblxuICAgIHNlbGYucHVzaChudWxsKTtcbiAgfSk7XG5cbiAgc3RyZWFtLm9uKCdkYXRhJywgZnVuY3Rpb24gKGNodW5rKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgZGF0YScpO1xuICAgIGlmIChzdGF0ZS5kZWNvZGVyKSBjaHVuayA9IHN0YXRlLmRlY29kZXIud3JpdGUoY2h1bmspO1xuXG4gICAgLy8gZG9uJ3Qgc2tpcCBvdmVyIGZhbHN5IHZhbHVlcyBpbiBvYmplY3RNb2RlXG4gICAgaWYgKHN0YXRlLm9iamVjdE1vZGUgJiYgKGNodW5rID09PSBudWxsIHx8IGNodW5rID09PSB1bmRlZmluZWQpKSByZXR1cm47ZWxzZSBpZiAoIXN0YXRlLm9iamVjdE1vZGUgJiYgKCFjaHVuayB8fCAhY2h1bmsubGVuZ3RoKSkgcmV0dXJuO1xuXG4gICAgdmFyIHJldCA9IHNlbGYucHVzaChjaHVuayk7XG4gICAgaWYgKCFyZXQpIHtcbiAgICAgIHBhdXNlZCA9IHRydWU7XG4gICAgICBzdHJlYW0ucGF1c2UoKTtcbiAgICB9XG4gIH0pO1xuXG4gIC8vIHByb3h5IGFsbCB0aGUgb3RoZXIgbWV0aG9kcy5cbiAgLy8gaW1wb3J0YW50IHdoZW4gd3JhcHBpbmcgZmlsdGVycyBhbmQgZHVwbGV4ZXMuXG4gIGZvciAodmFyIGkgaW4gc3RyZWFtKSB7XG4gICAgaWYgKHRoaXNbaV0gPT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygc3RyZWFtW2ldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzW2ldID0gZnVuY3Rpb24gKG1ldGhvZCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHJldHVybiBzdHJlYW1bbWV0aG9kXS5hcHBseShzdHJlYW0sIGFyZ3VtZW50cyk7XG4gICAgICAgIH07XG4gICAgICB9KGkpO1xuICAgIH1cbiAgfVxuXG4gIC8vIHByb3h5IGNlcnRhaW4gaW1wb3J0YW50IGV2ZW50cy5cbiAgdmFyIGV2ZW50cyA9IFsnZXJyb3InLCAnY2xvc2UnLCAnZGVzdHJveScsICdwYXVzZScsICdyZXN1bWUnXTtcbiAgZm9yRWFjaChldmVudHMsIGZ1bmN0aW9uIChldikge1xuICAgIHN0cmVhbS5vbihldiwgc2VsZi5lbWl0LmJpbmQoc2VsZiwgZXYpKTtcbiAgfSk7XG5cbiAgLy8gd2hlbiB3ZSB0cnkgdG8gY29uc3VtZSBzb21lIG1vcmUgYnl0ZXMsIHNpbXBseSB1bnBhdXNlIHRoZVxuICAvLyB1bmRlcmx5aW5nIHN0cmVhbS5cbiAgc2VsZi5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gICAgZGVidWcoJ3dyYXBwZWQgX3JlYWQnLCBuKTtcbiAgICBpZiAocGF1c2VkKSB7XG4gICAgICBwYXVzZWQgPSBmYWxzZTtcbiAgICAgIHN0cmVhbS5yZXN1bWUoKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHNlbGY7XG59O1xuXG4vLyBleHBvc2VkIGZvciB0ZXN0aW5nIHB1cnBvc2VzIG9ubHkuXG5SZWFkYWJsZS5fZnJvbUxpc3QgPSBmcm9tTGlzdDtcblxuLy8gUGx1Y2sgb2ZmIG4gYnl0ZXMgZnJvbSBhbiBhcnJheSBvZiBidWZmZXJzLlxuLy8gTGVuZ3RoIGlzIHRoZSBjb21iaW5lZCBsZW5ndGhzIG9mIGFsbCB0aGUgYnVmZmVycyBpbiB0aGUgbGlzdC5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gZnJvbUxpc3Qobiwgc3RhdGUpIHtcbiAgLy8gbm90aGluZyBidWZmZXJlZFxuICBpZiAoc3RhdGUubGVuZ3RoID09PSAwKSByZXR1cm4gbnVsbDtcblxuICB2YXIgcmV0O1xuICBpZiAoc3RhdGUub2JqZWN0TW9kZSkgcmV0ID0gc3RhdGUuYnVmZmVyLnNoaWZ0KCk7ZWxzZSBpZiAoIW4gfHwgbiA+PSBzdGF0ZS5sZW5ndGgpIHtcbiAgICAvLyByZWFkIGl0IGFsbCwgdHJ1bmNhdGUgdGhlIGxpc3RcbiAgICBpZiAoc3RhdGUuZGVjb2RlcikgcmV0ID0gc3RhdGUuYnVmZmVyLmpvaW4oJycpO2Vsc2UgaWYgKHN0YXRlLmJ1ZmZlci5sZW5ndGggPT09IDEpIHJldCA9IHN0YXRlLmJ1ZmZlci5oZWFkLmRhdGE7ZWxzZSByZXQgPSBzdGF0ZS5idWZmZXIuY29uY2F0KHN0YXRlLmxlbmd0aCk7XG4gICAgc3RhdGUuYnVmZmVyLmNsZWFyKCk7XG4gIH0gZWxzZSB7XG4gICAgLy8gcmVhZCBwYXJ0IG9mIGxpc3RcbiAgICByZXQgPSBmcm9tTGlzdFBhcnRpYWwobiwgc3RhdGUuYnVmZmVyLCBzdGF0ZS5kZWNvZGVyKTtcbiAgfVxuXG4gIHJldHVybiByZXQ7XG59XG5cbi8vIEV4dHJhY3RzIG9ubHkgZW5vdWdoIGJ1ZmZlcmVkIGRhdGEgdG8gc2F0aXNmeSB0aGUgYW1vdW50IHJlcXVlc3RlZC5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gZnJvbUxpc3RQYXJ0aWFsKG4sIGxpc3QsIGhhc1N0cmluZ3MpIHtcbiAgdmFyIHJldDtcbiAgaWYgKG4gPCBsaXN0LmhlYWQuZGF0YS5sZW5ndGgpIHtcbiAgICAvLyBzbGljZSBpcyB0aGUgc2FtZSBmb3IgYnVmZmVycyBhbmQgc3RyaW5nc1xuICAgIHJldCA9IGxpc3QuaGVhZC5kYXRhLnNsaWNlKDAsIG4pO1xuICAgIGxpc3QuaGVhZC5kYXRhID0gbGlzdC5oZWFkLmRhdGEuc2xpY2Uobik7XG4gIH0gZWxzZSBpZiAobiA9PT0gbGlzdC5oZWFkLmRhdGEubGVuZ3RoKSB7XG4gICAgLy8gZmlyc3QgY2h1bmsgaXMgYSBwZXJmZWN0IG1hdGNoXG4gICAgcmV0ID0gbGlzdC5zaGlmdCgpO1xuICB9IGVsc2Uge1xuICAgIC8vIHJlc3VsdCBzcGFucyBtb3JlIHRoYW4gb25lIGJ1ZmZlclxuICAgIHJldCA9IGhhc1N0cmluZ3MgPyBjb3B5RnJvbUJ1ZmZlclN0cmluZyhuLCBsaXN0KSA6IGNvcHlGcm9tQnVmZmVyKG4sIGxpc3QpO1xuICB9XG4gIHJldHVybiByZXQ7XG59XG5cbi8vIENvcGllcyBhIHNwZWNpZmllZCBhbW91bnQgb2YgY2hhcmFjdGVycyBmcm9tIHRoZSBsaXN0IG9mIGJ1ZmZlcmVkIGRhdGFcbi8vIGNodW5rcy5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gY29weUZyb21CdWZmZXJTdHJpbmcobiwgbGlzdCkge1xuICB2YXIgcCA9IGxpc3QuaGVhZDtcbiAgdmFyIGMgPSAxO1xuICB2YXIgcmV0ID0gcC5kYXRhO1xuICBuIC09IHJldC5sZW5ndGg7XG4gIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgdmFyIHN0ciA9IHAuZGF0YTtcbiAgICB2YXIgbmIgPSBuID4gc3RyLmxlbmd0aCA/IHN0ci5sZW5ndGggOiBuO1xuICAgIGlmIChuYiA9PT0gc3RyLmxlbmd0aCkgcmV0ICs9IHN0cjtlbHNlIHJldCArPSBzdHIuc2xpY2UoMCwgbik7XG4gICAgbiAtPSBuYjtcbiAgICBpZiAobiA9PT0gMCkge1xuICAgICAgaWYgKG5iID09PSBzdHIubGVuZ3RoKSB7XG4gICAgICAgICsrYztcbiAgICAgICAgaWYgKHAubmV4dCkgbGlzdC5oZWFkID0gcC5uZXh0O2Vsc2UgbGlzdC5oZWFkID0gbGlzdC50YWlsID0gbnVsbDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGxpc3QuaGVhZCA9IHA7XG4gICAgICAgIHAuZGF0YSA9IHN0ci5zbGljZShuYik7XG4gICAgICB9XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgKytjO1xuICB9XG4gIGxpc3QubGVuZ3RoIC09IGM7XG4gIHJldHVybiByZXQ7XG59XG5cbi8vIENvcGllcyBhIHNwZWNpZmllZCBhbW91bnQgb2YgYnl0ZXMgZnJvbSB0aGUgbGlzdCBvZiBidWZmZXJlZCBkYXRhIGNodW5rcy5cbi8vIFRoaXMgZnVuY3Rpb24gaXMgZGVzaWduZWQgdG8gYmUgaW5saW5hYmxlLCBzbyBwbGVhc2UgdGFrZSBjYXJlIHdoZW4gbWFraW5nXG4vLyBjaGFuZ2VzIHRvIHRoZSBmdW5jdGlvbiBib2R5LlxuZnVuY3Rpb24gY29weUZyb21CdWZmZXIobiwgbGlzdCkge1xuICB2YXIgcmV0ID0gQnVmZmVyLmFsbG9jVW5zYWZlKG4pO1xuICB2YXIgcCA9IGxpc3QuaGVhZDtcbiAgdmFyIGMgPSAxO1xuICBwLmRhdGEuY29weShyZXQpO1xuICBuIC09IHAuZGF0YS5sZW5ndGg7XG4gIHdoaWxlIChwID0gcC5uZXh0KSB7XG4gICAgdmFyIGJ1ZiA9IHAuZGF0YTtcbiAgICB2YXIgbmIgPSBuID4gYnVmLmxlbmd0aCA/IGJ1Zi5sZW5ndGggOiBuO1xuICAgIGJ1Zi5jb3B5KHJldCwgcmV0Lmxlbmd0aCAtIG4sIDAsIG5iKTtcbiAgICBuIC09IG5iO1xuICAgIGlmIChuID09PSAwKSB7XG4gICAgICBpZiAobmIgPT09IGJ1Zi5sZW5ndGgpIHtcbiAgICAgICAgKytjO1xuICAgICAgICBpZiAocC5uZXh0KSBsaXN0LmhlYWQgPSBwLm5leHQ7ZWxzZSBsaXN0LmhlYWQgPSBsaXN0LnRhaWwgPSBudWxsO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgbGlzdC5oZWFkID0gcDtcbiAgICAgICAgcC5kYXRhID0gYnVmLnNsaWNlKG5iKTtcbiAgICAgIH1cbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICArK2M7XG4gIH1cbiAgbGlzdC5sZW5ndGggLT0gYztcbiAgcmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZW5kUmVhZGFibGUoc3RyZWFtKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fcmVhZGFibGVTdGF0ZTtcblxuICAvLyBJZiB3ZSBnZXQgaGVyZSBiZWZvcmUgY29uc3VtaW5nIGFsbCB0aGUgYnl0ZXMsIHRoZW4gdGhhdCBpcyBhXG4gIC8vIGJ1ZyBpbiBub2RlLiAgU2hvdWxkIG5ldmVyIGhhcHBlbi5cbiAgaWYgKHN0YXRlLmxlbmd0aCA+IDApIHRocm93IG5ldyBFcnJvcignXCJlbmRSZWFkYWJsZSgpXCIgY2FsbGVkIG9uIG5vbi1lbXB0eSBzdHJlYW0nKTtcblxuICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQpIHtcbiAgICBzdGF0ZS5lbmRlZCA9IHRydWU7XG4gICAgbmV4dFRpY2soZW5kUmVhZGFibGVOVCwgc3RhdGUsIHN0cmVhbSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZW5kUmVhZGFibGVOVChzdGF0ZSwgc3RyZWFtKSB7XG4gIC8vIENoZWNrIHRoYXQgd2UgZGlkbid0IGdldCBvbmUgbGFzdCB1bnNoaWZ0LlxuICBpZiAoIXN0YXRlLmVuZEVtaXR0ZWQgJiYgc3RhdGUubGVuZ3RoID09PSAwKSB7XG4gICAgc3RhdGUuZW5kRW1pdHRlZCA9IHRydWU7XG4gICAgc3RyZWFtLnJlYWRhYmxlID0gZmFsc2U7XG4gICAgc3RyZWFtLmVtaXQoJ2VuZCcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGZvckVhY2goeHMsIGYpIHtcbiAgZm9yICh2YXIgaSA9IDAsIGwgPSB4cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICBmKHhzW2ldLCBpKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpbmRleE9mKHhzLCB4KSB7XG4gIGZvciAodmFyIGkgPSAwLCBsID0geHMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgaWYgKHhzW2ldID09PSB4KSByZXR1cm4gaTtcbiAgfVxuICByZXR1cm4gLTE7XG59XG4iLCIvLyBBIGJpdCBzaW1wbGVyIHRoYW4gcmVhZGFibGUgc3RyZWFtcy5cbi8vIEltcGxlbWVudCBhbiBhc3luYyAuX3dyaXRlKGNodW5rLCBlbmNvZGluZywgY2IpLCBhbmQgaXQnbGwgaGFuZGxlIGFsbFxuLy8gdGhlIGRyYWluIGV2ZW50IGVtaXNzaW9uIGFuZCBidWZmZXJpbmcuXG5cblxuaW1wb3J0IHtpbmhlcml0cywgZGVwcmVjYXRlfSBmcm9tICd1dGlsJztcbmltcG9ydCB7QnVmZmVyfSBmcm9tICdidWZmZXInO1xuV3JpdGFibGUuV3JpdGFibGVTdGF0ZSA9IFdyaXRhYmxlU3RhdGU7XG5pbXBvcnQge0V2ZW50RW1pdHRlcn0gZnJvbSAnZXZlbnRzJztcbmltcG9ydCB7RHVwbGV4fSBmcm9tICcuL2R1cGxleCc7XG5pbXBvcnQge25leHRUaWNrfSBmcm9tICdwcm9jZXNzJztcbmluaGVyaXRzKFdyaXRhYmxlLCBFdmVudEVtaXR0ZXIpO1xuXG5mdW5jdGlvbiBub3AoKSB7fVxuXG5mdW5jdGlvbiBXcml0ZVJlcShjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHRoaXMuY2h1bmsgPSBjaHVuaztcbiAgdGhpcy5lbmNvZGluZyA9IGVuY29kaW5nO1xuICB0aGlzLmNhbGxiYWNrID0gY2I7XG4gIHRoaXMubmV4dCA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIFdyaXRhYmxlU3RhdGUob3B0aW9ucywgc3RyZWFtKSB7XG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCAnYnVmZmVyJywge1xuICAgIGdldDogZGVwcmVjYXRlKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLmdldEJ1ZmZlcigpO1xuICAgIH0sICdfd3JpdGFibGVTdGF0ZS5idWZmZXIgaXMgZGVwcmVjYXRlZC4gVXNlIF93cml0YWJsZVN0YXRlLmdldEJ1ZmZlciAnICsgJ2luc3RlYWQuJylcbiAgfSk7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG4gIC8vIG9iamVjdCBzdHJlYW0gZmxhZyB0byBpbmRpY2F0ZSB3aGV0aGVyIG9yIG5vdCB0aGlzIHN0cmVhbVxuICAvLyBjb250YWlucyBidWZmZXJzIG9yIG9iamVjdHMuXG4gIHRoaXMub2JqZWN0TW9kZSA9ICEhb3B0aW9ucy5vYmplY3RNb2RlO1xuXG4gIGlmIChzdHJlYW0gaW5zdGFuY2VvZiBEdXBsZXgpIHRoaXMub2JqZWN0TW9kZSA9IHRoaXMub2JqZWN0TW9kZSB8fCAhIW9wdGlvbnMud3JpdGFibGVPYmplY3RNb2RlO1xuXG4gIC8vIHRoZSBwb2ludCBhdCB3aGljaCB3cml0ZSgpIHN0YXJ0cyByZXR1cm5pbmcgZmFsc2VcbiAgLy8gTm90ZTogMCBpcyBhIHZhbGlkIHZhbHVlLCBtZWFucyB0aGF0IHdlIGFsd2F5cyByZXR1cm4gZmFsc2UgaWZcbiAgLy8gdGhlIGVudGlyZSBidWZmZXIgaXMgbm90IGZsdXNoZWQgaW1tZWRpYXRlbHkgb24gd3JpdGUoKVxuICB2YXIgaHdtID0gb3B0aW9ucy5oaWdoV2F0ZXJNYXJrO1xuICB2YXIgZGVmYXVsdEh3bSA9IHRoaXMub2JqZWN0TW9kZSA/IDE2IDogMTYgKiAxMDI0O1xuICB0aGlzLmhpZ2hXYXRlck1hcmsgPSBod20gfHwgaHdtID09PSAwID8gaHdtIDogZGVmYXVsdEh3bTtcblxuICAvLyBjYXN0IHRvIGludHMuXG4gIHRoaXMuaGlnaFdhdGVyTWFyayA9IH4gfnRoaXMuaGlnaFdhdGVyTWFyaztcblxuICB0aGlzLm5lZWREcmFpbiA9IGZhbHNlO1xuICAvLyBhdCB0aGUgc3RhcnQgb2YgY2FsbGluZyBlbmQoKVxuICB0aGlzLmVuZGluZyA9IGZhbHNlO1xuICAvLyB3aGVuIGVuZCgpIGhhcyBiZWVuIGNhbGxlZCwgYW5kIHJldHVybmVkXG4gIHRoaXMuZW5kZWQgPSBmYWxzZTtcbiAgLy8gd2hlbiAnZmluaXNoJyBpcyBlbWl0dGVkXG4gIHRoaXMuZmluaXNoZWQgPSBmYWxzZTtcblxuICAvLyBzaG91bGQgd2UgZGVjb2RlIHN0cmluZ3MgaW50byBidWZmZXJzIGJlZm9yZSBwYXNzaW5nIHRvIF93cml0ZT9cbiAgLy8gdGhpcyBpcyBoZXJlIHNvIHRoYXQgc29tZSBub2RlLWNvcmUgc3RyZWFtcyBjYW4gb3B0aW1pemUgc3RyaW5nXG4gIC8vIGhhbmRsaW5nIGF0IGEgbG93ZXIgbGV2ZWwuXG4gIHZhciBub0RlY29kZSA9IG9wdGlvbnMuZGVjb2RlU3RyaW5ncyA9PT0gZmFsc2U7XG4gIHRoaXMuZGVjb2RlU3RyaW5ncyA9ICFub0RlY29kZTtcblxuICAvLyBDcnlwdG8gaXMga2luZCBvZiBvbGQgYW5kIGNydXN0eS4gIEhpc3RvcmljYWxseSwgaXRzIGRlZmF1bHQgc3RyaW5nXG4gIC8vIGVuY29kaW5nIGlzICdiaW5hcnknIHNvIHdlIGhhdmUgdG8gbWFrZSB0aGlzIGNvbmZpZ3VyYWJsZS5cbiAgLy8gRXZlcnl0aGluZyBlbHNlIGluIHRoZSB1bml2ZXJzZSB1c2VzICd1dGY4JywgdGhvdWdoLlxuICB0aGlzLmRlZmF1bHRFbmNvZGluZyA9IG9wdGlvbnMuZGVmYXVsdEVuY29kaW5nIHx8ICd1dGY4JztcblxuICAvLyBub3QgYW4gYWN0dWFsIGJ1ZmZlciB3ZSBrZWVwIHRyYWNrIG9mLCBidXQgYSBtZWFzdXJlbWVudFxuICAvLyBvZiBob3cgbXVjaCB3ZSdyZSB3YWl0aW5nIHRvIGdldCBwdXNoZWQgdG8gc29tZSB1bmRlcmx5aW5nXG4gIC8vIHNvY2tldCBvciBmaWxlLlxuICB0aGlzLmxlbmd0aCA9IDA7XG5cbiAgLy8gYSBmbGFnIHRvIHNlZSB3aGVuIHdlJ3JlIGluIHRoZSBtaWRkbGUgb2YgYSB3cml0ZS5cbiAgdGhpcy53cml0aW5nID0gZmFsc2U7XG5cbiAgLy8gd2hlbiB0cnVlIGFsbCB3cml0ZXMgd2lsbCBiZSBidWZmZXJlZCB1bnRpbCAudW5jb3JrKCkgY2FsbFxuICB0aGlzLmNvcmtlZCA9IDA7XG5cbiAgLy8gYSBmbGFnIHRvIGJlIGFibGUgdG8gdGVsbCBpZiB0aGUgb253cml0ZSBjYiBpcyBjYWxsZWQgaW1tZWRpYXRlbHksXG4gIC8vIG9yIG9uIGEgbGF0ZXIgdGljay4gIFdlIHNldCB0aGlzIHRvIHRydWUgYXQgZmlyc3QsIGJlY2F1c2UgYW55XG4gIC8vIGFjdGlvbnMgdGhhdCBzaG91bGRuJ3QgaGFwcGVuIHVudGlsIFwibGF0ZXJcIiBzaG91bGQgZ2VuZXJhbGx5IGFsc29cbiAgLy8gbm90IGhhcHBlbiBiZWZvcmUgdGhlIGZpcnN0IHdyaXRlIGNhbGwuXG4gIHRoaXMuc3luYyA9IHRydWU7XG5cbiAgLy8gYSBmbGFnIHRvIGtub3cgaWYgd2UncmUgcHJvY2Vzc2luZyBwcmV2aW91c2x5IGJ1ZmZlcmVkIGl0ZW1zLCB3aGljaFxuICAvLyBtYXkgY2FsbCB0aGUgX3dyaXRlKCkgY2FsbGJhY2sgaW4gdGhlIHNhbWUgdGljaywgc28gdGhhdCB3ZSBkb24ndFxuICAvLyBlbmQgdXAgaW4gYW4gb3ZlcmxhcHBlZCBvbndyaXRlIHNpdHVhdGlvbi5cbiAgdGhpcy5idWZmZXJQcm9jZXNzaW5nID0gZmFsc2U7XG5cbiAgLy8gdGhlIGNhbGxiYWNrIHRoYXQncyBwYXNzZWQgdG8gX3dyaXRlKGNodW5rLGNiKVxuICB0aGlzLm9ud3JpdGUgPSBmdW5jdGlvbiAoZXIpIHtcbiAgICBvbndyaXRlKHN0cmVhbSwgZXIpO1xuICB9O1xuXG4gIC8vIHRoZSBjYWxsYmFjayB0aGF0IHRoZSB1c2VyIHN1cHBsaWVzIHRvIHdyaXRlKGNodW5rLGVuY29kaW5nLGNiKVxuICB0aGlzLndyaXRlY2IgPSBudWxsO1xuXG4gIC8vIHRoZSBhbW91bnQgdGhhdCBpcyBiZWluZyB3cml0dGVuIHdoZW4gX3dyaXRlIGlzIGNhbGxlZC5cbiAgdGhpcy53cml0ZWxlbiA9IDA7XG5cbiAgdGhpcy5idWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICB0aGlzLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuXG4gIC8vIG51bWJlciBvZiBwZW5kaW5nIHVzZXItc3VwcGxpZWQgd3JpdGUgY2FsbGJhY2tzXG4gIC8vIHRoaXMgbXVzdCBiZSAwIGJlZm9yZSAnZmluaXNoJyBjYW4gYmUgZW1pdHRlZFxuICB0aGlzLnBlbmRpbmdjYiA9IDA7XG5cbiAgLy8gZW1pdCBwcmVmaW5pc2ggaWYgdGhlIG9ubHkgdGhpbmcgd2UncmUgd2FpdGluZyBmb3IgaXMgX3dyaXRlIGNic1xuICAvLyBUaGlzIGlzIHJlbGV2YW50IGZvciBzeW5jaHJvbm91cyBUcmFuc2Zvcm0gc3RyZWFtc1xuICB0aGlzLnByZWZpbmlzaGVkID0gZmFsc2U7XG5cbiAgLy8gVHJ1ZSBpZiB0aGUgZXJyb3Igd2FzIGFscmVhZHkgZW1pdHRlZCBhbmQgc2hvdWxkIG5vdCBiZSB0aHJvd24gYWdhaW5cbiAgdGhpcy5lcnJvckVtaXR0ZWQgPSBmYWxzZTtcblxuICAvLyBjb3VudCBidWZmZXJlZCByZXF1ZXN0c1xuICB0aGlzLmJ1ZmZlcmVkUmVxdWVzdENvdW50ID0gMDtcblxuICAvLyBhbGxvY2F0ZSB0aGUgZmlyc3QgQ29ya2VkUmVxdWVzdCwgdGhlcmUgaXMgYWx3YXlzXG4gIC8vIG9uZSBhbGxvY2F0ZWQgYW5kIGZyZWUgdG8gdXNlLCBhbmQgd2UgbWFpbnRhaW4gYXQgbW9zdCB0d29cbiAgdGhpcy5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBuZXcgQ29ya2VkUmVxdWVzdCh0aGlzKTtcbn1cblxuV3JpdGFibGVTdGF0ZS5wcm90b3R5cGUuZ2V0QnVmZmVyID0gZnVuY3Rpb24gd3JpdGFibGVTdGF0ZUdldEJ1ZmZlcigpIHtcbiAgdmFyIGN1cnJlbnQgPSB0aGlzLmJ1ZmZlcmVkUmVxdWVzdDtcbiAgdmFyIG91dCA9IFtdO1xuICB3aGlsZSAoY3VycmVudCkge1xuICAgIG91dC5wdXNoKGN1cnJlbnQpO1xuICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHQ7XG4gIH1cbiAgcmV0dXJuIG91dDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IFdyaXRhYmxlO1xuZXhwb3J0IGZ1bmN0aW9uIFdyaXRhYmxlKG9wdGlvbnMpIHtcblxuICAvLyBXcml0YWJsZSBjdG9yIGlzIGFwcGxpZWQgdG8gRHVwbGV4ZXMsIHRob3VnaCB0aGV5J3JlIG5vdFxuICAvLyBpbnN0YW5jZW9mIFdyaXRhYmxlLCB0aGV5J3JlIGluc3RhbmNlb2YgUmVhZGFibGUuXG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBXcml0YWJsZSkgJiYgISh0aGlzIGluc3RhbmNlb2YgRHVwbGV4KSkgcmV0dXJuIG5ldyBXcml0YWJsZShvcHRpb25zKTtcblxuICB0aGlzLl93cml0YWJsZVN0YXRlID0gbmV3IFdyaXRhYmxlU3RhdGUob3B0aW9ucywgdGhpcyk7XG5cbiAgLy8gbGVnYWN5LlxuICB0aGlzLndyaXRhYmxlID0gdHJ1ZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy53cml0ZSA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGUgPSBvcHRpb25zLndyaXRlO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLndyaXRldiA9PT0gJ2Z1bmN0aW9uJykgdGhpcy5fd3JpdGV2ID0gb3B0aW9ucy53cml0ZXY7XG4gIH1cblxuICBFdmVudEVtaXR0ZXIuY2FsbCh0aGlzKTtcbn1cblxuLy8gT3RoZXJ3aXNlIHBlb3BsZSBjYW4gcGlwZSBXcml0YWJsZSBzdHJlYW1zLCB3aGljaCBpcyBqdXN0IHdyb25nLlxuV3JpdGFibGUucHJvdG90eXBlLnBpcGUgPSBmdW5jdGlvbiAoKSB7XG4gIHRoaXMuZW1pdCgnZXJyb3InLCBuZXcgRXJyb3IoJ0Nhbm5vdCBwaXBlLCBub3QgcmVhZGFibGUnKSk7XG59O1xuXG5mdW5jdGlvbiB3cml0ZUFmdGVyRW5kKHN0cmVhbSwgY2IpIHtcbiAgdmFyIGVyID0gbmV3IEVycm9yKCd3cml0ZSBhZnRlciBlbmQnKTtcbiAgLy8gVE9ETzogZGVmZXIgZXJyb3IgZXZlbnRzIGNvbnNpc3RlbnRseSBldmVyeXdoZXJlLCBub3QganVzdCB0aGUgY2JcbiAgc3RyZWFtLmVtaXQoJ2Vycm9yJywgZXIpO1xuICBuZXh0VGljayhjYiwgZXIpO1xufVxuXG4vLyBJZiB3ZSBnZXQgc29tZXRoaW5nIHRoYXQgaXMgbm90IGEgYnVmZmVyLCBzdHJpbmcsIG51bGwsIG9yIHVuZGVmaW5lZCxcbi8vIGFuZCB3ZSdyZSBub3QgaW4gb2JqZWN0TW9kZSwgdGhlbiB0aGF0J3MgYW4gZXJyb3IuXG4vLyBPdGhlcndpc2Ugc3RyZWFtIGNodW5rcyBhcmUgYWxsIGNvbnNpZGVyZWQgdG8gYmUgb2YgbGVuZ3RoPTEsIGFuZCB0aGVcbi8vIHdhdGVybWFya3MgZGV0ZXJtaW5lIGhvdyBtYW55IG9iamVjdHMgdG8ga2VlcCBpbiB0aGUgYnVmZmVyLCByYXRoZXIgdGhhblxuLy8gaG93IG1hbnkgYnl0ZXMgb3IgY2hhcmFjdGVycy5cbmZ1bmN0aW9uIHZhbGlkQ2h1bmsoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGNiKSB7XG4gIHZhciB2YWxpZCA9IHRydWU7XG4gIHZhciBlciA9IGZhbHNlO1xuICAvLyBBbHdheXMgdGhyb3cgZXJyb3IgaWYgYSBudWxsIGlzIHdyaXR0ZW5cbiAgLy8gaWYgd2UgYXJlIG5vdCBpbiBvYmplY3QgbW9kZSB0aGVuIHRocm93XG4gIC8vIGlmIGl0IGlzIG5vdCBhIGJ1ZmZlciwgc3RyaW5nLCBvciB1bmRlZmluZWQuXG4gIGlmIChjaHVuayA9PT0gbnVsbCkge1xuICAgIGVyID0gbmV3IFR5cGVFcnJvcignTWF5IG5vdCB3cml0ZSBudWxsIHZhbHVlcyB0byBzdHJlYW0nKTtcbiAgfSBlbHNlIGlmICghQnVmZmVyLmlzQnVmZmVyKGNodW5rKSAmJiB0eXBlb2YgY2h1bmsgIT09ICdzdHJpbmcnICYmIGNodW5rICE9PSB1bmRlZmluZWQgJiYgIXN0YXRlLm9iamVjdE1vZGUpIHtcbiAgICBlciA9IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgbm9uLXN0cmluZy9idWZmZXIgY2h1bmsnKTtcbiAgfVxuICBpZiAoZXIpIHtcbiAgICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG4gICAgbmV4dFRpY2soY2IsIGVyKTtcbiAgICB2YWxpZCA9IGZhbHNlO1xuICB9XG4gIHJldHVybiB2YWxpZDtcbn1cblxuV3JpdGFibGUucHJvdG90eXBlLndyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHN0YXRlID0gdGhpcy5fd3JpdGFibGVTdGF0ZTtcbiAgdmFyIHJldCA9IGZhbHNlO1xuXG4gIGlmICh0eXBlb2YgZW5jb2RpbmcgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGVuY29kaW5nO1xuICAgIGVuY29kaW5nID0gbnVsbDtcbiAgfVxuXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoY2h1bmspKSBlbmNvZGluZyA9ICdidWZmZXInO2Vsc2UgaWYgKCFlbmNvZGluZykgZW5jb2RpbmcgPSBzdGF0ZS5kZWZhdWx0RW5jb2Rpbmc7XG5cbiAgaWYgKHR5cGVvZiBjYiAhPT0gJ2Z1bmN0aW9uJykgY2IgPSBub3A7XG5cbiAgaWYgKHN0YXRlLmVuZGVkKSB3cml0ZUFmdGVyRW5kKHRoaXMsIGNiKTtlbHNlIGlmICh2YWxpZENodW5rKHRoaXMsIHN0YXRlLCBjaHVuaywgY2IpKSB7XG4gICAgc3RhdGUucGVuZGluZ2NiKys7XG4gICAgcmV0ID0gd3JpdGVPckJ1ZmZlcih0aGlzLCBzdGF0ZSwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufTtcblxuV3JpdGFibGUucHJvdG90eXBlLmNvcmsgPSBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IHRoaXMuX3dyaXRhYmxlU3RhdGU7XG5cbiAgc3RhdGUuY29ya2VkKys7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUudW5jb3JrID0gZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIGlmIChzdGF0ZS5jb3JrZWQpIHtcbiAgICBzdGF0ZS5jb3JrZWQtLTtcblxuICAgIGlmICghc3RhdGUud3JpdGluZyAmJiAhc3RhdGUuY29ya2VkICYmICFzdGF0ZS5maW5pc2hlZCAmJiAhc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyAmJiBzdGF0ZS5idWZmZXJlZFJlcXVlc3QpIGNsZWFyQnVmZmVyKHRoaXMsIHN0YXRlKTtcbiAgfVxufTtcblxuV3JpdGFibGUucHJvdG90eXBlLnNldERlZmF1bHRFbmNvZGluZyA9IGZ1bmN0aW9uIHNldERlZmF1bHRFbmNvZGluZyhlbmNvZGluZykge1xuICAvLyBub2RlOjpQYXJzZUVuY29kaW5nKCkgcmVxdWlyZXMgbG93ZXIgY2FzZS5cbiAgaWYgKHR5cGVvZiBlbmNvZGluZyA9PT0gJ3N0cmluZycpIGVuY29kaW5nID0gZW5jb2RpbmcudG9Mb3dlckNhc2UoKTtcbiAgaWYgKCEoWydoZXgnLCAndXRmOCcsICd1dGYtOCcsICdhc2NpaScsICdiaW5hcnknLCAnYmFzZTY0JywgJ3VjczInLCAndWNzLTInLCAndXRmMTZsZScsICd1dGYtMTZsZScsICdyYXcnXS5pbmRleE9mKChlbmNvZGluZyArICcnKS50b0xvd2VyQ2FzZSgpKSA+IC0xKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignVW5rbm93biBlbmNvZGluZzogJyArIGVuY29kaW5nKTtcbiAgdGhpcy5fd3JpdGFibGVTdGF0ZS5kZWZhdWx0RW5jb2RpbmcgPSBlbmNvZGluZztcbiAgcmV0dXJuIHRoaXM7XG59O1xuXG5mdW5jdGlvbiBkZWNvZGVDaHVuayhzdGF0ZSwgY2h1bmssIGVuY29kaW5nKSB7XG4gIGlmICghc3RhdGUub2JqZWN0TW9kZSAmJiBzdGF0ZS5kZWNvZGVTdHJpbmdzICE9PSBmYWxzZSAmJiB0eXBlb2YgY2h1bmsgPT09ICdzdHJpbmcnKSB7XG4gICAgY2h1bmsgPSBCdWZmZXIuZnJvbShjaHVuaywgZW5jb2RpbmcpO1xuICB9XG4gIHJldHVybiBjaHVuaztcbn1cblxuLy8gaWYgd2UncmUgYWxyZWFkeSB3cml0aW5nIHNvbWV0aGluZywgdGhlbiBqdXN0IHB1dCB0aGlzXG4vLyBpbiB0aGUgcXVldWUsIGFuZCB3YWl0IG91ciB0dXJuLiAgT3RoZXJ3aXNlLCBjYWxsIF93cml0ZVxuLy8gSWYgd2UgcmV0dXJuIGZhbHNlLCB0aGVuIHdlIG5lZWQgYSBkcmFpbiBldmVudCwgc28gc2V0IHRoYXQgZmxhZy5cbmZ1bmN0aW9uIHdyaXRlT3JCdWZmZXIoc3RyZWFtLCBzdGF0ZSwgY2h1bmssIGVuY29kaW5nLCBjYikge1xuICBjaHVuayA9IGRlY29kZUNodW5rKHN0YXRlLCBjaHVuaywgZW5jb2RpbmcpO1xuXG4gIGlmIChCdWZmZXIuaXNCdWZmZXIoY2h1bmspKSBlbmNvZGluZyA9ICdidWZmZXInO1xuICB2YXIgbGVuID0gc3RhdGUub2JqZWN0TW9kZSA/IDEgOiBjaHVuay5sZW5ndGg7XG5cbiAgc3RhdGUubGVuZ3RoICs9IGxlbjtcblxuICB2YXIgcmV0ID0gc3RhdGUubGVuZ3RoIDwgc3RhdGUuaGlnaFdhdGVyTWFyaztcbiAgLy8gd2UgbXVzdCBlbnN1cmUgdGhhdCBwcmV2aW91cyBuZWVkRHJhaW4gd2lsbCBub3QgYmUgcmVzZXQgdG8gZmFsc2UuXG4gIGlmICghcmV0KSBzdGF0ZS5uZWVkRHJhaW4gPSB0cnVlO1xuXG4gIGlmIChzdGF0ZS53cml0aW5nIHx8IHN0YXRlLmNvcmtlZCkge1xuICAgIHZhciBsYXN0ID0gc3RhdGUubGFzdEJ1ZmZlcmVkUmVxdWVzdDtcbiAgICBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbmV3IFdyaXRlUmVxKGNodW5rLCBlbmNvZGluZywgY2IpO1xuICAgIGlmIChsYXN0KSB7XG4gICAgICBsYXN0Lm5leHQgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPSBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0O1xuICAgIH1cbiAgICBzdGF0ZS5idWZmZXJlZFJlcXVlc3RDb3VudCArPSAxO1xuICB9IGVsc2Uge1xuICAgIGRvV3JpdGUoc3RyZWFtLCBzdGF0ZSwgZmFsc2UsIGxlbiwgY2h1bmssIGVuY29kaW5nLCBjYik7XG4gIH1cblxuICByZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBkb1dyaXRlKHN0cmVhbSwgc3RhdGUsIHdyaXRldiwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIHN0YXRlLndyaXRlbGVuID0gbGVuO1xuICBzdGF0ZS53cml0ZWNiID0gY2I7XG4gIHN0YXRlLndyaXRpbmcgPSB0cnVlO1xuICBzdGF0ZS5zeW5jID0gdHJ1ZTtcbiAgaWYgKHdyaXRldikgc3RyZWFtLl93cml0ZXYoY2h1bmssIHN0YXRlLm9ud3JpdGUpO2Vsc2Ugc3RyZWFtLl93cml0ZShjaHVuaywgZW5jb2RpbmcsIHN0YXRlLm9ud3JpdGUpO1xuICBzdGF0ZS5zeW5jID0gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGVFcnJvcihzdHJlYW0sIHN0YXRlLCBzeW5jLCBlciwgY2IpIHtcbiAgLS1zdGF0ZS5wZW5kaW5nY2I7XG4gIGlmIChzeW5jKSBuZXh0VGljayhjYiwgZXIpO2Vsc2UgY2IoZXIpO1xuXG4gIHN0cmVhbS5fd3JpdGFibGVTdGF0ZS5lcnJvckVtaXR0ZWQgPSB0cnVlO1xuICBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG59XG5cbmZ1bmN0aW9uIG9ud3JpdGVTdGF0ZVVwZGF0ZShzdGF0ZSkge1xuICBzdGF0ZS53cml0aW5nID0gZmFsc2U7XG4gIHN0YXRlLndyaXRlY2IgPSBudWxsO1xuICBzdGF0ZS5sZW5ndGggLT0gc3RhdGUud3JpdGVsZW47XG4gIHN0YXRlLndyaXRlbGVuID0gMDtcbn1cblxuZnVuY3Rpb24gb253cml0ZShzdHJlYW0sIGVyKSB7XG4gIHZhciBzdGF0ZSA9IHN0cmVhbS5fd3JpdGFibGVTdGF0ZTtcbiAgdmFyIHN5bmMgPSBzdGF0ZS5zeW5jO1xuICB2YXIgY2IgPSBzdGF0ZS53cml0ZWNiO1xuXG4gIG9ud3JpdGVTdGF0ZVVwZGF0ZShzdGF0ZSk7XG5cbiAgaWYgKGVyKSBvbndyaXRlRXJyb3Ioc3RyZWFtLCBzdGF0ZSwgc3luYywgZXIsIGNiKTtlbHNlIHtcbiAgICAvLyBDaGVjayBpZiB3ZSdyZSBhY3R1YWxseSByZWFkeSB0byBmaW5pc2gsIGJ1dCBkb24ndCBlbWl0IHlldFxuICAgIHZhciBmaW5pc2hlZCA9IG5lZWRGaW5pc2goc3RhdGUpO1xuXG4gICAgaWYgKCFmaW5pc2hlZCAmJiAhc3RhdGUuY29ya2VkICYmICFzdGF0ZS5idWZmZXJQcm9jZXNzaW5nICYmIHN0YXRlLmJ1ZmZlcmVkUmVxdWVzdCkge1xuICAgICAgY2xlYXJCdWZmZXIoc3RyZWFtLCBzdGF0ZSk7XG4gICAgfVxuXG4gICAgaWYgKHN5bmMpIHtcbiAgICAgIC8qPHJlcGxhY2VtZW50PiovXG4gICAgICAgIG5leHRUaWNrKGFmdGVyV3JpdGUsIHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYik7XG4gICAgICAvKjwvcmVwbGFjZW1lbnQ+Ki9cbiAgICB9IGVsc2Uge1xuICAgICAgICBhZnRlcldyaXRlKHN0cmVhbSwgc3RhdGUsIGZpbmlzaGVkLCBjYik7XG4gICAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gYWZ0ZXJXcml0ZShzdHJlYW0sIHN0YXRlLCBmaW5pc2hlZCwgY2IpIHtcbiAgaWYgKCFmaW5pc2hlZCkgb253cml0ZURyYWluKHN0cmVhbSwgc3RhdGUpO1xuICBzdGF0ZS5wZW5kaW5nY2ItLTtcbiAgY2IoKTtcbiAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG59XG5cbi8vIE11c3QgZm9yY2UgY2FsbGJhY2sgdG8gYmUgY2FsbGVkIG9uIG5leHRUaWNrLCBzbyB0aGF0IHdlIGRvbid0XG4vLyBlbWl0ICdkcmFpbicgYmVmb3JlIHRoZSB3cml0ZSgpIGNvbnN1bWVyIGdldHMgdGhlICdmYWxzZScgcmV0dXJuXG4vLyB2YWx1ZSwgYW5kIGhhcyBhIGNoYW5jZSB0byBhdHRhY2ggYSAnZHJhaW4nIGxpc3RlbmVyLlxuZnVuY3Rpb24gb253cml0ZURyYWluKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKHN0YXRlLmxlbmd0aCA9PT0gMCAmJiBzdGF0ZS5uZWVkRHJhaW4pIHtcbiAgICBzdGF0ZS5uZWVkRHJhaW4gPSBmYWxzZTtcbiAgICBzdHJlYW0uZW1pdCgnZHJhaW4nKTtcbiAgfVxufVxuXG4vLyBpZiB0aGVyZSdzIHNvbWV0aGluZyBpbiB0aGUgYnVmZmVyIHdhaXRpbmcsIHRoZW4gcHJvY2VzcyBpdFxuZnVuY3Rpb24gY2xlYXJCdWZmZXIoc3RyZWFtLCBzdGF0ZSkge1xuICBzdGF0ZS5idWZmZXJQcm9jZXNzaW5nID0gdHJ1ZTtcbiAgdmFyIGVudHJ5ID0gc3RhdGUuYnVmZmVyZWRSZXF1ZXN0O1xuXG4gIGlmIChzdHJlYW0uX3dyaXRldiAmJiBlbnRyeSAmJiBlbnRyeS5uZXh0KSB7XG4gICAgLy8gRmFzdCBjYXNlLCB3cml0ZSBldmVyeXRoaW5nIHVzaW5nIF93cml0ZXYoKVxuICAgIHZhciBsID0gc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQ7XG4gICAgdmFyIGJ1ZmZlciA9IG5ldyBBcnJheShsKTtcbiAgICB2YXIgaG9sZGVyID0gc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlO1xuICAgIGhvbGRlci5lbnRyeSA9IGVudHJ5O1xuXG4gICAgdmFyIGNvdW50ID0gMDtcbiAgICB3aGlsZSAoZW50cnkpIHtcbiAgICAgIGJ1ZmZlcltjb3VudF0gPSBlbnRyeTtcbiAgICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgICAgIGNvdW50ICs9IDE7XG4gICAgfVxuXG4gICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCB0cnVlLCBzdGF0ZS5sZW5ndGgsIGJ1ZmZlciwgJycsIGhvbGRlci5maW5pc2gpO1xuXG4gICAgLy8gZG9Xcml0ZSBpcyBhbG1vc3QgYWx3YXlzIGFzeW5jLCBkZWZlciB0aGVzZSB0byBzYXZlIGEgYml0IG9mIHRpbWVcbiAgICAvLyBhcyB0aGUgaG90IHBhdGggZW5kcyB3aXRoIGRvV3JpdGVcbiAgICBzdGF0ZS5wZW5kaW5nY2IrKztcbiAgICBzdGF0ZS5sYXN0QnVmZmVyZWRSZXF1ZXN0ID0gbnVsbDtcbiAgICBpZiAoaG9sZGVyLm5leHQpIHtcbiAgICAgIHN0YXRlLmNvcmtlZFJlcXVlc3RzRnJlZSA9IGhvbGRlci5uZXh0O1xuICAgICAgaG9sZGVyLm5leHQgPSBudWxsO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBuZXcgQ29ya2VkUmVxdWVzdChzdGF0ZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFNsb3cgY2FzZSwgd3JpdGUgY2h1bmtzIG9uZS1ieS1vbmVcbiAgICB3aGlsZSAoZW50cnkpIHtcbiAgICAgIHZhciBjaHVuayA9IGVudHJ5LmNodW5rO1xuICAgICAgdmFyIGVuY29kaW5nID0gZW50cnkuZW5jb2Rpbmc7XG4gICAgICB2YXIgY2IgPSBlbnRyeS5jYWxsYmFjaztcbiAgICAgIHZhciBsZW4gPSBzdGF0ZS5vYmplY3RNb2RlID8gMSA6IGNodW5rLmxlbmd0aDtcblxuICAgICAgZG9Xcml0ZShzdHJlYW0sIHN0YXRlLCBmYWxzZSwgbGVuLCBjaHVuaywgZW5jb2RpbmcsIGNiKTtcbiAgICAgIGVudHJ5ID0gZW50cnkubmV4dDtcbiAgICAgIC8vIGlmIHdlIGRpZG4ndCBjYWxsIHRoZSBvbndyaXRlIGltbWVkaWF0ZWx5LCB0aGVuXG4gICAgICAvLyBpdCBtZWFucyB0aGF0IHdlIG5lZWQgdG8gd2FpdCB1bnRpbCBpdCBkb2VzLlxuICAgICAgLy8gYWxzbywgdGhhdCBtZWFucyB0aGF0IHRoZSBjaHVuayBhbmQgY2IgYXJlIGN1cnJlbnRseVxuICAgICAgLy8gYmVpbmcgcHJvY2Vzc2VkLCBzbyBtb3ZlIHRoZSBidWZmZXIgY291bnRlciBwYXN0IHRoZW0uXG4gICAgICBpZiAoc3RhdGUud3JpdGluZykge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoZW50cnkgPT09IG51bGwpIHN0YXRlLmxhc3RCdWZmZXJlZFJlcXVlc3QgPSBudWxsO1xuICB9XG5cbiAgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0Q291bnQgPSAwO1xuICBzdGF0ZS5idWZmZXJlZFJlcXVlc3QgPSBlbnRyeTtcbiAgc3RhdGUuYnVmZmVyUHJvY2Vzc2luZyA9IGZhbHNlO1xufVxuXG5Xcml0YWJsZS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgY2IobmV3IEVycm9yKCdub3QgaW1wbGVtZW50ZWQnKSk7XG59O1xuXG5Xcml0YWJsZS5wcm90b3R5cGUuX3dyaXRldiA9IG51bGw7XG5cbldyaXRhYmxlLnByb3RvdHlwZS5lbmQgPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB2YXIgc3RhdGUgPSB0aGlzLl93cml0YWJsZVN0YXRlO1xuXG4gIGlmICh0eXBlb2YgY2h1bmsgPT09ICdmdW5jdGlvbicpIHtcbiAgICBjYiA9IGNodW5rO1xuICAgIGNodW5rID0gbnVsbDtcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGVuY29kaW5nID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBlbmNvZGluZztcbiAgICBlbmNvZGluZyA9IG51bGw7XG4gIH1cblxuICBpZiAoY2h1bmsgIT09IG51bGwgJiYgY2h1bmsgIT09IHVuZGVmaW5lZCkgdGhpcy53cml0ZShjaHVuaywgZW5jb2RpbmcpO1xuXG4gIC8vIC5lbmQoKSBmdWxseSB1bmNvcmtzXG4gIGlmIChzdGF0ZS5jb3JrZWQpIHtcbiAgICBzdGF0ZS5jb3JrZWQgPSAxO1xuICAgIHRoaXMudW5jb3JrKCk7XG4gIH1cblxuICAvLyBpZ25vcmUgdW5uZWNlc3NhcnkgZW5kKCkgY2FsbHMuXG4gIGlmICghc3RhdGUuZW5kaW5nICYmICFzdGF0ZS5maW5pc2hlZCkgZW5kV3JpdGFibGUodGhpcywgc3RhdGUsIGNiKTtcbn07XG5cbmZ1bmN0aW9uIG5lZWRGaW5pc2goc3RhdGUpIHtcbiAgcmV0dXJuIHN0YXRlLmVuZGluZyAmJiBzdGF0ZS5sZW5ndGggPT09IDAgJiYgc3RhdGUuYnVmZmVyZWRSZXF1ZXN0ID09PSBudWxsICYmICFzdGF0ZS5maW5pc2hlZCAmJiAhc3RhdGUud3JpdGluZztcbn1cblxuZnVuY3Rpb24gcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5wcmVmaW5pc2hlZCkge1xuICAgIHN0YXRlLnByZWZpbmlzaGVkID0gdHJ1ZTtcbiAgICBzdHJlYW0uZW1pdCgncHJlZmluaXNoJyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSkge1xuICB2YXIgbmVlZCA9IG5lZWRGaW5pc2goc3RhdGUpO1xuICBpZiAobmVlZCkge1xuICAgIGlmIChzdGF0ZS5wZW5kaW5nY2IgPT09IDApIHtcbiAgICAgIHByZWZpbmlzaChzdHJlYW0sIHN0YXRlKTtcbiAgICAgIHN0YXRlLmZpbmlzaGVkID0gdHJ1ZTtcbiAgICAgIHN0cmVhbS5lbWl0KCdmaW5pc2gnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJlZmluaXNoKHN0cmVhbSwgc3RhdGUpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gbmVlZDtcbn1cblxuZnVuY3Rpb24gZW5kV3JpdGFibGUoc3RyZWFtLCBzdGF0ZSwgY2IpIHtcbiAgc3RhdGUuZW5kaW5nID0gdHJ1ZTtcbiAgZmluaXNoTWF5YmUoc3RyZWFtLCBzdGF0ZSk7XG4gIGlmIChjYikge1xuICAgIGlmIChzdGF0ZS5maW5pc2hlZCkgbmV4dFRpY2soY2IpO2Vsc2Ugc3RyZWFtLm9uY2UoJ2ZpbmlzaCcsIGNiKTtcbiAgfVxuICBzdGF0ZS5lbmRlZCA9IHRydWU7XG4gIHN0cmVhbS53cml0YWJsZSA9IGZhbHNlO1xufVxuXG4vLyBJdCBzZWVtcyBhIGxpbmtlZCBsaXN0IGJ1dCBpdCBpcyBub3Rcbi8vIHRoZXJlIHdpbGwgYmUgb25seSAyIG9mIHRoZXNlIGZvciBlYWNoIHN0cmVhbVxuZnVuY3Rpb24gQ29ya2VkUmVxdWVzdChzdGF0ZSkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIHRoaXMubmV4dCA9IG51bGw7XG4gIHRoaXMuZW50cnkgPSBudWxsO1xuXG4gIHRoaXMuZmluaXNoID0gZnVuY3Rpb24gKGVycikge1xuICAgIHZhciBlbnRyeSA9IF90aGlzLmVudHJ5O1xuICAgIF90aGlzLmVudHJ5ID0gbnVsbDtcbiAgICB3aGlsZSAoZW50cnkpIHtcbiAgICAgIHZhciBjYiA9IGVudHJ5LmNhbGxiYWNrO1xuICAgICAgc3RhdGUucGVuZGluZ2NiLS07XG4gICAgICBjYihlcnIpO1xuICAgICAgZW50cnkgPSBlbnRyeS5uZXh0O1xuICAgIH1cbiAgICBpZiAoc3RhdGUuY29ya2VkUmVxdWVzdHNGcmVlKSB7XG4gICAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUubmV4dCA9IF90aGlzO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdGF0ZS5jb3JrZWRSZXF1ZXN0c0ZyZWUgPSBfdGhpcztcbiAgICB9XG4gIH07XG59XG4iLCJcbmltcG9ydCB7aW5oZXJpdHN9IGZyb20gJ3V0aWwnO1xuaW1wb3J0IHtuZXh0VGlja30gZnJvbSAncHJvY2Vzcyc7XG5pbXBvcnQge1JlYWRhYmxlfSBmcm9tICcuL3JlYWRhYmxlJztcbmltcG9ydCB7V3JpdGFibGV9IGZyb20gJy4vd3JpdGFibGUnO1xuXG5cbmluaGVyaXRzKER1cGxleCwgUmVhZGFibGUpO1xuXG52YXIga2V5cyA9IE9iamVjdC5rZXlzKFdyaXRhYmxlLnByb3RvdHlwZSk7XG5mb3IgKHZhciB2ID0gMDsgdiA8IGtleXMubGVuZ3RoOyB2KyspIHtcbiAgdmFyIG1ldGhvZCA9IGtleXNbdl07XG4gIGlmICghRHVwbGV4LnByb3RvdHlwZVttZXRob2RdKSBEdXBsZXgucHJvdG90eXBlW21ldGhvZF0gPSBXcml0YWJsZS5wcm90b3R5cGVbbWV0aG9kXTtcbn1cbmV4cG9ydCBkZWZhdWx0IER1cGxleDtcbmV4cG9ydCBmdW5jdGlvbiBEdXBsZXgob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRHVwbGV4KSkgcmV0dXJuIG5ldyBEdXBsZXgob3B0aW9ucyk7XG5cbiAgUmVhZGFibGUuY2FsbCh0aGlzLCBvcHRpb25zKTtcbiAgV3JpdGFibGUuY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICBpZiAob3B0aW9ucyAmJiBvcHRpb25zLnJlYWRhYmxlID09PSBmYWxzZSkgdGhpcy5yZWFkYWJsZSA9IGZhbHNlO1xuXG4gIGlmIChvcHRpb25zICYmIG9wdGlvbnMud3JpdGFibGUgPT09IGZhbHNlKSB0aGlzLndyaXRhYmxlID0gZmFsc2U7XG5cbiAgdGhpcy5hbGxvd0hhbGZPcGVuID0gdHJ1ZTtcbiAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5hbGxvd0hhbGZPcGVuID09PSBmYWxzZSkgdGhpcy5hbGxvd0hhbGZPcGVuID0gZmFsc2U7XG5cbiAgdGhpcy5vbmNlKCdlbmQnLCBvbmVuZCk7XG59XG5cbi8vIHRoZSBuby1oYWxmLW9wZW4gZW5mb3JjZXJcbmZ1bmN0aW9uIG9uZW5kKCkge1xuICAvLyBpZiB3ZSBhbGxvdyBoYWxmLW9wZW4gc3RhdGUsIG9yIGlmIHRoZSB3cml0YWJsZSBzaWRlIGVuZGVkLFxuICAvLyB0aGVuIHdlJ3JlIG9rLlxuICBpZiAodGhpcy5hbGxvd0hhbGZPcGVuIHx8IHRoaXMuX3dyaXRhYmxlU3RhdGUuZW5kZWQpIHJldHVybjtcblxuICAvLyBubyBtb3JlIGRhdGEgY2FuIGJlIHdyaXR0ZW4uXG4gIC8vIEJ1dCBhbGxvdyBtb3JlIHdyaXRlcyB0byBoYXBwZW4gaW4gdGhpcyB0aWNrLlxuICBuZXh0VGljayhvbkVuZE5ULCB0aGlzKTtcbn1cblxuZnVuY3Rpb24gb25FbmROVChzZWxmKSB7XG4gIHNlbGYuZW5kKCk7XG59XG4iLCIvLyBhIHRyYW5zZm9ybSBzdHJlYW0gaXMgYSByZWFkYWJsZS93cml0YWJsZSBzdHJlYW0gd2hlcmUgeW91IGRvXG4vLyBzb21ldGhpbmcgd2l0aCB0aGUgZGF0YS4gIFNvbWV0aW1lcyBpdCdzIGNhbGxlZCBhIFwiZmlsdGVyXCIsXG4vLyBidXQgdGhhdCdzIG5vdCBhIGdyZWF0IG5hbWUgZm9yIGl0LCBzaW5jZSB0aGF0IGltcGxpZXMgYSB0aGluZyB3aGVyZVxuLy8gc29tZSBiaXRzIHBhc3MgdGhyb3VnaCwgYW5kIG90aGVycyBhcmUgc2ltcGx5IGlnbm9yZWQuICAoVGhhdCB3b3VsZFxuLy8gYmUgYSB2YWxpZCBleGFtcGxlIG9mIGEgdHJhbnNmb3JtLCBvZiBjb3Vyc2UuKVxuLy9cbi8vIFdoaWxlIHRoZSBvdXRwdXQgaXMgY2F1c2FsbHkgcmVsYXRlZCB0byB0aGUgaW5wdXQsIGl0J3Mgbm90IGFcbi8vIG5lY2Vzc2FyaWx5IHN5bW1ldHJpYyBvciBzeW5jaHJvbm91cyB0cmFuc2Zvcm1hdGlvbi4gIEZvciBleGFtcGxlLFxuLy8gYSB6bGliIHN0cmVhbSBtaWdodCB0YWtlIG11bHRpcGxlIHBsYWluLXRleHQgd3JpdGVzKCksIGFuZCB0aGVuXG4vLyBlbWl0IGEgc2luZ2xlIGNvbXByZXNzZWQgY2h1bmsgc29tZSB0aW1lIGluIHRoZSBmdXR1cmUuXG4vL1xuLy8gSGVyZSdzIGhvdyB0aGlzIHdvcmtzOlxuLy9cbi8vIFRoZSBUcmFuc2Zvcm0gc3RyZWFtIGhhcyBhbGwgdGhlIGFzcGVjdHMgb2YgdGhlIHJlYWRhYmxlIGFuZCB3cml0YWJsZVxuLy8gc3RyZWFtIGNsYXNzZXMuICBXaGVuIHlvdSB3cml0ZShjaHVuayksIHRoYXQgY2FsbHMgX3dyaXRlKGNodW5rLGNiKVxuLy8gaW50ZXJuYWxseSwgYW5kIHJldHVybnMgZmFsc2UgaWYgdGhlcmUncyBhIGxvdCBvZiBwZW5kaW5nIHdyaXRlc1xuLy8gYnVmZmVyZWQgdXAuICBXaGVuIHlvdSBjYWxsIHJlYWQoKSwgdGhhdCBjYWxscyBfcmVhZChuKSB1bnRpbFxuLy8gdGhlcmUncyBlbm91Z2ggcGVuZGluZyByZWFkYWJsZSBkYXRhIGJ1ZmZlcmVkIHVwLlxuLy9cbi8vIEluIGEgdHJhbnNmb3JtIHN0cmVhbSwgdGhlIHdyaXR0ZW4gZGF0YSBpcyBwbGFjZWQgaW4gYSBidWZmZXIuICBXaGVuXG4vLyBfcmVhZChuKSBpcyBjYWxsZWQsIGl0IHRyYW5zZm9ybXMgdGhlIHF1ZXVlZCB1cCBkYXRhLCBjYWxsaW5nIHRoZVxuLy8gYnVmZmVyZWQgX3dyaXRlIGNiJ3MgYXMgaXQgY29uc3VtZXMgY2h1bmtzLiAgSWYgY29uc3VtaW5nIGEgc2luZ2xlXG4vLyB3cml0dGVuIGNodW5rIHdvdWxkIHJlc3VsdCBpbiBtdWx0aXBsZSBvdXRwdXQgY2h1bmtzLCB0aGVuIHRoZSBmaXJzdFxuLy8gb3V0cHV0dGVkIGJpdCBjYWxscyB0aGUgcmVhZGNiLCBhbmQgc3Vic2VxdWVudCBjaHVua3MganVzdCBnbyBpbnRvXG4vLyB0aGUgcmVhZCBidWZmZXIsIGFuZCB3aWxsIGNhdXNlIGl0IHRvIGVtaXQgJ3JlYWRhYmxlJyBpZiBuZWNlc3NhcnkuXG4vL1xuLy8gVGhpcyB3YXksIGJhY2stcHJlc3N1cmUgaXMgYWN0dWFsbHkgZGV0ZXJtaW5lZCBieSB0aGUgcmVhZGluZyBzaWRlLFxuLy8gc2luY2UgX3JlYWQgaGFzIHRvIGJlIGNhbGxlZCB0byBzdGFydCBwcm9jZXNzaW5nIGEgbmV3IGNodW5rLiAgSG93ZXZlcixcbi8vIGEgcGF0aG9sb2dpY2FsIGluZmxhdGUgdHlwZSBvZiB0cmFuc2Zvcm0gY2FuIGNhdXNlIGV4Y2Vzc2l2ZSBidWZmZXJpbmdcbi8vIGhlcmUuICBGb3IgZXhhbXBsZSwgaW1hZ2luZSBhIHN0cmVhbSB3aGVyZSBldmVyeSBieXRlIG9mIGlucHV0IGlzXG4vLyBpbnRlcnByZXRlZCBhcyBhbiBpbnRlZ2VyIGZyb20gMC0yNTUsIGFuZCB0aGVuIHJlc3VsdHMgaW4gdGhhdCBtYW55XG4vLyBieXRlcyBvZiBvdXRwdXQuICBXcml0aW5nIHRoZSA0IGJ5dGVzIHtmZixmZixmZixmZn0gd291bGQgcmVzdWx0IGluXG4vLyAxa2Igb2YgZGF0YSBiZWluZyBvdXRwdXQuICBJbiB0aGlzIGNhc2UsIHlvdSBjb3VsZCB3cml0ZSBhIHZlcnkgc21hbGxcbi8vIGFtb3VudCBvZiBpbnB1dCwgYW5kIGVuZCB1cCB3aXRoIGEgdmVyeSBsYXJnZSBhbW91bnQgb2Ygb3V0cHV0LiAgSW5cbi8vIHN1Y2ggYSBwYXRob2xvZ2ljYWwgaW5mbGF0aW5nIG1lY2hhbmlzbSwgdGhlcmUnZCBiZSBubyB3YXkgdG8gdGVsbFxuLy8gdGhlIHN5c3RlbSB0byBzdG9wIGRvaW5nIHRoZSB0cmFuc2Zvcm0uICBBIHNpbmdsZSA0TUIgd3JpdGUgY291bGRcbi8vIGNhdXNlIHRoZSBzeXN0ZW0gdG8gcnVuIG91dCBvZiBtZW1vcnkuXG4vL1xuLy8gSG93ZXZlciwgZXZlbiBpbiBzdWNoIGEgcGF0aG9sb2dpY2FsIGNhc2UsIG9ubHkgYSBzaW5nbGUgd3JpdHRlbiBjaHVua1xuLy8gd291bGQgYmUgY29uc3VtZWQsIGFuZCB0aGVuIHRoZSByZXN0IHdvdWxkIHdhaXQgKHVuLXRyYW5zZm9ybWVkKSB1bnRpbFxuLy8gdGhlIHJlc3VsdHMgb2YgdGhlIHByZXZpb3VzIHRyYW5zZm9ybWVkIGNodW5rIHdlcmUgY29uc3VtZWQuXG5cblxuaW1wb3J0IHtEdXBsZXh9IGZyb20gJy4vZHVwbGV4JztcblxuXG5pbXBvcnQge2luaGVyaXRzfSBmcm9tICd1dGlsJztcbmluaGVyaXRzKFRyYW5zZm9ybSwgRHVwbGV4KTtcblxuZnVuY3Rpb24gVHJhbnNmb3JtU3RhdGUoc3RyZWFtKSB7XG4gIHRoaXMuYWZ0ZXJUcmFuc2Zvcm0gPSBmdW5jdGlvbiAoZXIsIGRhdGEpIHtcbiAgICByZXR1cm4gYWZ0ZXJUcmFuc2Zvcm0oc3RyZWFtLCBlciwgZGF0YSk7XG4gIH07XG5cbiAgdGhpcy5uZWVkVHJhbnNmb3JtID0gZmFsc2U7XG4gIHRoaXMudHJhbnNmb3JtaW5nID0gZmFsc2U7XG4gIHRoaXMud3JpdGVjYiA9IG51bGw7XG4gIHRoaXMud3JpdGVjaHVuayA9IG51bGw7XG4gIHRoaXMud3JpdGVlbmNvZGluZyA9IG51bGw7XG59XG5cbmZ1bmN0aW9uIGFmdGVyVHJhbnNmb3JtKHN0cmVhbSwgZXIsIGRhdGEpIHtcbiAgdmFyIHRzID0gc3RyZWFtLl90cmFuc2Zvcm1TdGF0ZTtcbiAgdHMudHJhbnNmb3JtaW5nID0gZmFsc2U7XG5cbiAgdmFyIGNiID0gdHMud3JpdGVjYjtcblxuICBpZiAoIWNiKSByZXR1cm4gc3RyZWFtLmVtaXQoJ2Vycm9yJywgbmV3IEVycm9yKCdubyB3cml0ZWNiIGluIFRyYW5zZm9ybSBjbGFzcycpKTtcblxuICB0cy53cml0ZWNodW5rID0gbnVsbDtcbiAgdHMud3JpdGVjYiA9IG51bGw7XG5cbiAgaWYgKGRhdGEgIT09IG51bGwgJiYgZGF0YSAhPT0gdW5kZWZpbmVkKSBzdHJlYW0ucHVzaChkYXRhKTtcblxuICBjYihlcik7XG5cbiAgdmFyIHJzID0gc3RyZWFtLl9yZWFkYWJsZVN0YXRlO1xuICBycy5yZWFkaW5nID0gZmFsc2U7XG4gIGlmIChycy5uZWVkUmVhZGFibGUgfHwgcnMubGVuZ3RoIDwgcnMuaGlnaFdhdGVyTWFyaykge1xuICAgIHN0cmVhbS5fcmVhZChycy5oaWdoV2F0ZXJNYXJrKTtcbiAgfVxufVxuZXhwb3J0IGRlZmF1bHQgVHJhbnNmb3JtO1xuZXhwb3J0IGZ1bmN0aW9uIFRyYW5zZm9ybShvcHRpb25zKSB7XG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBUcmFuc2Zvcm0pKSByZXR1cm4gbmV3IFRyYW5zZm9ybShvcHRpb25zKTtcblxuICBEdXBsZXguY2FsbCh0aGlzLCBvcHRpb25zKTtcblxuICB0aGlzLl90cmFuc2Zvcm1TdGF0ZSA9IG5ldyBUcmFuc2Zvcm1TdGF0ZSh0aGlzKTtcblxuICAvLyB3aGVuIHRoZSB3cml0YWJsZSBzaWRlIGZpbmlzaGVzLCB0aGVuIGZsdXNoIG91dCBhbnl0aGluZyByZW1haW5pbmcuXG4gIHZhciBzdHJlYW0gPSB0aGlzO1xuXG4gIC8vIHN0YXJ0IG91dCBhc2tpbmcgZm9yIGEgcmVhZGFibGUgZXZlbnQgb25jZSBkYXRhIGlzIHRyYW5zZm9ybWVkLlxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLm5lZWRSZWFkYWJsZSA9IHRydWU7XG5cbiAgLy8gd2UgaGF2ZSBpbXBsZW1lbnRlZCB0aGUgX3JlYWQgbWV0aG9kLCBhbmQgZG9uZSB0aGUgb3RoZXIgdGhpbmdzXG4gIC8vIHRoYXQgUmVhZGFibGUgd2FudHMgYmVmb3JlIHRoZSBmaXJzdCBfcmVhZCBjYWxsLCBzbyB1bnNldCB0aGVcbiAgLy8gc3luYyBndWFyZCBmbGFnLlxuICB0aGlzLl9yZWFkYWJsZVN0YXRlLnN5bmMgPSBmYWxzZTtcblxuICBpZiAob3B0aW9ucykge1xuICAgIGlmICh0eXBlb2Ygb3B0aW9ucy50cmFuc2Zvcm0gPT09ICdmdW5jdGlvbicpIHRoaXMuX3RyYW5zZm9ybSA9IG9wdGlvbnMudHJhbnNmb3JtO1xuXG4gICAgaWYgKHR5cGVvZiBvcHRpb25zLmZsdXNoID09PSAnZnVuY3Rpb24nKSB0aGlzLl9mbHVzaCA9IG9wdGlvbnMuZmx1c2g7XG4gIH1cblxuICB0aGlzLm9uY2UoJ3ByZWZpbmlzaCcsIGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodHlwZW9mIHRoaXMuX2ZsdXNoID09PSAnZnVuY3Rpb24nKSB0aGlzLl9mbHVzaChmdW5jdGlvbiAoZXIpIHtcbiAgICAgIGRvbmUoc3RyZWFtLCBlcik7XG4gICAgfSk7ZWxzZSBkb25lKHN0cmVhbSk7XG4gIH0pO1xufVxuXG5UcmFuc2Zvcm0ucHJvdG90eXBlLnB1c2ggPSBmdW5jdGlvbiAoY2h1bmssIGVuY29kaW5nKSB7XG4gIHRoaXMuX3RyYW5zZm9ybVN0YXRlLm5lZWRUcmFuc2Zvcm0gPSBmYWxzZTtcbiAgcmV0dXJuIER1cGxleC5wcm90b3R5cGUucHVzaC5jYWxsKHRoaXMsIGNodW5rLCBlbmNvZGluZyk7XG59O1xuXG4vLyBUaGlzIGlzIHRoZSBwYXJ0IHdoZXJlIHlvdSBkbyBzdHVmZiFcbi8vIG92ZXJyaWRlIHRoaXMgZnVuY3Rpb24gaW4gaW1wbGVtZW50YXRpb24gY2xhc3Nlcy5cbi8vICdjaHVuaycgaXMgYW4gaW5wdXQgY2h1bmsuXG4vL1xuLy8gQ2FsbCBgcHVzaChuZXdDaHVuaylgIHRvIHBhc3MgYWxvbmcgdHJhbnNmb3JtZWQgb3V0cHV0XG4vLyB0byB0aGUgcmVhZGFibGUgc2lkZS4gIFlvdSBtYXkgY2FsbCAncHVzaCcgemVybyBvciBtb3JlIHRpbWVzLlxuLy9cbi8vIENhbGwgYGNiKGVycilgIHdoZW4geW91IGFyZSBkb25lIHdpdGggdGhpcyBjaHVuay4gIElmIHlvdSBwYXNzXG4vLyBhbiBlcnJvciwgdGhlbiB0aGF0J2xsIHB1dCB0aGUgaHVydCBvbiB0aGUgd2hvbGUgb3BlcmF0aW9uLiAgSWYgeW91XG4vLyBuZXZlciBjYWxsIGNiKCksIHRoZW4geW91J2xsIG5ldmVyIGdldCBhbm90aGVyIGNodW5rLlxuVHJhbnNmb3JtLnByb3RvdHlwZS5fdHJhbnNmb3JtID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdGhyb3cgbmV3IEVycm9yKCdOb3QgaW1wbGVtZW50ZWQnKTtcbn07XG5cblRyYW5zZm9ybS5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24gKGNodW5rLCBlbmNvZGluZywgY2IpIHtcbiAgdmFyIHRzID0gdGhpcy5fdHJhbnNmb3JtU3RhdGU7XG4gIHRzLndyaXRlY2IgPSBjYjtcbiAgdHMud3JpdGVjaHVuayA9IGNodW5rO1xuICB0cy53cml0ZWVuY29kaW5nID0gZW5jb2Rpbmc7XG4gIGlmICghdHMudHJhbnNmb3JtaW5nKSB7XG4gICAgdmFyIHJzID0gdGhpcy5fcmVhZGFibGVTdGF0ZTtcbiAgICBpZiAodHMubmVlZFRyYW5zZm9ybSB8fCBycy5uZWVkUmVhZGFibGUgfHwgcnMubGVuZ3RoIDwgcnMuaGlnaFdhdGVyTWFyaykgdGhpcy5fcmVhZChycy5oaWdoV2F0ZXJNYXJrKTtcbiAgfVxufTtcblxuLy8gRG9lc24ndCBtYXR0ZXIgd2hhdCB0aGUgYXJncyBhcmUgaGVyZS5cbi8vIF90cmFuc2Zvcm0gZG9lcyBhbGwgdGhlIHdvcmsuXG4vLyBUaGF0IHdlIGdvdCBoZXJlIG1lYW5zIHRoYXQgdGhlIHJlYWRhYmxlIHNpZGUgd2FudHMgbW9yZSBkYXRhLlxuVHJhbnNmb3JtLnByb3RvdHlwZS5fcmVhZCA9IGZ1bmN0aW9uIChuKSB7XG4gIHZhciB0cyA9IHRoaXMuX3RyYW5zZm9ybVN0YXRlO1xuXG4gIGlmICh0cy53cml0ZWNodW5rICE9PSBudWxsICYmIHRzLndyaXRlY2IgJiYgIXRzLnRyYW5zZm9ybWluZykge1xuICAgIHRzLnRyYW5zZm9ybWluZyA9IHRydWU7XG4gICAgdGhpcy5fdHJhbnNmb3JtKHRzLndyaXRlY2h1bmssIHRzLndyaXRlZW5jb2RpbmcsIHRzLmFmdGVyVHJhbnNmb3JtKTtcbiAgfSBlbHNlIHtcbiAgICAvLyBtYXJrIHRoYXQgd2UgbmVlZCBhIHRyYW5zZm9ybSwgc28gdGhhdCBhbnkgZGF0YSB0aGF0IGNvbWVzIGluXG4gICAgLy8gd2lsbCBnZXQgcHJvY2Vzc2VkLCBub3cgdGhhdCB3ZSd2ZSBhc2tlZCBmb3IgaXQuXG4gICAgdHMubmVlZFRyYW5zZm9ybSA9IHRydWU7XG4gIH1cbn07XG5cbmZ1bmN0aW9uIGRvbmUoc3RyZWFtLCBlcikge1xuICBpZiAoZXIpIHJldHVybiBzdHJlYW0uZW1pdCgnZXJyb3InLCBlcik7XG5cbiAgLy8gaWYgdGhlcmUncyBub3RoaW5nIGluIHRoZSB3cml0ZSBidWZmZXIsIHRoZW4gdGhhdCBtZWFuc1xuICAvLyB0aGF0IG5vdGhpbmcgbW9yZSB3aWxsIGV2ZXIgYmUgcHJvdmlkZWRcbiAgdmFyIHdzID0gc3RyZWFtLl93cml0YWJsZVN0YXRlO1xuICB2YXIgdHMgPSBzdHJlYW0uX3RyYW5zZm9ybVN0YXRlO1xuXG4gIGlmICh3cy5sZW5ndGgpIHRocm93IG5ldyBFcnJvcignQ2FsbGluZyB0cmFuc2Zvcm0gZG9uZSB3aGVuIHdzLmxlbmd0aCAhPSAwJyk7XG5cbiAgaWYgKHRzLnRyYW5zZm9ybWluZykgdGhyb3cgbmV3IEVycm9yKCdDYWxsaW5nIHRyYW5zZm9ybSBkb25lIHdoZW4gc3RpbGwgdHJhbnNmb3JtaW5nJyk7XG5cbiAgcmV0dXJuIHN0cmVhbS5wdXNoKG51bGwpO1xufVxuIiwiXG5pbXBvcnQge1RyYW5zZm9ybX0gZnJvbSAnLi90cmFuc2Zvcm0nO1xuXG5pbXBvcnQge2luaGVyaXRzfSBmcm9tICd1dGlsJztcbmluaGVyaXRzKFBhc3NUaHJvdWdoLCBUcmFuc2Zvcm0pO1xuZXhwb3J0IGRlZmF1bHQgUGFzc1Rocm91Z2g7XG5leHBvcnQgZnVuY3Rpb24gUGFzc1Rocm91Z2gob3B0aW9ucykge1xuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgUGFzc1Rocm91Z2gpKSByZXR1cm4gbmV3IFBhc3NUaHJvdWdoKG9wdGlvbnMpO1xuXG4gIFRyYW5zZm9ybS5jYWxsKHRoaXMsIG9wdGlvbnMpO1xufVxuXG5QYXNzVGhyb3VnaC5wcm90b3R5cGUuX3RyYW5zZm9ybSA9IGZ1bmN0aW9uIChjaHVuaywgZW5jb2RpbmcsIGNiKSB7XG4gIGNiKG51bGwsIGNodW5rKTtcbn07XG4iLCJpbXBvcnQgRUUgZnJvbSAnZXZlbnRzJztcbmltcG9ydCB7aW5oZXJpdHN9IGZyb20gJ3V0aWwnO1xuXG5pbXBvcnQge0R1cGxleH0gZnJvbSAnLi9yZWFkYWJsZS1zdHJlYW0vZHVwbGV4LmpzJztcbmltcG9ydCB7UmVhZGFibGV9IGZyb20gJy4vcmVhZGFibGUtc3RyZWFtL3JlYWRhYmxlLmpzJztcbmltcG9ydCB7V3JpdGFibGV9IGZyb20gJy4vcmVhZGFibGUtc3RyZWFtL3dyaXRhYmxlLmpzJztcbmltcG9ydCB7VHJhbnNmb3JtfSBmcm9tICcuL3JlYWRhYmxlLXN0cmVhbS90cmFuc2Zvcm0uanMnO1xuaW1wb3J0IHtQYXNzVGhyb3VnaH0gZnJvbSAnLi9yZWFkYWJsZS1zdHJlYW0vcGFzc3Rocm91Z2guanMnO1xuaW5oZXJpdHMoU3RyZWFtLCBFRSk7XG5TdHJlYW0uUmVhZGFibGUgPSBSZWFkYWJsZTtcblN0cmVhbS5Xcml0YWJsZSA9IFdyaXRhYmxlO1xuU3RyZWFtLkR1cGxleCA9IER1cGxleDtcblN0cmVhbS5UcmFuc2Zvcm0gPSBUcmFuc2Zvcm07XG5TdHJlYW0uUGFzc1Rocm91Z2ggPSBQYXNzVGhyb3VnaDtcblxuLy8gQmFja3dhcmRzLWNvbXBhdCB3aXRoIG5vZGUgMC40LnhcblN0cmVhbS5TdHJlYW0gPSBTdHJlYW07XG5cbmV4cG9ydCBkZWZhdWx0IFN0cmVhbTtcbmV4cG9ydCB7UmVhZGFibGUsV3JpdGFibGUsRHVwbGV4LFRyYW5zZm9ybSxQYXNzVGhyb3VnaCxTdHJlYW19XG5cbi8vIG9sZC1zdHlsZSBzdHJlYW1zLiAgTm90ZSB0aGF0IHRoZSBwaXBlIG1ldGhvZCAodGhlIG9ubHkgcmVsZXZhbnRcbi8vIHBhcnQgb2YgdGhpcyBjbGFzcykgaXMgb3ZlcnJpZGRlbiBpbiB0aGUgUmVhZGFibGUgY2xhc3MuXG5cbmZ1bmN0aW9uIFN0cmVhbSgpIHtcbiAgRUUuY2FsbCh0aGlzKTtcbn1cblxuU3RyZWFtLnByb3RvdHlwZS5waXBlID0gZnVuY3Rpb24oZGVzdCwgb3B0aW9ucykge1xuICB2YXIgc291cmNlID0gdGhpcztcblxuICBmdW5jdGlvbiBvbmRhdGEoY2h1bmspIHtcbiAgICBpZiAoZGVzdC53cml0YWJsZSkge1xuICAgICAgaWYgKGZhbHNlID09PSBkZXN0LndyaXRlKGNodW5rKSAmJiBzb3VyY2UucGF1c2UpIHtcbiAgICAgICAgc291cmNlLnBhdXNlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgc291cmNlLm9uKCdkYXRhJywgb25kYXRhKTtcblxuICBmdW5jdGlvbiBvbmRyYWluKCkge1xuICAgIGlmIChzb3VyY2UucmVhZGFibGUgJiYgc291cmNlLnJlc3VtZSkge1xuICAgICAgc291cmNlLnJlc3VtZSgpO1xuICAgIH1cbiAgfVxuXG4gIGRlc3Qub24oJ2RyYWluJywgb25kcmFpbik7XG5cbiAgLy8gSWYgdGhlICdlbmQnIG9wdGlvbiBpcyBub3Qgc3VwcGxpZWQsIGRlc3QuZW5kKCkgd2lsbCBiZSBjYWxsZWQgd2hlblxuICAvLyBzb3VyY2UgZ2V0cyB0aGUgJ2VuZCcgb3IgJ2Nsb3NlJyBldmVudHMuICBPbmx5IGRlc3QuZW5kKCkgb25jZS5cbiAgaWYgKCFkZXN0Ll9pc1N0ZGlvICYmICghb3B0aW9ucyB8fCBvcHRpb25zLmVuZCAhPT0gZmFsc2UpKSB7XG4gICAgc291cmNlLm9uKCdlbmQnLCBvbmVuZCk7XG4gICAgc291cmNlLm9uKCdjbG9zZScsIG9uY2xvc2UpO1xuICB9XG5cbiAgdmFyIGRpZE9uRW5kID0gZmFsc2U7XG4gIGZ1bmN0aW9uIG9uZW5kKCkge1xuICAgIGlmIChkaWRPbkVuZCkgcmV0dXJuO1xuICAgIGRpZE9uRW5kID0gdHJ1ZTtcblxuICAgIGRlc3QuZW5kKCk7XG4gIH1cblxuXG4gIGZ1bmN0aW9uIG9uY2xvc2UoKSB7XG4gICAgaWYgKGRpZE9uRW5kKSByZXR1cm47XG4gICAgZGlkT25FbmQgPSB0cnVlO1xuXG4gICAgaWYgKHR5cGVvZiBkZXN0LmRlc3Ryb3kgPT09ICdmdW5jdGlvbicpIGRlc3QuZGVzdHJveSgpO1xuICB9XG5cbiAgLy8gZG9uJ3QgbGVhdmUgZGFuZ2xpbmcgcGlwZXMgd2hlbiB0aGVyZSBhcmUgZXJyb3JzLlxuICBmdW5jdGlvbiBvbmVycm9yKGVyKSB7XG4gICAgY2xlYW51cCgpO1xuICAgIGlmIChFRS5saXN0ZW5lckNvdW50KHRoaXMsICdlcnJvcicpID09PSAwKSB7XG4gICAgICB0aHJvdyBlcjsgLy8gVW5oYW5kbGVkIHN0cmVhbSBlcnJvciBpbiBwaXBlLlxuICAgIH1cbiAgfVxuXG4gIHNvdXJjZS5vbignZXJyb3InLCBvbmVycm9yKTtcbiAgZGVzdC5vbignZXJyb3InLCBvbmVycm9yKTtcblxuICAvLyByZW1vdmUgYWxsIHRoZSBldmVudCBsaXN0ZW5lcnMgdGhhdCB3ZXJlIGFkZGVkLlxuICBmdW5jdGlvbiBjbGVhbnVwKCkge1xuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZGF0YScsIG9uZGF0YSk7XG4gICAgZGVzdC5yZW1vdmVMaXN0ZW5lcignZHJhaW4nLCBvbmRyYWluKTtcblxuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZW5kJywgb25lbmQpO1xuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignY2xvc2UnLCBvbmNsb3NlKTtcblxuICAgIHNvdXJjZS5yZW1vdmVMaXN0ZW5lcignZXJyb3InLCBvbmVycm9yKTtcbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdlcnJvcicsIG9uZXJyb3IpO1xuXG4gICAgc291cmNlLnJlbW92ZUxpc3RlbmVyKCdlbmQnLCBjbGVhbnVwKTtcbiAgICBzb3VyY2UucmVtb3ZlTGlzdGVuZXIoJ2Nsb3NlJywgY2xlYW51cCk7XG5cbiAgICBkZXN0LnJlbW92ZUxpc3RlbmVyKCdjbG9zZScsIGNsZWFudXApO1xuICB9XG5cbiAgc291cmNlLm9uKCdlbmQnLCBjbGVhbnVwKTtcbiAgc291cmNlLm9uKCdjbG9zZScsIGNsZWFudXApO1xuXG4gIGRlc3Qub24oJ2Nsb3NlJywgY2xlYW51cCk7XG5cbiAgZGVzdC5lbWl0KCdwaXBlJywgc291cmNlKTtcblxuICAvLyBBbGxvdyBmb3IgdW5peC1saWtlIHVzYWdlOiBBLnBpcGUoQikucGlwZShDKVxuICByZXR1cm4gZGVzdDtcbn07XG4iLCJpbXBvcnQge292ZXJyaWRlTWltZVR5cGV9IGZyb20gJy4vY2FwYWJpbGl0eSc7XG5pbXBvcnQge2luaGVyaXRzfSBmcm9tICd1dGlsJztcbmltcG9ydCB7UmVhZGFibGV9IGZyb20gJ3N0cmVhbSc7XG5cbnZhciByU3RhdGVzID0ge1xuICBVTlNFTlQ6IDAsXG4gIE9QRU5FRDogMSxcbiAgSEVBREVSU19SRUNFSVZFRDogMixcbiAgTE9BRElORzogMyxcbiAgRE9ORTogNFxufVxuZXhwb3J0IHtcbiAgclN0YXRlcyBhcyByZWFkeVN0YXRlc1xufTtcbmV4cG9ydCBmdW5jdGlvbiBJbmNvbWluZ01lc3NhZ2UoeGhyLCByZXNwb25zZSwgbW9kZSkge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgUmVhZGFibGUuY2FsbChzZWxmKVxuXG4gIHNlbGYuX21vZGUgPSBtb2RlXG4gIHNlbGYuaGVhZGVycyA9IHt9XG4gIHNlbGYucmF3SGVhZGVycyA9IFtdXG4gIHNlbGYudHJhaWxlcnMgPSB7fVxuICBzZWxmLnJhd1RyYWlsZXJzID0gW11cblxuICAvLyBGYWtlIHRoZSAnY2xvc2UnIGV2ZW50LCBidXQgb25seSBvbmNlICdlbmQnIGZpcmVzXG4gIHNlbGYub24oJ2VuZCcsIGZ1bmN0aW9uKCkge1xuICAgIC8vIFRoZSBuZXh0VGljayBpcyBuZWNlc3NhcnkgdG8gcHJldmVudCB0aGUgJ3JlcXVlc3QnIG1vZHVsZSBmcm9tIGNhdXNpbmcgYW4gaW5maW5pdGUgbG9vcFxuICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICBzZWxmLmVtaXQoJ2Nsb3NlJylcbiAgICB9KVxuICB9KVxuICB2YXIgcmVhZDtcbiAgaWYgKG1vZGUgPT09ICdmZXRjaCcpIHtcbiAgICBzZWxmLl9mZXRjaFJlc3BvbnNlID0gcmVzcG9uc2VcblxuICAgIHNlbGYudXJsID0gcmVzcG9uc2UudXJsXG4gICAgc2VsZi5zdGF0dXNDb2RlID0gcmVzcG9uc2Uuc3RhdHVzXG4gICAgc2VsZi5zdGF0dXNNZXNzYWdlID0gcmVzcG9uc2Uuc3RhdHVzVGV4dFxuICAgICAgLy8gYmFja3dhcmRzIGNvbXBhdGlibGUgdmVyc2lvbiBvZiBmb3IgKDxpdGVtPiBvZiA8aXRlcmFibGU+KTpcbiAgICAgIC8vIGZvciAodmFyIDxpdGVtPixfaSxfaXQgPSA8aXRlcmFibGU+W1N5bWJvbC5pdGVyYXRvcl0oKTsgPGl0ZW0+ID0gKF9pID0gX2l0Lm5leHQoKSkudmFsdWUsIV9pLmRvbmU7KVxuICAgIGZvciAodmFyIGhlYWRlciwgX2ksIF9pdCA9IHJlc3BvbnNlLmhlYWRlcnNbU3ltYm9sLml0ZXJhdG9yXSgpOyBoZWFkZXIgPSAoX2kgPSBfaXQubmV4dCgpKS52YWx1ZSwgIV9pLmRvbmU7KSB7XG4gICAgICBzZWxmLmhlYWRlcnNbaGVhZGVyWzBdLnRvTG93ZXJDYXNlKCldID0gaGVhZGVyWzFdXG4gICAgICBzZWxmLnJhd0hlYWRlcnMucHVzaChoZWFkZXJbMF0sIGhlYWRlclsxXSlcbiAgICB9XG5cbiAgICAvLyBUT0RPOiB0aGlzIGRvZXNuJ3QgcmVzcGVjdCBiYWNrcHJlc3N1cmUuIE9uY2UgV3JpdGFibGVTdHJlYW0gaXMgYXZhaWxhYmxlLCB0aGlzIGNhbiBiZSBmaXhlZFxuICAgIHZhciByZWFkZXIgPSByZXNwb25zZS5ib2R5LmdldFJlYWRlcigpXG5cbiAgICByZWFkID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmVhZGVyLnJlYWQoKS50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xuICAgICAgICBpZiAoc2VsZi5fZGVzdHJveWVkKVxuICAgICAgICAgIHJldHVyblxuICAgICAgICBpZiAocmVzdWx0LmRvbmUpIHtcbiAgICAgICAgICBzZWxmLnB1c2gobnVsbClcbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICBzZWxmLnB1c2gobmV3IEJ1ZmZlcihyZXN1bHQudmFsdWUpKVxuICAgICAgICByZWFkKClcbiAgICAgIH0pXG4gICAgfVxuICAgIHJlYWQoKVxuXG4gIH0gZWxzZSB7XG4gICAgc2VsZi5feGhyID0geGhyXG4gICAgc2VsZi5fcG9zID0gMFxuXG4gICAgc2VsZi51cmwgPSB4aHIucmVzcG9uc2VVUkxcbiAgICBzZWxmLnN0YXR1c0NvZGUgPSB4aHIuc3RhdHVzXG4gICAgc2VsZi5zdGF0dXNNZXNzYWdlID0geGhyLnN0YXR1c1RleHRcbiAgICB2YXIgaGVhZGVycyA9IHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKS5zcGxpdCgvXFxyP1xcbi8pXG4gICAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKGhlYWRlcikge1xuICAgICAgdmFyIG1hdGNoZXMgPSBoZWFkZXIubWF0Y2goL14oW146XSspOlxccyooLiopLylcbiAgICAgIGlmIChtYXRjaGVzKSB7XG4gICAgICAgIHZhciBrZXkgPSBtYXRjaGVzWzFdLnRvTG93ZXJDYXNlKClcbiAgICAgICAgaWYgKGtleSA9PT0gJ3NldC1jb29raWUnKSB7XG4gICAgICAgICAgaWYgKHNlbGYuaGVhZGVyc1trZXldID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHNlbGYuaGVhZGVyc1trZXldID0gW11cbiAgICAgICAgICB9XG4gICAgICAgICAgc2VsZi5oZWFkZXJzW2tleV0ucHVzaChtYXRjaGVzWzJdKVxuICAgICAgICB9IGVsc2UgaWYgKHNlbGYuaGVhZGVyc1trZXldICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICBzZWxmLmhlYWRlcnNba2V5XSArPSAnLCAnICsgbWF0Y2hlc1syXVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGYuaGVhZGVyc1trZXldID0gbWF0Y2hlc1syXVxuICAgICAgICB9XG4gICAgICAgIHNlbGYucmF3SGVhZGVycy5wdXNoKG1hdGNoZXNbMV0sIG1hdGNoZXNbMl0pXG4gICAgICB9XG4gICAgfSlcblxuICAgIHNlbGYuX2NoYXJzZXQgPSAneC11c2VyLWRlZmluZWQnXG4gICAgaWYgKCFvdmVycmlkZU1pbWVUeXBlKSB7XG4gICAgICB2YXIgbWltZVR5cGUgPSBzZWxmLnJhd0hlYWRlcnNbJ21pbWUtdHlwZSddXG4gICAgICBpZiAobWltZVR5cGUpIHtcbiAgICAgICAgdmFyIGNoYXJzZXRNYXRjaCA9IG1pbWVUeXBlLm1hdGNoKC87XFxzKmNoYXJzZXQ9KFteO10pKDt8JCkvKVxuICAgICAgICBpZiAoY2hhcnNldE1hdGNoKSB7XG4gICAgICAgICAgc2VsZi5fY2hhcnNldCA9IGNoYXJzZXRNYXRjaFsxXS50b0xvd2VyQ2FzZSgpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmICghc2VsZi5fY2hhcnNldClcbiAgICAgICAgc2VsZi5fY2hhcnNldCA9ICd1dGYtOCcgLy8gYmVzdCBndWVzc1xuICAgIH1cbiAgfVxufVxuXG5pbmhlcml0cyhJbmNvbWluZ01lc3NhZ2UsIFJlYWRhYmxlKVxuXG5JbmNvbWluZ01lc3NhZ2UucHJvdG90eXBlLl9yZWFkID0gZnVuY3Rpb24oKSB7fVxuXG5JbmNvbWluZ01lc3NhZ2UucHJvdG90eXBlLl9vblhIUlByb2dyZXNzID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuXG4gIHZhciB4aHIgPSBzZWxmLl94aHJcblxuICB2YXIgcmVzcG9uc2UgPSBudWxsXG4gIHN3aXRjaCAoc2VsZi5fbW9kZSkge1xuICBjYXNlICd0ZXh0OnZiYXJyYXknOiAvLyBGb3IgSUU5XG4gICAgaWYgKHhoci5yZWFkeVN0YXRlICE9PSByU3RhdGVzLkRPTkUpXG4gICAgICBicmVha1xuICAgIHRyeSB7XG4gICAgICAvLyBUaGlzIGZhaWxzIGluIElFOFxuICAgICAgcmVzcG9uc2UgPSBuZXcgZ2xvYmFsLlZCQXJyYXkoeGhyLnJlc3BvbnNlQm9keSkudG9BcnJheSgpXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gcGFzc1xuICAgIH1cbiAgICBpZiAocmVzcG9uc2UgIT09IG51bGwpIHtcbiAgICAgIHNlbGYucHVzaChuZXcgQnVmZmVyKHJlc3BvbnNlKSlcbiAgICAgIGJyZWFrXG4gICAgfVxuICAgIC8vIEZhbGxzIHRocm91Z2ggaW4gSUU4XG4gIGNhc2UgJ3RleHQnOlxuICAgIHRyeSB7IC8vIFRoaXMgd2lsbCBmYWlsIHdoZW4gcmVhZHlTdGF0ZSA9IDMgaW4gSUU5LiBTd2l0Y2ggbW9kZSBhbmQgd2FpdCBmb3IgcmVhZHlTdGF0ZSA9IDRcbiAgICAgIHJlc3BvbnNlID0geGhyLnJlc3BvbnNlVGV4dFxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHNlbGYuX21vZGUgPSAndGV4dDp2YmFycmF5J1xuICAgICAgYnJlYWtcbiAgICB9XG4gICAgaWYgKHJlc3BvbnNlLmxlbmd0aCA+IHNlbGYuX3Bvcykge1xuICAgICAgdmFyIG5ld0RhdGEgPSByZXNwb25zZS5zdWJzdHIoc2VsZi5fcG9zKVxuICAgICAgaWYgKHNlbGYuX2NoYXJzZXQgPT09ICd4LXVzZXItZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIGJ1ZmZlciA9IG5ldyBCdWZmZXIobmV3RGF0YS5sZW5ndGgpXG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbmV3RGF0YS5sZW5ndGg7IGkrKylcbiAgICAgICAgICBidWZmZXJbaV0gPSBuZXdEYXRhLmNoYXJDb2RlQXQoaSkgJiAweGZmXG5cbiAgICAgICAgc2VsZi5wdXNoKGJ1ZmZlcilcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHNlbGYucHVzaChuZXdEYXRhLCBzZWxmLl9jaGFyc2V0KVxuICAgICAgfVxuICAgICAgc2VsZi5fcG9zID0gcmVzcG9uc2UubGVuZ3RoXG4gICAgfVxuICAgIGJyZWFrXG4gIGNhc2UgJ2FycmF5YnVmZmVyJzpcbiAgICBpZiAoeGhyLnJlYWR5U3RhdGUgIT09IHJTdGF0ZXMuRE9ORSB8fCAheGhyLnJlc3BvbnNlKVxuICAgICAgYnJlYWtcbiAgICByZXNwb25zZSA9IHhoci5yZXNwb25zZVxuICAgIHNlbGYucHVzaChuZXcgQnVmZmVyKG5ldyBVaW50OEFycmF5KHJlc3BvbnNlKSkpXG4gICAgYnJlYWtcbiAgY2FzZSAnbW96LWNodW5rZWQtYXJyYXlidWZmZXInOiAvLyB0YWtlIHdob2xlXG4gICAgcmVzcG9uc2UgPSB4aHIucmVzcG9uc2VcbiAgICBpZiAoeGhyLnJlYWR5U3RhdGUgIT09IHJTdGF0ZXMuTE9BRElORyB8fCAhcmVzcG9uc2UpXG4gICAgICBicmVha1xuICAgIHNlbGYucHVzaChuZXcgQnVmZmVyKG5ldyBVaW50OEFycmF5KHJlc3BvbnNlKSkpXG4gICAgYnJlYWtcbiAgY2FzZSAnbXMtc3RyZWFtJzpcbiAgICByZXNwb25zZSA9IHhoci5yZXNwb25zZVxuICAgIGlmICh4aHIucmVhZHlTdGF0ZSAhPT0gclN0YXRlcy5MT0FESU5HKVxuICAgICAgYnJlYWtcbiAgICB2YXIgcmVhZGVyID0gbmV3IGdsb2JhbC5NU1N0cmVhbVJlYWRlcigpXG4gICAgcmVhZGVyLm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChyZWFkZXIucmVzdWx0LmJ5dGVMZW5ndGggPiBzZWxmLl9wb3MpIHtcbiAgICAgICAgc2VsZi5wdXNoKG5ldyBCdWZmZXIobmV3IFVpbnQ4QXJyYXkocmVhZGVyLnJlc3VsdC5zbGljZShzZWxmLl9wb3MpKSkpXG4gICAgICAgIHNlbGYuX3BvcyA9IHJlYWRlci5yZXN1bHQuYnl0ZUxlbmd0aFxuICAgICAgfVxuICAgIH1cbiAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICBzZWxmLnB1c2gobnVsbClcbiAgICB9XG4gICAgICAvLyByZWFkZXIub25lcnJvciA9ID8/PyAvLyBUT0RPOiB0aGlzXG4gICAgcmVhZGVyLnJlYWRBc0FycmF5QnVmZmVyKHJlc3BvbnNlKVxuICAgIGJyZWFrXG4gIH1cblxuICAvLyBUaGUgbXMtc3RyZWFtIGNhc2UgaGFuZGxlcyBlbmQgc2VwYXJhdGVseSBpbiByZWFkZXIub25sb2FkKClcbiAgaWYgKHNlbGYuX3hoci5yZWFkeVN0YXRlID09PSByU3RhdGVzLkRPTkUgJiYgc2VsZi5fbW9kZSAhPT0gJ21zLXN0cmVhbScpIHtcbiAgICBzZWxmLnB1c2gobnVsbClcbiAgfVxufVxuIiwiLy8gZnJvbSBodHRwczovL2dpdGh1Yi5jb20vamhpZXNleS90by1hcnJheWJ1ZmZlci9ibG9iLzY1MDJkOTg1MGU3MGJhNzkzNWE3ZGY0YWQ4NmIzNThmYzIxNmY5ZjAvaW5kZXguanNcblxuLy8gTUlUIExpY2Vuc2Vcbi8vIENvcHlyaWdodCAoYykgMjAxNiBKb2huIEhpZXNleVxuaW1wb3J0IHtpc0J1ZmZlcn0gZnJvbSAnYnVmZmVyJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIChidWYpIHtcbiAgLy8gSWYgdGhlIGJ1ZmZlciBpcyBiYWNrZWQgYnkgYSBVaW50OEFycmF5LCBhIGZhc3RlciB2ZXJzaW9uIHdpbGwgd29ya1xuICBpZiAoYnVmIGluc3RhbmNlb2YgVWludDhBcnJheSkge1xuICAgIC8vIElmIHRoZSBidWZmZXIgaXNuJ3QgYSBzdWJhcnJheSwgcmV0dXJuIHRoZSB1bmRlcmx5aW5nIEFycmF5QnVmZmVyXG4gICAgaWYgKGJ1Zi5ieXRlT2Zmc2V0ID09PSAwICYmIGJ1Zi5ieXRlTGVuZ3RoID09PSBidWYuYnVmZmVyLmJ5dGVMZW5ndGgpIHtcbiAgICAgIHJldHVybiBidWYuYnVmZmVyXG4gICAgfSBlbHNlIGlmICh0eXBlb2YgYnVmLmJ1ZmZlci5zbGljZSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgLy8gT3RoZXJ3aXNlIHdlIG5lZWQgdG8gZ2V0IGEgcHJvcGVyIGNvcHlcbiAgICAgIHJldHVybiBidWYuYnVmZmVyLnNsaWNlKGJ1Zi5ieXRlT2Zmc2V0LCBidWYuYnl0ZU9mZnNldCArIGJ1Zi5ieXRlTGVuZ3RoKVxuICAgIH1cbiAgfVxuXG4gIGlmIChpc0J1ZmZlcihidWYpKSB7XG4gICAgLy8gVGhpcyBpcyB0aGUgc2xvdyB2ZXJzaW9uIHRoYXQgd2lsbCB3b3JrIHdpdGggYW55IEJ1ZmZlclxuICAgIC8vIGltcGxlbWVudGF0aW9uIChldmVuIGluIG9sZCBicm93c2VycylcbiAgICB2YXIgYXJyYXlDb3B5ID0gbmV3IFVpbnQ4QXJyYXkoYnVmLmxlbmd0aClcbiAgICB2YXIgbGVuID0gYnVmLmxlbmd0aFxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcbiAgICAgIGFycmF5Q29weVtpXSA9IGJ1ZltpXVxuICAgIH1cbiAgICByZXR1cm4gYXJyYXlDb3B5LmJ1ZmZlclxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignQXJndW1lbnQgbXVzdCBiZSBhIEJ1ZmZlcicpXG4gIH1cbn1cbiIsImltcG9ydCAqIGFzIGNhcGFiaWxpdHkgZnJvbSAnLi9jYXBhYmlsaXR5JztcbmltcG9ydCB7aW5oZXJpdHN9IGZyb20gJ3V0aWwnO1xuaW1wb3J0IHtJbmNvbWluZ01lc3NhZ2UsIHJlYWR5U3RhdGVzIGFzIHJTdGF0ZXN9IGZyb20gJy4vcmVzcG9uc2UnO1xuaW1wb3J0IHtXcml0YWJsZX0gZnJvbSAnc3RyZWFtJztcbmltcG9ydCB0b0FycmF5QnVmZmVyIGZyb20gJy4vdG8tYXJyYXlidWZmZXInO1xuXG5mdW5jdGlvbiBkZWNpZGVNb2RlKHByZWZlckJpbmFyeSwgdXNlRmV0Y2gpIHtcbiAgaWYgKGNhcGFiaWxpdHkuaGFzRmV0Y2ggJiYgdXNlRmV0Y2gpIHtcbiAgICByZXR1cm4gJ2ZldGNoJ1xuICB9IGVsc2UgaWYgKGNhcGFiaWxpdHkubW96Y2h1bmtlZGFycmF5YnVmZmVyKSB7XG4gICAgcmV0dXJuICdtb3otY2h1bmtlZC1hcnJheWJ1ZmZlcidcbiAgfSBlbHNlIGlmIChjYXBhYmlsaXR5Lm1zc3RyZWFtKSB7XG4gICAgcmV0dXJuICdtcy1zdHJlYW0nXG4gIH0gZWxzZSBpZiAoY2FwYWJpbGl0eS5hcnJheWJ1ZmZlciAmJiBwcmVmZXJCaW5hcnkpIHtcbiAgICByZXR1cm4gJ2FycmF5YnVmZmVyJ1xuICB9IGVsc2UgaWYgKGNhcGFiaWxpdHkudmJBcnJheSAmJiBwcmVmZXJCaW5hcnkpIHtcbiAgICByZXR1cm4gJ3RleHQ6dmJhcnJheSdcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gJ3RleHQnXG4gIH1cbn1cbmV4cG9ydCBkZWZhdWx0IENsaWVudFJlcXVlc3Q7XG5cbmZ1bmN0aW9uIENsaWVudFJlcXVlc3Qob3B0cykge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgV3JpdGFibGUuY2FsbChzZWxmKVxuXG4gIHNlbGYuX29wdHMgPSBvcHRzXG4gIHNlbGYuX2JvZHkgPSBbXVxuICBzZWxmLl9oZWFkZXJzID0ge31cbiAgaWYgKG9wdHMuYXV0aClcbiAgICBzZWxmLnNldEhlYWRlcignQXV0aG9yaXphdGlvbicsICdCYXNpYyAnICsgbmV3IEJ1ZmZlcihvcHRzLmF1dGgpLnRvU3RyaW5nKCdiYXNlNjQnKSlcbiAgT2JqZWN0LmtleXMob3B0cy5oZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uKG5hbWUpIHtcbiAgICBzZWxmLnNldEhlYWRlcihuYW1lLCBvcHRzLmhlYWRlcnNbbmFtZV0pXG4gIH0pXG5cbiAgdmFyIHByZWZlckJpbmFyeVxuICB2YXIgdXNlRmV0Y2ggPSB0cnVlXG4gIGlmIChvcHRzLm1vZGUgPT09ICdkaXNhYmxlLWZldGNoJykge1xuICAgIC8vIElmIHRoZSB1c2Ugb2YgWEhSIHNob3VsZCBiZSBwcmVmZXJyZWQgYW5kIGluY2x1ZGVzIHByZXNlcnZpbmcgdGhlICdjb250ZW50LXR5cGUnIGhlYWRlclxuICAgIHVzZUZldGNoID0gZmFsc2VcbiAgICBwcmVmZXJCaW5hcnkgPSB0cnVlXG4gIH0gZWxzZSBpZiAob3B0cy5tb2RlID09PSAncHJlZmVyLXN0cmVhbWluZycpIHtcbiAgICAvLyBJZiBzdHJlYW1pbmcgaXMgYSBoaWdoIHByaW9yaXR5IGJ1dCBiaW5hcnkgY29tcGF0aWJpbGl0eSBhbmRcbiAgICAvLyB0aGUgYWNjdXJhY3kgb2YgdGhlICdjb250ZW50LXR5cGUnIGhlYWRlciBhcmVuJ3RcbiAgICBwcmVmZXJCaW5hcnkgPSBmYWxzZVxuICB9IGVsc2UgaWYgKG9wdHMubW9kZSA9PT0gJ2FsbG93LXdyb25nLWNvbnRlbnQtdHlwZScpIHtcbiAgICAvLyBJZiBzdHJlYW1pbmcgaXMgbW9yZSBpbXBvcnRhbnQgdGhhbiBwcmVzZXJ2aW5nIHRoZSAnY29udGVudC10eXBlJyBoZWFkZXJcbiAgICBwcmVmZXJCaW5hcnkgPSAhY2FwYWJpbGl0eS5vdmVycmlkZU1pbWVUeXBlXG4gIH0gZWxzZSBpZiAoIW9wdHMubW9kZSB8fCBvcHRzLm1vZGUgPT09ICdkZWZhdWx0JyB8fCBvcHRzLm1vZGUgPT09ICdwcmVmZXItZmFzdCcpIHtcbiAgICAvLyBVc2UgYmluYXJ5IGlmIHRleHQgc3RyZWFtaW5nIG1heSBjb3JydXB0IGRhdGEgb3IgdGhlIGNvbnRlbnQtdHlwZSBoZWFkZXIsIG9yIGZvciBzcGVlZFxuICAgIHByZWZlckJpbmFyeSA9IHRydWVcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgdmFsdWUgZm9yIG9wdHMubW9kZScpXG4gIH1cbiAgc2VsZi5fbW9kZSA9IGRlY2lkZU1vZGUocHJlZmVyQmluYXJ5LCB1c2VGZXRjaClcblxuICBzZWxmLm9uKCdmaW5pc2gnLCBmdW5jdGlvbigpIHtcbiAgICBzZWxmLl9vbkZpbmlzaCgpXG4gIH0pXG59XG5cbmluaGVyaXRzKENsaWVudFJlcXVlc3QsIFdyaXRhYmxlKVxuLy8gVGFrZW4gZnJvbSBodHRwOi8vd3d3LnczLm9yZy9UUi9YTUxIdHRwUmVxdWVzdC8jdGhlLXNldHJlcXVlc3RoZWFkZXIlMjglMjktbWV0aG9kXG52YXIgdW5zYWZlSGVhZGVycyA9IFtcbiAgJ2FjY2VwdC1jaGFyc2V0JyxcbiAgJ2FjY2VwdC1lbmNvZGluZycsXG4gICdhY2Nlc3MtY29udHJvbC1yZXF1ZXN0LWhlYWRlcnMnLFxuICAnYWNjZXNzLWNvbnRyb2wtcmVxdWVzdC1tZXRob2QnLFxuICAnY29ubmVjdGlvbicsXG4gICdjb250ZW50LWxlbmd0aCcsXG4gICdjb29raWUnLFxuICAnY29va2llMicsXG4gICdkYXRlJyxcbiAgJ2RudCcsXG4gICdleHBlY3QnLFxuICAnaG9zdCcsXG4gICdrZWVwLWFsaXZlJyxcbiAgJ29yaWdpbicsXG4gICdyZWZlcmVyJyxcbiAgJ3RlJyxcbiAgJ3RyYWlsZXInLFxuICAndHJhbnNmZXItZW5jb2RpbmcnLFxuICAndXBncmFkZScsXG4gICd1c2VyLWFnZW50JyxcbiAgJ3ZpYSdcbl1cbkNsaWVudFJlcXVlc3QucHJvdG90eXBlLnNldEhlYWRlciA9IGZ1bmN0aW9uKG5hbWUsIHZhbHVlKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgbG93ZXJOYW1lID0gbmFtZS50b0xvd2VyQ2FzZSgpXG4gICAgLy8gVGhpcyBjaGVjayBpcyBub3QgbmVjZXNzYXJ5LCBidXQgaXQgcHJldmVudHMgd2FybmluZ3MgZnJvbSBicm93c2VycyBhYm91dCBzZXR0aW5nIHVuc2FmZVxuICAgIC8vIGhlYWRlcnMuIFRvIGJlIGhvbmVzdCBJJ20gbm90IGVudGlyZWx5IHN1cmUgaGlkaW5nIHRoZXNlIHdhcm5pbmdzIGlzIGEgZ29vZCB0aGluZywgYnV0XG4gICAgLy8gaHR0cC1icm93c2VyaWZ5IGRpZCBpdCwgc28gSSB3aWxsIHRvby5cbiAgaWYgKHVuc2FmZUhlYWRlcnMuaW5kZXhPZihsb3dlck5hbWUpICE9PSAtMSlcbiAgICByZXR1cm5cblxuICBzZWxmLl9oZWFkZXJzW2xvd2VyTmFtZV0gPSB7XG4gICAgbmFtZTogbmFtZSxcbiAgICB2YWx1ZTogdmFsdWVcbiAgfVxufVxuXG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5nZXRIZWFkZXIgPSBmdW5jdGlvbihuYW1lKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICByZXR1cm4gc2VsZi5faGVhZGVyc1tuYW1lLnRvTG93ZXJDYXNlKCldLnZhbHVlXG59XG5cbkNsaWVudFJlcXVlc3QucHJvdG90eXBlLnJlbW92ZUhlYWRlciA9IGZ1bmN0aW9uKG5hbWUpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIGRlbGV0ZSBzZWxmLl9oZWFkZXJzW25hbWUudG9Mb3dlckNhc2UoKV1cbn1cblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuX29uRmluaXNoID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuXG4gIGlmIChzZWxmLl9kZXN0cm95ZWQpXG4gICAgcmV0dXJuXG4gIHZhciBvcHRzID0gc2VsZi5fb3B0c1xuXG4gIHZhciBoZWFkZXJzT2JqID0gc2VsZi5faGVhZGVyc1xuICB2YXIgYm9keVxuICBpZiAob3B0cy5tZXRob2QgPT09ICdQT1NUJyB8fCBvcHRzLm1ldGhvZCA9PT0gJ1BVVCcgfHwgb3B0cy5tZXRob2QgPT09ICdQQVRDSCcpIHtcbiAgICBpZiAoY2FwYWJpbGl0eS5ibG9iQ29uc3RydWN0b3IoKSkge1xuICAgICAgYm9keSA9IG5ldyBnbG9iYWwuQmxvYihzZWxmLl9ib2R5Lm1hcChmdW5jdGlvbihidWZmZXIpIHtcbiAgICAgICAgcmV0dXJuIHRvQXJyYXlCdWZmZXIoYnVmZmVyKVxuICAgICAgfSksIHtcbiAgICAgICAgdHlwZTogKGhlYWRlcnNPYmpbJ2NvbnRlbnQtdHlwZSddIHx8IHt9KS52YWx1ZSB8fCAnJ1xuICAgICAgfSlcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gZ2V0IHV0Zjggc3RyaW5nXG4gICAgICBib2R5ID0gQnVmZmVyLmNvbmNhdChzZWxmLl9ib2R5KS50b1N0cmluZygpXG4gICAgfVxuICB9XG5cbiAgaWYgKHNlbGYuX21vZGUgPT09ICdmZXRjaCcpIHtcbiAgICB2YXIgaGVhZGVycyA9IE9iamVjdC5rZXlzKGhlYWRlcnNPYmopLm1hcChmdW5jdGlvbihuYW1lKSB7XG4gICAgICByZXR1cm4gW2hlYWRlcnNPYmpbbmFtZV0ubmFtZSwgaGVhZGVyc09ialtuYW1lXS52YWx1ZV1cbiAgICB9KVxuXG4gICAgZ2xvYmFsLmZldGNoKHNlbGYuX29wdHMudXJsLCB7XG4gICAgICBtZXRob2Q6IHNlbGYuX29wdHMubWV0aG9kLFxuICAgICAgaGVhZGVyczogaGVhZGVycyxcbiAgICAgIGJvZHk6IGJvZHksXG4gICAgICBtb2RlOiAnY29ycycsXG4gICAgICBjcmVkZW50aWFsczogb3B0cy53aXRoQ3JlZGVudGlhbHMgPyAnaW5jbHVkZScgOiAnc2FtZS1vcmlnaW4nXG4gICAgfSkudGhlbihmdW5jdGlvbihyZXNwb25zZSkge1xuICAgICAgc2VsZi5fZmV0Y2hSZXNwb25zZSA9IHJlc3BvbnNlXG4gICAgICBzZWxmLl9jb25uZWN0KClcbiAgICB9LCBmdW5jdGlvbihyZWFzb24pIHtcbiAgICAgIHNlbGYuZW1pdCgnZXJyb3InLCByZWFzb24pXG4gICAgfSlcbiAgfSBlbHNlIHtcbiAgICB2YXIgeGhyID0gc2VsZi5feGhyID0gbmV3IGdsb2JhbC5YTUxIdHRwUmVxdWVzdCgpXG4gICAgdHJ5IHtcbiAgICAgIHhoci5vcGVuKHNlbGYuX29wdHMubWV0aG9kLCBzZWxmLl9vcHRzLnVybCwgdHJ1ZSlcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHByb2Nlc3MubmV4dFRpY2soZnVuY3Rpb24oKSB7XG4gICAgICAgIHNlbGYuZW1pdCgnZXJyb3InLCBlcnIpXG4gICAgICB9KVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gQ2FuJ3Qgc2V0IHJlc3BvbnNlVHlwZSBvbiByZWFsbHkgb2xkIGJyb3dzZXJzXG4gICAgaWYgKCdyZXNwb25zZVR5cGUnIGluIHhocilcbiAgICAgIHhoci5yZXNwb25zZVR5cGUgPSBzZWxmLl9tb2RlLnNwbGl0KCc6JylbMF1cblxuICAgIGlmICgnd2l0aENyZWRlbnRpYWxzJyBpbiB4aHIpXG4gICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gISFvcHRzLndpdGhDcmVkZW50aWFsc1xuXG4gICAgaWYgKHNlbGYuX21vZGUgPT09ICd0ZXh0JyAmJiAnb3ZlcnJpZGVNaW1lVHlwZScgaW4geGhyKVxuICAgICAgeGhyLm92ZXJyaWRlTWltZVR5cGUoJ3RleHQvcGxhaW47IGNoYXJzZXQ9eC11c2VyLWRlZmluZWQnKVxuXG4gICAgT2JqZWN0LmtleXMoaGVhZGVyc09iaikuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XG4gICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihoZWFkZXJzT2JqW25hbWVdLm5hbWUsIGhlYWRlcnNPYmpbbmFtZV0udmFsdWUpXG4gICAgfSlcblxuICAgIHNlbGYuX3Jlc3BvbnNlID0gbnVsbFxuICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcbiAgICAgIHN3aXRjaCAoeGhyLnJlYWR5U3RhdGUpIHtcbiAgICAgIGNhc2UgclN0YXRlcy5MT0FESU5HOlxuICAgICAgY2FzZSByU3RhdGVzLkRPTkU6XG4gICAgICAgIHNlbGYuX29uWEhSUHJvZ3Jlc3MoKVxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cbiAgICAgIC8vIE5lY2Vzc2FyeSBmb3Igc3RyZWFtaW5nIGluIEZpcmVmb3gsIHNpbmNlIHhoci5yZXNwb25zZSBpcyBPTkxZIGRlZmluZWRcbiAgICAgIC8vIGluIG9ucHJvZ3Jlc3MsIG5vdCBpbiBvbnJlYWR5c3RhdGVjaGFuZ2Ugd2l0aCB4aHIucmVhZHlTdGF0ZSA9IDNcbiAgICBpZiAoc2VsZi5fbW9kZSA9PT0gJ21vei1jaHVua2VkLWFycmF5YnVmZmVyJykge1xuICAgICAgeGhyLm9ucHJvZ3Jlc3MgPSBmdW5jdGlvbigpIHtcbiAgICAgICAgc2VsZi5fb25YSFJQcm9ncmVzcygpXG4gICAgICB9XG4gICAgfVxuXG4gICAgeGhyLm9uZXJyb3IgPSBmdW5jdGlvbigpIHtcbiAgICAgIGlmIChzZWxmLl9kZXN0cm95ZWQpXG4gICAgICAgIHJldHVyblxuICAgICAgc2VsZi5lbWl0KCdlcnJvcicsIG5ldyBFcnJvcignWEhSIGVycm9yJykpXG4gICAgfVxuXG4gICAgdHJ5IHtcbiAgICAgIHhoci5zZW5kKGJvZHkpXG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBwcm9jZXNzLm5leHRUaWNrKGZ1bmN0aW9uKCkge1xuICAgICAgICBzZWxmLmVtaXQoJ2Vycm9yJywgZXJyKVxuICAgICAgfSlcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfVxufVxuXG4vKipcbiAqIENoZWNrcyBpZiB4aHIuc3RhdHVzIGlzIHJlYWRhYmxlIGFuZCBub24temVybywgaW5kaWNhdGluZyBubyBlcnJvci5cbiAqIEV2ZW4gdGhvdWdoIHRoZSBzcGVjIHNheXMgaXQgc2hvdWxkIGJlIGF2YWlsYWJsZSBpbiByZWFkeVN0YXRlIDMsXG4gKiBhY2Nlc3NpbmcgaXQgdGhyb3dzIGFuIGV4Y2VwdGlvbiBpbiBJRThcbiAqL1xuZnVuY3Rpb24gc3RhdHVzVmFsaWQoeGhyKSB7XG4gIHRyeSB7XG4gICAgdmFyIHN0YXR1cyA9IHhoci5zdGF0dXNcbiAgICByZXR1cm4gKHN0YXR1cyAhPT0gbnVsbCAmJiBzdGF0dXMgIT09IDApXG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZmFsc2VcbiAgfVxufVxuXG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5fb25YSFJQcm9ncmVzcyA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2VsZiA9IHRoaXNcblxuICBpZiAoIXN0YXR1c1ZhbGlkKHNlbGYuX3hocikgfHwgc2VsZi5fZGVzdHJveWVkKVxuICAgIHJldHVyblxuXG4gIGlmICghc2VsZi5fcmVzcG9uc2UpXG4gICAgc2VsZi5fY29ubmVjdCgpXG5cbiAgc2VsZi5fcmVzcG9uc2UuX29uWEhSUHJvZ3Jlc3MoKVxufVxuXG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5fY29ubmVjdCA9IGZ1bmN0aW9uKCkge1xuICB2YXIgc2VsZiA9IHRoaXNcblxuICBpZiAoc2VsZi5fZGVzdHJveWVkKVxuICAgIHJldHVyblxuXG4gIHNlbGYuX3Jlc3BvbnNlID0gbmV3IEluY29taW5nTWVzc2FnZShzZWxmLl94aHIsIHNlbGYuX2ZldGNoUmVzcG9uc2UsIHNlbGYuX21vZGUpXG4gIHNlbGYuZW1pdCgncmVzcG9uc2UnLCBzZWxmLl9yZXNwb25zZSlcbn1cblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuX3dyaXRlID0gZnVuY3Rpb24oY2h1bmssIGVuY29kaW5nLCBjYikge1xuICB2YXIgc2VsZiA9IHRoaXNcblxuICBzZWxmLl9ib2R5LnB1c2goY2h1bmspXG4gIGNiKClcbn1cblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuYWJvcnQgPSBDbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICBzZWxmLl9kZXN0cm95ZWQgPSB0cnVlXG4gIGlmIChzZWxmLl9yZXNwb25zZSlcbiAgICBzZWxmLl9yZXNwb25zZS5fZGVzdHJveWVkID0gdHJ1ZVxuICBpZiAoc2VsZi5feGhyKVxuICAgIHNlbGYuX3hoci5hYm9ydCgpXG4gICAgLy8gQ3VycmVudGx5LCB0aGVyZSBpc24ndCBhIHdheSB0byB0cnVseSBhYm9ydCBhIGZldGNoLlxuICAgIC8vIElmIHlvdSBsaWtlIGJpa2VzaGVkZGluZywgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93aGF0d2cvZmV0Y2gvaXNzdWVzLzI3XG59XG5cbkNsaWVudFJlcXVlc3QucHJvdG90eXBlLmVuZCA9IGZ1bmN0aW9uKGRhdGEsIGVuY29kaW5nLCBjYikge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnZnVuY3Rpb24nKSB7XG4gICAgY2IgPSBkYXRhXG4gICAgZGF0YSA9IHVuZGVmaW5lZFxuICB9XG5cbiAgV3JpdGFibGUucHJvdG90eXBlLmVuZC5jYWxsKHNlbGYsIGRhdGEsIGVuY29kaW5nLCBjYilcbn1cblxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuZmx1c2hIZWFkZXJzID0gZnVuY3Rpb24oKSB7fVxuQ2xpZW50UmVxdWVzdC5wcm90b3R5cGUuc2V0VGltZW91dCA9IGZ1bmN0aW9uKCkge31cbkNsaWVudFJlcXVlc3QucHJvdG90eXBlLnNldE5vRGVsYXkgPSBmdW5jdGlvbigpIHt9XG5DbGllbnRSZXF1ZXN0LnByb3RvdHlwZS5zZXRTb2NrZXRLZWVwQWxpdmUgPSBmdW5jdGlvbigpIHt9XG4iLCIvKiEgaHR0cHM6Ly9tdGhzLmJlL3B1bnljb2RlIHYxLjQuMSBieSBAbWF0aGlhcyAqL1xuXG5cbi8qKiBIaWdoZXN0IHBvc2l0aXZlIHNpZ25lZCAzMi1iaXQgZmxvYXQgdmFsdWUgKi9cbnZhciBtYXhJbnQgPSAyMTQ3NDgzNjQ3OyAvLyBha2EuIDB4N0ZGRkZGRkYgb3IgMl4zMS0xXG5cbi8qKiBCb290c3RyaW5nIHBhcmFtZXRlcnMgKi9cbnZhciBiYXNlID0gMzY7XG52YXIgdE1pbiA9IDE7XG52YXIgdE1heCA9IDI2O1xudmFyIHNrZXcgPSAzODtcbnZhciBkYW1wID0gNzAwO1xudmFyIGluaXRpYWxCaWFzID0gNzI7XG52YXIgaW5pdGlhbE4gPSAxMjg7IC8vIDB4ODBcbnZhciBkZWxpbWl0ZXIgPSAnLSc7IC8vICdcXHgyRCdcblxuLyoqIFJlZ3VsYXIgZXhwcmVzc2lvbnMgKi9cbnZhciByZWdleFB1bnljb2RlID0gL154bi0tLztcbnZhciByZWdleE5vbkFTQ0lJID0gL1teXFx4MjAtXFx4N0VdLzsgLy8gdW5wcmludGFibGUgQVNDSUkgY2hhcnMgKyBub24tQVNDSUkgY2hhcnNcbnZhciByZWdleFNlcGFyYXRvcnMgPSAvW1xceDJFXFx1MzAwMlxcdUZGMEVcXHVGRjYxXS9nOyAvLyBSRkMgMzQ5MCBzZXBhcmF0b3JzXG5cbi8qKiBFcnJvciBtZXNzYWdlcyAqL1xudmFyIGVycm9ycyA9IHtcbiAgJ292ZXJmbG93JzogJ092ZXJmbG93OiBpbnB1dCBuZWVkcyB3aWRlciBpbnRlZ2VycyB0byBwcm9jZXNzJyxcbiAgJ25vdC1iYXNpYyc6ICdJbGxlZ2FsIGlucHV0ID49IDB4ODAgKG5vdCBhIGJhc2ljIGNvZGUgcG9pbnQpJyxcbiAgJ2ludmFsaWQtaW5wdXQnOiAnSW52YWxpZCBpbnB1dCdcbn07XG5cbi8qKiBDb252ZW5pZW5jZSBzaG9ydGN1dHMgKi9cbnZhciBiYXNlTWludXNUTWluID0gYmFzZSAtIHRNaW47XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xudmFyIHN0cmluZ0Zyb21DaGFyQ29kZSA9IFN0cmluZy5mcm9tQ2hhckNvZGU7XG5cbi8qLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0qL1xuXG4vKipcbiAqIEEgZ2VuZXJpYyBlcnJvciB1dGlsaXR5IGZ1bmN0aW9uLlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlIFRoZSBlcnJvciB0eXBlLlxuICogQHJldHVybnMge0Vycm9yfSBUaHJvd3MgYSBgUmFuZ2VFcnJvcmAgd2l0aCB0aGUgYXBwbGljYWJsZSBlcnJvciBtZXNzYWdlLlxuICovXG5mdW5jdGlvbiBlcnJvcih0eXBlKSB7XG4gIHRocm93IG5ldyBSYW5nZUVycm9yKGVycm9yc1t0eXBlXSk7XG59XG5cbi8qKlxuICogQSBnZW5lcmljIGBBcnJheSNtYXBgIHV0aWxpdHkgZnVuY3Rpb24uXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0aGF0IGdldHMgY2FsbGVkIGZvciBldmVyeSBhcnJheVxuICogaXRlbS5cbiAqIEByZXR1cm5zIHtBcnJheX0gQSBuZXcgYXJyYXkgb2YgdmFsdWVzIHJldHVybmVkIGJ5IHRoZSBjYWxsYmFjayBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gbWFwKGFycmF5LCBmbikge1xuICB2YXIgbGVuZ3RoID0gYXJyYXkubGVuZ3RoO1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIHJlc3VsdFtsZW5ndGhdID0gZm4oYXJyYXlbbGVuZ3RoXSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBBIHNpbXBsZSBgQXJyYXkjbWFwYC1saWtlIHdyYXBwZXIgdG8gd29yayB3aXRoIGRvbWFpbiBuYW1lIHN0cmluZ3Mgb3IgZW1haWxcbiAqIGFkZHJlc3Nlcy5cbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gZG9tYWluIFRoZSBkb21haW4gbmFtZSBvciBlbWFpbCBhZGRyZXNzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRoYXQgZ2V0cyBjYWxsZWQgZm9yIGV2ZXJ5XG4gKiBjaGFyYWN0ZXIuXG4gKiBAcmV0dXJucyB7QXJyYXl9IEEgbmV3IHN0cmluZyBvZiBjaGFyYWN0ZXJzIHJldHVybmVkIGJ5IHRoZSBjYWxsYmFja1xuICogZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG1hcERvbWFpbihzdHJpbmcsIGZuKSB7XG4gIHZhciBwYXJ0cyA9IHN0cmluZy5zcGxpdCgnQCcpO1xuICB2YXIgcmVzdWx0ID0gJyc7XG4gIGlmIChwYXJ0cy5sZW5ndGggPiAxKSB7XG4gICAgLy8gSW4gZW1haWwgYWRkcmVzc2VzLCBvbmx5IHRoZSBkb21haW4gbmFtZSBzaG91bGQgYmUgcHVueWNvZGVkLiBMZWF2ZVxuICAgIC8vIHRoZSBsb2NhbCBwYXJ0IChpLmUuIGV2ZXJ5dGhpbmcgdXAgdG8gYEBgKSBpbnRhY3QuXG4gICAgcmVzdWx0ID0gcGFydHNbMF0gKyAnQCc7XG4gICAgc3RyaW5nID0gcGFydHNbMV07XG4gIH1cbiAgLy8gQXZvaWQgYHNwbGl0KHJlZ2V4KWAgZm9yIElFOCBjb21wYXRpYmlsaXR5LiBTZWUgIzE3LlxuICBzdHJpbmcgPSBzdHJpbmcucmVwbGFjZShyZWdleFNlcGFyYXRvcnMsICdcXHgyRScpO1xuICB2YXIgbGFiZWxzID0gc3RyaW5nLnNwbGl0KCcuJyk7XG4gIHZhciBlbmNvZGVkID0gbWFwKGxhYmVscywgZm4pLmpvaW4oJy4nKTtcbiAgcmV0dXJuIHJlc3VsdCArIGVuY29kZWQ7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBjb250YWluaW5nIHRoZSBudW1lcmljIGNvZGUgcG9pbnRzIG9mIGVhY2ggVW5pY29kZVxuICogY2hhcmFjdGVyIGluIHRoZSBzdHJpbmcuIFdoaWxlIEphdmFTY3JpcHQgdXNlcyBVQ1MtMiBpbnRlcm5hbGx5LFxuICogdGhpcyBmdW5jdGlvbiB3aWxsIGNvbnZlcnQgYSBwYWlyIG9mIHN1cnJvZ2F0ZSBoYWx2ZXMgKGVhY2ggb2Ygd2hpY2hcbiAqIFVDUy0yIGV4cG9zZXMgYXMgc2VwYXJhdGUgY2hhcmFjdGVycykgaW50byBhIHNpbmdsZSBjb2RlIHBvaW50LFxuICogbWF0Y2hpbmcgVVRGLTE2LlxuICogQHNlZSBgcHVueWNvZGUudWNzMi5lbmNvZGVgXG4gKiBAc2VlIDxodHRwczovL21hdGhpYXNieW5lbnMuYmUvbm90ZXMvamF2YXNjcmlwdC1lbmNvZGluZz5cbiAqIEBtZW1iZXJPZiBwdW55Y29kZS51Y3MyXG4gKiBAbmFtZSBkZWNvZGVcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHJpbmcgVGhlIFVuaWNvZGUgaW5wdXQgc3RyaW5nIChVQ1MtMikuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFRoZSBuZXcgYXJyYXkgb2YgY29kZSBwb2ludHMuXG4gKi9cbmZ1bmN0aW9uIHVjczJkZWNvZGUoc3RyaW5nKSB7XG4gIHZhciBvdXRwdXQgPSBbXSxcbiAgICBjb3VudGVyID0gMCxcbiAgICBsZW5ndGggPSBzdHJpbmcubGVuZ3RoLFxuICAgIHZhbHVlLFxuICAgIGV4dHJhO1xuICB3aGlsZSAoY291bnRlciA8IGxlbmd0aCkge1xuICAgIHZhbHVlID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcbiAgICBpZiAodmFsdWUgPj0gMHhEODAwICYmIHZhbHVlIDw9IDB4REJGRiAmJiBjb3VudGVyIDwgbGVuZ3RoKSB7XG4gICAgICAvLyBoaWdoIHN1cnJvZ2F0ZSwgYW5kIHRoZXJlIGlzIGEgbmV4dCBjaGFyYWN0ZXJcbiAgICAgIGV4dHJhID0gc3RyaW5nLmNoYXJDb2RlQXQoY291bnRlcisrKTtcbiAgICAgIGlmICgoZXh0cmEgJiAweEZDMDApID09IDB4REMwMCkgeyAvLyBsb3cgc3Vycm9nYXRlXG4gICAgICAgIG91dHB1dC5wdXNoKCgodmFsdWUgJiAweDNGRikgPDwgMTApICsgKGV4dHJhICYgMHgzRkYpICsgMHgxMDAwMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyB1bm1hdGNoZWQgc3Vycm9nYXRlOyBvbmx5IGFwcGVuZCB0aGlzIGNvZGUgdW5pdCwgaW4gY2FzZSB0aGUgbmV4dFxuICAgICAgICAvLyBjb2RlIHVuaXQgaXMgdGhlIGhpZ2ggc3Vycm9nYXRlIG9mIGEgc3Vycm9nYXRlIHBhaXJcbiAgICAgICAgb3V0cHV0LnB1c2godmFsdWUpO1xuICAgICAgICBjb3VudGVyLS07XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG91dHB1dC5wdXNoKHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG91dHB1dDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RyaW5nIGJhc2VkIG9uIGFuIGFycmF5IG9mIG51bWVyaWMgY29kZSBwb2ludHMuXG4gKiBAc2VlIGBwdW55Y29kZS51Y3MyLmRlY29kZWBcbiAqIEBtZW1iZXJPZiBwdW55Y29kZS51Y3MyXG4gKiBAbmFtZSBlbmNvZGVcbiAqIEBwYXJhbSB7QXJyYXl9IGNvZGVQb2ludHMgVGhlIGFycmF5IG9mIG51bWVyaWMgY29kZSBwb2ludHMuXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgbmV3IFVuaWNvZGUgc3RyaW5nIChVQ1MtMikuXG4gKi9cbmZ1bmN0aW9uIHVjczJlbmNvZGUoYXJyYXkpIHtcbiAgcmV0dXJuIG1hcChhcnJheSwgZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgb3V0cHV0ID0gJyc7XG4gICAgaWYgKHZhbHVlID4gMHhGRkZGKSB7XG4gICAgICB2YWx1ZSAtPSAweDEwMDAwO1xuICAgICAgb3V0cHV0ICs9IHN0cmluZ0Zyb21DaGFyQ29kZSh2YWx1ZSA+Pj4gMTAgJiAweDNGRiB8IDB4RDgwMCk7XG4gICAgICB2YWx1ZSA9IDB4REMwMCB8IHZhbHVlICYgMHgzRkY7XG4gICAgfVxuICAgIG91dHB1dCArPSBzdHJpbmdGcm9tQ2hhckNvZGUodmFsdWUpO1xuICAgIHJldHVybiBvdXRwdXQ7XG4gIH0pLmpvaW4oJycpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgYmFzaWMgY29kZSBwb2ludCBpbnRvIGEgZGlnaXQvaW50ZWdlci5cbiAqIEBzZWUgYGRpZ2l0VG9CYXNpYygpYFxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7TnVtYmVyfSBjb2RlUG9pbnQgVGhlIGJhc2ljIG51bWVyaWMgY29kZSBwb2ludCB2YWx1ZS5cbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBudW1lcmljIHZhbHVlIG9mIGEgYmFzaWMgY29kZSBwb2ludCAoZm9yIHVzZSBpblxuICogcmVwcmVzZW50aW5nIGludGVnZXJzKSBpbiB0aGUgcmFuZ2UgYDBgIHRvIGBiYXNlIC0gMWAsIG9yIGBiYXNlYCBpZlxuICogdGhlIGNvZGUgcG9pbnQgZG9lcyBub3QgcmVwcmVzZW50IGEgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2ljVG9EaWdpdChjb2RlUG9pbnQpIHtcbiAgaWYgKGNvZGVQb2ludCAtIDQ4IDwgMTApIHtcbiAgICByZXR1cm4gY29kZVBvaW50IC0gMjI7XG4gIH1cbiAgaWYgKGNvZGVQb2ludCAtIDY1IDwgMjYpIHtcbiAgICByZXR1cm4gY29kZVBvaW50IC0gNjU7XG4gIH1cbiAgaWYgKGNvZGVQb2ludCAtIDk3IDwgMjYpIHtcbiAgICByZXR1cm4gY29kZVBvaW50IC0gOTc7XG4gIH1cbiAgcmV0dXJuIGJhc2U7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBkaWdpdC9pbnRlZ2VyIGludG8gYSBiYXNpYyBjb2RlIHBvaW50LlxuICogQHNlZSBgYmFzaWNUb0RpZ2l0KClgXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtOdW1iZXJ9IGRpZ2l0IFRoZSBudW1lcmljIHZhbHVlIG9mIGEgYmFzaWMgY29kZSBwb2ludC5cbiAqIEByZXR1cm5zIHtOdW1iZXJ9IFRoZSBiYXNpYyBjb2RlIHBvaW50IHdob3NlIHZhbHVlICh3aGVuIHVzZWQgZm9yXG4gKiByZXByZXNlbnRpbmcgaW50ZWdlcnMpIGlzIGBkaWdpdGAsIHdoaWNoIG5lZWRzIHRvIGJlIGluIHRoZSByYW5nZVxuICogYDBgIHRvIGBiYXNlIC0gMWAuIElmIGBmbGFnYCBpcyBub24temVybywgdGhlIHVwcGVyY2FzZSBmb3JtIGlzXG4gKiB1c2VkOyBlbHNlLCB0aGUgbG93ZXJjYXNlIGZvcm0gaXMgdXNlZC4gVGhlIGJlaGF2aW9yIGlzIHVuZGVmaW5lZFxuICogaWYgYGZsYWdgIGlzIG5vbi16ZXJvIGFuZCBgZGlnaXRgIGhhcyBubyB1cHBlcmNhc2UgZm9ybS5cbiAqL1xuZnVuY3Rpb24gZGlnaXRUb0Jhc2ljKGRpZ2l0LCBmbGFnKSB7XG4gIC8vICAwLi4yNSBtYXAgdG8gQVNDSUkgYS4ueiBvciBBLi5aXG4gIC8vIDI2Li4zNSBtYXAgdG8gQVNDSUkgMC4uOVxuICByZXR1cm4gZGlnaXQgKyAyMiArIDc1ICogKGRpZ2l0IDwgMjYpIC0gKChmbGFnICE9IDApIDw8IDUpO1xufVxuXG4vKipcbiAqIEJpYXMgYWRhcHRhdGlvbiBmdW5jdGlvbiBhcyBwZXIgc2VjdGlvbiAzLjQgb2YgUkZDIDM0OTIuXG4gKiBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjMzQ5MiNzZWN0aW9uLTMuNFxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gYWRhcHQoZGVsdGEsIG51bVBvaW50cywgZmlyc3RUaW1lKSB7XG4gIHZhciBrID0gMDtcbiAgZGVsdGEgPSBmaXJzdFRpbWUgPyBmbG9vcihkZWx0YSAvIGRhbXApIDogZGVsdGEgPj4gMTtcbiAgZGVsdGEgKz0gZmxvb3IoZGVsdGEgLyBudW1Qb2ludHMpO1xuICBmb3IgKCAvKiBubyBpbml0aWFsaXphdGlvbiAqLyA7IGRlbHRhID4gYmFzZU1pbnVzVE1pbiAqIHRNYXggPj4gMTsgayArPSBiYXNlKSB7XG4gICAgZGVsdGEgPSBmbG9vcihkZWx0YSAvIGJhc2VNaW51c1RNaW4pO1xuICB9XG4gIHJldHVybiBmbG9vcihrICsgKGJhc2VNaW51c1RNaW4gKyAxKSAqIGRlbHRhIC8gKGRlbHRhICsgc2tldykpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgUHVueWNvZGUgc3RyaW5nIG9mIEFTQ0lJLW9ubHkgc3ltYm9scyB0byBhIHN0cmluZyBvZiBVbmljb2RlXG4gKiBzeW1ib2xzLlxuICogQG1lbWJlck9mIHB1bnljb2RlXG4gKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgcmVzdWx0aW5nIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBkZWNvZGUoaW5wdXQpIHtcbiAgLy8gRG9uJ3QgdXNlIFVDUy0yXG4gIHZhciBvdXRwdXQgPSBbXSxcbiAgICBpbnB1dExlbmd0aCA9IGlucHV0Lmxlbmd0aCxcbiAgICBvdXQsXG4gICAgaSA9IDAsXG4gICAgbiA9IGluaXRpYWxOLFxuICAgIGJpYXMgPSBpbml0aWFsQmlhcyxcbiAgICBiYXNpYyxcbiAgICBqLFxuICAgIGluZGV4LFxuICAgIG9sZGksXG4gICAgdyxcbiAgICBrLFxuICAgIGRpZ2l0LFxuICAgIHQsXG4gICAgLyoqIENhY2hlZCBjYWxjdWxhdGlvbiByZXN1bHRzICovXG4gICAgYmFzZU1pbnVzVDtcblxuICAvLyBIYW5kbGUgdGhlIGJhc2ljIGNvZGUgcG9pbnRzOiBsZXQgYGJhc2ljYCBiZSB0aGUgbnVtYmVyIG9mIGlucHV0IGNvZGVcbiAgLy8gcG9pbnRzIGJlZm9yZSB0aGUgbGFzdCBkZWxpbWl0ZXIsIG9yIGAwYCBpZiB0aGVyZSBpcyBub25lLCB0aGVuIGNvcHlcbiAgLy8gdGhlIGZpcnN0IGJhc2ljIGNvZGUgcG9pbnRzIHRvIHRoZSBvdXRwdXQuXG5cbiAgYmFzaWMgPSBpbnB1dC5sYXN0SW5kZXhPZihkZWxpbWl0ZXIpO1xuICBpZiAoYmFzaWMgPCAwKSB7XG4gICAgYmFzaWMgPSAwO1xuICB9XG5cbiAgZm9yIChqID0gMDsgaiA8IGJhc2ljOyArK2opIHtcbiAgICAvLyBpZiBpdCdzIG5vdCBhIGJhc2ljIGNvZGUgcG9pbnRcbiAgICBpZiAoaW5wdXQuY2hhckNvZGVBdChqKSA+PSAweDgwKSB7XG4gICAgICBlcnJvcignbm90LWJhc2ljJyk7XG4gICAgfVxuICAgIG91dHB1dC5wdXNoKGlucHV0LmNoYXJDb2RlQXQoaikpO1xuICB9XG5cbiAgLy8gTWFpbiBkZWNvZGluZyBsb29wOiBzdGFydCBqdXN0IGFmdGVyIHRoZSBsYXN0IGRlbGltaXRlciBpZiBhbnkgYmFzaWMgY29kZVxuICAvLyBwb2ludHMgd2VyZSBjb3BpZWQ7IHN0YXJ0IGF0IHRoZSBiZWdpbm5pbmcgb3RoZXJ3aXNlLlxuXG4gIGZvciAoaW5kZXggPSBiYXNpYyA+IDAgPyBiYXNpYyArIDEgOiAwOyBpbmRleCA8IGlucHV0TGVuZ3RoOyAvKiBubyBmaW5hbCBleHByZXNzaW9uICovICkge1xuXG4gICAgLy8gYGluZGV4YCBpcyB0aGUgaW5kZXggb2YgdGhlIG5leHQgY2hhcmFjdGVyIHRvIGJlIGNvbnN1bWVkLlxuICAgIC8vIERlY29kZSBhIGdlbmVyYWxpemVkIHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyIGludG8gYGRlbHRhYCxcbiAgICAvLyB3aGljaCBnZXRzIGFkZGVkIHRvIGBpYC4gVGhlIG92ZXJmbG93IGNoZWNraW5nIGlzIGVhc2llclxuICAgIC8vIGlmIHdlIGluY3JlYXNlIGBpYCBhcyB3ZSBnbywgdGhlbiBzdWJ0cmFjdCBvZmYgaXRzIHN0YXJ0aW5nXG4gICAgLy8gdmFsdWUgYXQgdGhlIGVuZCB0byBvYnRhaW4gYGRlbHRhYC5cbiAgICBmb3IgKG9sZGkgPSBpLCB3ID0gMSwgayA9IGJhc2U7IC8qIG5vIGNvbmRpdGlvbiAqLyA7IGsgKz0gYmFzZSkge1xuXG4gICAgICBpZiAoaW5kZXggPj0gaW5wdXRMZW5ndGgpIHtcbiAgICAgICAgZXJyb3IoJ2ludmFsaWQtaW5wdXQnKTtcbiAgICAgIH1cblxuICAgICAgZGlnaXQgPSBiYXNpY1RvRGlnaXQoaW5wdXQuY2hhckNvZGVBdChpbmRleCsrKSk7XG5cbiAgICAgIGlmIChkaWdpdCA+PSBiYXNlIHx8IGRpZ2l0ID4gZmxvb3IoKG1heEludCAtIGkpIC8gdykpIHtcbiAgICAgICAgZXJyb3IoJ292ZXJmbG93Jyk7XG4gICAgICB9XG5cbiAgICAgIGkgKz0gZGlnaXQgKiB3O1xuICAgICAgdCA9IGsgPD0gYmlhcyA/IHRNaW4gOiAoayA+PSBiaWFzICsgdE1heCA/IHRNYXggOiBrIC0gYmlhcyk7XG5cbiAgICAgIGlmIChkaWdpdCA8IHQpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG5cbiAgICAgIGJhc2VNaW51c1QgPSBiYXNlIC0gdDtcbiAgICAgIGlmICh3ID4gZmxvb3IobWF4SW50IC8gYmFzZU1pbnVzVCkpIHtcbiAgICAgICAgZXJyb3IoJ292ZXJmbG93Jyk7XG4gICAgICB9XG5cbiAgICAgIHcgKj0gYmFzZU1pbnVzVDtcblxuICAgIH1cblxuICAgIG91dCA9IG91dHB1dC5sZW5ndGggKyAxO1xuICAgIGJpYXMgPSBhZGFwdChpIC0gb2xkaSwgb3V0LCBvbGRpID09IDApO1xuXG4gICAgLy8gYGlgIHdhcyBzdXBwb3NlZCB0byB3cmFwIGFyb3VuZCBmcm9tIGBvdXRgIHRvIGAwYCxcbiAgICAvLyBpbmNyZW1lbnRpbmcgYG5gIGVhY2ggdGltZSwgc28gd2UnbGwgZml4IHRoYXQgbm93OlxuICAgIGlmIChmbG9vcihpIC8gb3V0KSA+IG1heEludCAtIG4pIHtcbiAgICAgIGVycm9yKCdvdmVyZmxvdycpO1xuICAgIH1cblxuICAgIG4gKz0gZmxvb3IoaSAvIG91dCk7XG4gICAgaSAlPSBvdXQ7XG5cbiAgICAvLyBJbnNlcnQgYG5gIGF0IHBvc2l0aW9uIGBpYCBvZiB0aGUgb3V0cHV0XG4gICAgb3V0cHV0LnNwbGljZShpKyssIDAsIG4pO1xuXG4gIH1cblxuICByZXR1cm4gdWNzMmVuY29kZShvdXRwdXQpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGEgc3RyaW5nIG9mIFVuaWNvZGUgc3ltYm9scyAoZS5nLiBhIGRvbWFpbiBuYW1lIGxhYmVsKSB0byBhXG4gKiBQdW55Y29kZSBzdHJpbmcgb2YgQVNDSUktb25seSBzeW1ib2xzLlxuICogQG1lbWJlck9mIHB1bnljb2RlXG4gKiBAcGFyYW0ge1N0cmluZ30gaW5wdXQgVGhlIHN0cmluZyBvZiBVbmljb2RlIHN5bWJvbHMuXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBUaGUgcmVzdWx0aW5nIFB1bnljb2RlIHN0cmluZyBvZiBBU0NJSS1vbmx5IHN5bWJvbHMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBlbmNvZGUoaW5wdXQpIHtcbiAgdmFyIG4sXG4gICAgZGVsdGEsXG4gICAgaGFuZGxlZENQQ291bnQsXG4gICAgYmFzaWNMZW5ndGgsXG4gICAgYmlhcyxcbiAgICBqLFxuICAgIG0sXG4gICAgcSxcbiAgICBrLFxuICAgIHQsXG4gICAgY3VycmVudFZhbHVlLFxuICAgIG91dHB1dCA9IFtdLFxuICAgIC8qKiBgaW5wdXRMZW5ndGhgIHdpbGwgaG9sZCB0aGUgbnVtYmVyIG9mIGNvZGUgcG9pbnRzIGluIGBpbnB1dGAuICovXG4gICAgaW5wdXRMZW5ndGgsXG4gICAgLyoqIENhY2hlZCBjYWxjdWxhdGlvbiByZXN1bHRzICovXG4gICAgaGFuZGxlZENQQ291bnRQbHVzT25lLFxuICAgIGJhc2VNaW51c1QsXG4gICAgcU1pbnVzVDtcblxuICAvLyBDb252ZXJ0IHRoZSBpbnB1dCBpbiBVQ1MtMiB0byBVbmljb2RlXG4gIGlucHV0ID0gdWNzMmRlY29kZShpbnB1dCk7XG5cbiAgLy8gQ2FjaGUgdGhlIGxlbmd0aFxuICBpbnB1dExlbmd0aCA9IGlucHV0Lmxlbmd0aDtcblxuICAvLyBJbml0aWFsaXplIHRoZSBzdGF0ZVxuICBuID0gaW5pdGlhbE47XG4gIGRlbHRhID0gMDtcbiAgYmlhcyA9IGluaXRpYWxCaWFzO1xuXG4gIC8vIEhhbmRsZSB0aGUgYmFzaWMgY29kZSBwb2ludHNcbiAgZm9yIChqID0gMDsgaiA8IGlucHV0TGVuZ3RoOyArK2opIHtcbiAgICBjdXJyZW50VmFsdWUgPSBpbnB1dFtqXTtcbiAgICBpZiAoY3VycmVudFZhbHVlIDwgMHg4MCkge1xuICAgICAgb3V0cHV0LnB1c2goc3RyaW5nRnJvbUNoYXJDb2RlKGN1cnJlbnRWYWx1ZSkpO1xuICAgIH1cbiAgfVxuXG4gIGhhbmRsZWRDUENvdW50ID0gYmFzaWNMZW5ndGggPSBvdXRwdXQubGVuZ3RoO1xuXG4gIC8vIGBoYW5kbGVkQ1BDb3VudGAgaXMgdGhlIG51bWJlciBvZiBjb2RlIHBvaW50cyB0aGF0IGhhdmUgYmVlbiBoYW5kbGVkO1xuICAvLyBgYmFzaWNMZW5ndGhgIGlzIHRoZSBudW1iZXIgb2YgYmFzaWMgY29kZSBwb2ludHMuXG5cbiAgLy8gRmluaXNoIHRoZSBiYXNpYyBzdHJpbmcgLSBpZiBpdCBpcyBub3QgZW1wdHkgLSB3aXRoIGEgZGVsaW1pdGVyXG4gIGlmIChiYXNpY0xlbmd0aCkge1xuICAgIG91dHB1dC5wdXNoKGRlbGltaXRlcik7XG4gIH1cblxuICAvLyBNYWluIGVuY29kaW5nIGxvb3A6XG4gIHdoaWxlIChoYW5kbGVkQ1BDb3VudCA8IGlucHV0TGVuZ3RoKSB7XG5cbiAgICAvLyBBbGwgbm9uLWJhc2ljIGNvZGUgcG9pbnRzIDwgbiBoYXZlIGJlZW4gaGFuZGxlZCBhbHJlYWR5LiBGaW5kIHRoZSBuZXh0XG4gICAgLy8gbGFyZ2VyIG9uZTpcbiAgICBmb3IgKG0gPSBtYXhJbnQsIGogPSAwOyBqIDwgaW5wdXRMZW5ndGg7ICsraikge1xuICAgICAgY3VycmVudFZhbHVlID0gaW5wdXRbal07XG4gICAgICBpZiAoY3VycmVudFZhbHVlID49IG4gJiYgY3VycmVudFZhbHVlIDwgbSkge1xuICAgICAgICBtID0gY3VycmVudFZhbHVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIEluY3JlYXNlIGBkZWx0YWAgZW5vdWdoIHRvIGFkdmFuY2UgdGhlIGRlY29kZXIncyA8bixpPiBzdGF0ZSB0byA8bSwwPixcbiAgICAvLyBidXQgZ3VhcmQgYWdhaW5zdCBvdmVyZmxvd1xuICAgIGhhbmRsZWRDUENvdW50UGx1c09uZSA9IGhhbmRsZWRDUENvdW50ICsgMTtcbiAgICBpZiAobSAtIG4gPiBmbG9vcigobWF4SW50IC0gZGVsdGEpIC8gaGFuZGxlZENQQ291bnRQbHVzT25lKSkge1xuICAgICAgZXJyb3IoJ292ZXJmbG93Jyk7XG4gICAgfVxuXG4gICAgZGVsdGEgKz0gKG0gLSBuKSAqIGhhbmRsZWRDUENvdW50UGx1c09uZTtcbiAgICBuID0gbTtcblxuICAgIGZvciAoaiA9IDA7IGogPCBpbnB1dExlbmd0aDsgKytqKSB7XG4gICAgICBjdXJyZW50VmFsdWUgPSBpbnB1dFtqXTtcblxuICAgICAgaWYgKGN1cnJlbnRWYWx1ZSA8IG4gJiYgKytkZWx0YSA+IG1heEludCkge1xuICAgICAgICBlcnJvcignb3ZlcmZsb3cnKTtcbiAgICAgIH1cblxuICAgICAgaWYgKGN1cnJlbnRWYWx1ZSA9PSBuKSB7XG4gICAgICAgIC8vIFJlcHJlc2VudCBkZWx0YSBhcyBhIGdlbmVyYWxpemVkIHZhcmlhYmxlLWxlbmd0aCBpbnRlZ2VyXG4gICAgICAgIGZvciAocSA9IGRlbHRhLCBrID0gYmFzZTsgLyogbm8gY29uZGl0aW9uICovIDsgayArPSBiYXNlKSB7XG4gICAgICAgICAgdCA9IGsgPD0gYmlhcyA/IHRNaW4gOiAoayA+PSBiaWFzICsgdE1heCA/IHRNYXggOiBrIC0gYmlhcyk7XG4gICAgICAgICAgaWYgKHEgPCB0KSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgcU1pbnVzVCA9IHEgLSB0O1xuICAgICAgICAgIGJhc2VNaW51c1QgPSBiYXNlIC0gdDtcbiAgICAgICAgICBvdXRwdXQucHVzaChcbiAgICAgICAgICAgIHN0cmluZ0Zyb21DaGFyQ29kZShkaWdpdFRvQmFzaWModCArIHFNaW51c1QgJSBiYXNlTWludXNULCAwKSlcbiAgICAgICAgICApO1xuICAgICAgICAgIHEgPSBmbG9vcihxTWludXNUIC8gYmFzZU1pbnVzVCk7XG4gICAgICAgIH1cblxuICAgICAgICBvdXRwdXQucHVzaChzdHJpbmdGcm9tQ2hhckNvZGUoZGlnaXRUb0Jhc2ljKHEsIDApKSk7XG4gICAgICAgIGJpYXMgPSBhZGFwdChkZWx0YSwgaGFuZGxlZENQQ291bnRQbHVzT25lLCBoYW5kbGVkQ1BDb3VudCA9PSBiYXNpY0xlbmd0aCk7XG4gICAgICAgIGRlbHRhID0gMDtcbiAgICAgICAgKytoYW5kbGVkQ1BDb3VudDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICArK2RlbHRhO1xuICAgICsrbjtcblxuICB9XG4gIHJldHVybiBvdXRwdXQuam9pbignJyk7XG59XG5cbi8qKlxuICogQ29udmVydHMgYSBQdW55Y29kZSBzdHJpbmcgcmVwcmVzZW50aW5nIGEgZG9tYWluIG5hbWUgb3IgYW4gZW1haWwgYWRkcmVzc1xuICogdG8gVW5pY29kZS4gT25seSB0aGUgUHVueWNvZGVkIHBhcnRzIG9mIHRoZSBpbnB1dCB3aWxsIGJlIGNvbnZlcnRlZCwgaS5lLlxuICogaXQgZG9lc24ndCBtYXR0ZXIgaWYgeW91IGNhbGwgaXQgb24gYSBzdHJpbmcgdGhhdCBoYXMgYWxyZWFkeSBiZWVuXG4gKiBjb252ZXJ0ZWQgdG8gVW5pY29kZS5cbiAqIEBtZW1iZXJPZiBwdW55Y29kZVxuICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBQdW55Y29kZWQgZG9tYWluIG5hbWUgb3IgZW1haWwgYWRkcmVzcyB0b1xuICogY29udmVydCB0byBVbmljb2RlLlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFVuaWNvZGUgcmVwcmVzZW50YXRpb24gb2YgdGhlIGdpdmVuIFB1bnljb2RlXG4gKiBzdHJpbmcuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0b1VuaWNvZGUoaW5wdXQpIHtcbiAgcmV0dXJuIG1hcERvbWFpbihpbnB1dCwgZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgcmV0dXJuIHJlZ2V4UHVueWNvZGUudGVzdChzdHJpbmcpID9cbiAgICAgIGRlY29kZShzdHJpbmcuc2xpY2UoNCkudG9Mb3dlckNhc2UoKSkgOlxuICAgICAgc3RyaW5nO1xuICB9KTtcbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBhIFVuaWNvZGUgc3RyaW5nIHJlcHJlc2VudGluZyBhIGRvbWFpbiBuYW1lIG9yIGFuIGVtYWlsIGFkZHJlc3MgdG9cbiAqIFB1bnljb2RlLiBPbmx5IHRoZSBub24tQVNDSUkgcGFydHMgb2YgdGhlIGRvbWFpbiBuYW1lIHdpbGwgYmUgY29udmVydGVkLFxuICogaS5lLiBpdCBkb2Vzbid0IG1hdHRlciBpZiB5b3UgY2FsbCBpdCB3aXRoIGEgZG9tYWluIHRoYXQncyBhbHJlYWR5IGluXG4gKiBBU0NJSS5cbiAqIEBtZW1iZXJPZiBwdW55Y29kZVxuICogQHBhcmFtIHtTdHJpbmd9IGlucHV0IFRoZSBkb21haW4gbmFtZSBvciBlbWFpbCBhZGRyZXNzIHRvIGNvbnZlcnQsIGFzIGFcbiAqIFVuaWNvZGUgc3RyaW5nLlxuICogQHJldHVybnMge1N0cmluZ30gVGhlIFB1bnljb2RlIHJlcHJlc2VudGF0aW9uIG9mIHRoZSBnaXZlbiBkb21haW4gbmFtZSBvclxuICogZW1haWwgYWRkcmVzcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHRvQVNDSUkoaW5wdXQpIHtcbiAgcmV0dXJuIG1hcERvbWFpbihpbnB1dCwgZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgcmV0dXJuIHJlZ2V4Tm9uQVNDSUkudGVzdChzdHJpbmcpID9cbiAgICAgICd4bi0tJyArIGVuY29kZShzdHJpbmcpIDpcbiAgICAgIHN0cmluZztcbiAgfSk7XG59XG5leHBvcnQgdmFyIHZlcnNpb24gPSAnMS40LjEnO1xuLyoqXG4gKiBBbiBvYmplY3Qgb2YgbWV0aG9kcyB0byBjb252ZXJ0IGZyb20gSmF2YVNjcmlwdCdzIGludGVybmFsIGNoYXJhY3RlclxuICogcmVwcmVzZW50YXRpb24gKFVDUy0yKSB0byBVbmljb2RlIGNvZGUgcG9pbnRzLCBhbmQgYmFjay5cbiAqIEBzZWUgPGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LWVuY29kaW5nPlxuICogQG1lbWJlck9mIHB1bnljb2RlXG4gKiBAdHlwZSBPYmplY3RcbiAqL1xuXG5leHBvcnQgdmFyIHVjczIgPSB7XG4gIGRlY29kZTogdWNzMmRlY29kZSxcbiAgZW5jb2RlOiB1Y3MyZW5jb2RlXG59O1xuZXhwb3J0IGRlZmF1bHQge1xuICB2ZXJzaW9uOiB2ZXJzaW9uLFxuICB1Y3MyOiB1Y3MyLFxuICB0b0FTQ0lJOiB0b0FTQ0lJLFxuICB0b1VuaWNvZGU6IHRvVW5pY29kZSxcbiAgZW5jb2RlOiBlbmNvZGUsXG4gIGRlY29kZTogZGVjb2RlXG59XG4iLCIvLyBDb3B5cmlnaHQgSm95ZW50LCBJbmMuIGFuZCBvdGhlciBOb2RlIGNvbnRyaWJ1dG9ycy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYVxuLy8gY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZVxuLy8gXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nXG4vLyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0cyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsXG4vLyBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbCBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0XG4vLyBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGVcbi8vIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkXG4vLyBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTXG4vLyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GXG4vLyBNRVJDSEFOVEFCSUxJVFksIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOXG4vLyBOTyBFVkVOVCBTSEFMTCBUSEUgQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSxcbi8vIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUlxuLy8gT1RIRVJXSVNFLCBBUklTSU5HIEZST00sIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRVxuLy8gVVNFIE9SIE9USEVSIERFQUxJTkdTIElOIFRIRSBTT0ZUV0FSRS5cblxuXG4vLyBJZiBvYmouaGFzT3duUHJvcGVydHkgaGFzIGJlZW4gb3ZlcnJpZGRlbiwgdGhlbiBjYWxsaW5nXG4vLyBvYmouaGFzT3duUHJvcGVydHkocHJvcCkgd2lsbCBicmVhay5cbi8vIFNlZTogaHR0cHM6Ly9naXRodWIuY29tL2pveWVudC9ub2RlL2lzc3Vlcy8xNzA3XG5mdW5jdGlvbiBoYXNPd25Qcm9wZXJ0eShvYmosIHByb3ApIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApO1xufVxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5IHx8IGZ1bmN0aW9uICh4cykge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHhzKSA9PT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG5mdW5jdGlvbiBzdHJpbmdpZnlQcmltaXRpdmUodikge1xuICBzd2l0Y2ggKHR5cGVvZiB2KSB7XG4gICAgY2FzZSAnc3RyaW5nJzpcbiAgICAgIHJldHVybiB2O1xuXG4gICAgY2FzZSAnYm9vbGVhbic6XG4gICAgICByZXR1cm4gdiA/ICd0cnVlJyA6ICdmYWxzZSc7XG5cbiAgICBjYXNlICdudW1iZXInOlxuICAgICAgcmV0dXJuIGlzRmluaXRlKHYpID8gdiA6ICcnO1xuXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAnJztcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc3RyaW5naWZ5IChvYmosIHNlcCwgZXEsIG5hbWUpIHtcbiAgc2VwID0gc2VwIHx8ICcmJztcbiAgZXEgPSBlcSB8fCAnPSc7XG4gIGlmIChvYmogPT09IG51bGwpIHtcbiAgICBvYmogPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIG9iaiA9PT0gJ29iamVjdCcpIHtcbiAgICByZXR1cm4gbWFwKG9iamVjdEtleXMob2JqKSwgZnVuY3Rpb24oaykge1xuICAgICAgdmFyIGtzID0gZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShrKSkgKyBlcTtcbiAgICAgIGlmIChpc0FycmF5KG9ialtrXSkpIHtcbiAgICAgICAgcmV0dXJuIG1hcChvYmpba10sIGZ1bmN0aW9uKHYpIHtcbiAgICAgICAgICByZXR1cm4ga3MgKyBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKHYpKTtcbiAgICAgICAgfSkuam9pbihzZXApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGtzICsgZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShvYmpba10pKTtcbiAgICAgIH1cbiAgICB9KS5qb2luKHNlcCk7XG5cbiAgfVxuXG4gIGlmICghbmFtZSkgcmV0dXJuICcnO1xuICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KHN0cmluZ2lmeVByaW1pdGl2ZShuYW1lKSkgKyBlcSArXG4gICAgICAgICBlbmNvZGVVUklDb21wb25lbnQoc3RyaW5naWZ5UHJpbWl0aXZlKG9iaikpO1xufTtcblxuZnVuY3Rpb24gbWFwICh4cywgZikge1xuICBpZiAoeHMubWFwKSByZXR1cm4geHMubWFwKGYpO1xuICB2YXIgcmVzID0gW107XG4gIGZvciAodmFyIGkgPSAwOyBpIDwgeHMubGVuZ3RoOyBpKyspIHtcbiAgICByZXMucHVzaChmKHhzW2ldLCBpKSk7XG4gIH1cbiAgcmV0dXJuIHJlcztcbn1cblxudmFyIG9iamVjdEtleXMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiAob2JqKSB7XG4gIHZhciByZXMgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSByZXMucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXM7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2UocXMsIHNlcCwgZXEsIG9wdGlvbnMpIHtcbiAgc2VwID0gc2VwIHx8ICcmJztcbiAgZXEgPSBlcSB8fCAnPSc7XG4gIHZhciBvYmogPSB7fTtcblxuICBpZiAodHlwZW9mIHFzICE9PSAnc3RyaW5nJyB8fCBxcy5sZW5ndGggPT09IDApIHtcbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgdmFyIHJlZ2V4cCA9IC9cXCsvZztcbiAgcXMgPSBxcy5zcGxpdChzZXApO1xuXG4gIHZhciBtYXhLZXlzID0gMTAwMDtcbiAgaWYgKG9wdGlvbnMgJiYgdHlwZW9mIG9wdGlvbnMubWF4S2V5cyA9PT0gJ251bWJlcicpIHtcbiAgICBtYXhLZXlzID0gb3B0aW9ucy5tYXhLZXlzO1xuICB9XG5cbiAgdmFyIGxlbiA9IHFzLmxlbmd0aDtcbiAgLy8gbWF4S2V5cyA8PSAwIG1lYW5zIHRoYXQgd2Ugc2hvdWxkIG5vdCBsaW1pdCBrZXlzIGNvdW50XG4gIGlmIChtYXhLZXlzID4gMCAmJiBsZW4gPiBtYXhLZXlzKSB7XG4gICAgbGVuID0gbWF4S2V5cztcbiAgfVxuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGVuOyArK2kpIHtcbiAgICB2YXIgeCA9IHFzW2ldLnJlcGxhY2UocmVnZXhwLCAnJTIwJyksXG4gICAgICAgIGlkeCA9IHguaW5kZXhPZihlcSksXG4gICAgICAgIGtzdHIsIHZzdHIsIGssIHY7XG5cbiAgICBpZiAoaWR4ID49IDApIHtcbiAgICAgIGtzdHIgPSB4LnN1YnN0cigwLCBpZHgpO1xuICAgICAgdnN0ciA9IHguc3Vic3RyKGlkeCArIDEpO1xuICAgIH0gZWxzZSB7XG4gICAgICBrc3RyID0geDtcbiAgICAgIHZzdHIgPSAnJztcbiAgICB9XG5cbiAgICBrID0gZGVjb2RlVVJJQ29tcG9uZW50KGtzdHIpO1xuICAgIHYgPSBkZWNvZGVVUklDb21wb25lbnQodnN0cik7XG5cbiAgICBpZiAoIWhhc093blByb3BlcnR5KG9iaiwgaykpIHtcbiAgICAgIG9ialtrXSA9IHY7XG4gICAgfSBlbHNlIGlmIChpc0FycmF5KG9ialtrXSkpIHtcbiAgICAgIG9ialtrXS5wdXNoKHYpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvYmpba10gPSBbb2JqW2tdLCB2XTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gb2JqO1xufTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgZW5jb2RlOiBzdHJpbmdpZnksXG4gIHN0cmluZ2lmeTogc3RyaW5naWZ5LFxuICBkZWNvZGU6IHBhcnNlLFxuICBwYXJzZTogcGFyc2Vcbn1cbmV4cG9ydCB7c3RyaW5naWZ5IGFzIGVuY29kZSwgcGFyc2UgYXMgZGVjb2RlfTtcbiIsIi8vIENvcHlyaWdodCBKb3llbnQsIEluYy4gYW5kIG90aGVyIE5vZGUgY29udHJpYnV0b3JzLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhXG4vLyBjb3B5IG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlXG4vLyBcIlNvZnR3YXJlXCIpLCB0byBkZWFsIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmdcbi8vIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCxcbi8vIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXRcbi8vIHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZVxuLy8gZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWRcbi8vIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1Ncbi8vIE9SIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0Zcbi8vIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU5cbi8vIE5PIEVWRU5UIFNIQUxMIFRIRSBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLFxuLy8gREFNQUdFUyBPUiBPVEhFUiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SXG4vLyBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFXG4vLyBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU4gVEhFIFNPRlRXQVJFLlxuXG5cbmltcG9ydCB7dG9BU0NJSX0gZnJvbSAncHVueWNvZGUnO1xuaW1wb3J0IHtpc09iamVjdCxpc1N0cmluZyxpc051bGxPclVuZGVmaW5lZCxpc051bGx9IGZyb20gJ3V0aWwnO1xuaW1wb3J0IHtwYXJzZSBhcyBxc1BhcnNlLHN0cmluZ2lmeSBhcyBxc1N0cmluZ2lmeX0gZnJvbSAncXVlcnlzdHJpbmcnO1xuZXhwb3J0IHtcbiAgdXJsUGFyc2UgYXMgcGFyc2UsXG4gIHVybFJlc29sdmUgYXMgcmVzb2x2ZSxcbiAgdXJsUmVzb2x2ZU9iamVjdCBhcyByZXNvbHZlT2JqZWN0LFxuICB1cmxGb3JtYXQgYXMgZm9ybWF0XG59O1xuZXhwb3J0IGRlZmF1bHQge1xuICBwYXJzZTogdXJsUGFyc2UsXG4gIHJlc29sdmU6IHVybFJlc29sdmUsXG4gIHJlc29sdmVPYmplY3Q6IHVybFJlc29sdmVPYmplY3QsXG4gIGZvcm1hdDogdXJsRm9ybWF0LFxuICBVcmw6IFVybFxufVxuZXhwb3J0IGZ1bmN0aW9uIFVybCgpIHtcbiAgdGhpcy5wcm90b2NvbCA9IG51bGw7XG4gIHRoaXMuc2xhc2hlcyA9IG51bGw7XG4gIHRoaXMuYXV0aCA9IG51bGw7XG4gIHRoaXMuaG9zdCA9IG51bGw7XG4gIHRoaXMucG9ydCA9IG51bGw7XG4gIHRoaXMuaG9zdG5hbWUgPSBudWxsO1xuICB0aGlzLmhhc2ggPSBudWxsO1xuICB0aGlzLnNlYXJjaCA9IG51bGw7XG4gIHRoaXMucXVlcnkgPSBudWxsO1xuICB0aGlzLnBhdGhuYW1lID0gbnVsbDtcbiAgdGhpcy5wYXRoID0gbnVsbDtcbiAgdGhpcy5ocmVmID0gbnVsbDtcbn1cblxuLy8gUmVmZXJlbmNlOiBSRkMgMzk4NiwgUkZDIDE4MDgsIFJGQyAyMzk2XG5cbi8vIGRlZmluZSB0aGVzZSBoZXJlIHNvIGF0IGxlYXN0IHRoZXkgb25seSBoYXZlIHRvIGJlXG4vLyBjb21waWxlZCBvbmNlIG9uIHRoZSBmaXJzdCBtb2R1bGUgbG9hZC5cbnZhciBwcm90b2NvbFBhdHRlcm4gPSAvXihbYS16MC05ListXSs6KS9pLFxuICBwb3J0UGF0dGVybiA9IC86WzAtOV0qJC8sXG5cbiAgLy8gU3BlY2lhbCBjYXNlIGZvciBhIHNpbXBsZSBwYXRoIFVSTFxuICBzaW1wbGVQYXRoUGF0dGVybiA9IC9eKFxcL1xcLz8oPyFcXC8pW15cXD9cXHNdKikoXFw/W15cXHNdKik/JC8sXG5cbiAgLy8gUkZDIDIzOTY6IGNoYXJhY3RlcnMgcmVzZXJ2ZWQgZm9yIGRlbGltaXRpbmcgVVJMcy5cbiAgLy8gV2UgYWN0dWFsbHkganVzdCBhdXRvLWVzY2FwZSB0aGVzZS5cbiAgZGVsaW1zID0gWyc8JywgJz4nLCAnXCInLCAnYCcsICcgJywgJ1xccicsICdcXG4nLCAnXFx0J10sXG5cbiAgLy8gUkZDIDIzOTY6IGNoYXJhY3RlcnMgbm90IGFsbG93ZWQgZm9yIHZhcmlvdXMgcmVhc29ucy5cbiAgdW53aXNlID0gWyd7JywgJ30nLCAnfCcsICdcXFxcJywgJ14nLCAnYCddLmNvbmNhdChkZWxpbXMpLFxuXG4gIC8vIEFsbG93ZWQgYnkgUkZDcywgYnV0IGNhdXNlIG9mIFhTUyBhdHRhY2tzLiAgQWx3YXlzIGVzY2FwZSB0aGVzZS5cbiAgYXV0b0VzY2FwZSA9IFsnXFwnJ10uY29uY2F0KHVud2lzZSksXG4gIC8vIENoYXJhY3RlcnMgdGhhdCBhcmUgbmV2ZXIgZXZlciBhbGxvd2VkIGluIGEgaG9zdG5hbWUuXG4gIC8vIE5vdGUgdGhhdCBhbnkgaW52YWxpZCBjaGFycyBhcmUgYWxzbyBoYW5kbGVkLCBidXQgdGhlc2VcbiAgLy8gYXJlIHRoZSBvbmVzIHRoYXQgYXJlICpleHBlY3RlZCogdG8gYmUgc2Vlbiwgc28gd2UgZmFzdC1wYXRoXG4gIC8vIHRoZW0uXG4gIG5vbkhvc3RDaGFycyA9IFsnJScsICcvJywgJz8nLCAnOycsICcjJ10uY29uY2F0KGF1dG9Fc2NhcGUpLFxuICBob3N0RW5kaW5nQ2hhcnMgPSBbJy8nLCAnPycsICcjJ10sXG4gIGhvc3RuYW1lTWF4TGVuID0gMjU1LFxuICBob3N0bmFtZVBhcnRQYXR0ZXJuID0gL15bK2EtejAtOUEtWl8tXXswLDYzfSQvLFxuICBob3N0bmFtZVBhcnRTdGFydCA9IC9eKFsrYS16MC05QS1aXy1dezAsNjN9KSguKikkLyxcbiAgLy8gcHJvdG9jb2xzIHRoYXQgY2FuIGFsbG93IFwidW5zYWZlXCIgYW5kIFwidW53aXNlXCIgY2hhcnMuXG4gIHVuc2FmZVByb3RvY29sID0ge1xuICAgICdqYXZhc2NyaXB0JzogdHJ1ZSxcbiAgICAnamF2YXNjcmlwdDonOiB0cnVlXG4gIH0sXG4gIC8vIHByb3RvY29scyB0aGF0IG5ldmVyIGhhdmUgYSBob3N0bmFtZS5cbiAgaG9zdGxlc3NQcm90b2NvbCA9IHtcbiAgICAnamF2YXNjcmlwdCc6IHRydWUsXG4gICAgJ2phdmFzY3JpcHQ6JzogdHJ1ZVxuICB9LFxuICAvLyBwcm90b2NvbHMgdGhhdCBhbHdheXMgY29udGFpbiBhIC8vIGJpdC5cbiAgc2xhc2hlZFByb3RvY29sID0ge1xuICAgICdodHRwJzogdHJ1ZSxcbiAgICAnaHR0cHMnOiB0cnVlLFxuICAgICdmdHAnOiB0cnVlLFxuICAgICdnb3BoZXInOiB0cnVlLFxuICAgICdmaWxlJzogdHJ1ZSxcbiAgICAnaHR0cDonOiB0cnVlLFxuICAgICdodHRwczonOiB0cnVlLFxuICAgICdmdHA6JzogdHJ1ZSxcbiAgICAnZ29waGVyOic6IHRydWUsXG4gICAgJ2ZpbGU6JzogdHJ1ZVxuICB9O1xuXG5mdW5jdGlvbiB1cmxQYXJzZSh1cmwsIHBhcnNlUXVlcnlTdHJpbmcsIHNsYXNoZXNEZW5vdGVIb3N0KSB7XG4gIGlmICh1cmwgJiYgaXNPYmplY3QodXJsKSAmJiB1cmwgaW5zdGFuY2VvZiBVcmwpIHJldHVybiB1cmw7XG5cbiAgdmFyIHUgPSBuZXcgVXJsO1xuICB1LnBhcnNlKHVybCwgcGFyc2VRdWVyeVN0cmluZywgc2xhc2hlc0Rlbm90ZUhvc3QpO1xuICByZXR1cm4gdTtcbn1cblVybC5wcm90b3R5cGUucGFyc2UgPSBmdW5jdGlvbih1cmwsIHBhcnNlUXVlcnlTdHJpbmcsIHNsYXNoZXNEZW5vdGVIb3N0KSB7XG4gIHJldHVybiBwYXJzZSh0aGlzLCB1cmwsIHBhcnNlUXVlcnlTdHJpbmcsIHNsYXNoZXNEZW5vdGVIb3N0KTtcbn1cblxuZnVuY3Rpb24gcGFyc2Uoc2VsZiwgdXJsLCBwYXJzZVF1ZXJ5U3RyaW5nLCBzbGFzaGVzRGVub3RlSG9zdCkge1xuICBpZiAoIWlzU3RyaW5nKHVybCkpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdQYXJhbWV0ZXIgXFwndXJsXFwnIG11c3QgYmUgYSBzdHJpbmcsIG5vdCAnICsgdHlwZW9mIHVybCk7XG4gIH1cblxuICAvLyBDb3B5IGNocm9tZSwgSUUsIG9wZXJhIGJhY2tzbGFzaC1oYW5kbGluZyBiZWhhdmlvci5cbiAgLy8gQmFjayBzbGFzaGVzIGJlZm9yZSB0aGUgcXVlcnkgc3RyaW5nIGdldCBjb252ZXJ0ZWQgdG8gZm9yd2FyZCBzbGFzaGVzXG4gIC8vIFNlZTogaHR0cHM6Ly9jb2RlLmdvb2dsZS5jb20vcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTI1OTE2XG4gIHZhciBxdWVyeUluZGV4ID0gdXJsLmluZGV4T2YoJz8nKSxcbiAgICBzcGxpdHRlciA9XG4gICAgKHF1ZXJ5SW5kZXggIT09IC0xICYmIHF1ZXJ5SW5kZXggPCB1cmwuaW5kZXhPZignIycpKSA/ICc/JyA6ICcjJyxcbiAgICB1U3BsaXQgPSB1cmwuc3BsaXQoc3BsaXR0ZXIpLFxuICAgIHNsYXNoUmVnZXggPSAvXFxcXC9nO1xuICB1U3BsaXRbMF0gPSB1U3BsaXRbMF0ucmVwbGFjZShzbGFzaFJlZ2V4LCAnLycpO1xuICB1cmwgPSB1U3BsaXQuam9pbihzcGxpdHRlcik7XG5cbiAgdmFyIHJlc3QgPSB1cmw7XG5cbiAgLy8gdHJpbSBiZWZvcmUgcHJvY2VlZGluZy5cbiAgLy8gVGhpcyBpcyB0byBzdXBwb3J0IHBhcnNlIHN0dWZmIGxpa2UgXCIgIGh0dHA6Ly9mb28uY29tICBcXG5cIlxuICByZXN0ID0gcmVzdC50cmltKCk7XG5cbiAgaWYgKCFzbGFzaGVzRGVub3RlSG9zdCAmJiB1cmwuc3BsaXQoJyMnKS5sZW5ndGggPT09IDEpIHtcbiAgICAvLyBUcnkgZmFzdCBwYXRoIHJlZ2V4cFxuICAgIHZhciBzaW1wbGVQYXRoID0gc2ltcGxlUGF0aFBhdHRlcm4uZXhlYyhyZXN0KTtcbiAgICBpZiAoc2ltcGxlUGF0aCkge1xuICAgICAgc2VsZi5wYXRoID0gcmVzdDtcbiAgICAgIHNlbGYuaHJlZiA9IHJlc3Q7XG4gICAgICBzZWxmLnBhdGhuYW1lID0gc2ltcGxlUGF0aFsxXTtcbiAgICAgIGlmIChzaW1wbGVQYXRoWzJdKSB7XG4gICAgICAgIHNlbGYuc2VhcmNoID0gc2ltcGxlUGF0aFsyXTtcbiAgICAgICAgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAgICAgICBzZWxmLnF1ZXJ5ID0gcXNQYXJzZShzZWxmLnNlYXJjaC5zdWJzdHIoMSkpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlbGYucXVlcnkgPSBzZWxmLnNlYXJjaC5zdWJzdHIoMSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAocGFyc2VRdWVyeVN0cmluZykge1xuICAgICAgICBzZWxmLnNlYXJjaCA9ICcnO1xuICAgICAgICBzZWxmLnF1ZXJ5ID0ge307XG4gICAgICB9XG4gICAgICByZXR1cm4gc2VsZjtcbiAgICB9XG4gIH1cblxuICB2YXIgcHJvdG8gPSBwcm90b2NvbFBhdHRlcm4uZXhlYyhyZXN0KTtcbiAgaWYgKHByb3RvKSB7XG4gICAgcHJvdG8gPSBwcm90b1swXTtcbiAgICB2YXIgbG93ZXJQcm90byA9IHByb3RvLnRvTG93ZXJDYXNlKCk7XG4gICAgc2VsZi5wcm90b2NvbCA9IGxvd2VyUHJvdG87XG4gICAgcmVzdCA9IHJlc3Quc3Vic3RyKHByb3RvLmxlbmd0aCk7XG4gIH1cblxuICAvLyBmaWd1cmUgb3V0IGlmIGl0J3MgZ290IGEgaG9zdFxuICAvLyB1c2VyQHNlcnZlciBpcyAqYWx3YXlzKiBpbnRlcnByZXRlZCBhcyBhIGhvc3RuYW1lLCBhbmQgdXJsXG4gIC8vIHJlc29sdXRpb24gd2lsbCB0cmVhdCAvL2Zvby9iYXIgYXMgaG9zdD1mb28scGF0aD1iYXIgYmVjYXVzZSB0aGF0J3NcbiAgLy8gaG93IHRoZSBicm93c2VyIHJlc29sdmVzIHJlbGF0aXZlIFVSTHMuXG4gIGlmIChzbGFzaGVzRGVub3RlSG9zdCB8fCBwcm90byB8fCByZXN0Lm1hdGNoKC9eXFwvXFwvW15AXFwvXStAW15AXFwvXSsvKSkge1xuICAgIHZhciBzbGFzaGVzID0gcmVzdC5zdWJzdHIoMCwgMikgPT09ICcvLyc7XG4gICAgaWYgKHNsYXNoZXMgJiYgIShwcm90byAmJiBob3N0bGVzc1Byb3RvY29sW3Byb3RvXSkpIHtcbiAgICAgIHJlc3QgPSByZXN0LnN1YnN0cigyKTtcbiAgICAgIHNlbGYuc2xhc2hlcyA9IHRydWU7XG4gICAgfVxuICB9XG4gIHZhciBpLCBoZWMsIGwsIHA7XG4gIGlmICghaG9zdGxlc3NQcm90b2NvbFtwcm90b10gJiZcbiAgICAoc2xhc2hlcyB8fCAocHJvdG8gJiYgIXNsYXNoZWRQcm90b2NvbFtwcm90b10pKSkge1xuXG4gICAgLy8gdGhlcmUncyBhIGhvc3RuYW1lLlxuICAgIC8vIHRoZSBmaXJzdCBpbnN0YW5jZSBvZiAvLCA/LCA7LCBvciAjIGVuZHMgdGhlIGhvc3QuXG4gICAgLy9cbiAgICAvLyBJZiB0aGVyZSBpcyBhbiBAIGluIHRoZSBob3N0bmFtZSwgdGhlbiBub24taG9zdCBjaGFycyAqYXJlKiBhbGxvd2VkXG4gICAgLy8gdG8gdGhlIGxlZnQgb2YgdGhlIGxhc3QgQCBzaWduLCB1bmxlc3Mgc29tZSBob3N0LWVuZGluZyBjaGFyYWN0ZXJcbiAgICAvLyBjb21lcyAqYmVmb3JlKiB0aGUgQC1zaWduLlxuICAgIC8vIFVSTHMgYXJlIG9ibm94aW91cy5cbiAgICAvL1xuICAgIC8vIGV4OlxuICAgIC8vIGh0dHA6Ly9hQGJAYy8gPT4gdXNlcjphQGIgaG9zdDpjXG4gICAgLy8gaHR0cDovL2FAYj9AYyA9PiB1c2VyOmEgaG9zdDpjIHBhdGg6Lz9AY1xuXG4gICAgLy8gdjAuMTIgVE9ETyhpc2FhY3MpOiBUaGlzIGlzIG5vdCBxdWl0ZSBob3cgQ2hyb21lIGRvZXMgdGhpbmdzLlxuICAgIC8vIFJldmlldyBvdXIgdGVzdCBjYXNlIGFnYWluc3QgYnJvd3NlcnMgbW9yZSBjb21wcmVoZW5zaXZlbHkuXG5cbiAgICAvLyBmaW5kIHRoZSBmaXJzdCBpbnN0YW5jZSBvZiBhbnkgaG9zdEVuZGluZ0NoYXJzXG4gICAgdmFyIGhvc3RFbmQgPSAtMTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgaG9zdEVuZGluZ0NoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBoZWMgPSByZXN0LmluZGV4T2YoaG9zdEVuZGluZ0NoYXJzW2ldKTtcbiAgICAgIGlmIChoZWMgIT09IC0xICYmIChob3N0RW5kID09PSAtMSB8fCBoZWMgPCBob3N0RW5kKSlcbiAgICAgICAgaG9zdEVuZCA9IGhlYztcbiAgICB9XG5cbiAgICAvLyBhdCB0aGlzIHBvaW50LCBlaXRoZXIgd2UgaGF2ZSBhbiBleHBsaWNpdCBwb2ludCB3aGVyZSB0aGVcbiAgICAvLyBhdXRoIHBvcnRpb24gY2Fubm90IGdvIHBhc3QsIG9yIHRoZSBsYXN0IEAgY2hhciBpcyB0aGUgZGVjaWRlci5cbiAgICB2YXIgYXV0aCwgYXRTaWduO1xuICAgIGlmIChob3N0RW5kID09PSAtMSkge1xuICAgICAgLy8gYXRTaWduIGNhbiBiZSBhbnl3aGVyZS5cbiAgICAgIGF0U2lnbiA9IHJlc3QubGFzdEluZGV4T2YoJ0AnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gYXRTaWduIG11c3QgYmUgaW4gYXV0aCBwb3J0aW9uLlxuICAgICAgLy8gaHR0cDovL2FAYi9jQGQgPT4gaG9zdDpiIGF1dGg6YSBwYXRoOi9jQGRcbiAgICAgIGF0U2lnbiA9IHJlc3QubGFzdEluZGV4T2YoJ0AnLCBob3N0RW5kKTtcbiAgICB9XG5cbiAgICAvLyBOb3cgd2UgaGF2ZSBhIHBvcnRpb24gd2hpY2ggaXMgZGVmaW5pdGVseSB0aGUgYXV0aC5cbiAgICAvLyBQdWxsIHRoYXQgb2ZmLlxuICAgIGlmIChhdFNpZ24gIT09IC0xKSB7XG4gICAgICBhdXRoID0gcmVzdC5zbGljZSgwLCBhdFNpZ24pO1xuICAgICAgcmVzdCA9IHJlc3Quc2xpY2UoYXRTaWduICsgMSk7XG4gICAgICBzZWxmLmF1dGggPSBkZWNvZGVVUklDb21wb25lbnQoYXV0aCk7XG4gICAgfVxuXG4gICAgLy8gdGhlIGhvc3QgaXMgdGhlIHJlbWFpbmluZyB0byB0aGUgbGVmdCBvZiB0aGUgZmlyc3Qgbm9uLWhvc3QgY2hhclxuICAgIGhvc3RFbmQgPSAtMTtcbiAgICBmb3IgKGkgPSAwOyBpIDwgbm9uSG9zdENoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBoZWMgPSByZXN0LmluZGV4T2Yobm9uSG9zdENoYXJzW2ldKTtcbiAgICAgIGlmIChoZWMgIT09IC0xICYmIChob3N0RW5kID09PSAtMSB8fCBoZWMgPCBob3N0RW5kKSlcbiAgICAgICAgaG9zdEVuZCA9IGhlYztcbiAgICB9XG4gICAgLy8gaWYgd2Ugc3RpbGwgaGF2ZSBub3QgaGl0IGl0LCB0aGVuIHRoZSBlbnRpcmUgdGhpbmcgaXMgYSBob3N0LlxuICAgIGlmIChob3N0RW5kID09PSAtMSlcbiAgICAgIGhvc3RFbmQgPSByZXN0Lmxlbmd0aDtcblxuICAgIHNlbGYuaG9zdCA9IHJlc3Quc2xpY2UoMCwgaG9zdEVuZCk7XG4gICAgcmVzdCA9IHJlc3Quc2xpY2UoaG9zdEVuZCk7XG5cbiAgICAvLyBwdWxsIG91dCBwb3J0LlxuICAgIHBhcnNlSG9zdChzZWxmKTtcblxuICAgIC8vIHdlJ3ZlIGluZGljYXRlZCB0aGF0IHRoZXJlIGlzIGEgaG9zdG5hbWUsXG4gICAgLy8gc28gZXZlbiBpZiBpdCdzIGVtcHR5LCBpdCBoYXMgdG8gYmUgcHJlc2VudC5cbiAgICBzZWxmLmhvc3RuYW1lID0gc2VsZi5ob3N0bmFtZSB8fCAnJztcblxuICAgIC8vIGlmIGhvc3RuYW1lIGJlZ2lucyB3aXRoIFsgYW5kIGVuZHMgd2l0aCBdXG4gICAgLy8gYXNzdW1lIHRoYXQgaXQncyBhbiBJUHY2IGFkZHJlc3MuXG4gICAgdmFyIGlwdjZIb3N0bmFtZSA9IHNlbGYuaG9zdG5hbWVbMF0gPT09ICdbJyAmJlxuICAgICAgc2VsZi5ob3N0bmFtZVtzZWxmLmhvc3RuYW1lLmxlbmd0aCAtIDFdID09PSAnXSc7XG5cbiAgICAvLyB2YWxpZGF0ZSBhIGxpdHRsZS5cbiAgICBpZiAoIWlwdjZIb3N0bmFtZSkge1xuICAgICAgdmFyIGhvc3RwYXJ0cyA9IHNlbGYuaG9zdG5hbWUuc3BsaXQoL1xcLi8pO1xuICAgICAgZm9yIChpID0gMCwgbCA9IGhvc3RwYXJ0cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdmFyIHBhcnQgPSBob3N0cGFydHNbaV07XG4gICAgICAgIGlmICghcGFydCkgY29udGludWU7XG4gICAgICAgIGlmICghcGFydC5tYXRjaChob3N0bmFtZVBhcnRQYXR0ZXJuKSkge1xuICAgICAgICAgIHZhciBuZXdwYXJ0ID0gJyc7XG4gICAgICAgICAgZm9yICh2YXIgaiA9IDAsIGsgPSBwYXJ0Lmxlbmd0aDsgaiA8IGs7IGorKykge1xuICAgICAgICAgICAgaWYgKHBhcnQuY2hhckNvZGVBdChqKSA+IDEyNykge1xuICAgICAgICAgICAgICAvLyB3ZSByZXBsYWNlIG5vbi1BU0NJSSBjaGFyIHdpdGggYSB0ZW1wb3JhcnkgcGxhY2Vob2xkZXJcbiAgICAgICAgICAgICAgLy8gd2UgbmVlZCB0aGlzIHRvIG1ha2Ugc3VyZSBzaXplIG9mIGhvc3RuYW1lIGlzIG5vdFxuICAgICAgICAgICAgICAvLyBicm9rZW4gYnkgcmVwbGFjaW5nIG5vbi1BU0NJSSBieSBub3RoaW5nXG4gICAgICAgICAgICAgIG5ld3BhcnQgKz0gJ3gnO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgbmV3cGFydCArPSBwYXJ0W2pdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICAvLyB3ZSB0ZXN0IGFnYWluIHdpdGggQVNDSUkgY2hhciBvbmx5XG4gICAgICAgICAgaWYgKCFuZXdwYXJ0Lm1hdGNoKGhvc3RuYW1lUGFydFBhdHRlcm4pKSB7XG4gICAgICAgICAgICB2YXIgdmFsaWRQYXJ0cyA9IGhvc3RwYXJ0cy5zbGljZSgwLCBpKTtcbiAgICAgICAgICAgIHZhciBub3RIb3N0ID0gaG9zdHBhcnRzLnNsaWNlKGkgKyAxKTtcbiAgICAgICAgICAgIHZhciBiaXQgPSBwYXJ0Lm1hdGNoKGhvc3RuYW1lUGFydFN0YXJ0KTtcbiAgICAgICAgICAgIGlmIChiaXQpIHtcbiAgICAgICAgICAgICAgdmFsaWRQYXJ0cy5wdXNoKGJpdFsxXSk7XG4gICAgICAgICAgICAgIG5vdEhvc3QudW5zaGlmdChiaXRbMl0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKG5vdEhvc3QubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIHJlc3QgPSAnLycgKyBub3RIb3N0LmpvaW4oJy4nKSArIHJlc3Q7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBzZWxmLmhvc3RuYW1lID0gdmFsaWRQYXJ0cy5qb2luKCcuJyk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZiAoc2VsZi5ob3N0bmFtZS5sZW5ndGggPiBob3N0bmFtZU1heExlbikge1xuICAgICAgc2VsZi5ob3N0bmFtZSA9ICcnO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBob3N0bmFtZXMgYXJlIGFsd2F5cyBsb3dlciBjYXNlLlxuICAgICAgc2VsZi5ob3N0bmFtZSA9IHNlbGYuaG9zdG5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICB9XG5cbiAgICBpZiAoIWlwdjZIb3N0bmFtZSkge1xuICAgICAgLy8gSUROQSBTdXBwb3J0OiBSZXR1cm5zIGEgcHVueWNvZGVkIHJlcHJlc2VudGF0aW9uIG9mIFwiZG9tYWluXCIuXG4gICAgICAvLyBJdCBvbmx5IGNvbnZlcnRzIHBhcnRzIG9mIHRoZSBkb21haW4gbmFtZSB0aGF0XG4gICAgICAvLyBoYXZlIG5vbi1BU0NJSSBjaGFyYWN0ZXJzLCBpLmUuIGl0IGRvZXNuJ3QgbWF0dGVyIGlmXG4gICAgICAvLyB5b3UgY2FsbCBpdCB3aXRoIGEgZG9tYWluIHRoYXQgYWxyZWFkeSBpcyBBU0NJSS1vbmx5LlxuICAgICAgc2VsZi5ob3N0bmFtZSA9IHRvQVNDSUkoc2VsZi5ob3N0bmFtZSk7XG4gICAgfVxuXG4gICAgcCA9IHNlbGYucG9ydCA/ICc6JyArIHNlbGYucG9ydCA6ICcnO1xuICAgIHZhciBoID0gc2VsZi5ob3N0bmFtZSB8fCAnJztcbiAgICBzZWxmLmhvc3QgPSBoICsgcDtcbiAgICBzZWxmLmhyZWYgKz0gc2VsZi5ob3N0O1xuXG4gICAgLy8gc3RyaXAgWyBhbmQgXSBmcm9tIHRoZSBob3N0bmFtZVxuICAgIC8vIHRoZSBob3N0IGZpZWxkIHN0aWxsIHJldGFpbnMgdGhlbSwgdGhvdWdoXG4gICAgaWYgKGlwdjZIb3N0bmFtZSkge1xuICAgICAgc2VsZi5ob3N0bmFtZSA9IHNlbGYuaG9zdG5hbWUuc3Vic3RyKDEsIHNlbGYuaG9zdG5hbWUubGVuZ3RoIC0gMik7XG4gICAgICBpZiAocmVzdFswXSAhPT0gJy8nKSB7XG4gICAgICAgIHJlc3QgPSAnLycgKyByZXN0O1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIG5vdyByZXN0IGlzIHNldCB0byB0aGUgcG9zdC1ob3N0IHN0dWZmLlxuICAvLyBjaG9wIG9mZiBhbnkgZGVsaW0gY2hhcnMuXG4gIGlmICghdW5zYWZlUHJvdG9jb2xbbG93ZXJQcm90b10pIHtcblxuICAgIC8vIEZpcnN0LCBtYWtlIDEwMCUgc3VyZSB0aGF0IGFueSBcImF1dG9Fc2NhcGVcIiBjaGFycyBnZXRcbiAgICAvLyBlc2NhcGVkLCBldmVuIGlmIGVuY29kZVVSSUNvbXBvbmVudCBkb2Vzbid0IHRoaW5rIHRoZXlcbiAgICAvLyBuZWVkIHRvIGJlLlxuICAgIGZvciAoaSA9IDAsIGwgPSBhdXRvRXNjYXBlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgdmFyIGFlID0gYXV0b0VzY2FwZVtpXTtcbiAgICAgIGlmIChyZXN0LmluZGV4T2YoYWUpID09PSAtMSlcbiAgICAgICAgY29udGludWU7XG4gICAgICB2YXIgZXNjID0gZW5jb2RlVVJJQ29tcG9uZW50KGFlKTtcbiAgICAgIGlmIChlc2MgPT09IGFlKSB7XG4gICAgICAgIGVzYyA9IGVzY2FwZShhZSk7XG4gICAgICB9XG4gICAgICByZXN0ID0gcmVzdC5zcGxpdChhZSkuam9pbihlc2MpO1xuICAgIH1cbiAgfVxuXG5cbiAgLy8gY2hvcCBvZmYgZnJvbSB0aGUgdGFpbCBmaXJzdC5cbiAgdmFyIGhhc2ggPSByZXN0LmluZGV4T2YoJyMnKTtcbiAgaWYgKGhhc2ggIT09IC0xKSB7XG4gICAgLy8gZ290IGEgZnJhZ21lbnQgc3RyaW5nLlxuICAgIHNlbGYuaGFzaCA9IHJlc3Quc3Vic3RyKGhhc2gpO1xuICAgIHJlc3QgPSByZXN0LnNsaWNlKDAsIGhhc2gpO1xuICB9XG4gIHZhciBxbSA9IHJlc3QuaW5kZXhPZignPycpO1xuICBpZiAocW0gIT09IC0xKSB7XG4gICAgc2VsZi5zZWFyY2ggPSByZXN0LnN1YnN0cihxbSk7XG4gICAgc2VsZi5xdWVyeSA9IHJlc3Quc3Vic3RyKHFtICsgMSk7XG4gICAgaWYgKHBhcnNlUXVlcnlTdHJpbmcpIHtcbiAgICAgIHNlbGYucXVlcnkgPSBxc1BhcnNlKHNlbGYucXVlcnkpO1xuICAgIH1cbiAgICByZXN0ID0gcmVzdC5zbGljZSgwLCBxbSk7XG4gIH0gZWxzZSBpZiAocGFyc2VRdWVyeVN0cmluZykge1xuICAgIC8vIG5vIHF1ZXJ5IHN0cmluZywgYnV0IHBhcnNlUXVlcnlTdHJpbmcgc3RpbGwgcmVxdWVzdGVkXG4gICAgc2VsZi5zZWFyY2ggPSAnJztcbiAgICBzZWxmLnF1ZXJ5ID0ge307XG4gIH1cbiAgaWYgKHJlc3QpIHNlbGYucGF0aG5hbWUgPSByZXN0O1xuICBpZiAoc2xhc2hlZFByb3RvY29sW2xvd2VyUHJvdG9dICYmXG4gICAgc2VsZi5ob3N0bmFtZSAmJiAhc2VsZi5wYXRobmFtZSkge1xuICAgIHNlbGYucGF0aG5hbWUgPSAnLyc7XG4gIH1cblxuICAvL3RvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gIGlmIChzZWxmLnBhdGhuYW1lIHx8IHNlbGYuc2VhcmNoKSB7XG4gICAgcCA9IHNlbGYucGF0aG5hbWUgfHwgJyc7XG4gICAgdmFyIHMgPSBzZWxmLnNlYXJjaCB8fCAnJztcbiAgICBzZWxmLnBhdGggPSBwICsgcztcbiAgfVxuXG4gIC8vIGZpbmFsbHksIHJlY29uc3RydWN0IHRoZSBocmVmIGJhc2VkIG9uIHdoYXQgaGFzIGJlZW4gdmFsaWRhdGVkLlxuICBzZWxmLmhyZWYgPSBmb3JtYXQoc2VsZik7XG4gIHJldHVybiBzZWxmO1xufVxuXG4vLyBmb3JtYXQgYSBwYXJzZWQgb2JqZWN0IGludG8gYSB1cmwgc3RyaW5nXG5mdW5jdGlvbiB1cmxGb3JtYXQob2JqKSB7XG4gIC8vIGVuc3VyZSBpdCdzIGFuIG9iamVjdCwgYW5kIG5vdCBhIHN0cmluZyB1cmwuXG4gIC8vIElmIGl0J3MgYW4gb2JqLCB0aGlzIGlzIGEgbm8tb3AuXG4gIC8vIHRoaXMgd2F5LCB5b3UgY2FuIGNhbGwgdXJsX2Zvcm1hdCgpIG9uIHN0cmluZ3NcbiAgLy8gdG8gY2xlYW4gdXAgcG90ZW50aWFsbHkgd29ua3kgdXJscy5cbiAgaWYgKGlzU3RyaW5nKG9iaikpIG9iaiA9IHBhcnNlKHt9LCBvYmopO1xuICByZXR1cm4gZm9ybWF0KG9iaik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdChzZWxmKSB7XG4gIHZhciBhdXRoID0gc2VsZi5hdXRoIHx8ICcnO1xuICBpZiAoYXV0aCkge1xuICAgIGF1dGggPSBlbmNvZGVVUklDb21wb25lbnQoYXV0aCk7XG4gICAgYXV0aCA9IGF1dGgucmVwbGFjZSgvJTNBL2ksICc6Jyk7XG4gICAgYXV0aCArPSAnQCc7XG4gIH1cblxuICB2YXIgcHJvdG9jb2wgPSBzZWxmLnByb3RvY29sIHx8ICcnLFxuICAgIHBhdGhuYW1lID0gc2VsZi5wYXRobmFtZSB8fCAnJyxcbiAgICBoYXNoID0gc2VsZi5oYXNoIHx8ICcnLFxuICAgIGhvc3QgPSBmYWxzZSxcbiAgICBxdWVyeSA9ICcnO1xuXG4gIGlmIChzZWxmLmhvc3QpIHtcbiAgICBob3N0ID0gYXV0aCArIHNlbGYuaG9zdDtcbiAgfSBlbHNlIGlmIChzZWxmLmhvc3RuYW1lKSB7XG4gICAgaG9zdCA9IGF1dGggKyAoc2VsZi5ob3N0bmFtZS5pbmRleE9mKCc6JykgPT09IC0xID9cbiAgICAgIHNlbGYuaG9zdG5hbWUgOlxuICAgICAgJ1snICsgdGhpcy5ob3N0bmFtZSArICddJyk7XG4gICAgaWYgKHNlbGYucG9ydCkge1xuICAgICAgaG9zdCArPSAnOicgKyBzZWxmLnBvcnQ7XG4gICAgfVxuICB9XG5cbiAgaWYgKHNlbGYucXVlcnkgJiZcbiAgICBpc09iamVjdChzZWxmLnF1ZXJ5KSAmJlxuICAgIE9iamVjdC5rZXlzKHNlbGYucXVlcnkpLmxlbmd0aCkge1xuICAgIHF1ZXJ5ID0gcXNTdHJpbmdpZnkoc2VsZi5xdWVyeSk7XG4gIH1cblxuICB2YXIgc2VhcmNoID0gc2VsZi5zZWFyY2ggfHwgKHF1ZXJ5ICYmICgnPycgKyBxdWVyeSkpIHx8ICcnO1xuXG4gIGlmIChwcm90b2NvbCAmJiBwcm90b2NvbC5zdWJzdHIoLTEpICE9PSAnOicpIHByb3RvY29sICs9ICc6JztcblxuICAvLyBvbmx5IHRoZSBzbGFzaGVkUHJvdG9jb2xzIGdldCB0aGUgLy8uICBOb3QgbWFpbHRvOiwgeG1wcDosIGV0Yy5cbiAgLy8gdW5sZXNzIHRoZXkgaGFkIHRoZW0gdG8gYmVnaW4gd2l0aC5cbiAgaWYgKHNlbGYuc2xhc2hlcyB8fFxuICAgICghcHJvdG9jb2wgfHwgc2xhc2hlZFByb3RvY29sW3Byb3RvY29sXSkgJiYgaG9zdCAhPT0gZmFsc2UpIHtcbiAgICBob3N0ID0gJy8vJyArIChob3N0IHx8ICcnKTtcbiAgICBpZiAocGF0aG5hbWUgJiYgcGF0aG5hbWUuY2hhckF0KDApICE9PSAnLycpIHBhdGhuYW1lID0gJy8nICsgcGF0aG5hbWU7XG4gIH0gZWxzZSBpZiAoIWhvc3QpIHtcbiAgICBob3N0ID0gJyc7XG4gIH1cblxuICBpZiAoaGFzaCAmJiBoYXNoLmNoYXJBdCgwKSAhPT0gJyMnKSBoYXNoID0gJyMnICsgaGFzaDtcbiAgaWYgKHNlYXJjaCAmJiBzZWFyY2guY2hhckF0KDApICE9PSAnPycpIHNlYXJjaCA9ICc/JyArIHNlYXJjaDtcblxuICBwYXRobmFtZSA9IHBhdGhuYW1lLnJlcGxhY2UoL1s/I10vZywgZnVuY3Rpb24obWF0Y2gpIHtcbiAgICByZXR1cm4gZW5jb2RlVVJJQ29tcG9uZW50KG1hdGNoKTtcbiAgfSk7XG4gIHNlYXJjaCA9IHNlYXJjaC5yZXBsYWNlKCcjJywgJyUyMycpO1xuXG4gIHJldHVybiBwcm90b2NvbCArIGhvc3QgKyBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG59XG5cblVybC5wcm90b3R5cGUuZm9ybWF0ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiBmb3JtYXQodGhpcyk7XG59XG5cbmZ1bmN0aW9uIHVybFJlc29sdmUoc291cmNlLCByZWxhdGl2ZSkge1xuICByZXR1cm4gdXJsUGFyc2Uoc291cmNlLCBmYWxzZSwgdHJ1ZSkucmVzb2x2ZShyZWxhdGl2ZSk7XG59XG5cblVybC5wcm90b3R5cGUucmVzb2x2ZSA9IGZ1bmN0aW9uKHJlbGF0aXZlKSB7XG4gIHJldHVybiB0aGlzLnJlc29sdmVPYmplY3QodXJsUGFyc2UocmVsYXRpdmUsIGZhbHNlLCB0cnVlKSkuZm9ybWF0KCk7XG59O1xuXG5mdW5jdGlvbiB1cmxSZXNvbHZlT2JqZWN0KHNvdXJjZSwgcmVsYXRpdmUpIHtcbiAgaWYgKCFzb3VyY2UpIHJldHVybiByZWxhdGl2ZTtcbiAgcmV0dXJuIHVybFBhcnNlKHNvdXJjZSwgZmFsc2UsIHRydWUpLnJlc29sdmVPYmplY3QocmVsYXRpdmUpO1xufVxuXG5VcmwucHJvdG90eXBlLnJlc29sdmVPYmplY3QgPSBmdW5jdGlvbihyZWxhdGl2ZSkge1xuICBpZiAoaXNTdHJpbmcocmVsYXRpdmUpKSB7XG4gICAgdmFyIHJlbCA9IG5ldyBVcmwoKTtcbiAgICByZWwucGFyc2UocmVsYXRpdmUsIGZhbHNlLCB0cnVlKTtcbiAgICByZWxhdGl2ZSA9IHJlbDtcbiAgfVxuXG4gIHZhciByZXN1bHQgPSBuZXcgVXJsKCk7XG4gIHZhciB0a2V5cyA9IE9iamVjdC5rZXlzKHRoaXMpO1xuICBmb3IgKHZhciB0ayA9IDA7IHRrIDwgdGtleXMubGVuZ3RoOyB0aysrKSB7XG4gICAgdmFyIHRrZXkgPSB0a2V5c1t0a107XG4gICAgcmVzdWx0W3RrZXldID0gdGhpc1t0a2V5XTtcbiAgfVxuXG4gIC8vIGhhc2ggaXMgYWx3YXlzIG92ZXJyaWRkZW4sIG5vIG1hdHRlciB3aGF0LlxuICAvLyBldmVuIGhyZWY9XCJcIiB3aWxsIHJlbW92ZSBpdC5cbiAgcmVzdWx0Lmhhc2ggPSByZWxhdGl2ZS5oYXNoO1xuXG4gIC8vIGlmIHRoZSByZWxhdGl2ZSB1cmwgaXMgZW1wdHksIHRoZW4gdGhlcmUncyBub3RoaW5nIGxlZnQgdG8gZG8gaGVyZS5cbiAgaWYgKHJlbGF0aXZlLmhyZWYgPT09ICcnKSB7XG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIC8vIGhyZWZzIGxpa2UgLy9mb28vYmFyIGFsd2F5cyBjdXQgdG8gdGhlIHByb3RvY29sLlxuICBpZiAocmVsYXRpdmUuc2xhc2hlcyAmJiAhcmVsYXRpdmUucHJvdG9jb2wpIHtcbiAgICAvLyB0YWtlIGV2ZXJ5dGhpbmcgZXhjZXB0IHRoZSBwcm90b2NvbCBmcm9tIHJlbGF0aXZlXG4gICAgdmFyIHJrZXlzID0gT2JqZWN0LmtleXMocmVsYXRpdmUpO1xuICAgIGZvciAodmFyIHJrID0gMDsgcmsgPCBya2V5cy5sZW5ndGg7IHJrKyspIHtcbiAgICAgIHZhciBya2V5ID0gcmtleXNbcmtdO1xuICAgICAgaWYgKHJrZXkgIT09ICdwcm90b2NvbCcpXG4gICAgICAgIHJlc3VsdFtya2V5XSA9IHJlbGF0aXZlW3JrZXldO1xuICAgIH1cblxuICAgIC8vdXJsUGFyc2UgYXBwZW5kcyB0cmFpbGluZyAvIHRvIHVybHMgbGlrZSBodHRwOi8vd3d3LmV4YW1wbGUuY29tXG4gICAgaWYgKHNsYXNoZWRQcm90b2NvbFtyZXN1bHQucHJvdG9jb2xdICYmXG4gICAgICByZXN1bHQuaG9zdG5hbWUgJiYgIXJlc3VsdC5wYXRobmFtZSkge1xuICAgICAgcmVzdWx0LnBhdGggPSByZXN1bHQucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuXG4gICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICB2YXIgcmVsUGF0aDtcbiAgaWYgKHJlbGF0aXZlLnByb3RvY29sICYmIHJlbGF0aXZlLnByb3RvY29sICE9PSByZXN1bHQucHJvdG9jb2wpIHtcbiAgICAvLyBpZiBpdCdzIGEga25vd24gdXJsIHByb3RvY29sLCB0aGVuIGNoYW5naW5nXG4gICAgLy8gdGhlIHByb3RvY29sIGRvZXMgd2VpcmQgdGhpbmdzXG4gICAgLy8gZmlyc3QsIGlmIGl0J3Mgbm90IGZpbGU6LCB0aGVuIHdlIE1VU1QgaGF2ZSBhIGhvc3QsXG4gICAgLy8gYW5kIGlmIHRoZXJlIHdhcyBhIHBhdGhcbiAgICAvLyB0byBiZWdpbiB3aXRoLCB0aGVuIHdlIE1VU1QgaGF2ZSBhIHBhdGguXG4gICAgLy8gaWYgaXQgaXMgZmlsZTosIHRoZW4gdGhlIGhvc3QgaXMgZHJvcHBlZCxcbiAgICAvLyBiZWNhdXNlIHRoYXQncyBrbm93biB0byBiZSBob3N0bGVzcy5cbiAgICAvLyBhbnl0aGluZyBlbHNlIGlzIGFzc3VtZWQgdG8gYmUgYWJzb2x1dGUuXG4gICAgaWYgKCFzbGFzaGVkUHJvdG9jb2xbcmVsYXRpdmUucHJvdG9jb2xdKSB7XG4gICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHJlbGF0aXZlKTtcbiAgICAgIGZvciAodmFyIHYgPSAwOyB2IDwga2V5cy5sZW5ndGg7IHYrKykge1xuICAgICAgICB2YXIgayA9IGtleXNbdl07XG4gICAgICAgIHJlc3VsdFtrXSA9IHJlbGF0aXZlW2tdO1xuICAgICAgfVxuICAgICAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuICAgIH1cblxuICAgIHJlc3VsdC5wcm90b2NvbCA9IHJlbGF0aXZlLnByb3RvY29sO1xuICAgIGlmICghcmVsYXRpdmUuaG9zdCAmJiAhaG9zdGxlc3NQcm90b2NvbFtyZWxhdGl2ZS5wcm90b2NvbF0pIHtcbiAgICAgIHJlbFBhdGggPSAocmVsYXRpdmUucGF0aG5hbWUgfHwgJycpLnNwbGl0KCcvJyk7XG4gICAgICB3aGlsZSAocmVsUGF0aC5sZW5ndGggJiYgIShyZWxhdGl2ZS5ob3N0ID0gcmVsUGF0aC5zaGlmdCgpKSk7XG4gICAgICBpZiAoIXJlbGF0aXZlLmhvc3QpIHJlbGF0aXZlLmhvc3QgPSAnJztcbiAgICAgIGlmICghcmVsYXRpdmUuaG9zdG5hbWUpIHJlbGF0aXZlLmhvc3RuYW1lID0gJyc7XG4gICAgICBpZiAocmVsUGF0aFswXSAhPT0gJycpIHJlbFBhdGgudW5zaGlmdCgnJyk7XG4gICAgICBpZiAocmVsUGF0aC5sZW5ndGggPCAyKSByZWxQYXRoLnVuc2hpZnQoJycpO1xuICAgICAgcmVzdWx0LnBhdGhuYW1lID0gcmVsUGF0aC5qb2luKCcvJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5wYXRobmFtZSA9IHJlbGF0aXZlLnBhdGhuYW1lO1xuICAgIH1cbiAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoO1xuICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICAgIHJlc3VsdC5ob3N0ID0gcmVsYXRpdmUuaG9zdCB8fCAnJztcbiAgICByZXN1bHQuYXV0aCA9IHJlbGF0aXZlLmF1dGg7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gcmVsYXRpdmUuaG9zdG5hbWUgfHwgcmVsYXRpdmUuaG9zdDtcbiAgICByZXN1bHQucG9ydCA9IHJlbGF0aXZlLnBvcnQ7XG4gICAgLy8gdG8gc3VwcG9ydCBodHRwLnJlcXVlc3RcbiAgICBpZiAocmVzdWx0LnBhdGhuYW1lIHx8IHJlc3VsdC5zZWFyY2gpIHtcbiAgICAgIHZhciBwID0gcmVzdWx0LnBhdGhuYW1lIHx8ICcnO1xuICAgICAgdmFyIHMgPSByZXN1bHQuc2VhcmNoIHx8ICcnO1xuICAgICAgcmVzdWx0LnBhdGggPSBwICsgcztcbiAgICB9XG4gICAgcmVzdWx0LnNsYXNoZXMgPSByZXN1bHQuc2xhc2hlcyB8fCByZWxhdGl2ZS5zbGFzaGVzO1xuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICB2YXIgaXNTb3VyY2VBYnMgPSAocmVzdWx0LnBhdGhuYW1lICYmIHJlc3VsdC5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJyksXG4gICAgaXNSZWxBYnMgPSAoXG4gICAgICByZWxhdGl2ZS5ob3N0IHx8XG4gICAgICByZWxhdGl2ZS5wYXRobmFtZSAmJiByZWxhdGl2ZS5wYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJ1xuICAgICksXG4gICAgbXVzdEVuZEFicyA9IChpc1JlbEFicyB8fCBpc1NvdXJjZUFicyB8fFxuICAgICAgKHJlc3VsdC5ob3N0ICYmIHJlbGF0aXZlLnBhdGhuYW1lKSksXG4gICAgcmVtb3ZlQWxsRG90cyA9IG11c3RFbmRBYnMsXG4gICAgc3JjUGF0aCA9IHJlc3VsdC5wYXRobmFtZSAmJiByZXN1bHQucGF0aG5hbWUuc3BsaXQoJy8nKSB8fCBbXSxcbiAgICBwc3ljaG90aWMgPSByZXN1bHQucHJvdG9jb2wgJiYgIXNsYXNoZWRQcm90b2NvbFtyZXN1bHQucHJvdG9jb2xdO1xuICByZWxQYXRoID0gcmVsYXRpdmUucGF0aG5hbWUgJiYgcmVsYXRpdmUucGF0aG5hbWUuc3BsaXQoJy8nKSB8fCBbXTtcbiAgLy8gaWYgdGhlIHVybCBpcyBhIG5vbi1zbGFzaGVkIHVybCwgdGhlbiByZWxhdGl2ZVxuICAvLyBsaW5rcyBsaWtlIC4uLy4uIHNob3VsZCBiZSBhYmxlXG4gIC8vIHRvIGNyYXdsIHVwIHRvIHRoZSBob3N0bmFtZSwgYXMgd2VsbC4gIFRoaXMgaXMgc3RyYW5nZS5cbiAgLy8gcmVzdWx0LnByb3RvY29sIGhhcyBhbHJlYWR5IGJlZW4gc2V0IGJ5IG5vdy5cbiAgLy8gTGF0ZXIgb24sIHB1dCB0aGUgZmlyc3QgcGF0aCBwYXJ0IGludG8gdGhlIGhvc3QgZmllbGQuXG4gIGlmIChwc3ljaG90aWMpIHtcbiAgICByZXN1bHQuaG9zdG5hbWUgPSAnJztcbiAgICByZXN1bHQucG9ydCA9IG51bGw7XG4gICAgaWYgKHJlc3VsdC5ob3N0KSB7XG4gICAgICBpZiAoc3JjUGF0aFswXSA9PT0gJycpIHNyY1BhdGhbMF0gPSByZXN1bHQuaG9zdDtcbiAgICAgIGVsc2Ugc3JjUGF0aC51bnNoaWZ0KHJlc3VsdC5ob3N0KTtcbiAgICB9XG4gICAgcmVzdWx0Lmhvc3QgPSAnJztcbiAgICBpZiAocmVsYXRpdmUucHJvdG9jb2wpIHtcbiAgICAgIHJlbGF0aXZlLmhvc3RuYW1lID0gbnVsbDtcbiAgICAgIHJlbGF0aXZlLnBvcnQgPSBudWxsO1xuICAgICAgaWYgKHJlbGF0aXZlLmhvc3QpIHtcbiAgICAgICAgaWYgKHJlbFBhdGhbMF0gPT09ICcnKSByZWxQYXRoWzBdID0gcmVsYXRpdmUuaG9zdDtcbiAgICAgICAgZWxzZSByZWxQYXRoLnVuc2hpZnQocmVsYXRpdmUuaG9zdCk7XG4gICAgICB9XG4gICAgICByZWxhdGl2ZS5ob3N0ID0gbnVsbDtcbiAgICB9XG4gICAgbXVzdEVuZEFicyA9IG11c3RFbmRBYnMgJiYgKHJlbFBhdGhbMF0gPT09ICcnIHx8IHNyY1BhdGhbMF0gPT09ICcnKTtcbiAgfVxuICB2YXIgYXV0aEluSG9zdDtcbiAgaWYgKGlzUmVsQWJzKSB7XG4gICAgLy8gaXQncyBhYnNvbHV0ZS5cbiAgICByZXN1bHQuaG9zdCA9IChyZWxhdGl2ZS5ob3N0IHx8IHJlbGF0aXZlLmhvc3QgPT09ICcnKSA/XG4gICAgICByZWxhdGl2ZS5ob3N0IDogcmVzdWx0Lmhvc3Q7XG4gICAgcmVzdWx0Lmhvc3RuYW1lID0gKHJlbGF0aXZlLmhvc3RuYW1lIHx8IHJlbGF0aXZlLmhvc3RuYW1lID09PSAnJykgP1xuICAgICAgcmVsYXRpdmUuaG9zdG5hbWUgOiByZXN1bHQuaG9zdG5hbWU7XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICBzcmNQYXRoID0gcmVsUGF0aDtcbiAgICAvLyBmYWxsIHRocm91Z2ggdG8gdGhlIGRvdC1oYW5kbGluZyBiZWxvdy5cbiAgfSBlbHNlIGlmIChyZWxQYXRoLmxlbmd0aCkge1xuICAgIC8vIGl0J3MgcmVsYXRpdmVcbiAgICAvLyB0aHJvdyBhd2F5IHRoZSBleGlzdGluZyBmaWxlLCBhbmQgdGFrZSB0aGUgbmV3IHBhdGggaW5zdGVhZC5cbiAgICBpZiAoIXNyY1BhdGgpIHNyY1BhdGggPSBbXTtcbiAgICBzcmNQYXRoLnBvcCgpO1xuICAgIHNyY1BhdGggPSBzcmNQYXRoLmNvbmNhdChyZWxQYXRoKTtcbiAgICByZXN1bHQuc2VhcmNoID0gcmVsYXRpdmUuc2VhcmNoO1xuICAgIHJlc3VsdC5xdWVyeSA9IHJlbGF0aXZlLnF1ZXJ5O1xuICB9IGVsc2UgaWYgKCFpc051bGxPclVuZGVmaW5lZChyZWxhdGl2ZS5zZWFyY2gpKSB7XG4gICAgLy8ganVzdCBwdWxsIG91dCB0aGUgc2VhcmNoLlxuICAgIC8vIGxpa2UgaHJlZj0nP2ZvbycuXG4gICAgLy8gUHV0IHRoaXMgYWZ0ZXIgdGhlIG90aGVyIHR3byBjYXNlcyBiZWNhdXNlIGl0IHNpbXBsaWZpZXMgdGhlIGJvb2xlYW5zXG4gICAgaWYgKHBzeWNob3RpYykge1xuICAgICAgcmVzdWx0Lmhvc3RuYW1lID0gcmVzdWx0Lmhvc3QgPSBzcmNQYXRoLnNoaWZ0KCk7XG4gICAgICAvL29jY2F0aW9uYWx5IHRoZSBhdXRoIGNhbiBnZXQgc3R1Y2sgb25seSBpbiBob3N0XG4gICAgICAvL3RoaXMgZXNwZWNpYWxseSBoYXBwZW5zIGluIGNhc2VzIGxpa2VcbiAgICAgIC8vdXJsLnJlc29sdmVPYmplY3QoJ21haWx0bzpsb2NhbDFAZG9tYWluMScsICdsb2NhbDJAZG9tYWluMicpXG4gICAgICBhdXRoSW5Ib3N0ID0gcmVzdWx0Lmhvc3QgJiYgcmVzdWx0Lmhvc3QuaW5kZXhPZignQCcpID4gMCA/XG4gICAgICAgIHJlc3VsdC5ob3N0LnNwbGl0KCdAJykgOiBmYWxzZTtcbiAgICAgIGlmIChhdXRoSW5Ib3N0KSB7XG4gICAgICAgIHJlc3VsdC5hdXRoID0gYXV0aEluSG9zdC5zaGlmdCgpO1xuICAgICAgICByZXN1bHQuaG9zdCA9IHJlc3VsdC5ob3N0bmFtZSA9IGF1dGhJbkhvc3Quc2hpZnQoKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmVzdWx0LnNlYXJjaCA9IHJlbGF0aXZlLnNlYXJjaDtcbiAgICByZXN1bHQucXVlcnkgPSByZWxhdGl2ZS5xdWVyeTtcbiAgICAvL3RvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gICAgaWYgKCFpc051bGwocmVzdWx0LnBhdGhuYW1lKSB8fCAhaXNOdWxsKHJlc3VsdC5zZWFyY2gpKSB7XG4gICAgICByZXN1bHQucGF0aCA9IChyZXN1bHQucGF0aG5hbWUgPyByZXN1bHQucGF0aG5hbWUgOiAnJykgK1xuICAgICAgICAocmVzdWx0LnNlYXJjaCA/IHJlc3VsdC5zZWFyY2ggOiAnJyk7XG4gICAgfVxuICAgIHJlc3VsdC5ocmVmID0gcmVzdWx0LmZvcm1hdCgpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBpZiAoIXNyY1BhdGgubGVuZ3RoKSB7XG4gICAgLy8gbm8gcGF0aCBhdCBhbGwuICBlYXN5LlxuICAgIC8vIHdlJ3ZlIGFscmVhZHkgaGFuZGxlZCB0aGUgb3RoZXIgc3R1ZmYgYWJvdmUuXG4gICAgcmVzdWx0LnBhdGhuYW1lID0gbnVsbDtcbiAgICAvL3RvIHN1cHBvcnQgaHR0cC5yZXF1ZXN0XG4gICAgaWYgKHJlc3VsdC5zZWFyY2gpIHtcbiAgICAgIHJlc3VsdC5wYXRoID0gJy8nICsgcmVzdWx0LnNlYXJjaDtcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzdWx0LnBhdGggPSBudWxsO1xuICAgIH1cbiAgICByZXN1bHQuaHJlZiA9IHJlc3VsdC5mb3JtYXQoKTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG5cbiAgLy8gaWYgYSB1cmwgRU5EcyBpbiAuIG9yIC4uLCB0aGVuIGl0IG11c3QgZ2V0IGEgdHJhaWxpbmcgc2xhc2guXG4gIC8vIGhvd2V2ZXIsIGlmIGl0IGVuZHMgaW4gYW55dGhpbmcgZWxzZSBub24tc2xhc2h5LFxuICAvLyB0aGVuIGl0IG11c3QgTk9UIGdldCBhIHRyYWlsaW5nIHNsYXNoLlxuICB2YXIgbGFzdCA9IHNyY1BhdGguc2xpY2UoLTEpWzBdO1xuICB2YXIgaGFzVHJhaWxpbmdTbGFzaCA9IChcbiAgICAocmVzdWx0Lmhvc3QgfHwgcmVsYXRpdmUuaG9zdCB8fCBzcmNQYXRoLmxlbmd0aCA+IDEpICYmXG4gICAgKGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nKSB8fCBsYXN0ID09PSAnJyk7XG5cbiAgLy8gc3RyaXAgc2luZ2xlIGRvdHMsIHJlc29sdmUgZG91YmxlIGRvdHMgdG8gcGFyZW50IGRpclxuICAvLyBpZiB0aGUgcGF0aCB0cmllcyB0byBnbyBhYm92ZSB0aGUgcm9vdCwgYHVwYCBlbmRzIHVwID4gMFxuICB2YXIgdXAgPSAwO1xuICBmb3IgKHZhciBpID0gc3JjUGF0aC5sZW5ndGg7IGkgPj0gMDsgaS0tKSB7XG4gICAgbGFzdCA9IHNyY1BhdGhbaV07XG4gICAgaWYgKGxhc3QgPT09ICcuJykge1xuICAgICAgc3JjUGF0aC5zcGxpY2UoaSwgMSk7XG4gICAgfSBlbHNlIGlmIChsYXN0ID09PSAnLi4nKSB7XG4gICAgICBzcmNQYXRoLnNwbGljZShpLCAxKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgc3JjUGF0aC5zcGxpY2UoaSwgMSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIC8vIGlmIHRoZSBwYXRoIGlzIGFsbG93ZWQgdG8gZ28gYWJvdmUgdGhlIHJvb3QsIHJlc3RvcmUgbGVhZGluZyAuLnNcbiAgaWYgKCFtdXN0RW5kQWJzICYmICFyZW1vdmVBbGxEb3RzKSB7XG4gICAgZm9yICg7IHVwLS07IHVwKSB7XG4gICAgICBzcmNQYXRoLnVuc2hpZnQoJy4uJyk7XG4gICAgfVxuICB9XG5cbiAgaWYgKG11c3RFbmRBYnMgJiYgc3JjUGF0aFswXSAhPT0gJycgJiZcbiAgICAoIXNyY1BhdGhbMF0gfHwgc3JjUGF0aFswXS5jaGFyQXQoMCkgIT09ICcvJykpIHtcbiAgICBzcmNQYXRoLnVuc2hpZnQoJycpO1xuICB9XG5cbiAgaWYgKGhhc1RyYWlsaW5nU2xhc2ggJiYgKHNyY1BhdGguam9pbignLycpLnN1YnN0cigtMSkgIT09ICcvJykpIHtcbiAgICBzcmNQYXRoLnB1c2goJycpO1xuICB9XG5cbiAgdmFyIGlzQWJzb2x1dGUgPSBzcmNQYXRoWzBdID09PSAnJyB8fFxuICAgIChzcmNQYXRoWzBdICYmIHNyY1BhdGhbMF0uY2hhckF0KDApID09PSAnLycpO1xuXG4gIC8vIHB1dCB0aGUgaG9zdCBiYWNrXG4gIGlmIChwc3ljaG90aWMpIHtcbiAgICByZXN1bHQuaG9zdG5hbWUgPSByZXN1bHQuaG9zdCA9IGlzQWJzb2x1dGUgPyAnJyA6XG4gICAgICBzcmNQYXRoLmxlbmd0aCA/IHNyY1BhdGguc2hpZnQoKSA6ICcnO1xuICAgIC8vb2NjYXRpb25hbHkgdGhlIGF1dGggY2FuIGdldCBzdHVjayBvbmx5IGluIGhvc3RcbiAgICAvL3RoaXMgZXNwZWNpYWxseSBoYXBwZW5zIGluIGNhc2VzIGxpa2VcbiAgICAvL3VybC5yZXNvbHZlT2JqZWN0KCdtYWlsdG86bG9jYWwxQGRvbWFpbjEnLCAnbG9jYWwyQGRvbWFpbjInKVxuICAgIGF1dGhJbkhvc3QgPSByZXN1bHQuaG9zdCAmJiByZXN1bHQuaG9zdC5pbmRleE9mKCdAJykgPiAwID9cbiAgICAgIHJlc3VsdC5ob3N0LnNwbGl0KCdAJykgOiBmYWxzZTtcbiAgICBpZiAoYXV0aEluSG9zdCkge1xuICAgICAgcmVzdWx0LmF1dGggPSBhdXRoSW5Ib3N0LnNoaWZ0KCk7XG4gICAgICByZXN1bHQuaG9zdCA9IHJlc3VsdC5ob3N0bmFtZSA9IGF1dGhJbkhvc3Quc2hpZnQoKTtcbiAgICB9XG4gIH1cblxuICBtdXN0RW5kQWJzID0gbXVzdEVuZEFicyB8fCAocmVzdWx0Lmhvc3QgJiYgc3JjUGF0aC5sZW5ndGgpO1xuXG4gIGlmIChtdXN0RW5kQWJzICYmICFpc0Fic29sdXRlKSB7XG4gICAgc3JjUGF0aC51bnNoaWZ0KCcnKTtcbiAgfVxuXG4gIGlmICghc3JjUGF0aC5sZW5ndGgpIHtcbiAgICByZXN1bHQucGF0aG5hbWUgPSBudWxsO1xuICAgIHJlc3VsdC5wYXRoID0gbnVsbDtcbiAgfSBlbHNlIHtcbiAgICByZXN1bHQucGF0aG5hbWUgPSBzcmNQYXRoLmpvaW4oJy8nKTtcbiAgfVxuXG4gIC8vdG8gc3VwcG9ydCByZXF1ZXN0Lmh0dHBcbiAgaWYgKCFpc051bGwocmVzdWx0LnBhdGhuYW1lKSB8fCAhaXNOdWxsKHJlc3VsdC5zZWFyY2gpKSB7XG4gICAgcmVzdWx0LnBhdGggPSAocmVzdWx0LnBhdGhuYW1lID8gcmVzdWx0LnBhdGhuYW1lIDogJycpICtcbiAgICAgIChyZXN1bHQuc2VhcmNoID8gcmVzdWx0LnNlYXJjaCA6ICcnKTtcbiAgfVxuICByZXN1bHQuYXV0aCA9IHJlbGF0aXZlLmF1dGggfHwgcmVzdWx0LmF1dGg7XG4gIHJlc3VsdC5zbGFzaGVzID0gcmVzdWx0LnNsYXNoZXMgfHwgcmVsYXRpdmUuc2xhc2hlcztcbiAgcmVzdWx0LmhyZWYgPSByZXN1bHQuZm9ybWF0KCk7XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5VcmwucHJvdG90eXBlLnBhcnNlSG9zdCA9IGZ1bmN0aW9uKCkge1xuICByZXR1cm4gcGFyc2VIb3N0KHRoaXMpO1xufTtcblxuZnVuY3Rpb24gcGFyc2VIb3N0KHNlbGYpIHtcbiAgdmFyIGhvc3QgPSBzZWxmLmhvc3Q7XG4gIHZhciBwb3J0ID0gcG9ydFBhdHRlcm4uZXhlYyhob3N0KTtcbiAgaWYgKHBvcnQpIHtcbiAgICBwb3J0ID0gcG9ydFswXTtcbiAgICBpZiAocG9ydCAhPT0gJzonKSB7XG4gICAgICBzZWxmLnBvcnQgPSBwb3J0LnN1YnN0cigxKTtcbiAgICB9XG4gICAgaG9zdCA9IGhvc3Quc3Vic3RyKDAsIGhvc3QubGVuZ3RoIC0gcG9ydC5sZW5ndGgpO1xuICB9XG4gIGlmIChob3N0KSBzZWxmLmhvc3RuYW1lID0gaG9zdDtcbn1cbiIsIi8qXG50aGlzIGFuZCBodHRwLWxpYiBmb2xkZXJcblxuVGhlIE1JVCBMaWNlbnNlXG5cbkNvcHlyaWdodCAoYykgMjAxNSBKb2huIEhpZXNleVxuXG5QZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSxcbnRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZFxuYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG9cbmRlYWwgaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZ1xud2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHMgdG8gdXNlLCBjb3B5LCBtb2RpZnksXG5tZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbmNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tXG50aGUgU29mdHdhcmUgaXMgZnVybmlzaGVkIHRvIGRvIHNvLFxuc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG5cblRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlXG5zaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cblxuVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCxcbkVYUFJFU1MgT1IgSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFU1xuT0YgTUVSQ0hBTlRBQklMSVRZLCBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULlxuSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUlxuQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsXG5UT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLCBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRVxuU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuXG5cbiovXG5pbXBvcnQgQ2xpZW50UmVxdWVzdCBmcm9tICcuL2h0dHAtbGliL3JlcXVlc3QnO1xuaW1wb3J0IHtwYXJzZX0gZnJvbSAndXJsJztcblxuZXhwb3J0IGZ1bmN0aW9uIHJlcXVlc3Qob3B0cywgY2IpIHtcbiAgaWYgKHR5cGVvZiBvcHRzID09PSAnc3RyaW5nJylcbiAgICBvcHRzID0gcGFyc2Uob3B0cylcblxuXG4gIC8vIE5vcm1hbGx5LCB0aGUgcGFnZSBpcyBsb2FkZWQgZnJvbSBodHRwIG9yIGh0dHBzLCBzbyBub3Qgc3BlY2lmeWluZyBhIHByb3RvY29sXG4gIC8vIHdpbGwgcmVzdWx0IGluIGEgKHZhbGlkKSBwcm90b2NvbC1yZWxhdGl2ZSB1cmwuIEhvd2V2ZXIsIHRoaXMgd29uJ3Qgd29yayBpZlxuICAvLyB0aGUgcHJvdG9jb2wgaXMgc29tZXRoaW5nIGVsc2UsIGxpa2UgJ2ZpbGU6J1xuICB2YXIgZGVmYXVsdFByb3RvY29sID0gZ2xvYmFsLmxvY2F0aW9uLnByb3RvY29sLnNlYXJjaCgvXmh0dHBzPzokLykgPT09IC0xID8gJ2h0dHA6JyA6ICcnXG5cbiAgdmFyIHByb3RvY29sID0gb3B0cy5wcm90b2NvbCB8fCBkZWZhdWx0UHJvdG9jb2xcbiAgdmFyIGhvc3QgPSBvcHRzLmhvc3RuYW1lIHx8IG9wdHMuaG9zdFxuICB2YXIgcG9ydCA9IG9wdHMucG9ydFxuICB2YXIgcGF0aCA9IG9wdHMucGF0aCB8fCAnLydcblxuICAvLyBOZWNlc3NhcnkgZm9yIElQdjYgYWRkcmVzc2VzXG4gIGlmIChob3N0ICYmIGhvc3QuaW5kZXhPZignOicpICE9PSAtMSlcbiAgICBob3N0ID0gJ1snICsgaG9zdCArICddJ1xuXG4gIC8vIFRoaXMgbWF5IGJlIGEgcmVsYXRpdmUgdXJsLiBUaGUgYnJvd3NlciBzaG91bGQgYWx3YXlzIGJlIGFibGUgdG8gaW50ZXJwcmV0IGl0IGNvcnJlY3RseS5cbiAgb3B0cy51cmwgPSAoaG9zdCA/IChwcm90b2NvbCArICcvLycgKyBob3N0KSA6ICcnKSArIChwb3J0ID8gJzonICsgcG9ydCA6ICcnKSArIHBhdGhcbiAgb3B0cy5tZXRob2QgPSAob3B0cy5tZXRob2QgfHwgJ0dFVCcpLnRvVXBwZXJDYXNlKClcbiAgb3B0cy5oZWFkZXJzID0gb3B0cy5oZWFkZXJzIHx8IHt9XG5cbiAgLy8gQWxzbyB2YWxpZCBvcHRzLmF1dGgsIG9wdHMubW9kZVxuXG4gIHZhciByZXEgPSBuZXcgQ2xpZW50UmVxdWVzdChvcHRzKVxuICBpZiAoY2IpXG4gICAgcmVxLm9uKCdyZXNwb25zZScsIGNiKVxuICByZXR1cm4gcmVxXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBnZXQob3B0cywgY2IpIHtcbiAgdmFyIHJlcSA9IHJlcXVlc3Qob3B0cywgY2IpXG4gIHJlcS5lbmQoKVxuICByZXR1cm4gcmVxXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBBZ2VudCgpIHt9XG5BZ2VudC5kZWZhdWx0TWF4U29ja2V0cyA9IDRcblxuZXhwb3J0IHZhciBNRVRIT0RTID0gW1xuICAnQ0hFQ0tPVVQnLFxuICAnQ09OTkVDVCcsXG4gICdDT1BZJyxcbiAgJ0RFTEVURScsXG4gICdHRVQnLFxuICAnSEVBRCcsXG4gICdMT0NLJyxcbiAgJ00tU0VBUkNIJyxcbiAgJ01FUkdFJyxcbiAgJ01LQUNUSVZJVFknLFxuICAnTUtDT0wnLFxuICAnTU9WRScsXG4gICdOT1RJRlknLFxuICAnT1BUSU9OUycsXG4gICdQQVRDSCcsXG4gICdQT1NUJyxcbiAgJ1BST1BGSU5EJyxcbiAgJ1BST1BQQVRDSCcsXG4gICdQVVJHRScsXG4gICdQVVQnLFxuICAnUkVQT1JUJyxcbiAgJ1NFQVJDSCcsXG4gICdTVUJTQ1JJQkUnLFxuICAnVFJBQ0UnLFxuICAnVU5MT0NLJyxcbiAgJ1VOU1VCU0NSSUJFJ1xuXVxuZXhwb3J0IHZhciBTVEFUVVNfQ09ERVMgPSB7XG4gIDEwMDogJ0NvbnRpbnVlJyxcbiAgMTAxOiAnU3dpdGNoaW5nIFByb3RvY29scycsXG4gIDEwMjogJ1Byb2Nlc3NpbmcnLCAvLyBSRkMgMjUxOCwgb2Jzb2xldGVkIGJ5IFJGQyA0OTE4XG4gIDIwMDogJ09LJyxcbiAgMjAxOiAnQ3JlYXRlZCcsXG4gIDIwMjogJ0FjY2VwdGVkJyxcbiAgMjAzOiAnTm9uLUF1dGhvcml0YXRpdmUgSW5mb3JtYXRpb24nLFxuICAyMDQ6ICdObyBDb250ZW50JyxcbiAgMjA1OiAnUmVzZXQgQ29udGVudCcsXG4gIDIwNjogJ1BhcnRpYWwgQ29udGVudCcsXG4gIDIwNzogJ011bHRpLVN0YXR1cycsIC8vIFJGQyA0OTE4XG4gIDMwMDogJ011bHRpcGxlIENob2ljZXMnLFxuICAzMDE6ICdNb3ZlZCBQZXJtYW5lbnRseScsXG4gIDMwMjogJ01vdmVkIFRlbXBvcmFyaWx5JyxcbiAgMzAzOiAnU2VlIE90aGVyJyxcbiAgMzA0OiAnTm90IE1vZGlmaWVkJyxcbiAgMzA1OiAnVXNlIFByb3h5JyxcbiAgMzA3OiAnVGVtcG9yYXJ5IFJlZGlyZWN0JyxcbiAgNDAwOiAnQmFkIFJlcXVlc3QnLFxuICA0MDE6ICdVbmF1dGhvcml6ZWQnLFxuICA0MDI6ICdQYXltZW50IFJlcXVpcmVkJyxcbiAgNDAzOiAnRm9yYmlkZGVuJyxcbiAgNDA0OiAnTm90IEZvdW5kJyxcbiAgNDA1OiAnTWV0aG9kIE5vdCBBbGxvd2VkJyxcbiAgNDA2OiAnTm90IEFjY2VwdGFibGUnLFxuICA0MDc6ICdQcm94eSBBdXRoZW50aWNhdGlvbiBSZXF1aXJlZCcsXG4gIDQwODogJ1JlcXVlc3QgVGltZS1vdXQnLFxuICA0MDk6ICdDb25mbGljdCcsXG4gIDQxMDogJ0dvbmUnLFxuICA0MTE6ICdMZW5ndGggUmVxdWlyZWQnLFxuICA0MTI6ICdQcmVjb25kaXRpb24gRmFpbGVkJyxcbiAgNDEzOiAnUmVxdWVzdCBFbnRpdHkgVG9vIExhcmdlJyxcbiAgNDE0OiAnUmVxdWVzdC1VUkkgVG9vIExhcmdlJyxcbiAgNDE1OiAnVW5zdXBwb3J0ZWQgTWVkaWEgVHlwZScsXG4gIDQxNjogJ1JlcXVlc3RlZCBSYW5nZSBOb3QgU2F0aXNmaWFibGUnLFxuICA0MTc6ICdFeHBlY3RhdGlvbiBGYWlsZWQnLFxuICA0MTg6ICdJXFwnbSBhIHRlYXBvdCcsIC8vIFJGQyAyMzI0XG4gIDQyMjogJ1VucHJvY2Vzc2FibGUgRW50aXR5JywgLy8gUkZDIDQ5MThcbiAgNDIzOiAnTG9ja2VkJywgLy8gUkZDIDQ5MThcbiAgNDI0OiAnRmFpbGVkIERlcGVuZGVuY3knLCAvLyBSRkMgNDkxOFxuICA0MjU6ICdVbm9yZGVyZWQgQ29sbGVjdGlvbicsIC8vIFJGQyA0OTE4XG4gIDQyNjogJ1VwZ3JhZGUgUmVxdWlyZWQnLCAvLyBSRkMgMjgxN1xuICA0Mjg6ICdQcmVjb25kaXRpb24gUmVxdWlyZWQnLCAvLyBSRkMgNjU4NVxuICA0Mjk6ICdUb28gTWFueSBSZXF1ZXN0cycsIC8vIFJGQyA2NTg1XG4gIDQzMTogJ1JlcXVlc3QgSGVhZGVyIEZpZWxkcyBUb28gTGFyZ2UnLCAvLyBSRkMgNjU4NVxuICA1MDA6ICdJbnRlcm5hbCBTZXJ2ZXIgRXJyb3InLFxuICA1MDE6ICdOb3QgSW1wbGVtZW50ZWQnLFxuICA1MDI6ICdCYWQgR2F0ZXdheScsXG4gIDUwMzogJ1NlcnZpY2UgVW5hdmFpbGFibGUnLFxuICA1MDQ6ICdHYXRld2F5IFRpbWUtb3V0JyxcbiAgNTA1OiAnSFRUUCBWZXJzaW9uIE5vdCBTdXBwb3J0ZWQnLFxuICA1MDY6ICdWYXJpYW50IEFsc28gTmVnb3RpYXRlcycsIC8vIFJGQyAyMjk1XG4gIDUwNzogJ0luc3VmZmljaWVudCBTdG9yYWdlJywgLy8gUkZDIDQ5MThcbiAgNTA5OiAnQmFuZHdpZHRoIExpbWl0IEV4Y2VlZGVkJyxcbiAgNTEwOiAnTm90IEV4dGVuZGVkJywgLy8gUkZDIDI3NzRcbiAgNTExOiAnTmV0d29yayBBdXRoZW50aWNhdGlvbiBSZXF1aXJlZCcgLy8gUkZDIDY1ODVcbn07XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgcmVxdWVzdCxcbiAgZ2V0LFxuICBBZ2VudCxcbiAgTUVUSE9EUyxcbiAgU1RBVFVTX0NPREVTXG59XG4iLCIoZnVuY3Rpb24oR2VvSlNPTikge1xuICBHZW9KU09OLnZlcnNpb24gPSAnMC41LjAnO1xuXG4gIC8vIEFsbG93IHVzZXIgdG8gc3BlY2lmeSBkZWZhdWx0IHBhcmFtZXRlcnNcbiAgR2VvSlNPTi5kZWZhdWx0cyA9IHtcbiAgICBkb1Rocm93czoge1xuICAgICAgaW52YWxpZEdlb21ldHJ5OiBmYWxzZVxuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiBJbnZhbGlkR2VvbWV0cnlFcnJvcigpIHtcbiAgICB2YXIgYXJncyA9IDEgPD0gYXJndW1lbnRzLmxlbmd0aCA/IFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLCAwKSA6IFtdO1xuICAgIHZhciBpdGVtID0gYXJncy5zaGlmdCgpO1xuICAgIHZhciBwYXJhbXMgPSBhcmdzLnNoaWZ0KCk7XG5cbiAgICBFcnJvci5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB0aGlzLm1lc3NhZ2UgPSB0aGlzLm1lc3NhZ2UgfHwgXCJJbnZhbGlkIEdlb21ldHJ5OiBcIiArICdpdGVtOiAnICsgSlNPTi5zdHJpbmdpZnkoaXRlbSkgKyAnLCBwYXJhbXM6ICcgKyBKU09OLnN0cmluZ2lmeShwYXJhbXMpO1xuICB9XG5cbiAgSW52YWxpZEdlb21ldHJ5RXJyb3IucHJvdG90eXBlID0gRXJyb3I7XG5cblxuICBHZW9KU09OLmVycm9ycyA9IHtcbiAgICBJbnZhbGlkR2VvbWV0cnlFcnJvcjogSW52YWxpZEdlb21ldHJ5RXJyb3JcbiAgfTtcblxuICAvL2V4cG9zaW5nIHNvIHRoaXMgY2FuIGJlIG92ZXJyaWRlbiBtYXliZSBieSBnZW9qc29uLXZhbGlkYXRpb24gb3IgdGhlIGxpa2VcbiAgR2VvSlNPTi5pc0dlb21ldHJ5VmFsaWQgPSBmdW5jdGlvbihnZW9tZXRyeSl7XG4gICAgaWYoIWdlb21ldHJ5IHx8ICFPYmplY3Qua2V5cyhnZW9tZXRyeSkubGVuZ3RoKVxuICAgICAgcmV0dXJuIGZhbHNlO1xuXG4gICAgcmV0dXJuICEhZ2VvbWV0cnkudHlwZSAmJiAhIWdlb21ldHJ5LmNvb3JkaW5hdGVzICYmIEFycmF5LmlzQXJyYXkoZ2VvbWV0cnkuY29vcmRpbmF0ZXMpICYmICEhZ2VvbWV0cnkuY29vcmRpbmF0ZXMubGVuZ3RoO1xuICB9O1xuXG4gIC8vIFRoZSBvbmUgYW5kIG9ubHkgcHVibGljIGZ1bmN0aW9uLlxuICAvLyBDb252ZXJ0cyBhbiBhcnJheSBvZiBvYmplY3RzIGludG8gYSBHZW9KU09OIGZlYXR1cmUgY29sbGVjdGlvblxuICBHZW9KU09OLnBhcnNlID0gZnVuY3Rpb24ob2JqZWN0cywgcGFyYW1zLCBjYWxsYmFjaykge1xuICAgIHZhciBnZW9qc29uLFxuICAgICAgICBzZXR0aW5ncyA9IGFwcGx5RGVmYXVsdHMocGFyYW1zLCB0aGlzLmRlZmF1bHRzKSxcbiAgICAgICAgcHJvcEZ1bmM7XG5cbiAgICBnZW9tQXR0cnMubGVuZ3RoID0gMDsgLy8gUmVzZXQgdGhlIGxpc3Qgb2YgZ2VvbWV0cnkgZmllbGRzXG4gICAgc2V0R2VvbShzZXR0aW5ncyk7XG4gICAgcHJvcEZ1bmMgPSBnZXRQcm9wRnVuY3Rpb24oc2V0dGluZ3MpO1xuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkob2JqZWN0cykpIHtcbiAgICAgIGdlb2pzb24gPSB7XCJ0eXBlXCI6IFwiRmVhdHVyZUNvbGxlY3Rpb25cIiwgXCJmZWF0dXJlc1wiOiBbXX07XG4gICAgICBvYmplY3RzLmZvckVhY2goZnVuY3Rpb24oaXRlbSl7XG4gICAgICAgIGdlb2pzb24uZmVhdHVyZXMucHVzaChnZXRGZWF0dXJlKHtpdGVtOml0ZW0sIHBhcmFtczogc2V0dGluZ3MsIHByb3BGdW5jOnByb3BGdW5jfSkpO1xuICAgICAgfSk7XG4gICAgICBhZGRPcHRpb25hbHMoZ2VvanNvbiwgc2V0dGluZ3MpO1xuICAgIH0gZWxzZSB7XG4gICAgICBnZW9qc29uID0gZ2V0RmVhdHVyZSh7aXRlbTpvYmplY3RzLCBwYXJhbXM6IHNldHRpbmdzLCBwcm9wRnVuYzpwcm9wRnVuY30pO1xuICAgICAgYWRkT3B0aW9uYWxzKGdlb2pzb24sIHNldHRpbmdzKTtcbiAgICB9XG5cbiAgICBpZiAoY2FsbGJhY2sgJiYgdHlwZW9mIGNhbGxiYWNrID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBjYWxsYmFjayhnZW9qc29uKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGdlb2pzb247XG4gICAgfVxuICB9O1xuXG4gIC8vIEhlbHBlciBmdW5jdGlvbnNcbiAgdmFyIGdlb21zID0gWydQb2ludCcsICdNdWx0aVBvaW50JywgJ0xpbmVTdHJpbmcnLCAnTXVsdGlMaW5lU3RyaW5nJywgJ1BvbHlnb24nLCAnTXVsdGlQb2x5Z29uJywgJ0dlb0pTT04nXSxcbiAgICAgIGdlb21BdHRycyA9IFtdO1xuXG4gIC8vIEFkZHMgZGVmYXVsdCBzZXR0aW5ncyB0byB1c2VyLXNwZWNpZmllZCBwYXJhbXNcbiAgLy8gRG9lcyBub3Qgb3ZlcndyaXRlIGFueSBzZXR0aW5ncy0tb25seSBhZGRzIGRlZmF1bHRzXG4gIC8vIHRoZSB0aGUgdXNlciBkaWQgbm90IHNwZWNpZnlcbiAgZnVuY3Rpb24gYXBwbHlEZWZhdWx0cyhwYXJhbXMsIGRlZmF1bHRzKSB7XG4gICAgdmFyIHNldHRpbmdzID0gcGFyYW1zIHx8IHt9O1xuXG4gICAgZm9yKHZhciBzZXR0aW5nIGluIGRlZmF1bHRzKSB7XG4gICAgICBpZihkZWZhdWx0cy5oYXNPd25Qcm9wZXJ0eShzZXR0aW5nKSAmJiAhc2V0dGluZ3Nbc2V0dGluZ10pIHtcbiAgICAgICAgc2V0dGluZ3Nbc2V0dGluZ10gPSBkZWZhdWx0c1tzZXR0aW5nXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gc2V0dGluZ3M7XG4gIH1cblxuICAvLyBBZGRzIHRoZSBvcHRpb25hbCBHZW9KU09OIHByb3BlcnRpZXMgY3JzIGFuZCBiYm94XG4gIC8vIGlmIHRoZXkgaGF2ZSBiZWVuIHNwZWNpZmllZFxuICBmdW5jdGlvbiBhZGRPcHRpb25hbHMoZ2VvanNvbiwgc2V0dGluZ3Mpe1xuICAgIGlmKHNldHRpbmdzLmNycyAmJiBjaGVja0NSUyhzZXR0aW5ncy5jcnMpKSB7XG4gICAgICBpZihzZXR0aW5ncy5pc1Bvc3RncmVzKVxuICAgICAgICBnZW9qc29uLmdlb21ldHJ5LmNycyA9IHNldHRpbmdzLmNycztcbiAgICAgIGVsc2VcbiAgICAgICAgZ2VvanNvbi5jcnMgPSBzZXR0aW5ncy5jcnM7XG4gICAgfVxuICAgIGlmIChzZXR0aW5ncy5iYm94KSB7XG4gICAgICBnZW9qc29uLmJib3ggPSBzZXR0aW5ncy5iYm94O1xuICAgIH1cbiAgICBpZiAoc2V0dGluZ3MuZXh0cmFHbG9iYWwpIHtcbiAgICAgIGdlb2pzb24ucHJvcGVydGllcyA9IHt9O1xuICAgICAgZm9yICh2YXIga2V5IGluIHNldHRpbmdzLmV4dHJhR2xvYmFsKSB7XG4gICAgICAgIGdlb2pzb24ucHJvcGVydGllc1trZXldID0gc2V0dGluZ3MuZXh0cmFHbG9iYWxba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBWZXJpZnkgdGhhdCB0aGUgc3RydWN0dXJlIG9mIENSUyBvYmplY3QgaXMgdmFsaWRcbiAgZnVuY3Rpb24gY2hlY2tDUlMoY3JzKSB7XG4gICAgaWYgKGNycy50eXBlID09PSAnbmFtZScpIHtcbiAgICAgICAgaWYgKGNycy5wcm9wZXJ0aWVzICYmIGNycy5wcm9wZXJ0aWVzLm5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdJbnZhbGlkIENSUy4gUHJvcGVydGllcyBtdXN0IGNvbnRhaW4gXCJuYW1lXCIga2V5Jyk7XG4gICAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNycy50eXBlID09PSAnbGluaycpIHtcbiAgICAgICAgaWYgKGNycy5wcm9wZXJ0aWVzICYmIGNycy5wcm9wZXJ0aWVzLmhyZWYgJiYgY3JzLnByb3BlcnRpZXMudHlwZSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsaWQgQ1JTLiBQcm9wZXJ0aWVzIG11c3QgY29udGFpbiBcImhyZWZcIiBhbmQgXCJ0eXBlXCIga2V5Jyk7XG4gICAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ludmFsZCBDUlMuIFR5cGUgYXR0cmlidXRlIG11c3QgYmUgXCJuYW1lXCIgb3IgXCJsaW5rXCInKTtcbiAgICB9XG4gIH1cblxuICAvLyBNb3ZlcyB0aGUgdXNlci1zcGVjaWZpZWQgZ2VvbWV0cnkgcGFyYW1ldGVyc1xuICAvLyB1bmRlciB0aGUgYGdlb21gIGtleSBpbiBwYXJhbSBmb3IgZWFzaWVyIGFjY2Vzc1xuICBmdW5jdGlvbiBzZXRHZW9tKHBhcmFtcykge1xuICAgIHBhcmFtcy5nZW9tID0ge307XG5cbiAgICBmb3IodmFyIHBhcmFtIGluIHBhcmFtcykge1xuICAgICAgaWYocGFyYW1zLmhhc093blByb3BlcnR5KHBhcmFtKSAmJiBnZW9tcy5pbmRleE9mKHBhcmFtKSAhPT0gLTEpe1xuICAgICAgICBwYXJhbXMuZ2VvbVtwYXJhbV0gPSBwYXJhbXNbcGFyYW1dO1xuICAgICAgICBkZWxldGUgcGFyYW1zW3BhcmFtXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzZXRHZW9tQXR0ckxpc3QocGFyYW1zLmdlb20pO1xuICB9XG5cbiAgLy8gQWRkcyBmaWVsZHMgd2hpY2ggY29udGFpbiBnZW9tZXRyeSBkYXRhXG4gIC8vIHRvIGdlb21BdHRycy4gVGhpcyBsaXN0IGlzIHVzZWQgd2hlbiBhZGRpbmdcbiAgLy8gcHJvcGVydGllcyB0byB0aGUgZmVhdHVyZXMgc28gdGhhdCBubyBnZW9tZXRyeVxuICAvLyBmaWVsZHMgYXJlIGFkZGVkIHRoZSBwcm9wZXJ0aWVzIGtleVxuICBmdW5jdGlvbiBzZXRHZW9tQXR0ckxpc3QocGFyYW1zKSB7XG4gICAgZm9yKHZhciBwYXJhbSBpbiBwYXJhbXMpIHtcbiAgICAgIGlmKHBhcmFtcy5oYXNPd25Qcm9wZXJ0eShwYXJhbSkpIHtcbiAgICAgICAgaWYodHlwZW9mIHBhcmFtc1twYXJhbV0gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgZ2VvbUF0dHJzLnB1c2gocGFyYW1zW3BhcmFtXSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIHBhcmFtc1twYXJhbV0gPT09ICdvYmplY3QnKSB7IC8vIEFycmF5IG9mIGNvb3JkaW5hdGVzIGZvciBQb2ludFxuICAgICAgICAgIGdlb21BdHRycy5wdXNoKHBhcmFtc1twYXJhbV1bMF0pO1xuICAgICAgICAgIGdlb21BdHRycy5wdXNoKHBhcmFtc1twYXJhbV1bMV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYoZ2VvbUF0dHJzLmxlbmd0aCA9PT0gMCkgeyB0aHJvdyBuZXcgRXJyb3IoJ05vIGdlb21ldHJ5IGF0dHJpYnV0ZXMgc3BlY2lmaWVkJyk7IH1cbiAgfVxuXG4gIC8vIENyZWF0ZXMgYSBmZWF0dXJlIG9iamVjdCB0byBiZSBhZGRlZFxuICAvLyB0byB0aGUgR2VvSlNPTiBmZWF0dXJlcyBhcnJheVxuICBmdW5jdGlvbiBnZXRGZWF0dXJlKGFyZ3MpIHtcbiAgICB2YXIgaXRlbSA9IGFyZ3MuaXRlbSxcbiAgICAgIHBhcmFtcyA9IGFyZ3MucGFyYW1zLFxuICAgICAgcHJvcEZ1bmMgPSBhcmdzLnByb3BGdW5jO1xuXG4gICAgdmFyIGZlYXR1cmUgPSB7IFwidHlwZVwiOiBcIkZlYXR1cmVcIiB9O1xuXG4gICAgZmVhdHVyZS5nZW9tZXRyeSA9IGJ1aWxkR2VvbShpdGVtLCBwYXJhbXMpO1xuICAgIGZlYXR1cmUucHJvcGVydGllcyA9IHByb3BGdW5jLmNhbGwoaXRlbSk7XG5cbiAgICByZXR1cm4gZmVhdHVyZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzTmVzdGVkKHZhbCl7XG4gICAgcmV0dXJuICgvXi4rXFwuLiskLy50ZXN0KHZhbCkpO1xuICB9XG5cbiAgLy8gQXNzZW1ibGVzIHRoZSBgZ2VvbWV0cnlgIHByb3BlcnR5XG4gIC8vIGZvciB0aGUgZmVhdHVyZSBvdXRwdXRcbiAgZnVuY3Rpb24gYnVpbGRHZW9tKGl0ZW0sIHBhcmFtcykge1xuICAgIHZhciBnZW9tID0ge30sXG4gICAgICAgIGF0dHI7XG5cbiAgICBmb3IodmFyIGd0eXBlIGluIHBhcmFtcy5nZW9tKSB7XG4gICAgICB2YXIgdmFsID0gcGFyYW1zLmdlb21bZ3R5cGVdO1xuXG4gICAgICAvLyBHZW9tZXRyeSBwYXJhbWV0ZXIgc3BlY2lmaWVkIGFzOiB7UG9pbnQ6ICdjb29yZHMnfVxuICAgICAgaWYodHlwZW9mIHZhbCA9PT0gJ3N0cmluZycgJiYgaXRlbS5oYXNPd25Qcm9wZXJ0eSh2YWwpKSB7XG4gICAgICAgIGlmKGd0eXBlID09PSAnR2VvSlNPTicpIHtcbiAgICAgICAgICBnZW9tID0gaXRlbVt2YWxdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGdlb20udHlwZSA9IGd0eXBlO1xuICAgICAgICAgIGdlb20uY29vcmRpbmF0ZXMgPSBpdGVtW3ZhbF07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLyogSGFuZGxlIHRoaW5ncyBsaWtlOlxuICAgICAgUG9seWdvbjoge1xuICAgICAgICBub3J0aGVhc3Q6IFsnbGF0JywgJ2xuZyddLFxuICAgICAgICBzb3V0aHdlc3Q6IFsnbGF0JywgJ2xuZyddXG4gICAgICB9XG4gICAgICAqL1xuICAgICAgZWxzZSBpZih0eXBlb2YgdmFsID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIC8qanNoaW50IGxvb3BmdW5jOiB0cnVlICovXG4gICAgICAgIHZhciBwb2ludHMgPSBPYmplY3Qua2V5cyh2YWwpLm1hcChmdW5jdGlvbihrZXkpe1xuICAgICAgICAgIHZhciBvcmRlciA9IHZhbFtrZXldO1xuICAgICAgICAgIHZhciBuZXdJdGVtID0gaXRlbVtrZXldO1xuICAgICAgICAgIHJldHVybiBidWlsZEdlb20obmV3SXRlbSwge2dlb206eyBQb2ludDogb3JkZXJ9fSk7XG4gICAgICAgIH0pO1xuICAgICAgICBnZW9tLnR5cGUgPSBndHlwZTtcbiAgICAgICAgLypqc2hpbnQgbG9vcGZ1bmM6IHRydWUgKi9cbiAgICAgICAgZ2VvbS5jb29yZGluYXRlcyA9IFtdLmNvbmNhdChwb2ludHMubWFwKGZ1bmN0aW9uKHApe1xuICAgICAgICAgIHJldHVybiBwLmNvb3JkaW5hdGVzO1xuICAgICAgICB9KSk7XG4gICAgICB9XG5cbiAgICAgIC8vIEdlb21ldHJ5IHBhcmFtZXRlciBzcGVjaWZpZWQgYXM6IHtQb2ludDogWydsYXQnLCAnbG5nJ119XG4gICAgICBlbHNlIGlmKEFycmF5LmlzQXJyYXkodmFsKSAmJiBpdGVtLmhhc093blByb3BlcnR5KHZhbFswXSkgJiYgaXRlbS5oYXNPd25Qcm9wZXJ0eSh2YWxbMV0pKXtcbiAgICAgICAgZ2VvbS50eXBlID0gZ3R5cGU7XG4gICAgICAgIGdlb20uY29vcmRpbmF0ZXMgPSBbTnVtYmVyKGl0ZW1bdmFsWzFdXSksIE51bWJlcihpdGVtW3ZhbFswXV0pXTtcbiAgICAgIH1cblxuICAgICAgLy8gR2VvbWV0cnkgcGFyYW1ldGVyIHNwZWNpZmllZCBhczoge1BvaW50OiBbJ2NvbnRhaW5lci5sYXQnLCAnY29udGFpbmVyLmxuZyddfVxuICAgICAgZWxzZSBpZihBcnJheS5pc0FycmF5KHZhbCkgJiYgaXNOZXN0ZWQodmFsWzBdKSAmJiBpc05lc3RlZCh2YWxbMV0pKXtcbiAgICAgICAgdmFyIGNvb3JkaW5hdGVzID0gW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmFsLmxlbmd0aDsgaSsrKSB7XHQvLyBpLmUuIDAgYW5kIDFcbiAgICAgICAgICB2YXIgcGF0aHMgPSB2YWxbaV0uc3BsaXQoJy4nKTtcbiAgICAgICAgICB2YXIgaXRlbUNsb25lID0gaXRlbTtcbiAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHBhdGhzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgICBpZiAoIWl0ZW1DbG9uZS5oYXNPd25Qcm9wZXJ0eShwYXRoc1tqXSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaXRlbUNsb25lID0gaXRlbUNsb25lW3BhdGhzW2pdXTtcdC8vIEl0ZXJhdGUgZGVlcGVyIGludG8gdGhlIG9iamVjdFxuICAgICAgICAgIH1cbiAgICAgICAgICBjb29yZGluYXRlc1tpXSA9IGl0ZW1DbG9uZTtcbiAgICAgICAgfVxuICAgICAgICBnZW9tLnR5cGUgPSBndHlwZTtcbiAgICAgICAgZ2VvbS5jb29yZGluYXRlcyA9IFtOdW1iZXIoY29vcmRpbmF0ZXNbMV0pLCBOdW1iZXIoY29vcmRpbmF0ZXNbMF0pXTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpZihwYXJhbXMuZG9UaHJvd3MgJiYgcGFyYW1zLmRvVGhyb3dzLmludmFsaWRHZW9tZXRyeSAmJiAhR2VvSlNPTi5pc0dlb21ldHJ5VmFsaWQoZ2VvbSkpe1xuICAgICAgdGhyb3cgbmV3IEludmFsaWRHZW9tZXRyeUVycm9yKGl0ZW0sIHBhcmFtcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdlb207XG4gIH1cblxuICAvLyBSZXR1cm5zIHRoZSBmdW5jdGlvbiB0byBiZSB1c2VkIHRvXG4gIC8vIGJ1aWxkIHRoZSBwcm9wZXJ0aWVzIG9iamVjdCBmb3IgZWFjaCBmZWF0dXJlXG4gIGZ1bmN0aW9uIGdldFByb3BGdW5jdGlvbihwYXJhbXMpIHtcbiAgICB2YXIgZnVuYztcblxuICAgIGlmKCFwYXJhbXMuZXhjbHVkZSAmJiAhcGFyYW1zLmluY2x1ZGUpIHtcbiAgICAgIGZ1bmMgPSBmdW5jdGlvbihwcm9wZXJ0aWVzKSB7XG4gICAgICAgIGZvcih2YXIgYXR0ciBpbiB0aGlzKSB7XG4gICAgICAgICAgaWYodGhpcy5oYXNPd25Qcm9wZXJ0eShhdHRyKSAmJiAoZ2VvbUF0dHJzLmluZGV4T2YoYXR0cikgPT09IC0xKSkge1xuICAgICAgICAgICAgcHJvcGVydGllc1thdHRyXSA9IHRoaXNbYXR0cl07XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0gZWxzZSBpZihwYXJhbXMuaW5jbHVkZSkge1xuICAgICAgZnVuYyA9IGZ1bmN0aW9uKHByb3BlcnRpZXMpIHtcbiAgICAgICAgcGFyYW1zLmluY2x1ZGUuZm9yRWFjaChmdW5jdGlvbihhdHRyKXtcbiAgICAgICAgICBwcm9wZXJ0aWVzW2F0dHJdID0gdGhpc1thdHRyXTtcbiAgICAgICAgfSwgdGhpcyk7XG4gICAgICB9O1xuICAgIH0gZWxzZSBpZihwYXJhbXMuZXhjbHVkZSkge1xuICAgICAgZnVuYyA9IGZ1bmN0aW9uKHByb3BlcnRpZXMpIHtcbiAgICAgICAgZm9yKHZhciBhdHRyIGluIHRoaXMpIHtcbiAgICAgICAgICBpZih0aGlzLmhhc093blByb3BlcnR5KGF0dHIpICYmIChnZW9tQXR0cnMuaW5kZXhPZihhdHRyKSA9PT0gLTEpICYmIChwYXJhbXMuZXhjbHVkZS5pbmRleE9mKGF0dHIpID09PSAtMSkpIHtcbiAgICAgICAgICAgIHByb3BlcnRpZXNbYXR0cl0gPSB0aGlzW2F0dHJdO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgcHJvcGVydGllcyA9IHt9O1xuXG4gICAgICBmdW5jLmNhbGwodGhpcywgcHJvcGVydGllcyk7XG5cbiAgICAgIGlmKHBhcmFtcy5leHRyYSkgeyBhZGRFeHRyYShwcm9wZXJ0aWVzLCBwYXJhbXMuZXh0cmEpOyB9XG4gICAgICByZXR1cm4gcHJvcGVydGllcztcbiAgICB9O1xuICB9XG5cbiAgLy8gQWRkcyBkYXRhIGNvbnRhaW5lZCBpbiB0aGUgYGV4dHJhYFxuICAvLyBwYXJhbWV0ZXIgaWYgaXQgaGFzIGJlZW4gc3BlY2lmaWVkXG4gIGZ1bmN0aW9uIGFkZEV4dHJhKHByb3BlcnRpZXMsIGV4dHJhKSB7XG4gICAgZm9yKHZhciBrZXkgaW4gZXh0cmEpe1xuICAgICAgaWYoZXh0cmEuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBwcm9wZXJ0aWVzW2tleV0gPSBleHRyYVtrZXldO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBwcm9wZXJ0aWVzO1xuICB9XG5cbn0odHlwZW9mIG1vZHVsZSA9PSAnb2JqZWN0JyA/IG1vZHVsZS5leHBvcnRzIDogd2luZG93Lkdlb0pTT04gPSB7fSkpO1xuIiwibW9kdWxlLmV4cG9ydHMuUkFESVVTID0gNjM3ODEzNztcbm1vZHVsZS5leHBvcnRzLkZMQVRURU5JTkcgPSAxLzI5OC4yNTcyMjM1NjM7XG5tb2R1bGUuZXhwb3J0cy5QT0xBUl9SQURJVVMgPSA2MzU2NzUyLjMxNDI7XG4iLCJ2YXIgd2dzODQgPSByZXF1aXJlKCd3Z3M4NCcpO1xuXG5tb2R1bGUuZXhwb3J0cy5nZW9tZXRyeSA9IGdlb21ldHJ5O1xubW9kdWxlLmV4cG9ydHMucmluZyA9IHJpbmdBcmVhO1xuXG5mdW5jdGlvbiBnZW9tZXRyeShfKSB7XG4gICAgdmFyIGFyZWEgPSAwLCBpO1xuICAgIHN3aXRjaCAoXy50eXBlKSB7XG4gICAgICAgIGNhc2UgJ1BvbHlnb24nOlxuICAgICAgICAgICAgcmV0dXJuIHBvbHlnb25BcmVhKF8uY29vcmRpbmF0ZXMpO1xuICAgICAgICBjYXNlICdNdWx0aVBvbHlnb24nOlxuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IF8uY29vcmRpbmF0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBhcmVhICs9IHBvbHlnb25BcmVhKF8uY29vcmRpbmF0ZXNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFyZWE7XG4gICAgICAgIGNhc2UgJ1BvaW50JzpcbiAgICAgICAgY2FzZSAnTXVsdGlQb2ludCc6XG4gICAgICAgIGNhc2UgJ0xpbmVTdHJpbmcnOlxuICAgICAgICBjYXNlICdNdWx0aUxpbmVTdHJpbmcnOlxuICAgICAgICAgICAgcmV0dXJuIDA7XG4gICAgICAgIGNhc2UgJ0dlb21ldHJ5Q29sbGVjdGlvbic6XG4gICAgICAgICAgICBmb3IgKGkgPSAwOyBpIDwgXy5nZW9tZXRyaWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgYXJlYSArPSBnZW9tZXRyeShfLmdlb21ldHJpZXNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFyZWE7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBwb2x5Z29uQXJlYShjb29yZHMpIHtcbiAgICB2YXIgYXJlYSA9IDA7XG4gICAgaWYgKGNvb3JkcyAmJiBjb29yZHMubGVuZ3RoID4gMCkge1xuICAgICAgICBhcmVhICs9IE1hdGguYWJzKHJpbmdBcmVhKGNvb3Jkc1swXSkpO1xuICAgICAgICBmb3IgKHZhciBpID0gMTsgaSA8IGNvb3Jkcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgYXJlYSAtPSBNYXRoLmFicyhyaW5nQXJlYShjb29yZHNbaV0pKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gYXJlYTtcbn1cblxuLyoqXG4gKiBDYWxjdWxhdGUgdGhlIGFwcHJveGltYXRlIGFyZWEgb2YgdGhlIHBvbHlnb24gd2VyZSBpdCBwcm9qZWN0ZWQgb250b1xuICogICAgIHRoZSBlYXJ0aC4gIE5vdGUgdGhhdCB0aGlzIGFyZWEgd2lsbCBiZSBwb3NpdGl2ZSBpZiByaW5nIGlzIG9yaWVudGVkXG4gKiAgICAgY2xvY2t3aXNlLCBvdGhlcndpc2UgaXQgd2lsbCBiZSBuZWdhdGl2ZS5cbiAqXG4gKiBSZWZlcmVuY2U6XG4gKiBSb2JlcnQuIEcuIENoYW1iZXJsYWluIGFuZCBXaWxsaWFtIEguIER1cXVldHRlLCBcIlNvbWUgQWxnb3JpdGhtcyBmb3JcbiAqICAgICBQb2x5Z29ucyBvbiBhIFNwaGVyZVwiLCBKUEwgUHVibGljYXRpb24gMDctMDMsIEpldCBQcm9wdWxzaW9uXG4gKiAgICAgTGFib3JhdG9yeSwgUGFzYWRlbmEsIENBLCBKdW5lIDIwMDcgaHR0cDovL3Rycy1uZXcuanBsLm5hc2EuZ292L2RzcGFjZS9oYW5kbGUvMjAxNC80MDQwOVxuICpcbiAqIFJldHVybnM6XG4gKiB7ZmxvYXR9IFRoZSBhcHByb3hpbWF0ZSBzaWduZWQgZ2VvZGVzaWMgYXJlYSBvZiB0aGUgcG9seWdvbiBpbiBzcXVhcmVcbiAqICAgICBtZXRlcnMuXG4gKi9cblxuZnVuY3Rpb24gcmluZ0FyZWEoY29vcmRzKSB7XG4gICAgdmFyIHAxLCBwMiwgcDMsIGxvd2VySW5kZXgsIG1pZGRsZUluZGV4LCB1cHBlckluZGV4LCBpLFxuICAgIGFyZWEgPSAwLFxuICAgIGNvb3Jkc0xlbmd0aCA9IGNvb3Jkcy5sZW5ndGg7XG5cbiAgICBpZiAoY29vcmRzTGVuZ3RoID4gMikge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY29vcmRzTGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChpID09PSBjb29yZHNMZW5ndGggLSAyKSB7Ly8gaSA9IE4tMlxuICAgICAgICAgICAgICAgIGxvd2VySW5kZXggPSBjb29yZHNMZW5ndGggLSAyO1xuICAgICAgICAgICAgICAgIG1pZGRsZUluZGV4ID0gY29vcmRzTGVuZ3RoIC0xO1xuICAgICAgICAgICAgICAgIHVwcGVySW5kZXggPSAwO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpID09PSBjb29yZHNMZW5ndGggLSAxKSB7Ly8gaSA9IE4tMVxuICAgICAgICAgICAgICAgIGxvd2VySW5kZXggPSBjb29yZHNMZW5ndGggLSAxO1xuICAgICAgICAgICAgICAgIG1pZGRsZUluZGV4ID0gMDtcbiAgICAgICAgICAgICAgICB1cHBlckluZGV4ID0gMTtcbiAgICAgICAgICAgIH0gZWxzZSB7IC8vIGkgPSAwIHRvIE4tM1xuICAgICAgICAgICAgICAgIGxvd2VySW5kZXggPSBpO1xuICAgICAgICAgICAgICAgIG1pZGRsZUluZGV4ID0gaSsxO1xuICAgICAgICAgICAgICAgIHVwcGVySW5kZXggPSBpKzI7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwMSA9IGNvb3Jkc1tsb3dlckluZGV4XTtcbiAgICAgICAgICAgIHAyID0gY29vcmRzW21pZGRsZUluZGV4XTtcbiAgICAgICAgICAgIHAzID0gY29vcmRzW3VwcGVySW5kZXhdO1xuICAgICAgICAgICAgYXJlYSArPSAoIHJhZChwM1swXSkgLSByYWQocDFbMF0pICkgKiBNYXRoLnNpbiggcmFkKHAyWzFdKSk7XG4gICAgICAgIH1cblxuICAgICAgICBhcmVhID0gYXJlYSAqIHdnczg0LlJBRElVUyAqIHdnczg0LlJBRElVUyAvIDI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFyZWE7XG59XG5cbmZ1bmN0aW9uIHJhZChfKSB7XG4gICAgcmV0dXJuIF8gKiBNYXRoLlBJIC8gMTgwO1xufSIsInZhciBnZW9qc29uQXJlYSA9IHJlcXVpcmUoJ0BtYXBib3gvZ2VvanNvbi1hcmVhJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gcmV3aW5kO1xuXG5mdW5jdGlvbiByZXdpbmQoZ2osIG91dGVyKSB7XG4gICAgc3dpdGNoICgoZ2ogJiYgZ2oudHlwZSkgfHwgbnVsbCkge1xuICAgICAgICBjYXNlICdGZWF0dXJlQ29sbGVjdGlvbic6XG4gICAgICAgICAgICBnai5mZWF0dXJlcyA9IGdqLmZlYXR1cmVzLm1hcChjdXJyeU91dGVyKHJld2luZCwgb3V0ZXIpKTtcbiAgICAgICAgICAgIHJldHVybiBnajtcbiAgICAgICAgY2FzZSAnRmVhdHVyZSc6XG4gICAgICAgICAgICBnai5nZW9tZXRyeSA9IHJld2luZChnai5nZW9tZXRyeSwgb3V0ZXIpO1xuICAgICAgICAgICAgcmV0dXJuIGdqO1xuICAgICAgICBjYXNlICdQb2x5Z29uJzpcbiAgICAgICAgY2FzZSAnTXVsdGlQb2x5Z29uJzpcbiAgICAgICAgICAgIHJldHVybiBjb3JyZWN0KGdqLCBvdXRlcik7XG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICByZXR1cm4gZ2o7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBjdXJyeU91dGVyKGEsIGIpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24oXykgeyByZXR1cm4gYShfLCBiKTsgfTtcbn1cblxuZnVuY3Rpb24gY29ycmVjdChfLCBvdXRlcikge1xuICAgIGlmIChfLnR5cGUgPT09ICdQb2x5Z29uJykge1xuICAgICAgICBfLmNvb3JkaW5hdGVzID0gY29ycmVjdFJpbmdzKF8uY29vcmRpbmF0ZXMsIG91dGVyKTtcbiAgICB9IGVsc2UgaWYgKF8udHlwZSA9PT0gJ011bHRpUG9seWdvbicpIHtcbiAgICAgICAgXy5jb29yZGluYXRlcyA9IF8uY29vcmRpbmF0ZXMubWFwKGN1cnJ5T3V0ZXIoY29ycmVjdFJpbmdzLCBvdXRlcikpO1xuICAgIH1cbiAgICByZXR1cm4gXztcbn1cblxuZnVuY3Rpb24gY29ycmVjdFJpbmdzKF8sIG91dGVyKSB7XG4gICAgb3V0ZXIgPSAhIW91dGVyO1xuICAgIF9bMF0gPSB3aW5kKF9bMF0sIG91dGVyKTtcbiAgICBmb3IgKHZhciBpID0gMTsgaSA8IF8ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgX1tpXSA9IHdpbmQoX1tpXSwgIW91dGVyKTtcbiAgICB9XG4gICAgcmV0dXJuIF87XG59XG5cbmZ1bmN0aW9uIHdpbmQoXywgZGlyKSB7XG4gICAgcmV0dXJuIGN3KF8pID09PSBkaXIgPyBfIDogXy5yZXZlcnNlKCk7XG59XG5cbmZ1bmN0aW9uIGN3KF8pIHtcbiAgICByZXR1cm4gZ2VvanNvbkFyZWEucmluZyhfKSA+PSAwO1xufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pbXBvcnQgVnVlIGZyb20gJ3Z1ZS9kaXN0L3Z1ZS5lc20uYnJvd3Nlcic7XG5pbXBvcnQgTWFwQ29tcG9uZW50IGZyb20gJy4vbWFwcy52dWUnOyAvLyBPdXIgY29tcG9uZW50XG5pbXBvcnQgTWFwRGF0YSBmcm9tICcuL21hcC5kYXRhJzsgLy8gT3VyIHNhbXBsZSBkYXRhXG5pbXBvcnQgaHR0cHMgZnJvbSAnaHR0cHMnO1xuaW1wb3J0IEdlb0pTT04gZnJvbSAnZ2VvanNvbic7XG5pbXBvcnQgcmV3aW5kIGZyb20gJ2dlb2pzb24tcmV3aW5kJztcblxuY2xhc3MgTWFwIHtcbiAgY29uc3RydWN0b3Ioc2V0dGluZ3MgPSB7fSwgZGF0YSA9IHt9KSB7XG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB0aGlzLnNldHRpbmdzID0gc2V0dGluZ3M7XG4gICAgdGhpcy5pbml0KCk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdGhlIG1vZHVsZVxuICAgKi9cbiAgaW5pdCgpIHtcbiAgICBWdWUuY29tcG9uZW50KCdueWNvLW1hcCcsIE1hcENvbXBvbmVudCk7XG5cbiAgICBuZXcgVnVlKHtcbiAgICAgIGVsOiAnW2RhdGEtanM9XCJtYXBcIl0nLFxuICAgICAgZGVsaW1pdGVyczogWyd2eycsICd9J10sXG4gICAgICBkYXRhKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGRhdGE6IE1hcERhdGEuZGF0YSxcbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGNyZWF0ZWQoKSB7XG4gICAgICAgIHRoaXMuZ2V0Qm9yb3VnaERhdGEoKTtcbiAgICAgICAgdGhpcy5nZXROZWlnaGJvcmhvb2REYXRhKCk7XG4gICAgICB9LFxuICAgICAgbWV0aG9kczoge1xuICAgICAgICBnZXRCb3JvdWdoRGF0YSgpIHtcbiAgICAgICAgICBodHRwcy5nZXQoJ2h0dHBzOi8vZGF0YS5jaXR5b2ZuZXd5b3JrLnVzL3Jlc291cmNlLzd0M2IteXd2dy5qc29uJywgKHJlc3ApID0+IHtcbiAgICAgICAgICAgIGxldCBkYXRhID0gJyc7XG5cbiAgICAgICAgICAgIHJlc3Aub24oJ2RhdGEnLCAoY2h1bmspID0+IHtcbiAgICAgICAgICAgICAgZGF0YSArPSBjaHVuaztcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICByZXNwLm9uKCdlbmQnLCAoKSA9PiB7XG4gICAgICAgICAgICAgIGRhdGEgPSBKU09OLnBhcnNlKGRhdGEpO1xuXG4gICAgICAgICAgICAgIE1hcERhdGEuZGF0YS5ib3JvdWdocyA9IHRoaXMuY29udmVydFRvR2VvSlNPTihkYXRhKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pLm9uKCdlcnJvcicsIChlcnIpID0+IHtcbiAgICAgICAgICAgIE1hcERhdGEuZGF0YS5ib3JvdWdocyA9IHtcbiAgICAgICAgICAgICAgZXJyb3I6IHRydWUsXG4gICAgICAgICAgICAgIG1lc3NhZ2U6IGVyci5tZXNzYWdlXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBnZXROZWlnaGJvcmhvb2REYXRhKCkge1xuICAgICAgICAgIGh0dHBzLmdldCgnaHR0cHM6Ly9kYXRhLmNpdHlvZm5ld3lvcmsudXMvcmVzb3VyY2UvcTJ6NS1haTM4Lmpzb24nLCAocmVzcCkgPT4ge1xuICAgICAgICAgICAgbGV0IGRhdGEgPSAnJztcblxuICAgICAgICAgICAgcmVzcC5vbignZGF0YScsIChjaHVuaykgPT4ge1xuICAgICAgICAgICAgICBkYXRhICs9IGNodW5rO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIHJlc3Aub24oJ2VuZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgZGF0YSA9IEpTT04ucGFyc2UoZGF0YSk7XG5cbiAgICAgICAgICAgICAgTWFwRGF0YS5kYXRhLm5laWdoYm9yaG9vZHMgPSB0aGlzLmNvbnZlcnRUb0dlb0pTT04oZGF0YSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9KS5vbignZXJyb3InLCAoZXJyKSA9PiB7XG4gICAgICAgICAgICBNYXBEYXRhLmRhdGEubmVpZ2hib3Job29kcyA9IHtcbiAgICAgICAgICAgICAgZXJyb3I6IHRydWUsXG4gICAgICAgICAgICAgIG1lc3NhZ2U6IGVyci5tZXNzYWdlXG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgICBjb252ZXJ0VG9HZW9KU09OKGpzb25EYXRhKSB7XG4gICAgICAgICAgLy8gZW5zdXJlIGdlb2pzb24gc2F0aXNmaWVzIHJpZ2h0LWhhbmQgcnVsZVxuICAgICAgICAgIGNvbnN0IGRhdGEgPSByZXdpbmQoR2VvSlNPTi5wYXJzZShqc29uRGF0YSwge0dlb0pTT046ICd0aGVfZ2VvbSd9KSk7XG5cbiAgICAgICAgICByZXR1cm4gZGF0YTtcbiAgICAgICAgfSxcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBMb2dzIGNvbnN0YW50cyB0byB0aGUgZGVidWdnZXJcbiAgICogQHBhcmFtICB7b2JqZWN0fSBwYXJhbSAtIG91ciBjb25zdGFudHNcbiAgICovXG4gIF9jb25zdGFudHMocGFyYW0pIHtcbiAgICBjb25zb2xlLmRpcihwYXJhbSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgTWFwOyIsIid1c2Ugc3RyaWN0JztcblxuaW1wb3J0IEljb25zIGZyb20gJy4uL2VsZW1lbnRzL2ljb25zL0ljb25zJztcbmltcG9ydCBGZWVkIGZyb20gJy4uL29iamVjdHMvZmVlZC9GZWVkJztcbmltcG9ydCBUb2dnbGUgZnJvbSAnLi4vdXRpbGl0aWVzL3RvZ2dsZS9Ub2dnbGUnO1xuaW1wb3J0IFRyYWNrIGZyb20gJy4uL3V0aWxpdGllcy90cmFjay9UcmFjayc7XG5pbXBvcnQgU2VsZWN0IGZyb20gJy4uL2VsZW1lbnRzL3NlbGVjdC9zZWxlY3QnO1xuaW1wb3J0IENoYXJ0QmFyIGZyb20gJy4uL29iamVjdHMvY2hhcnRzL2NoYXJ0LS1iYXInO1xuaW1wb3J0IENoYXJ0SG9yaXpvbnRhbEJhciBmcm9tICcuLi9vYmplY3RzL2NoYXJ0cy9jaGFydC0taG9yaXpvbnRhbC1iYXInO1xuaW1wb3J0IENoYXJ0TGluZSBmcm9tICcuLi9vYmplY3RzL2NoYXJ0cy9jaGFydC0tbGluZSc7XG5pbXBvcnQgQ2hhcnRQaWUgZnJvbSAnLi4vb2JqZWN0cy9jaGFydHMvY2hhcnQtLXBpZSc7XG5cbmltcG9ydCBNYXAgZnJvbSAnLi4vb2JqZWN0cy9tYXBzL01hcHMnO1xuLyoqIGltcG9ydCBtb2R1bGVzIGhlcmUgYXMgdGhleSBhcmUgd3JpdHRlbiAqL1xuXG4vKipcbiAqIE1ldGhvZHMgZm9yIHRoZSBnbG9iYWwgTnljb1BhdHRlcm5zIGluc3RhbmNlXG4gKi9cbmNsYXNzIG55Y28ge1xuICAvKipcbiAgICogTWV0aG9kIGZvciB0aGUgSWNvbnMgRWxlbWVudFxuICAgKiBAcGFyYW0gIHtTdHJpbmd9IHBhdGggIFRoZSBwYXRoIG9mIHRoZSBpY29uIGZpbGVcbiAgICogQHJldHVybiB7T2JqZWN0fSAgICAgICBJY29ucyBpbnN0YW5jZVxuICAgKi9cbiAgaWNvbnMocGF0aCkge1xuICAgIHJldHVybiBuZXcgSWNvbnMocGF0aCk7XG4gIH1cblxuICAvKipcbiAgICogTWV0aG9kIGZvciB0aGUgRmVlZCBPYmplY3RcbiAgICogQHBhcmFtICAge09iamVjdH0gIHNldHRpbmdzICBTZXR0aW5nIGZvciB0aGUgZmVlZFxuICAgKiBAcmV0dXJuICB7T2JqZWN0fSAgICAgICAgICAgIEZlZWQgaW5zdGFuY2VcbiAgICovXG4gIGZlZWQoc2V0dGluZ3MpIHtcbiAgICByZXR1cm4gbmV3IEZlZWQoc2V0dGluZ3MpO1xuICB9XG5cbiAgLyoqXG4gICAqIE1ldGhvZCBmb3IgdGhlIFRvZ2dsZSBVdGlsaXR5XG4gICAqIEByZXR1cm4gIHtPYmplY3R9IFRvZ2dsZSBpbnN0YW5jZVxuICAgKi9cbiAgdG9nZ2xlKHNldHRpbmdzKSB7XG4gICAgcmV0dXJuIG5ldyBUb2dnbGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNZXRob2QgZm9yIHRoZSBUcmFjayBNb2R1bGVcbiAgICogQHJldHVybiAge09iamVjdH0gVHJhY2sgTW9kdWxlXG4gICAqL1xuICB0cmFjayhzZXR0aW5ncykge1xuICAgIHJldHVybiBuZXcgVHJhY2soKTtcbiAgfVxuXG4gIHNlbGVjdCgpIHtcbiAgICByZXR1cm4gbmV3IFNlbGVjdCgpO1xuICB9XG4gIC8qKlxuICAgKiBNZXRob2QgZm9yIHRoZSBDaGFydCBPYmplY3RzXG4gICAqIEByZXR1cm4gIHtPYmplY3R9IENoYXJ0IGluc3RhbmNlXG4gICAqL1xuICBjaGFydCh0eXBlKSB7XG4gICAgaWYgKHR5cGUgPT09ICdiYXInKVxuICAgICAgcmV0dXJuIG5ldyBDaGFydEJhcigpO1xuXG4gICAgaWYgKHR5cGUgPT09ICdob3Jpem9udGFsQmFyJylcbiAgICAgIHJldHVybiBuZXcgQ2hhcnRIb3Jpem9udGFsQmFyKCk7XG5cbiAgICBpZiAodHlwZSA9PT0gJ2xpbmUnKVxuICAgICAgcmV0dXJuIG5ldyBDaGFydExpbmUoKTtcblxuICAgIGlmICh0eXBlID09PSAncGllJylcbiAgICAgIHJldHVybiBuZXcgQ2hhcnRQaWUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBNZXRob2QgZm9yIHRoZSBNYXAgTW9kdWxlXG4gICAqIEByZXR1cm4gIHtPYmplY3R9IE1hcCBNb2R1bGVcbiAgICovXG4gIG1hcCgpIHtcbiAgICByZXR1cm4gbmV3IE1hcCgpO1xuICB9XG5cbiAgLyoqIGFkZCBBUElzIGhlcmUgYXMgdGhleSBhcmUgd3JpdHRlbiAqL1xufVxuXG5leHBvcnQgZGVmYXVsdCBueWNvO1xuIl0sIm5hbWVzIjpbIlV0aWxpdHkiLCJ0aGlzIiwiZGVidWciLCJnZXRVcmxQYXJhbWV0ZXIiLCJQQVJBTVMiLCJERUJVRyIsIm5hbWUiLCJxdWVyeVN0cmluZyIsInF1ZXJ5Iiwid2luZG93IiwibG9jYXRpb24iLCJzZWFyY2giLCJwYXJhbSIsInJlcGxhY2UiLCJyZXN1bHRzIiwiUmVnRXhwIiwiZXhlYyIsImRlY29kZVVSSUNvbXBvbmVudCIsImxvY2FsaXplIiwic2x1ZyIsInRleHQiLCJtYXRjaCIsIkxPQ0FMSVpFRF9TVFJJTkdTIiwiZmlsdGVyIiwicyIsImhhc093blByb3BlcnR5IiwibGFiZWwiLCJTRUxFQ1RPUlMiLCJJY29ucyIsInBhdGgiLCJ0aGVuIiwicmVzcG9uc2UiLCJvayIsImRpciIsImNhdGNoIiwiZXJyb3IiLCJkYXRhIiwic3ByaXRlIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiaW5uZXJIVE1MIiwic2V0QXR0cmlidXRlIiwiYm9keSIsImFwcGVuZENoaWxkIiwiZ2xvYmFsIiwic2VsZiIsImZyZWVHbG9iYWwiLCJPYmplY3QiLCJmcmVlU2VsZiIsInJvb3QiLCJGdW5jdGlvbiIsIlN5bWJvbCIsIm9iamVjdFByb3RvIiwicHJvdG90eXBlIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJ0b1N0cmluZyIsInN5bVRvU3RyaW5nVGFnIiwidG9TdHJpbmdUYWciLCJ1bmRlZmluZWQiLCJnZXRSYXdUYWciLCJ2YWx1ZSIsImlzT3duIiwiY2FsbCIsInRhZyIsInVubWFza2VkIiwiZSIsInJlc3VsdCIsIm9iamVjdFRvU3RyaW5nIiwibnVsbFRhZyIsInVuZGVmaW5lZFRhZyIsImJhc2VHZXRUYWciLCJpc09iamVjdCIsInR5cGUiLCJhc3luY1RhZyIsImZ1bmNUYWciLCJnZW5UYWciLCJwcm94eVRhZyIsImlzRnVuY3Rpb24iLCJjb3JlSnNEYXRhIiwibWFza1NyY0tleSIsInVpZCIsImtleXMiLCJJRV9QUk9UTyIsImlzTWFza2VkIiwiZnVuYyIsImZ1bmNQcm90byIsImZ1bmNUb1N0cmluZyIsInRvU291cmNlIiwicmVSZWdFeHBDaGFyIiwicmVJc0hvc3RDdG9yIiwicmVJc05hdGl2ZSIsImJhc2VJc05hdGl2ZSIsInRlc3QiLCJnZXRWYWx1ZSIsIm9iamVjdCIsImtleSIsImdldE5hdGl2ZSIsImRlZmluZVByb3BlcnR5IiwiYmFzZUFzc2lnblZhbHVlIiwiZXEiLCJvdGhlciIsImFzc2lnblZhbHVlIiwib2JqVmFsdWUiLCJjb3B5T2JqZWN0Iiwic291cmNlIiwicHJvcHMiLCJjdXN0b21pemVyIiwiaXNOZXciLCJpbmRleCIsImxlbmd0aCIsIm5ld1ZhbHVlIiwiaWRlbnRpdHkiLCJhcHBseSIsInRoaXNBcmciLCJhcmdzIiwibmF0aXZlTWF4IiwiTWF0aCIsIm1heCIsIm92ZXJSZXN0Iiwic3RhcnQiLCJ0cmFuc2Zvcm0iLCJhcmd1bWVudHMiLCJhcnJheSIsIkFycmF5Iiwib3RoZXJBcmdzIiwiY29uc3RhbnQiLCJiYXNlU2V0VG9TdHJpbmciLCJzdHJpbmciLCJIT1RfQ09VTlQiLCJIT1RfU1BBTiIsIm5hdGl2ZU5vdyIsIkRhdGUiLCJub3ciLCJzaG9ydE91dCIsImNvdW50IiwibGFzdENhbGxlZCIsInN0YW1wIiwicmVtYWluaW5nIiwic2V0VG9TdHJpbmciLCJiYXNlUmVzdCIsIk1BWF9TQUZFX0lOVEVHRVIiLCJpc0xlbmd0aCIsImlzQXJyYXlMaWtlIiwicmVJc1VpbnQiLCJpc0luZGV4IiwiaXNJdGVyYXRlZUNhbGwiLCJjcmVhdGVBc3NpZ25lciIsImFzc2lnbmVyIiwic291cmNlcyIsImd1YXJkIiwiYmFzZVRpbWVzIiwibiIsIml0ZXJhdGVlIiwiaXNPYmplY3RMaWtlIiwiYXJnc1RhZyIsImJhc2VJc0FyZ3VtZW50cyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiaXNBcmd1bWVudHMiLCJpc0FycmF5Iiwic3R1YkZhbHNlIiwiZnJlZUV4cG9ydHMiLCJleHBvcnRzIiwibm9kZVR5cGUiLCJmcmVlTW9kdWxlIiwibW9kdWxlIiwibW9kdWxlRXhwb3J0cyIsIkJ1ZmZlciIsIm5hdGl2ZUlzQnVmZmVyIiwiaXNCdWZmZXIiLCJhcnJheVRhZyIsImJvb2xUYWciLCJkYXRlVGFnIiwiZXJyb3JUYWciLCJtYXBUYWciLCJudW1iZXJUYWciLCJvYmplY3RUYWciLCJyZWdleHBUYWciLCJzZXRUYWciLCJzdHJpbmdUYWciLCJ3ZWFrTWFwVGFnIiwiYXJyYXlCdWZmZXJUYWciLCJkYXRhVmlld1RhZyIsImZsb2F0MzJUYWciLCJmbG9hdDY0VGFnIiwiaW50OFRhZyIsImludDE2VGFnIiwiaW50MzJUYWciLCJ1aW50OFRhZyIsInVpbnQ4Q2xhbXBlZFRhZyIsInVpbnQxNlRhZyIsInVpbnQzMlRhZyIsInR5cGVkQXJyYXlUYWdzIiwiYmFzZUlzVHlwZWRBcnJheSIsImJhc2VVbmFyeSIsImZyZWVQcm9jZXNzIiwicHJvY2VzcyIsIm5vZGVVdGlsIiwidHlwZXMiLCJyZXF1aXJlIiwiYmluZGluZyIsIm5vZGVJc1R5cGVkQXJyYXkiLCJpc1R5cGVkQXJyYXkiLCJhcnJheUxpa2VLZXlzIiwiaW5oZXJpdGVkIiwiaXNBcnIiLCJpc0FyZyIsImlzQnVmZiIsImlzVHlwZSIsInNraXBJbmRleGVzIiwiU3RyaW5nIiwicHVzaCIsImlzUHJvdG90eXBlIiwiQ3RvciIsImNvbnN0cnVjdG9yIiwibmF0aXZlS2V5c0luIiwiYmFzZUtleXNJbiIsImlzUHJvdG8iLCJrZXlzSW4iLCJhc3NpZ25JbldpdGgiLCJzcmNJbmRleCIsIm92ZXJBcmciLCJhcmciLCJnZXRQcm90b3R5cGUiLCJnZXRQcm90b3R5cGVPZiIsIm9iamVjdEN0b3JTdHJpbmciLCJpc1BsYWluT2JqZWN0IiwicHJvdG8iLCJkb21FeGNUYWciLCJpc0Vycm9yIiwibWVzc2FnZSIsImF0dGVtcHQiLCJFcnJvciIsImFycmF5TWFwIiwiYmFzZVZhbHVlcyIsImN1c3RvbURlZmF1bHRzQXNzaWduSW4iLCJzcmNWYWx1ZSIsInN0cmluZ0VzY2FwZXMiLCJlc2NhcGVTdHJpbmdDaGFyIiwiY2hyIiwibmF0aXZlS2V5cyIsImJhc2VLZXlzIiwicmVJbnRlcnBvbGF0ZSIsImJhc2VQcm9wZXJ0eU9mIiwiaHRtbEVzY2FwZXMiLCJlc2NhcGVIdG1sQ2hhciIsInN5bWJvbFRhZyIsImlzU3ltYm9sIiwiSU5GSU5JVFkiLCJzeW1ib2xQcm90byIsInN5bWJvbFRvU3RyaW5nIiwiYmFzZVRvU3RyaW5nIiwicmVVbmVzY2FwZWRIdG1sIiwicmVIYXNVbmVzY2FwZWRIdG1sIiwiZXNjYXBlIiwicmVFc2NhcGUiLCJyZUV2YWx1YXRlIiwidGVtcGxhdGVTZXR0aW5ncyIsInJlRW1wdHlTdHJpbmdMZWFkaW5nIiwicmVFbXB0eVN0cmluZ01pZGRsZSIsInJlRW1wdHlTdHJpbmdUcmFpbGluZyIsInJlRXNUZW1wbGF0ZSIsInJlTm9NYXRjaCIsInJlVW5lc2NhcGVkU3RyaW5nIiwidGVtcGxhdGUiLCJvcHRpb25zIiwic2V0dGluZ3MiLCJpbXBvcnRzIiwiXyIsImlzRXNjYXBpbmciLCJpc0V2YWx1YXRpbmciLCJpbXBvcnRzS2V5cyIsImltcG9ydHNWYWx1ZXMiLCJpbnRlcnBvbGF0ZSIsInJlRGVsaW1pdGVycyIsImV2YWx1YXRlIiwic291cmNlVVJMIiwiZXNjYXBlVmFsdWUiLCJpbnRlcnBvbGF0ZVZhbHVlIiwiZXNUZW1wbGF0ZVZhbHVlIiwiZXZhbHVhdGVWYWx1ZSIsIm9mZnNldCIsInNsaWNlIiwidmFyaWFibGUiLCJhcnJheUVhY2giLCJjcmVhdGVCYXNlRm9yIiwiZnJvbVJpZ2h0Iiwia2V5c0Z1bmMiLCJpdGVyYWJsZSIsImJhc2VGb3IiLCJiYXNlRm9yT3duIiwiY3JlYXRlQmFzZUVhY2giLCJlYWNoRnVuYyIsImNvbGxlY3Rpb24iLCJiYXNlRWFjaCIsImNhc3RGdW5jdGlvbiIsImZvckVhY2giLCJsaXN0Q2FjaGVDbGVhciIsIl9fZGF0YV9fIiwic2l6ZSIsImFzc29jSW5kZXhPZiIsImFycmF5UHJvdG8iLCJzcGxpY2UiLCJsaXN0Q2FjaGVEZWxldGUiLCJwb3AiLCJsaXN0Q2FjaGVHZXQiLCJsaXN0Q2FjaGVIYXMiLCJsaXN0Q2FjaGVTZXQiLCJMaXN0Q2FjaGUiLCJlbnRyaWVzIiwiY2xlYXIiLCJlbnRyeSIsInNldCIsInN0YWNrQ2xlYXIiLCJzdGFja0RlbGV0ZSIsInN0YWNrR2V0IiwiZ2V0Iiwic3RhY2tIYXMiLCJoYXMiLCJNYXAiLCJuYXRpdmVDcmVhdGUiLCJoYXNoQ2xlYXIiLCJoYXNoRGVsZXRlIiwiSEFTSF9VTkRFRklORUQiLCJoYXNoR2V0IiwiaGFzaEhhcyIsImhhc2hTZXQiLCJIYXNoIiwibWFwQ2FjaGVDbGVhciIsImlzS2V5YWJsZSIsImdldE1hcERhdGEiLCJtYXAiLCJtYXBDYWNoZURlbGV0ZSIsIm1hcENhY2hlR2V0IiwibWFwQ2FjaGVIYXMiLCJtYXBDYWNoZVNldCIsIk1hcENhY2hlIiwiTEFSR0VfQVJSQVlfU0laRSIsInN0YWNrU2V0IiwicGFpcnMiLCJTdGFjayIsImFzc2lnbk1lcmdlVmFsdWUiLCJhbGxvY1Vuc2FmZSIsImNsb25lQnVmZmVyIiwiYnVmZmVyIiwiaXNEZWVwIiwiY29weSIsIlVpbnQ4QXJyYXkiLCJjbG9uZUFycmF5QnVmZmVyIiwiYXJyYXlCdWZmZXIiLCJieXRlTGVuZ3RoIiwiY2xvbmVUeXBlZEFycmF5IiwidHlwZWRBcnJheSIsImJ5dGVPZmZzZXQiLCJjb3B5QXJyYXkiLCJvYmplY3RDcmVhdGUiLCJjcmVhdGUiLCJiYXNlQ3JlYXRlIiwiaW5pdENsb25lT2JqZWN0IiwiaXNBcnJheUxpa2VPYmplY3QiLCJzYWZlR2V0IiwidG9QbGFpbk9iamVjdCIsImJhc2VNZXJnZURlZXAiLCJtZXJnZUZ1bmMiLCJzdGFjayIsInN0YWNrZWQiLCJpc0NvbW1vbiIsImlzVHlwZWQiLCJiYXNlTWVyZ2UiLCJtZXJnZSIsInZhbHVlcyIsInNldENhY2hlQWRkIiwic2V0Q2FjaGVIYXMiLCJTZXRDYWNoZSIsImFkZCIsImFycmF5U29tZSIsInByZWRpY2F0ZSIsImNhY2hlSGFzIiwiY2FjaGUiLCJDT01QQVJFX1BBUlRJQUxfRkxBRyIsIkNPTVBBUkVfVU5PUkRFUkVEX0ZMQUciLCJlcXVhbEFycmF5cyIsImJpdG1hc2siLCJlcXVhbEZ1bmMiLCJpc1BhcnRpYWwiLCJhcnJMZW5ndGgiLCJvdGhMZW5ndGgiLCJzZWVuIiwiYXJyVmFsdWUiLCJvdGhWYWx1ZSIsImNvbXBhcmVkIiwib3RoSW5kZXgiLCJtYXBUb0FycmF5Iiwic2V0VG9BcnJheSIsInN5bWJvbFZhbHVlT2YiLCJ2YWx1ZU9mIiwiZXF1YWxCeVRhZyIsImNvbnZlcnQiLCJhcnJheVB1c2giLCJiYXNlR2V0QWxsS2V5cyIsInN5bWJvbHNGdW5jIiwiYXJyYXlGaWx0ZXIiLCJyZXNJbmRleCIsInN0dWJBcnJheSIsIm5hdGl2ZUdldFN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRTeW1ib2xzIiwic3ltYm9sIiwiZ2V0QWxsS2V5cyIsImVxdWFsT2JqZWN0cyIsIm9ialByb3BzIiwib2JqTGVuZ3RoIiwic2tpcEN0b3IiLCJvYmpDdG9yIiwib3RoQ3RvciIsIkRhdGFWaWV3IiwiUHJvbWlzZSIsIlNldCIsIldlYWtNYXAiLCJwcm9taXNlVGFnIiwiZGF0YVZpZXdDdG9yU3RyaW5nIiwibWFwQ3RvclN0cmluZyIsInByb21pc2VDdG9yU3RyaW5nIiwic2V0Q3RvclN0cmluZyIsIndlYWtNYXBDdG9yU3RyaW5nIiwiZ2V0VGFnIiwiQXJyYXlCdWZmZXIiLCJyZXNvbHZlIiwiY3RvclN0cmluZyIsImJhc2VJc0VxdWFsRGVlcCIsIm9iaklzQXJyIiwib3RoSXNBcnIiLCJvYmpUYWciLCJvdGhUYWciLCJvYmpJc09iaiIsIm90aElzT2JqIiwiaXNTYW1lVGFnIiwib2JqSXNXcmFwcGVkIiwib3RoSXNXcmFwcGVkIiwib2JqVW53cmFwcGVkIiwib3RoVW53cmFwcGVkIiwiYmFzZUlzRXF1YWwiLCJiYXNlSXNNYXRjaCIsIm1hdGNoRGF0YSIsIm5vQ3VzdG9taXplciIsImlzU3RyaWN0Q29tcGFyYWJsZSIsImdldE1hdGNoRGF0YSIsIm1hdGNoZXNTdHJpY3RDb21wYXJhYmxlIiwiYmFzZU1hdGNoZXMiLCJyZUlzRGVlcFByb3AiLCJyZUlzUGxhaW5Qcm9wIiwiaXNLZXkiLCJGVU5DX0VSUk9SX1RFWFQiLCJtZW1vaXplIiwicmVzb2x2ZXIiLCJUeXBlRXJyb3IiLCJtZW1vaXplZCIsIkNhY2hlIiwiTUFYX01FTU9JWkVfU0laRSIsIm1lbW9pemVDYXBwZWQiLCJyZVByb3BOYW1lIiwicmVFc2NhcGVDaGFyIiwic3RyaW5nVG9QYXRoIiwiY2hhckNvZGVBdCIsIm51bWJlciIsInF1b3RlIiwic3ViU3RyaW5nIiwiY2FzdFBhdGgiLCJ0b0tleSIsImJhc2VHZXQiLCJkZWZhdWx0VmFsdWUiLCJiYXNlSGFzSW4iLCJoYXNQYXRoIiwiaGFzRnVuYyIsImhhc0luIiwiYmFzZU1hdGNoZXNQcm9wZXJ0eSIsImJhc2VQcm9wZXJ0eSIsImJhc2VQcm9wZXJ0eURlZXAiLCJwcm9wZXJ0eSIsImJhc2VJdGVyYXRlZSIsImJhc2VNYXAiLCJiYXNlU29ydEJ5IiwiY29tcGFyZXIiLCJzb3J0IiwiY29tcGFyZUFzY2VuZGluZyIsInZhbElzRGVmaW5lZCIsInZhbElzTnVsbCIsInZhbElzUmVmbGV4aXZlIiwidmFsSXNTeW1ib2wiLCJvdGhJc0RlZmluZWQiLCJvdGhJc051bGwiLCJvdGhJc1JlZmxleGl2ZSIsIm90aElzU3ltYm9sIiwiY29tcGFyZU11bHRpcGxlIiwib3JkZXJzIiwib2JqQ3JpdGVyaWEiLCJjcml0ZXJpYSIsIm90aENyaXRlcmlhIiwib3JkZXJzTGVuZ3RoIiwiYmFzZU9yZGVyQnkiLCJpdGVyYXRlZXMiLCJvcmRlckJ5Iiwibm9vcCIsImNyZWF0ZVNldCIsIkZlZWQiLCJjb25maWciLCJkZWZhdWx0IiwiX3NldHRpbmdzIiwiX21lcmdlIiwiaW5pdCIsImZlZWQiLCJyc3NUb0pzb24iLCJyc3NVcmwiLCJ1cmwiLCJfcmVxdWVzdCIsIl9wcm9jZXNzIiwiSlNPTiIsInBhcnNlIiwiY29tcGlsZWQiLCJfcmVuZGVyIiwidGhpcyQxIiwiZWwiLCJxdWVyeVNlbGVjdG9yIiwic2VsZWN0b3IiLCJyZWplY3QiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsImV2ZW50IiwiX3hociIsInRhcmdldCIsInJlYWR5U3RhdGUiLCJzdGF0dXMiLCJvbnRpbWVvdXQiLCJvcGVuIiwic2VuZCIsImxvZyIsIl90ZW1wbGF0ZSIsIl92YWx1ZXMiLCJ0ZW1wbGF0ZXMiLCJqb2luIiwiX2ZvckVhY2giLCJwb3N0RXhjZXJwdExlbmd0aCIsIml0ZW1zIiwicG9zdCIsImRhdGUiLCJleGNlcnB0IiwiZGVzY3JpcHRpb24iLCJzdWJzdHIiLCJtaW4iLCJsYXN0SW5kZXhPZiIsInB1YkRhdGUiLCJ0b0xvY2FsZURhdGVTdHJpbmciLCJwb3N0RGF0ZUxvY2FsIiwicG9zdERhdGVGb3JtYXQiLCJtZXJnZWQiLCJjb25jYXQiLCJfb3JkZXJCeSIsIm1lZGl1bSIsIm9wZW5lciIsImhlYWRlciIsInBvc3RzIiwiY2xvc2VyIiwiVG9nZ2xlIiwibmFtZXNwYWNlIiwiaW5hY3RpdmVDbGFzcyIsImFjdGl2ZUNsYXNzIiwiYWRkRXZlbnRMaXN0ZW5lciIsIm1hdGNoZXMiLCJwcmV2ZW50RGVmYXVsdCIsIl90b2dnbGUiLCJnZXRBdHRyaWJ1dGUiLCJlbGVtZW50VG9nZ2xlIiwiZGF0YXNldCIsInVuZG8iLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiY2xhc3NMaXN0IiwidG9nZ2xlIiwibGV0IiwiaSIsImVsQXJpYVJvbGVzIiwidGFyZ2V0QXJpYVJvbGVzIiwiY29udGFpbnMiLCJoYXNoIiwiVHJhY2siLCJ0cmFja0tleSIsInRyYWNrRGF0YSIsImNsaWNrIiwiZCIsInBhdGhuYW1lIiwid3QiLCJ3ZWJ0cmVuZHMiLCJnYSIsImd0YWciLCJ2aWV3IiwiYXBwIiwiZ3RhZ1ZpZXciLCJhc3NpZ24iLCJ3dGQiLCJhcmdzYSIsImZsYXRNYXAiLCJrIiwiV2VidHJlbmRzIiwibXVsdGlUcmFjayIsInVyaSIsImZpbmQiLCJlbGVtZW50IiwiY29uc3QiLCJlbXB0eU9iamVjdCIsImZyZWV6ZSIsImlzVW5kZWYiLCJ2IiwiaXNEZWYiLCJpc1RydWUiLCJpc0ZhbHNlIiwiaXNQcmltaXRpdmUiLCJvYmoiLCJfdG9TdHJpbmciLCJ0b1Jhd1R5cGUiLCJpc1JlZ0V4cCIsImlzVmFsaWRBcnJheUluZGV4IiwidmFsIiwicGFyc2VGbG9hdCIsImZsb29yIiwiaXNGaW5pdGUiLCJpc1Byb21pc2UiLCJzdHJpbmdpZnkiLCJ0b051bWJlciIsImlzTmFOIiwibWFrZU1hcCIsInN0ciIsImV4cGVjdHNMb3dlckNhc2UiLCJsaXN0Iiwic3BsaXQiLCJ0b0xvd2VyQ2FzZSIsImlzQnVpbHRJblRhZyIsImlzUmVzZXJ2ZWRBdHRyaWJ1dGUiLCJyZW1vdmUiLCJhcnIiLCJpdGVtIiwiaW5kZXhPZiIsImhhc093biIsImNhY2hlZCIsImZuIiwiY2FtZWxpemVSRSIsImNhbWVsaXplIiwiYyIsInRvVXBwZXJDYXNlIiwiY2FwaXRhbGl6ZSIsImNoYXJBdCIsImh5cGhlbmF0ZVJFIiwiaHlwaGVuYXRlIiwicG9seWZpbGxCaW5kIiwiY3R4IiwiYm91bmRGbiIsImEiLCJsIiwiX2xlbmd0aCIsIm5hdGl2ZUJpbmQiLCJiaW5kIiwidG9BcnJheSIsInJldCIsImV4dGVuZCIsInRvIiwiX2Zyb20iLCJ0b09iamVjdCIsInJlcyIsImIiLCJubyIsImdlblN0YXRpY0tleXMiLCJtb2R1bGVzIiwicmVkdWNlIiwibSIsInN0YXRpY0tleXMiLCJsb29zZUVxdWFsIiwiaXNPYmplY3RBIiwiaXNPYmplY3RCIiwiaXNBcnJheUEiLCJpc0FycmF5QiIsImV2ZXJ5IiwiZ2V0VGltZSIsImtleXNBIiwia2V5c0IiLCJsb29zZUluZGV4T2YiLCJvbmNlIiwiY2FsbGVkIiwiU1NSX0FUVFIiLCJBU1NFVF9UWVBFUyIsIkxJRkVDWUNMRV9IT09LUyIsInVuaWNvZGVMZXR0ZXJzIiwiaXNSZXNlcnZlZCIsImRlZiIsImVudW1lcmFibGUiLCJiYWlsUkUiLCJwYXJzZVBhdGgiLCJzZWdtZW50cyIsIl9pc1NlcnZlciIsImhhc1Byb3RvIiwiaW5Ccm93c2VyIiwiaW5XZWV4IiwiV1hFbnZpcm9ubWVudCIsInBsYXRmb3JtIiwid2VleFBsYXRmb3JtIiwiVUEiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJpc0lFIiwiaXNJRTkiLCJpc0VkZ2UiLCJpc0FuZHJvaWQiLCJpc0lPUyIsImlzQ2hyb21lIiwiaXNQaGFudG9tSlMiLCJpc0ZGIiwibmF0aXZlV2F0Y2giLCJ3YXRjaCIsInN1cHBvcnRzUGFzc2l2ZSIsIm9wdHMiLCJpc1NlcnZlclJlbmRlcmluZyIsImVudiIsIlZVRV9FTlYiLCJkZXZ0b29scyIsIl9fVlVFX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJpc05hdGl2ZSIsIl9TZXQiLCJoYXNTeW1ib2wiLCJSZWZsZWN0Iiwib3duS2V5cyIsIndhcm4iLCJ0aXAiLCJnZW5lcmF0ZUNvbXBvbmVudFRyYWNlIiwiZm9ybWF0Q29tcG9uZW50TmFtZSIsImhhc0NvbnNvbGUiLCJjb25zb2xlIiwiY2xhc3NpZnlSRSIsImNsYXNzaWZ5IiwibXNnIiwidm0iLCJ0cmFjZSIsIndhcm5IYW5kbGVyIiwic2lsZW50IiwiaW5jbHVkZUZpbGUiLCIkcm9vdCIsImNpZCIsIl9pc1Z1ZSIsIiRvcHRpb25zIiwiX2NvbXBvbmVudFRhZyIsImZpbGUiLCJfX2ZpbGUiLCJyZXBlYXQiLCIkcGFyZW50IiwidHJlZSIsImN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSIsImxhc3QiLCJEZXAiLCJpZCIsInN1YnMiLCJhZGRTdWIiLCJzdWIiLCJyZW1vdmVTdWIiLCJkZXBlbmQiLCJhZGREZXAiLCJub3RpZnkiLCJhc3luYyIsInVwZGF0ZSIsInRhcmdldFN0YWNrIiwicHVzaFRhcmdldCIsInBvcFRhcmdldCIsIlZOb2RlIiwiY2hpbGRyZW4iLCJlbG0iLCJucyIsImNvbnRleHQiLCJmbkNvbnRleHQiLCJmbk9wdGlvbnMiLCJmblNjb3BlSWQiLCJjb21wb25lbnRPcHRpb25zIiwiY29tcG9uZW50SW5zdGFuY2UiLCJwYXJlbnQiLCJyYXciLCJpc1N0YXRpYyIsImlzUm9vdEluc2VydCIsImlzQ29tbWVudCIsImlzQ2xvbmVkIiwiaXNPbmNlIiwiYXN5bmNGYWN0b3J5IiwiYXN5bmNNZXRhIiwiaXNBc3luY1BsYWNlaG9sZGVyIiwiY2hpbGQiLCJjcmVhdGVFbXB0eVZOb2RlIiwibm9kZSIsImNyZWF0ZVRleHRWTm9kZSIsImNsb25lVk5vZGUiLCJ2bm9kZSIsImNsb25lZCIsImFycmF5TWV0aG9kcyIsIm1ldGhvZHNUb1BhdGNoIiwibWV0aG9kIiwib3JpZ2luYWwiLCJpbnNlcnRlZCIsIm9iIiwiX19vYl9fIiwib2JzZXJ2ZUFycmF5IiwiZGVwIiwiYXJyYXlLZXlzIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsInNob3VsZE9ic2VydmUiLCJ0b2dnbGVPYnNlcnZpbmciLCJPYnNlcnZlciIsInZtQ291bnQiLCJ3YWxrIiwicHJvdG9BdWdtZW50Iiwic3JjIiwiX19wcm90b19fIiwiY29weUF1Z21lbnQiLCJvYnNlcnZlIiwiYXNSb290RGF0YSIsImlzRXh0ZW5zaWJsZSIsImRlZmluZVJlYWN0aXZlJCQxIiwiY3VzdG9tU2V0dGVyIiwic2hhbGxvdyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImNvbmZpZ3VyYWJsZSIsImdldHRlciIsInNldHRlciIsImNoaWxkT2IiLCJuZXdWYWwiLCJkZWwiLCJkZXBlbmRBcnJheSIsInN0cmF0cyIsIm9wdGlvbk1lcmdlU3RyYXRlZ2llcyIsIm1lcmdlRGF0YSIsImZyb20iLCJ0b1ZhbCIsImZyb21WYWwiLCJtZXJnZURhdGFPckZuIiwicGFyZW50VmFsIiwiY2hpbGRWYWwiLCJpbnN0YW5jZURhdGEiLCJkZWZhdWx0RGF0YSIsIm1lcmdlSG9vayIsImRlZHVwZUhvb2tzIiwiaG9va3MiLCJtZXJnZUFzc2V0cyIsInByb3BzRGF0YSIsImRlZmF1bHRTdHJhdCIsImhvb2siLCJtZXRob2RzIiwiaW5qZWN0IiwiY29tcHV0ZWQiLCJwcm92aWRlIiwiY2hlY2tDb21wb25lbnRzIiwiY29tcG9uZW50cyIsInZhbGlkYXRlQ29tcG9uZW50TmFtZSIsImlzUmVzZXJ2ZWRUYWciLCJub3JtYWxpemVQcm9wcyIsIm5vcm1hbGl6ZUluamVjdCIsIm5vcm1hbGl6ZWQiLCJub3JtYWxpemVEaXJlY3RpdmVzIiwiZGlycyIsImRpcmVjdGl2ZXMiLCJkZWYkJDEiLCJhc3NlcnRPYmplY3RUeXBlIiwibWVyZ2VPcHRpb25zIiwiX2Jhc2UiLCJleHRlbmRzIiwibWl4aW5zIiwibWVyZ2VGaWVsZCIsInN0cmF0IiwicmVzb2x2ZUFzc2V0Iiwid2Fybk1pc3NpbmciLCJhc3NldHMiLCJjYW1lbGl6ZWRJZCIsIlBhc2NhbENhc2VJZCIsInZhbGlkYXRlUHJvcCIsInByb3BPcHRpb25zIiwicHJvcCIsImFic2VudCIsImJvb2xlYW5JbmRleCIsImdldFR5cGVJbmRleCIsIkJvb2xlYW4iLCJzdHJpbmdJbmRleCIsImdldFByb3BEZWZhdWx0VmFsdWUiLCJwcmV2U2hvdWxkT2JzZXJ2ZSIsIl9wcm9wcyIsImdldFR5cGUiLCJhc3NlcnRQcm9wIiwicmVxdWlyZWQiLCJ2YWxpZCIsImV4cGVjdGVkVHlwZXMiLCJhc3NlcnRlZFR5cGUiLCJhc3NlcnRUeXBlIiwiZXhwZWN0ZWRUeXBlIiwidmFsaWRhdG9yIiwiZ2V0SW52YWxpZFR5cGVNZXNzYWdlIiwic2ltcGxlQ2hlY2tSRSIsInQiLCJpc1NhbWVUeXBlIiwibGVuIiwicmVjZWl2ZWRUeXBlIiwiZXhwZWN0ZWRWYWx1ZSIsInN0eWxlVmFsdWUiLCJyZWNlaXZlZFZhbHVlIiwiaXNFeHBsaWNhYmxlIiwiaXNCb29sZWFuIiwiTnVtYmVyIiwic29tZSIsImVsZW0iLCJoYW5kbGVFcnJvciIsImVyciIsImluZm8iLCJjdXIiLCJlcnJvckNhcHR1cmVkIiwiaW52b2tlV2l0aEVycm9ySGFuZGxpbmciLCJoYW5kbGVyIiwiZ2xvYmFsSGFuZGxlRXJyb3IiLCJlcnJvckhhbmRsZXIiLCJsb2dFcnJvciIsInRpbWVyRnVuYyIsIm1hcmsiLCJtZWFzdXJlIiwiaXNVc2luZ01pY3JvVGFzayIsImNhbGxiYWNrcyIsInBlbmRpbmciLCJmbHVzaENhbGxiYWNrcyIsImNvcGllcyIsInAiLCJNdXRhdGlvbk9ic2VydmVyIiwic2V0SW1tZWRpYXRlIiwiY291bnRlciIsIm9ic2VydmVyIiwidGV4dE5vZGUiLCJjcmVhdGVUZXh0Tm9kZSIsIm5leHRUaWNrIiwiY2IiLCJfcmVzb2x2ZSIsImluaXRQcm94eSIsInBlcmYiLCJwZXJmb3JtYW5jZSIsImNsZWFyTWFya3MiLCJjbGVhck1lYXN1cmVzIiwic3RhcnRUYWciLCJlbmRUYWciLCJhbGxvd2VkR2xvYmFscyIsIndhcm5Ob25QcmVzZW50Iiwid2FyblJlc2VydmVkUHJlZml4IiwiaGFzUHJveHkiLCJQcm94eSIsImlzQnVpbHRJbk1vZGlmaWVyIiwia2V5Q29kZXMiLCJoYXNIYW5kbGVyIiwiaXNBbGxvd2VkIiwiJGRhdGEiLCJnZXRIYW5kbGVyIiwiaGFuZGxlcnMiLCJyZW5kZXIiLCJfd2l0aFN0cmlwcGVkIiwiX3JlbmRlclByb3h5Iiwic2Vlbk9iamVjdHMiLCJ0cmF2ZXJzZSIsIl90cmF2ZXJzZSIsImlzQSIsImlzRnJvemVuIiwiZGVwSWQiLCJub3JtYWxpemVFdmVudCIsInBhc3NpdmUiLCJvbmNlJCQxIiwiY2FwdHVyZSIsImNyZWF0ZUZuSW52b2tlciIsImZucyIsImludm9rZXIiLCJ1cGRhdGVMaXN0ZW5lcnMiLCJvbiIsIm9sZE9uIiwicmVtb3ZlJCQxIiwiY3JlYXRlT25jZUhhbmRsZXIiLCJvbGQiLCJwYXJhbXMiLCJtZXJnZVZOb2RlSG9vayIsImhvb2tLZXkiLCJvbGRIb29rIiwid3JhcHBlZEhvb2siLCJleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhIiwiYXR0cnMiLCJhbHRLZXkiLCJrZXlJbkxvd2VyQ2FzZSIsImNoZWNrUHJvcCIsInByZXNlcnZlIiwic2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4iLCJub3JtYWxpemVDaGlsZHJlbiIsIm5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4iLCJpc1RleHROb2RlIiwibmVzdGVkSW5kZXgiLCJsYXN0SW5kZXgiLCJzaGlmdCIsIl9pc1ZMaXN0IiwiaW5pdFByb3ZpZGUiLCJfcHJvdmlkZWQiLCJpbml0SW5qZWN0aW9ucyIsInJlc29sdmVJbmplY3QiLCJwcm92aWRlS2V5IiwicHJvdmlkZURlZmF1bHQiLCJyZXNvbHZlU2xvdHMiLCJzbG90cyIsInNsb3QiLCJpc1doaXRlc3BhY2UiLCJub3JtYWxpemVTY29wZWRTbG90cyIsIm5vcm1hbFNsb3RzIiwicHJldlNsb3RzIiwiX25vcm1hbGl6ZWQiLCIkc3RhYmxlIiwibm9ybWFsaXplU2NvcGVkU2xvdCIsInByb3h5Tm9ybWFsU2xvdCIsInByb3h5IiwicmVuZGVyTGlzdCIsIml0ZXJhdG9yIiwibmV4dCIsImRvbmUiLCJyZW5kZXJTbG90IiwiZmFsbGJhY2siLCJiaW5kT2JqZWN0Iiwibm9kZXMiLCJzY29wZWRTbG90Rm4iLCIkc2NvcGVkU2xvdHMiLCIkc2xvdHMiLCIkY3JlYXRlRWxlbWVudCIsInJlc29sdmVGaWx0ZXIiLCJpc0tleU5vdE1hdGNoIiwiZXhwZWN0IiwiYWN0dWFsIiwiY2hlY2tLZXlDb2RlcyIsImV2ZW50S2V5Q29kZSIsImJ1aWx0SW5LZXlDb2RlIiwiZXZlbnRLZXlOYW1lIiwiYnVpbHRJbktleU5hbWUiLCJtYXBwZWRLZXlDb2RlIiwiYmluZE9iamVjdFByb3BzIiwiYXNQcm9wIiwiaXNTeW5jIiwibXVzdFVzZVByb3AiLCJkb21Qcm9wcyIsImNhbWVsaXplZEtleSIsIiRldmVudCIsInJlbmRlclN0YXRpYyIsImlzSW5Gb3IiLCJfc3RhdGljVHJlZXMiLCJzdGF0aWNSZW5kZXJGbnMiLCJtYXJrT25jZSIsIm1hcmtTdGF0aWMiLCJtYXJrU3RhdGljTm9kZSIsImJpbmRPYmplY3RMaXN0ZW5lcnMiLCJleGlzdGluZyIsIm91cnMiLCJyZXNvbHZlU2NvcGVkU2xvdHMiLCJoYXNEeW5hbWljS2V5cyIsImJpbmREeW5hbWljS2V5cyIsImJhc2VPYmoiLCJwcmVwZW5kTW9kaWZpZXIiLCJpbnN0YWxsUmVuZGVySGVscGVycyIsIl9vIiwiX24iLCJfcyIsIl9sIiwiX3QiLCJfcSIsIl9pIiwiX20iLCJfZiIsIl9rIiwiX2IiLCJfdiIsIl9lIiwiX3UiLCJfZyIsIl9kIiwiX3AiLCJGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCIsImNvbnRleHRWbSIsIl9vcmlnaW5hbCIsImlzQ29tcGlsZWQiLCJfY29tcGlsZWQiLCJuZWVkTm9ybWFsaXphdGlvbiIsImxpc3RlbmVycyIsImluamVjdGlvbnMiLCJzY29wZWRTbG90cyIsIl9zY29wZUlkIiwiX2MiLCJjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50IiwicmVuZGVyQ29udGV4dCIsImNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQiLCJ2bm9kZXMiLCJjbG9uZSIsImRldnRvb2xzTWV0YSIsIm1lcmdlUHJvcHMiLCJjb21wb25lbnRWTm9kZUhvb2tzIiwiaHlkcmF0aW5nIiwiX2lzRGVzdHJveWVkIiwia2VlcEFsaXZlIiwibW91bnRlZE5vZGUiLCJwcmVwYXRjaCIsImNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUiLCJhY3RpdmVJbnN0YW5jZSIsIiRtb3VudCIsIm9sZFZub2RlIiwiX2lzTW91bnRlZCIsIiRkZXN0cm95IiwiaG9va3NUb01lcmdlIiwiY3JlYXRlQ29tcG9uZW50IiwiYmFzZUN0b3IiLCJyZXNvbHZlQXN5bmNDb21wb25lbnQiLCJjcmVhdGVBc3luY1BsYWNlaG9sZGVyIiwibW9kZWwiLCJmdW5jdGlvbmFsIiwibmF0aXZlT24iLCJhYnN0cmFjdCIsImlubGluZVRlbXBsYXRlIiwiaW5zdGFsbENvbXBvbmVudEhvb2tzIiwidG9NZXJnZSIsIl9tZXJnZWQiLCJtZXJnZUhvb2skMSIsImYxIiwiZjIiLCJ0cmFuc2Zvcm1Nb2RlbCIsImNhbGxiYWNrIiwiU0lNUExFX05PUk1BTElaRSIsIkFMV0FZU19OT1JNQUxJWkUiLCJub3JtYWxpemF0aW9uVHlwZSIsImFsd2F5c05vcm1hbGl6ZSIsIl9jcmVhdGVFbGVtZW50IiwiaXMiLCIkdm5vZGUiLCJnZXRUYWdOYW1lc3BhY2UiLCJwYXJzZVBsYXRmb3JtVGFnTmFtZSIsInByZSIsImFwcGx5TlMiLCJmb3JjZSIsInJlZ2lzdGVyRGVlcEJpbmRpbmdzIiwic3R5bGUiLCJjbGFzcyIsImluaXRSZW5kZXIiLCJfdm5vZGUiLCJwYXJlbnRWbm9kZSIsIl9wYXJlbnRWbm9kZSIsIl9yZW5kZXJDaGlsZHJlbiIsInBhcmVudERhdGEiLCJpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQiLCJfcGFyZW50TGlzdGVuZXJzIiwiY3VycmVudFJlbmRlcmluZ0luc3RhbmNlIiwicmVuZGVyTWl4aW4iLCJWdWUiLCIkbmV4dFRpY2siLCJyZW5kZXJFcnJvciIsImVuc3VyZUN0b3IiLCJjb21wIiwiYmFzZSIsIl9fZXNNb2R1bGUiLCJmYWN0b3J5IiwiZXJyb3JDb21wIiwicmVzb2x2ZWQiLCJsb2FkaW5nIiwibG9hZGluZ0NvbXAiLCJvd25lciIsIm93bmVycyIsInN5bmMiLCJmb3JjZVJlbmRlciIsInJlbmRlckNvbXBsZXRlZCIsIiRmb3JjZVVwZGF0ZSIsInJlYXNvbiIsImNvbXBvbmVudCIsImRlbGF5IiwidGltZW91dCIsImdldEZpcnN0Q29tcG9uZW50Q2hpbGQiLCJpbml0RXZlbnRzIiwiX2V2ZW50cyIsIl9oYXNIb29rRXZlbnQiLCIkb24iLCJyZW1vdmUkMSIsIiRvZmYiLCJfdGFyZ2V0Iiwib25jZUhhbmRsZXIiLCJ1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnMiLCJvbGRMaXN0ZW5lcnMiLCJldmVudHNNaXhpbiIsImhvb2tSRSIsIiRvbmNlIiwiY2JzIiwiJGVtaXQiLCJsb3dlckNhc2VFdmVudCIsInNldEFjdGl2ZUluc3RhbmNlIiwicHJldkFjdGl2ZUluc3RhbmNlIiwiaW5pdExpZmVjeWNsZSIsIiRjaGlsZHJlbiIsIiRyZWZzIiwiX3dhdGNoZXIiLCJfaW5hY3RpdmUiLCJfZGlyZWN0SW5hY3RpdmUiLCJfaXNCZWluZ0Rlc3Ryb3llZCIsImxpZmVjeWNsZU1peGluIiwiX3VwZGF0ZSIsInByZXZFbCIsIiRlbCIsInByZXZWbm9kZSIsInJlc3RvcmVBY3RpdmVJbnN0YW5jZSIsIl9fcGF0Y2hfXyIsIl9fdnVlX18iLCJ0ZWFyZG93biIsIl93YXRjaGVycyIsIl9kYXRhIiwibW91bnRDb21wb25lbnQiLCJ1cGRhdGVDb21wb25lbnQiLCJfbmFtZSIsIl91aWQiLCJXYXRjaGVyIiwidXBkYXRlQ2hpbGRDb21wb25lbnQiLCJyZW5kZXJDaGlsZHJlbiIsImhhc0R5bmFtaWNTY29wZWRTbG90IiwibmVlZHNGb3JjZVVwZGF0ZSIsIiRhdHRycyIsIiRsaXN0ZW5lcnMiLCJwcm9wS2V5cyIsIl9wcm9wS2V5cyIsImlzSW5JbmFjdGl2ZVRyZWUiLCJhY3RpdmF0ZUNoaWxkQ29tcG9uZW50IiwiZGlyZWN0IiwiZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50IiwiY2FsbEhvb2siLCJqIiwiTUFYX1VQREFURV9DT1VOVCIsInF1ZXVlIiwiYWN0aXZhdGVkQ2hpbGRyZW4iLCJjaXJjdWxhciIsIndhaXRpbmciLCJmbHVzaGluZyIsInJlc2V0U2NoZWR1bGVyU3RhdGUiLCJjdXJyZW50Rmx1c2hUaW1lc3RhbXAiLCJnZXROb3ciLCJmbHVzaFNjaGVkdWxlclF1ZXVlIiwid2F0Y2hlciIsImJlZm9yZSIsInJ1biIsInVzZXIiLCJleHByZXNzaW9uIiwiYWN0aXZhdGVkUXVldWUiLCJ1cGRhdGVkUXVldWUiLCJlbWl0IiwiY2FsbFVwZGF0ZWRIb29rcyIsInF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50IiwiY2FsbEFjdGl2YXRlZEhvb2tzIiwicXVldWVXYXRjaGVyIiwiY3JlYXRlRXZlbnQiLCJ0aW1lU3RhbXAiLCJ1aWQkMiIsImlzUmVuZGVyV2F0Y2hlciIsImRlZXAiLCJsYXp5IiwiYWN0aXZlIiwiZGlydHkiLCJkZXBzIiwibmV3RGVwcyIsImRlcElkcyIsIm5ld0RlcElkcyIsImV4cE9yRm4iLCJjbGVhbnVwRGVwcyIsInRtcCIsIm9sZFZhbHVlIiwic2hhcmVkUHJvcGVydHlEZWZpbml0aW9uIiwic291cmNlS2V5IiwiaW5pdFN0YXRlIiwiaW5pdFByb3BzIiwicHJvcHNPcHRpb25zIiwiaXNSb290IiwiaHlwaGVuYXRlZEtleSIsImlzUmVzZXJ2ZWRBdHRyIiwiaW5pdERhdGEiLCJnZXREYXRhIiwiY29tcHV0ZWRXYXRjaGVyT3B0aW9ucyIsImluaXRDb21wdXRlZCIsIndhdGNoZXJzIiwiX2NvbXB1dGVkV2F0Y2hlcnMiLCJpc1NTUiIsInVzZXJEZWYiLCJkZWZpbmVDb21wdXRlZCIsInNob3VsZENhY2hlIiwiY3JlYXRlQ29tcHV0ZWRHZXR0ZXIiLCJjcmVhdGVHZXR0ZXJJbnZva2VyIiwiaW5pdE1ldGhvZHMiLCJpbml0V2F0Y2giLCJjcmVhdGVXYXRjaGVyIiwiJHdhdGNoIiwic3RhdGVNaXhpbiIsImRhdGFEZWYiLCJwcm9wc0RlZiIsIiRzZXQiLCIkZGVsZXRlIiwiaW1tZWRpYXRlIiwidWlkJDMiLCJpbml0TWl4aW4iLCJfaW5pdCIsIl9pc0NvbXBvbmVudCIsInJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMiLCJfc2VsZiIsImluaXRJbnRlcm5hbENvbXBvbmVudCIsInZub2RlQ29tcG9uZW50T3B0aW9ucyIsInN1cGVyIiwic3VwZXJPcHRpb25zIiwibW9kaWZpZWRPcHRpb25zIiwicmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyIsImV4dGVuZE9wdGlvbnMiLCJtb2RpZmllZCIsImxhdGVzdCIsInNlYWxlZCIsInNlYWxlZE9wdGlvbnMiLCJpbml0VXNlIiwidXNlIiwicGx1Z2luIiwiaW5zdGFsbGVkUGx1Z2lucyIsIl9pbnN0YWxsZWRQbHVnaW5zIiwidW5zaGlmdCIsImluc3RhbGwiLCJpbml0TWl4aW4kMSIsIm1peGluIiwiaW5pdEV4dGVuZCIsIlN1cGVyIiwiU3VwZXJJZCIsImNhY2hlZEN0b3JzIiwiX0N0b3IiLCJTdWIiLCJpbml0UHJvcHMkMSIsIkNvbXAiLCJpbml0Q29tcHV0ZWQkMSIsImluaXRBc3NldFJlZ2lzdGVycyIsImRlZmluaXRpb24iLCJnZXRDb21wb25lbnROYW1lIiwicGF0dGVybiIsInBydW5lQ2FjaGUiLCJrZWVwQWxpdmVJbnN0YW5jZSIsImNhY2hlZE5vZGUiLCJwcnVuZUNhY2hlRW50cnkiLCJjdXJyZW50IiwiY2FjaGVkJCQxIiwicGF0dGVyblR5cGVzIiwiS2VlcEFsaXZlIiwiaW5jbHVkZSIsImV4Y2x1ZGUiLCJwYXJzZUludCIsImJ1aWx0SW5Db21wb25lbnRzIiwiaW5pdEdsb2JhbEFQSSIsImNvbmZpZ0RlZiIsInV0aWwiLCJkZWxldGUiLCJvYnNlcnZhYmxlIiwic3NyQ29udGV4dCIsInZlcnNpb24iLCJhY2NlcHRWYWx1ZSIsImF0dHIiLCJpc0VudW1lcmF0ZWRBdHRyIiwiaXNWYWxpZENvbnRlbnRFZGl0YWJsZVZhbHVlIiwiY29udmVydEVudW1lcmF0ZWRWYWx1ZSIsImlzRmFsc3lBdHRyVmFsdWUiLCJpc0Jvb2xlYW5BdHRyIiwieGxpbmtOUyIsImlzWGxpbmsiLCJnZXRYbGlua1Byb3AiLCJnZW5DbGFzc0ZvclZub2RlIiwicGFyZW50Tm9kZSIsImNoaWxkTm9kZSIsIm1lcmdlQ2xhc3NEYXRhIiwicmVuZGVyQ2xhc3MiLCJzdGF0aWNDbGFzcyIsImR5bmFtaWNDbGFzcyIsInN0cmluZ2lmeUNsYXNzIiwic3RyaW5naWZ5QXJyYXkiLCJzdHJpbmdpZnlPYmplY3QiLCJzdHJpbmdpZmllZCIsIm5hbWVzcGFjZU1hcCIsImlzSFRNTFRhZyIsImlzU1ZHIiwiaXNQcmVUYWciLCJ1bmtub3duRWxlbWVudENhY2hlIiwiaXNVbmtub3duRWxlbWVudCIsIkhUTUxVbmtub3duRWxlbWVudCIsIkhUTUxFbGVtZW50IiwiaXNUZXh0SW5wdXRUeXBlIiwic2VsZWN0ZWQiLCJjcmVhdGVFbGVtZW50JDEiLCJ0YWdOYW1lIiwibXVsdGlwbGUiLCJjcmVhdGVFbGVtZW50TlMiLCJjcmVhdGVDb21tZW50IiwiaW5zZXJ0QmVmb3JlIiwibmV3Tm9kZSIsInJlZmVyZW5jZU5vZGUiLCJyZW1vdmVDaGlsZCIsIm5leHRTaWJsaW5nIiwic2V0VGV4dENvbnRlbnQiLCJ0ZXh0Q29udGVudCIsInNldFN0eWxlU2NvcGUiLCJzY29wZUlkIiwibm9kZU9wcyIsInJlZiIsInJlZ2lzdGVyUmVmIiwiaXNSZW1vdmFsIiwicmVmcyIsInJlZkluRm9yIiwiZW1wdHlOb2RlIiwic2FtZVZub2RlIiwic2FtZUlucHV0VHlwZSIsInR5cGVBIiwidHlwZUIiLCJjcmVhdGVLZXlUb09sZElkeCIsImJlZ2luSWR4IiwiZW5kSWR4IiwiY3JlYXRlUGF0Y2hGdW5jdGlvbiIsImJhY2tlbmQiLCJyZW1vdmVOb2RlIiwiaXNVbmtub3duRWxlbWVudCQkMSIsImluVlByZSIsImlnbm9yZWRFbGVtZW50cyIsImlnbm9yZSIsImNyZWF0aW5nRWxtSW5WUHJlIiwiY3JlYXRlRWxtIiwiaW5zZXJ0ZWRWbm9kZVF1ZXVlIiwicGFyZW50RWxtIiwicmVmRWxtIiwibmVzdGVkIiwib3duZXJBcnJheSIsImlzUmVhY3RpdmF0ZWQiLCJpbm5lck5vZGUiLCJ0cmFuc2l0aW9uIiwiYWN0aXZhdGUiLCJpbml0Q29tcG9uZW50IiwicGVuZGluZ0luc2VydCIsImlzUGF0Y2hhYmxlIiwiaW5zZXJ0IiwicmVmJCQxIiwiY3JlYXRlQ2hpbGRyZW4iLCJpbnZva2VDcmVhdGVIb29rcyIsInNldFNjb3BlIiwiYW5jZXN0b3IiLCJhZGRWbm9kZXMiLCJzdGFydElkeCIsImludm9rZURlc3Ryb3lIb29rIiwiZGVzdHJveSIsInJlbW92ZVZub2RlcyIsImNoIiwicmVtb3ZlQW5kSW52b2tlUmVtb3ZlSG9vayIsInJtIiwiY2hpbGRFbG0iLCJjcmVhdGVSbUNiIiwiY2hlY2tEdXBsaWNhdGVLZXlzIiwic2VlbktleXMiLCJmaW5kSWR4SW5PbGQiLCJvbGRDaCIsImVuZCIsInBhdGNoVm5vZGUiLCJyZW1vdmVPbmx5IiwibmV3Q2giLCJvbGRLZXlUb0lkeCIsImlkeEluT2xkIiwidm5vZGVUb01vdmUiLCJvbGRTdGFydElkeCIsIm5ld1N0YXJ0SWR4Iiwib2xkRW5kSWR4Iiwib2xkU3RhcnRWbm9kZSIsIm9sZEVuZFZub2RlIiwibmV3RW5kSWR4IiwibmV3U3RhcnRWbm9kZSIsIm5ld0VuZFZub2RlIiwiY2FuTW92ZSIsInBvc3RwYXRjaCIsImludm9rZUluc2VydEhvb2siLCJpbml0aWFsIiwiaHlkcmF0aW9uQmFpbGVkIiwiaXNSZW5kZXJlZE1vZHVsZSIsImh5ZHJhdGUiLCJhc3NlcnROb2RlTWF0Y2giLCJoYXNDaGlsZE5vZGVzIiwiY2hpbGRyZW5NYXRjaCIsImZpcnN0Q2hpbGQiLCJjaGlsZE5vZGVzIiwiZnVsbEludm9rZSIsImlzSW5pdGlhbFBhdGNoIiwiaXNSZWFsRWxlbWVudCIsImhhc0F0dHJpYnV0ZSIsInJlbW92ZUF0dHJpYnV0ZSIsIm9sZEVsbSIsIl9sZWF2ZUNiIiwicGF0Y2hhYmxlIiwidXBkYXRlRGlyZWN0aXZlcyIsIm9sZERpciIsImlzQ3JlYXRlIiwiaXNEZXN0cm95Iiwib2xkRGlycyIsIm5vcm1hbGl6ZURpcmVjdGl2ZXMkMSIsIm5ld0RpcnMiLCJkaXJzV2l0aEluc2VydCIsImRpcnNXaXRoUG9zdHBhdGNoIiwib2xkQXJnIiwiY29tcG9uZW50VXBkYXRlZCIsImNhbGxJbnNlcnQiLCJlbXB0eU1vZGlmaWVycyIsIm1vZGlmaWVycyIsImdldFJhd0Rpck5hbWUiLCJyYXdOYW1lIiwiY2FsbEhvb2skMSIsImJhc2VNb2R1bGVzIiwidXBkYXRlQXR0cnMiLCJpbmhlcml0QXR0cnMiLCJvbGRBdHRycyIsInJlbW92ZUF0dHJpYnV0ZU5TIiwic2V0QXR0ciIsInNldEF0dHJpYnV0ZU5TIiwiYmFzZVNldEF0dHIiLCJfX2llcGgiLCJibG9ja2VyIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwidXBkYXRlQ2xhc3MiLCJvbGREYXRhIiwiY2xzIiwidHJhbnNpdGlvbkNsYXNzIiwiX3RyYW5zaXRpb25DbGFzc2VzIiwiX3ByZXZDbGFzcyIsImluZGV4JDEiLCJleHByZXNzaW9uUG9zIiwiZXhwcmVzc2lvbkVuZFBvcyIsIndhcm4kMSIsImtsYXNzIiwidmFsaWREaXZpc2lvbkNoYXJSRSIsInBhcnNlRmlsdGVycyIsImV4cCIsInByZXYiLCJmaWx0ZXJzIiwiaW5TaW5nbGUiLCJpbkRvdWJsZSIsImluVGVtcGxhdGVTdHJpbmciLCJpblJlZ2V4IiwiY3VybHkiLCJzcXVhcmUiLCJwYXJlbiIsImxhc3RGaWx0ZXJJbmRleCIsInRyaW0iLCJwdXNoRmlsdGVyIiwid3JhcEZpbHRlciIsImJhc2VXYXJuIiwicmFuZ2UiLCJwbHVja01vZHVsZUZ1bmN0aW9uIiwiYWRkUHJvcCIsImR5bmFtaWMiLCJyYW5nZVNldEl0ZW0iLCJwbGFpbiIsImFkZEF0dHIiLCJkeW5hbWljQXR0cnMiLCJhZGRSYXdBdHRyIiwiYXR0cnNNYXAiLCJhdHRyc0xpc3QiLCJhZGREaXJlY3RpdmUiLCJpc0R5bmFtaWNBcmciLCJwcmVwZW5kTW9kaWZpZXJNYXJrZXIiLCJhZGRIYW5kbGVyIiwiaW1wb3J0YW50IiwiZXZlbnRzIiwicHJldmVudCIsInJpZ2h0IiwibWlkZGxlIiwibmF0aXZlIiwibmF0aXZlRXZlbnRzIiwibmV3SGFuZGxlciIsImdldFJhd0JpbmRpbmdBdHRyIiwicmF3QXR0cnNNYXAiLCJnZXRCaW5kaW5nQXR0ciIsImdldFN0YXRpYyIsImR5bmFtaWNWYWx1ZSIsImdldEFuZFJlbW92ZUF0dHIiLCJzdGF0aWNWYWx1ZSIsInJlbW92ZUZyb21NYXAiLCJnZXRBbmRSZW1vdmVBdHRyQnlSZWdleCIsImdlbkNvbXBvbmVudE1vZGVsIiwidmFsdWVFeHByZXNzaW9uIiwiYXNzaWdubWVudCIsImdlbkFzc2lnbm1lbnRDb2RlIiwicGFyc2VNb2RlbCIsImVvZiIsImlzU3RyaW5nU3RhcnQiLCJwYXJzZUJyYWNrZXQiLCJpbkJyYWNrZXQiLCJwYXJzZVN0cmluZyIsInN0cmluZ1F1b3RlIiwidGFyZ2V0JDEiLCJSQU5HRV9UT0tFTiIsIkNIRUNLQk9YX1JBRElPX1RPS0VOIiwiX3dhcm4iLCJnZW5DaGVja2JveE1vZGVsIiwidmFsdWVCaW5kaW5nIiwidHJ1ZVZhbHVlQmluZGluZyIsImZhbHNlVmFsdWVCaW5kaW5nIiwiZ2VuUmFkaW9Nb2RlbCIsImdlblNlbGVjdCIsImNvZGUiLCJnZW5EZWZhdWx0TW9kZWwiLCJ0eXBlQmluZGluZyIsIm5lZWRDb21wb3NpdGlvbkd1YXJkIiwibm9ybWFsaXplRXZlbnRzIiwiY2hhbmdlIiwiY3JlYXRlT25jZUhhbmRsZXIkMSIsInVzZU1pY3JvdGFza0ZpeCIsImFkZCQxIiwiYXR0YWNoZWRUaW1lc3RhbXAiLCJfd3JhcHBlciIsImN1cnJlbnRUYXJnZXQiLCJvd25lckRvY3VtZW50IiwicmVtb3ZlJDIiLCJ1cGRhdGVET01MaXN0ZW5lcnMiLCJzdmdDb250YWluZXIiLCJ1cGRhdGVET01Qcm9wcyIsIm9sZFByb3BzIiwiX3ZhbHVlIiwic3RyQ3VyIiwic2hvdWxkVXBkYXRlVmFsdWUiLCJzdmciLCJjaGVja1ZhbCIsImNvbXBvc2luZyIsImlzTm90SW5Gb2N1c0FuZERpcnR5IiwiaXNEaXJ0eVdpdGhNb2RpZmllcnMiLCJub3RJbkZvY3VzIiwiYWN0aXZlRWxlbWVudCIsIl92TW9kaWZpZXJzIiwicGFyc2VTdHlsZVRleHQiLCJjc3NUZXh0IiwicHJvcGVydHlEZWxpbWl0ZXIiLCJub3JtYWxpemVTdHlsZURhdGEiLCJub3JtYWxpemVTdHlsZUJpbmRpbmciLCJzdGF0aWNTdHlsZSIsImJpbmRpbmdTdHlsZSIsImdldFN0eWxlIiwiY2hlY2tDaGlsZCIsInN0eWxlRGF0YSIsImVtcHR5U3R5bGUiLCJjc3NWYXJSRSIsImltcG9ydGFudFJFIiwic2V0UHJvcCIsInNldFByb3BlcnR5Iiwibm9ybWFsaXplZE5hbWUiLCJub3JtYWxpemUiLCJ2ZW5kb3JOYW1lcyIsImNhcE5hbWUiLCJ1cGRhdGVTdHlsZSIsIm9sZFN0YXRpY1N0eWxlIiwib2xkU3R5bGVCaW5kaW5nIiwibm9ybWFsaXplZFN0eWxlIiwib2xkU3R5bGUiLCJuZXdTdHlsZSIsIndoaXRlc3BhY2VSRSIsImFkZENsYXNzIiwicmVtb3ZlQ2xhc3MiLCJ0YXIiLCJyZXNvbHZlVHJhbnNpdGlvbiIsImNzcyIsImF1dG9Dc3NUcmFuc2l0aW9uIiwiaGFzVHJhbnNpdGlvbiIsIlRSQU5TSVRJT04iLCJBTklNQVRJT04iLCJ0cmFuc2l0aW9uUHJvcCIsInRyYW5zaXRpb25FbmRFdmVudCIsImFuaW1hdGlvblByb3AiLCJhbmltYXRpb25FbmRFdmVudCIsIm9udHJhbnNpdGlvbmVuZCIsIm9ud2Via2l0dHJhbnNpdGlvbmVuZCIsIm9uYW5pbWF0aW9uZW5kIiwib253ZWJraXRhbmltYXRpb25lbmQiLCJyYWYiLCJyZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJzZXRUaW1lb3V0IiwibmV4dEZyYW1lIiwiYWRkVHJhbnNpdGlvbkNsYXNzIiwidHJhbnNpdGlvbkNsYXNzZXMiLCJyZW1vdmVUcmFuc2l0aW9uQ2xhc3MiLCJ3aGVuVHJhbnNpdGlvbkVuZHMiLCJnZXRUcmFuc2l0aW9uSW5mbyIsImVuZGVkIiwib25FbmQiLCJwcm9wQ291bnQiLCJ0cmFuc2Zvcm1SRSIsInN0eWxlcyIsImdldENvbXB1dGVkU3R5bGUiLCJ0cmFuc2l0aW9uRGVsYXlzIiwidHJhbnNpdGlvbkR1cmF0aW9ucyIsInRyYW5zaXRpb25UaW1lb3V0IiwiZ2V0VGltZW91dCIsImFuaW1hdGlvbkRlbGF5cyIsImFuaW1hdGlvbkR1cmF0aW9ucyIsImFuaW1hdGlvblRpbWVvdXQiLCJkZWxheXMiLCJkdXJhdGlvbnMiLCJ0b01zIiwiZW50ZXIiLCJ0b2dnbGVEaXNwbGF5IiwiY2FuY2VsbGVkIiwiX2VudGVyQ2IiLCJ0cmFuc2l0aW9uTm9kZSIsImlzQXBwZWFyIiwiYXBwZWFyIiwic3RhcnRDbGFzcyIsImFwcGVhckNsYXNzIiwiZW50ZXJDbGFzcyIsImFwcGVhckFjdGl2ZUNsYXNzIiwiZW50ZXJBY3RpdmVDbGFzcyIsInRvQ2xhc3MiLCJhcHBlYXJUb0NsYXNzIiwiZW50ZXJUb0NsYXNzIiwiYmVmb3JlRW50ZXJIb29rIiwiYmVmb3JlQXBwZWFyIiwiYmVmb3JlRW50ZXIiLCJlbnRlckhvb2siLCJhZnRlckVudGVySG9vayIsImFmdGVyQXBwZWFyIiwiYWZ0ZXJFbnRlciIsImVudGVyQ2FuY2VsbGVkSG9vayIsImFwcGVhckNhbmNlbGxlZCIsImVudGVyQ2FuY2VsbGVkIiwiZXhwbGljaXRFbnRlckR1cmF0aW9uIiwiZHVyYXRpb24iLCJleHBlY3RzQ1NTIiwidXNlcldhbnRzQ29udHJvbCIsImdldEhvb2tBcmd1bWVudHNMZW5ndGgiLCJzaG93IiwicGVuZGluZ05vZGUiLCJfcGVuZGluZyIsImlzVmFsaWREdXJhdGlvbiIsImxlYXZlIiwiZXhwbGljaXRMZWF2ZUR1cmF0aW9uIiwibGVhdmVUb0NsYXNzIiwibGVhdmVBY3RpdmVDbGFzcyIsImxlYXZlQ2xhc3MiLCJsZWF2ZUNhbmNlbGxlZCIsImFmdGVyTGVhdmUiLCJkZWxheUxlYXZlIiwicGVyZm9ybUxlYXZlIiwiYmVmb3JlTGVhdmUiLCJjaGVja0R1cmF0aW9uIiwiaW52b2tlckZucyIsIl9lbnRlciIsInBsYXRmb3JtTW9kdWxlcyIsInBhdGNoIiwidm1vZGVsIiwiZGlyZWN0aXZlIiwiX3ZPcHRpb25zIiwib25Db21wb3NpdGlvblN0YXJ0Iiwib25Db21wb3NpdGlvbkVuZCIsInByZXZPcHRpb25zIiwiY3VyT3B0aW9ucyIsIm8iLCJoYXNOb01hdGNoaW5nT3B0aW9uIiwic2V0U2VsZWN0ZWQiLCJhY3R1YWxseVNldFNlbGVjdGVkIiwiaXNNdWx0aXBsZSIsIm9wdGlvbiIsInNlbGVjdGVkSW5kZXgiLCJ0cmlnZ2VyIiwiaW5pdEV2ZW50IiwiZGlzcGF0Y2hFdmVudCIsImxvY2F0ZU5vZGUiLCJ0cmFuc2l0aW9uJCQxIiwib3JpZ2luYWxEaXNwbGF5IiwiX192T3JpZ2luYWxEaXNwbGF5IiwiZGlzcGxheSIsInBsYXRmb3JtRGlyZWN0aXZlcyIsInRyYW5zaXRpb25Qcm9wcyIsImdldFJlYWxDaGlsZCIsImNvbXBPcHRpb25zIiwiZXh0cmFjdFRyYW5zaXRpb25EYXRhIiwicGxhY2Vob2xkZXIiLCJoIiwicmF3Q2hpbGQiLCJoYXNQYXJlbnRUcmFuc2l0aW9uIiwiaXNTYW1lQ2hpbGQiLCJvbGRDaGlsZCIsImlzTm90VGV4dE5vZGUiLCJpc1ZTaG93RGlyZWN0aXZlIiwiVHJhbnNpdGlvbiIsIm1vZGUiLCJfbGVhdmluZyIsIm9sZFJhd0NoaWxkIiwiZGVsYXllZExlYXZlIiwiVHJhbnNpdGlvbkdyb3VwIiwia2VwdCIsInByZXZDaGlsZHJlbiIsInJhd0NoaWxkcmVuIiwidHJhbnNpdGlvbkRhdGEiLCJyZW1vdmVkIiwicG9zIiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwibW92ZUNsYXNzIiwiaGFzTW92ZSIsImNhbGxQZW5kaW5nQ2JzIiwicmVjb3JkUG9zaXRpb24iLCJhcHBseVRyYW5zbGF0aW9uIiwiX3JlZmxvdyIsIm9mZnNldEhlaWdodCIsIm1vdmVkIiwiV2Via2l0VHJhbnNmb3JtIiwidHJhbnNpdGlvbkR1cmF0aW9uIiwiX21vdmVDYiIsInByb3BlcnR5TmFtZSIsIl9oYXNNb3ZlIiwiY2xvbmVOb2RlIiwiaGFzVHJhbnNmb3JtIiwibmV3UG9zIiwib2xkUG9zIiwiZHgiLCJsZWZ0IiwiZHkiLCJ0b3AiLCJwbGF0Zm9ybUNvbXBvbmVudHMiLCJwcm9kdWN0aW9uVGlwIiwiZGVmYXVsdFRhZ1JFIiwicmVnZXhFc2NhcGVSRSIsImJ1aWxkUmVnZXgiLCJkZWxpbWl0ZXJzIiwiY2xvc2UiLCJwYXJzZVRleHQiLCJ0YWdSRSIsInRva2VuVmFsdWUiLCJ0b2tlbnMiLCJyYXdUb2tlbnMiLCJAYmluZGluZyIsInRyYW5zZm9ybU5vZGUiLCJjbGFzc0JpbmRpbmciLCJnZW5EYXRhIiwia2xhc3MkMSIsInRyYW5zZm9ybU5vZGUkMSIsInN0eWxlQmluZGluZyIsImdlbkRhdGEkMSIsImRlY29kZXIiLCJzdHlsZSQxIiwiaGUiLCJodG1sIiwiaXNVbmFyeVRhZyIsImNhbkJlTGVmdE9wZW5UYWciLCJpc05vblBocmFzaW5nVGFnIiwiYXR0cmlidXRlIiwiZHluYW1pY0FyZ0F0dHJpYnV0ZSIsIm5jbmFtZSIsInFuYW1lQ2FwdHVyZSIsInN0YXJ0VGFnT3BlbiIsInN0YXJ0VGFnQ2xvc2UiLCJkb2N0eXBlIiwiY29tbWVudCIsImNvbmRpdGlvbmFsQ29tbWVudCIsImlzUGxhaW5UZXh0RWxlbWVudCIsInJlQ2FjaGUiLCJkZWNvZGluZ01hcCIsImVuY29kZWRBdHRyIiwiZW5jb2RlZEF0dHJXaXRoTmV3TGluZXMiLCJpc0lnbm9yZU5ld2xpbmVUYWciLCJzaG91bGRJZ25vcmVGaXJzdE5ld2xpbmUiLCJkZWNvZGVBdHRyIiwic2hvdWxkRGVjb2RlTmV3bGluZXMiLCJyZSIsInBhcnNlSFRNTCIsImxhc3RUYWciLCJleHBlY3RIVE1MIiwiaXNVbmFyeVRhZyQkMSIsImNhbkJlTGVmdE9wZW5UYWckJDEiLCJlbmRUYWdMZW5ndGgiLCJzdGFja2VkVGFnIiwicmVTdGFja2VkVGFnIiwicmVzdCIsImFsbCIsImNoYXJzIiwidGV4dEVuZCIsImNvbW1lbnRFbmQiLCJzaG91bGRLZWVwQ29tbWVudCIsInN1YnN0cmluZyIsImNvbmRpdGlvbmFsRW5kIiwiZG9jdHlwZU1hdGNoIiwiZW5kVGFnTWF0Y2giLCJjdXJJbmRleCIsInN0YXJ0VGFnTWF0Y2giLCJwYXJzZVN0YXJ0VGFnIiwiYWR2YW5jZSIsInVuYXJ5U2xhc2giLCJoYW5kbGVTdGFydFRhZyIsInVuYXJ5Iiwic2hvdWxkRGVjb2RlTmV3bGluZXNGb3JIcmVmIiwib3V0cHV0U291cmNlUmFuZ2UiLCJsb3dlckNhc2VkVGFnIiwicGFyc2VFbmRUYWciLCJsb3dlckNhc2VkVGFnTmFtZSIsIndhcm4kMiIsInRyYW5zZm9ybXMiLCJwcmVUcmFuc2Zvcm1zIiwicG9zdFRyYW5zZm9ybXMiLCJwbGF0Zm9ybUlzUHJlVGFnIiwicGxhdGZvcm1NdXN0VXNlUHJvcCIsInBsYXRmb3JtR2V0VGFnTmFtZXNwYWNlIiwibWF5YmVDb21wb25lbnQiLCJvblJFIiwiZGlyUkUiLCJmb3JBbGlhc1JFIiwiZm9ySXRlcmF0b3JSRSIsInN0cmlwUGFyZW5zUkUiLCJkeW5hbWljQXJnUkUiLCJhcmdSRSIsImJpbmRSRSIsIm1vZGlmaWVyUkUiLCJzbG90UkUiLCJsaW5lQnJlYWtSRSIsIndoaXRlc3BhY2VSRSQxIiwiaW52YWxpZEF0dHJpYnV0ZVJFIiwiZGVjb2RlSFRNTENhY2hlZCIsImRlY29kZSIsImVtcHR5U2xvdFNjb3BlVG9rZW4iLCJjcmVhdGVBU1RFbGVtZW50IiwibWFrZUF0dHJzTWFwIiwiY3VycmVudFBhcmVudCIsInByZXNlcnZlV2hpdGVzcGFjZSIsIndoaXRlc3BhY2VPcHRpb24iLCJ3aGl0ZXNwYWNlIiwiaW5QcmUiLCJ3YXJuZWQiLCJ3YXJuT25jZSIsImNsb3NlRWxlbWVudCIsInByb2Nlc3NlZCIsInByb2Nlc3NFbGVtZW50IiwiaWYiLCJlbHNlaWYiLCJlbHNlIiwiZm9yYmlkZGVuIiwic2xvdFNjb3BlIiwic2xvdFRhcmdldCIsInRyaW1FbmRpbmdXaGl0ZXNwYWNlIiwibGFzdE5vZGUiLCJjaGVja1Jvb3RDb25zdHJhaW50cyIsImNvbW1lbnRzIiwiZ3VhcmRJRVNWR0J1ZyIsImN1bXVsYXRlZCIsImlzRm9yYmlkZGVuVGFnIiwiaXNUZXh0VGFnIiwicHJvY2Vzc1ByZSIsInByb2Nlc3NSYXdBdHRycyIsInByb2Nlc3NLZXkiLCJmb3IiLCJpdGVyYXRvcjIiLCJpdGVyYXRvcjEiLCJwcm9jZXNzUmVmIiwiY2hlY2tJbkZvciIsInByb2Nlc3NGb3IiLCJwYXJzZUZvciIsImluTWF0Y2giLCJhbGlhcyIsIml0ZXJhdG9yTWF0Y2giLCJwcm9jZXNzSWYiLCJwcm9jZXNzSWZDb25kaXRpb25zIiwiZmluZFByZXZFbGVtZW50IiwiYWRkSWZDb25kaXRpb24iLCJjb25kaXRpb24iLCJpZkNvbmRpdGlvbnMiLCJwcm9jZXNzT25jZSIsInByb2Nlc3NTbG90Q29udGVudCIsInNsb3RUYXJnZXREeW5hbWljIiwic2xvdEJpbmRpbmciLCJnZXRTbG90TmFtZSIsInNsb3RDb250YWluZXIiLCJwcm9jZXNzU2xvdE91dGxldCIsInNsb3ROYW1lIiwicHJvY2Vzc0NvbXBvbmVudCIsInByb2Nlc3NBdHRycyIsInN5bmNHZW4iLCJpc0R5bmFtaWMiLCJoYXNCaW5kaW5ncyIsInBhcnNlTW9kaWZpZXJzIiwiY2FtZWwiLCJhcmdNYXRjaCIsImllTlNCdWciLCJpZU5TUHJlZml4IiwiY2hlY2tGb3JBbGlhc01vZGVsIiwiX2VsIiwicHJlVHJhbnNmb3JtTm9kZSIsImlmQ29uZGl0aW9uIiwiaWZDb25kaXRpb25FeHRyYSIsImhhc0Vsc2UiLCJlbHNlSWZDb25kaXRpb24iLCJicmFuY2gwIiwiY2xvbmVBU1RFbGVtZW50IiwiYnJhbmNoMSIsImJyYW5jaDIiLCJtb2RlbCQxIiwibW9kdWxlcyQxIiwiaXNTdGF0aWNLZXkiLCJpc1BsYXRmb3JtUmVzZXJ2ZWRUYWciLCJkaXJlY3RpdmVzJDEiLCJiYXNlT3B0aW9ucyIsImdlblN0YXRpY0tleXNDYWNoZWQiLCJnZW5TdGF0aWNLZXlzJDEiLCJvcHRpbWl6ZSIsIm1hcmtTdGF0aWMkMSIsInN0YXRpYyIsImJsb2NrIiwibWFya1N0YXRpY1Jvb3RzIiwic3RhdGljSW5Gb3IiLCJzdGF0aWNSb290IiwiaXNEaXJlY3RDaGlsZE9mVGVtcGxhdGVGb3IiLCJmbkV4cFJFIiwiZm5JbnZva2VSRSIsInNpbXBsZVBhdGhSRSIsImtleU5hbWVzIiwiZ2VuR3VhcmQiLCJtb2RpZmllckNvZGUiLCJnZW5IYW5kbGVycyIsInByZWZpeCIsInN0YXRpY0hhbmRsZXJzIiwiZHluYW1pY0hhbmRsZXJzIiwiaGFuZGxlckNvZGUiLCJnZW5IYW5kbGVyIiwiaXNNZXRob2RQYXRoIiwiaXNGdW5jdGlvbkV4cHJlc3Npb24iLCJpc0Z1bmN0aW9uSW52b2NhdGlvbiIsImdlbk1vZGlmaWVyQ29kZSIsImtleU1vZGlmaWVyIiwiZ2VuS2V5RmlsdGVyIiwiZ2VuRmlsdGVyQ29kZSIsImtleVZhbCIsImtleUNvZGUiLCJrZXlOYW1lIiwid3JhcExpc3RlbmVycyIsImJpbmQkMSIsIndyYXBEYXRhIiwiYmFzZURpcmVjdGl2ZXMiLCJDb2RlZ2VuU3RhdGUiLCJkYXRhR2VuRm5zIiwib25jZUlkIiwiZ2VuZXJhdGUiLCJhc3QiLCJzdGF0ZSIsImdlbkVsZW1lbnQiLCJzdGF0aWNQcm9jZXNzZWQiLCJnZW5TdGF0aWMiLCJvbmNlUHJvY2Vzc2VkIiwiZ2VuT25jZSIsImZvclByb2Nlc3NlZCIsImdlbkZvciIsImlmUHJvY2Vzc2VkIiwiZ2VuSWYiLCJnZW5TbG90IiwiZ2VuQ29tcG9uZW50IiwiZ2VuRGF0YSQyIiwiZ2VuQ2hpbGRyZW4iLCJvcmlnaW5hbFByZVN0YXRlIiwiYWx0R2VuIiwiYWx0RW1wdHkiLCJnZW5JZkNvbmRpdGlvbnMiLCJjb25kaXRpb25zIiwiZ2VuVGVybmFyeUV4cCIsImFsdEhlbHBlciIsImdlbkRpcmVjdGl2ZXMiLCJnZW5Qcm9wcyIsImdlblNjb3BlZFNsb3RzIiwiZ2VuSW5saW5lVGVtcGxhdGUiLCJuZWVkUnVudGltZSIsImhhc1J1bnRpbWUiLCJnZW4iLCJpbmxpbmVSZW5kZXJGbnMiLCJjb250YWluc1Nsb3RDaGlsZCIsImdlblNjb3BlZFNsb3QiLCJpc0xlZ2FjeVN5bnRheCIsInJldmVyc2VQcm94eSIsImNoZWNrU2tpcCIsImFsdEdlbkVsZW1lbnQiLCJhbHRHZW5Ob2RlIiwiZ2V0Tm9ybWFsaXphdGlvblR5cGUiLCJnZW5Ob2RlIiwibmVlZHNOb3JtYWxpemF0aW9uIiwiZ2VuQ29tbWVudCIsImdlblRleHQiLCJ0cmFuc2Zvcm1TcGVjaWFsTmV3bGluZXMiLCJiaW5kJCQxIiwiY29tcG9uZW50TmFtZSIsInN0YXRpY1Byb3BzIiwiZHluYW1pY1Byb3BzIiwicHJvaGliaXRlZEtleXdvcmRSRSIsInVuYXJ5T3BlcmF0b3JzUkUiLCJzdHJpcFN0cmluZ1JFIiwiZGV0ZWN0RXJyb3JzIiwiY2hlY2tOb2RlIiwiY2hlY2tFdmVudCIsInN0aXBwZWQiLCJrZXl3b3JkTWF0Y2giLCJjaGVja0ZvciIsImNoZWNrSWRlbnRpZmllciIsImlkZW50IiwiY2hlY2tFeHByZXNzaW9uIiwiZ2VuZXJhdGVDb2RlRnJhbWUiLCJsaW5lcyIsImxpbmVMZW5ndGgiLCJwYWQiLCJjcmVhdGVGdW5jdGlvbiIsImVycm9ycyIsImNyZWF0ZUNvbXBpbGVUb0Z1bmN0aW9uRm4iLCJjb21waWxlIiwid2FybiQkMSIsInRpcHMiLCJmbkdlbkVycm9ycyIsImNyZWF0ZUNvbXBpbGVyQ3JlYXRvciIsImJhc2VDb21waWxlIiwiZmluYWxPcHRpb25zIiwibGVhZGluZ1NwYWNlTGVuZ3RoIiwiZGl2IiwiY3JlYXRlQ29tcGlsZXIiLCJnZXRTaG91bGREZWNvZGUiLCJocmVmIiwiaWRUb1RlbXBsYXRlIiwibW91bnQiLCJnZXRPdXRlckhUTUwiLCJvdXRlckhUTUwiLCJjb250YWluZXIiLCJkb2N1bWVudEVsZW1lbnQiLCJjb21waWxlVG9GdW5jdGlvbnMiLCJub3JtYWxpemVDb21wb25lbnQiLCJzY3JpcHQiLCJpc0Z1bmN0aW9uYWxUZW1wbGF0ZSIsIm1vZHVsZUlkZW50aWZpZXIiLCJzaGFkb3dNb2RlIiwiY3JlYXRlSW5qZWN0b3IiLCJjcmVhdGVJbmplY3RvclNTUiIsImNyZWF0ZUluamVjdG9yU2hhZG93IiwiX19WVUVfU1NSX0NPTlRFWFRfXyIsIl9yZWdpc3RlcmVkQ29tcG9uZW50cyIsIl9zc3JSZWdpc3RlciIsInNoYWRvd1Jvb3QiLCJvcmlnaW5hbFJlbmRlciIsImJlZm9yZUNyZWF0ZSIsImlzT2xkSUUiLCJhZGRTdHlsZSIsIkhFQUQiLCJoZWFkIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJncm91cCIsIm1lZGlhIiwiaWRzIiwiYnRvYSIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50Iiwic3R5bGVTaGVldCIsIlNlbGVjdCIsImRhdGFIYW5kbGVyIiwibmV3RGF0YSIsImNoYXJ0IiwiX2NoYXJ0IiwibmV3RGF0YXNldExhYmVscyIsImRhdGFzZXRzIiwib2xkRGF0YXNldExhYmVscyIsIm9sZExhYmVscyIsIm9sZERhdGFzZXRLZXlzIiwibmV3RGF0YXNldEtleXMiLCJkZWxldGlvbktleXMiLCJkZWxldGlvbktleSIsImxhYmVscyIsInhMYWJlbHMiLCJ5TGFiZWxzIiwicmVuZGVyQ2hhcnQiLCJjaGFydERhdGEiLCJTZWxlY3RDb21wb25lbnQiLCJfY29uc3RhbnRzIiwiU2VsZWN0RGF0YSIsInJlYWN0aXZlRGF0YSIsInJlYWN0aXZlUHJvcCIsImhlbHBlcnMiLCJ2YWx1ZU9yRGVmYXVsdCIsImxvb3BhYmxlIiwicmV2ZXJzZSIsImEwIiwiYTEiLCJpbGVuIiwidjAiLCJ2MSIsImFycmF5RXF1YWxzIiwia2xlbiIsInR2YWwiLCJzdmFsIiwibWVyZ2VJZiIsIm1lcmdlciIsIl9tZXJnZXIiLCJfbWVyZ2VySWYiLCJzZXRGbiIsImVhY2giLCJleHRlbnNpb25zIiwibWUiLCJDaGFydEVsZW1lbnQiLCJTdXJyb2dhdGUiLCJpbmhlcml0cyIsIl9fc3VwZXJfXyIsImNhbGxDYWxsYmFjayIsImZyb21JbmRleCIsImdldFZhbHVlT3JEZWZhdWx0IiwiZ2V0VmFsdWVBdEluZGV4T3JEZWZhdWx0IiwidmFsdWVBdEluZGV4T3JEZWZhdWx0IiwiZWZmZWN0cyIsImNvcyIsIlBJIiwic2luIiwicG93Iiwic3FydCIsImFzaW4iLCJlYXNlT3V0Qm91bmNlIiwiZWFzZUluQm91bmNlIiwiZWFzaW5nRWZmZWN0cyIsImNsZWFyUmVjdCIsIndpZHRoIiwiaGVpZ2h0IiwieCIsInkiLCJyYWRpdXMiLCJyIiwibW92ZVRvIiwibGluZVRvIiwiYXJjVG8iLCJjbG9zZVBhdGgiLCJyZWN0Iiwicm90YXRpb24iLCJlZGdlTGVuZ3RoIiwieE9mZnNldCIsInlPZmZzZXQiLCJzYXZlIiwidHJhbnNsYXRlIiwicm90YXRlIiwiYmVnaW5QYXRoIiwiYXJjIiwiU1FSVDIiLCJsZWZ0WCIsInRvcFkiLCJzaWRlU2l6ZSIsInJvdW5kZWRSZWN0IiwiZmlsbCIsInN0cm9rZSIsInJlc3RvcmUiLCJkcmF3SW1hZ2UiLCJhcmVhIiwiYm90dG9tIiwiY2xpcCIsInByZXZpb3VzIiwiZmxpcCIsInN0ZXBwZWRMaW5lIiwidGVuc2lvbiIsImJlemllckN1cnZlVG8iLCJjb250cm9sUG9pbnRQcmV2aW91c1giLCJjb250cm9sUG9pbnROZXh0WCIsImNvbnRyb2xQb2ludFByZXZpb3VzWSIsImNvbnRyb2xQb2ludE5leHRZIiwiZHJhd1JvdW5kZWRSZWN0YW5nbGUiLCJpbnB1dHMiLCJyZXF1aXJlJCQwIiwicmVxdWlyZSQkMSIsInJlcXVpcmUkJDIiLCJyZXF1aXJlJCQzIiwic2NvcGUiLCJkZWZhdWx0cyIsIl9zZXQiLCJDaGFydCIsImNvbnN0cnVjdCIsInJnYjJoc2wiLCJyZ2IyaHN2IiwicmdiMmh3YiIsInJnYjJjbXlrIiwicmdiMmtleXdvcmQiLCJyZ2IyeHl6IiwicmdiMmxhYiIsInJnYjJsY2giLCJoc2wycmdiIiwiaHNsMmhzdiIsImhzbDJod2IiLCJoc2wyY215ayIsImhzbDJrZXl3b3JkIiwiaHN2MnJnYiIsImhzdjJoc2wiLCJoc3YyaHdiIiwiaHN2MmNteWsiLCJoc3Yya2V5d29yZCIsImh3YjJyZ2IiLCJod2IyaHNsIiwiaHdiMmhzdiIsImh3YjJjbXlrIiwiaHdiMmtleXdvcmQiLCJjbXlrMnJnYiIsImNteWsyaHNsIiwiY215azJoc3YiLCJjbXlrMmh3YiIsImNteWsya2V5d29yZCIsImtleXdvcmQycmdiIiwia2V5d29yZDJoc2wiLCJrZXl3b3JkMmhzdiIsImtleXdvcmQyaHdiIiwia2V5d29yZDJjbXlrIiwia2V5d29yZDJsYWIiLCJrZXl3b3JkMnh5eiIsInh5ejJyZ2IiLCJ4eXoybGFiIiwieHl6MmxjaCIsImxhYjJ4eXoiLCJsYWIycmdiIiwibGFiMmxjaCIsImxjaDJsYWIiLCJsY2gyeHl6IiwibGNoMnJnYiIsInJnYiIsImciLCJkZWx0YSIsInJldmVyc2VLZXl3b3JkcyIsInh5eiIsInoiLCJoc2wiLCJ0MSIsInQyIiwidDMiLCJoc3YiLCJoaSIsImYiLCJxIiwic2wiLCJod2IiLCJ3aCIsImJsIiwicmF0aW8iLCJjbXlrIiwibGFiIiwieTIiLCJhdGFuMiIsImxjaCIsImhyIiwia2V5d29yZCIsImNzc0tleXdvcmRzIiwiQ29udmVydGVyIiwiY29udmVyc2lvbnMiLCJwYWlyIiwicm91bmQiLCJjb252cyIsInJvdXRlU3BhY2UiLCJzcGFjZSIsImdldFZhbHVlcyIsInNldFZhbHVlcyIsInZhbHMiLCJmc3BhY2UiLCJnZXRSZ2JhIiwiZ2V0SHNsYSIsImdldFJnYiIsImdldEhzbCIsImdldEh3YiIsImdldEFscGhhIiwiaGV4U3RyaW5nIiwicmdiU3RyaW5nIiwicmdiYVN0cmluZyIsInBlcmNlbnRTdHJpbmciLCJwZXJjZW50YVN0cmluZyIsImhzbFN0cmluZyIsImhzbGFTdHJpbmciLCJod2JTdHJpbmciLCJoZXhBbHBoYSIsImNvbG9yTmFtZXMiLCJzY2FsZSIsImFscGhhIiwicmdiYSIsImhzbGEiLCJoZXhEb3VibGUiLCJyZXZlcnNlTmFtZXMiLCJudW0iLCJDb2xvciIsInJlZCIsImxpZ2h0bmVzcyIsInciLCJ3aGl0ZW5lc3MiLCJjeWFuIiwic2V0U3BhY2UiLCJzZXRDaGFubmVsIiwibHVtIiwiY2hhbiIsImNvbG9yMiIsImx1bTEiLCJsdW1pbm9zaXR5IiwibHVtMiIsImNvbnRyYXN0UmF0aW8iLCJjb250cmFzdCIsImRhcmsiLCJkZWdyZWVzIiwiaHVlIiwibWl4aW5Db2xvciIsIndlaWdodCIsIncxIiwidzIiLCJncmVlbiIsImJsdWUiLCJzcGFjZXMiLCJtYXhlcyIsImNhcHBlZCIsImNoYW5zIiwic25hbWUiLCJzdmFsdWVzIiwiZmlsdGVyQnlQb3NpdGlvbiIsInBvc2l0aW9uIiwid2hlcmUiLCJzb3J0QnlXZWlnaHQiLCJfdG1wSW5kZXhfIiwiYm94ZXMiLCJmdWxsV2lkdGgiLCJsYXlvdXRJdGVtIiwibGF5b3V0T3B0aW9ucyIsImxheW91dCIsInBhZGRpbmciLCJ0b1BhZGRpbmciLCJsZWZ0UGFkZGluZyIsInJpZ2h0UGFkZGluZyIsInRvcFBhZGRpbmciLCJib3R0b21QYWRkaW5nIiwibGVmdEJveGVzIiwicmlnaHRCb3hlcyIsInRvcEJveGVzIiwiYm90dG9tQm94ZXMiLCJjaGFydEFyZWFCb3hlcyIsImNoYXJ0V2lkdGgiLCJjaGFydEhlaWdodCIsImNoYXJ0QXJlYUhlaWdodCIsInZlcnRpY2FsQm94V2lkdGgiLCJob3Jpem9udGFsQm94SGVpZ2h0IiwibWF4Q2hhcnRBcmVhV2lkdGgiLCJtYXhDaGFydEFyZWFIZWlnaHQiLCJtaW5Cb3hTaXplcyIsImJveCIsIm1pblNpemUiLCJpc0hvcml6b250YWwiLCJtYXhIb3Jpem9udGFsTGVmdFBhZGRpbmciLCJtYXhIb3Jpem9udGFsUmlnaHRQYWRkaW5nIiwibWF4VmVydGljYWxUb3BQYWRkaW5nIiwibWF4VmVydGljYWxCb3R0b21QYWRkaW5nIiwiaG9yaXpvbnRhbEJveCIsImdldFBhZGRpbmciLCJib3hQYWRkaW5nIiwidmVydGljYWxCb3giLCJ0b3RhbExlZnRCb3hlc1dpZHRoIiwidG90YWxSaWdodEJveGVzV2lkdGgiLCJ0b3RhbFRvcEJveGVzSGVpZ2h0IiwidG90YWxCb3R0b21Cb3hlc0hlaWdodCIsImZpdEJveCIsIm1pbkJveFNpemUiLCJmaW5kTmV4dFdoZXJlIiwic2NhbGVNYXJnaW4iLCJsZWZ0UGFkZGluZ0FkZGl0aW9uIiwidG9wUGFkZGluZ0FkZGl0aW9uIiwibmV3TWF4Q2hhcnRBcmVhSGVpZ2h0IiwibmV3TWF4Q2hhcnRBcmVhV2lkdGgiLCJwbGFjZUJveCIsImNoYXJ0QXJlYSIsIm1pbkJveCIsInNjYWxlQ29uc3RydWN0b3IiLCJzY2FsZURlZmF1bHRzIiwiY29uc3RydWN0b3JzIiwiYWRkaXRpb25zIiwic2NhbGVzIiwiYWRkQm94IiwicGFyc2VNYXhTdHlsZSIsInBhcmVudFByb3BlcnR5IiwidmFsdWVJblBpeGVscyIsImlzQ29uc3RyYWluZWRWYWx1ZSIsImdldENvbnN0cmFpbnREaW1lbnNpb24iLCJkb21Ob2RlIiwibWF4U3R5bGUiLCJwZXJjZW50YWdlUHJvcGVydHkiLCJkZWZhdWx0VmlldyIsIl9nZXRQYXJlbnROb2RlIiwiY29uc3RyYWluZWROb2RlIiwiY29uc3RyYWluZWRDb250YWluZXIiLCJoYXNDTm9kZSIsImhhc0NDb250YWluZXIiLCJpbmZpbml0eSIsIlBPU0lUSVZFX0lORklOSVRZIiwiY29uZmlnTWVyZ2UiLCJzY2FsZU1lcmdlIiwic2NhbGVTZXJ2aWNlIiwiZ2V0U2NhbGVEZWZhdWx0cyIsInNsZW4iLCJmaWx0ZXJDYWxsYmFjayIsImZpbHRlcmVkIiwiZmluZEluZGV4IiwiYXJyYXlUb1NlYXJjaCIsInN0YXJ0SW5kZXgiLCJpc051bGxPclVuZGVmIiwiY3VycmVudEl0ZW0iLCJmaW5kUHJldmlvdXNXaGVyZSIsImlzTnVtYmVyIiwiYWxtb3N0RXF1YWxzIiwiZXBzaWxvbiIsImFicyIsImFsbW9zdFdob2xlIiwicm91bmRlZCIsIk5FR0FUSVZFX0lORklOSVRZIiwic2lnbiIsImxvZzEwIiwiZXhwb25lbnQiLCJMT0cxMEUiLCJwb3dlck9mMTAiLCJ0b1JhZGlhbnMiLCJ0b0RlZ3JlZXMiLCJyYWRpYW5zIiwiZ2V0QW5nbGVGcm9tUG9pbnQiLCJjZW50cmVQb2ludCIsImFuZ2xlUG9pbnQiLCJkaXN0YW5jZUZyb21YQ2VudGVyIiwiZGlzdGFuY2VGcm9tWUNlbnRlciIsInJhZGlhbERpc3RhbmNlRnJvbUNlbnRlciIsImFuZ2xlIiwiZGlzdGFuY2VCZXR3ZWVuUG9pbnRzIiwicHQxIiwicHQyIiwiYWxpYXNQaXhlbCIsInBpeGVsV2lkdGgiLCJzcGxpbmVDdXJ2ZSIsImZpcnN0UG9pbnQiLCJtaWRkbGVQb2ludCIsImFmdGVyUG9pbnQiLCJza2lwIiwiZDAxIiwiZDEyIiwiczAxIiwiczEyIiwiZmEiLCJmYiIsIkVQU0lMT04iLCJzcGxpbmVDdXJ2ZU1vbm90b25lIiwicG9pbnRzIiwicG9pbnRCZWZvcmUiLCJwb2ludEN1cnJlbnQiLCJwb2ludEFmdGVyIiwiYWxwaGFLIiwiYmV0YUsiLCJ0YXVLIiwic3F1YXJlZE1hZ25pdHVkZSIsImRlbHRhWCIsInBvaW50c1dpdGhUYW5nZW50cyIsInBvaW50IiwiX21vZGVsIiwicG9pbnRzTGVuIiwic2xvcGVEZWx0YVgiLCJkZWx0YUsiLCJtSyIsIm5leHRJdGVtIiwibG9vcCIsInByZXZpb3VzSXRlbSIsIm5pY2VOdW0iLCJmcmFjdGlvbiIsInJlcXVlc3RBbmltRnJhbWUiLCJ3ZWJraXRSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJtb3pSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJvUmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwibXNSZXF1ZXN0QW5pbWF0aW9uRnJhbWUiLCJnZXRSZWxhdGl2ZVBvc2l0aW9uIiwiZXZ0IiwibW91c2VYIiwibW91c2VZIiwib3JpZ2luYWxFdmVudCIsImNhbnZhcyIsInNyY0VsZW1lbnQiLCJib3VuZGluZ1JlY3QiLCJ0b3VjaGVzIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdUb3AiLCJwYWRkaW5nUmlnaHQiLCJwYWRkaW5nQm90dG9tIiwiY3VycmVudERldmljZVBpeGVsUmF0aW8iLCJnZXRDb25zdHJhaW50V2lkdGgiLCJnZXRDb25zdHJhaW50SGVpZ2h0IiwiX2NhbGN1bGF0ZVBhZGRpbmciLCJwYXJlbnREaW1lbnNpb24iLCJob3N0IiwiZ2V0TWF4aW11bVdpZHRoIiwiY2xpZW50V2lkdGgiLCJjdyIsImdldE1heGltdW1IZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJjdXJyZW50U3R5bGUiLCJnZXRQcm9wZXJ0eVZhbHVlIiwicmV0aW5hU2NhbGUiLCJmb3JjZVJhdGlvIiwicGl4ZWxSYXRpbyIsImRldmljZVBpeGVsUmF0aW8iLCJmb250U3RyaW5nIiwicGl4ZWxTaXplIiwiZm9udFN0eWxlIiwiZm9udEZhbWlseSIsImxvbmdlc3RUZXh0IiwiZm9udCIsImFycmF5T2ZUaGluZ3MiLCJnYyIsImdhcmJhZ2VDb2xsZWN0IiwibG9uZ2VzdCIsInRoaW5nIiwibWVhc3VyZVRleHQiLCJuZXN0ZWRUaGluZyIsImdjTGVuIiwidGV4dFdpZHRoIiwibnVtYmVyT2ZMYWJlbExpbmVzIiwibnVtYmVyT2ZMaW5lcyIsImNvbG9yIiwiQ2FudmFzR3JhZGllbnQiLCJkZWZhdWx0Q29sb3IiLCJnZXRIb3ZlckNvbG9yIiwiY29sb3JWYWx1ZSIsIkNhbnZhc1BhdHRlcm4iLCJzYXR1cmF0ZSIsImRhcmtlbiIsImVhc2UiLCJvcmlnaW4iLCJjMCIsImMxIiwibWl4IiwiRWxlbWVudCIsImNvbmZpZ3VyYXRpb24iLCJpbml0aWFsaXplIiwiaGlkZGVuIiwiX3ZpZXciLCJfc3RhcnQiLCJhbmltYXRpb24iLCJhbmltYXRpb25zIiwiYW5pbWF0aW5nIiwicmVxdWVzdCIsInN0YXJ0RGlnZXN0Iiwic3RhcnRUaW1lIiwiZnJhbWVzVG9Ecm9wIiwiZHJvcEZyYW1lcyIsImVuZFRpbWUiLCJmcmFtZUR1cmF0aW9uIiwiY3VycmVudFN0ZXAiLCJudW1TdGVwcyIsIm9uQW5pbWF0aW9uUHJvZ3Jlc3MiLCJvbkFuaW1hdGlvbkNvbXBsZXRlIiwiaG92ZXJSYWRpdXMiLCJjaGFydFgiLCJjaGFydFkiLCJwb2ludFJlbGF0aXZlUG9zaXRpb24iLCJkaXN0YW5jZSIsInN0YXJ0QW5nbGUiLCJlbmRBbmdsZSIsImJldHdlZW5BbmdsZXMiLCJ3aXRoaW5SYWRpdXMiLCJpbm5lclJhZGl1cyIsIm91dGVyUmFkaXVzIiwiaGFsZkFuZ2xlIiwiaGFsZlJhZGl1cyIsImNlbnRyZUFuZ2xlIiwicmFuZ2VGcm9tQ2VudHJlIiwic0EiLCJlQSIsInN0cm9rZVN0eWxlIiwiYm9yZGVyQ29sb3IiLCJsaW5lV2lkdGgiLCJib3JkZXJXaWR0aCIsImZpbGxTdHlsZSIsImJhY2tncm91bmRDb2xvciIsImxpbmVKb2luIiwiZ2xvYmFsRGVmYXVsdHMiLCJjdXJyZW50Vk0iLCJzcGFuR2FwcyIsIl9jaGlsZHJlbiIsImdsb2JhbE9wdGlvbkxpbmVFbGVtZW50cyIsImVsZW1lbnRzIiwibGluZSIsImxhc3REcmF3bkluZGV4IiwiX2xvb3AiLCJsaW5lQ2FwIiwiYm9yZGVyQ2FwU3R5bGUiLCJzZXRMaW5lRGFzaCIsImJvcmRlckRhc2giLCJsaW5lRGFzaE9mZnNldCIsImJvcmRlckRhc2hPZmZzZXQiLCJib3JkZXJKb2luU3R5bGUiLCJ4UmFuZ2UiLCJoaXRSYWRpdXMiLCJ5UmFuZ2UiLCJwb2ludFN0eWxlIiwiZHJhd1BvaW50IiwiaXNWZXJ0aWNhbCIsImJhciIsImdldEJhckJvdW5kcyIsIngxIiwieDIiLCJ5MSIsImhhbGZXaWR0aCIsImhhbGZIZWlnaHQiLCJzaWduWCIsInNpZ25ZIiwiYm9yZGVyU2tpcHBlZCIsImhvcml6b250YWwiLCJiYXJTaXplIiwiaGFsZlN0cm9rZSIsImJvcmRlckxlZnQiLCJib3JkZXJSaWdodCIsImJvcmRlclRvcCIsImJvcmRlckJvdHRvbSIsImNvcm5lcnMiLCJzdGFydENvcm5lciIsImNvcm5lckF0IiwiY29ybmVyIiwiaW5SYW5nZSIsImJvdW5kcyIsInBhcnNlVmlzaWJsZUl0ZW1zIiwibWV0YSIsImpsZW4iLCJpc0RhdGFzZXRWaXNpYmxlIiwiZ2V0RGF0YXNldE1ldGEiLCJnZXRJbnRlcnNlY3RJdGVtcyIsImdldE5lYXJlc3RJdGVtcyIsImludGVyc2VjdCIsImRpc3RhbmNlTWV0cmljIiwibWluRGlzdGFuY2UiLCJuZWFyZXN0SXRlbXMiLCJjZW50ZXIiLCJnZXRDZW50ZXJQb2ludCIsImdldERpc3RhbmNlTWV0cmljRm9yQXhpcyIsImF4aXMiLCJ1c2VYIiwidXNlWSIsImRlbHRhWSIsImluZGV4TW9kZSIsImRhdGFzZXRJbmRleCIsIl9pbmRleCIsIl9kYXRhc2V0SW5kZXgiLCJnZXRBcmVhIiwiaW50ZXJzZWN0c0l0ZW0iLCJpblhSYW5nZSIsImluWVJhbmdlIiwiZ2V0Q29udGV4dCIsIkVYUEFORE9fS0VZIiwiQ1NTX1BSRUZJWCIsIkNTU19SRU5ERVJfTU9OSVRPUiIsIkNTU19SRU5ERVJfQU5JTUFUSU9OIiwiQU5JTUFUSU9OX1NUQVJUX0VWRU5UUyIsIkVWRU5UX1RZUEVTIiwicmVhZFVzZWRTaXplIiwiaW5pdENhbnZhcyIsInJlbmRlckhlaWdodCIsInJlbmRlcldpZHRoIiwiZGlzcGxheVdpZHRoIiwiYXNwZWN0UmF0aW8iLCJkaXNwbGF5SGVpZ2h0Iiwic3VwcG9ydHNFdmVudExpc3RlbmVyT3B0aW9ucyIsInN1cHBvcnRzIiwiZXZlbnRMaXN0ZW5lck9wdGlvbnMiLCJsaXN0ZW5lciIsIm5hdGl2ZUV2ZW50IiwiZnJvbU5hdGl2ZUV2ZW50IiwidGhyb3R0bGVkIiwidGlja2luZyIsImNyZWF0ZVJlc2l6ZXIiLCJyZXNpemVyIiwiY2xhc3NOYW1lIiwiZXhwYW5kIiwic2hyaW5rIiwiX3Jlc2V0Iiwic2Nyb2xsTGVmdCIsInNjcm9sbFRvcCIsIm9uU2Nyb2xsIiwid2F0Y2hGb3JSZW5kZXIiLCJleHBhbmRvIiwicmVuZGVyUHJveHkiLCJhbmltYXRpb25OYW1lIiwicmVmbG93Iiwib2Zmc2V0UGFyZW50IiwidW53YXRjaEZvclJlbmRlciIsImFkZFJlc2l6ZUxpc3RlbmVyIiwicmVtb3ZlUmVzaXplTGlzdGVuZXIiLCJpbmplY3RDU1MiLCJfc3R5bGUiLCJrZXlmcmFtZXMiLCJnZXRFbGVtZW50QnlJZCIsInByb3hpZXMiLCJhZGRFdmVudCIsInJlbW92ZUV2ZW50IiwiaW1wbGVtZW50YXRpb24iLCJkb20iLCJfZW5hYmxlZCIsImJhc2ljIiwicGx1Z2lucyIsIl9wbHVnaW5zIiwiX2NhY2hlSWQiLCJpZHgiLCJkZXNjcmlwdG9yIiwiZGVzY3JpcHRvcnMiLCIkcGx1Z2lucyIsInRpY2tWYWx1ZSIsInRpY2tzIiwibG9nRGVsdGEiLCJ0aWNrU3RyaW5nIiwibG9nVGljayIsInRvRXhwb25lbnRpYWwiLCJudW1EZWNpbWFsIiwidG9GaXhlZCIsInJlbWFpbiIsImxhYmVsc0Zyb21UaWNrcyIsImdldExpbmVWYWx1ZSIsIm9mZnNldEdyaWRMaW5lcyIsImxpbmVWYWx1ZSIsImdldFBpeGVsRm9yVGljayIsImNvbXB1dGVUZXh0U2l6ZSIsInRpY2siLCJwYXJzZUZvbnRPcHRpb25zIiwiZm9udFNpemUiLCJkZWZhdWx0Rm9udFNpemUiLCJkZWZhdWx0Rm9udFN0eWxlIiwiZmFtaWx5IiwiZGVmYXVsdEZvbnRGYW1pbHkiLCJwYXJzZUxpbmVIZWlnaHQiLCJ0b0xpbmVIZWlnaHQiLCJsaW5lSGVpZ2h0IiwiVGlja3MiLCJmb3JtYXR0ZXJzIiwiX3RpY2tzIiwibWlub3IiLCJtYWpvciIsImJlZm9yZVVwZGF0ZSIsIm1heFdpZHRoIiwibWF4SGVpZ2h0IiwibWFyZ2lucyIsImxvbmdlc3RUZXh0Q2FjaGUiLCJiZWZvcmVTZXREaW1lbnNpb25zIiwic2V0RGltZW5zaW9ucyIsImFmdGVyU2V0RGltZW5zaW9ucyIsImJlZm9yZURhdGFMaW1pdHMiLCJkZXRlcm1pbmVEYXRhTGltaXRzIiwiYWZ0ZXJEYXRhTGltaXRzIiwiYmVmb3JlQnVpbGRUaWNrcyIsImJ1aWxkVGlja3MiLCJhZnRlckJ1aWxkVGlja3MiLCJiZWZvcmVUaWNrVG9MYWJlbENvbnZlcnNpb24iLCJjb252ZXJ0VGlja3NUb0xhYmVscyIsImFmdGVyVGlja1RvTGFiZWxDb252ZXJzaW9uIiwiYmVmb3JlQ2FsY3VsYXRlVGlja1JvdGF0aW9uIiwiY2FsY3VsYXRlVGlja1JvdGF0aW9uIiwiYWZ0ZXJDYWxjdWxhdGVUaWNrUm90YXRpb24iLCJiZWZvcmVGaXQiLCJmaXQiLCJhZnRlckZpdCIsImFmdGVyVXBkYXRlIiwidGlja09wdHMiLCJ1c2VyQ2FsbGJhY2siLCJ0aWNrRm9udCIsImxhYmVsUm90YXRpb24iLCJtaW5Sb3RhdGlvbiIsImNvc1JvdGF0aW9uIiwib3JpZ2luYWxMYWJlbFdpZHRoIiwibGFiZWxXaWR0aCIsInRpY2tXaWR0aCIsIm1heFJvdGF0aW9uIiwiYW5nbGVSYWRpYW5zIiwic2NhbGVMYWJlbE9wdHMiLCJzY2FsZUxhYmVsIiwiZ3JpZExpbmVPcHRzIiwiZ3JpZExpbmVzIiwidGlja01hcmtMZW5ndGgiLCJpc0Z1bGxXaWR0aCIsImRyYXdUaWNrcyIsImRlbHRhSGVpZ2h0IiwibGFyZ2VzdFRleHRXaWR0aCIsInRhbGxlc3RMYWJlbEhlaWdodEluTGluZXMiLCJsaW5lU3BhY2UiLCJ0aWNrUGFkZGluZyIsImxvbmdlc3RMYWJlbFdpZHRoIiwibGFiZWxIZWlnaHQiLCJmaXJzdExhYmVsV2lkdGgiLCJsYXN0TGFiZWxXaWR0aCIsIm1pcnJvciIsImhhbmRsZU1hcmdpbnMiLCJyYXdWYWx1ZSIsIk5hTiIsImdldFJpZ2h0VmFsdWUiLCJwaXhlbCIsImZpbmFsVmFsIiwiaW5uZXJIZWlnaHQiLCJkZWNpbWFsIiwidmFsdWVPZmZzZXQiLCJnZXRQaXhlbEZvclZhbHVlIiwiZ2V0QmFzZVZhbHVlIiwiYmVnaW5BdFplcm8iLCJza2lwUmF0aW8iLCJtYXhUaWNrcyIsIm9wdGlvblRpY2tzIiwidGlja0NvdW50IiwibGFiZWxSb3RhdGlvblJhZGlhbnMiLCJsb25nZXN0Um90YXRlZExhYmVsIiwibWF4VGlja3NMaW1pdCIsImF1dG9Ta2lwUGFkZGluZyIsIm9wdGlvbk1ham9yVGlja3MiLCJpc1JvdGF0ZWQiLCJhdXRvU2tpcCIsIl9hdXRvU2tpcCIsImdldFRpY2tzIiwidGlja0ZvbnRDb2xvciIsImZvbnRDb2xvciIsImRlZmF1bHRGb250Q29sb3IiLCJtYWpvclRpY2tGb250Q29sb3IiLCJtYWpvclRpY2tGb250IiwidGwiLCJzY2FsZUxhYmVsRm9udENvbG9yIiwic2NhbGVMYWJlbEZvbnQiLCJzY2FsZUxhYmVsUGFkZGluZyIsIml0ZW1zVG9EcmF3IiwiYXhpc1dpZHRoIiwieFRpY2tTdGFydCIsInhUaWNrRW5kIiwieVRpY2tTdGFydCIsInlUaWNrRW5kIiwibGluZUNvbG9yIiwidHgxIiwidHkxIiwidHgyIiwidHkyIiwibGFiZWxYIiwibGFiZWxZIiwiemVyb0xpbmVJbmRleCIsInplcm9MaW5lV2lkdGgiLCJ6ZXJvTGluZUNvbG9yIiwiemVyb0xpbmVCb3JkZXJEYXNoIiwiemVyb0xpbmVCb3JkZXJEYXNoT2Zmc2V0IiwidGV4dEFsaWduIiwidGV4dEJhc2VsaW5lIiwibGFiZWxZT2Zmc2V0IiwieExpbmVWYWx1ZSIsImxhYmVsT2Zmc2V0IiwibGFiZWxYT2Zmc2V0IiwiaXNMZWZ0IiwieUxpbmVWYWx1ZSIsIml0ZW1Ub0RyYXciLCJnbFdpZHRoIiwiZ2xDb2xvciIsImdsQm9yZGVyRGFzaCIsImdsQm9yZGVyRGFzaE9mZnNldCIsImRyYXdPbkNoYXJ0QXJlYSIsImxpbmVDb3VudCIsImZpbGxUZXh0Iiwic2NhbGVMYWJlbFgiLCJzY2FsZUxhYmVsWSIsImhhbGZMaW5lSGVpZ2h0IiwibGFiZWxTdHJpbmciLCJkcmF3Qm9yZGVyIiwidG9vbHRpcEl0ZW1zIiwidGl0bGUiLCJsYWJlbENvdW50IiwieExhYmVsIiwidG9vbHRpcEl0ZW0iLCJ5TGFiZWwiLCJfb3B0aW9ucyIsImJvZHlGb250Q29sb3IiLCJwb3NpdGlvbmVycyIsImhhc1ZhbHVlIiwidG9vbHRpcFBvc2l0aW9uIiwiZXZlbnRQb3NpdGlvbiIsIm5lYXJlc3RFbGVtZW50IiwidHAiLCJtZXJnZU9wYWNpdHkiLCJjb2xvclN0cmluZyIsIm9wYWNpdHkiLCJwdXNoT3JDb25jYXQiLCJ0b1B1c2giLCJzcGxpdE5ld2xpbmVzIiwiZ2V0QmFzZU1vZGVsIiwidG9vbHRpcE9wdHMiLCJ4UGFkZGluZyIsInlQYWRkaW5nIiwieEFsaWduIiwieUFsaWduIiwiYm9keUZvbnRGYW1pbHkiLCJib2R5Rm9udFN0eWxlIiwiYm9keUFsaWduIiwiYm9keUZvbnRTaXplIiwiYm9keVNwYWNpbmciLCJ0aXRsZUZvbnRDb2xvciIsInRpdGxlRm9udEZhbWlseSIsInRpdGxlRm9udFN0eWxlIiwidGl0bGVGb250U2l6ZSIsInRpdGxlQWxpZ24iLCJ0aXRsZVNwYWNpbmciLCJ0aXRsZU1hcmdpbkJvdHRvbSIsImZvb3RlckZvbnRDb2xvciIsImZvb3RlckZvbnRGYW1pbHkiLCJmb290ZXJGb250U3R5bGUiLCJmb290ZXJGb250U2l6ZSIsImZvb3RlckFsaWduIiwiZm9vdGVyU3BhY2luZyIsImZvb3Rlck1hcmdpblRvcCIsImNhcmV0U2l6ZSIsImNvcm5lclJhZGl1cyIsIm11bHRpS2V5QmFja2dyb3VuZCIsImRpc3BsYXlDb2xvcnMiLCJnZXRCZWZvcmVBZnRlckJvZHlMaW5lcyIsIl9sYXN0QWN0aXZlIiwiYmVmb3JlVGl0bGUiLCJhZnRlclRpdGxlIiwiYmVmb3JlQm9keSIsImJvZHlJdGVtcyIsImJvZHlJdGVtIiwiYmVmb3JlTGFiZWwiLCJhZnRlciIsImFmdGVyTGFiZWwiLCJhZnRlckJvZHkiLCJiZWZvcmVGb290ZXIiLCJmb290ZXIiLCJhZnRlckZvb3RlciIsImNoYW5nZWQiLCJ4U2NhbGUiLCJ5U2NhbGUiLCJleGlzdGluZ01vZGVsIiwiX2FjdGl2ZSIsImFsaWdubWVudCIsImJhY2tncm91bmRQb2ludCIsInRvb2x0aXBTaXplIiwiY2FyZXRYIiwiY2FyZXRZIiwibGFiZWxDb2xvcnMiLCJsYWJlbFRleHRDb2xvcnMiLCJfZXZlbnRQb3NpdGlvbiIsIl94U2NhbGUiLCJfeVNjYWxlIiwiX3NjYWxlIiwiZ2V0TGFiZWxGb3JJbmRleCIsIml0ZW1Tb3J0IiwibGFiZWxDb2xvciIsImxhYmVsVGV4dENvbG9yIiwiZ2V0VGl0bGUiLCJnZXRCZWZvcmVCb2R5IiwiZ2V0Qm9keSIsImdldEFmdGVyQm9keSIsImdldEZvb3RlciIsImNhcmV0UGFkZGluZyIsImRhdGFQb2ludHMiLCJwYWRkaW5nQW5kU2l6ZSIsInJhZGl1c0FuZFBhZGRpbmciLCJnZXRCYWNrZ3JvdW5kUG9pbnQiLCJ0b29sdGlwIiwiY29tYmluZWRCb2R5TGVuZ3RoIiwidGl0bGVMaW5lQ291bnQiLCJmb290ZXJMaW5lQ291bnQiLCJ3aWR0aFBhZGRpbmciLCJtYXhMaW5lV2lkdGgiLCJfdGl0bGVGb250U3R5bGUiLCJfdGl0bGVGb250RmFtaWx5IiwiX2JvZHlGb250U3R5bGUiLCJfYm9keUZvbnRGYW1pbHkiLCJfZm9vdGVyRm9udFN0eWxlIiwiX2Zvb3RlckZvbnRGYW1pbHkiLCJnZXRUb29sdGlwU2l6ZSIsImxmIiwicmYiLCJvbGYiLCJvcmYiLCJ5ZiIsIm1pZFgiLCJtaWRZIiwiZGV0ZXJtaW5lQWxpZ25tZW50IiwiY3VzdG9tIiwidG9vbHRpcFBvaW50IiwiY2FyZXRQb3NpdGlvbiIsImdldENhcmV0UG9zaXRpb24iLCJ4MyIsInkzIiwicHRYIiwicHRZIiwicHQiLCJfdGl0bGVBbGlnbiIsIl9ib2R5QWxpZ24iLCJ4TGluZVBhZGRpbmciLCJmaWxsTGluZU9mVGV4dCIsImRyYXdDb2xvckJveGVzIiwidGV4dENvbG9yIiwibGVnZW5kQ29sb3JCYWNrZ3JvdW5kIiwiZmlsbFJlY3QiLCJzdHJva2VSZWN0IiwiX2Zvb3RlckFsaWduIiwiZHJhd0NhcmV0IiwicXVhZHJhdGljQ3VydmVUbyIsImhhc1Rvb2x0aXBDb250ZW50IiwiZW5hYmxlZCIsImRyYXdCYWNrZ3JvdW5kIiwiZHJhd1RpdGxlIiwiZHJhd0JvZHkiLCJkcmF3Rm9vdGVyIiwiZ2V0RWxlbWVudHNBdEV2ZW50Rm9yTW9kZSIsInBpdm90IiwicG9zaXRpb25Jc0hvcml6b250YWwiLCJpbnN0YW5jZXMiLCJjb250cm9sbGVycyIsImluaXRDb25maWciLCJhY3F1aXJlQ29udGV4dCIsIl9idWZmZXJlZFJlbmRlciIsImNvbnRyb2xsZXIiLCJiaW5kRXZlbnRzIiwicmVzcG9uc2l2ZSIsInJlc2l6ZSIsImVuc3VyZVNjYWxlc0hhdmVJRHMiLCJidWlsZE9yVXBkYXRlU2NhbGVzIiwiaW5pdFRvb2xUaXAiLCJjYW5jZWxBbmltYXRpb24iLCJtYWludGFpbkFzcGVjdFJhdGlvIiwibmV3V2lkdGgiLCJuZXdIZWlnaHQiLCJuZXdTaXplIiwib25SZXNpemUiLCJzdG9wIiwicmVzcG9uc2l2ZUFuaW1hdGlvbkR1cmF0aW9uIiwic2NhbGVzT3B0aW9ucyIsInNjYWxlT3B0aW9ucyIsInhBeGVzIiwieEF4aXNPcHRpb25zIiwieUF4ZXMiLCJ5QXhpc09wdGlvbnMiLCJ1cGRhdGVkIiwiZHR5cGUiLCJkcG9zaXRpb24iLCJzY2FsZVR5cGUiLCJzY2FsZUNsYXNzIiwiZ2V0U2NhbGVDb25zdHJ1Y3RvciIsIm1lcmdlVGlja3NPcHRpb25zIiwiaXNEZWZhdWx0IiwiaGFzVXBkYXRlZCIsImFkZFNjYWxlc1RvTGF5b3V0IiwibmV3Q29udHJvbGxlcnMiLCJkZXN0cm95RGF0YXNldE1ldGEiLCJ1cGRhdGVJbmRleCIsImxpbmtTY2FsZXMiLCJDb250cm9sbGVyQ2xhc3MiLCJyZXNldCIsInJlc2V0RWxlbWVudHMiLCJuZXdPcHRpb25zIiwicmVtb3ZlQm94IiwidG9vbHRpcHMiLCJfaW52YWxpZGF0ZSIsImJ1aWxkT3JVcGRhdGVDb250cm9sbGVycyIsImJ1aWxkT3JVcGRhdGVFbGVtZW50cyIsInVwZGF0ZUxheW91dCIsInVwZGF0ZURhdGFzZXRzIiwibGFzdEFjdGl2ZSIsIl9idWZmZXJlZFJlcXVlc3QiLCJlYXNpbmciLCJ1cGRhdGVEYXRhc2V0IiwiYW5pbWF0aW9uT3B0aW9ucyIsIm9uQ29tcGxldGUiLCJBbmltYXRpb24iLCJhbmltYXRpb25PYmplY3QiLCJlYXNpbmdGdW5jdGlvbiIsInN0ZXBEZWNpbWFsIiwiZHJhdyIsIm9uUHJvZ3Jlc3MiLCJhZGRBbmltYXRpb24iLCJlYXNpbmdWYWx1ZSIsImRyYXdEYXRhc2V0cyIsIl9kcmF3VG9vbHRpcCIsImRyYXdEYXRhc2V0IiwiSW50ZXJhY3Rpb24iLCJtb2RlcyIsInNpbmdsZSIsIl9tZXRhIiwibGVnZW5kQ2FsbGJhY2siLCJ1bmJpbmRFdmVudHMiLCJyZWxlYXNlQ29udGV4dCIsInRvRGF0YVVSTCIsIlRvb2x0aXAiLCJfbGlzdGVuZXJzIiwiZXZlbnRIYW5kbGVyIiwiaGFuZGxlRXZlbnQiLCJidWZmZXJlZFJlcXVlc3QiLCJob3ZlciIsImFuaW1hdGlvbkR1cmF0aW9uIiwiaG92ZXJPcHRpb25zIiwib25Ib3ZlciIsIm9uQ2xpY2siLCJ1cGRhdGVIb3ZlclN0eWxlIiwiQ29udHJvbGxlciIsImFycmF5RXZlbnRzIiwidW5saXN0ZW5BcnJheUV2ZW50cyIsInN0dWIiLCJfY2hhcnRqcyIsIkRhdGFzZXRDb250cm9sbGVyIiwiYWRkRWxlbWVudHMiLCJnZXRNZXRhIiwiZ2V0RGF0YXNldCIsInhBeGlzSUQiLCJ5QXhpc0lEIiwic2NhbGVJRCIsImRhdGFzZXRFbGVtZW50VHlwZSIsImRhdGFFbGVtZW50VHlwZSIsIm1ldGFEYXRhIiwiY3JlYXRlTWV0YURhdGEiLCJjcmVhdGVNZXRhRGF0YXNldCIsInVwZGF0ZUVsZW1lbnQiLCJyZXN5bmNFbGVtZW50cyIsIiRwcmV2aW91c1N0eWxlIiwiaG92ZXJCYWNrZ3JvdW5kQ29sb3IiLCJob3ZlckJvcmRlckNvbG9yIiwiaG92ZXJCb3JkZXJXaWR0aCIsIm51bU1ldGEiLCJudW1EYXRhIiwiaW5zZXJ0RWxlbWVudHMiLCJhZGRFbGVtZW50QW5kUmVzZXQiLCJnZW5lcmF0ZVRpY2tzIiwiZ2VuZXJhdGlvbk9wdGlvbnMiLCJkYXRhUmFuZ2UiLCJmYWN0b3IiLCJwcmVjaXNpb24iLCJzcGFjaW5nIiwic3RlcFNpemUiLCJuaWNlUmFuZ2UiLCJjZWlsIiwibmljZU1pbiIsIm5pY2VNYXgiLCJudW1TcGFjZXMiLCJMaW5lYXJTY2FsZUJhc2UiLCJTY2FsZSIsIm1pblNpZ24iLCJtYXhTaWduIiwic2V0TWluIiwic3VnZ2VzdGVkTWluIiwic2V0TWF4Iiwic3VnZ2VzdGVkTWF4IiwiZ2V0VGlja0xpbWl0IiwibnVtZXJpY0dlbmVyYXRvck9wdGlvbnMiLCJmaXhlZFN0ZXBTaXplIiwiaGFuZGxlRGlyZWN0aW9uYWxDaGFuZ2VzIiwidGlja3NBc051bWJlcnMiLCJEYXRhc2V0U2NhbGUiLCJnZXRMYWJlbHMiLCJtaW5JbmRleCIsIm1heEluZGV4IiwidmFsdWVDYXRlZ29yeSIsIm9mZnNldEFtdCIsInZhbHVlV2lkdGgiLCJ3aWR0aE9mZnNldCIsInZhbHVlSGVpZ2h0IiwiaGVpZ2h0T2Zmc2V0IiwiaG9yeiIsInZhbHVlRGltZW5zaW9uIiwicmVnaXN0ZXJTY2FsZVR5cGUiLCJkZWZhdWx0Q29uZmlnIiwibGluZWFyIiwiTGluZWFyU2NhbGUiLCJJRE1hdGNoZXMiLCJoYXNTdGFja3MiLCJ2YWx1ZXNQZXJTdGFjayIsInBvc2l0aXZlVmFsdWVzIiwibmVnYXRpdmVWYWx1ZXMiLCJyZWxhdGl2ZVBvaW50cyIsInZhbHVlc0ZvclR5cGUiLCJtaW5WYWwiLCJtYXhWYWwiLCJoYW5kbGVUaWNrUmFuZ2VPcHRpb25zIiwidGlja0ZvbnRTaXplIiwicmlnaHRWYWx1ZSIsImlubmVyRGltZW5zaW9uIiwic2lnbmlmaWNhbmQiLCJ0aWNrVmFsIiwiZW5kRXhwIiwiZW5kU2lnbmlmaWNhbmQiLCJtaW5Ob3RaZXJvIiwibGFzdFRpY2siLCJsb2dhcml0aG1pYyIsIkxvZ2FyaXRobWljU2NhbGUiLCJ0aWNrVmFsdWVzIiwiZmlyc3RUaWNrVmFsdWUiLCJfZ2V0Rmlyc3RUaWNrVmFsdWUiLCJnZXRWYWx1ZUNvdW50IiwiYW5nbGVMaW5lcyIsInBvaW50TGFiZWxzIiwiZ2V0UG9pbnRMYWJlbEZvbnRPcHRpb25zIiwicG9pbnRMYWJlbE9wdGlvbnMiLCJkZXRlcm1pbmVMaW1pdHMiLCJnZXRUZXh0QWxpZ25Gb3JBbmdsZSIsImFkanVzdFBvaW50UG9zaXRpb25Gb3JMYWJlbEhlaWdodCIsInRleHRTaXplIiwibnVtYmVyT3JaZXJvIiwiTGluZWFyUmFkaWFsU2NhbGUiLCJ4Q2VudGVyIiwieUNlbnRlciIsImRyYXdpbmdBcmVhIiwiYmFja2Ryb3BQYWRkaW5nWSIsImxhcmdlc3RQb3NzaWJsZVJhZGl1cyIsInBvaW50UG9zaXRpb24iLCJwbEZvbnQiLCJmdXJ0aGVzdExpbWl0cyIsImZ1cnRoZXN0QW5nbGVzIiwiX3BvaW50TGFiZWxTaXplcyIsInZhbHVlQ291bnQiLCJnZXRQb2ludFBvc2l0aW9uIiwiZ2V0SW5kZXhBbmdsZSIsImhMaW1pdHMiLCJ2TGltaXRzIiwic2V0UmVkdWN0aW9ucyIsInNldENlbnRlclBvaW50IiwicmFkaXVzUmVkdWN0aW9uTGVmdCIsInJhZGl1c1JlZHVjdGlvblJpZ2h0IiwicmFkaXVzUmVkdWN0aW9uVG9wIiwicmFkaXVzUmVkdWN0aW9uQm90dG9tIiwibGVmdE1vdmVtZW50IiwicmlnaHRNb3ZlbWVudCIsInRvcE1vdmVtZW50IiwiYm90dG9tTW92ZW1lbnQiLCJtYXhSaWdodCIsIm1heExlZnQiLCJtYXhUb3AiLCJtYXhCb3R0b20iLCJzY2FsaW5nRmFjdG9yIiwiZGlzdGFuY2VGcm9tQ2VudGVyIiwidGhpc0FuZ2xlIiwiZ2V0RGlzdGFuY2VGcm9tQ2VudGVyRm9yVmFsdWUiLCJnZXRQb2ludFBvc2l0aW9uRm9yVmFsdWUiLCJ0aWNrRm9udFN0eWxlIiwidGlja0ZvbnRGYW1pbHkiLCJ0aWNrTGFiZWxGb250IiwieUNlbnRlck9mZnNldCIsInNob3dMYWJlbEJhY2tkcm9wIiwiYmFja2Ryb3BDb2xvciIsImJhY2tkcm9wUGFkZGluZ1giLCJhbmdsZUxpbmVPcHRzIiwicG9pbnRMYWJlbE9wdHMiLCJvdXRlckRpc3RhbmNlIiwib3V0ZXJQb3NpdGlvbiIsInBvaW50TGFiZWxQb3NpdGlvbiIsInBvaW50TGFiZWxGb250Q29sb3IiLCJob29rQ2FsbGJhY2siLCJpbnB1dCIsImlzVW5kZWZpbmVkIiwiaXNEYXRlIiwiaGFzT3duUHJvcCIsImNyZWF0ZVVUQyIsImZvcm1hdCIsImxvY2FsZSIsInN0cmljdCIsImNyZWF0ZUxvY2FsT3JVVEMiLCJ1dGMiLCJnZXRQYXJzaW5nRmxhZ3MiLCJfcGYiLCJpc1ZhbGlkIiwiX2lzVmFsaWQiLCJmbGFncyIsInBhcnNlZFBhcnRzIiwicGFyc2VkRGF0ZVBhcnRzIiwiaXNOb3dWYWxpZCIsIm92ZXJmbG93IiwiZW1wdHkiLCJpbnZhbGlkTW9udGgiLCJpbnZhbGlkV2Vla2RheSIsIndlZWtkYXlNaXNtYXRjaCIsIm51bGxJbnB1dCIsImludmFsaWRGb3JtYXQiLCJ1c2VySW52YWxpZGF0ZWQiLCJtZXJpZGllbSIsIl9zdHJpY3QiLCJjaGFyc0xlZnRPdmVyIiwidW51c2VkVG9rZW5zIiwiYmlnSG91ciIsImNyZWF0ZUludmFsaWQiLCJmdW4iLCJtb21lbnRQcm9wZXJ0aWVzIiwiY29weUNvbmZpZyIsIl9pc0FNb21lbnRPYmplY3QiLCJfdHptIiwiX2lzVVRDIiwiX29mZnNldCIsIl9sb2NhbGUiLCJ1cGRhdGVJblByb2dyZXNzIiwiTW9tZW50IiwidXBkYXRlT2Zmc2V0IiwiaXNNb21lbnQiLCJhYnNGbG9vciIsInRvSW50IiwiYXJndW1lbnRGb3JDb2VyY2lvbiIsImNvZXJjZWROdW1iZXIiLCJjb21wYXJlQXJyYXlzIiwiYXJyYXkxIiwiYXJyYXkyIiwiZG9udENvbnZlcnQiLCJsZW5ndGhEaWZmIiwiZGlmZnMiLCJzdXBwcmVzc0RlcHJlY2F0aW9uV2FybmluZ3MiLCJkZXByZWNhdGUiLCJmaXJzdFRpbWUiLCJkZXByZWNhdGlvbkhhbmRsZXIiLCJiYWJlbEhlbHBlcnMudHlwZW9mIiwiZGVwcmVjYXRpb25zIiwiZGVwcmVjYXRlU2ltcGxlIiwibWVyZ2VDb25maWdzIiwicGFyZW50Q29uZmlnIiwiY2hpbGRDb25maWciLCJMb2NhbGUiLCJhbGlhc2VzIiwiYWRkVW5pdEFsaWFzIiwidW5pdCIsInNob3J0aGFuZCIsImxvd2VyQ2FzZSIsIm5vcm1hbGl6ZVVuaXRzIiwidW5pdHMiLCJub3JtYWxpemVPYmplY3RVbml0cyIsImlucHV0T2JqZWN0Iiwibm9ybWFsaXplZFByb3AiLCJub3JtYWxpemVkSW5wdXQiLCJwcmlvcml0aWVzIiwiYWRkVW5pdFByaW9yaXR5IiwicHJpb3JpdHkiLCJ6ZXJvRmlsbCIsInRhcmdldExlbmd0aCIsImZvcmNlU2lnbiIsImFic051bWJlciIsInplcm9zVG9GaWxsIiwiZm9ybWF0dGluZ1Rva2VucyIsImxvY2FsRm9ybWF0dGluZ1Rva2VucyIsImZvcm1hdEZ1bmN0aW9ucyIsImZvcm1hdFRva2VuRnVuY3Rpb25zIiwiYWRkRm9ybWF0VG9rZW4iLCJ0b2tlbiIsInBhZGRlZCIsIm9yZGluYWwiLCJsb2NhbGVEYXRhIiwiZm9ybWF0TW9tZW50IiwiZXhwYW5kRm9ybWF0IiwibW9tIiwib3V0cHV0IiwibWFrZUZvcm1hdEZ1bmN0aW9uIiwiaW52YWxpZERhdGUiLCJyZXBsYWNlTG9uZ0RhdGVGb3JtYXRUb2tlbnMiLCJsb25nRGF0ZUZvcm1hdCIsIm1hdGNoMSIsIm1hdGNoMiIsIm1hdGNoMyIsIm1hdGNoNCIsIm1hdGNoNiIsIm1hdGNoMXRvMiIsIm1hdGNoM3RvNCIsIm1hdGNoNXRvNiIsIm1hdGNoMXRvMyIsIm1hdGNoMXRvNCIsIm1hdGNoMXRvNiIsIm1hdGNoVW5zaWduZWQiLCJtYXRjaFNpZ25lZCIsIm1hdGNoT2Zmc2V0IiwibWF0Y2hTaG9ydE9mZnNldCIsIm1hdGNoV29yZCIsInJlZ2V4ZXMiLCJhZGRSZWdleFRva2VuIiwicmVnZXgiLCJzdHJpY3RSZWdleCIsImlzU3RyaWN0IiwiZ2V0UGFyc2VSZWdleEZvclRva2VuIiwicmVnZXhFc2NhcGUiLCJtYXRjaGVkIiwicDEiLCJwMiIsInAzIiwicDQiLCJhZGRQYXJzZVRva2VuIiwiYWRkV2Vla1BhcnNlVG9rZW4iLCJfdyIsImFkZFRpbWVUb0FycmF5RnJvbVRva2VuIiwiX2EiLCJZRUFSIiwiTU9OVEgiLCJEQVRFIiwiSE9VUiIsIk1JTlVURSIsIlNFQ09ORCIsIk1JTExJU0VDT05EIiwiV0VFSyIsIldFRUtEQVkiLCJkYXlzSW5ZZWFyIiwieWVhciIsImlzTGVhcFllYXIiLCJwYXJzZVR3b0RpZ2l0WWVhciIsImdldFNldFllYXIiLCJtYWtlR2V0U2V0Iiwia2VlcFRpbWUiLCJzZXQkMSIsIm1vbnRoIiwiZGF5c0luTW9udGgiLCJtb2RNb250aCIsIm1vbnRoc1Nob3J0IiwibW9udGhzIiwibW9udGhzU2hvcnRSZWdleCIsIm1vbnRoc1JlZ2V4IiwibW9udGhzUGFyc2UiLCJNT05USFNfSU5fRk9STUFUIiwiZGVmYXVsdExvY2FsZU1vbnRocyIsImRlZmF1bHRMb2NhbGVNb250aHNTaG9ydCIsInNldE1vbnRoIiwiZGF5T2ZNb250aCIsImdldFNldE1vbnRoIiwiZGVmYXVsdE1vbnRoc1Nob3J0UmVnZXgiLCJkZWZhdWx0TW9udGhzUmVnZXgiLCJjb21wdXRlTW9udGhzUGFyc2UiLCJjbXBMZW5SZXYiLCJzaG9ydFBpZWNlcyIsImxvbmdQaWVjZXMiLCJtaXhlZFBpZWNlcyIsIl9tb250aHNSZWdleCIsIl9tb250aHNTaG9ydFJlZ2V4IiwiX21vbnRoc1N0cmljdFJlZ2V4IiwiX21vbnRoc1Nob3J0U3RyaWN0UmVnZXgiLCJjcmVhdGVVVENEYXRlIiwiVVRDIiwiZ2V0VVRDRnVsbFllYXIiLCJzZXRVVENGdWxsWWVhciIsImZpcnN0V2Vla09mZnNldCIsImRvdyIsImRveSIsImZ3ZCIsImdldFVUQ0RheSIsImZ3ZGx3IiwiZGF5T2ZZZWFyRnJvbVdlZWtzIiwid2VlayIsIndlZWtkYXkiLCJyZXNZZWFyIiwicmVzRGF5T2ZZZWFyIiwibG9jYWxXZWVrZGF5Iiwid2Vla09mZnNldCIsImRheU9mWWVhciIsIndlZWtPZlllYXIiLCJyZXNXZWVrIiwid2Vla3NJblllYXIiLCJ3ZWVrT2Zmc2V0TmV4dCIsInNoaWZ0V2Vla2RheXMiLCJ3cyIsIndlZWtkYXlzTWluIiwid2Vla2RheXNTaG9ydCIsIndlZWtkYXlzIiwid2Vla2RheXNNaW5SZWdleCIsIndlZWtkYXlzU2hvcnRSZWdleCIsIndlZWtkYXlzUmVnZXgiLCJ3ZWVrZGF5c1BhcnNlIiwiZGVmYXVsdExvY2FsZVdlZWtkYXlzIiwiZGVmYXVsdExvY2FsZVdlZWtkYXlzU2hvcnQiLCJkZWZhdWx0TG9jYWxlV2Vla2RheXNNaW4iLCJkZWZhdWx0V2Vla2RheXNSZWdleCIsImRlZmF1bHRXZWVrZGF5c1Nob3J0UmVnZXgiLCJkZWZhdWx0V2Vla2RheXNNaW5SZWdleCIsImNvbXB1dGVXZWVrZGF5c1BhcnNlIiwibWlucCIsInNob3J0cCIsImxvbmdwIiwibWluUGllY2VzIiwiZGF5IiwiX3dlZWtkYXlzUmVnZXgiLCJfd2Vla2RheXNTaG9ydFJlZ2V4IiwiX3dlZWtkYXlzTWluUmVnZXgiLCJfd2Vla2RheXNTdHJpY3RSZWdleCIsIl93ZWVrZGF5c1Nob3J0U3RyaWN0UmVnZXgiLCJfd2Vla2RheXNNaW5TdHJpY3RSZWdleCIsImhGb3JtYXQiLCJob3VycyIsImxvd2VyY2FzZSIsIm1pbnV0ZXMiLCJtYXRjaE1lcmlkaWVtIiwiX21lcmlkaWVtUGFyc2UiLCJzZWNvbmRzIiwia0lucHV0IiwiX2lzUG0iLCJpc1BNIiwiX21lcmlkaWVtIiwicG9zMSIsInBvczIiLCJnbG9iYWxMb2NhbGUiLCJnZXRTZXRIb3VyIiwiYmFzZUNvbmZpZyIsImxvY2FsZXMiLCJsb2NhbGVGYW1pbGllcyIsIm5vcm1hbGl6ZUxvY2FsZSIsImxvYWRMb2NhbGUiLCJvbGRMb2NhbGUiLCJfYWJiciIsImFsaWFzZWRSZXF1aXJlIiwiZ2V0U2V0R2xvYmFsTG9jYWxlIiwiZ2V0TG9jYWxlIiwiZGVmaW5lTG9jYWxlIiwiYWJiciIsIl9jb25maWciLCJwYXJlbnRMb2NhbGUiLCJuYW1lcyIsImNob29zZUxvY2FsZSIsImNoZWNrT3ZlcmZsb3ciLCJfb3ZlcmZsb3dEYXlPZlllYXIiLCJfb3ZlcmZsb3dXZWVrcyIsIl9vdmVyZmxvd1dlZWtkYXkiLCJjb25maWdGcm9tQXJyYXkiLCJjdXJyZW50RGF0ZSIsImV4cGVjdGVkV2Vla2RheSIsInllYXJUb1VzZSIsIm5vd1ZhbHVlIiwiX3VzZVVUQyIsImdldFVUQ01vbnRoIiwiZ2V0VVRDRGF0ZSIsImdldEZ1bGxZZWFyIiwiZ2V0TW9udGgiLCJnZXREYXRlIiwiY3VycmVudERhdGVBcnJheSIsIndlZWtZZWFyIiwidGVtcCIsIndlZWtkYXlPdmVyZmxvdyIsIkdHIiwiVyIsIkUiLCJjcmVhdGVMb2NhbCIsIl93ZWVrIiwiY3VyV2VlayIsImdnIiwiX2RheU9mWWVhciIsIl9uZXh0RGF5IiwiTSIsIm1zIiwic2V0RnVsbFllYXIiLCJnZXREYXkiLCJzZXRVVENNaW51dGVzIiwiZ2V0VVRDTWludXRlcyIsImV4dGVuZGVkSXNvUmVnZXgiLCJiYXNpY0lzb1JlZ2V4IiwidHpSZWdleCIsImlzb0RhdGVzIiwiaXNvVGltZXMiLCJhc3BOZXRKc29uUmVnZXgiLCJjb25maWdGcm9tSVNPIiwiYWxsb3dUaW1lIiwiZGF0ZUZvcm1hdCIsInRpbWVGb3JtYXQiLCJ0ekZvcm1hdCIsImlzbyIsInJmYzI4MjIiLCJleHRyYWN0RnJvbVJGQzI4MjJTdHJpbmdzIiwieWVhclN0ciIsIm1vbnRoU3RyIiwiZGF5U3RyIiwiaG91clN0ciIsIm1pbnV0ZVN0ciIsInNlY29uZFN0ciIsInVudHJ1bmNhdGVZZWFyIiwib2JzT2Zmc2V0cyIsImNvbmZpZ0Zyb21SRkMyODIyIiwicGFyc2VkQXJyYXkiLCJ3ZWVrZGF5U3RyIiwicGFyc2VkSW5wdXQiLCJ3ZWVrZGF5UHJvdmlkZWQiLCJ3ZWVrZGF5QWN0dWFsIiwiY2hlY2tXZWVrZGF5Iiwib2JzT2Zmc2V0IiwibWlsaXRhcnlPZmZzZXQiLCJudW1PZmZzZXQiLCJobSIsImNhbGN1bGF0ZU9mZnNldCIsImNvbmZpZ0Zyb21TdHJpbmdBbmRGb3JtYXQiLCJJU09fODYwMSIsIlJGQ18yODIyIiwic2tpcHBlZCIsInN0cmluZ0xlbmd0aCIsInRvdGFsUGFyc2VkSW5wdXRMZW5ndGgiLCJ1bnVzZWRJbnB1dCIsImhvdXIiLCJtZXJpZGllbUhvdXIiLCJpc1BtIiwicHJlcGFyZUNvbmZpZyIsInByZXBhcnNlIiwidGVtcENvbmZpZyIsImJlc3RNb21lbnQiLCJzY29yZVRvQmVhdCIsImN1cnJlbnRTY29yZSIsInNjb3JlIiwiY3JlYXRlRnJvbUlucHV0RmFsbGJhY2siLCJtaW51dGUiLCJzZWNvbmQiLCJtaWxsaXNlY29uZCIsImlzVVRDIiwiaXNPYmplY3RFbXB0eSIsInByb3RvdHlwZU1pbiIsInByb3RvdHlwZU1heCIsInBpY2tCeSIsIm1vbWVudHMiLCJvcmRlcmluZyIsIkR1cmF0aW9uIiwieWVhcnMiLCJxdWFydGVycyIsInF1YXJ0ZXIiLCJ3ZWVrcyIsImlzb1dlZWsiLCJkYXlzIiwibWlsbGlzZWNvbmRzIiwidW5pdEhhc0RlY2ltYWwiLCJpc0R1cmF0aW9uVmFsaWQiLCJfbWlsbGlzZWNvbmRzIiwiX2RheXMiLCJfbW9udGhzIiwiX2J1YmJsZSIsImlzRHVyYXRpb24iLCJhYnNSb3VuZCIsInNlcGFyYXRvciIsInV0Y09mZnNldCIsIm9mZnNldEZyb21TdHJpbmciLCJjaHVua09mZnNldCIsIm1hdGNoZXIiLCJjaHVuayIsInBhcnRzIiwiY2xvbmVXaXRoT2Zmc2V0IiwiZGlmZiIsInNldFRpbWUiLCJsb2NhbCIsImdldERhdGVPZmZzZXQiLCJnZXRUaW1lem9uZU9mZnNldCIsImlzVXRjIiwiYXNwTmV0UmVnZXgiLCJpc29SZWdleCIsImNyZWF0ZUR1cmF0aW9uIiwiZGlmZlJlcyIsInBhcnNlSXNvIiwiaXNCZWZvcmUiLCJwb3NpdGl2ZU1vbWVudHNEaWZmZXJlbmNlIiwiaW5wIiwiaXNBZnRlciIsImNyZWF0ZUFkZGVyIiwiZGlyZWN0aW9uIiwicGVyaW9kIiwiYWRkU3VidHJhY3QiLCJpc0FkZGluZyIsImludmFsaWQiLCJzdWJ0cmFjdCIsIm1vbnRoRGlmZiIsImFuY2hvcjIiLCJhZGp1c3QiLCJ3aG9sZU1vbnRoRGlmZiIsImFuY2hvciIsIm5ld0xvY2FsZURhdGEiLCJkZWZhdWx0Rm9ybWF0IiwiZGVmYXVsdEZvcm1hdFV0YyIsImxhbmciLCJNU19QRVJfU0VDT05EIiwiTVNfUEVSX01JTlVURSIsIk1TX1BFUl9IT1VSIiwiTVNfUEVSXzQwMF9ZRUFSUyIsIm1vZCQxIiwiZGl2aWRlbmQiLCJkaXZpc29yIiwibG9jYWxTdGFydE9mRGF0ZSIsInV0Y1N0YXJ0T2ZEYXRlIiwiYWRkV2Vla1llYXJGb3JtYXRUb2tlbiIsImdldFNldFdlZWtZZWFySGVscGVyIiwid2Vla3NUYXJnZXQiLCJkYXlPZlllYXJEYXRhIiwiaXNvV2Vla1llYXIiLCJfZGF5T2ZNb250aE9yZGluYWxQYXJzZSIsIl9vcmRpbmFsUGFyc2UiLCJfZGF5T2ZNb250aE9yZGluYWxQYXJzZUxlbmllbnQiLCJnZXRTZXREYXlPZk1vbnRoIiwiZ2V0U2V0TWludXRlIiwiZ2V0U2V0U2Vjb25kIiwicGFyc2VNcyIsImdldFNldE1pbGxpc2Vjb25kIiwicHJlUGFyc2VQb3N0Rm9ybWF0IiwiY2FsZW5kYXIiLCJ0aW1lIiwiZm9ybWF0cyIsInNvZCIsInN0YXJ0T2YiLCJjYWxlbmRhckZvcm1hdCIsImFzRmxvYXQiLCJ0aGF0Iiwiem9uZURlbHRhIiwiZW5kT2YiLCJzdGFydE9mRGF0ZSIsImlzb1dlZWtkYXkiLCJpbnB1dFN0cmluZyIsInBvc3Rmb3JtYXQiLCJ3aXRob3V0U3VmZml4IiwiaHVtYW5pemUiLCJmcm9tTm93IiwidG9Ob3ciLCJpbnZhbGlkQXQiLCJsb2NhbElucHV0IiwiaXNCZXR3ZWVuIiwiaW5jbHVzaXZpdHkiLCJsb2NhbEZyb20iLCJsb2NhbFRvIiwiaXNTYW1lIiwiaW5wdXRNcyIsImlzU2FtZU9yQWZ0ZXIiLCJpc1NhbWVPckJlZm9yZSIsInBhcnNpbmdGbGFncyIsInByaW9yaXRpemVkIiwidW5pdHNPYmoiLCJ1IiwiZ2V0UHJpb3JpdGl6ZWRVbml0cyIsInRvRGF0ZSIsInRvSVNPU3RyaW5nIiwia2VlcE9mZnNldCIsImluc3BlY3QiLCJ6b25lIiwiaXNMb2NhbCIsInN1ZmZpeCIsInRvSlNPTiIsInVuaXgiLCJjcmVhdGlvbkRhdGEiLCJpc29XZWVrcyIsIndlZWtJbmZvIiwiaXNvV2Vla3NJblllYXIiLCJwYXJzZVdlZWtkYXkiLCJwYXJzZUlzb1dlZWtkYXkiLCJrZWVwTG9jYWxUaW1lIiwia2VlcE1pbnV0ZXMiLCJsb2NhbEFkanVzdCIsIl9jaGFuZ2VJblByb2dyZXNzIiwicGFyc2Vab25lIiwidFpvbmUiLCJoYXNBbGlnbmVkSG91ck9mZnNldCIsImlzRFNUIiwiaXNVdGNPZmZzZXQiLCJ6b25lQWJiciIsInpvbmVOYW1lIiwiZGF0ZXMiLCJpc0RTVFNoaWZ0ZWQiLCJfaXNEU1RTaGlmdGVkIiwicHJvdG8kMSIsImdldCQxIiwiZmllbGQiLCJsaXN0TW9udGhzSW1wbCIsIm91dCIsImxpc3RXZWVrZGF5c0ltcGwiLCJsb2NhbGVTb3J0ZWQiLCJfY2FsZW5kYXIiLCJfbG9uZ0RhdGVGb3JtYXQiLCJmb3JtYXRVcHBlciIsIl9pbnZhbGlkRGF0ZSIsIl9vcmRpbmFsIiwicmVsYXRpdmVUaW1lIiwiaXNGdXR1cmUiLCJfcmVsYXRpdmVUaW1lIiwicGFzdEZ1dHVyZSIsImlzRm9ybWF0IiwiX21vbnRoc1Nob3J0IiwibW9udGhOYW1lIiwiX21vbnRoc1BhcnNlRXhhY3QiLCJpaSIsImxsYyIsInRvTG9jYWxlTG93ZXJDYXNlIiwiX21vbnRoc1BhcnNlIiwiX2xvbmdNb250aHNQYXJzZSIsIl9zaG9ydE1vbnRoc1BhcnNlIiwiZmlyc3REYXlPZlllYXIiLCJmaXJzdERheU9mV2VlayIsIl93ZWVrZGF5cyIsIl93ZWVrZGF5c01pbiIsIl93ZWVrZGF5c1Nob3J0Iiwid2Vla2RheU5hbWUiLCJfd2Vla2RheXNQYXJzZUV4YWN0IiwiX3dlZWtkYXlzUGFyc2UiLCJfc2hvcnRXZWVrZGF5c1BhcnNlIiwiX21pbldlZWtkYXlzUGFyc2UiLCJfZnVsbFdlZWtkYXlzUGFyc2UiLCJpc0xvd2VyIiwibGFuZ0RhdGEiLCJtYXRoQWJzIiwiYWRkU3VidHJhY3QkMSIsImFic0NlaWwiLCJkYXlzVG9Nb250aHMiLCJtb250aHNUb0RheXMiLCJtYWtlQXMiLCJhcyIsImFzTWlsbGlzZWNvbmRzIiwiYXNTZWNvbmRzIiwiYXNNaW51dGVzIiwiYXNIb3VycyIsImFzRGF5cyIsImFzV2Vla3MiLCJhc01vbnRocyIsImFzUXVhcnRlcnMiLCJhc1llYXJzIiwibWFrZUdldHRlciIsInRocmVzaG9sZHMiLCJhYnMkMSIsInRvSVNPU3RyaW5nJDEiLCJZIiwiRCIsInRvdGFsIiwidG90YWxTaWduIiwieW1TaWduIiwiZGF5c1NpZ24iLCJobXNTaWduIiwicHJvdG8kMiIsIm1vbnRoc0Zyb21EYXlzIiwid2l0aFN1ZmZpeCIsInBvc05lZ0R1cmF0aW9uIiwic3MiLCJyZWxhdGl2ZVRpbWUkMSIsInRvSXNvU3RyaW5nIiwidXBkYXRlTG9jYWxlIiwidG1wTG9jYWxlIiwicmVsYXRpdmVUaW1lUm91bmRpbmciLCJyb3VuZGluZ0Z1bmN0aW9uIiwicmVsYXRpdmVUaW1lVGhyZXNob2xkIiwidGhyZXNob2xkIiwibGltaXQiLCJteU1vbWVudCIsIkhUTUw1X0ZNVCIsIm1vbWVudCIsIk1JTl9JTlRFR0VSIiwiTUlOX1NBRkVfSU5URUdFUiIsIk1BWF9JTlRFR0VSIiwiSU5URVJWQUxTIiwiVU5JVFMiLCJzb3J0ZXIiLCJhcnJheVVuaXF1ZSIsImJ1aWxkTG9va3VwVGFibGUiLCJ0aW1lc3RhbXBzIiwiZGlzdHJpYnV0aW9uIiwiY3VyciIsInRhYmxlIiwibG9va3VwIiwibWlkIiwiaTAiLCJpMSIsImxvIiwic2tleSIsInRrZXkiLCJzcGFuIiwibW9tZW50aWZ5IiwicGFyc2VyIiwiZGV0ZXJtaW5lU3RlcFNpemUiLCJjYXBhY2l0eSIsImludGVydmFsIiwic3RlcHMiLCJkZXRlcm1pbmVVbml0Rm9yQXV0b1RpY2tzIiwibWluVW5pdCIsImNvbW1vbiIsImRldGVybWluZVVuaXRGb3JGb3JtYXR0aW5nIiwiZGV0ZXJtaW5lTWFqb3JVbml0IiwidGltZU9wdHMiLCJ1bml0U3RlcFNpemUiLCJtYWpvclRpY2tzRW5hYmxlZCIsImZpcnN0IiwiY29tcHV0ZU9mZnNldHMiLCJ1cHBlciIsImxvd2VyIiwidGlja3NGcm9tVGltZXN0YW1wcyIsIm1ham9yVW5pdCIsImRldGVybWluZUxhYmVsRm9ybWF0IiwibW9tZW50RGF0ZSIsImhhc1RpbWUiLCJUaW1lU2NhbGUiLCJ0aW1lc3RhbXAiLCJfaG9yaXpvbnRhbCIsIl90YWJsZSIsIl90aW1lc3RhbXBzIiwiZ2V0TGFiZWxDYXBhY2l0eSIsIl91bml0IiwiX21ham9yVW5pdCIsIl9vZmZzZXRzIiwiX2xhYmVsRm9ybWF0IiwidG9vbHRpcEZvcm1hdCIsImZvcm1hdE92ZXJyaWRlIiwiZGlzcGxheUZvcm1hdHMiLCJtaW5vckZvcm1hdCIsIm1ham9yRm9ybWF0IiwibWFqb3JUaW1lIiwibWFqb3JUaWNrT3B0cyIsImZvcm1hdHRlciIsInRpY2tGb3JtYXRGdW5jdGlvbiIsImdldFBpeGVsRm9yT2Zmc2V0IiwidGlja3NPcHRzIiwidGlja0xhYmVsV2lkdGgiLCJzaW5Sb3RhdGlvbiIsImV4YW1wbGVUaW1lIiwiZXhhbXBsZUxhYmVsIiwiZ2V0TGFiZWxXaWR0aCIsImlubmVyV2lkdGgiLCJjb21wdXRlTWluU2FtcGxlU2l6ZSIsInBpeGVscyIsImNvbXB1dGVGaXRDYXRlZ29yeVRyYWl0cyIsInJ1bGVyIiwidGhpY2tuZXNzIiwiYmFyVGhpY2tuZXNzIiwic3RhY2tDb3VudCIsImNhdGVnb3J5UGVyY2VudGFnZSIsImJhclBlcmNlbnRhZ2UiLCJjb21wdXRlRmxleENhdGVnb3J5VHJhaXRzIiwicGVyY2VudCIsIlJlY3RhbmdsZSIsInJlY3RzIiwiX3J1bGVyIiwiZ2V0UnVsZXIiLCJyZWN0YW5nbGUiLCJyZWN0YW5nbGVPcHRpb25zIiwiZ2V0U2NhbGVGb3JJZCIsInVwZGF0ZUVsZW1lbnRHZW9tZXRyeSIsInZzY2FsZSIsImdldFZhbHVlU2NhbGUiLCJnZXRCYXNlUGl4ZWwiLCJ2cGl4ZWxzIiwiY2FsY3VsYXRlQmFyVmFsdWVQaXhlbHMiLCJpcGl4ZWxzIiwiY2FsY3VsYXRlQmFySW5kZXhQaXhlbHMiLCJnZXRWYWx1ZVNjYWxlSWQiLCJnZXRJbmRleFNjYWxlSWQiLCJnZXRJbmRleFNjYWxlIiwic3RhY2tzIiwiX2dldFN0YWNrcyIsImdldFN0YWNrQ291bnQiLCJpbWV0YSIsIml2YWx1ZSIsInN0YWNrSW5kZXgiLCJnZXRTdGFja0luZGV4IiwibWF4QmFyVGhpY2tuZXNzIiwiSW5maW5pdHkiLCJjbGlwQXJlYSIsInVuY2xpcEFyZWEiLCJob3Jpem9udGFsQmFyIiwiZGF0YXNldExhYmVsIiwiZGF0YVBvaW50IiwiYnViYmxlIiwiUG9pbnQiLCJfcmVzb2x2ZUVsZW1lbnRPcHRpb25zIiwiZHNJbmRleCIsImdldFBpeGVsRm9yRGVjaW1hbCIsImRzIiwiYXJjT3B0cyIsImxlZ2VuZEl0ZW0iLCJkYXRhTGFiZWwiLCJkb3VnaG51dCIsInBpZSIsIkFyYyIsInJpbmdJbmRleCIsImF2YWlsYWJsZVdpZHRoIiwiYXZhaWxhYmxlSGVpZ2h0IiwiY3V0b3V0UGVyY2VudGFnZSIsImNpcmN1bWZlcmVuY2UiLCJjb250YWluczAiLCJjb250YWluczkwIiwiY29udGFpbnMxODAiLCJjb250YWluczI3MCIsImN1dG91dCIsImdldE1heEJvcmRlcldpZHRoIiwicmFkaXVzTGVuZ3RoIiwiZ2V0VmlzaWJsZURhdGFzZXRDb3VudCIsIm9mZnNldFgiLCJvZmZzZXRZIiwiY2FsY3VsYXRlVG90YWwiLCJnZXRSaW5nSW5kZXgiLCJhbmltYXRpb25PcHRzIiwiY2VudGVyWCIsImNlbnRlclkiLCJhbmltYXRlUm90YXRlIiwiY2FsY3VsYXRlQ2lyY3VtZmVyZW5jZSIsImFuaW1hdGVTY2FsZSIsImVsZW1lbnRPcHRzIiwiYXJjcyIsImhvdmVyV2lkdGgiLCJsaW5lRW5hYmxlZCIsInNob3dMaW5lIiwic2hvd0xpbmVzIiwiTGluZSIsImxpbmVFbGVtZW50T3B0aW9ucyIsImxpbmVUZW5zaW9uIiwic3RlcHBlZCIsImN1YmljSW50ZXJwb2xhdGlvbk1vZGUiLCJ1cGRhdGVCZXppZXJDb250cm9sUG9pbnRzIiwicG9pbnRCYWNrZ3JvdW5kQ29sb3IiLCJwb2ludEJvcmRlckNvbG9yIiwicG9pbnRCb3JkZXJXaWR0aCIsInBvaW50Um90YXRpb24iLCJwb2ludE9wdGlvbnMiLCJwb2ludFJhZGl1cyIsInBvaW50SGl0UmFkaXVzIiwiY2FsY3VsYXRlUG9pbnRZIiwiZ2V0UG9pbnRSb3RhdGlvbiIsImdldFBvaW50QmFja2dyb3VuZENvbG9yIiwiZ2V0UG9pbnRCb3JkZXJDb2xvciIsImdldFBvaW50Qm9yZGVyV2lkdGgiLCJkc01ldGEiLCJzdW1Qb3MiLCJzdW1OZWciLCJzdGFja2VkUmlnaHRWYWx1ZSIsImNvbnRyb2xQb2ludHMiLCJjYXBDb250cm9sUG9pbnQiLCJjYXBCZXppZXJQb2ludHMiLCJoYWxmQm9yZGVyV2lkdGgiLCJwb2ludEhvdmVyQmFja2dyb3VuZENvbG9yIiwicG9pbnRIb3ZlckJvcmRlckNvbG9yIiwicG9pbnRIb3ZlckJvcmRlcldpZHRoIiwicG9pbnRIb3ZlclJhZGl1cyIsInBvbGFyQXJlYSIsInN0YXJ0cyIsIl9zdGFydHMiLCJhbmdsZXMiLCJfYW5nbGVzIiwiX3VwZGF0ZVJhZGl1cyIsImNvdW50VmlzaWJsZUVsZW1lbnRzIiwiX2NvbXB1dGVBbmdsZSIsImRhdGFzZXRTdGFydEFuZ2xlIiwicmVzZXRSYWRpdXMiLCJyYWRhciIsInBvaW50RWxlbWVudE9wdGlvbnMiLCJzY2F0dGVyIiwiQmFyIiwiQnViYmxlIiwiRG91Z2hudXQiLCJQb2xhckFyZWEiLCJSYWRhciIsIlNjYXR0ZXIiLCJtYXBwZXJzIiwiYm91bmRhcnkiLCJkZWNvZGVGaWxsIiwiY29tcHV0ZUJvdW5kYXJ5Iiwic2NhbGVCb3R0b20iLCJzY2FsZVRvcCIsInNjYWxlWmVybyIsImdldEJhc2VQb3NpdGlvbiIsInJlc29sdmVUYXJnZXQiLCJwcm9wYWdhdGUiLCJ2aXNpdGVkIiwidmlzaWJsZSIsImNyZWF0ZU1hcHBlciIsImlzRHJhd2FibGUiLCJkcmF3QXJlYSIsImN1cnZlMCIsImN1cnZlMSIsImxlbjAiLCJsZW4xIiwiZG9GaWxsIiwibWFwcGVyIiwicDAiLCJkMCIsImQxIiwiJGZpbGxlciIsImdldEJveFdpZHRoIiwibGFiZWxPcHRzIiwidXNlUG9pbnRTdHlsZSIsImJveFdpZHRoIiwiY2kiLCJMZWdlbmQiLCJsZWdlbmRIaXRCb3hlcyIsImRvdWdobnV0TW9kZSIsImJlZm9yZUJ1aWxkTGFiZWxzIiwiYnVpbGRMYWJlbHMiLCJhZnRlckJ1aWxkTGFiZWxzIiwibGVnZW5kSXRlbXMiLCJnZW5lcmF0ZUxhYmVscyIsImdsb2JhbERlZmF1bHQiLCJsYWJlbEZvbnQiLCJoaXRib3hlcyIsImxpbmVXaWR0aHMiLCJ0b3RhbEhlaWdodCIsInZQYWRkaW5nIiwiY29sdW1uV2lkdGhzIiwidG90YWxXaWR0aCIsImN1cnJlbnRDb2xXaWR0aCIsImN1cnJlbnRDb2xIZWlnaHQiLCJpdGVtSGVpZ2h0IiwiaXRlbVdpZHRoIiwibGluZURlZmF1bHQiLCJsZWdlbmRXaWR0aCIsImN1cnNvciIsImlzTGluZVdpZHRoWmVybyIsImxpbmVEYXNoIiwib2ZmU2V0IiwiaGFsZkZvbnRTaXplIiwieExlZnQiLCJ5TWlkZGxlIiwibGgiLCJoaXRCb3giLCJjcmVhdGVOZXdMZWdlbmRBbmRBdHRhY2giLCJsZWdlbmRPcHRzIiwibGVnZW5kIiwiY29uZmlndXJlIiwiVGl0bGUiLCJ0aXRsZVgiLCJ0aXRsZVkiLCJ0aXRsZUZvbnQiLCJjcmVhdGVOZXdUaXRsZUJsb2NrQW5kQXR0YWNoIiwidGl0bGVPcHRzIiwidGl0bGVCbG9jayIsImFuaW1hdGlvblNlcnZpY2UiLCJyZXF1aXJlJCQ0IiwicmVxdWlyZSQkNSIsInJlcXVpcmUkJDYiLCJyZXF1aXJlJCQ3IiwicmVxdWlyZSQkOCIsImxheW91dHMiLCJyZXF1aXJlJCQ5IiwicmVxdWlyZSQkMTAiLCJyZXF1aXJlJCQxMSIsInJlcXVpcmUkJDEyIiwicmVxdWlyZSQkMTMiLCJyZXF1aXJlJCQxNCIsInJlcXVpcmUkJDE1IiwicmVxdWlyZSQkMTYiLCJyZXF1aXJlJCQxNyIsInJlcXVpcmUkJDE4IiwicmVxdWlyZSQkMTkiLCJyZXF1aXJlJCQyMCIsInJlcXVpcmUkJDIxIiwicmVxdWlyZSQkMjIiLCJyZXF1aXJlJCQyMyIsInJlcXVpcmUkJDI0IiwicmVxdWlyZSQkMjUiLCJyZXF1aXJlJCQyNiIsInJlcXVpcmUkJDI3IiwicmVxdWlyZSQkMjgiLCJyZXF1aXJlJCQyOSIsInJlcXVpcmUkJDMwIiwicmVxdWlyZSQkMzEiLCJyZXF1aXJlJCQzMiIsInJlcXVpcmUkJDMzIiwicmVxdWlyZSQkMzQiLCJyZXF1aXJlJCQzNSIsInJlcXVpcmUkJDM2IiwicmVxdWlyZSQkMzciLCJyZWdpc3RlciIsImdlbmVyYXRlQ2hhcnQiLCJjaGFydElkIiwiY2hhcnRUeXBlIiwiY3NzQ2xhc3NlcyIsImdlbmVyYXRlTGVnZW5kIiwiX2VsZW1lbnQiLCJwbHVnaW5TZXJ2aWNlIiwiUGx1Z2luQmFzZSIsImNhbnZhc0hlbHBlcnMiLCJsYXlvdXRTZXJ2aWNlIiwiSG9yaXpvbnRhbEJhciIsIlBpZSIsImNoYXJ0RGF0YUxpc3QiLCJDaGFydERhdGEiLCJjaGFydExhYmVscyIsIkNoYXJ0QmFyIiwiQ2hhcnRDb21wb25lbnQiLCJDaGFydEhvcml6b250YWxCYXIiLCJDaGFydExpbmUiLCJDaGFydFBpZSIsInJldkxvb2t1cCIsIkFyciIsImluaXRlZCIsInRvQnl0ZUFycmF5IiwiYjY0IiwicGxhY2VIb2xkZXJzIiwiTCIsInRyaXBsZXRUb0Jhc2U2NCIsImVuY29kZUNodW5rIiwidWludDgiLCJmcm9tQnl0ZUFycmF5IiwiZXh0cmFCeXRlcyIsImxlbjIiLCJyZWFkIiwiaXNMRSIsIm1MZW4iLCJuQnl0ZXMiLCJlTGVuIiwiZU1heCIsImVCaWFzIiwibkJpdHMiLCJ3cml0ZSIsInJ0IiwiTE4yIiwiSU5TUEVDVF9NQVhfQllURVMiLCJrTWF4TGVuZ3RoIiwiVFlQRURfQVJSQVlfU1VQUE9SVCIsImNyZWF0ZUJ1ZmZlciIsIlJhbmdlRXJyb3IiLCJlbmNvZGluZ09yT2Zmc2V0IiwiZnJvbUFycmF5QnVmZmVyIiwiZnJvbVN0cmluZyIsImZyb21PYmplY3QiLCJhc3NlcnRTaXplIiwiYWxsb2MiLCJlbmNvZGluZyIsImNoZWNrZWQiLCJpc0VuY29kaW5nIiwiZnJvbUFycmF5TGlrZSIsImludGVybmFsSXNCdWZmZXIiLCJpc25hbiIsIl9pc0J1ZmZlciIsImlzVmlldyIsImxvd2VyZWRDYXNlIiwidXRmOFRvQnl0ZXMiLCJiYXNlNjRUb0J5dGVzIiwic2xvd1RvU3RyaW5nIiwiaGV4U2xpY2UiLCJ1dGY4U2xpY2UiLCJhc2NpaVNsaWNlIiwibGF0aW4xU2xpY2UiLCJiYXNlNjRTbGljZSIsInV0ZjE2bGVTbGljZSIsInN3YXAiLCJiaWRpcmVjdGlvbmFsSW5kZXhPZiIsImFycmF5SW5kZXhPZiIsImluZGV4U2l6ZSIsInZhbExlbmd0aCIsImJ1ZiIsInJlYWRVSW50MTZCRSIsImZvdW5kSW5kZXgiLCJmb3VuZCIsImhleFdyaXRlIiwic3RyTGVuIiwicGFyc2VkIiwidXRmOFdyaXRlIiwiYmxpdEJ1ZmZlciIsImFzY2lpV3JpdGUiLCJhc2NpaVRvQnl0ZXMiLCJsYXRpbjFXcml0ZSIsImJhc2U2NFdyaXRlIiwidWNzMldyaXRlIiwidXRmMTZsZVRvQnl0ZXMiLCJiYXNlNjQiLCJzZWNvbmRCeXRlIiwidGhpcmRCeXRlIiwiZm91cnRoQnl0ZSIsInRlbXBDb2RlUG9pbnQiLCJmaXJzdEJ5dGUiLCJjb2RlUG9pbnQiLCJieXRlc1BlclNlcXVlbmNlIiwiZGVjb2RlQ29kZVBvaW50c0FycmF5IiwicG9vbFNpemUiLCJfYXVnbWVudCIsImFsbG9jVW5zYWZlU2xvdyIsImNvbXBhcmUiLCJzd2FwMTYiLCJzd2FwMzIiLCJzd2FwNjQiLCJlcXVhbHMiLCJ0aGlzU3RhcnQiLCJ0aGlzRW5kIiwidGhpc0NvcHkiLCJ0YXJnZXRDb3B5IiwiaW5jbHVkZXMiLCJfYXJyIiwiTUFYX0FSR1VNRU5UU19MRU5HVEgiLCJjb2RlUG9pbnRzIiwiZnJvbUNoYXJDb2RlIiwidG9IZXgiLCJieXRlcyIsImNoZWNrT2Zmc2V0IiwiZXh0IiwiY2hlY2tJbnQiLCJvYmplY3RXcml0ZVVJbnQxNiIsImxpdHRsZUVuZGlhbiIsIm9iamVjdFdyaXRlVUludDMyIiwiY2hlY2tJRUVFNzU0Iiwid3JpdGVGbG9hdCIsIm5vQXNzZXJ0Iiwid3JpdGVEb3VibGUiLCJuZXdCdWYiLCJzdWJhcnJheSIsInNsaWNlTGVuIiwicmVhZFVJbnRMRSIsIm11bCIsInJlYWRVSW50QkUiLCJyZWFkVUludDgiLCJyZWFkVUludDE2TEUiLCJyZWFkVUludDMyTEUiLCJyZWFkVUludDMyQkUiLCJyZWFkSW50TEUiLCJyZWFkSW50QkUiLCJyZWFkSW50OCIsInJlYWRJbnQxNkxFIiwicmVhZEludDE2QkUiLCJyZWFkSW50MzJMRSIsInJlYWRJbnQzMkJFIiwicmVhZEZsb2F0TEUiLCJpZWVlNzU0IiwicmVhZEZsb2F0QkUiLCJyZWFkRG91YmxlTEUiLCJyZWFkRG91YmxlQkUiLCJ3cml0ZVVJbnRMRSIsIndyaXRlVUludEJFIiwid3JpdGVVSW50OCIsIndyaXRlVUludDE2TEUiLCJ3cml0ZVVJbnQxNkJFIiwid3JpdGVVSW50MzJMRSIsIndyaXRlVUludDMyQkUiLCJ3cml0ZUludExFIiwid3JpdGVJbnRCRSIsIndyaXRlSW50OCIsIndyaXRlSW50MTZMRSIsIndyaXRlSW50MTZCRSIsIndyaXRlSW50MzJMRSIsIndyaXRlSW50MzJCRSIsIndyaXRlRmxvYXRMRSIsIndyaXRlRmxvYXRCRSIsIndyaXRlRG91YmxlTEUiLCJ3cml0ZURvdWJsZUJFIiwidGFyZ2V0U3RhcnQiLCJJTlZBTElEX0JBU0U2NF9SRSIsImJhc2U2NGNsZWFuIiwic3RyaW5ndHJpbSIsImxlYWRTdXJyb2dhdGUiLCJieXRlQXJyYXkiLCJkc3QiLCJpc0Zhc3RCdWZmZXIiLCJpc1Nsb3dCdWZmZXIiLCJkZWZhdWx0U2V0VGltb3V0IiwiZGVmYXVsdENsZWFyVGltZW91dCIsImNhY2hlZFNldFRpbWVvdXQiLCJjYWNoZWRDbGVhclRpbWVvdXQiLCJydW5UaW1lb3V0IiwicnVuQ2xlYXJUaW1lb3V0IiwibWFya2VyIiwiY2xlYXJUaW1lb3V0IiwiY3VycmVudFF1ZXVlIiwiZHJhaW5pbmciLCJxdWV1ZUluZGV4IiwiY2xlYW5VcE5leHRUaWNrIiwiZHJhaW5RdWV1ZSIsIkl0ZW0iLCJicm93c2VyIiwiYXJndiIsInZlcnNpb25zIiwicmVsZWFzZSIsImFkZExpc3RlbmVyIiwib2ZmIiwicmVtb3ZlTGlzdGVuZXIiLCJyZW1vdmVBbGxMaXN0ZW5lcnMiLCJjd2QiLCJjaGRpciIsInVtYXNrIiwicGVyZm9ybWFuY2VOb3ciLCJtb3pOb3ciLCJtc05vdyIsIm9Ob3ciLCJ3ZWJraXROb3ciLCJocnRpbWUiLCJwcmV2aW91c1RpbWVzdGFtcCIsImNsb2NrdGltZSIsIm5hbm9zZWNvbmRzIiwidXB0aW1lIiwiX2Jsb2JDb25zdHJ1Y3RvciIsImhhc0ZldGNoIiwiZmV0Y2giLCJSZWFkYWJsZVN0cmVhbSIsImJsb2JDb25zdHJ1Y3RvciIsIkJsb2IiLCJjaGVja1R5cGVTdXBwb3J0IiwicmVzcG9uc2VUeXBlIiwiaGF2ZUFycmF5QnVmZmVyIiwiaGF2ZVNsaWNlIiwiYXJyYXlidWZmZXIiLCJtc3N0cmVhbSIsIm1vemNodW5rZWRhcnJheWJ1ZmZlciIsIm92ZXJyaWRlTWltZVR5cGUiLCJ2YkFycmF5IiwiVkJBcnJheSIsImN0b3IiLCJzdXBlckN0b3IiLCJzdXBlcl8iLCJUZW1wQ3RvciIsImlzU3RyaW5nIiwib2JqZWN0cyIsImZvcm1hdFJlZ0V4cCIsImlzTnVsbCIsIm5vRGVwcmVjYXRpb24iLCJ0aHJvd0RlcHJlY2F0aW9uIiwidHJhY2VEZXByZWNhdGlvbiIsImRlYnVnRW52aXJvbiIsImRvbWFpbiIsImRlYnVncyIsImRlYnVnbG9nIiwiTk9ERV9ERUJVRyIsInN0eWxpemVOb0NvbG9yIiwiZGVwdGgiLCJjb2xvcnMiLCJzaG93SGlkZGVuIiwiY3VzdG9tSW5zcGVjdCIsInN0eWxpemUiLCJzdHlsaXplV2l0aENvbG9yIiwiZm9ybWF0VmFsdWUiLCJzdHlsZVR5cGUiLCJhcnJheVRvSGFzaCIsInJlY3Vyc2VUaW1lcyIsInByaW1pdGl2ZSIsImZvcm1hdFByaW1pdGl2ZSIsInZpc2libGVLZXlzIiwiZm9ybWF0RXJyb3IiLCJicmFjZXMiLCJ0b1VUQ1N0cmluZyIsImZvcm1hdEFycmF5IiwiZm9ybWF0UHJvcGVydHkiLCJyZWR1Y2VUb1NpbmdsZVN0cmluZyIsInNpbXBsZSIsImRlc2MiLCJhciIsImlzTnVsbE9yVW5kZWZpbmVkIiwiX2V4dGVuZCIsIkV2ZW50SGFuZGxlcnMiLCJFdmVudEVtaXR0ZXIiLCIkZ2V0TWF4TGlzdGVuZXJzIiwiX21heExpc3RlbmVycyIsImRlZmF1bHRNYXhMaXN0ZW5lcnMiLCJlbWl0Tm9uZSIsImlzRm4iLCJhcnJheUNsb25lIiwiZW1pdE9uZSIsImFyZzEiLCJlbWl0VHdvIiwiYXJnMiIsImVtaXRUaHJlZSIsImFyZzMiLCJlbWl0TWFueSIsIl9hZGRMaXN0ZW5lciIsInByZXBlbmQiLCJuZXdMaXN0ZW5lciIsIl9ldmVudHNDb3VudCIsImVtaXR0ZXIiLCJlbWl0V2FybmluZyIsIl9vbmNlV3JhcCIsImZpcmVkIiwibGlzdGVuZXJDb3VudCIsImV2bGlzdGVuZXIiLCJzcGxpY2VPbmUiLCJ1bndyYXBMaXN0ZW5lcnMiLCJCdWZmZXJMaXN0IiwidGFpbCIsInVzaW5nRG9tYWlucyIsIkRvbWFpbiIsInNldE1heExpc3RlbmVycyIsImdldE1heExpc3RlbmVycyIsImVyIiwiZG9FcnJvciIsImRvbWFpbkVtaXR0ZXIiLCJkb21haW5UaHJvd24iLCJwcmVwZW5kTGlzdGVuZXIiLCJwcmVwZW5kT25jZUxpc3RlbmVyIiwib3JpZ2luYWxMaXN0ZW5lciIsImV2ZW50TmFtZXMiLCJpc0J1ZmZlckVuY29kaW5nIiwiYXNzZXJ0RW5jb2RpbmciLCJTdHJpbmdEZWNvZGVyIiwic3Vycm9nYXRlU2l6ZSIsImRldGVjdEluY29tcGxldGVDaGFyIiwidXRmMTZEZXRlY3RJbmNvbXBsZXRlQ2hhciIsImJhc2U2NERldGVjdEluY29tcGxldGVDaGFyIiwicGFzc1Rocm91Z2hXcml0ZSIsImNoYXJCdWZmZXIiLCJjaGFyUmVjZWl2ZWQiLCJjaGFyTGVuZ3RoIiwiY2hhclN0ciIsImF2YWlsYWJsZSIsImNoYXJDb2RlIiwiY3IiLCJlbmMiLCJSZWFkYWJsZVN0YXRlIiwic3RyZWFtIiwib2JqZWN0TW9kZSIsIkR1cGxleCIsInJlYWRhYmxlT2JqZWN0TW9kZSIsImh3bSIsImhpZ2hXYXRlck1hcmsiLCJkZWZhdWx0SHdtIiwicGlwZXMiLCJwaXBlc0NvdW50IiwiZmxvd2luZyIsImVuZEVtaXR0ZWQiLCJyZWFkaW5nIiwibmVlZFJlYWRhYmxlIiwiZW1pdHRlZFJlYWRhYmxlIiwicmVhZGFibGVMaXN0ZW5pbmciLCJyZXN1bWVTY2hlZHVsZWQiLCJkZWZhdWx0RW5jb2RpbmciLCJyYW5PdXQiLCJhd2FpdERyYWluIiwicmVhZGluZ01vcmUiLCJSZWFkYWJsZSIsIl9yZWFkYWJsZVN0YXRlIiwicmVhZGFibGUiLCJfcmVhZCIsInJlYWRhYmxlQWRkQ2h1bmsiLCJhZGRUb0Zyb250IiwiY2h1bmtJbnZhbGlkIiwic2tpcEFkZCIsIm5lZWRNb3JlRGF0YSIsImlzUGF1c2VkIiwic2V0RW5jb2RpbmciLCJNQVhfSFdNIiwiY29tcHV0ZU5ld0hpZ2hXYXRlck1hcmsiLCJob3dNdWNoVG9SZWFkIiwiQnVmZmVyLmlzQnVmZmVyIiwib25Fb2ZDaHVuayIsImVtaXRSZWFkYWJsZSIsImVtaXRSZWFkYWJsZV8iLCJtYXliZVJlYWRNb3JlIiwibWF5YmVSZWFkTW9yZV8iLCJwaXBlT25EcmFpbiIsIm5SZWFkaW5nTmV4dFRpY2siLCJyZXN1bWUiLCJyZXN1bWVfIiwiZmxvdyIsImZyb21MaXN0IiwiZnJvbUxpc3RQYXJ0aWFsIiwiaGFzU3RyaW5ncyIsImNvcHlGcm9tQnVmZmVyU3RyaW5nIiwiY29weUZyb21CdWZmZXIiLCJuYiIsImVuZFJlYWRhYmxlIiwiZW5kUmVhZGFibGVOVCIsInhzIiwibm9wIiwiV3JpdGVSZXEiLCJXcml0YWJsZVN0YXRlIiwiZ2V0QnVmZmVyIiwid3JpdGFibGVPYmplY3RNb2RlIiwibmVlZERyYWluIiwiZW5kaW5nIiwiZmluaXNoZWQiLCJub0RlY29kZSIsImRlY29kZVN0cmluZ3MiLCJ3cml0aW5nIiwiY29ya2VkIiwiYnVmZmVyUHJvY2Vzc2luZyIsIm9ud3JpdGUiLCJ3cml0ZWNiIiwid3JpdGVsZW4iLCJsYXN0QnVmZmVyZWRSZXF1ZXN0IiwicGVuZGluZ2NiIiwicHJlZmluaXNoZWQiLCJlcnJvckVtaXR0ZWQiLCJidWZmZXJlZFJlcXVlc3RDb3VudCIsImNvcmtlZFJlcXVlc3RzRnJlZSIsIkNvcmtlZFJlcXVlc3QiLCJXcml0YWJsZSIsIl93cml0YWJsZVN0YXRlIiwid3JpdGFibGUiLCJfd3JpdGUiLCJ3cml0ZXYiLCJfd3JpdGV2Iiwid3JpdGVBZnRlckVuZCIsInZhbGlkQ2h1bmsiLCJkZWNvZGVDaHVuayIsIndyaXRlT3JCdWZmZXIiLCJkb1dyaXRlIiwib253cml0ZUVycm9yIiwib253cml0ZVN0YXRlVXBkYXRlIiwibmVlZEZpbmlzaCIsImFmdGVyV3JpdGUiLCJvbndyaXRlRHJhaW4iLCJjbGVhckJ1ZmZlciIsImhvbGRlciIsImZpbmlzaCIsInByZWZpbmlzaCIsImZpbmlzaE1heWJlIiwibmVlZCIsImVuZFdyaXRhYmxlIiwiX3RoaXMiLCJuT3JpZyIsImRvUmVhZCIsInBpcGUiLCJkZXN0IiwicGlwZU9wdHMiLCJlbmRGbiIsIm9uZW5kIiwiY2xlYW51cCIsIm9udW5waXBlIiwib25kcmFpbiIsImNsZWFuZWRVcCIsIm9uY2xvc2UiLCJvbmZpbmlzaCIsIm9uZXJyb3IiLCJvbmRhdGEiLCJpbmNyZWFzZWRBd2FpdERyYWluIiwicGF1c2UiLCJ1bnBpcGUiLCJkZXN0cyIsImV2Iiwid3JhcCIsInBhdXNlZCIsIl9mcm9tTGlzdCIsImluaGVyaXRzJDIiLCJjb3JrIiwidW5jb3JrIiwic2V0RGVmYXVsdEVuY29kaW5nIiwiYWxsb3dIYWxmT3BlbiIsIm9uRW5kTlQiLCJUcmFuc2Zvcm1TdGF0ZSIsImFmdGVyVHJhbnNmb3JtIiwibmVlZFRyYW5zZm9ybSIsInRyYW5zZm9ybWluZyIsIndyaXRlY2h1bmsiLCJ3cml0ZWVuY29kaW5nIiwidHMiLCJfdHJhbnNmb3JtU3RhdGUiLCJycyIsIlRyYW5zZm9ybSIsIl90cmFuc2Zvcm0iLCJmbHVzaCIsIl9mbHVzaCIsIlBhc3NUaHJvdWdoIiwiU3RyZWFtIiwiRUUiLCJfaXNTdGRpbyIsImRpZE9uRW5kIiwiclN0YXRlcyIsIkluY29taW5nTWVzc2FnZSIsIl9tb2RlIiwiaGVhZGVycyIsInJhd0hlYWRlcnMiLCJ0cmFpbGVycyIsInJhd1RyYWlsZXJzIiwiX2ZldGNoUmVzcG9uc2UiLCJzdGF0dXNDb2RlIiwic3RhdHVzTWVzc2FnZSIsInN0YXR1c1RleHQiLCJfaXQiLCJyZWFkZXIiLCJnZXRSZWFkZXIiLCJfZGVzdHJveWVkIiwiX3BvcyIsInJlc3BvbnNlVVJMIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwiX2NoYXJzZXQiLCJtaW1lVHlwZSIsImNoYXJzZXRNYXRjaCIsImFycmF5Q29weSIsImRlY2lkZU1vZGUiLCJwcmVmZXJCaW5hcnkiLCJ1c2VGZXRjaCIsImNhcGFiaWxpdHkiLCJDbGllbnRSZXF1ZXN0IiwiX29wdHMiLCJfYm9keSIsIl9oZWFkZXJzIiwiYXV0aCIsInNldEhlYWRlciIsIl9vbkZpbmlzaCIsIl9vblhIUlByb2dyZXNzIiwiRE9ORSIsInJlc3BvbnNlQm9keSIsInJlc3BvbnNlVGV4dCIsIkxPQURJTkciLCJNU1N0cmVhbVJlYWRlciIsIm9ucHJvZ3Jlc3MiLCJvbmxvYWQiLCJyZWFkQXNBcnJheUJ1ZmZlciIsInVuc2FmZUhlYWRlcnMiLCJzdGF0dXNWYWxpZCIsImxvd2VyTmFtZSIsImdldEhlYWRlciIsInJlbW92ZUhlYWRlciIsImhlYWRlcnNPYmoiLCJ0b0FycmF5QnVmZmVyIiwid2l0aENyZWRlbnRpYWxzIiwiX2Nvbm5lY3QiLCJzZXRSZXF1ZXN0SGVhZGVyIiwiX3Jlc3BvbnNlIiwiYWJvcnQiLCJmbHVzaEhlYWRlcnMiLCJzZXROb0RlbGF5Iiwic2V0U29ja2V0S2VlcEFsaXZlIiwibWF4SW50IiwidE1pbiIsInRNYXgiLCJza2V3IiwiZGFtcCIsImluaXRpYWxCaWFzIiwiaW5pdGlhbE4iLCJkZWxpbWl0ZXIiLCJyZWdleE5vbkFTQ0lJIiwicmVnZXhTZXBhcmF0b3JzIiwiYmFzZU1pbnVzVE1pbiIsInN0cmluZ0Zyb21DaGFyQ29kZSIsIm1hcERvbWFpbiIsInVjczJkZWNvZGUiLCJleHRyYSIsImRpZ2l0VG9CYXNpYyIsImRpZ2l0IiwiZmxhZyIsImFkYXB0IiwibnVtUG9pbnRzIiwiZW5jb2RlIiwiaGFuZGxlZENQQ291bnQiLCJiYXNpY0xlbmd0aCIsImJpYXMiLCJjdXJyZW50VmFsdWUiLCJiYXNlTWludXNUIiwicU1pbnVzVCIsImlucHV0TGVuZ3RoIiwiaGFuZGxlZENQQ291bnRQbHVzT25lIiwidG9BU0NJSSIsInN0cmluZ2lmeVByaW1pdGl2ZSIsInNlcCIsIm9iamVjdEtleXMiLCJrcyIsInFzIiwicmVnZXhwIiwibWF4S2V5cyIsImtzdHIiLCJ2c3RyIiwiVXJsIiwicHJvdG9jb2wiLCJzbGFzaGVzIiwicG9ydCIsImhvc3RuYW1lIiwicHJvdG9jb2xQYXR0ZXJuIiwicG9ydFBhdHRlcm4iLCJzaW1wbGVQYXRoUGF0dGVybiIsImRlbGltcyIsInVud2lzZSIsImF1dG9Fc2NhcGUiLCJub25Ib3N0Q2hhcnMiLCJob3N0RW5kaW5nQ2hhcnMiLCJob3N0bmFtZU1heExlbiIsImhvc3RuYW1lUGFydFBhdHRlcm4iLCJob3N0bmFtZVBhcnRTdGFydCIsInVuc2FmZVByb3RvY29sIiwiaG9zdGxlc3NQcm90b2NvbCIsInNsYXNoZWRQcm90b2NvbCIsInVybFBhcnNlIiwicGFyc2VRdWVyeVN0cmluZyIsInNsYXNoZXNEZW5vdGVIb3N0IiwicXVlcnlJbmRleCIsInNwbGl0dGVyIiwidVNwbGl0Iiwic2ltcGxlUGF0aCIsInFzUGFyc2UiLCJoZWMiLCJsb3dlclByb3RvIiwiYXRTaWduIiwiaG9zdEVuZCIsImlwdjZIb3N0bmFtZSIsImhvc3RwYXJ0cyIsInBhcnQiLCJuZXdwYXJ0IiwidmFsaWRQYXJ0cyIsIm5vdEhvc3QiLCJiaXQiLCJhZSIsImVzYyIsInFtIiwicXNTdHJpbmdpZnkiLCJwYXJzZUhvc3QiLCJkZWZhdWx0UHJvdG9jb2wiLCJyZXEiLCJBZ2VudCIsInJlbGF0aXZlIiwicmVzb2x2ZU9iamVjdCIsInJlbCIsInJlbFBhdGgiLCJ0a2V5cyIsInRrIiwicmtleXMiLCJyayIsInJrZXkiLCJhdXRoSW5Ib3N0IiwiaXNTb3VyY2VBYnMiLCJpc1JlbEFicyIsIm11c3RFbmRBYnMiLCJyZW1vdmVBbGxEb3RzIiwic3JjUGF0aCIsInBzeWNob3RpYyIsImhhc1RyYWlsaW5nU2xhc2giLCJ1cCIsImlzQWJzb2x1dGUiLCJkZWZhdWx0TWF4U29ja2V0cyIsIk1FVEhPRFMiLCJTVEFUVVNfQ09ERVMiLCJHZW9KU09OIiwiSW52YWxpZEdlb21ldHJ5RXJyb3IiLCJpc0dlb21ldHJ5VmFsaWQiLCJnZW9tZXRyeSIsImNvb3JkaW5hdGVzIiwiZ2VvanNvbiIsInByb3BGdW5jIiwic2V0dGluZyIsImFwcGx5RGVmYXVsdHMiLCJnZW9tIiwiZ2VvbXMiLCJnZW9tQXR0cnMiLCJwcm9wZXJ0aWVzIiwiZ2V0UHJvcEZ1bmN0aW9uIiwiZmVhdHVyZXMiLCJnZXRGZWF0dXJlIiwiYWRkT3B0aW9uYWxzIiwiY3JzIiwiY2hlY2tDUlMiLCJpc1Bvc3RncmVzIiwiYmJveCIsImV4dHJhR2xvYmFsIiwiZmVhdHVyZSIsImJ1aWxkR2VvbSIsImd0eXBlIiwiaXNOZXN0ZWQiLCJwYXRocyIsIml0ZW1DbG9uZSIsIm9yZGVyIiwibmV3SXRlbSIsImRvVGhyb3dzIiwiaW52YWxpZEdlb21ldHJ5IiwicmluZ0FyZWEiLCJwb2x5Z29uQXJlYSIsImdlb21ldHJpZXMiLCJjb29yZHMiLCJsb3dlckluZGV4IiwibWlkZGxlSW5kZXgiLCJ1cHBlckluZGV4IiwiY29vcmRzTGVuZ3RoIiwicmFkIiwid2dzODQiLCJSQURJVVMiLCJyZXdpbmQiLCJnaiIsIm91dGVyIiwiY3VycnlPdXRlciIsImNvcnJlY3QiLCJjb3JyZWN0UmluZ3MiLCJ3aW5kIiwiZ2VvanNvbkFyZWEiLCJyaW5nIiwiTWFwQ29tcG9uZW50IiwiTWFwRGF0YSIsImdldEJvcm91Z2hEYXRhIiwiZ2V0TmVpZ2hib3Job29kRGF0YSIsInJlc3AiLCJib3JvdWdocyIsImNvbnZlcnRUb0dlb0pTT04iLCJuZWlnaGJvcmhvb2RzIiwianNvbkRhdGEiLCJueWNvIiwiaWNvbnMiLCJ0cmFjayIsInNlbGVjdCJdLCJtYXBwaW5ncyI6ImFBTUEsSUFBTUEsUUFLSixrQkFDU0MsTUFRWEQsUUFBUUUsdUJBQWlFLE1BQWxERixRQUFRRyxnQkFBZ0JILFFBQVFJLE9BQU9DLFFBUzlETCxRQUFRRyx5QkFBbUJHLEVBQU1DLE9BQ3pCQyxFQUFRRCxHQUFlRSxPQUFPQyxTQUFTQyxPQUN2Q0MsRUFBUU4sRUFBS08sUUFBUSxPQUFRLE9BQU9BLFFBQVEsT0FBUSxPQUVwREMsRUFEUSxJQUFJQyxPQUFPLFNBQVdILEVBQVEsYUFDdEJJLEtBQUtSLFVBRVIsT0FBWk0sRUFBbUIsR0FDeEJHLG1CQUFtQkgsRUFBUSxHQUFHRCxRQUFRLE1BQU8sT0FhakRiLFFBQVFrQixTQUFXLFNBQVNDLE9BQ3RCQyxFQUFPRCxHQUFRLEdBRWJFLEdBRFVaLE9BQU9hLHVCQUNEQyxnQkFDbkJDLFlBQU9BLEVBQUVDLGVBQWUsU0FBV0QsRUFBQSxPQUFjTCxJQUFRSyxXQUVwREgsRUFBTSxJQUFNQSxFQUFNLEdBQUdJLGVBQWUsU0FBWUosRUFBTSxHQUFHSyxNQUFRTixHQU8zRXBCLFFBQVFJLGNBQ0MsU0FPVEosUUFBUTJCLHlCQUNTLHdCQy9EakIsSUFBTUMsTUFNSixXQUFZQyxZQUNGQSxHQUFlRCxFQUFNQyxXQUV2QkEsR0FDSEMsY0FBTUMsTUFDREEsRUFBU0MsVUFDSkQsRUFBU1gsT0FHWnBCLFFBQVFFLGlCQUFpQitCLElBQUlGLEtBRXBDRyxlQUFPQyxHQUVGbkMsUUFBUUUsaUJBQWlCK0IsSUFBSUUsS0FFbENMLGNBQU1NLE9BQ0NDLEVBQVNDLFNBQVNDLGNBQWMsU0FDL0JDLFVBQVlKLElBQ1pLLGFBQWEsZUFBZSxLQUM1QkEsYUFBYSxRQUFTLDJCQUNwQkMsS0FBS0MsWUFBWU4sS0FHdkJwQyxNQUtYMkIsTUFBTUMsS0FBTyxZQzFDYixhQUFrQyxvQkFBWGUsT0FBeUJBLE9BQ3BCLG9CQUFUQyxLQUF1QkEsS0FDWixvQkFBWHBDLE9BQXlCQSw0TkNEeENxQyxXQUE4QixvQkFBVkYsNkJBQUFBLFlBQXNCQSxVQUFVQSxTQUFPRyxTQUFXQSxRQUFVSCxTQ0VoRkksU0FBMEIsK0JBQVJILHlCQUFBQSxRQUFvQkEsTUFBUUEsS0FBS0UsU0FBV0EsUUFBVUYsS0FHeEVJLEtBQU9ILFlBQWNFLFVBQVlFLFNBQVMsY0FBVEEsR0NIakNDLFFBQVNGLEtBQUtFLE9DQWRDLFlBQWNMLE9BQU9NLFVBR3JCNUIsZUFBaUIyQixZQUFZM0IsZUFPN0I2QixxQkFBdUJGLFlBQVlHLFNBR25DQyxlQUFpQkwsUUFBU0EsUUFBT00saUJBQWNDLEVBU25ELFNBQVNDLFVBQVVDLE9BQ2JDLEVBQVFwQyxlQUFlcUMsS0FBS0YsRUFBT0osZ0JBQ25DTyxFQUFNSCxFQUFNSixzQkFHUkEscUJBQWtCRSxNQUNwQk0sR0FBVyxFQUNmLE1BQU9DLFFBRUxDLEVBQVNaLHFCQUFxQlEsS0FBS0YsVUFDbkNJLElBQ0VILElBQ0lMLGdCQUFrQk8sU0FFakJILEVBQU1KLGlCQUdWVSxFQ3pDVCxJQUFJZCxjQUFjTCxPQUFPTSxVQU9yQkMsdUJBQXVCRixjQUFZRyxTQVN2QyxTQUFTWSxlQUFlUCxVQUNmTix1QkFBcUJRLEtBQUtGLEdDYm5DLElBQUlRLFFBQVUsZ0JBQ1ZDLGFBQWUscUJBR2ZiLGlCQUFpQkwsUUFBU0EsUUFBT00saUJBQWNDLEVBU25ELFNBQVNZLFdBQVdWLFVBQ0wsTUFBVEEsT0FDZUYsSUFBVkUsRUFBc0JTLGFBQWVELFFBRXRDWixrQkFBa0JBLG9CQUFrQlQsT0FBT2EsR0FDL0NELFVBQVVDLEdBQ1ZPLGVBQWVQLEdDQ3JCLFNBQVNXLFNBQVNYLE9BQ1pZLFdBQWNaLHNCQUFBQSxVQUNGLE1BQVRBLElBQTBCLFVBQVJZLEdBQTRCLFlBQVJBLEdDdkIvQyxJQUFJQyxTQUFXLHlCQUNYQyxRQUFVLG9CQUNWQyxPQUFTLDZCQUNUQyxTQUFXLGlCQW1CZixTQUFTQyxXQUFXakIsT0FDYlcsU0FBU1gsVUFDTCxNQUlMRyxFQUFNTyxXQUFXVixVQUNkRyxHQUFPVyxTQUFXWCxHQUFPWSxRQUFVWixHQUFPVSxVQUFZVixHQUFPYSxTQzlCdEUsSUFBSUUsV0FBYTdCLEtBQUssc0JDQWxCOEIsV0FBYyxlQUNaQyxFQUFNLFNBQVNoRSxLQUFLOEQsWUFBY0EsV0FBV0csTUFBUUgsV0FBV0csS0FBS0MsVUFBWSxXQUM5RUYsRUFBTyxpQkFBbUJBLEVBQU8sR0FGeEIsR0FZbEIsU0FBU0csU0FBU0MsV0FDUEwsWUFBZUEsY0FBY0ssRUNmeEMsSUFBSUMsVUFBWW5DLFNBQVNHLFVBR3JCaUMsYUFBZUQsVUFBVTlCLFNBUzdCLFNBQVNnQyxTQUFTSCxNQUNKLE1BQVJBLEVBQWMsWUFFUEUsYUFBYXhCLEtBQUtzQixHQUN6QixNQUFPbkIsZUFFQ21CLEVBQU8sR0FDZixNQUFPbkIsV0FFSixHQ2JULElBQUl1QixhQUFlLHNCQUdmQyxhQUFlLDhCQUdmSixZQUFZbkMsU0FBU0csVUFDckJELGNBQWNMLE9BQU9NLFVBR3JCaUMsZUFBZUQsWUFBVTlCLFNBR3pCOUIsaUJBQWlCMkIsY0FBWTNCLGVBRzdCaUUsV0FBYTNFLE9BQU8sSUFDdEJ1RSxlQUFheEIsS0FBS3JDLGtCQUFnQlosUUFBUTJFLGFBQWMsUUFDdkQzRSxRQUFRLHlEQUEwRCxTQUFXLEtBV2hGLFNBQVM4RSxhQUFhL0IsWUFDZlcsU0FBU1gsSUFBVXVCLFNBQVN2QixNQUduQmlCLFdBQVdqQixHQUFTOEIsV0FBYUQsY0FDaENHLEtBQUtMLFNBQVMzQixJQ25DL0IsU0FBU2lDLFNBQVNDLEVBQVFDLFVBQ1AsTUFBVkQsT0FBaUJwQyxFQUFZb0MsRUFBT0MsR0NFN0MsU0FBU0MsVUFBVUYsRUFBUUMsT0FDckJuQyxFQUFRaUMsU0FBU0MsRUFBUUMsVUFDdEJKLGFBQWEvQixHQUFTQSxPQUFRRixFQ1h2QyxJQUFJdUMsaUJBQWtCLG1CQUVkYixFQUFPWSxVQUFVakQsT0FBUSw4QkFDcEIsT0FDRnFDLEVBQ1AsTUFBT25CLEtBTFcsR0NTdEIsU0FBU2lDLGdCQUFnQkosRUFBUUMsRUFBS25DLEdBQ3pCLGFBQVBtQyxHQUFzQkUsa0NBQ1RILEVBQVFDLGlCQUNMLGNBQ0YsUUFDTG5DLFlBQ0csTUFHUG1DLEdBQU9uQyxFQ1lsQixTQUFTdUMsR0FBR3ZDLEVBQU93QyxVQUNWeEMsSUFBVXdDLEdBQVV4QyxHQUFVQSxHQUFTd0MsR0FBVUEsRUM3QjFELElBQUloRCxjQUFjTCxPQUFPTSxVQUdyQjVCLGlCQUFpQjJCLGNBQVkzQixlQVlqQyxTQUFTNEUsWUFBWVAsRUFBUUMsRUFBS25DLE9BQzVCMEMsRUFBV1IsRUFBT0MsR0FDaEJ0RSxpQkFBZXFDLEtBQUtnQyxFQUFRQyxJQUFRSSxHQUFHRyxFQUFVMUMsVUFDeENGLElBQVZFLEdBQXlCbUMsS0FBT0Qsb0JBQ25CQSxFQUFRQyxFQUFLbkMsR0NWakMsU0FBUzJDLFdBQVdDLEVBQVFDLEVBQU9YLEVBQVFZLE9BQ3JDQyxHQUFTYixNQUNGQSxjQUVQYyxHQUFTLEVBQ1RDLEVBQVNKLEVBQU1JLFNBRVZELEVBQVFDLEdBQVEsS0FDbkJkLEVBQU1VLEVBQU1HLEdBRVpFLEVBQVdKLEVBQ1hBLEVBQVdaLEVBQU9DLEdBQU1TLEVBQU9ULEdBQU1BLEVBQUtELEVBQVFVLFFBQ2xEOUMsT0FFYUEsSUFBYm9ELE1BQ1NOLEVBQU9ULElBRWhCWSxrQkFDY2IsRUFBUUMsRUFBS2UsZUFFakJoQixFQUFRQyxFQUFLZSxVQUd0QmhCLEVDcEJULFNBQVNpQixTQUFTbkQsVUFDVEEsRUNQVCxTQUFTb0QsTUFBTTVCLEVBQU02QixFQUFTQyxVQUNwQkEsRUFBS0wsYUFDTixTQUFVekIsRUFBS3RCLEtBQUttRCxRQUNwQixTQUFVN0IsRUFBS3RCLEtBQUttRCxFQUFTQyxFQUFLLFNBQ2xDLFNBQVU5QixFQUFLdEIsS0FBS21ELEVBQVNDLEVBQUssR0FBSUEsRUFBSyxTQUMzQyxTQUFVOUIsRUFBS3RCLEtBQUttRCxFQUFTQyxFQUFLLEdBQUlBLEVBQUssR0FBSUEsRUFBSyxXQUVwRDlCLEVBQUs0QixNQUFNQyxFQUFTQyxHQ2Q3QixJQUFJQyxVQUFZQyxLQUFLQyxJQVdyQixTQUFTQyxTQUFTbEMsRUFBTW1DLEVBQU9DLFlBQ3JCTCxlQUFvQnpELElBQVY2RCxFQUF1Qm5DLEVBQUt5QixPQUFTLEVBQUtVLEVBQU8sR0FDNUQsbUJBQ0RMLEVBQU9PLFVBQ1BiLEdBQVMsRUFDVEMsRUFBU00sVUFBVUQsRUFBS0wsT0FBU1UsRUFBTyxHQUN4Q0csRUFBUUMsTUFBTWQsS0FFVEQsRUFBUUMsS0FDVEQsR0FBU00sRUFBS0ssRUFBUVgsTUFFckIsVUFDTGdCLEVBQVlELE1BQU1KLEVBQVEsS0FDckJYLEVBQVFXLEtBQ0xYLEdBQVNNLEVBQUtOLFlBRWhCVyxHQUFTQyxFQUFVRSxHQUN0QlYsTUFBTTVCLEVBQU1uRixLQUFNMkgsSUNaN0IsU0FBU0MsU0FBU2pFLFVBQ1Qsa0JBQ0VBLEdDVFgsSUFBSWtFLGdCQUFtQjdCLGlCQUE0QixTQUFTYixFQUFNMkMsVUFDekQ5QixpQkFBZWIsRUFBTSwwQkFDVixjQUNGLFFBQ0x5QyxTQUFTRSxhQUNOLEtBTHdCaEIsU0NYcENpQixVQUFZLElBQ1pDLFNBQVcsR0FHWEMsVUFBWUMsS0FBS0MsSUFXckIsU0FBU0MsU0FBU2pELE9BQ1prRCxFQUFRLEVBQ1JDLEVBQWEsU0FFVixlQUNEQyxFQUFRTixZQUNSTyxFQUFZUixVQUFZTyxFQUFRRCxRQUV2QkMsRUFDVEMsRUFBWSxRQUNSSCxHQUFTTixpQkFDTlAsVUFBVSxVQUdYLFNBRUhyQyxFQUFLNEIsV0FBTXRELEVBQVcrRCxZQ3JCakMsSUFBSWlCLFlBQWNMLFNBQVNQLGlCQ0MzQixTQUFTYSxTQUFTdkQsRUFBTW1DLFVBQ2ZtQixZQUFZcEIsU0FBU2xDLEVBQU1tQyxFQUFPUixVQUFXM0IsRUFBTyxJQ1o3RCxJQUFJd0QsaUJBQW1CLGlCQTRCdkIsU0FBU0MsU0FBU2pGLFNBQ08saUJBQVRBLEdBQ1pBLEdBQVMsR0FBS0EsRUFBUSxHQUFLLEdBQUtBLEdBQVNnRixpQkNIN0MsU0FBU0UsWUFBWWxGLFVBQ0gsTUFBVEEsR0FBaUJpRixTQUFTakYsRUFBTWlELFVBQVloQyxXQUFXakIsR0M1QmhFLElBQUlnRixtQkFBbUIsaUJBR25CRyxTQUFXLG1CQVVmLFNBQVNDLFFBQVFwRixFQUFPaUQsT0FDbEJyQyxXQUFjWixzQkFBQUEsY0FDQyxNQUFWaUQsRUFBaUIrQixtQkFBbUIvQixLQUdsQyxVQUFSckMsR0FDVSxVQUFSQSxHQUFvQnVFLFNBQVNuRCxLQUFLaEMsS0FDaENBLEdBQVMsR0FBS0EsRUFBUSxHQUFLLEdBQUtBLEVBQVFpRCxFQ05qRCxTQUFTb0MsZUFBZXJGLEVBQU9nRCxFQUFPZCxPQUMvQnZCLFNBQVN1QixVQUNMLE1BRUx0QixXQUFjb0Msc0JBQUFBLFlBQ04sVUFBUnBDLEVBQ0tzRSxZQUFZaEQsSUFBV2tELFFBQVFwQyxFQUFPZCxFQUFPZSxRQUNyQyxVQUFSckMsR0FBb0JvQyxLQUFTZCxJQUU3QkssR0FBR0wsRUFBT2MsR0FBUWhELEdDZDdCLFNBQVNzRixlQUFlQyxVQUNmUixTQUFTLFNBQVM3QyxFQUFRc0QsT0FDM0J4QyxHQUFTLEVBQ1RDLEVBQVN1QyxFQUFRdkMsT0FDakJILEVBQWFHLEVBQVMsRUFBSXVDLEVBQVF2QyxFQUFTLFFBQUtuRCxFQUNoRDJGLEVBQVF4QyxFQUFTLEVBQUl1QyxFQUFRLFFBQUsxRixRQUV4QnlGLEVBQVN0QyxPQUFTLEdBQTBCLG1CQUFkSCxHQUN2Q0csSUFBVUgsUUFDWGhELEVBRUEyRixHQUFTSixlQUFlRyxFQUFRLEdBQUlBLEVBQVEsR0FBSUMsT0FDckN4QyxFQUFTLE9BQUluRCxFQUFZZ0QsSUFDN0IsS0FFRjNELE9BQU8rQyxLQUNQYyxFQUFRQyxHQUFRLEtBQ25CTCxFQUFTNEMsRUFBUXhDLEdBQ2pCSixLQUNPVixFQUFRVSxFQUFRSSxFQUFPRixVQUc3QlosSUN2QlgsU0FBU3dELFVBQVVDLEVBQUdDLFdBQ2hCNUMsR0FBUyxFQUNUMUMsRUFBU3lELE1BQU00QixLQUVWM0MsRUFBUTJDLEtBQ1IzQyxHQUFTNEMsRUFBUzVDLFVBRXBCMUMsRUNRVCxTQUFTdUYsYUFBYTdGLFVBQ0osTUFBVEEsR0FBaUMsb0JBQVRBLHNCQUFBQSxJQ3JCakMsSUFBSThGLFFBQVUscUJBU2QsU0FBU0MsZ0JBQWdCL0YsVUFDaEI2RixhQUFhN0YsSUFBVVUsV0FBV1YsSUFBVThGLFFDVnJELElBQUl0RyxjQUFjTCxPQUFPTSxVQUdyQjVCLGlCQUFpQjJCLGNBQVkzQixlQUc3Qm1JLHFCQUF1QnhHLGNBQVl3RyxxQkFvQm5DQyxZQUFjRixnQkFBZ0Isa0JBQW9CbEMsVUFBcEIsSUFBc0NrQyxnQkFBa0IsU0FBUy9GLFVBQzFGNkYsYUFBYTdGLElBQVVuQyxpQkFBZXFDLEtBQUtGLEVBQU8sWUFDdERnRyxxQkFBcUI5RixLQUFLRixFQUFPLFdDVGxDa0csUUFBVW5DLE1BQU1tQyxRQ1ZwQixTQUFTQyxtQkFDQSxFQ1ZULElBQUlDLFlBQWdDLCtCQUFYQyw0QkFBQUEsV0FBdUJBLFVBQVlBLFFBQVFDLFVBQVlELFFBRzVFRSxXQUFhSCxhQUFnQywrQkFBVkksMkJBQUFBLFVBQXNCQSxTQUFXQSxPQUFPRixVQUFZRSxPQUd2RkMsY0FBZ0JGLFlBQWNBLFdBQVdGLFVBQVlELFlBR3JETSxPQUFTRCxjQUFnQnBILEtBQUtxSCxZQUFTNUcsRUFHdkM2RyxlQUFpQkQsT0FBU0EsT0FBT0UsY0FBVzlHLEVBbUI1QzhHLFNBQVdELGdCQUFrQlIsVUM5QjdCTCxVQUFVLHFCQUNWZSxTQUFXLGlCQUNYQyxRQUFVLG1CQUNWQyxRQUFVLGdCQUNWQyxTQUFXLGlCQUNYbEcsVUFBVSxvQkFDVm1HLE9BQVMsZUFDVEMsVUFBWSxrQkFDWkMsVUFBWSxrQkFDWkMsVUFBWSxrQkFDWkMsT0FBUyxlQUNUQyxVQUFZLGtCQUNaQyxXQUFhLG1CQUViQyxlQUFpQix1QkFDakJDLFlBQWMsb0JBQ2RDLFdBQWEsd0JBQ2JDLFdBQWEsd0JBQ2JDLFFBQVUscUJBQ1ZDLFNBQVcsc0JBQ1hDLFNBQVcsc0JBQ1hDLFNBQVcsc0JBQ1hDLGdCQUFrQiw2QkFDbEJDLFVBQVksdUJBQ1pDLFVBQVksdUJBR1pDLGtCQXNCSixTQUFTQyxpQkFBaUJwSSxVQUNqQjZGLGFBQWE3RixJQUNsQmlGLFNBQVNqRixFQUFNaUQsV0FBYWtGLGVBQWV6SCxXQUFXVixJQ2pEMUQsU0FBU3FJLFVBQVU3RyxVQUNWLFNBQVN4QixVQUNQd0IsRUFBS3hCLElEd0JoQm1JLGVBQWVULFlBQWNTLGVBQWVSLFlBQzVDUSxlQUFlUCxTQUFXTyxlQUFlTixVQUN6Q00sZUFBZUwsVUFBWUssZUFBZUosVUFDMUNJLGVBQWVILGlCQUFtQkcsZUFBZUYsV0FDakRFLGVBQWVELFlBQWEsRUFDNUJDLGVBQWVyQyxXQUFXcUMsZUFBZXRCLFVBQ3pDc0IsZUFBZVgsZ0JBQWtCVyxlQUFlckIsU0FDaERxQixlQUFlVixhQUFlVSxlQUFlcEIsU0FDN0NvQixlQUFlbkIsVUFBWW1CLGVBQWVySCxXQUMxQ3FILGVBQWVsQixRQUFVa0IsZUFBZWpCLFdBQ3hDaUIsZUFBZWhCLFdBQWFnQixlQUFlZixXQUMzQ2UsZUFBZWQsUUFBVWMsZUFBZWIsV0FDeENhLGVBQWVaLGFBQWMsRUUxQzdCLElBQUluQixjQUFnQywrQkFBWEMsNEJBQUFBLFdBQXVCQSxVQUFZQSxRQUFRQyxVQUFZRCxRQUc1RUUsYUFBYUgsZUFBZ0MsK0JBQVZJLDJCQUFBQSxVQUFzQkEsU0FBV0EsT0FBT0YsVUFBWUUsT0FHdkZDLGdCQUFnQkYsY0FBY0EsYUFBV0YsVUFBWUQsY0FHckRrQyxZQUFjN0IsaUJBQWlCdkgsV0FBV3FKLFFBRzFDQyxTQUFZLG1CQUdSQyxFQUFRbEMsY0FBY0EsYUFBV21DLFNBQVduQyxhQUFXbUMsUUFBUSxRQUFRRCxhQUV2RUEsR0FLR0gsYUFBZUEsWUFBWUssU0FBV0wsWUFBWUssUUFBUSxRQUNqRSxNQUFPdEksS0FYSyxHQ1ZadUksaUJBQW1CSixVQUFZQSxTQUFTSyxhQW1CeENBLGFBQWVELGlCQUFtQlAsVUFBVU8sa0JBQW9CUixpQkNoQmhFNUksY0FBY0wsT0FBT00sVUFHckI1QixpQkFBaUIyQixjQUFZM0IsZUFVakMsU0FBU2lMLGNBQWM5SSxFQUFPK0ksT0FDeEJDLEVBQVE5QyxRQUFRbEcsR0FDaEJpSixHQUFTRCxHQUFTL0MsWUFBWWpHLEdBQzlCa0osR0FBVUYsSUFBVUMsR0FBU3JDLFNBQVM1RyxHQUN0Q21KLEdBQVVILElBQVVDLElBQVVDLEdBQVVMLGFBQWE3SSxHQUNyRG9KLEVBQWNKLEdBQVNDLEdBQVNDLEdBQVVDLEVBQzFDN0ksRUFBUzhJLEVBQWMxRCxVQUFVMUYsRUFBTWlELE9BQVFvRyxXQUMvQ3BHLEVBQVMzQyxFQUFPMkMsV0FFZixJQUFJZCxLQUFPbkMsR0FDVCtJLElBQWFsTCxpQkFBZXFDLEtBQUtGLEVBQU9tQyxJQUN2Q2lILElBRVEsaUJBRVksVUFBUGpILEdBQTBCLFVBQVBBLFFBRVosVUFBUEEsR0FBMEIsY0FBUEEsR0FBOEIsY0FBUEEsWUFFOUNBLEVBQUtjLE9BRVhxRyxLQUFLbkgsVUFHVDdCLEVDNUNULElBQUlkLGNBQWNMLE9BQU9NLFVBU3pCLFNBQVM4SixZQUFZdkosT0FDZndKLEVBQU94SixHQUFTQSxFQUFNeUosbUJBR25CekosS0FGcUIsbUJBQVJ3SixHQUFzQkEsRUFBSy9KLFdBQWNELGVDSC9ELFNBQVNrSyxhQUFheEgsT0FDaEI1QixRQUNVLE1BQVY0QixNQUNHLElBQUlDLEtBQU9oRCxPQUFPK0MsS0FDZG9ILEtBQUtuSCxVQUdUN0IsRUNYVCxJQUFJZCxjQUFjTCxPQUFPTSxVQUdyQjVCLGlCQUFpQjJCLGNBQVkzQixlQVNqQyxTQUFTOEwsV0FBV3pILE9BQ2J2QixTQUFTdUIsVUFDTHdILGFBQWF4SCxPQUVsQjBILEVBQVVMLFlBQVlySCxHQUN0QjVCLFNBRUMsSUFBSTZCLEtBQU9ELEdBQ0QsZUFBUEMsSUFBeUJ5SCxHQUFZL0wsaUJBQWVxQyxLQUFLZ0MsRUFBUUMsT0FDOURtSCxLQUFLbkgsVUFHVDdCLEVDRlQsU0FBU3VKLE9BQU8zSCxVQUNQZ0QsWUFBWWhELEdBQVU0RyxjQUFjNUcsR0FBUSxHQUFReUgsV0FBV3pILEdDS3hFLElBQUk0SCxhQUFleEUsZUFBZSxTQUFTcEQsRUFBUVUsRUFBUW1ILEVBQVVqSCxjQUN4REYsRUFBUWlILE9BQU9qSCxHQUFTVixFQUFRWSxLQzFCN0MsU0FBU2tILFFBQVF4SSxFQUFNb0MsVUFDZCxTQUFTcUcsVUFDUHpJLEVBQUtvQyxFQUFVcUcsS0NQMUIsSUFBSUMsYUFBZUYsUUFBUTdLLE9BQU9nTCxlQUFnQmhMLFFDRTlDZ0ksWUFBWSxrQkFHWjFGLFlBQVluQyxTQUFTRyxVQUNyQkQsY0FBY0wsT0FBT00sVUFHckJpQyxlQUFlRCxZQUFVOUIsU0FHekI5QixpQkFBaUIyQixjQUFZM0IsZUFHN0J1TSxpQkFBbUIxSSxlQUFheEIsS0FBS2YsUUE4QnpDLFNBQVNrTCxjQUFjckssT0FDaEI2RixhQUFhN0YsSUFBVVUsV0FBV1YsSUFBVW1ILG1CQUN4QyxNQUVMbUQsRUFBUUosYUFBYWxLLE1BQ1gsT0FBVnNLLFNBQ0ssTUFFTGQsRUFBTzNMLGlCQUFlcUMsS0FBS29LLEVBQU8sZ0JBQWtCQSxFQUFNYixrQkFDeEMsbUJBQVJELEdBQXNCQSxhQUFnQkEsR0FDbEQ5SCxlQUFheEIsS0FBS3NKLElBQVNZLGlCQ3JEL0IsSUFBSUcsVUFBWSx3QkFDWnZELFdBQVcsaUJBb0JmLFNBQVN3RCxRQUFReEssT0FDVjZGLGFBQWE3RixVQUNULE1BRUxHLEVBQU1PLFdBQVdWLFVBQ2RHLEdBQU82RyxZQUFZN0csR0FBT29LLFdBQ04saUJBQWpCdkssRUFBTXlLLFNBQTRDLGlCQUFkekssRUFBTXRELE9BQXFCMk4sY0FBY3JLLEdDTnpGLElBQUkwSyxRQUFVM0YsU0FBUyxTQUFTdkQsRUFBTThCLGNBRTNCRixNQUFNNUIsT0FBTTFCLEVBQVd3RCxHQUM5QixNQUFPakQsVUFDQW1LLFFBQVFuSyxHQUFLQSxFQUFJLElBQUlzSyxNQUFNdEssTUNyQnRDLFNBQVN1SyxTQUFTOUcsRUFBTzhCLFdBQ25CNUMsR0FBUyxFQUNUQyxFQUFrQixNQUFUYSxFQUFnQixFQUFJQSxFQUFNYixPQUNuQzNDLEVBQVN5RCxNQUFNZCxLQUVWRCxFQUFRQyxLQUNSRCxHQUFTNEMsRUFBUzlCLEVBQU1kLEdBQVFBLEVBQU9jLFVBRXpDeEQsRUNMVCxTQUFTdUssV0FBVzNJLEVBQVFXLFVBQ25CK0gsU0FBUy9ILEVBQU8sU0FBU1YsVUFDdkJELEVBQU9DLEtDWGxCLElBQUkzQyxjQUFjTCxPQUFPTSxVQUdyQjVCLGlCQUFpQjJCLGNBQVkzQixlQWNqQyxTQUFTaU4sdUJBQXVCcEksRUFBVXFJLEVBQVU1SSxFQUFLRCxlQUN0Q3BDLElBQWI0QyxHQUNDSCxHQUFHRyxFQUFVbEQsY0FBWTJDLE1BQVV0RSxpQkFBZXFDLEtBQUtnQyxFQUFRQyxHQUMzRDRJLEVBRUZySSxFQ3hCVCxJQUFJc0ksb0JBQ0ksU0FDRCxTQUNDLFNBQ0EsYUFDSSxpQkFDQSxTQVVaLFNBQVNDLGlCQUFpQkMsU0FDakIsS0FBT0YsY0FBY0UsR0NmOUIsSUFBSUMsV0FBYW5CLFFBQVE3SyxPQUFPa0MsS0FBTWxDLFFDQ2xDSyxlQUFjTCxPQUFPTSxVQUdyQjVCLGlCQUFpQjJCLGVBQVkzQixlQVNqQyxTQUFTdU4sU0FBU2xKLE9BQ1hxSCxZQUFZckgsVUFDUmlKLFdBQVdqSixPQUVoQjVCLFNBQ0MsSUFBSTZCLEtBQU9oRCxPQUFPK0MsR0FDakJyRSxpQkFBZXFDLEtBQUtnQyxFQUFRQyxJQUFlLGVBQVBBLEtBQy9CbUgsS0FBS25ILFVBR1Q3QixFQ01ULFNBQVNlLEtBQUthLFVBQ0xnRCxZQUFZaEQsR0FBVTRHLGNBQWM1RyxHQUFVa0osU0FBU2xKLEdDaENoRSxJQUFJbUosY0FBZ0IsbUJDTXBCLFNBQVNDLGVBQWVwSixVQUNmLFNBQVNDLFVBQ0csTUFBVkQsT0FBaUJwQyxFQUFZb0MsRUFBT0MsSUNOL0MsSUFBSW9KLGlCQUNHLFlBQ0EsV0FDQSxXQUNBLGFBQ0EsU0FVSEMsZUFBaUJGLGVBQWVDLGFDZGhDRSxVQUFZLGtCQW1CaEIsU0FBU0MsU0FBUzFMLFNBQ08sb0JBQVRBLHNCQUFBQSxLQUNYNkYsYUFBYTdGLElBQVVVLFdBQVdWLElBQVV5TCxVQ25CakQsSUFBSUUsU0FBVyxFQUFBLEVBR1hDLFlBQWNyTSxRQUFTQSxRQUFPRSxlQUFZSyxFQUMxQytMLGVBQWlCRCxZQUFjQSxZQUFZak0sY0FBV0csRUFVMUQsU0FBU2dNLGFBQWE5TCxNQUVBLGlCQUFUQSxTQUNGQSxLQUVMa0csUUFBUWxHLFVBRUg0SyxTQUFTNUssRUFBTzhMLGNBQWdCLE1BRXJDSixTQUFTMUwsVUFDSjZMLGVBQWlCQSxlQUFlM0wsS0FBS0YsR0FBUyxPQUVuRE0sRUFBVU4sRUFBUSxTQUNKLEtBQVZNLEdBQWtCLEVBQUlOLElBQVcyTCxTQUFZLEtBQU9yTCxFQ1Y5RCxTQUFTWCxTQUFTSyxVQUNBLE1BQVRBLEVBQWdCLEdBQUs4TCxhQUFhOUwsR0NwQjNDLElBQUkrTCxnQkFBa0IsV0FDbEJDLG1CQUFxQjdPLE9BQU80TyxnQkFBZ0JuSixRQThCaEQsU0FBU3FKLFNBQU85SCxZQUNMeEUsU0FBU3dFLEtBQ0E2SCxtQkFBbUJoSyxLQUFLbUMsR0FDdENBLEVBQU9sSCxRQUFROE8sZ0JBQWlCUCxnQkFDaENySCxFQ3RDTixJQUFJK0gsU0FBVyxtQkNBWEMsV0FBYSxrQkNhYkMseUJBUVFGLGtCQVFFQyx1QkFRR2QsdUJBUUgsZUFnQkhZLE9BQVVBLFlDakRqQkkscUJBQXVCLGlCQUN2QkMsb0JBQXNCLHFCQUN0QkMsc0JBQXdCLGdDQU14QkMsYUFBZSxrQ0FHZkMsVUFBWSxPQUdaQyxrQkFBb0IseUJBMEd4QixTQUFTQyxTQUFTeEksRUFBUXlJLEVBQVNuSCxPQUk3Qm9ILEVBQVdULGlCQUFpQlUsUUFBUUMsRUFBRVgsa0JBQW9CQSxpQkFFMUQzRyxHQUFTSixlQUFlbEIsRUFBUXlJLEVBQVNuSCxZQUNqQzNGLEtBRUhILFNBQVN3RSxLQUNSMkYsZ0JBQWlCOEMsRUFBU0MsRUFBVS9CLDRCQU0xQ2tDLEVBQ0FDLEVBTEFILEVBQVVoRCxnQkFBaUI4QyxFQUFRRSxRQUFTRCxFQUFTQyxRQUFTaEMsd0JBQzlEb0MsRUFBYzdMLEtBQUt5TCxHQUNuQkssRUFBZ0J0QyxXQUFXaUMsRUFBU0ksR0FJcENsSyxFQUFRLEVBQ1JvSyxFQUFjUixFQUFRUSxhQUFlWCxVQUNyQzdKLEVBQVMsV0FHVHlLLEVBQWVsUSxRQUNoQnlQLEVBQVFYLFFBQVVRLFdBQVc3SixPQUFTLElBQ3ZDd0ssRUFBWXhLLE9BQVMsS0FDcEJ3SyxJQUFnQi9CLGNBQWdCbUIsYUFBZUMsV0FBVzdKLE9BQVMsS0FDbkVnSyxFQUFRVSxVQUFZYixXQUFXN0osT0FBUyxLQUN6QyxLQUdFMkssRUFBWSxjQUFlWCxFQUFVLGlCQUFtQkEsRUFBUVcsVUFBWSxLQUFPLEtBRWhGdFEsUUFBUW9RLEVBQWMsU0FBUzVQLEVBQU8rUCxFQUFhQyxFQUFrQkMsRUFBaUJDLEVBQWVDLGNBQ3JGSCxFQUFtQkMsTUFHOUJ2SixFQUFPMEosTUFBTTdLLEVBQU80SyxHQUFRM1EsUUFBUXlQLGtCQUFtQnpCLGtCQUc3RHVDLE9BQ1csS0FDSCxZQUFjQSxFQUFjLFVBRXBDRyxPQUNhLEtBQ0wsT0FBU0EsRUFBZ0IsZUFFakNGLE9BQ1EsaUJBQW1CQSxFQUFtQixpQ0FFMUNHLEVBQVNuUSxFQUFNd0YsT0FJaEJ4RixPQUdDLFdBSU5xUSxFQUFXbEIsRUFBUWtCLFNBQ2xCQSxNQUNNLGlCQUFtQmxMLEVBQVMsWUFHN0JxSyxFQUFlckssRUFBTzNGLFFBQVFvUCxxQkFBc0IsSUFBTXpKLEdBQ2pFM0YsUUFBUXFQLG9CQUFxQixNQUM3QnJQLFFBQVFzUCxzQkFBdUIsU0FHekIsYUFBZXVCLEdBQVksT0FBUyxTQUMxQ0EsRUFDRyxHQUNBLHdCQUVKLHFCQUNDZCxFQUNJLG1CQUNBLEtBRUpDLEVBQ0csdUZBRUEsT0FFSnJLLEVBQ0Esb0JBRUV0QyxFQUFTb0ssUUFBUSxrQkFDWnBMLFNBQVM0TixFQUFhSyxFQUFZLFVBQVkzSyxHQUNsRFEsV0FBTXRELEVBQVdxTixVQUtmdkssT0FBU0EsRUFDWjRILFFBQVFsSyxTQUNKQSxTQUVEQSxFQ2pPVCxTQUFTeU4sVUFBVWpLLEVBQU84QixXQUNwQjVDLEdBQVMsRUFDVEMsRUFBa0IsTUFBVGEsRUFBZ0IsRUFBSUEsRUFBTWIsU0FFOUJELEVBQVFDLElBQzhCLElBQXpDMkMsRUFBUzlCLEVBQU1kLEdBQVFBLEVBQU9jLFlBSTdCQSxFQ1hULFNBQVNrSyxjQUFjQyxVQUNkLFNBQVMvTCxFQUFRMEQsRUFBVXNJLFdBQzVCbEwsR0FBUyxFQUNUbUwsRUFBV2hQLE9BQU8rQyxHQUNsQlcsRUFBUXFMLEVBQVNoTSxHQUNqQmUsRUFBU0osRUFBTUksT0FFWkEsS0FBVSxLQUNYZCxFQUFNVSxFQUFNb0wsRUFBWWhMLElBQVdELE9BQ1EsSUFBM0M0QyxFQUFTdUksRUFBU2hNLEdBQU1BLEVBQUtnTSxnQkFJNUJqTSxHQ1BYLElBQUlrTSxRQUFVSixnQkNGZCxTQUFTSyxXQUFXbk0sRUFBUTBELFVBQ25CMUQsR0FBVWtNLFFBQVFsTSxFQUFRMEQsRUFBVXZFLE1DRjdDLFNBQVNpTixlQUFlQyxFQUFVTixVQUN6QixTQUFTTyxFQUFZNUksTUFDUixNQUFkNEksU0FDS0EsTUFFSnRKLFlBQVlzSixVQUNSRCxFQUFTQyxFQUFZNUksV0FFMUIzQyxFQUFTdUwsRUFBV3ZMLE9BQ3BCRCxFQUFRaUwsRUFBWWhMLEdBQVUsRUFDOUJrTCxFQUFXaFAsT0FBT3FQLElBRWRQLEVBQVlqTCxNQUFZQSxFQUFRQyxLQUNhLElBQS9DMkMsRUFBU3VJLEVBQVNuTCxHQUFRQSxFQUFPbUwsWUFJaENLLEdDaEJYLElBQUlDLFNBQVdILGVBQWVELFlDRjlCLFNBQVNLLGFBQWExTyxTQUNHLG1CQUFUQSxFQUFzQkEsRUFBUW1ELFNDeUI5QyxTQUFTd0wsUUFBUUgsRUFBWTVJLFVBQ2hCTSxRQUFRc0ksR0FBY1QsVUFBWVUsVUFDakNELEVBQVlFLGFBQWE5SSxJQzlCdkMsU0FBU2dKLHNCQUNGQyxpQkFDQUMsS0FBTyxFQ0NkLFNBQVNDLGFBQWFqTCxFQUFPM0IsV0FDdkJjLEVBQVNhLEVBQU1iLE9BQ1pBLFFBQ0RWLEdBQUd1QixFQUFNYixHQUFRLEdBQUlkLFVBQ2hCYyxTQUdILEVDZFYsSUFBSStMLFdBQWFqTCxNQUFNdEUsVUFHbkJ3UCxPQUFTRCxXQUFXQyxPQVd4QixTQUFTQyxnQkFBZ0IvTSxPQUNuQjNELEVBQU9uQyxLQUFLd1MsU0FDWjdMLEVBQVErTCxhQUFhdlEsRUFBTTJELFdBRTNCYSxFQUFRLEtBSVJBLEdBRFl4RSxFQUFLeUUsT0FBUyxJQUV2QmtNLGFBRUVqUCxLQUFLMUIsRUFBTXdFLEVBQU8sS0FFekIzRyxLQUFLeVMsTUFDQSxHQ3BCVCxTQUFTTSxhQUFhak4sT0FDaEIzRCxFQUFPbkMsS0FBS3dTLFNBQ1o3TCxFQUFRK0wsYUFBYXZRLEVBQU0yRCxVQUV4QmEsRUFBUSxPQUFJbEQsRUFBWXRCLEVBQUt3RSxHQUFPLEdDSjdDLFNBQVNxTSxhQUFhbE4sVUFDYjRNLGFBQWExUyxLQUFLd1MsU0FBVTFNLElBQVEsRUNBN0MsU0FBU21OLGFBQWFuTixFQUFLbkMsT0FDckJ4QixFQUFPbkMsS0FBS3dTLFNBQ1o3TCxFQUFRK0wsYUFBYXZRLEVBQU0yRCxVQUUzQmEsRUFBUSxLQUNSM0csS0FBS3lTLE9BQ0Z4RixNQUFNbkgsRUFBS25DLE9BRVhnRCxHQUFPLEdBQUtoRCxFQUVaM0QsS0NUVCxTQUFTa1QsVUFBVUMsT0FDYnhNLEdBQVMsRUFDVEMsRUFBb0IsTUFBWHVNLEVBQWtCLEVBQUlBLEVBQVF2TSxnQkFFdEN3TSxVQUNJek0sRUFBUUMsR0FBUSxLQUNuQnlNLEVBQVFGLEVBQVF4TSxRQUNmMk0sSUFBSUQsRUFBTSxHQUFJQSxFQUFNLEtDWDdCLFNBQVNFLGtCQUNGZixTQUFXLElBQUlVLGVBQ2ZULEtBQU8sRUNGZCxTQUFTZSxZQUFZMU4sT0FDZjNELEVBQU9uQyxLQUFLd1MsU0FDWnZPLEVBQVM5QixFQUFBLE9BQWUyRCxlQUV2QjJNLEtBQU90USxFQUFLc1EsS0FDVnhPLEVDTFQsU0FBU3dQLFNBQVMzTixVQUNUOUYsS0FBS3dTLFNBQVNrQixJQUFJNU4sR0NEM0IsU0FBUzZOLFNBQVM3TixVQUNUOUYsS0FBS3dTLFNBQVNvQixJQUFJOU4sR0plM0JvTixVQUFVOVAsVUFBVWdRLE1BQVFiLGVBQzVCVyxVQUFVOVAsVUFBVixPQUFnQ3lQLGdCQUNoQ0ssVUFBVTlQLFVBQVVzUSxJQUFNWCxhQUMxQkcsVUFBVTlQLFVBQVV3USxJQUFNWixhQUMxQkUsVUFBVTlQLFVBQVVrUSxJQUFNTCxhS3pCMUIsSUFBSVksSUFBTTlOLFVBQVUvQyxLQUFNLE9DRHRCOFEsYUFBZS9OLFVBQVVqRCxPQUFRLFVDTXJDLFNBQVNpUixpQkFDRnZCLFNBQVdzQixhQUFlQSxhQUFhLGNBQ3ZDckIsS0FBTyxFQ0RkLFNBQVN1QixXQUFXbE8sT0FDZDdCLEVBQVNqRSxLQUFLNFQsSUFBSTlOLFdBQWU5RixLQUFLd1MsU0FBUzFNLGVBQzlDMk0sTUFBUXhPLEVBQVMsRUFBSSxFQUNuQkEsRUNWVCxJQUFJZ1EsZUFBaUIsNEJBR2pCOVEsZUFBY0wsT0FBT00sVUFHckI1QixpQkFBaUIyQixlQUFZM0IsZUFXakMsU0FBUzBTLFFBQVFwTyxPQUNYM0QsRUFBT25DLEtBQUt3UyxZQUNac0IsYUFBYyxLQUNaN1AsRUFBUzlCLEVBQUsyRCxVQUNYN0IsSUFBV2dRLG9CQUFpQnhRLEVBQVlRLFNBRTFDekMsaUJBQWVxQyxLQUFLMUIsRUFBTTJELEdBQU8zRCxFQUFLMkQsUUFBT3JDLEVDdkJ0RCxJQUFJTixlQUFjTCxPQUFPTSxVQUdyQjVCLGtCQUFpQjJCLGVBQVkzQixlQVdqQyxTQUFTMlMsUUFBUXJPLE9BQ1gzRCxFQUFPbkMsS0FBS3dTLGdCQUNUc0Isa0JBQThCclEsSUFBZHRCLEVBQUsyRCxHQUFzQnRFLGtCQUFlcUMsS0FBSzFCLEVBQU0yRCxHQ2hCOUUsSUFBSW1PLGlCQUFpQiw0QkFZckIsU0FBU0csUUFBUXRPLEVBQUtuQyxPQUNoQnhCLEVBQU9uQyxLQUFLd1MscUJBQ1hDLE1BQVF6UyxLQUFLNFQsSUFBSTlOLEdBQU8sRUFBSSxJQUM1QkEsR0FBUWdPLG1CQUEwQnJRLElBQVZFLEVBQXVCc1EsaUJBQWlCdFEsRUFDOUQzRCxLQ05ULFNBQVNxVSxLQUFLbEIsT0FDUnhNLEdBQVMsRUFDVEMsRUFBb0IsTUFBWHVNLEVBQWtCLEVBQUlBLEVBQVF2TSxnQkFFdEN3TSxVQUNJek0sRUFBUUMsR0FBUSxLQUNuQnlNLEVBQVFGLEVBQVF4TSxRQUNmMk0sSUFBSUQsRUFBTSxHQUFJQSxFQUFNLEtDVDdCLFNBQVNpQixxQkFDRjdCLEtBQU8sT0FDUEQsZUFDSyxJQUFJNkIsU0FDTCxJQUFLUixLQUFPWCxrQkFDVCxJQUFJbUIsTUNUbEIsU0FBU0UsVUFBVTVRLE9BQ2JZLFdBQWNaLHNCQUFBQSxTQUNGLFVBQVJZLEdBQTRCLFVBQVJBLEdBQTRCLFVBQVJBLEdBQTRCLFdBQVJBLEVBQ3JELGNBQVZaLEVBQ1UsT0FBVkEsRUNEUCxTQUFTNlEsV0FBV0MsRUFBSzNPLE9BQ25CM0QsRUFBT3NTLEVBQUlqQyxnQkFDUitCLFVBQVV6TyxHQUNiM0QsRUFBbUIsaUJBQVAyRCxFQUFrQixTQUFXLFFBQ3pDM0QsRUFBS3NTLElDSFgsU0FBU0MsZUFBZTVPLE9BQ2xCN0IsRUFBU3VRLFdBQVd4VSxLQUFNOEYsR0FBakIsT0FBZ0NBLGVBQ3hDMk0sTUFBUXhPLEVBQVMsRUFBSSxFQUNuQkEsRUNIVCxTQUFTMFEsWUFBWTdPLFVBQ1owTyxXQUFXeFUsS0FBTThGLEdBQUs0TixJQUFJNU4sR0NEbkMsU0FBUzhPLFlBQVk5TyxVQUNaME8sV0FBV3hVLEtBQU04RixHQUFLOE4sSUFBSTlOLEdDQW5DLFNBQVMrTyxZQUFZL08sRUFBS25DLE9BQ3BCeEIsRUFBT3FTLFdBQVd4VSxLQUFNOEYsR0FDeEIyTSxFQUFPdFEsRUFBS3NRLGNBRVhhLElBQUl4TixFQUFLbkMsUUFDVDhPLE1BQVF0USxFQUFLc1EsTUFBUUEsRUFBTyxFQUFJLEVBQzlCelMsS0NMVCxTQUFTOFUsU0FBUzNCLE9BQ1p4TSxHQUFTLEVBQ1RDLEVBQW9CLE1BQVh1TSxFQUFrQixFQUFJQSxFQUFRdk0sZ0JBRXRDd00sVUFDSXpNLEVBQVFDLEdBQVEsS0FDbkJ5TSxFQUFRRixFQUFReE0sUUFDZjJNLElBQUlELEVBQU0sR0FBSUEsRUFBTSxLUks3QmdCLEtBQUtqUixVQUFVZ1EsTUFBUVcsVUFDdkJNLEtBQUtqUixVQUFMLE9BQTJCNFEsV0FDM0JLLEtBQUtqUixVQUFVc1EsSUFBTVEsUUFDckJHLEtBQUtqUixVQUFVd1EsSUFBTU8sUUFDckJFLEtBQUtqUixVQUFVa1EsSUFBTWMsUVFKckJVLFNBQVMxUixVQUFVZ1EsTUFBUWtCLGNBQzNCUSxTQUFTMVIsVUFBVCxPQUErQnNSLGVBQy9CSSxTQUFTMVIsVUFBVXNRLElBQU1pQixZQUN6QkcsU0FBUzFSLFVBQVV3USxJQUFNZ0IsWUFDekJFLFNBQVMxUixVQUFVa1EsSUFBTXVCLFlDeEJ6QixJQUFJRSxpQkFBbUIsSUFZdkIsU0FBU0MsU0FBU2xQLEVBQUtuQyxPQUNqQnhCLEVBQU9uQyxLQUFLd1MsWUFDWnJRLGFBQWdCK1EsVUFBVyxLQUN6QitCLEVBQVE5UyxFQUFLcVEsYUFDWnFCLEtBQVFvQixFQUFNck8sT0FBU21PLGlCQUFtQixXQUN2QzlILE1BQU1uSCxFQUFLbkMsU0FDWjhPLE9BQVN0USxFQUFLc1EsS0FDWnpTLE9BRUZBLEtBQUt3UyxTQUFXLElBQUlzQyxTQUFTRyxZQUVqQzNCLElBQUl4TixFQUFLbkMsUUFDVDhPLEtBQU90USxFQUFLc1EsS0FDVnpTLEtDaEJULFNBQVNrVixNQUFNL0IsT0FDVGhSLEVBQU9uQyxLQUFLd1MsU0FBVyxJQUFJVSxVQUFVQyxRQUNwQ1YsS0FBT3RRLEVBQUtzUSxLQ0puQixTQUFTMEMsaUJBQWlCdFAsRUFBUUMsRUFBS25DLFNBQ3RCRixJQUFWRSxHQUF3QnVDLEdBQUdMLEVBQU9DLEdBQU1uQyxXQUM5QkYsSUFBVkUsR0FBeUJtQyxLQUFPRCxvQkFDbkJBLEVBQVFDLEVBQUtuQyxHREtqQ3VSLE1BQU05UixVQUFVZ1EsTUFBUUcsV0FDeEIyQixNQUFNOVIsVUFBTixPQUE0Qm9RLFlBQzVCMEIsTUFBTTlSLFVBQVVzUSxJQUFNRCxTQUN0QnlCLE1BQU05UixVQUFVd1EsSUFBTUQsU0FDdEJ1QixNQUFNOVIsVUFBVWtRLElBQU0wQixTRXJCdEIsSUFBSWpMLGNBQWdDLCtCQUFYQyw0QkFBQUEsV0FBdUJBLFVBQVlBLFFBQVFDLFVBQVlELFFBRzVFRSxhQUFhSCxlQUFnQywrQkFBVkksMkJBQUFBLFVBQXNCQSxTQUFXQSxPQUFPRixVQUFZRSxPQUd2RkMsZ0JBQWdCRixjQUFjQSxhQUFXRixVQUFZRCxjQUdyRE0sU0FBU0QsZ0JBQWdCcEgsS0FBS3FILFlBQVM1RyxFQUN2QzJSLFlBQWMvSyxTQUFTQSxTQUFPK0ssaUJBQWMzUixFQVVoRCxTQUFTNFIsWUFBWUMsRUFBUUMsTUFDdkJBLFNBQ0tELEVBQU85RCxZQUVaNUssRUFBUzBPLEVBQU8xTyxPQUNoQjNDLEVBQVNtUixZQUFjQSxZQUFZeE8sR0FBVSxJQUFJME8sRUFBT2xJLFlBQVl4RyxZQUVqRTRPLEtBQUt2UixHQUNMQSxFQzVCVCxJQUFJd1IsYUFBYXpTLEtBQUt5UyxXQ010QixTQUFTQyxpQkFBaUJDLE9BQ3BCMVIsRUFBUyxJQUFJMFIsRUFBWXZJLFlBQVl1SSxFQUFZQyx1QkFDakRILGFBQVd4UixHQUFRcVAsSUFBSSxJQUFJbUMsYUFBV0UsSUFDbkMxUixFQ0ZULFNBQVM0UixnQkFBZ0JDLEVBQVlQLE9BQy9CRCxFQUFTQyxFQUFTRyxpQkFBaUJJLEVBQVdSLFFBQVVRLEVBQVdSLGNBQ2hFLElBQUlRLEVBQVcxSSxZQUFZa0ksRUFBUVEsRUFBV0MsV0FBWUQsRUFBV2xQLFFDSjlFLFNBQVNvUCxVQUFVelAsRUFBUWtCLE9BQ3JCZCxHQUFTLEVBQ1RDLEVBQVNMLEVBQU9LLGVBRVZhLEVBQVFDLE1BQU1kLE1BQ2ZELEVBQVFDLEtBQ1RELEdBQVNKLEVBQU9JLFVBRWpCYyxFQ2JULElBQUl3TyxhQUFlblQsT0FBT29ULE9BVXRCQyxXQUFjLG9CQUNQdFEsWUFDRixTQUFTb0ksT0FDVDNKLFNBQVMySixlQUdWZ0ksb0JBQ0tBLGFBQWFoSSxLQUVmN0ssVUFBWTZLLE1BQ2ZoSyxFQUFTLElBQUk0QixXQUNWekMsZUFBWUssRUFDWlEsR0FaTyxHQ0ZsQixTQUFTbVMsZ0JBQWdCdlEsU0FDYyxtQkFBdEJBLEVBQU91SCxhQUE4QkYsWUFBWXJILE1BQzVEc1EsV0FBV3RJLGFBQWFoSSxJQ2U5QixTQUFTd1Esa0JBQWtCMVMsVUFDbEI2RixhQUFhN0YsSUFBVWtGLFlBQVlsRixHQ3JCNUMsU0FBUzJTLFFBQVF6USxFQUFRQyxNQUNaLGFBQVBBLFNBSUdELEVBQU9DLEdDY2hCLFNBQVN5USxjQUFjNVMsVUFDZDJDLFdBQVczQyxFQUFPNkosT0FBTzdKLElDR2xDLFNBQVM2UyxjQUFjM1EsRUFBUVUsRUFBUVQsRUFBSzRILEVBQVUrSSxFQUFXaFEsRUFBWWlRLE9BQ3ZFclEsRUFBV2lRLFFBQVF6USxFQUFRQyxHQUMzQjRJLEVBQVc0SCxRQUFRL1AsRUFBUVQsR0FDM0I2USxFQUFVRCxFQUFNaEQsSUFBSWhGLE1BRXBCaUksbUJBQ2U5USxFQUFRQyxFQUFLNlEsWUFHNUI5UCxFQUFXSixFQUNYQSxFQUFXSixFQUFVcUksRUFBVzVJLEVBQU0sR0FBS0QsRUFBUVUsRUFBUW1RLFFBQzNEalQsRUFFQW1ULE9BQXdCblQsSUFBYm9ELEtBRVgrUCxFQUFVLEtBQ1JqSyxFQUFROUMsUUFBUTZFLEdBQ2hCN0IsR0FBVUYsR0FBU3BDLFNBQVNtRSxHQUM1Qm1JLEdBQVdsSyxJQUFVRSxHQUFVTCxhQUFha0MsS0FFckNBLEVBQ1AvQixHQUFTRSxHQUFVZ0ssRUFDakJoTixRQUFReEQsS0FDQ0EsRUFFSmdRLGtCQUFrQmhRLEtBQ2QyUCxVQUFVM1AsR0FFZHdHLE1BQ0ksSUFDQXdJLFlBQVkzRyxHQUFVLElBRTFCbUksTUFDSSxJQUNBaEIsZ0JBQWdCbkgsR0FBVSxTQU1oQ1YsY0FBY1UsSUFBYTlFLFlBQVk4RSxNQUNuQ3JJLEVBQ1B1RCxZQUFZdkQsS0FDSGtRLGNBQWNsUSxHQUVqQi9CLFNBQVMrQixLQUFhekIsV0FBV3lCLE9BQzlCK1AsZ0JBQWdCMUgsUUFJbEIsRUFHWGtJLE1BRUl0RCxJQUFJNUUsRUFBVTdILEtBQ1ZBLEVBQVU2SCxFQUFVaEIsRUFBVWpILEVBQVlpUSxLQUNwRCxPQUFnQmhJLHFCQUVEN0ksRUFBUUMsRUFBS2UsSUN2RWhDLFNBQVNpUSxVQUFValIsRUFBUVUsRUFBUW1ILEVBQVVqSCxFQUFZaVEsR0FDbkQ3USxJQUFXVSxXQUdQQSxFQUFRLFNBQVNtSSxFQUFVNUksTUFDN0J4QixTQUFTb0ssT0FDRGdJLEVBQVEsSUFBSXhCLHFCQUNSclAsRUFBUVUsRUFBUVQsRUFBSzRILEVBQVVvSixVQUFXclEsRUFBWWlRLE9BRWpFLEtBQ0M3UCxFQUFXSixFQUNYQSxFQUFXNlAsUUFBUXpRLEVBQVFDLEdBQU00SSxFQUFXNUksRUFBTSxHQUFLRCxFQUFRVSxFQUFRbVEsUUFDdkVqVCxPQUVhQSxJQUFib0QsTUFDUzZILG9CQUVJN0ksRUFBUUMsRUFBS2UsS0FFL0IyRyxRQ0pMLElBQUl1SixNQUFROU4sZUFBZSxTQUFTcEQsRUFBUVUsRUFBUW1ILGFBQ3hDN0gsRUFBUVUsRUFBUW1ILEtDTjVCLFNBQVNzSixPQUFPblIsVUFDRyxNQUFWQSxLQUFzQjJJLFdBQVczSSxFQUFRYixLQUFLYSxJQzdCdkQsSUFBSW9PLGlCQUFpQiw0QkFZckIsU0FBU2dELFlBQVl0VCxlQUNkNk8sU0FBU2MsSUFBSTNQLEVBQU9zUSxrQkFDbEJqVSxLQ05ULFNBQVNrWCxZQUFZdlQsVUFDWjNELEtBQUt3UyxTQUFTb0IsSUFBSWpRLEdDRTNCLFNBQVN3VCxTQUFTSCxPQUNaclEsR0FBUyxFQUNUQyxFQUFtQixNQUFWb1EsRUFBaUIsRUFBSUEsRUFBT3BRLGdCQUVwQzRMLFNBQVcsSUFBSXNDLFdBQ1huTyxFQUFRQyxRQUNWd1EsSUFBSUosRUFBT3JRLElDUnBCLFNBQVMwUSxVQUFVNVAsRUFBTzZQLFdBQ3BCM1EsR0FBUyxFQUNUQyxFQUFrQixNQUFUYSxFQUFnQixFQUFJQSxFQUFNYixTQUU5QkQsRUFBUUMsTUFDWDBRLEVBQVU3UCxFQUFNZCxHQUFRQSxFQUFPYyxVQUMxQixTQUdKLEVDWFQsU0FBUzhQLFNBQVNDLEVBQU8xUixVQUNoQjBSLEVBQU01RCxJQUFJOU4sR0ZjbkJxUixTQUFTL1QsVUFBVWdVLElBQU1ELFNBQVMvVCxVQUFVNkosS0FBT2dLLFlBQ25ERSxTQUFTL1QsVUFBVXdRLElBQU1zRCxZR25CekIsSUFBSU8scUJBQXVCLEVBQ3ZCQyx1QkFBeUIsRUFlN0IsU0FBU0MsWUFBWWxRLEVBQU90QixFQUFPeVIsRUFBU25SLEVBQVlvUixFQUFXbkIsT0FDN0RvQixFQUFZRixFQUFVSCxxQkFDdEJNLEVBQVl0USxFQUFNYixPQUNsQm9SLEVBQVk3UixFQUFNUyxVQUVsQm1SLEdBQWFDLEtBQWVGLEdBQWFFLEVBQVlELFVBQ2hELE1BR0xwQixFQUFVRCxFQUFNaEQsSUFBSWpNLE1BQ3BCa1AsR0FBV0QsRUFBTWhELElBQUl2TixVQUNoQndRLEdBQVd4USxNQUVoQlEsR0FBUyxFQUNUMUMsR0FBUyxFQUNUZ1UsRUFBUUwsRUFBVUYsdUJBQTBCLElBQUlQLGNBQVcxVCxRQUV6RDZQLElBQUk3TCxFQUFPdEIsS0FDWG1OLElBQUluTixFQUFPc0IsS0FHUmQsRUFBUW9SLEdBQVcsS0FDdEJHLEVBQVd6USxFQUFNZCxHQUNqQndSLEVBQVdoUyxFQUFNUSxNQUVqQkYsTUFDRTJSLEVBQVdOLEVBQ1hyUixFQUFXMFIsRUFBVUQsRUFBVXZSLEVBQU9SLEVBQU9zQixFQUFPaVAsR0FDcERqUSxFQUFXeVIsRUFBVUMsRUFBVXhSLEVBQU9jLEVBQU90QixFQUFPdVEsV0FFekNqVCxJQUFiMlUsRUFBd0IsSUFDdEJBLGNBR0ssV0FJUEgsT0FDR1osVUFBVWxSLEVBQU8sU0FBU2dTLEVBQVVFLE9BQzlCZCxTQUFTVSxFQUFNSSxLQUNmSCxJQUFhQyxHQUFZTixFQUFVSyxFQUFVQyxFQUFVUCxFQUFTblIsRUFBWWlRLFdBQ3hFdUIsRUFBS2hMLEtBQUtvTCxLQUVqQixJQUNHLGNBR04sR0FDREgsSUFBYUMsSUFDWE4sRUFBVUssRUFBVUMsRUFBVVAsRUFBU25SLEVBQVlpUSxHQUNwRCxJQUNJLGtCQUliLE9BQWdCalAsS0FDaEIsT0FBZ0J0QixHQUNUbEMsRUN4RVQsU0FBU3FVLFdBQVc3RCxPQUNkOU4sR0FBUyxFQUNUMUMsRUFBU3lELE1BQU0rTSxFQUFJaEMsZUFFbkJILFFBQVEsU0FBUzNPLEVBQU9tQyxPQUNqQmEsSUFBVWIsRUFBS25DLEtBRW5CTSxFQ1BULFNBQVNzVSxXQUFXakYsT0FDZDNNLEdBQVMsRUFDVDFDLEVBQVN5RCxNQUFNNEwsRUFBSWIsZUFFbkJILFFBQVEsU0FBUzNPLE9BQ1ZnRCxHQUFTaEQsSUFFYk0sRUNOVCxJQUFJd1QsdUJBQXVCLEVBQ3ZCQyx5QkFBeUIsRUFHekJqTixVQUFVLG1CQUNWQyxVQUFVLGdCQUNWQyxXQUFXLGlCQUNYQyxTQUFTLGVBQ1RDLFlBQVksa0JBQ1pFLFlBQVksa0JBQ1pDLFNBQVMsZUFDVEMsWUFBWSxrQkFDWm1FLFlBQVksa0JBRVpqRSxpQkFBaUIsdUJBQ2pCQyxjQUFjLG9CQUdkbUUsY0FBY3JNLFFBQVNBLFFBQU9FLGVBQVlLLEVBQzFDK1UsY0FBZ0JqSixjQUFjQSxjQUFZa0osYUFBVWhWLEVBbUJ4RCxTQUFTaVYsV0FBVzdTLEVBQVFNLEVBQU9yQyxFQUFLOFQsRUFBU25SLEVBQVlvUixFQUFXbkIsVUFDOUQ1UyxRQUNEc0gsaUJBQ0V2RixFQUFPK1AsWUFBY3pQLEVBQU15UCxZQUMzQi9QLEVBQU9rUSxZQUFjNVAsRUFBTTRQLGtCQUN2QixJQUVBbFEsRUFBT3lQLFNBQ1JuUCxFQUFNbVAsWUFFWG5LLHlCQUNFdEYsRUFBTytQLFlBQWN6UCxFQUFNeVAsYUFDM0JpQyxFQUFVLElBQUlwQyxhQUFXNVAsR0FBUyxJQUFJNFAsYUFBV3RQLFVBS25Ec0UsZUFDQUMsZUFDQUcsbUJBR0kzRSxJQUFJTCxHQUFTTSxRQUVqQndFLGtCQUNJOUUsRUFBT3hGLE1BQVE4RixFQUFNOUYsTUFBUXdGLEVBQU91SSxTQUFXakksRUFBTWlJLGFBRXpEckQsaUJBQ0FFLG1CQUlJcEYsR0FBV00sRUFBUSxRQUV2QnlFLGFBQ0MrTixFQUFVTCxnQkFFWHROLGFBQ0M4TSxFQUFZRixFQUFVSCw4QkFDZGtCLEVBQVVKLFlBRWxCMVMsRUFBTzRNLE1BQVF0TSxFQUFNc00sT0FBU3FGLFNBQ3pCLE1BR0xuQixFQUFVRCxFQUFNaEQsSUFBSTdOLE1BQ3BCOFEsU0FDS0EsR0FBV3hRLEtBRVR1UiwyQkFHTHBFLElBQUl6TixFQUFRTSxPQUNkbEMsRUFBUzBULFlBQVlnQixFQUFROVMsR0FBUzhTLEVBQVF4UyxHQUFReVIsRUFBU25SLEVBQVlvUixFQUFXbkIsWUFDMUYsT0FBZ0I3USxHQUNUNUIsT0FFSm1MLGVBQ0NvSixxQkFDS0EsY0FBYzNVLEtBQUtnQyxJQUFXMlMsY0FBYzNVLEtBQUtzQyxVQUd2RCxFQ3BHVCxTQUFTeVMsVUFBVW5SLEVBQU91UCxXQUNwQnJRLEdBQVMsRUFDVEMsRUFBU29RLEVBQU9wUSxPQUNoQjJLLEVBQVM5SixFQUFNYixTQUVWRCxFQUFRQyxLQUNUMkssRUFBUzVLLEdBQVNxUSxFQUFPclEsVUFFMUJjLEVDRlQsU0FBU29SLGVBQWVoVCxFQUFRZ00sRUFBVWlILE9BQ3BDN1UsRUFBUzROLEVBQVNoTSxVQUNmZ0UsUUFBUWhFLEdBQVU1QixFQUFTMlUsVUFBVTNVLEVBQVE2VSxFQUFZalQsSUNQbEUsU0FBU2tULFlBQVl0UixFQUFPNlAsV0FDdEIzUSxHQUFTLEVBQ1RDLEVBQWtCLE1BQVRhLEVBQWdCLEVBQUlBLEVBQU1iLE9BQ25Db1MsRUFBVyxFQUNYL1UsT0FFSzBDLEVBQVFDLEdBQVEsS0FDbkJqRCxFQUFROEQsRUFBTWQsR0FDZDJRLEVBQVUzVCxFQUFPZ0QsRUFBT2MsT0FDbkJ1UixLQUFjclYsVUFHbEJNLEVDSFQsU0FBU2dWLHFCQ2RULElBQUk5VixlQUFjTCxPQUFPTSxVQUdyQnVHLHVCQUF1QnhHLGVBQVl3RyxxQkFHbkN1UCxpQkFBbUJwVyxPQUFPcVcsc0JBUzFCQyxXQUFjRixpQkFBK0IsU0FBU3JULFVBQzFDLE1BQVZBLFFBR0svQyxPQUFPK0MsR0FDVGtULFlBQVlHLGlCQUFpQnJULEdBQVMsU0FBU3dULFVBQzdDMVAsdUJBQXFCOUYsS0FBS2dDLEVBQVF3VCxPQU5SSixVQ1JyQyxTQUFTSyxXQUFXelQsVUFDWGdULGVBQWVoVCxFQUFRYixLQUFNb1UsWUNUdEMsSUFBSTNCLHVCQUF1QixFQUd2QnRVLGVBQWNMLE9BQU9NLFVBR3JCNUIsa0JBQWlCMkIsZUFBWTNCLGVBZWpDLFNBQVMrWCxhQUFhMVQsRUFBUU0sRUFBT3lSLEVBQVNuUixFQUFZb1IsRUFBV25CLE9BQy9Eb0IsRUFBWUYsRUFBVUgsdUJBQ3RCK0IsRUFBV0YsV0FBV3pULEdBQ3RCNFQsRUFBWUQsRUFBUzVTLFVBSXJCNlMsR0FIV0gsV0FBV25ULEdBQ0RTLFNBRU1rUixTQUN0QixVQUVMblIsRUFBUThTLEVBQ0w5UyxLQUFTLEtBQ1ZiLEVBQU0wVCxFQUFTN1MsUUFDYm1SLEVBQVloUyxLQUFPSyxFQUFRM0Usa0JBQWVxQyxLQUFLc0MsRUFBT0wsV0FDbkQsTUFJUDZRLEVBQVVELEVBQU1oRCxJQUFJN04sTUFDcEI4USxHQUFXRCxFQUFNaEQsSUFBSXZOLFVBQ2hCd1EsR0FBV3hRLE1BRWhCbEMsR0FBUyxJQUNQcVAsSUFBSXpOLEVBQVFNLEtBQ1ptTixJQUFJbk4sRUFBT04sV0FFYjZULEVBQVc1QixJQUNOblIsRUFBUThTLEdBQVcsS0FFdEJwVCxFQUFXUixJQURUMlQsRUFBUzdTLElBRVh3UixFQUFXaFMsRUFBTUwsTUFFakJXLE1BQ0UyUixFQUFXTixFQUNYclIsRUFBVzBSLEVBQVU5UixFQUFVUCxFQUFLSyxFQUFPTixFQUFRNlEsR0FDbkRqUSxFQUFXSixFQUFVOFIsRUFBVXJTLEVBQUtELEVBQVFNLEVBQU91USxhQUd0Q2pULElBQWIyVSxFQUNHL1IsSUFBYThSLEdBQVlOLEVBQVV4UixFQUFVOFIsRUFBVVAsRUFBU25SLEVBQVlpUSxHQUM3RTBCLEdBQ0QsSUFDSSxZQUdFc0IsRUFBa0IsZUFBUDVULE1BRXRCN0IsSUFBV3lWLEVBQVUsS0FDbkJDLEVBQVU5VCxFQUFPdUgsWUFDakJ3TSxFQUFVelQsRUFBTWlILFlBR2hCdU0sR0FBV0MsR0FDVixnQkFBaUIvVCxHQUFVLGdCQUFpQk0sS0FDekIsbUJBQVh3VCxHQUF5QkEsYUFBbUJBLEdBQ2pDLG1CQUFYQyxHQUF5QkEsYUFBbUJBLFFBQzlDLFlBR2IsT0FBZ0IvVCxLQUNoQixPQUFnQk0sR0FDVGxDLEVDakZULElBQUk0VixTQUFXOVQsVUFBVS9DLEtBQU0sWUNBM0I4VyxVQUFVL1QsVUFBVS9DLEtBQU0sV0NBMUIrVyxNQUFNaFUsVUFBVS9DLEtBQU0sT0NBdEJnWCxRQUFValUsVUFBVS9DLEtBQU0sV0NLMUI0SCxTQUFTLGVBQ1RFLFlBQVksa0JBQ1ptUCxXQUFhLG1CQUNialAsU0FBUyxlQUNURSxhQUFhLG1CQUViRSxjQUFjLG9CQUdkOE8sbUJBQXFCNVUsU0FBU3VVLFVBQzlCTSxjQUFnQjdVLFNBQVN1TyxLQUN6QnVHLGtCQUFvQjlVLFNBQVN3VSxXQUM3Qk8sY0FBZ0IvVSxTQUFTeVUsT0FDekJPLGtCQUFvQmhWLFNBQVMwVSxTQVM3Qk8sT0FBU2xXLFlBR1J3VixVQUFZVSxPQUFPLElBQUlWLFNBQVMsSUFBSVcsWUFBWSxNQUFRcFAsZUFDeER5SSxLQUFPMEcsT0FBTyxJQUFJMUcsTUFBUWpKLFVBQzFCa1AsV0FBV1MsT0FBT1QsVUFBUVcsWUFBY1IsWUFDeENGLE9BQU9RLE9BQU8sSUFBSVIsUUFBUS9PLFVBQzFCZ1AsU0FBV08sT0FBTyxJQUFJUCxVQUFZOU8sdUJBQzVCLFNBQVN2SCxPQUNaTSxFQUFTSSxXQUFXVixHQUNwQndKLEVBQU9sSixHQUFVNkcsWUFBWW5ILEVBQU15SixpQkFBYzNKLEVBQ2pEaVgsRUFBYXZOLEVBQU83SCxTQUFTNkgsR0FBUSxNQUVyQ3VOLFNBQ01BLFFBQ0RSLDBCQUEyQjlPLG1CQUMzQitPLHFCQUFzQnZQLGNBQ3RCd1AseUJBQTBCSCxnQkFDMUJJLHFCQUFzQnJQLGNBQ3RCc1AseUJBQTBCcFAsb0JBRzVCakgsSUFJWCxhQUFlc1csT0MvQ1g5Qyx1QkFBdUIsRUFHdkJoTyxVQUFVLHFCQUNWZSxXQUFXLGlCQUNYTSxZQUFZLGtCQUdaM0gsZUFBY0wsT0FBT00sVUFHckI1QixrQkFBaUIyQixlQUFZM0IsZUFnQmpDLFNBQVNtWixnQkFBZ0I5VSxFQUFRTSxFQUFPeVIsRUFBU25SLEVBQVlvUixFQUFXbkIsT0FDbEVrRSxFQUFXL1EsUUFBUWhFLEdBQ25CZ1YsRUFBV2hSLFFBQVExRCxHQUNuQjJVLEVBQVNGLEVBQVdwUSxXQUFXK1AsU0FBTzFVLEdBQ3RDa1YsRUFBU0YsRUFBV3JRLFdBQVcrUCxTQUFPcFUsR0FLdEM2VSxLQUhLRixHQUFVclIsVUFBVXFCLFlBQVlnUSxJQUdoQmhRLFlBQ3JCbVEsS0FIS0YsR0FBVXRSLFVBQVVxQixZQUFZaVEsSUFHaEJqUSxZQUNyQm9RLEVBQVlKLEdBQVVDLEtBRXRCRyxHQUFhM1EsU0FBUzFFLEdBQVMsS0FDNUIwRSxTQUFTcEUsVUFDTCxLQUVFLEtBQ0EsS0FFVCtVLElBQWNGLGFBQ050RSxFQUFRLElBQUl4QixPQUNkMEYsR0FBWXBPLGFBQWEzRyxHQUM3QjhSLFlBQVk5UixFQUFRTSxFQUFPeVIsRUFBU25SLEVBQVlvUixFQUFXbkIsR0FDM0RnQyxXQUFXN1MsRUFBUU0sRUFBTzJVLEVBQVFsRCxFQUFTblIsRUFBWW9SLEVBQVduQixRQUVsRWtCLEVBQVVILHdCQUF1QixLQUNqQzBELEVBQWVILEdBQVl4WixrQkFBZXFDLEtBQUtnQyxFQUFRLGVBQ3ZEdVYsRUFBZUgsR0FBWXpaLGtCQUFlcUMsS0FBS3NDLEVBQU8sa0JBRXREZ1YsR0FBZ0JDLEVBQWMsS0FDNUJDLEVBQWVGLEVBQWV0VixFQUFPbEMsUUFBVWtDLEVBQy9DeVYsRUFBZUYsRUFBZWpWLEVBQU14QyxRQUFVd0MsYUFFeEN1USxFQUFRLElBQUl4QixPQUNmMkMsRUFBVXdELEVBQWNDLEVBQWMxRCxFQUFTblIsRUFBWWlRLFlBR2pFd0UsUUFHS3hFLEVBQVEsSUFBSXhCLE9BQ2ZxRSxhQUFhMVQsRUFBUU0sRUFBT3lSLEVBQVNuUixFQUFZb1IsRUFBV25CLElDOURyRSxTQUFTNkUsWUFBWTVYLEVBQU93QyxFQUFPeVIsRUFBU25SLEVBQVlpUSxVQUNsRC9TLElBQVV3QyxJQUdELE1BQVR4QyxHQUEwQixNQUFUd0MsSUFBbUJxRCxhQUFhN0YsS0FBVzZGLGFBQWFyRCxHQUNwRXhDLEdBQVVBLEdBQVN3QyxHQUFVQSxFQUUvQndVLGdCQUFnQmhYLEVBQU93QyxFQUFPeVIsRUFBU25SLEVBQVk4VSxZQUFhN0UsSUNwQnpFLElBQUllLHVCQUF1QixFQUN2QkMseUJBQXlCLEVBWTdCLFNBQVM4RCxZQUFZM1YsRUFBUVUsRUFBUWtWLEVBQVdoVixPQUMxQ0UsRUFBUThVLEVBQVU3VSxPQUNsQkEsRUFBU0QsRUFDVCtVLEdBQWdCalYsS0FFTixNQUFWWixTQUNNZSxRQUVEOUQsT0FBTytDLEdBQ1RjLEtBQVMsS0FDVnhFLEVBQU9zWixFQUFVOVUsTUFDaEIrVSxHQUFnQnZaLEVBQUssR0FDbEJBLEVBQUssS0FBTzBELEVBQU8xRCxFQUFLLE1BQ3RCQSxFQUFLLEtBQU0wRCxVQUVaLFNBR0ZjLEVBQVFDLEdBQVEsS0FFbkJkLEtBREcyVixFQUFVOVUsSUFDRixHQUNYTixFQUFXUixFQUFPQyxHQUNsQjRJLEVBQVd2TSxFQUFLLE1BRWhCdVosR0FBZ0J2WixFQUFLLFlBQ05zQixJQUFiNEMsS0FBNEJQLEtBQU9ELFVBQzlCLE1BRUosS0FDRDZRLEVBQVEsSUFBSXhCLFNBQ1p6TyxNQUNFeEMsRUFBU3dDLEVBQVdKLEVBQVVxSSxFQUFVNUksRUFBS0QsRUFBUVUsRUFBUW1RLGFBRWxEalQsSUFBWFEsRUFDRXNYLFlBQVk3TSxFQUFVckksRUFBVW9SLHVCQUF1QkMseUJBQXdCalIsRUFBWWlRLEdBQzNGelMsVUFFQyxVQUlOLEVDaERULFNBQVMwWCxtQkFBbUJoWSxVQUNuQkEsR0FBVUEsSUFBVVcsU0FBU1gsR0NEdEMsU0FBU2lZLGFBQWEvVixXQUNoQjVCLEVBQVNlLEtBQUthLEdBQ2RlLEVBQVMzQyxFQUFPMkMsT0FFYkEsS0FBVSxLQUNYZCxFQUFNN0IsRUFBTzJDLEdBQ2JqRCxFQUFRa0MsRUFBT0MsS0FFWmMsSUFBV2QsRUFBS25DLEVBQU9nWSxtQkFBbUJoWSxXQUU1Q00sRUNYVCxTQUFTNFgsd0JBQXdCL1YsRUFBSzRJLFVBQzdCLFNBQVM3SSxVQUNBLE1BQVZBLElBR0dBLEVBQU9DLEtBQVM0SSxTQUNQakwsSUFBYmlMLEdBQTJCNUksS0FBT2hELE9BQU8rQyxNQ0poRCxTQUFTaVcsWUFBWXZWLE9BQ2ZrVixFQUFZRyxhQUFhclYsVUFDTCxHQUFwQmtWLEVBQVU3VSxRQUFlNlUsRUFBVSxHQUFHLEdBQ2pDSSx3QkFBd0JKLEVBQVUsR0FBRyxHQUFJQSxFQUFVLEdBQUcsSUFFeEQsU0FBUzVWLFVBQ1BBLElBQVdVLEdBQVVpVixZQUFZM1YsRUFBUVUsRUFBUWtWLElDYjVELElBQUlNLGFBQWUsbURBQ2ZDLGNBQWdCLFFBVXBCLFNBQVNDLE1BQU10WSxFQUFPa0MsTUFDaEJnRSxRQUFRbEcsVUFDSCxNQUVMWSxXQUFjWixzQkFBQUEsV0FDTixVQUFSWSxHQUE0QixVQUFSQSxHQUE0QixXQUFSQSxHQUMvQixNQUFUWixJQUFpQjBMLFNBQVMxTCxNQUd2QnFZLGNBQWNyVyxLQUFLaEMsS0FBV29ZLGFBQWFwVyxLQUFLaEMsSUFDMUMsTUFBVmtDLEdBQWtCbEMsS0FBU2IsT0FBTytDLElDdEJ2QyxJQUFJcVcsZ0JBQWtCLHNCQThDdEIsU0FBU0MsUUFBUWhYLEVBQU1pWCxNQUNGLG1CQUFSalgsR0FBbUMsTUFBWmlYLEdBQXVDLG1CQUFaQSxRQUNyRCxJQUFJQyxVQUFVSCxxQkFFbEJJLEVBQVcsU0FBWEEsUUFDRXJWLEVBQU9PLFVBQ1AxQixFQUFNc1csRUFBV0EsRUFBU3JWLE1BQU0vRyxLQUFNaUgsR0FBUUEsRUFBSyxHQUNuRHVRLEVBQVE4RSxFQUFTOUUsU0FFakJBLEVBQU01RCxJQUFJOU4sVUFDTDBSLEVBQU05RCxJQUFJNU4sT0FFZjdCLEVBQVNrQixFQUFLNEIsTUFBTS9HLEtBQU1pSCxZQUNyQnVRLE1BQVFBLEVBQU1sRSxJQUFJeE4sRUFBSzdCLElBQVd1VCxFQUNwQ3ZULFlBRUF1VCxNQUFRLElBQUsyRSxRQUFRSSxPQUFTekgsVUFDaEN3SCxFQUlUSCxRQUFRSSxNQUFRekgsU0NuRWhCLElBQUkwSCxpQkFBbUIsSUFVdkIsU0FBU0MsY0FBY3RYLE9BQ2pCbEIsRUFBU2tZLFFBQVFoWCxFQUFNLFNBQVNXLFVBQzlCMFIsRUFBTS9FLE9BQVMrSixvQkFDWHBKLFFBRUR0TixJQUdMMFIsRUFBUXZULEVBQU91VCxhQUNadlQsRUNuQlQsSUFBSXlZLFdBQWEsbUdBR2JDLGFBQWUsV0FTZkMsYUFBZUgsY0FBYyxTQUFTM1UsT0FDcEM3RCxZQUN5QixLQUF6QjZELEVBQU8rVSxXQUFXLE1BQ2I1UCxLQUFLLE1BRVByTSxRQUFROGIsV0FBWSxTQUFTdGIsRUFBTzBiLEVBQVFDLEVBQU9DLEtBQ2pEL1AsS0FBSzhQLEVBQVFDLEVBQVVwYyxRQUFRK2IsYUFBYyxNQUFTRyxHQUFVMWIsS0FFbEU2QyxJQ1ZULFNBQVNnWixTQUFTdFosRUFBT2tDLFVBQ25CZ0UsUUFBUWxHLEdBQ0hBLEVBRUZzWSxNQUFNdFksRUFBT2tDLElBQVdsQyxHQUFTaVosYUFBYXRaLFNBQVNLLElDZGhFLElBQUkyTCxXQUFXLEVBQUEsRUFTZixTQUFTNE4sTUFBTXZaLE1BQ08saUJBQVRBLEdBQXFCMEwsU0FBUzFMLFVBQ2hDQSxNQUVMTSxFQUFVTixFQUFRLFNBQ0osS0FBVk0sR0FBa0IsRUFBSU4sSUFBVzJMLFdBQVksS0FBT3JMLEVDTjlELFNBQVNrWixRQUFRdFgsRUFBUWpFLFdBR25CK0UsRUFBUSxFQUNSQyxLQUhHcVcsU0FBU3JiLEVBQU1pRSxJQUdKZSxPQUVELE1BQVZmLEdBQWtCYyxFQUFRQyxLQUN0QmYsRUFBT3FYLE1BQU10YixFQUFLK0UsY0FFckJBLEdBQVNBLEdBQVNDLEVBQVVmLE9BQVNwQyxFQ08vQyxTQUFTaVEsTUFBSTdOLEVBQVFqRSxFQUFNd2IsT0FDckJuWixFQUFtQixNQUFWNEIsT0FBaUJwQyxFQUFZMFosUUFBUXRYLEVBQVFqRSxlQUN4QzZCLElBQVhRLEVBQXVCbVosRUFBZW5aLEVDckIvQyxTQUFTb1osVUFBVXhYLEVBQVFDLFVBQ1IsTUFBVkQsR0FBa0JDLEtBQU9oRCxPQUFPK0MsR0NPekMsU0FBU3lYLFFBQVF6WCxFQUFRakUsRUFBTTJiLFdBR3pCNVcsR0FBUyxFQUNUQyxLQUhHcVcsU0FBU3JiLEVBQU1pRSxJQUdKZSxPQUNkM0MsR0FBUyxJQUVKMEMsRUFBUUMsR0FBUSxLQUNuQmQsRUFBTW9YLE1BQU10YixFQUFLK0UsU0FDZjFDLEVBQW1CLE1BQVY0QixHQUFrQjBYLEVBQVExWCxFQUFRQyxZQUd4Q0QsRUFBT0MsVUFFZDdCLEtBQVkwQyxHQUFTQyxFQUNoQjNDLE9BRVUsTUFBVjRCLEVBQWlCLEVBQUlBLEVBQU9lLFNBQ2xCZ0MsU0FBU2hDLElBQVdtQyxRQUFRakQsRUFBS2MsS0FDakRpRCxRQUFRaEUsSUFBVytELFlBQVkvRCxJQ05wQyxTQUFTMlgsTUFBTTNYLEVBQVFqRSxVQUNKLE1BQVZpRSxHQUFrQnlYLFFBQVF6WCxFQUFRakUsRUFBTXliLFdDckJqRCxJQUFJNUYsdUJBQXVCLEVBQ3ZCQyx5QkFBeUIsRUFVN0IsU0FBUytGLG9CQUFvQjdiLEVBQU04TSxVQUM3QnVOLE1BQU1yYSxJQUFTK1osbUJBQW1Cak4sR0FDN0JtTix3QkFBd0JxQixNQUFNdGIsR0FBTzhNLEdBRXZDLFNBQVM3SSxPQUNWUSxFQUFXcU4sTUFBSTdOLEVBQVFqRSxlQUNONkIsSUFBYjRDLEdBQTBCQSxJQUFhcUksRUFDM0M4TyxNQUFNM1gsRUFBUWpFLEdBQ2QyWixZQUFZN00sRUFBVXJJLEVBQVVvUix1QkFBdUJDLDJCQ3JCL0QsU0FBU2dHLGFBQWE1WCxVQUNiLFNBQVNELFVBQ0csTUFBVkEsT0FBaUJwQyxFQUFZb0MsRUFBT0MsSUNBL0MsU0FBUzZYLGlCQUFpQi9iLFVBQ2pCLFNBQVNpRSxVQUNQc1gsUUFBUXRYLEVBQVFqRSxJQ2dCM0IsU0FBU2djLFNBQVNoYyxVQUNUcWEsTUFBTXJhLEdBQVE4YixhQUFhUixNQUFNdGIsSUFBUytiLGlCQUFpQi9iLEdDZnBFLFNBQVNpYyxhQUFhbGEsU0FHQSxtQkFBVEEsRUFDRkEsRUFFSSxNQUFUQSxFQUNLbUQsU0FFVyxvQkFBVG5ELHNCQUFBQSxJQUNGa0csUUFBUWxHLEdBQ1g4WixvQkFBb0I5WixFQUFNLEdBQUlBLEVBQU0sSUFDcENtWSxZQUFZblksR0FFWGlhLFNBQVNqYSxHQ2hCbEIsU0FBU21hLFFBQVEzTCxFQUFZNUksT0FDdkI1QyxHQUFTLEVBQ1QxQyxFQUFTNEUsWUFBWXNKLEdBQWN6SyxNQUFNeUssRUFBV3ZMLDJCQUUvQ3VMLEVBQVksU0FBU3hPLEVBQU9tQyxFQUFLcU0sT0FDL0J4TCxHQUFTNEMsRUFBUzVGLEVBQU9tQyxFQUFLcU0sS0FFbENsTyxFQ1JULFNBQVM4WixXQUFXdFcsRUFBT3VXLE9BQ3JCcFgsRUFBU2EsRUFBTWIsYUFFYnFYLEtBQUtELEdBQ0pwWCxPQUNDQSxHQUFVYSxFQUFNYixHQUFRakQsYUFFekI4RCxFQ1BULFNBQVN5VyxpQkFBaUJ2YSxFQUFPd0MsTUFDM0J4QyxJQUFVd0MsRUFBTyxLQUNmZ1ksT0FBeUIxYSxJQUFWRSxFQUNmeWEsRUFBc0IsT0FBVnphLEVBQ1owYSxFQUFpQjFhLEdBQVVBLEVBQzNCMmEsRUFBY2pQLFNBQVMxTCxHQUV2QjRhLE9BQXlCOWEsSUFBVjBDLEVBQ2ZxWSxFQUFzQixPQUFWclksRUFDWnNZLEVBQWlCdFksR0FBVUEsRUFDM0J1WSxFQUFjclAsU0FBU2xKLE9BRXJCcVksSUFBY0UsSUFBZ0JKLEdBQWUzYSxFQUFRd0MsR0FDdERtWSxHQUFlQyxHQUFnQkUsSUFBbUJELElBQWNFLEdBQ2hFTixHQUFhRyxHQUFnQkUsSUFDNUJOLEdBQWdCTSxJQUNqQkosU0FDSSxNQUVIRCxJQUFjRSxJQUFnQkksR0FBZS9hLEVBQVF3QyxHQUN0RHVZLEdBQWVQLEdBQWdCRSxJQUFtQkQsSUFBY0UsR0FDaEVFLEdBQWFMLEdBQWdCRSxJQUM1QkUsR0FBZ0JGLElBQ2pCSSxTQUNLLFNBR0wsRUNyQlQsU0FBU0UsZ0JBQWdCOVksRUFBUU0sRUFBT3lZLFdBQ2xDalksR0FBUyxFQUNUa1ksRUFBY2haLEVBQU9pWixTQUNyQkMsRUFBYzVZLEVBQU0yWSxTQUNwQmxZLEVBQVNpWSxFQUFZalksT0FDckJvWSxFQUFlSixFQUFPaFksU0FFakJELEVBQVFDLEdBQVEsS0FDbkIzQyxFQUFTaWEsaUJBQWlCVyxFQUFZbFksR0FBUW9ZLEVBQVlwWSxPQUMxRDFDLFNBQ0UwQyxHQUFTcVksRUFDSi9hLEVBR0ZBLEdBQW1CLFFBRGQyYSxFQUFPalksSUFDaUIsRUFBSSxVQVVyQ2QsRUFBT2MsTUFBUVIsRUFBTVEsTUN2QjlCLFNBQVNzWSxZQUFZOU0sRUFBWStNLEVBQVdOLE9BQ3RDalksR0FBUyxXQUNENEgsU0FBUzJRLEVBQVV0WSxPQUFTc1ksR0FBYXBZLFVBQVdrRixVQUFVNlIsZUFTbkVFLFdBUE1ELFFBQVEzTCxFQUFZLFNBQVN4TyxFQUFPbUMsRUFBS3FNLFVBSTNDMk0sU0FITXZRLFNBQVMyUSxFQUFXLFNBQVMzVixVQUNuQ0EsRUFBUzVGLEtBRWFnRCxRQUFXQSxFQUFPaEQsTUFBU0EsS0FHbEMsU0FBU2tDLEVBQVFNLFVBQ2xDd1ksZ0JBQWdCOVksRUFBUU0sRUFBT3lZLEtDRzFDLFNBQVNPLFFBQVFoTixFQUFZK00sRUFBV04sRUFBUXhWLFVBQzVCLE1BQWQrSSxNQUdDdEksUUFBUXFWLE9BQ2MsTUFBYkEsTUFBMEJBLElBR25DclYsVUFESVQsT0FBUTNGLEVBQVltYixPQUVSLE1BQVZBLE1BQXVCQSxJQUUzQkssWUFBWTlNLEVBQVkrTSxFQUFXTixJQy9CNUMsU0FBU1EsUUNQVCxJQUFJOVAsV0FBVyxFQUFBLEVBU1grUCxVQUFjdEYsT0FBUSxFQUFJeEIsV0FBVyxJQUFJd0IsU0FBTyxLQUFLLElBQU96SyxXQUFtQixTQUFTMEgsVUFDbkYsSUFBSStDLE1BQUkvQyxJQUQyRG9JLEtDQ3RFRSxLQUNKLFdBQVlDLFFBQ0xDLFFBQVVGLEVBQUtFLGFBRWZDLFVBQVlDLFNBQVdKLEVBQUtFLFFBQVNELFFBRXJDSSxRQU1UTCxlQUFFSywyQkFDTXhkLEtBQ0F5ZCxFQUFPNWYsS0FBS3lmLFVBQVVHLEtBQ3RCTCxhQUNTRCxLQUFLTyxpQkFDUG5ZLE1BQU1tQyxRQUFRK1YsR0FBU0EsR0FBUUEsbUJBSWpDTCxFQUFPTyxnQkFBU0MsRUFBS3BaLEtBRXZCcVosU0FBU1QsRUFBUVEsR0FBS2xlLGNBQU1DLFFBRXhCbUwsS0FBS2pOLEVBQUtpZ0IsU0FBU0MsS0FBS0MsTUFBTXJlLEdBQVc5QixFQUFLeWYsWUFFL0N0ZCxFQUFLeUUsU0FBVzJZLEVBQU9PLE9BQU9sWixPQUFRLEdBQ25DOFksT0FBT3ZkLEVBQU1uQyxFQUFLeWYsZUFFbkJXLEVBQVdwZ0IsRUFBS3FnQixRQUNwQkMsRUFBT1osT0FBT3ZkLEVBQU1uQyxFQUFLeWYsV0FDekJhLEVBQU9iLFdBR0hjLEVBQUtsZSxTQUFTbWUsY0FBY3hnQixFQUFLeWYsVUFBVWdCLFVBQzNDRixNQUFPaGUsVUFBWTZkLFFBS3hCcGdCLE1BVVhzZixlQUFFVSxrQkFBU1QsRUFBUVEsVUFDUixJQUFJakcsaUJBQVNXLEVBQVNpRyxPQUN2QkMsRUFBTSxJQUFJQyxpQkFDVkMsbUJBQXFCLFNBQVNDLE9BQzVCQyxFQUFPRCxFQUFNRSxPQUNPLElBQXBCRCxFQUFLRSxhQUNIRixFQUFLRyxRQUFVLEtBQU9ILEVBQUtHLE9BQVMsTUFDOUJILEVBQUtqZixZQUVOLElBQUl3TSxNQUFNeVMsRUFBS0csYUFJeEJDLFVBQVksYUFDUCxJQUFJN1MsTUFBTSxrQ0FFZjhTLEtBQUssTUFBVTdCLEVBQU9NLHNCQUFxQkUsR0FBTyxLQUNsRHNCLFNBQ0UsUUFVWi9CLGVBQUVXLGtCQUFTOWQsRUFBTXFPLFVBQ044TyxLQUFLcFQsUUFBUXNFLEVBQVNqTSxNQUFNcEMsRUFBTXFPLElBUzdDOE8sZUFBRUksZ0JBQU92ZCxFQUFNcU8sVUFDSjhPLEtBQUt2SSxNQUFNdkcsRUFBU2pNLE1BQU1wQyxJQVNyQ21kLGVBQUVlLGlCQUFRbGUsRUFBTXFPLFlBQ1BBLFNBQVdBLEVBRVpBLEVBQVM4USxhQUNIdGYsSUFBSUcsR0FHQ29mLFNBREFDLE9BQVFoUixFQUFTaVIsV0FBV0MsS0FBSyxvQkFLakNDLFVBSVJ2QixDQUFTamUsSUFRcEJtZCxLQUFLTyxVQUFZLHVDQU1qQlAsS0FBS21DLDJCQUdDLGtFQUNFLDRFQUNBLDZGQUNGLGNBR0EsaUVBQ0UsOERBQ0UsYUFDTSwwQ0FDRSw2QkFDRixpQkFDRSx5QkFDRixZQUNELDJDQUNBLDRDQUNQLFNBQ0EseURBQ0UsOENBQ0UsMkJBQ0YsaUJBQ0Usa0JBQ0YsWUFDQyxzREFDRCxxQ0FDRSx3QkFDRixpQkFDRSxvQkFDRixVQUNGLE9BQ0Ysb0JBR0EscUNBQ0UsaURBQ0YsS0FDRSxzQ0FDRSw2REFDRSxnRUFDRSw0REFDRywwQkFDQSxrQkFDQSxzQ0FDRCxvQkFDRixPQUNGLFFBQ0EsZ0VBQ00seUNBQ0osbUJBQ0YsVUFDQSx3RUFDSyxVQUNHLGdEQUNBLDBDQUNILHNCQUNILG1GQUNGLFNBQ0EsbUVBQ0Usc0RBQ0YsT0FDQSx1RUFDRSwyREFDRywyQkFDQSxtQkFDQSxzQ0FDRCw4QkFDRixPQUNGLFNBQ0YsU0FDRixZQUNGLGtCQUdBLGdCQVNObkMsS0FBS3BULGdCQUNLLFNBQVMvSixFQUFNcU8sT0FDakI1SixFQUFTNEosRUFBU29SLGlDQUViemYsRUFBSzBmLE1BQU8sU0FBU0MsRUFBTW5iLE9BRTlCb2IsRUFEQUMsRUFBVSxxQkFJSkYsRUFBS0csWUFDWnJoQixRQUFRLDJCQUE0QixLQUdyQkEsUUFBUSxjQUFlLEtBR3ZCc2hCLE9BQU8sRUFBR3RiLElBQ1ZzYixPQUFPLEVBQ3ZCL2EsS0FBS2diLElBQUlILEVBQVFwYixPQUFRb2IsRUFBUUksWUFBWSxTQUcxQ0osUUFBVUEsSUFHUixJQUFJOVosS0FBS0EsS0FBS2lZLE1BQU0yQixFQUFLTyxRQUFRemhCLFFBQVEsSUFBSyxPQUNsRDBoQixtQkFBbUI5UixFQUFTK1IsY0FBZS9SLEVBQVNnUyxrQkFFbERULEtBQU9BLEVBRUxELElBR0YzZixJQVFYbWQsS0FBS3ZJLGNBQ0ssU0FBUzVVLE9BQ1hzZ0IsS0FDQVosY0FHQ3ZQLGlCQUFTc04sS0FDSmlDLEVBQU1hLE9BQU85QyxFQUFLaUMsV0FNdkJ2UCxpQkFBU3NOLEtBQ0hGLE1BQU8rQyxFQUFRN0MsT0FNbkJpQyxNQUFRYyxRQUFTZCxFQUFPLFVBQVcsUUFFbkNZLElBUVhuRCxLQUFLRSxjQUNHLFlBQ0ksZ0JBQ0osZUFDQyxZQUNHLGNBQ0UsWUFDRixpQkFDSyxLQUFNLHNCQUNKLCtCQUNGLDBCQUNJLHFCQUNELGdCQUNMLG1DQUNFLDZCQUVQLGdCQUNDLFdBQ0YseUJBRVEsa0NBRUosVUFDRCxPQUNILFlBQ0ssU0FDSCxRQUNELGFBQ0ssV0FDRixjQUNHLE9BQ1AsUUFDQyxzQkFHRUYsS0FBS21DLFVBQVVtQixPQUFPQyxPQUFPbkIsS0FBSyxXQUNsQ3BDLEtBQUttQyxVQUFVbUIsT0FBT0UsT0FBT3BCLEtBQUssVUFDbkNwQyxLQUFLbUMsVUFBVW1CLE9BQU9HLE1BQU1yQixLQUFLLFdBQ2hDcEMsS0FBS21DLFVBQVVtQixPQUFPSSxPQUFPdEIsS0FBSyxVQUV2QyxVQUNHLEdDaFRWLElBQU11QixPQU1KLFdBQVkxaEIsY0FDSmtCLEVBQU9KLFNBQVNtZSxjQUFjLGlCQUU5QmpmLFdBRURrZSxvQkFDUWxlLEVBQUVrZixTQUFZbGYsRUFBRWtmLFNBQVd3QyxFQUFPeEMsbUJBQ2pDbGYsRUFBRTJoQixVQUFhM2hCLEVBQUUyaEIsVUFBWUQsRUFBT0Msd0JBQ2hDM2hCLEVBQUU0aEIsY0FBaUI1aEIsRUFBRTRoQixjQUFnQkYsRUFBT0UsMEJBQzlDNWhCLEVBQUU2aEIsWUFBZTdoQixFQUFFNmhCLFlBQWNILEVBQU9HLGVBR25EQyxpQkFBaUIsaUJBQVV2QyxHQUN6QkEsRUFBTUUsT0FBT3NDLFFBQVF0akIsRUFBS3lmLFVBQVVnQixjQUduQzhDLG1CQUVEQyxRQUFRMUMsTUFHUjlnQixNQVFYaWpCLGlCQUFFTyxpQkFBUTFDLGNBQ0ZQLEVBQUtPLEVBQU1FLE9BQ1hBLEdBQVMsT0FHSFQsRUFBR2tELGFBQWEsUUFDMUJwaEIsU0FBV21lLGNBQWNELEVBQUdrRCxhQUFhLFNBQVd6QyxNQUkxQ1QsRUFBR2tELGFBQWEsaUJBQzFCcGhCLFNBQVdtZSxrQkFBa0JELEVBQUdrRCxhQUFhLGtCQUFzQnpDLFVBRy9DaGhCLGFBQ2YwakIsY0FBY25ELEVBQUlTLEdBR25CVCxFQUFHb0QsUUFBVzNqQixLQUFLeWYsVUFBVXlELGtCQUFrQixLQUMzQ1UsRUFBT3ZoQixTQUFTbWUsY0FDdEJELEVBQUtvRCxRQUFXM2pCLEtBQUt5ZixVQUFVeUQscUJBRzFCRyxpQkFBaUIsaUJBQVV2QyxLQUN4QnlDLG1CQUNERyxjQUFjbkQsRUFBSVMsS0FDbEI2QyxvQkFBb0Isa0JBSXRCN2pCLE1BU1hpakIsaUJBQUVTLHVCQUFjbkQsRUFBSVMsR0FDbUIsS0FBL0JoaEIsS0FBS3lmLFVBQVUyRCxnQkFDZFUsVUFBVUMsT0FBTy9qQixLQUFLeWYsVUFBVTJELGVBQzVCVSxVQUFVQyxPQUFPL2pCLEtBQUt5ZixVQUFVMkQsY0FHSixLQUFqQ3BqQixLQUFLeWYsVUFBVTBELGlCQUNWVyxVQUFVQyxPQUFPL2pCLEtBQUt5ZixVQUFVMEQsbUJBSXBDYSxJQUFJQyxFQUFJLEVBQUdBLEVBQUloQixPQUFPaUIsWUFBWXRkLE9BQVFxZCxJQUN6QzFELEVBQUdrRCxhQUFhUixPQUFPaUIsWUFBWUQsT0FDbEN6aEIsYUFBYXlnQixPQUFPaUIsWUFBWUQsS0FDWSxTQUEzQzFELEVBQUdrRCxhQUFhUixPQUFPaUIsWUFBWUQsVUFJdENELElBQUlDLEVBQUksRUFBR0EsRUFBSWhCLE9BQU9rQixnQkFBZ0J2ZCxPQUFRcWQsSUFDN0NqRCxFQUFPeUMsYUFBYVIsT0FBT2tCLGdCQUFnQkYsT0FDdEN6aEIsYUFBYXlnQixPQUFPa0IsZ0JBQWdCRixLQUNZLFNBQW5EakQsRUFBT3lDLGFBQWFSLE9BQU9rQixnQkFBZ0JGLGFBSW5EMUQsRUFBS2tELGFBQWEsU0FDbEJ6QyxFQUFTOEMsVUFBVU0sU0FBU3BrQixLQUFLeWYsVUFBVTJELHNCQUVsQzNpQixTQUFTNGpCLEtBQU8sVUFDaEI1akIsU0FBUzRqQixLQUFPOUQsRUFBR2tELGFBQWEsU0FHbEN6akIsTUFLWGlqQixPQUFPeEMsU0FBVyxzQkFHbEJ3QyxPQUFPQyxVQUFZLFNBR25CRCxPQUFPRSxjQUFnQixTQUd2QkYsT0FBT0csWUFBYyxTQUdyQkgsT0FBT2lCLGFBQWUsZUFBZ0IsaUJBR3RDakIsT0FBT2tCLGlCQUFtQixlQzFKMUIsSUFBTUcsTUFDSixXQUFZL2lCLGNBQ0prQixFQUFPSixTQUFTbWUsY0FBYyxpQkFFOUJqZixXQUVEa2Usb0JBQ1FsZSxFQUFFa2YsU0FBWWxmLEVBQUVrZixTQUFXNkQsRUFBTTdELFlBR3pDNEMsaUJBQWlCLGlCQUFVdkMsTUFDekJBLEVBQU1FLE9BQU9zQyxRQUFRdGpCLEVBQUt5ZixVQUFVZ0IsZUFHckMzYSxFQUFNZ2IsRUFBTUUsT0FBTzJDLFFBQVFZLFNBQzNCcGlCLEVBQU8rZCxLQUFLQyxNQUFNVyxFQUFNRSxPQUFPMkMsUUFBUWEsYUFFdENDLE1BQU0zZSxFQUFLM0QsTUFHWG5DLE1BU1hza0IsZ0JBQUVHLGVBQU0zZSxFQUFLM0QsT0FFSHVpQixFQUFJdmlCLEVBQUtzUyxhQUFJOEwsVUFDWEEsRUFBRy9lLGVBQWU4aUIsTUFBTXhlLFNBQ3ZCd2UsTUFBTXhlLEtBQVV0RixPQUFPQyxTQUFTa2tCLGFBQVlwRSxFQUFHK0QsTUFBTXhlLE1BQ25EeWEsSUFHUHFFLEVBQUs1a0IsS0FBSzZrQixVQUFVL2UsRUFBSzRlLEdBQ3pCSSxFQUFLOWtCLEtBQUsra0IsS0FBS2pmLEVBQUs0ZSxVQUdwQjNrQixRQUFRRSxpQkFDRitCLEtBQUtzaUIsT0FBVU0sRUFBSUUsS0FHdEJKLEdBU1hKLGdCQUFFVSxjQUFLQyxFQUFLbmYsRUFBSzNELE9BQ1R5aUIsRUFBSzVrQixLQUFLNmtCLFVBQVUvZSxFQUFLM0QsR0FDekIyaUIsRUFBSzlrQixLQUFLa2xCLFNBQVNELEVBQUtuZixHQUd4Qi9GLFFBQVFFLGlCQUNGK0IsS0FBS3NpQixPQUFVTSxFQUFJRSxNQVNqQ1IsZ0JBQUVPLG1CQUFVL2UsRUFBSzNELE9BQ1QyZSxZQUNPaGIsSUFHUDNELEVBQUssSUFBTUEsRUFBSyxHQUFHWCxlQUFlOGlCLE1BQU14ZSxPQUNwQ21ILG1CQUNVOUssRUFBSyxHQUFHbWlCLE1BQU14ZSxjQUd2QnFmLE9BQU9yRSxFQUFPM2UsT0FJbkJpakIsR0FBT0MsTUFBT3ZFLEVBQU13RSxpQkFBUXRoQixVQUN2QmxCLE9BQU9rQyxLQUFLaEIsR0FBR3NoQixpQkFBUUMsVUFBTUEsRUFBR3ZoQixFQUFFdWhCLGVBSWxCLG9CQUFkQyxxQkFDQ0MsV0FBV0wsSUFHZixZQUFhQSxJQVF6QmQsZ0JBQUVTLGNBQUtqZixFQUFLM0QsT0FDSnVqQixFQUFNdmpCLEVBQUt3akIsY0FBTUMsVUFBWUEsRUFBUXBrQixlQUFlOGlCLE1BQU14ZSxPQUUxRGdiLGtCQUNnQmhiLFNBSUEsb0JBQVRpZixXQUNKVCxNQUFNeGUsSUFBSzRmLEVBQUlwQixNQUFNeGUsS0FBTWdiLElBRzFCLE9BQVF3RCxNQUFNeGUsSUFBSzRmLEVBQUlwQixNQUFNeGUsS0FBTWdiLElBUS9Dd0QsZ0JBQUVZLGtCQUFTRCxFQUFLbmYsT0FDUmtmLFlBQ1FDLGNBQ0duZixTQUlLLG9CQUFUaWYsV0FDSixRQUFTLGNBQWVDLElBR3ZCLE9BQVFWLE1BQU14ZSxJQUFLLGNBQWVrZixJQUs5Q1YsTUFBTTdELFNBQVcscUJBR2pCNkQsTUFBTXhlLElBQU0sUUMzSVorZixJQUFNQyxZQUFjaGpCLE9BQU9pakIsV0FJM0IsU0FBU0MsUUFBU0MsZUFDSHhpQixJQUFOd2lCLEdBQXlCLE9BQU5BLEVBRzVCLFNBQVNDLE1BQU9ELGVBQ0R4aUIsSUFBTndpQixHQUF5QixPQUFOQSxFQUc1QixTQUFTRSxPQUFRRixVQUNGLElBQU5BLEVBR1QsU0FBU0csUUFBU0gsVUFDSCxJQUFOQSxFQU1ULFNBQVNJLFlBQWExaUIsU0FFRCxpQkFBVkEsR0FDVSxpQkFBVkEsR0FFVSxxQkFBVkEsc0JBQUFBLEtBQ1Usa0JBQVZBLEVBU1gsU0FBU1csV0FBVWdpQixVQUNGLE9BQVJBLEdBQStCLHFCQUFSQSxzQkFBQUEsSUFNaENULElBQU1VLFVBQVl6akIsT0FBT00sVUFBVUUsU0FFbkMsU0FBU2tqQixVQUFXN2lCLFVBQ1g0aUIsVUFBVTFpQixLQUFLRixHQUFPNk4sTUFBTSxHQUFJLEdBT3pDLFNBQVN4RCxnQkFBZXNZLFNBQ1Msb0JBQXhCQyxVQUFVMWlCLEtBQUt5aUIsR0FHeEIsU0FBU0csU0FBVVIsU0FDWSxvQkFBdEJNLFVBQVUxaUIsS0FBS29pQixHQU14QixTQUFTUyxrQkFBbUJDLE9BQ3BCcmQsRUFBSXNkLFdBQVc1WixPQUFPMlosV0FDckJyZCxHQUFLLEdBQUtuQyxLQUFLMGYsTUFBTXZkLEtBQU9BLEdBQUt3ZCxTQUFTSCxHQUduRCxTQUFTSSxVQUFXSixVQUVoQlQsTUFBTVMsSUFDYyxtQkFBYkEsRUFBSTlrQixNQUNVLG1CQUFkOGtCLEVBQUkxa0IsTUFPZixTQUFTcUIsV0FBVXFqQixVQUNILE1BQVBBLEVBQ0gsR0FDQWpmLE1BQU1tQyxRQUFROGMsSUFBUzNZLGdCQUFjMlksSUFBUUEsRUFBSXJqQixXQUFhaWpCLFVBQzVEckcsS0FBSzhHLFVBQVVMLEVBQUssS0FBTSxHQUMxQjNaLE9BQU8yWixHQU9mLFNBQVNNLFNBQVVOLE9BQ1hyZCxFQUFJc2QsV0FBV0QsVUFDZE8sTUFBTTVkLEdBQUtxZCxFQUFNcmQsRUFPMUIsU0FBUzZkLFFBQ1BDLEVBQ0FDLFdBRU01UyxFQUFNM1IsT0FBT29ULE9BQU8sTUFDcEJvUixFQUFPRixFQUFJRyxNQUFNLEtBQ2R0RCxFQUFJLEVBQUdBLEVBQUlxRCxFQUFLMWdCLE9BQVFxZCxNQUMzQnFELEVBQUtyRCxLQUFNLFNBRVZvRCxXQUNIVixVQUFPbFMsRUFBSWtTLEVBQUlhLHlCQUNmYixVQUFPbFMsRUFBSWtTLElBTWpCZCxJQUFNNEIsYUFBZU4sUUFBUSxrQkFBa0IsR0FLekNPLG9CQUFzQlAsUUFBUSw4QkFLcEMsU0FBU1EsT0FBUUMsRUFBS0MsTUFDaEJELEVBQUloaEIsT0FBUSxLQUNSRCxFQUFRaWhCLEVBQUlFLFFBQVFELE1BQ3RCbGhCLEdBQVMsU0FDSmloQixFQUFJaFYsT0FBT2pNLEVBQU8sSUFRL0JrZixJQUFNcmtCLGtCQUFpQnNCLE9BQU9NLFVBQVU1QixlQUN4QyxTQUFTdW1CLE9BQVF6QixFQUFLeGdCLFVBQ2J0RSxrQkFBZXFDLEtBQUt5aUIsRUFBS3hnQixHQU1sQyxTQUFTa2lCLE9BQVFDLE9BQ1R6USxFQUFRMVUsT0FBT29ULE9BQU8sYUFDcEIsU0FBbUJrUixVQUNiNVAsRUFBTTRQLEtBQ0g1UCxFQUFNNFAsR0FBT2EsRUFBR2IsS0FPbkN2QixJQUFNcUMsV0FBYSxTQUNiQyxTQUFXSCxnQkFBUVosVUFDaEJBLEVBQUl4bUIsUUFBUXNuQixvQkFBYXhYLEVBQUcwWCxVQUFNQSxFQUFJQSxFQUFFQyxjQUFnQixPQU0zREMsV0FBYU4sZ0JBQVFaLFVBQ2xCQSxFQUFJbUIsT0FBTyxHQUFHRixjQUFnQmpCLEVBQUk1VixNQUFNLEtBTTNDZ1gsWUFBYyxhQUNkQyxVQUFZVCxnQkFBUVosVUFDakJBLEVBQUl4bUIsUUFBUTRuQixZQUFhLE9BQU9oQixnQkFZekMsU0FBU2tCLGFBQWNULEVBQUlVLFlBQ2hCQyxFQUFTQyxPQUNWQyxFQUFJdGhCLFVBQVVaLGNBQ2JraUIsRUFDSEEsRUFBSSxFQUNGYixFQUFHbGhCLE1BQU00aEIsRUFBS25oQixXQUNkeWdCLEVBQUdwa0IsS0FBSzhrQixFQUFLRSxHQUNmWixFQUFHcGtCLEtBQUs4a0IsWUFHTkksUUFBVWQsRUFBR3JoQixPQUNkZ2lCLEVBR1QsU0FBU0ksV0FBWWYsRUFBSVUsVUFDaEJWLEVBQUdnQixLQUFLTixHQUdqQjlDLElBQU1vRCxLQUFPaG1CLFNBQVNHLFVBQVU2bEIsS0FDNUJELFdBQ0FOLGFBS0osU0FBU1EsVUFBUzVCLEVBQU1oZ0IsS0FDZEEsR0FBUyxVQUNiMmMsRUFBSXFELEVBQUsxZ0IsT0FBU1UsRUFDaEI2aEIsRUFBTSxJQUFJemhCLE1BQU11YyxHQUNmQSxPQUNEQSxHQUFLcUQsRUFBS3JELEVBQUkzYyxVQUViNmhCLEVBTVQsU0FBU0MsT0FBUUMsRUFBSUMsT0FDZHpELElBQU0vZixLQUFPd2pCLElBQ2J4akIsR0FBT3dqQixFQUFNeGpCLFVBRVh1akIsRUFNVCxTQUFTRSxTQUFVM0IsV0FDWDRCLEtBQ0d2RixFQUFJLEVBQUdBLEVBQUkyRCxFQUFJaGhCLE9BQVFxZCxJQUMxQjJELEVBQUkzRCxXQUNDdUYsRUFBSzVCLEVBQUkzRCxXQUdidUYsRUFVVCxTQUFTcEssT0FBTXlKLEVBQUdZLEVBQUdyQixJQUtyQnZDLElBQU02RCxZQUFNYixFQUFHWSxFQUFHckIsVUFBTSxHQU9sQnRoQixvQkFBWTRKLFVBQU1BLEdBS3hCLFNBQVNpWixjQUFlQyxVQUNmQSxFQUFRQyxnQkFBUTdrQixFQUFNOGtCLFVBQ3BCOWtCLEVBQUswZCxPQUFPb0gsRUFBRUMscUJBQ2hCckksS0FBSyxLQU9kLFNBQVNzSSxXQUFZbkIsRUFBR1ksTUFDbEJaLElBQU1ZLFNBQVUsTUFDZFEsRUFBWTNsQixXQUFTdWtCLEdBQ3JCcUIsRUFBWTVsQixXQUFTbWxCLE9BQ3ZCUSxJQUFhQyxFQXdCVixPQUFLRCxJQUFjQyxHQUNqQmxkLE9BQU82YixLQUFPN2IsT0FBT3ljLFdBdkJwQlUsRUFBV3ppQixNQUFNbUMsUUFBUWdmLEdBQ3pCdUIsRUFBVzFpQixNQUFNbUMsUUFBUTRmLE1BQzNCVSxHQUFZQyxTQUNQdkIsRUFBRWppQixTQUFXNmlCLEVBQUU3aUIsUUFBVWlpQixFQUFFd0IsZUFBT3JtQixFQUFHaWdCLFVBQ25DK0YsV0FBV2htQixFQUFHeWxCLEVBQUV4RixNQUVwQixHQUFJNEUsYUFBYTNnQixNQUFRdWhCLGFBQWF2aEIsWUFDcEMyZ0IsRUFBRXlCLFlBQWNiLEVBQUVhLFVBQ3BCLEdBQUtILEdBQWFDLFNBUWhCLE1BUERHLEVBQVF6bkIsT0FBT2tDLEtBQUs2akIsR0FDcEIyQixFQUFRMW5CLE9BQU9rQyxLQUFLeWtCLFVBQ25CYyxFQUFNM2pCLFNBQVc0akIsRUFBTTVqQixRQUFVMmpCLEVBQU1GLGVBQU12a0IsVUFDM0Nra0IsV0FBV25CLEVBQUUvaUIsR0FBTTJqQixFQUFFM2pCLE1BTWhDLE1BQU85QixVQUVBLEdBY2IsU0FBU3ltQixhQUFjN0MsRUFBS2pCLE9BQ3JCM0MsSUFBSUMsRUFBSSxFQUFHQSxFQUFJMkQsRUFBSWhoQixPQUFRcWQsT0FDMUIrRixXQUFXcEMsRUFBSTNELEdBQUkwQyxVQUFhMUMsU0FFOUIsRUFNVixTQUFTeUcsS0FBTXpDLE9BQ1QwQyxHQUFTLFNBQ04sV0FDQUEsT0FDTSxJQUNONWpCLE1BQU0vRyxLQUFNd0gsYUFLckJxZSxJQUFNK0UsU0FBVyx1QkFFWEMsYUFDSixZQUNBLFlBQ0EsVUFHSUMsaUJBQ0osZUFDQSxVQUNBLGNBQ0EsVUFDQSxlQUNBLFVBQ0EsZ0JBQ0EsWUFDQSxZQUNBLGNBQ0EsZ0JBQ0Esa0JBT0V2TCw4QkFLcUJ6YyxPQUFPb1QsT0FBTyxjQUs3QixpQkFLTyxZQUtMLGVBS0csZUFLQyxpQkFLRCxpQ0FXSHBULE9BQU9vVCxPQUFPLG9CQU1Ud1Qsa0JBTUNBLG9CQU1FQSxtQkFLRHRLLDRCQUtLdFksdUJBTVQ0aUIsVUFNTixrQkFLVW9CLGlCQVViQyxlQUFpQiwyQ0FLdkIsU0FBU0MsV0FBWTVELE9BQ2JnQixHQUFLaEIsRUFBTSxJQUFJdkssV0FBVyxVQUNuQixLQUFOdUwsR0FBb0IsS0FBTkEsRUFNdkIsU0FBUzZDLElBQUszRSxFQUFLeGdCLEVBQUs2Z0IsRUFBS3VFLFVBQ3BCbGxCLGVBQWVzZ0IsRUFBS3hnQixTQUNsQjZnQixlQUNPdUUsWUFDSixnQkFDSSxJQU9sQnJGLElBQU1zRixPQUFTLElBQUlycUIsWUFBWWlxQiwwQkFDL0IsU0FBU0ssVUFBV3hwQixPQUNkdXBCLE9BQU94bEIsS0FBSy9ELFFBR1Z5cEIsRUFBV3pwQixFQUFLMmxCLE1BQU0sWUFDckIsU0FBVWpCLE9BQ1Z0QyxJQUFJQyxFQUFJLEVBQUdBLEVBQUlvSCxFQUFTemtCLE9BQVFxZCxJQUFLLEtBQ25DcUMsV0FDQ0EsRUFBSStFLEVBQVNwSCxXQUVkcUMsSUFPWFQsSUFtQ0l5RixVQW5DRUMsU0FBVyxnQkFHWEMsVUFBOEIsb0JBQVhockIsT0FDbkJpckIsT0FBa0Msb0JBQWxCQyxpQkFBbUNBLGNBQWNDLFNBQ2pFQyxhQUFlSCxRQUFVQyxjQUFjQyxTQUFTbkUsY0FDaERxRSxHQUFLTCxXQUFhaHJCLE9BQU9zckIsVUFBVUMsVUFBVXZFLGNBQzdDd0UsS0FBT0gsSUFBTSxlQUFlbG1CLEtBQUtrbUIsSUFDakNJLE1BQVFKLElBQU1BLEdBQUcvRCxRQUFRLFlBQWMsRUFDdkNvRSxPQUFTTCxJQUFNQSxHQUFHL0QsUUFBUSxTQUFXLEVBQ3JDcUUsVUFBYU4sSUFBTUEsR0FBRy9ELFFBQVEsV0FBYSxHQUF3QixZQUFqQjhELGFBQ2xEUSxNQUFTUCxJQUFNLHVCQUF1QmxtQixLQUFLa21CLEtBQTBCLFFBQWpCRCxhQUNwRFMsU0FBV1IsSUFBTSxjQUFjbG1CLEtBQUtrbUIsTUFBUUssT0FDNUNJLFlBQWNULElBQU0sWUFBWWxtQixLQUFLa21CLElBQ3JDVSxLQUFPVixJQUFNQSxHQUFHenFCLE1BQU0sa0JBR3RCb3JCLGVBQW1CQyxNQUVyQkMsaUJBQWtCLEVBQ3RCLEdBQUlsQixrQkFFTW1CLGVBQ0MzbUIsZUFBZTJtQixLQUFNLDJDQUdOLFlBR2Z0SixpQkFBaUIsZUFBZ0IsS0FBTXNKLE1BQzlDLE1BQU8zb0IsSUFNWDZoQixJQUFNK0cseUNBQ2NucEIsSUFBZDZuQix1QkFFR0UsWUFBY0MsYUFBNEIsSUFBWDlvQixXQUd0QkEsU0FBQSxTQUF1RCxXQUFsQ0EsU0FBQSxRQUFrQmtxQixJQUFJQyxVQUtwRHhCLFdBSUh5QixTQUFXdkIsV0FBYWhyQixPQUFPd3NCLDZCQUdyQyxTQUFTQyxTQUFVOWYsU0FDTSxtQkFBVEEsR0FBdUIsY0FBY3hILEtBQUt3SCxFQUFLN0osWUFHL0R1aUIsSUFJSXFILEtBSkVDLFVBQ2Msb0JBQVhqcUIsUUFBMEIrcEIsU0FBUy9wQixTQUN2QixvQkFBWmtxQixTQUEyQkgsU0FBU0csUUFBUUMsY0FJbEMsb0JBQVJ0VCxLQUF1QmtULFNBQVNsVCxLQUVsQ0EsaUNBTUV6RyxJQUFNeFEsT0FBT29ULE9BQU8seUJBRTNCdEMsYUFBSzlOLFVBQ3NCLElBQWxCOUYsS0FBS3NULElBQUl4TixnQkFFbEJzUixhQUFLdFIsUUFDRXdOLElBQUl4TixJQUFPLGVBRWxCc04sc0JBQ09FLElBQU14USxPQUFPb1QsT0FBTyxZQU8vQjhOLElBQUlzSixLQUFPbE8sT0FDUG1PLElBQU1uTyxPQUNOb08sdUJBQTBCcE8sT0FDMUJxTyxvQkFBdUJyTyxPQUduQnNPLFdBQWdDLG9CQUFaQyxRQUNwQkMsV0FBYSxrQkFDYkMsa0JBQVd6RyxVQUFPQSxFQUNyQnhtQixRQUFRZ3RCLG9CQUFZeEYsVUFBS0EsRUFBRUMsZ0JBQzNCem5CLFFBQVEsUUFBUyxtQkFFWmt0QixFQUFLQyxPQUNMQyxFQUFRRCxFQUFLUCx1QkFBdUJPLEdBQU0sR0FFNUN4TyxPQUFPME8sbUJBQ0ZBLFlBQVlwcUIsS0FBSyxLQUFNaXFCLEVBQUtDLEVBQUlDLEdBQzlCTixhQUFnQm5PLE9BQU8yTyxnQkFDeEJoc0IscUJBQXFCNHJCLEVBQU1FLGlCQUloQ0YsRUFBS0MsR0FDTkwsYUFBZ0JuTyxPQUFPMk8sZ0JBQ2pCWixLQUFLLGNBQWNRLEdBQ3pCQyxFQUFLUCx1QkFBdUJPLEdBQU0sbUNBS2pCQSxFQUFJSSxNQUNyQkosRUFBR0ssUUFBVUwsUUFDUixhQUVIeGQsRUFBd0IsbUJBQVB3ZCxHQUErQixNQUFWQSxFQUFHTSxJQUMzQ04sRUFBR3hkLFFBQ0h3ZCxFQUFHTyxPQUNEUCxFQUFHUSxVQUFZUixFQUFHM2dCLFlBQVltRCxRQUM5QndkLEVBQ0YxdEIsRUFBT2tRLEVBQVFsUSxNQUFRa1EsRUFBUWllLGNBQzdCQyxFQUFPbGUsRUFBUW1lLFdBQ2hCcnVCLEdBQVFvdUIsRUFBTSxLQUNYcnRCLEVBQVFxdEIsRUFBS3J0QixNQUFNLHFCQUNsQkEsR0FBU0EsRUFBTSxVQUlyQmYsTUFBV3d0QixTQUFTeHRCLE9BQVcsZ0JBQy9Cb3VCLElBQXdCLElBQWhCTixTQUErQk0sRUFBUyxTQUkvQ0Usa0JBQVV2SCxFQUFLOWQsV0FDZmtnQixFQUFNLEdBQ0hsZ0IsR0FDREEsRUFBSSxHQUFNLE9BQVU4ZCxHQUNwQjlkLEVBQUksT0FBVThkLE9BQ1osU0FFRG9DLG1DQUdnQnVFLE1BQ25CQSxFQUFHTyxRQUFVUCxFQUFHYSxRQUFTLFNBQ3JCQyxLQUNGQyxFQUEyQixFQUN4QmYsR0FBSSxJQUNMYyxFQUFLam9CLE9BQVMsRUFBRyxLQUNibW9CLEVBQU9GLEVBQUtBLEVBQUtqb0IsT0FBUyxNQUM1Qm1vQixFQUFLM2hCLGNBQWdCMmdCLEVBQUczZ0IsWUFBYSxPQUVsQzJnQixFQUFHYSxpQkFFQ0UsRUFBMkIsTUFDL0JELEVBQUtqb0IsT0FBUyxJQUFNbW9CLEVBQU1ELEtBQ0osS0FHMUI3aEIsS0FBSzhnQixLQUNMQSxFQUFHYSxjQUVILG1CQUFxQkMsRUFDekJwYSxhQUFLc1osRUFBSTlKLGFBQ0YsSUFBTkEsRUFBVSxXQUFVMEssU0FBTyxJQUFLLEVBQVEsRUFBSjFLLEtBRXBDdmMsTUFBTW1DLFFBQVFra0IsR0FDUE4sb0JBQW9CTSxFQUFHLFlBQVdBLEVBQUcsdUJBQ3hDTixvQkFBb0JNLE1BRXpCck0sS0FBSyw2QkFFZ0IrTCxvQkFBb0JNLFFBT2xEL0osSUFBSWpmLElBQU0sRUFNSmlxQixJQUtKLGdCQUNPQyxHQUFLbHFCLFdBQ0xtcUIsdUJBR1BDLGdCQUFRQyxRQUNERixLQUFLamlCLEtBQUttaUIsa0JBR2pCQyxtQkFBV0QsVUFDRnB2QixLQUFLa3ZCLEtBQU1FLGtCQUdwQkUsa0JBQ01OLElBQUloTyxZQUNGQSxPQUFPdU8sT0FBT3Z2QixxQkFJdEJ3dkIsc0JBRVFOLEVBQU9sdkIsS0FBS2t2QixLQUFLMWQsUUFDbEIrTixPQUFPa1EsU0FJTHhSLGNBQU00SyxFQUFHWSxVQUFNWixFQUFFb0csR0FBS3hGLEVBQUV3RixTQUUxQmpMLElBQUlDLEVBQUksRUFBRzZFLEVBQUlvRyxFQUFLdG9CLE9BQVFxZCxFQUFJNkUsRUFBRzdFLE1BQ2pDQSxHQUFHeUwsVUFRZFYsSUFBSWhPLE9BQVMsS0FDYjZFLElBQU04SixlQUVOLFNBQVNDLFdBQVk1TyxlQUNQL1QsS0FBSytULE9BQ2JBLE9BQVNBLEVBR2YsU0FBUzZPLHdCQUNLL2MsVUFDUmtPLE9BQVMyTyxZQUFZQSxZQUFZL29CLE9BQVMsR0FLaEQsSUFBTWtwQixNQTZCSiwrQkFVT2hzQixJQUFNQSxPQUNOM0IsS0FBT0EsT0FDUDR0QixTQUFXQSxPQUNYNXVCLEtBQU9BLE9BQ1A2dUIsSUFBTUEsT0FDTkMsUUFBS3hzQixPQUNMeXNCLFFBQVVBLE9BQ1ZDLGVBQVkxc0IsT0FDWjJzQixlQUFZM3NCLE9BQ1o0c0IsZUFBWTVzQixPQUNacUMsSUFBTTNELEdBQVFBLEVBQUsyRCxTQUNuQndxQixpQkFBbUJBLE9BQ25CQyx1QkFBb0I5c0IsT0FDcEIrc0IsWUFBUy9zQixPQUNUZ3RCLEtBQU0sT0FDTkMsVUFBVyxPQUNYQyxjQUFlLE9BQ2ZDLFdBQVksT0FDWkMsVUFBVyxPQUNYQyxRQUFTLE9BQ1RDLGFBQWVBLE9BQ2ZDLGVBQVl2dEIsT0FDWnd0QixvQkFBcUIsbUVBS3hCQyw0QkFDS2x4QixLQUFLdXdCLCtFQUloQjFLLElBQU1zTCwwQkFBb0Jod0Isa0JBQU8sUUFDekJpd0IsRUFBTyxJQUFJdEIsZUFDWjN1QixLQUFPQSxJQUNQeXZCLFdBQVksRUFDVlEsR0FHVCxTQUFTQyxnQkFBaUIxSyxVQUNqQixJQUFJbUosV0FBTXJzQixPQUFXQSxPQUFXQSxFQUFXdUosT0FBTzJaLElBTzNELFNBQVMySyxXQUFZQyxPQUNiQyxFQUFTLElBQUkxQixNQUNqQnlCLEVBQU16dEIsSUFDTnl0QixFQUFNcHZCLE9BSUE0dEIsVUFBWXdCLEVBQU14QixTQUFTdmUsUUFDakMrZixFQUFNcHdCLEtBQ05vd0IsRUFBTXZCLElBQ051QixFQUFNckIsUUFDTnFCLEVBQU1qQixpQkFDTmlCLEVBQU1SLHVCQUVEZCxHQUFLc0IsRUFBTXRCLEtBQ1hTLFNBQVdhLEVBQU1iLFdBQ2pCNXFCLElBQU15ckIsRUFBTXpyQixNQUNaOHFCLFVBQVlXLEVBQU1YLFlBQ2xCVCxVQUFZb0IsRUFBTXBCLFlBQ2xCQyxVQUFZbUIsRUFBTW5CLFlBQ2xCQyxVQUFZa0IsRUFBTWxCLFlBQ2xCVyxVQUFZTyxFQUFNUCxZQUNsQkgsVUFBVyxFQUNYVyxFQVFUM0wsSUFBTWxULGFBQWFqTCxNQUFNdEUsVUFDbkJxdUIsYUFBZTN1QixPQUFPb1QsT0FBT3ZELGNBRTdCK2UsZ0JBQ0osT0FDQSxNQUNBLFFBQ0EsVUFDQSxTQUNBLE9BQ0EsV0FNRkEsZUFBZXBmLFFBQVEsU0FBVXFmLE9BRXpCQyxFQUFXamYsYUFBV2dmLE9BQ3hCRixhQUFjRSxFQUFRLGtFQUN4QjlMLElBRUlnTSxFQUZFNXRCLEVBQVMydEIsRUFBUzdxQixNQUFNL0csS0FBTWlILEdBQzlCNnFCLEVBQUs5eEIsS0FBSyt4QixjQUVSSixPQUNELFdBQ0EsWUFDUTFxQixZQUVSLFdBQ1FBLEVBQUt1SyxNQUFNLFVBR3RCcWdCLEtBQWFHLGFBQWFILEtBRTNCSSxJQUFJekMsU0FDQXZyQixNQU1YNGhCLElBQU1xTSxVQUFZcHZCLE9BQU9xdkIsb0JBQW9CVixjQU16Q1csZUFBZ0IsRUFFcEIsU0FBU0MsZ0JBQWlCMXVCLGlCQUNSQSxFQVNsQixJQUFNMnVCLFNBS0osU0FBYTN1QixRQUNOQSxNQUFRQSxPQUNSc3VCLElBQU0sSUFBSWpELFNBQ1Z1RCxRQUFVLE1BQ1g1dUIsRUFBTyxTQUFVM0QsTUFDakIwSCxNQUFNbUMsUUFBUWxHLElBQ1o0bkIsc0JBQ1c1bkIsRUFBTzh0QiwwQkFFUjl0QixFQUFPOHRCLGFBQWNTLGdCQUU5QkYsYUFBYXJ1QixTQUViNnVCLEtBQUs3dUIsSUFnQ2hCLFNBQVM4dUIsYUFBY3pSLEVBQVEwUixLQUV0QkMsVUFBWUQsRUFTckIsU0FBU0UsWUFBYTVSLEVBQVEwUixFQUFLMXRCLE9BQzVCZ2YsSUFBSUMsRUFBSSxFQUFHNkUsRUFBSTlqQixFQUFLNEIsT0FBUXFkLEVBQUk2RSxFQUFHN0UsSUFBSyxLQUNyQ25lLEVBQU1kLEVBQUtpZixPQUNiakQsRUFBUWxiLEVBQUs0c0IsRUFBSTVzQixLQVN6QixTQUFTK3NCLFFBQVNsdkIsRUFBT212QixPQUluQmhCLEtBSEN4dEIsV0FBU1gsTUFBVUEsYUFBaUJtc0IsY0FJckMvSCxPQUFPcGtCLEVBQU8sV0FBYUEsRUFBTW91QixrQkFBa0JPLFdBQ2hEM3VCLEVBQU1vdUIsT0FFWEssZ0JBQ0N4RixzQkFDQWxsQixNQUFNbUMsUUFBUWxHLElBQVVxSyxnQkFBY3JLLEtBQ3ZDYixPQUFPaXdCLGFBQWFwdkIsS0FDbkJBLEVBQU0ycUIsV0FFRixJQUFJZ0UsU0FBUzN1QixJQUVoQm12QixHQUFjaEIsS0FDYlMsVUFFRVQsRUFNVCxTQUFTa0Isa0JBQ1AxTSxFQUNBeGdCLEVBQ0E2Z0IsRUFDQXNNLEVBQ0FDLE9BRU1qQixFQUFNLElBQUlqRCxJQUVWcFIsRUFBVzlhLE9BQU9xd0IseUJBQXlCN00sRUFBS3hnQixPQUNsRDhYLElBQXNDLElBQTFCQSxFQUFTd1Ysa0JBS25CQyxFQUFTelYsR0FBWUEsRUFBU2xLLElBQzlCNGYsRUFBUzFWLEdBQVlBLEVBQVN0SyxJQUM5QitmLElBQVVDLEdBQWdDLElBQXJCOXJCLFVBQVVaLFdBQzdCMGYsRUFBSXhnQixRQUdSeXRCLEdBQVdMLEdBQVdMLFFBQVFsTSxVQUMzQjNnQixlQUFlc2dCLEVBQUt4Z0IsZUFDYixnQkFDRSxNQUNULGVBQ0duQyxFQUFRMHZCLEVBQVNBLEVBQU94dkIsS0FBS3lpQixHQUFPSyxTQUN0Q3FJLElBQUloTyxXQUNGc08sU0FDQWlFLE1BQ010QixJQUFJM0MsU0FDUjVuQixNQUFNbUMsUUFBUWxHLGdCQUNKQSxLQUlYQSxPQUVKLFNBQXlCNnZCLE9BQ3RCN3ZCLEVBQVEwdkIsRUFBU0EsRUFBT3h2QixLQUFLeWlCLEdBQU9LLEVBRXRDNk0sSUFBVzd2QixHQUFVNnZCLEdBQVdBLEdBQVU3dkIsR0FBVUEsSUFJcERzdkIsT0FJQUksSUFBV0MsSUFDWEEsSUFDS3p2QixLQUFLeWlCLEVBQUtrTixLQUVYQSxLQUVHTixHQUFXTCxRQUFRVyxLQUMxQmhFLGVBVVYsU0FBU2xjLE1BQUswTixFQUFRbGIsRUFBSzZnQixPQUNyQlgsUUFBUWhGLElBQVdxRixZQUFZckYsa0ZBRTZDQSxHQUU1RXRaLE1BQU1tQyxRQUFRbVgsSUFBVzBGLGtCQUFrQjVnQixZQUN0Q2MsT0FBU08sS0FBS0MsSUFBSTRaLEVBQU9wYSxPQUFRZCxLQUNqQzhNLE9BQU85TSxFQUFLLEVBQUc2Z0IsR0FDZkEsS0FFTDdnQixLQUFPa2IsS0FBWWxiLEtBQU9oRCxPQUFPTSxvQkFDNUIwQyxHQUFPNmdCLEVBQ1BBLE1BRUhtTCxFQUFNOVEsRUFBUStRLGNBQ2hCL1EsRUFBT3NOLFFBQVd3RCxHQUFNQSxFQUFHUyxjQUUzQiw0SEFHSzVMLEdBRUptTCxxQkFJYUEsRUFBR251QixNQUFPbUMsRUFBSzZnQixLQUM5QnNMLElBQUl6QyxTQUNBN0ksTUFMRTdnQixHQUFPNmdCLEVBQ1BBLEdBVVgsU0FBUzhNLElBQUt6UyxFQUFRbGIsT0FDaEJrZ0IsUUFBUWhGLElBQVdxRixZQUFZckYscUZBRWdEQSxHQUUvRXRaLE1BQU1tQyxRQUFRbVgsSUFBVzBGLGtCQUFrQjVnQixLQUN0QzhNLE9BQU85TSxFQUFLLFlBR2Znc0IsRUFBTTlRLEVBQVErUSxPQUNoQi9RLEVBQU9zTixRQUFXd0QsR0FBTUEsRUFBR1MsYUFFM0Isd0ZBS0N4SyxPQUFPL0csRUFBUWxiLFlBR2JrYixFQUFPbGIsR0FDVGdzQixLQUdGRyxJQUFJekMsV0FPVCxTQUFTa0UsWUFBYS92QixPQUNmcWdCLElBQUloZ0IsU0FBR2lnQixFQUFJLEVBQUc2RSxFQUFJbmxCLEVBQU1pRCxPQUFRcWQsRUFBSTZFLEVBQUc3RSxPQUN0Q3RnQixFQUFNc2dCLEtBQ0xqZ0IsRUFBRSt0QixRQUFVL3RCLEVBQUUrdEIsT0FBT0UsSUFBSTNDLFNBQzFCNW5CLE1BQU1tQyxRQUFRN0YsZ0JBQ0pBLHNCQS9NaEJ3dUIsY0FBTWxNLFdBQ0V0aEIsRUFBT2xDLE9BQU9rQyxLQUFLc2hCLEdBQ2hCckMsRUFBSSxFQUFHQSxFQUFJamYsRUFBSzRCLE9BQVFxZCxzQkFDYnFDLEVBQUt0aEIsRUFBS2lmLHdCQU9oQytOLHNCQUFjblEsT0FDUG1DLElBQUlDLEVBQUksRUFBRzZFLEVBQUlqSCxFQUFNamIsT0FBUXFkLEVBQUk2RSxFQUFHN0UsWUFDL0JwQyxFQUFNb0MsS0ErTXBCNEIsSUFBTThOLE9BQVNwVSxPQUFPcVUsc0JBb0J0QixTQUFTQyxVQUFXeEssRUFBSXlLLE9BQ2pCQSxTQUFhekssVUFDZHZqQixFQUFLaXVCLEVBQU9DLEVBRVZodkIsRUFBT21vQixVQUNUQyxRQUFRQyxRQUFReUcsR0FDaEJoeEIsT0FBT2tDLEtBQUs4dUIsR0FFUDdQLEVBQUksRUFBR0EsRUFBSWpmLEVBQUs0QixPQUFRcWQsSUFHbkIsY0FGTmpmLEVBQUtpZixRQUdIb0YsRUFBR3ZqQixLQUNEZ3VCLEVBQUtodUIsR0FDVmlpQixPQUFPc0IsRUFBSXZqQixHQUdkaXVCLElBQVVDLEdBQ1ZobUIsZ0JBQWMrbEIsSUFDZC9sQixnQkFBY2dtQixjQUVKRCxFQUFPQyxTQU5iM0ssRUFBSXZqQixFQUFLa3VCLFdBU1YzSyxFQU1ULFNBQVM0SyxjQUNQQyxFQUNBQyxFQUNBcEcsVUFFS0EsRUFvQkksZUFFQ3FHLEVBQW1DLG1CQUFiRCxFQUN4QkEsRUFBU3R3QixLQUFLa3FCLEVBQUlBLEdBQ2xCb0csRUFDRUUsRUFBbUMsbUJBQWRILEVBQ3ZCQSxFQUFVcndCLEtBQUtrcUIsRUFBSUEsR0FDbkJtRyxTQUNBRSxFQUNLUCxVQUFVTyxFQUFjQyxHQUV4QkEsR0E3Qk5GLEVBR0FELEVBUUUsa0JBQ0VMLFVBQ2UsbUJBQWJNLEVBQTBCQSxFQUFTdHdCLEtBQUs3RCxLQUFNQSxNQUFRbTBCLEVBQ3hDLG1CQUFkRCxFQUEyQkEsRUFBVXJ3QixLQUFLN0QsS0FBTUEsTUFBUWswQixJQVYxREMsRUFIQUQsRUEyRGIsU0FBU0ksVUFDUEosRUFDQUMsT0FFTTNLLEVBQU0ySyxFQUNSRCxFQUNFQSxFQUFVeFIsT0FBT3lSLEdBQ2pCenNCLE1BQU1tQyxRQUFRc3FCLEdBQ1pBLEdBQ0NBLEdBQ0xELFNBQ0cxSyxFQUNIK0ssWUFBWS9LLEdBQ1pBLEVBR04sU0FBUytLLFlBQWFDLFdBQ2RoTCxLQUNHdkYsRUFBSSxFQUFHQSxFQUFJdVEsRUFBTTV0QixPQUFRcWQsS0FDRCxJQUEzQnVGLEVBQUkxQixRQUFRME0sRUFBTXZRLE9BQ2hCaFgsS0FBS3VuQixFQUFNdlEsV0FHWnVGLEVBY1QsU0FBU2lMLFlBQ1BQLEVBQ0FDLEVBQ0FwRyxFQUNBam9CLE9BRU0wakIsRUFBTTFtQixPQUFPb1QsT0FBT2dlLEdBQWEsYUFDbkNDLG9CQUNlcnVCLEVBQUtxdUIsRUFBVXBHLEdBQ3pCM0UsT0FBT0ksRUFBSzJLLElBRVozSyxTQS9KRmpKLEdBQUtvVCxPQUFPZSxVQUFZLFNBQVVsRSxFQUFRVSxFQUFPbkQsRUFBSWpvQixVQUNyRGlvQixRQUVELFdBQVdqb0IseUVBSVI2dUIsYUFBYW5FLEVBQVFVLElBK0VoQ3lDLE9BQU94eEIsS0FBTyxTQUNaK3hCLEVBQ0FDLEVBQ0FwRyxVQUVLQSxFQWNFa0csY0FBY0MsRUFBV0MsRUFBVXBHLEdBYnBDb0csR0FBZ0MsbUJBQWJBLFFBRW5CLHFHQUdBcEcsR0FHS21HLEdBRUZELGNBQWNDLEVBQVdDLElBbUNwQ3JKLGdCQUFnQnhZLGlCQUFRc2lCLFVBQ2ZBLEdBQVFOLFlBeUJqQnpKLFlBQVl2WSxRQUFRLFNBQVUvTixVQUNyQkEsRUFBTyxLQUFPa3dCLGNBU3ZCZCxPQUFPbEgsTUFBUSxTQUNieUgsRUFDQUMsRUFDQXBHLEVBQ0Fqb0IsTUFHSW91QixJQUFjMUgscUJBQXlCL29CLEdBQ3ZDMHdCLElBQWEzSCxxQkFBd0Ivb0IsSUFFcEMwd0IsU0FBaUJyeEIsT0FBT29ULE9BQU9nZSxHQUFhLDBCQUU5QnB1QixFQUFLcXVCLEVBQVVwRyxJQUU3Qm1HLFNBQWtCQyxNQUNqQmhMLFNBRUR0RCxJQUFNL2YsWUFESnFqQixFQUFLK0ssR0FDTUMsRUFBVSxLQUN0QjNELEVBQVNySCxFQUFJcmpCLEdBQ1hvckIsRUFBUWlELEVBQVNydUIsR0FDbkIwcUIsSUFBVzlvQixNQUFNbUMsUUFBUTJtQixRQUNqQkEsTUFFUjFxQixHQUFPMHFCLEVBQ1BBLEVBQU85TixPQUFPd08sR0FDZHhwQixNQUFNbUMsUUFBUXFuQixHQUFTQSxHQUFTQSxVQUUvQi9ILEdBTVR3SyxPQUFPbnRCLE1BQ1BtdEIsT0FBT2tCLFFBQ1BsQixPQUFPbUIsT0FDUG5CLE9BQU9vQixTQUFXLFNBQ2hCYixFQUNBQyxFQUNBcEcsRUFDQWpvQixNQUVJcXVCLG9CQUNlcnVCLEVBQUtxdUIsRUFBVXBHLElBRTdCbUcsU0FBa0JDLE1BQ2pCaEwsRUFBTXJtQixPQUFPb1QsT0FBTyxvQkFDbkJpVCxFQUFLK0ssR0FDUkMsVUFBaUJoTCxFQUFLZ0wsR0FDbkJoTCxHQUVUd0ssT0FBT3FCLFFBQVVmLGNBS2pCcE8sSUFBTThPLGFBQWUsU0FBVVQsRUFBV0MsZUFDcEIxd0IsSUFBYjB3QixFQUNIRCxFQUNBQyxHQU1OLFNBQVNjLGdCQUFpQjFrQixPQUNuQnNWLElBQU0vZixLQUFPeUssRUFBUTJrQixpQ0FDRnB2QixHQUkxQixTQUFTcXZCLHNCQUF1QjkwQixHQUN6QixJQUFJUyw4QkFBOEJpcUIsc0JBQXFCcGxCLEtBQUt0RixTQUU3RCw0QkFBOEJBLEVBQU8sMkZBSXJDb25CLGFBQWFwbkIsSUFBU2tmLE9BQU82VixjQUFjLzBCLFVBRTNDLGtFQUNTQSxHQVNmLFNBQVNnMUIsZUFBZ0I5a0IsRUFBU3dkLE9BQzFCdm5CLEVBQVErSixFQUFRL0osU0FDakJBLE9BRUR5ZCxFQUFHMEMsRUFERDZDLFFBRUY5aEIsTUFBTW1DLFFBQVFyRCxTQUNaQSxFQUFNSSxPQUNIcWQsS0FFYyxtQkFEYnpkLEVBQU15ZCxNQUVIa0UsU0FBU3hCLEtBQ0ZwaUIsS0FBTSxXQUVmLHVEQUdKLEdBQUl5SixnQkFBY3hILE9BQ2xCcWYsSUFBTS9mLEtBQU9VLElBQ1ZBLEVBQU1WLEtBQ0xxaUIsU0FBU3JpQixJQUNKa0ksZ0JBQWMyWSxHQUN0QkEsR0FDRXBpQixLQUFNb2lCLGFBSVosNkVBQ1dILFVBQVVoZ0IsT0FDckJ1bkIsS0FHSXZuQixNQUFRZ2pCLEdBTWxCLFNBQVM4TCxnQkFBaUIva0IsRUFBU3dkLE9BQzNCK0csRUFBU3ZrQixFQUFRdWtCLFVBQ2xCQSxPQUNDUyxFQUFhaGxCLEVBQVF1a0IsYUFDdkJwdEIsTUFBTW1DLFFBQVFpckIsT0FDWDlRLElBQUlDLEVBQUksRUFBR0EsRUFBSTZRLEVBQU9sdUIsT0FBUXFkLE1BQ3RCNlEsRUFBTzdRLEtBQVE2UCxLQUFNZ0IsRUFBTzdRLFNBRXBDLEdBQUlqVyxnQkFBYzhtQixPQUNsQmpQLElBQU0vZixLQUFPZ3ZCLEVBQVEsS0FDbEJuTyxFQUFNbU8sRUFBT2h2QixLQUNSQSxHQUFPa0ksZ0JBQWMyWSxHQUM1QnlDLFFBQVMwSyxLQUFNaHVCLEdBQU82Z0IsSUFDcEJtTixLQUFNbk4sYUFJWiw4RUFDV0gsVUFBVXNPLE9BQ3JCL0csSUFRTixTQUFTeUgsb0JBQXFCamxCLE9BQ3RCa2xCLEVBQU9sbEIsRUFBUW1sQixjQUNqQkQsTUFDRzVQLElBQU0vZixLQUFPMnZCLEVBQU0sS0FDaEJFLEVBQVNGLEVBQUszdkIsR0FDRSxtQkFBWDZ2QixNQUNKN3ZCLElBQVNtakIsS0FBTTBNLEVBQVFqRyxPQUFRaUcsS0FNNUMsU0FBU0MsaUJBQWtCdjFCLEVBQU1zRCxFQUFPb3FCLEdBQ2pDL2YsZ0JBQWNySyxTQUVmLDZCQUE2QnRELG9DQUNsQm1tQixVQUFVN2lCLE9BQ3JCb3FCLEdBU04sU0FBUzhILGFBQ1ByRixFQUNBVSxFQUNBbkQsc0JBR2tCbUQsR0FHRyxtQkFBVkEsTUFDREEsRUFBTTNnQix3QkFHRDJnQixFQUFPbkQsbUJBQ05tRCxFQUFPbkQsdUJBQ0htRCxJQU1mQSxFQUFNNEUsUUFDTDVFLEVBQU02RSxZQUNDRixhQUFhckYsRUFBUVUsRUFBTTZFLFFBQVNoSSxJQUUzQ21ELEVBQU04RSxZQUNIaFMsSUFBSUMsRUFBSSxFQUFHNkUsRUFBSW9JLEVBQU04RSxPQUFPcHZCLE9BQVFxZCxFQUFJNkUsRUFBRzdFLE1BQ3JDNFIsYUFBYXJGLEVBQVFVLEVBQU04RSxPQUFPL1IsR0FBSThKLE9BTWpEam9CLEVBREV5SyxTQUVEekssS0FBTzBxQixJQUNDMXFCLE9BRVJBLEtBQU9vckIsRUFDTG5KLE9BQU95SSxFQUFRMXFCLE1BQ1BBLFlBR05td0IsRUFBWW53QixPQUNib3dCLEVBQVF2QyxPQUFPN3RCLElBQVE2dUIsZUFDckI3dUIsR0FBT293QixFQUFNMUYsRUFBTzFxQixHQUFNb3JCLEVBQU1wckIsR0FBTWlvQixFQUFJam9CLFVBRTdDeUssRUFRVCxTQUFTNGxCLGFBQ1A1bEIsRUFDQWhNLEVBQ0EwcUIsRUFDQW1ILE1BR2tCLGlCQUFQbkgsT0FHTG9ILEVBQVM5bEIsRUFBUWhNLE1BRW5Cd2pCLE9BQU9zTyxFQUFRcEgsVUFBWW9ILEVBQU9wSCxPQUNoQ3FILEVBQWNuTyxTQUFTOEcsTUFDekJsSCxPQUFPc08sRUFBUUMsVUFBcUJELEVBQU9DLE9BQ3pDQyxFQUFlak8sV0FBV2dPLE1BQzVCdk8sT0FBT3NPLEVBQVFFLFVBQXNCRixFQUFPRSxPQUUxQy9NLEVBQU02TSxFQUFPcEgsSUFBT29ILEVBQU9DLElBQWdCRCxFQUFPRSxVQUNwREgsSUFBZ0I1TSxRQUVoQixxQkFBdUJqbEIsRUFBS2lOLE1BQU0sR0FBSSxHQUFLLEtBQU95ZCxFQUNsRDFlLEdBR0dpWixHQU9ULFNBQVNnTixhQUNQMXdCLEVBQ0Eyd0IsRUFDQS9CLEVBQ0EzRyxPQUVNMkksRUFBT0QsRUFBWTN3QixHQUNuQjZ3QixHQUFVNU8sT0FBTzJNLEVBQVc1dUIsR0FDOUJuQyxFQUFRK3dCLEVBQVU1dUIsR0FFaEI4d0IsRUFBZUMsYUFBYUMsUUFBU0osRUFBS255QixTQUM1Q3F5QixHQUFnQixLQUNkRCxJQUFXNU8sT0FBTzJPLEVBQU0sY0FDbEIsT0FDSCxHQUFjLEtBQVYveUIsR0FBZ0JBLElBQVU4a0IsVUFBVTNpQixHQUFNLEtBRzdDaXhCLEVBQWNGLGFBQWE3cEIsT0FBUTBwQixFQUFLbnlCLE9BQzFDd3lCLEVBQWMsR0FBS0gsRUFBZUcsUUFDNUIsV0FLQXR6QixJQUFWRSxFQUFxQixHQUNmcXpCLG9CQUFvQmpKLEVBQUkySSxFQUFNNXdCLE9BR2hDbXhCLEVBQW9CN0UsK0JBQ1YsV0FDUnp1QixtQkFDUXN6QixxQkFHTFAsRUFBTTV3QixFQUFLbkMsRUFBT29xQixFQUFJNEksR0FFNUJoekIsRUFNVCxTQUFTcXpCLG9CQUFxQmpKLEVBQUkySSxFQUFNNXdCLE1BRWpDaWlCLE9BQU8yTyxFQUFNLGdCQUdaekwsRUFBTXlMLEVBQUtsWCxlQUVibGIsV0FBUzJtQixTQUVULG1DQUFxQ25sQixFQUFNLDJGQUczQ2lvQixHQUtBQSxHQUFNQSxFQUFHUSxTQUFTbUcsZ0JBQ1dqeEIsSUFBL0JzcUIsRUFBR1EsU0FBU21HLFVBQVU1dUIsU0FDSHJDLElBQW5Cc3FCLEVBQUdtSixPQUFPcHhCLEdBRUhpb0IsRUFBR21KLE9BQU9weEIsR0FJRyxtQkFBUm1sQixHQUE2QyxhQUF2QmtNLFFBQVFULEVBQUtueUIsTUFDN0MwbUIsRUFBSXBuQixLQUFLa3FCLEdBQ1Q5QyxHQU1OLFNBQVNtTSxXQUNQVixFQUNBcjJCLEVBQ0FzRCxFQUNBb3FCLEVBQ0E0SSxNQUVJRCxFQUFLVyxVQUFZVixPQUVqQiwyQkFBNkJ0MkIsRUFBTyxJQUNwQzB0QixXQUlTLE1BQVRwcUIsR0FBa0IreUIsRUFBS1csY0FHdkI5eUIsRUFBT215QixFQUFLbnlCLEtBQ1oreUIsR0FBUy95QixJQUFpQixJQUFUQSxFQUNmZ3pCLFFBQ0ZoekIsRUFBTSxDQUNIbUQsTUFBTW1DLFFBQVF0RixRQUNUQSxRQUVMeWYsSUFBSUMsRUFBSSxFQUFHQSxFQUFJMWYsRUFBS3FDLFNBQVcwd0IsRUFBT3JULElBQUssS0FDeEN1VCxFQUFlQyxXQUFXOXpCLEVBQU9ZLEVBQUswZixNQUM5QmhYLEtBQUt1cUIsRUFBYUUsY0FBZ0IsTUFDeENGLEVBQWFGLFVBSXBCQSxPQU9DSyxFQUFZakIsRUFBS2lCLFVBQ25CQSxJQUNHQSxFQUFVaDBCLFNBRVgseURBQTJEdEQsRUFBTyxLQUNsRTB0QixjQVZGNkosc0JBQXNCdjNCLEVBQU1zRCxFQUFPNHpCLEdBQ25DeEosSUFlTmxJLElBQU1nUyxjQUFnQiw0Q0FFdEIsU0FBU0osV0FBWTl6QixFQUFPWSxPQUN0Qit5QixFQUNFSSxFQUFlUCxRQUFRNXlCLE1BQ3pCc3pCLGNBQWNseUIsS0FBSyt4QixHQUFlLEtBQzlCSSxXQUFXbjBCLHNCQUFBQSxNQUNUbTBCLElBQU1KLEVBQWFsUSxnQkFFUCxXQUFOc1EsTUFDSm4wQixhQUFpQlksVUFFRCxXQUFqQm16QixFQUNEMXBCLGdCQUFjckssR0FDSSxVQUFqQit6QixFQUNEaHdCLE1BQU1tQyxRQUFRbEcsR0FFZEEsYUFBaUJZLGVBR3pCK3lCLGVBQ0FJLEdBU0osU0FBU1AsUUFBU2xQLE9BQ1Y3bUIsRUFBUTZtQixHQUFNQSxFQUFHM2tCLFdBQVdsQyxNQUFNLDZCQUNqQ0EsRUFBUUEsRUFBTSxHQUFLLEdBRzVCLFNBQVMyMkIsV0FBWWxQLEVBQUdZLFVBQ2YwTixRQUFRdE8sS0FBT3NPLFFBQVExTixHQUdoQyxTQUFTb04sYUFBY3R5QixFQUFNZ3pCLE9BQ3RCN3ZCLE1BQU1tQyxRQUFRMHRCLFVBQ1ZRLFdBQVdSLEVBQWVoekIsR0FBUSxHQUFLLE1BRTNDeWYsSUFBSUMsRUFBSSxFQUFHK1QsRUFBTVQsRUFBYzN3QixPQUFRcWQsRUFBSStULEVBQUsvVCxPQUMvQzhULFdBQVdSLEVBQWN0VCxHQUFJMWYsVUFDeEIwZixTQUdILEVBR1YsU0FBUzJULHNCQUF1QnYzQixFQUFNc0QsRUFBTzR6QixPQUN2Q25wQixFQUFVLDZDQUE2Qy9OLGlCQUM1Q2szQixFQUFjOWlCLElBQUk2VCxZQUFZNUcsS0FBSyxNQUM1Q2dXLEVBQWVILEVBQWMsR0FDN0JVLEVBQWV6UixVQUFVN2lCLEdBQ3pCdTBCLEVBQWdCQyxXQUFXeDBCLEVBQU8rekIsR0FDbENVLEVBQWdCRCxXQUFXeDBCLEVBQU9zMEIsVUFFWCxJQUF6QlYsRUFBYzN3QixRQUNkeXhCLGFBQWFYLEtBQ1pZLFVBQVVaLEVBQWNPLFFBQ2hCLGVBQWVDLE1BRWpCLFNBQVNELE1BRWhCSSxhQUFhSixRQUNKLGNBQWNHLE9BRXBCaHFCLEVBR1QsU0FBUytwQixXQUFZeDBCLEVBQU9ZLFNBQ2IsV0FBVEEsTUFDU1osTUFDTyxXQUFUWSxLQUNDZzBCLE9BQU81MEIsTUFFUEEsRUFJZCxTQUFTMDBCLGFBQWMxMEIsVUFDRSxTQUFVLFNBQVUsV0FDdEI2MEIsY0FBS0MsVUFBUTkwQixFQUFNNmpCLGdCQUFrQmlSLElBRzVELFNBQVNILG1FQUNQLE9BQU9yeEIsRUFBS3V4QixjQUFLQyxTQUErQixZQUF2QkEsRUFBS2pSLGdCQUtoQyxTQUFTa1IsWUFBYUMsRUFBSzVLLEVBQUk2SyxNQUN6QjdLLFVBQ0U4SyxFQUFNOUssRUFDRjhLLEVBQU1BLEVBQUlqSyxTQUFVLEtBQ3BCNEYsRUFBUXFFLEVBQUl0SyxTQUFTdUssaUJBQ3ZCdEUsTUFDR3hRLElBQUlDLEVBQUksRUFBR0EsRUFBSXVRLEVBQU01dEIsT0FBUXFkLFlBRXdCLElBQXRDdVEsRUFBTXZRLEdBQUdwZ0IsS0FBS2cxQixFQUFLRixFQUFLNUssRUFBSTZLLFVBRTVDLE1BQU81MEIscUJBQ1dBLEVBQUc2MEIsRUFBSyx5Q0FNbEJGLEVBQUs1SyxFQUFJNkssR0FHN0IsU0FBU0csd0JBQ1BDLEVBQ0E5SSxFQUNBanBCLEVBQ0E4bUIsRUFDQTZLLE9BRUlwUCxTQUVJdmlCLEVBQU8reEIsRUFBUWp5QixNQUFNbXBCLEVBQVNqcEIsR0FBUSt4QixFQUFRbjFCLEtBQUtxc0IsTUFDN0MxRyxFQUFJOEUsUUFBVXZILFVBQVV5QyxNQUM5QnZuQixlQUFNK0IsVUFBSzAwQixZQUFZMTBCLEVBQUcrcEIsRUFBSTZLLEVBQU8sc0JBRTNDLE1BQU81MEIsZUFDS0EsRUFBRytwQixFQUFJNkssVUFFZHBQLEVBR1QsU0FBU3lQLGtCQUFtQk4sRUFBSzVLLEVBQUk2SyxNQUMvQnJaLE9BQU8yWix3QkFFQTNaLE9BQU8yWixhQUFhcjFCLEtBQUssS0FBTTgwQixFQUFLNUssRUFBSTZLLEdBQy9DLE1BQU81MEIsR0FHSEEsSUFBTTIwQixZQUNDMzBCLEVBQUcsS0FBTSxnQ0FJZjIwQixFQUFLNUssRUFBSTZLLEdBR3BCLFNBQVNPLFNBQVVSLEVBQUs1SyxFQUFJNkssdUJBRVBBLFFBQVVELEVBQUlyMUIsZUFBZXlxQixJQUczQ3ZDLFlBQWFDLFFBQThCLG9CQUFaa0MsY0FHNUJnTCxVQUZFejJCLE1BQU15MkIsR0FRbEIzVSxJQXlCSW9WLFVBaUZBQyxLQUNBQyxRQTNHQUMsa0JBQW1CLEVBRWpCQyxhQUNGQyxTQUFVLEVBRWQsU0FBU0MsMEJBQ0csTUFDSkMsRUFBU0gsVUFBVWhvQixNQUFNLGFBQ3JCNUssT0FBUyxNQUNkb2QsSUFBSUMsRUFBSSxFQUFHQSxFQUFJMFYsRUFBTy95QixPQUFRcWQsTUFDMUJBLEtBd0JYLEdBQXVCLG9CQUFabkssU0FBMkJtVCxTQUFTblQsU0FBVSxLQUNqRDhmLEVBQUk5ZixRQUFRVyxpQ0FFZDVZLEtBQUs2M0IsZ0JBTUh0TixrQkFBa0JoTiwyQkFFTCxPQUNkLEdBQUs0TSxNQUFvQyxvQkFBckI2TixtQkFDekI1TSxTQUFTNE0sbUJBRXVCLHlDQUFoQ0EsaUJBQWlCdjJCLHFCQWdCZ0Isb0JBQWpCdzJCLGNBQWdDN00sU0FBUzZNLHNDQUsxQ0osdUNBS0ZBLGVBQWdCLFFBekI1QixLQUlHSyxRQUFVLEVBQ1JDLFNBQVcsSUFBSUgsaUJBQWlCSCxnQkFDaENPLFNBQVc1M0IsU0FBUzYzQixlQUFlbHRCLE9BQU8rc0IsbUJBQ3ZDbEgsUUFBUW9ILHlCQUNBLGtDQUdKRixRQUFVLEdBQUssV0FDakI1M0IsS0FBTzZLLE9BQU8rc0IsNEJBRU4sRUFlckIsU0FBU0ksU0FBVUMsRUFBSXpSLE9BQ2pCMFIsZUFDTXB0QixtQkFDSm10QixRQUVHdjJCLEtBQUs4a0IsR0FDUixNQUFPM2tCLGVBQ0tBLEVBQUcya0IsRUFBSyxpQkFFYjBSLEtBQ0ExUixLQUdSOFEsbUJBQ08sZ0JBSVBXLEdBQXlCLG9CQUFadGdCLGVBQ1QsSUFBSUEsaUJBQVFXLEtBQ05BLFFBZ0NiNmYsVUFyQklDLEtBQU8vTyxXQUFhaHJCLE9BQU9nNkIsWUFHL0JELE1BQ0FBLEtBQUtsQixNQUNMa0IsS0FBS2pCLFNBQ0xpQixLQUFLRSxZQUNMRixLQUFLRyw4QkFFRTUyQixVQUFPeTJCLEtBQUtsQixLQUFLdjFCLHFCQUNiekQsRUFBTXM2QixFQUFVQyxRQUNwQnRCLFFBQVFqNUIsRUFBTXM2QixFQUFVQyxRQUN4QkgsV0FBV0UsUUFDWEYsV0FBV0csU0FXZEMsZUFBaUIxVCxRQUNyQixxTUFNSTJULHdCQUFrQjlaLEVBQVFsYixRQUU1Qix1QkFBdUJBLG9SQUt2QmtiLElBSUUrWiw0QkFBc0IvWixFQUFRbGIsUUFFaEMsYUFBYUEsb0NBQXFDQSxpS0FJbERrYixJQUlFZ2EsU0FDYSxvQkFBVkMsT0FBeUJoTyxTQUFTZ08sVUFFdkNELFNBQVUsS0FDTkUsa0JBQW9CL1QsUUFBUSxzREFDM0JnVSxTQUFXLElBQUlGLE1BQU0xYixPQUFPNGIsdUJBQzVCbmEsRUFBUWxiLEVBQUtuQyxVQUNadTNCLGtCQUFrQnAxQixxRUFDNkNBLElBQzFELE1BRUFBLEdBQU9uQyxHQUNQLFVBTVR5M0IseUJBQ0NwYSxFQUFRbGIsT0FDTDhOLEVBQU05TixLQUFPa2IsRUFDYnFhLEVBQVlSLGVBQWUvMEIsSUFDZixpQkFBUkEsR0FBc0MsTUFBbEJBLEVBQUl5aUIsT0FBTyxNQUFnQnppQixLQUFPa2IsRUFBT3NhLGNBQ2xFMW5CLEdBQVF5bkIsSUFDUHYxQixLQUFPa2IsRUFBT3NhLHlCQUEwQnRhLEVBQVFsYixrQkFDaENrYixFQUFRbGIsSUFFdkI4TixJQUFReW5CLElBSWJFLHlCQUNDdmEsRUFBUWxiLFNBQ1EsaUJBQVJBLEdBQXNCQSxLQUFPa2IsSUFDbENsYixLQUFPa2IsRUFBT3NhLHlCQUEwQnRhLEVBQVFsYixrQkFDaENrYixFQUFRbGIsSUFFdkJrYixFQUFPbGIsZUFJTixTQUFvQmlvQixNQUMxQmlOLFNBQVUsS0FFTnpxQixFQUFVd2QsRUFBR1EsU0FDYmlOLEVBQVdqckIsRUFBUWtyQixRQUFVbHJCLEVBQVFrckIsT0FBT0MsY0FDOUNILFdBQ0FILGFBQ0RPLGFBQWUsSUFBSVYsTUFBTWxOLEVBQUl5TixVQUU3QkcsYUFBZTVOLEdBT3hCbEksSUFBTStWLFlBQWMsSUFBSTFPLEtBT3hCLFNBQVMyTyxTQUFVbFYsYUFDUEEsRUFBS2lWLHlCQUNIeG9CLFFBR2QsU0FBUzBvQixVQUFXblYsRUFBSzFPLE9BQ25CZ00sRUFBR2pmLEVBQ0QrMkIsRUFBTXIwQixNQUFNbUMsUUFBUThjLFNBQ3BCb1YsSUFBUXozQixXQUFTcWlCLElBQVM3akIsT0FBT2s1QixTQUFTclYsSUFBUUEsYUFBZW1KLFdBR25FbkosRUFBSW9MLE9BQVEsS0FDUmtLLEVBQVF0VixFQUFJb0wsT0FBT0UsSUFBSWhELE1BQ3pCaFgsRUFBS3JFLElBQUlxb0IsWUFHUjdrQixJQUFJNmtCLE1BRVBGLFFBQ0VwVixFQUFJL2YsT0FDRHFkLGVBQWUwQyxFQUFJMUMsR0FBSWhNLGlCQUV2Qm5WLE9BQU9rQyxLQUFLMmhCLElBQ1YvZixPQUNGcWQsZUFBZTBDLEVBQUkzaEIsRUFBS2lmLElBQUtoTSxJQU14QzROLElBQU1xVyxlQUFpQmxVLGdCQUFRM25CLE9BQ3ZCODdCLEVBQTZCLE1BQW5COTdCLEVBQUtrb0IsT0FBTyxHQUV0QjZULEVBQTZCLFNBRDVCRCxFQUFVOTdCLEVBQUttUixNQUFNLEdBQUtuUixHQUNaa29CLE9BQU8sR0FFdEI4VCxFQUE2QixTQUQ1QkQsRUFBVS83QixFQUFLbVIsTUFBTSxHQUFLblIsR0FDWmtvQixPQUFPLGlCQUNyQjhULEVBQVVoOEIsRUFBS21SLE1BQU0sR0FBS25SLE9BR3pCKzdCLFVBQ05DLFVBQ0FGLEtBSUosU0FBU0csZ0JBQWlCQyxFQUFLeE8sWUFDcEJ5TyxvQkFDREQsRUFBTUMsRUFBUUQsUUFDaEI3MEIsTUFBTW1DLFFBQVEweUIsVUFPVHhELHdCQUF3QndELEVBQUssS0FBTS8wQixVQUFXdW1CLEVBQUksd0JBTm5EeUQsRUFBUytLLEVBQUkvcUIsUUFDVnlTLEVBQUksRUFBR0EsRUFBSXVOLEVBQU81cUIsT0FBUXFkLDRCQUNUdU4sRUFBT3ZOLEdBQUksS0FBTXpjLEVBQVd1bUIsRUFBSSx5QkFPdER3TyxJQUFNQSxFQUNQQyxFQUdULFNBQVNDLGdCQUNQQyxFQUNBQyxFQUNBdmxCLEVBQ0F3bEIsRUFDQUMsRUFDQTlPLE9BRUkxdEIsRUFBY3c0QixFQUFLaUUsRUFBS2hjLE1BQ3ZCemdCLEtBQVFxOEIsRUFDRjdELEVBQU02RCxFQUFHcjhCLEtBQ1pzOEIsRUFBTXQ4QixLQUNKNjdCLGVBQWU3N0IsR0FDbkIybEIsUUFBUTZTLFFBRVIsOEJBQThCL1gsRUFBTXpnQixlQUFnQjJNLE9BQU82ckIsR0FDM0Q5SyxHQUVPL0gsUUFBUThXLElBQ2I5VyxRQUFRNlMsRUFBSTBELFNBQ1JHLEVBQUdyOEIsR0FBUWk4QixnQkFBZ0J6RCxFQUFLOUssSUFFcEM1SCxPQUFPckYsRUFBTTRKLFVBQ1RnUyxFQUFHcjhCLEdBQVF3OEIsRUFBa0IvYixFQUFNemdCLEtBQU13NEIsRUFBSy9YLEVBQU11YixZQUV4RHZiLEVBQU16Z0IsS0FBTXc0QixFQUFLL1gsRUFBTXViLFFBQVN2YixFQUFNcWIsUUFBU3JiLEVBQU1pYyxTQUNoRGxFLElBQVFpRSxNQUNiUCxJQUFNMUQsSUFDUHg0QixHQUFReThCLE9BR1Z6OEIsS0FBUXM4QixFQUNQM1csUUFBUTBXLEVBQUdyOEIsVUFDTDY3QixlQUFlNzdCLElBQ1BBLEtBQU1zOEIsRUFBTXQ4QixHQUFPeWdCLEVBQU11YixTQU8vQyxTQUFTVyxlQUFnQi9SLEVBQUtnUyxFQUFTckksT0FJakM0SCxFQUhBdlIsYUFBZTZFLFVBQ1g3RSxFQUFJOW9CLEtBQUt5eUIsT0FBUzNKLEVBQUk5b0IsS0FBS3l5QixjQUc3QnNJLEVBQVVqUyxFQUFJZ1MsWUFFWEUsTUFDRnAyQixNQUFNL0csS0FBTXdILGtCQUdWZzFCLEVBQVFELElBQUtZLEdBR2xCblgsUUFBUWtYLEtBRUFaLGlCQUFpQmEsSUFHdkJqWCxNQUFNZ1gsRUFBUVgsTUFBUXBXLE9BQU8rVyxFQUFRemEsV0FFN0J5YSxHQUNGWCxJQUFJdHZCLEtBQUtrd0IsS0FHUGIsaUJBQWlCWSxFQUFTQyxNQUloQzFhLFFBQVMsSUFDYndhLEdBQVdULEVBS2pCLFNBQVNZLDBCQUNQajdCLEVBQ0FnTCxFQUNBckosT0FLTTJ5QixFQUFjdHBCLEVBQUtvRCxRQUFRL0osVUFDN0J3ZixRQUFReVEsUUFHTmpOLDRCQUVGdEQsTUFBTW1YLElBQVVuWCxNQUFNMWYsT0FDbkJxZixJQUFNL2YsS0FBTzJ3QixFQUFhLEtBQ3ZCNkcsRUFBUzdVLFVBQVUzaUIsR0FFakJ5M0IsRUFBaUJ6M0IsRUFBSTBoQixjQUV6QjFoQixJQUFReTNCLEdBQ1JGLEdBQVN0VixPQUFPc1YsRUFBT0UsUUFHckIsU0FBU0EsOEJBQ045UCxvQkFBb0IzcEIsR0FBT3FKLHVDQUN6QnJILDJLQUdrQ3czQixtQkFBdUJ4M0Isa0JBSTFEMGpCLEVBQUtoakIsRUFBT1YsRUFBS3czQixHQUFRLElBQ25DRSxVQUFVaFUsRUFBSzZULEVBQU92M0IsRUFBS3czQixHQUFRLFVBR2hDOVQsR0FHVCxTQUFTZ1UsVUFDUGhVLEVBQ0FuRixFQUNBdmUsRUFDQXczQixFQUNBRyxNQUVJdlgsTUFBTTdCLEdBQU8sSUFDWDBELE9BQU8xRCxFQUFNdmUsWUFDWEEsR0FBT3VlLEVBQUt2ZSxHQUNYMjNCLFVBQ0lwWixFQUFLdmUsSUFFUCxFQUNGLEdBQUlpaUIsT0FBTzFELEVBQU1pWixZQUNsQngzQixHQUFPdWUsRUFBS2laLEdBQ1hHLFVBQ0lwWixFQUFLaVosSUFFUCxTQUdKLEVBaUJULFNBQVNJLHdCQUF5QjNOLE9BQzNCL0wsSUFBSUMsRUFBSSxFQUFHQSxFQUFJOEwsRUFBU25wQixPQUFRcWQsT0FDL0J2YyxNQUFNbUMsUUFBUWttQixFQUFTOUwsV0FDbEJ2YyxNQUFNdEUsVUFBVXNmLE9BQU8zYixTQUFVZ3BCLFVBR3JDQSxFQU9ULFNBQVM0TixrQkFBbUI1TixVQUNuQjFKLFlBQVkwSixJQUNkc0IsZ0JBQWdCdEIsSUFDakJyb0IsTUFBTW1DLFFBQVFrbUIsR0FDWjZOLHVCQUF1QjdOLFFBQ3ZCdHNCLEVBR1IsU0FBU282QixXQUFZek0sVUFDWmxMLE1BQU1rTCxJQUFTbEwsTUFBTWtMLEVBQUtqd0IsT0FBU2lsQixRQUFRZ0wsRUFBS1IsV0FHekQsU0FBU2dOLHVCQUF3QjdOLEVBQVUrTixPQUVyQzdaLEVBQUdtRSxFQUFHMlYsRUFBV2hQLEVBRGZ2RixTQUVEdkYsRUFBSSxFQUFHQSxFQUFJOEwsRUFBU25wQixPQUFRcWQsSUFFM0IrQixVQURBK0osRUFBUzlMLEtBQ2tCLGtCQUFObUUsTUFFbEJvQixJQURLQSxFQUFJNWlCLE9BQVMsR0FHckJjLE1BQU1tQyxRQUFRdWUsR0FDWkEsRUFBRXhoQixPQUFTLElBR1RpM0IsY0FGQUQsdUJBQXVCeFYsR0FBTTBWLEdBQWUsUUFBTTdaLElBRXJDLEtBQU80WixXQUFXOU8sT0FDN0JnUCxHQUFhMU0sZ0JBQWdCdEMsRUFBSzV0QixLQUFRaW5CLEVBQUUsR0FBSWpuQixRQUNsRDY4QixXQUVBL3dCLEtBQUtsRyxNQUFNeWlCLEVBQUtwQixJQUViL0IsWUFBWStCLEdBQ2pCeVYsV0FBVzlPLEtBSVRnUCxHQUFhMU0sZ0JBQWdCdEMsRUFBSzV0QixLQUFPaW5CLEdBQzlCLEtBQU5BLEtBRUxuYixLQUFLb2tCLGdCQUFnQmpKLElBR3ZCeVYsV0FBV3pWLElBQU15VixXQUFXOU8sS0FFMUJnUCxHQUFhMU0sZ0JBQWdCdEMsRUFBSzV0QixLQUFPaW5CLEVBQUVqbkIsT0FHM0NnbEIsT0FBTzRKLEVBQVNrTyxXQUNsQi9YLE1BQU1rQyxFQUFFdGtCLE1BQ1JraUIsUUFBUW9DLEVBQUV0aUIsTUFDVm9nQixNQUFNNFgsT0FDSmg0QixJQUFNLFVBQVVnNEIsTUFBZTdaLFVBRS9CaFgsS0FBS21iLFlBSVJvQixFQUtULFNBQVMwVSxZQUFhblEsT0FDZGlILEVBQVVqSCxFQUFHUSxTQUFTeUcsUUFDeEJBLE1BQ0NtSixVQUErQixtQkFBWm5KLEVBQ2xCQSxFQUFRbnhCLEtBQUtrcUIsR0FDYmlILEdBSVIsU0FBU29KLGVBQWdCclEsT0FDakI5cEIsRUFBU282QixjQUFjdFEsRUFBR1EsU0FBU3VHLE9BQVEvRyxHQUM3QzlwQixxQkFDYyxVQUNUZSxLQUFLZixHQUFRcU8saUJBQVF4TSxxQkFHTmlvQixFQUFJam9CLEVBQUs3QixFQUFPNkIsbUJBRTlCLHlKQUU2QkEsTUFDN0Jpb0Isd0JBS1EsSUFJcEIsU0FBU3NRLGNBQWV2SixFQUFRL0csTUFDMUIrRyxFQUFRLFNBRUo3d0IsRUFBU25CLE9BQU9vVCxPQUFPLE1BQ3ZCbFIsRUFBT21vQixVQUNUQyxRQUFRQyxRQUFReUgsR0FDaEJoeUIsT0FBT2tDLEtBQUs4dkIsR0FFUDdRLEVBQUksRUFBR0EsRUFBSWpmLEVBQUs0QixPQUFRcWQsSUFBSyxLQUM5Qm5lLEVBQU1kLEVBQUtpZixNQUVMLFdBQVJuZSxXQUNFdzRCLEVBQWF4SixFQUFPaHZCLEdBQUtndUIsS0FDM0J2dEIsRUFBU3duQixFQUNOeG5CLEdBQVEsSUFDVEEsRUFBTzQzQixXQUFhcFcsT0FBT3hoQixFQUFPNDNCLFVBQVdHLEdBQWEsR0FDckR4NEIsR0FBT1MsRUFBTzQzQixVQUFVRyxXQUd4Qi8zQixFQUFPcW9CLFlBRWJyb0IsS0FDQyxZQUFhdXVCLEVBQU9odkIsR0FBTSxLQUN0Qnk0QixFQUFpQnpKLEVBQU9odkIsR0FBSzBaLFVBQzVCMVosR0FBaUMsbUJBQW5CeTRCLEVBQ2pCQSxFQUFlMTZCLEtBQUtrcUIsR0FDcEJ3USwwQkFFZXo0QixnQkFBa0Jpb0IsV0FJcEM5cEIsR0FXWCxTQUFTdTZCLGFBQ1B6TyxFQUNBRyxPQUVLSCxJQUFhQSxFQUFTbnBCLHdCQUdyQjYzQixLQUNHeGEsRUFBSSxFQUFHNkUsRUFBSWlILEVBQVNucEIsT0FBUXFkLEVBQUk2RSxFQUFHN0UsSUFBSyxLQUN6Q2lOLEVBQVFuQixFQUFTOUwsR0FDakI5aEIsRUFBTyt1QixFQUFNL3VCLFFBRWZBLEdBQVFBLEVBQUtrN0IsT0FBU2w3QixFQUFLazdCLE1BQU1xQixhQUM1QnY4QixFQUFLazdCLE1BQU1xQixLQUlmeE4sRUFBTWhCLFVBQVlBLEdBQVdnQixFQUFNZixZQUFjRCxJQUNwRC90QixHQUFxQixNQUFiQSxFQUFLdThCLE1BVVpELEVBQU1qZixVQUFZaWYsRUFBTWpmLGFBQWV2UyxLQUFLaWtCLE9BVDdDLEtBQ003d0IsRUFBTzhCLEVBQUt1OEIsS0FDWkEsRUFBUUQsRUFBTXArQixLQUFVbytCLEVBQU1wK0IsT0FDbEIsYUFBZDZ3QixFQUFNcHRCLE1BQ0htSixLQUFLbEcsTUFBTTIzQixFQUFNeE4sRUFBTW5CLGdCQUV2QjlpQixLQUFLaWtCLFFBT1hyTCxJQUFNeGxCLEtBQVFvK0IsRUFDYkEsRUFBTXArQixHQUFNZ3FCLE1BQU1zVSxzQkFDYkYsRUFBTXArQixVQUdWbytCLEVBR1QsU0FBU0UsYUFBY3ZOLFVBQ2JBLEVBQUtSLFlBQWNRLEVBQUtMLGNBQStCLE1BQWRLLEVBQUtqd0IsS0FLeEQsU0FBU3k5QixxQkFDUEgsRUFDQUksRUFDQUMsT0FFSXRWLEtBQ0NpVixFQUVFLENBQUEsR0FBSUEsRUFBTU0sbUJBRVJOLEVBQU1NLFlBQ1IsR0FDTE4sRUFBTU8sU0FDTkYsR0FDQUEsSUFBY2haLGFBQ3NCLElBQXBDaGpCLE9BQU9rQyxLQUFLNjVCLEdBQWFqNEIsY0FJbEJrNEIsTUFHRmpaLElBQU0vZixVQUFPMjRCLEVBQ1pBLEVBQU0zNEIsSUFBbUIsTUFBWEEsRUFBSSxPQUNoQkEsR0FBT201QixvQkFBb0JKLEVBQWEvNEIsRUFBSzI0QixFQUFNMzRCLG1CQUt4RCtmLElBQU0vZixLQUFPKzRCLEVBQ1YvNEIsS0FBTzBqQixNQUNQMWpCLEdBQU9vNUIsZ0JBQWdCTCxFQUFhLzRCLFdBS3hDMjRCLEdBQVMzN0IsT0FBT2l3QixhQUFhMEwsT0FDdkJNLFlBQWN2VixPQUVwQkEsRUFBSyxXQUFXaVYsS0FBVUEsRUFBTU8sU0FDN0J4VixFQUdULFNBQVN5VixvQkFBb0JKLEVBQWEvNEIsRUFBS21pQixPQUN2Q3NOLEVBQWEsZUFDYi9MLEVBQU1oaUIsVUFBVVosT0FBU3FoQixFQUFHbGhCLE1BQU0sS0FBTVMsV0FBYXlnQixlQUNuRHVCLEdBQXNCLHFCQUFSQSxzQkFBQUEsTUFBcUI5aEIsTUFBTW1DLFFBQVEyZixJQUNsREEsR0FDRG1VLGtCQUFrQm5VLEtBQ08sSUFBZkEsRUFBSTVpQixZQUNkbkQsRUFDQStsQixVQUtGdkIsRUFBR2tYLGNBQ0VuNUIsZUFBZTY0QixFQUFhLzRCLE9BQzVCeXZCLGNBQ08sZ0JBQ0UsSUFHWEEsRUFHVCxTQUFTMkosZ0JBQWdCVCxFQUFPMzRCLDRCQUNqQjI0QixFQUFNMzRCLElBUXJCLFNBQVNzNUIsV0FDUHpZLEVBQ0E4VSxPQUVJdFMsRUFBS2xGLEVBQUc2RSxFQUFHOWpCLEVBQU1jLEtBQ2pCNEIsTUFBTW1DLFFBQVE4YyxJQUF1QixpQkFBUkEsUUFDekIsSUFBSWpmLE1BQU1pZixFQUFJL2YsUUFDZnFkLEVBQUksRUFBRzZFLEVBQUluQyxFQUFJL2YsT0FBUXFkLEVBQUk2RSxFQUFHN0UsTUFDN0JBLEdBQUt3WCxFQUFPOVUsRUFBSTFDLEdBQUlBLFFBRXJCLEdBQW1CLGlCQUFSMEMsUUFDVixJQUFJamYsTUFBTWlmLEdBQ1gxQyxFQUFJLEVBQUdBLEVBQUkwQyxFQUFLMUMsTUFDZkEsR0FBS3dYLEVBQU94WCxFQUFJLEVBQUdBLFFBRXBCLEdBQUkzZixXQUFTcWlCLE1BQ2R3RyxXQUFheEcsRUFBSXpqQixPQUFPbThCLFVBQVcsY0FFL0JBLEVBQVcxWSxFQUFJempCLE9BQU9tOEIsWUFDeEJwN0IsRUFBU283QixFQUFTQyxRQUNkcjdCLEVBQU9zN0IsUUFDVHR5QixLQUFLd3VCLEVBQU94M0IsRUFBT04sTUFBT3dsQixFQUFJdmlCLFdBQ3pCeTRCLEVBQVNDLGtCQUdieDhCLE9BQU9rQyxLQUFLMmhCLEtBQ2IsSUFBSWpmLE1BQU0xQyxFQUFLNEIsUUFDaEJxZCxFQUFJLEVBQUc2RSxFQUFJOWpCLEVBQUs0QixPQUFRcWQsRUFBSTZFLEVBQUc3RSxNQUM1QmpmLEVBQUtpZixLQUNQQSxHQUFLd1gsRUFBTzlVLEVBQUk3Z0IsR0FBTUEsRUFBS21lLFVBSWhDaUMsTUFBTWlELGFBR0w4VSxVQUFXLEVBQ1Y5VSxFQVFULFNBQVNxVyxXQUNQbi9CLEVBQ0FvL0IsRUFDQWo1QixFQUNBazVCLE9BR0lDLEVBREVDLEVBQWU1L0IsS0FBSzYvQixhQUFheC9CLEdBRW5DdS9CLEtBQ01wNUIsTUFDSms1QixJQUNHcDdCLFdBQVNvN0IsU0FFVixpREFDQTEvQixRQUdJb3BCLE9BQU9BLFVBQVdzVyxHQUFhbDVCLE1BRWpDbzVCLEVBQWFwNUIsSUFBVWk1QixLQUV2QnovQixLQUFLOC9CLE9BQU96L0IsSUFBU28vQixNQUd6QnplLEVBQVN4YSxHQUFTQSxFQUFNazRCLFlBQzFCMWQsRUFDS2hoQixLQUFLKy9CLGVBQWUsWUFBY3JCLEtBQU0xZCxHQUFVMmUsR0FFbERBLEVBU1gsU0FBU0ssY0FBZS9RLFVBQ2ZrSCxhQUFhbjJCLEtBQUt1dUIsU0FBVSxVQUFXVSxHQUFJLElBQVNub0IsV0FLN0QsU0FBU201QixjQUFlQyxFQUFRQyxVQUMxQno0QixNQUFNbUMsUUFBUXEyQixJQUNtQixJQUE1QkEsRUFBT3BZLFFBQVFxWSxHQUVmRCxJQUFXQyxFQVN0QixTQUFTQyxjQUNQQyxFQUNBdjZCLEVBQ0F3NkIsRUFDQUMsRUFDQUMsT0FFTUMsRUFBZ0JsaEIsT0FBTzRiLFNBQVNyMUIsSUFBUXc2QixTQUMxQ0UsR0FBa0JELElBQWlCaGhCLE9BQU80YixTQUFTcjFCLEdBQzlDbTZCLGNBQWNPLEVBQWdCRCxHQUM1QkUsRUFDRlIsY0FBY1EsRUFBZUosR0FDM0JFLEVBQ0Y5WCxVQUFVOFgsS0FBa0J6NkIsT0FEOUIsRUFVVCxTQUFTNDZCLGdCQUNQditCLEVBQ0EyQixFQUNBSCxFQUNBZzlCLEVBQ0FDLE1BRUlqOUIsS0FDR1csV0FBU1gsR0FLUCxLQUlEMGdCLEVBSEEzYyxNQUFNbUMsUUFBUWxHLE9BQ1I0bEIsU0FBUzVsQix5QkFLUCxVQUFSbUMsR0FDUSxVQUFSQSxHQUNBNGhCLG9CQUFvQjVoQixLQUViM0QsTUFDRixLQUNDb0MsRUFBT3BDLEVBQUtrN0IsT0FBU2w3QixFQUFLazdCLE1BQU05NEIsT0FDL0JvOEIsR0FBVXBoQixPQUFPc2hCLFlBQVkvOEIsRUFBS1MsRUFBTXVCLEdBQzNDM0QsRUFBSzIrQixXQUFhMytCLEVBQUsyK0IsYUFDdkIzK0IsRUFBS2s3QixRQUFVbDdCLEVBQUtrN0IsY0FFcEIwRCxFQUFlNVksU0FBU3JpQixHQUN4QkEsS0FBT3VlLEdBQVcwYyxLQUFnQjFjLE1BQ2pDdmUsR0FBT25DLEVBQU1tQyxHQUVkODZCLEtBQ1N6K0IsRUFBS3U2QixLQUFPdjZCLEVBQUt1NkIsa0JBQ2ZxRSxHQUFrQixTQUFVQyxLQUNqQ2w3QixHQUFPazdCLFVBcEJoQm5iLElBQU0vZixLQUFPbkMsaUJBUmhCLDJEQUNBM0QsYUFrQ0NtQyxFQVFULFNBQVM4K0IsYUFDUHQ2QixFQUNBdTZCLE9BRU1sWixFQUFTaG9CLEtBQUttaEMsZUFBaUJuaEMsS0FBS21oQyxpQkFDdEN0UyxFQUFPN0csRUFBT3JoQixVQUdka29CLElBQVNxUyxFQUNKclMsZ0JBR0Y3RyxFQUFPcmhCLEdBQVMzRyxLQUFLdXVCLFNBQVM2UyxnQkFBZ0J6NkIsR0FBTzlDLEtBQzFEN0QsS0FBSzI3QixhQUNMLEtBQ0EzN0IsbUJBRTRCMkcsR0FBUyxHQUNoQ2tvQixHQU9ULFNBQVN3UyxTQUNQeFMsRUFDQWxvQixFQUNBYixxQkFFVytvQixhQUFpQmxvQixHQUFRYixNQUFVQSxFQUFRLEtBQU0sR0FDckQrb0IsRUFHVCxTQUFTeVMsV0FDUHpTLEVBQ0Evb0IsRUFDQWdyQixNQUVJcHBCLE1BQU1tQyxRQUFRZ2xCLE9BQ1g3SyxJQUFJQyxFQUFJLEVBQUdBLEVBQUk0SyxFQUFLam9CLE9BQVFxZCxJQUMzQjRLLEVBQUs1SyxJQUF5QixpQkFBWjRLLEVBQUs1SyxtQkFDVjRLLEVBQUs1SyxHQUFPbmUsTUFBT21lLEVBQUs2TSx1QkFJNUJqQyxFQUFNL29CLEVBQUtnckIsR0FJOUIsU0FBU3lRLGVBQWdCblEsRUFBTXRyQixFQUFLZ3JCLEtBQzdCSixVQUFXLElBQ1g1cUIsSUFBTUEsSUFDTmdyQixPQUFTQSxFQUtoQixTQUFTMFEsb0JBQXFCci9CLEVBQU13QixNQUM5QkEsS0FDR3FLLGdCQUFjckssR0FLWixLQUNDKzRCLEVBQUt2NkIsRUFBS3U2QixHQUFLdjZCLEVBQUt1NkIsR0FBS3RULFVBQVdqbkIsRUFBS3U2QixXQUMxQzdXLElBQU0vZixLQUFPbkMsRUFBTyxLQUNqQjg5QixFQUFXL0UsRUFBRzUyQixHQUNkNDdCLEVBQU8vOUIsRUFBTW1DLEtBQ2hCQSxHQUFPMjdCLEtBQWMvZSxPQUFPK2UsRUFBVUMsR0FBUUEsYUFSakQsZ0RBQ0ExaEMsYUFXQ21DLEVBS1QsU0FBU3cvQixtQkFDUHBGLEVBQ0FxRixFQUNBcFksS0FFTUEsSUFBU3dWLFNBQVU0QyxPQUNwQjVkLElBQUlDLEVBQUksRUFBR0EsRUFBSXNZLEVBQUkzMUIsT0FBUXFkLElBQUssS0FDN0J5YSxFQUFPbkMsRUFBSXRZLEdBQ2J2YyxNQUFNbUMsUUFBUTYwQixzQkFDR0EsRUFBTWtELEVBQWdCcFksR0FDaENrVixJQUVMQSxFQUFLUyxVQUNGbFgsR0FBR2tYLE9BQVEsS0FFZFQsRUFBSzU0QixLQUFPNDRCLEVBQUt6VyxXQUdsQnVCLEVBS1QsU0FBU3FZLGdCQUFpQkMsRUFBUzlxQixPQUM1QmdOLElBQUlDLEVBQUksRUFBR0EsRUFBSWpOLEVBQU9wUSxPQUFRcWQsR0FBSyxFQUFHLEtBQ25DbmUsRUFBTWtSLEVBQU9pTixHQUNBLGlCQUFSbmUsR0FBb0JBLElBQ3JCa1IsRUFBT2lOLElBQU1qTixFQUFPaU4sRUFBSSxHQUNmLEtBQVJuZSxHQUFzQixPQUFSQSxtRkFHc0RBLEVBQzNFOUYsYUFJQzhoQyxFQU1ULFNBQVNDLGdCQUFpQnArQixFQUFPMFYsU0FDUCxpQkFBVjFWLEVBQXFCMFYsRUFBUzFWLEVBQVFBLEVBS3RELFNBQVNxK0IscUJBQXNCaGhCLEtBQ3RCaWhCLEdBQUtaLFdBQ0xhLEdBQUtqYixXQUNMa2IsR0FBSzcrQixhQUNMOCtCLEdBQUtoRCxhQUNMaUQsR0FBSzdDLGFBQ0w4QyxHQUFLdFksYUFDTHVZLEdBQUs5WCxlQUNMK1gsR0FBS3ZCLGVBQ0x3QixHQUFLekMsZ0JBQ0wwQyxHQUFLdEMsZ0JBQ0x1QyxHQUFLakMsa0JBQ0xrQyxHQUFLdlIsa0JBQ0x3UixHQUFLMVIsbUJBQ0wyUixHQUFLbkIscUJBQ0xvQixHQUFLdkIsc0JBQ0x3QixHQUFLbkIsa0JBQ0xvQixHQUFLbEIsZ0JBS2QsU0FBU21CLHdCQUNQL2dDLEVBQ0FxRSxFQUNBdXBCLEVBQ0FTLEVBQ0FyakIsT0FLSWcyQixTQUhFNXlCLEVBQVVwRCxFQUFLb0QsUUFJakJ3WCxPQUFPeUksRUFBUSxXQUNMMXRCLE9BQU9vVCxPQUFPc2EsSUFFaEI0UyxVQUFZNVMsS0FLVkEsSUFFSEEsRUFBTzRTLGVBRVpDLEVBQWFsZCxPQUFPNVYsRUFBUSt5QixXQUM1QkMsR0FBcUJGLE9BRXRCbGhDLEtBQU9BLE9BQ1BxRSxNQUFRQSxPQUNSdXBCLFNBQVdBLE9BQ1hTLE9BQVNBLE9BQ1RnVCxVQUFZcmhDLEVBQUt1NkIsSUFBTTVXLGlCQUN2QjJkLFdBQWFwRixjQUFjOXRCLEVBQVF1a0IsT0FBUXRFLFFBQzNDaU8sd0JBQ0V6K0IsRUFBSzgvQiw2QkFFTjM5QixFQUFLdWhDLFlBQ0wxakMsRUFBSzgvQixPQUFTdEIsYUFBYXpPLEVBQVVTLElBR2xDeHdCLEVBQUs4L0IsZUFHUDk1QixlQUFlaEcsS0FBTSwyQkFDZCx3QkFFSDQrQixxQkFBcUJ6OEIsRUFBS3VoQyxZQUFhMWpDLEtBQUt5K0IsWUFLbkQ0RSxTQUVHOVUsU0FBV2hlLE9BRVh1dkIsT0FBUzkvQixLQUFLeStCLGFBQ2RvQixhQUFlakIscUJBQXFCejhCLEVBQUt1aEMsWUFBYTFqQyxLQUFLOC9CLFNBRzlEdnZCLEVBQVFvekIsY0FDTEMsWUFBTS9hLEVBQUdZLEVBQUdyQixFQUFHMUQsT0FDWjZNLEVBQVFqdkIsY0FBYzZnQyxFQUFXdGEsRUFBR1ksRUFBR3JCLEVBQUcxRCxFQUFHNmUsVUFDL0NoUyxJQUFVN3BCLE1BQU1tQyxRQUFRMG5CLE9BQ3BCbEIsVUFBWTlmLEVBQVFvekIsV0FDcEJ4VCxVQUFZSyxHQUViZSxRQUdKcVMsWUFBTS9hLEVBQUdZLEVBQUdyQixFQUFHMUQsVUFBTXBpQixjQUFjNmdDLEVBQVd0YSxFQUFHWSxFQUFHckIsRUFBRzFELEVBQUc2ZSxJQU1uRSxTQUFTTSwwQkFDUDEyQixFQUNBdW5CLEVBQ0F2eUIsRUFDQWdoQyxFQUNBcFQsT0FFTXhmLEVBQVVwRCxFQUFLb0QsUUFDZi9KLEtBQ0Fpd0IsRUFBY2xtQixFQUFRL0osU0FDeEIwZixNQUFNdVEsT0FDSDVRLElBQU0vZixLQUFPMndCLElBQ1Yzd0IsR0FBTzB3QixhQUFhMXdCLEVBQUsyd0IsRUFBYS9CLEdBQWE1TyxrQkFHdkRJLE1BQU0vakIsRUFBS2s3QixtQkFBbUI3MkIsRUFBT3JFLEVBQUtrN0IsT0FDMUNuWCxNQUFNL2pCLEVBQUtxRSxtQkFBbUJBLEVBQU9yRSxFQUFLcUUsV0FHMUNzOUIsRUFBZ0IsSUFBSVosd0JBQ3hCL2dDLEVBQ0FxRSxFQUNBdXBCLEVBQ0FvVCxFQUNBaDJCLEdBR0lva0IsRUFBUWhoQixFQUFRa3JCLE9BQU81M0IsS0FBSyxLQUFNaWdDLEVBQWNGLEdBQUlFLE1BRXREdlMsYUFBaUJ6QixhQUNaaVUsNkJBQTZCeFMsRUFBT3B2QixFQUFNMmhDLEVBQWN0VCxPQUFRamdCLEVBQVN1ekIsR0FDM0UsR0FBSXA4QixNQUFNbUMsUUFBUTBuQixHQUFRLFNBQ3pCeVMsRUFBU3JHLGtCQUFrQnBNLE9BQzNCL0gsRUFBTSxJQUFJOWhCLE1BQU1zOEIsRUFBT3A5QixRQUNwQnFkLEVBQUksRUFBR0EsRUFBSStmLEVBQU9wOUIsT0FBUXFkLE1BQzdCQSxHQUFLOGYsNkJBQTZCQyxFQUFPL2YsR0FBSTloQixFQUFNMmhDLEVBQWN0VCxPQUFRamdCLEVBQVN1ekIsVUFFakZ0YSxHQUlYLFNBQVN1YSw2QkFBOEJ4UyxFQUFPcHZCLEVBQU1naEMsRUFBVzV5QixFQUFTdXpCLE9BSWhFRyxFQUFRM1MsV0FBV0MsWUFDbkJwQixVQUFZZ1QsSUFDWi9TLFVBQVk3ZixHQUVmMHpCLEVBQU1DLGFBQWVELEVBQU1DLGtCQUFvQkosY0FBZ0JBLEVBRTlEM2hDLEVBQUt1OEIsUUFDTnVGLEVBQU05aEMsT0FBUzhoQyxFQUFNOWhDLFVBQVl1OEIsS0FBT3Y4QixFQUFLdThCLE1BRXpDdUYsRUFHVCxTQUFTRSxXQUFZOWEsRUFBSXlLLE9BQ2xCak8sSUFBTS9mLEtBQU9ndUIsSUFDYjNMLFNBQVNyaUIsSUFBUWd1QixFQUFLaHVCLEdBN0Q3Qms4QixxQkFBcUJrQix3QkFBd0I5L0IsV0EwRTdDeWlCLElBQU11ZSxtQ0FDRTdTLEVBQU84UyxNQUVUOVMsRUFBTWhCLG9CQUNMZ0IsRUFBTWhCLGtCQUFrQitULGNBQ3pCL1MsRUFBTXB2QixLQUFLb2lDLFVBQ1gsS0FFTUMsRUFBY2pULHNCQUNBa1QsU0FBU0QsRUFBYUEsT0FDckMsRUFDU2pULEVBQU1oQixrQkFBb0JtVSxnQ0FDdENuVCxFQUNBb1QsaUJBRUlDLE9BQU9QLEVBQVk5UyxFQUFNdkIsU0FBTXZzQixFQUFXNGdDLHVCQUkxQ1EsRUFBVXRULE9BQ1poaEIsRUFBVWdoQixFQUFNakIsc0NBQ1JpQixFQUFNaEIsa0JBQW9Cc1UsRUFBU3RVLGtCQUcvQ2hnQixFQUFRbWtCLFlBQ0E4TyxjQUVBelQsMkJBSUp3Qix5Q0FFRGhCLEVBQWtCdVUsZUFDSEEsWUFBYSxXQUN0QnZVLEVBQW1CLFlBRTFCZ0IsRUFBTXB2QixLQUFLb2lDLFlBQ1RyVSxFQUFRNFUsbUNBTWN2VSwwQkFFREEsR0FBbUIsc0JBS3ZDZ0IsNkJBRUZoQixFQUFrQitULGVBQ2hCL1MsRUFBTXB2QixLQUFLb2lDLG1DQUdXaFUsR0FBbUIsS0FGMUJ3VSxjQVFwQkMsYUFBZWxpQyxPQUFPa0MsS0FBS28vQixxQkFFakMsU0FBU2EsZ0JBQ1A5M0IsRUFDQWhMLEVBQ0ErdEIsRUFDQUgsRUFDQWpzQixPQUVJa2lCLFFBQVE3WSxRQUlOKzNCLEVBQVdoVixFQUFRM0IsU0FBU3VILFNBRzlCeHhCLFdBQVM2SSxPQUNKKzNCLEVBQVM5YixPQUFPamMsSUFLTCxtQkFBVEEsT0FRUDRqQixLQUNBL0ssUUFBUTdZLEVBQUtraEIsV0FHRjVxQixPQUROMGhDLHdCQURRaDRCLEVBQzRCKzNCLFdBS2xDRSx1QkFDTHJVLEVBQ0E1dUIsRUFDQSt0QixFQUNBSCxFQUNBanNCLEtBS0MzQixnQ0FJbUJnTCxHQUd0QitZLE1BQU0vakIsRUFBS2tqQyx1QkFDRWw0QixFQUFLb0QsUUFBU3BPLE9BSXpCdXlCLEVBQVkwSSwwQkFBMEJqN0IsRUFBTWdMLEVBQU1ySixNQUdwRHFpQixPQUFPaFosRUFBS29ELFFBQVErMEIsbUJBQ2Z6QiwwQkFBMEIxMkIsRUFBTXVuQixFQUFXdnlCLEVBQU0rdEIsRUFBU0gsT0FLN0R5VCxFQUFZcmhDLEVBQUt1NkIsUUFHbEJBLEdBQUt2NkIsRUFBS29qQyxTQUVYcGYsT0FBT2haLEVBQUtvRCxRQUFRaTFCLFVBQVcsS0FLM0I5RyxFQUFPdjhCLEVBQUt1OEIsVUFFZEEsTUFDR0EsS0FBT0EseUJBS012OEIsT0FHaEI5QixFQUFPOE0sRUFBS29ELFFBQVFsUSxNQUFReUQsU0FDcEIsSUFBSWdzQix1QkFDQzNpQixFQUFLa2hCLEtBQU1odUIsTUFBV0EsRUFBUyxJQUNoRDhCLE9BQU1zQixPQUFXQSxPQUFXQSxFQUFXeXNCLFFBQ3JDL2lCLFlBQU11bkIsWUFBVzhPLE1BQVcxL0IsV0FBS2lzQixHQUNuQ2dCLHlDQXZFd0MvakIsT0FBT0csR0FBUytpQixJQTZFNUQsU0FBU3dVLGdDQUNQblQsRUFDQWYsT0FFTWpnQixpQkFDVSxlQUNBZ2hCLFNBQ2RmLEdBR0lpVixFQUFpQmxVLEVBQU1wdkIsS0FBS3NqQyxzQkFDOUJ2ZixNQUFNdWYsT0FDQWhLLE9BQVNnSyxFQUFlaEssU0FDeEIyRixnQkFBa0JxRSxFQUFlckUsaUJBRXBDLElBQUk3UCxFQUFNakIsaUJBQWlCbmpCLEtBQUtvRCxHQUd6QyxTQUFTbTFCLHNCQUF1QnZqQyxXQUN4QnF5QixFQUFRcnlCLEVBQUt5eUIsT0FBU3p5QixFQUFLeXlCLFNBQ3hCM1EsRUFBSSxFQUFHQSxFQUFJK2dCLGFBQWFwK0IsT0FBUXFkLElBQUssS0FDdENuZSxFQUFNay9CLGFBQWEvZ0IsR0FDbkJ3ZCxFQUFXak4sRUFBTTF1QixHQUNqQjYvQixFQUFVdkIsb0JBQW9CdCtCLEdBQ2hDMjdCLElBQWFrRSxHQUFhbEUsR0FBWUEsRUFBU21FLFlBQzNDOS9CLEdBQU8yN0IsRUFBV29FLFlBQVlGLEVBQVNsRSxHQUFZa0UsSUFLL0QsU0FBU0UsWUFBYUMsRUFBSUMsT0FDbEJ0akIsV0FBVW9HLEVBQUdZLEtBRWRaLEVBQUdZLEtBQ0haLEVBQUdZLGFBRURtYyxTQUFVLEVBQ1ZuakIsRUFLVCxTQUFTdWpCLGVBQWdCejFCLEVBQVNwTyxPQUMxQnUwQixFQUFRbm1CLEVBQVE4MEIsT0FBUzkwQixFQUFRODBCLE1BQU0zTyxNQUFTLFFBQ2hENVYsRUFBU3ZRLEVBQVE4MEIsT0FBUzkwQixFQUFRODBCLE1BQU12a0IsT0FBVSxTQUN0RDNlLEVBQUtrN0IsUUFBVWw3QixFQUFLazdCLFdBQWEzRyxHQUFRdjBCLEVBQUtrakMsTUFBTTFoQyxVQUNoRCs0QixFQUFLdjZCLEVBQUt1NkIsS0FBT3Y2QixFQUFLdTZCLE9BQ3RCK0UsRUFBVy9FLEVBQUc1YixHQUNkbWxCLEVBQVc5akMsRUFBS2tqQyxNQUFNWSxTQUN4Qi9mLE1BQU11YixJQUVOLzVCLE1BQU1tQyxRQUFRNDNCLElBQ3NCLElBQWhDQSxFQUFTM1osUUFBUW1lLEdBQ2pCeEUsSUFBYXdFLE9BRWRubEIsSUFBVW1sQixHQUFVdmpCLE9BQU8rZSxNQUc3QjNnQixHQUFTbWxCLEVBTWhCcGdCLElBQU1xZ0IsaUJBQW1CLEVBQ25CQyxpQkFBbUIsRUFJekIsU0FBUzdqQyxjQUNQNHRCLEVBQ0Fwc0IsRUFDQTNCLEVBQ0E0dEIsRUFDQXFXLEVBQ0FDLFVBRUkzK0IsTUFBTW1DLFFBQVExSCxJQUFTa2tCLFlBQVlsa0IsUUFDakI0dEIsSUFDVDV0QixTQUNKc0IsR0FFTDBpQixPQUFPa2dCLE9BQ1dGLGtCQUVmRyxlQUFlcFcsRUFBU3BzQixFQUFLM0IsRUFBTTR0QixFQUFVcVcsR0FHdEQsU0FBU0UsZUFDUHBXLEVBQ0Fwc0IsRUFDQTNCLEVBQ0E0dEIsRUFDQXFXLE1BRUlsZ0IsTUFBTS9qQixJQUFTK2pCLE1BQU8vakIsRUFBTTR2QixvQkFFNUIsbURBQW1EN1IsS0FBSzhHLFVBQVU3a0IsOERBRWxFK3RCLEdBRUtpQixzQkFHTGpMLE1BQU0vakIsSUFBUytqQixNQUFNL2pCLEVBQUtva0MsUUFDdEJwa0MsRUFBS29rQyxLQUVSemlDLFNBRUlxdEIsdUJBMEJMSSxFQUFPdEIsRUFFTDlpQixHQXpCRitZLE1BQU0vakIsSUFBUytqQixNQUFNL2pCLEVBQUsyRCxPQUFTdWdCLFlBQVlsa0IsRUFBSzJELFdBSWxELDJFQUVBb3FCLEdBS0Z4b0IsTUFBTW1DLFFBQVFrbUIsSUFDTyxtQkFBaEJBLEVBQVMsUUFFVDV0QixPQUNGdWhDLGFBQWdCbGtCLFFBQVN1USxFQUFTLE1BQzlCbnBCLE9BQVMsR0FFaEJ3L0IsSUFBc0JELG1CQUNieEksa0JBQWtCNU4sR0FDcEJxVyxJQUFzQkYscUJBQ3BCeEksd0JBQXdCM04sSUFHbEIsaUJBQVJqc0IsTUFFSG9zQixFQUFRc1csUUFBVXRXLEVBQVFzVyxPQUFPdlcsSUFBTzFRLE9BQU9rbkIsZ0JBQWdCM2lDLEtBQ2pFeWIsT0FBTzZWLGNBQWN0eEIsR0FFZixJQUFJZ3NCLE1BQ1Z2USxPQUFPbW5CLHFCQUFxQjVpQyxHQUFNM0IsRUFBTTR0QixPQUN4Q3RzQixPQUFXQSxFQUFXeXNCLEdBRWIvdEIsR0FBU0EsRUFBS3drQyxNQUFRemdCLE1BQU0vWSxFQUFPZ3BCLGFBQWFqRyxFQUFRM0IsU0FBVSxhQUFjenFCLElBT25GLElBQUlnc0IsTUFDVmhzQixFQUFLM0IsRUFBTTR0QixPQUNYdHNCLE9BQVdBLEVBQVd5c0IsR0FQaEIrVSxnQkFBZ0I5M0IsRUFBTWhMLEVBQU0rdEIsRUFBU0gsRUFBVWpzQixNQVlqRG1oQyxnQkFBZ0JuaEMsRUFBSzNCLEVBQU0rdEIsRUFBU0gsVUFFMUNyb0IsTUFBTW1DLFFBQVEwbkIsR0FDVEEsRUFDRXJMLE1BQU1xTCxJQUNYckwsTUFBTStKLFlBQWFzQixFQUFPdEIsR0FDMUIvSixNQUFNL2pCLHlCQUE0QkEsR0FDL0JvdkIsR0FFQUosbUJBSVgsU0FBU3lWLFFBQVNyVixFQUFPdEIsRUFBSTRXLFFBQ3JCNVcsR0FBS0EsRUFDTyxrQkFBZHNCLEVBQU16dEIsYUFFSEwsS0FDRyxHQUVOeWlCLE1BQU1xTCxFQUFNeEIsY0FDVC9MLElBQUlDLEVBQUksRUFBRzZFLEVBQUl5SSxFQUFNeEIsU0FBU25wQixPQUFRcWQsRUFBSTZFLEVBQUc3RSxJQUFLLEtBQy9DaU4sRUFBUUssRUFBTXhCLFNBQVM5TCxHQUN6QmlDLE1BQU1nTCxFQUFNcHRCLE9BQ2RraUIsUUFBUWtMLEVBQU1qQixLQUFROUosT0FBTzBnQixJQUF3QixRQUFkM1YsRUFBTXB0QixjQUNyQ290QixFQUFPakIsRUFBSTRXLElBUzNCLFNBQVNDLHFCQUFzQjNrQyxHQUN6Qm1DLFdBQVNuQyxFQUFLNGtDLGlCQUNQNWtDLEVBQUs0a0MsT0FFWnppQyxXQUFTbkMsRUFBSzZrQyxpQkFDUDdrQyxFQUFLNmtDLE9BTWxCLFNBQVNDLFdBQVlsWixLQUNoQm1aLE9BQVMsT0FDVC9GLGFBQWUsU0FDWjV3QixFQUFVd2QsRUFBR1EsU0FDYjRZLEVBQWNwWixFQUFHeVksT0FBU2oyQixFQUFRNjJCLGFBQ2xDdEQsRUFBZ0JxRCxHQUFlQSxFQUFZalgsVUFDOUM0UCxPQUFTdEIsYUFBYWp1QixFQUFRODJCLGdCQUFpQnZELEtBQy9DakUsYUFBZS9aLGNBS2Y4ZCxZQUFNL2EsRUFBR1ksRUFBR3JCLEVBQUcxRCxVQUFNcGlCLGNBQWN5ckIsRUFBSWxGLEVBQUdZLEVBQUdyQixFQUFHMUQsR0FBRyxNQUduRHFiLHdCQUFrQmxYLEVBQUdZLEVBQUdyQixFQUFHMUQsVUFBTXBpQixjQUFjeXJCLEVBQUlsRixFQUFHWSxFQUFHckIsRUFBRzFELEdBQUcsUUFJNUQ0aUIsRUFBYUgsR0FBZUEsRUFBWWhsQyx1QkFJMUI0ckIsRUFBSSxTQUFVdVosR0FBY0EsRUFBV2pLLE9BQVN2WCx3QkFDL0R5aEIsMEJBQTRCamEsS0FBSyxzQkFBdUJTLEtBQ3hELHFCQUNlQSxFQUFJLGFBQWN4ZCxFQUFRaTNCLGtCQUFvQjFoQix3QkFDN0R5aEIsMEJBQTRCamEsS0FBSywwQkFBMkJTLEtBQzVELEdBSVAvSixJQThPSWhELE9BOU9BeW1CLHlCQUEyQixLQUUvQixTQUFTQyxZQUFhQyx3QkFFQ0EsRUFBSXZrQyxhQUVyQkEsVUFBVXdrQyxVQUFZLFNBQVUzZixVQUMzQmtTLFNBQVNsUyxFQUFJam9CLFNBR2xCb0QsVUFBVWlkLFFBQVUsZUFnQmxCa1IsRUFmRXhELEVBQUsvdEIsT0FDc0IrdEIsRUFBR1EscUNBRWhDNlksTUFDQ3ZILGFBQWVqQixxQkFDaEJ3SSxFQUFhamxDLEtBQUt1aEMsWUFDbEIzVixFQUFHK1IsT0FDSC9SLEVBQUc4UixpQkFNSjJHLE9BQVNZLCtCQU9pQnJaLElBQ25CME4sRUFBTzUzQixLQUFLa3FCLEVBQUc0TixhQUFjNU4sRUFBR2dTLGdCQUN4QyxNQUFPLzdCLGtCQUNLQSxFQUFHK3BCLEVBQUksVUFJZkEsRUFBR1EsU0FBU3NaLGtCQUVKOVosRUFBR1EsU0FBU3NaLFlBQVloa0MsS0FBS2txQixFQUFHNE4sYUFBYzVOLEVBQUdnUyxlQUFnQi83QixHQUN6RSxNQUFPQSxlQUNLQSxFQUFHK3BCLEVBQUksaUJBQ1hBLEVBQUdtWixjQUdMblosRUFBR21aLHdDQUdjLFlBR3pCeC9CLE1BQU1tQyxRQUFRMG5CLElBQTJCLElBQWpCQSxFQUFNM3FCLFdBQ3hCMnFCLEVBQU0sSUFHVkEsYUFBaUJ6QixRQUNqQnBvQixNQUFNbUMsUUFBUTBuQixTQUVkLHVHQUVBeEQsS0FHSW9ELHNCQUdKWCxPQUFTNFcsRUFDUjdWLEdBTVgsU0FBU3VXLFdBQVlDLEVBQU1DLFVBRXZCRCxFQUFLRSxZQUNKOWEsV0FBMEMsV0FBN0I0YSxFQUFLN2tDLE9BQU9NLGtCQUVuQnVrQyxFQUFLdm9CLFNBRVBsYixXQUFTeWpDLEdBQ1pDLEVBQUs1ZSxPQUFPMmUsR0FDWkEsRUFHTixTQUFTM0MsdUJBQ1A4QyxFQUNBL2xDLEVBQ0ErdEIsRUFDQUgsRUFDQWpzQixPQUVNc3RCLEVBQU9ELDRCQUNSSixhQUFlbVgsSUFDZmxYLGdCQUFjN3VCLFVBQU0rdEIsV0FBU0gsTUFBVWpzQixHQUNyQ3N0QixFQUdULFNBQVMrVCxzQkFDUCtDLEVBQ0FoRCxNQUVJL2UsT0FBTytoQixFQUFRaG1DLFFBQVVna0IsTUFBTWdpQixFQUFRQyxrQkFDbENELEVBQVFDLGFBR2JqaUIsTUFBTWdpQixFQUFRRSxpQkFDVEYsRUFBUUUsWUFHYmppQixPQUFPK2hCLEVBQVFHLFVBQVluaUIsTUFBTWdpQixFQUFRSSxvQkFDcENKLEVBQVFJLGdCQUdYQyxFQUFRZCw2QkFDVnZoQixNQUFNZ2lCLEVBQVFNLFFBR1gsS0FDQ0EsRUFBU04sRUFBUU0sUUFBVUQsR0FDN0JFLEdBQU8sRUFFTEMsV0FBZUMsT0FDZDNrQixJQUFJQyxFQUFJLEVBQUc2RSxFQUFJMGYsRUFBTzVoQyxPQUFRcWQsRUFBSTZFLEVBQUc3RSxNQUNoQ0EsR0FBSTJrQixlQUdWRCxNQUNLL2hDLE9BQVMsSUFJZDZULEVBQVVpUSxjQUFNbEIsS0FFWjRlLFNBQVdOLFdBQVd0ZSxFQUFLMGIsR0FHOUJ1RCxJQUdJN2hDLE9BQVMsS0FGSixLQU1WOFosRUFBU2dLLGNBQUttZSxRQUVoQixzQ0FBc0M3N0IsT0FBT2s3QixJQUM1Q1csZUFBc0JBLEVBQVcsS0FFaEMzaUIsTUFBTWdpQixFQUFRQyxlQUNSam1DLE9BQVEsS0FDSixNQUlWc25CLEVBQU0wZSxFQUFRenRCLEVBQVNpRyxVQUV6QnBjLFdBQVNrbEIsS0FDUHpDLFVBQVV5QyxHQUVSeEQsUUFBUWtpQixFQUFRRSxhQUNkdm1DLEtBQUs0WSxFQUFTaUcsR0FFWHFHLFVBQVV5QyxFQUFJc2YsZUFDbkJBLFVBQVVqbkMsS0FBSzRZLEVBQVNpRyxHQUV4QndGLE1BQU1zRCxFQUFJdG5CLFdBQ0ppbUMsVUFBWUwsV0FBV3RlLEVBQUl0bkIsTUFBT2dqQyxJQUd4Q2hmLE1BQU1zRCxFQUFJNmUsYUFDSkMsWUFBY1IsV0FBV3RlLEVBQUk2ZSxRQUFTbkQsR0FDNUIsSUFBZDFiLEVBQUl1ZixRQUNFVixTQUFVLHdCQUdacmlCLFFBQVFraUIsRUFBUUUsV0FBYXBpQixRQUFRa2lCLEVBQVFobUMsV0FDdkNtbUMsU0FBVSxLQUNOLEtBRWI3ZSxFQUFJdWYsT0FBUyxNQUloQjdpQixNQUFNc0QsRUFBSXdmLGdDQUVOaGpCLFFBQVFraUIsRUFBUUUseUJBRUo1ZSxFQUFJd2YsZ0JBR25CeGYsRUFBSXdmLGNBS04sRUFFQWQsRUFBUUcsUUFDWEgsRUFBUUksWUFDUkosRUFBUUUsV0FuRkpJLE9BQU92N0IsS0FBS3M3QixHQXlGeEIsU0FBU3RYLG1CQUFvQkcsVUFDcEJBLEVBQUtSLFdBQWFRLEVBQUtMLGFBS2hDLFNBQVNrWSx1QkFBd0JsWixNQUMzQnJvQixNQUFNbUMsUUFBUWttQixPQUNYL0wsSUFBSUMsRUFBSSxFQUFHQSxFQUFJOEwsRUFBU25wQixPQUFRcWQsSUFBSyxLQUNsQ21FLEVBQUkySCxFQUFTOUwsTUFDZmlDLE1BQU1rQyxLQUFPbEMsTUFBTWtDLEVBQUVrSSxtQkFBcUJXLG1CQUFtQjdJLFdBQ3hEQSxHQVVmLFNBQVM4Z0IsV0FBWW5iLEtBQ2hCb2IsUUFBVXJtQyxPQUFPb1QsT0FBTyxRQUN4Qmt6QixlQUFnQixNQUViNUYsRUFBWXpWLEVBQUdRLFNBQVNpWixpQkFDMUJoRSw0QkFDdUJ6VixFQUFJeVYsR0FNakMsU0FBU3BzQixJQUFLMEosRUFBT21ILFVBQ1pvaEIsSUFBSXZvQixFQUFPbUgsR0FHcEIsU0FBU3FoQixTQUFVeG9CLEVBQU9tSCxVQUNqQnNoQixLQUFLem9CLEVBQU9tSCxHQUdyQixTQUFTNFUsa0JBQW1CL2IsRUFBT21ILE9BQzNCdWhCLEVBQVV4b0IsY0FDVCxTQUFTeW9CLElBRUYsT0FEQXhoQixFQUFHbGhCLE1BQU0sS0FBTVMsY0FFakIraEMsS0FBS3pvQixFQUFPMm9CLElBSzFCLFNBQVNDLHlCQUNQM2IsRUFDQXlWLEVBQ0FtRyxVQUVTNWIsa0JBQ095VixFQUFXbUcsTUFBb0J2eUIsSUFBS2t5QixTQUFVek0sa0JBQW1COU8sZUFDeEV0cUIsRUFHWCxTQUFTbW1DLFlBQWFqQyxPQUNka0MsRUFBUyxXQUNYem1DLFVBQVVpbUMsSUFBTSxTQUFVdm9CLEVBQU9tSCxPQUM3QjhGLEVBQUsvdEIsUUFDUDBILE1BQU1tQyxRQUFRaVgsT0FDWGtELElBQUlDLEVBQUksRUFBRzZFLEVBQUloSSxFQUFNbGEsT0FBUXFkLEVBQUk2RSxFQUFHN0UsTUFDcENvbEIsSUFBSXZvQixFQUFNbUQsR0FBSWdFLFFBR2xCOEYsRUFBR29iLFFBQVFyb0IsS0FBV2lOLEVBQUdvYixRQUFRcm9CLFFBQWM3VCxLQUFLZ2IsR0FHakQ0aEIsRUFBT2xrQyxLQUFLbWIsT0FDWHNvQixlQUFnQixVQUdoQnJiLEtBR0wzcUIsVUFBVTBtQyxNQUFRLFNBQVVocEIsRUFBT21ILE9BQy9COEYsRUFBSy90QixjQUNGMDhCLE1BQ0o2TSxLQUFLem9CLEVBQU80YixLQUNaMzFCLE1BQU1nbkIsRUFBSXZtQixvQkFFWnlnQixHQUFLQSxJQUNMb2hCLElBQUl2b0IsRUFBTzRiLEdBQ1AzTyxLQUdMM3FCLFVBQVVtbUMsS0FBTyxTQUFVem9CLEVBQU9tSCxPQUM5QjhGLEVBQUsvdEIsU0FFTndILFVBQVVaLGdCQUNWdWlDLFFBQVVybUMsT0FBT29ULE9BQU8sTUFDcEI2WCxLQUdMcm1CLE1BQU1tQyxRQUFRaVgsR0FBUSxLQUNuQmtELElBQUlDLEVBQUksRUFBRzZFLEVBQUloSSxFQUFNbGEsT0FBUXFkLEVBQUk2RSxFQUFHN0UsTUFDcENzbEIsS0FBS3pvQixFQUFNbUQsR0FBSWdFLFVBRWI4RixNQVlMcU0sRUFURTJQLEVBQU1oYyxFQUFHb2IsUUFBUXJvQixPQUNsQmlwQixTQUNJaGMsTUFFSjlGLFdBQ0FraEIsUUFBUXJvQixHQUFTLEtBQ2JpTixVQUlMOUosRUFBSThsQixFQUFJbmpDLE9BQ0xxZCxXQUNBOGxCLEVBQUk5bEIsTUFDRWdFLEdBQU1tUyxFQUFHblMsS0FBT0EsRUFBSSxHQUN6QnJWLE9BQU9xUixFQUFHLGdCQUlYOEosS0FHTDNxQixVQUFVNG1DLE1BQVEsU0FBVWxwQixPQUN4QmlOLEVBQUsvdEIsS0FFSGlxQyxFQUFpQm5wQixFQUFNMEcsY0FDekJ5aUIsSUFBbUJucEIsR0FBU2lOLEVBQUdvYixRQUFRYyxRQUV2QyxVQUFVQSwrQkFDUHhjLG9CQUFvQk0sMENBQTBDak4sbUtBR3JDMkgsVUFBVTNILG9CQUF1QkEsWUFJL0RpcEIsRUFBTWhjLEVBQUdvYixRQUFRcm9CLE1BQ2pCaXBCLEVBQUssR0FDREEsRUFBSW5qQyxPQUFTLEVBQUlzaUIsVUFBUTZnQixHQUFPQSxVQUNoQzlpQyxFQUFPaWlCLFVBQVExaEIsVUFBVyxHQUMxQm94QixFQUFPLHNCQUFzQjlYLE1BQzFCbUQsRUFBSSxFQUFHNkUsRUFBSWloQixFQUFJbmpDLE9BQVFxZCxFQUFJNkUsRUFBRzdFLDRCQUNiOGxCLEVBQUk5bEIsR0FBSThKLEVBQUk5bUIsRUFBTThtQixFQUFJNkssVUFHM0M3SyxHQU1YL0osSUFBSTJnQixlQUFpQixLQUNqQjRDLDBCQUEyQixFQUUvQixTQUFTMkMsa0JBQWtCbmMsT0FDbkJvYyxFQUFxQnhGLHFDQUNWNVcsNEJBRUVvYyxHQUlyQixTQUFTQyxjQUFlcmMsT0FDaEJ4ZCxFQUFVd2QsRUFBR1EsU0FHZmlDLEVBQVNqZ0IsRUFBUWlnQixVQUNqQkEsSUFBV2pnQixFQUFRaTFCLFNBQVUsTUFDeEJoVixFQUFPakMsU0FBU2lYLFVBQVloVixFQUFPNUIsV0FDL0I0QixFQUFPNUIsVUFFWHliLFVBQVVwOUIsS0FBSzhnQixLQUdyQmEsUUFBVTRCLElBQ1ZwQyxNQUFRb0MsRUFBU0EsRUFBT3BDLE1BQVFMLElBRWhDc2MsZUFDQUMsV0FFQUMsU0FBVyxPQUNYQyxVQUFZLE9BQ1pDLGlCQUFrQixJQUNsQjNGLFlBQWEsSUFDYlIsY0FBZSxJQUNmb0csbUJBQW9CLEVBR3pCLFNBQVNDLGVBQWdCaEQsS0FDbkJ2a0MsVUFBVXduQyxRQUFVLFNBQVVyWixFQUFPOFMsT0FDakN0VyxFQUFLL3RCLEtBQ0w2cUMsRUFBUzljLEVBQUcrYyxJQUNaQyxFQUFZaGQsRUFBR21aLE9BQ2Y4RCxFQUF3QmQsa0JBQWtCbmMsS0FDN0NtWixPQUFTM1YsSUFRUHVaLElBTEFDLEVBS01oZCxFQUFHa2QsVUFBVUYsRUFBV3haLEdBSHhCeEQsRUFBR2tkLFVBQVVsZCxFQUFHK2MsSUFBS3ZaLEVBQU84UyxHQUFXLE9BTzlDd0csTUFDS0ssUUFBVSxNQUVmbmQsRUFBRytjLFFBQ0ZBLElBQUlJLFFBQVVuZCxHQUdmQSxFQUFHeVksUUFBVXpZLEVBQUdhLFNBQVdiLEVBQUd5WSxTQUFXelksRUFBR2EsUUFBUXNZLFdBQ25EdFksUUFBUWtjLElBQU0vYyxFQUFHK2MsUUFNcEIxbkMsVUFBVXdsQyxhQUFlLFdBQ2hCNW9DLEtBQ0p1cUMsVUFESXZxQyxLQUVOdXFDLFNBQVM3YSxZQUladHNCLFVBQVUyaEMsU0FBVyxlQUNqQmhYLEVBQUsvdEIsU0FDUCt0QixFQUFHMmMsNEJBR0UzYyxFQUFJLG1CQUNWMmMsbUJBQW9CLE1BRWpCbGEsRUFBU3pDLEVBQUdhLFNBQ2Q0QixHQUFXQSxFQUFPa2EsbUJBQXNCM2MsRUFBR1EsU0FBU2lYLGlCQUMvQ2hWLEVBQU82WixVQUFXdGMsR0FHdkJBLEVBQUd3YyxZQUNGQSxTQUFTWSxtQkFFVmxuQixFQUFJOEosRUFBR3FkLFVBQVV4a0MsT0FDZHFkLE9BQ0ZtbkIsVUFBVW5uQixHQUFHa25CLFdBSWRwZCxFQUFHc2QsTUFBTXRaLFVBQ1JzWixNQUFNdFosT0FBT1EsWUFHZitSLGNBQWUsSUFFZjJHLFVBQVVsZCxFQUFHbVosT0FBUSxlQUVmblosRUFBSSxlQUVWd2IsT0FFQ3hiLEVBQUcrYyxRQUNGQSxJQUFJSSxRQUFVLE1BR2ZuZCxFQUFHeVksV0FDRkEsT0FBT2hXLE9BQVMsUUFLekIsU0FBUzhhLGVBQ1B2ZCxFQUNBeE4sRUFDQThqQixPQXlCSWtILFdBdkJEVCxJQUFNdnFCLEVBQ0p3TixFQUFHUSxTQUFTa04sV0FDWmxOLFNBQVNrTixPQUFTdEssaUJBR2RwRCxFQUFHUSxTQUFTamUsVUFBK0MsTUFBbkN5ZCxFQUFHUSxTQUFTamUsU0FBU2lZLE9BQU8sSUFDdkR3RixFQUFHUSxTQUFTaE8sSUFBTUEsT0FFaEIsd0xBR0F3TixRQUlBLHNFQUNBQSxhQUtDQSxFQUFJLGlCQUlUeE8sT0FBT2liLGFBQWVuQixvQkFFaEJoNUIsRUFBTzB0QixFQUFHeWQsTUFDVnZjLEVBQUtsQixFQUFHMGQsS0FDUjlRLEVBQVcsa0JBQWtCMUwsRUFDN0IyTCxFQUFTLGdCQUFnQjNMLE9BRTFCMEwsT0FDQ3BKLEVBQVF4RCxFQUFHMU4sZUFDWnVhLGtCQUNVdjZCLFlBQWVzNkIsRUFBVUMsUUFFbkNELEtBQ0ZpUSxRQUFRclosRUFBTzhTLFFBQ2J6SixrQkFDVXY2QixXQUFjczZCLEVBQVVDLGlCQUlwQ2dRLFFBQVE3YyxFQUFHMU4sVUFBV2drQixRQU96QnFILFFBQVEzZCxFQUFJd2QsRUFBaUJuc0IsMEJBRXpCMk8sRUFBRytXLGFBQWUvVyxFQUFHdVcsdUJBQ2R2VyxFQUFJLG1CQUdoQixNQUNTLEVBSUssTUFBYkEsRUFBR3lZLFdBQ0YxQixZQUFhLFdBQ1AvVyxFQUFJLFlBRVJBLEVBR1QsU0FBUzRkLHFCQUNQNWQsRUFDQTJHLEVBQ0E4TyxFQUNBMkQsRUFDQXlFLDZCQUc2QixNQVN2QkMsS0FDSDFFLEVBQVlobEMsS0FBS3VoQyxjQUFnQnlELEVBQVlobEMsS0FBS3VoQyxZQUFZMUUsU0FDOURqUixFQUFHOFIsZUFBaUIvWixjQUFnQmlJLEVBQUc4UixhQUFhYixTQU1qRDhNLEtBQ0pGLEtBQ0dyZCxTQUFTOFkseUJBSVg5WSxTQUFTNlksYUFBZUQsSUFDeEJYLE9BQVNXLEVBRVJwWixFQUFHbVosV0FDRkEsT0FBTzFXLE9BQVMyVyxLQUVsQjVZLFNBQVM4WSxnQkFBa0J1RSxJQUszQkcsT0FBUzVFLEVBQVlobEMsS0FBS2s3QixPQUFTdlgsY0FDbkNrbUIsV0FBYXhJLEdBQWExZCxZQUd6QjRPLEdBQWEzRyxFQUFHUSxTQUFTL25CLE1BQU8sa0JBQ2xCLFdBQ1ZBLEVBQVF1bkIsRUFBR21KLE9BQ1grVSxFQUFXbGUsRUFBR1EsU0FBUzJkLGNBQ3BCam9CLEVBQUksRUFBR0EsRUFBSWdvQixFQUFTcmxDLE9BQVFxZCxJQUFLLEtBQ2xDbmUsRUFBTW1tQyxFQUFTaG9CLEdBQ2Z3UyxFQUFjMUksRUFBR1EsU0FBUy9uQixRQUMxQlYsR0FBTzB3QixhQUFhMXdCLEVBQUsyd0IsRUFBYS9CLEVBQVczRyxvQkFFekMsS0FFYlEsU0FBU21HLFVBQVlBLElBSWQ4TyxHQUFhMWQsZ0JBQ25CNmpCLEVBQWU1YixFQUFHUSxTQUFTaVosbUJBQzlCalosU0FBU2laLGlCQUFtQmhFLDJCQUNOelYsRUFBSXlWLEVBQVdtRyxHQUdwQ21DLE1BQ0NoTSxPQUFTdEIsYUFBYW9OLEVBQWdCekUsRUFBWWpYLFdBQ2xEMFksMENBSXdCLEVBSS9CLFNBQVN1RCxpQkFBa0JwZSxRQUNsQkEsSUFBT0EsRUFBS0EsRUFBR2EsYUFDaEJiLEVBQUd5YyxpQkFBa0IsU0FFcEIsRUFHVCxTQUFTNEIsdUJBQXdCcmUsRUFBSXNlLE1BQy9CQSxRQUNDNUIsaUJBQWtCLEVBQ2pCMEIsaUJBQWlCcGUsZUFHaEIsR0FBSUEsRUFBRzBjLDBCQUdWMWMsRUFBR3ljLFdBQThCLE9BQWpCemMsRUFBR3ljLFVBQW9CLEdBQ3RDQSxXQUFZLE1BQ1Z4bUIsSUFBSUMsRUFBSSxFQUFHQSxFQUFJOEosRUFBR3NjLFVBQVV6akMsT0FBUXFkLDJCQUNoQjhKLEVBQUdzYyxVQUFVcG1CLGFBRTdCOEosRUFBSSxjQUlqQixTQUFTdWUseUJBQTBCdmUsRUFBSXNlLFFBQ2pDQSxNQUNDNUIsaUJBQWtCLEVBQ2pCMEIsaUJBQWlCcGUsS0FJbEJBLEVBQUd5YyxXQUFXLEdBQ2RBLFdBQVksTUFDVnhtQixJQUFJQyxFQUFJLEVBQUdBLEVBQUk4SixFQUFHc2MsVUFBVXpqQyxPQUFRcWQsNkJBQ2Q4SixFQUFHc2MsVUFBVXBtQixhQUUvQjhKLEVBQUksZ0JBSWpCLFNBQVN3ZSxTQUFVeGUsRUFBSTZHLG9CQUdmNEcsRUFBV3pOLEVBQUdRLFNBQVNxRyxHQUN2QmdFLEVBQU9oRSxhQUNUNEcsTUFDR3hYLElBQUlDLEVBQUksRUFBR3VvQixFQUFJaFIsRUFBUzUwQixPQUFRcWQsRUFBSXVvQixFQUFHdm9CLDRCQUNsQnVYLEVBQVN2WCxHQUFJOEosRUFBSSxLQUFNQSxFQUFJNkssR0FHbkQ3SyxFQUFHcWIsaUJBQ0ZZLE1BQU0sUUFBVXBWLGVBT3ZCL08sSUFBTTRtQixpQkFBbUIsSUFFbkJDLFNBQ0FDLHFCQUNGLzRCLE9BQ0FnNUIsWUFDQUMsU0FBVSxFQUNWQyxVQUFXLEVBQ1hubUMsTUFBUSxFQUtaLFNBQVNvbUMsNEJBQ0NMLE1BQU05bEMsT0FBUytsQyxrQkFBa0IvbEMsT0FBUyw2QkFLeENrbUMsVUFBVyxFQVF2QjlvQixJQUFJZ3BCLHNCQUF3QixFQUd4QkMsT0FBUy9rQyxLQUFLQyxJQWdCbEIsU0FBUytrQywwQkFHSEMsRUFBU2xlLDRCQUZXZ2UsbUJBQ2IsUUFXTGh2QixjQUFNNEssRUFBR1ksVUFBTVosRUFBRW9HLEdBQUt4RixFQUFFd0YsS0FJekJ0b0IsTUFBUSxFQUFHQSxNQUFRK2xDLE1BQU05bEMsT0FBUUQsY0FDMUIrbEMsTUFBTS9sQyxRQUNKeW1DLFVBQ0ZBLFdBRUxELEVBQVFsZSxPQUNUQSxHQUFNLE9BQ0ZvZSxNQUVPLE1BQVh6NUIsSUFBSXFiLGNBQ0dBLElBQU8yZCxTQUFTM2QsSUFBTyxHQUFLLEVBQ2pDMmQsU0FBUzNkLEdBQU13ZCxrQkFBa0IsTUFFakMseUNBQ0VVLEVBQVFHLG9DQUMyQkgsRUFBUUksZUFDdkMsbUNBRU5KLEVBQVFwZixjQVFWeWYsRUFBaUJiLGtCQUFrQm43QixRQUNuQ2k4QixFQUFlZixNQUFNbDdCLGlEQUtSZzhCLG9CQUNGQyxHQUliMWdCLFVBQVl4TixPQUFPd04sbUJBQ1oyZ0IsS0FBSyxTQUlsQixTQUFTQyxpQkFBa0JqQixXQUNyQnpvQixFQUFJeW9CLEVBQU05bEMsT0FDUHFkLEtBQUssS0FDSmtwQixFQUFVVCxFQUFNem9CLEdBQ2hCOEosRUFBS29mLEVBQVFwZixHQUNmQSxFQUFHd2MsV0FBYTRDLEdBQVdwZixFQUFHK1csYUFBZS9XLEVBQUd1Vyx1QkFDekN2VyxFQUFJLFlBU25CLFNBQVM2Zix3QkFBeUI3ZixLQUc3QnljLFdBQVksb0JBQ0d2OUIsS0FBSzhnQixHQUd6QixTQUFTOGYsbUJBQW9CbkIsT0FDdEIxb0IsSUFBSUMsRUFBSSxFQUFHQSxFQUFJeW9CLEVBQU05bEMsT0FBUXFkLE1BQzFCQSxHQUFHdW1CLFdBQVkseUJBQ0VrQyxFQUFNem9CLElBQUksR0FTckMsU0FBUzZwQixhQUFjWCxPQUNmbGUsRUFBS2tlLEVBQVFsZSxNQUNKLE1BQVhyYixJQUFJcWIsR0FBYSxRQUNmQSxJQUFNLEVBQ0w2ZCxTQUVFLFNBR0Q3b0IsRUFBSXlvQixNQUFNOWxDLE9BQVMsRUFDaEJxZCxFQUFJdGQsT0FBUytsQyxNQUFNem9CLEdBQUdnTCxHQUFLa2UsRUFBUWxlLGNBR3BDcmMsT0FBT3FSLEVBQUksRUFBRyxFQUFHa3BCLGNBUmpCbGdDLEtBQUtrZ0MsT0FXUk4sUUFBUyxhQUNGLEdBRUx0dEIsT0FBT2tRLGlEQUlIeWQsdUJBOUhYMWhCLFdBQWF5aEIsU0FBVzVxQyxTQUFTMHJDLFlBQVksU0FBU0MscUNBSXpDeFQsWUFBWXJ5QixRQW1JN0I2YixJQUFJaXFCLE1BQVEsRUFPTnZDLFFBbUJKLHlCQU9PM2QsR0FBS0EsRUFDTm1nQixNQUNDM0QsU0FBV3ZxQyxRQUVib3JDLFVBQVVuK0IsS0FBS2pOLE1BRWR1USxRQUNHNDlCLE9BQVM1OUIsRUFBUTQ5QixVQUNqQmIsT0FBUy84QixFQUFRKzhCLFVBQ2pCYyxPQUFTNzlCLEVBQVE2OUIsVUFDakIzRixPQUFTbDRCLEVBQVFrNEIsVUFDakIyRSxPQUFTNzhCLEVBQVE2OEIsYUFFakJlLEtBQU9udUMsS0FBS3N0QyxLQUFPdHRDLEtBQUtvdUMsS0FBT3B1QyxLQUFLeW9DLE1BQU8sT0FFN0NyTyxHQUFLQSxPQUNMbkwsS0FBT2dmLFdBQ1BJLFFBQVMsT0FDVEMsTUFBUXR1QyxLQUFLb3VDLFVBQ2JHLGFBQ0FDLGdCQUNBQyxPQUFTLElBQUl2aEIsVUFDYndoQixVQUFZLElBQUl4aEIsVUFDaEJxZ0IsV0FBYW9CLEVBQVFyckMsV0FFSCxtQkFBWnFyQyxPQUNKdGIsT0FBU3NiLFFBRVR0YixPQUFTakksVUFBVXVqQixHQUNuQjN1QyxLQUFLcXpCLGNBQ0hBLE9BQVNqVSxzQ0FFY3V2QiwyR0FPM0JockMsTUFBUTNELEtBQUtvdUMsVUFDZDNxQyxFQUNBekQsS0FBSzBULHlCQU1YQSxtQkFFTS9QLGFBRE8zRCxVQUVMK3RCLEVBQUsvdEIsS0FBSyt0QixTQUVOL3RCLEtBQUtxekIsT0FBT3h2QixLQUFLa3FCLEVBQUlBLEdBQzdCLE1BQU8vcEIsT0FDSGhFLEtBQUtzdEMsV0FHRHRwQyxjQUZNQSxFQUFHK3BCLHlCQUEyQi90QixLQUFLdXRDLHdCQU83Q3Z0QyxLQUFLbXVDLGVBQ0V4cUMsb0JBR05pckMscUJBRUFqckMscUJBTVQ0ckIsZ0JBQVEwQyxPQUNBaEQsRUFBS2dELEVBQUloRCxHQUNWanZCLEtBQUswdUMsVUFBVTk2QixJQUFJcWIsVUFDakJ5ZixVQUFVdDNCLElBQUk2WCxRQUNkdWYsUUFBUXZoQyxLQUFLZ2xCLEdBQ2JqeUIsS0FBS3l1QyxPQUFPNzZCLElBQUlxYixNQUNmRSxPQUFPbnZCLDBCQVFqQjR1QywrQkFDTTNxQixFQUFJamtCLEtBQUt1dUMsS0FBSzNuQyxPQUNYcWQsS0FBSyxLQUNKZ08sRUFBTWp5QixLQUFLdXVDLEtBQUt0cUIsR0FDakJqa0IsS0FBSzB1QyxVQUFVOTZCLElBQUlxZSxFQUFJaEQsT0FDdEJJLFVBQVVydkIsVUFHZDZ1QyxFQUFNN3VDLEtBQUt5dUMsWUFDVkEsT0FBU3p1QyxLQUFLMHVDLGVBQ2RBLFVBQVlHLE9BQ1pILFVBQVV0N0IsVUFDVHBULEtBQUt1dUMsVUFDTkEsS0FBT3Z1QyxLQUFLd3VDLGFBQ1pBLFFBQVVLLE9BQ1ZMLFFBQVE1bkMsT0FBUyxxQkFPeEI4b0Isa0JBRU0xdkIsS0FBS291QyxVQUNGRSxPQUFRLEVBQ0p0dUMsS0FBS3lvQyxVQUNUNEUsbUJBRVFydEMseUJBUWpCcXRDLGtCQUNNcnRDLEtBQUtxdUMsT0FBUSxLQUNUMXFDLEVBQVEzRCxLQUFLMFQsYUFFUDFULEtBQUsyRCxrQkFJTkEsU0FDSndxQyxLQUNMLEtBRU1XLEVBQVc5dUMsS0FBSzJELGNBQ2pCQSxNQUFRQSxFQUNUM0QsS0FBS3N0QyxjQUVBbFQsR0FBR3YyQixLQUFLN0QsS0FBSyt0QixHQUFJcHFCLEVBQU9tckMsR0FDN0IsTUFBTzlxQyxlQUNLQSxFQUFHaEUsS0FBSyt0Qiw0QkFBNkIvdEIsS0FBS3V0QywwQkFHbkRuVCxHQUFHdjJCLEtBQUs3RCxLQUFLK3RCLEdBQUlwcUIsRUFBT21yQyx3QkFVckM3OUIseUJBQ090TixNQUFRM0QsS0FBSzBULFdBQ2I0NkIsT0FBUSxxQkFNZmhmLDBCQUNNckwsRUFBSWprQixLQUFLdXVDLEtBQUszbkMsT0FDWHFkLFVBQ0FzcUIsS0FBS3RxQixHQUFHcUwsNEJBT2pCNmIsdUJBQ01uckMsS0FBS3F1QyxPQUFRLENBSVZydUMsS0FBSyt0QixHQUFHMmMsMEJBQ0oxcUMsS0FBSyt0QixHQUFHcWQsVUFBV3ByQyxjQUV4QmlrQixFQUFJamtCLEtBQUt1dUMsS0FBSzNuQyxPQUNYcWQsVUFDQXNxQixLQUFLdHFCLEdBQUdvTCxVQUFVcnZCLFdBRXBCcXVDLFFBQVMsSUFPcEJ4b0IsSUFBTWtwQixzQ0FDUSxnQkFDRSxNQUNUM3ZCLFdBQ0FBLFFBR1AsU0FBUytmLE1BQU9uZSxFQUFRZ3VCLEVBQVdscEMsNEJBQ1I0TixJQUFNLGtCQUN0QjFULEtBQUtndkMsR0FBV2xwQyw2QkFFQXdOLElBQU0sU0FBc0JxVCxRQUM5Q3FvQixHQUFXbHBDLEdBQU82Z0IsVUFFbEIzZ0IsZUFBZWdiLEVBQVFsYixFQUFLaXBDLDBCQUdyQyxTQUFTRSxVQUFXbGhCLEtBQ2ZxZCxpQkFDR3plLEVBQU9vQixFQUFHUSxTQUNaNUIsRUFBS25tQixpQkFBaUJ1bkIsRUFBSXBCLEVBQUtubUIsT0FDL0JtbUIsRUFBS2tJLHFCQUFxQjlHLEVBQUlwQixFQUFLa0ksU0FDbkNsSSxFQUFLeHFCLGNBQ0U0ckIsV0FFREEsRUFBR3NkLFVBQVksR0FFckIxZSxFQUFLb0ksdUJBQXVCaEgsRUFBSXBCLEVBQUtvSSxVQUNyQ3BJLEVBQUtGLE9BQVNFLEVBQUtGLFFBQVVELHVCQUNyQnVCLEVBQUlwQixFQUFLRixPQUl2QixTQUFTeWlCLFVBQVduaEIsRUFBSW9oQixPQUNoQnphLEVBQVkzRyxFQUFHUSxTQUFTbUcsY0FDeEJsdUIsRUFBUXVuQixFQUFHbUosVUFHWGx5QixFQUFPK29CLEVBQUdRLFNBQVMyZCxhQUNuQmtELEdBQVVyaEIsRUFBR2EsUUFFZHdnQixvQkFDYSx1QkFHWG5pQyxLQUFLbkgsT0FDSm5DLEVBQVE2eUIsYUFBYTF3QixFQUFLcXBDLEVBQWN6YSxFQUFXM0csR0FHakRzaEIsRUFBZ0I1bUIsVUFBVTNpQixJQUM1QjRoQixvQkFBb0IybkIsSUFDcEI5dkIsT0FBTyt2QixlQUFlRCxjQUVsQkEsb0VBQ0p0aEIscUJBR2N2bkIsRUFBT1YsRUFBS25DLGFBQ3ZCeXJDLEdBQVc3SCwrQkFFWiwwTUFHK0J6aEMsTUFDL0Jpb0IsS0FRRmpvQixLQUFPaW9CLFNBQ0xBLEVBQUksU0FBVWpvQixRQTdCbkIrZixJQUFNL2YsS0FBT3FwQyxPQWdDbEI5YyxpQkFBZ0IsR0FHbEIsU0FBU2tkLFNBQVV4aEIsT0FDYjVyQixFQUFPNHJCLEVBQUdRLFNBQVNwc0IsS0FJbEI2TCxrQkFIRStmLEVBQUdzZCxNQUF3QixtQkFBVGxwQyxFQUNyQnF0QyxRQUFRcnRDLEVBQU00ckIsR0FDZDVyQixtQkFJQSw4R0FFQTRyQixZQUlFL29CLEVBQU9sQyxPQUFPa0MsS0FBSzdDLEdBQ25CcUUsRUFBUXVuQixFQUFHUSxTQUFTL25CLE1BQ3BCcXVCLEVBQVU5RyxFQUFHUSxTQUFTc0csUUFDeEI1USxFQUFJamYsRUFBSzRCLE9BQ05xZCxLQUFLLEtBQ0puZSxFQUFNZCxFQUFLaWYsR0FFWDRRLEdBQVc5TSxPQUFPOE0sRUFBUy91QixvQkFFaEJBLG1EQUNYaW9CLEdBSUZ2bkIsR0FBU3VoQixPQUFPdmhCLEVBQU9WLFFBRXZCLHNCQUFzQkEscUVBRXRCaW9CLEdBRVEvQyxXQUFXbGxCLFVBQ2Zpb0IsRUFBSSxRQUFTam9CLFdBSWYzRCxHQUFNLEdBR2hCLFNBQVNxdEMsUUFBU3J0QyxFQUFNNHJCLDJCQUliNXJCLEVBQUswQixLQUFLa3FCLEVBQUlBLEdBQ3JCLE1BQU8vcEIsc0JBQ0tBLEVBQUcrcEIsRUFBSSxrQ0FPdkJsSSxJQUFNNHBCLHdCQUEyQnJCLE1BQU0sR0FFdkMsU0FBU3NCLGFBQWMzaEIsRUFBSWdILE9BRW5CNGEsRUFBVzVoQixFQUFHNmhCLGtCQUFvQjlzQyxPQUFPb1QsT0FBTyxNQUVoRDI1QixFQUFRampCLHdCQUVUL0csSUFBTS9mLEtBQU9pdkIsRUFBVSxLQUNwQithLEVBQVUvYSxFQUFTanZCLEdBQ25CdXRCLEVBQTRCLG1CQUFaeWMsRUFBeUJBLEVBQVVBLEVBQVFwOEIsSUFDbkQsTUFBVjJmLG9EQUU0Q3Z0QixPQUM1Q2lvQixHQUlDOGhCLE1BRU0vcEMsR0FBTyxJQUFJNGxDLFFBQ2xCM2QsRUFDQXNGLEdBQVVqVSxPQUNWQSxPQUNBcXdCLHlCQU9FM3BDLEtBQU9pb0IsRUFHUGpvQixLQUFPaW9CLEVBQUd1TixxQ0FDbUJ4MUIsa0NBQW9DaW9CLEdBQzFEQSxFQUFHUSxTQUFTL25CLE9BQVNWLEtBQU9pb0IsRUFBR1EsU0FBUy9uQixzQ0FDbEJWLG9DQUFzQ2lvQixrQkFMeERBLEVBQUlqb0IsRUFBS2dxQyxJQVc5QixTQUFTQyxlQUNQL3VCLEVBQ0FsYixFQUNBZ3FDLE9BRU1FLEdBQWVwakIsb0JBQ0UsbUJBQVprakIsNEJBQ2dCcDhCLElBQU1zOEIsRUFDM0JDLHFCQUFxQm5xQyxHQUNyQm9xQyxvQkFBb0JKLDRCQUNDeDhCLElBQU04TCxrQ0FFTjFMLElBQU1vOEIsRUFBUXA4QixJQUNuQ3M4QixJQUFpQyxJQUFsQkYsRUFBUXQ0QixNQUNyQnk0QixxQkFBcUJucUMsR0FDckJvcUMsb0JBQW9CSixFQUFRcDhCLEtBQzlCMEwsZ0NBQ3FCOUwsSUFBTXc4QixFQUFReDhCLEtBQU84TCxRQUU1QzJ2Qix5QkFBeUJ6N0IsTUFBUThMLGtDQUNWOUwsSUFBTSxzQ0FFTHhOLDRDQUN0QjlGLGVBSUNnRyxlQUFlZ2IsRUFBUWxiLEVBQUtpcEMsMEJBR3JDLFNBQVNrQixxQkFBc0JucUMsVUFDdEIsZUFDQ3FuQyxFQUFVbnRDLEtBQUs0dkMsbUJBQXFCNXZDLEtBQUs0dkMsa0JBQWtCOXBDLE1BQzdEcW5DLFNBQ0VBLEVBQVFtQixTQUNGcjlCLFdBRU4rZCxJQUFJaE8sVUFDRXNPLFNBRUg2ZCxFQUFReHBDLE9BS3JCLFNBQVN1c0Msb0JBQW9Cam9CLFVBQ3BCLGtCQUNFQSxFQUFHcGtCLEtBQUs3RCxLQUFNQSxPQUl6QixTQUFTbXdDLFlBQWFwaUIsRUFBSThHLE9BQ2xCcnVCLEVBQVF1bkIsRUFBR1EsU0FBUy9uQixVQUNyQnFmLElBQU0vZixLQUFPK3VCLEVBRWMsbUJBQWpCQSxFQUFRL3VCLFNBRWYsV0FBV0EseUJBQXlCK3VCLEVBQVEvdUIsK0VBRTVDaW9CLEdBR0F2bkIsR0FBU3VoQixPQUFPdmhCLEVBQU9WLG9CQUVaQSwwQ0FDWGlvQixHQUdDam9CLEtBQU9pb0IsR0FBTy9DLFdBQVdsbEIsU0FFMUIsV0FBV0Esa0hBS2RBLEdBQStCLG1CQUFqQit1QixFQUFRL3VCLEdBQXNCc1osT0FBTzZKLEtBQUs0TCxFQUFRL3VCLEdBQU1pb0IsR0FJN0UsU0FBU3FpQixVQUFXcmlCLEVBQUl0QixPQUNqQjVHLElBQU0vZixLQUFPMm1CLEVBQU8sS0FDakJ1TSxFQUFVdk0sRUFBTTNtQixNQUNsQjRCLE1BQU1tQyxRQUFRbXZCLE9BQ1hoVixJQUFJQyxFQUFJLEVBQUdBLEVBQUkrVSxFQUFRcHlCLE9BQVFxZCxrQkFDcEI4SixFQUFJam9CLEVBQUtrekIsRUFBUS9VLHVCQUduQjhKLEVBQUlqb0IsRUFBS2t6QixJQUs3QixTQUFTcVgsY0FDUHRpQixFQUNBNGdCLEVBQ0EzVixFQUNBem9CLFVBRUl2QyxnQkFBY2dyQixPQUNOQSxJQUNBQSxFQUFRQSxTQUVHLGlCQUFaQSxNQUNDakwsRUFBR2lMLElBRVJqTCxFQUFHdWlCLE9BQU8zQixFQUFTM1YsRUFBU3pvQixHQUdyQyxTQUFTZ2dDLFdBQVk1SSxPQUliNkksT0FDUSxrQkFBcUJ4d0MsS0FBS3FyQyxRQUNsQ29GLE9BQ1Msa0JBQXFCendDLEtBQUtrM0IsV0FFL0I1akIsSUFBTSxnQkFFViwyRUFFQXRULFNBR0tzVCxJQUFNLGdCQUNSLHNCQUF1QnRULGNBR3pCZ0csZUFBZTJoQyxFQUFJdmtDLFVBQVcsUUFBU290QyxVQUN2Q3hxQyxlQUFlMmhDLEVBQUl2a0MsVUFBVyxTQUFVcXRDLEtBRTNDcnRDLFVBQVVzdEMsS0FBT3A5QixRQUNqQmxRLFVBQVV1dEMsUUFBVWxkLE1BRXBCcndCLFVBQVVrdEMsT0FBUyxTQUNyQjNCLEVBQ0F2VSxFQUNBN3BCLE1BR0l2QyxnQkFBY29zQixVQUNUaVcsY0FGRXJ3QyxLQUVnQjJ1QyxFQUFTdlUsRUFBSTdwQixNQUU5QkEsT0FDRis4QixNQUFPLE1BQ1RILEVBQVUsSUFBSXpCLFFBTlQxckMsS0FNcUIydUMsRUFBU3ZVLEVBQUk3cEIsTUFDekNBLEVBQVFxZ0MsZ0JBRUwvc0MsS0FUSTdELEtBU0ttdEMsRUFBUXhwQyxPQUNwQixNQUFPekIsZUFDS0EsRUFYTGxDLHdDQVdtRG10QyxFQUFRSSx1QkFHL0QsYUFDR3BDLGFBT2RubkIsSUFBSTZzQixNQUFRLEVBRVosU0FBU0MsVUFBV25KLEtBQ2R2a0MsVUFBVTJ0QyxNQUFRLFNBQVV4Z0MsT0FLMUJvcUIsRUFBVUMsRUFKUjdNLEVBQUsvdEIsT0FFUnlyQyxLQUFPb0YsUUFJTnR4QixPQUFPaWIsYUFBZW5CLFNBQ2Isa0JBQWtCdEwsRUFBRzBkLE9BQ3ZCLGdCQUFnQjFkLEVBQUcwZCxVQUN2QjlRLE1BSUpyTSxRQUFTLEVBRVIvZCxHQUFXQSxFQUFReWdDLG1DQUlDampCLEVBQUl4ZCxLQUV2QmdlLFNBQVdzSCxhQUNab2IsMEJBQTBCbGpCLEVBQUczZ0IsYUFDN0JtRCxNQUNBd2QsYUFLUUEsS0FHVG1qQixNQUFRbmpCLGdCQUNHQSxjQUNIQSxjQUNBQSxZQUNGQSxFQUFJLCtCQUNFQSxhQUNMQSxlQUNFQSxZQUNIQSxFQUFJLFdBR1R4TyxPQUFPaWIsYUFBZW5CLFNBQ3JCbVMsTUFBUS9kLG9CQUFvQk0sR0FBSSxRQUM5QjZNLGtCQUNVN00sRUFBR3lkLGNBQWM3USxFQUFVQyxJQUd4QzdNLEVBQUdRLFNBQVNoTyxNQUNYcWtCLE9BQU83VyxFQUFHUSxTQUFTaE8sS0FLNUIsU0FBUzR3QixzQkFBdUJwakIsRUFBSXhkLE9BQzVCb2MsRUFBT29CLEVBQUdRLFNBQVd6ckIsT0FBT29ULE9BQU82WCxFQUFHM2dCLFlBQVltRCxTQUVsRDQyQixFQUFjNTJCLEVBQVE2MkIsZUFDdkI1VyxPQUFTamdCLEVBQVFpZ0IsU0FDakI0VyxhQUFlRCxNQUVkaUssRUFBd0JqSyxFQUFZN1csbUJBQ3JDb0UsVUFBWTBjLEVBQXNCMWMsWUFDbEM4UyxpQkFBbUI0SixFQUFzQjVOLFlBQ3pDNkQsZ0JBQWtCK0osRUFBc0JyaEIsV0FDeEN2QixjQUFnQjRpQixFQUFzQnR0QyxJQUV2Q3lNLEVBQVFrckIsV0FDTEEsT0FBU2xyQixFQUFRa3JCLFNBQ2pCMkYsZ0JBQWtCN3dCLEVBQVE2d0IsaUJBSW5DLFNBQVM2UCwwQkFBMkI5akMsT0FDOUJvRCxFQUFVcEQsRUFBS29ELFdBQ2ZwRCxFQUFLa2tDLE1BQU8sS0FDUkMsRUFBZUwsMEJBQTBCOWpDLEVBQUtra0MsVUFFaERDLElBRHVCbmtDLEVBQUtta0MsYUFDUyxHQUdsQ0EsYUFBZUEsTUFFZEMsRUFBa0JDLHVCQUF1QnJrQyxHQUUzQ29rQyxVQUNLcGtDLEVBQUtza0MsY0FBZUYsTUFFbkJwa0MsRUFBS29ELFFBQVVzbEIsYUFBYXliLEVBQWNua0MsRUFBS3NrQyxnQkFDN0NweEMsU0FDRjYwQixXQUFXM2tCLEVBQVFsUSxNQUFROE0sV0FJbENvRCxFQUdULFNBQVNpaEMsdUJBQXdCcmtDLE9BQzNCdWtDLEVBQ0VDLEVBQVN4a0MsRUFBS29ELFFBQ2RxaEMsRUFBU3prQyxFQUFLMGtDLGtCQUNmaHNCLElBQU0vZixLQUFPNnJDLEVBQ1pBLEVBQU83ckMsS0FBUzhyQyxFQUFPOXJDLEtBQ3BCNHJDLFlBQ0k1ckMsR0FBTzZyQyxFQUFPN3JDLFdBR3BCNHJDLEVBR1QsU0FBUy9KLElBQUtwM0IsR0FDTnZRLGdCQUFnQjJuQyxVQUVmLHlFQUVGb0osTUFBTXhnQyxHQVdiLFNBQVN1aEMsUUFBU25LLEtBQ1pvSyxJQUFNLFNBQVVDLE9BQ1pDLEVBQW9CanlDLEtBQUtreUMsb0JBQXNCbHlDLEtBQUtreUMseUJBQ3RERCxFQUFpQm5xQixRQUFRa3FCLElBQVcsU0FDL0JoeUMsU0FJSGlILEVBQU9paUIsVUFBUTFoQixVQUFXLFlBQzNCMnFDLFFBQVFueUMsTUFDaUIsbUJBQW5CZ3lDLEVBQU9JLFVBQ1RBLFFBQVFyckMsTUFBTWlyQyxFQUFRL3FDLEdBQ0YsbUJBQVgrcUMsS0FDVGpyQyxNQUFNLEtBQU1FLEtBRUpnRyxLQUFLK2tDLEdBQ2ZoeUMsTUFNWCxTQUFTcXlDLFlBQWExSyxLQUNoQjJLLE1BQVEsU0FBVUEsZUFDZi9oQyxRQUFVc2xCLGFBQWE3MUIsS0FBS3VRLFFBQVMraEMsR0FDbkN0eUMsTUFNWCxTQUFTdXlDLFdBQVk1SyxLQU1mdFosSUFBTSxNQUNOQSxFQUFNLElBS05qRixPQUFTLFNBQVVxb0IsS0FDTEEsVUFDVmUsRUFBUXh5QyxLQUNSeXlDLEVBQVVELEVBQU1ua0IsSUFDaEJxa0IsRUFBY2pCLEVBQWNrQixRQUFVbEIsRUFBY2tCLGFBQ3RERCxFQUFZRCxVQUNQQyxFQUFZRCxPQUdmcHlDLEVBQU9veEMsRUFBY3B4QyxNQUFRbXlDLEVBQU1qaUMsUUFBUWxRLEtBQzdDQSx5QkFDb0JBLE9BR2xCdXlDLEVBQU0sU0FBdUJyaUMsUUFDNUJ3Z0MsTUFBTXhnQyxhQUVUbk4sVUFBWU4sT0FBT29ULE9BQU9zOEIsRUFBTXB2QyxZQUN0QmdLLFlBQWN3bEMsSUFDeEJ2a0IsSUFBTUEsTUFDTjlkLFFBQVVzbEIsYUFDWjJjLEVBQU1qaUMsUUFDTmtoQyxLQUVGLE1BQWVlLEVBS1hJLEVBQUlyaUMsUUFBUS9KLG1CQUNGb3NDLEdBRVZBLEVBQUlyaUMsUUFBUXdrQix5QkFDQzZkLEtBSWJ4cEIsT0FBU29wQixFQUFNcHBCLFNBQ2ZrcEIsTUFBUUUsRUFBTUYsUUFDZFAsSUFBTVMsRUFBTVQsZ0JBSUp6L0IsUUFBUSxTQUFVL04sS0FDeEJBLEdBQVFpdUMsRUFBTWp1QyxLQUdoQmxFLE1BQ0VrUSxRQUFRMmtCLFdBQVc3MEIsR0FBUXV5QyxLQU03QnRCLGFBQWVrQixFQUFNamlDLFVBQ3JCa2hDLGNBQWdCQSxJQUNoQkksY0FBZ0J6b0IsVUFBV3dwQixFQUFJcmlDLFdBR3ZCa2lDLEdBQVdHLEVBQ2hCQSxHQUlYLFNBQVNDLFlBQWFDLE9BQ2R0c0MsRUFBUXNzQyxFQUFLdmlDLFFBQVEvSixVQUN0QnFmLElBQU0vZixLQUFPVSxRQUNWc3NDLEVBQUsxdkMsVUFBVyxTQUFVMEMsR0FJcEMsU0FBU2l0QyxlQUFnQkQsT0FDakIvZCxFQUFXK2QsRUFBS3ZpQyxRQUFRd2tCLGFBQ3pCbFAsSUFBTS9mLEtBQU9pdkIsaUJBQ0QrZCxFQUFLMXZDLFVBQVcwQyxFQUFLaXZCLEVBQVNqdkIsSUFNakQsU0FBU2t0QyxtQkFBb0JyTCxlQUlmcjFCLGlCQUFRL04sS0FDZEEsR0FBUSxTQUNWMHFCLEVBQ0Fna0IsVUFFS0EsR0FJVSxjQUFUMXVDLHlCQUNvQjBxQixHQUVYLGNBQVQxcUIsR0FBd0J5SixnQkFBY2lsQyxPQUM3QjV5QyxLQUFPNHlDLEVBQVc1eUMsTUFBUTR1QixJQUN4Qmp2QixLQUFLdVEsUUFBUXVsQixNQUFNMU0sT0FBTzZwQixJQUU1QixjQUFUMXVDLEdBQThDLG1CQUFmMHVDLE9BQ2xCaHFCLEtBQU1ncUIsRUFBWXZqQixPQUFRdWpCLFNBRXRDMWlDLFFBQVFoTSxFQUFPLEtBQUswcUIsR0FBTWdrQixFQUN4QkEsR0FkQWp6QyxLQUFLdVEsUUFBUWhNLEVBQU8sS0FBSzBxQixNQXdCeEMsU0FBU2lrQixpQkFBa0J2bUIsVUFDbEJBLElBQVNBLEVBQUt4ZixLQUFLb0QsUUFBUWxRLE1BQVFzc0IsRUFBSzdvQixLQUdqRCxTQUFTd2YsUUFBUzZ2QixFQUFTOXlDLFVBQ3JCcUgsTUFBTW1DLFFBQVFzcEMsR0FDVEEsRUFBUXJyQixRQUFRem5CLElBQVMsRUFDSixpQkFBWjh5QyxFQUNUQSxFQUFRNXJCLE1BQU0sS0FBS08sUUFBUXpuQixJQUFTLElBQ2xDb21CLFNBQVMwc0IsSUFDWEEsRUFBUXh0QyxLQUFLdEYsR0FNeEIsU0FBUyt5QyxXQUFZQyxFQUFtQi94Qyx5Q0FFakN1a0IsSUFBTS9mLEtBQU8wUixFQUFPLEtBQ2pCODdCLEVBQWE5N0IsRUFBTTFSLE1BQ3JCd3RDLEVBQVksS0FDUmp6QyxFQUFPNnlDLGlCQUFpQkksRUFBV2hqQixrQkFDckNqd0IsSUFBU2lCLEVBQU9qQixvQkFDRm1YLEVBQU8xUixFQUFLZCxFQUFNa2lDLEtBTTFDLFNBQVNxTSxnQkFDUC83QixFQUNBMVIsRUFDQWQsRUFDQXd1QyxPQUVNQyxFQUFZajhCLEVBQU0xUixJQUNwQjJ0QyxHQUFlRCxHQUFXQyxFQUFVM3ZDLE1BQVEwdkMsRUFBUTF2QyxPQUM1Q3lzQixrQkFBa0J3VSxhQUV4QmovQixHQUFPLFlBQ05kLEVBQU1jLEdBN01mZ3JDLFVBQVVuSixLQUNWNEksV0FBVzVJLEtBQ1hpQyxZQUFZakMsS0FDWmdELGVBQWVoRCxLQUNmRCxZQUFZQyxLQTRNWjloQixJQUFNNnRCLGNBQWdCMW1DLE9BQVFsTSxPQUFRNEcsT0FFbENpc0MsZ0JBQ0ksdUJBQ0ksaUJBR0NELHFCQUNBQSxrQkFDSDFtQyxPQUFRdXJCLGlDQUlUL2dCLE1BQVExVSxPQUFPb1QsT0FBTyxXQUN0QmxSLGtDQUlBNmdCLElBQU0vZixLQUFPOUYsS0FBS3dYLHNCQUNMeFgsS0FBS3dYLE1BQU8xUixFQUFLOUYsS0FBS2dGLDBDQUtuQ3NyQyxPQUFPLG1CQUFXM3BCLGNBQ1YzbUIsV0FBTUssVUFBUWlqQixRQUFRcUQsRUFBS3RtQixZQUVuQ2l3QyxPQUFPLG1CQUFXM3BCLGNBQ1YzbUIsV0FBTUssVUFBU2lqQixRQUFRcUQsRUFBS3RtQiw4QkFLbkNxK0IsRUFBTzErQixLQUFLOC9CLE9BQU90Z0IsUUFDbkIrUixFQUFRMFgsdUJBQXVCdkssR0FDL0JwTyxFQUFtQmlCLEdBQVNBLEVBQU1qQixvQkFDcENBLEVBQWtCLEtBRWRqd0IsRUFBTzZ5QyxpQkFBaUI1aUIsS0FDRHR3QixlQUFBQSxxQkFHYkssSUFBU2lqQixRQUFRc3dCLEVBQVN2ekMsUUFFNUJBLEdBQVFpakIsUUFBUXV3QixFQUFTeHpDLFVBRTlCa3hCLFFBR2V2eEIsYUFBQUEsVUFDbEI4RixFQUFtQixNQUFieXJCLEVBQU16ckIsSUFHZHdxQixFQUFpQm5qQixLQUFLa2hCLEtBQU9pQyxFQUFpQnhzQixTQUFXd3NCLEVBQWlCeHNCLElBQVEsSUFDbEZ5dEIsRUFBTXpyQixJQUNOMFIsRUFBTTFSLE1BQ0Z5cUIsa0JBQW9CL1ksRUFBTTFSLEdBQUt5cUIseUJBRTlCdnJCLEVBQU1jLEtBQ1JtSCxLQUFLbkgsT0FFSkEsR0FBT3lyQixJQUNSdGtCLEtBQUtuSCxHQUVOOUYsS0FBS29ILEtBQU9wQyxFQUFLNEIsT0FBU2t0QyxTQUFTOXpDLEtBQUtvSCxzQkFDMUJvUSxFQUFPeFMsRUFBSyxHQUFJQSxFQUFNaEYsS0FBS2tuQyxXQUl6Qy9rQyxLQUFLb2lDLFdBQVksU0FFbEJoVCxHQUFVbU4sR0FBUUEsRUFBSyxLQUk5QnFWLDZCQUNGSixXQUtGLFNBQVNLLGNBQWVyTSxPQUVoQnNNLHlCQUNnQjEwQiw0QkFJaEIsaUZBSUN2WixlQUFlMmhDLEVBQUssU0FBVXNNLEtBS2pDQyxXQUNGNW1CLFlBQ0FsRSxvQkFDQXlNLDRCQUNnQjdDLHFCQUdkMWYsSUFBTUEsUUFDTjZnQyxPQUFTMWdCLE1BQ1QwRyxTQUFXQSxXQUdYaWEsb0JBQWM5dEIsa0JBQ1JBLEdBQ0RBLEtBR0wvVixRQUFVek4sT0FBT29ULE9BQU8sa0JBQ2hCNUQsaUJBQVEvTixLQUNkZ00sUUFBUWhNLEVBQU8sS0FBT3pCLE9BQU9vVCxPQUFPLFVBS3RDM0YsUUFBUXVsQixNQUFRNlIsU0FFYkEsRUFBSXAzQixRQUFRMmtCLFdBQVk2ZSwyQkFFdkJwTSxlQUNJQSxjQUNEQSxzQkFDUUEsR0FHckJxTSxjQUFjck0sS0FFZDdrQyxPQUFPa0QsZUFBZTJoQyxJQUFJdmtDLFVBQVcsaUJBQzlCd3BCLG9CQUdQOXBCLE9BQU9rRCxlQUFlMmhDLElBQUl2a0MsVUFBVyxxQ0FHMUJwRCxLQUFLd21DLFFBQVV4bUMsS0FBS3dtQyxPQUFPNk4sY0FLdEN2eEMsT0FBT2tELGVBQWUyaEMsSUFBSyxpQ0FDbEJ6RSwwQkFHVHlFLElBQUkyTSxRQUFVLFFBTWR6dUIsSUFBTXlwQixlQUFpQm5vQixRQUFRLGVBR3pCb3RCLFlBQWNwdEIsUUFBUSx5Q0FDdEIwWixxQkFBZS84QixFQUFLUyxFQUFNaXdDLFNBRWxCLFVBQVRBLEdBQW9CRCxZQUFZendDLElBQWtCLFdBQVRTLEdBQ2hDLGFBQVRpd0MsR0FBK0IsV0FBUjF3QyxHQUNkLFlBQVQwd0MsR0FBOEIsVUFBUjF3QyxHQUNiLFVBQVQwd0MsR0FBNEIsVUFBUjF3QyxHQUluQjJ3QyxpQkFBbUJ0dEIsUUFBUSx3Q0FFM0J1dEIsNEJBQThCdnRCLFFBQVEsc0NBRXRDd3RCLGdDQUEwQjd1QyxFQUFLbkMsVUFDNUJpeEMsaUJBQWlCanhDLElBQW9CLFVBQVZBLEVBQzlCLFFBRVEsb0JBQVJtQyxHQUE2QjR1Qyw0QkFBNEIvd0MsR0FDdkRBLEVBQ0EsUUFHRmt4QyxjQUFnQjF0QixRQUNwQix3WUFRSTJ0QixRQUFVLCtCQUVWQyxpQkFBVzEwQyxTQUNXLE1BQW5CQSxFQUFLa29CLE9BQU8sSUFBbUMsVUFBckJsb0IsRUFBS21SLE1BQU0sRUFBRyxJQUczQ3dqQyxzQkFBZ0IzMEMsVUFDYjAwQyxRQUFRMTBDLEdBQVFBLEVBQUttUixNQUFNLEVBQUduUixFQUFLdUcsUUFBVSxJQUdoRGd1QywwQkFBb0JqdUIsVUFDVixNQUFQQSxJQUF1QixJQUFSQSxHQUt4QixTQUFTc3VCLGlCQUFrQjFqQixXQUNyQnB2QixFQUFPb3ZCLEVBQU1wdkIsS0FDYit5QyxFQUFhM2pCLEVBQ2I0akIsRUFBWTVqQixFQUNUckwsTUFBTWl2QixFQUFVNWtCLHVCQUNUNGtCLEVBQVU1a0Isa0JBQWtCMlcsU0FDdkJpTyxFQUFVaHpDLFNBQ2xCaXpDLGVBQWVELEVBQVVoekMsS0FBTUEsU0FHbkMrakIsTUFBTWd2QixFQUFhQSxFQUFXMWtCLFNBQy9CMGtCLEdBQWNBLEVBQVcveUMsU0FDcEJpekMsZUFBZWp6QyxFQUFNK3lDLEVBQVcveUMsY0FHcENrekMsWUFBWWx6QyxFQUFLbXpDLFlBQWFuekMsRUFBSzZrQyxPQUc1QyxTQUFTb08sZUFBZ0Jsa0IsRUFBT1Ysc0JBRWY5TixPQUFPd08sRUFBTW9rQixZQUFhOWtCLEVBQU84a0IsbUJBQ3ZDcHZCLE1BQU1nTCxFQUFNOFYsUUFDZDlWLEVBQU04VixNQUFPeFcsRUFBT3dXLE9BQ3JCeFcsRUFBT3dXLE9BSWYsU0FBU3FPLFlBQ1BDLEVBQ0FDLFVBRUlydkIsTUFBTW92QixJQUFnQnB2QixNQUFNcXZCLEdBQ3ZCN3lCLE9BQU80eUIsRUFBYUUsZUFBZUQsSUFHckMsR0FHVCxTQUFTN3lCLE9BQVFtRyxFQUFHWSxVQUNYWixFQUFJWSxFQUFLWixFQUFJLElBQU1ZLEVBQUtaLEVBQUtZLEdBQUssR0FHM0MsU0FBUytyQixlQUFnQjd4QyxVQUNuQitELE1BQU1tQyxRQUFRbEcsR0FDVDh4QyxlQUFlOXhDLEdBRXBCVyxXQUFTWCxHQUNKK3hDLGdCQUFnQi94QyxHQUVKLGlCQUFWQSxFQUNGQSxFQUdGLEdBR1QsU0FBUzh4QyxlQUFnQjl4QyxXQUVuQmd5QyxFQURBbnNCLEVBQU0sR0FFRHZGLEVBQUksRUFBRzZFLEVBQUlubEIsRUFBTWlELE9BQVFxZCxFQUFJNkUsRUFBRzdFLElBQ25DaUMsTUFBTXl2QixFQUFjSCxlQUFlN3hDLEVBQU1zZ0IsTUFBd0IsS0FBaEIweEIsSUFDL0Nuc0IsT0FBWSxRQUNUbXNCLFVBR0puc0IsRUFHVCxTQUFTa3NCLGdCQUFpQi94QyxPQUNwQjZsQixFQUFNLE9BQ0wzRCxJQUFNL2YsS0FBT25DLEVBQ1pBLEVBQU1tQyxLQUNKMGpCLE9BQVksUUFDVDFqQixVQUdKMGpCLEVBS1QzRCxJQUFNK3ZCLGtCQUNDLGtDQUNDLHNDQUdGQyxVQUFZMXVCLFFBQ2hCLHNuQkFlSTJ1QixNQUFRM3VCLFFBQ1osa05BR0EsR0FHSTR1QixrQkFBWWp5QyxTQUFnQixRQUFSQSxHQUVwQnN4Qix1QkFBaUJ0eEIsVUFDZCt4QyxVQUFVL3hDLElBQVFneUMsTUFBTWh5QyxJQUdqQyxTQUFTMmlDLGdCQUFpQjNpQyxVQUNwQmd5QyxNQUFNaHlDLEdBQ0QsTUFJRyxTQUFSQSxFQUNLLGNBSVgraEIsSUFBTW13QixvQkFBc0JsekMsT0FBT29ULE9BQU8sTUFDMUMsU0FBUysvQixpQkFBa0JueUMsT0FFcEIwbkIsaUJBQ0ksS0FFTDRKLGNBQWN0eEIsVUFDVCxPQUVIQSxFQUFJMGpCLGNBRXNCLE1BQTVCd3VCLG9CQUFvQmx5QyxVQUNma3lDLG9CQUFvQmx5QyxPQUV2QnljLEVBQUtsZSxTQUFTQyxjQUFjd0IsVUFDOUJBLEVBQUlna0IsUUFBUSxNQUFRLEVBRWRrdUIsb0JBQW9CbHlDLEdBQzFCeWMsRUFBR25ULGNBQWdCNU0sT0FBTzAxQyxvQkFDMUIzMUIsRUFBR25ULGNBQWdCNU0sT0FBTzIxQyxZQUdwQkgsb0JBQW9CbHlDLEdBQU8scUJBQXFCNkIsS0FBSzRhLEVBQUdqZCxZQUlwRXVpQixJQUFNdXdCLGdCQUFrQmp2QixRQUFRLDZDQU9oQyxTQUFTNW1CLE1BQU9nZ0IsTUFDSSxpQkFBUEEsRUFBaUIsS0FDcEI4MUIsRUFBV2gwQyxTQUFTbWUsY0FBY0QsVUFDbkM4MUIsU0FFRCx3QkFBMEI5MUIsR0FFckJsZSxTQUFTQyxjQUFjLGVBSXpCaWUsRUFNWCxTQUFTKzFCLGdCQUFpQkMsRUFBU2hsQixPQUMzQnZCLEVBQU0zdEIsU0FBU0MsY0FBY2kwQyxTQUNuQixXQUFaQSxFQUNLdm1CLEdBR0x1QixFQUFNcHZCLE1BQVFvdkIsRUFBTXB2QixLQUFLazdCLFlBQXVDNTVCLElBQTlCOHRCLEVBQU1wdkIsS0FBS2s3QixNQUFNbVosWUFDakRoMEMsYUFBYSxXQUFZLFlBRXhCd3RCLEdBR1QsU0FBU3ltQixnQkFBaUJ2ekIsRUFBV3F6QixVQUM1QmwwQyxTQUFTbzBDLGdCQUFnQmIsYUFBYTF5QixHQUFZcXpCLEdBRzNELFNBQVNyYyxlQUFnQi80QixVQUNoQmtCLFNBQVM2M0IsZUFBZS80QixHQUdqQyxTQUFTdTFDLGNBQWV2MUMsVUFDZmtCLFNBQVNxMEMsY0FBY3YxQyxHQUdoQyxTQUFTdzFDLGFBQWN6QixFQUFZMEIsRUFBU0MsS0FDL0JGLGFBQWFDLEVBQVNDLEdBR25DLFNBQVNDLFlBQWExbEIsRUFBTUYsS0FDckI0bEIsWUFBWTVsQixHQUduQixTQUFTeHVCLFlBQWEwdUIsRUFBTUYsS0FDckJ4dUIsWUFBWXd1QixHQUduQixTQUFTZ2tCLFdBQVk5akIsVUFDWkEsRUFBSzhqQixXQUdkLFNBQVM2QixZQUFhM2xCLFVBQ2JBLEVBQUsybEIsWUFHZCxTQUFTUixRQUFTbmxCLFVBQ1RBLEVBQUttbEIsUUFHZCxTQUFTUyxlQUFnQjVsQixFQUFNandCLEtBQ3hCODFDLFlBQWM5MUMsRUFHckIsU0FBUysxQyxjQUFlOWxCLEVBQU0rbEIsS0FDdkIzMEMsYUFBYTIwQyxFQUFTLElBRzdCLElBQUlDLFFBQXVCdDBDLE9BQU9pakIsc0JBQ2pCdXdCLGdDQUNFRywrQkFDRHZjLDZCQUNEd2MsMkJBQ0RDLHlCQUNERyx3QkFDQXAwQyx1QkFDRHd5Qyx1QkFDQzZCLG9CQUNKUix1QkFDT1MsNkJBQ0RFLGdCQUtiRyxxQkFDTTNtQyxFQUFHNmdCLGVBQ0dBLG9CQUVOc1QsRUFBVXRULEdBQ1pzVCxFQUFTMWlDLEtBQUtrMUMsTUFBUTlsQixFQUFNcHZCLEtBQUtrMUMsa0JBQ3ZCeFMsR0FBVSxlQUNWdFQsc0JBR1BBLGVBQ0tBLEdBQU8sS0FJdkIsU0FBUytsQixZQUFhL2xCLEVBQU9nbUIsT0FDckJ6eEMsRUFBTXlyQixFQUFNcHZCLEtBQUtrMUMsT0FDbEJueEIsTUFBTXBnQixRQUVMaW9CLEVBQUt3RCxFQUFNckIsUUFDWG1uQixFQUFNOWxCLEVBQU1oQixtQkFBcUJnQixFQUFNdkIsSUFDdkN3bkIsRUFBT3pwQixFQUFHdWMsTUFDWmlOLEVBQ0U3dkMsTUFBTW1DLFFBQVEydEMsRUFBSzF4QyxXQUNkMHhDLEVBQUsxeEMsR0FBTXV4QyxHQUNURyxFQUFLMXhDLEtBQVN1eEMsTUFDbEJ2eEMsUUFBT3JDLEdBR1Y4dEIsRUFBTXB2QixLQUFLczFDLFNBQ1IvdkMsTUFBTW1DLFFBQVEydEMsRUFBSzF4QyxJQUViMHhDLEVBQUsxeEMsR0FBS2dpQixRQUFRdXZCLEdBQU8sS0FFN0J2eEMsR0FBS21ILEtBQUtvcUMsS0FIVnZ4QyxJQUFRdXhDLEtBTVZ2eEMsR0FBT3V4QyxHQWlCbEJ4eEIsSUFBTTZ4QixVQUFZLElBQUk1bkIsTUFBTSxVQUV0QjBFLE9BQVMsU0FBVSxXQUFZLFNBQVUsU0FBVSxXQUV6RCxTQUFTbWpCLFVBQVc5dUIsRUFBR1ksVUFFbkJaLEVBQUUvaUIsTUFBUTJqQixFQUFFM2pCLE1BRVIraUIsRUFBRS9rQixNQUFRMmxCLEVBQUUzbEIsS0FDWitrQixFQUFFK0gsWUFBY25ILEVBQUVtSCxXQUNsQjFLLE1BQU0yQyxFQUFFMW1CLFFBQVUrakIsTUFBTXVELEVBQUV0bkIsT0FDMUJ5MUMsY0FBYy91QixFQUFHWSxJQUVqQnRELE9BQU8wQyxFQUFFb0kscUJBQ1RwSSxFQUFFa0ksZUFBaUJ0SCxFQUFFc0gsY0FDckIvSyxRQUFReUQsRUFBRXNILGFBQWE3dUIsUUFNL0IsU0FBUzAxQyxjQUFlL3VCLEVBQUdZLE1BQ1gsVUFBVlosRUFBRS9rQixXQUF3QixNQUMxQm1nQixFQUNFNHpCLEVBQVEzeEIsTUFBTWpDLEVBQUk0RSxFQUFFMW1CLE9BQVMrakIsTUFBTWpDLEVBQUlBLEVBQUVvWixRQUFVcFosRUFBRTFmLEtBQ3JEdXpDLEVBQVE1eEIsTUFBTWpDLEVBQUl3RixFQUFFdG5CLE9BQVMrakIsTUFBTWpDLEVBQUlBLEVBQUVvWixRQUFVcFosRUFBRTFmLFlBQ3BEc3pDLElBQVVDLEdBQVMxQixnQkFBZ0J5QixJQUFVekIsZ0JBQWdCMEIsR0FHdEUsU0FBU0Msa0JBQW1CaG9CLEVBQVVpb0IsRUFBVUMsT0FDMUNoMEIsRUFBR25lLEVBQ0QyTyxTQUNEd1AsRUFBSSt6QixFQUFVL3pCLEdBQUtnMEIsSUFBVWgwQixFQUU1QmlDLFFBREU2SixFQUFTOUwsR0FBR25lLFNBQ0VBLEdBQU9tZSxVQUV0QnhQLEVBR1QsU0FBU3lqQyxvQkFBcUJDLE9BQ3hCbDBCLEVBQUd1b0IsRUFDRHpDLGlDQUlEOWxCLEVBQUksRUFBR0EsRUFBSXVRLE1BQU01dEIsU0FBVXFkLFFBQzFCdVEsTUFBTXZRLE9BQ0x1b0IsRUFBSSxFQUFHQSxFQUFJNWlCLEVBQVFoakIsU0FBVTRsQyxFQUM1QnRtQixNQUFNMEQsRUFBUTRpQixHQUFHaFksTUFBTXZRLFFBQ3JCdVEsTUFBTXZRLElBQUloWCxLQUFLMmMsRUFBUTRpQixHQUFHaFksTUFBTXZRLGNBbUJqQ20wQixFQUFZNzNCLE9BQ2JpUSxFQUFTNG1CLEVBQVFsQyxXQUFXMzBCLEdBRTlCMkYsTUFBTXNLLE1BQ0FzbUIsWUFBWXRtQixFQUFRalEsWUFJdkI4M0IsRUFBcUI5bUIsRUFBTyttQixVQUVoQ0EsSUFDQS9tQixFQUFNdEIsTUFFTDFRLE9BQU9nNUIsZ0JBQWdCM3hDLFFBQ3ZCMlksT0FBT2c1QixnQkFBZ0IvZixjQUFLZ2dCLFVBQ25CL3hCLFNBQVMreEIsR0FDWkEsRUFBTzd5QyxLQUFLNHJCLEVBQU16dEIsS0FDbEIwMEMsSUFBV2puQixFQUFNenRCLFFBR3pCeWIsT0FBTzAyQixpQkFBaUIxa0IsRUFBTXp0QixTQUk5QjIwQyxFQUFvQixXQUVmQyxFQUNQbm5CLEVBQ0FvbkIsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQXB5QyxNQUVJdWYsTUFBTXFMLEVBQU12QixNQUFROUosTUFBTTZ5QixPQU1wQkEsRUFBV3B5QyxHQUFTMnFCLFdBQVdDLE1BR25DWixjQUFnQm1vQixZQWlERXZuQixFQUFPb25CLEVBQW9CQyxFQUFXQyxPQUMxRDUwQixFQUFJc04sRUFBTXB2QixRQUNWK2pCLE1BQU1qQyxHQUFJLEtBQ04rMEIsRUFBZ0I5eUIsTUFBTXFMLEVBQU1oQixvQkFBc0J0TSxFQUFFc2dCLGFBQ3REcmUsTUFBTWpDLEVBQUlBLEVBQUUyUSxPQUFTMU8sTUFBTWpDLEVBQUlBLEVBQUV0RSxTQUNqQzRSLEdBQU8sR0FNUHJMLE1BQU1xTCxFQUFNaEIsNEJBQ0FnQixFQUFPb25CLEtBQ2RDLEVBQVdybkIsRUFBTXZCLElBQUs2b0IsR0FDekIxeUIsT0FBTzZ5QixhQTBCYXpuQixFQUFPb25CLEVBQW9CQyxFQUFXQyxPQUM5RDUwQixFQUtBZzFCLEVBQVkxbkIsT0FDVDBuQixFQUFVMW9CLHdCQUNIMG9CLEVBQVUxb0Isa0JBQWtCMlcsT0FDcENoaEIsTUFBTWpDLEVBQUlnMUIsRUFBVTkyQyxPQUFTK2pCLE1BQU1qQyxFQUFJQSxFQUFFaTFCLFlBQWEsS0FDbkRqMUIsRUFBSSxFQUFHQSxFQUFJOGxCLEVBQUlvUCxTQUFTdnlDLFNBQVVxZCxJQUNqQ2sxQixTQUFTbDFCLEdBQUd5ekIsVUFBV3VCLEtBRVZoc0MsS0FBS2dzQyxXQU1yQkwsRUFBV3JuQixFQUFNdkIsSUFBSzZvQixJQTVDSHRuQixFQUFPb25CLEVBQW9CQyxFQUFXQyxJQUVyRCxHQWpFUDVULENBQWdCMVQsRUFBT29uQixFQUFvQkMsRUFBV0MsUUFJcEQxMkMsRUFBT292QixFQUFNcHZCLEtBQ2I0dEIsRUFBV3dCLEVBQU14QixTQUNqQmpzQixFQUFNeXRCLEVBQU16dEIsSUFDZG9pQixNQUFNcGlCLElBRUYzQixHQUFRQSxFQUFLd2tDLFNBR2IwUixFQUFvQjltQixFQUFPa25CLFNBRTNCLDRCQUE4QjMwQyxFQUFNLGtIQUdwQ3l0QixFQUFNckIsV0FLTkYsSUFBTXVCLEVBQU10QixHQUNkbW5CLEVBQVFYLGdCQUFnQmxsQixFQUFNdEIsR0FBSW5zQixHQUNsQ3N6QyxFQUFROTBDLGNBQWN3QixFQUFLeXRCLEtBQ3RCQSxLQUlRQSxFQUFPeEIsRUFBVTRvQixHQUM1Qnp5QixNQUFNL2pCLE1BQ1VvdkIsRUFBT29uQixLQUVwQkMsRUFBV3JuQixFQUFNdkIsSUFBSzZvQixHQUczQjEyQyxHQUFRQSxFQUFLd2tDLFVBR1J4Z0IsT0FBT29MLEVBQU1YLGNBQ2hCWixJQUFNb25CLEVBQVFWLGNBQWNubEIsRUFBTXB3QixRQUNqQ3kzQyxFQUFXcm5CLEVBQU12QixJQUFLNm9CLE9BRXZCN29CLElBQU1vbkIsRUFBUWxkLGVBQWUzSSxFQUFNcHdCLFFBQ2xDeTNDLEVBQVdybkIsRUFBTXZCLElBQUs2b0IsY0EwQnhCTyxFQUFlN25CLEVBQU9vbkIsR0FDekJ6eUIsTUFBTXFMLEVBQU1wdkIsS0FBS2szQyxtQkFDQXBzQyxLQUFLbEcsTUFBTTR4QyxFQUFvQnBuQixFQUFNcHZCLEtBQUtrM0MsaUJBQ3ZEbDNDLEtBQUtrM0MsY0FBZ0IsUUFFdkJycEIsSUFBTXVCLEVBQU1oQixrQkFBa0J1YSxJQUNoQ3dPLEVBQVkvbkIsTUFDSUEsRUFBT29uQixLQUNoQnBuQixpQkFJR0EsS0FFT3RrQixLQUFLc2tCLGFBMEJuQmdvQixFQUFRL29CLEVBQVFSLEVBQUt3cEIsR0FDeEJ0ekIsTUFBTXNLLEtBQ0p0SyxNQUFNc3pCLEdBQ0pwQyxFQUFRbEMsV0FBV3NFLEtBQVlocEIsS0FDekJtbUIsYUFBYW5tQixFQUFRUixFQUFLd3BCLEtBRzVCOTJDLFlBQVk4dEIsRUFBUVIsYUFLekJ5cEIsRUFBZ0Jsb0IsRUFBT3hCLEVBQVU0b0IsTUFDcENqeEMsTUFBTW1DLFFBQVFrbUIsR0FBVyxHQUVOQSxPQUVoQi9MLElBQUlDLEVBQUksRUFBR0EsRUFBSThMLEVBQVNucEIsU0FBVXFkLElBQzNCOEwsRUFBUzlMLEdBQUkwMEIsRUFBb0JwbkIsRUFBTXZCLElBQUssTUFBTSxFQUFNRCxFQUFVOUwsUUFFckVvQyxZQUFZa0wsRUFBTXB3QixTQUNuQnVCLFlBQVk2dUIsRUFBTXZCLElBQUtvbkIsRUFBUWxkLGVBQWVsdEIsT0FBT3VrQixFQUFNcHdCLGlCQUk5RG00QyxFQUFhL25CLFFBQ2JBLEVBQU1oQixxQkFDSGdCLEVBQU1oQixrQkFBa0IyVyxjQUUzQmhoQixNQUFNcUwsRUFBTXp0QixjQUdaNDFDLEVBQW1Cbm9CLEVBQU9vbkIsT0FDNUIzMEIsSUFBSUMsRUFBSSxFQUFHQSxFQUFJOGxCLEVBQUk3ekIsT0FBT3RQLFNBQVVxZCxJQUNuQy9OLE9BQU8rTixHQUFHeXpCLFVBQVdubUIsR0FHdkJyTCxRQURBcUwsRUFBTXB2QixLQUFLeXlCLFFBRVQxTyxNQUFNakMsRUFBRS9OLFdBQVdBLE9BQU93aEMsVUFBV25tQixHQUNyQ3JMLE1BQU1qQyxFQUFFczFCLFdBQTRCdHNDLEtBQUtza0IsYUFPeENvb0IsRUFBVXBvQixPQUNidE4sS0FDQWlDLE1BQU1qQyxFQUFJc04sRUFBTWxCLGFBQ1Y2bUIsY0FBYzNsQixFQUFNdkIsSUFBSy9MLGdCQUU3QjIxQixFQUFXcm9CLEVBQ1Jxb0IsR0FDRDF6QixNQUFNakMsRUFBSTIxQixFQUFTMXBCLFVBQVloSyxNQUFNakMsRUFBSUEsRUFBRXNLLFNBQVNvVixhQUM5Q3VULGNBQWMzbEIsRUFBTXZCLElBQUsvTCxLQUV4QjIxQixFQUFTcHBCLE9BSXBCdEssTUFBTWpDLEVBQUkwZ0IsaUJBQ1oxZ0IsSUFBTXNOLEVBQU1yQixTQUNaak0sSUFBTXNOLEVBQU1wQixXQUNaakssTUFBTWpDLEVBQUlBLEVBQUVzSyxTQUFTb1YsYUFFYnVULGNBQWMzbEIsRUFBTXZCLElBQUsvTCxZQUk1QjQxQixFQUFXakIsRUFBV0MsRUFBUTdVLEVBQVE4VixFQUFVN0IsRUFBUVUsUUFDeERtQixHQUFZN0IsSUFBVTZCLElBQ2pCOVYsRUFBTzhWLEdBQVduQixFQUFvQkMsRUFBV0MsR0FBUSxFQUFPN1UsRUFBUThWLFlBSTdFQyxFQUFtQnhvQixPQUN0QnROLEVBQUd1b0IsRUFDRHJxQyxFQUFPb3ZCLEVBQU1wdkIsUUFDZitqQixNQUFNL2pCLE9BQ0orakIsTUFBTWpDLEVBQUk5aEIsRUFBS3l5QixPQUFTMU8sTUFBTWpDLEVBQUlBLEVBQUUrMUIsWUFBWXpvQixHQUMvQ3ROLEVBQUksRUFBR0EsRUFBSThsQixFQUFJaVEsUUFBUXB6QyxTQUFVcWQsSUFBTysxQixRQUFRLzFCLEdBQUdzTixNQUV0RHJMLE1BQU1qQyxFQUFJc04sRUFBTXhCLGNBQ2J5YyxFQUFJLEVBQUdBLEVBQUlqYixFQUFNeEIsU0FBU25wQixTQUFVNGxDLElBQ3JCamIsRUFBTXhCLFNBQVN5YyxhQUs5QnlOLEVBQWNyQixFQUFXNVUsRUFBUThWLEVBQVU3QixRQUMzQzZCLEdBQVk3QixJQUFVNkIsRUFBVSxLQUMvQkksRUFBS2xXLEVBQU84VixHQUNkNXpCLE1BQU1nMEIsS0FDSmgwQixNQUFNZzBCLEVBQUdwMkMsUUFDZW8yQyxLQUNSQSxNQUVQQSxFQUFHbHFCLGdCQU1ibXFCLEVBQTJCNW9CLEVBQU82b0IsTUFDckNsMEIsTUFBTWswQixJQUFPbDBCLE1BQU1xTCxFQUFNcHZCLE1BQU8sS0FDOUI4aEIsRUFDRXVmLEVBQVl1RyxFQUFJcGlCLE9BQU8vZ0IsT0FBUyxNQUNsQ3NmLE1BQU1rMEIsS0FHTDVXLFdBQWFBLGFBblJENlcsRUFBVTdXLFlBQ3BCNUcsSUFDdUIsS0FBeEJBLEVBQVU0RyxhQUNINlcsWUFHTDdXLFVBQVlBLEVBQ2Y1RyxFQStRRTBkLENBQVcvb0IsRUFBTXZCLElBQUt3VCxHQUd6QnRkLE1BQU1qQyxFQUFJc04sRUFBTWhCLG9CQUFzQnJLLE1BQU1qQyxFQUFJQSxFQUFFaWpCLFNBQVdoaEIsTUFBTWpDLEVBQUU5aEIsU0FDN0M4aEIsRUFBR20yQixHQUUxQm4yQixFQUFJLEVBQUdBLEVBQUk4bEIsRUFBSXBpQixPQUFPL2dCLFNBQVVxZCxJQUMvQjBELE9BQU8xRCxHQUFHc04sRUFBTzZvQixHQUVuQmwwQixNQUFNakMsRUFBSXNOLEVBQU1wdkIsS0FBS3l5QixPQUFTMU8sTUFBTWpDLEVBQUlBLEVBQUUwRCxVQUMxQzRKLEVBQU82b0IsY0FLQTdvQixFQUFNdkIsY0E0RVp1cUIsRUFBb0J4cUIsV0FDckJ5cUIsS0FDR3YyQixFQUFJLEVBQUdBLEVBQUk4TCxFQUFTbnBCLE9BQVFxZCxJQUFLLEtBQ2xDc04sRUFBUXhCLEVBQVM5TCxHQUNqQm5lLEVBQU15ckIsRUFBTXpyQixJQUNkb2dCLE1BQU1wZ0IsS0FDSjAwQyxFQUFTMTBDLHFDQUVvQkEsdUNBQzdCeXJCLEVBQU1yQixXQUdDcHFCLElBQU8sYUFNZjIwQyxFQUFjcnBCLEVBQU1zcEIsRUFBT3B6QyxFQUFPcXpDLE9BQ3BDMzJCLElBQUlDLEVBQUkzYyxFQUFPMmMsRUFBSTAyQixFQUFLMTJCLElBQUssS0FDMUJtRSxFQUFJc3lCLEVBQU16MkIsTUFDWmlDLE1BQU1rQyxJQUFNdXZCLFVBQVV2bUIsRUFBTWhKLFVBQVduRSxZQUl0QzIyQixFQUNQL1YsRUFDQXRULEVBQ0FvbkIsRUFDQUksRUFDQXB5QyxFQUNBazBDLE1BRUloVyxJQUFhdFQsR0FJYnJMLE1BQU1xTCxFQUFNdkIsTUFBUTlKLE1BQU02eUIsT0FFcEJBLEVBQVdweUMsR0FBUzJxQixXQUFXQyxRQUduQ3ZCLEVBQU11QixFQUFNdkIsSUFBTTZVLEVBQVM3VSxPQUU3QjdKLE9BQU8wZSxFQUFTNVQsb0JBQ2QvSyxNQUFNcUwsRUFBTVIsYUFBYXFYLFlBQ25CdkQsRUFBUzdVLElBQUt1QixFQUFPb25CLEtBRXZCMW5CLG9CQUFxQixVQVMzQjlLLE9BQU9vTCxFQUFNYixXQUNmdkssT0FBTzBlLEVBQVNuVSxXQUNoQmEsRUFBTXpyQixNQUFRKytCLEVBQVMvK0IsTUFDdEJxZ0IsT0FBT29MLEVBQU1WLFdBQWExSyxPQUFPb0wsRUFBTVQsV0FFbENQLGtCQUFvQnNVLEVBQVN0VSwyQkFJakN0TSxFQUNFOWhCLEVBQU9vdkIsRUFBTXB2QixLQUNmK2pCLE1BQU0vakIsSUFBUytqQixNQUFNakMsRUFBSTloQixFQUFLeXlCLE9BQVMxTyxNQUFNakMsRUFBSUEsRUFBRXdnQixhQUNuREksRUFBVXRULE9BR1JtcEIsRUFBUTdWLEVBQVM5VSxTQUNqQm1xQixFQUFLM29CLEVBQU14QixZQUNiN0osTUFBTS9qQixJQUFTbTNDLEVBQVkvbkIsR0FBUSxLQUNoQ3ROLEVBQUksRUFBR0EsRUFBSThsQixFQUFJcmEsT0FBTzlvQixTQUFVcWQsSUFBT3lMLE9BQU96TCxHQUFHNGdCLEVBQVV0VCxHQUM1RHJMLE1BQU1qQyxFQUFJOWhCLEVBQUt5eUIsT0FBUzFPLE1BQU1qQyxFQUFJQSxFQUFFeUwsV0FBV21WLEVBQVV0VCxHQUUzRHZMLFFBQVF1TCxFQUFNcHdCLE1BQ1ora0IsTUFBTXcwQixJQUFVeDBCLE1BQU1nMEIsR0FDcEJRLElBQVVSLFlBeEpLdEIsRUFBVzhCLEVBQU9JLEVBQU9uQyxFQUFvQmtDLE9BU2hFRSxFQUFhQyxFQUFVQyxFQVJ2QkMsRUFBYyxFQUNkQyxFQUFjLEVBQ2RDLEVBQVlWLEVBQU05ekMsT0FBUyxFQUMzQnkwQyxFQUFnQlgsRUFBTSxHQUN0QlksRUFBY1osRUFBTVUsR0FDcEJHLEVBQVlULEVBQU1sMEMsT0FBUyxFQUMzQjQwQyxFQUFnQlYsRUFBTSxHQUN0QlcsRUFBY1gsRUFBTVMsR0FNbEJHLEdBQVdiLFFBR0lDLEdBR2RJLEdBQWVFLEdBQWFELEdBQWVJLEdBQzVDdjFCLFFBQVFxMUIsS0FDTVgsSUFBUVEsR0FDZmwxQixRQUFRczFCLEtBQ0haLElBQVFVLEdBQ2J6RCxVQUFVMEQsRUFBZUcsTUFDdkJILEVBQWVHLEVBQWU3QyxFQUFvQm1DLEVBQU9LLEtBQ3BEVCxJQUFRUSxLQUNSSixJQUFRSyxJQUNmeEQsVUFBVTJELEVBQWFHLE1BQ3JCSCxFQUFhRyxFQUFhOUMsRUFBb0JtQyxFQUFPUyxLQUNsRGIsSUFBUVUsS0FDUk4sSUFBUVMsSUFDYjVELFVBQVUwRCxFQUFlSSxNQUN2QkosRUFBZUksRUFBYTlDLEVBQW9CbUMsRUFBT1MsTUFDdkRuRSxFQUFRVCxhQUFhaUMsRUFBV3lDLEVBQWNyckIsSUFBS29uQixFQUFRTCxZQUFZdUUsRUFBWXRyQixRQUM5RTBxQixJQUFRUSxLQUNWSixJQUFRUyxJQUNiNUQsVUFBVTJELEVBQWFFLE1BQ3JCRixFQUFhRSxFQUFlN0MsRUFBb0JtQyxFQUFPSyxNQUN2RC9ELEVBQVFULGFBQWFpQyxFQUFXMEMsRUFBWXRyQixJQUFLcXJCLEVBQWNyckIsT0FDNUQwcUIsSUFBUVUsS0FDTk4sSUFBUUssS0FFcEJuMUIsUUFBUSswQixPQUE0QmhELGtCQUFrQjJDLEVBQU9RLEVBQWFFLElBSTFFcDFCLFVBSE9FLE1BQU1zMUIsRUFBYzExQyxLQUMzQmkxQyxFQUFZUyxFQUFjMTFDLEtBQzFCMjBDLEVBQWFlLEVBQWVkLEVBQU9RLEVBQWFFLE1BRXhDSSxFQUFlN0MsRUFBb0JDLEVBQVd5QyxFQUFjcnJCLEtBQUssRUFBTzhxQixFQUFPSyxHQUdyRnhELFlBRFUrQyxFQUFNTSxHQUNPUSxNQUNkUCxFQUFhTyxFQUFlN0MsRUFBb0JtQyxFQUFPSyxLQUM1REgsUUFBWXYzQyxLQUNQMnpDLEVBQVFULGFBQWFpQyxFQUFXcUMsRUFBWWpyQixJQUFLcXJCLEVBQWNyckIsUUFHaEV3ckIsRUFBZTdDLEVBQW9CQyxFQUFXeUMsRUFBY3JyQixLQUFLLEVBQU84cUIsRUFBT0ssS0FHN0VMLElBQVFLLElBR3hCRCxFQUFjRSxJQUVOeEMsRUFERDV5QixRQUFRODBCLEVBQU1TLEVBQVksSUFBTSxLQUFPVCxFQUFNUyxFQUFZLEdBQUd2ckIsSUFDeEM4cUIsRUFBT0ssRUFBYUksRUFBVzVDLEdBQ25Ed0MsRUFBY0ksS0FDVjNDLEVBQVc4QixFQUFPUSxFQUFhRSxJQW9GVHByQixFQUFLMHFCLEVBQU9SLEVBQUl2QixFQUFvQmtDLEdBQzVEMzBCLE1BQU1nMEIsTUFFTUEsR0FFakJoMEIsTUFBTTJlLEVBQVMxakMsU0FBZTYxQyxlQUFlaG5CLEVBQUssTUFDNUNBLEVBQUssS0FBTWtxQixFQUFJLEVBQUdBLEVBQUd0ekMsT0FBUyxFQUFHK3hDLElBQ2xDenlCLE1BQU13MEIsS0FDRjFxQixFQUFLMHFCLEVBQU8sRUFBR0EsRUFBTTl6QyxPQUFTLEdBQ2xDc2YsTUFBTTJlLEVBQVMxakMsU0FDaEI2MUMsZUFBZWhuQixFQUFLLElBRXJCNlUsRUFBUzFqQyxPQUFTb3dCLEVBQU1wd0IsUUFDekI2MUMsZUFBZWhuQixFQUFLdUIsRUFBTXB3QixNQUVoQytrQixNQUFNL2pCLElBQ0orakIsTUFBTWpDLEVBQUk5aEIsRUFBS3l5QixPQUFTMU8sTUFBTWpDLEVBQUlBLEVBQUUwM0IsY0FBYzlXLEVBQVV0VCxjQUkzRHFxQixFQUFrQnJxQixFQUFPbWIsRUFBT21QLE1BR25DMTFCLE9BQU8wMUIsSUFBWTMxQixNQUFNcUwsRUFBTWYsVUFDM0JBLE9BQU9ydUIsS0FBS2szQyxjQUFnQjNNLFdBRTdCMW9CLElBQUlDLEVBQUksRUFBR0EsRUFBSXlvQixFQUFNOWxDLFNBQVVxZCxJQUM1QkEsR0FBRzloQixLQUFLeXlCLEtBQUsya0IsT0FBTzdNLEVBQU16b0IsUUFLbEM2M0IsR0FBa0IsRUFLaEJDLEVBQW1CNTBCLFFBQVEsb0RBR3hCNjBCLEVBQVNoc0IsRUFBS3VCLEVBQU9vbkIsRUFBb0JMLE9BQzVDcjBCLHFDQUVLcTBCLEdBQVduMkMsR0FBUUEsRUFBS3drQyxNQUMzQjNXLElBQU1BLEVBRVI3SixPQUFPb0wsRUFBTVgsWUFBYzFLLE1BQU1xTCxFQUFNUix1QkFDbkNFLG9CQUFxQixHQUNwQixlQW1GZUcsRUFBTUcsRUFBTyttQixVQUNqQ3B5QixNQUFNcUwsRUFBTXp0QixLQUNnQyxJQUF2Q3l0QixFQUFNenRCLElBQUlna0IsUUFBUSxtQkFDdEJ1d0IsRUFBb0I5bUIsRUFBTyttQixJQUM1Qi9tQixFQUFNenRCLElBQUkwakIsaUJBQW1CNEosRUFBS21sQixTQUFXbmxCLEVBQUttbEIsUUFBUS91QixlQUdyRDRKLEVBQUtubkIsWUFBY3NuQixFQUFNWCxVQUFZLEVBQUksR0F0RjNDcXJCLENBQWdCanNCLEVBQUt1QixFQUFPK21CLFVBQ3hCLEtBR1BweUIsTUFBTS9qQixLQUNKK2pCLE1BQU1qQyxFQUFJOWhCLEVBQUt5eUIsT0FBUzFPLE1BQU1qQyxFQUFJQSxFQUFFdEUsU0FBUzRSLEdBQU8sR0FDcERyTCxNQUFNakMsRUFBSXNOLEVBQU1oQiw2QkFFSmdCLEVBQU9vbkIsSUFDZCxLQUdQenlCLE1BQU1waUIsR0FBTSxJQUNWb2lCLE1BQU02SixNQUVIQyxFQUFJa3NCLG1CQUlIaDJCLE1BQU1qQyxFQUFJOWhCLElBQVMrakIsTUFBTWpDLEVBQUlBLEVBQUU2YyxXQUFhNWEsTUFBTWpDLEVBQUlBLEVBQUUxaEIsZUFDdEQwaEIsSUFBTStMLEVBQUl6dEIsZ0JBRVcsb0JBQVpvckIsU0FDUm11QixPQUVpQixVQUNWeHVCLEtBQUssV0FBWTBDLFdBQ2pCMUMsS0FBSyxxQkFBc0JySixXQUMzQnFKLEtBQUsscUJBQXNCMEMsRUFBSXp0QixhQUVsQyxNQUVKLFNBRUQ0NUMsR0FBZ0IsRUFDaEJoSCxFQUFZbmxCLEVBQUlvc0IsV0FDWG40QixFQUFJLEVBQUdBLEVBQUk4TCxFQUFTbnBCLE9BQVFxZCxJQUFLLEtBQ25Da3hCLElBQWM2RyxFQUFRN0csRUFBV3BsQixFQUFTOUwsR0FBSTAwQixFQUFvQkwsR0FBUyxJQUM5RCxVQUdObkQsRUFBVTRCLGdCQUluQm9GLEdBQWlCaEgsUUFFRyxvQkFBWnhuQixTQUNSbXVCLE9BRWlCLFVBQ1Z4dUIsS0FBSyxXQUFZMEMsV0FDakIxQyxLQUFLLHNDQUF1QzBDLEVBQUlxc0IsV0FBWXRzQixLQUUvRCxTQXRDSXdCLEVBQU94QixFQUFVNG9CLE1BMkNoQ3p5QixNQUFNL2pCLEdBQU8sS0FDWG02QyxHQUFhLE1BQ1p6MkIsSUFBTS9mLEtBQU8zRCxNQUNYNDVDLEVBQWlCajJDLEdBQU0sSUFDYixJQUNLeXJCLEVBQU9vbkIsVUFJeEIyRCxHQUFjbjZDLEVBQUEsZ0JBRVJBLEVBQUEsYUFHSjZ0QixFQUFJN3RCLE9BQVNvdkIsRUFBTXB3QixTQUN4QmdCLEtBQU9vdkIsRUFBTXB3QixhQUVaLFNBY0YsU0FBZ0IwakMsRUFBVXRULEVBQU84UyxFQUFXd1csT0FDN0M3MEIsUUFBUXVMLFFBcGxCUXZCLEVBeWxCaEJ1c0IsR0FBaUIsRUFDZjVELFFBRUYzeUIsUUFBUTZlLE1BRU8sSUFDUHRULEVBQU9vbkIsT0FDWixLQUNDNkQsRUFBZ0J0MkIsTUFBTTJlLEVBQVM1NkIsY0FDaEN1eUMsR0FBaUI3RSxVQUFVOVMsRUFBVXRULEtBRTdCc1QsRUFBVXRULEVBQU9vbkIsRUFBb0IsS0FBTSxLQUFNa0MsT0FDdkQsSUFDRDJCLEVBQWUsSUFJUyxJQUF0QjNYLEVBQVM1NkIsVUFBa0I0NkIsRUFBUzRYLGFBQWE3eEIsY0FDMUM4eEIsZ0JBQWdCOXhCLGFBQ2IsR0FFVnpFLE9BQU9rZSxHQUFZLElBQ2pCMlgsRUFBUW5YLEVBQVV0VCxFQUFPb25CLFlBQ1ZwbkIsRUFBT29uQixHQUFvQixHQUNyQzlULE9BR0wseVFBcG5CUTdVLEVBOG5CUzZVLElBN25CdEIsSUFBSS9VLE1BQU1zbkIsRUFBUWIsUUFBUXZtQixHQUFLeEkseUJBQXVCL2pCLEVBQVd1c0IsT0Fpb0I5RDJzQixFQUFTOVgsRUFBUzdVLElBQ2xCNG9CLEVBQVl4QixFQUFRbEMsV0FBV3lILFFBSW5DcHJCLEVBQ0FvbkIsSUFJT2lFLFNBQVcsS0FBT2hFLEVBQ3pCeEIsRUFBUUwsWUFBWTRGLElBSWxCejJCLE1BQU1xTCxFQUFNZixnQkFDVm9wQixFQUFXcm9CLEVBQU1mLE9BQ2Zxc0IsRUFBWXZELEVBQVkvbkIsR0FDdkJxb0IsR0FBVSxLQUNWNTFCLElBQUlDLEVBQUksRUFBR0EsRUFBSThsQixFQUFJaVEsUUFBUXB6QyxTQUFVcWQsSUFDcEMrMUIsUUFBUS8xQixHQUFHMjFCLFFBRVI1cEIsSUFBTXVCLEVBQU12QixJQUNqQjZzQixFQUFXLEtBQ1I3NEIsSUFBSUMsRUFBSSxFQUFHQSxFQUFJOGxCLEVBQUk3ekIsT0FBT3RQLFNBQVVxZCxJQUNuQy9OLE9BQU8rTixHQUFHeXpCLFVBQVdrQyxPQUtyQkwsRUFBU0ssRUFBU3ozQyxLQUFLeXlCLEtBQUsya0IsVUFDOUJBLEVBQU85MkIsV0FFSnVCLElBQUlDLEVBQUksRUFBR0EsRUFBSXMxQixFQUFPaGQsSUFBSTMxQixPQUFRcWQsTUFDOUJzWSxJQUFJdFksc0JBSUgyMUIsS0FFSEEsRUFBU3BwQixPQUtwQnRLLE1BQU0weUIsS0FDS0EsR0FBWS9ULEdBQVcsRUFBRyxHQUM5QjNlLE1BQU0yZSxFQUFTL2dDLFFBQ04rZ0MsYUFLUHRULEVBQU9vbkIsRUFBb0I0RCxHQUNyQ2hyQixFQUFNdkIsSUFuR1A5SixNQUFNMmUsTUFBNkJBLElBeUc3QyxJQUFJblAsbUJBQ01vbkIsd0JBQ0FBLHlCQUNDLFNBQTJCdnJCLG9CQUNqQkEsRUFBT21tQixhQUk1QixTQUFTb0YsaUJBQWtCalksRUFBVXRULElBQy9Cc1QsRUFBUzFpQyxLQUFLdXpCLFlBQWNuRSxFQUFNcHZCLEtBQUt1ekIscUJBQ2pDbVAsRUFBVXRULEdBSXRCLFNBQVNxWixRQUFTL0YsRUFBVXRULE9BU3RCenJCLEVBQUtpM0MsRUFBUS82QyxFQVJYZzdDLEVBQVduWSxJQUFhNlMsVUFDeEJ1RixFQUFZMXJCLElBQVVtbUIsVUFDdEJ3RixFQUFVQyxzQkFBc0J0WSxFQUFTMWlDLEtBQUt1ekIsV0FBWW1QLEVBQVMzVSxTQUNuRWt0QixFQUFVRCxzQkFBc0I1ckIsRUFBTXB2QixLQUFLdXpCLFdBQVluRSxFQUFNckIsU0FFN0RtdEIsS0FDQUMsU0FHRHgzQyxLQUFPczNDLElBQ0RGLEVBQVFwM0MsS0FDWHMzQyxFQUFRdDNDLEdBQ1RpM0MsS0FRQ2pPLFNBQVdpTyxFQUFPcDVDLFFBQ2xCNDVDLE9BQVNSLEVBQU9udkMsZUFDVDVMLEVBQUssU0FBVXV2QixFQUFPc1QsR0FDN0I3aUMsRUFBSWlwQixLQUFPanBCLEVBQUlpcEIsSUFBSXV5QixvQkFDSHZ3QyxLQUFLakwsZ0JBVmRBLEVBQUssT0FBUXV2QixFQUFPc1QsR0FDM0I3aUMsRUFBSWlwQixLQUFPanBCLEVBQUlpcEIsSUFBSTRHLFlBQ041a0IsS0FBS2pMLE9BYXRCcTdDLEVBQWV6MkMsT0FBUSxLQUNuQjYyQyxpQkFDQ3o1QixJQUFJQyxFQUFJLEVBQUdBLEVBQUlvNUIsRUFBZXoyQyxPQUFRcWQsZUFDOUJvNUIsRUFBZXA1QixHQUFJLFdBQVlzTixFQUFPc1QsSUFHakRtWSxpQkFDYXpyQixFQUFPLFNBQVVrc0IsVUFNaENILEVBQWtCMTJDLHVCQUNMMnFCLEVBQU8sMkJBQ2Z2TixJQUFJQyxFQUFJLEVBQUdBLEVBQUlxNUIsRUFBa0IxMkMsT0FBUXFkLGVBQ2pDcTVCLEVBQWtCcjVCLEdBQUksbUJBQW9Cc04sRUFBT3NULE1BSzdEbVksTUFDRWwzQyxLQUFPbzNDLEVBQ0xFLEVBQVF0M0MsZUFFQW8zQyxFQUFRcDNDLEdBQU0sU0FBVSsrQixFQUFVQSxFQUFVb1ksR0FNL0RwM0IsSUFBTTYzQixlQUFpQjU2QyxPQUFPb1QsT0FBTyxNQUVyQyxTQUFTaW5DLHNCQUNQMW5CLEVBQ0ExSCxPQU9JOUosRUFBR2ppQixFQUxEd25CLEVBQU0xbUIsT0FBT29ULE9BQU8sVUFDckJ1ZixTQUVJak0sTUFHSnZGLEVBQUksRUFBR0EsRUFBSXdSLEVBQUs3dUIsT0FBUXFkLE9BQ3JCd1IsRUFBS3hSLElBQ0YwNUIsY0FFSEEsVUFBWUQsa0JBRWRFLGNBQWM1N0MsSUFBUUEsSUFDdEJpcEIsSUFBTWtMLGFBQWFwSSxFQUFHUSxTQUFVLGFBQWN2c0IsRUFBSTNCLE1BQU0sVUFHdkRtcEIsRUFHVCxTQUFTbzBCLGNBQWU1N0MsVUFDZkEsRUFBSTY3QyxTQUFjNzdDLEVBQUkzQixTQUFReUMsT0FBT2tDLEtBQUtoRCxFQUFJMjdDLGVBQWlCajhCLEtBQUssS0FHN0UsU0FBU284QixXQUFZOTdDLEVBQUs0eUIsRUFBTXJELEVBQU9zVCxFQUFVb1ksT0FDekNoMUIsRUFBS2ptQixFQUFJaXBCLEtBQU9qcEIsRUFBSWlwQixJQUFJMkosTUFDMUIzTSxRQUVHc0osRUFBTXZCLElBQUtodUIsRUFBS3V2QixFQUFPc1QsRUFBVW9ZLEdBQ3BDLE1BQU9qNUMsZUFDS0EsRUFBR3V0QixFQUFNckIscUJBQXNCbHVCLEVBQUkzQixTQUFRdTBCLFlBSzdELElBQUltcEIsYUFDRjFHLElBQ0EzaEIsWUFLRixTQUFTc29CLFlBQWFuWixFQUFVdFQsT0FDeEI1RSxFQUFPNEUsRUFBTWpCLHNCQUNmcEssTUFBTXlHLEtBQTRDLElBQW5DQSxFQUFLeGYsS0FBS29ELFFBQVEwdEMsY0FHakNqNEIsUUFBUTZlLEVBQVMxaUMsS0FBS2s3QixRQUFVclgsUUFBUXVMLEVBQU1wdkIsS0FBS2s3QixhQUduRHYzQixFQUFLK3lCLEVBQ0g3SSxFQUFNdUIsRUFBTXZCLElBQ1prdUIsRUFBV3JaLEVBQVMxaUMsS0FBS2s3QixVQUMzQkEsRUFBUTlMLEVBQU1wdkIsS0FBS2s3QixjQU1sQnYzQixLQUpEb2dCLE1BQU1tWCxFQUFNdEwsWUFDTlIsRUFBTXB2QixLQUFLazdCLE1BQVFqVSxVQUFXaVUsSUFHNUJBLElBQ0pBLEVBQU12M0IsR0FDTm80QyxFQUFTcDRDLEtBQ0greUIsV0FDRjdJLEVBQUtscUIsRUFBSyt5QixPQVNqQi95QixLQUhBa21CLE1BQVFFLFNBQVdtUixFQUFNMTVCLFFBQVV1NkMsRUFBU3Y2QyxlQUN2Q3FzQixFQUFLLFFBQVNxTixFQUFNMTVCLE9BRWxCdTZDLEVBQ05sNEIsUUFBUXFYLEVBQU12M0IsTUFDWml2QyxRQUFRanZDLEtBQ05xNEMsa0JBQWtCckosUUFBU0UsYUFBYWx2QyxJQUNsQzJ1QyxpQkFBaUIzdUMsTUFDdkI0MkMsZ0JBQWdCNTJDLEtBTTVCLFNBQVNzNEMsUUFBUzc5QixFQUFJemEsRUFBS25DLEdBQ3JCNGMsRUFBR2cyQixRQUFRenVCLFFBQVEsTUFBUSxjQUNqQnZILEVBQUl6YSxFQUFLbkMsR0FDWmt4QyxjQUFjL3VDLEdBR25COHVDLGlCQUFpQmp4QyxLQUNoQis0QyxnQkFBZ0I1MkMsTUFJSCxvQkFBUkEsR0FBNEMsVUFBZnlhLEVBQUdnMkIsUUFDcEMsT0FDQXp3QyxJQUNEdEQsYUFBYXNELEVBQUtuQyxJQUVkOHdDLGlCQUFpQjN1QyxLQUN2QnRELGFBQWFzRCxFQUFLNnVDLHVCQUF1Qjd1QyxFQUFLbkMsSUFDeENveEMsUUFBUWp2QyxHQUNiOHVDLGlCQUFpQmp4QyxLQUNoQnc2QyxrQkFBa0JySixRQUFTRSxhQUFhbHZDLE1BRXhDdTRDLGVBQWV2SixRQUFTaHZDLEVBQUtuQyxlQUd0QjRjLEVBQUl6YSxFQUFLbkMsR0FJekIsU0FBUzI2QyxZQUFhLzlCLEVBQUl6YSxFQUFLbkMsTUFDekJpeEMsaUJBQWlCanhDLEtBQ2hCKzRDLGdCQUFnQjUyQyxPQUNkLElBTUhrbUIsT0FBU0MsT0FDTSxhQUFmMUwsRUFBR2cyQixTQUNLLGdCQUFSendDLEdBQW1DLEtBQVZuQyxJQUFpQjRjLEVBQUdnK0IsT0FDN0MsR0FLR2w3QixpQkFBaUIsaUJBSmRtN0IsRUFBVXg2QyxLQUNaeTZDLDZCQUNDNTZCLG9CQUFvQixRQUFTMjZCLE9BSS9CRCxRQUFTLElBRVgvN0MsYUFBYXNELEVBQUtuQyxJQUl6QixJQUFJMDVCLGNBQ00yZ0IsbUJBQ0FBLGFBS1YsU0FBU1UsWUFBYTdaLEVBQVV0VCxPQUN4QmhSLEVBQUtnUixFQUFNdkIsSUFDWDd0QixFQUFPb3ZCLEVBQU1wdkIsS0FDYnc4QyxFQUFVOVosRUFBUzFpQyxVQUV2QjZqQixRQUFRN2pCLEVBQUttekMsY0FDYnR2QixRQUFRN2pCLEVBQUs2a0MsU0FDWGhoQixRQUFRMjRCLElBQ04zNEIsUUFBUTI0QixFQUFRckosY0FDaEJ0dkIsUUFBUTI0QixFQUFRM1gsY0FPbEI0WCxFQUFNM0osaUJBQWlCMWpCLEdBR3JCc3RCLEVBQWtCdCtCLEVBQUd1K0IsbUJBQ3ZCNTRCLE1BQU0yNEIsT0FDRm44QixPQUFPazhCLEVBQUtwSixlQUFlcUosS0FJL0JELElBQVFyK0IsRUFBR3crQixlQUNWdjhDLGFBQWEsUUFBU284QyxLQUN0QkcsV0FBYUgsSUFJcEIsSUEwWUk1bUIsSUFBSzVRLElBQUt2WSxJQUFLbXdDLFFBQVNDLGNBQWVDLGlCQXNGdkNDLE9BaGVBQyxjQUNNVixtQkFDQUEsYUFLSlcsb0JBQXNCLGdCQUU1QixTQUFTQyxhQUFjQyxPQVNqQm4zQixFQUFHbzNCLEVBQU12N0IsRUFBR3NwQixFQUFZa1MsRUFSeEJDLEdBQVcsRUFDWEMsR0FBVyxFQUNYQyxHQUFtQixFQUNuQkMsR0FBVSxFQUNWQyxFQUFRLEVBQ1JDLEVBQVMsRUFDVEMsRUFBUSxFQUNSQyxFQUFrQixNQUdqQmg4QixFQUFJLEVBQUdBLEVBQUlzN0IsRUFBSTM0QyxPQUFRcWQsU0FDbkJtRSxJQUNIbTNCLEVBQUkxaUMsV0FBV29ILEdBQ2Z5N0IsRUFDUSxLQUFOdDNCLEdBQXVCLEtBQVRvM0IsT0FBMEIsUUFDdkMsR0FBSUcsRUFDQyxLQUFOdjNCLEdBQXVCLEtBQVRvM0IsT0FBMEIsUUFDdkMsR0FBSUksRUFDQyxLQUFOeDNCLEdBQXVCLEtBQVRvM0IsT0FBa0MsUUFDL0MsR0FBSUssRUFDQyxLQUFOejNCLEdBQXVCLEtBQVRvM0IsT0FBeUIsUUFDdEMsR0FDQyxNQUFOcDNCLEdBQzBCLFFBQXRCdkwsV0FBV29ILEVBQUksSUFDTyxNQUExQnM3QixFQUFJMWlDLFdBQVdvSCxFQUFJLElBQ2xCNjdCLEdBQVVDLEdBQVdDLEVBU2pCLFFBQ0c1M0IsUUFDRCxNQUFpQixFQUFNLFdBQ3ZCLE1BQWlCLEVBQU0sV0FDdkIsTUFBeUIsRUFBTSxXQUMvQixPQUFlLFdBQ2YsT0FBZSxXQUNmLE9BQWdCLFdBQ2hCLE9BQWdCLFdBQ2hCLFFBQWUsV0FDZixXQUVHLEtBQU5BLEVBQVksU0FDVm9rQixFQUFJdm9CLEVBQUksRUFDUjJWLFNBRUc0UyxHQUFLLEdBRUEsU0FETitTLEVBQUloM0IsT0FBT2lrQixJQURGQSxLQUlWNVMsR0FBTXlsQixvQkFBb0IxNUMsS0FBS2kwQixRQUN4QixjQTVCS24yQixJQUFmOHBDLEtBRWdCdHBCLEVBQUksSUFDVHM3QixFQUFJL3RDLE1BQU0sRUFBR3lTLEdBQUdpOEIscUJBcUMxQkMsS0FDTlYsSUFBWUEsT0FBZXh5QyxLQUFLc3lDLEVBQUkvdEMsTUFBTXl1QyxFQUFpQmg4QixHQUFHaThCLFVBQzdDajhCLEVBQUksVUFSTHhnQixJQUFmOHBDLElBQ1dnUyxFQUFJL3RDLE1BQU0sRUFBR3lTLEdBQUdpOEIsT0FDQSxJQUFwQkQsT0FTUFIsTUFDR3g3QixFQUFJLEVBQUdBLEVBQUl3N0IsRUFBUTc0QyxPQUFRcWQsTUFDakJtOEIsV0FBVzdTLEVBQVlrUyxFQUFReDdCLFdBSXpDc3BCLEVBR1QsU0FBUzZTLFdBQVliLEVBQUtqK0MsT0FDbEIyaUIsRUFBSTNpQixFQUFPd21CLFFBQVEsUUFDckI3RCxFQUFJLGVBRVEzaUIsUUFBWWkrQyxVQUVwQmwvQyxFQUFPaUIsRUFBT2tRLE1BQU0sRUFBR3lTLEdBQ3ZCaGQsRUFBTzNGLEVBQU9rUSxNQUFNeVMsRUFBSSxnQkFDaEI1akIsUUFBVWsvQyxHQUFlLE1BQVR0NEMsRUFBZSxJQUFNQSxFQUFPQSxHQVM5RCxTQUFTbzVDLFNBQVV2eUIsRUFBS3d5QixXQUNkcCtDLHlCQUF5QjRyQixHQUluQyxTQUFTeXlCLG9CQUNQMzJCLEVBQ0E5akIsVUFFTzhqQixFQUNIQSxFQUFRblYsYUFBSXFWLFVBQUtBLEVBQUVoa0IsS0FBTXhFLGdCQUFPb1AsVUFBS0EsT0FJM0MsU0FBUzh2QyxRQUFTamdDLEVBQUlsZ0IsRUFBTXNELEVBQU8yOEMsRUFBT0csSUFDdkNsZ0MsRUFBRy9aLFFBQVUrWixFQUFHL1osV0FBYXlHLEtBQUt5ekMsbUJBQWVyZ0QsUUFBTXNELFVBQU84OEMsR0FBV0gsTUFDdkVLLE9BQVEsRUFHYixTQUFTQyxRQUFTcmdDLEVBQUlsZ0IsRUFBTXNELEVBQU8yOEMsRUFBT0csSUFDMUJBLEVBQ1RsZ0MsRUFBR3NnQyxlQUFpQnRnQyxFQUFHc2dDLGlCQUN2QnRnQyxFQUFHOGMsUUFBVTljLEVBQUc4YyxXQUNmcHdCLEtBQUt5ekMsbUJBQWVyZ0QsUUFBTXNELFVBQU84OEMsR0FBV0gsTUFDL0NLLE9BQVEsRUFJYixTQUFTRyxXQUFZdmdDLEVBQUlsZ0IsRUFBTXNELEVBQU8yOEMsS0FDakNTLFNBQVMxZ0QsR0FBUXNELElBQ2pCcTlDLFVBQVUvekMsS0FBS3l6QyxtQkFBZXJnRCxRQUFNc0QsR0FBUzI4QyxJQUdsRCxTQUFTVyxhQUNQMWdDLEVBQ0FsZ0IsRUFDQXc5QyxFQUNBbDZDLEVBQ0FpSyxFQUNBc3pDLEVBQ0F2RCxFQUNBMkMsSUFFQy8vQixFQUFHbVYsYUFBZW5WLEVBQUdtVixnQkFBa0J6b0IsS0FBS3l6QyxtQkFDM0NyZ0QsVUFDQXc5QyxRQUNBbDZDLE1BQ0FpSyxlQUNBc3pDLFlBQ0F2RCxHQUNDMkMsTUFDQUssT0FBUSxFQUdiLFNBQVNRLHNCQUF1QjluQyxFQUFRaFosRUFBTW9nRCxVQUNyQ0EsUUFDR3BnRCxPQUFTZ1osT0FDZkEsRUFBU2haLEVBR2YsU0FBUytnRCxXQUNQN2dDLEVBQ0FsZ0IsRUFDQXNELEVBQ0FnNkMsRUFDQTBELEVBQ0EvekIsRUFDQWd6QixFQUNBRyxPQWlESWEsSUEvQ1EzRCxHQUFhNzNCLFlBSXZCd0gsR0FDQXF3QixFQUFVNEQsU0FBVzVELEVBQVV4aEIsV0FHN0IsMkZBRUFta0IsR0FPQTNDLEVBQVU2RCxNQUNSZixJQUNLLElBQUlwZ0QsZ0NBQWtDQSxNQUMzQixVQUFUQSxNQUNGLHFCQUNBczlDLEVBQVU2RCxPQUVWN0QsRUFBVThELFNBQ2ZoQixJQUNLLElBQUlwZ0QsNEJBQThCQSxNQUN2QixVQUFUQSxNQUNGLFlBS1BzOUMsRUFBVXRoQixpQkFDTHNoQixFQUFVdGhCLFVBQ1Y4a0Isc0JBQXNCLElBQUs5Z0QsRUFBTW9nRCxJQUV0QzlDLEVBQVVqekIsY0FDTGl6QixFQUFVanpCLE9BQ1Z5MkIsc0JBQXNCLElBQUs5Z0QsRUFBTW9nRCxJQUd0QzlDLEVBQVV4aEIsaUJBQ0x3aEIsRUFBVXhoQixVQUNWZ2xCLHNCQUFzQixJQUFLOWdELEVBQU1vZ0QsSUFJdEM5QyxFQUFVK0QsZUFDTC9ELEVBQVUrRCxTQUNSbmhDLEVBQUdvaEMsZUFBaUJwaEMsRUFBR29oQyxvQkFFdkJwaEMsRUFBRytnQyxTQUFXL2dDLEVBQUcrZ0MsZUFHdEJNLEVBQWFsQixjQUFlLzhDLE1BQU9BLEVBQU11OEMsZUFBUU8sR0FBV0gsR0FDOUQzQyxJQUFjNzNCLGdCQUNMNjNCLFVBQVlBLE9BR25CbmlCLEVBQVc4bEIsRUFBT2poRCxHQUVwQnFILE1BQU1tQyxRQUFRMnhCLEtBQ0pBLEVBQVMyVyxRQUFReVAsR0FBY3BtQixFQUFTdnVCLEtBQUsyMEMsS0FFbER2aEQsR0FERW03QixFQUNNNmxCLEdBQWFPLEVBQVlwbUIsSUFBYUEsRUFBVW9tQixHQUVoREEsSUFHZGpCLE9BQVEsRUFHYixTQUFTa0Isa0JBQ1B0aEMsRUFDQWxnQixVQUVPa2dCLEVBQUd1aEMsWUFBWSxJQUFNemhELElBQzFCa2dCLEVBQUd1aEMsWUFBWSxVQUFZemhELElBQzNCa2dCLEVBQUd1aEMsWUFBWXpoRCxHQUduQixTQUFTMGhELGVBQ1B4aEMsRUFDQWxnQixFQUNBMmhELE9BRU1DLEVBQ0pDLGlCQUFpQjNoQyxFQUFJLElBQU1sZ0IsSUFDM0I2aEQsaUJBQWlCM2hDLEVBQUksVUFBWWxnQixNQUNmLE1BQWhCNGhELFNBQ0szQyxhQUFhMkMsR0FDZixJQUFrQixJQUFkRCxFQUFxQixLQUN4QkcsRUFBY0QsaUJBQWlCM2hDLEVBQUlsZ0IsTUFDdEIsTUFBZjhoRCxTQUNLamlDLEtBQUs4RyxVQUFVbTdCLElBUzVCLFNBQVNELGlCQUNQM2hDLEVBQ0FsZ0IsRUFDQStoRCxPQUVJejdCLEtBQzZCLE9BQTVCQSxFQUFNcEcsRUFBR3dnQyxTQUFTMWdELFlBQ2ZpbkIsRUFBTy9HLEVBQUd5Z0MsVUFDUC84QixFQUFJLEVBQUc2RSxFQUFJeEIsRUFBSzFnQixPQUFRcWQsRUFBSTZFLEVBQUc3RSxPQUNsQ3FELEVBQUtyRCxHQUFHNWpCLE9BQVNBLEVBQU0sR0FDcEJ1UyxPQUFPcVIsRUFBRyxnQkFLakJtK0IsVUFDSzdoQyxFQUFHd2dDLFNBQVMxZ0QsR0FFZHNtQixFQUdULFNBQVMwN0Isd0JBQ1A5aEMsRUFDQWxnQixXQUVNaW5CLEVBQU8vRyxFQUFHeWdDLFVBQ1AvOEIsRUFBSSxFQUFHNkUsRUFBSXhCLEVBQUsxZ0IsT0FBUXFkLEVBQUk2RSxFQUFHN0UsSUFBSyxLQUNyQ3V3QixFQUFPbHRCLEVBQUtyRCxNQUNkNWpCLEVBQUtzRixLQUFLNnVDLEVBQUtuMEMsZUFDWnVTLE9BQU9xUixFQUFHLEdBQ1J1d0IsR0FLYixTQUFTa00sYUFDUDc0QixFQUNBeTRCLFVBRUlBLElBQ2lCLE1BQWZBLEVBQU1oNUMsVUFDSEEsTUFBUWc1QyxFQUFNaDVDLE9BRUosTUFBYmc1QyxFQUFNM0YsUUFDSEEsSUFBTTJGLEVBQU0zRixNQUdkOXlCLEVBUVQsU0FBU3k2QixrQkFDUC9oQyxFQUNBNWMsRUFDQWc2QyxTQUV5QkEsaUJBR3JCNEUsRUFEd0IsaUJBSXhCLDhDQUlBemxDLE1BQ2dCLE1BQU15bEMsV0FFcEJDLEVBQWFDLGtCQUFrQjkrQyxFQUFPNCtDLEtBRXpDbGQsaUJBQ1UxaEMsaUJBQ0N1YyxLQUFLOEcsVUFBVXJqQiwrQkFDcUI2K0MsT0FPcEQsU0FBU0Msa0JBQ1A5K0MsRUFDQTYrQyxPQUVNaDVCLEVBQU1rNUIsV0FBVy8rQyxVQUNQLE9BQVo2bEIsRUFBSTFqQixJQUNJbkMsTUFBUzYrQyxVQUVKaDVCLEVBQUkrMUIsU0FBUS8xQixFQUFJMWpCLFNBQVEwOEMsTUF1QjNDLFNBQVNFLFdBQVkvN0IsUUFHYkEsRUFBSXU1QixXQUNKdjVCLEVBQUkvZixPQUVOK2YsRUFBSW1CLFFBQVEsS0FBTyxHQUFLbkIsRUFBSXZFLFlBQVksS0FBTzRWLElBQU0saUJBQzdDclIsRUFBSXZFLFlBQVksT0FDWCxPQUVOdUUsRUFBSW5WLE1BQU0sRUFBR3d0QyxhQUNiLElBQU1yNEIsRUFBSW5WLE1BQU13dEMsUUFBVSxHQUFLLFVBSS9CcjRCLE1BQ0EsY0FLTEEsVUFDSXM0QixjQUFnQkMsaUJBQW1CLEdBRXJDeUQsT0FHRkMsa0JBRkV0akIsb0JBR1F6d0IsS0FDSyxLQUFSQSxrQkFDSUEsZ0JBS1Y4WCxFQUFJblYsTUFBTSxFQUFHeXRDLG1CQUNidDRCLEVBQUluVixNQUFNeXRDLGNBQWdCLEVBQUdDLG1CQUl0QyxTQUFTNWYsY0FDQWxZLElBQUl2SyxhQUFhbWlDLFNBRzFCLFNBQVMyRCxhQUNBM0QsU0FBV2huQixJQUdwQixTQUFTNHFCLGNBQWUvekMsVUFDUCxLQUFSQSxHQUF3QixLQUFSQSxFQUd6QixTQUFTZzBDLGFBQWNoMEMsT0FDakJpMEMsRUFBWSxvQkFDQTlELFNBQ1IyRCxVQUVGQyxnQkFERXRqQixvQkFFUXp3QixXQUdGLEtBQVJBLE9BQ1EsS0FBUkEsT0FDYyxJQUFkaTBDLEVBQWlCLGtCQUNBOUQsZUFNekIsU0FBUytELFlBQWFsMEMsV0FDZG0wQyxFQUFjbjBDLEdBQ1o4ekMsVUFDQXJqQixVQUNNMGpCLEtBWWhCbjlCLElBNkxJbzlCLFNBN0xFQyxZQUFjLE1BQ2RDLHFCQUF1QixNQUU3QixTQUFTOWQsTUFDUDlrQixFQUNBdmUsRUFDQW9oRCxVQUVTQSxNQUNIei9DLEVBQVEzQixFQUFJMkIsTUFDWmc2QyxFQUFZMzdDLEVBQUkyN0MsVUFDaEI3NUMsRUFBTXljLEVBQUd6YyxJQUNUUyxFQUFPZ2MsRUFBR3dnQyxTQUFTeDhDLFFBS1gsVUFBUlQsR0FBNEIsU0FBVFMsVUFFbkIsSUFBSWdjLEVBQUd6YyxpQkFBZ0JILG9GQUV2QjRjLEVBQUd1aEMsWUFBWSxZQUtqQnZoQyxFQUFHdW9CLG1DQUNhdm9CLEVBQUk1YyxFQUFPZzZDLElBRXRCLEVBQ0YsR0FBWSxXQUFSNzVDLFlBQ0N5YyxFQUFJNWMsRUFBT2c2QyxRQUNoQixHQUFZLFVBQVI3NUMsR0FBNEIsYUFBVFMsbUJBQ1hnYyxFQUFJNWMsRUFBT2c2QyxRQUN2QixHQUFZLFVBQVI3NUMsR0FBNEIsVUFBVFMsZ0JBQ2RnYyxFQUFJNWMsRUFBT2c2QyxRQUNwQixHQUFZLFVBQVI3NUMsR0FBMkIsYUFBUkEsa0JBQ1p5YyxFQUFJNWMsRUFBT2c2QyxPQUN0QixDQUFBLElBQUtwK0IsT0FBTzZWLGNBQWN0eEIsNEJBQ2J5YyxFQUFJNWMsRUFBT2c2QyxJQUV0QixTQUdMLElBQUlwOUIsRUFBR3pjLGlCQUFnQkgsMExBSXZCNGMsRUFBR3VoQyxZQUFZLG1CQUtaLEVBR1QsU0FBU3VCLGlCQUNQOWlDLEVBQ0E1YyxFQUNBZzZDLE9BRU03Z0MsRUFBUzZnQyxHQUFhQSxFQUFVN2dDLE9BQ2hDd21DLEVBQWV2QixlQUFleGhDLEVBQUksVUFBWSxPQUM5Q2dqQyxFQUFtQnhCLGVBQWV4aEMsRUFBSSxlQUFpQixPQUN2RGlqQyxFQUFvQnpCLGVBQWV4aEMsRUFBSSxnQkFBa0IsZ0JBQ3ZEQSxFQUFJLFVBQ1YsaUJBQWlCNWMsVUFDVkEsTUFBUzIvQyxVQUNPLFNBQXJCQyxPQUNTNS9DLGFBQ0VBLE1BQVM0L0MsbUJBR2JoakMsRUFBSSxTQUNiLFdBQVc1YywyQ0FFYzQvQyxRQUFzQkMsdUNBRWxDMW1DLEVBQVMsTUFBUXdtQyxFQUFlLElBQU1BLGdEQUVyQmIsa0JBQWtCOStDLEVBQU8sd0NBQ3BDOCtDLGtCQUFrQjkrQyxFQUFPLHdEQUNuQzgrQyxrQkFBa0I5K0MsRUFBTyxXQUNsQyxNQUFNLEdBSVYsU0FBUzgvQyxjQUNQbGpDLEVBQ0E1YyxFQUNBZzZDLE9BRU03Z0MsRUFBUzZnQyxHQUFhQSxFQUFVN2dDLE9BQ2xDd21DLEVBQWV2QixlQUFleGhDLEVBQUksVUFBWSxlQUUxQ0EsRUFBSSxnQkFBaUI1YyxTQURkbVosUUFBZXdtQyxNQUFrQkEsbUJBRXJDL2lDLEVBQUksU0FBVWtpQyxrQkFBa0I5K0MsRUFBTzIvQyxHQUFlLE1BQU0sR0FHekUsU0FBU0ksVUFDUG5qQyxFQUNBNWMsRUFDQWc2QyxPQVNJZ0csRUFBTyx3QkFOUywwSkFETGhHLEdBQWFBLEVBQVU3Z0MsT0FJakIsVUFBWSw0QkFLdEJ5RCxFQUFJLFdBRFJvakMsTUFBV2xCLGtCQUFrQjkrQyxFQUZqQiw2REFHWSxNQUFNLEdBR3ZDLFNBQVNpZ0QsZ0JBQ1ByakMsRUFDQTVjLEVBQ0FnNkMsT0FFTXA1QyxFQUFPZ2MsRUFBR3dnQyxTQUFTeDhDLEtBS2pCWixFQUFRNGMsRUFBR3dnQyxTQUFTLGlCQUFtQnhnQyxFQUFHd2dDLFNBQVMsVUFDbkQ4QyxFQUFjdGpDLEVBQUd3Z0MsU0FBUyxnQkFBa0J4Z0MsRUFBR3dnQyxTQUFTLFlBQzFEcDlDLElBQVVrZ0QsRUFBYSxLQUNuQnYzQyxFQUFVaVUsRUFBR3dnQyxTQUFTLGdCQUFrQixlQUFpQixnQkFFN0R6MEMsT0FBZTNJLGtIQUVmNGMsRUFBR3VoQyxZQUFZeDFDLFVBS1VxeEMsbUNBQ3pCbUcsR0FBd0IxVixHQUFpQixVQUFUN3BDLEVBQ2hDdWMsRUFBUXN0QixFQUNWLFNBQ1MsVUFBVDdwQyxFQUNFMitDLFlBQ0EsUUFFRlgsRUFBa0Isc0JBQ2xCckMsTUFDZ0IsOEJBRWhCcGpDLE1BQ2dCLE1BQU15bEMsV0FHdEJvQixFQUFPbEIsa0JBQWtCOStDLEVBQU80K0MsR0FDaEN1QixNQUNLLHFDQUFxQ0gsV0FHdENwakMsRUFBSSxZQUFhNWMsa0JBQ2Q0YyxFQUFJTyxFQUFPNmlDLEVBQU0sTUFBTSxJQUM5QnpELEdBQVFwakMsZUFDQ3lELEVBQUksT0FBUSxrQkFVM0IsU0FBU3dqQyxnQkFBaUJybkIsTUFFcEJ4VyxNQUFNd1csRUFBR3dtQixjQUFlLEtBRXBCcGlDLEVBQVFrTCxLQUFPLFNBQVcsVUFDN0JsTCxNQUFZNEIsT0FBT2dhLEVBQUd3bUIsYUFBY3htQixFQUFHNWIsZUFDbkM0YixFQUFHd21CLGFBS1JoOUIsTUFBTXdXLEVBQUd5bUIsMkJBQ1JhLFVBQVl0aEMsT0FBT2dhLEVBQUd5bUIsc0JBQXVCem1CLEVBQUdzbkIsbUJBQzVDdG5CLEVBQUd5bUIsdUJBTWQsU0FBU2Msb0JBQXFCbmpDLEVBQU9rWSxFQUFTcUQsT0FDdENtTixFQUFVeVosZ0JBQ1QsU0FBU3haLElBRUYsT0FEQXpRLEVBQVFqeUIsTUFBTSxLQUFNUyxxQkFFckJzWixFQUFPMm9CLEVBQWFwTixFQUFTbU4sSUFRNUMzakIsSUFBTXErQixnQkFBa0IzcUIsb0JBQXNCaE4sTUFBUWdNLE9BQU9oTSxLQUFLLEtBQU8sSUFFekUsU0FBUzQzQixNQUNQOWpELEVBQ0EyNEIsRUFDQXFELEVBQ0FGLE1BUUkrbkIsZ0JBQWlCLEtBQ2JFLEVBQW9CcFgsc0JBQ3BCcGIsRUFBV29ILElBQ1BwSCxFQUFTeXlCLFNBQVcsU0FBVXJnRCxRQUtsQ2dkLFNBQVdoZCxFQUFFc2dELGlCQUVidFcsV0FBYW9XLEdBRUMsTUFBZHBXLGFBSUFodEIsT0FBT3VqQyxnQkFBa0JsaUQsZ0JBRXBCdXZCLEVBQVM3cUIsTUFBTS9HLEtBQU13SCxxQkFJekI2YixpQkFDUGhqQixFQUNBMjRCLEVBQ0F0TSx5QkFDTTJQLFVBQVNGLEdBQ1hFLEdBSVIsU0FBU21vQixTQUNQbmtELEVBQ0EyNEIsRUFDQXFELEVBQ0FtTixJQUVDQSxHQUFXeVosVUFBVXAvQixvQkFDcEJ4akIsRUFDQTI0QixFQUFRcXJCLFVBQVlyckIsRUFDcEJxRCxHQUlKLFNBQVNvb0IsbUJBQW9CNWYsRUFBVXRULE9BQ2pDdkwsUUFBUTZlLEVBQVMxaUMsS0FBS3U2QixNQUFPMVcsUUFBUXVMLEVBQU1wdkIsS0FBS3U2QixTQUc5Q0EsRUFBS25MLEVBQU1wdkIsS0FBS3U2QixPQUNoQkMsRUFBUWtJLEVBQVMxaUMsS0FBS3U2QixnQkFDakJuTCxFQUFNdkIsb0JBQ0QwTSxtQkFDQUEsRUFBSUMsRUFBT3duQixNQUFPSyxTQUFVUCxvQkFBcUIxeUIsRUFBTXJCLHVCQUM1RHpzQixHQUdiLElBT0lpaEQsYUFQQXBELGVBQ01tRCwwQkFDQUEsb0JBT1YsU0FBU0UsZUFBZ0I5ZixFQUFVdFQsT0FDN0J2TCxRQUFRNmUsRUFBUzFpQyxLQUFLMitCLFlBQWE5YSxRQUFRdUwsRUFBTXB2QixLQUFLMitCLGVBR3REaDdCLEVBQUsreUIsRUFDSDdJLEVBQU11QixFQUFNdkIsSUFDWjQwQixFQUFXL2YsRUFBUzFpQyxLQUFLMitCLGFBQzNCdDZCLEVBQVErcUIsRUFBTXB2QixLQUFLMitCLGlCQU1sQmg3QixLQUpEb2dCLE1BQU0xZixFQUFNdXJCLFlBQ05SLEVBQU1wdkIsS0FBSzIrQixTQUFXMVgsVUFBVzVpQixJQUcvQm8rQyxFQUNONStCLFFBQVF4ZixFQUFNVixRQUNaQSxHQUFPLFFBR1ZBLEtBQU9VLEVBQU8sTUFDWEEsRUFBTVYsR0FJQSxnQkFBUkEsR0FBaUMsY0FBUkEsRUFBcUIsSUFDNUN5ckIsRUFBTXhCLGFBQWdCQSxTQUFTbnBCLE9BQVMsR0FDeENpeUIsSUFBUStyQixFQUFTOStDLFlBR1MsSUFBMUJrcUIsRUFBSXFzQixXQUFXejFDLFVBQ2Jrd0MsWUFBWTltQixFQUFJcXNCLFdBQVcsT0FRdkIsVUFBUnYyQyxHQUFtQit5QixJQUFRK3JCLEVBQVM5K0MsTUFJNUIsVUFBUkEsRUFBaUIsR0FHZisrQyxPQUFTaHNCLE1BRVBpc0IsRUFBUzkrQixRQUFRNlMsR0FBTyxHQUFLN3JCLE9BQU82ckIsR0FDdENrc0Isa0JBQWtCLzBCLEVBQUs4MEIsT0FDckJuaEQsTUFBUW1oRCxRQUVULEdBQVksY0FBUmgvQyxHQUF1Qmd3QyxNQUFNOWxCLEVBQUl1bUIsVUFBWXZ3QixRQUFRZ0ssRUFBSXp0QixXQUFZLGVBRS9EbWlELGNBQWdCcmlELFNBQVNDLGNBQWMsUUFDekNDLFVBQVksUUFBUXMyQixtQkFDM0Jtc0IsRUFBTU4sYUFBYXRJLFdBQ2xCcHNCLEVBQUlvc0IsY0FDTHRGLFlBQVk5bUIsRUFBSW9zQixpQkFFZjRJLEVBQUk1SSxjQUNMMTVDLFlBQVlzaUQsRUFBSTVJLG1CQUdsQnQyQyxHQUFPK3lCLElBUWpCLFNBQVNrc0Isa0JBQW1CLzBCLEVBQUtpMUIsVUFDdEJqMUIsRUFBSWsxQixZQUNLLFdBQWhCbDFCLEVBQUl1bUIsU0FDSjRPLHFCQUFxQm4xQixFQUFLaTFCLElBQzFCRyxxQkFBcUJwMUIsRUFBS2kxQixJQUk5QixTQUFTRSxxQkFBc0JuMUIsRUFBS2kxQixPQUc5QkksR0FBYSxRQUdFaGpELFNBQVNpakQsZ0JBQWtCdDFCLEVBQU8sTUFBT2hzQixXQUNyRHFoRCxHQUFjcjFCLEVBQUlyc0IsUUFBVXNoRCxFQUdyQyxTQUFTRyxxQkFBc0JwMUIsRUFBS3dELE9BQzVCN3ZCLEVBQVFxc0IsRUFBSXJzQixNQUNaZzZDLEVBQVkzdEIsRUFBSXUxQixlQUNsQnIvQixNQUFNeTNCLEdBQVksSUFDaEJBLEVBQVU3Z0MsY0FDTG1LLFNBQVN0akIsS0FBV3NqQixTQUFTdU0sTUFFbENtcUIsRUFBVXVDLFlBQ0x2OEMsRUFBTXU4QyxTQUFXMXNCLEVBQU8wc0IsY0FHNUJ2OEMsSUFBVTZ2QixFQUduQixJQUFJc04saUJBQ002akIsc0JBQ0FBLGdCQUtKYSxlQUFpQng5QixPQUFPLFNBQVV5OUIsT0FDaENqOEIsS0FFQWs4QixFQUFvQixpQkFDbEJuK0IsTUFGYyxpQkFFT2pWLFFBQVEsU0FBVXVWLE1BQ3pDQSxFQUFNLEtBQ0ZnbkIsRUFBTWhuQixFQUFLTixNQUFNbStCLEtBQ25COStDLE9BQVMsSUFBTTRpQixFQUFJcWxCLEVBQUksR0FBR3FSLFFBQVVyUixFQUFJLEdBQUdxUixXQUc1QzEyQixJQUlULFNBQVNtOEIsbUJBQW9CeGpELE9BQ3JCNGtDLEVBQVE2ZSxzQkFBc0J6akQsRUFBSzRrQyxjQUdsQzVrQyxFQUFLMGpELFlBQ1J6OEIsT0FBT2puQixFQUFLMGpELFlBQWE5ZSxHQUN6QkEsRUFJTixTQUFTNmUsc0JBQXVCRSxVQUMxQnArQyxNQUFNbUMsUUFBUWk4QyxHQUNUdjhCLFNBQVN1OEIsR0FFVSxpQkFBakJBLEVBQ0ZOLGVBQWVNLEdBRWpCQSxFQU9ULFNBQVNDLFNBQVV4MEIsRUFBT3kwQixPQUVwQkMsRUFERXo4QixRQUdGdzhCLFVBQ0U3USxFQUFZNWpCLEVBQ1Q0akIsRUFBVTVrQixzQkFDSDRrQixFQUFVNWtCLGtCQUFrQjJXLFNBRXpCaU8sRUFBVWh6QyxPQUN0QjhqRCxFQUFZTixtQkFBbUJ4USxFQUFVaHpDLGVBRW5DcW5CLEVBQUt5OEIsSUFLYkEsRUFBWU4sbUJBQW1CcDBCLEVBQU1wdkIsZUFDakNxbkIsRUFBS3k4QixXQUdWL1EsRUFBYTNqQixFQUNUMmpCLEVBQWFBLEVBQVcxa0IsUUFDMUIwa0IsRUFBVy95QyxPQUFTOGpELEVBQVlOLG1CQUFtQnpRLEVBQVcveUMsZUFDekRxbkIsRUFBS3k4QixVQUdUejhCLEVBS1QzRCxJQXlCSXFnQyxXQXpCRUMsU0FBVyxNQUNYQyxZQUFjLGlCQUNkQyxpQkFBVzlsQyxFQUFJbGdCLEVBQU1zbUIsTUFFckJ3L0IsU0FBU3hnRCxLQUFLdEYsS0FDYjBtQyxNQUFNdWYsWUFBWWptRCxFQUFNc21CLFFBQ3RCLEdBQUl5L0IsWUFBWXpnRCxLQUFLZ2hCLEtBQ3ZCb2dCLE1BQU11ZixZQUFZNzlCLFVBQVVwb0IsR0FBT3NtQixFQUFJL2xCLFFBQVF3bEQsWUFBYSxJQUFLLGlCQUMvRCxLQUNDRyxFQUFpQkMsVUFBVW5tRCxNQUM3QnFILE1BQU1tQyxRQUFROGMsT0FJWDNDLElBQUlDLEVBQUksRUFBRytULEVBQU1yUixFQUFJL2YsT0FBUXFkLEVBQUkrVCxFQUFLL1QsTUFDdEM4aUIsTUFBTXdmLEdBQWtCNS9CLEVBQUkxQyxVQUc5QjhpQixNQUFNd2YsR0FBa0I1L0IsSUFLM0I4L0IsYUFBZSxTQUFVLE1BQU8sTUFHaENELFVBQVl4K0IsT0FBTyxTQUFVME8saUJBQ3BCd3ZCLFlBQWM3akQsU0FBU0MsY0FBYyxPQUFPeWtDLE1BRTVDLGNBRE41ZSxTQUFTdU8sS0FDVUEsS0FBUXd2QixrQkFDekJ4dkIsVUFFSGd3QixFQUFVaHdCLEVBQUtuTyxPQUFPLEdBQUdGLGNBQWdCcU8sRUFBS2xsQixNQUFNLEdBQ2pEeVMsRUFBSSxFQUFHQSxFQUFJd2lDLFlBQVk3L0MsT0FBUXFkLElBQUssS0FDckM1akIsRUFBT29tRCxZQUFZeGlDLEdBQUt5aUMsS0FDMUJybUQsS0FBUTZsRCxrQkFDSDdsRCxLQUtiLFNBQVNzbUQsWUFBYTloQixFQUFVdFQsT0FDeEJwdkIsRUFBT292QixFQUFNcHZCLEtBQ2J3OEMsRUFBVTlaLEVBQVMxaUMsVUFFckI2akIsUUFBUTdqQixFQUFLMGpELGNBQWdCNy9CLFFBQVE3akIsRUFBSzRrQyxRQUM1Qy9nQixRQUFRMjRCLEVBQVFrSCxjQUFnQjcvQixRQUFRMjRCLEVBQVE1WCxhQUs5Q2xPLEVBQUt4NEIsRUFDSGtnQixFQUFLZ1IsRUFBTXZCLElBQ1g0MkIsRUFBaUJqSSxFQUFRa0gsWUFDekJnQixFQUFrQmxJLEVBQVFtSSxpQkFBbUJuSSxFQUFRNVgsVUFHckRnZ0IsRUFBV0gsR0FBa0JDLEVBRTdCOWYsRUFBUTZlLHNCQUFzQnIwQixFQUFNcHZCLEtBQUs0a0MsYUFLekM1a0MsS0FBSzJrRCxnQkFBa0I1Z0MsTUFBTTZnQixFQUFNaFYsUUFDckMzSSxVQUFXMmQsR0FDWEEsTUFFRWlnQixFQUFXakIsU0FBU3gwQixHQUFPLE9BRTVCbHhCLEtBQVEwbUQsRUFDUC9nQyxRQUFRZ2hDLEVBQVMzbUQsYUFDWGtnQixFQUFJbGdCLEVBQU0sUUFHakJBLEtBQVEybUQsS0FDTEEsRUFBUzNtRCxNQUNIMG1ELEVBQVMxbUQsWUFFWGtnQixFQUFJbGdCLEVBQWEsTUFBUHc0QixFQUFjLEdBQUtBLElBSzNDLElBQUlrTyxjQUNNNGYsbUJBQ0FBLGFBS0pNLGFBQWUsTUFNckIsU0FBU0MsU0FBVTNtQyxFQUFJcStCLE1BRWhCQSxJQUFTQSxFQUFNQSxFQUFJc0IsV0FLcEIzL0IsRUFBR3VELFVBQ0Q4NkIsRUFBSTkyQixRQUFRLE1BQVEsSUFDbEJQLE1BQU0wL0IsY0FBYzMwQyxpQkFBUThWLFVBQUs3SCxFQUFHdUQsVUFBVTFNLElBQUlnUixPQUVuRHRFLFVBQVUxTSxJQUFJd25DLE9BRWQsS0FDQy9sQixFQUFNLEtBQUl0WSxFQUFHa0QsYUFBYSxVQUFZLFFBQ3hDb1YsRUFBSS9RLFFBQVEsSUFBTTgyQixFQUFNLEtBQU8sS0FDOUJwOEMsYUFBYSxTQUFVcTJCLEVBQU0rbEIsR0FBS3NCLFNBUzNDLFNBQVNpSCxZQUFhNW1DLEVBQUlxK0IsTUFFbkJBLElBQVNBLEVBQU1BLEVBQUlzQixXQUtwQjMvQixFQUFHdUQsVUFDRDg2QixFQUFJOTJCLFFBQVEsTUFBUSxJQUNsQlAsTUFBTTAvQixjQUFjMzBDLGlCQUFROFYsVUFBSzdILEVBQUd1RCxVQUFVNkQsT0FBT1MsT0FFdER0RSxVQUFVNkQsT0FBT2kzQixHQUVqQnIrQixFQUFHdUQsVUFBVWxkLFVBQ2I4MUMsZ0JBQWdCLGFBRWhCLFNBQ0Q3akIsRUFBTSxLQUFJdFksRUFBR2tELGFBQWEsVUFBWSxRQUNwQzJqQyxFQUFNLElBQU14SSxFQUFNLElBQ2pCL2xCLEVBQUkvUSxRQUFRcy9CLElBQVEsS0FDbkJ2dUIsRUFBSWo0QixRQUFRd21ELEVBQUssUUFFbkJ2dUIsRUFBSXFuQixVQUVMMTlDLGFBQWEsUUFBU3EyQixLQUV0QjZqQixnQkFBZ0IsVUFPekIsU0FBUzJLLGtCQUFtQjF4QixNQUNyQkEsTUFJaUIscUJBQVhBLHNCQUFBQSxJQUFxQixLQUN4Qm5NLFlBQ2EsSUFBZm1NLEVBQU8yeEIsWUFDRjk5QixFQUFLKzlCLGtCQUFrQjV4QixFQUFPdDFCLE1BQVEsYUFFeENtcEIsRUFBS21NLEdBQ0xuTSxFQUNGLE1BQXNCLGlCQUFYbU0sRUFDVDR4QixrQkFBa0I1eEIsUUFEcEIsR0FLVDlQLElBQU0waEMsa0JBQW9Cdi9CLGdCQUFPM25CLHFCQUVkQSx3QkFDRUEsK0JBQ0lBLDZCQUNOQSx3QkFDRUEsK0JBQ0lBLHFCQUluQm1uRCxjQUFnQmg4QixZQUFjUyxNQUM5Qnc3QixXQUFhLGFBQ2JDLFVBQVksWUFHZEMsZUFBaUIsYUFDakJDLG1CQUFxQixnQkFDckJDLGNBQWdCLFlBQ2hCQyxrQkFBb0IsZUFDcEJOLHFCQUU2Qi9qRCxJQUEzQmpELE9BQU91bkQsc0JBQ3dCdGtELElBQWpDakQsT0FBT3duRCx1Q0FFVSxzQ0FDSSw0QkFFT3ZrRCxJQUExQmpELE9BQU95bkQscUJBQ3VCeGtELElBQWhDakQsT0FBTzBuRCxxQ0FFUyxvQ0FDSSx1QkFLeEJyaUMsSUFBTXNpQyxJQUFNMzhCLFVBQ1JockIsT0FBTzRuRCxzQkFDTDVuRCxPQUFPNG5ELHNCQUFzQm4vQixLQUFLem9CLFFBQ2xDNm5ELG9CQUN5QnBnQyxVQUFNQSxLQUVyQyxTQUFTcWdDLFVBQVdyZ0Msc0JBRVpBLEtBSVIsU0FBU3NnQyxtQkFBb0Job0MsRUFBSXErQixPQUN6QjRKLEVBQW9Cam9DLEVBQUd1K0IscUJBQXVCditCLEVBQUd1K0IsdUJBQ25EMEosRUFBa0IxZ0MsUUFBUTgyQixHQUFPLE1BQ2pCM3hDLEtBQUsyeEMsWUFDZHIrQixFQUFJcStCLElBSWpCLFNBQVM2SixzQkFBdUJsb0MsRUFBSXErQixHQUM5QnIrQixFQUFHdStCLDJCQUNFditCLEVBQUd1K0IsbUJBQW9CRixlQUVwQnIrQixFQUFJcStCLEdBR2xCLFNBQVM4SixtQkFDUG5vQyxFQUNBbVgsRUFDQTBDLFNBRXFDdXVCLGtCQUFrQnBvQyxFQUFJbVgsMENBQ3REbnpCLFNBQWE2MUIsUUFDWnRaLEVBQVF2YyxJQUFTa2pELFdBQWFHLG1CQUFxQkUsa0JBQ3JEYyxFQUFRLEVBQ05qTyxlQUNEOTJCLG9CQUFvQi9DLEVBQU8rbkMsUUFHMUJBLFdBQVE3a0QsR0FDUkEsRUFBRWdkLFNBQVdULEtBQ1Rxb0MsR0FBU0UsOEJBTWJGLEVBQVFFLFFBR1g5ZixFQUFVLEtBQ1YzbEIsaUJBQWlCdkMsRUFBTytuQyxHQUc3QmhqQyxJQUFNa2pDLFlBQWMseUJBRXBCLFNBQVNKLGtCQUFtQnBvQyxFQUFJbVgsT0FVMUJuekIsRUFURXlrRCxFQUFTeG9ELE9BQU95b0QsaUJBQWlCMW9DLEdBRWpDMm9DLEdBQW9CRixFQUFPckIsZUFBaUIsVUFBWSxJQUFJcGdDLE1BQU0sTUFDbEU0aEMsR0FBdUJILEVBQU9yQixlQUFpQixhQUFlLElBQUlwZ0MsTUFBTSxNQUN4RTZoQyxFQUFvQkMsV0FBV0gsRUFBa0JDLEdBQ2pERyxHQUFtQk4sRUFBT25CLGNBQWdCLFVBQVksSUFBSXRnQyxNQUFNLE1BQ2hFZ2lDLEdBQXNCUCxFQUFPbkIsY0FBZ0IsYUFBZSxJQUFJdGdDLE1BQU0sTUFDdEVpaUMsRUFBbUJILFdBQVdDLEVBQWlCQyxHQUdqRHZnQixFQUFVLEVBQ1Y4ZixFQUFZLFNBRVpweEIsSUFBaUIrdkIsV0FDZjJCLEVBQW9CLE1BQ2YzQixhQUNHMkIsSUFDRUQsRUFBb0J2aUQsUUFFekI4d0IsSUFBaUJnd0IsVUFDdEI4QixFQUFtQixNQUNkOUIsWUFDRzhCLElBQ0VELEVBQW1CM2lELGdCQUd2Qk8sS0FBS0MsSUFBSWdpRCxFQUFtQkksSUFDckIsRUFDYkosRUFBb0JJLEVBQ2xCL0IsV0FDQUMsVUFDRixNQUVBbmpELElBQVNrakQsV0FDUDBCLEVBQW9CdmlELE9BQ3BCMmlELEVBQW1CM2lELE9BQ3JCLFFBTUpyQyxVQUNBeWtDLFlBQ0E4ZixlQUxBdmtELElBQVNrakQsWUFDVHNCLFlBQVlwakQsS0FBS3FqRCxFQUFPckIsZUFBaUIsY0FTN0MsU0FBUzBCLFdBQVlJLEVBQVFDLFFBRXBCRCxFQUFPN2lELE9BQVM4aUQsRUFBVTlpRCxVQUN0QjZpRCxFQUFPL21DLE9BQU8rbUMsVUFHbEJ0aUQsS0FBS0MsSUFBSUwsTUFBTSxLQUFNMmlELEVBQVVqMUMsYUFBS2lRLEVBQUdULFVBQ3JDMGxDLEtBQUtqbEMsR0FBS2lsQyxLQUFLRixFQUFPeGxDLE9BUWpDLFNBQVMwbEMsS0FBTXBvRCxVQUNxQyxJQUEzQ2czQixPQUFPaDNCLEVBQUVpUSxNQUFNLEdBQUksR0FBRzVRLFFBQVEsSUFBSyxNQUs1QyxTQUFTZ3BELE1BQU9yNEIsRUFBT3M0QixPQUNmdHBDLEVBQUtnUixFQUFNdkIsSUFHYjlKLE1BQU0zRixFQUFHcThCLGNBQ1JBLFNBQVNrTixXQUFZLElBQ3JCbE4sZ0JBR0N6NkMsRUFBT2tsRCxrQkFBa0I5MUIsRUFBTXB2QixLQUFLKzJDLGdCQUN0Q2x6QixRQUFRN2pCLEtBS1IrakIsTUFBTTNGLEVBQUd3cEMsV0FBNkIsSUFBaEJ4cEMsRUFBR3RXLHlSQTRCekJpbUIsRUFBVXlVLGVBQ1ZxbEIsRUFBaUJybEIsZUFBZTZCLE9BQzdCd2pCLEdBQWtCQSxFQUFleDVCLGFBQ3JCdzVCLEVBQWV4NUIsUUFDUE4sWUFHckIrNUIsR0FBWS81QixFQUFRNFUsYUFBZXZULEVBQU1aLGlCQUUzQ3M1QixHQUFhQyxHQUFxQixLQUFYQSxPQUlyQkMsRUFBYUYsR0FBWUcsRUFDM0JBLEVBQ0FDLEVBQ0VqbkMsRUFBYzZtQyxHQUFZSyxFQUM1QkEsRUFDQUMsRUFDRUMsRUFBVVAsR0FBWVEsRUFDeEJBLEVBQ0FDLEVBRUVDLEVBQWtCVixHQUNuQlcsR0FDREMsRUFDRUMsRUFBWWIsR0FDSyxtQkFBWEMsRUFBd0JBLEVBQ2hDTixFQUNFbUIsRUFBaUJkLEdBQ2xCZSxHQUNEQyxFQUNFQyxFQUFxQmpCLEdBQ3RCa0IsR0FDREMsRUFFRUMsRUFBd0Jwa0MsU0FDNUIzaUIsV0FBU2duRCxHQUNMQSxFQUFTMUIsTUFDVDBCLEdBR3VCLE1BQXpCRCxpQkFDWUEsRUFBdUIsUUFBUzk1QixPQUcxQ2c2QixHQUFxQixJQUFSakUsSUFBa0JyN0IsTUFDL0J1L0IsRUFBbUJDLHVCQUF1QlgsR0FFMUMxd0IsRUFBSzdaLEVBQUd3cEMsU0FBV3IvQixnQkFDbkI2Z0MsMEJBQ29CaHJDLEVBQUlpcUMseUJBQ0pqcUMsRUFBSTZDLElBRXhCZ1gsRUFBRzB2QixXQUNEeUIseUJBQ29CaHJDLEVBQUk0cEMsTUFFTmUsRUFBbUIzcUMsT0FFdkJ3cUMsRUFBZXhxQyxLQUVoQ3dwQyxTQUFXLE9BR1h4NEIsRUFBTXB2QixLQUFLdXBELHFCQUVDbjZCLEVBQU8sd0JBQ2RmLEVBQVNqUSxFQUFHMjBCLFdBQ1p5VyxFQUFjbjdCLEdBQVVBLEVBQU9vN0IsVUFBWXA3QixFQUFPbzdCLFNBQVNyNkIsRUFBTXpyQixLQUNuRTZsRCxHQUNGQSxFQUFZN25ELE1BQVF5dEIsRUFBTXp0QixLQUMxQjZuRCxFQUFZMzdCLElBQUk0c0IsWUFFSjVzQixJQUFJNHNCLGNBRUxrTyxFQUFVdnFDLEVBQUk2WixRQUtadXdCLEVBQWdCcHFDLEdBQy9CZ3JDLHVCQUNpQmhyQyxFQUFJNHBDLHNCQUNKNXBDLEVBQUk2Qyw4Q0FFQzdDLEVBQUk0cEMsR0FDckIvdkIsRUFBRzB2QiwrQkFDYXZwQyxFQUFJaXFDLEdBQ2xCZ0IsSUFDQ0ssZ0JBQWdCUixjQUNQanhCLEVBQUlpeEIsc0JBRUk5cUMsRUFBSWhjLEVBQU02MUIsUUFPbkM3SSxFQUFNcHZCLEtBQUt1cEQsVUFDSTdCLE9BQ0ppQixFQUFVdnFDLEVBQUk2WixJQUd4Qm14QixHQUFlQyxTQUt0QixTQUFTTSxNQUFPdjZCLEVBQU82b0IsT0FDZjc1QixFQUFLZ1IsRUFBTXZCLElBR2I5SixNQUFNM0YsRUFBR3dwQyxjQUNSQSxTQUFTRCxXQUFZLElBQ3JCQyxnQkFHQzVuRCxFQUFPa2xELGtCQUFrQjkxQixFQUFNcHZCLEtBQUsrMkMsZUFDdENsekIsUUFBUTdqQixJQUF5QixJQUFoQm9lLEVBQUd0VyxnQkFDZm13QyxRQUlMbDBCLE1BQU0zRixFQUFHcThCLDZLQWtCUDJPLEdBQXFCLElBQVJqRSxJQUFrQnI3QixNQUMvQnUvQixFQUFtQkMsdUJBQXVCSyxHQUUxQ0MsRUFBd0I5a0MsU0FDNUIzaUIsV0FBU2duRCxHQUNMQSxFQUFTUSxNQUNUUixHQUdGcGxDLE1BQU02bEMsa0JBQ01BLEVBQXVCLFFBQVN4NkIsT0FHMUM2SSxFQUFLN1osRUFBR3E4QixTQUFXbHlCLGdCQUNuQm5LLEVBQUcyMEIsWUFBYzMwQixFQUFHMjBCLFdBQVcwVyxhQUM5QjFXLFdBQVcwVyxTQUFTcjZCLEVBQU16ckIsS0FBTyxNQUVsQ3lsRCwwQkFDb0JockMsRUFBSXlyQyx5QkFDSnpyQyxFQUFJMHJDLElBRXhCN3hCLEVBQUcwdkIsV0FDRHlCLHlCQUNvQmhyQyxFQUFJMnJDLE1BRVZDLEVBQWU1ckMsWUFHbkI2ckMsRUFBVzdyQyxNQUV4QnE4QixTQUFXLE9BR1p5UCxJQUNTQyxnQkFLSkEsSUFFSGx5QixFQUFHMHZCLGFBSUZ2NEIsRUFBTXB2QixLQUFLdXBELE1BQVFuckMsRUFBRzIwQixjQUN4QjMwQixFQUFHMjBCLFdBQVcwVyxXQUFhcnJDLEVBQUcyMEIsV0FBVzBXLGNBQWlCcjZCLEVBQU16ckIsS0FBUXlyQixNQUU1RGc3QixFQUFZaHNDLEdBQ3ZCZ3JDLHVCQUNpQmhyQyxFQUFJMnJDLHNCQUNKM3JDLEVBQUkwckMsOENBRUMxckMsRUFBSTJyQyxHQUNyQjl4QixFQUFHMHZCLCtCQUNhdnBDLEVBQUl5ckMsR0FDbEJSLElBQ0NLLGdCQUFnQkUsY0FDUDN4QixFQUFJMnhCLHNCQUVJeHJDLEVBQUloYyxFQUFNNjFCLFdBTTlCMHhCLEVBQU12ckMsRUFBSTZaLEdBQ2RteEIsR0FBZUMsU0FPeEIsU0FBU2dCLGNBQWU3bEMsRUFBS3RtQixFQUFNa3hCLEdBQ2QsaUJBQVI1SyxPQUVQLHlCQUF5QnRtQiwyQ0FDbEI2ZixLQUFLOEcsVUFBVUwsT0FDdEI0SyxFQUFNckIsU0FFQ2hKLE1BQU1QLFNBRWIseUJBQXlCdG1CLG1FQUV6Qmt4QixFQUFNckIsU0FLWixTQUFTMjdCLGdCQUFpQmxsQyxTQUNGLGlCQUFSQSxJQUFxQk8sTUFBTVAsR0FTM0MsU0FBUzhrQyx1QkFBd0J4akMsTUFDM0JqQyxRQUFRaUMsVUFDSCxNQUVId2tDLEVBQWF4a0MsRUFBR3NVLFdBQ2xCclcsTUFBTXVtQyxHQUVEaEIsdUJBQ0wvakQsTUFBTW1DLFFBQVE0aUQsR0FDVkEsRUFBVyxHQUNYQSxJQUdFeGtDLEVBQUdjLFNBQVdkLEVBQUdyaEIsUUFBVSxFQUl2QyxTQUFTOGxELE9BQVFoOEMsRUFBRzZnQixJQUNNLElBQXBCQSxFQUFNcHZCLEtBQUt1cEQsWUFDUG42QixHQUlWLElBQUkybkIsV0FBYTF0QixrQkFDUGtoQyxnQkFDRUEsdUJBQ0ZuN0IsRUFBTzZvQixJQUVXLElBQXBCN29CLEVBQU1wdkIsS0FBS3VwRCxXQUNQbjZCLEVBQU82b0IsWUFPZnVTLGlCQUNGdHZCLE1BQ0EraEIsTUFDQWtDLE9BQ0F4Z0IsU0FDQWlHLE1BQ0FtUyxZQU9JdHZCLFFBQVUraUMsZ0JBQWdCanFDLE9BQU9xN0IsYUFFakM2TyxNQUFRMVUsNkJBQXNCZCxnQkFBU3h0QixVQVF6Q3FDLGdCQUVPNUksaUJBQWlCLGlDQUNsQjlDLEVBQUtsZSxTQUFTaWpELGNBQ2hCL2tDLEdBQU1BLEVBQUdzc0MsZ0JBQ0h0c0MsRUFBSSxXQUtsQnNGLElBQU1pbkMsNkJBQ012c0MsRUFBSWpVLEVBQVNpbEIsRUFBT3NULEdBQ1YsV0FBZHRULEVBQU16dEIsS0FFSitnQyxFQUFTN1UsTUFBUTZVLEVBQVM3VSxJQUFJKzhCLHlCQUNqQng3QixFQUFPLGlDQUNWaXNCLGlCQUFpQmo5QixFQUFJalUsRUFBU2lsQixpQkFHOUJoUixFQUFJalUsRUFBU2lsQixFQUFNckIsV0FFOUI2OEIsYUFBZXQ0QyxJQUFJNVEsS0FBSzBjLEVBQUdoUSxRQUFTM0ssY0FDaEIsYUFBZDJyQixFQUFNenRCLEtBQXNCc3lDLGdCQUFnQjcxQixFQUFHaGMsV0FDckRnaEQsWUFBY2o1QyxFQUFRcXhDLFVBQ3BCcnhDLEVBQVFxeEMsVUFBVXZQLFNBQ2xCL3FCLGlCQUFpQixtQkFBb0IycEMsc0JBQ3JDM3BDLGlCQUFpQixpQkFBa0I0cEMsb0JBS25DNXBDLGlCQUFpQixTQUFVNHBDLGtCQUUxQmhoQyxVQUNDNGdDLFFBQVMsZ0NBTUZ0c0MsRUFBSWpVLEVBQVNpbEIsTUFDWCxXQUFkQSxFQUFNenRCLElBQWtCLGFBQ2R5YyxFQUFJalUsRUFBU2lsQixFQUFNckIsYUFLekJnOUIsRUFBYzNzQyxFQUFHd3NDLFVBQ2pCSSxFQUFhNXNDLEVBQUd3c0MsYUFBZXQ0QyxJQUFJNVEsS0FBSzBjLEVBQUdoUSxRQUFTM0ssZUFDdER1bkQsRUFBVzMwQixjQUFNNDBCLEVBQUducEMsVUFBTytGLFdBQVdvakMsRUFBR0YsRUFBWWpwQyxPQUdyQzFELEVBQUdpMkIsU0FDakJscUMsRUFBUTNJLE1BQU02MEIsY0FBS3ZTLFVBQUtvbkMsb0JBQW9CcG5DLEVBQUdrbkMsS0FDL0M3Z0QsRUFBUTNJLFFBQVUySSxFQUFRd2lDLFVBQVl1ZSxvQkFBb0IvZ0QsRUFBUTNJLE1BQU93cEQsYUFFbkU1c0MsRUFBSSxhQU90QixTQUFTK3NDLFlBQWEvc0MsRUFBSWpVLEVBQVN5aEIsdUJBQ2J4TixFQUFJalUsRUFBU3loQixJQUU3Qi9CLE1BQVFFLG1EQUVZM0wsRUFBSWpVLEVBQVN5aEIsSUFDaEMsR0FJUCxTQUFTdy9CLG9CQUFxQmh0QyxFQUFJalUsRUFBU3loQixPQUNuQ3BxQixFQUFRMkksRUFBUTNJLE1BQ2hCNnBELEVBQWFqdEMsRUFBR2kyQixhQUNsQmdYLEdBQWU5bEQsTUFBTW1DLFFBQVFsRyxZQVU3QjB5QyxFQUFVb1gsRUFDTHhwQyxFQUFJLEVBQUc2RSxFQUFJdkksRUFBR2hRLFFBQVEzSixPQUFRcWQsRUFBSTZFLEVBQUc3RSxTQUNuQzFELEVBQUdoUSxRQUFRMFQsR0FDaEJ1cEMsSUFDUy9pQyxhQUFhOW1CLEVBQU9pQyxXQUFTNm5ELEtBQVksRUFDaERBLEVBQU9wWCxXQUFhQSxNQUNmQSxTQUFXQSxXQUdoQnJzQixXQUFXcGtCLFdBQVM2bkQsR0FBUzlwRCxlQUMzQjRjLEVBQUdtdEMsZ0JBQWtCenBDLE1BQ3BCeXBDLGNBQWdCenBDLElBTXRCdXBDLE1BQ0FFLGVBQWlCLGFBMUJsQiw2QkFBNkJwaEQsRUFBUWloQyxpRUFFbkN6cUMsT0FBT00sVUFBVUUsU0FBU08sS0FBS0YsR0FBTzZOLE1BQU0sR0FBSSxHQUVsRHVjLEdBMEJOLFNBQVNzL0Isb0JBQXFCMXBELEVBQU80TSxVQUM1QkEsRUFBUThaLGVBQU0raUMsVUFBTXBqQyxXQUFXb2pDLEVBQUd6cEQsS0FHM0MsU0FBU2lDLFdBQVU2bkQsU0FDVixXQUFZQSxFQUNmQSxFQUFPNUksT0FDUDRJLEVBQU85cEQsTUFHYixTQUFTcXBELG1CQUFvQmhwRCxLQUN6QmdkLE9BQU9ra0MsV0FBWSxFQUd2QixTQUFTK0gsaUJBQWtCanBELEdBRXBCQSxFQUFFZ2QsT0FBT2trQyxjQUNabGtDLE9BQU9ra0MsV0FBWSxVQUNibGhELEVBQUVnZCxPQUFRLFVBR3BCLFNBQVMyc0MsUUFBU3B0QyxFQUFJaGMsT0FDZFAsRUFBSTNCLFNBQVMwckMsWUFBWSxnQkFDN0I2ZixVQUFVcnBELEdBQU0sR0FBTSxLQUNyQnNwRCxjQUFjN3BELEdBTW5CLFNBQVM4cEQsV0FBWXY4QixVQUNaQSxFQUFNaEIsbUJBQXVCZ0IsRUFBTXB2QixNQUFTb3ZCLEVBQU1wdkIsS0FBSysyQyxXQUUxRDNuQixFQURBdThCLFdBQVd2OEIsRUFBTWhCLGtCQUFrQjJXLFFBSXpDLElBQUl3a0Isb0JBQ0luckMsRUFBSTgyQixFQUFXOWxCLGlCQUVidzhCLEtBREVELFdBQVd2OEIsSUFDU3B2QixNQUFRb3ZCLEVBQU1wdkIsS0FBSysyQyxXQUN6QzhVLEVBQWtCenRDLEVBQUcwdEMsbUJBQ0osU0FBckIxdEMsRUFBR3dtQixNQUFNbW5CLFFBQXFCLEdBQUszdEMsRUFBR3dtQixNQUFNbW5CLFFBQzFDdnFELEdBQVNvcUQsS0FDTDVyRCxLQUFLdXBELE1BQU8sUUFDWm42QixlQUNEd1YsTUFBTW1uQixRQUFVRixPQUdsQmpuQixNQUFNbW5CLFFBQVV2cUQsRUFBUXFxRCxFQUFrQix3QkFJekN6dEMsRUFBSTgyQixFQUFxQjlsQixrQkFFMUI1dEIsb0JBQ0dtcUQsV0FBV3Y4QixJQUNTcHZCLE1BQVFvdkIsRUFBTXB2QixLQUFLKzJDLGNBRXZDLzJDLEtBQUt1cEQsTUFBTyxFQUNkL25ELFFBQ0k0dEIsZUFDRHdWLE1BQU1tbkIsUUFBVTN0QyxFQUFHMHRDLDJCQUdsQjE4QixlQUNEd1YsTUFBTW1uQixRQUFVLFlBSXBCbm5CLE1BQU1tbkIsUUFBVXZxRCxFQUFRNGMsRUFBRzB0QyxtQkFBcUIseUJBS3JEMXRDLEVBQ0FqVSxFQUNBaWxCLEVBQ0FzVCxFQUNBb1ksR0FFS0EsTUFDQWxXLE1BQU1tbkIsUUFBVTN0QyxFQUFHMHRDLHNCQUt4QkUsMEJBQ0tyQixlQUNQcEIsTUFLSTBDLHNCQUNFcGhELGNBQ0U4cEIsWUFDSEEsYUFDQzlwQixZQUNBQSxrQkFDTUEsa0JBQ0FBLG9CQUNFQSxvQkFDQUEsd0JBQ0lBLHdCQUNBQSxtQkFDTEEseUJBQ01BLHFCQUNKQSxpQkFDSnVyQixPQUFRdnJCLE9BQVFsSyxTQUs3QixTQUFTdXJELGFBQWM5OEIsT0FDZis4QixFQUFjLzhCLEdBQVNBLEVBQU1qQix3QkFDL0JnK0IsR0FBZUEsRUFBWW5oRCxLQUFLb0QsUUFBUWkxQixTQUNuQzZvQixhQUFhcGxCLHVCQUF1QnFsQixFQUFZditCLFdBRWhEd0IsRUFJWCxTQUFTZzlCLHNCQUF1QnhtQixPQUN4QjVsQyxLQUNBb08sRUFBVXczQixFQUFLeFosYUFFaEIxSSxJQUFNL2YsS0FBT3lLLEVBQVFta0IsWUFDbkI1dUIsR0FBT2lpQyxFQUFLamlDLE9BSWIwOUIsRUFBWWp6QixFQUFRaTNCLHFCQUNyQjNoQixJQUFNL2YsS0FBTzA5QixJQUNYcmIsU0FBU3JpQixJQUFRMDlCLEVBQVUxOUIsVUFFM0IzRCxFQUdULFNBQVNxc0QsWUFBYUMsRUFBR0MsTUFDbkIsaUJBQWlCL29ELEtBQUsrb0QsRUFBUzVxRCxZQUMxQjJxRCxFQUFFLG9CQUNBQyxFQUFTcCtCLGlCQUFpQm9FLFlBS3ZDLFNBQVNpNkIsb0JBQXFCcDlCLFFBQ3BCQSxFQUFRQSxFQUFNZixXQUNoQmUsRUFBTXB2QixLQUFLKzJDLGtCQUNOLEVBS2IsU0FBUzBWLFlBQWExOUIsRUFBTzI5QixVQUNwQkEsRUFBUy9vRCxNQUFRb3JCLEVBQU1wckIsS0FBTytvRCxFQUFTL3FELE1BQVFvdEIsRUFBTXB0QixJQUc5RCtoQixJQUFNaXBDLHVCQUFpQjFtQyxVQUFNQSxFQUFFdGtCLEtBQU9tdEIsbUJBQW1CN0ksSUFFbkQybUMsMEJBQW1CcnFDLFNBQWdCLFNBQVhBLEVBQUVya0IsTUFFNUIydUQsaUJBQ0ksbUJBQ0NaLDBCQUNHLGtCQUVGSyxjQUNGMStCLEVBQVcvdkIsS0FBSzgvQixPQUFPdGdCLFdBQ3RCdVEsTUFLTUEsRUFBU3p1QixPQUFPd3RELGdCQUVibG9ELFFBS1ZtcEIsRUFBU25wQixPQUFTLFFBRWxCLHVGQUVBNUcsS0FBSzR1QixhQUlIcWdDLEVBQU9qdkQsS0FBS2l2RCxLQUdkQSxHQUFpQixXQUFUQSxHQUE4QixXQUFUQSxRQUc3Qiw4QkFBZ0NBLEVBQ2hDanZELEtBQUs0dUIsYUFJSDgvQixFQUFXMytCLEVBQVMsTUFJdEI0K0Isb0JBQW9CM3VELEtBQUt3bUMsZUFDcEJrb0IsTUFLSHg5QixFQUFRbTlCLGFBQWFLLE9BRXRCeDlCLFNBQ0l3OUIsS0FHTDF1RCxLQUFLa3ZELGdCQUNBVixZQUFZQyxFQUFHQyxPQU1sQnovQixFQUFLLGdCQUFnQmp2QixLQUFLeXJDLFdBQzFCM2xDLElBQW1CLE1BQWJvckIsRUFBTXByQixJQUNkb3JCLEVBQU1OLFVBQ0ozQixFQUFLLFVBQ0xBLEVBQUtpQyxFQUFNcHRCLElBQ2J1aUIsWUFBWTZLLEVBQU1wckIsS0FDbUIsSUFBbENrSCxPQUFPa2tCLEVBQU1wckIsS0FBS2dpQixRQUFRbUgsR0FBWWlDLEVBQU1wckIsSUFBTW1wQixFQUFLaUMsRUFBTXByQixJQUM5RG9yQixFQUFNcHJCLFFBRU4zRCxHQUFRK3VCLEVBQU0vdUIsT0FBUyt1QixFQUFNL3VCLFVBQVkrMkMsV0FBYXFWLHNCQUFzQnZ1RCxNQUM1RW12RCxFQUFjbnZELEtBQUtrbkMsT0FDbkIybkIsRUFBV1IsYUFBYWMsTUFJMUJqK0IsRUFBTS91QixLQUFLdXpCLFlBQWN4RSxFQUFNL3VCLEtBQUt1ekIsV0FBVzhDLEtBQUt1MkIsc0JBQ2hENXNELEtBQUt1cEQsTUFBTyxHQUlsQm1ELEdBQ0FBLEVBQVMxc0QsT0FDUnlzRCxZQUFZMTlCLEVBQU8yOUIsS0FDbkI1OUIsbUJBQW1CNDlCLE1BRWxCQSxFQUFTdCtCLG9CQUFxQnMrQixFQUFTdCtCLGtCQUFrQjJXLE9BQU90VyxXQUNsRSxLQUdNK3RCLEVBQVVrUSxFQUFTMXNELEtBQUsrMkMsV0FBYTl2QixVQUFXam5CLE1BRXpDLFdBQVQ4c0QsY0FFR0MsVUFBVyxpQkFDRHZRLEVBQVMsMEJBQ2pCdVEsVUFBVyxJQUNYdG1CLGlCQUVBNGxCLFlBQVlDLEVBQUdDLEdBQ2pCLEdBQWEsV0FBVE8sRUFBbUIsSUFDeEJoK0IsbUJBQW1CQyxVQUNkaStCLE1BRUxDLEVBQ0U5QyxpQ0FDU25xRCxFQUFNLGFBQWNtcUQsa0JBQ3BCbnFELEVBQU0saUJBQWtCbXFELGtCQUN4QjNOLEVBQVMsc0JBQWNtTixLQUEwQkEsWUFJN0Q0QyxLQU1MbG9ELE1BQVE0aUIsWUFDUHBjLGlCQUNNQSxRQUNWb2hELHdCQUVJNW5ELE1BQU15b0QsS0FFYixJQUFJSSx1QkFDRjdvRCx3Q0FHUWtwQixFQUFTMXZCLEtBQUs0cUMsYUFDZkEsaUJBQVdyWixFQUFPOFMsT0FDZjJHLEVBQXdCZCxrQkFBa0JscUMsS0FFM0NpckMsVUFDSGpyQyxFQUFLa25DLE9BQ0xsbkMsRUFBS3N2RCxNQUNMLFFBR0dwb0IsT0FBU2xuQyxFQUFLc3ZELFdBRVp6ckQsS0FBSzdELEVBQU11eEIsRUFBTzhTLHFCQUlyQm9xQixXQUNBM3FELEVBQU05RCxLQUFLOEQsS0FBTzlELEtBQUt3bUMsT0FBT3JrQyxLQUFLMkIsS0FBTyxPQUMxQzJRLEVBQU0zUixPQUFPb1QsT0FBTyxNQUNwQnE1QyxFQUFldnZELEtBQUt1dkQsYUFBZXZ2RCxLQUFLK3ZCLFNBQ3hDeS9CLEVBQWN4dkQsS0FBSzgvQixPQUFPdGdCLFlBQzFCdVEsRUFBVy92QixLQUFLK3ZCLFlBQ2hCMC9CLEVBQWlCbEIsc0JBQXNCdnVELE1BRXBDaWtCLEVBQUksRUFBR0EsRUFBSXVyQyxFQUFZNW9ELE9BQVFxZCxJQUFLLEtBQ3JDbUUsRUFBSW9uQyxFQUFZdnJDLE1BQ2xCbUUsRUFBRXRrQixPQUNTLE1BQVRza0IsRUFBRXRpQixLQUFvRCxJQUFyQ2tILE9BQU9vYixFQUFFdGlCLEtBQUtnaUIsUUFBUSxhQUNoQzdhLEtBQUttYixLQUNWQSxFQUFFdGlCLEtBQU9zaUIsR0FDWEEsRUFBRWptQixPQUFTaW1CLEVBQUVqbUIsVUFBWSsyQyxXQUFhdVcsTUFDbkMsS0FDQzlpQyxFQUFPdkUsRUFBRWtJLGlCQUNUandCLEVBQU9zc0IsRUFBUUEsRUFBS3hmLEtBQUtvRCxRQUFRbFEsTUFBUXNzQixFQUFLN29CLEtBQU8sR0FBTXNrQixFQUFFdGtCLHdEQUNmekQsV0FLdERrdkQsRUFBYyxTQUNWRCxLQUNBSSxLQUNHenJDLEVBQUksRUFBR0EsRUFBSXNyQyxFQUFhM29ELE9BQVFxZCxJQUFLLEtBQ3RDbUUsRUFBSW1uQyxFQUFhdHJDLEtBQ3JCOWhCLEtBQUsrMkMsV0FBYXVXLElBQ2xCdHRELEtBQUt3dEQsSUFBTXZuQyxFQUFFNEgsSUFBSTQvQix3QkFDZm43QyxFQUFJMlQsRUFBRXRpQixPQUNIbUgsS0FBS21iLEtBRUZuYixLQUFLbWIsUUFHWmtuQyxLQUFPYixFQUFFM3FELEVBQUssS0FBTXdyRCxRQUNwQkksUUFBVUEsU0FHVmpCLEVBQUUzcUQsRUFBSyxLQUFNaXNCLDJCQUlkQSxFQUFXL3ZCLEtBQUt1dkQsYUFDaEJNLEVBQVk3dkQsS0FBSzZ2RCxZQUFlN3ZELEtBQUtLLE1BQVEsS0FBTyxRQUNyRDB2QixFQUFTbnBCLFFBQVc1RyxLQUFLOHZELFFBQVEvL0IsRUFBUyxHQUFHQyxJQUFLNi9CLE9BTTlDdjlDLFFBQVF5OUMsa0JBQ1J6OUMsUUFBUTA5QyxrQkFDUjE5QyxRQUFRMjlDLHVCQUtaQyxRQUFVN3RELFNBQVNJLEtBQUswdEQsZUFFcEI3OUMsaUJBQVM4VixNQUNaQSxFQUFFam1CLEtBQUtpdUQsTUFBTyxLQUNWN3ZDLEVBQUs2SCxFQUFFNEgsSUFDUHp1QixFQUFJZ2YsRUFBR3dtQix5QkFDTXhtQixFQUFJc3ZDLEtBQ3JCdG9ELFVBQVloRyxFQUFFOHVELGdCQUFrQjl1RCxFQUFFK3VELG1CQUFxQixLQUN0RGp0QyxpQkFBaUJ1a0MsbUJBQW9Ccm5DLEVBQUdnd0MsUUFBVSxTQUFTbjJCLEVBQUlwMkIsR0FDNURBLEdBQUtBLEVBQUVnZCxTQUFXVCxHQUdqQnZjLElBQUssYUFBYTJCLEtBQUszQixFQUFFd3NELGtCQUN6QjNzQyxvQkFBb0IrakMsbUJBQW9CeHRCLEtBQ3hDbTJCLFFBQVUsMkJBQ1Nod0MsRUFBSXN2QyxxQ0FRekJ0dkMsRUFBSXN2QyxPQUVOckkscUJBQ0ksS0FHTHhuRCxLQUFLeXdELGdCQUNBendELEtBQUt5d0QsYUFPUnhzQixFQUFRMWpCLEVBQUdtd0MsWUFDYm53QyxFQUFHdStCLHNCQUNGQSxtQkFBbUJ4c0MsaUJBQVNzc0MsZUFBc0IzYSxFQUFPMmEsY0FFckQzYSxFQUFPNHJCLEtBQ1Y5b0IsTUFBTW1uQixRQUFVLFlBQ2pCcGpCLElBQUlwb0MsWUFBWXVoQyxPQUNmckwsRUFBTyt2QixrQkFBa0Ixa0IsZUFDMUI2RyxJQUFJZ00sWUFBWTdTLEdBQ2Jqa0MsS0FBS3l3RCxTQUFXNzNCLEVBQUsrM0IsZ0JBS25DLFNBQVNaLGVBQWdCM25DLEdBRW5CQSxFQUFFNEgsSUFBSXVnQyxXQUNOdmdDLElBQUl1Z0MsVUFHSm5vQyxFQUFFNEgsSUFBSSs1QixZQUNOLzVCLElBQUkrNUIsV0FJVixTQUFTaUcsZUFBZ0I1bkMsS0FDckJqbUIsS0FBS3l1RCxPQUFTeG9DLEVBQUU0SCxJQUFJNC9CLHdCQUd4QixTQUFTSyxpQkFBa0I3bkMsT0FDbkJ5b0MsRUFBU3pvQyxFQUFFam1CLEtBQUt3dEQsSUFDaEJpQixFQUFTeG9DLEVBQUVqbUIsS0FBS3l1RCxPQUNoQkUsRUFBS0QsRUFBT0UsS0FBT0gsRUFBT0csS0FDMUJDLEVBQUtILEVBQU9JLElBQU1MLEVBQU9LLE9BQzNCSCxHQUFNRSxFQUFJLEdBQ1Y3dUQsS0FBS2l1RCxPQUFRLE1BQ1Q3dUQsRUFBSTZtQixFQUFFNEgsSUFBSStXLFFBQ2R4L0IsVUFBWWhHLEVBQUU4dUQsZ0JBQWtCLGFBQWFTLFFBQVFFLFVBQ3JEVixtQkFBcUIsTUFJM0IsSUFBSVksK0JBQ0ZsQywyQkFDQUssaUJBTUYxbkIsSUFBSXBvQixPQUFPc2hCLFlBQWNBLFlBQ3pCOEcsSUFBSXBvQixPQUFPNlYsY0FBZ0JBLGNBQzNCdVMsSUFBSXBvQixPQUFPK3ZCLGVBQWlCQSxlQUM1QjNILElBQUlwb0IsT0FBT2tuQixnQkFBa0JBLGdCQUM3QmtCLElBQUlwb0IsT0FBTzAyQixpQkFBbUJBLGlCQUc5QjdzQixPQUFPdWUsSUFBSXAzQixRQUFRbWxCLFdBQVl5NEIsb0JBQy9CL2tDLE9BQU91ZSxJQUFJcDNCLFFBQVEya0IsV0FBWWc4QixvQkFHL0J2cEIsSUFBSXZrQyxVQUFVNm5DLFVBQVl6ZixVQUFZb2hDLE1BQVF4dEMsT0FHOUN1b0IsSUFBSXZrQyxVQUFVd2hDLE9BQVMsU0FDckJya0IsRUFDQThqQixVQUdPaUgsZUFBZXRyQyxPQURqQnVnQixHQUFNaUwsVUFBWWpyQixNQUFNZ2dCLFFBQU05YyxFQUNINGdDLElBSzlCN1ksaUNBRUlqTSxPQUFPd04sV0FDTEEsa0JBQ08yZ0IsS0FBSyxPQUFRL0YsYUFFZGhhLFFBQVFpTCxLQUFPLE9BQVMsT0FDOUIscUhBS3VCLElBQXpCclosT0FBTzR4QyxlQUNVLG9CQUFaeGpDLGlCQUVDQSxRQUFRaUwsS0FBTyxPQUFTLE9BQzlCLDRLQUtILEdBS0wvUyxJQUFNdXJDLGFBQWUsMkJBQ2ZDLGNBQWdCLHlCQUVoQkMsV0FBYXRwQyxnQkFBT3VwQyxPQUNsQm53QyxFQUFPbXdDLEVBQVcsR0FBRzN3RCxRQUFReXdELGNBQWUsUUFDNUNHLEVBQVFELEVBQVcsR0FBRzN3RCxRQUFReXdELGNBQWUsZUFDNUMsSUFBSXZ3RCxPQUFPc2dCLEVBQU8sZ0JBQWtCb3dDLEVBQU8sT0FLcEQsU0FBU0MsVUFDUHR3RCxFQUNBb3dELE9BRU1HLEVBQVFILEVBQWFELFdBQVdDLEdBQWNILGdCQUMvQ00sRUFBTS9yRCxLQUFLeEUsWUFNWkMsRUFBT3VGLEVBQU9nckQsRUFIWkMsS0FDQUMsS0FDRjl6QixFQUFZMnpCLEVBQU0zekIsVUFBWSxFQUUxQjM4QixFQUFRc3dELEVBQU0zd0QsS0FBS0ksSUFBUSxJQUN6QkMsRUFBTXVGLE9BRUZvM0IsTUFDQTl3QixLQUFLMGtELEVBQWF4d0QsRUFBS3FRLE1BQU11c0IsRUFBV3AzQixNQUMzQ3NHLEtBQUtpVCxLQUFLOEcsVUFBVTJxQyxTQUd2QnBTLEVBQU1ELGFBQWFsK0MsRUFBTSxHQUFHOCtDLFVBQzNCanpDLFdBQVdzeUMsU0FDUnR5QyxNQUFPNmtELFdBQVl2UyxNQUNqQjU0QyxFQUFRdkYsRUFBTSxHQUFHd0YsY0FFM0JtM0IsRUFBWTU4QixFQUFLeUYsV0FDVHFHLEtBQUswa0QsRUFBYXh3RCxFQUFLcVEsTUFBTXVzQixNQUNoQzl3QixLQUFLaVQsS0FBSzhHLFVBQVUycUMsaUJBR2ZDLEVBQU9sd0MsS0FBSyxZQUNoQm13QyxJQU1aLFNBQVNFLGNBQWV4eEMsRUFBSWhRLE9BQ3BCK2MsRUFBTy9jLEVBQVErYyxNQUFRK3lCLFNBQ3ZCL0ssRUFBYzRNLGlCQUFpQjNoQyxFQUFJLFNBQ3JDKzBCLElBQ1VtYyxVQUFVbmMsRUFBYS9rQyxFQUFRZ2hELGVBR3ZDLFVBQVVqYyw2S0FJVi8wQixFQUFHdWhDLFlBQUgsUUFJRnhNLE1BQ0NBLFlBQWNwMUIsS0FBSzhHLFVBQVVzdUIsUUFFNUIwYyxFQUFlalEsZUFBZXhoQyxFQUFJLFNBQVMsR0FDN0N5eEMsTUFDQ0EsYUFBZUEsR0FJdEIsU0FBU0MsUUFBUzF4QyxPQUNacGUsRUFBTyxVQUNQb2UsRUFBRyswQixpQkFDRyxlQUFlLzBCLEVBQUcrMEIsaUJBRXhCLzBCLEVBQUd5eEMsa0JBQ0csU0FBU3p4QyxFQUFHeXhDLGtCQUVmN3ZELEVBR1QsSUFBSSt2RCxxQkFDVyw2QkFDYkgsc0JBQ0FFLFNBS0YsU0FBU0UsZ0JBQWlCNXhDLEVBQUloUSxPQUN0QitjLEVBQU8vYyxFQUFRK2MsTUFBUSt5QixTQUN2QndGLEVBQWMzRCxpQkFBaUIzaEMsRUFBSSxTQUNyQ3NsQyxJQUdZNEwsVUFBVTVMLEVBQWF0MUMsRUFBUWdoRCxlQUd2QyxVQUFVMUwsNktBSVZ0bEMsRUFBR3VoQyxZQUFILFNBSUgrRCxZQUFjM2xDLEtBQUs4RyxVQUFVdytCLGVBQWVLLFNBRzNDdU0sRUFBZXJRLGVBQWV4aEMsRUFBSSxTQUFTLEdBQzdDNnhDLE1BQ0NBLGFBQWVBLEdBSXRCLFNBQVNDLFVBQVc5eEMsT0FDZHBlLEVBQU8sVUFDUG9lLEVBQUdzbEMsaUJBQ0csZUFBZXRsQyxFQUFHc2xDLGlCQUV4QnRsQyxFQUFHNnhDLGtCQUNHLFVBQVU3eEMsRUFBRzZ4QyxtQkFFaEJqd0QsRUFHVCxJQVFJbXdELFFBUkFDLHFCQUNXLDZCQUNFSix3QkFDTkUsV0FPUEcsb0JBQ01DLGtCQUNJSCxTQUFXandELFNBQVNDLGNBQWMsUUFDcENDLFVBQVlrd0QsRUFDYkgsUUFBUXJiLGNBTWJ5YixXQUFhdnJDLFFBQ2pCLDZGQU1Jd3JDLGlCQUFtQnhyQyxRQUN2QiwyREFLSXlyQyxpQkFBbUJ6ckMsUUFDdkIsbVNBWUkwckMsVUFBWSw0RUFDWkMsb0JBQXNCLHdHQUN0QkMsT0FBUyw2QkFBNkJob0Msb0JBQ3RDaW9DLGFBQWUsT0FBT0QsZUFBY0EsV0FDcENFLGFBQWUsSUFBSW55RCxZQUFZa3lELGNBQy9CRSxjQUFnQixhQUNoQnQ0QixPQUFTLElBQUk5NUIsZUFBZWt5RCx1QkFDNUJHLFFBQVUscUJBRVZDLFFBQVUsU0FDVkMsbUJBQXFCLFFBR3JCQyxtQkFBcUJuc0MsUUFBUSx5QkFBeUIsR0FDdERvc0MsV0FFQUMsb0JBQ0ksV0FDQSxhQUNFLFlBQ0QsWUFDQSxZQUNELGFBQ0MsS0FFTEMsWUFBYyw0QkFDZEMsd0JBQTBCLG1DQUcxQkMsbUJBQXFCeHNDLFFBQVEsZ0JBQWdCLEdBQzdDeXNDLGtDQUE0Qjl2RCxFQUFLMnVELFVBQVMzdUQsR0FBTzZ2RCxtQkFBbUI3dkQsSUFBb0IsT0FBWjJ1RCxFQUFLLElBRXZGLFNBQVNvQixXQUFZbHdELEVBQU9td0QsT0FDcEJDLEVBQUtELEVBQXVCSix3QkFBMEJELG1CQUNyRDl2RCxFQUFNL0MsUUFBUW16RCxXQUFJM3lELFVBQVNveUQsWUFBWXB5RCxLQUdoRCxTQUFTNHlELFVBQVd2QixFQUFNbGlELFdBTXBCd2UsRUFBTWtsQyxFQUxKdjlDLEtBQ0F3OUMsRUFBYTNqRCxFQUFRMmpELFdBQ3JCQyxFQUFnQjVqRCxFQUFRbWlELFlBQWNocEMsR0FDdEMwcUMsRUFBc0I3akQsRUFBUW9pRCxrQkFBb0JqcEMsR0FDcEQvaUIsRUFBUSxFQUVMOHJELEdBQU0sTUFDSkEsRUFFRndCLEdBQVlYLG1CQUFtQlcsR0FrRjdCLEtBQ0RJLEVBQWUsRUFDYkMsRUFBYUwsRUFBUXpzQyxjQUNyQitzQyxFQUFlaEIsUUFBUWUsS0FBZ0JmLFFBQVFlLEdBQWMsSUFBSXh6RCxPQUFPLGtCQUFvQnd6RCxFQUFhLFVBQVcsTUFDcEhFLEVBQU8vQixFQUFLN3hELFFBQVEyekQsRUFBYyxTQUFVRSxFQUFLdHpELEVBQU15NUIsWUFDNUNBLEVBQU9oMEIsT0FDakIwc0QsbUJBQW1CZ0IsSUFBOEIsYUFBZkEsTUFDOUJuekQsRUFDSlAsUUFBUSxzQkFBdUIsTUFDL0JBLFFBQVEsNEJBQTZCLE9BRXRDZ3pELHlCQUF5QlUsRUFBWW56RCxPQUNoQ0EsRUFBS3FRLE1BQU0sSUFFaEJqQixFQUFRbWtELFNBQ0ZBLE1BQU12ekQsR0FFVCxRQUVBc3hELEVBQUs3ckQsT0FBUzR0RCxFQUFLNXRELFNBQ3JCNHRELElBQ0tGLEVBQVkzdEQsRUFBUTB0RCxFQUFjMXRELE9BdkdGLEtBQ3hDZ3VELEVBQVVsQyxFQUFLM3FDLFFBQVEsUUFDWCxJQUFaNnNDLEVBQWUsSUFFYnZCLFFBQVF6dEQsS0FBSzhzRCxHQUFPLEtBQ2hCbUMsRUFBYW5DLEVBQUszcUMsUUFBUSxhQUU1QjhzQyxHQUFjLEVBQUcsQ0FDZnJrRCxFQUFRc2tELHFCQUNGekIsUUFBUVgsRUFBS3FDLFVBQVUsRUFBR0YsR0FBYWp1RCxFQUFPQSxFQUFRaXVELEVBQWEsS0FFckVBLEVBQWEsZ0JBTXJCdkIsbUJBQW1CMXRELEtBQUs4c0QsR0FBTyxLQUMzQnNDLEVBQWlCdEMsRUFBSzNxQyxRQUFRLFNBRWhDaXRDLEdBQWtCLEVBQUcsR0FDZkEsRUFBaUIsaUJBTXZCQyxFQUFldkMsRUFBS3J4RCxNQUFNK3hELFlBQzVCNkIsRUFBYyxHQUNSQSxFQUFhLEdBQUdwdUQscUJBS3BCcXVELEVBQWN4QyxFQUFLcnhELE1BQU13NUIsV0FDM0JxNkIsRUFBYSxLQUNUQyxFQUFXdnVELElBQ1RzdUQsRUFBWSxHQUFHcnVELFVBQ1hxdUQsRUFBWSxHQUFJQyxFQUFVdnVELGdCQUtsQ3d1RCxFQUFnQkMsT0FDbEJELEVBQWUsR0FDRkEsR0FDWHZCLHlCQUF5QnVCLEVBQWM1ZSxRQUFTa2MsTUFDMUMsaUJBTVZ0eEQsU0FBTXF6RCxTQUFNbDFCLFlBQ1pxMUIsR0FBVyxFQUFHLE9BQ1RsQyxFQUFLamhELE1BQU1takQsS0FFZi81QixPQUFPajFCLEtBQUs2dUQsSUFDWnZCLGFBQWF0dEQsS0FBSzZ1RCxJQUNsQnBCLFFBQVF6dEQsS0FBSzZ1RCxJQUNibkIsbUJBQW1CMXRELEtBQUs2dUQsT0FHbEJBLEVBQUsxc0MsUUFBUSxJQUFLLElBQ2QsT0FDQXdYLElBQ0ptekIsRUFBS2poRCxNQUFNbWpELEtBRWJsQyxFQUFLcUMsVUFBVSxFQUFHSCxHQUd2QkEsRUFBVSxNQUNMbEMsR0FHTHR4RCxLQUNNQSxFQUFLeUYsUUFHWDJKLEVBQVFta0QsT0FBU3Z6RCxLQUNYdXpELE1BQU12ekQsRUFBTXdGLEVBQVF4RixFQUFLeUYsT0FBUUQsTUEwQnpDOHJELElBQVMxakMsRUFBTSxHQUNUMmxDLE9BQVNua0QsRUFBUW1rRCxNQUFNakMsSUFDMUIvN0MsRUFBTTlQLFFBQVUySixFQUFRK2MsUUFDbkJBLCtDQUErQ21sQyxPQUFXbnJELE1BQU9YLEVBQVE4ckQsRUFBSzdyRCx5QkFTbkZ5dUQsRUFBUy9yRCxNQUNQQSxJQUNGbXBELEVBQUtxQyxVQUFVeHJELFlBR2Y4ckQsUUFDRDl0RCxFQUFRbXJELEVBQUtyeEQsTUFBTTZ4RCxpQkFDckIzckQsRUFBTyxLQU9McXpDLEVBQUtuRyxFQU5IcHpDLFdBQ0trRyxFQUFNLGtCQUVSWCxTQUVEVyxFQUFNLEdBQUdWLFVBRVIrekMsRUFBTThYLEVBQUtyeEQsTUFBTTh4RCxrQkFBb0IxZSxFQUFPaWUsRUFBS3J4RCxNQUFNMHhELHNCQUF3QkwsRUFBS3J4RCxNQUFNeXhELGVBQzVGdnJELE1BQVFYLElBQ0w2dEMsRUFBSyxHQUFHNXRDLFVBQ1grekMsSUFBTWgwQyxJQUNMMDJCLE1BQU1wd0IsS0FBS3VuQyxNQUVmbUcsV0FDSTJhLFdBQWEzYSxFQUFJLEtBQ2ZBLEVBQUksR0FBRy96QyxVQUNUK3pDLElBQU1oMEMsRUFDTHZGLFlBS0ptMEQsRUFBZ0JuMEQsT0FDakJtMUMsRUFBVW4xQyxFQUFNbTFDLFFBQ2hCK2UsRUFBYWwwRCxFQUFNazBELFdBRXJCcEIsSUFDYyxNQUFaRCxHQUFtQnJCLGlCQUFpQnJjLE1BQzFCMGQsR0FFVkcsRUFBb0I3ZCxJQUFZMGQsSUFBWTFkLEtBQ2xDQSxZQUlWaWYsRUFBUXJCLEVBQWM1ZCxNQUFjK2UsRUFFcEN4c0MsRUFBSTFuQixFQUFNaThCLE1BQU16MkIsT0FDaEJ5MkIsRUFBUSxJQUFJMzFCLE1BQU1vaEIsR0FDZjdFLEVBQUksRUFBR0EsRUFBSTZFLEVBQUc3RSxJQUFLLEtBQ3BCaGQsRUFBTzdGLEVBQU1pOEIsTUFBTXBaLEdBQ25CdGdCLEVBQVFzRCxFQUFLLElBQU1BLEVBQUssSUFBTUEsRUFBSyxJQUFNLEdBQ3pDNnNELEVBQW1DLE1BQVp2ZCxHQUErQixTQUFadHZDLEVBQUssR0FDakRzSixFQUFRa2xELDRCQUNSbGxELEVBQVF1akQsdUJBQ043dkMsU0FDRWhkLEVBQUssU0FDSjRzRCxXQUFXbHdELEVBQU9td0QsSUFFdkJ2akQsRUFBUW1sRCxzQkFDSnp4QyxHQUFHM2MsTUFBUUwsRUFBS0ssTUFBUUwsRUFBSyxHQUFHN0YsTUFBTSxRQUFRd0YsU0FDOUNxZCxHQUFHMDJCLElBQU0xekMsRUFBSzB6QyxLQUluQjZhLE1BQ0d2b0QsTUFBT25KLElBQUt5eUMsRUFBU29mLGNBQWVwZixFQUFRL3VCLGNBQWU2VixNQUFPQSxFQUFPLzFCLE1BQU9sRyxFQUFNa0csTUFBT3F6QyxJQUFLdjVDLEVBQU11NUMsUUFDcEdwRSxHQUdSaG1DLEVBQVFqSixTQUNGQSxNQUFNaXZDLEVBQVNsWixFQUFPbTRCLEVBQU9wMEQsRUFBTWtHLE1BQU9sRyxFQUFNdTVDLGNBSW5EaWIsRUFBYXJmLEVBQVNqdkMsRUFBT3F6QyxPQUNoQ2dWLEVBQUtrRyxLQUNJLE1BQVR2dUQsTUFBdUJYLEdBQ2hCLE1BQVBnMEMsTUFBbUJoMEMsR0FHbkI0dkMsUUFDa0JBLEVBQVEvdUIsY0FDdkJtb0MsRUFBTWo1QyxFQUFNOVAsT0FBUyxFQUFHK29ELEdBQU8sR0FDOUJqNUMsRUFBTWk1QyxHQUFLZ0csZ0JBQWtCRSxFQURJbEcsWUFPakMsS0FHSkEsR0FBTyxFQUFHLEtBRVAzckMsSUFBSUMsRUFBSXZOLEVBQU05UCxPQUFTLEVBQUdxZCxHQUFLMHJDLEVBQUsxckMsS0FDbkNBLEVBQUkwckMsSUFBUXBaLEdBQ2RobUMsRUFBUStjLFNBRUFBLGFBQ0U1VyxFQUFNdU4sR0FBR25nQixrQ0FDZndELE1BQU9vUCxFQUFNdU4sR0FBRzNjLFFBR2xCaUosRUFBUW9xQyxPQUNGQSxJQUFJamtDLEVBQU11TixHQUFHbmdCLElBQUt3RCxFQUFPcXpDLEtBSy9CL3pDLE9BQVMrb0QsSUFDTEEsR0FBT2o1QyxFQUFNaTVDLEVBQU0sR0FBRzdyRCxRQUNELE9BQXRCK3hELEVBQ0x0bEQsRUFBUWpKLFNBQ0ZBLE1BQU1pdkMsTUFBYSxFQUFNanZDLEVBQU9xekMsR0FFWCxNQUF0QmtiLElBQ0x0bEQsRUFBUWpKLFNBQ0ZBLE1BQU1pdkMsTUFBYSxFQUFPanZDLEVBQU9xekMsR0FFdkNwcUMsRUFBUW9xQyxPQUNGQSxJQUFJcEUsRUFBU2p2QyxFQUFPcXpDLFFBUXBDOTBCLElBdUJJaXdDLE9BQ0F2RSxXQUNBd0UsV0FDQUMsY0FDQUMsZUFDQUMsaUJBQ0FDLG9CQUNBQyx3QkFDQUMsZUEvQkVDLEtBQU8sWUFDUEMsTUFBUSxZQUNSQyxXQUFhLHFDQUNiQyxjQUFnQixpQ0FDaEJDLGNBQWdCLFdBQ2hCQyxhQUFlLFdBRWZDLE1BQVEsU0FDUkMsT0FBUyxrQkFDVEMsV0FBYSxXQUViQyxPQUFTLGtCQUVUQyxZQUFjLFNBQ2RDLGVBQWlCLE9BRWpCQyxtQkFBcUIsY0FFckJDLGlCQUFtQm52QyxPQUFPd3FDLEdBQUc0RSxRQUU3QkMsb0JBQXNCLFVBYTVCLFNBQVNDLGlCQUNQeHpELEVBQ0F1NUIsRUFDQTdNLGVBR1EsTUFDTjFzQixZQUNXdTVCLFdBQ0RrNkIsYUFBYWw2Qix5QkFFdkI3TSxlQVFKLFNBQVNyUSxNQUNQN1AsRUFDQUMsVUFFU0EsRUFBUStjLE1BQVEreUIsMEJBRU45dkMsRUFBUXdsQyxVQUFZcnNCLHVCQUNqQm5aLEVBQVFzd0IsYUFBZW5YLDJCQUNuQm5aLEVBQVFrMkIsaUJBQW1CL2MsT0FDL0MwTCxFQUFnQjdrQixFQUFRNmtCLGVBQWlCMUwsMkJBQzdCbkosV0FBU0EsRUFBR3VvQixZQUFjMVQsRUFBYzdVLEVBQUd6YyxpQkFFaER5OEMsb0JBQW9CaHdDLEVBQVFxWixRQUFTLCtCQUNsQzIyQixvQkFBb0Jod0MsRUFBUXFaLFFBQVMsbUNBQ3BDMjJCLG9CQUFvQmh3QyxFQUFRcVosUUFBUyxnQ0FFekNyWixFQUFRZ2hELGVBS2pCdnVELEVBQ0F3MEQsRUFKRTlnRCxLQUNBK2dELEdBQW9ELElBQS9CbG5ELEVBQVFrbkQsbUJBQzdCQyxFQUFtQm5uRCxFQUFRb25ELFdBRzdCcmYsR0FBUyxFQUNUc2YsR0FBUSxFQUNSQyxHQUFTLFdBRUpDLEVBQVVocUMsRUFBS3d5QixHQUNqQnVYLE9BQ00sU0FDRi9wQyxFQUFLd3lCLGFBSVB5WCxFQUFjbnlDLFFBQ0FBLEdBQ2hCMHlCLEdBQVcxeUIsRUFBUW95QyxjQUNaQyxlQUFlcnlDLEVBQVNyVixJQUcvQm1HLEVBQU05UCxRQUFVZ2YsSUFBWTVpQixJQUUzQkEsRUFBS2sxRCxLQUFPdHlDLEVBQVF1eUMsUUFBVXZ5QyxFQUFRd3lDLFNBRWpCeHlDLGtCQUVSNWlCLE9BQ1I0aUIsRUFBUXV5QyxhQUNOdnlDLE9BSVAsZ0pBR0V0ZSxNQUFPc2UsRUFBUXRlLFNBSW5Ca3dELElBQWtCNXhDLEVBQVF5eUMsYUFDeEJ6eUMsRUFBUXV5QyxRQUFVdnlDLEVBQVF3eUMseUJBQ1J4eUMsRUFBUzR4QyxPQUN4QixJQUNENXhDLEVBQVEweUMsVUFBVyxLQUlmajRELEVBQU91bEIsRUFBUTJ5QyxZQUFjLGFBQ2pDZixFQUFjOXpCLGNBQWdCOHpCLEVBQWM5ekIsaUJBQW1CcmpDLEdBQVF1bEIsSUFFN0RtSyxTQUFTOWlCLEtBQUsyWSxLQUNwQjRLLE9BQVNnbkMsSUFNYnpuQyxTQUFXbkssRUFBUW1LLFNBQVN6dUIsZ0JBQU84bUIsVUFBT0EsRUFBR2t3QyxjQUVoQzF5QyxHQUdqQkEsRUFBUStnQixTQUNELEdBRVB1dkIsaUJBQWlCdHdDLEVBQVE5aEIsVUFDbkIsT0FHTGtnQixJQUFJQyxFQUFJLEVBQUdBLEVBQUlneUMsZUFBZXJ2RCxPQUFRcWQsbUJBQzFCQSxHQUFHMkIsRUFBU3JWLFlBSXRCaW9ELEVBQXNCajRDLE9BRXhCcTNDLFVBQ0NhLEdBRURBLEVBQVdsNEMsRUFBR3dQLFNBQVN4UCxFQUFHd1AsU0FBU25wQixPQUFTLEtBQzNCLElBQWxCNnhELEVBQVNsMEQsTUFDUyxNQUFsQmswRCxFQUFTdDNELFFBRU40dUIsU0FBU2pkLGVBS1Q0bEQsRUFBc0JuNEMsR0FDZCxTQUFYQSxFQUFHemMsS0FBNkIsYUFBWHljLEVBQUd6YyxPQUV4QixlQUFleWMsRUFBR3pjLDBFQUVoQndELE1BQU9pWixFQUFHalosUUFHWmlaLEVBQUd3Z0MsU0FBU3YvQyxlQUFlLFlBRTNCLDRGQUVBK2UsRUFBR3VoQyxZQUFZLDJCQUtYeHhDLFFBQ0Z3bEQsa0JBQ012bEQsRUFBUTJqRCxzQkFDUjNqRCxFQUFRbWlELDRCQUNGbmlELEVBQVFvaUQsc0NBQ0pwaUQsRUFBUXVqRCxpREFDRHZqRCxFQUFRa2xELDhDQUNsQmxsRCxFQUFRb29ELDJCQUNScG9ELEVBQVFtbEQsaUNBQ3BCNXhELEVBQUt1NUIsRUFBT200QixFQUFPbHVELE9BR2xCMm9CLEVBQU11bkMsR0FBaUJBLEVBQWN2bkMsSUFBT21tQyx3QkFBd0J0eUQsR0FJdEVrb0IsTUFBZSxRQUFQaUUsTUFDRjJvQyxjQUFjdjdCLFFBR3BCelgsRUFBVTB4QyxpQkFBaUJ4ekQsRUFBS3U1QixFQUFPbTZCLEdBQ3ZDdm5DLE1BQ01BLEdBQUtBLEdBSVQxZixFQUFRbWxELHNCQUNGcHVELE1BQVFBLElBQ1J3NkMsWUFBY2w4QixFQUFRbzdCLFVBQVVuM0IsZ0JBQVFndkMsRUFBV3JrQixZQUMvQ0EsRUFBS24wQyxNQUFRbTBDLEVBQ2hCcWtCLFVBR0x2bUQsaUJBQVFraUMsR0FDUjBpQixtQkFBbUJ2eEQsS0FBSzZ1QyxFQUFLbjBDLGNBRTdCLDJHQUdTbTBDLEVBQUtsdEMsTUFBUWt0QyxFQUFLbjBDLEtBQUt5bkIsUUFBUSxTQUNqQzBzQixFQUFLbHRDLE1BQVFrdEMsRUFBS24wQyxLQUFLdUcsV0FPbENreUQsZUFBZWx6QyxLQUFhZ0gsd0JBQ3RCeXJDLFdBQVksU0FFbEIsMElBRUl2MEQsb0NBQ0Z3RCxNQUFPc2UsRUFBUXRlLGFBS2hCMGMsSUFBSUMsRUFBSSxFQUFHQSxFQUFJK3hDLGNBQWNwdkQsT0FBUXFkLE1BQzlCK3hDLGNBQWMveEMsR0FBRzJCLEVBQVNyVixJQUFZcVYsRUFHN0MweUIsZUFDUTF5QixHQUNQQSxFQUFRK2dCLFNBQ0QsSUFHVHV2QixpQkFBaUJ0d0MsRUFBUTloQixVQUNuQixHQUVOdzBDLGtCQUNjMXlCLEdBQ05BLEVBQVFveUMsdUJBRVBweUMsYUFDREEsZUFDRUEsSUFHVDVpQixPQUNJNGlCLEdBTUo0dkMsSUFJVTV2QyxNQUhHQSxJQUNWM1ksS0FBSzJZLGtCQU1WOWhCLEVBQUt3RCxFQUFPcXpDLE9BQ1QvMEIsRUFBVWxQLEVBQU1BLEVBQU05UCxPQUFTLEtBRS9CQSxRQUFVLElBQ0E4UCxFQUFNQSxFQUFNOVAsT0FBUyxHQUNqQzJKLEVBQVFtbEQsc0JBQ0YvYSxJQUFNQSxLQUVILzBCLG1CQUdSemtCLEVBQU1tRyxFQUFPcXpDLE1BQ2I2YyxPQWtCRHhyQyxNQUNvQixhQUF0QndyQyxFQUFjMXpELEtBQ2QwekQsRUFBY3pXLFNBQVN5TixjQUFnQnJ0RCxPQTBCbkNxb0IsRUFDQTBILEVBdkJBbkIsRUFBV3luQyxFQUFjem5DLGNBQzNCNm5DLEdBQVN6MkQsRUFBSysrQyxPQUNUNlksVUFBVXZCLEdBQWlCcjJELEVBQU9nMkQsaUJBQWlCaDJELEdBQ2hENHVCLEVBQVNucEIsT0FHVjh3RCxFQUNnQixhQUFyQkEsR0FHS1YsWUFBWXJ4RCxLQUFLeEUsR0FBUSxHQUV6QixJQUdGczJELEVBQXFCLElBQU0sR0FWM0IsR0Fha0IsYUFBckJDLE1BRUt2MkQsRUFBS1AsUUFBUXEyRCxlQUFnQixPQUlqQzNlLEdBQW1CLE1BQVRuM0MsSUFBaUJxb0IsRUFBTWlvQyxVQUFVdHdELEVBQU1vd0QscUJBRTVDLGFBQ00vbkMsRUFBSStqQixrQkFDUi9qQixFQUFJb29DLFlBQ1p6d0QsR0FFZ0IsTUFBVEEsR0FBaUI0dUIsRUFBU25wQixRQUFpRCxNQUF2Q21wQixFQUFTQSxFQUFTbnBCLE9BQVMsR0FBR3pGLGVBRW5FLE9BQ05BLElBR0ErdkIsSUFDRTNnQixFQUFRbWxELHNCQUNKcHVELE1BQVFBLElBQ1JxekMsSUFBTUEsS0FFTDF0QyxLQUFLaWtCLFVBaEVWL3ZCLElBQVNtUCxJQUVULDRFQUNFaEosS0FFTW5HLEVBQU9BLEVBQUsrK0Msb0JBRVgvK0MsbURBQ1BtRyxzQkE0REhuRyxFQUFNbUcsRUFBT3F6QyxNQUdoQjZjLEVBQWUsS0FDWHRtQyxRQUNFLE9BQ04vdkIsYUFDVyxHQUVUb1AsRUFBUW1sRCxzQkFDSnB1RCxNQUFRQSxJQUNScXpDLElBQU1BLEtBRUE1cUIsU0FBUzlpQixLQUFLaWtCLE9BSTNCbHVCLEVBR1QsU0FBU2cyRCxXQUFZejRDLEdBQ2tCLE1BQWpDMmhDLGlCQUFpQjNoQyxFQUFJLGFBQ3BCb21CLEtBQU0sR0FJYixTQUFTc3lCLGdCQUFpQjE0QyxPQUNsQitHLEVBQU8vRyxFQUFHeWdDLFVBQ1ZocEIsRUFBTTFRLEVBQUsxZ0IsVUFDYm94QixVQUNJcUYsRUFBUTljLEVBQUc4YyxNQUFRLElBQUkzMUIsTUFBTXN3QixHQUMxQi9ULEVBQUksRUFBR0EsRUFBSStULEVBQUsvVCxNQUNqQkEsU0FDRXFELEVBQUtyRCxHQUFHNWpCLFdBQ1A2ZixLQUFLOEcsVUFBVU0sRUFBS3JELEdBQUd0Z0IsUUFFWCxNQUFqQjJqQixFQUFLckQsR0FBRzNjLFVBQ0oyYyxHQUFHM2MsTUFBUWdnQixFQUFLckQsR0FBRzNjLFFBQ25CMmMsR0FBRzAyQixJQUFNcnpCLEVBQUtyRCxHQUFHMDJCLFVBR2pCcDZCLEVBQUdvbUIsUUFFVmdhLE9BQVEsR0FJZixTQUFTc1gsZUFDUHJ5QyxFQUNBclYsY0FFV3FWLEtBSUgrNkIsT0FDTC82QixFQUFROWYsTUFDUjhmLEVBQVE4ZCxjQUNSOWQsRUFBUW83QixVQUFVcDZDLGtCQUdWZ2Ysc0JBQ1FBLHFCQUNEQSxvQkFDREEsT0FDWjVCLElBQUlDLEVBQUksRUFBR0EsRUFBSTh4QyxXQUFXbnZELE9BQVFxZCxNQUMzQjh4QyxXQUFXOXhDLEdBQUcyQixFQUFTclYsSUFBWXFWLHNCQUVsQ0EsR0FDTkEsRUFHVCxTQUFTc3pDLFdBQVkzNEMsT0FDYmcvQixFQUFNd0MsZUFBZXhoQyxFQUFJLFVBQzNCZy9CLEVBQUssSUFFVSxhQUFYaC9CLEVBQUd6YyxZQUVILHNFQUNBKzlDLGtCQUFrQnRoQyxFQUFJLFFBR3RCQSxFQUFHNDRDLElBQUssS0FDSjk1QixFQUFXOWUsRUFBRzY0QyxXQUFhNzRDLEVBQUc4NEMsVUFDOUI3b0MsRUFBU2pRLEVBQUdpUSxPQUNkNk8sR0FBWUEsSUFBYWtnQixHQUFPL3VCLEdBQXlCLHFCQUFmQSxFQUFPMXNCLFlBRWpELG9HQUVBKzlDLGtCQUFrQnRoQyxFQUFJLFFBQ3RCLEtBS0x6YSxJQUFNeTVDLEdBSWIsU0FBUytaLFdBQVkvNEMsT0FDYjgyQixFQUFNMEssZUFBZXhoQyxFQUFJLE9BQzNCODJCLE1BQ0NBLElBQU1BLElBQ05JLFNBQVc4aEIsV0FBV2g1QyxJQUk3QixTQUFTaTVDLFdBQVlqNUMsT0FDZmcvQixLQUNDQSxFQUFNMkMsaUJBQWlCM2hDLEVBQUksU0FBVyxLQUNuQ2lKLEVBQU1pd0MsU0FBU2xhLEdBQ2pCLzFCLFNBQ0tqSixFQUFJaUosdUNBR29CKzFCLEVBQzdCaC9CLEVBQUd1aEMsWUFBWSxXQVF2QixTQUFTMlgsU0FBVWxhLE9BQ1htYSxFQUFVbmEsRUFBSW4rQyxNQUFNbzFELGVBQ3JCa0QsT0FDQ2x3QyxPQUNGMnZDLElBQU1PLEVBQVEsR0FBR3haLFdBQ2Z5WixFQUFRRCxFQUFRLEdBQUd4WixPQUFPdC9DLFFBQVE4MUQsY0FBZSxJQUNqRGtELEVBQWdCRCxFQUFNdjRELE1BQU1xMUQsc0JBQzlCbUQsS0FDRUQsTUFBUUEsRUFBTS80RCxRQUFRNjFELGNBQWUsSUFBSXZXLFNBQ3pDbVosVUFBWU8sRUFBYyxHQUFHMVosT0FDN0IwWixFQUFjLE9BQ1pSLFVBQVlRLEVBQWMsR0FBRzFaLFdBRy9CeVosTUFBUUEsRUFFUG53QyxHQUdULFNBQVNxd0MsVUFBV3Q1QyxPQUNaZy9CLEVBQU0yQyxpQkFBaUIzaEMsRUFBSSxXQUM3QmcvQixJQUNDMlksR0FBSzNZLGlCQUNPaC9CLE9BQ1JnL0IsUUFDRWgvQixRQUVKLENBQ2lDLE1BQWxDMmhDLGlCQUFpQjNoQyxFQUFJLGNBQ3BCNjNDLE1BQU8sT0FFTkQsRUFBU2pXLGlCQUFpQjNoQyxFQUFJLGFBQ2hDNDNDLE1BQ0NBLE9BQVNBLElBS2xCLFNBQVMyQixvQkFBcUJ2NUMsRUFBSWlRLE9BQzFCZ3ZCLEVBQU91YSxnQkFBZ0J2cEMsRUFBT1QsVUFDaEN5dkIsR0FBUUEsRUFBSzBZLGtCQUNBMVksT0FDUmovQixFQUFHNDNDLGFBQ0Q1M0MsV0FJUCxNQUFLQSxFQUFHNDNDLE9BQVUsWUFBYzUzQyxFQUFHNDNDLE9BQVMsSUFBTyw2QkFDL0I1M0MsRUFBR3pjLG9DQUN2QnljLEVBQUd1aEMsWUFBWXZoQyxFQUFHNDNDLE9BQVMsWUFBYyxXQUsvQyxTQUFTNEIsZ0JBQWlCaHFDLFdBQ3BCOUwsRUFBSThMLEVBQVNucEIsT0FDVnFkLEtBQUssSUFDZSxJQUFyQjhMLEVBQVM5TCxHQUFHMWYsWUFDUHdyQixFQUFTOUwsR0FFUyxNQUFyQjhMLEVBQVM5TCxHQUFHOWlCLGFBRVosU0FBUzR1QixFQUFTOUwsR0FBRzlpQixLQUFLKytDLHlEQUUxQm53QixFQUFTOUwsTUFHSm5SLE9BS2YsU0FBU2tuRCxlQUFnQno1QyxFQUFJMDVDLEdBQ3RCMTVDLEVBQUcyNUMsaUJBQ0hBLG1CQUVGQSxhQUFhanRELEtBQUtndEQsR0FHdkIsU0FBU0UsWUFBYTU1QyxHQUVMLE1BREMyaEMsaUJBQWlCM2hDLEVBQUksY0FFaENtSyxNQUFPLEdBTWQsU0FBUzB2QyxtQkFBb0I3NUMsT0FDdkIrM0MsRUFDVyxhQUFYLzNDLEVBQUd6YyxRQUNPbytDLGlCQUFpQjNoQyxFQUFJLGtCQUk3QiwwTkFJQUEsRUFBR3VoQyxZQUFILE9BQ0EsS0FHRHdXLFVBQVlBLEdBQWFwVyxpQkFBaUIzaEMsRUFBSSxnQkFDdkMrM0MsRUFBWXBXLGlCQUFpQjNoQyxFQUFJLGlCQUV2Q0EsRUFBR3dnQyxTQUFTLGlCQUVaLHdEQUF3RHhnQyxFQUFHemMsd0dBRzNEeWMsRUFBR3VoQyxZQUFZLGVBQ2YsS0FHRHdXLFVBQVlBLE9BSVhDLEVBQWF4VyxlQUFleGhDLEVBQUksV0FDbENnNEMsTUFDQ0EsV0FBNEIsT0FBZkEsRUFBc0IsWUFBY0EsSUFDakQ4QixxQkFBdUI5NUMsRUFBR3dnQyxTQUFTLFdBQVl4Z0MsRUFBR3dnQyxTQUFTLGdCQUcvQyxhQUFYeGdDLEVBQUd6YyxLQUF1QnljLEVBQUcrM0MsbUJBQ3ZCLzNDLEVBQUksT0FBUWc0QyxFQUFZMVcsa0JBQWtCdGhDLEVBQUksVUFNekMsYUFBWEEsRUFBR3pjLElBQW9CLEtBRW5CdzJELEVBQWNqWSx3QkFBd0I5aEMsRUFBSXcyQyxXQUM1Q3VELEVBQWEsRUFFVC81QyxFQUFHZzRDLFlBQWNoNEMsRUFBRyszQyxtQkFFcEIscURBQ0EvM0MsR0FHQUEsRUFBR2lRLFNBQVc2bEMsZUFBZTkxQyxFQUFHaVEsZ0JBRWhDLHlGQUVBalEsU0FJb0JnNkMsWUFBWUQsMEJBQ25DL0IsV0FBYWw0RCxJQUNiZzZELGtCQUFvQjVaLElBQ3BCNlgsVUFBWWdDLEVBQVkzMkQsT0FBUzB6RCx5QkFFakMsS0FFQ2lELEVBQWNqWSx3QkFBd0I5aEMsRUFBSXcyQyxXQUM1Q3VELEVBQWEsQ0FFUmpFLGVBQWU5MUMsV0FFaEIsdURBQ0ErNUMsSUFHQS81QyxFQUFHKzNDLFdBQWEvM0MsRUFBR2c0QyxvQkFFbkIscURBQ0FoNEMsR0FHQUEsRUFBR21qQixvQkFFSCxpSEFFQTQyQixPQUtBNzdCLEVBQVFsZSxFQUFHbWpCLGNBQWdCbmpCLEVBQUdtakIsa0JBQ1Y2MkIsWUFBWUQsd0JBQ2hDRSxFQUFnQi83QixFQUFNcCtCLEdBQVFpM0QsaUJBQWlCLGNBQWdCLzJDLEtBQ3ZEZzRDLFdBQWFsNEQsSUFDYmc2RCxrQkFBb0I1WixJQUNwQjF3QixTQUFXeFAsRUFBR3dQLFNBQVN6dUIsZ0JBQVE4bUIsT0FDdENBLEVBQUVrd0MsbUJBQ0g5bkMsT0FBU2dxQyxHQUNKLE1BR0dsQyxVQUFZZ0MsRUFBWTMyRCxPQUFTMHpELHNCQUU1Q3RuQyxjQUVBNHdCLE9BQVEsSUFNbkIsU0FBUzRaLFlBQWFqdUQsT0FDaEJqTSxFQUFPaU0sRUFBUWpNLEtBQUtPLFFBQVFtMkQsT0FBUSxXQUNuQzEyRCxJQUNxQixNQUFwQmlNLEVBQVFqTSxLQUFLLEtBQ1IsaUJBR0wsZ0RBQ0FpTSxJQUlDcXFELGFBQWFoeEQsS0FBS3RGLElBRW5CQSxLQUFNQSxFQUFLbVIsTUFBTSxHQUFJLEdBQUlpdkMsU0FBUyxJQUVsQ3BnRCxTQUFVQSxNQUFTb2dELFNBQVMsR0FJcEMsU0FBU2dhLGtCQUFtQmw2QyxHQUNYLFNBQVhBLEVBQUd6YyxRQUNGNDJELFNBQVczWSxlQUFleGhDLEVBQUksUUFDN0JBLEVBQUd6YSxZQUVILDhKQUdBKzdDLGtCQUFrQnRoQyxFQUFJLFNBTTlCLFNBQVNvNkMsaUJBQWtCcDZDLE9BQ3JCalUsR0FDQ0EsRUFBVXkxQyxlQUFleGhDLEVBQUksV0FDN0J1b0IsVUFBWXg4QixHQUU4QixNQUEzQzQxQyxpQkFBaUIzaEMsRUFBSSx1QkFDcEJrbEIsZ0JBQWlCLEdBSXhCLFNBQVNtMUIsYUFBY3I2QyxPQUVqQjBELEVBQUc2RSxFQUFHem9CLEVBQU13OUMsRUFBU2w2QyxFQUFPZzZDLEVBQVdrZCxFQUFTQyxFQUQ5Q3h6QyxFQUFPL0csRUFBR3lnQyxjQUVYLzhCLEVBQUksRUFBRzZFLEVBQUl4QixFQUFLMWdCLE9BQVFxZCxFQUFJNkUsRUFBRzdFLElBQUssTUFDaEM0NUIsRUFBVXYyQixFQUFLckQsR0FBRzVqQixPQUNqQmluQixFQUFLckQsR0FBR3RnQixNQUNaNHlELE1BQU01d0QsS0FBS3RGLFFBRVYwNkQsYUFBYyxLQUVMQyxlQUFlMzZELEVBQUtPLFFBQVEyMUQsTUFBTyxVQUd0Q2wyRCxFQUFLTyxRQUFRazJELFdBQVksS0FFOUJELE9BQU9seEQsS0FBS3RGLEtBQ1BBLEVBQUtPLFFBQVFpMkQsT0FBUSxNQUNwQnZYLGFBQWEzN0MsTUFDVGd6RCxhQUFhaHhELEtBQUt0RixRQUVyQkEsRUFBS21SLE1BQU0sR0FBSSxJQUdFLElBQXhCN04sRUFBTXU4QyxPQUFPdDVDLHNGQUc0RHZHLE9BR3ZFczlDLElBQ0VBLEVBQVVqbkIsT0FBU29rQyxHQUVSLGlCQUROM3lDLFNBQVM5bkIsUUFDaUIsYUFFL0JzOUMsRUFBVXNkLFFBQVVILE1BQ2YzeUMsU0FBUzluQixJQUVkczlDLEVBQVVsVixTQUNGZ2Esa0JBQWtCOStDLEVBQU8sVUFDOUJtM0QsYUF3QkR2NkMsZ0JBQ2NsZ0IsTUFDZHc2RCxFQUNBLE1BQ0EsRUFDQS9FLE9BQ0F4dUMsRUFBS3JELElBQ0wsZUE3QkExRCxZQUNVNEgsU0FBUzluQixHQUNuQnc2RCxFQUNBLE1BQ0EsRUFDQS9FLE9BQ0F4dUMsRUFBS3JELElBRUh3RSxVQUFVcG9CLEtBQVU4bkIsU0FBUzluQixlQUU3QmtnQixZQUNVa0ksVUFBVXBvQixHQUNwQnc2RCxFQUNBLE1BQ0EsRUFDQS9FLE9BQ0F4dUMsRUFBS3JELE9Ba0JWMDVCLEdBQWFBLEVBQVVqbkIsT0FDekJuVyxFQUFHdW9CLFdBQWFxdEIsb0JBQW9CNTFDLEVBQUd6YyxJQUFLeWMsRUFBR3dnQyxTQUFTeDhDLEtBQU1sRSxXQUV2RGtnQixFQUFJbGdCLEVBQU1zRCxFQUFPMmpCLEVBQUtyRCxHQUFJNjJDLFdBRTFCdjZDLEVBQUlsZ0IsRUFBTXNELEVBQU8yakIsRUFBS3JELEdBQUk2MkMsUUFFL0IsR0FBSXhFLEtBQUszd0QsS0FBS3RGLEtBQ1pBLEVBQUtPLFFBQVEwMUQsS0FBTSxPQUNkSyxhQUFhaHhELEtBQUt0RixRQUVyQkEsRUFBS21SLE1BQU0sR0FBSSxlQUViK08sRUFBSWxnQixFQUFNc0QsRUFBT2c2QyxHQUFXLEVBQU9tWSxPQUFReHVDLEVBQUtyRCxHQUFJNjJDLE9BQzFELEtBR0NJLEtBRkM3NkQsRUFBS08sUUFBUTIxRCxNQUFPLEtBRUxuMUQsTUFBTXcxRCxPQUN4QmhwRCxFQUFNc3RELEdBQVlBLEVBQVMsTUFDbkIsRUFDUnR0RCxNQUNLdk4sRUFBS21SLE1BQU0sSUFBSzVELEVBQUloSCxPQUFTLElBQ2hDK3ZELGFBQWFoeEQsS0FBS2lJLE9BQ2RBLEVBQUk0RCxNQUFNLEdBQUksTUFDUixpQkFHSCtPLEVBQUlsZ0IsRUFBTXc5QyxFQUFTbDZDLEVBQU9pSyxFQUFLa3RELEVBQVduZCxFQUFXcjJCLEVBQUtyRCxJQUMxRCxVQUFUNWpCLHNCQUNpQmtnQixFQUFJNWMsUUFNYjh0RCxVQUFVOXRELEVBQU80dEQsb0JBR3pCbHhELE9BQVlzRCx1S0FJWjJqQixFQUFLckQsWUFJSDFELEVBQUlsZ0IsRUFBTTZmLEtBQUs4RyxVQUFVcmpCLEdBQVEyakIsRUFBS3JELEtBR3pDMUQsRUFBR3VvQixXQUNLLFVBQVR6b0MsR0FDQTgxRCxvQkFBb0I1MUMsRUFBR3pjLElBQUt5YyxFQUFHd2dDLFNBQVN4OEMsS0FBTWxFLFlBQ3hDa2dCLEVBQUlsZ0IsRUFBTSxPQUFRaW5CLEVBQUtyRCxLQU12QyxTQUFTczFDLFdBQVloNUMsV0FDZmlRLEVBQVNqUSxFQUNOaVEsR0FBUSxTQUNNL3NCLElBQWYrc0IsRUFBTzJvQyxXQUNGLElBRUEzb0MsRUFBT0EsY0FFWCxFQUdULFNBQVN3cUMsZUFBZ0IzNkQsT0FDakJlLEVBQVFmLEVBQUtlLE1BQU0wMUQsZUFDckIxMUQsRUFBTyxLQUNIK25CLGNBQ0E3VyxpQkFBUXdYLEtBQVdBLEVBQUV0WSxNQUFNLEtBQU0sSUFDaEMyWCxHQUlYLFNBQVNvdUMsYUFBY2w2QixXQUNmNW9CLEtBQ0d3UCxFQUFJLEVBQUc2RSxFQUFJdVUsRUFBTXoyQixPQUFRcWQsRUFBSTZFLEVBQUc3RSxLQUVyQ3hQLEVBQUk0b0IsRUFBTXBaLEdBQUc1akIsT0FBVTJyQixNQUFTRSxlQUV6Qix3QkFBMEJtUixFQUFNcFosR0FBRzVqQixLQUFNZzlCLEVBQU1wWixNQUVwRG9aLEVBQU1wWixHQUFHNWpCLE1BQVFnOUIsRUFBTXBaLEdBQUd0Z0IsYUFFekI4USxFQUlULFNBQVNza0QsVUFBV3g0QyxTQUNBLFdBQVhBLEVBQUd6YyxLQUErQixVQUFYeWMsRUFBR3pjLElBR25DLFNBQVNnMUQsZUFBZ0J2NEMsU0FFVixVQUFYQSxFQUFHemMsS0FDUyxXQUFYeWMsRUFBR3pjLE9BQ0R5YyxFQUFHd2dDLFNBQVN4OEMsTUFDUSxvQkFBckJnYyxFQUFHd2dDLFNBQVN4OEMsTUFLbEJzaEIsSUFBTXMxQyxRQUFVLGVBQ1ZDLFdBQWEsVUFHbkIsU0FBU3hDLGNBQWV2N0IsV0FDaEI3VCxLQUNHdkYsRUFBSSxFQUFHQSxFQUFJb1osRUFBTXoyQixPQUFRcWQsSUFBSyxLQUMvQnV3QixFQUFPblgsRUFBTXBaLEdBQ2RrM0MsUUFBUXgxRCxLQUFLNnVDLEVBQUtuMEMsVUFDaEJBLEtBQU9tMEMsRUFBS24wQyxLQUFLTyxRQUFRdzZELFdBQVksTUFDdENudUQsS0FBS3VuQyxXQUdOaHJCLEVBR1QsU0FBUzZ4QyxtQkFBb0I5NkMsRUFBSTVjLFdBQzNCMjNELEVBQU0vNkMsRUFDSCs2QyxHQUNEQSxFQUFJbkMsS0FBT21DLEVBQUkzQixRQUFVaDJELFVBRXpCLElBQUk0YyxFQUFHemMsaUJBQWdCSCx3UkFLdkI0YyxFQUFHdWhDLFlBQVksY0FHYndaLEVBQUk5cUMsT0FNZCxTQUFTK3FDLGlCQUFrQmg3QyxFQUFJaFEsTUFDZCxVQUFYZ1EsRUFBR3pjLElBQWlCLEtBTWxCKy9DLEVBTEVwdkMsRUFBTThMLEVBQUd3Z0MsYUFDVnRzQyxFQUFJLHNCQUtMQSxFQUFJLFVBQVlBLEVBQUksb0JBQ1JzdEMsZUFBZXhoQyxFQUFJLFNBRTlCOUwsRUFBSWxRLE1BQVNzL0MsSUFBZXB2QyxFQUFJLGNBQ3JCLElBQUlBLEVBQUksb0JBR3BCb3ZDLEVBQWEsS0FDVDJYLEVBQWN0WixpQkFBaUIzaEMsRUFBSSxRQUFRLEdBQzNDazdDLEVBQW1CRCxRQUFvQkEsTUFBaUIsR0FDeERFLEVBQWtELE1BQXhDeFosaUJBQWlCM2hDLEVBQUksVUFBVSxHQUN6Q283QyxFQUFrQnpaLGlCQUFpQjNoQyxFQUFJLGFBQWEsR0FFcERxN0MsRUFBVUMsZ0JBQWdCdDdDLGNBRXJCcTdDLGNBQ0FBLEVBQVMsT0FBUSwyQkFDYkEsRUFBU3JyRCxLQUNoQnluRCxXQUFZLElBQ1pFLEdBQUssSUFBSXJVLG1CQUE4QjRYLGlCQUNoQ0csT0FDUkEsRUFBUTFELFNBQ04wRCxRQUdIRSxFQUFVRCxnQkFBZ0J0N0Msb0JBQ2Z1N0MsRUFBUyxTQUFTLGNBQ3hCQSxFQUFTLE9BQVEsd0JBQ2JBLEVBQVN2ckQsa0JBQ1RxckQsT0FDUixJQUFJL1gsZ0JBQTJCNFgsUUFDN0JLLFFBR0hDLEVBQVVGLGdCQUFnQnQ3QywyQkFDZnc3QyxFQUFTLFNBQVMsY0FDeEJBLEVBQVMsUUFBU2xZLGtCQUNka1ksRUFBU3hyRCxrQkFDVHFyRCxPQUNSSixRQUNFTyxJQUdMTCxJQUNNdEQsTUFBTyxFQUNOdUQsTUFDRHhELE9BQVN3RCxHQUdaQyxJQUtiLFNBQVNDLGdCQUFpQnQ3QyxVQUNqQisyQyxpQkFBaUIvMkMsRUFBR3pjLElBQUt5YyxFQUFHeWdDLFVBQVV4dkMsUUFBUytPLEVBQUdpUSxRQUczRCxJQUFJd3JDLDBCQUNGVCxrQkFHRVUsV0FDRi9KLFFBQ0FLLFFBQ0F5SixTQUtGLFNBQVM3NkQsS0FBTW9mLEVBQUl2ZSxHQUNiQSxFQUFJMkIsZUFDRTRjLEVBQUksb0JBQXFCdmUsRUFBSTJCLFVBQVUzQixHQU1uRCxTQUFTeXdELEtBQU1seUMsRUFBSXZlLEdBQ2JBLEVBQUkyQixlQUNFNGMsRUFBSSxrQkFBbUJ2ZSxFQUFJMkIsVUFBVTNCLEdBSWpELElBdUJJazZELFlBQ0FDLHNCQXhCQUMsb0JBQ0YvMkIsV0FDQWxrQyxVQUNBc3hELE1BS0k0Six5QkFDUSxVQUNISixxQkFDR0csc0JBQ1pybUIsb0JBQ0EyYyx1QkFDQTd4Qiw2QkFDQTh4QiwrQkFDQXY5Qiw4QkFDQXFSLDJCQUNZOWMsY0FBY3N5QyxZQVF0Qkssb0JBQXNCdDBDLE9BQU91MEMsaUJBYW5DLFNBQVNDLFNBQVV4NUQsRUFBTXVOLEdBQ2xCdk4sZ0JBQ1NzNUQsb0JBQW9CL3JELEVBQVF3WixZQUFjLDBCQUNoQ3haLEVBQVE2a0IsZUFBaUIxTCxnQkFFcEMxbUIsbUJBRUdBLEdBQU0sSUFHeEIsU0FBU3U1RCxnQkFBaUJ2M0QsVUFDakJtaUIsUUFDTCxpRkFDQ25pQixFQUFPLElBQU1BLEVBQU8sS0FJekIsU0FBU3kzRCxhQUFjcnJDLFFBQ2hCc3JDLE9BQVNoc0MsU0FBU1UsR0FDTCxJQUFkQSxFQUFLN3NCLEtBQVksS0FLaEI0M0Qsc0JBQXNCL3FDLEVBQUt0dEIsTUFDZixTQUFic3RCLEVBQUt0dEIsS0FDK0IsTUFBcENzdEIsRUFBSzJ2QixTQUFTLDhCQUlYLzhCLElBQUlDLEVBQUksRUFBRzZFLEVBQUlzSSxFQUFLckIsU0FBU25wQixPQUFRcWQsRUFBSTZFLEVBQUc3RSxJQUFLLEtBQzlDaU4sRUFBUUUsRUFBS3JCLFNBQVM5TCxnQkFDZmlOLEdBQ1JBLEVBQU13ckMsV0FDSkEsUUFBUyxNQUdkdHJDLEVBQUs4b0MsaUJBQ0ZsMkMsSUFBSUMsRUFBSSxFQUFHNkUsRUFBSXNJLEVBQUs4b0MsYUFBYXR6RCxPQUFRcWQsRUFBSTZFLEVBQUc3RSxJQUFLLEtBQ2xEMDRDLEVBQVF2ckMsRUFBSzhvQyxhQUFhajJDLEdBQUcwNEMsbUJBQ3RCQSxHQUNSQSxFQUFNRCxXQUNKQSxRQUFTLEtBT3hCLFNBQVNFLGdCQUFpQnhyQyxFQUFNOFAsTUFDWixJQUFkOVAsRUFBSzdzQixLQUFZLEtBQ2Y2c0IsRUFBS3NyQyxRQUFVdHJDLEVBQUsxRyxVQUNqQm15QyxZQUFjMzdCLEdBS2pCOVAsRUFBS3NyQyxRQUFVdHJDLEVBQUtyQixTQUFTbnBCLFNBQ04sSUFBekJ3cUIsRUFBS3JCLFNBQVNucEIsUUFDWSxJQUExQndxQixFQUFLckIsU0FBUyxHQUFHeHJCLG9CQUVadTRELFlBQWEsUUFHYkEsWUFBYSxFQUVoQjFyQyxFQUFLckIsYUFDRi9MLElBQUlDLEVBQUksRUFBRzZFLEVBQUlzSSxFQUFLckIsU0FBU25wQixPQUFRcWQsRUFBSTZFLEVBQUc3RSxvQkFDL0JtTixFQUFLckIsU0FBUzlMLEdBQUlpZCxLQUFhOVAsRUFBSytuQyxRQUdwRC9uQyxFQUFLOG9DLGlCQUNGbDJDLElBQUlDLEVBQUksRUFBRzZFLEVBQUlzSSxFQUFLOG9DLGFBQWF0ekQsT0FBUXFkLEVBQUk2RSxFQUFHN0Usb0JBQ25DbU4sRUFBSzhvQyxhQUFhajJDLEdBQUcwNEMsTUFBT3o3QixJQU1wRCxTQUFTeFEsU0FBVVUsVUFDQyxJQUFkQSxFQUFLN3NCLE9BR1MsSUFBZDZzQixFQUFLN3NCLFNBR0M2c0IsRUFBS3VWLE1BQ1p2VixFQUFLMnBDLGFBQ0wzcEMsRUFBSzhtQyxJQUFPOW1DLEVBQUsrbkMsS0FDakIxeEMsYUFBYTJKLEVBQUt0dEIsNkJBQ0dzdEIsRUFBS3R0QixNQUMxQmk1RCwyQkFBMkIzckMsS0FDNUJ0dUIsT0FBT2tDLEtBQUtvc0IsR0FBTS9HLE1BQU02eEMsZ0JBSTVCLFNBQVNhLDJCQUE0QjNyQyxRQUM1QkEsRUFBS1osUUFBUSxJQUVELGdCQURWWSxFQUFLWixRQUNIMXNCLFdBQ0EsS0FFTHN0QixFQUFLK25DLFdBQ0EsU0FHSixFQUtUdHpDLElBQU1tM0MsUUFBVSw0Q0FDVkMsV0FBYSxnQkFDYkMsYUFBZSwrRkFHZi9oQyxjQUNDLE9BQ0EsUUFDRSxTQUNBLE1BQ0gsUUFDRSxTQUNDLFFBQ0QsV0FDSyxFQUFHLEtBSVZnaUMsZUFFRSxNQUFPLGNBQ1IsWUFDRSxlQUVDLElBQUssZ0JBRVIsS0FBTSxpQkFDSixPQUFRLG9CQUNQLFFBQVMsb0JBQ1YsT0FBUSxxQkFFSixZQUFhLFNBQVUsUUFNOUJDLGtCQUFXbkQsZUFBbUJBLG1CQUU5Qm9ELG1CQUNFLG9DQUNHLGdDQUNIRCxTQUFTLCtDQUNUQSxTQUFTLHlCQUNSQSxTQUFTLHdCQUNYQSxTQUFTLHVCQUNSQSxTQUFTLHdCQUNUQSxTQUFTLG9EQUNQQSxTQUFTLG1EQUNWQSxTQUFTLDhDQUdsQixTQUFTRSxZQUNQaGMsRUFDQXIwQixPQUVNc3dDLEVBQVN0d0MsRUFBVyxZQUFjLE1BQ3BDdXdDLEVBQWlCLEdBQ2pCQyxFQUFrQixPQUNqQjUzQyxJQUFNeGxCLEtBQVFpaEQsRUFBUSxLQUNuQm9jLEVBQWNDLFdBQVdyYyxFQUFPamhELElBQ2xDaWhELEVBQU9qaEQsSUFBU2loRCxFQUFPamhELEdBQU1vZ0QsV0FDWnBnRCxNQUFXcTlELFNBRVosSUFBSXI5RCxPQUFTcTlELGVBR2xCLElBQUlGLEVBQWVoc0QsTUFBTSxHQUFJLE9BQzFDaXNELEVBQ0tGLEVBQVMsTUFBTUMsT0FBbUJDLEVBQWdCanNELE1BQU0sR0FBSSxRQUU1RCtyRCxFQUFTQyxFQUlwQixTQUFTRyxXQUFZM2tDLE9BQ2RBLFFBQ0ksa0JBR0x0eEIsTUFBTW1DLFFBQVFtdkIsYUFDTEEsRUFBUXZrQixhQUFJdWtCLFVBQVcya0MsV0FBVzNrQyxLQUFVdFgsS0FBSyxhQUd4RGs4QyxFQUFlVixhQUFhdjNELEtBQUtxekIsRUFBUXIxQixPQUN6Q2s2RCxFQUF1QmIsUUFBUXIzRCxLQUFLcXpCLEVBQVFyMUIsT0FDNUNtNkQsRUFBdUJaLGFBQWF2M0QsS0FBS3F6QixFQUFRcjFCLE1BQU0vQyxRQUFRcThELFdBQVksUUFFNUVqa0MsRUFBUTJrQixVQU9OLEtBQ0RnRyxFQUFPLEdBQ1BvYSxFQUFrQixHQUNoQi80RCxTQUNENmdCLElBQU0vZixLQUFPa3pCLEVBQVEya0IsYUFDcEIwZixhQUFhdjNELE1BQ0l1M0QsYUFBYXYzRCxHQUU1QnExQixTQUFTcjFCLE1BQ05tSCxLQUFLbkgsUUFFUCxHQUFZLFVBQVJBLEVBQWlCLEtBQ3BCNjNDLEVBQWEza0IsRUFBUTJrQixhQUNSeWYsVUFDaEIsT0FBUSxRQUFTLE1BQU8sUUFDdEI5N0QsZ0JBQU8wOEQsVUFBZ0JyZ0IsRUFBVXFnQixLQUNqQ3ZwRCxhQUFJdXBELG1CQUF5QkEsVUFDN0J0OEMsS0FBSyxjQUdMelUsS0FBS25ILFVBR1ZkLEVBQUs0QixZQUNDcTNELGFBQWFqNUQsSUFHbkIrNEQsT0FDTUEsdUJBU2lCcGEsR0FQUGlhLFlBQ041a0MsRUFBUXIxQixpQkFDbEJrNkQsYUFDYTdrQyxFQUFRcjFCLGtCQUNuQm02RCxZQUNZOWtDLEVBQVFyMUIsTUFDbEJxMUIsRUFBUXIxQixrQkExQ1ppNkQsR0FBZ0JDLEVBQ1g3a0MsRUFBUXIxQiwyQkFHZm02RCxZQUFpQzlrQyxFQUFRcjFCLE1BQVVxMUIsRUFBUXIxQixXQTJDakUsU0FBU3M2RCxhQUFjajVELDRDQU1oQkEsRUFBS3lQLElBQUl5cEQsZUFBZXg4QyxLQUFLLHNCQUlwQyxTQUFTdzhDLGNBQWVwNEQsT0FDaEJxNEQsRUFBU3JxQixTQUFTaHVDLEVBQUssT0FDekJxNEQsNEJBQ3lCQSxNQUV2QkMsRUFBVWpqQyxTQUFTcjFCLEdBQ25CdTRELEVBQVVsQixTQUFTcjNELFNBRXZCLHFCQUNHb2EsS0FBSzhHLFVBQVVsaEIsT0FDZm9hLEtBQUs4RyxVQUFVbzNDLGtCQUVmbCtDLEtBQUs4RyxVQUFVcTNDLEdBQ2xCLElBTUosU0FBUzNoQyxHQUFJbmMsRUFBSXZlLEdBQ1hBLEVBQUkyN0MsZ0JBQ0QsdURBRUoyZ0IsdUJBQWlCM2EsZUFBZUEsTUFBUTNoRCxFQUFJMkIsV0FLakQsU0FBUzQ2RCxPQUFRaCtDLEVBQUl2ZSxLQUNoQnc4RCxrQkFBWTdhLGVBQ0FBLE9BQVNwakMsRUFBR3pjLFNBQVE5QixFQUFJMkIsV0FDbkMzQixFQUFJMjdDLFdBQWEzN0MsRUFBSTI3QyxVQUFVam5CLEtBQU8sT0FBUyxVQUUvQzEwQixFQUFJMjdDLFdBQWEzN0MsRUFBSTI3QyxVQUFVbFYsS0FBTyxRQUFVLFNBT3RELElBQUlnMkIsbUJBQ0YvaEMsUUFDTTZoQyxhQUNDbi9DLFFBU0hzL0MsYUFXSixTQUFhbnVELFFBQ05BLFFBQVVBLE9BQ1YrYyxLQUFPL2MsRUFBUStjLE1BQVEreUIsY0FDdkIwVixXQUFheFYsb0JBQW9CaHdDLEVBQVFxWixRQUFTLHNCQUNsRCswQyxXQUFhcGUsb0JBQW9CaHdDLEVBQVFxWixRQUFTLGdCQUNsRDhMLFdBQWF0TSxPQUFPQSxVQUFXcTFDLGdCQUFpQmx1RCxFQUFRbWxCLGdCQUN2RE4sRUFBZ0I3a0IsRUFBUTZrQixlQUFpQjFMLFFBQzFDMnNDLHdCQUFrQjkxQyxXQUFTQSxFQUFHdW9CLFlBQWMxVCxFQUFjN1UsRUFBR3pjLFdBQzdEODZELE9BQVMsT0FDVHg5Qix3QkFDQXVGLEtBQU0sR0FNZixTQUFTazRCLFNBQ1BDLEVBQ0F2dUQsT0FFTXd1RCxFQUFRLElBQUlMLGFBQWFudUQsdUNBQ2xCdXVELEVBQU1FLFdBQVdGLEVBQUtDLEdBQVMsaUNBR3pCQSxFQUFNMzlCLGlCQUkzQixTQUFTNDlCLFdBQVl6K0MsRUFBSXcrQyxNQUNuQngrQyxFQUFHaVEsV0FDRm1XLElBQU1wbUIsRUFBR29tQixLQUFPcG1CLEVBQUdpUSxPQUFPbVcsS0FHM0JwbUIsRUFBR3U4QyxhQUFldjhDLEVBQUcwK0MsdUJBQ2hCQyxVQUFVMytDLEVBQUl3K0MsR0FDaEIsR0FBSXgrQyxFQUFHbUssT0FBU25LLEVBQUc0K0MscUJBQ2pCQyxRQUFRNytDLEVBQUl3K0MsR0FDZCxHQUFJeCtDLEVBQUc0NEMsTUFBUTU0QyxFQUFHOCtDLG9CQUNoQkMsT0FBTy8rQyxFQUFJdytDLEdBQ2IsR0FBSXgrQyxFQUFHMjNDLEtBQU8zM0MsRUFBR2cvQyxtQkFDZkMsTUFBTWovQyxFQUFJdytDLEdBQ1osR0FBZSxhQUFYeCtDLEVBQUd6YyxLQUF1QnljLEVBQUdnNEMsWUFBZXdHLEVBQU1wNEIsSUFFdEQsQ0FBQSxHQUFlLFNBQVhwbUIsRUFBR3pjLFdBQ0wyN0QsUUFBUWwvQyxFQUFJdytDLE9BR2ZwYixLQUNBcGpDLEVBQUd1b0IsWUFDRTQyQixhQUFhbi9DLEVBQUd1b0IsVUFBV3ZvQixFQUFJdytDLE9BQ2pDLEtBQ0Q1OEQsSUFDQ29lLEVBQUdvZ0MsT0FBVXBnQyxFQUFHb21CLEtBQU9vNEIsRUFBTTFJLGVBQWU5MUMsUUFDeENvL0MsVUFBVXAvQyxFQUFJdytDLFFBR2pCaHZDLEVBQVd4UCxFQUFHa2xCLGVBQWlCLEtBQU9tNkIsWUFBWXIvQyxFQUFJdytDLEdBQU8sS0FDNUQsT0FBT3grQyxFQUFHemMsU0FDZjNCLE1BQVdBLEVBQVMsS0FFcEI0dEIsTUFBZUEsRUFBYSxZQUkzQi9MLElBQUlDLEVBQUksRUFBR0EsRUFBSTg2QyxFQUFNaEosV0FBV252RCxPQUFRcWQsTUFDcEM4NkMsRUFBTWhKLFdBQVc5eEMsR0FBRzFELEVBQUlvakMsVUFFMUJBLFNBekJBaWMsWUFBWXIvQyxFQUFJdytDLElBQVUsU0E4QnJDLFNBQVNHLFVBQVczK0MsRUFBSXcrQyxLQUNuQkUsaUJBQWtCLE1BSWZZLEVBQW1CZCxFQUFNcDRCLFdBQzNCcG1CLEVBQUdvbUIsUUFDQ0EsSUFBTXBtQixFQUFHb21CLE9BRVh2RixnQkFBZ0JuMEIsMEJBQTBCK3hELFdBQVd6K0MsRUFBSXcrQyxVQUN6RHA0QixJQUFNazVCLFNBRVZkLEVBQU0zOUIsZ0JBQWdCeDZCLE9BQVMsSUFFL0IyWixFQUFHczhDLFlBQWMsUUFBVSxRQUsvQixTQUFTdUMsUUFBUzcrQyxFQUFJdytDLFFBQ2pCSSxlQUFnQixFQUNmNStDLEVBQUcyM0MsS0FBTzMzQyxFQUFHZy9DLG1CQUNSQyxNQUFNai9DLEVBQUl3K0MsR0FDWixHQUFJeCtDLEVBQUdzOEMsWUFBYSxTQUNyQi8yRCxFQUFNLEdBQ04wcUIsRUFBU2pRLEVBQUdpUSxPQUNUQSxHQUFRLElBQ1RBLEVBQU8yb0MsSUFBSyxHQUNSM29DLEVBQU8xcUIsWUFHTjBxQixFQUFPQSxjQUViMXFCLFFBT1FrNUQsV0FBV3orQyxFQUFJdytDLE9BQVVBLEVBQU1ILGFBQVk5NEQsU0FOaER3bkIsS0FDSix1REFDQS9NLEVBQUd1aEMsWUFBWSxXQUVWa2QsV0FBV3orQyxFQUFJdytDLFdBSWpCRyxVQUFVMytDLEVBQUl3K0MsR0FJekIsU0FBU1MsTUFDUGovQyxFQUNBdytDLEVBQ0FlLEVBQ0FDLFlBRUdSLGFBQWMsRUFDVlMsZ0JBQWdCei9DLEVBQUcyNUMsYUFBYTFvRCxRQUFTdXRELEVBQU9lLEVBQVFDLEdBR2pFLFNBQVNDLGdCQUNQQyxFQUNBbEIsRUFDQWUsRUFDQUMsT0FFS0UsRUFBV3I1RCxjQUNQbTVELEdBQVksV0FHZjlGLEVBQVlnRyxFQUFXamlDLGVBQ3pCaThCLEVBQVUxYSxRQUNEMGEsRUFBVTFhLFNBQ25CMmdCLEVBQWNqRyxFQUFVMEMsV0FFeEJxRCxnQkFBZ0JDLEVBQVlsQixFQUFPZSxFQUFRQyxNQUduQ0csRUFBY2pHLEVBQVUwQyxnQkFJM0J1RCxFQUFlMy9DLFVBQ2Z1L0MsRUFDSEEsRUFBT3YvQyxFQUFJdytDLEdBQ1h4K0MsRUFBR21LLEtBQ0QwMEMsUUFBUTcrQyxFQUFJdytDLEdBQ1pDLFdBQVd6K0MsRUFBSXcrQyxJQUl6QixTQUFTTyxPQUNQLytDLEVBQ0F3K0MsRUFDQWUsRUFDQUssT0FFTTVnQixFQUFNaC9CLEVBQUc0NEMsSUFDVFEsRUFBUXA1QyxFQUFHbzVDLE1BQ1hOLEVBQVk5NEMsRUFBRzg0QyxjQUFnQjk0QyxFQUFHODRDLFVBQWMsR0FDaERELEVBQVk3NEMsRUFBRzY0QyxjQUFnQjc0QyxFQUFHNjRDLFVBQWMsVUFFbEQyRixFQUFNMUksZUFBZTkxQyxJQUNaLFNBQVhBLEVBQUd6YyxLQUNRLGFBQVh5YyxFQUFHemMsTUFDRnljLEVBQUd6YSxPQUVFd25CLEtBQ0osSUFBSS9NLEVBQUd6YyxlQUFjNjFELFNBQVlwYSxnSUFHakNoL0IsRUFBR3VoQyxZQUFZLFVBQ2YsS0FJRHVkLGNBQWUsR0FDUmMsR0FBYSxXQUFTNWdCLGdCQUNsQm9hLEVBQVFOLEVBQVlELGVBQ25CMEcsR0FBVWQsWUFBWXorQyxFQUFJdytDLEdBQ3ZDLEtBR0osU0FBU1ksVUFBV3AvQyxFQUFJdytDLE9BQ2xCNThELEVBQU8sSUFJTHN6QixFQUFPMnFDLGNBQWM3L0MsRUFBSXcrQyxHQUMzQnRwQyxPQUFjQSxFQUFPLEtBR3JCbFYsRUFBR3phLFNBQ0csT0FBT3lhLEVBQUd6YSxTQUdoQnlhLEVBQUc4MkIsU0FDRyxPQUFPOTJCLEVBQUc4MkIsU0FFaEI5MkIsRUFBR2szQixjQUNHLGtCQUdObDNCLEVBQUdvbUIsU0FDRyxhQUdOcG1CLEVBQUd1b0IsZUFDRyxRQUFRdm9CLEVBQUd6YyxjQUdoQmtnQixJQUFJQyxFQUFJLEVBQUdBLEVBQUk4NkMsRUFBTUosV0FBVy8zRCxPQUFRcWQsT0FDbkM4NkMsRUFBTUosV0FBVzE2QyxHQUFHMUQsTUFHMUJBLEVBQUc4YyxXQUNHLFNBQVNnakMsU0FBUzkvQyxFQUFHOGMsWUFHM0I5YyxFQUFHL1osV0FDRyxZQUFZNjVELFNBQVM5L0MsRUFBRy9aLFlBRzlCK1osRUFBRytnQyxZQUNNZ2MsWUFBWS84QyxFQUFHK2dDLFFBQVEsUUFFaEMvZ0MsRUFBR29oQyxrQkFDTTJiLFlBQVkvOEMsRUFBR29oQyxjQUFjLFFBSXRDcGhDLEVBQUdnNEMsYUFBZWg0QyxFQUFHKzNDLGVBQ2YsUUFBUS8zQyxFQUFHZzRDLGdCQUdqQmg0QyxFQUFHbWpCLGlCQUNNNDhCLGVBQWUvL0MsRUFBSUEsRUFBR21qQixZQUFhcTdCLFFBRzVDeCtDLEVBQUc4a0IsV0FDRyxnQkFDTjlrQixFQUFHOGtCLE1BQU0xaEMsbUJBRVQ0YyxFQUFHOGtCLE1BQU1ZLHdCQUVUMWxCLEVBQUc4a0IsTUFBTWtJLGlCQUlUaHRCLEVBQUdrbEIsZUFBZ0IsS0FDZkEsRUFBaUI4NkIsa0JBQWtCaGdELEVBQUl3K0MsR0FDekN0NUIsT0FDTUEsZ0JBR0x0akMsRUFBS3ZCLFFBQVEsS0FBTSxJQUFNLElBSTVCMmYsRUFBR3NnQyxpQkFDRSxNQUFNMStDLE9BQVNvZSxFQUFHemMsU0FBUXU4RCxTQUFTOS9DLEVBQUdzZ0MsbUJBRzNDdGdDLEVBQUdpK0MsYUFDRWorQyxFQUFHaStDLFNBQVNyOEQsSUFHakJvZSxFQUFHKzlDLGtCQUNFLzlDLEVBQUcrOUMsY0FBY244RCxJQUVuQkEsRUFHVCxTQUFTaStELGNBQWU3L0MsRUFBSXcrQyxPQUNwQnRwQyxFQUFPbFYsRUFBR21WLGNBQ1hELE9BR0R4UixFQUFHNkUsRUFBRzltQixFQUFLdytELEVBRlhoM0MsRUFBTSxlQUNOaTNDLEdBQWEsTUFFWng4QyxFQUFJLEVBQUc2RSxFQUFJMk0sRUFBSzd1QixPQUFRcWQsRUFBSTZFLEVBQUc3RSxJQUFLLEdBQ2pDd1IsRUFBS3hSLE1BQ0csTUFDUnk4QyxFQUFNM0IsRUFBTXJwQyxXQUFXMXpCLEVBQUkzQixNQUM3QnFnRSxRQUdjQSxFQUFJbmdELEVBQUl2ZSxFQUFLKzhELEVBQU16eEMsT0FFakNrekMsT0FDVyxLQUNOLFVBQVV4K0QsRUFBSTNCLG1CQUFrQjJCLEVBQUk2N0MsYUFDekM3N0MsRUFBSTJCLGlCQUFtQjNCLEVBQUkyQixzQkFBcUJ1YyxLQUFLOEcsVUFBVWhsQixFQUFJMkIsT0FBVyxLQUU5RTNCLEVBQUk0TCxhQUFjNUwsRUFBSWsvQyxhQUFlbC9DLEVBQUk0TCxRQUFVNUwsRUFBSTRMLFNBQVcsS0FFbEU1TCxFQUFJMjdDLHdCQUEwQno5QixLQUFLOEcsVUFBVWhsQixFQUFJMjdDLFdBQWUsaUJBSWxFOGlCLEVBQ0tqM0MsRUFBSWhZLE1BQU0sR0FBSSxHQUFLLFlBSTlCLFNBQVMrdUQsa0JBQW1CaGdELEVBQUl3K0MsT0FDeEJELEVBQU12K0MsRUFBR3dQLFNBQVMsTUFDRyxJQUF2QnhQLEVBQUd3UCxTQUFTbnBCLFFBQTZCLElBQWJrNEQsRUFBSXY2RCxRQUM1QitvQixLQUNKLG1FQUNFaG1CLE1BQU9pWixFQUFHalosUUFHWnczRCxHQUFvQixJQUFiQSxFQUFJdjZELEtBQVksS0FDbkJvOEQsRUFBa0I5QixTQUFTQyxFQUFLQyxFQUFNeHVELG9EQUUxQ293RCxFQUFnQmxsQyw2QkFFaEJrbEMsRUFBZ0J2L0IsZ0JBQWdCM3NCLGFBQUlrdkMsdUJBQXNCQSxRQUFTamlDLEtBQUssV0FLOUUsU0FBUzQrQyxlQUNQLy9DLEVBQ0FrZSxFQUNBc2dDLE9BTUlqekIsRUFBbUJocEMsT0FBT2tDLEtBQUt5NUIsR0FBT2pHLGNBQUsxeUIsT0FDdkM0NEIsRUFBT0QsRUFBTTM0QixVQUVqQjQ0QixFQUFLMjdCLG1CQUNMMzdCLEVBQUt3NUIsSUFDTHg1QixFQUFLeTZCLEtBQ0x5SCxrQkFBa0JsaUMsU0FLakJvTixVQUNDdGIsRUFBU2pRLEVBQUdpUSxPQUNUQSxHQUFRLElBQ1RBLEVBQU84bkMsV0FBYTluQyxFQUFPOG5DLFlBQWNqQixvQkFBcUIsSUFDN0MsVUFHWjdtQyxFQUFPQSxnQ0FLbEIxdEIsT0FBT2tDLEtBQUt5NUIsR0FBT2hxQixhQUFJM08sVUFDZCs2RCxjQUFjcGlDLEVBQU0zNEIsR0FBTWk1RCxLQUNoQ3I5QyxLQUFLLFVBQ05vcUIsRUFBbUIsUUFBVSxRQUduQyxTQUFTODBCLGtCQUFtQnJnRCxVQUNWLElBQVpBLEVBQUdoYyxPQUNVLFNBQVhnYyxFQUFHemMsS0FHQXljLEVBQUd3UCxTQUFTeUksS0FBS29vQyxvQkFLNUIsU0FBU0MsY0FDUHRnRCxFQUNBdytDLE9BRU0rQixFQUFpQnZnRCxFQUFHd2dDLFNBQVMsaUJBQy9CeGdDLEVBQUcyM0MsS0FBTzMzQyxFQUFHZy9DLGNBQWdCdUIsU0FDeEJ0QixNQUFNai9DLEVBQUl3K0MsRUFBTzhCLGNBQWUsV0FFckN0Z0QsRUFBRzQ0QyxNQUFRNTRDLEVBQUc4K0Msb0JBQ1RDLE9BQU8vK0MsRUFBSXcrQyxFQUFPOEIsbUJBRXJCdkksRUFBWS8zQyxFQUFHKzNDLFlBQWNqQixvQkFDL0IsR0FDQXJxRCxPQUFPdVQsRUFBRyszQyxXQUNScndDLEVBQUssWUFBWXF3QyxlQUNBLGFBQVgvM0MsRUFBR3pjLElBQ1R5YyxFQUFHMjNDLElBQU00SSxNQUNIdmdELEVBQUcyM0MsU0FBTzBILFlBQVlyL0MsRUFBSXcrQyxJQUFVLDBCQUN4Q2EsWUFBWXIvQyxFQUFJdytDLElBQVUsWUFDNUJDLFdBQVd6K0MsRUFBSXcrQyxRQUdmZ0MsRUFBZXpJLEVBQVksR0FBSyw2QkFDdkIvM0MsRUFBR2c0QyxZQUFjLG9CQUFrQnR3QyxFQUFLODRDLE1BR3pELFNBQVNuQixZQUNQci9DLEVBQ0F3K0MsRUFDQWlDLEVBQ0FDLEVBQ0FDLE9BRU1ueEMsRUFBV3hQLEVBQUd3UCxZQUNoQkEsRUFBU25wQixPQUFRLEtBQ2IyWixFQUFLd1AsRUFBUyxNQUVJLElBQXBCQSxFQUFTbnBCLFFBQ1gyWixFQUFHNDRDLEtBQ1EsYUFBWDU0QyxFQUFHemMsS0FDUSxTQUFYeWMsRUFBR3pjLElBQ0gsS0FDTXNpQyxFQUFvQjQ2QixFQUN0QmpDLEVBQU0xSSxlQUFlOTFDLEdBQU0sS0FBTyxLQUNsQyxhQUNPMGdELEdBQWlCakMsWUFBWXorQyxFQUFJdytDLEdBQVMzNEIsTUFFakRBLEVBQW9CNDZCLEVBQ3RCRyxxQkFBcUJweEMsRUFBVWd2QyxFQUFNMUksZ0JBQ3JDLEVBQ0VxSyxFQUFNUSxHQUFjRSxrQkFDZnJ4QyxFQUFTdGIsYUFBSTJULFVBQUtzNEMsRUFBSXQ0QyxFQUFHMjJDLEtBQVFyOUMsS0FBSyxVQUMvQzBrQixNQUF3QkEsRUFBc0IsS0FTcEQsU0FBUys2QixxQkFDUHB4QyxFQUNBc21DLFdBRUk3c0MsRUFBTSxFQUNEdkYsRUFBSSxFQUFHQSxFQUFJOEwsRUFBU25wQixPQUFRcWQsSUFBSyxLQUNsQzFELEVBQUt3UCxFQUFTOUwsTUFDSixJQUFaMUQsRUFBR2hjLFNBR0g4OEQsbUJBQW1COWdELElBQ2xCQSxFQUFHMjVDLGNBQWdCMzVDLEVBQUcyNUMsYUFBYTFoQyxjQUFLcFEsVUFBS2k1QyxtQkFBbUJqNUMsRUFBRXUwQyxTQUFVLEdBQ3pFLFNBR0p0RyxFQUFlOTFDLElBQ2RBLEVBQUcyNUMsY0FBZ0IzNUMsRUFBRzI1QyxhQUFhMWhDLGNBQUtwUSxVQUFLaXVDLEVBQWVqdUMsRUFBRXUwQyxjQUMzRCxXQUdIbnpDLEVBR1QsU0FBUzYzQyxtQkFBb0I5Z0QsZUFDVDljLElBQVg4YyxFQUFHNDRDLEtBQWdDLGFBQVg1NEMsRUFBR3pjLEtBQWlDLFNBQVh5YyxFQUFHemMsSUFHN0QsU0FBU3M5RCxRQUFTaHdDLEVBQU0ydEMsVUFDSixJQUFkM3RDLEVBQUs3c0IsS0FDQXk2RCxXQUFXNXRDLEVBQU0ydEMsR0FDRCxJQUFkM3RDLEVBQUs3c0IsTUFBYzZzQixFQUFLUixVQUMxQjB3QyxXQUFXbHdDLEdBRVhtd0MsUUFBUW53QyxHQUluQixTQUFTbXdDLFFBQVNwZ0UsZ0JBQ1csSUFBZEEsRUFBS29ELEtBQ2RwRCxFQUFLb3NDLFdBQ0xpMEIseUJBQXlCdGhELEtBQUs4RyxVQUFVN2xCLEVBQUtBLFlBSW5ELFNBQVNtZ0UsV0FBWWxPLGVBQ05sekMsS0FBSzhHLFVBQVVvc0MsRUFBUWp5RCxVQUd0QyxTQUFTcytELFFBQVNsL0MsRUFBSXcrQyxPQUNkckUsRUFBV242QyxFQUFHbTZDLFVBQVksWUFDMUIzcUMsRUFBVzZ2QyxZQUFZci9DLEVBQUl3K0MsR0FDN0J2MUMsRUFBTSxNQUFNa3hDLEdBQVczcUMsTUFBZUEsRUFBYSxJQUNqRHNOLEVBQVE5YyxFQUFHOGMsT0FBUzljLEVBQUdzZ0MsYUFDekJ3ZixVQUFVOS9DLEVBQUc4YyxXQUFhM2EsT0FBT25DLEVBQUdzZ0Msa0JBQW9CcHNDLGFBQUkrL0IsZUFFcERyc0IsU0FBU3FzQixFQUFLbjBDLFlBQ2JtMEMsRUFBSzd3QyxjQUNINndDLEVBQUtpTSxZQUVoQixLQUNFZ2hCLEVBQVVsaEQsRUFBR3dnQyxTQUFTLGlCQUN2QjFqQixJQUFTb2tDLEdBQWExeEMsT0FDbEIsU0FFTHNOLE9BQ0ssSUFBSUEsR0FFVG9rQyxRQUNRcGtDLEVBQVEsR0FBSyxhQUFXb2tDLEdBRTdCajRDLEVBQU0sSUFJZixTQUFTazJDLGFBQ1BnQyxFQUNBbmhELEVBQ0F3K0MsT0FFTWh2QyxFQUFXeFAsRUFBR2tsQixlQUFpQixLQUFPbTZCLFlBQVlyL0MsRUFBSXcrQyxHQUFPLGVBQ3REMkMsTUFBaUIvQixVQUFVcC9DLEVBQUl3K0MsSUFDMUNodkMsTUFBZUEsRUFBYSxRQUloQyxTQUFTc3dDLFNBQVU3NUQsV0FDYm03RCxFQUFjLEdBQ2RDLEVBQWUsR0FDVjM5QyxFQUFJLEVBQUdBLEVBQUl6ZCxFQUFNSSxPQUFRcWQsSUFBSyxLQUMvQnlTLEVBQU9sd0IsRUFBTXlkLEdBQ2J0Z0IsRUFBUTY5RCx5QkFBeUI5cUMsRUFBSy95QixPQUN4Qyt5QixFQUFLK3BCLFdBQ1kvcEIsRUFBS3IyQixTQUFRc0QsU0FFakIsSUFBSSt5QixFQUFLcjJCLFVBQVNzRCxlQUd2QixJQUFJZytELEVBQVlud0QsTUFBTSxHQUFJLE9BQ3BDb3dELFFBQ1dELE9BQWdCQyxFQUFhcHdELE1BQU0sR0FBSSxRQUU3Q213RCxFQUtYLFNBQVNILHlCQUEwQnJnRSxVQUMxQkEsRUFDSlAsUUFBUSxVQUFXLFdBQ25CQSxRQUFRLFVBQVcsV0FTeEJpbEIsSUFBTWc4QyxvQkFBc0IsSUFBSS9nRSxPQUFPLE1BQVEsaU1BSTdDeW1CLE1BQU0sS0FBSzdGLEtBQUssV0FBYSxPQUd6Qm9nRCxpQkFBbUIsSUFBSWhoRSxPQUFPLE1BQ2xDLHFCQUNBeW1CLE1BQU0sS0FBSzdGLEtBQUsseUJBQTJCLHFCQUd2Q3FnRCxjQUFnQixpR0FHdEIsU0FBU0MsYUFBY2xELEVBQUt4eEMsR0FDdEJ3eEMsYUFDUUEsRUFBS3h4QyxHQUluQixTQUFTMjBDLFVBQVc3d0MsRUFBTTlELE1BQ04sSUFBZDhELEVBQUs3c0IsS0FBWSxLQUNkc2hCLElBQU14bEIsS0FBUSt3QixFQUFLMnZCLFlBQ2xCd1YsTUFBTTV3RCxLQUFLdEYsR0FBTyxLQUNkc0QsRUFBUXl0QixFQUFLMnZCLFNBQVMxZ0QsTUFDeEJzRCxFQUFPLEtBQ0gyOEMsRUFBUWx2QixFQUFLMHdCLFlBQVl6aEQsR0FDbEIsVUFBVEEsV0FDTyt3QixZQUFnQnp0QixNQUFVMnBCLEVBQU1nekIsR0FDaENnVyxLQUFLM3dELEtBQUt0RixjQUNSc0QsRUFBVXRELE9BQVNzRCxNQUFVMnBCLEVBQU1nekIsbUJBRTlCMzhDLEVBQVV0RCxPQUFTc0QsTUFBVTJwQixFQUFNZ3pCLE9BS3ZEbHZCLEVBQUtyQixhQUNGL0wsSUFBSUMsRUFBSSxFQUFHQSxFQUFJbU4sRUFBS3JCLFNBQVNucEIsT0FBUXFkLGNBQzlCbU4sRUFBS3JCLFNBQVM5TCxHQUFJcUosUUFHVCxJQUFkOEQsRUFBSzdzQixzQkFDRTZzQixFQUFLbWMsV0FBWW5jLEVBQUtqd0IsS0FBTW1zQixFQUFNOEQsR0FJdEQsU0FBUzh3QyxXQUFZM2lCLEVBQUtwK0MsRUFBTW1zQixFQUFNZ3pCLE9BQzlCNmhCLEVBQVU1aUIsRUFBSTMrQyxRQUFRbWhFLGNBQWUsSUFDckNLLEVBQWVELEVBQVEvZ0UsTUFBTTBnRSxrQkFDL0JNLEdBQTJELE1BQTNDRCxFQUFRNTVDLE9BQU82NUMsRUFBYXo3RCxNQUFRLE1BRXBELDREQUNJeTdELEVBQWEsc0JBQXFCamhFLEVBQUsrK0MsT0FDM0NJLG1CQUdZZixFQUFLcCtDLEVBQU1tc0IsRUFBTWd6QixHQUduQyxTQUFTK2hCLFNBQVVqeEMsRUFBTWp3QixFQUFNbXNCLEVBQU1nekIsbUJBQ25CbHZCLEVBQUsrbkMsS0FBTyxHQUFJaDRELEVBQU1tc0IsRUFBTWd6QixtQkFDNUJsdkIsRUFBS3VvQyxNQUFPLGNBQWV4NEQsRUFBTW1zQixFQUFNZ3pCLG1CQUN2Q2x2QixFQUFLaW9DLFVBQVcsaUJBQWtCbDRELEVBQU1tc0IsRUFBTWd6QixtQkFDOUNsdkIsRUFBS2dvQyxVQUFXLGlCQUFrQmo0RCxFQUFNbXNCLEVBQU1nekIsR0FHaEUsU0FBU2dpQixnQkFDUEMsRUFDQWgrRCxFQUNBcEQsRUFDQW1zQixFQUNBZ3pCLE1BRXFCLGlCQUFWaWlCLFVBRUh0L0QsZ0JBQWdCcy9ELFFBQ3BCLE1BQU92K0QsZ0JBQ1NPLE9BQVNnK0Qsc0JBQXlCcGhFLEVBQUsrK0MsT0FBVUksSUFLdkUsU0FBU2tpQixnQkFBaUJqakIsRUFBS3ArQyxFQUFNbXNCLEVBQU1nekIsV0FFbkNyOUMsbUJBQW1CczhDLEdBQ3ZCLE1BQU92N0MsT0FDRG8rRCxFQUFlN2lCLEVBQUkzK0MsUUFBUW1oRSxjQUFlLElBQUkzZ0UsTUFBTXlnRSx1QkFDdERPLEVBRUEscURBQ0lBLEVBQWEsMkJBQTBCamhFLEVBQUsrK0MsT0FLaEQsdUJBQXVCbDhDLEVBQUVvSyxzQkFDbEJteEMsMkJBQ2NwK0MsRUFBSysrQyxZQU4xQkksSUFlUno2QixJQUFNeTZCLE1BQVEsRUFFZCxTQUFTbWlCLGtCQUNQbDhELEVBQ0FlLEVBQ0FxekMsa0JBRFEsa0JBQ0ZwMEMsRUFBT0ssZ0JBRVA4N0QsRUFBUW44RCxFQUFPZ2hCLE1BQU0sU0FDdkJsZixFQUFRLEVBQ05taEIsS0FDR3ZGLEVBQUksRUFBR0EsRUFBSXkrQyxFQUFNOTdELE9BQVFxZCxXQUN2QnkrQyxFQUFNeitDLEdBQUdyZCxPQUFTLElBQ2RVLEVBQU8sS0FDYjBjLElBQUl3b0IsRUFBSXZvQixFQUFJcThCLE1BQU85VCxHQUFLdm9CLEVBQUlxOEIsT0FBUzNGLEVBQU10eUMsRUFBT21rQyxTQUNqREEsRUFBSSxHQUFLQSxHQUFLazJCLEVBQU05N0QsV0FDcEJxRyxTQUFRdS9CLEVBQUksR0FBSTdkLE9BQU8sSUFBSyxFQUFJM2hCLE9BQU93L0IsRUFBSSxHQUFHNWxDLGNBQWE4N0QsRUFBTWwyQixRQUMvRG0yQixFQUFhRCxFQUFNbDJCLEdBQUc1bEMsVUFDeEI0bEMsSUFBTXZvQixFQUFHLEtBRUwyK0MsRUFBTXQ3RCxHQUFTZSxFQUFRczZELEdBQWMsRUFDckMvN0QsRUFBUyt6QyxFQUFNdHlDLEVBQVFzNkQsRUFBYUMsRUFBTWpvQixFQUFNcnpDLElBQ2xEMkYsS0FBSyxTQUFXMGhCLE9BQU8sSUFBS2kwQyxHQUFPajBDLE9BQU8sSUFBSy9uQixTQUM5QyxHQUFJNGxDLEVBQUl2b0IsRUFBRyxJQUNaMDJCLEVBQU10eUMsRUFBTyxLQUNUekIsRUFBU08sS0FBS2diLElBQUl3NEIsRUFBTXR5QyxFQUFPczZELEtBQ2pDMTFELEtBQUssU0FBVzBoQixPQUFPLElBQUsvbkIsT0FFekIrN0QsRUFBYSxnQkFNdkJuNUMsRUFBSTlILEtBQUssTUFHbEIsU0FBU2lOLE9BQVF2SCxFQUFLOWQsV0FDaEJyRixFQUFTLEdBRUgsRUFBSnFGLE9BQWlCOGQsV0FDZCxJQUNFLE9BQ0ZBLFNBRUZuakIsRUFPVCxTQUFTNCtELGVBQWdCbGYsRUFBTW1mLGNBRXBCLElBQUk3L0QsU0FBUzBnRCxHQUNwQixNQUFPaHJCLFlBQ0ExckIsVUFBTzByQixPQUFLZ3JCLElBQ1p2a0MsUUFJWCxTQUFTMmpELDBCQUEyQkMsT0FDNUJ4ckQsRUFBUTFVLE9BQU9vVCxPQUFPLGFBRXJCLFNBQ0w1RixFQUNBQyxFQUNBd2QsT0FHTWsxQyxLQURJNzVDLFVBQVc3WSxJQUNHK2MsTUFBUUEsWUFDekIvYyxFQUFRK2MsYUFNUHJxQixTQUFTLFlBQ2IsTUFBT2UsR0FDSEEsRUFBRVYsV0FBV2xDLE1BQU0sc0JBRW5CLHdTQVdGMEUsRUFBTXlLLEVBQVFnaEQsV0FDaEJ2a0QsT0FBT3VELEVBQVFnaEQsWUFBY2poRCxFQUM3QkEsS0FDQWtILEVBQU0xUixVQUNEMFIsRUFBTTFSLE9BSVRzYSxFQUFXNGlELEVBQVExeUQsRUFBVUMsR0FJN0I2UCxFQUFTMGlELFFBQVUxaUQsRUFBUzBpRCxPQUFPbDhELFNBQ2pDMkosRUFBUW1sRCxvQkFDRG9OLE9BQU94d0QsaUJBQVF0TyxLQUVwQixnQ0FBZ0NBLEVBQUU4cEIsV0FDbEMyMEMsa0JBQWtCbnlELEVBQVV0TSxFQUFFc0QsTUFBT3RELEVBQUUyMkMsS0FDdkM1c0IsT0FLRixnQ0FBZ0N6ZCxTQUNoQzhQLEVBQVMwaUQsT0FBT3J1RCxhQUFJelEsY0FBVUEsSUFBSzBkLEtBQUssTUFBUSxLQUNoRHFNLElBSUYzTixFQUFTOGlELE1BQVE5aUQsRUFBUzhpRCxLQUFLdDhELFNBQzdCMkosRUFBUW1sRCxvQkFDRHdOLEtBQUs1d0QsaUJBQVF0TyxVQUFLdXBCLElBQUl2cEIsRUFBRThwQixJQUFLQyxPQUU3Qm0xQyxLQUFLNXdELGlCQUFRd2IsVUFBT1AsSUFBSU8sRUFBS0MsVUFNdEN2RSxLQUNBMjVDLGNBQ0YxbkMsT0FBU29uQyxlQUFlemlELEVBQVNxYixPQUFRMG5DLEtBQ3pDL2hDLGdCQUFrQmhoQixFQUFTZ2hCLGdCQUFnQjNzQixhQUFJa3ZDLFVBQzFDa2YsZUFBZWxmLEVBQU13ZixLQVF0Qi9pRCxFQUFTMGlELFFBQVcxaUQsRUFBUzBpRCxPQUFPbDhELFNBQVd1OEQsRUFBWXY4RCxVQUU3RCwwQ0FDQXU4RCxFQUFZMXVELGFBQUs0aUMsK0JBQXFCMWUsRUFBSXIxQixxQkFBb0JxZ0QsU0FBVWppQyxLQUFLLE1BQzdFcU0sR0FLRXZXLEVBQU0xUixHQUFPMGpCLEdBTXpCLFNBQVM0NUMsc0JBQXVCQyxVQUN2QixTQUF5QmhILFlBQ3JCMkcsRUFDUDF5RCxFQUNBQyxPQUVNK3lELEVBQWV4Z0UsT0FBT29ULE9BQU9tbUQsR0FDN0J5RyxLQUNBSSxLQUVGNTFDLFdBQVFRLEVBQUt3eUIsRUFBTy95QixJQUNyQkEsRUFBTTIxQyxFQUFPSixHQUFRNzFELEtBQUs2Z0IsT0FHekJ2ZCxFQUFTLElBQ1BBLEVBQVFtbEQsa0JBQW1CLEtBRXZCNk4sRUFBcUJqekQsRUFBU2xQLE1BQU0sUUFBUSxHQUFHd0Ysa0JBRTdDa25CLEVBQUt3eUIsRUFBTy95QixPQUNacHJCLE9BQVMyckIsR0FDWHd5QixJQUNpQixNQUFmQSxFQUFNaDVDLFVBQ0hBLE1BQVFnNUMsRUFBTWg1QyxNQUFRaThELEdBRVosTUFBYmpqQixFQUFNM0YsUUFDSEEsSUFBTTJGLEVBQU0zRixJQUFNNG9CLEtBRzFCaDJDLEVBQU0yMUMsRUFBT0osR0FBUTcxRCxLQUFLOUssUUFnQjFCMGpCLElBQU0vZixLQVpQeUssRUFBUXFaLFlBQ0dBLFNBQ1Z5eUMsRUFBWXp5QyxhQUFlbEgsT0FBT25TLEVBQVFxWixVQUczQ3JaLEVBQVFtbEIsZUFDR0EsV0FBYXRNLE9BQ3hCdG1CLE9BQU9vVCxPQUFPbW1ELEVBQVkzbUMsWUFBYyxNQUN4Q25sQixFQUFRbWxCLGFBSU1ubEIsRUFDSixZQUFSekssR0FBNkIsZUFBUkEsTUFDVkEsR0FBT3lLLEVBQVF6SyxNQUtyQnduQixLQUFPQSxNQUVkbE4sRUFBV2lqRCxFQUFZL3lELEVBQVM0dkMsT0FBUW9qQix1QkFFL0JsakQsRUFBUzArQyxJQUFLeHhDLEtBRXBCdzFDLE9BQVNBLElBQ1RJLEtBQU9BLEVBQ1Q5aUQsaUJBSVA0aUQscUJBQ29CRCwwQkFBMEJDLEtBVXBEbjlDLElBdUJJMjlDLElBdkJFQyxlQUFpQkwsc0JBQXNCLFNBQzNDOXlELEVBQ0FDLE9BRU11dUQsRUFBTTMrQyxNQUFNN1AsRUFBUzR2QyxPQUFRM3ZDLElBQ1YsSUFBckJBLEVBQVFpc0QsbUJBQ0RzQyxFQUFLdnVELE9BRVZvekMsRUFBT2tiLFNBQVNDLEVBQUt2dUQsY0FFekJ1dUQsU0FDUW5iLEVBQUtsb0IsdUJBQ0lrb0IsRUFBS3ZpQix5QkFNY3FpQyxlQUFlcEgseURBTXZELFNBQVNxSCxnQkFBaUJDLGNBQ2xCSCxLQUFPbmhFLFNBQVNDLGNBQWMsUUFDaENDLFVBQVlvaEUsRUFBTyxpQkFBbUIsZ0JBQ25DSCxJQUFJamhFLFVBQVV1bEIsUUFBUSxTQUFXLEVBSTFDakMsSUFBTWl1Qyx1QkFBdUJ0b0MsV0FBWWs0QyxpQkFBZ0IsR0FFbkRqTyw4QkFBOEJqcUMsV0FBWWs0QyxpQkFBZ0IsR0FJMURFLGFBQWU1N0MsZ0JBQU9pSCxPQUNwQjFPLEVBQUtoZ0IsTUFBTTB1QixVQUNWMU8sR0FBTUEsRUFBR2hlLFlBR1pzaEUsTUFBUWw4QixJQUFJdmtDLFVBQVV3aEMsT0F3RTVCLFNBQVNrL0IsYUFBY3ZqRCxNQUNqQkEsRUFBR3dqRCxpQkFDRXhqRCxFQUFHd2pELGNBRUpDLEVBQVkzaEUsU0FBU0MsY0FBYyxnQkFDL0JJLFlBQVk2ZCxFQUFHbXdDLFdBQVUsSUFDNUJzVCxFQUFVemhFLFVBN0VyQm9sQyxJQUFJdmtDLFVBQVV3aEMsT0FBUyxTQUNyQnJrQixFQUNBOGpCLFNBRUs5akIsR0FBTWhnQixNQUFNZ2dCLE1BR05sZSxTQUFTSSxNQUFROGQsSUFBT2xlLFNBQVM0aEUsNEJBRXhDLDRFQUVLamtFLFNBR0h1USxFQUFVdlEsS0FBS3V1QixhQUVoQmhlLEVBQVFrckIsT0FBUSxLQUNmbnJCLEVBQVdDLEVBQVFELFlBQ25CQSxLQUNzQixpQkFBYkEsRUFDa0IsTUFBdkJBLEVBQVNpWSxPQUFPLFFBQ1BxN0MsYUFBYXR6RCxxREFJdUJDLEVBQVFELFNBQ25EdFEsV0FJRCxDQUFBLElBQUlzUSxFQUFTckcscUJBSVgsMkJBQTZCcUcsRUFBVXRRLE1BRXZDQSxPQUxJc1EsRUFBUy9OLGVBT2JnZSxNQUNFdWpELGFBQWF2akQsT0FFdEJqUSxFQUFVLENBRVJpUCxPQUFPaWIsYUFBZW5CLFdBQ25CLGlCQUc2QjZxQyxtQkFBbUI1ekQsc0JBQ2xDLHVCQUNuQndqRCxpREFDQTJCLHVDQUNZbGxELEVBQVFnaEQsb0JBQ1ZoaEQsRUFBUW9vRCxVQUNqQjM0RCx1Q0FDS3k3QixPQUFTQSxJQUNUMkYsZ0JBQWtCQSxFQUd0QjdoQixPQUFPaWIsYUFBZW5CLFlBQ25CLDhCQUNVcjVCLEtBQUt3ckMsaUJBQWlCLFVBQVcsd0JBSS9DcTRCLE1BQU1oZ0UsS0FBSzdELEtBQU11Z0IsRUFBSThqQixJQWlCOUJzRCxJQUFJcTdCLFFBQVVrQixtQkNoblhkLCtLQ1hTQyxtQkFBbUI3ekQsRUFBVXkyQixFQUFPcTlCLEVBQVFqdEIsRUFBU2t0QixFQUFzQkMsRUFFbEZDLEVBQVlDLEVBQWdCQyxFQUFtQkMsR0FDckIsa0JBQWZILE1BQ1dDLElBQ0hELEtBQ0osT0FxQlgzdkMsRUFqQkFya0IsRUFBNEIsbUJBQVg2ekQsRUFBd0JBLEVBQU83ekQsUUFBVTZ6RCxLQUUxRDl6RCxHQUFZQSxFQUFTbXJCLFdBQ2ZBLE9BQVNuckIsRUFBU21yQixTQUNsQjJGLGdCQUFrQjl3QixFQUFTOHdCLGtCQUMzQmtDLFdBQVksRUFFaEIrZ0MsTUFDTS8rQixZQUFhLElBS3JCNlIsTUFDTXhULFNBQVd3VCxHQUtqQm10QixLQUVLLFNBQWNwMEMsTUFFVEEsUUFDTHNXLFFBQVV4bUMsS0FBS3dtQyxPQUFPNk4saUJBQ3RCN2pCLFFBQVV4d0IsS0FBS3d3QixPQUFPZ1csUUFBVXhtQyxLQUFLd3dCLE9BQU9nVyxPQUFPNk4sYUFHVCxvQkFBeEJzd0Isd0JBQ1hBLHFCQUlSNTlCLEtBQ0lsakMsS0FBSzdELEtBQU15a0UsRUFBa0J2MEMsSUFJakNBLEdBQVdBLEVBQVEwMEMseUJBQ2JBLHNCQUFzQnh0RCxJQUFJa3RELE1BTTlCTyxhQUFlandDLEdBQ2RtUyxNQUNGdzlCLEVBQWEsYUFDWjFnRSxLQUFLN0QsS0FBTTBrRSxFQUFxQjFrRSxLQUFLb3VCLE1BQU1HLFNBQVN1MkMsY0FDeEQsU0FBVTUwQyxLQUNOcnNCLEtBQUs3RCxLQUFNd2tFLEVBQWV0MEMsTUFJaEMwRSxLQUNFcmtCLEVBQVErMEIsV0FBWSxLQUVsQnkvQixFQUFpQngwRCxFQUFRa3JCLFNBRXJCQSxPQUFTLFNBQWtDZ3pCLEVBQUd2K0IsWUFDL0Nyc0IsS0FBS3FzQixHQUNINjBDLEVBQWV0VyxFQUFHditCLFFBRXRCLEtBRUR1UixFQUFXbHhCLEVBQVF5MEQsZUFDZkEsYUFBZXZqQyxLQUFjL2UsT0FBTytlLEVBQVU3TSxJQUFTQSxVQUk1RHd2QyxFQUdULHlCQUFpQkQsbUJDbkZiYyxRQUErQixvQkFBZG41QyxXQUE2QixnQkFBZ0JubUIsS0FBS21tQixVQUFVQyxVQUFVdkUsZUFDM0YsU0FBU2c5QyxlQUFldDBDLFVBQ2YsU0FBVWpCLEVBQUk4WCxVQUNabStCLFNBQVNqMkMsRUFBSThYLElBR3hCLElBQUlvK0IsS0FBTzlpRSxTQUFTK2lFLE1BQVEvaUUsU0FBU2dqRSxxQkFBcUIsUUFBUSxHQUM5RHJjLFVBRUosU0FBU2tjLFNBQVNqMkMsRUFBSXE0QixPQUNoQmdlLEVBQVFMLFFBQVUzZCxFQUFJaWUsT0FBUyxVQUFZdDJDLEVBQzNDOFgsRUFBUWlpQixPQUFPc2MsS0FBV3RjLE9BQU9zYyxRQUM5QixJQUFJdnJELG9CQUlOZ3RCLEVBQU15K0IsSUFBSTV4RCxJQUFJcWIsR0FBSyxHQUNoQnUyQyxJQUFJcHVELElBQUk2WCxPQUNWMDBCLEVBQU8yRCxFQUFJL2dELFVBRVgrZ0QsRUFBSTd5QyxTQUdFLG1CQUFxQjZ5QyxFQUFJN3lDLElBQUl0TCxRQUFRLEdBQUssU0FFMUMsdURBQXlEczhELEtBQUtDLFNBQVNDLG1CQUFtQnpsRCxLQUFLOEcsVUFBVXNnQyxFQUFJN3lDLFFBQVUsT0FHNUhzeUIsRUFBTW5oQixZQUNIQSxRQUFVdmpCLFNBQVNDLGNBQWMsV0FDakNzakIsUUFBUXJoQixLQUFPLFdBQ2pCK2lELEVBQUlpZSxTQUFhMy9DLFFBQVFwakIsYUFBYSxRQUFTOGtELEVBQUlpZSxZQUNsRDdpRSxZQUFZcWtDLEVBQU1uaEIsVUFHckIsZUFBZ0JtaEIsRUFBTW5oQixVQUNsQm9qQyxPQUFPLzdDLEtBQUswMkMsS0FDWi85QixRQUFRZ2dELFdBQVduZ0IsUUFBVTFlLEVBQU1paUIsT0FBTzFuRCxPQUFPdzFCLFNBQVNwVixLQUFLLFVBQ2hFLEtBQ0QvYSxFQUFRb2dDLEVBQU15K0IsSUFBSS95RCxLQUFPLEVBQ3pCd25CLEVBQVc1M0IsU0FBUzYzQixlQUFleXBCLEdBQ25DaGtCLEVBQVFvSCxFQUFNbmhCLFFBQVF5MkIsV0FDdEIxYyxFQUFNaDVCLE1BQWNpZixRQUFRa3hCLFlBQVluWCxFQUFNaDVCLElBQzlDZzVCLEVBQU0vNEIsU0FBY2dmLFFBQVErd0IsYUFBYTFjLEVBQVUwRixFQUFNaDVCLE1BQW1CaWYsUUFBUWxqQixZQUFZdTNCLEtBSzFHLFlBQWlCdXFDLGkzQ0MxQ003Z0UsTUFBTyxVQ0Z4QmtpRSxPQUNKLFNBQVlyMUQsRUFBZXJPLDhDQUNwQkEsS0FBT0EsT0FDUHFPLFNBQVdBLE9BQ1htUCxRQ1ZULFNBQVNtbUQsWUFBWUMsRUFBU3BuQixNQUN4QkEsRUFBUyxLQUNQcW5CLEVBQVFobUUsS0FBS3M3QixNQUFNMnFDLE9BQ25CQyxFQUFtQkgsRUFBUUksU0FBUzF4RCxJQUFJLFNBQVVrUCxVQUM3Q0EsRUFBUWxpQixRQUViMmtFLEVBQW1Cem5CLEVBQVF3bkIsU0FBUzF4RCxJQUFJLFNBQVVrUCxVQUM3Q0EsRUFBUWxpQixRQUViNGtFLEVBQVlubUQsS0FBSzhHLFVBQVVvL0MsR0FDZmxtRCxLQUFLOEcsVUFBVWsvQyxLQUViRyxHQUFhMW5CLEVBQVF3bkIsU0FBU3YvRCxTQUFXbS9ELEVBQVFJLFNBQVN2L0QsVUFDbEV1L0QsU0FBUzd6RCxRQUFRLFNBQVVxUixFQUFTTSxPQUN0Q3FpRCxFQUFpQnhqRSxPQUFPa0MsS0FBSzI1QyxFQUFRd25CLFNBQVNsaUQsSUFDOUNzaUQsRUFBaUJ6akUsT0FBT2tDLEtBQUsyZSxHQUM3QjZpRCxFQUFlRixFQUFlaGxFLE9BQU8sU0FBVXdFLFNBQ2xDLFVBQVJBLElBQW9ELElBQWpDeWdFLEVBQWV6K0MsUUFBUWhpQixTQU05QyxJQUFJK3NELE9BSkl2Z0QsUUFBUSxTQUFVbTBELFVBQ3RCVCxFQUFNN2pFLEtBQUtna0UsU0FBU2xpRCxHQUFHd2lELEtBR1Y5aUQsRUFDaEJBLEVBQVFuaUIsZUFBZXF4RCxPQUNuQjF3RCxLQUFLZ2tFLFNBQVNsaUQsR0FBRzR1QyxHQUFhbHZDLEVBQVFrdkMsTUFLOUNrVCxFQUFRdmtFLGVBQWUsY0FDbkJXLEtBQUt1a0UsT0FBU1gsRUFBUVcsWUFDdkIxOEIsTUFBTSxrQkFHVCs3QixFQUFRdmtFLGVBQWUsZUFDbkJXLEtBQUt3a0UsUUFBVVosRUFBUVksYUFDeEIzOEIsTUFBTSxtQkFHVCs3QixFQUFRdmtFLGVBQWUsZUFDbkJXLEtBQUt5a0UsUUFBVWIsRUFBUWEsYUFDeEI1OEIsTUFBTSxxQkFHUHRhLGNBQ0RzYSxNQUFNLGtCQUVQZzhCLE1BQ0loc0IsZUFDRGhRLE1BQU0sdUJBR1I2OEIsWUFBWTdtRSxLQUFLOG1FLFVBQVc5bUUsS0FBS3VRLGNBQ2pDeTVCLE1BQU0sc0JBR1RocUMsS0FBS3M3QixNQUFNMnFDLGNBQ1IzcUMsTUFBTTJxQyxPQUFPanNCLGVBRWJoUSxNQUFNLHVCQUdSNjhCLFlBQVk3bUUsS0FBSzhtRSxVQUFXOW1FLEtBQUt1USxjQUNqQ3k1QixNQUFNLGdCRGhEZjY3QixpQkFBRWxtRCxvQkFDTW1wQixVQUFVLGNBQWVpK0IscUJBRXpCcC9CLFFBQ0UsOEJBQ1MsS0FBTSxvQ0FHTmsrQixPQUFPMWpFLGNBQ04sc0JBV3BCMGpFLGlCQUFFbUIsb0JBQVdybUUsV0FDRHFCLElBQUlyQixJQUloQmtsRSxPQUFPMWpFLEtBQU84a0UsV0MyQmQsSUFBV0MsbUJBQ0gsNEJBRVMsd0JBSUFwQixjQUdOcUIsMENBR0sscUJBSUNyQixtQ0FJRG9CLDBCQUNBQyxjQ3JGWkMsY0FJRyxpQkFPQSxlQUNEbjRDLEVBQUssU0FDRixrQkFDQ0EsS0FISCxpQkFhUyxTQUFTdHJCLFVBQ04sT0FBVkEsUUFBbUMsSUFBVkEsV0FTeEIrRCxNQUFNbUMsUUFBVW5DLE1BQU1tQyxRQUFVLFNBQVNsRyxTQUNBLG1CQUExQ2IsT0FBT00sVUFBVUUsU0FBU08sS0FBS0YsYUFTN0IsU0FBU0EsVUFDRCxPQUFWQSxHQUE0RCxvQkFBMUNiLE9BQU9NLFVBQVVFLFNBQVNPLEtBQUtGLG1CQVN6QyxTQUFTQSxFQUFPeVosZUFDUCxJQUFWelosRUFBd0J5WixFQUFleloseUJBVS9CLFNBQVNBLEVBQU9nRCxFQUFPeVcsVUFDdENncUQsUUFBUUMsZUFBZUQsUUFBUXY5RCxRQUFRbEcsR0FBU0EsRUFBTWdELEdBQVNoRCxFQUFPeVosYUFXcEUsU0FBUzZLLEVBQUloaEIsRUFBTUQsTUFDeEJpaEIsR0FBeUIsbUJBQVpBLEVBQUdwa0IsWUFDWm9rQixFQUFHbGhCLE1BQU1DLEVBQVNDLFNBYXJCLFNBQVNxZ0UsRUFBVXIvQyxFQUFJamhCLEVBQVN1Z0UsT0FDakN0akQsRUFBRytULEVBQUtoekIsS0FDUm9pRSxRQUFRdjlELFFBQVF5OUQsUUFDYkEsRUFBUzFnRSxPQUNYMmdFLE1BQ0V0akQsRUFBSStULEVBQU0sRUFBRy9ULEdBQUssRUFBR0EsTUFDdEJwZ0IsS0FBS21ELEVBQVNzZ0UsRUFBU3JqRCxHQUFJQSxZQUcxQkEsRUFBSSxFQUFHQSxFQUFJK1QsRUFBSy9ULE1BQ2pCcGdCLEtBQUttRCxFQUFTc2dFLEVBQVNyakQsR0FBSUEsUUFHMUIsR0FBSW1qRCxRQUFROWlFLFNBQVNnakUsWUFDcEJ4a0UsT0FBT2tDLEtBQUtzaUUsSUFDUjFnRSxPQUNOcWQsRUFBSSxFQUFHQSxFQUFJK1QsRUFBSy9ULE1BQ2pCcGdCLEtBQUttRCxFQUFTc2dFLEVBQVN0aUUsRUFBS2lmLElBQUtqZixFQUFLaWYsaUJBWS9CLFNBQVN1akQsRUFBSUMsT0FDckJ4akQsRUFBR3lqRCxFQUFNQyxFQUFJQyxNQUVaSixJQUFPQyxHQUFNRCxFQUFHNWdFLFNBQVc2Z0UsRUFBRzdnRSxjQUMzQixNQUdIcWQsRUFBSSxFQUFHeWpELEVBQU9GLEVBQUc1Z0UsT0FBUXFkLEVBQUl5akQsSUFBUXpqRCxPQUNwQ3VqRCxFQUFHdmpELEtBQ0h3akQsRUFBR3hqRCxHQUVKMGpELGFBQWNqZ0UsT0FBU2tnRSxhQUFjbGdFLFdBQ25DMC9ELFFBQVFTLFlBQVlGLEVBQUlDLFVBQ3JCLE9BRUYsR0FBSUQsSUFBT0MsU0FFVixTQUlGLFNBUUQsU0FBU3JoRSxNQUNYNmdFLFFBQVF2OUQsUUFBUXRELFVBQ1pBLEVBQU9rTyxJQUFJMnlELFFBQVFuakMsVUFHdkJtakMsUUFBUTlpRSxTQUFTaUMsR0FBUyxTQUN6QnlhLEtBQ0FoYyxFQUFPbEMsT0FBT2tDLEtBQUt1QixHQUNuQnVoRSxFQUFPOWlFLEVBQUs0QixPQUNaMmUsRUFBSSxFQUVEQSxFQUFJdWlELElBQVF2aUQsSUFDWHZnQixFQUFLdWdCLElBQU02aEQsUUFBUW5qQyxNQUFNMTlCLEVBQU92QixFQUFLdWdCLFlBR3RDdkUsU0FHRHphLFdBUUMsU0FBU1QsRUFBS2tiLEVBQVF6YSxFQUFRZ0ssT0FDbEN3M0QsRUFBTy9tRCxFQUFPbGIsR0FDZGtpRSxFQUFPemhFLEVBQU9ULEdBRWRzaEUsUUFBUTlpRSxTQUFTeWpFLElBQVNYLFFBQVE5aUUsU0FBUzBqRSxXQUN0Q2p4RCxNQUFNZ3hELEVBQU1DLEVBQU16M0QsS0FFbkJ6SyxHQUFPc2hFLFFBQVFuakMsTUFBTStqQyxjQVFuQixTQUFTbGlFLEVBQUtrYixFQUFRemEsT0FDNUJ3aEUsRUFBTy9tRCxFQUFPbGIsR0FDZGtpRSxFQUFPemhFLEVBQU9ULEdBRWRzaEUsUUFBUTlpRSxTQUFTeWpFLElBQVNYLFFBQVE5aUUsU0FBUzBqRSxXQUN0Q0MsUUFBUUYsRUFBTUMsR0FDWGhuRCxFQUFPeGYsZUFBZXNFLE9BQzFCQSxHQUFPc2hFLFFBQVFuakMsTUFBTStqQyxXQWF2QixTQUFTaG5ELEVBQVF6YSxFQUFRZ0ssT0FHM0J3RyxFQUFPa04sRUFBR2pmLEVBQU04aUUsRUFBTXZpRCxFQUZ0QnBjLEVBQVVpK0QsUUFBUXY5RCxRQUFRdEQsR0FBVUEsR0FBVUEsR0FDOUNtaEUsRUFBT3YrRCxFQUFRdkMsV0FHZHdnRSxRQUFROWlFLFNBQVMwYyxVQUNkQSxXQUdFelEsT0FDTTIzRCxRQUFVZCxRQUFRZSxRQUU3QmxrRCxFQUFJLEVBQUdBLEVBQUl5akQsSUFBUXpqRCxPQUNkOWEsRUFBUThhLEdBQ1ptakQsUUFBUTlpRSxTQUFTaUMsT0FLakJnZixFQUFJLEVBQUd1aUQsS0FETGhsRSxPQUFPa0MsS0FBS3VCLElBQ0tLLE9BQVEyZSxFQUFJdWlELElBQVF2aUQsSUFDckN2Z0IsRUFBS3VnQixHQUFJdkUsRUFBUXphLEVBQVFnSyxVQUkxQnlRLFdBVUMsU0FBU0EsRUFBUXphLFVBQ2xCNmdFLFFBQVFyd0QsTUFBTWlLLEVBQVF6YSxHQUFTMmhFLE9BQVFkLFFBQVFnQixvQkFVL0MsU0FBU3BuRCx1QkFDWnFuRCxFQUFRLFNBQVMxa0UsRUFBT21DLEtBQ3BCQSxHQUFPbkMsR0FFTnNnQixFQUFJLEVBQUd5akQsRUFBT2xnRSxVQUFVWixPQUFRcWQsRUFBSXlqRCxJQUFRempELFVBQzVDcWtELEtBQUs5Z0UsRUFBVXljLEdBQUlva0QsVUFFckJybkQsWUFNRSxTQUFTdW5ELE9BQ2RDLEVBQUt4b0UsS0FDTHlvRSxFQUFnQkYsR0FBY0EsRUFBVy9tRSxlQUFlLGVBQWtCK21FLEVBQVduN0QsWUFBYyxrQkFDL0ZvN0QsRUFBR3poRSxNQUFNL0csS0FBTXdILFlBR25Ca2hFLEVBQVksZ0JBQ1Z0N0QsWUFBY3E3RCxZQUdWcmxFLFVBQVlvbEUsRUFBR3BsRSxZQUNaQSxVQUFZLElBQUlzbEUsSUFDaEJ0L0MsT0FBU2crQyxRQUFRdUIsU0FFMUJKLFdBQ0tuL0MsT0FBT3EvQyxFQUFhcmxFLFVBQVdtbEUsS0FHM0JLLFVBQVlKLEVBQUdwbEUsVUFDckJxbEUsaUJBSVFyQixRQVdqQkEsUUFBUXlCLGFBQWV6QixRQUFRbmhDLFNBVS9CbWhDLFFBQVF0L0MsUUFBVSxTQUFTcmdCLEVBQU9vZ0IsRUFBTWloRCxVQUNoQ3BoRSxNQUFNdEUsVUFBVTBrQixRQUFRamtCLEtBQUs0RCxFQUFPb2dCLEVBQU1paEQsSUFVbEQxQixRQUFRMkIsa0JBQW9CM0IsUUFBUUMsZUFTcENELFFBQVE0Qix5QkFBMkI1QixRQUFRNkIsc0JDelUzQyxJQUFJQyxnQkFDSyxTQUFTcHhDLFVBQ1RBLGNBR0ksU0FBU0EsVUFDYkEsRUFBSUEsZUFHQyxTQUFTQSxVQUNiQSxHQUFLQSxFQUFJLGtCQUdILFNBQVNBLFVBQ2xCQSxHQUFLLElBQU8sRUFDVCxHQUFNQSxFQUFJQSxHQUVWLE1BQVVBLEdBQU1BLEVBQUksR0FBSyxnQkFHckIsU0FBU0EsVUFDZEEsRUFBSUEsRUFBSUEsZ0JBR0YsU0FBU0EsVUFDZEEsR0FBUSxHQUFLQSxFQUFJQSxFQUFJLGtCQUdkLFNBQVNBLFVBQ25CQSxHQUFLLElBQU8sRUFDVCxHQUFNQSxFQUFJQSxFQUFJQSxFQUVmLEtBQVFBLEdBQUssR0FBS0EsRUFBSUEsRUFBSSxnQkFHckIsU0FBU0EsVUFDZEEsRUFBSUEsRUFBSUEsRUFBSUEsZ0JBR04sU0FBU0EsWUFDWkEsR0FBUSxHQUFLQSxFQUFJQSxFQUFJQSxFQUFJLG1CQUdwQixTQUFTQSxVQUNuQkEsR0FBSyxJQUFPLEVBQ1QsR0FBTUEsRUFBSUEsRUFBSUEsRUFBSUEsR0FFbEIsS0FBUUEsR0FBSyxHQUFLQSxFQUFJQSxFQUFJQSxFQUFJLGdCQUcxQixTQUFTQSxVQUNkQSxFQUFJQSxFQUFJQSxFQUFJQSxFQUFJQSxnQkFHVixTQUFTQSxVQUNkQSxHQUFRLEdBQUtBLEVBQUlBLEVBQUlBLEVBQUlBLEVBQUksa0JBR3RCLFNBQVNBLFVBQ25CQSxHQUFLLElBQU8sRUFDVCxHQUFNQSxFQUFJQSxFQUFJQSxFQUFJQSxFQUFJQSxFQUV2QixLQUFRQSxHQUFLLEdBQUtBLEVBQUlBLEVBQUlBLEVBQUlBLEVBQUksZUFHOUIsU0FBU0EsVUFDa0IsRUFBOUIzd0IsS0FBS2dpRSxJQUFJcnhDLEdBQUszd0IsS0FBS2lpRSxHQUFLLGlCQUdwQixTQUFTdHhDLFVBQ2Qzd0IsS0FBS2tpRSxJQUFJdnhDLEdBQUszd0IsS0FBS2lpRSxHQUFLLG1CQUdqQixTQUFTdHhDLFVBQ2YsSUFBTzN3QixLQUFLZ2lFLElBQUloaUUsS0FBS2lpRSxHQUFLdHhDLEdBQUssZUFHNUIsU0FBU0EsVUFDTixJQUFOQSxFQUFXLEVBQUkzd0IsS0FBS21pRSxJQUFJLEVBQUcsSUFBTXh4QyxFQUFJLGlCQUdqQyxTQUFTQSxVQUNQLElBQU5BLEVBQVcsRUFBNEIsRUFBdkIzd0IsS0FBS21pRSxJQUFJLEdBQUksR0FBS3h4QyxrQkFHNUIsU0FBU0EsVUFDYixJQUFOQSxFQUNJLEVBRUUsSUFBTkEsRUFDSSxHQUVIQSxHQUFLLElBQU8sRUFDVCxHQUFNM3dCLEtBQUttaUUsSUFBSSxFQUFHLElBQU14eEMsRUFBSSxJQUU3QixJQUFpQyxFQUF6QjN3QixLQUFLbWlFLElBQUksR0FBSSxLQUFPeHhDLGdCQUd4QixTQUFTQSxVQUNoQkEsR0FBSyxFQUNEQSxJQUVDM3dCLEtBQUtvaUUsS0FBSyxFQUFJenhDLEVBQUlBLEdBQUssZ0JBR3BCLFNBQVNBLFVBQ2Qzd0IsS0FBS29pRSxLQUFLLEdBQUt6eEMsR0FBUSxHQUFLQSxrQkFHckIsU0FBU0EsVUFDbEJBLEdBQUssSUFBTyxHQUNSLElBQU8zd0IsS0FBS29pRSxLQUFLLEVBQUl6eEMsRUFBSUEsR0FBSyxHQUVoQyxJQUFPM3dCLEtBQUtvaUUsS0FBSyxHQUFLenhDLEdBQUssR0FBS0EsR0FBSyxrQkFHOUIsU0FBU0EsT0FDbkJ2MkIsRUFBSSxRQUNKcTRCLEVBQUksRUFDSi9RLEVBQUksU0FDRSxJQUFOaVAsRUFDSSxFQUVFLElBQU5BLEVBQ0ksR0FFSDhCLE1BQ0EsSUFFRC9RLEVBQUksS0FDSCxJQUNBK1EsRUFBSSxLQUVKQSxHQUFLLEVBQUl6eUIsS0FBS2lpRSxJQUFNamlFLEtBQUtxaUUsS0FBSyxFQUFJM2dELElBRTlCQSxFQUFJMWhCLEtBQUttaUUsSUFBSSxFQUFHLElBQU14eEMsR0FBSyxJQUFNM3dCLEtBQUtraUUsS0FBS3Z4QyxFQUFJdjJCLElBQU0sRUFBSTRGLEtBQUtpaUUsSUFBTXh2QyxvQkFHOUQsU0FBUzlCLE9BQ3BCdjJCLEVBQUksUUFDSnE0QixFQUFJLEVBQ0ovUSxFQUFJLFNBQ0UsSUFBTmlQLEVBQ0ksRUFFRSxJQUFOQSxFQUNJLEdBRUg4QixNQUNBLElBRUQvUSxFQUFJLEtBQ0gsSUFDQStRLEVBQUksS0FFSkEsR0FBSyxFQUFJenlCLEtBQUtpaUUsSUFBTWppRSxLQUFLcWlFLEtBQUssRUFBSTNnRCxHQUVoQ0EsRUFBSTFoQixLQUFLbWlFLElBQUksR0FBSSxHQUFLeHhDLEdBQUszd0IsS0FBS2tpRSxLQUFLdnhDLEVBQUl2MkIsSUFBTSxFQUFJNEYsS0FBS2lpRSxJQUFNeHZDLEdBQUsscUJBR3pELFNBQVM5QixPQUN0QnYyQixFQUFJLFFBQ0pxNEIsRUFBSSxFQUNKL1EsRUFBSSxTQUNFLElBQU5pUCxFQUNJLEVBRVcsSUFBZEEsR0FBSyxJQUNGLEdBRUg4QixNQUNBLEtBRUQvUSxFQUFJLEtBQ0gsSUFDQStRLEVBQUksS0FFSkEsR0FBSyxFQUFJenlCLEtBQUtpaUUsSUFBTWppRSxLQUFLcWlFLEtBQUssRUFBSTNnRCxHQUVuQ2lQLEVBQUksRUFDUWpQLEVBQUkxaEIsS0FBS21pRSxJQUFJLEVBQUcsSUFBTXh4QyxHQUFLLElBQU0zd0IsS0FBS2tpRSxLQUFLdnhDLEVBQUl2MkIsSUFBTSxFQUFJNEYsS0FBS2lpRSxJQUFNeHZDLElBQTNFLEdBRUYvUSxFQUFJMWhCLEtBQUttaUUsSUFBSSxHQUFJLElBQU14eEMsR0FBSyxJQUFNM3dCLEtBQUtraUUsS0FBS3Z4QyxFQUFJdjJCLElBQU0sRUFBSTRGLEtBQUtpaUUsSUFBTXh2QyxHQUFLLEdBQU0sZUFFNUUsU0FBUzlCLE9BQ2hCdjJCLEVBQUksZUFDRHUyQixFQUFJQSxJQUFNdjJCLEVBQUksR0FBS3UyQixFQUFJdjJCLGdCQUdsQixTQUFTdTJCLE9BQ2pCdjJCLEVBQUksZUFDQXUyQixHQUFRLEdBQUtBLElBQU12MkIsRUFBSSxHQUFLdTJCLEVBQUl2MkIsR0FBSyxpQkFHL0IsU0FBU3UyQixPQUNuQnYyQixFQUFJLGVBQ0h1MkIsR0FBSyxJQUFPLEVBQ0ZBLEVBQUlBLElBQXVCLEdBQWhCdjJCLEdBQU0sUUFBZXUyQixFQUFJdjJCLEdBQTNDLEdBRUQsS0FBUXUyQixHQUFLLEdBQUtBLElBQXVCLEdBQWhCdjJCLEdBQU0sUUFBZXUyQixFQUFJdjJCLEdBQUssaUJBR2pELFNBQVN1MkIsVUFDZixFQUFJb3hDLFFBQVFPLGNBQWMsRUFBSTN4QyxrQkFHdkIsU0FBU0EsVUFDbkJBLEVBQUssRUFBSSxLQUNMLE9BQVNBLEVBQUlBLEVBRWpCQSxFQUFLLEVBQUksS0FDTCxRQUFVQSxHQUFNLElBQU0sTUFBU0EsRUFBSSxJQUV2Q0EsRUFBSyxJQUFNLEtBQ1AsUUFBVUEsR0FBTSxLQUFPLE1BQVNBLEVBQUksTUFFckMsUUFBVUEsR0FBTSxNQUFRLE1BQVNBLEVBQUkseUJBRzVCLFNBQVNBLFVBQ3JCQSxFQUFJLEdBQzhCLEdBQTlCb3hDLFFBQVFRLGFBQWlCLEVBQUo1eEMsR0FFYSxHQUFuQ294QyxRQUFRTyxjQUFrQixFQUFKM3hDLEVBQVEsR0FBVyw2QkFLeENveEMsU0FZVjlCLGFBQVF1QyxjQUFnQlQsNlhDbFBwQmwvRCxFQUFVRyxpQkFLTixTQUFTNjdELEtBQ1RyOUMsSUFBSWloRCxVQUFVLEVBQUcsRUFBRzVELEVBQU02RCxNQUFPN0QsRUFBTThELHFCQWNqQyxTQUFTbmhELEVBQUtvaEQsRUFBR0MsRUFBR0gsRUFBT0MsRUFBUUcsTUFDM0NBLEVBQVEsS0FJUEMsRUFBSS9pRSxLQUFLZ2IsSUFBSThuRCxFQUFTSCxFQUFTLEVBRHJCLEtBQ29DRCxFQUFRLEVBRDVDLFFBR1ZNLE9BQU9KLEVBQUlHLEVBQUdGLEtBQ2RJLE9BQU9MLEVBQUlGLEVBQVFLLEVBQUdGLEtBQ3RCSyxNQUFNTixFQUFJRixFQUFPRyxFQUFHRCxFQUFJRixFQUFPRyxFQUFJRSxFQUFHQSxLQUN0Q0UsT0FBT0wsRUFBSUYsRUFBT0csRUFBSUYsRUFBU0ksS0FDL0JHLE1BQU1OLEVBQUlGLEVBQU9HLEVBQUlGLEVBQVFDLEVBQUlGLEVBQVFLLEVBQUdGLEVBQUlGLEVBQVFJLEtBQ3hERSxPQUFPTCxFQUFJRyxFQUFHRixFQUFJRixLQUNsQk8sTUFBTU4sRUFBR0MsRUFBSUYsRUFBUUMsRUFBR0MsRUFBSUYsRUFBU0ksRUFBR0EsS0FDeENFLE9BQU9MLEVBQUdDLEVBQUlFLEtBQ2RHLE1BQU1OLEVBQUdDLEVBQUdELEVBQUlHLEVBQUdGLEVBQUdFLEtBQ3RCSSxjQUNBSCxPQUFPSixFQUFHQyxVQUVWTyxLQUFLUixFQUFHQyxFQUFHSCxFQUFPQyxjQUliLFNBQVNuaEQsRUFBS29lLEVBQU9rakMsRUFBUUYsRUFBR0MsRUFBR1EsT0FDekNqbUUsRUFBTWttRSxFQUFZQyxFQUFTQyxFQUFTYixFQUFRcjNELE9BQ3JDKzNELEdBQVksR0FFbkJ6akMsR0FBMEIscUJBQVZBLHNCQUFBQSxLQUVOLGlDQUROQSxFQUFNempDLGFBQ3dDLCtCQUFUaUIsUUFNekMyaUIsTUFBTStpRCxJQUFXQSxHQUFVLGFBSTNCVyxTQUNBQyxVQUFVZCxFQUFHQyxLQUNiYyxPQUFPTixFQUFXcmpFLEtBQUtpaUUsR0FBSyxPQUM1QjJCLFlBRUloa0MsYUFHSGlrQyxJQUFJLEVBQUcsRUFBR2YsRUFBUSxFQUFhLEVBQVY5aUUsS0FBS2lpRSxNQUMxQmtCLHNCQUVBLGdCQUNTLEVBQUlMLEVBQVM5aUUsS0FBS29pRSxLQUFLLElBQ2RwaUUsS0FBS29pRSxLQUFLLEdBQUssSUFDakNZLFFBQVFNLEVBQWEsRUFBR1gsRUFBUyxLQUNqQ00sT0FBT0ssRUFBYSxFQUFHWCxFQUFTLEtBQ2hDTSxPQUFPLEdBQUksRUFBSU4sRUFBUyxLQUN4QlEsc0JBRUEsU0FDRyxFQUFJbmpFLEtBQUs4akUsTUFBUWhCLElBQ3BCTSxNQUFNOTNELEdBQU9BLEVBQU0sRUFBSUEsRUFBTSxFQUFJQSxhQUVqQyxrQkFDQWxCLEVBQVMwNEQsRUFBUzlpRSxLQUFLOGpFLE1BQ3ZCQyxHQUFTMzVELEVBQ1Q0NUQsR0FBUTU1RCxFQUNSNjVELEVBQVdqa0UsS0FBSzhqRSxNQUFRaEIsT0FNdkJvQixZQUFZMWlELEVBQUt1aUQsRUFBT0MsRUFBTUMsRUFBVUEsRUFBbUIsS0FBVG5CLGFBRW5ELFlBQ0csRUFBSTlpRSxLQUFLOGpFLE1BQVFoQixJQUNwQkUsUUFBUTEzRCxFQUFNLEtBQ2QyM0QsT0FBTyxFQUFHMzNELEtBQ1YyM0QsT0FBTzMzRCxFQUFNLEtBQ2IyM0QsT0FBTyxHQUFJMzNELEtBQ1g2M0Qsc0JBRUEsVUFDQUgsT0FBTyxFQUFHRixLQUNWRyxPQUFPLEdBQUlILEtBQ1hFLFFBQVFGLEVBQVEsS0FDaEJHLE9BQU9ILEVBQVEsYUFFZixhQUNNOWlFLEtBQUtnaUUsSUFBSWhpRSxLQUFLaWlFLEdBQUssR0FBS2EsSUFDeEI5aUUsS0FBS2tpRSxJQUFJbGlFLEtBQUtpaUUsR0FBSyxHQUFLYSxJQUM5QkUsUUFBUU8sR0FBVUMsS0FDbEJQLE9BQU9NLEVBQVNDLEtBQ2hCUixRQUFRTyxFQUFTQyxLQUNqQlAsT0FBT00sR0FBVUMsYUFFakIsU0FDQVIsT0FBTyxFQUFHRixLQUNWRyxPQUFPLEdBQUlILEtBQ1hFLFFBQVFGLEVBQVEsS0FDaEJHLE9BQU9ILEVBQVEsS0FDVDlpRSxLQUFLZ2lFLElBQUloaUUsS0FBS2lpRSxHQUFLLEdBQUthLElBQ3hCOWlFLEtBQUtraUUsSUFBSWxpRSxLQUFLaWlFLEdBQUssR0FBS2EsSUFDOUJFLFFBQVFPLEdBQVVDLEtBQ2xCUCxPQUFPTSxFQUFTQyxLQUNoQlIsUUFBUU8sRUFBU0MsS0FDakJQLE9BQU9NLEdBQVVDLGFBRWpCLFNBQ0FSLFFBQVFGLEVBQVEsS0FDaEJHLE9BQU9ILEVBQVEsYUFFZixTQUNBRSxPQUFPLEVBQUcsS0FDVkMsT0FBT0gsRUFBUSxLQUloQnFCLFNBQ0FDLFdBQ0FDLGtCQTFGRUMsVUFBVTFrQyxFQUFPZ2pDLEVBQUloakMsRUFBTThpQyxNQUFRLEVBQUdHLEVBQUlqakMsRUFBTStpQyxPQUFTLEVBQUcvaUMsRUFBTThpQyxNQUFPOWlDLEVBQU0raUMsa0JBNkY1RSxTQUFTbmhELEVBQUsraUQsS0FDbkJkLFNBQ0FHLGNBQ0FSLEtBQUttQixFQUFLM2EsS0FBTTJhLEVBQUt6YSxJQUFLeWEsRUFBS2xxQixNQUFRa3FCLEVBQUszYSxLQUFNMmEsRUFBS0MsT0FBU0QsRUFBS3phLE9BQ3JFMmEsbUJBR08sU0FBU2pqRCxLQUNoQjZpRCxrQkFHRyxTQUFTN2lELEVBQUtrakQsRUFBVTdxRCxFQUFROHFELE1BQ25DOXFELEVBQU8rcUQsa0JBQ2tCLFVBQXZCL3FELEVBQU8rcUQsY0FBNEJELEdBQWlDLFVBQXZCOXFELEVBQU8rcUQsYUFBMkJELElBQy9FMUIsT0FBT3lCLEVBQVM5QixFQUFHL29ELEVBQU9ncEQsS0FFMUJJLE9BQU9wcEQsRUFBTytvRCxFQUFHOEIsRUFBUzdCLFVBRTNCSSxPQUFPcHBELEVBQU8rb0QsRUFBRy9vRCxFQUFPZ3BELEdBSXhCaHBELEVBQU9nckQsVUFLUkMsY0FDSEgsRUFBT0QsRUFBU0ssc0JBQXdCTCxFQUFTTSxrQkFDakRMLEVBQU9ELEVBQVNPLHNCQUF3QlAsRUFBU1Esa0JBQ2pEUCxFQUFPOXFELEVBQU9tckQsa0JBQW9CbnJELEVBQU9rckQsc0JBQ3pDSixFQUFPOXFELEVBQU9xckQsa0JBQW9CcnJELEVBQU9vckQsc0JBQ3pDcHJELEVBQU8rb0QsRUFDUC9vRCxFQUFPZ3BELEtBVkhJLE9BQU9wcEQsRUFBTytvRCxFQUFHL29ELEVBQU9ncEQsa0JBdUJ2QjUyRCxNQUFRcEosRUFBUW9KLG1CQVNoQms1RCxxQkFBdUIsU0FBUzNqRCxLQUNuQ29pRCxjQUNJTSxZQUFZdGtFLE1BQU1pRCxFQUFTeEMsbVNDOUxyQixTQUFTN0QsRUFBTzhPLE9BQ3pCNlEsR0FBVyxHQUFLM2YsR0FBT3ZDLE1BQU0sNENBQzVCa2lCLEdBQTBCLFdBQWZBLEVBQVEsVUFDVCxJQUFQN1EsWUFHQzZRLEVBQVEsR0FFVEEsRUFBUSxRQUNYLFlBQ0czZixNQUNILE9BQ0ssV0FNSDhPLEVBQU85TyxhQVVKLFNBQVNBLE9BQ2ZtMEIsRUFBR295QyxFQUFHemdELEVBQUdYLFNBRVRzK0MsYUFBUTlpRSxTQUFTWCxPQUNmQSxFQUFNc3RELEtBQU8sS0FDYnR0RCxFQUFNNjlDLE9BQVMsS0FDZjc5QyxFQUFNZ29FLFFBQVUsS0FDaEJob0UsRUFBTW90RCxNQUFRLEtBRWZtWixFQUFJemdELEVBQUlYLEdBQUtubEIsR0FBUyxPQUlyQm0wQixRQUNFb3lDLFNBQ0N6Z0QsT0FDRlgsU0FDRWdQLEVBQUlyTyxRQUNMWCxFQUFJb2hELFlBYUosU0FBU3FDLEVBQVFyOEMsRUFBU3ZwQixPQUM5QnNkLEVBQUd5akQsRUFBTS9qRSxNQUVSc2dCLEVBQUksRUFBR3lqRCxFQUFPNkUsRUFBTzNsRSxPQUFRcWQsRUFBSXlqRCxJQUFRempELFVBRS9CeGdCLE9BRE44b0UsRUFBT3RvRCxXQUlDeGdCLElBQVp5c0IsR0FBMEMsbUJBQVZ2c0IsTUFDM0JBLEVBQU11c0IsU0FFRHpzQixJQUFWa0QsR0FBdUJ5Z0UsYUFBUXY5RCxRQUFRbEcsT0FDbENBLEVBQU1nRCxTQUVEbEQsSUFBVkUsVUFDSUEsY0N6Rk02b0Usb0JBQ09DLHNCQUNBQyx1QkFDQ0Msa0hDR2xCLFNBQVNDLEVBQU81MUQsVUFDZG93RCxVQUFRcndELE1BQU0vVyxLQUFLNHNFLEtBQVc1c0UsS0FBSzRzRSxPQUFjNTFELEtDTDFENjFELGNBQVNDLEtBQUssc0JBQ0QsOEJBQ2lCLHVCQUNSLFVBQ1osWUFBYSxXQUFZLFFBQVMsYUFBYyw0QkFFL0MsVUFDSCxxQkFDSyxvQkFDUSxhQUVYLGtCQUNLLG1DQUNJLHlCQUNDLHFFQUNGLG9CQUNDLG9CQUNQLG1DQVFKLFFBQ0UsU0FDQyxPQUNGLE1BS1QsU0FBaUIsZUFHWkMsRUFBUSxTQUFTbGxELEVBQU10SSxlQUNyQnl0RCxVQUFVbmxELEVBQU10SSxHQUNkdmYsZUFHRitzRSxNQUFRQSxFQUVQQSx3QkM1Q0dFLGdCQUNBQyxnQkFDQUMsaUJBQ0NDLHFCQUNHQyxvQkFDSkMsZ0JBQ0FDLGdCQUNBQyxnQkFFQUMsZ0JBQ0FDLGdCQUNBQyxpQkFDQ0MscUJBQ0dDLG9CQUVKQyxnQkFDQUMsZ0JBQ0FDLGlCQUNDQyxxQkFDR0Msb0JBRUpDLGdCQUNBQyxnQkFDQUMsaUJBQ0NDLHFCQUNHQyxxQkFFSEMsa0JBQ0FDLGtCQUNBQyxrQkFDQUMsc0JBQ0lDLHlCQUVEQyx3QkFDQUMsd0JBQ0FDLHdCQUNBQyx5QkFDQ0MseUJBQ0RDLHdCQUNBQyxvQkFFSkMsZ0JBQ0FDLGdCQUNBQyxnQkFFQUMsZ0JBQ0FDLGdCQUNBQyxnQkFFQUMsZ0JBQ0FDLGdCQUNBQyxTQUlYLFNBQVMzQyxRQUFRNEMsT0FPWHBoQixFQUFNM2xDLEVBTk5vaEQsRUFBSTJGLEVBQUksR0FBRyxJQUNYQyxFQUFJRCxFQUFJLEdBQUcsSUFDWHBtRCxFQUFJb21ELEVBQUksR0FBRyxJQUNYMXRELEVBQU1oYixLQUFLZ2IsSUFBSStuRCxFQUFHNEYsRUFBR3JtRCxHQUNyQnJpQixFQUFNRCxLQUFLQyxJQUFJOGlFLEVBQUc0RixFQUFHcm1ELEdBQ3JCc21ELEVBQVEzb0UsRUFBTSthLFNBR2QvYSxHQUFPK2EsSUFDTCxFQUNHK25ELEdBQUs5aUUsS0FDUDBvRSxFQUFJcm1ELEdBQUtzbUQsRUFDUEQsR0FBSzFvRSxJQUNSLEdBQUtxaUIsRUFBSXlnRCxHQUFLNkYsRUFDWHRtRCxHQUFLcmlCLE1BQ1IsR0FBSzhpRSxFQUFJNEYsR0FBSUMsTUFFZjVvRSxLQUFLZ2IsSUFBUSxHQUFKc3NDLEVBQVEsTUFFYixPQUNELFFBRUZ0c0MsRUFBTS9hLEdBQU8sR0FTVnFuRCxFQUFPLEtBUFhybkQsR0FBTythLEVBQ0wsRUFDRzJHLEdBQUssR0FDUmluRCxHQUFTM29FLEVBQU0rYSxHQUVmNHRELEdBQVMsRUFBSTNvRSxFQUFNK2EsSUFFRCxJQUFKMkcsR0FHdEIsU0FBU29rRCxRQUFRMkMsT0FPWHBoQixFQUFHbHRELEVBTkgyb0UsRUFBSTJGLEVBQUksR0FDUkMsRUFBSUQsRUFBSSxHQUNScG1ELEVBQUlvbUQsRUFBSSxHQUNSMXRELEVBQU1oYixLQUFLZ2IsSUFBSStuRCxFQUFHNEYsRUFBR3JtRCxHQUNyQnJpQixFQUFNRCxLQUFLQyxJQUFJOGlFLEVBQUc0RixFQUFHcm1ELEdBQ3JCc21ELEVBQVEzb0UsRUFBTSthLFdBR1AsR0FBUC9hLEVBQ0UsRUFFQzJvRSxFQUFNM29FLEVBQU0sSUFBTSxHQUVyQkEsR0FBTythLElBQ0wsRUFDRytuRCxHQUFLOWlFLEtBQ1Awb0UsRUFBSXJtRCxHQUFLc21ELEVBQ1BELEdBQUsxb0UsSUFDUixHQUFLcWlCLEVBQUl5Z0QsR0FBSzZGLEVBQ1h0bUQsR0FBS3JpQixNQUNSLEdBQUs4aUUsRUFBSTRGLEdBQUtDLE1BRWhCNW9FLEtBQUtnYixJQUFRLEdBQUpzc0MsRUFBUSxNQUViLE9BQ0QsTUFJQ0EsRUFBR2x0RCxFQUZMNkYsRUFBTSxJQUFPLElBQVEsSUFLN0IsU0FBUytsRSxRQUFRMEMsT0FDWDNGLEVBQUkyRixFQUFJLEdBQ1JDLEVBQUlELEVBQUksR0FDUnBtRCxFQUFJb21ELEVBQUksVUFDSjVDLFFBQVE0QyxHQUFLLEdBSU4sS0FIUCxFQUFFLElBQU0xb0UsS0FBS2diLElBQUkrbkQsRUFBRy9pRSxLQUFLZ2IsSUFBSTJ0RCxFQUFHcm1ELEtBR2hCLEtBRnBCQSxFQUFJLEVBQUksRUFBRSxJQUFNdGlCLEtBQUtDLElBQUk4aUUsRUFBRy9pRSxLQUFLQyxJQUFJMG9FLEVBQUdybUQsTUFLOUMsU0FBUzJqRCxTQUFTeUMsT0FJSHRxRCxFQUhUMmtELEVBQUkyRixFQUFJLEdBQUssSUFDYkMsRUFBSUQsRUFBSSxHQUFLLElBQ2JwbUQsRUFBSW9tRCxFQUFJLEdBQUssV0FPTCxNQUhQLEVBQUkzRixLQURML2lFLEtBQUtnYixJQUFJLEVBQUkrbkQsRUFBRyxFQUFJNEYsRUFBRyxFQUFJcm1ELE1BQ1osRUFBSWxFLElBQU0sR0FHUixNQUZoQixFQUFJdXFELEVBQUl2cUQsSUFBTSxFQUFJQSxJQUFNLEdBRUMsTUFEekIsRUFBSWtFLEVBQUlsRSxJQUFNLEVBQUlBLElBQU0sR0FDVSxJQUFKQSxHQUdyQyxTQUFTOG5ELFlBQVl3QyxVQUNaRyxnQkFBZ0I5dkQsS0FBSzhHLFVBQVU2b0QsSUFHeEMsU0FBU3ZDLFFBQVF1QyxPQUNYM0YsRUFBSTJGLEVBQUksR0FBSyxJQUNiQyxFQUFJRCxFQUFJLEdBQUssSUFDYnBtRCxFQUFJb21ELEVBQUksR0FBSyxXQVdMLEtBSkMsU0FKVDNGLEVBQUksT0FBVS9pRSxLQUFLbWlFLEtBQU1ZLEVBQUksTUFBUyxNQUFRLEtBQVFBLEVBQUksT0FJbEMsU0FIeEI0RixFQUFJLE9BQVUzb0UsS0FBS21pRSxLQUFNd0csRUFBSSxNQUFTLE1BQVEsS0FBUUEsRUFBSSxPQUduQixTQUZ2Q3JtRCxFQUFJLE9BQVV0aUIsS0FBS21pRSxLQUFNNy9DLEVBQUksTUFBUyxNQUFRLEtBQVFBLEVBQUksUUFNMUMsS0FIUCxNQUFKeWdELEVBQW1CLE1BQUo0RixFQUFtQixNQUFKcm1ELEdBR1YsS0FGaEIsTUFBSnlnRCxFQUFtQixNQUFKNEYsRUFBbUIsTUFBSnJtRCxJQUt6QyxTQUFTOGpELFFBQVFzQyxPQUNYSSxFQUFNM0MsUUFBUXVDLEdBQ1o5RixFQUFJa0csRUFBSSxHQUNSakcsRUFBSWlHLEVBQUksR0FDUkMsRUFBSUQsRUFBSSxhQUlULE9BQ0EsY0FGQSxRQUlHLFFBQVc5b0UsS0FBS21pRSxJQUFJUyxFQUFHLEVBQUUsR0FBTSxNQUFRQSxFQUFNLEdBQUssS0FJckQsT0FIREMsRUFBSSxRQUFXN2lFLEtBQUttaUUsSUFBSVUsRUFBRyxFQUFFLEdBQU0sTUFBUUEsRUFBTSxHQUFLLEtBRzFDLEdBQ1osS0FBT0QsRUFBSUMsR0FDWCxLQUFPQSxLQUpQa0csRUFBSSxRQUFXL29FLEtBQUttaUUsSUFBSTRHLEVBQUcsRUFBRSxHQUFNLE1BQVFBLEVBQU0sR0FBSyxPQVM1RCxTQUFTMUMsUUFBUXZtRSxVQUNSd29FLFFBQVFsQyxRQUFRdG1FLElBR3pCLFNBQVN3bUUsUUFBUTBDLE9BSVhDLEVBQUlDLEVBQUlDLEVBQUlULEVBQUtscEQsRUFIakI4bkMsRUFBSTBoQixFQUFJLEdBQUssSUFDYjV1RSxFQUFJNHVFLEVBQUksR0FBSyxJQUNicm5ELEVBQUlxbkQsRUFBSSxHQUFLLE9BR1IsR0FBTDV1RSxXQUNRLElBQUp1bkIsRUFDT25DLEVBQUtBLEtBT2YsRUFBSW1DLEtBSkxBLEVBQUksR0FDREEsR0FBSyxFQUFJdm5CLEdBRVR1bkIsRUFBSXZuQixFQUFJdW5CLEVBQUl2bkIsTUFHWixFQUFHLEVBQUcsT0FDUixJQUFJMGlCLEVBQUksRUFBR0EsRUFBSSxFQUFHQSxPQUNoQndxQyxFQUFJLEVBQUksSUFBT3hxQyxFQUFJLElBQ25CLEdBQUtxc0QsTUFDTCxHQUFLQSxNQUVOLEVBQUlBLEVBQUssRUFDTEYsRUFBaUIsR0FBWEMsRUFBS0QsR0FBVUUsRUFDcEIsRUFBSUEsRUFBSyxFQUNWRCxFQUNDLEVBQUlDLEVBQUssRUFDVkYsR0FBTUMsRUFBS0QsSUFBTyxFQUFJLEVBQUlFLEdBQU0sRUFFaENGLElBRUpuc0QsR0FBVyxJQUFOMEMsU0FHSmtwRCxFQUdULFNBQVNuQyxRQUFReUMsT0FDWDFoQixFQUFJMGhCLEVBQUksR0FDUjV1RSxFQUFJNHVFLEVBQUksR0FBSyxJQUNicm5ELEVBQUlxbkQsRUFBSSxHQUFLLFdBR1IsSUFBTnJuRCxHQUdTLEVBQUcsRUFBRyxJQU9WMmxDLEVBQVEsS0FEVixVQUhELElBQ00sRUFBSzNsQyxFQUFJLEVBQUlBLElBRVJBLEVBQUl2bkIsSUFDSyxNQUZwQnVuQixFQUFJdm5CLEdBQUssSUFLaEIsU0FBU29zRSxRQUFRMW1FLFVBQ1JrbUUsUUFBUU0sUUFBUXhtRSxJQUd6QixTQUFTMm1FLFNBQVMzbUUsVUFDVG1tRSxTQUFTSyxRQUFReG1FLElBRzFCLFNBQVM0bUUsWUFBWTVtRSxVQUNab21FLFlBQVlJLFFBQVF4bUUsSUFJN0IsU0FBUzZtRSxRQUFReUMsT0FDWDloQixFQUFJOGhCLEVBQUksR0FBSyxHQUNiaHZFLEVBQUlndkUsRUFBSSxHQUFLLElBQ2J0cUQsRUFBSXNxRCxFQUFJLEdBQUssSUFDYkMsRUFBS3JwRSxLQUFLMGYsTUFBTTRuQyxHQUFLLEVBRXJCZ2lCLEVBQUloaUIsRUFBSXRuRCxLQUFLMGYsTUFBTTRuQyxHQUNuQjcwQixFQUFJLElBQU0zVCxHQUFLLEVBQUkxa0IsR0FDbkJtdkUsRUFBSSxJQUFNenFELEdBQUssRUFBSzFrQixFQUFJa3ZFLEdBQ3hCMzRDLEVBQUksSUFBTTdSLEdBQUssRUFBSzFrQixHQUFLLEVBQUlrdkUsSUFDN0J4cUQsR0FBSSxXQUVEdXFELFFBQ0EsU0FDS3ZxRCxFQUFHNlIsRUFBRzhCLFFBQ1gsU0FDSzgyQyxFQUFHenFELEVBQUcyVCxRQUNYLFNBQ0tBLEVBQUczVCxFQUFHNlIsUUFDWCxTQUNLOEIsRUFBRzgyQyxFQUFHenFELFFBQ1gsU0FDSzZSLEVBQUc4QixFQUFHM1QsUUFDWCxTQUNLQSxFQUFHMlQsRUFBRzgyQyxJQUlwQixTQUFTM0MsUUFBUXdDLE9BSVhJLEVBQUk3bkQsRUFISjJsQyxFQUFJOGhCLEVBQUksR0FDUmh2RSxFQUFJZ3ZFLEVBQUksR0FBSyxJQUNidHFELEVBQUlzcUQsRUFBSSxHQUFLLGFBSVpodkUsRUFBSTBrQixHQUlEd29DLEVBQVEsZUFMWCxFQUFJbHRELEdBQUswa0IsSUFFRixFQUFLNkMsRUFBSSxFQUFJQSxJQUNkLEdBRWMsUUFEcEIsSUFJUCxTQUFTa2xELFFBQVEvbUUsVUFDUmttRSxRQUFRVyxRQUFRN21FLElBR3pCLFNBQVNnbkUsU0FBU2huRSxVQUNUbW1FLFNBQVNVLFFBQVE3bUUsSUFHMUIsU0FBU2luRSxZQUFZam5FLFVBQ1pvbUUsWUFBWVMsUUFBUTdtRSxJQUk3QixTQUFTa25FLFFBQVF5QyxPQUtYM3NELEVBQUdnQyxFQUFHd3FELEVBQUdubkUsRUFKVG1sRCxFQUFJbWlCLEVBQUksR0FBSyxJQUNiQyxFQUFLRCxFQUFJLEdBQUssSUFDZEUsRUFBS0YsRUFBSSxHQUFLLElBQ2RHLEVBQVFGLEVBQUtDLFNBSWJDLEVBQVEsT0FDSkEsS0FDQUEsS0FJSixFQUFJRCxJQUNKLEVBQUlyaUIsS0FGSnRuRCxLQUFLMGYsTUFBTSxFQUFJNG5DLElBR0QsSUFBVCxFQUFKeHFDLE9BQ0MsRUFBSXdzRCxLQUVOSSxFQUFLSixHQUFLeHFELEVBQUk0cUQsR0FFVjVzRCxnQkFFRCxPQUNBLElBQU9nQyxFQUFHNnBELEVBQUl4bUUsRUFBR21nQixFQUFJb25ELEVBQUksV0FDekIsSUFBT3ZuRSxFQUFHd21FLEVBQUk3cEQsRUFBR3dELEVBQUlvbkQsRUFBSSxXQUN6QixJQUFPQSxFQUFJZixFQUFJN3BELEVBQUd3RCxFQUFJbmdCLEVBQUcsV0FDekIsSUFBT3VuRSxFQUFJZixFQUFJeG1FLEVBQUdtZ0IsRUFBSXhELEVBQUcsV0FDekIsSUFBTzNjLEVBQUd3bUUsRUFBSWUsRUFBSXBuRCxFQUFJeEQsRUFBRyxXQUN6QixJQUFPQSxFQUFHNnBELEVBQUllLEVBQUlwbkQsRUFBSW5nQixTQUdqQixJQUFKNGdFLEVBQWEsSUFBSjRGLEVBQWEsSUFBSnJtRCxHQUc1QixTQUFTMmtELFFBQVFubkUsVUFDUmdtRSxRQUFRa0IsUUFBUWxuRSxJQUd6QixTQUFTb25FLFFBQVFwbkUsVUFDUmltRSxRQUFRaUIsUUFBUWxuRSxJQUd6QixTQUFTcW5FLFNBQVNybkUsVUFDVG1tRSxTQUFTZSxRQUFRbG5FLElBRzFCLFNBQVNzbkUsWUFBWXRuRSxVQUNab21FLFlBQVljLFFBQVFsbkUsSUFHN0IsU0FBU3VuRSxTQUFTd0MsT0FDWjVvRCxFQUFJNG9ELEVBQUssR0FBSyxJQUNkbG5ELEVBQUlrbkQsRUFBSyxHQUFLLElBQ2RoSCxFQUFJZ0gsRUFBSyxHQUFLLElBQ2R6ckQsRUFBSXlyRCxFQUFLLEdBQUssV0FNTixLQUhSLEVBQUk3cEUsS0FBS2diLElBQUksRUFBR2lHLEdBQUssRUFBSTdDLEdBQUtBLElBR2IsS0FGakIsRUFBSXBlLEtBQUtnYixJQUFJLEVBQUcySCxHQUFLLEVBQUl2RSxHQUFLQSxJQUVKLEtBRDFCLEVBQUlwZSxLQUFLZ2IsSUFBSSxFQUFHNm5ELEdBQUssRUFBSXprRCxHQUFLQSxLQUlwQyxTQUFTa3BELFNBQVN4bkUsVUFDVGdtRSxRQUFRdUIsU0FBU3ZuRSxJQUcxQixTQUFTeW5FLFNBQVN6bkUsVUFDVGltRSxRQUFRc0IsU0FBU3ZuRSxJQUcxQixTQUFTMG5FLFNBQVMxbkUsVUFDVGttRSxRQUFRcUIsU0FBU3ZuRSxJQUcxQixTQUFTMm5FLGFBQWEzbkUsVUFDYm9tRSxZQUFZbUIsU0FBU3ZuRSxJQUk5QixTQUFTbW9FLFFBQVFhLE9BSVgvRixFQUFHNEYsRUFBR3JtRCxFQUhOc2dELEVBQUlrRyxFQUFJLEdBQUssSUFDYmpHLEVBQUlpRyxFQUFJLEdBQUssSUFDYkMsRUFBSUQsRUFBSSxHQUFLLGNBSVAsTUFBTGxHLEVBQW9CLE9BQUpDLEVBQW1CLE1BQUprRyxJQUMzQixNQUFKbkcsR0FBb0IsS0FBTEMsRUFBb0IsTUFBSmtHLE9BRjNCLE9BQUpuRyxHQUFvQixPQUFMQyxHQUFxQixNQUFMa0csR0FLNUIsU0FBYyxNQUFRL29FLEtBQUttaUUsSUFBSVksRUFBRyxFQUFNLEtBQVEsS0FDcERBLEdBQVMsUUFFVDRGLEVBQUksU0FBYyxNQUFRM29FLEtBQUttaUUsSUFBSXdHLEVBQUcsRUFBTSxLQUFRLEtBQ3BEQSxHQUFTLFFBRVRybUQsRUFBSSxTQUFjLE1BQVF0aUIsS0FBS21pRSxJQUFJNy9DLEVBQUcsRUFBTSxLQUFRLEtBQ3BEQSxHQUFTLE9BTUQsT0FKUnRpQixLQUFLZ2IsSUFBSWhiLEtBQUtDLElBQUksRUFBRzhpRSxHQUFJLElBSVIsT0FIakIvaUUsS0FBS2diLElBQUloYixLQUFLQyxJQUFJLEVBQUcwb0UsR0FBSSxJQUdDLE9BRjFCM29FLEtBQUtnYixJQUFJaGIsS0FBS0MsSUFBSSxFQUFHcWlCLEdBQUksS0FLL0IsU0FBUzRsRCxRQUFRWSxPQUNYbEcsRUFBSWtHLEVBQUksR0FDUmpHLEVBQUlpRyxFQUFJLEdBQ1JDLEVBQUlELEVBQUksYUFJUCxPQUNBLGNBRkEsUUFJRyxRQUFXOW9FLEtBQUttaUUsSUFBSVMsRUFBRyxFQUFFLEdBQU0sTUFBUUEsRUFBTSxHQUFLLEtBSXJELE9BSERDLEVBQUksUUFBVzdpRSxLQUFLbWlFLElBQUlVLEVBQUcsRUFBRSxHQUFNLE1BQVFBLEVBQU0sR0FBSyxLQUcxQyxHQUNaLEtBQU9ELEVBQUlDLEdBQ1gsS0FBT0EsS0FKUGtHLEVBQUksUUFBVy9vRSxLQUFLbWlFLElBQUk0RyxFQUFHLEVBQUUsR0FBTSxNQUFRQSxFQUFNLEdBQUssT0FTNUQsU0FBU1osUUFBUXJvRSxVQUNSd29FLFFBQVFKLFFBQVFwb0UsSUFHekIsU0FBU3NvRSxRQUFRMEIsT0FJWGxILEVBQUdDLEVBQUdrRyxFQUFHZ0IsRUFIVHBvRCxFQUFJbW9ELEVBQUksR0FDUnBvRCxFQUFJb29ELEVBQUksR0FDUnhuRCxFQUFJd25ELEVBQUksVUFHUm5vRCxHQUFLLE9BQ0UsSUFBSkEsRUFBVyxPQUNHLElBQWIsTUFBc0IsR0FBSyxPQUU3QixJQUFNM2hCLEtBQUttaUUsS0FBS3hnRCxFQUFJLElBQU0sSUFBSyxLQUM5QjNoQixLQUFLbWlFLElBQUlVLEVBQUksSUFBSyxFQUFFLE9BR3ZCRCxFQUFJLFFBQVUsUUFBV0EsRUFBSyxRQUFXbGhELEVBQUksSUFBT3FvRCxFQUFNLEdBQUssS0FBUyxNQUFRLE9BQVMvcEUsS0FBS21pRSxJQUFLemdELEVBQUksSUFBT3FvRCxFQUFJLEdBSTNHbEgsSUFGUGtHLEVBQUksU0FBVyxRQUFXQSxFQUFLLFNBQVdnQixFQUFNem5ELEVBQUksSUFBUSxHQUFLLEtBQVMsTUFBUSxRQUFVdGlCLEtBQUttaUUsSUFBSTRILEVBQU16bkQsRUFBSSxJQUFNLElBSzNILFNBQVNnbUQsUUFBUXdCLE9BSVB4aUIsRUFISjNsQyxFQUFJbW9ELEVBQUksR0FDUnBvRCxFQUFJb29ELEVBQUksR0FDUnhuRCxFQUFJd25ELEVBQUksWUFJSCxJQURKOXBFLEtBQUtncUUsTUFBTTFuRCxFQUFHWixHQUNKLEVBQUkxaEIsS0FBS2lpRSxJQUNoQixPQUNELE1BR0N0Z0QsRUFESjNoQixLQUFLb2lFLEtBQUsxZ0QsRUFBSUEsRUFBSVksRUFBSUEsR0FDWmdsQyxHQUdoQixTQUFTK2dCLFFBQVF2b0UsVUFDUm1vRSxRQUFRRyxRQUFRdG9FLElBR3pCLFNBQVN5b0UsUUFBUTBCLE9BSUxDLEVBSE52b0QsRUFBSXNvRCxFQUFJLEdBQ1JocEQsRUFBSWdwRCxFQUFJLFlBQ0pBLEVBQUksR0FHSCxJQUFNLEVBQUlqcUUsS0FBS2lpRSxJQUdoQnRnRCxFQUZKVixFQUFJamhCLEtBQUtnaUUsSUFBSWtJLEdBQ2JqcEQsRUFBSWpoQixLQUFLa2lFLElBQUlnSSxJQUluQixTQUFTMUIsUUFBUTFvRSxVQUNSc29FLFFBQVFHLFFBQVF6b0UsSUFHekIsU0FBUzJvRSxRQUFRM29FLFVBQ1J1b0UsUUFBUUUsUUFBUXpvRSxJQUd6QixTQUFTNG5FLFlBQVl5QyxVQUNaQyxZQUFZRCxHQUdyQixTQUFTeEMsWUFBWTduRSxVQUNaZ21FLFFBQVE0QixZQUFZNW5FLElBRzdCLFNBQVM4bkUsWUFBWTluRSxVQUNaaW1FLFFBQVEyQixZQUFZNW5FLElBRzdCLFNBQVMrbkUsWUFBWS9uRSxVQUNaa21FLFFBQVEwQixZQUFZNW5FLElBRzdCLFNBQVNnb0UsYUFBYWhvRSxVQUNibW1FLFNBQVN5QixZQUFZNW5FLElBRzlCLFNBQVNpb0UsWUFBWWpvRSxVQUNac21FLFFBQVFzQixZQUFZNW5FLElBRzdCLFNBQVNrb0UsWUFBWWxvRSxVQUNacW1FLFFBQVF1QixZQUFZNW5FLElBRzdCLElBQUlzcUUsd0JBQ1csSUFBSSxJQUFJLG1CQUNOLElBQUksSUFBSSxXQUNoQixFQUFFLElBQUksaUJBQ0EsSUFBSSxJQUFJLFlBQ1osSUFBSSxJQUFJLFlBQ1IsSUFBSSxJQUFJLGFBQ1IsSUFBSSxJQUFJLFlBQ1IsRUFBRSxFQUFFLG1CQUNJLElBQUksSUFBSSxXQUNsQixFQUFFLEVBQUUsaUJBQ0UsSUFBSSxHQUFHLFlBQ1gsSUFBSSxHQUFHLGVBQ0gsSUFBSSxJQUFJLGdCQUNSLEdBQUcsSUFBSSxpQkFDUCxJQUFJLElBQUksY0FDUixJQUFJLElBQUksV0FDWixJQUFJLElBQUksb0JBQ0EsSUFBSSxJQUFJLGVBQ2QsSUFBSSxJQUFJLGNBQ1IsSUFBSSxHQUFHLFVBQ1gsRUFBRSxJQUFJLGVBQ0YsRUFBRSxFQUFFLGVBQ0osRUFBRSxJQUFJLG9CQUNBLElBQUksSUFBSSxjQUNkLElBQUksSUFBSSxnQkFDTixFQUFFLElBQUksYUFDUixJQUFJLElBQUksZ0JBQ04sSUFBSSxJQUFJLGtCQUNOLElBQUksRUFBRSxxQkFDSixHQUFHLElBQUksZ0JBQ1gsSUFBSSxJQUFJLGVBQ1IsSUFBSSxHQUFHLGNBQ1QsSUFBSSxFQUFFLGVBQ0osSUFBSSxJQUFJLG1CQUNOLElBQUksSUFBSSxvQkFDTixHQUFHLEdBQUcsb0JBQ04sR0FBRyxHQUFHLG1CQUNOLEdBQUcsR0FBRyxtQkFDTixFQUFFLElBQUksaUJBQ1YsSUFBSSxFQUFFLGVBQ1IsSUFBSSxHQUFHLGtCQUNILEVBQUUsSUFBSSxjQUNWLElBQUksSUFBSSxjQUNSLElBQUksSUFBSSxpQkFDTixHQUFHLElBQUksZ0JBQ1AsSUFBSSxHQUFHLGlCQUNMLElBQUksSUFBSSxrQkFDUixHQUFHLElBQUksYUFDWCxJQUFJLEVBQUUsZ0JBQ0osSUFBSSxJQUFJLGlCQUNSLElBQUksSUFBSSxXQUNkLElBQUksSUFBSSxjQUNGLElBQUksSUFBSSxVQUNkLElBQUksSUFBSSxZQUNOLEVBQUUsSUFBSSxnQkFDQSxJQUFJLElBQUksVUFDaEIsSUFBSSxJQUFJLGVBQ0osSUFBSSxJQUFJLGNBQ1IsSUFBSSxJQUFJLGdCQUNOLElBQUksR0FBRyxZQUNYLEdBQUcsRUFBRSxZQUNMLElBQUksSUFBSSxZQUNSLElBQUksSUFBSSxlQUNOLElBQUksSUFBSSxvQkFDRixJQUFJLElBQUksZ0JBQ1osSUFBSSxJQUFJLGlCQUNOLElBQUksSUFBSSxnQkFDVixJQUFJLElBQUksaUJBQ1IsSUFBSSxJQUFJLGdCQUNSLElBQUksSUFBSSwyQkFDRSxJQUFJLElBQUksZ0JBQ2xCLElBQUksSUFBSSxpQkFDUixJQUFJLElBQUksZ0JBQ1IsSUFBSSxJQUFJLGdCQUNSLElBQUksSUFBSSxrQkFDTixJQUFJLElBQUksb0JBQ04sR0FBRyxJQUFJLG1CQUNULElBQUksSUFBSSxxQkFDTixJQUFJLElBQUkscUJBQ1IsSUFBSSxJQUFJLHFCQUNSLElBQUksSUFBSSxrQkFDVixJQUFJLElBQUksV0FDaEIsRUFBRSxJQUFJLGNBQ0EsR0FBRyxJQUFJLFdBQ1gsSUFBSSxJQUFJLGNBQ04sSUFBSSxFQUFFLGFBQ1IsSUFBSSxFQUFFLHFCQUNJLElBQUksSUFBSSxpQkFDZCxFQUFFLEVBQUUsbUJBQ0YsSUFBSSxHQUFHLG1CQUNQLElBQUksSUFBSSxxQkFDTixHQUFHLElBQUksc0JBQ0wsSUFBSSxJQUFJLHdCQUNOLEVBQUUsSUFBSSxzQkFDUixHQUFHLElBQUksc0JBQ1AsSUFBSSxHQUFHLG1CQUNYLEdBQUcsR0FBRyxnQkFDUixJQUFJLElBQUksZ0JBQ1IsSUFBSSxJQUFJLGVBQ1YsSUFBSSxJQUFJLGtCQUNKLElBQUksSUFBSSxXQUNoQixFQUFFLEVBQUUsY0FDQSxJQUFJLElBQUksWUFDVixJQUFJLElBQUksY0FDSixJQUFJLElBQUksWUFDWixJQUFJLElBQUksY0FDSixJQUFJLEdBQUcsV0FDWCxJQUFJLElBQUksb0JBQ0EsSUFBSSxJQUFJLGdCQUNaLElBQUksSUFBSSxvQkFDSixJQUFJLElBQUksb0JBQ1IsSUFBSSxJQUFJLGlCQUNaLElBQUksSUFBSSxnQkFDUixJQUFJLElBQUksV0FDZCxJQUFJLElBQUksVUFDUixJQUFJLElBQUksV0FDUixJQUFJLElBQUksaUJBQ0YsSUFBSSxJQUFJLGFBQ1osSUFBSSxFQUFFLG9CQUNDLElBQUssR0FBSSxVQUNsQixJQUFJLEVBQUUsY0FDQSxJQUFJLElBQUksZ0JBQ1IsR0FBRyxJQUFJLGtCQUNMLElBQUksR0FBRyxZQUNiLElBQUksSUFBSSxpQkFDSixJQUFJLElBQUksY0FDVixHQUFHLElBQUksY0FDUCxJQUFJLElBQUksYUFDVixJQUFJLEdBQUcsWUFDUCxJQUFJLElBQUksY0FDTixJQUFJLElBQUksZ0JBQ04sSUFBSSxHQUFHLGdCQUNQLElBQUksSUFBSSxnQkFDUixJQUFJLElBQUksV0FDZCxJQUFJLElBQUksa0JBQ0EsRUFBRSxJQUFJLGdCQUNSLEdBQUcsSUFBSSxVQUNiLElBQUksSUFBSSxXQUNSLEVBQUUsSUFBSSxjQUNGLElBQUksSUFBSSxhQUNWLElBQUksR0FBRyxlQUNILEdBQUcsSUFBSSxhQUNYLElBQUksSUFBSSxZQUNSLElBQUksSUFBSSxZQUNSLElBQUksSUFBSSxpQkFDSixJQUFJLElBQUksYUFDWixJQUFJLElBQUksZ0JBQ0YsSUFBSSxJQUFJLEtBR3JCdkIsbUJBQ0osSUFBSyxJQUFJbHFFLE9BQU95ckUsNEJBQ0VyeEQsS0FBSzhHLFVBQVV1cUQsWUFBWXpyRSxPQUFTQSxJQ3RyQnRELElBQUk2UyxRQUFVLGtCQUNKLElBQUk2NEQsV0FHZCxJQUFLLElBQUlyc0UsUUFBUXNzRSxZQUFhLFNBRXBCdHNFLEtBQU8sT0FBVyxTQUFTQSxVQUUxQixTQUFTeUksU0FDSSxpQkFBUEEsTUFDSGxHLE1BQU10RSxVQUFVb08sTUFBTTNOLEtBQUsyRCxZQUM1QmlxRSxZQUFZdHNFLEdBQU15SSxJQUxILENBT3ZCekksVUFFQ3VzRSxLQUFPLGNBQWMzd0UsS0FBS29FLE1BQzFCMnVCLEtBQU80OUMsS0FBSyxHQUNacm9ELEdBQUtxb0QsS0FBSyxXQUdONTlDLE1BQVFuYixRQUFRbWIsa0JBRWhCQSxNQUFNekssSUFBTTFRLFFBQVF4VCxNQUFTLFNBQVNBLFVBQ3JDLFNBQVN5SSxHQUNJLGlCQUFQQSxNQUNIbEcsTUFBTXRFLFVBQVVvTyxNQUFNM04sS0FBSzJELGdCQUUvQm1mLEVBQU04cUQsWUFBWXRzRSxHQUFNeUksTUFDVixpQkFBUCtZLFFBQTJCbGpCLElBQVJrakIsU0FDckJBLE1BRUosSUFBSTFDLEVBQUksRUFBR0EsRUFBSTBDLEVBQUkvZixPQUFRcWQsTUFDMUJBLEdBQUs5YyxLQUFLd3FFLE1BQU1ockQsRUFBSTFDLFdBQ25CMEMsR0FYMEIsQ0FhbEN4aEIsTUFLTCxJQUFJcXNFLFVBQVksZ0JBQ1JJLFVBS1JKLFVBQVVwdUUsVUFBVXl1RSxXQUFhLFNBQVNDLEVBQU83cUUsT0FDMUMrUCxFQUFTL1AsRUFBSyxlQUNIeEQsSUFBWHVULEVBRU1oWCxLQUFLK3hFLFVBQVVELElBR0osaUJBQVY5NkQsTUFDQ3RQLE1BQU10RSxVQUFVb08sTUFBTTNOLEtBQUtvRCxJQUdoQ2pILEtBQUtneUUsVUFBVUYsRUFBTzk2RCxLQUloQ3c2RCxVQUFVcHVFLFVBQVU0dUUsVUFBWSxTQUFTRixFQUFPOTZELGVBQ3hDODZELE1BQVFBLE9BQ1JGLGNBQ0FBLE1BQU1FLEdBQVM5NkQsRUFDYmhYLE1BTVZ3eEUsVUFBVXB1RSxVQUFVMnVFLFVBQVksU0FBU0QsT0FDbENHLEVBQU9qeUUsS0FBSzR4RSxNQUFNRSxPQUNqQkcsRUFBTSxLQUNKQyxFQUFTbHlFLEtBQUs4eEUsTUFDZGgrQyxFQUFPOXpCLEtBQUs0eEUsTUFBTU0sS0FDZnY1RCxRQUFRdTVELEdBQVFKLEdBQU9oK0MsUUFFekI4OUMsTUFBTUUsR0FBU0csU0FFakJBLElBR1IsTUFBTyxNQUFPLE1BQU8sT0FBUSxXQUFXMy9ELFFBQVEsU0FBU3cvRCxhQUM3QzF1RSxVQUFVMHVFLEdBQVMsU0FBU0csVUFDNUJqeUUsS0FBSzZ4RSxXQUFXQyxFQUFPdHFFLGNBSXBDLGlCQUFpQm1SLDhCQ3hGRixJQUFLLElBQUssbUJBQ1AsSUFBSyxJQUFLLFdBQ2xCLEVBQUcsSUFBSyxpQkFDRixJQUFLLElBQUssWUFDZixJQUFLLElBQUssWUFDVixJQUFLLElBQUssYUFDVCxJQUFLLElBQUssWUFDWCxFQUFHLEVBQUcsbUJBQ0csSUFBSyxJQUFLLFdBQ3BCLEVBQUcsRUFBRyxpQkFDQSxJQUFLLEdBQUksWUFDZCxJQUFLLEdBQUksZUFDTCxJQUFLLElBQUssZ0JBQ1YsR0FBSSxJQUFLLGlCQUNSLElBQUssSUFBSyxjQUNYLElBQUssSUFBSyxXQUNkLElBQUssSUFBSyxvQkFDRCxJQUFLLElBQUssZUFDaEIsSUFBSyxJQUFLLGNBQ1gsSUFBSyxHQUFJLFVBQ1osRUFBRyxJQUFLLGVBQ0osRUFBRyxFQUFHLGVBQ04sRUFBRyxJQUFLLG9CQUNILElBQUssSUFBSyxjQUNmLElBQUssSUFBSyxnQkFDVCxFQUFHLElBQUssYUFDVCxJQUFLLElBQUssZ0JBQ1QsSUFBSyxJQUFLLGtCQUNSLElBQUssRUFBRyxxQkFDTCxHQUFJLElBQUssZ0JBQ2IsSUFBSyxJQUFLLGVBQ1YsSUFBSyxHQUFJLGNBQ1osSUFBSyxFQUFHLGVBQ0wsSUFBSyxJQUFLLG1CQUNSLElBQUssSUFBSyxvQkFDVCxHQUFJLEdBQUksb0JBQ1IsR0FBSSxHQUFJLG1CQUNSLEdBQUksR0FBSSxtQkFDUixFQUFHLElBQUssaUJBQ1gsSUFBSyxFQUFHLGVBQ1YsSUFBSyxHQUFJLGtCQUNOLEVBQUcsSUFBSyxjQUNaLElBQUssSUFBSyxjQUNWLElBQUssSUFBSyxpQkFDUCxHQUFJLElBQUssZ0JBQ1YsSUFBSyxHQUFJLGlCQUNQLElBQUssSUFBSyxrQkFDVixHQUFJLElBQUssYUFDYixJQUFLLEVBQUcsZ0JBQ04sSUFBSyxJQUFLLGlCQUNULElBQUssSUFBSyxXQUNoQixJQUFLLElBQUssY0FDTCxJQUFLLElBQUssVUFDZixJQUFLLElBQUssWUFDVCxFQUFHLElBQUssZ0JBQ0YsSUFBSyxJQUFLLFVBQ2pCLElBQUssSUFBSyxlQUNOLElBQUssSUFBSyxjQUNYLElBQUssSUFBSyxnQkFDUixJQUFLLEdBQUksWUFDWixHQUFJLEVBQUcsWUFDUixJQUFLLElBQUssWUFDVixJQUFLLElBQUssZUFDUCxJQUFLLElBQUssb0JBQ0wsSUFBSyxJQUFLLGdCQUNkLElBQUssSUFBSyxpQkFDUCxJQUFLLElBQUssZ0JBQ2IsSUFBSyxJQUFLLGlCQUNULElBQUssSUFBSyxnQkFDWCxJQUFLLElBQUssMkJBQ0MsSUFBSyxJQUFLLGdCQUNyQixJQUFLLElBQUssaUJBQ1QsSUFBSyxJQUFLLGdCQUNYLElBQUssSUFBSyxnQkFDVixJQUFLLElBQUssa0JBQ1IsSUFBSyxJQUFLLG9CQUNSLEdBQUksSUFBSyxtQkFDVixJQUFLLElBQUsscUJBQ1IsSUFBSyxJQUFLLHFCQUNWLElBQUssSUFBSyxxQkFDVixJQUFLLElBQUssa0JBQ2IsSUFBSyxJQUFLLFdBQ2pCLEVBQUcsSUFBSyxjQUNILEdBQUksSUFBSyxXQUNiLElBQUssSUFBSyxjQUNSLElBQUssRUFBRyxhQUNULElBQUssRUFBRyxxQkFDRSxJQUFLLElBQUssaUJBQ2hCLEVBQUcsRUFBRyxtQkFDSixJQUFLLEdBQUksbUJBQ1QsSUFBSyxJQUFLLHFCQUNSLEdBQUksSUFBSyxzQkFDUixJQUFLLElBQUssd0JBQ1IsRUFBRyxJQUFLLHNCQUNWLEdBQUksSUFBSyxzQkFDVCxJQUFLLEdBQUksbUJBQ1osR0FBSSxHQUFJLGdCQUNYLElBQUssSUFBSyxnQkFDVixJQUFLLElBQUssZUFDWCxJQUFLLElBQUssa0JBQ1AsSUFBSyxJQUFLLFdBQ2pCLEVBQUcsRUFBRyxjQUNILElBQUssSUFBSyxZQUNaLElBQUssSUFBSyxjQUNOLElBQUssSUFBSyxZQUNiLElBQUssSUFBSyxjQUNQLElBQUssR0FBSSxXQUNaLElBQUssSUFBSyxvQkFDSCxJQUFLLElBQUssZ0JBQ2QsSUFBSyxJQUFLLG9CQUNOLElBQUssSUFBSyxvQkFDVixJQUFLLElBQUssaUJBQ2IsSUFBSyxJQUFLLGdCQUNYLElBQUssSUFBSyxXQUNmLElBQUssSUFBSyxVQUNWLElBQUssSUFBSyxXQUNWLElBQUssSUFBSyxpQkFDSixJQUFLLElBQUssYUFDZCxJQUFLLEVBQUcsb0JBQ0QsSUFBSyxHQUFJLFVBQ25CLElBQUssRUFBRyxjQUNGLElBQUssSUFBSyxnQkFDVixHQUFJLElBQUssa0JBQ1AsSUFBSyxHQUFJLFlBQ2QsSUFBSyxJQUFLLGlCQUNOLElBQUssSUFBSyxjQUNaLEdBQUksSUFBSyxjQUNULElBQUssSUFBSyxhQUNaLElBQUssR0FBSSxZQUNULElBQUssSUFBSyxjQUNULElBQUssSUFBSyxnQkFDUixJQUFLLEdBQUksZ0JBQ1QsSUFBSyxJQUFLLGdCQUNWLElBQUssSUFBSyxXQUNmLElBQUssSUFBSyxrQkFDSCxFQUFHLElBQUssZ0JBQ1YsR0FBSSxJQUFLLFVBQ2YsSUFBSyxJQUFLLFdBQ1QsRUFBRyxJQUFLLGNBQ0wsSUFBSyxJQUFLLGFBQ1gsSUFBSyxHQUFJLGVBQ04sR0FBSSxJQUFLLGFBQ1osSUFBSyxJQUFLLFlBQ1gsSUFBSyxJQUFLLFlBQ1YsSUFBSyxJQUFLLGlCQUNMLElBQUssSUFBSyxhQUNkLElBQUssSUFBSyxnQkFDTCxJQUFLLElBQUssMEJDbEpmdzVELGdCQUNBQyxlQUNEQyxjQUNBQyxjQUNBQyxnQkFDRUMsbUJBRUNDLG9CQUNBQyxxQkFDQ0MseUJBQ0dDLDZCQUNDQyx5QkFDTEMscUJBQ0NDLHFCQUNEQyxrQkFDRjFCLFNBR1osU0FBU2EsUUFBUXJxRSxNQUNUQSxPQVNEK25FLEdBQU8sRUFBRyxFQUFHLEdBQ2JobkQsRUFBSSxFQUNKem5CLEVBQVEwRyxFQUFPMUcsTUFSUCwwQkFTUjZ4RSxFQUFXLE1BQ1g3eEUsRUFBTyxNQUNBQSxFQUFNLElBQ0csT0FDWixJQUFJNmlCLEVBQUksRUFBR0EsRUFBSTRyRCxFQUFJanBFLE9BQVFxZCxNQUN6QkEsR0FBSzZ2QixTQUFTMXlDLEVBQU02aUIsR0FBSzdpQixFQUFNNmlCLEdBQUksSUFFdENndkQsTUFDRzlyRSxLQUFLd3FFLE1BQU83OUIsU0FBU20vQixFQUFXQSxFQUFVLElBQU0sSUFBTyxLQUFPLFVBR25FLEdBQUk3eEUsRUFBUTBHLEVBQU8xRyxNQW5CYix5Q0FtQnlCLEdBQ3RCQSxFQUFNLEtBQ1RBLEVBQU0sT0FDTDZpQixFQUFJLEVBQUdBLEVBQUk0ckQsRUFBSWpwRSxPQUFRcWQsTUFDekJBLEdBQUs2dkIsU0FBUzF5QyxFQUFNb1EsTUFBVSxFQUFKeVMsRUFBVyxFQUFKQSxFQUFRLEdBQUksSUFFaERndkQsTUFDRzlyRSxLQUFLd3FFLE1BQU83OUIsU0FBU20vQixFQUFVLElBQU0sSUFBTyxLQUFPLFVBR3hELEdBQUk3eEUsRUFBUTBHLEVBQU8xRyxNQTVCYiw0RkE0QjBCLEtBQ3pCNmlCLEVBQUksRUFBR0EsRUFBSTRyRCxFQUFJanBFLE9BQVFxZCxNQUN6QkEsR0FBSzZ2QixTQUFTMXlDLEVBQU02aUIsRUFBSSxNQUUzQjJDLFdBQVd4bEIsRUFBTSxTQUVuQixHQUFJQSxFQUFRMEcsRUFBTzFHLE1BakNkLDhHQWlDMEIsS0FDeEI2aUIsRUFBSSxFQUFHQSxFQUFJNHJELEVBQUlqcEUsT0FBUXFkLE1BQ3pCQSxHQUFLOWMsS0FBS3dxRSxNQUFpQyxLQUEzQi9xRCxXQUFXeGxCLEVBQU02aUIsRUFBSSxPQUV4QzJDLFdBQVd4bEIsRUFBTSxTQUVuQixHQUFJQSxFQUFRMEcsRUFBTzFHLE1BdENWLFNBc0MwQixJQUNyQixlQUFaQSxFQUFNLFVBQ0MsRUFBRyxFQUFHLEVBQUcsVUFFZDh4RSxVQUFXOXhFLEVBQU0sZ0JBTWpCNmlCLEVBQUksRUFBR0EsRUFBSTRyRCxFQUFJanBFLE9BQVFxZCxNQUN6QkEsR0FBS2t2RCxNQUFNdEQsRUFBSTVyRCxHQUFJLEVBQUcsY0FFeEI0RSxHQUFVLEdBQUxBLEVBSUhzcUQsTUFBTXRxRCxFQUFHLEVBQUcsR0FIWixJQUtILEdBQUtBLEVBQ0ZnbkQsR0FHVixTQUFTdUMsUUFBUXRxRSxNQUNUQSxPQUlEMUcsRUFBUTBHLEVBQU8xRyxNQURULCtHQUVOQSxFQUFPLEtBQ0pneUUsRUFBUXhzRCxXQUFXeGxCLEVBQU0sV0FDckIreEUsTUFBTXIvQixTQUFTMXlDLEVBQU0sSUFBSyxFQUFHLEtBQzdCK3hFLE1BQU12c0QsV0FBV3hsQixFQUFNLElBQUssRUFBRyxLQUMvQit4RSxNQUFNdnNELFdBQVd4bEIsRUFBTSxJQUFLLEVBQUcsS0FDL0IreEUsTUFBTWpzRCxNQUFNa3NELEdBQVMsRUFBSUEsRUFBTyxFQUFHLE1BS2pELFNBQVNiLE9BQU96cUUsTUFDUkEsT0FJRDFHLEVBQVEwRyxFQUFPMUcsTUFEVCw2R0FFTkEsRUFBTyxLQUNOZ3lFLEVBQVF4c0QsV0FBV3hsQixFQUFNLFdBQ25CK3hFLE1BQU1yL0IsU0FBUzF5QyxFQUFNLElBQUssRUFBRyxLQUM3Qit4RSxNQUFNdnNELFdBQVd4bEIsRUFBTSxJQUFLLEVBQUcsS0FDL0IreEUsTUFBTXZzRCxXQUFXeGxCLEVBQU0sSUFBSyxFQUFHLEtBQy9CK3hFLE1BQU1qc0QsTUFBTWtzRCxHQUFTLEVBQUlBLEVBQU8sRUFBRyxNQUtqRCxTQUFTZixPQUFPdnFFLE9BQ1R1ckUsRUFBT2xCLFFBQVFycUUsVUFDWnVyRSxHQUFRQSxFQUFLN2hFLE1BQU0sRUFBRyxHQUdoQyxTQUFTOGdFLE9BQU94cUUsT0FDVndyRSxFQUFPbEIsUUFBUXRxRSxVQUNad3JFLEdBQVFBLEVBQUs5aEUsTUFBTSxFQUFHLEdBRy9CLFNBQVNnaEUsU0FBUzFxRSxPQUNYbXFFLEVBQU9FLFFBQVFycUUsVUFDZm1xRSxFQUNNQSxFQUFLLElBRU5BLEVBQU9HLFFBQVF0cUUsSUFDZG1xRSxFQUFLLElBRU5BLEVBQU9NLE9BQU96cUUsSUFDYm1xRSxFQUFLLFFBRFYsRUFNUixTQUFTUSxVQUFVWSxFQUFNeHFELEdBQ2xCQSxPQUFXcGxCLElBQU5vbEIsR0FBbUMsSUFBaEJ3cUQsRUFBS3pzRSxPQUFnQmlpQixFQUFJd3FELEVBQUssU0FDbkQsSUFBTUUsVUFBVUYsRUFBSyxJQUNmRSxVQUFVRixFQUFLLElBQ2ZFLFVBQVVGLEVBQUssS0FFYnhxRCxHQUFLLEdBQUtBLEVBQUksRUFDYjBxRCxVQUFVcHNFLEtBQUt3cUUsTUFBVSxJQUFKOW9ELElBQ3JCLElBSW5CLFNBQVM2cEQsVUFBVVcsRUFBTUQsVUFDbEJBLEVBQVEsR0FBTUMsRUFBSyxJQUFNQSxFQUFLLEdBQUssRUFDN0JWLFdBQVdVLEVBQU1ELEdBRXBCLE9BQVNDLEVBQUssR0FBSyxLQUFPQSxFQUFLLEdBQUssS0FBT0EsRUFBSyxHQUFLLElBRy9ELFNBQVNWLFdBQVdVLEVBQU1ELGVBQ1QzdkUsSUFBVjJ2RSxXQUNvQjN2RSxJQUFaNHZFLEVBQUssR0FBbUJBLEVBQUssR0FBSyxHQUV2QyxRQUFVQSxFQUFLLEdBQUssS0FBT0EsRUFBSyxHQUFLLEtBQU9BLEVBQUssR0FDOUMsS0FBT0QsRUFBUSxJQUc1QixTQUFTUixjQUFjUyxFQUFNRCxVQUN0QkEsRUFBUSxHQUFNQyxFQUFLLElBQU1BLEVBQUssR0FBSyxFQUM3QlIsZUFBZVEsRUFBTUQsR0FNeEIsT0FKQ2pzRSxLQUFLd3FFLE1BQU0wQixFQUFLLEdBQUcsSUFBTSxLQUliLE1BSFpsc0UsS0FBS3dxRSxNQUFNMEIsRUFBSyxHQUFHLElBQU0sS0FHRCxNQUZ4QmxzRSxLQUFLd3FFLE1BQU0wQixFQUFLLEdBQUcsSUFBTSxLQUVXLEtBRy9DLFNBQVNSLGVBQWVRLEVBQU1ELFNBSXBCLFFBSENqc0UsS0FBS3dxRSxNQUFNMEIsRUFBSyxHQUFHLElBQU0sS0FHWixNQUZibHNFLEtBQUt3cUUsTUFBTTBCLEVBQUssR0FBRyxJQUFNLEtBRUEsTUFEekJsc0UsS0FBS3dxRSxNQUFNMEIsRUFBSyxHQUFHLElBQU0sS0FDWSxPQUFTRCxHQUFTQyxFQUFLLElBQU0sR0FBSyxJQUdsRixTQUFTUCxVQUFVUSxFQUFNRixVQUNsQkEsRUFBUSxHQUFNRSxFQUFLLElBQU1BLEVBQUssR0FBSyxFQUM3QlAsV0FBV08sRUFBTUYsR0FFcEIsT0FBU0UsRUFBSyxHQUFLLEtBQU9BLEVBQUssR0FBSyxNQUFRQSxFQUFLLEdBQUssS0FHaEUsU0FBU1AsV0FBV08sRUFBTUYsZUFDVDN2RSxJQUFWMnZFLFdBQ29CM3ZFLElBQVo2dkUsRUFBSyxHQUFtQkEsRUFBSyxHQUFLLEdBRXZDLFFBQVVBLEVBQUssR0FBSyxLQUFPQSxFQUFLLEdBQUssTUFBUUEsRUFBSyxHQUFLLE1BQ3BERixFQUFRLElBS3JCLFNBQVNKLFVBQVVwQyxFQUFLd0MsZUFDUDN2RSxJQUFWMnZFLFdBQ21CM3ZFLElBQVhtdEUsRUFBSSxHQUFtQkEsRUFBSSxHQUFLLEdBRXJDLE9BQVNBLEVBQUksR0FBSyxLQUFPQSxFQUFJLEdBQUssTUFBUUEsRUFBSSxHQUFLLFVBQ3JDbnRFLElBQVYydkUsR0FBaUMsSUFBVkEsRUFBYyxLQUFPQSxFQUFRLElBQU0sSUFHeEUsU0FBUzlCLFFBQVF6QixVQUNSMkQsYUFBYTNELEVBQUlyK0QsTUFBTSxFQUFHLElBSW5DLFNBQVMyaEUsTUFBTU0sRUFBS3R4RCxFQUFLL2EsVUFDZkQsS0FBS2diLElBQUloYixLQUFLQyxJQUFJK2EsRUFBS3N4RCxHQUFNcnNFLEdBR3ZDLFNBQVNtc0UsVUFBVUUsT0FDYnJzRCxFQUFNcXNELEVBQUlud0UsU0FBUyxJQUFJK2tCLHFCQUNuQmpCLEVBQUl4Z0IsT0FBUyxFQUFLLElBQU13Z0IsRUFBTUEsRUFLeEMsSUFBSW9zRCxnQkFDSixJQUFLLElBQUluekUsUUFBUTZ5RSx1QkFDREEsVUFBVzd5RSxPQUFTQSxLQ3ZPcEMsSUFBSXF6RSxNQUFRLFNBQVJBLEVBQWtCcHRELFVBQ2pCQSxhQUFlb3RELEVBQ1hwdEQsRUFFRnRtQixnQkFBZ0IwekUsUUFJakJwOEMsT0FBUSxPQUNSdGdCLGFBQ0UsRUFBRyxFQUFHLFFBQ04sRUFBRyxFQUFHLFFBQ04sRUFBRyxFQUFHLFFBQ04sRUFBRyxFQUFHLFNBQ0wsRUFBRyxFQUFHLEVBQUcsU0FDVCxRQUtXLGlCQUFSc1AsS0FDSHhlLFlBQU9xcUUsUUFBUTdyRCxTQUVoQjByRCxVQUFVLE1BQU9DLElBQ1pBLEVBQU9ucUUsWUFBT3NxRSxRQUFROXJELFNBQzNCMHJELFVBQVUsTUFBT0MsSUFDWkEsRUFBT25xRSxZQUFPeXFFLE9BQU9qc0QsVUFDMUIwckQsVUFBVSxNQUFPQyxHQUVFLHFCQUFSM3JELHNCQUFBQSxXQUVGN2lCLE9BRFI2aUIsR0FDRTRqRCxRQUFnQ3ptRSxJQUFid3VFLEVBQUswQixTQUMzQjNCLFVBQVUsTUFBT0MsUUFDRHh1RSxJQUFYd3VFLEVBQUtucEQsUUFBc0NybEIsSUFBbkJ3dUUsRUFBSzJCLGVBQ2xDNUIsVUFBVSxNQUFPQyxRQUNEeHVFLElBQVh3dUUsRUFBS2hzRCxRQUFrQ3hpQixJQUFmd3VFLEVBQUt0dUUsV0FDbENxdUUsVUFBVSxNQUFPQyxRQUNEeHVFLElBQVh3dUUsRUFBSzRCLFFBQXNDcHdFLElBQW5Cd3VFLEVBQUs2QixlQUNsQzlCLFVBQVUsTUFBT0MsUUFDRHh1RSxJQUFYd3VFLEVBQUs3cEQsUUFBaUMza0IsSUFBZHd1RSxFQUFLOEIsV0FDbEMvQixVQUFVLE9BQVFDLE1BbkNqQixJQUFJeUIsRUFBTXB0RCxPQWNkMnJELEdBMEJMeUIsTUFBTXR3RSxtQkFDSSxrQkFDRHBELEtBQUtzM0IsV0FFUixrQkFDR3QzQixLQUFLZzBFLFNBQVMsTUFBT3hzRSxnQkFFeEIsa0JBQ0d4SCxLQUFLZzBFLFNBQVMsTUFBT3hzRSxnQkFFeEIsa0JBQ0d4SCxLQUFLZzBFLFNBQVMsTUFBT3hzRSxnQkFFeEIsa0JBQ0d4SCxLQUFLZzBFLFNBQVMsTUFBT3hzRSxpQkFFdkIsa0JBQ0V4SCxLQUFLZzBFLFNBQVMsT0FBUXhzRSxxQkFHcEIsa0JBQ0Z4SCxLQUFLZ1gsT0FBTzY0RCxjQUVWLGtCQUNGN3ZFLEtBQUtnWCxPQUFPbTVELGNBRVYsa0JBQ0Zud0UsS0FBS2dYLE9BQU91NUQsY0FFVixlQUNMdjVELEVBQVNoWCxLQUFLZ1gsY0FDRyxJQUFqQkEsRUFBT284RCxNQUNIcDhELEVBQU80NUQsSUFBSWx1RCxRQUFRMUwsRUFBT284RCxRQUUzQnA4RCxFQUFPNDVELGVBRUosa0JBQ0g1d0UsS0FBS2dYLE9BQU9nNkQsZ0JBRVQsZUFDTmg2RCxFQUFTaFgsS0FBS2dYLGNBQ1hBLEVBQU82NEQsSUFBSW50RCxRQUFRMUwsRUFBT284RCxtQkFFdkIsZUFDTnA4RCxFQUFTaFgsS0FBS2dYLGNBQ1hBLEVBQU9tNUQsSUFBSXp0RCxRQUFRMUwsRUFBT284RCxlQUUzQixTQUFVenNELGVBQ0psakIsSUFBUmtqQixFQUNJM21CLEtBQUtnWCxPQUFPbzhELFlBRWZwQixVQUFVLFFBQVNyckQsR0FDakIzbUIsV0FHSCxTQUFVMm1CLFVBQ1AzbUIsS0FBS2kwRSxXQUFXLE1BQU8sRUFBR3R0RCxVQUUzQixTQUFVQSxVQUNUM21CLEtBQUtpMEUsV0FBVyxNQUFPLEVBQUd0dEQsU0FFNUIsU0FBVUEsVUFDUjNtQixLQUFLaTBFLFdBQVcsTUFBTyxFQUFHdHRELFFBRTdCLFNBQVVBLFVBQ1ZBLFVBQ0ksS0FDSyxFQUFJLElBQU1BLEVBQU1BLEdBRXRCM21CLEtBQUtpMEUsV0FBVyxNQUFPLEVBQUd0dEQsZUFFdEIsU0FBVUEsVUFDZDNtQixLQUFLaTBFLFdBQVcsTUFBTyxFQUFHdHRELGNBRXZCLFNBQVVBLFVBQ2IzbUIsS0FBS2kwRSxXQUFXLE1BQU8sRUFBR3R0RCxnQkFFckIsU0FBVUEsVUFDZjNtQixLQUFLaTBFLFdBQVcsTUFBTyxFQUFHdHRELGNBRXZCLFNBQVVBLFVBQ2IzbUIsS0FBS2kwRSxXQUFXLE1BQU8sRUFBR3R0RCxjQUV2QixTQUFVQSxVQUNiM21CLEtBQUtpMEUsV0FBVyxNQUFPLEVBQUd0dEQsVUFFM0IsU0FBVUEsVUFDVDNtQixLQUFLaTBFLFdBQVcsTUFBTyxFQUFHdHRELFNBRTVCLFNBQVVBLFVBQ1IzbUIsS0FBS2kwRSxXQUFXLE9BQVEsRUFBR3R0RCxZQUUxQixTQUFVQSxVQUNYM21CLEtBQUtpMEUsV0FBVyxPQUFRLEVBQUd0dEQsV0FFM0IsU0FBVUEsVUFDVjNtQixLQUFLaTBFLFdBQVcsT0FBUSxFQUFHdHRELFVBRTVCLFNBQVVBLFVBQ1QzbUIsS0FBS2kwRSxXQUFXLE9BQVEsRUFBR3R0RCxjQUd4QixrQkFDSDdlLFlBQU8ycUUsVUFBVXp5RSxLQUFLZ1gsT0FBTzY0RCxnQkFFMUIsa0JBQ0gvbkUsWUFBTzRxRSxVQUFVMXlFLEtBQUtnWCxPQUFPNjRELElBQUs3dkUsS0FBS2dYLE9BQU9vOEQsbUJBRTFDLGtCQUNKdHJFLFlBQU82cUUsV0FBVzN5RSxLQUFLZ1gsT0FBTzY0RCxJQUFLN3ZFLEtBQUtnWCxPQUFPbzhELHNCQUV4QyxrQkFDUHRyRSxZQUFPOHFFLGNBQWM1eUUsS0FBS2dYLE9BQU82NEQsSUFBSzd2RSxLQUFLZ1gsT0FBT284RCxrQkFFL0Msa0JBQ0h0ckUsWUFBT2dyRSxVQUFVOXlFLEtBQUtnWCxPQUFPbTVELElBQUtud0UsS0FBS2dYLE9BQU9vOEQsbUJBRTFDLGtCQUNKdHJFLFlBQU9pckUsV0FBVy95RSxLQUFLZ1gsT0FBT201RCxJQUFLbndFLEtBQUtnWCxPQUFPbzhELGtCQUU1QyxrQkFDSHRyRSxZQUFPa3JFLFVBQVVoekUsS0FBS2dYLE9BQU80NUQsSUFBSzV3RSxLQUFLZ1gsT0FBT284RCxnQkFFN0Msa0JBQ0R0ckUsWUFBT3dwRSxRQUFRdHhFLEtBQUtnWCxPQUFPNjRELElBQUs3dkUsS0FBS2dYLE9BQU9vOEQsa0JBR3pDLGVBQ052RCxFQUFNN3ZFLEtBQUtnWCxPQUFPNjRELFdBQ2RBLEVBQUksSUFBTSxHQUFPQSxFQUFJLElBQU0sRUFBS0EsRUFBSSxlQUdqQyxtQkFFUEEsRUFBTTd2RSxLQUFLZ1gsT0FBTzY0RCxJQUNsQnFFLEtBQ0tqd0QsRUFBSSxFQUFHQSxFQUFJNHJELEVBQUlqcEUsT0FBUXFkLElBQUssS0FDaENrd0QsRUFBT3RFLEVBQUk1ckQsR0FBSyxNQUNoQkEsR0FBTWt3RCxHQUFRLE9BQVdBLEVBQU8sTUFBUWh0RSxLQUFLbWlFLEtBQU02SyxFQUFPLE1BQVMsTUFBUSxXQUV6RSxNQUFTRCxFQUFJLEdBQUssTUFBU0EsRUFBSSxHQUFLLE1BQVNBLEVBQUksYUFHL0MsU0FBVUUsT0FFZkMsRUFBT3IwRSxLQUFLczBFLGFBQ1pDLEVBQU9ILEVBQU9FLG9CQUNkRCxFQUFPRSxHQUNGRixFQUFPLE1BQVNFLEVBQU8sTUFFeEJBLEVBQU8sTUFBU0YsRUFBTyxZQUd6QixTQUFVRCxPQUNaSSxFQUFnQngwRSxLQUFLeTBFLFNBQVNMLFVBQzlCSSxHQUFpQixJQUNiLE1BR0FBLEdBQWlCLElBQU8sS0FBTyxTQUdsQyxlQUVEM0UsRUFBTTd2RSxLQUFLZ1gsT0FBTzY0RCxXQUNGLElBQVRBLEVBQUksR0FBb0IsSUFBVEEsRUFBSSxHQUFvQixJQUFUQSxFQUFJLElBQVksSUFDNUMsV0FHUCxrQkFDRTd2RSxLQUFLMDBFLGVBR04sbUJBQ0g3RSxLQUNLNXJELEVBQUksRUFBR0EsRUFBSSxFQUFHQSxNQUNsQkEsR0FBSyxJQUFNamtCLEtBQUtnWCxPQUFPNjRELElBQUk1ckQsZUFFM0IrdEQsVUFBVSxNQUFPbkMsR0FDZjd2RSxjQUdDLFNBQVUrd0UsT0FDZFosRUFBTW53RSxLQUFLZ1gsT0FBT201RCxhQUNsQixJQUFNQSxFQUFJLEdBQUtZLE9BQ2RpQixVQUFVLE1BQU83QixHQUNmbndFLGFBR0EsU0FBVSt3RSxPQUNiWixFQUFNbndFLEtBQUtnWCxPQUFPbTVELGFBQ2xCLElBQU1BLEVBQUksR0FBS1ksT0FDZGlCLFVBQVUsTUFBTzdCLEdBQ2Zud0UsZUFHRSxTQUFVK3dFLE9BQ2ZaLEVBQU1ud0UsS0FBS2dYLE9BQU9tNUQsYUFDbEIsSUFBTUEsRUFBSSxHQUFLWSxPQUNkaUIsVUFBVSxNQUFPN0IsR0FDZm53RSxpQkFHSSxTQUFVK3dFLE9BQ2pCWixFQUFNbndFLEtBQUtnWCxPQUFPbTVELGFBQ2xCLElBQU1BLEVBQUksR0FBS1ksT0FDZGlCLFVBQVUsTUFBTzdCLEdBQ2Zud0UsYUFHQSxTQUFVK3dFLE9BQ2JILEVBQU01d0UsS0FBS2dYLE9BQU80NUQsYUFDbEIsSUFBTUEsRUFBSSxHQUFLRyxPQUNkaUIsVUFBVSxNQUFPcEIsR0FDZjV3RSxjQUdDLFNBQVUrd0UsT0FDZEgsRUFBTTV3RSxLQUFLZ1gsT0FBTzQ1RCxhQUNsQixJQUFNQSxFQUFJLEdBQUtHLE9BQ2RpQixVQUFVLE1BQU9wQixHQUNmNXdFLGdCQUdHLGVBQ042dkUsRUFBTTd2RSxLQUFLZ1gsT0FBTzY0RCxJQUVsQmxwRCxFQUFlLEdBQVRrcEQsRUFBSSxHQUFvQixJQUFUQSxFQUFJLEdBQXFCLElBQVRBLEVBQUksZUFDeENtQyxVQUFVLE9BQVFyckQsRUFBS0EsRUFBS0EsSUFDMUIzbUIsY0FHQyxTQUFVK3dFLE9BQ2RxQyxFQUFRcHpFLEtBQUtnWCxPQUFPbzhELGtCQUNuQnBCLFVBQVUsUUFBU29CLEVBQVNBLEVBQVFyQyxHQUNsQy93RSxjQUdDLFNBQVUrd0UsT0FDZHFDLEVBQVFwekUsS0FBS2dYLE9BQU9vOEQsa0JBQ25CcEIsVUFBVSxRQUFTb0IsRUFBU0EsRUFBUXJDLEdBQ2xDL3dFLGFBR0EsU0FBVTIwRSxPQUNieEUsRUFBTW53RSxLQUFLZ1gsT0FBT201RCxJQUNsQnlFLEdBQU96RSxFQUFJLEdBQUt3RSxHQUFXLGFBQzNCLEdBQUtDLEVBQU0sRUFBSSxJQUFNQSxFQUFNQSxPQUMxQjVDLFVBQVUsTUFBTzdCLEdBQ2Zud0UsVUFPSCxTQUFVNjBFLEVBQVlDLE9BRXRCVixFQUFTUyxFQUNUajdDLE9BQWVuMkIsSUFBWHF4RSxFQUF1QixHQUFNQSxFQUVqQ2pCLEVBQUksRUFBSWo2QyxFQUFJLEVBQ1ovUSxFQUxTN29CLEtBS0VvekUsUUFBVWdCLEVBQU9oQixRQUU1QjJCLElBQVFsQixFQUFJaHJELElBQU8sRUFBS2dyRCxHQUFLQSxFQUFJaHJELElBQU0sRUFBSWdyRCxFQUFJaHJELElBQU0sR0FBSyxFQUMxRG1zRCxFQUFLLEVBQUlELFNBRU4vMEUsS0FDTDZ2RSxJQUNBa0YsRUFaVy8wRSxLQVlDMnpFLE1BQVFxQixFQUFLWixFQUFPVCxNQUNoQ29CLEVBYlcvMEUsS0FhQ2kxRSxRQUFVRCxFQUFLWixFQUFPYSxRQUNsQ0YsRUFkVy8wRSxLQWNDazFFLE9BQVNGLEVBQUtaLEVBQU9jLFFBRWpDOUIsTUFoQldwekUsS0FnQkVvekUsUUFBVXg1QyxFQUFJdzZDLEVBQU9oQixTQUFXLEVBQUl4NUMsWUFHNUMsa0JBQ0E1NUIsS0FBSzZ2RSxhQUdOLGVBUUZsc0UsRUFBT1ksRUFIUE4sRUFBUyxJQUFJeXZFLE1BQ2JudEUsRUFBU3ZHLEtBQUtnWCxPQUNkZ0ssRUFBUy9jLEVBQU8rUyxXQUdmLElBQUkwZixLQUFRbndCLEVBQ1pBLEVBQU8vRSxlQUFlazFCLE9BQ2pCbndCLEVBQU9td0IsR0FFRix5QkFERHB6QixTQUFTTyxLQUFLRixNQUVsQit5QixHQUFRL3lCLEVBQU02TixNQUFNLEdBQ1Isb0JBQVRqTixJQUNIbXlCLEdBQVEveUIsVUFFUHpCLE1BQU0sMEJBQTJCeUIsV0FLckNNLElBSVR5dkUsTUFBTXR3RSxVQUFVK3hFLGFBQ1QsTUFBTyxRQUFTLGFBQ2hCLE1BQU8sYUFBYyxrQkFDckIsTUFBTyxhQUFjLGNBQ3JCLE1BQU8sWUFBYSxtQkFDbkIsT0FBUSxVQUFXLFNBQVUsVUFHckN6QixNQUFNdHdFLFVBQVVneUUsWUFDVCxJQUFLLElBQUssVUFDVixJQUFLLElBQUssVUFDVixJQUFLLElBQUssVUFDVixJQUFLLElBQUssV0FDVCxJQUFLLElBQUssSUFBSyxNQUd2QjFCLE1BQU10d0UsVUFBVTJ1RSxVQUFZLFNBQVVELFdBQ2pDOTZELEVBQVNoWCxLQUFLZ1gsT0FDZGk3RCxLQUVLaHVELEVBQUksRUFBR0EsRUFBSTZ0RCxFQUFNbHJFLE9BQVFxZCxNQUM1QjZ0RCxFQUFNdnBELE9BQU90RSxJQUFNak4sRUFBTzg2RCxHQUFPN3RELFVBR2xCLElBQWpCak4sRUFBT284RCxVQUNMdnFELEVBQUk3UixFQUFPbzhELE9BSVZuQixHQUdSeUIsTUFBTXR3RSxVQUFVNHVFLFVBQVksU0FBVUYsRUFBT0csT0FLeENodUQsRUFrQ0FveEQsRUF0Q0FyK0QsRUFBU2hYLEtBQUtnWCxPQUNkbStELEVBQVNuMUUsS0FBS20xRSxPQUNkQyxFQUFRcDFFLEtBQUtvMUUsTUFDYmhDLEVBQVEsVUFHUDk3QyxPQUFRLEVBRUMsVUFBVnc2QyxJQUNLRyxPQUNGLEdBQUlBLEVBQUtyckUsU0FFUmtyRSxHQUFTRyxFQUFLemdFLE1BQU0sRUFBR3NnRSxFQUFNbHJFLFVBQzVCcXJFLEVBQUtILEVBQU1sckUsYUFDYixRQUE4Qm5ELElBQTFCd3VFLEVBQUtILEVBQU12cEQsT0FBTyxJQUFtQixLQUUxQ3RFLEVBQUksRUFBR0EsRUFBSTZ0RCxFQUFNbHJFLE9BQVFxZCxNQUN0QjZ0RCxHQUFPN3RELEdBQUtndUQsRUFBS0gsRUFBTXZwRCxPQUFPdEUsTUFHOUJndUQsRUFBS3BwRCxPQUNQLFFBQStCcGxCLElBQTNCd3VFLEVBQUtrRCxFQUFPckQsR0FBTyxJQUFtQixLQUU1Q3dELEVBQVFILEVBQU9yRCxPQUVkN3RELEVBQUksRUFBR0EsRUFBSTZ0RCxFQUFNbHJFLE9BQVFxZCxNQUN0QjZ0RCxHQUFPN3RELEdBQUtndUQsRUFBS3FELEVBQU1yeEQsTUFHdkJndUQsRUFBS21CLFdBR1BBLE1BQVFqc0UsS0FBS0MsSUFBSSxFQUFHRCxLQUFLZ2IsSUFBSSxPQUFjMWUsSUFBVjJ2RSxFQUFzQnA4RCxFQUFPbzhELE1BQVFBLElBRS9ELFVBQVZ0QixTQUNJLE1BTUg3dEQsRUFBSSxFQUFHQSxFQUFJNnRELEVBQU1sckUsT0FBUXFkLE1BQ3BCOWMsS0FBS0MsSUFBSSxFQUFHRCxLQUFLZ2IsSUFBSWl6RCxFQUFNdEQsR0FBTzd0RCxHQUFJak4sRUFBTzg2RCxHQUFPN3RELE9BQ3RENnRELEdBQU83dEQsR0FBSzljLEtBQUt3cUUsTUFBTTBELE9BSTFCLElBQUlFLEtBQVNKLEVBQ2JJLElBQVV6RCxNQUNOeUQsR0FBUzU4RCxhQUFRbTVELEdBQU95RCxHQUFPditELEVBQU84NkQsWUFJeEMsR0FHUjRCLE1BQU10d0UsVUFBVTR3RSxTQUFXLFNBQVVsQyxFQUFPN3FFLE9BQ3ZDZ3JFLEVBQU9ockUsRUFBSyxlQUVIeEQsSUFBVHd1RSxFQUVJanlFLEtBQUsreEUsVUFBVUQsSUFJSCxpQkFBVEcsTUFDSHZxRSxNQUFNdEUsVUFBVW9PLE1BQU0zTixLQUFLb0QsU0FHOUIrcUUsVUFBVUYsRUFBT0csR0FDZmp5RSxPQUdSMHpFLE1BQU10d0UsVUFBVTZ3RSxXQUFhLFNBQVVuQyxFQUFPbnJFLEVBQU9nZ0IsT0FDaEQ2dUQsRUFBVXgxRSxLQUFLZ1gsT0FBTzg2RCxlQUNkcnVFLElBQVJrakIsRUFFSTZ1RCxFQUFRN3VFLEdBQ0xnZ0IsSUFBUTZ1RCxFQUFRN3VFLEdBRW5CM0csUUFJQTJHLEdBQVNnZ0IsT0FDWnFyRCxVQUFVRixFQUFPMEQsR0FFZngxRSxPQUdjLG9CQUFYUSxnQkFDSGt6RSxNQUFRQSxPQUdoQixpQkFBaUJBLE1DaGVqQixTQUFTK0IsaUJBQWlCaHVFLEVBQU9pdUUsVUFDekJ0TyxVQUFRdU8sTUFBTWx1RSxFQUFPLFNBQVN3ZSxVQUM3QkEsRUFBRXl2RCxXQUFhQSxJQUl4QixTQUFTRSxhQUFhbnVFLEVBQU84L0QsS0FDdEJqMUQsUUFBUSxTQUFTMlQsRUFBR2hDLFlBQ3ZCNHhELFdBQWE1eEQsRUFDUmdDLE1BRUZoSSxLQUFLLFNBQVM0SyxFQUFHWSxPQUNsQmsrQyxFQUFLSixFQUFVOTlDLEVBQUlaLEVBQ25CKytDLEVBQUtMLEVBQVUxK0MsRUFBSVksU0FDaEJrK0MsRUFBR21OLFNBQVdsTixFQUFHa04sT0FDdkJuTixFQUFHa08sV0FBYWpPLEVBQUdpTyxXQUNuQmxPLEVBQUdtTixPQUFTbE4sRUFBR2tOLFdBRVh4aUUsUUFBUSxTQUFTMlQsVUFDZkEsRUFBRTR2RCxhQXdCWCxxQ0FTUyxTQUFTN1AsRUFBT24rQyxHQUNsQm0rQyxFQUFNOFAsVUFDSkEsWUFJRkMsVUFBWWx1RCxFQUFLa3VELFlBQWEsSUFDOUJMLFNBQVc3dEQsRUFBSzZ0RCxVQUFZLFFBQzVCWixPQUFTanRELEVBQUtpdEQsUUFBVSxJQUV2QmdCLE1BQU03b0UsS0FBSzRhLGNBUVAsU0FBU20rQyxFQUFPZ1EsT0FDdEJydkUsRUFBUXEvRCxFQUFNOFAsTUFBUTlQLEVBQU04UCxNQUFNaHVELFFBQVFrdUQsSUFBZSxHQUM5QyxJQUFYcnZFLEtBQ0dtdkUsTUFBTWxqRSxPQUFPak0sRUFBTyxjQVVqQixTQUFTcS9ELEVBQU9uK0MsRUFBTXRYLFdBSTVCbW1CLEVBSEFsd0IsR0FBUyxZQUFhLFdBQVksVUFDbENraEUsRUFBT2xoRSxFQUFNSSxPQUNicWQsRUFBSSxFQUdEQSxFQUFJeWpELElBQVF6akQsSUFDWHpkLEVBQU15ZCxHQUNUMVQsRUFBUS9PLGVBQWVrMUIsT0FDckJBLEdBQVFubUIsRUFBUW1tQixZQVloQixTQUFTc3ZDLEVBQU82RCxFQUFPQyxNQUN6QjlELE9BSURpUSxFQUFnQmpRLEVBQU16MUQsUUFBUTJsRSxXQUM5QkMsRUFBVS9PLFVBQVE3MkQsUUFBUTZsRSxVQUFVSCxFQUFjRSxTQUNsREUsRUFBY0YsRUFBUXBsQixLQUN0QnVsQixFQUFlSCxFQUFRMzBCLE1BQ3ZCKzBCLEVBQWFKLEVBQVFsbEIsSUFDckJ1bEIsRUFBZ0JMLEVBQVF4SyxPQUV4QjhLLEVBQVloQixpQkFBaUJ6UCxFQUFNOFAsTUFBTyxRQUMxQ1ksRUFBYWpCLGlCQUFpQnpQLEVBQU04UCxNQUFPLFNBQzNDYSxFQUFXbEIsaUJBQWlCelAsRUFBTThQLE1BQU8sT0FDekNjLEVBQWNuQixpQkFBaUJ6UCxFQUFNOFAsTUFBTyxVQUM1Q2UsRUFBaUJwQixpQkFBaUJ6UCxFQUFNOFAsTUFBTywwQkFHdENXLEdBQVcsZ0JBQ1hDLEdBQVksZ0JBQ1pDLEdBQVUsZ0JBQ1ZDLEdBQWEsT0F3Q3RCRSxFQUFhak4sRUFBUXdNLEVBQWNDLEVBQ25DUyxFQUFjak4sRUFBU3lNLEVBQWFDLEVBRXBDUSxFQUFrQkQsRUFBYyxFQUdoQ0UsR0FBb0JwTixFQUpIaU4sRUFBYSxJQUlpQkwsRUFBVTd2RSxPQUFTOHZFLEVBQVc5dkUsUUFHN0Vzd0UsR0FBdUJwTixFQUFTa04sSUFBb0JMLEVBQVMvdkUsT0FBU2d3RSxFQUFZaHdFLFFBR2xGdXdFLEVBQW9CTCxFQUNwQk0sRUFBcUJMLEVBQ3JCTSxlQXFCSS9PLEtBQUttTyxFQUFVL3pELE9BQU9nMEQsRUFBWUMsRUFBVUMsWUFuQnpCVSxPQUN0QkMsRUFDQUMsRUFBZUYsRUFBSUUsZUFFbkJBLEtBQ09GLEVBQUk1bkQsT0FBTzRuRCxFQUFJdkIsVUFBWWUsRUFBYUssRUFBbUJELE1BQy9DSyxFQUFRek4sV0FFcEJ3TixFQUFJNW5ELE9BQU91bkQsRUFBa0JHLE1BQ2xCRyxFQUFRMU4sU0FHbEI1OEQsaUJBQ0N1cUUsVUFDSEQsTUFDSkQsVUFPSEcsRUFBMkIsRUFDM0JDLEVBQTRCLEVBQzVCQyxFQUF3QixFQUN4QkMsRUFBMkIsWUFFdkJ0UCxLQUFLcU8sRUFBU2owRCxPQUFPazBELEdBQWMsU0FBU2lCLE1BQy9DQSxFQUFjQyxXQUFZLEtBQ3pCQyxFQUFhRixFQUFjQyxlQUNKM3dFLEtBQUtDLElBQUlxd0UsRUFBMEJNLEVBQVdobkIsUUFDN0M1cEQsS0FBS0MsSUFBSXN3RSxFQUEyQkssRUFBV3YyQixvQkFJckU4bUIsS0FBS21PLEVBQVUvekQsT0FBT2cwRCxHQUFhLFNBQVNzQixNQUMvQ0EsRUFBWUYsV0FBWSxLQUN2QkMsRUFBYUMsRUFBWUYsZUFDTDN3RSxLQUFLQyxJQUFJdXdFLEVBQXVCSSxFQUFXOW1CLE9BQ3hDOXBELEtBQUtDLElBQUl3d0UsRUFBMEJHLEVBQVdwTSxlQU92RXNNLEVBQXNCNUIsRUFDdEI2QixFQUF1QjVCLEVBQ3ZCNkIsRUFBc0I1QixFQUN0QjZCLEVBQXlCNUIsWUEyQnJCbE8sS0FBS21PLEVBQVUvekQsT0FBT2cwRCxHQUFhMkIsYUFFbkMvUCxLQUFLbU8sRUFBVyxTQUFTYSxNQUNUQSxFQUFJek4sa0JBR3BCdkIsS0FBS29PLEVBQVksU0FBU1ksTUFDVEEsRUFBSXpOLGtCQUlyQnZCLEtBQUtxTyxFQUFTajBELE9BQU9rMEQsR0FBY3lCLGFBR25DL1AsS0FBS3FPLEVBQVUsU0FBU1csTUFDUkEsRUFBSXhOLG1CQUdwQnhCLEtBQUtzTyxFQUFhLFNBQVNVLE1BQ1JBLEVBQUl4TixtQkFxQnZCeEIsS0FBS21PLEVBQVUvekQsT0FBT2cwRCxZQWxCRFksT0FDeEJnQixFQUFhbFIsVUFBUW1SLGNBQWNsQixFQUFhLFNBQVNFLFVBQ3JEQSxFQUFRRCxNQUFRQSxJQUdwQmtCLFFBQ0csUUFDQyxNQUNGTCxTQUNHQyxHQUdMRSxLQUNDNW9ELE9BQU80b0QsRUFBV2YsUUFBUTFOLE1BQU91TixFQUFvQm9CLE9BUXJDbkMsSUFDQ0MsSUFDREMsSUFDR0MsWUFFakJsTyxLQUFLbU8sRUFBVyxTQUFTYSxNQUNUQSxFQUFJek4sa0JBR3BCdkIsS0FBS29PLEVBQVksU0FBU1ksTUFDVEEsRUFBSXpOLGtCQUdyQnZCLEtBQUtxTyxFQUFVLFNBQVNXLE1BQ1JBLEVBQUl4TixtQkFFcEJ4QixLQUFLc08sRUFBYSxTQUFTVSxNQUNSQSxFQUFJeE4sYUFJM0IyTyxFQUFzQnR4RSxLQUFLQyxJQUFJcXdFLEVBQTJCUSxFQUFxQixNQUM1RFEsS0FDQ3R4RSxLQUFLQyxJQUFJc3dFLEVBQTRCUSxFQUFzQixPQUUvRVEsRUFBcUJ2eEUsS0FBS0MsSUFBSXV3RSxFQUF3QlEsRUFBcUIsTUFDeERPLEtBQ0d2eEUsS0FBS0MsSUFBSXd3RSxFQUEyQlEsRUFBd0IsT0FLbEZPLEVBQXdCN08sRUFBU3FPLEVBQXNCQyxFQUN2RFEsRUFBdUIvTyxFQUFRb08sRUFBc0JDLEVBRXJEVSxJQUF5QnpCLEdBQXFCd0IsSUFBMEJ2QixjQUNuRTlPLEtBQUttTyxFQUFXLFNBQVNhLEtBQzVCeE4sT0FBUzZPLGNBR05yUSxLQUFLb08sRUFBWSxTQUFTWSxLQUM3QnhOLE9BQVM2TyxjQUdOclEsS0FBS3FPLEVBQVUsU0FBU1csR0FDMUJBLEVBQUl2QixjQUNKbE0sTUFBUStPLGVBSU50USxLQUFLc08sRUFBYSxTQUFTVSxHQUM3QkEsRUFBSXZCLGNBQ0psTSxNQUFRK08sT0FJT0QsSUFDREMsT0FJakI3bkIsRUFBT3NsQixFQUFjb0MsRUFDckJ4bkIsRUFBTXNsQixFQUFhbUMsWUF3QmZwUSxLQUFLbU8sRUFBVS96RCxPQUFPaTBELEdBQVdrQyxNQUdqQzFCLEtBQ0RDLFlBRUM5TyxLQUFLb08sRUFBWW1DLGFBQ2pCdlEsS0FBS3NPLEVBQWFpQyxLQUdwQkMsZ0JBQ0NiLE1BQ0RFLFFBQ0VGLEVBQXNCZCxTQUNyQmdCLEVBQXNCZixhQUl2QjlPLEtBQUt1TyxFQUFnQixTQUFTUyxLQUNqQ3ZtQixLQUFPaVYsRUFBTThTLFVBQVUvbkIsT0FDdkJFLElBQU0rVSxFQUFNOFMsVUFBVTduQixNQUN0QnpQLE1BQVF3a0IsRUFBTThTLFVBQVV0M0IsUUFDeEJtcUIsT0FBUzNGLEVBQU04UyxVQUFVbk4sU0FFekJqOEMsT0FBT3luRCxFQUFtQkMsY0FqTHRCaUIsRUFBT2YsT0FDWGdCLEVBQWFsUixVQUFRbVIsY0FBY2xCLEVBQWEsU0FBUzBCLFVBQ3JEQSxFQUFPekIsTUFBUUEsT0FHbkJnQixLQUNDaEIsRUFBSUUsZUFBZ0IsS0FDbkJnQixRQUNHcnhFLEtBQUtDLElBQUk2d0UsRUFBcUJSLFNBQzdCdHdFLEtBQUtDLElBQUk4d0UsRUFBc0JSLE9BQ2pDLFNBQ0csS0FLTGhvRCxPQUFPNG5ELEVBQUl2QixVQUFZZSxFQUFhSyxFQUFtQkosRUFBYyxFQUFHeUIsVUFFeEU5b0QsT0FBTzRvRCxFQUFXZixRQUFRMU4sTUFBT3VOLFlBaUgvQnlCLEVBQVN2QixHQUNiQSxFQUFJRSxrQkFDSHptQixLQUFPdW1CLEVBQUl2QixVQUFZTSxFQUFjNEIsSUFDckN6MkIsTUFBUTgxQixFQUFJdkIsVUFBWWxNLEVBQVF5TSxFQUFlMkIsRUFBc0JkLElBQ3JFbG1CLElBQU1BLElBQ04wYSxPQUFTMWEsRUFBTXFtQixFQUFJeE4sU0FHakJ3TixFQUFJM0wsV0FJTjVhLEtBQU9BLElBQ1B2UCxNQUFRdVAsRUFBT3VtQixFQUFJek4sUUFDbkI1WSxJQUFNa25CLElBQ054TSxPQUFTd00sRUFBc0JmLElBRzVCRSxFQUFJOTFCLDJFQ3BYSyxTQUFTajlDLEVBQU15MEUsRUFBa0JDLFFBQzlDQyxhQUFhMzBFLEdBQVF5MEUsT0FDckJuTSxTQUFTdG9FLEdBQVE2aUUsVUFBUW5qQyxNQUFNZzFDLHdCQUVoQixTQUFTMTBFLFVBQ3RCdkUsS0FBS2s1RSxhQUFhMTNFLGVBQWUrQyxHQUFRdkUsS0FBS2s1RSxhQUFhMzBFLFFBQVFkLG9CQUV6RCxTQUFTYyxVQUVuQnZFLEtBQUs2c0UsU0FBU3JyRSxlQUFlK0MsR0FBUTZpRSxVQUFRcndELFVBQVc4MUQsY0FBU3NHLE1BQU9uekUsS0FBSzZzRSxTQUFTdG9FLDZCQUV6RSxTQUFTQSxFQUFNNDBFLEdBQzFCbjVFLEtBQ0Y2c0UsU0FBU3JyRSxlQUFlK0MsS0FEdEJ2RSxLQUVMNnNFLFNBQVN0b0UsR0FBUTZpRSxVQUFRaCtDLE9BRnBCcHBCLEtBRThCNnNFLFNBQVN0b0UsR0FBTzQwRSx1QkFHckMsU0FBU25ULGFBRW5Cc0MsS0FBS3RDLEVBQU1vVCxPQUFRLFNBQVNqRyxLQUU3QjRDLFVBQVk1QyxFQUFNNWlFLFFBQVF3bEUsWUFDMUJMLFNBQVd2QyxFQUFNNWlFLFFBQVFtbEUsV0FDekJaLE9BQVMzQixFQUFNNWlFLFFBQVF1a0Usb0JBQ3JCdUUsT0FBT3JULEVBQU9tTixvQkM5QlIsb0JBNFpQbUcsRUFBY25oRCxFQUFZL0csRUFBTW1vRCxPQUNwQ0MsUUFDc0IsaUJBQWZyaEQsS0FDTTJiLFNBQVMzYixFQUFZLEtBRUosSUFBN0JBLEVBQVdyUSxRQUFRLFNBRU4weEQsRUFBZ0IsSUFBTXBvRCxFQUFLOGpCLFdBQVdxa0MsT0FHdkNwaEQsRUFHVnFoRCxXQU9DQyxFQUFtQjkxRSxlQUNWRixJQUFWRSxHQUFpQyxPQUFWQSxHQUE0QixTQUFWQSxXQVF4QysxRSxFQUF1QkMsRUFBU0MsRUFBVUMsT0FDOUM3MEQsRUFBTzNpQixTQUFTeTNFLFlBQ2hCNWtDLEVBQWFreUIsVUFBUTJTLGVBQWVKLEdBQ3BDSyxFQUFrQmgxRCxFQUFLaWtDLGlCQUFpQjB3QixHQUFTQyxHQUNqREssRUFBdUJqMUQsRUFBS2lrQyxpQkFBaUIvVCxHQUFZMGtDLEdBQ3pETSxFQUFXVCxFQUFtQk8sR0FDOUJHLEVBQWdCVixFQUFtQlEsR0FDbkNHLEVBQVc3aEQsT0FBTzhoRCx5QkFFbEJILEdBQVlDLEVBQ1JoekUsS0FBS2diLElBQ1grM0QsRUFBV1osRUFBY1UsRUFBaUJMLEVBQVNFLEdBQXNCTyxFQUN6RUQsRUFBZ0JiLEVBQWNXLEVBQXNCL2tDLEVBQVkya0MsR0FBc0JPLEdBR2pGLGlCQXBjQUUsWUFBYyxrQkFDZGxULFVBQVFyd0QsTUFBTXF3RCxVQUFRbmpDLE1BQU16OEIsVUFBVSxPQUFRZ0ssTUFBTTNOLEtBQUsyRCxVQUFXLFdBQ2xFLFNBQVMxQixFQUFLa2IsRUFBUXphLEVBQVFnSyxPQUNqQ3czRCxFQUFPL21ELEVBQU9sYixPQUNka2lFLEVBQU96aEUsRUFBT1QsR0FFTixXQUFSQSxJQUVJQSxHQUFPc2hFLFVBQVFtVCxXQUFXeFMsRUFBTUMsR0FDckIsVUFBUmxpRSxJQUVIQSxHQUFPc2hFLFVBQVFyd0QsTUFBTWd4RCxHQUFPeVMsa0JBQWFDLGlCQUFpQnpTLEVBQUt6akUsTUFBT3lqRSxjQUVyRUcsUUFBUXJpRSxFQUFLa2IsRUFBUXphLEVBQVFnSyxpQkFNakNncUUsV0FBYSxrQkFDYm5ULFVBQVFyd0QsTUFBTXF3RCxVQUFRbmpDLE1BQU16OEIsVUFBVSxPQUFRZ0ssTUFBTTNOLEtBQUsyRCxVQUFXLFdBQ2xFLFNBQVMxQixFQUFLa2IsRUFBUXphLEVBQVFnSyxNQUN6QixVQUFSekssR0FBMkIsVUFBUkEsRUFBaUIsS0FFbkNtZSxFQUFHMWYsRUFBTTR1RSxFQURUdUgsRUFBT24wRSxFQUFPVCxHQUFLYyxXQUdsQm9hLEVBQU9sYixPQUNKQSxPQUdIbWUsRUFBSSxFQUFHQSxFQUFJeTJELElBQVF6MkQsSUFDZjFkLEVBQU9ULEdBQUttZSxLQUNibWpELFVBQVFDLGVBQWU4TCxFQUFNNXVFLEtBQWMsVUFBUnVCLEVBQWtCLFdBQWEsVUFFckVtZSxHQUFLakQsRUFBT2xiLEdBQUtjLFVBQ2JkLEdBQUttSCxVQUdSK1QsRUFBT2xiLEdBQUttZSxHQUFHMWYsTUFBUzR1RSxFQUFNNXVFLE1BQVE0dUUsRUFBTTV1RSxPQUFTeWMsRUFBT2xiLEdBQUttZSxHQUFHMWYsZUFHaEV3UyxNQUFNaUssRUFBT2xiLEdBQUttZSxJQUFLdTJELGtCQUFhQyxpQkFBaUJsMkUsR0FBTzR1RSxjQUc1RHA4RCxNQUFNaUssRUFBT2xiLEdBQUttZSxHQUFJa3ZELGtCQUl4QmhMLFFBQVFyaUUsRUFBS2tiLEVBQVF6YSxFQUFRZ0ssaUJBTWpDb2xFLE1BQVEsU0FBU3hqRSxFQUFZd29FLE1BQ2hDdlQsVUFBUXY5RCxRQUFRc0ksSUFBZXpLLE1BQU10RSxVQUFVOUIsY0FDM0M2USxFQUFXN1EsT0FBT3E1RSxPQUV0QkMsc0JBRUl0UyxLQUFLbjJELEVBQVksU0FBUzBWLEdBQzdCOHlELEVBQWU5eUQsTUFDVDVhLEtBQUs0YSxLQUlUK3lELGFBRUFDLFVBQVluekUsTUFBTXRFLFVBQVV5M0UsVUFDbkMsU0FBU3B6RSxFQUFPdytCLEVBQVUybUMsVUFDbEJubEUsRUFBTW96RSxVQUFVNTBDLEVBQVUybUMsSUFFbEMsU0FBU25sRSxFQUFPdytCLEVBQVUybUMsVUFDUG5wRSxJQUFWbXBFLEVBQXNCbmxFLEVBQVFtbEUsTUFDakMsSUFBSTNvRCxFQUFJLEVBQUd5akQsRUFBT2pnRSxFQUFNYixPQUFRcWQsRUFBSXlqRCxJQUFRempELEtBQzVDZ2lCLEVBQVNwaUMsS0FBSytvRSxFQUFPbmxFLEVBQU13YyxHQUFJQSxFQUFHeGMsVUFDOUJ3YyxTQUdELGFBRUZzMEQsY0FBZ0IsU0FBU3VDLEVBQWVILEVBQWdCSSxHQUUzRDNULFVBQVE0VCxjQUFjRCxRQUNYLE9BRVYsSUFBSTkyRCxFQUFJODJELEVBQWEsRUFBRzkyRCxFQUFJNjJELEVBQWNsMEUsT0FBUXFkLElBQUssS0FDdkRnM0QsRUFBY0gsRUFBYzcyRCxNQUM1QjAyRCxFQUFlTSxVQUNYQSxjQUlGQyxrQkFBb0IsU0FBU0osRUFBZUgsRUFBZ0JJLEdBRS9EM1QsVUFBUTRULGNBQWNELE9BQ1pELEVBQWNsMEUsWUFFdkIsSUFBSXFkLEVBQUk4MkQsRUFBYSxFQUFHOTJELEdBQUssRUFBR0EsSUFBSyxLQUNyQ2czRCxFQUFjSCxFQUFjNzJELE1BQzVCMDJELEVBQWVNLFVBQ1hBLGNBTUZFLFNBQVcsU0FBUzd4RSxVQUNuQjRkLE1BQU1OLFdBQVd0ZCxLQUFPd2QsU0FBU3hkLGNBRWxDOHhFLGFBQWUsU0FBU3JSLEVBQUdDLEVBQUdxUixVQUM5QmwwRSxLQUFLbTBFLElBQUl2UixFQUFJQyxHQUFLcVIsYUFFbEJFLFlBQWMsU0FBU3hSLEVBQUdzUixPQUM3QkcsRUFBVXIwRSxLQUFLd3FFLE1BQU01SCxVQUNmeVIsRUFBVUgsRUFBV3RSLEdBQVF5UixFQUFVSCxFQUFXdFIsYUFFckQzaUUsSUFBTSxTQUFTSyxVQUNmQSxFQUFNb2lCLE9BQU8sU0FBU3ppQixFQUFLekQsVUFDNUJ1akIsTUFBTXZqQixHQUdKeUQsRUFGQ0QsS0FBS0MsSUFBSUEsRUFBS3pELElBR3BCNDBCLE9BQU9rakQsOEJBRUh0NUQsSUFBTSxTQUFTMWEsVUFDZkEsRUFBTW9pQixPQUFPLFNBQVMxSCxFQUFLeGUsVUFDNUJ1akIsTUFBTXZqQixHQUdKd2UsRUFGQ2hiLEtBQUtnYixJQUFJQSxFQUFLeGUsSUFHcEI0MEIsT0FBTzhoRCw4QkFFSHFCLEtBQU92MEUsS0FBS3UwRSxLQUNuQixTQUFTM1IsVUFDRDVpRSxLQUFLdTBFLEtBQUszUixJQUVsQixTQUFTQSxVQUVFLFFBRExBLElBQ1U3aUQsTUFBTTZpRCxHQUNiQSxFQUVEQSxFQUFJLEVBQUksR0FBSyxhQUVkNFIsTUFBUXgwRSxLQUFLdzBFLE1BQ3BCLFNBQVM1UixVQUNENWlFLEtBQUt3MEUsTUFBTTVSLElBRW5CLFNBQVNBLE9BQ0o2UixFQUFXejBFLEtBQUttYSxJQUFJeW9ELEdBQUs1aUUsS0FBSzAwRSxPQUc5QkMsRUFBWTMwRSxLQUFLd3FFLE1BQU1pSyxVQUNUN1IsSUFBTTVpRSxLQUFLbWlFLElBQUksR0FBSXdTLEdBRWhCQSxFQUFZRixhQUUzQkcsVUFBWSxTQUFTcEgsVUFDckJBLEdBQVd4dEUsS0FBS2lpRSxHQUFLLGdCQUVyQjRTLFVBQVksU0FBU0MsVUFDckJBLEdBQVcsSUFBTTkwRSxLQUFLaWlFLGVBR3RCOFMsa0JBQW9CLFNBQVNDLEVBQWFDLE9BQzdDQyxFQUFzQkQsRUFBV3JTLEVBQUlvUyxFQUFZcFMsRUFDakR1UyxFQUFzQkYsRUFBV3BTLEVBQUltUyxFQUFZblMsRUFDakR1UyxFQUEyQnAxRSxLQUFLb2lFLEtBQUs4UyxFQUFzQkEsRUFBc0JDLEVBQXNCQSxHQUV2R0UsRUFBUXIxRSxLQUFLZ3FFLE1BQU1tTCxFQUFxQkQsVUFFeENHLEdBQVUsR0FBTXIxRSxLQUFLaWlFLFFBQ2YsRUFBTWppRSxLQUFLaWlFLFdBSWJvVCxXQUNHRCxjQUdKRSxzQkFBd0IsU0FBU0MsRUFBS0MsVUFDdEN4MUUsS0FBS29pRSxLQUFLcGlFLEtBQUttaUUsSUFBSXFULEVBQUk1UyxFQUFJMlMsRUFBSTNTLEVBQUcsR0FBSzVpRSxLQUFLbWlFLElBQUlxVCxFQUFJM1MsRUFBSTBTLEVBQUkxUyxFQUFHLGVBRS9ENFMsV0FBYSxTQUFTQyxVQUNyQkEsRUFBYSxHQUFNLEVBQUssRUFBSSxjQUU3QkMsWUFBYyxTQUFTQyxFQUFZQyxFQUFhQyxFQUFZbmxELE9BTS9EK3pDLEVBQVdrUixFQUFXRyxLQUFPRixFQUFjRCxFQUMzQ3ZwQyxFQUFVd3BDLEVBQ1YxOUMsRUFBTzI5QyxFQUFXQyxLQUFPRixFQUFjQyxFQUV2Q0UsRUFBTWgyRSxLQUFLb2lFLEtBQUtwaUUsS0FBS21pRSxJQUFJOTFCLEVBQVF1MkIsRUFBSThCLEVBQVM5QixFQUFHLEdBQUs1aUUsS0FBS21pRSxJQUFJOTFCLEVBQVF3MkIsRUFBSTZCLEVBQVM3QixFQUFHLElBQ3ZGb1QsRUFBTWoyRSxLQUFLb2lFLEtBQUtwaUUsS0FBS21pRSxJQUFJaHFDLEVBQUt5cUMsRUFBSXYyQixFQUFRdTJCLEVBQUcsR0FBSzVpRSxLQUFLbWlFLElBQUlocUMsRUFBSzBxQyxFQUFJeDJCLEVBQVF3MkIsRUFBRyxJQUUvRXFULEVBQU1GLEdBQU9BLEVBQU1DLEdBQ25CRSxFQUFNRixHQUFPRCxFQUFNQyxHQU1uQkcsRUFBS3psRCxLQUhINVEsTUFBTW0yRCxHQUFPLEVBQUlBLEdBSW5CRyxFQUFLMWxELEtBSEg1USxNQUFNbzJELEdBQU8sRUFBSUEsc0JBT2xCOXBDLEVBQVF1MkIsRUFBSXdULEdBQU1qK0MsRUFBS3lxQyxFQUFJOEIsRUFBUzlCLEtBQ3BDdjJCLEVBQVF3MkIsRUFBSXVULEdBQU1qK0MsRUFBSzBxQyxFQUFJNkIsRUFBUzdCLFlBR3BDeDJCLEVBQVF1MkIsRUFBSXlULEdBQU1sK0MsRUFBS3lxQyxFQUFJOEIsRUFBUzlCLEtBQ3BDdjJCLEVBQVF3MkIsRUFBSXdULEdBQU1sK0MsRUFBSzBxQyxFQUFJNkIsRUFBUzdCLGdCQUlsQ3lULFFBQVVsbEQsT0FBT2tsRCxTQUFXLGdCQUM1QkMsb0JBQXNCLFNBQVNDLE9BZ0JsQzE1RCxFQUFHMjVELEVBQWFDLEVBQWNDLEVBNEI5QkMsRUFBUUMsRUFBT0MsRUFBTUMsRUEwQnJCQyxFQWhFQUMsR0FBc0JULE9BQWNscEUsSUFBSSxTQUFTNHBFLGdCQUU1Q0EsRUFBTUMsY0FDTCxLQUNKLEtBS0ZDLEVBQVlILEVBQW1CeDNFLFdBRTlCcWQsRUFBSSxFQUFHQSxFQUFJczZELElBQWF0NkQsU0FDYm02RCxFQUFtQm42RCxJQUNqQm9oQixNQUFNNjNDLFdBSVRqNUQsRUFBSSxFQUFJbTZELEVBQW1CbjZELEVBQUksR0FBSyxRQUNyQ0EsRUFBSXM2RCxFQUFZLEVBQUlILEVBQW1CbjZELEVBQUksR0FBSyxRQUMxQzY1RCxFQUFXejRDLE1BQU02M0MsS0FBTSxLQUNyQ3NCLEVBQWVWLEVBQVd6NEMsTUFBTTBrQyxFQUFJOFQsRUFBYXg0QyxNQUFNMGtDLElBRzlDMFUsT0FBeUIsSUFBaEJELEdBQXFCVixFQUFXejRDLE1BQU0ya0MsRUFBSTZULEVBQWF4NEMsTUFBTTJrQyxHQUFLd1UsRUFBYyxHQUdsR1osR0FBZUEsRUFBWXY0QyxNQUFNNjNDLE9BQ3hCd0IsR0FBS2IsRUFBYVksUUFDcEJYLEdBQWNBLEVBQVd6NEMsTUFBTTYzQyxPQUM3QndCLEdBQUtkLEVBQVlhLE9BQ3BCeitFLEtBQUswN0UsS0FBS2tDLEVBQVlhLFVBQVl6K0UsS0FBSzA3RSxLQUFLbUMsRUFBYVksVUFDdERDLEdBQUssSUFFTEEsSUFBTWQsRUFBWWEsT0FBU1osRUFBYVksUUFBVSxNQU01RHg2RCxFQUFJLEVBQUdBLEVBQUlzNkQsRUFBWSxJQUFLdDZELElBQ2pCbTZELEVBQW1CbjZELEtBQ3JCbTZELEVBQW1CbjZELEVBQUksR0FDaEM0NUQsRUFBYXg0QyxNQUFNNjNDLE1BQVFZLEVBQVd6NEMsTUFBTTYzQyxPQUk1QzlWLFVBQVFnVSxhQUFheUMsRUFBYVksT0FBUSxFQUFHeitFLEtBQUt5OUUsV0FDeENpQixHQUFLWixFQUFXWSxHQUFLLEtBSTFCYixFQUFhYSxHQUFLYixFQUFhWSxTQUNoQ1gsRUFBV1ksR0FBS2IsRUFBYVksVUFDbEJ0M0UsS0FBS21pRSxJQUFJeVUsRUFBUSxHQUFLNTJFLEtBQUttaUUsSUFBSTBVLEVBQU8sS0FDakMsTUFJakIsRUFBSTcyRSxLQUFLb2lFLEtBQUsyVSxLQUNSUSxHQUFLWCxFQUFTRSxFQUFPSixFQUFhWSxTQUNwQ0MsR0FBS1YsRUFBUUMsRUFBT0osRUFBYVksY0FLeEN4NkQsRUFBSSxFQUFHQSxFQUFJczZELElBQWF0NkQsS0FDYm02RCxFQUFtQm42RCxJQUNqQm9oQixNQUFNNjNDLFNBSVRqNUQsRUFBSSxFQUFJbTZELEVBQW1CbjZELEVBQUksR0FBSyxPQUNyQ0EsRUFBSXM2RCxFQUFZLEVBQUlILEVBQW1CbjZELEVBQUksR0FBSyxLQUN6RDI1RCxJQUFnQkEsRUFBWXY0QyxNQUFNNjNDLFVBQzNCVyxFQUFheDRDLE1BQU0wa0MsRUFBSTZULEVBQVl2NEMsTUFBTTBrQyxHQUFLLElBQzNDMWtDLE1BQU02bUMsc0JBQXdCMlIsRUFBYXg0QyxNQUFNMGtDLEVBQUlvVSxJQUNyRDk0QyxNQUFNK21DLHNCQUF3QnlSLEVBQWF4NEMsTUFBTTJrQyxFQUFJbVUsRUFBU04sRUFBYWEsSUFFckZaLElBQWVBLEVBQVd6NEMsTUFBTTYzQyxVQUN6QlksRUFBV3o0QyxNQUFNMGtDLEVBQUk4VCxFQUFheDRDLE1BQU0wa0MsR0FBSyxJQUMxQzFrQyxNQUFNOG1DLGtCQUFvQjBSLEVBQWF4NEMsTUFBTTBrQyxFQUFJb1UsSUFDakQ5NEMsTUFBTWduQyxrQkFBb0J3UixFQUFheDRDLE1BQU0ya0MsRUFBSW1VLEVBQVNOLEVBQWFhLGdCQUkvRUMsU0FBVyxTQUFTeHNFLEVBQVl4TCxFQUFPaTRFLFVBQzFDQSxFQUNJajRFLEdBQVN3TCxFQUFXdkwsT0FBUyxFQUFJdUwsRUFBVyxHQUFLQSxFQUFXeEwsRUFBUSxHQUVyRUEsR0FBU3dMLEVBQVd2TCxPQUFTLEVBQUl1TCxFQUFXQSxFQUFXdkwsT0FBUyxHQUFLdUwsRUFBV3hMLEVBQVEsY0FFeEZrNEUsYUFBZSxTQUFTMXNFLEVBQVl4TCxFQUFPaTRFLFVBQzlDQSxFQUNJajRFLEdBQVMsRUFBSXdMLEVBQVdBLEVBQVd2TCxPQUFTLEdBQUt1TCxFQUFXeEwsRUFBUSxHQUVyRUEsR0FBUyxFQUFJd0wsRUFBVyxHQUFLQSxFQUFXeEwsRUFBUSxjQUdoRG00RSxRQUFVLFNBQVN4K0IsRUFBT3F4QixPQUM3QmlLLEVBQVd6MEUsS0FBSzBmLE1BQU11Z0QsVUFBUXVVLE1BQU1yN0IsSUFDcEN5K0IsRUFBV3orQixFQUFRbjVDLEtBQUttaUUsSUFBSSxHQUFJc1MsVUFHaENqSyxFQUNDb04sRUFBVyxJQUNDLEVBQ0xBLEVBQVcsRUFDTixFQUNMQSxFQUFXLEVBQ04sRUFFQSxHQUVOQSxHQUFZLEVBQ1AsRUFDTEEsR0FBWSxFQUNQLEVBQ0xBLEdBQVksRUFDUCxFQUVBLElBR001M0UsS0FBS21pRSxJQUFJLEdBQUlzUyxjQUc1Qm9ELGlCQUNlLG9CQUFYeCtFLE9BQ0gsU0FBU3lsQyxRQUlWemxDLE9BQU80bkQsdUJBQ2I1bkQsT0FBT3krRSw2QkFDUHorRSxPQUFPMCtFLDBCQUNQMStFLE9BQU8yK0Usd0JBQ1AzK0UsT0FBTzQrRSx5QkFDUCxTQUFTbjVDLFVBQ0R6bEMsT0FBTzZuRCxXQUFXcGlCLEVBQVUsSUFBTyxlQUlyQ281QyxvQkFBc0IsU0FBU0MsRUFBS3RaLE9BQ3ZDdVosRUFBUUMsRUFDUng3RSxFQUFJczdFLEVBQUlHLGVBQWlCSCxFQUN6QkksRUFBU0osRUFBSXQrRCxRQUFVcytELEVBQUlLLFdBQzNCQyxFQUFlRixFQUFPOXZCLHdCQUV0Qml3QixFQUFVNzdFLEVBQUU2N0UsUUFDWkEsR0FBV0EsRUFBUWo1RSxPQUFTLEtBQ3RCaTVFLEVBQVEsR0FBR0MsVUFDWEQsRUFBUSxHQUFHRSxZQUdYLzdFLEVBQUU4N0UsVUFDRjk3RSxFQUFFKzdFLGFBTVJDLEVBQWNwNUQsV0FBV3dnRCxVQUFRcmhCLFNBQVMyNUIsRUFBUSxpQkFDbERPLEVBQWFyNUQsV0FBV3dnRCxVQUFRcmhCLFNBQVMyNUIsRUFBUSxnQkFDakRRLEVBQWV0NUQsV0FBV3dnRCxVQUFRcmhCLFNBQVMyNUIsRUFBUSxrQkFDbkRTLEVBQWdCdjVELFdBQVd3Z0QsVUFBUXJoQixTQUFTMjVCLEVBQVEsbUJBQ3BEN1YsRUFBUStWLEVBQWFwK0IsTUFBUW8rQixFQUFhN3VCLEtBQU9pdkIsRUFBY0UsRUFDL0RwVyxFQUFTOFYsRUFBYWpVLE9BQVNpVSxFQUFhM3VCLElBQU1ndkIsRUFBYUUsYUFJMURoNUUsS0FBS3dxRSxPQUFPNE4sRUFBU0ssRUFBYTd1QixLQUFPaXZCLEdBQWdCblcsRUFBUzZWLEVBQU83VixNQUFRN0QsRUFBTW9hLDZCQUN2Rmo1RSxLQUFLd3FFLE9BQU82TixFQUFTSSxFQUFhM3VCLElBQU1ndkIsR0FBZW5XLEVBQVU0VixFQUFPNVYsT0FBUzlELEVBQU1vYSxxQ0F5RHpGQyxtQkFBcUIsU0FBUzFHLFVBQzlCRCxFQUF1QkMsRUFBUyxZQUFhLDBCQUc3QzJHLG9CQUFzQixTQUFTM0csVUFDL0JELEVBQXVCQyxFQUFTLGFBQWMsMkJBSzlDNEcsa0JBQW9CLFNBQVN2YyxFQUFXbVMsRUFBU3FLLFlBQzlDcFosVUFBUXJoQixTQUFTaWUsRUFBV21TLElBRXZCcnVELFFBQVEsTUFBUSxFQUFJMDRELEVBQWtCMXNDLFNBQVNxaUMsRUFBUyxJQUFNcmlDLFNBQVNxaUMsRUFBUyxlQUt4RjRELGVBQWlCLFNBQVNKLE9BQzdCbnBELEVBQVNtcEQsRUFBUXprQyxrQkFDakIxa0IsR0FBVUEsRUFBT2l3RCxTQUNYandELEVBQU9pd0QsTUFFVmp3RCxhQUVBa3dELGdCQUFrQixTQUFTL0csT0FDOUIzVixFQUFZb0QsVUFBUTJTLGVBQWVKLE9BQ2xDM1YsU0FDRzJWLEVBQVFnSCxnQkFHWkEsRUFBYzNjLEVBQVUyYyxZQUl4QjlNLEVBQUk4TSxFQUhVdlosVUFBUW1aLGtCQUFrQnZjLEVBQVcsZUFBZ0IyYyxHQUNwRHZaLFVBQVFtWixrQkFBa0J2YyxFQUFXLGdCQUFpQjJjLEdBR3JFQyxFQUFLeFosVUFBUWlaLG1CQUFtQjFHLFVBQzdCenlELE1BQU0wNUQsR0FBTS9NLEVBQUkxc0UsS0FBS2diLElBQUkweEQsRUFBRytNLGNBRTVCQyxpQkFBbUIsU0FBU2xILE9BQy9CM1YsRUFBWW9ELFVBQVEyUyxlQUFlSixPQUNsQzNWLFNBQ0cyVixFQUFRbUgsaUJBR1pBLEVBQWU5YyxFQUFVOGMsYUFJekJyeUIsRUFBSXF5QixFQUhTMVosVUFBUW1aLGtCQUFrQnZjLEVBQVcsY0FBZThjLEdBQ2pEMVosVUFBUW1aLGtCQUFrQnZjLEVBQVcsaUJBQWtCOGMsR0FHdkU1bUMsRUFBS2t0QixVQUFRa1osb0JBQW9CM0csVUFDOUJ6eUQsTUFBTWd6QixHQUFNdVUsRUFBSXRuRCxLQUFLZ2IsSUFBSXNzQyxFQUFHdlUsY0FFNUI2TCxTQUFXLFNBQVN4bEMsRUFBSTNDLFVBQ3hCMkMsRUFBR3dnRSxhQUNUeGdFLEVBQUd3Z0UsYUFBYW5qRSxHQUNoQnZiLFNBQVN5M0UsWUFBWTd3QixpQkFBaUIxb0MsRUFBSSxNQUFNeWdFLGlCQUFpQnBqRSxjQUUzRHFqRSxZQUFjLFNBQVNqYixFQUFPa2IsT0FDakNDLEVBQWFuYixFQUFNb2Esd0JBQTBCYyxHQUFpQyxvQkFBWDFnRixRQUEwQkEsT0FBTzRnRixrQkFBcUIsS0FDMUcsSUFBZkQsT0FJQXpCLEVBQVMxWixFQUFNMFosT0FDZjVWLEVBQVM5RCxFQUFNOEQsT0FDZkQsRUFBUTdELEVBQU02RCxRQUVYQyxPQUFTQSxFQUFTcVgsSUFDbEJ0WCxNQUFRQSxFQUFRc1gsSUFDakJ4NEQsSUFBSXdxRCxNQUFNZ08sRUFBWUEsR0FLdkJ6QixFQUFPMzRDLE1BQU0raUMsUUFBVzRWLEVBQU8zNEMsTUFBTThpQyxVQUNsQzlpQyxNQUFNK2lDLE9BQVNBLEVBQVMsT0FDeEIvaUMsTUFBTThpQyxNQUFRQSxFQUFRLGtCQUl2QndYLFdBQWEsU0FBU0MsRUFBV0MsRUFBV0MsVUFDNUNELEVBQVksSUFBTUQsRUFBWSxNQUFRRSxhQUV0Q0MsWUFBYyxTQUFTOTRELEVBQUsrNEQsRUFBTUMsRUFBZW5xRSxPQUVwRHJWLEtBRElxVixPQUNTclYsS0FBT3FWLEVBQU1yVixTQUMxQnkvRSxFQUFLcHFFLEVBQU1xcUUsZUFBaUJycUUsRUFBTXFxRSxtQkFFbENycUUsRUFBTWtxRSxPQUFTQSxNQUNYbHFFLEVBQU1yVixVQUNScVYsRUFBTXFxRSxvQkFDTEgsS0FBT0EsS0FHVkEsS0FBT0EsTUFDUEksRUFBVSxZQUNOeFosS0FBS3FaLEVBQWUsU0FBU0ksUUFFdEJ0K0UsSUFBVnMrRSxHQUFpQyxPQUFWQSxJQUE2QyxJQUEzQjNhLFVBQVF2OUQsUUFBUWs0RSxLQUNsRDNhLFVBQVE0YSxZQUFZcjVELEVBQUt4bUIsRUFBTXkvRSxFQUFJRSxFQUFTQyxHQUM1QzNhLFVBQVF2OUQsUUFBUWs0RSxjQUdsQnpaLEtBQUt5WixFQUFPLFNBQVNFLFFBRVJ4K0UsSUFBaEJ3K0UsR0FBNkMsT0FBaEJBLEdBQXlCN2EsVUFBUXY5RCxRQUFRbzRFLE9BQy9EN2EsVUFBUTRhLFlBQVlyNUQsRUFBS3htQixFQUFNeS9FLEVBQUlFLEVBQVNHLFlBTXREQyxFQUFRTixFQUFHaDdFLE9BQVMsS0FDcEJzN0UsRUFBUVAsRUFBYy82RSxPQUFRLEtBQzVCLElBQUlxZCxFQUFJLEVBQUdBLEVBQUlpK0QsRUFBT2orRCxXQUNuQjloQixFQUFLeS9FLEVBQUczOUQsTUFFYnJSLE9BQU8sRUFBR3N2RSxVQUVQSixhQUVBRSxZQUFjLFNBQVNyNUQsRUFBS3htQixFQUFNeS9FLEVBQUlFLEVBQVNoNkUsT0FDbERxNkUsRUFBWWhnRixFQUFLMkYsVUFDaEJxNkUsTUFDUWhnRixFQUFLMkYsR0FBVTZnQixFQUFJcTVELFlBQVlsNkUsR0FBUStoRSxRQUNoRDU4RCxLQUFLbkYsSUFFTHE2RSxFQUFZTCxNQUNMSyxHQUVKTCxhQUVBTSxtQkFBcUIsU0FBU1QsT0FDakNVLEVBQWdCLG1CQUNaL1osS0FBS3FaLEVBQWUsU0FBU0ksR0FDaEMzYSxVQUFRdjlELFFBQVFrNEUsSUFDZkEsRUFBTW43RSxPQUFTeTdFLE1BQ0ZOLEVBQU1uN0UsVUFJbEJ5N0UsYUFHQUMsTUFBU0EsYUFLaEIsU0FBUzMrRSxVQUVKQSxhQUFpQjQrRSxtQkFDWjFWLGNBQVNscUUsT0FBTzYvRSxjQUdsQkYsYUFBTTMrRSxJQVZkLFNBQVNBLGtCQUNBekIsTUFBTSx1QkFDUHlCLGFBV0Q4K0UsY0FBZ0IsU0FBU0MsVUFFeEJBLGFBQXNCQyxjQUM3QkQsRUFDQXRiLFVBQVFrYixNQUFNSSxHQUFZRSxTQUFTLElBQUtDLE9BQU8sSUFBS25RLGNDbG5CdkQsU0FBUzNoRSxZQUFZekosRUFBTzBkLEVBQU1xZ0IsRUFBT3k5QyxPQUVwQzcrRCxFQUFHeWpELEVBQU01aEUsRUFBS3E2QixFQUFRNGlELEVBQVEvaEUsRUFBUXpjLEVBQU15K0UsRUFBSUMsRUFEaERqK0UsRUFBT2xDLE9BQU9rQyxLQUFLcWdDLE9BR2xCcGhCLEVBQUksRUFBR3lqRCxFQUFPMWlFLEVBQUs0QixPQUFRcWQsRUFBSXlqRCxJQUFRempELE9BR2xDb2hCLElBRkhyZ0MsRUFBS2lmLElBTU5lLEVBQUt4akIsZUFBZXNFLE9BQ25CQSxHQUFPa2IsTUFHSmdFLEVBQUtsZixNQUVDa2IsR0FBcUIsTUFBWGxiLEVBQUksT0FJeEJ3QixFQUFNOUYsZUFBZXNFLE9BQ25CQSxHQUFPcTZCLEtBR0w3NEIsRUFBTXhCLGVBRURrYixzQkFBQUEsZ0JBRU0raEUsc0JBQUFBLE9BQ04sV0FBVHgrRSxTQUNFKzlFLGFBQU1TLElBQ0p6ckQsVUFDRGdyRCxhQUFNdGhFLElBQ0pzVyxNQUFPLEdBQ1J4eEIsR0FBT205RSxFQUFHQyxJQUFJRixFQUFJRixHQUFNcFEsMkJBSXpCLEdBQWEsV0FBVG51RSxHQUFxQnVpQixTQUFTaThELElBQVdqOEQsU0FBUzlGLEdBQVMsR0FDaEVsYixHQUFPaTlFLEdBQVUvaEUsRUFBUytoRSxHQUFVRCxhQUt0Q2g5RSxHQUFPa2IsR0FJZCxJQUFJbWlFLFFBQVUsU0FBU0MsYUFDZGg2RCxPQUFPcHBCLEtBQU1vakYsUUFDaEJDLFdBQVd0OEUsTUFBTS9HLEtBQU13SCxZQUc3QjQvRCxVQUFRaCtDLE9BQU8rNUQsUUFBUS8vRSxzQkFFVixnQkFDTmtnRixRQUFTLFNBR1IsZUFDRjlhLEVBQUt4b0UsWUFDSndvRSxFQUFHK2EsVUFDSkEsTUFBUW5jLFVBQVFuakMsTUFBTXVrQyxFQUFHOFYsV0FFMUJrRixVQUNJaGIsY0FHSSxTQUFTc2EsT0FDaEJ0YSxFQUFLeG9FLEtBQ0xxbEMsRUFBUW1qQyxFQUFHOFYsT0FDWGgzRSxFQUFRa2hFLEVBQUdnYixPQUNYeCtELEVBQU93akQsRUFBRythLGFBR1RsK0MsR0FBa0IsSUFBVHk5QyxHQU1UOTlELE1BQ0d3akQsRUFBRythLFVBR05qOEUsTUFDSWtoRSxFQUFHZ2IsdUJBR0FsOEUsRUFBTzBkLEVBQU1xZ0IsRUFBT3k5QyxHQUV6QnRhLE1BZkgrYSxNQUFRbCtDLElBQ1JtK0MsT0FBUyxLQUNMaGIsb0JBZ0JRLG9CQUVaeG9FLEtBQUtzK0UsT0FBT3ZVLElBQ1ovcEUsS0FBS3MrRSxPQUFPdFUsYUFJUCxrQkFDRjVDLFVBQVErVCxTQUFTbjdFLEtBQUtzK0UsT0FBT3ZVLElBQU0zQyxVQUFRK1QsU0FBU243RSxLQUFLcytFLE9BQU90VSxNQUl6RW1aLFFBQVEvNUQsT0FBU2crQyxVQUFRdUIsU0FFekIsaUJBQWlCd2EsNERDOUdibjVFLEVBQVVHLFVBQWlCZzVFLGFBQVEvNUQsY0FDL0IsaUJBQ00sV0FDSCxVQUNGLFVBQ0EseUJBRWEseUJBQ0EsY0FXZnBqQixlQUFlZ0UsRUFBUTVHLFVBQVcsdUJBQ25DLGtCQUNHcEQsZUFVRmdHLGVBQWVnRSxFQUFRNUcsVUFBVyxxQkFDbkMsa0JBQ0dwRCxLQUFLZ21FLFdBRVIsU0FBU3JpRSxRQUNScWlFLE1BQVFyaUUsT0NsQ2ZrcEUsY0FBU0MsS0FBSyw4QkFFRixXQUNGLDBCQUNJMUYsVUFBUWhvRCxnQkFDUmdvRCxVQUFRaG9ELFFBSXRCLG1DQUNnQiw0QkFFSCxVQUNILGtCQVFLLFNBQVM0bUQsRUFBT3lkLEVBQVduNEIsRUFBVWxkLE9BRTlDbnFCLEVBQUd5akQsRUFESGdjLEVBQWExakYsS0FBSzBqRixpQkFHWjFkLE1BQVFBLEVBRWI1M0IsTUFDRXUxQyxXQUFZLEdBR2QxL0QsRUFBSSxFQUFHeWpELEVBQU9nYyxFQUFXOThFLE9BQVFxZCxFQUFJeWpELElBQVF6akQsS0FDN0N5L0QsRUFBV3ovRCxHQUFHK2hELFFBQVVBLGdCQUNoQi9oRCxHQUFLdy9ELEtBS1B4MkUsS0FBS3cyRSxHQUdVLElBQXRCQyxFQUFXOThFLGFBQ1R3aEQseUNBSVUsU0FBUzRkLE9BQ3JCci9ELEVBQVF5Z0UsVUFBUXlULFVBQVU3NkUsS0FBSzBqRixXQUFZLFNBQVNELFVBQ2hEQSxFQUFVemQsUUFBVUEsS0FHYixJQUFYci9ELFNBQ0UrOEUsV0FBVzl3RSxPQUFPak0sRUFBTyxLQUN4Qmc5RSxXQUFZLDBCQUlHLGVBQ2xCbmIsRUFBS3hvRSxLQUNVLE9BQWZ3b0UsRUFBR29iLFlBSUhBLFFBQVV4YyxVQUFRNFgsaUJBQWlCbjdFLEtBQUtyRCxPQUFRLGFBQy9Db2pGLFFBQVUsT0FDVkMsOEJBUU8sZUFDUnJiLEVBQUt4b0UsS0FDTDhqRixFQUFZNTdFLEtBQUtDLE1BQ2pCNDdFLEVBQWUsRUFFZnZiLEVBQUd3YixXQUFhLE1BQ0o3OEUsS0FBSzBmLE1BQU0yaEQsRUFBR3diLGNBQzFCQSxXQUFheGIsRUFBR3diLFdBQWEsS0FHOUIzdUIsUUFBUSxFQUFJMHVCLE9BRVhFLEVBQVUvN0UsS0FBS0MsUUFFaEI2N0UsYUFBZUMsRUFBVUgsR0FBYXRiLEVBQUcwYixjQUd4QzFiLEVBQUdrYixXQUFXOThFLE9BQVMsS0FDdkJ3aEQsaUNBT0ksU0FBUy8vQyxXQUVibzdFLEVBQVd6ZCxFQURYMGQsRUFBYTFqRixLQUFLMGpGLFdBRWxCei9ELEVBQUksRUFFREEsRUFBSXkvRCxFQUFXOThFLGFBQ1Q4OEUsRUFBV3ovRCxJQUNMK2hELFFBRVJtZSxhQUFlVixFQUFVVSxhQUFlLEdBQUs5N0UsSUFDN0M4N0UsWUFBY2g5RSxLQUFLZ2IsSUFBSXNoRSxFQUFVVSxZQUFhVixFQUFVVyxvQkFFMURuK0MsU0FBU3c5QyxFQUFVaG9ELFFBQVN1cUMsRUFBT3lkLEdBQVl6ZCxhQUMvQy8vQixTQUFTdzlDLEVBQVVZLHFCQUFzQlosR0FBWXpkLEdBRXpEeWQsRUFBVVUsYUFBZVYsRUFBVVcsb0JBQzlCbitDLFNBQVN3OUMsRUFBVWEscUJBQXNCYixHQUFZemQsS0FDdkQyZCxXQUFZLElBQ1Avd0UsT0FBT3FSLEVBQUcsTUFFbkJBLElDdEhONG9ELGNBQVNDLEtBQUsseUNBR01ELGNBQVNscUUsT0FBTzYvRSx5QkFDcEIsbUJBQ0EsTUFLaEIsZ0JBQWlCVyxhQUFRLzVELHFCQUNWLFNBQVNtMkQsT0FDbEJ4eEQsRUFBSy90QixLQUFLdWpGLGNBRVZ4MUQsR0FDSzVtQixLQUFLbWlFLElBQUlpVyxFQUFTeHhELEVBQUdnOEMsRUFBRyxHQUFLNWlFLEtBQUttaUUsSUFBSXY3QyxFQUFHazhDLE9BQVNsOEMsRUFBR3cyRCxZQUFhLFlBS25FLFNBQVNDLEVBQVFDLE9BQ3JCMTJELEVBQUsvdEIsS0FBS3VqRixTQUVWeDFELEVBQUksU0FDSDIyRCxFQUF3QnRkLFVBQVE4VSxrQkFBa0JudUQsR0FBS2c4QyxFQUFHeWEsRUFBUXhhLEVBQUd5YSxJQUNyRWpJLEVBQVFrSSxFQUFzQmxJLE1BQzlCbUksRUFBV0QsRUFBc0JDLFNBR2pDQyxFQUFhNzJELEVBQUc2MkQsV0FDaEJDLEVBQVc5MkQsRUFBRzgyRCxTQUNYQSxFQUFXRCxNQUNMLEVBQU16OUUsS0FBS2lpRSxRQUVqQm9ULEVBQVFxSSxNQUNMLEVBQU0xOUUsS0FBS2lpRSxRQUVkb1QsRUFBUW9JLE1BQ0wsRUFBTXo5RSxLQUFLaWlFLE9BSWpCMGIsRUFBaUJ0SSxHQUFTb0ksR0FBY3BJLEdBQVNxSSxFQUNqREUsRUFBZ0JKLEdBQVk1MkQsRUFBR2kzRCxhQUFlTCxHQUFZNTJELEVBQUdrM0QsbUJBRXpESCxHQUFpQkMsU0FFbkIsa0JBR1EsZUFDWGgzRCxFQUFLL3RCLEtBQUt1akYsTUFDVjJCLEdBQWFuM0QsRUFBRzYyRCxXQUFhNzJELEVBQUc4MkQsVUFBWSxFQUM1Q00sR0FBY3AzRCxFQUFHaTNELFlBQWNqM0QsRUFBR2szRCxhQUFlLFdBRWpEbDNELEVBQUdnOEMsRUFBSTVpRSxLQUFLZ2lFLElBQUkrYixHQUFhQyxJQUM3QnAzRCxFQUFHaThDLEVBQUk3aUUsS0FBS2tpRSxJQUFJNmIsR0FBYUMsWUFJekIsZUFDSnAzRCxFQUFLL3RCLEtBQUt1akYsYUFDUHA4RSxLQUFLaWlFLEtBQU9yN0MsRUFBRzgyRCxTQUFXOTJELEVBQUc2MkQsYUFBZSxFQUFJejlFLEtBQUtpaUUsTUFBUWppRSxLQUFLbWlFLElBQUl2N0MsRUFBR2szRCxZQUFhLEdBQUs5OUUsS0FBS21pRSxJQUFJdjdDLEVBQUdpM0QsWUFBYSxxQkFHM0csZUFDWmozRCxFQUFLL3RCLEtBQUt1akYsTUFDVjZCLEVBQWNyM0QsRUFBRzYyRCxZQUFlNzJELEVBQUc4MkQsU0FBVzkyRCxFQUFHNjJELFlBQWMsRUFDL0RTLEdBQW1CdDNELEVBQUdrM0QsWUFBY2wzRCxFQUFHaTNELGFBQWUsRUFBSWozRCxFQUFHaTNELHFCQUc3RGozRCxFQUFHZzhDLEVBQUs1aUUsS0FBS2dpRSxJQUFJaWMsR0FBZUMsSUFDaEN0M0QsRUFBR2k4QyxFQUFLN2lFLEtBQUtraUUsSUFBSStiLEdBQWVDLFNBSS9CLGVBQ0QxOEQsRUFBTTNvQixLQUFLaW1FLE9BQU90OUMsSUFDbEJvRixFQUFLL3RCLEtBQUt1akYsTUFDVitCLEVBQUt2M0QsRUFBRzYyRCxXQUNSVyxFQUFLeDNELEVBQUc4MkQsV0FFUjlaLGNBRUFDLElBQUlqOUMsRUFBR2c4QyxFQUFHaDhDLEVBQUdpOEMsRUFBR2o4QyxFQUFHazNELFlBQWFLLEVBQUlDLEtBQ3BDdmEsSUFBSWo5QyxFQUFHZzhDLEVBQUdoOEMsRUFBR2k4QyxFQUFHajhDLEVBQUdpM0QsWUFBYU8sRUFBSUQsR0FBSSxLQUV4Q2hiLGNBQ0FrYixZQUFjejNELEVBQUcwM0QsY0FDakJDLFVBQVkzM0QsRUFBRzQzRCxjQUVmQyxVQUFZNzNELEVBQUc4M0Qsa0JBRWZ2YSxTQUNBd2EsU0FBVyxRQUVYLzNELEVBQUc0M0QsZUFDRnBhLFlDakdId2EsZUFBaUJsWixjQUFTbHFFLE9BRTlCa3FFLGNBQVNDLEtBQUssa0NBR0YsbUJBQ1FpWixlQUFldkQseUJBQ25CLGNBQ0F1RCxlQUFldkQsNEJBQ1osc0NBRUUsa0JBQ0QseUJBQ0EsUUFDWCxNQUtULGlCQUFpQlcsYUFBUS81RCxhQUNsQixlQVFEemlCLEVBQU82c0MsRUFBU3E0QixFQUFVbWEsRUFOMUJqNEQsRUFESy90QixLQUNHdWpGLE1BQ1I1NkQsRUFGSzNvQixLQUVJaW1FLE9BQU90OUMsSUFDaEJzOUQsRUFBV2w0RCxFQUFHazRELFNBQ2R0SSxFQUpLMzlFLEtBSU9rbUYsVUFBVTEwRSxRQUN0QjIwRSxFQUEyQkosZUFBZUssU0FBU0MsS0FDbkRDLEdBQWtCLE1BTmJ0bUYsS0FVRnVtRixPQUFTNUksRUFBTy8yRSxVQUNmcUcsS0FBSzB3RSxFQUFPLE1BR2hCL1MsU0FHQTRiLFFBQVV6NEQsRUFBRzA0RCxnQkFBa0JOLEVBQXlCTSxlQUd4RDk5RCxFQUFJKzlELGVBQ0hBLFlBQVkzNEQsRUFBRzQ0RCxZQUFjUixFQUF5QlEsY0FHdkRDLGVBQWlCNzRELEVBQUc4NEQsa0JBQW9CVixFQUF5QlUsbUJBQ2pFZixTQUFXLzNELEVBQUcrNEQsaUJBQW1CWCxFQUF5Qlcsa0JBQzFEcEIsVUFBWTMzRCxFQUFHNDNELGFBQWVRLEVBQXlCUixjQUN2REgsWUFBY3ozRCxFQUFHMDNELGFBQWVNLGVBQWV2RCxlQUcvQ3pYLGVBQ2MsRUFFYnBrRSxFQUFRLEVBQUdBLEVBQVFnM0UsRUFBTy8yRSxTQUFVRCxJQUM5QmczRSxFQUFPaDNFLEtBQ055Z0UsVUFBUXlYLGFBQWFsQixFQUFRaDNFLEtBQzVCNnNDLEVBQVErdkMsTUFHTixJQUFWNThFLEVBQ0VxL0UsRUFBVTlJLFNBQ1YvUyxPQUFPNmIsRUFBVWpjLEVBQUdpYyxFQUFVaGMsS0FDakJyakUsT0FHYSxJQUFwQjIvRSxFQUF3QnphLEVBQVc4UixFQUFPMkksR0FFaEROLEVBQVU5SSxPQUNUb0osSUFBb0IzL0UsRUFBUSxJQUFPcy9FLElBQWlDLElBQXBCSyxJQUVoRG5jLE9BQU82YixFQUFVamMsRUFBR2ljLEVBQVVoYyxhQUcxQjBWLE9BQU90VixPQUFPemhELEVBQUtrakQsRUFBUzBYLE1BQU8vdkMsRUFBUSt2QyxTQUVuQzU4RSxNQUtoQjRrRSxXQUNBQyxhQ2xGRmdYLGFBQWUzVixjQUFTbHFFLE9BQU82L0UsYUFrQm5DLFNBQVN1RSxPQUFPeEgsT0FDWHh4RCxFQUFLL3RCLEtBQUt1akYsY0FDUHgxRCxHQUFNNW1CLEtBQUttMEUsSUFBSWlFLEVBQVN4eEQsRUFBR2c4QyxHQUFLaDhDLEVBQUdrOEMsT0FBU2w4QyxFQUFHaTVELFVBR3ZELFNBQVNDLE9BQU96SCxPQUNYenhELEVBQUsvdEIsS0FBS3VqRixjQUNQeDFELEdBQU01bUIsS0FBS20wRSxJQUFJa0UsRUFBU3p4RCxFQUFHaThDLEdBQUtqOEMsRUFBR2s4QyxPQUFTbDhDLEVBQUdpNUQsVUF2QnZEbmEsY0FBU0MsS0FBSyxrQ0FHSCxhQUNJLHlCQUNLMFYseUJBQ0pBLHlCQUNBLFlBRUYsY0FDRSxtQkFDSyxNQWVyQixrQkFBaUJXLGFBQVEvNUQsZ0JBQ2YsU0FBU20yRCxFQUFRQyxPQUNyQnp4RCxFQUFLL3RCLEtBQUt1akYsY0FDUHgxRCxHQUFPNW1CLEtBQUttaUUsSUFBSWlXLEVBQVN4eEQsRUFBR2c4QyxFQUFHLEdBQUs1aUUsS0FBS21pRSxJQUFJa1csRUFBU3p4RCxFQUFHaThDLEVBQUcsR0FBTTdpRSxLQUFLbWlFLElBQUl2N0MsRUFBR2k1RCxVQUFZajVELEVBQUdrOEMsT0FBUSxpQkFHL0Y4YyxnQkFDSkEsZ0JBQ0FFLHNCQUVNLGVBQ1hsNUQsRUFBSy90QixLQUFLdWpGLGVBRVZ4MUQsRUFBR2c4QyxJQUNIaDhDLEVBQUdpOEMsWUFJQyxrQkFDRDdpRSxLQUFLaWlFLEdBQUtqaUUsS0FBS21pRSxJQUFJdHBFLEtBQUt1akYsTUFBTXRaLE9BQVEsb0JBRzdCLGVBQ1psOEMsRUFBSy90QixLQUFLdWpGLGVBRVZ4MUQsRUFBR2c4QyxJQUNIaDhDLEVBQUdpOEMsVUFDR2o4QyxFQUFHazhDLE9BQVNsOEMsRUFBRzQzRCxtQkFJcEIsU0FBUzdNLE9BQ1YvcUQsRUFBSy90QixLQUFLdWpGLE1BQ1ZsK0MsRUFBUXJsQyxLQUFLcytFLE9BQ2IzMUQsRUFBTTNvQixLQUFLaW1FLE9BQU90OUMsSUFDbEJ1K0QsRUFBYW41RCxFQUFHbTVELFdBQ2hCMWMsRUFBV3o4QyxFQUFHeThDLFNBQ2RQLEVBQVNsOEMsRUFBR2s4QyxPQUNaRixFQUFJaDhDLEVBQUdnOEMsRUFDUEMsRUFBSWo4QyxFQUFHaThDLEVBR1BqOEMsRUFBR212RCxZQUtXejVFLElBQWRxMUUsR0FBNEJ6ekMsRUFBTTBrQyxHQUFLK08sRUFBVS9uQixNQVByQyxLQU82QytuQixFQUFVdDNCLE9BQXFCbmMsRUFBTTBrQyxHQUFLMWtDLEVBQU0ya0MsR0FBSzhPLEVBQVU3bkIsS0FQNUcsS0FPbUg2bkIsRUFBVW5OLFFBQXNCdG1DLEVBQU0ya0MsT0FDcEt3YixZQUFjejNELEVBQUcwM0QsYUFBZWpELGVBQ2hDa0QsVUFBWXRlLFVBQVFDLGVBQWV0NUMsRUFBRzQzRCxZQUFhOVksY0FBU2xxRSxPQUFPeWpGLFNBQVMvSCxNQUFNc0gsZUFDbEZDLFVBQVk3M0QsRUFBRzgzRCxpQkFBbUJyRCx1QkFDOUI5QyxPQUFPeUgsVUFBVXgrRCxFQUFLdStELEVBQVlqZCxFQUFRRixFQUFHQyxFQUFHUSxPQ3JFM0QsU0FBUzRjLFdBQVdDLGVBQ1E1akYsSUFBcEI0akYsRUFBSTlELE1BQU0xWixNQVNsQixTQUFTeWQsYUFBYUQsT0FFakJFLEVBQUlDLEVBQUlDLEVBQUl2VyxFQURabmpELEVBQUtzNUQsRUFBSTlELFNBR1Q2RCxXQUFXQyxHQUFNLEtBRWhCSyxFQUFZMzVELEVBQUc4N0MsTUFBUSxJQUN0Qjk3QyxFQUFHZzhDLEVBQUkyZCxJQUNQMzVELEVBQUdnOEMsRUFBSTJkLElBQ1B2Z0YsS0FBS2diLElBQUk0TCxFQUFHaThDLEVBQUdqOEMsRUFBR2lhLFFBQ2xCN2dDLEtBQUtDLElBQUkybUIsRUFBR2k4QyxFQUFHajhDLEVBQUdpYSxVQUNqQixLQUVGMi9DLEVBQWE1NUQsRUFBRys3QyxPQUFTLElBQ3hCM2lFLEtBQUtnYixJQUFJNEwsRUFBR2c4QyxFQUFHaDhDLEVBQUdpYSxRQUNsQjdnQyxLQUFLQyxJQUFJMm1CLEVBQUdnOEMsRUFBR2g4QyxFQUFHaWEsUUFDbEJqYSxFQUFHaThDLEVBQUkyZCxJQUNQNTVELEVBQUdpOEMsRUFBSTJkLGNBSU5KLE1BQ0RFLFFBQ0VELFNBQ0N0VyxHQTdDVnJFLGNBQVNDLEtBQUssK0NBR01ELGNBQVNscUUsT0FBTzYvRSx5QkFDcEIzVixjQUFTbHFFLE9BQU82L0UsMkJBQ2QscUJBQ0YsTUEyQ2hCLHNCQUFpQlcsYUFBUS81RCxhQUNsQixlQUdEMm5DLEVBQU12UCxFQUFPeVAsRUFBSzBhLEVBQVFpYyxFQUFPQyxFQUFPQyxFQUZ4Q24vRCxFQUFNM29CLEtBQUtpbUUsT0FBT3Q5QyxJQUNsQm9GLEVBQUsvdEIsS0FBS3VqRixNQUVWb0MsRUFBYzUzRCxFQUFHNDNELGVBRWhCNTNELEVBQUdnNkQsY0FXQWg2RCxFQUFHaWEsT0FDRmphLEVBQUdnOEMsSUFDTGg4QyxFQUFHaThDLEVBQUlqOEMsRUFBRys3QyxPQUFTLElBQ2hCLzdDLEVBQUdpOEMsRUFBSWo4QyxFQUFHKzdDLE9BQVMsSUFDcEJ0b0IsRUFBUXVQLEVBQU8sR0FBSyxJQUNwQixJQUNRaGpDLEVBQUcrNUQsZUFBaUIsV0FmN0IvNUQsRUFBR2c4QyxFQUFJaDhDLEVBQUc4N0MsTUFBUSxJQUNqQjk3QyxFQUFHZzhDLEVBQUloOEMsRUFBRzg3QyxNQUFRLElBQ3BCOTdDLEVBQUdpOEMsSUFFRCxPQURDajhDLEVBQUdpYSxNQUVLaXBCLEVBQU0sR0FBSyxJQUNabGpDLEVBQUcrNUQsZUFBaUIsVUFjakNuQyxFQUFhLEtBRVpxQyxFQUFVN2dGLEtBQUtnYixJQUFJaGIsS0FBS20wRSxJQUFJdnFCLEVBQU92UCxHQUFRcjZDLEtBQUttMEUsSUFBSXJxQixFQUFNMGEsSUFFMURzYyxLQURVdEMsRUFBY3FDLEVBQVVBLEVBQVVyQyxHQUNqQixFQUUzQnVDLEVBQWFuM0IsR0FBMEIsU0FBbEIrMkIsRUFBMkJHLEVBQWFMLEVBQVEsR0FDckVPLEVBQWMzbUMsR0FBMkIsVUFBbEJzbUMsR0FBNkJHLEVBQWFMLEVBQVEsR0FDekVRLEVBQVluM0IsR0FBeUIsUUFBbEI2MkIsRUFBMEJHLEVBQWFKLEVBQVEsR0FDbEVRLEVBQWUxYyxHQUE0QixXQUFsQm1jLEdBQThCRyxFQUFhSixFQUFRLEdBRTVFSyxJQUFlQyxNQUNaQyxJQUNHQyxHQUdORCxJQUFjQyxNQUNWSCxJQUNDQyxLQUlOcGQsY0FDQTZhLFVBQVk3M0QsRUFBRzgzRCxrQkFDZkwsWUFBY3ozRCxFQUFHMDNELGNBQ2pCQyxVQUFZQyxNQUtaMkMsSUFDRnYzQixFQUFNNGEsSUFDTjVhLEVBQU1FLElBQ056UCxFQUFPeVAsSUFDUHpQLEVBQU9tcUIsSUFLTDRjLEdBRFcsU0FBVSxPQUFRLE1BQU8sU0FDZHpnRSxRQUFRZ2dFLEVBQWUsWUFLeENVLEVBQVM3aEYsVUFDVjJoRixHQUFTQyxFQUFjNWhGLEdBQVMsSUFMbkIsSUFBakI0aEYsTUFDVyxPQVFYRSxFQUFTRCxFQUFTLEtBQ2xCcmUsT0FBT3NlLEVBQU8sR0FBSUEsRUFBTyxRQUV4QixJQUFJeGtFLEVBQUksRUFBR0EsRUFBSSxFQUFHQSxNQUNidWtFLEVBQVN2a0UsS0FDZG1tRCxPQUFPcWUsRUFBTyxHQUFJQSxFQUFPLE1BRzFCbmQsT0FDQXFhLEtBQ0NwYSxpQkFJRSxlQUNIeDlDLEVBQUsvdEIsS0FBS3VqRixhQUNQeDFELEVBQUdpYSxLQUFPamEsRUFBR2k4QyxXQUdaLFNBQVN1VixFQUFRQyxPQUNyQmtKLEdBQVUsS0FFVjFvRixLQUFLdWpGLE1BQU8sS0FDWG9GLEVBQVNyQixhQUFhdG5GLFFBQ2hCdS9FLEdBQVVvSixFQUFPNTNCLE1BQVF3dUIsR0FBVW9KLEVBQU9ubkMsT0FBU2crQixHQUFVbUosRUFBTzEzQixLQUFPdXVCLEdBQVVtSixFQUFPaGQsY0FHaEcrYyxnQkFHTSxTQUFTbkosRUFBUUMsT0FDckJ4L0UsS0FDRHVqRixhQUNBLE1BSUpvRixFQUFTckIsYUFOSnRuRixhQVFMb25GLFdBUktwbkYsTUFTRXUvRSxHQUFVb0osRUFBTzUzQixNQUFRd3VCLEdBQVVvSixFQUFPbm5DLE1BRTFDZytCLEdBQVVtSixFQUFPMTNCLEtBQU91dUIsR0FBVW1KLEVBQU9oZCxpQkFNM0MsU0FBUzRULE9BQ2RvSixFQUFTckIsYUFBYXRuRixhQUNuQnUvRSxHQUFVb0osRUFBTzUzQixNQUFRd3VCLEdBQVVvSixFQUFPbm5DLGdCQUd4QyxTQUFTZytCLE9BQ2RtSixFQUFTckIsYUFBYXRuRixhQUNuQncvRSxHQUFVbUosRUFBTzEzQixLQUFPdXVCLEdBQVVtSixFQUFPaGQsdUJBR2pDLGVBRVg1QixFQUFHQyxFQURIajhDLEVBQUsvdEIsS0FBS3VqRixhQUVWNkQsV0FBV3BuRixTQUNWK3RCLEVBQUdnOEMsS0FDRmg4QyxFQUFHaThDLEVBQUlqOEMsRUFBR2lhLE1BQVEsT0FFbEJqYSxFQUFHZzhDLEVBQUloOEMsRUFBR2lhLE1BQVEsSUFDbkJqYSxFQUFHaThDLElBR0FELEVBQUdBLEVBQUdDLEVBQUdBLFlBR1QsZUFDSmo4QyxFQUFLL3RCLEtBQUt1akYsYUFDUHgxRCxFQUFHODdDLE1BQVExaUUsS0FBS20wRSxJQUFJdnRELEVBQUdpOEMsRUFBSWo4QyxFQUFHaWEsdUJBR3JCLGVBQ1pqYSxFQUFLL3RCLEtBQUt1akYsZUFFVngxRCxFQUFHZzhDLElBQ0hoOEMsRUFBR2k4QyxzQkNsTll3QyxpQkFDQ0MsbUJBQ0NDLHdCQUNJQyxrQkNJM0IsU0FBUzBTLG9CQUFvQnI3RSxFQUFHZ2lFLFVBQzNCaGlFLEVBQUUwOUMsVUFFRDE5QyxFQUFFK2xFLElBQ0YvbEUsRUFBRWdtRSxHQUlBNUMsVUFBUWlZLG9CQUFvQnI3RSxFQUFHZ2lFLEdBUXZDLFNBQVM0aUIsa0JBQWtCNWlCLEVBQU9odEMsT0FFN0I2dkQsRUFBTTVrRSxFQUFHdW9CLEVBQUdrN0IsRUFBTW9oQixNQUVqQjdrRSxFQUFJLEVBQUd5akQsRUFIRzFCLEVBQU03akUsS0FBS2drRSxTQUdFdi9ELE9BQVFxZCxFQUFJeWpELElBQVF6akQsS0FDMUMraEQsRUFBTStpQixpQkFBaUI5a0UsT0FLdkJ1b0IsRUFBSSxFQUFHczhDLEtBREw5aUIsRUFBTWdqQixlQUFlL2tFLElBQ0o5aEIsS0FBS3lFLE9BQVE0bEMsRUFBSXM4QyxJQUFRdDhDLEVBQUcsS0FDL0M1bUIsRUFBVWlqRSxFQUFLMW1GLEtBQUtxcUMsR0FDbkI1bUIsRUFBUTI5RCxNQUFNckcsUUFDVnQzRCxJQVlaLFNBQVNxakUsa0JBQWtCampCLEVBQU8wUCxPQUM3QjBRLDhCQUVjcGdCLEVBQU8sU0FBU3BnRCxHQUM3QkEsRUFBUThpRSxRQUFRaFQsRUFBUzNMLEVBQUcyTCxFQUFTMUwsTUFDL0IvOEQsS0FBSzJZLEtBSVR3Z0UsRUFXUixTQUFTOEMsZ0JBQWdCbGpCLEVBQU8wUCxFQUFVeVQsRUFBV0MsT0FDaERDLEVBQWM5d0QsT0FBTzhoRCxrQkFDckJpUCw4QkFFY3RqQixFQUFPLFNBQVNwZ0QsT0FDN0J1akUsR0FBY3ZqRSxFQUFROGlFLFFBQVFoVCxFQUFTM0wsRUFBRzJMLEVBQVMxTCxRQUluRHVmLEVBQVMzakUsRUFBUTRqRSxpQkFDakI3RSxFQUFXeUUsRUFBZTFULEVBQVU2VCxHQUVwQzVFLEVBQVcwRSxNQUNFempFLEtBQ0YrK0QsR0FDSkEsSUFBYTBFLEtBRVZwOEUsS0FBSzJZLE1BSWIwakUsRUFRUixTQUFTRyx5QkFBeUJDLE9BQzdCQyxHQUE4QixJQUF2QkQsRUFBSzVoRSxRQUFRLEtBQ3BCOGhFLEdBQThCLElBQXZCRixFQUFLNWhFLFFBQVEsWUFFakIsU0FBUzQwRCxFQUFLQyxPQUNoQndCLEVBQVN3TCxFQUFPeGlGLEtBQUttMEUsSUFBSW9CLEVBQUkzUyxFQUFJNFMsRUFBSTVTLEdBQUssRUFDMUM4ZixFQUFTRCxFQUFPemlGLEtBQUttMEUsSUFBSW9CLEVBQUkxUyxFQUFJMlMsRUFBSTNTLEdBQUssU0FDdkM3aUUsS0FBS29pRSxLQUFLcGlFLEtBQUttaUUsSUFBSTZVLEVBQVEsR0FBS2gzRSxLQUFLbWlFLElBQUl1Z0IsRUFBUSxLQUkxRCxTQUFTQyxVQUFVOWpCLEVBQU9oaUUsRUFBR3VNLE9BQ3hCbWxFLEVBQVcySixvQkFBb0JyN0UsRUFBR2dpRSxLQUU5QjBqQixLQUFPbjVFLEVBQVFtNUUsTUFBUSxRQUMzQk4sRUFBaUJLLHlCQUF5Qmw1RSxFQUFRbTVFLE1BQ2xEN25FLEVBQVF0UixFQUFRNDRFLFVBQVlGLGtCQUFrQmpqQixFQUFPMFAsR0FBWXdULGdCQUFnQmxqQixFQUFPMFAsR0FBVSxFQUFPMFQsR0FDekdoRCxZQUVDdmtFLEVBQU1qYixVQUlMekUsS0FBS2drRSxTQUFTN3pELFFBQVEsU0FBU3FSLEVBQVNvbUUsTUFDekMvakIsRUFBTStpQixpQkFBaUJnQixHQUFlLEtBRXJDbmtFLEVBRE9vZ0QsRUFBTWdqQixlQUFlZSxHQUNiNW5GLEtBQUswZixFQUFNLEdBQUdtb0UsUUFHN0Jwa0UsSUFBWUEsRUFBUTI5RCxNQUFNckcsUUFDcEJqd0UsS0FBSzJZLE1BS1Z3Z0UsNEZBZ0JSLG9DQUdVLFNBQVNwZ0IsRUFBT2hpRSxPQUNuQjB4RSxFQUFXMkosb0JBQW9CcjdFLEVBQUdnaUUsR0FDbENvZ0IsOEJBRWNwZ0IsRUFBTyxTQUFTcGdELE1BQzdCQSxFQUFROGlFLFFBQVFoVCxFQUFTM0wsRUFBRzJMLEVBQVMxTCxZQUMvQi84RCxLQUFLMlksR0FDUHdnRSxJQUlGQSxFQUFTNTBFLE1BQU0sRUFBRyxVQVNuQnM0RSxnQkFZQUEsa0JBV0UsU0FBUzlqQixFQUFPaGlFLEVBQUd1TSxPQUN2Qm1sRSxFQUFXMkosb0JBQW9CcjdFLEVBQUdnaUUsS0FDOUIwakIsS0FBT241RSxFQUFRbTVFLE1BQVEsU0FDM0JOLEVBQWlCSyx5QkFBeUJsNUUsRUFBUW01RSxNQUNsRDduRSxFQUFRdFIsRUFBUTQ0RSxVQUFZRixrQkFBa0JqakIsRUFBTzBQLEdBQVl3VCxnQkFBZ0JsakIsRUFBTzBQLEdBQVUsRUFBTzBULFVBRXpHdm5FLEVBQU1qYixPQUFTLE1BQ1ZvL0QsRUFBTWdqQixlQUFlbm5FLEVBQU0sR0FBR29vRSxlQUFlOW5GLE1BRy9DMGYsWUFTRSxTQUFTbWtELEVBQU9oaUUsVUFDbEI4bEYsVUFBVTlqQixFQUFPaGlFLEdBQUltbEYsV0FBVyxXQVdqQyxTQUFTbmpCLEVBQU9oaUUsVUFFZmlsRixrQkFBa0JqakIsRUFEVnFaLG9CQUFvQnI3RSxFQUFHZ2lFLGFBWTlCLFNBQVNBLEVBQU9oaUUsRUFBR3VNLE9BQ3ZCbWxFLEVBQVcySixvQkFBb0JyN0UsRUFBR2dpRSxLQUM5QjBqQixLQUFPbjVFLEVBQVFtNUUsTUFBUSxTQUMzQk4sRUFBaUJLLHlCQUF5Qmw1RSxFQUFRbTVFLE1BQ2xESixFQUFlSixnQkFBZ0JsakIsRUFBTzBQLEVBQVVubEUsRUFBUTQ0RSxVQUFXQyxVQUduRUUsRUFBYTFpRixPQUFTLEtBQ1pxWCxLQUFLLFNBQVM0SyxFQUFHWSxPQUd6Qk4sRUFGUU4sRUFBRXFoRSxVQUNGemdFLEVBQUV5Z0UsaUJBR0YsSUFBUi9nRSxNQUVHTixFQUFFb2hFLGNBQWdCeGdFLEVBQUV3Z0UsZUFHcEI5Z0UsSUFLRm1nRSxFQUFhOTNFLE1BQU0sRUFBRyxNQVczQixTQUFTdzBELEVBQU9oaUUsRUFBR3VNLE9BQ2pCbWxFLEVBQVcySixvQkFBb0JyN0UsRUFBR2dpRSxHQUNsQ25rRCxLQUNBc29FLEdBQWlCLDJCQUVIbmtCLEVBQU8sU0FBU3BnRCxHQUM3QkEsRUFBUXdrRSxTQUFTMVUsRUFBUzNMLE1BQ3ZCOThELEtBQUsyWSxHQUdSQSxFQUFROGlFLFFBQVFoVCxFQUFTM0wsRUFBRzJMLEVBQVMxTCxRQUN2QixLQU1mejVELEVBQVE0NEUsWUFBY2dCLFVBR25CdG9FLEtBV0wsU0FBU21rRCxFQUFPaGlFLEVBQUd1TSxPQUNqQm1sRSxFQUFXMkosb0JBQW9CcjdFLEVBQUdnaUUsR0FDbENua0QsS0FDQXNvRSxHQUFpQiwyQkFFSG5rQixFQUFPLFNBQVNwZ0QsR0FDN0JBLEVBQVF5a0UsU0FBUzNVLEVBQVMxTCxNQUN2Qi84RCxLQUFLMlksR0FHUkEsRUFBUThpRSxRQUFRaFQsRUFBUzNMLEVBQUcyTCxFQUFTMUwsUUFDdkIsS0FNZno1RCxFQUFRNDRFLFlBQWNnQixVQUduQnRvRSxvQ0NoVU8sU0FBU2dHLFVBQ3BCQSxHQUFRQSxFQUFLNjNELFdBRVQ3M0QsRUFBSzYzRCxRQUdONzNELEdBQVFBLEVBQUt5aUUsV0FBVyxPQUFTLE9DSnRDQyxZQUFjLFdBQ2RDLFdBQWEsV0FDYkMsbUJBQXFCRCxXQUFhLGlCQUNsQ0UscUJBQXVCRixXQUFhLG1CQUNwQ0csd0JBQTBCLGlCQUFrQix3QkFPNUNDLHdCQUNTLHNCQUNELHFCQUNELHVCQUNJLHlCQUNELHdCQUNBLHNCQUNGLHVCQUNHLHNCQUNGLFlBWWIsU0FBU0MsYUFBYWpsRSxFQUFTaEksT0FDMUJqYSxFQUFReWpFLFVBQVFyaEIsU0FBU25nQyxFQUFTaEksR0FDbEMwRixFQUFVM2YsR0FBU0EsRUFBTXZDLE1BQU0sNEJBQzVCa2lCLEVBQVVpVixPQUFPalYsRUFBUSxTQUFNN2YsRUFRdkMsU0FBU3FuRixXQUFXcEwsRUFBUW5nRSxPQUN2QnduQixFQUFRMjRDLEVBQU8zNEMsTUFJZmdrRCxFQUFlckwsRUFBT2o4RCxhQUFhLFVBQ25DdW5FLEVBQWN0TCxFQUFPajhELGFBQWEsY0FHL0I4bUUsOEJBRUdRLFFBQ0RDLGlCQUVHamtELEVBQU1tbkIsZUFDUG5uQixFQUFNK2lDLGFBQ1AvaUMsRUFBTThpQyxXQVFWM2IsUUFBVW5uQixFQUFNbW5CLFNBQVcsUUFFYixPQUFoQjg4QixHQUF3QyxLQUFoQkEsRUFBb0IsS0FDM0NDLEVBQWVKLGFBQWFuTCxFQUFRLGNBQ25CajhFLElBQWpCd25GLE1BQ0lwaEIsTUFBUW9oQixNQUlJLE9BQWpCRixHQUEwQyxLQUFqQkEsS0FDQSxLQUF4QnJMLEVBQU8zNEMsTUFBTStpQyxTQUlUQSxPQUFTNFYsRUFBTzdWLE9BQVN0cUQsRUFBT2hQLFFBQVEyNkUsYUFBZSxPQUN4RCxLQUNGQyxFQUFnQk4sYUFBYW5MLEVBQVEsZUFDcEJqOEUsSUFBakJ3bkYsTUFDSW5oQixPQUFTcWhCLFVBS1p6TCxFQVFSLElBQUkwTCw2QkFBZ0MsZUFDL0JDLEdBQVcsVUFFVjk2RSxFQUFVek4sT0FBT2tELGtCQUFtQixlQUNsQyxjQUNPLFlBR05xZCxpQkFBaUIsSUFBSyxLQUFNOVMsR0FDbEMsTUFBT3ZNLFdBR0ZxbkYsRUFaNEIsR0FpQmhDQyx1QkFBdUJGLCtCQUFnQ2p2RCxTQUFTLEdBRXBFLFNBQVM5WSxrQkFBaUIrTixFQUFNN3NCLEVBQU1nbkYsS0FDaENsb0UsaUJBQWlCOWUsRUFBTWduRixFQUFVRCxzQkFHdkMsU0FBU3puRSxxQkFBb0J1TixFQUFNN3NCLEVBQU1nbkYsS0FDbkMxbkUsb0JBQW9CdGYsRUFBTWduRixFQUFVRCxzQkFHMUMsU0FBU3Y5QyxZQUFZeHBDLEVBQU15aEUsRUFBTytELEVBQUdDLEVBQUd3aEIsZUFFaENqbkYsUUFDQ3loRSxTQUNDd2xCLEdBQWUsWUFDZC9uRixJQUFOc21FLEVBQWtCQSxFQUFJLFlBQ2hCdG1FLElBQU51bUUsRUFBa0JBLEVBQUksTUFJM0IsU0FBU3loQixnQkFBZ0IzcUUsRUFBT2tsRCxPQUMzQnpoRSxFQUFPcW1GLFlBQVk5cEUsRUFBTXZjLE9BQVN1YyxFQUFNdmMsS0FDeENvckQsRUFBTXlYLFVBQVFpWSxvQkFBb0J2K0QsRUFBT2tsRCxVQUN0Q2o0QixZQUFZeHBDLEVBQU15aEUsRUFBT3JXLEVBQUlvYSxFQUFHcGEsRUFBSXFhLEVBQUdscEQsR0FHL0MsU0FBUzRxRSxVQUFVempFLEVBQUlqaEIsT0FDbEIya0YsR0FBVSxFQUNWMWtGLFlBRUcsYUFDQ1MsTUFBTXRFLFVBQVVvTyxNQUFNM04sS0FBSzJELGFBQ3hCUixHQUFXaEgsS0FFaEIyckYsT0FDTSxZQUNGM00saUJBQWlCbjdFLEtBQUtyRCxPQUFRLGNBQzNCLElBQ1B1RyxNQUFNQyxFQUFTQyxPQU90QixTQUFTMmtGLGNBQWM1eUQsT0FDbEI2eUQsRUFBVXhwRixTQUFTQyxjQUFjLE9BQ2pDczhDLEVBQU00ckMsV0FBYSxlQUVuQnpqRCxFQUNILHNIQVVPQSxNQUFNMGUsUUFBVTFlLElBQ2hCK2tELFVBQVlsdEMsSUFDWnI4QyxVQUNQLGVBQWlCcThDLEVBQU0sbUJBQXFCN1gsRUFBUSwwR0FTbkM2WCxFQUFNLG1CQUFxQjdYLEVBQVEseUZBVWpEZ2xELEVBQVNGLEVBQVF4dkMsV0FBVyxHQUM1QjJ2QyxFQUFTSCxFQUFReHZDLFdBQVcsS0FFeEI0dkMsT0FBUyxhQUNUQyxXQXRDTSxNQXVDTkMsVUF2Q00sTUF3Q05ELFdBeENNLE1BeUNOQyxVQXpDTSxTQTJDVkMsRUFBVyxhQUNOSCx1Q0FJUUYsRUFBUSxTQUFVSyxFQUFTbmpFLEtBQUs4aUUsRUFBUSw2QkFDeENDLEVBQVEsU0FBVUksRUFBU25qRSxLQUFLK2lFLEVBQVEsV0FFbERILEVBSVIsU0FBU1EsZUFBZWo3RCxFQUFNNEgsT0FDekJzekQsRUFBVWw3RCxFQUFLbTVELGVBQWlCbjVELEVBQUttNUQsaUJBQ3JDcHJELEVBQVFtdEQsRUFBUUMsWUFBYyxTQUFTdm9GLEdBQ3RDQSxFQUFFd29GLGdCQUFrQjlCLHFDQUtqQnBpQixLQUFLcWlCLHVCQUF3QixTQUFTcG1GLHFCQUM1QjZzQixFQUFNN3NCLEVBQU00NkIsT0FRdEJzdEQsU0FBV3I3RCxFQUFLczdELGVBRW5CNW9FLFVBQVUxTSxJQUFJcXpFLG9CQUdwQixTQUFTa0MsaUJBQWlCdjdELE9BQ3JCazdELEVBQVVsN0QsRUFBS201RCxpQkFDZnByRCxFQUFRbXRELEVBQVFDLFlBRWhCcHRELGNBQ0ttcEMsS0FBS3FpQix1QkFBd0IsU0FBU3BtRix3QkFDekI2c0IsRUFBTTdzQixFQUFNNDZCLFlBRzFCbXRELEVBQVFDLGVBR1h6b0UsVUFBVTZELE9BQU84aUUsb0JBR3ZCLFNBQVNtQyxrQkFBa0J4N0QsRUFBTW02RCxFQUFVdmxCLE9BQ3RDc21CLEVBQVVsN0QsRUFBS201RCxlQUFpQm41RCxFQUFLbTVELGlCQUdyQ3NCLEVBQVVTLEVBQVFULFFBQVVELGNBQWNGLFVBQVUsY0FDbkRZLEVBQVFULGVBQ0pOLEVBQVN4OUMsWUFBWSxTQUFVaTRCLHNCQU16QjUwQyxFQUFNLGNBQ2hCazdELEVBQVFULFFBQVMsS0FDaEI3bkIsRUFBWTV5QyxFQUFLOGpCLFdBQ2pCOHVCLEdBQWFBLElBQWM2bkIsRUFBUTMyQyxjQUM1QnlCLGFBQWFrMUMsRUFBUzduQixFQUFVNW5CLGNBSW5DNnZDLFlBS1gsU0FBU1kscUJBQXFCejdELE9BQ3pCazdELEVBQVVsN0QsRUFBS201RCxpQkFDZnNCLEVBQVVTLEVBQVFULGVBRWZTLEVBQVFULHlCQUNFejZELEdBRWJ5NkQsR0FBV0EsRUFBUTMyQyxjQUNkQSxXQUFXNEIsWUFBWSswQyxHQUlqQyxTQUFTaUIsVUFBVW5oRSxFQUFVMjdCLE9BRXhCdmdCLEVBQVFwYixFQUFTb2hFLFFBQVUxcUYsU0FBU0MsY0FBYyxTQUNqRHFwQixFQUFTb2hFLFdBQ0pBLE9BQVNobUQsSUFDWixtQkFBcUJ1Z0IsSUFDckI5a0QsYUFBYSxPQUFRLHFCQUNsQjZpRSxxQkFBcUIsUUFBUSxHQUFHM2lFLFlBQVlxa0MsTUFHaERya0MsWUFBWUwsU0FBUzYzQixlQUFlb3RCLElBRzNDLDJCQU02QixvQkFBWDltRCxRQUE4QyxvQkFBYjZCLG9CQUV0QyxlQUNQMnFGLEVBQVksNENBRU5odEYsMkJBR2UwcUYscUJBQXVCLElBQU1zQyxFQUFZLGVBQ2pEdEMscUJBQXVCLElBQU1zQyxFQUFZLEtBQ25EdkMsbUJBQXFCLHNCQUNIQyxxQkFBdUIscUJBQy9CQSxxQkFBdUIsNkJBS3pCLFNBQVM3aUUsRUFBTXRJLEdBQ1YsaUJBQVRzSSxJQUNIeGxCLFNBQVM0cUYsZUFBZXBsRSxHQUNyQkEsRUFBS2poQixXQUVSaWhCLEVBQUssSUFHVEEsR0FBUUEsRUFBSzYzRCxXQUVUNzNELEVBQUs2M0QsWUFNVHh2RCxFQUFVckksR0FBUUEsRUFBS3lpRSxZQUFjemlFLEVBQUt5aUUsV0FBVyxhQVNyRHA2RCxHQUFXQSxFQUFRd3ZELFNBQVc3M0QsY0FDdEJBLEVBQU10SSxHQUNWMlEsR0FHRCxxQkFHUSxTQUFTQSxPQUNwQnd2RCxFQUFTeHZELEVBQVF3dkQsVUFDaEJBLEVBQU82SyxrQkFJUjF1QyxFQUFVNmpDLEVBQU82SyxhQUFhMXVDLFNBQ2pDLFNBQVUsU0FBU3ZwQyxRQUFRLFNBQVNva0IsT0FDaEMveUIsRUFBUWs0QyxFQUFRbmxCLEdBQ2hCMHdDLFVBQVE0VCxjQUFjcjNFLEtBQ2xCKzRDLGdCQUFnQmhtQixLQUVoQmwwQixhQUFhazBCLEVBQU0veUIsZUFJcEIya0UsS0FBS3pzQixFQUFROVUsVUFBYSxTQUFTcGpDLEVBQU9tQyxLQUMxQ2loQyxNQUFNamhDLEdBQU9uQyxNQU9ka21FLE1BQVE2VixFQUFPN1YsYUFFZjZWLEVBQU82SyxnQ0FHRyxTQUFTdmtCLEVBQU96aEUsRUFBTWduRixPQUNuQzdMLEVBQVMxWixFQUFNMFosVUFDTixXQUFUbjdFLE9BTUErbkYsRUFBVWYsRUFBU2hCLGVBQWlCZ0IsRUFBU2hCLG1DQU1oQzdLLEVBQVFuN0UsR0FMWCtuRixFQUFRWSxVQUFZWixFQUFRWSxhQUN0QmxuQixFQUFNLzJDLEdBQUssSUFBTTFxQixHQUFRLFNBQVN1YyxLQUM1QzJxRSxnQkFBZ0IzcUUsRUFBT2tsRCw2QkFQZDBaLEVBQVE2TCxFQUFVdmxCLHdCQWFqQixTQUFTQSxFQUFPemhFLEVBQU1nbkYsT0FDdEM3TCxFQUFTMVosRUFBTTBaLFVBQ04sV0FBVG43RSxPQVFBNDZCLElBRlVvc0QsRUFBU2hCLGtCQUNEMkMsYUFDRmxuQixFQUFNLzJDLEdBQUssSUFBTTFxQixHQUNoQzQ2Qix3QkFJZXVnRCxFQUFRbjdFLEVBQU00NkIsNkJBWFp1Z0QsRUFBUTZMLEtBMEJoQ25rQixVQUFRK2xCLFNBQVc5cEUsa0JBV25CK2pELFVBQVFnbUIsWUFBY3ZwRSxxQkNqY3RCLElBQUl3cEUsZUFBaUJDLGFBQUlDLFNBQVdELGFBQU1FLHdCQU96QnBtQixVQUFRaCtDLG1CQUlaLDRCQVNJLDRCQVFBLDhCQVNFLGlDQVFHLGNBRW5CaWtFLGdCQ2pESHhnQixjQUFTQyxLQUFLLHVCQVNkLHVDQWFXLFdBTUEsU0FBUzJnQixPQUNkN3pELEVBQUk1NUIsS0FBSzB0RixZQUNSaHJFLE9BQU8rcUUsR0FBU243RSxRQUFRLFNBQVMwL0IsSUFDVixJQUF2QnBZLEVBQUU5UixRQUFRa3FCLE1BQ1gva0MsS0FBSytrQyxVQUlKMjdDLHVCQU9NLFNBQVNGLE9BQ2hCN3pELEVBQUk1NUIsS0FBSzB0RixZQUNSaHJFLE9BQU8rcUUsR0FBU243RSxRQUFRLFNBQVMwL0IsT0FDakM0N0MsRUFBTWgwRCxFQUFFOVIsUUFBUWtxQixJQUNQLElBQVQ0N0MsS0FDRGg3RSxPQUFPZzdFLEVBQUssVUFJWEQsa0JBT0MsZ0JBQ0RELGlCQUNBQyxrQkFRQyxrQkFDQzN0RixLQUFLMHRGLFNBQVM5bUYsZUFRZCxrQkFDQTVHLEtBQUswdEYsaUJBWUwsU0FBUzFuQixFQUFPcHhDLEVBQU0zdEIsT0FHekJnZCxFQUFHNHBFLEVBQVk3N0MsRUFBUWpWLEVBQVFwTCxFQUYvQm04RCxFQUFjOXRGLEtBQUs4dEYsWUFBWTluQixHQUMvQjBCLEVBQU9vbUIsRUFBWWxuRixXQUdsQnFkLEVBQUksRUFBR0EsRUFBSXlqRCxJQUFRempELEtBSUQsMkJBSFQ2cEUsRUFBWTdwRSxJQUNMK3RCLFFBQ0pwZCxVQUVMb3hDLEdBQU90akQsT0FBT3piLFFBQ2pCZ0csS0FBSzRnRixFQUFXdDlFLFVBQ2MsSUFBakNvaEIsRUFBTzVxQixNQUFNaXJDLEVBQVFqVixXQUNqQixTQUtILGVBUUssU0FBU2lwQyxPQUNqQnh1RCxFQUFRd3VELEVBQU0rbkIsV0FBYS9uQixFQUFNK25CLGdCQUNqQ3YyRSxFQUFNeVgsS0FBT2p2QixLQUFLMnRGLGdCQUNkbjJFLEVBQU1zMkUsZ0JBR1ZMLEtBQ0FLLEtBQ0F2dUUsRUFBVXltRCxHQUFTQSxFQUFNem1ELFdBQ3pCaFAsRUFBV2dQLEVBQU9oUCxTQUFXZ1AsRUFBT2hQLFFBQVFrOUUsd0JBRTNDQyxTQUFTaHJFLE9BQU9uRCxFQUFPa3VFLGFBQWVuN0UsUUFBUSxTQUFTMC9CLE9BRTlDLElBREh5N0MsRUFBUTNsRSxRQUFRa3FCLFFBS3RCL2lCLEVBQUsraUIsRUFBTy9pQixHQUNadEMsRUFBT3BjLEVBQVEwZSxJQUNOLElBQVR0QyxLQUlTLElBQVRBLE1BQ0l5NkMsVUFBUW5qQyxNQUFNNG9DLGNBQVNscUUsT0FBTzhxRixRQUFReCtELE9BR3RDaGlCLEtBQUsra0MsS0FDRC9rQyxhQUNIK2tDLFVBQ0NybEIsY0FJTG1oRSxZQUFjQSxJQUNkNytELEdBQUtqdkIsS0FBSzJ0RixTQUNURyxlQVNLLFNBQVM5bkIsVUFDZEEsRUFBTStuQiwwQ0NwSkwsU0FBU3BxRixVQUNUeWpFLFVBQVF2OUQsUUFBUWxHLEdBQVNBLEVBQVEsR0FBS0EsVUFXdEMsU0FBU3FxRixFQUFXcm5GLEVBQU9zbkYsT0FFOUJsZSxFQUFRa2UsRUFBTXJuRixPQUFTLEVBQUlxbkYsRUFBTSxHQUFLQSxFQUFNLEdBQUtBLEVBQU0sR0FBS0EsRUFBTSxHQUdsRTltRixLQUFLbTBFLElBQUl2TCxHQUFTLEdBQ2pCaWUsSUFBYzdtRixLQUFLMGYsTUFBTW1uRSxPQUVwQkEsRUFBWTdtRixLQUFLMGYsTUFBTW1uRSxRQUk3QkUsRUFBVzltQixVQUFRdVUsTUFBTXgwRSxLQUFLbTBFLElBQUl2TCxJQUNsQ29lLEVBQWEsTUFFQyxJQUFkSCxLQUNXN21GLEtBQUtDLElBQUlELEtBQUttMEUsSUFBSTJTLEVBQU0sSUFBSzltRixLQUFLbTBFLElBQUkyUyxFQUFNQSxFQUFNcm5GLE9BQVMsS0FDM0QsS0FBTSxLQUNmd25GLEVBQVVobkIsVUFBUXVVLE1BQU14MEUsS0FBS20wRSxJQUFJMFMsTUFDeEJBLEVBQVVLLGNBQWNsbkYsS0FBSzBmLE1BQU11bkUsR0FBV2puRixLQUFLMGYsTUFBTXFuRSxRQUNoRSxLQUNGSSxHQUFjLEVBQUlubkYsS0FBSzBmLE1BQU1xbkUsS0FDcEIvbUYsS0FBS0MsSUFBSUQsS0FBS2diLElBQUltc0UsRUFBWSxJQUFLLEtBQ25DTixFQUFVTyxRQUFRRCxVQUduQixXQUdQSCxlQUdLLFNBQVNILEVBQVdybkYsRUFBT3NuRixPQUNuQ08sRUFBU1IsRUFBYTdtRixLQUFLbWlFLElBQUksR0FBSW5pRSxLQUFLMGYsTUFBTXVnRCxVQUFRdVUsTUFBTXFTLFlBRTlDLElBQWRBLEVBQ0ksSUFDYyxJQUFYUSxHQUEyQixJQUFYQSxHQUEyQixJQUFYQSxHQUEwQixJQUFWN25GLEdBQWVBLElBQVVzbkYsRUFBTXJuRixPQUFTLEVBQzNGb25GLEVBQVVLLGdCQUVYLE1DTFYsU0FBU0ksZ0JBQWdCUixPQUVwQmhxRSxFQUFHeWpELEVBREhoQixTQUdDemlELEVBQUksRUFBR3lqRCxFQUFPdW1CLEVBQU1ybkYsT0FBUXFkLEVBQUl5akQsSUFBUXpqRCxJQUNyQ2hYLEtBQUtnaEYsRUFBTWhxRSxHQUFHeGlCLGNBR2ZpbEUsRUFHUixTQUFTZ29CLGFBQWF2YixFQUFPeHNFLEVBQU9nb0YsT0FDL0JDLEVBQVl6YixFQUFNMGIsZ0JBQWdCbG9GLFVBRWxDZ29GLE9BQ1csSUFBVmhvRixHQUNXd3NFLEVBQU0wYixnQkFBZ0IsR0FBS0QsR0FBYSxHQUV4Q0EsRUFBWXpiLEVBQU0wYixnQkFBZ0Jsb0YsRUFBUSxJQUFNLEdBR3pEaW9GLEVBR1IsU0FBU0UsZ0JBQWdCNStELEVBQVM2K0QsRUFBTXJOLFVBQ2hDdGEsVUFBUXY5RCxRQUFRa2xGLEdBQ3RCM25CLFVBQVFxYSxZQUFZdnhELEVBQVN3eEQsRUFBTXFOLEdBQ25DNytELEVBQVE4eEQsWUFBWStNLEdBQU1sbEIsTUFHNUIsU0FBU21sQixpQkFBaUJ6K0UsT0FDckI4MkQsRUFBaUJELFVBQVFDLGVBQ3pCMGUsRUFBaUJsWixjQUFTbHFFLE9BQzFCOFAsRUFBTzQwRCxFQUFlOTJELEVBQVEwK0UsU0FBVWxKLEVBQWVtSixpQkFDdkRub0QsRUFBUXNnQyxFQUFlOTJELEVBQVFneEUsVUFBV3dFLEVBQWVvSixrQkFDekRDLEVBQVMvbkIsRUFBZTkyRCxFQUFRaXhFLFdBQVl1RSxFQUFlc0osK0JBR3hENThFLFFBQ0NzMEIsU0FDQ3FvRCxPQUNGaG9CLFVBQVFpYSxXQUFXNXVFLEVBQU1zMEIsRUFBT3FvRCxJQUl4QyxTQUFTRSxnQkFBZ0IvK0UsVUFDakI2MkQsVUFBUTcyRCxRQUFRZy9FLGFBQ3RCbm9CLFVBQVFDLGVBQWU5MkQsRUFBUWkvRSxXQUFZLEtBQzNDcG9CLFVBQVFDLGVBQWU5MkQsRUFBUTArRSxTQUFVcGlCLGNBQVNscUUsT0FBT3VzRixrQkE1RzNEcmlCLGNBQVNDLEtBQUssa0JBQ0osV0FDQyxlQUNGLHNCQUlFLFFBQ0YsK0JBQ0ksY0FDQyxtQkFDSyxhQUNOLGlCQUNLLGlCQUNELGdCQUNBLGtFQUVXLG1CQUNULGlDQUVDLHdCQU1ULGNBR0ksY0FHRCxpQkFJTixTQUNHLHdCQU1JLGNBQ0EsY0FDQSxXQUNMLFVBQ0MsV0FDQSxXQUNBLFlBQ0Msa0JBQ08sY0FDSixXQUVIMmlCLFdBQU1DLFdBQVcxNEUsNEJBeUQ3QixlQUFpQm1zRSxhQUFRLzVELG1CQU9aLHVCQUNGcHBCLEtBRUNnZ0YsYUFBZSxNQUZoQmhnRixLQUdBaWdGLFlBQWMsUUFIZGpnRixLQUlFa2dGLGNBQWdCLFNBSmxCbGdGLEtBS0dtZ0YsZUFBaUIsYUFRcEIsa0JBQ0ZuZ0YsS0FBSzJ2RiwwQkFPTSxlQUNkMUIsRUFBUWp1RixLQUFLdVEsUUFBUTA5RSxVQVdwQixJQUFJbm9GLEtBVlcsSUFBaEJtb0YsRUFBTTJCLFVBQ0hBLGdCQUNJLEtBR1MsSUFBaEIzQixFQUFNNEIsVUFDSEEsZ0JBQ0ksSUFHSzVCLEVBQ0gsVUFBUm5vRixHQUEyQixVQUFSQSxTQUNVLElBQXJCbW9GLEVBQU0yQixNQUFNOXBGLE9BQ2hCOHBGLE1BQU05cEYsR0FBT21vRixFQUFNbm9GLFNBRU0sSUFBckJtb0YsRUFBTTRCLE1BQU0vcEYsT0FDaEIrcEYsTUFBTS9wRixHQUFPbW9GLEVBQU1ub0YsbUJBS2YscUJBQ0xtZ0MsU0FBU2ptQyxLQUFLdVEsUUFBUXUvRSxjQUFlOXZGLGVBR3RDLFNBQVMrdkYsRUFBVUMsRUFBV0MsT0FFakNoc0UsRUFBR3lqRCxFQUFNaEIsRUFBUWpsRSxFQUFPd3NGLEVBQU9jLEVBRC9Cdm1CLEVBQUt4b0UsV0FJTjh2RixpQkFHQUMsU0FBV0EsSUFDWEMsVUFBWUEsSUFDWkMsUUFBVTdvQixVQUFRaCtDLGFBQ2QsUUFDQyxNQUNGLFNBQ0csR0FDTjZtRSxLQUNBQyxpQkFBbUIxbkIsRUFBRzBuQix1QkFHdEJDLHdCQUNBQyxrQkFDQUMsdUJBR0FDLHFCQUNBQyx3QkFDQUMsb0JBU0FDLHFCQUlLam9CLEVBQUdrb0IsbUJBRVJDLG9CQUVBQyxnQ0FLTXBvQixFQUFHcW9CLHFCQUFxQjVDLElBQVV6bEIsRUFBR3lsQixRQUUzQzZDLCtCQUVBN0MsTUFBUXZuQixFQUtOemlELEVBQUksRUFBR3lqRCxFQUFPaEIsRUFBTzkvRCxPQUFRcWQsRUFBSXlqRCxJQUFRempELElBQ3JDeWlELEVBQU96aUQsTUFDUmdxRSxFQUFNaHFFLE1BT1B4aUIsTUFBUUEsSUFMUHdMLEtBQUs4aEYsU0FDSHR0RixTQUNBLGFBT1BrdUYsT0FBUzFCLElBR1Q4QyxnQ0FDQUMsMEJBQ0FDLCtCQUVBQyxjQUNBQyxRQUNBQyxhQUVBQyxjQUVJN29CLEVBQUcrTyxxQkFHRSxxQkFDSnR4QyxTQUFTam1DLEtBQUt1USxRQUFROGdGLGFBQWNyeEYsNEJBS3hCLHFCQUNaaW1DLFNBQVNqbUMsS0FBS3VRLFFBQVE0L0UscUJBQXNCbndGLHNCQUV0QyxlQUNWd29FLEVBQUt4b0UsS0FFTHdvRSxFQUFHZ1Asa0JBRUgzTixNQUFRckIsRUFBR3VuQixXQUNYaC9CLEtBQU8sSUFDUHZQLE1BQVFnbkIsRUFBR3FCLFVBRVhDLE9BQVN0QixFQUFHd25CLFlBR1ovK0IsSUFBTSxJQUNOMGEsT0FBU25ELEVBQUdzQixVQUlia1csWUFBYyxJQUNkQyxXQUFhLElBQ2JDLGFBQWUsSUFDZkMsY0FBZ0Isc0JBRUEscUJBQ1hsNkMsU0FBU2ptQyxLQUFLdVEsUUFBUTgvRSxvQkFBcUJyd0YseUJBSWxDLHFCQUNUaW1DLFNBQVNqbUMsS0FBS3VRLFFBQVErL0Usa0JBQW1CdHdGLDRCQUU3Qm9uRSxVQUFRaG9ELHFCQUNaLHFCQUNSNm1CLFNBQVNqbUMsS0FBS3VRLFFBQVFpZ0YsaUJBQWtCeHdGLHlCQUkvQixxQkFDVGltQyxTQUFTam1DLEtBQUt1USxRQUFRa2dGLGtCQUFtQnp3RixtQkFFdENvbkUsVUFBUWhvRCxxQkFDSCxxQkFDUjZtQixTQUFTam1DLEtBQUt1USxRQUFRb2dGLGlCQUFrQjN3RixvQ0FHcEIscUJBQ3BCaW1DLFNBQVNqbUMsS0FBS3VRLFFBQVFxZ0YsNkJBQThCNXdGLDZCQUV2QyxlQUdqQnN4RixFQUZLdHhGLEtBRVN1USxRQUFRMDlFLE1BRmpCanVGLEtBR05pdUYsTUFITWp1RixLQUdLaXVGLE1BQU14NUUsSUFBSTY4RSxFQUFTQyxjQUFnQkQsRUFBU3JyRCxTQUFVam1DLGtDQUV6QyxxQkFDbkJpbUMsU0FBU2ptQyxLQUFLdVEsUUFBUXVnRiw0QkFBNkI5d0Ysb0NBSy9CLHFCQUNwQmltQyxTQUFTam1DLEtBQUt1USxRQUFRd2dGLDZCQUE4Qi93Riw4QkFFdEMsZUFDbEJ3b0UsRUFBS3hvRSxLQUNMa3dCLEVBQVVzNEMsRUFBRzcvQyxJQUNiMm9FLEVBQVc5b0IsRUFBR2o0RCxRQUFRMDlFLE1BQ3RCdm5CLEVBQVMrbkIsZ0JBQWdCam1CLEVBQUdtbkIsUUFJNUI2QixFQUFXeEMsaUJBQWlCc0MsS0FDeEI1UCxLQUFPOFAsRUFBUzlQLFNBRXBCK1AsRUFBZ0JILEVBQVNJLGFBQWUsS0FFeENockIsRUFBTzkvRCxRQUFVNGhFLEVBQUdqNEQsUUFBUTI5QyxTQUFXc2EsRUFBR2dQLHVCQUd6Q21hLEVBRkFDLEVBQXFCeHFCLFVBQVFxYSxZQUFZdnhELEVBQVNzaEUsRUFBUzlQLEtBQU1oYixFQUFROEIsRUFBRzBuQixrQkFDNUUyQixFQUFhRCxFQUliRSxFQUFZdHBCLEVBQUdxbUIsZ0JBQWdCLEdBQUtybUIsRUFBR3FtQixnQkFBZ0IsR0FBSyxFQUd6RGdELEVBQWFDLEdBQWFMLEVBQWdCSCxFQUFTUyxhQUFhLEtBQ2xFQyxFQUFlNXFCLFVBQVEyVSxVQUFVMFYsUUFDdkJ0cUYsS0FBS2dpRSxJQUFJNm9CLEdBQ1Q3cUYsS0FBS2tpRSxJQUFJMm9CLEdBRUxKLEVBQXFCcHBCLEVBQUd3bkIsVUFBVyxpQkFPeEMyQixFQUFjQyxJQUkxQkgsY0FBZ0JBLDhCQUVRLHFCQUNuQnhyRCxTQUFTam1DLEtBQUt1USxRQUFRMGdGLDRCQUE2Qmp4RixrQkFLakQscUJBQ0ZpbUMsU0FBU2ptQyxLQUFLdVEsUUFBUTJnRixXQUFZbHhGLFlBRXRDLGVBQ0F3b0UsRUFBS3hvRSxLQUVMdTNFLEVBQVUvTyxFQUFHK08sZUFDVCxTQUNDLEdBR0w3USxFQUFTK25CLGdCQUFnQmptQixFQUFHbW5CLFFBRTVCaGpFLEVBQU82N0MsRUFBR2o0RCxRQUNWK2dGLEVBQVcza0UsRUFBS3NoRSxNQUNoQmdFLEVBQWlCdGxFLEVBQUt1bEUsV0FDdEJDLEVBQWV4bEUsRUFBS3lsRSxVQUNwQmxrQyxFQUFVdmhDLEVBQUt1aEMsUUFDZnNwQixFQUFlaFAsRUFBR2dQLGVBRWxCZ2EsRUFBV3hDLGlCQUFpQnNDLEdBQzVCZSxFQUFpQjFsRSxFQUFLeWxFLFVBQVVDLG9CQUszQnhvQixNQUZMMk4sRUFFYWhQLEVBQUc4cEIsY0FBZ0I5cEIsRUFBR3VuQixTQUFXdm5CLEVBQUd5bkIsUUFBUWwvQixLQUFPeVgsRUFBR3luQixRQUFRenVDLE1BQVFnbkIsRUFBR3VuQixTQUV6RTdoQyxHQUFXaWtDLEVBQWFJLFVBQVlGLEVBQWlCLElBSzdEdm9CLE9BREwwTixFQUNjdHBCLEdBQVdpa0MsRUFBYUksVUFBWUYsRUFBaUIsRUFFckQ3cEIsRUFBR3duQixVQUlqQmlDLEVBQWUvakMsU0FBV0EsRUFBUyxLQUdsQ3NrQyxFQUZ1QmxELGdCQUFnQjJDLEdBQ25CN3FCLFVBQVE3MkQsUUFBUTZsRSxVQUFVNmIsRUFBZTliLFNBQ05yTSxPQUV2RDBOLElBQ0sxTixRQUFVMG9CLElBRVYzb0IsT0FBUzJvQixLQUtmbEIsRUFBU3BqQyxTQUFXQSxFQUFTLEtBQzVCdWtDLEVBQW1CcnJCLFVBQVFxYSxZQUFZalosRUFBRzcvQyxJQUFLNm9FLEVBQVM5UCxLQUFNaGIsRUFBUThCLEVBQUcwbkIsa0JBQ3pFd0MsRUFBNEJ0ckIsVUFBUWdiLG1CQUFtQjFiLEdBQ3ZEaXNCLEVBQTRCLEdBQWhCbkIsRUFBUy8rRSxLQUNyQm1nRixFQUFjcHFCLEVBQUdqNEQsUUFBUTA5RSxNQUFNOVgsV0FFL0JxQixFQUFjLEdBRWRxYixrQkFBb0JKLE1BRW5CVCxFQUFlNXFCLFVBQVEyVSxVQUFVdlQsRUFBR2lwQixlQUNwQ0UsRUFBY3hxRixLQUFLZ2lFLElBQUk2b0IsR0FJdkJjLEVBSGMzckYsS0FBS2tpRSxJQUFJMm9CLEdBR01TLEVBQzdCakIsRUFBUy8rRSxLQUFPaWdGLEVBQ2hCQyxHQUFhRCxFQUE0QixHQUMxQ0MsSUFFSzdvQixPQUFTM2lFLEtBQUtnYixJQUFJcW1ELEVBQUd3bkIsVUFBV3pZLEVBQVF6TixPQUFTZ3BCLEVBQWNGLEtBRXBFanFFLElBQUkrNEQsS0FBTzhQLEVBQVM5UCxTQUNuQnFSLEVBQWtCakUsZ0JBQWdCdG1CLEVBQUc3L0MsSUFBSys5QyxFQUFPLEdBQUk4cUIsRUFBUzlQLE1BQzlEc1IsRUFBaUJsRSxnQkFBZ0J0bUIsRUFBRzcvQyxJQUFLKzlDLEVBQU9BLEVBQU85L0QsT0FBUyxHQUFJNHFGLEVBQVM5UCxNQUl4RCxJQUFyQmxaLEVBQUdpcEIsaUJBQ0h6UixZQUFnQyxXQUFsQnJ6RCxFQUFLK29ELFNBQXlCaWMsRUFBY29CLEVBQW1CLEVBQUtwQixFQUFjZ0IsRUFBYSxJQUM3R3pTLGFBQWlDLFdBQWxCdnpELEVBQUsrb0QsU0FBeUJpYyxFQUFjZ0IsRUFBYSxFQUFLaEIsRUFBY3FCLEVBQWtCLE1BRTdHaFQsWUFBYytTLEVBQWtCLEVBQUksSUFDcEM3UyxhQUFlOFMsRUFBaUIsRUFBSSxRQUtwQzFCLEVBQVMyQixTQUNPLEtBSUNMLEVBQWNELElBRzNCOW9CLE1BQVExaUUsS0FBS2diLElBQUlxbUQsRUFBR3VuQixTQUFVeFksRUFBUTFOLE1BQVE0b0IsS0FFbkR4UyxXQUFhdVIsRUFBUy8rRSxLQUFPLElBQzdCMHRFLGNBQWdCcVIsRUFBUy8rRSxLQUFPLElBSWxDeWdGLGtCQUVBcnBCLE1BQVEwTixFQUFRMU4sUUFDaEJDLE9BQVN5TixFQUFRek4sc0JBT04sZUFDVnRCLEVBQUt4b0UsS0FDTHdvRSxFQUFHeW5CLFlBQ0hqUSxZQUFjNzRFLEtBQUtDLElBQUlvaEUsRUFBR3dYLFlBQWN4WCxFQUFHeW5CLFFBQVFsL0IsS0FBTSxLQUN6RGt2QixXQUFhOTRFLEtBQUtDLElBQUlvaEUsRUFBR3lYLFdBQWF6WCxFQUFHeW5CLFFBQVFoL0IsSUFBSyxLQUN0RGl2QixhQUFlLzRFLEtBQUtDLElBQUlvaEUsRUFBRzBYLGFBQWUxWCxFQUFHeW5CLFFBQVF6dUMsTUFBTyxLQUM1RDIrQixjQUFnQmg1RSxLQUFLQyxJQUFJb2hFLEVBQUcyWCxjQUFnQjNYLEVBQUd5bkIsUUFBUXRrQixPQUFRLGNBSTFELHFCQUNEMWxDLFNBQVNqbUMsS0FBS3VRLFFBQVE2Z0YsVUFBV3B4RixxQkFJNUIsaUJBQ29CLFFBQTFCQSxLQUFLdVEsUUFBUW1sRSxVQUFnRCxXQUExQjExRSxLQUFLdVEsUUFBUW1sRSxzQkFFM0Msa0JBQ0oxMUUsS0FBS3VRLFFBQVF3bEUseUJBSVAsU0FBU29kLE1BRW5CL3JCLFVBQVE0VCxjQUFjbVksVUFDbEJDLE9BR2dCLGlCQUFiRCxJQUEwQnJzRSxTQUFTcXNFLFVBQ3RDQyxPQUdKRCxLQUNDbnpGLEtBQUt3M0Usd0JBQ1cvekUsSUFBZjB2RixFQUFTcHBCLFNBQ0wvcEUsS0FBS3F6RixjQUFjRixFQUFTcHBCLFFBRTlCLFFBQW1CdG1FLElBQWYwdkYsRUFBU25wQixTQUNaaHFFLEtBQUtxekYsY0FBY0YsRUFBU25wQixVQUs5Qm1wQixvQkFRVS9yQixVQUFRaG9ELHNCQVNSZ29ELFVBQVFob0Qsc0JBT1Jnb0QsVUFBUWhvRCxxQkFNVCxTQUFTelksT0FDckI2aEUsRUFBS3hvRSxLQUNMdVIsRUFBU2kzRCxFQUFHajRELFFBQVFnQixVQUNwQmkzRCxFQUFHZ1AsZUFBZ0IsS0FFbEJzYSxHQURhdHBCLEVBQUdxQixPQUFTckIsRUFBR3dYLFlBQWN4WCxFQUFHMFgsZUFDcEIvNEUsS0FBS0MsSUFBS29oRSxFQUFHbW5CLE9BQU8vb0YsUUFBVTJLLEVBQVMsRUFBSSxHQUFLLEdBQ3pFK2hGLEVBQVN4QixFQUFZbnJGLEVBQVM2aEUsRUFBR3dYLFlBRWpDenVFLE9BQ011Z0YsRUFBWSxPQUdsQnlCLEVBQVcvcUIsRUFBR3pYLEtBQU81cEQsS0FBS3dxRSxNQUFNMmhCLGFBQ3hCOXFCLEVBQUc4cEIsY0FBZ0I5cEIsRUFBR3luQixRQUFRbC9CLEtBQU8sTUFHOUN5aUMsRUFBY2hyQixFQUFHc0IsUUFBVXRCLEVBQUd5WCxXQUFhelgsRUFBRzJYLHNCQUMzQzNYLEVBQUd2WCxJQUFPdHFELEdBQVM2c0YsR0FBZWhyQixFQUFHbW5CLE9BQU8vb0YsT0FBUyx3QkFPekMsU0FBUzZzRixPQUN4QmpyQixFQUFLeG9FLFFBQ0x3b0UsRUFBR2dQLGVBQWdCLEtBRWxCa2MsR0FEYWxyQixFQUFHcUIsT0FBU3JCLEVBQUd3WCxZQUFjeFgsRUFBRzBYLGVBQ2pCdVQsRUFBV2pyQixFQUFHd1gsWUFFMUN1VCxFQUFXL3FCLEVBQUd6WCxLQUFPNXBELEtBQUt3cUUsTUFBTStoQixhQUN4QmxyQixFQUFHOHBCLGNBQWdCOXBCLEVBQUd5bkIsUUFBUWwvQixLQUFPLFNBRzNDeVgsRUFBR3ZYLElBQU93aUMsRUFBVWpyQixFQUFHc0IscUJBT2pCLGtCQUNOOXBFLEtBQUsyekYsaUJBQWlCM3pGLEtBQUs0ekYsOEJBR3JCLGVBRVR6eEUsRUFES25pQixLQUNJbWlCLElBQ1QvYSxFQUZLcEgsS0FFSW9ILFdBRkpwSCxLQUlDNnpGLFlBQWMsRUFDdkIxeEUsRUFBTSxHQUFLL2EsRUFBTSxFQUFJQSxFQUNyQithLEVBQU0sR0FBSy9hLEVBQU0sRUFBSSthLEVBQ3JCLGFBT1MsU0FBUzhyRSxPQUNmNkYsRUFTQTd2RSxFQUFHOHFFLEVBR0hnRixFQVhBdnJCLEVBQUt4b0UsS0FDTHczRSxFQUFlaFAsRUFBR2dQLGVBQ2xCd2MsRUFBY3hyQixFQUFHajRELFFBQVEwOUUsTUFBTTJCLE1BQy9CcUUsRUFBWWhHLEVBQU1ybkYsT0FDbEJzdEYsRUFBdUI5c0IsVUFBUTJVLFVBQVV2VCxFQUFHaXBCLGVBQzVDRSxFQUFjeHFGLEtBQUtnaUUsSUFBSStxQixHQUN2QkMsRUFBc0IzckIsRUFBR3FxQixrQkFBb0JsQixFQUM3QzF0RixTQUtBK3ZGLEVBQVlJLGtCQUNKSixFQUFZSSxlQUdwQjVjLE9BQ1MsR0FFUDJjLEVBQXNCSCxFQUFZSyxpQkFBbUJKLEVBQWF6ckIsRUFBR3FCLE9BQVNyQixFQUFHd1gsWUFBY3hYLEVBQUcwWCxrQkFDMUYsRUFBSS80RSxLQUFLMGYsT0FBUXN0RSxFQUFzQkgsRUFBWUssaUJBQW1CSixHQUFjenJCLEVBQUdxQixPQUFTckIsRUFBR3dYLFlBQWN4WCxFQUFHMFgsaUJBSzdINlQsR0FBWUUsRUFBWUYsTUFDZjVzRixLQUFLQyxJQUFJMHNGLEVBQVczc0YsS0FBSzBmLE1BQU1vdEUsRUFBWUYsTUFJcEQ5dkUsRUFBSSxFQUFHQSxFQUFJZ3dFLEVBQVdod0UsTUFDbkJncUUsRUFBTWhxRSxJQUdDNnZFLEVBQVksR0FBSzd2RSxFQUFJNnZFLEVBQVksR0FBTzd2RSxFQUFJNnZFLEdBQWMsR0FBSzd2RSxFQUFJNnZFLEdBQWFHLElBQzVFaHdFLElBQU1nd0UsRUFBWSxVQUU1QmxGLEVBQUt0dEYsUUFFTndMLEtBQUs4aEYsVUFFTjlxRixRQUtGLFNBQVM2MEUsT0FDVnRRLEVBQUt4b0UsS0FDTHVRLEVBQVVpNEQsRUFBR2o0RCxXQUNaQSxFQUFRMjlDLGFBSVRoK0IsRUFBVXM0QyxFQUFHNy9DLElBQ2JvOUQsRUFBaUJsWixjQUFTbHFFLE9BQzFCcXhGLEVBQWN6akYsRUFBUTA5RSxNQUFNMkIsTUFDNUIwRSxFQUFtQi9qRixFQUFRMDlFLE1BQU00QixPQUFTbUUsRUFDMUM1QixFQUFZN2hGLEVBQVE2aEYsVUFDcEJGLEVBQWEzaEYsRUFBUTJoRixXQUVyQnFDLEVBQWlDLElBQXJCL3JCLEVBQUdpcEIsY0FDZmphLEVBQWVoUCxFQUFHZ1AsZUFFbEJ5VyxFQUFRK0YsRUFBWVEsU0FBV2hzQixFQUFHaXNCLFVBQVVqc0IsRUFBR2tzQixZQUFjbHNCLEVBQUdrc0IsV0FDaEVDLEVBQWdCdnRCLFVBQVFDLGVBQWUyc0IsRUFBWVksVUFBVzdPLEVBQWU4TyxrQkFDN0VyRCxFQUFXeEMsaUJBQWlCZ0YsR0FDNUJjLEVBQXFCMXRCLFVBQVFDLGVBQWVpdEIsRUFBaUJNLFVBQVc3TyxFQUFlOE8sa0JBQ3ZGRSxFQUFnQi9GLGlCQUFpQnNGLEdBRWpDVSxFQUFLNUMsRUFBVUcsVUFBWUgsRUFBVUMsZUFBaUIsRUFFdEQ0QyxFQUFzQjd0QixVQUFRQyxlQUFlNnFCLEVBQVcwQyxVQUFXN08sRUFBZThPLGtCQUNsRkssRUFBaUJsRyxpQkFBaUJrRCxHQUNsQ2lELEVBQW9CL3RCLFVBQVE3MkQsUUFBUTZsRSxVQUFVOGIsRUFBVy9iLFNBQ3pEK2QsRUFBdUI5c0IsVUFBUTJVLFVBQVV2VCxFQUFHaXBCLGVBRTVDMkQsS0FFQUMsRUFBWTdzQixFQUFHajRELFFBQVE2aEYsVUFBVTFNLFVBQ2pDNFAsRUFBa0MsVUFBckIva0YsRUFBUW1sRSxTQUF1QmxOLEVBQUd6WCxLQUFPeVgsRUFBR2huQixNQUFRNnpDLEVBQVlMLEVBQzdFTyxFQUFnQyxVQUFyQmhsRixFQUFRbWxFLFNBQXVCbE4sRUFBR3pYLEtBQU9pa0MsRUFBS3hzQixFQUFHaG5CLE1BQzVEZzBDLEVBQWtDLFdBQXJCamxGLEVBQVFtbEUsU0FBd0JsTixFQUFHdlgsSUFBTW9rQyxFQUFZN3NCLEVBQUdtRCxPQUFTcXBCLEVBQUtLLEVBQ25GSSxFQUFnQyxXQUFyQmxsRixFQUFRbWxFLFNBQXdCbE4sRUFBR3ZYLElBQU1va0MsRUFBWUwsRUFBS3hzQixFQUFHbUQsT0FBUzBwQixlQUU3RS9zQixLQUFLMmxCLEVBQU8sU0FBU2MsRUFBTXBvRixPQUU5QnlnRSxVQUFRNFQsY0FBYytULEVBQUt0dEYsWUFLM0Jpa0YsRUFBV2dRLEVBQVcvTyxFQUFZRSxFQWVsQzhPLEVBQUtDLEVBQUtDLEVBQUtDLEVBQUt2TyxFQUFJRSxFQUFJRCxFQUFJdFcsRUFBSTZrQixFQUFRQyxFQWhCNUN2MEYsRUFBUXN0RixFQUFLdHRGLE1BRWJrRixJQUFVNmhFLEVBQUd5dEIsZUFBaUIxbEYsRUFBUWdCLFNBQVc2Z0YsRUFBVXpELG1CQUVsRHlELEVBQVU4RCxnQkFDVjlELEVBQVUrRCxnQkFDVC9ELEVBQVVnRSxxQkFDSmhFLEVBQVVpRSw2QkFFakJqdkIsVUFBUTZCLHNCQUFzQm1wQixFQUFVMU0sVUFBVy8rRSxLQUNuRHlnRSxVQUFRNkIsc0JBQXNCbXBCLEVBQVU5UCxNQUFPMzdFLEtBQzlDeWdFLFVBQVFDLGVBQWUrcUIsRUFBVXpMLFdBQVlaLEVBQWVZLGNBQ3REdmYsVUFBUUMsZUFBZStxQixFQUFVdkwsaUJBQWtCZCxFQUFlYyx1QkFLbEZ5UCxFQUFZLFNBQ1pDLEVBQWUsU0FDZjNELEVBQWNvQixFQUFZN2QsV0FFMUJxQixFQUFjLEtBQ2JnZixFQUFleEIsRUFBS3BDLEVBRUMsV0FBckJyaUYsRUFBUW1sRSxZQUVLNmUsRUFBb0IsU0FBUixRQUNmQSxFQUF1QixRQUFYLFdBQ2hCL3JCLEVBQUd2WCxJQUFNdWxDLE1BR0ZqQyxFQUF1QixTQUFYLFdBQ2ZBLEVBQXVCLE9BQVgsV0FDaEIvckIsRUFBR21ELE9BQVM2cUIsT0FHbEJDLEVBQWEvSCxhQUFhbG1CLEVBQUk3aEUsRUFBT3lyRixFQUFVekQsaUJBQW1CVixFQUFNcm5GLE9BQVMsR0FDakY2dkYsRUFBYWp1QixFQUFHelgsU0FDUCxvQkFFQ3FXLFVBQVF3VixXQUFXOEksS0FFeEJsZCxFQUFHcW1CLGdCQUFnQmxvRixHQUFTcXRGLEVBQVkwQyxjQUUzQ2IsRUFBTXRPLEVBQUtDLEVBQUtpUCxJQUNoQmpCLElBQ0FDLElBQ0QzYyxFQUFVN25CLE1BQ1Y2bkIsRUFBVW5OLE9BQVMwcEIsTUFDbEIsS0FFRnNCLEVBREFDLEVBQThCLFNBQXJCcm1GLEVBQVFtbEUsU0FHakJzZSxFQUFZZixVQUNIMkQsRUFBUyxPQUFTLFVBQ2ZoRSxNQUVIZ0UsRUFBUyxRQUFVLFNBQ2hCNUIsRUFBS3BDLEtBR1pnRSxFQUFTcHVCLEVBQUdobkIsTUFBUW0xQyxFQUFlbnVCLEVBQUd6WCxLQUFPNGxDLE1BRWxERSxFQUFhbkksYUFBYWxtQixFQUFJN2hFLEVBQU95ckYsRUFBVXpELGlCQUFtQlYsRUFBTXJuRixPQUFTLEdBQ2pGaXdGLEVBQWFydUIsRUFBR3ZYLFFBQ1Asb0JBRUNtVyxVQUFRd1YsV0FBVzhJLEtBRXhCbGQsRUFBR3FtQixnQkFBZ0Jsb0YsR0FBU3F0RixFQUFZMEMsY0FFM0NwQixJQUNBQyxJQUNEemMsRUFBVS9uQixPQUNWK25CLEVBQVV0M0IsTUFBUTZ6QyxJQUNqQlMsRUFBTXJPLEVBQUt2VyxFQUFLMmxCLElBR1g1cEYsVUFDTjBvRixNQUNBQyxNQUNBQyxNQUNBQyxLQUNEdk8sS0FDQUUsS0FDQUQsS0FDQXRXLFNBQ0k2a0IsU0FDQUMsVUFDQ3RRLFVBQ0FnUSxlQUNLL08scUJBQ01FLFlBQ1QsRUFBSXFOLFFBQ1J6eUYsUUFDQXN0RixFQUFLYyxtQkFDRTBHLFlBQ0hELGlCQUtMaHVCLEtBQUs4c0IsRUFBYSxTQUFTMEIsTUFDOUIxRSxFQUFVbGtDLFlBQ0wwYyxTQUNBOGEsVUFBWW9SLEVBQVdDLFVBQ3ZCdlIsWUFBY3NSLEVBQVdFLFFBQzdCOW1FLEVBQVF3MkQsZ0JBQ0hBLFlBQVlvUSxFQUFXRyxnQkFDdkJyUSxlQUFpQmtRLEVBQVdJLHNCQUc3Qm5zQixZQUVKcW5CLEVBQVVHLGNBQ0xwb0IsT0FBTzJzQixFQUFXbkIsSUFBS21CLEVBQVdsQixPQUNsQ3hyQixPQUFPMHNCLEVBQVdqQixJQUFLaUIsRUFBV2hCLE1BR3ZDMUQsRUFBVStFLG9CQUNMaHRCLE9BQU8yc0IsRUFBV3ZQLEdBQUl1UCxFQUFXclAsTUFDakNyZCxPQUFPMHNCLEVBQVd0UCxHQUFJc1AsRUFBVzVsQixPQUdsQzNGLFdBQ0FDLFdBR0x3b0IsRUFBWTlsQyxRQUFTLEdBRWhCMGMsU0FDQUMsVUFBVWlzQixFQUFXZixPQUFRZSxFQUFXZCxVQUN4Q2xyQixPQUFPZ3NCLEVBQVd0c0IsWUFDbEJrWCxLQUFPb1YsRUFBV2pILE1BQVFrRixFQUFjclQsS0FBTzhQLEVBQVM5UCxPQUN4RGtFLFVBQVlrUixFQUFXakgsTUFBUWlGLEVBQXFCSCxJQUNwRDRCLGFBQWVPLEVBQVdQLGVBQzFCRCxVQUFZUSxFQUFXUixjQUUzQjcwRixFQUFRcTFGLEVBQVdyMUYsU0FDbkIybEUsVUFBUXY5RCxRQUFRcEksV0FDZjIxRixFQUFZMzFGLEVBQU1tRixPQUNsQjRvRixFQUE2QixJQUFoQmdDLEVBQVMvK0UsS0FDdEJ1M0QsRUFBSXhCLEVBQUdnUCxlQUFpQixHQUFLZ1ksR0FBYzRILEVBQVksR0FBSyxFQUV2RG56RSxFQUFJLEVBQUdBLEVBQUltekUsSUFBYW56RSxJQUV4Qm96RSxTQUFTLEdBQUs1MUYsRUFBTXdpQixHQUFJLEVBQUcrbEQsTUFFOUJ3bEIsU0FHRTZILFNBQVM1MUYsRUFBTyxFQUFHLEtBRXBCK3BFLGFBSU4wbUIsRUFBV2hrQyxRQUFTLEtBRW5Cb3BDLEVBQ0FDLEVBQ0Evc0IsRUFBVyxFQUNYZ3RCLEVBQWlCbEksZ0JBQWdCNEMsR0FBYyxLQUUvQzFhLElBQ1doUCxFQUFHelgsTUFBU3lYLEVBQUdobkIsTUFBUWduQixFQUFHelgsTUFBUSxJQUNiLFdBQXJCeGdELEVBQVFtbEUsU0FDbkJsTixFQUFHbUQsT0FBUzZyQixFQUFpQnJDLEVBQWtCeHBCLE9BQy9DbkQsRUFBR3ZYLElBQU11bUMsRUFBaUJyQyxFQUFrQmxrQyxRQUN6QyxLQUNGMmxDLEVBQThCLFNBQXJCcm1GLEVBQVFtbEUsV0FDUGtoQixFQUNYcHVCLEVBQUd6WCxLQUFPeW1DLEVBQWlCckMsRUFBa0Jsa0MsSUFDN0N1WCxFQUFHaG5CLE1BQVFnMkMsRUFBaUJyQyxFQUFrQmxrQyxNQUNuQ3VYLEVBQUd2WCxLQUFRdVgsRUFBR21ELE9BQVNuRCxFQUFHdlgsS0FBTyxJQUNwQzJsQyxHQUFVLEdBQU16dkYsS0FBS2lpRSxHQUFLLEdBQU1qaUUsS0FBS2lpRSxLQUd6Q3dCLFNBQ0FDLFVBQVV5c0IsRUFBYUMsS0FDdkJ6c0IsT0FBT04sS0FDUDhyQixVQUFZLFdBQ1pDLGFBQWUsV0FDZjNRLFVBQVlxUCxJQUNadlQsS0FBT3dULEVBQWV4VCxPQUN0QjJWLFNBQVNuRixFQUFXdUYsWUFBYSxFQUFHLEtBQ3BDanNCLGFBR0w0bUIsRUFBVXNGLFdBQVksR0FFakJoUyxVQUFZdGUsVUFBUTZCLHNCQUFzQm1wQixFQUFVMU0sVUFBVyxLQUMvREYsWUFBY3BlLFVBQVE2QixzQkFBc0JtcEIsRUFBVTlQLE1BQU8sT0FDakVpRixFQUFLL2UsRUFBR3pYLEtBQ1J5MkIsRUFBS2hmLEVBQUdobkIsTUFBUTZ6QyxFQUNoQjVOLEVBQUtqZixFQUFHdlgsSUFDUmlnQixFQUFLMUksRUFBR21ELE9BQVMwcEIsRUFFakJ6WSxFQUFheFYsVUFBUXdWLFdBQVcxc0QsRUFBUXcxRCxXQUN4Q2xPLEtBQ0V0RyxFQUEwQixRQUFyQjNnRSxFQUFRbWxFLFNBQXFCbE4sRUFBR21ELE9BQVNuRCxFQUFHdlgsT0FDaEQyckIsS0FDQUEsTUFFRDRLLEVBQTBCLFNBQXJCajNFLEVBQVFtbEUsU0FBc0JsTixFQUFHaG5CLE1BQVFnbkIsRUFBR3pYLFFBQ2hENnJCLEtBQ0FBLEtBR0M3UixjQUNBWixPQUFPb2QsRUFBSUUsS0FDWHJkLE9BQU9vZCxFQUFJdFcsS0FDWDNGLDBFQzU1QkZ1QixLQUFLLDZCQUVILFNBQ0QsVUFDRixtQkFDSSxxQkFDQyxrQkFDTSxpQ0FDRCxvQkFDRixvQkFDSyxpQkFDSCxrQkFDSixtQkFDQyxnQkFDRSxpQkFDSix1QkFDTSxxQkFDRixrQkFDRSxrQkFDQSxtQkFDSixnQkFDSCxXQUNBLGVBQ0ksWUFDSCxlQUNHLHFCQUNNLHNCQUNMLGNBQ0YsNEJBQ0EseUJBR0MxRixVQUFRaG9ELFdBQ2QsU0FBU3U0RSxFQUFjeDFGLE9BRXpCeTFGLEVBQVEsR0FDUmx4QixFQUFTdmtFLEVBQUt1a0UsT0FDZG14QixFQUFhbnhCLEVBQVNBLEVBQU85L0QsT0FBUyxLQUV0Qyt3RixFQUFhL3dGLE9BQVMsRUFBRyxLQUN4QmloQixFQUFPOHZFLEVBQWEsR0FFcEI5dkUsRUFBS2l3RSxTQUNBandFLEVBQUtpd0UsT0FDSEQsRUFBYSxHQUFLaHdFLEVBQUtsaEIsTUFBUWt4RixNQUNqQ254QixFQUFPNytDLEVBQUtsaEIsZUFJZml4RixjQUVJeHdCLFVBQVFob0QsZ0JBR1Jnb0QsVUFBUWhvRCxpQkFHUGdvRCxVQUFRaG9ELFdBQ2QsU0FBUzI0RSxFQUFhNTFGLE9BQ3hCVixFQUFRVSxFQUFLZ2tFLFNBQVM0eEIsRUFBWWhPLGNBQWN0b0YsT0FBUyxVQUV6REEsT0FDTSxTQUVEczJGLEVBQVlDLE9BQ2R2MkYsY0FFSSxTQUFTczJGLEVBQWEveEIsT0FHN0JoaEQsRUFGT2doRCxFQUFNZ2pCLGVBQWUrTyxFQUFZaE8sY0FDbkI1bkYsS0FBSzQxRixFQUFZcHhGLE9BQ2pCNDhFLHlCQUVYditELEVBQUt5Z0UsNEJBQ0R6Z0UsRUFBSzZnRSxpQ0FHUixrQkFDUjdsRixLQUFLaTRGLFNBQVNDLDBCQUVWOXdCLFVBQVFob0QsZUFHVGdvRCxVQUFRaG9ELGtCQUdMZ29ELFVBQVFob0QsWUFDZGdvRCxVQUFRaG9ELGlCQUNIZ29ELFVBQVFob0QsYUFLcEIrNEUsV0FPTSxTQUFTL1IsT0FDWkEsRUFBU3gvRSxjQUNOLE1BR0pxZCxFQUFHK1QsRUFDSCt4QyxFQUFJLEVBQ0pDLEVBQUksRUFDSjNoRSxFQUFRLE1BRVA0YixFQUFJLEVBQUcrVCxFQUFNb3VELEVBQVN4L0UsT0FBUXFkLEVBQUkrVCxJQUFPL1QsRUFBRyxLQUM1QzFELEVBQUs2bEUsRUFBU25pRSxNQUNkMUQsR0FBTUEsRUFBRzYzRSxXQUFZLEtBQ3BCem9DLEVBQU1wdkMsRUFBRzgzRSxxQkFDUjFvQyxFQUFJb2EsS0FDSnBhLEVBQUlxYSxJQUNQM2hFLFlBS0FsQixLQUFLd3FFLE1BQU01SCxFQUFJMWhFLEtBQ2ZsQixLQUFLd3FFLE1BQU0zSCxFQUFJM2hFLGFBV1gsU0FBUys5RSxFQUFVa1MsT0FJdkJyMEUsRUFBRytULEVBQUt1Z0UsRUFIUnh1QixFQUFJdXVCLEVBQWN2dUIsRUFDbEJDLEVBQUlzdUIsRUFBY3R1QixFQUNsQnFmLEVBQWM5d0QsT0FBTzhoRCxzQkFHcEJwMkQsRUFBSSxFQUFHK1QsRUFBTW91RCxFQUFTeC9FLE9BQVFxZCxFQUFJK1QsSUFBTy9ULEVBQUcsS0FDNUMxRCxFQUFLNmxFLEVBQVNuaUUsTUFDZDFELEdBQU1BLEVBQUc2M0UsV0FBWSxLQUNwQjdPLEVBQVNocEUsRUFBR2lwRSxpQkFDWjlrRSxFQUFJMGlELFVBQVFxVixzQkFBc0I2YixFQUFlL08sR0FFakQ3a0UsRUFBSTJrRSxNQUNPM2tFLElBQ0duRSxPQUtoQmc0RSxFQUFnQixLQUNmQyxFQUFLRCxFQUFlRixvQkFDcEJHLEVBQUd6dUIsSUFDSHl1QixFQUFHeHVCLFdBSUpELElBQ0FDLGNBUUd5dUIsRUFBYUMsRUFBYUMsT0FDOUJyVyxFQUFRbGIsVUFBUWtiLE1BQU1vVyxVQUNuQnBXLEVBQU1sUCxNQUFNdWxCLEVBQVVyVyxFQUFNbFAsU0FBU1Qsc0JBSXBDaW1CLEVBQWE1d0QsRUFBTTZ3RCxVQUN2QkEsSUFDQ3p4QixVQUFRdjlELFFBQVFndkYsU0FFYnoxRixVQUFVNkosS0FBS2xHLE1BQU1paEMsRUFBTTZ3RCxLQUU1QjVyRixLQUFLNHJGLElBSUw3d0QsV0FTQzh3RCxFQUFjMXhFLFVBQ0YsaUJBQVJBLEdBQW9CQSxhQUFlcGEsU0FBV29hLEVBQUlVLFFBQVEsT0FBUyxFQUN2RVYsRUFBSUcsTUFBTSxNQUVYSCxXQTJCQzJ4RSxFQUFhQyxPQUNqQmpULEVBQWlCbFosY0FBU2xxRSxPQUMxQjBrRSxFQUFpQkQsVUFBUUMsK0JBSWxCMnhCLEVBQVlDLGtCQUNaRCxFQUFZRSxnQkFDZEYsRUFBWUcsY0FDWkgsRUFBWUkscUJBR0xKLEVBQVlkLDhCQUNWN3dCLEVBQWUyeEIsRUFBWUssZUFBZ0J0VCxFQUFlc0osa0NBQzNEaG9CLEVBQWUyeEIsRUFBWU0sY0FBZXZULEVBQWVvSiw2QkFDN0Q2SixFQUFZTyx1QkFDVmx5QixFQUFlMnhCLEVBQVlRLGFBQWN6VCxFQUFlbUosNkJBQ3pEOEosRUFBWVMsMkJBR1RULEVBQVlVLGdDQUNWcnlCLEVBQWUyeEIsRUFBWVcsZ0JBQWlCNVQsRUFBZXNKLG1DQUM1RGhvQixFQUFlMnhCLEVBQVlZLGVBQWdCN1QsRUFBZW9KLGdDQUM1RDluQixFQUFlMnhCLEVBQVlhLGNBQWU5VCxFQUFlbUosNkJBQzNEOEosRUFBWWMsd0JBQ1hkLEVBQVllLCtCQUNQZixFQUFZZ0Isa0NBR2RoQixFQUFZaUIsa0NBQ1Y1eUIsRUFBZTJ4QixFQUFZa0IsaUJBQWtCblUsRUFBZXNKLG9DQUM3RGhvQixFQUFlMnhCLEVBQVltQixnQkFBaUJwVSxFQUFlb0osaUNBQzdEOW5CLEVBQWUyeEIsRUFBWW9CLGVBQWdCclUsRUFBZW1KLDhCQUM1RDhKLEVBQVlxQiwwQkFDWHJCLEVBQVlzQiw4QkFDVnRCLEVBQVl1QiwwQkFHbEJ2QixFQUFZd0IsdUJBQ1R4QixFQUFZeUIsNkJBQ1R6QixFQUFZblQsd0JBQ3BCLHdCQUNjbVQsRUFBWTBCLGlDQUNwQjFCLEVBQVkyQiwwQkFDZDNCLEVBQVl2VCx3QkFDWnVULEVBQVlyVCxzQkEwTWxCaVYsRUFBd0IzMEQsVUFDekIyeUQsS0FBaUJFLEVBQWM3eUQsS0FHekI5N0IsVUFBaUJnNUUsYUFBUS81RCxtQkFDMUIsZ0JBQ05rMUQsT0FBU3lhLEVBQWEvNEYsS0FBS2k0RixlQUMzQjRDLHlCQUtJLGVBR0xyaEUsRUFGS3g1QixLQUNLaTRGLFNBQ096K0QsVUFFakJzaEUsRUFBY3RoRSxFQUFVc2hFLFlBQVkvekYsTUFKL0IvRyxLQUl5Q3dILFdBQzlDb3dGLEVBQVFwK0QsRUFBVW8rRCxNQUFNN3dGLE1BTG5CL0csS0FLNkJ3SCxXQUNsQ3V6RixFQUFhdmhFLEVBQVV1aEUsV0FBV2gwRixNQU43Qi9HLEtBTXVDd0gsV0FFNUNrN0QsY0FHSWsyQixJQURBQSxJQURBQSxFQUFhbDJCLEVBQU9vMkIsRUFBY2dDLElBQ2RoQyxFQUFjbEIsSUFDZGtCLEVBQWNpQyxtQkFNNUIsa0JBQ1BILEVBQXdCNTZGLEtBQUtpNEYsU0FBU3orRCxVQUFVd2hFLFdBQVdqMEYsTUFBTS9HLEtBQU13SCxxQkFJdEUsU0FBU213RixFQUFjeDFGLE9BQzNCcW1FLEVBQUt4b0UsS0FDTHc1QixFQUFZZ3ZDLEVBQUd5dkIsU0FBU3orRCxVQUN4QnloRSxzQkFFSTN5QixLQUFLcXZCLEVBQWMsU0FBU0ksT0FDL0JtRCxrQ0FLU0EsRUFBUzl0RCxPQUFRMHJELEVBQWN0L0QsRUFBVTJoRSxZQUFZdDNGLEtBQUsya0UsRUFBSXV2QixFQUFhNTFGLE9BQzNFKzRGLEVBQVN4NEIsTUFBT2xwQyxFQUFVLzNCLE1BQU1vQyxLQUFLMmtFLEVBQUl1dkIsRUFBYTUxRixNQUN0RCs0RixFQUFTRSxNQUFPdEMsRUFBY3QvRCxFQUFVNmhFLFdBQVd4M0YsS0FBSzJrRSxFQUFJdXZCLEVBQWE1MUYsT0FFNUU4SyxLQUFLaXVGLEtBR1RELGdCQUlNLGtCQUNOTCxFQUF3QjU2RixLQUFLaTRGLFNBQVN6K0QsVUFBVThoRSxVQUFVdjBGLE1BQU0vRyxLQUFNd0gsdUJBS25FLGVBRU5neUIsRUFES3g1QixLQUNVaTRGLFNBQVN6K0QsVUFFeEIraEUsRUFBZS9oRSxFQUFVK2hFLGFBQWF4MEYsTUFIakMvRyxLQUcyQ3dILFdBQ2hEZzBGLEVBQVNoaUUsRUFBVWdpRSxPQUFPejBGLE1BSnJCL0csS0FJK0J3SCxXQUNwQ2kwRixFQUFjamlFLEVBQVVpaUUsWUFBWTEwRixNQUwvQi9HLEtBS3lDd0gsV0FFOUNrN0QsY0FHSWsyQixJQURBQSxJQURBQSxFQUFhbDJCLEVBQU9vMkIsRUFBY3lDLElBQ2R6QyxFQUFjMEMsSUFDZDFDLEVBQWMyQyxZQUtuQyxTQUFTQyxPQStCWnozRSxFQUFHK1QsRUF6WGtCcFMsRUFDdEIrMUUsRUFDQUMsRUFDQWoxRixFQUNBb2pGLEVBdVZDdmhCLEVBQUt4b0UsS0FDTDJzQixFQUFPNjdDLEVBQUd5dkIsU0FLVjRELEVBQWdCcnpCLEVBQUc4VixPQUNuQmo1QyxFQUFRbWpDLEVBQUc4VixPQUFTeWEsRUFBYXBzRSxHQUNqQzBoQixFQUFTbTZCLEVBQUdzekIsUUFFWjM1RixFQUFPcW1FLEVBQUduOUIsTUFHVjB3RCxVQUNLRixFQUFjMUMsY0FDZDBDLEVBQWN6QyxRQUVuQjRDLEtBQ0FILEVBQWM5eEIsSUFDZDh4QixFQUFjN3hCLEdBRWRpeUIsU0FDSUosRUFBY2h5QixhQUNiZ3lCLEVBQWMveEIsUUFFbkJ1dUIsS0FDQXdELEVBQWNLLFNBQ2RMLEVBQWNNLFdBS2Q5dEQsRUFBT3puQyxPQUFRLEdBQ1oreEYsUUFBVSxNQUVaeUQsS0FDQUMsT0FDY2xFLEVBQVl4ckUsRUFBSytvRCxVQUFVN3hFLEtBQUsya0UsRUFBSW42QixFQUFRbTZCLEVBQUc4ekIsb0JBRTdEM0UsU0FDQzF6RSxFQUFJLEVBQUcrVCxFQUFNcVcsRUFBT3puQyxPQUFRcWQsRUFBSStULElBQU8vVCxJQUM5QmhYLE1BcFlVMlksRUFvWWF5b0IsRUFBT3BxQixHQW5ZMUMwM0UsT0FBQUEsRUFDQUMsT0FBQUEsT0FDQWoxRixPQUNBb2pGLEVBSEE0UixFQUFTLzFFLEVBQVEyMkUsUUFDakJYLEVBQVNoMkUsRUFBUTQyRSxTQUFXNTJFLEVBQVE2MkUsT0FDcEM5MUYsRUFBUWlmLEVBQVFva0UsT0FDaEJELEVBQWVua0UsRUFBUXFrRSxzQkFHbEIwUixFQUFTQSxFQUFPZSxpQkFBaUIvMUYsRUFBT29qRixHQUFnQixVQUN4RDZSLEVBQVNBLEVBQU9jLGlCQUFpQi8xRixFQUFPb2pGLEdBQWdCLFNBQ3pEcGpGLGVBQ09vakYsSUFDWG5rRSxFQUFRMDRELE9BQU92VSxJQUNmbmtELEVBQVEwNEQsT0FBT3RVLEtBNFhicjlDLEVBQUtyckIsV0FDT3EyRixFQUFhcjJGLE9BQU8sU0FBU3VuQixVQUNwQzhELEVBQUtyckIsT0FBT3VuQixFQUFHMW1CLE1BS3BCd3FCLEVBQUtnd0UsYUFDT2hGLEVBQWExNUUsS0FBSyxTQUFTNEssRUFBR1ksVUFDckNrRCxFQUFLZ3dFLFNBQVM5ekUsRUFBR1ksRUFBR3RuQixnQkFLckJtbUUsS0FBS3F2QixFQUFjLFNBQVNJLEtBQ3ZCOXFGLEtBQUswZixFQUFLNk0sVUFBVW9qRSxXQUFXLzRGLEtBQUsya0UsRUFBSXV2QixFQUFhdnZCLEVBQUd2QyxXQUNwRGg1RCxLQUFLMGYsRUFBSzZNLFVBQVVxakUsZUFBZWg1RixLQUFLMmtFLEVBQUl1dkIsRUFBYXZ2QixFQUFHdkMsYUFLdkUyeEIsTUFBUXB2QixFQUFHczBCLFNBQVNuRixFQUFjeDFGLEtBQ2xDNjRGLFdBQWF4eUIsRUFBR3UwQixjQUFjcEYsRUFBY3gxRixLQUM1Q00sS0FBTytsRSxFQUFHdzBCLFFBQVFyRixFQUFjeDFGLEtBQ2hDbTVGLFVBQVk5eUIsRUFBR3kwQixhQUFhdEYsRUFBY3gxRixLQUMxQ3E1RixPQUFTaHpCLEVBQUcwMEIsVUFBVXZGLEVBQWN4MUYsS0FHcEM0bkUsRUFBSTVpRSxLQUFLd3FFLE1BQU0wbUIsRUFBZ0J0dUIsS0FDL0JDLEVBQUk3aUUsS0FBS3dxRSxNQUFNMG1CLEVBQWdCcnVCLEtBQy9CbXpCLGFBQWV4d0UsRUFBS3d3RSxlQUNwQmYsWUFBY0EsSUFDZEMsZ0JBQWtCQSxJQUdsQmUsV0FBYXpGLGFBdE5NNXBFLEVBQUl0YixFQUFNc3BGLEVBQVcvMUIsT0FFNUMrRCxFQUFJaDhDLEVBQUdnOEMsRUFDUEMsRUFBSWo4QyxFQUFHaThDLEVBRVB3d0IsRUFBWXpzRSxFQUFHeXNFLFVBQ2YyQyxFQUFlcHZFLEVBQUdvdkUsYUFDbEIxQyxFQUFlMXNFLEVBQUcwc0UsYUFDbEJ0QixFQUFTNEMsRUFBVTVDLE9BQ25CQyxFQUFTMkMsRUFBVTNDLE9BQ25CaUUsRUFBaUI3QyxFQUFZMkMsRUFDN0JHLEVBQW1CN0MsRUFBZTBDLFFBRXZCLFVBQVhoRSxLQUNFMW1GLEVBQUtvM0QsTUFDVyxXQUFYc3ZCLFFBQ0oxbUYsRUFBS28zRCxNQUFRLEdBQ1hwM0QsRUFBS28zRCxNQUFRN0QsRUFBTTZELFVBQ3RCN0QsRUFBTTZELE1BQVFwM0QsRUFBS28zRCxPQUVwQkUsRUFBSSxNQUNILElBSVMsUUFBWHF2QixLQUNFaUUsS0FDZ0IsV0FBWGpFLEVBQ0wzbUYsRUFBS3EzRCxPQUFTdXpCLEVBRWI1cUYsRUFBS3EzRCxPQUFTLEVBR04sV0FBWHN2QixFQUNZLFNBQVhELEtBQ0VrRSxFQUNnQixVQUFYbEUsT0FDTGtFLEdBRWUsU0FBWGxFLEtBQ0xtRSxFQUNnQixVQUFYbkUsT0FDTG1FLE1BSUZ2ekIsSUFDQUMsR0E2S2dCdXpCLENBQW1CbDRELGFBeldoQm00RCxFQUFTbjRELE9BQzVCMWMsRUFBTTYwRSxFQUFRdjNCLE9BQU90OUMsSUFFckJtaEQsRUFBMEIsRUFBakJ6a0MsRUFBTTZ6RCxTQUNmcnZCLEVBQVEsRUFHUnBuRSxFQUFPNGlDLEVBQU01aUMsS0FDYmc3RixFQUFxQmg3RixFQUFLb25CLE9BQU8sU0FBU3hoQixFQUFPNnlGLFVBQzdDN3lGLEVBQVE2eUYsRUFBUzl0RCxPQUFPeG1DLE9BQVNzMEYsRUFBU3g0QixNQUFNOTdELE9BQVNzMEYsRUFBU0UsTUFBTXgwRixRQUM3RSxNQUNtQnkrQixFQUFNMjFELFdBQVdwMEYsT0FBU3krQixFQUFNaTJELFVBQVUxMEYsV0FFNUQ4MkYsRUFBaUJyNEQsRUFBTXV5RCxNQUFNaHhGLE9BQzdCKzJGLEVBQWtCdDRELEVBQU1tMkQsT0FBTzUwRixPQUMvQml6RixFQUFnQngwRCxFQUFNdzBELGNBQ3RCTCxFQUFlbjBELEVBQU1tMEQsYUFDckJZLEVBQWlCLzBELEVBQU0rMEQsa0JBRWpCc0QsRUFBaUI3RCxLQUNqQjZELEdBQWtCQSxFQUFpQixHQUFLcjRELEVBQU0wMEQsYUFBZSxLQUM3RDJELEVBQWlCcjRELEVBQU0yMEQsa0JBQW9CLEtBQzNDeUQsRUFBcUJqRSxLQUNyQmlFLEdBQXNCQSxFQUFxQixHQUFLcDRELEVBQU1vMEQsWUFBYyxLQUNwRWtFLEVBQWtCdDRELEVBQU1rMUQsZ0JBQWtCLEtBQzFDb0QsRUFBbUJ2RCxLQUNuQnVELEdBQW1CQSxFQUFrQixHQUFLdDRELEVBQU1pMUQsY0FBZ0IsTUFHdEVzRCxFQUFlLEVBQ2ZDLEVBQWUsU0FBU3hYLEtBQ25CbC9FLEtBQUtDLElBQUl5aUUsRUFBT2xoRCxFQUFJcTVELFlBQVlxRSxHQUFNeGMsTUFBUSt6QixhQUduRGxjLEtBQU90YSxVQUFRaWEsV0FBV3dZLEVBQWV4MEQsRUFBTXk0RCxnQkFBaUJ6NEQsRUFBTTA0RCw0QkFDbEV6MUIsS0FBS2pqQyxFQUFNdXlELE1BQU9pRyxLQUd0Qm5jLEtBQU90YSxVQUFRaWEsV0FBV21ZLEVBQWNuMEQsRUFBTTI0RCxlQUFnQjM0RCxFQUFNNDRELDJCQUNoRTMxQixLQUFLampDLEVBQU0yMUQsV0FBV3Q0RSxPQUFPMmlCLEVBQU1pMkQsV0FBWXVDLEtBR3hDeDRELEVBQU1zMUQsY0FBaUJuQixFQUFlLEVBQUssWUFDbERseEIsS0FBSzdsRSxFQUFNLFNBQVN5NEYsYUFDbkI1eUIsS0FBSzR5QixFQUFTOXRELE9BQVF5d0QsYUFDdEJ2MUIsS0FBSzR5QixFQUFTeDRCLE1BQU9tN0IsYUFDckJ2MUIsS0FBSzR5QixFQUFTRSxNQUFPeUMsT0FJZixJQUdYbmMsS0FBT3RhLFVBQVFpYSxXQUFXK1ksRUFBZ0IvMEQsRUFBTTY0RCxpQkFBa0I3NEQsRUFBTTg0RCw2QkFDcEU3MUIsS0FBS2pqQyxFQUFNbTJELE9BQVFxQyxhQUdsQixFQUFJeDRELEVBQU00ekQsZ0JBSVZudkIsR0F5U09zMEIsQ0FBZXArRixLQUFNcWxDLGNBbFNWbTRELEVBQVMvcUYsT0FhaEM0ckYsRUFBSUMsRUFDSkMsRUFBS0MsRUFDTEMsRUFkQXA1RCxFQUFRbTRELEVBQVFsZixPQUNoQnRZLEVBQVF3M0IsRUFBUXYzQixPQUNoQjZTLEVBQVkwa0IsRUFBUXYzQixPQUFPNlMsVUFDM0JxZ0IsRUFBUyxTQUNUQyxFQUFTLFNBRVQvekQsRUFBTTJrQyxFQUFJdjNELEVBQUtxM0QsU0FDVCxNQUNDemtDLEVBQU0ya0MsRUFBS2hFLEVBQU04RCxPQUFTcjNELEVBQUtxM0QsV0FDaEMsY0FNTjQwQixHQUFRNWxCLEVBQVUvbkIsS0FBTytuQixFQUFVdDNCLE9BQVMsRUFDNUNtOUMsR0FBUTdsQixFQUFVN25CLElBQU02bkIsRUFBVW5OLFFBQVUsRUFFakMsV0FBWHl0QixLQUNFLFNBQVNydkIsVUFDTkEsR0FBSzIwQixLQUVSLFNBQVMzMEIsVUFDTkEsRUFBSTIwQixPQUdQLFNBQVMzMEIsVUFDTkEsR0FBTXQzRCxFQUFLbzNELE1BQVEsS0FFdEIsU0FBU0UsVUFDTkEsR0FBTS9ELEVBQU02RCxNQUFTcDNELEVBQUtvM0QsTUFBUSxNQUlyQyxTQUFTRSxVQUNQQSxFQUFJdDNELEVBQUtvM0QsTUFBUXhrQyxFQUFNbTFELFVBQVluMUQsRUFBTTgzRCxhQUFlbjNCLEVBQU02RCxTQUVoRSxTQUFTRSxVQUNQQSxFQUFJdDNELEVBQUtvM0QsTUFBUXhrQyxFQUFNbTFELFVBQVluMUQsRUFBTTgzRCxhQUFlLEtBRTNELFNBQVNuekIsVUFDTkEsR0FBSzIwQixFQUFPLE1BQVEsVUFHeEJOLEVBQUdoNUQsRUFBTTBrQyxNQUNILE9BR0x3MEIsRUFBSWw1RCxFQUFNMGtDLE9BQ0osV0FDQTAwQixFQUFHcDVELEVBQU0ya0MsS0FFVHMwQixFQUFHajVELEVBQU0wa0MsT0FDVixRQUdMeTBCLEVBQUluNUQsRUFBTTBrQyxPQUNKLFdBQ0EwMEIsRUFBR3A1RCxFQUFNMmtDLFNBSWhCcjlDLEVBQU82d0UsRUFBUXZGLHVCQUVWdHJFLEVBQUt3c0UsT0FBU3hzRSxFQUFLd3NFLE9BQVNBLFNBQzVCeHNFLEVBQUt5c0UsT0FBU3pzRSxFQUFLeXNFLE9BQVNBLEdBaU92QndGLENBQW1CNStGLEtBQU1pOEYsR0FFK0J6ekIsRUFBR3ZDLGVBRWpFMHlCLFFBQVUsV0FHWFEsT0FBUzRDLEVBQVU1QyxTQUNuQkMsT0FBUzJDLEVBQVUzQyxTQUNuQnJ2QixFQUFJaXlCLEVBQWdCanlCLElBQ3BCQyxFQUFJZ3lCLEVBQWdCaHlCLElBQ3BCSCxNQUFRb3lCLEVBQVlweUIsUUFDcEJDLE9BQVNteUIsRUFBWW55QixTQUdyQm95QixPQUFTN0QsRUFBZ0J0dUIsSUFDekJveUIsT0FBUzlELEVBQWdCcnVCLElBRTVCc1UsT0FBU2o1QyxFQUVScTJELEdBQVcvdUUsRUFBS2t5RSxVQUNkQSxPQUFPaDdGLEtBQUsya0UsRUFBSW5qQyxHQUdmbWpDLGFBR0csU0FBU3MyQixFQUFjcnNGLE9BQzdCa1csRUFBTTNvQixLQUFLaW1FLE9BQU90OUMsSUFDbEJvRixFQUFLL3RCLEtBQUt1akYsTUFDVndiLEVBQWdCLytGLEtBQUtnL0YsaUJBQWlCRixFQUFjcnNGLEVBQU1zYixLQUUxRHE4QyxPQUFPMjBCLEVBQWN4WCxHQUFJd1gsRUFBY3RYLE1BQ3ZDcmQsT0FBTzIwQixFQUFjdlgsR0FBSXVYLEVBQWM3dEIsTUFDdkM5RyxPQUFPMjBCLEVBQWNFLEdBQUlGLEVBQWNHLHNCQUUxQixTQUFTSixFQUFjcnNGLEVBQU1zYixPQUMxQ3c1RCxFQUFJQyxFQUFJeVgsRUFBSXhYLEVBQUl2VyxFQUFJZ3VCLEVBQ3BCMUUsRUFBWXpzRSxFQUFHeXNFLFVBQ2ZDLEVBQWUxc0UsRUFBRzBzRSxhQUNsQnRCLEVBQVNwckUsRUFBR29yRSxPQUNaQyxFQUFTcnJFLEVBQUdxckUsT0FDWitGLEVBQU1MLEVBQWEvMEIsRUFDbkJxMUIsRUFBTU4sRUFBYTkwQixFQUNuQkgsRUFBUXAzRCxFQUFLbzNELE1BQ2JDLEVBQVNyM0QsRUFBS3EzRCxVQUVILFdBQVhzdkIsSUFDRWdHLEVBQU90MUIsRUFBUyxFQUVOLFNBQVhxdkIsUUFDRWdHLEdBQ0szRSxJQUNMalQsSUFFQXJXLEVBQUtzcEIsSUFDTHRwQixFQUFLc3BCLFNBRUwyRSxFQUFNdDFCLEdBQ0Qyd0IsSUFDTGpULElBRUFyVyxFQUFLc3BCLElBQ0x0cEIsRUFBS3NwQixXQUdJLFNBQVhyQixRQUNFZ0csRUFBTTFFLEVBQWdCRCxHQUNqQkEsSUFDTGhULEVBQUtnVCxHQUNXLFVBQVhyQixRQUNMZ0csRUFBTXQxQixFQUFRNHdCLEVBQWVELEdBQ3hCQSxJQUNMaFQsRUFBS2dULFNBRUx6c0UsRUFBR211RSxRQUNFMUIsSUFDTGhULEVBQUtnVCxHQUVJLFFBQVhwQixPQUNFZ0csR0FDSzVFLElBQ0wvUyxNQUNDLE1BQ0QyWCxFQUFNdDFCLEdBQ0Qwd0IsSUFDTC9TLE1BRUQ1NEMsRUFBTW93RCxJQUNMMVgsSUFDQTE0QyxTQUdDMDRDLEdBQUlBLEVBQUlDLEdBQUlBLEVBQUl5WCxHQUFJQSxFQUFJeFgsR0FBSUEsRUFBSXZXLEdBQUlBLEVBQUlndUIsR0FBSUEsY0FHMUMsU0FBU0csRUFBSXR4RSxFQUFJcEYsRUFBS2d3RSxPQUM1QmYsRUFBUTdwRSxFQUFHNnBFLFNBRVhBLEVBQU1oeEYsT0FBUSxHQUNiMHZGLFVBQVl2b0UsRUFBR3V4RSxjQUNmL0ksYUFBZSxVQVFmdHlFLEVBQUcrVCxFQU5INmhFLEVBQWdCOXJFLEVBQUc4ckUsY0FDbkJFLEVBQWVoc0UsRUFBR2dzRSxtQkFFbEJuVSxVQUFZNlMsRUFBYTFxRSxFQUFHMnJFLGVBQWdCZixLQUM1Q2pYLEtBQU90YSxVQUFRaWEsV0FBV3dZLEVBQWU5ckUsRUFBRyt2RSxnQkFBaUIvdkUsRUFBR2d3RSxrQkFHL0Q5NUUsRUFBSSxFQUFHK1QsRUFBTTQvRCxFQUFNaHhGLE9BQVFxZCxFQUFJK1QsSUFBTy9ULElBQ3RDb3pFLFNBQVNPLEVBQU0zekUsR0FBSW83RSxFQUFHdDFCLEVBQUdzMUIsRUFBR3IxQixLQUM3QkEsR0FBSzZ2QixFQUFnQkUsRUFFcEI5MUUsRUFBSSxJQUFNMnpFLEVBQU1oeEYsV0FDaEJvakUsR0FBS2o4QyxFQUFHaXNFLGtCQUFvQkQsY0FNekIsU0FBU3NGLEVBQUl0eEUsRUFBSXBGLEVBQUtnd0UsT0FDM0JhLEVBQWV6ckUsRUFBR3lyRSxhQUNsQkMsRUFBYzFyRSxFQUFHMHJFLFlBQ2pCaDNGLEVBQU9zckIsRUFBR3RyQixPQUVWNnpGLFVBQVl2b0UsRUFBR3d4RSxhQUNmaEosYUFBZSxRQUNmN1UsS0FBT3RhLFVBQVFpYSxXQUFXbVksRUFBY3pyRSxFQUFHaXdFLGVBQWdCandFLEVBQUdrd0UscUJBRzlEdUIsRUFBZSxFQUNmQyxFQUFpQixTQUFTcFosS0FDekJnUixTQUFTaFIsRUFBTWdaLEVBQUd0MUIsRUFBSXkxQixFQUFjSCxFQUFHcjFCLEtBQ3hDQSxHQUFLd3ZCLEVBQWVDLEtBSXBCN1QsVUFBWTZTLEVBQWExcUUsRUFBR21xRSxjQUFlUyxhQUN2Q3J3QixLQUFLdjZDLEVBQUdpdEUsV0FBWXlFLE9BRXhCQyxFQUFpQjN4RSxFQUFHNHNFLGdCQUNUK0UsRUFBa0JsRyxFQUFlLEVBQUssWUFHN0NseEIsS0FBSzdsRSxFQUFNLFNBQVN5NEYsRUFBVWozRSxPQUNqQzA3RSxFQUFZbEgsRUFBYTFxRSxFQUFHc3VFLGdCQUFnQnA0RSxHQUFJMDBFLEtBQ2hEL1MsVUFBWStaLFlBQ1JyM0IsS0FBSzR5QixFQUFTOXRELE9BQVFxeUQsYUFFdEJuM0IsS0FBSzR5QixFQUFTeDRCLE1BQU8sU0FBUzJqQixHQUVqQ3FaLE1BRUM5WixVQUFZNlMsRUFBYTFxRSxFQUFHNnhFLHNCQUF1QmpILEtBQ25Ea0gsU0FBU1IsRUFBR3QxQixFQUFHczFCLEVBQUdyMUIsRUFBR3d2QixFQUFjQSxLQUduQzlULFVBQVksSUFDWkYsWUFBY2lULEVBQWExcUUsRUFBR3F1RSxZQUFZbjRFLEdBQUd3aEUsWUFBYWtULEtBQzFEbUgsV0FBV1QsRUFBR3QxQixFQUFHczFCLEVBQUdyMUIsRUFBR3d2QixFQUFjQSxLQUdyQzVULFVBQVk2UyxFQUFhMXFFLEVBQUdxdUUsWUFBWW40RSxHQUFHNGhFLGdCQUFpQjhTLEtBQzVEa0gsU0FBU1IsRUFBR3QxQixFQUFJLEVBQUdzMUIsRUFBR3IxQixFQUFJLEVBQUd3dkIsRUFBZSxFQUFHQSxFQUFlLEtBQzlENVQsVUFBWStaLEtBR0Z0WixlQUdSL2QsS0FBSzR5QixFQUFTRSxNQUFPcUUsT0FJZixZQUdQbjNCLEtBQUt2NkMsRUFBR3V0RSxVQUFXbUUsS0FDeEJ6MUIsR0FBS3l2QixjQUdHLFNBQVM0RixFQUFJdHhFLEVBQUlwRixFQUFLZ3dFLE9BQzdCNkMsRUFBU3p0RSxFQUFHeXRFLE9BRVpBLEVBQU81MEYsV0FDUG9qRSxHQUFLajhDLEVBQUd3c0Usa0JBRVBqRSxVQUFZdm9FLEVBQUdneUUsZUFDZnhKLGFBQWUsUUFFZjNRLFVBQVk2UyxFQUFhMXFFLEVBQUdrc0UsZ0JBQWlCdEIsS0FDN0NqWCxLQUFPdGEsVUFBUWlhLFdBQVd0ekQsRUFBR3FzRSxlQUFnQnJzRSxFQUFHbXdFLGlCQUFrQm53RSxFQUFHb3dFLDZCQUVqRTcxQixLQUFLa3pCLEVBQVEsU0FBU25WLEtBQ3pCZ1IsU0FBU2hSLEVBQU1nWixFQUFHdDFCLEVBQUdzMUIsRUFBR3IxQixLQUN6QkEsR0FBS2o4QyxFQUFHcXNFLGVBQWlCcnNFLEVBQUd1c0UsaUNBS2xCLFNBQVMrRSxFQUFJdHhFLEVBQUlwRixFQUFLc3pFLEVBQWF0RCxLQUM5Qy9TLFVBQVk2UyxFQUFhMXFFLEVBQUc4M0QsZ0JBQWlCOFMsS0FDN0NuVCxZQUFjaVQsRUFBYTFxRSxFQUFHMDNELFlBQWFrVCxLQUMzQ2pULFVBQVkzM0QsRUFBRzQzRCxnQkFDZndULEVBQVNwckUsRUFBR29yRSxPQUNaQyxFQUFTcnJFLEVBQUdxckUsT0FDWnJ2QixFQUFJczFCLEVBQUd0MUIsRUFDUEMsRUFBSXExQixFQUFHcjFCLEVBQ1BILEVBQVFveUIsRUFBWXB5QixNQUNwQkMsRUFBU215QixFQUFZbnlCLE9BQ3JCRyxFQUFTbDhDLEVBQUcwc0UsZUFFWjF2QixjQUNBWixPQUFPSixFQUFJRSxFQUFRRCxHQUNSLFFBQVhvdkIsUUFDRTRHLFVBQVVYLEVBQUlwRCxLQUVoQjd4QixPQUFPTCxFQUFJRixFQUFRSSxFQUFRRCxLQUMzQmkyQixpQkFBaUJsMkIsRUFBSUYsRUFBT0csRUFBR0QsRUFBSUYsRUFBT0csRUFBSUMsR0FDbkMsV0FBWG12QixHQUFrQyxVQUFYRCxRQUNyQjZHLFVBQVVYLEVBQUlwRCxLQUVoQjd4QixPQUFPTCxFQUFJRixFQUFPRyxFQUFJRixFQUFTRyxLQUMvQmcyQixpQkFBaUJsMkIsRUFBSUYsRUFBT0csRUFBSUYsRUFBUUMsRUFBSUYsRUFBUUksRUFBUUQsRUFBSUYsR0FDckQsV0FBWHN2QixRQUNFNEcsVUFBVVgsRUFBSXBELEtBRWhCN3hCLE9BQU9MLEVBQUlFLEVBQVFELEVBQUlGLEtBQ3ZCbTJCLGlCQUFpQmwyQixFQUFHQyxFQUFJRixFQUFRQyxFQUFHQyxFQUFJRixFQUFTRyxHQUNyQyxXQUFYbXZCLEdBQWtDLFNBQVhELFFBQ3JCNkcsVUFBVVgsRUFBSXBELEtBRWhCN3hCLE9BQU9MLEVBQUdDLEVBQUlDLEtBQ2RnMkIsaUJBQWlCbDJCLEVBQUdDLEVBQUdELEVBQUlFLEVBQVFELEtBQ25DTSxjQUVBZ0IsT0FFQXY5QyxFQUFHNDNELFlBQWMsS0FDaEJwYSxlQUlBLGVBQ0Q1aUQsRUFBTTNvQixLQUFLaW1FLE9BQU90OUMsSUFDbEJvRixFQUFLL3RCLEtBQUt1akYsU0FFSyxJQUFmeDFELEVBQUc0cUUsYUFJSHNELFNBQ0lsdUUsRUFBRzg3QyxhQUNGOTdDLEVBQUcrN0MsUUFFUnUxQixLQUNBdHhFLEVBQUdnOEMsSUFDSGg4QyxFQUFHaThDLEdBSUgydUIsRUFBVXh4RixLQUFLbTBFLElBQUl2dEQsRUFBRzRxRSxRQUFVLE1BQVEsRUFBSTVxRSxFQUFHNHFFLFFBRy9DdUgsRUFBb0JueUUsRUFBRzZwRSxNQUFNaHhGLFFBQVVtbkIsRUFBR2l0RSxXQUFXcDBGLFFBQVVtbkIsRUFBR3RyQixLQUFLbUUsUUFBVW1uQixFQUFHdXRFLFVBQVUxMEYsUUFBVW1uQixFQUFHeXRFLE9BQU81MEYsT0FFbEg1RyxLQUFLaTRGLFNBQVNrSSxTQUFXRCxTQUV2QkUsZUFBZWYsRUFBSXR4RSxFQUFJcEYsRUFBS3N6RSxFQUFhdEQsS0FHM0M1dUIsR0FBS2g4QyxFQUFHa3JFLFdBQ1JqdkIsR0FBS2o4QyxFQUFHbXJFLGNBR05tSCxVQUFVaEIsRUFBSXR4RSxFQUFJcEYsRUFBS2d3RSxRQUd2QjJILFNBQVNqQixFQUFJdHhFLEVBQUlwRixFQUFLZ3dFLFFBR3RCNEgsV0FBV2xCLEVBQUl0eEUsRUFBSXBGLEVBQUtnd0Usa0JBVWxCLFNBQVMzMEYsT0FHakIwM0YsRUFGQWx6QixFQUFLeG9FLEtBQ0x1USxFQUFVaTRELEVBQUd5dkIsa0JBR2Q0QyxZQUFjcnlCLEVBQUdxeUIsZ0JBR0wsYUFBWDcyRixFQUFFTyxPQUNGdTNGLGFBRUFBLFFBQVV0ekIsRUFBR3ZDLE9BQU91NkIsMEJBQTBCeDhGLEVBQUd1TSxFQUFRMCtDLEtBQU0xK0MsT0FJeEQ2MkQsVUFBUVMsWUFBWVcsRUFBR3N6QixRQUFTdHpCLEVBQUdxeUIsa0JBSTFDQSxZQUFjcnlCLEVBQUdzekIsU0FFaEJ2ckYsRUFBUTR2RixTQUFXNXZGLEVBQVFzdUYsWUFDM0J2QyxrQkFDQ3Q0RixFQUFFK2xFLElBQ0YvbEUsRUFBRWdtRSxLQUdIdDZDLFFBQU8sS0FDUCt3RSxVQUlFL0UsTUFPRHZELFlBQWNBLG9CQzk3QkwsU0FBU3ByQixZQXdEaEIyekIsRUFBcUJockIsU0FDVCxRQUFiQSxHQUFtQyxXQUFiQSxJQXREeEJ0cEUsV0FJQXUwRixlQUdBQyx5QkFrREV4M0UsT0FBTzJqRCxFQUFNM3BFLHFCQUlULFNBQVN5a0IsRUFBTXRJLE9BQ3JCaXBELEVBQUt4b0UsZ0JBbERTdWYsT0FLZnBkLEtBSktvZCxPQUlTcGQsS0FBT29kLEVBQU9wZCxrQkFDM0Jna0UsU0FBV2hrRSxFQUFLZ2tFLGVBQ2hCTyxPQUFTdmtFLEVBQUt1a0UsYUFFWm4yRCxRQUFVNjJELFVBQVFrVCxZQUN4QnpOLGNBQVNscUUsT0FDVGtxRSxjQUFTdHRELEVBQU9oYixNQUNoQmdiLEVBQU9oUCxhQUVEZ1AsRUFzQ0dzaEYsQ0FBV3RoRixPQUVoQjJRLEVBQVV2RSxTQUFTbTFFLGVBQWVqNUUsRUFBTXRJLEdBQ3hDbWdFLEVBQVN4dkQsR0FBV0EsRUFBUXd2RCxPQUM1QjVWLEVBQVM0VixHQUFVQSxFQUFPNVYsT0FDMUJELEVBQVE2VixHQUFVQSxFQUFPN1YsUUFFMUI1NkMsR0FBS200QyxVQUFRcmlFLFFBQ2I0akIsSUFBTXVILElBQ053dkQsT0FBU0EsSUFDVG5nRSxPQUFTQSxJQUNUc3FELE1BQVFBLElBQ1JDLE9BQVNBLElBQ1RvaEIsWUFBY3BoQixFQUFTRCxFQUFRQyxFQUFTLE9BQ3hDdjVELFFBQVVnUCxFQUFPaFAsVUFDakJ3d0YsaUJBQWtCLElBVWxCLzZCLE1BQVF3QyxJQUNSdzRCLFdBQWF4NEIsSUFHVm00QixVQUFVbjRCLEVBQUd2NUMsSUFBTXU1QyxTQUdsQnhpRSxlQUFld2lFLEVBQUksWUFDcEIsa0JBQ0dBLEVBQUdqcEQsT0FBT3BkLFVBRWIsU0FBU3dCLEtBQ1Y0YixPQUFPcGQsS0FBT3dCLEtBSWR1c0IsR0FBWXd2RCxLQVNkMkQsZUFDQTN6RCxrQkFMTXh0QixNQUFNLGlGQVdKLGVBQ1BzbUUsRUFBS3hvRSx5QkFHRHd2QixPQUFPZzVDLEVBQUksd0JBRVh5WSxZQUFZelksRUFBSUEsRUFBR2o0RCxRQUFRNndFLG9CQUVoQzZmLGFBRUN6NEIsRUFBR2o0RCxRQUFRMndGLGNBRVhDLFFBQU8sS0FJUkMsd0JBQ0FDLHdCQUNBQywyQkFHSzl4RSxPQUFPZzVDLEVBQUksYUFFWkEsU0FHRCw0QkFDRWtYLE9BQU90c0UsTUFBTXBULE1BQ2RBLFdBR0Ysa0NBRU11aEcsZ0JBQWdCdmhHLE1BQ3BCQSxhQUdBLFNBQVNrdUIsT0FDWnM2QyxFQUFLeG9FLEtBQ0x1USxFQUFVaTRELEVBQUdqNEQsUUFDYm12RSxFQUFTbFgsRUFBR2tYLE9BQ1p3TCxFQUFlMzZFLEVBQVFpeEYscUJBQXVCaDVCLEVBQUcwaUIsYUFBZ0IsS0FNakV1VyxFQUFXdDZGLEtBQUtDLElBQUksRUFBR0QsS0FBSzBmLE1BQU11Z0QsVUFBUXNaLGdCQUFnQmhCLEtBQzFEZ2lCLEVBQVl2NkYsS0FBS0MsSUFBSSxFQUFHRCxLQUFLMGYsTUFBTXFrRSxFQUFjdVcsRUFBV3ZXLEVBQWM5akIsVUFBUXlaLGlCQUFpQm5CLFNBRW5HbFgsRUFBR3FCLFFBQVU0M0IsR0FBWWo1QixFQUFHc0IsU0FBVzQzQixPQUlwQzczQixNQUFRckIsRUFBR3FCLE1BQVE0M0IsSUFDbkIzM0IsT0FBU3RCLEVBQUdzQixPQUFTNDNCLElBQ3JCMzZELE1BQU04aUMsTUFBUTQzQixFQUFXLE9BQ3pCMTZELE1BQU0raUMsT0FBUzQzQixFQUFZLGVBRTFCemdCLFlBQVl6WSxFQUFJajRELEVBQVE2d0UsbUJBRTNCbHpELEdBQVEsS0FFUnl6RSxHQUFXOTNCLE1BQU80M0IsRUFBVTMzQixPQUFRNDNCLGdCQUNoQ2x5RSxPQUFPZzVDLEVBQUksVUFBV201QixJQUcxQm41QixFQUFHajRELFFBQVFxeEYsWUFDWHJ4RixRQUFRcXhGLFNBQVNwNUIsRUFBSW01QixLQUd0QkUsU0FDQW55RSxpQkFDUTg0QyxFQUFHajRELFFBQVF1eEYsb0RBS0gsZUFDaEJ2eEYsRUFBVXZRLEtBQUt1USxRQUNmd3hGLEVBQWdCeHhGLEVBQVE2b0UsV0FDeEI0b0IsRUFBZXp4RixFQUFRNGlFLGdCQUVuQjdLLEtBQUt5NUIsRUFBY0UsTUFBTyxTQUFTQyxFQUFjdjdGLEtBQzNDc29CLEdBQUtpekUsRUFBYWp6RSxJQUFPLFVBQVl0b0IsY0FHM0MyaEUsS0FBS3k1QixFQUFjSSxNQUFPLFNBQVNDLEVBQWN6N0YsS0FDM0Nzb0IsR0FBS216RSxFQUFhbnpFLElBQU8sVUFBWXRvQixJQUcvQ3E3RixNQUNVL3lFLEdBQUsreUUsRUFBYS95RSxJQUFNLDhCQU9sQixlQUNoQnU1QyxFQUFLeG9FLEtBQ0x1USxFQUFVaTRELEVBQUdqNEQsUUFDYjZvRSxFQUFTNVEsRUFBRzRRLFdBQ1p2M0QsS0FDQXdnRixFQUFVdi9GLE9BQU9rQyxLQUFLbzBFLEdBQVF2dkQsT0FBTyxTQUFTdkQsRUFBSzJJLFlBQ2xEQSxJQUFNLEVBQ0gzSSxPQUdKL1YsRUFBUTZvRSxXQUNIdjNELEVBQU1hLFFBQ1puUyxFQUFRNm9FLE9BQU82b0IsV0FBYXh0RixJQUFJLFNBQVN5dEYsVUFDakMzeEYsUUFBUzJ4RixFQUFjSSxNQUFPLFdBQVlDLFVBQVcsYUFFN0RoeUYsRUFBUTZvRSxPQUFPK29CLFdBQWExdEYsSUFBSSxTQUFTMnRGLFVBQ2pDN3hGLFFBQVM2eEYsRUFBY0UsTUFBTyxTQUFVQyxVQUFXLFlBSzFEaHlGLEVBQVE0aUUsU0FDTGxtRSxjQUNJc0QsRUFBUTRpRSxZQUNWLDBCQUNJLFlBQ0Esd0JBSUw3SyxLQUFLem1ELEVBQU8sU0FBU2dHLE9BQ3hCbTZFLEVBQWVuNkUsRUFBS3RYLFFBQ3BCMGUsRUFBSyt5RSxFQUFhL3lFLEdBQ2xCdXpFLEVBQVlwN0IsVUFBUUMsZUFBZTI2QixFQUFhejlGLEtBQU1zakIsRUFBS3k2RSxPQUUzRDVCLEVBQXFCc0IsRUFBYXRzQixZQUFjZ3JCLEVBQXFCNzRFLEVBQUswNkUsZUFDaEU3c0IsU0FBVzd0RCxFQUFLMDZFLGFBR3RCdHpFLElBQU0sTUFDVmtrRCxFQUFRLFFBQ1Jsa0QsS0FBTW1xRCxHQUFVQSxFQUFPbnFELEdBQUkxcUIsT0FBU2krRixLQUMvQnBwQixFQUFPbnFELElBQ1QxZSxRQUFVeXhGLElBQ1ZyNUUsSUFBTTYvQyxFQUFHNy9DLE1BQ1RxOUMsTUFBUXdDLE1BQ1IsS0FDRmk2QixFQUFham9CLGtCQUFha29CLG9CQUFvQkYsT0FDN0NDLFdBR0csSUFBSUEsTUFDUHh6RSxPQUNFdXpFLFVBQ0dSLE1BQ0p4NUIsRUFBRzcvQyxVQUNENi9DLE1BRUQySyxFQUFNbGtELElBQU1ra0QsSUFHZHd2QixvQkFLRjk2RSxFQUFLKzZFLGNBQ0x6dkIsTUFBUUEsZUFJTDdLLEtBQUsrNUIsRUFBUyxTQUFTUSxFQUFZNXpFLEdBQ3JDNHpFLFVBQ0d6cEIsRUFBT25xRCxPQUlibXFELE9BQVNBLG9CQUVDMHBCLGtCQUFrQjlpRyxnQ0FHTixlQUNyQndvRSxFQUFLeG9FLEtBQ0xvTSxLQUNBMjJGLHNCQUVJejZCLEtBQUtFLEVBQUdybUUsS0FBS2drRSxTQUFVLFNBQVN4aUQsRUFBU29tRSxPQUM1Q2xCLEVBQU9yZ0IsRUFBR3dnQixlQUFlZSxHQUN6QnhsRixFQUFPb2YsRUFBUXBmLE1BQVFpa0UsRUFBR2pwRCxPQUFPaGIsUUFFakNza0YsRUFBS3RrRixNQUFRc2tGLEVBQUt0a0YsT0FBU0EsTUFDM0J5K0YsbUJBQW1CalosS0FDZnZoQixFQUFHd2dCLGVBQWVlLE1BRXJCeGxGLEtBQU9BLElBRU4wSSxLQUFLNDdFLEVBQUt0a0YsTUFFWnNrRixFQUFLbVksYUFDSEEsV0FBV2lDLFlBQVlsWixLQUN2QmlYLFdBQVdrQyxpQkFDVixLQUNGQyxFQUFrQnAyQixFQUFNNnpCLFlBQVkvWCxFQUFLdGtGLGNBQ3JCZCxJQUFwQjAvRixRQUNHLElBQUk3MEYsTUFBTSxJQUFNdTZFLEVBQUt0a0YsS0FBTyw0QkFHOUJ5OEYsV0FBYSxJQUFJbUMsRUFBZ0IzNkIsRUFBSXVoQixLQUMzQjk4RSxLQUFLNDdFLEVBQUttWSxjQUV4Qng0QixHQUVJdTZCLGlCQU9PLGVBQ1Z2NkIsRUFBS3hvRSxlQUNEc29FLEtBQUtFLEVBQUdybUUsS0FBS2drRSxTQUFVLFNBQVN4aUQsRUFBU29tRSxLQUM3Q2YsZUFBZWUsR0FBY2lYLFdBQVdvQyxTQUN6QzU2QixVQU1HLGdCQUNENjZCLHFCQUNBN0YsUUFBUW5hLHFCQUdOLFNBQVM5akUsT0FsVUl5bUQsRUFDakJzOUIsRUFrVUM5NkIsRUFBS3hvRSxRQUVKdWYsR0FBNEIscUJBQVhBLHNCQUFBQSxrQkFHVkEsT0FDSi9YLFVBQVUsS0F4VWY4N0YsR0FEaUJ0OUIsRUE2VVB3QyxHQTVVU2o0RCxrQkFFZiszRCxLQUFLdEMsRUFBTW9ULE9BQVEsU0FBU2pHLGdCQUMzQm93QixVQUFVdjlCLEVBQU9tTixPQUdiL0wsVUFBUWtULFlBQ3BCdk4sRUFBTUYsU0FBU2xxRSxPQUNmb3FFLEVBQU1GLFNBQVM3RyxFQUFNem1ELE9BQU9oYixNQUM1QisrRixLQUVLL3lGLFFBQVV5MUQsRUFBTXptRCxPQUFPaFAsUUFBVSt5RixJQUNqQ2xDLHdCQUNBQyx3QkFFQTdELFFBQVF2RixTQUFXcUwsRUFBV0UsV0FDOUJoRyxRQUFRbmEsMEJBZ1VMb2dCLFlBQVlqN0IsSUFFdUIsSUFBdkNpbEIsYUFBUWorRCxPQUFPZzVDLEVBQUksbUJBS3BCZzFCLFFBQVFueUQsTUFBUW05QixFQUFHcm1FLFNBR2xCNGdHLEVBQWlCdjZCLEVBQUdrN0IscUNBR2hCcDdCLEtBQUtFLEVBQUdybUUsS0FBS2drRSxTQUFVLFNBQVN4aUQsRUFBU29tRSxLQUM3Q2YsZUFBZWUsR0FBY2lYLFdBQVcyQyx5QkFDekNuN0IsS0FFQW83QixlQUdDcDdCLEVBQUdqNEQsUUFBUWt6RSxXQUFhamIsRUFBR2o0RCxRQUFRa3pFLFVBQVVuNEIsb0JBQ3hDZ2QsS0FBS3k2QixFQUFnQixTQUFTL0IsS0FDMUJvQyxZQUlWUyxtQkFJQXJHLFFBQVFuYSxlQUlSeWdCLDJCQUdLdDBFLE9BQU9nNUMsRUFBSSxlQUVmQSxFQUFHdTRCLGtCQUNIZ0QsMkJBQ1F4a0YsRUFBTytyQyxnQkFDVC9yQyxFQUFPeWtGLFlBQ1R6a0YsRUFBTzZ1QixRQUdYM1MsT0FBT2xjLGtCQVNFLFlBRzhCLElBQXZDa3VFLGFBQVFqK0QsT0FGSHh2QixLQUVjLCtCQUlmMHZCLE9BQU8xdkIsS0FBTUEsS0FBSzZwRSxNQUFPN3BFLEtBQUs4cEUscUJBUzlCdDZDLE9BZkN4dkIsS0FlVSxpQ0FDWHd2QixPQWhCQ3h2QixLQWdCVSxnQ0FRSixlQUdvQyxJQUEvQ3l0RixhQUFRaitELE9BRkh4dkIsS0FFYyw2QkFJbEIsSUFBSWlrQixFQUFJLEVBQUd5akQsRUFOUDFuRSxLQU1pQm1DLEtBQUtna0UsU0FBU3YvRCxPQUFRcWQsRUFBSXlqRCxJQUFRempELEVBTm5EamtCLEtBT0xpa0csY0FBY2hnRixnQkFHVnVMLE9BVkN4dkIsS0FVVSx1Q0FRTCxTQUFTMkcsT0FFbkJraUYsRUFESzdvRixLQUNLZ3BGLGVBQWVyaUYsR0FDekJNLFFBQ0c0aEYsUUFDQ2xpRixJQUdrRCxJQUF0RDhtRixhQUFRaitELE9BUEh4dkIsS0FPYyx1QkFBd0JpSCxRQUkxQys1RixXQUFXdHhFLHNCQUVSRixPQWJDeHZCLEtBYVUsc0JBQXVCaUgsYUFHbkMsU0FBU3NZLE9BQ1ppcEQsRUFBS3hvRSxLQUVKdWYsR0FBNEIscUJBQVhBLHNCQUFBQSxrQkFHVkEsT0FDSi9YLFVBQVUsU0FJZDhqRCxFQUFXL3JDLEVBQU8rckMsU0FDbEJsZCxFQUFPN3VCLEVBQU82dUIsU0FFeUIsSUFBdkNxL0MsYUFBUWorRCxPQUFPZzVDLEVBQUkscUJBSW5CMDdCLEVBQW1CMTdCLEVBQUdqNEQsUUFBUWt6RSxVQUM5QjBnQixFQUFhLFNBQVMxZ0IsZ0JBQ2pCajBELE9BQU9nNUMsRUFBSSx5QkFDWHZpQyxTQUFTaStELEdBQW9CQSxFQUFpQkMsWUFBYTFnQixHQUFZamIsT0FHNUUwN0IsU0FBMEMsSUFBYjU0QyxHQUF5QyxJQUFiQSxRQUF3QyxJQUFiQSxHQUEwRCxJQUE5QjQ0QyxFQUFpQjU0QyxVQUFrQixLQUNsSm00QixFQUFZLElBQUkyZ0IsMEJBQ1I5NEMsR0FBWTQ0QyxFQUFpQjU0QyxVQUFZLGFBQzVDL3JDLEVBQU95a0YsUUFBVUUsRUFBaUJGLGNBRWxDLFNBQVNoK0IsRUFBT3ErQixPQUNuQkMsRUFBaUJsOUIsVUFBUTQ4QixPQUFPOTZCLFFBQVFtN0IsRUFBZ0JMLFFBQ3hEN2YsRUFBY2tnQixFQUFnQmxnQixZQUM5Qm9nQixFQUFjcGdCLEVBQWNrZ0IsRUFBZ0JqZ0IsV0FFMUNvZ0IsS0FBS0YsRUFBZUMsR0FBY0EsRUFBYXBnQix3QkFHakMrZixFQUFpQk8sK0JBQ2pCTixvQkFHWE8sYUFBYWw4QixFQUFJaWIsRUFBV240QixFQUFVbGQsVUFFOUNvMkQsU0FHUSxJQUFJSixnQkFBV2hnQixTQUFVLEVBQUdwZSxNQUFPd0MsWUFHeENBLFNBR0YsU0FBU204QixPQUNWbjhCLEVBQUt4b0UsT0FFTm9ULFFBRUNnMEQsVUFBUTRULGNBQWMycEIsT0FDWCxLQUdaenJELFdBQVd5ckQsR0FFVm44QixFQUFHcUIsT0FBUyxHQUFLckIsRUFBR3NCLFFBQVUsSUFJc0IsSUFBcEQyakIsYUFBUWorRCxPQUFPZzVDLEVBQUksY0FBZW04QixnQkFLOUJyOEIsS0FBS0UsRUFBR3NOLE1BQU8sU0FBU3dCLEtBQzNCa3RCLEtBQUtoOEIsRUFBR3NRLFlBQ1Z0USxHQUVDQSxFQUFHMkssU0FDSEEsTUFBTXF4QixTQUdQSSxhQUFhRCxLQUNiRSxhQUFhRixnQkFFUm4xRSxPQUFPZzVDLEVBQUksYUFBY204QixpQkFNdEIsU0FBU0EsV0FHWDFnRixFQUFJLEVBQUd5akQsR0FGUDFuRSxLQUVrQm1DLEtBQUtna0UsY0FBZ0J2L0QsT0FBUXFkLEVBQUl5akQsSUFBUXpqRCxFQUYzRGprQixLQUdEK29GLGlCQUFpQjlrRSxJQUhoQmprQixLQUlKZ3BGLGVBQWUva0UsR0FBRys4RSxXQUFXOW5ELFdBQVd5ckQsR0FKcEMza0csS0FRTnc5RixRQUFRdGtELFdBQVd5ckQsaUJBUVQsU0FBU0EsT0FDbEJuOEIsRUFBS3hvRSxTQUV1RCxJQUE1RHl0RixhQUFRaitELE9BQU9nNUMsRUFBSSxzQkFBdUJtOEIsU0FLekMsSUFBSTFnRixHQUFLdWtELEVBQUdybUUsS0FBS2drRSxjQUFnQnYvRCxPQUFTLEVBQUdxZCxHQUFLLElBQUtBLEVBQ3ZEdWtELEVBQUd1Z0IsaUJBQWlCOWtFLE1BQ3BCNmdGLFlBQVk3Z0YsRUFBRzBnRixnQkFJWm4xRSxPQUFPZzVDLEVBQUkscUJBQXNCbThCLGtCQVE3QixTQUFTaCtGLEVBQU9nK0YsT0FFeEI5YixFQURLN29GLEtBQ0tncEYsZUFBZXJpRixHQUN6Qk0sUUFDRzRoRixRQUNDbGlGLGNBQ01nK0YsSUFHMEMsSUFBcERsWCxhQUFRaitELE9BUkh4dkIsS0FRYyxxQkFBc0JpSCxRQUl4Qys1RixXQUFXd0QsS0FBS0csZ0JBRWJuMUUsT0FkQ3h2QixLQWNVLG9CQUFxQmlILG1CQVEzQixTQUFTMDlGLE9BRWxCbkgsRUFES3g5RixLQUNRdzlGLFFBQ2J2MkYsV0FDTXUyRixjQUNJbUgsSUFHMEMsSUFBcERsWCxhQUFRaitELE9BUEh4dkIsS0FPYyxxQkFBc0JpSCxRQUlyQ3U5RixvQkFFQWgxRSxPQWJDeHZCLEtBYVUsb0JBQXFCaUgsd0JBS3RCLFNBQVNqRCxVQUNwQitnRyxpQkFBWUMsTUFBTUMsT0FBT2psRyxLQUFNZ0UsdUJBR25CLFNBQVNBLFVBQ3JCK2dHLGlCQUFZQyxNQUFNdmpHLE1BQU16QixLQUFNZ0UsR0FBSW1sRixXQUFXLHdCQUdqQyxTQUFTbmxGLFVBQ3JCK2dHLGlCQUFZQyxNQUFNLFVBQVVobEcsS0FBTWdFLEdBQUltbEYsV0FBVywrQkFHOUIsU0FBU25sRixFQUFHaXJELEVBQU0xK0MsT0FDeENvaEIsRUFBU296RSxpQkFBWUMsTUFBTS8xQyxTQUNULG1CQUFYdDlCLEVBQ0hBLEVBQU8zeEIsS0FBTWdFLEVBQUd1TSx5QkFNTixTQUFTdk0sVUFDcEIrZ0csaUJBQVlDLE1BQU1yaEYsUUFBUTNqQixLQUFNZ0UsR0FBSW1sRixXQUFXLG9CQUd2QyxTQUFTWSxPQUVwQnBtRSxFQURLM2pCLEtBQ1FtQyxLQUFLZ2tFLFNBQVM0akIsR0FDMUJwbUUsRUFBUXVoRixVQUNKQSxjQUdMcmMsRUFBT2xsRSxFQUFRdWhGLE1BTlZsbEcsS0FNbUJpdkIsV0FDdkI0NUQsTUFDR2xsRSxFQUFRdWhGLE1BUlBsbEcsS0FRZ0JpdkIsVUFDakIscUJBRUcsZ0JBQ0csWUFDSixhQUNDLGFBQ0EsT0FJSjQ1RCwwQkFHZ0IsbUJBQ25CeGdGLEVBQVEsRUFDSDRiLEVBQUksRUFBR3lqRCxFQUFPMW5FLEtBQUttQyxLQUFLZ2tFLFNBQVN2L0QsT0FBUXFkLEVBQUl5akQsSUFBUXpqRCxFQUN6RGprQixLQUFLK29GLGlCQUFpQjlrRSxlQUlwQjViLG9CQUdVLFNBQVMwaEYsT0FDdEJsQixFQUFPN29GLEtBQUtncEYsZUFBZWUsU0FJRCxrQkFBaEJsQixFQUFLdkYsUUFBd0J1RixFQUFLdkYsUUFBVXRqRixLQUFLbUMsS0FBS2drRSxTQUFTNGpCLEdBQWN6Ryx1QkFHNUUsa0JBQ1J0akYsS0FBS3VRLFFBQVE0MEYsZUFBZW5sRywwQkFNaEIsU0FBUytwRixPQUN4Qjk2RCxFQUFLanZCLEtBQUtpdkIsR0FDVnRMLEVBQVUzakIsS0FBS21DLEtBQUtna0UsU0FBUzRqQixHQUM3QmxCLEVBQU9sbEUsRUFBUXVoRixPQUFTdmhGLEVBQVF1aEYsTUFBTWoyRSxHQUV0QzQ1RCxNQUNFbVksV0FBV2huRCxpQkFDVHIyQixFQUFRdWhGLE1BQU1qMkUsYUFJZCxlQUdKaEwsRUFBR3lqRCxFQUZIYyxFQUFLeG9FLEtBQ0wwL0UsRUFBU2xYLEVBQUdrWCxhQUdibWlCLE9BR0U1OUUsRUFBSSxFQUFHeWpELEVBQU9jLEVBQUdybUUsS0FBS2drRSxTQUFTdi9ELE9BQVFxZCxFQUFJeWpELElBQVF6akQsSUFDcEQrK0UsbUJBQW1CLytFLEdBR25CeTdELE1BQ0EwbEIseUJBQ0sxbEIsT0FBT3RzRSxNQUFNbzFELFlBQ1o2OEIsZUFBZTc4QixFQUFHNy9DLE9BQ3hCKzJELE9BQVMsT0FDVC8yRCxJQUFNLG1CQUdGNkcsT0FBT2c1QyxFQUFJLGtCQUVadUUsRUFBTTR6QixVQUFVbjRCLEVBQUd2NUMsbUJBR1osa0JBQ1BqdkIsS0FBSzAvRSxPQUFPNGxCLFVBQVV2K0YsTUFBTS9HLEtBQUswL0UsT0FBUWw0RSx3QkFHcEMsZUFDUmdoRSxFQUFLeG9FLE9BQ053OUYsUUFBVSxJQUFJK0gscUJBQ1IvOEIsaUJBQ1FBLFFBQ1RBLEVBQUdybUUsY0FDQXFtRSxFQUFHajRELFFBQVFpekYsVUFDbkJoN0IsZUFNUSxlQUNQQSxFQUFLeG9FLEtBQ0x3akMsRUFBWWdsQyxFQUFHZzlCLGNBQ2ZqYSxFQUFXLGFBQ1hrYSxhQUFhMStGLE1BQU15aEUsRUFBSWhoRSxzQkFHbkI4Z0UsS0FBS0UsRUFBR2o0RCxRQUFRK3dDLE9BQVEsU0FBUy84QyxZQUMvQjhlLGlCQUFpQm1sRCxFQUFJamtFLEVBQU1nbkYsS0FDMUJobkYsR0FBUWduRixJQUtmL2lCLEVBQUdqNEQsUUFBUTJ3RixlQUNILGFBQ1BDLG1CQUdLOTlFLGlCQUFpQm1sRCxFQUFJLFNBQVUraUIsS0FDOUI0VixPQUFTNVYsaUJBT1AsZUFDVC9pQixFQUFLeG9FLEtBQ0x3akMsRUFBWWdsQyxFQUFHZzlCLFdBQ2RoaUUsV0FJRWdsQyxFQUFHZzlCLHFCQUNGbDlCLEtBQUs5a0MsRUFBVyxTQUFTK25ELEVBQVVobkYsWUFDakNzZixvQkFBb0Iya0QsRUFBSWprRSxFQUFNZ25GLHdCQUl2QixTQUFTbkYsRUFBVW4zQixFQUFNa3hDLE9BRXRDdjZFLEVBQVMzQixFQUFHeWpELEVBRFovMUMsRUFBU3d1RSxFQUFVLGdCQUFrQix1QkFHcENsOEUsRUFBSSxFQUFHeWpELEVBQU8wZSxFQUFTeC9FLE9BQVFxZCxFQUFJeWpELElBQVF6akQsS0FDckNtaUUsRUFBU25pRSxVQUViK2tFLGVBQWVwakUsRUFBUXFrRSxlQUFlK1csV0FBV3J2RSxHQUFRL0wsaUJBUW5ELFNBQVM1aEIsT0FDbEJ3a0UsRUFBS3hvRSxLQUNMdzlGLEVBQVVoMUIsRUFBR2cxQixZQUU4QixJQUEzQy9QLGFBQVFqK0QsT0FBT2c1QyxFQUFJLGVBQWdCeGtFLE9BS3BDKzhGLGlCQUFrQixJQUNsQmdELGlCQUFtQixTQUVsQnJJLEVBQVVsekIsRUFBR2s5QixZQUFZMWhHLEdBS3pCdzVGLE1BQ09BLEVBQVFoYSxPQUNmZ2EsRUFBUWtJLFlBQVkxaEcsR0FDcEIwM0YsRUFBVThCLEVBQVFrSSxZQUFZMWhHLGlCQUcxQndyQixPQUFPZzVDLEVBQUksY0FBZXhrRSxRQUU5QjJoRyxFQUFrQm45QixFQUFHdTdCLHdCQUNyQjRCLElBRUFscUUsT0FBT2txRSxHQUNBakssSUFBWWx6QixFQUFHbWIsY0FFdEJrZSxTQUlBcG1FLGlCQUNRK3NDLEVBQUdqNEQsUUFBUXExRixNQUFNQyx3QkFDckIsT0FJTDlFLGlCQUFrQixJQUNsQmdELGlCQUFtQixLQUVmdjdCLGdCQVNLLFNBQVN4a0UsT0FJakIwM0YsRUFIQWx6QixFQUFLeG9FLEtBQ0x1USxFQUFVaTRELEVBQUdqNEQsWUFDYnUxRixFQUFldjFGLEVBQVFxMUYsZUFHeEI5QixXQUFhdDdCLEVBQUdzN0IsZUFHSixhQUFYOS9GLEVBQUVPLE9BQ0Y4cEMsWUFFQUEsT0FBU202QixFQUFHZzRCLDBCQUEwQng4RixFQUFHOGhHLEVBQWE3MkMsS0FBTTYyQyxhQUt4RDcvRCxTQUFTMTFCLEVBQVF3MUYsU0FBV3gxRixFQUFRcTFGLE1BQU1HLFNBQVUvaEcsRUFBRTA5QyxPQUFROG1CLEVBQUduNkIsUUFBU202QixHQUVuRSxZQUFYeGtFLEVBQUVPLE1BQWlDLFVBQVhQLEVBQUVPLE1BQ3pCZ00sRUFBUXkxRixXQUVIQSxRQUFRbmlHLEtBQUsya0UsRUFBSXhrRSxFQUFFMDlDLE9BQVE4bUIsRUFBR242QixRQUtwQ202QixFQUFHczdCLFdBQVdsOUYsVUFDZHEvRixpQkFBaUJ6OUIsRUFBR3M3QixXQUFZZ0MsRUFBYTcyQyxNQUFNLEdBSW5EdVosRUFBR242QixPQUFPem5DLFFBQVVrL0YsRUFBYTcyQyxRQUNqQ2czQyxpQkFBaUJ6OUIsRUFBR242QixPQUFReTNELEVBQWE3MkMsTUFBTSxNQUd4Q21ZLFVBQVFTLFlBQVlXLEVBQUduNkIsT0FBUW02QixFQUFHczdCLGNBRzFDQSxXQUFhdDdCLEVBQUduNkIsT0FFWnF0RCxPQVdId0ssV0FBYW41QiwwQkMxN0JILFNBQVNBLE9BRXJCbzVCLEdBQWUsT0FBUSxNQUFPLFFBQVMsU0FBVSxvQkFnRDVDQyxFQUFvQjMrRixFQUFPOGpGLE9BQy9COGEsRUFBTzUrRixFQUFNNitGLFlBQ1pELE9BSUQ3aUUsRUFBWTZpRSxFQUFLN2lFLFVBQ2pCNzhCLEVBQVE2OEIsRUFBVTFiLFFBQVF5akUsSUFDZixJQUFYNWtGLEtBQ09pTSxPQUFPak0sRUFBTyxHQUdyQjY4QixFQUFVNThCLE9BQVMsTUFJWDBMLFFBQVEsU0FBU3hNLFVBQ3JCMkIsRUFBTTNCLFlBR1AyQixFQUFNNitGLGFBSVJDLGtCQUFvQixTQUFTdmdDLEVBQU8rakIsUUFDcEMxRyxXQUFXcmQsRUFBTytqQixjQUdoQjNnRSxPQUFPMmpELEVBQU13NUIsa0JBQWtCbmpHLDhCQU1sQixxQkFNSCxnQkFFTCxTQUFTNGlFLEVBQU8rakIsR0FDbEIvcEYsS0FDTmdtRSxNQUFRQSxFQURGaG1FLEtBRU4yRyxNQUFRb2pGLEVBRkYvcEYsS0FHTmtqRyxhQUhNbGpHLEtBSU53bUcsMkJBR1MsU0FBU3pjLFFBQ2hCcGpGLE1BQVFvakYsY0FHRixlQUNQdmhCLEVBQUt4b0UsS0FDTDZvRixFQUFPcmdCLEVBQUdpK0IsVUFDVjlpRixFQUFVNmtELEVBQUdrK0IsYUFFSSxPQUFqQjdkLEVBQUs4ZCxTQUFzQjlkLEVBQUs4ZCxXQUFXbitCLEVBQUd4QyxNQUFNb1QsV0FDbER1dEIsUUFBVWhqRixFQUFRZ2pGLFNBQVduK0IsRUFBR3hDLE1BQU16MUQsUUFBUTZvRSxPQUFPNm9CLE1BQU0sR0FBR2h6RSxJQUUvQyxPQUFqQjQ1RCxFQUFLK2QsU0FBc0IvZCxFQUFLK2QsV0FBV3ArQixFQUFHeEMsTUFBTW9ULFdBQ2xEd3RCLFFBQVVqakYsRUFBUWlqRixTQUFXcCtCLEVBQUd4QyxNQUFNejFELFFBQVE2b0UsT0FBTytvQixNQUFNLEdBQUdsekUsZ0JBSXpELGtCQUNKanZCLEtBQUtnbUUsTUFBTTdqRSxLQUFLZ2tFLFNBQVNubUUsS0FBSzJHLGdCQUc3QixrQkFDRDNHLEtBQUtnbUUsTUFBTWdqQixlQUFlaHBGLEtBQUsyRyxzQkFHeEIsU0FBU2tnRyxVQUNoQjdtRyxLQUFLZ21FLE1BQU1vVCxPQUFPeXRCLFVBR25CLGdCQUNEbjNFLFFBQU8sWUFNSixXQUNKMXZCLEtBQUtxckMsU0FDWXJyQyxLQUFLcXJDLE1BQU9yckMseUJBSWYsZUFFZHVFLEVBREt2RSxLQUNLOG1HLDBCQUNQdmlHLEdBQVEsSUFBSUEsVUFGVnZFLEtBR0dnbUUsb0JBSEhobUUsS0FJVTJHLHdCQUlKLFNBQVNBLE9BRXBCcEMsRUFES3ZFLEtBQ0srbUcsdUJBQ1B4aUcsR0FBUSxJQUFJQSxVQUZWdkUsS0FHR2dtRSxvQkFISGhtRSxLQUlVMkcsYUFDVkEsaUJBSUcsZUFLUnNkLEVBQUd5akQsRUFISG1oQixFQURLN29GLEtBQ0t5bUcsVUFDVnRrRyxFQUZLbkMsS0FFSzBtRyxhQUFhdmtHLFNBQ3ZCNmtHLEVBQVduZSxFQUFLMW1GLFNBR2Y4aEIsRUFBSSxFQUFHeWpELEVBQU92bEUsRUFBS3lFLE9BQVFxZCxFQUFJeWpELElBQVF6akQsSUFDbENBLEdBQUsraUYsRUFBUy9pRixJQVBmamtCLEtBT3dCaW5HLGVBQWVoakYsS0FHM0NOLFFBQVVrbEUsRUFBS2xsRSxTQVZYM2pCLEtBVXlCa25HLHdDQUdmLFNBQVN2Z0csT0FDeEJpZixFQUFVNWxCLEtBQUtpbkcsZUFBZXRnRyxRQUM3QjgvRixVQUFVdGtHLEtBQUt5USxPQUFPak0sRUFBTyxFQUFHaWYsUUFDaEN1aEYsY0FBY3ZoRixFQUFTamYsR0FBTywwQkFHYixlQTVLR2MsRUFBTzhqRixFQTZLNUIvaUIsRUFBS3hvRSxLQUNMMmpCLEVBQVU2a0QsRUFBR2srQixhQUNidmtHLEVBQU93aEIsRUFBUXhoQixPQUFTd2hCLEVBQVF4aEIsU0FLaENxbUUsRUFBR245QixRQUFVbHBDLElBQ1pxbUUsRUFBR245QixTQUVjbTlCLEVBQUduOUIsTUFBT205QixHQXZMQStpQixFQTBMUC9pQixHQTFMQS9nRSxFQTBMTnRGLEdBekxWbWtHLFdBQ0hBLFNBQVM5aUUsVUFBVXYyQixLQUFLcytFLFdBSXhCdmxGLGVBQWV5QixFQUFPLDBCQUNkLGNBQ0Ysb0JBRUM4akYsUUFJRmo1RSxRQUFRLFNBQVN4TSxPQUN4QjZyQixFQUFTLFNBQVc3ckIsRUFBSXlpQixPQUFPLEdBQUdGLGNBQWdCdmlCLEVBQUkwTCxNQUFNLEdBQzVEdzJCLEVBQU92Z0MsRUFBTTNCLFVBRVZFLGVBQWV5QixFQUFPM0IsaUJBQ2QsY0FDRixRQUNMLGVBQ0ZtQixFQUFPUyxNQUFNdEUsVUFBVW9PLE1BQU0zTixLQUFLMkQsV0FDbENnaUIsRUFBTXdlLEVBQUtqaEMsTUFBTS9HLEtBQU1pSCxvQkFFbkJxaEUsS0FBSzdnRSxFQUFNNitGLFNBQVM5aUUsVUFBVyxTQUFTMzlCLEdBQ2pCLG1CQUFuQkEsRUFBTzhyQixNQUNWQSxHQUFRNXFCLE1BQU1sQixFQUFRb0IsS0FJeEJ1aUIsVUE0Skw2aEIsTUFBUWxwQyxLQUtUaWxHLHlCQUdJaGdDLFVBQVFob0QsZ0JBRUosU0FBU3VsRixXQUNoQjliLEVBQU83b0YsS0FBS3ltRyxVQUNacmdCLEVBQVd5QyxFQUFLMW1GLFNBQ2hCdWxFLEVBQU8wZSxFQUFTeC9FLE9BQ2hCcWQsRUFBSSxFQUVEQSxFQUFJeWpELElBQVF6akQsSUFDVEEsR0FBR2kxQixXQUFXeXJELEdBR3BCOWIsRUFBS2xsRSxXQUNIQSxRQUFRdTFCLFdBQVd5ckQsU0FJcEIsZUFDRDliLEVBQU83b0YsS0FBS3ltRyxVQUNacmdCLEVBQVd5QyxFQUFLMW1GLFNBQ2hCdWxFLEVBQU8wZSxFQUFTeC9FLE9BQ2hCcWQsRUFBSSxNQUVKNGtFLEVBQUtsbEUsV0FDSEEsUUFBUTZnRixPQUdQdmdGLEVBQUl5akQsSUFBUXpqRCxJQUNUQSxHQUFHdWdGLHlCQUlJLFNBQVM1K0UsYUFDbEI3TyxNQUFNNk8sRUFBUTA0RCxPQUFRMTRELEVBQVF5aEYsMkJBQy9CemhGLEVBQVF5aEYsOEJBR0QsU0FBU3poRixPQUNuQmpDLEVBQVUzakIsS0FBS2dtRSxNQUFNN2pFLEtBQUtna0UsU0FBU3ZnRCxFQUFRcWtFLGVBQzNDdGpGLEVBQVFpZixFQUFRb2tFLE9BQ2hCNlUsRUFBU2o1RSxFQUFRaTVFLFdBQ2pCeDNCLEVBQWlCRCxVQUFRNkIsc0JBQ3pCd1osRUFBZ0JyYixVQUFRcWIsY0FDeEJwOUMsRUFBUXpmLEVBQVEwNEQsU0FFWitvQixnQ0FDVWhpRSxFQUFNd2dELDRCQUNWeGdELEVBQU1vZ0Qsd0JBQ05wZ0QsRUFBTXNnRCxlQUdkRSxnQkFBa0JnWixFQUFPeUkscUJBQXVCekksRUFBT3lJLHFCQUF1QmpnQyxFQUFlMWpELEVBQVEyakYscUJBQXNCM2dHLEVBQU84N0UsRUFBY3A5QyxFQUFNd2dELG9CQUN0SkosWUFBY29aLEVBQU8wSSxpQkFBbUIxSSxFQUFPMEksaUJBQW1CbGdDLEVBQWUxakQsRUFBUTRqRixpQkFBa0I1Z0csRUFBTzg3RSxFQUFjcDlDLEVBQU1vZ0QsZ0JBQ3RJRSxZQUFja1osRUFBTzJJLGlCQUFtQjNJLEVBQU8ySSxpQkFBbUJuZ0MsRUFBZTFqRCxFQUFRNmpGLGlCQUFrQjdnRyxFQUFPMCtCLEVBQU1zZ0QsNkJBTS9HLGVBRVhrRCxFQURLN29GLEtBQ0t5bUcsVUFDVnRrRyxFQUZLbkMsS0FFSzBtRyxhQUFhdmtHLEtBQ3ZCc2xHLEVBQVU1ZSxFQUFLMW1GLEtBQUt5RSxPQUNwQjhnRyxFQUFVdmxHLEVBQUt5RSxPQUVmOGdHLEVBQVVELElBQ1J0bEcsS0FBS3lRLE9BQU84MEYsRUFBU0QsRUFBVUMsR0FDMUJBLEVBQVVELEdBUlp6bkcsS0FTTDJuRyxlQUFlRixFQUFTQyxFQUFVRCxtQkFPdkIsU0FBU25nRyxFQUFPZSxPQUMxQixJQUFJNGIsRUFBSSxFQUFHQSxFQUFJNWIsSUFBUzRiLE9BQ3ZCMmpGLG1CQUFtQnRnRyxFQUFRMmMsZUFPdEIsZ0JBQ04wakYsZUFBZTNuRyxLQUFLMG1HLGFBQWF2a0csS0FBS3lFLE9BQVMsRUFBR1ksVUFBVVosbUJBTXZELGdCQUNMNi9GLFVBQVV0a0csS0FBSzJRLG1CQU1SLGdCQUNQMnpGLFVBQVV0a0csS0FBSzY3QixzQkFNUCxTQUFTMTJCLEVBQU9lLFFBQ3hCbytGLFVBQVV0a0csS0FBS3lRLE9BQU90TCxFQUFPZSxRQUM3QnMvRixlQUFlcmdHLEVBQU9FLFVBQVVaLE9BQVMsa0JBTWhDLGdCQUNUK2dHLGVBQWUsRUFBR25nRyxVQUFVWixhQUk3QjIvRixrQkFBa0JuOUUsT0FBU2crQyxVQUFRdUIsVUM1VDFDLFNBQVNrL0IsY0FBY0MsRUFBbUJDLE9BTXJDQyxFQUNBQyxFQUNBQyxFQVBBamEsUUFTQTZaLEVBQWtCSyxVQUFZTCxFQUFrQkssU0FBVyxJQUNwREwsRUFBa0JLLGFBQ3RCLEtBQ0ZDLEVBQVloaEMsVUFBUTBYLFFBQVFpcEIsRUFBVTNnRyxJQUFNMmdHLEVBQVU1bEYsS0FBSyxLQUNyRGlsRCxVQUFRMFgsUUFBUXNwQixHQUFhTixFQUFrQi9ULFNBQVcsSUFBSSxRQUd0RHR3RixPQUROcWtHLEVBQWtCRyxlQUdwQjlnRyxLQUFLbWlFLElBQUksR0FBSTIrQixLQUNaOWdHLEtBQUtraEcsS0FBS0gsRUFBVUYsR0FBVUEsT0FHdENNLEVBQVVuaEcsS0FBSzBmLE1BQU1raEYsRUFBVTVsRixJQUFNK2xGLEdBQVdBLEVBQ2hESyxFQUFVcGhHLEtBQUtraEcsS0FBS04sRUFBVTNnRyxJQUFNOGdHLEdBQVdBLEVBRzlDOWdDLFVBQVE0VCxjQUFjOHNCLEVBQWtCM2xGLE1BQVNpbEQsVUFBUTRULGNBQWM4c0IsRUFBa0IxZ0csT0FBUTBnRyxFQUFrQkssVUFFbkgvZ0MsVUFBUW1VLGFBQWF1c0IsRUFBa0IxZ0csSUFBTTBnRyxFQUFrQjNsRixLQUFPMmxGLEVBQWtCSyxTQUFVRCxFQUFVLFNBQ3JHSixFQUFrQjNsRixNQUNsQjJsRixFQUFrQjFnRyxTQUkxQm9oRyxHQUFhRCxFQUFVRCxHQUFXSixJQUVsQzlnQyxVQUFRZ1UsYUFBYW90QixFQUFXcmhHLEtBQUt3cUUsTUFBTTYyQixHQUFZTixFQUFVLEtBQ3hEL2dHLEtBQUt3cUUsTUFBTTYyQixHQUVYcmhHLEtBQUtraEcsS0FBS0csS0FHWCxFQUNSTixFQUFVLE1BQ0QvZ0csS0FBS21pRSxJQUFJLEdBQUksRUFBSW5pRSxLQUFLMGYsTUFBTXVnRCxVQUFRdVUsTUFBTXVzQixPQUM1Qy9nRyxLQUFLd3FFLE1BQU0yMkIsRUFBVUwsR0FBYUEsSUFDbEM5Z0csS0FBS3dxRSxNQUFNNDJCLEVBQVVOLEdBQWFBLEtBRXZDaDdGLFVBQStCeEosSUFBMUJxa0csRUFBa0IzbEYsSUFBb0IybEYsRUFBa0IzbEYsSUFBTW1tRixPQUNwRSxJQUFJOTdELEVBQUksRUFBR0EsRUFBSWc4RCxJQUFhaDhELElBQzFCdi9CLEtBQUs5RixLQUFLd3FFLE9BQU8yMkIsRUFBVTk3RCxFQUFJMDdELEdBQVdELEdBQWFBLFlBRXhEaDdGLFVBQStCeEosSUFBMUJxa0csRUFBa0IxZ0csSUFBb0IwZ0csRUFBa0IxZ0csSUFBTW1oRyxHQUVsRXRhLEVBR1IscUJBQWlCLFNBQVNsaEIsT0FFckIzdEQsRUFBT2dvRCxVQUFRaG9ELE9BRWJxcEYsZ0JBQWtCQyxXQUFNdC9FLHNCQUNkLFNBQVN6bEIsU0FDRixpQkFBVkEsR0FDRkEsRUFFRitrRyxXQUFNdGxHLFVBQVVpd0YsY0FBY3h2RixLQUFLN0QsS0FBTTJELDJCQUd6QixlQUNuQjZrRSxFQUFLeG9FLEtBRUxzeEYsRUFETzlvQixFQUFHajRELFFBQ00wOUUsU0FLaEJxRCxFQUFTdUMsWUFBYSxLQUNyQjhVLEVBQVV2aEMsVUFBUXNVLEtBQUtsVCxFQUFHcm1ELEtBQzFCeW1GLEVBQVV4aEMsVUFBUXNVLEtBQUtsVCxFQUFHcGhFLEtBRTFCdWhHLEVBQVUsR0FBS0MsRUFBVSxJQUV6QnhoRyxJQUFNLEVBQ0N1aEcsRUFBVSxHQUFLQyxFQUFVLE1BRWhDem1GLElBQU0sT0FJUDBtRixPQUEwQnBsRyxJQUFqQjZ0RixFQUFTbnZFLFVBQStDMWUsSUFBMUI2dEYsRUFBU3dYLGFBQ2hEQyxPQUEwQnRsRyxJQUFqQjZ0RixFQUFTbHFGLFVBQStDM0QsSUFBMUI2dEYsRUFBUzBYLGtCQUUvQnZsRyxJQUFqQjZ0RixFQUFTbnZFLE1BQ1RBLElBQU1tdkUsRUFBU252RSxTQUNrQjFlLElBQTFCNnRGLEVBQVN3WCxlQUNKLE9BQVh0Z0MsRUFBR3JtRCxNQUNIQSxJQUFNbXZFLEVBQVN3WCxlQUVmM21GLElBQU1oYixLQUFLZ2IsSUFBSXFtRCxFQUFHcm1ELElBQUttdkUsRUFBU3dYLG9CQUloQnJsRyxJQUFqQjZ0RixFQUFTbHFGLE1BQ1RBLElBQU1rcUYsRUFBU2xxRixTQUNrQjNELElBQTFCNnRGLEVBQVMwWCxlQUNKLE9BQVh4Z0MsRUFBR3BoRSxNQUNIQSxJQUFNa3FGLEVBQVMwWCxlQUVmNWhHLElBQU1ELEtBQUtDLElBQUlvaEUsRUFBR3BoRSxJQUFLa3FGLEVBQVMwWCxlQUlqQ0gsSUFBV0UsR0FLVnZnQyxFQUFHcm1ELEtBQU9xbUQsRUFBR3BoRSxNQUNaeWhHLElBQ0F6aEcsSUFBTW9oRSxFQUFHcm1ELElBQU0sSUFFZkEsSUFBTXFtRCxFQUFHcGhFLElBQU0sR0FLakJvaEUsRUFBR3JtRCxNQUFRcW1ELEVBQUdwaEUsUUFDZEEsTUFFRWtxRixFQUFTdUMsZUFDVjF4RSxxQkFJUS9DLDJCQUNZQSxhQUVkLGVBQ1BvcEQsRUFBS3hvRSxLQUVMc3hGLEVBRE85b0IsRUFBR2o0RCxRQUNNMDlFLE1BTWhCOEYsRUFBV3ZyQixFQUFHeWdDLGVBR2RDLGNBRk8vaEcsS0FBS0MsSUFBSSxFQUFHMnNGLE9BSWpCekMsRUFBU252RSxRQUNUbXZFLEVBQVNscUYsY0FDSGtxRixFQUFTMlcsbUJBQ1Y3Z0MsVUFBUUMsZUFBZWlxQixFQUFTNlgsY0FBZTdYLEVBQVM2VyxXQUUvRGxhLEVBQVF6bEIsRUFBR3lsQixNQUFRNFosY0FBY3FCLEVBQXlCMWdDLEtBRTNENGdDLDZCQUlBaGlHLElBQU1nZ0UsVUFBUWhnRSxJQUFJNm1GLEtBQ2xCOXJFLElBQU1pbEQsVUFBUWpsRCxJQUFJOHJFLEdBRWpCcUQsRUFBUy9wQixXQUNOQSxZQUVIamdFLE1BQVFraEUsRUFBR3BoRSxNQUNYdXpDLElBQU02dEIsRUFBR3JtRCxRQUVUN2EsTUFBUWtoRSxFQUFHcm1ELE1BQ1h3NEIsSUFBTTZ0QixFQUFHcGhFLDJCQUdRLGVBQ2pCb2hFLEVBQUt4b0UsT0FDTnFwRyxlQUFpQjdnQyxFQUFHeWxCLE1BQU16OEUsVUFDMUJ5a0YsY0FBZ0J6dEIsRUFBR3lsQixNQUFNbm1FLFFBQVEsY0FFOUIxa0IsVUFBVXl0RixxQkFBcUJodEYsS0FBSzJrRSxzQkM1TDVCLGVBT1o4Z0MsRUFBZVosV0FBTXQvRSxrQkFNYixlQUNOam5CLEVBQU9uQyxLQUFLZ21FLE1BQU03akUsWUFDZm5DLEtBQUt1USxRQUFRbTJELFNBQVcxbUUsS0FBS3czRSxlQUFpQnIxRSxFQUFLd2tFLFFBQVV4a0UsRUFBS3lrRSxVQUFZemtFLEVBQUt1a0UsNEJBR3RFLGVBS2hCbVUsRUFKQXJTLEVBQUt4b0UsS0FDTDBtRSxFQUFTOEIsRUFBRytnQyxjQUNiQyxTQUFXLElBQ1hDLFNBQVcvaUMsRUFBTzkvRCxPQUFTLE9BR0RuRCxJQUF6QitrRSxFQUFHajRELFFBQVEwOUUsTUFBTTlyRSxRQUVSdWtELEVBQU81K0MsUUFBUTBnRCxFQUFHajRELFFBQVEwOUUsTUFBTTlyRSxPQUN6Q3FuRixVQUEwQixJQUFmM3VCLEVBQW1CQSxFQUFZclMsRUFBR2doQyxlQUdwQi9sRyxJQUF6QitrRSxFQUFHajRELFFBQVEwOUUsTUFBTTdtRixRQUVScy9ELEVBQU81K0MsUUFBUTBnRCxFQUFHajRELFFBQVEwOUUsTUFBTTdtRixPQUN6Q3FpRyxVQUEwQixJQUFmNXVCLEVBQW1CQSxFQUFZclMsRUFBR2loQyxZQUc5Q3RuRixJQUFNdWtELEVBQU84QixFQUFHZ2hDLFlBQ2hCcGlHLElBQU1zL0QsRUFBTzhCLEVBQUdpaEMsc0JBR1IsZUFDUGpoQyxFQUFLeG9FLEtBQ0wwbUUsRUFBUzhCLEVBQUcrZ0MsY0FFYnRiLE1BQXlCLElBQWhCemxCLEVBQUdnaEMsVUFBa0JoaEMsRUFBR2loQyxXQUFhL2lDLEVBQU85L0QsT0FBUyxFQUFLOC9ELEVBQVNBLEVBQU9sMUQsTUFBTWczRCxFQUFHZ2hDLFNBQVVoaEMsRUFBR2loQyxTQUFXLHFCQUd0RyxTQUFTOWlHLEVBQU9vakYsT0FDN0J2aEIsRUFBS3hvRSxLQUNMbUMsRUFBT3FtRSxFQUFHeEMsTUFBTTdqRSxLQUNoQnExRSxFQUFlaFAsRUFBR2dQLHNCQUVsQnIxRSxFQUFLeWtFLFVBQVk0USxFQUNiaFAsRUFBRzZxQixjQUFjbHhGLEVBQUtna0UsU0FBUzRqQixHQUFjNW5GLEtBQUt3RSxJQUVuRDZoRSxFQUFHeWxCLE1BQU10bkYsRUFBUTZoRSxFQUFHZ2hDLDRCQUlWLFNBQVM3bEcsRUFBT2dELE9BUTdCK2lHLEVBUEFsaEMsRUFBS3hvRSxLQUNMdVIsRUFBU2kzRCxFQUFHajRELFFBQVFnQixPQUVwQm80RixFQUFZeGlHLEtBQUtDLElBQUtvaEUsRUFBR2loQyxTQUFXLEVBQUlqaEMsRUFBR2doQyxVQUFZajRGLEVBQVMsRUFBSSxHQUFLLFdBSy9EOU4sSUFBVkUsR0FBaUMsT0FBVkEsTUFDVjZrRSxFQUFHZ1AsZUFBaUI3ekUsRUFBTW9tRSxFQUFJcG1FLEVBQU1xbUUsUUFFL0J2bUUsSUFBbEJpbUcsUUFBMENqbUcsSUFBVkUsR0FBdUJ1akIsTUFBTXZnQixHQUFTLEtBQ3JFKy9ELEVBQVM4QixFQUFHK2dDLGNBQ1JHLEdBQWlCL2xHLE1BQ3JCaXFGLEVBQU1sbkIsRUFBTzUrQyxRQUFRbmtCLE1BQ1IsSUFBVGlxRixFQUFhQSxFQUFNam5GLEtBR3hCNmhFLEVBQUdnUCxlQUFnQixLQUNsQm95QixFQUFhcGhDLEVBQUdxQixNQUFROC9CLEVBQ3hCRSxFQUFlRCxHQUFjampHLEVBQVE2aEUsRUFBR2doQyxpQkFFeENqNEYsT0FDYXE0RixFQUFhLEdBR3ZCcGhDLEVBQUd6WCxLQUFPNXBELEtBQUt3cUUsTUFBTWs0QixPQUV6QkMsRUFBY3RoQyxFQUFHc0IsT0FBUzYvQixFQUMxQkksRUFBZ0JELEdBQWVuakcsRUFBUTZoRSxFQUFHZ2hDLGlCQUUxQ2o0RixPQUNjdTRGLEVBQWMsR0FHekJ0aEMsRUFBR3ZYLElBQU05cEQsS0FBS3dxRSxNQUFNbzRCLG9CQUVYLFNBQVNwakcsVUFDbEIzRyxLQUFLMnpGLGlCQUFpQjN6RixLQUFLaXVGLE1BQU10bkYsR0FBUUEsRUFBUTNHLEtBQUt3cEcsU0FBVSx3QkFFdEQsU0FBU2xXLE9BQ3RCOXFCLEVBQUt4b0UsS0FDTHVSLEVBQVNpM0QsRUFBR2o0RCxRQUFRZ0IsT0FFcEJvNEYsRUFBWXhpRyxLQUFLQyxJQUFLb2hFLEVBQUdtbkIsT0FBTy9vRixRQUFVMkssRUFBUyxFQUFJLEdBQUssR0FDNUR5NEYsRUFBT3hoQyxFQUFHZ1AsZUFDVnl5QixHQUFrQkQsRUFBT3hoQyxFQUFHcUIsTUFBUXJCLEVBQUdzQixRQUFVNi9CLFlBRTVDSyxFQUFPeGhDLEVBQUd6WCxLQUFPeVgsRUFBR3ZYLElBRXpCMS9DLE9BQ08wNEYsRUFBaUIsSUFHeEIzVyxHQUFTLEVBQ0osRUFFQW5zRixLQUFLd3FFLE1BQU0yaEIsRUFBUTJXLElBR2J6aEMsRUFBR2doQyx1QkFFTCxrQkFDTnhwRyxLQUFLMnJFLDRCQUlEdStCLGtCQUFrQixXQUFZWixZQTVIaEMseUJDRkssU0FBU3Y4QixPQUVyQm85QixZQUNPLHVCQUVDMWEsV0FBTUMsV0FBVzBhLFNBSXpCQyxFQUFjdDlCLEVBQU0wN0IsZ0JBQWdCci9FLDRCQUVsQixlQUNoQm8vQyxFQUFLeG9FLEtBQ0wyc0IsRUFBTzY3QyxFQUFHajRELFFBQ1Z5MUQsRUFBUXdDLEVBQUd4QyxNQUVYRyxFQURPSCxFQUFNN2pFLEtBQ0dna0UsU0FDaEJxUixFQUFlaFAsRUFBR2dQLHdCQUliOHlCLEVBQVV6aEIsVUFDWHJSLEVBQWVxUixFQUFLOGQsVUFBWW4rQixFQUFHdjVDLEdBQUs0NUQsRUFBSytkLFVBQVlwK0IsRUFBR3Y1QyxLQUlqRTlNLElBQU0sT0FDTi9hLElBQU0sU0FFTG1qRyxFQUFZNTlFLEVBQUtoVyxnQkFDSGxULElBQWQ4bUcsYUFDS2ppQyxLQUFLbkMsRUFBVSxTQUFTeGlELEVBQVNvbUUsT0FDcEN3Z0IsT0FJQTFoQixFQUFPN2lCLEVBQU1nakIsZUFBZWUsR0FDNUIvakIsRUFBTStpQixpQkFBaUJnQixJQUFpQnVnQixFQUFVemhCLFNBQ3RDcGxGLElBQWZvbEYsRUFBS255RSxXQUNPLE1BS1hpVyxFQUFLaFcsU0FBVzR6RixFQUFXLEtBQzFCQyxlQUVJbGlDLEtBQUtuQyxFQUFVLFNBQVN4aUQsRUFBU29tRSxPQUNwQ2xCLEVBQU83aUIsRUFBTWdqQixlQUFlZSxHQUM1QmprRixHQUNIK2lGLEVBQUt0a0YsVUFFY2QsTUFBWmtULGNBQXdDbFQsSUFBZm9sRixFQUFLbnlFLE1BQXVCcXpFLEVBQWUsR0FDM0VsQixFQUFLbnlFLE9BQ0pnTCxLQUFLLFVBRXFCamUsSUFBeEIrbUcsRUFBZTFrRyxPQUNIQSw4Q0FPWjJrRyxFQUFpQkQsRUFBZTFrRyxHQUFLMmtHLGVBQ3JDQyxFQUFpQkYsRUFBZTFrRyxHQUFLNGtHLGVBRXJDMWtDLEVBQU0raUIsaUJBQWlCZ0IsSUFBaUJ1Z0IsRUFBVXpoQixjQUM3Q3ZnQixLQUFLM2tELEVBQVF4aEIsS0FBTSxTQUFTZ3hGLEVBQVV4c0YsT0FDekNoRCxHQUFTNmtFLEVBQUc2cUIsY0FBY0YsR0FDMUJqc0UsTUFBTXZqQixJQUFVa2xGLEVBQUsxbUYsS0FBS3dFLEdBQU8yOEUsV0FJdEIzOEUsR0FBUzhqRyxFQUFlOWpHLElBQVUsSUFDbENBLEdBQVMrakcsRUFBZS9qRyxJQUFVLEVBRTdDZ21CLEVBQUtnK0UsaUJBQ09oa0csR0FBUyxJQUNkaEQsRUFBUSxJQUNIZ0QsSUFBVWhELElBRVZnRCxJQUFVaEQsaUJBTXJCMmtFLEtBQUtraUMsRUFBZ0IsU0FBU0ksT0FDakM1ekYsRUFBUzR6RixFQUFjSCxlQUFlL25GLE9BQU9rb0YsRUFBY0YsZ0JBQzNERyxFQUFTempDLFVBQVFqbEQsSUFBSW5MLEdBQ3JCOHpGLEVBQVMxakMsVUFBUWhnRSxJQUFJNFAsS0FDdEJtTCxJQUFpQixPQUFYcW1ELEVBQUdybUQsSUFBZTBvRixFQUFTMWpHLEtBQUtnYixJQUFJcW1ELEVBQUdybUQsSUFBSzBvRixLQUNsRHpqRyxJQUFpQixPQUFYb2hFLEVBQUdwaEUsSUFBZTBqRyxFQUFTM2pHLEtBQUtDLElBQUlvaEUsRUFBR3BoRSxJQUFLMGpHLG9CQUk5Q3hpQyxLQUFLbkMsRUFBVSxTQUFTeGlELEVBQVNvbUUsT0FDcENsQixFQUFPN2lCLEVBQU1nakIsZUFBZWUsR0FDNUIvakIsRUFBTStpQixpQkFBaUJnQixJQUFpQnVnQixFQUFVemhCLGNBQzdDdmdCLEtBQUsza0QsRUFBUXhoQixLQUFNLFNBQVNneEYsRUFBVXhzRixPQUN6Q2hELEdBQVM2a0UsRUFBRzZxQixjQUFjRixHQUMxQmpzRSxNQUFNdmpCLElBQVVrbEYsRUFBSzFtRixLQUFLd0UsR0FBTzI4RSxTQUl0QixPQUFYOWEsRUFBR3JtRCxNQUNIQSxJQUFNeGUsRUFDQ0EsRUFBUTZrRSxFQUFHcm1ELFFBQ2xCQSxJQUFNeGUsR0FHSyxPQUFYNmtFLEVBQUdwaEUsTUFDSEEsSUFBTXpELEVBQ0NBLEVBQVE2a0UsRUFBR3BoRSxRQUNsQkEsSUFBTXpELFVBT1h3ZSxJQUFNMkUsU0FBUzBoRCxFQUFHcm1ELE9BQVMrRSxNQUFNc2hELEVBQUdybUQsS0FBT3FtRCxFQUFHcm1ELElBeEcvQixJQXlHZi9hLElBQU0wZixTQUFTMGhELEVBQUdwaEUsT0FBUzhmLE1BQU1zaEQsRUFBR3BoRSxLQUFPb2hFLEVBQUdwaEUsSUF4Ry9CLE9BMkdiMmpHLHVDQUVRLGVBQ1RoWCxFQUVBekMsRUFES3R4RixLQUNTdVEsUUFBUTA5RSxTQURqQmp1RixLQUdGdzNFLGlCQUNLcndFLEtBQUtnYixJQUFJbXZFLEVBQVM4QyxjQUFnQjlDLEVBQVM4QyxjQUFnQixHQUFJanRGLEtBQUtraEcsS0FKdkVyb0csS0FJK0U2cEUsTUFBUSxTQUN6RixLQUVGbWhDLEVBQWU1akMsVUFBUUMsZUFBZWlxQixFQUFTckMsU0FBVXBpQixjQUFTbHFFLE9BQU91c0YsbUJBQ2xFL25GLEtBQUtnYixJQUFJbXZFLEVBQVM4QyxjQUFnQjlDLEVBQVM4QyxjQUFnQixHQUFJanRGLEtBQUtraEcsS0FSdkVyb0csS0FRK0U4cEUsUUFBVSxFQUFJa2hDLFlBRy9GalgsNEJBR2tCLFdBQ3BCL3pGLEtBQUt3M0UscUJBRUp5VyxNQUFNMW1CLDRCQUdLLFNBQVM1Z0UsRUFBT29qRixVQUN6Qi9wRixLQUFLcXpGLGNBQWNyekYsS0FBS2dtRSxNQUFNN2pFLEtBQUtna0UsU0FBUzRqQixHQUFjNW5GLEtBQUt3RSxzQkFHdEQsU0FBU2hELE9BR3RCNmtFLEVBQUt4b0UsS0FDTHNILEVBQVFraEUsRUFBR2xoRSxNQUVYMmpHLEdBQWN6aUMsRUFBRzZxQixjQUFjMXZGLEdBRS9CMjhDLEVBQVFrb0IsRUFBRzd0QixJQUFNcnpDLFNBRWpCa2hFLEVBQUdnUCxlQUNFaFAsRUFBR3pYLEtBQVF5WCxFQUFHcUIsTUFBUXZwQixHQUFTMnFELEVBQWEzakcsR0FFNUNraEUsRUFBR21ELE9BQVVuRCxFQUFHc0IsT0FBU3hwQixHQUFTMnFELEVBQWEzakcscUJBSXZDLFNBQVNnc0YsT0FDdEI5cUIsRUFBS3hvRSxLQUNMdzNFLEVBQWVoUCxFQUFHZ1AsZUFDbEIwekIsRUFBaUIxekIsRUFBZWhQLEVBQUdxQixNQUFRckIsRUFBR3NCLE9BQzlDdjRELEdBQVVpbUUsRUFBZThiLEVBQVE5cUIsRUFBR3pYLEtBQU95WCxFQUFHbUQsT0FBUzJuQixHQUFTNFgsU0FDN0QxaUMsRUFBR2xoRSxPQUFVa2hFLEVBQUc3dEIsSUFBTTZ0QixFQUFHbGhFLE9BQVNpSyxtQkFFekIsU0FBUzVLLFVBQ2xCM0csS0FBSzJ6RixpQkFBaUIzekYsS0FBS3FwRyxlQUFlMWlHLHlCQUl0Q3VqRyxrQkFBa0IsU0FBVUcsRUFBYUYsSUNqTHZELFNBQVN0QyxnQkFBY0MsRUFBbUJDLE9BWXJDeG9ELEVBQUs0ckQsRUFYTGxkLEtBQ0E1bUIsRUFBaUJELFVBQVFDLGVBTXpCK2pDLEVBQVUvakMsRUFBZXlnQyxFQUFrQjNsRixJQUFLaGIsS0FBS21pRSxJQUFJLEdBQUluaUUsS0FBSzBmLE1BQU11Z0QsVUFBUXVVLE1BQU1vc0IsRUFBVTVsRixRQUVoR2twRixFQUFTbGtHLEtBQUswZixNQUFNdWdELFVBQVF1VSxNQUFNb3NCLEVBQVUzZ0csTUFDNUNra0csRUFBaUJua0csS0FBS2toRyxLQUFLTixFQUFVM2dHLElBQU1ELEtBQUttaUUsSUFBSSxHQUFJK2hDLElBRzVDLElBQVpELEtBQ0dqa0csS0FBSzBmLE1BQU11Z0QsVUFBUXVVLE1BQU1vc0IsRUFBVXdELGVBQzNCcGtHLEtBQUswZixNQUFNa2hGLEVBQVV3RCxXQUFhcGtHLEtBQUttaUUsSUFBSSxHQUFJL3BCLE1BRXZEdHlDLEtBQUttK0YsS0FDREQsRUFBY2hrRyxLQUFLbWlFLElBQUksR0FBSS9wQixPQUUvQnA0QyxLQUFLMGYsTUFBTXVnRCxVQUFRdVUsTUFBTXl2QixNQUNqQmprRyxLQUFLMGYsTUFBTXVrRixFQUFVamtHLEtBQUttaUUsSUFBSSxHQUFJL3BCLFNBRTdDMG9ELEVBQVkxb0QsRUFBTSxFQUFJcDRDLEtBQUttaUUsSUFBSSxHQUFJbmlFLEtBQUttMEUsSUFBSS83QixJQUFRLE9BR2pEdHlDLEtBQUttK0YsR0FHUyxPQURsQkQsTUFFYSxNQUNaNXJELEdBQ2lCLEVBQUksRUFBSTBvRCxLQUdsQjlnRyxLQUFLd3FFLE1BQU13NUIsRUFBY2hrRyxLQUFLbWlFLElBQUksR0FBSS9wQixHQUFPMG9ELEdBQWFBLFFBQzVEMW9ELEVBQU04ckQsR0FBVzlyRCxJQUFROHJELEdBQVVGLEVBQWNHLE9BRXRERSxFQUFXbmtDLEVBQWV5Z0MsRUFBa0IxZ0csSUFBS2drRyxZQUMvQ24rRixLQUFLdStGLEdBRUp2ZCxFQUlSLHNCQUFpQixTQUFTbGhCLE9BRXJCbzlCLFlBQ08sdUJBSUMxYSxXQUFNQyxXQUFXK2IsY0FJekJDLEVBQW1CaEQsV0FBTXQvRSw0QkFDUCxlQUNoQm8vQyxFQUFLeG9FLEtBQ0wyc0IsRUFBTzY3QyxFQUFHajRELFFBQ1Z5MUQsRUFBUXdDLEVBQUd4QyxNQUVYRyxFQURPSCxFQUFNN2pFLEtBQ0dna0UsU0FDaEJxUixFQUFlaFAsRUFBR2dQLHdCQUNiOHlCLEVBQVV6aEIsVUFDWHJSLEVBQWVxUixFQUFLOGQsVUFBWW4rQixFQUFHdjVDLEdBQUs0NUQsRUFBSytkLFVBQVlwK0IsRUFBR3Y1QyxLQUlqRTlNLElBQU0sT0FDTi9hLElBQU0sT0FDTm1rRyxXQUFhLFNBRVpoQixFQUFZNTlFLEVBQUtoVyxnQkFDSGxULElBQWQ4bUcsYUFDS2ppQyxLQUFLbkMsRUFBVSxTQUFTeGlELEVBQVNvbUUsT0FDcEN3Z0IsT0FJQTFoQixFQUFPN2lCLEVBQU1nakIsZUFBZWUsR0FDNUIvakIsRUFBTStpQixpQkFBaUJnQixJQUFpQnVnQixFQUFVemhCLFNBQ3RDcGxGLElBQWZvbEYsRUFBS255RSxXQUNPLE1BS1hpVyxFQUFLaFcsU0FBVzR6RixFQUFXLEtBQzFCQyxlQUVJbGlDLEtBQUtuQyxFQUFVLFNBQVN4aUQsRUFBU29tRSxPQUNwQ2xCLEVBQU83aUIsRUFBTWdqQixlQUFlZSxHQUM1QmprRixHQUNIK2lGLEVBQUt0a0YsVUFFY2QsTUFBWmtULGNBQXdDbFQsSUFBZm9sRixFQUFLbnlFLE1BQXVCcXpFLEVBQWUsR0FDM0VsQixFQUFLbnlFLE9BQ0pnTCxLQUFLLEtBRUhza0QsRUFBTStpQixpQkFBaUJnQixJQUFpQnVnQixFQUFVemhCLFVBQ3pCcGxGLElBQXhCK21HLEVBQWUxa0csT0FDSEEsaUJBR1J3aUUsS0FBSzNrRCxFQUFReGhCLEtBQU0sU0FBU2d4RixFQUFVeHNGLE9BQ3pDcVEsRUFBU3d6RixFQUFlMWtHLEdBQ3hCbkMsR0FBUzZrRSxFQUFHNnFCLGNBQWNGLEdBRTFCanNFLE1BQU12akIsSUFBVWtsRixFQUFLMW1GLEtBQUt3RSxHQUFPMjhFLFFBQVUzL0UsRUFBUSxNQUdoRGdELEdBQVNxUSxFQUFPclEsSUFBVSxJQUMxQkEsSUFBVWhELGtCQUtaMmtFLEtBQUtraUMsRUFBZ0IsU0FBU0ksTUFDakNBLEVBQWNoa0csT0FBUyxFQUFHLEtBQ3pCaWtHLEVBQVN6akMsVUFBUWpsRCxJQUFJeW9GLEdBQ3JCRSxFQUFTMWpDLFVBQVFoZ0UsSUFBSXdqRyxLQUN0QnpvRixJQUFpQixPQUFYcW1ELEVBQUdybUQsSUFBZTBvRixFQUFTMWpHLEtBQUtnYixJQUFJcW1ELEVBQUdybUQsSUFBSzBvRixLQUNsRHpqRyxJQUFpQixPQUFYb2hFLEVBQUdwaEUsSUFBZTBqRyxFQUFTM2pHLEtBQUtDLElBQUlvaEUsRUFBR3BoRSxJQUFLMGpHLHFCQUsvQ3hpQyxLQUFLbkMsRUFBVSxTQUFTeGlELEVBQVNvbUUsT0FDcENsQixFQUFPN2lCLEVBQU1nakIsZUFBZWUsR0FDNUIvakIsRUFBTStpQixpQkFBaUJnQixJQUFpQnVnQixFQUFVemhCLGNBQzdDdmdCLEtBQUsza0QsRUFBUXhoQixLQUFNLFNBQVNneEYsRUFBVXhzRixPQUN6Q2hELEdBQVM2a0UsRUFBRzZxQixjQUFjRixHQUUxQmpzRSxNQUFNdmpCLElBQVVrbEYsRUFBSzFtRixLQUFLd0UsR0FBTzI4RSxRQUFVMy9FLEVBQVEsSUFJeEMsT0FBWDZrRSxFQUFHcm1ELE1BQ0hBLElBQU14ZSxFQUNDQSxFQUFRNmtFLEVBQUdybUQsUUFDbEJBLElBQU14ZSxHQUdLLE9BQVg2a0UsRUFBR3BoRSxNQUNIQSxJQUFNekQsRUFDQ0EsRUFBUTZrRSxFQUFHcGhFLFFBQ2xCQSxJQUFNekQsR0FHSSxJQUFWQSxJQUFrQyxPQUFsQjZrRSxFQUFHK2lDLFlBQXVCNW5HLEVBQVE2a0UsRUFBRytpQyxnQkFDckRBLFdBQWE1bkcsYUFRaEJvbkcsaURBRWtCLGVBQ25CdmlDLEVBQUt4b0UsS0FFTHN4RixFQURPOW9CLEVBQUdqNEQsUUFDTTA5RSxNQUNoQjVtQixFQUFpQkQsVUFBUUMsaUJBSTFCbGxELElBQU1rbEQsRUFBZWlxQixFQUFTbnZFLElBQUtxbUQsRUFBR3JtRCxPQUN0Qy9hLElBQU1pZ0UsRUFBZWlxQixFQUFTbHFGLElBQUtvaEUsRUFBR3BoRSxLQUVyQ29oRSxFQUFHcm1ELE1BQVFxbUQsRUFBR3BoRSxNQUNGLElBQVhvaEUsRUFBR3JtRCxLQUF3QixPQUFYcW1ELEVBQUdybUQsT0FDbkJBLElBQU1oYixLQUFLbWlFLElBQUksR0FBSW5pRSxLQUFLMGYsTUFBTXVnRCxVQUFRdVUsTUFBTW5ULEVBQUdybUQsTUFBUSxLQUN2RC9hLElBQU1ELEtBQUttaUUsSUFBSSxHQUFJbmlFLEtBQUswZixNQUFNdWdELFVBQVF1VSxNQUFNblQsRUFBR3BoRSxNQUFRLE9BRXZEK2EsSUFYYSxJQVliL2EsSUFYYSxLQWNILE9BQVhvaEUsRUFBR3JtRCxRQUNIQSxJQUFNaGIsS0FBS21pRSxJQUFJLEdBQUluaUUsS0FBSzBmLE1BQU11Z0QsVUFBUXVVLE1BQU1uVCxFQUFHcGhFLE1BQVEsSUFFNUMsT0FBWG9oRSxFQUFHcGhFLFFBQ0hBLElBQWlCLElBQVhvaEUsRUFBR3JtRCxJQUNUaGIsS0FBS21pRSxJQUFJLEdBQUluaUUsS0FBSzBmLE1BQU11Z0QsVUFBUXVVLE1BQU1uVCxFQUFHcm1ELE1BQVEsR0FuQm5DLElBc0JJLE9BQWxCcW1ELEVBQUcraUMsYUFDRi9pQyxFQUFHcm1ELElBQU0sSUFDVG9wRixXQUFhL2lDLEVBQUdybUQsSUFDVHFtRCxFQUFHcGhFLElBQU0sSUFDaEJta0csV0FBYXBrRyxLQUFLbWlFLElBQUksR0FBSW5pRSxLQUFLMGYsTUFBTXVnRCxVQUFRdVUsTUFBTW5ULEVBQUdwaEUsU0FFdERta0csV0E3QmEsZUFpQ1AsZUFDUC9pQyxFQUFLeG9FLEtBRUxzeEYsRUFETzlvQixFQUFHajRELFFBQ00wOUUsTUFDaEIxbUIsR0FBV2lCLEVBQUdnUCxlQUVkc3dCLE9BQ0V4VyxFQUFTbnZFLFFBQ1RtdkUsRUFBU2xxRixLQUVYNm1GLEVBQVF6bEIsRUFBR3lsQixNQUFRNFosZ0JBQWNDLEVBQW1CdC9CLEtBSXJEcGhFLElBQU1nZ0UsVUFBUWhnRSxJQUFJNm1GLEtBQ2xCOXJFLElBQU1pbEQsVUFBUWpsRCxJQUFJOHJFLEdBRWpCcUQsRUFBUy9wQixZQUNEQSxJQUNSamdFLE1BQVFraEUsRUFBR3BoRSxNQUNYdXpDLElBQU02dEIsRUFBR3JtRCxRQUVUN2EsTUFBUWtoRSxFQUFHcm1ELE1BQ1h3NEIsSUFBTTZ0QixFQUFHcGhFLEtBRVRtZ0UsS0FDR0EsZ0NBR2MsZ0JBQ2hCb2tDLFdBQWEzckcsS0FBS2l1RixNQUFNejhFLG1CQUV2QnBPLFVBQVV5dEYscUJBQXFCaHRGLEtBQUs3RCx3QkFHekIsU0FBUzJHLEVBQU9vakYsVUFDekIvcEYsS0FBS3F6RixjQUFjcnpGLEtBQUtnbUUsTUFBTTdqRSxLQUFLZ2tFLFNBQVM0akIsR0FBYzVuRixLQUFLd0UscUJBRXZELFNBQVNBLFVBQ2xCM0csS0FBSzJ6RixpQkFBaUIzekYsS0FBSzJyRyxXQUFXaGxHLHdCQVExQixTQUFTaEQsT0FDeEI0N0MsRUFBTXA0QyxLQUFLMGYsTUFBTXVnRCxVQUFRdVUsTUFBTWg0RSxXQUNqQndELEtBQUswZixNQUFNbGpCLEVBQVF3RCxLQUFLbWlFLElBQUksR0FBSS9wQixJQUU3QnA0QyxLQUFLbWlFLElBQUksR0FBSS9wQixxQkFFakIsU0FBUzU3QyxPQU10QnVuRyxFQUFnQjVYLEVBQU9oc0YsRUFBT3F6QyxFQUFLK2dDLEVBTG5DbFQsRUFBS3hvRSxLQUNMdW5FLEVBQVVpQixFQUFHajRELFFBQVEwOUUsTUFBTTFtQixRQUMzQm9VLEVBQVF2VSxVQUFRdVUsTUFDaEJpd0IsRUFBaUJwakMsRUFBR3FqQyxtQkFBbUJyakMsRUFBRytpQyxZQUMxQ2g2RixFQUFTLFlBR0ppM0QsRUFBRzZxQixjQUFjMXZGLEdBQ3RCNGpFLEtBQ0tpQixFQUFHN3RCLE1BQ0w2dEIsRUFBR2xoRSxTQUNELE1BRUFraEUsRUFBR2xoRSxRQUNMa2hFLEVBQUc3dEIsTUFDRixHQUVKNnRCLEVBQUdnUCxrQkFDV2hQLEVBQUdxQixRQUNadEMsRUFBVWlCLEVBQUdobkIsTUFBUWduQixFQUFHelgsU0FFZnlYLEVBQUdzQixXQUNYLElBQ0R2QyxFQUFVaUIsRUFBR3ZYLElBQU11WCxFQUFHbUQsUUFFM0Job0UsSUFBVTJELElBQ0MsSUFBVkEsU0FDTTgvRCxVQUFRMkIsa0JBQ2hCUCxFQUFHajRELFFBQVEwOUUsTUFBTWdCLFNBQ2pCbGlCLEVBQU1GLFNBQVNscUUsT0FBT3VzRixtQkFHZjBjLEdBRUssSUFBVmpvRyxPQUNPdW5HLEdBQWtCdnZCLEVBQU1oaEMsR0FBT2doQyxFQUFNcjBFLEtBQVdxMEUsRUFBTWg0RSxHQUFTZzRFLEVBQU1yMEUsUUFFdkVvMEUsRUFBT25xRSxHQUVWK2hGLG9CQUVVLFNBQVNBLE9BS3RCNFgsRUFBZ0I1akcsRUFBT3F6QyxFQUFLaDNDLEVBSjVCNmtFLEVBQUt4b0UsS0FDTHVuRSxFQUFVaUIsRUFBR2o0RCxRQUFRMDlFLE1BQU0xbUIsUUFDM0JvVSxFQUFRdlUsVUFBUXVVLE1BQ2hCaXdCLEVBQWlCcGpDLEVBQUdxakMsbUJBQW1CcmpDLEVBQUcraUMsZUFHMUNoa0MsS0FDS2lCLEVBQUc3dEIsTUFDTDZ0QixFQUFHbGhFLFVBRURraEUsRUFBR2xoRSxRQUNMa2hFLEVBQUc3dEIsS0FFTjZ0QixFQUFHZ1Asa0JBQ1doUCxFQUFHcUIsUUFDWnRDLEVBQVVpQixFQUFHaG5CLE1BQVE4eEMsRUFBUUEsRUFBUTlxQixFQUFHelgsU0FFL0J5WCxFQUFHc0IsU0FDWnZDLEVBQVUrckIsRUFBUTlxQixFQUFHdlgsSUFBTXVYLEVBQUdtRCxPQUFTMm5CLEdBRTVDM3ZGLElBQVUyRCxFQUFPLElBQ04sSUFBVkEsRUFBYSxLQUNaaUssRUFBUzYxRCxVQUFRMkIsa0JBQ3BCUCxFQUFHajRELFFBQVEwOUUsTUFBTWdCLFNBQ2pCbGlCLEVBQU1GLFNBQVNscUUsT0FBT3VzRixvQkFFZDM5RSxLQUNTQSxJQUNWcTZGLEtBRUFqd0IsRUFBTWhoQyxHQUFPZ2hDLEVBQU1yMEUsTUFDbkI0akcsSUFDRC9qRyxLQUFLbWlFLElBQUksR0FBSXFTLEVBQU1yMEUsR0FBUzNELFVBRTlCQSx1QkFJSXVtRyxrQkFBa0IsY0FBZXdCLEVBQWtCdkIsdUJDcFZoRCxTQUFTcDlCLE9BRXJCZ1osRUFBaUJsWixjQUFTbHFFLE9BRTFCd25HLFlBQ00sV0FHQSxXQUNDLGlDQUdBLFFBQ0YsK0JBQ0ksd0JBSUQsNkJBTVMsZ0JBR0osMENBR0csbUJBR0EsV0FFUjFhLFdBQU1DLFdBQVcwYSw4QkFLbEIsV0FHQyxZQUdBLFNBQVMzb0csVUFDWEEsY0FLRHFxRyxFQUFjMzRCLE9BQ2xCeG1ELEVBQU93bUQsRUFBTTVpRSxlQUNWb2MsRUFBS28vRSxXQUFXNzlDLFNBQVd2aEMsRUFBS3EvRSxZQUFZOTlDLFFBQVVpbEIsRUFBTW5OLE1BQU03akUsS0FBS3VrRSxPQUFPOS9ELE9BQVMsV0FHdEZxbEcsRUFBeUI5NEIsT0FDN0IrNEIsRUFBb0IvNEIsRUFBTTVpRSxRQUFReTdGLFlBQ2xDL2MsRUFBVzduQixVQUFRQyxlQUFlNmtDLEVBQWtCamQsU0FBVWxKLEVBQWVtSixpQkFDN0UzTixFQUFZbmEsVUFBUUMsZUFBZTZrQyxFQUFrQjNxQixVQUFXd0UsRUFBZW9KLGtCQUMvRTNOLEVBQWFwYSxVQUFRQyxlQUFlNmtDLEVBQWtCMXFCLFdBQVl1RSxFQUFlc0osK0JBSTlFSixRQUNDMU4sU0FDQ0MsT0FMRXBhLFVBQVFpYSxXQUFXNE4sRUFBVTFOLEVBQVdDLGFBd0IzQzJxQixFQUFnQjN2QixFQUFPN3NCLEVBQUtsOUMsRUFBTTBQLEVBQUsvYSxVQUMzQ28xRSxJQUFVcjZELEdBQU9xNkQsSUFBVXAxRSxTQUV0QnVvRCxFQUFPbDlDLEVBQU8sTUFDaEJrOUMsRUFBT2w5QyxFQUFPLEdBRVYrcEUsRUFBUXI2RCxHQUFPcTZELEVBQVFwMUUsU0FFekJ1b0QsRUFBTWw5QyxFQUFPLE1BQ2ZrOUMsVUFLQ0EsTUFDRkEsRUFBTWw5QyxFQUFPLFlBa0dYMjVGLEVBQXFCNXZCLFVBQ2YsSUFBVkEsR0FBeUIsTUFBVkEsRUFDWCxTQUNHQSxFQUFRLElBQ1gsT0FHRCxpQkFHQzZhLEVBQVMxdUUsRUFBS3huQixFQUFNdTBFLEVBQVV1WixNQUNsQzduQixVQUFRdjlELFFBQVExSSxXQUNmNm9FLEVBQUkwTCxFQUFTMUwsRUFDYmsrQixFQUFVLElBQU1qWixFQUVYaHJFLEVBQUksRUFBR0EsRUFBSTlpQixFQUFLeUYsU0FBVXFkLElBQzlCb3pFLFNBQVNsMkYsRUFBSzhpQixHQUFJeXhELEVBQVMzTCxFQUFHQyxNQUM3QmsrQixTQUdGN1EsU0FBU2wyRixFQUFNdTBFLEVBQVMzTCxFQUFHMkwsRUFBUzFMLFlBSWpDcWlDLEVBQWtDN3ZCLEVBQU84dkIsRUFBVTUyQixHQUM3QyxLQUFWOEcsR0FBMEIsTUFBVkEsSUFDVnhTLEdBQU1zaUMsRUFBUzc5QyxFQUFJLEdBQ2xCK3RCLEVBQVEsS0FBT0EsRUFBUSxRQUN4QnhTLEdBQUtzaUMsRUFBUzc5QyxZQWlGaEI4OUMsRUFBYTVyRyxVQUNkeW1FLFVBQVErVCxTQUFTeDZFLEdBQVNBLEVBQVEsTUFHdEM2ckcsRUFBb0J6L0IsRUFBTTA3QixnQkFBZ0JyL0Usc0JBQzlCLGVBQ1ZvL0MsRUFBS3hvRSxLQUNMMnNCLEVBQU82N0MsRUFBR2o0RCxRQUNWK2dGLEVBQVcza0UsRUFBS3NoRSxRQUVqQnBrQixNQUFRckIsRUFBR3VuQixXQUNYam1CLE9BQVN0QixFQUFHd25CLFlBQ1p5YyxRQUFVdGxHLEtBQUt3cUUsTUFBTW5KLEVBQUdxQixNQUFRLEtBQ2hDNmlDLFFBQVV2bEcsS0FBS3dxRSxNQUFNbkosRUFBR3NCLE9BQVMsT0FFaEN5TixFQUFVblEsVUFBUWpsRCxLQUFLcW1ELEVBQUdzQixPQUFRdEIsRUFBR3FCLFFBQ3JDbWhDLEVBQWU1akMsVUFBUUMsZUFBZWlxQixFQUFTckMsU0FBVWxKLEVBQWVtSixtQkFDekV5ZCxZQUFjaGdGLEVBQUt1aEMsUUFBV3FwQixFQUFVLEdBQU15ekIsRUFBZSxFQUFJMVosRUFBU3NiLGtCQUFxQnIxQixFQUFVLHVCQUV4RixlQUNoQi9PLEVBQUt4b0UsS0FDTGdtRSxFQUFRd0MsRUFBR3hDLE1BQ1g3akQsRUFBTW9XLE9BQU84aEQsa0JBQ2JqekUsRUFBTW14QixPQUFPa2pELDRCQUVUblQsS0FBS3RDLEVBQU03akUsS0FBS2drRSxTQUFVLFNBQVN4aUQsRUFBU29tRSxNQUMvQy9qQixFQUFNK2lCLGlCQUFpQmdCLEdBQWUsS0FDckNsQixFQUFPN2lCLEVBQU1nakIsZUFBZWUsYUFFeEJ6aEIsS0FBSzNrRCxFQUFReGhCLEtBQU0sU0FBU2d4RixFQUFVeHNGLE9BQ3pDaEQsR0FBUzZrRSxFQUFHNnFCLGNBQWNGLEdBQzFCanNFLE1BQU12akIsSUFBVWtsRixFQUFLMW1GLEtBQUt3RSxHQUFPMjhFLFdBSS9CbjhFLEtBQUtnYixJQUFJeGUsRUFBT3dlLEtBQ2hCaGIsS0FBS0MsSUFBSXpELEVBQU95RCxXQUt0QithLElBQU9BLElBQVFvVyxPQUFPOGhELGtCQUFvQixFQUFJbDRELElBQzlDL2EsSUFBT0EsSUFBUW14QixPQUFPa2pELGtCQUFvQixFQUFJcjBFLElBRzlDMmpHLHVDQUVVLGVBQ1R6WixFQUFXdHhGLEtBQUt1USxRQUFRMDlFLE1BQ3hCK2MsRUFBZTVqQyxVQUFRQyxlQUFlaXFCLEVBQVNyQyxTQUFVbEosRUFBZW1KLHdCQUNyRS9uRixLQUFLZ2IsSUFBSW12RSxFQUFTOEMsY0FBZ0I5QyxFQUFTOEMsY0FBZ0IsR0FBSWp0RixLQUFLa2hHLEtBQUtyb0csS0FBSzJzRyxhQUFlLElBQU0zQiwyQkFFckYsZUFDakJ4aUMsRUFBS3hvRSxPQUVIeW9HLGdCQUFnQnJsRyxVQUFVeXRGLHFCQUFxQmh0RixLQUFLMmtFLEtBR3ZEd2pDLFlBQWN4akMsRUFBR3hDLE1BQU03akUsS0FBS3VrRSxPQUFPanlELElBQUkrekQsRUFBR2o0RCxRQUFReTdGLFlBQVkvbEUsU0FBVXVpQyxxQkFFMUQsU0FBUzdoRSxFQUFPb2pGLFVBQ3pCL3BGLEtBQUtxekYsY0FBY3J6RixLQUFLZ21FLE1BQU03akUsS0FBS2drRSxTQUFTNGpCLEdBQWM1bkYsS0FBS3dFLFNBRW5FLGVBbExPd3NFLEVBQ1IwNUIsRUFrTEM3c0csS0FBS3VRLFFBQVF5N0YsWUFBWTk5QyxpQkF4UUhpbEIsT0F5Q3ZCbHZELEVBQUdxb0YsRUFBVVEsRUFaYkMsRUFBU2QsRUFBeUI5NEIsR0FJbEMwNUIsRUFBd0IxbEcsS0FBS2diLElBQUlneEQsRUFBTXJKLE9BQVMsRUFBR3FKLEVBQU10SixNQUFRLEdBQ2pFbWpDLEtBQ0E3NUIsRUFBTXRKLFFBQ04sSUFDQXNKLEVBQU1ySixTQUNOLEdBRUFtakMsT0FHRXRrRixJQUFJKzRELEtBQU9xckIsRUFBT3JyQixPQUNsQndyQix3QkFoRm1CdmtGLEVBQUtzbUUsRUFBVXh0RixFQWtGcEMwckcsRUFBYXJCLEVBQWMzNEIsT0FDMUJsdkQsRUFBSSxFQUFHQSxFQUFJa3BGLEVBQVlscEYsSUFBSyxHQUNoQmt2RCxFQUFNaTZCLGlCQUFpQm5wRixFQUFHNG9GLEdBcEZsQmxrRixFQXFGSXdxRCxFQUFNeHFELElBckZMc21FLEVBcUZVOGQsRUFBT3Q2RixLQXJGUGhSLEVBcUZhMHhFLEVBQU02NEIsWUFBWS9uRixJQUFNLEtBcEZ6RW1qRCxVQUFRdjlELFFBQVFwSSxNQUVmMmxFLFVBQVFxYSxZQUFZOTRELEVBQUtBLEVBQUkrNEQsS0FBTWpnRixLQUNsQ0EsRUFBTW1GLE9BQVNxb0YsRUFBa0MsS0FBcEJ4dEYsRUFBTW1GLE9BQVMsR0FBV3FvRixNQUt6RHRtRSxFQUFJcTVELFlBQVl2Z0YsR0FBT29vRSxRQUN2Qm9sQixLQTRFR2llLGlCQUFpQmpwRixHQUFLcW9GLE1BR3hCdGEsRUFBZTdlLEVBQU1rNkIsY0FBY3BwRixHQUNuQ3U0RCxFQUFRcFYsVUFBUTRVLFVBQVVnVyxHQUFnQixJQUMxQ3NiLEVBQVVuQixFQUFnQjN2QixFQUFPc3dCLEVBQWMvaUMsRUFBR3VpQyxFQUFTejRCLEVBQUcsRUFBRyxLQUNqRTA1QixFQUFVcEIsRUFBZ0IzdkIsRUFBT3N3QixFQUFjOWlDLEVBQUdzaUMsRUFBUzc5QyxFQUFHLEdBQUksS0FFbEU2K0MsRUFBUWhtRyxNQUFRMGxHLEVBQWVsa0YsTUFDbkJBLEVBQUl3a0YsRUFBUWhtRyxRQUNad2hCLEVBQUlrcEUsR0FHaEJzYixFQUFRM3lELElBQU1xeUQsRUFBZTlpQyxNQUNqQkEsRUFBSW9qQyxFQUFRM3lELE1BQ1p1dkIsRUFBSThuQixHQUdoQnViLEVBQVFqbUcsTUFBUTBsRyxFQUFlbDFFLE1BQ25CQSxFQUFJeTFFLEVBQVFqbUcsUUFDWnd3QixFQUFJazZELEdBR2hCdWIsRUFBUTV5RCxJQUFNcXlELEVBQWV2akYsTUFDakJBLEVBQUk4akYsRUFBUTV5RCxNQUNabHhCLEVBQUl1b0UsS0FJZndiLGNBQWNYLEVBQXVCRyxFQUFnQkMsSUEwTHRDanRHLE9BcExUbXpFLEVBc0xObnpFLEtBckxGNnNHLEVBQXdCMWxHLEtBQUtnYixJQUFJZ3hELEVBQU1ySixPQUFTLEVBQUdxSixFQUFNdEosTUFBUSxLQUMvRDhpQyxZQUFjeGxHLEtBQUt3cUUsTUFBTWs3QixLQUN6QlksZUFBZSxFQUFHLEVBQUcsRUFBRyxtQkEwTGYsU0FBU1osRUFBdUJHLEVBQWdCQyxPQUUxRFMsRUFBc0JWLEVBQWVsa0YsRUFBSTNoQixLQUFLa2lFLElBQUk0akMsRUFBZW5rRixHQUNqRTZrRixFQUF1QnhtRyxLQUFLQyxJQUFJNGxHLEVBQWU5aUMsRUFGMUNscUUsS0FFaUQ2cEUsTUFBTyxHQUFLMWlFLEtBQUtraUUsSUFBSTRqQyxFQUFlL2lDLEdBQzFGMGpDLEdBQXNCWixFQUFlbDFFLEVBQUkzd0IsS0FBS2dpRSxJQUFJOGpDLEVBQWVuMUUsR0FDakUrMUUsR0FBeUIxbUcsS0FBS0MsSUFBSTRsRyxFQUFldmpGLEVBSjVDenBCLEtBSW1EOHBFLE9BQVEsR0FBSzNpRSxLQUFLZ2lFLElBQUk4akMsRUFBZXhqRixLQUUzRThpRixFQUFhbUIsS0FDWm5CLEVBQWFvQixLQUNmcEIsRUFBYXFCLEtBQ1ZyQixFQUFhc0IsR0FUNUI3dEcsS0FXTjJzRyxZQUFjeGxHLEtBQUtnYixJQUNyQmhiLEtBQUt3cUUsTUFBTWs3QixHQUF5QmEsRUFBc0JDLEdBQXdCLEdBQ2xGeG1HLEtBQUt3cUUsTUFBTWs3QixHQUF5QmUsRUFBcUJDLEdBQXlCLElBYjFFN3RHLEtBY055dEcsZUFBZUMsRUFBcUJDLEVBQXNCQyxFQUFvQkMsbUJBRWxFLFNBQVNDLEVBQWNDLEVBQWVDLEVBQWFDLE9BQzlEemxDLEVBQUt4b0UsS0FDTGt1RyxFQUFXMWxDLEVBQUdxQixNQUFRa2tDLEVBQWdCdmxDLEVBQUdta0MsWUFDekN3QixFQUFVTCxFQUFldGxDLEVBQUdta0MsWUFDNUJ5QixFQUFTSixFQUFjeGxDLEVBQUdta0MsWUFDMUIwQixFQUFZN2xDLEVBQUdzQixPQUFTbWtDLEVBQWlCemxDLEVBQUdta0MsY0FFN0NGLFFBQVV0bEcsS0FBS3dxRSxPQUFRdzhCLEVBQVVELEdBQVksRUFBSzFsQyxFQUFHelgsUUFDckQyN0MsUUFBVXZsRyxLQUFLd3FFLE9BQVF5OEIsRUFBU0MsR0FBYSxFQUFLN2xDLEVBQUd2WCxvQkFHMUMsU0FBU3RxRCxVQVNoQkEsR0FSMEIsRUFBVlEsS0FBS2lpRSxHQUFVMGlDLEVBQWM5ckcsUUFDbkNBLEtBQUtnbUUsTUFBTXoxRCxTQUFXdlEsS0FBS2dtRSxNQUFNejFELFFBQVFxMEUsV0FDekQ1a0YsS0FBS2dtRSxNQUFNejFELFFBQVFxMEUsV0FDbkIsR0FFb0N6OUUsS0FBS2lpRSxHQUFLLEVBQUksbUNBS3JCLFNBQVN6bEUsT0FDbkM2a0UsRUFBS3hvRSxRQUVLLE9BQVYyRCxTQUNJLE1BSUoycUcsRUFBZ0I5bEMsRUFBR21rQyxhQUFlbmtDLEVBQUdwaEUsSUFBTW9oRSxFQUFHcm1ELFlBQzlDcW1ELEVBQUdqNEQsUUFBUTA5RSxNQUFNMW1CLFNBQ1ppQixFQUFHcGhFLElBQU16RCxHQUFTMnFHLEdBRW5CM3FHLEVBQVE2a0UsRUFBR3JtRCxLQUFPbXNGLG9CQUVULFNBQVMzbkcsRUFBTzRuRyxPQUU3QkMsRUFES3h1RyxLQUNVcXRHLGNBQWMxbUcsR0FBVVEsS0FBS2lpRSxHQUFLLFdBRWpEamlFLEtBQUt3cUUsTUFBTXhxRSxLQUFLZ2lFLElBQUlxbEMsR0FBYUQsR0FINUJ2dUcsS0FHcUR5c0csVUFDMUR0bEcsS0FBS3dxRSxNQUFNeHFFLEtBQUtraUUsSUFBSW1sQyxHQUFhRCxHQUo1QnZ1RyxLQUlxRDBzRyxtQ0FHckMsU0FBUy9sRyxFQUFPaEQsVUFDbEMzRCxLQUFLb3RHLGlCQUFpQnptRyxFQUFPM0csS0FBS3l1Ryw4QkFBOEI5cUcscUJBR3ZELGVBRVp3ZSxFQURLbmlCLEtBQ0ltaUIsSUFDVC9hLEVBRktwSCxLQUVJb0gsV0FGSnBILEtBSUMwdUcseUJBQXlCLEVBSjFCMXVHLEtBS0w2ekYsWUFBYyxFQUNqQjF4RSxFQUFNLEdBQUsvYSxFQUFNLEVBQUlBLEVBQ3JCK2EsRUFBTSxHQUFLL2EsRUFBTSxFQUFJK2EsRUFDckIsU0FHSSxlQUNEcW1ELEVBQUt4b0UsS0FDTDJzQixFQUFPNjdDLEVBQUdqNEQsUUFDVjRoRixFQUFleGxFLEVBQUt5bEUsVUFDcEJkLEVBQVcza0UsRUFBS3NoRSxNQUNoQjVtQixFQUFpQkQsVUFBUUMsa0JBRXpCMTZDLEVBQUt1aEMsUUFBUyxLQUNidmxDLEVBQU02L0MsRUFBRzcvQyxJQUNUaThELEVBQWE1a0YsS0FBS3F0RyxjQUFjLEdBR2hDckMsRUFBZTNqQyxFQUFlaXFCLEVBQVNyQyxTQUFVbEosRUFBZW1KLGlCQUNoRXlmLEVBQWdCdG5DLEVBQWVpcUIsRUFBUy9QLFVBQVd3RSxFQUFlb0osa0JBQ2xFeWYsRUFBaUJ2bkMsRUFBZWlxQixFQUFTOVAsV0FBWXVFLEVBQWVzSixtQkFDcEV3ZixFQUFnQnpuQyxVQUFRaWEsV0FBVzJwQixFQUFjMkQsRUFBZUMsYUFFNUR0bUMsS0FBS0UsRUFBR3lsQixNQUFPLFNBQVN4c0YsRUFBT2tGLE1BRWxDQSxFQUFRLEdBQUsycUYsRUFBUy9wQixRQUFTLEtBQzlCdW5DLEVBQWdCdG1DLEVBQUdpbUMsOEJBQThCam1DLEVBQUc2Z0MsZUFBZTFpRyxPQUduRXdyRixFQUFhamtDLFNBQXFCLElBQVZ2bkQsWUEvTVR3c0UsRUFBT2dmLEVBQWNsb0IsRUFBUXRqRSxPQUNoRGdpQixFQUFNd3FELEVBQU14cUQsU0FDWjY4RCxZQUFjcGUsVUFBUTZCLHNCQUFzQmtwQixFQUFhN1AsTUFBTzM3RSxFQUFRLEtBQ3hFKytFLFVBQVl0ZSxVQUFRNkIsc0JBQXNCa3BCLEVBQWF6TSxVQUFXLytFLEVBQVEsR0FFMUV3c0UsRUFBTTVpRSxRQUFRNmhGLFVBQVV4bEQsV0FFdkJtK0IsY0FDQUMsSUFBSW1JLEVBQU1zNUIsUUFBU3Q1QixFQUFNdTVCLFFBQVN6aUMsRUFBUSxFQUFhLEVBQVY5aUUsS0FBS2lpRSxNQUNsRGtCLGNBQ0FpQixhQUNFLEtBRUY0aEMsRUFBYXJCLEVBQWMzNEIsTUFFWixJQUFmZzZCLFdBSUFwaUMsZ0JBQ0EraEMsRUFBZ0IzNUIsRUFBTWk2QixpQkFBaUIsRUFBR25qQyxLQUMxQ0UsT0FBTzJpQyxFQUFjL2lDLEVBQUcraUMsRUFBYzlpQyxPQUVyQyxJQUFJL2xELEVBQUksRUFBR0EsRUFBSWtwRixFQUFZbHBGLE1BQ2ZrdkQsRUFBTWk2QixpQkFBaUJucEYsRUFBR2dtRCxLQUN0Q0csT0FBTzBpQyxFQUFjL2lDLEVBQUcraUMsRUFBYzlpQyxLQUd2Q00sY0FDQWlCLFdBbUxlL0MsRUFBSTJwQixFQUFjMmMsRUFBZW5vRyxHQUc3QzJxRixFQUFTcGpDLFFBQVMsS0FDakJ5bUMsRUFBZ0J0dEIsRUFBZWlxQixFQUFTc0QsVUFBVzdPLEVBQWU4Tyx1QkFDbEVuVCxLQUFPbXRCLElBRVBqa0MsU0FDQUMsVUFBVXJDLEVBQUdpa0MsUUFBU2prQyxFQUFHa2tDLFdBQ3pCNWhDLE9BQU84WixHQUVQME0sRUFBU3lkLGtCQUFtQixLQUMzQmxkLEVBQWFscEUsRUFBSXE1RCxZQUFZdmdGLEdBQU9vb0UsUUFDcEMrYixVQUFZMEwsRUFBUzBkLGdCQUNyQm5QLFVBQ0ZoTyxFQUFhLEVBQUlQLEVBQVMyZCxrQkFDMUJILEVBQWdCOUQsRUFBZSxFQUFJMVosRUFBU3NiLGlCQUM3Qy9hLEVBQXlDLEVBQTVCUCxFQUFTMmQsaUJBQ3RCakUsRUFBMkMsRUFBNUIxWixFQUFTc2Isb0JBSXRCdFcsVUFBWSxXQUNaQyxhQUFlLFdBQ2YzUSxVQUFZK08sSUFDWjBDLFNBQVM1MUYsRUFBTyxHQUFJcXRHLEtBQ3BCdGpDLGVBS0g3K0MsRUFBS28vRSxXQUFXNzlDLFNBQVd2aEMsRUFBS3EvRSxZQUFZOTlDLG1CQTNSMUJpbEIsT0FDcEJ4cUQsRUFBTXdxRCxFQUFNeHFELElBQ1pnRSxFQUFPd21ELEVBQU01aUUsUUFDYjIrRixFQUFnQnZpRixFQUFLby9FLFdBQ3JCb0QsRUFBaUJ4aUYsRUFBS3EvRSxjQUV0QnRtQixVQUFZd3BCLEVBQWN4cEIsWUFDMUJGLFlBQWMwcEIsRUFBYzVzQixVQUU1QjhzQixFQUFnQmo4QixFQUFNczdCLDhCQUE4QjloRixFQUFLc2hFLE1BQU0xbUIsUUFBVTRMLEVBQU1oeEQsSUFBTWd4RCxFQUFNL3JFLEtBRzNGMmxHLEVBQVNkLEVBQXlCOTRCLEtBRWxDb2pCLGFBQWUsVUFFZCxJQUFJdHlFLEVBQUk2bkYsRUFBYzM0QixHQUFTLEVBQUdsdkQsR0FBSyxFQUFHQSxJQUFLLElBQy9DaXJGLEVBQWNoaEQsUUFBUyxLQUN0Qm1oRCxFQUFnQmw4QixFQUFNaTZCLGlCQUFpQm5wRixFQUFHbXJGLEtBQzFDcmtDLGNBQ0FaLE9BQU9nSixFQUFNczVCLFFBQVN0NUIsRUFBTXU1QixXQUM1QnRpQyxPQUFPaWxDLEVBQWN0bEMsRUFBR3NsQyxFQUFjcmxDLEtBQ3RDdUIsV0FDQWpCLGVBR0Q2a0MsRUFBZWpoRCxRQUFTLEtBRXZCb2hELEVBQXFCbjhCLEVBQU1pNkIsaUJBQWlCbnBGLEVBQUdtckYsRUFBZ0IsR0FHL0RHLEVBQXNCbm9DLFVBQVE2QixzQkFBc0JrbUMsRUFBZXZhLFVBQVczd0UsRUFBRzhoRSxFQUFlOE8sb0JBQ2hHblQsS0FBT3FyQixFQUFPcnJCLE9BQ2RrRSxVQUFZMnBCLE1BRVp2ZCxFQUFlN2UsRUFBTWs2QixjQUFjcHBGLEdBQ25DdTRELEVBQVFwVixVQUFRNFUsVUFBVWdXLEtBQzFCc0UsVUFBWThWLEVBQXFCNXZCLEtBQ0hBLEVBQU9ySixFQUFNKzVCLGlCQUFpQmpwRixHQUFJcXJGLEtBQzNEM21GLEVBQUt3cUQsRUFBTTY0QixZQUFZL25GLElBQU0sR0FBSXFyRixFQUFvQnZDLEVBQU90NkYsU0FxUHBEKzFELHlCQU1QMGhDLGtCQUFrQixlQUFnQnNDLEVBQW1CckMsd0RDMWdCMUQsZUFFRHFGLEVBNkdBaDNFLFdBM0dLaEUsV0FDRWc3RSxFQUFhem9HLE1BQU0sS0FBTVMsb0JBUzNCcUMsRUFBUTRsRyxVQUNOQSxhQUFpQi9uRyxPQUFtRCxtQkFBMUM1RSxPQUFPTSxVQUFVRSxTQUFTTyxLQUFLNHJHLFlBRzNEbnJHLEVBQVNtckcsVUFHRSxNQUFUQSxHQUEyRCxvQkFBMUMzc0csT0FBT00sVUFBVUUsU0FBU08sS0FBSzRyRyxZQWlCbERDLEVBQVlELGVBQ0EsSUFBVkEsV0FHRnQwQixFQUFTczBCLFNBQ1UsaUJBQVZBLEdBQWdFLG9CQUExQzNzRyxPQUFPTSxVQUFVRSxTQUFTTyxLQUFLNHJHLFlBRzlERSxFQUFPRixVQUNMQSxhQUFpQnZuRyxNQUFrRCxrQkFBMUNwRixPQUFPTSxVQUFVRSxTQUFTTyxLQUFLNHJHLFlBRzFEaDdGLEVBQUltVCxFQUFLSyxPQUNBaEUsRUFBVnVGLFNBQ0N2RixFQUFJLEVBQUdBLEVBQUkyRCxFQUFJaGhCLFNBQVVxZCxJQUN0QmhYLEtBQUtnYixFQUFHTCxFQUFJM0QsR0FBSUEsV0FFakJ1RixXQUdGb21GLEVBQVcvbUYsRUFBR1ksVUFDWjNtQixPQUFPTSxVQUFVNUIsZUFBZXFDLEtBQUtnbEIsRUFBR1ksWUFHMUNMLEVBQU9QLEVBQUdZLE9BQ1YsSUFBSXhGLEtBQUt3RixFQUNObW1GLEVBQVdubUYsRUFBR3hGLE9BQ1pBLEdBQUt3RixFQUFFeEYsV0FJYjJyRixFQUFXbm1GLEVBQUcsZ0JBQ1pubUIsU0FBV21tQixFQUFFbm1CLFVBR2Zzc0csRUFBV25tRixFQUFHLGVBQ1poUixRQUFVZ1IsRUFBRWhSLFNBR1hvUSxXQUdGZ25GLEVBQVdKLEVBQU9LLEVBQVFDLEVBQVFDLFVBQ2hDQyxHQUFpQlIsRUFBT0ssRUFBUUMsRUFBUUMsR0FBUSxHQUFNRSxlQXVCeERDLEVBQWdCcm1GLFVBQ1IsTUFBVEEsRUFBRXNtRixRQUNBQSxZQW5CZ0IsMkNBR0MsZ0JBQ0QsYUFDQSxlQUNBLG9CQUNBLG1CQUNBLE9BQ0EsOEJBRUEsY0FDQSxtQkFDQSxJQVFmdG1GLEVBQUVzbUYsYUFxQkpDLEVBQVF2bUYsTUFDSyxNQUFkQSxFQUFFd21GLFNBQWtCLEtBQ2hCQyxFQUFRSixFQUFnQnJtRixHQUN4QjBtRixFQUFjaDRFLEVBQUszMEIsS0FBSzBzRyxFQUFNRSxnQkFBaUIsU0FBVXhzRixVQUM3QyxNQUFMQSxJQUVQeXNGLEdBQWN4cEYsTUFBTTRDLEVBQUVrWixHQUFHMVksWUFDekJpbUYsRUFBTUksU0FBVyxJQUNoQkosRUFBTUssUUFDTkwsRUFBTU0sZUFDTk4sRUFBTU8saUJBQ05QLEVBQU1RLGtCQUNOUixFQUFNUyxZQUNOVCxFQUFNVSxnQkFDTlYsRUFBTVcsbUJBQ0xYLEVBQU1ZLFVBQWFaLEVBQU1ZLFVBQVlYLE1BRXZDMW1GLEVBQUVzbkYsWUFDV1YsR0FDZSxJQUF4QkgsRUFBTWMsZUFDd0IsSUFBOUJkLEVBQU1lLGFBQWExcUcsYUFDRG5ELElBQWxCOHNHLEVBQU1nQixTQUdTLE1BQW5CenVHLE9BQU9rNUIsVUFBcUJsNUIsT0FBT2s1QixTQUFTbFMsVUFJckM0bUYsSUFITEosU0FBV0ksU0FNZDVtRixFQUFFd21GLGtCQUdKa0IsRUFBZWpCLE9BQ2hCem1GLEVBQUkrbEYsRUFBVXpjLFlBQ0wsTUFBVG1kLElBQ09KLEVBQWdCcm1GLEdBQUl5bUYsS0FHWHptRixHQUFHb25GLGlCQUFrQixFQUdsQ3BuRixJQTVEUHBpQixNQUFNdEUsVUFBVW8xQixLQUNUOXdCLE1BQU10RSxVQUFVbzFCLEtBRWhCLFNBQVVpNUUsV0FDVDM1RSxFQUFJaDFCLE9BQU85QyxNQUNYZzRCLEVBQU1GLEVBQUVseEIsU0FBVyxFQUVkcWQsRUFBSSxFQUFHQSxFQUFJK1QsRUFBSy9ULE9BQ2pCQSxLQUFLNlQsR0FBSzI1RSxFQUFJNXRHLEtBQUs3RCxLQUFNODNCLEVBQUU3VCxHQUFJQSxFQUFHNlQsVUFDM0IsU0FJUixPQW9EWDQ1RSxFQUFtQmw5RSxFQUFNazlFLDZCQUVwQkMsRUFBV3RvRixFQUFJeUssT0FDaEI3UCxFQUFHeVMsRUFBTS9QLEtBRVIrb0YsRUFBWTU3RSxFQUFLODlFLHNCQUNmQSxpQkFBbUI5OUUsRUFBSzg5RSxrQkFFMUJsQyxFQUFZNTdFLEVBQUt5TyxRQUNmQSxHQUFLek8sRUFBS3lPLElBRVptdEUsRUFBWTU3RSxFQUFLMk8sUUFDZkEsR0FBSzNPLEVBQUsyTyxJQUVaaXRFLEVBQVk1N0UsRUFBS3NPLFFBQ2ZBLEdBQUt0TyxFQUFLc08sSUFFWnN0RSxFQUFZNTdFLEVBQUtzOUUsYUFDZkEsUUFBVXQ5RSxFQUFLczlFLFNBRWpCMUIsRUFBWTU3RSxFQUFLKzlFLFVBQ2ZBLEtBQU8vOUUsRUFBSys5RSxNQUVkbkMsRUFBWTU3RSxFQUFLZytFLFlBQ2ZBLE9BQVNoK0UsRUFBS2crRSxRQUVoQnBDLEVBQVk1N0UsRUFBS2krRSxhQUNmQSxRQUFVaitFLEVBQUtpK0UsU0FFakJyQyxFQUFZNTdFLEVBQUtzOEUsU0FDZkEsSUFBTUQsRUFBZ0JyOEUsSUFFeEI0N0UsRUFBWTU3RSxFQUFLaytFLGFBQ2ZBLFFBQVVsK0UsRUFBS2srRSxTQUdsQk4sRUFBaUI5cUcsT0FBUyxNQUNyQnFkLEVBQUksRUFBR0EsRUFBSXl0RixFQUFpQjlxRyxPQUFRcWQsTUFDOUJ5dEYsRUFBaUJ6dEYsR0FFbkJ5ckYsSUFEQzU3RSxFQUFLNEMsUUFFSkEsR0FBUS9QLFVBS2hCMEMsTUFHUDRvRixHQUFtQixXQUdkQyxFQUFPM3lGLEtBQ0R2ZixLQUFNdWYsUUFDWnlqQixHQUFLLElBQUk5NkIsS0FBa0IsTUFBYnFYLEVBQU95akIsR0FBYXpqQixFQUFPeWpCLEdBQUcxWSxVQUFZOG9FLEtBQ3hEcHpGLEtBQUtxd0csaUJBQ0RydEUsR0FBSyxJQUFJOTZCLEtBQUtrckYsT0FJRSxJQUFyQjZlLE9BQ21CLElBQ2JFLGFBQWFueUcsU0FDQSxZQUlsQm95RyxFQUFVOXJGLFVBQ1JBLGFBQWU0ckYsR0FBa0IsTUFBUDVyRixHQUF1QyxNQUF4QkEsRUFBSXNyRiwwQkFHL0NTLEVBQVV2MUYsVUFDWEEsRUFBUyxFQUVGM1YsS0FBS2toRyxLQUFLdnJGLElBQVcsRUFFckIzVixLQUFLMGYsTUFBTS9KLFlBSWpCdzFGLEVBQU1DLE9BQ1BDLEdBQWlCRCxFQUNqQjV1RyxFQUFRLFNBRVUsSUFBbEI2dUcsR0FBdUIxckYsU0FBUzByRixPQUN4QkgsRUFBU0csSUFHZDd1RyxXQUlGOHVHLEVBQWNDLEVBQVFDLEVBQVFDLE9BSS9CM3VGLEVBSEErVCxFQUFNN3dCLEtBQUtnYixJQUFJdXdGLEVBQU85ckcsT0FBUStyRyxFQUFPL3JHLFFBQ3JDaXNHLEVBQWExckcsS0FBS20wRSxJQUFJbzNCLEVBQU85ckcsT0FBUytyRyxFQUFPL3JHLFFBQzdDa3NHLEVBQVEsTUFFUDd1RixFQUFJLEVBQUdBLEVBQUkrVCxFQUFLL1QsS0FDWjJ1RixHQUFlRixFQUFPenVGLEtBQU8wdUYsRUFBTzF1RixLQUNuQzJ1RixHQUFlTixFQUFNSSxFQUFPenVGLE1BQVFxdUYsRUFBTUssRUFBTzF1RixpQkFJcEQ2dUYsRUFBUUQsV0FHVnZsRixFQUFLUSxJQUNnQyxJQUF0QzBHLEVBQU11K0UsNkJBQ21CLG9CQUFicGxGLFNBQTZCQSxRQUFRTCxjQUN6Q0EsS0FBSyx3QkFBMEJRLFlBSXRDa2xGLEVBQVVsbEYsRUFBSzdGLE9BQ2hCZ3JGLEdBQVksU0FFVDdwRixFQUFPLDhCQUNzQixNQUE1Qm9MLEVBQU0wK0Usc0JBQ0FBLG1CQUFtQixLQUFNcGxGLEdBRS9CbWxGLEVBQVcsU0FFUHJsRyxFQURBM0csS0FFS2dkLEVBQUksRUFBR0EsRUFBSXpjLFVBQVVaLE9BQVFxZCxJQUFLLE1BQ2pDLEdBQ3NCLFdBQXhCa3ZGLFFBQU8zckcsRUFBVXljLElBQWlCLEtBRTdCLElBQUluZSxRQURGLE1BQVFtZSxFQUFJLEtBQ0h6YyxVQUFVLE1BQ2YxQixFQUFNLEtBQU8wQixFQUFVLEdBQUcxQixHQUFPLE9BRXRDOEgsRUFBSTRELE1BQU0sR0FBSSxVQUVkaEssRUFBVXljLEtBRWZoWCxLQUFLVyxLQUVUa2dCLEVBQU0sZ0JBQWtCcG1CLE1BQU10RSxVQUFVb08sTUFBTTNOLEtBQUtvRCxHQUFNeWEsS0FBSyxJQUFNLE1BQVEsSUFBSXBULE9BQVNvSSxVQUNsRixTQUVUdVIsRUFBR2xoQixNQUFNL0csS0FBTXdILFlBQ3ZCeWdCLE9BeUVIampCLEVBdEVBb3VHLGNBRUtDLEVBQWdCaHpHLEVBQU15dEIsR0FDSyxNQUE1QjBHLEVBQU0wK0Usc0JBQ0FBLG1CQUFtQjd5RyxFQUFNeXRCLEdBRTlCc2xGLEVBQWEveUcsT0FDVHl0QixLQUNRenRCLElBQVEsWUFPcEJ1RSxFQUFXNnFHLFVBQ1RBLGFBQWlCeHNHLFVBQXNELHNCQUExQ0gsT0FBT00sVUFBVUUsU0FBU08sS0FBSzRyRyxZQXNCOUQ2RCxFQUFhQyxFQUFjQyxPQUNJOThFLEVBQWhDbE4sRUFBTUosS0FBV21xRixPQUNoQjc4RSxLQUFRODhFLEVBQ0w1RCxFQUFXNEQsRUFBYTk4RSxLQUNwQnB5QixFQUFTaXZHLEVBQWE3OEUsS0FBVXB5QixFQUFTa3ZHLEVBQVk5OEUsT0FDakRBLFFBQ0dsTixFQUFJa04sR0FBTzY4RSxFQUFhNzhFLE1BQ3hCbE4sRUFBSWtOLEdBQU84OEUsRUFBWTk4RSxLQUNGLE1BQXJCODhFLEVBQVk5OEUsS0FDZkEsR0FBUTg4RSxFQUFZOThFLFVBRWpCbE4sRUFBSWtOLFFBSWxCQSxLQUFRNjhFLEVBQ0wzRCxFQUFXMkQsRUFBYzc4RSxLQUNwQms1RSxFQUFXNEQsRUFBYTk4RSxJQUN6QnB5QixFQUFTaXZHLEVBQWE3OEUsUUFFdEJBLEdBQVF0TixLQUFXSSxFQUFJa04sWUFHNUJsTixXQUdGaXFGLEVBQU9sMEYsR0FDRSxNQUFWQSxRQUNLak0sSUFBSWlNLEtBdERYd3pGLDZCQUE4QixJQUM5QkcsbUJBQXFCLE9BMkR2QnB3RyxPQUFPa0MsS0FDQWxDLE9BQU9rQyxLQUVQLFNBQVVzaEIsT0FDVHJDLEVBQUd1RixTQUNGdkYsS0FBS3FDLEVBQ0ZzcEYsRUFBV3RwRixFQUFLckMsTUFDWmhYLEtBQUtnWCxVQUdWdUYsT0FvRlhrcUYsY0FFS0MsRUFBY0MsRUFBTUMsT0FDckJDLEVBQVlGLEVBQUtwc0YsZ0JBQ2Jzc0YsR0FBYUosRUFBUUksRUFBWSxLQUFPSixFQUFRRyxHQUFhRCxXQUdoRUcsRUFBZUMsU0FDSSxpQkFBVkEsRUFBcUJOLEVBQVFNLElBQVVOLEVBQVFNLEVBQU14c0Ysb0JBQWlCL2pCLFdBRy9Fd3dHLEVBQXFCQyxPQUV0QkMsRUFDQXo5RSxFQUZBMDlFLFNBSUMxOUUsS0FBUXc5RSxFQUNMdEUsRUFBV3NFLEVBQWF4OUUsT0FDUHE5RSxFQUFlcjlFLFFBRVp5OUUsR0FBa0JELEVBQVl4OUUsV0FLbkQwOUUsTUFHUEMsY0FFS0MsRUFBZ0JWLEVBQU1XLEtBQ2hCWCxHQUFRVyxXQWNkQyxFQUFTMTNGLEVBQVEyM0YsRUFBY0MsT0FDaENDLEVBQVksR0FBS3h0RyxLQUFLbTBFLElBQUl4K0QsR0FDMUI4M0YsRUFBY0gsRUFBZUUsRUFBVS90RyxPQUN2QzgwRSxFQUFPNStELEdBQVUsU0FDYjQrRCxFQUFRZzVCLEVBQVksSUFBTSxHQUFNLEtBQ3BDdnRHLEtBQUttaUUsSUFBSSxHQUFJbmlFLEtBQUtDLElBQUksRUFBR3d0RyxJQUFjdHhHLFdBQVc0ZSxPQUFPLEdBQUt5eUYsTUFHbEVFLEVBQW1CLHVMQUVuQkMsRUFBd0IsNkNBRXhCQyxLQUVBQyxjQU1LQyxFQUFnQkMsRUFBT0MsRUFBUUMsRUFBU252RSxPQUN6QzlnQyxFQUFPOGdDLEVBQ2EsaUJBQWJBLE1BQ0Esa0JBQ0lqbUMsS0FBS2ltQyxPQUdoQml2RSxNQUNxQkEsR0FBUy92RyxHQUU5Qmd3RyxNQUNxQkEsRUFBTyxJQUFNLGtCQUN2QlgsRUFBU3J2RyxFQUFLNEIsTUFBTS9HLEtBQU13SCxXQUFZMnRHLEVBQU8sR0FBSUEsRUFBTyxNQUduRUMsTUFDcUJBLEdBQVcsa0JBQ3JCcDFHLEtBQUtxMUcsYUFBYUQsUUFBUWp3RyxFQUFLNEIsTUFBTS9HLEtBQU13SCxXQUFZMHRHLGNBaUNqRUksRUFBYXhyRixFQUFHZ21GLFVBQ2hCaG1GLEVBQUV1bUYsYUFJRWtGLEVBQWF6RixFQUFRaG1GLEVBQUV1ckYsZ0JBQ2hCdkYsR0FBVWlGLEVBQWdCakYsYUEzQmxCQSxPQUNvQjdyRixFQUFHcmQsRUFSbkI2b0csRUFReEJob0csRUFBUXFvRyxFQUFPMXVHLE1BQU15ekcsT0FFcEI1d0YsRUFBSSxFQUFHcmQsRUFBU2EsRUFBTWIsT0FBUXFkLEVBQUlyZCxFQUFRcWQsSUFDdkMrd0YsRUFBcUJ2dEcsRUFBTXdjLE1BQ3JCQSxHQUFLK3dGLEVBQXFCdnRHLEVBQU13YyxNQUVoQ0EsSUFkY3dyRixFQWNjaG9HLEVBQU13YyxJQWJ0QzdpQixNQUFNLFlBQ0xxdUcsRUFBTTd1RyxRQUFRLFdBQVksSUFFOUI2dUcsRUFBTTd1RyxRQUFRLE1BQU8sV0FjckIsU0FBVTQwRyxPQUNJdnhGLEVBQWJ3eEYsRUFBUyxPQUNSeHhGLEVBQUksRUFBR0EsRUFBSXJkLEVBQVFxZCxPQUNWcmYsRUFBVzZDLEVBQU13YyxJQUFNeGMsRUFBTXdjLEdBQUdwZ0IsS0FBSzJ4RyxFQUFLMUYsR0FBVXJvRyxFQUFNd2MsVUFFakV3eEYsR0FXMENDLENBQW1CNUYsR0FFakVpRixFQUFnQmpGLEdBQVFobUYsSUFOcEJBLEVBQUV1ckYsYUFBYU0sdUJBU3JCSixFQUFhekYsRUFBUUMsT0FDdEI5ckYsRUFBSSxXQUVDMnhGLEVBQTRCbkcsVUFDMUJNLEVBQU84RixlQUFlcEcsSUFBVUEsUUFHckIxeEUsVUFBWSxFQUMzQjlaLEdBQUssR0FBSzZ3RixFQUFzQm52RyxLQUFLbXFHLE1BQy9CQSxFQUFPbHZHLFFBQVFrMEcsRUFBdUJjLEtBQ3pCNzNFLFVBQVksS0FDN0IsU0FHRit4RSxNQUdQZ0csRUFBaUIsS0FDakJDLEVBQWlCLE9BQ2pCQyxFQUFpQixRQUNqQkMsRUFBaUIsUUFDakJDLEVBQWlCLGFBQ2pCQyxFQUFpQixRQUNqQkMsRUFBaUIsWUFDakJDLEVBQWlCLGdCQUNqQkMsR0FBaUIsVUFDakJDLEdBQWlCLFVBQ2pCQyxHQUFpQixlQUVqQkMsR0FBaUIsTUFDakJDLEdBQWlCLFdBRWpCQyxHQUFpQixxQkFDakJDLEdBQW1CLDBCQU1uQkMsR0FBWSx3SkFFWkMsZUFFS0MsR0FBZTdCLEVBQU84QixFQUFPQyxNQUMxQi9CLEdBQVN0d0csRUFBV295RyxHQUFTQSxFQUFRLFNBQVVFLEVBQVU3QixVQUNyRDZCLEdBQVlELEVBQWVBLEVBQWNELFlBSWhERyxHQUF1QmpDLEVBQU8zMUYsVUFDOUJxd0YsRUFBV2tILEdBQVM1QixHQUlsQjRCLEdBQVE1QixHQUFPMzFGLEVBQU82eEYsUUFBUzd4RixFQUFPeXlGLFNBSGxDLElBQUlseEcsT0FRUnMyRyxHQVI4QmxDLEVBUWhCdDBHLFFBQVEsS0FBTSxJQUFJQSxRQUFRLHNDQUF1QyxTQUFVeTJHLEVBQVNDLEVBQUlDLEVBQUlDLEVBQUlDLFVBQzFHSCxHQUFNQyxHQUFNQyxHQUFNQyxlQUl4QkwsR0FBWTcxRyxVQUNWQSxFQUFFWCxRQUFRLHlCQUEwQixZQUczQ2d4RCxlQUVLOGxELEdBQWV4QyxFQUFPanZFLE9BQ3ZCaGlCLEVBQUc5ZSxFQUFPOGdDLE1BQ08saUJBQVZpdkUsT0FDRUEsSUFFVC81QixFQUFTbDFDLE9BQ0YsU0FBVXdwRSxFQUFPaG9HLEtBQ2R3K0IsR0FBWXFzRSxFQUFNN0MsS0FHM0J4ckYsRUFBSSxFQUFHQSxFQUFJaXhGLEVBQU10dUcsT0FBUXFkLE9BQ25CaXhGLEVBQU1qeEYsSUFBTTllLFdBSWxCd3lHLEdBQW1CekMsRUFBT2p2RSxNQUNqQml2RSxFQUFPLFNBQVV6RixFQUFPaG9HLEVBQU84WCxFQUFRMjFGLEtBQzFDMEMsR0FBS3I0RixFQUFPcTRGLFNBQ1ZuSSxFQUFPbHdGLEVBQU9xNEYsR0FBSXI0RixFQUFRMjFGLGNBSWxDMkMsR0FBd0IzQyxFQUFPekYsRUFBT2x3RixHQUM5QixNQUFUa3dGLEdBQWlCRyxFQUFXaCtDLEdBQVFzakQsT0FDN0JBLEdBQU96RixFQUFPbHdGLEVBQU91NEYsR0FBSXY0RixFQUFRMjFGLE9BSTVDNkMsR0FBTyxFQUNQQyxHQUFRLEVBQ1JDLEdBQU8sRUFDUEMsR0FBTyxFQUNQQyxHQUFTLEVBQ1RDLEdBQVMsRUFDVEMsR0FBYyxFQUNkQyxHQUFPLEVBQ1BDLEdBQVUsV0E4Q0xDLEdBQVdDLFVBQ1RDLEdBQVdELEdBQVEsSUFBTSxhQUczQkMsR0FBV0QsVUFDUkEsRUFBTyxHQUFNLEdBQUtBLEVBQU8sS0FBUSxHQUFNQSxFQUFPLEtBQVEsSUEvQ25ELElBQUssRUFBRyxFQUFHLGVBQ2xCenVDLEVBQUlocUUsS0FBS3k0RyxjQUNOenVDLEdBQUssS0FBTyxHQUFLQSxFQUFJLElBQU1BLE1BR3ZCLEdBQUksS0FBTSxHQUFJLEVBQUcsa0JBQ3JCaHFFLEtBQUt5NEcsT0FBUyxRQUdWLEdBQUksT0FBVSxHQUFVLEVBQUcsVUFDM0IsR0FBSSxRQUFVLEdBQVUsRUFBRyxVQUMzQixHQUFJLFNBQVUsR0FBRyxHQUFPLEVBQUcsVUFJN0IsT0FBUSxPQUlMLE9BQVEsTUFJVixJQUFVL0IsT0FDVixLQUFVUCxFQUFXSixNQUNyQixPQUFVUSxHQUFXTixNQUNyQixRQUFVTyxHQUFXTixNQUNyQixTQUFVTSxHQUFXTixPQUVwQixRQUFTLFVBQVc2QixPQUNyQixPQUFRLFNBQVV0SSxFQUFPaG9HLEtBQzdCc3dHLElBQXlCLElBQWpCdEksRUFBTTdvRyxPQUFlNHRCLEVBQU1ta0Ysa0JBQWtCbEosR0FBUzZDLEVBQU03QyxRQUVoRSxLQUFNLFNBQVVBLEVBQU9ob0csS0FDM0Jzd0csSUFBUXZqRixFQUFNbWtGLGtCQUFrQmxKLFFBRTVCLElBQUssU0FBVUEsRUFBT2hvRyxLQUMxQnN3RyxJQUFRamtFLFNBQVMyN0QsRUFBTyxRQWU1QmtKLGtCQUFvQixTQUFVbEosVUFDekI2QyxFQUFNN0MsSUFBVTZDLEVBQU03QyxHQUFTLEdBQUssS0FBTyxVQXNFbEQzbkYsR0FqRUE4d0YsR0FBYUMsR0FBVyxZQUFZLFlBTS9CQSxHQUFZakYsRUFBTWtGLFVBQ2hCLFNBQVVuMUcsVUFDQSxNQUFUQSxNQUNNM0QsS0FBTTR6RyxFQUFNandHLEtBQ1p3dUcsYUFBYW55RyxLQUFNODRHLEdBQ2xCOTRHLE1BRUEwVCxHQUFJMVQsS0FBTTR6RyxhQUtwQmxnRyxHQUFLOGhHLEVBQUs1QixVQUNSNEIsRUFBSW5GLFVBQ1BtRixFQUFJeHlFLEdBQUcsT0FBU3d5RSxFQUFJMUQsT0FBUyxNQUFRLElBQU04QixLQUFVeGdCLGFBR3BEMmxCLEdBQU92RCxFQUFLNUIsRUFBTWp3RyxHQUNuQjZ4RyxFQUFJbkYsWUFBY25wRixNQUFNdmpCLEtBQ1gsYUFBVGl3RyxHQUF1QjhFLEdBQVdsRCxFQUFJaUQsU0FBMkIsSUFBaEJqRCxFQUFJd0QsU0FBZ0MsS0FBZnhELEVBQUl6ekYsU0FDdEVpaEIsR0FBRyxPQUFTd3lFLEVBQUkxRCxPQUFTLE1BQVEsSUFBTThCLEdBQU1qd0csRUFBTzZ4RyxFQUFJd0QsUUFBU0MsR0FBWXQxRyxFQUFPNnhHLEVBQUl3RCxZQUd4RmgyRSxHQUFHLE9BQVN3eUUsRUFBSTFELE9BQVMsTUFBUSxJQUFNOEIsR0FBTWp3RyxhQXFEcERzMUcsR0FBWVIsRUFBTU8sTUFDbkI5eEYsTUFBTXV4RixJQUFTdnhGLE1BQU04eEYsVUFDZDVsQixRQXZCQ3JwQixFQXlCUm12QyxHQUFlRixHQXpCUGp2QyxFQXlCYyxJQXhCUkEsR0FBS0EsYUF5QmRpdkMsRUFBUUUsR0FBWSxHQUNULElBQWJBLEVBQWtCUixHQUFXRCxHQUFRLEdBQUssR0FBTyxHQUFLUyxFQUFXLEVBQUksS0FyQjVFeHhHLE1BQU10RSxVQUFVMGtCLFFBQ05wZ0IsTUFBTXRFLFVBQVUwa0IsUUFFaEIsU0FBVXNsQyxPQUVabnBDLE1BQ0NBLEVBQUksRUFBR0EsRUFBSWprQixLQUFLNEcsU0FBVXFkLEtBQ3ZCamtCLEtBQUtpa0IsS0FBT21wQyxTQUNMbnBDLFNBR1AsS0FlRCxLQUFNLEtBQU0sR0FBSSxLQUFNLGtCQUMxQmprQixLQUFLZzVHLFFBQVUsTUFHWCxNQUFPLEVBQUcsRUFBRyxTQUFVbEosVUFDM0I5dkcsS0FBS3ExRyxhQUFhOEQsWUFBWW41RyxLQUFNOHZHLE9BR2hDLE9BQVEsRUFBRyxFQUFHLFNBQVVBLFVBQzVCOXZHLEtBQUtxMUcsYUFBYStELE9BQU9wNUcsS0FBTTh2RyxPQUs3QixRQUFTLE9BSU4sUUFBUyxNQUlYLElBQVFxRyxNQUNSLEtBQVFBLEVBQVdKLE1BQ25CLE1BQVEsU0FBVW1CLEVBQVVuSCxVQUMvQkEsRUFBT3NKLGlCQUFpQm5DLFFBRXJCLE9BQVEsU0FBVUEsRUFBVW5ILFVBQy9CQSxFQUFPdUosWUFBWXBDLFNBR2YsSUFBSyxNQUFPLFNBQVV6SCxFQUFPaG9HLEtBQ2xDdXdHLElBQVMxRixFQUFNN0MsR0FBUyxRQUduQixNQUFPLFFBQVMsU0FBVUEsRUFBT2hvRyxFQUFPOFgsRUFBUTIxRixPQUN2RDhELEVBQVF6NUYsRUFBT3l5RixRQUFRdUgsWUFBWTlKLEVBQU95RixFQUFPMzFGLEVBQU82eEYsU0FFL0MsTUFBVDRILElBQ01oQixJQUFTZ0IsSUFFQ3o1RixHQUFRc3hGLGFBQWVwQixRQU0zQytKLEdBQW1CLGdDQUNuQkMsR0FBc0Isd0ZBQXdGbHlGLE1BQU0sS0FVcEhteUYsR0FBMkIsa0RBQWtEbnlGLE1BQU0sY0EyRjlFb3lGLEdBQVVuRSxFQUFLN3hHLE9BQ2hCaTJHLE1BRUNwRSxFQUFJbkYsaUJBRUVtRixLQUdVLGlCQUFWN3hHLEtBQ0gsUUFBUWdDLEtBQUtoQyxLQUNMMnVHLEVBQU0zdUcsWUFJVHczRSxJQUZHcTZCLEVBQUlILGFBQWFrRSxZQUFZNTFHLFdBRzFCNnhHLFdBS05ydUcsS0FBS2diLElBQUlxekYsRUFBSXp6RixPQUFRazNGLEdBQVl6RCxFQUFJaUQsT0FBUTkwRyxNQUN0RHEvQixHQUFHLE9BQVN3eUUsRUFBSTFELE9BQVMsTUFBUSxJQUFNLFNBQVNudUcsRUFBT2kyRyxHQUNwRHBFLFdBR0ZxRSxHQUFhbDJHLFVBQ0wsTUFBVEEsTUFDUzNELEtBQU0yRCxLQUNUd3VHLGFBQWFueUcsTUFBTSxHQUNsQkEsTUFFQTBULEdBQUkxVCxLQUFNLGFBUXJCODVHLEdBQTBCakQsR0FvQjFCa0QsR0FBcUJsRCxZQW9CaEJtRCxjQUNJQyxFQUFVcHhGLEVBQUdZLFVBQ1hBLEVBQUU3aUIsT0FBU2lpQixFQUFFamlCLFdBSXBCcWQsRUFBR3V4RixFQURIMEUsS0FBa0JDLEtBQWlCQyxTQUVsQ24yRixFQUFJLEVBQUdBLEVBQUksR0FBSUEsTUFFVjRyRixHQUFXLElBQU01ckYsTUFDWGhYLEtBQUtqTixLQUFLbTVHLFlBQVkzRCxFQUFLLE9BQzVCdm9HLEtBQUtqTixLQUFLbzVHLE9BQU81RCxFQUFLLE9BQ3JCdm9HLEtBQUtqTixLQUFLbzVHLE9BQU81RCxFQUFLLE9BQ3RCdm9HLEtBQUtqTixLQUFLbTVHLFlBQVkzRCxFQUFLLFdBSS9CdjNGLEtBQUtnOEYsS0FDTmg4RixLQUFLZzhGLEtBQ0poOEYsS0FBS2c4RixHQUNaaDJGLEVBQUksRUFBR0EsRUFBSSxHQUFJQSxNQUNKQSxHQUFLbXpGLEdBQVk4QyxFQUFZajJGLE1BQzlCQSxHQUFLbXpGLEdBQVkrQyxFQUFXbDJGLFFBRXRDQSxFQUFJLEVBQUdBLEVBQUksR0FBSUEsTUFDSkEsR0FBS216RixHQUFZZ0QsRUFBWW4yRixTQUd4Q28yRixhQUFlLElBQUl2NUcsT0FBTyxLQUFPczVHLEVBQVkxNEYsS0FBSyxLQUFPLElBQUssVUFDOUQ0NEYsa0JBQW9CdDZHLEtBQUtxNkcsa0JBQ3pCRSxtQkFBcUIsSUFBSXo1RyxPQUFPLEtBQU9xNUcsRUFBV3o0RixLQUFLLEtBQU8sSUFBSyxVQUNuRTg0Rix3QkFBMEIsSUFBSTE1RyxPQUFPLEtBQU9vNUcsRUFBWXg0RixLQUFLLEtBQU8sSUFBSyxjQXFCekUrNEYsR0FBZXp3QyxPQUNoQmpvRCxLQUVBaW9ELEVBQUksS0FBT0EsR0FBSyxFQUFHLEtBQ2YvaUUsRUFBT1MsTUFBTXRFLFVBQVVvTyxNQUFNM04sS0FBSzJELGFBRWpDLEdBQUt3aUUsRUFBSSxNQUNQLElBQUk5aEUsS0FBS0EsS0FBS3d5RyxJQUFJM3pHLE1BQU0sS0FBTUUsSUFDakM2ZixTQUFTL0UsRUFBSzQ0RixxQkFDVEMsZUFBZTV3QyxVQUdqQixJQUFJOWhFLEtBQUtBLEtBQUt3eUcsSUFBSTN6RyxNQUFNLEtBQU1TLG1CQUdsQ3VhLFdBSUY4NEYsR0FBZ0JwQyxFQUFNcUMsRUFBS0MsU0FFdEIsRUFBSUQsRUFBTUMsS0FFUCxFQUFJTixHQUFjaEMsRUFBTSxFQUFHdUMsR0FBS0MsWUFBY0gsR0FBTyxTQUUxREksRUFBUUYsRUFBTSxXQUlqQkcsR0FBbUIxQyxFQUFNMkMsRUFBTUMsRUFBU1AsRUFBS0MsT0FJOUNPLEVBQVNDLEVBSFRDLEdBQWdCLEVBQUlILEVBQVVQLEdBQU8sRUFDckNXLEVBQWFaLEdBQWdCcEMsRUFBTXFDLEVBQUtDLEdBQ3hDVyxFQUFZLEVBQUksR0FBS04sRUFBTyxHQUFLSSxFQUFlQyxTQUdoREMsR0FBYSxJQUVFbEQsS0FETEMsRUFBTyxHQUNvQmlELEVBQzlCQSxFQUFZbEQsR0FBV0MsTUFDcEJBLEVBQU8sSUFDRmlELEVBQVlsRCxHQUFXQyxPQUU1QkEsSUFDS2lELFNBSVRKLFlBQ0tDLFlBSVZJLEdBQVduRyxFQUFLc0YsRUFBS0MsT0FHdEJhLEVBQVNOLEVBRlRHLEVBQWFaLEdBQWdCckYsRUFBSWlELE9BQVFxQyxFQUFLQyxHQUM5Q0ssRUFBT2owRyxLQUFLMGYsT0FBTzJ1RixFQUFJa0csWUFBY0QsRUFBYSxHQUFLLEdBQUssU0FHNURMLEVBQU8sS0FDRzVGLEVBQUlpRCxPQUFTLElBQ2IyQyxFQUFPUyxHQUFZUCxFQUFTUixFQUFLQyxJQUNwQ0ssRUFBT1MsR0FBWXJHLEVBQUlpRCxPQUFRcUMsRUFBS0MsTUFDakNLLEVBQU9TLEdBQVlyRyxFQUFJaUQsT0FBUXFDLEVBQUtDLEtBQ3BDdkYsRUFBSWlELE9BQVMsTUFFYmpELEVBQUlpRCxTQUNKMkMsU0FJSlEsT0FDQU4sWUFJTE8sR0FBWXBELEVBQU1xQyxFQUFLQyxPQUN4QlUsRUFBYVosR0FBZ0JwQyxFQUFNcUMsRUFBS0MsR0FDeENlLEVBQWlCakIsR0FBZ0JwQyxFQUFPLEVBQUdxQyxFQUFLQyxVQUM1Q3ZDLEdBQVdDLEdBQVFnRCxFQUFhSyxHQUFrQixXQW9KckRDLEdBQWVDLEVBQUkxeUcsVUFDakIweUcsRUFBR3hxRyxNQUFNbEksRUFBRyxHQUFHb1osT0FBT3M1RixFQUFHeHFHLE1BQU0sRUFBR2xJLE1BaEo5QixLQUFNLEtBQU0sR0FBSSxLQUFNLFVBQ3RCLEtBQU0sS0FBTSxHQUFJLEtBQU0sYUFJeEIsT0FBUSxPQUNSLFVBQVcsT0FJUixPQUFRLEtBQ1IsVUFBVyxNQUliLElBQU02c0csTUFDTixLQUFNQSxFQUFXSixNQUNqQixJQUFNSSxNQUNOLEtBQU1BLEVBQVdKLE9BRVosSUFBSyxLQUFNLElBQUssTUFBTyxTQUFVdEcsRUFBTzJMLEVBQU03N0YsRUFBUTIxRixLQUNoRUEsRUFBTWh6RixPQUFPLEVBQUcsSUFBTW93RixFQUFNN0MsT0FzQ3RCLElBQUssRUFBRyxLQUFNLFNBRWQsS0FBTSxFQUFHLEVBQUcsU0FBVUssVUFDMUI5dkcsS0FBS3ExRyxhQUFhNEcsWUFBWWo4RyxLQUFNOHZHLE9BR2hDLE1BQU8sRUFBRyxFQUFHLFNBQVVBLFVBQzNCOXZHLEtBQUtxMUcsYUFBYTZHLGNBQWNsOEcsS0FBTTh2RyxPQUdsQyxPQUFRLEVBQUcsRUFBRyxTQUFVQSxVQUM1Qjl2RyxLQUFLcTFHLGFBQWE4RyxTQUFTbjhHLEtBQU04dkcsT0FHN0IsSUFBSyxFQUFHLEVBQUcsYUFDWCxJQUFLLEVBQUcsRUFBRyxnQkFJYixNQUFPLE9BQ1AsVUFBVyxPQUNYLGFBQWMsT0FHWCxNQUFPLE1BQ1AsVUFBVyxNQUNYLGFBQWMsT0FJaEIsSUFBUXFHLE1BQ1IsSUFBUUEsTUFDUixJQUFRQSxNQUNSLEtBQVEsU0FBVWUsRUFBVW5ILFVBQy9CQSxFQUFPcU0saUJBQWlCbEYsUUFFckIsTUFBUyxTQUFVQSxFQUFVbkgsVUFDaENBLEVBQU9zTSxtQkFBbUJuRixRQUV2QixPQUFVLFNBQVVBLEVBQVVuSCxVQUNqQ0EsRUFBT3VNLGNBQWNwRixTQUdiLEtBQU0sTUFBTyxRQUFTLFNBQVV6SCxFQUFPMkwsRUFBTTc3RixFQUFRMjFGLE9BQ2hFbUcsRUFBVTk3RixFQUFPeXlGLFFBQVF1SyxjQUFjOU0sRUFBT3lGLEVBQU8zMUYsRUFBTzZ4RixTQUVqRCxNQUFYaUssSUFDSzMyRixFQUFJMjJGLElBRU85N0YsR0FBUXV4RixlQUFpQnJCLFFBSTlCLElBQUssSUFBSyxLQUFNLFNBQVVBLEVBQU8yTCxFQUFNNzdGLEVBQVEyMUYsS0FDekRBLEdBQVM1QyxFQUFNN0MsU0FrQ3BCK00sR0FBd0IsMkRBQTJEajFGLE1BQU0sS0FRekZrMUYsR0FBNkIsOEJBQThCbDFGLE1BQU0sS0FNakVtMUYsR0FBMkIsdUJBQXVCbjFGLE1BQU0sS0FzSnhEbzFGLEdBQXVCOUYsR0FvQnZCK0YsR0FBNEIvRixHQW9CNUJnRyxHQUEwQmhHLFlBcUJyQmlHLGNBQ0k3QyxFQUFVcHhGLEVBQUdZLFVBQ1hBLEVBQUU3aUIsT0FBU2lpQixFQUFFamlCLFdBSXBCcWQsRUFBR3V4RixFQUFLdUgsRUFBTUMsRUFBUUMsRUFEdEJDLEtBQWdCaEQsS0FBa0JDLEtBQWlCQyxTQUVsRG4yRixFQUFJLEVBQUdBLEVBQUksRUFBR0EsTUFFVDRyRixHQUFXLElBQU0sSUFBSXNOLElBQUlsNUYsS0FDeEJqa0IsS0FBS2k4RyxZQUFZekcsRUFBSyxNQUNwQngxRyxLQUFLazhHLGNBQWMxRyxFQUFLLE1BQ3pCeDFHLEtBQUttOEcsU0FBUzNHLEVBQUssTUFDakJ2b0csS0FBSzh2RyxLQUNIOXZHLEtBQUsrdkcsS0FDTi92RyxLQUFLZ3dHLEtBQ0pod0csS0FBSzh2RyxLQUNMOXZHLEtBQUsrdkcsS0FDTC92RyxLQUFLZ3dHLFNBSVhoL0YsS0FBS2c4RixLQUNIaDhGLEtBQUtnOEYsS0FDTmg4RixLQUFLZzhGLEtBQ0poOEYsS0FBS2c4RixHQUNaaDJGLEVBQUksRUFBR0EsRUFBSSxFQUFHQSxNQUNIQSxHQUFLbXpGLEdBQVk4QyxFQUFZajJGLE1BQzlCQSxHQUFLbXpGLEdBQVkrQyxFQUFXbDJGLE1BQzNCQSxHQUFLbXpGLEdBQVlnRCxFQUFZbjJGLFNBR3hDbTVGLGVBQWlCLElBQUl0OEcsT0FBTyxLQUFPczVHLEVBQVkxNEYsS0FBSyxLQUFPLElBQUssVUFDaEUyN0Ysb0JBQXNCcjlHLEtBQUtvOUcsb0JBQzNCRSxrQkFBb0J0OUcsS0FBS285RyxvQkFFekJHLHFCQUF1QixJQUFJejhHLE9BQU8sS0FBT3E1RyxFQUFXejRGLEtBQUssS0FBTyxJQUFLLFVBQ3JFODdGLDBCQUE0QixJQUFJMThHLE9BQU8sS0FBT281RyxFQUFZeDRGLEtBQUssS0FBTyxJQUFLLFVBQzNFKzdGLHdCQUEwQixJQUFJMzhHLE9BQU8sS0FBT284RyxFQUFVeDdGLEtBQUssS0FBTyxJQUFLLGNBS3ZFZzhGLFlBQ0UxOUcsS0FBSzI5RyxRQUFVLElBQU0sWUE2QnZCeE0sR0FBVStELEVBQU8wSSxLQUNQMUksRUFBTyxFQUFHLEVBQUcsa0JBQ2pCbDFHLEtBQUtxMUcsYUFBYWxFLFNBQVNueEcsS0FBSzI5RyxRQUFTMzlHLEtBQUs2OUcsVUFBV0QsY0FnQi9ERSxHQUFlNUcsRUFBVW5ILFVBQ3ZCQSxFQUFPZ08saUJBekNILEtBQU0sS0FBTSxHQUFJLEVBQUcsVUFDbkIsS0FBTSxLQUFNLEdBQUksRUFBR0wsTUFDbkIsS0FBTSxLQUFNLEdBQUksb0JBTHBCMTlHLEtBQUsyOUcsU0FBVyxPQU9aLE1BQU8sRUFBRyxFQUFHLGlCQUNqQixHQUFLRCxHQUFRMzJHLE1BQU0vRyxNQUFRdzBHLEVBQVN4MEcsS0FBSzY5RyxVQUFXLE9BR2hELFFBQVMsRUFBRyxFQUFHLGlCQUNuQixHQUFLSCxHQUFRMzJHLE1BQU0vRyxNQUFRdzBHLEVBQVN4MEcsS0FBSzY5RyxVQUFXLEdBQ3ZEckosRUFBU3gwRyxLQUFLZytHLFVBQVcsT0FHbEIsTUFBTyxFQUFHLEVBQUcsaUJBQ2pCLEdBQUtoK0csS0FBSzI5RyxRQUFVbkosRUFBU3gwRyxLQUFLNjlHLFVBQVcsT0FHekMsUUFBUyxFQUFHLEVBQUcsaUJBQ25CLEdBQUs3OUcsS0FBSzI5RyxRQUFVbkosRUFBU3gwRyxLQUFLNjlHLFVBQVcsR0FDaERySixFQUFTeDBHLEtBQUtnK0csVUFBVyxRQVN4QixLQUFLLE1BQ0wsS0FBSyxLQUlELE9BQVEsT0FHTCxPQUFRLE9BUVYsSUFBTUYsT0FDTixJQUFNQSxPQUNOLElBQU0zSCxNQUNOLElBQU1BLE1BQ04sSUFBTUEsTUFDTixLQUFNQSxFQUFXSixNQUNqQixLQUFNSSxFQUFXSixNQUNqQixLQUFNSSxFQUFXSixNQUVqQixNQUFPSyxNQUNQLFFBQVNDLE1BQ1QsTUFBT0QsTUFDUCxRQUFTQyxPQUVSLElBQUssTUFBTzZCLFFBQ1osSUFBSyxNQUFPLFNBQVV6SSxFQUFPaG9HLEVBQU84WCxPQUMzQzArRixFQUFTM0wsRUFBTTdDLEtBQ2J5SSxJQUFtQixLQUFYK0YsRUFBZ0IsRUFBSUEsUUFFdkIsSUFBSyxLQUFNLFNBQVV4TyxFQUFPaG9HLEVBQU84WCxLQUN2QzIrRixNQUFRMytGLEVBQU95eUYsUUFBUW1NLEtBQUsxTyxLQUM1QjJPLFVBQVkzTyxRQUVSLElBQUssTUFBTyxTQUFVQSxFQUFPaG9HLEVBQU84WCxLQUN6QzI0RixJQUFRNUYsRUFBTTdDLEtBQ0psd0YsR0FBUWd5RixTQUFVLE9BRXhCLE1BQU8sU0FBVTlCLEVBQU9ob0csRUFBTzhYLE9BQ3JDb3dDLEVBQU04L0MsRUFBTTdvRyxPQUFTLElBQ25Cc3hHLElBQVE1RixFQUFNN0MsRUFBTXZ0RixPQUFPLEVBQUd5dEMsTUFDOUJ3b0QsSUFBVTdGLEVBQU03QyxFQUFNdnRGLE9BQU95dEMsTUFDbkJwd0MsR0FBUWd5RixTQUFVLE9BRXhCLFFBQVMsU0FBVTlCLEVBQU9ob0csRUFBTzhYLE9BQ3ZDOCtGLEVBQU81TyxFQUFNN29HLE9BQVMsRUFDdEIwM0csRUFBTzdPLEVBQU03b0csT0FBUyxJQUNwQnN4RyxJQUFRNUYsRUFBTTdDLEVBQU12dEYsT0FBTyxFQUFHbThGLE1BQzlCbEcsSUFBVTdGLEVBQU03QyxFQUFNdnRGLE9BQU9tOEYsRUFBTSxNQUNuQ2pHLElBQVU5RixFQUFNN0MsRUFBTXZ0RixPQUFPbzhGLE1BQ25CLytGLEdBQVFneUYsU0FBVSxPQUV4QixNQUFPLFNBQVU5QixFQUFPaG9HLEVBQU84WCxPQUNyQ293QyxFQUFNOC9DLEVBQU03b0csT0FBUyxJQUNuQnN4RyxJQUFRNUYsRUFBTTdDLEVBQU12dEYsT0FBTyxFQUFHeXRDLE1BQzlCd29ELElBQVU3RixFQUFNN0MsRUFBTXZ0RixPQUFPeXRDLFNBRXpCLFFBQVMsU0FBVTgvQyxFQUFPaG9HLEVBQU84WCxPQUN2QzgrRixFQUFPNU8sRUFBTTdvRyxPQUFTLEVBQ3RCMDNHLEVBQU83TyxFQUFNN29HLE9BQVMsSUFDcEJzeEcsSUFBUTVGLEVBQU03QyxFQUFNdnRGLE9BQU8sRUFBR204RixNQUM5QmxHLElBQVU3RixFQUFNN0MsRUFBTXZ0RixPQUFPbThGLEVBQU0sTUFDbkNqRyxJQUFVOUYsRUFBTTdDLEVBQU12dEYsT0FBT284RixVQW9EbkNDLEdBekJBQyxHQUFhM0YsR0FBVyxTQUFTLEdBRWpDNEYsc0JBLzFDVSx3QkFDQSw0QkFDQyx1QkFDRCw2QkFDQywrQkFDQSx5QkFTSixlQUNBLFdBQ0EsZ0JBQ0EsbUJBQ0EsMkJBQ0EseUNBa0JjLHVCQU1KLDRCQUNlLCtCQU92QixhQUNBLFdBQ0osbUJBQ0EsZUFDQSxjQUNBLGVBQ0EsYUFDQSxhQUNBLFdBQ0EsWUFDQSxhQUNBLGNBQ0EsWUFDQSxtQkF1eUNHaEYsZUFDS0MsYUEzZ0JQLE1BQ0EsWUE4Z0JJOEMsZUFDR0UsaUJBQ0VELGlCQWpDYyxpQkF1QzdCaUMsTUFDQUMsZUFHS0MsR0FBZ0I5NEcsVUFDZEEsRUFBTUEsRUFBSTBoQixjQUFjNW1CLFFBQVEsSUFBSyxLQUFPa0YsV0E4QjlDKzRHLEdBQVd4K0csT0FDWnkrRyxFQUFZLFNBRVhKLEdBQVFyK0csSUFDTDhKLEdBQVVBLEVBQU9ILGNBRUx1MEcsR0FBYVEsVUFDckJDLEVBQWlCM3lHLGtCQUNOLFlBQWNoTSxNQUNWeStHLEdBQ3JCLE1BQU85NkcsV0FFTjA2RyxHQUFRcitHLFlBTVY0K0csR0FBb0JuNUcsRUFBS2tSLE9BQzFCN1UsU0FDQTJELE9BQ0k0cEcsRUFBWTE0RixHQUNMa29HLEdBQVVwNUcsR0FHVnE1RyxHQUFhcjVHLEVBQUtrUixPQUtWN1UsRUFHVSxvQkFBYndyQixTQUE2QkEsUUFBUUwsY0FFckNBLEtBQUssVUFBWXhuQixFQUFPLDJDQUtyQ3k0RyxHQUFhUSxlQUdmSSxHQUFjOStHLEVBQU1rZixNQUNWLE9BQVhBLEVBQWlCLEtBQ2J3d0YsRUFBUXdELEVBQWVrTCxRQUNwQlcsS0FBTy8rRyxFQUNPLE1BQWpCcStHLEdBQVFyK0csS0FDUSx1QkFDUiw2T0FJT3ErRyxHQUFRcitHLEdBQU1nL0csYUFDMUIsR0FBMkIsTUFBdkI5L0YsRUFBTysvRixnQkFDc0IsTUFBaENaLEdBQVFuL0YsRUFBTysvRixnQkFDQVosR0FBUW4vRixFQUFPKy9GLGNBQWNELFlBQ3pDLElBRVcsU0FETFIsR0FBV3QvRixFQUFPKy9GLHNCQUlsQlgsR0FBZXAvRixFQUFPKy9GLG1CQUNSLy9GLEVBQU8rL0YscUJBRVgvL0YsRUFBTysvRixjQUFjcnlHLFdBQzFCNU0sU0FDRWtmLElBRUwsT0FUUXd3RixFQUFPc1Asa0JBYTFCaC9HLEdBQVEsSUFBSW96RyxFQUFPSCxFQUFhQyxFQUFjaDBGLElBRWxEby9GLEdBQWV0K0csT0FDQUEsR0FBTWlTLFFBQVEsU0FBVXkzRCxNQUN0QkEsRUFBRTFwRSxLQUFNMHBFLEVBQUV4cUQsYUFPWmxmLEdBR1pxK0csR0FBUXIrRyxpQkFHUnErRyxHQUFRcitHLEdBQ1IsY0FpQ042K0csR0FBV3A1RyxPQUNaaXFHLEtBRUFqcUcsR0FBT0EsRUFBSWtzRyxTQUFXbHNHLEVBQUlrc0csUUFBUStNLFVBQzVCajVHLEVBQUlrc0csUUFBUStNLFFBR2pCajVHLFNBQ015NEcsT0FHTjEwRyxFQUFRL0QsR0FBTSxNQUVOKzRHLEdBQVcvNEcsVUFFVGlxRyxLQUVKanFHLG1CQXJLT3k1RyxXQUNQL3lFLEVBQUdsTixFQUFNeXdFLEVBQVF4b0YsRUFBeEJ0RCxFQUFJLEVBRURBLEVBQUlzN0YsRUFBTTM0RyxRQUFRLE9BQ2JnNEcsR0FBZ0JXLEVBQU10N0YsSUFBSXNELE1BQU0sT0FDcENBLEVBQU0zZ0IsWUFDSGc0RyxHQUFnQlcsRUFBTXQ3RixFQUFJLEtBQ25CcWIsRUFBSy9YLE1BQU0sS0FBTyxLQUN6QmlsQixFQUFJLEdBQUcsTUFDRHF5RSxHQUFXdDNGLEVBQU0vVixNQUFNLEVBQUdnN0IsR0FBRzlxQixLQUFLLGFBRWhDcXVGLEtBRVB6d0UsR0FBUUEsRUFBSzE0QixRQUFVNGxDLEdBQUtpbUUsRUFBY2xyRixFQUFPK1gsR0FBTSxJQUFTa04sRUFBSSx1QkFRekUreEUsR0FtSkFpQixDQUFhMTVHLFlBT2YyNUcsR0FBZTMxRixPQUNoQjZtRixFQUNBOW5GLEVBQUlpQixFQUFFZ3VGLFVBRU5qdkYsSUFBc0MsSUFBakNzbkYsRUFBZ0JybUYsR0FBRzZtRixhQUVwQjluRixFQUFFbXZGLElBQWUsR0FBS252RixFQUFFbXZGLElBQWUsR0FBTUEsR0FDN0NudkYsRUFBRW92RixJQUFlLEdBQUtwdkYsRUFBRW92RixJQUFlZ0IsR0FBWXB3RixFQUFFa3ZGLElBQU9sdkYsRUFBRW12RixLQUFVQyxHQUN4RXB2RixFQUFFcXZGLElBQWUsR0FBS3J2RixFQUFFcXZGLElBQWUsSUFBbUIsS0FBWnJ2RixFQUFFcXZGLE1BQStCLElBQWRydkYsRUFBRXN2RixLQUErQixJQUFkdHZGLEVBQUV1dkYsS0FBb0MsSUFBbkJ2dkYsRUFBRXd2RixLQUF1QkgsR0FDaElydkYsRUFBRXN2RixJQUFlLEdBQUt0dkYsRUFBRXN2RixJQUFlLEdBQU1BLEdBQzdDdHZGLEVBQUV1dkYsSUFBZSxHQUFLdnZGLEVBQUV1dkYsSUFBZSxHQUFNQSxHQUM3Q3Z2RixFQUFFd3ZGLElBQWUsR0FBS3h2RixFQUFFd3ZGLElBQWUsSUFBTUEsSUFDNUMsRUFFRGxJLEVBQWdCcm1GLEdBQUc0MUYscUJBQXVCL08sRUFBV29ILElBQVFwSCxFQUFXc0gsUUFDN0RBLElBRVg5SCxFQUFnQnJtRixHQUFHNjFGLGlCQUFnQyxJQUFkaFAsTUFDMUIySCxJQUVYbkksRUFBZ0JybUYsR0FBRzgxRixtQkFBa0MsSUFBZGpQLE1BQzVCNEgsTUFHQ3p1RixHQUFHNm1GLFNBQVdBLEdBRzNCN21GLFdBSUYraUQsR0FBU2hrRCxFQUFHWSxFQUFHckIsVUFDWCxNQUFMUyxFQUNPQSxFQUVGLE1BQUxZLEVBQ09BLEVBRUpyQixXQWdCRnkzRixHQUFpQnRnRyxPQUNsQjBFLEVBQUdsQyxFQUFrQis5RixFQUFhQyxFQUFpQkMsRUFBMUN2USxTQUVUbHdGLEVBQU95akIsbUJBaEJXempCLE9BRWxCMGdHLEVBQVcsSUFBSS8zRyxLQUFLc3NCLEVBQU1yc0IsY0FDMUJvWCxFQUFPMmdHLFNBQ0NELEVBQVN0RixpQkFBa0JzRixFQUFTRSxjQUFlRixFQUFTRyxlQUVoRUgsRUFBU0ksY0FBZUosRUFBU0ssV0FBWUwsRUFBU00sV0FjaERDLENBQWlCamhHLEdBRzNCQSxFQUFPcTRGLElBQXlCLE1BQW5CcjRGLEVBQU91NEYsR0FBR0csS0FBcUMsTUFBcEIxNEYsRUFBT3U0RixHQUFHRSxjQTJEM0J6NEYsT0FDdkJzMEQsRUFBRzRzQyxFQUFVckYsRUFBTUMsRUFBU1AsRUFBS0MsRUFBSzJGLEVBQU1DLEtBR3BDLFNBRFJwaEcsRUFBT3E0RixJQUNMZ0osSUFBcUIsTUFBUC9zQyxFQUFFZ3RDLEdBQW9CLE1BQVBodEMsRUFBRWl0QyxJQUMzQixJQUNBLElBTUtqMEMsR0FBU2dILEVBQUUrc0MsR0FBSXJoRyxFQUFPdTRGLEdBQUdDLElBQU80RCxHQUFXb0YsS0FBZSxFQUFHLEdBQUd0SSxRQUNwRTVyQyxHQUFTZ0gsRUFBRWd0QyxFQUFHLE9BQ1hoMEMsR0FBU2dILEVBQUVpdEMsRUFBRyxJQUNWLEdBQUt6RixFQUFVLFFBQ1AsT0FFbkIsR0FDRzk3RixFQUFPeXlGLFFBQVFnUCxNQUFNbEcsTUFDckJ2N0YsRUFBT3l5RixRQUFRZ1AsTUFBTWpHLFFBRXZCa0csRUFBVXRGLEdBQVdvRixLQUFlakcsRUFBS0MsS0FFbENsdUMsR0FBU2dILEVBQUVxdEMsR0FBSTNoRyxFQUFPdTRGLEdBQUdDLElBQU9rSixFQUFReEksUUFHNUM1ckMsR0FBU2dILEVBQUVBLEVBQUdvdEMsRUFBUTdGLE1BRWxCLE1BQVB2bkMsRUFBRW52RCxNQUVRbXZELEVBQUVudkQsR0FDRSxHQUFLMjJGLEVBQVUsUUFDUCxHQUVSLE1BQVB4bkMsRUFBRTd2RSxLQUVDNnZFLEVBQUU3dkUsRUFBSTgyRyxHQUNaam5DLEVBQUU3dkUsRUFBSSxHQUFLNnZFLEVBQUU3dkUsRUFBSSxRQUNDLE1BSVo4MkcsRUFHZE0sRUFBTyxHQUFLQSxFQUFPUyxHQUFZNEUsRUFBVTNGLEVBQUtDLEtBQzlCeDdGLEdBQVFvZ0csZ0JBQWlCLEVBQ2YsTUFBbkJnQixJQUNTcGhHLEdBQVFxZ0csa0JBQW1CLEtBRXBDekUsR0FBbUJzRixFQUFVckYsRUFBTUMsRUFBU1AsRUFBS0MsS0FDakRqRCxHQUFHQyxJQUFRMkksRUFBS2pJLE9BQ2hCMEksV0FBYVQsRUFBS2hGLFlBL0dIbjhGLEdBSUQsTUFBckJBLEVBQU80aEcsZUFDS3QwQyxHQUFTdHRELEVBQU91NEYsR0FBR0MsSUFBTytILEVBQVkvSCxNQUU5Q3g0RixFQUFPNGhHLFdBQWEzSSxHQUFXd0gsSUFBb0MsSUFBdEJ6Z0csRUFBTzRoRyxnQkFDcEM1aEcsR0FBUW1nRyxvQkFBcUIsS0FHMUNqRixHQUFjdUYsRUFBVyxFQUFHemdHLEVBQU80aEcsY0FDbkNySixHQUFHRSxJQUFTajJGLEVBQUtvK0YsZ0JBQ2pCckksR0FBR0csSUFBUWwyRixFQUFLcStGLGNBUXRCbjhGLEVBQUksRUFBR0EsRUFBSSxHQUFxQixNQUFoQjFFLEVBQU91NEYsR0FBRzd6RixLQUFjQSxJQUNsQzZ6RixHQUFHN3pGLEdBQUt3ckYsRUFBTXhyRixHQUFLNjdGLEVBQVk3N0YsUUFJbkNBLEVBQUksRUFBR0EsTUFDSDZ6RixHQUFHN3pGLEdBQUt3ckYsRUFBTXhyRixHQUFzQixNQUFoQjFFLEVBQU91NEYsR0FBRzd6RixHQUFxQixJQUFOQSxFQUFVLEVBQUksRUFBSzFFLEVBQU91NEYsR0FBRzd6RixHQUk3RCxLQUFwQjFFLEVBQU91NEYsR0FBR0ksS0FDZ0IsSUFBdEIzNEYsRUFBT3U0RixHQUFHSyxLQUNZLElBQXRCNTRGLEVBQU91NEYsR0FBR00sS0FDaUIsSUFBM0I3NEYsRUFBT3U0RixHQUFHTyxRQUNQK0ksVUFBVyxJQUNYdEosR0FBR0ksSUFBUSxLQUdmbDFFLElBQU16akIsRUFBTzJnRyxRQUFVekYsWUE5N0JiendDLEVBQUdsZ0QsRUFBR3BGLEVBQUcrcEMsRUFBRzR5RCxFQUFHOS9HLEVBQUcrL0csT0FHL0J2L0YsU0FFQWlvRCxFQUFJLEtBQU9BLEdBQUssS0FFVCxJQUFJOWhFLEtBQUs4aEUsRUFBSSxJQUFLbGdELEVBQUdwRixFQUFHK3BDLEVBQUc0eUQsRUFBRzkvRyxFQUFHKy9HLEdBQ3BDeDZGLFNBQVMvRSxFQUFLcytGLGtCQUNUa0IsWUFBWXYzQyxNQUdkLElBQUk5aEUsS0FBSzhoRSxFQUFHbGdELEVBQUdwRixFQUFHK3BDLEVBQUc0eUQsRUFBRzkvRyxFQUFHKy9HLEdBRy9Cdi9GLElBKzZCbURoYixNQUFNLEtBQU0wb0csS0FDcERsd0YsRUFBTzJnRyxRQUFVM2dHLEVBQU95akIsR0FBR2k0RSxZQUFjMTdGLEVBQU95akIsR0FBR3crRSxTQUlsRCxNQUFmamlHLEVBQU9zeUYsUUFDQTd1RSxHQUFHeStFLGNBQWNsaUcsRUFBT3lqQixHQUFHMCtFLGdCQUFrQm5pRyxFQUFPc3lGLE1BRzNEdHlGLEVBQU82aEcsYUFDQXRKLEdBQUdJLElBQVEsSUFJbEIzNEYsRUFBT3E0RixTQUE2QixJQUFoQnI0RixFQUFPcTRGLEdBQUdsekYsR0FBcUJuRixFQUFPcTRGLEdBQUdsekYsSUFBTXE3RixNQUNuRHhnRyxHQUFRd3hGLGlCQUFrQixRQStEOUM0USxHQUFtQixtSkFDbkJDLEdBQWdCLDhJQUVoQkMsR0FBVSx3QkFFVkMsS0FDQyxlQUFnQix3QkFDaEIsYUFBYyxvQkFDZCxlQUFnQixtQkFDaEIsYUFBYyxlQUFlLElBQzdCLFdBQVksZ0JBQ1osVUFBVyxjQUFjLElBQ3pCLGFBQWMsZUFDZCxXQUFZLFVBRVosYUFBYyxnQkFDZCxZQUFhLGVBQWUsSUFDNUIsVUFBVyxVQUlaQyxLQUNDLGdCQUFpQix3QkFDakIsZ0JBQWlCLHVCQUNqQixXQUFZLG1CQUNaLFFBQVMsY0FDVCxjQUFlLHNCQUNmLGNBQWUscUJBQ2YsU0FBVSxpQkFDVixPQUFRLGFBQ1IsS0FBTSxTQUdQQyxHQUFrQiwrQkFHYkMsR0FBYzFpRyxPQUNmMEUsRUFBRzZFLEVBR0hvNUYsRUFBV0MsRUFBWUMsRUFBWUMsRUFGbkN2NkcsRUFBU3lYLEVBQU9nakIsR0FDaEJuaEMsRUFBUXVnSCxHQUFpQjVnSCxLQUFLK0csSUFBVzg1RyxHQUFjN2dILEtBQUsrRyxNQUc1RDFHLEVBQU8sT0FDU21lLEdBQVEraUcsS0FBTSxFQUV6QnIrRixFQUFJLEVBQUc2RSxFQUFJZzVGLEdBQVNsN0csT0FBUXFkLEVBQUk2RSxFQUFHN0UsT0FDaEM2OUYsR0FBUzc5RixHQUFHLEdBQUdsakIsS0FBS0ssRUFBTSxJQUFLLEdBQ2xCMGdILEdBQVM3OUYsR0FBRyxNQUNNLElBQW5CNjlGLEdBQVM3OUYsR0FBRyxZQUlkLE1BQWRrK0YsZ0JBQ083UixVQUFXLE1BR2xCbHZHLEVBQU0sR0FBSSxLQUNMNmlCLEVBQUksRUFBRzZFLEVBQUlpNUYsR0FBU243RyxPQUFRcWQsRUFBSTZFLEVBQUc3RSxPQUNoQzg5RixHQUFTOTlGLEdBQUcsR0FBR2xqQixLQUFLSyxFQUFNLElBQUssSUFFakJBLEVBQU0sSUFBTSxLQUFPMmdILEdBQVM5OUYsR0FBRyxZQUluQyxNQUFkbStGLGdCQUNPOVIsVUFBVyxPQUlyQjRSLEdBQTJCLE1BQWRFLGdCQUNQOVIsVUFBVyxNQUdsQmx2RyxFQUFNLEdBQUksS0FDTnlnSCxHQUFROWdILEtBQUtLLEVBQU0sa0JBR1prdkcsVUFBVyxLQUZQLE1BTVo3dEUsR0FBSzAvRSxHQUFjQyxHQUFjLEtBQU9DLEdBQVksT0FDakM5aUcsVUFFbkIrd0YsVUFBVyxNQUt0QmlTLEdBQVUsbU1BRUxDLEdBQTBCQyxFQUFTQyxFQUFVQyxFQUFRQyxFQUFTQyxFQUFXQyxPQUMxRTcrRyxZQWVnQncrRyxPQUNoQmhLLEVBQU8za0UsU0FBUzJ1RSxFQUFTLFdBQ3pCaEssR0FBUSxHQUNELElBQU9BLEVBQ1BBLEdBQVEsSUFDUixLQUFPQSxFQUVYQSxFQXJCSHNLLENBQWVOLEdBQ2YvSSxHQUF5QjV4RixRQUFRNDZGLEdBQ2pDNXVFLFNBQVM2dUUsRUFBUSxJQUNqQjd1RSxTQUFTOHVFLEVBQVMsSUFDbEI5dUUsU0FBUyt1RSxFQUFXLFlBR3BCQyxLQUNPNzFHLEtBQUs2bUMsU0FBU2d2RSxFQUFXLEtBRzdCNytHLE1BZ0NQKytHLE9BQ0ksTUFDQyxPQUNBLFNBQ0EsU0FDQSxTQUNBLFNBQ0EsU0FDQSxTQUNBLFNBQ0EsY0FpQkFDLEdBQWtCMWpHLE9BQ25CbmUsRUFBUW1oSCxHQUFReGhILEtBQXVCd2UsRUFBT2dqQixHQTdDekMzaEMsUUFBUSxvQkFBcUIsS0FBS0EsUUFBUSxXQUFZLEtBQUtBLFFBQVEsU0FBVSxJQUFJQSxRQUFRLFNBQVUsUUE4Q3hHUSxFQUFPLEtBQ0g4aEgsRUFBY1YsR0FBMEJwaEgsRUFBTSxHQUFJQSxFQUFNLEdBQUlBLEVBQU0sR0FBSUEsRUFBTSxHQUFJQSxFQUFNLEdBQUlBLEVBQU0saUJBNUN0RitoSCxFQUFZQyxFQUFhN2pHLE1BQ3ZDNGpHLEVBQVksS0FFUkUsRUFBa0I1RyxHQUEyQjMwRixRQUFRcTdGLEdBQ3JERyxFQUFnQixJQUFJcDdHLEtBQUtrN0csRUFBWSxHQUFJQSxFQUFZLEdBQUlBLEVBQVksSUFBSTVCLFlBQ3pFNkIsSUFBb0JDLFdBQ0ovakcsR0FBUXd4RixpQkFBa0IsSUFDbkNULFVBQVcsR0FDWCxTQUdSLEVBa0NFaVQsQ0FBYW5pSCxFQUFNLEdBQUk4aEgsRUFBYTNqRyxZQUlsQ3U0RixHQUFLb0wsSUFDTHJSLGNBdkJVMlIsRUFBV0MsRUFBZ0JDLE1BQzVDRixTQUNPUixHQUFXUSxHQUNmLEdBQUlDLFNBRUEsTUFFSEUsRUFBSzd2RSxTQUFTNHZFLEVBQVcsSUFDekI1NUYsRUFBSTY1RixFQUFLLElBQUtsMUQsR0FBS2sxRCxFQUFLNzVGLEdBQUssV0FDdEIsR0FBSjJrQyxFQUFTM2tDLEVBY0Y4NUYsQ0FBZ0J4aUgsRUFBTSxHQUFJQSxFQUFNLEdBQUlBLEVBQU0sT0FFakQ0aEMsR0FBS3kzRSxHQUFjMXpHLE1BQU0sS0FBTXdZLEVBQU91NEYsTUFDdEM5MEUsR0FBR3krRSxjQUFjbGlHLEVBQU95akIsR0FBRzArRSxnQkFBa0JuaUcsRUFBT3N5RixRQUUzQ3R5RixHQUFRZ2pHLFNBQVUsU0FFM0JqUyxVQUFXLFdBZ0RqQnVULEdBQTBCdGtHLE1BRTNCQSxFQUFPa2pCLEtBQU9qTyxFQUFNc3ZGLFlBSXBCdmtHLEVBQU9rakIsS0FBT2pPLEVBQU11dkYsWUFJakJqTSxRQUNTdjRGLEdBQVFxeEYsT0FBUSxNQUk1QjNzRixFQUFHbS9GLEVBQWF4eEQsRUFBUXNqRCxFQUFPOE8sRUFEL0JsOEcsRUFBUyxHQUFLeVgsRUFBT2dqQixHQUVyQjBoRixFQUFlbjhHLEVBQU9sQixPQUN0QnM5RyxFQUF5QixRQUVwQjNPLEVBQWFoMkYsRUFBT2tqQixHQUFJbGpCLEVBQU95eUYsU0FBUzV3RyxNQUFNeXpHLE9BRWxENXdGLEVBQUksRUFBR0EsRUFBSTJ0QyxFQUFPaHJELE9BQVFxZCxNQUNuQjJ0QyxFQUFPM3RDLE9BQ0FuYyxFQUFPMUcsTUFBTSsxRyxHQUFzQmpDLEVBQU8zMUYsU0FBZ0IsU0FJM0R6WCxFQUFPb2EsT0FBTyxFQUFHcGEsRUFBT2dnQixRQUFRczdGLEtBQzlCeDhHLE9BQVMsS0FDRDJZLEdBQVE0a0csWUFBWWwzRyxLQUFLKzJHLEtBRXBDbDhHLEVBQU8wSixNQUFNMUosRUFBT2dnQixRQUFRczdGLEdBQWVBLEVBQVl4OEcsV0FDdEN3OEcsRUFBWXg4RyxRQUd0Q291RyxFQUFxQkUsSUFDakJrTyxJQUNnQjdqRyxHQUFRcXhGLE9BQVEsSUFHaEJyeEYsR0FBUSt4RixhQUFhcmtHLEtBQUtpb0csTUFFdEJBLEVBQU9rTyxFQUFhN2pHLElBRXZDQSxFQUFPNnhGLFVBQVlnUyxLQUNSN2pHLEdBQVEreEYsYUFBYXJrRyxLQUFLaW9HLEtBS2xDMzFGLEdBQVE4eEYsY0FBZ0I0UyxFQUFlQyxFQUNuRHA4RyxFQUFPbEIsT0FBUyxLQUNBMlksR0FBUTRrRyxZQUFZbDNHLEtBQUtuRixHQUl6Q3lYLEVBQU91NEYsR0FBR0ksS0FBUyxLQUNpQixJQUFwQy9ILEVBQWdCNXdGLEdBQVFneUYsU0FDeEJoeUYsRUFBT3U0RixHQUFHSSxJQUFRLE1BQ0YzNEYsR0FBUWd5RixhQUFVOXRHLEtBR3RCOGIsR0FBUWt4RixnQkFBa0JseEYsRUFBT3U0RixHQUFHdG1HLE1BQU0sS0FDMUMrTixHQUFRNHhGLFNBQVc1eEYsRUFBTzYrRixZQUVuQ3RHLEdBQUdJLEtBT1luSSxFQVBZeHdGLEVBQU95eUYsUUFPWG9TLEVBUG9CN2tHLEVBQU91NEYsR0FBR0ksSUFVNUMsT0FIb0IvRyxFQVArQjV4RixFQUFPNitGLFdBWS9EZ0csRUFFZ0IsTUFBdkJyVSxFQUFPc1UsYUFDQXRVLEVBQU9zVSxhQUFhRCxFQUFNalQsR0FDWCxNQUFmcEIsRUFBT29PLFNBRVBwTyxFQUFPb08sS0FBS2hOLEtBQ1BpVCxFQUFPLFFBQ1AsSUFFUEUsR0FBaUIsS0FBVEYsTUFDRixHQUVKQSxHQUdBQSxNQTFCSzdrRyxNQUNGQSxXQTdEUUEsV0FKSkEsT0FxRUl3d0YsRUFBUXFVLEVBQU1qVCxFQUNoQ21ULFdBNkZDQyxHQUFlaGxHLE9BQ2hCa3dGLEVBQVFsd0YsRUFBT2dqQixHQUNmdXRFLEVBQVN2d0YsRUFBT2tqQixZQUVidXZFLFFBQVV6eUYsRUFBT3l5RixTQUFXa04sR0FBVTMvRixFQUFPNmlCLElBRXRDLE9BQVZxdEUsUUFBOEJoc0csSUFBWHFzRyxHQUFrQyxLQUFWTCxFQUNwQytCLEdBQWVSLFdBQVcsS0FHaEIsaUJBQVZ2QixNQUNBbHRFLEdBQUtrdEUsRUFBUWx3RixFQUFPeXlGLFFBQVF3UyxTQUFTL1UsSUFHNUMyQyxFQUFTM0MsR0FDRixJQUFJeUMsRUFBT3VOLEdBQWNoUSxLQUN6QkUsRUFBT0YsS0FDUHpzRSxHQUFLeXNFLEVBQ0w1bEcsRUFBUWltRyxZQXRGV3Z3RixPQUMxQmtsRyxFQUNBQyxFQUVBQyxFQUNBMWdHLEVBQ0EyZ0csS0FFcUIsSUFBckJybEcsRUFBT2tqQixHQUFHNzdCLGdCQUNNMlksR0FBUTB4RixlQUFnQixTQUNqQ2p1RSxHQUFLLElBQUk5NkIsS0FBS2tyRixVQUlwQm52RSxFQUFJLEVBQUdBLEVBQUkxRSxFQUFPa2pCLEdBQUc3N0IsT0FBUXFkLE1BQ2YsSUFDRjB0RixLQUFlcHlGLEdBQ04sTUFBbEJBLEVBQU8yZ0csWUFDSUEsUUFBVTNnRyxFQUFPMmdHLFdBRXJCejlFLEdBQUtsakIsRUFBT2tqQixHQUFHeGUsTUFDQXdnRyxHQUVyQnBVLEVBQVFvVSxRQUtHdFUsRUFBZ0JzVSxHQUFZcFQsaUJBR3NCLEdBQWxEbEIsRUFBZ0JzVSxHQUFZblQsYUFBYTFxRyxTQUV6QzY5RyxHQUFZSSxNQUFRRCxHQUVqQixNQUFmRCxHQUF1QkMsRUFBZUQsT0FDeEJDLElBQ0RILE1BSWRsbEcsRUFBUW1sRyxHQUFjRCxJQThDQWxsRyxHQUNsQnV3RixLQUNtQnZ3RixZQVlUQSxPQUNqQmt3RixFQUFRbHdGLEVBQU9nakIsR0FDZm10RSxFQUFZRCxLQUNMenNFLEdBQUssSUFBSTk2QixLQUFLc3NCLEVBQU1yc0IsT0FDcEJ3bkcsRUFBT0YsS0FDUHpzRSxHQUFLLElBQUk5NkIsS0FBS3VuRyxFQUFNaDNGLFdBQ0gsaUJBQVZnM0YsV0F4UElsd0YsT0FDbEI4M0YsRUFBVTJLLEdBQWdCamhILEtBQUt3ZSxFQUFPZ2pCLElBRTFCLE9BQVo4MEUsTUFLVTkzRixJQUNVLElBQXBCQSxFQUFPK3dGLGtCQUNBL3dGLEVBQU8rd0YsWUFLQS93RixJQUNNLElBQXBCQSxFQUFPK3dGLGtCQUNBL3dGLEVBQU8rd0YsV0FNWndVLHdCQUF3QnZsRyxRQW5CbkJ5akIsR0FBSyxJQUFJOTZCLE1BQU1tdkcsRUFBUSxLQXFQYjkzRixHQUNWMVYsRUFBUTRsRyxNQUNScUksR0FBS3JqRyxFQUFJZzdGLEVBQU1qK0YsTUFBTSxHQUFJLFNBQVU4VSxVQUMvQnd0QixTQUFTeHRCLEVBQUssU0FFVC9HLElBQ1RqYixFQUFTbXJHLFlBdEVFbHdGLE9BQ2xCQSxFQUFPeWpCLFFBSVAvZSxFQUFJZ3dGLEVBQXFCMTBGLEVBQU9nakIsTUFDN0J1MUUsR0FBS3JqRyxHQUFLd1AsRUFBRXcwRixLQUFNeDBGLEVBQUUrMEYsTUFBTy8wRixFQUFFazVGLEtBQU9sNUYsRUFBRWxDLEtBQU1rQyxFQUFFbWdHLEtBQU1uZ0csRUFBRThnRyxPQUFROWdHLEVBQUUrZ0csT0FBUS9nRyxFQUFFZ2hHLGFBQWMsU0FBVTMrRixVQUM5RkEsR0FBT3d0QixTQUFTeHRCLEVBQUssU0FHaEIvRyxLQTZES0EsR0FDVjQ3RCxFQUFTczBCLEtBRVR6c0UsR0FBSyxJQUFJOTZCLEtBQUt1bkcsS0FFZnFWLHdCQUF3QnZsRyxJQTdCZEEsR0FHZjh3RixFQUFROXdGLE9BQ0Z5akIsR0FBSyxNQUdUempCLGFBMEJGMHdGLEdBQWtCUixFQUFPSyxFQUFRQyxFQUFRQyxFQUFRa1YsT0FsRWxEMTdGLEVBbUVBcEIsWUFFVyxJQUFYMm5GLElBQThCLElBQVhBLE1BQ1ZBLFNBQ0F0c0csSUFHUmEsRUFBU21yRyxhQTVpRktucEYsTUFDZnhqQixPQUFPcXZCLDJCQUM0QyxJQUEzQ3J2QixPQUFPcXZCLG9CQUFvQjdMLEdBQUsxZixXQUVwQzJlLE1BQ0NBLEtBQUtlLEtBQ0ZBLEVBQUk5a0IsZUFBZStqQixVQUNaLFNBR1IsRUFraUZhNC9GLENBQWMxVixJQUM3QjVsRyxFQUFRNGxHLElBQTJCLElBQWpCQSxFQUFNN29HLGlCQUNyQm5ELEtBSVZtdUcsa0JBQW1CLElBQ25Cc08sUUFBVTkzRixFQUFFMHBGLE9BQVNvVCxJQUNyQjlpRixHQUFLMnRFLElBQ0x4dEUsR0FBS2t0RSxJQUNMaHRFLEdBQUtxdEUsSUFDTHNCLFFBQVVwQixHQXJGUnhtRixFQUFNLElBQUkwb0YsRUFBT3VOLEdBQWM4RSxHQXVGWG44RixNQXRGaEJnNUYsYUFFQWhxRyxJQUFJLEVBQUcsT0FDUGdxRyxjQUFXMzlHLEdBR1orbEIsV0FtRkZ1M0YsR0FBYXRSLEVBQU9LLEVBQVFDLEVBQVFDLFVBQ2xDQyxHQUFpQlIsRUFBT0ssRUFBUUMsRUFBUUMsR0FBUSxLQXhRckQ4VSx3QkFBMEI5UixFQUM1QixpVkFJQSxTQUFVenpGLEtBQ0N5akIsR0FBSyxJQUFJOTZCLEtBQUtxWCxFQUFPZ2pCLElBQU1oakIsRUFBTzJnRyxRQUFVLE9BQVMsU0FLOUQ0RCxTQUFXLGVBR1hDLFNBQVcsaUJBNlBicUIsR0FBZXBTLEVBQ2YscUdBQ0EsZUFDUTdzRyxFQUFRNDZHLEdBQVloNkcsTUFBTSxLQUFNUyxrQkFDaEN4SCxLQUFLcXdHLFdBQWFscUcsRUFBTWtxRyxVQUNqQmxxRyxFQUFRbkcsS0FBT0EsS0FBT21HLEVBRXRCcXJHLE1BS2Y2VCxHQUFlclMsRUFDZixxR0FDQSxlQUNRN3NHLEVBQVE0NkcsR0FBWWg2RyxNQUFNLEtBQU1TLGtCQUNoQ3hILEtBQUtxd0csV0FBYWxxRyxFQUFNa3FHLFVBQ2pCbHFHLEVBQVFuRyxLQUFPQSxLQUFPbUcsRUFFdEJxckcsZUFVVjhULEdBQU9yOUYsRUFBSXM5RixPQUNaLzdGLEVBQUt2RixLQUNjLElBQW5Cc2hHLEVBQVEzK0csUUFBZ0JpRCxFQUFRMDdHLEVBQVEsUUFDOUJBLEVBQVEsS0FFakJBLEVBQVEzK0csY0FDRm02RyxXQUVMd0UsRUFBUSxHQUNUdGhHLEVBQUksRUFBR0EsRUFBSXNoRyxFQUFRMytHLFNBQVVxZCxFQUN6QnNoRyxFQUFRdGhHLEdBQUdvc0YsWUFBYWtWLEVBQVF0aEcsR0FBR2dFLEdBQUl1QixPQUNsQys3RixFQUFRdGhHLFdBR2Z1RixNQW9CUGc4RixJQUFZLE9BQVEsVUFBVyxRQUFTLE9BQVEsTUFBTyxPQUFRLFNBQVUsU0FBVSx3QkFnQzlFQyxHQUFVbjZELE9BQ1g4b0QsRUFBa0JILEVBQXFCM29ELEdBQ3ZDbzZELEVBQVF0UixFQUFnQnFFLE1BQVEsRUFDaENrTixFQUFXdlIsRUFBZ0J3UixTQUFXLEVBQ3RDeE0sRUFBU2hGLEVBQWdCNEUsT0FBUyxFQUNsQzZNLEVBQVF6UixFQUFnQmdILE1BQVFoSCxFQUFnQjBSLFNBQVcsRUFDM0RDLEVBQU8zUixFQUFnQitJLEtBQU8sRUFDOUJRLEVBQVF2SixFQUFnQmdRLE1BQVEsRUFDaEN2RyxFQUFVekosRUFBZ0IyUSxRQUFVLEVBQ3BDL0csRUFBVTVKLEVBQWdCNFEsUUFBVSxFQUNwQ2dCLEVBQWU1UixFQUFnQjZRLGFBQWUsT0FFN0MzVSxrQkExQ2dCeG1GLE9BQ2hCLElBQUloa0IsS0FBT2drQixNQUMyQixJQUFqQ2hDLEdBQVFqa0IsS0FBSzJoSCxHQUFVMS9HLElBQTBCLE1BQVZna0IsRUFBRWhrQixJQUFpQm9oQixNQUFNNEMsRUFBRWhrQixXQUM3RCxVQUlYbWdILEdBQWlCLEVBQ1poaUcsRUFBSSxFQUFHQSxFQUFJdWhHLEdBQVM1K0csU0FBVXFkLEtBQy9CNkYsRUFBRTA3RixHQUFTdmhHLElBQUssSUFDWmdpRyxTQUNPLEVBRVByL0YsV0FBV2tELEVBQUUwN0YsR0FBU3ZoRyxPQUFTcXVGLEVBQU14b0YsRUFBRTA3RixHQUFTdmhHLFVBQy9CLFVBS3RCLEVBdUJTaWlHLENBQWdCOVIsUUFHM0IrUixlQUFpQkgsRUFDUixJQUFWaEksRUFDVSxNQUNGLE1BQU8sR0FBSyxRQUduQm9JLE9BQVNMLEVBQ0YsRUFBUkYsT0FJQ1EsU0FBV2pOLEVBQ0QsRUFBWHVNLEVBQ1EsR0FBUkQsT0FFQ3I2RSxjQUVBMm1FLFFBQVVrTixVQUVWb0gsbUJBR0FDLEdBQVlqZ0csVUFDVkEsYUFBZW0vRixZQUdqQmUsR0FBVTFwRyxVQUNYQSxFQUFTLEdBQ3lCLEVBQTNCM1YsS0FBS3dxRSxPQUFPLEVBQUk3MEQsR0FFaEIzVixLQUFLd3FFLE1BQU03MEQsWUFNakJ2TCxHQUFRMmpHLEVBQU91UixLQUNMdlIsRUFBTyxFQUFHLEVBQUcsZUFDcEIzakcsRUFBU3ZSLEtBQUswbUgsWUFDZGhyQyxFQUFPLFdBQ1BucUUsRUFBUyxPQUNDQSxJQUNILEtBRUptcUUsRUFBTzg0QixLQUFZampHLEVBQVMsSUFBSyxHQUFLazFHLEVBQVlqUyxJQUFZampHLEVBQVUsR0FBSSxRQUlwRixJQUFLLFFBQ0wsS0FBTSxPQUlDLElBQU1xbEcsT0FDTixLQUFNQSxRQUNMLElBQUssTUFBTyxTQUFVbkgsRUFBT2hvRyxFQUFPOFgsS0FDeEMyZ0csU0FBVSxJQUNWck8sS0FBTzhVLEdBQWlCL1AsR0FBa0JuSCxTQVFqRG1YLEdBQWMsMkJBRVRELEdBQWlCRSxFQUFTLytHLE9BQzNCd2IsR0FBV3hiLEdBQVUsSUFBSTFHLE1BQU15bEgsTUFFbkIsT0FBWnZqRyxTQUNPLFNBR1B3akcsRUFBVXhqRyxFQUFRQSxFQUFRMWMsT0FBUyxPQUNuQ21nSCxHQUFXRCxFQUFRLElBQUkxbEgsTUFBTXdsSCxNQUFpQixJQUFLLEVBQUcsR0FDdEQvSSxFQUF1QixHQUFYa0osRUFBTSxHQUFXelUsRUFBTXlVLEVBQU0sV0FFMUIsSUFBWmxKLEVBQ0wsRUFDYSxNQUFia0osRUFBTSxHQUFhbEosR0FBV0EsV0FJM0JtSixHQUFnQnZYLEVBQU9wcUUsT0FDeEI3YixFQUFLeTlGLFNBQ0w1aEYsRUFBTXlzRSxVQUNBenNFLEVBQU1wQixXQUNKbXVFLEVBQVMzQyxJQUFVRSxFQUFPRixHQUFTQSxFQUFNaDNGLFVBQVlzb0csR0FBWXRSLEdBQU9oM0YsV0FBYStRLEVBQUkvUSxZQUU3RnVxQixHQUFHa2tGLFFBQVExOUYsRUFBSXdaLEdBQUd2cUIsVUFBWXd1RyxLQUM1QjlVLGFBQWEzb0YsR0FBSyxHQUNqQkEsR0FFQXUzRixHQUFZdFIsR0FBTzBYLGlCQUl6QkMsR0FBZXQ5RixVQUdnQyxJQUE1QzNpQixLQUFLd3FFLE1BQU03bkQsRUFBRWtaLEdBQUdxa0Ysb0JBQXNCLGFBcUp6Q0MsYUFDRXRuSCxLQUFLcXdHLFdBQVlyd0csS0FBSzh4RyxRQUEyQixJQUFqQjl4RyxLQUFLK3hHLFVBL0kxQ0ksYUFBZSxpQkFtSmpCb1YsR0FBYywyREFLZEMsR0FBVywrS0FFTkMsR0FBZ0JoWSxFQUFPM3BHLE9BSXhCNDFFLEVBQ0F2eUQsRUFDQXUrRixFQWlGbUIxL0UsRUFBTTdoQyxFQUN6QnFqQixFQXZGQThoQyxFQUFXbWtELElBRUgsWUFLUjhXLEdBQVc5VyxTQUVGQSxFQUFNMFcsZ0JBQ04xVyxFQUFNMlcsUUFDTjNXLEVBQU00VyxTQUVSbHJDLEVBQVNzMEIsU0FFWjNwRyxJQUNTQSxHQUFPMnBHLElBRVB1VyxhQUFldlcsSUFFbEJydUcsRUFBUW1tSCxHQUFZeG1ILEtBQUswdUcsT0FDZCxNQUFicnVHLEVBQU0sSUFBZSxFQUFJLE9BRXhCLElBQ0FreEcsRUFBTWx4RyxFQUFNNjJHLEtBQWlDdjhCLElBQzdDNDJCLEVBQU1seEcsRUFBTTgyRyxLQUFpQ3g4QixJQUM3QzQyQixFQUFNbHhHLEVBQU0rMkcsS0FBaUN6OEIsSUFDN0M0MkIsRUFBTWx4RyxFQUFNZzNHLEtBQWlDMThCLEtBQzdDNDJCLEVBQU1rVSxHQUE4QixJQUFyQnBsSCxFQUFNaTNHLE1BQXdCMzhCLEtBRTVDdDZFLEVBQVFvbUgsR0FBU3ptSCxLQUFLMHVHLE9BQ1gsTUFBYnJ1RyxFQUFNLElBQWUsRUFBSSxPQUV6QnVtSCxHQUFTdm1ILEVBQU0sR0FBSXM2RSxLQUNuQmlzQyxHQUFTdm1ILEVBQU0sR0FBSXM2RSxLQUNuQmlzQyxHQUFTdm1ILEVBQU0sR0FBSXM2RSxLQUNuQmlzQyxHQUFTdm1ILEVBQU0sR0FBSXM2RSxLQUNuQmlzQyxHQUFTdm1ILEVBQU0sR0FBSXM2RSxLQUNuQmlzQyxHQUFTdm1ILEVBQU0sR0FBSXM2RSxLQUNuQmlzQyxHQUFTdm1ILEVBQU0sR0FBSXM2RSxLQUVSLE1BQVpwd0IsT0FFb0IscUJBQWJBLHNCQUFBQSxNQUEwQixTQUFVQSxHQUFZLE9BQVFBLEtBMkNuRHRqQixFQTFDUys0RSxHQUFZejFELEVBQVN4M0IsTUEwQ3hCM3RCLEVBMUMrQjQ2RyxHQUFZejFELEVBQVNqaUMsTUE0QzNFMmUsRUFBS3FvRSxXQUFhbHFHLEVBQU1rcUcsYUFJdEIyVyxHQUFnQjdnSCxFQUFPNmhDLEdBQzNCQSxFQUFLNC9FLFNBQVN6aEgsS0FDUjBoSCxHQUEwQjcvRSxFQUFNN2hDLE9BRWhDMGhILEdBQTBCMWhILEVBQU82aEMsSUFDbkNnK0UsY0FBZ0J4OEYsRUFBSXc4RixlQUNwQjVNLFFBQVU1dkYsRUFBSTR2RixRQUdmNXZGLElBWkt3OEYsYUFBYyxFQUFHNU0sT0FBUSxVQTFDeEJrSSxHQUFLb0csRUFBUTFCLGVBQ2IzRSxFQUFJcUcsRUFBUXRPLFVBR25CLElBQUlxTSxHQUFTbjZELEdBRWZpN0QsR0FBVzlXLElBQVVHLEVBQVdILEVBQU8sZUFDbkN1QyxRQUFVdkMsRUFBTXVDLFNBR2pCN29GLFdBTUZ3K0YsR0FBVUcsRUFBS3BzQyxPQUloQmx5RCxFQUFNcytGLEdBQU9saEcsV0FBV2toRyxFQUFJbG5ILFFBQVEsSUFBSyxhQUVyQ3NtQixNQUFNc0MsR0FBTyxFQUFJQSxHQUFPa3lELFdBRzNCbXNDLEdBQTBCNy9FLEVBQU03aEMsT0FDakNxakIsY0FFQTR2RixPQUFTanpHLEVBQU02eUcsUUFBVWh4RSxFQUFLZ3hFLFFBQ0MsSUFBOUI3eUcsRUFBTXN5RyxPQUFTendFLEVBQUt5d0UsUUFDckJ6d0UsRUFBSy9ELFFBQVE3c0IsSUFBSW9TLEVBQUk0dkYsT0FBUSxLQUFLMk8sUUFBUTVoSCxNQUN4Q3FqQixFQUFJNHZGLFNBR040TSxjQUFnQjcvRyxHQUFVNmhDLEVBQUsvRCxRQUFRN3NCLElBQUlvUyxFQUFJNHZGLE9BQVEsS0FFcEQ1dkYsV0FzQkZ3K0YsR0FBWUMsRUFBVzVuSCxVQUNyQixTQUFVc21CLEVBQUt1aEcsT0FDVHI1RSxTQUVNLE9BQVhxNUUsR0FBb0JoaEcsT0FBT2doRyxPQUNYN25ILEVBQU0sWUFBY0EsRUFBUSx1REFBeURBLEVBQU8sb0dBRXRHc21CLEVBQUtBLEVBQU11aEcsRUFBUUEsRUFBU3I1RSxNQUsxQjd1QyxLQUROeW5ILEtBRGUsaUJBQVI5Z0csR0FBb0JBLEVBQU1BLEVBQ2J1aEcsR0FDSEQsR0FDaEJqb0gsZUFJTm1vSCxHQUFhM1MsRUFBS2xxRCxFQUFVODhELEVBQVVqVyxPQUN2QzZULEVBQWUxNkQsRUFBUzY2RCxjQUN4QkosRUFBT1MsR0FBU2w3RCxFQUFTODZELE9BQ3pCaE4sRUFBU29OLEdBQVNsN0QsRUFBUys2RCxTQUUxQjdRLEVBQUluRixjQUtzQixNQUFoQjhCLEdBQThCQSxFQUV6Q2lILE1BQ1M1RCxFQUFLOWhHLEdBQUk4aEcsRUFBSyxTQUFXNEQsRUFBU2dQLEdBRTNDckMsTUFDTXZRLEVBQUssT0FBUTloRyxHQUFJOGhHLEVBQUssUUFBVXVRLEVBQU9xQyxHQUU3Q3BDLEtBQ0loakYsR0FBR2trRixRQUFRMVIsRUFBSXh5RSxHQUFHdnFCLFVBQVl1dEcsRUFBZW9DLEdBRWpEalcsS0FDTUEsYUFBYXFELEVBQUt1USxHQUFRM00sT0FwRnpCbnhGLEdBQUt3OUYsR0FBU3JpSCxhQUNkaWxILDBCQXRWSlosR0FBZXIwQixVQTZhdEJoOEUsR0FBVzR3RyxHQUFZLEVBQUcsT0FDMUJNLEdBQVdOLElBQWEsRUFBRyxxQkEwSHRCTyxHQUFXMS9GLEVBQUdZLE9BS2YrK0YsRUFBU0MsRUFIVEMsRUFBMEMsSUFBdkJqL0YsRUFBRWd2RixPQUFTNXZGLEVBQUU0dkYsU0FBaUJodkYsRUFBRXV2RixRQUFVbndGLEVBQUVtd0YsV0FFdERud0YsRUFBRW9iLFFBQVE3c0IsSUFBSXN4RyxFQUFnQixpQkFHdkNqL0YsRUFBSWsvRixFQUFTLEtBQ0g5L0YsRUFBRW9iLFFBQVE3c0IsSUFBSXN4RyxFQUFpQixFQUFHLGFBRWxDai9GLEVBQUlrL0YsSUFBV0EsRUFBU0gsT0FFeEIzL0YsRUFBRW9iLFFBQVE3c0IsSUFBSXN4RyxFQUFpQixFQUFHLGFBRWxDai9GLEVBQUlrL0YsSUFBV0gsRUFBVUcsTUFJOUJELEVBQWlCRCxJQUFXLFdBNkZoQzFZLEdBQVFqcUcsT0FDVDhpSCxjQUVRbmxILElBQVJxQyxFQUNPOUYsS0FBS2d5RyxRQUFRK00sT0FHQyxTQURMRyxHQUFVcDVHLFdBRWpCa3NHLFFBQVU0VyxHQUVaNW9ILFFBcEdUNm9ILGNBQWdCLHlCQUNoQkMsaUJBQW1CLDZCQXVHckJDLEdBQU8vVixFQUNQLGtKQUNBLFNBQVVsdEcsZUFDTXJDLElBQVJxQyxFQUNPOUYsS0FBS3ExRyxhQUVMcjFHLEtBQUsrdkcsT0FBT2pxRyxjQUt0QnV2RyxZQUNFcjFHLEtBQUtneUcsWUFHWmdYLEdBQWdCLElBQ2hCQyxHQUFnQixHQUFLRCxHQUNyQkUsR0FBYyxHQUFLRCxHQUNuQkUsR0FBbUIsUUFBd0JELFlBR3RDRSxHQUFNQyxFQUFVQyxVQUNiRCxFQUFXQyxFQUFVQSxHQUFXQSxXQUduQ0MsR0FBaUJ2L0MsRUFBR2xnRCxFQUFHcEYsVUFFeEJzbEQsRUFBSSxLQUFPQSxHQUFLLEVBRVQsSUFBSTloRSxLQUFLOGhFLEVBQUksSUFBS2xnRCxFQUFHcEYsR0FBS3lrRyxHQUUxQixJQUFJamhILEtBQUs4aEUsRUFBR2xnRCxFQUFHcEYsR0FBR2pNLG1CQUl4Qit3RyxHQUFleC9DLEVBQUdsZ0QsRUFBR3BGLFVBRXRCc2xELEVBQUksS0FBT0EsR0FBSyxFQUVUOWhFLEtBQUt3eUcsSUFBSTF3QyxFQUFJLElBQUtsZ0QsRUFBR3BGLEdBQUt5a0csR0FFMUJqaEgsS0FBS3d5RyxJQUFJMXdDLEVBQUdsZ0QsRUFBR3BGLFlBdUtyQitrRyxHQUF3QnZVLEVBQU83aEYsS0FDckIsR0FBSTZoRixFQUFPQSxFQUFNdHVHLFFBQVMsRUFBR3lzQixZQStEdkNxMkYsR0FBcUJqYSxFQUFPMkwsRUFBTUMsRUFBU1AsRUFBS0MsT0FDakQ0TyxTQUNTLE1BQVRsYSxFQUNPa00sR0FBVzM3RyxLQUFNODZHLEVBQUtDLEdBQUt0QyxRQUVwQm9ELEdBQVlwTSxFQUFPcUwsRUFBS0MsR0FDbENLLEVBQU91TyxNQUNBQSxZQU1DbEosRUFBVXJGLEVBQU1DLEVBQVNQLEVBQUtDLE9BQzFDNk8sRUFBZ0J6TyxHQUFtQnNGLEVBQVVyRixFQUFNQyxFQUFTUCxFQUFLQyxHQUNqRWg1RixFQUFPMDRGLEdBQWNtUCxFQUFjblIsS0FBTSxFQUFHbVIsRUFBY2xPLHVCQUV6RGpELEtBQUsxMkYsRUFBSzQ0Rix1QkFDVjNCLE1BQU1qM0YsRUFBS28rRixvQkFDWHArRixLQUFLQSxFQUFLcStGLGNBQ1JwZ0gsTUFYZTZELEtBQUs3RCxLQUFNeXZHLEVBQU8yTCxFQUFNQyxFQUFTUCxFQUFLQyxNQWpGakQsR0FBSSxLQUFNLEdBQUksRUFBRyxrQkFDckIvNkcsS0FBS3lnSCxXQUFhLFFBR2QsR0FBSSxLQUFNLEdBQUksRUFBRyxrQkFDckJ6Z0gsS0FBSzZwSCxjQUFnQixTQU9ULE9BQVksZUFDWixRQUFZLGVBQ1osT0FBUyxrQkFDVCxRQUFTLGlCQUluQixXQUFZLFFBQ1osY0FBZSxRQUlaLFdBQVksS0FDWixjQUFlLE1BS2pCLElBQVVuVCxPQUNWLElBQVVBLE9BQ1YsS0FBVVAsRUFBV0osTUFDckIsS0FBVUksRUFBV0osTUFDckIsT0FBVVEsR0FBV04sTUFDckIsT0FBVU0sR0FBV04sTUFDckIsUUFBVU8sR0FBV04sTUFDckIsUUFBVU0sR0FBV04sT0FFaEIsT0FBUSxRQUFTLE9BQVEsU0FBVSxTQUFVekcsRUFBTzJMLEVBQU03N0YsRUFBUTIxRixLQUM1RUEsRUFBTWh6RixPQUFPLEVBQUcsSUFBTW93RixFQUFNN0MsU0FHbEIsS0FBTSxNQUFPLFNBQVVBLEVBQU8yTCxFQUFNNzdGLEVBQVEyMUYsS0FDdERBLEdBQVMxZ0YsRUFBTW1rRixrQkFBa0JsSixPQXFEM0IsSUFBSyxFQUFHLEtBQU0sYUFJaEIsVUFBVyxPQUlSLFVBQVcsTUFJYixJQUFLcUcsTUFDTCxJQUFLLFNBQVVyRyxFQUFPaG9HLEtBQzFCdXdHLElBQThCLEdBQXBCMUYsRUFBTTdDLEdBQVMsT0FXcEIsS0FBTSxLQUFNLEdBQUksS0FBTSxVQUl4QixPQUFRLE9BR0wsT0FBUSxNQUlWLElBQU0wRyxNQUNOLEtBQU1BLEVBQVdKLE1BQ2pCLEtBQU0sU0FBVW1CLEVBQVVuSCxVQUU3Qm1ILEVBQ0puSCxFQUFPK1oseUJBQTJCL1osRUFBT2dhLGNBQzFDaGEsRUFBT2lhLHFDQUdFLElBQUssTUFBTy9SLE9BQ2IsS0FBTSxTQUFVeEksRUFBT2hvRyxLQUMzQnd3RyxJQUFRM0YsRUFBTTdDLEVBQU1ydUcsTUFBTSswRyxHQUFXLFVBSzNDOFQsR0FBbUJwUixHQUFXLFFBQVEsS0FJM0IsT0FBUSxPQUFRLEdBQUksT0FBUSxlQUk5QixZQUFhLFNBR1YsWUFBYSxNQUlmLE1BQVF2QyxPQUNSLE9BQVFOLE9BQ1AsTUFBTyxRQUFTLFNBQVV2RyxFQUFPaG9HLEVBQU84WCxLQUM1QzRoRyxXQUFhN08sRUFBTTdDLE9BY2YsS0FBTSxLQUFNLEdBQUksRUFBRyxZQUlyQixTQUFVLE9BSVAsU0FBVSxPQUlaLElBQU0wRyxNQUNOLEtBQU1BLEVBQVdKLE9BQ2hCLElBQUssTUFBT29DLFFBSXZCK1IsR0FBZXJSLEdBQVcsV0FBVyxLQUkxQixLQUFNLEtBQU0sR0FBSSxFQUFHLFlBSXJCLFNBQVUsT0FJUCxTQUFVLE9BSVosSUFBTTFDLE1BQ04sS0FBTUEsRUFBV0osT0FDaEIsSUFBSyxNQUFPcUMsUUFtRHZCbEQsR0EvQ0FpVixHQUFldFIsR0FBVyxXQUFXLFNBSTFCLElBQUssRUFBRyxFQUFHLG9CQUNaNzRHLEtBQUtpbEgsY0FBZ0IsU0FHcEIsR0FBSSxLQUFNLEdBQUksRUFBRyxvQkFDbEJqbEgsS0FBS2lsSCxjQUFnQixRQUdwQixHQUFJLE1BQU8sR0FBSSxFQUFHLGlCQUNsQixHQUFJLE9BQVEsR0FBSSxFQUFHLGtCQUNGLEdBQXJCamxILEtBQUtpbEgsa0JBRUQsR0FBSSxRQUFTLEdBQUksRUFBRyxrQkFDSCxJQUFyQmpsSCxLQUFLaWxILGtCQUVELEdBQUksU0FBVSxHQUFJLEVBQUcsa0JBQ0osSUFBckJqbEgsS0FBS2lsSCxrQkFFRCxHQUFJLFVBQVcsR0FBSSxFQUFHLGtCQUNMLElBQXJCamxILEtBQUtpbEgsa0JBRUQsR0FBSSxXQUFZLEdBQUksRUFBRyxrQkFDTixJQUFyQmpsSCxLQUFLaWxILGtCQUVELEdBQUksWUFBYSxHQUFJLEVBQUcsa0JBQ1AsSUFBckJqbEgsS0FBS2lsSCxrQkFNSCxjQUFlLFFBSVosY0FBZSxPQUlqQixJQUFRM08sR0FBV1IsTUFDbkIsS0FBUVEsR0FBV1AsTUFDbkIsTUFBUU8sR0FBV04sR0FHNUJkLEdBQVEsT0FBUUEsR0FBTXR1RyxRQUFVLEVBQUdzdUcsSUFBUyxPQUMvQkEsR0FBT3VCLGFBR2hCMlQsR0FBUTNhLEVBQU9ob0csS0FDZDR3RyxJQUFlL0YsRUFBdUIsS0FBaEIsS0FBTzdDLFFBR2xDeUYsR0FBUSxJQUFLQSxHQUFNdHVHLFFBQVUsRUFBR3N1RyxJQUFTLE9BQzVCQSxHQUFPa1YsUUFJckJDLEdBQW9CeFIsR0FBVyxnQkFBZ0IsS0FJcEMsSUFBTSxFQUFHLEVBQUcsY0FDWixLQUFNLEVBQUcsRUFBRyxnQkFZdkI1cUcsR0FBUWlrRyxFQUFPOXVHLG1CQXNGVmtuSCxHQUFvQnhpSCxVQUNsQkEsS0FyRkxzUCxJQUFvQkEsTUFDcEJtekcsa0JBanVCZUMsRUFBTUMsT0FHbkJ0aUgsRUFBTXFpSCxHQUFRekosS0FDZDJKLEVBQU0xRCxHQUFnQjcrRyxFQUFLbkksTUFBTTJxSCxRQUFRLE9BQ3pDN2EsRUFBU3Q3RSxFQUFNbzJGLGVBQWU1cUgsS0FBTTBxSCxJQUFRLFdBRTVDalYsRUFBU2dWLElBQVk3bEgsRUFBVzZsSCxFQUFRM2EsSUFBVzJhLEVBQVEzYSxHQUFRanNHLEtBQUs3RCxLQUFNbUksR0FBT3NpSCxFQUFRM2EsV0FFMUY5dkcsS0FBSzh2RyxPQUFPMkYsR0FBVXoxRyxLQUFLcTFHLGFBQWFrVixTQUFTemEsRUFBUTl2RyxLQUFNK2dILEdBQVk1NEcsU0F5dEJoRjg3Qix3QkFydEJLLElBQUlpdUUsRUFBT2x5RyxVQXN0QmhCaW5ILGNBdnBCU3hYLEVBQU91RSxFQUFPNlcsT0FDckJDLEVBQ0FDLEVBQ0F0VixNQUVDejFHLEtBQUtxd0csaUJBQ0NqZCxXQUdKNHpCLEdBQWdCdlgsRUFBT3p2RyxPQUVwQnF3RyxpQkFDQ2pkLGFBR3lDLEtBQXZDMDNCLEVBQUtwRSxZQUFjMW1ILEtBQUswbUgsZUFFN0IzUyxFQUFlQyxRQUdkLFNBQWlCdVUsR0FBVXZvSCxLQUFNOHFILEdBQVEsR0FBSSxVQUM3QyxVQUFrQnZDLEdBQVV2b0gsS0FBTThxSCxHQUFPLFVBQ3pDLFlBQW9CdkMsR0FBVXZvSCxLQUFNOHFILEdBQVEsRUFBRyxVQUMvQyxZQUFvQjlxSCxLQUFPOHFILEdBQVEsSUFBSyxVQUN4QyxZQUFvQjlxSCxLQUFPOHFILEdBQVEsSUFBSyxVQUN4QyxVQUFrQjlxSCxLQUFPOHFILEdBQVEsS0FBTSxVQUN2QyxTQUFpQjlxSCxLQUFPOHFILEVBQU9DLEdBQWEsTUFBTyxVQUNuRCxVQUFrQi9xSCxLQUFPOHFILEVBQU9DLEdBQWEsT0FBUSxnQkFDeEMvcUgsS0FBTzhxSCxTQUd0QkQsRUFBVXBWLEVBQVNwRCxFQUFTb0QsT0F5bkJqQ3VWLGVBNVpVaFgsT0FDUndXLFVBRVUvbUgsT0FETnN3RyxFQUFlQyxLQUNjLGdCQUFWQSxJQUE0QmgwRyxLQUFLcXdHLGlCQUNqRHJ3RyxTQUdQaXJILEVBQWNqckgsS0FBSzh4RyxPQUFTMFgsR0FBaUJELFVBRXpDdlYsT0FDQyxTQUNNaVgsRUFBWWpySCxLQUFLeTRHLE9BQVMsRUFBRyxFQUFHLEdBQUssWUFFM0MsWUFDTXdTLEVBQVlqckgsS0FBS3k0RyxPQUFRejRHLEtBQUtnNUcsUUFBVWg1RyxLQUFLZzVHLFFBQVUsRUFBSSxFQUFHLEdBQUssWUFFekUsVUFDTWlTLEVBQVlqckgsS0FBS3k0RyxPQUFRejRHLEtBQUtnNUcsUUFBVSxFQUFHLEdBQUssWUFFdEQsU0FDTWlTLEVBQVlqckgsS0FBS3k0RyxPQUFRejRHLEtBQUtnNUcsUUFBU2g1RyxLQUFLK2hCLE9BQVMvaEIsS0FBS3E3RyxVQUFZLEdBQUssWUFFakYsWUFDTTRQLEVBQVlqckgsS0FBS3k0RyxPQUFRejRHLEtBQUtnNUcsUUFBU2g1RyxLQUFLK2hCLFFBQVUvaEIsS0FBS2tySCxhQUFlLEdBQUssR0FBSyxZQUUxRixVQUNBLFNBQ01ELEVBQVlqckgsS0FBS3k0RyxPQUFRejRHLEtBQUtnNUcsUUFBU2g1RyxLQUFLK2hCLE9BQVMsR0FBSyxZQUVoRSxTQUNNL2hCLEtBQUtnakMsR0FBR3ZxQixhQUNQeXdHLEdBQWNFLEdBQU1vQixHQUFReHFILEtBQUs4eEcsT0FBUyxFQUFJOXhHLEtBQUswbUgsWUFBY3VDLElBQWdCQyxJQUFlLFlBRXZHLFdBQ01scEgsS0FBS2dqQyxHQUFHdnFCLGFBQ1B3d0csR0FBZ0JHLEdBQU1vQixFQUFNdkIsSUFBaUIsWUFFcEQsV0FDTWpwSCxLQUFLZ2pDLEdBQUd2cUIsYUFDUHV3RyxHQUFnQkksR0FBTW9CLEVBQU14QixJQUFpQixjQUl4RGhtRixHQUFHa2tGLFFBQVFzRCxLQUNWclksYUFBYW55RyxNQUFNLEdBQ2xCQSxTQWdYTDh2RyxnQkEvaUJXcWIsR0FDUkEsTUFDYW5ySCxLQUFLc25ILFFBQVU5eUYsRUFBTXMwRixpQkFBbUJ0MEYsRUFBTXEwRixtQkFFNURwVCxFQUFTSCxFQUFhdDFHLEtBQU1tckgsVUFDekJuckgsS0FBS3ExRyxhQUFhK1YsV0FBVzNWLE9BMmlCbEMzaEYsY0F4aUJTMDJGLEVBQU1hLFVBQ2JyckgsS0FBS3F3RyxZQUNDK0IsRUFBU29ZLElBQVNBLEVBQUtuYSxXQUN4QjBRLEdBQVl5SixHQUFNbmEsV0FDaEJvWCxJQUFnQnArRixHQUFJcnBCLEtBQU04ekIsS0FBTTAyRixJQUFPemEsT0FBTy92RyxLQUFLK3ZHLFVBQVV1YixVQUFVRCxHQUV2RXJySCxLQUFLcTFHLGFBQWFNLGtCQW1pQjNCNFYsaUJBL2hCWUYsVUFDUHJySCxLQUFLOHpCLEtBQUtpdEYsS0FBZXNLLE9BK2hCOUJoaUcsWUE1aEJPbWhHLEVBQU1hLFVBQ1hyckgsS0FBS3F3RyxZQUNDK0IsRUFBU29ZLElBQVNBLEVBQUtuYSxXQUN4QjBRLEdBQVl5SixHQUFNbmEsV0FDaEJvWCxJQUFnQjN6RixLQUFNOXpCLEtBQU1xcEIsR0FBSW1oRyxJQUFPemEsT0FBTy92RyxLQUFLK3ZHLFVBQVV1YixVQUFVRCxHQUV2RXJySCxLQUFLcTFHLGFBQWFNLGtCQXVoQjNCNlYsZUFuaEJVSCxVQUNMcnJILEtBQUtxcEIsR0FBRzAzRixLQUFlc0ssT0FtaEI1QjMzRyxhQXhpR2NzZ0csVUFFWnB2RyxFQUFXNUUsT0FEUCt6RyxFQUFlQyxLQUVaaDBHLEtBQUtnMEcsS0FFVGgwRyxTQW9pR0x5ckgsNEJBdlVLdGIsRUFBZ0Jud0csTUFBTTJ3RyxhQXdVM0JvWCxpQkE1dEJZdFksRUFBT3VFLE9BQ2pCMFgsRUFBYXRaLEVBQVMzQyxHQUFTQSxFQUFRc1IsR0FBWXRSLFlBQ2pEenZHLEtBQUtxd0csWUFBYXFiLEVBQVdyYixhQUlyQixtQkFETjBELEVBQWVDLElBQVUsZUFFdEJoMEcsS0FBS3lZLFVBQVlpekcsRUFBV2p6RyxVQUU1Qml6RyxFQUFXanpHLFVBQVl6WSxLQUFLaWtDLFFBQVEwbUYsUUFBUTNXLEdBQU92N0YsZUFvdEI1RG12RyxrQkFodEJhblksRUFBT3VFLE9BQ2xCMFgsRUFBYXRaLEVBQVMzQyxHQUFTQSxFQUFRc1IsR0FBWXRSLFlBQ2pEenZHLEtBQUtxd0csWUFBYXFiLEVBQVdyYixhQUlyQixtQkFETjBELEVBQWVDLElBQVUsZUFFdEJoMEcsS0FBS3lZLFVBQVlpekcsRUFBV2p6RyxVQUU1QnpZLEtBQUtpa0MsUUFBUSttRixNQUFNaFgsR0FBT3Y3RixVQUFZaXpHLEVBQVdqekcsZUF3c0IxRGt6RyxtQkFwc0JjNzNGLEVBQU16SyxFQUFJMnFGLEVBQU80WCxPQUM3QkMsRUFBWXpaLEVBQVN0K0UsR0FBUUEsRUFBT2l0RixHQUFZanRGLEdBQ2hEZzRGLEVBQVUxWixFQUFTL29GLEdBQU1BLEVBQUswM0YsR0FBWTEzRixZQUN4Q3JwQixLQUFLcXdHLFdBQWF3YixFQUFVeGIsV0FBYXliLEVBQVF6YixjQUk1QixTQURidWIsR0FBZSxNQUNULEdBQWE1ckgsS0FBSytuSCxRQUFROEQsRUFBVzdYLElBQVVoMEcsS0FBSzRuSCxTQUFTaUUsRUFBVzdYLE1BQ3BFLE1BQW5CNFgsRUFBWSxHQUFhNXJILEtBQUs0bkgsU0FBU2tFLEVBQVM5WCxJQUFVaDBHLEtBQUsrbkgsUUFBUStELEVBQVM5WCxTQTZyQm5GK1gsZ0JBMXJCV3RjLEVBQU91RSxPQUVoQmdZLEVBREFOLEVBQWF0WixFQUFTM0MsR0FBU0EsRUFBUXNSLEdBQVl0UixZQUVqRHp2RyxLQUFLcXdHLFlBQWFxYixFQUFXcmIsYUFJckIsbUJBRE4wRCxFQUFlQyxJQUFVLGVBRXRCaDBHLEtBQUt5WSxZQUFjaXpHLEVBQVdqekcsYUFFM0JpekcsRUFBV2p6RyxVQUNkelksS0FBS2lrQyxRQUFRMG1GLFFBQVEzVyxHQUFPdjdGLFdBQWF1ekcsR0FBV0EsR0FBV2hzSCxLQUFLaWtDLFFBQVErbUYsTUFBTWhYLEdBQU92N0YsZ0JBZ3JCbEd3ekcsdUJBNXFCa0J4YyxFQUFPdUUsVUFDcEJoMEcsS0FBSytySCxPQUFPdGMsRUFBT3VFLElBQVVoMEcsS0FBSytuSCxRQUFRdFksRUFBT3VFLE9BNHFCdERrWSx3QkF6cUJtQnpjLEVBQU91RSxVQUNyQmgwRyxLQUFLK3JILE9BQU90YyxFQUFPdUUsSUFBVWgwRyxLQUFLNG5ILFNBQVNuWSxFQUFPdUUsT0F5cUJ2RDNELDBCQXRWS0EsRUFBUXJ3RyxVQXVWYitvSCxLQUFvQkEsTUFDcEJoWixPQUFvQkEsTUFDcEJzRixXQUFvQkEsTUFDcEJqdUcsSUFBb0JpK0csTUFDcEJsakcsSUFBb0JpakcsTUFDcEIrRywrQkF4VksvaUcsS0FBVyttRixFQUFnQm53RyxXQXlWaENzVCxhQTlpR2MwZ0csRUFBT3J3RyxNQUNGLHFCQUFWcXdHLHNCQUFBQSxZQUVIb1ksV0FwVGlCQyxPQUNyQnJZLFNBQ0MsSUFBSXNZLEtBQUtELElBQ0pwL0csTUFBTTJtRyxLQUFNMFksRUFBRy9YLFNBQVVGLEVBQVdpWSxjQUV4Q3J1RyxLQUFLLFNBQVU0SyxFQUFHWSxVQUNiWixFQUFFMHJGLFNBQVc5cUYsRUFBRThxRixXQUVuQlAsRUE0U2V1WSxHQURWdFksRUFBcUJELElBRXBCL3ZGLEVBQUksRUFBR0EsRUFBSW1vRyxFQUFZeGxILE9BQVFxZCxTQUMvQm1vRyxFQUFZbm9HLEdBQUcydkYsTUFBTUksRUFBTW9ZLEVBQVlub0csR0FBRzJ2RixlQUkvQ2h2RyxFQUFXNUUsT0FEUCt6RyxFQUFlQyxZQUVaaDBHLEtBQUtnMEcsR0FBT3J3RyxVQUdwQjNELFNBa2lHTDJxSCxpQkFsZVkzVyxPQUNWd1csVUFFVS9tSCxPQUROc3dHLEVBQWVDLEtBQ2MsZ0JBQVZBLElBQTRCaDBHLEtBQUtxd0csaUJBQ2pEcndHLFNBR1BpckgsRUFBY2pySCxLQUFLOHhHLE9BQVMwWCxHQUFpQkQsVUFFekN2VixPQUNDLFNBQ01pWCxFQUFZanJILEtBQUt5NEcsT0FBUSxFQUFHLGFBRWxDLFlBQ013UyxFQUFZanJILEtBQUt5NEcsT0FBUXo0RyxLQUFLZzVHLFFBQVVoNUcsS0FBS2c1RyxRQUFVLEVBQUcsYUFFaEUsVUFDTWlTLEVBQVlqckgsS0FBS3k0RyxPQUFRejRHLEtBQUtnNUcsUUFBUyxhQUU3QyxTQUNNaVMsRUFBWWpySCxLQUFLeTRHLE9BQVF6NEcsS0FBS2c1RyxRQUFTaDVHLEtBQUsraEIsT0FBUy9oQixLQUFLcTdHLHFCQUVoRSxZQUNNNFAsRUFBWWpySCxLQUFLeTRHLE9BQVF6NEcsS0FBS2c1RyxRQUFTaDVHLEtBQUsraEIsUUFBVS9oQixLQUFLa3JILGFBQWUsY0FFaEYsVUFDQSxTQUNNRCxFQUFZanJILEtBQUt5NEcsT0FBUXo0RyxLQUFLZzVHLFFBQVNoNUcsS0FBSytoQixrQkFFbEQsU0FDTS9oQixLQUFLZ2pDLEdBQUd2cUIsYUFDUDJ3RyxHQUFNb0IsR0FBUXhxSCxLQUFLOHhHLE9BQVMsRUFBSTl4RyxLQUFLMG1ILFlBQWN1QyxJQUFnQkMsY0FFMUUsV0FDTWxwSCxLQUFLZ2pDLEdBQUd2cUIsYUFDUDJ3RyxHQUFNb0IsRUFBTXZCLGNBRW5CLFdBQ01qcEgsS0FBS2dqQyxHQUFHdnFCLGFBQ1Ayd0csR0FBTW9CLEVBQU14QixnQkFJdkJobUYsR0FBR2trRixRQUFRc0QsS0FDVnJZLGFBQWFueUcsTUFBTSxHQUNsQkEsU0FzYkxzb0gsU0FBb0JBLE1BQ3BCcC9GLHVCQXZYRVksRUFBSTlwQixZQUNBOHBCLEVBQUUydUYsT0FBUTN1RixFQUFFa3ZGLFFBQVNsdkYsRUFBRS9ILE9BQVErSCxFQUFFczZGLE9BQVF0NkYsRUFBRWk3RixTQUFVajdGLEVBQUVrN0YsU0FBVWw3RixFQUFFbTdGLG1CQXVYekUxN0Ysd0JBblhFTyxFQUFJOXBCLGtCQUVHOHBCLEVBQUUydUYsY0FDRDN1RixFQUFFa3ZGLGFBQ0psdkYsRUFBRS9ILGFBQ0QrSCxFQUFFNnpGLGdCQUNBN3pGLEVBQUUrekYsa0JBQ0YvekYsRUFBRWswRix1QkFDR2wwRixFQUFFazhGLG9CQTRXbEJ3Ryx5QkE3WEssSUFBSXRrSCxLQUFLbEksS0FBS3lZLGVBOFhuQmcwRyxxQkFybkJlQyxPQUNaMXNILEtBQUtxd0csaUJBQ0MsU0FFUEgsR0FBcUIsSUFBZndjLEVBQ041aUcsRUFBSW9tRixFQUFNbHdHLEtBQUtpa0MsUUFBUWlzRSxNQUFRbHdHLFlBQy9COHBCLEVBQUUydUYsT0FBUyxHQUFLM3VGLEVBQUUydUYsT0FBUyxLQUNwQm5ELEVBQWF4ckYsRUFBR29tRixFQUFNLGlDQUFtQyxnQ0FFaEV0ckcsRUFBV3NELEtBQUs5RSxVQUFVcXBILGFBRXRCdmMsRUFDT2x3RyxLQUFLd3NILFNBQVNDLGNBRWQsSUFBSXZrSCxLQUFLbEksS0FBS3lZLFVBQStCLEdBQW5CelksS0FBSzBtSCxZQUFtQixLQUFNK0YsY0FBYzdySCxRQUFRLElBQUswMEcsRUFBYXhyRixFQUFHLE1BRzNHd3JGLEVBQWF4ckYsRUFBR29tRixFQUFNLCtCQUFpQyxrQ0FxbUI1RHljLHVCQTNsQkczc0gsS0FBS3F3RyxnQkFDQyxxQkFBdUJyd0csS0FBS3VpQyxHQUFLLFdBRXhDcDlCLEVBQU8sU0FDUHluSCxFQUFPLEdBQ041c0gsS0FBSzZzSCxjQUNzQixJQUFyQjdzSCxLQUFLMG1ILFlBQW9CLGFBQWUscUJBQ3hDLFNBRVBucEQsRUFBUyxJQUFNcDRELEVBQU8sTUFDdEJzekcsRUFBUSxHQUFLejRHLEtBQUt5NEcsUUFBVXo0RyxLQUFLeTRHLFFBQVUsS0FBUSxPQUFTLFNBRTVEcVUsRUFBU0YsRUFBTyxjQUViNXNILEtBQUs4dkcsT0FBT3Z5QyxFQUFTazdDLEVBSGIsd0JBRytCcVUsT0E4a0I1Q0MseUJBeldLL3NILEtBQUtxd0csVUFBWXJ3RyxLQUFLeXNILGNBQWdCLFNBMFczQ25wSCwyQkEzbkJLdEQsS0FBS2lrQyxRQUFROHJFLE9BQU8sTUFBTUQsT0FBTyx3Q0E0bkJ0Q2tkLHVCQXRZSzdsSCxLQUFLMGYsTUFBTTdtQixLQUFLeVksVUFBWSxTQXVZakNBLDBCQTNZS3pZLEtBQUtnakMsR0FBR3ZxQixVQUFtQyxLQUFyQnpZLEtBQUsreEcsU0FBVyxPQTRZM0NrYixxQ0E1VlNqdEgsS0FBS3VpQyxVQUNKdmlDLEtBQUt5aUMsVUFDTHppQyxLQUFLZ3lHLGNBQ05oeUcsS0FBSzh4RyxjQUNKOXhHLEtBQUtveEcsYUF5VmZxSCxLQUFhRyxNQUNiRiw2QkF0bUdLQSxHQUFXMTRHLEtBQUt5NEcsWUF1bUdyQmdJLGtCQXBTbUJoUixVQUNkaWEsR0FBcUI3bEgsS0FBSzdELEtBQ3pCeXZHLEVBQ0F6dkcsS0FBS283RyxPQUNMcDdHLEtBQUtxN0csVUFDTHI3RyxLQUFLcTFHLGFBQWEyTCxNQUFNbEcsSUFDeEI5NkcsS0FBS3ExRyxhQUFhMkwsTUFBTWpHLFNBK1I5QjhPLHFCQTVSc0JwYSxVQUNqQmlhLEdBQXFCN2xILEtBQUs3RCxLQUN6Qnl2RyxFQUFPenZHLEtBQUs4bEgsVUFBVzlsSCxLQUFLa3JILGFBQWMsRUFBRyxPQTJSbkR0RixRQUFVMzNHLEdBQU0wM0csa0JBbk9FbFcsVUFDSixNQUFUQSxFQUFnQnRvRyxLQUFLa2hHLE1BQU1yb0csS0FBS2c1RyxRQUFVLEdBQUssR0FBS2g1RyxLQUFLZzVHLE1BQW9CLEdBQWJ2SixFQUFRLEdBQVN6dkcsS0FBS2c1RyxRQUFVLE9BbU9yR0EsTUFBY2EsTUFDZFosOEJBeDFGS0EsR0FBWWo1RyxLQUFLeTRHLE9BQVF6NEcsS0FBS2c1RyxhQXkxRm5Db0MsS0FBaUJudEcsR0FBTTQzRyxlQXpuRlJwVyxPQUNiMkwsRUFBT3A3RyxLQUFLcTFHLGFBQWErRixLQUFLcDdHLGFBQ2xCLE1BQVR5dkcsRUFBZ0IyTCxFQUFPcDdHLEtBQUtvWCxJQUFxQixHQUFoQnE0RixFQUFRMkwsR0FBVyxTQXduRnpEMEssUUFBaUI3M0csR0FBTWkvRyxrQkFybkZMemQsT0FDaEIyTCxFQUFPTyxHQUFXMzdHLEtBQU0sRUFBRyxHQUFHbzdHLFlBQ2xCLE1BQVQzTCxFQUFnQjJMLEVBQU9wN0csS0FBS29YLElBQXFCLEdBQWhCcTRGLEVBQVEyTCxHQUFXLFNBb25GekRTLDJCQXhSRXNSLEVBQVdudEgsS0FBS3ExRyxhQUFhMkwsYUFDMUJuRixHQUFZNzdHLEtBQUt5NEcsT0FBUTBVLEVBQVNyUyxJQUFLcVMsRUFBU3BTLFNBd1JyRHFTLGlDQTdSS3ZSLEdBQVk3N0csS0FBS3k0RyxPQUFRLEVBQUcsT0E4UmpDMTJGLEtBQWFrb0csTUFDYjlNLElBQWFsdkcsR0FBTTgzRyxjQTU1RUN0VyxPQUNqQnp2RyxLQUFLcXdHLGlCQUNVLE1BQVRaLEVBQWdCenZHLEtBQU9vekYsUUFFOUIrcEIsRUFBTW45RyxLQUFLOHhHLE9BQVM5eEcsS0FBS2dqQyxHQUFHaTRFLFlBQWNqN0csS0FBS2dqQyxHQUFHdytFLGdCQUN6QyxNQUFUL1IsY0FoS2NBLEVBQU9NLFNBQ0osaUJBQVZOLEVBQ0FBLEVBR052b0YsTUFBTXVvRixHQUtVLG1CQURiTSxFQUFPd00sY0FBYzlNLElBRWxCQSxFQUdKLEtBUkkzN0QsU0FBUzI3RCxFQUFPLElBMkpmNGQsQ0FBYTVkLEVBQU96dkcsS0FBS3ExRyxjQUMxQnIxRyxLQUFLb1gsSUFBSXE0RixFQUFRME4sRUFBSyxNQUV0QkEsTUFvNUVUOUIsaUJBaDVFMEI1TCxPQUN2Qnp2RyxLQUFLcXdHLGlCQUNVLE1BQVRaLEVBQWdCenZHLEtBQU9vekYsUUFFOUJpb0IsR0FBV3I3RyxLQUFLbTlHLE1BQVEsRUFBSW45RyxLQUFLcTFHLGFBQWEyTCxNQUFNbEcsS0FBTyxTQUMvQyxNQUFUckwsRUFBZ0I0TCxFQUFVcjdHLEtBQUtvWCxJQUFJcTRGLEVBQVE0TCxFQUFTLFNBNDRFekQ2UCxvQkF6NEV1QnpiLE9BQ3BCenZHLEtBQUtxd0csaUJBQ1UsTUFBVFosRUFBZ0J6dkcsS0FBT296RixPQU9yQixNQUFUcWMsRUFBZSxLQUNYNEwsV0F6S2E1TCxFQUFPTSxTQUNQLGlCQUFWTixFQUNBTSxFQUFPd00sY0FBYzlNLEdBQVMsR0FBSyxFQUV2Q3ZvRixNQUFNdW9GLEdBQVMsS0FBT0EsRUFxS1g2ZCxDQUFnQjdkLEVBQU96dkcsS0FBS3ExRyxxQkFDbkNyMUcsS0FBS205RyxJQUFJbjlHLEtBQUttOUcsTUFBUSxFQUFJOUIsRUFBVUEsRUFBVSxVQUU5Q3I3RyxLQUFLbTlHLE9BQVMsTUE2M0V2QnpCLG1CQXBMb0JqTSxPQUNsQmlNLEVBQVl2MEcsS0FBS3dxRSxPQUFPM3hFLEtBQUtpa0MsUUFBUTBtRixRQUFRLE9BQVMzcUgsS0FBS2lrQyxRQUFRMG1GLFFBQVEsU0FBVyxPQUFTLFNBQ25GLE1BQVRsYixFQUFnQmlNLEVBQVkxN0csS0FBS29YLElBQUtxNEYsRUFBUWlNLEVBQVksU0FtTC9EMEksS0FBT24yRyxHQUFNMHZHLE1BQVFhLE1BQ3JCdUcsT0FBUzkyRyxHQUFNNHZHLFFBQVVxTSxNQUN6QmxGLE9BQVMvMkcsR0FBTSt2RyxRQUFVbU0sTUFDekJsRixZQUFjaDNHLEdBQU0rM0csYUFBZXFFLE1BQ25DM0QsbUJBeGtDaUJqWCxFQUFPOGQsRUFBZUMsT0FFckNDLEVBREFsOEcsRUFBU3ZSLEtBQUsreEcsU0FBVyxNQUV4Qi94RyxLQUFLcXdHLGlCQUNVLE1BQVRaLEVBQWdCenZHLEtBQU9vekYsT0FFckIsTUFBVHFjLEVBQWUsSUFDTSxpQkFBVkEsTUFFTyxVQUROa1gsR0FBaUIvUCxHQUFrQm5ILFdBRWhDenZHLFVBRUptSCxLQUFLbTBFLElBQUltMEIsR0FBUyxLQUFPK2QsT0FDaEIsV0FFZnh0SCxLQUFLOHhHLFFBQVV5YixNQUNGbkcsR0FBY3BuSCxZQUUzQit4RyxRQUFVdEMsT0FDVnFDLFFBQVMsRUFDSyxNQUFmMmIsUUFDS3IyRyxJQUFJcTJHLEVBQWEsS0FFdEJsOEcsSUFBV2srRixLQUNOOGQsR0FBaUJ2dEgsS0FBSzB0SCxxQkFDWDF0SCxLQUFNeW5ILEdBQWVoWSxFQUFRbCtGLEVBQVEsS0FBTSxHQUFHLEdBQ2xEdlIsS0FBSzB0SCx5QkFDUkEsbUJBQW9CLElBQ25CdmIsYUFBYW55RyxNQUFNLFFBQ3BCMHRILGtCQUFvQixPQUcxQjF0SCxZQUVBQSxLQUFLOHhHLE9BQVN2Z0csRUFBUzYxRyxHQUFjcG5ILFVBdWlDOUNrd0csYUFyaENtQnFkLFVBQ2R2dEgsS0FBSzBtSCxVQUFVLEVBQUc2RyxPQXFoQ3ZCcEcsZUFsaENxQm9HLFVBQ25CdnRILEtBQUs4eEcsY0FDQTRVLFVBQVUsRUFBRzZHLFFBQ2J6YixRQUFTLEVBRVZ5YixRQUNLakYsU0FBU2xCLEdBQWNwbkgsTUFBTyxNQUdwQ0EsU0EwZ0NMMnRILHdCQXRnQ2UsTUFBYjN0SCxLQUFLNnhHLFVBQ0E2VSxVQUFVMW1ILEtBQUs2eEcsTUFBTSxHQUFPLFFBQzlCLEdBQXVCLGlCQUFaN3hHLEtBQUt1aUMsR0FBaUIsS0FDaENxckYsRUFBUWpILEdBQWlCaFEsR0FBYTMyRyxLQUFLdWlDLElBQ2xDLE1BQVRxckYsT0FDS2xILFVBQVVrSCxRQUdWbEgsVUFBVSxHQUFHLFVBR25CMW1ILFNBNC9CTDZ0SCw4QkF6L0J5QnBlLFdBQ3RCenZHLEtBQUtxd0csY0FHRlosRUFBUXNSLEdBQVl0UixHQUFPaVgsWUFBYyxHQUV6QzFtSCxLQUFLMG1ILFlBQWNqWCxHQUFTLElBQU8sT0FvL0J6Q3FlLHdCQS8rQkU5dEgsS0FBSzBtSCxZQUFjMW1ILEtBQUtpa0MsUUFBUSswRSxNQUFNLEdBQUcwTixhQUN6QzFtSCxLQUFLMG1ILFlBQWMxbUgsS0FBS2lrQyxRQUFRKzBFLE1BQU0sR0FBRzBOLGdCQSsrQjNDbUcsMkJBcjlCSzdzSCxLQUFLcXdHLFlBQWFyd0csS0FBSzh4RyxXQXM5QjVCaWMsK0JBbDlCSy90SCxLQUFLcXdHLFdBQVlyd0csS0FBSzh4RyxXQW05QjNCd1YsTUFBdUJBLE1BQ3ZCcEMsTUFBdUJvQyxNQUN2QjBHLDJCQTdFS2h1SCxLQUFLOHhHLE9BQVMsTUFBUSxPQThFM0JtYywyQkExRUtqdUgsS0FBSzh4RyxPQUFTLDZCQUErQixPQTJFbERvYyxNQUFTbGIsRUFBVSxrREFBbURpWCxPQUN0RTdRLE9BQVNwRyxFQUFVLG1EQUFvRDZHLE9BQ3ZFNkwsTUFBUzFTLEVBQVUsaURBQWtENEYsT0FDckVnVSxLQUFTNVosRUFBVSxvSEFqakNKdkQsRUFBTzhkLFVBQ1gsTUFBVDlkLEdBQ3FCLGlCQUFWQSxPQUNFQSxRQUdSaVgsVUFBVWpYLEVBQU84ZCxHQUVmdnRILE9BRUNBLEtBQUswbUgsaUJBd2lDZnlILGFBQWVuYixFQUFVLHlIQXAvQnRCdEQsRUFBWTF2RyxLQUFLb3VILHNCQUNYcHVILEtBQUtvdUgsa0JBR1pobUcsVUFFT0EsRUFBR3BvQixTQUNWdWtILEdBQWNuOEYsSUFFWjB2RixHQUFJLEtBQ0YzeEcsRUFBUWlpQixFQUFFMHBGLE9BQVNqQyxFQUFVem5GLEVBQUUwdkYsSUFBTWlKLEdBQVkzNEYsRUFBRTB2RixTQUNsRHNXLGNBQWdCcHVILEtBQUtxd0csV0FDdEJvQyxFQUFjcnFGLEVBQUUwdkYsR0FBSTN4RyxFQUFNK2lCLFdBQWEsWUFFdENrbEcsZUFBZ0IsU0FHbEJwdUgsS0FBS291SCxvQkFpL0JaQyxHQUFVNWEsRUFBT3J3RyxtQkFpQ1prckgsR0FBT3hlLEVBQVFucEcsRUFBTzRuSCxFQUFPajdGLE9BQzlCeThFLEVBQVNtUCxLQUNUaFAsRUFBTUwsSUFBWXY4RixJQUFJZ2dCLEVBQVEzc0IsVUFDM0JvcEcsRUFBT3dlLEdBQU9yZSxFQUFLSixZQUdyQjBlLEdBQWdCMWUsRUFBUW5wRyxFQUFPNG5ILE1BQ2hDcHpDLEVBQVMyMEIsT0FDREEsU0FDQ3JzRyxLQUdKcXNHLEdBQVUsR0FFTixNQUFUbnBHLFNBQ08ybkgsR0FBTXhlLEVBQVFucEcsRUFBTzRuSCxFQUFPLGFBR25DdHFHLEVBQ0F3cUcsU0FDQ3hxRyxFQUFJLEVBQUdBLEVBQUksR0FBSUEsTUFDWkEsR0FBS3FxRyxHQUFNeGUsRUFBUTdyRixFQUFHc3FHLEVBQU8sZ0JBRTlCRSxXQVdGQyxHQUFrQkMsRUFBYzdlLEVBQVFucEcsRUFBTzRuSCxHQUN4QixrQkFBakJJLEdBQ0h4ekMsRUFBUzIwQixPQUNEQSxTQUNDcnNHLEtBR0pxc0csR0FBVSxTQUVWNmUsS0FFTSxFQUVYeHpDLEVBQVMyMEIsT0FDREEsU0FDQ3JzRyxLQUdKcXNHLEdBQVUsUUFVbkI3ckYsRUFQQThyRixFQUFTbVAsS0FDVGxoRixFQUFRMndGLEVBQWU1ZSxFQUFPaVIsTUFBTWxHLElBQU0sS0FFakMsTUFBVG4wRyxTQUNPMm5ILEdBQU14ZSxHQUFTbnBHLEVBQVFxM0IsR0FBUyxFQUFHdXdGLEVBQU8sV0FJakRFLFNBQ0N4cUcsRUFBSSxFQUFHQSxFQUFJLEVBQUdBLE1BQ1hBLEdBQUtxcUcsR0FBTXhlLEdBQVM3ckYsRUFBSStaLEdBQVMsRUFBR3V3RixFQUFPLGNBRTVDRSxLQWxHSGxFLGtCQXpnSFd6a0gsRUFBSzB2RyxFQUFLcnRHLE9BQ3JCc3RHLEVBQVN6MUcsS0FBSzR1SCxVQUFVOW9ILElBQVE5RixLQUFLNHVILFVBQUwsZ0JBQzdCaHFILEVBQVc2d0csR0FBVUEsRUFBTzV4RyxLQUFLMnhHLEVBQUtydEcsR0FBT3N0RyxNQXdnSGhESSx3QkE1L0dpQi92RyxPQUNqQmdxRyxFQUFTOXZHLEtBQUs2dUgsZ0JBQWdCL29ILEdBQzlCZ3BILEVBQWM5dUgsS0FBSzZ1SCxnQkFBZ0Ivb0gsRUFBSXVpQixzQkFFdkN5bkYsSUFBV2dmLEVBQ0poZixRQUdOK2UsZ0JBQWdCL29ILEdBQU9ncEgsRUFBWWx1SCxRQUFRLG1CQUFvQixTQUFVK2xCLFVBQ25FQSxFQUFJblYsTUFBTSxLQUdkeFIsS0FBSzZ1SCxnQkFBZ0Ivb0gsUUFpL0d4QjZ2Ryw4QkEzK0dHMzFHLEtBQUsrdUgsaUJBNCtHUjNaLGlCQXQrR1V0NEYsVUFDUDljLEtBQUtndkgsU0FBU3B1SCxRQUFRLEtBQU1rYyxPQXMrRy9CMG5HLFNBQWtCOEYsTUFDbEJjLFdBQWtCZCxNQUNsQjJFLHNCQXA5R2VueUcsRUFBUXV1RyxFQUFldmpILEVBQVFvbkgsT0FDOUN6WixFQUFTejFHLEtBQUttdkgsY0FBY3JuSCxVQUN4QmxELEVBQVc2d0csR0FDZkEsRUFBTzM0RixFQUFRdXVHLEVBQWV2akgsRUFBUW9uSCxHQUN0Q3paLEVBQU83MEcsUUFBUSxNQUFPa2MsT0FpOUd0QnN5RyxvQkE5OEdhbkksRUFBTXhSLE9BQ25CM0YsRUFBUzl2RyxLQUFLbXZILGNBQWNsSSxFQUFPLEVBQUksU0FBVyxlQUMvQ3JpSCxFQUFXa3JHLEdBQVVBLEVBQU8yRixHQUFVM0YsRUFBT2x2RyxRQUFRLE1BQU82MEcsT0E2OEcvRG5pRyxhQTdsSE1pTSxPQUNObVgsRUFBTXpTLE1BQ0xBLEtBQUsxRSxFQUVGM2EsSUFERzJhLEVBQU8wRSxTQUVMQSxHQUFLeVMsT0FFTCxJQUFNelMsR0FBS3lTLE9BR25CMm9GLFFBQVU5L0YsT0FJVnlxRywrQkFBaUMsSUFBSWxwSCxRQUNyQ2QsS0FBSzhwSCx3QkFBd0J2akgsUUFBVXZHLEtBQUsrcEgsY0FBY3hqSCxRQUN2RCxJQUFPLFVBQVdBLFlBK2tIdEI2eUcsZ0JBeGhHZXR2RixFQUFHZ21GLFVBQ2pCaG1GLEVBSUVqZ0IsRUFBUTdKLEtBQUtxbUgsU0FBV3JtSCxLQUFLcW1ILFFBQVF2OEYsRUFBRWt2RixTQUMxQ2g1RyxLQUFLcW1ILFNBQVNybUgsS0FBS3FtSCxRQUFRZ0osVUFBWTdWLElBQWtCN3pHLEtBQUttcUcsR0FBVSxTQUFXLGNBQWNobUYsRUFBRWt2RixTQUo1Rm52RyxFQUFRN0osS0FBS3FtSCxTQUFXcm1ILEtBQUtxbUgsUUFDaENybUgsS0FBS3FtSCxRQUFMLGVBc2hHSmxOLHFCQS9nR29CcnZGLEVBQUdnbUYsVUFDdEJobUYsRUFJRWpnQixFQUFRN0osS0FBS3N2SCxjQUFnQnR2SCxLQUFLc3ZILGFBQWF4bEcsRUFBRWt2RixTQUNwRGg1RyxLQUFLc3ZILGFBQWE5VixHQUFpQjd6RyxLQUFLbXFHLEdBQVUsU0FBVyxjQUFjaG1GLEVBQUVrdkYsU0FKdEVudkcsRUFBUTdKLEtBQUtzdkgsY0FBZ0J0dkgsS0FBS3N2SCxhQUNyQ3R2SCxLQUFLc3ZILGFBQUwsZUE2Z0dKL1YscUJBOTlGb0JnVyxFQUFXemYsRUFBUUUsT0FDdkMvckYsRUFBR3V4RixFQUFLd0IsS0FFUmgzRyxLQUFLd3ZILGtDQTVDY0QsRUFBV3pmLEVBQVFFLE9BQ3RDL3JGLEVBQUd3ckcsRUFBSWphLEVBQUtrYSxFQUFNSCxFQUFVSSx3QkFDM0IzdkgsS0FBSzR2SCxzQkFFREEscUJBQ0FDLHlCQUNBQyxxQkFDQTdyRyxFQUFJLEVBQUdBLEVBQUksS0FBTUEsSUFDWjRyRixHQUFXLElBQU01ckYsU0FDbEI2ckcsa0JBQWtCN3JHLEdBQUtqa0IsS0FBS201RyxZQUFZM0QsRUFBSyxJQUFJbWEseUJBQ2pERSxpQkFBaUI1ckcsR0FBS2prQixLQUFLbzVHLE9BQU81RCxFQUFLLElBQUltYSwyQkFJcEQzZixFQUNlLFFBQVhGLEdBRWUsT0FEVmhvRixHQUFRamtCLEtBQUs3RCxLQUFLOHZILGtCQUFtQkosSUFDdkJELEVBQUssTUFHVCxPQURWM25HLEdBQVFqa0IsS0FBSzdELEtBQUs2dkgsaUJBQWtCSCxJQUN0QkQsRUFBSyxLQUdiLFFBQVgzZixHQUVZLE9BRFBob0YsR0FBUWprQixLQUFLN0QsS0FBSzh2SCxrQkFBbUJKLElBRS9CRCxHQUdJLE9BRFYzbkcsR0FBUWprQixLQUFLN0QsS0FBSzZ2SCxpQkFBa0JILElBQ3RCRCxFQUFLLE1BR1osT0FEUDNuRyxHQUFRamtCLEtBQUs3RCxLQUFLNnZILGlCQUFrQkgsSUFFOUJELEdBR0ksT0FEVjNuRyxHQUFRamtCLEtBQUs3RCxLQUFLOHZILGtCQUFtQkosSUFDdkJELEVBQUssTUFTSDVySCxLQUFLN0QsS0FBTXV2SCxFQUFXemYsRUFBUUUsT0FHdERod0csS0FBSzR2SCxvQkFDREEscUJBQ0FDLHlCQUNBQyxzQkFNSjdyRyxFQUFJLEVBQUdBLEVBQUksR0FBSUEsSUFBSyxNQUVmNHJGLEdBQVcsSUFBTTVyRixJQUNuQityRixJQUFXaHdHLEtBQUs2dkgsaUJBQWlCNXJHLFVBQzVCNHJHLGlCQUFpQjVyRyxHQUFLLElBQUluakIsT0FBTyxJQUFNZCxLQUFLbzVHLE9BQU81RCxFQUFLLElBQUk1MEcsUUFBUSxJQUFLLElBQU0sSUFBSyxVQUNwRmt2SCxrQkFBa0I3ckcsR0FBSyxJQUFJbmpCLE9BQU8sSUFBTWQsS0FBS201RyxZQUFZM0QsRUFBSyxJQUFJNTBHLFFBQVEsSUFBSyxJQUFNLElBQUssTUFFOUZvdkcsR0FBV2h3RyxLQUFLNHZILGFBQWEzckcsT0FDdEIsSUFBTWprQixLQUFLbzVHLE9BQU81RCxFQUFLLElBQU0sS0FBT3gxRyxLQUFLbTVHLFlBQVkzRCxFQUFLLFNBQzdEb2EsYUFBYTNyRyxHQUFLLElBQUluakIsT0FBT2syRyxFQUFNcDJHLFFBQVEsSUFBSyxJQUFLLE1BRzFEb3ZHLEdBQXFCLFNBQVhGLEdBQXFCOXZHLEtBQUs2dkgsaUJBQWlCNXJHLEdBQUd0ZSxLQUFLNHBILFVBQ3REdHJHLEVBQ0osR0FBSStyRixHQUFxQixRQUFYRixHQUFvQjl2RyxLQUFLOHZILGtCQUFrQjdyRyxHQUFHdGUsS0FBSzRwSCxVQUM3RHRyRyxFQUNKLElBQUsrckYsR0FBVWh3RyxLQUFLNHZILGFBQWEzckcsR0FBR3RlLEtBQUs0cEgsVUFDckN0ckcsT0E4N0ZYcTFGLHFCQTMzRmNwQyxVQUNkbDNHLEtBQUt3dkgsbUJBQ0E1ZixFQUFXNXZHLEtBQU0sb0JBQ0M2RCxLQUFLN0QsTUFFeEJrM0csRUFDT2wzRyxLQUFLdTZHLG1CQUVMdjZHLEtBQUtxNkcsZUFHWHpLLEVBQVc1dkcsS0FBTSx1QkFDYnE2RyxhQUFlTixJQUVqQi81RyxLQUFLdTZHLG9CQUFzQnJELEVBQzlCbDNHLEtBQUt1NkcsbUJBQXFCdjZHLEtBQUtxNkcsa0JBNjJGbkNoQiwwQkFoNUZtQm5DLFVBQ25CbDNHLEtBQUt3dkgsbUJBQ0E1ZixFQUFXNXZHLEtBQU0sb0JBQ0M2RCxLQUFLN0QsTUFFeEJrM0csRUFDT2wzRyxLQUFLdzZHLHdCQUVMeDZHLEtBQUtzNkcsb0JBR1gxSyxFQUFXNXZHLEtBQU0sNEJBQ2JzNkcsa0JBQW9CUixJQUV0Qjk1RyxLQUFLdzZHLHlCQUEyQnRELEVBQ25DbDNHLEtBQUt3Nkcsd0JBQTBCeDZHLEtBQUtzNkcsdUJBazRGeENjLGNBeHNGYTVGLFVBQ1ZtRyxHQUFXbkcsRUFBS3gxRyxLQUFLZ2hILE1BQU1sRyxJQUFLOTZHLEtBQUtnaEgsTUFBTWpHLEtBQUtLLFNBd3NGbkQyVSxpQ0EzckZHL3ZILEtBQUtnaEgsTUFBTWpHLFFBNHJGZGlWLGlDQWhzRkdod0gsS0FBS2doSCxNQUFNbEcsUUFrc0ZkcUIsa0JBcGxGaUJyeUYsRUFBR2dtRixPQUNwQnFNLEVBQVd0eUcsRUFBUTdKLEtBQUtpd0gsV0FBYWp3SCxLQUFLaXdILFVBQzFDandILEtBQUtpd0gsVUFBV25tRyxJQUFXLElBQU5BLEdBQWM5cEIsS0FBS2l3SCxVQUFVWixTQUFTMXBILEtBQUttcUcsR0FBVyxTQUFXLHFCQUM1RSxJQUFOaG1GLEVBQWNpeUYsR0FBY0ksRUFBVW44RyxLQUFLZ2hILE1BQU1sRyxLQUNsRGh4RixFQUFLcXlGLEVBQVNyeUYsRUFBRXF6RixPQUFTaEIsTUFpbEY1QkYscUJBdmtGb0JueUYsVUFDVixJQUFOQSxFQUFjaXlGLEdBQWMvN0csS0FBS2t3SCxhQUFjbHdILEtBQUtnaEgsTUFBTWxHLEtBQzNEaHhGLEVBQUs5cEIsS0FBS2t3SCxhQUFhcG1HLEVBQUVxekYsT0FBU245RyxLQUFLa3dILGlCQXNrRjFDaFUsdUJBOWtGc0JweUYsVUFDWixJQUFOQSxFQUFjaXlGLEdBQWMvN0csS0FBS213SCxlQUFnQm53SCxLQUFLZ2hILE1BQU1sRyxLQUM3RGh4RixFQUFLOXBCLEtBQUttd0gsZUFBZXJtRyxFQUFFcXpGLE9BQVNuOUcsS0FBS213SCxtQkE2a0Y1QzVULHVCQXBnRnNCNlQsRUFBYXRnQixFQUFRRSxPQUMzQy9yRixFQUFHdXhGLEVBQUt3QixLQUVSaDNHLEtBQUtxd0gsb0NBbkVnQkQsRUFBYXRnQixFQUFRRSxPQUMxQy9yRixFQUFHd3JHLEVBQUlqYSxFQUFLa2EsRUFBTVUsRUFBWVQsd0JBQzdCM3ZILEtBQUtzd0gsd0JBQ0RBLHVCQUNBQyw0QkFDQUMscUJBRUF2c0csRUFBSSxFQUFHQSxFQUFJLElBQUtBLElBQ1g0ckYsR0FBVyxJQUFNLElBQUlzTixJQUFJbDVGLFFBQzFCdXNHLGtCQUFrQnZzRyxHQUFLamtCLEtBQUtpOEcsWUFBWXpHLEVBQUssSUFBSW1hLHlCQUNqRFksb0JBQW9CdHNHLEdBQUtqa0IsS0FBS2s4RyxjQUFjMUcsRUFBSyxJQUFJbWEseUJBQ3JEVyxlQUFlcnNHLEdBQUtqa0IsS0FBS204RyxTQUFTM0csRUFBSyxJQUFJbWEsMkJBSXBEM2YsRUFDZSxTQUFYRixHQUVlLE9BRFZob0YsR0FBUWprQixLQUFLN0QsS0FBS3N3SCxlQUFnQlosSUFDcEJELEVBQUssS0FDTixRQUFYM2YsR0FFUSxPQURWaG9GLEdBQVFqa0IsS0FBSzdELEtBQUt1d0gsb0JBQXFCYixJQUN6QkQsRUFBSyxNQUdULE9BRFYzbkcsR0FBUWprQixLQUFLN0QsS0FBS3d3SCxrQkFBbUJkLElBQ3ZCRCxFQUFLLEtBR2IsU0FBWDNmLEdBRVksT0FEUGhvRixHQUFRamtCLEtBQUs3RCxLQUFLc3dILGVBQWdCWixJQUU1QkQsR0FHQyxPQURQM25HLEdBQVFqa0IsS0FBSzdELEtBQUt1d0gsb0JBQXFCYixJQUVqQ0QsR0FHSSxPQURWM25HLEdBQVFqa0IsS0FBSzdELEtBQUt3d0gsa0JBQW1CZCxJQUN2QkQsRUFBSyxLQUNOLFFBQVgzZixHQUVLLE9BRFBob0YsR0FBUWprQixLQUFLN0QsS0FBS3V3SCxvQkFBcUJiLElBRWpDRCxHQUdDLE9BRFAzbkcsR0FBUWprQixLQUFLN0QsS0FBS3N3SCxlQUFnQlosSUFFNUJELEdBR0ksT0FEVjNuRyxHQUFRamtCLEtBQUs3RCxLQUFLd3dILGtCQUFtQmQsSUFDdkJELEVBQUssTUFHWixPQURQM25HLEdBQVFqa0IsS0FBSzdELEtBQUt3d0gsa0JBQW1CZCxJQUUvQkQsR0FHQyxPQURQM25HLEdBQVFqa0IsS0FBSzdELEtBQUtzd0gsZUFBZ0JaLElBRTVCRCxHQUdJLE9BRFYzbkcsR0FBUWprQixLQUFLN0QsS0FBS3V3SCxvQkFBcUJiLElBQ3pCRCxFQUFLLE1BU0Q1ckgsS0FBSzdELEtBQU1vd0gsRUFBYXRnQixFQUFRRSxPQUcxRGh3RyxLQUFLc3dILHNCQUNEQSx1QkFDQUUsMEJBQ0FELDRCQUNBRSx1QkFHSnhzRyxFQUFJLEVBQUdBLEVBQUksRUFBR0EsSUFBSyxNQUdkNHJGLEdBQVcsSUFBTSxJQUFJc04sSUFBSWw1RixHQUMzQityRixJQUFXaHdHLEtBQUt5d0gsbUJBQW1CeHNHLFVBQzlCd3NHLG1CQUFtQnhzRyxHQUFLLElBQUluakIsT0FBTyxJQUFNZCxLQUFLbThHLFNBQVMzRyxFQUFLLElBQUk1MEcsUUFBUSxJQUFLLFFBQVUsSUFBSyxVQUM1RjJ2SCxvQkFBb0J0c0csR0FBSyxJQUFJbmpCLE9BQU8sSUFBTWQsS0FBS2s4RyxjQUFjMUcsRUFBSyxJQUFJNTBHLFFBQVEsSUFBSyxRQUFVLElBQUssVUFDbEc0dkgsa0JBQWtCdnNHLEdBQUssSUFBSW5qQixPQUFPLElBQU1kLEtBQUtpOEcsWUFBWXpHLEVBQUssSUFBSTUwRyxRQUFRLElBQUssUUFBVSxJQUFLLE1BRWxHWixLQUFLc3dILGVBQWVyc0csT0FDYixJQUFNamtCLEtBQUttOEcsU0FBUzNHLEVBQUssSUFBTSxLQUFPeDFHLEtBQUtrOEcsY0FBYzFHLEVBQUssSUFBTSxLQUFPeDFHLEtBQUtpOEcsWUFBWXpHLEVBQUssU0FDcEc4YSxlQUFlcnNHLEdBQUssSUFBSW5qQixPQUFPazJHLEVBQU1wMkcsUUFBUSxJQUFLLElBQUssTUFHNURvdkcsR0FBcUIsU0FBWEYsR0FBcUI5dkcsS0FBS3l3SCxtQkFBbUJ4c0csR0FBR3RlLEtBQUt5cUgsVUFDeERuc0csRUFDSixHQUFJK3JGLEdBQXFCLFFBQVhGLEdBQW9COXZHLEtBQUt1d0gsb0JBQW9CdHNHLEdBQUd0ZSxLQUFLeXFILFVBQy9EbnNHLEVBQ0osR0FBSStyRixHQUFxQixPQUFYRixHQUFtQjl2RyxLQUFLd3dILGtCQUFrQnZzRyxHQUFHdGUsS0FBS3lxSCxVQUM1RG5zRyxFQUNKLElBQUsrckYsR0FBVWh3RyxLQUFLc3dILGVBQWVyc0csR0FBR3RlLEtBQUt5cUgsVUFDdkNuc0csT0FtK0VYcTRGLHVCQXI3RWdCcEYsVUFDaEJsM0csS0FBS3F3SCxxQkFDQXpnQixFQUFXNXZHLEtBQU0sc0JBQ0c2RCxLQUFLN0QsTUFFMUJrM0csRUFDT2wzRyxLQUFLdTlHLHFCQUVMdjlHLEtBQUtvOUcsaUJBR1h4TixFQUFXNXZHLEtBQU0seUJBQ2JvOUcsZUFBaUJULElBRW5CMzhHLEtBQUt1OUcsc0JBQXdCckcsRUFDaENsM0csS0FBS3U5RyxxQkFBdUJ2OUcsS0FBS285RyxvQkF1NkVyQ2YsNEJBbDZFcUJuRixVQUNyQmwzRyxLQUFLcXdILHFCQUNBemdCLEVBQVc1dkcsS0FBTSxzQkFDRzZELEtBQUs3RCxNQUUxQmszRyxFQUNPbDNHLEtBQUt3OUcsMEJBRUx4OUcsS0FBS3E5RyxzQkFHWHpOLEVBQVc1dkcsS0FBTSw4QkFDYnE5RyxvQkFBc0JULElBRXhCNThHLEtBQUt3OUcsMkJBQTZCdEcsRUFDckNsM0csS0FBS3c5RywwQkFBNEJ4OUcsS0FBS3E5Ryx5QkFvNUUxQ2pCLDBCQS80RW1CbEYsVUFDbkJsM0csS0FBS3F3SCxxQkFDQXpnQixFQUFXNXZHLEtBQU0sc0JBQ0c2RCxLQUFLN0QsTUFFMUJrM0csRUFDT2wzRyxLQUFLeTlHLHdCQUVMejlHLEtBQUtzOUcsb0JBR1gxTixFQUFXNXZHLEtBQU0sNEJBQ2JzOUcsa0JBQW9CVCxJQUV0Qjc4RyxLQUFLeTlHLHlCQUEyQnZHLEVBQ25DbDNHLEtBQUt5OUcsd0JBQTBCejlHLEtBQUtzOUcsdUJBazRFeENhLGNBdHVFYTFPLFNBR2dDLE9BQXhDQSxFQUFRLElBQUlqb0YsY0FBY2UsT0FBTyxPQW91RXRDNG9GLGtCQWh1RWlCd00sRUFBT0UsRUFBUzZTLFVBQ2pDL1MsRUFBUSxHQUNEK1MsRUFBVSxLQUFPLEtBRWpCQSxFQUFVLEtBQU8sU0F3ekViLDZCQUNTLCtCQUNkLFNBQVU1ekcsT0FDWjJNLEVBQUkzTSxFQUFTLEdBQ2IyNEYsRUFBdUMsSUFBN0JuRCxFQUFNeDFGLEVBQVMsSUFBTSxJQUFhLEtBQ3JDLElBQU4yTSxFQUFXLEtBQ0wsSUFBTkEsRUFBVyxLQUNMLElBQU5BLEVBQVcsS0FBTyxZQUNoQjNNLEVBQVMyNEYsT0FNbEJzVCxLQUFPL1YsRUFBVSx3REFBeURpTSxNQUMxRTBSLFNBQVczZCxFQUFVLGdFQUFpRWtNLFFBRXhGMFIsR0FBVXpwSCxLQUFLbTBFLGFBbUJWdTFDLEdBQWV2bEUsRUFBVW1rRCxFQUFPOXJHLEVBQU9za0gsT0FDeEM5aEgsRUFBUXNoSCxHQUFlaFksRUFBTzlyRyxZQUV6QndpSCxlQUFpQjhCLEVBQVk5aEgsRUFBTWdnSCxnQkFDbkNDLE9BQWlCNkIsRUFBWTloSCxFQUFNaWdILFFBQ25DQyxTQUFpQjRCLEVBQVk5aEgsRUFBTWtnSCxRQUVyQy82RCxFQUFTZzdELG1CQWFYd0ssR0FBU2gwRyxVQUNWQSxFQUFTLEVBQ0YzVixLQUFLMGYsTUFBTS9KLEdBRVgzVixLQUFLa2hHLEtBQUt2ckYsWUFtRGhCaTBHLEdBQWNoTCxVQUdMLEtBQVBBLEVBQWMsZ0JBR2hCaUwsR0FBYzVYLFVBRUgsT0FBVEEsRUFBa0IsY0FrRHBCNlgsR0FBUXQzRCxVQUNOLGtCQUNJMzVELEtBQUtreEgsR0FBR3YzRCxRQUluQnczRCxHQUFpQkYsR0FBTyxNQUN4QkcsR0FBaUJILEdBQU8sS0FDeEJJLEdBQWlCSixHQUFPLEtBQ3hCSyxHQUFpQkwsR0FBTyxLQUN4Qk0sR0FBaUJOLEdBQU8sS0FDeEJPLEdBQWlCUCxHQUFPLEtBQ3hCUSxHQUFpQlIsR0FBTyxLQUN4QlMsR0FBaUJULEdBQU8sS0FDeEJVLEdBQWlCVixHQUFPLGNBV25CVyxHQUFXdnhILFVBQ1Qsa0JBQ0lMLEtBQUtxd0csVUFBWXJ3RyxLQUFLcXJDLE1BQU1ockMsR0FBUSt5RixTQUkvQzR5QixHQUFlNEwsR0FBVyxnQkFDMUI1VCxHQUFlNFQsR0FBVyxXQUMxQi9ULEdBQWUrVCxHQUFXLFdBQzFCalUsR0FBZWlVLEdBQVcsU0FDMUI3TCxHQUFlNkwsR0FBVyxRQUMxQnhZLEdBQWV3WSxHQUFXLFVBQzFCbE0sR0FBZWtNLEdBQVcsU0FNMUJqZ0QsR0FBUXhxRSxLQUFLd3FFLE1BQ2JrZ0QsT0FDSSxLQUNBLEtBQ0EsS0FDQSxLQUNBLEtBQ0EsSUE2RUpDLEdBQVEzcUgsS0FBS20wRSxhQUVSSSxHQUFLM1IsVUFDREEsRUFBSSxJQUFNQSxFQUFJLEtBQVFBLFdBRzFCZ29ELFNBUUEveEgsS0FBS3F3RyxpQkFDQ3J3RyxLQUFLcTFHLGFBQWFNLGtCQU16QmtJLEVBQVNGLEVBSFRLLEVBQVU4VCxHQUFNOXhILEtBQUttbUgsZUFBaUIsSUFDdENKLEVBQWUrTCxHQUFNOXhILEtBQUtvbUgsT0FDMUJoTixFQUFlMFksR0FBTTl4SCxLQUFLcW1ILFdBSVZoVSxFQUFTMkwsRUFBVSxNQUNuQjNMLEVBQVN3TCxFQUFVLE9BQzVCLE1BQ0EsT0FRUG1VLEVBTEszZixFQUFTK0csRUFBUyxJQU12QmlJLEtBTE0sR0FNTjRRLEVBQUlsTSxFQUNKdDNELEVBQUlrdkQsRUFDSjd6RixFQUFJK3pGLEVBQ0p0OEcsRUFBSXk4RyxFQUFVQSxFQUFRenZCLFFBQVEsR0FBRzN0RixRQUFRLFNBQVUsSUFBTSxHQUN6RHN4SCxFQUFRbHlILEtBQUtveEgsZ0JBRVpjLFFBR00sVUFHUEMsRUFBWUQsRUFBUSxFQUFJLElBQU0sR0FDOUJFLEVBQVMxMkMsR0FBSzE3RSxLQUFLcW1ILFdBQWEzcUMsR0FBS3cyQyxHQUFTLElBQU0sR0FDcERHLEVBQVczMkMsR0FBSzE3RSxLQUFLb21ILFNBQVcxcUMsR0FBS3cyQyxHQUFTLElBQU0sR0FDcERJLEVBQVU1MkMsR0FBSzE3RSxLQUFLbW1ILGlCQUFtQnpxQyxHQUFLdzJDLEdBQVMsSUFBTSxVQUV4REMsRUFBWSxLQUNkSCxFQUFJSSxFQUFTSixFQUFJLElBQU0sS0FDdkIzUSxFQUFJK1EsRUFBUy9RLEVBQUksSUFBTSxLQUN2QjRRLEVBQUlJLEVBQVdKLEVBQUksSUFBTSxLQUN4QnhqRSxHQUFLM2tDLEdBQUt2b0IsRUFBSyxJQUFNLEtBQ3RCa3RELEVBQUk2akUsRUFBVTdqRSxFQUFJLElBQU0sS0FDeEIza0MsRUFBSXdvRyxFQUFVeG9HLEVBQUksSUFBTSxLQUN4QnZvQixFQUFJK3dILEVBQVUvd0gsRUFBSSxJQUFNLFFBRzdCZ3hILEdBQVU5TSxHQUFTcmlILG9CQUVmaXRHLDBCQTN0REdyd0csS0FBS3N3RyxhQTR0RFJoMUIsbUJBdlZBbjVFLEVBQWlCbkMsS0FBS3FyQyxrQkFFckI4NkUsY0FBZ0J5SyxHQUFRNXdILEtBQUttbUgsb0JBQzdCQyxNQUFnQndLLEdBQVE1d0gsS0FBS29tSCxZQUM3QkMsUUFBZ0J1SyxHQUFRNXdILEtBQUtxbUgsV0FFN0JMLGFBQWdCNEssR0FBUXp1SCxFQUFLNmpILGdCQUM3QmhJLFFBQWdCNFMsR0FBUXp1SCxFQUFLNjdHLFdBQzdCSCxRQUFnQitTLEdBQVF6dUgsRUFBSzA3RyxXQUM3QkYsTUFBZ0JpVCxHQUFRenVILEVBQUt3N0csU0FDN0J2RSxPQUFnQndYLEdBQVF6dUgsRUFBS2kzRyxVQUM3QnNNLE1BQWdCa0wsR0FBUXp1SCxFQUFLdWpILE9BRTNCMWxILFNBMlVIb1gsYUE3VFFxNEYsRUFBTzlyRyxVQUNaa3RILEdBQWM3d0gsS0FBTXl2RyxFQUFPOXJHLEVBQU8sT0E2VHJDMmtILGtCQXpUYTdZLEVBQU85ckcsVUFDakJrdEgsR0FBYzd3SCxLQUFNeXZHLEVBQU85ckcsR0FBUSxPQXlUdEN1dEgsWUFwUEtsZCxPQUNKaDBHLEtBQUtxd0csaUJBQ0NqZCxRQUVQMnlCLEVBQ0EzTSxFQUNBNE0sRUFBZWhtSCxLQUFLbW1ILGlCQUlWLGFBRk5wUyxFQUFlQyxLQUVZLFlBQVZBLEdBQWlDLFNBQVZBLFdBQ3JDaDBHLEtBQUtvbUgsTUFBUUosRUFBZSxRQUMxQmhtSCxLQUFLcW1ILFFBQVUwSyxHQUFhaEwsR0FDN0IvUixPQUNDLGVBQWtCb0YsTUFDbEIsaUJBQWtCQSxFQUFTLE1BQzNCLGNBQWtCQSxFQUFTLGlCQUk3QnA1RyxLQUFLb21ILE1BQVFqL0csS0FBS3dxRSxNQUFNcS9DLEdBQWFoeEgsS0FBS3FtSCxVQUN6Q3JTLE9BQ0MsY0FBa0IrUixFQUFPLEVBQVFDLEVBQWUsV0FDaEQsYUFBa0JELEVBQWVDLEVBQWUsVUFDaEQsY0FBeUIsR0FBUEQsRUFBZUMsRUFBZSxTQUNoRCxnQkFBeUIsS0FBUEQsRUFBZUMsRUFBZSxRQUNoRCxnQkFBeUIsTUFBUEQsRUFBZUMsRUFBZSxRQUVoRCxxQkFBc0I3K0csS0FBSzBmLE1BQWEsTUFBUGsvRixHQUFnQkMsZ0JBQ3ZDLElBQUkxM0csTUFBTSxnQkFBa0IwbEcsUUF3Ti9DbWQsZUFBaUJBLE1BQ2pCQyxVQUFpQkEsTUFDakJDLFVBQWlCQSxNQUNqQkMsUUFBaUJBLE1BQ2pCQyxPQUFpQkEsTUFDakJDLFFBQWlCQSxNQUNqQkMsU0FBaUJBLE1BQ2pCQyxXQUFpQkEsTUFDakJDLFFBQWlCQSxNQUNqQmw1RywwQkExTkN6WSxLQUFLcXdHLFVBSU5yd0csS0FBS21tSCxjQUNRLE1BQWJubUgsS0FBS29tSCxNQUNKcG1ILEtBQUtxbUgsUUFBVSxHQUFNLE9BQ0ssUUFBM0IvVCxFQUFNdHlHLEtBQUtxbUgsUUFBVSxJQU5kanpCLFFBME5Qa3pCLHVCQXBUQXRJLEVBQVNILEVBQVNGLEVBQU8rSCxFQUFPOE0sRUFKaEN4TSxFQUFlaG1ILEtBQUttbUgsY0FDcEJKLEVBQWUvbEgsS0FBS29tSCxNQUNwQmhOLEVBQWVwNUcsS0FBS3FtSCxRQUNwQmxrSCxFQUFlbkMsS0FBS3FyQyxhQUtqQjI2RSxHQUFnQixHQUFLRCxHQUFRLEdBQUszTSxHQUFVLEdBQzFDNE0sR0FBZ0IsR0FBS0QsR0FBUSxHQUFLM00sR0FBVSxPQUNNLE1BQXZDMFgsR0FBUUUsR0FBYTVYLEdBQVUyTSxLQUN4QyxJQUNFLEtBS1JDLGFBQWVBLEVBQWUsTUFFZjNULEVBQVMyVCxFQUFlLE9BQ3ZDaEksUUFBZUEsRUFBVSxLQUVWM0wsRUFBUzJMLEVBQVUsTUFDbENILFFBQWVBLEVBQVUsS0FFVnhMLEVBQVN3TCxFQUFVLE1BQ2xDRixNQUFlQSxFQUFRLE1BRXBCdEwsRUFBU3NMLEVBQVEsTUFHUnRMLEVBQVMwZSxHQUFhaEwsT0FDN0J5TSxLQUNGMUIsR0FBUUUsR0FBYXdCLE1BR3JCbmdCLEVBQVMrRyxFQUFTLE9BQ2hCLEtBRUwyTSxLQUFTQSxJQUNUM00sT0FBU0EsSUFDVHNNLE1BQVNBLEVBRVAxbEgsU0E4UUhpa0Msd0JBaE1Hd2pGLEdBQWV6bkgsVUFpTWxCMFQsYUE5TFFzZ0csWUFDSkQsRUFBZUMsR0FDaEJoMEcsS0FBS3F3RyxVQUFZcndHLEtBQUtnMEcsRUFBUSxPQUFTNWdCLFFBNkwxQzR5QixhQUFpQkEsTUFDakJoSSxRQUFpQkEsTUFDakJILFFBQWlCQSxNQUNqQkYsTUFBaUJBLE1BQ2pCb0ksS0FBaUJBLE1BQ2pCRix3QkFoTEd4VCxFQUFTcnlHLEtBQUsrbEgsT0FBUyxPQWlMMUIzTSxPQUFpQkEsTUFDakJzTSxNQUFpQkEsTUFDakI0RixrQkEzR1dtSCxPQUNWenlILEtBQUtxd0csaUJBQ0Nyd0csS0FBS3ExRyxhQUFhTSxrQkFHekI1RixFQUFTL3ZHLEtBQUtxMUcsYUFDZEksV0E1RGlCaWQsRUFBZ0JySCxFQUFldGIsT0FDaER6a0QsRUFBV204RCxHQUFlaUwsR0FBZ0JwM0MsTUFDMUMwaUMsRUFBV3JzQyxHQUFNcm1CLEVBQVM0bEUsR0FBRyxNQUM3QnJULEVBQVdsc0MsR0FBTXJtQixFQUFTNGxFLEdBQUcsTUFDN0J2VCxFQUFXaHNDLEdBQU1ybUIsRUFBUzRsRSxHQUFHLE1BQzdCbkwsRUFBV3AwQyxHQUFNcm1CLEVBQVM0bEUsR0FBRyxNQUM3QjlYLEVBQVd6bkMsR0FBTXJtQixFQUFTNGxFLEdBQUcsTUFDN0J4TCxFQUFXL3pDLEdBQU1ybUIsRUFBUzRsRSxHQUFHLE1BRTdCcm9HLEVBQUltMUYsR0FBVzZULEdBQVdjLEtBQU8sSUFBSzNVLElBQ2xDQSxFQUFVNlQsR0FBV3R3SCxJQUFRLEtBQU15OEcsSUFDbkNILEdBQVcsSUFBa0IsTUFDN0JBLEVBQVVnVSxHQUFXL25HLElBQVEsS0FBTSt6RixJQUNuQ0YsR0FBVyxJQUFrQixNQUM3QkEsRUFBVWtVLEdBQVdwakUsSUFBUSxLQUFNa3ZELElBQ25Db0ksR0FBVyxJQUFrQixNQUM3QkEsRUFBVThMLEdBQVdudEcsSUFBUSxLQUFNcWhHLElBQ25DM00sR0FBVyxJQUFrQixNQUM3QkEsRUFBVXlZLEdBQVd4USxJQUFRLEtBQU1qSSxJQUNuQ3NNLEdBQVcsSUFBa0IsT0FBbUIsS0FBTUEsWUFFNUQsR0FBSzJGLElBQ0wsSUFBTXFILEVBQWlCLElBQ3ZCLEdBQUszaUIsV0EzQmdCam9HLEVBQVFnVixFQUFRdXVHLEVBQWU2RCxFQUFVbmYsVUFDekRBLEVBQU9rZixhQUFhbnlHLEdBQVUsSUFBS3V1RyxFQUFldmpILEVBQVFvbkgsSUEyQnhDbm9ILE1BQU0sS0FBTThoQixHQW9DeEIrcEcsQ0FBZTV5SCxNQUFPeXlILEVBQVkxaUIsVUFFM0MwaUIsTUFDUzFpQixFQUFPcWYsWUFBWXB2SCxLQUFNeTFHLElBRy9CMUYsRUFBT3FiLFdBQVczVixPQWdHckJnWCxZQUFpQnNGLE1BQ2pCenVILFNBQWlCeXVILE1BQ2pCaEYsT0FBaUJnRixNQUNqQmhpQixPQUFpQkEsTUFDakJzRixXQUFpQkEsTUFFakJ3ZCxZQUFjN2YsRUFBVSxzRkFBdUYrZSxPQUMvR2hKLEtBQU9BLEtBTUEsSUFBSyxFQUFHLEVBQUcsVUFDWCxJQUFLLEVBQUcsRUFBRyxjQUlaLElBQUtyUyxPQUNMLElBbHpITywyQkFtekhQLElBQUssU0FBVWpILEVBQU9ob0csRUFBTzhYLEtBQ2hDeWpCLEdBQUssSUFBSTk2QixLQUE2QixJQUF4QjBlLFdBQVc2b0YsRUFBTyxVQUU3QixJQUFLLFNBQVVBLEVBQU9ob0csRUFBTzhYLEtBQ2hDeWpCLEdBQUssSUFBSTk2QixLQUFLb3FHLEVBQU03QyxRQU16Qm43RCxRQUFVLFdBRUF5c0UsS0FFVjk0RixHQUF3QmhhLEtBQ3hCa1Usc0JBL3pES21qRyxHQUFPLGNBRkE5ekcsTUFBTTNOLEtBQUsyRCxVQUFXLE9BazBEbENKLHNCQTF6REtrK0csR0FBTyxhQUZBOXpHLE1BQU0zTixLQUFLMkQsVUFBVyxPQTZ6RGxDVyxJQXh6REksa0JBQ0NELEtBQUtDLElBQU1ELEtBQUtDLE9BQVUsSUFBSUQsUUF3ekRuQ2dvRyxJQUF3QkwsSUFDeEJtZCxjQW5qQmV2ZCxVQUNWc1IsR0FBb0IsSUFBUnRSLE1BbWpCakIySixnQkFqY2V0SixFQUFRbnBHLFVBQ2xCNm5ILEdBQWUxZSxFQUFRbnBHLEVBQU8sYUFpY25DZ3BHLE9BQXdCQSxJQUN4QkksT0FBd0JrUCxLQUN4Qm9KLFFBQXdCN1csSUFDeEJsbUQsU0FBd0JtOEQsS0FDeEJyVixTQUF3QkEsSUFDeEIrSixrQkEvYmlCd1MsRUFBYzdlLEVBQVFucEcsVUFDbEMrbkgsR0FBaUJDLEVBQWM3ZSxFQUFRbnBHLEVBQU8sZUErYm5EZ25ILDRCQXRqQks1TSxHQUFZaDZHLE1BQU0sS0FBTVMsV0FBV21tSCxlQXVqQnhDdFksV0FBd0I2SixLQUN4QnFILFdBQXdCQSxLQUN4QnBOLHFCQXZjb0JySixFQUFRbnBHLFVBQ3ZCNm5ILEdBQWUxZSxFQUFRbnBHLEVBQU8sa0JBdWNuQ3MxRyxxQkE1Ym9CMFMsRUFBYzdlLEVBQVFucEcsVUFDckMrbkgsR0FBaUJDLEVBQWM3ZSxFQUFRbnBHLEVBQU8sa0JBNGJuRHc0RyxhQUF3QkEsS0FDeEIyVCxzQkE5a0ZnQnp5SCxFQUFNa2YsTUFDVixNQUFWQSxFQUFnQixLQUNad3dGLEVBQVFnakIsRUFBV3hmLEVBQWVrTCxHQUdyQixTQURMSSxHQUFXeCtHLFFBRUoweUgsRUFBVTFULFdBRXBCL0wsRUFBYUMsRUFBY2gwRixNQUMzQixJQUFJazBGLEVBQU9sMEYsSUFDYisvRixhQUFlWixHQUFRcitHLE1BQ3RCQSxHQUFRMHZHLEtBR0cxdkcsUUFHRSxNQUFqQnErRyxHQUFRcitHLEtBQzBCLE1BQTlCcStHLEdBQVFyK0csR0FBTWkvRyxnQkFDTmovRyxHQUFRcStHLEdBQVFyK0csR0FBTWkvRyxhQUNOLE1BQWpCWixHQUFRcitHLFdBQ1JxK0csR0FBUXIrRyxXQUlwQnErRyxHQUFRcitHLE1Bc2pGYnErRywwQkExaEZLMTVHLEVBQUswNUcsT0EyaEZWeEMsdUJBcGNzQnlTLEVBQWM3ZSxFQUFRbnBHLFVBQ3ZDK25ILEdBQWlCQyxFQUFjN2UsRUFBUW5wRyxFQUFPLG9CQW9jbkRvdEcsZUFBd0JBLElBQ3hCaWYsOEJBL0wrQkMsZUFDUnh2SCxJQUFyQnd2SCxFQUNPdGhELEdBRXNCLG1CQUF0QnNoRCxPQUNDQSxHQUNELE1BMExUQywrQkFwTGdDQyxFQUFXQyxlQUNmM3ZILElBQTFCb3VILEdBQVdzQixVQUdEMXZILElBQVYydkgsRUFDT3ZCLEdBQVdzQixPQUVYQSxHQUFhQyxFQUNOLE1BQWRELE9BQ1dSLEdBQUtTLEVBQVEsSUFFckIsT0EwS0x4SSx3QkE3M0NxQnlJLEVBQVVsckgsT0FDN0I4K0csRUFBT29NLEVBQVNwTSxLQUFLOStHLEVBQUssUUFBUSxVQUMvQjgrRyxHQUFRLEVBQUksV0FDWEEsR0FBUSxFQUFJLFdBQ1pBLEVBQU8sRUFBSSxVQUNYQSxFQUFPLEVBQUksVUFDWEEsRUFBTyxFQUFJLFVBQ1hBLEVBQU8sRUFBSSxXQUFhLGNBdTNDOUI3akgsVUFBd0I2SyxLQUd4QnFsSCwwQkFDYywwQ0FDUSx3Q0FDTCwrQkFDYixrQkFDQSxxQkFDUSxtQkFDTCxvQkFDSCxtQkFDQyxXQUdKOStGLEVBcC9JeUUwVCxLQ0FoRnFyRixTQUFTL21ELE9BQ2IrbUQsU0FBMkIsbUJBQVhBLFNBQXdCQSxTQUFTL3lILE9BQU8reUgsT0FReEQsSUFBSUMsWUFBY2o3RixPQUFPazdGLG1CQUFxQixpQkFDMUNDLFlBQWNuN0YsT0FBTzV2QixrQkFBb0IsaUJBRXpDZ3JILGdDQUVNLE9BQ0YsU0FDRSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksR0FBSSxJQUFLLElBQUssc0JBRy9CLE9BQ0YsV0FDRSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUkscUJBR2pCLE9BQ0YsV0FDRSxFQUFHLEVBQUcsRUFBRyxHQUFJLEdBQUksbUJBR2pCLE9BQ0YsWUFDRSxFQUFHLEVBQUcsRUFBRyxFQUFHLGtCQUdaLE9BQ0YsYUFDRSxFQUFHLEVBQUcsa0JBR04sT0FDRixjQUNFLEVBQUcsRUFBRyxFQUFHLG1CQUdULE9BQ0YsY0FDRSxFQUFHLEVBQUcscUJBR04sT0FDRixjQUNFLEVBQUcsRUFBRyxFQUFHLGtCQUdULE9BQ0YsU0FJSkMsTUFBUTl3SCxPQUFPa0MsS0FBSzJ1SCxXQUV4QixTQUFTRSxPQUFPaHJHLEVBQUdZLFVBQ1haLEVBQUlZLEVBR1osU0FBU3FxRyxZQUFZanlHLE9BR2hCb0MsRUFBR3lqRCxFQUFNNy9DLEVBRlR4RCxLQUNBb3FHLFNBR0N4cUcsRUFBSSxFQUFHeWpELEVBQU83bEQsRUFBTWpiLE9BQVFxZCxFQUFJeWpELElBQVF6akQsRUFFdkNJLElBREV4QyxFQUFNb0MsUUFFUDRELElBQVEsSUFDVDVhLEtBQUs0YSxXQUlKNG1HLEVBa0JSLFNBQVNzRixpQkFBaUJDLEVBQVk3eEcsRUFBSy9hLEVBQUs2c0gsTUFDMUIsV0FBakJBLElBQThCRCxFQUFXcHRILGVBRTFDNGpILEtBQU1yb0csRUFBS3d0QyxJQUFLLElBQ2hCNjZELEtBQU1wakgsRUFBS3VvRCxJQUFLLFFBTWYxckMsRUFBR3lqRCxFQUFNbG9CLEVBQU0wMEUsRUFBTTUwRixFQUZyQjYwRixLQUNBdHlHLEdBQVNNLE9BR1I4QixFQUFJLEVBQUd5akQsRUFBT3NzRCxFQUFXcHRILE9BQVFxZCxFQUFJeWpELElBQVF6akQsS0FDMUMrdkcsRUFBVy92RyxJQUNQOUIsR0FBTyt4RyxFQUFPOXNILEtBQ2xCNkYsS0FBS2luSCxTQUlQam5ILEtBQUs3RixHQUVONmMsRUFBSSxFQUFHeWpELEVBQU83bEQsRUFBTWpiLE9BQVFxZCxFQUFJeWpELElBQVF6akQsSUFDckNwQyxFQUFNb0MsRUFBSSxLQUNWcEMsRUFBTW9DLEVBQUksS0FDVnBDLEVBQU1vQyxRQUdBeGdCLElBQVQrN0MsUUFBK0IvN0MsSUFBVDY3QixHQUFzQm40QixLQUFLd3FFLE9BQU9yeUMsRUFBT2tnQixHQUFRLEtBQU8wMEUsS0FDM0VqbkgsTUFBTXU5RyxLQUFNMEosRUFBTXZrRSxJQUFLMXJDLEdBQUt5akQsRUFBTyxZQUlwQ3lzRCxFQUlSLFNBQVNDLE9BQU9ELEVBQU9ydUgsRUFBS25DLFdBR3ZCMHdILEVBQUtDLEVBQUlDLEVBRlRDLEVBQUssRUFDTGhrRCxFQUFLMmpELEVBQU12dEgsT0FBUyxFQUdqQjR0SCxHQUFNLEdBQUtBLEdBQU1oa0QsR0FBSSxNQUV0QjJqRCxLQURFSyxFQUFLaGtELEdBQU8sR0FDRixJQUFNLE9BQ2xCMmpELEVBQU1FLElBRU5DLFNBRUlFLEdBQUksS0FBTWhrRCxHQUFJK2pELEdBQ2hCLEdBQUlBLEVBQUd6dUgsR0FBT25DLElBQ2Ywd0gsRUFBTSxNQUNMLENBQUEsS0FBSUMsRUFBR3h1SCxHQUFPbkMsVUFHWjZ3SCxHQUFJRixFQUFJOWpELEdBQUkrakQsS0FGZkYsRUFBTSxVQU9MRyxHQUFJRCxFQUFJL2pELEdBQUksTUFTckIsU0FBU3ovRCxjQUFZb2pILEVBQU9NLEVBQU16c0QsRUFBTTBzRCxPQUNuQ3AwRSxFQUFROHpFLE9BQU9ELEVBQU9NLEVBQU16c0QsR0FHNUJ4b0IsRUFBUWMsRUFBTWswRSxHQUFpQmwwRSxFQUFNa3dCLEdBQStCbHdCLEVBQU1rMEUsR0FBaENMLEVBQU1BLEVBQU12dEgsT0FBUyxHQUE1Q3V0SCxFQUFNLEdBQ3pCNzBGLEVBQVFnaEIsRUFBTWswRSxHQUFpQmwwRSxFQUFNa3dCLEdBQStCbHdCLEVBQU1rd0IsR0FBaEMyakQsRUFBTUEsRUFBTXZ0SCxPQUFTLEdBQTVDdXRILEVBQU0sR0FFekJRLEVBQU9yMUYsRUFBS20xRixHQUFRajFFLEVBQUtpMUUsR0FDekIxakQsRUFBUTRqRCxHQUFRM3NELEVBQU94b0IsRUFBS2kxRSxJQUFTRSxFQUFPLEVBQzVDcGpILEdBQVUrdEIsRUFBS28xRixHQUFRbDFFLEVBQUtrMUUsSUFBUzNqRCxTQUVsQ3Z4QixFQUFLazFFLEdBQVFuakgsRUFPckIsU0FBU3FqSCxVQUFVanhILEVBQU80TSxPQUNyQnNrSCxFQUFTdGtILEVBQVFza0gsT0FDakIva0IsRUFBU3YvRixFQUFRc2tILFFBQVV0a0gsRUFBUXUvRixhQUVqQixtQkFBWCtrQixFQUNIQSxFQUFPbHhILEdBR00saUJBQVZBLEdBQXdDLGlCQUFYbXNHLEVBQ2hDeWpCLFNBQU81dkgsRUFBT21zRyxJQUdoQm5zRyxhQUFpQjR2SCxhQUNkQSxTQUFPNXZILElBR1pBLEVBQU0wc0csVUFDRjFzRyxFQUtjLG1CQUFYbXNHLEVBQ0hBLEVBQU9uc0csR0FHUkEsR0FHUixTQUFTd2MsUUFBTXN2RixFQUFPdDhCLE1BQ2pCL0wsVUFBUTRULGNBQWN5MEIsVUFDbEIsU0FHSmwvRixFQUFVNGlFLEVBQU01aUUsUUFBUWk2RyxLQUN4QjdtSCxFQUFRaXhILFVBQVV6aEQsRUFBTWtnQixjQUFjb2MsR0FBUWwvRixVQUM3QzVNLEVBQU0wc0csV0FJUDkvRixFQUFRb2hFLFNBQ0xnNUMsUUFBUXA2RyxFQUFRb2hFLE9BR2hCaHVFLEVBQU04VSxXQVBMLEtBY1QsU0FBU3E4RyxrQkFBa0IzeUcsRUFBSy9hLEVBQUt3c0csRUFBTW1oQixPQUt0Qzl3RyxFQUFHeWpELEVBQU1zZ0MsRUFKVDFuRCxFQUFRbDVDLEVBQU0rYSxFQUNkNnlHLEVBQVdyQixVQUFVL2YsR0FDckJvUyxFQUFlZ1AsRUFBU3ZpSCxLQUN4QndpSCxFQUFRRCxFQUFTQyxVQUdoQkEsU0FDRzl0SCxLQUFLa2hHLEtBQUsvbkQsR0FBU3kwRSxFQUFXL08sUUFHakMvaEcsRUFBSSxFQUFHeWpELEVBQU91dEQsRUFBTXJ1SCxPQUFRcWQsRUFBSXlqRCxNQUMzQnV0RCxFQUFNaHhHLEtBQ1g5YyxLQUFLa2hHLEtBQUsvbkQsR0FBUzBsRSxFQUFlaGUsS0FBWStzQixNQUZOOXdHLFVBT3RDK2pGLEVBTVIsU0FBU2t0QiwwQkFBMEJDLEVBQVNoekcsRUFBSy9hLEVBQUsydEgsT0FFakQ5d0csRUFBRyt3RyxFQUFVaHRCLEVBRGJ0Z0MsRUFBT2tzRCxNQUFNaHRILFdBR1pxZCxFQUFJMnZHLE1BQU05ckcsUUFBUXF0RyxHQUFVbHhHLEVBQUl5akQsRUFBTyxJQUFLempELFVBQ3JDMHZHLFVBQVVDLE1BQU0zdkcsS0FDVGd4RyxNQUFRRCxFQUFTQyxNQUFNRCxFQUFTQyxNQUFNcnVILE9BQVMsR0FBSzhzSCxZQUVsRXNCLEVBQVNJLFFBQVVqdUgsS0FBS2toRyxNQUFNamhHLEVBQU0rYSxJQUFRNmxGLEVBQVNndEIsRUFBU3ZpSCxRQUFVc2lILFNBQ3BFbkIsTUFBTTN2RyxVQUlSMnZHLE1BQU1sc0QsRUFBTyxHQU1yQixTQUFTMnRELDJCQUEyQnBuQyxFQUFPa25DLEVBQVNoekcsRUFBSy9hLE9BR3BENmMsRUFBRzJ2RixFQUZIdG9ELEVBQVdpb0UsU0FBT2pvRSxTQUFTaW9FLFNBQU9uc0gsR0FBSzYvRyxLQUFLc00sU0FBT3B4RyxTQUlsRDhCLEVBSE0ydkcsTUFBTWh0SCxPQUdELEVBQUdxZCxHQUFLMnZHLE1BQU05ckcsUUFBUXF0RyxHQUFVbHhHLFNBQ3hDMnZHLE1BQU0zdkcsR0FDVDB2RyxVQUFVL2YsR0FBTXdoQixRQUFVOXBFLEVBQVM0bEUsR0FBR3RkLElBQVMzbEIsRUFBTXJuRixjQUNqRGd0RyxTQUlGZ2dCLE1BQU11QixFQUFVdkIsTUFBTTlyRyxRQUFRcXRHLEdBQVcsR0FHakQsU0FBU0csbUJBQW1CMWhCLE9BQ3RCLElBQUkzdkYsRUFBSTJ2RyxNQUFNOXJHLFFBQVE4ckYsR0FBUSxFQUFHbHNDLEVBQU9rc0QsTUFBTWh0SCxPQUFRcWQsRUFBSXlqRCxJQUFRempELEtBQ2xFMHZHLFVBQVVDLE1BQU0zdkcsSUFBSW14RyxjQUNoQnhCLE1BQU0zdkcsR0FXaEIsU0FBUzQ2QyxXQUFTMThDLEVBQUsvYSxFQUFLMnRILEVBQVV4a0gsT0FXakNpNkcsRUFWQStLLEVBQVdobEgsRUFBUWk2RyxLQUNuQjU2QixFQUFRMmxDLEVBQVMzaEIsTUFBUXNoQiwwQkFBMEJLLEVBQVNKLFFBQVNoekcsRUFBSy9hLEVBQUsydEgsR0FDL0VsbEMsRUFBUXlsQyxtQkFBbUIxbEMsR0FDM0J1WSxFQUFXL2dDLFVBQVFDLGVBQWVrdUQsRUFBU3B0QixTQUFVb3RCLEVBQVNDLGNBQzlEbmEsRUFBb0IsU0FBVnpyQixHQUFtQjJsQyxFQUFTckssV0FDdEN1SyxFQUFvQmxsSCxFQUFRMDlFLE1BQU00QixNQUFNc1EsUUFDeEM2MEIsRUFBV3JCLFVBQVUvakMsR0FDckI4bEMsRUFBUW5DLFNBQU9weEcsR0FDZjRNLEVBQU93a0csU0FBT25zSCxHQUNkNm1GLFNBR0NrYSxNQUNPMnNCLGtCQUFrQjN5RyxFQUFLL2EsRUFBS3dvRixFQUFPbWxDLElBSTNDMVosTUFDS3FhLEVBQU14SyxXQUFXN1AsS0FDbEJ0c0YsRUFBS204RixXQUFXN1AsTUFJaEJxYSxFQUFNL0ssUUFBUXRQLEVBQVUsTUFBUXpyQixNQUNqQzdnRSxFQUFLNDdGLFFBQVF0UCxFQUFVLE1BQVF6ckIsSUFHM0J4b0YsS0FDTGdRLElBQUksRUFBR3c0RSxLQUdOMmpDLFNBQU9tQyxHQUVWRCxHQUFxQjVsQyxJQUFVd3JCLElBQVlrYSxFQUFTNWpELFVBSWxEZzVDLFFBQVE5NkIsS0FDUno0RSxRQUFRcytHLEVBQVFsTCxJQUFTd0ssRUFBU3ZpSCxLQUFPMDFGLElBQWFBLEVBQVV2WSxJQUcvRDQ2QixFQUFPejdGLEVBQU15N0YsRUFBS3B6RyxJQUFJK3dGLEVBQVV2WSxLQUNoQzNpRixNQUFNdTlHLFlBR1B2OUcsTUFBTXU5RyxHQUVMdjhCLEVBT1IsU0FBUzBuQyxlQUFleEIsRUFBT2xtQyxFQUFPOXJFLEVBQUsvYSxFQUFLbUosT0FHM0NxbEgsRUFBT0MsRUFGUDlrRSxFQUFPLEVBQ1B2UCxFQUFRLFNBR1JqeEMsRUFBUWdCLFFBQVUwOEUsRUFBTXJuRixTQUN0QjJKLEVBQVFpNkcsS0FBS3JvRyxRQUNUOHJFLEVBQU1ybkYsT0FBUyxFQUFJcW5GLEVBQU0sR0FBSzdtRixJQUM5QjZtRixFQUFNLE1BRWJsOUUsY0FBWW9qSCxFQUFPLE9BQVF5QixFQUFPLE9BQ2xDN2tILGNBQVlvakgsRUFBTyxPQUFRMEIsRUFBTyxRQUMvQixHQUVBdGxILEVBQVFpNkcsS0FBS3BqSCxRQUNUNm1GLEVBQU1BLEVBQU1ybkYsT0FBUyxLQUNyQnFuRixFQUFNcm5GLE9BQVMsRUFBSXFuRixFQUFNQSxFQUFNcm5GLE9BQVMsR0FBS3ViLEtBRXBEcFIsY0FBWW9qSCxFQUFPLE9BQVF5QixFQUFPLE9BQ2xDN2tILGNBQVlvakgsRUFBTyxPQUFRMEIsRUFBTyxRQUMvQixLQUlFOWtFLEtBQU1BLEVBQU12UCxNQUFPQSxHQUc1QixTQUFTczBFLG9CQUFvQjkrRyxFQUFRKytHLE9BRWhDOXhHLEVBQUd5akQsRUFBTS9qRSxFQUFPa3NGLEVBRGhCNUIsU0FHQ2hxRSxFQUFJLEVBQUd5akQsRUFBTzF3RCxFQUFPcFEsT0FBUXFkLEVBQUl5akQsSUFBUXpqRCxJQUNyQ2pOLEVBQU9pTixPQUNQOHhHLEdBQVlweUgsS0FBVzR2SCxTQUFPNXZILEdBQU9nbkgsUUFBUW9MLEtBRS9DOW9ILFlBQ0V0SixRQUNBa3NGLFdBSUY1QixFQUdSLFNBQVMrbkMscUJBQXFCN3pILEVBQU1vekgsT0FDL0J0eEcsRUFBR2d5RyxFQUFZQyxFQUNmeHVELEVBQU92bEUsRUFBS3lFLFdBSVhxZCxFQUFJLEVBQUdBLEVBQUl5akQsRUFBTXpqRCxJQUFLLElBRU8sT0FEcEIyd0csVUFBVXp5SCxFQUFLOGhCLEdBQUlzeEcsSUFDakJ0USxvQkFDUCw0QkFFb0IsSUFBeEJnUixFQUFXalIsVUFBMEMsSUFBeEJpUixFQUFXbFIsVUFBd0MsSUFBdEJrUixFQUFXN1IsWUFDOUQsVUFHUjhSLEVBQ0ksd0JBRUQsY0FHUixlQUFpQixlQWdFWkMsRUFBWXp0QixXQUFNdC9FLG1CQUNULGVBQ05tcUcsZUFDRSxJQUFJamxILE1BQU0sNklBR1pxMEYsK0JBRUN2L0YsVUFBVWlnRixXQUFXeC9FLEtBQUs3RCxjQUd6QixlQUVIdVEsRUFES3ZRLEtBQ1F1USxlQUdiQSxFQUFRaTZHLE1BQVFqNkcsRUFBUWk2RyxLQUFLMWEsZ0JBQ3hCeGlGLEtBQUssMEVBR1BvN0UsV0FBTXRsRyxVQUFVc3NCLE9BQU8zb0IsTUFSckIvRyxLQVErQndILDBCQU0xQixTQUFTMnJGLFVBQ25CQSxRQUEyQjF2RixJQUFmMHZGLEVBQVNyN0QsTUFDYnE3RCxFQUFTcjdELEdBRWQ0d0UsV0FBTXRsRyxVQUFVaXdGLGNBQWN4dkYsS0FBSzdELEtBQU1tekYsd0JBRzVCLGVBVWhCbHZFLEVBQUd1b0IsRUFBR2s3QixFQUFNb2hCLEVBQU0zbUYsRUFBTWkwSCxFQVR4QjV0RCxFQUFLeG9FLEtBQ0xnbUUsRUFBUXdDLEVBQUd4QyxNQUNYdXZELEVBQVcvc0QsRUFBR2o0RCxRQUFRaTZHLEtBQ3RCNVcsRUFBTzJoQixFQUFTM2hCLE1BQVEsTUFDeEJ6eEYsRUFBTXV4RyxZQUNOdHNILEVBQU1vc0gsWUFDTlEsS0FDQTd0RCxLQUNBTyxTQUlDemlELEVBQUksRUFBR3lqRCxFQUFPMUIsRUFBTTdqRSxLQUFLdWtFLE9BQU85L0QsT0FBUXFkLEVBQUl5akQsSUFBUXpqRCxJQUNqRGhYLEtBQUtrVCxRQUFNNmxELEVBQU03akUsS0FBS3VrRSxPQUFPemlELEdBQUl1a0QsUUFJcEN2a0QsRUFBSSxFQUFHeWpELEdBQVExQixFQUFNN2pFLEtBQUtna0UsY0FBZ0J2L0QsT0FBUXFkLEVBQUl5akQsSUFBUXpqRCxLQUM5RCtoRCxFQUFNK2lCLGlCQUFpQjlrRSxRQUNuQitoRCxFQUFNN2pFLEtBQUtna0UsU0FBU2xpRCxHQUFHOWhCLEtBRzFCaWxFLFVBQVE5aUUsU0FBU25DLEVBQUssVUFDaEI4aEIsTUFFSnVvQixFQUFJLEVBQUdzOEMsRUFBTzNtRixFQUFLeUUsT0FBUTRsQyxFQUFJczhDLElBQVF0OEMsSUFDL0Jyc0IsUUFBTWhlLEVBQUtxcUMsR0FBSWc4QixLQUNoQnY3RCxLQUFLbXBILEtBQ1BueUcsR0FBR3VvQixHQUFLNHBGLFNBR1BucEgsS0FBS2xHLE1BQU1pdEgsRUFBWXR0RCxLQUN6QnppRCxHQUFLeWlELEVBQU9sMUQsTUFBTSxVQUduQnlTLE1BSVB5aUQsRUFBTzkvRCxXQUVEa3RILFlBQVlwdEQsR0FBUXpvRCxLQUFLNDFHLFVBQzVCMXNILEtBQUtnYixJQUFJQSxFQUFLdWtELEVBQU8sTUFDckJ2L0QsS0FBS0MsSUFBSUEsRUFBS3MvRCxFQUFPQSxFQUFPOS9ELE9BQVMsS0FHeENvdEgsRUFBV3B0SCxXQUNEa3RILFlBQVlFLEdBQVkvMUcsS0FBSzQxRyxVQUNwQzFzSCxLQUFLZ2IsSUFBSUEsRUFBSzZ4RyxFQUFXLE1BQ3pCN3NILEtBQUtDLElBQUlBLEVBQUs0c0gsRUFBV0EsRUFBV3B0SCxPQUFTLE9BRzlDdVosUUFBTW8xRyxFQUFTcHpHLElBQUtxbUQsSUFBT3JtRCxJQUMzQmhDLFFBQU1vMUcsRUFBU251SCxJQUFLb2hFLElBQU9waEUsSUFHM0IrYSxJQUFRdXhHLGFBQWVILFdBQVM1SSxRQUFRL1csR0FBUXp4RixJQUNoRC9hLElBQVFvc0gsYUFBZUQsV0FBU3ZJLE1BQU1wWCxHQUFRLEVBQUl4c0csSUFHckQrYSxJQUFNaGIsS0FBS2diLElBQUlBLEVBQUsvYSxLQUNwQkEsSUFBTUQsS0FBS0MsSUFBSSthLEVBQU0sRUFBRy9hLEtBR3hCaXZILFlBQWM3dEQsRUFBR2dQLGlCQUNqQjgrQyxZQUNBQyxrQkFDSXZDLFdBQ0k3dEQsU0FDRk8sZUFJRSxlQVFQemlELEVBQUd5akQsRUFBTTB1RCxFQVBUNXRELEVBQUt4b0UsS0FDTG1pQixFQUFNcW1ELEVBQUdybUQsSUFDVC9hLEVBQU1vaEUsRUFBR3BoRSxJQUNUbUosRUFBVWk0RCxFQUFHajRELFFBQ2JnbEgsRUFBV2hsSCxFQUFRaTZHLEtBQ25Cd0osS0FDQS9sQyxZQUdJMTlFLEVBQVEwOUUsTUFBTTFuRixZQUNqQixTQUNTaWlFLEVBQUcrdEQsWUFBWXAwSCxlQUV4QixXQUNTcW1FLEVBQUcrdEQsWUFBWTd2RCxpQkFFeEIsaUJBRVM3SCxXQUFTMThDLEVBQUsvYSxFQUFLb2hFLEVBQUdndUQsaUJBQWlCcjBHLEdBQU01UixPQUdwQyxVQUFuQkEsRUFBUW80RSxRQUFzQnFyQyxFQUFXcHRILFdBQ3RDb3RILEVBQVcsS0FDWEEsRUFBV0EsRUFBV3B0SCxPQUFTLE1BSWhDdVosUUFBTW8xRyxFQUFTcHpHLElBQUtxbUQsSUFBT3JtRCxJQUMzQmhDLFFBQU1vMUcsRUFBU251SCxJQUFLb2hFLElBQU9waEUsRUFHNUI2YyxFQUFJLEVBQUd5akQsRUFBT3NzRCxFQUFXcHRILE9BQVFxZCxFQUFJeWpELElBQVF6akQsS0FDckMrdkcsRUFBVy92RyxLQUNOOUIsR0FBT2kwRyxHQUFhaHZILEtBQzlCNkYsS0FBS21wSCxZQUlWajBHLElBQU1BLElBQ04vYSxJQUFNQSxJQUdOcXZILE1BQVFsQixFQUFTM2hCLE1BQVF5aEIsMkJBQTJCcG5DLEVBQU9zbkMsRUFBU0osUUFBUzNzRCxFQUFHcm1ELElBQUtxbUQsRUFBR3BoRSxPQUN4RnN2SCxXQUFhcEIsbUJBQW1COXNELEVBQUdpdUQsU0FDbkNILE9BQVN2QyxpQkFBaUJ2ckQsRUFBRyt0RCxZQUFZcDBILEtBQU1nZ0IsRUFBSy9hLEVBQUttSixFQUFRMGpILGdCQUNqRTBDLFNBQVdoQixlQUFlbnRELEVBQUc4dEQsT0FBUXJvQyxFQUFPOXJFLEVBQUsvYSxFQUFLbUosS0FDdERxbUgsYUFBZVoscUJBQXFCeHRELEVBQUcrdEQsWUFBWXAwSCxLQUFNb3pILEdBRXJETyxvQkFBb0I3bkMsRUFBT3psQixFQUFHa3VELDhCQUdwQixTQUFTL3ZILEVBQU9vakYsT0FFN0I1bkYsRUFES25DLEtBQ0tnbUUsTUFBTTdqRSxLQUNoQm96SCxFQUZLdjFILEtBRVN1USxRQUFRaTZHLEtBQ3RCL29ILEVBQVFVLEVBQUt1a0UsUUFBVS8vRCxFQUFReEUsRUFBS3VrRSxPQUFPOS9ELE9BQVN6RSxFQUFLdWtFLE9BQU8vL0QsR0FBUyxHQUN6RWhELEVBQVF4QixFQUFLZ2tFLFNBQVM0akIsR0FBYzVuRixLQUFLd0UsVUFFekN5Z0UsVUFBUTlpRSxTQUFTWCxPQU5aM0QsS0FPR3F6RixjQUFjMXZGLElBRXRCNHhILEVBQVNzQixjQUNMakMsVUFBVW56SCxFQUFPOHpILEdBQVV6bEIsT0FBT3lsQixFQUFTc0IsZUFFOUIsaUJBQVZwMUgsRUFDSEEsRUFHRG16SCxVQUFVbnpILEVBQU84ekgsR0FBVXpsQixPQWhCekI5dkcsS0FnQm1DNDJILGtDQU96QixTQUFTN25DLEVBQU1wb0YsRUFBT3NuRixFQUFPNm9DLE9BRTVDdm1ILEVBREt2USxLQUNRdVEsUUFDYmk2RyxFQUFPejdCLEVBQUt0MkUsVUFDWmd5RyxFQUFVbDZHLEVBQVFpNkcsS0FBS3VNLGVBQ3ZCQyxFQUFjdk0sRUFKVHpxSCxLQUlvQnkySCxPQUN6QlYsRUFMSy8xSCxLQUtVMDJILFdBQ2ZPLEVBQWN4TSxFQUFRc0wsR0FDdEJtQixFQUFZbm9DLEVBQUs5cUQsUUFBUTBtRixRQUFRb0wsR0FBV3Q5RyxVQUM1QzArRyxFQUFnQjVtSCxFQUFRMDlFLE1BQU00QixNQUM5QkEsRUFBUXNuQyxFQUFjaDNCLFNBQVc0MUIsR0FBYWtCLEdBQWV6TSxJQUFTME0sRUFDdEV6MUgsRUFBUXN0RixFQUFLK2dCLE9BQU9nbkIsSUFBa0NqbkMsRUFBUW9uQyxFQUFjRCxJQUM1RTFsQyxFQUFXekIsRUFBUXNuQyxFQUFnQjVtSCxFQUFRMDlFLE1BQU0yQixNQUNqRHduQyxFQUFZaHdELFVBQVFDLGVBQWVpcUIsRUFBU3JyRCxTQUFVcXJELEVBQVNDLHFCQUU1RDZsQyxFQUFZQSxFQUFVMzFILEVBQU9rRixFQUFPc25GLEdBQVN4c0Ysd0JBRy9CLFNBQVN3c0YsT0FFMUJocUUsRUFBR3lqRCxFQURIaEIsU0FHQ3ppRCxFQUFJLEVBQUd5akQsRUFBT3VtQixFQUFNcm5GLE9BQVFxZCxFQUFJeWpELElBQVF6akQsSUFDckNoWCxLQUFLak4sS0FBS3EzSCxtQkFBbUI5RCxTQUFPdGxDLEVBQU1ocUUsR0FBR3RnQixPQUFRc2dCLEVBQUdncUUsV0FHekR2bkIscUJBTVcsU0FBUzhqRCxPQUN2QmhpRCxFQUFLeG9FLEtBQ0x5UyxFQUFPKzFELEVBQUc2dEQsWUFBYzd0RCxFQUFHcUIsTUFBUXJCLEVBQUdzQixPQUN0Q3hpRSxFQUFRa2hFLEVBQUc2dEQsWUFBYzd0RCxFQUFHelgsS0FBT3lYLEVBQUd2WCxJQUN0Q3RCLEVBQU01K0MsY0FBWXkzRCxFQUFHOHRELE9BQVEsT0FBUTlMLEVBQU0sY0FFeENsakgsRUFBUW1MLEdBQVErMUQsRUFBR211RCxTQUFTNWxFLEtBQU9wQixJQUFRNlksRUFBR211RCxTQUFTNWxFLEtBQU8sRUFBSXlYLEVBQUdtdUQsU0FBU24xRSx5QkFHcEUsU0FBUzc5QyxFQUFPZ0QsRUFBT29qRixPQUVwQ3lnQyxFQUFPLGFBRUcvbUgsSUFBVmtELFFBQXdDbEQsSUFBakJzbUYsTUFIbEIvcEYsS0FJRXUySCxZQUFZcHdELFNBQVM0akIsR0FBY3BqRixJQUdqQyxPQUFUNmpILE1BQ0lycUcsUUFBTXhjLEVBUkwzRCxPQVdJLE9BQVR3cUgsU0FYS3hxSCxLQVlFczNILGtCQUFrQjlNLG9CQUliLFNBQVM3akgsT0FDckJzbkYsRUFBUWp1RixLQUFLMDBGLGtCQUNWL3RGLEdBQVMsR0FBS0EsRUFBUXNuRixFQUFNcm5GLE9BQ2xDNUcsS0FBS3MzSCxrQkFBa0JycEMsRUFBTXRuRixHQUFPaEQsT0FDcEMsdUJBR2dCLFNBQVMydkYsT0FDdEI5cUIsRUFBS3hvRSxLQUNMeVMsRUFBTysxRCxFQUFHNnRELFlBQWM3dEQsRUFBR3FCLE1BQVFyQixFQUFHc0IsT0FDdEN4aUUsRUFBUWtoRSxFQUFHNnRELFlBQWM3dEQsRUFBR3pYLEtBQU95WCxFQUFHdlgsSUFDdEN0QixHQUFPbDlDLEdBQVE2Z0YsRUFBUWhzRixHQUFTbUwsRUFBTyxJQUFNKzFELEVBQUdtdUQsU0FBUzVsRSxLQUFPLEVBQUl5WCxFQUFHbXVELFNBQVM1bEUsTUFBUXlYLEVBQUdtdUQsU0FBU24xRSxNQUNwR2dwRSxFQUFPejVHLGNBQVl5M0QsRUFBRzh0RCxPQUFRLE1BQU8zbUUsRUFBSyxlQUV2QzRqRSxTQUFPL0ksa0JBT0EsU0FBUy9vSCxPQUVuQjgxSCxFQURLdjNILEtBQ1V1USxRQUFRMDlFLE1BQ3ZCdXBDLEVBRkt4M0gsS0FFZTJvQixJQUFJcTVELFlBQVl2Z0YsR0FBT29vRSxNQUMzQzJTLEVBQVFwVixVQUFRMlUsVUFBVXc3QyxFQUFVeGxDLGFBQ3BDSixFQUFjeHFGLEtBQUtnaUUsSUFBSXFULEdBQ3ZCaTdDLEVBQWN0d0gsS0FBS2tpRSxJQUFJbVQsVUFHbkJnN0MsRUFBaUI3bEMsRUFGTnZxQixVQUFRQyxlQUFla3dELEVBQVV0b0MsU0FBVXBpQixjQUFTbHFFLE9BQU91c0YsaUJBRXRCdW9DLG9CQU12QyxTQUFTQyxPQUN0Qmx2RCxFQUFLeG9FLEtBRUw4MkgsRUFBaUJ0dUQsRUFBR2o0RCxRQUFRaTZHLEtBQUt1TSxlQUFlOVIsWUFFaEQwUyxFQUFlbnZELEVBQUc2dUQsbUJBQW1COUQsU0FBT21FLEdBQWMsS0FBT1osR0FDakVVLEVBQWlCaHZELEVBQUdvdkQsY0FBY0QsR0FDbENFLEVBQWFydkQsRUFBR2dQLGVBQWlCaFAsRUFBR3FCLE1BQVFyQixFQUFHc0IsT0FFL0NpckQsRUFBVzV0SCxLQUFLMGYsTUFBTWd4RyxFQUFhTCxVQUNoQ3pDLEVBQVcsRUFBSUEsRUFBVyx1QkFJdEI3cUIsa0JBQWtCLE9BQVFpc0IsWUFoVzVCLHNCQVNJLGdCQVNOLHFCQUdDLFVBQ0EsUUFDRixTQUNDLGlCQUNRLGNBQ0gsVUFDSCwwQ0FJSyx1QkFDTCxtQkFDQSxjQUNGLFNBQ0QsYUFDQyxXQUNDLG1CQUNFLG1CQUNILDBCQUlHLFNBVUYsdUJBR0UsT0NsWWIsU0FBUzJCLHFCQUFxQjNrRCxFQUFPNGtELE9BR2hDdjRFLEVBQU0wMEUsRUFBTWp3RyxFQUFHeWpELEVBRmZ2bEQsRUFBTWd4RCxFQUFNcUUsZUFBaUJyRSxFQUFNdEosTUFBUXNKLEVBQU1ySixPQUNqRG1rQixFQUFROWEsRUFBTXVoQixlQUdiendFLEVBQUksRUFBR3lqRCxFQUFPcXdELEVBQU9ueEgsT0FBUXFkLEVBQUl5akQsSUFBUXpqRCxJQUN2QzljLEtBQUtnYixJQUFJQSxFQUFLNDFHLEVBQU85ekcsR0FBSzh6RyxFQUFPOXpHLEVBQUksUUFHdkNBLEVBQUksRUFBR3lqRCxFQUFPdW1CLEVBQU1ybkYsT0FBUXFkLEVBQUl5akQsSUFBUXpqRCxJQUNyQ2t2RCxFQUFNMGIsZ0JBQWdCNXFFLEtBQ3ZCQSxFQUFJLEVBQUk5YyxLQUFLZ2IsSUFBSUEsRUFBSyt4RyxFQUFPMTBFLEdBQVFyOUIsSUFDcEMreEcsU0FHRC94RyxFQVNSLFNBQVM2MUcseUJBQXlCcnhILEVBQU9zeEgsRUFBTzFuSCxPQUkzQ2tDLEVBQU1zK0QsRUFITm1uRCxFQUFZM25ILEVBQVE0bkgsYUFDcEI5dkgsRUFBUTR2SCxFQUFNRyxXQUNkbEUsRUFBTytELEVBQU1GLE9BQU9weEgsVUFHcEJ5Z0UsVUFBUTRULGNBQWNrOUMsTUFDbEJELEVBQU05MUcsSUFBTTVSLEVBQVE4bkgscUJBQ25COW5ILEVBQVErbkgsa0JBS1RKLEVBQVk3dkgsSUFDWCxVQUlEb0ssRUFBT3BLLFFBQ1Awb0UsUUFDQW1qRCxFQUFRemhILEVBQU8sR0FVeEIsU0FBUzhsSCwwQkFBMEI1eEgsRUFBT3N4SCxFQUFPMW5ILE9BTTVDakosRUFMQXl3SCxFQUFTRSxFQUFNRixPQUNmN0QsRUFBTzZELEVBQU9weEgsR0FDZDY0QyxFQUFPNzRDLEVBQVEsRUFBSW94SCxFQUFPcHhILEVBQVEsR0FBSyxLQUN2QzI0QixFQUFPMzRCLEVBQVFveEgsRUFBT254SCxPQUFTLEVBQUlteEgsRUFBT3B4SCxFQUFRLEdBQUssS0FDdkQ2eEgsRUFBVWpvSCxFQUFROG5ILDBCQUdULE9BQVQ3NEUsTUFHSTAwRSxHQUFpQixPQUFUNTBGLEVBQWdCMjRGLEVBQU10OUUsSUFBTXU1RSxFQUFPNTBGLEVBQU80MEYsSUFHN0MsT0FBVDUwRixNQUVJNDBGLEVBQU9BLEVBQU8xMEUsS0FHZDAwRSxHQUFTQSxFQUFPMTBFLEdBQVEsRUFBS2c1RSxVQUM1Qmw1RixFQUFPa2dCLEdBQVEsRUFBS2c1RSxFQUdkUCxFQUFNRyxpQkFDYjduSCxFQUFRK25ILG9CQUNSaHhILEdBOUtUdWxFLGNBQVNDLEtBQUssbUJBRU4sOEJBS0MsOEJBR2MsaUJBQ0wsV0FHUCw4QkFJVSxrQkFLWixjQUtURCxjQUFTQyxLQUFLLDZCQUVOLGFBQ0EsMEJBS0Msa0JBQ0ksNEJBSUEsWUFDSiw4QkFHYyxpQkFDTCxXQUdQLDhCQUlVLHlDQU9ILG9DQU1SLFNBQVNqbEQsRUFBTTFsQixPQUVqQnkxRixFQUFRLFVBRVIvdkUsRUFBS2poQixPQUFTLElBQ2JpaEIsRUFBSyxHQUFHbXdFLFNBQ0hud0UsRUFBSyxHQUFHbXdFLE9BQ043MUYsRUFBS3VrRSxPQUFPOS9ELE9BQVMsR0FBS2loQixFQUFLLEdBQUdsaEIsTUFBUXhFLEVBQUt1a0UsT0FBTzkvRCxXQUN4RHpFLEVBQUt1a0UsT0FBTzcrQyxFQUFLLEdBQUdsaEIsU0FJdkJpeEYsU0FHRCxTQUFTL3ZFLEVBQU0xbEIsVUFDRkEsRUFBS2drRSxTQUFTdCtDLEVBQUtraUUsY0FBY3RvRixPQUFTLElBQ3ZDLEtBQU9vbUIsRUFBS2l3RSxjQUc5QixhQUNBLE9BMkZSLG1CQUFpQixTQUFTL3FCLEtBRW5CNnpCLFlBQVl2WixJQUFNdGEsRUFBTXc1QixrQkFBa0JuOUUsd0JBRTlCZzlELFNBQVNxeUMscUJBRWQsZUFFUDV2QyxJQUVFMGQsa0JBQWtCbmpHLFVBQVVpZ0YsV0FBV3Q4RSxNQUhwQy9HLEtBRzhDd0gsY0FIOUN4SCxLQUtDeW1HLFdBQ0wvdkYsTUFOSTFXLEtBTU8wbUcsYUFBYWh3RixRQUN4QjJ3RSxLQUFNLFVBR0osU0FBUytiLE9BR1puL0UsRUFBR3lqRCxFQURIZ3hELEVBREsxNEgsS0FDTXltRyxVQUFVdGtHLFNBRGhCbkMsS0FJTjI0SCxPQUpNMzRILEtBSU00NEgsV0FFVjMwRyxFQUFJLEVBQUd5akQsRUFBT2d4RCxFQUFNOXhILE9BQVFxZCxFQUFJeWpELElBQVF6akQsRUFOcENqa0IsS0FPTG1uRyxjQUFjdXhCLEVBQU16MEcsR0FBSUEsRUFBR20vRSxrQkFJakIsU0FBU3kxQixFQUFXbHlILEVBQU95OEYsT0FDckM1NkIsRUFBS3hvRSxLQUNMZ21FLEVBQVF3QyxFQUFHeEMsTUFDWDZpQixFQUFPcmdCLEVBQUdpK0IsVUFDVjlpRixFQUFVNmtELEVBQUdrK0IsYUFDYjdILEVBQVNnNkIsRUFBVWg2QixXQUNuQmk2QixFQUFtQjl5RCxFQUFNejFELFFBQVE2MUUsU0FBU3l5QyxZQUVwQ3Q4QixRQUFVL3pCLEVBQUd1d0QsY0FBY2x3QyxFQUFLOGQsV0FDaENuSyxRQUFVaDBCLEVBQUd1d0QsY0FBY2x3QyxFQUFLK2QsV0FDaEMzYyxjQUFnQnpoQixFQUFHN2hFLFFBQ25CcWpGLE9BQVNyakYsSUFFVDIzRSxxQkFDSzM2RCxFQUFRbGlCLFlBQ2Z1a0UsRUFBTTdqRSxLQUFLdWtFLE9BQU8vL0QsaUJBQ1ZrNEYsRUFBTy9XLGNBQWdCK1csRUFBTy9XLGNBQWdCZ3hDLEVBQWlCaHhDLDhCQUM3RCtXLEVBQU9oWixnQkFBa0JnWixFQUFPaFosZ0JBQWtCemUsVUFBUTZCLHNCQUFzQnRsRCxFQUFRa2lFLGdCQUFpQmwvRSxFQUFPbXlILEVBQWlCanpDLDZCQUNySWdaLEVBQU9wWixZQUFjb1osRUFBT3BaLFlBQWNyZSxVQUFRNkIsc0JBQXNCdGxELEVBQVE4aEUsWUFBYTkrRSxFQUFPbXlILEVBQWlCcnpDLHlCQUNySG9aLEVBQU9sWixZQUFja1osRUFBT2xaLFlBQWN2ZSxVQUFRNkIsc0JBQXNCdGxELEVBQVFnaUUsWUFBYWgvRSxFQUFPbXlILEVBQWlCbnpDLGdCQUdoSXF6QyxzQkFBc0JILEVBQVdseUgsRUFBT3k4RixLQUVqQzNDLCtCQU1ZLFNBQVNvNEIsRUFBV2x5SCxFQUFPeThGLE9BQzdDNTZCLEVBQUt4b0UsS0FDTHFsQyxFQUFRd3pGLEVBQVV2NkMsT0FDbEIyNkMsRUFBU3p3RCxFQUFHMHdELGdCQUNabHhGLEVBQU9peEYsRUFBT0UsZUFDZHB4QyxFQUFha3hDLEVBQU96aEQsZUFDcEJ5Z0QsRUFBUXp2RCxFQUFHbXdELFFBQVVud0QsRUFBR293RCxXQUN4QlEsRUFBVTV3RCxFQUFHNndELHdCQUF3Qjd3RCxFQUFHN2hFLE1BQU9BLEdBQy9DMnlILEVBQVU5d0QsRUFBRyt3RCx3QkFBd0Ivd0QsRUFBRzdoRSxNQUFPQSxFQUFPc3hILEtBRXBEbHdDLFdBQWFBLElBQ2IvL0MsS0FBT283RCxFQUFRcDdELEVBQU9veEYsRUFBUXB4RixPQUM5QitoQyxFQUFJZ2UsRUFBYXFiLEVBQVFwN0QsRUFBT294RixFQUFRaDBELEtBQU9rMEQsRUFBUS92QyxTQUN2RHZmLEVBQUkrZCxFQUFhdXhDLEVBQVEvdkMsT0FBUzZaLEVBQVFwN0QsRUFBT294RixFQUFRaDBELE9BQ3pEMEUsT0FBU2llLEVBQWF1eEMsRUFBUTdtSCxVQUFPaFAsSUFDckNvbUUsTUFBUWtlLE9BQWF0a0YsRUFBWTYxSCxFQUFRN21ILHNCQU0vQixrQkFDVHpTLEtBQUt5bUcsVUFBVUcseUJBTU4sa0JBQ1Q1bUcsS0FBS3ltRyxVQUFVRSx1QkFNUixrQkFDUDNtRyxLQUFLKzRILGNBQWMvNEgsS0FBS3c1SCxrQ0FNakIsa0JBQ1B4NUgsS0FBSys0SCxjQUFjLzRILEtBQUt5NUgsK0JBU3BCLFNBQVMxcUcsT0FPaEI5SyxFQUFHNGtFLEVBTEg3aUIsRUFES2htRSxLQUNNZ21FLE1BRVhydkQsRUFISzNXLEtBRU0wNUgsZ0JBQ0tucEgsUUFBUW9HLFFBQ3hCK3dELE9BQWdCamtFLElBQVRzckIsRUFBcUJpM0MsRUFBTTdqRSxLQUFLZ2tFLFNBQVN2L0QsT0FBU21vQixFQUFPLEVBQ2hFNHFHLFNBR0MxMUcsRUFBSSxFQUFHQSxFQUFJeWpELElBQVF6akQsS0FDaEIraEQsRUFBTWdqQixlQUFlL2tFLElBQ25Cb2pFLEtBQU9yaEIsRUFBTStpQixpQkFBaUI5a0UsTUFDekIsSUFBWnROLElBQ1ksSUFBWkEsSUFBb0QsSUFBaENnakgsRUFBTzd4RyxRQUFRK2dFLEVBQUtueUUsYUFDNUJqVCxJQUFaa1QsU0FBeUNsVCxJQUFmb2xGLEVBQUtueUUsUUFBdUQsSUFBaENpakgsRUFBTzd4RyxRQUFRK2dFLEVBQUtueUUsWUFDcEV6SixLQUFLNDdFLEVBQUtueUUsY0FJWmlqSCxpQkFPTyxrQkFDUDM1SCxLQUFLNDVILGFBQWFoekgsc0JBVVgsU0FBU21qRixFQUFjMXBGLE9BQ2pDczVILEVBQVMzNUgsS0FBSzQ1SCxXQUFXN3ZDLEdBQ3pCcGpGLE9BQWtCbEQsSUFBVHBELEVBQ1ZzNUgsRUFBTzd4RyxRQUFRem5CLElBQ2QsU0FFZSxJQUFYc0csRUFDTGd6SCxFQUFPL3lILE9BQVMsRUFDaEJELFlBTU0sZUFTTHNkLEVBQUd5akQsRUFQSHlMLEVBREtuekUsS0FDTTA1SCxnQkFDWHRCLEVBRktwNEgsS0FFVzY1SCxnQkFDaEI5dkMsRUFISy9wRixLQUdhMkcsTUFDbEI2d0UsRUFBZXJFLEVBQU1xRSxlQUNyQmx3RSxFQUFRa3dFLEVBQWVyRSxFQUFNcGlCLEtBQU9vaUIsRUFBTWxpQixJQUMxQ3RXLEVBQU1yekMsR0FBU2t3RSxFQUFlckUsRUFBTXRKLE1BQVFzSixFQUFNckosUUFDbERpdUQsU0FHQzl6RyxFQUFJLEVBQUd5akQsRUFWSDFuRSxLQVVheW1HLFVBQVV0a0csS0FBS3lFLE9BQVFxZCxFQUFJeWpELElBQVF6akQsSUFDakRoWCxLQUFLa21FLEVBQU13Z0IsaUJBQWlCLEtBQU0xdkUsRUFBRzhsRSxlQUd2QzNpQixVQUFRNFQsY0FBYzdILEVBQU01aUUsUUFBUTRuSCxjQUN2Q0wscUJBQXFCM2tELEVBQU80a0QsSUFDM0IsU0FJS0EsUUFDRHp3SCxNQUNGcXpDLGFBQ095OUUsUUFDTGpsRCw0QkFRZ0IsU0FBUzRXLEVBQWNwakYsT0FVM0NzZCxFQUFHNjFHLEVBQU9DLEVBQVEveEYsRUFBTW85QixFQUFNM3lELEVBUjlCdXpELEVBREtobUUsS0FDTWdtRSxNQUNYNmlCLEVBRks3b0YsS0FFS3ltRyxVQUNWdHpCLEVBSEtuekUsS0FHTWs1SCxnQkFDWC95RCxFQUFXSCxFQUFNN2pFLEtBQUtna0UsU0FDdEJ4aUUsRUFBUXd2RSxFQUFNa2dCLGNBQWNsdEIsRUFBUzRqQixHQUFjNW5GLEtBQUt3RSxJQUN4RGdRLEVBQVV3OEQsRUFBTTVpRSxRQUFRb0csUUFDeEJELEVBQVFteUUsRUFBS255RSxNQUNicFAsRUFBUSxLQUdScVAsUUFBd0JsVCxJQUFaa1QsUUFBbUNsVCxJQUFWaVQsTUFDbkN1TixFQUFJLEVBQUdBLEVBQUk4bEUsSUFBZ0I5bEUsS0FDdkIraEQsRUFBTWdqQixlQUFlL2tFLElBRW5Cb2pFLEtBQ1R5eUMsRUFBTXBqSCxRQUFVQSxHQUNoQm9qSCxFQUFNOTRCLFdBQVd3NEIsb0JBQXNCcm1ELEVBQU1sa0QsSUFDN0MrMkMsRUFBTStpQixpQkFBaUI5a0UsT0FFZGt2RCxFQUFNa2dCLGNBQWNsdEIsRUFBU2xpRCxHQUFHOWhCLEtBQUt3RSxLQUN6Q2hELEVBQVEsR0FBS28ySCxFQUFTLEdBQU9wMkgsR0FBUyxHQUFLbzJILEVBQVMsUUFDL0NBLGFBTU41bUQsRUFBTXdnQixpQkFBaUJyc0YsZUFDdkI2ckUsRUFBTXdnQixpQkFBaUJyc0YsRUFBUTNELElBQ3ZCcWtDLEdBQVEsT0FJaEJBLE9BQ0FvOUIsU0FDRUEsRUFBTzN5RCxFQUFPLDRCQU9DLFNBQVNzM0UsRUFBY3BqRixFQUFPc3hILE9BRWxEMW5ILEVBQVUwbkgsRUFBTTlrRCxNQUFNNWlFLFFBQ3RCK3ZDLEVBQWlDLFNBQXpCL3ZDLEVBQVE0bkgsYUFDakJJLDBCQUEwQjV4SCxFQUFPc3hILEVBQU8xbkgsR0FDeEN5bkgseUJBQXlCcnhILEVBQU9zeEgsRUFBTzFuSCxHQUV0Q3lwSCxFQU5LaDZILEtBTVdpNkgsY0FBY2x3QyxFQU56Qi9wRixLQU0wQ3ltRyxVQUFVL3ZGLE9BQ3pENnlFLEVBQVNqcEMsRUFBTWg1QyxNQUFTZzVDLEVBQU13bUUsTUFBUWtULEVBQWUxNUUsRUFBTXdtRSxNQUFRLEVBQ25FcjBHLEVBQU90TCxLQUFLZ2IsSUFDZmlsRCxVQUFRQyxlQUFlOTJELEVBQVEycEgsZ0JBQWlCQyxFQUFBQSxHQUNoRDc1RSxFQUFNd21FLE1BQVF4bUUsRUFBTXl3QixtQkFHZHdZLEVBQVM5MkUsRUFBTyxPQUNoQjgyRSxFQUFTOTJFLEVBQU8sU0FDZDgyRSxPQUNGOTJFLFNBSUYsZUFFRHV6RCxFQURLaG1FLEtBQ01nbUUsTUFDWG1OLEVBRktuekUsS0FFTWs1SCxnQkFDWFIsRUFISzE0SCxLQUdNeW1HLFVBQVV0a0csS0FDckJ3aEIsRUFKSzNqQixLQUlRMG1HLGFBQ2JoL0IsRUFBT2d4RCxFQUFNOXhILE9BQ2JxZCxFQUFJLGdCQUVBeTdELE9BQU8wNkMsU0FBU3AwRCxFQUFNcjlDLElBQUtxOUMsRUFBTThTLFdBRWxDNzBELEVBQUl5akQsSUFBUXpqRCxFQUNiaUQsTUFBTWlzRCxFQUFNa2dCLGNBQWMxdkUsRUFBUXhoQixLQUFLOGhCLFFBQ3JDQSxHQUFHdWdGLGlCQUlIOWtCLE9BQU8yNkMsV0FBV3IwRCxFQUFNcjlDLFVBSTVCaTRFLFlBQVkwNUIsY0FBZ0J2dEQsRUFBTTZ6QixZQUFZdlosSUFBSWorRCx3QkFJdEMsa0JBQ1RwcEIsS0FBS3ltRyxVQUFVRSx5QkFNTixrQkFDVDNtRyxLQUFLeW1HLFVBQVVHLFlDdmR6Qi81QixjQUFTQyxLQUFLLHNCQUVOLCtCQUtDLGtCQUNJLFlBQ04sMEJBR0Usa0JBQ0ksVUFDTix5Q0FNRyxpQkFFQyxVQUVELFNBQVNqbEQsRUFBTTFsQixPQUNqQm80SCxFQUFlcDRILEVBQUtna0UsU0FBU3QrQyxFQUFLa2lFLGNBQWN0b0YsT0FBUyxHQUN6RCs0SCxFQUFZcjRILEVBQUtna0UsU0FBU3QrQyxFQUFLa2lFLGNBQWM1bkYsS0FBSzBsQixFQUFLbGhCLGNBQ3BENHpILEVBQWUsTUFBUTF5RyxFQUFLaXdFLE9BQVMsS0FBT2p3RSxFQUFLbXdFLE9BQVMsS0FBT3dpQyxFQUFVdHdELEVBQUksU0FPMUYsc0JBQWlCLFNBQVM2QyxLQUVuQjZ6QixZQUFZNjVCLE9BQVMxdEQsRUFBTXc1QixrQkFBa0JuOUUsd0JBSWpDZzlELFNBQVNzMEMsYUFLbEIsU0FBU3QzQixPQUNaNTZCLEVBQUt4b0UsS0FFTDI5RSxFQURPblYsRUFBR2krQixVQUNJdGtHLGVBR1ZtbUUsS0FBS3FWLEVBQVEsU0FBU1UsRUFBTzEzRSxLQUNqQ3dnRyxjQUFjOW9CLEVBQU8xM0UsRUFBT3k4RixvQkFPbEIsU0FBUy9rQixFQUFPMTNFLEVBQU95OEYsT0FDakM1NkIsRUFBS3hvRSxLQUNMNm9GLEVBQU9yZ0IsRUFBR2krQixVQUNWNUgsRUFBU3hnQixFQUFNd2dCLFdBQ2ZsRCxFQUFTbnpCLEVBQUd1d0QsY0FBY2x3QyxFQUFLOGQsU0FDL0IvSyxFQUFTcHpCLEVBQUd1d0QsY0FBY2x3QyxFQUFLK2QsU0FDL0JyMkYsRUFBVWk0RCxFQUFHbXlELHVCQUF1QnQ4QyxFQUFPMTNFLEdBQzNDeEUsRUFBT3FtRSxFQUFHaytCLGFBQWF2a0csS0FBS3dFLEdBQzVCaTBILEVBQVVweUQsRUFBRzdoRSxNQUVib2pFLEVBQUlxNUIsRUFBUXpILEVBQU9rL0IsbUJBQW1CLElBQU9sL0IsRUFBT2hJLGlCQUFpQyxxQkFBVHh4RixzQkFBQUEsSUFBb0JBLEVBQU9peEYsSUFBS3pzRixFQUFPaTBILEdBQ25INXdELEVBQUlvNUIsRUFBUXhILEVBQU91OUIsZUFBaUJ2OUIsRUFBT2pJLGlCQUFpQnh4RixFQUFNd0UsRUFBT2kwSCxLQUV2RXIrQixRQUFVWixJQUNWYSxRQUFVWixJQUNWM0QsU0FBVzFuRixJQUNYMDVFLGNBQWdCMndDLElBQ2hCNXdDLE9BQVNyakYsSUFDVDIzRSx3QkFDWS90RSxFQUFRczFFLDRCQUNadDFFLEVBQVFrMUUsd0JBQ1JsMUUsRUFBUW8xRSxzQkFDVnAxRSxFQUFReTJFLHFCQUNQejJFLEVBQVEyMkUsb0JBQ1YzMkUsRUFBUWk2RCxnQkFDVjQ0QixFQUFRLEVBQUk3eUYsRUFBUTA1RCxZQUN0QjQwQixFQUFPM2hCLE1BQVFoMkQsTUFBTTZpRCxJQUFNN2lELE1BQU04aUQsS0FDcENELElBQ0FDLEtBR0V5MkIsdUJBTVEsU0FBU3BpQixPQUNuQmg1QyxFQUFRZzVDLEVBQU1DLE9BQ2QvdEUsRUFBVTh0RSxFQUFNNFosV0FDZG9QLGdDQUNZaGlFLEVBQU13Z0QsNEJBQ1Z4Z0QsRUFBTW9nRCx3QkFDTnBnRCxFQUFNc2dELG1CQUNYdGdELEVBQU00a0MsVUFFVDRiLGdCQUFrQnplLFVBQVFDLGVBQWU5MkQsRUFBUSsyRixxQkFBc0JsZ0MsVUFBUXFiLGNBQWNseUUsRUFBUXMxRSxvQkFDckdKLFlBQWNyZSxVQUFRQyxlQUFlOTJELEVBQVFnM0YsaUJBQWtCbmdDLFVBQVFxYixjQUFjbHlFLEVBQVFrMUUsZ0JBQzdGRSxZQUFjdmUsVUFBUUMsZUFBZTkyRCxFQUFRaTNGLGlCQUFrQmozRixFQUFRbzFFLGVBQ3ZFMWIsT0FBUzE1RCxFQUFRMDVELE9BQVMxNUQsRUFBUWcwRSxvQ0FNakIsU0FBU2xHLEVBQU8xM0UsT0FVbkNzZCxFQUFHeWpELEVBQU01aEUsRUFSVGtnRSxFQURLaG1FLEtBQ01nbUUsTUFFWHJpRCxFQURXcWlELEVBQU03akUsS0FBS2drRSxTQUZqQm5tRSxLQUdpQjJHLE9BQ3RCazRGLEVBQVN4Z0IsRUFBTXdnQixXQUNmdHVGLEVBQVV5MUQsRUFBTXoxRCxRQUFRNjFFLFNBQVMvSCxNQUNqQzVqRSxFQUFVMnNELFVBQVE3MkQsUUFBUWtLLFFBQzFCdFksRUFBT3doQixFQUFReGhCLEtBQUt3RSxHQUNwQnFRLEtBSUFrWixTQUNJODFDLFlBQ0lyL0QsVUFDRmdkLGVBZkQzakIsS0FnQlMyRyxPQUdkM0IsR0FDSCxrQkFDQSxjQUNBLGNBQ0EsdUJBQ0EsbUJBQ0EsbUJBQ0EsY0FDQSxZQUNBLGFBQ0EsZ0JBR0lpZixFQUFJLEVBQUd5akQsRUFBTzFpRSxFQUFLNEIsT0FBUXFkLEVBQUl5akQsSUFBUXpqRCxNQUNyQ2pmLEVBQUtpZixJQUNHeEosR0FDYm9rRixFQUFPLzRGLEdBQ1A2ZCxFQUFRN2QsR0FDUnlLLEVBQVF6SyxJQUNOb3FCLEVBQVN2cEIsWUFJTnNqRSxPQUFTeHZELEdBQ2Zva0YsRUFBTzUwQixPQUNQOW5FLEVBQU9BLEVBQUsrbkUsT0FBSXptRSxFQUNoQmtnQixFQUFRc21ELE9BQ1IxNUQsRUFBUTA1RCxRQUNOLzVDLEVBQVN2cEIsR0FDTHFRLE1DbktWNjFELGNBQVNDLEtBQUssc0NBR0csZ0JBRUQsZUFHUix5QkFFUyxTQUFTOUcsT0FDcEI3a0UsT0FDQzhMLEtBQUssY0FBZ0IrNEQsRUFBTS8yQyxHQUFLLGlCQUVqQzlzQixFQUFPNmpFLEVBQU03akUsS0FDYmdrRSxFQUFXaGtFLEVBQUtna0UsU0FDaEJPLEVBQVN2a0UsRUFBS3VrRSxVQUVkUCxFQUFTdi9ELFdBQ1AsSUFBSXFkLEVBQUksRUFBR0EsRUFBSWtpRCxFQUFTLEdBQUdoa0UsS0FBS3lFLFNBQVVxZCxJQUN6Q2hYLEtBQUsscUNBQXVDazVELEVBQVMsR0FBRzBmLGdCQUFnQjVoRSxHQUFLLGFBQzlFeWlELEVBQU96aUQsTUFDTGhYLEtBQUt5NUQsRUFBT3ppRCxNQUViaFgsS0FBSyxrQkFJUEEsS0FBSyxTQUNIOUwsRUFBS3VnQixLQUFLLG9DQUlBLFNBQVNza0QsT0FDcEI3akUsRUFBTzZqRSxFQUFNN2pFLFlBQ2JBLEVBQUt1a0UsT0FBTzkvRCxRQUFVekUsRUFBS2drRSxTQUFTdi9ELE9BQ2hDekUsRUFBS3VrRSxPQUFPanlELElBQUksU0FBU2hULEVBQU93aUIsT0FDbEM0a0UsRUFBTzdpQixFQUFNZ2pCLGVBQWUsR0FDNUI4eEMsRUFBSzM0SCxFQUFLZ2tFLFNBQVMsR0FDbkI2RSxFQUFNNmQsRUFBSzFtRixLQUFLOGhCLEdBQ2hCNDZFLEVBQVM3ekIsR0FBT0EsRUFBSTZ6QixXQUNwQjUxQixFQUF3QjdCLFVBQVE2QixzQkFDaEM4eEQsRUFBVS8wRCxFQUFNejFELFFBQVE2MUUsU0FBU3BiLGdCQU05QnZwRSxZQUxJbzlGLEVBQU9oWixnQkFBa0JnWixFQUFPaFosZ0JBQWtCNWMsRUFBc0I2eEQsRUFBR2oxQyxnQkFBaUI1aEUsRUFBRzgyRyxFQUFRbDFDLDZCQUNyR2daLEVBQU9wWixZQUFjb1osRUFBT3BaLFlBQWN4YyxFQUFzQjZ4RCxFQUFHcjFDLFlBQWF4aEUsRUFBRzgyRyxFQUFRdDFDLHVCQUMvRm9aLEVBQU9sWixZQUFja1osRUFBT2xaLFlBQWMxYyxFQUFzQjZ4RCxFQUFHbjFDLFlBQWExaEUsRUFBRzgyRyxFQUFRcDFDLG9CQU8zRnorRCxNQUFNNHpHLEVBQUczNEgsS0FBSzhoQixLQUFPNGtFLEVBQUsxbUYsS0FBSzhoQixHQUFHcS9ELGFBR25Dci9ELGtCQVFILFNBQVNqZ0IsRUFBR2czSCxPQUdoQi8yRyxFQUFHeWpELEVBQU1taEIsRUFGVGxpRixFQUFRcTBILEVBQVdyMEgsTUFDbkJxL0QsRUFBUWhtRSxLQUFLZ21FLFVBR1ovaEQsRUFBSSxFQUFHeWpELEdBQVExQixFQUFNN2pFLEtBQUtna0UsY0FBZ0J2L0QsT0FBUXFkLEVBQUl5akQsSUFBUXpqRCxLQUMzRCtoRCxFQUFNZ2pCLGVBQWUva0UsSUFFbkI5aEIsS0FBS3dFLE9BQ1J4RSxLQUFLd0UsR0FBTzI4RSxRQUFVdUYsRUFBSzFtRixLQUFLd0UsR0FBTzI4RSxVQUl4QzV6RCw0QkFLVSxhQUdHLEdBQVh2b0IsS0FBS2lpRSxpQkFHVSxFQUFWamlFLEtBQUtpaUUsOEJBS1gsaUJBQ0MsVUFFRCxTQUFTMnVCLEVBQWE1MUYsT0FDeEI4NEgsRUFBWTk0SCxFQUFLdWtFLE9BQU9xeEIsRUFBWXB4RixPQUNwQ2hELEVBQVEsS0FBT3hCLEVBQUtna0UsU0FBUzR4QixFQUFZaE8sY0FBYzVuRixLQUFLNDFGLEVBQVlweEYsY0FFeEV5Z0UsVUFBUXY5RCxRQUFRb3hILE1BR1BBLEVBQVV6cEgsU0FDWixJQUFNN04sS0FFSEEsRUFHUHMzSCxPQU1YcHVELGNBQVNDLEtBQUssTUFBTzFGLFVBQVFuakMsTUFBTTRvQyxjQUFTcXVELFdBQzVDcnVELGNBQVNDLEtBQUssd0JBQ0ssSUFHbkIsd0JBQWlCLFNBQVNDLEtBRW5CNnpCLFlBQVlzNkIsU0FBV251RCxFQUFNNnpCLFlBQVl1NkIsSUFBTXB1RCxFQUFNdzVCLGtCQUFrQm45RSx3QkFFM0RnOUQsU0FBU2cxQyxlQUVkaDBELFVBQVFob0Qsa0JBR04sU0FBUzJxRSxXQUNsQnN4QyxFQUFZLEVBRVA3dUYsRUFBSSxFQUFHQSxFQUFJdTlDLElBQWdCdjlDLEVBQy9CeHNDLEtBQUtnbUUsTUFBTStpQixpQkFBaUJ2OEMsTUFDN0I2dUYsU0FJR0EsVUFHQSxTQUFTajRCLE9BQ1o1NkIsRUFBS3hvRSxLQUNMZ21FLEVBQVF3QyxFQUFHeEMsTUFDWDhTLEVBQVk5UyxFQUFNOFMsVUFDbEJuc0QsRUFBT3E1QyxFQUFNejFELFFBQ2J3cUgsRUFBVXB1RyxFQUFLeTVELFNBQVNwYixJQUN4QnN3RCxFQUFpQnhpRCxFQUFVdDNCLE1BQVFzM0IsRUFBVS9uQixLQUFPZ3FFLEVBQVFwMUMsWUFDNUQ0MUMsRUFBa0J6aUQsRUFBVW5OLE9BQVNtTixFQUFVN25CLElBQU04cEUsRUFBUXAxQyxZQUM3RHBPLEVBQVVwd0UsS0FBS2diLElBQUltNUcsRUFBZ0JDLEdBQ25DaHFILEdBQVV3NEQsRUFBRyxFQUFHQyxFQUFHLEdBQ25CNmUsRUFBT3JnQixFQUFHaStCLFVBQ1YrMEIsRUFBbUI3dUcsRUFBSzZ1RyxpQkFDeEJDLEVBQWdCOXVHLEVBQUs4dUcsaUJBR3JCQSxFQUEwQixFQUFWdDBILEtBQUtpaUUsR0FBVSxLQUM5QndiLEVBQWFqNEQsRUFBSzY5QyxVQUFzQixFQUFWcmpFLEtBQUtpaUUsSUFFbkN5YixNQURvQixFQUFWMTlFLEtBQUtpaUUsSUFBWXdiLEdBQWN6OUUsS0FBS2lpRSxJQUFNLEVBQUl3YixHQUFjejlFLEtBQUtpaUUsR0FBSyxFQUFJLElBQzVEcXlELEVBQ3hCbjBILEdBQVN5aUUsRUFBRzVpRSxLQUFLZ2lFLElBQUl5YixHQUFhNWEsRUFBRzdpRSxLQUFLa2lFLElBQUl1YixJQUM5Q2pxQyxHQUFPb3ZCLEVBQUc1aUUsS0FBS2dpRSxJQUFJMGIsR0FBVzdhLEVBQUc3aUUsS0FBS2tpRSxJQUFJd2IsSUFDMUM2MkMsRUFBYTkyQyxHQUFjLEdBQUtDLEdBQVksR0FBT0QsR0FBd0IsRUFBVno5RSxLQUFLaWlFLElBQXNCLEVBQVZqaUUsS0FBS2lpRSxJQUFZeWIsRUFDbkc4MkMsRUFBYy8yQyxHQUF3QixHQUFWejlFLEtBQUtpaUUsSUFBc0IsR0FBVmppRSxLQUFLaWlFLElBQVl5YixHQUFjRCxHQUF3QixJQUFWejlFLEtBQUtpaUUsSUFBc0IsSUFBVmppRSxLQUFLaWlFLElBQVl5YixFQUM1SCsyQyxFQUFlaDNDLElBQWV6OUUsS0FBS2lpRSxLQUFPamlFLEtBQUtpaUUsSUFBTXliLEdBQWNELEdBQWN6OUUsS0FBS2lpRSxJQUFNamlFLEtBQUtpaUUsSUFBTXliLEVBQ3ZHZzNDLEVBQWVqM0MsR0FBeUIsSUFBVno5RSxLQUFLaWlFLElBQXVCLElBQVZqaUUsS0FBS2lpRSxJQUFZeWIsR0FBY0QsR0FBd0IsSUFBVno5RSxLQUFLaWlFLElBQXNCLElBQVZqaUUsS0FBS2lpRSxJQUFZeWIsRUFDL0hpM0MsRUFBU04sRUFBbUIsSUFDNUJyNUcsR0FBTzRuRCxFQUFHNnhELEdBQWUsRUFBSXowSCxLQUFLZ2IsSUFBSTdhLEVBQU15aUUsR0FBS3ppRSxFQUFNeWlFLEVBQUksRUFBSSxFQUFJK3hELEdBQVNuaEYsRUFBSW92QixHQUFLcHZCLEVBQUlvdkIsRUFBSSxFQUFJLEVBQUkreEQsSUFBVTl4RCxFQUFHNnhELEdBQWUsRUFBSTEwSCxLQUFLZ2IsSUFBSTdhLEVBQU0waUUsR0FBSzFpRSxFQUFNMGlFLEVBQUksRUFBSSxFQUFJOHhELEdBQVNuaEYsRUFBSXF2QixHQUFLcnZCLEVBQUlxdkIsRUFBSSxFQUFJLEVBQUk4eEQsS0FDN00xMEgsR0FBTzJpRSxFQUFHMnhELEVBQVksRUFBSXYwSCxLQUFLQyxJQUFJRSxFQUFNeWlFLEdBQUt6aUUsRUFBTXlpRSxFQUFJLEVBQUksRUFBSSt4RCxHQUFTbmhGLEVBQUlvdkIsR0FBS3B2QixFQUFJb3ZCLEVBQUksRUFBSSxFQUFJK3hELElBQVU5eEQsRUFBRzJ4RCxFQUFhLEVBQUl4MEgsS0FBS0MsSUFBSUUsRUFBTTBpRSxHQUFLMWlFLEVBQU0waUUsRUFBSSxFQUFJLEVBQUk4eEQsR0FBU25oRixFQUFJcXZCLEdBQUtydkIsRUFBSXF2QixFQUFJLEVBQUksRUFBSTh4RCxLQUN4TXJwSCxHQUFRbzNELE1BQXlCLElBQWpCemlFLEVBQUkyaUUsRUFBSTVuRCxFQUFJNG5ELEdBQVVELE9BQTBCLElBQWpCMWlFLEVBQUk0aUUsRUFBSTduRCxFQUFJNm5ELE1BQ3JEN2lFLEtBQUtnYixJQUFJbTVHLEVBQWlCN29ILEVBQUtvM0QsTUFBTzB4RCxFQUFrQjlvSCxFQUFLcTNELFdBQzdEQyxHQUFzQixJQUFsQjNpRSxFQUFJMmlFLEVBQUk1bkQsRUFBSTRuRCxHQUFXQyxHQUFzQixJQUFsQjVpRSxFQUFJNGlFLEVBQUk3bkQsRUFBSTZuRCxNQUdoRDJiLFlBQWNuZCxFQUFHdXpELGtCQUFrQmx6QyxFQUFLMW1GLFFBQ3hDOGlGLFlBQWM5OUUsS0FBS0MsS0FBS213RSxFQUFVdlIsRUFBTTJmLGFBQWUsRUFBRyxLQUMxRFgsWUFBYzc5RSxLQUFLQyxJQUFJbzBILEVBQW9CeDFELEVBQU1pZixZQUFjLElBQVF1MkMsRUFBb0IsRUFBRyxLQUM5RlEsY0FBZ0JoMkQsRUFBTWlmLFlBQWNqZixFQUFNZ2YsYUFBZWhmLEVBQU1pMkQsMkJBQy9EQyxRQUFVM3FILEVBQU93NEQsRUFBSS9ELEVBQU1pZixjQUMzQmszQyxRQUFVNXFILEVBQU95NEQsRUFBSWhFLEVBQU1pZixjQUU1Qml0QyxNQUFRMXBELEVBQUc0ekQsbUJBRWJuM0MsWUFBY2pmLEVBQU1pZixZQUFlamYsRUFBTWcyRCxhQUFleHpELEVBQUc2ekQsYUFBYTd6RCxFQUFHN2hFLFNBQzNFcStFLFlBQWM3OUUsS0FBS0MsSUFBSW9oRSxFQUFHeWMsWUFBY2pmLEVBQU1nMkQsYUFBYyxhQUV2RDF6RCxLQUFLdWdCLEVBQUsxbUYsS0FBTSxTQUFTNm9FLEVBQUtya0UsS0FDbEN3Z0csY0FBY244QixFQUFLcmtFLEVBQU95OEYsb0JBSWhCLFNBQVNwNEIsRUFBS3JrRSxFQUFPeThGLE9BQy9CNTZCLEVBQUt4b0UsS0FDTGdtRSxFQUFRd0MsRUFBR3hDLE1BQ1g4UyxFQUFZOVMsRUFBTThTLFVBQ2xCbnNELEVBQU9xNUMsRUFBTXoxRCxRQUNiK3JILEVBQWdCM3ZHLEVBQUs4MkQsVUFDckI4NEMsR0FBV3pqRCxFQUFVL25CLEtBQU8rbkIsRUFBVXQzQixPQUFTLEVBQy9DZzdFLEdBQVcxakQsRUFBVTduQixJQUFNNm5CLEVBQVVuTixRQUFVLEVBQy9DaVosRUFBYWo0RCxFQUFLNjlDLFNBQ2xCcWEsRUFBV2w0RCxFQUFLNjlDLFNBQ2hCN21ELEVBQVU2a0QsRUFBR2srQixhQUNiKzBCLEVBQWdCcjRCLEdBQVNrNUIsRUFBY0csY0FBZ0IsRUFBSXp4RCxFQUFJc1ksT0FBUyxFQUFJOWEsRUFBR2swRCx1QkFBdUIvNEcsRUFBUXhoQixLQUFLd0UsS0FBV2dtQixFQUFLOHVHLGVBQWlCLEVBQU10MEgsS0FBS2lpRSxLQUMvSjRiLEVBQWNvZSxHQUFTazVCLEVBQWNLLGFBQWUsRUFBSW4wRCxFQUFHd2MsWUFDM0RDLEVBQWNtZSxHQUFTazVCLEVBQWNLLGFBQWUsRUFBSW4wRCxFQUFHeWMsWUFDM0RoYyxFQUF3QjdCLFVBQVE2QixnQ0FFNUI3L0MsT0FBTzRoRCxpQkFFQ3hDLEVBQUc3aEUsYUFDVkEsWUFJSjQxSCxFQUFVdjJELEVBQU1rMkQsVUFDaEJNLEVBQVV4MkQsRUFBTW0yRCxtQkFDUHYzQyxXQUNGQyxnQkFDSzQyQyxjQUNGeDJDLGNBQ0FELFFBQ04vYixFQUFzQnRsRCxFQUFRbGlCLE1BQU9rRixFQUFPcS9ELEVBQU03akUsS0FBS3VrRSxPQUFPLy9ELFdBSW5FMCtCLEVBQVEybEMsRUFBSXNULE9BR1p1Z0IsRUFBUzd6QixFQUFJNnpCLFdBQ2J4M0IsRUFBaUJELFVBQVE2QixzQkFDekIyekQsRUFBYzU4SCxLQUFLZ21FLE1BQU16MUQsUUFBUTYxRSxTQUFTcGIsTUFDeEM2YSxnQkFBa0JnWixFQUFPaFosZ0JBQWtCZ1osRUFBT2haLGdCQUFrQnhlLEVBQWUxakQsRUFBUWtpRSxnQkFBaUJsL0UsRUFBT2kySCxFQUFZLzJDLG1CQUMvSEosWUFBY29aLEVBQU9wWixZQUFjb1osRUFBT3BaLFlBQWNwZSxFQUFlMWpELEVBQVE4aEUsWUFBYTkrRSxFQUFPaTJILEVBQVluM0MsZUFDL0dFLFlBQWNrWixFQUFPbFosWUFBY2taLEVBQU9sWixZQUFjdGUsRUFBZTFqRCxFQUFRZ2lFLFlBQWFoL0UsRUFBT2kySCxFQUFZajNDLGFBR2hIeWQsR0FBVWs1QixFQUFjRyxrQkFFckI3M0MsV0FETyxJQUFWaitFLEVBQ2dCZ21CLEVBQUs2OUMsU0FFTGhDLEVBQUdpK0IsVUFBVXRrRyxLQUFLd0UsRUFBUSxHQUFHMjNFLE9BQU91RyxXQUdsREEsU0FBV3gvQyxFQUFNdS9DLFdBQWF2L0MsRUFBTW8yRixpQkFHdkNoN0Isd0JBR1csZUFJWDk4RixFQUhBZ2dCLEVBQVUzakIsS0FBSzBtRyxhQUNmN2QsRUFBTzdvRixLQUFLeW1HLFVBQ1p5ckIsRUFBUSxtQkFHSjVwRCxLQUFLdWdCLEVBQUsxbUYsS0FBTSxTQUFTeWpCLEVBQVNqZixLQUNqQ2dkLEVBQVF4aEIsS0FBS3dFLEdBQ2hCdWdCLE1BQU12akIsSUFBV2lpQixFQUFRMDlELFlBQ3BCbjhFLEtBQUttMEUsSUFBSTMzRSxNQVFidXVILDBCQUdnQixTQUFTdnVILE9BQzVCdXVILEVBQVFseUgsS0FBS3ltRyxVQUFVeXJCLGFBQ3ZCQSxFQUFRLElBQU1ockcsTUFBTXZqQixHQUNMLEVBQVZ3RCxLQUFLaWlFLElBQWFqaUUsS0FBS20wRSxJQUFJMzNFLEdBQVN1dUgsR0FFdEMscUJBSVcsU0FBUzJLLFdBSXZCbDNDLEVBQ0FtM0MsRUFKQTExSCxFQUFNLEVBQ05ULEVBQVEzRyxLQUFLMkcsTUFDYkMsRUFBU2kySCxFQUFLajJILE9BSVRxZCxFQUFJLEVBQUdBLEVBQUlyZCxFQUFRcWQsTUFDYjQ0RyxFQUFLNTRHLEdBQUdxNkQsT0FBU3UrQyxFQUFLNTRHLEdBQUdxNkQsT0FBT3FILFlBQWMsT0FDL0NrM0MsRUFBSzU0RyxHQUFHZ2lELE9BQVM0MkQsRUFBSzU0RyxHQUFHZ2lELE9BQU8xbUQsT0FBT3BkLEtBQUtna0UsU0FBU3gvRCxHQUFPNmdHLGlCQUFtQixNQUV0RjdoQixFQUFjditFLEVBQU11K0UsRUFBY3YrRSxHQUNmMDFILEVBQWExMUgsU0FFaENBLE1DblNWeWxFLGNBQVNDLEtBQUssbUJBQ0YsWUFDRCxjQUdILDhCQUtDLGNBQ0YsMEJBR0UsWUFDRixnQkFLUCxvQkFBaUIsU0FBU0MsWUFFaEJnd0QsRUFBWXA1RyxFQUFTcFQsVUFDdEI2MkQsVUFBUUMsZUFBZTFqRCxFQUFRcTVHLFNBQVV6c0gsRUFBUTBzSCxhQUduRHI4QixZQUFZdmEsS0FBT3RaLEVBQU13NUIsa0JBQWtCbjlFLDJCQUU1Qmc5RCxTQUFTODJDLHFCQUVaOTJDLFNBQVNzMEMsYUFFbEIsU0FBU3QzQixPQVFabi9FLEVBQUd5akQsRUFBTW0zQixFQVBUcjJCLEVBQUt4b0UsS0FDTDZvRixFQUFPcmdCLEVBQUdpK0IsVUFDVnBnQixFQUFPd0MsRUFBS2xsRSxRQUNaZzZELEVBQVNrTCxFQUFLMW1GLFNBQ2RvTyxFQUFVaTRELEVBQUd4QyxNQUFNejFELFFBQ25CNHNILEVBQXFCNXNILEVBQVE2MUUsU0FBU0MsS0FDdENsVCxFQUFRM0ssRUFBR3V3RCxjQUFjbHdDLEVBQUsrZCxTQUU5QmpqRixFQUFVNmtELEVBQUdrK0IsYUFDYnMyQixFQUFXRCxFQUFZcDVHLEVBQVNwVCxPQUdoQ3lzSCxNQUNNMzJDLEVBQUt3WSxnQkFHV3A3RixJQUFwQmtnQixFQUFRcW9ELGNBQW1Edm9FLElBQXhCa2dCLEVBQVF5NUcsZ0JBQ3ZDQSxZQUFjejVHLEVBQVFxb0QsV0FJMUJ5d0IsT0FBU3RwQixJQUNUOFcsY0FBZ0J6aEIsRUFBRzdoRSxRQUVuQnUvRSxVQUFZdkksSUFFWlcsaUJBS00zNkQsRUFBUXNpRSxTQUFXdGlFLEVBQVFzaUUsU0FBVzExRSxFQUFRMDFFLGlCQUMvQzRZLEVBQU83eUIsUUFBVTZ5QixFQUFPN3lCLFFBQVU1RSxVQUFRQyxlQUFlMWpELEVBQVF5NUcsWUFBYUQsRUFBbUJueEQseUJBQ3pGNnlCLEVBQU9oWixnQkFBa0JnWixFQUFPaFosZ0JBQW1CbGlFLEVBQVFraUUsaUJBQW1CczNDLEVBQW1CdDNDLDRCQUNyR2daLEVBQU9sWixZQUFja1osRUFBT2xaLFlBQWVoaUUsRUFBUWdpRSxhQUFldzNDLEVBQW1CeDNDLHdCQUNyRmtaLEVBQU9wWixZQUFjb1osRUFBT3BaLFlBQWU5aEUsRUFBUThoRSxhQUFlMDNDLEVBQW1CMTNDLDJCQUNsRm9aLEVBQU9wWSxlQUFpQm9ZLEVBQU9wWSxlQUFrQjlpRSxFQUFROGlFLGdCQUFrQjAyQyxFQUFtQjEyQywwQkFDbEdvWSxFQUFPbFksV0FBYWtZLEVBQU9sWSxXQUFjaGpFLEVBQVFnakUsWUFBY3cyQyxFQUFtQngyQyw0QkFDNUVrWSxFQUFPaFksaUJBQW1CZ1ksRUFBT2hZLGlCQUFvQmxqRSxFQUFRa2pFLGtCQUFvQnMyQyxFQUFtQnQyQyxpQ0FDckdnWSxFQUFPL1gsZ0JBQWtCK1gsRUFBTy9YLGdCQUFtQm5qRSxFQUFRbWpFLGlCQUFtQnEyQyxFQUFtQnIyQyxxQkFDNUcrWCxFQUFPdnpCLEtBQU91ekIsRUFBT3Z6QixVQUF5QjduRSxJQUFqQmtnQixFQUFRMm5ELEtBQXFCM25ELEVBQVEybkQsS0FBTzZ4RCxFQUFtQjd4RCxpQkFDckZ1ekIsRUFBTzl5QixZQUFjOHlCLEVBQU85eUIsWUFBYzNFLFVBQVFDLGVBQWUxakQsRUFBUW9vRCxZQUFhb3hELEVBQW1CRSxnQ0FDOUZ4K0IsRUFBT3krQix1QkFBeUJ6K0IsRUFBT3krQix1QkFBeUJsMkQsVUFBUUMsZUFBZTFqRCxFQUFRMjVHLHVCQUF3QkgsRUFBbUJHLDJCQUc5Sjc4QixTQUlEeDhFLEVBQUksRUFBR3lqRCxFQUFPaVcsRUFBTy8yRSxPQUFRcWQsRUFBSXlqRCxJQUFRempELElBQzFDa2pGLGNBQWN4cEIsRUFBTzE1RCxHQUFJQSxFQUFHbS9FLE9BRzVCNDVCLEdBQW9DLElBQXhCMzJDLEVBQUsvSCxPQUFPdFMsV0FDeEJ1eEQsNEJBSUN0NUcsRUFBSSxFQUFHeWpELEVBQU9pVyxFQUFPLzJFLE9BQVFxZCxFQUFJeWpELElBQVF6akQsSUFDdENBLEdBQUd3OEUsaUNBSWEsU0FBU3BpQixFQUFPMTNFLE9BQ3BDay9FLEVBQWtCN2xGLEtBQUtnbUUsTUFBTXoxRCxRQUFRNjFFLFNBQVMvSCxNQUFNd0gsZ0JBQ3BEbGlFLEVBQVUzakIsS0FBSzBtRyxhQUNmN0gsRUFBU3hnQixFQUFNd2dCLGtCQUVmQSxFQUFPaFosa0JBQ1FnWixFQUFPaFosZ0JBQ2ZsaUUsRUFBUTY1Ryx1QkFDQXAyRCxVQUFRNkIsc0JBQXNCdGxELEVBQVE2NUcscUJBQXNCNzJILEVBQU9rL0UsR0FDM0VsaUUsRUFBUWtpRSxvQkFDQWxpRSxFQUFRa2lFLGlCQUdwQkEsdUJBR2EsU0FBU3hILEVBQU8xM0UsT0FDaEM4K0UsRUFBY3psRixLQUFLZ21FLE1BQU16MUQsUUFBUTYxRSxTQUFTL0gsTUFBTW9ILFlBQ2hEOWhFLEVBQVUzakIsS0FBSzBtRyxhQUNmN0gsRUFBU3hnQixFQUFNd2dCLGtCQUVmQSxFQUFPcFosY0FDSW9aLEVBQU9wWixZQUNYOWhFLEVBQVE4NUcsbUJBQ0pyMkQsVUFBUTZCLHNCQUFzQnRsRCxFQUFRODVHLGlCQUFrQjkySCxFQUFPOCtFLEdBQ25FOWhFLEVBQVE4aEUsZ0JBQ0o5aEUsRUFBUThoRSxhQUdoQkEsdUJBR2EsU0FBU3BILEVBQU8xM0UsT0FDaENnL0UsRUFBYzNsRixLQUFLZ21FLE1BQU16MUQsUUFBUTYxRSxTQUFTL0gsTUFBTXNILFlBQ2hEaGlFLEVBQVUzakIsS0FBSzBtRyxhQUNmN0gsRUFBU3hnQixFQUFNd2dCLGtCQUVkMzNFLE1BQU0yM0UsRUFBT2xaLGNBRU56K0QsTUFBTXZELEVBQVErNUcsbUJBQXFCdDJELFVBQVF2OUQsUUFBUThaLEVBQVErNUcsb0JBQ3hEdDJELFVBQVE2QixzQkFBc0J0bEQsRUFBUSs1RyxpQkFBa0IvMkgsRUFBT2cvRSxHQUNsRXorRCxNQUFNdkQsRUFBUWdpRSxpQkFDWGhpRSxFQUFRZ2lFLGVBSlJrWixFQUFPbFosWUFPZkEsb0JBR1UsU0FBU3RILEVBQU8xM0UsT0FDN0JnM0gsRUFBZ0IzOUgsS0FBS2dtRSxNQUFNejFELFFBQVE2MUUsU0FBUy9ILE1BQU03VCxTQUNsRDdtRCxFQUFVM2pCLEtBQUswbUcsYUFDZjdILEVBQVN4Z0IsRUFBTXdnQixrQkFFZDMzRSxNQUFNMjNFLEVBQU9yMEIsVUFFTnRqRCxNQUFNdkQsRUFBUWc2RyxpQkFBa0J2MkQsVUFBUXY5RCxRQUFROFosRUFBUWc2RyxtQkFDbkR2MkQsVUFBUTZCLHNCQUFzQnRsRCxFQUFRZzZHLGNBQWVoM0gsRUFBT2czSCxNQUY1RDkrQixFQUFPcjBCLFNBSWpCbXpELGlCQUdPLFNBQVN0L0MsRUFBTzEzRSxFQUFPeThGLE9BVWpDcjVCLEVBQUdDLEVBVEh4QixFQUFLeG9FLEtBQ0w2b0YsRUFBT3JnQixFQUFHaStCLFVBQ1Y1SCxFQUFTeGdCLEVBQU13Z0IsV0FDZmw3RSxFQUFVNmtELEVBQUdrK0IsYUFDYjNjLEVBQWV2aEIsRUFBRzdoRSxNQUNsQmhELEVBQVFnZ0IsRUFBUXhoQixLQUFLd0UsR0FDckJpMUYsRUFBU3B6QixFQUFHdXdELGNBQWNsd0MsRUFBSytkLFNBQy9CakwsRUFBU256QixFQUFHdXdELGNBQWNsd0MsRUFBSzhkLFNBQy9CaTNCLEVBQWVwMUQsRUFBR3hDLE1BQU16MUQsUUFBUTYxRSxTQUFTL0gsV0FJckI1NkUsSUFBbkJrZ0IsRUFBUXNtRCxhQUFrRHhtRSxJQUF4QmtnQixFQUFRazZHLGdCQUN0Q0EsWUFBY2w2RyxFQUFRc21ELGFBRUp4bUUsSUFBdEJrZ0IsRUFBUXFqRSxnQkFBd0R2akYsSUFBM0JrZ0IsRUFBUW02RyxtQkFDekNBLGVBQWlCbjZHLEVBQVFxakUsYUFHOUIyVSxFQUFPaEksaUJBQWtDLHFCQUFWaHdGLHNCQUFBQSxJQUFxQkEsRUFBUXl2RixJQUFLenNGLEVBQU9vakYsS0FDeEVxWixFQUFReEgsRUFBT3U5QixlQUFpQjN3RCxFQUFHdTFELGdCQUFnQnA2SCxFQUFPZ0QsRUFBT29qRixLQUcvRHdTLFFBQVVaLElBQ1ZhLFFBQVVaLElBQ1YzUixjQUFnQkYsSUFDaEJDLE9BQVNyakYsSUFHVDIzRSxVQUNGdlUsSUFDQUMsT0FDRzYwQixFQUFPM2hCLE1BQVFoMkQsTUFBTTZpRCxJQUFNN2lELE1BQU04aUQsVUFFL0I2MEIsRUFBTzUwQixRQUFVN0MsVUFBUTZCLHNCQUFzQnRsRCxFQUFRazZHLFlBQWFsM0gsRUFBT2kzSCxFQUFhM3pELG1CQUNwRjQwQixFQUFPM1gsWUFBYzlmLFVBQVE2QixzQkFBc0J0bEQsRUFBUXVqRSxXQUFZdmdGLEVBQU9pM0gsRUFBYTEyQyxxQkFDN0YxZSxFQUFHdzFELGlCQUFpQjMvQyxFQUFPMTNFLG1CQUNwQjZoRSxFQUFHeTFELHdCQUF3QjUvQyxFQUFPMTNFLGVBQ3RDNmhFLEVBQUcwMUQsb0JBQW9CNy9DLEVBQU8xM0UsZUFDOUI2aEUsRUFBRzIxRCxvQkFBb0I5L0MsRUFBTzEzRSxXQUNsQ2tpRixFQUFLbGxFLFFBQVEyNkQsT0FBU3VLLEVBQUtsbEUsUUFBUTI2RCxPQUFPdFMsUUFBVSxnQkFDaEQ2YyxFQUFLbGxFLFFBQVEyNkQsUUFBU3VLLEVBQUtsbEUsUUFBUTI2RCxPQUFPdlMsc0JBRTVDOHlCLEVBQU83WCxXQUFhNWYsVUFBUTZCLHNCQUFzQnRsRCxFQUFRbTZHLGVBQWdCbjNILEVBQU9pM0gsRUFBYTUyQyw2QkFJMUYsU0FBU3JqRixFQUFPZ0QsRUFBT29qRixPQU9uQzlsRSxFQUFHNjJHLEVBQUlzRCxFQUxQcDRELEVBREtobUUsS0FDTWdtRSxNQUNYNmlCLEVBRks3b0YsS0FFS3ltRyxVQUNWN0ssRUFISzU3RixLQUdPKzRILGNBQWNsd0MsRUFBSytkLFNBQy9CeTNCLEVBQVMsRUFDVEMsRUFBUyxLQUdUMWlDLEVBQU9yckYsUUFBUW9HLFFBQVMsS0FDdEJzTixFQUFJLEVBQUdBLEVBQUk4bEUsRUFBYzlsRSxTQUN4QitoRCxFQUFNN2pFLEtBQUtna0UsU0FBU2xpRCxHQUVMLFlBRFgraEQsRUFBTWdqQixlQUFlL2tFLElBQ25CMWYsTUFBbUI2NUgsRUFBT3gzQixVQUFZaEwsRUFBTzNzRSxJQUFNKzJDLEVBQU0raUIsaUJBQWlCOWtFLEdBQUksS0FDcEZzNkcsRUFBb0JobUcsT0FBT3FqRSxFQUFPdkksY0FBY3luQyxFQUFHMzRILEtBQUt3RSxLQUN4RDQzSCxFQUFvQixLQUNiQSxHQUFxQixLQUVyQkEsR0FBcUIsTUFLOUJ0ekIsRUFBYTF5RSxPQUFPcWpFLEVBQU92SSxjQUFjMXZGLFdBQ3pDc25HLEVBQWEsRUFDVHJQLEVBQU9qSSxpQkFBaUIycUMsRUFBU3J6QixHQUVsQ3JQLEVBQU9qSSxpQkFBaUIwcUMsRUFBU3B6QixVQUdsQ3JQLEVBQU9qSSxpQkFBaUJod0YsOEJBR0wsZUFLdEJzZ0IsRUFBR3lqRCxFQUFhcmlDLEVBQU9tNUYsRUFIdkIzMUMsRUFESzdvRixLQUNLeW1HLFVBQ1YvNkIsRUFGSzFyRSxLQUVLZ21FLE1BQU04UyxVQUNoQjZFLEVBQVVrTCxFQUFLMW1GLGtCQVVWczhILEVBQWdCcC9CLEVBQUlsOUUsRUFBSy9hLFVBQzFCRCxLQUFLQyxJQUFJRCxLQUFLZ2IsSUFBSWs5RSxFQUFJajRGLEdBQU0rYSxNQVBoQzBtRSxFQUFLbGxFLFFBQVEyNkQsT0FBTzJILGFBQ2R0SSxFQUFPcjhFLE9BQU8sU0FBUys5RixVQUN2QkEsRUFBRy9nQixPQUFPcEIsUUFRK0IsYUFBL0MyTCxFQUFLbGxFLFFBQVEyNkQsT0FBT2cvQyxpQ0FDZjUvQyxvQkFBb0JDLFlBRXZCMTVELEVBQUksRUFBR3lqRCxFQUFPaVcsRUFBTy8yRSxPQUFRcWQsRUFBSXlqRCxJQUFRempELElBQ3JDMDVELEVBQU8xNUQsR0FDRHE2RCxTQUNFbFgsVUFBUTBWLFlBQ3ZCMVYsVUFBUXlYLGFBQWFsQixFQUFRMTVELEdBQUdxNkQsT0FDaENqNUMsRUFDQStoQyxVQUFRdVgsU0FBU2hCLEVBQVExNUQsR0FBR3E2RCxPQUM1QnVLLEVBQUtsbEUsUUFBUTI2RCxPQUFPdFMsV0FFZkUsc0JBQXdCc3lELEVBQWMzeUQsU0FBUzlCLElBQy9DcUMsc0JBQXdCb3lELEVBQWMzeUQsU0FBUzdCLElBQy9DbUMsa0JBQW9CcXlELEVBQWNsL0YsS0FBS3lxQyxJQUN2Q3NDLGtCQUFvQm15RCxFQUFjbC9GLEtBQUswcUMsS0FoQ3RDaHFFLEtBb0NGZ21FLE1BQU16MUQsUUFBUTYxRSxTQUFTQyxLQUFLcTRDLG9CQUM3Qno2RyxFQUFJLEVBQUd5akQsRUFBT2lXLEVBQU8vMkUsT0FBUXFkLEVBQUl5akQsSUFBUXpqRCxLQUNyQzA1RCxFQUFPMTVELEdBQUdxNkQsUUFDWnBTLHNCQUF3QnV5RCxFQUFnQnA1RixFQUFNNm1DLHNCQUF1QlIsRUFBSzNhLEtBQU0yYSxFQUFLbHFCLFNBQ3JGNHFCLHNCQUF3QnF5RCxFQUFnQnA1RixFQUFNK21DLHNCQUF1QlYsRUFBS3phLElBQUt5YSxFQUFLQyxVQUNwRlEsa0JBQW9Cc3lELEVBQWdCcDVGLEVBQU04bUMsa0JBQW1CVCxFQUFLM2EsS0FBTTJhLEVBQUtscUIsU0FDN0U2cUIsa0JBQW9Cb3lELEVBQWdCcDVGLEVBQU1nbkMsa0JBQW1CWCxFQUFLemEsSUFBS3lhLEVBQUtDLGNBSy9FLGVBT0RnekQsRUFMQTM0RCxFQURLaG1FLEtBQ01nbUUsTUFDWDZpQixFQUZLN29GLEtBRUt5bUcsVUFDVjlvQixFQUFTa0wsRUFBSzFtRixTQUNkdXBFLEVBQU8xRixFQUFNOFMsVUFDYnBSLEVBQU9pVyxFQUFPLzJFLE9BRWRxZCxFQUFJLE1BRUo4NEcsRUFUSy84SCxLQVNVMG1HLGFBQWMxZ0MsRUFBTXoxRCxjQUNuQnM0RSxFQUFLbGxFLFFBQVEyNkQsT0FBT3FILGFBQWUsR0FBSyxZQUVuRGpHLE9BQU8wNkMsU0FBU3AwRCxFQUFNcjlDLFVBQ3ZCK2lELEVBQUszYSxXQUNKMmEsRUFBS2xxQixVQUNQa3FCLEVBQUt6YSxJQUFNMHRFLFNBQ1JqekQsRUFBS0MsT0FBU2d6RCxNQUdsQmg3RyxRQUFRNmdGLGlCQUVMOWtCLE9BQU8yNkMsV0FBV3IwRCxFQUFNcjlDLE1BSTFCMUUsRUFBSXlqRCxJQUFRempELElBQ1hBLEdBQUd1Z0YsS0FBSzk0QixrQkFJRixTQUFTOWxELE9BRW5CakMsRUFBVTNqQixLQUFLZ21FLE1BQU03akUsS0FBS2drRSxTQUFTdmdELEVBQVFxa0UsZUFDM0N0akYsRUFBUWlmLEVBQVFva0UsT0FDaEI2VSxFQUFTajVFLEVBQVFpNUUsV0FDakJ4NUQsRUFBUXpmLEVBQVEwNEQsU0FFWitvQixnQ0FDVWhpRSxFQUFNd2dELDRCQUNWeGdELEVBQU1vZ0Qsd0JBQ05wZ0QsRUFBTXNnRCxtQkFDWHRnRCxFQUFNNGtDLFVBR1Q0YixnQkFBa0JnWixFQUFPeUksc0JBQXdCbGdDLFVBQVE2QixzQkFBc0J0bEQsRUFBUWk3RywwQkFBMkJqNEgsRUFBT3lnRSxVQUFRcWIsY0FBY3A5QyxFQUFNd2dELG9CQUNySkosWUFBY29aLEVBQU8wSSxrQkFBb0JuZ0MsVUFBUTZCLHNCQUFzQnRsRCxFQUFRazdHLHNCQUF1Qmw0SCxFQUFPeWdFLFVBQVFxYixjQUFjcDlDLEVBQU1vZ0QsZ0JBQ3pJRSxZQUFja1osRUFBTzJJLGtCQUFvQnBnQyxVQUFRNkIsc0JBQXNCdGxELEVBQVFtN0csc0JBQXVCbjRILEVBQU8wK0IsRUFBTXNnRCxlQUNuSDFiLE9BQVM0MEIsRUFBT3RhLGFBQWVuZCxVQUFRNkIsc0JBQXNCdGxELEVBQVFvN0csaUJBQWtCcDRILEVBQU8zRyxLQUFLZ21FLE1BQU16MUQsUUFBUTYxRSxTQUFTL0gsTUFBTWtHLGlCQzlVekkxWCxjQUFTQyxLQUFLLHlCQUVOLG9DQUVJLHdCQUdDLHlCQUdELHVCQUdJLDhCQU1DLGdCQUNELGVBR0YsR0FBTTNsRSxLQUFLaWlFLGtCQUNSLFNBQVNwRCxPQUNwQjdrRSxPQUNDOEwsS0FBSyxjQUFnQis0RCxFQUFNLzJDLEdBQUssaUJBRWpDOXNCLEVBQU82akUsRUFBTTdqRSxLQUNiZ2tFLEVBQVdoa0UsRUFBS2drRSxTQUNoQk8sRUFBU3ZrRSxFQUFLdWtFLFVBRWRQLEVBQVN2L0QsV0FDUCxJQUFJcWQsRUFBSSxFQUFHQSxFQUFJa2lELEVBQVMsR0FBR2hrRSxLQUFLeUUsU0FBVXFkLElBQ3pDaFgsS0FBSyxxQ0FBdUNrNUQsRUFBUyxHQUFHMGYsZ0JBQWdCNWhFLEdBQUssYUFDOUV5aUQsRUFBT3ppRCxNQUNMaFgsS0FBS3k1RCxFQUFPemlELE1BRWJoWCxLQUFLLGtCQUlQQSxLQUFLLFNBQ0g5TCxFQUFLdWdCLEtBQUssb0NBSUEsU0FBU3NrRCxPQUNwQjdqRSxFQUFPNmpFLEVBQU03akUsWUFDYkEsRUFBS3VrRSxPQUFPOS9ELFFBQVV6RSxFQUFLZ2tFLFNBQVN2L0QsT0FDaEN6RSxFQUFLdWtFLE9BQU9qeUQsSUFBSSxTQUFTaFQsRUFBT3dpQixPQUNsQzRrRSxFQUFPN2lCLEVBQU1nakIsZUFBZSxHQUM1Qjh4QyxFQUFLMzRILEVBQUtna0UsU0FBUyxHQUVuQjA0QixFQURNaFcsRUFBSzFtRixLQUFLOGhCLEdBQ0g0NkUsV0FDYjUxQixFQUF3QjdCLFVBQVE2QixzQkFDaEM4eEQsRUFBVS8wRCxFQUFNejFELFFBQVE2MUUsU0FBU3BiLGdCQU05QnZwRSxZQUxJbzlGLEVBQU9oWixnQkFBa0JnWixFQUFPaFosZ0JBQWtCNWMsRUFBc0I2eEQsRUFBR2oxQyxnQkFBaUI1aEUsRUFBRzgyRyxFQUFRbDFDLDZCQUNyR2daLEVBQU9wWixZQUFjb1osRUFBT3BaLFlBQWN4YyxFQUFzQjZ4RCxFQUFHcjFDLFlBQWF4aEUsRUFBRzgyRyxFQUFRdDFDLHVCQUMvRm9aLEVBQU9sWixZQUFja1osRUFBT2xaLFlBQWMxYyxFQUFzQjZ4RCxFQUFHbjFDLFlBQWExaEUsRUFBRzgyRyxFQUFRcDFDLG9CQU8zRnorRCxNQUFNNHpHLEVBQUczNEgsS0FBSzhoQixLQUFPNGtFLEVBQUsxbUYsS0FBSzhoQixHQUFHcS9ELGFBR25Dci9ELGtCQVFILFNBQVNqZ0IsRUFBR2czSCxPQUdoQi8yRyxFQUFHeWpELEVBQU1taEIsRUFGVGxpRixFQUFRcTBILEVBQVdyMEgsTUFDbkJxL0QsRUFBUWhtRSxLQUFLZ21FLFVBR1ovaEQsRUFBSSxFQUFHeWpELEdBQVExQixFQUFNN2pFLEtBQUtna0UsY0FBZ0J2L0QsT0FBUXFkLEVBQUl5akQsSUFBUXpqRCxLQUMzRCtoRCxFQUFNZ2pCLGVBQWUva0UsSUFDdkI5aEIsS0FBS3dFLEdBQU8yOEUsUUFBVXVGLEVBQUsxbUYsS0FBS3dFLEdBQU8yOEUsU0FHdkM1ekQsc0NBT0MsaUJBQ0MsVUFFRCxTQUFTN0gsRUFBTTFsQixVQUNkQSxFQUFLdWtFLE9BQU83K0MsRUFBS2xoQixPQUFTLEtBQU9raEIsRUFBS213RSxZQU1qRCx5QkFBaUIsU0FBU2pyQixLQUVuQjZ6QixZQUFZbytCLFVBQVlqeUQsRUFBTXc1QixrQkFBa0JuOUUsd0JBRXBDZzlELFNBQVNnMUMsZUFFZGgwRCxVQUFRaG9ELFlBRVosU0FBU2drRixPQU9abi9FLEVBQUd5akQsRUFBTThVLEVBTlRoVSxFQUFLeG9FLEtBQ0wyakIsRUFBVTZrRCxFQUFHaytCLGFBQ2I3ZCxFQUFPcmdCLEVBQUdpK0IsVUFDVm4vRixFQUFRa2hFLEVBQUd4QyxNQUFNejFELFFBQVFxMEUsWUFBYyxFQUN2Q3E2QyxFQUFTejJELEVBQUcwMkQsV0FDWkMsRUFBUzMyRCxFQUFHNDJELGlCQUdiQyxrQkFFRWgzSCxNQUFRbWdFLEVBQUc4MkQsdUJBRVhyN0csRUFBSSxFQUFHeWpELEVBQU8vakQsRUFBUXhoQixLQUFLeUUsT0FBUXFkLEVBQUl5akQsRUFBTXpqRCxNQUMxQ0EsR0FBSzNjLElBQ0praEUsRUFBRysyRCxjQUFjdDdHLEtBQ2xCQSxHQUFLdTRELEtBQ0hBLFlBR0ZsVSxLQUFLdWdCLEVBQUsxbUYsS0FBTSxTQUFTNm9FLEVBQUtya0UsS0FDbEN3Z0csY0FBY244QixFQUFLcmtFLEVBQU95OEYsb0JBT2hCLGVBQ1Y1NkIsRUFBS3hvRSxLQUNMZ21FLEVBQVF3QyxFQUFHeEMsTUFDWDhTLEVBQVk5UyxFQUFNOFMsVUFDbEJuc0QsRUFBT3E1QyxFQUFNejFELFFBQ2J3cUgsRUFBVXB1RyxFQUFLeTVELFNBQVNwYixJQUN4QnVNLEVBQVVwd0UsS0FBS2diLElBQUkyMkQsRUFBVXQzQixNQUFRczNCLEVBQVUvbkIsS0FBTStuQixFQUFVbk4sT0FBU21OLEVBQVU3bkIsT0FFaEZnMEIsWUFBYzk5RSxLQUFLQyxLQUFLbXdFLEVBQVV3akQsRUFBUXAxQyxZQUFjLEdBQUssRUFBRyxLQUNoRVgsWUFBYzc5RSxLQUFLQyxJQUFJdWxCLEVBQUs2dUcsaUJBQW9CeDFELEVBQU1pZixZQUFjLElBQVF0NEQsRUFBSzZ1RyxpQkFBb0IsRUFBRyxLQUN4R1EsY0FBZ0JoMkQsRUFBTWlmLFlBQWNqZixFQUFNZ2YsYUFBZWhmLEVBQU1pMkQsMkJBRWxFaDNDLFlBQWNqZixFQUFNaWYsWUFBZWpmLEVBQU1nMkQsYUFBZXh6RCxFQUFHN2hFLFFBQzNEcStFLFlBQWN4YyxFQUFHeWMsWUFBY2pmLEVBQU1nMkQsNEJBRzFCLFNBQVNoeEQsRUFBS3JrRSxFQUFPeThGLE9BQy9CNTZCLEVBQUt4b0UsS0FDTGdtRSxFQUFRd0MsRUFBR3hDLE1BQ1hyaUQsRUFBVTZrRCxFQUFHaytCLGFBQ2IvNUUsRUFBT3E1QyxFQUFNejFELFFBQ2IrckgsRUFBZ0IzdkcsRUFBSzgyRCxVQUNyQnRRLEVBQVFuTixFQUFNbU4sTUFDZHpNLEVBQVNWLEVBQU03akUsS0FBS3VrRSxPQUVwQjYxRCxFQUFVcHBELEVBQU1zNUIsUUFDaEIrdkIsRUFBVXJwRCxFQUFNdTVCLFFBR2hCOHlCLEVBQW9CN3lHLEVBQUtpNEQsV0FDekJELEVBQVczWixFQUFJc1ksT0FBUyxFQUFJblEsRUFBTXM3Qiw4QkFBOEI5cUYsRUFBUXhoQixLQUFLd0UsSUFDN0VpK0UsRUFBYXBjLEVBQUcwMkQsUUFBUXY0SCxHQUN4QmsrRSxFQUFXRCxHQUFjNVosRUFBSXNZLE9BQVMsRUFBSTlhLEVBQUc0MkQsUUFBUXo0SCxJQUVyRDg0SCxFQUFjbkQsRUFBY0ssYUFBZSxFQUFJeHBELEVBQU1zN0IsOEJBQThCOXFGLEVBQVF4aEIsS0FBS3dFLGNBRTVGeWlCLE9BQU80aEQsaUJBRUN4QyxFQUFHN2hFLGFBQ1ZBLFNBQ0F3c0UsWUFJSm9wRCxJQUNBQyxjQUNVLGNBQ0FwNUIsRUFBUXE4QixFQUFjOTZDLGFBQ3ZCeWUsR0FBU2s1QixFQUFjRyxjQUFnQitDLEVBQW9CNTZDLFdBQzdEd2UsR0FBU2s1QixFQUFjRyxjQUFnQitDLEVBQW9CMzZDLFFBQzlEemQsVUFBUTZCLHNCQUFzQnZDLEVBQVEvL0QsRUFBTysvRCxFQUFPLy9ELFdBS3pEaTJILEVBQWM1OEgsS0FBS2dtRSxNQUFNejFELFFBQVE2MUUsU0FBU3BiLElBQzFDNnpCLEVBQVM3ekIsRUFBSTZ6QixXQUNieDNCLEVBQWlCRCxVQUFRNkIsc0JBQ3pCNWpDLEVBQVEybEMsRUFBSXNULFNBRVZ1SCxnQkFBa0JnWixFQUFPaFosZ0JBQWtCZ1osRUFBT2haLGdCQUFrQnhlLEVBQWUxakQsRUFBUWtpRSxnQkFBaUJsL0UsRUFBT2kySCxFQUFZLzJDLG1CQUMvSEosWUFBY29aLEVBQU9wWixZQUFjb1osRUFBT3BaLFlBQWNwZSxFQUFlMWpELEVBQVE4aEUsWUFBYTkrRSxFQUFPaTJILEVBQVluM0MsZUFDL0dFLFlBQWNrWixFQUFPbFosWUFBY2taLEVBQU9sWixZQUFjdGUsRUFBZTFqRCxFQUFRZ2lFLFlBQWFoL0UsRUFBT2kySCxFQUFZajNDLGVBRWpIOGEsOEJBR2lCLGVBQ2pCOThFLEVBQVUzakIsS0FBSzBtRyxhQUNmN2QsRUFBTzdvRixLQUFLeW1HLFVBQ1pwK0YsRUFBUSxtQkFFSmlnRSxLQUFLdWdCLEVBQUsxbUYsS0FBTSxTQUFTeWpCLEVBQVNqZixHQUNwQ3VnQixNQUFNdkQsRUFBUXhoQixLQUFLd0UsS0FBWWlmLEVBQVEwOUQsY0FLdENqN0UsaUJBTU8sU0FBUzFCLE9BQ25CNmhFLEVBQUt4b0UsS0FDTHFJLEVBQVFySSxLQUFLeW1HLFVBQVVwK0YsTUFDdkJzYixFQUFVNmtELEVBQUdrK0IsYUFDYjdkLEVBQU9yZ0IsRUFBR2krQixhQUVWdi9FLE1BQU12RCxFQUFReGhCLEtBQUt3RSxLQUFXa2lGLEVBQUsxbUYsS0FBS3dFLEdBQU8yOEUsY0FDM0MsTUFJSnB6RCxTQUNJczRDLEVBQUd4QyxnQkFDQ3IvRCxVQUNGZ2QsZUFDSzZrRCxFQUFHN2hFLGNBR1h5Z0UsVUFBUTcyRCxRQUFRa0ssU0FDdEIrdEQsRUFBR3hDLE1BQU16MUQsUUFBUTYxRSxTQUFTcGIsSUFBSXdSLE1BQzdCLEVBQUlyMUUsS0FBS2lpRSxHQUFNL2dFLEdBQ2Q2bkIsRUFBU3ZwQixPQ3JQZmttRSxjQUFTQyxLQUFLLHFCQUVOLHdDQUlJLE1BS1oscUJBQWlCLFNBQVNDLEtBRW5CNnpCLFlBQVk4K0IsTUFBUTN5RCxFQUFNdzVCLGtCQUFrQm45RSwyQkFFN0JnOUQsU0FBUzgyQyxxQkFFWjkyQyxTQUFTczBDLGlCQUVkdHpELFVBQVFob0QsWUFFWixTQUFTZ2tGLE9BQ1o1NkIsRUFBS3hvRSxLQUNMNm9GLEVBQU9yZ0IsRUFBR2krQixVQUNWcGdCLEVBQU93QyxFQUFLbGxFLFFBQ1pnNkQsRUFBU2tMLEVBQUsxbUYsS0FDZDA4RixFQUFTeFksRUFBS3dZLFdBQ2RsN0UsRUFBVTZrRCxFQUFHaytCLGFBQ2J5MkIsRUFBcUIzMEQsRUFBR3hDLE1BQU16MUQsUUFBUTYxRSxTQUFTQyxLQUMvQ2xULEVBQVEzSyxFQUFHeEMsTUFBTW1OLFdBR0kxdkUsSUFBcEJrZ0IsRUFBUXFvRCxjQUFtRHZvRSxJQUF4QmtnQixFQUFReTVHLGdCQUN2Q0EsWUFBY3o1RyxFQUFRcW9ELG1CQUd2QjVpRCxPQUFPeS9ELEVBQUtsbEUsdUJBRUo2a0QsRUFBRzdoRSxhQUNWd3NFLFlBRUd3SyxTQUNKLGtCQUlHa2hCLEVBQU83eUIsUUFBVTZ5QixFQUFPN3lCLFFBQVU1RSxVQUFRQyxlQUFlMWpELEVBQVF5NUcsWUFBYUQsRUFBbUJueEQseUJBQ3pGNnlCLEVBQU9oWixnQkFBa0JnWixFQUFPaFosZ0JBQW1CbGlFLEVBQVFraUUsaUJBQW1CczNDLEVBQW1CdDNDLDRCQUNyR2daLEVBQU9sWixZQUFja1osRUFBT2xaLFlBQWVoaUUsRUFBUWdpRSxhQUFldzNDLEVBQW1CeDNDLHdCQUNyRmtaLEVBQU9wWixZQUFjb1osRUFBT3BaLFlBQWU5aEUsRUFBUThoRSxhQUFlMDNDLEVBQW1CMTNDLGlCQUM1Rm9aLEVBQU92ekIsS0FBT3V6QixFQUFPdnpCLFVBQXlCN25FLElBQWpCa2dCLEVBQVEybkQsS0FBcUIzbkQsRUFBUTJuRCxLQUFPNnhELEVBQW1CN3hELG9CQUNsRnV6QixFQUFPcFksZUFBaUJvWSxFQUFPcFksZUFBa0I5aUUsRUFBUThpRSxnQkFBa0IwMkMsRUFBbUIxMkMsMEJBQ2xHb1ksRUFBT2xZLFdBQWFrWSxFQUFPbFksV0FBY2hqRSxFQUFRZ2pFLFlBQWN3MkMsRUFBbUJ4MkMsNEJBQzVFa1ksRUFBT2hZLGlCQUFtQmdZLEVBQU9oWSxpQkFBb0JsakUsRUFBUWtqRSxrQkFBb0JzMkMsRUFBbUJ0MkMsaUNBQ3JHZ1ksRUFBTy9YLGdCQUFrQitYLEVBQU8vWCxnQkFBbUJuakUsRUFBUW1qRSxpQkFBbUJxMkMsRUFBbUJyMkMscUJBSS9HbmpFLFFBQVE4OEUsa0JBR0xuNEIsS0FBS3FWLEVBQVEsU0FBU1UsRUFBTzEzRSxLQUNqQ3dnRyxjQUFjOW9CLEVBQU8xM0UsRUFBT3k4RixJQUM3QjU2QixLQUdBKzBELDJDQUVXLFNBQVNsL0MsRUFBTzEzRSxFQUFPeThGLE9BQ2pDNTZCLEVBQUt4b0UsS0FDTDYrRixFQUFTeGdCLEVBQU13Z0IsV0FDZmw3RSxFQUFVNmtELEVBQUdrK0IsYUFDYnZ6QixFQUFRM0ssRUFBR3hDLE1BQU1tTixNQUNqQndzRCxFQUFzQm4zRCxFQUFHeEMsTUFBTXoxRCxRQUFRNjFFLFNBQVMvSCxNQUNoRHl1QixFQUFnQjM1QixFQUFNdTdCLHlCQUF5Qi9uRyxFQUFPZ2QsRUFBUXhoQixLQUFLd0UsU0FHL0NsRCxJQUFuQmtnQixFQUFRc21ELGFBQWtEeG1FLElBQXhCa2dCLEVBQVFrNkcsZ0JBQ3RDQSxZQUFjbDZHLEVBQVFzbUQsYUFFSnhtRSxJQUF0QmtnQixFQUFRcWpFLGdCQUF3RHZqRixJQUEzQmtnQixFQUFRbTZHLG1CQUN6Q0EsZUFBaUJuNkcsRUFBUXFqRSxxQkFHMUI1OUQsT0FBT2kxRCxpQkFFQzdWLEVBQUc3aEUsYUFDVkEsU0FDQXdzRSxZQUlKaXdCLEVBQVFqd0IsRUFBTXM1QixRQUFVSyxFQUFjL2lDLElBQ3RDcTVCLEVBQVFqd0IsRUFBTXU1QixRQUFVSSxFQUFjOWlDLFVBR2hDNjBCLEVBQU83eUIsUUFBVTZ5QixFQUFPN3lCLFFBQVU1RSxVQUFRQyxlQUFlMWpELEVBQVF5NUcsWUFBYTUwRCxFQUFHeEMsTUFBTXoxRCxRQUFRNjFFLFNBQVNDLEtBQUtyYSxnQkFDOUc2eUIsRUFBTzUwQixPQUFTNDBCLEVBQU81MEIsT0FBUzdDLFVBQVE2QixzQkFBc0J0bEQsRUFBUWs2RyxZQUFhbDNILEVBQU9nNUgsRUFBb0IxMUQsd0JBQ3JHNDBCLEVBQU9oWixnQkFBa0JnWixFQUFPaFosZ0JBQWtCemUsVUFBUTZCLHNCQUFzQnRsRCxFQUFRNjVHLHFCQUFzQjcySCxFQUFPZzVILEVBQW9COTVDLDZCQUM3SWdaLEVBQU9wWixZQUFjb1osRUFBT3BaLFlBQWNyZSxVQUFRNkIsc0JBQXNCdGxELEVBQVE4NUcsaUJBQWtCOTJILEVBQU9nNUgsRUFBb0JsNkMseUJBQzdIb1osRUFBT2xaLFlBQWNrWixFQUFPbFosWUFBY3ZlLFVBQVE2QixzQkFBc0J0bEQsRUFBUSs1RyxpQkFBa0IvMkgsRUFBT2c1SCxFQUFvQmg2Qyx3QkFDOUhrWixFQUFPM1gsV0FBYTJYLEVBQU8zWCxXQUFhOWYsVUFBUTZCLHNCQUFzQnRsRCxFQUFRdWpFLFdBQVl2Z0YsRUFBT2c1SCxFQUFvQno0QyxxQkFDdkgyWCxFQUFPcjBCLFNBQVdxMEIsRUFBT3IwQixTQUFXcEQsVUFBUTZCLHNCQUFzQnRsRCxFQUFRZzZHLGNBQWVoM0gsRUFBT2c1SCxFQUFvQm4xRCxvQkFHbkhxMEIsRUFBTzdYLFVBQVk2WCxFQUFPN1gsVUFBWTVmLFVBQVE2QixzQkFBc0J0bEQsRUFBUW02RyxlQUFnQm4zSCxFQUFPZzVILEVBQW9CMzRDLGdCQUk5SDFJLE9BQU9wQixLQUFPMmhCLEVBQU8zaEIsS0FBTzJoQixFQUFPM2hCLEtBQVFoMkQsTUFBTW0zRCxFQUFNQyxPQUFPdlUsSUFBTTdpRCxNQUFNbTNELEVBQU1DLE9BQU90VSw4QkFFbkUsZUFDdEI4TyxFQUFZOTRFLEtBQUtnbUUsTUFBTThTLFVBQ3ZCK1AsRUFBTzdvRixLQUFLeW1HLG9CQUVSbitCLEtBQUt1Z0IsRUFBSzFtRixLQUFNLFNBQVNrOEUsRUFBTzEzRSxPQUNuQzArQixFQUFRZzVDLEVBQU1DLE9BQ2RrZ0QsRUFBZ0JwM0QsVUFBUTBWLFlBQzNCMVYsVUFBUXlYLGFBQWFnSyxFQUFLMW1GLEtBQU13RSxHQUFPLEdBQU0yM0UsT0FDN0NqNUMsRUFDQStoQyxVQUFRdVgsU0FBU2tLLEVBQUsxbUYsS0FBTXdFLEdBQU8sR0FBTTIzRSxPQUN6Q2o1QyxFQUFNMm1DLFdBSURFLHNCQUF3Qi9rRSxLQUFLQyxJQUFJRCxLQUFLZ2IsSUFBSXE4RyxFQUFjM3lELFNBQVM5QixFQUFHK08sRUFBVXQzQixPQUFRczNCLEVBQVUvbkIsUUFDaEdxYixzQkFBd0JqbEUsS0FBS0MsSUFBSUQsS0FBS2diLElBQUlxOEcsRUFBYzN5RCxTQUFTN0IsRUFBRzhPLEVBQVVuTixRQUFTbU4sRUFBVTduQixPQUVqR2tiLGtCQUFvQmhsRSxLQUFLQyxJQUFJRCxLQUFLZ2IsSUFBSXE4RyxFQUFjbC9GLEtBQUt5cUMsRUFBRytPLEVBQVV0M0IsT0FBUXMzQixFQUFVL25CLFFBQ3hGc2Isa0JBQW9CbGxFLEtBQUtDLElBQUlELEtBQUtnYixJQUFJcThHLEVBQWNsL0YsS0FBSzBxQyxFQUFHOE8sRUFBVW5OLFFBQVNtTixFQUFVN25CLE9BR3pGd3ZDLHlCQUlPLFNBQVNwaUIsT0FFbkIxNkQsRUFBVTNqQixLQUFLZ21FLE1BQU03akUsS0FBS2drRSxTQUFTa1ksRUFBTTRMLGVBQ3pDNFUsRUFBU3hnQixFQUFNd2dCLFdBQ2ZsNEYsRUFBUTAzRSxFQUFNMkwsT0FDZDNrRCxFQUFRZzVDLEVBQU1DLFNBRVorb0IsZ0NBQ1loaUUsRUFBTXdnRCw0QkFDVnhnRCxFQUFNb2dELHdCQUNOcGdELEVBQU1zZ0QsbUJBQ1h0Z0QsRUFBTTRrQyxVQUdUQSxPQUFTNDBCLEVBQU90YSxZQUFjc2EsRUFBT3RhLFlBQWNuZCxVQUFRNkIsc0JBQXNCdGxELEVBQVFvN0csaUJBQWtCcDRILEVBQU8zRyxLQUFLZ21FLE1BQU16MUQsUUFBUTYxRSxTQUFTL0gsTUFBTWtHLGVBQ3BKc0IsZ0JBQWtCZ1osRUFBT3lJLHFCQUF1QnpJLEVBQU95SSxxQkFBdUJsZ0MsVUFBUTZCLHNCQUFzQnRsRCxFQUFRaTdHLDBCQUEyQmo0SCxFQUFPeWdFLFVBQVFxYixjQUFjcDlDLEVBQU13Z0Qsb0JBQ2xMSixZQUFjb1osRUFBTzBJLGlCQUFtQjFJLEVBQU8wSSxpQkFBbUJuZ0MsVUFBUTZCLHNCQUFzQnRsRCxFQUFRazdHLHNCQUF1Qmw0SCxFQUFPeWdFLFVBQVFxYixjQUFjcDlDLEVBQU1vZ0QsZ0JBQ2xLRSxZQUFja1osRUFBTzJJLGlCQUFtQjNJLEVBQU8ySSxpQkFBbUJwZ0MsVUFBUTZCLHNCQUFzQnRsRCxFQUFRbTdHLHNCQUF1Qm40SCxFQUFPMCtCLEVBQU1zZ0QsaUJDM0pySjlZLGNBQVNDLEtBQUssdUJBRU4sNkJBS0QsZ0JBQ0Usa0JBQ0ksc0JBR04sZ0JBQ0Usa0JBQ0kscUJBSUQsNkJBSUYsaUJBQ0MsVUFFRCxTQUFTamxELFNBQ1IsSUFBTUEsRUFBS2l3RSxPQUFTLEtBQU9qd0UsRUFBS213RSxPQUFTLFNBTXBELHVCQUFpQixTQUFTanJCLEtBR25CNnpCLFlBQVlnL0IsUUFBVTd5RCxFQUFNNnpCLFlBQVl2YSxnQkNyQzlCLFNBQVN0WixLQUVuQjh5RCxJQUFNLFNBQVMzdkcsRUFBUzNRLFlBQ3RCaGIsS0FBTyxNQUVQLElBQUl3b0UsRUFBTTc4QyxFQUFTM1Esa0JDTFgsU0FBU3d0RCxLQUVuQit5RCxPQUFTLFNBQVM1dkcsRUFBUzNRLFlBQ3pCaGIsS0FBTyxTQUNQLElBQUl3b0UsRUFBTTc4QyxFQUFTM1Esb0JDSlgsU0FBU3d0RCxLQUVuQmd6RCxTQUFXLFNBQVM3dkcsRUFBUzNRLFlBQzNCaGIsS0FBTyxXQUVQLElBQUl3b0UsRUFBTTc4QyxFQUFTM1EsZ0JDTFgsU0FBU3d0RCxLQUVuQm13RCxLQUFPLFNBQVNodEcsRUFBUzNRLFlBQ3ZCaGIsS0FBTyxPQUVQLElBQUl3b0UsRUFBTTc4QyxFQUFTM1EscUJDTFgsU0FBU3d0RCxLQUVuQml6RCxVQUFZLFNBQVM5dkcsRUFBUzNRLFlBQzVCaGIsS0FBTyxZQUVQLElBQUl3b0UsRUFBTTc4QyxFQUFTM1EsaUJDTFgsU0FBU3d0RCxLQUVuQmt6RCxNQUFRLFNBQVMvdkcsRUFBUzNRLFlBQ3hCaGIsS0FBTyxRQUVQLElBQUl3b0UsRUFBTTc4QyxFQUFTM1EsbUJDTFgsU0FBU3d0RCxLQUNuQm16RCxRQUFVLFNBQVNod0csRUFBUzNRLFlBQzFCaGIsS0FBTyxVQUNQLElBQUl3b0UsRUFBTTc4QyxFQUFTM1EsS0NPNUJzdEQsY0FBU0MsS0FBSyxzQ0FHQSxNQUtkLElBQUlxekQsaUJBQ00sU0FBUzU1SCxPQUNiSSxFQUFRSixFQUFPK2tFLEtBQ2Z0RixFQUFRei9ELEVBQU95L0QsTUFDZjZpQixFQUFPN2lCLEVBQU1nakIsZUFBZXJpRixHQUU1QmczRSxFQURVa0wsR0FBUTdpQixFQUFNK2lCLGlCQUFpQnBpRixJQUNwQmtpRixFQUFLbGxFLFFBQVF1aUUsY0FDbEN0L0UsRUFBUysyRSxFQUFPLzJFLFFBQVUsU0FFdEJBLEVBQWdCLFNBQVN5M0UsRUFBT3A2RCxVQUMvQkEsRUFBSXJkLEdBQVUrMkUsRUFBTzE1RCxHQUFHcy9ELE9BQVUsTUFEMUIsZUFLUixTQUFTaDlFLE9BQ2Q2NUgsRUFBVzc1SCxFQUFPNjVILFNBQ2xCcjJELEVBQUlxMkQsRUFBV0EsRUFBU3IyRCxFQUFJLEtBQzVCQyxFQUFJbzJELEVBQVdBLEVBQVNwMkQsRUFBSSxZQUV6QixTQUFTcVUsWUFFTCxPQUFOdFUsRUFBYXNVLEVBQU10VSxFQUFJQSxJQUNqQixPQUFOQyxFQUFhcVUsRUFBTXJVLEVBQUlBLE1BTzlCLFNBQVNxMkQsV0FBVzkvRyxFQUFJNVosRUFBTzBCLE9BRzFCMlksRUFGQXFrQixFQUFROWtCLEVBQUcrOUQsV0FDWGhULEVBQU9qbUMsRUFBTWltQyxhQUdKN25FLElBQVQ2bkUsUUFDTWptQyxFQUFNd2dELGtCQUdILElBQVR2YSxHQUEyQixPQUFUQSxTQUNkLE1BR0ssSUFBVEEsUUFDSSxjQUdDMWtELFdBQVcwa0QsRUFBTSxJQUN0QnhrRCxTQUFTOUYsSUFBVzdaLEtBQUswZixNQUFNN0YsS0FBWUEsUUFDOUIsTUFBWnNxRCxFQUFLLElBQTBCLE1BQVpBLEVBQUssT0FDbEIza0UsRUFBUXFhLEtBR2RBLElBQVdyYSxHQUFTcWEsRUFBUyxHQUFLQSxHQUFVM1ksSUFJekMyWSxTQUdBc3FELE9BRUgsZUFDRyxZQUNILFlBQ0csVUFDSCxhQUNHLGFBRUgsYUFDQSxZQUNBLGFBQ0dBLGlCQUdBLEdBSVQsU0FBU2cxRCxnQkFBZ0IvNUgsT0FLcEJ3aEYsRUFKQTFpRCxFQUFROStCLEVBQU9nYSxHQUFHKzlELFdBQ2xCbkwsRUFBUTVzRSxFQUFPZ2EsR0FBR2s4RSxXQUNsQm54QixFQUFPL2tFLEVBQU8ra0UsS0FDZHRxRCxFQUFTLFFBR1Q4RixTQUFTd2tELFVBQ0wsUUFPSyxVQUFUQSxTQUM0QjduRSxJQUF0QjRoQyxFQUFNazdGLFlBQTRCcHRELEVBQU14SCxPQUFTdG1DLEVBQU1rN0YsWUFDN0MsUUFBVGoxRCxTQUNrQjduRSxJQUFuQjRoQyxFQUFNbTdGLFNBQXlCcnRELEVBQU1saUIsSUFBTTVyQixFQUFNbTdGLGNBQzVCLzhILElBQXBCNGhDLEVBQU1vN0YsWUFDUHA3RixFQUFNbzdGLFVBQ0x0dEQsRUFBTXV0RCxrQkFDUHZ0RCxFQUFNdXRELGtCQUNMdnRELEVBQU1nbUQsaUJBQ1BobUQsRUFBTWdtRCxxQkFHRDExSCxJQUFYdWQsR0FBbUMsT0FBWEEsRUFBaUIsU0FDM0J2ZCxJQUFidWQsRUFBTytvRCxRQUFnQ3RtRSxJQUFidWQsRUFBT2dwRCxTQUM3QmhwRCxLQUdjLGlCQUFYQSxHQUF1QjhGLFNBQVM5RixlQUM3Qm15RCxFQUFNcUUsZ0JBRUZ4MkQsRUFBUyxPQUN0QittRSxFQUFhLEtBQU8vbUUsVUFLbkIsS0FHUixTQUFTMi9HLGNBQWN4M0gsRUFBU3hDLEVBQU9pNkgsT0FJbEM1L0csRUFGQXNxRCxFQURTbmlFLEVBQVF4QyxHQUNIMmtFLEtBQ2R1MUQsR0FBV2w2SCxPQUdWaTZILFNBQ0d0MUQsUUFHUSxJQUFUQSxJQUE2QyxJQUEzQnUxRCxFQUFRLzRHLFFBQVF3akQsSUFBYyxLQUNqRHhrRCxTQUFTd2tELFVBQ05BLFNBR0NuaUUsRUFBUW1pRSxXQUVULEtBR0p0cUQsRUFBTzgvRyxlQUNIeDFELElBR0FyK0QsS0FBS3ErRCxLQUNOdHFELEVBQU9zcUQsWUFHUixFQUdSLFNBQVN5MUQsYUFBYXg2SCxPQUNqQitrRSxFQUFPL2tFLEVBQU8ra0UsS0FDZC9tRSxFQUFPLGlCQUVFLElBQVQrbUUsRUFDSSxNQUdIeGtELFNBQVN3a0QsT0FDTixZQUdENjBELFFBQVE1N0gsR0FBTWdDLElBR3RCLFNBQVN5NkgsV0FBVzNpRCxVQUNaQSxJQUFVQSxFQUFNbkIsS0FHeEIsU0FBUytqRCxTQUFTdDRHLEVBQUt1NEcsRUFBUUMsRUFBUUMsRUFBTUMsT0FDeENwOUcsS0FFQ205RyxHQUFTQyxTQUtWbDNELE9BQU8rMkQsRUFBTyxHQUFHbjNELEVBQUdtM0QsRUFBTyxHQUFHbDNELEdBQzdCL2xELEVBQUksRUFBR0EsRUFBSW05RyxJQUFRbjlHLFlBQ2Z5N0QsT0FBT3RWLE9BQU96aEQsRUFBS3U0RyxFQUFPajlHLEVBQUksR0FBSWk5RyxFQUFPajlHLFVBSTlDbW1ELE9BQU8rMkQsRUFBT0UsRUFBTyxHQUFHdDNELEVBQUdvM0QsRUFBT0UsRUFBTyxHQUFHcjNELEdBRzNDL2xELEVBQUlvOUcsRUFBTyxFQUFHcDlHLEVBQUksSUFBS0EsWUFDbkJ5N0QsT0FBT3RWLE9BQU96aEQsRUFBS3c0RyxFQUFPbDlHLEdBQUlrOUcsRUFBT2w5RyxFQUFJLElBQUksSUFJdkQsU0FBU3E5RyxPQUFPMzRHLEVBQUtnMUQsRUFBUTRqRCxFQUFRdjhHLEVBQU1zOUQsRUFBTzFELE9BTzdDMzZELEVBQUd5akQsRUFBTS9nRSxFQUFPNjZILEVBQUlscUIsRUFBSW1xQixFQUFJQyxFQU41QnI1SCxFQUFRczFFLEVBQU8vMkUsT0FDZit0SCxFQUFPM3ZHLEVBQUtpaEUsU0FDWmk3QyxLQUNBQyxLQUNBQyxFQUFPLEVBQ1BDLEVBQU8sUUFHUHQyRCxZQUVDOW1ELEVBQUksRUFBR3lqRCxFQUFRci9ELElBQVV1MkUsRUFBTzM2RCxFQUFJeWpELElBQVF6akQsSUFHM0NzOUcsSUFEQTVqRCxJQURHMTVELEVBQUk1YixHQUNPazdFLE1BQ0g1OEUsRUFBT3FlLEtBQ2xCZzhHLFdBQVdRLEtBQ1hSLFdBQVcxcEIsR0FFWm1xQixHQUFNQyxLQUNGUixFQUFPajBILEtBQUt1MEgsS0FDWkwsRUFBT2wwSCxLQUFLcXFHLElBQ1Q4cEIsR0FBUUMsSUFDYjFNLEdBTUE4TSxLQUNJeDBILEtBQUt1MEgsR0FFVEUsS0FDSXowSCxLQUFLcXFHLGNBVEozdUYsRUFBS3U0RyxFQUFRQyxFQUFRQyxFQUFNQyxLQUM3QkEsRUFBTyx1QkFjUjE0RyxFQUFLdTRHLEVBQVFDLEVBQVFDLEVBQU1DLEtBRWhDLzJELGNBQ0FzYixVQUFZdEQsSUFDWmhYLE9BR0wsc0JBQ0ssNkJBRWlCLFNBQVN0RixFQUFPejFELE9BSWhDczRFLEVBQU01a0UsRUFBRzFELEVBQUloYSxFQUhiOEIsR0FBUzI5RCxFQUFNN2pFLEtBQUtna0UsY0FBZ0J2L0QsT0FDcENnNkgsRUFBWXJ3SCxFQUFRcXdILFVBQ3BCejNILFNBR0M4YSxFQUFJLEVBQUdBLEVBQUk1YixJQUFTNGIsSUFHZixXQUZGK2hELEVBQU1nakIsZUFBZS9rRSxJQUNsQk4sVUFHQXBELEVBQUcrOUQsUUFBVS85RCxhQUFjNmxFLFNBQVM4MkMsa0JBRW5DbDNELEVBQU0raUIsaUJBQWlCOWtFLFFBQzFCbzhHLFdBQVc5L0csRUFBSTBELEVBQUc1YixTQUNqQjI5RCxLQUNIemxELE1BSURvaEgsUUFBVXA3SCxJQUNQMEcsS0FBSzFHLE9BR1QwZCxFQUFJLEVBQUdBLEVBQUk1YixJQUFTNGIsS0FDZjlhLEVBQVE4YSxRQUtWcW5ELEtBQU9xMUQsY0FBY3gzSCxFQUFTOGEsRUFBRzI4RyxLQUNqQ1IsU0FBV0UsZ0JBQWdCLzVILEtBQzNCZzdILE9BQVNSLGFBQWF4NkgsdUJBSVosU0FBU3kvRCxFQUFPLytELE9BQzlCNGhGLEVBQU81aEYsRUFBSzRoRixLQUFLODRDLFdBQ2hCOTRDLE9BSURsZ0UsRUFBTXE5QyxFQUFNcjlDLElBQ1pwSSxFQUFLc29FLEVBQUt0b0UsR0FDVnlFLEVBQU96RSxFQUFHZ2pFLE1BQ1Y1RixFQUFTcDlELEVBQUcybEUsY0FDWnE3QyxFQUFTMTRDLEVBQUswNEMsT0FDZGovQyxFQUFRdDlELEVBQUs2Z0UsaUJBQW1CaFosY0FBU2xxRSxPQUFPNi9FLGFBRWhEKytDLEdBQVVqL0MsR0FBUzNFLEVBQU8vMkUsbUJBQ3JCODRFLE9BQU8wNkMsU0FBU3p4RyxFQUFLcTlDLEVBQU04UyxrQkFDNUJud0QsRUFBS2cxRCxFQUFRNGpELEVBQVF2OEcsRUFBTXM5RCxFQUFPL2hFLEVBQUdnbUUsaUJBQ3BDN0csT0FBTzI2QyxXQUFXMXhHLE9DblR6QnZKLE9BQU9nb0QsVUFBUWhvRCxLQW1GbkIsU0FBU3dpSCxZQUFZQyxFQUFXNXlDLFVBQ3hCNHlDLEVBQVVDLGNBQ2hCN3lDLEVBQVc5bkYsS0FBSzhqRSxNQUNoQjQyRCxFQUFVRSxTQXBGWmwxRCxjQUFTQyxLQUFLLDJCQUVILFdBQ0MsaUJBQ0MsV0FDRixTQUNELFlBR0MsU0FBUzlvRSxFQUFHZzNILE9BQ2hCcjBILEVBQVFxMEgsRUFBV2p4QyxhQUNuQmk0QyxFQUFLaGlJLEtBQUtnbUUsTUFDVjZpQixFQUFPbTVDLEVBQUdoNUMsZUFBZXJpRixLQUd4QjI4RSxPQUF5QixPQUFoQnVGLEVBQUt2RixRQUFtQjArQyxFQUFHNy9ILEtBQUtna0UsU0FBU3gvRCxHQUFPMjhFLE9BQVMsT0FHcEU1ekQsa0JBR0ssc0JBR0UsV0FDRCxrQkFZTyxTQUFTczJDLE9BQ3BCN2pFLEVBQU82akUsRUFBTTdqRSxZQUNWaWxFLFVBQVF2OUQsUUFBUTFILEVBQUtna0UsVUFBWWhrRSxFQUFLZ2tFLFNBQVMxeEQsSUFBSSxTQUFTa1AsRUFBU00sZUFFcEVOLEVBQVFsaUIsZ0JBQ0QybEUsVUFBUXY5RCxRQUFROFosRUFBUWtpRSxpQkFBNkNsaUUsRUFBUWtpRSxnQkFBZ0IsR0FBbERsaUUsRUFBUWtpRSx3QkFDdkQ3ZixFQUFNK2lCLGlCQUFpQjlrRSxXQUN2Qk4sRUFBUThpRSx3QkFDUDlpRSxFQUFRZ2pFLDBCQUNGaGpFLEVBQVFrakUsMEJBQ2RsakUsRUFBUW1qRSwwQkFDUG5qRSxFQUFRZ2lFLHdCQUNOaGlFLEVBQVE4aEUsdUJBQ1Q5aEUsRUFBUXVqRSx3QkFHTmpqRSxJQUViamtCLDJCQUtVLFNBQVNnbUUsT0FDcEI3a0UsT0FDQzhMLEtBQUssY0FBZ0IrNEQsRUFBTS8yQyxHQUFLLGlCQUNoQyxJQUFJaEwsRUFBSSxFQUFHQSxFQUFJK2hELEVBQU03akUsS0FBS2drRSxTQUFTdi9ELE9BQVFxZCxNQUMxQ2hYLEtBQUsscUNBQXVDKzRELEVBQU03akUsS0FBS2drRSxTQUFTbGlELEdBQUc0aEUsZ0JBQWtCLGFBQ3RGN2YsRUFBTTdqRSxLQUFLZ2tFLFNBQVNsaUQsR0FBR3hpQixTQUNyQndMLEtBQUsrNEQsRUFBTTdqRSxLQUFLZ2tFLFNBQVNsaUQsR0FBR3hpQixTQUU3QndMLEtBQUssa0JBRU5BLEtBQUssU0FDSDlMLEVBQUt1Z0IsS0FBSyxPQW1CbkIsSUFBSXVnSCxPQUFTOStDLGFBQVEvNUQsbUJBRVIsU0FBUzdKLGFBQ1o2SixPQUFPcHBCLEtBQU11ZixRQUdoQjJpSCx1QkFHQUMsY0FBZSxnQkFPUC9pSCxjQUNOLFNBQVMyd0UsRUFBVUMsRUFBV0MsT0FDakN6bkIsRUFBS3hvRSxjQUdOOHZGLGlCQUdBQyxTQUFXQSxJQUNYQyxVQUFZQSxJQUNaQyxRQUFVQSxJQUdWRSx3QkFDQUMsa0JBQ0FDLHVCQUVBK3hDLHNCQUNBQyxnQkFDQUMscUJBR0FweEMsY0FDQUMsUUFDQUMsYUFFQUMsY0FFSTdvQixFQUFHK08scUJBRUVuNEQsMkJBSVFBLHFCQUNOLGVBQ1ZvcEQsRUFBS3hvRSxLQUVMd29FLEVBQUdnUCxrQkFFSDNOLE1BQVFyQixFQUFHdW5CLFdBQ1hoL0IsS0FBTyxJQUNQdlAsTUFBUWduQixFQUFHcUIsVUFFWEMsT0FBU3RCLEVBQUd3bkIsWUFHWi8rQixJQUFNLElBQ04wYSxPQUFTbkQsRUFBR3NCLFVBSWJrVyxZQUFjLElBQ2RDLFdBQWEsSUFDYkMsYUFBZSxJQUNmQyxjQUFnQixJQUdoQjVJLGVBQ0ssU0FDQyx1QkFHVW40RCx5QkFJREEsbUJBQ04sZUFDUm9wRCxFQUFLeG9FLEtBQ0w2aEksRUFBWXI1RCxFQUFHajRELFFBQVFtMkQsV0FDdkI2N0QsRUFBY243RCxVQUFRbmhDLFNBQVM0N0YsRUFBVVcsZ0JBQWlCaDZELEVBQUd4QyxPQUFRd0MsT0FFckVxNUQsRUFBVXZnSSxXQUNDaWhJLEVBQVlqaEksT0FBTyxTQUFTdW1CLFVBQ2xDZzZHLEVBQVV2Z0ksT0FBT3VtQixFQUFNMmdELEVBQUd4QyxNQUFNN2pFLFNBSXJDcW1FLEVBQUdqNEQsUUFBUWczRCxXQUNGQSxZQUdWZzdELFlBQWNBLG9CQUVBbmpILGlCQUlQQSxXQUNOLGVBQ0FvcEQsRUFBS3hvRSxLQUNMMnNCLEVBQU82N0MsRUFBR2o0RCxRQUNWc3hILEVBQVlsMUcsRUFBSys1QyxPQUNqQnhZLEVBQVV2aEMsRUFBS3VoQyxRQUVmdmxDLEVBQU02L0MsRUFBRzcvQyxJQUVUODVHLEVBQWdCNTFELGNBQVNscUUsT0FDekIwa0UsRUFBaUJELFVBQVFDLGVBQ3pCNG5CLEVBQVc1bkIsRUFBZXc2RCxFQUFVNXlDLFNBQVV3ekMsRUFBY3Z6QyxpQkFDNUQzTixFQUFZbGEsRUFBZXc2RCxFQUFVdGdELFVBQVdraEQsRUFBY3R6QyxrQkFDOUQzTixFQUFhbmEsRUFBZXc2RCxFQUFVcmdELFdBQVlpaEQsRUFBY3B6QyxtQkFDaEVxekMsRUFBWXQ3RCxVQUFRaWEsV0FBVzROLEVBQVUxTixFQUFXQyxHQUdwRG1oRCxFQUFXbjZELEVBQUcwNUQsa0JBRWQzcUQsRUFBVS9PLEVBQUcrTyxRQUNiQyxFQUFlaFAsRUFBR2dQLGtCQUVsQkEsS0FDSzNOLE1BQVFyQixFQUFHdW5CLFdBQ1hqbUIsT0FBUzViLEVBQVUsR0FBSyxNQUV4QjJiLE1BQVEzYixFQUFVLEdBQUssSUFDdkI0YixPQUFTdEIsRUFBR3duQixXQUlqQjloQyxPQUNDd3pCLEtBQU9naEQsRUFFUGxyRCxFQUFjLEtBSWJvckQsRUFBYXA2RCxFQUFHbzZELFlBQWMsR0FDOUJDLEVBQWNyNkQsRUFBRys1RCxZQUFZMzdILE9BQVNxb0YsRUFBWTR5QyxFQUFVMXJELFFBQVcsSUFFdkVtZ0IsVUFBWSxTQUNaQyxhQUFlLGdCQUVYanVCLEtBQUtFLEVBQUcrNUQsWUFBYSxTQUFTdkgsRUFBWS8yRyxPQUU3QzRsRCxFQURXKzNELFlBQVlDLEVBQVc1eUMsR0FDZEEsRUFBVyxFQUFLdG1FLEVBQUlxNUQsWUFBWWc1QyxFQUFXNzVILE1BQU0wb0UsTUFFckUrNEQsRUFBV0EsRUFBV2g4SCxPQUFTLEdBQUtpakUsRUFBUWc0RCxFQUFVMXJELFNBQVczTixFQUFHcUIsV0FDeERvbEIsRUFBWTR5QyxFQUFVMXJELFVBQzFCeXNELEVBQVdoOEgsUUFBVTRoRSxFQUFHelgsUUFJM0I5c0MsU0FDRixNQUNELFFBQ0U0bEQsU0FDQ29sQixLQUdFMnpDLEVBQVdoOEgsT0FBUyxJQUFNaWpFLEVBQVFnNEQsRUFBVTFyRCxZQUdoRHJNLFFBQVUrNEQsTUFFWixLQUNGQyxFQUFXakIsRUFBVTFyRCxRQUNyQjRzRCxFQUFldjZELEVBQUd1NkQsZ0JBQ2xCQyxFQUFhbkIsRUFBVTFyRCxRQUN2QjhzRCxFQUFrQixFQUNsQkMsRUFBbUIsRUFDbkJDLEVBQWFsMEMsRUFBVzZ6QyxZQUVwQng2RCxLQUFLRSxFQUFHKzVELFlBQWEsU0FBU3ZILEVBQVkvMkcsT0FFN0NtL0csRUFEV3hCLFlBQVlDLEVBQVc1eUMsR0FDVkEsRUFBVyxFQUFLdG1FLEVBQUlxNUQsWUFBWWc1QyxFQUFXNzVILE1BQU0wb0UsTUFHekVxNUQsRUFBbUJDLEVBQWE1ckQsRUFBUXpOLFlBQzdCbTVELEVBQWtCcEIsRUFBVTFyRCxVQUM3QmxwRSxLQUFLZzJILEtBRUEsSUFDQyxLQUlGOTdILEtBQUtDLElBQUk2N0gsRUFBaUJHLE1BQ3hCRCxJQUdYbC9HLFNBQ0YsTUFDRCxRQUNFbS9HLFNBQ0NuMEMsUUFJSWcwQyxJQUNEaDJILEtBQUtnMkgsS0FDVnA1RCxPQUFTbTVELElBSWhCbjVELE1BQVEwTixFQUFRMU4sUUFDaEJDLE9BQVN5TixFQUFRek4saUJBRVgxcUQsb0JBR0ksaUJBQ29CLFFBQTFCcGYsS0FBS3VRLFFBQVFtbEUsVUFBZ0QsV0FBMUIxMUUsS0FBS3VRLFFBQVFtbEUsZUFJbEQsZUFDRGxOLEVBQUt4b0UsS0FDTDJzQixFQUFPNjdDLEVBQUdqNEQsUUFDVnN4SCxFQUFZbDFHLEVBQUsrNUMsT0FDakIrN0QsRUFBZ0I1MUQsY0FBU2xxRSxPQUN6QjBnSSxFQUFjWixFQUFjcjhDLFNBQVNDLEtBQ3JDaTlDLEVBQWM5NkQsRUFBR3FCLE1BQ2pCKzRELEVBQWFwNkQsRUFBR282RCxjQUVoQmoyRyxFQUFLdWhDLFFBQVMsS0FRYnExRSxFQVBBNTZHLEVBQU02L0MsRUFBRzcvQyxJQUNUMCtDLEVBQWlCRCxVQUFRQyxlQUN6QnV0QixFQUFZdnRCLEVBQWV3NkQsRUFBVWp0QyxVQUFXNnRDLEVBQWM1dEMsa0JBQzlENUYsRUFBVzVuQixFQUFldzZELEVBQVU1eUMsU0FBVXd6QyxFQUFjdnpDLGlCQUM1RDNOLEVBQVlsYSxFQUFldzZELEVBQVV0Z0QsVUFBV2toRCxFQUFjdHpDLGtCQUM5RDNOLEVBQWFuYSxFQUFldzZELEVBQVVyZ0QsV0FBWWloRCxFQUFjcHpDLG1CQUNoRXF6QyxFQUFZdDdELFVBQVFpYSxXQUFXNE4sRUFBVTFOLEVBQVdDLEtBSXBEOFUsVUFBWSxTQUNaQyxhQUFlLFdBQ2Y3USxVQUFZLEtBQ1pGLFlBQWNvUCxJQUNkaFAsVUFBWWdQLElBQ1psVCxLQUFPZ2hELE1BRVBYLEVBQVdILFlBQVlDLEVBQVc1eUMsR0FDbEMwekMsRUFBV242RCxFQUFHMDVELGVBOERkMXFELEVBQWVoUCxFQUFHZ1AsaUJBQ2xCQSxLQUVDaFAsRUFBR3pYLE1BQVN1eUUsRUFBY1YsRUFBVyxJQUFNLElBQzNDcDZELEVBQUd2WCxJQUFNNHdFLEVBQVUxckQsYUFDaEIsTUFJSDNOLEVBQUd6WCxLQUFPOHdFLEVBQVUxckQsVUFDcEIzTixFQUFHdlgsSUFBTTR3RSxFQUFVMXJELGFBQ2hCLE9BSUpndEQsRUFBYWwwQyxFQUFXNHlDLEVBQVUxckQsa0JBQzlCN04sS0FBS0UsRUFBRys1RCxZQUFhLFNBQVN2SCxFQUFZLzJHLE9BQzdDaytELEVBQVl4NUQsRUFBSXE1RCxZQUFZZzVDLEVBQVc3NUgsTUFBTTBvRSxNQUM3Q0EsRUFBUWs0RCxFQUFZOXlDLEVBQVcsRUFBSzlNLEVBQ3BDcFksRUFBSXc1RCxFQUFPeDVELEVBQ1hDLEVBQUl1NUQsRUFBT3Y1RCxFQUVYd04sRUFDQ3pOLEVBQUlGLEdBQVN5NUQsTUFDWkMsRUFBT3Y1RCxHQUFLbTVELElBQ1Q5OEMsU0FDSGs5QyxFQUFPeDVELEVBQUl2QixFQUFHelgsTUFBU3V5RSxFQUFjVixFQUFXVyxFQUFPbDlDLE9BQVMsR0FFM0RyYyxFQUFJbTVELEVBQWEzNkQsRUFBR21ELFdBQzFCNDNELEVBQU94NUQsRUFBSUEsRUFBSXZCLEVBQUd1NkQsYUFBYVEsRUFBT2w5QyxNQUFRdzdDLEVBQVUxckQsVUFDeERvdEQsRUFBT3Y1RCxFQUFJeEIsRUFBR3ZYLElBQU00d0UsRUFBVTFyRCxVQUMzQmtRLFFBMUZXLFNBQVN0YyxFQUFHQyxFQUFHZ3hELFFBQzlCOXpHLE1BQU02NkcsSUFBYUEsR0FBWSxNQUsvQm4zRCxTQUVBZ2IsVUFBWXZlLEVBQWUyekQsRUFBV3AxQyxVQUFXNjhDLEVBQWNqZ0QsZ0JBQy9EZ0UsUUFBVW5mLEVBQWUyekQsRUFBV3gwQyxRQUFTNjhDLEVBQVk1OEMsa0JBQ3pERyxlQUFpQnZmLEVBQWUyekQsRUFBV3AwQyxlQUFnQnk4QyxFQUFZeDhDLG9CQUN2RWYsU0FBV3plLEVBQWUyekQsRUFBV2wxQyxTQUFVdTlDLEVBQVl2OEMsbUJBQzNEcEIsVUFBWXJlLEVBQWUyekQsRUFBV3QxQyxVQUFXMjlDLEVBQVkxOUMsZUFDN0RILFlBQWNuZSxFQUFlMnpELEVBQVd4MUMsWUFBYWk5QyxFQUFjamdELGtCQUNuRWdoRCxFQUFxRixJQUFsRW44RCxFQUFlMnpELEVBQVd0MUMsVUFBVzI5QyxFQUFZMTlDLGdCQUVwRWg5RCxFQUFJKzlELGVBRUhBLFlBQVlyZixFQUFlMnpELEVBQVd5SSxTQUFVSixFQUFZMThDLGFBRzdEaDZELEVBQUsrNUMsUUFBVS81QyxFQUFLKzVDLE9BQU9vN0QsY0FBZSxLQUd6QzczRCxFQUFTZ2xCLEVBQVc5bkYsS0FBSzhqRSxNQUFRLEVBQ2pDeTRELEVBQVN6NUQsRUFBUzlpRSxLQUFLOGpFLE1BQ3ZCc3hELEVBQVV4eUQsRUFBSTI1RCxFQUNkbEgsRUFBVXh5RCxFQUFJMDVELFlBR1Zoa0QsT0FBT3lILFVBQVV4K0QsRUFBS3F5RyxFQUFXOXpDLFdBQVlqZCxFQUFRc3lELEVBQVNDLFFBR2pFZ0gsS0FDQTFqQyxXQUFXLzFCLEVBQUdDLEVBQUcrM0QsRUFBVTl5QyxLQUU1QjRRLFNBQVM5MUIsRUFBR0MsRUFBRyszRCxFQUFVOXlDLEtBRzFCempCLFlBc0RVekIsRUFBR0MsRUFBR2d4RCxLQUVYLzJHLEdBQUc4c0MsS0FBT2daLElBQ1Y5bEQsR0FBR2d0QyxJQUFNK1ksRUF2REosU0FBU0QsRUFBR0MsRUFBR2d4RCxFQUFZNzRDLE9BQ3JDd2hELEVBQWUxMEMsRUFBVyxFQUMxQjIwQyxFQUFRN0IsRUFBVzRCLEVBQWU1NUQsRUFDbEM4NUQsRUFBVTc1RCxFQUFJMjVELElBRWR0c0MsU0FBUzJqQyxFQUFXNzVILEtBQU15aUksRUFBT0MsR0FFakM3SSxFQUFXMTNDLFdBRVZ2WSxjQUNBMmEsVUFBWSxJQUNadmIsT0FBT3k1RCxFQUFPQyxLQUNkejVELE9BQU93NUQsRUFBUXpoRCxFQUFXMGhELEtBQzFCdDRELFdBNkNJeEIsRUFBR0MsRUFBR2d4RCxFQUFZNzRDLEdBRXZCM0ssSUFDSXpOLEdBQUtGLEVBQVNnNEQsRUFBVTFyRCxVQUV4Qm5NLEdBQUttNUQsa0JBYUgsU0FBU24vSCxPQUNqQndrRSxFQUFLeG9FLEtBQ0wyc0IsRUFBTzY3QyxFQUFHajRELFFBQ1ZoTSxFQUFrQixZQUFYUCxFQUFFTyxLQUFxQixRQUFVUCxFQUFFTyxLQUMxQ20zRixHQUFVLEtBRUQsY0FBVG4zRixPQUNFb29CLEVBQUtvNUUsbUJBR0osQ0FBQSxHQUFhLFVBQVR4aEcsYUFDTG9vQixFQUFLcTVFLG1CQVFQajhCLEVBQUkvbEUsRUFBRStsRSxFQUNOQyxFQUFJaG1FLEVBQUVnbUUsS0FFTkQsR0FBS3ZCLEVBQUd6WCxNQUFRZ1osR0FBS3ZCLEVBQUdobkIsT0FBU3dvQixHQUFLeEIsRUFBR3ZYLEtBQU8rWSxHQUFLeEIsRUFBR21ELGVBRXZEbTRELEVBQUt0N0QsRUFBRzA1RCxlQUNIaitHLEVBQUksRUFBR0EsRUFBSTYvRyxFQUFHbDlILFNBQVVxZCxFQUFHLEtBQy9COC9HLEVBQVNELEVBQUc3L0csTUFFWjhsRCxHQUFLZzZELEVBQU9oekUsTUFBUWdaLEdBQUtnNkQsRUFBT2h6RSxLQUFPZ3pFLEVBQU9sNkQsT0FBU0csR0FBSys1RCxFQUFPOXlFLEtBQU8rWSxHQUFLKzVELEVBQU85eUUsSUFBTTh5RSxFQUFPajZELE9BQVEsSUFFakcsVUFBVHZsRSxFQUFrQixHQUVoQnloRyxRQUFRbmlHLEtBQUsya0UsRUFBSXhrRSxFQUFFMDlDLE9BQVE4bUIsRUFBRys1RCxZQUFZdCtHLE9BQ3JDLFFBRUosR0FBYSxjQUFUMWYsRUFBc0IsR0FFM0J3aEcsUUFBUWxpRyxLQUFLMmtFLEVBQUl4a0UsRUFBRTA5QyxPQUFROG1CLEVBQUcrNUQsWUFBWXQrRyxPQUNyQyxpQkFPUHkzRSxLQUlULFNBQVNzb0MseUJBQXlCaCtELEVBQU9pK0QsT0FDcENDLEVBQVMsSUFBSWpDLFlBQ1hqOEQsRUFBTXI5QyxZQUNGczdHLFFBQ0ZqK0QsaUJBR0FtK0QsVUFBVW4rRCxFQUFPaytELEVBQVFELGdCQUN6QjVxRCxPQUFPclQsRUFBT2srRCxLQUNoQkEsT0FBU0EsRUFHaEIsc0JBQ0ssa0JBU01qQyxrQkFFRSxTQUFTajhELE9BQ2hCaStELEVBQWFqK0QsRUFBTXoxRCxRQUFRMnpILE9BRTNCRCw0QkFDc0JqK0QsRUFBT2krRCxpQkFJcEIsU0FBU2orRCxPQUNsQmkrRCxFQUFhaitELEVBQU16MUQsUUFBUTJ6SCxPQUMzQkEsRUFBU2wrRCxFQUFNaytELE9BRWZELGFBQ0toOEQsUUFBUWc4RCxFQUFZcDNELGNBQVNscUUsT0FBT3VoSSxRQUV4Q0EsZ0JBQ0tDLFVBQVVuK0QsRUFBT2srRCxFQUFRRCxLQUMxQjF6SCxRQUFVMHpILDRCQUVRaitELEVBQU9pK0QsSUFFdkJDLGlCQUNGM2dDLFVBQVV2OUIsRUFBT2srRCxVQUNsQmwrRCxFQUFNaytELG9CQUlILFNBQVNsK0QsRUFBT2hpRSxPQUN2QmtnSSxFQUFTbCtELEVBQU1rK0QsT0FDZkEsS0FDSXgrQixZQUFZMWhHLEtDcmpCbEJvYixPQUFPZ29ELFVBQVFob0QsS0FFbkJ5dEQsY0FBU0MsS0FBSywwQkFFSCxZQUNFLGtCQUNBLGFBQ0MsWUFDSCxZQUNDLFdBQ0osVUFDRSxPQU9WLElBQUlzM0QsTUFBUWpoRCxhQUFRLzVELG1CQUNQLFNBQVM3SixhQUVaNkosT0FEQ3BwQixLQUNVdWYsR0FEVnZmLEtBSU5raUksZ0NBS1U5aUgsY0FDTixTQUFTMndFLEVBQVVDLEVBQVdDLE9BQ2pDem5CLEVBQUt4b0UsY0FHTjh2RixpQkFHQUMsU0FBV0EsSUFDWEMsVUFBWUEsSUFDWkMsUUFBVUEsSUFHVkUsd0JBQ0FDLGtCQUNBQyx1QkFFQSt4QyxzQkFDQUMsZ0JBQ0FDLHFCQUdBcHhDLGNBQ0FDLFFBQ0FDLGFBRUFDLGNBRUk3b0IsRUFBRytPLHFCQUdFbjRELDJCQUlRQSxxQkFDTixlQUNWb3BELEVBQUt4b0UsS0FFTHdvRSxFQUFHZ1Asa0JBRUgzTixNQUFRckIsRUFBR3VuQixXQUNYaC9CLEtBQU8sSUFDUHZQLE1BQVFnbkIsRUFBR3FCLFVBRVhDLE9BQVN0QixFQUFHd25CLFlBR1ovK0IsSUFBTSxJQUNOMGEsT0FBU25ELEVBQUdzQixVQUlia1csWUFBYyxJQUNkQyxXQUFhLElBQ2JDLGFBQWUsSUFDZkMsY0FBZ0IsSUFHaEI1SSxlQUNLLFNBQ0MsdUJBR1VuNEQseUJBSURBLG1CQUNOQSx3QkFDS0EsaUJBSVBBLFdBQ04sZUFDQW9wRCxFQUFLeG9FLEtBQ0xxbkUsRUFBaUJELFVBQVFDLGVBQ3pCMTZDLEVBQU82N0MsRUFBR2o0RCxRQUNWMjlDLEVBQVV2aEMsRUFBS3VoQyxRQUNmK2dDLEVBQVc1bkIsRUFBZTE2QyxFQUFLc2lFLFNBQVVwaUIsY0FBU2xxRSxPQUFPdXNGLGlCQUN6RDNYLEVBQVUvTyxFQUFHK08sUUFDYjZmLEVBQVlod0IsVUFBUXY5RCxRQUFROGlCLEVBQUt4ckIsTUFBUXdyQixFQUFLeHJCLEtBQUt5RixPQUFTLEVBQzVENG9GLEVBQWFwb0IsVUFBUTcyRCxRQUFRZy9FLGFBQWE1aUUsRUFBSzZpRSxXQUFZUCxHQUMzRHFkLEVBQVdwK0MsRUFBV2twQyxFQUFZNUgsRUFBOEIsRUFBZjdpRSxFQUFLd3BELFFBQWUsRUFFckUzTixFQUFHZ1Asa0JBQ0UzTixNQUFRckIsRUFBR3VuQixXQUNYam1CLE9BQVN3aUMsTUFFVHppQyxNQUFReWlDLElBQ1J4aUMsT0FBU3RCLEVBQUd3bkIsYUFHbEJubUIsTUFBUTBOLEVBQVExTixRQUNoQkMsT0FBU3lOLEVBQVF6TixpQkFHWDFxRCxvQkFHSSxlQUNUdXdDLEVBQU0zdkQsS0FBS3VRLFFBQVFtbEUsZUFDUixRQUFSL2xCLEdBQXlCLFdBQVJBLFFBSW5CLGVBQ0Q2WSxFQUFLeG9FLEtBQ0wyb0IsRUFBTTYvQyxFQUFHNy9DLElBQ1QwK0MsRUFBaUJELFVBQVFDLGVBQ3pCMTZDLEVBQU82N0MsRUFBR2o0RCxRQUNWdzFFLEVBQWlCbFosY0FBU2xxRSxVQUUxQmdxQixFQUFLdWhDLFFBQVMsS0FZYjZoQyxFQUFVczBDLEVBQVFDLEVBWGxCcjFDLEVBQVc1bkIsRUFBZTE2QyxFQUFLc2lFLFNBQVVsSixFQUFlbUosaUJBQ3hEM04sRUFBWWxhLEVBQWUxNkMsRUFBSzQwRCxVQUFXd0UsRUFBZW9KLGtCQUMxRDNOLEVBQWFuYSxFQUFlMTZDLEVBQUs2MEQsV0FBWXVFLEVBQWVzSixtQkFDNURrMUMsRUFBWW45RCxVQUFRaWEsV0FBVzROLEVBQVUxTixFQUFXQyxHQUNwRGdPLEVBQWFwb0IsVUFBUTcyRCxRQUFRZy9FLGFBQWE1aUUsRUFBSzZpRSxXQUFZUCxHQUMzRDE5RSxFQUFTaStFLEVBQWEsRUFBSTdpRSxFQUFLd3BELFFBQy9CM0wsRUFBVyxFQUNYdlosRUFBTXVYLEVBQUd2WCxJQUNURixFQUFPeVgsRUFBR3pYLEtBQ1Y0YSxFQUFTbkQsRUFBR21ELE9BQ1pucUIsRUFBUWduQixFQUFHaG5CLFFBR1hva0MsVUFBWXZlLEVBQWUxNkMsRUFBS2lvRSxVQUFXN08sRUFBZThPLG9CQUMxRG5ULEtBQU82aUQsRUFHUC83RCxFQUFHZ1Asa0JBQ0d6bUIsR0FBU3ZQLEVBQVF1UCxHQUFRLElBQ3pCRSxFQUFNMS9DLElBQ0ppd0MsRUFBUXVQLE1BRVEsU0FBbEJwa0MsRUFBSytvRCxTQUFzQjNrQixFQUFPeC9DLEVBQVNpd0MsRUFBUWp3QyxJQUNuRDAvQyxHQUFRMGEsRUFBUzFhLEdBQU8sSUFDdEIwYSxFQUFTMWEsSUFDVDlwRCxLQUFLaWlFLElBQXdCLFNBQWxCejhDLEVBQUsrb0QsVUFBdUIsR0FBTSxPQUdyRDlLLFNBQ0FDLFVBQVV3NUQsRUFBUUMsS0FDbEJ4NUQsT0FBT04sS0FDUDhyQixVQUFZLFdBQ1pDLGFBQWUsYUFFZnAxRixFQUFPd3JCLEVBQUt4ckIsUUFDWmltRSxVQUFRdjlELFFBQVExSSxXQUNmNm9FLEVBQUksRUFDQy9sRCxFQUFJLEVBQUdBLEVBQUk5aUIsRUFBS3lGLFNBQVVxZCxJQUM5Qm96RSxTQUFTbDJGLEVBQUs4aUIsR0FBSSxFQUFHK2xELEVBQUcrbEIsTUFDdkJQLFNBR0Y2SCxTQUFTbDJGLEVBQU0sRUFBRyxFQUFHNHVGLEtBR3RCdmtCLGNBS1AsU0FBU2c1RCw2QkFBNkJ4K0QsRUFBT3krRCxPQUN4QzdzQyxFQUFRLElBQUl3c0MsV0FDVnArRCxFQUFNcjlDLFlBQ0Y4N0csUUFDRnorRCxpQkFHQW0rRCxVQUFVbitELEVBQU80eEIsRUFBTzZzQyxnQkFDeEJwckQsT0FBT3JULEVBQU80eEIsS0FDaEI4c0MsV0FBYTlzQyxFQUdwQixxQkFDSyxpQkFTTXdzQyxpQkFFRSxTQUFTcCtELE9BQ2hCeStELEVBQVl6K0QsRUFBTXoxRCxRQUFRcW5GLE1BRTFCNnNDLGdDQUMwQnorRCxFQUFPeStELGlCQUl4QixTQUFTeitELE9BQ2xCeStELEVBQVl6K0QsRUFBTXoxRCxRQUFRcW5GLE1BQzFCOHNDLEVBQWExK0QsRUFBTTArRCxXQUVuQkQsYUFDS3g4RCxRQUFRdzhELEVBQVc1M0QsY0FBU2xxRSxPQUFPaTFGLE9BRXZDOHNDLGdCQUNLUCxVQUFVbitELEVBQU8wK0QsRUFBWUQsS0FDMUJsMEgsUUFBVWswSCxnQ0FFUXorRCxFQUFPeStELElBRTNCQyxpQkFDRm5oQyxVQUFVdjlCLEVBQU8wK0QsVUFDbEIxK0QsRUFBTTArRCxnQ0NyUFFsNEQscUJBQ0FDLG9CQUNEQyw2RUNGdkIsSUFBSUssUUFBUVAsT0FtRFosSUFBSyxJQUFJam5ELEtBakRUd25ELFFBQU0zRixRQUFVcUYsVUFHaEJDLGFBQStCSyxTQUUvQkEsUUFBTXEzQixVQUFZejNCLGVBQ2xCSSxRQUFNNDNELGlCQUFtQkMsZ0JBQ3pCNzNELFFBQU1GLFNBQVdnNEQsY0FDakI5M0QsUUFBTW9XLFFBQVUyaEQsYUFDaEIvM0QsUUFBTXFaLFNBQVcyK0MsU0FDakJoNEQsUUFBTWc0QixZQUFjaWdDLGlCQUNwQmo0RCxRQUFNazRELFFBQVVDLGFBQ2hCbjRELFFBQU1waEQsU0FBV3c1RyxTQUNqQnA0RCxRQUFNMGdCLFFBQVUyM0MsYUFDaEJyNEQsUUFBTTI3QixNQUFRMjhCLFdBQ2R0NEQsUUFBTXlOLGFBQWU4cUQsa0JBQ3JCdjRELFFBQU0waUIsTUFBUTgxQyxXQUNkeDRELFFBQU13NEIsUUFBVWlnQyxhQUVoQkMsZ0JBQWtDMTRELFNBQ2xDMjRELHVCQUF5QzM0RCxTQUV6QzQ0RCxpQkFBcUM1NEQsU0FDckM2NEQsZUFBbUM3NEQsU0FDbkM4NEQsYUFBaUM5NEQsU0FDakMrNEQsa0JBQXNDLzRELFNBQ3RDZzVELG1CQUF1Q2g1RCxTQUN2Q2k1RCxXQUErQmo1RCxTQUkvQms1RCxlQUF3Q2w1RCxTQUN4Q201RCxrQkFBMkNuNUQsU0FDM0NvNUQsb0JBQTZDcDVELFNBQzdDcTVELGdCQUF5Q3I1RCxTQUN6Q3M1RCxxQkFBOEN0NUQsU0FDOUN1NUQsaUJBQTBDdjVELFNBQzFDdzVELG1CQUE0Q3g1RCxTQUU1Q3k1RCxVQUE4Qno1RCxTQUM5QjA1RCxhQUFpQzE1RCxTQUNqQzI1RCxlQUFtQzM1RCxTQUNuQzQ1RCxXQUErQjU1RCxTQUMvQjY1RCxnQkFBb0M3NUQsU0FDcEM4NUQsWUFBZ0M5NUQsU0FDaEMrNUQsY0FBa0MvNUQsU0FJcEIwZ0IsUUFDVEEsUUFBUWpzRixlQUFlK2pCLFlBQ3BCa29FLFFBQVFzNUMsU0FBU3Q1QyxRQUFRbG9FLElBSWpDd25ELFFBQU1waEQsU0FBUzAzRCxhQUVmLFVBQWlCdFcsUUM3RFYsU0FBU2k2RCxjQUFjQyxFQUFTQyxpQkFFM0IsU0FBZ0I1a0ksVUFDZkEsRUFBYyxhQUNadEMsS0FBS2dwRCxhQUNMaHBELEtBQUttbkksYUFDVjdrSSxFQUFjLG9CQUVWdEMsS0FBS2luSSxjQUNGam5JLEtBQUs2cEUsYUFDSjdwRSxLQUFLOHBFLFlBRVYsc0NBS0ltOUQsT0FDSGo2SCx1QkFHRyxTQUNIdXJCLHdCQUdHLFNBQ0hBLHlCQUdBdnJCLGVBQ0csaUJBR0hsSyxzQkFHQTRFLGNBQ0csNEJBS1AseUJBRU0sY0FDRTFILEtBQUt5dEYsNkJBSU4sU0FBbUJ6N0MsUUFDdkIxVyxNQUFNb3lELFNBQVN6Z0YsS0FBSytrQyxtQkFFWCxjQUNWaHlDLEtBQUtzN0IsTUFBTTJxQyxjQUNOam1FLEtBQUtzN0IsTUFBTTJxQyxPQUFPbWhFLDhCQUdoQixTQUFxQmpsSSxFQUFNb08sR0FDbEN2USxLQUFLczdCLE1BQU0ycUMsYUFBYTNxQyxNQUFNMnFDLE9BQU9qc0IsZUFDcEMxZSxNQUFNMnFDLE9BQVMsSUFBSThHLE1BQU0vc0UsS0FBS3NxQyxNQUFNbzFDLE9BQU80SyxXQUFXLFlBQ25ENDhDLE9BQ0Eva0ksVUFDR29PLFVBQ0F2USxLQUFLczdCLE1BQU1veUQsMkJBSVgsV0FDVDF0RixLQUFLczdCLE1BQU0ycUMsYUFDUjNxQyxNQUFNMnFDLE9BQU9qc0IsWURQSixvQkFBWHg1QyxnQkFDSHVzRSxNQUFRQSxTQVloQkEsUUFBTWsxRCxPQUFTeDBDLFFBQVF5MkMsT0FBT21ELFNBUzlCdDZELFFBQU1xM0QsTUFBUTMyQyxRQUFRbUssTUFBTXl2QyxTQVM1QnQ2RCxRQUFNdTZELGNBQWdCdjZELFFBQU0wZ0IsUUFVNUIxZ0IsUUFBTXc2RCxXQUFheDZELFFBQU1vVyxRQUFRLzVELFdBU2pDMmpELFFBQU15NkQsY0FBZ0J6NkQsUUFBTTNGLFFBQVFzWSxPQVNwQzNTLFFBQU0wNkQsY0FBZ0IxNkQsUUFBTWs0RCxRQy9DNUIsSUFBV3BGLElBQU1tSCxjQUFjLFlBQWEsT0FDakNVLGNBQWdCVixjQUFjLHNCQUF1QixpQkFFckQ5SixPQUFPOEosY0FBYyxhQUFjLFFBQ25DVyxJQUFNWCxjQUFjLFlBQWEsMENDM0U1Q2o2RCx1Q0FDQUEsd0NBQ0FBLDJDQUVBLCtrQkNKTTY2RCxlQUFpQixRQUFTLFFBQVMsUUFBUyxRQUFTLFNBRXJEQyx3QkFFTUMsNEJBR0VGLG9CQUNBLG1CQUVKLFVBQ0EsVUFDQSxVQUNBLFVBQ0Esd0JBR0EsdUJBRVcsbUNBT0osT0FDSCxxQ0FHRyxlQUVFLHVDQUlFLGNBQ0ksd0NBS0osY0FDSSw2QkFHSixpREFTSixPQUNILHFDQUdHLGVBRUUsdUNBSUUsY0FDSSw2Q0FLSixjQUNJLHdCQUdKLHVDQVNKLE9BQ0gscUNBR0csZUFFRSxLQ3hGYlYsVUFBWSxNQUVaYSxTQUNKLFNBQVl2M0gsRUFBZXJPLDhDQUNwQkEsS0FBT0EsT0FDUHFPLFNBQVdBLE9BQ1htUCxRQU1Ub29ILG1CQUFFcG9ILG9CQUNNbXBCLHdCQUF3Qm8rRixVQUFhYyxvQkFFckNyZ0csMkJBQ3FCdS9GLDJCQUNWLEtBQU0saUNBR1RXLFVBQVUxbEksYUFDUDBsSSxVQUFVeGdELElBQUk5MkUsYUFVakN3M0gsbUJBQUUvZ0Usb0JBQVdybUUsV0FDRHFCLElBQUlyQixJQ3BDaEIsdUNBRUFvc0UsdUNBQ0FBLHdDQUNBQSwyQ0FFQSx1a0JDQU1rN0QsbUJBQ0osU0FBWXozSCxFQUFlck8sOENBQ3BCQSxLQUFPQSxPQUNQcU8sU0FBV0EsT0FDWG1QLFFBTVRzb0gsNkJBQUV0b0gsb0JBQ01tcEIsd0JBQXdCbytGLFlBQWFjLHNCQUVyQ3JnRywyQkFDcUJ1L0YsNkJBQ1YsS0FBTSxpQ0FHVFcsVUFBVTFsSSxhQUNQMGxJLFVBQVV2TixjQUFjL3BILGFBVTNDMDNILDZCQUFFamhFLG9CQUFXcm1FLFdBQ0RxQixJQUFJckIsSUNwQ2hCLHVDQUVBb3NFLHVDQUNBQSx3Q0FDQUEsMkNBRUEsc2pCQ0FNbTdELFVBQ0osU0FBWTEzSCxFQUFlck8sOENBQ3BCQSxLQUFPQSxPQUNQcU8sU0FBV0EsT0FDWG1QLFFBTVR1b0gsb0JBQUV2b0gsb0JBQ01tcEIsd0JBQXdCbytGLFlBQWFjLHNCQUVyQ3JnRywyQkFDcUJ1L0YsNkJBQ1YsS0FBTSxpQ0FHVFcsVUFBVTFsSSxhQUNQMGxJLFVBQVV4Z0QsSUFBSTkyRSxhQVVqQzIzSCxvQkFBRWxoRSxvQkFBV3JtRSxXQUNEcUIsSUFBSXJCLElDcENoQix1Q0FFQW9zRSx1Q0FDQUEsd0NBQ0FBLDJDQUVBLGtqQkNBTW83RCxTQUNKLFNBQVkzM0gsRUFBZXJPLDhDQUNwQkEsS0FBT0EsT0FDUHFPLFNBQVdBLE9BQ1htUCxRQU1Ud29ILG1CQUFFeG9ILG9CQUNNbXBCLHdCQUF3Qm8rRixZQUFhYyxzQkFFckNyZ0csMkJBQ3FCdS9GLDZCQUNWLEtBQU0saUNBR1RXLFVBQVUxbEksYUFDUDBsSSxVQUFVMU0sSUFBSTVxSCxhQVVqQzQzSCxtQkFBRW5oRSxvQkFBV3JtRSxXQUNEcUIsSUFBSXJCLElDN0JoQixreEZDTGEscUNDSFR5ekgsWUFDQWdVLGFBQ0FDLElBQTRCLG9CQUFmNXlILFdBQTZCQSxXQUFhL04sTUFDdkQ0Z0ksUUFBUyxFQUNiLFNBQVMzb0gsZUFDRSxVQUNMZ2tDLEVBQU8sbUVBQ0YxL0IsRUFBSSxFQUFHK1QsRUFBTTJyQixFQUFLLzhDLE9BQVFxZCxFQUFJK1QsSUFBTy9ULFdBQ3JDQSxHQUFLMC9CLEVBQUsxL0IsYUFDUDAvQixFQUFLOW1DLFdBQVdvSCxJQUFNQSxZQUd4QixJQUFJcEgsV0FBVyxJQUFNLGFBQ3JCLElBQUlBLFdBQVcsSUFBTSxHQUdqQyxTQUFnQjBySCxZQUFhQyxPQUl2QnZrSCxFQUFHdW9CLEVBQUcxakIsRUFBRytsQixFQUFLNDVGLEVBQWM3Z0gsRUFIM0IwZ0gsbUJBSUR0d0csRUFBTXd3RyxFQUFJNWhJLFVBRVZveEIsRUFBTSxFQUFJLFFBQ04sSUFBSTFwQixNQUFNLG9EQVFjLE1BQWpCazZILEVBQUl4d0csRUFBTSxHQUFhLEVBQXFCLE1BQWpCd3dHLEVBQUl4d0csRUFBTSxHQUFhLEVBQUksSUFHL0QsSUFBSXF3RyxJQUFVLEVBQU5yd0csRUFBVSxFQUFJeXdHLEtBR3hCQSxFQUFlLEVBQUl6d0csRUFBTSxFQUFJQSxNQUU3QjB3RyxFQUFJLE1BRUh6a0gsRUFBSSxFQUFHdW9CLEVBQUksRUFBR3ZvQixFQUFJNkUsRUFBRzdFLEdBQUssRUFBR3VvQixHQUFLLElBQzlCNDdGLFVBQVVJLEVBQUkzckgsV0FBV29ILEtBQU8sR0FBT21rSCxVQUFVSSxFQUFJM3JILFdBQVdvSCxFQUFJLEtBQU8sR0FBT21rSCxVQUFVSSxFQUFJM3JILFdBQVdvSCxFQUFJLEtBQU8sRUFBS21rSCxVQUFVSSxFQUFJM3JILFdBQVdvSCxFQUFJLE1BQzNKeWtILEtBQVE3NUYsR0FBTyxHQUFNLE1BQ3JCNjVGLEtBQVE3NUYsR0FBTyxFQUFLLE1BQ3BCNjVGLEtBQWEsSUFBTjc1RixTQUdRLElBQWpCNDVGLEtBQ0tMLFVBQVVJLEVBQUkzckgsV0FBV29ILEtBQU8sRUFBTW1rSCxVQUFVSSxFQUFJM3JILFdBQVdvSCxFQUFJLEtBQU8sSUFDN0V5a0gsS0FBYSxJQUFONzVGLEdBQ2UsSUFBakI0NUYsTUFDRkwsVUFBVUksRUFBSTNySCxXQUFXb0gsS0FBTyxHQUFPbWtILFVBQVVJLEVBQUkzckgsV0FBV29ILEVBQUksS0FBTyxFQUFNbWtILFVBQVVJLEVBQUkzckgsV0FBV29ILEVBQUksS0FBTyxJQUN4SHlrSCxLQUFRNzVGLEdBQU8sRUFBSyxNQUNwQjY1RixLQUFhLElBQU43NUYsR0FHTmpuQixFQUdULFNBQVMrZ0gsZ0JBQWlCbDFELFVBQ2pCMmdELFNBQU8zZ0QsR0FBTyxHQUFLLElBQVEyZ0QsU0FBTzNnRCxHQUFPLEdBQUssSUFBUTJnRCxTQUFPM2dELEdBQU8sRUFBSSxJQUFRMmdELFNBQWEsR0FBTjNnRCxHQUdoRyxTQUFTbTFELFlBQWFDLEVBQU92aEksRUFBT3F6QyxXQUM5QjlMLEVBQ0E0bUUsS0FDS3h4RixFQUFJM2MsRUFBTzJjLEVBQUkwMkIsRUFBSzEyQixHQUFLLEtBQ3pCNGtILEVBQU01a0gsSUFBTSxLQUFPNGtILEVBQU01a0gsRUFBSSxJQUFNLEdBQU00a0gsRUFBTTVrSCxFQUFJLEtBQ25EaFgsS0FBSzA3SCxnQkFBZ0I5NUYsV0FFdkI0bUUsRUFBTy96RixLQUFLLElBR3JCLFNBQWdCb25ILGNBQWVELE9BSXpCaDZGLEVBSEN5NUYsdUJBSUR0d0csRUFBTTZ3RyxFQUFNamlJLE9BQ1ptaUksRUFBYS93RyxFQUFNLEVBQ25CeTlFLEVBQVMsR0FDVHNSLEtBSUs5aUcsRUFBSSxFQUFHK2tILEVBQU9oeEcsRUFBTSt3RyxFQUFZOWtILEVBQUkra0gsRUFBTS9rSCxHQUg5QixRQUliaFgsS0FBSzI3SCxZQUFZQyxFQUFPNWtILEVBQUlBLEVBSmYsTUFJcUMra0gsRUFBT0EsRUFBUS9rSCxFQUpwRCxlQVFGLElBQWY4a0gsS0FDSUYsRUFBTTd3RyxFQUFNLE1BQ1JvOEYsU0FBT3ZsRixHQUFPLE1BQ2R1bEYsU0FBUXZsRixHQUFPLEVBQUssT0FDcEIsTUFDYyxJQUFmazZGLE9BQ0ZGLEVBQU03d0csRUFBTSxJQUFNLEdBQU02d0csRUFBTTd3RyxFQUFNLE1BQ2pDbzhGLFNBQU92bEYsR0FBTyxPQUNkdWxGLFNBQVF2bEYsR0FBTyxFQUFLLE9BQ3BCdWxGLFNBQVF2bEYsR0FBTyxFQUFLLE9BQ3BCLE9BR041aEMsS0FBS3dvRyxHQUVKc1IsRUFBTXJsRyxLQUFLLGFDM0dKdW5ILEtBQU0zekgsRUFBUS9ELEVBQVEyM0gsRUFBTUMsRUFBTUMsT0FDNUNwbEksRUFBRzhsQixFQUNIdS9HLEVBQWdCLEVBQVRELEVBQWFELEVBQU8sRUFDM0JHLEdBQVEsR0FBS0QsR0FBUSxFQUNyQkUsRUFBUUQsR0FBUSxFQUNoQkUsR0FBUyxFQUNUdmxILEVBQUlpbEgsRUFBUUUsRUFBUyxFQUFLLEVBQzFCMWtILEVBQUl3a0gsR0FBUSxFQUFJLEVBQ2hCM25JLEVBQUkrVCxFQUFPL0QsRUFBUzBTLFVBRW5CUyxJQUVEbmpCLEdBQU0sSUFBT2lvSSxHQUFVLE9BQ25CQSxLQUNDSCxFQUNGRyxFQUFRLEVBQUd4bEksRUFBUSxJQUFKQSxFQUFVc1IsRUFBTy9ELEVBQVMwUyxHQUFJQSxHQUFLUyxFQUFHOGtILEdBQVMsU0FFakV4bEksR0FBTSxJQUFPd2xJLEdBQVUsT0FDbkJBLEtBQ0NMLEVBQ0ZLLEVBQVEsRUFBRzEvRyxFQUFRLElBQUpBLEVBQVV4VSxFQUFPL0QsRUFBUzBTLEdBQUlBLEdBQUtTLEVBQUc4a0gsR0FBUyxNQUUzRCxJQUFOeGxJLElBQ0UsRUFBSXVsSSxNQUNILENBQUEsR0FBSXZsSSxJQUFNc2xJLFNBQ1J4L0csRUFBSXNwRSxJQUFzQittQyxFQUFBQSxHQUFkNTRILEdBQUssRUFBSSxNQUVwQjRGLEtBQUttaUUsSUFBSSxFQUFHNi9ELE1BQ1pJLFNBRUZob0ksR0FBSyxFQUFJLEdBQUt1b0IsRUFBSTNpQixLQUFLbWlFLElBQUksRUFBR3RsRSxFQUFJbWxJLEdBRzVDLFNBQWdCTSxNQUFPbjBILEVBQVEzUixFQUFPNE4sRUFBUTIzSCxFQUFNQyxFQUFNQyxPQUNwRHBsSSxFQUFHOGxCLEVBQUcxQixFQUNOaWhILEVBQWdCLEVBQVRELEVBQWFELEVBQU8sRUFDM0JHLEdBQVEsR0FBS0QsR0FBUSxFQUNyQkUsRUFBUUQsR0FBUSxFQUNoQkksRUFBZSxLQUFUUCxFQUFjaGlJLEtBQUttaUUsSUFBSSxHQUFJLElBQU1uaUUsS0FBS21pRSxJQUFJLEdBQUksSUFBTSxFQUMxRHJsRCxFQUFJaWxILEVBQU8sRUFBS0UsRUFBUyxFQUN6QjFrSCxFQUFJd2tILEVBQU8sR0FBSyxFQUNoQjNuSSxFQUFJb0MsRUFBUSxHQUFnQixJQUFWQSxHQUFlLEVBQUlBLEVBQVEsRUFBSyxFQUFJLFFBRWxEd0QsS0FBS20wRSxJQUFJMzNFLEdBRWJ1akIsTUFBTXZqQixJQUFVQSxJQUFVdzJILEVBQUFBLEtBQ3hCanpHLE1BQU12akIsR0FBUyxFQUFJLElBQ25CMmxJLE1BRUFuaUksS0FBSzBmLE1BQU0xZixLQUFLbWEsSUFBSTNkLEdBQVN3RCxLQUFLd2lJLEtBQ2xDaG1JLEdBQVN5a0IsRUFBSWpoQixLQUFLbWlFLElBQUksR0FBSXRsRSxJQUFNLFdBRTdCLE9BRUhBLEVBQUl1bEksR0FBUyxFQUNORyxFQUFLdGhILEVBRUxzaEgsRUFBS3ZpSSxLQUFLbWlFLElBQUksRUFBRyxFQUFJaWdFLElBRXBCbmhILEdBQUssV0FFVixHQUdIcGtCLEVBQUl1bEksR0FBU0QsS0FDWCxJQUNBQSxHQUNLdGxJLEVBQUl1bEksR0FBUyxNQUNqQjVsSSxFQUFReWtCLEVBQUksR0FBS2poQixLQUFLbWlFLElBQUksRUFBRzYvRCxNQUMxQkksTUFFSjVsSSxFQUFRd0QsS0FBS21pRSxJQUFJLEVBQUdpZ0UsRUFBUSxHQUFLcGlJLEtBQUttaUUsSUFBSSxFQUFHNi9ELEtBQzdDLElBSURBLEdBQVEsRUFBRzd6SCxFQUFPL0QsRUFBUzBTLEdBQVMsSUFBSjZGLEVBQVU3RixHQUFLUyxFQUFHb0YsR0FBSyxJQUFLcS9HLEdBQVEsU0FFdEVubEksR0FBS21sSSxFQUFRci9HLEtBQ1ZxL0csRUFDREUsRUFBTyxFQUFHL3pILEVBQU8vRCxFQUFTMFMsR0FBUyxJQUFKamdCLEVBQVVpZ0IsR0FBS1MsRUFBRzFnQixHQUFLLElBQUtxbEksR0FBUSxLQUVuRTkzSCxFQUFTMFMsRUFBSVMsSUFBVSxJQUFKbmpCLEVDbkY1QixJQUFJK0IsY0FBY0EsbUJBRUhvRSxNQUFNbUMsU0FBVyxTQUFVK2QsU0FDWCxrQkFBdEJ0a0IsV0FBU08sS0FBSytqQixJQ1VaZ2lILGtCQUFvQixHQW9EL0IsU0FBU0Msb0JBQ0F4L0gsU0FBT3kvSCxvQkFDVixXQUNBLFdBR04sU0FBU0MsYUFBY2pmLEVBQU1sa0gsTUFDdkJpakksYUFBZWpqSSxRQUNYLElBQUlvakksV0FBVyxxQ0FFbkIzL0gsU0FBT3kvSCx1QkFFRixJQUFJcjBILFdBQVc3TyxJQUNqQityQixVQUFZdG9CLFNBQU9qSCxXQUdYLE9BQVQwbkgsTUFDSyxJQUFJemdILFNBQU96RCxNQUVmQSxPQUFTQSxHQUdUa2tILEVBYVQsU0FBZ0J6Z0gsU0FBUXVELEVBQUtxOEgsRUFBa0JyakksUUFDeEN5RCxTQUFPeS9ILHFCQUF5QjlwSSxnQkFBZ0JxSyxpQkFDNUMsSUFBSUEsU0FBT3VELEVBQUtxOEgsRUFBa0JyakksTUFJeEIsaUJBQVJnSCxFQUFrQixJQUNLLGlCQUFyQnE4SCxRQUNILElBQUkzN0gsTUFDUiw0RUFHRzhHLGNBQVlwVixLQUFNNE4sVUFFcEJrbUIsT0FBSzl6QixLQUFNNE4sRUFBS3E4SCxFQUFrQnJqSSxHQVczQyxTQUFTa3RCLE9BQU1nM0YsRUFBTW5uSCxFQUFPc21JLEVBQWtCcmpJLE1BQ3ZCLGlCQUFWakQsUUFDSCxJQUFJMFksVUFBVSwrQ0FHSyxvQkFBaEI3QixhQUErQjdXLGFBQWlCNlcsWUFDbEQwdkgsZ0JBQWdCcGYsRUFBTW5uSCxFQUFPc21JLEVBQWtCcmpJLEdBR25DLGlCQUFWakQsRUFDRndtSSxXQUFXcmYsRUFBTW5uSCxFQUFPc21JLEdBRzFCRyxXQUFXdGYsRUFBTW5uSCxHQTRCMUIsU0FBUzBtSSxXQUFZNTNILE1BQ0MsaUJBQVRBLFFBQ0gsSUFBSTRKLFVBQVUsb0NBQ2YsR0FBSTVKLEVBQU8sUUFDVixJQUFJdTNILFdBQVcsd0NBSXpCLFNBQVNNLE1BQU94ZixFQUFNcjRHLEVBQU02NEQsRUFBTWkvRCxxQkFDckI5M0gsR0FDUEEsR0FBUSxFQUNIczNILGFBQWFqZixFQUFNcjRHLFFBRWZoUCxJQUFUNm5FLEVBSXlCLGlCQUFiaS9ELEVBQ1ZSLGFBQWFqZixFQUFNcjRHLEdBQU02NEQsS0FBS0EsRUFBTWkvRCxHQUNwQ1IsYUFBYWpmLEVBQU1yNEcsR0FBTTY0RCxLQUFLQSxHQUU3QnkrRCxhQUFhamYsRUFBTXI0RyxHQVc1QixTQUFTMkMsY0FBYTAxRyxFQUFNcjRHLGlCQUNmQSxLQUNKczNILGFBQWFqZixFQUFNcjRHLEVBQU8sRUFBSSxFQUFvQixFQUFoQiszSCxRQUFRLzNILEtBQzVDcEksU0FBT3kvSCx3QkFDTCxJQUFJN2xILEVBQUksRUFBR0EsRUFBSXhSLElBQVF3UixJQUNyQkEsR0FBSyxTQUdQNm1HLEVBZ0JULFNBQVNxZixXQUFZcmYsRUFBTWhqSCxFQUFReWlJLE1BQ1QsaUJBQWJBLEdBQXNDLEtBQWJBLE1BQ3ZCLFNBR1JsZ0ksU0FBT29nSSxXQUFXRixTQUNmLElBQUlsdUgsVUFBVSxrREFHbEJ6VixFQUF3QyxFQUEvQmdQLFdBQVc5TixFQUFReWlJLEdBRzVCcHFHLEtBRkc0cEcsYUFBYWpmLEVBQU1sa0gsSUFFUjZpSSxNQUFNM2hJLEVBQVF5aUksVUFFNUJwcUcsSUFBV3Y1QixNQUlOa2tILEVBQUt0NUcsTUFBTSxFQUFHMnVCLElBR2hCMnFGLEVBR1QsU0FBUzRmLGNBQWU1ZixFQUFNcmpILE9BQ3hCYixFQUFTYSxFQUFNYixPQUFTLEVBQUksRUFBNEIsRUFBeEI0akksUUFBUS9pSSxFQUFNYixVQUMzQ21qSSxhQUFhamYsRUFBTWxrSCxPQUNyQixJQUFJcWQsRUFBSSxFQUFHQSxFQUFJcmQsRUFBUXFkLEdBQUssSUFDMUJBLEdBQWdCLElBQVh4YyxFQUFNd2MsVUFFWDZtRyxFQUdULFNBQVNvZixnQkFBaUJwZixFQUFNcmpILEVBQU9zTyxFQUFZblAsUUFDM0NnUCxXQUVGRyxFQUFhLEdBQUt0TyxFQUFNbU8sV0FBYUcsUUFDakMsSUFBSWkwSCxXQUFXLGdDQUduQnZpSSxFQUFNbU8sV0FBYUcsR0FBY25QLEdBQVUsU0FDdkMsSUFBSW9qSSxXQUFXLDJDQUdKdm1JLElBQWZzUyxRQUF1Q3RTLElBQVhtRCxFQUN0QixJQUFJNk8sV0FBV2hPLFFBQ0hoRSxJQUFYbUQsRUFDRCxJQUFJNk8sV0FBV2hPLEVBQU9zTyxHQUV0QixJQUFJTixXQUFXaE8sRUFBT3NPLEVBQVluUCxHQUd4Q3lELFNBQU95L0gsdUJBRUZyaUksR0FDRmtyQixVQUFZdG9CLFNBQU9qSCxZQUdqQnNuSSxjQUFjNWYsRUFBTXJqSCxHQUV0QnFqSCxFQUdULFNBQVNzZixXQUFZdGYsRUFBTXhrRyxNQUNyQnFrSCxpQkFBaUJya0gsR0FBTSxLQUNyQjBSLEVBQTRCLEVBQXRCd3lHLFFBQVFsa0gsRUFBSTFmLGVBR0YsT0FGYm1qSSxhQUFhamYsRUFBTTl5RixJQUVqQnB4QixPQUNBa2tILEtBR0x0MUcsS0FBS3MxRyxFQUFNLEVBQUcsRUFBRzl5RixHQUNkOHlGLE1BR0x4a0csRUFBSyxJQUNxQixvQkFBaEI5TCxhQUNSOEwsRUFBSWhSLGtCQUFrQmtGLGFBQWdCLFdBQVk4TCxRQUMxQixpQkFBZkEsRUFBSTFmLFFBQXVCZ2tJLE1BQU10a0gsRUFBSTFmLFFBQ3ZDbWpJLGFBQWFqZixFQUFNLEdBRXJCNGYsY0FBYzVmLEVBQU14a0csTUFHWixXQUFiQSxFQUFJL2hCLE1BQXFCc0YsVUFBUXljLEVBQUlua0IsYUFDaEN1b0ksY0FBYzVmLEVBQU14a0csRUFBSW5rQixZQUk3QixJQUFJa2EsVUFBVSxzRkFHdEIsU0FBU211SCxRQUFTNWpJLE1BR1pBLEdBQVVpakksbUJBQ04sSUFBSUcsV0FBVywwREFDYUgsYUFBYXZtSSxTQUFTLElBQU0saUJBRWhELEVBQVRzRCxFQVVULFNBQVMrakksaUJBQWtCbGhILFdBQ1YsTUFBTEEsSUFBYUEsRUFBRW9oSCxXQTJFM0IsU0FBU2oxSCxXQUFZOU4sRUFBUXlpSSxNQUN2QkksaUJBQWlCN2lJLFVBQ1pBLEVBQU9sQixVQUVXLG9CQUFoQjRULGFBQTZELG1CQUF2QkEsWUFBWXN3SCxTQUN4RHR3SCxZQUFZc3dILE9BQU9oakksSUFBV0EsYUFBa0IwUyxvQkFDNUMxUyxFQUFPOE4sV0FFTSxpQkFBWDlOLE1BQ0EsR0FBS0EsT0FHWmt3QixFQUFNbHdCLEVBQU9sQixVQUNMLElBQVJveEIsU0FBa0IsVUFHbEIreUcsR0FBYyxXQUVSUixPQUNELFlBQ0EsYUFDQSxnQkFDSXZ5RyxNQUNKLFdBQ0Esa0JBQ0F2MEIsU0FDSXVuSSxZQUFZbGpJLEdBQVFsQixXQUN4QixXQUNBLFlBQ0EsY0FDQSxrQkFDVSxFQUFOb3hCLE1BQ0osYUFDSUEsSUFBUSxNQUNaLGdCQUNJaXpHLGNBQWNuakksR0FBUWxCLGtCQUV6Qm1rSSxTQUFvQkMsWUFBWWxqSSxHQUFRbEIsVUFDaEMsR0FBSzJqSSxHQUFVL2lILGlCQUNiLEdBTXRCLFNBQVMwakgsYUFBY1gsRUFBVWpqSSxFQUFPcXpDLE9BQ2xDb3dGLEdBQWMsV0FTSnRuSSxJQUFWNkQsR0FBdUJBLEVBQVEsT0FDekIsR0FJTkEsRUFBUXRILEtBQUs0RyxhQUNSLFlBR0duRCxJQUFSazNDLEdBQXFCQSxFQUFNMzZDLEtBQUs0RyxZQUM1QjVHLEtBQUs0RyxRQUdUK3pDLEdBQU8sUUFDRixZQUlBLFVBQ0UsU0FHRixPQUdKNHZGLE1BQXFCLGlCQUdoQkEsT0FDRCxhQUNJWSxTQUFTbnJJLEtBQU1zSCxFQUFPcXpDLE9BRTFCLFdBQ0EsZUFDSXl3RixVQUFVcHJJLEtBQU1zSCxFQUFPcXpDLE9BRTNCLGVBQ0kwd0YsV0FBV3JySSxLQUFNc0gsRUFBT3F6QyxPQUU1QixhQUNBLGdCQUNJMndGLFlBQVl0ckksS0FBTXNILEVBQU9xekMsT0FFN0IsZ0JBQ0k0d0YsWUFBWXZySSxLQUFNc0gsRUFBT3F6QyxPQUU3QixXQUNBLFlBQ0EsY0FDQSxrQkFDSTZ3RixhQUFheHJJLEtBQU1zSCxFQUFPcXpDLGNBRzdCb3dGLFFBQW1CLElBQUkxdUgsVUFBVSxxQkFBdUJrdUgsTUFDaERBLEVBQVcsSUFBSS9pSCxpQkFDYixHQVN0QixTQUFTaWtILEtBQU1oaUgsRUFBR25nQixFQUFHd2dCLE9BQ2Y3RixFQUFJd0YsRUFBRW5nQixLQUNSQSxHQUFLbWdCLEVBQUVLLEtBQ1BBLEdBQUs3RixFQW1JVCxTQUFTeW5ILHFCQUFzQnAySCxFQUFRcVIsRUFBSzVRLEVBQVl3MEgsRUFBVXZvSSxNQUUxQyxJQUFsQnNULEVBQU8xTyxjQUFzQixLQUdQLGlCQUFmbVAsS0FDRUEsSUFDRSxHQUNKQSxFQUFhLGFBQ1QsV0FDSkEsR0FBYyxnQkFDVCxlQUVGQSxFQUNWbVIsTUFBTW5SLE9BRUsvVCxFQUFNLEVBQUtzVCxFQUFPMU8sT0FBUyxHQUl0Q21QLEVBQWEsTUFBZ0JULEVBQU8xTyxPQUFTbVAsR0FDN0NBLEdBQWNULEVBQU8xTyxPQUFRLElBQzNCNUUsU0FBYSxJQUNDc1QsRUFBTzFPLE9BQVMsT0FDN0IsR0FBSW1QLEVBQWEsRUFBRyxLQUNyQi9ULFNBQ1MsSUFEUyxLQUtMLGlCQUFSMmtCLE1BQ0h0YyxTQUFPeXBCLEtBQUtuTixFQUFLNGpILElBSXJCSSxpQkFBaUJoa0gsVUFFQSxJQUFmQSxFQUFJL2YsUUFDRSxFQUVIK2tJLGFBQWFyMkgsRUFBUXFSLEVBQUs1USxFQUFZdzBILEVBQVV2b0ksR0FDbEQsR0FBbUIsaUJBQVIya0IsWUFDSixJQUNSdGMsU0FBT3kvSCxxQkFDaUMsbUJBQWpDcjBILFdBQVdyUyxVQUFVMGtCLFFBQzFCOWxCLEVBQ0t5VCxXQUFXclMsVUFBVTBrQixRQUFRamtCLEtBQUt5UixFQUFRcVIsRUFBSzVRLEdBRS9DTixXQUFXclMsVUFBVWdmLFlBQVl2ZSxLQUFLeVIsRUFBUXFSLEVBQUs1USxHQUd2RDQxSCxhQUFhcjJILEdBQVVxUixHQUFPNVEsRUFBWXcwSCxFQUFVdm9JLFNBR3ZELElBQUlxYSxVQUFVLHdDQUd0QixTQUFTc3ZILGFBQWMvakgsRUFBS2pCLEVBQUs1USxFQUFZdzBILEVBQVV2b0ksT0EyQmpEaWlCLEVBMUJBMm5ILEVBQVksRUFDWjd6SCxFQUFZNlAsRUFBSWhoQixPQUNoQmlsSSxFQUFZbGxILEVBQUkvZixlQUVIbkQsSUFBYjhtSSxJQUVlLFlBRE52OUgsT0FBT3U5SCxHQUFVL2lILGdCQUNZLFVBQWIraUgsR0FDVixZQUFiQSxHQUF1QyxhQUFiQSxHQUF5QixJQUNqRDNpSCxFQUFJaGhCLE9BQVMsR0FBSytmLEVBQUkvZixPQUFTLFNBQ3pCLElBRUUsS0FDQyxLQUNBLEtBQ0MsV0FJVHFpSSxFQUFNNkMsRUFBSzduSCxVQUNBLElBQWQybkgsRUFDS0UsRUFBSTduSCxHQUVKNm5ILEVBQUlDLGFBQWE5bkgsRUFBSTJuSCxNQUs1QjVwSSxFQUFLLEtBQ0hncUksR0FBYyxNQUNiL25ILEVBQUlsTyxFQUFZa08sRUFBSWxNLEVBQVdrTSxPQUM5QmdsSCxFQUFLcmhILEVBQUszRCxLQUFPZ2xILEVBQUt0aUgsR0FBcUIsSUFBaEJxbEgsRUFBb0IsRUFBSS9uSCxFQUFJK25ILFFBQ3JDLElBQWhCQSxNQUFnQy9uSCxHQUNoQ0EsRUFBSStuSCxFQUFhLElBQU1ILFNBQWtCRyxFQUFhSixPQUV0QyxJQUFoQkksT0FBd0IvbkgsRUFBSStuSCxNQUNsQixXQUlkajJILEVBQWE4MUgsRUFBWTl6SCxNQUF3QkEsRUFBWTh6SCxHQUM1RDVuSCxFQUFJbE8sRUFBWWtPLEdBQUssRUFBR0EsSUFBSyxTQUM1QmdvSCxHQUFRLEVBQ0h6L0YsRUFBSSxFQUFHQSxFQUFJcS9GLEVBQVdyL0YsT0FDekJ5OEYsRUFBS3JoSCxFQUFLM0QsRUFBSXVvQixLQUFPeThGLEVBQUt0aUgsRUFBSzZsQixHQUFJLElBQzdCLFdBSVJ5L0YsU0FBY2hvSCxTQUlkLEVBZVYsU0FBU2lvSCxTQUFVSixFQUFLaGtJLEVBQVF5SixFQUFRM0ssS0FDN0IyeEIsT0FBT2huQixJQUFXLE1BQ3ZCL0ksRUFBWXNqSSxFQUFJbGxJLE9BQVMySyxFQUN4QjNLLEtBR00yeEIsT0FBTzN4QixJQUNINEIsTUFDRkEsS0FKRkEsTUFTUDJqSSxFQUFTcmtJLEVBQU9sQixVQUNoQnVsSSxFQUFTLEdBQU0sUUFBUyxJQUFJOXZILFVBQVUsc0JBRXRDelYsRUFBU3VsSSxFQUFTLE1BQ1hBLEVBQVMsT0FFZixJQUFJbG9ILEVBQUksRUFBR0EsRUFBSXJkLElBQVVxZCxFQUFHLEtBQzNCbW9ILEVBQVN0NEYsU0FBU2hzQyxFQUFPb2EsT0FBVyxFQUFKK0IsRUFBTyxHQUFJLE9BQzNDaUQsTUFBTWtsSCxVQUFnQm5vSCxJQUN0QjFTLEVBQVMwUyxHQUFLbW9ILFNBRWJub0gsRUFHVCxTQUFTb29ILFVBQVdQLEVBQUtoa0ksRUFBUXlKLEVBQVEzSyxVQUNoQzBsSSxXQUFXdEIsWUFBWWxqSSxFQUFRZ2tJLEVBQUlsbEksT0FBUzJLLEdBQVN1NkgsRUFBS3Y2SCxFQUFRM0ssR0FHM0UsU0FBUzJsSSxXQUFZVCxFQUFLaGtJLEVBQVF5SixFQUFRM0ssVUFDakMwbEksV0FBV0UsYUFBYTFrSSxHQUFTZ2tJLEVBQUt2NkgsRUFBUTNLLEdBR3ZELFNBQVM2bEksWUFBYVgsRUFBS2hrSSxFQUFReUosRUFBUTNLLFVBQ2xDMmxJLFdBQVdULEVBQUtoa0ksRUFBUXlKLEVBQVEzSyxHQUd6QyxTQUFTOGxJLFlBQWFaLEVBQUtoa0ksRUFBUXlKLEVBQVEzSyxVQUNsQzBsSSxXQUFXckIsY0FBY25qSSxHQUFTZ2tJLEVBQUt2NkgsRUFBUTNLLEdBR3hELFNBQVMrbEksVUFBV2IsRUFBS2hrSSxFQUFReUosRUFBUTNLLFVBQ2hDMGxJLFdBQVdNLGVBQWU5a0ksRUFBUWdrSSxFQUFJbGxJLE9BQVMySyxHQUFTdTZILEVBQUt2NkgsRUFBUTNLLEdBa0Y5RSxTQUFTMmtJLFlBQWFPLEVBQUt4a0ksRUFBT3F6QyxVQUNsQixJQUFWcnpDLEdBQWVxekMsSUFBUW14RixFQUFJbGxJLE9BQ3RCaW1JLGNBQXFCZixHQUVyQmUsY0FBcUJmLEVBQUl0NkgsTUFBTWxLLEVBQU9xekMsSUFJakQsU0FBU3l3RixVQUFXVSxFQUFLeGtJLEVBQU9xekMsS0FDeEJ4ekMsS0FBS2diLElBQUkycEgsRUFBSWxsSSxPQUFRK3pDLFdBQ3ZCbnhCLEtBRUF2RixFQUFJM2MsRUFDRDJjLEVBQUkwMkIsR0FBSyxLQVNSbXlGLEVBQVlDLEVBQVdDLEVBQVlDLEVBUnJDQyxFQUFZcEIsRUFBSTduSCxHQUNoQmtwSCxFQUFZLEtBQ1pDLEVBQW9CRixFQUFZLElBQVEsRUFDdkNBLEVBQVksSUFBUSxFQUNwQkEsRUFBWSxJQUFRLEVBQ3JCLEtBRUFqcEgsRUFBSW1wSCxHQUFvQnp5RixTQUdsQnl5RixRQUNELEVBQ0NGLEVBQVksUUFDRkEsY0FHWCxFQUV5QixNQUFWLE9BRExwQixFQUFJN25ILEVBQUksVUFFVSxHQUFaaXBILElBQXFCLEVBQW9CLEdBQWJKLEdBQ3pCLFFBQ05HLGNBSWIsSUFDVW5CLEVBQUk3bkgsRUFBSSxLQUNUNm5ILEVBQUk3bkgsRUFBSSxHQUNRLE1BQVYsSUFBYjZvSCxJQUFzRCxNQUFWLElBQVpDLFFBQ04sR0FBWkcsSUFBb0IsSUFBb0IsR0FBYkosSUFBc0IsRUFBbUIsR0FBWkMsR0FDckQsT0FBVUUsRUFBZ0IsT0FBVUEsRUFBZ0IsV0FDMURBLGNBSWIsSUFDVW5CLEVBQUk3bkgsRUFBSSxLQUNUNm5ILEVBQUk3bkgsRUFBSSxLQUNQNm5ILEVBQUk3bkgsRUFBSSxHQUNPLE1BQVYsSUFBYjZvSCxJQUFzRCxNQUFWLElBQVpDLElBQXNELE1BQVYsSUFBYkMsUUFDckMsR0FBWkUsSUFBb0IsSUFBcUIsR0FBYkosSUFBc0IsSUFBbUIsR0FBWkMsSUFBcUIsRUFBb0IsR0FBYkMsR0FDbEYsT0FBVUMsRUFBZ0IsWUFDaENBLEdBTUosT0FBZEUsS0FHVSxRQUNPLEdBQ1ZBLEVBQVksV0FFUixRQUNUbGdJLEtBQUtrZ0ksSUFBYyxHQUFLLEtBQVEsU0FDeEIsTUFBcUIsS0FBWkEsS0FHbkJsZ0ksS0FBS2tnSSxNQUNKQyxTQUdBQyxzQkFBc0I3akgsR0F2N0IvQm5mLFNBQU95L0gseUJBQXFEcm1JLElBQS9CZCxTQUFPbW5JLHFCQUNoQ25uSSxTQUFPbW5JLG9CQTZFWHovSCxTQUFPaWpJLFNBQVcsS0FHbEJqakksU0FBT2tqSSxTQUFXLFNBQVUzbEgsWUFDdEIrSyxVQUFZdG9CLFNBQU9qSCxVQUNoQndrQixHQTJCVHZkLFNBQU95cEIsS0FBTyxTQUFVbndCLEVBQU9zbUksRUFBa0JyakksVUFDeENrdEIsT0FBSyxLQUFNbndCLEVBQU9zbUksRUFBa0JyakksSUFHekN5RCxTQUFPeS9ILCtCQUNGMW1JLFVBQVV1dkIsVUFBWWxkLFdBQVdyUyxtQkFDakN1dkIsVUFBWWxkLFlBdUNyQnBMLFNBQU9pZ0ksTUFBUSxTQUFVNzNILEVBQU02NEQsRUFBTWkvRCxVQUM1QkQsTUFBTSxLQUFNNzNILEVBQU02NEQsRUFBTWkvRCxJQWlCakNsZ0ksU0FBTytLLFlBQWMsU0FBVTNDLFVBQ3RCMkMsY0FBWSxLQUFNM0MsSUFLM0JwSSxTQUFPbWpJLGdCQUFrQixTQUFVLzZILFVBQzFCMkMsY0FBWSxLQUFNM0MsYUFnSHBCbEksU0FBV0EsV0FLbEJGLFNBQU9vakksUUFBVSxTQUFrQjVrSCxFQUFHWSxPQUMvQmtoSCxpQkFBaUI5aEgsS0FBTzhoSCxpQkFBaUJsaEgsU0FDdEMsSUFBSXBOLFVBQVUsZ0NBR2xCd00sSUFBTVksU0FBVSxVQUVoQnNnRCxFQUFJbGhELEVBQUVqaUIsT0FDTm9qRSxFQUFJdmdELEVBQUU3aUIsT0FFRHFkLEVBQUksRUFBRytULEVBQU03d0IsS0FBS2diLElBQUk0bkQsRUFBR0MsR0FBSS9sRCxFQUFJK1QsSUFBTy9ULEtBQzNDNEUsRUFBRTVFLEtBQU93RixFQUFFeEYsR0FBSSxHQUNiNEUsRUFBRTVFLEtBQ0Z3RixFQUFFeEYsZ0JBS044bEQsRUFBSUMsR0FBVyxFQUNmQSxFQUFJRCxFQUFVLEVBQ1gsR0FHVDEvRCxTQUFPb2dJLFdBQWEsU0FBcUJGLFVBQy9CdjlILE9BQU91OUgsR0FBVS9pSCxtQkFDbEIsVUFDQSxXQUNBLFlBQ0EsWUFDQSxhQUNBLGFBQ0EsYUFDQSxXQUNBLFlBQ0EsY0FDQSxrQkFDSSxpQkFFQSxJQUlibmQsU0FBT3FZLE9BQVMsU0FBaUI0RSxFQUFNMWdCLE9BQ2hDaUQsVUFBUXlkLFNBQ0wsSUFBSWpMLFVBQVUsa0RBR0YsSUFBaEJpTCxFQUFLMWdCLGNBQ0F5RCxTQUFPaWdJLE1BQU0sT0FHbEJybUgsVUFDV3hnQixJQUFYbUQsUUFDTyxFQUNKcWQsRUFBSSxFQUFHQSxFQUFJcUQsRUFBSzFnQixTQUFVcWQsS0FDbkJxRCxFQUFLckQsR0FBR3JkLFdBSWxCME8sRUFBU2pMLFNBQU8rSyxZQUFZeE8sR0FDNUIrb0QsRUFBTSxNQUNMMXJDLEVBQUksRUFBR0EsRUFBSXFELEVBQUsxZ0IsU0FBVXFkLEVBQUcsS0FDNUI2bkgsRUFBTXhrSCxFQUFLckQsT0FDVjBtSCxpQkFBaUJtQixTQUNkLElBQUl6dkgsVUFBVSxpREFFbEI3RyxLQUFLRixFQUFRcTZDLE1BQ1ZtOEUsRUFBSWxsSSxjQUVOME8sR0E4Q1RqTCxTQUFPdUwsV0FBYUEsV0EwRXBCdkwsU0FBT2pILFVBQVV5bkksV0FBWSxFQVE3QnhnSSxTQUFPakgsVUFBVXNxSSxPQUFTLGVBQ3BCMTFHLEVBQU1oNEIsS0FBSzRHLFVBQ1hveEIsRUFBTSxHQUFNLFFBQ1IsSUFBSWd5RyxXQUFXLGlEQUVsQixJQUFJL2xILEVBQUksRUFBR0EsRUFBSStULEVBQUsvVCxHQUFLLE9BQ3ZCamtCLEtBQU1pa0IsRUFBR0EsRUFBSSxVQUViamtCLE1BR1RxSyxTQUFPakgsVUFBVXVxSSxPQUFTLGVBQ3BCMzFHLEVBQU1oNEIsS0FBSzRHLFVBQ1hveEIsRUFBTSxHQUFNLFFBQ1IsSUFBSWd5RyxXQUFXLGlEQUVsQixJQUFJL2xILEVBQUksRUFBR0EsRUFBSStULEVBQUsvVCxHQUFLLE9BQ3ZCamtCLEtBQU1pa0IsRUFBR0EsRUFBSSxRQUNiamtCLEtBQU1pa0IsRUFBSSxFQUFHQSxFQUFJLFVBRWpCamtCLE1BR1RxSyxTQUFPakgsVUFBVXdxSSxPQUFTLGVBQ3BCNTFHLEVBQU1oNEIsS0FBSzRHLFVBQ1hveEIsRUFBTSxHQUFNLFFBQ1IsSUFBSWd5RyxXQUFXLGlEQUVsQixJQUFJL2xILEVBQUksRUFBR0EsRUFBSStULEVBQUsvVCxHQUFLLE9BQ3ZCamtCLEtBQU1pa0IsRUFBR0EsRUFBSSxRQUNiamtCLEtBQU1pa0IsRUFBSSxFQUFHQSxFQUFJLFFBQ2pCamtCLEtBQU1pa0IsRUFBSSxFQUFHQSxFQUFJLFFBQ2pCamtCLEtBQU1pa0IsRUFBSSxFQUFHQSxFQUFJLFVBRWpCamtCLE1BR1RxSyxTQUFPakgsVUFBVUUsU0FBVyxlQUN0QnNELEVBQXVCLEVBQWQ1RyxLQUFLNEcsY0FDSCxJQUFYQSxFQUFxQixHQUNBLElBQXJCWSxVQUFVWixPQUFxQndrSSxVQUFVcHJJLEtBQU0sRUFBRzRHLEdBQy9Dc2tJLGFBQWFua0ksTUFBTS9HLEtBQU13SCxZQUdsQzZDLFNBQU9qSCxVQUFVeXFJLE9BQVMsU0FBaUJwa0gsT0FDcENraEgsaUJBQWlCbGhILFNBQVUsSUFBSXBOLFVBQVUsb0NBQzFDcmMsT0FBU3lwQixHQUNzQixJQUE1QnBmLFNBQU9vakksUUFBUXp0SSxLQUFNeXBCLElBRzlCcGYsU0FBT2pILFVBQVV1cEgsUUFBVSxlQUNyQnZsRyxFQUFNLEdBQ05oZ0IsRUFBTXdpSSx5QkFDTjVwSSxLQUFLNEcsT0FBUyxNQUNWNUcsS0FBS3NELFNBQVMsTUFBTyxFQUFHOEQsR0FBS2hHLE1BQU0sU0FBU3NnQixLQUFLLEtBQ25EMWhCLEtBQUs0RyxPQUFTUSxPQUFZLFVBRXpCLFdBQWFnZ0IsRUFBTSxLQUc1Qi9jLFNBQU9qSCxVQUFVcXFJLFFBQVUsU0FBa0J6c0gsRUFBUTFaLEVBQU9xekMsRUFBS216RixFQUFXQyxPQUNyRXBELGlCQUFpQjNwSCxTQUNkLElBQUkzRSxVQUFVLHFDQUdSNVksSUFBVjZELE1BQ00sUUFFRTdELElBQVJrM0MsTUFDSTM1QixFQUFTQSxFQUFPcGEsT0FBUyxRQUVmbkQsSUFBZHFxSSxNQUNVLFFBRUVycUksSUFBWnNxSSxNQUNRL3RJLEtBQUs0RyxRQUdiVSxFQUFRLEdBQUtxekMsRUFBTTM1QixFQUFPcGEsUUFBVWtuSSxFQUFZLEdBQUtDLEVBQVUvdEksS0FBSzRHLGFBQ2hFLElBQUlvakksV0FBVyx5QkFHbkI4RCxHQUFhQyxHQUFXem1JLEdBQVNxekMsU0FDNUIsS0FFTG16RixHQUFhQyxTQUNQLEtBRU56bUksR0FBU3F6QyxTQUNKLFVBR0UsT0FDRixPQUNNLE9BQ0YsRUFFVDM2QyxPQUFTZ2hCLFNBQWUsVUFFeEIrb0QsRUFBSWdrRSxFQUFVRCxFQUNkOWpFLEVBQUlydkIsRUFBTXJ6QyxFQUNWMHdCLEVBQU03d0IsS0FBS2diLElBQUk0bkQsRUFBR0MsR0FFbEJna0UsRUFBV2h1SSxLQUFLd1IsTUFBTXM4SCxFQUFXQyxHQUNqQ0UsRUFBYWp0SCxFQUFPeFAsTUFBTWxLLEVBQU9xekMsR0FFNUIxMkIsRUFBSSxFQUFHQSxFQUFJK1QsSUFBTy9ULEtBQ3JCK3BILEVBQVMvcEgsS0FBT2dxSCxFQUFXaHFILEdBQUksR0FDN0IrcEgsRUFBUy9wSCxLQUNUZ3FILEVBQVdocUgsZ0JBS2Y4bEQsRUFBSUMsR0FBVyxFQUNmQSxFQUFJRCxFQUFVLEVBQ1gsR0E2SFQxL0QsU0FBT2pILFVBQVU4cUksU0FBVyxTQUFtQnZuSCxFQUFLNVEsRUFBWXcwSCxVQUNWLElBQTdDdnFJLEtBQUs4bkIsUUFBUW5CLEVBQUs1USxFQUFZdzBILElBR3ZDbGdJLFNBQU9qSCxVQUFVMGtCLFFBQVUsU0FBa0JuQixFQUFLNVEsRUFBWXcwSCxVQUNyRG1CLHFCQUFxQjFySSxLQUFNMm1CLEVBQUs1USxFQUFZdzBILEdBQVUsSUFHL0RsZ0ksU0FBT2pILFVBQVVnZixZQUFjLFNBQXNCdUUsRUFBSzVRLEVBQVl3MEgsVUFDN0RtQixxQkFBcUIxckksS0FBTTJtQixFQUFLNVEsRUFBWXcwSCxHQUFVLElBa0QvRGxnSSxTQUFPakgsVUFBVXFtSSxNQUFRLFNBQWdCM2hJLEVBQVF5SixFQUFRM0ssRUFBUTJqSSxXQUVoRDltSSxJQUFYOE4sSUFDUyxTQUNGdlIsS0FBSzRHLFNBQ0wsT0FFSixRQUFlbkQsSUFBWG1ELEdBQTBDLGlCQUFYMkssSUFDN0JBLElBQ0Z2UixLQUFLNEcsU0FDTCxNQUVKLENBQUEsSUFBSWtnQixTQUFTdlYsU0FXWixJQUFJakQsTUFDUiw4RUFYZ0IsRUFDZHdZLFNBQVNsZ0IsT0FDTyxPQUNEbkQsSUFBYjhtSSxNQUFtQyxZQUU1QjNqSSxTQUNGbkQsT0FTVCtFLEVBQVl4SSxLQUFLNEcsT0FBUzJLLFdBQ2Y5TixJQUFYbUQsR0FBd0JBLEVBQVM0QixPQUFvQkEsR0FFcERWLEVBQU9sQixPQUFTLElBQU1BLEVBQVMsR0FBSzJLLEVBQVMsSUFBT0EsRUFBU3ZSLEtBQUs0RyxhQUMvRCxJQUFJb2pJLFdBQVcsMENBR2xCTyxNQUFxQixnQkFFdEJRLEdBQWMsV0FFUlIsT0FDRCxhQUNJMkIsU0FBU2xzSSxLQUFNOEgsRUFBUXlKLEVBQVEzSyxPQUVuQyxXQUNBLGVBQ0l5bEksVUFBVXJzSSxLQUFNOEgsRUFBUXlKLEVBQVEzSyxPQUVwQyxlQUNJMmxJLFdBQVd2c0ksS0FBTThILEVBQVF5SixFQUFRM0ssT0FFckMsYUFDQSxnQkFDSTZsSSxZQUFZenNJLEtBQU04SCxFQUFReUosRUFBUTNLLE9BRXRDLGdCQUVJOGxJLFlBQVkxc0ksS0FBTThILEVBQVF5SixFQUFRM0ssT0FFdEMsV0FDQSxZQUNBLGNBQ0Esa0JBQ0krbEksVUFBVTNzSSxLQUFNOEgsRUFBUXlKLEVBQVEzSyxjQUduQ21rSSxRQUFtQixJQUFJMXVILFVBQVUscUJBQXVCa3VILE1BQ2hELEdBQUtBLEdBQVUvaUgsaUJBQ2IsSUFLdEJuZCxTQUFPakgsVUFBVTJwSCxPQUFTLHVCQUVoQixjQUNBcmxILE1BQU10RSxVQUFVb08sTUFBTTNOLEtBQUs3RCxLQUFLbXVJLE1BQVFudUksS0FBTSxLQXdGeEQsSUFBSW91SSxxQkFBdUIsS0FFM0IsU0FBU2Ysc0JBQXVCZ0IsT0FDMUJyMkcsRUFBTXEyRyxFQUFXem5JLFVBQ2pCb3hCLEdBQU9vMkcsNEJBQ0ZwaEksT0FBT3NoSSxhQUFhdm5JLE1BQU1pRyxPQUFRcWhJLFdBSXZDN2tILEVBQU0sR0FDTnZGLEVBQUksRUFDREEsRUFBSStULE1BQ0ZockIsT0FBT3NoSSxhQUFhdm5JLE1BQ3pCaUcsT0FDQXFoSSxFQUFXNzhILE1BQU15UyxFQUFHQSxHQUFLbXFILDhCQUd0QjVrSCxFQUdULFNBQVM2aEgsV0FBWVMsRUFBS3hrSSxFQUFPcXpDLE9BQzNCeHhCLEVBQU0sS0FDSmhpQixLQUFLZ2IsSUFBSTJwSCxFQUFJbGxJLE9BQVErekMsT0FFdEIsSUFBSTEyQixFQUFJM2MsRUFBTzJjLEVBQUkwMkIsSUFBTzEyQixLQUN0QmpYLE9BQU9zaEksYUFBc0IsSUFBVHhDLEVBQUk3bkgsV0FFMUJrRixFQUdULFNBQVNtaUgsWUFBYVEsRUFBS3hrSSxFQUFPcXpDLE9BQzVCeHhCLEVBQU0sS0FDSmhpQixLQUFLZ2IsSUFBSTJwSCxFQUFJbGxJLE9BQVErekMsT0FFdEIsSUFBSTEyQixFQUFJM2MsRUFBTzJjLEVBQUkwMkIsSUFBTzEyQixLQUN0QmpYLE9BQU9zaEksYUFBYXhDLEVBQUk3bkgsV0FFMUJrRixFQUdULFNBQVNnaUgsU0FBVVcsRUFBS3hrSSxFQUFPcXpDLE9BQ3pCM2lCLEVBQU04ekcsRUFBSWxsSSxTQUVUVSxHQUFTQSxFQUFRLE9BQVcsS0FDNUJxekMsR0FBT0EsRUFBTSxHQUFLQSxFQUFNM2lCLE9BQVdBLFdBRXBDeTJGLEVBQU0sR0FDRHhxRyxFQUFJM2MsRUFBTzJjLEVBQUkwMkIsSUFBTzEyQixLQUN0QnNxSCxNQUFNekMsRUFBSTduSCxXQUVad3FHLEVBR1QsU0FBUytjLGFBQWNNLEVBQUt4a0ksRUFBT3F6QyxXQUM3QjZ6RixFQUFRMUMsRUFBSXQ2SCxNQUFNbEssRUFBT3F6QyxHQUN6Qm54QixFQUFNLEdBQ0R2RixFQUFJLEVBQUdBLEVBQUl1cUgsRUFBTTVuSSxPQUFRcWQsR0FBSyxLQUM5QmpYLE9BQU9zaEksYUFBYUUsRUFBTXZxSCxHQUFvQixJQUFmdXFILEVBQU12cUgsRUFBSSxXQUUzQ3VGLEVBMENULFNBQVNpbEgsWUFBYWw5SCxFQUFRbTlILEVBQUs5bkksTUFDNUIySyxFQUFTLEdBQU8sR0FBS0EsRUFBUyxRQUFTLElBQUl5NEgsV0FBVyx5QkFDdkR6NEgsRUFBU205SCxFQUFNOW5JLFFBQWMsSUFBSW9qSSxXQUFXLHlDQStKbEQsU0FBUzJFLFNBQVU3QyxFQUFLbm9JLEVBQU80TixFQUFRbTlILEVBQUt0bkksRUFBSythLE9BQzFDd29ILGlCQUFpQm1CLFNBQVksSUFBSXp2SCxVQUFVLGtEQUM1QzFZLEVBQVF5RCxHQUFPekQsRUFBUXdlLFFBQVcsSUFBSTZuSCxXQUFXLHdDQUNqRHo0SCxFQUFTbTlILEVBQU01QyxFQUFJbGxJLGFBQWMsSUFBSW9qSSxXQUFXLHNCQWtEdEQsU0FBUzRFLGtCQUFtQjlDLEVBQUtub0ksRUFBTzROLEVBQVFzOUgsR0FDMUNsckksRUFBUSxNQUFXLE1BQVNBLEVBQVEsT0FDbkMsSUFBSXNnQixFQUFJLEVBQUd1b0IsRUFBSXJsQyxLQUFLZ2IsSUFBSTJwSCxFQUFJbGxJLE9BQVMySyxFQUFRLEdBQUkwUyxFQUFJdW9CLElBQUt2b0IsSUFDekQxUyxFQUFTMFMsSUFBTXRnQixFQUFTLEtBQVMsR0FBS2tySSxFQUFlNXFILEVBQUksRUFBSUEsTUFDbEMsR0FBNUI0cUgsRUFBZTVxSCxFQUFJLEVBQUlBLEdBOEI5QixTQUFTNnFILGtCQUFtQmhELEVBQUtub0ksRUFBTzROLEVBQVFzOUgsR0FDMUNsckksRUFBUSxNQUFXLFdBQWFBLEVBQVEsT0FDdkMsSUFBSXNnQixFQUFJLEVBQUd1b0IsRUFBSXJsQyxLQUFLZ2IsSUFBSTJwSCxFQUFJbGxJLE9BQVMySyxFQUFRLEdBQUkwUyxFQUFJdW9CLElBQUt2b0IsSUFDekQxUyxFQUFTMFMsR0FBTXRnQixJQUF1QyxHQUE1QmtySSxFQUFlNXFILEVBQUksRUFBSUEsR0FBVSxJQW1KbkUsU0FBUzhxSCxhQUFjakQsRUFBS25vSSxFQUFPNE4sRUFBUW05SCxFQUFLdG5JLEVBQUsrYSxNQUMvQzVRLEVBQVNtOUgsRUFBTTVDLEVBQUlsbEksYUFBYyxJQUFJb2pJLFdBQVcseUJBQ2hEejRILEVBQVMsUUFBUyxJQUFJeTRILFdBQVcsc0JBR3ZDLFNBQVNnRixXQUFZbEQsRUFBS25vSSxFQUFPNE4sRUFBUXM5SCxFQUFjSSxVQUNoREEsZ0JBQ1VuRCxFQUFLbm9JLEVBQU80TixFQUFRLEVBQUcsdUJBQXlCLDZCQUVqRHU2SCxFQUFLbm9JLEVBQU80TixFQUFRczlILEVBQWMsR0FBSSxHQUM3Q3Q5SCxFQUFTLEVBV2xCLFNBQVMyOUgsWUFBYXBELEVBQUtub0ksRUFBTzROLEVBQVFzOUgsRUFBY0ksVUFDakRBLGdCQUNVbkQsRUFBS25vSSxFQUFPNE4sRUFBUSxFQUFHLHdCQUEwQiw4QkFFbER1NkgsRUFBS25vSSxFQUFPNE4sRUFBUXM5SCxFQUFjLEdBQUksR0FDN0N0OUgsRUFBUyxFQS9jbEJsSCxTQUFPakgsVUFBVW9PLE1BQVEsU0FBZ0JsSyxFQUFPcXpDLE9BcUIxQ3cwRixFQXBCQW4zRyxFQUFNaDRCLEtBQUs0RyxjQUNMVSxTQUNJN0QsSUFBUmszQyxFQUFvQjNpQixJQUFRMmlCLEVBRTlCcnpDLEVBQVEsTUFDRDB3QixHQUNHLE1BQVcsR0FDZDF3QixFQUFRMHdCLE1BQ1RBLEdBR04yaUIsRUFBTSxNQUNEM2lCLEdBQ0csTUFBUyxHQUNWMmlCLEVBQU0zaUIsTUFDVEEsR0FHSjJpQixFQUFNcnpDLE1BQWFBLEdBR25CK0MsU0FBT3kvSCx1QkFDQTlwSSxLQUFLb3ZJLFNBQVM5bkksRUFBT3F6QyxJQUN2QmhvQixVQUFZdG9CLFNBQU9qSCxjQUNyQixLQUNEaXNJLEVBQVcxMEYsRUFBTXJ6QyxJQUNaLElBQUkrQyxTQUFPZ2xJLE9BQVU1ckksT0FDekIsSUFBSXdnQixFQUFJLEVBQUdBLEVBQUlvckgsSUFBWXBySCxJQUN2QkEsR0FBS2prQixLQUFLaWtCLEVBQUkzYyxVQUlsQjZuSSxHQVdUOWtJLFNBQU9qSCxVQUFVa3NJLFdBQWEsU0FBcUIvOUgsRUFBUXFFLEVBQVlxNUgsTUFDbkQsS0FDUSxFQUNyQkEsZUFBc0IxOUgsRUFBUXFFLEVBQVk1VixLQUFLNEcsZ0JBRWhEK2YsRUFBTTNtQixLQUFLdVIsR0FDWGcrSCxFQUFNLEVBQ050ckgsRUFBSSxJQUNDQSxFQUFJck8sSUFBZTI1SCxHQUFPLFNBQzFCdnZJLEtBQUt1UixFQUFTMFMsR0FBS3NySCxTQUdyQjVvSCxHQUdUdGMsU0FBT2pILFVBQVVvc0ksV0FBYSxTQUFxQmorSCxFQUFRcUUsRUFBWXE1SCxNQUNuRCxLQUNRLEVBQ3JCQSxlQUNTMTlILEVBQVFxRSxFQUFZNVYsS0FBSzRHLGdCQUduQytmLEVBQU0zbUIsS0FBS3VSLElBQVdxRSxHQUN0QjI1SCxFQUFNLEVBQ0gzNUgsRUFBYSxJQUFNMjVILEdBQU8sU0FDeEJ2dkksS0FBS3VSLElBQVdxRSxHQUFjMjVILFNBR2hDNW9ILEdBR1R0YyxTQUFPakgsVUFBVXFzSSxVQUFZLFNBQW9CbCtILEVBQVEwOUgsVUFDbERBLGVBQXNCMTlILEVBQVEsRUFBR3ZSLEtBQUs0RyxRQUNwQzVHLEtBQUt1UixJQUdkbEgsU0FBT2pILFVBQVVzc0ksYUFBZSxTQUF1Qm4rSCxFQUFRMDlILFVBQ3hEQSxlQUFzQjE5SCxFQUFRLEVBQUd2UixLQUFLNEcsUUFDcEM1RyxLQUFLdVIsR0FBV3ZSLEtBQUt1UixFQUFTLElBQU0sR0FHN0NsSCxTQUFPakgsVUFBVTJvSSxhQUFlLFNBQXVCeDZILEVBQVEwOUgsVUFDeERBLGVBQXNCMTlILEVBQVEsRUFBR3ZSLEtBQUs0RyxRQUNuQzVHLEtBQUt1UixJQUFXLEVBQUt2UixLQUFLdVIsRUFBUyxJQUc3Q2xILFNBQU9qSCxVQUFVdXNJLGFBQWUsU0FBdUJwK0gsRUFBUTA5SCxVQUN4REEsZUFBc0IxOUgsRUFBUSxFQUFHdlIsS0FBSzRHLFNBRWxDNUcsS0FBS3VSLEdBQ1R2UixLQUFLdVIsRUFBUyxJQUFNLEVBQ3BCdlIsS0FBS3VSLEVBQVMsSUFBTSxJQUNELFNBQW5CdlIsS0FBS3VSLEVBQVMsSUFHckJsSCxTQUFPakgsVUFBVXdzSSxhQUFlLFNBQXVCcitILEVBQVEwOUgsVUFDeERBLGVBQXNCMTlILEVBQVEsRUFBR3ZSLEtBQUs0RyxRQUVwQixTQUFmNUcsS0FBS3VSLElBQ1R2UixLQUFLdVIsRUFBUyxJQUFNLEdBQ3JCdlIsS0FBS3VSLEVBQVMsSUFBTSxFQUNyQnZSLEtBQUt1UixFQUFTLEtBR2xCbEgsU0FBT2pILFVBQVV5c0ksVUFBWSxTQUFvQnQrSCxFQUFRcUUsRUFBWXE1SCxNQUNqRCxLQUNRLEVBQ3JCQSxlQUFzQjE5SCxFQUFRcUUsRUFBWTVWLEtBQUs0RyxnQkFFaEQrZixFQUFNM21CLEtBQUt1UixHQUNYZytILEVBQU0sRUFDTnRySCxFQUFJLElBQ0NBLEVBQUlyTyxJQUFlMjVILEdBQU8sU0FDMUJ2dkksS0FBS3VSLEVBQVMwUyxHQUFLc3JILFNBSXhCNW9ILE9BRkcsVUFFZ0J4ZixLQUFLbWlFLElBQUksRUFBRyxFQUFJMXpELElBRWhDK1EsR0FHVHRjLFNBQU9qSCxVQUFVMHNJLFVBQVksU0FBb0J2K0gsRUFBUXFFLEVBQVlxNUgsTUFDakQsS0FDUSxFQUNyQkEsZUFBc0IxOUgsRUFBUXFFLEVBQVk1VixLQUFLNEcsZ0JBRWhEcWQsRUFBSXJPLEVBQ0oyNUgsRUFBTSxFQUNONW9ILEVBQU0zbUIsS0FBS3VSLElBQVcwUyxHQUNuQkEsRUFBSSxJQUFNc3JILEdBQU8sU0FDZnZ2SSxLQUFLdVIsSUFBVzBTLEdBQUtzckgsU0FJMUI1b0gsT0FGRyxVQUVnQnhmLEtBQUttaUUsSUFBSSxFQUFHLEVBQUkxekQsSUFFaEMrUSxHQUdUdGMsU0FBT2pILFVBQVUyc0ksU0FBVyxTQUFtQngrSCxFQUFRMDlILFVBQ2hEQSxlQUFzQjE5SCxFQUFRLEVBQUd2UixLQUFLNEcsUUFDdEIsSUFBZjVHLEtBQUt1UixJQUMwQixHQUE1QixJQUFPdlIsS0FBS3VSLEdBQVUsR0FES3ZSLEtBQUt1UixJQUkzQ2xILFNBQU9qSCxVQUFVNHNJLFlBQWMsU0FBc0J6K0gsRUFBUTA5SCxHQUN0REEsZUFBc0IxOUgsRUFBUSxFQUFHdlIsS0FBSzRHLFlBQ3ZDK2YsRUFBTTNtQixLQUFLdVIsR0FBV3ZSLEtBQUt1UixFQUFTLElBQU0sU0FDaEMsTUFBTm9WLEVBQXNCLFdBQU5BLEVBQW1CQSxHQUc3Q3RjLFNBQU9qSCxVQUFVNnNJLFlBQWMsU0FBc0IxK0gsRUFBUTA5SCxHQUN0REEsZUFBc0IxOUgsRUFBUSxFQUFHdlIsS0FBSzRHLFlBQ3ZDK2YsRUFBTTNtQixLQUFLdVIsRUFBUyxHQUFNdlIsS0FBS3VSLElBQVcsU0FDaEMsTUFBTm9WLEVBQXNCLFdBQU5BLEVBQW1CQSxHQUc3Q3RjLFNBQU9qSCxVQUFVOHNJLFlBQWMsU0FBc0IzK0gsRUFBUTA5SCxVQUN0REEsZUFBc0IxOUgsRUFBUSxFQUFHdlIsS0FBSzRHLFFBRW5DNUcsS0FBS3VSLEdBQ1Z2UixLQUFLdVIsRUFBUyxJQUFNLEVBQ3BCdlIsS0FBS3VSLEVBQVMsSUFBTSxHQUNwQnZSLEtBQUt1UixFQUFTLElBQU0sSUFHekJsSCxTQUFPakgsVUFBVStzSSxZQUFjLFNBQXNCNStILEVBQVEwOUgsVUFDdERBLGVBQXNCMTlILEVBQVEsRUFBR3ZSLEtBQUs0RyxRQUVuQzVHLEtBQUt1UixJQUFXLEdBQ3JCdlIsS0FBS3VSLEVBQVMsSUFBTSxHQUNwQnZSLEtBQUt1UixFQUFTLElBQU0sRUFDcEJ2UixLQUFLdVIsRUFBUyxJQUduQmxILFNBQU9qSCxVQUFVZ3RJLFlBQWMsU0FBc0I3K0gsRUFBUTA5SCxVQUN0REEsZUFBc0IxOUgsRUFBUSxFQUFHdlIsS0FBSzRHLFFBQ3BDeXBJLEtBQWFyd0ksS0FBTXVSLEdBQVEsRUFBTSxHQUFJLElBRzlDbEgsU0FBT2pILFVBQVVrdEksWUFBYyxTQUFzQi8rSCxFQUFRMDlILFVBQ3REQSxlQUFzQjE5SCxFQUFRLEVBQUd2UixLQUFLNEcsUUFDcEN5cEksS0FBYXJ3SSxLQUFNdVIsR0FBUSxFQUFPLEdBQUksSUFHL0NsSCxTQUFPakgsVUFBVW10SSxhQUFlLFNBQXVCaC9ILEVBQVEwOUgsVUFDeERBLGVBQXNCMTlILEVBQVEsRUFBR3ZSLEtBQUs0RyxRQUNwQ3lwSSxLQUFhcndJLEtBQU11UixHQUFRLEVBQU0sR0FBSSxJQUc5Q2xILFNBQU9qSCxVQUFVb3RJLGFBQWUsU0FBdUJqL0gsRUFBUTA5SCxVQUN4REEsZUFBc0IxOUgsRUFBUSxFQUFHdlIsS0FBSzRHLFFBQ3BDeXBJLEtBQWFyd0ksS0FBTXVSLEdBQVEsRUFBTyxHQUFJLElBUy9DbEgsU0FBT2pILFVBQVVxdEksWUFBYyxTQUFzQjlzSSxFQUFPNE4sRUFBUXFFLEVBQVlxNUgsT0FDckV0ckksS0FDUyxLQUNRLEVBQ3JCc3JJLGFBRU1qdkksS0FBTTJELEVBQU80TixFQUFRcUUsRUFEZnpPLEtBQUttaUUsSUFBSSxFQUFHLEVBQUkxekQsR0FBYyxFQUNPLE9BR2xEMjVILEVBQU0sRUFDTnRySCxFQUFJLFdBQ0gxUyxHQUFrQixJQUFSNU4sSUFDTnNnQixFQUFJck8sSUFBZTI1SCxHQUFPLFdBQzVCaCtILEVBQVMwUyxHQUFNdGdCLEVBQVE0ckksRUFBTyxXQUc5QmgrSCxFQUFTcUUsR0FHbEJ2TCxTQUFPakgsVUFBVXN0SSxZQUFjLFNBQXNCL3NJLEVBQU80TixFQUFRcUUsRUFBWXE1SCxPQUNyRXRySSxLQUNTLEtBQ1EsRUFDckJzckksYUFFTWp2SSxLQUFNMkQsRUFBTzROLEVBQVFxRSxFQURmek8sS0FBS21pRSxJQUFJLEVBQUcsRUFBSTF6RCxHQUFjLEVBQ08sT0FHbERxTyxFQUFJck8sRUFBYSxFQUNqQjI1SCxFQUFNLFdBQ0xoK0gsRUFBUzBTLEdBQWEsSUFBUnRnQixJQUNWc2dCLEdBQUssSUFBTXNySCxHQUFPLFdBQ3BCaCtILEVBQVMwUyxHQUFNdGdCLEVBQVE0ckksRUFBTyxXQUc5QmgrSCxFQUFTcUUsR0FHbEJ2TCxTQUFPakgsVUFBVXV0SSxXQUFhLFNBQXFCaHRJLEVBQU80TixFQUFRMDlILGFBQ3ZEdHJJLEtBQ1MsRUFDYnNySSxZQUFtQmp2SSxLQUFNMkQsRUFBTzROLEVBQVEsRUFBRyxJQUFNLEdBQ2pEbEgsU0FBT3kvSCx3QkFBNkIzaUksS0FBSzBmLE1BQU1sakIsU0FDL0M0TixHQUFtQixJQUFSNU4sRUFDVDROLEVBQVMsR0FXbEJsSCxTQUFPakgsVUFBVXd0SSxjQUFnQixTQUF3Qmp0SSxFQUFPNE4sRUFBUTA5SCxhQUM3RHRySSxLQUNTLEVBQ2JzckksWUFBbUJqdkksS0FBTTJELEVBQU80TixFQUFRLEVBQUcsTUFBUSxHQUNwRGxILFNBQU95L0gsMEJBQ0p2NEgsR0FBbUIsSUFBUjVOLE9BQ1g0TixFQUFTLEdBQU01TixJQUFVLHFCQUVaM0QsS0FBTTJELEVBQU80TixHQUFRLEdBRWxDQSxFQUFTLEdBR2xCbEgsU0FBT2pILFVBQVV5dEksY0FBZ0IsU0FBd0JsdEksRUFBTzROLEVBQVEwOUgsYUFDN0R0ckksS0FDUyxFQUNic3JJLFlBQW1CanZJLEtBQU0yRCxFQUFPNE4sRUFBUSxFQUFHLE1BQVEsR0FDcERsSCxTQUFPeS9ILDBCQUNKdjRILEdBQVc1TixJQUFVLE9BQ3JCNE4sRUFBUyxHQUFjLElBQVI1TixxQkFFRjNELEtBQU0yRCxFQUFPNE4sR0FBUSxHQUVsQ0EsRUFBUyxHQVVsQmxILFNBQU9qSCxVQUFVMHRJLGNBQWdCLFNBQXdCbnRJLEVBQU80TixFQUFRMDlILGFBQzdEdHJJLEtBQ1MsRUFDYnNySSxZQUFtQmp2SSxLQUFNMkQsRUFBTzROLEVBQVEsRUFBRyxXQUFZLEdBQ3hEbEgsU0FBT3kvSCwwQkFDSnY0SCxFQUFTLEdBQU01TixJQUFVLFFBQ3pCNE4sRUFBUyxHQUFNNU4sSUFBVSxRQUN6QjROLEVBQVMsR0FBTTVOLElBQVUsT0FDekI0TixHQUFtQixJQUFSNU4scUJBRUUzRCxLQUFNMkQsRUFBTzROLEdBQVEsR0FFbENBLEVBQVMsR0FHbEJsSCxTQUFPakgsVUFBVTJ0SSxjQUFnQixTQUF3QnB0SSxFQUFPNE4sRUFBUTA5SCxhQUM3RHRySSxLQUNTLEVBQ2JzckksWUFBbUJqdkksS0FBTTJELEVBQU80TixFQUFRLEVBQUcsV0FBWSxHQUN4RGxILFNBQU95L0gsMEJBQ0p2NEgsR0FBVzVOLElBQVUsUUFDckI0TixFQUFTLEdBQU01TixJQUFVLFFBQ3pCNE4sRUFBUyxHQUFNNU4sSUFBVSxPQUN6QjROLEVBQVMsR0FBYyxJQUFSNU4scUJBRUYzRCxLQUFNMkQsRUFBTzROLEdBQVEsR0FFbENBLEVBQVMsR0FHbEJsSCxTQUFPakgsVUFBVTR0SSxXQUFhLFNBQXFCcnRJLEVBQU80TixFQUFRcUUsRUFBWXE1SCxTQUNuRXRySSxLQUNTLEdBQ2JzckksRUFBVSxLQUNUN2IsRUFBUWpzSCxLQUFLbWlFLElBQUksRUFBRyxFQUFJMXpELEVBQWEsWUFFaEM1VixLQUFNMkQsRUFBTzROLEVBQVFxRSxFQUFZdzlHLEVBQVEsR0FBSUEsT0FHcERudkcsRUFBSSxFQUNKc3JILEVBQU0sRUFDTm5nSCxFQUFNLFdBQ0w3ZCxHQUFrQixJQUFSNU4sSUFDTnNnQixFQUFJck8sSUFBZTI1SCxHQUFPLE1BQzdCNXJJLEVBQVEsR0FBYSxJQUFSeXJCLEdBQXNDLElBQXpCcHZCLEtBQUt1UixFQUFTMFMsRUFBSSxPQUN4QyxRQUVIMVMsRUFBUzBTLElBQU90Z0IsRUFBUTRySSxHQUFRLEdBQUtuZ0gsRUFBTSxXQUczQzdkLEVBQVNxRSxHQUdsQnZMLFNBQU9qSCxVQUFVNnRJLFdBQWEsU0FBcUJ0dEksRUFBTzROLEVBQVFxRSxFQUFZcTVILFNBQ25FdHJJLEtBQ1MsR0FDYnNySSxFQUFVLEtBQ1Q3YixFQUFRanNILEtBQUttaUUsSUFBSSxFQUFHLEVBQUkxekQsRUFBYSxZQUVoQzVWLEtBQU0yRCxFQUFPNE4sRUFBUXFFLEVBQVl3OUcsRUFBUSxHQUFJQSxPQUdwRG52RyxFQUFJck8sRUFBYSxFQUNqQjI1SCxFQUFNLEVBQ05uZ0gsRUFBTSxXQUNMN2QsRUFBUzBTLEdBQWEsSUFBUnRnQixJQUNWc2dCLEdBQUssSUFBTXNySCxHQUFPLE1BQ3JCNXJJLEVBQVEsR0FBYSxJQUFSeXJCLEdBQXNDLElBQXpCcHZCLEtBQUt1UixFQUFTMFMsRUFBSSxPQUN4QyxRQUVIMVMsRUFBUzBTLElBQU90Z0IsRUFBUTRySSxHQUFRLEdBQUtuZ0gsRUFBTSxXQUczQzdkLEVBQVNxRSxHQUdsQnZMLFNBQU9qSCxVQUFVOHRJLFVBQVksU0FBb0J2dEksRUFBTzROLEVBQVEwOUgsYUFDckR0ckksS0FDUyxFQUNic3JJLFlBQW1CanZJLEtBQU0yRCxFQUFPNE4sRUFBUSxFQUFHLEtBQU8sS0FDbERsSCxTQUFPeS9ILHdCQUE2QjNpSSxLQUFLMGYsTUFBTWxqQixJQUNoREEsRUFBUSxNQUFXLElBQU9BLEVBQVEsUUFDakM0TixHQUFtQixJQUFSNU4sRUFDVDROLEVBQVMsR0FHbEJsSCxTQUFPakgsVUFBVSt0SSxhQUFlLFNBQXVCeHRJLEVBQU80TixFQUFRMDlILGFBQzNEdHJJLEtBQ1MsRUFDYnNySSxZQUFtQmp2SSxLQUFNMkQsRUFBTzROLEVBQVEsRUFBRyxPQUFTLE9BQ3JEbEgsU0FBT3kvSCwwQkFDSnY0SCxHQUFtQixJQUFSNU4sT0FDWDROLEVBQVMsR0FBTTVOLElBQVUscUJBRVozRCxLQUFNMkQsRUFBTzROLEdBQVEsR0FFbENBLEVBQVMsR0FHbEJsSCxTQUFPakgsVUFBVWd1SSxhQUFlLFNBQXVCenRJLEVBQU80TixFQUFRMDlILGFBQzNEdHJJLEtBQ1MsRUFDYnNySSxZQUFtQmp2SSxLQUFNMkQsRUFBTzROLEVBQVEsRUFBRyxPQUFTLE9BQ3JEbEgsU0FBT3kvSCwwQkFDSnY0SCxHQUFXNU4sSUFBVSxPQUNyQjROLEVBQVMsR0FBYyxJQUFSNU4scUJBRUYzRCxLQUFNMkQsRUFBTzROLEdBQVEsR0FFbENBLEVBQVMsR0FHbEJsSCxTQUFPakgsVUFBVWl1SSxhQUFlLFNBQXVCMXRJLEVBQU80TixFQUFRMDlILGFBQzNEdHJJLEtBQ1MsRUFDYnNySSxZQUFtQmp2SSxLQUFNMkQsRUFBTzROLEVBQVEsRUFBRyxZQUFhLFlBQ3pEbEgsU0FBT3kvSCwwQkFDSnY0SCxHQUFtQixJQUFSNU4sT0FDWDROLEVBQVMsR0FBTTVOLElBQVUsT0FDekI0TixFQUFTLEdBQU01TixJQUFVLFFBQ3pCNE4sRUFBUyxHQUFNNU4sSUFBVSxzQkFFWjNELEtBQU0yRCxFQUFPNE4sR0FBUSxHQUVsQ0EsRUFBUyxHQUdsQmxILFNBQU9qSCxVQUFVa3VJLGFBQWUsU0FBdUIzdEksRUFBTzROLEVBQVEwOUgsYUFDM0R0ckksS0FDUyxFQUNic3JJLFlBQW1CanZJLEtBQU0yRCxFQUFPNE4sRUFBUSxFQUFHLFlBQWEsWUFDekQ1TixFQUFRLE1BQVcsV0FBYUEsRUFBUSxHQUN4QzBHLFNBQU95L0gsMEJBQ0p2NEgsR0FBVzVOLElBQVUsUUFDckI0TixFQUFTLEdBQU01TixJQUFVLFFBQ3pCNE4sRUFBUyxHQUFNNU4sSUFBVSxPQUN6QjROLEVBQVMsR0FBYyxJQUFSNU4scUJBRUYzRCxLQUFNMkQsRUFBTzROLEdBQVEsR0FFbENBLEVBQVMsR0FnQmxCbEgsU0FBT2pILFVBQVVtdUksYUFBZSxTQUF1QjV0SSxFQUFPNE4sRUFBUTA5SCxVQUM3REQsV0FBV2h2SSxLQUFNMkQsRUFBTzROLEdBQVEsRUFBTTA5SCxJQUcvQzVrSSxTQUFPakgsVUFBVW91SSxhQUFlLFNBQXVCN3RJLEVBQU80TixFQUFRMDlILFVBQzdERCxXQUFXaHZJLEtBQU0yRCxFQUFPNE4sR0FBUSxFQUFPMDlILElBV2hENWtJLFNBQU9qSCxVQUFVcXVJLGNBQWdCLFNBQXdCOXRJLEVBQU80TixFQUFRMDlILFVBQy9EQyxZQUFZbHZJLEtBQU0yRCxFQUFPNE4sR0FBUSxFQUFNMDlILElBR2hENWtJLFNBQU9qSCxVQUFVc3VJLGNBQWdCLFNBQXdCL3RJLEVBQU80TixFQUFRMDlILFVBQy9EQyxZQUFZbHZJLEtBQU0yRCxFQUFPNE4sR0FBUSxFQUFPMDlILElBSWpENWtJLFNBQU9qSCxVQUFVb1MsS0FBTyxTQUFld0wsRUFBUTJ3SCxFQUFhcnFJLEVBQU9xekMsTUFDNURyekMsTUFBZSxHQUNmcXpDLEdBQWUsSUFBUkEsTUFBaUIzNkMsS0FBSzRHLFFBQzlCK3FJLEdBQWUzd0gsRUFBT3BhLFdBQXNCb2EsRUFBT3BhLFFBQ2xEK3FJLE1BQTJCLEdBQzVCaDNGLEVBQU0sR0FBS0EsRUFBTXJ6QyxNQUFhQSxHQUc5QnF6QyxJQUFRcnpDLFNBQWMsS0FDSixJQUFsQjBaLEVBQU9wYSxRQUFnQyxJQUFoQjVHLEtBQUs0RyxjQUFxQixLQUdqRCtxSSxFQUFjLFFBQ1YsSUFBSTNILFdBQVcsZ0NBRW5CMWlJLEVBQVEsR0FBS0EsR0FBU3RILEtBQUs0RyxhQUFjLElBQUlvakksV0FBVyxnQ0FDeERydkYsRUFBTSxRQUFTLElBQUlxdkYsV0FBVywyQkFHOUJydkYsRUFBTTM2QyxLQUFLNEcsV0FBYzVHLEtBQUs0RyxRQUM5Qm9hLEVBQU9wYSxPQUFTK3FJLEVBQWNoM0YsRUFBTXJ6QyxNQUNoQzBaLEVBQU9wYSxPQUFTK3FJLEVBQWNycUksT0FJbEMyYyxFQURBK1QsRUFBTTJpQixFQUFNcnpDLEtBR1p0SCxPQUFTZ2hCLEdBQVUxWixFQUFRcXFJLEdBQWVBLEVBQWNoM0YsTUFFckQxMkIsRUFBSStULEVBQU0sRUFBRy9ULEdBQUssSUFBS0EsSUFDbkJBLEVBQUkwdEgsR0FBZTN4SSxLQUFLaWtCLEVBQUkzYyxRQUVoQyxHQUFJMHdCLEVBQU0sTUFBUzN0QixTQUFPeS9ILHdCQUUxQjdsSCxFQUFJLEVBQUdBLEVBQUkrVCxJQUFPL1QsSUFDZEEsRUFBSTB0SCxHQUFlM3hJLEtBQUtpa0IsRUFBSTNjLG1CQUcxQmxFLFVBQVVrUSxJQUFJelAsS0FDdkJtZCxFQUNBaGhCLEtBQUtvdkksU0FBUzluSSxFQUFPQSxFQUFRMHdCLEdBQzdCMjVHLFVBSUczNUcsR0FPVDN0QixTQUFPakgsVUFBVWtvRSxLQUFPLFNBQWUza0QsRUFBS3JmLEVBQU9xekMsRUFBSzR2RixNQUVuQyxpQkFBUjVqSCxFQUFrQixJQUNOLGlCQUFWcmYsS0FDRUEsSUFDSCxJQUNGdEgsS0FBSzRHLFFBQ2EsaUJBQVIrekMsTUFDTEEsSUFDTDM2QyxLQUFLNEcsUUFFTSxJQUFmK2YsRUFBSS9mLE9BQWMsS0FDaEIrOEMsRUFBT2g5QixFQUFJOUosV0FBVyxHQUN0QjhtQyxFQUFPLFFBQ0hBLFdBR09sZ0QsSUFBYjhtSSxHQUE4QyxpQkFBYkEsUUFDN0IsSUFBSWx1SCxVQUFVLGdDQUVFLGlCQUFia3VILElBQTBCbGdJLFNBQU9vZ0ksV0FBV0YsU0FDL0MsSUFBSWx1SCxVQUFVLHFCQUF1Qmt1SCxPQUVyQixpQkFBUjVqSCxPQUNKLFFBSVZyZixFQUFRLEdBQUt0SCxLQUFLNEcsT0FBU1UsR0FBU3RILEtBQUs0RyxPQUFTK3pDLFFBQzlDLElBQUlxdkYsV0FBVyx5QkFHbkJydkYsR0FBT3J6QyxTQUNGdEgsU0FRTGlrQixVQUxjLFNBQ0p4Z0IsSUFBUmszQyxFQUFvQjM2QyxLQUFLNEcsT0FBUyt6QyxJQUFRLEVBRTNDaDBCLE1BQVcsR0FHRyxpQkFBUkEsTUFDSjFDLEVBQUkzYyxFQUFPMmMsRUFBSTAyQixJQUFPMTJCLE9BQ3BCQSxHQUFLMEMsTUFFUCxLQUNENm5ILEVBQVE3RCxpQkFBaUJoa0gsR0FDekJBLEVBQ0Fxa0gsWUFBWSxJQUFJM2dJLFNBQU9zYyxFQUFLNGpILEdBQVVqbkksWUFDdEMwMEIsRUFBTXcyRyxFQUFNNW5JLFdBQ1hxZCxFQUFJLEVBQUdBLEVBQUkwMkIsRUFBTXJ6QyxJQUFTMmMsT0FDeEJBLEVBQUkzYyxHQUFTa25JLEVBQU12cUgsRUFBSStULFVBSXpCaDRCLE1BTVQsSUFBSTR4SSxrQkFBb0IscUJBRXhCLFNBQVNDLFlBQWF6cUgsU0FFZDBxSCxXQUFXMXFILEdBQUt4bUIsUUFBUWd4SSxrQkFBbUIsS0FFekNockksT0FBUyxRQUFVLFFBRXBCd2dCLEVBQUl4Z0IsT0FBUyxHQUFNLE1BQ1osV0FFUHdnQixFQUdULFNBQVMwcUgsV0FBWTFxSCxVQUNmQSxFQUFJODRCLEtBQWE5NEIsRUFBSTg0QixPQUNsQjk0QixFQUFJeG1CLFFBQVEsYUFBYyxJQUduQyxTQUFTMnRJLE1BQU9qbEksVUFDVkEsRUFBSSxHQUFXLElBQU1BLEVBQUVoRyxTQUFTLElBQzdCZ0csRUFBRWhHLFNBQVMsSUFHcEIsU0FBUzBuSSxZQUFhbGpJLEVBQVFrc0csT0FFeEJtNUIsSUFESW41QixHQUFTbW1CLEVBQUFBLFVBRWJ2ekgsRUFBU2tCLEVBQU9sQixPQUNoQm1ySSxFQUFnQixLQUNoQnZELEtBRUt2cUgsRUFBSSxFQUFHQSxFQUFJcmQsSUFBVXFkLEVBQUcsT0FDbkJuYyxFQUFPK1UsV0FBV29ILElBR2QsT0FBVWtwSCxFQUFZLE1BQVEsS0FFdkM0RSxFQUFlLElBRWQ1RSxFQUFZLE1BQVEsRUFFakJuNUIsR0FBUyxJQUFNLEtBQVMvbUcsS0FBSyxJQUFNLElBQU0sY0FFekMsR0FBSWdYLEVBQUksSUFBTXJkLEVBQVEsRUFFdEJvdEcsR0FBUyxJQUFNLEtBQVMvbUcsS0FBSyxJQUFNLElBQU0sZ0JBS2hDa2dJLGNBTWRBLEVBQVksTUFBUSxFQUNqQm41QixHQUFTLElBQU0sS0FBUy9tRyxLQUFLLElBQU0sSUFBTSxPQUM5QmtnSSxhQUtnRCxPQUFyRDRFLEVBQWdCLE9BQVUsR0FBSzVFLEVBQVksWUFDL0M0RSxJQUVKLzlCLEdBQVMsSUFBTSxLQUFTL21HLEtBQUssSUFBTSxJQUFNLFVBR2hDLEtBR1prZ0ksRUFBWSxJQUFNLEtBQ2ZuNUIsR0FBUyxHQUFLLFVBQ2IvbUcsS0FBS2tnSSxRQUNOLEdBQUlBLEVBQVksS0FBTyxLQUN2Qm41QixHQUFTLEdBQUssVUFDYi9tRyxLQUNKa2dJLEdBQWEsRUFBTSxJQUNQLEdBQVpBLEVBQW1CLFVBRWhCLEdBQUlBLEVBQVksTUFBUyxLQUN6Qm41QixHQUFTLEdBQUssVUFDYi9tRyxLQUNKa2dJLEdBQWEsR0FBTSxJQUNuQkEsR0FBYSxFQUFNLEdBQU8sSUFDZCxHQUFaQSxFQUFtQixTQUVoQixDQUFBLEtBQUlBLEVBQVksZUFTZixJQUFJNytILE1BQU0sMEJBUlgwbEcsR0FBUyxHQUFLLFVBQ2IvbUcsS0FDSmtnSSxHQUFhLEdBQU8sSUFDcEJBLEdBQWEsR0FBTSxHQUFPLElBQzFCQSxHQUFhLEVBQU0sR0FBTyxJQUNkLEdBQVpBLEVBQW1CLGFBT2xCcUIsRUFHVCxTQUFTaEMsYUFBY3BsSCxXQUNqQjRxSCxLQUNLL3RILEVBQUksRUFBR0EsRUFBSW1ELEVBQUl4Z0IsU0FBVXFkLElBRXRCaFgsS0FBeUIsSUFBcEJtYSxFQUFJdkssV0FBV29ILFdBRXpCK3RILEVBR1QsU0FBU3BGLGVBQWdCeGxILEVBQUs0c0YsV0FDeEI1ckYsRUFBR29vRCxFQUFJZ2tELEVBQ1B3ZCxLQUNLL3RILEVBQUksRUFBR0EsRUFBSW1ELEVBQUl4Z0IsV0FDakJvdEcsR0FBUyxHQUFLLEtBRGEvdkYsT0FHNUJtRCxFQUFJdkssV0FBV29ILEtBQ1QsSUFDTG1FLEVBQUksTUFDQ25iLEtBQUt1bkgsS0FDTHZuSCxLQUFLdWpFLFVBR1Z3aEUsRUFJVCxTQUFTL0csY0FBZTdqSCxVQUNmeWxILFlBQW1CZ0YsWUFBWXpxSCxJQUd4QyxTQUFTa2xILFdBQVk1NUcsRUFBS3UvRyxFQUFLMWdJLEVBQVEzSyxPQUNoQyxJQUFJcWQsRUFBSSxFQUFHQSxFQUFJcmQsS0FDYnFkLEVBQUkxUyxHQUFVMGdJLEVBQUlyckksUUFBWXFkLEdBQUt5TyxFQUFJOXJCLFVBRGhCcWQsSUFFeEJBLEVBQUkxUyxHQUFVbWhCLEVBQUl6TyxVQUVqQkEsRUFHVCxTQUFTMm1ILE1BQU9qa0gsVUFDUEEsR0FBUUEsRUFPakIsU0FBZ0JwYyxXQUFTK2IsVUFDVCxNQUFQQSxNQUFrQkEsRUFBSXVrSCxXQUFhcUgsYUFBYTVySCxJQUFRNnJILGFBQWE3ckgsSUFHOUUsU0FBUzRySCxhQUFjNXJILFdBQ1pBLEVBQUlsWixhQUFtRCxtQkFBN0JrWixFQUFJbFosWUFBWTdDLFVBQTJCK2IsRUFBSWxaLFlBQVk3QyxTQUFTK2IsR0FJekcsU0FBUzZySCxhQUFjN3JILFNBQ2EsbUJBQXBCQSxFQUFJOHBILGFBQW1ELG1CQUFkOXBILEVBQUk5VSxPQUF3QjBnSSxhQUFhNXJILEVBQUk5VSxNQUFNLEVBQUcsSUM1d0QvRyxTQUFTNGdJLHlCQUNDLElBQUk5akksTUFBTSxtQ0FFcEIsU0FBUytqSSw0QkFDQyxJQUFJL2pJLE1BQU0scUNBRXBCLElBQUlna0ksaUJBQW1CRixpQkFDbkJHLG1CQUFxQkYsb0JBUXpCLFNBQVNHLFdBQVcvZ0MsTUFDWjZnQyxtQkFBcUJqcUYsa0JBRWRBLFdBQVdvcEQsRUFBSyxPQUd0QjZnQyxtQkFBcUJGLG1CQUFxQkUsbUJBQXFCanFGLG1DQUM3Q0EsV0FDWkEsV0FBV29wRCxFQUFLLGNBSWhCNmdDLGlCQUFpQjdnQyxFQUFLLEdBQy9CLE1BQU16dEcsY0FHT3N1SSxpQkFBaUJ6dUksS0FBSyxLQUFNNHRHLEVBQUssR0FDMUMsTUFBTXp0RyxVQUVHc3VJLGlCQUFpQnp1SSxLQUFLN0QsS0FBTXl4RyxFQUFLLEtBTXBELFNBQVNnaEMsZ0JBQWdCQyxNQUNqQkgscUJBQXVCSSxvQkFFaEJBLGFBQWFELE9BR25CSCxxQkFBdUJGLHNCQUF3QkUscUJBQXVCSSx1Q0FDbERBLGFBQ2RBLGFBQWFELGNBSWJILG1CQUFtQkcsR0FDNUIsTUFBTzF1SSxjQUdNdXVJLG1CQUFtQjF1SSxLQUFLLEtBQU02dUksR0FDdkMsTUFBTzF1SSxVQUdFdXVJLG1CQUFtQjF1SSxLQUFLN0QsS0FBTTB5SSxLQXBEaEIsbUJBQXRCL3ZJLFNBQU8wbEQsOEJBQ0tBLFlBRVksbUJBQXhCMWxELFNBQU9nd0ksa0NBQ09BLGNBdUR6QixJQUVJQyxhQUZBbG1HLFdBQ0FtbUcsVUFBVyxFQUVYQyxZQUFjLEVBRWxCLFNBQVNDLGtCQUNBRixVQUFhRCx5QkFHUCxFQUNQQSxhQUFhaHNJLGVBQ0xnc0ksYUFBYWx3SCxPQUFPZ3FCLHFCQUVkLEVBRWRBLFFBQU05bEMsc0JBS2QsU0FBU29zSSxpQkFDREgsY0FHQTdwRyxFQUFVd3BHLFdBQVdPLDJCQUNkLFVBRVAvNkcsRUFBTTBVLFFBQU05bEMsT0FDVm94QixHQUFLLGtCQUNRMFUscUJBRU5vbUcsV0FBYTk2RyxHQUNkNDZHLDJCQUNhRSxZQUFZemxHLGtCQUduQixJQUNSWCxRQUFNOWxDLG9CQUVELGVBQ0osa0JBQ0tvaUMsSUFFcEIsU0FBZ0I3TyxXQUFTczNFLG1CQUNqQnhxRyxFQUFPLElBQUlTLE1BQU1GLFVBQVVaLE9BQVMsTUFDcENZLFVBQVVaLE9BQVMsTUFDZCxJQUFJcWQsRUFBSSxFQUFHQSxFQUFJemMsVUFBVVosT0FBUXFkLE1BQzdCQSxFQUFJLEdBQUt6YyxFQUFVeWMsV0FHMUJoWCxLQUFLLElBQUlnbUksS0FBS3hoQyxFQUFLeHFHLElBQ0osSUFBakJ5bEMsUUFBTTlsQyxRQUFpQmlzSSxxQkFDWkcsWUFJbkIsU0FBU0MsS0FBS3hoQyxFQUFLaHFHLFFBQ1ZncUcsSUFBTUEsT0FDTmhxRyxNQUFRQSxFQUVqQndySSxLQUFLN3ZJLFVBQVVpcUMsSUFBTSxnQkFDWm9rRSxJQUFJMXFHLE1BQU0sS0FBTS9HLEtBQUt5SCxRQUU5QixJQUFXbXdGLFFBQVEsVUFDUmpzRSxXQUFXLFVBQ1h1bkgsV0FBVSxFQUNWcm1ILE9BQ0FzbUgsUUFDQTcrRixRQUFVLEdBQ1Y4K0YsWUFDQUMsV0FDQTl6SCxZQUVYLFNBQVNILFVBRVQsSUFBV3NkLEtBQUt0ZCxPQUNMazBILFlBQWNsMEgsT0FDZHNMLE9BQU90TCxPQUNQbTBILElBQU1uMEgsT0FDTm8wSCxlQUFpQnAwSCxPQUNqQnEwSCxtQkFBcUJyMEgsT0FDckJzdUIsS0FBT3R1QixPQUVsQixTQUFnQjlTLFFBQVFqTSxTQUNkLElBQUlpTyxNQUFNLG9DQUdwQixTQUFnQm9sSSxZQUFnQixJQUNoQyxTQUFnQkMsTUFBTzN4SSxTQUNiLElBQUlzTSxNQUFNLDJDQUVKc2xJLGVBQWlCLEVBR2pDLElBQUlwNUcsY0FBYzczQixTQUFPNjNCLGdCQUNyQnE1RyxlQUNGcjVHLGNBQVlyeUIsS0FDWnF5QixjQUFZczVHLFFBQ1p0NUcsY0FBWXU1RyxPQUNadjVHLGNBQVl3NUcsTUFDWng1RyxjQUFZeTVHLFdBQ1osa0JBQW9CLElBQUkvckksTUFBUW9pQixXQUlsQyxTQUFnQjRwSCxPQUFPQyxPQUNqQkMsRUFBNkMsS0FBakNQLGVBQWVod0ksS0FBSzIyQixlQUNoQ3dqRixFQUFVNzJHLEtBQUswZixNQUFNdXRILEdBQ3JCQyxFQUFjbHRJLEtBQUswZixNQUFPdXRILEVBQVUsRUFBRyxZQUN2Q0QsT0FDa0JBLEVBQWtCLE9BQ1ZBLEVBQWtCLElBQzlCLFdBRUMsT0FHWG4yQixFQUFRcTJCLEdBR2xCLElBQUl2d0QsVUFBWSxJQUFJNTdFLEtBQ3BCLFNBQWdCb3NJLGdCQUNJLElBQUlwc0ksS0FDRTQ3RSxXQUNYLElBR2YsSUNuTUl5d0QsaUJBYUE1ekgsc0JEdUxRd1osaUJBQ0h5OUQsZ0JBQ0VzN0MsY0FDSnJtSCxTQUNDc21ILGFBQ0c3K0YsaUJBQ0M4K0YsWUFDTjEyRyxpQkFDUzQyRyxpQkFDUDVvSCxXQUNENm9ILG1CQUNXQyxrQ0FDSUMsd0JBQ2QvbEcsYUFDR3BoQyxZQUNKb25JLFVBQ0VDLFlBQ0FDLGFBQ0NNLGdCQUNFdm9ILG1CQUNEMG5ILGVBQ0Q5ekgsZ0JBQ0ErMEgsUUM1TkNFLFNBQVc1dkksYUFBV2pDLFNBQU84eEksUUFBVTd2SSxhQUFXakMsU0FBTyt4SSxnQkFHcEUsU0FBZ0JDLDBCQUNrQixJQUFyQkosd0JBQ0ZBLHlCQUdINXhJLFNBQU9peUksTUFBTSxJQUFJcDZILFlBQVksdUJBQ2QsRUFDbkIsTUFBT3hXLHFCQUNZLFNBRWR1d0ksaUJBSVQsU0FBU00saUJBQWlCdHdJLEdBQ25Cb2MsVUFDRyxJQUFJaGUsU0FBT2llLGdCQUdiUSxLQUFLLE1BQU96ZSxTQUFPbEMsU0FBU2dnRixLQUFPLElBQU0sc0NBR3pDcTBELGFBQWV2d0ksRUFDWm9jLElBQUltMEgsZUFBaUJ2d0ksRUFDNUIsTUFBT1AsVUFDQSxHQU9YLGVBQUkrd0kscUJBQWdELElBQXZCcHlJLFNBQU82WCxZQUNoQ3c2SCxVQUFZRCxpQkFBbUJud0ksYUFBV2pDLFNBQU82WCxZQUFZcFgsVUFBVW9PLE9BRWhFeWpJLFlBQWNGLGlCQUFtQkYsaUJBQWlCLGVBR2xESyxVQUFZVixVQUFZUSxXQUFhSCxpQkFBaUIsYUFDdERNLHVCQUF5QlgsVUFBWU8saUJBQzlDRixpQkFBaUIsMkJBQ1JPLGlCQUFtQnh3SSxhQUFXK2IsSUFBSXkwSCxrQkFDbENDLFFBQVV6d0ksYUFBV2pDLFNBQU8yeUksU0FFdkMsU0FBUzF3SSxhQUFXakIsU0FDTSxtQkFBVkEsRUFHaEJnZCxJQUFNLEtDM0JOLDBCQXRCNkIsbUJBQWxCN2QsT0FBT29ULE9BQ0wsU0FBa0JxL0gsRUFBTUMsS0FFNUJDLE9BQVNELElBQ1RweUksVUFBWU4sT0FBT29ULE9BQU9zL0gsRUFBVXB5SSw4QkFFOUJteUksY0FDSyxZQUNGLGdCQUNJLE1BS1QsU0FBa0JBLEVBQU1DLEtBQzVCQyxPQUFTRCxNQUNWRSxFQUFXLGVBQ050eUksVUFBWW95SSxFQUFVcHlJLFlBQzFCQSxVQUFZLElBQUlzeUksSUFDaEJ0eUksVUFBVWdLLFlBQWNtb0ksMkJDQ2pDLFNBQWdCemxDLE9BQU9yL0IsdUJBQ2hCa2xFLFNBQVNsbEUsR0FBSSxTQUNabWxFLEtBQ0szeEgsRUFBSSxFQUFHQSxFQUFJemMsVUFBVVosT0FBUXFkLE1BQzVCaFgsS0FBSzAvRyxRQUFRbmxILEVBQVV5YyxZQUUxQjJ4SCxFQUFRbDBILEtBQUssS0FHbEJ1QyxFQUFJLFVBQ0poZCxFQUFPTyxVQUNQd3dCLEVBQU0vd0IsRUFBS0wsT0FDWHdnQixFQUFNcGEsT0FBT3lqRSxHQUFHN3ZFLFFBQVFpMUksYUFBYyxTQUFTOXJFLE1BQ3ZDLE9BQU5BLFFBQW1CLE9BQ25COWxELEdBQUsrVCxTQUFZK3hDLFNBQ2JBLE9BQ0QsWUFBYS84RCxPQUFPL0YsRUFBS2dkLFVBQ3pCLFlBQWFzVSxPQUFPdHhCLEVBQUtnZCxVQUN6QixnQkFFTS9ELEtBQUs4RyxVQUFVL2YsRUFBS2dkLE1BQzNCLE1BQU92VCxTQUNBLDRCQUdGcTVELEtBR0pBLEVBQUk5aUUsRUFBS2dkLEdBQUlBLEVBQUkrVCxFQUFLK3hDLEVBQUk5aUUsSUFBT2dkLEdBQ3BDNnhILE9BQU8vckUsS0FBT3psRSxXQUFTeWxFLE1BQ2xCLElBQU1BLEtBRU4sSUFBTTRpRCxRQUFRNWlELFVBR2xCM2lELEVBT1QsU0FBZ0I0ckYsVUFBVS9xRixFQUFJNkYsTUFFeEI0aEYsWUFBWS9zRyxTQUFPdUosZ0JBQ2Qsa0JBQ0U4bUcsVUFBVS9xRixFQUFJNkYsR0FBSy9tQixNQUFNL0csS0FBTXdILGdCQUlaLElBQTFCMEUsUUFBUTZwSSxxQkFDSDl0SCxNQUdMNHZDLEdBQVMsd0JBRU5BLEVBQVEsSUFDUDNyRCxRQUFROHBJLHVCQUNKLElBQUkxbkksTUFBTXdmLEdBQ1A1aEIsUUFBUStwSSx5QkFDVGpvSCxNQUFNRixXQUVONXJCLE1BQU00ckIsTUFFUCxTQUVKN0YsRUFBR2xoQixNQUFNL0csS0FBTXdILFlBTzFCLElBQ0kwdUksYUM5RkFDLE9ENkZBQyxVQUVKLFNBQWdCQyxTQUFTL2lJLE1BQ25CbzhGLFlBQVl3bUMsNkJBQ0NocUksUUFBUTJnQixJQUFJeXBILFlBQWMsTUFDckNoakksRUFBSStVLGVBQ0wrdEgsT0FBTzlpSSxNQUNOLElBQUl4UyxPQUFPLE1BQVF3UyxFQUFNLE1BQU8sS0FBSzNOLEtBQUt1d0ksY0FBZSxRQUVwRDVpSSxHQUFPLGVBQ1J3YSxFQUFNZ2lGLE9BQU8vb0csTUFBTSxLQUFNUyxtQkFDckJ0RixNQUFNLFlBQWFvUixFQUhuQixFQUc2QndhLGdCQUdoQ3hhLEdBQU8sb0JBR1g4aUksT0FBTzlpSSxHQVloQixTQUFnQnE1RyxRQUFRcm1HLEVBQUtxRyxPQUV2QmhFLG1CQUVPNHRILHVCQUdQL3VJLFVBQVVaLFFBQVUsTUFBTzR2SSxNQUFRaHZJLFVBQVUsSUFDN0NBLFVBQVVaLFFBQVUsTUFBTzZ2SSxPQUFTanZJLFVBQVUsSUFDOUM4d0IsWUFBVTNMLEtBRVIrcEgsV0FBYS9wSCxFQUNSQSxXQUVEaEUsRUFBS2dFLEdBR1graUYsWUFBWS9tRixFQUFJK3RILGdCQUFpQkEsWUFBYSxHQUM5Q2huQyxZQUFZL21GLEVBQUk2dEgsV0FBWUEsTUFBUSxHQUNwQzltQyxZQUFZL21GLEVBQUk4dEgsWUFBYUEsUUFBUyxHQUN0Qy9tQyxZQUFZL21GLEVBQUlndUgsbUJBQW9CQSxlQUFnQixHQUNwRGh1SCxFQUFJOHRILFdBQVlHLFFBQVVDLGtCQUN2QkMsWUFBWW51SCxFQUFLckMsRUFBS3FDLEVBQUk2dEgsT0FrQ25DLFNBQVNLLGlCQUFpQnp2SCxFQUFLMnZILE9BQ3pCaHdHLEVBQVE0bEYsUUFBUTNqRSxPQUFPK3RGLFVBRXZCaHdHLEVBQ0ssS0FBWTRsRixRQUFROHBCLE9BQU8xdkcsR0FBTyxHQUFLLElBQU0zZixFQUM3QyxLQUFZdWxHLFFBQVE4cEIsT0FBTzF2RyxHQUFPLEdBQUssSUFFdkMzZixFQUtYLFNBQVNtdkgsZUFBZW52SCxFQUFLMnZILFVBQ3BCM3ZILEVBSVQsU0FBUzR2SCxZQUFZdnZJLE9BQ2Y0YyxjQUVFL1IsUUFBUSxTQUFTcVUsRUFBS2luRSxLQUNyQmpuRSxJQUFPLElBR1B0QyxFQUlULFNBQVN5eUgsWUFBWW51SCxFQUFLaGxCLEVBQU9zekksTUFHM0J0dUgsRUFBSWd1SCxlQUNKaHpJLEdBQ0FpQixhQUFXakIsRUFBTWdwSCxZQUVYQSxVQUFZQSxXQUVoQmhwSCxFQUFNeUosYUFBZXpKLEVBQU15SixZQUFZaEssWUFBY08sR0FBUSxLQUM3RHdsQixFQUFNeGxCLEVBQU1ncEgsUUFBUXNxQixFQUFjdHVILFVBQ2pDZ3RILFNBQVN4c0gsT0FDTjJ0SCxZQUFZbnVILEVBQUtRLEVBQUs4dEgsSUFFdkI5dEgsTUFJTCt0SCxFQUFZQyxnQkFBZ0J4dUgsRUFBS2hsQixNQUNqQ3V6SSxTQUNLQSxNQUlMbHlJLEVBQU9sQyxPQUFPa0MsS0FBS3JCLEdBQ25CeXpJLEVBQWNKLFlBQVloeUksTUFFMUIyakIsRUFBSSt0SCxlQUNDNXpJLE9BQU9xdkIsb0JBQW9CeHVCLElBS2hDd0ssVUFBUXhLLEtBQ0pxQixFQUFLOGlCLFFBQVEsWUFBYyxHQUFLOWlCLEVBQUs4aUIsUUFBUSxnQkFBa0IsVUFDOUR1dkgsWUFBWTF6SSxNQUlELElBQWhCcUIsRUFBSzRCLE9BQWMsSUFDakJoQyxhQUFXakIsR0FBUSxLQUNqQnRELEVBQU9zRCxFQUFNdEQsS0FBTyxLQUFPc0QsRUFBTXRELEtBQU8sVUFDckNzb0IsRUFBSWl1SCxRQUFRLFlBQWN2MkksRUFBTyxJQUFLLGNBRTNDb21CLFdBQVM5aUIsVUFDSmdsQixFQUFJaXVILFFBQVE5MUksT0FBT3NDLFVBQVVFLFNBQVNPLEtBQUtGLEdBQVEsYUFFeERnc0csT0FBT2hzRyxVQUNGZ2xCLEVBQUlpdUgsUUFBUTF1SSxLQUFLOUUsVUFBVUUsU0FBU08sS0FBS0YsR0FBUSxXQUV0RHdLLFVBQVF4SyxVQUNIMHpJLFlBQVkxekksT0ErQ25COHhHLEVBM0NBenRFLEVBQU8sR0FBSXZnQyxHQUFRLEVBQU82dkksR0FBVSxJQUFLLE1BR3pDenRJLFVBQVFsRyxRQUNGLEtBQ0UsSUFBSyxNQUliaUIsYUFBV2pCLFFBRU4sY0FEQ0EsRUFBTXRELEtBQU8sS0FBT3NELEVBQU10RCxLQUFPLElBQ2YsWUFJeEJvbUIsV0FBUzlpQixPQUNKLElBQU03QyxPQUFPc0MsVUFBVUUsU0FBU08sS0FBS0YsSUFJMUNnc0csT0FBT2hzRyxPQUNGLElBQU11RSxLQUFLOUUsVUFBVW0wSSxZQUFZMXpJLEtBQUtGLElBSTNDd0ssVUFBUXhLLE9BQ0gsSUFBTTB6SSxZQUFZMXpJLElBR1AsSUFBaEJxQixFQUFLNEIsUUFBa0JhLEdBQXlCLEdBQWhCOUQsRUFBTWlELE9BSXRDcXdJLEVBQWUsRUFDYnh3SCxXQUFTOWlCLEdBQ0pnbEIsRUFBSWl1SCxRQUFROTFJLE9BQU9zQyxVQUFVRSxTQUFTTyxLQUFLRixHQUFRLFVBRW5EZ2xCLEVBQUlpdUgsUUFBUSxXQUFZLGNBSS9CMytILEtBQUtoTCxLQUFLdEosS0FHVjhELEVBQ08rdkksWUFBWTd1SCxFQUFLaGxCLEVBQU9zekksRUFBY0csRUFBYXB5SSxHQUVuREEsRUFBS3lQLElBQUksU0FBUzNPLFVBQ2xCMnhJLGVBQWU5dUgsRUFBS2hsQixFQUFPc3pJLEVBQWNHLEVBQWF0eEksRUFBSzJCLE9BSWxFd1EsS0FBS25GLE1BRUY0a0kscUJBQXFCamlDLEVBQVF6dEUsRUFBTXN2RyxJQXhCakNBLEVBQU8sR0FBS3R2RyxFQUFPc3ZHLEVBQU8sR0E0QnJDLFNBQVNILGdCQUFnQnh1SCxFQUFLaGxCLE1BQ3hCK3JHLFlBQVkvckcsVUFDUGdsQixFQUFJaXVILFFBQVEsWUFBYSxnQkFDOUJqQixTQUFTaHlJLEdBQVEsS0FDZmcwSSxFQUFTLElBQU96M0gsS0FBSzhHLFVBQVVyakIsR0FBTy9DLFFBQVEsU0FBVSxJQUNsQkEsUUFBUSxLQUFNLE9BQ2RBLFFBQVEsT0FBUSxLQUFPLFdBQzFEK25CLEVBQUlpdUgsUUFBUWUsRUFBUSxpQkFFekJ4OEQsU0FBU3gzRSxHQUNKZ2xCLEVBQUlpdUgsUUFBUSxHQUFLanpJLEVBQU8sVUFDN0IyMEIsWUFBVTMwQixHQUNMZ2xCLEVBQUlpdUgsUUFBUSxHQUFLanpJLEVBQU8sV0FFN0JteUksT0FBT255SSxHQUNGZ2xCLEVBQUlpdUgsUUFBUSxPQUFRLGVBSS9CLFNBQVNTLFlBQVkxekksU0FDWixJQUFNMkssTUFBTWxMLFVBQVVFLFNBQVNPLEtBQUtGLEdBQVMsSUFJdEQsU0FBUzZ6SSxZQUFZN3VILEVBQUtobEIsRUFBT3N6SSxFQUFjRyxFQUFhcHlJLFdBQ3REeXdHLEtBQ0t4eEYsRUFBSSxFQUFHNkUsRUFBSW5sQixFQUFNaUQsT0FBUXFkLEVBQUk2RSxJQUFLN0UsRUFDckN6aUIsa0JBQWVtQyxFQUFPcUosT0FBT2lYLE1BQ3hCaFgsS0FBS3dxSSxlQUFlOXVILEVBQUtobEIsRUFBT3N6SSxFQUFjRyxFQUNqRHBxSSxPQUFPaVgsSUFBSSxNQUVSaFgsS0FBSyxhQUdYcUYsUUFBUSxTQUFTeE0sR0FDZkEsRUFBSTFFLE1BQU0sWUFDTjZMLEtBQUt3cUksZUFBZTl1SCxFQUFLaGxCLEVBQU9zekksRUFBY0csRUFDakR0eEksR0FBSyxNQUdOMnZHLEVBSVQsU0FBU2dpQyxlQUFlOXVILEVBQUtobEIsRUFBT3N6SSxFQUFjRyxFQUFhdHhJLEVBQUsyQixPQUM5RHBILEVBQU0rbUIsRUFBS3d3SCxRQUNSOTBJLE9BQU9xd0IseUJBQXlCeHZCLEVBQU9tQyxLQUFVbkMsTUFBT0EsRUFBTW1DLEtBQzVENE4sTUFDSGtrSSxFQUFLdGtJLElBQ0RxVixFQUFJaXVILFFBQVEsa0JBQW1CLFdBRS9CanVILEVBQUlpdUgsUUFBUSxXQUFZLFdBRzVCZ0IsRUFBS3RrSSxRQUNEcVYsRUFBSWl1SCxRQUFRLFdBQVksWUFHN0JwMUksa0JBQWU0MUksRUFBYXR4SSxPQUN4QixJQUFNQSxFQUFNLEtBRWhCc2hCLElBQ0N1QixFQUFJMVEsS0FBSzZQLFFBQVE4dkgsRUFBS2owSSxPQUFTLEtBQzdCbXlJLE9BQU9tQixHQUNISCxZQUFZbnVILEVBQUtpdkgsRUFBS2owSSxNQUFPLE1BRTdCbXpJLFlBQVludUgsRUFBS2l2SCxFQUFLajBJLE1BQU9zekksRUFBZSxJQUU1Q252SCxRQUFRLE9BQVMsTUFDbkJyZ0IsRUFDSTJmLEVBQUlHLE1BQU0sTUFBTTlTLElBQUksU0FBUzR4RSxTQUMxQixLQUFPQSxJQUNiM2tFLEtBQUssTUFBTVEsT0FBTyxHQUVmLEtBQU9rRixFQUFJRyxNQUFNLE1BQU05UyxJQUFJLFNBQVM0eEUsU0FDakMsTUFBUUEsSUFDZDNrRSxLQUFLLFNBSU5pSCxFQUFJaXVILFFBQVEsYUFBYyxZQUdoQ2xuQyxZQUFZcnZHLEdBQU8sSUFDakJvSCxHQUFTM0IsRUFBSTFFLE1BQU0sZ0JBQ2RnbUIsS0FFRmxILEtBQUs4RyxVQUFVLEdBQUtsaEIsSUFDbEIxRSxNQUFNLG1DQUNOZixFQUFLNmhCLE9BQU8sRUFBRzdoQixFQUFLdUcsT0FBUyxLQUM3QitoQixFQUFJaXVILFFBQVF2MkksRUFBTSxZQUVsQkEsRUFBS08sUUFBUSxLQUFNLE9BQ2RBLFFBQVEsT0FBUSxLQUNoQkEsUUFBUSxXQUFZLE9BQ3pCK25CLEVBQUlpdUgsUUFBUXYySSxFQUFNLGtCQUl0QkEsRUFBTyxLQUFPK21CLEVBSXZCLFNBQVNzd0gscUJBQXFCamlDLEVBQVF6dEUsRUFBTXN2RyxVQUU3QjdoQyxFQUFPNXJGLE9BQU8sU0FBUzIxQixFQUFNM21CLFVBRXBDQSxFQUFJL1EsUUFBUSxNQUNUMDNCLEVBQU8zbUIsRUFBSWo0QixRQUFRLGtCQUFtQixJQUFJZ0csT0FBUyxHQUN6RCxHQUVVLEdBQ0owd0ksRUFBTyxJQUNHLEtBQVR0dkcsRUFBYyxHQUFLQSxFQUFPLE9BQzNCLElBQ0F5dEUsRUFBTy96RixLQUFLLFNBQ1osSUFDQTQxSCxFQUFPLEdBR1RBLEVBQU8sR0FBS3R2RyxFQUFPLElBQU15dEUsRUFBTy96RixLQUFLLE1BQVEsSUFBTTQxSCxFQUFPLEdBTW5FLFNBQWdCenRJLFVBQVFndUksVUFDZm53SSxNQUFNbUMsUUFBUWd1SSxHQUd2QixTQUFnQnYvRyxZQUFVMXFCLFNBQ0Ysa0JBQVJBLEVBR2hCLFNBQWdCa29JLE9BQU9sb0ksVUFDTixPQUFSQSxFQUdULFNBQWdCa3FJLGtCQUFrQmxxSSxVQUNsQixNQUFQQSxFQUdULFNBQWdCdXRFLFNBQVN2dEUsU0FDRCxpQkFBUkEsRUFHaEIsU0FBZ0IrbkksU0FBUy9uSSxTQUNELGlCQUFSQSxFQU9oQixTQUFnQjhoRyxZQUFZOWhHLGVBQ1gsSUFBUkEsRUFHVCxTQUFnQjZZLFdBQVNzdEMsVUFDaEJ6dkQsV0FBU3l2RCxJQUE4QixvQkFBdkI3dkQsaUJBQWU2dkQsR0FHeEMsU0FBZ0J6dkQsV0FBU3NKLFNBQ0QscUJBQVJBLHNCQUFBQSxLQUE0QixPQUFSQSxFQUdwQyxTQUFnQitoRyxPQUFPanJGLFVBQ2RwZ0IsV0FBU29nQixJQUE0QixrQkFBdEJ4Z0IsaUJBQWV3Z0IsR0FHdkMsU0FBZ0J2VyxVQUFRbkssVUFDZk0sV0FBU04sS0FDVyxtQkFBdEJFLGlCQUFlRixJQUEyQkEsYUFBYXNLLE9BRzlELFNBQWdCMUosYUFBV2dKLFNBQ0gsbUJBQVJBLEVBZ0JoQixTQUFTMUosaUJBQWVrcEQsVUFDZnRxRCxPQUFPTSxVQUFVRSxTQUFTTyxLQUFLdXBELEdBNEN4QyxTQUFnQjJxRixRQUFRaDFELEVBQVEzckUsT0FFekJBLElBQVE5UyxXQUFTOFMsVUFBYTJyRSxVQUUvQi85RSxFQUFPbEMsT0FBT2tDLEtBQUtvUyxHQUNuQjZNLEVBQUlqZixFQUFLNEIsT0FDTnFkLE9BQ0VqZixFQUFLaWYsSUFBTTdNLEVBQUlwUyxFQUFLaWYsV0FFdEI4K0QsRUFHVCxTQUFTdmhGLGtCQUFlOGtCLEVBQUtvUSxVQUNwQjV6QixPQUFPTSxVQUFVNUIsZUFBZXFDLEtBQUt5aUIsRUFBS29RLEdDcGpCbkQsU0FBU3NoSCxpQkFHVCxTQUFTQyw0QkFDTXQ0SCxLQUFLOWIsS0FBSzdELE1BNkN6QixTQUFTazRJLGlCQUFpQnB0QixlQUNHcm5ILElBQXZCcW5ILEVBQUtxdEIsY0FDQUYsYUFBYUcsb0JBQ2Z0dEIsRUFBS3F0QixjQVlkLFNBQVNFLFNBQVNyL0csRUFBU3MvRyxFQUFNMTFJLE1BQzNCMDFJLElBQ016MEksS0FBS2pCLGdCQUVUbzFCLEVBQU1nQixFQUFRcHlCLE9BQ2Q0OEIsRUFBWSswRyxXQUFXdi9HLEVBQVNoQixHQUMzQi9ULEVBQUksRUFBR0EsRUFBSStULElBQU8vVCxJQUNmQSxHQUFHcGdCLEtBQUtqQixHQUd4QixTQUFTNDFJLFFBQVF4L0csRUFBU3MvRyxFQUFNMTFJLEVBQU02MUksTUFDaENILElBQ016MEksS0FBS2pCLEVBQU02MUksZ0JBRWZ6Z0gsRUFBTWdCLEVBQVFweUIsT0FDZDQ4QixFQUFZKzBHLFdBQVd2L0csRUFBU2hCLEdBQzNCL1QsRUFBSSxFQUFHQSxFQUFJK1QsSUFBTy9ULElBQ2ZBLEdBQUdwZ0IsS0FBS2pCLEVBQU02MUksR0FHOUIsU0FBU0MsUUFBUTEvRyxFQUFTcy9HLEVBQU0xMUksRUFBTTYxSSxFQUFNRSxNQUN0Q0wsSUFDTXowSSxLQUFLakIsRUFBTTYxSSxFQUFNRSxnQkFFckIzZ0gsRUFBTWdCLEVBQVFweUIsT0FDZDQ4QixFQUFZKzBHLFdBQVd2L0csRUFBU2hCLEdBQzNCL1QsRUFBSSxFQUFHQSxFQUFJK1QsSUFBTy9ULElBQ2ZBLEdBQUdwZ0IsS0FBS2pCLEVBQU02MUksRUFBTUUsR0FHcEMsU0FBU0MsVUFBVTUvRyxFQUFTcy9HLEVBQU0xMUksRUFBTTYxSSxFQUFNRSxFQUFNRSxNQUM5Q1AsSUFDTXowSSxLQUFLakIsRUFBTTYxSSxFQUFNRSxFQUFNRSxnQkFFM0I3Z0gsRUFBTWdCLEVBQVFweUIsT0FDZDQ4QixFQUFZKzBHLFdBQVd2L0csRUFBU2hCLEdBQzNCL1QsRUFBSSxFQUFHQSxFQUFJK1QsSUFBTy9ULElBQ2ZBLEdBQUdwZ0IsS0FBS2pCLEVBQU02MUksRUFBTUUsRUFBTUUsR0FJMUMsU0FBU0MsU0FBUzkvRyxFQUFTcy9HLEVBQU0xMUksRUFBTXFFLE1BQ2pDcXhJLElBQ012eEksTUFBTW5FLEVBQU1xRSxnQkFFaEIrd0IsRUFBTWdCLEVBQVFweUIsT0FDZDQ4QixFQUFZKzBHLFdBQVd2L0csRUFBU2hCLEdBQzNCL1QsRUFBSSxFQUFHQSxFQUFJK1QsSUFBTy9ULElBQ2ZBLEdBQUdsZCxNQUFNbkUsRUFBTXFFLEdBeUUvQixTQUFTOHhJLGFBQWEvM0gsRUFBUXpjLEVBQU1nbkYsRUFBVXl0RCxPQUN4Q2x2SCxFQUNBdzNCLEVBQ0E3ZixLQUVvQixtQkFBYjhwRCxRQUNILElBQUlsdkUsVUFBVSxnREFFYjJFLEVBQU9tb0IsVUFPVm1ZLEVBQU8yM0YsZ0JBQ0Z2ckcsS0FBSyxjQUFlbnBDLEVBQ2ZnbkYsRUFBU0EsU0FBV0EsRUFBU0EsU0FBV0EsS0FJM0N2cUUsRUFBT21vQixXQUVQbVksRUFBTy84QyxPQWJUeWMsRUFBT21vQixRQUFVLElBQUk2dUcsZ0JBQ3ZCa0IsYUFBZSxHQWVuQnozRyxNQUtxQixtQkFBYkEsSUFFRTZmLEVBQU8vOEMsR0FBUXkwSSxHQUFXenRELEVBQVU5cEQsSUFDVkEsRUFBVThwRCxHQUczQ3l0RCxJQUNPN21HLFFBQVFvNUMsS0FFUnQrRSxLQUFLcytFLElBS2I5cEQsRUFBU28yQixXQUNScWdGLGlCQUFpQmwzSCxLQUNaOEksRUFBSSxHQUFLMlgsRUFBUzc2QixPQUFTa2pCLEVBQUcsR0FDNUIrdEMsUUFBUyxNQUNkZ2MsRUFBSSxJQUFJdmxFLE1BQU0sK0NBQ0VtekIsRUFBUzc2QixPQUFTLElBQU1yQyxFQUFPLHVFQUVqRGxFLEtBQU8sZ0NBQ1A4NEksUUFBVW40SCxJQUNWemMsS0FBT0EsSUFDUDhELE1BQVFvNUIsRUFBUzc2QixtQkFDUGl0RSxXQTVCTHZ5QixFQUFPLzhDLEdBQVFnbkYsSUFDeEJ2cUUsRUFBT2s0SCxvQkFnQ0psNEgsRUFFVCxTQUFTbzRILFlBQVlwMUksR0FDSyxtQkFBakIycEIsUUFBUUwsS0FBc0JLLFFBQVFMLEtBQUt0cEIsR0FBSzJwQixRQUFRck0sSUFBSXRkLEdBYXJFLFNBQVNxMUksVUFBVXI0SCxFQUFRemMsRUFBTWduRixPQUMzQit0RCxHQUFRLFdBQ0h4cEUsTUFDQTBqRSxlQUFlanZJLEVBQU11ckUsR0FDdkJ3cEUsT0FDSyxJQUNDdnlJLE1BQU1pYSxFQUFReFoscUJBR3pCK2pGLFNBQVdBLEVBQ056YixFQTJKVCxTQUFTeXBFLGNBQWNoMUksT0FDakIrOEMsRUFBU3RoRCxLQUFLbXBDLFdBRWRtWSxFQUFRLEtBQ05rNEYsRUFBYWw0RixFQUFPLzhDLE1BRUUsbUJBQWZpMUksU0FDRixFQUNGLEdBQUlBLFNBQ0ZBLEVBQVc1eUksY0FJZixFQVFULFNBQVM2eUksVUFBVW55SCxFQUFNM2dCLE9BQ2xCLElBQUlzZCxFQUFJdGQsRUFBTzRlLEVBQUl0QixFQUFJLEVBQUczYSxFQUFJZ2UsRUFBSzFnQixPQUFRMmUsRUFBSWpjLEVBQUcyYSxHQUFLLEVBQUdzQixHQUFLLElBQzdEdEIsR0FBS3FELEVBQUsvQixLQUNaelMsTUFHUCxTQUFTeWxJLFdBQVczd0gsRUFBSzNELFdBQ25Cek8sRUFBTyxJQUFJOU4sTUFBTXVjLEdBQ2RBLE9BQ0FBLEdBQUsyRCxFQUFJM0QsVUFDVHpPLEVBR1QsU0FBU2trSSxnQkFBZ0I5eEgsV0FDbkJ1QixFQUFNLElBQUl6aEIsTUFBTWtnQixFQUFJaGhCLFFBQ2ZxZCxFQUFJLEVBQUdBLEVBQUlrRixFQUFJdmlCLFNBQVVxZCxJQUM1QkEsR0FBSzJELEVBQUkzRCxHQUFHc25FLFVBQVkzakUsRUFBSTNELFVBRTNCa0YsV0NyZEF3d0gsa0JBQ0Z2MEUsS0FBTyxVQUNQdzBFLEtBQU8sVUFDUGh6SSxPQUFTLEVGK0loQitsSCxRQUFROHBCLGNBQ0ksRUFBRyxZQUNELEVBQUcsZUFDQSxFQUFHLGFBQ0wsRUFBRyxXQUNMLEdBQUksVUFDTCxHQUFJLFdBQ0gsR0FBSSxVQUNMLEdBQUksVUFDSixHQUFJLFdBQ0gsR0FBSSxhQUNGLEdBQUksU0FDUixHQUFJLFlBQ0QsR0FBSSxLQUlsQjlwQixRQUFRM2pFLGdCQUNLLGNBQ0QsaUJBQ0MsbUJBQ0UsWUFDTCxjQUNFLGFBQ0YsaUJBRUUsT0N4S1pndkYsY0FBYzUwSSxVQUFZTixPQUFPb1QsT0FBTyxNQVV4QytoSSxhQUFhQSxhQUFlQSxhQUU1QkEsYUFBYTRCLGNBQWUsRUFFNUI1QixhQUFhNzBJLFVBQVUreUksWUFBUzF5SSxFQUNoQ3cwSSxhQUFhNzBJLFVBQVUrbEMsYUFBVTFsQyxFQUNqQ3cwSSxhQUFhNzBJLFVBQVUrMEksbUJBQWdCMTBJLEVBSXZDdzBJLGFBQWFHLG9CQUFzQixHQUVuQ0gsYUFBYXQ0SCxLQUFPLGdCQUNidzJILE9BQVMsS0FDVjhCLGFBQWE0QixnQkFFWDFELE9BQU85bkcsUUFBWXJ1QyxnQkFBZ0JtMkksT0FBTzJELGNBQ3ZDM0QsT0FBU0EsT0FBTzluRyxTQUlwQnJ1QyxLQUFLbXBDLFNBQVducEMsS0FBS21wQyxVQUFZcm1DLE9BQU9nTCxlQUFlOU4sTUFBTW1wQyxlQUMzREEsUUFBVSxJQUFJNnVHLG1CQUNka0IsYUFBZSxRQUdqQmYsY0FBZ0JuNEksS0FBS200SSxvQkFBaUIxMEksR0FLN0N3MEksYUFBYTcwSSxVQUFVMjJJLGdCQUFrQixTQUF5Qnp3SSxNQUMvQyxpQkFBTkEsR0FBa0JBLEVBQUksR0FBSzRkLE1BQU01ZCxTQUNwQyxJQUFJK1MsVUFBVSxzREFDakI4N0gsY0FBZ0I3dUksRUFDZHRKLE1BU1RpNEksYUFBYTcwSSxVQUFVNDJJLGdCQUFrQixrQkFDaEM5QixpQkFBaUJsNEksT0E0RDFCaTRJLGFBQWE3MEksVUFBVXNxQyxLQUFPLFNBQWNucEMsT0FDdEMwMUksRUFBSWpoSCxFQUFTaEIsRUFBSy93QixFQUFNZ2QsRUFBR3E5QixFQUFRNjBGLGNBRW5DK0QsRUFBb0IsVUFBVDMxSSxPQUVOdkUsS0FBS21wQyxVQUVEK3dHLEdBQTJCLE1BQWhCNTRGLEVBQU9wL0MsV0FDMUIsSUFBS2c0SSxTQUNELE9BRUFsNkksS0FBS20ySSxPQUdWK0QsRUFBUyxNQUNOMXlJLFVBQVUsSUFDWDJ1SSxFQU9HLENBQUEsR0FBSThELGFBQWMzckksWUFDakIyckksTUFHRnRoSCxFQUFNLElBQUlycUIsTUFBTSx5Q0FBMkMyckksRUFBSyxhQUNoRS9wSCxRQUFVK3BILEVBQ1J0aEgsU0FaRHNoSCxNQUNFLElBQUkzckksTUFBTSwwQ0FDZDZySSxjQUFnQm42SSxPQUNoQm0ySSxPQUFTQSxJQUNUaUUsY0FBZSxJQUNYMXNHLEtBQUssUUFBU3VzRyxJQVNoQixTQUdDMzRGLEVBQU8vOEMsV0FHUixNQUVMK3pJLEVBQTBCLG1CQUFadC9HLFdBQ1p4eEIsVUFBVVosYUFHVCxXQUNNb3lCLEVBQVNzL0csRUFBTXQ0SSxpQkFFckIsVUFDS2c1QixFQUFTcy9HLEVBQU10NEksS0FBTXdILFVBQVUsZUFFcEMsVUFDS3d4QixFQUFTcy9HLEVBQU10NEksS0FBTXdILFVBQVUsR0FBSUEsVUFBVSxlQUVsRCxZQUNPd3hCLEVBQVNzL0csRUFBTXQ0SSxLQUFNd0gsVUFBVSxHQUFJQSxVQUFVLEdBQUlBLFVBQVUsd0JBSTlELElBQUlFLE1BQU1zd0IsRUFBTSxHQUNsQi9ULEVBQUksRUFBR0EsRUFBSStULEVBQUsvVCxNQUNkQSxFQUFJLEdBQUt6YyxFQUFVeWMsWUFDakIrVSxFQUFTcy9HLEVBQU10NEksS0FBTWlILFVBTTNCLEdBcUVUZ3hJLGFBQWE3MEksVUFBVWt3SSxZQUFjLFNBQXFCL3VJLEVBQU1nbkYsVUFDdkR3dEQsYUFBYS80SSxLQUFNdUUsRUFBTWduRixHQUFVLElBRzVDMHNELGFBQWE3MEksVUFBVXM1QixHQUFLdTdHLGFBQWE3MEksVUFBVWt3SSxZQUVuRDJFLGFBQWE3MEksVUFBVWkzSSxnQkFDbkIsU0FBeUI5MUksRUFBTWduRixVQUN0Qnd0RCxhQUFhLzRJLEtBQU11RSxFQUFNZ25GLEdBQVUsSUFnQmhEMHNELGFBQWE3MEksVUFBVXNuQixLQUFPLFNBQWNubUIsRUFBTWduRixNQUN4QixtQkFBYkEsUUFDSCxJQUFJbHZFLFVBQVUsc0RBQ2pCcWdCLEdBQUduNEIsRUFBTTgwSSxVQUFVcjVJLEtBQU11RSxFQUFNZ25GLElBQzdCdnJGLE1BR1RpNEksYUFBYTcwSSxVQUFVazNJLG9CQUNuQixTQUE2Qi8xSSxFQUFNZ25GLE1BQ1QsbUJBQWJBLFFBQ0gsSUFBSWx2RSxVQUFVLHNEQUNqQmcrSCxnQkFBZ0I5MUksRUFBTTgwSSxVQUFVcjVJLEtBQU11RSxFQUFNZ25GLElBQzFDdnJGLE1BSWJpNEksYUFBYTcwSSxVQUFVb3dJLGVBQ25CLFNBQXdCanZJLEVBQU1nbkYsT0FDeEJqa0UsRUFBTWc2QixFQUFRbzBCLEVBQVV6eEQsRUFBR3MySCxLQUVQLG1CQUFiaHZELFFBQ0gsSUFBSWx2RSxVQUFVLGlEQUVicmMsS0FBS21wQyxnQkFFTG5wQyxZQUVGc2hELEVBQU8vOEMsV0FFTHZFLFFBRUxzbkIsSUFBU2lrRSxHQUFhamtFLEVBQUtpa0UsVUFBWWprRSxFQUFLaWtFLFdBQWFBLEVBQy9CLEtBQXRCdnJGLEtBQUtrNUksa0JBQ0ovdkcsUUFBVSxJQUFJNnVHLHNCQUVaMTJGLEVBQU8vOEMsR0FDVis4QyxFQUFPa3lGLHFCQUNKOWxHLEtBQUssaUJBQWtCbnBDLEVBQU0raUIsRUFBS2lrRSxVQUFZQSxTQUVsRCxHQUFvQixtQkFBVGprRSxFQUFxQixRQUN6QixFQUVQckQsRUFBSXFELEVBQUsxZ0IsT0FBUXFkLEtBQU0sTUFDdEJxRCxFQUFLckQsS0FBT3NuRSxHQUNYamtFLEVBQUtyRCxHQUFHc25FLFVBQVlqa0UsRUFBS3JELEdBQUdzbkUsV0FBYUEsRUFBVyxHQUNwQ2prRSxFQUFLckQsR0FBR3NuRSxXQUNoQnRuRSxXQUtYeXhELEVBQVcsU0FDTjExRSxRQUVXLElBQWhCc25CLEVBQUsxZ0IsT0FBYyxNQUNoQixRQUFLbkQsRUFDa0IsS0FBdEJ6RCxLQUFLazVJLHlCQUNKL3ZHLFFBQVUsSUFBSTZ1RyxjQUNaaDRJLFlBRUFzaEQsRUFBTy84QyxrQkFHTitpQixFQUFNb3VELEdBR2RwMEIsRUFBT2t5RixxQkFDSjlsRyxLQUFLLGlCQUFrQm5wQyxFQUFNZzJJLEdBQW9CaHZELFVBR25EdnJGLE1BR2JpNEksYUFBYTcwSSxVQUFVcXdJLG1CQUNuQixTQUE0Qmx2SSxPQUN0QmkvQixFQUFXOGQsU0FFTnRoRCxLQUFLbXBDLGdCQUVMbnBDLFNBR0pzaEQsRUFBT2t5RixzQkFDZSxJQUFyQmhzSSxVQUFVWixhQUNQdWlDLFFBQVUsSUFBSTZ1RyxtQkFDZGtCLGFBQWUsR0FDWDUzRixFQUFPLzhDLEtBQ1ksS0FBdEJ2RSxLQUFLazVJLGtCQUNKL3ZHLFFBQVUsSUFBSTZ1RyxxQkFFWjEyRixFQUFPLzhDLElBRVh2RSxRQUlnQixJQUFyQndILFVBQVVaLE9BQWMsU0FFVmQsRUFEWmQsRUFBT2xDLE9BQU9rQyxLQUFLczhDLEdBQ2RyOUIsRUFBSSxFQUFRQSxFQUFJamYsRUFBSzRCLFNBQVVxZCxFQUUxQixzQkFETmpmLEVBQUtpZixVQUVOd3ZILG1CQUFtQjN0SSxlQUVyQjJ0SSxtQkFBbUIsdUJBQ25CdHFHLFFBQVUsSUFBSTZ1RyxtQkFDZGtCLGFBQWUsRUFDYmw1SSxRQUtnQixxQkFGYnNoRCxFQUFPLzhDLFNBR1ppdkksZUFBZWp2SSxFQUFNaS9CLFFBQ3JCLEdBQUlBLFVBR0Znd0csZUFBZWp2SSxFQUFNaS9CLEVBQVVBLEVBQVU1OEIsT0FBUyxVQUNoRDQ4QixFQUFVLFdBR2R4akMsTUFHYmk0SSxhQUFhNzBJLFVBQVVvZ0MsVUFBWSxTQUFtQmovQixPQUNoRGkxSSxFQUVBbDRGLEVBQVN0aEQsS0FBS21wQyxlQUVibVksTUFHVUEsRUFBTy84QyxJQUdXLG1CQUFmaTFJLEdBQ1BBLEVBQVdqdUQsVUFBWWl1RCxHQUV4QkUsZ0JBQWdCRixPQU01QnZCLGFBQWFzQixjQUFnQixTQUFTSixFQUFTNTBJLFNBQ1IsbUJBQTFCNDBJLEVBQVFJLGNBQ1ZKLEVBQVFJLGNBQWNoMUksR0FFdEJnMUksY0FBYzExSSxLQUFLczFJLEVBQVM1MEksSUFJdkMwekksYUFBYTcwSSxVQUFVbTJJLGNBQWdCQSxjQWlCdkN0QixhQUFhNzBJLFVBQVVvM0ksV0FBYSxrQkFDM0J4NkksS0FBS2s1SSxhQUFlLEVBQUk5ckgsUUFBUUMsUUFBUXJ0QixLQUFLbXBDLGFDemJ0RHd3RyxXQUFXdjJJLFVBQVU2SixLQUFPLFNBQVVnWixPQUNoQzVTLEdBQVVsUixLQUFNOGpCLEVBQUdxWixLQUFNLE1BQ3pCdC9CLEtBQUs0RyxPQUFTLE9BQVFnekksS0FBS3Q2RyxLQUFPanNCLE9BQWdCK3hELEtBQU8veEQsT0FDeER1bUksS0FBT3ZtSSxJQUNWclQsS0FBSzRHLFFBR1QreUksV0FBV3YySSxVQUFVK3VDLFFBQVUsU0FBVWxzQixPQUNuQzVTLEdBQVVsUixLQUFNOGpCLEVBQUdxWixLQUFNdC9CLEtBQUtvbEUsTUFDZCxJQUFoQnBsRSxLQUFLNEcsY0FBbUJnekksS0FBT3ZtSSxRQUM5Qit4RCxLQUFPL3hELElBQ1ZyVCxLQUFLNEcsUUFHVCt5SSxXQUFXdjJJLFVBQVU0NkIsTUFBUSxjQUNQLElBQWhCaCtCLEtBQUs0RyxZQUNMdWlCLEVBQU1ucEIsS0FBS29sRSxLQUFLampFLFlBQ0EsSUFBaEJuQyxLQUFLNEcsWUFBbUJ3K0QsS0FBT3BsRSxLQUFLNDVJLEtBQU8sVUFBZXgwRSxLQUFPcGxFLEtBQUtvbEUsS0FBSzlsQyxPQUM3RXQvQixLQUFLNEcsT0FDQXVpQixJQUdUd3dILFdBQVd2MkksVUFBVWdRLE1BQVEsZ0JBQ3RCZ3lELEtBQU9wbEUsS0FBSzQ1SSxLQUFPLFVBQ25CaHpJLE9BQVMsR0FHaEIreUksV0FBV3YySSxVQUFVc2UsS0FBTyxTQUFVbmdCLE1BQ2hCLElBQWhCdkIsS0FBSzRHLGFBQXFCLFdBQzFCZ3pCLEVBQUk1NUIsS0FBS29sRSxLQUNUajhDLEVBQU0sR0FBS3lRLEVBQUV6M0IsS0FDVnkzQixFQUFJQSxFQUFFMEYsU0FDSi85QixFQUFJcTRCLEVBQUV6M0IsWUFDUGduQixHQUdWd3dILFdBQVd2MkksVUFBVXNmLE9BQVMsU0FBVXBaLE1BQ2xCLElBQWhCdEosS0FBSzRHLGNBQXFCeUQsU0FBT2lnSSxNQUFNLE1BQ3ZCLElBQWhCdHFJLEtBQUs0RyxjQUFxQjVHLEtBQUtvbEUsS0FBS2pqRSxhQUNwQ2duQixFQUFNOWUsU0FBTytLLFlBQVk5TCxJQUFNLEdBQy9Cc3dCLEVBQUk1NUIsS0FBS29sRSxLQUNUbmhELEVBQUksRUFDRDJWLEtBQ0h6M0IsS0FBS3FULEtBQUsyVCxFQUFLbEYsTUFDWjJWLEVBQUV6M0IsS0FBS3lFLFNBQ1JnekIsRUFBRTBGLFlBRURuVyxPQ25DTHN4SCxpQkFBbUJwd0ksU0FBT29nSSxZQUN6QixTQUFTRixVQUNDQSxHQUFZQSxFQUFTL2lILG1CQUN0QixNQUFPLElBQUssT0FBUSxJQUFLLFFBQVMsSUFBSyxRQUFTLElBQUssU0FBVSxJQUFLLFNBQVUsSUFBSyxPQUFRLElBQUssUUFBUyxJQUFLLFVBQVcsSUFBSyxXQUFZLElBQUssYUFBYyxpQkFDbEosSUFLekIsU0FBU2t6SCxlQUFlblEsTUFDbEJBLElBQWFrUSxpQkFBaUJsUSxTQUMxQixJQUFJajhILE1BQU0scUJBQXVCaThILEdBWTNDLFNBQWdCb1EsY0FBY3BRLGVBQ3ZCQSxVQUFZQSxHQUFZLFFBQVEvaUgsY0FBYzVtQixRQUFRLE9BQVEsbUJBQ3BEMnBJLEdBQ1B2cUksS0FBS3VxSSxjQUNOLFlBRUVxUSxjQUFnQixZQUVsQixXQUNBLGVBRUVBLGNBQWdCLE9BQ2hCQyxxQkFBdUJDLG9DQUV6QixjQUVFRixjQUFnQixPQUNoQkMscUJBQXVCRSwwREFHdkJ0UixNQUFRdVIsdUJBTVpDLFdBQWEsSUFBSTV3SSxTQUFPLFFBRXhCNndJLGFBQWUsT0FFZkMsV0FBYSxFQW9JcEIsU0FBU0gsaUJBQWlCMWxJLFVBQ2pCQSxFQUFPaFMsU0FBU3RELEtBQUt1cUksVUFHOUIsU0FBU3VRLDBCQUEwQnhsSSxRQUM1QjRsSSxhQUFlNWxJLEVBQU8xTyxPQUFTLE9BQy9CdTBJLFdBQWFuN0ksS0FBS2s3SSxhQUFlLEVBQUksRUFHNUMsU0FBU0gsMkJBQTJCemxJLFFBQzdCNGxJLGFBQWU1bEksRUFBTzFPLE9BQVMsT0FDL0J1MEksV0FBYW43SSxLQUFLazdJLGFBQWUsRUFBSSxFQWxJNUNQLGNBQWN2M0ksVUFBVXFtSSxNQUFRLFNBQVNuMEgsV0FDbkM4bEksRUFBVSxHQUVQcDdJLEtBQUttN0ksWUFBWSxLQUVsQkUsRUFBYS9sSSxFQUFPMU8sUUFBVTVHLEtBQUttN0ksV0FBYW43SSxLQUFLazdJLGFBQ3JEbDdJLEtBQUttN0ksV0FBYW43SSxLQUFLazdJLGFBQ3ZCNWxJLEVBQU8xTyxZQUdKNE8sS0FBS3hWLEtBQUtpN0ksV0FBWWo3SSxLQUFLazdJLGFBQWMsRUFBR0csUUFDOUNILGNBQWdCRyxFQUVqQnI3SSxLQUFLazdJLGFBQWVsN0ksS0FBS203SSxpQkFFcEIsUUFJQTdsSSxFQUFPOUQsTUFBTTZwSSxFQUFXL2xJLEVBQU8xTyxXQU1wQzAwSSxLQUhNdDdJLEtBQUtpN0ksV0FBV3pwSSxNQUFNLEVBQUd4UixLQUFLbTdJLFlBQVk3M0ksU0FBU3RELEtBQUt1cUksV0FHM0MxdEgsV0FBV3UrSCxFQUFReDBJLE9BQVMsS0FDbkMsT0FBVTAwSSxHQUFZLGdCQUtqQ0osYUFBZWw3SSxLQUFLbTdJLFdBQWEsRUFHaEIsSUFBbEI3bEksRUFBTzFPLGNBQ0Z3MEksYUFSRkQsWUFBY243SSxLQUFLNDZJLGdCQUNkLFFBYVRDLHFCQUFxQnZsSSxPQUV0QnFsQyxFQUFNcmxDLEVBQU8xTyxPQUNiNUcsS0FBS203SSxlQUVBM2xJLEtBQUt4VixLQUFLaTdJLFdBQVksRUFBRzNsSSxFQUFPMU8sT0FBUzVHLEtBQUtrN0ksYUFBY3ZnRyxNQUM1RDM2QyxLQUFLazdJLGtCQU1WSSxFQURBM2dHLE1BRk9ybEMsRUFBT2hTLFNBQVN0RCxLQUFLdXFJLFNBQVUsRUFBRzV2RixJQUUzQi96QyxPQUFTLE1BQ3ZCMDBJLEVBQVdGLEVBQVF2K0gsV0FBVzg5QixLQUVsQixPQUFVMmdHLEdBQVksTUFBUSxLQUN4QzdvSSxFQUFPelMsS0FBSzQ2SSwwQkFDWE8sWUFBYzFvSSxPQUNkeW9JLGNBQWdCem9JLE9BQ2hCd29JLFdBQVd6bEksS0FBS3hWLEtBQUtpN0ksV0FBWXhvSSxFQUFNLEVBQUdBLEtBQ3hDK0MsS0FBS3hWLEtBQUtpN0ksV0FBWSxFQUFHLEVBQUd4b0ksR0FDNUIyb0ksRUFBUXRtRixVQUFVLEVBQUduYSxVQUl2QnlnRyxHQU9UVCxjQUFjdjNJLFVBQVV5M0kscUJBQXVCLFNBQVN2bEksV0FFbEQyTyxFQUFLM08sRUFBTzFPLFFBQVUsRUFBSyxFQUFJME8sRUFBTzFPLE9BSW5DcWQsRUFBSSxFQUFHQSxJQUFLLEtBQ2JtRSxFQUFJOVMsRUFBT0EsRUFBTzFPLE9BQVNxZCxNQUt0QixHQUFMQSxHQUFVbUUsR0FBSyxHQUFLLEVBQU0sTUFDdkIreUgsV0FBYSxXQUtoQmwzSCxHQUFLLEdBQUttRSxHQUFLLEdBQUssR0FBTSxNQUN2Qit5SCxXQUFhLFdBS2hCbDNILEdBQUssR0FBS21FLEdBQUssR0FBSyxHQUFNLE1BQ3ZCK3lILFdBQWEsY0FJakJELGFBQWVqM0gsR0FHdEIwMkgsY0FBY3YzSSxVQUFVdTNDLElBQU0sU0FBU3JsQyxPQUNqQ2tVLEVBQU0sTUFDTmxVLEdBQVVBLEVBQU8xTyxXQUNiNUcsS0FBS3lwSSxNQUFNbjBILElBRWZ0VixLQUFLazdJLGFBQWMsS0FDakJLLEVBQUt2N0ksS0FBS2s3SSxhQUNWcFAsRUFBTTlySSxLQUFLaTdJLFdBQ1hPLEVBQU14N0ksS0FBS3VxSSxZQUNSdUIsRUFBSXQ2SCxNQUFNLEVBQUcrcEksR0FBSWo0SSxTQUFTazRJLFVBRzVCaHlILFlDek1BaXlILGNBQWdCQSxjQVF6QixJQUFJeDdJLE1BQVFvMkksU0FBUyxVQUdyQixTQUFTZ0UsZ0JBQWdCbEIsRUFBU3I0SCxFQUFPbUgsTUFHQSxtQkFBNUJreEgsRUFBUWtCLHVCQUNWbEIsRUFBUWtCLGdCQUFnQnY1SCxFQUFPbUgsR0FNakNreEgsRUFBUWh3RyxTQUFZZ3dHLEVBQVFod0csUUFBUXJvQixHQUVoQ3BaLE1BQU1tQyxRQUFRc3ZJLEVBQVFod0csUUFBUXJvQixNQUM3QnFvQixRQUFRcm9CLEdBQU9xeEIsUUFBUWxxQixLQUV2QmtoQixRQUFRcm9CLElBQVVtSCxFQUFJa3hILEVBQVFod0csUUFBUXJvQixNQUp0QzRiLEdBQUc1YixFQUFPbUgsR0FPeEIsU0FBU3N4SCxnQkFBZUosRUFBUzUwSSxVQUN4QjQwSSxFQUFRMzFHLFVBQVVqL0IsR0FBTXFDLE9BRWpDLFNBQVM2MEksY0FBY2xySSxFQUFTbXJJLEtBRXBCbnJJLFdBSUxvckksYUFBZXBySSxFQUFRb3JJLFdBRXhCRCxhQUFrQkUsY0FBYUQsV0FBYTM3SSxLQUFLMjdJLGNBQWdCcHJJLEVBQVFzckksd0JBSXpFQyxFQUFNdnJJLEVBQVF3ckksY0FDZEMsRUFBYWg4SSxLQUFLMjdJLFdBQWEsR0FBSyxXQUNuQ0ksY0FBZ0JELEdBQWUsSUFBUkEsRUFBWUEsRUFBTUUsT0FHekNELGdCQUFtQi83SSxLQUFLKzdJLG1CQUt4QnptSSxPQUFTLElBQUlxa0ksZ0JBQ2IveUksT0FBUyxPQUNUcTFJLE1BQVEsVUFDUkMsV0FBYSxPQUNiQyxRQUFVLFVBQ1Z2ekYsT0FBUSxPQUNSd3pGLFlBQWEsT0FDYkMsU0FBVSxPQU1WNXpHLE1BQU8sT0FJUDZ6RyxjQUFlLE9BQ2ZDLGlCQUFrQixPQUNsQkMsbUJBQW9CLE9BQ3BCQyxpQkFBa0IsT0FLbEJDLGdCQUFrQm5zSSxFQUFRbXNJLGlCQUFtQixZQUk3Q0MsUUFBUyxPQUdUQyxXQUFhLE9BR2JDLGFBQWMsT0FFZHZxRixRQUFVLFVBQ1ZpNEUsU0FBVyxLQUNaaDZILEVBQVFnNkgsZ0JBQ0xqNEUsUUFBVSxJQUFJcW9GLGNBQWNwcUksRUFBUWc2SCxlQUNwQ0EsU0FBV2g2SCxFQUFRZzZILFVBRzVCLFNBQ2dCdVMsU0FBU3ZzSSxRQUVqQnZRLGdCQUFnQjg4SSxpQkFBa0IsSUFBSUEsU0FBU3ZzSSxRQUVoRHdzSSxlQUFpQixJQUFJdEIsY0FBY2xySSxFQUFTdlEsV0FHNUNnOUksVUFBVyxFQUVaenNJLEdBQW1DLG1CQUFqQkEsRUFBUTA0SCxZQUEwQmdVLE1BQVExc0ksRUFBUTA0SCxtQkFFM0RwbEksS0FBSzdELE1BK0JwQixTQUFTazlJLGlCQUFpQnhCLEVBQVEzOEUsRUFBTytuRCxFQUFPeWpCLEVBQVU0UyxPQUNwRGxELEVBQUttRCxhQUFhcitFLEVBQU8rbkQsTUFDekJtekIsSUFDS3ZzRyxLQUFLLFFBQVN1c0csUUFDaEIsR0FBYyxPQUFWbnpCLElBQ0h1MUIsU0FBVSxhQUNMWCxFQUFRMzhFLFFBQ2QsR0FBSUEsRUFBTTQ4RSxZQUFjNzBCLEdBQVNBLEVBQU1sZ0gsT0FBUyxLQUNqRG00RCxFQUFNblcsUUFBVXUwRixFQUFZLEtBQzFCbjVJLEVBQUksSUFBSXNLLE1BQU0sNkJBQ1hvL0IsS0FBSyxRQUFTMXBDLFFBQ2hCLEdBQUkrNkQsRUFBTXE5RSxZQUFjZSxFQUFZLEtBQ3JDdDZHLEVBQUssSUFBSXYwQixNQUFNLHNDQUNaby9CLEtBQUssUUFBUzdLLE9BQ2hCLEtBQ0R3NkcsR0FDQXQrRSxFQUFNek0sU0FBWTZxRixHQUFlNVMsTUFDM0J4ckUsRUFBTXpNLFFBQVFtM0UsTUFBTTNpQixNQUNqQi9uRCxFQUFNNDhFLFlBQStCLElBQWpCNzBCLEVBQU1sZ0gsUUFHbEN1MkksTUFBa0JkLFNBQVUsR0FJNUJnQixJQUVDdCtFLEVBQU1vOUUsU0FBNEIsSUFBakJwOUUsRUFBTW40RCxTQUFpQm00RCxFQUFNdDJCLFFBQ3pDaUYsS0FBSyxPQUFRbzVFLEtBQ2JtaUIsS0FBSyxPQUdOcmlJLFFBQVVtNEQsRUFBTTQ4RSxXQUFhLEVBQUk3MEIsRUFBTWxnSCxPQUN6Q3UySSxJQUFrQjduSSxPQUFPNjhCLFFBQVEyMEUsS0FBa0J4eEcsT0FBT3JJLEtBQUs2NUcsR0FFL0QvbkQsRUFBTXU5RSwyQkFBMkJaLG1CQUkzQkEsRUFBUTM4RSxRQUVkbytFLE1BQ0pkLFNBQVUsVUFHWGlCLGFBQWF2K0UsR0FVdEIsU0FBU3UrRSxhQUFhditFLFVBQ1pBLEVBQU1uVyxRQUFVbVcsRUFBTXU5RSxjQUFnQnY5RSxFQUFNbjRELE9BQVNtNEQsRUFBTWc5RSxlQUFrQyxJQUFqQmg5RSxFQUFNbjRELFFBNUw1RitoRSxXQUFTbTBFLFNBQVU3RSxjQTRHbkI2RSxTQUFTMTVJLFVBQVU2SixLQUFPLFNBQVU2NUcsRUFBT3lqQixPQUNyQ3hyRSxFQUFRLytELEtBQUsrOEksc0JBRVpoK0UsRUFBTTQ4RSxZQUErQixpQkFBVjcwQixNQUNuQnlqQixHQUFZeHJFLEVBQU0yOUUsbUJBQ1ozOUUsRUFBTXdyRSxhQUNibGdJLFNBQU95cEIsS0FBS2d6RixFQUFPeWpCLEtBQ2hCLElBSVIyUyxpQkFBaUJsOUksS0FBTSsrRCxFQUFPK25ELEVBQU95akIsR0FBVSxJQUl4RHVTLFNBQVMxNUksVUFBVSt1QyxRQUFVLFNBQVUyMEUsVUFFOUJvMkIsaUJBQWlCbDlJLEtBRFpBLEtBQUsrOEksZUFDb0JqMkIsRUFBTyxJQUFJLElBR2xEZzJCLFNBQVMxNUksVUFBVW02SSxTQUFXLGtCQUNXLElBQWhDdjlJLEtBQUsrOEksZUFBZVosU0ErRDdCVyxTQUFTMTVJLFVBQVVvNkksWUFBYyxTQUFVaEMsZUFDcEN1QixlQUFlenFGLFFBQVUsSUFBSXFvRixjQUFjYSxRQUMzQ3VCLGVBQWV4UyxTQUFXaVIsRUFDeEJ4N0ksTUFJVCxJQUFJeTlJLFFBQVUsUUFDZCxTQUFTQyx3QkFBd0JwMEksVUFDM0JBLEdBQUttMEksVUFDSEEsZ0JBS0NuMEksSUFBTSxLQUNOQSxJQUFNLEtBQ05BLElBQU0sS0FDTkEsSUFBTSxLQUNOQSxJQUFNLFFBR05BLEVBS1QsU0FBU3EwSSxjQUFjcjBJLEVBQUd5MUQsVUFDcEJ6MUQsR0FBSyxHQUFzQixJQUFqQnkxRCxFQUFNbjRELFFBQWdCbTRELEVBQU1uVyxNQUFjLEVBQ3BEbVcsRUFBTTQ4RSxXQUFtQixFQUN6QnJ5SSxHQUFNQSxFQUVKeTFELEVBQU1vOUUsU0FBV3A5RSxFQUFNbjRELE9BQWVtNEQsRUFBTXpwRCxPQUFPOHZELEtBQUtqakUsS0FBS3lFLE9BQW1CbTRELEVBQU1uNEQsUUFHeEYwQyxFQUFJeTFELEVBQU1nOUUsa0JBQXFCQSxjQUFnQjJCLHdCQUF3QnAwSSxJQUN2RUEsR0FBS3kxRCxFQUFNbjRELE9BQWUwQyxFQUV6QnkxRCxFQUFNblcsTUFJSm1XLEVBQU1uNEQsVUFITDAxSSxjQUFlLEVBQ2QsSUEwR1gsU0FBU2MsYUFBYXIrRSxFQUFPK25ELE9BQ3ZCbXpCLEVBQUssWUFDSjJELFdBQWdCOTJCLElBQTJCLGlCQUFWQSxHQUFnQyxPQUFWQSxRQUE0QnJqSCxJQUFWcWpILEdBQXdCL25ELEVBQU00OEUsZUFDckcsSUFBSXQvSCxVQUFVLG9DQUVkNDlILEVBR1QsU0FBUzRELFdBQVduQyxFQUFRMzhFLE9BQ3RCQSxFQUFNblcsVUFDTm1XLEVBQU16TSxRQUFTLEtBQ2J3MEQsRUFBUS9uRCxFQUFNek0sUUFBUTNYLE1BQ3RCbXNFLEdBQVNBLEVBQU1sZ0gsV0FDWDBPLE9BQU9ySSxLQUFLNjVHLEtBQ1psZ0gsUUFBVW00RCxFQUFNNDhFLFdBQWEsRUFBSTcwQixFQUFNbGdILFVBRzNDZ2lELE9BQVEsZUFHRDh5RixJQU1mLFNBQVNvQyxhQUFhcEMsT0FDaEIzOEUsRUFBUTI4RSxFQUFPcUIsaUJBQ2JULGNBQWUsRUFDaEJ2OUUsRUFBTXc5RSx3QkFDSCxlQUFnQng5RSxFQUFNbzlFLFdBQ3RCSSxpQkFBa0IsRUFDcEJ4OUUsRUFBTXQyQixnQkFBZXMxRyxjQUFlckMsaUJBQTJCQSxJQUl2RSxTQUFTcUMsY0FBY3JDLFNBQ2YsbUJBQ0NodUcsS0FBSyxpQkFDUGd1RyxHQVNQLFNBQVNzQyxjQUFjdEMsRUFBUTM4RSxHQUN4QkEsRUFBTTg5RSxnQkFDSEEsYUFBYyxhQUNYb0IsZUFBZ0J2QyxFQUFRMzhFLElBSXJDLFNBQVNrL0UsZUFBZXZDLEVBQVEzOEUsV0FDMUIvbUMsRUFBTSttQyxFQUFNbjRELFFBQ1JtNEQsRUFBTXM5RSxVQUFZdDlFLEVBQU1vOUUsVUFBWXA5RSxFQUFNblcsT0FBU21XLEVBQU1uNEQsT0FBU200RCxFQUFNZzlFLHNCQUN4RSwwQkFDQzlTLEtBQUssR0FDUmp4RyxJQUFRK21DLEVBQU1uNEQsV0FFQ200RCxFQUFNbjRELFNBRXJCaTJJLGFBQWMsRUErSXRCLFNBQVNxQixZQUFZeHJILFVBQ1osZUFDRHFzQyxFQUFRcnNDLEVBQUlxcUgscUJBQ1YsY0FBZWgrRSxFQUFNNjlFLFlBQ3ZCNzlFLEVBQU02OUUsY0FBa0JBLGFBQ0gsSUFBckI3OUUsRUFBTTY5RSxZQUFvQmxxSCxFQUFJOFEsVUFBVSxRQUFRNThCLFdBQzVDdTFJLFNBQVUsT0FDWHpwSCxLQStFWCxTQUFTeXJILGlCQUFpQnY3SSxTQUNsQiw4QkFDRHFtSSxLQUFLLEdBZVosU0FBU21WLE9BQU8xQyxFQUFRMzhFLEdBQ2pCQSxFQUFNMDlFLG9CQUNIQSxpQkFBa0IsYUFDZjRCLFFBQVMzQyxFQUFRMzhFLElBSTlCLFNBQVNzL0UsUUFBUTNDLEVBQVEzOEUsR0FDbEJBLEVBQU1zOUUsZ0JBQ0gsbUJBQ0NwVCxLQUFLLE1BR1J3VCxpQkFBa0IsSUFDbEJHLFdBQWEsSUFDWmx2RyxLQUFLLGVBQ1BndUcsR0FDRDM4RSxFQUFNbzlFLFVBQVlwOUUsRUFBTXM5RSxXQUFnQnBULEtBQUssR0FhbkQsU0FBU3FWLEtBQUs1QyxPQUNSMzhFLEVBQVEyOEUsRUFBT3FCLHlCQUNiLE9BQVFoK0UsRUFBTW85RSxTQUNicDlFLEVBQU1vOUUsU0FBNkIsT0FBbEJULEVBQU96UyxVQXlFakMsU0FBU3NWLFNBQVNqMUksRUFBR3kxRCxVQUVFLElBQWpCQSxFQUFNbjRELE9BQXFCLE1BRzNCbTRELEVBQU00OEUsYUFBa0I1OEUsRUFBTXpwRCxPQUFPMG9CLFNBQWtCMTBCLEdBQUtBLEdBQUt5MUQsRUFBTW40RCxVQUVyRW00RCxFQUFNek0sUUFBZXlNLEVBQU16cEQsT0FBT29NLEtBQUssSUFBcUMsSUFBeEJxOUMsRUFBTXpwRCxPQUFPMU8sT0FBb0JtNEQsRUFBTXpwRCxPQUFPOHZELEtBQUtqakUsS0FBZ0I0OEQsRUFBTXpwRCxPQUFPb04sT0FBT3E4QyxFQUFNbjRELFVBQy9JME8sT0FBT2xDLFdBR1BvckksZ0JBQWdCbDFJLEVBQUd5MUQsRUFBTXpwRCxPQUFReXBELEVBQU16TSxTQUd4Q25wQyxPQVZIQSxFQWdCTixTQUFTcTFILGdCQUFnQmwxSSxFQUFHZ2UsRUFBTW0zSCxPQUM1QnQxSCxTQUNBN2YsRUFBSWdlLEVBQUs4OUMsS0FBS2pqRSxLQUFLeUUsVUFFZjBnQixFQUFLODlDLEtBQUtqakUsS0FBS3FQLE1BQU0sRUFBR2xJLEtBQ3pCODdELEtBQUtqakUsS0FBT21sQixFQUFLODlDLEtBQUtqakUsS0FBS3FQLE1BQU1sSSxNQUM3QkEsSUFBTWdlLEVBQUs4OUMsS0FBS2pqRSxLQUFLeUUsT0FFeEIwZ0IsRUFBSzBXLFFBR0x5Z0gsRUFBYUMscUJBQXFCcDFJLEVBQUdnZSxHQUFRcTNILGVBQWVyMUksRUFBR2dlLEdBRWhFNkIsRUFPVCxTQUFTdTFILHFCQUFxQnAxSSxFQUFHZ2UsT0FDM0JzUyxFQUFJdFMsRUFBSzg5QyxLQUNUaDlDLEVBQUksRUFDSmUsRUFBTXlRLEVBQUV6M0IsWUFDUGduQixFQUFJdmlCLE9BQ0ZnekIsRUFBSUEsRUFBRTBGLE1BQU0sS0FDYmxZLEVBQU13UyxFQUFFejNCLEtBQ1J5OEksRUFBS3QxSSxFQUFJOGQsRUFBSXhnQixPQUFTd2dCLEVBQUl4Z0IsT0FBUzBDLEtBQ25DczFJLElBQU94M0gsRUFBSXhnQixVQUFld2dCLEtBQWdCQSxFQUFJNVYsTUFBTSxFQUFHbEksR0FFakQsUUFETHMxSSxHQUNRLENBQ1BBLElBQU94M0gsRUFBSXhnQixVQUNYd2hCLEVBQ0V3UixFQUFFMEYsT0FBVzhsQyxLQUFPeHJDLEVBQUUwRixPQUFlOGxDLEtBQU85OUMsRUFBS3N5SCxLQUFPLFNBRXZEeDBFLEtBQU94ckMsSUFDVnozQixLQUFPaWxCLEVBQUk1VixNQUFNb3RJLFlBSXJCeDJILFdBRUN4aEIsUUFBVXdoQixFQUNSZSxFQU1ULFNBQVN3MUgsZUFBZXIxSSxFQUFHZ2UsT0FDckI2QixFQUFNOWUsU0FBTytLLFlBQVk5TCxHQUN6QnN3QixFQUFJdFMsRUFBSzg5QyxLQUNUaDlDLEVBQUksUUFDTmptQixLQUFLcVQsS0FBSzJULE1BQ1B5USxFQUFFejNCLEtBQUt5RSxPQUNMZ3pCLEVBQUlBLEVBQUUwRixNQUFNLEtBQ2J3c0csRUFBTWx5RyxFQUFFejNCLEtBQ1J5OEksRUFBS3QxSSxFQUFJd2lJLEVBQUlsbEksT0FBU2tsSSxFQUFJbGxJLE9BQVMwQyxPQUNuQ2tNLEtBQUsyVCxFQUFLQSxFQUFJdmlCLE9BQVMwQyxFQUFHLEVBQUdzMUksR0FFdkIsUUFETEEsR0FDUSxDQUNQQSxJQUFPOVMsRUFBSWxsSSxVQUNYd2hCLEVBQ0V3UixFQUFFMEYsT0FBVzhsQyxLQUFPeHJDLEVBQUUwRixPQUFlOGxDLEtBQU85OUMsRUFBS3N5SCxLQUFPLFNBRXZEeDBFLEtBQU94ckMsSUFDVnozQixLQUFPMnBJLEVBQUl0NkgsTUFBTW90SSxZQUlyQngySCxXQUVDeGhCLFFBQVV3aEIsRUFDUmUsRUFHVCxTQUFTMDFILFlBQVluRCxPQUNmMzhFLEVBQVEyOEUsRUFBT3FCLGtCQUlmaCtFLEVBQU1uNEQsT0FBUyxRQUFTLElBQUkwSCxNQUFNLDhDQUVqQ3l3RCxFQUFNcTlFLGVBQ0h4ekYsT0FBUSxhQUNMazJGLGNBQWUvL0UsRUFBTzI4RSxJQUluQyxTQUFTb0QsY0FBYy8vRSxFQUFPMjhFLEdBRXZCMzhFLEVBQU1xOUUsWUFBK0IsSUFBakJyOUUsRUFBTW40RCxXQUN2QncxSSxZQUFhLElBQ1pZLFVBQVcsSUFDWHR2RyxLQUFLLFFBSWhCLFNBQVNwN0IsVUFBUXlzSSxFQUFJdHVFLE9BQ2QsSUFBSXhzRCxFQUFJLEVBQUc2RSxFQUFJaTJILEVBQUduNEksT0FBUXFkLEVBQUk2RSxFQUFHN0UsTUFDbEM4NkgsRUFBRzk2SCxHQUFJQSxHQUliLFNBQVM2RCxRQUFRaTNILEVBQUloMUUsT0FDZCxJQUFJOWxELEVBQUksRUFBRzZFLEVBQUlpMkgsRUFBR240SSxPQUFRcWQsRUFBSTZFLEVBQUc3RSxPQUNoQzg2SCxFQUFHOTZILEtBQU84bEQsU0FBVTlsRCxTQUVsQixFQ2ozQlYsU0FBUys2SCxPQUVULFNBQVNDLFNBQVNuNEIsRUFBT3lqQixFQUFVbndHLFFBQzVCMHNGLE1BQVFBLE9BQ1J5akIsU0FBV0EsT0FDWHRrRyxTQUFXN0wsT0FDWGtGLEtBQU8sS0FHZCxTQUFTNC9HLGNBQWMzdUksRUFBU21ySSxVQUN2QjExSSxlQUFlaEcsS0FBTSxjQUNyQmd6RyxVQUFVLGtCQUNOaHpHLEtBQUttL0ksYUFDWCxrRkFFSzV1SSxXQUlMb3JJLGFBQWVwckksRUFBUW9ySSxXQUV4QkQsYUFBa0JFLGNBQWFELFdBQWEzN0ksS0FBSzI3SSxjQUFnQnBySSxFQUFRNnVJLHdCQUt6RXRELEVBQU12ckksRUFBUXdySSxjQUNkQyxFQUFhaDhJLEtBQUsyN0ksV0FBYSxHQUFLLFdBQ25DSSxjQUFnQkQsR0FBZSxJQUFSQSxFQUFZQSxFQUFNRSxPQUd6Q0QsZ0JBQW1CLzdJLEtBQUsrN0ksbUJBRXhCc0QsV0FBWSxPQUVaQyxRQUFTLE9BRVQxMkYsT0FBUSxPQUVSMjJGLFVBQVcsTUFLWkMsR0FBcUMsSUFBMUJqdkksRUFBUWt2SSxtQkFDbEJBLGVBQWlCRCxPQUtqQjlDLGdCQUFrQm5zSSxFQUFRbXNJLGlCQUFtQixZQUs3QzkxSSxPQUFTLE9BR1Q4NEksU0FBVSxPQUdWQyxPQUFTLE9BTVRsM0csTUFBTyxPQUtQbTNHLGtCQUFtQixPQUduQkMsUUFBVSxTQUFVNUYsV0FDZnlCLEVBQVF6QixTQUliNkYsUUFBVSxVQUdWQyxTQUFXLE9BRVhwNkMsZ0JBQWtCLFVBQ2xCcTZDLG9CQUFzQixVQUl0QkMsVUFBWSxPQUlaQyxhQUFjLE9BR2RDLGNBQWUsT0FHZkMscUJBQXVCLE9BSXZCQyxtQkFBcUIsSUFBSUMsY0FBY3RnSixlQWM5QnVnSixTQUFTaHdJLFFBSWpCdlEsZ0JBQWdCdWdKLFVBQWV2Z0osZ0JBQWdCNDdJLGVBQWdCLElBQUkyRSxTQUFTaHdJLFFBRTdFaXdJLGVBQWlCLElBQUl0QixjQUFjM3VJLEVBQVN2USxXQUc1Q3lnSixVQUFXLEVBRVpsd0ksSUFDMkIsbUJBQWxCQSxFQUFRazVILGFBQTJCaVgsT0FBU253SSxFQUFRazVILE9BRWpDLG1CQUFuQmw1SCxFQUFRb3dJLGNBQTRCQyxRQUFVcndJLEVBQVFvd0ksc0JBR3REOThJLEtBQUs3RCxNQVFwQixTQUFTNmdKLGNBQWNuRixFQUFRdGhILE9BQ3pCNi9HLEVBQUssSUFBSTNySSxNQUFNLHFCQUVaby9CLEtBQUssUUFBU3VzRyxjQUNaNy9HLEVBQUk2L0csR0FRZixTQUFTNkcsV0FBV3BGLEVBQVEzOEUsRUFBTytuRCxFQUFPMXNGLE9BQ3BDOUMsR0FBUSxFQUNSMmlILEdBQUssU0FJSyxPQUFWbnpCLElBQ0csSUFBSXpxRyxVQUFVLHVDQUNUaFMsU0FBT0UsU0FBU3U4RyxJQUEyQixpQkFBVkEsUUFBZ0NyakgsSUFBVnFqSCxHQUF3Qi9uRCxFQUFNNDhFLGVBQzFGLElBQUl0L0gsVUFBVSxvQ0FFakI0OUgsTUFDS3ZzRyxLQUFLLFFBQVN1c0csY0FDWjcvRyxFQUFJNi9HLE1BQ0wsR0FFSDNpSCxFQWdEVCxTQUFTeXBILFlBQVloaUYsRUFBTytuRCxFQUFPeWpCLFVBQzVCeHJFLEVBQU00OEUsYUFBc0MsSUFBeEI1OEUsRUFBTTBnRixlQUE0QyxpQkFBVjM0QixNQUN2RHo4RyxTQUFPeXBCLEtBQUtnekYsRUFBT3lqQixJQUV0QnpqQixFQU1ULFNBQVNrNkIsY0FBY3RGLEVBQVEzOEUsRUFBTytuRCxFQUFPeWpCLEVBQVVud0csS0FDN0MybUgsWUFBWWhpRixFQUFPK25ELEVBQU95akIsR0FFOUJsZ0ksU0FBT0UsU0FBU3U4RyxPQUFtQixjQUNuQzl1RixFQUFNK21DLEVBQU00OEUsV0FBYSxFQUFJNzBCLEVBQU1sZ0gsU0FFakNBLFFBQVVveEIsTUFFWjdPLEVBQU00MUMsRUFBTW40RCxPQUFTbTRELEVBQU1nOUUsaUJBRTFCNXlILE1BQVdrMkgsV0FBWSxHQUV4QnRnRixFQUFNMmdGLFNBQVczZ0YsRUFBTTRnRixPQUFRLEtBQzdCNXdILEVBQU9nd0MsRUFBTWloRixzQkFDWEEsb0JBQXNCLElBQUlmLFNBQVNuNEIsRUFBT3lqQixFQUFVbndHLEdBQ3REckwsSUFDR3VRLEtBQU95L0IsRUFBTWloRixzQkFFWnI2QyxnQkFBa0I1bUMsRUFBTWloRixzQkFFMUJJLHNCQUF3QixlQUV0QjFFLEVBQVEzOEUsR0FBTyxFQUFPL21DLEVBQUs4dUYsRUFBT3lqQixFQUFVbndHLFVBRy9DalIsRUFHVCxTQUFTODNILFFBQVF2RixFQUFRMzhFLEVBQU80aEYsRUFBUTNvSCxFQUFLOHVGLEVBQU95akIsRUFBVW53RyxLQUN0RDJsSCxTQUFXL25ILElBQ1g4bkgsUUFBVTFsSCxJQUNWc2xILFNBQVUsSUFDVmozRyxNQUFPLEVBQ1RrNEcsSUFBZUMsUUFBUTk1QixFQUFPL25ELEVBQU04Z0YsV0FBcUJhLE9BQU81NUIsRUFBT3lqQixFQUFVeHJFLEVBQU04Z0YsV0FDckZwM0csTUFBTyxFQUdmLFNBQVN5NEcsYUFBYXhGLEVBQVEzOEUsRUFBT3QyQixFQUFNd3hHLEVBQUk3L0csS0FDM0Mya0MsRUFBTWtoRixVQUNKeDNHLGFBQWVyTyxFQUFJNi9HLEtBQVlBLEtBRTVCdUcsZUFBZUwsY0FBZSxJQUM5Qnp5RyxLQUFLLFFBQVN1c0csR0FHdkIsU0FBU2tILG1CQUFtQnBpRixLQUNwQjJnRixTQUFVLElBQ1ZJLFFBQVUsT0FDVmw1SSxRQUFVbTRELEVBQU1naEYsV0FDaEJBLFNBQVcsRUFHbkIsU0FBU0YsUUFBUW5FLEVBQVF6QixPQUNuQmw3RSxFQUFRMjhFLEVBQU84RSxlQUNmLzNHLEVBQU9zMkIsRUFBTXQyQixLQUNick8sRUFBSzJrQyxFQUFNK2dGLDhCQUVJL2dGLEdBRWZrN0UsZUFBaUJ5QixFQUFRMzhFLEVBQU90MkIsRUFBTXd4RyxFQUFJNy9HLE9BQVMsS0FFakRtbEgsRUFBVzZCLFdBQVdyaUYsR0FFckJ3Z0YsR0FBYXhnRixFQUFNNGdGLFFBQVc1Z0YsRUFBTTZnRixtQkFBb0I3Z0YsRUFBTTRtQyw2QkFDckQrMUMsRUFBUTM4RSxHQUdsQnQyQixhQUVTNDRHLFdBQVkzRixFQUFRMzhFLEVBQU93Z0YsRUFBVW5sSCxjQUduQ3NoSCxFQUFRMzhFLEVBQU93Z0YsRUFBVW5sSCxJQUs1QyxTQUFTaW5ILFdBQVczRixFQUFRMzhFLEVBQU93Z0YsRUFBVW5sSCxHQUN0Q21sSCxnQkFBdUI3RCxFQUFRMzhFLEtBQzlCa2hGLDRCQUVNdkUsRUFBUTM4RSxHQU10QixTQUFTdWlGLGFBQWE1RixFQUFRMzhFLEdBQ1AsSUFBakJBLEVBQU1uNEQsUUFBZ0JtNEQsRUFBTXNnRixjQUN4QkEsV0FBWSxJQUNYM3hHLEtBQUssVUFLaEIsU0FBUzZ6RyxZQUFZN0YsRUFBUTM4RSxLQUNyQjZnRixrQkFBbUIsTUFDckJ2c0ksRUFBUTByRCxFQUFNNG1DLG1CQUVkKzFDLEVBQU9rRixTQUFXdnRJLEdBQVNBLEVBQU1pc0IsS0FBTSxLQUVyQ3hXLEVBQUlpMkMsRUFBTXFoRixxQkFDVjlxSSxFQUFTLElBQUk1TixNQUFNb2hCLEdBQ25CMDRILEVBQVN6aUYsRUFBTXNoRixxQkFDWmh0SSxNQUFRQSxVQUVYaEwsRUFBUSxFQUNMZ0wsS0FDRWhMLEdBQVNnTCxJQUNSQSxFQUFNaXNCLFFBQ0wsVUFHSG84RyxFQUFRMzhFLEdBQU8sRUFBTUEsRUFBTW40RCxPQUFRME8sRUFBUSxHQUFJa3NJLEVBQU9DLFVBSXhEeEIsY0FDQUQsb0JBQXNCLEtBQ3hCd0IsRUFBT2xpSCxRQUNIK2dILG1CQUFxQm1CLEVBQU9saUgsT0FDM0JBLEtBQU8sUUFFUitnSCxtQkFBcUIsSUFBSUMsY0FBY3ZoRixPQUUxQyxNQUVFMXJELEdBQU8sS0FDUnl6RyxFQUFRenpHLEVBQU15ekcsTUFDZHlqQixFQUFXbDNILEVBQU1rM0gsU0FDakJud0csRUFBSy9tQixFQUFNNHlCLG9CQUdQeTFHLEVBQVEzOEUsR0FBTyxFQUZiQSxFQUFNNDhFLFdBQWEsRUFBSTcwQixFQUFNbGdILE9BRUprZ0gsRUFBT3lqQixFQUFVbndHLEtBQzVDL21CLEVBQU1pc0IsS0FLVnkvQixFQUFNMmdGLGNBS0UsT0FBVnJzSSxNQUFzQjJzSSxvQkFBc0IsUUFHNUNJLHFCQUF1QixJQUN2Qno2QyxnQkFBa0J0eUYsSUFDbEJ1c0ksa0JBQW1CLEVBaUMzQixTQUFTd0IsV0FBV3JpRixVQUNYQSxFQUFNdWdGLFFBQTJCLElBQWpCdmdGLEVBQU1uNEQsUUFBMEMsT0FBMUJtNEQsRUFBTTRtQyxrQkFBNkI1bUMsRUFBTXdnRixXQUFheGdGLEVBQU0yZ0YsUUFHM0csU0FBU2dDLFVBQVVoRyxFQUFRMzhFLEdBQ3BCQSxFQUFNbWhGLGdCQUNIQSxhQUFjLElBQ2J4eUcsS0FBSyxjQUloQixTQUFTaTBHLFlBQVlqRyxFQUFRMzhFLE9BQ3ZCNmlGLEVBQU9SLFdBQVdyaUYsVUFDbEI2aUYsSUFDc0IsSUFBcEI3aUYsRUFBTWtoRixxQkFDRXZFLEVBQVEzOEUsS0FDWndnRixVQUFXLElBQ1Y3eEcsS0FBSyxxQkFFRmd1RyxFQUFRMzhFLElBR2Y2aUYsRUFHVCxTQUFTQyxZQUFZbkcsRUFBUTM4RSxFQUFPM2tDLEtBQzVCa2xILFFBQVMsY0FDSDVELEVBQVEzOEUsR0FDaEIza0MsSUFDRTJrQyxFQUFNd2dGLG9CQUFtQm5sSCxLQUFnQjFQLEtBQUssU0FBVTBQLE1BRXhEd3VCLE9BQVEsSUFDUDYzRixVQUFXLEVBS3BCLFNBQVNILGNBQWN2aEYsT0FDakIraUYsRUFBUTloSixVQUVQcy9CLEtBQU8sVUFDUGpzQixNQUFRLFVBRVJvdUksT0FBUyxTQUFVOW9ILE9BQ2xCdGxCLEVBQVF5dUksRUFBTXp1SSxZQUNaQSxNQUFRLEtBQ1BBLEdBQU8sS0FDUittQixFQUFLL21CLEVBQU00eUIsV0FDVGc2RyxjQUNIdG5ILEtBQ0t0bEIsRUFBTWlzQixLQUVaeS9CLEVBQU1zaEYscUJBQ0ZBLG1CQUFtQi9nSCxLQUFPd2lILElBRTFCekIsbUJBQXFCeUIsR0RyT2pDaEYsU0FBUzE1SSxVQUFVNmxJLEtBQU8sU0FBVTMvSCxTQUM1QixPQUFRQSxLQUNWd3FDLFNBQVN4cUMsRUFBRyxRQUNaeTFELEVBQVEvK0QsS0FBSys4SSxlQUNiZ0YsRUFBUXo0SSxLQUVGLElBQU5BLE1BQWVpekksaUJBQWtCLEdBSzNCLElBQU5qekksR0FBV3kxRCxFQUFNdTlFLGVBQWlCdjlFLEVBQU1uNEQsUUFBVW00RCxFQUFNZzlFLGVBQWlCaDlFLEVBQU1uVyxvQkFDM0UscUJBQXNCbVcsRUFBTW40RCxPQUFRbTRELEVBQU1uVyxPQUMzQixJQUFqQm1XLEVBQU1uNEQsUUFBZ0JtNEQsRUFBTW5XLGtCQUFtQjVvRCxtQkFBd0JBLE1BQ3BFLFFBTUMsT0FITjI5SSxjQUFjcjBJLEVBQUd5MUQsS0FHTkEsRUFBTW5XLGFBQ0UsSUFBakJtVyxFQUFNbjRELG9CQUEwQjVHLE1BQzdCLFNBc0RMbXBCLEVBNUJBNjRILEVBQVNqakYsRUFBTXU5RSwwQkFDYixnQkFBaUIwRixJQUdGLElBQWpCampGLEVBQU1uNEQsUUFBZ0JtNEQsRUFBTW40RCxPQUFTMEMsRUFBSXkxRCxFQUFNZzlFLHNCQUUzQyxnQ0FERyxHQU1QaDlFLEVBQU1uVyxPQUFTbVcsRUFBTXM5RSxjQUVqQixzQkFERyxHQUVBMkYsVUFDSCxhQUNBM0YsU0FBVSxJQUNWNXpHLE1BQU8sRUFFUSxJQUFqQnMyQixFQUFNbjRELFdBQW9CMDFJLGNBQWUsUUFFeENXLE1BQU1sK0UsRUFBTWc5RSxpQkFDWHR6RyxNQUFPLEVBR1JzMkIsRUFBTXM5RSxZQUFhc0IsY0FBY29FLEVBQU9oakYsS0FNbkMsVUFGUnoxRCxFQUFJLEVBQVNpMUksU0FBU2oxSSxFQUFHeTFELEdBQWtCLFNBR3ZDdTlFLGNBQWUsSUFDakIsS0FFRTExSSxRQUFVMEMsRUFHRyxJQUFqQnkxRCxFQUFNbjRELFNBR0htNEQsRUFBTW5XLFVBQWEwekYsY0FBZSxHQUduQ3lGLElBQVV6NEksR0FBS3kxRCxFQUFNblcsbUJBQW1CNW9ELE9BR2xDLE9BQVJtcEIsUUFBbUJ1a0IsS0FBSyxPQUFRdmtCLEdBRTdCQSxHQTBFVDJ6SCxTQUFTMTVJLFVBQVU2NUksTUFBUSxTQUFVM3pJLFFBQzlCb2tDLEtBQUssUUFBUyxJQUFJcC9CLE1BQU0scUJBRy9Cd3VJLFNBQVMxNUksVUFBVTYrSSxLQUFPLFNBQVVDLEVBQU1DLE9BQ3BDenZILEVBQU0xeUIsS0FDTisrRCxFQUFRLytELEtBQUsrOEksc0JBRVRoK0UsRUFBTW05RSxpQkFDUCxJQUNHRCxNQUFRaUcsYUFFWCxJQUNHakcsT0FBU2w5RSxFQUFNazlFLE1BQU9pRyxtQkFHdEJqRyxNQUFNaHZJLEtBQUtpMUksS0FHZmhHLFlBQWMsUUFDZCx3QkFBeUJuOUUsRUFBTW05RSxXQUFZaUcsT0FJN0NDLEdBRlVELElBQTZCLElBQWpCQSxFQUFTeG5HLElBRWYwbkcsRUFBUUMsV0FJbkJDLEVBQVN2RixTQUNWLFlBQ0ZBLElBQWF0cUgsZ0JBS1YydkgsVUFDRCxXQUNEMW5HLE1BWkhva0IsRUFBTXE5RSxzQkFBcUJnRyxLQUFnQjEzSCxLQUFLLE1BQU8wM0gsS0FFdEQxbEgsR0FBRyxTQUFVNmxILE9BaUJkQyxFQUFVdEUsWUFBWXhySCxLQUNyQmdLLEdBQUcsUUFBUzhsSCxPQUViQyxHQUFZLFdBQ1BILFVBQ0QsYUFFRDlPLGVBQWUsUUFBU2tQLEtBQ3hCbFAsZUFBZSxTQUFVbVAsS0FDekJuUCxlQUFlLFFBQVNnUCxLQUN4QmhQLGVBQWUsUUFBU29QLEtBQ3hCcFAsZUFBZSxTQUFVK08sS0FDMUIvTyxlQUFlLE1BQU82TyxLQUN0QjdPLGVBQWUsTUFBTzhPLEtBQ3RCOU8sZUFBZSxPQUFRcVAsTUFFZixHQU9SOWpGLEVBQU02OUUsWUFBZ0JzRixFQUFLMUIsaUJBQWtCMEIsRUFBSzFCLGVBQWVuQixtQkFPbkV5RCxHQUFzQixXQUVqQkQsRUFBTy83QixTQUNSLGFBQ2dCLEdBRWxCLElBRE1vN0IsRUFBS3pZLE1BQU0zaUIsSUFDQ2c4QixLQUtNLElBQXJCL2pGLEVBQU1tOUUsWUFBb0JuOUUsRUFBTWs5RSxRQUFVaUcsR0FBUW5qRixFQUFNbTlFLFdBQWEsSUFBcUMsSUFBaENwMEgsUUFBUWkzQyxFQUFNazlFLE1BQU9pRyxNQUFrQk8sVUFDOUcsOEJBQStCL3ZILEVBQUlxcUgsZUFBZUgsY0FDcERHLGVBQWVILGdCQUNHLEtBRXBCbUcsa0JBTUNILEVBQVEzSSxTQUNULFVBQVdBLFNBRVp6RyxlQUFlLFFBQVNvUCxHQUNRLElBQWpDckosZ0JBQWMySSxFQUFNLFlBQXFCeDBHLEtBQUssUUFBU3VzRyxZQU9wRHlJLE1BQ0ZsUCxlQUFlLFNBQVVtUCxnQkFJdkJBLFVBQ0QsY0FDRG5QLGVBQWUsUUFBU2tQLGdCQUt0Qk0sVUFDRCxZQUNGQSxPQUFPZCxZQTlDVHhsSCxHQUFHLE9BQVFtbUgsbUJBNkJDWCxFQUFNLFFBQVNVLEtBTzFCbDRILEtBQUssUUFBU2c0SCxLQU1kaDRILEtBQUssU0FBVWk0SCxLQVFmajFHLEtBQUssT0FBUWhiLEdBR2Jxc0MsRUFBTW85RSxnQkFDSCxpQkFDRmlDLFVBR0M4RCxHQWVUcEYsU0FBUzE1SSxVQUFVNC9JLE9BQVMsU0FBVWQsT0FDaENuakYsRUFBUS8rRCxLQUFLKzhJLGtCQUdRLElBQXJCaCtFLEVBQU1tOUUsa0JBQXlCbDhJLFFBR1YsSUFBckIrK0QsRUFBTW05RSxrQkFFSmdHLEdBQVFBLElBQVNuakYsRUFBTWs5RSxNQUFjajhJLE1BRXBDa2lKLE1BQWFuakYsRUFBTWs5RSxTQUdsQkEsTUFBUSxPQUNSQyxXQUFhLElBQ2JDLFNBQVUsRUFDWitGLEtBQVd4MEcsS0FBSyxTQUFVMXRDLE1BQ3ZCQSxVQUtKa2lKLEVBQU0sS0FFTGUsRUFBUWxrRixFQUFNazlFLE1BQ2Rqa0gsRUFBTSttQyxFQUFNbTlFLGFBQ1ZELE1BQVEsT0FDUkMsV0FBYSxJQUNiQyxTQUFVLE1BRVgsSUFBSTU1RyxFQUFLLEVBQUdBLEVBQUt2SyxFQUFLdUssTUFDbkJBLEdBQUltTCxLQUFLLFNBQVUxdEMsYUFDbkJBLFNBSU5pa0IsRUFBSTZELFFBQVFpM0MsRUFBTWs5RSxNQUFPaUcsVUFDbEIsSUFBUGorSCxFQUFpQmprQixRQUVmaThJLE1BQU1ycEksT0FBT3FSLEVBQUcsS0FDaEJpNEgsWUFBYyxFQUNLLElBQXJCbjlFLEVBQU1tOUUsZUFBd0JELE1BQVFsOUUsRUFBTWs5RSxNQUFNLE1BRWpEdnVHLEtBQUssU0FBVTF0QyxNQUViQSxPQUtUODhJLFNBQVMxNUksVUFBVXM1QixHQUFLLFNBQVV3bUgsRUFBSWo3SCxPQUNoQ3VCLEVBQU15dUgsYUFBYTcwSSxVQUFVczVCLEdBQUc3NEIsS0FBSzdELEtBQU1rakosRUFBSWo3SCxNQUV4QyxTQUFQaTdILEdBRWtDLElBQWhDbGpKLEtBQUsrOEksZUFBZVosY0FBd0JpQyxjQUMzQyxHQUFXLGFBQVA4RSxFQUFtQixLQUN4Qm5rRixFQUFRLytELEtBQUsrOEksZUFDWmgrRSxFQUFNcTlFLFlBQWVyOUUsRUFBTXk5RSxzQkFDeEJBLGtCQUFvQno5RSxFQUFNdTlFLGNBQWUsSUFDekNDLGlCQUFrQixFQUNuQng5RSxFQUFNczlFLFFBRUF0OUUsRUFBTW40RCxxQkFDRjVHLEtBQU0rK0QsY0FGVm8vRSxpQkFBa0JuK0ksY0FPMUJ3cEIsR0FFVHN6SCxTQUFTMTVJLFVBQVVrd0ksWUFBY3dKLFNBQVMxNUksVUFBVXM1QixHQVNwRG9nSCxTQUFTMTVJLFVBQVVnN0ksT0FBUyxlQUN0QnIvRSxFQUFRLytELEtBQUsrOEksc0JBQ1poK0UsRUFBTW85RSxnQkFDSCxZQUNBQSxTQUFVLFNBQ1RuOEksS0FBTSsrRCxJQUVSLytELE1BdUJUODhJLFNBQVMxNUksVUFBVTIvSSxNQUFRLHdCQUNuQix3QkFBeUIvaUosS0FBSys4SSxlQUFlWixVQUMvQyxJQUFVbjhJLEtBQUsrOEksZUFBZVosZ0JBQzFCLGNBQ0RZLGVBQWVaLFNBQVUsT0FDekJ6dUcsS0FBSyxVQUVMMXRDLE1BWVQ4OEksU0FBUzE1SSxVQUFVKy9JLEtBQU8sU0FBVXpILE9BQzlCMzhFLEVBQVEvK0QsS0FBSys4SSxlQUNicUcsR0FBUyxFQUVUeGdKLEVBQU81QyxTQTJCTixJQUFJaWtCLE9BMUJGeVksR0FBRyxNQUFPLG9CQUNULGVBQ0ZxaUMsRUFBTXpNLFVBQVl5TSxFQUFNblcsTUFBTyxLQUM3QmsrRCxFQUFRL25ELEVBQU16TSxRQUFRM1gsTUFDdEJtc0UsR0FBU0EsRUFBTWxnSCxVQUFhcUcsS0FBSzY1RyxLQUdsQzc1RyxLQUFLLFVBR0x5dkIsR0FBRyxPQUFRLFNBQVVvcUYsVUFDcEIsZ0JBQ0YvbkQsRUFBTXpNLFlBQWlCeU0sRUFBTXpNLFFBQVFtM0UsTUFBTTNpQixLQUczQy9uRCxFQUFNNDhFLFlBQXlCLE9BQVY3MEIsUUFBNEJyakgsSUFBVnFqSCxNQUF1Qy9uRCxFQUFNNDhFLFlBQWdCNzBCLEdBQVVBLEVBQU1sZ0gsVUFFOUdoRSxFQUFLcUssS0FBSzY1RyxRQUVULElBQ0ZpOEIsYUFNR3JILE9BQ0lqNEksSUFBWnpELEtBQUtpa0IsSUFBeUMsbUJBQWR5M0gsRUFBT3ozSCxVQUNwQ0EsR0FBSyxTQUFVME4sVUFDWCxrQkFDRStwSCxFQUFPL3BILEdBQVE1cUIsTUFBTTIwSSxFQUFRbDBJLFlBRjlCLENBSVJ5YyxzQkFLUSxRQUFTLFFBQVMsVUFBVyxRQUFTLFVBQ3BDLFNBQVVpL0gsS0FDakJ4bUgsR0FBR3dtSCxFQUFJdGdKLEVBQUs4cUMsS0FBS3prQixLQUFLcm1CLEVBQU1zZ0osUUFLaENqRyxNQUFRLFNBQVUzekksU0FDZixnQkFBaUJBLEdBQ25CODVJLE9BQ08sSUFDRmhGLFdBSUp4N0ksR0FJVGs2SSxTQUFTdUcsVUFBWTlFLGtCQ2p2QlpXLGNBQWdCQSxjQUN6Qm9FLFdBR1MvQyxTQUFVdEksY0E2R25CaUgsY0FBYzk3SSxVQUFVKzdJLFVBQVksbUJBQzlCM3JHLEVBQVV4ekMsS0FBSzJsRyxnQkFDZjhvQixLQUNHajdFLEtBQ0R2bUMsS0FBS3VtQyxLQUNDQSxFQUFRbFUsWUFFYm12RixHQXlCVDh4QixTQUFTbjlJLFVBQVU2K0ksS0FBTyxnQkFDbkJ2MEcsS0FBSyxRQUFTLElBQUlwL0IsTUFBTSwrQkFrQy9CaXlJLFNBQVNuOUksVUFBVXFtSSxNQUFRLFNBQVUzaUIsRUFBT3lqQixFQUFVbndHLE9BQ2hEMmtDLEVBQVEvK0QsS0FBS3dnSixlQUNicjNILEdBQU0sUUFFYyxtQkFBYm9oSCxNQUNKQSxJQUNNLE1BR1RsZ0ksU0FBT0UsU0FBU3U4RyxLQUFtQixTQUFtQnlqQixNQUFxQnhyRSxFQUFNMjlFLGlCQUVuRSxtQkFBUHRpSCxNQUF3QjRrSCxLQUUvQmpnRixFQUFNblcsb0JBQXFCNW9ELEtBQU1vNkIsR0FBYTBtSCxXQUFXOWdKLEtBQU0rK0QsRUFBTytuRCxFQUFPMXNGLE9BQ3pFNmxILGNBQ0FlLGNBQWNoaEosS0FBTSsrRCxFQUFPK25ELEVBQU95akIsRUFBVW53RyxJQUc3Q2pSLEdBR1RvM0gsU0FBU245SSxVQUFVbWdKLEtBQU8sV0FDWnZqSixLQUFLd2dKLGVBRVhiLFVBR1JZLFNBQVNuOUksVUFBVW9nSixPQUFTLGVBQ3RCemtGLEVBQVEvK0QsS0FBS3dnSixlQUViemhGLEVBQU00Z0YsV0FDRkEsU0FFRDVnRixFQUFNMmdGLFNBQVkzZ0YsRUFBTTRnRixRQUFXNWdGLEVBQU13Z0YsVUFBYXhnRixFQUFNNmdGLG1CQUFvQjdnRixFQUFNNG1DLDZCQUE2QjNsRyxLQUFNKytELEtBSWxJd2hGLFNBQVNuOUksVUFBVXFnSixtQkFBcUIsU0FBNEJsWixNQUUxQyxpQkFBYkEsTUFBa0NBLEVBQVMvaUgsa0JBQy9DLE1BQU8sT0FBUSxRQUFTLFFBQVMsU0FBVSxTQUFVLE9BQVEsUUFBUyxVQUFXLFdBQVksT0FBT00sU0FBU3lpSCxFQUFXLElBQUkvaUgsZ0JBQWtCLFNBQVUsSUFBSW5MLFVBQVUscUJBQXVCa3VILGVBQy9MaVcsZUFBZTlELGdCQUFrQm5TLEVBQy9CdnFJLE1BcUtUdWdKLFNBQVNuOUksVUFBVXM5SSxPQUFTLFNBQVU1NUIsRUFBT3lqQixFQUFVbndHLEtBQ2xELElBQUk5ckIsTUFBTSxxQkFHZml5SSxTQUFTbjlJLFVBQVV3OUksUUFBVSxLQUU3QkwsU0FBU245SSxVQUFVdTNDLElBQU0sU0FBVW1zRSxFQUFPeWpCLEVBQVVud0csT0FDOUMya0MsRUFBUS8rRCxLQUFLd2dKLGVBRUksbUJBQVYxNUIsS0FDSkEsSUFDRyxPQUNHLE1BQ2tCLG1CQUFieWpCLE1BQ1hBLElBQ00sTUFHQyxPQUFWempCLFFBQTRCcmpILElBQVZxakgsUUFBMEIyaUIsTUFBTTNpQixFQUFPeWpCLEdBR3pEeHJFLEVBQU00Z0YsV0FDRkEsT0FBUyxPQUNWNkQsVUFJRnprRixFQUFNdWdGLFFBQVd2Z0YsRUFBTXdnRixzQkFBc0J2L0ksS0FBTSsrRCxFQUFPM2tDLGVDOVp4RHdoSCxPQUFRa0IsVUFHakIsSUFEQSxJQUFJOTNJLE9BQU9sQyxPQUFPa0MsS0FBS3U3SSxTQUFTbjlJLFdBQ3ZCNmlCLEVBQUksRUFBR0EsRUFBSWpoQixPQUFLNEIsT0FBUXFmLElBQUssS0FDaEMwTCxPQUFTM3NCLE9BQUtpaEIsR0FDYjIxSCxPQUFPeDRJLFVBQVV1dUIsaUJBQWdCdnVCLFVBQVV1dUIsUUFBVTR1SCxTQUFTbjlJLFVBQVV1dUIsU0FFL0UsU0FDZ0JpcUgsT0FBT3JySSxRQUNmdlEsZ0JBQWdCNDdJLGVBQWdCLElBQUlBLE9BQU9yckksWUFFeEMxTSxLQUFLN0QsS0FBTXVRLFlBQ1gxTSxLQUFLN0QsS0FBTXVRLEdBRWhCQSxJQUFnQyxJQUFyQkEsRUFBUXlzSSxnQkFBeUJBLFVBQVcsR0FFdkR6c0ksSUFBZ0MsSUFBckJBLEVBQVFrd0ksZ0JBQXlCQSxVQUFXLFFBRXREaUQsZUFBZ0IsRUFDakJuekksSUFBcUMsSUFBMUJBLEVBQVFtekkscUJBQThCQSxlQUFnQixRQUVoRWg1SCxLQUFLLE1BQU8yM0gsT0FJbkIsU0FBU0EsUUFHSHJpSixLQUFLMGpKLGVBQWlCMWpKLEtBQUt3Z0osZUFBZTUzRixrQkFJckMrNkYsUUFBUzNqSixNQUdwQixTQUFTMmpKLFFBQVEvZ0osS0FDViszQyxNQ01QLFNBQVNpcEcsZUFBZWxJLFFBQ2pCbUksZUFBaUIsU0FBVTVKLEVBQUk5M0ksVUFDM0IwaEosZUFBZW5JLEVBQVF6QixFQUFJOTNJLFNBRy9CMmhKLGVBQWdCLE9BQ2hCQyxjQUFlLE9BQ2ZqRSxRQUFVLFVBQ1ZrRSxXQUFhLFVBQ2JDLGNBQWdCLEtBR3ZCLFNBQVNKLGVBQWVuSSxFQUFRekIsRUFBSTkzSSxPQUM5QitoSixFQUFLeEksRUFBT3lJLGtCQUNiSixjQUFlLE1BRWQzcEgsRUFBSzhwSCxFQUFHcEUsWUFFUDFsSCxTQUFXc2hILEVBQU9odUcsS0FBSyxRQUFTLElBQUlwL0IsTUFBTSxvQ0FFNUMwMUksV0FBYSxPQUNibEUsUUFBVSxLQUVBLE9BQVQzOUksUUFBMEJzQixJQUFUdEIsS0FBMkI4SyxLQUFLOUssS0FFbEQ4M0ksT0FFQ21LLEVBQUsxSSxFQUFPcUIsaUJBQ2JWLFNBQVUsR0FDVCtILEVBQUc5SCxjQUFnQjhILEVBQUd4OUksT0FBU3c5SSxFQUFHckksa0JBQzdCa0IsTUFBTW1ILEVBQUdySSxlQUdwQixTQUNnQnNJLFVBQVU5ekksUUFDbEJ2USxnQkFBZ0Jxa0osa0JBQW1CLElBQUlBLFVBQVU5ekksVUFFaEQxTSxLQUFLN0QsS0FBTXVRLFFBRWI0ekksZ0JBQWtCLElBQUlQLGVBQWU1akosVUFHdEMwN0ksRUFBUzE3SSxVQUdSKzhJLGVBQWVULGNBQWUsT0FLOUJTLGVBQWV0MEcsTUFBTyxFQUV2Qmw0QixJQUMrQixtQkFBdEJBLEVBQVFoSixpQkFBK0IrOEksV0FBYS96SSxFQUFRaEosV0FFMUMsbUJBQWxCZ0osRUFBUWcwSSxhQUEyQkMsT0FBU2owSSxFQUFRZzBJLGFBRzVENzVILEtBQUssWUFBYSxXQUNNLG1CQUFoQjFxQixLQUFLd2tKLFlBQTRCQSxPQUFPLFNBQVV2SyxRQUN0RHlCLEVBQVF6QixVQUNGeUIsS0FrRGpCLFNBQVNuOEcsS0FBS204RyxFQUFRekIsTUFDaEJBLFNBQVd5QixFQUFPaHVHLEtBQUssUUFBU3VzRyxPQUloQ2orQixFQUFLMC9CLEVBQU84RSxlQUNaMEQsRUFBS3hJLEVBQU95SSxtQkFFWm5vQyxFQUFHcDFHLGFBQWMsSUFBSTBILE1BQU0saURBRTNCNDFJLEVBQUdILG1CQUFvQixJQUFJejFJLE1BQU0seURBRTlCb3RJLEVBQU96dUksS0FBSyxNQ3ZLckIsU0FDZ0J3M0ksWUFBWWwwSSxRQUNwQnZRLGdCQUFnQnlrSixvQkFBcUIsSUFBSUEsWUFBWWwwSSxhQUVqRDFNLEtBQUs3RCxLQUFNdVEsR0NldkIsU0FBU20wSSxzQkFDSjdnSixLQUFLN0QsaUJGc0JEcWtKLFVBQVd6SSxRQW1FcEJ5SSxVQUFVamhKLFVBQVU2SixLQUFPLFNBQVU2NUcsRUFBT3lqQixlQUNyQzRaLGdCQUFnQkwsZUFBZ0IsRUFDOUJsSSxPQUFPeDRJLFVBQVU2SixLQUFLcEosS0FBSzdELEtBQU04bUgsRUFBT3lqQixJQWFqRDhaLFVBQVVqaEosVUFBVWtoSixXQUFhLFNBQVV4OUIsRUFBT3lqQixFQUFVbndHLFNBQ3BELElBQUk5ckIsTUFBTSxvQkFHbEIrMUksVUFBVWpoSixVQUFVczlJLE9BQVMsU0FBVTU1QixFQUFPeWpCLEVBQVVud0csT0FDbEQ4cEgsRUFBS2xrSixLQUFLbWtKLHFCQUNYckUsUUFBVTFsSCxJQUNWNHBILFdBQWFsOUIsSUFDYm05QixjQUFnQjFaLEdBQ2QyWixFQUFHSCxhQUFjLEtBQ2hCSyxFQUFLcGtKLEtBQUsrOEksZ0JBQ1ZtSCxFQUFHSixlQUFpQk0sRUFBRzlILGNBQWdCOEgsRUFBR3g5SSxPQUFTdzlJLEVBQUdySSxxQkFBb0JrQixNQUFNbUgsRUFBR3JJLGlCQU8zRnNJLFVBQVVqaEosVUFBVTY1SSxNQUFRLFNBQVUzekksT0FDaEM0NkksRUFBS2xrSixLQUFLbWtKLGdCQUVRLE9BQWxCRCxFQUFHRixZQUF1QkUsRUFBR3BFLFVBQVlvRSxFQUFHSCxnQkFDM0NBLGNBQWUsT0FDYk8sV0FBV0osRUFBR0YsV0FBWUUsRUFBR0QsY0FBZUMsRUFBR0wsbUJBSWpEQyxlQUFnQixjQ3hKZFcsWUFBYUosV0FRdEJJLFlBQVlyaEosVUFBVWtoSixXQUFhLFNBQVV4OUIsRUFBT3lqQixFQUFVbndHLEtBQ3pELEtBQU0wc0YsZUNMRjQ5QixPQUFRQyxjQUNqQkQsT0FBTzVILFNBQVdBLFNBQ2xCNEgsT0FBT25FLFNBQVdBLFNBQ2xCbUUsT0FBTzlJLE9BQVNBLE9BQ2hCOEksT0FBT0wsVUFBWUEsVUFDbkJLLE9BQU9ELFlBQWNBLFlBR3JCQyxPQUFPQSxPQUFTQSxPQVloQkEsT0FBT3RoSixVQUFVNitJLEtBQU8sU0FBU0MsRUFBTTN4SSxPQUNqQ2hLLEVBQVN2RyxjQUVKNmlKLEVBQU8vN0IsR0FDVm83QixFQUFLekIsV0FDSCxJQUFVeUIsRUFBS3pZLE1BQU0zaUIsSUFBVXZnSCxFQUFPdzhJLFNBQ2pDQSxpQkFPSlAsSUFDSGo4SSxFQUFPeTJJLFVBQVl6MkksRUFBTzYzSSxVQUNyQkEsV0FKSjFoSCxHQUFHLE9BQVFtbUgsS0FRYm5tSCxHQUFHLFFBQVM4bEgsR0FJWk4sRUFBSzBDLFVBQWNyMEksSUFBMkIsSUFBaEJBLEVBQVFvcUMsUUFDbENqZSxHQUFHLE1BQU8ybEgsS0FDVjNsSCxHQUFHLFFBQVNnbUgsUUFHakJtQyxHQUFXLFdBQ054QyxJQUNId0MsT0FDTyxJQUVObHFHLGdCQUlFK25HLElBQ0htQyxPQUNPLEVBRWlCLG1CQUFqQjNDLEVBQUtsb0csV0FBNkJBLG9CQUl0QzRvRyxFQUFRM0ksVUFFeUIsSUFBcEMwSyxhQUFHcEwsY0FBY3Y1SSxLQUFNLGVBQ25CaTZJLFdBUURxSSxNQUNBOU8sZUFBZSxPQUFRcVAsS0FDekJyUCxlQUFlLFFBQVNnUCxLQUV0QmhQLGVBQWUsTUFBTzZPLEtBQ3RCN08sZUFBZSxRQUFTa1AsS0FFeEJsUCxlQUFlLFFBQVNvUCxLQUMxQnBQLGVBQWUsUUFBU29QLEtBRXRCcFAsZUFBZSxNQUFPOE8sS0FDdEI5TyxlQUFlLFFBQVM4TyxLQUUxQjlPLGVBQWUsUUFBUzhPLFlBakJ4QjVsSCxHQUFHLFFBQVNrbUgsS0FDZGxtSCxHQUFHLFFBQVNrbUgsS0FtQlZsbUgsR0FBRyxNQUFPNGxILEtBQ1Y1bEgsR0FBRyxRQUFTNGxILEtBRWQ1bEgsR0FBRyxRQUFTNGxILEtBRVo1MEcsS0FBSyxPQUFRbm5DLEdBR1gyN0ksT0N4R0w0QyxnQkFDTSxTQUNBLG1CQUNVLFVBQ1QsT0FDSCxHQUVSLFNBR2dCQyxnQkFBZ0Jwa0ksRUFBSzdlLEVBQVVtdEQsT0FpQnpDZzZFLEVBaEJBcm1JLEVBQU81QyxpQkFDRjZELEtBQUtqQixLQUVUb2lKLE1BQVEvMUYsSUFDUmcyRixhQUNBQyxnQkFDQUMsY0FDQUMsaUJBR0Exb0gsR0FBRyxNQUFPLHNCQUVJLGFBQ1ZnUixLQUFLLGFBSUQsVUFBVHVoQixFQUFrQixHQUNmbzJGLGVBQWlCdmpKLElBRWpCaWUsSUFBTWplLEVBQVNpZSxNQUNmdWxJLFdBQWF4akosRUFBU29mLFNBQ3RCcWtJLGNBQWdCempKLEVBQVMwakosZUFHekIsSUFBSTFpSSxFQUFReWYsRUFBSWtqSCxFQUFNM2pKLEVBQVNtakosUUFBUS9oSixPQUFPbThCLFlBQWF2YyxHQUFVeWYsRUFBS2tqSCxFQUFJbm1ILFFBQVEzN0IsT0FBUTQrQixFQUFHaEQsUUFDL0YwbEgsUUFBUW5pSSxFQUFPLEdBQUcwRSxlQUFpQjFFLEVBQU8sS0FDMUNvaUksV0FBV2o0SSxLQUFLNlYsRUFBTyxHQUFJQSxFQUFPLFFBSXJDNGlJLEVBQVM1akosRUFBU1csS0FBS2tqSixlQUVwQixhQUNFMWMsT0FBT3BuSSxLQUFLLFNBQVNvQyxHQUN0QnJCLEVBQUtnakosYUFFTDNoSixFQUFPczdCLE9BQ0p0eUIsS0FBSyxTQUdQQSxLQUFLLElBQUk1QyxTQUFPcEcsRUFBT04sd0JBTTNCLE1BQ0FvZCxLQUFPSixJQUNQa2xJLEtBQU8sSUFFUDlsSSxJQUFNWSxFQUFJbWxJLGNBQ1ZSLFdBQWEza0ksRUFBSU8sU0FDakJxa0ksY0FBZ0I1a0ksRUFBSTZrSSxXQUNYN2tJLEVBQUlvbEksd0JBQXdCeCtILE1BQU0sU0FDeENqVixRQUFRLFNBQVN3USxPQUNuQlEsRUFBVVIsRUFBTzFoQixNQUFNLHVCQUN2QmtpQixFQUFTLEtBQ1B4ZCxFQUFNd2QsRUFBUSxHQUFHa0UsY0FDVCxlQUFSMWhCLFFBQ3dCckMsSUFBdEJiLEVBQUtxaUosUUFBUW4vSSxPQUNWbS9JLFFBQVFuL0ksU0FFVm0vSSxRQUFRbi9JLEdBQUttSCxLQUFLcVcsRUFBUSxVQUNBN2YsSUFBdEJiLEVBQUtxaUosUUFBUW4vSSxLQUNqQm0vSSxRQUFRbi9JLElBQVEsS0FBT3dkLEVBQVEsS0FFL0IyaEksUUFBUW4vSSxHQUFPd2QsRUFBUSxLQUV6QjRoSSxXQUFXajRJLEtBQUtxVyxFQUFRLEdBQUlBLEVBQVEsU0FJeEMwaUksU0FBVyxrQkFDWDVRLGlCQUFrQixLQUNqQjZRLEVBQVdyakosRUFBS3NpSixXQUFXLGdCQUMzQmUsRUFBVSxLQUNSQyxFQUFlRCxFQUFTN2tKLE1BQU0sMkJBQzlCOGtKLE1BQ0dGLFNBQVdFLEVBQWEsR0FBRzErSCxlQUcvQjVrQixFQUFLb2pKLGFBQ0hBLFNBQVcsa0NDN0ZDbGEsTUFFbkJBLGFBQWVyMkgsV0FBWSxJQUVOLElBQW5CcTJILEVBQUkvMUgsWUFBb0IrMUgsRUFBSWwySCxhQUFlazJILEVBQUl4MkgsT0FBT00sa0JBQ2pEazJILEVBQUl4MkgsT0FDTixHQUFnQyxtQkFBckJ3MkgsRUFBSXgySCxPQUFPOUQsYUFFcEJzNkgsRUFBSXgySCxPQUFPOUQsTUFBTXM2SCxFQUFJLzFILFdBQVkrMUgsRUFBSS8xSCxXQUFhKzFILEVBQUlsMkgsZUFJN0RyTCxXQUFTdWhJLEdBQU0sU0FHYnFhLEVBQVksSUFBSTF3SSxXQUFXcTJILEVBQUlsbEksUUFDL0JveEIsRUFBTTh6RyxFQUFJbGxJLE9BQ0xxZCxFQUFJLEVBQUdBLEVBQUkrVCxFQUFLL1QsTUFDYkEsR0FBSzZuSCxFQUFJN25ILFVBRWRraUksRUFBVTd3SSxhQUVYLElBQUloSCxNQUFNLHNDQ3JCWDgzSSxXQUFXQyxFQUFjQyxVQUM1QkMsVUFBdUJELEVBQ2xCLFFBQ0VDLHNCQUNGLDBCQUNFQSxTQUNGLFlBQ0VBLGFBQTBCRixFQUM1QixjQUNFRSxTQUFzQkYsRUFDeEIsZUFFQSxPQUtYLFNBQVNHLGNBQWM3NUgsT0FhakIwNUgsRUFaQXpqSixFQUFPNUMsY0FDRjZELEtBQUtqQixLQUVUNmpKLE1BQVE5NUgsSUFDUis1SCxXQUNBQyxZQUNEaDZILEVBQUtpNkgsUUFDRkMsVUFBVSxnQkFBaUIsU0FBVyxJQUFJeDhJLFNBQU9zaUIsRUFBS2k2SCxNQUFNdGpKLFNBQVMsa0JBQ3JFMEIsS0FBSzJuQixFQUFLczRILFNBQVMzeUksUUFBUSxTQUFTalMsS0FDcEN3bUosVUFBVXhtSixFQUFNc3NCLEVBQUtzNEgsUUFBUTVrSixVQUloQ2ltSixHQUFXLEtBQ0csa0JBQWQzNUgsRUFBS3NpQyxRQUVJLEtBQ0ksT0FDVixHQUFrQixxQkFBZHRpQyxFQUFLc2lDLFFBR0MsT0FDVixHQUFrQiw2QkFBZHRpQyxFQUFLc2lDLFFBRUVzM0YscUJBQ1gsQ0FBQSxHQUFLNTVILEVBQUtzaUMsTUFBc0IsWUFBZHRpQyxFQUFLc2lDLE1BQW9DLGdCQUFkdGlDLEVBQUtzaUMsV0FJakQsSUFBSTNnRCxNQUFNLGtDQUZELElBSVowMkksTUFBUW9CLFdBQVdDLEVBQWNDLEtBRWpDNXBILEdBQUcsU0FBVSxhQUNYb3FILGNGNkNUbitFLFdBQVNvOEUsZ0JBQWlCakksVUFFMUJpSSxnQkFBZ0IzaEosVUFBVTY1SSxNQUFRLGFBRWxDOEgsZ0JBQWdCM2hKLFVBQVUyakosZUFBaUIsZUFDckNua0osRUFBTzVDLEtBRVAyZ0IsRUFBTS9kLEVBQUttZSxLQUVYamYsRUFBVyxZQUNQYyxFQUFLb2lKLFdBQ1Isa0JBQ0Nya0ksRUFBSU0sYUFBZTZqSSxRQUFRa0MsaUJBSWxCLElBQUlya0osU0FBTzJ5SSxRQUFRMzBILEVBQUlzbUksY0FBYy85SCxVQUNoRCxNQUFPbGxCLE9BR1EsT0FBYmxDLEVBQW1CLEdBQ2hCbUwsS0FBSyxJQUFJNUMsU0FBT3ZJLGNBSXBCLGFBRVU2ZSxFQUFJdW1JLGFBQ2YsTUFBT2xqSixLQUNGZ2hKLE1BQVEsd0JBR1hsakosRUFBUzhFLE9BQVNoRSxFQUFLaWpKLEtBQU0sS0FDM0I5L0UsRUFBVWprRSxFQUFTb2dCLE9BQU90ZixFQUFLaWpKLFNBQ2IsbUJBQWxCampKLEVBQUtvakosU0FBK0IsU0FDbEMxd0ksRUFBUyxJQUFJakwsU0FBTzA3RCxFQUFRbi9ELFFBQ3ZCcWQsRUFBSSxFQUFHQSxFQUFJOGhELEVBQVFuL0QsT0FBUXFkLE1BQzNCQSxHQUE2QixJQUF4QjhoRCxFQUFRbHBELFdBQVdvSCxLQUU1QmhYLEtBQUtxSSxVQUVMckksS0FBSzg0RCxFQUFTbmpFLEVBQUtvakosWUFFckJILEtBQU8vakosRUFBUzhFLGlCQUdwQixpQkFDQytaLEVBQUlNLGFBQWU2akksUUFBUWtDLE9BQVNybUksRUFBSTdlLGlCQUVqQzZlLEVBQUk3ZSxXQUNWbUwsS0FBSyxJQUFJNUMsU0FBTyxJQUFJb0wsV0FBVzNULGVBRWpDLCtCQUNRNmUsRUFBSTdlLFNBQ1g2ZSxFQUFJTSxhQUFlNmpJLFFBQVFxQyxVQUFZcmxKLFVBRXRDbUwsS0FBSyxJQUFJNUMsU0FBTyxJQUFJb0wsV0FBVzNULGVBRWpDLGlCQUNRNmUsRUFBSTdlLFNBQ1g2ZSxFQUFJTSxhQUFlNmpJLFFBQVFxQyxrQkFFM0J6QixFQUFTLElBQUkvaUosU0FBT3lrSixpQkFDakJDLFdBQWEsV0FDZDNCLEVBQU96aEosT0FBTzJSLFdBQWFoVCxFQUFLaWpKLFNBQzdCNTRJLEtBQUssSUFBSTVDLFNBQU8sSUFBSW9MLFdBQVdpd0ksRUFBT3poSixPQUFPdU4sTUFBTTVPLEVBQUtpakosV0FDeERBLEtBQU9ILEVBQU96aEosT0FBTzJSLGVBR3ZCMHhJLE9BQVMsYUFDVHI2SSxLQUFLLFNBR0xzNkksa0JBQWtCemxKLEdBS3ZCYyxFQUFLbWUsS0FBS0UsYUFBZTZqSSxRQUFRa0MsTUFBdUIsY0FBZnBrSixFQUFLb2lKLFNBQzNDLzNJLEtBQUssT0V4SGQwN0QsV0FBUzY5RSxjQUFlakcsVUFFeEIsSUFBSWlILGVBQ0YsaUJBQ0Esa0JBQ0EsaUNBQ0EsZ0NBQ0EsYUFDQSxpQkFDQSxTQUNBLFVBQ0EsT0FDQSxNQUNBLFNBQ0EsT0FDQSxhQUNBLFNBQ0EsVUFDQSxLQUNBLFVBQ0Esb0JBQ0EsVUFDQSxhQUNBLE9Ba0lGLFNBQVNDLFlBQVk5bUksV0FFYk8sRUFBU1AsRUFBSU8sY0FDRSxPQUFYQSxHQUE4QixJQUFYQSxFQUMzQixNQUFPbGQsVUFDQSxHQXJJWHdpSixjQUFjcGpKLFVBQVV5akosVUFBWSxTQUFTeG1KLEVBQU1zRCxPQUU3QytqSixFQUFZcm5KLEVBQUttbkIsZUFJcUIsSUFBdENnZ0ksY0FBYzEvSCxRQUFRNC9ILEtBTGYxbkosS0FRTjJtSixTQUFTZSxTQUNOcm5KLFFBQ0NzRCxLQUlYNmlKLGNBQWNwakosVUFBVXVrSixVQUFZLFNBQVN0bkosVUFDaENMLEtBQ0MybUosU0FBU3RtSixFQUFLbW5CLGVBQWU3akIsT0FHM0M2aUosY0FBY3BqSixVQUFVd2tKLGFBQWUsU0FBU3ZuSixVQUNuQ0wsS0FDQzJtSixTQUFTdG1KLEVBQUttbkIsZ0JBRzVCZy9ILGNBQWNwakosVUFBVTBqSixVQUFZLGVBQzlCbGtKLEVBQU81QyxTQUVQNEMsRUFBS2dqSixnQkFLTG5qSixFQUhBa3FCLEVBQU8vcEIsRUFBSzZqSixNQUVab0IsRUFBYWpsSixFQUFLK2pKLFlBRUYsU0FBaEJoNkgsRUFBS2dGLFFBQXFDLFFBQWhCaEYsRUFBS2dGLFFBQW9DLFVBQWhCaEYsRUFBS2dGLFdBQ3RENDBILGtCQUNLLElBQUk1akosU0FBT2l5SSxLQUFLaHlJLEVBQUs4akosTUFBTWp5SSxJQUFJLFNBQVNhLFVBQ3RDd3lJLGNBQWN4eUksWUFFZHV5SSxFQUFXLHFCQUF1QmxrSixPQUFTLEtBSTdDMEcsU0FBT3FZLE9BQU85ZixFQUFLOGpKLE9BQU9wakosWUFJbEIsVUFBZlYsRUFBS29pSixNQUFtQixLQUN0QkMsRUFBVW5pSixPQUFPa0MsS0FBSzZpSixHQUFZcHpJLElBQUksU0FBU3BVLFVBQ3pDd25KLEVBQVd4bkosR0FBTUEsS0FBTXduSixFQUFXeG5KLEdBQU1zRCxrQkFHM0M4d0ksTUFBTTd4SSxFQUFLNmpKLE1BQU0xbUksWUFDZG5kLEVBQUs2akosTUFBTTkwSCxlQUNWc3pILE9BQ0h4aUosT0FDQSxtQkFDT2txQixFQUFLbzdILGdCQUFrQixVQUFZLGdCQUMvQ2xtSixLQUFLLFNBQVNDLEtBQ1Z1akosZUFBaUJ2akosSUFDakJrbUosWUFDSixTQUFTbi9HLEtBQ0w2RSxLQUFLLFFBQVM3RSxTQUVoQixLQUNEbG9CLEVBQU0vZCxFQUFLbWUsS0FBTyxJQUFJcGUsU0FBT2llLHFCQUUzQlEsS0FBS3hlLEVBQUs2akosTUFBTTkwSCxPQUFRL3VCLEVBQUs2akosTUFBTTFtSSxLQUFLLEdBQzVDLE1BQU80WSwwQkFDVSxhQUNWK1UsS0FBSyxRQUFTL1UsS0FNbkIsaUJBQWtCaFksTUFDaEJtMEgsYUFBZWx5SSxFQUFLb2lKLE1BQU16OUgsTUFBTSxLQUFLLElBRXZDLG9CQUFxQjVHLE1BQ25Cb25JLGtCQUFvQnA3SCxFQUFLbzdILGlCQUVaLFNBQWZubEosRUFBS29pSixPQUFvQixxQkFBc0Jya0ksS0FDN0N5MEgsaUJBQWlCLDZDQUVoQnB3SSxLQUFLNmlKLEdBQVl2MUksUUFBUSxTQUFTalMsS0FDbkM0bkosaUJBQWlCSixFQUFXeG5KLEdBQU1BLEtBQU13bkosRUFBV3huSixHQUFNc0QsV0FHMUR1a0osVUFBWSxPQUNicm5JLG1CQUFxQixrQkFDZkYsRUFBSU0saUJBQ1A2akksUUFBUXFDLGFBQ1JyQyxRQUFRa0MsT0FDTkQsbUJBTVUsNEJBQWZua0osRUFBS29pSixVQUNIcUMsV0FBYSxhQUNWTixxQkFJTG5FLFFBQVUsV0FDUmhnSixFQUFLZ2pKLGNBRUpsNEcsS0FBSyxRQUFTLElBQUlwL0IsTUFBTSxxQkFJekIrUyxLQUFLNWUsR0FDVCxNQUFPazJCLDBCQUNVLGFBQ1YrVSxLQUFLLFFBQVMvVSxTQXFCM0I2dEgsY0FBY3BqSixVQUFVMmpKLGVBQWlCLFdBR2xDVSxZQUZNem5KLEtBRVcrZ0IsUUFGWC9nQixLQUV5QjRsSixhQUZ6QjVsSixLQUtEa29KLFdBTENsb0osS0FNSmdvSixXQU5JaG9KLEtBUU5rb0osVUFBVW5CLG1CQUdqQlAsY0FBY3BqSixVQUFVNGtKLFNBQVcsV0FDdEJob0osS0FFRjRsSixhQUZFNWxKLEtBS05rb0osVUFBWSxJQUFJbkQsZ0JBTFYva0osS0FLK0IrZ0IsS0FML0IvZ0IsS0FLMENxbEosZUFMMUNybEosS0FLK0RnbEosT0FML0RobEosS0FNTjB0QyxLQUFLLFdBTkMxdEMsS0FNZ0Jrb0osYUFHN0IxQixjQUFjcGpKLFVBQVVzOUksT0FBUyxTQUFTNTVCLEVBQU95akIsRUFBVW53RyxHQUM5Q3A2QixLQUVOMG1KLE1BQU16NUksS0FBSzY1RyxRQUlsQjAvQixjQUFjcGpKLFVBQVUra0osTUFBUTNCLGNBQWNwakosVUFBVTQyQyxRQUFVLFdBQ3JEaDZDLEtBQ040bEosWUFBYSxFQURQNWxKLEtBRUZrb0osWUFGRWxvSixLQUdKa29KLFVBQVV0QyxZQUFhLEdBSG5CNWxKLEtBSUYrZ0IsTUFKRS9nQixLQUtKK2dCLEtBQUtvbkksU0FLZDNCLGNBQWNwakosVUFBVXUzQyxJQUFNLFNBQVN4NEMsRUFBTW9vSSxFQUFVbndHLEdBRWpDLG1CQUFUajRCLE1BQ0pBLFNBQ0VzQixZQUdBTCxVQUFVdTNDLElBQUk5MkMsS0FOWjdELEtBTXVCbUMsRUFBTW9vSSxFQUFVbndHLElBR3BEb3NILGNBQWNwakosVUFBVWdsSixhQUFlLGFBQ3ZDNUIsY0FBY3BqSixVQUFVaWxELFdBQWEsYUFDckNtK0YsY0FBY3BqSixVQUFVaWxKLFdBQWEsYUFDckM3QixjQUFjcGpKLFVBQVVrbEosbUJBQXFCLGFDalI3QyxJQUFJQyxPQUFTLFdBR1R2Z0gsS0FBTyxHQUNQd2dILEtBQU8sRUFDUEMsS0FBTyxHQUNQQyxLQUFPLEdBQ1BDLEtBQU8sSUFDUEMsWUFBYyxHQUNkQyxTQUFXLElBQ1hDLFVBQVksSUFJWkMsY0FBZ0IsZUFDaEJDLGdCQUFrQiw0QkFHbEJsbUYsaUJBQ1UsOERBQ0MsaUVBQ0ksaUJBSWZtbUYsY0FBZ0JqaEgsS0FBT3dnSCxLQUN2QjNoSSxNQUFRMWYsS0FBSzBmLE1BQ2JxaUksbUJBQXFCbDhJLE9BQU9zaEksYUFVaEMsU0FBU3BzSSxNQUFNcUMsU0FDUCxJQUFJeWxJLFdBQVdsbkUsT0FBT3YrRCxJQVc5QixTQUFTa1EsSUFBSWhOLEVBQU93Z0IsV0FDZHJoQixFQUFTYSxFQUFNYixPQUNmM0MsS0FDRzJDLE9BQ0VBLEdBQVVxaEIsRUFBR3hnQixFQUFNYixXQUVyQjNDLEVBYVQsU0FBU2tsSixVQUFVcmhKLEVBQVFtZ0IsT0FDckI4K0YsRUFBUWovRyxFQUFPeWYsTUFBTSxLQUNyQnRqQixFQUFTLFVBQ1Q4aUgsRUFBTW5nSCxPQUFTLE1BR1JtZ0gsRUFBTSxHQUFLLE1BQ1hBLEVBQU0sSUFNVjlpSCxFQURPd1EsT0FGTDNNLEVBQU9sSCxRQUFRb29KLGdCQUFpQixNQUNyQnpoSSxNQUFNLEtBQ0FVLEdBQUl2RyxLQUFLLEtBaUJyQyxTQUFTMG5JLFdBQVd0aEosV0FJaEJuRSxFQUNBMGxKLEVBSkU1ekMsS0FDRjE3RSxFQUFVLEVBQ1ZuekIsRUFBU2tCLEVBQU9sQixPQUdYbXpCLEVBQVVuekIsTUFDUGtCLEVBQU8rVSxXQUFXa2QsT0FDYixPQUFVcDJCLEdBQVMsT0FBVW8yQixFQUFVbnpCLEVBRzFCLFFBQVgsU0FETGtCLEVBQU8rVSxXQUFXa2QsU0FFakI5c0IsT0FBZSxLQUFSdEosSUFBa0IsS0FBZSxLQUFSMGxKLEdBQWlCLFVBSWpEcDhJLEtBQUt0SixVQUlQc0osS0FBS3RKLFVBR1Q4eEcsRUF5RFQsU0FBUzZ6QyxhQUFhQyxFQUFPQyxVQUdwQkQsRUFBUSxHQUFLLElBQU1BLEVBQVEsTUFBZ0IsR0FBUkMsSUFBYyxHQVExRCxTQUFTQyxNQUFNMTVFLEVBQU8yNUUsRUFBV3oyQyxPQUMzQjF0RixFQUFJLFFBQ0EwdEYsRUFBWXBzRixNQUFNa3BELEVBQVE0NEUsTUFBUTU0RSxHQUFTLEtBQzFDbHBELE1BQU1rcEQsRUFBUTI1RSxHQUNTMzVFLEVBQVFrNUUsY0FBZ0JSLE1BQVEsRUFBR2xqSSxHQUFLeWlCLE9BQzlEbmhCLE1BQU1rcEQsRUFBUWs1RSxzQkFFakJwaUksTUFBTXRCLEdBQUswakksY0FBZ0IsR0FBS2w1RSxHQUFTQSxFQUFRMjRFLE9BK0cxRCxTQUFnQmlCLE9BQU9sNkMsT0FDakJubUcsRUFDRnltRSxFQUNBNjVFLEVBQ0FDLEVBQ0FDLEVBQ0F0OUcsRUFDQTFpQixFQUNBNG1ELEVBQ0FuckQsRUFDQXVTLEVBQ0FpeUgsTUFNQUMsRUFDQUMsRUFOQXgwQyxjQVNNMnpDLFdBQVczNUMsSUFHQzdvRyxTQUdoQmlpSixXQUNJLElBQ0RELFlBR0ZwOEcsRUFBSSxFQUFHQSxFQUFJMDlHLElBQWUxOUcsS0FDZGlqRSxFQUFNampFLElBQ0YsT0FDVnYvQixLQUFLaThJLG1CQUFtQmEsVUFJbEJGLEVBQWNwMEMsRUFBTzd1RyxPQU1sQ2lqSixLQUNLNThJLEtBQUs2N0ksV0FJUGMsRUFBaUJNLEdBQWEsS0FJOUJwZ0ksRUFBSXkrSCxPQUFRLzdHLEVBQUksRUFBR0EsRUFBSTA5RyxJQUFlMTlHLEtBQzFCaWpFLEVBQU1qakUsS0FDRGxqQyxHQUFLeWdKLEVBQWVqZ0ksTUFDbENpZ0ksT0FPSmpnSSxFQUFJeGdCLEVBQUl1ZCxPQUFPMGhJLE9BQVN4NEUsTUFESjY1RSxFQUFpQixXQUVqQyxnQkFHRTkvSCxFQUFJeGdCLEdBQUs2Z0osSUFDZnJnSSxFQUVDMGlCLEVBQUksRUFBR0EsRUFBSTA5RyxJQUFlMTlHLFFBQ2RpakUsRUFBTWpqRSxJQUVGbGpDLEtBQU95bUUsRUFBUXc0RSxjQUMxQixZQUdKd0IsR0FBZ0J6Z0osRUFBRyxLQUVoQm9uRSxFQUFJWCxFQUFPeHFELEVBQUl5aUIsT0FFZDBvQyxLQURBbnJELEdBQUt1a0ksRUFBT3RCLEtBQVFqakksR0FBS3VrSSxFQUFPckIsS0FBT0EsS0FBT2xqSSxFQUFJdWtJLElBRFR2a0ksR0FBS3lpQixPQUt4QzBvQyxFQUFJNTRDLElBQ0RrUSxLQUFPbFEsSUFDYjdxQixLQUNMaThJLG1CQUFtQkksYUFBYXh4SCxFQUFJbXlILEVBQVVELEVBQVksT0FFeERuakksTUFBTW9qSSxFQUFVRCxLQUdmLzhJLEtBQUtpOEksbUJBQW1CSSxhQUFhNTRFLEVBQUcsT0FDeEMrNEUsTUFBTTE1RSxFQUFPbzZFLEVBQXVCUCxHQUFrQkMsS0FDckQsSUFDTkQsSUFJSjc1RSxJQUNBem1FLFNBR0dtc0csRUFBTy96RixLQUFLLElBaUNyQixTQUFnQjBvSSxRQUFRMzZDLFVBQ2YwNUMsVUFBVTE1QyxFQUFPLFNBQVMzbkcsVUFDeEJpaEosY0FBY3BqSixLQUFLbUMsR0FDeEIsT0FBUzZoSixPQUFPN2hKLEdBQ2hCQSxJQzFhTixTQUFTdEcsa0JBQWU4a0IsRUFBS29RLFVBQ3BCNXpCLE9BQU9NLFVBQVU1QixlQUFlcUMsS0FBS3lpQixFQUFLb1EsR0FFbkQsSUFBSTdzQixVQUFVbkMsTUFBTW1DLFNBQVcsU0FBVWsxSSxTQUNPLG1CQUF2Q2o4SSxPQUFPTSxVQUFVRSxTQUFTTyxLQUFLazdJLElBRXhDLFNBQVNzTCxtQkFBbUJwa0ksbUJBQ1hBLHNCQUFBQSxRQUNSLGdCQUNJQSxNQUVKLGlCQUNJQSxFQUFJLE9BQVMsWUFFakIsZ0JBQ0lhLFNBQVNiLEdBQUtBLEVBQUksaUJBR2xCLElBSWIsU0FBZ0JlLFVBQVdWLEVBQUtna0ksRUFBS3BrSixFQUFJN0YsWUFDakNpcUosR0FBTyxNQUNScGtKLEdBQU0sSUFDQyxPQUFSb2dCLFdBQ0k3aUIsR0FHVyxxQkFBUjZpQixzQkFBQUEsSUFDRjdSLE1BQUk4MUksV0FBV2prSSxHQUFNLFNBQVNmLE9BQy9CaWxJLEVBQUs3a0YsbUJBQW1CMGtGLG1CQUFtQjlrSSxJQUFNcmYsU0FDakQyRCxVQUFReWMsRUFBSWYsSUFDUDlRLE1BQUk2UixFQUFJZixHQUFJLFNBQVNVLFVBQ25CdWtJLEVBQUs3a0YsbUJBQW1CMGtGLG1CQUFtQnBrSSxNQUNqRHZFLEtBQUs0b0ksR0FFREUsRUFBSzdrRixtQkFBbUIwa0YsbUJBQW1CL2pJLEVBQUlmLE9BRXZEN0QsS0FBSzRvSSxHQUlManFKLEVBQ0VzbEUsbUJBQW1CMGtGLG1CQUFtQmhxSixJQUFTNkYsRUFDL0N5L0QsbUJBQW1CMGtGLG1CQUFtQi9qSSxJQUYzQixHQUtwQixTQUFTN1IsTUFBS3NxSSxFQUFJdHVFLE1BQ1pzdUUsRUFBR3RxSSxXQUFZc3FJLEVBQUd0cUksSUFBSWc4RCxXQUN0QmpuRCxLQUNLdkYsRUFBSSxFQUFHQSxFQUFJODZILEVBQUduNEksT0FBUXFkLE1BQ3pCaFgsS0FBS3dqRSxFQUFFc3VFLEVBQUc5NkgsR0FBSUEsV0FFYnVGLEVBR1QsSUFBSStnSSxXQUFhem5KLE9BQU9rQyxNQUFRLFNBQVVzaEIsT0FDcENrRCxTQUNDLElBQUkxakIsS0FBT3dnQixFQUNWeGpCLE9BQU9NLFVBQVU1QixlQUFlcUMsS0FBS3lpQixFQUFLeGdCLE1BQVVtSCxLQUFLbkgsVUFFeEQwakIsR0FHVCxTQUFnQnJKLFFBQU1zcUksRUFBSUgsRUFBS3BrSixFQUFJcUssS0FDM0IrNUksR0FBTyxNQUNScGtKLEdBQU0sUUFDUG9nQixRQUVjLGlCQUFQbWtJLEdBQWlDLElBQWRBLEVBQUc3akosY0FDeEIwZixNQUdMb2tJLEVBQVMsUUFDUkQsRUFBR2xqSSxNQUFNK2lJLE9BRVZLLEVBQVUsSUFDVnA2SSxHQUFzQyxpQkFBcEJBLEVBQVFvNkksWUFDbEJwNkksRUFBUW82SSxhQUdoQjN5SCxFQUFNeXlILEVBQUc3akosT0FFVCtqSixFQUFVLEdBQUszeUgsRUFBTTJ5SCxNQUNqQkEsT0FHSCxJQUFJMW1JLEVBQUksRUFBR0EsRUFBSStULElBQU8vVCxFQUFHLEtBR3hCMm1JLEVBQU1DLEVBQU10bEksRUFBR1UsRUFGZjhqRCxFQUFJMGdGLEVBQUd4bUksR0FBR3JqQixRQUFROHBKLEVBQVEsT0FDMUI5OEQsRUFBTTdqQixFQUFFamlELFFBQVE1aEIsR0FHaEIwbkYsR0FBTyxLQUNGN2pCLEVBQUU3bkQsT0FBTyxFQUFHMHJFLEtBQ1o3akIsRUFBRTduRCxPQUFPMHJFLEVBQU0sT0FFZjdqQixJQUNBLE1BR0wvb0UsbUJBQW1CNHBKLEtBQ25CNXBKLG1CQUFtQjZwSixHQUVsQnJwSixrQkFBZThrQixFQUFLZixHQUVkMWIsVUFBUXljLEVBQUlmLE1BQ2pCQSxHQUFHdFksS0FBS2daLEtBRVJWLElBQU1lLEVBQUlmLEdBQUlVLEtBSmRWLEdBQUtVLFNBUU5LLFdDcEdPd2tJLFdBQ1RDLFNBQVcsVUFDWEMsUUFBVSxVQUNWcEUsS0FBTyxVQUNQbm1FLEtBQU8sVUFDUHdxRSxLQUFPLFVBQ1BDLFNBQVcsVUFDWDdtSSxLQUFPLFVBQ1AzakIsT0FBUyxVQUNUSCxNQUFRLFVBQ1Jva0IsU0FBVyxVQUNYL2lCLEtBQU8sVUFDUCtoRSxLQUFPLEtBT2QsSUFBSXduRixnQkFBa0Isb0JBQ3BCQyxZQUFjLFdBR2RDLGtCQUFvQixxQ0FJcEJDLFFBQVUsSUFBSyxJQUFLLElBQUssSUFBSyxJQUFLLEtBQU0sS0FBTSxNQUcvQ0MsUUFBVSxJQUFLLElBQUssSUFBSyxLQUFNLElBQUssS0FBSzdvSSxPQUFPNG9JLFFBR2hERSxZQUFjLEtBQU05b0ksT0FBTzZvSSxRQUszQkUsY0FBZ0IsSUFBSyxJQUFLLElBQUssSUFBSyxLQUFLL29JLE9BQU84b0ksWUFDaERFLGlCQUFtQixJQUFLLElBQUssS0FDN0JDLGVBQWlCLElBQ2pCQyxvQkFBc0IseUJBQ3RCQyxrQkFBb0IsK0JBRXBCQyw0QkFDZ0IsaUJBQ0MsR0FHakJDLDhCQUNnQixpQkFDQyxHQUdqQkMsdUJBQ1UsU0FDQyxPQUNGLFVBQ0csUUFDRixXQUNDLFlBQ0MsVUFDRixhQUNHLFdBQ0YsR0FHYixTQUFTQyxTQUFTbHNJLEVBQUttc0ksRUFBa0JDLE1BQ25DcHNJLEdBQU96YixXQUFTeWIsSUFBUUEsYUFBZStxSSxXQUFZL3FJLE1BRW5EdXNHLEVBQUksSUFBSXcrQixhQUNWM3FJLE1BQU1KLEVBQUttc0ksRUFBa0JDLEdBQ3hCNy9CLEVBTVQsU0FBU25zRyxRQUFNdmQsRUFBTW1kLEVBQUttc0ksRUFBa0JDLE9BQ3JDeFcsU0FBUzUxSCxTQUNOLElBQUkxRCxVQUFVLG1EQUFvRDBELHNCQUFBQSxTQU10RXFzSSxFQUFhcnNJLEVBQUkrSCxRQUFRLEtBQzNCdWtJLEdBQ2lCLElBQWhCRCxHQUFxQkEsRUFBYXJzSSxFQUFJK0gsUUFBUSxLQUFRLElBQU0sSUFDN0R3a0ksRUFBU3ZzSSxFQUFJd0gsTUFBTThrSSxLQUVkLEdBQUtDLEVBQU8sR0FBRzFySixRQURQLE1BQzJCLFNBR3RDNHpELElBRkU4M0YsRUFBTzVxSSxLQUFLMnFJLFFBTVg3M0YsRUFBS3RVLFFBRVBpc0csR0FBK0MsSUFBMUJwc0ksRUFBSXdILE1BQU0sS0FBSzNnQixPQUFjLEtBRWpEMmxKLEVBQWFsQixrQkFBa0J0cUosS0FBS3l6RCxNQUNwQyszRixXQUNHM3FKLEtBQU80eUQsSUFDUG1QLEtBQU9uUCxJQUNQN3ZDLFNBQVc0bkksRUFBVyxHQUN2QkEsRUFBVyxNQUNSN3JKLE9BQVM2ckosRUFBVyxLQUVsQmhzSixNQURIMnJKLEVBQ1dNLFFBQVE1cEosRUFBS2xDLE9BQU93aEIsT0FBTyxJQUUzQnRmLEVBQUtsQyxPQUFPd2hCLE9BQU8sSUFFekJncUksTUFDSnhySixPQUFTLEtBQ1RILFVBRUFxQyxNQXVCUHFoQixFQUFHd29JLEVBQUszakksRUFBRzhRLEVBbkJYM3JCLEVBQVFrOUksZ0JBQWdCcHFKLEtBQUt5ekQsTUFDN0J2bUQsRUFBTyxLQUVMeStJLEtBREl6K0ksRUFBTSxJQUNTdVosZ0JBQ2xCdWpJLFNBQVcyQixJQUNUbDRGLEVBQUt0eUMsT0FBT2pVLEVBQU1ySCxXQU92QnVsSixHQUFxQmwrSSxHQUFTdW1ELEVBQUtwekQsTUFBTSx3QkFBeUIsS0FDaEU0cEosRUFBZ0MsT0FBdEJ4MkYsRUFBS3R5QyxPQUFPLEVBQUcsSUFDekI4b0ksR0FBYS84SSxHQUFTODlJLGlCQUFpQjk5SSxPQUNsQ3VtRCxFQUFLdHlDLE9BQU8sS0FDZDhvSSxTQUFVLE9BSWRlLGlCQUFpQjk5SSxLQUNuQis4SSxHQUFZLzhJLElBQVUrOUksZ0JBQWdCLzlJLElBQVUsS0EyQjdDMjRJLEVBQU0rRixFQVROQyxHQUFXLE1BQ1Yzb0ksRUFBSSxFQUFHQSxFQUFJeW5JLGdCQUFnQjlrSixPQUFRcWQsS0FFekIsT0FEUHV3QyxFQUFLMXNDLFFBQVE0akksZ0JBQWdCem5JLFFBQ0gsSUFBYjJvSSxHQUFrQkgsRUFBTUcsT0FDL0JILFFBaUJFLFFBWEMsSUFBYkcsRUFFT3A0RixFQUFLcHlDLFlBQVksS0FJakJveUMsRUFBS3B5QyxZQUFZLElBQUt3cUksUUFNeEJwNEYsRUFBS2hqRCxNQUFNLEVBQUdtN0ksS0FDZG40RixFQUFLaGpELE1BQU1tN0ksRUFBUyxLQUN0Qi9GLEtBQU81bEosbUJBQW1CNGxKLE9BSXRCLEVBQ04zaUksRUFBSSxFQUFHQSxFQUFJd25JLGFBQWE3a0osT0FBUXFkLEtBRXRCLE9BRFB1d0MsRUFBSzFzQyxRQUFRMmpJLGFBQWF4bkksUUFDQSxJQUFiMm9JLEdBQWtCSCxFQUFNRyxPQUMvQkgsSUFHRyxJQUFiRyxNQUNRcDRGLEVBQUs1dEQsVUFFWjY1RSxLQUFPanNCLEVBQUtoakQsTUFBTSxFQUFHbzdJLEtBQ25CcDRGLEVBQUtoakQsTUFBTW83SSxhQUdSaHFKLEtBSUxzb0osU0FBV3RvSixFQUFLc29KLFVBQVksT0FJN0IyQixFQUFvQyxNQUFyQmpxSixFQUFLc29KLFNBQVMsSUFDYSxNQUE1Q3RvSixFQUFLc29KLFNBQVN0b0osRUFBS3NvSixTQUFTdGtKLE9BQVMsT0FHbENpbUosRUFBYyxLQUNiQyxFQUFZbHFKLEVBQUtzb0osU0FBUzNqSSxNQUFNLFVBQy9CdEQsRUFBSSxFQUFHNkUsRUFBSWdrSSxFQUFVbG1KLE9BQVFxZCxFQUFJNkUsRUFBRzdFLElBQUssS0FDeEM4b0ksRUFBT0QsRUFBVTdvSSxNQUNoQjhvSSxJQUNBQSxFQUFLM3JKLE1BQU13cUoscUJBQXNCLFNBQ2hDb0IsRUFBVSxHQUNMeGdILEVBQUksRUFBR2puQixFQUFJd25JLEVBQUtubUosT0FBUTRsQyxFQUFJam5CLEVBQUdpbkIsSUFDbEN1Z0gsRUFBS2x3SSxXQUFXMnZCLEdBQUssT0FJWixPQUVBdWdILEVBQUt2Z0gsT0FJZndnSCxFQUFRNXJKLE1BQU13cUoscUJBQXNCLEtBQ25DcUIsRUFBYUgsRUFBVXQ3SSxNQUFNLEVBQUd5UyxHQUNoQ2lwSSxFQUFVSixFQUFVdDdJLE1BQU15UyxFQUFJLEdBQzlCa3BJLEVBQU1KLEVBQUszckosTUFBTXlxSixtQkFDakJzQixNQUNTbGdKLEtBQUtrZ0osRUFBSSxNQUNaaDdHLFFBQVFnN0csRUFBSSxLQUVsQkQsRUFBUXRtSixXQUNILElBQU1zbUosRUFBUXhySSxLQUFLLEtBQU84eUMsS0FFOUIwMkYsU0FBVytCLEVBQVd2ckksS0FBSyxjQU9wQzllLEVBQUtzb0osU0FBU3RrSixPQUFTK2tKLGlCQUNwQlQsU0FBVyxLQUdYQSxTQUFXdG9KLEVBQUtzb0osU0FBUzFqSSxjQUczQnFsSSxNQUtFM0IsU0FBV2QsUUFBUXhuSixFQUFLc29KLGFBRzNCdG9KLEVBQUtxb0osS0FBTyxJQUFNcm9KLEVBQUtxb0osS0FBTyxPQUM5Qng4RixFQUFJN3JELEVBQUtzb0osVUFBWSxLQUNwQnpxRSxLQUFPaHlCLEVBQUk3MEIsSUFDWCtwQyxNQUFRL2dFLEVBQUs2OUUsS0FJZG9zRSxNQUNHM0IsU0FBV3RvSixFQUFLc29KLFNBQVNocEksT0FBTyxFQUFHdGYsRUFBS3NvSixTQUFTdGtKLE9BQVMsR0FDL0MsTUFBWjR0RCxFQUFLLE9BQ0EsSUFBTUEsUUFPZHMzRixlQUFlWSxPQUtiem9JLEVBQUksRUFBRzZFLEVBQUkwaUksV0FBVzVrSixPQUFRcWQsRUFBSTZFLEVBQUc3RSxJQUFLLEtBQ3pDbXBJLEVBQUs1QixXQUFXdm5JLE9BQ00sSUFBdEJ1d0MsRUFBSzFzQyxRQUFRc2xJLFFBRWJDLEVBQU0xbkYsbUJBQW1CeW5GLEdBQ3pCQyxJQUFRRCxNQUNKeDlJLE9BQU93OUksTUFFUjU0RixFQUFLanRDLE1BQU02bEksR0FBSTFySSxLQUFLMnJJLFFBTTNCaHBJLEVBQU9td0MsRUFBSzFzQyxRQUFRLE1BQ1YsSUFBVnpELE1BRUdBLEtBQU9td0MsRUFBS3R5QyxPQUFPbUMsS0FDakJtd0MsRUFBS2hqRCxNQUFNLEVBQUc2UyxRQUVuQmlwSSxFQUFLOTRGLEVBQUsxc0MsUUFBUSxTQUNWLElBQVJ3bEksS0FDRzVzSixPQUFTOHpELEVBQUt0eUMsT0FBT29ySSxLQUNyQi9zSixNQUFRaTBELEVBQUt0eUMsT0FBT29ySSxFQUFLLEdBQzFCcEIsTUFDRzNySixNQUFRaXNKLFFBQVE1cEosRUFBS3JDLFVBRXJCaTBELEVBQUtoakQsTUFBTSxFQUFHODdJLElBQ1pwQixNQUVKeHJKLE9BQVMsS0FDVEgsVUFFSGkwRCxNQUFXN3ZDLFNBQVc2dkMsR0FDdEJ3M0YsZ0JBQWdCVSxJQUNsQjlwSixFQUFLc29KLFdBQWF0b0osRUFBSytoQixhQUNsQkEsU0FBVyxLQUlkL2hCLEVBQUsraEIsVUFBWS9oQixFQUFLbEMsT0FBUSxHQUM1QmtDLEVBQUsraEIsVUFBWSxPQUNqQnBqQixFQUFJcUIsRUFBS2xDLFFBQVUsS0FDbEJrQixLQUFPZzRCLEVBQUlyNEIsV0FJYm9pRSxLQUFPbXNDLFNBQU9sdEcsR0FDWkEsRUFhVCxTQUFTa3RHLFNBQU9sdEcsT0FDVmdrSixFQUFPaGtKLEVBQUtna0osTUFBUSxHQUNwQkEsU0FDS2poRixtQkFBbUJpaEYsSUFDZGhtSixRQUFRLE9BQVEsUUFDcEIsU0FHTm1xSixFQUFXbm9KLEVBQUttb0osVUFBWSxHQUM5QnBtSSxFQUFXL2hCLEVBQUsraEIsVUFBWSxHQUM1Qk4sRUFBT3poQixFQUFLeWhCLE1BQVEsR0FDcEJvOEQsR0FBTyxFQUNQbGdGLEVBQVEsR0FFTnFDLEVBQUs2OUUsT0FDQW1tRSxFQUFPaGtKLEVBQUs2OUUsS0FDVjc5RSxFQUFLc29KLGFBQ1B0RSxJQUF3QyxJQUFoQ2hrSixFQUFLc29KLFNBQVNwakksUUFBUSxLQUNuQ2xsQixFQUFLc29KLFNBQ0wsSUFBTWxySixLQUFLa3JKLFNBQVcsS0FDcEJ0b0osRUFBS3FvSixVQUNDLElBQU1yb0osRUFBS3FvSixPQUluQnJvSixFQUFLckMsT0FDUCtELFdBQVMxQixFQUFLckMsUUFDZHVDLE9BQU9rQyxLQUFLcEMsRUFBS3JDLE9BQU9xRyxXQUNoQjJtSixVQUFZM3FKLEVBQUtyQyxZQUd2QkcsRUFBU2tDLEVBQUtsQyxRQUFXSCxHQUFVLElBQU1BLEdBQVcsVUFFcER3cUosR0FBb0MsTUFBeEJBLEVBQVM3b0ksUUFBUSxRQUF3QixLQUlyRHRmLEVBQUtvb0osV0FDTEQsR0FBWWlCLGdCQUFnQmpCLE1BQXVCLElBQVR0cUUsS0FDckMsTUFBUUEsR0FBUSxJQUNuQjk3RCxHQUFtQyxNQUF2QkEsRUFBUzRELE9BQU8sT0FBdUIsSUFBTTVELElBQ25EODdELE1BQ0gsSUFHTHA4RCxHQUEyQixNQUFuQkEsRUFBS2tFLE9BQU8sT0FBbUIsSUFBTWxFLEdBQzdDM2pCLEdBQStCLE1BQXJCQSxFQUFPNm5CLE9BQU8sT0FBcUIsSUFBTTduQixHQU9oRHFxSixFQUFXdHFFLEtBTFA5N0QsRUFBUy9qQixRQUFRLFFBQVMsU0FBU1EsVUFDckN1a0UsbUJBQW1CdmtFLFNBRW5CVixFQUFPRSxRQUFRLElBQUssUUFFZ0J5akIsRUFxUy9DLFNBQVNtcEksVUFBVTVxSixPQUNiNjlFLEVBQU83OUUsRUFBSzY5RSxLQUNad3FFLEVBQU9HLFlBQVlycUosS0FBSzAvRSxHQUN4QndxRSxJQUVXLFNBRE5BLEVBQUssUUFFTEEsS0FBT0EsRUFBSy9vSSxPQUFPLE1BRW5CdStELEVBQUt2K0QsT0FBTyxFQUFHdStELEVBQUs3NUUsT0FBU3FrSixFQUFLcmtKLFNBRXZDNjVFLE1BQVd5cUUsU0FBV3pxRSxHQ3ZzQnJCLFNBQVNtRCxRQUFRajNELEVBQU15TixHQUNSLGlCQUFUek4sTUFDRnhNLFNBQU13TSxRQU1YOGdJLEdBQW9FLElBQWxEOXFKLFNBQU9sQyxTQUFTc3FKLFNBQVNycUosT0FBTyxhQUFzQixRQUFVLEdBRWxGcXFKLEVBQVdwK0gsRUFBS28rSCxVQUFZMEMsRUFDNUJodEUsRUFBTzl6RCxFQUFLdStILFVBQVl2K0gsRUFBSzh6RCxLQUM3QndxRSxFQUFPdCtILEVBQUtzK0gsS0FDWnJwSixFQUFPK3FCLEVBQUsvcUIsTUFBUSxJQUdwQjYrRSxJQUErQixJQUF2QkEsRUFBSzM0RCxRQUFRLFNBQ2hCLElBQU0yNEQsRUFBTyxPQUdqQjFnRSxLQUFPMGdFLEVBQVFzcUUsRUFBVyxLQUFPdHFFLEVBQVEsS0FBT3dxRSxFQUFPLElBQU1BLEVBQU8sSUFBTXJwSixJQUMxRSt2QixRQUFVaEYsRUFBS2dGLFFBQVUsT0FBT3RKLGdCQUNoQzQ4SCxRQUFVdDRILEVBQUtzNEgsZ0JBSWhCeUksRUFBTSxJQUFJbEgsY0FBYzc1SCxVQUN4QnlOLEtBQ0VzQyxHQUFHLFdBQVl0QyxHQUNkc3pILEVBR1QsU0FBZ0JoNkksTUFBSWlaLEVBQU15TixPQUNwQnN6SCxFQUFNOXBFLFFBQVFqM0QsRUFBTXlOLFlBQ3BCdWdCLE1BQ0creUcsRUFHVCxTQUFnQkMsU0QwQ2hCN0MsSUFBSTFuSixVQUFVK2MsTUFBUSxTQUFTSixFQUFLbXNJLEVBQWtCQyxVQUM3Q2hzSSxRQUFNbmdCLEtBQU0rZixFQUFLbXNJLEVBQWtCQyxJQTBVNUNyQixJQUFJMW5KLFVBQVUwc0csT0FBUyxrQkFDZEEsU0FBTzl2RyxPQU9oQjhxSixJQUFJMW5KLFVBQVVxWCxRQUFVLFNBQVNtekksVUFDeEI1dEosS0FBSzZ0SixjQUFjNUIsU0FBUzJCLEdBQVUsR0FBTyxJQUFPOTlDLFVBUTdEZzdDLElBQUkxbkosVUFBVXlxSixjQUFnQixTQUFTRCxNQUNqQ2pZLFNBQVNpWSxHQUFXLEtBQ2xCRSxFQUFNLElBQUloRCxNQUNWM3FJLE1BQU15dEksR0FBVSxHQUFPLEtBQ2hCRSxVQXVDVEMsRUFwQ0E5cEosRUFBUyxJQUFJNm1KLElBQ2JrRCxFQUFRbHJKLE9BQU9rQyxLQUFLaEYsTUFDZml1SixFQUFLLEVBQUdBLEVBQUtELEVBQU1wbkosT0FBUXFuSixJQUFNLEtBQ3BDdjVCLEVBQU9zNUIsRUFBTUMsS0FDVnY1QixHQUFRMTBILEtBQUswMEgsUUFLZnJ3RyxLQUFPdXBJLEVBQVN2cEksS0FHRCxLQUFsQnVwSSxFQUFTanFGLGNBQ0pBLEtBQU8xL0QsRUFBTzZyRyxTQUNkN3JHLEtBSUwycEosRUFBUzVDLFVBQVk0QyxFQUFTN0MsU0FBVSxTQUV0Q21ELEVBQVFwckosT0FBT2tDLEtBQUs0b0osR0FDZk8sRUFBSyxFQUFHQSxFQUFLRCxFQUFNdG5KLE9BQVF1bkosSUFBTSxLQUNwQ0MsRUFBT0YsRUFBTUMsR0FDSixhQUFUQyxNQUNLQSxHQUFRUixFQUFTUSxXQUl4QnBDLGdCQUFnQi9uSixFQUFPOG1KLFdBQ3pCOW1KLEVBQU9pbkosV0FBYWpuSixFQUFPMGdCLGFBQ3BCL2lCLEtBQU9xQyxFQUFPMGdCLFNBQVcsT0FHM0JnL0MsS0FBTzEvRCxFQUFPNnJHLFNBQ2Q3ckcsS0FHTDJwSixFQUFTN0MsVUFBWTZDLEVBQVM3QyxXQUFhOW1KLEVBQU84bUosU0FBVSxLQVN6RGlCLGdCQUFnQjRCLEVBQVM3QyxVQUFXLFNBQ25DL2xKLEVBQU9sQyxPQUFPa0MsS0FBSzRvSixHQUNkM25JLEVBQUksRUFBR0EsRUFBSWpoQixFQUFLNEIsT0FBUXFmLElBQUssS0FDaENWLEVBQUl2Z0IsRUFBS2loQixLQUNOVixHQUFLcW9JLEVBQVNyb0ksWUFFaEJvK0MsS0FBTzEvRCxFQUFPNnJHLFNBQ2Q3ckcsT0FHRjhtSixTQUFXNkMsRUFBUzdDLFNBQ3RCNkMsRUFBU250RSxNQUFTc3JFLGlCQUFpQjZCLEVBQVM3QyxZQVN4Q3BtSSxTQUFXaXBJLEVBQVNqcEksYUFUK0IsUUFDL0NpcEksRUFBU2pwSSxVQUFZLElBQUk0QyxNQUFNLEtBQ25Dd21JLEVBQVFubkosVUFBWWduSixFQUFTbnRFLEtBQU9zdEUsRUFBUS92SCxXQUM5QzR2SCxFQUFTbnRFLFNBQWVBLEtBQU8sSUFDL0JtdEUsRUFBUzFDLGFBQW1CQSxTQUFXLElBQ3pCLEtBQWY2QyxFQUFRLE1BQW1CNTdHLFFBQVEsSUFDbkM0N0csRUFBUW5uSixPQUFTLEtBQVd1ckMsUUFBUSxNQUNqQ3h0QixTQUFXb3BJLEVBQVFyc0ksS0FBSyxVQUkxQmhoQixPQUFTa3RKLEVBQVNsdEosU0FDbEJILE1BQVFxdEosRUFBU3J0SixRQUNqQmtnRixLQUFPbXRFLEVBQVNudEUsTUFBUSxLQUN4Qm1tRSxLQUFPZ0gsRUFBU2hILE9BQ2hCc0UsU0FBVzBDLEVBQVMxQyxVQUFZMEMsRUFBU250RSxPQUN6Q3dxRSxLQUFPMkMsRUFBUzNDLEtBRW5CaG5KLEVBQU8wZ0IsVUFBWTFnQixFQUFPdkQsT0FBUSxLQUNoQ2s1QixFQUFJMzFCLEVBQU8wZ0IsVUFBWSxHQUN2QnBqQixFQUFJMEMsRUFBT3ZELFFBQVUsS0FDbEJrQixLQUFPZzRCLEVBQUlyNEIsV0FFYnlwSixRQUFVL21KLEVBQU8rbUosU0FBVzRDLEVBQVM1QyxVQUNyQ3JuRixLQUFPMS9ELEVBQU82ckcsU0FDZDdyRyxNQXNDTG9xSixFQW5DQUMsRUFBZXJxSixFQUFPMGdCLFVBQTBDLE1BQTlCMWdCLEVBQU8wZ0IsU0FBUzRELE9BQU8sR0FDM0RnbUksRUFDRVgsRUFBU250RSxNQUNUbXRFLEVBQVNqcEksVUFBNEMsTUFBaENpcEksRUFBU2pwSSxTQUFTNEQsT0FBTyxHQUVoRGltSSxFQUFjRCxHQUFZRCxHQUN2QnJxSixFQUFPdzhFLE1BQVFtdEUsRUFBU2pwSSxTQUMzQjhwSSxFQUFnQkQsRUFDaEJFLEVBQVV6cUosRUFBTzBnQixVQUFZMWdCLEVBQU8wZ0IsU0FBUzRDLE1BQU0sU0FDbkRvbkksRUFBWTFxSixFQUFPOG1KLFdBQWFpQixnQkFBZ0IvbkosRUFBTzhtSixlQUMvQzZDLEVBQVNqcEksVUFBWWlwSSxFQUFTanBJLFNBQVM0QyxNQUFNLFNBTW5Eb25JLE1BQ0t6RCxTQUFXLEtBQ1hELEtBQU8sS0FDVmhuSixFQUFPdzhFLE9BQ1UsS0FBZml1RSxFQUFRLEtBQW1CLEdBQUt6cUosRUFBT3c4RSxPQUM5QnR1QyxRQUFRbHVDLEVBQU93OEUsU0FFdkJBLEtBQU8sR0FDVm10RSxFQUFTN0MsYUFDRkcsU0FBVyxPQUNYRCxLQUFPLEtBQ1oyQyxFQUFTbnRFLE9BQ1EsS0FBZnN0RSxFQUFRLEtBQW1CLEdBQUtILEVBQVNudEUsT0FDaEN0dUMsUUFBUXk3RyxFQUFTbnRFLFNBRXZCQSxLQUFPLFFBRUwrdEUsSUFBOEIsS0FBZlQsRUFBUSxJQUE0QixLQUFmVyxFQUFRLEtBR3ZESCxJQUVLOXRFLEtBQVFtdEUsRUFBU250RSxNQUEwQixLQUFsQm10RSxFQUFTbnRFLEtBQ3ZDbXRFLEVBQVNudEUsS0FBT3g4RSxFQUFPdzhFLE9BQ2xCeXFFLFNBQVkwQyxFQUFTMUMsVUFBa0MsS0FBdEIwQyxFQUFTMUMsU0FDL0MwQyxFQUFTMUMsU0FBV2puSixFQUFPaW5KLFdBQ3RCeHFKLE9BQVNrdEosRUFBU2x0SixTQUNsQkgsTUFBUXF0SixFQUFTcnRKLFFBQ2R3dEosT0FFTCxHQUFJQSxFQUFRbm5KLE9BR1o4bkosWUFDRzU3SSxRQUNFNDdJLEVBQVFoc0ksT0FBT3FySSxLQUNsQnJ0SixPQUFTa3RKLEVBQVNsdEosU0FDbEJILE1BQVFxdEosRUFBU3J0SixXQUNuQixJQUFLdTNJLGtCQUFrQjhWLEVBQVNsdEosZUFJakNpdUosTUFDS3pELFNBQVdqbkosRUFBT3c4RSxLQUFPaXVFLEVBQVExd0gsY0FJM0IvNUIsRUFBT3c4RSxNQUFReDhFLEVBQU93OEUsS0FBSzM0RCxRQUFRLEtBQU8sSUFDckQ3akIsRUFBT3c4RSxLQUFLbDVELE1BQU0sVUFFWHEvSCxLQUFPeUgsRUFBV3J3SCxVQUNsQnlpRCxLQUFPeDhFLEVBQU9pbkosU0FBV21ELEVBQVdyd0gsWUFHeEN0OUIsT0FBU2t0SixFQUFTbHRKLFNBQ2xCSCxNQUFRcXRKLEVBQVNydEosTUFFbkJ1MUksT0FBTzd4SSxFQUFPMGdCLFdBQWNteEgsT0FBTzd4SSxFQUFPdkQsWUFDdENrQixNQUFRcUMsRUFBTzBnQixTQUFXMWdCLEVBQU8wZ0IsU0FBVyxLQUNoRDFnQixFQUFPdkQsT0FBU3VELEVBQU92RCxPQUFTLE9BRTlCaWpFLEtBQU8xL0QsRUFBTzZyRyxTQUNkN3JHLE1BR0p5cUosRUFBUTluSixnQkFHSitkLFNBQVcsS0FFZDFnQixFQUFPdkQsU0FDRmtCLEtBQU8sSUFBTXFDLEVBQU92RCxTQUVwQmtCLEtBQU8sT0FFVCtoRSxLQUFPMS9ELEVBQU82ckcsU0FDZDdyRyxVQU1MOHFCLEVBQU8yL0gsRUFBUWw5SSxPQUFPLEdBQUcsR0FDekJvOUksR0FDRDNxSixFQUFPdzhFLE1BQVFtdEUsRUFBU250RSxNQUFRaXVFLEVBQVE5bkosT0FBUyxLQUN4QyxNQUFUbW9CLEdBQXlCLE9BQVRBLElBQTJCLEtBQVRBLEVBSWpDOC9ILEVBQUssRUFDQTVxSSxFQUFJeXFJLEVBQVE5bkosT0FBUXFkLEdBQUssRUFBR0EsSUFFdEIsU0FETnlxSSxFQUFRenFJLE1BRUxyUixPQUFPcVIsRUFBRyxHQUNBLE9BQVQ4SyxLQUNEbmMsT0FBT3FSLEVBQUcsUUFFVDRxSSxNQUNEajhJLE9BQU9xUixFQUFHLFlBTWpCdXFJLElBQWVDLE9BQ1hJLElBQU1BLElBQ0gxOEcsUUFBUSxPQUloQnE4RyxHQUE2QixLQUFmRSxFQUFRLElBQ3RCQSxFQUFRLElBQStCLE1BQXpCQSxFQUFRLEdBQUdubUksT0FBTyxNQUMxQjRwQixRQUFRLElBR2R5OEcsR0FBc0QsTUFBakNGLEVBQVFodEksS0FBSyxLQUFLUSxRQUFRLE1BQ3pDalYsS0FBSyxRQUdYNmhKLEVBQTRCLEtBQWZKLEVBQVEsSUFDdEJBLEVBQVEsSUFBK0IsTUFBekJBLEVBQVEsR0FBR25tSSxPQUFPLFVBRy9Cb21JLE1BQ0t6RCxTQUFXam5KLEVBQU93OEUsS0FBT3F1RSxFQUFhLEdBQzNDSixFQUFROW5KLE9BQVM4bkosRUFBUTF3SCxRQUFVLFNBSXhCLzVCLEVBQU93OEUsTUFBUXg4RSxFQUFPdzhFLEtBQUszNEQsUUFBUSxLQUFPLElBQ3JEN2pCLEVBQU93OEUsS0FBS2w1RCxNQUFNLFVBRVhxL0gsS0FBT3lILEVBQVdyd0gsVUFDbEJ5aUQsS0FBT3g4RSxFQUFPaW5KLFNBQVdtRCxFQUFXcndILGFBSWxDd3dILEdBQWV2cUosRUFBT3c4RSxNQUFRaXVFLEVBQVE5bkosVUFFaENrb0osS0FDVDM4RyxRQUFRLElBR2J1OEcsRUFBUTluSixTQUlKK2QsU0FBVytwSSxFQUFRaHRJLEtBQUssUUFIeEJpRCxTQUFXLE9BQ1gvaUIsS0FBTyxNQU1YazBJLE9BQU83eEksRUFBTzBnQixXQUFjbXhILE9BQU83eEksRUFBT3ZELFlBQ3RDa0IsTUFBUXFDLEVBQU8wZ0IsU0FBVzFnQixFQUFPMGdCLFNBQVcsS0FDaEQxZ0IsRUFBT3ZELE9BQVN1RCxFQUFPdkQsT0FBUyxPQUU5QmttSixLQUFPZ0gsRUFBU2hILE1BQVEzaUosRUFBTzJpSixPQUMvQm9FLFFBQVUvbUosRUFBTyttSixTQUFXNEMsRUFBUzVDLFVBQ3JDcm5GLEtBQU8xL0QsRUFBTzZyRyxTQUNkN3JHLEdBR1Q2bUosSUFBSTFuSixVQUFVb3FKLFVBQVksa0JBQ2pCQSxVQUFVeHRKLE9DbnBCbkIydEosTUFBTW9CLGtCQUFvQixFQUUxQixJQUFXQyxTQUNULFdBQ0EsVUFDQSxPQUNBLFNBQ0EsTUFDQSxPQUNBLE9BQ0EsV0FDQSxRQUNBLGFBQ0EsUUFDQSxPQUNBLFNBQ0EsVUFDQSxRQUNBLE9BQ0EsV0FDQSxZQUNBLFFBQ0EsTUFDQSxTQUNBLFNBQ0EsWUFDQSxRQUNBLFNBQ0EsZUFFU0Msa0JBQ0osZUFDQSwwQkFDQSxpQkFDQSxTQUNBLGNBQ0EsZUFDQSxvQ0FDQSxpQkFDQSxvQkFDQSxzQkFDQSxtQkFDQSx1QkFDQSx3QkFDQSx3QkFDQSxnQkFDQSxtQkFDQSxnQkFDQSx5QkFDQSxrQkFDQSxtQkFDQSx1QkFDQSxnQkFDQSxnQkFDQSx5QkFDQSxxQkFDQSxvQ0FDQSx1QkFDQSxlQUNBLFdBQ0Esc0JBQ0EsMEJBQ0EsK0JBQ0EsNEJBQ0EsNkJBQ0Esc0NBQ0EseUJBQ0EsbUJBQ0EsMkJBQ0EsYUFDQSx3QkFDQSwyQkFDQSx1QkFDQSw0QkFDQSx3QkFDQSxzQ0FDQSw0QkFDQSxzQkFDQSxrQkFDQSwwQkFDQSx1QkFDQSxpQ0FDQSw4QkFDQSwyQkFDQSwrQkFDQSxtQkFDQSxrREFJTHJyRSxZQUNBbHdFLFlBQ0FpNkksY0FDQXFCLHFCQUNBQyxpRUNyS1FDLFlBVUNDLFFBQ0hsb0osRUFBTyxHQUFLTyxVQUFVWixVQUFZNEssTUFBTTNOLEtBQUsyRCxVQUFXLE1BQ3hEcWdCLEVBQU81Z0IsRUFBSysyQixRQUNaakIsRUFBUzkxQixFQUFLKzJCLGNBRVpqM0IsTUFBTS9HLEtBQU1pSCxRQUNibUgsUUFBVXBPLEtBQUtvTyxTQUFXLDJCQUFrQzhSLEtBQUs4RyxVQUFVYSxHQUFRLGFBQWUzSCxLQUFLOEcsVUFBVStWLEtBZmhIdVgsUUFBVSxVQUdWdTRCLHFDQUVhLE1BYUF6cEUsVUFBWWtMLFFBR3pCdzBELDZCQUNnQnFzRixLQUloQkMsZ0JBQWtCLFNBQVNDLFlBQzdCQSxJQUFhdnNKLE9BQU9rQyxLQUFLcXFKLEdBQVV6b0osWUFHOUJ5b0osRUFBUzlxSixRQUFVOHFKLEVBQVNDLGFBQWU1bkosTUFBTW1DLFFBQVF3bEosRUFBU0MsZ0JBQWtCRCxFQUFTQyxZQUFZMW9KLFdBSzVHdVosTUFBUSxTQUFTeTFILEVBQVM3NEcsRUFBUWtKLE9BQ3BDc3BILEVBRUFDLEVBREFoL0ksV0FnQ2lCdXNCLEVBQVE4dkMsT0FDekJyOEQsRUFBV3VzQixVQUVYLElBQUkweUgsS0FBVzVpRixFQUNkQSxFQUFTcnJFLGVBQWVpdUosS0FBYWovSSxFQUFTaS9JLE9BQ3RDQSxHQUFXNWlGLEVBQVM0aUYsV0FJMUJqL0ksRUF6Q1FrL0ksQ0FBYzN5SCxFQUFRLzhCLEtBQUs2c0UsZUFHaENqbUUsT0FBUyxXQWtGSm0yQixPQUdYLElBQUlwOEIsT0FGRGd2SixRQUVVNXlILEVBQ1pBLEVBQU92N0IsZUFBZWIsS0FBb0MsSUFBMUJpdkosRUFBTTluSSxRQUFRbm5CLE9BQ3hDZ3ZKLEtBQUtodkosR0FBU284QixFQUFPcDhCLFVBQ3JCbzhCLEVBQU9wOEIsY0FXS284QixPQUNuQixJQUFJcDhCLEtBQVNvOEIsRUFDWkEsRUFBT3Y3QixlQUFlYixLQUNLLGlCQUFsQm84QixFQUFPcDhCLEtBQ0xzTSxLQUFLOHZCLEVBQU9wOEIsSUFDWSxXQUF6Qnd5RyxRQUFPcDJFLEVBQU9wOEIsUUFDYnNNLEtBQUs4dkIsRUFBT3A4QixHQUFPLE1BQ25Cc00sS0FBSzh2QixFQUFPcDhCLEdBQU8sU0FLWCxJQUFyQmt2SixFQUFVanBKLGFBQXNCLElBQUkwSCxNQUFNLHFDQW5CN0J5dUIsRUFBTzR5SCxPQTNGZm4vSSxjQTZNZXVzQixPQUNuQjUzQixFQUVBNDNCLEVBQU84VyxTQUFZOVcsRUFBTzZXLFFBUXBCN1csRUFBTzZXLFVBQ1IsU0FBU2s4RyxLQUNQbDhHLFFBQVF0aEMsUUFBUSxTQUFTa2lDLEtBQ25CQSxHQUFReDBDLEtBQUt3MEMsSUFDdkJ4MEMsT0FFRys4QixFQUFPOFcsWUFDUixTQUFTaThHLE9BQ1YsSUFBSXQ3RyxLQUFReDBDLEtBQ1hBLEtBQUt3QixlQUFlZ3pDLEtBQXVDLElBQTdCcTdHLEVBQVUvbkksUUFBUTBzQixLQUFvRCxJQUFsQ3pYLEVBQU84VyxRQUFRL3JCLFFBQVEwc0IsT0FDL0VBLEdBQVF4MEMsS0FBS3cwQyxRQWpCdkIsU0FBU3M3RyxPQUNWLElBQUl0N0csS0FBUXgwQyxLQUNYQSxLQUFLd0IsZUFBZWd6QyxLQUF1QyxJQUE3QnE3RyxFQUFVL25JLFFBQVEwc0IsT0FDdENBLEdBQVF4MEMsS0FBS3cwQyxZQW9CekIsZUFDRHM3RyxjQUVDanNKLEtBQUs3RCxLQUFNOHZKLEdBRWIveUgsRUFBT3NzSCxnQkFPSXlHLEVBQVl6RyxPQUN4QixJQUFJdmpKLEtBQU91akosRUFDVkEsRUFBTTduSixlQUFlc0UsT0FDWEEsR0FBT3VqSixFQUFNdmpKLEtBVkVncUosRUFBWS95SCxFQUFPc3NILE9BQ3hDeUcsR0E3T0VDLENBQWdCdi9JLEdBRXZCOUksTUFBTW1DLFFBQVErckksT0FDTHJ4SSxLQUFRLG9CQUFxQnlySixlQUNoQzE5SSxRQUFRLFNBQVN1VixLQUNmbW9JLFNBQVMvaUosS0FBS2dqSixHQUFZcG9JLEtBQUtBLEVBQU1rVixPQUFRdnNCLEVBQVVnL0ksU0FBU0EsU0FFN0RELEVBQVMvK0ksUUFFWnkvSSxHQUFZcG9JLEtBQUsrdEgsRUFBUzc0RyxPQUFRdnNCLEVBQVVnL0ksU0FBU0EsSUFDekNoL0ksSUFHcEJ5MUIsR0FBZ0MsbUJBQWJBLFNBR2RzcEgsSUFGRUEsUUFPVEssR0FBUyxRQUFTLGFBQWMsYUFBYyxrQkFBbUIsVUFBVyxlQUFnQixXQUM1RkMsY0FtQktLLEVBQWFYLEVBQVMvK0ksTUFDMUJBLEVBQVMyL0ksY0FrQklBLE1BQ0MsU0FBYkEsRUFBSTVySixLQUFpQixJQUNqQjRySixFQUFJTCxZQUFjSyxFQUFJTCxXQUFXenZKLFlBQzFCLFFBRUQsSUFBSWlPLE1BQU0sbURBRWpCLEdBQWlCLFNBQWI2aEosRUFBSTVySixLQUFpQixJQUN4QjRySixFQUFJTCxZQUFjSyxFQUFJTCxXQUFXbnNGLE1BQVF3c0YsRUFBSUwsV0FBV3ZySixZQUNqRCxRQUVELElBQUkrSixNQUFNLG9FQUdkLElBQUlBLE1BQU0sdURBaENEOGhKLENBQVM1L0ksRUFBUzIvSSxPQUNoQzMvSSxFQUFTNi9JLGFBQ0ZoQixTQUFTYyxJQUFNMy9JLEVBQVMyL0ksTUFFeEJBLElBQU0zL0ksRUFBUzIvSSxLQUV2QjMvSSxFQUFTOC9JLFNBQ0hBLEtBQU85L0ksRUFBUzgvSSxNQUV0QjkvSSxFQUFTKy9JLGdCQUVOLElBQUl6cUosT0FERGdxSixjQUNRdC9JLEVBQVMrL0ksY0FDZlQsV0FBV2hxSixHQUFPMEssRUFBUysvSSxZQUFZenFKLFlBNEQ1Q21xSixFQUFXaHBKLE9BQ2Q0Z0IsRUFBTzVnQixFQUFLNGdCLEtBQ2RrVixFQUFTOTFCLEVBQUs4MUIsT0FDZHl5SCxFQUFXdm9KLEVBQUt1b0osU0FFZGdCLEdBQVlqc0osS0FBUSxvQkFFaEI4cUosa0JBWURvQixFQUFVNW9JLEVBQU1rVixPQUNuQjR5SCxTQUdBLElBQUllLEtBQVMzekgsRUFBTzR5SCxLQUFNLEtBQ3hCaHBJLEVBQU1vVyxFQUFPNHlILEtBQUtlLE1BR0osaUJBQVIvcEksR0FBb0JrQixFQUFLcm1CLGVBQWVtbEIsR0FDbkMsWUFBVitwSSxJQUNNN29JLEVBQUtsQixNQUVQcGlCLEtBQU9tc0osSUFDUHBCLFlBQWN6bkksRUFBS2xCLFNBVXZCLEdBQWtCLHFCQUFSQSxzQkFBQUEsS0FBcUJqZixNQUFNbUMsUUFBUThjLElBZTdDLEdBQUdqZixNQUFNbUMsUUFBUThjLElBQVFrQixFQUFLcm1CLGVBQWVtbEIsRUFBSSxLQUFPa0IsRUFBS3JtQixlQUFlbWxCLEVBQUksTUFDOUVwaUIsS0FBT21zSixJQUNQcEIsYUFBZS8ySCxPQUFPMVEsRUFBS2xCLEVBQUksS0FBTTRSLE9BQU8xUSxFQUFLbEIsRUFBSSxXQUl2RCxHQUFHamYsTUFBTW1DLFFBQVE4YyxJQUFRZ3FJLEVBQVNocUksRUFBSSxLQUFPZ3FJLEVBQVNocUksRUFBSSxJQUFJLFNBQzdEMm9JLEtBQ0tyckksRUFBSSxFQUFHQSxFQUFJMEMsRUFBSS9mLE9BQVFxZCxJQUFLLFNBQy9CMnNJLEVBQVFqcUksRUFBSTFDLEdBQUdzRCxNQUFNLEtBQ3JCc3BJLEVBQVlocEksRUFDUDJrQixFQUFJLEVBQUdBLEVBQUlva0gsRUFBTWhxSixPQUFRNGxDLElBQUssS0FDaENxa0gsRUFBVXJ2SixlQUFlb3ZKLEVBQU1wa0gsV0FDM0IsSUFFR3FrSCxFQUFVRCxFQUFNcGtILE1BRWxCdm9CLEdBQUs0c0ksSUFFZHRzSixLQUFPbXNKLElBQ1BwQixhQUFlLzJILE9BQU8rMkgsRUFBWSxJQUFLLzJILE9BQU8rMkgsRUFBWSxVQW5DVCxLQUVsRDN4RSxFQUFTNzZFLE9BQU9rQyxLQUFLMmhCLEdBQUtsUyxJQUFJLFNBQVMzTyxPQUNyQ2dySixFQUFRbnFJLEVBQUk3Z0IsR0FDWmlySixFQUFVbHBJLEVBQUsvaEIsVUFDWjJxSixFQUFVTSxHQUFVcEIsTUFBT2oxQixNQUFPbzJCLFNBRXRDdnNKLEtBQU9tc0osSUFFUHBCLGVBQWlCNXNJLE9BQU9pN0QsRUFBT2xwRSxJQUFJLFNBQVNtbEIsVUFDeENBLEVBQUUwMUgsbUJBNkJadnlILEVBQU9pMEgsVUFBWWowSCxFQUFPaTBILFNBQVNDLGtCQUFvQi9CLEVBQVFFLGdCQUFnQk8sU0FDMUUsSUFBSVIsRUFBcUJ0bkksRUFBTWtWLFVBR2hDNHlILEVBOUVZYyxDQUFVNW9JLEVBQU1rVixLQUMzQit5SCxXQUFhTixFQUFTM3JKLEtBQUtna0IsR0FFNUIyb0ksV0FHQUcsRUFBU2hxSSxvQkFDR2hoQixLQUFLZ2hCLEtBNkgxQnhjLEVBQW1DSCxrQkN4U2IsbUJBQ0ksRUFBRSwyQkFDQSw4RkNBSnFsSixjQUNKNkIsU0FFdEIsU0FBUzdCLFNBQVMzK0ksT0FDQXVULEVBQVZ5bkQsRUFBTyxTQUNIaDdELEVBQUVuTSxVQUNELGlCQUNNNHNKLFlBQVl6Z0osRUFBRTQrSSxpQkFDcEIsbUJBQ0lyckksRUFBSSxFQUFHQSxFQUFJdlQsRUFBRTQrSSxZQUFZMW9KLE9BQVFxZCxPQUMxQmt0SSxZQUFZemdKLEVBQUU0K0ksWUFBWXJySSxXQUUvQnluRCxNQUNOLFlBQ0EsaUJBQ0EsaUJBQ0EseUJBQ00sTUFDTix5QkFDSXpuRCxFQUFJLEVBQUdBLEVBQUl2VCxFQUFFMGdKLFdBQVd4cUosT0FBUXFkLE9BQ3pCb3JJLFNBQVMzK0ksRUFBRTBnSixXQUFXbnRJLFdBRTNCeW5ELEdBSW5CLFNBQVN5bEYsWUFBWUUsT0FDYjNsRixFQUFPLEtBQ1AybEYsR0FBVUEsRUFBT3pxSixPQUFTLEVBQUcsSUFDckJPLEtBQUttMEUsSUFBSTQxRSxTQUFTRyxFQUFPLFNBQzVCLElBQUlwdEksRUFBSSxFQUFHQSxFQUFJb3RJLEVBQU96cUosT0FBUXFkLE9BQ3ZCOWMsS0FBS20wRSxJQUFJNDFFLFNBQVNHLEVBQU9wdEksWUFHbEN5bkQsRUFrQlgsU0FBU3dsRixTQUFTRyxPQUNWLzVDLEVBQUlDLEVBQVErNUMsRUFBWUMsRUFBYUMsRUFBWXZ0SSxFQUNyRHluRCxFQUFPLEVBQ1ArbEYsRUFBZUosRUFBT3pxSixVQUVsQjZxSixFQUFlLEVBQUcsS0FDYnh0SSxFQUFJLEVBQUdBLEVBQUl3dEksRUFBY3h0SSxJQUN0QkEsSUFBTXd0SSxFQUFlLEtBQ1JBLEVBQWUsSUFDZEEsRUFBYyxJQUNmLEdBQ054dEksSUFBTXd0SSxFQUFlLEtBQ2ZBLEVBQWUsSUFDZCxJQUNELE1BRUF4dEksSUFDQ0EsRUFBRSxJQUNIQSxFQUFFLEtBRWRvdEksRUFBT0MsS0FDUEQsRUFBT0UsT0FFRkcsSUFETEwsRUFBT0csR0FDSyxJQUFNRSxJQUFJcDZDLEVBQUcsS0FBUW53RyxLQUFLa2lFLElBQUtxb0YsSUFBSW42QyxFQUFHLE9BR3BEN3JDLEVBQU9pbUYsTUFBTUMsT0FBU0QsTUFBTUMsT0FBUyxTQUd6Q2xtRixFQUdYLFNBQVNnbUYsSUFBSWhoSixVQUNGQSxFQUFJdkosS0FBS2lpRSxHQUFLLGtFQ3JGUnlvRixPQUVqQixTQUFTQSxPQUFPQyxFQUFJQyxVQUNQRCxHQUFNQSxFQUFHdnRKLE1BQVMsVUFDbEIsNkJBQ0V5ckosU0FBVzhCLEVBQUc5QixTQUFTdjdJLElBQUl1OUksV0FBV0gsT0FBUUUsSUFDMUNELE1BQ04sbUJBQ0V6QyxTQUFXd0MsT0FBT0MsRUFBR3pDLFNBQVUwQyxHQUMzQkQsTUFDTixjQUNBLHNCQUNNRyxRQUFRSCxFQUFJQyxrQkFFWkQsR0FJbkIsU0FBU0UsV0FBV25wSSxFQUFHWSxVQUNaLFNBQVMvWSxVQUFZbVksRUFBRW5ZLEVBQUcrWSxJQUdyQyxTQUFTd29JLFFBQVF2aEosRUFBR3FoSixTQUNELFlBQVhyaEosRUFBRW5NLE9BQ0ErcUosWUFBYzRDLGFBQWF4aEosRUFBRTQrSSxZQUFheUMsR0FDMUIsaUJBQVhyaEosRUFBRW5NLFNBQ1ArcUosWUFBYzUrSSxFQUFFNCtJLFlBQVk3NkksSUFBSXU5SSxXQUFXRSxhQUFjSCxLQUV4RHJoSixFQUdYLFNBQVN3aEosYUFBYXhoSixFQUFHcWhKLE9BQ1hBLElBQ1IsR0FBS0ksS0FBS3poSixFQUFFLEdBQUlxaEosT0FDYixJQUFJOXRJLEVBQUksRUFBR0EsRUFBSXZULEVBQUU5SixPQUFRcWQsTUFDeEJBLEdBQUtrdUksS0FBS3poSixFQUFFdVQsSUFBSzh0SSxVQUVoQnJoSixFQUdYLFNBQVN5aEosS0FBS3poSixFQUFHMU8sVUFDTjQrRSxHQUFHbHdFLEtBQU8xTyxFQUFNME8sRUFBSUEsRUFBRTYyRCxVQUdqQyxTQUFTcVosR0FBR2x3RSxVQUNEMGhKLFlBQVlDLEtBQUszaEosSUFBTSxFQ3RDbEMsSUFBTW1ELE1BQ0osU0FBWXJELEVBQWVyTyw4Q0FDcEJBLEtBQU9BLE9BQ1BxTyxTQUFXQSxPQUNYbVAsUUFNVDlMLGdCQUFFOEwsb0JBQ01tcEIsVUFBVSxXQUFZd3BILGtCQUV0QjNxSCxRQUNFLDhCQUNTLEtBQU0saUNBR1Q0cUgsUUFBUXB3SiwrQkFJWHF3SixzQkFDQUMsMkVBSUcvK0ksSUFBSSxpRUFBMERnL0ksT0FDOUR2d0osRUFBTyxLQUVOdTZCLEdBQUcsZ0JBQVNvcUYsTUFDUEEsTUFHTHBxRixHQUFHLG1CQUNDeGMsS0FBS0MsTUFBTWhlLFdBRVZBLEtBQUt3d0osU0FBVzN5SixFQUFLNHlKLGlCQUFpQnp3SixPQUUvQ3U2QixHQUFHLGlCQUFVL0QsV0FDTngyQixLQUFLd3dKLGlCQUNKLFVBQ0VoNkgsRUFBSXZxQiw0REFLWHNGLElBQUksaUVBQTBEZy9JLE9BQzlEdndKLEVBQU8sS0FFTnU2QixHQUFHLGdCQUFTb3FGLE1BQ1BBLE1BR0xwcUYsR0FBRyxtQkFDQ3hjLEtBQUtDLE1BQU1oZSxXQUVWQSxLQUFLMHdKLGNBQWdCN3lKLEVBQUs0eUosaUJBQWlCendKLE9BRXBEdTZCLEdBQUcsaUJBQVUvRCxXQUNOeDJCLEtBQUswd0osc0JBQ0osVUFDRWw2SCxFQUFJdnFCLHNDQUlGMGtKLFVBRUZqQixjQUFPM0MsUUFBUS91SSxNQUFNMnlJLEdBQVc1RCxRQUFTLG1CQVloRXI3SSxnQkFBRW16RCxvQkFBV3JtRSxXQUNEcUIsSUFBSXJCLElDeEVoQixJQUFNb3lKLGlDQU1KQyxlQUFNcHhKLFVBQ0csSUFBSUQsTUFBTUMsSUFRckJteEosZUFBRW56SSxjQUFLcFAsVUFDSSxJQUFJOE8sS0FBSzlPLElBT3BCdWlKLGVBQUVodkksZ0JBQU92VCxVQUNFLElBQUl5UyxRQU9mOHZJLGVBQUVFLGVBQU16aUosVUFDRyxJQUFJOFQsT0FHZnl1SSxlQUFFRyx5QkFDUyxJQUFJcnRGLFFBTWZrdEYsZUFBRS9zRixlQUFNemhFLFNBQ1MsUUFBVEEsRUFDSyxJQUFJd2pJLFNBRUEsa0JBQVR4akksRUFDSyxJQUFJMGpJLG1CQUVBLFNBQVQxakksRUFDSyxJQUFJMmpJLFVBRUEsUUFBVDNqSSxFQUNLLElBQUk0akksaUJBT2pCNHFCLGVBQUV0K0ksc0JBQ1MsSUFBSVoifQ==
