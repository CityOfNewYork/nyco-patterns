"use strict";var Utility$1=function(){return this};Utility$1.debug=function(){return"1"===Utility$1.getUrlParameter(Utility$1.PARAMS.DEBUG)},Utility$1.getUrlParameter=function(e,t){var n=t||window.location.search,r=e.replace(/[\[]/,"\\[").replace(/[\]]/,"\\]"),i=new RegExp("[\\?&]"+r+"=([^&#]*)").exec(n);return null===i?"":decodeURIComponent(i[1].replace(/\+/g," "))},Utility$1.localize=function(e){var t=e||"",n=(window.LOCALIZED_STRINGS||[]).filter(function(t){return!(!t.hasOwnProperty("slug")||t.slug!==e)&&t});return n[0]&&n[0].hasOwnProperty("label")?n[0].label:t},Utility$1.PARAMS={DEBUG:"debug"},Utility$1.SELECTORS={parseMarkdown:'[data-js="markdown"]'};var Icons=function e(t){return t=t||e.path,fetch(t).then(function(e){if(e.ok)return e.text();Utility$1.debug()&&console.dir(e)}).catch(function(e){Utility$1.debug()&&console.dir(e)}).then(function(e){var t=document.createElement("div");t.innerHTML=e,t.setAttribute("aria-hidden",!0),t.setAttribute("style","display: none;"),document.body.appendChild(t)}),this};Icons.path="icons.svg";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},freeGlobal="object"==("undefined"==typeof global?"undefined":_typeof(global))&&global&&global.Object===Object&&global,freeSelf="object"==("undefined"==typeof self?"undefined":_typeof(self))&&self&&self.Object===Object&&self,root=freeGlobal||freeSelf||Function("return this")(),_Symbol=root.Symbol,objectProto=Object.prototype,hasOwnProperty=objectProto.hasOwnProperty,nativeObjectToString=objectProto.toString,symToStringTag=_Symbol?_Symbol.toStringTag:void 0;function getRawTag(e){var t=hasOwnProperty.call(e,symToStringTag),n=e[symToStringTag];try{e[symToStringTag]=void 0;var r=!0}catch(e){}var i=nativeObjectToString.call(e);return r&&(t?e[symToStringTag]=n:delete e[symToStringTag]),i}var objectProto$1=Object.prototype,nativeObjectToString$1=objectProto$1.toString;function objectToString(e){return nativeObjectToString$1.call(e)}var nullTag="[object Null]",undefinedTag="[object Undefined]",symToStringTag$1=_Symbol?_Symbol.toStringTag:void 0;function baseGetTag(e){return null==e?void 0===e?undefinedTag:nullTag:symToStringTag$1&&symToStringTag$1 in Object(e)?getRawTag(e):objectToString(e)}function isObject(e){var t=void 0===e?"undefined":_typeof(e);return null!=e&&("object"==t||"function"==t)}var asyncTag="[object AsyncFunction]",funcTag="[object Function]",genTag="[object GeneratorFunction]",proxyTag="[object Proxy]";function isFunction(e){if(!isObject(e))return!1;var t=baseGetTag(e);return t==funcTag||t==genTag||t==asyncTag||t==proxyTag}var coreJsData=root["__core-js_shared__"],maskSrcKey=function(){var e=/[^.]+$/.exec(coreJsData&&coreJsData.keys&&coreJsData.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}();function isMasked(e){return!!maskSrcKey&&maskSrcKey in e}var funcProto=Function.prototype,funcToString=funcProto.toString;function toSource(e){if(null!=e){try{return funcToString.call(e)}catch(e){}try{return e+""}catch(e){}}return""}var reRegExpChar=/[\\^$.*+?()[\]{}|]/g,reIsHostCtor=/^\[object .+?Constructor\]$/,funcProto$1=Function.prototype,objectProto$2=Object.prototype,funcToString$1=funcProto$1.toString,hasOwnProperty$1=objectProto$2.hasOwnProperty,reIsNative=RegExp("^"+funcToString$1.call(hasOwnProperty$1).replace(reRegExpChar,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");function baseIsNative(e){return!(!isObject(e)||isMasked(e))&&(isFunction(e)?reIsNative:reIsHostCtor).test(toSource(e))}function getValue(e,t){return null==e?void 0:e[t]}function getNative(e,t){var n=getValue(e,t);return baseIsNative(n)?n:void 0}var defineProperty$1=function(){try{var e=getNative(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();function baseAssignValue(e,t,n){"__proto__"==t&&defineProperty$1?defineProperty$1(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}function eq(e,t){return e===t||e!=e&&t!=t}var objectProto$3=Object.prototype,hasOwnProperty$2=objectProto$3.hasOwnProperty;function assignValue(e,t,n){var r=e[t];hasOwnProperty$2.call(e,t)&&eq(r,n)&&(void 0!==n||t in e)||baseAssignValue(e,t,n)}function copyObject(e,t,n,r){var i=!n;n||(n={});for(var a=-1,o=t.length;++a<o;){var s=t[a],l=r?r(n[s],e[s],s,n,e):void 0;void 0===l&&(l=e[s]),i?baseAssignValue(n,s,l):assignValue(n,s,l)}return n}function identity(e){return e}function apply(e,t,n){switch(n.length){case 0:return e.call(t);case 1:return e.call(t,n[0]);case 2:return e.call(t,n[0],n[1]);case 3:return e.call(t,n[0],n[1],n[2])}return e.apply(t,n)}var nativeMax=Math.max;function overRest(e,t,n){return t=nativeMax(void 0===t?e.length-1:t,0),function(){for(var r=arguments,i=-1,a=nativeMax(r.length-t,0),o=Array(a);++i<a;)o[i]=r[t+i];i=-1;for(var s=Array(t+1);++i<t;)s[i]=r[i];return s[t]=n(o),apply(e,this,s)}}function constant(e){return function(){return e}}var baseSetToString=defineProperty$1?function(e,t){return defineProperty$1(e,"toString",{configurable:!0,enumerable:!1,value:constant(t),writable:!0})}:identity,HOT_COUNT=800,HOT_SPAN=16,nativeNow=Date.now;function shortOut(e){var t=0,n=0;return function(){var r=nativeNow(),i=HOT_SPAN-(r-n);if(n=r,i>0){if(++t>=HOT_COUNT)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}var setToString=shortOut(baseSetToString);function baseRest(e,t){return setToString(overRest(e,t,identity),e+"")}var MAX_SAFE_INTEGER=9007199254740991;function isLength(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=MAX_SAFE_INTEGER}function isArrayLike(e){return null!=e&&isLength(e.length)&&!isFunction(e)}var MAX_SAFE_INTEGER$1=9007199254740991,reIsUint=/^(?:0|[1-9]\d*)$/;function isIndex(e,t){var n=void 0===e?"undefined":_typeof(e);return!!(t=null==t?MAX_SAFE_INTEGER$1:t)&&("number"==n||"symbol"!=n&&reIsUint.test(e))&&e>-1&&e%1==0&&e<t}function isIterateeCall(e,t,n){if(!isObject(n))return!1;var r=void 0===t?"undefined":_typeof(t);return!!("number"==r?isArrayLike(n)&&isIndex(t,n.length):"string"==r&&t in n)&&eq(n[t],e)}function createAssigner(e){return baseRest(function(t,n){var r=-1,i=n.length,a=i>1?n[i-1]:void 0,o=i>2?n[2]:void 0;for(a=e.length>3&&"function"==typeof a?(i--,a):void 0,o&&isIterateeCall(n[0],n[1],o)&&(a=i<3?void 0:a,i=1),t=Object(t);++r<i;){var s=n[r];s&&e(t,s,r,a)}return t})}function baseTimes(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r}function isObjectLike(e){return null!=e&&"object"==(void 0===e?"undefined":_typeof(e))}var argsTag="[object Arguments]";function baseIsArguments(e){return isObjectLike(e)&&baseGetTag(e)==argsTag}var objectProto$4=Object.prototype,hasOwnProperty$3=objectProto$4.hasOwnProperty,propertyIsEnumerable=objectProto$4.propertyIsEnumerable,isArguments=baseIsArguments(function(){return arguments}())?baseIsArguments:function(e){return isObjectLike(e)&&hasOwnProperty$3.call(e,"callee")&&!propertyIsEnumerable.call(e,"callee")},isArray=Array.isArray;function stubFalse(){return!1}var freeExports="object"==("undefined"==typeof exports?"undefined":_typeof(exports))&&exports&&!exports.nodeType&&exports,freeModule=freeExports&&"object"==("undefined"==typeof module?"undefined":_typeof(module))&&module&&!module.nodeType&&module,moduleExports=freeModule&&freeModule.exports===freeExports,Buffer=moduleExports?root.Buffer:void 0,nativeIsBuffer=Buffer?Buffer.isBuffer:void 0,isBuffer=nativeIsBuffer||stubFalse,argsTag$1="[object Arguments]",arrayTag="[object Array]",boolTag="[object Boolean]",dateTag="[object Date]",errorTag="[object Error]",funcTag$1="[object Function]",mapTag="[object Map]",numberTag="[object Number]",objectTag="[object Object]",regexpTag="[object RegExp]",setTag="[object Set]",stringTag="[object String]",weakMapTag="[object WeakMap]",arrayBufferTag="[object ArrayBuffer]",dataViewTag="[object DataView]",float32Tag="[object Float32Array]",float64Tag="[object Float64Array]",int8Tag="[object Int8Array]",int16Tag="[object Int16Array]",int32Tag="[object Int32Array]",uint8Tag="[object Uint8Array]",uint8ClampedTag="[object Uint8ClampedArray]",uint16Tag="[object Uint16Array]",uint32Tag="[object Uint32Array]",typedArrayTags={};function baseIsTypedArray(e){return isObjectLike(e)&&isLength(e.length)&&!!typedArrayTags[baseGetTag(e)]}function baseUnary(e){return function(t){return e(t)}}typedArrayTags[float32Tag]=typedArrayTags[float64Tag]=typedArrayTags[int8Tag]=typedArrayTags[int16Tag]=typedArrayTags[int32Tag]=typedArrayTags[uint8Tag]=typedArrayTags[uint8ClampedTag]=typedArrayTags[uint16Tag]=typedArrayTags[uint32Tag]=!0,typedArrayTags[argsTag$1]=typedArrayTags[arrayTag]=typedArrayTags[arrayBufferTag]=typedArrayTags[boolTag]=typedArrayTags[dataViewTag]=typedArrayTags[dateTag]=typedArrayTags[errorTag]=typedArrayTags[funcTag$1]=typedArrayTags[mapTag]=typedArrayTags[numberTag]=typedArrayTags[objectTag]=typedArrayTags[regexpTag]=typedArrayTags[setTag]=typedArrayTags[stringTag]=typedArrayTags[weakMapTag]=!1;var freeExports$1="object"==("undefined"==typeof exports?"undefined":_typeof(exports))&&exports&&!exports.nodeType&&exports,freeModule$1=freeExports$1&&"object"==("undefined"==typeof module?"undefined":_typeof(module))&&module&&!module.nodeType&&module,moduleExports$1=freeModule$1&&freeModule$1.exports===freeExports$1,freeProcess=moduleExports$1&&freeGlobal.process,nodeUtil=function(){try{var e=freeModule$1&&freeModule$1.require&&freeModule$1.require("util").types;return e||freeProcess&&freeProcess.binding&&freeProcess.binding("util")}catch(e){}}(),nodeIsTypedArray=nodeUtil&&nodeUtil.isTypedArray,isTypedArray=nodeIsTypedArray?baseUnary(nodeIsTypedArray):baseIsTypedArray,objectProto$5=Object.prototype,hasOwnProperty$4=objectProto$5.hasOwnProperty;function arrayLikeKeys(e,t){var n=isArray(e),r=!n&&isArguments(e),i=!n&&!r&&isBuffer(e),a=!n&&!r&&!i&&isTypedArray(e),o=n||r||i||a,s=o?baseTimes(e.length,String):[],l=s.length;for(var c in e)!t&&!hasOwnProperty$4.call(e,c)||o&&("length"==c||i&&("offset"==c||"parent"==c)||a&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||isIndex(c,l))||s.push(c);return s}var objectProto$6=Object.prototype;function isPrototype(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||objectProto$6)}function nativeKeysIn(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t}var objectProto$7=Object.prototype,hasOwnProperty$5=objectProto$7.hasOwnProperty;function baseKeysIn(e){if(!isObject(e))return nativeKeysIn(e);var t=isPrototype(e),n=[];for(var r in e)("constructor"!=r||!t&&hasOwnProperty$5.call(e,r))&&n.push(r);return n}function keysIn(e){return isArrayLike(e)?arrayLikeKeys(e,!0):baseKeysIn(e)}var assignInWith=createAssigner(function(e,t,n,r){copyObject(t,keysIn(t),e,r)});function overArg(e,t){return function(n){return e(t(n))}}var getPrototype=overArg(Object.getPrototypeOf,Object),objectTag$1="[object Object]",funcProto$2=Function.prototype,objectProto$8=Object.prototype,funcToString$2=funcProto$2.toString,hasOwnProperty$6=objectProto$8.hasOwnProperty,objectCtorString=funcToString$2.call(Object);function isPlainObject(e){if(!isObjectLike(e)||baseGetTag(e)!=objectTag$1)return!1;var t=getPrototype(e);if(null===t)return!0;var n=hasOwnProperty$6.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&funcToString$2.call(n)==objectCtorString}var domExcTag="[object DOMException]",errorTag$1="[object Error]";function isError(e){if(!isObjectLike(e))return!1;var t=baseGetTag(e);return t==errorTag$1||t==domExcTag||"string"==typeof e.message&&"string"==typeof e.name&&!isPlainObject(e)}var attempt=baseRest(function(e,t){try{return apply(e,void 0,t)}catch(e){return isError(e)?e:new Error(e)}});function arrayMap(e,t){for(var n=-1,r=null==e?0:e.length,i=Array(r);++n<r;)i[n]=t(e[n],n,e);return i}function baseValues(e,t){return arrayMap(t,function(t){return e[t]})}var objectProto$9=Object.prototype,hasOwnProperty$7=objectProto$9.hasOwnProperty;function customDefaultsAssignIn(e,t,n,r){return void 0===e||eq(e,objectProto$9[n])&&!hasOwnProperty$7.call(r,n)?t:e}var stringEscapes={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"};function escapeStringChar(e){return"\\"+stringEscapes[e]}var nativeKeys=overArg(Object.keys,Object),objectProto$10=Object.prototype,hasOwnProperty$8=objectProto$10.hasOwnProperty;function baseKeys(e){if(!isPrototype(e))return nativeKeys(e);var t=[];for(var n in Object(e))hasOwnProperty$8.call(e,n)&&"constructor"!=n&&t.push(n);return t}function keys(e){return isArrayLike(e)?arrayLikeKeys(e):baseKeys(e)}var reInterpolate=/<%=([\s\S]+?)%>/g;function basePropertyOf(e){return function(t){return null==e?void 0:e[t]}}var htmlEscapes={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},escapeHtmlChar=basePropertyOf(htmlEscapes),symbolTag="[object Symbol]";function isSymbol(e){return"symbol"==(void 0===e?"undefined":_typeof(e))||isObjectLike(e)&&baseGetTag(e)==symbolTag}var INFINITY=1/0,symbolProto=_Symbol?_Symbol.prototype:void 0,symbolToString=symbolProto?symbolProto.toString:void 0;function baseToString(e){if("string"==typeof e)return e;if(isArray(e))return arrayMap(e,baseToString)+"";if(isSymbol(e))return symbolToString?symbolToString.call(e):"";var t=e+"";return"0"==t&&1/e==-INFINITY?"-0":t}function toString(e){return null==e?"":baseToString(e)}var reUnescapedHtml=/[&<>"']/g,reHasUnescapedHtml=RegExp(reUnescapedHtml.source);function escape(e){return(e=toString(e))&&reHasUnescapedHtml.test(e)?e.replace(reUnescapedHtml,escapeHtmlChar):e}var reEscape=/<%-([\s\S]+?)%>/g,reEvaluate=/<%([\s\S]+?)%>/g,templateSettings={escape:reEscape,evaluate:reEvaluate,interpolate:reInterpolate,variable:"",imports:{_:{escape:escape}}},reEmptyStringLeading=/\b__p \+= '';/g,reEmptyStringMiddle=/\b(__p \+=) '' \+/g,reEmptyStringTrailing=/(__e\(.*?\)|\b__t\)) \+\n'';/g,reEsTemplate=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,reNoMatch=/($^)/,reUnescapedString=/['\n\r\u2028\u2029\\]/g;function template(e,t,n){var r=templateSettings.imports._.templateSettings||templateSettings;n&&isIterateeCall(e,t,n)&&(t=void 0),e=toString(e),t=assignInWith({},t,r,customDefaultsAssignIn);var i,a,o=assignInWith({},t.imports,r.imports,customDefaultsAssignIn),s=keys(o),l=baseValues(o,s),c=0,u=t.interpolate||reNoMatch,d="__p += '",h=RegExp((t.escape||reNoMatch).source+"|"+u.source+"|"+(u===reInterpolate?reEsTemplate:reNoMatch).source+"|"+(t.evaluate||reNoMatch).source+"|$","g"),f="sourceURL"in t?"//# sourceURL="+t.sourceURL+"\n":"";e.replace(h,function(t,n,r,o,s,l){return r||(r=o),d+=e.slice(c,l).replace(reUnescapedString,escapeStringChar),n&&(i=!0,d+="' +\n__e("+n+") +\n'"),s&&(a=!0,d+="';\n"+s+";\n__p += '"),r&&(d+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),c=l+t.length,t}),d+="';\n";var p=t.variable;p||(d="with (obj) {\n"+d+"\n}\n"),d=(a?d.replace(reEmptyStringLeading,""):d).replace(reEmptyStringMiddle,"$1").replace(reEmptyStringTrailing,"$1;"),d="function("+(p||"obj")+") {\n"+(p?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+d+"return __p\n}";var g=attempt(function(){return Function(s,f+"return "+d).apply(void 0,l)});if(g.source=d,isError(g))throw g;return g}function arrayEach(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e}function createBaseFor(e){return function(t,n,r){for(var i=-1,a=Object(t),o=r(t),s=o.length;s--;){var l=o[e?s:++i];if(!1===n(a[l],l,a))break}return t}}var baseFor=createBaseFor();function baseForOwn(e,t){return e&&baseFor(e,t,keys)}function createBaseEach(e,t){return function(n,r){if(null==n)return n;if(!isArrayLike(n))return e(n,r);for(var i=n.length,a=t?i:-1,o=Object(n);(t?a--:++a<i)&&!1!==r(o[a],a,o););return n}}var baseEach=createBaseEach(baseForOwn);function castFunction(e){return"function"==typeof e?e:identity}function forEach(e,t){return(isArray(e)?arrayEach:baseEach)(e,castFunction(t))}function listCacheClear(){this.__data__=[],this.size=0}function assocIndexOf(e,t){for(var n=e.length;n--;)if(eq(e[n][0],t))return n;return-1}var arrayProto=Array.prototype,splice=arrayProto.splice;function listCacheDelete(e){var t=this.__data__,n=assocIndexOf(t,e);return!(n<0)&&(n==t.length-1?t.pop():splice.call(t,n,1),--this.size,!0)}function listCacheGet(e){var t=this.__data__,n=assocIndexOf(t,e);return n<0?void 0:t[n][1]}function listCacheHas(e){return assocIndexOf(this.__data__,e)>-1}function listCacheSet(e,t){var n=this.__data__,r=assocIndexOf(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this}function ListCache(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function stackClear(){this.__data__=new ListCache,this.size=0}function stackDelete(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n}function stackGet(e){return this.__data__.get(e)}function stackHas(e){return this.__data__.has(e)}ListCache.prototype.clear=listCacheClear,ListCache.prototype.delete=listCacheDelete,ListCache.prototype.get=listCacheGet,ListCache.prototype.has=listCacheHas,ListCache.prototype.set=listCacheSet;var Map=getNative(root,"Map"),nativeCreate=getNative(Object,"create");function hashClear(){this.__data__=nativeCreate?nativeCreate(null):{},this.size=0}function hashDelete(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}var HASH_UNDEFINED="__lodash_hash_undefined__",objectProto$11=Object.prototype,hasOwnProperty$9=objectProto$11.hasOwnProperty;function hashGet(e){var t=this.__data__;if(nativeCreate){var n=t[e];return n===HASH_UNDEFINED?void 0:n}return hasOwnProperty$9.call(t,e)?t[e]:void 0}var objectProto$12=Object.prototype,hasOwnProperty$10=objectProto$12.hasOwnProperty;function hashHas(e){var t=this.__data__;return nativeCreate?void 0!==t[e]:hasOwnProperty$10.call(t,e)}var HASH_UNDEFINED$1="__lodash_hash_undefined__";function hashSet(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=nativeCreate&&void 0===t?HASH_UNDEFINED$1:t,this}function Hash(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}function mapCacheClear(){this.size=0,this.__data__={hash:new Hash,map:new(Map||ListCache),string:new Hash}}function isKeyable(e){var t=void 0===e?"undefined":_typeof(e);return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}function getMapData(e,t){var n=e.__data__;return isKeyable(t)?n["string"==typeof t?"string":"hash"]:n.map}function mapCacheDelete(e){var t=getMapData(this,e).delete(e);return this.size-=t?1:0,t}function mapCacheGet(e){return getMapData(this,e).get(e)}function mapCacheHas(e){return getMapData(this,e).has(e)}function mapCacheSet(e,t){var n=getMapData(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this}function MapCache(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}Hash.prototype.clear=hashClear,Hash.prototype.delete=hashDelete,Hash.prototype.get=hashGet,Hash.prototype.has=hashHas,Hash.prototype.set=hashSet,MapCache.prototype.clear=mapCacheClear,MapCache.prototype.delete=mapCacheDelete,MapCache.prototype.get=mapCacheGet,MapCache.prototype.has=mapCacheHas,MapCache.prototype.set=mapCacheSet;var LARGE_ARRAY_SIZE=200;function stackSet(e,t){var n=this.__data__;if(n instanceof ListCache){var r=n.__data__;if(!Map||r.length<LARGE_ARRAY_SIZE-1)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new MapCache(r)}return n.set(e,t),this.size=n.size,this}function Stack(e){var t=this.__data__=new ListCache(e);this.size=t.size}function assignMergeValue(e,t,n){(void 0===n||eq(e[t],n))&&(void 0!==n||t in e)||baseAssignValue(e,t,n)}Stack.prototype.clear=stackClear,Stack.prototype.delete=stackDelete,Stack.prototype.get=stackGet,Stack.prototype.has=stackHas,Stack.prototype.set=stackSet;var freeExports$2="object"==("undefined"==typeof exports?"undefined":_typeof(exports))&&exports&&!exports.nodeType&&exports,freeModule$2=freeExports$2&&"object"==("undefined"==typeof module?"undefined":_typeof(module))&&module&&!module.nodeType&&module,moduleExports$2=freeModule$2&&freeModule$2.exports===freeExports$2,Buffer$1=moduleExports$2?root.Buffer:void 0,allocUnsafe=Buffer$1?Buffer$1.allocUnsafe:void 0;function cloneBuffer(e,t){if(t)return e.slice();var n=e.length,r=allocUnsafe?allocUnsafe(n):new e.constructor(n);return e.copy(r),r}var Uint8Array=root.Uint8Array;function cloneArrayBuffer(e){var t=new e.constructor(e.byteLength);return new Uint8Array(t).set(new Uint8Array(e)),t}function cloneTypedArray(e,t){var n=t?cloneArrayBuffer(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}function copyArray(e,t){var n=-1,r=e.length;for(t||(t=Array(r));++n<r;)t[n]=e[n];return t}var objectCreate=Object.create,baseCreate=function(){function e(){}return function(t){if(!isObject(t))return{};if(objectCreate)return objectCreate(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}();function initCloneObject(e){return"function"!=typeof e.constructor||isPrototype(e)?{}:baseCreate(getPrototype(e))}function isArrayLikeObject(e){return isObjectLike(e)&&isArrayLike(e)}function safeGet(e,t){if("__proto__"!=t)return e[t]}function toPlainObject(e){return copyObject(e,keysIn(e))}function baseMergeDeep(e,t,n,r,i,a,o){var s=safeGet(e,n),l=safeGet(t,n),c=o.get(l);if(c)assignMergeValue(e,n,c);else{var u=a?a(s,l,n+"",e,t,o):void 0,d=void 0===u;if(d){var h=isArray(l),f=!h&&isBuffer(l),p=!h&&!f&&isTypedArray(l);u=l,h||f||p?isArray(s)?u=s:isArrayLikeObject(s)?u=copyArray(s):f?(d=!1,u=cloneBuffer(l,!0)):p?(d=!1,u=cloneTypedArray(l,!0)):u=[]:isPlainObject(l)||isArguments(l)?(u=s,isArguments(s)?u=toPlainObject(s):isObject(s)&&!isFunction(s)||(u=initCloneObject(l))):d=!1}d&&(o.set(l,u),i(u,l,r,a,o),o.delete(l)),assignMergeValue(e,n,u)}}function baseMerge(e,t,n,r,i){e!==t&&baseFor(t,function(a,o){if(isObject(a))i||(i=new Stack),baseMergeDeep(e,t,o,n,baseMerge,r,i);else{var s=r?r(safeGet(e,o),a,o+"",e,t,i):void 0;void 0===s&&(s=a),assignMergeValue(e,o,s)}},keysIn)}var merge=createAssigner(function(e,t,n){baseMerge(e,t,n)});function values(e){return null==e?[]:baseValues(e,keys(e))}var HASH_UNDEFINED$2="__lodash_hash_undefined__";function setCacheAdd(e){return this.__data__.set(e,HASH_UNDEFINED$2),this}function setCacheHas(e){return this.__data__.has(e)}function SetCache(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new MapCache;++t<n;)this.add(e[t])}function arraySome(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1}function cacheHas(e,t){return e.has(t)}SetCache.prototype.add=SetCache.prototype.push=setCacheAdd,SetCache.prototype.has=setCacheHas;var COMPARE_PARTIAL_FLAG=1,COMPARE_UNORDERED_FLAG=2;function equalArrays(e,t,n,r,i,a){var o=n&COMPARE_PARTIAL_FLAG,s=e.length,l=t.length;if(s!=l&&!(o&&l>s))return!1;var c=a.get(e);if(c&&a.get(t))return c==t;var u=-1,d=!0,h=n&COMPARE_UNORDERED_FLAG?new SetCache:void 0;for(a.set(e,t),a.set(t,e);++u<s;){var f=e[u],p=t[u];if(r)var g=o?r(p,f,u,t,e,a):r(f,p,u,e,t,a);if(void 0!==g){if(g)continue;d=!1;break}if(h){if(!arraySome(t,function(e,t){if(!cacheHas(h,t)&&(f===e||i(f,e,n,r,a)))return h.push(t)})){d=!1;break}}else if(f!==p&&!i(f,p,n,r,a)){d=!1;break}}return a.delete(e),a.delete(t),d}function mapToArray(e){var t=-1,n=Array(e.size);return e.forEach(function(e,r){n[++t]=[r,e]}),n}function setToArray(e){var t=-1,n=Array(e.size);return e.forEach(function(e){n[++t]=e}),n}var COMPARE_PARTIAL_FLAG$1=1,COMPARE_UNORDERED_FLAG$1=2,boolTag$1="[object Boolean]",dateTag$1="[object Date]",errorTag$2="[object Error]",mapTag$1="[object Map]",numberTag$1="[object Number]",regexpTag$1="[object RegExp]",setTag$1="[object Set]",stringTag$1="[object String]",symbolTag$1="[object Symbol]",arrayBufferTag$1="[object ArrayBuffer]",dataViewTag$1="[object DataView]",symbolProto$1=_Symbol?_Symbol.prototype:void 0,symbolValueOf=symbolProto$1?symbolProto$1.valueOf:void 0;function equalByTag(e,t,n,r,i,a,o){switch(n){case dataViewTag$1:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case arrayBufferTag$1:return!(e.byteLength!=t.byteLength||!a(new Uint8Array(e),new Uint8Array(t)));case boolTag$1:case dateTag$1:case numberTag$1:return eq(+e,+t);case errorTag$2:return e.name==t.name&&e.message==t.message;case regexpTag$1:case stringTag$1:return e==t+"";case mapTag$1:var s=mapToArray;case setTag$1:var l=r&COMPARE_PARTIAL_FLAG$1;if(s||(s=setToArray),e.size!=t.size&&!l)return!1;var c=o.get(e);if(c)return c==t;r|=COMPARE_UNORDERED_FLAG$1,o.set(e,t);var u=equalArrays(s(e),s(t),r,i,a,o);return o.delete(e),u;case symbolTag$1:if(symbolValueOf)return symbolValueOf.call(e)==symbolValueOf.call(t)}return!1}function arrayPush(e,t){for(var n=-1,r=t.length,i=e.length;++n<r;)e[i+n]=t[n];return e}function baseGetAllKeys(e,t,n){var r=t(e);return isArray(e)?r:arrayPush(r,n(e))}function arrayFilter(e,t){for(var n=-1,r=null==e?0:e.length,i=0,a=[];++n<r;){var o=e[n];t(o,n,e)&&(a[i++]=o)}return a}function stubArray(){return[]}var objectProto$13=Object.prototype,propertyIsEnumerable$1=objectProto$13.propertyIsEnumerable,nativeGetSymbols=Object.getOwnPropertySymbols,getSymbols=nativeGetSymbols?function(e){return null==e?[]:(e=Object(e),arrayFilter(nativeGetSymbols(e),function(t){return propertyIsEnumerable$1.call(e,t)}))}:stubArray;function getAllKeys(e){return baseGetAllKeys(e,keys,getSymbols)}var COMPARE_PARTIAL_FLAG$2=1,objectProto$14=Object.prototype,hasOwnProperty$11=objectProto$14.hasOwnProperty;function equalObjects(e,t,n,r,i,a){var o=n&COMPARE_PARTIAL_FLAG$2,s=getAllKeys(e),l=s.length;if(l!=getAllKeys(t).length&&!o)return!1;for(var c=l;c--;){var u=s[c];if(!(o?u in t:hasOwnProperty$11.call(t,u)))return!1}var d=a.get(e);if(d&&a.get(t))return d==t;var h=!0;a.set(e,t),a.set(t,e);for(var f=o;++c<l;){var p=e[u=s[c]],g=t[u];if(r)var m=o?r(g,p,u,t,e,a):r(p,g,u,e,t,a);if(!(void 0===m?p===g||i(p,g,n,r,a):m)){h=!1;break}f||(f="constructor"==u)}if(h&&!f){var v=e.constructor,y=t.constructor;v!=y&&"constructor"in e&&"constructor"in t&&!("function"==typeof v&&v instanceof v&&"function"==typeof y&&y instanceof y)&&(h=!1)}return a.delete(e),a.delete(t),h}var DataView=getNative(root,"DataView"),Promise$1=getNative(root,"Promise"),Set$1=getNative(root,"Set"),WeakMap=getNative(root,"WeakMap"),mapTag$2="[object Map]",objectTag$2="[object Object]",promiseTag="[object Promise]",setTag$2="[object Set]",weakMapTag$1="[object WeakMap]",dataViewTag$2="[object DataView]",dataViewCtorString=toSource(DataView),mapCtorString=toSource(Map),promiseCtorString=toSource(Promise$1),setCtorString=toSource(Set$1),weakMapCtorString=toSource(WeakMap),getTag=baseGetTag;(DataView&&getTag(new DataView(new ArrayBuffer(1)))!=dataViewTag$2||Map&&getTag(new Map)!=mapTag$2||Promise$1&&getTag(Promise$1.resolve())!=promiseTag||Set$1&&getTag(new Set$1)!=setTag$2||WeakMap&&getTag(new WeakMap)!=weakMapTag$1)&&(getTag=function(e){var t=baseGetTag(e),n=t==objectTag$2?e.constructor:void 0,r=n?toSource(n):"";if(r)switch(r){case dataViewCtorString:return dataViewTag$2;case mapCtorString:return mapTag$2;case promiseCtorString:return promiseTag;case setCtorString:return setTag$2;case weakMapCtorString:return weakMapTag$1}return t});var getTag$1=getTag,COMPARE_PARTIAL_FLAG$3=1,argsTag$2="[object Arguments]",arrayTag$1="[object Array]",objectTag$3="[object Object]",objectProto$15=Object.prototype,hasOwnProperty$12=objectProto$15.hasOwnProperty;function baseIsEqualDeep(e,t,n,r,i,a){var o=isArray(e),s=isArray(t),l=o?arrayTag$1:getTag$1(e),c=s?arrayTag$1:getTag$1(t),u=(l=l==argsTag$2?objectTag$3:l)==objectTag$3,d=(c=c==argsTag$2?objectTag$3:c)==objectTag$3,h=l==c;if(h&&isBuffer(e)){if(!isBuffer(t))return!1;o=!0,u=!1}if(h&&!u)return a||(a=new Stack),o||isTypedArray(e)?equalArrays(e,t,n,r,i,a):equalByTag(e,t,l,n,r,i,a);if(!(n&COMPARE_PARTIAL_FLAG$3)){var f=u&&hasOwnProperty$12.call(e,"__wrapped__"),p=d&&hasOwnProperty$12.call(t,"__wrapped__");if(f||p){var g=f?e.value():e,m=p?t.value():t;return a||(a=new Stack),i(g,m,n,r,a)}}return!!h&&(a||(a=new Stack),equalObjects(e,t,n,r,i,a))}function baseIsEqual(e,t,n,r,i){return e===t||(null==e||null==t||!isObjectLike(e)&&!isObjectLike(t)?e!=e&&t!=t:baseIsEqualDeep(e,t,n,r,baseIsEqual,i))}var COMPARE_PARTIAL_FLAG$4=1,COMPARE_UNORDERED_FLAG$2=2;function baseIsMatch(e,t,n,r){var i=n.length,a=i,o=!r;if(null==e)return!a;for(e=Object(e);i--;){var s=n[i];if(o&&s[2]?s[1]!==e[s[0]]:!(s[0]in e))return!1}for(;++i<a;){var l=(s=n[i])[0],c=e[l],u=s[1];if(o&&s[2]){if(void 0===c&&!(l in e))return!1}else{var d=new Stack;if(r)var h=r(c,u,l,e,t,d);if(!(void 0===h?baseIsEqual(u,c,COMPARE_PARTIAL_FLAG$4|COMPARE_UNORDERED_FLAG$2,r,d):h))return!1}}return!0}function isStrictComparable(e){return e==e&&!isObject(e)}function getMatchData(e){for(var t=keys(e),n=t.length;n--;){var r=t[n],i=e[r];t[n]=[r,i,isStrictComparable(i)]}return t}function matchesStrictComparable(e,t){return function(n){return null!=n&&(n[e]===t&&(void 0!==t||e in Object(n)))}}function baseMatches(e){var t=getMatchData(e);return 1==t.length&&t[0][2]?matchesStrictComparable(t[0][0],t[0][1]):function(n){return n===e||baseIsMatch(n,e,t)}}var reIsDeepProp=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,reIsPlainProp=/^\w*$/;function isKey(e,t){if(isArray(e))return!1;var n=void 0===e?"undefined":_typeof(e);return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!isSymbol(e))||(reIsPlainProp.test(e)||!reIsDeepProp.test(e)||null!=t&&e in Object(t))}var FUNC_ERROR_TEXT="Expected a function";function memoize(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError(FUNC_ERROR_TEXT);var n=function n(){var r=arguments,i=t?t.apply(this,r):r[0],a=n.cache;if(a.has(i))return a.get(i);var o=e.apply(this,r);return n.cache=a.set(i,o)||a,o};return n.cache=new(memoize.Cache||MapCache),n}memoize.Cache=MapCache;var MAX_MEMOIZE_SIZE=500;function memoizeCapped(e){var t=memoize(e,function(e){return n.size===MAX_MEMOIZE_SIZE&&n.clear(),e}),n=t.cache;return t}var rePropName=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,reEscapeChar=/\\(\\)?/g,stringToPath=memoizeCapped(function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(rePropName,function(e,n,r,i){t.push(r?i.replace(reEscapeChar,"$1"):n||e)}),t});function castPath(e,t){return isArray(e)?e:isKey(e,t)?[e]:stringToPath(toString(e))}var INFINITY$1=1/0;function toKey(e){if("string"==typeof e||isSymbol(e))return e;var t=e+"";return"0"==t&&1/e==-INFINITY$1?"-0":t}function baseGet(e,t){for(var n=0,r=(t=castPath(t,e)).length;null!=e&&n<r;)e=e[toKey(t[n++])];return n&&n==r?e:void 0}function get$1(e,t,n){var r=null==e?void 0:baseGet(e,t);return void 0===r?n:r}function baseHasIn(e,t){return null!=e&&t in Object(e)}function hasPath(e,t,n){for(var r=-1,i=(t=castPath(t,e)).length,a=!1;++r<i;){var o=toKey(t[r]);if(!(a=null!=e&&n(e,o)))break;e=e[o]}return a||++r!=i?a:!!(i=null==e?0:e.length)&&isLength(i)&&isIndex(o,i)&&(isArray(e)||isArguments(e))}function hasIn(e,t){return null!=e&&hasPath(e,t,baseHasIn)}var COMPARE_PARTIAL_FLAG$5=1,COMPARE_UNORDERED_FLAG$3=2;function baseMatchesProperty(e,t){return isKey(e)&&isStrictComparable(t)?matchesStrictComparable(toKey(e),t):function(n){var r=get$1(n,e);return void 0===r&&r===t?hasIn(n,e):baseIsEqual(t,r,COMPARE_PARTIAL_FLAG$5|COMPARE_UNORDERED_FLAG$3)}}function baseProperty(e){return function(t){return null==t?void 0:t[e]}}function basePropertyDeep(e){return function(t){return baseGet(t,e)}}function property(e){return isKey(e)?baseProperty(toKey(e)):basePropertyDeep(e)}function baseIteratee(e){return"function"==typeof e?e:null==e?identity:"object"==(void 0===e?"undefined":_typeof(e))?isArray(e)?baseMatchesProperty(e[0],e[1]):baseMatches(e):property(e)}function baseMap(e,t){var n=-1,r=isArrayLike(e)?Array(e.length):[];return baseEach(e,function(e,i,a){r[++n]=t(e,i,a)}),r}function baseSortBy(e,t){var n=e.length;for(e.sort(t);n--;)e[n]=e[n].value;return e}function compareAscending(e,t){if(e!==t){var n=void 0!==e,r=null===e,i=e==e,a=isSymbol(e),o=void 0!==t,s=null===t,l=t==t,c=isSymbol(t);if(!s&&!c&&!a&&e>t||a&&o&&l&&!s&&!c||r&&o&&l||!n&&l||!i)return 1;if(!r&&!a&&!c&&e<t||c&&n&&i&&!r&&!a||s&&n&&i||!o&&i||!l)return-1}return 0}function compareMultiple(e,t,n){for(var r=-1,i=e.criteria,a=t.criteria,o=i.length,s=n.length;++r<o;){var l=compareAscending(i[r],a[r]);if(l)return r>=s?l:l*("desc"==n[r]?-1:1)}return e.index-t.index}function baseOrderBy(e,t,n){var r=-1;return t=arrayMap(t.length?t:[identity],baseUnary(baseIteratee)),baseSortBy(baseMap(e,function(e,n,i){return{criteria:arrayMap(t,function(t){return t(e)}),index:++r,value:e}}),function(e,t){return compareMultiple(e,t,n)})}function orderBy(e,t,n,r){return null==e?[]:(isArray(t)||(t=null==t?[]:[t]),isArray(n=r?void 0:n)||(n=null==n?[]:[n]),baseOrderBy(e,t,n))}function noop(){}var INFINITY$2=1/0,createSet=Set$1&&1/setToArray(new Set$1([,-0]))[1]==INFINITY$2?function(e){return new Set$1(e)}:noop,Feed=function e(t){this.default=e.default,this._settings=merge({},e.default,t),this.init()};Feed.prototype.init=function(){var e=this,t=[],n=this._settings.feed,r={rssToJson:Feed.rssToJson,rssUrl:Array.isArray(n)?n:[n]};return forEach(r.rssUrl,function(n,i){e._request(r,n).then(function(n){if(t.push(e._process(JSON.parse(n),e._settings)),t.length===r.rssUrl.length){e._merge(t,e._settings);var i=e._render(e._merge(t,e._settings),e._settings),a=document.querySelector(e._settings.selector);a&&(a.innerHTML=i)}})}),this},Feed.prototype._request=function(e,t){return new Promise(function(n,r){var i=new XMLHttpRequest;i.onreadystatechange=function(e){var t=e.target;4===t.readyState&&(t.status>=200&&t.status<400?n(t.response):r(new Error(t.status)))},i.ontimeout=function(){r(new Error("The Feed request timed out"))},i.open("GET",e.rssToJson+"?rss_url="+t,!0),i.send(),i=null})},Feed.prototype._process=function(e,t){return Feed.process[t.type](e,t)},Feed.prototype._merge=function(e,t){return Feed.merge[t.type](e)},Feed.prototype._render=function(e,t){return e.settings=t,t.log&&console.dir(e),template(values(t.templates).join(""),{imports:{_each:forEach}})(e)},Feed.rssToJson="https://api.rss2json.com/v1/api.json",Feed.templates={medium:{opener:['<section class="o-feed <%- settings.classes.wrapper %>" style="',"<% if (settings.fontSize) { %>font-size: <%- settings.fontSize %>;<% } %>","<% if (settings.postBorderColor) { %>border-color: <%- settings.postBorderColor %>;<% } %>",'">'],header:['<header class="o-feed__header <%- settings.classes.header %>">','<div class="o-feed__avatar <%- settings.classes.avatar %>">','<img src="','<% if (settings.profileImg !== "") { %>',"<%- settings.profileImg %>","<% } else { %>","<%- feed.profileImg %>",'<% } %>" ','width="<%- settings.ratioProfile[0] %>" ','height="<%- settings.ratioProfile[1] %>">',"</div>",'<a class="o-feed__url <%- settings.classes.avatar %>" ','href="<% if (settings.titleUrl !== "") { %>',"<%- settings.titleUrl %>","<% } else { %>","<%- feed.url %>",'<% } %>" ','target="_blank" rel="noopener noreferrer nofollow">','<% if (settings.title !== "") { %>',"<%- settings.title %>","<% } else { %>","<%- feed.title %>","<% } %>","</a>","</header>"],posts:['<div class="o-feed__items" style="',"border-color: <%- settings.postBorderColor %>;",'">',"<% _each(items, function(post) { %>",'<div class="c-feed-item <%- settings.classes.feedItem %>">','<h4 class="c-feed-item__title <%- settings.classes.title %>">','<a class="c-feed-item__link <%- settings.classes.link %>"','href="<%- post.guid %>"','target="_blank"','rel="noopener noreferrer nofollow">',"<%- post.title %>","</a>","</h4>",'<span class="c-feed-item__date <%- settings.classes.date %>" ','title="<%- settings.postDateTitle %>">',"<%- post.date %>","</span>",'<div class="c-feed-item__thumbnail <%- settings.classes.thumbnail %>"','style="',"background-image: url(<%- post.thumbnail %>);",'height: <%- settings.postImgHeight %>;"','aria-hidden="true">','<img style="display: none;" src="<%- post.thumbnail %>" alt="<%- post.title %>">',"</div>",'<p class="c-feed-item__excerpt <%- settings.classes.excerpt %>">',"<%- post.excerpt %><%- settings.postExcerptTrail %>","</p>",'<div class="c-feed-item__footer <%- settings.classes.itemFooter %>">','<a class="c-feed-item__cta <%- settings.classes.cta %>" ','href="<%- post.guid %>" ','target="_blank" ','rel="noopener noreferrer nofollow">',"<%- settings.postCtaText %>","</a>","</div>","</div>","<% }); %>","</div>"],closer:["</section>"]}},Feed.process={medium:function(e,t){var n=t.postExcerptLength;return forEach(e.items,function(e,r){var i,a="";return a=(a=(a=(a=e.description.replace(/<figure.*>.*?<\/figure>/g,"")).replace(/<(.|\n)*?>/g,"")).substr(0,n)).substr(0,Math.min(a.length,a.lastIndexOf(" "))),e.excerpt=a,i=new Date(Date.parse(e.pubDate.replace(" ","T"))).toLocaleDateString(t.postDateLocal,t.postDateFormat),e.date=i,e}),e}},Feed.merge={medium:function(e){var t={},n=[];return e.forEach(function(e){n=n.concat(e.items)}),e.forEach(function(e){t=merge(t,e)}),t.items=orderBy(n,"pubDate","desc"),t}},Feed.default={feed:"",selector:"#js-feed",type:"medium",title:"",titleUrl:"",profileImg:"",fontSize:"",ratioProfile:["50","50"],postBorderColor:"lightsteelblue",postImgHeight:"200px",postExcerptLength:120,postExcerptTrail:"…",postCtaText:"Read the full post",postDateLocal:"en-US",postDateFormat:{year:"numeric",month:"long",day:"numeric"},postDateTitle:"Published Date",classes:{wrapper:"",header:"",url:"",feedItem:"",title:"",link:"",thumbnail:"",excerpt:"",itemFooter:"",cta:"",date:""},templates:{opener:Feed.templates.medium.opener.join(""),header:Feed.templates.medium.header.join(""),posts:Feed.templates.medium.posts.join(""),closer:Feed.templates.medium.closer.join("")},log:!1,unique:!1};var Toggle=function e(t){var n=this,r=document.querySelector("body");return t=t||{},this._settings={selector:t.selector?t.selector:e.selector,namespace:t.namespace?t.namespace:e.namespace,inactiveClass:t.inactiveClass?t.inactiveClass:e.inactiveClass,activeClass:t.activeClass?t.activeClass:e.activeClass},r.addEventListener("click",function(e){e.target.matches(n._settings.selector)&&(e.preventDefault(),n._toggle(e))}),this};Toggle.prototype._toggle=function(e){var t=this,n=e.target,r=!1;if(r=n.getAttribute("href")?document.querySelector(n.getAttribute("href")):r,!(r=n.getAttribute("aria-controls")?document.querySelector("#"+n.getAttribute("aria-controls")):r))return this;if(this.elementToggle(n,r),n.dataset[this._settings.namespace+"Undo"]){var i=document.querySelector(n.dataset[this._settings.namespace+"Undo"]);i.addEventListener("click",function(e){e.preventDefault(),t.elementToggle(n,r),i.removeEventListener("click")})}return this},Toggle.prototype.elementToggle=function(e,t){""!==this._settings.activeClass&&(e.classList.toggle(this._settings.activeClass),t.classList.toggle(this._settings.activeClass)),""!==this._settings.inactiveClass&&t.classList.toggle(this._settings.inactiveClass);for(var n=0;n<Toggle.elAriaRoles.length;n++)e.getAttribute(Toggle.elAriaRoles[n])&&e.setAttribute(Toggle.elAriaRoles[n],!("true"===e.getAttribute(Toggle.elAriaRoles[n])));for(var r=0;r<Toggle.targetAriaRoles.length;r++)t.getAttribute(Toggle.targetAriaRoles[r])&&t.setAttribute(Toggle.targetAriaRoles[r],!("true"===t.getAttribute(Toggle.targetAriaRoles[r])));return e.getAttribute("href")&&t.classList.contains(this._settings.activeClass)&&(window.location.hash="",window.location.hash=e.getAttribute("href")),this},Toggle.selector='[data-js*="toggle"]',Toggle.namespace="toggle",Toggle.inactiveClass="hidden",Toggle.activeClass="active",Toggle.elAriaRoles=["aria-pressed","aria-expanded"],Toggle.targetAriaRoles=["aria-hidden"];var Track=function e(t){var n=this,r=document.querySelector("body");return t=t||{},this._settings={selector:t.selector?t.selector:e.selector},r.addEventListener("click",function(e){if(e.target.matches(n._settings.selector)){var t=e.target.dataset.trackKey,r=JSON.parse(e.target.dataset.trackData);n.click(t,r)}}),this};Track.prototype.click=function(e,t){var n=t.map(function(e){return e.hasOwnProperty(Track.key)&&(e[Track.key]=window.location.pathname+"/"+e[Track.key]),e}),r=this.webtrends(e,n),i=this.gtag(e,n);return Utility$1.debug()&&console.dir({Track:[r,i]}),n},Track.prototype.view=function(e,t,n){var r=this.webtrends(t,n),i=this.gtagView(e,t);Utility$1.debug()&&console.dir({Track:[r,i]})},Track.prototype.webtrends=function(e,t){var n=[{"WT.ti":e}];t[0]&&t[0].hasOwnProperty(Track.key)?n.push({"DCS.dcsuri":t[0][Track.key]}):Object.assign(n,t);var r={argsa:n.flatMap(function(e){return Object.keys(e).flatMap(function(t){return[t,e[t]]})})};return"undefined"!=typeof Webtrends&&Webtrends.multiTrack(r),["Webtrends",r]},Track.prototype.gtag=function(e,t){var n=t.find(function(e){return e.hasOwnProperty(Track.key)}),r={event_category:e};return"undefined"!=typeof gtag&&gtag(Track.key,n[Track.key],r),["gtag",Track.key,n[Track.key],r]},Track.prototype.gtagView=function(e,t){var n={app_name:e,screen_name:t};return"undefined"!=typeof gtag&&gtag("event","screen_view",n),["gtag",Track.key,"screen_view",n]},Track.selector='[data-js*="track"]',Track.key="event";var emptyObject=Object.freeze({});function isUndef(e){return void 0===e||null===e}function isDef(e){return void 0!==e&&null!==e}function isTrue(e){return!0===e}function isFalse(e){return!1===e}function isPrimitive(e){return"string"==typeof e||"number"==typeof e||"symbol"===(void 0===e?"undefined":_typeof(e))||"boolean"==typeof e}function isObject$1(e){return null!==e&&"object"===(void 0===e?"undefined":_typeof(e))}var _toString=Object.prototype.toString;function toRawType(e){return _toString.call(e).slice(8,-1)}function isPlainObject$1(e){return"[object Object]"===_toString.call(e)}function isRegExp(e){return"[object RegExp]"===_toString.call(e)}function isValidArrayIndex(e){var t=parseFloat(String(e));return t>=0&&Math.floor(t)===t&&isFinite(e)}function isPromise(e){return isDef(e)&&"function"==typeof e.then&&"function"==typeof e.catch}function toString$1(e){return null==e?"":Array.isArray(e)||isPlainObject$1(e)&&e.toString===_toString?JSON.stringify(e,null,2):String(e)}function toNumber(e){var t=parseFloat(e);return isNaN(t)?e:t}function makeMap(e,t){for(var n=Object.create(null),r=e.split(","),i=0;i<r.length;i++)n[r[i]]=!0;return t?function(e){return n[e.toLowerCase()]}:function(e){return n[e]}}var isBuiltInTag=makeMap("slot,component",!0),isReservedAttribute=makeMap("key,ref,slot,slot-scope,is");function remove(e,t){if(e.length){var n=e.indexOf(t);if(n>-1)return e.splice(n,1)}}var hasOwnProperty$13=Object.prototype.hasOwnProperty;function hasOwn(e,t){return hasOwnProperty$13.call(e,t)}function cached(e){var t=Object.create(null);return function(n){return t[n]||(t[n]=e(n))}}var camelizeRE=/-(\w)/g,camelize=cached(function(e){return e.replace(camelizeRE,function(e,t){return t?t.toUpperCase():""})}),capitalize=cached(function(e){return e.charAt(0).toUpperCase()+e.slice(1)}),hyphenateRE=/\B([A-Z])/g,hyphenate=cached(function(e){return e.replace(hyphenateRE,"-$1").toLowerCase()});function polyfillBind(e,t){function n(n){var r=arguments.length;return r?r>1?e.apply(t,arguments):e.call(t,n):e.call(t)}return n._length=e.length,n}function nativeBind(e,t){return e.bind(t)}var bind=Function.prototype.bind?nativeBind:polyfillBind;function toArray$1(e,t){t=t||0;for(var n=e.length-t,r=new Array(n);n--;)r[n]=e[n+t];return r}function extend(e,t){for(var n in t)e[n]=t[n];return e}function toObject(e){for(var t={},n=0;n<e.length;n++)e[n]&&extend(t,e[n]);return t}function noop$1(e,t,n){}var no=function(e,t,n){return!1},identity$1=function(e){return e};function genStaticKeys(e){return e.reduce(function(e,t){return e.concat(t.staticKeys||[])},[]).join(",")}function looseEqual(e,t){if(e===t)return!0;var n=isObject$1(e),r=isObject$1(t);if(!n||!r)return!n&&!r&&String(e)===String(t);try{var i=Array.isArray(e),a=Array.isArray(t);if(i&&a)return e.length===t.length&&e.every(function(e,n){return looseEqual(e,t[n])});if(e instanceof Date&&t instanceof Date)return e.getTime()===t.getTime();if(i||a)return!1;var o=Object.keys(e),s=Object.keys(t);return o.length===s.length&&o.every(function(n){return looseEqual(e[n],t[n])})}catch(e){return!1}}function looseIndexOf(e,t){for(var n=0;n<e.length;n++)if(looseEqual(e[n],t))return n;return-1}function once(e){var t=!1;return function(){t||(t=!0,e.apply(this,arguments))}}var SSR_ATTR="data-server-rendered",ASSET_TYPES=["component","directive","filter"],LIFECYCLE_HOOKS=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],config={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!0,devtools:!0,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:no,isReservedAttr:no,isUnknownElement:no,getTagNamespace:noop$1,parsePlatformTagName:identity$1,mustUseProp:no,async:!0,_lifecycleHooks:LIFECYCLE_HOOKS},unicodeLetters="a-zA-Z·À-ÖØ-öø-ͽͿ-῿‌-‍‿-⁀⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�";function isReserved(e){var t=(e+"").charCodeAt(0);return 36===t||95===t}function def(e,t,n,r){Object.defineProperty(e,t,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var bailRE=new RegExp("[^"+unicodeLetters+".$_\\d]");function parsePath(e){if(!bailRE.test(e)){var t=e.split(".");return function(e){for(var n=0;n<t.length;n++){if(!e)return;e=e[t[n]]}return e}}}var _isServer,hasProto="__proto__"in{},inBrowser="undefined"!=typeof window,inWeex="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,weexPlatform=inWeex&&WXEnvironment.platform.toLowerCase(),UA=inBrowser&&window.navigator.userAgent.toLowerCase(),isIE=UA&&/msie|trident/.test(UA),isIE9=UA&&UA.indexOf("msie 9.0")>0,isEdge=UA&&UA.indexOf("edge/")>0,isAndroid=UA&&UA.indexOf("android")>0||"android"===weexPlatform,isIOS=UA&&/iphone|ipad|ipod|ios/.test(UA)||"ios"===weexPlatform,isChrome=UA&&/chrome\/\d+/.test(UA)&&!isEdge,isPhantomJS=UA&&/phantomjs/.test(UA),isFF=UA&&UA.match(/firefox\/(\d+)/),nativeWatch={}.watch,supportsPassive=!1;if(inBrowser)try{var opts={};Object.defineProperty(opts,"passive",{get:function(){supportsPassive=!0}}),window.addEventListener("test-passive",null,opts)}catch(e){}var isServerRendering=function(){return void 0===_isServer&&(_isServer=!inBrowser&&!inWeex&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),_isServer},devtools=inBrowser&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function isNative(e){return"function"==typeof e&&/native code/.test(e.toString())}var _Set,hasSymbol="undefined"!=typeof Symbol&&isNative(Symbol)&&"undefined"!=typeof Reflect&&isNative(Reflect.ownKeys);_Set="undefined"!=typeof Set&&isNative(Set)?Set:function(){function e(){this.set=Object.create(null)}return e.prototype.has=function(e){return!0===this.set[e]},e.prototype.add=function(e){this.set[e]=!0},e.prototype.clear=function(){this.set=Object.create(null)},e}();var warn=noop$1,tip=noop$1,generateComponentTrace=noop$1,formatComponentName=noop$1,hasConsole="undefined"!=typeof console,classifyRE=/(?:^|[-_])(\w)/g,classify=function(e){return e.replace(classifyRE,function(e){return e.toUpperCase()}).replace(/[-_]/g,"")};warn=function(e,t){var n=t?generateComponentTrace(t):"";config.warnHandler?config.warnHandler.call(null,e,t,n):hasConsole&&!config.silent&&console.error("[Vue warn]: "+e+n)},tip=function(e,t){hasConsole&&!config.silent&&console.warn("[Vue tip]: "+e+(t?generateComponentTrace(t):""))},formatComponentName=function(e,t){if(e.$root===e)return"<Root>";var n="function"==typeof e&&null!=e.cid?e.options:e._isVue?e.$options||e.constructor.options:e,r=n.name||n._componentTag,i=n.__file;if(!r&&i){var a=i.match(/([^/\\]+)\.vue$/);r=a&&a[1]}return(r?"<"+classify(r)+">":"<Anonymous>")+(i&&!1!==t?" at "+i:"")};var repeat$1=function(e,t){for(var n="";t;)t%2==1&&(n+=e),t>1&&(e+=e),t>>=1;return n};generateComponentTrace=function(e){if(e._isVue&&e.$parent){for(var t=[],n=0;e;){if(t.length>0){var r=t[t.length-1];if(r.constructor===e.constructor){n++,e=e.$parent;continue}n>0&&(t[t.length-1]=[r,n],n=0)}t.push(e),e=e.$parent}return"\n\nfound in\n\n"+t.map(function(e,t){return""+(0===t?"---\x3e ":repeat$1(" ",5+2*t))+(Array.isArray(e)?formatComponentName(e[0])+"... ("+e[1]+" recursive calls)":formatComponentName(e))}).join("\n")}return"\n\n(found in "+formatComponentName(e)+")"};var uid=0,Dep=function(){this.id=uid++,this.subs=[]};Dep.prototype.addSub=function(e){this.subs.push(e)},Dep.prototype.removeSub=function(e){remove(this.subs,e)},Dep.prototype.depend=function(){Dep.target&&Dep.target.addDep(this)},Dep.prototype.notify=function(){var e=this.subs.slice();config.async||e.sort(function(e,t){return e.id-t.id});for(var t=0,n=e.length;t<n;t++)e[t].update()},Dep.target=null;var targetStack=[];function pushTarget(e){targetStack.push(e),Dep.target=e}function popTarget(){targetStack.pop(),Dep.target=targetStack[targetStack.length-1]}var VNode=function(e,t,n,r,i,a,o,s){this.tag=e,this.data=t,this.children=n,this.text=r,this.elm=i,this.ns=void 0,this.context=a,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=t&&t.key,this.componentOptions=o,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},prototypeAccessors={child:{configurable:!0}};prototypeAccessors.child.get=function(){return this.componentInstance},Object.defineProperties(VNode.prototype,prototypeAccessors);var createEmptyVNode=function(e){void 0===e&&(e="");var t=new VNode;return t.text=e,t.isComment=!0,t};function createTextVNode(e){return new VNode(void 0,void 0,void 0,String(e))}function cloneVNode(e){var t=new VNode(e.tag,e.data,e.children&&e.children.slice(),e.text,e.elm,e.context,e.componentOptions,e.asyncFactory);return t.ns=e.ns,t.isStatic=e.isStatic,t.key=e.key,t.isComment=e.isComment,t.fnContext=e.fnContext,t.fnOptions=e.fnOptions,t.fnScopeId=e.fnScopeId,t.asyncMeta=e.asyncMeta,t.isCloned=!0,t}var arrayProto$1=Array.prototype,arrayMethods=Object.create(arrayProto$1),methodsToPatch=["push","pop","shift","unshift","splice","sort","reverse"];methodsToPatch.forEach(function(e){var t=arrayProto$1[e];def(arrayMethods,e,function(){for(var n=[],r=arguments.length;r--;)n[r]=arguments[r];var i,a=t.apply(this,n),o=this.__ob__;switch(e){case"push":case"unshift":i=n;break;case"splice":i=n.slice(2)}return i&&o.observeArray(i),o.dep.notify(),a})});var arrayKeys=Object.getOwnPropertyNames(arrayMethods),shouldObserve=!0;function toggleObserving(e){shouldObserve=e}var Observer=function(e){this.value=e,this.dep=new Dep,this.vmCount=0,def(e,"__ob__",this),Array.isArray(e)?(hasProto?protoAugment(e,arrayMethods):copyAugment(e,arrayMethods,arrayKeys),this.observeArray(e)):this.walk(e)};function protoAugment(e,t){e.__proto__=t}function copyAugment(e,t,n){for(var r=0,i=n.length;r<i;r++){var a=n[r];def(e,a,t[a])}}function observe(e,t){var n;if(isObject$1(e)&&!(e instanceof VNode))return hasOwn(e,"__ob__")&&e.__ob__ instanceof Observer?n=e.__ob__:shouldObserve&&!isServerRendering()&&(Array.isArray(e)||isPlainObject$1(e))&&Object.isExtensible(e)&&!e._isVue&&(n=new Observer(e)),t&&n&&n.vmCount++,n}function defineReactive$$1(e,t,n,r,i){var a=new Dep,o=Object.getOwnPropertyDescriptor(e,t);if(!o||!1!==o.configurable){var s=o&&o.get,l=o&&o.set;s&&!l||2!==arguments.length||(n=e[t]);var c=!i&&observe(n);Object.defineProperty(e,t,{enumerable:!0,configurable:!0,get:function(){var t=s?s.call(e):n;return Dep.target&&(a.depend(),c&&(c.dep.depend(),Array.isArray(t)&&dependArray(t))),t},set:function(t){var o=s?s.call(e):n;t===o||t!=t&&o!=o||(r&&r(),s&&!l||(l?l.call(e,t):n=t,c=!i&&observe(t),a.notify()))}})}}function set$1(e,t,n){if((isUndef(e)||isPrimitive(e))&&warn("Cannot set reactive property on undefined, null, or primitive value: "+e),Array.isArray(e)&&isValidArrayIndex(t))return e.length=Math.max(e.length,t),e.splice(t,1,n),n;if(t in e&&!(t in Object.prototype))return e[t]=n,n;var r=e.__ob__;return e._isVue||r&&r.vmCount?(warn("Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option."),n):r?(defineReactive$$1(r.value,t,n),r.dep.notify(),n):(e[t]=n,n)}function del(e,t){if((isUndef(e)||isPrimitive(e))&&warn("Cannot delete reactive property on undefined, null, or primitive value: "+e),Array.isArray(e)&&isValidArrayIndex(t))e.splice(t,1);else{var n=e.__ob__;e._isVue||n&&n.vmCount?warn("Avoid deleting properties on a Vue instance or its root $data - just set it to null."):hasOwn(e,t)&&(delete e[t],n&&n.dep.notify())}}function dependArray(e){for(var t=void 0,n=0,r=e.length;n<r;n++)(t=e[n])&&t.__ob__&&t.__ob__.dep.depend(),Array.isArray(t)&&dependArray(t)}Observer.prototype.walk=function(e){for(var t=Object.keys(e),n=0;n<t.length;n++)defineReactive$$1(e,t[n])},Observer.prototype.observeArray=function(e){for(var t=0,n=e.length;t<n;t++)observe(e[t])};var strats=config.optionMergeStrategies;function mergeData(e,t){if(!t)return e;for(var n,r,i,a=hasSymbol?Reflect.ownKeys(t):Object.keys(t),o=0;o<a.length;o++)"__ob__"!==(n=a[o])&&(r=e[n],i=t[n],hasOwn(e,n)?r!==i&&isPlainObject$1(r)&&isPlainObject$1(i)&&mergeData(r,i):set$1(e,n,i));return e}function mergeDataOrFn(e,t,n){return n?function(){var r="function"==typeof t?t.call(n,n):t,i="function"==typeof e?e.call(n,n):e;return r?mergeData(r,i):i}:t?e?function(){return mergeData("function"==typeof t?t.call(this,this):t,"function"==typeof e?e.call(this,this):e)}:t:e}function mergeHook(e,t){var n=t?e?e.concat(t):Array.isArray(t)?t:[t]:e;return n?dedupeHooks(n):n}function dedupeHooks(e){for(var t=[],n=0;n<e.length;n++)-1===t.indexOf(e[n])&&t.push(e[n]);return t}function mergeAssets(e,t,n,r){var i=Object.create(e||null);return t?(assertObjectType(r,t,n),extend(i,t)):i}strats.el=strats.propsData=function(e,t,n,r){return n||warn('option "'+r+'" can only be used during instance creation with the `new` keyword.'),defaultStrat(e,t)},strats.data=function(e,t,n){return n?mergeDataOrFn(e,t,n):t&&"function"!=typeof t?(warn('The "data" option should be a function that returns a per-instance value in component definitions.',n),e):mergeDataOrFn(e,t)},LIFECYCLE_HOOKS.forEach(function(e){strats[e]=mergeHook}),ASSET_TYPES.forEach(function(e){strats[e+"s"]=mergeAssets}),strats.watch=function(e,t,n,r){if(e===nativeWatch&&(e=void 0),t===nativeWatch&&(t=void 0),!t)return Object.create(e||null);if(assertObjectType(r,t,n),!e)return t;var i={};for(var a in extend(i,e),t){var o=i[a],s=t[a];o&&!Array.isArray(o)&&(o=[o]),i[a]=o?o.concat(s):Array.isArray(s)?s:[s]}return i},strats.props=strats.methods=strats.inject=strats.computed=function(e,t,n,r){if(t&&assertObjectType(r,t,n),!e)return t;var i=Object.create(null);return extend(i,e),t&&extend(i,t),i},strats.provide=mergeDataOrFn;var defaultStrat=function(e,t){return void 0===t?e:t};function checkComponents(e){for(var t in e.components)validateComponentName(t)}function validateComponentName(e){new RegExp("^[a-zA-Z][\\-\\.0-9_"+unicodeLetters+"]*$").test(e)||warn('Invalid component name: "'+e+'". Component names should conform to valid custom element name in html5 specification.'),(isBuiltInTag(e)||config.isReservedTag(e))&&warn("Do not use built-in or reserved HTML elements as component id: "+e)}function normalizeProps(e,t){var n=e.props;if(n){var r,i,a={};if(Array.isArray(n))for(r=n.length;r--;)"string"==typeof(i=n[r])?a[camelize(i)]={type:null}:warn("props must be strings when using array syntax.");else if(isPlainObject$1(n))for(var o in n)i=n[o],a[camelize(o)]=isPlainObject$1(i)?i:{type:i};else warn('Invalid value for option "props": expected an Array or an Object, but got '+toRawType(n)+".",t);e.props=a}}function normalizeInject(e,t){var n=e.inject;if(n){var r=e.inject={};if(Array.isArray(n))for(var i=0;i<n.length;i++)r[n[i]]={from:n[i]};else if(isPlainObject$1(n))for(var a in n){var o=n[a];r[a]=isPlainObject$1(o)?extend({from:a},o):{from:o}}else warn('Invalid value for option "inject": expected an Array or an Object, but got '+toRawType(n)+".",t)}}function normalizeDirectives(e){var t=e.directives;if(t)for(var n in t){var r=t[n];"function"==typeof r&&(t[n]={bind:r,update:r})}}function assertObjectType(e,t,n){isPlainObject$1(t)||warn('Invalid value for option "'+e+'": expected an Object, but got '+toRawType(t)+".",n)}function mergeOptions(e,t,n){if(checkComponents(t),"function"==typeof t&&(t=t.options),normalizeProps(t,n),normalizeInject(t,n),normalizeDirectives(t),!t._base&&(t.extends&&(e=mergeOptions(e,t.extends,n)),t.mixins))for(var r=0,i=t.mixins.length;r<i;r++)e=mergeOptions(e,t.mixins[r],n);var a,o={};for(a in e)s(a);for(a in t)hasOwn(e,a)||s(a);function s(r){var i=strats[r]||defaultStrat;o[r]=i(e[r],t[r],n,r)}return o}function resolveAsset(e,t,n,r){if("string"==typeof n){var i=e[t];if(hasOwn(i,n))return i[n];var a=camelize(n);if(hasOwn(i,a))return i[a];var o=capitalize(a);if(hasOwn(i,o))return i[o];var s=i[n]||i[a]||i[o];return r&&!s&&warn("Failed to resolve "+t.slice(0,-1)+": "+n,e),s}}function validateProp(e,t,n,r){var i=t[e],a=!hasOwn(n,e),o=n[e],s=getTypeIndex(Boolean,i.type);if(s>-1)if(a&&!hasOwn(i,"default"))o=!1;else if(""===o||o===hyphenate(e)){var l=getTypeIndex(String,i.type);(l<0||s<l)&&(o=!0)}if(void 0===o){o=getPropDefaultValue(r,i,e);var c=shouldObserve;toggleObserving(!0),observe(o),toggleObserving(c)}return assertProp(i,e,o,r,a),o}function getPropDefaultValue(e,t,n){if(hasOwn(t,"default")){var r=t.default;return isObject$1(r)&&warn('Invalid default value for prop "'+n+'": Props with type Object/Array must use a factory function to return the default value.',e),e&&e.$options.propsData&&void 0===e.$options.propsData[n]&&void 0!==e._props[n]?e._props[n]:"function"==typeof r&&"Function"!==getType(t.type)?r.call(e):r}}function assertProp(e,t,n,r,i){if(e.required&&i)warn('Missing required prop: "'+t+'"',r);else if(null!=n||e.required){var a=e.type,o=!a||!0===a,s=[];if(a){Array.isArray(a)||(a=[a]);for(var l=0;l<a.length&&!o;l++){var c=assertType(n,a[l]);s.push(c.expectedType||""),o=c.valid}}if(o){var u=e.validator;u&&(u(n)||warn('Invalid prop: custom validator check failed for prop "'+t+'".',r))}else warn(getInvalidTypeMessage(t,n,s),r)}}var simpleCheckRE=/^(String|Number|Boolean|Function|Symbol)$/;function assertType(e,t){var n,r=getType(t);if(simpleCheckRE.test(r)){var i=void 0===e?"undefined":_typeof(e);(n=i===r.toLowerCase())||"object"!==i||(n=e instanceof t)}else n="Object"===r?isPlainObject$1(e):"Array"===r?Array.isArray(e):e instanceof t;return{valid:n,expectedType:r}}function getType(e){var t=e&&e.toString().match(/^\s*function (\w+)/);return t?t[1]:""}function isSameType(e,t){return getType(e)===getType(t)}function getTypeIndex(e,t){if(!Array.isArray(t))return isSameType(t,e)?0:-1;for(var n=0,r=t.length;n<r;n++)if(isSameType(t[n],e))return n;return-1}function getInvalidTypeMessage(e,t,n){var r='Invalid prop: type check failed for prop "'+e+'". Expected '+n.map(capitalize).join(", "),i=n[0],a=toRawType(t),o=styleValue(t,i),s=styleValue(t,a);return 1===n.length&&isExplicable(i)&&!isBoolean(i,a)&&(r+=" with value "+o),r+=", got "+a+" ",isExplicable(a)&&(r+="with value "+s+"."),r}function styleValue(e,t){return"String"===t?'"'+e+'"':"Number"===t?""+Number(e):""+e}function isExplicable(e){return["string","number","boolean"].some(function(t){return e.toLowerCase()===t})}function isBoolean(){for(var e=[],t=arguments.length;t--;)e[t]=arguments[t];return e.some(function(e){return"boolean"===e.toLowerCase()})}function handleError(e,t,n){if(t)for(var r=t;r=r.$parent;){var i=r.$options.errorCaptured;if(i)for(var a=0;a<i.length;a++)try{if(!1===i[a].call(r,e,t,n))return}catch(e){globalHandleError(e,r,"errorCaptured hook")}}globalHandleError(e,t,n)}function invokeWithErrorHandling(e,t,n,r,i){var a;try{(a=n?e.apply(t,n):e.call(t))&&!a._isVue&&isPromise(a)&&a.catch(function(e){return handleError(e,r,i+" (Promise/async)")})}catch(e){handleError(e,r,i)}return a}function globalHandleError(e,t,n){if(config.errorHandler)try{return config.errorHandler.call(null,e,t,n)}catch(t){t!==e&&logError(t,null,"config.errorHandler")}logError(e,t,n)}function logError(e,t,n){if(warn("Error in "+n+': "'+e.toString()+'"',t),!inBrowser&&!inWeex||"undefined"==typeof console)throw e;console.error(e)}var timerFunc,mark,measure,isUsingMicroTask=!1,callbacks=[],pending=!1;function flushCallbacks(){pending=!1;var e=callbacks.slice(0);callbacks.length=0;for(var t=0;t<e.length;t++)e[t]()}if("undefined"!=typeof Promise&&isNative(Promise)){var p=Promise.resolve();timerFunc=function(){p.then(flushCallbacks),isIOS&&setTimeout(noop$1)},isUsingMicroTask=!0}else if(isIE||"undefined"==typeof MutationObserver||!isNative(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())timerFunc="undefined"!=typeof setImmediate&&isNative(setImmediate)?function(){setImmediate(flushCallbacks)}:function(){setTimeout(flushCallbacks,0)};else{var counter=1,observer=new MutationObserver(flushCallbacks),textNode=document.createTextNode(String(counter));observer.observe(textNode,{characterData:!0}),timerFunc=function(){counter=(counter+1)%2,textNode.data=String(counter)},isUsingMicroTask=!0}function nextTick(e,t){var n;if(callbacks.push(function(){if(e)try{e.call(t)}catch(e){handleError(e,t,"nextTick")}else n&&n(t)}),pending||(pending=!0,timerFunc()),!e&&"undefined"!=typeof Promise)return new Promise(function(e){n=e})}var initProxy,perf=inBrowser&&window.performance;perf&&perf.mark&&perf.measure&&perf.clearMarks&&perf.clearMeasures&&(mark=function(e){return perf.mark(e)},measure=function(e,t,n){perf.measure(e,t,n),perf.clearMarks(t),perf.clearMarks(n)});var allowedGlobals=makeMap("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,require"),warnNonPresent=function(e,t){warn('Property or method "'+t+'" is not defined on the instance but referenced during render. Make sure that this property is reactive, either in the data option, or for class-based components, by initializing the property. See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',e)},warnReservedPrefix=function(e,t){warn('Property "'+t+'" must be accessed with "$data.'+t+'" because properties starting with "$" or "_" are not proxied in the Vue instance to prevent conflicts with Vue internalsSee: https://vuejs.org/v2/api/#data',e)},hasProxy="undefined"!=typeof Proxy&&isNative(Proxy);if(hasProxy){var isBuiltInModifier=makeMap("stop,prevent,self,ctrl,shift,alt,meta,exact");config.keyCodes=new Proxy(config.keyCodes,{set:function(e,t,n){return isBuiltInModifier(t)?(warn("Avoid overwriting built-in modifier in config.keyCodes: ."+t),!1):(e[t]=n,!0)}})}var hasHandler={has:function(e,t){var n=t in e,r=allowedGlobals(t)||"string"==typeof t&&"_"===t.charAt(0)&&!(t in e.$data);return n||r||(t in e.$data?warnReservedPrefix(e,t):warnNonPresent(e,t)),n||!r}},getHandler={get:function(e,t){return"string"!=typeof t||t in e||(t in e.$data?warnReservedPrefix(e,t):warnNonPresent(e,t)),e[t]}};initProxy=function(e){if(hasProxy){var t=e.$options,n=t.render&&t.render._withStripped?getHandler:hasHandler;e._renderProxy=new Proxy(e,n)}else e._renderProxy=e};var seenObjects=new _Set;function traverse(e){_traverse(e,seenObjects),seenObjects.clear()}function _traverse(e,t){var n,r,i=Array.isArray(e);if(!(!i&&!isObject$1(e)||Object.isFrozen(e)||e instanceof VNode)){if(e.__ob__){var a=e.__ob__.dep.id;if(t.has(a))return;t.add(a)}if(i)for(n=e.length;n--;)_traverse(e[n],t);else for(n=(r=Object.keys(e)).length;n--;)_traverse(e[r[n]],t)}}var normalizeEvent=cached(function(e){var t="&"===e.charAt(0),n="~"===(e=t?e.slice(1):e).charAt(0),r="!"===(e=n?e.slice(1):e).charAt(0);return{name:e=r?e.slice(1):e,once:n,capture:r,passive:t}});function createFnInvoker(e,t){function n(){var e=arguments,r=n.fns;if(!Array.isArray(r))return invokeWithErrorHandling(r,null,arguments,t,"v-on handler");for(var i=r.slice(),a=0;a<i.length;a++)invokeWithErrorHandling(i[a],null,e,t,"v-on handler")}return n.fns=e,n}function updateListeners(e,t,n,r,i,a){var o,s,l,c;for(o in e)s=e[o],l=t[o],c=normalizeEvent(o),isUndef(s)?warn('Invalid handler for event "'+c.name+'": got '+String(s),a):isUndef(l)?(isUndef(s.fns)&&(s=e[o]=createFnInvoker(s,a)),isTrue(c.once)&&(s=e[o]=i(c.name,s,c.capture)),n(c.name,s,c.capture,c.passive,c.params)):s!==l&&(l.fns=s,e[o]=l);for(o in t)isUndef(e[o])&&r((c=normalizeEvent(o)).name,t[o],c.capture)}function mergeVNodeHook(e,t,n){var r;e instanceof VNode&&(e=e.data.hook||(e.data.hook={}));var i=e[t];function a(){n.apply(this,arguments),remove(r.fns,a)}isUndef(i)?r=createFnInvoker([a]):isDef(i.fns)&&isTrue(i.merged)?(r=i).fns.push(a):r=createFnInvoker([i,a]),r.merged=!0,e[t]=r}function extractPropsFromVNodeData(e,t,n){var r=t.options.props;if(!isUndef(r)){var i={},a=e.attrs,o=e.props;if(isDef(a)||isDef(o))for(var s in r){var l=hyphenate(s),c=s.toLowerCase();s!==c&&a&&hasOwn(a,c)&&tip('Prop "'+c+'" is passed to component '+formatComponentName(n||t)+', but the declared prop name is "'+s+'". Note that HTML attributes are case-insensitive and camelCased props need to use their kebab-case equivalents when using in-DOM templates. You should probably use "'+l+'" instead of "'+s+'".'),checkProp(i,o,s,l,!0)||checkProp(i,a,s,l,!1)}return i}}function checkProp(e,t,n,r,i){if(isDef(t)){if(hasOwn(t,n))return e[n]=t[n],i||delete t[n],!0;if(hasOwn(t,r))return e[n]=t[r],i||delete t[r],!0}return!1}function simpleNormalizeChildren(e){for(var t=0;t<e.length;t++)if(Array.isArray(e[t]))return Array.prototype.concat.apply([],e);return e}function normalizeChildren(e){return isPrimitive(e)?[createTextVNode(e)]:Array.isArray(e)?normalizeArrayChildren(e):void 0}function isTextNode(e){return isDef(e)&&isDef(e.text)&&isFalse(e.isComment)}function normalizeArrayChildren(e,t){var n,r,i,a,o=[];for(n=0;n<e.length;n++)isUndef(r=e[n])||"boolean"==typeof r||(a=o[i=o.length-1],Array.isArray(r)?r.length>0&&(isTextNode((r=normalizeArrayChildren(r,(t||"")+"_"+n))[0])&&isTextNode(a)&&(o[i]=createTextVNode(a.text+r[0].text),r.shift()),o.push.apply(o,r)):isPrimitive(r)?isTextNode(a)?o[i]=createTextVNode(a.text+r):""!==r&&o.push(createTextVNode(r)):isTextNode(r)&&isTextNode(a)?o[i]=createTextVNode(a.text+r.text):(isTrue(e._isVList)&&isDef(r.tag)&&isUndef(r.key)&&isDef(t)&&(r.key="__vlist"+t+"_"+n+"__"),o.push(r)));return o}function initProvide(e){var t=e.$options.provide;t&&(e._provided="function"==typeof t?t.call(e):t)}function initInjections(e){var t=resolveInject(e.$options.inject,e);t&&(toggleObserving(!1),Object.keys(t).forEach(function(n){defineReactive$$1(e,n,t[n],function(){warn('Avoid mutating an injected value directly since the changes will be overwritten whenever the provided component re-renders. injection being mutated: "'+n+'"',e)})}),toggleObserving(!0))}function resolveInject(e,t){if(e){for(var n=Object.create(null),r=hasSymbol?Reflect.ownKeys(e):Object.keys(e),i=0;i<r.length;i++){var a=r[i];if("__ob__"!==a){for(var o=e[a].from,s=t;s;){if(s._provided&&hasOwn(s._provided,o)){n[a]=s._provided[o];break}s=s.$parent}if(!s)if("default"in e[a]){var l=e[a].default;n[a]="function"==typeof l?l.call(t):l}else warn('Injection "'+a+'" not found',t)}}return n}}function resolveSlots(e,t){if(!e||!e.length)return{};for(var n={},r=0,i=e.length;r<i;r++){var a=e[r],o=a.data;if(o&&o.attrs&&o.attrs.slot&&delete o.attrs.slot,a.context!==t&&a.fnContext!==t||!o||null==o.slot)(n.default||(n.default=[])).push(a);else{var s=o.slot,l=n[s]||(n[s]=[]);"template"===a.tag?l.push.apply(l,a.children||[]):l.push(a)}}for(var c in n)n[c].every(isWhitespace)&&delete n[c];return n}function isWhitespace(e){return e.isComment&&!e.asyncFactory||" "===e.text}function normalizeScopedSlots(e,t,n){var r;if(e){if(e._normalized)return e._normalized;if(e.$stable&&n&&n!==emptyObject&&0===Object.keys(t).length)return n;for(var i in r={},e)e[i]&&"$"!==i[0]&&(r[i]=normalizeScopedSlot(t,i,e[i]))}else r={};for(var a in t)a in r||(r[a]=proxyNormalSlot(t,a));return e&&Object.isExtensible(e)&&(e._normalized=r),def(r,"$stable",!e||!!e.$stable),r}function normalizeScopedSlot(e,t,n){var r=function(){var e=arguments.length?n.apply(null,arguments):n({});return(e=e&&"object"===(void 0===e?"undefined":_typeof(e))&&!Array.isArray(e)?[e]:normalizeChildren(e))&&0===e.length?void 0:e};return n.proxy&&Object.defineProperty(e,t,{get:r,enumerable:!0,configurable:!0}),r}function proxyNormalSlot(e,t){return function(){return e[t]}}function renderList(e,t){var n,r,i,a,o;if(Array.isArray(e)||"string"==typeof e)for(n=new Array(e.length),r=0,i=e.length;r<i;r++)n[r]=t(e[r],r);else if("number"==typeof e)for(n=new Array(e),r=0;r<e;r++)n[r]=t(r+1,r);else if(isObject$1(e))if(hasSymbol&&e[Symbol.iterator]){n=[];for(var s=e[Symbol.iterator](),l=s.next();!l.done;)n.push(t(l.value,n.length)),l=s.next()}else for(a=Object.keys(e),n=new Array(a.length),r=0,i=a.length;r<i;r++)o=a[r],n[r]=t(e[o],o,r);return isDef(n)||(n=[]),n._isVList=!0,n}function renderSlot(e,t,n,r){var i,a=this.$scopedSlots[e];a?(n=n||{},r&&(isObject$1(r)||warn("slot v-bind without argument expects an Object",this),n=extend(extend({},r),n)),i=a(n)||t):i=this.$slots[e]||t;var o=n&&n.slot;return o?this.$createElement("template",{slot:o},i):i}function resolveFilter(e){return resolveAsset(this.$options,"filters",e,!0)||identity$1}function isKeyNotMatch(e,t){return Array.isArray(e)?-1===e.indexOf(t):e!==t}function checkKeyCodes(e,t,n,r,i){var a=config.keyCodes[t]||n;return i&&r&&!config.keyCodes[t]?isKeyNotMatch(i,r):a?isKeyNotMatch(a,e):r?hyphenate(r)!==t:void 0}function bindObjectProps(e,t,n,r,i){if(n)if(isObject$1(n)){var a;Array.isArray(n)&&(n=toObject(n));var o=function(o){if("class"===o||"style"===o||isReservedAttribute(o))a=e;else{var s=e.attrs&&e.attrs.type;a=r||config.mustUseProp(t,s,o)?e.domProps||(e.domProps={}):e.attrs||(e.attrs={})}var l=camelize(o);o in a||l in a||(a[o]=n[o],i&&((e.on||(e.on={}))["update:"+l]=function(e){n[o]=e}))};for(var s in n)o(s)}else warn("v-bind without argument expects an Object or Array value",this);return e}function renderStatic(e,t){var n=this._staticTrees||(this._staticTrees=[]),r=n[e];return r&&!t?r:(markStatic(r=n[e]=this.$options.staticRenderFns[e].call(this._renderProxy,null,this),"__static__"+e,!1),r)}function markOnce(e,t,n){return markStatic(e,"__once__"+t+(n?"_"+n:""),!0),e}function markStatic(e,t,n){if(Array.isArray(e))for(var r=0;r<e.length;r++)e[r]&&"string"!=typeof e[r]&&markStaticNode(e[r],t+"_"+r,n);else markStaticNode(e,t,n)}function markStaticNode(e,t,n){e.isStatic=!0,e.key=t,e.isOnce=n}function bindObjectListeners(e,t){if(t)if(isPlainObject$1(t)){var n=e.on=e.on?extend({},e.on):{};for(var r in t){var i=n[r],a=t[r];n[r]=i?[].concat(i,a):a}}else warn("v-on without argument expects an Object value",this);return e}function resolveScopedSlots(e,t,n){n=n||{$stable:!t};for(var r=0;r<e.length;r++){var i=e[r];Array.isArray(i)?resolveScopedSlots(i,t,n):i&&(i.proxy&&(i.fn.proxy=!0),n[i.key]=i.fn)}return n}function bindDynamicKeys(e,t){for(var n=0;n<t.length;n+=2){var r=t[n];"string"==typeof r&&r?e[t[n]]=t[n+1]:""!==r&&null!==r&&warn("Invalid value for dynamic directive argument (expected string or null): "+r,this)}return e}function prependModifier(e,t){return"string"==typeof e?t+e:e}function installRenderHelpers(e){e._o=markOnce,e._n=toNumber,e._s=toString$1,e._l=renderList,e._t=renderSlot,e._q=looseEqual,e._i=looseIndexOf,e._m=renderStatic,e._f=resolveFilter,e._k=checkKeyCodes,e._b=bindObjectProps,e._v=createTextVNode,e._e=createEmptyVNode,e._u=resolveScopedSlots,e._g=bindObjectListeners,e._d=bindDynamicKeys,e._p=prependModifier}function FunctionalRenderContext(e,t,n,r,i){var a,o=this,s=i.options;hasOwn(r,"_uid")?(a=Object.create(r))._original=r:(a=r,r=r._original);var l=isTrue(s._compiled),c=!l;this.data=e,this.props=t,this.children=n,this.parent=r,this.listeners=e.on||emptyObject,this.injections=resolveInject(s.inject,r),this.slots=function(){return o.$slots||normalizeScopedSlots(e.scopedSlots,o.$slots=resolveSlots(n,r)),o.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return normalizeScopedSlots(e.scopedSlots,this.slots())}}),l&&(this.$options=s,this.$slots=this.slots(),this.$scopedSlots=normalizeScopedSlots(e.scopedSlots,this.$slots)),s._scopeId?this._c=function(e,t,n,i){var o=createElement(a,e,t,n,i,c);return o&&!Array.isArray(o)&&(o.fnScopeId=s._scopeId,o.fnContext=r),o}:this._c=function(e,t,n,r){return createElement(a,e,t,n,r,c)}}function createFunctionalComponent(e,t,n,r,i){var a=e.options,o={},s=a.props;if(isDef(s))for(var l in s)o[l]=validateProp(l,s,t||emptyObject);else isDef(n.attrs)&&mergeProps(o,n.attrs),isDef(n.props)&&mergeProps(o,n.props);var c=new FunctionalRenderContext(n,o,i,r,e),u=a.render.call(null,c._c,c);if(u instanceof VNode)return cloneAndMarkFunctionalResult(u,n,c.parent,a,c);if(Array.isArray(u)){for(var d=normalizeChildren(u)||[],h=new Array(d.length),f=0;f<d.length;f++)h[f]=cloneAndMarkFunctionalResult(d[f],n,c.parent,a,c);return h}}function cloneAndMarkFunctionalResult(e,t,n,r,i){var a=cloneVNode(e);return a.fnContext=n,a.fnOptions=r,(a.devtoolsMeta=a.devtoolsMeta||{}).renderContext=i,t.slot&&((a.data||(a.data={})).slot=t.slot),a}function mergeProps(e,t){for(var n in t)e[camelize(n)]=t[n]}installRenderHelpers(FunctionalRenderContext.prototype);var componentVNodeHooks={init:function(e,t){if(e.componentInstance&&!e.componentInstance._isDestroyed&&e.data.keepAlive){var n=e;componentVNodeHooks.prepatch(n,n)}else{(e.componentInstance=createComponentInstanceForVnode(e,activeInstance)).$mount(t?e.elm:void 0,t)}},prepatch:function(e,t){var n=t.componentOptions;updateChildComponent(t.componentInstance=e.componentInstance,n.propsData,n.listeners,t,n.children)},insert:function(e){var t=e.context,n=e.componentInstance;n._isMounted||(n._isMounted=!0,callHook(n,"mounted")),e.data.keepAlive&&(t._isMounted?queueActivatedComponent(n):activateChildComponent(n,!0))},destroy:function(e){var t=e.componentInstance;t._isDestroyed||(e.data.keepAlive?deactivateChildComponent(t,!0):t.$destroy())}},hooksToMerge=Object.keys(componentVNodeHooks);function createComponent(e,t,n,r,i){if(!isUndef(e)){var a=n.$options._base;if(isObject$1(e)&&(e=a.extend(e)),"function"==typeof e){var o;if(isUndef(e.cid)&&void 0===(e=resolveAsyncComponent(o=e,a)))return createAsyncPlaceholder(o,t,n,r,i);t=t||{},resolveConstructorOptions(e),isDef(t.model)&&transformModel(e.options,t);var s=extractPropsFromVNodeData(t,e,i);if(isTrue(e.options.functional))return createFunctionalComponent(e,s,t,n,r);var l=t.on;if(t.on=t.nativeOn,isTrue(e.options.abstract)){var c=t.slot;t={},c&&(t.slot=c)}installComponentHooks(t);var u=e.options.name||i;return new VNode("vue-component-"+e.cid+(u?"-"+u:""),t,void 0,void 0,void 0,n,{Ctor:e,propsData:s,listeners:l,tag:i,children:r},o)}warn("Invalid Component definition: "+String(e),n)}}function createComponentInstanceForVnode(e,t){var n={_isComponent:!0,_parentVnode:e,parent:t},r=e.data.inlineTemplate;return isDef(r)&&(n.render=r.render,n.staticRenderFns=r.staticRenderFns),new e.componentOptions.Ctor(n)}function installComponentHooks(e){for(var t=e.hook||(e.hook={}),n=0;n<hooksToMerge.length;n++){var r=hooksToMerge[n],i=t[r],a=componentVNodeHooks[r];i===a||i&&i._merged||(t[r]=i?mergeHook$1(a,i):a)}}function mergeHook$1(e,t){var n=function(n,r){e(n,r),t(n,r)};return n._merged=!0,n}function transformModel(e,t){var n=e.model&&e.model.prop||"value",r=e.model&&e.model.event||"input";(t.attrs||(t.attrs={}))[n]=t.model.value;var i=t.on||(t.on={}),a=i[r],o=t.model.callback;isDef(a)?(Array.isArray(a)?-1===a.indexOf(o):a!==o)&&(i[r]=[o].concat(a)):i[r]=o}var SIMPLE_NORMALIZE=1,ALWAYS_NORMALIZE=2;function createElement(e,t,n,r,i,a){return(Array.isArray(n)||isPrimitive(n))&&(i=r,r=n,n=void 0),isTrue(a)&&(i=ALWAYS_NORMALIZE),_createElement(e,t,n,r,i)}function _createElement(e,t,n,r,i){if(isDef(n)&&isDef(n.__ob__))return warn("Avoid using observed data object as vnode data: "+JSON.stringify(n)+"\nAlways create fresh vnode data objects in each render!",e),createEmptyVNode();if(isDef(n)&&isDef(n.is)&&(t=n.is),!t)return createEmptyVNode();var a,o,s;(isDef(n)&&isDef(n.key)&&!isPrimitive(n.key)&&warn("Avoid using non-primitive value as key, use string/number value instead.",e),Array.isArray(r)&&"function"==typeof r[0]&&((n=n||{}).scopedSlots={default:r[0]},r.length=0),i===ALWAYS_NORMALIZE?r=normalizeChildren(r):i===SIMPLE_NORMALIZE&&(r=simpleNormalizeChildren(r)),"string"==typeof t)?(o=e.$vnode&&e.$vnode.ns||config.getTagNamespace(t),a=config.isReservedTag(t)?new VNode(config.parsePlatformTagName(t),n,r,void 0,void 0,e):n&&n.pre||!isDef(s=resolveAsset(e.$options,"components",t))?new VNode(t,n,r,void 0,void 0,e):createComponent(s,n,e,r,t)):a=createComponent(t,n,e,r);return Array.isArray(a)?a:isDef(a)?(isDef(o)&&applyNS(a,o),isDef(n)&&registerDeepBindings(n),a):createEmptyVNode()}function applyNS(e,t,n){if(e.ns=t,"foreignObject"===e.tag&&(t=void 0,n=!0),isDef(e.children))for(var r=0,i=e.children.length;r<i;r++){var a=e.children[r];isDef(a.tag)&&(isUndef(a.ns)||isTrue(n)&&"svg"!==a.tag)&&applyNS(a,t,n)}}function registerDeepBindings(e){isObject$1(e.style)&&traverse(e.style),isObject$1(e.class)&&traverse(e.class)}function initRender(e){e._vnode=null,e._staticTrees=null;var t=e.$options,n=e.$vnode=t._parentVnode,r=n&&n.context;e.$slots=resolveSlots(t._renderChildren,r),e.$scopedSlots=emptyObject,e._c=function(t,n,r,i){return createElement(e,t,n,r,i,!1)},e.$createElement=function(t,n,r,i){return createElement(e,t,n,r,i,!0)};var i=n&&n.data;defineReactive$$1(e,"$attrs",i&&i.attrs||emptyObject,function(){!isUpdatingChildComponent&&warn("$attrs is readonly.",e)},!0),defineReactive$$1(e,"$listeners",t._parentListeners||emptyObject,function(){!isUpdatingChildComponent&&warn("$listeners is readonly.",e)},!0)}var target,currentRenderingInstance=null;function renderMixin(e){installRenderHelpers(e.prototype),e.prototype.$nextTick=function(e){return nextTick(e,this)},e.prototype._render=function(){var e,t=this,n=t.$options,r=n.render,i=n._parentVnode;i&&(t.$scopedSlots=normalizeScopedSlots(i.data.scopedSlots,t.$slots,t.$scopedSlots)),t.$vnode=i;try{currentRenderingInstance=t,e=r.call(t._renderProxy,t.$createElement)}catch(n){if(handleError(n,t,"render"),t.$options.renderError)try{e=t.$options.renderError.call(t._renderProxy,t.$createElement,n)}catch(n){handleError(n,t,"renderError"),e=t._vnode}else e=t._vnode}finally{currentRenderingInstance=null}return Array.isArray(e)&&1===e.length&&(e=e[0]),e instanceof VNode||(Array.isArray(e)&&warn("Multiple root nodes returned from render function. Render function should return a single root node.",t),e=createEmptyVNode()),e.parent=i,e}}function ensureCtor(e,t){return(e.__esModule||hasSymbol&&"Module"===e[Symbol.toStringTag])&&(e=e.default),isObject$1(e)?t.extend(e):e}function createAsyncPlaceholder(e,t,n,r,i){var a=createEmptyVNode();return a.asyncFactory=e,a.asyncMeta={data:t,context:n,children:r,tag:i},a}function resolveAsyncComponent(e,t){if(isTrue(e.error)&&isDef(e.errorComp))return e.errorComp;if(isDef(e.resolved))return e.resolved;if(isTrue(e.loading)&&isDef(e.loadingComp))return e.loadingComp;var n=currentRenderingInstance;if(!isDef(e.owners)){var r=e.owners=[n],i=!0,a=function(e){for(var t=0,n=r.length;t<n;t++)r[t].$forceUpdate();e&&(r.length=0)},o=once(function(n){e.resolved=ensureCtor(n,t),i?r.length=0:a(!0)}),s=once(function(t){warn("Failed to resolve async component: "+String(e)+(t?"\nReason: "+t:"")),isDef(e.errorComp)&&(e.error=!0,a(!0))}),l=e(o,s);return isObject$1(l)&&(isPromise(l)?isUndef(e.resolved)&&l.then(o,s):isPromise(l.component)&&(l.component.then(o,s),isDef(l.error)&&(e.errorComp=ensureCtor(l.error,t)),isDef(l.loading)&&(e.loadingComp=ensureCtor(l.loading,t),0===l.delay?e.loading=!0:setTimeout(function(){isUndef(e.resolved)&&isUndef(e.error)&&(e.loading=!0,a(!1))},l.delay||200)),isDef(l.timeout)&&setTimeout(function(){isUndef(e.resolved)&&s("timeout ("+l.timeout+"ms)")},l.timeout))),i=!1,e.loading?e.loadingComp:e.resolved}e.owners.push(n)}function isAsyncPlaceholder(e){return e.isComment&&e.asyncFactory}function getFirstComponentChild(e){if(Array.isArray(e))for(var t=0;t<e.length;t++){var n=e[t];if(isDef(n)&&(isDef(n.componentOptions)||isAsyncPlaceholder(n)))return n}}function initEvents(e){e._events=Object.create(null),e._hasHookEvent=!1;var t=e.$options._parentListeners;t&&updateComponentListeners(e,t)}function add(e,t){target.$on(e,t)}function remove$1(e,t){target.$off(e,t)}function createOnceHandler(e,t){var n=target;return function r(){null!==t.apply(null,arguments)&&n.$off(e,r)}}function updateComponentListeners(e,t,n){target=e,updateListeners(t,n||{},add,remove$1,createOnceHandler,e),target=void 0}function eventsMixin(e){var t=/^hook:/;e.prototype.$on=function(e,n){var r=this;if(Array.isArray(e))for(var i=0,a=e.length;i<a;i++)r.$on(e[i],n);else(r._events[e]||(r._events[e]=[])).push(n),t.test(e)&&(r._hasHookEvent=!0);return r},e.prototype.$once=function(e,t){var n=this;function r(){n.$off(e,r),t.apply(n,arguments)}return r.fn=t,n.$on(e,r),n},e.prototype.$off=function(e,t){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(e)){for(var r=0,i=e.length;r<i;r++)n.$off(e[r],t);return n}var a,o=n._events[e];if(!o)return n;if(!t)return n._events[e]=null,n;for(var s=o.length;s--;)if((a=o[s])===t||a.fn===t){o.splice(s,1);break}return n},e.prototype.$emit=function(e){var t=this,n=e.toLowerCase();n!==e&&t._events[n]&&tip('Event "'+n+'" is emitted in component '+formatComponentName(t)+' but the handler is registered for "'+e+'". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "'+hyphenate(e)+'" instead of "'+e+'".');var r=t._events[e];if(r){r=r.length>1?toArray$1(r):r;for(var i=toArray$1(arguments,1),a='event handler for "'+e+'"',o=0,s=r.length;o<s;o++)invokeWithErrorHandling(r[o],t,i,t,a)}return t}}var activeInstance=null,isUpdatingChildComponent=!1;function setActiveInstance(e){var t=activeInstance;return activeInstance=e,function(){activeInstance=t}}function initLifecycle(e){var t=e.$options,n=t.parent;if(n&&!t.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(e)}e.$parent=n,e.$root=n?n.$root:e,e.$children=[],e.$refs={},e._watcher=null,e._inactive=null,e._directInactive=!1,e._isMounted=!1,e._isDestroyed=!1,e._isBeingDestroyed=!1}function lifecycleMixin(e){e.prototype._update=function(e,t){var n=this,r=n.$el,i=n._vnode,a=setActiveInstance(n);n._vnode=e,n.$el=i?n.__patch__(i,e):n.__patch__(n.$el,e,t,!1),a(),r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},e.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},e.prototype.$destroy=function(){var e=this;if(!e._isBeingDestroyed){callHook(e,"beforeDestroy"),e._isBeingDestroyed=!0;var t=e.$parent;!t||t._isBeingDestroyed||e.$options.abstract||remove(t.$children,e),e._watcher&&e._watcher.teardown();for(var n=e._watchers.length;n--;)e._watchers[n].teardown();e._data.__ob__&&e._data.__ob__.vmCount--,e._isDestroyed=!0,e.__patch__(e._vnode,null),callHook(e,"destroyed"),e.$off(),e.$el&&(e.$el.__vue__=null),e.$vnode&&(e.$vnode.parent=null)}}}function mountComponent(e,t,n){var r;return e.$el=t,e.$options.render||(e.$options.render=createEmptyVNode,e.$options.template&&"#"!==e.$options.template.charAt(0)||e.$options.el||t?warn("You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.",e):warn("Failed to mount component: template or render function not defined.",e)),callHook(e,"beforeMount"),r=config.performance&&mark?function(){var t=e._name,r=e._uid,i="vue-perf-start:"+r,a="vue-perf-end:"+r;mark(i);var o=e._render();mark(a),measure("vue "+t+" render",i,a),mark(i),e._update(o,n),mark(a),measure("vue "+t+" patch",i,a)}:function(){e._update(e._render(),n)},new Watcher(e,r,noop$1,{before:function(){e._isMounted&&!e._isDestroyed&&callHook(e,"beforeUpdate")}},!0),n=!1,null==e.$vnode&&(e._isMounted=!0,callHook(e,"mounted")),e}function updateChildComponent(e,t,n,r,i){isUpdatingChildComponent=!0;var a=!!(r.data.scopedSlots&&!r.data.scopedSlots.$stable||e.$scopedSlots!==emptyObject&&!e.$scopedSlots.$stable),o=!!(i||e.$options._renderChildren||a);if(e.$options._parentVnode=r,e.$vnode=r,e._vnode&&(e._vnode.parent=r),e.$options._renderChildren=i,e.$attrs=r.data.attrs||emptyObject,e.$listeners=n||emptyObject,t&&e.$options.props){toggleObserving(!1);for(var s=e._props,l=e.$options._propKeys||[],c=0;c<l.length;c++){var u=l[c],d=e.$options.props;s[u]=validateProp(u,d,t,e)}toggleObserving(!0),e.$options.propsData=t}n=n||emptyObject;var h=e.$options._parentListeners;e.$options._parentListeners=n,updateComponentListeners(e,n,h),o&&(e.$slots=resolveSlots(i,r.context),e.$forceUpdate()),isUpdatingChildComponent=!1}function isInInactiveTree(e){for(;e&&(e=e.$parent);)if(e._inactive)return!0;return!1}function activateChildComponent(e,t){if(t){if(e._directInactive=!1,isInInactiveTree(e))return}else if(e._directInactive)return;if(e._inactive||null===e._inactive){e._inactive=!1;for(var n=0;n<e.$children.length;n++)activateChildComponent(e.$children[n]);callHook(e,"activated")}}function deactivateChildComponent(e,t){if(!(t&&(e._directInactive=!0,isInInactiveTree(e))||e._inactive)){e._inactive=!0;for(var n=0;n<e.$children.length;n++)deactivateChildComponent(e.$children[n]);callHook(e,"deactivated")}}function callHook(e,t){pushTarget();var n=e.$options[t],r=t+" hook";if(n)for(var i=0,a=n.length;i<a;i++)invokeWithErrorHandling(n[i],e,null,e,r);e._hasHookEvent&&e.$emit("hook:"+t),popTarget()}var MAX_UPDATE_COUNT=100,queue=[],activatedChildren=[],has={},circular={},waiting=!1,flushing=!1,index=0;function resetSchedulerState(){index=queue.length=activatedChildren.length=0,has={},circular={},waiting=flushing=!1}var currentFlushTimestamp=0,getNow=Date.now;function flushSchedulerQueue(){var e,t;for(currentFlushTimestamp=getNow(),flushing=!0,queue.sort(function(e,t){return e.id-t.id}),index=0;index<queue.length;index++)if((e=queue[index]).before&&e.before(),t=e.id,has[t]=null,e.run(),null!=has[t]&&(circular[t]=(circular[t]||0)+1,circular[t]>MAX_UPDATE_COUNT)){warn("You may have an infinite update loop "+(e.user?'in watcher with expression "'+e.expression+'"':"in a component render function."),e.vm);break}var n=activatedChildren.slice(),r=queue.slice();resetSchedulerState(),callActivatedHooks(n),callUpdatedHooks(r),devtools&&config.devtools&&devtools.emit("flush")}function callUpdatedHooks(e){for(var t=e.length;t--;){var n=e[t],r=n.vm;r._watcher===n&&r._isMounted&&!r._isDestroyed&&callHook(r,"updated")}}function queueActivatedComponent(e){e._inactive=!1,activatedChildren.push(e)}function callActivatedHooks(e){for(var t=0;t<e.length;t++)e[t]._inactive=!0,activateChildComponent(e[t],!0)}function queueWatcher(e){var t=e.id;if(null==has[t]){if(has[t]=!0,flushing){for(var n=queue.length-1;n>index&&queue[n].id>e.id;)n--;queue.splice(n+1,0,e)}else queue.push(e);if(!waiting){if(waiting=!0,!config.async)return void flushSchedulerQueue();nextTick(flushSchedulerQueue)}}}inBrowser&&getNow()>document.createEvent("Event").timeStamp&&(getNow=function(){return performance.now()});var uid$2=0,Watcher=function(e,t,n,r,i){this.vm=e,i&&(e._watcher=this),e._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++uid$2,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new _Set,this.newDepIds=new _Set,this.expression=t.toString(),"function"==typeof t?this.getter=t:(this.getter=parsePath(t),this.getter||(this.getter=noop$1,warn('Failed watching path: "'+t+'" Watcher only accepts simple dot-delimited paths. For full control, use a function instead.',e))),this.value=this.lazy?void 0:this.get()};Watcher.prototype.get=function(){var e;pushTarget(this);var t=this.vm;try{e=this.getter.call(t,t)}catch(e){if(!this.user)throw e;handleError(e,t,'getter for watcher "'+this.expression+'"')}finally{this.deep&&traverse(e),popTarget(),this.cleanupDeps()}return e},Watcher.prototype.addDep=function(e){var t=e.id;this.newDepIds.has(t)||(this.newDepIds.add(t),this.newDeps.push(e),this.depIds.has(t)||e.addSub(this))},Watcher.prototype.cleanupDeps=function(){for(var e=this.deps.length;e--;){var t=this.deps[e];this.newDepIds.has(t.id)||t.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},Watcher.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():queueWatcher(this)},Watcher.prototype.run=function(){if(this.active){var e=this.get();if(e!==this.value||isObject$1(e)||this.deep){var t=this.value;if(this.value=e,this.user)try{this.cb.call(this.vm,e,t)}catch(e){handleError(e,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,e,t)}}},Watcher.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},Watcher.prototype.depend=function(){for(var e=this.deps.length;e--;)this.deps[e].depend()},Watcher.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||remove(this.vm._watchers,this);for(var e=this.deps.length;e--;)this.deps[e].removeSub(this);this.active=!1}};var sharedPropertyDefinition={enumerable:!0,configurable:!0,get:noop$1,set:noop$1};function proxy(e,t,n){sharedPropertyDefinition.get=function(){return this[t][n]},sharedPropertyDefinition.set=function(e){this[t][n]=e},Object.defineProperty(e,n,sharedPropertyDefinition)}function initState(e){e._watchers=[];var t=e.$options;t.props&&initProps(e,t.props),t.methods&&initMethods(e,t.methods),t.data?initData(e):observe(e._data={},!0),t.computed&&initComputed(e,t.computed),t.watch&&t.watch!==nativeWatch&&initWatch(e,t.watch)}function initProps(e,t){var n=e.$options.propsData||{},r=e._props={},i=e.$options._propKeys=[],a=!e.$parent;a||toggleObserving(!1);var o=function(o){i.push(o);var s=validateProp(o,t,n,e),l=hyphenate(o);(isReservedAttribute(l)||config.isReservedAttr(l))&&warn('"'+l+'" is a reserved attribute and cannot be used as component prop.',e),defineReactive$$1(r,o,s,function(){a||isUpdatingChildComponent||warn("Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value. Prop being mutated: \""+o+'"',e)}),o in e||proxy(e,"_props",o)};for(var s in t)o(s);toggleObserving(!0)}function initData(e){var t=e.$options.data;isPlainObject$1(t=e._data="function"==typeof t?getData(t,e):t||{})||(t={},warn("data functions should return an object:\nhttps://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function",e));for(var n=Object.keys(t),r=e.$options.props,i=e.$options.methods,a=n.length;a--;){var o=n[a];i&&hasOwn(i,o)&&warn('Method "'+o+'" has already been defined as a data property.',e),r&&hasOwn(r,o)?warn('The data property "'+o+'" is already declared as a prop. Use prop default value instead.',e):isReserved(o)||proxy(e,"_data",o)}observe(t,!0)}function getData(e,t){pushTarget();try{return e.call(t,t)}catch(e){return handleError(e,t,"data()"),{}}finally{popTarget()}}var computedWatcherOptions={lazy:!0};function initComputed(e,t){var n=e._computedWatchers=Object.create(null),r=isServerRendering();for(var i in t){var a=t[i],o="function"==typeof a?a:a.get;null==o&&warn('Getter is missing for computed property "'+i+'".',e),r||(n[i]=new Watcher(e,o||noop$1,noop$1,computedWatcherOptions)),i in e?i in e.$data?warn('The computed property "'+i+'" is already defined in data.',e):e.$options.props&&i in e.$options.props&&warn('The computed property "'+i+'" is already defined as a prop.',e):defineComputed(e,i,a)}}function defineComputed(e,t,n){var r=!isServerRendering();"function"==typeof n?(sharedPropertyDefinition.get=r?createComputedGetter(t):createGetterInvoker(n),sharedPropertyDefinition.set=noop$1):(sharedPropertyDefinition.get=n.get?r&&!1!==n.cache?createComputedGetter(t):createGetterInvoker(n.get):noop$1,sharedPropertyDefinition.set=n.set||noop$1),sharedPropertyDefinition.set===noop$1&&(sharedPropertyDefinition.set=function(){warn('Computed property "'+t+'" was assigned to but it has no setter.',this)}),Object.defineProperty(e,t,sharedPropertyDefinition)}function createComputedGetter(e){return function(){var t=this._computedWatchers&&this._computedWatchers[e];if(t)return t.dirty&&t.evaluate(),Dep.target&&t.depend(),t.value}}function createGetterInvoker(e){return function(){return e.call(this,this)}}function initMethods(e,t){var n=e.$options.props;for(var r in t)"function"!=typeof t[r]&&warn('Method "'+r+'" has type "'+_typeof(t[r])+'" in the component definition. Did you reference the function correctly?',e),n&&hasOwn(n,r)&&warn('Method "'+r+'" has already been defined as a prop.',e),r in e&&isReserved(r)&&warn('Method "'+r+'" conflicts with an existing Vue instance method. Avoid defining component methods that start with _ or $.'),e[r]="function"!=typeof t[r]?noop$1:bind(t[r],e)}function initWatch(e,t){for(var n in t){var r=t[n];if(Array.isArray(r))for(var i=0;i<r.length;i++)createWatcher(e,n,r[i]);else createWatcher(e,n,r)}}function createWatcher(e,t,n,r){return isPlainObject$1(n)&&(r=n,n=n.handler),"string"==typeof n&&(n=e[n]),e.$watch(t,n,r)}function stateMixin(e){var t={get:function(){return this._data}},n={get:function(){return this._props}};t.set=function(){warn("Avoid replacing instance root $data. Use nested data properties instead.",this)},n.set=function(){warn("$props is readonly.",this)},Object.defineProperty(e.prototype,"$data",t),Object.defineProperty(e.prototype,"$props",n),e.prototype.$set=set$1,e.prototype.$delete=del,e.prototype.$watch=function(e,t,n){if(isPlainObject$1(t))return createWatcher(this,e,t,n);(n=n||{}).user=!0;var r=new Watcher(this,e,t,n);if(n.immediate)try{t.call(this,r.value)}catch(e){handleError(e,this,'callback for immediate watcher "'+r.expression+'"')}return function(){r.teardown()}}}var uid$3=0;function initMixin(e){e.prototype._init=function(e){var t,n,r=this;r._uid=uid$3++,config.performance&&mark&&(t="vue-perf-start:"+r._uid,n="vue-perf-end:"+r._uid,mark(t)),r._isVue=!0,e&&e._isComponent?initInternalComponent(r,e):r.$options=mergeOptions(resolveConstructorOptions(r.constructor),e||{},r),initProxy(r),r._self=r,initLifecycle(r),initEvents(r),initRender(r),callHook(r,"beforeCreate"),initInjections(r),initState(r),initProvide(r),callHook(r,"created"),config.performance&&mark&&(r._name=formatComponentName(r,!1),mark(n),measure("vue "+r._name+" init",t,n)),r.$options.el&&r.$mount(r.$options.el)}}function initInternalComponent(e,t){var n=e.$options=Object.create(e.constructor.options),r=t._parentVnode;n.parent=t.parent,n._parentVnode=r;var i=r.componentOptions;n.propsData=i.propsData,n._parentListeners=i.listeners,n._renderChildren=i.children,n._componentTag=i.tag,t.render&&(n.render=t.render,n.staticRenderFns=t.staticRenderFns)}function resolveConstructorOptions(e){var t=e.options;if(e.super){var n=resolveConstructorOptions(e.super);if(n!==e.superOptions){e.superOptions=n;var r=resolveModifiedOptions(e);r&&extend(e.extendOptions,r),(t=e.options=mergeOptions(n,e.extendOptions)).name&&(t.components[t.name]=e)}}return t}function resolveModifiedOptions(e){var t,n=e.options,r=e.sealedOptions;for(var i in n)n[i]!==r[i]&&(t||(t={}),t[i]=n[i]);return t}function Vue(e){this instanceof Vue||warn("Vue is a constructor and should be called with the `new` keyword"),this._init(e)}function initUse(e){e.use=function(e){var t=this._installedPlugins||(this._installedPlugins=[]);if(t.indexOf(e)>-1)return this;var n=toArray$1(arguments,1);return n.unshift(this),"function"==typeof e.install?e.install.apply(e,n):"function"==typeof e&&e.apply(null,n),t.push(e),this}}function initMixin$1(e){e.mixin=function(e){return this.options=mergeOptions(this.options,e),this}}function initExtend(e){e.cid=0;var t=1;e.extend=function(e){e=e||{};var n=this,r=n.cid,i=e._Ctor||(e._Ctor={});if(i[r])return i[r];var a=e.name||n.options.name;a&&validateComponentName(a);var o=function(e){this._init(e)};return(o.prototype=Object.create(n.prototype)).constructor=o,o.cid=t++,o.options=mergeOptions(n.options,e),o.super=n,o.options.props&&initProps$1(o),o.options.computed&&initComputed$1(o),o.extend=n.extend,o.mixin=n.mixin,o.use=n.use,ASSET_TYPES.forEach(function(e){o[e]=n[e]}),a&&(o.options.components[a]=o),o.superOptions=n.options,o.extendOptions=e,o.sealedOptions=extend({},o.options),i[r]=o,o}}function initProps$1(e){var t=e.options.props;for(var n in t)proxy(e.prototype,"_props",n)}function initComputed$1(e){var t=e.options.computed;for(var n in t)defineComputed(e.prototype,n,t[n])}function initAssetRegisters(e){ASSET_TYPES.forEach(function(t){e[t]=function(e,n){return n?("component"===t&&validateComponentName(e),"component"===t&&isPlainObject$1(n)&&(n.name=n.name||e,n=this.options._base.extend(n)),"directive"===t&&"function"==typeof n&&(n={bind:n,update:n}),this.options[t+"s"][e]=n,n):this.options[t+"s"][e]}})}function getComponentName(e){return e&&(e.Ctor.options.name||e.tag)}function matches(e,t){return Array.isArray(e)?e.indexOf(t)>-1:"string"==typeof e?e.split(",").indexOf(t)>-1:!!isRegExp(e)&&e.test(t)}function pruneCache(e,t){var n=e.cache,r=e.keys,i=e._vnode;for(var a in n){var o=n[a];if(o){var s=getComponentName(o.componentOptions);s&&!t(s)&&pruneCacheEntry(n,a,r,i)}}}function pruneCacheEntry(e,t,n,r){var i=e[t];!i||r&&i.tag===r.tag||i.componentInstance.$destroy(),e[t]=null,remove(n,t)}initMixin(Vue),stateMixin(Vue),eventsMixin(Vue),lifecycleMixin(Vue),renderMixin(Vue);var patternTypes=[String,RegExp,Array],KeepAlive={name:"keep-alive",abstract:!0,props:{include:patternTypes,exclude:patternTypes,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var e in this.cache)pruneCacheEntry(this.cache,e,this.keys)},mounted:function(){var e=this;this.$watch("include",function(t){pruneCache(e,function(e){return matches(t,e)})}),this.$watch("exclude",function(t){pruneCache(e,function(e){return!matches(t,e)})})},render:function(){var e=this.$slots.default,t=getFirstComponentChild(e),n=t&&t.componentOptions;if(n){var r=getComponentName(n),i=this.include,a=this.exclude;if(i&&(!r||!matches(i,r))||a&&r&&matches(a,r))return t;var o=this.cache,s=this.keys,l=null==t.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):t.key;o[l]?(t.componentInstance=o[l].componentInstance,remove(s,l),s.push(l)):(o[l]=t,s.push(l),this.max&&s.length>parseInt(this.max)&&pruneCacheEntry(o,s[0],s,this._vnode)),t.data.keepAlive=!0}return t||e&&e[0]}},builtInComponents={KeepAlive:KeepAlive};function initGlobalAPI(e){var t={get:function(){return config},set:function(){warn("Do not replace the Vue.config object, set individual fields instead.")}};Object.defineProperty(e,"config",t),e.util={warn:warn,extend:extend,mergeOptions:mergeOptions,defineReactive:defineReactive$$1},e.set=set$1,e.delete=del,e.nextTick=nextTick,e.observable=function(e){return observe(e),e},e.options=Object.create(null),ASSET_TYPES.forEach(function(t){e.options[t+"s"]=Object.create(null)}),e.options._base=e,extend(e.options.components,builtInComponents),initUse(e),initMixin$1(e),initExtend(e),initAssetRegisters(e)}initGlobalAPI(Vue),Object.defineProperty(Vue.prototype,"$isServer",{get:isServerRendering}),Object.defineProperty(Vue.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(Vue,"FunctionalRenderContext",{value:FunctionalRenderContext}),Vue.version="2.6.6";var isReservedAttr=makeMap("style,class"),acceptValue=makeMap("input,textarea,option,select,progress"),mustUseProp=function(e,t,n){return"value"===n&&acceptValue(e)&&"button"!==t||"selected"===n&&"option"===e||"checked"===n&&"input"===e||"muted"===n&&"video"===e},isEnumeratedAttr=makeMap("contenteditable,draggable,spellcheck"),isValidContentEditableValue=makeMap("events,caret,typing,plaintext-only"),convertEnumeratedValue=function(e,t){return isFalsyAttrValue(t)||"false"===t?"false":"contenteditable"===e&&isValidContentEditableValue(t)?t:"true"},isBooleanAttr=makeMap("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),xlinkNS="http://www.w3.org/1999/xlink",isXlink=function(e){return":"===e.charAt(5)&&"xlink"===e.slice(0,5)},getXlinkProp=function(e){return isXlink(e)?e.slice(6,e.length):""},isFalsyAttrValue=function(e){return null==e||!1===e};function genClassForVnode(e){for(var t=e.data,n=e,r=e;isDef(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(t=mergeClassData(r.data,t));for(;isDef(n=n.parent);)n&&n.data&&(t=mergeClassData(t,n.data));return renderClass(t.staticClass,t.class)}function mergeClassData(e,t){return{staticClass:concat(e.staticClass,t.staticClass),class:isDef(e.class)?[e.class,t.class]:t.class}}function renderClass(e,t){return isDef(e)||isDef(t)?concat(e,stringifyClass(t)):""}function concat(e,t){return e?t?e+" "+t:e:t||""}function stringifyClass(e){return Array.isArray(e)?stringifyArray(e):isObject$1(e)?stringifyObject(e):"string"==typeof e?e:""}function stringifyArray(e){for(var t,n="",r=0,i=e.length;r<i;r++)isDef(t=stringifyClass(e[r]))&&""!==t&&(n&&(n+=" "),n+=t);return n}function stringifyObject(e){var t="";for(var n in e)e[n]&&(t&&(t+=" "),t+=n);return t}var namespaceMap={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},isHTMLTag=makeMap("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),isSVG=makeMap("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),isPreTag=function(e){return"pre"===e},isReservedTag=function(e){return isHTMLTag(e)||isSVG(e)};function getTagNamespace(e){return isSVG(e)?"svg":"math"===e?"math":void 0}var unknownElementCache=Object.create(null);function isUnknownElement(e){if(!inBrowser)return!0;if(isReservedTag(e))return!1;if(e=e.toLowerCase(),null!=unknownElementCache[e])return unknownElementCache[e];var t=document.createElement(e);return e.indexOf("-")>-1?unknownElementCache[e]=t.constructor===window.HTMLUnknownElement||t.constructor===window.HTMLElement:unknownElementCache[e]=/HTMLUnknownElement/.test(t.toString())}var isTextInputType=makeMap("text,number,password,search,email,tel,url");function query(e){if("string"==typeof e){var t=document.querySelector(e);return t||(warn("Cannot find element: "+e),document.createElement("div"))}return e}function createElement$1(e,t){var n=document.createElement(e);return"select"!==e?n:(t.data&&t.data.attrs&&void 0!==t.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n)}function createElementNS(e,t){return document.createElementNS(namespaceMap[e],t)}function createTextNode(e){return document.createTextNode(e)}function createComment(e){return document.createComment(e)}function insertBefore(e,t,n){e.insertBefore(t,n)}function removeChild(e,t){e.removeChild(t)}function appendChild(e,t){e.appendChild(t)}function parentNode(e){return e.parentNode}function nextSibling(e){return e.nextSibling}function tagName(e){return e.tagName}function setTextContent(e,t){e.textContent=t}function setStyleScope(e,t){e.setAttribute(t,"")}var nodeOps=Object.freeze({createElement:createElement$1,createElementNS:createElementNS,createTextNode:createTextNode,createComment:createComment,insertBefore:insertBefore,removeChild:removeChild,appendChild:appendChild,parentNode:parentNode,nextSibling:nextSibling,tagName:tagName,setTextContent:setTextContent,setStyleScope:setStyleScope}),ref={create:function(e,t){registerRef(t)},update:function(e,t){e.data.ref!==t.data.ref&&(registerRef(e,!0),registerRef(t))},destroy:function(e){registerRef(e,!0)}};function registerRef(e,t){var n=e.data.ref;if(isDef(n)){var r=e.context,i=e.componentInstance||e.elm,a=r.$refs;t?Array.isArray(a[n])?remove(a[n],i):a[n]===i&&(a[n]=void 0):e.data.refInFor?Array.isArray(a[n])?a[n].indexOf(i)<0&&a[n].push(i):a[n]=[i]:a[n]=i}}var emptyNode=new VNode("",{},[]),hooks=["create","activate","update","remove","destroy"];function sameVnode(e,t){return e.key===t.key&&(e.tag===t.tag&&e.isComment===t.isComment&&isDef(e.data)===isDef(t.data)&&sameInputType(e,t)||isTrue(e.isAsyncPlaceholder)&&e.asyncFactory===t.asyncFactory&&isUndef(t.asyncFactory.error))}function sameInputType(e,t){if("input"!==e.tag)return!0;var n,r=isDef(n=e.data)&&isDef(n=n.attrs)&&n.type,i=isDef(n=t.data)&&isDef(n=n.attrs)&&n.type;return r===i||isTextInputType(r)&&isTextInputType(i)}function createKeyToOldIdx(e,t,n){var r,i,a={};for(r=t;r<=n;++r)isDef(i=e[r].key)&&(a[i]=r);return a}function createPatchFunction(e){var t,n,r={},i=e.modules,a=e.nodeOps;for(t=0;t<hooks.length;++t)for(r[hooks[t]]=[],n=0;n<i.length;++n)isDef(i[n][hooks[t]])&&r[hooks[t]].push(i[n][hooks[t]]);function o(e){var t=a.parentNode(e);isDef(t)&&a.removeChild(t,e)}function s(e,t){return!t&&!e.ns&&!(config.ignoredElements.length&&config.ignoredElements.some(function(t){return isRegExp(t)?t.test(e.tag):t===e.tag}))&&config.isUnknownElement(e.tag)}var l=0;function c(e,t,n,i,o,c,f){if(isDef(e.elm)&&isDef(c)&&(e=c[f]=cloneVNode(e)),e.isRootInsert=!o,!function(e,t,n,i){var a=e.data;if(isDef(a)){var o=isDef(e.componentInstance)&&a.keepAlive;if(isDef(a=a.hook)&&isDef(a=a.init)&&a(e,!1),isDef(e.componentInstance))return u(e,t),d(n,e.elm,i),isTrue(o)&&function(e,t,n,i){var a,o=e;for(;o.componentInstance;)if(o=o.componentInstance._vnode,isDef(a=o.data)&&isDef(a=a.transition)){for(a=0;a<r.activate.length;++a)r.activate[a](emptyNode,o);t.push(o);break}d(n,e.elm,i)}(e,t,n,i),!0}}(e,t,n,i)){var m=e.data,v=e.children,y=e.tag;isDef(y)?(m&&m.pre&&l++,s(e,l)&&warn("Unknown custom element: <"+y+'> - did you register the component correctly? For recursive components, make sure to provide the "name" option.',e.context),e.elm=e.ns?a.createElementNS(e.ns,y):a.createElement(y,e),g(e),h(e,v,t),isDef(m)&&p(e,t),d(n,e.elm,i),m&&m.pre&&l--):isTrue(e.isComment)?(e.elm=a.createComment(e.text),d(n,e.elm,i)):(e.elm=a.createTextNode(e.text),d(n,e.elm,i))}}function u(e,t){isDef(e.data.pendingInsert)&&(t.push.apply(t,e.data.pendingInsert),e.data.pendingInsert=null),e.elm=e.componentInstance.$el,f(e)?(p(e,t),g(e)):(registerRef(e),t.push(e))}function d(e,t,n){isDef(e)&&(isDef(n)?a.parentNode(n)===e&&a.insertBefore(e,t,n):a.appendChild(e,t))}function h(e,t,n){if(Array.isArray(t)){_(t);for(var r=0;r<t.length;++r)c(t[r],n,e.elm,null,!0,t,r)}else isPrimitive(e.text)&&a.appendChild(e.elm,a.createTextNode(String(e.text)))}function f(e){for(;e.componentInstance;)e=e.componentInstance._vnode;return isDef(e.tag)}function p(e,n){for(var i=0;i<r.create.length;++i)r.create[i](emptyNode,e);isDef(t=e.data.hook)&&(isDef(t.create)&&t.create(emptyNode,e),isDef(t.insert)&&n.push(e))}function g(e){var t;if(isDef(t=e.fnScopeId))a.setStyleScope(e.elm,t);else for(var n=e;n;)isDef(t=n.context)&&isDef(t=t.$options._scopeId)&&a.setStyleScope(e.elm,t),n=n.parent;isDef(t=activeInstance)&&t!==e.context&&t!==e.fnContext&&isDef(t=t.$options._scopeId)&&a.setStyleScope(e.elm,t)}function m(e,t,n,r,i,a){for(;r<=i;++r)c(n[r],a,e,t,!1,n,r)}function v(e){var t,n,i=e.data;if(isDef(i))for(isDef(t=i.hook)&&isDef(t=t.destroy)&&t(e),t=0;t<r.destroy.length;++t)r.destroy[t](e);if(isDef(t=e.children))for(n=0;n<e.children.length;++n)v(e.children[n])}function y(e,t,n,r){for(;n<=r;++n){var i=t[n];isDef(i)&&(isDef(i.tag)?(b(i),v(i)):o(i.elm))}}function b(e,t){if(isDef(t)||isDef(e.data)){var n,i=r.remove.length+1;for(isDef(t)?t.listeners+=i:t=function(e,t){function n(){0==--n.listeners&&o(e)}return n.listeners=t,n}(e.elm,i),isDef(n=e.componentInstance)&&isDef(n=n._vnode)&&isDef(n.data)&&b(n,t),n=0;n<r.remove.length;++n)r.remove[n](e,t);isDef(n=e.data.hook)&&isDef(n=n.remove)?n(e,t):t()}else o(e.elm)}function _(e){for(var t={},n=0;n<e.length;n++){var r=e[n],i=r.key;isDef(i)&&(t[i]?warn("Duplicate keys detected: '"+i+"'. This may cause an update error.",r.context):t[i]=!0)}}function x(e,t,n,r){for(var i=n;i<r;i++){var a=t[i];if(isDef(a)&&sameVnode(e,a))return i}}function w(e,t,n,i,o,s){if(e!==t){isDef(t.elm)&&isDef(i)&&(t=i[o]=cloneVNode(t));var l=t.elm=e.elm;if(isTrue(e.isAsyncPlaceholder))isDef(t.asyncFactory.resolved)?$(e.elm,t,n):t.isAsyncPlaceholder=!0;else if(isTrue(t.isStatic)&&isTrue(e.isStatic)&&t.key===e.key&&(isTrue(t.isCloned)||isTrue(t.isOnce)))t.componentInstance=e.componentInstance;else{var u,d=t.data;isDef(d)&&isDef(u=d.hook)&&isDef(u=u.prepatch)&&u(e,t);var h=e.children,p=t.children;if(isDef(d)&&f(t)){for(u=0;u<r.update.length;++u)r.update[u](e,t);isDef(u=d.hook)&&isDef(u=u.update)&&u(e,t)}isUndef(t.text)?isDef(h)&&isDef(p)?h!==p&&function(e,t,n,r,i){var o,s,l,u=0,d=0,h=t.length-1,f=t[0],p=t[h],g=n.length-1,v=n[0],b=n[g],k=!i;for(_(n);u<=h&&d<=g;)isUndef(f)?f=t[++u]:isUndef(p)?p=t[--h]:sameVnode(f,v)?(w(f,v,r,n,d),f=t[++u],v=n[++d]):sameVnode(p,b)?(w(p,b,r,n,g),p=t[--h],b=n[--g]):sameVnode(f,b)?(w(f,b,r,n,g),k&&a.insertBefore(e,f.elm,a.nextSibling(p.elm)),f=t[++u],b=n[--g]):sameVnode(p,v)?(w(p,v,r,n,d),k&&a.insertBefore(e,p.elm,f.elm),p=t[--h],v=n[++d]):(isUndef(o)&&(o=createKeyToOldIdx(t,u,h)),isUndef(s=isDef(v.key)?o[v.key]:x(v,t,u,h))?c(v,r,e,f.elm,!1,n,d):sameVnode(l=t[s],v)?(w(l,v,r,n,d),t[s]=void 0,k&&a.insertBefore(e,l.elm,f.elm)):c(v,r,e,f.elm,!1,n,d),v=n[++d]);u>h?m(e,isUndef(n[g+1])?null:n[g+1].elm,n,d,g,r):d>g&&y(0,t,u,h)}(l,h,p,n,s):isDef(p)?(_(p),isDef(e.text)&&a.setTextContent(l,""),m(l,null,p,0,p.length-1,n)):isDef(h)?y(0,h,0,h.length-1):isDef(e.text)&&a.setTextContent(l,""):e.text!==t.text&&a.setTextContent(l,t.text),isDef(d)&&isDef(u=d.hook)&&isDef(u=u.postpatch)&&u(e,t)}}}function k(e,t,n){if(isTrue(n)&&isDef(e.parent))e.parent.data.pendingInsert=t;else for(var r=0;r<t.length;++r)t[r].data.hook.insert(t[r])}var S=!1,C=makeMap("attrs,class,staticClass,staticStyle,key");function $(e,t,n,r){var i,a=t.tag,o=t.data,l=t.children;if(r=r||o&&o.pre,t.elm=e,isTrue(t.isComment)&&isDef(t.asyncFactory))return t.isAsyncPlaceholder=!0,!0;if(!function(e,t,n){return isDef(t.tag)?0===t.tag.indexOf("vue-component")||!s(t,n)&&t.tag.toLowerCase()===(e.tagName&&e.tagName.toLowerCase()):e.nodeType===(t.isComment?8:3)}(e,t,r))return!1;if(isDef(o)&&(isDef(i=o.hook)&&isDef(i=i.init)&&i(t,!0),isDef(i=t.componentInstance)))return u(t,n),!0;if(isDef(a)){if(isDef(l))if(e.hasChildNodes())if(isDef(i=o)&&isDef(i=i.domProps)&&isDef(i=i.innerHTML)){if(i!==e.innerHTML)return"undefined"==typeof console||S||(S=!0,console.warn("Parent: ",e),console.warn("server innerHTML: ",i),console.warn("client innerHTML: ",e.innerHTML)),!1}else{for(var c=!0,d=e.firstChild,f=0;f<l.length;f++){if(!d||!$(d,l[f],n,r)){c=!1;break}d=d.nextSibling}if(!c||d)return"undefined"==typeof console||S||(S=!0,console.warn("Parent: ",e),console.warn("Mismatching childNodes vs. VNodes: ",e.childNodes,l)),!1}else h(t,l,n);if(isDef(o)){var g=!1;for(var m in o)if(!C(m)){g=!0,p(t,n);break}!g&&o.class&&traverse(o.class)}}else e.data!==t.text&&(e.data=t.text);return!0}return function(e,t,n,i){if(!isUndef(t)){var o,s=!1,l=[];if(isUndef(e))s=!0,c(t,l);else{var u=isDef(e.nodeType);if(!u&&sameVnode(e,t))w(e,t,l,null,null,i);else{if(u){if(1===e.nodeType&&e.hasAttribute(SSR_ATTR)&&(e.removeAttribute(SSR_ATTR),n=!0),isTrue(n)){if($(e,t,l))return k(t,l,!0),e;warn("The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside <p>, or missing <tbody>. Bailing hydration and performing full client-side render.")}o=e,e=new VNode(a.tagName(o).toLowerCase(),{},[],void 0,o)}var d=e.elm,h=a.parentNode(d);if(c(t,l,d._leaveCb?null:h,a.nextSibling(d)),isDef(t.parent))for(var p=t.parent,g=f(t);p;){for(var m=0;m<r.destroy.length;++m)r.destroy[m](p);if(p.elm=t.elm,g){for(var b=0;b<r.create.length;++b)r.create[b](emptyNode,p);var _=p.data.hook.insert;if(_.merged)for(var x=1;x<_.fns.length;x++)_.fns[x]()}else registerRef(p);p=p.parent}isDef(h)?y(0,[e],0,0):isDef(e.tag)&&v(e)}}return k(t,l,s),t.elm}isDef(e)&&v(e)}}var directives={create:updateDirectives,update:updateDirectives,destroy:function(e){updateDirectives(e,emptyNode)}};function updateDirectives(e,t){(e.data.directives||t.data.directives)&&_update(e,t)}function _update(e,t){var n,r,i,a=e===emptyNode,o=t===emptyNode,s=normalizeDirectives$1(e.data.directives,e.context),l=normalizeDirectives$1(t.data.directives,t.context),c=[],u=[];for(n in l)r=s[n],i=l[n],r?(i.oldValue=r.value,i.oldArg=r.arg,callHook$1(i,"update",t,e),i.def&&i.def.componentUpdated&&u.push(i)):(callHook$1(i,"bind",t,e),i.def&&i.def.inserted&&c.push(i));if(c.length){var d=function(){for(var n=0;n<c.length;n++)callHook$1(c[n],"inserted",t,e)};a?mergeVNodeHook(t,"insert",d):d()}if(u.length&&mergeVNodeHook(t,"postpatch",function(){for(var n=0;n<u.length;n++)callHook$1(u[n],"componentUpdated",t,e)}),!a)for(n in s)l[n]||callHook$1(s[n],"unbind",e,e,o)}var emptyModifiers=Object.create(null);function normalizeDirectives$1(e,t){var n,r,i=Object.create(null);if(!e)return i;for(n=0;n<e.length;n++)(r=e[n]).modifiers||(r.modifiers=emptyModifiers),i[getRawDirName(r)]=r,r.def=resolveAsset(t.$options,"directives",r.name,!0);return i}function getRawDirName(e){return e.rawName||e.name+"."+Object.keys(e.modifiers||{}).join(".")}function callHook$1(e,t,n,r,i){var a=e.def&&e.def[t];if(a)try{a(n.elm,e,n,r,i)}catch(r){handleError(r,n.context,"directive "+e.name+" "+t+" hook")}}var baseModules=[ref,directives];function updateAttrs(e,t){var n=t.componentOptions;if(!(isDef(n)&&!1===n.Ctor.options.inheritAttrs||isUndef(e.data.attrs)&&isUndef(t.data.attrs))){var r,i,a=t.elm,o=e.data.attrs||{},s=t.data.attrs||{};for(r in isDef(s.__ob__)&&(s=t.data.attrs=extend({},s)),s)i=s[r],o[r]!==i&&setAttr(a,r,i);for(r in(isIE||isEdge)&&s.value!==o.value&&setAttr(a,"value",s.value),o)isUndef(s[r])&&(isXlink(r)?a.removeAttributeNS(xlinkNS,getXlinkProp(r)):isEnumeratedAttr(r)||a.removeAttribute(r))}}function setAttr(e,t,n){e.tagName.indexOf("-")>-1?baseSetAttr(e,t,n):isBooleanAttr(t)?isFalsyAttrValue(n)?e.removeAttribute(t):(n="allowfullscreen"===t&&"EMBED"===e.tagName?"true":t,e.setAttribute(t,n)):isEnumeratedAttr(t)?e.setAttribute(t,convertEnumeratedValue(t,n)):isXlink(t)?isFalsyAttrValue(n)?e.removeAttributeNS(xlinkNS,getXlinkProp(t)):e.setAttributeNS(xlinkNS,t,n):baseSetAttr(e,t,n)}function baseSetAttr(e,t,n){if(isFalsyAttrValue(n))e.removeAttribute(t);else{if(isIE&&!isIE9&&"TEXTAREA"===e.tagName&&"placeholder"===t&&""!==n&&!e.__ieph){e.addEventListener("input",function t(n){n.stopImmediatePropagation(),e.removeEventListener("input",t)}),e.__ieph=!0}e.setAttribute(t,n)}}var attrs={create:updateAttrs,update:updateAttrs};function updateClass(e,t){var n=t.elm,r=t.data,i=e.data;if(!(isUndef(r.staticClass)&&isUndef(r.class)&&(isUndef(i)||isUndef(i.staticClass)&&isUndef(i.class)))){var a=genClassForVnode(t),o=n._transitionClasses;isDef(o)&&(a=concat(a,stringifyClass(o))),a!==n._prevClass&&(n.setAttribute("class",a),n._prevClass=a)}}var len,str,chr,index$1,expressionPos,expressionEndPos,warn$1,klass={create:updateClass,update:updateClass},validDivisionCharRE=/[\w).+\-_$\]]/;function parseFilters(e){var t,n,r,i,a,o=!1,s=!1,l=!1,c=!1,u=0,d=0,h=0,f=0;for(r=0;r<e.length;r++)if(n=t,t=e.charCodeAt(r),o)39===t&&92!==n&&(o=!1);else if(s)34===t&&92!==n&&(s=!1);else if(l)96===t&&92!==n&&(l=!1);else if(c)47===t&&92!==n&&(c=!1);else if(124!==t||124===e.charCodeAt(r+1)||124===e.charCodeAt(r-1)||u||d||h){switch(t){case 34:s=!0;break;case 39:o=!0;break;case 96:l=!0;break;case 40:h++;break;case 41:h--;break;case 91:d++;break;case 93:d--;break;case 123:u++;break;case 125:u--}if(47===t){for(var p=r-1,g=void 0;p>=0&&" "===(g=e.charAt(p));p--);g&&validDivisionCharRE.test(g)||(c=!0)}}else void 0===i?(f=r+1,i=e.slice(0,r).trim()):m();function m(){(a||(a=[])).push(e.slice(f,r).trim()),f=r+1}if(void 0===i?i=e.slice(0,r).trim():0!==f&&m(),a)for(r=0;r<a.length;r++)i=wrapFilter(i,a[r]);return i}function wrapFilter(e,t){var n=t.indexOf("(");if(n<0)return'_f("'+t+'")('+e+")";var r=t.slice(0,n),i=t.slice(n+1);return'_f("'+r+'")('+e+(")"!==i?","+i:i)}function baseWarn(e,t){console.error("[Vue compiler]: "+e)}function pluckModuleFunction(e,t){return e?e.map(function(e){return e[t]}).filter(function(e){return e}):[]}function addProp(e,t,n,r,i){(e.props||(e.props=[])).push(rangeSetItem({name:t,value:n,dynamic:i},r)),e.plain=!1}function addAttr(e,t,n,r,i){(i?e.dynamicAttrs||(e.dynamicAttrs=[]):e.attrs||(e.attrs=[])).push(rangeSetItem({name:t,value:n,dynamic:i},r)),e.plain=!1}function addRawAttr(e,t,n,r){e.attrsMap[t]=n,e.attrsList.push(rangeSetItem({name:t,value:n},r))}function addDirective(e,t,n,r,i,a,o,s){(e.directives||(e.directives=[])).push(rangeSetItem({name:t,rawName:n,value:r,arg:i,isDynamicArg:a,modifiers:o},s)),e.plain=!1}function prependModifierMarker(e,t,n){return n?"_p("+t+',"'+e+'")':e+t}function addHandler(e,t,n,r,i,a,o,s){var l;r=r||emptyObject,a&&r.prevent&&r.passive&&a("passive and prevent can't be used together. Passive handler can't prevent default event.",o),r.right?s?t="("+t+")==='click'?'contextmenu':("+t+")":"click"===t&&(t="contextmenu",delete r.right):r.middle&&(s?t="("+t+")==='click'?'mouseup':("+t+")":"click"===t&&(t="mouseup")),r.capture&&(delete r.capture,t=prependModifierMarker("!",t,s)),r.once&&(delete r.once,t=prependModifierMarker("~",t,s)),r.passive&&(delete r.passive,t=prependModifierMarker("&",t,s)),r.native?(delete r.native,l=e.nativeEvents||(e.nativeEvents={})):l=e.events||(e.events={});var c=rangeSetItem({value:n.trim(),dynamic:s},o);r!==emptyObject&&(c.modifiers=r);var u=l[t];Array.isArray(u)?i?u.unshift(c):u.push(c):l[t]=u?i?[c,u]:[u,c]:c,e.plain=!1}function getRawBindingAttr(e,t){return e.rawAttrsMap[":"+t]||e.rawAttrsMap["v-bind:"+t]||e.rawAttrsMap[t]}function getBindingAttr(e,t,n){var r=getAndRemoveAttr(e,":"+t)||getAndRemoveAttr(e,"v-bind:"+t);if(null!=r)return parseFilters(r);if(!1!==n){var i=getAndRemoveAttr(e,t);if(null!=i)return JSON.stringify(i)}}function getAndRemoveAttr(e,t,n){var r;if(null!=(r=e.attrsMap[t]))for(var i=e.attrsList,a=0,o=i.length;a<o;a++)if(i[a].name===t){i.splice(a,1);break}return n&&delete e.attrsMap[t],r}function getAndRemoveAttrByRegex(e,t){for(var n=e.attrsList,r=0,i=n.length;r<i;r++){var a=n[r];if(t.test(a.name))return n.splice(r,1),a}}function rangeSetItem(e,t){return t&&(null!=t.start&&(e.start=t.start),null!=t.end&&(e.end=t.end)),e}function genComponentModel(e,t,n){var r=n||{},i=r.number,a="$$v";r.trim&&(a="(typeof $$v === 'string'? $$v.trim(): $$v)"),i&&(a="_n("+a+")");var o=genAssignmentCode(t,a);e.model={value:"("+t+")",expression:JSON.stringify(t),callback:"function ($$v) {"+o+"}"}}function genAssignmentCode(e,t){var n=parseModel(e);return null===n.key?e+"="+t:"$set("+n.exp+", "+n.key+", "+t+")"}function parseModel(e){if(e=e.trim(),len=e.length,e.indexOf("[")<0||e.lastIndexOf("]")<len-1)return(index$1=e.lastIndexOf("."))>-1?{exp:e.slice(0,index$1),key:'"'+e.slice(index$1+1)+'"'}:{exp:e,key:null};for(str=e,index$1=expressionPos=expressionEndPos=0;!eof();)isStringStart(chr=next())?parseString(chr):91===chr&&parseBracket(chr);return{exp:e.slice(0,expressionPos),key:e.slice(expressionPos+1,expressionEndPos)}}function next(){return str.charCodeAt(++index$1)}function eof(){return index$1>=len}function isStringStart(e){return 34===e||39===e}function parseBracket(e){var t=1;for(expressionPos=index$1;!eof();)if(isStringStart(e=next()))parseString(e);else if(91===e&&t++,93===e&&t--,0===t){expressionEndPos=index$1;break}}function parseString(e){for(var t=e;!eof()&&(e=next())!==t;);}var target$1,RANGE_TOKEN="__r",CHECKBOX_RADIO_TOKEN="__c";function model(e,t,n){warn$1=n;var r=t.value,i=t.modifiers,a=e.tag,o=e.attrsMap.type;if("input"===a&&"file"===o&&warn$1("<"+e.tag+' v-model="'+r+'" type="file">:\nFile inputs are read only. Use a v-on:change listener instead.',e.rawAttrsMap["v-model"]),e.component)return genComponentModel(e,r,i),!1;if("select"===a)genSelect(e,r,i);else if("input"===a&&"checkbox"===o)genCheckboxModel(e,r,i);else if("input"===a&&"radio"===o)genRadioModel(e,r,i);else if("input"===a||"textarea"===a)genDefaultModel(e,r,i);else{if(!config.isReservedTag(a))return genComponentModel(e,r,i),!1;warn$1("<"+e.tag+' v-model="'+r+"\">: v-model is not supported on this element type. If you are working with contenteditable, it's recommended to wrap a library dedicated for that purpose inside a custom component.",e.rawAttrsMap["v-model"])}return!0}function genCheckboxModel(e,t,n){var r=n&&n.number,i=getBindingAttr(e,"value")||"null",a=getBindingAttr(e,"true-value")||"true",o=getBindingAttr(e,"false-value")||"false";addProp(e,"checked","Array.isArray("+t+")?_i("+t+","+i+")>-1"+("true"===a?":("+t+")":":_q("+t+","+a+")")),addHandler(e,"change","var $$a="+t+",$$el=$event.target,$$c=$$el.checked?("+a+"):("+o+");if(Array.isArray($$a)){var $$v="+(r?"_n("+i+")":i)+",$$i=_i($$a,$$v);if($$el.checked){$$i<0&&("+genAssignmentCode(t,"$$a.concat([$$v])")+")}else{$$i>-1&&("+genAssignmentCode(t,"$$a.slice(0,$$i).concat($$a.slice($$i+1))")+")}}else{"+genAssignmentCode(t,"$$c")+"}",null,!0)}function genRadioModel(e,t,n){var r=n&&n.number,i=getBindingAttr(e,"value")||"null";addProp(e,"checked","_q("+t+","+(i=r?"_n("+i+")":i)+")"),addHandler(e,"change",genAssignmentCode(t,i),null,!0)}function genSelect(e,t,n){var r="var $$selectedVal = "+('Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return '+(n&&n.number?"_n(val)":"val")+"})")+";";addHandler(e,"change",r=r+" "+genAssignmentCode(t,"$event.target.multiple ? $$selectedVal : $$selectedVal[0]"),null,!0)}function genDefaultModel(e,t,n){var r=e.attrsMap.type,i=e.attrsMap["v-bind:value"]||e.attrsMap[":value"],a=e.attrsMap["v-bind:type"]||e.attrsMap[":type"];if(i&&!a){var o=e.attrsMap["v-bind:value"]?"v-bind:value":":value";warn$1(o+'="'+i+'" conflicts with v-model on the same element because the latter already expands to a value binding internally',e.rawAttrsMap[o])}var s=n||{},l=s.lazy,c=s.number,u=s.trim,d=!l&&"range"!==r,h=l?"change":"range"===r?RANGE_TOKEN:"input",f="$event.target.value";u&&(f="$event.target.value.trim()"),c&&(f="_n("+f+")");var p=genAssignmentCode(t,f);d&&(p="if($event.target.composing)return;"+p),addProp(e,"value","("+t+")"),addHandler(e,h,p,null,!0),(u||c)&&addHandler(e,"blur","$forceUpdate()")}function normalizeEvents(e){if(isDef(e[RANGE_TOKEN])){var t=isIE?"change":"input";e[t]=[].concat(e[RANGE_TOKEN],e[t]||[]),delete e[RANGE_TOKEN]}isDef(e[CHECKBOX_RADIO_TOKEN])&&(e.change=[].concat(e[CHECKBOX_RADIO_TOKEN],e.change||[]),delete e[CHECKBOX_RADIO_TOKEN])}function createOnceHandler$1(e,t,n){var r=target$1;return function i(){null!==t.apply(null,arguments)&&remove$2(e,i,n,r)}}var useMicrotaskFix=isUsingMicroTask&&!(isFF&&Number(isFF[1])<=53);function add$1(e,t,n,r){if(useMicrotaskFix){var i=currentFlushTimestamp,a=t;t=a._wrapper=function(e){if(e.target===e.currentTarget||e.timeStamp>=i||0===e.timeStamp||e.target.ownerDocument!==document)return a.apply(this,arguments)}}target$1.addEventListener(e,t,supportsPassive?{capture:n,passive:r}:n)}function remove$2(e,t,n,r){(r||target$1).removeEventListener(e,t._wrapper||t,n)}function updateDOMListeners(e,t){if(!isUndef(e.data.on)||!isUndef(t.data.on)){var n=t.data.on||{},r=e.data.on||{};target$1=t.elm,normalizeEvents(n),updateListeners(n,r,add$1,remove$2,createOnceHandler$1,t.context),target$1=void 0}}var svgContainer,events={create:updateDOMListeners,update:updateDOMListeners};function updateDOMProps(e,t){if(!isUndef(e.data.domProps)||!isUndef(t.data.domProps)){var n,r,i=t.elm,a=e.data.domProps||{},o=t.data.domProps||{};for(n in isDef(o.__ob__)&&(o=t.data.domProps=extend({},o)),a)isUndef(o[n])&&(i[n]="");for(n in o){if(r=o[n],"textContent"===n||"innerHTML"===n){if(t.children&&(t.children.length=0),r===a[n])continue;1===i.childNodes.length&&i.removeChild(i.childNodes[0])}if("value"===n||r!==a[n])if("value"===n){i._value=r;var s=isUndef(r)?"":String(r);shouldUpdateValue(i,s)&&(i.value=s)}else if("innerHTML"===n&&isSVG(i.tagName)&&isUndef(i.innerHTML)){(svgContainer=svgContainer||document.createElement("div")).innerHTML="<svg>"+r+"</svg>";for(var l=svgContainer.firstChild;i.firstChild;)i.removeChild(i.firstChild);for(;l.firstChild;)i.appendChild(l.firstChild)}else i[n]=r}}}function shouldUpdateValue(e,t){return!e.composing&&("OPTION"===e.tagName||isNotInFocusAndDirty(e,t)||isDirtyWithModifiers(e,t))}function isNotInFocusAndDirty(e,t){var n=!0;try{n=document.activeElement!==e}catch(e){}return n&&e.value!==t}function isDirtyWithModifiers(e,t){var n=e.value,r=e._vModifiers;if(isDef(r)){if(r.number)return toNumber(n)!==toNumber(t);if(r.trim)return n.trim()!==t.trim()}return n!==t}var domProps={create:updateDOMProps,update:updateDOMProps},parseStyleText=cached(function(e){var t={},n=/:(.+)/;return e.split(/;(?![^(]*\))/g).forEach(function(e){if(e){var r=e.split(n);r.length>1&&(t[r[0].trim()]=r[1].trim())}}),t});function normalizeStyleData(e){var t=normalizeStyleBinding(e.style);return e.staticStyle?extend(e.staticStyle,t):t}function normalizeStyleBinding(e){return Array.isArray(e)?toObject(e):"string"==typeof e?parseStyleText(e):e}function getStyle(e,t){var n,r={};if(t)for(var i=e;i.componentInstance;)(i=i.componentInstance._vnode)&&i.data&&(n=normalizeStyleData(i.data))&&extend(r,n);(n=normalizeStyleData(e.data))&&extend(r,n);for(var a=e;a=a.parent;)a.data&&(n=normalizeStyleData(a.data))&&extend(r,n);return r}var emptyStyle,cssVarRE=/^--/,importantRE=/\s*!important$/,setProp=function(e,t,n){if(cssVarRE.test(t))e.style.setProperty(t,n);else if(importantRE.test(n))e.style.setProperty(hyphenate(t),n.replace(importantRE,""),"important");else{var r=normalize(t);if(Array.isArray(n))for(var i=0,a=n.length;i<a;i++)e.style[r]=n[i];else e.style[r]=n}},vendorNames=["Webkit","Moz","ms"],normalize=cached(function(e){if(emptyStyle=emptyStyle||document.createElement("div").style,"filter"!==(e=camelize(e))&&e in emptyStyle)return e;for(var t=e.charAt(0).toUpperCase()+e.slice(1),n=0;n<vendorNames.length;n++){var r=vendorNames[n]+t;if(r in emptyStyle)return r}});function updateStyle(e,t){var n=t.data,r=e.data;if(!(isUndef(n.staticStyle)&&isUndef(n.style)&&isUndef(r.staticStyle)&&isUndef(r.style))){var i,a,o=t.elm,s=r.staticStyle,l=r.normalizedStyle||r.style||{},c=s||l,u=normalizeStyleBinding(t.data.style)||{};t.data.normalizedStyle=isDef(u.__ob__)?extend({},u):u;var d=getStyle(t,!0);for(a in c)isUndef(d[a])&&setProp(o,a,"");for(a in d)(i=d[a])!==c[a]&&setProp(o,a,null==i?"":i)}}var style={create:updateStyle,update:updateStyle},whitespaceRE=/\s+/;function addClass(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(whitespaceRE).forEach(function(t){return e.classList.add(t)}):e.classList.add(t);else{var n=" "+(e.getAttribute("class")||"")+" ";n.indexOf(" "+t+" ")<0&&e.setAttribute("class",(n+t).trim())}}function removeClass(e,t){if(t&&(t=t.trim()))if(e.classList)t.indexOf(" ")>-1?t.split(whitespaceRE).forEach(function(t){return e.classList.remove(t)}):e.classList.remove(t),e.classList.length||e.removeAttribute("class");else{for(var n=" "+(e.getAttribute("class")||"")+" ",r=" "+t+" ";n.indexOf(r)>=0;)n=n.replace(r," ");(n=n.trim())?e.setAttribute("class",n):e.removeAttribute("class")}}function resolveTransition(e){if(e){if("object"===(void 0===e?"undefined":_typeof(e))){var t={};return!1!==e.css&&extend(t,autoCssTransition(e.name||"v")),extend(t,e),t}return"string"==typeof e?autoCssTransition(e):void 0}}var autoCssTransition=cached(function(e){return{enterClass:e+"-enter",enterToClass:e+"-enter-to",enterActiveClass:e+"-enter-active",leaveClass:e+"-leave",leaveToClass:e+"-leave-to",leaveActiveClass:e+"-leave-active"}}),hasTransition=inBrowser&&!isIE9,TRANSITION="transition",ANIMATION="animation",transitionProp="transition",transitionEndEvent="transitionend",animationProp="animation",animationEndEvent="animationend";hasTransition&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(transitionProp="WebkitTransition",transitionEndEvent="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(animationProp="WebkitAnimation",animationEndEvent="webkitAnimationEnd"));var raf=inBrowser?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(e){return e()};function nextFrame(e){raf(function(){raf(e)})}function addTransitionClass(e,t){var n=e._transitionClasses||(e._transitionClasses=[]);n.indexOf(t)<0&&(n.push(t),addClass(e,t))}function removeTransitionClass(e,t){e._transitionClasses&&remove(e._transitionClasses,t),removeClass(e,t)}function whenTransitionEnds(e,t,n){var r=getTransitionInfo(e,t),i=r.type,a=r.timeout,o=r.propCount;if(!i)return n();var s=i===TRANSITION?transitionEndEvent:animationEndEvent,l=0,c=function(){e.removeEventListener(s,u),n()},u=function(t){t.target===e&&++l>=o&&c()};setTimeout(function(){l<o&&c()},a+1),e.addEventListener(s,u)}var transformRE=/\b(transform|all)(,|$)/;function getTransitionInfo(e,t){var n,r=window.getComputedStyle(e),i=(r[transitionProp+"Delay"]||"").split(", "),a=(r[transitionProp+"Duration"]||"").split(", "),o=getTimeout(i,a),s=(r[animationProp+"Delay"]||"").split(", "),l=(r[animationProp+"Duration"]||"").split(", "),c=getTimeout(s,l),u=0,d=0;return t===TRANSITION?o>0&&(n=TRANSITION,u=o,d=a.length):t===ANIMATION?c>0&&(n=ANIMATION,u=c,d=l.length):d=(n=(u=Math.max(o,c))>0?o>c?TRANSITION:ANIMATION:null)?n===TRANSITION?a.length:l.length:0,{type:n,timeout:u,propCount:d,hasTransform:n===TRANSITION&&transformRE.test(r[transitionProp+"Property"])}}function getTimeout(e,t){for(;e.length<t.length;)e=e.concat(e);return Math.max.apply(null,t.map(function(t,n){return toMs(t)+toMs(e[n])}))}function toMs(e){return 1e3*Number(e.slice(0,-1).replace(",","."))}function enter(e,t){var n=e.elm;isDef(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var r=resolveTransition(e.data.transition);if(!isUndef(r)&&!isDef(n._enterCb)&&1===n.nodeType){for(var i=r.css,a=r.type,o=r.enterClass,s=r.enterToClass,l=r.enterActiveClass,c=r.appearClass,u=r.appearToClass,d=r.appearActiveClass,h=r.beforeEnter,f=r.enter,p=r.afterEnter,g=r.enterCancelled,m=r.beforeAppear,v=r.appear,y=r.afterAppear,b=r.appearCancelled,_=r.duration,x=activeInstance,w=activeInstance.$vnode;w&&w.parent;)x=(w=w.parent).context;var k=!x._isMounted||!e.isRootInsert;if(!k||v||""===v){var S=k&&c?c:o,C=k&&d?d:l,$=k&&u?u:s,T=k&&m||h,A=k&&"function"==typeof v?v:f,M=k&&y||p,D=k&&b||g,O=toNumber(isObject$1(_)?_.enter:_);null!=O&&checkDuration(O,"enter",e);var P=!1!==i&&!isIE9,I=getHookArgumentsLength(A),E=n._enterCb=once(function(){P&&(removeTransitionClass(n,$),removeTransitionClass(n,C)),E.cancelled?(P&&removeTransitionClass(n,S),D&&D(n)):M&&M(n),n._enterCb=null});e.data.show||mergeVNodeHook(e,"insert",function(){var t=n.parentNode,r=t&&t._pending&&t._pending[e.key];r&&r.tag===e.tag&&r.elm._leaveCb&&r.elm._leaveCb(),A&&A(n,E)}),T&&T(n),P&&(addTransitionClass(n,S),addTransitionClass(n,C),nextFrame(function(){removeTransitionClass(n,S),E.cancelled||(addTransitionClass(n,$),I||(isValidDuration(O)?setTimeout(E,O):whenTransitionEnds(n,a,E)))})),e.data.show&&(t&&t(),A&&A(n,E)),P||I||E()}}}function leave(e,t){var n=e.elm;isDef(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var r=resolveTransition(e.data.transition);if(isUndef(r)||1!==n.nodeType)return t();if(!isDef(n._leaveCb)){var i=r.css,a=r.type,o=r.leaveClass,s=r.leaveToClass,l=r.leaveActiveClass,c=r.beforeLeave,u=r.leave,d=r.afterLeave,h=r.leaveCancelled,f=r.delayLeave,p=r.duration,g=!1!==i&&!isIE9,m=getHookArgumentsLength(u),v=toNumber(isObject$1(p)?p.leave:p);isDef(v)&&checkDuration(v,"leave",e);var y=n._leaveCb=once(function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[e.key]=null),g&&(removeTransitionClass(n,s),removeTransitionClass(n,l)),y.cancelled?(g&&removeTransitionClass(n,o),h&&h(n)):(t(),d&&d(n)),n._leaveCb=null});f?f(b):b()}function b(){y.cancelled||(!e.data.show&&n.parentNode&&((n.parentNode._pending||(n.parentNode._pending={}))[e.key]=e),c&&c(n),g&&(addTransitionClass(n,o),addTransitionClass(n,l),nextFrame(function(){removeTransitionClass(n,o),y.cancelled||(addTransitionClass(n,s),m||(isValidDuration(v)?setTimeout(y,v):whenTransitionEnds(n,a,y)))})),u&&u(n,y),g||m||y())}}function checkDuration(e,t,n){"number"!=typeof e?warn("<transition> explicit "+t+" duration is not a valid number - got "+JSON.stringify(e)+".",n.context):isNaN(e)&&warn("<transition> explicit "+t+" duration is NaN - the duration expression might be incorrect.",n.context)}function isValidDuration(e){return"number"==typeof e&&!isNaN(e)}function getHookArgumentsLength(e){if(isUndef(e))return!1;var t=e.fns;return isDef(t)?getHookArgumentsLength(Array.isArray(t)?t[0]:t):(e._length||e.length)>1}function _enter(e,t){!0!==t.data.show&&enter(t)}var transition=inBrowser?{create:_enter,activate:_enter,remove:function(e,t){!0!==e.data.show?leave(e,t):t()}}:{},platformModules=[attrs,klass,events,domProps,style,transition],modules=platformModules.concat(baseModules),patch=createPatchFunction({nodeOps:nodeOps,modules:modules});isIE9&&document.addEventListener("selectionchange",function(){var e=document.activeElement;e&&e.vmodel&&trigger(e,"input")});var directive={inserted:function(e,t,n,r){"select"===n.tag?(r.elm&&!r.elm._vOptions?mergeVNodeHook(n,"postpatch",function(){directive.componentUpdated(e,t,n)}):setSelected(e,t,n.context),e._vOptions=[].map.call(e.options,getValue$1)):("textarea"===n.tag||isTextInputType(e.type))&&(e._vModifiers=t.modifiers,t.modifiers.lazy||(e.addEventListener("compositionstart",onCompositionStart),e.addEventListener("compositionend",onCompositionEnd),e.addEventListener("change",onCompositionEnd),isIE9&&(e.vmodel=!0)))},componentUpdated:function(e,t,n){if("select"===n.tag){setSelected(e,t,n.context);var r=e._vOptions,i=e._vOptions=[].map.call(e.options,getValue$1);if(i.some(function(e,t){return!looseEqual(e,r[t])}))(e.multiple?t.value.some(function(e){return hasNoMatchingOption(e,i)}):t.value!==t.oldValue&&hasNoMatchingOption(t.value,i))&&trigger(e,"change")}}};function setSelected(e,t,n){actuallySetSelected(e,t,n),(isIE||isEdge)&&setTimeout(function(){actuallySetSelected(e,t,n)},0)}function actuallySetSelected(e,t,n){var r=t.value,i=e.multiple;if(!i||Array.isArray(r)){for(var a,o,s=0,l=e.options.length;s<l;s++)if(o=e.options[s],i)a=looseIndexOf(r,getValue$1(o))>-1,o.selected!==a&&(o.selected=a);else if(looseEqual(getValue$1(o),r))return void(e.selectedIndex!==s&&(e.selectedIndex=s));i||(e.selectedIndex=-1)}else warn('<select multiple v-model="'+t.expression+'"> expects an Array value for its binding, but got '+Object.prototype.toString.call(r).slice(8,-1),n)}function hasNoMatchingOption(e,t){return t.every(function(t){return!looseEqual(t,e)})}function getValue$1(e){return"_value"in e?e._value:e.value}function onCompositionStart(e){e.target.composing=!0}function onCompositionEnd(e){e.target.composing&&(e.target.composing=!1,trigger(e.target,"input"))}function trigger(e,t){var n=document.createEvent("HTMLEvents");n.initEvent(t,!0,!0),e.dispatchEvent(n)}function locateNode(e){return!e.componentInstance||e.data&&e.data.transition?e:locateNode(e.componentInstance._vnode)}var show={bind:function(e,t,n){var r=t.value,i=(n=locateNode(n)).data&&n.data.transition,a=e.__vOriginalDisplay="none"===e.style.display?"":e.style.display;r&&i?(n.data.show=!0,enter(n,function(){e.style.display=a})):e.style.display=r?a:"none"},update:function(e,t,n){var r=t.value;!r!=!t.oldValue&&((n=locateNode(n)).data&&n.data.transition?(n.data.show=!0,r?enter(n,function(){e.style.display=e.__vOriginalDisplay}):leave(n,function(){e.style.display="none"})):e.style.display=r?e.__vOriginalDisplay:"none")},unbind:function(e,t,n,r,i){i||(e.style.display=e.__vOriginalDisplay)}},platformDirectives={model:directive,show:show},transitionProps={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function getRealChild(e){var t=e&&e.componentOptions;return t&&t.Ctor.options.abstract?getRealChild(getFirstComponentChild(t.children)):e}function extractTransitionData(e){var t={},n=e.$options;for(var r in n.propsData)t[r]=e[r];var i=n._parentListeners;for(var a in i)t[camelize(a)]=i[a];return t}function placeholder(e,t){if(/\d-keep-alive$/.test(t.tag))return e("keep-alive",{props:t.componentOptions.propsData})}function hasParentTransition(e){for(;e=e.parent;)if(e.data.transition)return!0}function isSameChild(e,t){return t.key===e.key&&t.tag===e.tag}var isNotTextNode=function(e){return e.tag||isAsyncPlaceholder(e)},isVShowDirective=function(e){return"show"===e.name},Transition={name:"transition",props:transitionProps,abstract:!0,render:function(e){var t=this,n=this.$slots.default;if(n&&(n=n.filter(isNotTextNode)).length){n.length>1&&warn("<transition> can only be used on a single element. Use <transition-group> for lists.",this.$parent);var r=this.mode;r&&"in-out"!==r&&"out-in"!==r&&warn("invalid <transition> mode: "+r,this.$parent);var i=n[0];if(hasParentTransition(this.$vnode))return i;var a=getRealChild(i);if(!a)return i;if(this._leaving)return placeholder(e,i);var o="__transition-"+this._uid+"-";a.key=null==a.key?a.isComment?o+"comment":o+a.tag:isPrimitive(a.key)?0===String(a.key).indexOf(o)?a.key:o+a.key:a.key;var s=(a.data||(a.data={})).transition=extractTransitionData(this),l=this._vnode,c=getRealChild(l);if(a.data.directives&&a.data.directives.some(isVShowDirective)&&(a.data.show=!0),c&&c.data&&!isSameChild(a,c)&&!isAsyncPlaceholder(c)&&(!c.componentInstance||!c.componentInstance._vnode.isComment)){var u=c.data.transition=extend({},s);if("out-in"===r)return this._leaving=!0,mergeVNodeHook(u,"afterLeave",function(){t._leaving=!1,t.$forceUpdate()}),placeholder(e,i);if("in-out"===r){if(isAsyncPlaceholder(a))return l;var d,h=function(){d()};mergeVNodeHook(s,"afterEnter",h),mergeVNodeHook(s,"enterCancelled",h),mergeVNodeHook(u,"delayLeave",function(e){d=e})}}return i}}},props=extend({tag:String,moveClass:String},transitionProps);delete props.mode;var TransitionGroup={props:props,beforeMount:function(){var e=this,t=this._update;this._update=function(n,r){var i=setActiveInstance(e);e.__patch__(e._vnode,e.kept,!1,!0),e._vnode=e.kept,i(),t.call(e,n,r)}},render:function(e){for(var t=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),r=this.prevChildren=this.children,i=this.$slots.default||[],a=this.children=[],o=extractTransitionData(this),s=0;s<i.length;s++){var l=i[s];if(l.tag)if(null!=l.key&&0!==String(l.key).indexOf("__vlist"))a.push(l),n[l.key]=l,(l.data||(l.data={})).transition=o;else{var c=l.componentOptions,u=c?c.Ctor.options.name||c.tag||"":l.tag;warn("<transition-group> children must be keyed: <"+u+">")}}if(r){for(var d=[],h=[],f=0;f<r.length;f++){var p=r[f];p.data.transition=o,p.data.pos=p.elm.getBoundingClientRect(),n[p.key]?d.push(p):h.push(p)}this.kept=e(t,null,d),this.removed=h}return e(t,null,a)},updated:function(){var e=this.prevChildren,t=this.moveClass||(this.name||"v")+"-move";e.length&&this.hasMove(e[0].elm,t)&&(e.forEach(callPendingCbs),e.forEach(recordPosition),e.forEach(applyTranslation),this._reflow=document.body.offsetHeight,e.forEach(function(e){if(e.data.moved){var n=e.elm,r=n.style;addTransitionClass(n,t),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(transitionEndEvent,n._moveCb=function e(r){r&&r.target!==n||r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(transitionEndEvent,e),n._moveCb=null,removeTransitionClass(n,t))})}}))},methods:{hasMove:function(e,t){if(!hasTransition)return!1;if(this._hasMove)return this._hasMove;var n=e.cloneNode();e._transitionClasses&&e._transitionClasses.forEach(function(e){removeClass(n,e)}),addClass(n,t),n.style.display="none",this.$el.appendChild(n);var r=getTransitionInfo(n);return this.$el.removeChild(n),this._hasMove=r.hasTransform}}};function callPendingCbs(e){e.elm._moveCb&&e.elm._moveCb(),e.elm._enterCb&&e.elm._enterCb()}function recordPosition(e){e.data.newPos=e.elm.getBoundingClientRect()}function applyTranslation(e){var t=e.data.pos,n=e.data.newPos,r=t.left-n.left,i=t.top-n.top;if(r||i){e.data.moved=!0;var a=e.elm.style;a.transform=a.WebkitTransform="translate("+r+"px,"+i+"px)",a.transitionDuration="0s"}}var platformComponents={Transition:Transition,TransitionGroup:TransitionGroup};Vue.config.mustUseProp=mustUseProp,Vue.config.isReservedTag=isReservedTag,Vue.config.isReservedAttr=isReservedAttr,Vue.config.getTagNamespace=getTagNamespace,Vue.config.isUnknownElement=isUnknownElement,extend(Vue.options.directives,platformDirectives),extend(Vue.options.components,platformComponents),Vue.prototype.__patch__=inBrowser?patch:noop$1,Vue.prototype.$mount=function(e,t){return mountComponent(this,e=e&&inBrowser?query(e):void 0,t)},inBrowser&&setTimeout(function(){config.devtools&&(devtools?devtools.emit("init",Vue):console[console.info?"info":"log"]("Download the Vue Devtools extension for a better development experience:\nhttps://github.com/vuejs/vue-devtools")),!1!==config.productionTip&&"undefined"!=typeof console&&console[console.info?"info":"log"]("You are running Vue in development mode.\nMake sure to turn on production mode when deploying for production.\nSee more tips at https://vuejs.org/guide/deployment.html")},0);var defaultTagRE=/\{\{((?:.|\r?\n)+?)\}\}/g,regexEscapeRE=/[-.*+?^${}()|[\]\/\\]/g,buildRegex=cached(function(e){var t=e[0].replace(regexEscapeRE,"\\$&"),n=e[1].replace(regexEscapeRE,"\\$&");return new RegExp(t+"((?:.|\\n)+?)"+n,"g")});function parseText(e,t){var n=t?buildRegex(t):defaultTagRE;if(n.test(e)){for(var r,i,a,o=[],s=[],l=n.lastIndex=0;r=n.exec(e);){(i=r.index)>l&&(s.push(a=e.slice(l,i)),o.push(JSON.stringify(a)));var c=parseFilters(r[1].trim());o.push("_s("+c+")"),s.push({"@binding":c}),l=i+r[0].length}return l<e.length&&(s.push(a=e.slice(l)),o.push(JSON.stringify(a))),{expression:o.join("+"),tokens:s}}}function transformNode(e,t){var n=t.warn||baseWarn,r=getAndRemoveAttr(e,"class");r&&(parseText(r,t.delimiters)&&n('class="'+r+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div class="{{ val }}">, use <div :class="val">.',e.rawAttrsMap.class));r&&(e.staticClass=JSON.stringify(r));var i=getBindingAttr(e,"class",!1);i&&(e.classBinding=i)}function genData(e){var t="";return e.staticClass&&(t+="staticClass:"+e.staticClass+","),e.classBinding&&(t+="class:"+e.classBinding+","),t}var klass$1={staticKeys:["staticClass"],transformNode:transformNode,genData:genData};function transformNode$1(e,t){var n=t.warn||baseWarn,r=getAndRemoveAttr(e,"style");r&&(parseText(r,t.delimiters)&&n('style="'+r+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div style="{{ val }}">, use <div :style="val">.',e.rawAttrsMap.style),e.staticStyle=JSON.stringify(parseStyleText(r)));var i=getBindingAttr(e,"style",!1);i&&(e.styleBinding=i)}function genData$1(e){var t="";return e.staticStyle&&(t+="staticStyle:"+e.staticStyle+","),e.styleBinding&&(t+="style:("+e.styleBinding+"),"),t}var decoder,style$1={staticKeys:["staticStyle"],transformNode:transformNode$1,genData:genData$1},he={decode:function(e){return(decoder=decoder||document.createElement("div")).innerHTML=e,decoder.textContent}},isUnaryTag=makeMap("area,base,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr"),canBeLeftOpenTag=makeMap("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source"),isNonPhrasingTag=makeMap("address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track"),attribute=/^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,dynamicArgAttribute=/^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,ncname="[a-zA-Z_][\\-\\.0-9_a-zA-Z"+unicodeLetters+"]*",qnameCapture="((?:"+ncname+"\\:)?"+ncname+")",startTagOpen=new RegExp("^<"+qnameCapture),startTagClose=/^\s*(\/?)>/,endTag=new RegExp("^<\\/"+qnameCapture+"[^>]*>"),doctype=/^<!DOCTYPE [^>]+>/i,comment=/^<!\--/,conditionalComment=/^<!\[/,isPlainTextElement=makeMap("script,style,textarea",!0),reCache={},decodingMap={"&lt;":"<","&gt;":">","&quot;":'"',"&amp;":"&","&#10;":"\n","&#9;":"\t","&#39;":"'"},encodedAttr=/&(?:lt|gt|quot|amp|#39);/g,encodedAttrWithNewLines=/&(?:lt|gt|quot|amp|#39|#10|#9);/g,isIgnoreNewlineTag=makeMap("pre,textarea",!0),shouldIgnoreFirstNewline=function(e,t){return e&&isIgnoreNewlineTag(e)&&"\n"===t[0]};function decodeAttr(e,t){var n=t?encodedAttrWithNewLines:encodedAttr;return e.replace(n,function(e){return decodingMap[e]})}function parseHTML(e,t){for(var n,r,i=[],a=t.expectHTML,o=t.isUnaryTag||no,s=t.canBeLeftOpenTag||no,l=0;e;){if(n=e,r&&isPlainTextElement(r)){var c=0,u=r.toLowerCase(),d=reCache[u]||(reCache[u]=new RegExp("([\\s\\S]*?)(</"+u+"[^>]*>)","i")),h=e.replace(d,function(e,n,r){return c=r.length,isPlainTextElement(u)||"noscript"===u||(n=n.replace(/<!\--([\s\S]*?)-->/g,"$1").replace(/<!\[CDATA\[([\s\S]*?)]]>/g,"$1")),shouldIgnoreFirstNewline(u,n)&&(n=n.slice(1)),t.chars&&t.chars(n),""});l+=e.length-h.length,e=h,$(u,l-c,l)}else{var f=e.indexOf("<");if(0===f){if(comment.test(e)){var p=e.indexOf("--\x3e");if(p>=0){t.shouldKeepComment&&t.comment(e.substring(4,p),l,l+p+3),k(p+3);continue}}if(conditionalComment.test(e)){var g=e.indexOf("]>");if(g>=0){k(g+2);continue}}var m=e.match(doctype);if(m){k(m[0].length);continue}var v=e.match(endTag);if(v){var y=l;k(v[0].length),$(v[1],y,l);continue}var b=S();if(b){C(b),shouldIgnoreFirstNewline(b.tagName,e)&&k(1);continue}}var _=void 0,x=void 0,w=void 0;if(f>=0){for(x=e.slice(f);!(endTag.test(x)||startTagOpen.test(x)||comment.test(x)||conditionalComment.test(x)||(w=x.indexOf("<",1))<0);)f+=w,x=e.slice(f);_=e.substring(0,f)}f<0&&(_=e),_&&k(_.length),t.chars&&_&&t.chars(_,l-_.length,l)}if(e===n){t.chars&&t.chars(e),!i.length&&t.warn&&t.warn('Mal-formatted tag at end of template: "'+e+'"',{start:l+e.length});break}}function k(t){l+=t,e=e.substring(t)}function S(){var t=e.match(startTagOpen);if(t){var n,r,i={tagName:t[1],attrs:[],start:l};for(k(t[0].length);!(n=e.match(startTagClose))&&(r=e.match(dynamicArgAttribute)||e.match(attribute));)r.start=l,k(r[0].length),r.end=l,i.attrs.push(r);if(n)return i.unarySlash=n[1],k(n[0].length),i.end=l,i}}function C(e){var n=e.tagName,l=e.unarySlash;a&&("p"===r&&isNonPhrasingTag(n)&&$(r),s(n)&&r===n&&$(n));for(var c=o(n)||!!l,u=e.attrs.length,d=new Array(u),h=0;h<u;h++){var f=e.attrs[h],p=f[3]||f[4]||f[5]||"",g="a"===n&&"href"===f[1]?t.shouldDecodeNewlinesForHref:t.shouldDecodeNewlines;d[h]={name:f[1],value:decodeAttr(p,g)},t.outputSourceRange&&(d[h].start=f.start+f[0].match(/^\s*/).length,d[h].end=f.end)}c||(i.push({tag:n,lowerCasedTag:n.toLowerCase(),attrs:d,start:e.start,end:e.end}),r=n),t.start&&t.start(n,d,c,e.start,e.end)}function $(e,n,a){var o,s;if(null==n&&(n=l),null==a&&(a=l),e)for(s=e.toLowerCase(),o=i.length-1;o>=0&&i[o].lowerCasedTag!==s;o--);else o=0;if(o>=0){for(var c=i.length-1;c>=o;c--)(c>o||!e&&t.warn)&&t.warn("tag <"+i[c].tag+"> has no matching end tag.",{start:i[c].start}),t.end&&t.end(i[c].tag,n,a);i.length=o,r=o&&i[o-1].tag}else"br"===s?t.start&&t.start(e,[],!0,n,a):"p"===s&&(t.start&&t.start(e,[],!1,n,a),t.end&&t.end(e,n,a))}$()}var warn$2,delimiters,transforms,preTransforms,postTransforms,platformIsPreTag,platformMustUseProp,platformGetTagNamespace,maybeComponent,onRE=/^@|^v-on:/,dirRE=/^v-|^@|^:/,forAliasRE=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,forIteratorRE=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,stripParensRE=/^\(|\)$/g,dynamicArgRE=/^\[.*\]$/,argRE=/:(.*)$/,bindRE=/^:|^\.|^v-bind:/,modifierRE=/\.[^.]+/g,slotRE=/^v-slot(:|$)|^#/,lineBreakRE=/[\r\n]/,whitespaceRE$1=/\s+/g,invalidAttributeRE=/[\s"'<>\/=]/,decodeHTMLCached=cached(he.decode),emptySlotScopeToken="_empty_";function createASTElement(e,t,n){return{type:1,tag:e,attrsList:t,attrsMap:makeAttrsMap(t),rawAttrsMap:{},parent:n,children:[]}}function parse(e,t){warn$2=t.warn||baseWarn,platformIsPreTag=t.isPreTag||no,platformMustUseProp=t.mustUseProp||no,platformGetTagNamespace=t.getTagNamespace||no;var n=t.isReservedTag||no;maybeComponent=function(e){return!!e.component||!n(e.tag)},transforms=pluckModuleFunction(t.modules,"transformNode"),preTransforms=pluckModuleFunction(t.modules,"preTransformNode"),postTransforms=pluckModuleFunction(t.modules,"postTransformNode"),delimiters=t.delimiters;var r,i,a=[],o=!1!==t.preserveWhitespace,s=t.whitespace,l=!1,c=!1,u=!1;function d(e,t){u||(u=!0,warn$2(e,t))}function h(e){if(f(e),l||e.processed||(e=processElement(e,t)),a.length||e===r||(r.if&&(e.elseif||e.else)?(p(e),addIfCondition(r,{exp:e.elseif,block:e})):d("Component template should contain exactly one root element. If you are using v-if on multiple elements, use v-else-if to chain them instead.",{start:e.start})),i&&!e.forbidden)if(e.elseif||e.else)processIfConditions(e,i);else{if(e.slotScope){var n=e.slotTarget||'"default"';(i.scopedSlots||(i.scopedSlots={}))[n]=e}i.children.push(e),e.parent=i}e.children=e.children.filter(function(e){return!e.slotScope}),f(e),e.pre&&(l=!1),platformIsPreTag(e.tag)&&(c=!1);for(var o=0;o<postTransforms.length;o++)postTransforms[o](e,t)}function f(e){if(!c)for(var t;(t=e.children[e.children.length-1])&&3===t.type&&" "===t.text;)e.children.pop()}function p(e){"slot"!==e.tag&&"template"!==e.tag||d("Cannot use <"+e.tag+"> as component root element because it may contain multiple nodes.",{start:e.start}),e.attrsMap.hasOwnProperty("v-for")&&d("Cannot use v-for on stateful component root element because it renders multiple elements.",e.rawAttrsMap["v-for"])}return parseHTML(e,{warn:warn$2,expectHTML:t.expectHTML,isUnaryTag:t.isUnaryTag,canBeLeftOpenTag:t.canBeLeftOpenTag,shouldDecodeNewlines:t.shouldDecodeNewlines,shouldDecodeNewlinesForHref:t.shouldDecodeNewlinesForHref,shouldKeepComment:t.comments,outputSourceRange:t.outputSourceRange,start:function(e,n,o,s){var u=i&&i.ns||platformGetTagNamespace(e);isIE&&"svg"===u&&(n=guardIESVGBug(n));var d=createASTElement(e,n,i);u&&(d.ns=u),t.outputSourceRange&&(d.start=s,d.rawAttrsMap=d.attrsList.reduce(function(e,t){return e[t.name]=t,e},{})),n.forEach(function(e){invalidAttributeRE.test(e.name)&&warn$2("Invalid dynamic argument expression: attribute names cannot contain spaces, quotes, <, >, / or =.",{start:e.start+e.name.indexOf("["),end:e.start+e.name.length})}),isForbiddenTag(d)&&!isServerRendering()&&(d.forbidden=!0,warn$2("Templates should only be responsible for mapping the state to the UI. Avoid placing tags with side-effects in your templates, such as <"+e+">, as they will not be parsed.",{start:d.start}));for(var f=0;f<preTransforms.length;f++)d=preTransforms[f](d,t)||d;l||(processPre(d),d.pre&&(l=!0)),platformIsPreTag(d.tag)&&(c=!0),l?processRawAttrs(d):d.processed||(processFor(d),processIf(d),processOnce(d)),r||p(r=d),o?h(d):(i=d,a.push(d))},end:function(e,n,r){var o=a[a.length-1];a.length-=1,i=a[a.length-1],t.outputSourceRange&&(o.end=r),h(o)},chars:function(n,r,a){if(i){if(!isIE||"textarea"!==i.tag||i.attrsMap.placeholder!==n){var u,h,f=i.children;if(n=c||n.trim()?isTextTag(i)?n:decodeHTMLCached(n):f.length?s?"condense"===s&&lineBreakRE.test(n)?"":" ":o?" ":"":"")"condense"===s&&(n=n.replace(whitespaceRE$1," ")),!l&&" "!==n&&(u=parseText(n,delimiters))?h={type:2,expression:u.expression,tokens:u.tokens,text:n}:" "===n&&f.length&&" "===f[f.length-1].text||(h={type:3,text:n}),h&&(t.outputSourceRange&&(h.start=r,h.end=a),f.push(h))}}else n===e?d("Component template requires a root element, rather than just text.",{start:r}):(n=n.trim())&&d('text "'+n+'" outside root element will be ignored.',{start:r})},comment:function(e,n,r){if(i){var a={type:3,text:e,isComment:!0};t.outputSourceRange&&(a.start=n,a.end=r),i.children.push(a)}}}),r}function processPre(e){null!=getAndRemoveAttr(e,"v-pre")&&(e.pre=!0)}function processRawAttrs(e){var t=e.attrsList,n=t.length;if(n)for(var r=e.attrs=new Array(n),i=0;i<n;i++)r[i]={name:t[i].name,value:JSON.stringify(t[i].value)},null!=t[i].start&&(r[i].start=t[i].start,r[i].end=t[i].end);else e.pre||(e.plain=!0)}function processElement(e,t){processKey(e),e.plain=!e.key&&!e.scopedSlots&&!e.attrsList.length,processRef(e),processSlotContent(e),processSlotOutlet(e),processComponent(e);for(var n=0;n<transforms.length;n++)e=transforms[n](e,t)||e;return processAttrs(e),e}function processKey(e){var t=getBindingAttr(e,"key");if(t){if("template"===e.tag&&warn$2("<template> cannot be keyed. Place the key on real elements instead.",getRawBindingAttr(e,"key")),e.for){var n=e.iterator2||e.iterator1,r=e.parent;n&&n===t&&r&&"transition-group"===r.tag&&warn$2("Do not use v-for index as key on <transition-group> children, this is the same as not using keys.",getRawBindingAttr(e,"key"),!0)}e.key=t}}function processRef(e){var t=getBindingAttr(e,"ref");t&&(e.ref=t,e.refInFor=checkInFor(e))}function processFor(e){var t;if(t=getAndRemoveAttr(e,"v-for")){var n=parseFor(t);n?extend(e,n):warn$2("Invalid v-for expression: "+t,e.rawAttrsMap["v-for"])}}function parseFor(e){var t=e.match(forAliasRE);if(t){var n={};n.for=t[2].trim();var r=t[1].trim().replace(stripParensRE,""),i=r.match(forIteratorRE);return i?(n.alias=r.replace(forIteratorRE,"").trim(),n.iterator1=i[1].trim(),i[2]&&(n.iterator2=i[2].trim())):n.alias=r,n}}function processIf(e){var t=getAndRemoveAttr(e,"v-if");if(t)e.if=t,addIfCondition(e,{exp:t,block:e});else{null!=getAndRemoveAttr(e,"v-else")&&(e.else=!0);var n=getAndRemoveAttr(e,"v-else-if");n&&(e.elseif=n)}}function processIfConditions(e,t){var n=findPrevElement(t.children);n&&n.if?addIfCondition(n,{exp:e.elseif,block:e}):warn$2("v-"+(e.elseif?'else-if="'+e.elseif+'"':"else")+" used on element <"+e.tag+"> without corresponding v-if.",e.rawAttrsMap[e.elseif?"v-else-if":"v-else"])}function findPrevElement(e){for(var t=e.length;t--;){if(1===e[t].type)return e[t];" "!==e[t].text&&warn$2('text "'+e[t].text.trim()+'" between v-if and v-else(-if) will be ignored.',e[t]),e.pop()}}function addIfCondition(e,t){e.ifConditions||(e.ifConditions=[]),e.ifConditions.push(t)}function processOnce(e){null!=getAndRemoveAttr(e,"v-once")&&(e.once=!0)}function processSlotContent(e){var t;"template"===e.tag?((t=getAndRemoveAttr(e,"scope"))&&warn$2('the "scope" attribute for scoped slots have been deprecated and replaced by "slot-scope" since 2.5. The new "slot-scope" attribute can also be used on plain elements in addition to <template> to denote scoped slots.',e.rawAttrsMap.scope,!0),e.slotScope=t||getAndRemoveAttr(e,"slot-scope")):(t=getAndRemoveAttr(e,"slot-scope"))&&(e.attrsMap["v-for"]&&warn$2("Ambiguous combined usage of slot-scope and v-for on <"+e.tag+"> (v-for takes higher priority). Use a wrapper <template> for the scoped slot to make it clearer.",e.rawAttrsMap["slot-scope"],!0),e.slotScope=t);var n=getBindingAttr(e,"slot");if(n&&(e.slotTarget='""'===n?'"default"':n,e.slotTargetDynamic=!(!e.attrsMap[":slot"]&&!e.attrsMap["v-bind:slot"]),"template"===e.tag||e.slotScope||addAttr(e,"slot",n,getRawBindingAttr(e,"slot"))),"template"===e.tag){var r=getAndRemoveAttrByRegex(e,slotRE);if(r){(e.slotTarget||e.slotScope)&&warn$2("Unexpected mixed usage of different slot syntaxes.",e),e.parent&&!maybeComponent(e.parent)&&warn$2("<template v-slot> can only appear at the root level inside the receiving the component",e);var i=getSlotName(r),a=i.name,o=i.dynamic;e.slotTarget=a,e.slotTargetDynamic=o,e.slotScope=r.value||emptySlotScopeToken}}else{var s=getAndRemoveAttrByRegex(e,slotRE);if(s){maybeComponent(e)||warn$2("v-slot can only be used on components or <template>.",s),(e.slotScope||e.slotTarget)&&warn$2("Unexpected mixed usage of different slot syntaxes.",e),e.scopedSlots&&warn$2("To avoid scope ambiguity, the default slot should also use <template> syntax when there are other named slots.",s);var l=e.scopedSlots||(e.scopedSlots={}),c=getSlotName(s),u=c.name,d=c.dynamic,h=l[u]=createASTElement("template",[],e);h.slotTarget=u,h.slotTargetDynamic=d,h.children=e.children.filter(function(e){if(!e.slotScope)return e.parent=h,!0}),h.slotScope=s.value||emptySlotScopeToken,e.children=[],e.plain=!1}}}function getSlotName(e){var t=e.name.replace(slotRE,"");return t||("#"!==e.name[0]?t="default":warn$2("v-slot shorthand syntax requires a slot name.",e)),dynamicArgRE.test(t)?{name:t.slice(1,-1),dynamic:!0}:{name:'"'+t+'"',dynamic:!1}}function processSlotOutlet(e){"slot"===e.tag&&(e.slotName=getBindingAttr(e,"name"),e.key&&warn$2("`key` does not work on <slot> because slots are abstract outlets and can possibly expand into multiple elements. Use the key on a wrapping element instead.",getRawBindingAttr(e,"key")))}function processComponent(e){var t;(t=getBindingAttr(e,"is"))&&(e.component=t),null!=getAndRemoveAttr(e,"inline-template")&&(e.inlineTemplate=!0)}function processAttrs(e){var t,n,r,i,a,o,s,l,c=e.attrsList;for(t=0,n=c.length;t<n;t++){if(r=i=c[t].name,a=c[t].value,dirRE.test(r))if(e.hasBindings=!0,(o=parseModifiers(r.replace(dirRE,"")))&&(r=r.replace(modifierRE,"")),bindRE.test(r))r=r.replace(bindRE,""),a=parseFilters(a),(l=dynamicArgRE.test(r))&&(r=r.slice(1,-1)),0===a.trim().length&&warn$2('The value for a v-bind expression cannot be empty. Found in "v-bind:'+r+'"'),o&&(o.prop&&!l&&"innerHtml"===(r=camelize(r))&&(r="innerHTML"),o.camel&&!l&&(r=camelize(r)),o.sync&&(s=genAssignmentCode(a,"$event"),l?addHandler(e,'"update:"+('+r+")",s,null,!1,warn$2,c[t],!0):(addHandler(e,"update:"+camelize(r),s,null,!1,warn$2,c[t]),hyphenate(r)!==camelize(r)&&addHandler(e,"update:"+hyphenate(r),s,null,!1,warn$2,c[t])))),o&&o.prop||!e.component&&platformMustUseProp(e.tag,e.attrsMap.type,r)?addProp(e,r,a,c[t],l):addAttr(e,r,a,c[t],l);else if(onRE.test(r))r=r.replace(onRE,""),(l=dynamicArgRE.test(r))&&(r=r.slice(1,-1)),addHandler(e,r,a,o,!1,warn$2,c[t],l);else{var u=(r=r.replace(dirRE,"")).match(argRE),d=u&&u[1];l=!1,d&&(r=r.slice(0,-(d.length+1)),dynamicArgRE.test(d)&&(d=d.slice(1,-1),l=!0)),addDirective(e,r,i,a,d,l,o,c[t]),"model"===r&&checkForAliasModel(e,a)}else parseText(a,delimiters)&&warn$2(r+'="'+a+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div id="{{ val }}">, use <div :id="val">.',c[t]),addAttr(e,r,JSON.stringify(a),c[t]),!e.component&&"muted"===r&&platformMustUseProp(e.tag,e.attrsMap.type,r)&&addProp(e,r,"true",c[t])}}function checkInFor(e){for(var t=e;t;){if(void 0!==t.for)return!0;t=t.parent}return!1}function parseModifiers(e){var t=e.match(modifierRE);if(t){var n={};return t.forEach(function(e){n[e.slice(1)]=!0}),n}}function makeAttrsMap(e){for(var t={},n=0,r=e.length;n<r;n++)!t[e[n].name]||isIE||isEdge||warn$2("duplicate attribute: "+e[n].name,e[n]),t[e[n].name]=e[n].value;return t}function isTextTag(e){return"script"===e.tag||"style"===e.tag}function isForbiddenTag(e){return"style"===e.tag||"script"===e.tag&&(!e.attrsMap.type||"text/javascript"===e.attrsMap.type)}var ieNSBug=/^xmlns:NS\d+/,ieNSPrefix=/^NS\d+:/;function guardIESVGBug(e){for(var t=[],n=0;n<e.length;n++){var r=e[n];ieNSBug.test(r.name)||(r.name=r.name.replace(ieNSPrefix,""),t.push(r))}return t}function checkForAliasModel(e,t){for(var n=e;n;)n.for&&n.alias===t&&warn$2("<"+e.tag+' v-model="'+t+'">: You are binding v-model directly to a v-for iteration alias. This will not be able to modify the v-for source array because writing to the alias is like modifying a function local variable. Consider using an array of objects and use v-model on an object property instead.',e.rawAttrsMap["v-model"]),n=n.parent}function preTransformNode(e,t){if("input"===e.tag){var n,r=e.attrsMap;if(!r["v-model"])return;if((r[":type"]||r["v-bind:type"])&&(n=getBindingAttr(e,"type")),r.type||n||!r["v-bind"]||(n="("+r["v-bind"]+").type"),n){var i=getAndRemoveAttr(e,"v-if",!0),a=i?"&&("+i+")":"",o=null!=getAndRemoveAttr(e,"v-else",!0),s=getAndRemoveAttr(e,"v-else-if",!0),l=cloneASTElement(e);processFor(l),addRawAttr(l,"type","checkbox"),processElement(l,t),l.processed=!0,l.if="("+n+")==='checkbox'"+a,addIfCondition(l,{exp:l.if,block:l});var c=cloneASTElement(e);getAndRemoveAttr(c,"v-for",!0),addRawAttr(c,"type","radio"),processElement(c,t),addIfCondition(l,{exp:"("+n+")==='radio'"+a,block:c});var u=cloneASTElement(e);return getAndRemoveAttr(u,"v-for",!0),addRawAttr(u,":type",n),processElement(u,t),addIfCondition(l,{exp:i,block:u}),o?l.else=!0:s&&(l.elseif=s),l}}}function cloneASTElement(e){return createASTElement(e.tag,e.attrsList.slice(),e.parent)}var model$1={preTransformNode:preTransformNode},modules$1=[klass$1,style$1,model$1];function text(e,t){t.value&&addProp(e,"textContent","_s("+t.value+")",t)}function html(e,t){t.value&&addProp(e,"innerHTML","_s("+t.value+")",t)}var isStaticKey,isPlatformReservedTag,directives$1={model:model,text:text,html:html},baseOptions={expectHTML:!0,modules:modules$1,directives:directives$1,isPreTag:isPreTag,isUnaryTag:isUnaryTag,mustUseProp:mustUseProp,canBeLeftOpenTag:canBeLeftOpenTag,isReservedTag:isReservedTag,getTagNamespace:getTagNamespace,staticKeys:genStaticKeys(modules$1)},genStaticKeysCached=cached(genStaticKeys$1);function optimize(e,t){e&&(isStaticKey=genStaticKeysCached(t.staticKeys||""),isPlatformReservedTag=t.isReservedTag||no,markStatic$1(e),markStaticRoots(e,!1))}function genStaticKeys$1(e){return makeMap("type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap"+(e?","+e:""))}function markStatic$1(e){if(e.static=isStatic(e),1===e.type){if(!isPlatformReservedTag(e.tag)&&"slot"!==e.tag&&null==e.attrsMap["inline-template"])return;for(var t=0,n=e.children.length;t<n;t++){var r=e.children[t];markStatic$1(r),r.static||(e.static=!1)}if(e.ifConditions)for(var i=1,a=e.ifConditions.length;i<a;i++){var o=e.ifConditions[i].block;markStatic$1(o),o.static||(e.static=!1)}}}function markStaticRoots(e,t){if(1===e.type){if((e.static||e.once)&&(e.staticInFor=t),e.static&&e.children.length&&(1!==e.children.length||3!==e.children[0].type))return void(e.staticRoot=!0);if(e.staticRoot=!1,e.children)for(var n=0,r=e.children.length;n<r;n++)markStaticRoots(e.children[n],t||!!e.for);if(e.ifConditions)for(var i=1,a=e.ifConditions.length;i<a;i++)markStaticRoots(e.ifConditions[i].block,t)}}function isStatic(e){return 2!==e.type&&(3===e.type||!(!e.pre&&(e.hasBindings||e.if||e.for||isBuiltInTag(e.tag)||!isPlatformReservedTag(e.tag)||isDirectChildOfTemplateFor(e)||!Object.keys(e).every(isStaticKey))))}function isDirectChildOfTemplateFor(e){for(;e.parent;){if("template"!==(e=e.parent).tag)return!1;if(e.for)return!0}return!1}var fnExpRE=/^([\w$_]+|\([^)]*?\))\s*=>|^function\s*\(/,fnInvokeRE=/\([^)]*?\);*$/,simplePathRE=/^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/,keyCodes={esc:27,tab:9,enter:13,space:32,up:38,left:37,right:39,down:40,delete:[8,46]},keyNames={esc:["Esc","Escape"],tab:"Tab",enter:"Enter",space:[" ","Spacebar"],up:["Up","ArrowUp"],left:["Left","ArrowLeft"],right:["Right","ArrowRight"],down:["Down","ArrowDown"],delete:["Backspace","Delete","Del"]},genGuard=function(e){return"if("+e+")return null;"},modifierCode={stop:"$event.stopPropagation();",prevent:"$event.preventDefault();",self:genGuard("$event.target !== $event.currentTarget"),ctrl:genGuard("!$event.ctrlKey"),shift:genGuard("!$event.shiftKey"),alt:genGuard("!$event.altKey"),meta:genGuard("!$event.metaKey"),left:genGuard("'button' in $event && $event.button !== 0"),middle:genGuard("'button' in $event && $event.button !== 1"),right:genGuard("'button' in $event && $event.button !== 2")};function genHandlers(e,t){var n=t?"nativeOn:":"on:",r="",i="";for(var a in e){var o=genHandler(e[a]);e[a]&&e[a].dynamic?i+=a+","+o+",":r+='"'+a+'":'+o+","}return r="{"+r.slice(0,-1)+"}",i?n+"_d("+r+",["+i.slice(0,-1)+"])":n+r}function genHandler(e){if(!e)return"function(){}";if(Array.isArray(e))return"["+e.map(function(e){return genHandler(e)}).join(",")+"]";var t=simplePathRE.test(e.value),n=fnExpRE.test(e.value),r=simplePathRE.test(e.value.replace(fnInvokeRE,""));if(e.modifiers){var i="",a="",o=[];for(var s in e.modifiers)if(modifierCode[s])a+=modifierCode[s],keyCodes[s]&&o.push(s);else if("exact"===s){var l=e.modifiers;a+=genGuard(["ctrl","shift","alt","meta"].filter(function(e){return!l[e]}).map(function(e){return"$event."+e+"Key"}).join("||"))}else o.push(s);return o.length&&(i+=genKeyFilter(o)),a&&(i+=a),"function($event){"+i+(t?"return "+e.value+"($event)":n?"return ("+e.value+")($event)":r?"return "+e.value:e.value)+"}"}return t||n?e.value:"function($event){"+(r?"return "+e.value:e.value)+"}"}function genKeyFilter(e){return"if(!$event.type.indexOf('key')&&"+e.map(genFilterCode).join("&&")+")return null;"}function genFilterCode(e){var t=parseInt(e,10);if(t)return"$event.keyCode!=="+t;var n=keyCodes[e],r=keyNames[e];return"_k($event.keyCode,"+JSON.stringify(e)+","+JSON.stringify(n)+",$event.key,"+JSON.stringify(r)+")"}function on(e,t){t.modifiers&&warn("v-on without argument does not support modifiers."),e.wrapListeners=function(e){return"_g("+e+","+t.value+")"}}function bind$1(e,t){e.wrapData=function(n){return"_b("+n+",'"+e.tag+"',"+t.value+","+(t.modifiers&&t.modifiers.prop?"true":"false")+(t.modifiers&&t.modifiers.sync?",true":"")+")"}}var baseDirectives={on:on,bind:bind$1,cloak:noop$1},CodegenState=function(e){this.options=e,this.warn=e.warn||baseWarn,this.transforms=pluckModuleFunction(e.modules,"transformCode"),this.dataGenFns=pluckModuleFunction(e.modules,"genData"),this.directives=extend(extend({},baseDirectives),e.directives);var t=e.isReservedTag||no;this.maybeComponent=function(e){return!!e.component||!t(e.tag)},this.onceId=0,this.staticRenderFns=[],this.pre=!1};function generate(e,t){var n=new CodegenState(t);return{render:"with(this){return "+(e?genElement(e,n):'_c("div")')+"}",staticRenderFns:n.staticRenderFns}}function genElement(e,t){if(e.parent&&(e.pre=e.pre||e.parent.pre),e.staticRoot&&!e.staticProcessed)return genStatic(e,t);if(e.once&&!e.onceProcessed)return genOnce(e,t);if(e.for&&!e.forProcessed)return genFor(e,t);if(e.if&&!e.ifProcessed)return genIf(e,t);if("template"!==e.tag||e.slotTarget||t.pre){if("slot"===e.tag)return genSlot(e,t);var n;if(e.component)n=genComponent(e.component,e,t);else{var r;(!e.plain||e.pre&&t.maybeComponent(e))&&(r=genData$2(e,t));var i=e.inlineTemplate?null:genChildren(e,t,!0);n="_c('"+e.tag+"'"+(r?","+r:"")+(i?","+i:"")+")"}for(var a=0;a<t.transforms.length;a++)n=t.transforms[a](e,n);return n}return genChildren(e,t)||"void 0"}function genStatic(e,t){e.staticProcessed=!0;var n=t.pre;return e.pre&&(t.pre=e.pre),t.staticRenderFns.push("with(this){return "+genElement(e,t)+"}"),t.pre=n,"_m("+(t.staticRenderFns.length-1)+(e.staticInFor?",true":"")+")"}function genOnce(e,t){if(e.onceProcessed=!0,e.if&&!e.ifProcessed)return genIf(e,t);if(e.staticInFor){for(var n="",r=e.parent;r;){if(r.for){n=r.key;break}r=r.parent}return n?"_o("+genElement(e,t)+","+t.onceId+++","+n+")":(t.warn("v-once can only be used inside v-for that is keyed. ",e.rawAttrsMap["v-once"]),genElement(e,t))}return genStatic(e,t)}function genIf(e,t,n,r){return e.ifProcessed=!0,genIfConditions(e.ifConditions.slice(),t,n,r)}function genIfConditions(e,t,n,r){if(!e.length)return r||"_e()";var i=e.shift();return i.exp?"("+i.exp+")?"+a(i.block)+":"+genIfConditions(e,t,n,r):""+a(i.block);function a(e){return n?n(e,t):e.once?genOnce(e,t):genElement(e,t)}}function genFor(e,t,n,r){var i=e.for,a=e.alias,o=e.iterator1?","+e.iterator1:"",s=e.iterator2?","+e.iterator2:"";return t.maybeComponent(e)&&"slot"!==e.tag&&"template"!==e.tag&&!e.key&&t.warn("<"+e.tag+' v-for="'+a+" in "+i+'">: component lists rendered with v-for should have explicit keys. See https://vuejs.org/guide/list.html#key for more info.',e.rawAttrsMap["v-for"],!0),e.forProcessed=!0,(r||"_l")+"(("+i+"),function("+a+o+s+"){return "+(n||genElement)(e,t)+"})"}function genData$2(e,t){var n="{",r=genDirectives(e,t);r&&(n+=r+","),e.key&&(n+="key:"+e.key+","),e.ref&&(n+="ref:"+e.ref+","),e.refInFor&&(n+="refInFor:true,"),e.pre&&(n+="pre:true,"),e.component&&(n+='tag:"'+e.tag+'",');for(var i=0;i<t.dataGenFns.length;i++)n+=t.dataGenFns[i](e);if(e.attrs&&(n+="attrs:"+genProps(e.attrs)+","),e.props&&(n+="domProps:"+genProps(e.props)+","),e.events&&(n+=genHandlers(e.events,!1)+","),e.nativeEvents&&(n+=genHandlers(e.nativeEvents,!0)+","),e.slotTarget&&!e.slotScope&&(n+="slot:"+e.slotTarget+","),e.scopedSlots&&(n+=genScopedSlots(e,e.scopedSlots,t)+","),e.model&&(n+="model:{value:"+e.model.value+",callback:"+e.model.callback+",expression:"+e.model.expression+"},"),e.inlineTemplate){var a=genInlineTemplate(e,t);a&&(n+=a+",")}return n=n.replace(/,$/,"")+"}",e.dynamicAttrs&&(n="_b("+n+',"'+e.tag+'",'+genProps(e.dynamicAttrs)+")"),e.wrapData&&(n=e.wrapData(n)),e.wrapListeners&&(n=e.wrapListeners(n)),n}function genDirectives(e,t){var n=e.directives;if(n){var r,i,a,o,s="directives:[",l=!1;for(r=0,i=n.length;r<i;r++){a=n[r],o=!0;var c=t.directives[a.name];c&&(o=!!c(e,a,t.warn)),o&&(l=!0,s+='{name:"'+a.name+'",rawName:"'+a.rawName+'"'+(a.value?",value:("+a.value+"),expression:"+JSON.stringify(a.value):"")+(a.arg?",arg:"+(a.isDynamicArg?a.arg:'"'+a.arg+'"'):"")+(a.modifiers?",modifiers:"+JSON.stringify(a.modifiers):"")+"},")}return l?s.slice(0,-1)+"]":void 0}}function genInlineTemplate(e,t){var n=e.children[0];if(1===e.children.length&&1===n.type||t.warn("Inline-template components must have exactly one child element.",{start:e.start}),n&&1===n.type){var r=generate(n,t.options);return"inlineTemplate:{render:function(){"+r.render+"},staticRenderFns:["+r.staticRenderFns.map(function(e){return"function(){"+e+"}"}).join(",")+"]}"}}function genScopedSlots(e,t,n){var r=Object.keys(t).some(function(e){var n=t[e];return n.slotTargetDynamic||n.if||n.for||containsSlotChild(n)});if(!r)for(var i=e.parent;i;){if(i.slotScope&&i.slotScope!==emptySlotScopeToken){r=!0;break}i=i.parent}return"scopedSlots:_u(["+Object.keys(t).map(function(e){return genScopedSlot(t[e],n)}).join(",")+"]"+(r?",true":"")+")"}function containsSlotChild(e){return 1===e.type&&("slot"===e.tag||e.children.some(containsSlotChild))}function genScopedSlot(e,t){var n=e.attrsMap["slot-scope"];if(e.if&&!e.ifProcessed&&!n)return genIf(e,t,genScopedSlot,"null");if(e.for&&!e.forProcessed)return genFor(e,t,genScopedSlot);var r=e.slotScope===emptySlotScopeToken?"":String(e.slotScope),i="function("+r+"){return "+("template"===e.tag?e.if&&n?"("+e.if+")?"+(genChildren(e,t)||"undefined")+":undefined":genChildren(e,t)||"undefined":genElement(e,t))+"}",a=r?"":",proxy:true";return"{key:"+(e.slotTarget||'"default"')+",fn:"+i+a+"}"}function genChildren(e,t,n,r,i){var a=e.children;if(a.length){var o=a[0];if(1===a.length&&o.for&&"template"!==o.tag&&"slot"!==o.tag){var s=n?t.maybeComponent(o)?",1":",0":"";return""+(r||genElement)(o,t)+s}var l=n?getNormalizationType(a,t.maybeComponent):0,c=i||genNode;return"["+a.map(function(e){return c(e,t)}).join(",")+"]"+(l?","+l:"")}}function getNormalizationType(e,t){for(var n=0,r=0;r<e.length;r++){var i=e[r];if(1===i.type){if(needsNormalization(i)||i.ifConditions&&i.ifConditions.some(function(e){return needsNormalization(e.block)})){n=2;break}(t(i)||i.ifConditions&&i.ifConditions.some(function(e){return t(e.block)}))&&(n=1)}}return n}function needsNormalization(e){return void 0!==e.for||"template"===e.tag||"slot"===e.tag}function genNode(e,t){return 1===e.type?genElement(e,t):3===e.type&&e.isComment?genComment(e):genText(e)}function genText(e){return"_v("+(2===e.type?e.expression:transformSpecialNewlines(JSON.stringify(e.text)))+")"}function genComment(e){return"_e("+JSON.stringify(e.text)+")"}function genSlot(e,t){var n=e.slotName||'"default"',r=genChildren(e,t),i="_t("+n+(r?","+r:""),a=e.attrs||e.dynamicAttrs?genProps((e.attrs||[]).concat(e.dynamicAttrs||[]).map(function(e){return{name:camelize(e.name),value:e.value,dynamic:e.dynamic}})):null,o=e.attrsMap["v-bind"];return!a&&!o||r||(i+=",null"),a&&(i+=","+a),o&&(i+=(a?"":",null")+","+o),i+")"}function genComponent(e,t,n){var r=t.inlineTemplate?null:genChildren(t,n,!0);return"_c("+e+","+genData$2(t,n)+(r?","+r:"")+")"}function genProps(e){for(var t="",n="",r=0;r<e.length;r++){var i=e[r],a=transformSpecialNewlines(i.value);i.dynamic?n+=i.name+","+a+",":t+='"'+i.name+'":'+a+","}return t="{"+t.slice(0,-1)+"}",n?"_d("+t+",["+n.slice(0,-1)+"])":t}function transformSpecialNewlines(e){return e.replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}var prohibitedKeywordRE=new RegExp("\\b"+"do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments".split(",").join("\\b|\\b")+"\\b"),unaryOperatorsRE=new RegExp("\\b"+"delete,typeof,void".split(",").join("\\s*\\([^\\)]*\\)|\\b")+"\\s*\\([^\\)]*\\)"),stripStringRE=/'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;function detectErrors(e,t){e&&checkNode(e,t)}function checkNode(e,t){if(1===e.type){for(var n in e.attrsMap)if(dirRE.test(n)){var r=e.attrsMap[n];if(r){var i=e.rawAttrsMap[n];"v-for"===n?checkFor(e,'v-for="'+r+'"',t,i):onRE.test(n)?checkEvent(r,n+'="'+r+'"',t,i):checkExpression(r,n+'="'+r+'"',t,i)}}if(e.children)for(var a=0;a<e.children.length;a++)checkNode(e.children[a],t)}else 2===e.type&&checkExpression(e.expression,e.text,t,e)}function checkEvent(e,t,n,r){var i=e.replace(stripStringRE,""),a=i.match(unaryOperatorsRE);a&&"$"!==i.charAt(a.index-1)&&n('avoid using JavaScript unary operator as property name: "'+a[0]+'" in expression '+t.trim(),r),checkExpression(e,t,n,r)}function checkFor(e,t,n,r){checkExpression(e.for||"",t,n,r),checkIdentifier(e.alias,"v-for alias",t,n,r),checkIdentifier(e.iterator1,"v-for iterator",t,n,r),checkIdentifier(e.iterator2,"v-for iterator",t,n,r)}function checkIdentifier(e,t,n,r,i){if("string"==typeof e)try{new Function("var "+e+"=_")}catch(a){r("invalid "+t+' "'+e+'" in expression: '+n.trim(),i)}}function checkExpression(e,t,n,r){try{new Function("return "+e)}catch(a){var i=e.replace(stripStringRE,"").match(prohibitedKeywordRE);n(i?'avoid using JavaScript keyword as property name: "'+i[0]+'"\n  Raw expression: '+t.trim():"invalid expression: "+a.message+" in\n\n    "+e+"\n\n  Raw expression: "+t.trim()+"\n",r)}}var range=2;function generateCodeFrame(e,t,n){void 0===t&&(t=0),void 0===n&&(n=e.length);for(var r=e.split(/\r?\n/),i=0,a=[],o=0;o<r.length;o++)if((i+=r[o].length+1)>=t){for(var s=o-range;s<=o+range||n>i;s++)if(!(s<0||s>=r.length)){a.push(""+(s+1)+repeat(" ",3-String(s+1).length)+"|  "+r[s]);var l=r[s].length;if(s===o){var c=t-(i-l)+1,u=n>i?l-c:n-t;a.push("   |  "+repeat(" ",c)+repeat("^",u))}else if(s>o){if(n>i){var d=Math.min(n-i,l);a.push("   |  "+repeat("^",d))}i+=l+1}}break}return a.join("\n")}function repeat(e,t){for(var n="";1&t&&(n+=e),!((t>>>=1)<=0);)e+=e;return n}function createFunction(e,t){try{return new Function(e)}catch(n){return t.push({err:n,code:e}),noop$1}}function createCompileToFunctionFn(e){var t=Object.create(null);return function(n,r,i){var a=(r=extend({},r)).warn||warn;delete r.warn;try{new Function("return 1")}catch(e){e.toString().match(/unsafe-eval|CSP/)&&a("It seems you are using the standalone build of Vue.js in an environment with Content Security Policy that prohibits unsafe-eval. The template compiler cannot work in this environment. Consider relaxing the policy to allow unsafe-eval or pre-compiling your templates into render functions.")}var o=r.delimiters?String(r.delimiters)+n:n;if(t[o])return t[o];var s=e(n,r);s.errors&&s.errors.length&&(r.outputSourceRange?s.errors.forEach(function(e){a("Error compiling template:\n\n"+e.msg+"\n\n"+generateCodeFrame(n,e.start,e.end),i)}):a("Error compiling template:\n\n"+n+"\n\n"+s.errors.map(function(e){return"- "+e}).join("\n")+"\n",i)),s.tips&&s.tips.length&&(r.outputSourceRange?s.tips.forEach(function(e){return tip(e.msg,i)}):s.tips.forEach(function(e){return tip(e,i)}));var l={},c=[];return l.render=createFunction(s.render,c),l.staticRenderFns=s.staticRenderFns.map(function(e){return createFunction(e,c)}),s.errors&&s.errors.length||!c.length||a("Failed to generate render function:\n\n"+c.map(function(e){var t=e.err,n=e.code;return t.toString()+" in\n\n"+n+"\n"}).join("\n"),i),t[o]=l}}function createCompilerCreator(e){return function(t){function n(n,r){var i=Object.create(t),a=[],o=[],s=function(e,t,n){(n?o:a).push(e)};if(r){if(r.outputSourceRange){var l=n.match(/^\s*/)[0].length;s=function(e,t,n){var r={msg:e};t&&(null!=t.start&&(r.start=t.start+l),null!=t.end&&(r.end=t.end+l)),(n?o:a).push(r)}}for(var c in r.modules&&(i.modules=(t.modules||[]).concat(r.modules)),r.directives&&(i.directives=extend(Object.create(t.directives||null),r.directives)),r)"modules"!==c&&"directives"!==c&&(i[c]=r[c])}i.warn=s;var u=e(n.trim(),i);return detectErrors(u.ast,s),u.errors=a,u.tips=o,u}return{compile:n,compileToFunctions:createCompileToFunctionFn(n)}}}var div,createCompiler=createCompilerCreator(function(e,t){var n=parse(e.trim(),t);!1!==t.optimize&&optimize(n,t);var r=generate(n,t);return{ast:n,render:r.render,staticRenderFns:r.staticRenderFns}}),ref$1=createCompiler(baseOptions),compileToFunctions=ref$1.compileToFunctions;function getShouldDecode(e){return(div=div||document.createElement("div")).innerHTML=e?'<a href="\n"/>':'<div a="\n"/>',div.innerHTML.indexOf("&#10;")>0}var shouldDecodeNewlines=!!inBrowser&&getShouldDecode(!1),shouldDecodeNewlinesForHref=!!inBrowser&&getShouldDecode(!0),idToTemplate=cached(function(e){var t=query(e);return t&&t.innerHTML}),mount=Vue.prototype.$mount;function getOuterHTML(e){if(e.outerHTML)return e.outerHTML;var t=document.createElement("div");return t.appendChild(e.cloneNode(!0)),t.innerHTML}Vue.prototype.$mount=function(e,t){if((e=e&&query(e))===document.body||e===document.documentElement)return warn("Do not mount Vue to <html> or <body> - mount to normal elements instead."),this;var n=this.$options;if(!n.render){var r=n.template;if(r)if("string"==typeof r)"#"===r.charAt(0)&&((r=idToTemplate(r))||warn("Template element not found or is empty: "+n.template,this));else{if(!r.nodeType)return warn("invalid template option:"+r,this),this;r=r.innerHTML}else e&&(r=getOuterHTML(e));if(r){config.performance&&mark&&mark("compile");var i=compileToFunctions(r,{outputSourceRange:!0,shouldDecodeNewlines:shouldDecodeNewlines,shouldDecodeNewlinesForHref:shouldDecodeNewlinesForHref,delimiters:n.delimiters,comments:n.comments},this),a=i.render,o=i.staticRenderFns;n.render=a,n.staticRenderFns=o,config.performance&&mark&&(mark("compile end"),measure("vue "+this._name+" compile","compile","compile end"))}}return mount.call(this,e,t)},Vue.compile=compileToFunctions;var script={props:["options","value"],data:function(){return{selected:null}},mounted:function(){this.selected=this.value},watch:{value:function(e){this.selected=e}}};function normalizeComponent(e,t,n,r,i,a,o,s,l,c){"boolean"!=typeof o&&(l=s,s=o,o=!1);var u,d="function"==typeof n?n.options:n;if(e&&e.render&&(d.render=e.render,d.staticRenderFns=e.staticRenderFns,d._compiled=!0,i&&(d.functional=!0)),r&&(d._scopeId=r),a?(u=function(e){(e=e||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(e=__VUE_SSR_CONTEXT__),t&&t.call(this,l(e)),e&&e._registeredComponents&&e._registeredComponents.add(a)},d._ssrRegister=u):t&&(u=o?function(){t.call(this,c(this.$root.$options.shadowRoot))}:function(e){t.call(this,s(e))}),u)if(d.functional){var h=d.render;d.render=function(e,t){return u.call(t),h(e,t)}}else{var f=d.beforeCreate;d.beforeCreate=f?[].concat(f,u):[u]}return n}var normalizeComponent_1=normalizeComponent,isOldIE="undefined"!=typeof navigator&&/msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());function createInjector(e){return function(e,t){return addStyle(e,t)}}var HEAD=document.head||document.getElementsByTagName("head")[0],styles={};function addStyle(e,t){var n=isOldIE?t.media||"default":e,r=styles[n]||(styles[n]={ids:new Set,styles:[]});if(!r.ids.has(e)){r.ids.add(e);var i=t.source;if(t.map&&(i+="\n/*# sourceURL="+t.map.sources[0]+" */",i+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(t.map))))+" */"),r.element||(r.element=document.createElement("style"),r.element.type="text/css",t.media&&r.element.setAttribute("media",t.media),HEAD.appendChild(r.element)),"styleSheet"in r.element)r.styles.push(i),r.element.styleSheet.cssText=r.styles.filter(Boolean).join("\n");else{var a=r.ids.size-1,o=document.createTextNode(i),s=r.element.childNodes;s[a]&&r.element.removeChild(s[a]),s.length?r.element.insertBefore(o,s[a]):r.element.appendChild(o)}}}var browser=createInjector,__vue_script__=script,__vue_render__=function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("select",{directives:[{name:"model",rawName:"v-model",value:e.selected,expression:"selected"}],staticClass:"select",on:{input:function(t){e.$emit("input",t.target.value)},change:function(t){var n=Array.prototype.filter.call(t.target.options,function(e){return e.selected}).map(function(e){return"_value"in e?e._value:e.value});e.selected=t.target.multiple?n:n[0]}}},e._l(e.options,function(t){return n("option",{key:t.value,domProps:{value:t.value}},[e._v("\n      "+e._s(t.text)+"\n    ")])}),0)])},__vue_staticRenderFns__=[];__vue_render__._withStripped=!0;var __vue_inject_styles__=function(e){e&&e("data-v-afd20650_0",{source:"\n\n\n\n\n\n\n\n\n\n",map:{version:3,sources:[],names:[],mappings:"",file:"select.vue"},media:void 0})},__vue_scope_id__=void 0,__vue_module_identifier__=void 0,__vue_is_functional_template__=!1,SelectComponent=normalizeComponent_1({render:__vue_render__,staticRenderFns:__vue_staticRenderFns__},__vue_inject_styles__,__vue_script__,__vue_scope_id__,__vue_is_functional_template__,__vue_module_identifier__,browser,void 0),SelectData=[{text:"All Boroughs",value:"all"},{text:"Brooklyn",value:"brooklyn"},{text:"Queens",value:"queens"},{text:"Manhattan",value:"manhattan"},{text:"Staten Island",value:"staten island"},{text:"The Bronx",value:"bronx"}],Select=function(e,t){void 0===e&&(e={}),void 0===t&&(t={}),this.data=t,this.settings=e,this.init()};function dataHandler(e,t){if(t){var n=this.$data._chart,r=e.datasets.map(function(e){return e.label}),i=t.datasets.map(function(e){return e.label}),a=JSON.stringify(i);JSON.stringify(r)===a&&t.datasets.length===e.datasets.length?(e.datasets.forEach(function(e,r){var i=Object.keys(t.datasets[r]),a=Object.keys(e),o=i.filter(function(e){return"_meta"!==e&&-1===a.indexOf(e)});for(var s in o.forEach(function(e){delete n.data.datasets[r][e]}),e)e.hasOwnProperty(s)&&(n.data.datasets[r][s]=e[s])}),e.hasOwnProperty("labels")&&(n.data.labels=e.labels,this.$emit("labels:update")),e.hasOwnProperty("xLabels")&&(n.data.xLabels=e.xLabels,this.$emit("xlabels:update")),e.hasOwnProperty("yLabels")&&(n.data.yLabels=e.yLabels,this.$emit("ylabels:update")),n.update(),this.$emit("chart:update")):(n&&(n.destroy(),this.$emit("chart:destroy")),this.renderChart(this.chartData,this.options),this.$emit("chart:render"))}else this.$data._chart&&(this.$data._chart.destroy(),this.$emit("chart:destroy")),this.renderChart(this.chartData,this.options),this.$emit("chart:render")}Select.prototype.init=function(){Vue.component("nyco-select",SelectComponent),new Vue({el:'[data-js="app"]',delimiters:["v{","}"],data:function(){return{options:Select.data,selected:"all"}},methods:{}})},Select.prototype._constants=function(e){console.dir(e)},Select.data=SelectData;var reactiveData={data:function(){return{chartData:null}},watch:{chartData:dataHandler}},reactiveProp={props:{chartData:{required:!0}},watch:{chartData:dataHandler}},mixins={reactiveData:reactiveData,reactiveProp:reactiveProp},helpers={noop:function(){},uid:function(){var e=0;return function(){return e++}}(),isNullOrUndef:function(e){return null===e||void 0===e},isArray:Array.isArray?Array.isArray:function(e){return"[object Array]"===Object.prototype.toString.call(e)},isObject:function(e){return null!==e&&"[object Object]"===Object.prototype.toString.call(e)},valueOrDefault:function(e,t){return void 0===e?t:e},valueAtIndexOrDefault:function(e,t,n){return helpers.valueOrDefault(helpers.isArray(e)?e[t]:e,n)},callback:function(e,t,n){if(e&&"function"==typeof e.call)return e.apply(n,t)},each:function(e,t,n,r){var i,a,o;if(helpers.isArray(e))if(a=e.length,r)for(i=a-1;i>=0;i--)t.call(n,e[i],i);else for(i=0;i<a;i++)t.call(n,e[i],i);else if(helpers.isObject(e))for(a=(o=Object.keys(e)).length,i=0;i<a;i++)t.call(n,e[o[i]],o[i])},arrayEquals:function(e,t){var n,r,i,a;if(!e||!t||e.length!==t.length)return!1;for(n=0,r=e.length;n<r;++n)if(i=e[n],a=t[n],i instanceof Array&&a instanceof Array){if(!helpers.arrayEquals(i,a))return!1}else if(i!==a)return!1;return!0},clone:function(e){if(helpers.isArray(e))return e.map(helpers.clone);if(helpers.isObject(e)){for(var t={},n=Object.keys(e),r=n.length,i=0;i<r;++i)t[n[i]]=helpers.clone(e[n[i]]);return t}return e},_merger:function(e,t,n,r){var i=t[e],a=n[e];helpers.isObject(i)&&helpers.isObject(a)?helpers.merge(i,a,r):t[e]=helpers.clone(a)},_mergerIf:function(e,t,n){var r=t[e],i=n[e];helpers.isObject(r)&&helpers.isObject(i)?helpers.mergeIf(r,i):t.hasOwnProperty(e)||(t[e]=helpers.clone(i))},merge:function(e,t,n){var r,i,a,o,s,l=helpers.isArray(t)?t:[t],c=l.length;if(!helpers.isObject(e))return e;for(r=(n=n||{}).merger||helpers._merger,i=0;i<c;++i)if(t=l[i],helpers.isObject(t))for(s=0,o=(a=Object.keys(t)).length;s<o;++s)r(a[s],e,t,n);return e},mergeIf:function(e,t){return helpers.merge(e,t,{merger:helpers._mergerIf})},extend:function(e){for(var t=arguments,n=function(t,n){e[n]=t},r=1,i=arguments.length;r<i;++r)helpers.each(t[r],n);return e},inherits:function(e){var t=this,n=e&&e.hasOwnProperty("constructor")?e.constructor:function(){return t.apply(this,arguments)},r=function(){this.constructor=n};return r.prototype=t.prototype,n.prototype=new r,n.extend=helpers.inherits,e&&helpers.extend(n.prototype,e),n.__super__=t.prototype,n}},helpers_core=helpers;helpers.callCallback=helpers.callback,helpers.indexOf=function(e,t,n){return Array.prototype.indexOf.call(e,t,n)},helpers.getValueOrDefault=helpers.valueOrDefault,helpers.getValueAtIndexOrDefault=helpers.valueAtIndexOrDefault;var effects={linear:function(e){return e},easeInQuad:function(e){return e*e},easeOutQuad:function(e){return-e*(e-2)},easeInOutQuad:function(e){return(e/=.5)<1?.5*e*e:-.5*(--e*(e-2)-1)},easeInCubic:function(e){return e*e*e},easeOutCubic:function(e){return(e-=1)*e*e+1},easeInOutCubic:function(e){return(e/=.5)<1?.5*e*e*e:.5*((e-=2)*e*e+2)},easeInQuart:function(e){return e*e*e*e},easeOutQuart:function(e){return-((e-=1)*e*e*e-1)},easeInOutQuart:function(e){return(e/=.5)<1?.5*e*e*e*e:-.5*((e-=2)*e*e*e-2)},easeInQuint:function(e){return e*e*e*e*e},easeOutQuint:function(e){return(e-=1)*e*e*e*e+1},easeInOutQuint:function(e){return(e/=.5)<1?.5*e*e*e*e*e:.5*((e-=2)*e*e*e*e+2)},easeInSine:function(e){return 1-Math.cos(e*(Math.PI/2))},easeOutSine:function(e){return Math.sin(e*(Math.PI/2))},easeInOutSine:function(e){return-.5*(Math.cos(Math.PI*e)-1)},easeInExpo:function(e){return 0===e?0:Math.pow(2,10*(e-1))},easeOutExpo:function(e){return 1===e?1:1-Math.pow(2,-10*e)},easeInOutExpo:function(e){return 0===e?0:1===e?1:(e/=.5)<1?.5*Math.pow(2,10*(e-1)):.5*(2-Math.pow(2,-10*--e))},easeInCirc:function(e){return e>=1?e:-(Math.sqrt(1-e*e)-1)},easeOutCirc:function(e){return Math.sqrt(1-(e-=1)*e)},easeInOutCirc:function(e){return(e/=.5)<1?-.5*(Math.sqrt(1-e*e)-1):.5*(Math.sqrt(1-(e-=2)*e)+1)},easeInElastic:function(e){var t=1.70158,n=0,r=1;return 0===e?0:1===e?1:(n||(n=.3),r<1?(r=1,t=n/4):t=n/(2*Math.PI)*Math.asin(1/r),-r*Math.pow(2,10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/n))},easeOutElastic:function(e){var t=1.70158,n=0,r=1;return 0===e?0:1===e?1:(n||(n=.3),r<1?(r=1,t=n/4):t=n/(2*Math.PI)*Math.asin(1/r),r*Math.pow(2,-10*e)*Math.sin((e-t)*(2*Math.PI)/n)+1)},easeInOutElastic:function(e){var t=1.70158,n=0,r=1;return 0===e?0:2==(e/=.5)?1:(n||(n=.45),r<1?(r=1,t=n/4):t=n/(2*Math.PI)*Math.asin(1/r),e<1?r*Math.pow(2,10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/n)*-.5:r*Math.pow(2,-10*(e-=1))*Math.sin((e-t)*(2*Math.PI)/n)*.5+1)},easeInBack:function(e){var t=1.70158;return e*e*((t+1)*e-t)},easeOutBack:function(e){var t=1.70158;return(e-=1)*e*((t+1)*e+t)+1},easeInOutBack:function(e){var t=1.70158;return(e/=.5)<1?e*e*((1+(t*=1.525))*e-t)*.5:.5*((e-=2)*e*((1+(t*=1.525))*e+t)+2)},easeInBounce:function(e){return 1-effects.easeOutBounce(1-e)},easeOutBounce:function(e){return e<1/2.75?7.5625*e*e:e<2/2.75?7.5625*(e-=1.5/2.75)*e+.75:e<2.5/2.75?7.5625*(e-=2.25/2.75)*e+.9375:7.5625*(e-=2.625/2.75)*e+.984375},easeInOutBounce:function(e){return e<.5?.5*effects.easeInBounce(2*e):.5*effects.easeOutBounce(2*e-1)+.5}},helpers_easing={effects:effects};helpers_core.easingEffects=effects;var commonjsGlobal="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:{};function commonjsRequire(){throw new Error("Dynamic requires are not currently supported by rollup-plugin-commonjs")}function createCommonjsModule(e,t){return e(t={exports:{}},t.exports),t.exports}var helpers_canvas=createCommonjsModule(function(e){var t=e.exports={clear:function(e){e.ctx.clearRect(0,0,e.width,e.height)},roundedRect:function(e,t,n,r,i,a){if(a){var o=Math.min(a,i/2-1e-7,r/2-1e-7);e.moveTo(t+o,n),e.lineTo(t+r-o,n),e.arcTo(t+r,n,t+r,n+o,o),e.lineTo(t+r,n+i-o),e.arcTo(t+r,n+i,t+r-o,n+i,o),e.lineTo(t+o,n+i),e.arcTo(t,n+i,t,n+i-o,o),e.lineTo(t,n+o),e.arcTo(t,n,t+o,n,o),e.closePath(),e.moveTo(t,n)}else e.rect(t,n,r,i)},drawPoint:function(e,t,n,r,i,a){var o,s,l,c,u,d;if(a=a||0,!t||"object"!==(void 0===t?"undefined":_typeof(t))||"[object HTMLImageElement]"!==(o=t.toString())&&"[object HTMLCanvasElement]"!==o){if(!(isNaN(n)||n<=0)){switch(e.save(),e.translate(r,i),e.rotate(a*Math.PI/180),e.beginPath(),t){default:e.arc(0,0,n,0,2*Math.PI),e.closePath();break;case"triangle":u=(s=3*n/Math.sqrt(3))*Math.sqrt(3)/2,e.moveTo(-s/2,u/3),e.lineTo(s/2,u/3),e.lineTo(0,-2*u/3),e.closePath();break;case"rect":d=1/Math.SQRT2*n,e.rect(-d,-d,2*d,2*d);break;case"rectRounded":var h=n/Math.SQRT2,f=-h,p=-h,g=Math.SQRT2*n;this.roundedRect(e,f,p,g,g,.425*n);break;case"rectRot":d=1/Math.SQRT2*n,e.moveTo(-d,0),e.lineTo(0,d),e.lineTo(d,0),e.lineTo(0,-d),e.closePath();break;case"cross":e.moveTo(0,n),e.lineTo(0,-n),e.moveTo(-n,0),e.lineTo(n,0);break;case"crossRot":l=Math.cos(Math.PI/4)*n,c=Math.sin(Math.PI/4)*n,e.moveTo(-l,-c),e.lineTo(l,c),e.moveTo(-l,c),e.lineTo(l,-c);break;case"star":e.moveTo(0,n),e.lineTo(0,-n),e.moveTo(-n,0),e.lineTo(n,0),l=Math.cos(Math.PI/4)*n,c=Math.sin(Math.PI/4)*n,e.moveTo(-l,-c),e.lineTo(l,c),e.moveTo(-l,c),e.lineTo(l,-c);break;case"line":e.moveTo(-n,0),e.lineTo(n,0);break;case"dash":e.moveTo(0,0),e.lineTo(n,0)}e.fill(),e.stroke(),e.restore()}}else e.drawImage(t,r-t.width/2,i-t.height/2,t.width,t.height)},clipArea:function(e,t){e.save(),e.beginPath(),e.rect(t.left,t.top,t.right-t.left,t.bottom-t.top),e.clip()},unclipArea:function(e){e.restore()},lineTo:function(e,t,n,r){if(n.steppedLine)return"after"===n.steppedLine&&!r||"after"!==n.steppedLine&&r?e.lineTo(t.x,n.y):e.lineTo(n.x,t.y),void e.lineTo(n.x,n.y);n.tension?e.bezierCurveTo(r?t.controlPointPreviousX:t.controlPointNextX,r?t.controlPointPreviousY:t.controlPointNextY,r?n.controlPointNextX:n.controlPointPreviousX,r?n.controlPointNextY:n.controlPointPreviousY,n.x,n.y):e.lineTo(n.x,n.y)}};helpers_core.clear=t.clear,helpers_core.drawRoundedRectangle=function(e){e.beginPath(),t.roundedRect.apply(t,arguments)}}),helpers_canvas_1=helpers_canvas.clear,helpers_canvas_2=helpers_canvas.roundedRect,helpers_canvas_3=helpers_canvas.drawPoint,helpers_canvas_4=helpers_canvas.clipArea,helpers_canvas_5=helpers_canvas.unclipArea,helpers_canvas_6=helpers_canvas.lineTo,helpers_options={toLineHeight:function(e,t){var n=(""+e).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);if(!n||"normal"===n[1])return 1.2*t;switch(e=+n[2],n[3]){case"px":return e;case"%":e/=100}return t*e},toPadding:function(e){var t,n,r,i;return helpers_core.isObject(e)?(t=+e.top||0,n=+e.right||0,r=+e.bottom||0,i=+e.left||0):t=n=r=i=+e||0,{top:t,right:n,bottom:r,left:i,height:t+r,width:i+n}},resolve:function(e,t,n){var r,i,a;for(r=0,i=e.length;r<i;++r)if(void 0!==(a=e[r])&&(void 0!==t&&"function"==typeof a&&(a=a(t)),void 0!==n&&helpers_core.isArray(a)&&(a=a[n]),void 0!==a))return a}},helpers$1=helpers_core,easing=helpers_easing,canvas=helpers_canvas,options=helpers_options;helpers$1.easing=easing,helpers$1.canvas=canvas,helpers$1.options=options;var core_defaults={_set:function(e,t){return helpers$1.merge(this[e]||(this[e]={}),t)}};core_defaults._set("global",{responsive:!0,responsiveAnimationDuration:0,maintainAspectRatio:!0,events:["mousemove","mouseout","click","touchstart","touchmove"],hover:{onHover:null,mode:"nearest",intersect:!0,animationDuration:400},onClick:null,defaultColor:"rgba(0,0,0,0.1)",defaultFontColor:"#666",defaultFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",defaultFontSize:12,defaultFontStyle:"normal",showLines:!0,elements:{},layout:{padding:{top:0,right:0,bottom:0,left:0}}});var core=function(){var e=function(e,t){return this.construct(e,t),this};return e.Chart=e,e},conversions={rgb2hsl:rgb2hsl,rgb2hsv:rgb2hsv,rgb2hwb:rgb2hwb,rgb2cmyk:rgb2cmyk,rgb2keyword:rgb2keyword,rgb2xyz:rgb2xyz,rgb2lab:rgb2lab,rgb2lch:rgb2lch,hsl2rgb:hsl2rgb,hsl2hsv:hsl2hsv,hsl2hwb:hsl2hwb,hsl2cmyk:hsl2cmyk,hsl2keyword:hsl2keyword,hsv2rgb:hsv2rgb,hsv2hsl:hsv2hsl,hsv2hwb:hsv2hwb,hsv2cmyk:hsv2cmyk,hsv2keyword:hsv2keyword,hwb2rgb:hwb2rgb,hwb2hsl:hwb2hsl,hwb2hsv:hwb2hsv,hwb2cmyk:hwb2cmyk,hwb2keyword:hwb2keyword,cmyk2rgb:cmyk2rgb,cmyk2hsl:cmyk2hsl,cmyk2hsv:cmyk2hsv,cmyk2hwb:cmyk2hwb,cmyk2keyword:cmyk2keyword,keyword2rgb:keyword2rgb,keyword2hsl:keyword2hsl,keyword2hsv:keyword2hsv,keyword2hwb:keyword2hwb,keyword2cmyk:keyword2cmyk,keyword2lab:keyword2lab,keyword2xyz:keyword2xyz,xyz2rgb:xyz2rgb,xyz2lab:xyz2lab,xyz2lch:xyz2lch,lab2xyz:lab2xyz,lab2rgb:lab2rgb,lab2lch:lab2lch,lch2lab:lch2lab,lch2xyz:lch2xyz,lch2rgb:lch2rgb};function rgb2hsl(e){var t,n,r=e[0]/255,i=e[1]/255,a=e[2]/255,o=Math.min(r,i,a),s=Math.max(r,i,a),l=s-o;return s==o?t=0:r==s?t=(i-a)/l:i==s?t=2+(a-r)/l:a==s&&(t=4+(r-i)/l),(t=Math.min(60*t,360))<0&&(t+=360),n=(o+s)/2,[t,100*(s==o?0:n<=.5?l/(s+o):l/(2-s-o)),100*n]}function rgb2hsv(e){var t,n,r=e[0],i=e[1],a=e[2],o=Math.min(r,i,a),s=Math.max(r,i,a),l=s-o;return n=0==s?0:l/s*1e3/10,s==o?t=0:r==s?t=(i-a)/l:i==s?t=2+(a-r)/l:a==s&&(t=4+(r-i)/l),(t=Math.min(60*t,360))<0&&(t+=360),[t,n,s/255*1e3/10]}function rgb2hwb(e){var t=e[0],n=e[1],r=e[2];return[rgb2hsl(e)[0],100*(1/255*Math.min(t,Math.min(n,r))),100*(r=1-1/255*Math.max(t,Math.max(n,r)))]}function rgb2cmyk(e){var t,n=e[0]/255,r=e[1]/255,i=e[2]/255;return[100*((1-n-(t=Math.min(1-n,1-r,1-i)))/(1-t)||0),100*((1-r-t)/(1-t)||0),100*((1-i-t)/(1-t)||0),100*t]}function rgb2keyword(e){return reverseKeywords[JSON.stringify(e)]}function rgb2xyz(e){var t=e[0]/255,n=e[1]/255,r=e[2]/255;return[100*(.4124*(t=t>.04045?Math.pow((t+.055)/1.055,2.4):t/12.92)+.3576*(n=n>.04045?Math.pow((n+.055)/1.055,2.4):n/12.92)+.1805*(r=r>.04045?Math.pow((r+.055)/1.055,2.4):r/12.92)),100*(.2126*t+.7152*n+.0722*r),100*(.0193*t+.1192*n+.9505*r)]}function rgb2lab(e){var t=rgb2xyz(e),n=t[0],r=t[1],i=t[2];return r/=100,i/=108.883,n=(n/=95.047)>.008856?Math.pow(n,1/3):7.787*n+16/116,[116*(r=r>.008856?Math.pow(r,1/3):7.787*r+16/116)-16,500*(n-r),200*(r-(i=i>.008856?Math.pow(i,1/3):7.787*i+16/116))]}function rgb2lch(e){return lab2lch(rgb2lab(e))}function hsl2rgb(e){var t,n,r,i,a,o=e[0]/360,s=e[1]/100,l=e[2]/100;if(0==s)return[a=255*l,a,a];t=2*l-(n=l<.5?l*(1+s):l+s-l*s),i=[0,0,0];for(var c=0;c<3;c++)(r=o+1/3*-(c-1))<0&&r++,r>1&&r--,a=6*r<1?t+6*(n-t)*r:2*r<1?n:3*r<2?t+(n-t)*(2/3-r)*6:t,i[c]=255*a;return i}function hsl2hsv(e){var t=e[0],n=e[1]/100,r=e[2]/100;return 0===r?[0,0,0]:[t,100*(2*(n*=(r*=2)<=1?r:2-r)/(r+n)),100*((r+n)/2)]}function hsl2hwb(e){return rgb2hwb(hsl2rgb(e))}function hsl2cmyk(e){return rgb2cmyk(hsl2rgb(e))}function hsl2keyword(e){return rgb2keyword(hsl2rgb(e))}function hsv2rgb(e){var t=e[0]/60,n=e[1]/100,r=e[2]/100,i=Math.floor(t)%6,a=t-Math.floor(t),o=255*r*(1-n),s=255*r*(1-n*a),l=255*r*(1-n*(1-a));r*=255;switch(i){case 0:return[r,l,o];case 1:return[s,r,o];case 2:return[o,r,l];case 3:return[o,s,r];case 4:return[l,o,r];case 5:return[r,o,s]}}function hsv2hsl(e){var t,n,r=e[0],i=e[1]/100,a=e[2]/100;return t=i*a,[r,100*(t=(t/=(n=(2-i)*a)<=1?n:2-n)||0),100*(n/=2)]}function hsv2hwb(e){return rgb2hwb(hsv2rgb(e))}function hsv2cmyk(e){return rgb2cmyk(hsv2rgb(e))}function hsv2keyword(e){return rgb2keyword(hsv2rgb(e))}function hwb2rgb(e){var t,n,i,a,o=e[0]/360,s=e[1]/100,l=e[2]/100,c=s+l;switch(c>1&&(s/=c,l/=c),n=1-l,i=6*o-(t=Math.floor(6*o)),0!=(1&t)&&(i=1-i),a=s+i*(n-s),t){default:case 6:case 0:r=n,g=a,b=s;break;case 1:r=a,g=n,b=s;break;case 2:r=s,g=n,b=a;break;case 3:r=s,g=a,b=n;break;case 4:r=a,g=s,b=n;break;case 5:r=n,g=s,b=a}return[255*r,255*g,255*b]}function hwb2hsl(e){return rgb2hsl(hwb2rgb(e))}function hwb2hsv(e){return rgb2hsv(hwb2rgb(e))}function hwb2cmyk(e){return rgb2cmyk(hwb2rgb(e))}function hwb2keyword(e){return rgb2keyword(hwb2rgb(e))}function cmyk2rgb(e){var t=e[0]/100,n=e[1]/100,r=e[2]/100,i=e[3]/100;return[255*(1-Math.min(1,t*(1-i)+i)),255*(1-Math.min(1,n*(1-i)+i)),255*(1-Math.min(1,r*(1-i)+i))]}function cmyk2hsl(e){return rgb2hsl(cmyk2rgb(e))}function cmyk2hsv(e){return rgb2hsv(cmyk2rgb(e))}function cmyk2hwb(e){return rgb2hwb(cmyk2rgb(e))}function cmyk2keyword(e){return rgb2keyword(cmyk2rgb(e))}function xyz2rgb(e){var t,n,r,i=e[0]/100,a=e[1]/100,o=e[2]/100;return n=-.9689*i+1.8758*a+.0415*o,r=.0557*i+-.204*a+1.057*o,t=(t=3.2406*i+-1.5372*a+-.4986*o)>.0031308?1.055*Math.pow(t,1/2.4)-.055:t*=12.92,n=n>.0031308?1.055*Math.pow(n,1/2.4)-.055:n*=12.92,r=r>.0031308?1.055*Math.pow(r,1/2.4)-.055:r*=12.92,[255*(t=Math.min(Math.max(0,t),1)),255*(n=Math.min(Math.max(0,n),1)),255*(r=Math.min(Math.max(0,r),1))]}function xyz2lab(e){var t=e[0],n=e[1],r=e[2];return n/=100,r/=108.883,t=(t/=95.047)>.008856?Math.pow(t,1/3):7.787*t+16/116,[116*(n=n>.008856?Math.pow(n,1/3):7.787*n+16/116)-16,500*(t-n),200*(n-(r=r>.008856?Math.pow(r,1/3):7.787*r+16/116))]}function xyz2lch(e){return lab2lch(xyz2lab(e))}function lab2xyz(e){var t,n,r,i,a=e[0],o=e[1],s=e[2];return a<=8?i=(n=100*a/903.3)/100*7.787+16/116:(n=100*Math.pow((a+16)/116,3),i=Math.pow(n/100,1/3)),[t=t/95.047<=.008856?t=95.047*(o/500+i-16/116)/7.787:95.047*Math.pow(o/500+i,3),n,r=r/108.883<=.008859?r=108.883*(i-s/200-16/116)/7.787:108.883*Math.pow(i-s/200,3)]}function lab2lch(e){var t,n=e[0],r=e[1],i=e[2];return(t=360*Math.atan2(i,r)/2/Math.PI)<0&&(t+=360),[n,Math.sqrt(r*r+i*i),t]}function lab2rgb(e){return xyz2rgb(lab2xyz(e))}function lch2lab(e){var t,n=e[0],r=e[1];return t=e[2]/360*2*Math.PI,[n,r*Math.cos(t),r*Math.sin(t)]}function lch2xyz(e){return lab2xyz(lch2lab(e))}function lch2rgb(e){return lab2rgb(lch2lab(e))}function keyword2rgb(e){return cssKeywords[e]}function keyword2hsl(e){return rgb2hsl(keyword2rgb(e))}function keyword2hsv(e){return rgb2hsv(keyword2rgb(e))}function keyword2hwb(e){return rgb2hwb(keyword2rgb(e))}function keyword2cmyk(e){return rgb2cmyk(keyword2rgb(e))}function keyword2lab(e){return rgb2lab(keyword2rgb(e))}function keyword2xyz(e){return rgb2xyz(keyword2rgb(e))}var cssKeywords={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},reverseKeywords={};for(var key in cssKeywords)reverseKeywords[JSON.stringify(cssKeywords[key])]=key;var convert=function(){return new Converter};for(var func in conversions){convert[func+"Raw"]=function(e){return function(t){return"number"==typeof t&&(t=Array.prototype.slice.call(arguments)),conversions[e](t)}}(func);var pair=/(\w+)2(\w+)/.exec(func),from=pair[1],to=pair[2];convert[from]=convert[from]||{},convert[from][to]=convert[func]=function(e){return function(t){"number"==typeof t&&(t=Array.prototype.slice.call(arguments));var n=conversions[e](t);if("string"==typeof n||void 0===n)return n;for(var r=0;r<n.length;r++)n[r]=Math.round(n[r]);return n}}(func)}var Converter=function(){this.convs={}};Converter.prototype.routeSpace=function(e,t){var n=t[0];return void 0===n?this.getValues(e):("number"==typeof n&&(n=Array.prototype.slice.call(t)),this.setValues(e,n))},Converter.prototype.setValues=function(e,t){return this.space=e,this.convs={},this.convs[e]=t,this},Converter.prototype.getValues=function(e){var t=this.convs[e];if(!t){var n=this.space,r=this.convs[n];t=convert[n][e](r),this.convs[e]=t}return t},["rgb","hsl","hsv","cmyk","keyword"].forEach(function(e){Converter.prototype[e]=function(t){return this.routeSpace(e,arguments)}});var colorConvert=convert,colorName={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},colorString={getRgba:getRgba,getHsla:getHsla,getRgb:getRgb,getHsl:getHsl,getHwb:getHwb,getAlpha:getAlpha,hexString:hexString,rgbString:rgbString,rgbaString:rgbaString,percentString:percentString,percentaString:percentaString,hslString:hslString,hslaString:hslaString,hwbString:hwbString,keyword:keyword};function getRgba(e){if(e){var t=[0,0,0],n=1,r=e.match(/^#([a-fA-F0-9]{3,4})$/i),i="";if(r){i=(r=r[1])[3];for(var a=0;a<t.length;a++)t[a]=parseInt(r[a]+r[a],16);i&&(n=Math.round(parseInt(i+i,16)/255*100)/100)}else if(r=e.match(/^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i)){i=r[2],r=r[1];for(a=0;a<t.length;a++)t[a]=parseInt(r.slice(2*a,2*a+2),16);i&&(n=Math.round(parseInt(i,16)/255*100)/100)}else if(r=e.match(/^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)){for(a=0;a<t.length;a++)t[a]=parseInt(r[a+1]);n=parseFloat(r[4])}else if(r=e.match(/^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)){for(a=0;a<t.length;a++)t[a]=Math.round(2.55*parseFloat(r[a+1]));n=parseFloat(r[4])}else if(r=e.match(/(\w+)/)){if("transparent"==r[1])return[0,0,0,0];if(!(t=colorName[r[1]]))return}for(a=0;a<t.length;a++)t[a]=scale(t[a],0,255);return n=n||0==n?scale(n,0,1):1,t[3]=n,t}}function getHsla(e){if(e){var t=e.match(/^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/);if(t){var n=parseFloat(t[4]);return[scale(parseInt(t[1]),0,360),scale(parseFloat(t[2]),0,100),scale(parseFloat(t[3]),0,100),scale(isNaN(n)?1:n,0,1)]}}}function getHwb(e){if(e){var t=e.match(/^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/);if(t){var n=parseFloat(t[4]);return[scale(parseInt(t[1]),0,360),scale(parseFloat(t[2]),0,100),scale(parseFloat(t[3]),0,100),scale(isNaN(n)?1:n,0,1)]}}}function getRgb(e){var t=getRgba(e);return t&&t.slice(0,3)}function getHsl(e){var t=getHsla(e);return t&&t.slice(0,3)}function getAlpha(e){var t=getRgba(e);return t?t[3]:(t=getHsla(e))?t[3]:(t=getHwb(e))?t[3]:void 0}function hexString(e,t){t=void 0!==t&&3===e.length?t:e[3];return"#"+hexDouble(e[0])+hexDouble(e[1])+hexDouble(e[2])+(t>=0&&t<1?hexDouble(Math.round(255*t)):"")}function rgbString(e,t){return t<1||e[3]&&e[3]<1?rgbaString(e,t):"rgb("+e[0]+", "+e[1]+", "+e[2]+")"}function rgbaString(e,t){return void 0===t&&(t=void 0!==e[3]?e[3]:1),"rgba("+e[0]+", "+e[1]+", "+e[2]+", "+t+")"}function percentString(e,t){return t<1||e[3]&&e[3]<1?percentaString(e,t):"rgb("+Math.round(e[0]/255*100)+"%, "+Math.round(e[1]/255*100)+"%, "+Math.round(e[2]/255*100)+"%)"}function percentaString(e,t){return"rgba("+Math.round(e[0]/255*100)+"%, "+Math.round(e[1]/255*100)+"%, "+Math.round(e[2]/255*100)+"%, "+(t||e[3]||1)+")"}function hslString(e,t){return t<1||e[3]&&e[3]<1?hslaString(e,t):"hsl("+e[0]+", "+e[1]+"%, "+e[2]+"%)"}function hslaString(e,t){return void 0===t&&(t=void 0!==e[3]?e[3]:1),"hsla("+e[0]+", "+e[1]+"%, "+e[2]+"%, "+t+")"}function hwbString(e,t){return void 0===t&&(t=void 0!==e[3]?e[3]:1),"hwb("+e[0]+", "+e[1]+"%, "+e[2]+"%"+(void 0!==t&&1!==t?", "+t:"")+")"}function keyword(e){return reverseNames[e.slice(0,3)]}function scale(e,t,n){return Math.min(Math.max(t,e),n)}function hexDouble(e){var t=e.toString(16).toUpperCase();return t.length<2?"0"+t:t}var reverseNames={};for(var name in colorName)reverseNames[colorName[name]]=name;var Color=function e(t){return t instanceof e?t:this instanceof e?(this.valid=!1,this.values={rgb:[0,0,0],hsl:[0,0,0],hsv:[0,0,0],hwb:[0,0,0],cmyk:[0,0,0,0],alpha:1},void("string"==typeof t?(n=colorString.getRgba(t))?this.setValues("rgb",n):(n=colorString.getHsla(t))?this.setValues("hsl",n):(n=colorString.getHwb(t))&&this.setValues("hwb",n):"object"===(void 0===t?"undefined":_typeof(t))&&(void 0!==(n=t).r||void 0!==n.red?this.setValues("rgb",n):void 0!==n.l||void 0!==n.lightness?this.setValues("hsl",n):void 0!==n.v||void 0!==n.value?this.setValues("hsv",n):void 0!==n.w||void 0!==n.whiteness?this.setValues("hwb",n):void 0===n.c&&void 0===n.cyan||this.setValues("cmyk",n)))):new e(t);var n};Color.prototype={isValid:function(){return this.valid},rgb:function(){return this.setSpace("rgb",arguments)},hsl:function(){return this.setSpace("hsl",arguments)},hsv:function(){return this.setSpace("hsv",arguments)},hwb:function(){return this.setSpace("hwb",arguments)},cmyk:function(){return this.setSpace("cmyk",arguments)},rgbArray:function(){return this.values.rgb},hslArray:function(){return this.values.hsl},hsvArray:function(){return this.values.hsv},hwbArray:function(){var e=this.values;return 1!==e.alpha?e.hwb.concat([e.alpha]):e.hwb},cmykArray:function(){return this.values.cmyk},rgbaArray:function(){var e=this.values;return e.rgb.concat([e.alpha])},hslaArray:function(){var e=this.values;return e.hsl.concat([e.alpha])},alpha:function(e){return void 0===e?this.values.alpha:(this.setValues("alpha",e),this)},red:function(e){return this.setChannel("rgb",0,e)},green:function(e){return this.setChannel("rgb",1,e)},blue:function(e){return this.setChannel("rgb",2,e)},hue:function(e){return e&&(e=(e%=360)<0?360+e:e),this.setChannel("hsl",0,e)},saturation:function(e){return this.setChannel("hsl",1,e)},lightness:function(e){return this.setChannel("hsl",2,e)},saturationv:function(e){return this.setChannel("hsv",1,e)},whiteness:function(e){return this.setChannel("hwb",1,e)},blackness:function(e){return this.setChannel("hwb",2,e)},value:function(e){return this.setChannel("hsv",2,e)},cyan:function(e){return this.setChannel("cmyk",0,e)},magenta:function(e){return this.setChannel("cmyk",1,e)},yellow:function(e){return this.setChannel("cmyk",2,e)},black:function(e){return this.setChannel("cmyk",3,e)},hexString:function(){return colorString.hexString(this.values.rgb)},rgbString:function(){return colorString.rgbString(this.values.rgb,this.values.alpha)},rgbaString:function(){return colorString.rgbaString(this.values.rgb,this.values.alpha)},percentString:function(){return colorString.percentString(this.values.rgb,this.values.alpha)},hslString:function(){return colorString.hslString(this.values.hsl,this.values.alpha)},hslaString:function(){return colorString.hslaString(this.values.hsl,this.values.alpha)},hwbString:function(){return colorString.hwbString(this.values.hwb,this.values.alpha)},keyword:function(){return colorString.keyword(this.values.rgb,this.values.alpha)},rgbNumber:function(){var e=this.values.rgb;return e[0]<<16|e[1]<<8|e[2]},luminosity:function(){for(var e=this.values.rgb,t=[],n=0;n<e.length;n++){var r=e[n]/255;t[n]=r<=.03928?r/12.92:Math.pow((r+.055)/1.055,2.4)}return.2126*t[0]+.7152*t[1]+.0722*t[2]},contrast:function(e){var t=this.luminosity(),n=e.luminosity();return t>n?(t+.05)/(n+.05):(n+.05)/(t+.05)},level:function(e){var t=this.contrast(e);return t>=7.1?"AAA":t>=4.5?"AA":""},dark:function(){var e=this.values.rgb;return(299*e[0]+587*e[1]+114*e[2])/1e3<128},light:function(){return!this.dark()},negate:function(){for(var e=[],t=0;t<3;t++)e[t]=255-this.values.rgb[t];return this.setValues("rgb",e),this},lighten:function(e){var t=this.values.hsl;return t[2]+=t[2]*e,this.setValues("hsl",t),this},darken:function(e){var t=this.values.hsl;return t[2]-=t[2]*e,this.setValues("hsl",t),this},saturate:function(e){var t=this.values.hsl;return t[1]+=t[1]*e,this.setValues("hsl",t),this},desaturate:function(e){var t=this.values.hsl;return t[1]-=t[1]*e,this.setValues("hsl",t),this},whiten:function(e){var t=this.values.hwb;return t[1]+=t[1]*e,this.setValues("hwb",t),this},blacken:function(e){var t=this.values.hwb;return t[2]+=t[2]*e,this.setValues("hwb",t),this},greyscale:function(){var e=this.values.rgb,t=.3*e[0]+.59*e[1]+.11*e[2];return this.setValues("rgb",[t,t,t]),this},clearer:function(e){var t=this.values.alpha;return this.setValues("alpha",t-t*e),this},opaquer:function(e){var t=this.values.alpha;return this.setValues("alpha",t+t*e),this},rotate:function(e){var t=this.values.hsl,n=(t[0]+e)%360;return t[0]=n<0?360+n:n,this.setValues("hsl",t),this},mix:function(e,t){var n=e,r=void 0===t?.5:t,i=2*r-1,a=this.alpha()-n.alpha(),o=((i*a==-1?i:(i+a)/(1+i*a))+1)/2,s=1-o;return this.rgb(o*this.red()+s*n.red(),o*this.green()+s*n.green(),o*this.blue()+s*n.blue()).alpha(this.alpha()*r+n.alpha()*(1-r))},toJSON:function(){return this.rgb()},clone:function(){var e,t,n=new Color,r=this.values,i=n.values;for(var a in r)r.hasOwnProperty(a)&&(e=r[a],"[object Array]"===(t={}.toString.call(e))?i[a]=e.slice(0):"[object Number]"===t?i[a]=e:console.error("unexpected color value:",e));return n}},Color.prototype.spaces={rgb:["red","green","blue"],hsl:["hue","saturation","lightness"],hsv:["hue","saturation","value"],hwb:["hue","whiteness","blackness"],cmyk:["cyan","magenta","yellow","black"]},Color.prototype.maxes={rgb:[255,255,255],hsl:[360,100,100],hsv:[360,100,100],hwb:[360,100,100],cmyk:[100,100,100,100]},Color.prototype.getValues=function(e){for(var t=this.values,n={},r=0;r<e.length;r++)n[e.charAt(r)]=t[e][r];return 1!==t.alpha&&(n.a=t.alpha),n},Color.prototype.setValues=function(e,t){var n,r,i=this.values,a=this.spaces,o=this.maxes,s=1;if(this.valid=!0,"alpha"===e)s=t;else if(t.length)i[e]=t.slice(0,e.length),s=t[e.length];else if(void 0!==t[e.charAt(0)]){for(n=0;n<e.length;n++)i[e][n]=t[e.charAt(n)];s=t.a}else if(void 0!==t[a[e][0]]){var l=a[e];for(n=0;n<e.length;n++)i[e][n]=t[l[n]];s=t.alpha}if(i.alpha=Math.max(0,Math.min(1,void 0===s?i.alpha:s)),"alpha"===e)return!1;for(n=0;n<e.length;n++)r=Math.max(0,Math.min(o[e][n],i[e][n])),i[e][n]=Math.round(r);for(var c in a)c!==e&&(i[c]=colorConvert[e][c](i[e]));return!0},Color.prototype.setSpace=function(e,t){var n=t[0];return void 0===n?this.getValues(e):("number"==typeof n&&(n=Array.prototype.slice.call(t)),this.setValues(e,n),this)},Color.prototype.setChannel=function(e,t,n){var r=this.values[e];return void 0===n?r[t]:n===r[t]?this:(r[t]=n,this.setValues(e,r),this)},"undefined"!=typeof window&&(window.Color=Color);var chartjsColor=Color;function filterByPosition(e,t){return helpers$1.where(e,function(e){return e.position===t})}function sortByWeight(e,t){e.forEach(function(e,t){return e._tmpIndex_=t,e}),e.sort(function(e,n){var r=t?n:e,i=t?e:n;return r.weight===i.weight?r._tmpIndex_-i._tmpIndex_:r.weight-i.weight}),e.forEach(function(e){delete e._tmpIndex_})}var core_layouts={defaults:{},addBox:function(e,t){e.boxes||(e.boxes=[]),t.fullWidth=t.fullWidth||!1,t.position=t.position||"top",t.weight=t.weight||0,e.boxes.push(t)},removeBox:function(e,t){var n=e.boxes?e.boxes.indexOf(t):-1;-1!==n&&e.boxes.splice(n,1)},configure:function(e,t,n){for(var r,i=["fullWidth","position","weight"],a=i.length,o=0;o<a;++o)r=i[o],n.hasOwnProperty(r)&&(t[r]=n[r])},update:function(e,t,n){if(e){var r=e.options.layout||{},i=helpers$1.options.toPadding(r.padding),a=i.left,o=i.right,s=i.top,l=i.bottom,c=filterByPosition(e.boxes,"left"),u=filterByPosition(e.boxes,"right"),d=filterByPosition(e.boxes,"top"),h=filterByPosition(e.boxes,"bottom"),f=filterByPosition(e.boxes,"chartArea");sortByWeight(c,!0),sortByWeight(u,!1),sortByWeight(d,!0),sortByWeight(h,!1);var p=t-a-o,g=n-s-l,m=g/2,v=(t-p/2)/(c.length+u.length),y=(n-m)/(d.length+h.length),b=p,_=g,x=[];helpers$1.each(c.concat(u,d,h),function(e){var t,n=e.isHorizontal();n?(t=e.update(e.fullWidth?p:b,y),_-=t.height):(t=e.update(v,_),b-=t.width),x.push({horizontal:n,minSize:t,box:e})});var w=0,k=0,S=0,C=0;helpers$1.each(d.concat(h),function(e){if(e.getPadding){var t=e.getPadding();w=Math.max(w,t.left),k=Math.max(k,t.right)}}),helpers$1.each(c.concat(u),function(e){if(e.getPadding){var t=e.getPadding();S=Math.max(S,t.top),C=Math.max(C,t.bottom)}});var $=a,T=o,A=s,M=l;helpers$1.each(c.concat(u),N),helpers$1.each(c,function(e){$+=e.width}),helpers$1.each(u,function(e){T+=e.width}),helpers$1.each(d.concat(h),N),helpers$1.each(d,function(e){A+=e.height}),helpers$1.each(h,function(e){M+=e.height}),helpers$1.each(c.concat(u),function(e){var t=helpers$1.findNextWhere(x,function(t){return t.box===e}),n={left:0,right:0,top:A,bottom:M};t&&e.update(t.minSize.width,_,n)}),$=a,T=o,A=s,M=l,helpers$1.each(c,function(e){$+=e.width}),helpers$1.each(u,function(e){T+=e.width}),helpers$1.each(d,function(e){A+=e.height}),helpers$1.each(h,function(e){M+=e.height});var D=Math.max(w-$,0);$+=D,T+=Math.max(k-T,0);var O=Math.max(S-A,0);A+=O,M+=Math.max(C-M,0);var P=n-A-M,I=t-$-T;I===b&&P===_||(helpers$1.each(c,function(e){e.height=P}),helpers$1.each(u,function(e){e.height=P}),helpers$1.each(d,function(e){e.fullWidth||(e.width=I)}),helpers$1.each(h,function(e){e.fullWidth||(e.width=I)}),_=P,b=I);var E=a+D,R=s+O;helpers$1.each(c.concat(d),F),E+=b,R+=_,helpers$1.each(u,F),helpers$1.each(h,F),e.chartArea={left:$,top:A,right:$+b,bottom:A+_},helpers$1.each(f,function(t){t.left=e.chartArea.left,t.top=e.chartArea.top,t.right=e.chartArea.right,t.bottom=e.chartArea.bottom,t.update(b,_)})}function N(e){var t=helpers$1.findNextWhere(x,function(t){return t.box===e});if(t)if(e.isHorizontal()){var n={left:Math.max($,w),right:Math.max(T,k),top:0,bottom:0};e.update(e.fullWidth?p:b,g/2,n)}else e.update(t.minSize.width,_)}function F(e){e.isHorizontal()?(e.left=e.fullWidth?a:$,e.right=e.fullWidth?t-o:$+b,e.top=R,e.bottom=R+e.height,R=e.bottom):(e.left=E,e.right=E+e.width,e.top=A,e.bottom=A+_,E=e.right)}}},core_scaleService={constructors:{},defaults:{},registerScaleType:function(e,t,n){this.constructors[e]=t,this.defaults[e]=helpers$1.clone(n)},getScaleConstructor:function(e){return this.constructors.hasOwnProperty(e)?this.constructors[e]:void 0},getScaleDefaults:function(e){return this.defaults.hasOwnProperty(e)?helpers$1.merge({},[core_defaults.scale,this.defaults[e]]):{}},updateScaleDefaults:function(e,t){this.defaults.hasOwnProperty(e)&&(this.defaults[e]=helpers$1.extend(this.defaults[e],t))},addScalesToLayout:function(e){helpers$1.each(e.scales,function(t){t.fullWidth=t.options.fullWidth,t.position=t.options.position,t.weight=t.options.weight,core_layouts.addBox(e,t)})}},core_helpers=function(){function e(e,t,n){var r;return"string"==typeof e?(r=parseInt(e,10),-1!==e.indexOf("%")&&(r=r/100*t.parentNode[n])):r=e,r}function t(e){return void 0!==e&&null!==e&&"none"!==e}function n(n,r,i){var a=document.defaultView,o=helpers$1._getParentNode(n),s=a.getComputedStyle(n)[r],l=a.getComputedStyle(o)[r],c=t(s),u=t(l),d=Number.POSITIVE_INFINITY;return c||u?Math.min(c?e(s,n,i):d,u?e(l,o,i):d):"none"}helpers$1.configMerge=function(){return helpers$1.merge(helpers$1.clone(arguments[0]),[].slice.call(arguments,1),{merger:function(e,t,n,r){var i=t[e]||{},a=n[e];"scales"===e?t[e]=helpers$1.scaleMerge(i,a):"scale"===e?t[e]=helpers$1.merge(i,[core_scaleService.getScaleDefaults(a.type),a]):helpers$1._merger(e,t,n,r)}})},helpers$1.scaleMerge=function(){return helpers$1.merge(helpers$1.clone(arguments[0]),[].slice.call(arguments,1),{merger:function(e,t,n,r){if("xAxes"===e||"yAxes"===e){var i,a,o,s=n[e].length;for(t[e]||(t[e]=[]),i=0;i<s;++i)o=n[e][i],a=helpers$1.valueOrDefault(o.type,"xAxes"===e?"category":"linear"),i>=t[e].length&&t[e].push({}),!t[e][i].type||o.type&&o.type!==t[e][i].type?helpers$1.merge(t[e][i],[core_scaleService.getScaleDefaults(a),o]):helpers$1.merge(t[e][i],o)}else helpers$1._merger(e,t,n,r)}})},helpers$1.where=function(e,t){if(helpers$1.isArray(e)&&Array.prototype.filter)return e.filter(t);var n=[];return helpers$1.each(e,function(e){t(e)&&n.push(e)}),n},helpers$1.findIndex=Array.prototype.findIndex?function(e,t,n){return e.findIndex(t,n)}:function(e,t,n){n=void 0===n?e:n;for(var r=0,i=e.length;r<i;++r)if(t.call(n,e[r],r,e))return r;return-1},helpers$1.findNextWhere=function(e,t,n){helpers$1.isNullOrUndef(n)&&(n=-1);for(var r=n+1;r<e.length;r++){var i=e[r];if(t(i))return i}},helpers$1.findPreviousWhere=function(e,t,n){helpers$1.isNullOrUndef(n)&&(n=e.length);for(var r=n-1;r>=0;r--){var i=e[r];if(t(i))return i}},helpers$1.isNumber=function(e){return!isNaN(parseFloat(e))&&isFinite(e)},helpers$1.almostEquals=function(e,t,n){return Math.abs(e-t)<n},helpers$1.almostWhole=function(e,t){var n=Math.round(e);return n-t<e&&n+t>e},helpers$1.max=function(e){return e.reduce(function(e,t){return isNaN(t)?e:Math.max(e,t)},Number.NEGATIVE_INFINITY)},helpers$1.min=function(e){return e.reduce(function(e,t){return isNaN(t)?e:Math.min(e,t)},Number.POSITIVE_INFINITY)},helpers$1.sign=Math.sign?function(e){return Math.sign(e)}:function(e){return 0===(e=+e)||isNaN(e)?e:e>0?1:-1},helpers$1.log10=Math.log10?function(e){return Math.log10(e)}:function(e){var t=Math.log(e)*Math.LOG10E,n=Math.round(t);return e===Math.pow(10,n)?n:t},helpers$1.toRadians=function(e){return e*(Math.PI/180)},helpers$1.toDegrees=function(e){return e*(180/Math.PI)},helpers$1.getAngleFromPoint=function(e,t){var n=t.x-e.x,r=t.y-e.y,i=Math.sqrt(n*n+r*r),a=Math.atan2(r,n);return a<-.5*Math.PI&&(a+=2*Math.PI),{angle:a,distance:i}},helpers$1.distanceBetweenPoints=function(e,t){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))},helpers$1.aliasPixel=function(e){return e%2==0?0:.5},helpers$1.splineCurve=function(e,t,n,r){var i=e.skip?t:e,a=t,o=n.skip?t:n,s=Math.sqrt(Math.pow(a.x-i.x,2)+Math.pow(a.y-i.y,2)),l=Math.sqrt(Math.pow(o.x-a.x,2)+Math.pow(o.y-a.y,2)),c=s/(s+l),u=l/(s+l),d=r*(c=isNaN(c)?0:c),h=r*(u=isNaN(u)?0:u);return{previous:{x:a.x-d*(o.x-i.x),y:a.y-d*(o.y-i.y)},next:{x:a.x+h*(o.x-i.x),y:a.y+h*(o.y-i.y)}}},helpers$1.EPSILON=Number.EPSILON||1e-14,helpers$1.splineCurveMonotone=function(e){var t,n,r,i,a,o,s,l,c,u=(e||[]).map(function(e){return{model:e._model,deltaK:0,mK:0}}),d=u.length;for(t=0;t<d;++t)if(!(r=u[t]).model.skip){if(n=t>0?u[t-1]:null,(i=t<d-1?u[t+1]:null)&&!i.model.skip){var h=i.model.x-r.model.x;r.deltaK=0!==h?(i.model.y-r.model.y)/h:0}!n||n.model.skip?r.mK=r.deltaK:!i||i.model.skip?r.mK=n.deltaK:this.sign(n.deltaK)!==this.sign(r.deltaK)?r.mK=0:r.mK=(n.deltaK+r.deltaK)/2}for(t=0;t<d-1;++t)r=u[t],i=u[t+1],r.model.skip||i.model.skip||(helpers$1.almostEquals(r.deltaK,0,this.EPSILON)?r.mK=i.mK=0:(a=r.mK/r.deltaK,o=i.mK/r.deltaK,(l=Math.pow(a,2)+Math.pow(o,2))<=9||(s=3/Math.sqrt(l),r.mK=a*s*r.deltaK,i.mK=o*s*r.deltaK)));for(t=0;t<d;++t)(r=u[t]).model.skip||(n=t>0?u[t-1]:null,i=t<d-1?u[t+1]:null,n&&!n.model.skip&&(c=(r.model.x-n.model.x)/3,r.model.controlPointPreviousX=r.model.x-c,r.model.controlPointPreviousY=r.model.y-c*r.mK),i&&!i.model.skip&&(c=(i.model.x-r.model.x)/3,r.model.controlPointNextX=r.model.x+c,r.model.controlPointNextY=r.model.y+c*r.mK))},helpers$1.nextItem=function(e,t,n){return n?t>=e.length-1?e[0]:e[t+1]:t>=e.length-1?e[e.length-1]:e[t+1]},helpers$1.previousItem=function(e,t,n){return n?t<=0?e[e.length-1]:e[t-1]:t<=0?e[0]:e[t-1]},helpers$1.niceNum=function(e,t){var n=Math.floor(helpers$1.log10(e)),r=e/Math.pow(10,n);return(t?r<1.5?1:r<3?2:r<7?5:10:r<=1?1:r<=2?2:r<=5?5:10)*Math.pow(10,n)},helpers$1.requestAnimFrame="undefined"==typeof window?function(e){e()}:window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(e){return window.setTimeout(e,1e3/60)},helpers$1.getRelativePosition=function(e,t){var n,r,i=e.originalEvent||e,a=e.target||e.srcElement,o=a.getBoundingClientRect(),s=i.touches;s&&s.length>0?(n=s[0].clientX,r=s[0].clientY):(n=i.clientX,r=i.clientY);var l=parseFloat(helpers$1.getStyle(a,"padding-left")),c=parseFloat(helpers$1.getStyle(a,"padding-top")),u=parseFloat(helpers$1.getStyle(a,"padding-right")),d=parseFloat(helpers$1.getStyle(a,"padding-bottom")),h=o.right-o.left-l-u,f=o.bottom-o.top-c-d;return{x:n=Math.round((n-o.left-l)/h*a.width/t.currentDevicePixelRatio),y:r=Math.round((r-o.top-c)/f*a.height/t.currentDevicePixelRatio)}},helpers$1.getConstraintWidth=function(e){return n(e,"max-width","clientWidth")},helpers$1.getConstraintHeight=function(e){return n(e,"max-height","clientHeight")},helpers$1._calculatePadding=function(e,t,n){return(t=helpers$1.getStyle(e,t)).indexOf("%")>-1?n/parseInt(t,10):parseInt(t,10)},helpers$1._getParentNode=function(e){var t=e.parentNode;return t&&t.host&&(t=t.host),t},helpers$1.getMaximumWidth=function(e){var t=helpers$1._getParentNode(e);if(!t)return e.clientWidth;var n=t.clientWidth,r=n-helpers$1._calculatePadding(t,"padding-left",n)-helpers$1._calculatePadding(t,"padding-right",n),i=helpers$1.getConstraintWidth(e);return isNaN(i)?r:Math.min(r,i)},helpers$1.getMaximumHeight=function(e){var t=helpers$1._getParentNode(e);if(!t)return e.clientHeight;var n=t.clientHeight,r=n-helpers$1._calculatePadding(t,"padding-top",n)-helpers$1._calculatePadding(t,"padding-bottom",n),i=helpers$1.getConstraintHeight(e);return isNaN(i)?r:Math.min(r,i)},helpers$1.getStyle=function(e,t){return e.currentStyle?e.currentStyle[t]:document.defaultView.getComputedStyle(e,null).getPropertyValue(t)},helpers$1.retinaScale=function(e,t){var n=e.currentDevicePixelRatio=t||"undefined"!=typeof window&&window.devicePixelRatio||1;if(1!==n){var r=e.canvas,i=e.height,a=e.width;r.height=i*n,r.width=a*n,e.ctx.scale(n,n),r.style.height||r.style.width||(r.style.height=i+"px",r.style.width=a+"px")}},helpers$1.fontString=function(e,t,n){return t+" "+e+"px "+n},helpers$1.longestText=function(e,t,n,r){var i=(r=r||{}).data=r.data||{},a=r.garbageCollect=r.garbageCollect||[];r.font!==t&&(i=r.data={},a=r.garbageCollect=[],r.font=t),e.font=t;var o=0;helpers$1.each(n,function(t){void 0!==t&&null!==t&&!0!==helpers$1.isArray(t)?o=helpers$1.measureText(e,i,a,o,t):helpers$1.isArray(t)&&helpers$1.each(t,function(t){void 0===t||null===t||helpers$1.isArray(t)||(o=helpers$1.measureText(e,i,a,o,t))})});var s=a.length/2;if(s>n.length){for(var l=0;l<s;l++)delete i[a[l]];a.splice(0,s)}return o},helpers$1.measureText=function(e,t,n,r,i){var a=t[i];return a||(a=t[i]=e.measureText(i).width,n.push(i)),a>r&&(r=a),r},helpers$1.numberOfLabelLines=function(e){var t=1;return helpers$1.each(e,function(e){helpers$1.isArray(e)&&e.length>t&&(t=e.length)}),t},helpers$1.color=chartjsColor?function(e){return e instanceof CanvasGradient&&(e=core_defaults.global.defaultColor),chartjsColor(e)}:function(e){return console.error("Color.js not found!"),e},helpers$1.getHoverColor=function(e){return e instanceof CanvasPattern?e:helpers$1.color(e).saturate(.5).darken(.1).rgbString()}};function interpolate(e,t,n,r){var i,a,o,s,l,c,u,d,h,f=Object.keys(n);for(i=0,a=f.length;i<a;++i)if(c=n[o=f[i]],t.hasOwnProperty(o)||(t[o]=c),(s=t[o])!==c&&"_"!==o[0]){if(e.hasOwnProperty(o)||(e[o]=s),l=e[o],(u=void 0===c?"undefined":_typeof(c))===(void 0===l?"undefined":_typeof(l)))if("string"===u){if((d=chartjsColor(l)).valid&&(h=chartjsColor(c)).valid){t[o]=h.mix(d,r).rgbString();continue}}else if("number"===u&&isFinite(l)&&isFinite(c)){t[o]=l+(c-l)*r;continue}t[o]=c}}var Element=function(e){helpers$1.extend(this,e),this.initialize.apply(this,arguments)};helpers$1.extend(Element.prototype,{initialize:function(){this.hidden=!1},pivot:function(){var e=this;return e._view||(e._view=helpers$1.clone(e._model)),e._start={},e},transition:function(e){var t=this,n=t._model,r=t._start,i=t._view;return n&&1!==e?(i||(i=t._view={}),r||(r=t._start={}),interpolate(r,i,n,e),t):(t._view=n,t._start=null,t)},tooltipPosition:function(){return{x:this._model.x,y:this._model.y}},hasValue:function(){return helpers$1.isNumber(this._model.x)&&helpers$1.isNumber(this._model.y)}}),Element.extend=helpers$1.inherits;var core_element=Element,core_animation=createCommonjsModule(function(e){var t=e.exports=core_element.extend({chart:null,currentStep:0,numSteps:60,easing:"",render:null,onAnimationProgress:null,onAnimationComplete:null});Object.defineProperty(t.prototype,"animationObject",{get:function(){return this}}),Object.defineProperty(t.prototype,"chartInstance",{get:function(){return this.chart},set:function(e){this.chart=e}})});core_defaults._set("global",{animation:{duration:1e3,easing:"easeOutQuart",onProgress:helpers$1.noop,onComplete:helpers$1.noop}});var core_animations={frameDuration:17,animations:[],dropFrames:0,request:null,addAnimation:function(e,t,n,r){var i,a,o=this.animations;for(t.chart=e,r||(e.animating=!0),i=0,a=o.length;i<a;++i)if(o[i].chart===e)return void(o[i]=t);o.push(t),1===o.length&&this.requestAnimationFrame()},cancelAnimation:function(e){var t=helpers$1.findIndex(this.animations,function(t){return t.chart===e});-1!==t&&(this.animations.splice(t,1),e.animating=!1)},requestAnimationFrame:function(){var e=this;null===e.request&&(e.request=helpers$1.requestAnimFrame.call(window,function(){e.request=null,e.startDigest()}))},startDigest:function(){var e=this,t=Date.now(),n=0;e.dropFrames>1&&(n=Math.floor(e.dropFrames),e.dropFrames=e.dropFrames%1),e.advance(1+n);var r=Date.now();e.dropFrames+=(r-t)/e.frameDuration,e.animations.length>0&&e.requestAnimationFrame()},advance:function(e){for(var t,n,r=this.animations,i=0;i<r.length;)n=(t=r[i]).chart,t.currentStep=(t.currentStep||0)+e,t.currentStep=Math.min(t.currentStep,t.numSteps),helpers$1.callback(t.render,[n,t],n),helpers$1.callback(t.onAnimationProgress,[t],n),t.currentStep>=t.numSteps?(helpers$1.callback(t.onAnimationComplete,[t],n),n.animating=!1,r.splice(i,1)):++i}};core_defaults._set("global",{elements:{arc:{backgroundColor:core_defaults.global.defaultColor,borderColor:"#fff",borderWidth:2}}});var element_arc=core_element.extend({inLabelRange:function(e){var t=this._view;return!!t&&Math.pow(e-t.x,2)<Math.pow(t.radius+t.hoverRadius,2)},inRange:function(e,t){var n=this._view;if(n){for(var r=helpers$1.getAngleFromPoint(n,{x:e,y:t}),i=r.angle,a=r.distance,o=n.startAngle,s=n.endAngle;s<o;)s+=2*Math.PI;for(;i>s;)i-=2*Math.PI;for(;i<o;)i+=2*Math.PI;var l=i>=o&&i<=s,c=a>=n.innerRadius&&a<=n.outerRadius;return l&&c}return!1},getCenterPoint:function(){var e=this._view,t=(e.startAngle+e.endAngle)/2,n=(e.innerRadius+e.outerRadius)/2;return{x:e.x+Math.cos(t)*n,y:e.y+Math.sin(t)*n}},getArea:function(){var e=this._view;return Math.PI*((e.endAngle-e.startAngle)/(2*Math.PI))*(Math.pow(e.outerRadius,2)-Math.pow(e.innerRadius,2))},tooltipPosition:function(){var e=this._view,t=e.startAngle+(e.endAngle-e.startAngle)/2,n=(e.outerRadius-e.innerRadius)/2+e.innerRadius;return{x:e.x+Math.cos(t)*n,y:e.y+Math.sin(t)*n}},draw:function(){var e=this._chart.ctx,t=this._view,n=t.startAngle,r=t.endAngle;e.beginPath(),e.arc(t.x,t.y,t.outerRadius,n,r),e.arc(t.x,t.y,t.innerRadius,r,n,!0),e.closePath(),e.strokeStyle=t.borderColor,e.lineWidth=t.borderWidth,e.fillStyle=t.backgroundColor,e.fill(),e.lineJoin="bevel",t.borderWidth&&e.stroke()}}),globalDefaults=core_defaults.global;core_defaults._set("global",{elements:{line:{tension:.4,backgroundColor:globalDefaults.defaultColor,borderWidth:3,borderColor:globalDefaults.defaultColor,borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",capBezierPoints:!0,fill:!0}}});var element_line=core_element.extend({draw:function(){var e,t,n,r,i=this._view,a=this._chart.ctx,o=i.spanGaps,s=this._children.slice(),l=globalDefaults.elements.line,c=-1;for(this._loop&&s.length&&s.push(s[0]),a.save(),a.lineCap=i.borderCapStyle||l.borderCapStyle,a.setLineDash&&a.setLineDash(i.borderDash||l.borderDash),a.lineDashOffset=i.borderDashOffset||l.borderDashOffset,a.lineJoin=i.borderJoinStyle||l.borderJoinStyle,a.lineWidth=i.borderWidth||l.borderWidth,a.strokeStyle=i.borderColor||globalDefaults.defaultColor,a.beginPath(),c=-1,e=0;e<s.length;++e)t=s[e],n=helpers$1.previousItem(s,e),r=t._view,0===e?r.skip||(a.moveTo(r.x,r.y),c=e):(n=-1===c?n:s[c],r.skip||(c!==e-1&&!o||-1===c?a.moveTo(r.x,r.y):helpers$1.canvas.lineTo(a,n._view,t._view),c=e));a.stroke(),a.restore()}}),defaultColor=core_defaults.global.defaultColor;function xRange(e){var t=this._view;return!!t&&Math.abs(e-t.x)<t.radius+t.hitRadius}function yRange(e){var t=this._view;return!!t&&Math.abs(e-t.y)<t.radius+t.hitRadius}core_defaults._set("global",{elements:{point:{radius:3,pointStyle:"circle",backgroundColor:defaultColor,borderColor:defaultColor,borderWidth:1,hitRadius:1,hoverRadius:4,hoverBorderWidth:1}}});var element_point=core_element.extend({inRange:function(e,t){var n=this._view;return!!n&&Math.pow(e-n.x,2)+Math.pow(t-n.y,2)<Math.pow(n.hitRadius+n.radius,2)},inLabelRange:xRange,inXRange:xRange,inYRange:yRange,getCenterPoint:function(){var e=this._view;return{x:e.x,y:e.y}},getArea:function(){return Math.PI*Math.pow(this._view.radius,2)},tooltipPosition:function(){var e=this._view;return{x:e.x,y:e.y,padding:e.radius+e.borderWidth}},draw:function(e){var t=this._view,n=this._model,r=this._chart.ctx,i=t.pointStyle,a=t.rotation,o=t.radius,s=t.x,l=t.y;t.skip||(void 0===e||n.x>=e.left&&1.01*e.right>=n.x&&n.y>=e.top&&1.01*e.bottom>=n.y)&&(r.strokeStyle=t.borderColor||defaultColor,r.lineWidth=helpers$1.valueOrDefault(t.borderWidth,core_defaults.global.elements.point.borderWidth),r.fillStyle=t.backgroundColor||defaultColor,helpers$1.canvas.drawPoint(r,i,o,s,l,a))}});function isVertical(e){return void 0!==e._view.width}function getBarBounds(e){var t,n,r,i,a=e._view;if(isVertical(e)){var o=a.width/2;t=a.x-o,n=a.x+o,r=Math.min(a.y,a.base),i=Math.max(a.y,a.base)}else{var s=a.height/2;t=Math.min(a.x,a.base),n=Math.max(a.x,a.base),r=a.y-s,i=a.y+s}return{left:t,top:r,right:n,bottom:i}}core_defaults._set("global",{elements:{rectangle:{backgroundColor:core_defaults.global.defaultColor,borderColor:core_defaults.global.defaultColor,borderSkipped:"bottom",borderWidth:0}}});var element_rectangle=core_element.extend({draw:function(){var e,t,n,r,i,a,o,s=this._chart.ctx,l=this._view,c=l.borderWidth;if(l.horizontal?(e=l.base,t=l.x,n=l.y-l.height/2,r=l.y+l.height/2,i=t>e?1:-1,a=1,o=l.borderSkipped||"left"):(e=l.x-l.width/2,t=l.x+l.width/2,n=l.y,i=1,a=(r=l.base)>n?1:-1,o=l.borderSkipped||"bottom"),c){var u=Math.min(Math.abs(e-t),Math.abs(n-r)),d=(c=c>u?u:c)/2,h=e+("left"!==o?d*i:0),f=t+("right"!==o?-d*i:0),p=n+("top"!==o?d*a:0),g=r+("bottom"!==o?-d*a:0);h!==f&&(n=p,r=g),p!==g&&(e=h,t=f)}s.beginPath(),s.fillStyle=l.backgroundColor,s.strokeStyle=l.borderColor,s.lineWidth=c;var m=[[e,r],[e,n],[t,n],[t,r]],v=["bottom","left","top","right"].indexOf(o,0);function y(e){return m[(v+e)%4]}-1===v&&(v=0);var b=y(0);s.moveTo(b[0],b[1]);for(var _=1;_<4;_++)b=y(_),s.lineTo(b[0],b[1]);s.fill(),c&&s.stroke()},height:function(){var e=this._view;return e.base-e.y},inRange:function(e,t){var n=!1;if(this._view){var r=getBarBounds(this);n=e>=r.left&&e<=r.right&&t>=r.top&&t<=r.bottom}return n},inLabelRange:function(e,t){if(!this._view)return!1;var n=getBarBounds(this);return isVertical(this)?e>=n.left&&e<=n.right:t>=n.top&&t<=n.bottom},inXRange:function(e){var t=getBarBounds(this);return e>=t.left&&e<=t.right},inYRange:function(e){var t=getBarBounds(this);return e>=t.top&&e<=t.bottom},getCenterPoint:function(){var e,t,n=this._view;return isVertical(this)?(e=n.x,t=(n.y+n.base)/2):(e=(n.x+n.base)/2,t=n.y),{x:e,y:t}},getArea:function(){var e=this._view;return e.width*Math.abs(e.y-e.base)},tooltipPosition:function(){var e=this._view;return{x:e.x,y:e.y}}}),elements={},Arc=element_arc,Line=element_line,Point=element_point,Rectangle=element_rectangle;function getRelativePosition(e,t){return e.native?{x:e.x,y:e.y}:helpers$1.getRelativePosition(e,t)}function parseVisibleItems(e,t){var n,r,i,a,o;for(r=0,a=e.data.datasets.length;r<a;++r)if(e.isDatasetVisible(r))for(i=0,o=(n=e.getDatasetMeta(r)).data.length;i<o;++i){var s=n.data[i];s._view.skip||t(s)}}function getIntersectItems(e,t){var n=[];return parseVisibleItems(e,function(e){e.inRange(t.x,t.y)&&n.push(e)}),n}function getNearestItems(e,t,n,r){var i=Number.POSITIVE_INFINITY,a=[];return parseVisibleItems(e,function(e){if(!n||e.inRange(t.x,t.y)){var o=e.getCenterPoint(),s=r(t,o);s<i?(a=[e],i=s):s===i&&a.push(e)}}),a}function getDistanceMetricForAxis(e){var t=-1!==e.indexOf("x"),n=-1!==e.indexOf("y");return function(e,r){var i=t?Math.abs(e.x-r.x):0,a=n?Math.abs(e.y-r.y):0;return Math.sqrt(Math.pow(i,2)+Math.pow(a,2))}}function indexMode(e,t,n){var r=getRelativePosition(t,e);n.axis=n.axis||"x";var i=getDistanceMetricForAxis(n.axis),a=n.intersect?getIntersectItems(e,r):getNearestItems(e,r,!1,i),o=[];return a.length?(e.data.datasets.forEach(function(t,n){if(e.isDatasetVisible(n)){var r=e.getDatasetMeta(n).data[a[0]._index];r&&!r._view.skip&&o.push(r)}}),o):[]}elements.Arc=Arc,elements.Line=Line,elements.Point=Point,elements.Rectangle=Rectangle;var core_interaction={modes:{single:function(e,t){var n=getRelativePosition(t,e),r=[];return parseVisibleItems(e,function(e){if(e.inRange(n.x,n.y))return r.push(e),r}),r.slice(0,1)},label:indexMode,index:indexMode,dataset:function(e,t,n){var r=getRelativePosition(t,e);n.axis=n.axis||"xy";var i=getDistanceMetricForAxis(n.axis),a=n.intersect?getIntersectItems(e,r):getNearestItems(e,r,!1,i);return a.length>0&&(a=e.getDatasetMeta(a[0]._datasetIndex).data),a},"x-axis":function(e,t){return indexMode(e,t,{intersect:!1})},point:function(e,t){return getIntersectItems(e,getRelativePosition(t,e))},nearest:function(e,t,n){var r=getRelativePosition(t,e);n.axis=n.axis||"xy";var i=getDistanceMetricForAxis(n.axis),a=getNearestItems(e,r,n.intersect,i);return a.length>1&&a.sort(function(e,t){var n=e.getArea()-t.getArea();return 0===n&&(n=e._datasetIndex-t._datasetIndex),n}),a.slice(0,1)},x:function(e,t,n){var r=getRelativePosition(t,e),i=[],a=!1;return parseVisibleItems(e,function(e){e.inXRange(r.x)&&i.push(e),e.inRange(r.x,r.y)&&(a=!0)}),n.intersect&&!a&&(i=[]),i},y:function(e,t,n){var r=getRelativePosition(t,e),i=[],a=!1;return parseVisibleItems(e,function(e){e.inYRange(r.y)&&i.push(e),e.inRange(r.x,r.y)&&(a=!0)}),n.intersect&&!a&&(i=[]),i}}},platform_basic={acquireContext:function(e){return e&&e.canvas&&(e=e.canvas),e&&e.getContext("2d")||null}},EXPANDO_KEY="$chartjs",CSS_PREFIX="chartjs-",CSS_RENDER_MONITOR=CSS_PREFIX+"render-monitor",CSS_RENDER_ANIMATION=CSS_PREFIX+"render-animation",ANIMATION_START_EVENTS=["animationstart","webkitAnimationStart"],EVENT_TYPES={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"};function readUsedSize(e,t){var n=helpers$1.getStyle(e,t),r=n&&n.match(/^(\d+)(\.\d+)?px$/);return r?Number(r[1]):void 0}function initCanvas(e,t){var n=e.style,r=e.getAttribute("height"),i=e.getAttribute("width");if(e[EXPANDO_KEY]={initial:{height:r,width:i,style:{display:n.display,height:n.height,width:n.width}}},n.display=n.display||"block",null===i||""===i){var a=readUsedSize(e,"width");void 0!==a&&(e.width=a)}if(null===r||""===r)if(""===e.style.height)e.height=e.width/(t.options.aspectRatio||2);else{var o=readUsedSize(e,"height");void 0!==a&&(e.height=o)}return e}var supportsEventListenerOptions=function(){var e=!1;try{var t=Object.defineProperty({},"passive",{get:function(){e=!0}});window.addEventListener("e",null,t)}catch(e){}return e}(),eventListenerOptions=!!supportsEventListenerOptions&&{passive:!0};function _addEventListener(e,t,n){e.addEventListener(t,n,eventListenerOptions)}function _removeEventListener(e,t,n){e.removeEventListener(t,n,eventListenerOptions)}function createEvent(e,t,n,r,i){return{type:e,chart:t,native:i||null,x:void 0!==n?n:null,y:void 0!==r?r:null}}function fromNativeEvent(e,t){var n=EVENT_TYPES[e.type]||e.type,r=helpers$1.getRelativePosition(e,t);return createEvent(n,t,r.x,r.y,e)}function throttled(e,t){var n=!1,r=[];return function(){r=Array.prototype.slice.call(arguments),t=t||this,n||(n=!0,helpers$1.requestAnimFrame.call(window,function(){n=!1,e.apply(t,r)}))}}function createResizer(e){var t=document.createElement("div"),n=CSS_PREFIX+"size-monitor",r="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;pointer-events:none;visibility:hidden;z-index:-1;";t.style.cssText=r,t.className=n,t.innerHTML='<div class="'+n+'-expand" style="'+r+'"><div style="position:absolute;width:1000000px;height:1000000px;left:0;top:0"></div></div><div class="'+n+'-shrink" style="'+r+'"><div style="position:absolute;width:200%;height:200%;left:0; top:0"></div></div>';var i=t.childNodes[0],a=t.childNodes[1];t._reset=function(){i.scrollLeft=1e6,i.scrollTop=1e6,a.scrollLeft=1e6,a.scrollTop=1e6};var o=function(){t._reset(),e()};return _addEventListener(i,"scroll",o.bind(i,"expand")),_addEventListener(a,"scroll",o.bind(a,"shrink")),t}function watchForRender(e,t){var n=e[EXPANDO_KEY]||(e[EXPANDO_KEY]={}),r=n.renderProxy=function(e){e.animationName===CSS_RENDER_ANIMATION&&t()};helpers$1.each(ANIMATION_START_EVENTS,function(t){_addEventListener(e,t,r)}),n.reflow=!!e.offsetParent,e.classList.add(CSS_RENDER_MONITOR)}function unwatchForRender(e){var t=e[EXPANDO_KEY]||{},n=t.renderProxy;n&&(helpers$1.each(ANIMATION_START_EVENTS,function(t){_removeEventListener(e,t,n)}),delete t.renderProxy),e.classList.remove(CSS_RENDER_MONITOR)}function addResizeListener(e,t,n){var r=e[EXPANDO_KEY]||(e[EXPANDO_KEY]={}),i=r.resizer=createResizer(throttled(function(){if(r.resizer)return t(createEvent("resize",n))}));watchForRender(e,function(){if(r.resizer){var t=e.parentNode;t&&t!==i.parentNode&&t.insertBefore(i,t.firstChild),i._reset()}})}function removeResizeListener(e){var t=e[EXPANDO_KEY]||{},n=t.resizer;delete t.resizer,unwatchForRender(e),n&&n.parentNode&&n.parentNode.removeChild(n)}function injectCSS(e,t){var n=e._style||document.createElement("style");e._style||(e._style=n,t="/* Chart.js */\n"+t,n.setAttribute("type","text/css"),document.getElementsByTagName("head")[0].appendChild(n)),n.appendChild(document.createTextNode(t))}var platform_dom={_enabled:"undefined"!=typeof window&&"undefined"!=typeof document,initialize:function(){var e="from{opacity:0.99}to{opacity:1}";injectCSS(this,"@-webkit-keyframes "+CSS_RENDER_ANIMATION+"{"+e+"}@keyframes "+CSS_RENDER_ANIMATION+"{"+e+"}."+CSS_RENDER_MONITOR+"{-webkit-animation:"+CSS_RENDER_ANIMATION+" 0.001s;animation:"+CSS_RENDER_ANIMATION+" 0.001s;}")},acquireContext:function(e,t){"string"==typeof e?e=document.getElementById(e):e.length&&(e=e[0]),e&&e.canvas&&(e=e.canvas);var n=e&&e.getContext&&e.getContext("2d");return n&&n.canvas===e?(initCanvas(e,t),n):null},releaseContext:function(e){var t=e.canvas;if(t[EXPANDO_KEY]){var n=t[EXPANDO_KEY].initial;["height","width"].forEach(function(e){var r=n[e];helpers$1.isNullOrUndef(r)?t.removeAttribute(e):t.setAttribute(e,r)}),helpers$1.each(n.style||{},function(e,n){t.style[n]=e}),t.width=t.width,delete t[EXPANDO_KEY]}},addEventListener:function(e,t,n){var r=e.canvas;if("resize"!==t){var i=n[EXPANDO_KEY]||(n[EXPANDO_KEY]={});_addEventListener(r,t,(i.proxies||(i.proxies={}))[e.id+"_"+t]=function(t){n(fromNativeEvent(t,e))})}else addResizeListener(r,n,e)},removeEventListener:function(e,t,n){var r=e.canvas;if("resize"!==t){var i=((n[EXPANDO_KEY]||{}).proxies||{})[e.id+"_"+t];i&&_removeEventListener(r,t,i)}else removeResizeListener(r,n)}};helpers$1.addEvent=_addEventListener,helpers$1.removeEvent=_removeEventListener;var implementation=platform_dom._enabled?platform_dom:platform_basic,platform=helpers$1.extend({initialize:function(){},acquireContext:function(){},releaseContext:function(){},addEventListener:function(){},removeEventListener:function(){}},implementation);core_defaults._set("global",{plugins:{}});var core_plugins={_plugins:[],_cacheId:0,register:function(e){var t=this._plugins;[].concat(e).forEach(function(e){-1===t.indexOf(e)&&t.push(e)}),this._cacheId++},unregister:function(e){var t=this._plugins;[].concat(e).forEach(function(e){var n=t.indexOf(e);-1!==n&&t.splice(n,1)}),this._cacheId++},clear:function(){this._plugins=[],this._cacheId++},count:function(){return this._plugins.length},getAll:function(){return this._plugins},notify:function(e,t,n){var r,i,a,o,s,l=this.descriptors(e),c=l.length;for(r=0;r<c;++r)if("function"==typeof(s=(a=(i=l[r]).plugin)[t])&&((o=[e].concat(n||[])).push(i.options),!1===s.apply(a,o)))return!1;return!0},descriptors:function(e){var t=e.$plugins||(e.$plugins={});if(t.id===this._cacheId)return t.descriptors;var n=[],r=[],i=e&&e.config||{},a=i.options&&i.options.plugins||{};return this._plugins.concat(i.plugins||[]).forEach(function(e){if(-1===n.indexOf(e)){var t=e.id,i=a[t];!1!==i&&(!0===i&&(i=helpers$1.clone(core_defaults.global.plugins[t])),n.push(e),r.push({plugin:e,options:i||{}}))}}),t.descriptors=r,t.id=this._cacheId,r},_invalidate:function(e){delete e.$plugins}},core_ticks={formatters:{values:function(e){return helpers$1.isArray(e)?e:""+e},linear:function(e,t,n){var r=n.length>3?n[2]-n[1]:n[1]-n[0];Math.abs(r)>1&&e!==Math.floor(e)&&(r=e-Math.floor(e));var i=helpers$1.log10(Math.abs(r)),a="";if(0!==e)if(Math.max(Math.abs(n[0]),Math.abs(n[n.length-1]))<1e-4){var o=helpers$1.log10(Math.abs(e));a=e.toExponential(Math.floor(o)-Math.floor(i))}else{var s=-1*Math.floor(i);s=Math.max(Math.min(s,20),0),a=e.toFixed(s)}else a="0";return a},logarithmic:function(e,t,n){var r=e/Math.pow(10,Math.floor(helpers$1.log10(e)));return 0===e?"0":1===r||2===r||5===r||0===t||t===n.length-1?e.toExponential():""}}};function labelsFromTicks(e){var t,n,r=[];for(t=0,n=e.length;t<n;++t)r.push(e[t].label);return r}function getLineValue(e,t,n){var r=e.getPixelForTick(t);return n&&(r-=0===t?(e.getPixelForTick(1)-r)/2:(r-e.getPixelForTick(t-1))/2),r}function computeTextSize(e,t,n){return helpers$1.isArray(t)?helpers$1.longestText(e,n,t):e.measureText(t).width}function parseFontOptions(e){var t=helpers$1.valueOrDefault,n=core_defaults.global,r=t(e.fontSize,n.defaultFontSize),i=t(e.fontStyle,n.defaultFontStyle),a=t(e.fontFamily,n.defaultFontFamily);return{size:r,style:i,family:a,font:helpers$1.fontString(r,i,a)}}function parseLineHeight(e){return helpers$1.options.toLineHeight(helpers$1.valueOrDefault(e.lineHeight,1.2),helpers$1.valueOrDefault(e.fontSize,core_defaults.global.defaultFontSize))}core_defaults._set("scale",{display:!0,position:"left",offset:!1,gridLines:{display:!0,color:"rgba(0, 0, 0, 0.1)",lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickMarkLength:10,zeroLineWidth:1,zeroLineColor:"rgba(0,0,0,0.25)",zeroLineBorderDash:[],zeroLineBorderDashOffset:0,offsetGridLines:!1,borderDash:[],borderDashOffset:0},scaleLabel:{display:!1,labelString:"",lineHeight:1.2,padding:{top:4,bottom:4}},ticks:{beginAtZero:!1,minRotation:0,maxRotation:50,mirror:!1,padding:0,reverse:!1,display:!0,autoSkip:!0,autoSkipPadding:0,labelOffset:0,callback:core_ticks.formatters.values,minor:{},major:{}}});var core_scale=core_element.extend({getPadding:function(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}},getTicks:function(){return this._ticks},mergeTicksOptions:function(){var e=this.options.ticks;for(var t in!1===e.minor&&(e.minor={display:!1}),!1===e.major&&(e.major={display:!1}),e)"major"!==t&&"minor"!==t&&(void 0===e.minor[t]&&(e.minor[t]=e[t]),void 0===e.major[t]&&(e.major[t]=e[t]))},beforeUpdate:function(){helpers$1.callback(this.options.beforeUpdate,[this])},update:function(e,t,n){var r,i,a,o,s,l,c=this;for(c.beforeUpdate(),c.maxWidth=e,c.maxHeight=t,c.margins=helpers$1.extend({left:0,right:0,top:0,bottom:0},n),c.longestTextCache=c.longestTextCache||{},c.beforeSetDimensions(),c.setDimensions(),c.afterSetDimensions(),c.beforeDataLimits(),c.determineDataLimits(),c.afterDataLimits(),c.beforeBuildTicks(),s=c.buildTicks()||[],c.afterBuildTicks(),c.beforeTickToLabelConversion(),a=c.convertTicksToLabels(s)||c.ticks,c.afterTickToLabelConversion(),c.ticks=a,r=0,i=a.length;r<i;++r)o=a[r],(l=s[r])?l.label=o:s.push(l={label:o,major:!1});return c._ticks=s,c.beforeCalculateTickRotation(),c.calculateTickRotation(),c.afterCalculateTickRotation(),c.beforeFit(),c.fit(),c.afterFit(),c.afterUpdate(),c.minSize},afterUpdate:function(){helpers$1.callback(this.options.afterUpdate,[this])},beforeSetDimensions:function(){helpers$1.callback(this.options.beforeSetDimensions,[this])},setDimensions:function(){var e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=0,e.right=e.width):(e.height=e.maxHeight,e.top=0,e.bottom=e.height),e.paddingLeft=0,e.paddingTop=0,e.paddingRight=0,e.paddingBottom=0},afterSetDimensions:function(){helpers$1.callback(this.options.afterSetDimensions,[this])},beforeDataLimits:function(){helpers$1.callback(this.options.beforeDataLimits,[this])},determineDataLimits:helpers$1.noop,afterDataLimits:function(){helpers$1.callback(this.options.afterDataLimits,[this])},beforeBuildTicks:function(){helpers$1.callback(this.options.beforeBuildTicks,[this])},buildTicks:helpers$1.noop,afterBuildTicks:function(){helpers$1.callback(this.options.afterBuildTicks,[this])},beforeTickToLabelConversion:function(){helpers$1.callback(this.options.beforeTickToLabelConversion,[this])},convertTicksToLabels:function(){var e=this.options.ticks;this.ticks=this.ticks.map(e.userCallback||e.callback,this)},afterTickToLabelConversion:function(){helpers$1.callback(this.options.afterTickToLabelConversion,[this])},beforeCalculateTickRotation:function(){helpers$1.callback(this.options.beforeCalculateTickRotation,[this])},calculateTickRotation:function(){var e=this,t=e.ctx,n=e.options.ticks,r=labelsFromTicks(e._ticks),i=parseFontOptions(n);t.font=i.font;var a=n.minRotation||0;if(r.length&&e.options.display&&e.isHorizontal())for(var o,s=helpers$1.longestText(t,i.font,r,e.longestTextCache),l=s,c=e.getPixelForTick(1)-e.getPixelForTick(0)-6;l>c&&a<n.maxRotation;){var u=helpers$1.toRadians(a);if(o=Math.cos(u),Math.sin(u)*s>e.maxHeight){a--;break}a++,l=o*s}e.labelRotation=a},afterCalculateTickRotation:function(){helpers$1.callback(this.options.afterCalculateTickRotation,[this])},beforeFit:function(){helpers$1.callback(this.options.beforeFit,[this])},fit:function(){var e=this,t=e.minSize={width:0,height:0},n=labelsFromTicks(e._ticks),r=e.options,i=r.ticks,a=r.scaleLabel,o=r.gridLines,s=r.display,l=e.isHorizontal(),c=parseFontOptions(i),u=r.gridLines.tickMarkLength;if(t.width=l?e.isFullWidth()?e.maxWidth-e.margins.left-e.margins.right:e.maxWidth:s&&o.drawTicks?u:0,t.height=l?s&&o.drawTicks?u:0:e.maxHeight,a.display&&s){var d=parseLineHeight(a)+helpers$1.options.toPadding(a.padding).height;l?t.height+=d:t.width+=d}if(i.display&&s){var h=helpers$1.longestText(e.ctx,c.font,n,e.longestTextCache),f=helpers$1.numberOfLabelLines(n),p=.5*c.size,g=e.options.ticks.padding;if(l){e.longestLabelWidth=h;var m=helpers$1.toRadians(e.labelRotation),v=Math.cos(m),y=Math.sin(m)*h+c.size*f+p*(f-1)+p;t.height=Math.min(e.maxHeight,t.height+y+g),e.ctx.font=c.font;var b=computeTextSize(e.ctx,n[0],c.font),_=computeTextSize(e.ctx,n[n.length-1],c.font);0!==e.labelRotation?(e.paddingLeft="bottom"===r.position?v*b+3:v*p+3,e.paddingRight="bottom"===r.position?v*p+3:v*_+3):(e.paddingLeft=b/2+3,e.paddingRight=_/2+3)}else i.mirror?h=0:h+=g+p,t.width=Math.min(e.maxWidth,t.width+h),e.paddingTop=c.size/2,e.paddingBottom=c.size/2}e.handleMargins(),e.width=t.width,e.height=t.height},handleMargins:function(){var e=this;e.margins&&(e.paddingLeft=Math.max(e.paddingLeft-e.margins.left,0),e.paddingTop=Math.max(e.paddingTop-e.margins.top,0),e.paddingRight=Math.max(e.paddingRight-e.margins.right,0),e.paddingBottom=Math.max(e.paddingBottom-e.margins.bottom,0))},afterFit:function(){helpers$1.callback(this.options.afterFit,[this])},isHorizontal:function(){return"top"===this.options.position||"bottom"===this.options.position},isFullWidth:function(){return this.options.fullWidth},getRightValue:function(e){if(helpers$1.isNullOrUndef(e))return NaN;if("number"==typeof e&&!isFinite(e))return NaN;if(e)if(this.isHorizontal()){if(void 0!==e.x)return this.getRightValue(e.x)}else if(void 0!==e.y)return this.getRightValue(e.y);return e},getLabelForIndex:helpers$1.noop,getPixelForValue:helpers$1.noop,getValueForPixel:helpers$1.noop,getPixelForTick:function(e){var t=this,n=t.options.offset;if(t.isHorizontal()){var r=(t.width-(t.paddingLeft+t.paddingRight))/Math.max(t._ticks.length-(n?0:1),1),i=r*e+t.paddingLeft;n&&(i+=r/2);var a=t.left+Math.round(i);return a+=t.isFullWidth()?t.margins.left:0}var o=t.height-(t.paddingTop+t.paddingBottom);return t.top+e*(o/(t._ticks.length-1))},getPixelForDecimal:function(e){var t=this;if(t.isHorizontal()){var n=(t.width-(t.paddingLeft+t.paddingRight))*e+t.paddingLeft,r=t.left+Math.round(n);return r+=t.isFullWidth()?t.margins.left:0}return t.top+e*t.height},getBasePixel:function(){return this.getPixelForValue(this.getBaseValue())},getBaseValue:function(){var e=this.min,t=this.max;return this.beginAtZero?0:e<0&&t<0?t:e>0&&t>0?e:0},_autoSkip:function(e){var t,n,r,i,a=this,o=a.isHorizontal(),s=a.options.ticks.minor,l=e.length,c=helpers$1.toRadians(a.labelRotation),u=Math.cos(c),d=a.longestLabelWidth*u,h=[];for(s.maxTicksLimit&&(i=s.maxTicksLimit),o&&(t=!1,(d+s.autoSkipPadding)*l>a.width-(a.paddingLeft+a.paddingRight)&&(t=1+Math.floor((d+s.autoSkipPadding)*l/(a.width-(a.paddingLeft+a.paddingRight)))),i&&l>i&&(t=Math.max(t,Math.floor(l/i)))),n=0;n<l;n++)r=e[n],(t>1&&n%t>0||n%t==0&&n+t>=l)&&n!==l-1&&delete r.label,h.push(r);return h},draw:function(e){var t=this,n=t.options;if(n.display){var r=t.ctx,i=core_defaults.global,a=n.ticks.minor,o=n.ticks.major||a,s=n.gridLines,l=n.scaleLabel,c=0!==t.labelRotation,u=t.isHorizontal(),d=a.autoSkip?t._autoSkip(t.getTicks()):t.getTicks(),h=helpers$1.valueOrDefault(a.fontColor,i.defaultFontColor),f=parseFontOptions(a),p=helpers$1.valueOrDefault(o.fontColor,i.defaultFontColor),g=parseFontOptions(o),m=s.drawTicks?s.tickMarkLength:0,v=helpers$1.valueOrDefault(l.fontColor,i.defaultFontColor),y=parseFontOptions(l),b=helpers$1.options.toPadding(l.padding),_=helpers$1.toRadians(t.labelRotation),x=[],w=t.options.gridLines.lineWidth,k="right"===n.position?t.left:t.right-w-m,S="right"===n.position?t.left+m:t.right,C="bottom"===n.position?t.top+w:t.bottom-m-w,$="bottom"===n.position?t.top+w+m:t.bottom+w;if(helpers$1.each(d,function(r,o){if(!helpers$1.isNullOrUndef(r.label)){var l,h,f,p,g,v,y,b,T,A,M,D,O,P,I=r.label;o===t.zeroLineIndex&&n.offset===s.offsetGridLines?(l=s.zeroLineWidth,h=s.zeroLineColor,f=s.zeroLineBorderDash,p=s.zeroLineBorderDashOffset):(l=helpers$1.valueAtIndexOrDefault(s.lineWidth,o),h=helpers$1.valueAtIndexOrDefault(s.color,o),f=helpers$1.valueOrDefault(s.borderDash,i.borderDash),p=helpers$1.valueOrDefault(s.borderDashOffset,i.borderDashOffset));var E="middle",R="middle",N=a.padding;if(u){var F=m+N;"bottom"===n.position?(R=c?"middle":"top",E=c?"right":"center",P=t.top+F):(R=c?"middle":"bottom",E=c?"left":"center",P=t.bottom-F);var L=getLineValue(t,o,s.offsetGridLines&&d.length>1);L<t.left&&(h="rgba(0,0,0,0)"),L+=helpers$1.aliasPixel(l),O=t.getPixelForTick(o)+a.labelOffset,g=y=T=M=L,v=C,b=$,A=e.top,D=e.bottom+w}else{var j,V="left"===n.position;a.mirror?(E=V?"left":"right",j=N):(E=V?"right":"left",j=m+N),O=V?t.right-j:t.left+j;var z=getLineValue(t,o,s.offsetGridLines&&d.length>1);z<t.top&&(h="rgba(0,0,0,0)"),z+=helpers$1.aliasPixel(l),P=t.getPixelForTick(o)+a.labelOffset,g=k,y=S,T=e.left,M=e.right+w,v=b=A=D=z}x.push({tx1:g,ty1:v,tx2:y,ty2:b,x1:T,y1:A,x2:M,y2:D,labelX:O,labelY:P,glWidth:l,glColor:h,glBorderDash:f,glBorderDashOffset:p,rotation:-1*_,label:I,major:r.major,textBaseline:R,textAlign:E})}}),helpers$1.each(x,function(e){if(s.display&&(r.save(),r.lineWidth=e.glWidth,r.strokeStyle=e.glColor,r.setLineDash&&(r.setLineDash(e.glBorderDash),r.lineDashOffset=e.glBorderDashOffset),r.beginPath(),s.drawTicks&&(r.moveTo(e.tx1,e.ty1),r.lineTo(e.tx2,e.ty2)),s.drawOnChartArea&&(r.moveTo(e.x1,e.y1),r.lineTo(e.x2,e.y2)),r.stroke(),r.restore()),a.display){r.save(),r.translate(e.labelX,e.labelY),r.rotate(e.rotation),r.font=e.major?g.font:f.font,r.fillStyle=e.major?p:h,r.textBaseline=e.textBaseline,r.textAlign=e.textAlign;var n=e.label;if(helpers$1.isArray(n))for(var i=n.length,o=1.5*f.size,l=t.isHorizontal()?0:-o*(i-1)/2,c=0;c<i;++c)r.fillText(""+n[c],0,l),l+=o;else r.fillText(n,0,0);r.restore()}}),l.display){var T,A,M=0,D=parseLineHeight(l)/2;if(u)T=t.left+(t.right-t.left)/2,A="bottom"===n.position?t.bottom-D-b.bottom:t.top+D+b.top;else{var O="left"===n.position;T=O?t.left+D+b.top:t.right-D-b.top,A=t.top+(t.bottom-t.top)/2,M=O?-.5*Math.PI:.5*Math.PI}r.save(),r.translate(T,A),r.rotate(M),r.textAlign="center",r.textBaseline="middle",r.fillStyle=v,r.font=y.font,r.fillText(l.labelString,0,0),r.restore()}if(s.drawBorder){r.lineWidth=helpers$1.valueAtIndexOrDefault(s.lineWidth,0),r.strokeStyle=helpers$1.valueAtIndexOrDefault(s.color,0);var P=t.left,I=t.right+w,E=t.top,R=t.bottom+w,N=helpers$1.aliasPixel(r.lineWidth);u?(E=R="top"===n.position?t.bottom:t.top,E+=N,R+=N):(P=I="left"===n.position?t.right:t.left,P+=N,I+=N),r.beginPath(),r.moveTo(P,E),r.lineTo(I,R),r.stroke()}}}}),core_tooltip=createCommonjsModule(function(e){core_defaults._set("global",{tooltips:{enabled:!0,custom:null,mode:"nearest",position:"average",intersect:!0,backgroundColor:"rgba(0,0,0,0.8)",titleFontStyle:"bold",titleSpacing:2,titleMarginBottom:6,titleFontColor:"#fff",titleAlign:"left",bodySpacing:2,bodyFontColor:"#fff",bodyAlign:"left",footerFontStyle:"bold",footerSpacing:2,footerMarginTop:6,footerFontColor:"#fff",footerAlign:"left",yPadding:6,xPadding:6,caretPadding:2,caretSize:5,cornerRadius:6,multiKeyBackground:"#fff",displayColors:!0,borderColor:"rgba(0,0,0,0)",borderWidth:0,callbacks:{beforeTitle:helpers$1.noop,title:function(e,t){var n="",r=t.labels,i=r?r.length:0;if(e.length>0){var a=e[0];a.xLabel?n=a.xLabel:i>0&&a.index<i&&(n=r[a.index])}return n},afterTitle:helpers$1.noop,beforeBody:helpers$1.noop,beforeLabel:helpers$1.noop,label:function(e,t){var n=t.datasets[e.datasetIndex].label||"";return n&&(n+=": "),n+=e.yLabel,n},labelColor:function(e,t){var n=t.getDatasetMeta(e.datasetIndex).data[e.index]._view;return{borderColor:n.borderColor,backgroundColor:n.backgroundColor}},labelTextColor:function(){return this._options.bodyFontColor},afterLabel:helpers$1.noop,afterBody:helpers$1.noop,beforeFooter:helpers$1.noop,footer:helpers$1.noop,afterFooter:helpers$1.noop}}});var t={average:function(e){if(!e.length)return!1;var t,n,r=0,i=0,a=0;for(t=0,n=e.length;t<n;++t){var o=e[t];if(o&&o.hasValue()){var s=o.tooltipPosition();r+=s.x,i+=s.y,++a}}return{x:Math.round(r/a),y:Math.round(i/a)}},nearest:function(e,t){var n,r,i,a=t.x,o=t.y,s=Number.POSITIVE_INFINITY;for(n=0,r=e.length;n<r;++n){var l=e[n];if(l&&l.hasValue()){var c=l.getCenterPoint(),u=helpers$1.distanceBetweenPoints(t,c);u<s&&(s=u,i=l)}}if(i){var d=i.tooltipPosition();a=d.x,o=d.y}return{x:a,y:o}}};function n(e,t){var n=helpers$1.color(e);return n.alpha(t*n.alpha()).rgbaString()}function r(e,t){return t&&(helpers$1.isArray(t)?Array.prototype.push.apply(e,t):e.push(t)),e}function i(e){return("string"==typeof e||e instanceof String)&&e.indexOf("\n")>-1?e.split("\n"):e}function a(e){var t=core_defaults.global,n=helpers$1.valueOrDefault;return{xPadding:e.xPadding,yPadding:e.yPadding,xAlign:e.xAlign,yAlign:e.yAlign,bodyFontColor:e.bodyFontColor,_bodyFontFamily:n(e.bodyFontFamily,t.defaultFontFamily),_bodyFontStyle:n(e.bodyFontStyle,t.defaultFontStyle),_bodyAlign:e.bodyAlign,bodyFontSize:n(e.bodyFontSize,t.defaultFontSize),bodySpacing:e.bodySpacing,titleFontColor:e.titleFontColor,_titleFontFamily:n(e.titleFontFamily,t.defaultFontFamily),_titleFontStyle:n(e.titleFontStyle,t.defaultFontStyle),titleFontSize:n(e.titleFontSize,t.defaultFontSize),_titleAlign:e.titleAlign,titleSpacing:e.titleSpacing,titleMarginBottom:e.titleMarginBottom,footerFontColor:e.footerFontColor,_footerFontFamily:n(e.footerFontFamily,t.defaultFontFamily),_footerFontStyle:n(e.footerFontStyle,t.defaultFontStyle),footerFontSize:n(e.footerFontSize,t.defaultFontSize),_footerAlign:e.footerAlign,footerSpacing:e.footerSpacing,footerMarginTop:e.footerMarginTop,caretSize:e.caretSize,cornerRadius:e.cornerRadius,backgroundColor:e.backgroundColor,opacity:0,legendColorBackground:e.multiKeyBackground,displayColors:e.displayColors,borderColor:e.borderColor,borderWidth:e.borderWidth}}function o(e){return r([],i(e))}(e.exports=core_element.extend({initialize:function(){this._model=a(this._options),this._lastActive=[]},getTitle:function(){var e=this._options.callbacks,t=e.beforeTitle.apply(this,arguments),n=e.title.apply(this,arguments),a=e.afterTitle.apply(this,arguments),o=[];return o=r(o=r(o=r(o,i(t)),i(n)),i(a))},getBeforeBody:function(){return o(this._options.callbacks.beforeBody.apply(this,arguments))},getBody:function(e,t){var n=this,a=n._options.callbacks,o=[];return helpers$1.each(e,function(e){var s={before:[],lines:[],after:[]};r(s.before,i(a.beforeLabel.call(n,e,t))),r(s.lines,a.label.call(n,e,t)),r(s.after,i(a.afterLabel.call(n,e,t))),o.push(s)}),o},getAfterBody:function(){return o(this._options.callbacks.afterBody.apply(this,arguments))},getFooter:function(){var e=this._options.callbacks,t=e.beforeFooter.apply(this,arguments),n=e.footer.apply(this,arguments),a=e.afterFooter.apply(this,arguments),o=[];return o=r(o=r(o=r(o,i(t)),i(n)),i(a))},update:function(e){var n,r,i,o,s,l,c,u=this,d=u._options,h=u._model,f=u._model=a(d),p=u._active,g=u._data,m={xAlign:h.xAlign,yAlign:h.yAlign},v={x:h.x,y:h.y},y={width:h.width,height:h.height},b={x:h.caretX,y:h.caretY};if(p.length){f.opacity=1;var _=[],x=[];b=t[d.position].call(u,p,u._eventPosition);var w=[];for(n=0,r=p.length;n<r;++n)w.push((i=p[n],o=void 0,s=void 0,void 0,void 0,o=i._xScale,s=i._yScale||i._scale,l=i._index,c=i._datasetIndex,{xLabel:o?o.getLabelForIndex(l,c):"",yLabel:s?s.getLabelForIndex(l,c):"",index:l,datasetIndex:c,x:i._model.x,y:i._model.y}));d.filter&&(w=w.filter(function(e){return d.filter(e,g)})),d.itemSort&&(w=w.sort(function(e,t){return d.itemSort(e,t,g)})),helpers$1.each(w,function(e){_.push(d.callbacks.labelColor.call(u,e,u._chart)),x.push(d.callbacks.labelTextColor.call(u,e,u._chart))}),f.title=u.getTitle(w,g),f.beforeBody=u.getBeforeBody(w,g),f.body=u.getBody(w,g),f.afterBody=u.getAfterBody(w,g),f.footer=u.getFooter(w,g),f.x=Math.round(b.x),f.y=Math.round(b.y),f.caretPadding=d.caretPadding,f.labelColors=_,f.labelTextColors=x,f.dataPoints=w,v=function(e,t,n,r){var i=e.x,a=e.y,o=e.caretSize,s=e.caretPadding,l=e.cornerRadius,c=n.xAlign,u=n.yAlign,d=o+s,h=l+s;return"right"===c?i-=t.width:"center"===c&&((i-=t.width/2)+t.width>r.width&&(i=r.width-t.width),i<0&&(i=0)),"top"===u?a+=d:a-="bottom"===u?t.height+d:t.height/2,"center"===u?"left"===c?i+=d:"right"===c&&(i-=d):"left"===c?i-=h:"right"===c&&(i+=h),{x:i,y:a}}(f,y=function(e,t){var n=e._chart.ctx,r=2*t.yPadding,i=0,a=t.body,o=a.reduce(function(e,t){return e+t.before.length+t.lines.length+t.after.length},0);o+=t.beforeBody.length+t.afterBody.length;var s=t.title.length,l=t.footer.length,c=t.titleFontSize,u=t.bodyFontSize,d=t.footerFontSize;r+=s*c,r+=s?(s-1)*t.titleSpacing:0,r+=s?t.titleMarginBottom:0,r+=o*u,r+=o?(o-1)*t.bodySpacing:0,r+=l?t.footerMarginTop:0,r+=l*d,r+=l?(l-1)*t.footerSpacing:0;var h=0,f=function(e){i=Math.max(i,n.measureText(e).width+h)};return n.font=helpers$1.fontString(c,t._titleFontStyle,t._titleFontFamily),helpers$1.each(t.title,f),n.font=helpers$1.fontString(u,t._bodyFontStyle,t._bodyFontFamily),helpers$1.each(t.beforeBody.concat(t.afterBody),f),h=t.displayColors?u+2:0,helpers$1.each(a,function(e){helpers$1.each(e.before,f),helpers$1.each(e.lines,f),helpers$1.each(e.after,f)}),h=0,n.font=helpers$1.fontString(d,t._footerFontStyle,t._footerFontFamily),helpers$1.each(t.footer,f),{width:i+=2*t.xPadding,height:r}}(this,f),m=function(e,t){var n,r,i,a,o,s=e._model,l=e._chart,c=e._chart.chartArea,u="center",d="center";s.y<t.height?d="top":s.y>l.height-t.height&&(d="bottom");var h=(c.left+c.right)/2,f=(c.top+c.bottom)/2;"center"===d?(n=function(e){return e<=h},r=function(e){return e>h}):(n=function(e){return e<=t.width/2},r=function(e){return e>=l.width-t.width/2}),i=function(e){return e+t.width+s.caretSize+s.caretPadding>l.width},a=function(e){return e-t.width-s.caretSize-s.caretPadding<0},o=function(e){return e<=f?"top":"bottom"},n(s.x)?(u="left",i(s.x)&&(u="center",d=o(s.y))):r(s.x)&&(u="right",a(s.x)&&(u="center",d=o(s.y)));var p=e._options;return{xAlign:p.xAlign?p.xAlign:u,yAlign:p.yAlign?p.yAlign:d}}(this,y),u._chart)}else f.opacity=0;return f.xAlign=m.xAlign,f.yAlign=m.yAlign,f.x=v.x,f.y=v.y,f.width=y.width,f.height=y.height,f.caretX=b.x,f.caretY=b.y,u._model=f,e&&d.custom&&d.custom.call(u,f),u},drawCaret:function(e,t){var n=this._chart.ctx,r=this._view,i=this.getCaretPosition(e,t,r);n.lineTo(i.x1,i.y1),n.lineTo(i.x2,i.y2),n.lineTo(i.x3,i.y3)},getCaretPosition:function(e,t,n){var r,i,a,o,s,l,c=n.caretSize,u=n.cornerRadius,d=n.xAlign,h=n.yAlign,f=e.x,p=e.y,g=t.width,m=t.height;if("center"===h)s=p+m/2,"left"===d?(i=(r=f)-c,a=r,o=s+c,l=s-c):(i=(r=f+g)+c,a=r,o=s-c,l=s+c);else if("left"===d?(r=(i=f+u+c)-c,a=i+c):"right"===d?(r=(i=f+g-u-c)-c,a=i+c):(r=(i=n.caretX)-c,a=i+c),"top"===h)s=(o=p)-c,l=o;else{s=(o=p+m)+c,l=o;var v=a;a=r,r=v}return{x1:r,x2:i,x3:a,y1:o,y2:s,y3:l}},drawTitle:function(e,t,r,i){var a=t.title;if(a.length){r.textAlign=t._titleAlign,r.textBaseline="top";var o,s,l=t.titleFontSize,c=t.titleSpacing;for(r.fillStyle=n(t.titleFontColor,i),r.font=helpers$1.fontString(l,t._titleFontStyle,t._titleFontFamily),o=0,s=a.length;o<s;++o)r.fillText(a[o],e.x,e.y),e.y+=l+c,o+1===a.length&&(e.y+=t.titleMarginBottom-c)}},drawBody:function(e,t,r,i){var a=t.bodyFontSize,o=t.bodySpacing,s=t.body;r.textAlign=t._bodyAlign,r.textBaseline="top",r.font=helpers$1.fontString(a,t._bodyFontStyle,t._bodyFontFamily);var l=0,c=function(t){r.fillText(t,e.x+l,e.y),e.y+=a+o};r.fillStyle=n(t.bodyFontColor,i),helpers$1.each(t.beforeBody,c);var u=t.displayColors;l=u?a+2:0,helpers$1.each(s,function(o,s){var l=n(t.labelTextColors[s],i);r.fillStyle=l,helpers$1.each(o.before,c),helpers$1.each(o.lines,function(o){u&&(r.fillStyle=n(t.legendColorBackground,i),r.fillRect(e.x,e.y,a,a),r.lineWidth=1,r.strokeStyle=n(t.labelColors[s].borderColor,i),r.strokeRect(e.x,e.y,a,a),r.fillStyle=n(t.labelColors[s].backgroundColor,i),r.fillRect(e.x+1,e.y+1,a-2,a-2),r.fillStyle=l),c(o)}),helpers$1.each(o.after,c)}),l=0,helpers$1.each(t.afterBody,c),e.y-=o},drawFooter:function(e,t,r,i){var a=t.footer;a.length&&(e.y+=t.footerMarginTop,r.textAlign=t._footerAlign,r.textBaseline="top",r.fillStyle=n(t.footerFontColor,i),r.font=helpers$1.fontString(t.footerFontSize,t._footerFontStyle,t._footerFontFamily),helpers$1.each(a,function(n){r.fillText(n,e.x,e.y),e.y+=t.footerFontSize+t.footerSpacing}))},drawBackground:function(e,t,r,i,a){r.fillStyle=n(t.backgroundColor,a),r.strokeStyle=n(t.borderColor,a),r.lineWidth=t.borderWidth;var o=t.xAlign,s=t.yAlign,l=e.x,c=e.y,u=i.width,d=i.height,h=t.cornerRadius;r.beginPath(),r.moveTo(l+h,c),"top"===s&&this.drawCaret(e,i),r.lineTo(l+u-h,c),r.quadraticCurveTo(l+u,c,l+u,c+h),"center"===s&&"right"===o&&this.drawCaret(e,i),r.lineTo(l+u,c+d-h),r.quadraticCurveTo(l+u,c+d,l+u-h,c+d),"bottom"===s&&this.drawCaret(e,i),r.lineTo(l+h,c+d),r.quadraticCurveTo(l,c+d,l,c+d-h),"center"===s&&"left"===o&&this.drawCaret(e,i),r.lineTo(l,c+h),r.quadraticCurveTo(l,c,l+h,c),r.closePath(),r.fill(),t.borderWidth>0&&r.stroke()},draw:function(){var e=this._chart.ctx,t=this._view;if(0!==t.opacity){var n={width:t.width,height:t.height},r={x:t.x,y:t.y},i=Math.abs(t.opacity<.001)?0:t.opacity,a=t.title.length||t.beforeBody.length||t.body.length||t.afterBody.length||t.footer.length;this._options.enabled&&a&&(this.drawBackground(r,t,e,n,i),r.x+=t.xPadding,r.y+=t.yPadding,this.drawTitle(r,t,e,i),this.drawBody(r,t,e,i),this.drawFooter(r,t,e,i))}},handleEvent:function(e){var t,n=this,r=n._options;return n._lastActive=n._lastActive||[],"mouseout"===e.type?n._active=[]:n._active=n._chart.getElementsAtEventForMode(e,r.mode,r),(t=!helpers$1.arrayEquals(n._active,n._lastActive))&&(n._lastActive=n._active,(r.enabled||r.custom)&&(n._eventPosition={x:e.x,y:e.y},n.update(!0),n.pivot())),t}})).positioners=t}),core_controller=function(e){function t(e){return"top"===e||"bottom"===e}e.types={},e.instances={},e.controllers={},helpers$1.extend(e.prototype,{construct:function(t,n){var r=this;n=function(e){var t=(e=e||{}).data=e.data||{};return t.datasets=t.datasets||[],t.labels=t.labels||[],e.options=helpers$1.configMerge(core_defaults.global,core_defaults[e.type],e.options||{}),e}(n);var i=platform.acquireContext(t,n),a=i&&i.canvas,o=a&&a.height,s=a&&a.width;r.id=helpers$1.uid(),r.ctx=i,r.canvas=a,r.config=n,r.width=s,r.height=o,r.aspectRatio=o?s/o:null,r.options=n.options,r._bufferedRender=!1,r.chart=r,r.controller=r,e.instances[r.id]=r,Object.defineProperty(r,"data",{get:function(){return r.config.data},set:function(e){r.config.data=e}}),i&&a?(r.initialize(),r.update()):console.error("Failed to create chart: can't acquire context from the given item")},initialize:function(){var e=this;return core_plugins.notify(e,"beforeInit"),helpers$1.retinaScale(e,e.options.devicePixelRatio),e.bindEvents(),e.options.responsive&&e.resize(!0),e.ensureScalesHaveIDs(),e.buildOrUpdateScales(),e.initToolTip(),core_plugins.notify(e,"afterInit"),e},clear:function(){return helpers$1.canvas.clear(this),this},stop:function(){return core_animations.cancelAnimation(this),this},resize:function(e){var t=this,n=t.options,r=t.canvas,i=n.maintainAspectRatio&&t.aspectRatio||null,a=Math.max(0,Math.floor(helpers$1.getMaximumWidth(r))),o=Math.max(0,Math.floor(i?a/i:helpers$1.getMaximumHeight(r)));if((t.width!==a||t.height!==o)&&(r.width=t.width=a,r.height=t.height=o,r.style.width=a+"px",r.style.height=o+"px",helpers$1.retinaScale(t,n.devicePixelRatio),!e)){var s={width:a,height:o};core_plugins.notify(t,"resize",[s]),t.options.onResize&&t.options.onResize(t,s),t.stop(),t.update({duration:t.options.responsiveAnimationDuration})}},ensureScalesHaveIDs:function(){var e=this.options,t=e.scales||{},n=e.scale;helpers$1.each(t.xAxes,function(e,t){e.id=e.id||"x-axis-"+t}),helpers$1.each(t.yAxes,function(e,t){e.id=e.id||"y-axis-"+t}),n&&(n.id=n.id||"scale")},buildOrUpdateScales:function(){var e=this,n=e.options,r=e.scales||{},i=[],a=Object.keys(r).reduce(function(e,t){return e[t]=!1,e},{});n.scales&&(i=i.concat((n.scales.xAxes||[]).map(function(e){return{options:e,dtype:"category",dposition:"bottom"}}),(n.scales.yAxes||[]).map(function(e){return{options:e,dtype:"linear",dposition:"left"}}))),n.scale&&i.push({options:n.scale,dtype:"radialLinear",isDefault:!0,dposition:"chartArea"}),helpers$1.each(i,function(n){var i=n.options,o=i.id,s=helpers$1.valueOrDefault(i.type,n.dtype);t(i.position)!==t(n.dposition)&&(i.position=n.dposition),a[o]=!0;var l=null;if(o in r&&r[o].type===s)(l=r[o]).options=i,l.ctx=e.ctx,l.chart=e;else{var c=core_scaleService.getScaleConstructor(s);if(!c)return;l=new c({id:o,type:s,options:i,ctx:e.ctx,chart:e}),r[l.id]=l}l.mergeTicksOptions(),n.isDefault&&(e.scale=l)}),helpers$1.each(a,function(e,t){e||delete r[t]}),e.scales=r,core_scaleService.addScalesToLayout(this)},buildOrUpdateControllers:function(){var t=this,n=[],r=[];return helpers$1.each(t.data.datasets,function(i,a){var o=t.getDatasetMeta(a),s=i.type||t.config.type;if(o.type&&o.type!==s&&(t.destroyDatasetMeta(a),o=t.getDatasetMeta(a)),o.type=s,n.push(o.type),o.controller)o.controller.updateIndex(a),o.controller.linkScales();else{var l=e.controllers[o.type];if(void 0===l)throw new Error('"'+o.type+'" is not a chart type.');o.controller=new l(t,a),r.push(o.controller)}},t),r},resetElements:function(){var e=this;helpers$1.each(e.data.datasets,function(t,n){e.getDatasetMeta(n).controller.reset()},e)},reset:function(){this.resetElements(),this.tooltip.initialize()},update:function(t){var n,r,i=this;if(t&&"object"===(void 0===t?"undefined":_typeof(t))||(t={duration:t,lazy:arguments[1]}),r=(n=i).options,helpers$1.each(n.scales,function(e){core_layouts.removeBox(n,e)}),r=helpers$1.configMerge(e.defaults.global,e.defaults[n.config.type],r),n.options=n.config.options=r,n.ensureScalesHaveIDs(),n.buildOrUpdateScales(),n.tooltip._options=r.tooltips,n.tooltip.initialize(),core_plugins._invalidate(i),!1!==core_plugins.notify(i,"beforeUpdate")){i.tooltip._data=i.data;var a=i.buildOrUpdateControllers();helpers$1.each(i.data.datasets,function(e,t){i.getDatasetMeta(t).controller.buildOrUpdateElements()},i),i.updateLayout(),i.options.animation&&i.options.animation.duration&&helpers$1.each(a,function(e){e.reset()}),i.updateDatasets(),i.tooltip.initialize(),i.lastActive=[],core_plugins.notify(i,"afterUpdate"),i._bufferedRender?i._bufferedRequest={duration:t.duration,easing:t.easing,lazy:t.lazy}:i.render(t)}},updateLayout:function(){!1!==core_plugins.notify(this,"beforeLayout")&&(core_layouts.update(this,this.width,this.height),core_plugins.notify(this,"afterScaleUpdate"),core_plugins.notify(this,"afterLayout"))},updateDatasets:function(){if(!1!==core_plugins.notify(this,"beforeDatasetsUpdate")){for(var e=0,t=this.data.datasets.length;e<t;++e)this.updateDataset(e);core_plugins.notify(this,"afterDatasetsUpdate")}},updateDataset:function(e){var t=this.getDatasetMeta(e),n={meta:t,index:e};!1!==core_plugins.notify(this,"beforeDatasetUpdate",[n])&&(t.controller.update(),core_plugins.notify(this,"afterDatasetUpdate",[n]))},render:function(e){var t=this;e&&"object"===(void 0===e?"undefined":_typeof(e))||(e={duration:e,lazy:arguments[1]});var n=e.duration,r=e.lazy;if(!1!==core_plugins.notify(t,"beforeRender")){var i=t.options.animation,a=function(e){core_plugins.notify(t,"afterRender"),helpers$1.callback(i&&i.onComplete,[e],t)};if(i&&(void 0!==n&&0!==n||void 0===n&&0!==i.duration)){var o=new core_animation({numSteps:(n||i.duration)/16.66,easing:e.easing||i.easing,render:function(e,t){var n=helpers$1.easing.effects[t.easing],r=t.currentStep,i=r/t.numSteps;e.draw(n(i),i,r)},onAnimationProgress:i.onProgress,onAnimationComplete:a});core_animations.addAnimation(t,o,n,r)}else t.draw(),a(new core_animation({numSteps:0,chart:t}));return t}},draw:function(e){var t=this;t.clear(),helpers$1.isNullOrUndef(e)&&(e=1),t.transition(e),t.width<=0||t.height<=0||!1!==core_plugins.notify(t,"beforeDraw",[e])&&(helpers$1.each(t.boxes,function(e){e.draw(t.chartArea)},t),t.scale&&t.scale.draw(),t.drawDatasets(e),t._drawTooltip(e),core_plugins.notify(t,"afterDraw",[e]))},transition:function(e){for(var t=0,n=(this.data.datasets||[]).length;t<n;++t)this.isDatasetVisible(t)&&this.getDatasetMeta(t).controller.transition(e);this.tooltip.transition(e)},drawDatasets:function(e){var t=this;if(!1!==core_plugins.notify(t,"beforeDatasetsDraw",[e])){for(var n=(t.data.datasets||[]).length-1;n>=0;--n)t.isDatasetVisible(n)&&t.drawDataset(n,e);core_plugins.notify(t,"afterDatasetsDraw",[e])}},drawDataset:function(e,t){var n=this.getDatasetMeta(e),r={meta:n,index:e,easingValue:t};!1!==core_plugins.notify(this,"beforeDatasetDraw",[r])&&(n.controller.draw(t),core_plugins.notify(this,"afterDatasetDraw",[r]))},_drawTooltip:function(e){var t=this.tooltip,n={tooltip:t,easingValue:e};!1!==core_plugins.notify(this,"beforeTooltipDraw",[n])&&(t.draw(),core_plugins.notify(this,"afterTooltipDraw",[n]))},getElementAtEvent:function(e){return core_interaction.modes.single(this,e)},getElementsAtEvent:function(e){return core_interaction.modes.label(this,e,{intersect:!0})},getElementsAtXAxis:function(e){return core_interaction.modes["x-axis"](this,e,{intersect:!0})},getElementsAtEventForMode:function(e,t,n){var r=core_interaction.modes[t];return"function"==typeof r?r(this,e,n):[]},getDatasetAtEvent:function(e){return core_interaction.modes.dataset(this,e,{intersect:!0})},getDatasetMeta:function(e){var t=this.data.datasets[e];t._meta||(t._meta={});var n=t._meta[this.id];return n||(n=t._meta[this.id]={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null}),n},getVisibleDatasetCount:function(){for(var e=0,t=0,n=this.data.datasets.length;t<n;++t)this.isDatasetVisible(t)&&e++;return e},isDatasetVisible:function(e){var t=this.getDatasetMeta(e);return"boolean"==typeof t.hidden?!t.hidden:!this.data.datasets[e].hidden},generateLegend:function(){return this.options.legendCallback(this)},destroyDatasetMeta:function(e){var t=this.id,n=this.data.datasets[e],r=n._meta&&n._meta[t];r&&(r.controller.destroy(),delete n._meta[t])},destroy:function(){var t,n,r=this,i=r.canvas;for(r.stop(),t=0,n=r.data.datasets.length;t<n;++t)r.destroyDatasetMeta(t);i&&(r.unbindEvents(),helpers$1.canvas.clear(r),platform.releaseContext(r.ctx),r.canvas=null,r.ctx=null),core_plugins.notify(r,"destroy"),delete e.instances[r.id]},toBase64Image:function(){return this.canvas.toDataURL.apply(this.canvas,arguments)},initToolTip:function(){var e=this;e.tooltip=new core_tooltip({_chart:e,_chartInstance:e,_data:e.data,_options:e.options.tooltips},e)},bindEvents:function(){var e=this,t=e._listeners={},n=function(){e.eventHandler.apply(e,arguments)};helpers$1.each(e.options.events,function(r){platform.addEventListener(e,r,n),t[r]=n}),e.options.responsive&&(n=function(){e.resize()},platform.addEventListener(e,"resize",n),t.resize=n)},unbindEvents:function(){var e=this,t=e._listeners;t&&(delete e._listeners,helpers$1.each(t,function(t,n){platform.removeEventListener(e,n,t)}))},updateHoverStyle:function(e,t,n){var r,i,a,o=n?"setHoverStyle":"removeHoverStyle";for(i=0,a=e.length;i<a;++i)(r=e[i])&&this.getDatasetMeta(r._datasetIndex).controller[o](r)},eventHandler:function(e){var t=this,n=t.tooltip;if(!1!==core_plugins.notify(t,"beforeEvent",[e])){t._bufferedRender=!0,t._bufferedRequest=null;var r=t.handleEvent(e);n&&(r=n._start?n.handleEvent(e):r|n.handleEvent(e)),core_plugins.notify(t,"afterEvent",[e]);var i=t._bufferedRequest;return i?t.render(i):r&&!t.animating&&(t.stop(),t.render({duration:t.options.hover.animationDuration,lazy:!0})),t._bufferedRender=!1,t._bufferedRequest=null,t}},handleEvent:function(e){var t,n=this,r=n.options||{},i=r.hover;return n.lastActive=n.lastActive||[],"mouseout"===e.type?n.active=[]:n.active=n.getElementsAtEventForMode(e,i.mode,i),helpers$1.callback(r.onHover||r.hover.onHover,[e.native,n.active],n),"mouseup"!==e.type&&"click"!==e.type||r.onClick&&r.onClick.call(n,e.native,n.active),n.lastActive.length&&n.updateHoverStyle(n.lastActive,i.mode,!1),n.active.length&&i.mode&&n.updateHoverStyle(n.active,i.mode,!0),t=!helpers$1.arrayEquals(n.active,n.lastActive),n.lastActive=n.active,t}}),e.Controller=e},core_datasetController=function(e){var t=["push","pop","shift","splice","unshift"];function n(e,n){var r=e._chartjs;if(r){var i=r.listeners,a=i.indexOf(n);-1!==a&&i.splice(a,1),i.length>0||(t.forEach(function(t){delete e[t]}),delete e._chartjs)}}e.DatasetController=function(e,t){this.initialize(e,t)},helpers$1.extend(e.DatasetController.prototype,{datasetElementType:null,dataElementType:null,initialize:function(e,t){this.chart=e,this.index=t,this.linkScales(),this.addElements()},updateIndex:function(e){this.index=e},linkScales:function(){var e=this,t=e.getMeta(),n=e.getDataset();null!==t.xAxisID&&t.xAxisID in e.chart.scales||(t.xAxisID=n.xAxisID||e.chart.options.scales.xAxes[0].id),null!==t.yAxisID&&t.yAxisID in e.chart.scales||(t.yAxisID=n.yAxisID||e.chart.options.scales.yAxes[0].id)},getDataset:function(){return this.chart.data.datasets[this.index]},getMeta:function(){return this.chart.getDatasetMeta(this.index)},getScaleForId:function(e){return this.chart.scales[e]},reset:function(){this.update(!0)},destroy:function(){this._data&&n(this._data,this)},createMetaDataset:function(){var e=this.datasetElementType;return e&&new e({_chart:this.chart,_datasetIndex:this.index})},createMetaData:function(e){var t=this.dataElementType;return t&&new t({_chart:this.chart,_datasetIndex:this.index,_index:e})},addElements:function(){var e,t,n=this.getMeta(),r=this.getDataset().data||[],i=n.data;for(e=0,t=r.length;e<t;++e)i[e]=i[e]||this.createMetaData(e);n.dataset=n.dataset||this.createMetaDataset()},addElementAndReset:function(e){var t=this.createMetaData(e);this.getMeta().data.splice(e,0,t),this.updateElement(t,e,!0)},buildOrUpdateElements:function(){var e,r,i=this,a=i.getDataset(),o=a.data||(a.data=[]);i._data!==o&&(i._data&&n(i._data,i),r=i,(e=o)._chartjs?e._chartjs.listeners.push(r):(Object.defineProperty(e,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[r]}}),t.forEach(function(t){var n="onData"+t.charAt(0).toUpperCase()+t.slice(1),r=e[t];Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value:function(){var t=Array.prototype.slice.call(arguments),i=r.apply(this,t);return helpers$1.each(e._chartjs.listeners,function(e){"function"==typeof e[n]&&e[n].apply(e,t)}),i}})})),i._data=o),i.resyncElements()},update:helpers$1.noop,transition:function(e){for(var t=this.getMeta(),n=t.data||[],r=n.length,i=0;i<r;++i)n[i].transition(e);t.dataset&&t.dataset.transition(e)},draw:function(){var e=this.getMeta(),t=e.data||[],n=t.length,r=0;for(e.dataset&&e.dataset.draw();r<n;++r)t[r].draw()},removeHoverStyle:function(e){helpers$1.merge(e._model,e.$previousStyle||{}),delete e.$previousStyle},setHoverStyle:function(e){var t=this.chart.data.datasets[e._datasetIndex],n=e._index,r=e.custom||{},i=helpers$1.valueAtIndexOrDefault,a=helpers$1.getHoverColor,o=e._model;e.$previousStyle={backgroundColor:o.backgroundColor,borderColor:o.borderColor,borderWidth:o.borderWidth},o.backgroundColor=r.hoverBackgroundColor?r.hoverBackgroundColor:i(t.hoverBackgroundColor,n,a(o.backgroundColor)),o.borderColor=r.hoverBorderColor?r.hoverBorderColor:i(t.hoverBorderColor,n,a(o.borderColor)),o.borderWidth=r.hoverBorderWidth?r.hoverBorderWidth:i(t.hoverBorderWidth,n,o.borderWidth)},resyncElements:function(){var e=this.getMeta(),t=this.getDataset().data,n=e.data.length,r=t.length;r<n?e.data.splice(r,n-r):r>n&&this.insertElements(n,r-n)},insertElements:function(e,t){for(var n=0;n<t;++n)this.addElementAndReset(e+n)},onDataPush:function(){this.insertElements(this.getDataset().data.length-1,arguments.length)},onDataPop:function(){this.getMeta().data.pop()},onDataShift:function(){this.getMeta().data.shift()},onDataSplice:function(e,t){this.getMeta().data.splice(e,t),this.insertElements(e,arguments.length-2)},onDataUnshift:function(){this.insertElements(0,arguments.length)}}),e.DatasetController.extend=helpers$1.inherits};function generateTicks(e,t){var n,r,i,a=[];if(e.stepSize&&e.stepSize>0)i=e.stepSize;else{var o=helpers$1.niceNum(t.max-t.min,!1);i=helpers$1.niceNum(o/(e.maxTicks-1),!0),void 0!==(r=e.precision)&&(n=Math.pow(10,r),i=Math.ceil(i*n)/n)}var s=Math.floor(t.min/i)*i,l=Math.ceil(t.max/i)*i;helpers$1.isNullOrUndef(e.min)||helpers$1.isNullOrUndef(e.max)||!e.stepSize||helpers$1.almostWhole((e.max-e.min)/e.stepSize,i/1e3)&&(s=e.min,l=e.max);var c=(l-s)/i;c=helpers$1.almostEquals(c,Math.round(c),i/1e3)?Math.round(c):Math.ceil(c),r=1,i<1&&(r=Math.pow(10,1-Math.floor(helpers$1.log10(i))),s=Math.round(s*r)/r,l=Math.round(l*r)/r),a.push(void 0!==e.min?e.min:s);for(var u=1;u<c;++u)a.push(Math.round((s+u*i)*r)/r);return a.push(void 0!==e.max?e.max:l),a}var scale_linearbase=function(e){var t=helpers$1.noop;e.LinearScaleBase=core_scale.extend({getRightValue:function(e){return"string"==typeof e?+e:core_scale.prototype.getRightValue.call(this,e)},handleTickRangeOptions:function(){var e=this,t=e.options.ticks;if(t.beginAtZero){var n=helpers$1.sign(e.min),r=helpers$1.sign(e.max);n<0&&r<0?e.max=0:n>0&&r>0&&(e.min=0)}var i=void 0!==t.min||void 0!==t.suggestedMin,a=void 0!==t.max||void 0!==t.suggestedMax;void 0!==t.min?e.min=t.min:void 0!==t.suggestedMin&&(null===e.min?e.min=t.suggestedMin:e.min=Math.min(e.min,t.suggestedMin)),void 0!==t.max?e.max=t.max:void 0!==t.suggestedMax&&(null===e.max?e.max=t.suggestedMax:e.max=Math.max(e.max,t.suggestedMax)),i!==a&&e.min>=e.max&&(i?e.max=e.min+1:e.min=e.max-1),e.min===e.max&&(e.max++,t.beginAtZero||e.min--)},getTickLimit:t,handleDirectionalChanges:t,buildTicks:function(){var e=this,t=e.options.ticks,n=e.getTickLimit(),r={maxTicks:n=Math.max(2,n),min:t.min,max:t.max,precision:t.precision,stepSize:helpers$1.valueOrDefault(t.fixedStepSize,t.stepSize)},i=e.ticks=generateTicks(r,e);e.handleDirectionalChanges(),e.max=helpers$1.max(i),e.min=helpers$1.min(i),t.reverse?(i.reverse(),e.start=e.max,e.end=e.min):(e.start=e.min,e.end=e.max)},convertTicksToLabels:function(){var e=this;e.ticksAsNumbers=e.ticks.slice(),e.zeroLineIndex=e.ticks.indexOf(0),core_scale.prototype.convertTicksToLabels.call(e)}})},scale_category=function(){var e=core_scale.extend({getLabels:function(){var e=this.chart.data;return this.options.labels||(this.isHorizontal()?e.xLabels:e.yLabels)||e.labels},determineDataLimits:function(){var e,t=this,n=t.getLabels();t.minIndex=0,t.maxIndex=n.length-1,void 0!==t.options.ticks.min&&(e=n.indexOf(t.options.ticks.min),t.minIndex=-1!==e?e:t.minIndex),void 0!==t.options.ticks.max&&(e=n.indexOf(t.options.ticks.max),t.maxIndex=-1!==e?e:t.maxIndex),t.min=n[t.minIndex],t.max=n[t.maxIndex]},buildTicks:function(){var e=this,t=e.getLabels();e.ticks=0===e.minIndex&&e.maxIndex===t.length-1?t:t.slice(e.minIndex,e.maxIndex+1)},getLabelForIndex:function(e,t){var n=this,r=n.chart.data,i=n.isHorizontal();return r.yLabels&&!i?n.getRightValue(r.datasets[t].data[e]):n.ticks[e-n.minIndex]},getPixelForValue:function(e,t){var n,r=this,i=r.options.offset,a=Math.max(r.maxIndex+1-r.minIndex-(i?0:1),1);if(void 0!==e&&null!==e&&(n=r.isHorizontal()?e.x:e.y),void 0!==n||void 0!==e&&isNaN(t)){var o=r.getLabels();e=n||e;var s=o.indexOf(e);t=-1!==s?s:t}if(r.isHorizontal()){var l=r.width/a,c=l*(t-r.minIndex);return i&&(c+=l/2),r.left+Math.round(c)}var u=r.height/a,d=u*(t-r.minIndex);return i&&(d+=u/2),r.top+Math.round(d)},getPixelForTick:function(e){return this.getPixelForValue(this.ticks[e],e+this.minIndex,null)},getValueForPixel:function(e){var t=this,n=t.options.offset,r=Math.max(t._ticks.length-(n?0:1),1),i=t.isHorizontal(),a=(i?t.width:t.height)/r;return e-=i?t.left:t.top,n&&(e-=a/2),(e<=0?0:Math.round(e/a))+t.minIndex},getBasePixel:function(){return this.bottom}});core_scaleService.registerScaleType("category",e,{position:"bottom"})},scale_linear=function(e){var t={position:"left",ticks:{callback:core_ticks.formatters.linear}},n=e.LinearScaleBase.extend({determineDataLimits:function(){var e=this,t=e.options,n=e.chart,r=n.data.datasets,i=e.isHorizontal();function a(t){return i?t.xAxisID===e.id:t.yAxisID===e.id}e.min=null,e.max=null;var o=t.stacked;if(void 0===o&&helpers$1.each(r,function(e,t){if(!o){var r=n.getDatasetMeta(t);n.isDatasetVisible(t)&&a(r)&&void 0!==r.stack&&(o=!0)}}),t.stacked||o){var s={};helpers$1.each(r,function(r,i){var o=n.getDatasetMeta(i),l=[o.type,void 0===t.stacked&&void 0===o.stack?i:"",o.stack].join(".");void 0===s[l]&&(s[l]={positiveValues:[],negativeValues:[]});var c=s[l].positiveValues,u=s[l].negativeValues;n.isDatasetVisible(i)&&a(o)&&helpers$1.each(r.data,function(n,r){var i=+e.getRightValue(n);isNaN(i)||o.data[r].hidden||(c[r]=c[r]||0,u[r]=u[r]||0,t.relativePoints?c[r]=100:i<0?u[r]+=i:c[r]+=i)})}),helpers$1.each(s,function(t){var n=t.positiveValues.concat(t.negativeValues),r=helpers$1.min(n),i=helpers$1.max(n);e.min=null===e.min?r:Math.min(e.min,r),e.max=null===e.max?i:Math.max(e.max,i)})}else helpers$1.each(r,function(t,r){var i=n.getDatasetMeta(r);n.isDatasetVisible(r)&&a(i)&&helpers$1.each(t.data,function(t,n){var r=+e.getRightValue(t);isNaN(r)||i.data[n].hidden||(null===e.min?e.min=r:r<e.min&&(e.min=r),null===e.max?e.max=r:r>e.max&&(e.max=r))})});e.min=isFinite(e.min)&&!isNaN(e.min)?e.min:0,e.max=isFinite(e.max)&&!isNaN(e.max)?e.max:1,this.handleTickRangeOptions()},getTickLimit:function(){var e,t=this.options.ticks;if(this.isHorizontal())e=Math.min(t.maxTicksLimit?t.maxTicksLimit:11,Math.ceil(this.width/50));else{var n=helpers$1.valueOrDefault(t.fontSize,core_defaults.global.defaultFontSize);e=Math.min(t.maxTicksLimit?t.maxTicksLimit:11,Math.ceil(this.height/(2*n)))}return e},handleDirectionalChanges:function(){this.isHorizontal()||this.ticks.reverse()},getLabelForIndex:function(e,t){return+this.getRightValue(this.chart.data.datasets[t].data[e])},getPixelForValue:function(e){var t=this,n=t.start,r=+t.getRightValue(e),i=t.end-n;return t.isHorizontal()?t.left+t.width/i*(r-n):t.bottom-t.height/i*(r-n)},getValueForPixel:function(e){var t=this,n=t.isHorizontal(),r=n?t.width:t.height,i=(n?e-t.left:t.bottom-e)/r;return t.start+(t.end-t.start)*i},getPixelForTick:function(e){return this.getPixelForValue(this.ticksAsNumbers[e])}});core_scaleService.registerScaleType("linear",n,t)};function generateTicks$1(e,t){var n,r,i=[],a=helpers$1.valueOrDefault,o=a(e.min,Math.pow(10,Math.floor(helpers$1.log10(t.min)))),s=Math.floor(helpers$1.log10(t.max)),l=Math.ceil(t.max/Math.pow(10,s));0===o?(n=Math.floor(helpers$1.log10(t.minNotZero)),r=Math.floor(t.minNotZero/Math.pow(10,n)),i.push(o),o=r*Math.pow(10,n)):(n=Math.floor(helpers$1.log10(o)),r=Math.floor(o/Math.pow(10,n)));var c=n<0?Math.pow(10,Math.abs(n)):1;do{i.push(o),10===++r&&(r=1,c=++n>=0?1:c),o=Math.round(r*Math.pow(10,n)*c)/c}while(n<s||n===s&&r<l);var u=a(e.max,o);return i.push(u),i}var scale_logarithmic=function(e){var t={position:"left",ticks:{callback:core_ticks.formatters.logarithmic}},n=core_scale.extend({determineDataLimits:function(){var e=this,t=e.options,n=e.chart,r=n.data.datasets,i=e.isHorizontal();function a(t){return i?t.xAxisID===e.id:t.yAxisID===e.id}e.min=null,e.max=null,e.minNotZero=null;var o=t.stacked;if(void 0===o&&helpers$1.each(r,function(e,t){if(!o){var r=n.getDatasetMeta(t);n.isDatasetVisible(t)&&a(r)&&void 0!==r.stack&&(o=!0)}}),t.stacked||o){var s={};helpers$1.each(r,function(r,i){var o=n.getDatasetMeta(i),l=[o.type,void 0===t.stacked&&void 0===o.stack?i:"",o.stack].join(".");n.isDatasetVisible(i)&&a(o)&&(void 0===s[l]&&(s[l]=[]),helpers$1.each(r.data,function(t,n){var r=s[l],i=+e.getRightValue(t);isNaN(i)||o.data[n].hidden||i<0||(r[n]=r[n]||0,r[n]+=i)}))}),helpers$1.each(s,function(t){if(t.length>0){var n=helpers$1.min(t),r=helpers$1.max(t);e.min=null===e.min?n:Math.min(e.min,n),e.max=null===e.max?r:Math.max(e.max,r)}})}else helpers$1.each(r,function(t,r){var i=n.getDatasetMeta(r);n.isDatasetVisible(r)&&a(i)&&helpers$1.each(t.data,function(t,n){var r=+e.getRightValue(t);isNaN(r)||i.data[n].hidden||r<0||(null===e.min?e.min=r:r<e.min&&(e.min=r),null===e.max?e.max=r:r>e.max&&(e.max=r),0!==r&&(null===e.minNotZero||r<e.minNotZero)&&(e.minNotZero=r))})});this.handleTickRangeOptions()},handleTickRangeOptions:function(){var e=this,t=e.options.ticks,n=helpers$1.valueOrDefault;e.min=n(t.min,e.min),e.max=n(t.max,e.max),e.min===e.max&&(0!==e.min&&null!==e.min?(e.min=Math.pow(10,Math.floor(helpers$1.log10(e.min))-1),e.max=Math.pow(10,Math.floor(helpers$1.log10(e.max))+1)):(e.min=1,e.max=10)),null===e.min&&(e.min=Math.pow(10,Math.floor(helpers$1.log10(e.max))-1)),null===e.max&&(e.max=0!==e.min?Math.pow(10,Math.floor(helpers$1.log10(e.min))+1):10),null===e.minNotZero&&(e.min>0?e.minNotZero=e.min:e.max<1?e.minNotZero=Math.pow(10,Math.floor(helpers$1.log10(e.max))):e.minNotZero=1)},buildTicks:function(){var e=this,t=e.options.ticks,n=!e.isHorizontal(),r={min:t.min,max:t.max},i=e.ticks=generateTicks$1(r,e);e.max=helpers$1.max(i),e.min=helpers$1.min(i),t.reverse?(n=!n,e.start=e.max,e.end=e.min):(e.start=e.min,e.end=e.max),n&&i.reverse()},convertTicksToLabels:function(){this.tickValues=this.ticks.slice(),core_scale.prototype.convertTicksToLabels.call(this)},getLabelForIndex:function(e,t){return+this.getRightValue(this.chart.data.datasets[t].data[e])},getPixelForTick:function(e){return this.getPixelForValue(this.tickValues[e])},_getFirstTickValue:function(e){var t=Math.floor(helpers$1.log10(e));return Math.floor(e/Math.pow(10,t))*Math.pow(10,t)},getPixelForValue:function(t){var n,r,i,a,o,s=this,l=s.options.ticks.reverse,c=helpers$1.log10,u=s._getFirstTickValue(s.minNotZero),d=0;return t=+s.getRightValue(t),l?(i=s.end,a=s.start,o=-1):(i=s.start,a=s.end,o=1),s.isHorizontal()?(n=s.width,r=l?s.right:s.left):(n=s.height,o*=-1,r=l?s.top:s.bottom),t!==i&&(0===i&&(n-=d=helpers$1.getValueOrDefault(s.options.ticks.fontSize,e.defaults.global.defaultFontSize),i=u),0!==t&&(d+=n/(c(a)-c(i))*(c(t)-c(i))),r+=o*d),r},getValueForPixel:function(t){var n,r,i,a,o=this,s=o.options.ticks.reverse,l=helpers$1.log10,c=o._getFirstTickValue(o.minNotZero);if(s?(r=o.end,i=o.start):(r=o.start,i=o.end),o.isHorizontal()?(n=o.width,a=s?o.right-t:t-o.left):(n=o.height,a=s?t-o.top:o.bottom-t),a!==r){if(0===r){var u=helpers$1.getValueOrDefault(o.options.ticks.fontSize,e.defaults.global.defaultFontSize);a-=u,n-=u,r=c}a*=l(i)-l(r),a/=n,a=Math.pow(10,l(r)+a)}return a}});core_scaleService.registerScaleType("logarithmic",n,t)},scale_radialLinear=function(e){var t=core_defaults.global,n={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,color:"rgba(0, 0, 0, 0.1)",lineWidth:1},gridLines:{circular:!1},ticks:{showLabelBackdrop:!0,backdropColor:"rgba(255,255,255,0.75)",backdropPaddingY:2,backdropPaddingX:2,callback:core_ticks.formatters.linear},pointLabels:{display:!0,fontSize:10,callback:function(e){return e}}};function r(e){var t=e.options;return t.angleLines.display||t.pointLabels.display?e.chart.data.labels.length:0}function i(e){var n=e.options.pointLabels,r=helpers$1.valueOrDefault(n.fontSize,t.defaultFontSize),i=helpers$1.valueOrDefault(n.fontStyle,t.defaultFontStyle),a=helpers$1.valueOrDefault(n.fontFamily,t.defaultFontFamily);return{size:r,style:i,family:a,font:helpers$1.fontString(r,i,a)}}function a(e,t,n,r,i){return e===r||e===i?{start:t-n/2,end:t+n/2}:e<r||e>i?{start:t-n-5,end:t}:{start:t,end:t+n+5}}function o(e){return 0===e||180===e?"center":e<180?"left":"right"}function s(e,t,n,r){if(helpers$1.isArray(t))for(var i=n.y,a=1.5*r,o=0;o<t.length;++o)e.fillText(t[o],n.x,i),i+=a;else e.fillText(t,n.x,n.y)}function l(e,t,n){90===e||270===e?n.y-=t.h/2:(e>270||e<90)&&(n.y-=t.h)}function c(e){return helpers$1.isNumber(e)?e:0}var u=e.LinearScaleBase.extend({setDimensions:function(){var e=this,n=e.options,r=n.ticks;e.width=e.maxWidth,e.height=e.maxHeight,e.xCenter=Math.round(e.width/2),e.yCenter=Math.round(e.height/2);var i=helpers$1.min([e.height,e.width]),a=helpers$1.valueOrDefault(r.fontSize,t.defaultFontSize);e.drawingArea=n.display?i/2-(a/2+r.backdropPaddingY):i/2},determineDataLimits:function(){var e=this,t=e.chart,n=Number.POSITIVE_INFINITY,r=Number.NEGATIVE_INFINITY;helpers$1.each(t.data.datasets,function(i,a){if(t.isDatasetVisible(a)){var o=t.getDatasetMeta(a);helpers$1.each(i.data,function(t,i){var a=+e.getRightValue(t);isNaN(a)||o.data[i].hidden||(n=Math.min(a,n),r=Math.max(a,r))})}}),e.min=n===Number.POSITIVE_INFINITY?0:n,e.max=r===Number.NEGATIVE_INFINITY?0:r,e.handleTickRangeOptions()},getTickLimit:function(){var e=this.options.ticks,n=helpers$1.valueOrDefault(e.fontSize,t.defaultFontSize);return Math.min(e.maxTicksLimit?e.maxTicksLimit:11,Math.ceil(this.drawingArea/(1.5*n)))},convertTicksToLabels:function(){var t=this;e.LinearScaleBase.prototype.convertTicksToLabels.call(t),t.pointLabels=t.chart.data.labels.map(t.options.pointLabels.callback,t)},getLabelForIndex:function(e,t){return+this.getRightValue(this.chart.data.datasets[t].data[e])},fit:function(){var e,t;this.options.pointLabels.display?function(e){var t,n,o,s=i(e),l=Math.min(e.height/2,e.width/2),c={r:e.width,l:0,t:e.height,b:0},u={};e.ctx.font=s.font,e._pointLabelSizes=[];var d,h,f,p=r(e);for(t=0;t<p;t++){o=e.getPointPosition(t,l),d=e.ctx,h=s.size,f=e.pointLabels[t]||"",n=helpers$1.isArray(f)?{w:helpers$1.longestText(d,d.font,f),h:f.length*h+1.5*(f.length-1)*h}:{w:d.measureText(f).width,h:h},e._pointLabelSizes[t]=n;var g=e.getIndexAngle(t),m=helpers$1.toDegrees(g)%360,v=a(m,o.x,n.w,0,180),y=a(m,o.y,n.h,90,270);v.start<c.l&&(c.l=v.start,u.l=g),v.end>c.r&&(c.r=v.end,u.r=g),y.start<c.t&&(c.t=y.start,u.t=g),y.end>c.b&&(c.b=y.end,u.b=g)}e.setReductions(l,c,u)}(this):(e=this,t=Math.min(e.height/2,e.width/2),e.drawingArea=Math.round(t),e.setCenterPoint(0,0,0,0))},setReductions:function(e,t,n){var r=t.l/Math.sin(n.l),i=Math.max(t.r-this.width,0)/Math.sin(n.r),a=-t.t/Math.cos(n.t),o=-Math.max(t.b-this.height,0)/Math.cos(n.b);r=c(r),i=c(i),a=c(a),o=c(o),this.drawingArea=Math.min(Math.round(e-(r+i)/2),Math.round(e-(a+o)/2)),this.setCenterPoint(r,i,a,o)},setCenterPoint:function(e,t,n,r){var i=this,a=i.width-t-i.drawingArea,o=e+i.drawingArea,s=n+i.drawingArea,l=i.height-r-i.drawingArea;i.xCenter=Math.round((o+a)/2+i.left),i.yCenter=Math.round((s+l)/2+i.top)},getIndexAngle:function(e){return e*(2*Math.PI/r(this))+(this.chart.options&&this.chart.options.startAngle?this.chart.options.startAngle:0)*Math.PI*2/360},getDistanceFromCenterForValue:function(e){var t=this;if(null===e)return 0;var n=t.drawingArea/(t.max-t.min);return t.options.ticks.reverse?(t.max-e)*n:(e-t.min)*n},getPointPosition:function(e,t){var n=this.getIndexAngle(e)-Math.PI/2;return{x:Math.round(Math.cos(n)*t)+this.xCenter,y:Math.round(Math.sin(n)*t)+this.yCenter}},getPointPositionForValue:function(e,t){return this.getPointPosition(e,this.getDistanceFromCenterForValue(t))},getBasePosition:function(){var e=this.min,t=this.max;return this.getPointPositionForValue(0,this.beginAtZero?0:e<0&&t<0?t:e>0&&t>0?e:0)},draw:function(){var e=this,n=e.options,a=n.gridLines,c=n.ticks,u=helpers$1.valueOrDefault;if(n.display){var d=e.ctx,h=this.getIndexAngle(0),f=u(c.fontSize,t.defaultFontSize),p=u(c.fontStyle,t.defaultFontStyle),g=u(c.fontFamily,t.defaultFontFamily),m=helpers$1.fontString(f,p,g);helpers$1.each(e.ticks,function(n,i){if(i>0||c.reverse){var o=e.getDistanceFromCenterForValue(e.ticksAsNumbers[i]);if(a.display&&0!==i&&function(e,t,n,i){var a=e.ctx;if(a.strokeStyle=helpers$1.valueAtIndexOrDefault(t.color,i-1),a.lineWidth=helpers$1.valueAtIndexOrDefault(t.lineWidth,i-1),e.options.gridLines.circular)a.beginPath(),a.arc(e.xCenter,e.yCenter,n,0,2*Math.PI),a.closePath(),a.stroke();else{var o=r(e);if(0===o)return;a.beginPath();var s=e.getPointPosition(0,n);a.moveTo(s.x,s.y);for(var l=1;l<o;l++)s=e.getPointPosition(l,n),a.lineTo(s.x,s.y);a.closePath(),a.stroke()}}(e,a,o,i),c.display){var s=u(c.fontColor,t.defaultFontColor);if(d.font=m,d.save(),d.translate(e.xCenter,e.yCenter),d.rotate(h),c.showLabelBackdrop){var l=d.measureText(n).width;d.fillStyle=c.backdropColor,d.fillRect(-l/2-c.backdropPaddingX,-o-f/2-c.backdropPaddingY,l+2*c.backdropPaddingX,f+2*c.backdropPaddingY)}d.textAlign="center",d.textBaseline="middle",d.fillStyle=s,d.fillText(n,0,-o),d.restore()}}}),(n.angleLines.display||n.pointLabels.display)&&function(e){var n=e.ctx,a=e.options,c=a.angleLines,u=a.pointLabels;n.lineWidth=c.lineWidth,n.strokeStyle=c.color;var d=e.getDistanceFromCenterForValue(a.ticks.reverse?e.min:e.max),h=i(e);n.textBaseline="top";for(var f=r(e)-1;f>=0;f--){if(c.display){var p=e.getPointPosition(f,d);n.beginPath(),n.moveTo(e.xCenter,e.yCenter),n.lineTo(p.x,p.y),n.stroke(),n.closePath()}if(u.display){var g=e.getPointPosition(f,d+5),m=helpers$1.valueAtIndexOrDefault(u.fontColor,f,t.defaultFontColor);n.font=h.font,n.fillStyle=m;var v=e.getIndexAngle(f),y=helpers$1.toDegrees(v);n.textAlign=o(y),l(y,e._pointLabelSizes[f],g),s(n,e.pointLabels[f]||"",g,h.size)}}}(e)}}});core_scaleService.registerScaleType("radialLinear",u,n)},moment=createCommonjsModule(function(e,t){e.exports=function(){var t,n;function r(){return t.apply(null,arguments)}function i(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function a(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function o(e){return void 0===e}function s(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function l(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function c(e,t){var n,r=[];for(n=0;n<e.length;++n)r.push(t(e[n],n));return r}function u(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function d(e,t){for(var n in t)u(t,n)&&(e[n]=t[n]);return u(t,"toString")&&(e.toString=t.toString),u(t,"valueOf")&&(e.valueOf=t.valueOf),e}function h(e,t,n,r){return Mt(e,t,n,r,!0).utc()}function f(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function p(e){if(null==e._isValid){var t=f(e),r=n.call(t.parsedDateParts,function(e){return null!=e}),i=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&r);if(e._strict&&(i=i&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return i;e._isValid=i}return e._isValid}function g(e){var t=h(NaN);return null!=e?d(f(t),e):f(t).userInvalidated=!0,t}n=Array.prototype.some?Array.prototype.some:function(e){for(var t=Object(this),n=t.length>>>0,r=0;r<n;r++)if(r in t&&e.call(this,t[r],r,t))return!0;return!1};var m=r.momentProperties=[];function v(e,t){var n,r,i;if(o(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),o(t._i)||(e._i=t._i),o(t._f)||(e._f=t._f),o(t._l)||(e._l=t._l),o(t._strict)||(e._strict=t._strict),o(t._tzm)||(e._tzm=t._tzm),o(t._isUTC)||(e._isUTC=t._isUTC),o(t._offset)||(e._offset=t._offset),o(t._pf)||(e._pf=f(t)),o(t._locale)||(e._locale=t._locale),m.length>0)for(n=0;n<m.length;n++)r=m[n],o(i=t[r])||(e[r]=i);return e}var y=!1;function b(e){v(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===y&&(y=!0,r.updateOffset(this),y=!1)}function _(e){return e instanceof b||null!=e&&null!=e._isAMomentObject}function x(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function w(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=x(t)),n}function k(e,t,n){var r,i=Math.min(e.length,t.length),a=Math.abs(e.length-t.length),o=0;for(r=0;r<i;r++)(n&&e[r]!==t[r]||!n&&w(e[r])!==w(t[r]))&&o++;return o+a}function S(e){!1===r.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function C(e,t){var n=!0;return d(function(){var i=arguments;if(null!=r.deprecationHandler&&r.deprecationHandler(null,e),n){for(var a,o=[],s=0;s<arguments.length;s++){if(a="","object"===_typeof(i[s])){for(var l in a+="\n["+s+"] ",arguments[0])a+=l+": "+i[0][l]+", ";a=a.slice(0,-2)}else a=i[s];o.push(a)}S(e+"\nArguments: "+Array.prototype.slice.call(o).join("")+"\n"+(new Error).stack),n=!1}return t.apply(this,arguments)},t)}var $,T={};function A(e,t){null!=r.deprecationHandler&&r.deprecationHandler(e,t),T[e]||(S(t),T[e]=!0)}function M(e){return e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function D(e,t){var n,r=d({},e);for(n in t)u(t,n)&&(a(e[n])&&a(t[n])?(r[n]={},d(r[n],e[n]),d(r[n],t[n])):null!=t[n]?r[n]=t[n]:delete r[n]);for(n in e)u(e,n)&&!u(t,n)&&a(e[n])&&(r[n]=d({},r[n]));return r}function O(e){null!=e&&this.set(e)}r.suppressDeprecationWarnings=!1,r.deprecationHandler=null,$=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)u(e,t)&&n.push(t);return n};var P={};function I(e,t){var n=e.toLowerCase();P[n]=P[n+"s"]=P[t]=e}function E(e){return"string"==typeof e?P[e]||P[e.toLowerCase()]:void 0}function R(e){var t,n,r={};for(n in e)u(e,n)&&(t=E(n))&&(r[t]=e[n]);return r}var N={};function F(e,t){N[e]=t}function L(e,t,n){var r=""+Math.abs(e),i=t-r.length,a=e>=0;return(a?n?"+":"":"-")+Math.pow(10,Math.max(0,i)).toString().substr(1)+r}var j=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,V=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,z={},H={};function B(e,t,n,r){var i=r;"string"==typeof r&&(i=function(){return this[r]()}),e&&(H[e]=i),t&&(H[t[0]]=function(){return L(i.apply(this,arguments),t[1],t[2])}),n&&(H[n]=function(){return this.localeData().ordinal(i.apply(this,arguments),e)})}function U(e,t){return e.isValid()?(t=W(t,e.localeData()),z[t]=z[t]||function(e){var t,n,r,i=e.match(j);for(t=0,n=i.length;t<n;t++)H[i[t]]?i[t]=H[i[t]]:i[t]=(r=i[t]).match(/\[[\s\S]/)?r.replace(/^\[|\]$/g,""):r.replace(/\\/g,"");return function(t){var r,a="";for(r=0;r<n;r++)a+=M(i[r])?i[r].call(t,e):i[r];return a}}(t),z[t](e)):e.localeData().invalidDate()}function W(e,t){var n=5;function r(e){return t.longDateFormat(e)||e}for(V.lastIndex=0;n>=0&&V.test(e);)e=e.replace(V,r),V.lastIndex=0,n-=1;return e}var Y=/\d/,G=/\d\d/,q=/\d{3}/,K=/\d{4}/,X=/[+-]?\d{6}/,J=/\d\d?/,Z=/\d\d\d\d?/,Q=/\d\d\d\d\d\d?/,ee=/\d{1,3}/,te=/\d{1,4}/,ne=/[+-]?\d{1,6}/,re=/\d+/,ie=/[+-]?\d+/,ae=/Z|[+-]\d\d:?\d\d/gi,oe=/Z|[+-]\d\d(?::?\d\d)?/gi,se=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,le={};function ce(e,t,n){le[e]=M(t)?t:function(e,r){return e&&n?n:t}}function ue(e,t){return u(le,e)?le[e](t._strict,t._locale):new RegExp(de(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(e,t,n,r,i){return t||n||r||i})))}function de(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}var he={};function fe(e,t){var n,r=t;for("string"==typeof e&&(e=[e]),s(t)&&(r=function(e,n){n[t]=w(e)}),n=0;n<e.length;n++)he[e[n]]=r}function pe(e,t){fe(e,function(e,n,r,i){r._w=r._w||{},t(e,r._w,r,i)})}function ge(e,t,n){null!=t&&u(he,e)&&he[e](t,n._a,n,e)}var me=0,ve=1,ye=2,be=3,_e=4,xe=5,we=6,ke=7,Se=8;function Ce(e){return $e(e)?366:365}function $e(e){return e%4==0&&e%100!=0||e%400==0}B("Y",0,0,function(){var e=this.year();return e<=9999?""+e:"+"+e}),B(0,["YY",2],0,function(){return this.year()%100}),B(0,["YYYY",4],0,"year"),B(0,["YYYYY",5],0,"year"),B(0,["YYYYYY",6,!0],0,"year"),I("year","y"),F("year",1),ce("Y",ie),ce("YY",J,G),ce("YYYY",te,K),ce("YYYYY",ne,X),ce("YYYYYY",ne,X),fe(["YYYYY","YYYYYY"],me),fe("YYYY",function(e,t){t[me]=2===e.length?r.parseTwoDigitYear(e):w(e)}),fe("YY",function(e,t){t[me]=r.parseTwoDigitYear(e)}),fe("Y",function(e,t){t[me]=parseInt(e,10)}),r.parseTwoDigitYear=function(e){return w(e)+(w(e)>68?1900:2e3)};var Te,Ae=Me("FullYear",!0);function Me(e,t){return function(n){return null!=n?(Oe(this,e,n),r.updateOffset(this,t),this):De(this,e)}}function De(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function Oe(e,t,n){e.isValid()&&!isNaN(n)&&("FullYear"===t&&$e(e.year())&&1===e.month()&&29===e.date()?e._d["set"+(e._isUTC?"UTC":"")+t](n,e.month(),Pe(n,e.month())):e._d["set"+(e._isUTC?"UTC":"")+t](n))}function Pe(e,t){if(isNaN(e)||isNaN(t))return NaN;var n,r=(t%(n=12)+n)%n;return e+=(t-r)/12,1===r?$e(e)?29:28:31-r%7%2}Te=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},B("M",["MM",2],"Mo",function(){return this.month()+1}),B("MMM",0,0,function(e){return this.localeData().monthsShort(this,e)}),B("MMMM",0,0,function(e){return this.localeData().months(this,e)}),I("month","M"),F("month",8),ce("M",J),ce("MM",J,G),ce("MMM",function(e,t){return t.monthsShortRegex(e)}),ce("MMMM",function(e,t){return t.monthsRegex(e)}),fe(["M","MM"],function(e,t){t[ve]=w(e)-1}),fe(["MMM","MMMM"],function(e,t,n,r){var i=n._locale.monthsParse(e,r,n._strict);null!=i?t[ve]=i:f(n).invalidMonth=e});var Ie=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,Ee="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Re="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");function Ne(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=w(t);else if(!s(t=e.localeData().monthsParse(t)))return e;return n=Math.min(e.date(),Pe(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function Fe(e){return null!=e?(Ne(this,e),r.updateOffset(this,!0),this):De(this,"Month")}var Le=se,je=se;function Ve(){function e(e,t){return t.length-e.length}var t,n,r=[],i=[],a=[];for(t=0;t<12;t++)n=h([2e3,t]),r.push(this.monthsShort(n,"")),i.push(this.months(n,"")),a.push(this.months(n,"")),a.push(this.monthsShort(n,""));for(r.sort(e),i.sort(e),a.sort(e),t=0;t<12;t++)r[t]=de(r[t]),i[t]=de(i[t]);for(t=0;t<24;t++)a[t]=de(a[t]);this._monthsRegex=new RegExp("^("+a.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+i.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+r.join("|")+")","i")}function ze(e){var t;if(e<100&&e>=0){var n=Array.prototype.slice.call(arguments);n[0]=e+400,t=new Date(Date.UTC.apply(null,n)),isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e)}else t=new Date(Date.UTC.apply(null,arguments));return t}function He(e,t,n){var r=7+t-n,i=(7+ze(e,0,r).getUTCDay()-t)%7;return-i+r-1}function Be(e,t,n,r,i){var a,o,s=(7+n-r)%7,l=He(e,r,i),c=1+7*(t-1)+s+l;return c<=0?o=Ce(a=e-1)+c:c>Ce(e)?(a=e+1,o=c-Ce(e)):(a=e,o=c),{year:a,dayOfYear:o}}function Ue(e,t,n){var r,i,a=He(e.year(),t,n),o=Math.floor((e.dayOfYear()-a-1)/7)+1;return o<1?(i=e.year()-1,r=o+We(i,t,n)):o>We(e.year(),t,n)?(r=o-We(e.year(),t,n),i=e.year()+1):(i=e.year(),r=o),{week:r,year:i}}function We(e,t,n){var r=He(e,t,n),i=He(e+1,t,n);return(Ce(e)-r+i)/7}function Ye(e,t){return e.slice(t,7).concat(e.slice(0,t))}B("w",["ww",2],"wo","week"),B("W",["WW",2],"Wo","isoWeek"),I("week","w"),I("isoWeek","W"),F("week",5),F("isoWeek",5),ce("w",J),ce("ww",J,G),ce("W",J),ce("WW",J,G),pe(["w","ww","W","WW"],function(e,t,n,r){t[r.substr(0,1)]=w(e)}),B("d",0,"do","day"),B("dd",0,0,function(e){return this.localeData().weekdaysMin(this,e)}),B("ddd",0,0,function(e){return this.localeData().weekdaysShort(this,e)}),B("dddd",0,0,function(e){return this.localeData().weekdays(this,e)}),B("e",0,0,"weekday"),B("E",0,0,"isoWeekday"),I("day","d"),I("weekday","e"),I("isoWeekday","E"),F("day",11),F("weekday",11),F("isoWeekday",11),ce("d",J),ce("e",J),ce("E",J),ce("dd",function(e,t){return t.weekdaysMinRegex(e)}),ce("ddd",function(e,t){return t.weekdaysShortRegex(e)}),ce("dddd",function(e,t){return t.weekdaysRegex(e)}),pe(["dd","ddd","dddd"],function(e,t,n,r){var i=n._locale.weekdaysParse(e,r,n._strict);null!=i?t.d=i:f(n).invalidWeekday=e}),pe(["d","e","E"],function(e,t,n,r){t[r]=w(e)});var Ge="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),qe="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Ke="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),Xe=se,Je=se,Ze=se;function Qe(){function e(e,t){return t.length-e.length}var t,n,r,i,a,o=[],s=[],l=[],c=[];for(t=0;t<7;t++)n=h([2e3,1]).day(t),r=this.weekdaysMin(n,""),i=this.weekdaysShort(n,""),a=this.weekdays(n,""),o.push(r),s.push(i),l.push(a),c.push(r),c.push(i),c.push(a);for(o.sort(e),s.sort(e),l.sort(e),c.sort(e),t=0;t<7;t++)s[t]=de(s[t]),l[t]=de(l[t]),c[t]=de(c[t]);this._weekdaysRegex=new RegExp("^("+c.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+s.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+o.join("|")+")","i")}function et(){return this.hours()%12||12}function tt(e,t){B(e,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)})}function nt(e,t){return t._meridiemParse}B("H",["HH",2],0,"hour"),B("h",["hh",2],0,et),B("k",["kk",2],0,function(){return this.hours()||24}),B("hmm",0,0,function(){return""+et.apply(this)+L(this.minutes(),2)}),B("hmmss",0,0,function(){return""+et.apply(this)+L(this.minutes(),2)+L(this.seconds(),2)}),B("Hmm",0,0,function(){return""+this.hours()+L(this.minutes(),2)}),B("Hmmss",0,0,function(){return""+this.hours()+L(this.minutes(),2)+L(this.seconds(),2)}),tt("a",!0),tt("A",!1),I("hour","h"),F("hour",13),ce("a",nt),ce("A",nt),ce("H",J),ce("h",J),ce("k",J),ce("HH",J,G),ce("hh",J,G),ce("kk",J,G),ce("hmm",Z),ce("hmmss",Q),ce("Hmm",Z),ce("Hmmss",Q),fe(["H","HH"],be),fe(["k","kk"],function(e,t,n){var r=w(e);t[be]=24===r?0:r}),fe(["a","A"],function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e}),fe(["h","hh"],function(e,t,n){t[be]=w(e),f(n).bigHour=!0}),fe("hmm",function(e,t,n){var r=e.length-2;t[be]=w(e.substr(0,r)),t[_e]=w(e.substr(r)),f(n).bigHour=!0}),fe("hmmss",function(e,t,n){var r=e.length-4,i=e.length-2;t[be]=w(e.substr(0,r)),t[_e]=w(e.substr(r,2)),t[xe]=w(e.substr(i)),f(n).bigHour=!0}),fe("Hmm",function(e,t,n){var r=e.length-2;t[be]=w(e.substr(0,r)),t[_e]=w(e.substr(r))}),fe("Hmmss",function(e,t,n){var r=e.length-4,i=e.length-2;t[be]=w(e.substr(0,r)),t[_e]=w(e.substr(r,2)),t[xe]=w(e.substr(i))});var rt,it=Me("Hours",!0),at={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:Ee,monthsShort:Re,week:{dow:0,doy:6},weekdays:Ge,weekdaysMin:Ke,weekdaysShort:qe,meridiemParse:/[ap]\.?m?\.?/i},ot={},st={};function lt(e){return e?e.toLowerCase().replace("_","-"):e}function ct(t){var n=null;if(!ot[t]&&e&&e.exports)try{n=rt._abbr;var r=commonjsRequire;r("./locale/"+t),ut(n)}catch(e){}return ot[t]}function ut(e,t){var n;return e&&((n=o(t)?ht(e):dt(e,t))?rt=n:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),rt._abbr}function dt(e,t){if(null!==t){var n,r=at;if(t.abbr=e,null!=ot[e])A("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),r=ot[e]._config;else if(null!=t.parentLocale)if(null!=ot[t.parentLocale])r=ot[t.parentLocale]._config;else{if(null==(n=ct(t.parentLocale)))return st[t.parentLocale]||(st[t.parentLocale]=[]),st[t.parentLocale].push({name:e,config:t}),null;r=n._config}return ot[e]=new O(D(r,t)),st[e]&&st[e].forEach(function(e){dt(e.name,e.config)}),ut(e),ot[e]}return delete ot[e],null}function ht(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return rt;if(!i(e)){if(t=ct(e))return t;e=[e]}return function(e){for(var t,n,r,i,a=0;a<e.length;){for(i=lt(e[a]).split("-"),t=i.length,n=(n=lt(e[a+1]))?n.split("-"):null;t>0;){if(r=ct(i.slice(0,t).join("-")))return r;if(n&&n.length>=t&&k(i,n,!0)>=t-1)break;t--}a++}return rt}(e)}function ft(e){var t,n=e._a;return n&&-2===f(e).overflow&&(t=n[ve]<0||n[ve]>11?ve:n[ye]<1||n[ye]>Pe(n[me],n[ve])?ye:n[be]<0||n[be]>24||24===n[be]&&(0!==n[_e]||0!==n[xe]||0!==n[we])?be:n[_e]<0||n[_e]>59?_e:n[xe]<0||n[xe]>59?xe:n[we]<0||n[we]>999?we:-1,f(e)._overflowDayOfYear&&(t<me||t>ye)&&(t=ye),f(e)._overflowWeeks&&-1===t&&(t=ke),f(e)._overflowWeekday&&-1===t&&(t=Se),f(e).overflow=t),e}function pt(e,t,n){return null!=e?e:null!=t?t:n}function gt(e){var t,n,i,a,o,s=[];if(!e._d){for(i=function(e){var t=new Date(r.now());return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}(e),e._w&&null==e._a[ye]&&null==e._a[ve]&&function(e){var t,n,r,i,a,o,s,l;if(null!=(t=e._w).GG||null!=t.W||null!=t.E)a=1,o=4,n=pt(t.GG,e._a[me],Ue(Dt(),1,4).year),r=pt(t.W,1),((i=pt(t.E,1))<1||i>7)&&(l=!0);else{a=e._locale._week.dow,o=e._locale._week.doy;var c=Ue(Dt(),a,o);n=pt(t.gg,e._a[me],c.year),r=pt(t.w,c.week),null!=t.d?((i=t.d)<0||i>6)&&(l=!0):null!=t.e?(i=t.e+a,(t.e<0||t.e>6)&&(l=!0)):i=a}r<1||r>We(n,a,o)?f(e)._overflowWeeks=!0:null!=l?f(e)._overflowWeekday=!0:(s=Be(n,r,i,a,o),e._a[me]=s.year,e._dayOfYear=s.dayOfYear)}(e),null!=e._dayOfYear&&(o=pt(e._a[me],i[me]),(e._dayOfYear>Ce(o)||0===e._dayOfYear)&&(f(e)._overflowDayOfYear=!0),n=ze(o,0,e._dayOfYear),e._a[ve]=n.getUTCMonth(),e._a[ye]=n.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=s[t]=i[t];for(;t<7;t++)e._a[t]=s[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[be]&&0===e._a[_e]&&0===e._a[xe]&&0===e._a[we]&&(e._nextDay=!0,e._a[be]=0),e._d=(e._useUTC?ze:function(e,t,n,r,i,a,o){var s;return e<100&&e>=0?(s=new Date(e+400,t,n,r,i,a,o),isFinite(s.getFullYear())&&s.setFullYear(e)):s=new Date(e,t,n,r,i,a,o),s}).apply(null,s),a=e._useUTC?e._d.getUTCDay():e._d.getDay(),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[be]=24),e._w&&void 0!==e._w.d&&e._w.d!==a&&(f(e).weekdayMismatch=!0)}}var mt=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,vt=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,yt=/Z|[+-]\d\d(?::?\d\d)?/,bt=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],_t=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],xt=/^\/?Date\((\-?\d+)/i;function wt(e){var t,n,r,i,a,o,s=e._i,l=mt.exec(s)||vt.exec(s);if(l){for(f(e).iso=!0,t=0,n=bt.length;t<n;t++)if(bt[t][1].exec(l[1])){i=bt[t][0],r=!1!==bt[t][2];break}if(null==i)return void(e._isValid=!1);if(l[3]){for(t=0,n=_t.length;t<n;t++)if(_t[t][1].exec(l[3])){a=(l[2]||" ")+_t[t][0];break}if(null==a)return void(e._isValid=!1)}if(!r&&null!=a)return void(e._isValid=!1);if(l[4]){if(!yt.exec(l[4]))return void(e._isValid=!1);o="Z"}e._f=i+(a||"")+(o||""),Tt(e)}else e._isValid=!1}var kt=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;function St(e,t,n,r,i,a){var o=[function(e){var t=parseInt(e,10);return t<=49?2e3+t:t<=999?1900+t:t}(e),Re.indexOf(t),parseInt(n,10),parseInt(r,10),parseInt(i,10)];return a&&o.push(parseInt(a,10)),o}var Ct={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function $t(e){var t=kt.exec(e._i.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(t){var n=St(t[4],t[3],t[2],t[5],t[6],t[7]);if(!function(e,t,n){if(e){var r=qe.indexOf(e),i=new Date(t[0],t[1],t[2]).getDay();if(r!==i)return f(n).weekdayMismatch=!0,n._isValid=!1,!1}return!0}(t[1],n,e))return;e._a=n,e._tzm=function(e,t,n){if(e)return Ct[e];if(t)return 0;var r=parseInt(n,10),i=r%100,a=(r-i)/100;return 60*a+i}(t[8],t[9],t[10]),e._d=ze.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),f(e).rfc2822=!0}else e._isValid=!1}function Tt(e){if(e._f!==r.ISO_8601)if(e._f!==r.RFC_2822){e._a=[],f(e).empty=!0;var t,n,i,a,o,s=""+e._i,l=s.length,c=0;for(i=W(e._f,e._locale).match(j)||[],t=0;t<i.length;t++)a=i[t],(n=(s.match(ue(a,e))||[])[0])&&((o=s.substr(0,s.indexOf(n))).length>0&&f(e).unusedInput.push(o),s=s.slice(s.indexOf(n)+n.length),c+=n.length),H[a]?(n?f(e).empty=!1:f(e).unusedTokens.push(a),ge(a,n,e)):e._strict&&!n&&f(e).unusedTokens.push(a);f(e).charsLeftOver=l-c,s.length>0&&f(e).unusedInput.push(s),e._a[be]<=12&&!0===f(e).bigHour&&e._a[be]>0&&(f(e).bigHour=void 0),f(e).parsedDateParts=e._a.slice(0),f(e).meridiem=e._meridiem,e._a[be]=(u=e._locale,d=e._a[be],null==(h=e._meridiem)?d:null!=u.meridiemHour?u.meridiemHour(d,h):null!=u.isPM?((p=u.isPM(h))&&d<12&&(d+=12),p||12!==d||(d=0),d):d),gt(e),ft(e)}else $t(e);else wt(e);var u,d,h,p}function At(e){var t=e._i,n=e._f;return e._locale=e._locale||ht(e._l),null===t||void 0===n&&""===t?g({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),_(t)?new b(ft(t)):(l(t)?e._d=t:i(n)?function(e){var t,n,r,i,a;if(0===e._f.length)return f(e).invalidFormat=!0,void(e._d=new Date(NaN));for(i=0;i<e._f.length;i++)a=0,t=v({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[i],Tt(t),p(t)&&(a+=f(t).charsLeftOver,a+=10*f(t).unusedTokens.length,f(t).score=a,(null==r||a<r)&&(r=a,n=t));d(e,n||t)}(e):n?Tt(e):function(e){var t=e._i;o(t)?e._d=new Date(r.now()):l(t)?e._d=new Date(t.valueOf()):"string"==typeof t?function(e){var t=xt.exec(e._i);null===t?(wt(e),!1===e._isValid&&(delete e._isValid,$t(e),!1===e._isValid&&(delete e._isValid,r.createFromInputFallback(e)))):e._d=new Date(+t[1])}(e):i(t)?(e._a=c(t.slice(0),function(e){return parseInt(e,10)}),gt(e)):a(t)?function(e){if(!e._d){var t=R(e._i);e._a=c([t.year,t.month,t.day||t.date,t.hour,t.minute,t.second,t.millisecond],function(e){return e&&parseInt(e,10)}),gt(e)}}(e):s(t)?e._d=new Date(t):r.createFromInputFallback(e)}(e),p(e)||(e._d=null),e))}function Mt(e,t,n,r,o){var s,l={};return!0!==n&&!1!==n||(r=n,n=void 0),(a(e)&&function(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(e.hasOwnProperty(t))return!1;return!0}(e)||i(e)&&0===e.length)&&(e=void 0),l._isAMomentObject=!0,l._useUTC=l._isUTC=o,l._l=n,l._i=e,l._f=t,l._strict=r,(s=new b(ft(At(l))))._nextDay&&(s.add(1,"d"),s._nextDay=void 0),s}function Dt(e,t,n,r){return Mt(e,t,n,r,!1)}r.createFromInputFallback=C("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))}),r.ISO_8601=function(){},r.RFC_2822=function(){};var Ot=C("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=Dt.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:g()}),Pt=C("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var e=Dt.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:g()});function It(e,t){var n,r;if(1===t.length&&i(t[0])&&(t=t[0]),!t.length)return Dt();for(n=t[0],r=1;r<t.length;++r)t[r].isValid()&&!t[r][e](n)||(n=t[r]);return n}var Et=["year","quarter","month","week","day","hour","minute","second","millisecond"];function Rt(e){var t=R(e),n=t.year||0,r=t.quarter||0,i=t.month||0,a=t.week||t.isoWeek||0,o=t.day||0,s=t.hour||0,l=t.minute||0,c=t.second||0,u=t.millisecond||0;this._isValid=function(e){for(var t in e)if(-1===Te.call(Et,t)||null!=e[t]&&isNaN(e[t]))return!1;for(var n=!1,r=0;r<Et.length;++r)if(e[Et[r]]){if(n)return!1;parseFloat(e[Et[r]])!==w(e[Et[r]])&&(n=!0)}return!0}(t),this._milliseconds=+u+1e3*c+6e4*l+1e3*s*60*60,this._days=+o+7*a,this._months=+i+3*r+12*n,this._data={},this._locale=ht(),this._bubble()}function Nt(e){return e instanceof Rt}function Ft(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function Lt(e,t){B(e,0,0,function(){var e=this.utcOffset(),n="+";return e<0&&(e=-e,n="-"),n+L(~~(e/60),2)+t+L(~~e%60,2)})}Lt("Z",":"),Lt("ZZ",""),ce("Z",oe),ce("ZZ",oe),fe(["Z","ZZ"],function(e,t,n){n._useUTC=!0,n._tzm=Vt(oe,e)});var jt=/([\+\-]|\d\d)/gi;function Vt(e,t){var n=(t||"").match(e);if(null===n)return null;var r=n[n.length-1]||[],i=(r+"").match(jt)||["-",0,0],a=60*i[1]+w(i[2]);return 0===a?0:"+"===i[0]?a:-a}function zt(e,t){var n,i;return t._isUTC?(n=t.clone(),i=(_(e)||l(e)?e.valueOf():Dt(e).valueOf())-n.valueOf(),n._d.setTime(n._d.valueOf()+i),r.updateOffset(n,!1),n):Dt(e).local()}function Ht(e){return 15*-Math.round(e._d.getTimezoneOffset()/15)}function Bt(){return!!this.isValid()&&this._isUTC&&0===this._offset}r.updateOffset=function(){};var Ut=/^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,Wt=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function Yt(e,t){var n,r,i,a,o,l,c=e,d=null;return Nt(e)?c={ms:e._milliseconds,d:e._days,M:e._months}:s(e)?(c={},t?c[t]=e:c.milliseconds=e):(d=Ut.exec(e))?(n="-"===d[1]?-1:1,c={y:0,d:w(d[ye])*n,h:w(d[be])*n,m:w(d[_e])*n,s:w(d[xe])*n,ms:w(Ft(1e3*d[we]))*n}):(d=Wt.exec(e))?(n="-"===d[1]?-1:1,c={y:Gt(d[2],n),M:Gt(d[3],n),w:Gt(d[4],n),d:Gt(d[5],n),h:Gt(d[6],n),m:Gt(d[7],n),s:Gt(d[8],n)}):null==c?c={}:"object"===(void 0===c?"undefined":_typeof(c))&&("from"in c||"to"in c)&&(a=Dt(c.from),o=Dt(c.to),i=a.isValid()&&o.isValid()?(o=zt(o,a),a.isBefore(o)?l=qt(a,o):((l=qt(o,a)).milliseconds=-l.milliseconds,l.months=-l.months),l):{milliseconds:0,months:0},(c={}).ms=i.milliseconds,c.M=i.months),r=new Rt(c),Nt(e)&&u(e,"_locale")&&(r._locale=e._locale),r}function Gt(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function qt(e,t){var n={};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function Kt(e,t){return function(n,r){var i;return null===r||isNaN(+r)||(A(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),i=n,n=r,r=i),Xt(this,Yt(n="string"==typeof n?+n:n,r),e),this}}function Xt(e,t,n,i){var a=t._milliseconds,o=Ft(t._days),s=Ft(t._months);e.isValid()&&(i=null==i||i,s&&Ne(e,De(e,"Month")+s*n),o&&Oe(e,"Date",De(e,"Date")+o*n),a&&e._d.setTime(e._d.valueOf()+a*n),i&&r.updateOffset(e,o||s))}Yt.fn=Rt.prototype,Yt.invalid=function(){return Yt(NaN)};var Jt=Kt(1,"add"),Zt=Kt(-1,"subtract");function Qt(e,t){var n,r,i=12*(t.year()-e.year())+(t.month()-e.month()),a=e.clone().add(i,"months");return t-a<0?(n=e.clone().add(i-1,"months"),r=(t-a)/(a-n)):(n=e.clone().add(i+1,"months"),r=(t-a)/(n-a)),-(i+r)||0}function en(e){var t;return void 0===e?this._locale._abbr:(null!=(t=ht(e))&&(this._locale=t),this)}r.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",r.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var tn=C("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(e){return void 0===e?this.localeData():this.locale(e)});function nn(){return this._locale}var rn=1e3,an=60*rn,on=60*an,sn=3506328*on;function ln(e,t){return(e%t+t)%t}function cn(e,t,n){return e<100&&e>=0?new Date(e+400,t,n)-sn:new Date(e,t,n).valueOf()}function un(e,t,n){return e<100&&e>=0?Date.UTC(e+400,t,n)-sn:Date.UTC(e,t,n)}function dn(e,t){B(0,[e,e.length],0,t)}function hn(e,t,n,r,i){var a;return null==e?Ue(this,r,i).year:(a=We(e,r,i),t>a&&(t=a),function(e,t,n,r,i){var a=Be(e,t,n,r,i),o=ze(a.year,0,a.dayOfYear);return this.year(o.getUTCFullYear()),this.month(o.getUTCMonth()),this.date(o.getUTCDate()),this}.call(this,e,t,n,r,i))}B(0,["gg",2],0,function(){return this.weekYear()%100}),B(0,["GG",2],0,function(){return this.isoWeekYear()%100}),dn("gggg","weekYear"),dn("ggggg","weekYear"),dn("GGGG","isoWeekYear"),dn("GGGGG","isoWeekYear"),I("weekYear","gg"),I("isoWeekYear","GG"),F("weekYear",1),F("isoWeekYear",1),ce("G",ie),ce("g",ie),ce("GG",J,G),ce("gg",J,G),ce("GGGG",te,K),ce("gggg",te,K),ce("GGGGG",ne,X),ce("ggggg",ne,X),pe(["gggg","ggggg","GGGG","GGGGG"],function(e,t,n,r){t[r.substr(0,2)]=w(e)}),pe(["gg","GG"],function(e,t,n,i){t[i]=r.parseTwoDigitYear(e)}),B("Q",0,"Qo","quarter"),I("quarter","Q"),F("quarter",7),ce("Q",Y),fe("Q",function(e,t){t[ve]=3*(w(e)-1)}),B("D",["DD",2],"Do","date"),I("date","D"),F("date",9),ce("D",J),ce("DD",J,G),ce("Do",function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient}),fe(["D","DD"],ye),fe("Do",function(e,t){t[ye]=w(e.match(J)[0])});var fn=Me("Date",!0);B("DDD",["DDDD",3],"DDDo","dayOfYear"),I("dayOfYear","DDD"),F("dayOfYear",4),ce("DDD",ee),ce("DDDD",q),fe(["DDD","DDDD"],function(e,t,n){n._dayOfYear=w(e)}),B("m",["mm",2],0,"minute"),I("minute","m"),F("minute",14),ce("m",J),ce("mm",J,G),fe(["m","mm"],_e);var pn=Me("Minutes",!1);B("s",["ss",2],0,"second"),I("second","s"),F("second",15),ce("s",J),ce("ss",J,G),fe(["s","ss"],xe);var gn,mn=Me("Seconds",!1);for(B("S",0,0,function(){return~~(this.millisecond()/100)}),B(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),B(0,["SSS",3],0,"millisecond"),B(0,["SSSS",4],0,function(){return 10*this.millisecond()}),B(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),B(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),B(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),B(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),B(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),I("millisecond","ms"),F("millisecond",16),ce("S",ee,Y),ce("SS",ee,G),ce("SSS",ee,q),gn="SSSS";gn.length<=9;gn+="S")ce(gn,re);function vn(e,t){t[we]=w(1e3*("0."+e))}for(gn="S";gn.length<=9;gn+="S")fe(gn,vn);var yn=Me("Milliseconds",!1);B("z",0,0,"zoneAbbr"),B("zz",0,0,"zoneName");var bn=b.prototype;function _n(e){return e}bn.add=Jt,bn.calendar=function(e,t){var n=e||Dt(),i=zt(n,this).startOf("day"),a=r.calendarFormat(this,i)||"sameElse",o=t&&(M(t[a])?t[a].call(this,n):t[a]);return this.format(o||this.localeData().calendar(a,this,Dt(n)))},bn.clone=function(){return new b(this)},bn.diff=function(e,t,n){var r,i,a;if(!this.isValid())return NaN;if(!(r=zt(e,this)).isValid())return NaN;switch(i=6e4*(r.utcOffset()-this.utcOffset()),t=E(t)){case"year":a=Qt(this,r)/12;break;case"month":a=Qt(this,r);break;case"quarter":a=Qt(this,r)/3;break;case"second":a=(this-r)/1e3;break;case"minute":a=(this-r)/6e4;break;case"hour":a=(this-r)/36e5;break;case"day":a=(this-r-i)/864e5;break;case"week":a=(this-r-i)/6048e5;break;default:a=this-r}return n?a:x(a)},bn.endOf=function(e){var t;if(void 0===(e=E(e))||"millisecond"===e||!this.isValid())return this;var n=this._isUTC?un:cn;switch(e){case"year":t=n(this.year()+1,0,1)-1;break;case"quarter":t=n(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":t=n(this.year(),this.month()+1,1)-1;break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":t=n(this.year(),this.month(),this.date()+1)-1;break;case"hour":t=this._d.valueOf(),t+=on-ln(t+(this._isUTC?0:this.utcOffset()*an),on)-1;break;case"minute":t=this._d.valueOf(),t+=an-ln(t,an)-1;break;case"second":t=this._d.valueOf(),t+=rn-ln(t,rn)-1}return this._d.setTime(t),r.updateOffset(this,!0),this},bn.format=function(e){e||(e=this.isUtc()?r.defaultFormatUtc:r.defaultFormat);var t=U(this,e);return this.localeData().postformat(t)},bn.from=function(e,t){return this.isValid()&&(_(e)&&e.isValid()||Dt(e).isValid())?Yt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},bn.fromNow=function(e){return this.from(Dt(),e)},bn.to=function(e,t){return this.isValid()&&(_(e)&&e.isValid()||Dt(e).isValid())?Yt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},bn.toNow=function(e){return this.to(Dt(),e)},bn.get=function(e){return M(this[e=E(e)])?this[e]():this},bn.invalidAt=function(){return f(this).overflow},bn.isAfter=function(e,t){var n=_(e)?e:Dt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=E(t)||"millisecond")?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())},bn.isBefore=function(e,t){var n=_(e)?e:Dt(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=E(t)||"millisecond")?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())},bn.isBetween=function(e,t,n,r){var i=_(e)?e:Dt(e),a=_(t)?t:Dt(t);return!!(this.isValid()&&i.isValid()&&a.isValid())&&(("("===(r=r||"()")[0]?this.isAfter(i,n):!this.isBefore(i,n))&&(")"===r[1]?this.isBefore(a,n):!this.isAfter(a,n)))},bn.isSame=function(e,t){var n,r=_(e)?e:Dt(e);return!(!this.isValid()||!r.isValid())&&("millisecond"===(t=E(t)||"millisecond")?this.valueOf()===r.valueOf():(n=r.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))},bn.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},bn.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},bn.isValid=function(){return p(this)},bn.lang=tn,bn.locale=en,bn.localeData=nn,bn.max=Pt,bn.min=Ot,bn.parsingFlags=function(){return d({},f(this))},bn.set=function(e,t){if("object"===(void 0===e?"undefined":_typeof(e)))for(var n=function(e){var t=[];for(var n in e)t.push({unit:n,priority:N[n]});return t.sort(function(e,t){return e.priority-t.priority}),t}(e=R(e)),r=0;r<n.length;r++)this[n[r].unit](e[n[r].unit]);else if(M(this[e=E(e)]))return this[e](t);return this},bn.startOf=function(e){var t;if(void 0===(e=E(e))||"millisecond"===e||!this.isValid())return this;var n=this._isUTC?un:cn;switch(e){case"year":t=n(this.year(),0,1);break;case"quarter":t=n(this.year(),this.month()-this.month()%3,1);break;case"month":t=n(this.year(),this.month(),1);break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":t=n(this.year(),this.month(),this.date());break;case"hour":t=this._d.valueOf(),t-=ln(t+(this._isUTC?0:this.utcOffset()*an),on);break;case"minute":t=this._d.valueOf(),t-=ln(t,an);break;case"second":t=this._d.valueOf(),t-=ln(t,rn)}return this._d.setTime(t),r.updateOffset(this,!0),this},bn.subtract=Zt,bn.toArray=function(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]},bn.toObject=function(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}},bn.toDate=function(){return new Date(this.valueOf())},bn.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,n=t?this.clone().utc():this;return n.year()<0||n.year()>9999?U(n,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):M(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",U(n,"Z")):U(n,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},bn.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e="moment",t="";this.isLocal()||(e=0===this.utcOffset()?"moment.utc":"moment.parseZone",t="Z");var n="["+e+'("]',r=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",i=t+'[")]';return this.format(n+r+"-MM-DD[T]HH:mm:ss.SSS"+i)},bn.toJSON=function(){return this.isValid()?this.toISOString():null},bn.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},bn.unix=function(){return Math.floor(this.valueOf()/1e3)},bn.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},bn.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},bn.year=Ae,bn.isLeapYear=function(){return $e(this.year())},bn.weekYear=function(e){return hn.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},bn.isoWeekYear=function(e){return hn.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},bn.quarter=bn.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},bn.month=Fe,bn.daysInMonth=function(){return Pe(this.year(),this.month())},bn.week=bn.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},bn.isoWeek=bn.isoWeeks=function(e){var t=Ue(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},bn.weeksInYear=function(){var e=this.localeData()._week;return We(this.year(),e.dow,e.doy)},bn.isoWeeksInYear=function(){return We(this.year(),1,4)},bn.date=fn,bn.day=bn.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=function(e,t){return"string"!=typeof e?e:isNaN(e)?"number"==typeof(e=t.weekdaysParse(e))?e:null:parseInt(e,10)}(e,this.localeData()),this.add(e-t,"d")):t},bn.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},bn.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=function(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7},bn.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},bn.hour=bn.hours=it,bn.minute=bn.minutes=pn,bn.second=bn.seconds=mn,bn.millisecond=bn.milliseconds=yn,bn.utcOffset=function(e,t,n){var i,a=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"==typeof e){if(null===(e=Vt(oe,e)))return this}else Math.abs(e)<16&&!n&&(e*=60);return!this._isUTC&&t&&(i=Ht(this)),this._offset=e,this._isUTC=!0,null!=i&&this.add(i,"m"),a!==e&&(!t||this._changeInProgress?Xt(this,Yt(e-a,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,r.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?a:Ht(this)},bn.utc=function(e){return this.utcOffset(0,e)},bn.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Ht(this),"m")),this},bn.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=Vt(ae,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},bn.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?Dt(e).utcOffset():0,(this.utcOffset()-e)%60==0)},bn.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},bn.isLocal=function(){return!!this.isValid()&&!this._isUTC},bn.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},bn.isUtc=Bt,bn.isUTC=Bt,bn.zoneAbbr=function(){return this._isUTC?"UTC":""},bn.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},bn.dates=C("dates accessor is deprecated. Use date instead.",fn),bn.months=C("months accessor is deprecated. Use month instead",Fe),bn.years=C("years accessor is deprecated. Use year instead",Ae),bn.zone=C("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()}),bn.isDSTShifted=C("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",function(){if(!o(this._isDSTShifted))return this._isDSTShifted;var e={};if(v(e,this),(e=At(e))._a){var t=e._isUTC?h(e._a):Dt(e._a);this._isDSTShifted=this.isValid()&&k(e._a,t.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted});var xn=O.prototype;function wn(e,t,n,r){var i=ht(),a=h().set(r,t);return i[n](a,e)}function kn(e,t,n){if(s(e)&&(t=e,e=void 0),e=e||"",null!=t)return wn(e,t,n,"month");var r,i=[];for(r=0;r<12;r++)i[r]=wn(e,r,n,"month");return i}function Sn(e,t,n,r){"boolean"==typeof e?(s(t)&&(n=t,t=void 0),t=t||""):(n=t=e,e=!1,s(t)&&(n=t,t=void 0),t=t||"");var i,a=ht(),o=e?a._week.dow:0;if(null!=n)return wn(t,(n+o)%7,r,"day");var l=[];for(i=0;i<7;i++)l[i]=wn(t,(i+o)%7,r,"day");return l}xn.calendar=function(e,t,n){var r=this._calendar[e]||this._calendar.sameElse;return M(r)?r.call(t,n):r},xn.longDateFormat=function(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.replace(/MMMM|MM|DD|dddd/g,function(e){return e.slice(1)}),this._longDateFormat[e])},xn.invalidDate=function(){return this._invalidDate},xn.ordinal=function(e){return this._ordinal.replace("%d",e)},xn.preparse=_n,xn.postformat=_n,xn.relativeTime=function(e,t,n,r){var i=this._relativeTime[n];return M(i)?i(e,t,n,r):i.replace(/%d/i,e)},xn.pastFuture=function(e,t){var n=this._relativeTime[e>0?"future":"past"];return M(n)?n(t):n.replace(/%s/i,t)},xn.set=function(e){var t,n;for(n in e)M(t=e[n])?this[n]=t:this["_"+n]=t;this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},xn.months=function(e,t){return e?i(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||Ie).test(t)?"format":"standalone"][e.month()]:i(this._months)?this._months:this._months.standalone},xn.monthsShort=function(e,t){return e?i(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[Ie.test(t)?"format":"standalone"][e.month()]:i(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},xn.monthsParse=function(e,t,n){var r,i,a;if(this._monthsParseExact)return function(e,t,n){var r,i,a,o=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],r=0;r<12;++r)a=h([2e3,r]),this._shortMonthsParse[r]=this.monthsShort(a,"").toLocaleLowerCase(),this._longMonthsParse[r]=this.months(a,"").toLocaleLowerCase();return n?"MMM"===t?-1!==(i=Te.call(this._shortMonthsParse,o))?i:null:-1!==(i=Te.call(this._longMonthsParse,o))?i:null:"MMM"===t?-1!==(i=Te.call(this._shortMonthsParse,o))?i:-1!==(i=Te.call(this._longMonthsParse,o))?i:null:-1!==(i=Te.call(this._longMonthsParse,o))?i:-1!==(i=Te.call(this._shortMonthsParse,o))?i:null}.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),r=0;r<12;r++){if(i=h([2e3,r]),n&&!this._longMonthsParse[r]&&(this._longMonthsParse[r]=new RegExp("^"+this.months(i,"").replace(".","")+"$","i"),this._shortMonthsParse[r]=new RegExp("^"+this.monthsShort(i,"").replace(".","")+"$","i")),n||this._monthsParse[r]||(a="^"+this.months(i,"")+"|^"+this.monthsShort(i,""),this._monthsParse[r]=new RegExp(a.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[r].test(e))return r;if(n&&"MMM"===t&&this._shortMonthsParse[r].test(e))return r;if(!n&&this._monthsParse[r].test(e))return r}},xn.monthsRegex=function(e){return this._monthsParseExact?(u(this,"_monthsRegex")||Ve.call(this),e?this._monthsStrictRegex:this._monthsRegex):(u(this,"_monthsRegex")||(this._monthsRegex=je),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},xn.monthsShortRegex=function(e){return this._monthsParseExact?(u(this,"_monthsRegex")||Ve.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(u(this,"_monthsShortRegex")||(this._monthsShortRegex=Le),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},xn.week=function(e){return Ue(e,this._week.dow,this._week.doy).week},xn.firstDayOfYear=function(){return this._week.doy},xn.firstDayOfWeek=function(){return this._week.dow},xn.weekdays=function(e,t){var n=i(this._weekdays)?this._weekdays:this._weekdays[e&&!0!==e&&this._weekdays.isFormat.test(t)?"format":"standalone"];return!0===e?Ye(n,this._week.dow):e?n[e.day()]:n},xn.weekdaysMin=function(e){return!0===e?Ye(this._weekdaysMin,this._week.dow):e?this._weekdaysMin[e.day()]:this._weekdaysMin},xn.weekdaysShort=function(e){return!0===e?Ye(this._weekdaysShort,this._week.dow):e?this._weekdaysShort[e.day()]:this._weekdaysShort},xn.weekdaysParse=function(e,t,n){var r,i,a;if(this._weekdaysParseExact)return function(e,t,n){var r,i,a,o=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],r=0;r<7;++r)a=h([2e3,1]).day(r),this._minWeekdaysParse[r]=this.weekdaysMin(a,"").toLocaleLowerCase(),this._shortWeekdaysParse[r]=this.weekdaysShort(a,"").toLocaleLowerCase(),this._weekdaysParse[r]=this.weekdays(a,"").toLocaleLowerCase();return n?"dddd"===t?-1!==(i=Te.call(this._weekdaysParse,o))?i:null:"ddd"===t?-1!==(i=Te.call(this._shortWeekdaysParse,o))?i:null:-1!==(i=Te.call(this._minWeekdaysParse,o))?i:null:"dddd"===t?-1!==(i=Te.call(this._weekdaysParse,o))?i:-1!==(i=Te.call(this._shortWeekdaysParse,o))?i:-1!==(i=Te.call(this._minWeekdaysParse,o))?i:null:"ddd"===t?-1!==(i=Te.call(this._shortWeekdaysParse,o))?i:-1!==(i=Te.call(this._weekdaysParse,o))?i:-1!==(i=Te.call(this._minWeekdaysParse,o))?i:null:-1!==(i=Te.call(this._minWeekdaysParse,o))?i:-1!==(i=Te.call(this._weekdaysParse,o))?i:-1!==(i=Te.call(this._shortWeekdaysParse,o))?i:null}.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),r=0;r<7;r++){if(i=h([2e3,1]).day(r),n&&!this._fullWeekdaysParse[r]&&(this._fullWeekdaysParse[r]=new RegExp("^"+this.weekdays(i,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[r]=new RegExp("^"+this.weekdaysShort(i,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[r]=new RegExp("^"+this.weekdaysMin(i,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[r]||(a="^"+this.weekdays(i,"")+"|^"+this.weekdaysShort(i,"")+"|^"+this.weekdaysMin(i,""),this._weekdaysParse[r]=new RegExp(a.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[r].test(e))return r;if(n&&"ddd"===t&&this._shortWeekdaysParse[r].test(e))return r;if(n&&"dd"===t&&this._minWeekdaysParse[r].test(e))return r;if(!n&&this._weekdaysParse[r].test(e))return r}},xn.weekdaysRegex=function(e){return this._weekdaysParseExact?(u(this,"_weekdaysRegex")||Qe.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(u(this,"_weekdaysRegex")||(this._weekdaysRegex=Xe),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},xn.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(u(this,"_weekdaysRegex")||Qe.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(u(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Je),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},xn.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(u(this,"_weekdaysRegex")||Qe.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(u(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Ze),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},xn.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},xn.meridiem=function(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"},ut("en",{dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10,n=1===w(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th";return e+n}}),r.lang=C("moment.lang is deprecated. Use moment.locale instead.",ut),r.langData=C("moment.langData is deprecated. Use moment.localeData instead.",ht);var Cn=Math.abs;function $n(e,t,n,r){var i=Yt(t,n);return e._milliseconds+=r*i._milliseconds,e._days+=r*i._days,e._months+=r*i._months,e._bubble()}function Tn(e){return e<0?Math.floor(e):Math.ceil(e)}function An(e){return 4800*e/146097}function Mn(e){return 146097*e/4800}function Dn(e){return function(){return this.as(e)}}var On=Dn("ms"),Pn=Dn("s"),In=Dn("m"),En=Dn("h"),Rn=Dn("d"),Nn=Dn("w"),Fn=Dn("M"),Ln=Dn("Q"),jn=Dn("y");function Vn(e){return function(){return this.isValid()?this._data[e]:NaN}}var zn=Vn("milliseconds"),Hn=Vn("seconds"),Bn=Vn("minutes"),Un=Vn("hours"),Wn=Vn("days"),Yn=Vn("months"),Gn=Vn("years"),qn=Math.round,Kn={ss:44,s:45,m:45,h:22,d:26,M:11},Xn=Math.abs;function Jn(e){return(e>0)-(e<0)||+e}function Zn(){if(!this.isValid())return this.localeData().invalidDate();var e,t,n=Xn(this._milliseconds)/1e3,r=Xn(this._days),i=Xn(this._months);e=x(n/60),t=x(e/60),n%=60,e%=60;var a=x(i/12),o=i%=12,s=r,l=t,c=e,u=n?n.toFixed(3).replace(/\.?0+$/,""):"",d=this.asSeconds();if(!d)return"P0D";var h=d<0?"-":"",f=Jn(this._months)!==Jn(d)?"-":"",p=Jn(this._days)!==Jn(d)?"-":"",g=Jn(this._milliseconds)!==Jn(d)?"-":"";return h+"P"+(a?f+a+"Y":"")+(o?f+o+"M":"")+(s?p+s+"D":"")+(l||c||u?"T":"")+(l?g+l+"H":"")+(c?g+c+"M":"")+(u?g+u+"S":"")}var Qn=Rt.prototype;return Qn.isValid=function(){return this._isValid},Qn.abs=function(){var e=this._data;return this._milliseconds=Cn(this._milliseconds),this._days=Cn(this._days),this._months=Cn(this._months),e.milliseconds=Cn(e.milliseconds),e.seconds=Cn(e.seconds),e.minutes=Cn(e.minutes),e.hours=Cn(e.hours),e.months=Cn(e.months),e.years=Cn(e.years),this},Qn.add=function(e,t){return $n(this,e,t,1)},Qn.subtract=function(e,t){return $n(this,e,t,-1)},Qn.as=function(e){if(!this.isValid())return NaN;var t,n,r=this._milliseconds;if("month"===(e=E(e))||"quarter"===e||"year"===e)switch(t=this._days+r/864e5,n=this._months+An(t),e){case"month":return n;case"quarter":return n/3;case"year":return n/12}else switch(t=this._days+Math.round(Mn(this._months)),e){case"week":return t/7+r/6048e5;case"day":return t+r/864e5;case"hour":return 24*t+r/36e5;case"minute":return 1440*t+r/6e4;case"second":return 86400*t+r/1e3;case"millisecond":return Math.floor(864e5*t)+r;default:throw new Error("Unknown unit "+e)}},Qn.asMilliseconds=On,Qn.asSeconds=Pn,Qn.asMinutes=In,Qn.asHours=En,Qn.asDays=Rn,Qn.asWeeks=Nn,Qn.asMonths=Fn,Qn.asQuarters=Ln,Qn.asYears=jn,Qn.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*w(this._months/12):NaN},Qn._bubble=function(){var e,t,n,r,i,a=this._milliseconds,o=this._days,s=this._months,l=this._data;return a>=0&&o>=0&&s>=0||a<=0&&o<=0&&s<=0||(a+=864e5*Tn(Mn(s)+o),o=0,s=0),l.milliseconds=a%1e3,e=x(a/1e3),l.seconds=e%60,t=x(e/60),l.minutes=t%60,n=x(t/60),l.hours=n%24,o+=x(n/24),i=x(An(o)),s+=i,o-=Tn(Mn(i)),r=x(s/12),s%=12,l.days=o,l.months=s,l.years=r,this},Qn.clone=function(){return Yt(this)},Qn.get=function(e){return e=E(e),this.isValid()?this[e+"s"]():NaN},Qn.milliseconds=zn,Qn.seconds=Hn,Qn.minutes=Bn,Qn.hours=Un,Qn.days=Wn,Qn.weeks=function(){return x(this.days()/7)},Qn.months=Yn,Qn.years=Gn,Qn.humanize=function(e){if(!this.isValid())return this.localeData().invalidDate();var t=this.localeData(),n=function(e,t,n){var r=Yt(e).abs(),i=qn(r.as("s")),a=qn(r.as("m")),o=qn(r.as("h")),s=qn(r.as("d")),l=qn(r.as("M")),c=qn(r.as("y")),u=i<=Kn.ss&&["s",i]||i<Kn.s&&["ss",i]||a<=1&&["m"]||a<Kn.m&&["mm",a]||o<=1&&["h"]||o<Kn.h&&["hh",o]||s<=1&&["d"]||s<Kn.d&&["dd",s]||l<=1&&["M"]||l<Kn.M&&["MM",l]||c<=1&&["y"]||["yy",c];return u[2]=t,u[3]=+e>0,u[4]=n,function(e,t,n,r,i){return i.relativeTime(t||1,!!n,e,r)}.apply(null,u)}(this,!e,t);return e&&(n=t.pastFuture(+this,n)),t.postformat(n)},Qn.toISOString=Zn,Qn.toString=Zn,Qn.toJSON=Zn,Qn.locale=en,Qn.localeData=nn,Qn.toIsoString=C("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Zn),Qn.lang=tn,B("X",0,0,"unix"),B("x",0,0,"valueOf"),ce("x",ie),ce("X",/[+-]?\d+(\.\d{1,3})?/),fe("X",function(e,t,n){n._d=new Date(1e3*parseFloat(e,10))}),fe("x",function(e,t,n){n._d=new Date(w(e))}),r.version="2.24.0",t=Dt,r.fn=bn,r.min=function(){return It("isBefore",[].slice.call(arguments,0))},r.max=function(){return It("isAfter",[].slice.call(arguments,0))},r.now=function(){return Date.now?Date.now():+new Date},r.utc=h,r.unix=function(e){return Dt(1e3*e)},r.months=function(e,t){return kn(e,t,"months")},r.isDate=l,r.locale=ut,r.invalid=g,r.duration=Yt,r.isMoment=_,r.weekdays=function(e,t,n){return Sn(e,t,n,"weekdays")},r.parseZone=function(){return Dt.apply(null,arguments).parseZone()},r.localeData=ht,r.isDuration=Nt,r.monthsShort=function(e,t){return kn(e,t,"monthsShort")},r.weekdaysMin=function(e,t,n){return Sn(e,t,n,"weekdaysMin")},r.defineLocale=dt,r.updateLocale=function(e,t){if(null!=t){var n,r,i=at;null!=(r=ct(e))&&(i=r._config),t=D(i,t),(n=new O(t)).parentLocale=ot[e],ot[e]=n,ut(e)}else null!=ot[e]&&(null!=ot[e].parentLocale?ot[e]=ot[e].parentLocale:null!=ot[e]&&delete ot[e]);return ot[e]},r.locales=function(){return $(ot)},r.weekdaysShort=function(e,t,n){return Sn(e,t,n,"weekdaysShort")},r.normalizeUnits=E,r.relativeTimeRounding=function(e){return void 0===e?qn:"function"==typeof e&&(qn=e,!0)},r.relativeTimeThreshold=function(e,t){return void 0!==Kn[e]&&(void 0===t?Kn[e]:(Kn[e]=t,"s"===e&&(Kn.ss=t-1),!0))},r.calendarFormat=function(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},r.prototype=bn,r.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},r}()}),moment$1=moment;moment$1="function"==typeof moment$1?moment$1:window.moment;var MIN_INTEGER=Number.MIN_SAFE_INTEGER||-9007199254740991,MAX_INTEGER=Number.MAX_SAFE_INTEGER||9007199254740991,INTERVALS={millisecond:{common:!0,size:1,steps:[1,2,5,10,20,50,100,250,500]},second:{common:!0,size:1e3,steps:[1,2,5,10,15,30]},minute:{common:!0,size:6e4,steps:[1,2,5,10,15,30]},hour:{common:!0,size:36e5,steps:[1,2,3,6,12]},day:{common:!0,size:864e5,steps:[1,2,5]},week:{common:!1,size:6048e5,steps:[1,2,3,4]},month:{common:!0,size:2628e6,steps:[1,2,3]},quarter:{common:!1,size:7884e6,steps:[1,2,3,4]},year:{common:!0,size:3154e7}},UNITS=Object.keys(INTERVALS);function sorter(e,t){return e-t}function arrayUnique(e){var t,n,r,i={},a=[];for(t=0,n=e.length;t<n;++t)i[r=e[t]]||(i[r]=!0,a.push(r));return a}function buildLookupTable(e,t,n,r){if("linear"===r||!e.length)return[{time:t,pos:0},{time:n,pos:1}];var i,a,o,s,l,c=[],u=[t];for(i=0,a=e.length;i<a;++i)(s=e[i])>t&&s<n&&u.push(s);for(u.push(n),i=0,a=u.length;i<a;++i)l=u[i+1],o=u[i-1],s=u[i],void 0!==o&&void 0!==l&&Math.round((l+o)/2)===s||c.push({time:s,pos:i/(a-1)});return c}function lookup(e,t,n){for(var r,i,a,o=0,s=e.length-1;o>=0&&o<=s;){if(i=e[(r=o+s>>1)-1]||null,a=e[r],!i)return{lo:null,hi:a};if(a[t]<n)o=r+1;else{if(!(i[t]>n))return{lo:i,hi:a};s=r-1}}return{lo:a,hi:null}}function interpolate$1(e,t,n,r){var i=lookup(e,t,n),a=i.lo?i.hi?i.lo:e[e.length-2]:e[0],o=i.lo?i.hi?i.hi:e[e.length-1]:e[1],s=o[t]-a[t],l=s?(n-a[t])/s:0,c=(o[r]-a[r])*l;return a[r]+c}function momentify(e,t){var n=t.parser,r=t.parser||t.format;return"function"==typeof n?n(e):"string"==typeof e&&"string"==typeof r?moment$1(e,r):(e instanceof moment$1||(e=moment$1(e)),e.isValid()?e:"function"==typeof r?r(e):e)}function parse$1(e,t){if(helpers$1.isNullOrUndef(e))return null;var n=t.options.time,r=momentify(t.getRightValue(e),n);return r.isValid()?(n.round&&r.startOf(n.round),r.valueOf()):null}function determineStepSize(e,t,n,r){var i,a,o,s=t-e,l=INTERVALS[n],c=l.size,u=l.steps;if(!u)return Math.ceil(s/(r*c));for(i=0,a=u.length;i<a&&(o=u[i],!(Math.ceil(s/(c*o))<=r));++i);return o}function determineUnitForAutoTicks(e,t,n,r){var i,a,o,s=UNITS.length;for(i=UNITS.indexOf(e);i<s-1;++i)if(o=(a=INTERVALS[UNITS[i]]).steps?a.steps[a.steps.length-1]:MAX_INTEGER,a.common&&Math.ceil((n-t)/(o*a.size))<=r)return UNITS[i];return UNITS[s-1]}function determineUnitForFormatting(e,t,n,r){var i,a,o=moment$1.duration(moment$1(r).diff(moment$1(n)));for(i=UNITS.length-1;i>=UNITS.indexOf(t);i--)if(a=UNITS[i],INTERVALS[a].common&&o.as(a)>=e.length)return a;return UNITS[t?UNITS.indexOf(t):0]}function determineMajorUnit(e){for(var t=UNITS.indexOf(e)+1,n=UNITS.length;t<n;++t)if(INTERVALS[UNITS[t]].common)return UNITS[t]}function generate$1(e,t,n,r){var i,a=r.time,o=a.unit||determineUnitForAutoTicks(a.minUnit,e,t,n),s=determineMajorUnit(o),l=helpers$1.valueOrDefault(a.stepSize,a.unitStepSize),c="week"===o&&a.isoWeekday,u=r.ticks.major.enabled,d=INTERVALS[o],h=moment$1(e),f=moment$1(t),p=[];for(l||(l=determineStepSize(e,t,o,n)),c&&(h=h.isoWeekday(c),f=f.isoWeekday(c)),h=h.startOf(c?"day":o),(f=f.startOf(c?"day":o))<t&&f.add(1,o),i=moment$1(h),u&&s&&!c&&!a.round&&(i.startOf(s),i.add(~~((h-i)/(d.size*l))*l,o));i<f;i.add(l,o))p.push(+i);return p.push(+i),p}function computeOffsets(e,t,n,r,i){var a,o,s=0,l=0;return i.offset&&t.length&&(i.time.min||(a=t.length>1?t[1]:r,o=t[0],s=(interpolate$1(e,"time",a,"pos")-interpolate$1(e,"time",o,"pos"))/2),i.time.max||(a=t[t.length-1],o=t.length>1?t[t.length-2]:n,l=(interpolate$1(e,"time",a,"pos")-interpolate$1(e,"time",o,"pos"))/2)),{left:s,right:l}}function ticksFromTimestamps(e,t){var n,r,i,a,o=[];for(n=0,r=e.length;n<r;++n)i=e[n],a=!!t&&i===+moment$1(i).startOf(t),o.push({value:i,major:a});return o}function determineLabelFormat(e,t){var n,r,i,a=e.length;for(n=0;n<a;n++){if(0!==(r=momentify(e[n],t)).millisecond())return"MMM D, YYYY h:mm:ss.SSS a";0===r.second()&&0===r.minute()&&0===r.hour()||(i=!0)}return i?"MMM D, YYYY h:mm:ss a":"MMM D, YYYY"}var scale_time=function(){var e=core_scale.extend({initialize:function(){if(!moment$1)throw new Error("Chart.js - Moment.js could not be found! You must include it before Chart.js to use the time scale. Download at https://momentjs.com");this.mergeTicksOptions(),core_scale.prototype.initialize.call(this)},update:function(){var e=this.options;return e.time&&e.time.format&&console.warn("options.time.format is deprecated and replaced by options.time.parser."),core_scale.prototype.update.apply(this,arguments)},getRightValue:function(e){return e&&void 0!==e.t&&(e=e.t),core_scale.prototype.getRightValue.call(this,e)},determineDataLimits:function(){var e,t,n,r,i,a,o=this,s=o.chart,l=o.options.time,c=l.unit||"day",u=MAX_INTEGER,d=MIN_INTEGER,h=[],f=[],p=[];for(e=0,n=s.data.labels.length;e<n;++e)p.push(parse$1(s.data.labels[e],o));for(e=0,n=(s.data.datasets||[]).length;e<n;++e)if(s.isDatasetVisible(e))if(i=s.data.datasets[e].data,helpers$1.isObject(i[0]))for(f[e]=[],t=0,r=i.length;t<r;++t)a=parse$1(i[t],o),h.push(a),f[e][t]=a;else h.push.apply(h,p),f[e]=p.slice(0);else f[e]=[];p.length&&(p=arrayUnique(p).sort(sorter),u=Math.min(u,p[0]),d=Math.max(d,p[p.length-1])),h.length&&(h=arrayUnique(h).sort(sorter),u=Math.min(u,h[0]),d=Math.max(d,h[h.length-1])),u=parse$1(l.min,o)||u,d=parse$1(l.max,o)||d,u=u===MAX_INTEGER?+moment$1().startOf(c):u,d=d===MIN_INTEGER?+moment$1().endOf(c)+1:d,o.min=Math.min(u,d),o.max=Math.max(u+1,d),o._horizontal=o.isHorizontal(),o._table=[],o._timestamps={data:h,datasets:f,labels:p}},buildTicks:function(){var e,t,n,r=this,i=r.min,a=r.max,o=r.options,s=o.time,l=[],c=[];switch(o.ticks.source){case"data":l=r._timestamps.data;break;case"labels":l=r._timestamps.labels;break;case"auto":default:l=generate$1(i,a,r.getLabelCapacity(i),o)}for("ticks"===o.bounds&&l.length&&(i=l[0],a=l[l.length-1]),i=parse$1(s.min,r)||i,a=parse$1(s.max,r)||a,e=0,t=l.length;e<t;++e)(n=l[e])>=i&&n<=a&&c.push(n);return r.min=i,r.max=a,r._unit=s.unit||determineUnitForFormatting(c,s.minUnit,r.min,r.max),r._majorUnit=determineMajorUnit(r._unit),r._table=buildLookupTable(r._timestamps.data,i,a,o.distribution),r._offsets=computeOffsets(r._table,c,i,a,o),r._labelFormat=determineLabelFormat(r._timestamps.data,s),ticksFromTimestamps(c,r._majorUnit)},getLabelForIndex:function(e,t){var n=this.chart.data,r=this.options.time,i=n.labels&&e<n.labels.length?n.labels[e]:"",a=n.datasets[t].data[e];return helpers$1.isObject(a)&&(i=this.getRightValue(a)),r.tooltipFormat?momentify(i,r).format(r.tooltipFormat):"string"==typeof i?i:momentify(i,r).format(this._labelFormat)},tickFormatFunction:function(e,t,n,r){var i=this.options,a=e.valueOf(),o=i.time.displayFormats,s=o[this._unit],l=this._majorUnit,c=o[l],u=e.clone().startOf(l).valueOf(),d=i.ticks.major,h=d.enabled&&l&&c&&a===u,f=e.format(r||(h?c:s)),p=h?d:i.ticks.minor,g=helpers$1.valueOrDefault(p.callback,p.userCallback);return g?g(f,t,n):f},convertTicksToLabels:function(e){var t,n,r=[];for(t=0,n=e.length;t<n;++t)r.push(this.tickFormatFunction(moment$1(e[t].value),t,e));return r},getPixelForOffset:function(e){var t=this,n=t._horizontal?t.width:t.height,r=t._horizontal?t.left:t.top,i=interpolate$1(t._table,"time",e,"pos");return r+n*(t._offsets.left+i)/(t._offsets.left+1+t._offsets.right)},getPixelForValue:function(e,t,n){var r=null;if(void 0!==t&&void 0!==n&&(r=this._timestamps.datasets[n][t]),null===r&&(r=parse$1(e,this)),null!==r)return this.getPixelForOffset(r)},getPixelForTick:function(e){var t=this.getTicks();return e>=0&&e<t.length?this.getPixelForOffset(t[e].value):null},getValueForPixel:function(e){var t=this,n=t._horizontal?t.width:t.height,r=t._horizontal?t.left:t.top,i=(n?(e-r)/n:0)*(t._offsets.left+1+t._offsets.left)-t._offsets.right,a=interpolate$1(t._table,"pos",i,"time");return moment$1(a)},getLabelWidth:function(e){var t=this.options.ticks,n=this.ctx.measureText(e).width,r=helpers$1.toRadians(t.maxRotation),i=Math.cos(r),a=Math.sin(r);return n*i+helpers$1.valueOrDefault(t.fontSize,core_defaults.global.defaultFontSize)*a},getLabelCapacity:function(e){var t=this,n=t.options.time.displayFormats.millisecond,r=t.tickFormatFunction(moment$1(e),0,[],n),i=t.getLabelWidth(r),a=t.isHorizontal()?t.width:t.height,o=Math.floor(a/i);return o>0?o:1}});core_scaleService.registerScaleType("time",e,{position:"bottom",distribution:"linear",bounds:"data",time:{parser:!1,format:!1,unit:!1,round:!1,displayFormat:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{millisecond:"h:mm:ss.SSS a",second:"h:mm:ss a",minute:"h:mm a",hour:"hA",day:"MMM D",week:"ll",month:"MMM YYYY",quarter:"[Q]Q - YYYY",year:"YYYY"}},ticks:{autoSkip:!1,source:"auto",major:{enabled:!1}}})};function computeMinSampleSize(e,t){var n,r,i,a,o=e.isHorizontal()?e.width:e.height,s=e.getTicks();for(i=1,a=t.length;i<a;++i)o=Math.min(o,t[i]-t[i-1]);for(i=0,a=s.length;i<a;++i)r=e.getPixelForTick(i),o=i>0?Math.min(o,r-n):o,n=r;return o}function computeFitCategoryTraits(e,t,n){var r,i,a=n.barThickness,o=t.stackCount,s=t.pixels[e];return helpers$1.isNullOrUndef(a)?(r=t.min*n.categoryPercentage,i=n.barPercentage):(r=a*o,i=1),{chunk:r/o,ratio:i,start:s-r/2}}function computeFlexCategoryTraits(e,t,n){var r,i=t.pixels,a=i[e],o=e>0?i[e-1]:null,s=e<i.length-1?i[e+1]:null,l=n.categoryPercentage;return null===o&&(o=a-(null===s?t.end-a:s-a)),null===s&&(s=a+a-o),r=a-(a-o)/2*l,{chunk:(s-o)/2*l/t.stackCount,ratio:n.barPercentage,start:r}}core_defaults._set("bar",{hover:{mode:"label"},scales:{xAxes:[{type:"category",categoryPercentage:.8,barPercentage:.9,offset:!0,gridLines:{offsetGridLines:!0}}],yAxes:[{type:"linear"}]}}),core_defaults._set("horizontalBar",{hover:{mode:"index",axis:"y"},scales:{xAxes:[{type:"linear",position:"bottom"}],yAxes:[{position:"left",type:"category",categoryPercentage:.8,barPercentage:.9,offset:!0,gridLines:{offsetGridLines:!0}}]},elements:{rectangle:{borderSkipped:"left"}},tooltips:{callbacks:{title:function(e,t){var n="";return e.length>0&&(e[0].yLabel?n=e[0].yLabel:t.labels.length>0&&e[0].index<t.labels.length&&(n=t.labels[e[0].index])),n},label:function(e,t){return(t.datasets[e.datasetIndex].label||"")+": "+e.xLabel}},mode:"index",axis:"y"}});var controller_bar=function(e){e.controllers.bar=e.DatasetController.extend({dataElementType:elements.Rectangle,initialize:function(){var t;e.DatasetController.prototype.initialize.apply(this,arguments),(t=this.getMeta()).stack=this.getDataset().stack,t.bar=!0},update:function(e){var t,n,r=this.getMeta().data;for(this._ruler=this.getRuler(),t=0,n=r.length;t<n;++t)this.updateElement(r[t],t,e)},updateElement:function(e,t,n){var r=this,i=r.chart,a=r.getMeta(),o=r.getDataset(),s=e.custom||{},l=i.options.elements.rectangle;e._xScale=r.getScaleForId(a.xAxisID),e._yScale=r.getScaleForId(a.yAxisID),e._datasetIndex=r.index,e._index=t,e._model={datasetLabel:o.label,label:i.data.labels[t],borderSkipped:s.borderSkipped?s.borderSkipped:l.borderSkipped,backgroundColor:s.backgroundColor?s.backgroundColor:helpers$1.valueAtIndexOrDefault(o.backgroundColor,t,l.backgroundColor),borderColor:s.borderColor?s.borderColor:helpers$1.valueAtIndexOrDefault(o.borderColor,t,l.borderColor),borderWidth:s.borderWidth?s.borderWidth:helpers$1.valueAtIndexOrDefault(o.borderWidth,t,l.borderWidth)},r.updateElementGeometry(e,t,n),e.pivot()},updateElementGeometry:function(e,t,n){var r=this,i=e._model,a=r.getValueScale(),o=a.getBasePixel(),s=a.isHorizontal(),l=r._ruler||r.getRuler(),c=r.calculateBarValuePixels(r.index,t),u=r.calculateBarIndexPixels(r.index,t,l);i.horizontal=s,i.base=n?o:c.base,i.x=s?n?o:c.head:u.center,i.y=s?u.center:n?o:c.head,i.height=s?u.size:void 0,i.width=s?void 0:u.size},getValueScaleId:function(){return this.getMeta().yAxisID},getIndexScaleId:function(){return this.getMeta().xAxisID},getValueScale:function(){return this.getScaleForId(this.getValueScaleId())},getIndexScale:function(){return this.getScaleForId(this.getIndexScaleId())},_getStacks:function(e){var t,n,r=this.chart,i=this.getIndexScale().options.stacked,a=void 0===e?r.data.datasets.length:e+1,o=[];for(t=0;t<a;++t)(n=r.getDatasetMeta(t)).bar&&r.isDatasetVisible(t)&&(!1===i||!0===i&&-1===o.indexOf(n.stack)||void 0===i&&(void 0===n.stack||-1===o.indexOf(n.stack)))&&o.push(n.stack);return o},getStackCount:function(){return this._getStacks().length},getStackIndex:function(e,t){var n=this._getStacks(e),r=void 0!==t?n.indexOf(t):-1;return-1===r?n.length-1:r},getRuler:function(){var e,t,n=this.getIndexScale(),r=this.getStackCount(),i=this.index,a=n.isHorizontal(),o=a?n.left:n.top,s=o+(a?n.width:n.height),l=[];for(e=0,t=this.getMeta().data.length;e<t;++e)l.push(n.getPixelForValue(null,e,i));return{min:helpers$1.isNullOrUndef(n.options.barThickness)?computeMinSampleSize(n,l):-1,pixels:l,start:o,end:s,stackCount:r,scale:n}},calculateBarValuePixels:function(e,t){var n,r,i,a,o,s,l=this.chart,c=this.getMeta(),u=this.getValueScale(),d=l.data.datasets,h=u.getRightValue(d[e].data[t]),f=u.options.stacked,p=c.stack,g=0;if(f||void 0===f&&void 0!==p)for(n=0;n<e;++n)(r=l.getDatasetMeta(n)).bar&&r.stack===p&&r.controller.getValueScaleId()===u.id&&l.isDatasetVisible(n)&&(i=u.getRightValue(d[n].data[t]),(h<0&&i<0||h>=0&&i>0)&&(g+=i));return a=u.getPixelForValue(g),{size:s=((o=u.getPixelForValue(g+h))-a)/2,base:a,head:o,center:o+s/2}},calculateBarIndexPixels:function(e,t,n){var r=n.scale.options,i="flex"===r.barThickness?computeFlexCategoryTraits(t,n,r):computeFitCategoryTraits(t,n,r),a=this.getStackIndex(e,this.getMeta().stack),o=i.start+i.chunk*a+i.chunk/2,s=Math.min(helpers$1.valueOrDefault(r.maxBarThickness,1/0),i.chunk*i.ratio);return{base:o-s/2,head:o+s/2,center:o,size:s}},draw:function(){var e=this.chart,t=this.getValueScale(),n=this.getMeta().data,r=this.getDataset(),i=n.length,a=0;for(helpers$1.canvas.clipArea(e.ctx,e.chartArea);a<i;++a)isNaN(t.getRightValue(r.data[a]))||n[a].draw();helpers$1.canvas.unclipArea(e.ctx)}}),e.controllers.horizontalBar=e.controllers.bar.extend({getValueScaleId:function(){return this.getMeta().xAxisID},getIndexScaleId:function(){return this.getMeta().yAxisID}})};core_defaults._set("bubble",{hover:{mode:"single"},scales:{xAxes:[{type:"linear",position:"bottom",id:"x-axis-0"}],yAxes:[{type:"linear",position:"left",id:"y-axis-0"}]},tooltips:{callbacks:{title:function(){return""},label:function(e,t){var n=t.datasets[e.datasetIndex].label||"",r=t.datasets[e.datasetIndex].data[e.index];return n+": ("+e.xLabel+", "+e.yLabel+", "+r.r+")"}}}});var controller_bubble=function(e){e.controllers.bubble=e.DatasetController.extend({dataElementType:elements.Point,update:function(e){var t=this,n=t.getMeta().data;helpers$1.each(n,function(n,r){t.updateElement(n,r,e)})},updateElement:function(e,t,n){var r=this,i=r.getMeta(),a=e.custom||{},o=r.getScaleForId(i.xAxisID),s=r.getScaleForId(i.yAxisID),l=r._resolveElementOptions(e,t),c=r.getDataset().data[t],u=r.index,d=n?o.getPixelForDecimal(.5):o.getPixelForValue("object"===(void 0===c?"undefined":_typeof(c))?c:NaN,t,u),h=n?s.getBasePixel():s.getPixelForValue(c,t,u);e._xScale=o,e._yScale=s,e._options=l,e._datasetIndex=u,e._index=t,e._model={backgroundColor:l.backgroundColor,borderColor:l.borderColor,borderWidth:l.borderWidth,hitRadius:l.hitRadius,pointStyle:l.pointStyle,rotation:l.rotation,radius:n?0:l.radius,skip:a.skip||isNaN(d)||isNaN(h),x:d,y:h},e.pivot()},setHoverStyle:function(e){var t=e._model,n=e._options;e.$previousStyle={backgroundColor:t.backgroundColor,borderColor:t.borderColor,borderWidth:t.borderWidth,radius:t.radius},t.backgroundColor=helpers$1.valueOrDefault(n.hoverBackgroundColor,helpers$1.getHoverColor(n.backgroundColor)),t.borderColor=helpers$1.valueOrDefault(n.hoverBorderColor,helpers$1.getHoverColor(n.borderColor)),t.borderWidth=helpers$1.valueOrDefault(n.hoverBorderWidth,n.borderWidth),t.radius=n.radius+n.hoverRadius},_resolveElementOptions:function(e,t){var n,r,i,a=this.chart,o=a.data.datasets[this.index],s=e.custom||{},l=a.options.elements.point,c=helpers$1.options.resolve,u=o.data[t],d={},h={chart:a,dataIndex:t,dataset:o,datasetIndex:this.index},f=["backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth","hoverRadius","hitRadius","pointStyle","rotation"];for(n=0,r=f.length;n<r;++n)d[i=f[n]]=c([s[i],o[i],l[i]],h,t);return d.radius=c([s.radius,u?u.r:void 0,o.radius,l.radius],h,t),d}})};core_defaults._set("doughnut",{animation:{animateRotate:!0,animateScale:!1},hover:{mode:"single"},legendCallback:function(e){var t=[];t.push('<ul class="'+e.id+'-legend">');var n=e.data,r=n.datasets,i=n.labels;if(r.length)for(var a=0;a<r[0].data.length;++a)t.push('<li><span style="background-color:'+r[0].backgroundColor[a]+'"></span>'),i[a]&&t.push(i[a]),t.push("</li>");return t.push("</ul>"),t.join("")},legend:{labels:{generateLabels:function(e){var t=e.data;return t.labels.length&&t.datasets.length?t.labels.map(function(n,r){var i=e.getDatasetMeta(0),a=t.datasets[0],o=i.data[r],s=o&&o.custom||{},l=helpers$1.valueAtIndexOrDefault,c=e.options.elements.arc;return{text:n,fillStyle:s.backgroundColor?s.backgroundColor:l(a.backgroundColor,r,c.backgroundColor),strokeStyle:s.borderColor?s.borderColor:l(a.borderColor,r,c.borderColor),lineWidth:s.borderWidth?s.borderWidth:l(a.borderWidth,r,c.borderWidth),hidden:isNaN(a.data[r])||i.data[r].hidden,index:r}}):[]}},onClick:function(e,t){var n,r,i,a=t.index,o=this.chart;for(n=0,r=(o.data.datasets||[]).length;n<r;++n)(i=o.getDatasetMeta(n)).data[a]&&(i.data[a].hidden=!i.data[a].hidden);o.update()}},cutoutPercentage:50,rotation:-.5*Math.PI,circumference:2*Math.PI,tooltips:{callbacks:{title:function(){return""},label:function(e,t){var n=t.labels[e.index],r=": "+t.datasets[e.datasetIndex].data[e.index];return helpers$1.isArray(n)?(n=n.slice())[0]+=r:n+=r,n}}}}),core_defaults._set("pie",helpers$1.clone(core_defaults.doughnut)),core_defaults._set("pie",{cutoutPercentage:0});var controller_doughnut=function(e){e.controllers.doughnut=e.controllers.pie=e.DatasetController.extend({dataElementType:elements.Arc,linkScales:helpers$1.noop,getRingIndex:function(e){for(var t=0,n=0;n<e;++n)this.chart.isDatasetVisible(n)&&++t;return t},update:function(e){var t=this,n=t.chart,r=n.chartArea,i=n.options,a=i.elements.arc,o=r.right-r.left-a.borderWidth,s=r.bottom-r.top-a.borderWidth,l=Math.min(o,s),c={x:0,y:0},u=t.getMeta(),d=i.cutoutPercentage,h=i.circumference;if(h<2*Math.PI){var f=i.rotation%(2*Math.PI),p=(f+=2*Math.PI*(f>=Math.PI?-1:f<-Math.PI?1:0))+h,g={x:Math.cos(f),y:Math.sin(f)},m={x:Math.cos(p),y:Math.sin(p)},v=f<=0&&p>=0||f<=2*Math.PI&&2*Math.PI<=p,y=f<=.5*Math.PI&&.5*Math.PI<=p||f<=2.5*Math.PI&&2.5*Math.PI<=p,b=f<=-Math.PI&&-Math.PI<=p||f<=Math.PI&&Math.PI<=p,_=f<=.5*-Math.PI&&.5*-Math.PI<=p||f<=1.5*Math.PI&&1.5*Math.PI<=p,x=d/100,w={x:b?-1:Math.min(g.x*(g.x<0?1:x),m.x*(m.x<0?1:x)),y:_?-1:Math.min(g.y*(g.y<0?1:x),m.y*(m.y<0?1:x))},k={x:v?1:Math.max(g.x*(g.x>0?1:x),m.x*(m.x>0?1:x)),y:y?1:Math.max(g.y*(g.y>0?1:x),m.y*(m.y>0?1:x))},S={width:.5*(k.x-w.x),height:.5*(k.y-w.y)};l=Math.min(o/S.width,s/S.height),c={x:-.5*(k.x+w.x),y:-.5*(k.y+w.y)}}n.borderWidth=t.getMaxBorderWidth(u.data),n.outerRadius=Math.max((l-n.borderWidth)/2,0),n.innerRadius=Math.max(d?n.outerRadius/100*d:0,0),n.radiusLength=(n.outerRadius-n.innerRadius)/n.getVisibleDatasetCount(),n.offsetX=c.x*n.outerRadius,n.offsetY=c.y*n.outerRadius,u.total=t.calculateTotal(),t.outerRadius=n.outerRadius-n.radiusLength*t.getRingIndex(t.index),t.innerRadius=Math.max(t.outerRadius-n.radiusLength,0),helpers$1.each(u.data,function(n,r){t.updateElement(n,r,e)})},updateElement:function(e,t,n){var r=this,i=r.chart,a=i.chartArea,o=i.options,s=o.animation,l=(a.left+a.right)/2,c=(a.top+a.bottom)/2,u=o.rotation,d=o.rotation,h=r.getDataset(),f=n&&s.animateRotate?0:e.hidden?0:r.calculateCircumference(h.data[t])*(o.circumference/(2*Math.PI)),p=n&&s.animateScale?0:r.innerRadius,g=n&&s.animateScale?0:r.outerRadius,m=helpers$1.valueAtIndexOrDefault;helpers$1.extend(e,{_datasetIndex:r.index,_index:t,_model:{x:l+i.offsetX,y:c+i.offsetY,startAngle:u,endAngle:d,circumference:f,outerRadius:g,innerRadius:p,label:m(h.label,t,i.data.labels[t])}});var v=e._model,y=e.custom||{},b=helpers$1.valueAtIndexOrDefault,_=this.chart.options.elements.arc;v.backgroundColor=y.backgroundColor?y.backgroundColor:b(h.backgroundColor,t,_.backgroundColor),v.borderColor=y.borderColor?y.borderColor:b(h.borderColor,t,_.borderColor),v.borderWidth=y.borderWidth?y.borderWidth:b(h.borderWidth,t,_.borderWidth),n&&s.animateRotate||(v.startAngle=0===t?o.rotation:r.getMeta().data[t-1]._model.endAngle,v.endAngle=v.startAngle+v.circumference),e.pivot()},calculateTotal:function(){var e,t=this.getDataset(),n=this.getMeta(),r=0;return helpers$1.each(n.data,function(n,i){e=t.data[i],isNaN(e)||n.hidden||(r+=Math.abs(e))}),r},calculateCircumference:function(e){var t=this.getMeta().total;return t>0&&!isNaN(e)?2*Math.PI*(Math.abs(e)/t):0},getMaxBorderWidth:function(e){for(var t,n,r=0,i=this.index,a=e.length,o=0;o<a;o++)t=e[o]._model?e[o]._model.borderWidth:0,r=(n=e[o]._chart?e[o]._chart.config.data.datasets[i].hoverBorderWidth:0)>(r=t>r?t:r)?n:r;return r}})};core_defaults._set("line",{showLines:!0,spanGaps:!1,hover:{mode:"label"},scales:{xAxes:[{type:"category",id:"x-axis-0"}],yAxes:[{type:"linear",id:"y-axis-0"}]}});var controller_line=function(e){function t(e,t){return helpers$1.valueOrDefault(e.showLine,t.showLines)}e.controllers.line=e.DatasetController.extend({datasetElementType:elements.Line,dataElementType:elements.Point,update:function(e){var n,r,i,a=this,o=a.getMeta(),s=o.dataset,l=o.data||[],c=a.chart.options,u=c.elements.line,d=a.getScaleForId(o.yAxisID),h=a.getDataset(),f=t(h,c);for(f&&(i=s.custom||{},void 0!==h.tension&&void 0===h.lineTension&&(h.lineTension=h.tension),s._scale=d,s._datasetIndex=a.index,s._children=l,s._model={spanGaps:h.spanGaps?h.spanGaps:c.spanGaps,tension:i.tension?i.tension:helpers$1.valueOrDefault(h.lineTension,u.tension),backgroundColor:i.backgroundColor?i.backgroundColor:h.backgroundColor||u.backgroundColor,borderWidth:i.borderWidth?i.borderWidth:h.borderWidth||u.borderWidth,borderColor:i.borderColor?i.borderColor:h.borderColor||u.borderColor,borderCapStyle:i.borderCapStyle?i.borderCapStyle:h.borderCapStyle||u.borderCapStyle,borderDash:i.borderDash?i.borderDash:h.borderDash||u.borderDash,borderDashOffset:i.borderDashOffset?i.borderDashOffset:h.borderDashOffset||u.borderDashOffset,borderJoinStyle:i.borderJoinStyle?i.borderJoinStyle:h.borderJoinStyle||u.borderJoinStyle,fill:i.fill?i.fill:void 0!==h.fill?h.fill:u.fill,steppedLine:i.steppedLine?i.steppedLine:helpers$1.valueOrDefault(h.steppedLine,u.stepped),cubicInterpolationMode:i.cubicInterpolationMode?i.cubicInterpolationMode:helpers$1.valueOrDefault(h.cubicInterpolationMode,u.cubicInterpolationMode)},s.pivot()),n=0,r=l.length;n<r;++n)a.updateElement(l[n],n,e);for(f&&0!==s._model.tension&&a.updateBezierControlPoints(),n=0,r=l.length;n<r;++n)l[n].pivot()},getPointBackgroundColor:function(e,t){var n=this.chart.options.elements.point.backgroundColor,r=this.getDataset(),i=e.custom||{};return i.backgroundColor?n=i.backgroundColor:r.pointBackgroundColor?n=helpers$1.valueAtIndexOrDefault(r.pointBackgroundColor,t,n):r.backgroundColor&&(n=r.backgroundColor),n},getPointBorderColor:function(e,t){var n=this.chart.options.elements.point.borderColor,r=this.getDataset(),i=e.custom||{};return i.borderColor?n=i.borderColor:r.pointBorderColor?n=helpers$1.valueAtIndexOrDefault(r.pointBorderColor,t,n):r.borderColor&&(n=r.borderColor),n},getPointBorderWidth:function(e,t){var n=this.chart.options.elements.point.borderWidth,r=this.getDataset(),i=e.custom||{};return isNaN(i.borderWidth)?!isNaN(r.pointBorderWidth)||helpers$1.isArray(r.pointBorderWidth)?n=helpers$1.valueAtIndexOrDefault(r.pointBorderWidth,t,n):isNaN(r.borderWidth)||(n=r.borderWidth):n=i.borderWidth,n},getPointRotation:function(e,t){var n=this.chart.options.elements.point.rotation,r=this.getDataset(),i=e.custom||{};return isNaN(i.rotation)?isNaN(r.pointRotation)&&!helpers$1.isArray(r.pointRotation)||(n=helpers$1.valueAtIndexOrDefault(r.pointRotation,t,n)):n=i.rotation,n},updateElement:function(e,t,n){var r,i,a=this,o=a.getMeta(),s=e.custom||{},l=a.getDataset(),c=a.index,u=l.data[t],d=a.getScaleForId(o.yAxisID),h=a.getScaleForId(o.xAxisID),f=a.chart.options.elements.point;void 0!==l.radius&&void 0===l.pointRadius&&(l.pointRadius=l.radius),void 0!==l.hitRadius&&void 0===l.pointHitRadius&&(l.pointHitRadius=l.hitRadius),r=h.getPixelForValue("object"===(void 0===u?"undefined":_typeof(u))?u:NaN,t,c),i=n?d.getBasePixel():a.calculatePointY(u,t,c),e._xScale=h,e._yScale=d,e._datasetIndex=c,e._index=t,e._model={x:r,y:i,skip:s.skip||isNaN(r)||isNaN(i),radius:s.radius||helpers$1.valueAtIndexOrDefault(l.pointRadius,t,f.radius),pointStyle:s.pointStyle||helpers$1.valueAtIndexOrDefault(l.pointStyle,t,f.pointStyle),rotation:a.getPointRotation(e,t),backgroundColor:a.getPointBackgroundColor(e,t),borderColor:a.getPointBorderColor(e,t),borderWidth:a.getPointBorderWidth(e,t),tension:o.dataset._model?o.dataset._model.tension:0,steppedLine:!!o.dataset._model&&o.dataset._model.steppedLine,hitRadius:s.hitRadius||helpers$1.valueAtIndexOrDefault(l.pointHitRadius,t,f.hitRadius)}},calculatePointY:function(e,t,n){var r,i,a,o=this.chart,s=this.getMeta(),l=this.getScaleForId(s.yAxisID),c=0,u=0;if(l.options.stacked){for(r=0;r<n;r++)if(i=o.data.datasets[r],"line"===(a=o.getDatasetMeta(r)).type&&a.yAxisID===l.id&&o.isDatasetVisible(r)){var d=Number(l.getRightValue(i.data[t]));d<0?u+=d||0:c+=d||0}var h=Number(l.getRightValue(e));return h<0?l.getPixelForValue(u+h):l.getPixelForValue(c+h)}return l.getPixelForValue(e)},updateBezierControlPoints:function(){var e,t,n,r,i=this.getMeta(),a=this.chart.chartArea,o=i.data||[];function s(e,t,n){return Math.max(Math.min(e,n),t)}if(i.dataset._model.spanGaps&&(o=o.filter(function(e){return!e._model.skip})),"monotone"===i.dataset._model.cubicInterpolationMode)helpers$1.splineCurveMonotone(o);else for(e=0,t=o.length;e<t;++e)n=o[e]._model,r=helpers$1.splineCurve(helpers$1.previousItem(o,e)._model,n,helpers$1.nextItem(o,e)._model,i.dataset._model.tension),n.controlPointPreviousX=r.previous.x,n.controlPointPreviousY=r.previous.y,n.controlPointNextX=r.next.x,n.controlPointNextY=r.next.y;if(this.chart.options.elements.line.capBezierPoints)for(e=0,t=o.length;e<t;++e)(n=o[e]._model).controlPointPreviousX=s(n.controlPointPreviousX,a.left,a.right),n.controlPointPreviousY=s(n.controlPointPreviousY,a.top,a.bottom),n.controlPointNextX=s(n.controlPointNextX,a.left,a.right),n.controlPointNextY=s(n.controlPointNextY,a.top,a.bottom)},draw:function(){var e,n=this.chart,r=this.getMeta(),i=r.data||[],a=n.chartArea,o=i.length,s=0;for(t(this.getDataset(),n.options)&&(e=(r.dataset._model.borderWidth||0)/2,helpers$1.canvas.clipArea(n.ctx,{left:a.left,right:a.right,top:a.top-e,bottom:a.bottom+e}),r.dataset.draw(),helpers$1.canvas.unclipArea(n.ctx));s<o;++s)i[s].draw(a)},setHoverStyle:function(e){var t=this.chart.data.datasets[e._datasetIndex],n=e._index,r=e.custom||{},i=e._model;e.$previousStyle={backgroundColor:i.backgroundColor,borderColor:i.borderColor,borderWidth:i.borderWidth,radius:i.radius},i.backgroundColor=r.hoverBackgroundColor||helpers$1.valueAtIndexOrDefault(t.pointHoverBackgroundColor,n,helpers$1.getHoverColor(i.backgroundColor)),i.borderColor=r.hoverBorderColor||helpers$1.valueAtIndexOrDefault(t.pointHoverBorderColor,n,helpers$1.getHoverColor(i.borderColor)),i.borderWidth=r.hoverBorderWidth||helpers$1.valueAtIndexOrDefault(t.pointHoverBorderWidth,n,i.borderWidth),i.radius=r.hoverRadius||helpers$1.valueAtIndexOrDefault(t.pointHoverRadius,n,this.chart.options.elements.point.hoverRadius)}})};core_defaults._set("polarArea",{scale:{type:"radialLinear",angleLines:{display:!1},gridLines:{circular:!0},pointLabels:{display:!1},ticks:{beginAtZero:!0}},animation:{animateRotate:!0,animateScale:!0},startAngle:-.5*Math.PI,legendCallback:function(e){var t=[];t.push('<ul class="'+e.id+'-legend">');var n=e.data,r=n.datasets,i=n.labels;if(r.length)for(var a=0;a<r[0].data.length;++a)t.push('<li><span style="background-color:'+r[0].backgroundColor[a]+'"></span>'),i[a]&&t.push(i[a]),t.push("</li>");return t.push("</ul>"),t.join("")},legend:{labels:{generateLabels:function(e){var t=e.data;return t.labels.length&&t.datasets.length?t.labels.map(function(n,r){var i=e.getDatasetMeta(0),a=t.datasets[0],o=i.data[r].custom||{},s=helpers$1.valueAtIndexOrDefault,l=e.options.elements.arc;return{text:n,fillStyle:o.backgroundColor?o.backgroundColor:s(a.backgroundColor,r,l.backgroundColor),strokeStyle:o.borderColor?o.borderColor:s(a.borderColor,r,l.borderColor),lineWidth:o.borderWidth?o.borderWidth:s(a.borderWidth,r,l.borderWidth),hidden:isNaN(a.data[r])||i.data[r].hidden,index:r}}):[]}},onClick:function(e,t){var n,r,i,a=t.index,o=this.chart;for(n=0,r=(o.data.datasets||[]).length;n<r;++n)(i=o.getDatasetMeta(n)).data[a].hidden=!i.data[a].hidden;o.update()}},tooltips:{callbacks:{title:function(){return""},label:function(e,t){return t.labels[e.index]+": "+e.yLabel}}}});var controller_polarArea=function(e){e.controllers.polarArea=e.DatasetController.extend({dataElementType:elements.Arc,linkScales:helpers$1.noop,update:function(e){var t,n,r,i=this,a=i.getDataset(),o=i.getMeta(),s=i.chart.options.startAngle||0,l=i._starts=[],c=i._angles=[];for(i._updateRadius(),o.count=i.countVisibleElements(),t=0,n=a.data.length;t<n;t++)l[t]=s,r=i._computeAngle(t),c[t]=r,s+=r;helpers$1.each(o.data,function(t,n){i.updateElement(t,n,e)})},_updateRadius:function(){var e=this,t=e.chart,n=t.chartArea,r=t.options,i=r.elements.arc,a=Math.min(n.right-n.left,n.bottom-n.top);t.outerRadius=Math.max((a-i.borderWidth/2)/2,0),t.innerRadius=Math.max(r.cutoutPercentage?t.outerRadius/100*r.cutoutPercentage:1,0),t.radiusLength=(t.outerRadius-t.innerRadius)/t.getVisibleDatasetCount(),e.outerRadius=t.outerRadius-t.radiusLength*e.index,e.innerRadius=e.outerRadius-t.radiusLength},updateElement:function(e,t,n){var r=this,i=r.chart,a=r.getDataset(),o=i.options,s=o.animation,l=i.scale,c=i.data.labels,u=l.xCenter,d=l.yCenter,h=o.startAngle,f=e.hidden?0:l.getDistanceFromCenterForValue(a.data[t]),p=r._starts[t],g=p+(e.hidden?0:r._angles[t]),m=s.animateScale?0:l.getDistanceFromCenterForValue(a.data[t]);helpers$1.extend(e,{_datasetIndex:r.index,_index:t,_scale:l,_model:{x:u,y:d,innerRadius:0,outerRadius:n?m:f,startAngle:n&&s.animateRotate?h:p,endAngle:n&&s.animateRotate?h:g,label:helpers$1.valueAtIndexOrDefault(c,t,c[t])}});var v=this.chart.options.elements.arc,y=e.custom||{},b=helpers$1.valueAtIndexOrDefault,_=e._model;_.backgroundColor=y.backgroundColor?y.backgroundColor:b(a.backgroundColor,t,v.backgroundColor),_.borderColor=y.borderColor?y.borderColor:b(a.borderColor,t,v.borderColor),_.borderWidth=y.borderWidth?y.borderWidth:b(a.borderWidth,t,v.borderWidth),e.pivot()},countVisibleElements:function(){var e=this.getDataset(),t=this.getMeta(),n=0;return helpers$1.each(t.data,function(t,r){isNaN(e.data[r])||t.hidden||n++}),n},_computeAngle:function(e){var t=this,n=this.getMeta().count,r=t.getDataset(),i=t.getMeta();if(isNaN(r.data[e])||i.data[e].hidden)return 0;var a={chart:t.chart,dataIndex:e,dataset:r,datasetIndex:t.index};return helpers$1.options.resolve([t.chart.options.elements.arc.angle,2*Math.PI/n],a,e)}})};core_defaults._set("radar",{scale:{type:"radialLinear"},elements:{line:{tension:0}}});var controller_radar=function(e){e.controllers.radar=e.DatasetController.extend({datasetElementType:elements.Line,dataElementType:elements.Point,linkScales:helpers$1.noop,update:function(e){var t=this,n=t.getMeta(),r=n.dataset,i=n.data,a=r.custom||{},o=t.getDataset(),s=t.chart.options.elements.line,l=t.chart.scale;void 0!==o.tension&&void 0===o.lineTension&&(o.lineTension=o.tension),helpers$1.extend(n.dataset,{_datasetIndex:t.index,_scale:l,_children:i,_loop:!0,_model:{tension:a.tension?a.tension:helpers$1.valueOrDefault(o.lineTension,s.tension),backgroundColor:a.backgroundColor?a.backgroundColor:o.backgroundColor||s.backgroundColor,borderWidth:a.borderWidth?a.borderWidth:o.borderWidth||s.borderWidth,borderColor:a.borderColor?a.borderColor:o.borderColor||s.borderColor,fill:a.fill?a.fill:void 0!==o.fill?o.fill:s.fill,borderCapStyle:a.borderCapStyle?a.borderCapStyle:o.borderCapStyle||s.borderCapStyle,borderDash:a.borderDash?a.borderDash:o.borderDash||s.borderDash,borderDashOffset:a.borderDashOffset?a.borderDashOffset:o.borderDashOffset||s.borderDashOffset,borderJoinStyle:a.borderJoinStyle?a.borderJoinStyle:o.borderJoinStyle||s.borderJoinStyle}}),n.dataset.pivot(),helpers$1.each(i,function(n,r){t.updateElement(n,r,e)},t),t.updateBezierControlPoints()},updateElement:function(e,t,n){var r=this,i=e.custom||{},a=r.getDataset(),o=r.chart.scale,s=r.chart.options.elements.point,l=o.getPointPositionForValue(t,a.data[t]);void 0!==a.radius&&void 0===a.pointRadius&&(a.pointRadius=a.radius),void 0!==a.hitRadius&&void 0===a.pointHitRadius&&(a.pointHitRadius=a.hitRadius),helpers$1.extend(e,{_datasetIndex:r.index,_index:t,_scale:o,_model:{x:n?o.xCenter:l.x,y:n?o.yCenter:l.y,tension:i.tension?i.tension:helpers$1.valueOrDefault(a.lineTension,r.chart.options.elements.line.tension),radius:i.radius?i.radius:helpers$1.valueAtIndexOrDefault(a.pointRadius,t,s.radius),backgroundColor:i.backgroundColor?i.backgroundColor:helpers$1.valueAtIndexOrDefault(a.pointBackgroundColor,t,s.backgroundColor),borderColor:i.borderColor?i.borderColor:helpers$1.valueAtIndexOrDefault(a.pointBorderColor,t,s.borderColor),borderWidth:i.borderWidth?i.borderWidth:helpers$1.valueAtIndexOrDefault(a.pointBorderWidth,t,s.borderWidth),pointStyle:i.pointStyle?i.pointStyle:helpers$1.valueAtIndexOrDefault(a.pointStyle,t,s.pointStyle),rotation:i.rotation?i.rotation:helpers$1.valueAtIndexOrDefault(a.pointRotation,t,s.rotation),hitRadius:i.hitRadius?i.hitRadius:helpers$1.valueAtIndexOrDefault(a.pointHitRadius,t,s.hitRadius)}}),e._model.skip=i.skip?i.skip:isNaN(e._model.x)||isNaN(e._model.y)},updateBezierControlPoints:function(){var e=this.chart.chartArea,t=this.getMeta();helpers$1.each(t.data,function(n,r){var i=n._model,a=helpers$1.splineCurve(helpers$1.previousItem(t.data,r,!0)._model,i,helpers$1.nextItem(t.data,r,!0)._model,i.tension);i.controlPointPreviousX=Math.max(Math.min(a.previous.x,e.right),e.left),i.controlPointPreviousY=Math.max(Math.min(a.previous.y,e.bottom),e.top),i.controlPointNextX=Math.max(Math.min(a.next.x,e.right),e.left),i.controlPointNextY=Math.max(Math.min(a.next.y,e.bottom),e.top),n.pivot()})},setHoverStyle:function(e){var t=this.chart.data.datasets[e._datasetIndex],n=e.custom||{},r=e._index,i=e._model;e.$previousStyle={backgroundColor:i.backgroundColor,borderColor:i.borderColor,borderWidth:i.borderWidth,radius:i.radius},i.radius=n.hoverRadius?n.hoverRadius:helpers$1.valueAtIndexOrDefault(t.pointHoverRadius,r,this.chart.options.elements.point.hoverRadius),i.backgroundColor=n.hoverBackgroundColor?n.hoverBackgroundColor:helpers$1.valueAtIndexOrDefault(t.pointHoverBackgroundColor,r,helpers$1.getHoverColor(i.backgroundColor)),i.borderColor=n.hoverBorderColor?n.hoverBorderColor:helpers$1.valueAtIndexOrDefault(t.pointHoverBorderColor,r,helpers$1.getHoverColor(i.borderColor)),i.borderWidth=n.hoverBorderWidth?n.hoverBorderWidth:helpers$1.valueAtIndexOrDefault(t.pointHoverBorderWidth,r,i.borderWidth)}})};core_defaults._set("scatter",{hover:{mode:"single"},scales:{xAxes:[{id:"x-axis-1",type:"linear",position:"bottom"}],yAxes:[{id:"y-axis-1",type:"linear",position:"left"}]},showLines:!1,tooltips:{callbacks:{title:function(){return""},label:function(e){return"("+e.xLabel+", "+e.yLabel+")"}}}});var controller_scatter=function(e){e.controllers.scatter=e.controllers.line},Chart_Bar=function(e){e.Bar=function(t,n){return n.type="bar",new e(t,n)}},Chart_Bubble=function(e){e.Bubble=function(t,n){return n.type="bubble",new e(t,n)}},Chart_Doughnut=function(e){e.Doughnut=function(t,n){return n.type="doughnut",new e(t,n)}},Chart_Line=function(e){e.Line=function(t,n){return n.type="line",new e(t,n)}},Chart_PolarArea=function(e){e.PolarArea=function(t,n){return n.type="polarArea",new e(t,n)}},Chart_Radar=function(e){e.Radar=function(t,n){return n.type="radar",new e(t,n)}},Chart_Scatter=function(e){e.Scatter=function(t,n){return n.type="scatter",new e(t,n)}};core_defaults._set("global",{plugins:{filler:{propagate:!0}}});var mappers={dataset:function(e){var t=e.fill,n=e.chart,r=n.getDatasetMeta(t),i=r&&n.isDatasetVisible(t)&&r.dataset._children||[],a=i.length||0;return a?function(e,t){return t<a&&i[t]._view||null}:null},boundary:function(e){var t=e.boundary,n=t?t.x:null,r=t?t.y:null;return function(e){return{x:null===n?e.x:n,y:null===r?e.y:r}}}};function decodeFill(e,t,n){var r,i=e._model||{},a=i.fill;if(void 0===a&&(a=!!i.backgroundColor),!1===a||null===a)return!1;if(!0===a)return"origin";if(r=parseFloat(a,10),isFinite(r)&&Math.floor(r)===r)return"-"!==a[0]&&"+"!==a[0]||(r=t+r),!(r===t||r<0||r>=n)&&r;switch(a){case"bottom":return"start";case"top":return"end";case"zero":return"origin";case"origin":case"start":case"end":return a;default:return!1}}function computeBoundary(e){var t,n=e.el._model||{},r=e.el._scale||{},i=e.fill,a=null;if(isFinite(i))return null;if("start"===i?a=void 0===n.scaleBottom?r.bottom:n.scaleBottom:"end"===i?a=void 0===n.scaleTop?r.top:n.scaleTop:void 0!==n.scaleZero?a=n.scaleZero:r.getBasePosition?a=r.getBasePosition():r.getBasePixel&&(a=r.getBasePixel()),void 0!==a&&null!==a){if(void 0!==a.x&&void 0!==a.y)return a;if("number"==typeof a&&isFinite(a))return{x:(t=r.isHorizontal())?a:null,y:t?null:a}}return null}function resolveTarget(e,t,n){var r,i=e[t].fill,a=[t];if(!n)return i;for(;!1!==i&&-1===a.indexOf(i);){if(!isFinite(i))return i;if(!(r=e[i]))return!1;if(r.visible)return i;a.push(i),i=r.fill}return!1}function createMapper(e){var t=e.fill,n="dataset";return!1===t?null:(isFinite(t)||(n="boundary"),mappers[n](e))}function isDrawable(e){return e&&!e.skip}function drawArea(e,t,n,r,i){var a;if(r&&i){for(e.moveTo(t[0].x,t[0].y),a=1;a<r;++a)helpers$1.canvas.lineTo(e,t[a-1],t[a]);for(e.lineTo(n[i-1].x,n[i-1].y),a=i-1;a>0;--a)helpers$1.canvas.lineTo(e,n[a],n[a-1],!0)}}function doFill(e,t,n,r,i,a){var o,s,l,c,u,d,h,f=t.length,p=r.spanGaps,g=[],m=[],v=0,y=0;for(e.beginPath(),o=0,s=f+!!a;o<s;++o)u=n(c=t[l=o%f]._view,l,r),d=isDrawable(c),h=isDrawable(u),d&&h?(v=g.push(c),y=m.push(u)):v&&y&&(p?(d&&g.push(c),h&&m.push(u)):(drawArea(e,g,m,v,y),v=y=0,g=[],m=[]));drawArea(e,g,m,v,y),e.closePath(),e.fillStyle=i,e.fill()}var plugin_filler={id:"filler",afterDatasetsUpdate:function(e,t){var n,r,i,a,o=(e.data.datasets||[]).length,s=t.propagate,l=[];for(r=0;r<o;++r)a=null,(i=(n=e.getDatasetMeta(r)).dataset)&&i._model&&i instanceof elements.Line&&(a={visible:e.isDatasetVisible(r),fill:decodeFill(i,r,o),chart:e,el:i}),n.$filler=a,l.push(a);for(r=0;r<o;++r)(a=l[r])&&(a.fill=resolveTarget(l,r,s),a.boundary=computeBoundary(a),a.mapper=createMapper(a))},beforeDatasetDraw:function(e,t){var n=t.meta.$filler;if(n){var r=e.ctx,i=n.el,a=i._view,o=i._children||[],s=n.mapper,l=a.backgroundColor||core_defaults.global.defaultColor;s&&l&&o.length&&(helpers$1.canvas.clipArea(r,e.chartArea),doFill(r,o,s,a,l,i._loop),helpers$1.canvas.unclipArea(r))}}},noop$2=helpers$1.noop;function getBoxWidth(e,t){return e.usePointStyle?t*Math.SQRT2:e.boxWidth}core_defaults._set("global",{legend:{display:!0,position:"top",fullWidth:!0,reverse:!1,weight:1e3,onClick:function(e,t){var n=t.datasetIndex,r=this.chart,i=r.getDatasetMeta(n);i.hidden=null===i.hidden?!r.data.datasets[n].hidden:null,r.update()},onHover:null,labels:{boxWidth:40,padding:10,generateLabels:function(e){var t=e.data;return helpers$1.isArray(t.datasets)?t.datasets.map(function(t,n){return{text:t.label,fillStyle:helpers$1.isArray(t.backgroundColor)?t.backgroundColor[0]:t.backgroundColor,hidden:!e.isDatasetVisible(n),lineCap:t.borderCapStyle,lineDash:t.borderDash,lineDashOffset:t.borderDashOffset,lineJoin:t.borderJoinStyle,lineWidth:t.borderWidth,strokeStyle:t.borderColor,pointStyle:t.pointStyle,datasetIndex:n}},this):[]}}},legendCallback:function(e){var t=[];t.push('<ul class="'+e.id+'-legend">');for(var n=0;n<e.data.datasets.length;n++)t.push('<li><span style="background-color:'+e.data.datasets[n].backgroundColor+'"></span>'),e.data.datasets[n].label&&t.push(e.data.datasets[n].label),t.push("</li>");return t.push("</ul>"),t.join("")}});var Legend=core_element.extend({initialize:function(e){helpers$1.extend(this,e),this.legendHitBoxes=[],this.doughnutMode=!1},beforeUpdate:noop$2,update:function(e,t,n){var r=this;return r.beforeUpdate(),r.maxWidth=e,r.maxHeight=t,r.margins=n,r.beforeSetDimensions(),r.setDimensions(),r.afterSetDimensions(),r.beforeBuildLabels(),r.buildLabels(),r.afterBuildLabels(),r.beforeFit(),r.fit(),r.afterFit(),r.afterUpdate(),r.minSize},afterUpdate:noop$2,beforeSetDimensions:noop$2,setDimensions:function(){var e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=0,e.right=e.width):(e.height=e.maxHeight,e.top=0,e.bottom=e.height),e.paddingLeft=0,e.paddingTop=0,e.paddingRight=0,e.paddingBottom=0,e.minSize={width:0,height:0}},afterSetDimensions:noop$2,beforeBuildLabels:noop$2,buildLabels:function(){var e=this,t=e.options.labels||{},n=helpers$1.callback(t.generateLabels,[e.chart],e)||[];t.filter&&(n=n.filter(function(n){return t.filter(n,e.chart.data)})),e.options.reverse&&n.reverse(),e.legendItems=n},afterBuildLabels:noop$2,beforeFit:noop$2,fit:function(){var e=this,t=e.options,n=t.labels,r=t.display,i=e.ctx,a=core_defaults.global,o=helpers$1.valueOrDefault,s=o(n.fontSize,a.defaultFontSize),l=o(n.fontStyle,a.defaultFontStyle),c=o(n.fontFamily,a.defaultFontFamily),u=helpers$1.fontString(s,l,c),d=e.legendHitBoxes=[],h=e.minSize,f=e.isHorizontal();if(f?(h.width=e.maxWidth,h.height=r?10:0):(h.width=r?10:0,h.height=e.maxHeight),r)if(i.font=u,f){var p=e.lineWidths=[0],g=e.legendItems.length?s+n.padding:0;i.textAlign="left",i.textBaseline="top",helpers$1.each(e.legendItems,function(t,r){var a=getBoxWidth(n,s)+s/2+i.measureText(t.text).width;p[p.length-1]+a+n.padding>=e.width&&(g+=s+n.padding,p[p.length]=e.left),d[r]={left:0,top:0,width:a,height:s},p[p.length-1]+=a+n.padding}),h.height+=g}else{var m=n.padding,v=e.columnWidths=[],y=n.padding,b=0,_=0,x=s+m;helpers$1.each(e.legendItems,function(e,t){var r=getBoxWidth(n,s)+s/2+i.measureText(e.text).width;_+x>h.height&&(y+=b+n.padding,v.push(b),b=0,_=0),b=Math.max(b,r),_+=x,d[t]={left:0,top:0,width:r,height:s}}),y+=b,v.push(b),h.width+=y}e.width=h.width,e.height=h.height},afterFit:noop$2,isHorizontal:function(){return"top"===this.options.position||"bottom"===this.options.position},draw:function(){var e=this,t=e.options,n=t.labels,r=core_defaults.global,i=r.elements.line,a=e.width,o=e.lineWidths;if(t.display){var s,l=e.ctx,c=helpers$1.valueOrDefault,u=c(n.fontColor,r.defaultFontColor),d=c(n.fontSize,r.defaultFontSize),h=c(n.fontStyle,r.defaultFontStyle),f=c(n.fontFamily,r.defaultFontFamily),p=helpers$1.fontString(d,h,f);l.textAlign="left",l.textBaseline="middle",l.lineWidth=.5,l.strokeStyle=u,l.fillStyle=u,l.font=p;var g=getBoxWidth(n,d),m=e.legendHitBoxes,v=e.isHorizontal();s=v?{x:e.left+(a-o[0])/2,y:e.top+n.padding,line:0}:{x:e.left+n.padding,y:e.top+n.padding,line:0};var y=d+n.padding;helpers$1.each(e.legendItems,function(u,h){var f=l.measureText(u.text).width,p=g+d/2+f,b=s.x,_=s.y;v?b+p>=a&&(_=s.y+=y,s.line++,b=s.x=e.left+(a-o[s.line])/2):_+y>e.bottom&&(b=s.x=b+e.columnWidths[s.line]+n.padding,_=s.y=e.top+n.padding,s.line++),function(e,n,a){if(!(isNaN(g)||g<=0)){l.save(),l.fillStyle=c(a.fillStyle,r.defaultColor),l.lineCap=c(a.lineCap,i.borderCapStyle),l.lineDashOffset=c(a.lineDashOffset,i.borderDashOffset),l.lineJoin=c(a.lineJoin,i.borderJoinStyle),l.lineWidth=c(a.lineWidth,i.borderWidth),l.strokeStyle=c(a.strokeStyle,r.defaultColor);var o=0===c(a.lineWidth,i.borderWidth);if(l.setLineDash&&l.setLineDash(c(a.lineDash,i.borderDash)),t.labels&&t.labels.usePointStyle){var s=d*Math.SQRT2/2,u=s/Math.SQRT2,h=e+u,f=n+u;helpers$1.canvas.drawPoint(l,a.pointStyle,s,h,f)}else o||l.strokeRect(e,n,g,d),l.fillRect(e,n,g,d);l.restore()}}(b,_,u),m[h].left=b,m[h].top=_,function(e,t,n,r){var i=d/2,a=g+i+e,o=t+i;l.fillText(n.text,a,o),n.hidden&&(l.beginPath(),l.lineWidth=2,l.moveTo(a,o),l.lineTo(a+r,o),l.stroke())}(b,_,u,f),v?s.x+=p+n.padding:s.y+=y})}},handleEvent:function(e){var t=this,n=t.options,r="mouseup"===e.type?"click":e.type,i=!1;if("mousemove"===r){if(!n.onHover)return}else{if("click"!==r)return;if(!n.onClick)return}var a=e.x,o=e.y;if(a>=t.left&&a<=t.right&&o>=t.top&&o<=t.bottom)for(var s=t.legendHitBoxes,l=0;l<s.length;++l){var c=s[l];if(a>=c.left&&a<=c.left+c.width&&o>=c.top&&o<=c.top+c.height){if("click"===r){n.onClick.call(t,e.native,t.legendItems[l]),i=!0;break}if("mousemove"===r){n.onHover.call(t,e.native,t.legendItems[l]),i=!0;break}}}return i}});function createNewLegendAndAttach(e,t){var n=new Legend({ctx:e.ctx,options:t,chart:e});core_layouts.configure(e,n,t),core_layouts.addBox(e,n),e.legend=n}var plugin_legend={id:"legend",_element:Legend,beforeInit:function(e){var t=e.options.legend;t&&createNewLegendAndAttach(e,t)},beforeUpdate:function(e){var t=e.options.legend,n=e.legend;t?(helpers$1.mergeIf(t,core_defaults.global.legend),n?(core_layouts.configure(e,n,t),n.options=t):createNewLegendAndAttach(e,t)):n&&(core_layouts.removeBox(e,n),delete e.legend)},afterEvent:function(e,t){var n=e.legend;n&&n.handleEvent(t)}},noop$3=helpers$1.noop;core_defaults._set("global",{title:{display:!1,fontStyle:"bold",fullWidth:!0,lineHeight:1.2,padding:10,position:"top",text:"",weight:2e3}});var Title=core_element.extend({initialize:function(e){helpers$1.extend(this,e),this.legendHitBoxes=[]},beforeUpdate:noop$3,update:function(e,t,n){var r=this;return r.beforeUpdate(),r.maxWidth=e,r.maxHeight=t,r.margins=n,r.beforeSetDimensions(),r.setDimensions(),r.afterSetDimensions(),r.beforeBuildLabels(),r.buildLabels(),r.afterBuildLabels(),r.beforeFit(),r.fit(),r.afterFit(),r.afterUpdate(),r.minSize},afterUpdate:noop$3,beforeSetDimensions:noop$3,setDimensions:function(){var e=this;e.isHorizontal()?(e.width=e.maxWidth,e.left=0,e.right=e.width):(e.height=e.maxHeight,e.top=0,e.bottom=e.height),e.paddingLeft=0,e.paddingTop=0,e.paddingRight=0,e.paddingBottom=0,e.minSize={width:0,height:0}},afterSetDimensions:noop$3,beforeBuildLabels:noop$3,buildLabels:noop$3,afterBuildLabels:noop$3,beforeFit:noop$3,fit:function(){var e=this,t=helpers$1.valueOrDefault,n=e.options,r=n.display,i=t(n.fontSize,core_defaults.global.defaultFontSize),a=e.minSize,o=helpers$1.isArray(n.text)?n.text.length:1,s=helpers$1.options.toLineHeight(n.lineHeight,i),l=r?o*s+2*n.padding:0;e.isHorizontal()?(a.width=e.maxWidth,a.height=l):(a.width=l,a.height=e.maxHeight),e.width=a.width,e.height=a.height},afterFit:noop$3,isHorizontal:function(){var e=this.options.position;return"top"===e||"bottom"===e},draw:function(){var e=this,t=e.ctx,n=helpers$1.valueOrDefault,r=e.options,i=core_defaults.global;if(r.display){var a,o,s,l=n(r.fontSize,i.defaultFontSize),c=n(r.fontStyle,i.defaultFontStyle),u=n(r.fontFamily,i.defaultFontFamily),d=helpers$1.fontString(l,c,u),h=helpers$1.options.toLineHeight(r.lineHeight,l),f=h/2+r.padding,p=0,g=e.top,m=e.left,v=e.bottom,y=e.right;t.fillStyle=n(r.fontColor,i.defaultFontColor),t.font=d,e.isHorizontal()?(o=m+(y-m)/2,s=g+f,a=y-m):(o="left"===r.position?m+f:y-f,s=g+(v-g)/2,a=v-g,p=Math.PI*("left"===r.position?-.5:.5)),t.save(),t.translate(o,s),t.rotate(p),t.textAlign="center",t.textBaseline="middle";var b=r.text;if(helpers$1.isArray(b))for(var _=0,x=0;x<b.length;++x)t.fillText(b[x],0,_,a),_+=h;else t.fillText(b,0,0,a);t.restore()}}});function createNewTitleBlockAndAttach(e,t){var n=new Title({ctx:e.ctx,options:t,chart:e});core_layouts.configure(e,n,t),core_layouts.addBox(e,n),e.titleBlock=n}var plugin_title={id:"title",_element:Title,beforeInit:function(e){var t=e.options.title;t&&createNewTitleBlockAndAttach(e,t)},beforeUpdate:function(e){var t=e.options.title,n=e.titleBlock;t?(helpers$1.mergeIf(t,core_defaults.global.title),n?(core_layouts.configure(e,n,t),n.options=t):createNewTitleBlockAndAttach(e,t)):n&&(core_layouts.removeBox(e,n),delete e.titleBlock)}},plugins={},filler=plugin_filler,legend=plugin_legend,title=plugin_title;plugins.filler=filler,plugins.legend=legend,plugins.title=title;var Chart$1=core();for(var k in Chart$1.helpers=helpers$1,core_helpers(Chart$1),Chart$1.Animation=core_animation,Chart$1.animationService=core_animations,Chart$1.defaults=core_defaults,Chart$1.Element=core_element,Chart$1.elements=elements,Chart$1.Interaction=core_interaction,Chart$1.layouts=core_layouts,Chart$1.platform=platform,Chart$1.plugins=core_plugins,Chart$1.Scale=core_scale,Chart$1.scaleService=core_scaleService,Chart$1.Ticks=core_ticks,Chart$1.Tooltip=core_tooltip,core_controller(Chart$1),core_datasetController(Chart$1),scale_linearbase(Chart$1),scale_category(Chart$1),scale_linear(Chart$1),scale_logarithmic(Chart$1),scale_radialLinear(Chart$1),scale_time(Chart$1),controller_bar(Chart$1),controller_bubble(Chart$1),controller_doughnut(Chart$1),controller_line(Chart$1),controller_polarArea(Chart$1),controller_radar(Chart$1),controller_scatter(Chart$1),Chart_Bar(Chart$1),Chart_Bubble(Chart$1),Chart_Doughnut(Chart$1),Chart_Line(Chart$1),Chart_PolarArea(Chart$1),Chart_Radar(Chart$1),Chart_Scatter(Chart$1),plugins)plugins.hasOwnProperty(k)&&Chart$1.plugins.register(plugins[k]);Chart$1.platform.initialize();var chart=Chart$1;function generateChart(e,t){return{render:function(e){return e("div",{style:this.styles,class:this.cssClasses},[e("canvas",{attrs:{id:this.chartId,width:this.width,height:this.height},ref:"canvas"})])},props:{chartId:{default:e,type:String},width:{default:400,type:Number},height:{default:400,type:Number},cssClasses:{type:String,default:""},styles:{type:Object},plugins:{type:Array,default:function(){return[]}}},data:function(){return{_chart:null,_plugins:this.plugins}},methods:{addPlugin:function(e){this.$data._plugins.push(e)},generateLegend:function(){if(this.$data._chart)return this.$data._chart.generateLegend()},renderChart:function(e,n){this.$data._chart&&this.$data._chart.destroy(),this.$data._chart=new chart(this.$refs.canvas.getContext("2d"),{type:t,data:e,options:n,plugins:this.$data._plugins})}},beforeDestroy:function(){this.$data._chart&&this.$data._chart.destroy()}}}"undefined"!=typeof window&&(window.Chart=Chart$1),Chart$1.Legend=plugins.legend._element,Chart$1.Title=plugins.title._element,Chart$1.pluginService=Chart$1.plugins,Chart$1.PluginBase=Chart$1.Element.extend({}),Chart$1.canvasHelpers=Chart$1.helpers.canvas,Chart$1.layoutService=Chart$1.layouts;var Bar=generateChart("bar-chart","bar"),HorizontalBar=generateChart("horizontalbar-chart","horizontalBar"),Line$1=generateChart("line-chart","line"),Pie=generateChart("pie-chart","pie"),reactiveProp$1=mixins.reactiveProp;Chart.defaults.global.title.padding=20,Chart.defaults.global.title.fontSize=16,Chart.defaults.global.title.lineHeight=1.6;var script$1={extends:Bar,mixins:[reactiveProp$1],props:{options:{type:Object,default:function(){return{legend:{display:!1},lineTension:1}}}},mounted:function(){this.renderChart(this.chartData,this.options)}},__vue_script__$1=script$1,__vue_inject_styles__$1=void 0,__vue_scope_id__$1=void 0,__vue_module_identifier__$1=void 0,__vue_is_functional_template__$1=void 0,ChartComponent=normalizeComponent_1({},__vue_inject_styles__$1,__vue_script__$1,__vue_scope_id__$1,__vue_is_functional_template__$1,__vue_module_identifier__$1,void 0,void 0),chartLabels=["1980","1990","2000","2010","2020"],chartDataList=[6542564,7322564,8008278,8175133,5475133],ChartData={data:{labels:chartLabels,datasets:[{data:chartDataList,fill:!1,backgroundColor:["#2F334F","#3155A6","#F2695D","#EBBCD8","#F9A137"],borderColor:["#ACAEB9"],borderWidth:1}]},bar:{options:{title:{display:!0,text:"Population Chart"},legend:{display:!1},lineTension:1,scales:{xAxes:[{scaleLabel:{display:!0,labelString:"Years"}}],yAxes:[{scaleLabel:{display:!0,labelString:"Population"},ticks:{padding:25}}]}}},horizontalBar:{options:{title:{display:!0,text:"Population Chart"},legend:{display:!1},lineTension:1,scales:{xAxes:[{scaleLabel:{display:!0,labelString:"Population"}}],yAxes:[{scaleLabel:{display:!0,labelString:"Years"},ticks:{padding:25}}]}}},pie:{options:{title:{display:!0,text:"Population Chart"},legend:{display:!0},lineTension:1}}},chartType="bar",ChartBar=function(e,t){void 0===e&&(e={}),void 0===t&&(t={}),this.data=t,this.settings=e,this.init()};ChartBar.prototype.init=function(){Vue.component("nyco-chart-"+chartType,ChartComponent),new Vue({el:'[data-js="chart-'+chartType+'"]',delimiters:["v{","}"],data:function(){return{data:ChartData.data,options:ChartData.bar.options}}})},ChartBar.prototype._constants=function(e){console.dir(e)};var reactiveProp$2=mixins.reactiveProp;Chart.defaults.global.title.padding=20,Chart.defaults.global.title.fontSize=16,Chart.defaults.global.title.lineHeight=1.6;var script$2={extends:HorizontalBar,mixins:[reactiveProp$2],props:{options:{type:Object,default:function(){return{legend:{display:!1},lineTension:1}}}},mounted:function(){this.renderChart(this.chartData,this.options)}},__vue_script__$2=script$2,__vue_inject_styles__$2=void 0,__vue_scope_id__$2=void 0,__vue_module_identifier__$2=void 0,__vue_is_functional_template__$2=void 0,ChartComponent$1=normalizeComponent_1({},__vue_inject_styles__$2,__vue_script__$2,__vue_scope_id__$2,__vue_is_functional_template__$2,__vue_module_identifier__$2,void 0,void 0),chartType$1="horizontal-bar",ChartHorizontalBar=function(e,t){void 0===e&&(e={}),void 0===t&&(t={}),this.data=t,this.settings=e,this.init()};ChartHorizontalBar.prototype.init=function(){Vue.component("nyco-chart-"+chartType$1,ChartComponent$1),new Vue({el:'[data-js="chart-'+chartType$1+'"]',delimiters:["v{","}"],data:function(){return{data:ChartData.data,options:ChartData.horizontalBar.options}}})},ChartHorizontalBar.prototype._constants=function(e){console.dir(e)};var reactiveProp$3=mixins.reactiveProp;Chart.defaults.global.title.padding=20,Chart.defaults.global.title.fontSize=16,Chart.defaults.global.title.lineHeight=1.6;var script$3={extends:Line$1,mixins:[reactiveProp$3],props:{options:{type:Object,default:function(){return{legend:{display:!1},lineTension:1}}}},mounted:function(){this.renderChart(this.chartData,this.options)}},__vue_script__$3=script$3,__vue_inject_styles__$3=void 0,__vue_scope_id__$3=void 0,__vue_module_identifier__$3=void 0,__vue_is_functional_template__$3=void 0,ChartComponent$2=normalizeComponent_1({},__vue_inject_styles__$3,__vue_script__$3,__vue_scope_id__$3,__vue_is_functional_template__$3,__vue_module_identifier__$3,void 0,void 0),chartType$2="line",ChartLine=function(e,t){void 0===e&&(e={}),void 0===t&&(t={}),this.data=t,this.settings=e,this.init()};ChartLine.prototype.init=function(){Vue.component("nyco-chart-"+chartType$2,ChartComponent$2),new Vue({el:'[data-js="chart-'+chartType$2+'"]',delimiters:["v{","}"],data:function(){return{data:ChartData.data,options:ChartData.bar.options}}})},ChartLine.prototype._constants=function(e){console.dir(e)};var reactiveProp$4=mixins.reactiveProp;Chart.defaults.global.title.padding=20,Chart.defaults.global.title.fontSize=16,Chart.defaults.global.title.lineHeight=1.6;var script$4={extends:Pie,mixins:[reactiveProp$4],props:{options:{type:Object,default:function(){return{legend:{display:!0},lineTension:1}}}},mounted:function(){this.renderChart(this.chartData,this.options)}},__vue_script__$4=script$4,__vue_inject_styles__$4=void 0,__vue_scope_id__$4=void 0,__vue_module_identifier__$4=void 0,__vue_is_functional_template__$4=void 0,ChartComponent$3=normalizeComponent_1({},__vue_inject_styles__$4,__vue_script__$4,__vue_scope_id__$4,__vue_is_functional_template__$4,__vue_module_identifier__$4,void 0,void 0),chartType$3="pie",ChartPie=function(e,t){void 0===e&&(e={}),void 0===t&&(t={}),this.data=t,this.settings=e,this.init()};ChartPie.prototype.init=function(){Vue.component("nyco-chart-"+chartType$3,ChartComponent$3),new Vue({el:'[data-js="chart-'+chartType$3+'"]',delimiters:["v{","}"],data:function(){return{data:ChartData.data,options:ChartData.pie.options}}})},ChartPie.prototype._constants=function(e){console.dir(e)};var script$5={props:{layers:{type:Array},config:{type:Object}},data:function(){return{map:null,mapLayers:[],mapLoaded:!1,mapPopup:null,mapFilter:null,activeLayer:void 0}},mounted:function(){this.initializeMap()},destroyed:function(){this.map.remove()},watch:{layers:function(){for(var e=this.layers,t=0;t<e.length;t++){var n=e[t];this.trackLayer(n.name),n.default&&(this.activeLayer=n.name),this.mapLoaded&&this.initializeLayer(n)}},mapLayers:function(){this.mapLayers.length>1&&this.enableLayerToggling(this.mapLayers)},mapLoaded:function(){if(this.mapLoaded)for(var e=this.layers,t=0;t<e.length;t++)this.initializeLayer(e[t])}},methods:{initializeMap:function(){var e=this,t=this.config;mapboxgl.accessToken=t.APIKey,this.map=new mapboxgl.Map({container:t.containerId,center:t.center,zoom:t.zoom,style:t.style}),this.map.addControl(new mapboxgl.NavigationControl),this.map.on("load",function(){return e.mapLoaded=!0})},initializeLayer:function(e){if(void 0===this.map.getLayer(e.name)&&0!==Object.entries(e.data).length){var t=e.name===this.activeLayer?"visible":"none",n=e.filterBy?["in",e.filterBy,""]:[],r=this.generateFillColor();this.map.addSource(e.name,{type:"geojson",data:e.data}),this.map.addLayer({id:e.name,type:"fill",source:e.name,paint:{"fill-outline-color":r[0],"fill-color":r[1],"fill-opacity":.7},layout:{visibility:t}}),this.map.addLayer({id:e.name+"-highlighted",type:"fill",source:e.name,paint:{"fill-outline-color":r[0],"fill-color":r[1],"fill-opacity":.7},filter:n,layout:{visibility:t}}),this.filterOnClick(e),this.updateCursorOnHover(e.name)}},initializePopup:function(e,t){var n=this,r=n.map,i=t.name+"-highlighted",a=(new mapboxgl.Popup).setLngLat(e.lngLat).setHTML(e.features[0].properties[t.filterBy]).addTo(r);a.isOpen()&&(n.mapPopup=a,r.setLayoutProperty(i,"visibility","visible"),r.setFilter(i,n.mapFilter)),a.on("close",function(){n.mapPopup===a&&(n.mapPopup=null,n.mapFilter=null,r.setFilter(i,null),r.setLayoutProperty(i,"visibility","none"))})},trackLayer:function(e){this.mapLayers.includes(e)||this.mapLayers.push(e)},filterOnClick:function(e){var t=this,n=t.map;n.on("click",e.name,function(r){var i=[[r.point.x,r.point.y],[r.point.x,r.point.y]],a=n.queryRenderedFeatures(i,{layers:[e.name]}).reduce(function(t,n){return t.push(n.properties[e.filterBy]),t},["in",""+e.filterBy]);t.mapFilter=a,t.initializePopup(r,e)})},updateCursorOnHover:function(e){var t=this.map;t.on("mouseenter",e,function(){t.getCanvas().style.cursor="pointer"}),t.on("mouseleave",e,function(){t.getCanvas().style.cursor=""})},generateFillColor:function(){var e=[["#000000","#F2695D"],["#000000","#FFA133"],["#2F334F","#EBBCD8"],["#2F334F","#ACAEB9"],["#3155A6","#F9A137"]];return e[Math.floor(Math.random()*e.length)]},enableLayerToggling:function(e){for(var t=this,n=t.map,r=t.activeLayer,i=document.getElementById("nyco-map-msrc-menu");i.firstChild;)i.removeChild(i.firstChild);for(var a=0;a<e.length;a++){var o=e[a],s=document.createElement("a");s.href="#",s.textContent=o,o===r&&s.classList.add("active"),s.onclick=function(e){e.preventDefault(),e.stopPropagation();var r=this.textContent,a=i.getElementsByTagName("a");t.mapPopup&&t.mapPopup.remove();for(var o=0;o<a.length;o++){var s=a[o],l=s.textContent,c=l+"-highlighted",u=n.getLayoutProperty(l,"visibility");if(l===r){if("visible"===u&&s.classList.contains("active"))return;t.activeLayer=l,s.classList.add("active"),n.setLayoutProperty(l,"visibility","visible")}else s.classList.remove("active"),n.setLayoutProperty(l,"visibility","none"),n.setLayoutProperty(c,"visibility","none"),n.setFilter(c,null)}},i.appendChild(s)}}}},__vue_script__$5=script$5,__vue_render__$1=function(){var e=this.$createElement;this._self._c;return this._m(0)},__vue_staticRenderFns__$1=[function(){var e=this.$createElement,t=this._self._c||e;return t("div",[t("div",{staticStyle:{height:"400px",width:"500px"},attrs:{id:"nyco-map-msrc"}}),this._v(" "),t("div",{staticClass:"nyco-map-menu pt-2",attrs:{id:"nyco-map-msrc-menu"}})])}];__vue_render__$1._withStripped=!0;var __vue_inject_styles__$5=void 0,__vue_scope_id__$5=void 0,__vue_module_identifier__$5=void 0,__vue_is_functional_template__$5=!1,MapComponent=normalizeComponent_1({render:__vue_render__$1,staticRenderFns:__vue_staticRenderFns__$1},__vue_inject_styles__$5,__vue_script__$5,__vue_scope_id__$5,__vue_is_functional_template__$5,__vue_module_identifier__$5,void 0,void 0),MapData={single:{config:{APIKey:"pk.eyJ1Ijoibnljby1wcm9kdWN0cyIsImEiOiJjanZjZ3Y4b2IxNXYwM3l0ZDN6bWN4ajA5In0.XSt-hoz5p3j2siyli0g0og",containerId:"nyco-map-ssrc",center:[-73.98671,40.693391],zoom:9,style:"mapbox://styles/nyco-products/cjv6wjq8812ys1gp39mnvuk2w"}},multi:{layers:[],config:{APIKey:"pk.eyJ1Ijoibnljby1wcm9kdWN0cyIsImEiOiJjanZjZ3Y4b2IxNXYwM3l0ZDN6bWN4ajA5In0.XSt-hoz5p3j2siyli0g0og",containerId:"nyco-map-msrc",center:[-73.98671,40.693391],zoom:9,style:"mapbox://styles/nyco-products/cjv6wjq8812ys1gp39mnvuk2w"}}},geojson=createCommonjsModule(function(e){!function(e){function t(){var e=1<=arguments.length?[].slice.call(arguments,0):[],t=e.shift(),n=e.shift();Error.apply(this,e),this.message=this.message||"Invalid Geometry: item: "+JSON.stringify(t)+", params: "+JSON.stringify(n)}e.version="0.5.0",e.defaults={doThrows:{invalidGeometry:!1}},t.prototype=Error,e.errors={InvalidGeometryError:t},e.isGeometryValid=function(e){return!(!e||!Object.keys(e).length)&&(!!e.type&&!!e.coordinates&&Array.isArray(e.coordinates)&&!!e.coordinates.length)},e.parse=function(e,t,o){var s,l,c=function(e,t){var n=e||{};for(var r in t)t.hasOwnProperty(r)&&!n[r]&&(n[r]=t[r]);return n}(t,this.defaults);if(r.length=0,function(e){for(var t in e.geom={},e)e.hasOwnProperty(t)&&-1!==n.indexOf(t)&&(e.geom[t]=e[t],delete e[t]);!function(e){for(var t in e)e.hasOwnProperty(t)&&("string"==typeof e[t]?r.push(e[t]):"object"===_typeof(e[t])&&(r.push(e[t][0]),r.push(e[t][1])));if(0===r.length)throw new Error("No geometry attributes specified")}(e.geom)}(c),l=function(e){var t;e.exclude||e.include?e.include?t=function(t){e.include.forEach(function(e){t[e]=this[e]},this)}:e.exclude&&(t=function(t){for(var n in this)this.hasOwnProperty(n)&&-1===r.indexOf(n)&&-1===e.exclude.indexOf(n)&&(t[n]=this[n])}):t=function(e){for(var t in this)this.hasOwnProperty(t)&&-1===r.indexOf(t)&&(e[t]=this[t])};return function(){var n={};return t.call(this,n),e.extra&&function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])}(n,e.extra),n}}(c),Array.isArray(e)?(s={type:"FeatureCollection",features:[]},e.forEach(function(e){s.features.push(a({item:e,params:c,propFunc:l}))}),i(s,c)):i(s=a({item:e,params:c,propFunc:l}),c),!o||"function"!=typeof o)return s;o(s)};var n=["Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon","GeoJSON"],r=[];function i(e,t){if(t.crs&&function(e){if("name"===e.type){if(e.properties&&e.properties.name)return!0;throw new Error('Invalid CRS. Properties must contain "name" key')}if("link"===e.type){if(e.properties&&e.properties.href&&e.properties.type)return!0;throw new Error('Invalid CRS. Properties must contain "href" and "type" key')}throw new Error('Invald CRS. Type attribute must be "name" or "link"')}(t.crs)&&(t.isPostgres?e.geometry.crs=t.crs:e.crs=t.crs),t.bbox&&(e.bbox=t.bbox),t.extraGlobal)for(var n in e.properties={},t.extraGlobal)e.properties[n]=t.extraGlobal[n]}function a(n){var r=n.item,i=n.params,a=n.propFunc,s={type:"Feature"};return s.geometry=function n(r,i){var a={};for(var s in i.geom){var l=i.geom[s];if("string"==typeof l&&r.hasOwnProperty(l))"GeoJSON"===s?a=r[l]:(a.type=s,a.coordinates=r[l]);else if("object"!==(void 0===l?"undefined":_typeof(l))||Array.isArray(l)){if(Array.isArray(l)&&r.hasOwnProperty(l[0])&&r.hasOwnProperty(l[1]))a.type=s,a.coordinates=[Number(r[l[1]]),Number(r[l[0]])];else if(Array.isArray(l)&&o(l[0])&&o(l[1])){for(var c=[],u=0;u<l.length;u++){for(var d=l[u].split("."),h=r,f=0;f<d.length;f++){if(!h.hasOwnProperty(d[f]))return!1;h=h[d[f]]}c[u]=h}a.type=s,a.coordinates=[Number(c[1]),Number(c[0])]}}else{var p=Object.keys(l).map(function(e){var t=l[e],i=r[e];return n(i,{geom:{Point:t}})});a.type=s,a.coordinates=[].concat(p.map(function(e){return e.coordinates}))}}if(i.doThrows&&i.doThrows.invalidGeometry&&!e.isGeometryValid(a))throw new t(r,i);return a}(r,i),s.properties=a.call(r),s}function o(e){return/^.+\..+$/.test(e)}}(e.exports)}),RADIUS=6378137,FLATTENING=1/298.257223563,POLAR_RADIUS=6356752.3142,wgs84={RADIUS:RADIUS,FLATTENING:FLATTENING,POLAR_RADIUS:POLAR_RADIUS},geometry_1=geometry,ring=ringArea;function geometry(e){var t,n=0;switch(e.type){case"Polygon":return polygonArea(e.coordinates);case"MultiPolygon":for(t=0;t<e.coordinates.length;t++)n+=polygonArea(e.coordinates[t]);return n;case"Point":case"MultiPoint":case"LineString":case"MultiLineString":return 0;case"GeometryCollection":for(t=0;t<e.geometries.length;t++)n+=geometry(e.geometries[t]);return n}}function polygonArea(e){var t=0;if(e&&e.length>0){t+=Math.abs(ringArea(e[0]));for(var n=1;n<e.length;n++)t-=Math.abs(ringArea(e[n]))}return t}function ringArea(e){var t,n,r,i,a,o,s=0,l=e.length;if(l>2){for(o=0;o<l;o++)o===l-2?(r=l-2,i=l-1,a=0):o===l-1?(r=l-1,i=0,a=1):(r=o,i=o+1,a=o+2),t=e[r],n=e[i],s+=(rad(e[a][0])-rad(t[0]))*Math.sin(rad(n[1]));s=s*wgs84.RADIUS*wgs84.RADIUS/2}return s}function rad(e){return e*Math.PI/180}var geojsonArea={geometry:geometry_1,ring:ring},geojsonRewind=rewind;function rewind(e,t){switch(e&&e.type||null){case"FeatureCollection":return e.features=e.features.map(curryOuter(rewind,t)),e;case"Feature":return e.geometry=rewind(e.geometry,t),e;case"Polygon":case"MultiPolygon":return correct(e,t);default:return e}}function curryOuter(e,t){return function(n){return e(n,t)}}function correct(e,t){return"Polygon"===e.type?e.coordinates=correctRings(e.coordinates,t):"MultiPolygon"===e.type&&(e.coordinates=e.coordinates.map(curryOuter(correctRings,t))),e}function correctRings(e,t){t=!!t,e[0]=wind(e[0],t);for(var n=1;n<e.length;n++)e[n]=wind(e[n],!t);return e}function wind(e,t){return cw(e)===t?e:e.reverse()}function cw(e){return geojsonArea.ring(e)>=0}var MapMultiSrc=function(e,t){void 0===e&&(e={}),void 0===t&&(t={}),this.data=t,this.settings=e,this.init()};MapMultiSrc.prototype.init=function(){Vue.component("nyco-map-msrc",MapComponent),new Vue({el:'[data-js="map-msrc"]',delimiters:["v{","}"],data:function(){return{layers:MapData.multi.layers,config:MapData.multi.config}},created:function(){this.getZipcodeData(),this.getBoroughData(),this.getNeighborhoodData()},methods:{getZipcodeData:function(){fetch("https://cdn.jsdelivr.net/gh/kimpenguin/geoJSON@master/tiger-zcta.geojson").then(function(e){if(e.ok)return e.text();Utility.debug()&&console.dir(e)}).catch(function(e){Utility.debug()&&console.dir(e)}).then(function(e){MapData.multi.layers.push({name:"zipcodes",data:JSON.parse(e),default:!0,filterBy:"GEOID10"})})},getBoroughData:function(){var e=this;fetch("https://data.cityofnewyork.us/resource/7t3b-ywvw.json").then(function(e){if(e.ok)return e.text();Utility.debug()&&console.dir(e)}).catch(function(e){Utility.debug()&&console.dir(e)}).then(function(t){t=JSON.parse(t),MapData.multi.layers.push({name:"boroughs",data:e.convertToGeoJSON(t),default:!1,filterBy:"boro_name"})})},getNeighborhoodData:function(){var e=this;fetch("https://data.cityofnewyork.us/resource/q2z5-ai38.json").then(function(e){if(e.ok)return e.text();Utility.debug()&&console.dir(e)}).catch(function(e){Utility.debug()&&console.dir(e)}).then(function(t){t=JSON.parse(t),MapData.multi.layers.push({name:"neighborhoods",data:e.convertToGeoJSON(t),default:!1,filterBy:"ntaname"})})},convertToGeoJSON:function(e){return geojsonRewind(geojson.parse(e,{GeoJSON:"the_geom"}))}}})},MapMultiSrc.prototype._constants=function(e){console.dir(e)};var script$6={props:{layer:{type:Object},config:{type:Object}},data:function(){return{map:null,legendItems:[],selectedItems:[],mapLoaded:!1,mapPopup:null,mapFilter:null}},mounted:function(){this.initializeMap()},destroyed:function(){this.map.remove()},watch:{layer:function(){var e=this.layer;this.generateLegend(e.data),this.mapLoaded&&this.initializeLayer(e)},legendItems:function(){this.legendItems.length>1&&this.enableFilterToggling(this.legendItems)},mapLoaded:function(){this.mapLoaded&&this.layer&&this.initializeLayer(this.layer)},selectedItems:function(){console.log("selected items: ",this.selectedItems);var e=this.layer,t=this.selectedItems.join('", "'),n=["in",e.legendColumn,""+t];this.map.querySourceFeatures(e.name,{sourceLayer:e.name,filter:n});this.map.setFilter(e.name+"-highlighted",n)}},methods:{initializeMap:function(){var e=this,t=this.config;mapboxgl.accessToken=t.APIKey,this.map=new mapboxgl.Map({container:t.containerId,center:t.center,zoom:t.zoom,style:t.style}),this.map.addControl(new mapboxgl.NavigationControl),this.map.on("load",function(){return e.mapLoaded=!0})},initializeLayer:function(e){if(void 0===this.map.getLayer(e.name)&&0!==Object.entries(e.data).length){var t=e.filterBy?["in",e.filterBy,""]:[],n=this.generateFillColor();this.map.addSource(e.name,{type:"geojson",data:e.data}),this.map.addLayer({id:e.name,type:"fill",source:e.name,paint:{"fill-outline-color":n[0],"fill-color":n[1],"fill-opacity":.7},layout:{visibility:"visible"}}),this.map.addLayer({id:e.name+"-highlighted",type:"fill",source:e.name,paint:{"fill-outline-color":n[0],"fill-color":n[1],"fill-opacity":.7},filter:t,layout:{visibility:"visible"}}),this.filterOnClick(e),this.updateCursorOnHover(e.name)}},initializePopup:function(e,t){var n=this,r=n.map,i=t.name+"-highlighted",a=(new mapboxgl.Popup).setLngLat(e.lngLat).setHTML(e.features[0].properties[t.filterBy]).addTo(r);a.isOpen()&&(n.mapPopup=a,r.setLayoutProperty(i,"visibility","visible"),r.setFilter(i,n.mapFilter)),a.on("close",function(){n.mapPopup===a&&(n.mapPopup=null,n.mapFilter=null,r.setFilter(i,null),r.setLayoutProperty(i,"visibility","none"))})},generateLegend:function(e){var t=this;e.features.forEach(function(e){var n=e.properties.boro_name;!t.legendItems.includes(n)&&n&&t.legendItems.push(n)})},filterOnClick:function(e){var t=this,n=t.map;n.on("click",e.name,function(r){var i=[[r.point.x,r.point.y],[r.point.x,r.point.y]],a=n.queryRenderedFeatures(i,{layers:[e.name]}).reduce(function(t,n){return t.push(n.properties[e.filterBy]),t},["in",""+e.filterBy]);t.mapFilter=a,t.initializePopup(r,e)})},updateCursorOnHover:function(e){var t=this.map;t.on("mouseenter",e,function(){t.getCanvas().style.cursor="pointer"}),t.on("mouseleave",e,function(){t.getCanvas().style.cursor=""})},generateFillColor:function(){var e=[["#000000","#F2695D"],["#000000","#FFA133"],["#2F334F","#EBBCD8"],["#2F334F","#ACAEB9"],["#3155A6","#F9A137"]];return e[Math.floor(Math.random()*e.length)]},enableFilterToggling:function(e){var t=this,n=(t.map,document.getElementById("map-legend"));for(t.layer.legendColumn;n.firstChild;)n.removeChild(n.firstChild);for(var r=0;r<e.length;r++){var i=e[r],a=document.createElement("input");a.type="checkbox",a.id=i,a.value=i,n.appendChild(a);var o=document.createElement("label");o.setAttribute("for",i),o.textContent=i,n.appendChild(o),a.addEventListener("change",function(e){var n=e.target.value;e.target.checked,e.target.checked&&!t.selectedItems.includes(n)&&t.selectedItems.push(n),!e.target.checked&&t.selectedItems.includes(n)&&(t.selectedItems=t.selectedItems.filter(function(e){return e!==n}))})}}}},__vue_script__$6=script$6,__vue_render__$2=function(){var e=this.$createElement;this._self._c;return this._m(0)},__vue_staticRenderFns__$2=[function(){var e=this.$createElement,t=this._self._c||e;return t("div",[t("div",{staticStyle:{height:"400px",width:"500px"},attrs:{id:"nyco-map-ssrc"}}),this._v(" "),t("nav",{staticClass:"map-legend",attrs:{id:"map-legend"}})])}];__vue_render__$2._withStripped=!0;var __vue_inject_styles__$6=void 0,__vue_scope_id__$6=void 0,__vue_module_identifier__$6=void 0,__vue_is_functional_template__$6=!1,MapComponent$1=normalizeComponent_1({render:__vue_render__$2,staticRenderFns:__vue_staticRenderFns__$2},__vue_inject_styles__$6,__vue_script__$6,__vue_scope_id__$6,__vue_is_functional_template__$6,__vue_module_identifier__$6,void 0,void 0),MapSingleSrc=function(e,t){void 0===e&&(e={}),void 0===t&&(t={}),this.data=t,this.settings=e,this.init()};MapSingleSrc.prototype.init=function(){Vue.component("nyco-map-ssrc",MapComponent$1),new Vue({el:'[data-js="map-ssrc"]',delimiters:["v{","}"],data:function(){return{layer:{name:"",data:{},filterBy:"",legendColumn:""},config:MapData.single.config}},created:function(){this.getData()},methods:{getData:function(){var e=this;fetch("https://cdn.jsdelivr.net/gh/kimpenguin/geoJSON@master/zcta-w-nta.geojson").then(function(e){if(e.ok)return e.text();Utility.debug()&&console.dir(e)}).catch(function(e){Utility.debug()&&console.dir(e)}).then(function(t){e.layer={name:"zcta-w-nta",data:JSON.parse(t),filterBy:"GEOID10",legendColumn:"boro_name"}})}}})},MapSingleSrc.prototype._constants=function(e){console.dir(e)};var nyco=function(){};nyco.prototype.icons=function(e){return new Icons(e)},nyco.prototype.feed=function(e){return new Feed(e)},nyco.prototype.toggle=function(e){return new Toggle},nyco.prototype.track=function(e){return new Track},nyco.prototype.select=function(){return new Select},nyco.prototype.chart=function(e){return"bar"===e?new ChartBar:"horizontalBar"===e?new ChartHorizontalBar:"line"===e?new ChartLine:"pie"===e?new ChartPie:void 0},nyco.prototype.map=function(e){return"multi-src"===e?new MapMultiSrc:"single-src"===e?new MapSingleSrc:void 0},module.exports=nyco;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
