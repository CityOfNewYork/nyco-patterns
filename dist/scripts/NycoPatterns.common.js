"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},classCallCheck=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},createClass=function(){function e(e,t){for(var r=0;r<t.length;r++){var a=t[r];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,a.key,a)}}return function(t,r,a){return r&&e(t.prototype,r),a&&e(t,a),t}}(),Utility=function e(){return classCallCheck(this,e),this};Utility.debug=function(){return"1"===Utility.getUrlParameter(Utility.PARAMS.DEBUG)},Utility.getUrlParameter=function(e,t){var r=t||window.location.search,a=e.replace(/[\[]/,"\\[").replace(/[\]]/,"\\]"),n=new RegExp("[\\?&]"+a+"=([^&#]*)").exec(r);return null===n?"":decodeURIComponent(n[1].replace(/\+/g," "))},Utility.localize=function(e){var t=e||"",r=(window.LOCALIZED_STRINGS||[]).filter(function(t){return!(!t.hasOwnProperty("slug")||t.slug!==e)&&t});return r[0]&&r[0].hasOwnProperty("label")?r[0].label:t},Utility.parseMarkdown=function(){if("undefined"==typeof markdown)return!1;for(var e=document.querySelectorAll(Utility.SELECTORS.parseMarkdown),t=function(t){var r=e[t];fetch(r.dataset.jsMarkdown).then(function(e){if(e.ok)return e.text();r.innerHTML="",Utility.debug()&&console.dir(e)}).catch(function(e){Utility.debug()&&console.dir(e)}).then(function(e){try{r.classList.toggle("animated"),r.classList.toggle("fadeIn"),r.innerHTML=markdown.toHTML(e)}catch(e){}})},r=0;r<e.length;r++)t(r)},Utility.PARAMS={DEBUG:"debug"},Utility.SELECTORS={parseMarkdown:'[data-js="markdown"]'};var Icons=function e(t){return classCallCheck(this,e),t=t||e.path,fetch(t).then(function(e){if(e.ok)return e.text();Utility.debug()&&console.dir(e)}).catch(function(e){Utility.debug()&&console.dir(e)}).then(function(e){var t=document.createElement("div");t.innerHTML=e,t.setAttribute("aria-hidden",!0),t.setAttribute("style","display: none;"),document.body.appendChild(t)}),this};Icons.path="icons.svg";var freeGlobal="object"==("undefined"==typeof global?"undefined":_typeof(global))&&global&&global.Object===Object&&global,freeSelf="object"==("undefined"==typeof self?"undefined":_typeof(self))&&self&&self.Object===Object&&self,root=freeGlobal||freeSelf||Function("return this")(),_Symbol=root.Symbol,objectProto=Object.prototype,hasOwnProperty=objectProto.hasOwnProperty,nativeObjectToString=objectProto.toString,symToStringTag=_Symbol?_Symbol.toStringTag:void 0;function getRawTag(e){var t=hasOwnProperty.call(e,symToStringTag),r=e[symToStringTag];try{e[symToStringTag]=void 0;var a=!0}catch(e){}var n=nativeObjectToString.call(e);return a&&(t?e[symToStringTag]=r:delete e[symToStringTag]),n}var objectProto$1=Object.prototype,nativeObjectToString$1=objectProto$1.toString;function objectToString(e){return nativeObjectToString$1.call(e)}var nullTag="[object Null]",undefinedTag="[object Undefined]",symToStringTag$1=_Symbol?_Symbol.toStringTag:void 0;function baseGetTag(e){return null==e?void 0===e?undefinedTag:nullTag:symToStringTag$1&&symToStringTag$1 in Object(e)?getRawTag(e):objectToString(e)}function isObject(e){var t=void 0===e?"undefined":_typeof(e);return null!=e&&("object"==t||"function"==t)}var asyncTag="[object AsyncFunction]",funcTag="[object Function]",genTag="[object GeneratorFunction]",proxyTag="[object Proxy]";function isFunction(e){if(!isObject(e))return!1;var t=baseGetTag(e);return t==funcTag||t==genTag||t==asyncTag||t==proxyTag}var coreJsData=root["__core-js_shared__"],maskSrcKey=function(){var e=/[^.]+$/.exec(coreJsData&&coreJsData.keys&&coreJsData.keys.IE_PROTO||"");return e?"Symbol(src)_1."+e:""}();function isMasked(e){return!!maskSrcKey&&maskSrcKey in e}var funcProto=Function.prototype,funcToString=funcProto.toString;function toSource(e){if(null!=e){try{return funcToString.call(e)}catch(e){}try{return e+""}catch(e){}}return""}var reRegExpChar=/[\\^$.*+?()[\]{}|]/g,reIsHostCtor=/^\[object .+?Constructor\]$/,funcProto$1=Function.prototype,objectProto$2=Object.prototype,funcToString$1=funcProto$1.toString,hasOwnProperty$1=objectProto$2.hasOwnProperty,reIsNative=RegExp("^"+funcToString$1.call(hasOwnProperty$1).replace(reRegExpChar,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");function baseIsNative(e){return!(!isObject(e)||isMasked(e))&&(isFunction(e)?reIsNative:reIsHostCtor).test(toSource(e))}function getValue(e,t){return null==e?void 0:e[t]}function getNative(e,t){var r=getValue(e,t);return baseIsNative(r)?r:void 0}var defineProperty$1=function(){try{var e=getNative(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();function baseAssignValue(e,t,r){"__proto__"==t&&defineProperty$1?defineProperty$1(e,t,{configurable:!0,enumerable:!0,value:r,writable:!0}):e[t]=r}function eq(e,t){return e===t||e!=e&&t!=t}var objectProto$3=Object.prototype,hasOwnProperty$2=objectProto$3.hasOwnProperty;function assignValue(e,t,r){var a=e[t];hasOwnProperty$2.call(e,t)&&eq(a,r)&&(void 0!==r||t in e)||baseAssignValue(e,t,r)}function copyObject(e,t,r,a){var n=!r;r||(r={});for(var o=-1,s=t.length;++o<s;){var i=t[o],c=a?a(r[i],e[i],i,r,e):void 0;void 0===c&&(c=e[i]),n?baseAssignValue(r,i,c):assignValue(r,i,c)}return r}function identity(e){return e}function apply(e,t,r){switch(r.length){case 0:return e.call(t);case 1:return e.call(t,r[0]);case 2:return e.call(t,r[0],r[1]);case 3:return e.call(t,r[0],r[1],r[2])}return e.apply(t,r)}var nativeMax=Math.max;function overRest(e,t,r){return t=nativeMax(void 0===t?e.length-1:t,0),function(){for(var a=arguments,n=-1,o=nativeMax(a.length-t,0),s=Array(o);++n<o;)s[n]=a[t+n];n=-1;for(var i=Array(t+1);++n<t;)i[n]=a[n];return i[t]=r(s),apply(e,this,i)}}function constant(e){return function(){return e}}var baseSetToString=defineProperty$1?function(e,t){return defineProperty$1(e,"toString",{configurable:!0,enumerable:!1,value:constant(t),writable:!0})}:identity,HOT_COUNT=800,HOT_SPAN=16,nativeNow=Date.now;function shortOut(e){var t=0,r=0;return function(){var a=nativeNow(),n=HOT_SPAN-(a-r);if(r=a,n>0){if(++t>=HOT_COUNT)return arguments[0]}else t=0;return e.apply(void 0,arguments)}}var setToString=shortOut(baseSetToString);function baseRest(e,t){return setToString(overRest(e,t,identity),e+"")}var MAX_SAFE_INTEGER=9007199254740991;function isLength(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=MAX_SAFE_INTEGER}function isArrayLike(e){return null!=e&&isLength(e.length)&&!isFunction(e)}var MAX_SAFE_INTEGER$1=9007199254740991,reIsUint=/^(?:0|[1-9]\d*)$/;function isIndex(e,t){var r=void 0===e?"undefined":_typeof(e);return!!(t=null==t?MAX_SAFE_INTEGER$1:t)&&("number"==r||"symbol"!=r&&reIsUint.test(e))&&e>-1&&e%1==0&&e<t}function isIterateeCall(e,t,r){if(!isObject(r))return!1;var a=void 0===t?"undefined":_typeof(t);return!!("number"==a?isArrayLike(r)&&isIndex(t,r.length):"string"==a&&t in r)&&eq(r[t],e)}function createAssigner(e){return baseRest(function(t,r){var a=-1,n=r.length,o=n>1?r[n-1]:void 0,s=n>2?r[2]:void 0;for(o=e.length>3&&"function"==typeof o?(n--,o):void 0,s&&isIterateeCall(r[0],r[1],s)&&(o=n<3?void 0:o,n=1),t=Object(t);++a<n;){var i=r[a];i&&e(t,i,a,o)}return t})}function baseTimes(e,t){for(var r=-1,a=Array(e);++r<e;)a[r]=t(r);return a}function isObjectLike(e){return null!=e&&"object"==(void 0===e?"undefined":_typeof(e))}var argsTag="[object Arguments]";function baseIsArguments(e){return isObjectLike(e)&&baseGetTag(e)==argsTag}var objectProto$4=Object.prototype,hasOwnProperty$3=objectProto$4.hasOwnProperty,propertyIsEnumerable=objectProto$4.propertyIsEnumerable,isArguments=baseIsArguments(function(){return arguments}())?baseIsArguments:function(e){return isObjectLike(e)&&hasOwnProperty$3.call(e,"callee")&&!propertyIsEnumerable.call(e,"callee")},isArray=Array.isArray;function stubFalse(){return!1}var freeExports="object"==("undefined"==typeof exports?"undefined":_typeof(exports))&&exports&&!exports.nodeType&&exports,freeModule=freeExports&&"object"==("undefined"==typeof module?"undefined":_typeof(module))&&module&&!module.nodeType&&module,moduleExports=freeModule&&freeModule.exports===freeExports,Buffer=moduleExports?root.Buffer:void 0,nativeIsBuffer=Buffer?Buffer.isBuffer:void 0,isBuffer=nativeIsBuffer||stubFalse,argsTag$1="[object Arguments]",arrayTag="[object Array]",boolTag="[object Boolean]",dateTag="[object Date]",errorTag="[object Error]",funcTag$1="[object Function]",mapTag="[object Map]",numberTag="[object Number]",objectTag="[object Object]",regexpTag="[object RegExp]",setTag="[object Set]",stringTag="[object String]",weakMapTag="[object WeakMap]",arrayBufferTag="[object ArrayBuffer]",dataViewTag="[object DataView]",float32Tag="[object Float32Array]",float64Tag="[object Float64Array]",int8Tag="[object Int8Array]",int16Tag="[object Int16Array]",int32Tag="[object Int32Array]",uint8Tag="[object Uint8Array]",uint8ClampedTag="[object Uint8ClampedArray]",uint16Tag="[object Uint16Array]",uint32Tag="[object Uint32Array]",typedArrayTags={};function baseIsTypedArray(e){return isObjectLike(e)&&isLength(e.length)&&!!typedArrayTags[baseGetTag(e)]}function baseUnary(e){return function(t){return e(t)}}typedArrayTags[float32Tag]=typedArrayTags[float64Tag]=typedArrayTags[int8Tag]=typedArrayTags[int16Tag]=typedArrayTags[int32Tag]=typedArrayTags[uint8Tag]=typedArrayTags[uint8ClampedTag]=typedArrayTags[uint16Tag]=typedArrayTags[uint32Tag]=!0,typedArrayTags[argsTag$1]=typedArrayTags[arrayTag]=typedArrayTags[arrayBufferTag]=typedArrayTags[boolTag]=typedArrayTags[dataViewTag]=typedArrayTags[dateTag]=typedArrayTags[errorTag]=typedArrayTags[funcTag$1]=typedArrayTags[mapTag]=typedArrayTags[numberTag]=typedArrayTags[objectTag]=typedArrayTags[regexpTag]=typedArrayTags[setTag]=typedArrayTags[stringTag]=typedArrayTags[weakMapTag]=!1;var freeExports$1="object"==("undefined"==typeof exports?"undefined":_typeof(exports))&&exports&&!exports.nodeType&&exports,freeModule$1=freeExports$1&&"object"==("undefined"==typeof module?"undefined":_typeof(module))&&module&&!module.nodeType&&module,moduleExports$1=freeModule$1&&freeModule$1.exports===freeExports$1,freeProcess=moduleExports$1&&freeGlobal.process,nodeUtil=function(){try{var e=freeModule$1&&freeModule$1.require&&freeModule$1.require("util").types;return e||freeProcess&&freeProcess.binding&&freeProcess.binding("util")}catch(e){}}(),nodeIsTypedArray=nodeUtil&&nodeUtil.isTypedArray,isTypedArray=nodeIsTypedArray?baseUnary(nodeIsTypedArray):baseIsTypedArray,objectProto$5=Object.prototype,hasOwnProperty$4=objectProto$5.hasOwnProperty;function arrayLikeKeys(e,t){var r=isArray(e),a=!r&&isArguments(e),n=!r&&!a&&isBuffer(e),o=!r&&!a&&!n&&isTypedArray(e),s=r||a||n||o,i=s?baseTimes(e.length,String):[],c=i.length;for(var u in e)!t&&!hasOwnProperty$4.call(e,u)||s&&("length"==u||n&&("offset"==u||"parent"==u)||o&&("buffer"==u||"byteLength"==u||"byteOffset"==u)||isIndex(u,c))||i.push(u);return i}var objectProto$6=Object.prototype;function isPrototype(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||objectProto$6)}function nativeKeysIn(e){var t=[];if(null!=e)for(var r in Object(e))t.push(r);return t}var objectProto$7=Object.prototype,hasOwnProperty$5=objectProto$7.hasOwnProperty;function baseKeysIn(e){if(!isObject(e))return nativeKeysIn(e);var t=isPrototype(e),r=[];for(var a in e)("constructor"!=a||!t&&hasOwnProperty$5.call(e,a))&&r.push(a);return r}function keysIn(e){return isArrayLike(e)?arrayLikeKeys(e,!0):baseKeysIn(e)}var assignInWith=createAssigner(function(e,t,r,a){copyObject(t,keysIn(t),e,a)});function overArg(e,t){return function(r){return e(t(r))}}var getPrototype=overArg(Object.getPrototypeOf,Object),objectTag$1="[object Object]",funcProto$2=Function.prototype,objectProto$8=Object.prototype,funcToString$2=funcProto$2.toString,hasOwnProperty$6=objectProto$8.hasOwnProperty,objectCtorString=funcToString$2.call(Object);function isPlainObject(e){if(!isObjectLike(e)||baseGetTag(e)!=objectTag$1)return!1;var t=getPrototype(e);if(null===t)return!0;var r=hasOwnProperty$6.call(t,"constructor")&&t.constructor;return"function"==typeof r&&r instanceof r&&funcToString$2.call(r)==objectCtorString}var domExcTag="[object DOMException]",errorTag$1="[object Error]";function isError(e){if(!isObjectLike(e))return!1;var t=baseGetTag(e);return t==errorTag$1||t==domExcTag||"string"==typeof e.message&&"string"==typeof e.name&&!isPlainObject(e)}var attempt=baseRest(function(e,t){try{return apply(e,void 0,t)}catch(e){return isError(e)?e:new Error(e)}});function arrayMap(e,t){for(var r=-1,a=null==e?0:e.length,n=Array(a);++r<a;)n[r]=t(e[r],r,e);return n}function baseValues(e,t){return arrayMap(t,function(t){return e[t]})}var objectProto$9=Object.prototype,hasOwnProperty$7=objectProto$9.hasOwnProperty;function customDefaultsAssignIn(e,t,r,a){return void 0===e||eq(e,objectProto$9[r])&&!hasOwnProperty$7.call(a,r)?t:e}var stringEscapes={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"};function escapeStringChar(e){return"\\"+stringEscapes[e]}var nativeKeys=overArg(Object.keys,Object),objectProto$10=Object.prototype,hasOwnProperty$8=objectProto$10.hasOwnProperty;function baseKeys(e){if(!isPrototype(e))return nativeKeys(e);var t=[];for(var r in Object(e))hasOwnProperty$8.call(e,r)&&"constructor"!=r&&t.push(r);return t}function keys(e){return isArrayLike(e)?arrayLikeKeys(e):baseKeys(e)}var reInterpolate=/<%=([\s\S]+?)%>/g;function basePropertyOf(e){return function(t){return null==e?void 0:e[t]}}var htmlEscapes={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},escapeHtmlChar=basePropertyOf(htmlEscapes),symbolTag="[object Symbol]";function isSymbol(e){return"symbol"==(void 0===e?"undefined":_typeof(e))||isObjectLike(e)&&baseGetTag(e)==symbolTag}var INFINITY=1/0,symbolProto=_Symbol?_Symbol.prototype:void 0,symbolToString=symbolProto?symbolProto.toString:void 0;function baseToString(e){if("string"==typeof e)return e;if(isArray(e))return arrayMap(e,baseToString)+"";if(isSymbol(e))return symbolToString?symbolToString.call(e):"";var t=e+"";return"0"==t&&1/e==-INFINITY?"-0":t}function toString(e){return null==e?"":baseToString(e)}var reUnescapedHtml=/[&<>"']/g,reHasUnescapedHtml=RegExp(reUnescapedHtml.source);function escape(e){return(e=toString(e))&&reHasUnescapedHtml.test(e)?e.replace(reUnescapedHtml,escapeHtmlChar):e}var reEscape=/<%-([\s\S]+?)%>/g,reEvaluate=/<%([\s\S]+?)%>/g,templateSettings={escape:reEscape,evaluate:reEvaluate,interpolate:reInterpolate,variable:"",imports:{_:{escape:escape}}},reEmptyStringLeading=/\b__p \+= '';/g,reEmptyStringMiddle=/\b(__p \+=) '' \+/g,reEmptyStringTrailing=/(__e\(.*?\)|\b__t\)) \+\n'';/g,reEsTemplate=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,reNoMatch=/($^)/,reUnescapedString=/['\n\r\u2028\u2029\\]/g;function template(e,t,r){var a=templateSettings.imports._.templateSettings||templateSettings;r&&isIterateeCall(e,t,r)&&(t=void 0),e=toString(e),t=assignInWith({},t,a,customDefaultsAssignIn);var n,o,s=assignInWith({},t.imports,a.imports,customDefaultsAssignIn),i=keys(s),c=baseValues(s,i),u=0,l=t.interpolate||reNoMatch,f="__p += '",p=RegExp((t.escape||reNoMatch).source+"|"+l.source+"|"+(l===reInterpolate?reEsTemplate:reNoMatch).source+"|"+(t.evaluate||reNoMatch).source+"|$","g"),g="sourceURL"in t?"//# sourceURL="+t.sourceURL+"\n":"";e.replace(p,function(t,r,a,s,i,c){return a||(a=s),f+=e.slice(u,c).replace(reUnescapedString,escapeStringChar),r&&(n=!0,f+="' +\n__e("+r+") +\n'"),i&&(o=!0,f+="';\n"+i+";\n__p += '"),a&&(f+="' +\n((__t = ("+a+")) == null ? '' : __t) +\n'"),u=c+t.length,t}),f+="';\n";var y=t.variable;y||(f="with (obj) {\n"+f+"\n}\n"),f=(o?f.replace(reEmptyStringLeading,""):f).replace(reEmptyStringMiddle,"$1").replace(reEmptyStringTrailing,"$1;"),f="function("+(y||"obj")+") {\n"+(y?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(n?", __e = _.escape":"")+(o?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+f+"return __p\n}";var d=attempt(function(){return Function(i,g+"return "+f).apply(void 0,c)});if(d.source=f,isError(d))throw d;return d}function arrayEach(e,t){for(var r=-1,a=null==e?0:e.length;++r<a&&!1!==t(e[r],r,e););return e}function createBaseFor(e){return function(t,r,a){for(var n=-1,o=Object(t),s=a(t),i=s.length;i--;){var c=s[e?i:++n];if(!1===r(o[c],c,o))break}return t}}var baseFor=createBaseFor();function baseForOwn(e,t){return e&&baseFor(e,t,keys)}function createBaseEach(e,t){return function(r,a){if(null==r)return r;if(!isArrayLike(r))return e(r,a);for(var n=r.length,o=t?n:-1,s=Object(r);(t?o--:++o<n)&&!1!==a(s[o],o,s););return r}}var baseEach=createBaseEach(baseForOwn);function castFunction(e){return"function"==typeof e?e:identity}function forEach(e,t){return(isArray(e)?arrayEach:baseEach)(e,castFunction(t))}function listCacheClear(){this.__data__=[],this.size=0}function assocIndexOf(e,t){for(var r=e.length;r--;)if(eq(e[r][0],t))return r;return-1}var arrayProto=Array.prototype,splice=arrayProto.splice;function listCacheDelete(e){var t=this.__data__,r=assocIndexOf(t,e);return!(r<0)&&(r==t.length-1?t.pop():splice.call(t,r,1),--this.size,!0)}function listCacheGet(e){var t=this.__data__,r=assocIndexOf(t,e);return r<0?void 0:t[r][1]}function listCacheHas(e){return assocIndexOf(this.__data__,e)>-1}function listCacheSet(e,t){var r=this.__data__,a=assocIndexOf(r,e);return a<0?(++this.size,r.push([e,t])):r[a][1]=t,this}function ListCache(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var a=e[t];this.set(a[0],a[1])}}function stackClear(){this.__data__=new ListCache,this.size=0}function stackDelete(e){var t=this.__data__,r=t.delete(e);return this.size=t.size,r}function stackGet(e){return this.__data__.get(e)}function stackHas(e){return this.__data__.has(e)}ListCache.prototype.clear=listCacheClear,ListCache.prototype.delete=listCacheDelete,ListCache.prototype.get=listCacheGet,ListCache.prototype.has=listCacheHas,ListCache.prototype.set=listCacheSet;var Map=getNative(root,"Map"),nativeCreate=getNative(Object,"create");function hashClear(){this.__data__=nativeCreate?nativeCreate(null):{},this.size=0}function hashDelete(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}var HASH_UNDEFINED="__lodash_hash_undefined__",objectProto$11=Object.prototype,hasOwnProperty$9=objectProto$11.hasOwnProperty;function hashGet(e){var t=this.__data__;if(nativeCreate){var r=t[e];return r===HASH_UNDEFINED?void 0:r}return hasOwnProperty$9.call(t,e)?t[e]:void 0}var objectProto$12=Object.prototype,hasOwnProperty$10=objectProto$12.hasOwnProperty;function hashHas(e){var t=this.__data__;return nativeCreate?void 0!==t[e]:hasOwnProperty$10.call(t,e)}var HASH_UNDEFINED$1="__lodash_hash_undefined__";function hashSet(e,t){var r=this.__data__;return this.size+=this.has(e)?0:1,r[e]=nativeCreate&&void 0===t?HASH_UNDEFINED$1:t,this}function Hash(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var a=e[t];this.set(a[0],a[1])}}function mapCacheClear(){this.size=0,this.__data__={hash:new Hash,map:new(Map||ListCache),string:new Hash}}function isKeyable(e){var t=void 0===e?"undefined":_typeof(e);return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}function getMapData(e,t){var r=e.__data__;return isKeyable(t)?r["string"==typeof t?"string":"hash"]:r.map}function mapCacheDelete(e){var t=getMapData(this,e).delete(e);return this.size-=t?1:0,t}function mapCacheGet(e){return getMapData(this,e).get(e)}function mapCacheHas(e){return getMapData(this,e).has(e)}function mapCacheSet(e,t){var r=getMapData(this,e),a=r.size;return r.set(e,t),this.size+=r.size==a?0:1,this}function MapCache(e){var t=-1,r=null==e?0:e.length;for(this.clear();++t<r;){var a=e[t];this.set(a[0],a[1])}}Hash.prototype.clear=hashClear,Hash.prototype.delete=hashDelete,Hash.prototype.get=hashGet,Hash.prototype.has=hashHas,Hash.prototype.set=hashSet,MapCache.prototype.clear=mapCacheClear,MapCache.prototype.delete=mapCacheDelete,MapCache.prototype.get=mapCacheGet,MapCache.prototype.has=mapCacheHas,MapCache.prototype.set=mapCacheSet;var LARGE_ARRAY_SIZE=200;function stackSet(e,t){var r=this.__data__;if(r instanceof ListCache){var a=r.__data__;if(!Map||a.length<LARGE_ARRAY_SIZE-1)return a.push([e,t]),this.size=++r.size,this;r=this.__data__=new MapCache(a)}return r.set(e,t),this.size=r.size,this}function Stack(e){var t=this.__data__=new ListCache(e);this.size=t.size}function assignMergeValue(e,t,r){(void 0===r||eq(e[t],r))&&(void 0!==r||t in e)||baseAssignValue(e,t,r)}Stack.prototype.clear=stackClear,Stack.prototype.delete=stackDelete,Stack.prototype.get=stackGet,Stack.prototype.has=stackHas,Stack.prototype.set=stackSet;var freeExports$2="object"==("undefined"==typeof exports?"undefined":_typeof(exports))&&exports&&!exports.nodeType&&exports,freeModule$2=freeExports$2&&"object"==("undefined"==typeof module?"undefined":_typeof(module))&&module&&!module.nodeType&&module,moduleExports$2=freeModule$2&&freeModule$2.exports===freeExports$2,Buffer$1=moduleExports$2?root.Buffer:void 0,allocUnsafe=Buffer$1?Buffer$1.allocUnsafe:void 0;function cloneBuffer(e,t){if(t)return e.slice();var r=e.length,a=allocUnsafe?allocUnsafe(r):new e.constructor(r);return e.copy(a),a}var Uint8Array=root.Uint8Array;function cloneArrayBuffer(e){var t=new e.constructor(e.byteLength);return new Uint8Array(t).set(new Uint8Array(e)),t}function cloneTypedArray(e,t){var r=t?cloneArrayBuffer(e.buffer):e.buffer;return new e.constructor(r,e.byteOffset,e.length)}function copyArray(e,t){var r=-1,a=e.length;for(t||(t=Array(a));++r<a;)t[r]=e[r];return t}var objectCreate=Object.create,baseCreate=function(){function e(){}return function(t){if(!isObject(t))return{};if(objectCreate)return objectCreate(t);e.prototype=t;var r=new e;return e.prototype=void 0,r}}();function initCloneObject(e){return"function"!=typeof e.constructor||isPrototype(e)?{}:baseCreate(getPrototype(e))}function isArrayLikeObject(e){return isObjectLike(e)&&isArrayLike(e)}function safeGet(e,t){if("__proto__"!=t)return e[t]}function toPlainObject(e){return copyObject(e,keysIn(e))}function baseMergeDeep(e,t,r,a,n,o,s){var i=safeGet(e,r),c=safeGet(t,r),u=s.get(c);if(u)assignMergeValue(e,r,u);else{var l=o?o(i,c,r+"",e,t,s):void 0,f=void 0===l;if(f){var p=isArray(c),g=!p&&isBuffer(c),y=!p&&!g&&isTypedArray(c);l=c,p||g||y?isArray(i)?l=i:isArrayLikeObject(i)?l=copyArray(i):g?(f=!1,l=cloneBuffer(c,!0)):y?(f=!1,l=cloneTypedArray(c,!0)):l=[]:isPlainObject(c)||isArguments(c)?(l=i,isArguments(i)?l=toPlainObject(i):isObject(i)&&!isFunction(i)||(l=initCloneObject(c))):f=!1}f&&(s.set(c,l),n(l,c,a,o,s),s.delete(c)),assignMergeValue(e,r,l)}}function baseMerge(e,t,r,a,n){e!==t&&baseFor(t,function(o,s){if(isObject(o))n||(n=new Stack),baseMergeDeep(e,t,s,r,baseMerge,a,n);else{var i=a?a(safeGet(e,s),o,s+"",e,t,n):void 0;void 0===i&&(i=o),assignMergeValue(e,s,i)}},keysIn)}var merge=createAssigner(function(e,t,r){baseMerge(e,t,r)});function values(e){return null==e?[]:baseValues(e,keys(e))}var HASH_UNDEFINED$2="__lodash_hash_undefined__";function setCacheAdd(e){return this.__data__.set(e,HASH_UNDEFINED$2),this}function setCacheHas(e){return this.__data__.has(e)}function SetCache(e){var t=-1,r=null==e?0:e.length;for(this.__data__=new MapCache;++t<r;)this.add(e[t])}function arraySome(e,t){for(var r=-1,a=null==e?0:e.length;++r<a;)if(t(e[r],r,e))return!0;return!1}function cacheHas(e,t){return e.has(t)}SetCache.prototype.add=SetCache.prototype.push=setCacheAdd,SetCache.prototype.has=setCacheHas;var COMPARE_PARTIAL_FLAG=1,COMPARE_UNORDERED_FLAG=2;function equalArrays(e,t,r,a,n,o){var s=r&COMPARE_PARTIAL_FLAG,i=e.length,c=t.length;if(i!=c&&!(s&&c>i))return!1;var u=o.get(e);if(u&&o.get(t))return u==t;var l=-1,f=!0,p=r&COMPARE_UNORDERED_FLAG?new SetCache:void 0;for(o.set(e,t),o.set(t,e);++l<i;){var g=e[l],y=t[l];if(a)var d=s?a(y,g,l,t,e,o):a(g,y,l,e,t,o);if(void 0!==d){if(d)continue;f=!1;break}if(p){if(!arraySome(t,function(e,t){if(!cacheHas(p,t)&&(g===e||n(g,e,r,a,o)))return p.push(t)})){f=!1;break}}else if(g!==y&&!n(g,y,r,a,o)){f=!1;break}}return o.delete(e),o.delete(t),f}function mapToArray(e){var t=-1,r=Array(e.size);return e.forEach(function(e,a){r[++t]=[a,e]}),r}function setToArray(e){var t=-1,r=Array(e.size);return e.forEach(function(e){r[++t]=e}),r}var COMPARE_PARTIAL_FLAG$1=1,COMPARE_UNORDERED_FLAG$1=2,boolTag$1="[object Boolean]",dateTag$1="[object Date]",errorTag$2="[object Error]",mapTag$1="[object Map]",numberTag$1="[object Number]",regexpTag$1="[object RegExp]",setTag$1="[object Set]",stringTag$1="[object String]",symbolTag$1="[object Symbol]",arrayBufferTag$1="[object ArrayBuffer]",dataViewTag$1="[object DataView]",symbolProto$1=_Symbol?_Symbol.prototype:void 0,symbolValueOf=symbolProto$1?symbolProto$1.valueOf:void 0;function equalByTag(e,t,r,a,n,o,s){switch(r){case dataViewTag$1:if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case arrayBufferTag$1:return!(e.byteLength!=t.byteLength||!o(new Uint8Array(e),new Uint8Array(t)));case boolTag$1:case dateTag$1:case numberTag$1:return eq(+e,+t);case errorTag$2:return e.name==t.name&&e.message==t.message;case regexpTag$1:case stringTag$1:return e==t+"";case mapTag$1:var i=mapToArray;case setTag$1:var c=a&COMPARE_PARTIAL_FLAG$1;if(i||(i=setToArray),e.size!=t.size&&!c)return!1;var u=s.get(e);if(u)return u==t;a|=COMPARE_UNORDERED_FLAG$1,s.set(e,t);var l=equalArrays(i(e),i(t),a,n,o,s);return s.delete(e),l;case symbolTag$1:if(symbolValueOf)return symbolValueOf.call(e)==symbolValueOf.call(t)}return!1}function arrayPush(e,t){for(var r=-1,a=t.length,n=e.length;++r<a;)e[n+r]=t[r];return e}function baseGetAllKeys(e,t,r){var a=t(e);return isArray(e)?a:arrayPush(a,r(e))}function arrayFilter(e,t){for(var r=-1,a=null==e?0:e.length,n=0,o=[];++r<a;){var s=e[r];t(s,r,e)&&(o[n++]=s)}return o}function stubArray(){return[]}var objectProto$13=Object.prototype,propertyIsEnumerable$1=objectProto$13.propertyIsEnumerable,nativeGetSymbols=Object.getOwnPropertySymbols,getSymbols=nativeGetSymbols?function(e){return null==e?[]:(e=Object(e),arrayFilter(nativeGetSymbols(e),function(t){return propertyIsEnumerable$1.call(e,t)}))}:stubArray;function getAllKeys(e){return baseGetAllKeys(e,keys,getSymbols)}var COMPARE_PARTIAL_FLAG$2=1,objectProto$14=Object.prototype,hasOwnProperty$11=objectProto$14.hasOwnProperty;function equalObjects(e,t,r,a,n,o){var s=r&COMPARE_PARTIAL_FLAG$2,i=getAllKeys(e),c=i.length;if(c!=getAllKeys(t).length&&!s)return!1;for(var u=c;u--;){var l=i[u];if(!(s?l in t:hasOwnProperty$11.call(t,l)))return!1}var f=o.get(e);if(f&&o.get(t))return f==t;var p=!0;o.set(e,t),o.set(t,e);for(var g=s;++u<c;){var y=e[l=i[u]],d=t[l];if(a)var b=s?a(d,y,l,t,e,o):a(y,d,l,e,t,o);if(!(void 0===b?y===d||n(y,d,r,a,o):b)){p=!1;break}g||(g="constructor"==l)}if(p&&!g){var h=e.constructor,v=t.constructor;h!=v&&"constructor"in e&&"constructor"in t&&!("function"==typeof h&&h instanceof h&&"function"==typeof v&&v instanceof v)&&(p=!1)}return o.delete(e),o.delete(t),p}var DataView=getNative(root,"DataView"),Promise$1=getNative(root,"Promise"),Set=getNative(root,"Set"),WeakMap=getNative(root,"WeakMap"),mapTag$2="[object Map]",objectTag$2="[object Object]",promiseTag="[object Promise]",setTag$2="[object Set]",weakMapTag$1="[object WeakMap]",dataViewTag$2="[object DataView]",dataViewCtorString=toSource(DataView),mapCtorString=toSource(Map),promiseCtorString=toSource(Promise$1),setCtorString=toSource(Set),weakMapCtorString=toSource(WeakMap),getTag=baseGetTag;(DataView&&getTag(new DataView(new ArrayBuffer(1)))!=dataViewTag$2||Map&&getTag(new Map)!=mapTag$2||Promise$1&&getTag(Promise$1.resolve())!=promiseTag||Set&&getTag(new Set)!=setTag$2||WeakMap&&getTag(new WeakMap)!=weakMapTag$1)&&(getTag=function(e){var t=baseGetTag(e),r=t==objectTag$2?e.constructor:void 0,a=r?toSource(r):"";if(a)switch(a){case dataViewCtorString:return dataViewTag$2;case mapCtorString:return mapTag$2;case promiseCtorString:return promiseTag;case setCtorString:return setTag$2;case weakMapCtorString:return weakMapTag$1}return t});var getTag$1=getTag,COMPARE_PARTIAL_FLAG$3=1,argsTag$2="[object Arguments]",arrayTag$1="[object Array]",objectTag$3="[object Object]",objectProto$15=Object.prototype,hasOwnProperty$12=objectProto$15.hasOwnProperty;function baseIsEqualDeep(e,t,r,a,n,o){var s=isArray(e),i=isArray(t),c=s?arrayTag$1:getTag$1(e),u=i?arrayTag$1:getTag$1(t),l=(c=c==argsTag$2?objectTag$3:c)==objectTag$3,f=(u=u==argsTag$2?objectTag$3:u)==objectTag$3,p=c==u;if(p&&isBuffer(e)){if(!isBuffer(t))return!1;s=!0,l=!1}if(p&&!l)return o||(o=new Stack),s||isTypedArray(e)?equalArrays(e,t,r,a,n,o):equalByTag(e,t,c,r,a,n,o);if(!(r&COMPARE_PARTIAL_FLAG$3)){var g=l&&hasOwnProperty$12.call(e,"__wrapped__"),y=f&&hasOwnProperty$12.call(t,"__wrapped__");if(g||y){var d=g?e.value():e,b=y?t.value():t;return o||(o=new Stack),n(d,b,r,a,o)}}return!!p&&(o||(o=new Stack),equalObjects(e,t,r,a,n,o))}function baseIsEqual(e,t,r,a,n){return e===t||(null==e||null==t||!isObjectLike(e)&&!isObjectLike(t)?e!=e&&t!=t:baseIsEqualDeep(e,t,r,a,baseIsEqual,n))}var COMPARE_PARTIAL_FLAG$4=1,COMPARE_UNORDERED_FLAG$2=2;function baseIsMatch(e,t,r,a){var n=r.length,o=n,s=!a;if(null==e)return!o;for(e=Object(e);n--;){var i=r[n];if(s&&i[2]?i[1]!==e[i[0]]:!(i[0]in e))return!1}for(;++n<o;){var c=(i=r[n])[0],u=e[c],l=i[1];if(s&&i[2]){if(void 0===u&&!(c in e))return!1}else{var f=new Stack;if(a)var p=a(u,l,c,e,t,f);if(!(void 0===p?baseIsEqual(l,u,COMPARE_PARTIAL_FLAG$4|COMPARE_UNORDERED_FLAG$2,a,f):p))return!1}}return!0}function isStrictComparable(e){return e==e&&!isObject(e)}function getMatchData(e){for(var t=keys(e),r=t.length;r--;){var a=t[r],n=e[a];t[r]=[a,n,isStrictComparable(n)]}return t}function matchesStrictComparable(e,t){return function(r){return null!=r&&(r[e]===t&&(void 0!==t||e in Object(r)))}}function baseMatches(e){var t=getMatchData(e);return 1==t.length&&t[0][2]?matchesStrictComparable(t[0][0],t[0][1]):function(r){return r===e||baseIsMatch(r,e,t)}}var reIsDeepProp=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,reIsPlainProp=/^\w*$/;function isKey(e,t){if(isArray(e))return!1;var r=void 0===e?"undefined":_typeof(e);return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=e&&!isSymbol(e))||(reIsPlainProp.test(e)||!reIsDeepProp.test(e)||null!=t&&e in Object(t))}var FUNC_ERROR_TEXT="Expected a function";function memoize(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError(FUNC_ERROR_TEXT);var r=function r(){var a=arguments,n=t?t.apply(this,a):a[0],o=r.cache;if(o.has(n))return o.get(n);var s=e.apply(this,a);return r.cache=o.set(n,s)||o,s};return r.cache=new(memoize.Cache||MapCache),r}memoize.Cache=MapCache;var MAX_MEMOIZE_SIZE=500;function memoizeCapped(e){var t=memoize(e,function(e){return r.size===MAX_MEMOIZE_SIZE&&r.clear(),e}),r=t.cache;return t}var rePropName=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,reEscapeChar=/\\(\\)?/g,stringToPath=memoizeCapped(function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(rePropName,function(e,r,a,n){t.push(a?n.replace(reEscapeChar,"$1"):r||e)}),t});function castPath(e,t){return isArray(e)?e:isKey(e,t)?[e]:stringToPath(toString(e))}var INFINITY$1=1/0;function toKey(e){if("string"==typeof e||isSymbol(e))return e;var t=e+"";return"0"==t&&1/e==-INFINITY$1?"-0":t}function baseGet(e,t){for(var r=0,a=(t=castPath(t,e)).length;null!=e&&r<a;)e=e[toKey(t[r++])];return r&&r==a?e:void 0}function get$1(e,t,r){var a=null==e?void 0:baseGet(e,t);return void 0===a?r:a}function baseHasIn(e,t){return null!=e&&t in Object(e)}function hasPath(e,t,r){for(var a=-1,n=(t=castPath(t,e)).length,o=!1;++a<n;){var s=toKey(t[a]);if(!(o=null!=e&&r(e,s)))break;e=e[s]}return o||++a!=n?o:!!(n=null==e?0:e.length)&&isLength(n)&&isIndex(s,n)&&(isArray(e)||isArguments(e))}function hasIn(e,t){return null!=e&&hasPath(e,t,baseHasIn)}var COMPARE_PARTIAL_FLAG$5=1,COMPARE_UNORDERED_FLAG$3=2;function baseMatchesProperty(e,t){return isKey(e)&&isStrictComparable(t)?matchesStrictComparable(toKey(e),t):function(r){var a=get$1(r,e);return void 0===a&&a===t?hasIn(r,e):baseIsEqual(t,a,COMPARE_PARTIAL_FLAG$5|COMPARE_UNORDERED_FLAG$3)}}function baseProperty(e){return function(t){return null==t?void 0:t[e]}}function basePropertyDeep(e){return function(t){return baseGet(t,e)}}function property(e){return isKey(e)?baseProperty(toKey(e)):basePropertyDeep(e)}function baseIteratee(e){return"function"==typeof e?e:null==e?identity:"object"==(void 0===e?"undefined":_typeof(e))?isArray(e)?baseMatchesProperty(e[0],e[1]):baseMatches(e):property(e)}function baseMap(e,t){var r=-1,a=isArrayLike(e)?Array(e.length):[];return baseEach(e,function(e,n,o){a[++r]=t(e,n,o)}),a}function baseSortBy(e,t){var r=e.length;for(e.sort(t);r--;)e[r]=e[r].value;return e}function compareAscending(e,t){if(e!==t){var r=void 0!==e,a=null===e,n=e==e,o=isSymbol(e),s=void 0!==t,i=null===t,c=t==t,u=isSymbol(t);if(!i&&!u&&!o&&e>t||o&&s&&c&&!i&&!u||a&&s&&c||!r&&c||!n)return 1;if(!a&&!o&&!u&&e<t||u&&r&&n&&!a&&!o||i&&r&&n||!s&&n||!c)return-1}return 0}function compareMultiple(e,t,r){for(var a=-1,n=e.criteria,o=t.criteria,s=n.length,i=r.length;++a<s;){var c=compareAscending(n[a],o[a]);if(c)return a>=i?c:c*("desc"==r[a]?-1:1)}return e.index-t.index}function baseOrderBy(e,t,r){var a=-1;return t=arrayMap(t.length?t:[identity],baseUnary(baseIteratee)),baseSortBy(baseMap(e,function(e,r,n){return{criteria:arrayMap(t,function(t){return t(e)}),index:++a,value:e}}),function(e,t){return compareMultiple(e,t,r)})}function orderBy(e,t,r,a){return null==e?[]:(isArray(t)||(t=null==t?[]:[t]),isArray(r=a?void 0:r)||(r=null==r?[]:[r]),baseOrderBy(e,t,r))}function noop(){}var INFINITY$2=1/0,createSet=Set&&1/setToArray(new Set([,-0]))[1]==INFINITY$2?function(e){return new Set(e)}:noop,Feed=function(){function e(t){classCallCheck(this,e),this.default=e.default,this.templates=e.templates,this.settings=merge({},e.default,t)}return createClass(e,[{key:"init",value:function(){var t=this,r=[],a=this.settings.feed,n={rssToJson:e.rssToJson,rssUrl:Array.isArray(a)?a:[a]};return forEach(n.rssUrl,function(e,a){t._request(n,e).then(function(e){if(r.push(t._process(JSON.parse(e),t.settings)),r.length===n.rssUrl.length){t._merge(r,t.settings);var a=t._render(t._merge(r,t.settings),t.settings),o=document.querySelector(t.settings.selector);o&&(o.innerHTML=a)}})}),this}},{key:"_request",value:function(e,t){return new Promise(function(r,a){var n=new XMLHttpRequest;n.onreadystatechange=function(e){var t=e.target;4===t.readyState&&(t.status>=200&&t.status<400?r(t.response):a(new Error(t.status)))},n.ontimeout=function(){a(new Error("The Feed request timed out"))},n.open("GET",e.rssToJson+"?rss_url="+t,!0),n.send(),n=null})}},{key:"_process",value:function(t,r){return e.process[r.type](t,r)}},{key:"_merge",value:function(t,r){return e.merge[r.type](t)}},{key:"_render",value:function(e,t){return e.settings=t,t.log&&console.dir(e),template(values(t.templates).join(""),{imports:{_each:forEach}})(e)}}]),e}();Feed.rssToJson="https://api.rss2json.com/v1/api.json",Feed.templates={medium:{opener:['<section class="o-feed <%- settings.classes.wrapper %>" style="',"<% if (settings.fontSize) { %>font-size: <%- settings.fontSize %>;<% } %>","<% if (settings.postBorderColor) { %>border-color: <%- settings.postBorderColor %>;<% } %>",'">'],header:['<header class="o-feed__header <%- settings.classes.header %>">','<div class="o-feed__avatar <%- settings.classes.avatar %>">','<img src="','<% if (settings.profileImg !== "") { %>',"<%- settings.profileImg %>","<% } else { %>","<%- feed.profileImg %>",'<% } %>" ','width="<%- settings.ratioProfile[0] %>" ','height="<%- settings.ratioProfile[1] %>">',"</div>",'<a class="o-feed__url <%- settings.classes.avatar %>" ','href="<% if (settings.titleUrl !== "") { %>',"<%- settings.titleUrl %>","<% } else { %>","<%- feed.url %>",'<% } %>" ','target="_blank" rel="noopener noreferrer nofollow">','<% if (settings.title !== "") { %>',"<%- settings.title %>","<% } else { %>","<%- feed.title %>","<% } %>","</a>","</header>"],posts:['<div class="o-feed__items" style="',"border-color: <%- settings.postBorderColor %>;",'">',"<% _each(items, function(post) { %>",'<div class="c-feed-item <%- settings.classes.feedItem %>">','<h4 class="c-feed-item__title <%- settings.classes.title %>">','<a class="c-feed-item__link <%- settings.classes.link %>"','href="<%- post.guid %>"','target="_blank"','rel="noopener noreferrer nofollow">',"<%- post.title %>","</a>","</h4>",'<span class="c-feed-item__date <%- settings.classes.date %>" ','title="<%- settings.postDateTitle %>">',"<%- post.date %>","</span>",'<div class="c-feed-item__thumbnail <%- settings.classes.thumbnail %>"','style="',"background-image: url(<%- post.thumbnail %>);",'height: <%- settings.postImgHeight %>;"','aria-hidden="true">','<img style="display: none;" src="<%- post.thumbnail %>" alt="<%- post.title %>">',"</div>",'<p class="c-feed-item__excerpt <%- settings.classes.excerpt %>">',"<%- post.excerpt %><%- settings.postExcerptTrail %>","</p>",'<div class="c-feed-item__footer <%- settings.classes.itemFooter %>">','<a class="c-feed-item__cta <%- settings.classes.cta %>" ','href="<%- post.guid %>" ','target="_blank" ','rel="noopener noreferrer nofollow">',"<%- settings.postCtaText %>","</a>","</div>","</div>","<% }); %>","</div>"],closer:["</section>"]}},Feed.process={medium:function(e,t){var r=t.postExcerptLength;return forEach(e.items,function(e,a){var n,o="";return o=(o=(o=(o=e.description.replace(/<figure.*>.*?<\/figure>/g,"")).replace(/<(.|\n)*?>/g,"")).substr(0,r)).substr(0,Math.min(o.length,o.lastIndexOf(" "))),e.excerpt=o,n=new Date(Date.parse(e.pubDate.replace(" ","T"))).toLocaleDateString(t.postDateLocal,t.postDateFormat),e.date=n,e}),e}},Feed.merge={medium:function(e){var t={},r=[];return e.forEach(function(e){r=r.concat(e.items)}),e.forEach(function(e){t=merge(t,e)}),t.items=orderBy(r,"pubDate","desc"),t}},Feed.default={feed:"",selector:"#js-feed",type:"medium",title:"",titleUrl:"",profileImg:"",fontSize:"",ratioProfile:["50","50"],postBorderColor:"lightsteelblue",postImgHeight:"200px",postExcerptLength:120,postExcerptTrail:"…",postCtaText:"Read the full post",postDateLocal:"en-US",postDateFormat:{year:"numeric",month:"long",day:"numeric"},postDateTitle:"Published Date",classes:{wrapper:"",header:"",url:"",feedItem:"",title:"",link:"",thumbnail:"",excerpt:"",itemFooter:"",cta:"",date:""},templates:{opener:Feed.templates.medium.opener.join(""),header:Feed.templates.medium.header.join(""),posts:Feed.templates.medium.posts.join(""),closer:Feed.templates.medium.closer.join("")},log:!1,unique:!1};var Toggle=function(){function e(t){return classCallCheck(this,e),t=t||{},this._settings={selector:t.selector?t.selector:e.selector,namespace:t.namespace?t.namespace:e.namespace,inactiveClass:t.inactiveClass?t.inactiveClass:e.inactiveClass,activeClass:t.activeClass?t.activeClass:e.activeClass},this}return createClass(e,[{key:"init",value:function(){var e=this;return document.querySelector("body").addEventListener("click",function(t){t.target.matches(e._settings.selector)&&(t.preventDefault(),e._toggle(t))}),this}},{key:"_toggle",value:function(e){var t=this,r=e.target,a=!1;if(a=r.getAttribute("href")?document.querySelector(r.getAttribute("href")):a,!(a=r.getAttribute("aria-controls")?document.querySelector("#"+r.getAttribute("aria-controls")):a))return this;if(this.elementToggle(r,a),r.dataset[this._settings.namespace+"Undo"]){var n=document.querySelector(r.dataset[this._settings.namespace+"Undo"]);n.addEventListener("click",function(e){e.preventDefault(),t.elementToggle(r,a),n.removeEventListener("click")})}return this}},{key:"elementToggle",value:function(t,r){""!==this._settings.activeClass&&(t.classList.toggle(this._settings.activeClass),r.classList.toggle(this._settings.activeClass)),""!==this._settings.inactiveClass&&r.classList.toggle(this._settings.inactiveClass);for(var a=0;a<e.elAriaRoles.length;a++)t.getAttribute(e.elAriaRoles[a])&&t.setAttribute(e.elAriaRoles[a],!("true"===t.getAttribute(e.elAriaRoles[a])));for(var n=0;n<e.targetAriaRoles.length;n++)r.getAttribute(e.targetAriaRoles[n])&&r.setAttribute(e.targetAriaRoles[n],!("true"===r.getAttribute(e.targetAriaRoles[n])));return t.getAttribute("href")&&r.classList.contains(this._settings.activeClass)&&(window.location.hash="",window.location.hash=t.getAttribute("href")),this}}]),e}();Toggle.selector='[data-js="toggle"]',Toggle.namespace="toggle",Toggle.inactiveClass="hidden",Toggle.activeClass="active",Toggle.elAriaRoles=["aria-pressed","aria-expanded"],Toggle.targetAriaRoles=["aria-hidden"];var nyco=function(){function e(){classCallCheck(this,e)}return createClass(e,[{key:"icons",value:function(e){return new Icons(e)}},{key:"Feed",value:function(e){return new Feed(e).init()}},{key:"toggle",value:function(e){return(new Toggle).init()}}]),e}();module.exports=nyco;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
