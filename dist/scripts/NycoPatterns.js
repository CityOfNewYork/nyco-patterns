var NycoPatterns=function(){"use strict";var t=function(){return this};t.debug=function(){return"1"===t.getUrlParameter(t.PARAMS.DEBUG)},t.getUrlParameter=function(t,e){var n=e||window.location.search,r=t.replace(/[\[]/,"\\[").replace(/[\]]/,"\\]"),i=new RegExp("[\\?&]"+r+"=([^&#]*)").exec(n);return null===i?"":decodeURIComponent(i[1].replace(/\+/g," "))},t.localize=function(t){var e=t||"",n=(window.LOCALIZED_STRINGS||[]).filter(function(e){return!(!e.hasOwnProperty("slug")||e.slug!==t)&&e});return n[0]&&n[0].hasOwnProperty("label")?n[0].label:e},t.PARAMS={DEBUG:"debug"},t.SELECTORS={parseMarkdown:'[data-js="markdown"]'};var e=function e(n){return n=n||e.path,fetch(n).then(function(e){if(e.ok)return e.text();t.debug()&&console.dir(e)}).catch(function(e){t.debug()&&console.dir(e)}).then(function(t){var e=document.createElement("div");e.innerHTML=t,e.setAttribute("aria-hidden",!0),e.setAttribute("style","display: none;"),document.body.appendChild(e)}),this};e.path="icons.svg";var n="undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{},i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o="object"==(void 0===n?"undefined":i(n))&&n&&n.Object===Object&&n,a="object"==("undefined"==typeof self?"undefined":i(self))&&self&&self.Object===Object&&self,s=o||a||Function("return this")(),l=s.Symbol,u=Object.prototype,c=u.hasOwnProperty,d=u.toString,f=l?l.toStringTag:void 0;var h=Object.prototype.toString;var p="[object Null]",v="[object Undefined]",m=l?l.toStringTag:void 0;function y(t){return null==t?void 0===t?v:p:m&&m in Object(t)?function(t){var e=c.call(t,f),n=t[f];try{t[f]=void 0;var r=!0}catch(t){}var i=d.call(t);return r&&(e?t[f]=n:delete t[f]),i}(t):function(t){return h.call(t)}(t)}function _(t){var e=void 0===t?"undefined":i(t);return null!=t&&("object"==e||"function"==e)}var w="[object AsyncFunction]",x="[object Function]",k="[object GeneratorFunction]",S="[object Proxy]";function M(t){if(!_(t))return!1;var e=y(t);return e==x||e==k||e==w||e==S}var C=s["__core-js_shared__"],A=function(){var t=/[^.]+$/.exec(C&&C.keys&&C.keys.IE_PROTO||"");return t?"Symbol(src)_1."+t:""}();var O=Function.prototype.toString;function D(t){if(null!=t){try{return O.call(t)}catch(t){}try{return t+""}catch(t){}}return""}var T=/^\[object .+?Constructor\]$/,P=Function.prototype,R=Object.prototype,I=P.toString,L=R.hasOwnProperty,E=RegExp("^"+I.call(L).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");function F(t){return!(!_(t)||A&&A in t)&&(M(t)?E:T).test(D(t))}function j(t,e){var n=function(t,e){return null==t?void 0:t[e]}(t,e);return F(n)?n:void 0}var N=function(){try{var t=j(Object,"defineProperty");return t({},"",{}),t}catch(t){}}();function $(t,e,n){"__proto__"==e&&N?N(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}function z(t,e){return t===e||t!=t&&e!=e}var B=Object.prototype.hasOwnProperty;function Y(t,e,n){var r=t[e];B.call(t,e)&&z(r,n)&&(void 0!==n||e in t)||$(t,e,n)}function W(t,e,n,r){var i=!n;n||(n={});for(var o=-1,a=e.length;++o<a;){var s=e[o],l=r?r(n[s],t[s],s,n,t):void 0;void 0===l&&(l=t[s]),i?$(n,s,l):Y(n,s,l)}return n}function U(t){return t}function H(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}var V=Math.max;var q=N?function(t,e){return N(t,"toString",{configurable:!0,enumerable:!1,value:(n=e,function(){return n}),writable:!0});var n}:U,G=800,J=16,Z=Date.now;var K=function(t){var e=0,n=0;return function(){var r=Z(),i=J-(r-n);if(n=r,i>0){if(++e>=G)return arguments[0]}else e=0;return t.apply(void 0,arguments)}}(q);function X(t,e){return K(function(t,e,n){return e=V(void 0===e?t.length-1:e,0),function(){for(var r=arguments,i=-1,o=V(r.length-e,0),a=Array(o);++i<o;)a[i]=r[e+i];i=-1;for(var s=Array(e+1);++i<e;)s[i]=r[i];return s[e]=n(a),H(t,this,s)}}(t,e,U),t+"")}var Q=9007199254740991;function tt(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=Q}function et(t){return null!=t&&tt(t.length)&&!M(t)}var nt=9007199254740991,rt=/^(?:0|[1-9]\d*)$/;function it(t,e){var n=void 0===t?"undefined":i(t);return!!(e=null==e?nt:e)&&("number"==n||"symbol"!=n&&rt.test(t))&&t>-1&&t%1==0&&t<e}function ot(t,e,n){if(!_(n))return!1;var r=void 0===e?"undefined":i(e);return!!("number"==r?et(n)&&it(e,n.length):"string"==r&&e in n)&&z(n[e],t)}function at(t){return X(function(e,n){var r=-1,i=n.length,o=i>1?n[i-1]:void 0,a=i>2?n[2]:void 0;for(o=t.length>3&&"function"==typeof o?(i--,o):void 0,a&&ot(n[0],n[1],a)&&(o=i<3?void 0:o,i=1),e=Object(e);++r<i;){var s=n[r];s&&t(e,s,r,o)}return e})}function st(t){return null!=t&&"object"==(void 0===t?"undefined":i(t))}var lt="[object Arguments]";function ut(t){return st(t)&&y(t)==lt}var ct=Object.prototype,dt=ct.hasOwnProperty,ft=ct.propertyIsEnumerable,ht=ut(function(){return arguments}())?ut:function(t){return st(t)&&dt.call(t,"callee")&&!ft.call(t,"callee")},pt=Array.isArray;var vt="object"==("undefined"==typeof exports?"undefined":i(exports))&&exports&&!exports.nodeType&&exports,gt=vt&&"object"==("undefined"==typeof module?"undefined":i(module))&&module&&!module.nodeType&&module,mt=gt&&gt.exports===vt?s.Buffer:void 0,yt=(mt?mt.isBuffer:void 0)||function(){return!1},bt={};function _t(t){return function(e){return t(e)}}bt["[object Float32Array]"]=bt["[object Float64Array]"]=bt["[object Int8Array]"]=bt["[object Int16Array]"]=bt["[object Int32Array]"]=bt["[object Uint8Array]"]=bt["[object Uint8ClampedArray]"]=bt["[object Uint16Array]"]=bt["[object Uint32Array]"]=!0,bt["[object Arguments]"]=bt["[object Array]"]=bt["[object ArrayBuffer]"]=bt["[object Boolean]"]=bt["[object DataView]"]=bt["[object Date]"]=bt["[object Error]"]=bt["[object Function]"]=bt["[object Map]"]=bt["[object Number]"]=bt["[object Object]"]=bt["[object RegExp]"]=bt["[object Set]"]=bt["[object String]"]=bt["[object WeakMap]"]=!1;var wt="object"==("undefined"==typeof exports?"undefined":i(exports))&&exports&&!exports.nodeType&&exports,xt=wt&&"object"==("undefined"==typeof module?"undefined":i(module))&&module&&!module.nodeType&&module,kt=xt&&xt.exports===wt&&o.process,St=function(){try{var t=xt&&xt.require&&xt.require("util").types;return t||kt&&kt.binding&&kt.binding("util")}catch(t){}}(),Mt=St&&St.isTypedArray,Ct=Mt?_t(Mt):function(t){return st(t)&&tt(t.length)&&!!bt[y(t)]},At=Object.prototype.hasOwnProperty;function Ot(t,e){var n=pt(t),r=!n&&ht(t),i=!n&&!r&&yt(t),o=!n&&!r&&!i&&Ct(t),a=n||r||i||o,s=a?function(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}(t.length,String):[],l=s.length;for(var u in t)!e&&!At.call(t,u)||a&&("length"==u||i&&("offset"==u||"parent"==u)||o&&("buffer"==u||"byteLength"==u||"byteOffset"==u)||it(u,l))||s.push(u);return s}var Dt=Object.prototype;function Tt(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||Dt)}var Pt=Object.prototype.hasOwnProperty;function Rt(t){if(!_(t))return function(t){var e=[];if(null!=t)for(var n in Object(t))e.push(n);return e}(t);var e=Tt(t),n=[];for(var r in t)("constructor"!=r||!e&&Pt.call(t,r))&&n.push(r);return n}function It(t){return et(t)?Ot(t,!0):Rt(t)}var Lt=at(function(t,e,n,r){W(e,It(e),t,r)});function Et(t,e){return function(n){return t(e(n))}}var Ft=Et(Object.getPrototypeOf,Object),jt="[object Object]",Nt=Function.prototype,$t=Object.prototype,zt=Nt.toString,Bt=$t.hasOwnProperty,Yt=zt.call(Object);function Wt(t){if(!st(t)||y(t)!=jt)return!1;var e=Ft(t);if(null===e)return!0;var n=Bt.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&zt.call(n)==Yt}var Ut="[object DOMException]",Ht="[object Error]";function Vt(t){if(!st(t))return!1;var e=y(t);return e==Ht||e==Ut||"string"==typeof t.message&&"string"==typeof t.name&&!Wt(t)}var qt=X(function(t,e){try{return H(t,void 0,e)}catch(t){return Vt(t)?t:new Error(t)}});function Gt(t,e){for(var n=-1,r=null==t?0:t.length,i=Array(r);++n<r;)i[n]=e(t[n],n,t);return i}function Jt(t,e){return Gt(e,function(e){return t[e]})}var Zt=Object.prototype,Kt=Zt.hasOwnProperty;function Xt(t,e,n,r){return void 0===t||z(t,Zt[n])&&!Kt.call(r,n)?e:t}var Qt={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"};function te(t){return"\\"+Qt[t]}var ee=Et(Object.keys,Object),ne=Object.prototype.hasOwnProperty;function re(t){return et(t)?Ot(t):function(t){if(!Tt(t))return ee(t);var e=[];for(var n in Object(t))ne.call(t,n)&&"constructor"!=n&&e.push(n);return e}(t)}var ie=/<%=([\s\S]+?)%>/g;var oe,ae=(oe={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},function(t){return null==oe?void 0:oe[t]}),se="[object Symbol]";function le(t){return"symbol"==(void 0===t?"undefined":i(t))||st(t)&&y(t)==se}var ue=1/0,ce=l?l.prototype:void 0,de=ce?ce.toString:void 0;function fe(t){if("string"==typeof t)return t;if(pt(t))return Gt(t,fe)+"";if(le(t))return de?de.call(t):"";var e=t+"";return"0"==e&&1/t==-ue?"-0":e}function he(t){return null==t?"":fe(t)}var pe=/[&<>"']/g,ve=RegExp(pe.source);var ge={escape:/<%-([\s\S]+?)%>/g,evaluate:/<%([\s\S]+?)%>/g,interpolate:ie,variable:"",imports:{_:{escape:function(t){return(t=he(t))&&ve.test(t)?t.replace(pe,ae):t}}}},me=/\b__p \+= '';/g,ye=/\b(__p \+=) '' \+/g,be=/(__e\(.*?\)|\b__t\)) \+\n'';/g,_e=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,we=/($^)/,xe=/['\n\r\u2028\u2029\\]/g;function ke(t,e){for(var n=-1,r=null==t?0:t.length;++n<r&&!1!==e(t[n],n,t););return t}var Se,Me=function(t,e,n){for(var r=-1,i=Object(t),o=n(t),a=o.length;a--;){var s=o[Se?a:++r];if(!1===e(i[s],s,i))break}return t};var Ce=function(t,e){return function(n,r){if(null==n)return n;if(!et(n))return t(n,r);for(var i=n.length,o=e?i:-1,a=Object(n);(e?o--:++o<i)&&!1!==r(a[o],o,a););return n}}(function(t,e){return t&&Me(t,e,re)});function Ae(t,e){var n;return(pt(t)?ke:Ce)(t,"function"==typeof(n=e)?n:U)}function Oe(t,e){for(var n=t.length;n--;)if(z(t[n][0],e))return n;return-1}var De=Array.prototype.splice;function Te(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}Te.prototype.clear=function(){this.__data__=[],this.size=0},Te.prototype.delete=function(t){var e=this.__data__,n=Oe(e,t);return!(n<0||(n==e.length-1?e.pop():De.call(e,n,1),--this.size,0))},Te.prototype.get=function(t){var e=this.__data__,n=Oe(e,t);return n<0?void 0:e[n][1]},Te.prototype.has=function(t){return Oe(this.__data__,t)>-1},Te.prototype.set=function(t,e){var n=this.__data__,r=Oe(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this};var Pe=j(s,"Map"),Re=j(Object,"create");var Ie="__lodash_hash_undefined__",Le=Object.prototype.hasOwnProperty;var Ee=Object.prototype.hasOwnProperty;var Fe="__lodash_hash_undefined__";function je(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function Ne(t,e){var n,r,o=t.__data__;return("string"==(r=void 0===(n=e)?"undefined":i(n))||"number"==r||"symbol"==r||"boolean"==r?"__proto__"!==n:null===n)?o["string"==typeof e?"string":"hash"]:o.map}function $e(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}je.prototype.clear=function(){this.__data__=Re?Re(null):{},this.size=0},je.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},je.prototype.get=function(t){var e=this.__data__;if(Re){var n=e[t];return n===Ie?void 0:n}return Le.call(e,t)?e[t]:void 0},je.prototype.has=function(t){var e=this.__data__;return Re?void 0!==e[t]:Ee.call(e,t)},je.prototype.set=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=Re&&void 0===e?Fe:e,this},$e.prototype.clear=function(){this.size=0,this.__data__={hash:new je,map:new(Pe||Te),string:new je}},$e.prototype.delete=function(t){var e=Ne(this,t).delete(t);return this.size-=e?1:0,e},$e.prototype.get=function(t){return Ne(this,t).get(t)},$e.prototype.has=function(t){return Ne(this,t).has(t)},$e.prototype.set=function(t,e){var n=Ne(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this};var ze=200;function Be(t){var e=this.__data__=new Te(t);this.size=e.size}function Ye(t,e,n){(void 0===n||z(t[e],n))&&(void 0!==n||e in t)||$(t,e,n)}Be.prototype.clear=function(){this.__data__=new Te,this.size=0},Be.prototype.delete=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n},Be.prototype.get=function(t){return this.__data__.get(t)},Be.prototype.has=function(t){return this.__data__.has(t)},Be.prototype.set=function(t,e){var n=this.__data__;if(n instanceof Te){var r=n.__data__;if(!Pe||r.length<ze-1)return r.push([t,e]),this.size=++n.size,this;n=this.__data__=new $e(r)}return n.set(t,e),this.size=n.size,this};var We="object"==("undefined"==typeof exports?"undefined":i(exports))&&exports&&!exports.nodeType&&exports,Ue=We&&"object"==("undefined"==typeof module?"undefined":i(module))&&module&&!module.nodeType&&module,He=Ue&&Ue.exports===We?s.Buffer:void 0,Ve=He?He.allocUnsafe:void 0;var qe=s.Uint8Array;function Ge(t,e){var n,r,i=e?(n=t.buffer,r=new n.constructor(n.byteLength),new qe(r).set(new qe(n)),r):t.buffer;return new t.constructor(i,t.byteOffset,t.length)}var Je=Object.create,Ze=function(){function t(){}return function(e){if(!_(e))return{};if(Je)return Je(e);t.prototype=e;var n=new t;return t.prototype=void 0,n}}();function Ke(t,e){if("__proto__"!=e)return t[e]}function Xe(t,e,n,r,i,o,a){var s=Ke(t,n),l=Ke(e,n),u=a.get(l);if(u)Ye(t,n,u);else{var c,d=o?o(s,l,n+"",t,e,a):void 0,f=void 0===d;if(f){var h=pt(l),p=!h&&yt(l),v=!h&&!p&&Ct(l);d=l,h||p||v?pt(s)?d=s:st(c=s)&&et(c)?d=function(t,e){var n=-1,r=t.length;for(e||(e=Array(r));++n<r;)e[n]=t[n];return e}(s):p?(f=!1,d=function(t,e){if(e)return t.slice();var n=t.length,r=Ve?Ve(n):new t.constructor(n);return t.copy(r),r}(l,!0)):v?(f=!1,d=Ge(l,!0)):d=[]:Wt(l)||ht(l)?(d=s,ht(s)?d=function(t){return W(t,It(t))}(s):_(s)&&!M(s)||(d=function(t){return"function"!=typeof t.constructor||Tt(t)?{}:Ze(Ft(t))}(l))):f=!1}f&&(a.set(l,d),i(d,l,r,o,a),a.delete(l)),Ye(t,n,d)}}function Qe(t,e,n,r,i){t!==e&&Me(e,function(o,a){if(_(o))i||(i=new Be),Xe(t,e,a,n,Qe,r,i);else{var s=r?r(Ke(t,a),o,a+"",t,e,i):void 0;void 0===s&&(s=o),Ye(t,a,s)}},It)}var tn=at(function(t,e,n){Qe(t,e,n)});var en="__lodash_hash_undefined__";function nn(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new $e;++e<n;)this.add(t[e])}function rn(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}nn.prototype.add=nn.prototype.push=function(t){return this.__data__.set(t,en),this},nn.prototype.has=function(t){return this.__data__.has(t)};var on=1,an=2;function sn(t,e,n,r,i,o){var a=n&on,s=t.length,l=e.length;if(s!=l&&!(a&&l>s))return!1;var u=o.get(t);if(u&&o.get(e))return u==e;var c=-1,d=!0,f=n&an?new nn:void 0;for(o.set(t,e),o.set(e,t);++c<s;){var h=t[c],p=e[c];if(r)var v=a?r(p,h,c,e,t,o):r(h,p,c,t,e,o);if(void 0!==v){if(v)continue;d=!1;break}if(f){if(!rn(e,function(t,e){if(a=e,!f.has(a)&&(h===t||i(h,t,n,r,o)))return f.push(e);var a})){d=!1;break}}else if(h!==p&&!i(h,p,n,r,o)){d=!1;break}}return o.delete(t),o.delete(e),d}function ln(t){var e=-1,n=Array(t.size);return t.forEach(function(t,r){n[++e]=[r,t]}),n}function un(t){var e=-1,n=Array(t.size);return t.forEach(function(t){n[++e]=t}),n}var cn=1,dn=2,fn="[object Boolean]",hn="[object Date]",pn="[object Error]",vn="[object Map]",gn="[object Number]",mn="[object RegExp]",yn="[object Set]",bn="[object String]",_n="[object Symbol]",wn="[object ArrayBuffer]",xn="[object DataView]",kn=l?l.prototype:void 0,Sn=kn?kn.valueOf:void 0;var Mn=Object.prototype.propertyIsEnumerable,Cn=Object.getOwnPropertySymbols,An=Cn?function(t){return null==t?[]:(t=Object(t),function(t,e){for(var n=-1,r=null==t?0:t.length,i=0,o=[];++n<r;){var a=t[n];e(a,n,t)&&(o[i++]=a)}return o}(Cn(t),function(e){return Mn.call(t,e)}))}:function(){return[]};function On(t){return function(t,e,n){var r=e(t);return pt(t)?r:function(t,e){for(var n=-1,r=e.length,i=t.length;++n<r;)t[i+n]=e[n];return t}(r,n(t))}(t,re,An)}var Dn=1,Tn=Object.prototype.hasOwnProperty;var Pn=j(s,"DataView"),Rn=j(s,"Promise"),In=j(s,"Set"),Ln=j(s,"WeakMap"),En=D(Pn),Fn=D(Pe),jn=D(Rn),Nn=D(In),$n=D(Ln),zn=y;(Pn&&"[object DataView]"!=zn(new Pn(new ArrayBuffer(1)))||Pe&&"[object Map]"!=zn(new Pe)||Rn&&"[object Promise]"!=zn(Rn.resolve())||In&&"[object Set]"!=zn(new In)||Ln&&"[object WeakMap]"!=zn(new Ln))&&(zn=function(t){var e=y(t),n="[object Object]"==e?t.constructor:void 0,r=n?D(n):"";if(r)switch(r){case En:return"[object DataView]";case Fn:return"[object Map]";case jn:return"[object Promise]";case Nn:return"[object Set]";case $n:return"[object WeakMap]"}return e});var Bn=zn,Yn=1,Wn="[object Arguments]",Un="[object Array]",Hn="[object Object]",Vn=Object.prototype.hasOwnProperty;function qn(t,e,n,r,i,o){var a=pt(t),s=pt(e),l=a?Un:Bn(t),u=s?Un:Bn(e),c=(l=l==Wn?Hn:l)==Hn,d=(u=u==Wn?Hn:u)==Hn,f=l==u;if(f&&yt(t)){if(!yt(e))return!1;a=!0,c=!1}if(f&&!c)return o||(o=new Be),a||Ct(t)?sn(t,e,n,r,i,o):function(t,e,n,r,i,o,a){switch(n){case xn:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case wn:return!(t.byteLength!=e.byteLength||!o(new qe(t),new qe(e)));case fn:case hn:case gn:return z(+t,+e);case pn:return t.name==e.name&&t.message==e.message;case mn:case bn:return t==e+"";case vn:var s=ln;case yn:var l=r&cn;if(s||(s=un),t.size!=e.size&&!l)return!1;var u=a.get(t);if(u)return u==e;r|=dn,a.set(t,e);var c=sn(s(t),s(e),r,i,o,a);return a.delete(t),c;case _n:if(Sn)return Sn.call(t)==Sn.call(e)}return!1}(t,e,l,n,r,i,o);if(!(n&Yn)){var h=c&&Vn.call(t,"__wrapped__"),p=d&&Vn.call(e,"__wrapped__");if(h||p){var v=h?t.value():t,g=p?e.value():e;return o||(o=new Be),i(v,g,n,r,o)}}return!!f&&(o||(o=new Be),function(t,e,n,r,i,o){var a=n&Dn,s=On(t),l=s.length;if(l!=On(e).length&&!a)return!1;for(var u=l;u--;){var c=s[u];if(!(a?c in e:Tn.call(e,c)))return!1}var d=o.get(t);if(d&&o.get(e))return d==e;var f=!0;o.set(t,e),o.set(e,t);for(var h=a;++u<l;){var p=t[c=s[u]],v=e[c];if(r)var g=a?r(v,p,c,e,t,o):r(p,v,c,t,e,o);if(!(void 0===g?p===v||i(p,v,n,r,o):g)){f=!1;break}h||(h="constructor"==c)}if(f&&!h){var m=t.constructor,y=e.constructor;m!=y&&"constructor"in t&&"constructor"in e&&!("function"==typeof m&&m instanceof m&&"function"==typeof y&&y instanceof y)&&(f=!1)}return o.delete(t),o.delete(e),f}(t,e,n,r,i,o))}function Gn(t,e,n,r,i){return t===e||(null==t||null==e||!st(t)&&!st(e)?t!=t&&e!=e:qn(t,e,n,r,Gn,i))}var Jn=1,Zn=2;function Kn(t){return t==t&&!_(t)}function Xn(t,e){return function(n){return null!=n&&(n[t]===e&&(void 0!==e||t in Object(n)))}}function Qn(t){var e=function(t){for(var e=re(t),n=e.length;n--;){var r=e[n],i=t[r];e[n]=[r,i,Kn(i)]}return e}(t);return 1==e.length&&e[0][2]?Xn(e[0][0],e[0][1]):function(n){return n===t||function(t,e,n,r){var i=n.length,o=i,a=!r;if(null==t)return!o;for(t=Object(t);i--;){var s=n[i];if(a&&s[2]?s[1]!==t[s[0]]:!(s[0]in t))return!1}for(;++i<o;){var l=(s=n[i])[0],u=t[l],c=s[1];if(a&&s[2]){if(void 0===u&&!(l in t))return!1}else{var d=new Be;if(r)var f=r(u,c,l,t,e,d);if(!(void 0===f?Gn(c,u,Jn|Zn,r,d):f))return!1}}return!0}(n,t,e)}}var tr=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,er=/^\w*$/;function nr(t,e){if(pt(t))return!1;var n=void 0===t?"undefined":i(t);return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=t&&!le(t))||(er.test(t)||!tr.test(t)||null!=e&&t in Object(e))}var rr="Expected a function";function ir(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new TypeError(rr);var n=function n(){var r=arguments,i=e?e.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var a=t.apply(this,r);return n.cache=o.set(i,a)||o,a};return n.cache=new(ir.Cache||$e),n}ir.Cache=$e;var or=500;var ar=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,sr=/\\(\\)?/g,lr=function(t){var e=ir(t,function(t){return n.size===or&&n.clear(),t}),n=e.cache;return e}(function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(ar,function(t,n,r,i){e.push(r?i.replace(sr,"$1"):n||t)}),e});function ur(t,e){return pt(t)?t:nr(t,e)?[t]:lr(he(t))}var cr=1/0;function dr(t){if("string"==typeof t||le(t))return t;var e=t+"";return"0"==e&&1/t==-cr?"-0":e}function fr(t,e){for(var n=0,r=(e=ur(e,t)).length;null!=t&&n<r;)t=t[dr(e[n++])];return n&&n==r?t:void 0}function hr(t,e){return null!=t&&e in Object(t)}function pr(t,e){return null!=t&&function(t,e,n){for(var r=-1,i=(e=ur(e,t)).length,o=!1;++r<i;){var a=dr(e[r]);if(!(o=null!=t&&n(t,a)))break;t=t[a]}return o||++r!=i?o:!!(i=null==t?0:t.length)&&tt(i)&&it(a,i)&&(pt(t)||ht(t))}(t,e,hr)}var vr=1,gr=2;function mr(t,e){return nr(t)&&Kn(e)?Xn(dr(t),e):function(n){var r=function(t,e,n){var r=null==t?void 0:fr(t,e);return void 0===r?n:r}(n,t);return void 0===r&&r===e?pr(n,t):Gn(e,r,vr|gr)}}function yr(t){return nr(t)?(e=dr(t),function(t){return null==t?void 0:t[e]}):function(t){return function(e){return fr(e,t)}}(t);var e}function br(t){return"function"==typeof t?t:null==t?U:"object"==(void 0===t?"undefined":i(t))?pt(t)?mr(t[0],t[1]):Qn(t):yr(t)}function _r(t,e){if(t!==e){var n=void 0!==t,r=null===t,i=t==t,o=le(t),a=void 0!==e,s=null===e,l=e==e,u=le(e);if(!s&&!u&&!o&&t>e||o&&a&&l&&!s&&!u||r&&a&&l||!n&&l||!i)return 1;if(!r&&!o&&!u&&t<e||u&&n&&i&&!r&&!o||s&&n&&i||!a&&i||!l)return-1}return 0}function wr(t,e,n){var r=-1;return e=Gt(e.length?e:[U],_t(br)),function(t,e){var n=t.length;for(t.sort(e);n--;)t[n]=t[n].value;return t}(function(t,e){var n=-1,r=et(t)?Array(t.length):[];return Ce(t,function(t,i,o){r[++n]=e(t,i,o)}),r}(t,function(t,n,i){return{criteria:Gt(e,function(e){return e(t)}),index:++r,value:t}}),function(t,e){return function(t,e,n){for(var r=-1,i=t.criteria,o=e.criteria,a=i.length,s=n.length;++r<a;){var l=_r(i[r],o[r]);if(l)return r>=s?l:l*("desc"==n[r]?-1:1)}return t.index-e.index}(t,e,n)})}In&&un(new In([,-0]))[1];var xr=function t(e){this.default=t.default,this._settings=tn({},t.default,e),this.init()};xr.prototype.init=function(){var t=this,e=[],n=this._settings.feed,r={rssToJson:xr.rssToJson,rssUrl:Array.isArray(n)?n:[n]};return Ae(r.rssUrl,function(n,i){t._request(r,n).then(function(n){if(e.push(t._process(JSON.parse(n),t._settings)),e.length===r.rssUrl.length){t._merge(e,t._settings);var i=t._render(t._merge(e,t._settings),t._settings),o=document.querySelector(t._settings.selector);o&&(o.innerHTML=i)}})}),this},xr.prototype._request=function(t,e){return new Promise(function(n,r){var i=new XMLHttpRequest;i.onreadystatechange=function(t){var e=t.target;4===e.readyState&&(e.status>=200&&e.status<400?n(e.response):r(new Error(e.status)))},i.ontimeout=function(){r(new Error("The Feed request timed out"))},i.open("GET",t.rssToJson+"?rss_url="+e,!0),i.send(),i=null})},xr.prototype._process=function(t,e){return xr.process[e.type](t,e)},xr.prototype._merge=function(t,e){return xr.merge[e.type](t)},xr.prototype._render=function(t,e){var n;return t.settings=e,e.log&&console.dir(t),function(t,e,n){var r=ge.imports._.templateSettings||ge;n&&ot(t,e,n)&&(e=void 0),t=he(t),e=Lt({},e,r,Xt);var i,o,a=Lt({},e.imports,r.imports,Xt),s=re(a),l=Jt(a,s),u=0,c=e.interpolate||we,d="__p += '",f=RegExp((e.escape||we).source+"|"+c.source+"|"+(c===ie?_e:we).source+"|"+(e.evaluate||we).source+"|$","g"),h="sourceURL"in e?"//# sourceURL="+e.sourceURL+"\n":"";t.replace(f,function(e,n,r,a,s,l){return r||(r=a),d+=t.slice(u,l).replace(xe,te),n&&(i=!0,d+="' +\n__e("+n+") +\n'"),s&&(o=!0,d+="';\n"+s+";\n__p += '"),r&&(d+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),u=l+e.length,e}),d+="';\n";var p=e.variable;p||(d="with (obj) {\n"+d+"\n}\n"),d=(o?d.replace(me,""):d).replace(ye,"$1").replace(be,"$1;"),d="function("+(p||"obj")+") {\n"+(p?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(o?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+d+"return __p\n}";var v=qt(function(){return Function(s,h+"return "+d).apply(void 0,l)});if(v.source=d,Vt(v))throw v;return v}((n=e.templates,null==n?[]:Jt(n,re(n))).join(""),{imports:{_each:Ae}})(t)},xr.rssToJson="https://api.rss2json.com/v1/api.json",xr.templates={medium:{opener:['<section class="o-feed <%- settings.classes.wrapper %>" style="',"<% if (settings.fontSize) { %>font-size: <%- settings.fontSize %>;<% } %>","<% if (settings.postBorderColor) { %>border-color: <%- settings.postBorderColor %>;<% } %>",'">'],header:['<header class="o-feed__header <%- settings.classes.header %>">','<div class="o-feed__avatar <%- settings.classes.avatar %>">','<img src="','<% if (settings.profileImg !== "") { %>',"<%- settings.profileImg %>","<% } else { %>","<%- feed.profileImg %>",'<% } %>" ','width="<%- settings.ratioProfile[0] %>" ','height="<%- settings.ratioProfile[1] %>">',"</div>",'<a class="o-feed__url <%- settings.classes.avatar %>" ','href="<% if (settings.titleUrl !== "") { %>',"<%- settings.titleUrl %>","<% } else { %>","<%- feed.url %>",'<% } %>" ','target="_blank" rel="noopener noreferrer nofollow">','<% if (settings.title !== "") { %>',"<%- settings.title %>","<% } else { %>","<%- feed.title %>","<% } %>","</a>","</header>"],posts:['<div class="o-feed__items" style="',"border-color: <%- settings.postBorderColor %>;",'">',"<% _each(items, function(post) { %>",'<div class="c-feed-item <%- settings.classes.feedItem %>">','<h4 class="c-feed-item__title <%- settings.classes.title %>">','<a class="c-feed-item__link <%- settings.classes.link %>"','href="<%- post.guid %>"','target="_blank"','rel="noopener noreferrer nofollow">',"<%- post.title %>","</a>","</h4>",'<span class="c-feed-item__date <%- settings.classes.date %>" ','title="<%- settings.postDateTitle %>">',"<%- post.date %>","</span>",'<div class="c-feed-item__thumbnail <%- settings.classes.thumbnail %>"','style="',"background-image: url(<%- post.thumbnail %>);",'height: <%- settings.postImgHeight %>;"','aria-hidden="true">','<img style="display: none;" src="<%- post.thumbnail %>" alt="<%- post.title %>">',"</div>",'<p class="c-feed-item__excerpt <%- settings.classes.excerpt %>">',"<%- post.excerpt %><%- settings.postExcerptTrail %>","</p>",'<div class="c-feed-item__footer <%- settings.classes.itemFooter %>">','<a class="c-feed-item__cta <%- settings.classes.cta %>" ','href="<%- post.guid %>" ','target="_blank" ','rel="noopener noreferrer nofollow">',"<%- settings.postCtaText %>","</a>","</div>","</div>","<% }); %>","</div>"],closer:["</section>"]}},xr.process={medium:function(t,e){var n=e.postExcerptLength;return Ae(t.items,function(t,r){var i,o="";return o=(o=(o=(o=t.description.replace(/<figure.*>.*?<\/figure>/g,"")).replace(/<(.|\n)*?>/g,"")).substr(0,n)).substr(0,Math.min(o.length,o.lastIndexOf(" "))),t.excerpt=o,i=new Date(Date.parse(t.pubDate.replace(" ","T"))).toLocaleDateString(e.postDateLocal,e.postDateFormat),t.date=i,t}),t}},xr.merge={medium:function(t){var e,n,r,i,o={},a=[];return t.forEach(function(t){a=a.concat(t.items)}),t.forEach(function(t){o=tn(o,t)}),o.items=(n="pubDate",r="desc",null==(e=a)?[]:(pt(n)||(n=null==n?[]:[n]),pt(r=i?void 0:r)||(r=null==r?[]:[r]),wr(e,n,r))),o}},xr.default={feed:"",selector:"#js-feed",type:"medium",title:"",titleUrl:"",profileImg:"",fontSize:"",ratioProfile:["50","50"],postBorderColor:"lightsteelblue",postImgHeight:"200px",postExcerptLength:120,postExcerptTrail:"…",postCtaText:"Read the full post",postDateLocal:"en-US",postDateFormat:{year:"numeric",month:"long",day:"numeric"},postDateTitle:"Published Date",classes:{wrapper:"",header:"",url:"",feedItem:"",title:"",link:"",thumbnail:"",excerpt:"",itemFooter:"",cta:"",date:""},templates:{opener:xr.templates.medium.opener.join(""),header:xr.templates.medium.header.join(""),posts:xr.templates.medium.posts.join(""),closer:xr.templates.medium.closer.join("")},log:!1,unique:!1};var kr=function t(e){var n=this,r=document.querySelector("body");return e=e||{},this._settings={selector:e.selector?e.selector:t.selector,namespace:e.namespace?e.namespace:t.namespace,inactiveClass:e.inactiveClass?e.inactiveClass:t.inactiveClass,activeClass:e.activeClass?e.activeClass:t.activeClass},r.addEventListener("click",function(t){t.target.matches(n._settings.selector)&&(t.preventDefault(),n._toggle(t))}),this};kr.prototype._toggle=function(t){var e=this,n=t.target,r=!1;if(r=n.getAttribute("href")?document.querySelector(n.getAttribute("href")):r,!(r=n.getAttribute("aria-controls")?document.querySelector("#"+n.getAttribute("aria-controls")):r))return this;if(this.elementToggle(n,r),n.dataset[this._settings.namespace+"Undo"]){var i=document.querySelector(n.dataset[this._settings.namespace+"Undo"]);i.addEventListener("click",function(t){t.preventDefault(),e.elementToggle(n,r),i.removeEventListener("click")})}return this},kr.prototype.elementToggle=function(t,e){""!==this._settings.activeClass&&(t.classList.toggle(this._settings.activeClass),e.classList.toggle(this._settings.activeClass)),""!==this._settings.inactiveClass&&e.classList.toggle(this._settings.inactiveClass);for(var n=0;n<kr.elAriaRoles.length;n++)t.getAttribute(kr.elAriaRoles[n])&&t.setAttribute(kr.elAriaRoles[n],!("true"===t.getAttribute(kr.elAriaRoles[n])));for(var r=0;r<kr.targetAriaRoles.length;r++)e.getAttribute(kr.targetAriaRoles[r])&&e.setAttribute(kr.targetAriaRoles[r],!("true"===e.getAttribute(kr.targetAriaRoles[r])));return t.getAttribute("href")&&e.classList.contains(this._settings.activeClass)&&(window.location.hash="",window.location.hash=t.getAttribute("href")),this},kr.selector='[data-js*="toggle"]',kr.namespace="toggle",kr.inactiveClass="hidden",kr.activeClass="active",kr.elAriaRoles=["aria-pressed","aria-expanded"],kr.targetAriaRoles=["aria-hidden"];var Sr=function t(e){var n=this,r=document.querySelector("body");return e=e||{},this._settings={selector:e.selector?e.selector:t.selector},r.addEventListener("click",function(t){if(t.target.matches(n._settings.selector)){var e=t.target.dataset.trackKey,r=JSON.parse(t.target.dataset.trackData);n.click(e,r)}}),this};Sr.prototype.click=function(e,n){var r=n.map(function(t){return t.hasOwnProperty(Sr.key)&&(t[Sr.key]=window.location.pathname+"/"+t[Sr.key]),t}),i=this.webtrends(e,r),o=this.gtag(e,r);return t.debug()&&console.dir({Track:[i,o]}),r},Sr.prototype.view=function(e,n,r){var i=this.webtrends(n,r),o=this.gtagView(e,n);t.debug()&&console.dir({Track:[i,o]})},Sr.prototype.webtrends=function(t,e){var n=[{"WT.ti":t}];e[0]&&e[0].hasOwnProperty(Sr.key)?n.push({"DCS.dcsuri":e[0][Sr.key]}):Object.assign(n,e);var r={argsa:n.flatMap(function(t){return Object.keys(t).flatMap(function(e){return[e,t[e]]})})};return"undefined"!=typeof Webtrends&&Webtrends.multiTrack(r),["Webtrends",r]},Sr.prototype.gtag=function(t,e){var n=e.find(function(t){return t.hasOwnProperty(Sr.key)}),r={event_category:t};return"undefined"!=typeof gtag&&gtag(Sr.key,n[Sr.key],r),["gtag",Sr.key,n[Sr.key],r]},Sr.prototype.gtagView=function(t,e){var n={app_name:t,screen_name:e};return"undefined"!=typeof gtag&&gtag("event","screen_view",n),["gtag",Sr.key,"screen_view",n]},Sr.selector='[data-js*="track"]',Sr.key="event";var Mr=Object.freeze({});function Cr(t){return void 0===t||null===t}function Ar(t){return void 0!==t&&null!==t}function Or(t){return!0===t}function Dr(t){return"string"==typeof t||"number"==typeof t||"symbol"===(void 0===t?"undefined":i(t))||"boolean"==typeof t}function Tr(t){return null!==t&&"object"===(void 0===t?"undefined":i(t))}var Pr=Object.prototype.toString;function Rr(t){return Pr.call(t).slice(8,-1)}function Ir(t){return"[object Object]"===Pr.call(t)}function Lr(t){return"[object RegExp]"===Pr.call(t)}function Er(t){var e=parseFloat(String(t));return e>=0&&Math.floor(e)===e&&isFinite(t)}function Fr(t){return Ar(t)&&"function"==typeof t.then&&"function"==typeof t.catch}function jr(t){return null==t?"":Array.isArray(t)||Ir(t)&&t.toString===Pr?JSON.stringify(t,null,2):String(t)}function Nr(t){var e=parseFloat(t);return isNaN(e)?t:e}function $r(t,e){for(var n=Object.create(null),r=t.split(","),i=0;i<r.length;i++)n[r[i]]=!0;return e?function(t){return n[t.toLowerCase()]}:function(t){return n[t]}}var zr=$r("slot,component",!0),Br=$r("key,ref,slot,slot-scope,is");function Yr(t,e){if(t.length){var n=t.indexOf(e);if(n>-1)return t.splice(n,1)}}var Wr=Object.prototype.hasOwnProperty;function Ur(t,e){return Wr.call(t,e)}function Hr(t){var e=Object.create(null);return function(n){return e[n]||(e[n]=t(n))}}var Vr=/-(\w)/g,qr=Hr(function(t){return t.replace(Vr,function(t,e){return e?e.toUpperCase():""})}),Gr=Hr(function(t){return t.charAt(0).toUpperCase()+t.slice(1)}),Jr=/\B([A-Z])/g,Zr=Hr(function(t){return t.replace(Jr,"-$1").toLowerCase()});var Kr=Function.prototype.bind?function(t,e){return t.bind(e)}:function(t,e){function n(n){var r=arguments.length;return r?r>1?t.apply(e,arguments):t.call(e,n):t.call(e)}return n._length=t.length,n};function Xr(t,e){e=e||0;for(var n=t.length-e,r=new Array(n);n--;)r[n]=t[n+e];return r}function Qr(t,e){for(var n in e)t[n]=e[n];return t}function ti(t){for(var e={},n=0;n<t.length;n++)t[n]&&Qr(e,t[n]);return e}function ei(t,e,n){}var ni=function(t,e,n){return!1},ri=function(t){return t};function ii(t,e){if(t===e)return!0;var n=Tr(t),r=Tr(e);if(!n||!r)return!n&&!r&&String(t)===String(e);try{var i=Array.isArray(t),o=Array.isArray(e);if(i&&o)return t.length===e.length&&t.every(function(t,n){return ii(t,e[n])});if(t instanceof Date&&e instanceof Date)return t.getTime()===e.getTime();if(i||o)return!1;var a=Object.keys(t),s=Object.keys(e);return a.length===s.length&&a.every(function(n){return ii(t[n],e[n])})}catch(t){return!1}}function oi(t,e){for(var n=0;n<t.length;n++)if(ii(t[n],e))return n;return-1}function ai(t){var e=!1;return function(){e||(e=!0,t.apply(this,arguments))}}var si="data-server-rendered",li=["component","directive","filter"],ui=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],ci={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!0,devtools:!0,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:ni,isReservedAttr:ni,isUnknownElement:ni,getTagNamespace:ei,parsePlatformTagName:ri,mustUseProp:ni,async:!0,_lifecycleHooks:ui},di="a-zA-Z·À-ÖØ-öø-ͽͿ-῿‌-‍‿-⁀⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�";function fi(t){var e=(t+"").charCodeAt(0);return 36===e||95===e}function hi(t,e,n,r){Object.defineProperty(t,e,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var pi=new RegExp("[^"+di+".$_\\d]");var vi,gi="__proto__"in{},mi="undefined"!=typeof window,yi="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,bi=yi&&WXEnvironment.platform.toLowerCase(),_i=mi&&window.navigator.userAgent.toLowerCase(),wi=_i&&/msie|trident/.test(_i),xi=_i&&_i.indexOf("msie 9.0")>0,ki=_i&&_i.indexOf("edge/")>0,Si=(_i&&_i.indexOf("android"),_i&&/iphone|ipad|ipod|ios/.test(_i)||"ios"===bi),Mi=(_i&&/chrome\/\d+/.test(_i),_i&&/phantomjs/.test(_i),_i&&_i.match(/firefox\/(\d+)/)),Ci={}.watch,Ai=!1;if(mi)try{var Oi={};Object.defineProperty(Oi,"passive",{get:function(){Ai=!0}}),window.addEventListener("test-passive",null,Oi)}catch(t){}var Di=function(){return void 0===vi&&(vi=!mi&&!yi&&void 0!==n&&(n.process&&"server"===n.process.env.VUE_ENV)),vi},Ti=mi&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function Pi(t){return"function"==typeof t&&/native code/.test(t.toString())}var Ri,Ii="undefined"!=typeof Symbol&&Pi(Symbol)&&"undefined"!=typeof Reflect&&Pi(Reflect.ownKeys);Ri="undefined"!=typeof Set&&Pi(Set)?Set:function(){function t(){this.set=Object.create(null)}return t.prototype.has=function(t){return!0===this.set[t]},t.prototype.add=function(t){this.set[t]=!0},t.prototype.clear=function(){this.set=Object.create(null)},t}();var Li=ei,Ei=ei,Fi=ei,ji=ei,Ni="undefined"!=typeof console,$i=/(?:^|[-_])(\w)/g;Li=function(t,e){var n=e?Fi(e):"";ci.warnHandler?ci.warnHandler.call(null,t,e,n):Ni&&!ci.silent&&console.error("[Vue warn]: "+t+n)},Ei=function(t,e){Ni&&!ci.silent&&console.warn("[Vue tip]: "+t+(e?Fi(e):""))},ji=function(t,e){if(t.$root===t)return"<Root>";var n="function"==typeof t&&null!=t.cid?t.options:t._isVue?t.$options||t.constructor.options:t,r=n.name||n._componentTag,i=n.__file;if(!r&&i){var o=i.match(/([^/\\]+)\.vue$/);r=o&&o[1]}return(r?"<"+r.replace($i,function(t){return t.toUpperCase()}).replace(/[-_]/g,"")+">":"<Anonymous>")+(i&&!1!==e?" at "+i:"")};Fi=function(t){if(t._isVue&&t.$parent){for(var e=[],n=0;t;){if(e.length>0){var r=e[e.length-1];if(r.constructor===t.constructor){n++,t=t.$parent;continue}n>0&&(e[e.length-1]=[r,n],n=0)}e.push(t),t=t.$parent}return"\n\nfound in\n\n"+e.map(function(t,e){return""+(0===e?"---\x3e ":function(t,e){for(var n="";e;)e%2==1&&(n+=t),e>1&&(t+=t),e>>=1;return n}(" ",5+2*e))+(Array.isArray(t)?ji(t[0])+"... ("+t[1]+" recursive calls)":ji(t))}).join("\n")}return"\n\n(found in "+ji(t)+")"};var zi=0,Bi=function(){this.id=zi++,this.subs=[]};Bi.prototype.addSub=function(t){this.subs.push(t)},Bi.prototype.removeSub=function(t){Yr(this.subs,t)},Bi.prototype.depend=function(){Bi.target&&Bi.target.addDep(this)},Bi.prototype.notify=function(){var t=this.subs.slice();ci.async||t.sort(function(t,e){return t.id-e.id});for(var e=0,n=t.length;e<n;e++)t[e].update()},Bi.target=null;var Yi=[];function Wi(t){Yi.push(t),Bi.target=t}function Ui(){Yi.pop(),Bi.target=Yi[Yi.length-1]}var Hi=function(t,e,n,r,i,o,a,s){this.tag=t,this.data=e,this.children=n,this.text=r,this.elm=i,this.ns=void 0,this.context=o,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},Vi={child:{configurable:!0}};Vi.child.get=function(){return this.componentInstance},Object.defineProperties(Hi.prototype,Vi);var qi=function(t){void 0===t&&(t="");var e=new Hi;return e.text=t,e.isComment=!0,e};function Gi(t){return new Hi(void 0,void 0,void 0,String(t))}function Ji(t){var e=new Hi(t.tag,t.data,t.children&&t.children.slice(),t.text,t.elm,t.context,t.componentOptions,t.asyncFactory);return e.ns=t.ns,e.isStatic=t.isStatic,e.key=t.key,e.isComment=t.isComment,e.fnContext=t.fnContext,e.fnOptions=t.fnOptions,e.fnScopeId=t.fnScopeId,e.asyncMeta=t.asyncMeta,e.isCloned=!0,e}var Zi=Array.prototype,Ki=Object.create(Zi);["push","pop","shift","unshift","splice","sort","reverse"].forEach(function(t){var e=Zi[t];hi(Ki,t,function(){for(var n=[],r=arguments.length;r--;)n[r]=arguments[r];var i,o=e.apply(this,n),a=this.__ob__;switch(t){case"push":case"unshift":i=n;break;case"splice":i=n.slice(2)}return i&&a.observeArray(i),a.dep.notify(),o})});var Xi=Object.getOwnPropertyNames(Ki),Qi=!0;function to(t){Qi=t}var eo=function(t){var e;this.value=t,this.dep=new Bi,this.vmCount=0,hi(t,"__ob__",this),Array.isArray(t)?(gi?(e=Ki,t.__proto__=e):function(t,e,n){for(var r=0,i=n.length;r<i;r++){var o=n[r];hi(t,o,e[o])}}(t,Ki,Xi),this.observeArray(t)):this.walk(t)};function no(t,e){var n;if(Tr(t)&&!(t instanceof Hi))return Ur(t,"__ob__")&&t.__ob__ instanceof eo?n=t.__ob__:Qi&&!Di()&&(Array.isArray(t)||Ir(t))&&Object.isExtensible(t)&&!t._isVue&&(n=new eo(t)),e&&n&&n.vmCount++,n}function ro(t,e,n,r,i){var o=new Bi,a=Object.getOwnPropertyDescriptor(t,e);if(!a||!1!==a.configurable){var s=a&&a.get,l=a&&a.set;s&&!l||2!==arguments.length||(n=t[e]);var u=!i&&no(n);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:function(){var e=s?s.call(t):n;return Bi.target&&(o.depend(),u&&(u.dep.depend(),Array.isArray(e)&&function t(e){for(var n=void 0,r=0,i=e.length;r<i;r++)(n=e[r])&&n.__ob__&&n.__ob__.dep.depend(),Array.isArray(n)&&t(n)}(e))),e},set:function(e){var a=s?s.call(t):n;e===a||e!=e&&a!=a||(r&&r(),s&&!l||(l?l.call(t,e):n=e,u=!i&&no(e),o.notify()))}})}}function io(t,e,n){if((Cr(t)||Dr(t))&&Li("Cannot set reactive property on undefined, null, or primitive value: "+t),Array.isArray(t)&&Er(e))return t.length=Math.max(t.length,e),t.splice(e,1,n),n;if(e in t&&!(e in Object.prototype))return t[e]=n,n;var r=t.__ob__;return t._isVue||r&&r.vmCount?(Li("Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option."),n):r?(ro(r.value,e,n),r.dep.notify(),n):(t[e]=n,n)}function oo(t,e){if((Cr(t)||Dr(t))&&Li("Cannot delete reactive property on undefined, null, or primitive value: "+t),Array.isArray(t)&&Er(e))t.splice(e,1);else{var n=t.__ob__;t._isVue||n&&n.vmCount?Li("Avoid deleting properties on a Vue instance or its root $data - just set it to null."):Ur(t,e)&&(delete t[e],n&&n.dep.notify())}}eo.prototype.walk=function(t){for(var e=Object.keys(t),n=0;n<e.length;n++)ro(t,e[n])},eo.prototype.observeArray=function(t){for(var e=0,n=t.length;e<n;e++)no(t[e])};var ao=ci.optionMergeStrategies;function so(t,e){if(!e)return t;for(var n,r,i,o=Ii?Reflect.ownKeys(e):Object.keys(e),a=0;a<o.length;a++)"__ob__"!==(n=o[a])&&(r=t[n],i=e[n],Ur(t,n)?r!==i&&Ir(r)&&Ir(i)&&so(r,i):io(t,n,i));return t}function lo(t,e,n){return n?function(){var r="function"==typeof e?e.call(n,n):e,i="function"==typeof t?t.call(n,n):t;return r?so(r,i):i}:e?t?function(){return so("function"==typeof e?e.call(this,this):e,"function"==typeof t?t.call(this,this):t)}:e:t}function uo(t,e){var n=e?t?t.concat(e):Array.isArray(e)?e:[e]:t;return n?function(t){for(var e=[],n=0;n<t.length;n++)-1===e.indexOf(t[n])&&e.push(t[n]);return e}(n):n}function co(t,e,n,r){var i=Object.create(t||null);return e?(po(r,e,n),Qr(i,e)):i}ao.el=ao.propsData=function(t,e,n,r){return n||Li('option "'+r+'" can only be used during instance creation with the `new` keyword.'),fo(t,e)},ao.data=function(t,e,n){return n?lo(t,e,n):e&&"function"!=typeof e?(Li('The "data" option should be a function that returns a per-instance value in component definitions.',n),t):lo(t,e)},ui.forEach(function(t){ao[t]=uo}),li.forEach(function(t){ao[t+"s"]=co}),ao.watch=function(t,e,n,r){if(t===Ci&&(t=void 0),e===Ci&&(e=void 0),!e)return Object.create(t||null);if(po(r,e,n),!t)return e;var i={};for(var o in Qr(i,t),e){var a=i[o],s=e[o];a&&!Array.isArray(a)&&(a=[a]),i[o]=a?a.concat(s):Array.isArray(s)?s:[s]}return i},ao.props=ao.methods=ao.inject=ao.computed=function(t,e,n,r){if(e&&po(r,e,n),!t)return e;var i=Object.create(null);return Qr(i,t),e&&Qr(i,e),i},ao.provide=lo;var fo=function(t,e){return void 0===e?t:e};function ho(t){new RegExp("^[a-zA-Z][\\-\\.0-9_"+di+"]*$").test(t)||Li('Invalid component name: "'+t+'". Component names should conform to valid custom element name in html5 specification.'),(zr(t)||ci.isReservedTag(t))&&Li("Do not use built-in or reserved HTML elements as component id: "+t)}function po(t,e,n){Ir(e)||Li('Invalid value for option "'+t+'": expected an Object, but got '+Rr(e)+".",n)}function vo(t,e,n){if(function(t){for(var e in t.components)ho(e)}(e),"function"==typeof e&&(e=e.options),function(t,e){var n=t.props;if(n){var r,i,o={};if(Array.isArray(n))for(r=n.length;r--;)"string"==typeof(i=n[r])?o[qr(i)]={type:null}:Li("props must be strings when using array syntax.");else if(Ir(n))for(var a in n)i=n[a],o[qr(a)]=Ir(i)?i:{type:i};else Li('Invalid value for option "props": expected an Array or an Object, but got '+Rr(n)+".",e);t.props=o}}(e,n),function(t,e){var n=t.inject;if(n){var r=t.inject={};if(Array.isArray(n))for(var i=0;i<n.length;i++)r[n[i]]={from:n[i]};else if(Ir(n))for(var o in n){var a=n[o];r[o]=Ir(a)?Qr({from:o},a):{from:a}}else Li('Invalid value for option "inject": expected an Array or an Object, but got '+Rr(n)+".",e)}}(e,n),function(t){var e=t.directives;if(e)for(var n in e){var r=e[n];"function"==typeof r&&(e[n]={bind:r,update:r})}}(e),!e._base&&(e.extends&&(t=vo(t,e.extends,n)),e.mixins))for(var r=0,i=e.mixins.length;r<i;r++)t=vo(t,e.mixins[r],n);var o,a={};for(o in t)s(o);for(o in e)Ur(t,o)||s(o);function s(r){var i=ao[r]||fo;a[r]=i(t[r],e[r],n,r)}return a}function go(t,e,n,r){if("string"==typeof n){var i=t[e];if(Ur(i,n))return i[n];var o=qr(n);if(Ur(i,o))return i[o];var a=Gr(o);if(Ur(i,a))return i[a];var s=i[n]||i[o]||i[a];return r&&!s&&Li("Failed to resolve "+e.slice(0,-1)+": "+n,t),s}}function mo(t,e,n,r){var i=e[t],o=!Ur(n,t),a=n[t],s=xo(Boolean,i.type);if(s>-1)if(o&&!Ur(i,"default"))a=!1;else if(""===a||a===Zr(t)){var l=xo(String,i.type);(l<0||s<l)&&(a=!0)}if(void 0===a){a=function(t,e,n){if(!Ur(e,"default"))return;var r=e.default;Tr(r)&&Li('Invalid default value for prop "'+n+'": Props with type Object/Array must use a factory function to return the default value.',t);if(t&&t.$options.propsData&&void 0===t.$options.propsData[n]&&void 0!==t._props[n])return t._props[n];return"function"==typeof r&&"Function"!==_o(e.type)?r.call(t):r}(r,i,t);var u=Qi;to(!0),no(a),to(u)}return function(t,e,n,r,i){if(t.required&&i)return void Li('Missing required prop: "'+e+'"',r);if(null==n&&!t.required)return;var o=t.type,a=!o||!0===o,s=[];if(o){Array.isArray(o)||(o=[o]);for(var l=0;l<o.length&&!a;l++){var u=bo(n,o[l]);s.push(u.expectedType||""),a=u.valid}}if(!a)return void Li(function(t,e,n){var r='Invalid prop: type check failed for prop "'+t+'". Expected '+n.map(Gr).join(", "),i=n[0],o=Rr(e),a=ko(e,i),s=ko(e,o);1===n.length&&So(i)&&!function(){var t=[],e=arguments.length;for(;e--;)t[e]=arguments[e];return t.some(function(t){return"boolean"===t.toLowerCase()})}(i,o)&&(r+=" with value "+a);r+=", got "+o+" ",So(o)&&(r+="with value "+s+".");return r}(e,n,s),r);var c=t.validator;c&&(c(n)||Li('Invalid prop: custom validator check failed for prop "'+e+'".',r))}(i,t,a,r,o),a}var yo=/^(String|Number|Boolean|Function|Symbol)$/;function bo(t,e){var n,r=_o(e);if(yo.test(r)){var o=void 0===t?"undefined":i(t);(n=o===r.toLowerCase())||"object"!==o||(n=t instanceof e)}else n="Object"===r?Ir(t):"Array"===r?Array.isArray(t):t instanceof e;return{valid:n,expectedType:r}}function _o(t){var e=t&&t.toString().match(/^\s*function (\w+)/);return e?e[1]:""}function wo(t,e){return _o(t)===_o(e)}function xo(t,e){if(!Array.isArray(e))return wo(e,t)?0:-1;for(var n=0,r=e.length;n<r;n++)if(wo(e[n],t))return n;return-1}function ko(t,e){return"String"===e?'"'+t+'"':"Number"===e?""+Number(t):""+t}function So(t){return["string","number","boolean"].some(function(e){return t.toLowerCase()===e})}function Mo(t,e,n){if(e)for(var r=e;r=r.$parent;){var i=r.$options.errorCaptured;if(i)for(var o=0;o<i.length;o++)try{if(!1===i[o].call(r,t,e,n))return}catch(t){Ao(t,r,"errorCaptured hook")}}Ao(t,e,n)}function Co(t,e,n,r,i){var o;try{(o=n?t.apply(e,n):t.call(e))&&!o._isVue&&Fr(o)&&o.catch(function(t){return Mo(t,r,i+" (Promise/async)")})}catch(t){Mo(t,r,i)}return o}function Ao(t,e,n){if(ci.errorHandler)try{return ci.errorHandler.call(null,t,e,n)}catch(e){e!==t&&Oo(e,null,"config.errorHandler")}Oo(t,e,n)}function Oo(t,e,n){if(Li("Error in "+n+': "'+t.toString()+'"',e),!mi&&!yi||"undefined"==typeof console)throw t;console.error(t)}var Do,To,Po,Ro=!1,Io=[],Lo=!1;function Eo(){Lo=!1;var t=Io.slice(0);Io.length=0;for(var e=0;e<t.length;e++)t[e]()}if("undefined"!=typeof Promise&&Pi(Promise)){var Fo=Promise.resolve();Do=function(){Fo.then(Eo),Si&&setTimeout(ei)},Ro=!0}else if(wi||"undefined"==typeof MutationObserver||!Pi(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Do="undefined"!=typeof setImmediate&&Pi(setImmediate)?function(){setImmediate(Eo)}:function(){setTimeout(Eo,0)};else{var jo=1,No=new MutationObserver(Eo),$o=document.createTextNode(String(jo));No.observe($o,{characterData:!0}),Do=function(){jo=(jo+1)%2,$o.data=String(jo)},Ro=!0}function zo(t,e){var n;if(Io.push(function(){if(t)try{t.call(e)}catch(t){Mo(t,e,"nextTick")}else n&&n(e)}),Lo||(Lo=!0,Do()),!t&&"undefined"!=typeof Promise)return new Promise(function(t){n=t})}var Bo,Yo=mi&&window.performance;Yo&&Yo.mark&&Yo.measure&&Yo.clearMarks&&Yo.clearMeasures&&(To=function(t){return Yo.mark(t)},Po=function(t,e,n){Yo.measure(t,e,n),Yo.clearMarks(e),Yo.clearMarks(n)});var Wo=$r("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,require"),Uo=function(t,e){Li('Property or method "'+e+'" is not defined on the instance but referenced during render. Make sure that this property is reactive, either in the data option, or for class-based components, by initializing the property. See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',t)},Ho=function(t,e){Li('Property "'+e+'" must be accessed with "$data.'+e+'" because properties starting with "$" or "_" are not proxied in the Vue instance to prevent conflicts with Vue internalsSee: https://vuejs.org/v2/api/#data',t)},Vo="undefined"!=typeof Proxy&&Pi(Proxy);if(Vo){var qo=$r("stop,prevent,self,ctrl,shift,alt,meta,exact");ci.keyCodes=new Proxy(ci.keyCodes,{set:function(t,e,n){return qo(e)?(Li("Avoid overwriting built-in modifier in config.keyCodes: ."+e),!1):(t[e]=n,!0)}})}var Go={has:function(t,e){var n=e in t,r=Wo(e)||"string"==typeof e&&"_"===e.charAt(0)&&!(e in t.$data);return n||r||(e in t.$data?Ho(t,e):Uo(t,e)),n||!r}},Jo={get:function(t,e){return"string"!=typeof e||e in t||(e in t.$data?Ho(t,e):Uo(t,e)),t[e]}};Bo=function(t){if(Vo){var e=t.$options,n=e.render&&e.render._withStripped?Jo:Go;t._renderProxy=new Proxy(t,n)}else t._renderProxy=t};var Zo=new Ri;function Ko(t){!function t(e,n){var r,i;var o=Array.isArray(e);if(!o&&!Tr(e)||Object.isFrozen(e)||e instanceof Hi)return;if(e.__ob__){var a=e.__ob__.dep.id;if(n.has(a))return;n.add(a)}if(o)for(r=e.length;r--;)t(e[r],n);else for(i=Object.keys(e),r=i.length;r--;)t(e[i[r]],n)}(t,Zo),Zo.clear()}var Xo=Hr(function(t){var e="&"===t.charAt(0),n="~"===(t=e?t.slice(1):t).charAt(0),r="!"===(t=n?t.slice(1):t).charAt(0);return{name:t=r?t.slice(1):t,once:n,capture:r,passive:e}});function Qo(t,e){function n(){var t=arguments,r=n.fns;if(!Array.isArray(r))return Co(r,null,arguments,e,"v-on handler");for(var i=r.slice(),o=0;o<i.length;o++)Co(i[o],null,t,e,"v-on handler")}return n.fns=t,n}function ta(t,e,n,r,i,o){var a,s,l,u;for(a in t)s=t[a],l=e[a],u=Xo(a),Cr(s)?Li('Invalid handler for event "'+u.name+'": got '+String(s),o):Cr(l)?(Cr(s.fns)&&(s=t[a]=Qo(s,o)),Or(u.once)&&(s=t[a]=i(u.name,s,u.capture)),n(u.name,s,u.capture,u.passive,u.params)):s!==l&&(l.fns=s,t[a]=l);for(a in e)Cr(t[a])&&r((u=Xo(a)).name,e[a],u.capture)}function ea(t,e,n){var r;t instanceof Hi&&(t=t.data.hook||(t.data.hook={}));var i=t[e];function o(){n.apply(this,arguments),Yr(r.fns,o)}Cr(i)?r=Qo([o]):Ar(i.fns)&&Or(i.merged)?(r=i).fns.push(o):r=Qo([i,o]),r.merged=!0,t[e]=r}function na(t,e,n,r,i){if(Ar(e)){if(Ur(e,n))return t[n]=e[n],i||delete e[n],!0;if(Ur(e,r))return t[n]=e[r],i||delete e[r],!0}return!1}function ra(t){return Dr(t)?[Gi(t)]:Array.isArray(t)?function t(e,n){var r=[];var i,o,a,s;for(i=0;i<e.length;i++)Cr(o=e[i])||"boolean"==typeof o||(a=r.length-1,s=r[a],Array.isArray(o)?o.length>0&&(ia((o=t(o,(n||"")+"_"+i))[0])&&ia(s)&&(r[a]=Gi(s.text+o[0].text),o.shift()),r.push.apply(r,o)):Dr(o)?ia(s)?r[a]=Gi(s.text+o):""!==o&&r.push(Gi(o)):ia(o)&&ia(s)?r[a]=Gi(s.text+o.text):(Or(e._isVList)&&Ar(o.tag)&&Cr(o.key)&&Ar(n)&&(o.key="__vlist"+n+"_"+i+"__"),r.push(o)));return r}(t):void 0}function ia(t){return Ar(t)&&Ar(t.text)&&!1===t.isComment}function oa(t,e){if(t){for(var n=Object.create(null),r=Ii?Reflect.ownKeys(t):Object.keys(t),i=0;i<r.length;i++){var o=r[i];if("__ob__"!==o){for(var a=t[o].from,s=e;s;){if(s._provided&&Ur(s._provided,a)){n[o]=s._provided[a];break}s=s.$parent}if(!s)if("default"in t[o]){var l=t[o].default;n[o]="function"==typeof l?l.call(e):l}else Li('Injection "'+o+'" not found',e)}}return n}}function aa(t,e){if(!t||!t.length)return{};for(var n={},r=0,i=t.length;r<i;r++){var o=t[r],a=o.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,o.context!==e&&o.fnContext!==e||!a||null==a.slot)(n.default||(n.default=[])).push(o);else{var s=a.slot,l=n[s]||(n[s]=[]);"template"===o.tag?l.push.apply(l,o.children||[]):l.push(o)}}for(var u in n)n[u].every(sa)&&delete n[u];return n}function sa(t){return t.isComment&&!t.asyncFactory||" "===t.text}function la(t,e,n){var r;if(t){if(t._normalized)return t._normalized;if(t.$stable&&n&&n!==Mr&&0===Object.keys(e).length)return n;for(var i in r={},t)t[i]&&"$"!==i[0]&&(r[i]=ua(e,i,t[i]))}else r={};for(var o in e)o in r||(r[o]=ca(e,o));return t&&Object.isExtensible(t)&&(t._normalized=r),hi(r,"$stable",!t||!!t.$stable),r}function ua(t,e,n){var r=function(){var t=arguments.length?n.apply(null,arguments):n({});return(t=t&&"object"===(void 0===t?"undefined":i(t))&&!Array.isArray(t)?[t]:ra(t))&&0===t.length?void 0:t};return n.proxy&&Object.defineProperty(t,e,{get:r,enumerable:!0,configurable:!0}),r}function ca(t,e){return function(){return t[e]}}function da(t,e){var n,r,i,o,a;if(Array.isArray(t)||"string"==typeof t)for(n=new Array(t.length),r=0,i=t.length;r<i;r++)n[r]=e(t[r],r);else if("number"==typeof t)for(n=new Array(t),r=0;r<t;r++)n[r]=e(r+1,r);else if(Tr(t))if(Ii&&t[Symbol.iterator]){n=[];for(var s=t[Symbol.iterator](),l=s.next();!l.done;)n.push(e(l.value,n.length)),l=s.next()}else for(o=Object.keys(t),n=new Array(o.length),r=0,i=o.length;r<i;r++)a=o[r],n[r]=e(t[a],a,r);return Ar(n)||(n=[]),n._isVList=!0,n}function fa(t,e,n,r){var i,o=this.$scopedSlots[t];o?(n=n||{},r&&(Tr(r)||Li("slot v-bind without argument expects an Object",this),n=Qr(Qr({},r),n)),i=o(n)||e):i=this.$slots[t]||e;var a=n&&n.slot;return a?this.$createElement("template",{slot:a},i):i}function ha(t){return go(this.$options,"filters",t,!0)||ri}function pa(t,e){return Array.isArray(t)?-1===t.indexOf(e):t!==e}function va(t,e,n,r,i){var o=ci.keyCodes[e]||n;return i&&r&&!ci.keyCodes[e]?pa(i,r):o?pa(o,t):r?Zr(r)!==e:void 0}function ga(t,e,n,r,i){if(n)if(Tr(n)){var o;Array.isArray(n)&&(n=ti(n));var a=function(a){if("class"===a||"style"===a||Br(a))o=t;else{var s=t.attrs&&t.attrs.type;o=r||ci.mustUseProp(e,s,a)?t.domProps||(t.domProps={}):t.attrs||(t.attrs={})}var l=qr(a);a in o||l in o||(o[a]=n[a],i&&((t.on||(t.on={}))["update:"+l]=function(t){n[a]=t}))};for(var s in n)a(s)}else Li("v-bind without argument expects an Object or Array value",this);return t}function ma(t,e){var n=this._staticTrees||(this._staticTrees=[]),r=n[t];return r&&!e?r:(ba(r=n[t]=this.$options.staticRenderFns[t].call(this._renderProxy,null,this),"__static__"+t,!1),r)}function ya(t,e,n){return ba(t,"__once__"+e+(n?"_"+n:""),!0),t}function ba(t,e,n){if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]&&"string"!=typeof t[r]&&_a(t[r],e+"_"+r,n);else _a(t,e,n)}function _a(t,e,n){t.isStatic=!0,t.key=e,t.isOnce=n}function wa(t,e){if(e)if(Ir(e)){var n=t.on=t.on?Qr({},t.on):{};for(var r in e){var i=n[r],o=e[r];n[r]=i?[].concat(i,o):o}}else Li("v-on without argument expects an Object value",this);return t}function xa(t,e,n){n=n||{$stable:!e};for(var r=0;r<t.length;r++){var i=t[r];Array.isArray(i)?xa(i,e,n):i&&(i.proxy&&(i.fn.proxy=!0),n[i.key]=i.fn)}return n}function ka(t,e){for(var n=0;n<e.length;n+=2){var r=e[n];"string"==typeof r&&r?t[e[n]]=e[n+1]:""!==r&&null!==r&&Li("Invalid value for dynamic directive argument (expected string or null): "+r,this)}return t}function Sa(t,e){return"string"==typeof t?e+t:t}function Ma(t){t._o=ya,t._n=Nr,t._s=jr,t._l=da,t._t=fa,t._q=ii,t._i=oi,t._m=ma,t._f=ha,t._k=va,t._b=ga,t._v=Gi,t._e=qi,t._u=xa,t._g=wa,t._d=ka,t._p=Sa}function Ca(t,e,n,r,i){var o,a=this,s=i.options;Ur(r,"_uid")?(o=Object.create(r))._original=r:(o=r,r=r._original);var l=Or(s._compiled),u=!l;this.data=t,this.props=e,this.children=n,this.parent=r,this.listeners=t.on||Mr,this.injections=oa(s.inject,r),this.slots=function(){return a.$slots||la(t.scopedSlots,a.$slots=aa(n,r)),a.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return la(t.scopedSlots,this.slots())}}),l&&(this.$options=s,this.$slots=this.slots(),this.$scopedSlots=la(t.scopedSlots,this.$slots)),s._scopeId?this._c=function(t,e,n,i){var a=Ea(o,t,e,n,i,u);return a&&!Array.isArray(a)&&(a.fnScopeId=s._scopeId,a.fnContext=r),a}:this._c=function(t,e,n,r){return Ea(o,t,e,n,r,u)}}function Aa(t,e,n,r,i){var o=Ji(t);return o.fnContext=n,o.fnOptions=r,(o.devtoolsMeta=o.devtoolsMeta||{}).renderContext=i,e.slot&&((o.data||(o.data={})).slot=e.slot),o}function Oa(t,e){for(var n in e)t[qr(n)]=e[n]}Ma(Ca.prototype);var Da={init:function(t,e){if(t.componentInstance&&!t.componentInstance._isDestroyed&&t.data.keepAlive){var n=t;Da.prepatch(n,n)}else{(t.componentInstance=function(t,e){var n={_isComponent:!0,_parentVnode:t,parent:e},r=t.data.inlineTemplate;Ar(r)&&(n.render=r.render,n.staticRenderFns=r.staticRenderFns);return new t.componentOptions.Ctor(n)}(t,Ha)).$mount(e?t.elm:void 0,e)}},prepatch:function(t,e){var n=e.componentOptions;!function(t,e,n,r,i){Va=!0;var o=!!(r.data.scopedSlots&&!r.data.scopedSlots.$stable||t.$scopedSlots!==Mr&&!t.$scopedSlots.$stable),a=!!(i||t.$options._renderChildren||o);t.$options._parentVnode=r,t.$vnode=r,t._vnode&&(t._vnode.parent=r);if(t.$options._renderChildren=i,t.$attrs=r.data.attrs||Mr,t.$listeners=n||Mr,e&&t.$options.props){to(!1);for(var s=t._props,l=t.$options._propKeys||[],u=0;u<l.length;u++){var c=l[u],d=t.$options.props;s[c]=mo(c,d,e,t)}to(!0),t.$options.propsData=e}n=n||Mr;var f=t.$options._parentListeners;t.$options._parentListeners=n,Ua(t,n,f),a&&(t.$slots=aa(i,r.context),t.$forceUpdate());Va=!1}(e.componentInstance=t.componentInstance,n.propsData,n.listeners,e,n.children)},insert:function(t){var e,n=t.context,r=t.componentInstance;r._isMounted||(r._isMounted=!0,Za(r,"mounted")),t.data.keepAlive&&(n._isMounted?((e=r)._inactive=!1,Qa.push(e)):Ja(r,!0))},destroy:function(t){var e=t.componentInstance;e._isDestroyed||(t.data.keepAlive?function t(e,n){if(n&&(e._directInactive=!0,Ga(e)))return;if(!e._inactive){e._inactive=!0;for(var r=0;r<e.$children.length;r++)t(e.$children[r]);Za(e,"deactivated")}}(e,!0):e.$destroy())}},Ta=Object.keys(Da);function Pa(t,e,n,r,i){if(!Cr(t)){var o=n.$options._base;if(Tr(t)&&(t=o.extend(t)),"function"==typeof t){var a;if(Cr(t.cid)&&void 0===(t=function(t,e){if(Or(t.error)&&Ar(t.errorComp))return t.errorComp;if(Ar(t.resolved))return t.resolved;if(Or(t.loading)&&Ar(t.loadingComp))return t.loadingComp;var n=ja;if(!Ar(t.owners)){var r=t.owners=[n],i=!0,o=function(t){for(var e=0,n=r.length;e<n;e++)r[e].$forceUpdate();t&&(r.length=0)},a=ai(function(n){t.resolved=Na(n,e),i?r.length=0:o(!0)}),s=ai(function(e){Li("Failed to resolve async component: "+String(t)+(e?"\nReason: "+e:"")),Ar(t.errorComp)&&(t.error=!0,o(!0))}),l=t(a,s);return Tr(l)&&(Fr(l)?Cr(t.resolved)&&l.then(a,s):Fr(l.component)&&(l.component.then(a,s),Ar(l.error)&&(t.errorComp=Na(l.error,e)),Ar(l.loading)&&(t.loadingComp=Na(l.loading,e),0===l.delay?t.loading=!0:setTimeout(function(){Cr(t.resolved)&&Cr(t.error)&&(t.loading=!0,o(!1))},l.delay||200)),Ar(l.timeout)&&setTimeout(function(){Cr(t.resolved)&&s("timeout ("+l.timeout+"ms)")},l.timeout))),i=!1,t.loading?t.loadingComp:t.resolved}t.owners.push(n)}(a=t,o)))return function(t,e,n,r,i){var o=qi();return o.asyncFactory=t,o.asyncMeta={data:e,context:n,children:r,tag:i},o}(a,e,n,r,i);e=e||{},bs(t),Ar(e.model)&&function(t,e){var n=t.model&&t.model.prop||"value",r=t.model&&t.model.event||"input";(e.attrs||(e.attrs={}))[n]=e.model.value;var i=e.on||(e.on={}),o=i[r],a=e.model.callback;Ar(o)?(Array.isArray(o)?-1===o.indexOf(a):o!==a)&&(i[r]=[a].concat(o)):i[r]=a}(t.options,e);var s=function(t,e,n){var r=e.options.props;if(!Cr(r)){var i={},o=t.attrs,a=t.props;if(Ar(o)||Ar(a))for(var s in r){var l=Zr(s),u=s.toLowerCase();s!==u&&o&&Ur(o,u)&&Ei('Prop "'+u+'" is passed to component '+ji(n||e)+', but the declared prop name is "'+s+'". Note that HTML attributes are case-insensitive and camelCased props need to use their kebab-case equivalents when using in-DOM templates. You should probably use "'+l+'" instead of "'+s+'".'),na(i,a,s,l,!0)||na(i,o,s,l,!1)}return i}}(e,t,i);if(Or(t.options.functional))return function(t,e,n,r,i){var o=t.options,a={},s=o.props;if(Ar(s))for(var l in s)a[l]=mo(l,s,e||Mr);else Ar(n.attrs)&&Oa(a,n.attrs),Ar(n.props)&&Oa(a,n.props);var u=new Ca(n,a,i,r,t),c=o.render.call(null,u._c,u);if(c instanceof Hi)return Aa(c,n,u.parent,o,u);if(Array.isArray(c)){for(var d=ra(c)||[],f=new Array(d.length),h=0;h<d.length;h++)f[h]=Aa(d[h],n,u.parent,o,u);return f}}(t,s,e,n,r);var l=e.on;if(e.on=e.nativeOn,Or(t.options.abstract)){var u=e.slot;e={},u&&(e.slot=u)}!function(t){for(var e=t.hook||(t.hook={}),n=0;n<Ta.length;n++){var r=Ta[n],i=e[r],o=Da[r];i===o||i&&i._merged||(e[r]=i?Ra(o,i):o)}}(e);var c=t.options.name||i;return new Hi("vue-component-"+t.cid+(c?"-"+c:""),e,void 0,void 0,void 0,n,{Ctor:t,propsData:s,listeners:l,tag:i,children:r},a)}Li("Invalid Component definition: "+String(t),n)}}function Ra(t,e){var n=function(n,r){t(n,r),e(n,r)};return n._merged=!0,n}var Ia=1,La=2;function Ea(t,e,n,r,i,o){return(Array.isArray(n)||Dr(n))&&(i=r,r=n,n=void 0),Or(o)&&(i=La),function(t,e,n,r,i){if(Ar(n)&&Ar(n.__ob__))return Li("Avoid using observed data object as vnode data: "+JSON.stringify(n)+"\nAlways create fresh vnode data objects in each render!",t),qi();Ar(n)&&Ar(n.is)&&(e=n.is);if(!e)return qi();Ar(n)&&Ar(n.key)&&!Dr(n.key)&&Li("Avoid using non-primitive value as key, use string/number value instead.",t);Array.isArray(r)&&"function"==typeof r[0]&&((n=n||{}).scopedSlots={default:r[0]},r.length=0);i===La?r=ra(r):i===Ia&&(r=function(t){for(var e=0;e<t.length;e++)if(Array.isArray(t[e]))return Array.prototype.concat.apply([],t);return t}(r));var o,a;if("string"==typeof e){var s;a=t.$vnode&&t.$vnode.ns||ci.getTagNamespace(e),o=ci.isReservedTag(e)?new Hi(ci.parsePlatformTagName(e),n,r,void 0,void 0,t):n&&n.pre||!Ar(s=go(t.$options,"components",e))?new Hi(e,n,r,void 0,void 0,t):Pa(s,n,t,r,e)}else o=Pa(e,n,t,r);return Array.isArray(o)?o:Ar(o)?(Ar(a)&&function t(e,n,r){e.ns=n;"foreignObject"===e.tag&&(n=void 0,r=!0);if(Ar(e.children))for(var i=0,o=e.children.length;i<o;i++){var a=e.children[i];Ar(a.tag)&&(Cr(a.ns)||Or(r)&&"svg"!==a.tag)&&t(a,n,r)}}(o,a),Ar(n)&&function(t){Tr(t.style)&&Ko(t.style);Tr(t.class)&&Ko(t.class)}(n),o):qi()}(t,e,n,r,i)}var Fa,ja=null;function Na(t,e){return(t.__esModule||Ii&&"Module"===t[Symbol.toStringTag])&&(t=t.default),Tr(t)?e.extend(t):t}function $a(t){return t.isComment&&t.asyncFactory}function za(t){if(Array.isArray(t))for(var e=0;e<t.length;e++){var n=t[e];if(Ar(n)&&(Ar(n.componentOptions)||$a(n)))return n}}function Ba(t,e){Fa.$on(t,e)}function Ya(t,e){Fa.$off(t,e)}function Wa(t,e){var n=Fa;return function r(){null!==e.apply(null,arguments)&&n.$off(t,r)}}function Ua(t,e,n){Fa=t,ta(e,n||{},Ba,Ya,Wa,t),Fa=void 0}var Ha=null,Va=!1;function qa(t){var e=Ha;return Ha=t,function(){Ha=e}}function Ga(t){for(;t&&(t=t.$parent);)if(t._inactive)return!0;return!1}function Ja(t,e){if(e){if(t._directInactive=!1,Ga(t))return}else if(t._directInactive)return;if(t._inactive||null===t._inactive){t._inactive=!1;for(var n=0;n<t.$children.length;n++)Ja(t.$children[n]);Za(t,"activated")}}function Za(t,e){Wi();var n=t.$options[e],r=e+" hook";if(n)for(var i=0,o=n.length;i<o;i++)Co(n[i],t,null,t,r);t._hasHookEvent&&t.$emit("hook:"+e),Ui()}var Ka=100,Xa=[],Qa=[],ts={},es={},ns=!1,rs=!1,is=0;var os=0,as=Date.now;function ss(){var t,e;for(os=as(),rs=!0,Xa.sort(function(t,e){return t.id-e.id}),is=0;is<Xa.length;is++)if((t=Xa[is]).before&&t.before(),e=t.id,ts[e]=null,t.run(),null!=ts[e]&&(es[e]=(es[e]||0)+1,es[e]>Ka)){Li("You may have an infinite update loop "+(t.user?'in watcher with expression "'+t.expression+'"':"in a component render function."),t.vm);break}var n=Qa.slice(),r=Xa.slice();is=Xa.length=Qa.length=0,ts={},es={},ns=rs=!1,function(t){for(var e=0;e<t.length;e++)t[e]._inactive=!0,Ja(t[e],!0)}(n),function(t){var e=t.length;for(;e--;){var n=t[e],r=n.vm;r._watcher===n&&r._isMounted&&!r._isDestroyed&&Za(r,"updated")}}(r),Ti&&ci.devtools&&Ti.emit("flush")}mi&&as()>document.createEvent("Event").timeStamp&&(as=function(){return performance.now()});var ls=0,us=function(t,e,n,r,i){this.vm=t,i&&(t._watcher=this),t._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++ls,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new Ri,this.newDepIds=new Ri,this.expression=e.toString(),"function"==typeof e?this.getter=e:(this.getter=function(t){if(!pi.test(t)){var e=t.split(".");return function(t){for(var n=0;n<e.length;n++){if(!t)return;t=t[e[n]]}return t}}}(e),this.getter||(this.getter=ei,Li('Failed watching path: "'+e+'" Watcher only accepts simple dot-delimited paths. For full control, use a function instead.',t))),this.value=this.lazy?void 0:this.get()};us.prototype.get=function(){var t;Wi(this);var e=this.vm;try{t=this.getter.call(e,e)}catch(t){if(!this.user)throw t;Mo(t,e,'getter for watcher "'+this.expression+'"')}finally{this.deep&&Ko(t),Ui(),this.cleanupDeps()}return t},us.prototype.addDep=function(t){var e=t.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(t),this.depIds.has(e)||t.addSub(this))},us.prototype.cleanupDeps=function(){for(var t=this.deps.length;t--;){var e=this.deps[t];this.newDepIds.has(e.id)||e.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},us.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(t){var e=t.id;if(null==ts[e]){if(ts[e]=!0,rs){for(var n=Xa.length-1;n>is&&Xa[n].id>t.id;)n--;Xa.splice(n+1,0,t)}else Xa.push(t);if(!ns){if(ns=!0,!ci.async)return void ss();zo(ss)}}}(this)},us.prototype.run=function(){if(this.active){var t=this.get();if(t!==this.value||Tr(t)||this.deep){var e=this.value;if(this.value=t,this.user)try{this.cb.call(this.vm,t,e)}catch(t){Mo(t,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,t,e)}}},us.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},us.prototype.depend=function(){for(var t=this.deps.length;t--;)this.deps[t].depend()},us.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||Yr(this.vm._watchers,this);for(var t=this.deps.length;t--;)this.deps[t].removeSub(this);this.active=!1}};var cs={enumerable:!0,configurable:!0,get:ei,set:ei};function ds(t,e,n){cs.get=function(){return this[e][n]},cs.set=function(t){this[e][n]=t},Object.defineProperty(t,n,cs)}function fs(t){t._watchers=[];var e=t.$options;e.props&&function(t,e){var n=t.$options.propsData||{},r=t._props={},i=t.$options._propKeys=[],o=!t.$parent;o||to(!1);var a=function(a){i.push(a);var s=mo(a,e,n,t),l=Zr(a);(Br(l)||ci.isReservedAttr(l))&&Li('"'+l+'" is a reserved attribute and cannot be used as component prop.',t),ro(r,a,s,function(){o||Va||Li("Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value. Prop being mutated: \""+a+'"',t)}),a in t||ds(t,"_props",a)};for(var s in e)a(s);to(!0)}(t,e.props),e.methods&&function(t,e){var n=t.$options.props;for(var r in e)"function"!=typeof e[r]&&Li('Method "'+r+'" has type "'+i(e[r])+'" in the component definition. Did you reference the function correctly?',t),n&&Ur(n,r)&&Li('Method "'+r+'" has already been defined as a prop.',t),r in t&&fi(r)&&Li('Method "'+r+'" conflicts with an existing Vue instance method. Avoid defining component methods that start with _ or $.'),t[r]="function"!=typeof e[r]?ei:Kr(e[r],t)}(t,e.methods),e.data?function(t){var e=t.$options.data;Ir(e=t._data="function"==typeof e?function(t,e){Wi();try{return t.call(e,e)}catch(t){return Mo(t,e,"data()"),{}}finally{Ui()}}(e,t):e||{})||(e={},Li("data functions should return an object:\nhttps://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function",t));var n=Object.keys(e),r=t.$options.props,i=t.$options.methods,o=n.length;for(;o--;){var a=n[o];i&&Ur(i,a)&&Li('Method "'+a+'" has already been defined as a data property.',t),r&&Ur(r,a)?Li('The data property "'+a+'" is already declared as a prop. Use prop default value instead.',t):fi(a)||ds(t,"_data",a)}no(e,!0)}(t):no(t._data={},!0),e.computed&&function(t,e){var n=t._computedWatchers=Object.create(null),r=Di();for(var i in e){var o=e[i],a="function"==typeof o?o:o.get;null==a&&Li('Getter is missing for computed property "'+i+'".',t),r||(n[i]=new us(t,a||ei,ei,hs)),i in t?i in t.$data?Li('The computed property "'+i+'" is already defined in data.',t):t.$options.props&&i in t.$options.props&&Li('The computed property "'+i+'" is already defined as a prop.',t):ps(t,i,o)}}(t,e.computed),e.watch&&e.watch!==Ci&&function(t,e){for(var n in e){var r=e[n];if(Array.isArray(r))for(var i=0;i<r.length;i++)ms(t,n,r[i]);else ms(t,n,r)}}(t,e.watch)}var hs={lazy:!0};function ps(t,e,n){var r=!Di();"function"==typeof n?(cs.get=r?vs(e):gs(n),cs.set=ei):(cs.get=n.get?r&&!1!==n.cache?vs(e):gs(n.get):ei,cs.set=n.set||ei),cs.set===ei&&(cs.set=function(){Li('Computed property "'+e+'" was assigned to but it has no setter.',this)}),Object.defineProperty(t,e,cs)}function vs(t){return function(){var e=this._computedWatchers&&this._computedWatchers[t];if(e)return e.dirty&&e.evaluate(),Bi.target&&e.depend(),e.value}}function gs(t){return function(){return t.call(this,this)}}function ms(t,e,n,r){return Ir(n)&&(r=n,n=n.handler),"string"==typeof n&&(n=t[n]),t.$watch(e,n,r)}var ys=0;function bs(t){var e=t.options;if(t.super){var n=bs(t.super);if(n!==t.superOptions){t.superOptions=n;var r=function(t){var e,n=t.options,r=t.sealedOptions;for(var i in n)n[i]!==r[i]&&(e||(e={}),e[i]=n[i]);return e}(t);r&&Qr(t.extendOptions,r),(e=t.options=vo(n,t.extendOptions)).name&&(e.components[e.name]=t)}}return e}function _s(t){this instanceof _s||Li("Vue is a constructor and should be called with the `new` keyword"),this._init(t)}function ws(t){t.cid=0;var e=1;t.extend=function(t){t=t||{};var n=this,r=n.cid,i=t._Ctor||(t._Ctor={});if(i[r])return i[r];var o=t.name||n.options.name;o&&ho(o);var a=function(t){this._init(t)};return(a.prototype=Object.create(n.prototype)).constructor=a,a.cid=e++,a.options=vo(n.options,t),a.super=n,a.options.props&&function(t){var e=t.options.props;for(var n in e)ds(t.prototype,"_props",n)}(a),a.options.computed&&function(t){var e=t.options.computed;for(var n in e)ps(t.prototype,n,e[n])}(a),a.extend=n.extend,a.mixin=n.mixin,a.use=n.use,li.forEach(function(t){a[t]=n[t]}),o&&(a.options.components[o]=a),a.superOptions=n.options,a.extendOptions=t,a.sealedOptions=Qr({},a.options),i[r]=a,a}}function xs(t){return t&&(t.Ctor.options.name||t.tag)}function ks(t,e){return Array.isArray(t)?t.indexOf(e)>-1:"string"==typeof t?t.split(",").indexOf(e)>-1:!!Lr(t)&&t.test(e)}function Ss(t,e){var n=t.cache,r=t.keys,i=t._vnode;for(var o in n){var a=n[o];if(a){var s=xs(a.componentOptions);s&&!e(s)&&Ms(n,o,r,i)}}}function Ms(t,e,n,r){var i=t[e];!i||r&&i.tag===r.tag||i.componentInstance.$destroy(),t[e]=null,Yr(n,e)}!function(t){t.prototype._init=function(t){var e,n,r=this;r._uid=ys++,ci.performance&&To&&(e="vue-perf-start:"+r._uid,n="vue-perf-end:"+r._uid,To(e)),r._isVue=!0,t&&t._isComponent?function(t,e){var n=t.$options=Object.create(t.constructor.options),r=e._parentVnode;n.parent=e.parent,n._parentVnode=r;var i=r.componentOptions;n.propsData=i.propsData,n._parentListeners=i.listeners,n._renderChildren=i.children,n._componentTag=i.tag,e.render&&(n.render=e.render,n.staticRenderFns=e.staticRenderFns)}(r,t):r.$options=vo(bs(r.constructor),t||{},r),Bo(r),r._self=r,function(t){var e=t.$options,n=e.parent;if(n&&!e.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(t)}t.$parent=n,t.$root=n?n.$root:t,t.$children=[],t.$refs={},t._watcher=null,t._inactive=null,t._directInactive=!1,t._isMounted=!1,t._isDestroyed=!1,t._isBeingDestroyed=!1}(r),function(t){t._events=Object.create(null),t._hasHookEvent=!1;var e=t.$options._parentListeners;e&&Ua(t,e)}(r),function(t){t._vnode=null,t._staticTrees=null;var e=t.$options,n=t.$vnode=e._parentVnode,r=n&&n.context;t.$slots=aa(e._renderChildren,r),t.$scopedSlots=Mr,t._c=function(e,n,r,i){return Ea(t,e,n,r,i,!1)},t.$createElement=function(e,n,r,i){return Ea(t,e,n,r,i,!0)};var i=n&&n.data;ro(t,"$attrs",i&&i.attrs||Mr,function(){!Va&&Li("$attrs is readonly.",t)},!0),ro(t,"$listeners",e._parentListeners||Mr,function(){!Va&&Li("$listeners is readonly.",t)},!0)}(r),Za(r,"beforeCreate"),function(t){var e=oa(t.$options.inject,t);e&&(to(!1),Object.keys(e).forEach(function(n){ro(t,n,e[n],function(){Li('Avoid mutating an injected value directly since the changes will be overwritten whenever the provided component re-renders. injection being mutated: "'+n+'"',t)})}),to(!0))}(r),fs(r),function(t){var e=t.$options.provide;e&&(t._provided="function"==typeof e?e.call(t):e)}(r),Za(r,"created"),ci.performance&&To&&(r._name=ji(r,!1),To(n),Po("vue "+r._name+" init",e,n)),r.$options.el&&r.$mount(r.$options.el)}}(_s),function(t){var e={get:function(){return this._data}},n={get:function(){return this._props}};e.set=function(){Li("Avoid replacing instance root $data. Use nested data properties instead.",this)},n.set=function(){Li("$props is readonly.",this)},Object.defineProperty(t.prototype,"$data",e),Object.defineProperty(t.prototype,"$props",n),t.prototype.$set=io,t.prototype.$delete=oo,t.prototype.$watch=function(t,e,n){if(Ir(e))return ms(this,t,e,n);(n=n||{}).user=!0;var r=new us(this,t,e,n);if(n.immediate)try{e.call(this,r.value)}catch(t){Mo(t,this,'callback for immediate watcher "'+r.expression+'"')}return function(){r.teardown()}}}(_s),function(t){var e=/^hook:/;t.prototype.$on=function(t,n){var r=this;if(Array.isArray(t))for(var i=0,o=t.length;i<o;i++)r.$on(t[i],n);else(r._events[t]||(r._events[t]=[])).push(n),e.test(t)&&(r._hasHookEvent=!0);return r},t.prototype.$once=function(t,e){var n=this;function r(){n.$off(t,r),e.apply(n,arguments)}return r.fn=e,n.$on(t,r),n},t.prototype.$off=function(t,e){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(t)){for(var r=0,i=t.length;r<i;r++)n.$off(t[r],e);return n}var o,a=n._events[t];if(!a)return n;if(!e)return n._events[t]=null,n;for(var s=a.length;s--;)if((o=a[s])===e||o.fn===e){a.splice(s,1);break}return n},t.prototype.$emit=function(t){var e=this,n=t.toLowerCase();n!==t&&e._events[n]&&Ei('Event "'+n+'" is emitted in component '+ji(e)+' but the handler is registered for "'+t+'". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "'+Zr(t)+'" instead of "'+t+'".');var r=e._events[t];if(r){r=r.length>1?Xr(r):r;for(var i=Xr(arguments,1),o='event handler for "'+t+'"',a=0,s=r.length;a<s;a++)Co(r[a],e,i,e,o)}return e}}(_s),function(t){t.prototype._update=function(t,e){var n=this,r=n.$el,i=n._vnode,o=qa(n);n._vnode=t,n.$el=i?n.__patch__(i,t):n.__patch__(n.$el,t,e,!1),o(),r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},t.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},t.prototype.$destroy=function(){var t=this;if(!t._isBeingDestroyed){Za(t,"beforeDestroy"),t._isBeingDestroyed=!0;var e=t.$parent;!e||e._isBeingDestroyed||t.$options.abstract||Yr(e.$children,t),t._watcher&&t._watcher.teardown();for(var n=t._watchers.length;n--;)t._watchers[n].teardown();t._data.__ob__&&t._data.__ob__.vmCount--,t._isDestroyed=!0,t.__patch__(t._vnode,null),Za(t,"destroyed"),t.$off(),t.$el&&(t.$el.__vue__=null),t.$vnode&&(t.$vnode.parent=null)}}}(_s),function(t){Ma(t.prototype),t.prototype.$nextTick=function(t){return zo(t,this)},t.prototype._render=function(){var t,e=this,n=e.$options,r=n.render,i=n._parentVnode;i&&(e.$scopedSlots=la(i.data.scopedSlots,e.$slots,e.$scopedSlots)),e.$vnode=i;try{ja=e,t=r.call(e._renderProxy,e.$createElement)}catch(n){if(Mo(n,e,"render"),e.$options.renderError)try{t=e.$options.renderError.call(e._renderProxy,e.$createElement,n)}catch(n){Mo(n,e,"renderError"),t=e._vnode}else t=e._vnode}finally{ja=null}return Array.isArray(t)&&1===t.length&&(t=t[0]),t instanceof Hi||(Array.isArray(t)&&Li("Multiple root nodes returned from render function. Render function should return a single root node.",e),t=qi()),t.parent=i,t}}(_s);var Cs=[String,RegExp,Array],As={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Cs,exclude:Cs,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var t in this.cache)Ms(this.cache,t,this.keys)},mounted:function(){var t=this;this.$watch("include",function(e){Ss(t,function(t){return ks(e,t)})}),this.$watch("exclude",function(e){Ss(t,function(t){return!ks(e,t)})})},render:function(){var t=this.$slots.default,e=za(t),n=e&&e.componentOptions;if(n){var r=xs(n),i=this.include,o=this.exclude;if(i&&(!r||!ks(i,r))||o&&r&&ks(o,r))return e;var a=this.cache,s=this.keys,l=null==e.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):e.key;a[l]?(e.componentInstance=a[l].componentInstance,Yr(s,l),s.push(l)):(a[l]=e,s.push(l),this.max&&s.length>parseInt(this.max)&&Ms(a,s[0],s,this._vnode)),e.data.keepAlive=!0}return e||t&&t[0]}}};!function(t){var e={get:function(){return ci},set:function(){Li("Do not replace the Vue.config object, set individual fields instead.")}};Object.defineProperty(t,"config",e),t.util={warn:Li,extend:Qr,mergeOptions:vo,defineReactive:ro},t.set=io,t.delete=oo,t.nextTick=zo,t.observable=function(t){return no(t),t},t.options=Object.create(null),li.forEach(function(e){t.options[e+"s"]=Object.create(null)}),t.options._base=t,Qr(t.options.components,As),function(t){t.use=function(t){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(t)>-1)return this;var n=Xr(arguments,1);return n.unshift(this),"function"==typeof t.install?t.install.apply(t,n):"function"==typeof t&&t.apply(null,n),e.push(t),this}}(t),function(t){t.mixin=function(t){return this.options=vo(this.options,t),this}}(t),ws(t),function(t){li.forEach(function(e){t[e]=function(t,n){return n?("component"===e&&ho(t),"component"===e&&Ir(n)&&(n.name=n.name||t,n=this.options._base.extend(n)),"directive"===e&&"function"==typeof n&&(n={bind:n,update:n}),this.options[e+"s"][t]=n,n):this.options[e+"s"][t]}})}(t)}(_s),Object.defineProperty(_s.prototype,"$isServer",{get:Di}),Object.defineProperty(_s.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(_s,"FunctionalRenderContext",{value:Ca}),_s.version="2.6.6";var Os=$r("style,class"),Ds=$r("input,textarea,option,select,progress"),Ts=function(t,e,n){return"value"===n&&Ds(t)&&"button"!==e||"selected"===n&&"option"===t||"checked"===n&&"input"===t||"muted"===n&&"video"===t},Ps=$r("contenteditable,draggable,spellcheck"),Rs=$r("events,caret,typing,plaintext-only"),Is=function(t,e){return Ns(e)||"false"===e?"false":"contenteditable"===t&&Rs(e)?e:"true"},Ls=$r("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),Es="http://www.w3.org/1999/xlink",Fs=function(t){return":"===t.charAt(5)&&"xlink"===t.slice(0,5)},js=function(t){return Fs(t)?t.slice(6,t.length):""},Ns=function(t){return null==t||!1===t};function $s(t){for(var e=t.data,n=t,r=t;Ar(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(e=zs(r.data,e));for(;Ar(n=n.parent);)n&&n.data&&(e=zs(e,n.data));return function(t,e){if(Ar(t)||Ar(e))return Bs(t,Ys(e));return""}(e.staticClass,e.class)}function zs(t,e){return{staticClass:Bs(t.staticClass,e.staticClass),class:Ar(t.class)?[t.class,e.class]:e.class}}function Bs(t,e){return t?e?t+" "+e:t:e||""}function Ys(t){return Array.isArray(t)?function(t){for(var e,n="",r=0,i=t.length;r<i;r++)Ar(e=Ys(t[r]))&&""!==e&&(n&&(n+=" "),n+=e);return n}(t):Tr(t)?function(t){var e="";for(var n in t)t[n]&&(e&&(e+=" "),e+=n);return e}(t):"string"==typeof t?t:""}var Ws={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Us=$r("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Hs=$r("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Vs=function(t){return Us(t)||Hs(t)};function qs(t){return Hs(t)?"svg":"math"===t?"math":void 0}var Gs=Object.create(null);var Js=$r("text,number,password,search,email,tel,url");function Zs(t){if("string"==typeof t){var e=document.querySelector(t);return e||(Li("Cannot find element: "+t),document.createElement("div"))}return t}var Ks=Object.freeze({createElement:function(t,e){var n=document.createElement(t);return"select"!==t?n:(e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n)},createElementNS:function(t,e){return document.createElementNS(Ws[t],e)},createTextNode:function(t){return document.createTextNode(t)},createComment:function(t){return document.createComment(t)},insertBefore:function(t,e,n){t.insertBefore(e,n)},removeChild:function(t,e){t.removeChild(e)},appendChild:function(t,e){t.appendChild(e)},parentNode:function(t){return t.parentNode},nextSibling:function(t){return t.nextSibling},tagName:function(t){return t.tagName},setTextContent:function(t,e){t.textContent=e},setStyleScope:function(t,e){t.setAttribute(e,"")}}),Xs={create:function(t,e){Qs(e)},update:function(t,e){t.data.ref!==e.data.ref&&(Qs(t,!0),Qs(e))},destroy:function(t){Qs(t,!0)}};function Qs(t,e){var n=t.data.ref;if(Ar(n)){var r=t.context,i=t.componentInstance||t.elm,o=r.$refs;e?Array.isArray(o[n])?Yr(o[n],i):o[n]===i&&(o[n]=void 0):t.data.refInFor?Array.isArray(o[n])?o[n].indexOf(i)<0&&o[n].push(i):o[n]=[i]:o[n]=i}}var tl=new Hi("",{},[]),el=["create","activate","update","remove","destroy"];function nl(t,e){return t.key===e.key&&(t.tag===e.tag&&t.isComment===e.isComment&&Ar(t.data)===Ar(e.data)&&function(t,e){if("input"!==t.tag)return!0;var n,r=Ar(n=t.data)&&Ar(n=n.attrs)&&n.type,i=Ar(n=e.data)&&Ar(n=n.attrs)&&n.type;return r===i||Js(r)&&Js(i)}(t,e)||Or(t.isAsyncPlaceholder)&&t.asyncFactory===e.asyncFactory&&Cr(e.asyncFactory.error))}function rl(t,e,n){var r,i,o={};for(r=e;r<=n;++r)Ar(i=t[r].key)&&(o[i]=r);return o}var il={create:ol,update:ol,destroy:function(t){ol(t,tl)}};function ol(t,e){(t.data.directives||e.data.directives)&&function(t,e){var n,r,i,o=t===tl,a=e===tl,s=sl(t.data.directives,t.context),l=sl(e.data.directives,e.context),u=[],c=[];for(n in l)r=s[n],i=l[n],r?(i.oldValue=r.value,i.oldArg=r.arg,ul(i,"update",e,t),i.def&&i.def.componentUpdated&&c.push(i)):(ul(i,"bind",e,t),i.def&&i.def.inserted&&u.push(i));if(u.length){var d=function(){for(var n=0;n<u.length;n++)ul(u[n],"inserted",e,t)};o?ea(e,"insert",d):d()}c.length&&ea(e,"postpatch",function(){for(var n=0;n<c.length;n++)ul(c[n],"componentUpdated",e,t)});if(!o)for(n in s)l[n]||ul(s[n],"unbind",t,t,a)}(t,e)}var al=Object.create(null);function sl(t,e){var n,r,i=Object.create(null);if(!t)return i;for(n=0;n<t.length;n++)(r=t[n]).modifiers||(r.modifiers=al),i[ll(r)]=r,r.def=go(e.$options,"directives",r.name,!0);return i}function ll(t){return t.rawName||t.name+"."+Object.keys(t.modifiers||{}).join(".")}function ul(t,e,n,r,i){var o=t.def&&t.def[e];if(o)try{o(n.elm,t,n,r,i)}catch(r){Mo(r,n.context,"directive "+t.name+" "+e+" hook")}}var cl=[Xs,il];function dl(t,e){var n=e.componentOptions;if(!(Ar(n)&&!1===n.Ctor.options.inheritAttrs||Cr(t.data.attrs)&&Cr(e.data.attrs))){var r,i,o=e.elm,a=t.data.attrs||{},s=e.data.attrs||{};for(r in Ar(s.__ob__)&&(s=e.data.attrs=Qr({},s)),s)i=s[r],a[r]!==i&&fl(o,r,i);for(r in(wi||ki)&&s.value!==a.value&&fl(o,"value",s.value),a)Cr(s[r])&&(Fs(r)?o.removeAttributeNS(Es,js(r)):Ps(r)||o.removeAttribute(r))}}function fl(t,e,n){t.tagName.indexOf("-")>-1?hl(t,e,n):Ls(e)?Ns(n)?t.removeAttribute(e):(n="allowfullscreen"===e&&"EMBED"===t.tagName?"true":e,t.setAttribute(e,n)):Ps(e)?t.setAttribute(e,Is(e,n)):Fs(e)?Ns(n)?t.removeAttributeNS(Es,js(e)):t.setAttributeNS(Es,e,n):hl(t,e,n)}function hl(t,e,n){if(Ns(n))t.removeAttribute(e);else{if(wi&&!xi&&"TEXTAREA"===t.tagName&&"placeholder"===e&&""!==n&&!t.__ieph){t.addEventListener("input",function e(n){n.stopImmediatePropagation(),t.removeEventListener("input",e)}),t.__ieph=!0}t.setAttribute(e,n)}}var pl={create:dl,update:dl};function vl(t,e){var n=e.elm,r=e.data,i=t.data;if(!(Cr(r.staticClass)&&Cr(r.class)&&(Cr(i)||Cr(i.staticClass)&&Cr(i.class)))){var o=$s(e),a=n._transitionClasses;Ar(a)&&(o=Bs(o,Ys(a))),o!==n._prevClass&&(n.setAttribute("class",o),n._prevClass=o)}}var gl,ml,yl,bl,_l,wl,xl,kl={create:vl,update:vl},Sl=/[\w).+\-_$\]]/;function Ml(t){var e,n,r,i,o,a=!1,s=!1,l=!1,u=!1,c=0,d=0,f=0,h=0;for(r=0;r<t.length;r++)if(n=e,e=t.charCodeAt(r),a)39===e&&92!==n&&(a=!1);else if(s)34===e&&92!==n&&(s=!1);else if(l)96===e&&92!==n&&(l=!1);else if(u)47===e&&92!==n&&(u=!1);else if(124!==e||124===t.charCodeAt(r+1)||124===t.charCodeAt(r-1)||c||d||f){switch(e){case 34:s=!0;break;case 39:a=!0;break;case 96:l=!0;break;case 40:f++;break;case 41:f--;break;case 91:d++;break;case 93:d--;break;case 123:c++;break;case 125:c--}if(47===e){for(var p=r-1,v=void 0;p>=0&&" "===(v=t.charAt(p));p--);v&&Sl.test(v)||(u=!0)}}else void 0===i?(h=r+1,i=t.slice(0,r).trim()):g();function g(){(o||(o=[])).push(t.slice(h,r).trim()),h=r+1}if(void 0===i?i=t.slice(0,r).trim():0!==h&&g(),o)for(r=0;r<o.length;r++)i=Cl(i,o[r]);return i}function Cl(t,e){var n=e.indexOf("(");if(n<0)return'_f("'+e+'")('+t+")";var r=e.slice(0,n),i=e.slice(n+1);return'_f("'+r+'")('+t+(")"!==i?","+i:i)}function Al(t,e){console.error("[Vue compiler]: "+t)}function Ol(t,e){return t?t.map(function(t){return t[e]}).filter(function(t){return t}):[]}function Dl(t,e,n,r,i){(t.props||(t.props=[])).push($l({name:e,value:n,dynamic:i},r)),t.plain=!1}function Tl(t,e,n,r,i){(i?t.dynamicAttrs||(t.dynamicAttrs=[]):t.attrs||(t.attrs=[])).push($l({name:e,value:n,dynamic:i},r)),t.plain=!1}function Pl(t,e,n,r){t.attrsMap[e]=n,t.attrsList.push($l({name:e,value:n},r))}function Rl(t,e,n,r,i,o,a,s){(t.directives||(t.directives=[])).push($l({name:e,rawName:n,value:r,arg:i,isDynamicArg:o,modifiers:a},s)),t.plain=!1}function Il(t,e,n){return n?"_p("+e+',"'+t+'")':t+e}function Ll(t,e,n,r,i,o,a,s){var l;r=r||Mr,o&&r.prevent&&r.passive&&o("passive and prevent can't be used together. Passive handler can't prevent default event.",a),r.right?s?e="("+e+")==='click'?'contextmenu':("+e+")":"click"===e&&(e="contextmenu",delete r.right):r.middle&&(s?e="("+e+")==='click'?'mouseup':("+e+")":"click"===e&&(e="mouseup")),r.capture&&(delete r.capture,e=Il("!",e,s)),r.once&&(delete r.once,e=Il("~",e,s)),r.passive&&(delete r.passive,e=Il("&",e,s)),r.native?(delete r.native,l=t.nativeEvents||(t.nativeEvents={})):l=t.events||(t.events={});var u=$l({value:n.trim(),dynamic:s},a);r!==Mr&&(u.modifiers=r);var c=l[e];Array.isArray(c)?i?c.unshift(u):c.push(u):l[e]=c?i?[u,c]:[c,u]:u,t.plain=!1}function El(t,e){return t.rawAttrsMap[":"+e]||t.rawAttrsMap["v-bind:"+e]||t.rawAttrsMap[e]}function Fl(t,e,n){var r=jl(t,":"+e)||jl(t,"v-bind:"+e);if(null!=r)return Ml(r);if(!1!==n){var i=jl(t,e);if(null!=i)return JSON.stringify(i)}}function jl(t,e,n){var r;if(null!=(r=t.attrsMap[e]))for(var i=t.attrsList,o=0,a=i.length;o<a;o++)if(i[o].name===e){i.splice(o,1);break}return n&&delete t.attrsMap[e],r}function Nl(t,e){for(var n=t.attrsList,r=0,i=n.length;r<i;r++){var o=n[r];if(e.test(o.name))return n.splice(r,1),o}}function $l(t,e){return e&&(null!=e.start&&(t.start=e.start),null!=e.end&&(t.end=e.end)),t}function zl(t,e,n){var r=n||{},i=r.number,o="$$v";r.trim&&(o="(typeof $$v === 'string'? $$v.trim(): $$v)"),i&&(o="_n("+o+")");var a=Bl(e,o);t.model={value:"("+e+")",expression:JSON.stringify(e),callback:"function ($$v) {"+a+"}"}}function Bl(t,e){var n=function(t){if(t=t.trim(),gl=t.length,t.indexOf("[")<0||t.lastIndexOf("]")<gl-1)return(bl=t.lastIndexOf("."))>-1?{exp:t.slice(0,bl),key:'"'+t.slice(bl+1)+'"'}:{exp:t,key:null};ml=t,bl=_l=wl=0;for(;!Wl();)Ul(yl=Yl())?Vl(yl):91===yl&&Hl(yl);return{exp:t.slice(0,_l),key:t.slice(_l+1,wl)}}(t);return null===n.key?t+"="+e:"$set("+n.exp+", "+n.key+", "+e+")"}function Yl(){return ml.charCodeAt(++bl)}function Wl(){return bl>=gl}function Ul(t){return 34===t||39===t}function Hl(t){var e=1;for(_l=bl;!Wl();)if(Ul(t=Yl()))Vl(t);else if(91===t&&e++,93===t&&e--,0===e){wl=bl;break}}function Vl(t){for(var e=t;!Wl()&&(t=Yl())!==e;);}var ql,Gl="__r",Jl="__c";function Zl(t,e,n){var r=ql;return function i(){null!==e.apply(null,arguments)&&Ql(t,i,n,r)}}var Kl=Ro&&!(Mi&&Number(Mi[1])<=53);function Xl(t,e,n,r){if(Kl){var i=os,o=e;e=o._wrapper=function(t){if(t.target===t.currentTarget||t.timeStamp>=i||0===t.timeStamp||t.target.ownerDocument!==document)return o.apply(this,arguments)}}ql.addEventListener(t,e,Ai?{capture:n,passive:r}:n)}function Ql(t,e,n,r){(r||ql).removeEventListener(t,e._wrapper||e,n)}function tu(t,e){if(!Cr(t.data.on)||!Cr(e.data.on)){var n=e.data.on||{},r=t.data.on||{};ql=e.elm,function(t){if(Ar(t[Gl])){var e=wi?"change":"input";t[e]=[].concat(t[Gl],t[e]||[]),delete t[Gl]}Ar(t[Jl])&&(t.change=[].concat(t[Jl],t.change||[]),delete t[Jl])}(n),ta(n,r,Xl,Ql,Zl,e.context),ql=void 0}}var eu,nu={create:tu,update:tu};function ru(t,e){if(!Cr(t.data.domProps)||!Cr(e.data.domProps)){var n,r,i=e.elm,o=t.data.domProps||{},a=e.data.domProps||{};for(n in Ar(a.__ob__)&&(a=e.data.domProps=Qr({},a)),o)Cr(a[n])&&(i[n]="");for(n in a){if(r=a[n],"textContent"===n||"innerHTML"===n){if(e.children&&(e.children.length=0),r===o[n])continue;1===i.childNodes.length&&i.removeChild(i.childNodes[0])}if("value"===n||r!==o[n])if("value"===n){i._value=r;var s=Cr(r)?"":String(r);iu(i,s)&&(i.value=s)}else if("innerHTML"===n&&Hs(i.tagName)&&Cr(i.innerHTML)){(eu=eu||document.createElement("div")).innerHTML="<svg>"+r+"</svg>";for(var l=eu.firstChild;i.firstChild;)i.removeChild(i.firstChild);for(;l.firstChild;)i.appendChild(l.firstChild)}else i[n]=r}}}function iu(t,e){return!t.composing&&("OPTION"===t.tagName||function(t,e){var n=!0;try{n=document.activeElement!==t}catch(t){}return n&&t.value!==e}(t,e)||function(t,e){var n=t.value,r=t._vModifiers;if(Ar(r)){if(r.number)return Nr(n)!==Nr(e);if(r.trim)return n.trim()!==e.trim()}return n!==e}(t,e))}var ou={create:ru,update:ru},au=Hr(function(t){var e={},n=/:(.+)/;return t.split(/;(?![^(]*\))/g).forEach(function(t){if(t){var r=t.split(n);r.length>1&&(e[r[0].trim()]=r[1].trim())}}),e});function su(t){var e=lu(t.style);return t.staticStyle?Qr(t.staticStyle,e):e}function lu(t){return Array.isArray(t)?ti(t):"string"==typeof t?au(t):t}var uu,cu=/^--/,du=/\s*!important$/,fu=function(t,e,n){if(cu.test(e))t.style.setProperty(e,n);else if(du.test(n))t.style.setProperty(Zr(e),n.replace(du,""),"important");else{var r=pu(e);if(Array.isArray(n))for(var i=0,o=n.length;i<o;i++)t.style[r]=n[i];else t.style[r]=n}},hu=["Webkit","Moz","ms"],pu=Hr(function(t){if(uu=uu||document.createElement("div").style,"filter"!==(t=qr(t))&&t in uu)return t;for(var e=t.charAt(0).toUpperCase()+t.slice(1),n=0;n<hu.length;n++){var r=hu[n]+e;if(r in uu)return r}});function vu(t,e){var n=e.data,r=t.data;if(!(Cr(n.staticStyle)&&Cr(n.style)&&Cr(r.staticStyle)&&Cr(r.style))){var i,o,a=e.elm,s=r.staticStyle,l=r.normalizedStyle||r.style||{},u=s||l,c=lu(e.data.style)||{};e.data.normalizedStyle=Ar(c.__ob__)?Qr({},c):c;var d=function(t,e){var n,r={};if(e)for(var i=t;i.componentInstance;)(i=i.componentInstance._vnode)&&i.data&&(n=su(i.data))&&Qr(r,n);(n=su(t.data))&&Qr(r,n);for(var o=t;o=o.parent;)o.data&&(n=su(o.data))&&Qr(r,n);return r}(e,!0);for(o in u)Cr(d[o])&&fu(a,o,"");for(o in d)(i=d[o])!==u[o]&&fu(a,o,null==i?"":i)}}var gu={create:vu,update:vu},mu=/\s+/;function yu(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(mu).forEach(function(e){return t.classList.add(e)}):t.classList.add(e);else{var n=" "+(t.getAttribute("class")||"")+" ";n.indexOf(" "+e+" ")<0&&t.setAttribute("class",(n+e).trim())}}function bu(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(mu).forEach(function(e){return t.classList.remove(e)}):t.classList.remove(e),t.classList.length||t.removeAttribute("class");else{for(var n=" "+(t.getAttribute("class")||"")+" ",r=" "+e+" ";n.indexOf(r)>=0;)n=n.replace(r," ");(n=n.trim())?t.setAttribute("class",n):t.removeAttribute("class")}}function _u(t){if(t){if("object"===(void 0===t?"undefined":i(t))){var e={};return!1!==t.css&&Qr(e,wu(t.name||"v")),Qr(e,t),e}return"string"==typeof t?wu(t):void 0}}var wu=Hr(function(t){return{enterClass:t+"-enter",enterToClass:t+"-enter-to",enterActiveClass:t+"-enter-active",leaveClass:t+"-leave",leaveToClass:t+"-leave-to",leaveActiveClass:t+"-leave-active"}}),xu=mi&&!xi,ku="transition",Su="animation",Mu="transition",Cu="transitionend",Au="animation",Ou="animationend";xu&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Mu="WebkitTransition",Cu="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Au="WebkitAnimation",Ou="webkitAnimationEnd"));var Du=mi?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(t){return t()};function Tu(t){Du(function(){Du(t)})}function Pu(t,e){var n=t._transitionClasses||(t._transitionClasses=[]);n.indexOf(e)<0&&(n.push(e),yu(t,e))}function Ru(t,e){t._transitionClasses&&Yr(t._transitionClasses,e),bu(t,e)}function Iu(t,e,n){var r=Eu(t,e),i=r.type,o=r.timeout,a=r.propCount;if(!i)return n();var s=i===ku?Cu:Ou,l=0,u=function(){t.removeEventListener(s,c),n()},c=function(e){e.target===t&&++l>=a&&u()};setTimeout(function(){l<a&&u()},o+1),t.addEventListener(s,c)}var Lu=/\b(transform|all)(,|$)/;function Eu(t,e){var n,r=window.getComputedStyle(t),i=(r[Mu+"Delay"]||"").split(", "),o=(r[Mu+"Duration"]||"").split(", "),a=Fu(i,o),s=(r[Au+"Delay"]||"").split(", "),l=(r[Au+"Duration"]||"").split(", "),u=Fu(s,l),c=0,d=0;return e===ku?a>0&&(n=ku,c=a,d=o.length):e===Su?u>0&&(n=Su,c=u,d=l.length):d=(n=(c=Math.max(a,u))>0?a>u?ku:Su:null)?n===ku?o.length:l.length:0,{type:n,timeout:c,propCount:d,hasTransform:n===ku&&Lu.test(r[Mu+"Property"])}}function Fu(t,e){for(;t.length<e.length;)t=t.concat(t);return Math.max.apply(null,e.map(function(e,n){return ju(e)+ju(t[n])}))}function ju(t){return 1e3*Number(t.slice(0,-1).replace(",","."))}function Nu(t,e){var n=t.elm;Ar(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var r=_u(t.data.transition);if(!Cr(r)&&!Ar(n._enterCb)&&1===n.nodeType){for(var i=r.css,o=r.type,a=r.enterClass,s=r.enterToClass,l=r.enterActiveClass,u=r.appearClass,c=r.appearToClass,d=r.appearActiveClass,f=r.beforeEnter,h=r.enter,p=r.afterEnter,v=r.enterCancelled,g=r.beforeAppear,m=r.appear,y=r.afterAppear,b=r.appearCancelled,_=r.duration,w=Ha,x=Ha.$vnode;x&&x.parent;)w=(x=x.parent).context;var k=!w._isMounted||!t.isRootInsert;if(!k||m||""===m){var S=k&&u?u:a,M=k&&d?d:l,C=k&&c?c:s,A=k&&g||f,O=k&&"function"==typeof m?m:h,D=k&&y||p,T=k&&b||v,P=Nr(Tr(_)?_.enter:_);null!=P&&zu(P,"enter",t);var R=!1!==i&&!xi,I=Yu(O),L=n._enterCb=ai(function(){R&&(Ru(n,C),Ru(n,M)),L.cancelled?(R&&Ru(n,S),T&&T(n)):D&&D(n),n._enterCb=null});t.data.show||ea(t,"insert",function(){var e=n.parentNode,r=e&&e._pending&&e._pending[t.key];r&&r.tag===t.tag&&r.elm._leaveCb&&r.elm._leaveCb(),O&&O(n,L)}),A&&A(n),R&&(Pu(n,S),Pu(n,M),Tu(function(){Ru(n,S),L.cancelled||(Pu(n,C),I||(Bu(P)?setTimeout(L,P):Iu(n,o,L)))})),t.data.show&&(e&&e(),O&&O(n,L)),R||I||L()}}}function $u(t,e){var n=t.elm;Ar(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var r=_u(t.data.transition);if(Cr(r)||1!==n.nodeType)return e();if(!Ar(n._leaveCb)){var i=r.css,o=r.type,a=r.leaveClass,s=r.leaveToClass,l=r.leaveActiveClass,u=r.beforeLeave,c=r.leave,d=r.afterLeave,f=r.leaveCancelled,h=r.delayLeave,p=r.duration,v=!1!==i&&!xi,g=Yu(c),m=Nr(Tr(p)?p.leave:p);Ar(m)&&zu(m,"leave",t);var y=n._leaveCb=ai(function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[t.key]=null),v&&(Ru(n,s),Ru(n,l)),y.cancelled?(v&&Ru(n,a),f&&f(n)):(e(),d&&d(n)),n._leaveCb=null});h?h(b):b()}function b(){y.cancelled||(!t.data.show&&n.parentNode&&((n.parentNode._pending||(n.parentNode._pending={}))[t.key]=t),u&&u(n),v&&(Pu(n,a),Pu(n,l),Tu(function(){Ru(n,a),y.cancelled||(Pu(n,s),g||(Bu(m)?setTimeout(y,m):Iu(n,o,y)))})),c&&c(n,y),v||g||y())}}function zu(t,e,n){"number"!=typeof t?Li("<transition> explicit "+e+" duration is not a valid number - got "+JSON.stringify(t)+".",n.context):isNaN(t)&&Li("<transition> explicit "+e+" duration is NaN - the duration expression might be incorrect.",n.context)}function Bu(t){return"number"==typeof t&&!isNaN(t)}function Yu(t){if(Cr(t))return!1;var e=t.fns;return Ar(e)?Yu(Array.isArray(e)?e[0]:e):(t._length||t.length)>1}function Wu(t,e){!0!==e.data.show&&Nu(e)}var Uu=function(t){var e,n,r={},i=t.modules,o=t.nodeOps;for(e=0;e<el.length;++e)for(r[el[e]]=[],n=0;n<i.length;++n)Ar(i[n][el[e]])&&r[el[e]].push(i[n][el[e]]);function a(t){var e=o.parentNode(t);Ar(e)&&o.removeChild(e,t)}function s(t,e){return!e&&!t.ns&&!(ci.ignoredElements.length&&ci.ignoredElements.some(function(e){return Lr(e)?e.test(t.tag):e===t.tag}))&&ci.isUnknownElement(t.tag)}var l=0;function u(t,e,n,i,a,u,h){if(Ar(t.elm)&&Ar(u)&&(t=u[h]=Ji(t)),t.isRootInsert=!a,!function(t,e,n,i){var o=t.data;if(Ar(o)){var a=Ar(t.componentInstance)&&o.keepAlive;if(Ar(o=o.hook)&&Ar(o=o.init)&&o(t,!1),Ar(t.componentInstance))return c(t,e),d(n,t.elm,i),Or(a)&&function(t,e,n,i){for(var o,a=t;a.componentInstance;)if(a=a.componentInstance._vnode,Ar(o=a.data)&&Ar(o=o.transition)){for(o=0;o<r.activate.length;++o)r.activate[o](tl,a);e.push(a);break}d(n,t.elm,i)}(t,e,n,i),!0}}(t,e,n,i)){var g=t.data,m=t.children,y=t.tag;Ar(y)?(g&&g.pre&&l++,s(t,l)&&Li("Unknown custom element: <"+y+'> - did you register the component correctly? For recursive components, make sure to provide the "name" option.',t.context),t.elm=t.ns?o.createElementNS(t.ns,y):o.createElement(y,t),v(t),f(t,m,e),Ar(g)&&p(t,e),d(n,t.elm,i),g&&g.pre&&l--):Or(t.isComment)?(t.elm=o.createComment(t.text),d(n,t.elm,i)):(t.elm=o.createTextNode(t.text),d(n,t.elm,i))}}function c(t,e){Ar(t.data.pendingInsert)&&(e.push.apply(e,t.data.pendingInsert),t.data.pendingInsert=null),t.elm=t.componentInstance.$el,h(t)?(p(t,e),v(t)):(Qs(t),e.push(t))}function d(t,e,n){Ar(t)&&(Ar(n)?o.parentNode(n)===t&&o.insertBefore(t,e,n):o.appendChild(t,e))}function f(t,e,n){if(Array.isArray(e)){_(e);for(var r=0;r<e.length;++r)u(e[r],n,t.elm,null,!0,e,r)}else Dr(t.text)&&o.appendChild(t.elm,o.createTextNode(String(t.text)))}function h(t){for(;t.componentInstance;)t=t.componentInstance._vnode;return Ar(t.tag)}function p(t,n){for(var i=0;i<r.create.length;++i)r.create[i](tl,t);Ar(e=t.data.hook)&&(Ar(e.create)&&e.create(tl,t),Ar(e.insert)&&n.push(t))}function v(t){var e;if(Ar(e=t.fnScopeId))o.setStyleScope(t.elm,e);else for(var n=t;n;)Ar(e=n.context)&&Ar(e=e.$options._scopeId)&&o.setStyleScope(t.elm,e),n=n.parent;Ar(e=Ha)&&e!==t.context&&e!==t.fnContext&&Ar(e=e.$options._scopeId)&&o.setStyleScope(t.elm,e)}function g(t,e,n,r,i,o){for(;r<=i;++r)u(n[r],o,t,e,!1,n,r)}function m(t){var e,n,i=t.data;if(Ar(i))for(Ar(e=i.hook)&&Ar(e=e.destroy)&&e(t),e=0;e<r.destroy.length;++e)r.destroy[e](t);if(Ar(e=t.children))for(n=0;n<t.children.length;++n)m(t.children[n])}function y(t,e,n,r){for(;n<=r;++n){var i=e[n];Ar(i)&&(Ar(i.tag)?(b(i),m(i)):a(i.elm))}}function b(t,e){if(Ar(e)||Ar(t.data)){var n,i=r.remove.length+1;for(Ar(e)?e.listeners+=i:e=function(t,e){function n(){0==--n.listeners&&a(t)}return n.listeners=e,n}(t.elm,i),Ar(n=t.componentInstance)&&Ar(n=n._vnode)&&Ar(n.data)&&b(n,e),n=0;n<r.remove.length;++n)r.remove[n](t,e);Ar(n=t.data.hook)&&Ar(n=n.remove)?n(t,e):e()}else a(t.elm)}function _(t){for(var e={},n=0;n<t.length;n++){var r=t[n],i=r.key;Ar(i)&&(e[i]?Li("Duplicate keys detected: '"+i+"'. This may cause an update error.",r.context):e[i]=!0)}}function w(t,e,n,r){for(var i=n;i<r;i++){var o=e[i];if(Ar(o)&&nl(t,o))return i}}function x(t,e,n,i,a,s){if(t!==e){Ar(e.elm)&&Ar(i)&&(e=i[a]=Ji(e));var l=e.elm=t.elm;if(Or(t.isAsyncPlaceholder))Ar(e.asyncFactory.resolved)?C(t.elm,e,n):e.isAsyncPlaceholder=!0;else if(Or(e.isStatic)&&Or(t.isStatic)&&e.key===t.key&&(Or(e.isCloned)||Or(e.isOnce)))e.componentInstance=t.componentInstance;else{var c,d=e.data;Ar(d)&&Ar(c=d.hook)&&Ar(c=c.prepatch)&&c(t,e);var f=t.children,p=e.children;if(Ar(d)&&h(e)){for(c=0;c<r.update.length;++c)r.update[c](t,e);Ar(c=d.hook)&&Ar(c=c.update)&&c(t,e)}Cr(e.text)?Ar(f)&&Ar(p)?f!==p&&function(t,e,n,r,i){var a,s,l,c=0,d=0,f=e.length-1,h=e[0],p=e[f],v=n.length-1,m=n[0],b=n[v],k=!i;for(_(n);c<=f&&d<=v;)Cr(h)?h=e[++c]:Cr(p)?p=e[--f]:nl(h,m)?(x(h,m,r,n,d),h=e[++c],m=n[++d]):nl(p,b)?(x(p,b,r,n,v),p=e[--f],b=n[--v]):nl(h,b)?(x(h,b,r,n,v),k&&o.insertBefore(t,h.elm,o.nextSibling(p.elm)),h=e[++c],b=n[--v]):nl(p,m)?(x(p,m,r,n,d),k&&o.insertBefore(t,p.elm,h.elm),p=e[--f],m=n[++d]):(Cr(a)&&(a=rl(e,c,f)),Cr(s=Ar(m.key)?a[m.key]:w(m,e,c,f))?u(m,r,t,h.elm,!1,n,d):nl(l=e[s],m)?(x(l,m,r,n,d),e[s]=void 0,k&&o.insertBefore(t,l.elm,h.elm)):u(m,r,t,h.elm,!1,n,d),m=n[++d]);c>f?g(t,Cr(n[v+1])?null:n[v+1].elm,n,d,v,r):d>v&&y(0,e,c,f)}(l,f,p,n,s):Ar(p)?(_(p),Ar(t.text)&&o.setTextContent(l,""),g(l,null,p,0,p.length-1,n)):Ar(f)?y(0,f,0,f.length-1):Ar(t.text)&&o.setTextContent(l,""):t.text!==e.text&&o.setTextContent(l,e.text),Ar(d)&&Ar(c=d.hook)&&Ar(c=c.postpatch)&&c(t,e)}}}function k(t,e,n){if(Or(n)&&Ar(t.parent))t.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var S=!1,M=$r("attrs,class,staticClass,staticStyle,key");function C(t,e,n,r){var i,o=e.tag,a=e.data,l=e.children;if(r=r||a&&a.pre,e.elm=t,Or(e.isComment)&&Ar(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(!function(t,e,n){return Ar(e.tag)?0===e.tag.indexOf("vue-component")||!s(e,n)&&e.tag.toLowerCase()===(t.tagName&&t.tagName.toLowerCase()):t.nodeType===(e.isComment?8:3)}(t,e,r))return!1;if(Ar(a)&&(Ar(i=a.hook)&&Ar(i=i.init)&&i(e,!0),Ar(i=e.componentInstance)))return c(e,n),!0;if(Ar(o)){if(Ar(l))if(t.hasChildNodes())if(Ar(i=a)&&Ar(i=i.domProps)&&Ar(i=i.innerHTML)){if(i!==t.innerHTML)return"undefined"==typeof console||S||(S=!0,console.warn("Parent: ",t),console.warn("server innerHTML: ",i),console.warn("client innerHTML: ",t.innerHTML)),!1}else{for(var u=!0,d=t.firstChild,h=0;h<l.length;h++){if(!d||!C(d,l[h],n,r)){u=!1;break}d=d.nextSibling}if(!u||d)return"undefined"==typeof console||S||(S=!0,console.warn("Parent: ",t),console.warn("Mismatching childNodes vs. VNodes: ",t.childNodes,l)),!1}else f(e,l,n);if(Ar(a)){var v=!1;for(var g in a)if(!M(g)){v=!0,p(e,n);break}!v&&a.class&&Ko(a.class)}}else t.data!==e.text&&(t.data=e.text);return!0}return function(t,e,n,i){if(!Cr(e)){var a,s=!1,l=[];if(Cr(t))s=!0,u(e,l);else{var c=Ar(t.nodeType);if(!c&&nl(t,e))x(t,e,l,null,null,i);else{if(c){if(1===t.nodeType&&t.hasAttribute(si)&&(t.removeAttribute(si),n=!0),Or(n)){if(C(t,e,l))return k(e,l,!0),t;Li("The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside <p>, or missing <tbody>. Bailing hydration and performing full client-side render.")}a=t,t=new Hi(o.tagName(a).toLowerCase(),{},[],void 0,a)}var d=t.elm,f=o.parentNode(d);if(u(e,l,d._leaveCb?null:f,o.nextSibling(d)),Ar(e.parent))for(var p=e.parent,v=h(e);p;){for(var g=0;g<r.destroy.length;++g)r.destroy[g](p);if(p.elm=e.elm,v){for(var b=0;b<r.create.length;++b)r.create[b](tl,p);var _=p.data.hook.insert;if(_.merged)for(var w=1;w<_.fns.length;w++)_.fns[w]()}else Qs(p);p=p.parent}Ar(f)?y(0,[t],0,0):Ar(t.tag)&&m(t)}}return k(e,l,s),e.elm}Ar(t)&&m(t)}}({nodeOps:Ks,modules:[pl,kl,nu,ou,gu,mi?{create:Wu,activate:Wu,remove:function(t,e){!0!==t.data.show?$u(t,e):e()}}:{}].concat(cl)});xi&&document.addEventListener("selectionchange",function(){var t=document.activeElement;t&&t.vmodel&&Xu(t,"input")});var Hu={inserted:function(t,e,n,r){"select"===n.tag?(r.elm&&!r.elm._vOptions?ea(n,"postpatch",function(){Hu.componentUpdated(t,e,n)}):Vu(t,e,n.context),t._vOptions=[].map.call(t.options,Ju)):("textarea"===n.tag||Js(t.type))&&(t._vModifiers=e.modifiers,e.modifiers.lazy||(t.addEventListener("compositionstart",Zu),t.addEventListener("compositionend",Ku),t.addEventListener("change",Ku),xi&&(t.vmodel=!0)))},componentUpdated:function(t,e,n){if("select"===n.tag){Vu(t,e,n.context);var r=t._vOptions,i=t._vOptions=[].map.call(t.options,Ju);if(i.some(function(t,e){return!ii(t,r[e])}))(t.multiple?e.value.some(function(t){return Gu(t,i)}):e.value!==e.oldValue&&Gu(e.value,i))&&Xu(t,"change")}}};function Vu(t,e,n){qu(t,e,n),(wi||ki)&&setTimeout(function(){qu(t,e,n)},0)}function qu(t,e,n){var r=e.value,i=t.multiple;if(!i||Array.isArray(r)){for(var o,a,s=0,l=t.options.length;s<l;s++)if(a=t.options[s],i)o=oi(r,Ju(a))>-1,a.selected!==o&&(a.selected=o);else if(ii(Ju(a),r))return void(t.selectedIndex!==s&&(t.selectedIndex=s));i||(t.selectedIndex=-1)}else Li('<select multiple v-model="'+e.expression+'"> expects an Array value for its binding, but got '+Object.prototype.toString.call(r).slice(8,-1),n)}function Gu(t,e){return e.every(function(e){return!ii(e,t)})}function Ju(t){return"_value"in t?t._value:t.value}function Zu(t){t.target.composing=!0}function Ku(t){t.target.composing&&(t.target.composing=!1,Xu(t.target,"input"))}function Xu(t,e){var n=document.createEvent("HTMLEvents");n.initEvent(e,!0,!0),t.dispatchEvent(n)}function Qu(t){return!t.componentInstance||t.data&&t.data.transition?t:Qu(t.componentInstance._vnode)}var tc={model:Hu,show:{bind:function(t,e,n){var r=e.value,i=(n=Qu(n)).data&&n.data.transition,o=t.__vOriginalDisplay="none"===t.style.display?"":t.style.display;r&&i?(n.data.show=!0,Nu(n,function(){t.style.display=o})):t.style.display=r?o:"none"},update:function(t,e,n){var r=e.value;!r!=!e.oldValue&&((n=Qu(n)).data&&n.data.transition?(n.data.show=!0,r?Nu(n,function(){t.style.display=t.__vOriginalDisplay}):$u(n,function(){t.style.display="none"})):t.style.display=r?t.__vOriginalDisplay:"none")},unbind:function(t,e,n,r,i){i||(t.style.display=t.__vOriginalDisplay)}}},ec={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function nc(t){var e=t&&t.componentOptions;return e&&e.Ctor.options.abstract?nc(za(e.children)):t}function rc(t){var e={},n=t.$options;for(var r in n.propsData)e[r]=t[r];var i=n._parentListeners;for(var o in i)e[qr(o)]=i[o];return e}function ic(t,e){if(/\d-keep-alive$/.test(e.tag))return t("keep-alive",{props:e.componentOptions.propsData})}var oc=function(t){return t.tag||$a(t)},ac=function(t){return"show"===t.name},sc={name:"transition",props:ec,abstract:!0,render:function(t){var e=this,n=this.$slots.default;if(n&&(n=n.filter(oc)).length){n.length>1&&Li("<transition> can only be used on a single element. Use <transition-group> for lists.",this.$parent);var r=this.mode;r&&"in-out"!==r&&"out-in"!==r&&Li("invalid <transition> mode: "+r,this.$parent);var i=n[0];if(function(t){for(;t=t.parent;)if(t.data.transition)return!0}(this.$vnode))return i;var o=nc(i);if(!o)return i;if(this._leaving)return ic(t,i);var a="__transition-"+this._uid+"-";o.key=null==o.key?o.isComment?a+"comment":a+o.tag:Dr(o.key)?0===String(o.key).indexOf(a)?o.key:a+o.key:o.key;var s=(o.data||(o.data={})).transition=rc(this),l=this._vnode,u=nc(l);if(o.data.directives&&o.data.directives.some(ac)&&(o.data.show=!0),u&&u.data&&!function(t,e){return e.key===t.key&&e.tag===t.tag}(o,u)&&!$a(u)&&(!u.componentInstance||!u.componentInstance._vnode.isComment)){var c=u.data.transition=Qr({},s);if("out-in"===r)return this._leaving=!0,ea(c,"afterLeave",function(){e._leaving=!1,e.$forceUpdate()}),ic(t,i);if("in-out"===r){if($a(o))return l;var d,f=function(){d()};ea(s,"afterEnter",f),ea(s,"enterCancelled",f),ea(c,"delayLeave",function(t){d=t})}}return i}}},lc=Qr({tag:String,moveClass:String},ec);function uc(t){t.elm._moveCb&&t.elm._moveCb(),t.elm._enterCb&&t.elm._enterCb()}function cc(t){t.data.newPos=t.elm.getBoundingClientRect()}function dc(t){var e=t.data.pos,n=t.data.newPos,r=e.left-n.left,i=e.top-n.top;if(r||i){t.data.moved=!0;var o=t.elm.style;o.transform=o.WebkitTransform="translate("+r+"px,"+i+"px)",o.transitionDuration="0s"}}delete lc.mode;var fc={Transition:sc,TransitionGroup:{props:lc,beforeMount:function(){var t=this,e=this._update;this._update=function(n,r){var i=qa(t);t.__patch__(t._vnode,t.kept,!1,!0),t._vnode=t.kept,i(),e.call(t,n,r)}},render:function(t){for(var e=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),r=this.prevChildren=this.children,i=this.$slots.default||[],o=this.children=[],a=rc(this),s=0;s<i.length;s++){var l=i[s];if(l.tag)if(null!=l.key&&0!==String(l.key).indexOf("__vlist"))o.push(l),n[l.key]=l,(l.data||(l.data={})).transition=a;else{var u=l.componentOptions,c=u?u.Ctor.options.name||u.tag||"":l.tag;Li("<transition-group> children must be keyed: <"+c+">")}}if(r){for(var d=[],f=[],h=0;h<r.length;h++){var p=r[h];p.data.transition=a,p.data.pos=p.elm.getBoundingClientRect(),n[p.key]?d.push(p):f.push(p)}this.kept=t(e,null,d),this.removed=f}return t(e,null,o)},updated:function(){var t=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";t.length&&this.hasMove(t[0].elm,e)&&(t.forEach(uc),t.forEach(cc),t.forEach(dc),this._reflow=document.body.offsetHeight,t.forEach(function(t){if(t.data.moved){var n=t.elm,r=n.style;Pu(n,e),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(Cu,n._moveCb=function t(r){r&&r.target!==n||r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(Cu,t),n._moveCb=null,Ru(n,e))})}}))},methods:{hasMove:function(t,e){if(!xu)return!1;if(this._hasMove)return this._hasMove;var n=t.cloneNode();t._transitionClasses&&t._transitionClasses.forEach(function(t){bu(n,t)}),yu(n,e),n.style.display="none",this.$el.appendChild(n);var r=Eu(n);return this.$el.removeChild(n),this._hasMove=r.hasTransform}}}};_s.config.mustUseProp=Ts,_s.config.isReservedTag=Vs,_s.config.isReservedAttr=Os,_s.config.getTagNamespace=qs,_s.config.isUnknownElement=function(t){if(!mi)return!0;if(Vs(t))return!1;if(t=t.toLowerCase(),null!=Gs[t])return Gs[t];var e=document.createElement(t);return t.indexOf("-")>-1?Gs[t]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:Gs[t]=/HTMLUnknownElement/.test(e.toString())},Qr(_s.options.directives,tc),Qr(_s.options.components,fc),_s.prototype.__patch__=mi?Uu:ei,_s.prototype.$mount=function(t,e){return function(t,e,n){var r;return t.$el=e,t.$options.render||(t.$options.render=qi,t.$options.template&&"#"!==t.$options.template.charAt(0)||t.$options.el||e?Li("You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.",t):Li("Failed to mount component: template or render function not defined.",t)),Za(t,"beforeMount"),r=ci.performance&&To?function(){var e=t._name,r=t._uid,i="vue-perf-start:"+r,o="vue-perf-end:"+r;To(i);var a=t._render();To(o),Po("vue "+e+" render",i,o),To(i),t._update(a,n),To(o),Po("vue "+e+" patch",i,o)}:function(){t._update(t._render(),n)},new us(t,r,ei,{before:function(){t._isMounted&&!t._isDestroyed&&Za(t,"beforeUpdate")}},!0),n=!1,null==t.$vnode&&(t._isMounted=!0,Za(t,"mounted")),t}(this,t=t&&mi?Zs(t):void 0,e)},mi&&setTimeout(function(){ci.devtools&&(Ti?Ti.emit("init",_s):console[console.info?"info":"log"]("Download the Vue Devtools extension for a better development experience:\nhttps://github.com/vuejs/vue-devtools")),!1!==ci.productionTip&&"undefined"!=typeof console&&console[console.info?"info":"log"]("You are running Vue in development mode.\nMake sure to turn on production mode when deploying for production.\nSee more tips at https://vuejs.org/guide/deployment.html")},0);var hc=/\{\{((?:.|\r?\n)+?)\}\}/g,pc=/[-.*+?^${}()|[\]\/\\]/g,vc=Hr(function(t){var e=t[0].replace(pc,"\\$&"),n=t[1].replace(pc,"\\$&");return new RegExp(e+"((?:.|\\n)+?)"+n,"g")});function gc(t,e){var n=e?vc(e):hc;if(n.test(t)){for(var r,i,o,a=[],s=[],l=n.lastIndex=0;r=n.exec(t);){(i=r.index)>l&&(s.push(o=t.slice(l,i)),a.push(JSON.stringify(o)));var u=Ml(r[1].trim());a.push("_s("+u+")"),s.push({"@binding":u}),l=i+r[0].length}return l<t.length&&(s.push(o=t.slice(l)),a.push(JSON.stringify(o))),{expression:a.join("+"),tokens:s}}}var mc={staticKeys:["staticClass"],transformNode:function(t,e){var n=e.warn||Al,r=jl(t,"class");r&&gc(r,e.delimiters)&&n('class="'+r+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div class="{{ val }}">, use <div :class="val">.',t.rawAttrsMap.class),r&&(t.staticClass=JSON.stringify(r));var i=Fl(t,"class",!1);i&&(t.classBinding=i)},genData:function(t){var e="";return t.staticClass&&(e+="staticClass:"+t.staticClass+","),t.classBinding&&(e+="class:"+t.classBinding+","),e}};var yc,bc={staticKeys:["staticStyle"],transformNode:function(t,e){var n=e.warn||Al,r=jl(t,"style");r&&(gc(r,e.delimiters)&&n('style="'+r+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div style="{{ val }}">, use <div :style="val">.',t.rawAttrsMap.style),t.staticStyle=JSON.stringify(au(r)));var i=Fl(t,"style",!1);i&&(t.styleBinding=i)},genData:function(t){var e="";return t.staticStyle&&(e+="staticStyle:"+t.staticStyle+","),t.styleBinding&&(e+="style:("+t.styleBinding+"),"),e}},_c=function(t){return(yc=yc||document.createElement("div")).innerHTML=t,yc.textContent},wc=$r("area,base,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr"),xc=$r("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source"),kc=$r("address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track"),Sc=/^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,Mc=/^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,Cc="[a-zA-Z_][\\-\\.0-9_a-zA-Z"+di+"]*",Ac="((?:"+Cc+"\\:)?"+Cc+")",Oc=new RegExp("^<"+Ac),Dc=/^\s*(\/?)>/,Tc=new RegExp("^<\\/"+Ac+"[^>]*>"),Pc=/^<!DOCTYPE [^>]+>/i,Rc=/^<!\--/,Ic=/^<!\[/,Lc=$r("script,style,textarea",!0),Ec={},Fc={"&lt;":"<","&gt;":">","&quot;":'"',"&amp;":"&","&#10;":"\n","&#9;":"\t","&#39;":"'"},jc=/&(?:lt|gt|quot|amp|#39);/g,Nc=/&(?:lt|gt|quot|amp|#39|#10|#9);/g,$c=$r("pre,textarea",!0),zc=function(t,e){return t&&$c(t)&&"\n"===e[0]};function Bc(t,e){var n=e?Nc:jc;return t.replace(n,function(t){return Fc[t]})}var Yc,Wc,Uc,Hc,Vc,qc,Gc,Jc,Zc,Kc=/^@|^v-on:/,Xc=/^v-|^@|^:/,Qc=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,td=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,ed=/^\(|\)$/g,nd=/^\[.*\]$/,rd=/:(.*)$/,id=/^:|^\.|^v-bind:/,od=/\.[^.]+/g,ad=/^v-slot(:|$)|^#/,sd=/[\r\n]/,ld=/\s+/g,ud=/[\s"'<>\/=]/,cd=Hr(_c),dd="_empty_";function fd(t,e,n){return{type:1,tag:t,attrsList:e,attrsMap:function(t){for(var e={},n=0,r=t.length;n<r;n++)!e[t[n].name]||wi||ki||Yc("duplicate attribute: "+t[n].name,t[n]),e[t[n].name]=t[n].value;return e}(e),rawAttrsMap:{},parent:n,children:[]}}function hd(t,e){Yc=e.warn||Al,qc=e.isPreTag||ni,Gc=e.mustUseProp||ni,Jc=e.getTagNamespace||ni;var n=e.isReservedTag||ni;Zc=function(t){return!!t.component||!n(t.tag)},Uc=Ol(e.modules,"transformNode"),Hc=Ol(e.modules,"preTransformNode"),Vc=Ol(e.modules,"postTransformNode"),Wc=e.delimiters;var r,i,o=[],a=!1!==e.preserveWhitespace,s=e.whitespace,l=!1,u=!1,c=!1;function d(t,e){c||(c=!0,Yc(t,e))}function f(t){if(h(t),l||t.processed||(t=pd(t,e)),o.length||t===r||(r.if&&(t.elseif||t.else)?(p(t),gd(r,{exp:t.elseif,block:t})):d("Component template should contain exactly one root element. If you are using v-if on multiple elements, use v-else-if to chain them instead.",{start:t.start})),i&&!t.forbidden)if(t.elseif||t.else)a=t,(s=function(t){var e=t.length;for(;e--;){if(1===t[e].type)return t[e];" "!==t[e].text&&Yc('text "'+t[e].text.trim()+'" between v-if and v-else(-if) will be ignored.',t[e]),t.pop()}}(i.children))&&s.if?gd(s,{exp:a.elseif,block:a}):Yc("v-"+(a.elseif?'else-if="'+a.elseif+'"':"else")+" used on element <"+a.tag+"> without corresponding v-if.",a.rawAttrsMap[a.elseif?"v-else-if":"v-else"]);else{if(t.slotScope){var n=t.slotTarget||'"default"';(i.scopedSlots||(i.scopedSlots={}))[n]=t}i.children.push(t),t.parent=i}var a,s;t.children=t.children.filter(function(t){return!t.slotScope}),h(t),t.pre&&(l=!1),qc(t.tag)&&(u=!1);for(var c=0;c<Vc.length;c++)Vc[c](t,e)}function h(t){if(!u)for(var e;(e=t.children[t.children.length-1])&&3===e.type&&" "===e.text;)t.children.pop()}function p(t){"slot"!==t.tag&&"template"!==t.tag||d("Cannot use <"+t.tag+"> as component root element because it may contain multiple nodes.",{start:t.start}),t.attrsMap.hasOwnProperty("v-for")&&d("Cannot use v-for on stateful component root element because it renders multiple elements.",t.rawAttrsMap["v-for"])}return function(t,e){for(var n,r,i=[],o=e.expectHTML,a=e.isUnaryTag||ni,s=e.canBeLeftOpenTag||ni,l=0;t;){if(n=t,r&&Lc(r)){var u=0,c=r.toLowerCase(),d=Ec[c]||(Ec[c]=new RegExp("([\\s\\S]*?)(</"+c+"[^>]*>)","i")),f=t.replace(d,function(t,n,r){return u=r.length,Lc(c)||"noscript"===c||(n=n.replace(/<!\--([\s\S]*?)-->/g,"$1").replace(/<!\[CDATA\[([\s\S]*?)]]>/g,"$1")),zc(c,n)&&(n=n.slice(1)),e.chars&&e.chars(n),""});l+=t.length-f.length,t=f,C(c,l-u,l)}else{var h=t.indexOf("<");if(0===h){if(Rc.test(t)){var p=t.indexOf("--\x3e");if(p>=0){e.shouldKeepComment&&e.comment(t.substring(4,p),l,l+p+3),k(p+3);continue}}if(Ic.test(t)){var v=t.indexOf("]>");if(v>=0){k(v+2);continue}}var g=t.match(Pc);if(g){k(g[0].length);continue}var m=t.match(Tc);if(m){var y=l;k(m[0].length),C(m[1],y,l);continue}var b=S();if(b){M(b),zc(b.tagName,t)&&k(1);continue}}var _=void 0,w=void 0,x=void 0;if(h>=0){for(w=t.slice(h);!(Tc.test(w)||Oc.test(w)||Rc.test(w)||Ic.test(w)||(x=w.indexOf("<",1))<0);)h+=x,w=t.slice(h);_=t.substring(0,h)}h<0&&(_=t),_&&k(_.length),e.chars&&_&&e.chars(_,l-_.length,l)}if(t===n){e.chars&&e.chars(t),!i.length&&e.warn&&e.warn('Mal-formatted tag at end of template: "'+t+'"',{start:l+t.length});break}}function k(e){l+=e,t=t.substring(e)}function S(){var e=t.match(Oc);if(e){var n,r,i={tagName:e[1],attrs:[],start:l};for(k(e[0].length);!(n=t.match(Dc))&&(r=t.match(Mc)||t.match(Sc));)r.start=l,k(r[0].length),r.end=l,i.attrs.push(r);if(n)return i.unarySlash=n[1],k(n[0].length),i.end=l,i}}function M(t){var n=t.tagName,l=t.unarySlash;o&&("p"===r&&kc(n)&&C(r),s(n)&&r===n&&C(n));for(var u=a(n)||!!l,c=t.attrs.length,d=new Array(c),f=0;f<c;f++){var h=t.attrs[f],p=h[3]||h[4]||h[5]||"",v="a"===n&&"href"===h[1]?e.shouldDecodeNewlinesForHref:e.shouldDecodeNewlines;d[f]={name:h[1],value:Bc(p,v)},e.outputSourceRange&&(d[f].start=h.start+h[0].match(/^\s*/).length,d[f].end=h.end)}u||(i.push({tag:n,lowerCasedTag:n.toLowerCase(),attrs:d,start:t.start,end:t.end}),r=n),e.start&&e.start(n,d,u,t.start,t.end)}function C(t,n,o){var a,s;if(null==n&&(n=l),null==o&&(o=l),t)for(s=t.toLowerCase(),a=i.length-1;a>=0&&i[a].lowerCasedTag!==s;a--);else a=0;if(a>=0){for(var u=i.length-1;u>=a;u--)(u>a||!t&&e.warn)&&e.warn("tag <"+i[u].tag+"> has no matching end tag.",{start:i[u].start}),e.end&&e.end(i[u].tag,n,o);i.length=a,r=a&&i[a-1].tag}else"br"===s?e.start&&e.start(t,[],!0,n,o):"p"===s&&(e.start&&e.start(t,[],!1,n,o),e.end&&e.end(t,n,o))}C()}(t,{warn:Yc,expectHTML:e.expectHTML,isUnaryTag:e.isUnaryTag,canBeLeftOpenTag:e.canBeLeftOpenTag,shouldDecodeNewlines:e.shouldDecodeNewlines,shouldDecodeNewlinesForHref:e.shouldDecodeNewlinesForHref,shouldKeepComment:e.comments,outputSourceRange:e.outputSourceRange,start:function(t,n,a,s){var c=i&&i.ns||Jc(t);wi&&"svg"===c&&(n=function(t){for(var e=[],n=0;n<t.length;n++){var r=t[n];bd.test(r.name)||(r.name=r.name.replace(_d,""),e.push(r))}return e}(n));var d,h=fd(t,n,i);c&&(h.ns=c),e.outputSourceRange&&(h.start=s,h.rawAttrsMap=h.attrsList.reduce(function(t,e){return t[e.name]=e,t},{})),n.forEach(function(t){ud.test(t.name)&&Yc("Invalid dynamic argument expression: attribute names cannot contain spaces, quotes, <, >, / or =.",{start:t.start+t.name.indexOf("["),end:t.start+t.name.length})}),"style"!==(d=h).tag&&("script"!==d.tag||d.attrsMap.type&&"text/javascript"!==d.attrsMap.type)||Di()||(h.forbidden=!0,Yc("Templates should only be responsible for mapping the state to the UI. Avoid placing tags with side-effects in your templates, such as <"+t+">, as they will not be parsed.",{start:h.start}));for(var v=0;v<Hc.length;v++)h=Hc[v](h,e)||h;l||(!function(t){null!=jl(t,"v-pre")&&(t.pre=!0)}(h),h.pre&&(l=!0)),qc(h.tag)&&(u=!0),l?function(t){var e=t.attrsList,n=e.length;if(n)for(var r=t.attrs=new Array(n),i=0;i<n;i++)r[i]={name:e[i].name,value:JSON.stringify(e[i].value)},null!=e[i].start&&(r[i].start=e[i].start,r[i].end=e[i].end);else t.pre||(t.plain=!0)}(h):h.processed||(vd(h),function(t){var e=jl(t,"v-if");if(e)t.if=e,gd(t,{exp:e,block:t});else{null!=jl(t,"v-else")&&(t.else=!0);var n=jl(t,"v-else-if");n&&(t.elseif=n)}}(h),function(t){null!=jl(t,"v-once")&&(t.once=!0)}(h)),r||p(r=h),a?f(h):(i=h,o.push(h))},end:function(t,n,r){var a=o[o.length-1];o.length-=1,i=o[o.length-1],e.outputSourceRange&&(a.end=r),f(a)},chars:function(n,r,o){if(i){if(!wi||"textarea"!==i.tag||i.attrsMap.placeholder!==n){var c,f,h,p=i.children;if(n=u||n.trim()?"script"===(c=i).tag||"style"===c.tag?n:cd(n):p.length?s?"condense"===s&&sd.test(n)?"":" ":a?" ":"":"")"condense"===s&&(n=n.replace(ld," ")),!l&&" "!==n&&(f=gc(n,Wc))?h={type:2,expression:f.expression,tokens:f.tokens,text:n}:" "===n&&p.length&&" "===p[p.length-1].text||(h={type:3,text:n}),h&&(e.outputSourceRange&&(h.start=r,h.end=o),p.push(h))}}else n===t?d("Component template requires a root element, rather than just text.",{start:r}):(n=n.trim())&&d('text "'+n+'" outside root element will be ignored.',{start:r})},comment:function(t,n,r){if(i){var o={type:3,text:t,isComment:!0};e.outputSourceRange&&(o.start=n,o.end=r),i.children.push(o)}}}),r}function pd(t,e){var n,r;!function(t){var e=Fl(t,"key");if(e){if("template"===t.tag&&Yc("<template> cannot be keyed. Place the key on real elements instead.",El(t,"key")),t.for){var n=t.iterator2||t.iterator1,r=t.parent;n&&n===e&&r&&"transition-group"===r.tag&&Yc("Do not use v-for index as key on <transition-group> children, this is the same as not using keys.",El(t,"key"),!0)}t.key=e}}(t),t.plain=!t.key&&!t.scopedSlots&&!t.attrsList.length,(r=Fl(n=t,"ref"))&&(n.ref=r,n.refInFor=function(t){for(var e=t;e;){if(void 0!==e.for)return!0;e=e.parent}return!1}(n)),function(t){var e;"template"===t.tag?((e=jl(t,"scope"))&&Yc('the "scope" attribute for scoped slots have been deprecated and replaced by "slot-scope" since 2.5. The new "slot-scope" attribute can also be used on plain elements in addition to <template> to denote scoped slots.',t.rawAttrsMap.scope,!0),t.slotScope=e||jl(t,"slot-scope")):(e=jl(t,"slot-scope"))&&(t.attrsMap["v-for"]&&Yc("Ambiguous combined usage of slot-scope and v-for on <"+t.tag+"> (v-for takes higher priority). Use a wrapper <template> for the scoped slot to make it clearer.",t.rawAttrsMap["slot-scope"],!0),t.slotScope=e);var n=Fl(t,"slot");n&&(t.slotTarget='""'===n?'"default"':n,t.slotTargetDynamic=!(!t.attrsMap[":slot"]&&!t.attrsMap["v-bind:slot"]),"template"===t.tag||t.slotScope||Tl(t,"slot",n,El(t,"slot")));if("template"===t.tag){var r=Nl(t,ad);if(r){(t.slotTarget||t.slotScope)&&Yc("Unexpected mixed usage of different slot syntaxes.",t),t.parent&&!Zc(t.parent)&&Yc("<template v-slot> can only appear at the root level inside the receiving the component",t);var i=md(r),o=i.name,a=i.dynamic;t.slotTarget=o,t.slotTargetDynamic=a,t.slotScope=r.value||dd}}else{var s=Nl(t,ad);if(s){Zc(t)||Yc("v-slot can only be used on components or <template>.",s),(t.slotScope||t.slotTarget)&&Yc("Unexpected mixed usage of different slot syntaxes.",t),t.scopedSlots&&Yc("To avoid scope ambiguity, the default slot should also use <template> syntax when there are other named slots.",s);var l=t.scopedSlots||(t.scopedSlots={}),u=md(s),c=u.name,d=u.dynamic,f=l[c]=fd("template",[],t);f.slotTarget=c,f.slotTargetDynamic=d,f.children=t.children.filter(function(t){if(!t.slotScope)return t.parent=f,!0}),f.slotScope=s.value||dd,t.children=[],t.plain=!1}}}(t),function(t){"slot"===t.tag&&(t.slotName=Fl(t,"name"),t.key&&Yc("`key` does not work on <slot> because slots are abstract outlets and can possibly expand into multiple elements. Use the key on a wrapping element instead.",El(t,"key")))}(t),function(t){var e;(e=Fl(t,"is"))&&(t.component=e);null!=jl(t,"inline-template")&&(t.inlineTemplate=!0)}(t);for(var i=0;i<Uc.length;i++)t=Uc[i](t,e)||t;return function(t){var e,n,r,i,o,a,s,l,u=t.attrsList;for(e=0,n=u.length;e<n;e++)if(r=i=u[e].name,o=u[e].value,Xc.test(r))if(t.hasBindings=!0,(a=yd(r.replace(Xc,"")))&&(r=r.replace(od,"")),id.test(r))r=r.replace(id,""),o=Ml(o),(l=nd.test(r))&&(r=r.slice(1,-1)),0===o.trim().length&&Yc('The value for a v-bind expression cannot be empty. Found in "v-bind:'+r+'"'),a&&(a.prop&&!l&&"innerHtml"===(r=qr(r))&&(r="innerHTML"),a.camel&&!l&&(r=qr(r)),a.sync&&(s=Bl(o,"$event"),l?Ll(t,'"update:"+('+r+")",s,null,!1,Yc,u[e],!0):(Ll(t,"update:"+qr(r),s,null,!1,Yc,u[e]),Zr(r)!==qr(r)&&Ll(t,"update:"+Zr(r),s,null,!1,Yc,u[e])))),a&&a.prop||!t.component&&Gc(t.tag,t.attrsMap.type,r)?Dl(t,r,o,u[e],l):Tl(t,r,o,u[e],l);else if(Kc.test(r))r=r.replace(Kc,""),(l=nd.test(r))&&(r=r.slice(1,-1)),Ll(t,r,o,a,!1,Yc,u[e],l);else{var c=(r=r.replace(Xc,"")).match(rd),d=c&&c[1];l=!1,d&&(r=r.slice(0,-(d.length+1)),nd.test(d)&&(d=d.slice(1,-1),l=!0)),Rl(t,r,i,o,d,l,a,u[e]),"model"===r&&wd(t,o)}else{var f=gc(o,Wc);f&&Yc(r+'="'+o+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div id="{{ val }}">, use <div :id="val">.',u[e]),Tl(t,r,JSON.stringify(o),u[e]),!t.component&&"muted"===r&&Gc(t.tag,t.attrsMap.type,r)&&Dl(t,r,"true",u[e])}}(t),t}function vd(t){var e;if(e=jl(t,"v-for")){var n=function(t){var e=t.match(Qc);if(!e)return;var n={};n.for=e[2].trim();var r=e[1].trim().replace(ed,""),i=r.match(td);i?(n.alias=r.replace(td,"").trim(),n.iterator1=i[1].trim(),i[2]&&(n.iterator2=i[2].trim())):n.alias=r;return n}(e);n?Qr(t,n):Yc("Invalid v-for expression: "+e,t.rawAttrsMap["v-for"])}}function gd(t,e){t.ifConditions||(t.ifConditions=[]),t.ifConditions.push(e)}function md(t){var e=t.name.replace(ad,"");return e||("#"!==t.name[0]?e="default":Yc("v-slot shorthand syntax requires a slot name.",t)),nd.test(e)?{name:e.slice(1,-1),dynamic:!0}:{name:'"'+e+'"',dynamic:!1}}function yd(t){var e=t.match(od);if(e){var n={};return e.forEach(function(t){n[t.slice(1)]=!0}),n}}var bd=/^xmlns:NS\d+/,_d=/^NS\d+:/;function wd(t,e){for(var n=t;n;)n.for&&n.alias===e&&Yc("<"+t.tag+' v-model="'+e+'">: You are binding v-model directly to a v-for iteration alias. This will not be able to modify the v-for source array because writing to the alias is like modifying a function local variable. Consider using an array of objects and use v-model on an object property instead.',t.rawAttrsMap["v-model"]),n=n.parent}function xd(t){return fd(t.tag,t.attrsList.slice(),t.parent)}var kd=[mc,bc,{preTransformNode:function(t,e){if("input"===t.tag){var n,r=t.attrsMap;if(!r["v-model"])return;if((r[":type"]||r["v-bind:type"])&&(n=Fl(t,"type")),r.type||n||!r["v-bind"]||(n="("+r["v-bind"]+").type"),n){var i=jl(t,"v-if",!0),o=i?"&&("+i+")":"",a=null!=jl(t,"v-else",!0),s=jl(t,"v-else-if",!0),l=xd(t);vd(l),Pl(l,"type","checkbox"),pd(l,e),l.processed=!0,l.if="("+n+")==='checkbox'"+o,gd(l,{exp:l.if,block:l});var u=xd(t);jl(u,"v-for",!0),Pl(u,"type","radio"),pd(u,e),gd(l,{exp:"("+n+")==='radio'"+o,block:u});var c=xd(t);return jl(c,"v-for",!0),Pl(c,":type",n),pd(c,e),gd(l,{exp:i,block:c}),a?l.else=!0:s&&(l.elseif=s),l}}}}];var Sd,Md,Cd={expectHTML:!0,modules:kd,directives:{model:function(t,e,n){xl=n;var r=e.value,i=e.modifiers,o=t.tag,a=t.attrsMap.type;if("input"===o&&"file"===a&&xl("<"+t.tag+' v-model="'+r+'" type="file">:\nFile inputs are read only. Use a v-on:change listener instead.',t.rawAttrsMap["v-model"]),t.component)return zl(t,r,i),!1;if("select"===o)!function(t,e,n){var r='var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return '+(n&&n.number?"_n(val)":"val")+"});";r=r+" "+Bl(e,"$event.target.multiple ? $$selectedVal : $$selectedVal[0]"),Ll(t,"change",r,null,!0)}(t,r,i);else if("input"===o&&"checkbox"===a)!function(t,e,n){var r=n&&n.number,i=Fl(t,"value")||"null",o=Fl(t,"true-value")||"true",a=Fl(t,"false-value")||"false";Dl(t,"checked","Array.isArray("+e+")?_i("+e+","+i+")>-1"+("true"===o?":("+e+")":":_q("+e+","+o+")")),Ll(t,"change","var $$a="+e+",$$el=$event.target,$$c=$$el.checked?("+o+"):("+a+");if(Array.isArray($$a)){var $$v="+(r?"_n("+i+")":i)+",$$i=_i($$a,$$v);if($$el.checked){$$i<0&&("+Bl(e,"$$a.concat([$$v])")+")}else{$$i>-1&&("+Bl(e,"$$a.slice(0,$$i).concat($$a.slice($$i+1))")+")}}else{"+Bl(e,"$$c")+"}",null,!0)}(t,r,i);else if("input"===o&&"radio"===a)!function(t,e,n){var r=n&&n.number,i=Fl(t,"value")||"null";Dl(t,"checked","_q("+e+","+(i=r?"_n("+i+")":i)+")"),Ll(t,"change",Bl(e,i),null,!0)}(t,r,i);else if("input"===o||"textarea"===o)!function(t,e,n){var r=t.attrsMap.type,i=t.attrsMap["v-bind:value"]||t.attrsMap[":value"],o=t.attrsMap["v-bind:type"]||t.attrsMap[":type"];if(i&&!o){var a=t.attrsMap["v-bind:value"]?"v-bind:value":":value";xl(a+'="'+i+'" conflicts with v-model on the same element because the latter already expands to a value binding internally',t.rawAttrsMap[a])}var s=n||{},l=s.lazy,u=s.number,c=s.trim,d=!l&&"range"!==r,f=l?"change":"range"===r?Gl:"input",h="$event.target.value";c&&(h="$event.target.value.trim()"),u&&(h="_n("+h+")");var p=Bl(e,h);d&&(p="if($event.target.composing)return;"+p),Dl(t,"value","("+e+")"),Ll(t,f,p,null,!0),(c||u)&&Ll(t,"blur","$forceUpdate()")}(t,r,i);else{if(!ci.isReservedTag(o))return zl(t,r,i),!1;xl("<"+t.tag+' v-model="'+r+"\">: v-model is not supported on this element type. If you are working with contenteditable, it's recommended to wrap a library dedicated for that purpose inside a custom component.",t.rawAttrsMap["v-model"])}return!0},text:function(t,e){e.value&&Dl(t,"textContent","_s("+e.value+")",e)},html:function(t,e){e.value&&Dl(t,"innerHTML","_s("+e.value+")",e)}},isPreTag:function(t){return"pre"===t},isUnaryTag:wc,mustUseProp:Ts,canBeLeftOpenTag:xc,isReservedTag:Vs,getTagNamespace:qs,staticKeys:function(t){return t.reduce(function(t,e){return t.concat(e.staticKeys||[])},[]).join(",")}(kd)},Ad=Hr(function(t){return $r("type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap"+(t?","+t:""))});function Od(t,e){t&&(Sd=Ad(e.staticKeys||""),Md=e.isReservedTag||ni,function t(e){e.static=function(t){if(2===t.type)return!1;if(3===t.type)return!0;return!(!t.pre&&(t.hasBindings||t.if||t.for||zr(t.tag)||!Md(t.tag)||function(t){for(;t.parent;){if("template"!==(t=t.parent).tag)return!1;if(t.for)return!0}return!1}(t)||!Object.keys(t).every(Sd)))}(e);if(1===e.type){if(!Md(e.tag)&&"slot"!==e.tag&&null==e.attrsMap["inline-template"])return;for(var n=0,r=e.children.length;n<r;n++){var i=e.children[n];t(i),i.static||(e.static=!1)}if(e.ifConditions)for(var o=1,a=e.ifConditions.length;o<a;o++){var s=e.ifConditions[o].block;t(s),s.static||(e.static=!1)}}}(t),function t(e,n){if(1===e.type){if((e.static||e.once)&&(e.staticInFor=n),e.static&&e.children.length&&(1!==e.children.length||3!==e.children[0].type))return void(e.staticRoot=!0);if(e.staticRoot=!1,e.children)for(var r=0,i=e.children.length;r<i;r++)t(e.children[r],n||!!e.for);if(e.ifConditions)for(var o=1,a=e.ifConditions.length;o<a;o++)t(e.ifConditions[o].block,n)}}(t,!1))}var Dd=/^([\w$_]+|\([^)]*?\))\s*=>|^function\s*\(/,Td=/\([^)]*?\);*$/,Pd=/^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/,Rd={esc:27,tab:9,enter:13,space:32,up:38,left:37,right:39,down:40,delete:[8,46]},Id={esc:["Esc","Escape"],tab:"Tab",enter:"Enter",space:[" ","Spacebar"],up:["Up","ArrowUp"],left:["Left","ArrowLeft"],right:["Right","ArrowRight"],down:["Down","ArrowDown"],delete:["Backspace","Delete","Del"]},Ld=function(t){return"if("+t+")return null;"},Ed={stop:"$event.stopPropagation();",prevent:"$event.preventDefault();",self:Ld("$event.target !== $event.currentTarget"),ctrl:Ld("!$event.ctrlKey"),shift:Ld("!$event.shiftKey"),alt:Ld("!$event.altKey"),meta:Ld("!$event.metaKey"),left:Ld("'button' in $event && $event.button !== 0"),middle:Ld("'button' in $event && $event.button !== 1"),right:Ld("'button' in $event && $event.button !== 2")};function Fd(t,e){var n=e?"nativeOn:":"on:",r="",i="";for(var o in t){var a=jd(t[o]);t[o]&&t[o].dynamic?i+=o+","+a+",":r+='"'+o+'":'+a+","}return r="{"+r.slice(0,-1)+"}",i?n+"_d("+r+",["+i.slice(0,-1)+"])":n+r}function jd(t){if(!t)return"function(){}";if(Array.isArray(t))return"["+t.map(function(t){return jd(t)}).join(",")+"]";var e=Pd.test(t.value),n=Dd.test(t.value),r=Pd.test(t.value.replace(Td,""));if(t.modifiers){var i="",o="",a=[];for(var s in t.modifiers)if(Ed[s])o+=Ed[s],Rd[s]&&a.push(s);else if("exact"===s){var l=t.modifiers;o+=Ld(["ctrl","shift","alt","meta"].filter(function(t){return!l[t]}).map(function(t){return"$event."+t+"Key"}).join("||"))}else a.push(s);return a.length&&(i+=function(t){return"if(!$event.type.indexOf('key')&&"+t.map(Nd).join("&&")+")return null;"}(a)),o&&(i+=o),"function($event){"+i+(e?"return "+t.value+"($event)":n?"return ("+t.value+")($event)":r?"return "+t.value:t.value)+"}"}return e||n?t.value:"function($event){"+(r?"return "+t.value:t.value)+"}"}function Nd(t){var e=parseInt(t,10);if(e)return"$event.keyCode!=="+e;var n=Rd[t],r=Id[t];return"_k($event.keyCode,"+JSON.stringify(t)+","+JSON.stringify(n)+",$event.key,"+JSON.stringify(r)+")"}var $d={on:function(t,e){e.modifiers&&Li("v-on without argument does not support modifiers."),t.wrapListeners=function(t){return"_g("+t+","+e.value+")"}},bind:function(t,e){t.wrapData=function(n){return"_b("+n+",'"+t.tag+"',"+e.value+","+(e.modifiers&&e.modifiers.prop?"true":"false")+(e.modifiers&&e.modifiers.sync?",true":"")+")"}},cloak:ei},zd=function(t){this.options=t,this.warn=t.warn||Al,this.transforms=Ol(t.modules,"transformCode"),this.dataGenFns=Ol(t.modules,"genData"),this.directives=Qr(Qr({},$d),t.directives);var e=t.isReservedTag||ni;this.maybeComponent=function(t){return!!t.component||!e(t.tag)},this.onceId=0,this.staticRenderFns=[],this.pre=!1};function Bd(t,e){var n=new zd(e);return{render:"with(this){return "+(t?Yd(t,n):'_c("div")')+"}",staticRenderFns:n.staticRenderFns}}function Yd(t,e){if(t.parent&&(t.pre=t.pre||t.parent.pre),t.staticRoot&&!t.staticProcessed)return Wd(t,e);if(t.once&&!t.onceProcessed)return Ud(t,e);if(t.for&&!t.forProcessed)return Vd(t,e);if(t.if&&!t.ifProcessed)return Hd(t,e);if("template"!==t.tag||t.slotTarget||e.pre){if("slot"===t.tag)return function(t,e){var n=t.slotName||'"default"',r=Zd(t,e),i="_t("+n+(r?","+r:""),o=t.attrs||t.dynamicAttrs?Qd((t.attrs||[]).concat(t.dynamicAttrs||[]).map(function(t){return{name:qr(t.name),value:t.value,dynamic:t.dynamic}})):null,a=t.attrsMap["v-bind"];!o&&!a||r||(i+=",null");o&&(i+=","+o);a&&(i+=(o?"":",null")+","+a);return i+")"}(t,e);var n;if(t.component)n=function(t,e,n){var r=e.inlineTemplate?null:Zd(e,n,!0);return"_c("+t+","+qd(e,n)+(r?","+r:"")+")"}(t.component,t,e);else{var r;(!t.plain||t.pre&&e.maybeComponent(t))&&(r=qd(t,e));var i=t.inlineTemplate?null:Zd(t,e,!0);n="_c('"+t.tag+"'"+(r?","+r:"")+(i?","+i:"")+")"}for(var o=0;o<e.transforms.length;o++)n=e.transforms[o](t,n);return n}return Zd(t,e)||"void 0"}function Wd(t,e){t.staticProcessed=!0;var n=e.pre;return t.pre&&(e.pre=t.pre),e.staticRenderFns.push("with(this){return "+Yd(t,e)+"}"),e.pre=n,"_m("+(e.staticRenderFns.length-1)+(t.staticInFor?",true":"")+")"}function Ud(t,e){if(t.onceProcessed=!0,t.if&&!t.ifProcessed)return Hd(t,e);if(t.staticInFor){for(var n="",r=t.parent;r;){if(r.for){n=r.key;break}r=r.parent}return n?"_o("+Yd(t,e)+","+e.onceId+++","+n+")":(e.warn("v-once can only be used inside v-for that is keyed. ",t.rawAttrsMap["v-once"]),Yd(t,e))}return Wd(t,e)}function Hd(t,e,n,r){return t.ifProcessed=!0,function t(e,n,r,i){if(!e.length)return i||"_e()";var o=e.shift();return o.exp?"("+o.exp+")?"+a(o.block)+":"+t(e,n,r,i):""+a(o.block);function a(t){return r?r(t,n):t.once?Ud(t,n):Yd(t,n)}}(t.ifConditions.slice(),e,n,r)}function Vd(t,e,n,r){var i=t.for,o=t.alias,a=t.iterator1?","+t.iterator1:"",s=t.iterator2?","+t.iterator2:"";return e.maybeComponent(t)&&"slot"!==t.tag&&"template"!==t.tag&&!t.key&&e.warn("<"+t.tag+' v-for="'+o+" in "+i+'">: component lists rendered with v-for should have explicit keys. See https://vuejs.org/guide/list.html#key for more info.',t.rawAttrsMap["v-for"],!0),t.forProcessed=!0,(r||"_l")+"(("+i+"),function("+o+a+s+"){return "+(n||Yd)(t,e)+"})"}function qd(t,e){var n="{",r=function(t,e){var n=t.directives;if(!n)return;var r,i,o,a,s="directives:[",l=!1;for(r=0,i=n.length;r<i;r++){o=n[r],a=!0;var u=e.directives[o.name];u&&(a=!!u(t,o,e.warn)),a&&(l=!0,s+='{name:"'+o.name+'",rawName:"'+o.rawName+'"'+(o.value?",value:("+o.value+"),expression:"+JSON.stringify(o.value):"")+(o.arg?",arg:"+(o.isDynamicArg?o.arg:'"'+o.arg+'"'):"")+(o.modifiers?",modifiers:"+JSON.stringify(o.modifiers):"")+"},")}if(l)return s.slice(0,-1)+"]"}(t,e);r&&(n+=r+","),t.key&&(n+="key:"+t.key+","),t.ref&&(n+="ref:"+t.ref+","),t.refInFor&&(n+="refInFor:true,"),t.pre&&(n+="pre:true,"),t.component&&(n+='tag:"'+t.tag+'",');for(var i=0;i<e.dataGenFns.length;i++)n+=e.dataGenFns[i](t);if(t.attrs&&(n+="attrs:"+Qd(t.attrs)+","),t.props&&(n+="domProps:"+Qd(t.props)+","),t.events&&(n+=Fd(t.events,!1)+","),t.nativeEvents&&(n+=Fd(t.nativeEvents,!0)+","),t.slotTarget&&!t.slotScope&&(n+="slot:"+t.slotTarget+","),t.scopedSlots&&(n+=function(t,e,n){var r=Object.keys(e).some(function(t){var n=e[t];return n.slotTargetDynamic||n.if||n.for||Gd(n)});if(!r)for(var i=t.parent;i;){if(i.slotScope&&i.slotScope!==dd){r=!0;break}i=i.parent}return"scopedSlots:_u(["+Object.keys(e).map(function(t){return Jd(e[t],n)}).join(",")+"]"+(r?",true":"")+")"}(t,t.scopedSlots,e)+","),t.model&&(n+="model:{value:"+t.model.value+",callback:"+t.model.callback+",expression:"+t.model.expression+"},"),t.inlineTemplate){var o=function(t,e){var n=t.children[0];1===t.children.length&&1===n.type||e.warn("Inline-template components must have exactly one child element.",{start:t.start});if(n&&1===n.type){var r=Bd(n,e.options);return"inlineTemplate:{render:function(){"+r.render+"},staticRenderFns:["+r.staticRenderFns.map(function(t){return"function(){"+t+"}"}).join(",")+"]}"}}(t,e);o&&(n+=o+",")}return n=n.replace(/,$/,"")+"}",t.dynamicAttrs&&(n="_b("+n+',"'+t.tag+'",'+Qd(t.dynamicAttrs)+")"),t.wrapData&&(n=t.wrapData(n)),t.wrapListeners&&(n=t.wrapListeners(n)),n}function Gd(t){return 1===t.type&&("slot"===t.tag||t.children.some(Gd))}function Jd(t,e){var n=t.attrsMap["slot-scope"];if(t.if&&!t.ifProcessed&&!n)return Hd(t,e,Jd,"null");if(t.for&&!t.forProcessed)return Vd(t,e,Jd);var r=t.slotScope===dd?"":String(t.slotScope),i="function("+r+"){return "+("template"===t.tag?t.if&&n?"("+t.if+")?"+(Zd(t,e)||"undefined")+":undefined":Zd(t,e)||"undefined":Yd(t,e))+"}",o=r?"":",proxy:true";return"{key:"+(t.slotTarget||'"default"')+",fn:"+i+o+"}"}function Zd(t,e,n,r,i){var o=t.children;if(o.length){var a=o[0];if(1===o.length&&a.for&&"template"!==a.tag&&"slot"!==a.tag){var s=n?e.maybeComponent(a)?",1":",0":"";return""+(r||Yd)(a,e)+s}var l=n?function(t,e){for(var n=0,r=0;r<t.length;r++){var i=t[r];if(1===i.type){if(Kd(i)||i.ifConditions&&i.ifConditions.some(function(t){return Kd(t.block)})){n=2;break}(e(i)||i.ifConditions&&i.ifConditions.some(function(t){return e(t.block)}))&&(n=1)}}return n}(o,e.maybeComponent):0,u=i||Xd;return"["+o.map(function(t){return u(t,e)}).join(",")+"]"+(l?","+l:"")}}function Kd(t){return void 0!==t.for||"template"===t.tag||"slot"===t.tag}function Xd(t,e){return 1===t.type?Yd(t,e):3===t.type&&t.isComment?(r=t,"_e("+JSON.stringify(r.text)+")"):"_v("+(2===(n=t).type?n.expression:tf(JSON.stringify(n.text)))+")";var n,r}function Qd(t){for(var e="",n="",r=0;r<t.length;r++){var i=t[r],o=tf(i.value);i.dynamic?n+=i.name+","+o+",":e+='"'+i.name+'":'+o+","}return e="{"+e.slice(0,-1)+"}",n?"_d("+e+",["+n.slice(0,-1)+"])":e}function tf(t){return t.replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}var ef=new RegExp("\\b"+"do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments".split(",").join("\\b|\\b")+"\\b"),nf=new RegExp("\\b"+"delete,typeof,void".split(",").join("\\s*\\([^\\)]*\\)|\\b")+"\\s*\\([^\\)]*\\)"),rf=/'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;function of(t,e){t&&function t(e,n){if(1===e.type){for(var r in e.attrsMap)if(Xc.test(r)){var i=e.attrsMap[r];if(i){var o=e.rawAttrsMap[r];"v-for"===r?sf(e,'v-for="'+i+'"',n,o):Kc.test(r)?af(i,r+'="'+i+'"',n,o):uf(i,r+'="'+i+'"',n,o)}}if(e.children)for(var a=0;a<e.children.length;a++)t(e.children[a],n)}else 2===e.type&&uf(e.expression,e.text,n,e)}(t,e)}function af(t,e,n,r){var i=t.replace(rf,""),o=i.match(nf);o&&"$"!==i.charAt(o.index-1)&&n('avoid using JavaScript unary operator as property name: "'+o[0]+'" in expression '+e.trim(),r),uf(t,e,n,r)}function sf(t,e,n,r){uf(t.for||"",e,n,r),lf(t.alias,"v-for alias",e,n,r),lf(t.iterator1,"v-for iterator",e,n,r),lf(t.iterator2,"v-for iterator",e,n,r)}function lf(t,e,n,r,i){if("string"==typeof t)try{new Function("var "+t+"=_")}catch(o){r("invalid "+e+' "'+t+'" in expression: '+n.trim(),i)}}function uf(t,e,n,r){try{new Function("return "+t)}catch(o){var i=t.replace(rf,"").match(ef);n(i?'avoid using JavaScript keyword as property name: "'+i[0]+'"\n  Raw expression: '+e.trim():"invalid expression: "+o.message+" in\n\n    "+t+"\n\n  Raw expression: "+e.trim()+"\n",r)}}var cf=2;function df(t,e){for(var n="";1&e&&(n+=t),!((e>>>=1)<=0);)t+=t;return n}function ff(t,e){try{return new Function(t)}catch(n){return e.push({err:n,code:t}),ei}}function hf(t){var e=Object.create(null);return function(n,r,i){var o=(r=Qr({},r)).warn||Li;delete r.warn;try{new Function("return 1")}catch(t){t.toString().match(/unsafe-eval|CSP/)&&o("It seems you are using the standalone build of Vue.js in an environment with Content Security Policy that prohibits unsafe-eval. The template compiler cannot work in this environment. Consider relaxing the policy to allow unsafe-eval or pre-compiling your templates into render functions.")}var a=r.delimiters?String(r.delimiters)+n:n;if(e[a])return e[a];var s=t(n,r);s.errors&&s.errors.length&&(r.outputSourceRange?s.errors.forEach(function(t){o("Error compiling template:\n\n"+t.msg+"\n\n"+function(t,e,n){void 0===e&&(e=0),void 0===n&&(n=t.length);for(var r=t.split(/\r?\n/),i=0,o=[],a=0;a<r.length;a++)if((i+=r[a].length+1)>=e){for(var s=a-cf;s<=a+cf||n>i;s++)if(!(s<0||s>=r.length)){o.push(""+(s+1)+df(" ",3-String(s+1).length)+"|  "+r[s]);var l=r[s].length;if(s===a){var u=e-(i-l)+1,c=n>i?l-u:n-e;o.push("   |  "+df(" ",u)+df("^",c))}else if(s>a){if(n>i){var d=Math.min(n-i,l);o.push("   |  "+df("^",d))}i+=l+1}}break}return o.join("\n")}(n,t.start,t.end),i)}):o("Error compiling template:\n\n"+n+"\n\n"+s.errors.map(function(t){return"- "+t}).join("\n")+"\n",i)),s.tips&&s.tips.length&&(r.outputSourceRange?s.tips.forEach(function(t){return Ei(t.msg,i)}):s.tips.forEach(function(t){return Ei(t,i)}));var l={},u=[];return l.render=ff(s.render,u),l.staticRenderFns=s.staticRenderFns.map(function(t){return ff(t,u)}),s.errors&&s.errors.length||!u.length||o("Failed to generate render function:\n\n"+u.map(function(t){var e=t.err,n=t.code;return e.toString()+" in\n\n"+n+"\n"}).join("\n"),i),e[a]=l}}var pf,vf,gf=(pf=function(t,e){var n=hd(t.trim(),e);!1!==e.optimize&&Od(n,e);var r=Bd(n,e);return{ast:n,render:r.render,staticRenderFns:r.staticRenderFns}},function(t){function e(e,n){var r=Object.create(t),i=[],o=[],a=function(t,e,n){(n?o:i).push(t)};if(n){if(n.outputSourceRange){var s=e.match(/^\s*/)[0].length;a=function(t,e,n){var r={msg:t};e&&(null!=e.start&&(r.start=e.start+s),null!=e.end&&(r.end=e.end+s)),(n?o:i).push(r)}}for(var l in n.modules&&(r.modules=(t.modules||[]).concat(n.modules)),n.directives&&(r.directives=Qr(Object.create(t.directives||null),n.directives)),n)"modules"!==l&&"directives"!==l&&(r[l]=n[l])}r.warn=a;var u=pf(e.trim(),r);return of(u.ast,a),u.errors=i,u.tips=o,u}return{compile:e,compileToFunctions:hf(e)}})(Cd).compileToFunctions;function mf(t){return(vf=vf||document.createElement("div")).innerHTML=t?'<a href="\n"/>':'<div a="\n"/>',vf.innerHTML.indexOf("&#10;")>0}var yf=!!mi&&mf(!1),bf=!!mi&&mf(!0),_f=Hr(function(t){var e=Zs(t);return e&&e.innerHTML}),wf=_s.prototype.$mount;_s.prototype.$mount=function(t,e){if((t=t&&Zs(t))===document.body||t===document.documentElement)return Li("Do not mount Vue to <html> or <body> - mount to normal elements instead."),this;var n=this.$options;if(!n.render){var r=n.template;if(r)if("string"==typeof r)"#"===r.charAt(0)&&((r=_f(r))||Li("Template element not found or is empty: "+n.template,this));else{if(!r.nodeType)return Li("invalid template option:"+r,this),this;r=r.innerHTML}else t&&(r=function(t){if(t.outerHTML)return t.outerHTML;var e=document.createElement("div");return e.appendChild(t.cloneNode(!0)),e.innerHTML}(t));if(r){ci.performance&&To&&To("compile");var i=gf(r,{outputSourceRange:!0,shouldDecodeNewlines:yf,shouldDecodeNewlinesForHref:bf,delimiters:n.delimiters,comments:n.comments},this),o=i.render,a=i.staticRenderFns;n.render=o,n.staticRenderFns=a,ci.performance&&To&&(To("compile end"),Po("vue "+this._name+" compile","compile","compile end"))}}return wf.call(this,t,e)},_s.compile=gf;var xf=function(t,e,n,r,i,o,a,s,l,u){"boolean"!=typeof a&&(l=s,s=a,a=!1);var c,d="function"==typeof n?n.options:n;if(t&&t.render&&(d.render=t.render,d.staticRenderFns=t.staticRenderFns,d._compiled=!0,i&&(d.functional=!0)),r&&(d._scopeId=r),o?(c=function(t){(t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),e&&e.call(this,l(t)),t&&t._registeredComponents&&t._registeredComponents.add(o)},d._ssrRegister=c):e&&(c=a?function(){e.call(this,u(this.$root.$options.shadowRoot))}:function(t){e.call(this,s(t))}),c)if(d.functional){var f=d.render;d.render=function(t,e){return c.call(e),f(t,e)}}else{var h=d.beforeCreate;d.beforeCreate=h?[].concat(h,c):[c]}return n},kf="undefined"!=typeof navigator&&/msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());var Sf=document.head||document.getElementsByTagName("head")[0],Mf={};var Cf=function(t){return function(t,e){return function(t,e){var n=kf?e.media||"default":t,r=Mf[n]||(Mf[n]={ids:new Set,styles:[]});if(!r.ids.has(t)){r.ids.add(t);var i=e.source;if(e.map&&(i+="\n/*# sourceURL="+e.map.sources[0]+" */",i+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(e.map))))+" */"),r.element||(r.element=document.createElement("style"),r.element.type="text/css",e.media&&r.element.setAttribute("media",e.media),Sf.appendChild(r.element)),"styleSheet"in r.element)r.styles.push(i),r.element.styleSheet.cssText=r.styles.filter(Boolean).join("\n");else{var o=r.ids.size-1,a=document.createTextNode(i),s=r.element.childNodes;s[o]&&r.element.removeChild(s[o]),s.length?r.element.insertBefore(a,s[o]):r.element.appendChild(a)}}}(t,e)}},Af={props:["options","value"],data:function(){return{selected:null}},mounted:function(){this.selected=this.value},watch:{value:function(t){this.selected=t}}},Of=function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",[n("select",{directives:[{name:"model",rawName:"v-model",value:t.selected,expression:"selected"}],staticClass:"select",on:{input:function(e){t.$emit("input",e.target.value)},change:function(e){var n=Array.prototype.filter.call(e.target.options,function(t){return t.selected}).map(function(t){return"_value"in t?t._value:t.value});t.selected=e.target.multiple?n:n[0]}}},t._l(t.options,function(e){return n("option",{key:e.value,domProps:{value:e.value}},[t._v("\n      "+t._s(e.text)+"\n    ")])}),0)])};Of._withStripped=!0;var Df=xf({render:Of,staticRenderFns:[]},function(t){t&&t("data-v-afd20650_0",{source:"\n\n\n\n\n\n\n\n\n\n",map:{version:3,sources:[],names:[],mappings:"",file:"select.vue"},media:void 0})},Af,void 0,!1,void 0,Cf,void 0),Tf=function(t,e){void 0===t&&(t={}),void 0===e&&(e={}),this.data=e,this.settings=t,this.init()};function Pf(t,e){if(e){var n=this.$data._chart,r=t.datasets.map(function(t){return t.label}),i=e.datasets.map(function(t){return t.label}),o=JSON.stringify(i);JSON.stringify(r)===o&&e.datasets.length===t.datasets.length?(t.datasets.forEach(function(t,r){var i=Object.keys(e.datasets[r]),o=Object.keys(t),a=i.filter(function(t){return"_meta"!==t&&-1===o.indexOf(t)});for(var s in a.forEach(function(t){delete n.data.datasets[r][t]}),t)t.hasOwnProperty(s)&&(n.data.datasets[r][s]=t[s])}),t.hasOwnProperty("labels")&&(n.data.labels=t.labels,this.$emit("labels:update")),t.hasOwnProperty("xLabels")&&(n.data.xLabels=t.xLabels,this.$emit("xlabels:update")),t.hasOwnProperty("yLabels")&&(n.data.yLabels=t.yLabels,this.$emit("ylabels:update")),n.update(),this.$emit("chart:update")):(n&&(n.destroy(),this.$emit("chart:destroy")),this.renderChart(this.chartData,this.options),this.$emit("chart:render"))}else this.$data._chart&&(this.$data._chart.destroy(),this.$emit("chart:destroy")),this.renderChart(this.chartData,this.options),this.$emit("chart:render")}Tf.prototype.init=function(){_s.component("nyco-select",Df),new _s({el:'[data-js="app"]',delimiters:["v{","}"],data:function(){return{options:Tf.data,selected:"all"}},methods:{}})},Tf.prototype._constants=function(t){console.dir(t)},Tf.data=[{text:"All Boroughs",value:"all"},{text:"Brooklyn",value:"brooklyn"},{text:"Queens",value:"queens"},{text:"Manhattan",value:"manhattan"},{text:"Staten Island",value:"staten island"},{text:"The Bronx",value:"bronx"}];var Rf,If={reactiveData:{data:function(){return{chartData:null}},watch:{chartData:Pf}},reactiveProp:{props:{chartData:{required:!0}},watch:{chartData:Pf}}},Lf={noop:function(){},uid:(Rf=0,function(){return Rf++}),isNullOrUndef:function(t){return null===t||void 0===t},isArray:Array.isArray?Array.isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)},isObject:function(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)},valueOrDefault:function(t,e){return void 0===t?e:t},valueAtIndexOrDefault:function(t,e,n){return Lf.valueOrDefault(Lf.isArray(t)?t[e]:t,n)},callback:function(t,e,n){if(t&&"function"==typeof t.call)return t.apply(n,e)},each:function(t,e,n,r){var i,o,a;if(Lf.isArray(t))if(o=t.length,r)for(i=o-1;i>=0;i--)e.call(n,t[i],i);else for(i=0;i<o;i++)e.call(n,t[i],i);else if(Lf.isObject(t))for(o=(a=Object.keys(t)).length,i=0;i<o;i++)e.call(n,t[a[i]],a[i])},arrayEquals:function(t,e){var n,r,i,o;if(!t||!e||t.length!==e.length)return!1;for(n=0,r=t.length;n<r;++n)if(i=t[n],o=e[n],i instanceof Array&&o instanceof Array){if(!Lf.arrayEquals(i,o))return!1}else if(i!==o)return!1;return!0},clone:function(t){if(Lf.isArray(t))return t.map(Lf.clone);if(Lf.isObject(t)){for(var e={},n=Object.keys(t),r=n.length,i=0;i<r;++i)e[n[i]]=Lf.clone(t[n[i]]);return e}return t},_merger:function(t,e,n,r){var i=e[t],o=n[t];Lf.isObject(i)&&Lf.isObject(o)?Lf.merge(i,o,r):e[t]=Lf.clone(o)},_mergerIf:function(t,e,n){var r=e[t],i=n[t];Lf.isObject(r)&&Lf.isObject(i)?Lf.mergeIf(r,i):e.hasOwnProperty(t)||(e[t]=Lf.clone(i))},merge:function(t,e,n){var r,i,o,a,s,l=Lf.isArray(e)?e:[e],u=l.length;if(!Lf.isObject(t))return t;for(r=(n=n||{}).merger||Lf._merger,i=0;i<u;++i)if(e=l[i],Lf.isObject(e))for(s=0,a=(o=Object.keys(e)).length;s<a;++s)r(o[s],t,e,n);return t},mergeIf:function(t,e){return Lf.merge(t,e,{merger:Lf._mergerIf})},extend:function(t){for(var e=arguments,n=function(e,n){t[n]=e},r=1,i=arguments.length;r<i;++r)Lf.each(e[r],n);return t},inherits:function(t){var e=this,n=t&&t.hasOwnProperty("constructor")?t.constructor:function(){return e.apply(this,arguments)},r=function(){this.constructor=n};return r.prototype=e.prototype,n.prototype=new r,n.extend=Lf.inherits,t&&Lf.extend(n.prototype,t),n.__super__=e.prototype,n}},Ef=Lf;Lf.callCallback=Lf.callback,Lf.indexOf=function(t,e,n){return Array.prototype.indexOf.call(t,e,n)},Lf.getValueOrDefault=Lf.valueOrDefault,Lf.getValueAtIndexOrDefault=Lf.valueAtIndexOrDefault;var Ff={linear:function(t){return t},easeInQuad:function(t){return t*t},easeOutQuad:function(t){return-t*(t-2)},easeInOutQuad:function(t){return(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1)},easeInCubic:function(t){return t*t*t},easeOutCubic:function(t){return(t-=1)*t*t+1},easeInOutCubic:function(t){return(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2)},easeInQuart:function(t){return t*t*t*t},easeOutQuart:function(t){return-((t-=1)*t*t*t-1)},easeInOutQuart:function(t){return(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2)},easeInQuint:function(t){return t*t*t*t*t},easeOutQuint:function(t){return(t-=1)*t*t*t*t+1},easeInOutQuint:function(t){return(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2)},easeInSine:function(t){return 1-Math.cos(t*(Math.PI/2))},easeOutSine:function(t){return Math.sin(t*(Math.PI/2))},easeInOutSine:function(t){return-.5*(Math.cos(Math.PI*t)-1)},easeInExpo:function(t){return 0===t?0:Math.pow(2,10*(t-1))},easeOutExpo:function(t){return 1===t?1:1-Math.pow(2,-10*t)},easeInOutExpo:function(t){return 0===t?0:1===t?1:(t/=.5)<1?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*--t))},easeInCirc:function(t){return t>=1?t:-(Math.sqrt(1-t*t)-1)},easeOutCirc:function(t){return Math.sqrt(1-(t-=1)*t)},easeInOutCirc:function(t){return(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)},easeInElastic:function(t){var e=1.70158,n=0,r=1;return 0===t?0:1===t?1:(n||(n=.3),r<1?(r=1,e=n/4):e=n/(2*Math.PI)*Math.asin(1/r),-r*Math.pow(2,10*(t-=1))*Math.sin((t-e)*(2*Math.PI)/n))},easeOutElastic:function(t){var e=1.70158,n=0,r=1;return 0===t?0:1===t?1:(n||(n=.3),r<1?(r=1,e=n/4):e=n/(2*Math.PI)*Math.asin(1/r),r*Math.pow(2,-10*t)*Math.sin((t-e)*(2*Math.PI)/n)+1)},easeInOutElastic:function(t){var e=1.70158,n=0,r=1;return 0===t?0:2==(t/=.5)?1:(n||(n=.45),r<1?(r=1,e=n/4):e=n/(2*Math.PI)*Math.asin(1/r),t<1?r*Math.pow(2,10*(t-=1))*Math.sin((t-e)*(2*Math.PI)/n)*-.5:r*Math.pow(2,-10*(t-=1))*Math.sin((t-e)*(2*Math.PI)/n)*.5+1)},easeInBack:function(t){var e=1.70158;return t*t*((e+1)*t-e)},easeOutBack:function(t){var e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack:function(t){var e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:function(t){return 1-Ff.easeOutBounce(1-t)},easeOutBounce:function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375},easeInOutBounce:function(t){return t<.5?.5*Ff.easeInBounce(2*t):.5*Ff.easeOutBounce(2*t-1)+.5}},jf={effects:Ff};Ef.easingEffects=Ff;"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;function Nf(){throw new Error("Dynamic requires are not currently supported by rollup-plugin-commonjs")}function $f(t,e){return t(e={exports:{}},e.exports),e.exports}var zf=$f(function(t){var e=t.exports={clear:function(t){t.ctx.clearRect(0,0,t.width,t.height)},roundedRect:function(t,e,n,r,i,o){if(o){var a=Math.min(o,i/2-1e-7,r/2-1e-7);t.moveTo(e+a,n),t.lineTo(e+r-a,n),t.arcTo(e+r,n,e+r,n+a,a),t.lineTo(e+r,n+i-a),t.arcTo(e+r,n+i,e+r-a,n+i,a),t.lineTo(e+a,n+i),t.arcTo(e,n+i,e,n+i-a,a),t.lineTo(e,n+a),t.arcTo(e,n,e+a,n,a),t.closePath(),t.moveTo(e,n)}else t.rect(e,n,r,i)},drawPoint:function(t,e,n,r,o,a){var s,l,u,c,d,f;if(a=a||0,!e||"object"!==(void 0===e?"undefined":i(e))||"[object HTMLImageElement]"!==(s=e.toString())&&"[object HTMLCanvasElement]"!==s){if(!(isNaN(n)||n<=0)){switch(t.save(),t.translate(r,o),t.rotate(a*Math.PI/180),t.beginPath(),e){default:t.arc(0,0,n,0,2*Math.PI),t.closePath();break;case"triangle":d=(l=3*n/Math.sqrt(3))*Math.sqrt(3)/2,t.moveTo(-l/2,d/3),t.lineTo(l/2,d/3),t.lineTo(0,-2*d/3),t.closePath();break;case"rect":f=1/Math.SQRT2*n,t.rect(-f,-f,2*f,2*f);break;case"rectRounded":var h=n/Math.SQRT2,p=-h,v=-h,g=Math.SQRT2*n;this.roundedRect(t,p,v,g,g,.425*n);break;case"rectRot":f=1/Math.SQRT2*n,t.moveTo(-f,0),t.lineTo(0,f),t.lineTo(f,0),t.lineTo(0,-f),t.closePath();break;case"cross":t.moveTo(0,n),t.lineTo(0,-n),t.moveTo(-n,0),t.lineTo(n,0);break;case"crossRot":u=Math.cos(Math.PI/4)*n,c=Math.sin(Math.PI/4)*n,t.moveTo(-u,-c),t.lineTo(u,c),t.moveTo(-u,c),t.lineTo(u,-c);break;case"star":t.moveTo(0,n),t.lineTo(0,-n),t.moveTo(-n,0),t.lineTo(n,0),u=Math.cos(Math.PI/4)*n,c=Math.sin(Math.PI/4)*n,t.moveTo(-u,-c),t.lineTo(u,c),t.moveTo(-u,c),t.lineTo(u,-c);break;case"line":t.moveTo(-n,0),t.lineTo(n,0);break;case"dash":t.moveTo(0,0),t.lineTo(n,0)}t.fill(),t.stroke(),t.restore()}}else t.drawImage(e,r-e.width/2,o-e.height/2,e.width,e.height)},clipArea:function(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()},unclipArea:function(t){t.restore()},lineTo:function(t,e,n,r){if(n.steppedLine)return"after"===n.steppedLine&&!r||"after"!==n.steppedLine&&r?t.lineTo(e.x,n.y):t.lineTo(n.x,e.y),void t.lineTo(n.x,n.y);n.tension?t.bezierCurveTo(r?e.controlPointPreviousX:e.controlPointNextX,r?e.controlPointPreviousY:e.controlPointNextY,r?n.controlPointNextX:n.controlPointPreviousX,r?n.controlPointNextY:n.controlPointPreviousY,n.x,n.y):t.lineTo(n.x,n.y)}};Ef.clear=e.clear,Ef.drawRoundedRectangle=function(t){t.beginPath(),e.roundedRect.apply(e,arguments)}}),Bf=(zf.clear,zf.roundedRect,zf.drawPoint,zf.clipArea,zf.unclipArea,zf.lineTo,Ef),Yf=jf,Wf=zf,Uf={toLineHeight:function(t,e){var n=(""+t).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);if(!n||"normal"===n[1])return 1.2*e;switch(t=+n[2],n[3]){case"px":return t;case"%":t/=100}return e*t},toPadding:function(t){var e,n,r,i;return Ef.isObject(t)?(e=+t.top||0,n=+t.right||0,r=+t.bottom||0,i=+t.left||0):e=n=r=i=+t||0,{top:e,right:n,bottom:r,left:i,height:e+r,width:i+n}},resolve:function(t,e,n){var r,i,o;for(r=0,i=t.length;r<i;++r)if(void 0!==(o=t[r])&&(void 0!==e&&"function"==typeof o&&(o=o(e)),void 0!==n&&Ef.isArray(o)&&(o=o[n]),void 0!==o))return o}};Bf.easing=Yf,Bf.canvas=Wf,Bf.options=Uf;var Hf={_set:function(t,e){return Bf.merge(this[t]||(this[t]={}),e)}};Hf._set("global",{responsive:!0,responsiveAnimationDuration:0,maintainAspectRatio:!0,events:["mousemove","mouseout","click","touchstart","touchmove"],hover:{onHover:null,mode:"nearest",intersect:!0,animationDuration:400},onClick:null,defaultColor:"rgba(0,0,0,0.1)",defaultFontColor:"#666",defaultFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",defaultFontSize:12,defaultFontStyle:"normal",showLines:!0,elements:{},layout:{padding:{top:0,right:0,bottom:0,left:0}}});var Vf={rgb2hsl:qf,rgb2hsv:Gf,rgb2hwb:Jf,rgb2cmyk:Zf,rgb2keyword:Kf,rgb2xyz:Xf,rgb2lab:Qf,rgb2lch:function(t){return sh(Qf(t))},hsl2rgb:th,hsl2hsv:function(t){var e=t[0],n=t[1]/100,r=t[2]/100;if(0===r)return[0,0,0];return[e,100*(2*(n*=(r*=2)<=1?r:2-r)/(r+n)),100*((r+n)/2)]},hsl2hwb:function(t){return Jf(th(t))},hsl2cmyk:function(t){return Zf(th(t))},hsl2keyword:function(t){return Kf(th(t))},hsv2rgb:eh,hsv2hsl:function(t){var e,n,r=t[0],i=t[1]/100,o=t[2]/100;return e=i*o,[r,100*(e=(e/=(n=(2-i)*o)<=1?n:2-n)||0),100*(n/=2)]},hsv2hwb:function(t){return Jf(eh(t))},hsv2cmyk:function(t){return Zf(eh(t))},hsv2keyword:function(t){return Kf(eh(t))},hwb2rgb:nh,hwb2hsl:function(t){return qf(nh(t))},hwb2hsv:function(t){return Gf(nh(t))},hwb2cmyk:function(t){return Zf(nh(t))},hwb2keyword:function(t){return Kf(nh(t))},cmyk2rgb:rh,cmyk2hsl:function(t){return qf(rh(t))},cmyk2hsv:function(t){return Gf(rh(t))},cmyk2hwb:function(t){return Jf(rh(t))},cmyk2keyword:function(t){return Kf(rh(t))},keyword2rgb:ch,keyword2hsl:function(t){return qf(ch(t))},keyword2hsv:function(t){return Gf(ch(t))},keyword2hwb:function(t){return Jf(ch(t))},keyword2cmyk:function(t){return Zf(ch(t))},keyword2lab:function(t){return Qf(ch(t))},keyword2xyz:function(t){return Xf(ch(t))},xyz2rgb:ih,xyz2lab:oh,xyz2lch:function(t){return sh(oh(t))},lab2xyz:ah,lab2rgb:lh,lab2lch:sh,lch2lab:uh,lch2xyz:function(t){return ah(uh(t))},lch2rgb:function(t){return lh(uh(t))}};function qf(t){var e,n,r=t[0]/255,i=t[1]/255,o=t[2]/255,a=Math.min(r,i,o),s=Math.max(r,i,o),l=s-a;return s==a?e=0:r==s?e=(i-o)/l:i==s?e=2+(o-r)/l:o==s&&(e=4+(r-i)/l),(e=Math.min(60*e,360))<0&&(e+=360),n=(a+s)/2,[e,100*(s==a?0:n<=.5?l/(s+a):l/(2-s-a)),100*n]}function Gf(t){var e,n,r=t[0],i=t[1],o=t[2],a=Math.min(r,i,o),s=Math.max(r,i,o),l=s-a;return n=0==s?0:l/s*1e3/10,s==a?e=0:r==s?e=(i-o)/l:i==s?e=2+(o-r)/l:o==s&&(e=4+(r-i)/l),(e=Math.min(60*e,360))<0&&(e+=360),[e,n,s/255*1e3/10]}function Jf(t){var e=t[0],n=t[1],r=t[2];return[qf(t)[0],100*(1/255*Math.min(e,Math.min(n,r))),100*(r=1-1/255*Math.max(e,Math.max(n,r)))]}function Zf(t){var e,n=t[0]/255,r=t[1]/255,i=t[2]/255;return[100*((1-n-(e=Math.min(1-n,1-r,1-i)))/(1-e)||0),100*((1-r-e)/(1-e)||0),100*((1-i-e)/(1-e)||0),100*e]}function Kf(t){return fh[JSON.stringify(t)]}function Xf(t){var e=t[0]/255,n=t[1]/255,r=t[2]/255;return[100*(.4124*(e=e>.04045?Math.pow((e+.055)/1.055,2.4):e/12.92)+.3576*(n=n>.04045?Math.pow((n+.055)/1.055,2.4):n/12.92)+.1805*(r=r>.04045?Math.pow((r+.055)/1.055,2.4):r/12.92)),100*(.2126*e+.7152*n+.0722*r),100*(.0193*e+.1192*n+.9505*r)]}function Qf(t){var e=Xf(t),n=e[0],r=e[1],i=e[2];return r/=100,i/=108.883,n=(n/=95.047)>.008856?Math.pow(n,1/3):7.787*n+16/116,[116*(r=r>.008856?Math.pow(r,1/3):7.787*r+16/116)-16,500*(n-r),200*(r-(i=i>.008856?Math.pow(i,1/3):7.787*i+16/116))]}function th(t){var e,n,r,i,o,a=t[0]/360,s=t[1]/100,l=t[2]/100;if(0==s)return[o=255*l,o,o];e=2*l-(n=l<.5?l*(1+s):l+s-l*s),i=[0,0,0];for(var u=0;u<3;u++)(r=a+1/3*-(u-1))<0&&r++,r>1&&r--,o=6*r<1?e+6*(n-e)*r:2*r<1?n:3*r<2?e+(n-e)*(2/3-r)*6:e,i[u]=255*o;return i}function eh(t){var e=t[0]/60,n=t[1]/100,r=t[2]/100,i=Math.floor(e)%6,o=e-Math.floor(e),a=255*r*(1-n),s=255*r*(1-n*o),l=255*r*(1-n*(1-o));r*=255;switch(i){case 0:return[r,l,a];case 1:return[s,r,a];case 2:return[a,r,l];case 3:return[a,s,r];case 4:return[l,a,r];case 5:return[r,a,s]}}function nh(t){var e,n,i,o,a=t[0]/360,s=t[1]/100,l=t[2]/100,u=s+l;switch(u>1&&(s/=u,l/=u),n=1-l,i=6*a-(e=Math.floor(6*a)),0!=(1&e)&&(i=1-i),o=s+i*(n-s),e){default:case 6:case 0:r=n,g=o,b=s;break;case 1:r=o,g=n,b=s;break;case 2:r=s,g=n,b=o;break;case 3:r=s,g=o,b=n;break;case 4:r=o,g=s,b=n;break;case 5:r=n,g=s,b=o}return[255*r,255*g,255*b]}function rh(t){var e=t[0]/100,n=t[1]/100,r=t[2]/100,i=t[3]/100;return[255*(1-Math.min(1,e*(1-i)+i)),255*(1-Math.min(1,n*(1-i)+i)),255*(1-Math.min(1,r*(1-i)+i))]}function ih(t){var e,n,r,i=t[0]/100,o=t[1]/100,a=t[2]/100;return n=-.9689*i+1.8758*o+.0415*a,r=.0557*i+-.204*o+1.057*a,e=(e=3.2406*i+-1.5372*o+-.4986*a)>.0031308?1.055*Math.pow(e,1/2.4)-.055:e*=12.92,n=n>.0031308?1.055*Math.pow(n,1/2.4)-.055:n*=12.92,r=r>.0031308?1.055*Math.pow(r,1/2.4)-.055:r*=12.92,[255*(e=Math.min(Math.max(0,e),1)),255*(n=Math.min(Math.max(0,n),1)),255*(r=Math.min(Math.max(0,r),1))]}function oh(t){var e=t[0],n=t[1],r=t[2];return n/=100,r/=108.883,e=(e/=95.047)>.008856?Math.pow(e,1/3):7.787*e+16/116,[116*(n=n>.008856?Math.pow(n,1/3):7.787*n+16/116)-16,500*(e-n),200*(n-(r=r>.008856?Math.pow(r,1/3):7.787*r+16/116))]}function ah(t){var e,n,r,i,o=t[0],a=t[1],s=t[2];return o<=8?i=(n=100*o/903.3)/100*7.787+16/116:(n=100*Math.pow((o+16)/116,3),i=Math.pow(n/100,1/3)),[e=e/95.047<=.008856?e=95.047*(a/500+i-16/116)/7.787:95.047*Math.pow(a/500+i,3),n,r=r/108.883<=.008859?r=108.883*(i-s/200-16/116)/7.787:108.883*Math.pow(i-s/200,3)]}function sh(t){var e,n=t[0],r=t[1],i=t[2];return(e=360*Math.atan2(i,r)/2/Math.PI)<0&&(e+=360),[n,Math.sqrt(r*r+i*i),e]}function lh(t){return ih(ah(t))}function uh(t){var e,n=t[0],r=t[1];return e=t[2]/360*2*Math.PI,[n,r*Math.cos(e),r*Math.sin(e)]}function ch(t){return dh[t]}var dh={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},fh={};for(var hh in dh)fh[JSON.stringify(dh[hh])]=hh;var ph=function(){return new bh};for(var vh in Vf){ph[vh+"Raw"]=function(t){return function(e){return"number"==typeof e&&(e=Array.prototype.slice.call(arguments)),Vf[t](e)}}(vh);var gh=/(\w+)2(\w+)/.exec(vh),mh=gh[1],yh=gh[2];(ph[mh]=ph[mh]||{})[yh]=ph[vh]=function(t){return function(e){"number"==typeof e&&(e=Array.prototype.slice.call(arguments));var n=Vf[t](e);if("string"==typeof n||void 0===n)return n;for(var r=0;r<n.length;r++)n[r]=Math.round(n[r]);return n}}(vh)}var bh=function(){this.convs={}};bh.prototype.routeSpace=function(t,e){var n=e[0];return void 0===n?this.getValues(t):("number"==typeof n&&(n=Array.prototype.slice.call(e)),this.setValues(t,n))},bh.prototype.setValues=function(t,e){return this.space=t,this.convs={},this.convs[t]=e,this},bh.prototype.getValues=function(t){var e=this.convs[t];if(!e){var n=this.space,r=this.convs[n];e=ph[n][t](r),this.convs[t]=e}return e},["rgb","hsl","hsv","cmyk","keyword"].forEach(function(t){bh.prototype[t]=function(e){return this.routeSpace(t,arguments)}});var _h=ph,wh={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},xh={getRgba:kh,getHsla:Sh,getRgb:function(t){var e=kh(t);return e&&e.slice(0,3)},getHsl:function(t){var e=Sh(t);return e&&e.slice(0,3)},getHwb:Mh,getAlpha:function(t){var e=kh(t);if(e)return e[3];if(e=Sh(t))return e[3];if(e=Mh(t))return e[3]},hexString:function(t,e){var e=void 0!==e&&3===t.length?e:t[3];return"#"+Th(t[0])+Th(t[1])+Th(t[2])+(e>=0&&e<1?Th(Math.round(255*e)):"")},rgbString:function(t,e){if(e<1||t[3]&&t[3]<1)return Ch(t,e);return"rgb("+t[0]+", "+t[1]+", "+t[2]+")"},rgbaString:Ch,percentString:function(t,e){if(e<1||t[3]&&t[3]<1)return Ah(t,e);var n=Math.round(t[0]/255*100),r=Math.round(t[1]/255*100),i=Math.round(t[2]/255*100);return"rgb("+n+"%, "+r+"%, "+i+"%)"},percentaString:Ah,hslString:function(t,e){if(e<1||t[3]&&t[3]<1)return Oh(t,e);return"hsl("+t[0]+", "+t[1]+"%, "+t[2]+"%)"},hslaString:Oh,hwbString:function(t,e){void 0===e&&(e=void 0!==t[3]?t[3]:1);return"hwb("+t[0]+", "+t[1]+"%, "+t[2]+"%"+(void 0!==e&&1!==e?", "+e:"")+")"},keyword:function(t){return Ph[t.slice(0,3)]}};function kh(t){if(t){var e=[0,0,0],n=1,r=t.match(/^#([a-fA-F0-9]{3,4})$/i),i="";if(r){i=(r=r[1])[3];for(var o=0;o<e.length;o++)e[o]=parseInt(r[o]+r[o],16);i&&(n=Math.round(parseInt(i+i,16)/255*100)/100)}else if(r=t.match(/^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i)){i=r[2],r=r[1];for(o=0;o<e.length;o++)e[o]=parseInt(r.slice(2*o,2*o+2),16);i&&(n=Math.round(parseInt(i,16)/255*100)/100)}else if(r=t.match(/^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)){for(o=0;o<e.length;o++)e[o]=parseInt(r[o+1]);n=parseFloat(r[4])}else if(r=t.match(/^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)){for(o=0;o<e.length;o++)e[o]=Math.round(2.55*parseFloat(r[o+1]));n=parseFloat(r[4])}else if(r=t.match(/(\w+)/)){if("transparent"==r[1])return[0,0,0,0];if(!(e=wh[r[1]]))return}for(o=0;o<e.length;o++)e[o]=Dh(e[o],0,255);return n=n||0==n?Dh(n,0,1):1,e[3]=n,e}}function Sh(t){if(t){var e=t.match(/^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/);if(e){var n=parseFloat(e[4]);return[Dh(parseInt(e[1]),0,360),Dh(parseFloat(e[2]),0,100),Dh(parseFloat(e[3]),0,100),Dh(isNaN(n)?1:n,0,1)]}}}function Mh(t){if(t){var e=t.match(/^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/);if(e){var n=parseFloat(e[4]);return[Dh(parseInt(e[1]),0,360),Dh(parseFloat(e[2]),0,100),Dh(parseFloat(e[3]),0,100),Dh(isNaN(n)?1:n,0,1)]}}}function Ch(t,e){return void 0===e&&(e=void 0!==t[3]?t[3]:1),"rgba("+t[0]+", "+t[1]+", "+t[2]+", "+e+")"}function Ah(t,e){return"rgba("+Math.round(t[0]/255*100)+"%, "+Math.round(t[1]/255*100)+"%, "+Math.round(t[2]/255*100)+"%, "+(e||t[3]||1)+")"}function Oh(t,e){return void 0===e&&(e=void 0!==t[3]?t[3]:1),"hsla("+t[0]+", "+t[1]+"%, "+t[2]+"%, "+e+")"}function Dh(t,e,n){return Math.min(Math.max(e,t),n)}function Th(t){var e=t.toString(16).toUpperCase();return e.length<2?"0"+e:e}var Ph={};for(var Rh in wh)Ph[wh[Rh]]=Rh;var Ih=function t(e){return e instanceof t?e:this instanceof t?(this.valid=!1,this.values={rgb:[0,0,0],hsl:[0,0,0],hsv:[0,0,0],hwb:[0,0,0],cmyk:[0,0,0,0],alpha:1},void("string"==typeof e?(n=xh.getRgba(e))?this.setValues("rgb",n):(n=xh.getHsla(e))?this.setValues("hsl",n):(n=xh.getHwb(e))&&this.setValues("hwb",n):"object"===(void 0===e?"undefined":i(e))&&(void 0!==(n=e).r||void 0!==n.red?this.setValues("rgb",n):void 0!==n.l||void 0!==n.lightness?this.setValues("hsl",n):void 0!==n.v||void 0!==n.value?this.setValues("hsv",n):void 0!==n.w||void 0!==n.whiteness?this.setValues("hwb",n):void 0===n.c&&void 0===n.cyan||this.setValues("cmyk",n)))):new t(e);var n};(Ih.prototype={isValid:function(){return this.valid},rgb:function(){return this.setSpace("rgb",arguments)},hsl:function(){return this.setSpace("hsl",arguments)},hsv:function(){return this.setSpace("hsv",arguments)},hwb:function(){return this.setSpace("hwb",arguments)},cmyk:function(){return this.setSpace("cmyk",arguments)},rgbArray:function(){return this.values.rgb},hslArray:function(){return this.values.hsl},hsvArray:function(){return this.values.hsv},hwbArray:function(){var t=this.values;return 1!==t.alpha?t.hwb.concat([t.alpha]):t.hwb},cmykArray:function(){return this.values.cmyk},rgbaArray:function(){var t=this.values;return t.rgb.concat([t.alpha])},hslaArray:function(){var t=this.values;return t.hsl.concat([t.alpha])},alpha:function(t){return void 0===t?this.values.alpha:(this.setValues("alpha",t),this)},red:function(t){return this.setChannel("rgb",0,t)},green:function(t){return this.setChannel("rgb",1,t)},blue:function(t){return this.setChannel("rgb",2,t)},hue:function(t){return t&&(t=(t%=360)<0?360+t:t),this.setChannel("hsl",0,t)},saturation:function(t){return this.setChannel("hsl",1,t)},lightness:function(t){return this.setChannel("hsl",2,t)},saturationv:function(t){return this.setChannel("hsv",1,t)},whiteness:function(t){return this.setChannel("hwb",1,t)},blackness:function(t){return this.setChannel("hwb",2,t)},value:function(t){return this.setChannel("hsv",2,t)},cyan:function(t){return this.setChannel("cmyk",0,t)},magenta:function(t){return this.setChannel("cmyk",1,t)},yellow:function(t){return this.setChannel("cmyk",2,t)},black:function(t){return this.setChannel("cmyk",3,t)},hexString:function(){return xh.hexString(this.values.rgb)},rgbString:function(){return xh.rgbString(this.values.rgb,this.values.alpha)},rgbaString:function(){return xh.rgbaString(this.values.rgb,this.values.alpha)},percentString:function(){return xh.percentString(this.values.rgb,this.values.alpha)},hslString:function(){return xh.hslString(this.values.hsl,this.values.alpha)},hslaString:function(){return xh.hslaString(this.values.hsl,this.values.alpha)},hwbString:function(){return xh.hwbString(this.values.hwb,this.values.alpha)},keyword:function(){return xh.keyword(this.values.rgb,this.values.alpha)},rgbNumber:function(){var t=this.values.rgb;return t[0]<<16|t[1]<<8|t[2]},luminosity:function(){for(var t=this.values.rgb,e=[],n=0;n<t.length;n++){var r=t[n]/255;e[n]=r<=.03928?r/12.92:Math.pow((r+.055)/1.055,2.4)}return.2126*e[0]+.7152*e[1]+.0722*e[2]},contrast:function(t){var e=this.luminosity(),n=t.luminosity();return e>n?(e+.05)/(n+.05):(n+.05)/(e+.05)},level:function(t){var e=this.contrast(t);return e>=7.1?"AAA":e>=4.5?"AA":""},dark:function(){var t=this.values.rgb;return(299*t[0]+587*t[1]+114*t[2])/1e3<128},light:function(){return!this.dark()},negate:function(){for(var t=[],e=0;e<3;e++)t[e]=255-this.values.rgb[e];return this.setValues("rgb",t),this},lighten:function(t){var e=this.values.hsl;return e[2]+=e[2]*t,this.setValues("hsl",e),this},darken:function(t){var e=this.values.hsl;return e[2]-=e[2]*t,this.setValues("hsl",e),this},saturate:function(t){var e=this.values.hsl;return e[1]+=e[1]*t,this.setValues("hsl",e),this},desaturate:function(t){var e=this.values.hsl;return e[1]-=e[1]*t,this.setValues("hsl",e),this},whiten:function(t){var e=this.values.hwb;return e[1]+=e[1]*t,this.setValues("hwb",e),this},blacken:function(t){var e=this.values.hwb;return e[2]+=e[2]*t,this.setValues("hwb",e),this},greyscale:function(){var t=this.values.rgb,e=.3*t[0]+.59*t[1]+.11*t[2];return this.setValues("rgb",[e,e,e]),this},clearer:function(t){var e=this.values.alpha;return this.setValues("alpha",e-e*t),this},opaquer:function(t){var e=this.values.alpha;return this.setValues("alpha",e+e*t),this},rotate:function(t){var e=this.values.hsl,n=(e[0]+t)%360;return e[0]=n<0?360+n:n,this.setValues("hsl",e),this},mix:function(t,e){var n=t,r=void 0===e?.5:e,i=2*r-1,o=this.alpha()-n.alpha(),a=((i*o==-1?i:(i+o)/(1+i*o))+1)/2,s=1-a;return this.rgb(a*this.red()+s*n.red(),a*this.green()+s*n.green(),a*this.blue()+s*n.blue()).alpha(this.alpha()*r+n.alpha()*(1-r))},toJSON:function(){return this.rgb()},clone:function(){var t,e,n=new Ih,r=this.values,i=n.values;for(var o in r)r.hasOwnProperty(o)&&(t=r[o],"[object Array]"===(e={}.toString.call(t))?i[o]=t.slice(0):"[object Number]"===e?i[o]=t:console.error("unexpected color value:",t));return n}}).spaces={rgb:["red","green","blue"],hsl:["hue","saturation","lightness"],hsv:["hue","saturation","value"],hwb:["hue","whiteness","blackness"],cmyk:["cyan","magenta","yellow","black"]},Ih.prototype.maxes={rgb:[255,255,255],hsl:[360,100,100],hsv:[360,100,100],hwb:[360,100,100],cmyk:[100,100,100,100]},Ih.prototype.getValues=function(t){for(var e=this.values,n={},r=0;r<t.length;r++)n[t.charAt(r)]=e[t][r];return 1!==e.alpha&&(n.a=e.alpha),n},Ih.prototype.setValues=function(t,e){var n,r,i=this.values,o=this.spaces,a=this.maxes,s=1;if(this.valid=!0,"alpha"===t)s=e;else if(e.length)i[t]=e.slice(0,t.length),s=e[t.length];else if(void 0!==e[t.charAt(0)]){for(n=0;n<t.length;n++)i[t][n]=e[t.charAt(n)];s=e.a}else if(void 0!==e[o[t][0]]){var l=o[t];for(n=0;n<t.length;n++)i[t][n]=e[l[n]];s=e.alpha}if(i.alpha=Math.max(0,Math.min(1,void 0===s?i.alpha:s)),"alpha"===t)return!1;for(n=0;n<t.length;n++)r=Math.max(0,Math.min(a[t][n],i[t][n])),i[t][n]=Math.round(r);for(var u in o)u!==t&&(i[u]=_h[t][u](i[t]));return!0},Ih.prototype.setSpace=function(t,e){var n=e[0];return void 0===n?this.getValues(t):("number"==typeof n&&(n=Array.prototype.slice.call(e)),this.setValues(t,n),this)},Ih.prototype.setChannel=function(t,e,n){var r=this.values[t];return void 0===n?r[e]:n===r[e]?this:(r[e]=n,this.setValues(t,r),this)},"undefined"!=typeof window&&(window.Color=Ih);var Lh=Ih;function Eh(t,e){return Bf.where(t,function(t){return t.position===e})}function Fh(t,e){t.forEach(function(t,e){return t._tmpIndex_=e,t}),t.sort(function(t,n){var r=e?n:t,i=e?t:n;return r.weight===i.weight?r._tmpIndex_-i._tmpIndex_:r.weight-i.weight}),t.forEach(function(t){delete t._tmpIndex_})}var jh={defaults:{},addBox:function(t,e){t.boxes||(t.boxes=[]),e.fullWidth=e.fullWidth||!1,e.position=e.position||"top",e.weight=e.weight||0,t.boxes.push(e)},removeBox:function(t,e){var n=t.boxes?t.boxes.indexOf(e):-1;-1!==n&&t.boxes.splice(n,1)},configure:function(t,e,n){for(var r,i=["fullWidth","position","weight"],o=i.length,a=0;a<o;++a)r=i[a],n.hasOwnProperty(r)&&(e[r]=n[r])},update:function(t,e,n){if(t){var r=t.options.layout||{},i=Bf.options.toPadding(r.padding),o=i.left,a=i.right,s=i.top,l=i.bottom,u=Eh(t.boxes,"left"),c=Eh(t.boxes,"right"),d=Eh(t.boxes,"top"),f=Eh(t.boxes,"bottom"),h=Eh(t.boxes,"chartArea");Fh(u,!0),Fh(c,!1),Fh(d,!0),Fh(f,!1);var p=e-o-a,v=n-s-l,g=v/2,m=(e-p/2)/(u.length+c.length),y=(n-g)/(d.length+f.length),b=p,_=v,w=[];Bf.each(u.concat(c,d,f),function(t){var e,n=t.isHorizontal();n?(e=t.update(t.fullWidth?p:b,y),_-=e.height):(e=t.update(m,_),b-=e.width),w.push({horizontal:n,minSize:e,box:t})});var x=0,k=0,S=0,M=0;Bf.each(d.concat(f),function(t){if(t.getPadding){var e=t.getPadding();x=Math.max(x,e.left),k=Math.max(k,e.right)}}),Bf.each(u.concat(c),function(t){if(t.getPadding){var e=t.getPadding();S=Math.max(S,e.top),M=Math.max(M,e.bottom)}});var C=o,A=a,O=s,D=l;Bf.each(u.concat(c),F),Bf.each(u,function(t){C+=t.width}),Bf.each(c,function(t){A+=t.width}),Bf.each(d.concat(f),F),Bf.each(d,function(t){O+=t.height}),Bf.each(f,function(t){D+=t.height}),Bf.each(u.concat(c),function(t){var e=Bf.findNextWhere(w,function(e){return e.box===t}),n={left:0,right:0,top:O,bottom:D};e&&t.update(e.minSize.width,_,n)}),C=o,A=a,O=s,D=l,Bf.each(u,function(t){C+=t.width}),Bf.each(c,function(t){A+=t.width}),Bf.each(d,function(t){O+=t.height}),Bf.each(f,function(t){D+=t.height});var T=Math.max(x-C,0);C+=T,A+=Math.max(k-A,0);var P=Math.max(S-O,0);O+=P,D+=Math.max(M-D,0);var R=n-O-D,I=e-C-A;I===b&&R===_||(Bf.each(u,function(t){t.height=R}),Bf.each(c,function(t){t.height=R}),Bf.each(d,function(t){t.fullWidth||(t.width=I)}),Bf.each(f,function(t){t.fullWidth||(t.width=I)}),_=R,b=I);var L=o+T,E=s+P;Bf.each(u.concat(d),j),L+=b,E+=_,Bf.each(c,j),Bf.each(f,j),t.chartArea={left:C,top:O,right:C+b,bottom:O+_},Bf.each(h,function(e){e.left=t.chartArea.left,e.top=t.chartArea.top,e.right=t.chartArea.right,e.bottom=t.chartArea.bottom,e.update(b,_)})}function F(t){var e=Bf.findNextWhere(w,function(e){return e.box===t});if(e)if(t.isHorizontal()){var n={left:Math.max(C,x),right:Math.max(A,k),top:0,bottom:0};t.update(t.fullWidth?p:b,v/2,n)}else t.update(e.minSize.width,_)}function j(t){t.isHorizontal()?(t.left=t.fullWidth?o:C,t.right=t.fullWidth?e-a:C+b,t.top=E,t.bottom=E+t.height,E=t.bottom):(t.left=L,t.right=L+t.width,t.top=O,t.bottom=O+_,L=t.right)}}},Nh={constructors:{},defaults:{},registerScaleType:function(t,e,n){this.constructors[t]=e,this.defaults[t]=Bf.clone(n)},getScaleConstructor:function(t){return this.constructors.hasOwnProperty(t)?this.constructors[t]:void 0},getScaleDefaults:function(t){return this.defaults.hasOwnProperty(t)?Bf.merge({},[Hf.scale,this.defaults[t]]):{}},updateScaleDefaults:function(t,e){this.defaults.hasOwnProperty(t)&&(this.defaults[t]=Bf.extend(this.defaults[t],e))},addScalesToLayout:function(t){Bf.each(t.scales,function(e){e.fullWidth=e.options.fullWidth,e.position=e.options.position,e.weight=e.options.weight,jh.addBox(t,e)})}};var $h=function(t){Bf.extend(this,t),this.initialize.apply(this,arguments)};Bf.extend($h.prototype,{initialize:function(){this.hidden=!1},pivot:function(){var t=this;return t._view||(t._view=Bf.clone(t._model)),t._start={},t},transition:function(t){var e=this,n=e._model,r=e._start,o=e._view;return n&&1!==t?(o||(o=e._view={}),r||(r=e._start={}),function(t,e,n,r){var o,a,s,l,u,c,d,f,h,p=Object.keys(n);for(o=0,a=p.length;o<a;++o)if(c=n[s=p[o]],e.hasOwnProperty(s)||(e[s]=c),(l=e[s])!==c&&"_"!==s[0]){if(t.hasOwnProperty(s)||(t[s]=l),u=t[s],(d=void 0===c?"undefined":i(c))===(void 0===u?"undefined":i(u)))if("string"===d){if((f=Lh(u)).valid&&(h=Lh(c)).valid){e[s]=h.mix(f,r).rgbString();continue}}else if("number"===d&&isFinite(u)&&isFinite(c)){e[s]=u+(c-u)*r;continue}e[s]=c}}(r,o,n,t),e):(e._view=n,e._start=null,e)},tooltipPosition:function(){return{x:this._model.x,y:this._model.y}},hasValue:function(){return Bf.isNumber(this._model.x)&&Bf.isNumber(this._model.y)}}),$h.extend=Bf.inherits;var zh=$h,Bh=$f(function(t){var e=t.exports=zh.extend({chart:null,currentStep:0,numSteps:60,easing:"",render:null,onAnimationProgress:null,onAnimationComplete:null});Object.defineProperty(e.prototype,"animationObject",{get:function(){return this}}),Object.defineProperty(e.prototype,"chartInstance",{get:function(){return this.chart},set:function(t){this.chart=t}})});Hf._set("global",{animation:{duration:1e3,easing:"easeOutQuart",onProgress:Bf.noop,onComplete:Bf.noop}});var Yh={frameDuration:17,animations:[],dropFrames:0,request:null,addAnimation:function(t,e,n,r){var i,o,a=this.animations;for(e.chart=t,r||(t.animating=!0),i=0,o=a.length;i<o;++i)if(a[i].chart===t)return void(a[i]=e);a.push(e),1===a.length&&this.requestAnimationFrame()},cancelAnimation:function(t){var e=Bf.findIndex(this.animations,function(e){return e.chart===t});-1!==e&&(this.animations.splice(e,1),t.animating=!1)},requestAnimationFrame:function(){var t=this;null===t.request&&(t.request=Bf.requestAnimFrame.call(window,function(){t.request=null,t.startDigest()}))},startDigest:function(){var t=this,e=Date.now(),n=0;t.dropFrames>1&&(n=Math.floor(t.dropFrames),t.dropFrames=t.dropFrames%1),t.advance(1+n);var r=Date.now();t.dropFrames+=(r-e)/t.frameDuration,t.animations.length>0&&t.requestAnimationFrame()},advance:function(t){for(var e,n,r=this.animations,i=0;i<r.length;)n=(e=r[i]).chart,e.currentStep=(e.currentStep||0)+t,e.currentStep=Math.min(e.currentStep,e.numSteps),Bf.callback(e.render,[n,e],n),Bf.callback(e.onAnimationProgress,[e],n),e.currentStep>=e.numSteps?(Bf.callback(e.onAnimationComplete,[e],n),n.animating=!1,r.splice(i,1)):++i}};Hf._set("global",{elements:{arc:{backgroundColor:Hf.global.defaultColor,borderColor:"#fff",borderWidth:2}}});var Wh=zh.extend({inLabelRange:function(t){var e=this._view;return!!e&&Math.pow(t-e.x,2)<Math.pow(e.radius+e.hoverRadius,2)},inRange:function(t,e){var n=this._view;if(n){for(var r=Bf.getAngleFromPoint(n,{x:t,y:e}),i=r.angle,o=r.distance,a=n.startAngle,s=n.endAngle;s<a;)s+=2*Math.PI;for(;i>s;)i-=2*Math.PI;for(;i<a;)i+=2*Math.PI;var l=i>=a&&i<=s,u=o>=n.innerRadius&&o<=n.outerRadius;return l&&u}return!1},getCenterPoint:function(){var t=this._view,e=(t.startAngle+t.endAngle)/2,n=(t.innerRadius+t.outerRadius)/2;return{x:t.x+Math.cos(e)*n,y:t.y+Math.sin(e)*n}},getArea:function(){var t=this._view;return Math.PI*((t.endAngle-t.startAngle)/(2*Math.PI))*(Math.pow(t.outerRadius,2)-Math.pow(t.innerRadius,2))},tooltipPosition:function(){var t=this._view,e=t.startAngle+(t.endAngle-t.startAngle)/2,n=(t.outerRadius-t.innerRadius)/2+t.innerRadius;return{x:t.x+Math.cos(e)*n,y:t.y+Math.sin(e)*n}},draw:function(){var t=this._chart.ctx,e=this._view,n=e.startAngle,r=e.endAngle;t.beginPath(),t.arc(e.x,e.y,e.outerRadius,n,r),t.arc(e.x,e.y,e.innerRadius,r,n,!0),t.closePath(),t.strokeStyle=e.borderColor,t.lineWidth=e.borderWidth,t.fillStyle=e.backgroundColor,t.fill(),t.lineJoin="bevel",e.borderWidth&&t.stroke()}}),Uh=Hf.global;Hf._set("global",{elements:{line:{tension:.4,backgroundColor:Uh.defaultColor,borderWidth:3,borderColor:Uh.defaultColor,borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",capBezierPoints:!0,fill:!0}}});var Hh=zh.extend({draw:function(){var t,e,n,r,i=this._view,o=this._chart.ctx,a=i.spanGaps,s=this._children.slice(),l=Uh.elements.line,u=-1;for(this._loop&&s.length&&s.push(s[0]),o.save(),o.lineCap=i.borderCapStyle||l.borderCapStyle,o.setLineDash&&o.setLineDash(i.borderDash||l.borderDash),o.lineDashOffset=i.borderDashOffset||l.borderDashOffset,o.lineJoin=i.borderJoinStyle||l.borderJoinStyle,o.lineWidth=i.borderWidth||l.borderWidth,o.strokeStyle=i.borderColor||Uh.defaultColor,o.beginPath(),u=-1,t=0;t<s.length;++t)e=s[t],n=Bf.previousItem(s,t),r=e._view,0===t?r.skip||(o.moveTo(r.x,r.y),u=t):(n=-1===u?n:s[u],r.skip||(u!==t-1&&!a||-1===u?o.moveTo(r.x,r.y):Bf.canvas.lineTo(o,n._view,e._view),u=t));o.stroke(),o.restore()}}),Vh=Hf.global.defaultColor;function qh(t){var e=this._view;return!!e&&Math.abs(t-e.x)<e.radius+e.hitRadius}Hf._set("global",{elements:{point:{radius:3,pointStyle:"circle",backgroundColor:Vh,borderColor:Vh,borderWidth:1,hitRadius:1,hoverRadius:4,hoverBorderWidth:1}}});var Gh=zh.extend({inRange:function(t,e){var n=this._view;return!!n&&Math.pow(t-n.x,2)+Math.pow(e-n.y,2)<Math.pow(n.hitRadius+n.radius,2)},inLabelRange:qh,inXRange:qh,inYRange:function(t){var e=this._view;return!!e&&Math.abs(t-e.y)<e.radius+e.hitRadius},getCenterPoint:function(){var t=this._view;return{x:t.x,y:t.y}},getArea:function(){return Math.PI*Math.pow(this._view.radius,2)},tooltipPosition:function(){var t=this._view;return{x:t.x,y:t.y,padding:t.radius+t.borderWidth}},draw:function(t){var e=this._view,n=this._model,r=this._chart.ctx,i=e.pointStyle,o=e.rotation,a=e.radius,s=e.x,l=e.y;e.skip||(void 0===t||n.x>=t.left&&1.01*t.right>=n.x&&n.y>=t.top&&1.01*t.bottom>=n.y)&&(r.strokeStyle=e.borderColor||Vh,r.lineWidth=Bf.valueOrDefault(e.borderWidth,Hf.global.elements.point.borderWidth),r.fillStyle=e.backgroundColor||Vh,Bf.canvas.drawPoint(r,i,a,s,l,o))}});function Jh(t){return void 0!==t._view.width}function Zh(t){var e,n,r,i,o=t._view;if(Jh(t)){var a=o.width/2;e=o.x-a,n=o.x+a,r=Math.min(o.y,o.base),i=Math.max(o.y,o.base)}else{var s=o.height/2;e=Math.min(o.x,o.base),n=Math.max(o.x,o.base),r=o.y-s,i=o.y+s}return{left:e,top:r,right:n,bottom:i}}Hf._set("global",{elements:{rectangle:{backgroundColor:Hf.global.defaultColor,borderColor:Hf.global.defaultColor,borderSkipped:"bottom",borderWidth:0}}});var Kh={},Xh=Wh,Qh=Hh,tp=Gh,ep=zh.extend({draw:function(){var t,e,n,r,i,o,a,s=this._chart.ctx,l=this._view,u=l.borderWidth;if(l.horizontal?(t=l.base,e=l.x,n=l.y-l.height/2,r=l.y+l.height/2,i=e>t?1:-1,o=1,a=l.borderSkipped||"left"):(t=l.x-l.width/2,e=l.x+l.width/2,n=l.y,i=1,o=(r=l.base)>n?1:-1,a=l.borderSkipped||"bottom"),u){var c=Math.min(Math.abs(t-e),Math.abs(n-r)),d=(u=u>c?c:u)/2,f=t+("left"!==a?d*i:0),h=e+("right"!==a?-d*i:0),p=n+("top"!==a?d*o:0),v=r+("bottom"!==a?-d*o:0);f!==h&&(n=p,r=v),p!==v&&(t=f,e=h)}s.beginPath(),s.fillStyle=l.backgroundColor,s.strokeStyle=l.borderColor,s.lineWidth=u;var g=[[t,r],[t,n],[e,n],[e,r]],m=["bottom","left","top","right"].indexOf(a,0);function y(t){return g[(m+t)%4]}-1===m&&(m=0);var b=y(0);s.moveTo(b[0],b[1]);for(var _=1;_<4;_++)b=y(_),s.lineTo(b[0],b[1]);s.fill(),u&&s.stroke()},height:function(){var t=this._view;return t.base-t.y},inRange:function(t,e){var n=!1;if(this._view){var r=Zh(this);n=t>=r.left&&t<=r.right&&e>=r.top&&e<=r.bottom}return n},inLabelRange:function(t,e){if(!this._view)return!1;var n=Zh(this);return Jh(this)?t>=n.left&&t<=n.right:e>=n.top&&e<=n.bottom},inXRange:function(t){var e=Zh(this);return t>=e.left&&t<=e.right},inYRange:function(t){var e=Zh(this);return t>=e.top&&t<=e.bottom},getCenterPoint:function(){var t,e,n=this._view;return Jh(this)?(t=n.x,e=(n.y+n.base)/2):(t=(n.x+n.base)/2,e=n.y),{x:t,y:e}},getArea:function(){var t=this._view;return t.width*Math.abs(t.y-t.base)},tooltipPosition:function(){var t=this._view;return{x:t.x,y:t.y}}});function np(t,e){return t.native?{x:t.x,y:t.y}:Bf.getRelativePosition(t,e)}function rp(t,e){var n,r,i,o,a;for(r=0,o=t.data.datasets.length;r<o;++r)if(t.isDatasetVisible(r))for(i=0,a=(n=t.getDatasetMeta(r)).data.length;i<a;++i){var s=n.data[i];s._view.skip||e(s)}}function ip(t,e){var n=[];return rp(t,function(t){t.inRange(e.x,e.y)&&n.push(t)}),n}function op(t,e,n,r){var i=Number.POSITIVE_INFINITY,o=[];return rp(t,function(t){if(!n||t.inRange(e.x,e.y)){var a=t.getCenterPoint(),s=r(e,a);s<i?(o=[t],i=s):s===i&&o.push(t)}}),o}function ap(t){var e=-1!==t.indexOf("x"),n=-1!==t.indexOf("y");return function(t,r){var i=e?Math.abs(t.x-r.x):0,o=n?Math.abs(t.y-r.y):0;return Math.sqrt(Math.pow(i,2)+Math.pow(o,2))}}function sp(t,e,n){var r=np(e,t);n.axis=n.axis||"x";var i=ap(n.axis),o=n.intersect?ip(t,r):op(t,r,!1,i),a=[];return o.length?(t.data.datasets.forEach(function(e,n){if(t.isDatasetVisible(n)){var r=t.getDatasetMeta(n).data[o[0]._index];r&&!r._view.skip&&a.push(r)}}),a):[]}Kh.Arc=Xh,Kh.Line=Qh,Kh.Point=tp,Kh.Rectangle=ep;var lp={modes:{single:function(t,e){var n=np(e,t),r=[];return rp(t,function(t){if(t.inRange(n.x,n.y))return r.push(t),r}),r.slice(0,1)},label:sp,index:sp,dataset:function(t,e,n){var r=np(e,t);n.axis=n.axis||"xy";var i=ap(n.axis),o=n.intersect?ip(t,r):op(t,r,!1,i);return o.length>0&&(o=t.getDatasetMeta(o[0]._datasetIndex).data),o},"x-axis":function(t,e){return sp(t,e,{intersect:!1})},point:function(t,e){return ip(t,np(e,t))},nearest:function(t,e,n){var r=np(e,t);n.axis=n.axis||"xy";var i=ap(n.axis),o=op(t,r,n.intersect,i);return o.length>1&&o.sort(function(t,e){var n=t.getArea()-e.getArea();return 0===n&&(n=t._datasetIndex-e._datasetIndex),n}),o.slice(0,1)},x:function(t,e,n){var r=np(e,t),i=[],o=!1;return rp(t,function(t){t.inXRange(r.x)&&i.push(t),t.inRange(r.x,r.y)&&(o=!0)}),n.intersect&&!o&&(i=[]),i},y:function(t,e,n){var r=np(e,t),i=[],o=!1;return rp(t,function(t){t.inYRange(r.y)&&i.push(t),t.inRange(r.x,r.y)&&(o=!0)}),n.intersect&&!o&&(i=[]),i}}},up="$chartjs",cp="chartjs-",dp=cp+"render-monitor",fp=cp+"render-animation",hp=["animationstart","webkitAnimationStart"],pp={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"};function vp(t,e){var n=Bf.getStyle(t,e),r=n&&n.match(/^(\d+)(\.\d+)?px$/);return r?Number(r[1]):void 0}var gp=!!function(){var t=!1;try{var e=Object.defineProperty({},"passive",{get:function(){t=!0}});window.addEventListener("e",null,e)}catch(t){}return t}()&&{passive:!0};function mp(t,e,n){t.addEventListener(e,n,gp)}function yp(t,e,n){t.removeEventListener(e,n,gp)}function bp(t,e,n,r,i){return{type:t,chart:e,native:i||null,x:void 0!==n?n:null,y:void 0!==r?r:null}}function _p(t,e,n){var r,i,o,a,s=t[up]||(t[up]={}),l=s.resizer=function(t){var e=document.createElement("div"),n=cp+"size-monitor",r="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;pointer-events:none;visibility:hidden;z-index:-1;";e.style.cssText=r,e.className=n,e.innerHTML='<div class="'+n+'-expand" style="'+r+'"><div style="position:absolute;width:1000000px;height:1000000px;left:0;top:0"></div></div><div class="'+n+'-shrink" style="'+r+'"><div style="position:absolute;width:200%;height:200%;left:0; top:0"></div></div>';var i=e.childNodes[0],o=e.childNodes[1];e._reset=function(){i.scrollLeft=1e6,i.scrollTop=1e6,o.scrollLeft=1e6,o.scrollTop=1e6};var a=function(){e._reset(),t()};return mp(i,"scroll",a.bind(i,"expand")),mp(o,"scroll",a.bind(o,"shrink")),e}((r=function(){if(s.resizer)return e(bp("resize",n))},o=!1,a=[],function(){a=Array.prototype.slice.call(arguments),i=i||this,o||(o=!0,Bf.requestAnimFrame.call(window,function(){o=!1,r.apply(i,a)}))}));!function(t,e){var n=t[up]||(t[up]={}),r=n.renderProxy=function(t){t.animationName===fp&&e()};Bf.each(hp,function(e){mp(t,e,r)}),n.reflow=!!t.offsetParent,t.classList.add(dp)}(t,function(){if(s.resizer){var e=t.parentNode;e&&e!==l.parentNode&&e.insertBefore(l,e.firstChild),l._reset()}})}function wp(t){var e=t[up]||{},n=e.resizer;delete e.resizer,function(t){var e=t[up]||{},n=e.renderProxy;n&&(Bf.each(hp,function(e){yp(t,e,n)}),delete e.renderProxy),t.classList.remove(dp)}(t),n&&n.parentNode&&n.parentNode.removeChild(n)}var xp={_enabled:"undefined"!=typeof window&&"undefined"!=typeof document,initialize:function(){var t,e,n,r="from{opacity:0.99}to{opacity:1}";e="@-webkit-keyframes "+fp+"{"+r+"}@keyframes "+fp+"{"+r+"}."+dp+"{-webkit-animation:"+fp+" 0.001s;animation:"+fp+" 0.001s;}",n=(t=this)._style||document.createElement("style"),t._style||(t._style=n,e="/* Chart.js */\n"+e,n.setAttribute("type","text/css"),document.getElementsByTagName("head")[0].appendChild(n)),n.appendChild(document.createTextNode(e))},acquireContext:function(t,e){"string"==typeof t?t=document.getElementById(t):t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas);var n=t&&t.getContext&&t.getContext("2d");return n&&n.canvas===t?(function(t,e){var n=t.style,r=t.getAttribute("height"),i=t.getAttribute("width");if(t[up]={initial:{height:r,width:i,style:{display:n.display,height:n.height,width:n.width}}},n.display=n.display||"block",null===i||""===i){var o=vp(t,"width");void 0!==o&&(t.width=o)}if(null===r||""===r)if(""===t.style.height)t.height=t.width/(e.options.aspectRatio||2);else{var a=vp(t,"height");void 0!==o&&(t.height=a)}}(t,e),n):null},releaseContext:function(t){var e=t.canvas;if(e[up]){var n=e[up].initial;["height","width"].forEach(function(t){var r=n[t];Bf.isNullOrUndef(r)?e.removeAttribute(t):e.setAttribute(t,r)}),Bf.each(n.style||{},function(t,n){e.style[n]=t}),e.width=e.width,delete e[up]}},addEventListener:function(t,e,n){var r=t.canvas;if("resize"!==e){var i=n[up]||(n[up]={});mp(r,e,(i.proxies||(i.proxies={}))[t.id+"_"+e]=function(e){n(function(t,e){var n=pp[t.type]||t.type,r=Bf.getRelativePosition(t,e);return bp(n,e,r.x,r.y,t)}(e,t))})}else _p(r,n,t)},removeEventListener:function(t,e,n){var r=t.canvas;if("resize"!==e){var i=((n[up]||{}).proxies||{})[t.id+"_"+e];i&&yp(r,e,i)}else wp(r)}};Bf.addEvent=mp,Bf.removeEvent=yp;var kp=xp._enabled?xp:{acquireContext:function(t){return t&&t.canvas&&(t=t.canvas),t&&t.getContext("2d")||null}},Sp=Bf.extend({initialize:function(){},acquireContext:function(){},releaseContext:function(){},addEventListener:function(){},removeEventListener:function(){}},kp);Hf._set("global",{plugins:{}});var Mp={_plugins:[],_cacheId:0,register:function(t){var e=this._plugins;[].concat(t).forEach(function(t){-1===e.indexOf(t)&&e.push(t)}),this._cacheId++},unregister:function(t){var e=this._plugins;[].concat(t).forEach(function(t){var n=e.indexOf(t);-1!==n&&e.splice(n,1)}),this._cacheId++},clear:function(){this._plugins=[],this._cacheId++},count:function(){return this._plugins.length},getAll:function(){return this._plugins},notify:function(t,e,n){var r,i,o,a,s,l=this.descriptors(t),u=l.length;for(r=0;r<u;++r)if("function"==typeof(s=(o=(i=l[r]).plugin)[e])&&((a=[t].concat(n||[])).push(i.options),!1===s.apply(o,a)))return!1;return!0},descriptors:function(t){var e=t.$plugins||(t.$plugins={});if(e.id===this._cacheId)return e.descriptors;var n=[],r=[],i=t&&t.config||{},o=i.options&&i.options.plugins||{};return this._plugins.concat(i.plugins||[]).forEach(function(t){if(-1===n.indexOf(t)){var e=t.id,i=o[e];!1!==i&&(!0===i&&(i=Bf.clone(Hf.global.plugins[e])),n.push(t),r.push({plugin:t,options:i||{}}))}}),e.descriptors=r,e.id=this._cacheId,r},_invalidate:function(t){delete t.$plugins}},Cp={formatters:{values:function(t){return Bf.isArray(t)?t:""+t},linear:function(t,e,n){var r=n.length>3?n[2]-n[1]:n[1]-n[0];Math.abs(r)>1&&t!==Math.floor(t)&&(r=t-Math.floor(t));var i=Bf.log10(Math.abs(r)),o="";if(0!==t)if(Math.max(Math.abs(n[0]),Math.abs(n[n.length-1]))<1e-4){var a=Bf.log10(Math.abs(t));o=t.toExponential(Math.floor(a)-Math.floor(i))}else{var s=-1*Math.floor(i);s=Math.max(Math.min(s,20),0),o=t.toFixed(s)}else o="0";return o},logarithmic:function(t,e,n){var r=t/Math.pow(10,Math.floor(Bf.log10(t)));return 0===t?"0":1===r||2===r||5===r||0===e||e===n.length-1?t.toExponential():""}}};function Ap(t){var e,n,r=[];for(e=0,n=t.length;e<n;++e)r.push(t[e].label);return r}function Op(t,e,n){var r=t.getPixelForTick(e);return n&&(r-=0===e?(t.getPixelForTick(1)-r)/2:(r-t.getPixelForTick(e-1))/2),r}function Dp(t,e,n){return Bf.isArray(e)?Bf.longestText(t,n,e):t.measureText(e).width}function Tp(t){var e=Bf.valueOrDefault,n=Hf.global,r=e(t.fontSize,n.defaultFontSize),i=e(t.fontStyle,n.defaultFontStyle),o=e(t.fontFamily,n.defaultFontFamily);return{size:r,style:i,family:o,font:Bf.fontString(r,i,o)}}function Pp(t){return Bf.options.toLineHeight(Bf.valueOrDefault(t.lineHeight,1.2),Bf.valueOrDefault(t.fontSize,Hf.global.defaultFontSize))}Hf._set("scale",{display:!0,position:"left",offset:!1,gridLines:{display:!0,color:"rgba(0, 0, 0, 0.1)",lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickMarkLength:10,zeroLineWidth:1,zeroLineColor:"rgba(0,0,0,0.25)",zeroLineBorderDash:[],zeroLineBorderDashOffset:0,offsetGridLines:!1,borderDash:[],borderDashOffset:0},scaleLabel:{display:!1,labelString:"",lineHeight:1.2,padding:{top:4,bottom:4}},ticks:{beginAtZero:!1,minRotation:0,maxRotation:50,mirror:!1,padding:0,reverse:!1,display:!0,autoSkip:!0,autoSkipPadding:0,labelOffset:0,callback:Cp.formatters.values,minor:{},major:{}}});var Rp=zh.extend({getPadding:function(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}},getTicks:function(){return this._ticks},mergeTicksOptions:function(){var t=this.options.ticks;for(var e in!1===t.minor&&(t.minor={display:!1}),!1===t.major&&(t.major={display:!1}),t)"major"!==e&&"minor"!==e&&(void 0===t.minor[e]&&(t.minor[e]=t[e]),void 0===t.major[e]&&(t.major[e]=t[e]))},beforeUpdate:function(){Bf.callback(this.options.beforeUpdate,[this])},update:function(t,e,n){var r,i,o,a,s,l,u=this;for(u.beforeUpdate(),u.maxWidth=t,u.maxHeight=e,u.margins=Bf.extend({left:0,right:0,top:0,bottom:0},n),u.longestTextCache=u.longestTextCache||{},u.beforeSetDimensions(),u.setDimensions(),u.afterSetDimensions(),u.beforeDataLimits(),u.determineDataLimits(),u.afterDataLimits(),u.beforeBuildTicks(),s=u.buildTicks()||[],u.afterBuildTicks(),u.beforeTickToLabelConversion(),o=u.convertTicksToLabels(s)||u.ticks,u.afterTickToLabelConversion(),u.ticks=o,r=0,i=o.length;r<i;++r)a=o[r],(l=s[r])?l.label=a:s.push(l={label:a,major:!1});return u._ticks=s,u.beforeCalculateTickRotation(),u.calculateTickRotation(),u.afterCalculateTickRotation(),u.beforeFit(),u.fit(),u.afterFit(),u.afterUpdate(),u.minSize},afterUpdate:function(){Bf.callback(this.options.afterUpdate,[this])},beforeSetDimensions:function(){Bf.callback(this.options.beforeSetDimensions,[this])},setDimensions:function(){var t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=0,t.right=t.width):(t.height=t.maxHeight,t.top=0,t.bottom=t.height),t.paddingLeft=0,t.paddingTop=0,t.paddingRight=0,t.paddingBottom=0},afterSetDimensions:function(){Bf.callback(this.options.afterSetDimensions,[this])},beforeDataLimits:function(){Bf.callback(this.options.beforeDataLimits,[this])},determineDataLimits:Bf.noop,afterDataLimits:function(){Bf.callback(this.options.afterDataLimits,[this])},beforeBuildTicks:function(){Bf.callback(this.options.beforeBuildTicks,[this])},buildTicks:Bf.noop,afterBuildTicks:function(){Bf.callback(this.options.afterBuildTicks,[this])},beforeTickToLabelConversion:function(){Bf.callback(this.options.beforeTickToLabelConversion,[this])},convertTicksToLabels:function(){var t=this.options.ticks;this.ticks=this.ticks.map(t.userCallback||t.callback,this)},afterTickToLabelConversion:function(){Bf.callback(this.options.afterTickToLabelConversion,[this])},beforeCalculateTickRotation:function(){Bf.callback(this.options.beforeCalculateTickRotation,[this])},calculateTickRotation:function(){var t=this,e=t.ctx,n=t.options.ticks,r=Ap(t._ticks),i=Tp(n);e.font=i.font;var o=n.minRotation||0;if(r.length&&t.options.display&&t.isHorizontal())for(var a,s=Bf.longestText(e,i.font,r,t.longestTextCache),l=s,u=t.getPixelForTick(1)-t.getPixelForTick(0)-6;l>u&&o<n.maxRotation;){var c=Bf.toRadians(o);if(a=Math.cos(c),Math.sin(c)*s>t.maxHeight){o--;break}o++,l=a*s}t.labelRotation=o},afterCalculateTickRotation:function(){Bf.callback(this.options.afterCalculateTickRotation,[this])},beforeFit:function(){Bf.callback(this.options.beforeFit,[this])},fit:function(){var t=this,e=t.minSize={width:0,height:0},n=Ap(t._ticks),r=t.options,i=r.ticks,o=r.scaleLabel,a=r.gridLines,s=r.display,l=t.isHorizontal(),u=Tp(i),c=r.gridLines.tickMarkLength;if(e.width=l?t.isFullWidth()?t.maxWidth-t.margins.left-t.margins.right:t.maxWidth:s&&a.drawTicks?c:0,e.height=l?s&&a.drawTicks?c:0:t.maxHeight,o.display&&s){var d=Pp(o)+Bf.options.toPadding(o.padding).height;l?e.height+=d:e.width+=d}if(i.display&&s){var f=Bf.longestText(t.ctx,u.font,n,t.longestTextCache),h=Bf.numberOfLabelLines(n),p=.5*u.size,v=t.options.ticks.padding;if(l){t.longestLabelWidth=f;var g=Bf.toRadians(t.labelRotation),m=Math.cos(g),y=Math.sin(g)*f+u.size*h+p*(h-1)+p;e.height=Math.min(t.maxHeight,e.height+y+v),t.ctx.font=u.font;var b=Dp(t.ctx,n[0],u.font),_=Dp(t.ctx,n[n.length-1],u.font);0!==t.labelRotation?(t.paddingLeft="bottom"===r.position?m*b+3:m*p+3,t.paddingRight="bottom"===r.position?m*p+3:m*_+3):(t.paddingLeft=b/2+3,t.paddingRight=_/2+3)}else i.mirror?f=0:f+=v+p,e.width=Math.min(t.maxWidth,e.width+f),t.paddingTop=u.size/2,t.paddingBottom=u.size/2}t.handleMargins(),t.width=e.width,t.height=e.height},handleMargins:function(){var t=this;t.margins&&(t.paddingLeft=Math.max(t.paddingLeft-t.margins.left,0),t.paddingTop=Math.max(t.paddingTop-t.margins.top,0),t.paddingRight=Math.max(t.paddingRight-t.margins.right,0),t.paddingBottom=Math.max(t.paddingBottom-t.margins.bottom,0))},afterFit:function(){Bf.callback(this.options.afterFit,[this])},isHorizontal:function(){return"top"===this.options.position||"bottom"===this.options.position},isFullWidth:function(){return this.options.fullWidth},getRightValue:function(t){if(Bf.isNullOrUndef(t))return NaN;if("number"==typeof t&&!isFinite(t))return NaN;if(t)if(this.isHorizontal()){if(void 0!==t.x)return this.getRightValue(t.x)}else if(void 0!==t.y)return this.getRightValue(t.y);return t},getLabelForIndex:Bf.noop,getPixelForValue:Bf.noop,getValueForPixel:Bf.noop,getPixelForTick:function(t){var e=this,n=e.options.offset;if(e.isHorizontal()){var r=(e.width-(e.paddingLeft+e.paddingRight))/Math.max(e._ticks.length-(n?0:1),1),i=r*t+e.paddingLeft;n&&(i+=r/2);var o=e.left+Math.round(i);return o+=e.isFullWidth()?e.margins.left:0}var a=e.height-(e.paddingTop+e.paddingBottom);return e.top+t*(a/(e._ticks.length-1))},getPixelForDecimal:function(t){var e=this;if(e.isHorizontal()){var n=(e.width-(e.paddingLeft+e.paddingRight))*t+e.paddingLeft,r=e.left+Math.round(n);return r+=e.isFullWidth()?e.margins.left:0}return e.top+t*e.height},getBasePixel:function(){return this.getPixelForValue(this.getBaseValue())},getBaseValue:function(){var t=this.min,e=this.max;return this.beginAtZero?0:t<0&&e<0?e:t>0&&e>0?t:0},_autoSkip:function(t){var e,n,r,i,o=this,a=o.isHorizontal(),s=o.options.ticks.minor,l=t.length,u=Bf.toRadians(o.labelRotation),c=Math.cos(u),d=o.longestLabelWidth*c,f=[];for(s.maxTicksLimit&&(i=s.maxTicksLimit),a&&(e=!1,(d+s.autoSkipPadding)*l>o.width-(o.paddingLeft+o.paddingRight)&&(e=1+Math.floor((d+s.autoSkipPadding)*l/(o.width-(o.paddingLeft+o.paddingRight)))),i&&l>i&&(e=Math.max(e,Math.floor(l/i)))),n=0;n<l;n++)r=t[n],(e>1&&n%e>0||n%e==0&&n+e>=l)&&n!==l-1&&delete r.label,f.push(r);return f},draw:function(t){var e=this,n=e.options;if(n.display){var r=e.ctx,i=Hf.global,o=n.ticks.minor,a=n.ticks.major||o,s=n.gridLines,l=n.scaleLabel,u=0!==e.labelRotation,c=e.isHorizontal(),d=o.autoSkip?e._autoSkip(e.getTicks()):e.getTicks(),f=Bf.valueOrDefault(o.fontColor,i.defaultFontColor),h=Tp(o),p=Bf.valueOrDefault(a.fontColor,i.defaultFontColor),v=Tp(a),g=s.drawTicks?s.tickMarkLength:0,m=Bf.valueOrDefault(l.fontColor,i.defaultFontColor),y=Tp(l),b=Bf.options.toPadding(l.padding),_=Bf.toRadians(e.labelRotation),w=[],x=e.options.gridLines.lineWidth,k="right"===n.position?e.left:e.right-x-g,S="right"===n.position?e.left+g:e.right,M="bottom"===n.position?e.top+x:e.bottom-g-x,C="bottom"===n.position?e.top+x+g:e.bottom+x;if(Bf.each(d,function(r,a){if(!Bf.isNullOrUndef(r.label)){var l,f,h,p,v,m,y,b,A,O,D,T,P,R,I=r.label;a===e.zeroLineIndex&&n.offset===s.offsetGridLines?(l=s.zeroLineWidth,f=s.zeroLineColor,h=s.zeroLineBorderDash,p=s.zeroLineBorderDashOffset):(l=Bf.valueAtIndexOrDefault(s.lineWidth,a),f=Bf.valueAtIndexOrDefault(s.color,a),h=Bf.valueOrDefault(s.borderDash,i.borderDash),p=Bf.valueOrDefault(s.borderDashOffset,i.borderDashOffset));var L="middle",E="middle",F=o.padding;if(c){var j=g+F;"bottom"===n.position?(E=u?"middle":"top",L=u?"right":"center",R=e.top+j):(E=u?"middle":"bottom",L=u?"left":"center",R=e.bottom-j);var N=Op(e,a,s.offsetGridLines&&d.length>1);N<e.left&&(f="rgba(0,0,0,0)"),N+=Bf.aliasPixel(l),P=e.getPixelForTick(a)+o.labelOffset,v=y=A=D=N,m=M,b=C,O=t.top,T=t.bottom+x}else{var $,z="left"===n.position;o.mirror?(L=z?"left":"right",$=F):(L=z?"right":"left",$=g+F),P=z?e.right-$:e.left+$;var B=Op(e,a,s.offsetGridLines&&d.length>1);B<e.top&&(f="rgba(0,0,0,0)"),B+=Bf.aliasPixel(l),R=e.getPixelForTick(a)+o.labelOffset,v=k,y=S,A=t.left,D=t.right+x,m=b=O=T=B}w.push({tx1:v,ty1:m,tx2:y,ty2:b,x1:A,y1:O,x2:D,y2:T,labelX:P,labelY:R,glWidth:l,glColor:f,glBorderDash:h,glBorderDashOffset:p,rotation:-1*_,label:I,major:r.major,textBaseline:E,textAlign:L})}}),Bf.each(w,function(t){if(s.display&&(r.save(),r.lineWidth=t.glWidth,r.strokeStyle=t.glColor,r.setLineDash&&(r.setLineDash(t.glBorderDash),r.lineDashOffset=t.glBorderDashOffset),r.beginPath(),s.drawTicks&&(r.moveTo(t.tx1,t.ty1),r.lineTo(t.tx2,t.ty2)),s.drawOnChartArea&&(r.moveTo(t.x1,t.y1),r.lineTo(t.x2,t.y2)),r.stroke(),r.restore()),o.display){r.save(),r.translate(t.labelX,t.labelY),r.rotate(t.rotation),r.font=t.major?v.font:h.font,r.fillStyle=t.major?p:f,r.textBaseline=t.textBaseline,r.textAlign=t.textAlign;var n=t.label;if(Bf.isArray(n))for(var i=n.length,a=1.5*h.size,l=e.isHorizontal()?0:-a*(i-1)/2,u=0;u<i;++u)r.fillText(""+n[u],0,l),l+=a;else r.fillText(n,0,0);r.restore()}}),l.display){var A,O,D=0,T=Pp(l)/2;if(c)A=e.left+(e.right-e.left)/2,O="bottom"===n.position?e.bottom-T-b.bottom:e.top+T+b.top;else{var P="left"===n.position;A=P?e.left+T+b.top:e.right-T-b.top,O=e.top+(e.bottom-e.top)/2,D=P?-.5*Math.PI:.5*Math.PI}r.save(),r.translate(A,O),r.rotate(D),r.textAlign="center",r.textBaseline="middle",r.fillStyle=m,r.font=y.font,r.fillText(l.labelString,0,0),r.restore()}if(s.drawBorder){r.lineWidth=Bf.valueAtIndexOrDefault(s.lineWidth,0),r.strokeStyle=Bf.valueAtIndexOrDefault(s.color,0);var R=e.left,I=e.right+x,L=e.top,E=e.bottom+x,F=Bf.aliasPixel(r.lineWidth);c?(L=E="top"===n.position?e.bottom:e.top,L+=F,E+=F):(R=I="left"===n.position?e.right:e.left,R+=F,I+=F),r.beginPath(),r.moveTo(R,L),r.lineTo(I,E),r.stroke()}}}}),Ip=$f(function(t){Hf._set("global",{tooltips:{enabled:!0,custom:null,mode:"nearest",position:"average",intersect:!0,backgroundColor:"rgba(0,0,0,0.8)",titleFontStyle:"bold",titleSpacing:2,titleMarginBottom:6,titleFontColor:"#fff",titleAlign:"left",bodySpacing:2,bodyFontColor:"#fff",bodyAlign:"left",footerFontStyle:"bold",footerSpacing:2,footerMarginTop:6,footerFontColor:"#fff",footerAlign:"left",yPadding:6,xPadding:6,caretPadding:2,caretSize:5,cornerRadius:6,multiKeyBackground:"#fff",displayColors:!0,borderColor:"rgba(0,0,0,0)",borderWidth:0,callbacks:{beforeTitle:Bf.noop,title:function(t,e){var n="",r=e.labels,i=r?r.length:0;if(t.length>0){var o=t[0];o.xLabel?n=o.xLabel:i>0&&o.index<i&&(n=r[o.index])}return n},afterTitle:Bf.noop,beforeBody:Bf.noop,beforeLabel:Bf.noop,label:function(t,e){var n=e.datasets[t.datasetIndex].label||"";return n&&(n+=": "),n+=t.yLabel,n},labelColor:function(t,e){var n=e.getDatasetMeta(t.datasetIndex).data[t.index]._view;return{borderColor:n.borderColor,backgroundColor:n.backgroundColor}},labelTextColor:function(){return this._options.bodyFontColor},afterLabel:Bf.noop,afterBody:Bf.noop,beforeFooter:Bf.noop,footer:Bf.noop,afterFooter:Bf.noop}}});var e={average:function(t){if(!t.length)return!1;var e,n,r=0,i=0,o=0;for(e=0,n=t.length;e<n;++e){var a=t[e];if(a&&a.hasValue()){var s=a.tooltipPosition();r+=s.x,i+=s.y,++o}}return{x:Math.round(r/o),y:Math.round(i/o)}},nearest:function(t,e){var n,r,i,o=e.x,a=e.y,s=Number.POSITIVE_INFINITY;for(n=0,r=t.length;n<r;++n){var l=t[n];if(l&&l.hasValue()){var u=l.getCenterPoint(),c=Bf.distanceBetweenPoints(e,u);c<s&&(s=c,i=l)}}if(i){var d=i.tooltipPosition();o=d.x,a=d.y}return{x:o,y:a}}};function n(t,e){var n=Bf.color(t);return n.alpha(e*n.alpha()).rgbaString()}function r(t,e){return e&&(Bf.isArray(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function i(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function o(t){var e=Hf.global,n=Bf.valueOrDefault;return{xPadding:t.xPadding,yPadding:t.yPadding,xAlign:t.xAlign,yAlign:t.yAlign,bodyFontColor:t.bodyFontColor,_bodyFontFamily:n(t.bodyFontFamily,e.defaultFontFamily),_bodyFontStyle:n(t.bodyFontStyle,e.defaultFontStyle),_bodyAlign:t.bodyAlign,bodyFontSize:n(t.bodyFontSize,e.defaultFontSize),bodySpacing:t.bodySpacing,titleFontColor:t.titleFontColor,_titleFontFamily:n(t.titleFontFamily,e.defaultFontFamily),_titleFontStyle:n(t.titleFontStyle,e.defaultFontStyle),titleFontSize:n(t.titleFontSize,e.defaultFontSize),_titleAlign:t.titleAlign,titleSpacing:t.titleSpacing,titleMarginBottom:t.titleMarginBottom,footerFontColor:t.footerFontColor,_footerFontFamily:n(t.footerFontFamily,e.defaultFontFamily),_footerFontStyle:n(t.footerFontStyle,e.defaultFontStyle),footerFontSize:n(t.footerFontSize,e.defaultFontSize),_footerAlign:t.footerAlign,footerSpacing:t.footerSpacing,footerMarginTop:t.footerMarginTop,caretSize:t.caretSize,cornerRadius:t.cornerRadius,backgroundColor:t.backgroundColor,opacity:0,legendColorBackground:t.multiKeyBackground,displayColors:t.displayColors,borderColor:t.borderColor,borderWidth:t.borderWidth}}function a(t){return r([],i(t))}(t.exports=zh.extend({initialize:function(){this._model=o(this._options),this._lastActive=[]},getTitle:function(){var t=this._options.callbacks,e=t.beforeTitle.apply(this,arguments),n=t.title.apply(this,arguments),o=t.afterTitle.apply(this,arguments),a=[];return a=r(a=r(a=r(a,i(e)),i(n)),i(o))},getBeforeBody:function(){return a(this._options.callbacks.beforeBody.apply(this,arguments))},getBody:function(t,e){var n=this,o=n._options.callbacks,a=[];return Bf.each(t,function(t){var s={before:[],lines:[],after:[]};r(s.before,i(o.beforeLabel.call(n,t,e))),r(s.lines,o.label.call(n,t,e)),r(s.after,i(o.afterLabel.call(n,t,e))),a.push(s)}),a},getAfterBody:function(){return a(this._options.callbacks.afterBody.apply(this,arguments))},getFooter:function(){var t=this._options.callbacks,e=t.beforeFooter.apply(this,arguments),n=t.footer.apply(this,arguments),o=t.afterFooter.apply(this,arguments),a=[];return a=r(a=r(a=r(a,i(e)),i(n)),i(o))},update:function(t){var n,r,i,a,s,l,u,c=this,d=c._options,f=c._model,h=c._model=o(d),p=c._active,v=c._data,g={xAlign:f.xAlign,yAlign:f.yAlign},m={x:f.x,y:f.y},y={width:f.width,height:f.height},b={x:f.caretX,y:f.caretY};if(p.length){h.opacity=1;var _=[],w=[];b=e[d.position].call(c,p,c._eventPosition);var x=[];for(n=0,r=p.length;n<r;++n)x.push((i=p[n],a=void 0,s=void 0,void 0,void 0,a=i._xScale,s=i._yScale||i._scale,l=i._index,u=i._datasetIndex,{xLabel:a?a.getLabelForIndex(l,u):"",yLabel:s?s.getLabelForIndex(l,u):"",index:l,datasetIndex:u,x:i._model.x,y:i._model.y}));d.filter&&(x=x.filter(function(t){return d.filter(t,v)})),d.itemSort&&(x=x.sort(function(t,e){return d.itemSort(t,e,v)})),Bf.each(x,function(t){_.push(d.callbacks.labelColor.call(c,t,c._chart)),w.push(d.callbacks.labelTextColor.call(c,t,c._chart))}),h.title=c.getTitle(x,v),h.beforeBody=c.getBeforeBody(x,v),h.body=c.getBody(x,v),h.afterBody=c.getAfterBody(x,v),h.footer=c.getFooter(x,v),h.x=Math.round(b.x),h.y=Math.round(b.y),h.caretPadding=d.caretPadding,h.labelColors=_,h.labelTextColors=w,h.dataPoints=x,m=function(t,e,n,r){var i=t.x,o=t.y,a=t.caretSize,s=t.caretPadding,l=t.cornerRadius,u=n.xAlign,c=n.yAlign,d=a+s,f=l+s;return"right"===u?i-=e.width:"center"===u&&((i-=e.width/2)+e.width>r.width&&(i=r.width-e.width),i<0&&(i=0)),"top"===c?o+=d:o-="bottom"===c?e.height+d:e.height/2,"center"===c?"left"===u?i+=d:"right"===u&&(i-=d):"left"===u?i-=f:"right"===u&&(i+=f),{x:i,y:o}}(h,y=function(t,e){var n=t._chart.ctx,r=2*e.yPadding,i=0,o=e.body,a=o.reduce(function(t,e){return t+e.before.length+e.lines.length+e.after.length},0);a+=e.beforeBody.length+e.afterBody.length;var s=e.title.length,l=e.footer.length,u=e.titleFontSize,c=e.bodyFontSize,d=e.footerFontSize;r+=s*u,r+=s?(s-1)*e.titleSpacing:0,r+=s?e.titleMarginBottom:0,r+=a*c,r+=a?(a-1)*e.bodySpacing:0,r+=l?e.footerMarginTop:0,r+=l*d,r+=l?(l-1)*e.footerSpacing:0;var f=0,h=function(t){i=Math.max(i,n.measureText(t).width+f)};return n.font=Bf.fontString(u,e._titleFontStyle,e._titleFontFamily),Bf.each(e.title,h),n.font=Bf.fontString(c,e._bodyFontStyle,e._bodyFontFamily),Bf.each(e.beforeBody.concat(e.afterBody),h),f=e.displayColors?c+2:0,Bf.each(o,function(t){Bf.each(t.before,h),Bf.each(t.lines,h),Bf.each(t.after,h)}),f=0,n.font=Bf.fontString(d,e._footerFontStyle,e._footerFontFamily),Bf.each(e.footer,h),{width:i+=2*e.xPadding,height:r}}(this,h),g=function(t,e){var n,r,i,o,a,s=t._model,l=t._chart,u=t._chart.chartArea,c="center",d="center";s.y<e.height?d="top":s.y>l.height-e.height&&(d="bottom");var f=(u.left+u.right)/2,h=(u.top+u.bottom)/2;"center"===d?(n=function(t){return t<=f},r=function(t){return t>f}):(n=function(t){return t<=e.width/2},r=function(t){return t>=l.width-e.width/2}),i=function(t){return t+e.width+s.caretSize+s.caretPadding>l.width},o=function(t){return t-e.width-s.caretSize-s.caretPadding<0},a=function(t){return t<=h?"top":"bottom"},n(s.x)?(c="left",i(s.x)&&(c="center",d=a(s.y))):r(s.x)&&(c="right",o(s.x)&&(c="center",d=a(s.y)));var p=t._options;return{xAlign:p.xAlign?p.xAlign:c,yAlign:p.yAlign?p.yAlign:d}}(this,y),c._chart)}else h.opacity=0;return h.xAlign=g.xAlign,h.yAlign=g.yAlign,h.x=m.x,h.y=m.y,h.width=y.width,h.height=y.height,h.caretX=b.x,h.caretY=b.y,c._model=h,t&&d.custom&&d.custom.call(c,h),c},drawCaret:function(t,e){var n=this._chart.ctx,r=this._view,i=this.getCaretPosition(t,e,r);n.lineTo(i.x1,i.y1),n.lineTo(i.x2,i.y2),n.lineTo(i.x3,i.y3)},getCaretPosition:function(t,e,n){var r,i,o,a,s,l,u=n.caretSize,c=n.cornerRadius,d=n.xAlign,f=n.yAlign,h=t.x,p=t.y,v=e.width,g=e.height;if("center"===f)s=p+g/2,"left"===d?(i=(r=h)-u,o=r,a=s+u,l=s-u):(i=(r=h+v)+u,o=r,a=s-u,l=s+u);else if("left"===d?(r=(i=h+c+u)-u,o=i+u):"right"===d?(r=(i=h+v-c-u)-u,o=i+u):(r=(i=n.caretX)-u,o=i+u),"top"===f)s=(a=p)-u,l=a;else{s=(a=p+g)+u,l=a;var m=o;o=r,r=m}return{x1:r,x2:i,x3:o,y1:a,y2:s,y3:l}},drawTitle:function(t,e,r,i){var o=e.title;if(o.length){r.textAlign=e._titleAlign,r.textBaseline="top";var a,s,l=e.titleFontSize,u=e.titleSpacing;for(r.fillStyle=n(e.titleFontColor,i),r.font=Bf.fontString(l,e._titleFontStyle,e._titleFontFamily),a=0,s=o.length;a<s;++a)r.fillText(o[a],t.x,t.y),t.y+=l+u,a+1===o.length&&(t.y+=e.titleMarginBottom-u)}},drawBody:function(t,e,r,i){var o=e.bodyFontSize,a=e.bodySpacing,s=e.body;r.textAlign=e._bodyAlign,r.textBaseline="top",r.font=Bf.fontString(o,e._bodyFontStyle,e._bodyFontFamily);var l=0,u=function(e){r.fillText(e,t.x+l,t.y),t.y+=o+a};r.fillStyle=n(e.bodyFontColor,i),Bf.each(e.beforeBody,u);var c=e.displayColors;l=c?o+2:0,Bf.each(s,function(a,s){var l=n(e.labelTextColors[s],i);r.fillStyle=l,Bf.each(a.before,u),Bf.each(a.lines,function(a){c&&(r.fillStyle=n(e.legendColorBackground,i),r.fillRect(t.x,t.y,o,o),r.lineWidth=1,r.strokeStyle=n(e.labelColors[s].borderColor,i),r.strokeRect(t.x,t.y,o,o),r.fillStyle=n(e.labelColors[s].backgroundColor,i),r.fillRect(t.x+1,t.y+1,o-2,o-2),r.fillStyle=l),u(a)}),Bf.each(a.after,u)}),l=0,Bf.each(e.afterBody,u),t.y-=a},drawFooter:function(t,e,r,i){var o=e.footer;o.length&&(t.y+=e.footerMarginTop,r.textAlign=e._footerAlign,r.textBaseline="top",r.fillStyle=n(e.footerFontColor,i),r.font=Bf.fontString(e.footerFontSize,e._footerFontStyle,e._footerFontFamily),Bf.each(o,function(n){r.fillText(n,t.x,t.y),t.y+=e.footerFontSize+e.footerSpacing}))},drawBackground:function(t,e,r,i,o){r.fillStyle=n(e.backgroundColor,o),r.strokeStyle=n(e.borderColor,o),r.lineWidth=e.borderWidth;var a=e.xAlign,s=e.yAlign,l=t.x,u=t.y,c=i.width,d=i.height,f=e.cornerRadius;r.beginPath(),r.moveTo(l+f,u),"top"===s&&this.drawCaret(t,i),r.lineTo(l+c-f,u),r.quadraticCurveTo(l+c,u,l+c,u+f),"center"===s&&"right"===a&&this.drawCaret(t,i),r.lineTo(l+c,u+d-f),r.quadraticCurveTo(l+c,u+d,l+c-f,u+d),"bottom"===s&&this.drawCaret(t,i),r.lineTo(l+f,u+d),r.quadraticCurveTo(l,u+d,l,u+d-f),"center"===s&&"left"===a&&this.drawCaret(t,i),r.lineTo(l,u+f),r.quadraticCurveTo(l,u,l+f,u),r.closePath(),r.fill(),e.borderWidth>0&&r.stroke()},draw:function(){var t=this._chart.ctx,e=this._view;if(0!==e.opacity){var n={width:e.width,height:e.height},r={x:e.x,y:e.y},i=Math.abs(e.opacity<.001)?0:e.opacity,o=e.title.length||e.beforeBody.length||e.body.length||e.afterBody.length||e.footer.length;this._options.enabled&&o&&(this.drawBackground(r,e,t,n,i),r.x+=e.xPadding,r.y+=e.yPadding,this.drawTitle(r,e,t,i),this.drawBody(r,e,t,i),this.drawFooter(r,e,t,i))}},handleEvent:function(t){var e,n=this,r=n._options;return n._lastActive=n._lastActive||[],"mouseout"===t.type?n._active=[]:n._active=n._chart.getElementsAtEventForMode(t,r.mode,r),(e=!Bf.arrayEquals(n._active,n._lastActive))&&(n._lastActive=n._active,(r.enabled||r.custom)&&(n._eventPosition={x:t.x,y:t.y},n.update(!0),n.pivot())),e}})).positioners=e});var Lp=$f(function(t,e){t.exports=function(){var e,n;function r(){return e.apply(null,arguments)}function o(t){return t instanceof Array||"[object Array]"===Object.prototype.toString.call(t)}function a(t){return null!=t&&"[object Object]"===Object.prototype.toString.call(t)}function s(t){return void 0===t}function l(t){return"number"==typeof t||"[object Number]"===Object.prototype.toString.call(t)}function u(t){return t instanceof Date||"[object Date]"===Object.prototype.toString.call(t)}function c(t,e){var n,r=[];for(n=0;n<t.length;++n)r.push(e(t[n],n));return r}function d(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function f(t,e){for(var n in e)d(e,n)&&(t[n]=e[n]);return d(e,"toString")&&(t.toString=e.toString),d(e,"valueOf")&&(t.valueOf=e.valueOf),t}function h(t,e,n,r){return Te(t,e,n,r,!0).utc()}function p(t){return null==t._pf&&(t._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null,rfc2822:!1,weekdayMismatch:!1}),t._pf}function v(t){if(null==t._isValid){var e=p(t),r=n.call(e.parsedDateParts,function(t){return null!=t}),i=!isNaN(t._d.getTime())&&e.overflow<0&&!e.empty&&!e.invalidMonth&&!e.invalidWeekday&&!e.weekdayMismatch&&!e.nullInput&&!e.invalidFormat&&!e.userInvalidated&&(!e.meridiem||e.meridiem&&r);if(t._strict&&(i=i&&0===e.charsLeftOver&&0===e.unusedTokens.length&&void 0===e.bigHour),null!=Object.isFrozen&&Object.isFrozen(t))return i;t._isValid=i}return t._isValid}function g(t){var e=h(NaN);return null!=t?f(p(e),t):p(e).userInvalidated=!0,e}n=Array.prototype.some?Array.prototype.some:function(t){for(var e=Object(this),n=e.length>>>0,r=0;r<n;r++)if(r in e&&t.call(this,e[r],r,e))return!0;return!1};var m=r.momentProperties=[];function y(t,e){var n,r,i;if(s(e._isAMomentObject)||(t._isAMomentObject=e._isAMomentObject),s(e._i)||(t._i=e._i),s(e._f)||(t._f=e._f),s(e._l)||(t._l=e._l),s(e._strict)||(t._strict=e._strict),s(e._tzm)||(t._tzm=e._tzm),s(e._isUTC)||(t._isUTC=e._isUTC),s(e._offset)||(t._offset=e._offset),s(e._pf)||(t._pf=p(e)),s(e._locale)||(t._locale=e._locale),m.length>0)for(n=0;n<m.length;n++)r=m[n],s(i=e[r])||(t[r]=i);return t}var b=!1;function _(t){y(this,t),this._d=new Date(null!=t._d?t._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===b&&(b=!0,r.updateOffset(this),b=!1)}function w(t){return t instanceof _||null!=t&&null!=t._isAMomentObject}function x(t){return t<0?Math.ceil(t)||0:Math.floor(t)}function k(t){var e=+t,n=0;return 0!==e&&isFinite(e)&&(n=x(e)),n}function S(t,e,n){var r,i=Math.min(t.length,e.length),o=Math.abs(t.length-e.length),a=0;for(r=0;r<i;r++)(n&&t[r]!==e[r]||!n&&k(t[r])!==k(e[r]))&&a++;return a+o}function M(t){!1===r.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+t)}function C(t,e){var n=!0;return f(function(){var o=arguments;if(null!=r.deprecationHandler&&r.deprecationHandler(null,t),n){for(var a,s=[],l=0;l<arguments.length;l++){if(a="","object"===i(o[l])){for(var u in a+="\n["+l+"] ",arguments[0])a+=u+": "+o[0][u]+", ";a=a.slice(0,-2)}else a=o[l];s.push(a)}M(t+"\nArguments: "+Array.prototype.slice.call(s).join("")+"\n"+(new Error).stack),n=!1}return e.apply(this,arguments)},e)}var A,O={};function D(t,e){null!=r.deprecationHandler&&r.deprecationHandler(t,e),O[t]||(M(e),O[t]=!0)}function T(t){return t instanceof Function||"[object Function]"===Object.prototype.toString.call(t)}function P(t,e){var n,r=f({},t);for(n in e)d(e,n)&&(a(t[n])&&a(e[n])?(r[n]={},f(r[n],t[n]),f(r[n],e[n])):null!=e[n]?r[n]=e[n]:delete r[n]);for(n in t)d(t,n)&&!d(e,n)&&a(t[n])&&(r[n]=f({},r[n]));return r}function R(t){null!=t&&this.set(t)}r.suppressDeprecationWarnings=!1,r.deprecationHandler=null,A=Object.keys?Object.keys:function(t){var e,n=[];for(e in t)d(t,e)&&n.push(e);return n};var I={};function L(t,e){var n=t.toLowerCase();I[n]=I[n+"s"]=I[e]=t}function E(t){return"string"==typeof t?I[t]||I[t.toLowerCase()]:void 0}function F(t){var e,n,r={};for(n in t)d(t,n)&&(e=E(n))&&(r[e]=t[n]);return r}var j={};function N(t,e){j[t]=e}function $(t,e,n){var r=""+Math.abs(t),i=e-r.length,o=t>=0;return(o?n?"+":"":"-")+Math.pow(10,Math.max(0,i)).toString().substr(1)+r}var z=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,B=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Y={},W={};function U(t,e,n,r){var i=r;"string"==typeof r&&(i=function(){return this[r]()}),t&&(W[t]=i),e&&(W[e[0]]=function(){return $(i.apply(this,arguments),e[1],e[2])}),n&&(W[n]=function(){return this.localeData().ordinal(i.apply(this,arguments),t)})}function H(t,e){return t.isValid()?(e=V(e,t.localeData()),Y[e]=Y[e]||function(t){var e,n,r,i=t.match(z);for(e=0,n=i.length;e<n;e++)W[i[e]]?i[e]=W[i[e]]:i[e]=(r=i[e]).match(/\[[\s\S]/)?r.replace(/^\[|\]$/g,""):r.replace(/\\/g,"");return function(e){var r,o="";for(r=0;r<n;r++)o+=T(i[r])?i[r].call(e,t):i[r];return o}}(e),Y[e](t)):t.localeData().invalidDate()}function V(t,e){var n=5;function r(t){return e.longDateFormat(t)||t}for(B.lastIndex=0;n>=0&&B.test(t);)t=t.replace(B,r),B.lastIndex=0,n-=1;return t}var q=/\d/,G=/\d\d/,J=/\d{3}/,Z=/\d{4}/,K=/[+-]?\d{6}/,X=/\d\d?/,Q=/\d\d\d\d?/,tt=/\d\d\d\d\d\d?/,et=/\d{1,3}/,nt=/\d{1,4}/,rt=/[+-]?\d{1,6}/,it=/\d+/,ot=/[+-]?\d+/,at=/Z|[+-]\d\d:?\d\d/gi,st=/Z|[+-]\d\d(?::?\d\d)?/gi,lt=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,ut={};function ct(t,e,n){ut[t]=T(e)?e:function(t,r){return t&&n?n:e}}function dt(t,e){return d(ut,t)?ut[t](e._strict,e._locale):new RegExp(ft(t.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(t,e,n,r,i){return e||n||r||i})))}function ft(t){return t.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}var ht={};function pt(t,e){var n,r=e;for("string"==typeof t&&(t=[t]),l(e)&&(r=function(t,n){n[e]=k(t)}),n=0;n<t.length;n++)ht[t[n]]=r}function vt(t,e){pt(t,function(t,n,r,i){r._w=r._w||{},e(t,r._w,r,i)})}function gt(t,e,n){null!=e&&d(ht,t)&&ht[t](e,n._a,n,t)}var mt=0,yt=1,bt=2,_t=3,wt=4,xt=5,kt=6,St=7,Mt=8;function Ct(t){return At(t)?366:365}function At(t){return t%4==0&&t%100!=0||t%400==0}U("Y",0,0,function(){var t=this.year();return t<=9999?""+t:"+"+t}),U(0,["YY",2],0,function(){return this.year()%100}),U(0,["YYYY",4],0,"year"),U(0,["YYYYY",5],0,"year"),U(0,["YYYYYY",6,!0],0,"year"),L("year","y"),N("year",1),ct("Y",ot),ct("YY",X,G),ct("YYYY",nt,Z),ct("YYYYY",rt,K),ct("YYYYYY",rt,K),pt(["YYYYY","YYYYYY"],mt),pt("YYYY",function(t,e){e[mt]=2===t.length?r.parseTwoDigitYear(t):k(t)}),pt("YY",function(t,e){e[mt]=r.parseTwoDigitYear(t)}),pt("Y",function(t,e){e[mt]=parseInt(t,10)}),r.parseTwoDigitYear=function(t){return k(t)+(k(t)>68?1900:2e3)};var Ot,Dt=Tt("FullYear",!0);function Tt(t,e){return function(n){return null!=n?(Rt(this,t,n),r.updateOffset(this,e),this):Pt(this,t)}}function Pt(t,e){return t.isValid()?t._d["get"+(t._isUTC?"UTC":"")+e]():NaN}function Rt(t,e,n){t.isValid()&&!isNaN(n)&&("FullYear"===e&&At(t.year())&&1===t.month()&&29===t.date()?t._d["set"+(t._isUTC?"UTC":"")+e](n,t.month(),It(n,t.month())):t._d["set"+(t._isUTC?"UTC":"")+e](n))}function It(t,e){if(isNaN(t)||isNaN(e))return NaN;var n,r=(e%(n=12)+n)%n;return t+=(e-r)/12,1===r?At(t)?29:28:31-r%7%2}Ot=Array.prototype.indexOf?Array.prototype.indexOf:function(t){var e;for(e=0;e<this.length;++e)if(this[e]===t)return e;return-1},U("M",["MM",2],"Mo",function(){return this.month()+1}),U("MMM",0,0,function(t){return this.localeData().monthsShort(this,t)}),U("MMMM",0,0,function(t){return this.localeData().months(this,t)}),L("month","M"),N("month",8),ct("M",X),ct("MM",X,G),ct("MMM",function(t,e){return e.monthsShortRegex(t)}),ct("MMMM",function(t,e){return e.monthsRegex(t)}),pt(["M","MM"],function(t,e){e[yt]=k(t)-1}),pt(["MMM","MMMM"],function(t,e,n,r){var i=n._locale.monthsParse(t,r,n._strict);null!=i?e[yt]=i:p(n).invalidMonth=t});var Lt=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,Et="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Ft="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");function jt(t,e){var n;if(!t.isValid())return t;if("string"==typeof e)if(/^\d+$/.test(e))e=k(e);else if(!l(e=t.localeData().monthsParse(e)))return t;return n=Math.min(t.date(),It(t.year(),e)),t._d["set"+(t._isUTC?"UTC":"")+"Month"](e,n),t}function Nt(t){return null!=t?(jt(this,t),r.updateOffset(this,!0),this):Pt(this,"Month")}var $t=lt,zt=lt;function Bt(){function t(t,e){return e.length-t.length}var e,n,r=[],i=[],o=[];for(e=0;e<12;e++)n=h([2e3,e]),r.push(this.monthsShort(n,"")),i.push(this.months(n,"")),o.push(this.months(n,"")),o.push(this.monthsShort(n,""));for(r.sort(t),i.sort(t),o.sort(t),e=0;e<12;e++)r[e]=ft(r[e]),i[e]=ft(i[e]);for(e=0;e<24;e++)o[e]=ft(o[e]);this._monthsRegex=new RegExp("^("+o.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+i.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+r.join("|")+")","i")}function Yt(t){var e;if(t<100&&t>=0){var n=Array.prototype.slice.call(arguments);n[0]=t+400,e=new Date(Date.UTC.apply(null,n)),isFinite(e.getUTCFullYear())&&e.setUTCFullYear(t)}else e=new Date(Date.UTC.apply(null,arguments));return e}function Wt(t,e,n){var r=7+e-n,i=(7+Yt(t,0,r).getUTCDay()-e)%7;return-i+r-1}function Ut(t,e,n,r,i){var o,a,s=(7+n-r)%7,l=Wt(t,r,i),u=1+7*(e-1)+s+l;return u<=0?a=Ct(o=t-1)+u:u>Ct(t)?(o=t+1,a=u-Ct(t)):(o=t,a=u),{year:o,dayOfYear:a}}function Ht(t,e,n){var r,i,o=Wt(t.year(),e,n),a=Math.floor((t.dayOfYear()-o-1)/7)+1;return a<1?(i=t.year()-1,r=a+Vt(i,e,n)):a>Vt(t.year(),e,n)?(r=a-Vt(t.year(),e,n),i=t.year()+1):(i=t.year(),r=a),{week:r,year:i}}function Vt(t,e,n){var r=Wt(t,e,n),i=Wt(t+1,e,n);return(Ct(t)-r+i)/7}function qt(t,e){return t.slice(e,7).concat(t.slice(0,e))}U("w",["ww",2],"wo","week"),U("W",["WW",2],"Wo","isoWeek"),L("week","w"),L("isoWeek","W"),N("week",5),N("isoWeek",5),ct("w",X),ct("ww",X,G),ct("W",X),ct("WW",X,G),vt(["w","ww","W","WW"],function(t,e,n,r){e[r.substr(0,1)]=k(t)}),U("d",0,"do","day"),U("dd",0,0,function(t){return this.localeData().weekdaysMin(this,t)}),U("ddd",0,0,function(t){return this.localeData().weekdaysShort(this,t)}),U("dddd",0,0,function(t){return this.localeData().weekdays(this,t)}),U("e",0,0,"weekday"),U("E",0,0,"isoWeekday"),L("day","d"),L("weekday","e"),L("isoWeekday","E"),N("day",11),N("weekday",11),N("isoWeekday",11),ct("d",X),ct("e",X),ct("E",X),ct("dd",function(t,e){return e.weekdaysMinRegex(t)}),ct("ddd",function(t,e){return e.weekdaysShortRegex(t)}),ct("dddd",function(t,e){return e.weekdaysRegex(t)}),vt(["dd","ddd","dddd"],function(t,e,n,r){var i=n._locale.weekdaysParse(t,r,n._strict);null!=i?e.d=i:p(n).invalidWeekday=t}),vt(["d","e","E"],function(t,e,n,r){e[r]=k(t)});var Gt="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Jt="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Zt="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),Kt=lt,Xt=lt,Qt=lt;function te(){function t(t,e){return e.length-t.length}var e,n,r,i,o,a=[],s=[],l=[],u=[];for(e=0;e<7;e++)n=h([2e3,1]).day(e),r=this.weekdaysMin(n,""),i=this.weekdaysShort(n,""),o=this.weekdays(n,""),a.push(r),s.push(i),l.push(o),u.push(r),u.push(i),u.push(o);for(a.sort(t),s.sort(t),l.sort(t),u.sort(t),e=0;e<7;e++)s[e]=ft(s[e]),l[e]=ft(l[e]),u[e]=ft(u[e]);this._weekdaysRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+s.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+a.join("|")+")","i")}function ee(){return this.hours()%12||12}function ne(t,e){U(t,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),e)})}function re(t,e){return e._meridiemParse}U("H",["HH",2],0,"hour"),U("h",["hh",2],0,ee),U("k",["kk",2],0,function(){return this.hours()||24}),U("hmm",0,0,function(){return""+ee.apply(this)+$(this.minutes(),2)}),U("hmmss",0,0,function(){return""+ee.apply(this)+$(this.minutes(),2)+$(this.seconds(),2)}),U("Hmm",0,0,function(){return""+this.hours()+$(this.minutes(),2)}),U("Hmmss",0,0,function(){return""+this.hours()+$(this.minutes(),2)+$(this.seconds(),2)}),ne("a",!0),ne("A",!1),L("hour","h"),N("hour",13),ct("a",re),ct("A",re),ct("H",X),ct("h",X),ct("k",X),ct("HH",X,G),ct("hh",X,G),ct("kk",X,G),ct("hmm",Q),ct("hmmss",tt),ct("Hmm",Q),ct("Hmmss",tt),pt(["H","HH"],_t),pt(["k","kk"],function(t,e,n){var r=k(t);e[_t]=24===r?0:r}),pt(["a","A"],function(t,e,n){n._isPm=n._locale.isPM(t),n._meridiem=t}),pt(["h","hh"],function(t,e,n){e[_t]=k(t),p(n).bigHour=!0}),pt("hmm",function(t,e,n){var r=t.length-2;e[_t]=k(t.substr(0,r)),e[wt]=k(t.substr(r)),p(n).bigHour=!0}),pt("hmmss",function(t,e,n){var r=t.length-4,i=t.length-2;e[_t]=k(t.substr(0,r)),e[wt]=k(t.substr(r,2)),e[xt]=k(t.substr(i)),p(n).bigHour=!0}),pt("Hmm",function(t,e,n){var r=t.length-2;e[_t]=k(t.substr(0,r)),e[wt]=k(t.substr(r))}),pt("Hmmss",function(t,e,n){var r=t.length-4,i=t.length-2;e[_t]=k(t.substr(0,r)),e[wt]=k(t.substr(r,2)),e[xt]=k(t.substr(i))});var ie,oe=Tt("Hours",!0),ae={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:Et,monthsShort:Ft,week:{dow:0,doy:6},weekdays:Gt,weekdaysMin:Zt,weekdaysShort:Jt,meridiemParse:/[ap]\.?m?\.?/i},se={},le={};function ue(t){return t?t.toLowerCase().replace("_","-"):t}function ce(e){var n=null;if(!se[e]&&t&&t.exports)try{n=ie._abbr;var r=Nf;r("./locale/"+e),de(n)}catch(t){}return se[e]}function de(t,e){var n;return t&&((n=s(e)?he(t):fe(t,e))?ie=n:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+t+" not found. Did you forget to load it?")),ie._abbr}function fe(t,e){if(null!==e){var n,r=ae;if(e.abbr=t,null!=se[t])D("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),r=se[t]._config;else if(null!=e.parentLocale)if(null!=se[e.parentLocale])r=se[e.parentLocale]._config;else{if(null==(n=ce(e.parentLocale)))return le[e.parentLocale]||(le[e.parentLocale]=[]),le[e.parentLocale].push({name:t,config:e}),null;r=n._config}return se[t]=new R(P(r,e)),le[t]&&le[t].forEach(function(t){fe(t.name,t.config)}),de(t),se[t]}return delete se[t],null}function he(t){var e;if(t&&t._locale&&t._locale._abbr&&(t=t._locale._abbr),!t)return ie;if(!o(t)){if(e=ce(t))return e;t=[t]}return function(t){for(var e,n,r,i,o=0;o<t.length;){for(i=ue(t[o]).split("-"),e=i.length,n=(n=ue(t[o+1]))?n.split("-"):null;e>0;){if(r=ce(i.slice(0,e).join("-")))return r;if(n&&n.length>=e&&S(i,n,!0)>=e-1)break;e--}o++}return ie}(t)}function pe(t){var e,n=t._a;return n&&-2===p(t).overflow&&(e=n[yt]<0||n[yt]>11?yt:n[bt]<1||n[bt]>It(n[mt],n[yt])?bt:n[_t]<0||n[_t]>24||24===n[_t]&&(0!==n[wt]||0!==n[xt]||0!==n[kt])?_t:n[wt]<0||n[wt]>59?wt:n[xt]<0||n[xt]>59?xt:n[kt]<0||n[kt]>999?kt:-1,p(t)._overflowDayOfYear&&(e<mt||e>bt)&&(e=bt),p(t)._overflowWeeks&&-1===e&&(e=St),p(t)._overflowWeekday&&-1===e&&(e=Mt),p(t).overflow=e),t}function ve(t,e,n){return null!=t?t:null!=e?e:n}function ge(t){var e,n,i,o,a,s=[];if(!t._d){for(i=function(t){var e=new Date(r.now());return t._useUTC?[e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()]:[e.getFullYear(),e.getMonth(),e.getDate()]}(t),t._w&&null==t._a[bt]&&null==t._a[yt]&&function(t){var e,n,r,i,o,a,s,l;if(null!=(e=t._w).GG||null!=e.W||null!=e.E)o=1,a=4,n=ve(e.GG,t._a[mt],Ht(Pe(),1,4).year),r=ve(e.W,1),((i=ve(e.E,1))<1||i>7)&&(l=!0);else{o=t._locale._week.dow,a=t._locale._week.doy;var u=Ht(Pe(),o,a);n=ve(e.gg,t._a[mt],u.year),r=ve(e.w,u.week),null!=e.d?((i=e.d)<0||i>6)&&(l=!0):null!=e.e?(i=e.e+o,(e.e<0||e.e>6)&&(l=!0)):i=o}r<1||r>Vt(n,o,a)?p(t)._overflowWeeks=!0:null!=l?p(t)._overflowWeekday=!0:(s=Ut(n,r,i,o,a),t._a[mt]=s.year,t._dayOfYear=s.dayOfYear)}(t),null!=t._dayOfYear&&(a=ve(t._a[mt],i[mt]),(t._dayOfYear>Ct(a)||0===t._dayOfYear)&&(p(t)._overflowDayOfYear=!0),n=Yt(a,0,t._dayOfYear),t._a[yt]=n.getUTCMonth(),t._a[bt]=n.getUTCDate()),e=0;e<3&&null==t._a[e];++e)t._a[e]=s[e]=i[e];for(;e<7;e++)t._a[e]=s[e]=null==t._a[e]?2===e?1:0:t._a[e];24===t._a[_t]&&0===t._a[wt]&&0===t._a[xt]&&0===t._a[kt]&&(t._nextDay=!0,t._a[_t]=0),t._d=(t._useUTC?Yt:function(t,e,n,r,i,o,a){var s;return t<100&&t>=0?(s=new Date(t+400,e,n,r,i,o,a),isFinite(s.getFullYear())&&s.setFullYear(t)):s=new Date(t,e,n,r,i,o,a),s}).apply(null,s),o=t._useUTC?t._d.getUTCDay():t._d.getDay(),null!=t._tzm&&t._d.setUTCMinutes(t._d.getUTCMinutes()-t._tzm),t._nextDay&&(t._a[_t]=24),t._w&&void 0!==t._w.d&&t._w.d!==o&&(p(t).weekdayMismatch=!0)}}var me=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ye=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,be=/Z|[+-]\d\d(?::?\d\d)?/,_e=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],we=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],xe=/^\/?Date\((\-?\d+)/i;function ke(t){var e,n,r,i,o,a,s=t._i,l=me.exec(s)||ye.exec(s);if(l){for(p(t).iso=!0,e=0,n=_e.length;e<n;e++)if(_e[e][1].exec(l[1])){i=_e[e][0],r=!1!==_e[e][2];break}if(null==i)return void(t._isValid=!1);if(l[3]){for(e=0,n=we.length;e<n;e++)if(we[e][1].exec(l[3])){o=(l[2]||" ")+we[e][0];break}if(null==o)return void(t._isValid=!1)}if(!r&&null!=o)return void(t._isValid=!1);if(l[4]){if(!be.exec(l[4]))return void(t._isValid=!1);a="Z"}t._f=i+(o||"")+(a||""),Oe(t)}else t._isValid=!1}var Se=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;function Me(t,e,n,r,i,o){var a=[function(t){var e=parseInt(t,10);return e<=49?2e3+e:e<=999?1900+e:e}(t),Ft.indexOf(e),parseInt(n,10),parseInt(r,10),parseInt(i,10)];return o&&a.push(parseInt(o,10)),a}var Ce={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function Ae(t){var e=Se.exec(t._i.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(e){var n=Me(e[4],e[3],e[2],e[5],e[6],e[7]);if(!function(t,e,n){if(t){var r=Jt.indexOf(t),i=new Date(e[0],e[1],e[2]).getDay();if(r!==i)return p(n).weekdayMismatch=!0,n._isValid=!1,!1}return!0}(e[1],n,t))return;t._a=n,t._tzm=function(t,e,n){if(t)return Ce[t];if(e)return 0;var r=parseInt(n,10),i=r%100,o=(r-i)/100;return 60*o+i}(e[8],e[9],e[10]),t._d=Yt.apply(null,t._a),t._d.setUTCMinutes(t._d.getUTCMinutes()-t._tzm),p(t).rfc2822=!0}else t._isValid=!1}function Oe(t){if(t._f!==r.ISO_8601)if(t._f!==r.RFC_2822){t._a=[],p(t).empty=!0;var e,n,i,o,a,s=""+t._i,l=s.length,u=0;for(i=V(t._f,t._locale).match(z)||[],e=0;e<i.length;e++)o=i[e],(n=(s.match(dt(o,t))||[])[0])&&((a=s.substr(0,s.indexOf(n))).length>0&&p(t).unusedInput.push(a),s=s.slice(s.indexOf(n)+n.length),u+=n.length),W[o]?(n?p(t).empty=!1:p(t).unusedTokens.push(o),gt(o,n,t)):t._strict&&!n&&p(t).unusedTokens.push(o);p(t).charsLeftOver=l-u,s.length>0&&p(t).unusedInput.push(s),t._a[_t]<=12&&!0===p(t).bigHour&&t._a[_t]>0&&(p(t).bigHour=void 0),p(t).parsedDateParts=t._a.slice(0),p(t).meridiem=t._meridiem,t._a[_t]=(c=t._locale,d=t._a[_t],null==(f=t._meridiem)?d:null!=c.meridiemHour?c.meridiemHour(d,f):null!=c.isPM?((h=c.isPM(f))&&d<12&&(d+=12),h||12!==d||(d=0),d):d),ge(t),pe(t)}else Ae(t);else ke(t);var c,d,f,h}function De(t){var e=t._i,n=t._f;return t._locale=t._locale||he(t._l),null===e||void 0===n&&""===e?g({nullInput:!0}):("string"==typeof e&&(t._i=e=t._locale.preparse(e)),w(e)?new _(pe(e)):(u(e)?t._d=e:o(n)?function(t){var e,n,r,i,o;if(0===t._f.length)return p(t).invalidFormat=!0,void(t._d=new Date(NaN));for(i=0;i<t._f.length;i++)o=0,e=y({},t),null!=t._useUTC&&(e._useUTC=t._useUTC),e._f=t._f[i],Oe(e),v(e)&&(o+=p(e).charsLeftOver,o+=10*p(e).unusedTokens.length,p(e).score=o,(null==r||o<r)&&(r=o,n=e));f(t,n||e)}(t):n?Oe(t):function(t){var e=t._i;s(e)?t._d=new Date(r.now()):u(e)?t._d=new Date(e.valueOf()):"string"==typeof e?function(t){var e=xe.exec(t._i);null===e?(ke(t),!1===t._isValid&&(delete t._isValid,Ae(t),!1===t._isValid&&(delete t._isValid,r.createFromInputFallback(t)))):t._d=new Date(+e[1])}(t):o(e)?(t._a=c(e.slice(0),function(t){return parseInt(t,10)}),ge(t)):a(e)?function(t){if(!t._d){var e=F(t._i);t._a=c([e.year,e.month,e.day||e.date,e.hour,e.minute,e.second,e.millisecond],function(t){return t&&parseInt(t,10)}),ge(t)}}(t):l(e)?t._d=new Date(e):r.createFromInputFallback(t)}(t),v(t)||(t._d=null),t))}function Te(t,e,n,r,i){var s,l={};return!0!==n&&!1!==n||(r=n,n=void 0),(a(t)&&function(t){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(t).length;var e;for(e in t)if(t.hasOwnProperty(e))return!1;return!0}(t)||o(t)&&0===t.length)&&(t=void 0),l._isAMomentObject=!0,l._useUTC=l._isUTC=i,l._l=n,l._i=t,l._f=e,l._strict=r,(s=new _(pe(De(l))))._nextDay&&(s.add(1,"d"),s._nextDay=void 0),s}function Pe(t,e,n,r){return Te(t,e,n,r,!1)}r.createFromInputFallback=C("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(t){t._d=new Date(t._i+(t._useUTC?" UTC":""))}),r.ISO_8601=function(){},r.RFC_2822=function(){};var Re=C("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var t=Pe.apply(null,arguments);return this.isValid()&&t.isValid()?t<this?this:t:g()}),Ie=C("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var t=Pe.apply(null,arguments);return this.isValid()&&t.isValid()?t>this?this:t:g()});function Le(t,e){var n,r;if(1===e.length&&o(e[0])&&(e=e[0]),!e.length)return Pe();for(n=e[0],r=1;r<e.length;++r)e[r].isValid()&&!e[r][t](n)||(n=e[r]);return n}var Ee=["year","quarter","month","week","day","hour","minute","second","millisecond"];function Fe(t){var e=F(t),n=e.year||0,r=e.quarter||0,i=e.month||0,o=e.week||e.isoWeek||0,a=e.day||0,s=e.hour||0,l=e.minute||0,u=e.second||0,c=e.millisecond||0;this._isValid=function(t){for(var e in t)if(-1===Ot.call(Ee,e)||null!=t[e]&&isNaN(t[e]))return!1;for(var n=!1,r=0;r<Ee.length;++r)if(t[Ee[r]]){if(n)return!1;parseFloat(t[Ee[r]])!==k(t[Ee[r]])&&(n=!0)}return!0}(e),this._milliseconds=+c+1e3*u+6e4*l+1e3*s*60*60,this._days=+a+7*o,this._months=+i+3*r+12*n,this._data={},this._locale=he(),this._bubble()}function je(t){return t instanceof Fe}function Ne(t){return t<0?-1*Math.round(-1*t):Math.round(t)}function $e(t,e){U(t,0,0,function(){var t=this.utcOffset(),n="+";return t<0&&(t=-t,n="-"),n+$(~~(t/60),2)+e+$(~~t%60,2)})}$e("Z",":"),$e("ZZ",""),ct("Z",st),ct("ZZ",st),pt(["Z","ZZ"],function(t,e,n){n._useUTC=!0,n._tzm=Be(st,t)});var ze=/([\+\-]|\d\d)/gi;function Be(t,e){var n=(e||"").match(t);if(null===n)return null;var r=n[n.length-1]||[],i=(r+"").match(ze)||["-",0,0],o=60*i[1]+k(i[2]);return 0===o?0:"+"===i[0]?o:-o}function Ye(t,e){var n,i;return e._isUTC?(n=e.clone(),i=(w(t)||u(t)?t.valueOf():Pe(t).valueOf())-n.valueOf(),n._d.setTime(n._d.valueOf()+i),r.updateOffset(n,!1),n):Pe(t).local()}function We(t){return 15*-Math.round(t._d.getTimezoneOffset()/15)}function Ue(){return!!this.isValid()&&this._isUTC&&0===this._offset}r.updateOffset=function(){};var He=/^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,Ve=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function qe(t,e){var n,r,o,a,s,u,c=t,f=null;return je(t)?c={ms:t._milliseconds,d:t._days,M:t._months}:l(t)?(c={},e?c[e]=t:c.milliseconds=t):(f=He.exec(t))?(n="-"===f[1]?-1:1,c={y:0,d:k(f[bt])*n,h:k(f[_t])*n,m:k(f[wt])*n,s:k(f[xt])*n,ms:k(Ne(1e3*f[kt]))*n}):(f=Ve.exec(t))?(n="-"===f[1]?-1:1,c={y:Ge(f[2],n),M:Ge(f[3],n),w:Ge(f[4],n),d:Ge(f[5],n),h:Ge(f[6],n),m:Ge(f[7],n),s:Ge(f[8],n)}):null==c?c={}:"object"===(void 0===c?"undefined":i(c))&&("from"in c||"to"in c)&&(a=Pe(c.from),s=Pe(c.to),o=a.isValid()&&s.isValid()?(s=Ye(s,a),a.isBefore(s)?u=Je(a,s):((u=Je(s,a)).milliseconds=-u.milliseconds,u.months=-u.months),u):{milliseconds:0,months:0},(c={}).ms=o.milliseconds,c.M=o.months),r=new Fe(c),je(t)&&d(t,"_locale")&&(r._locale=t._locale),r}function Ge(t,e){var n=t&&parseFloat(t.replace(",","."));return(isNaN(n)?0:n)*e}function Je(t,e){var n={};return n.months=e.month()-t.month()+12*(e.year()-t.year()),t.clone().add(n.months,"M").isAfter(e)&&--n.months,n.milliseconds=+e-+t.clone().add(n.months,"M"),n}function Ze(t,e){return function(n,r){var i;return null===r||isNaN(+r)||(D(e,"moment()."+e+"(period, number) is deprecated. Please use moment()."+e+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),i=n,n=r,r=i),Ke(this,qe(n="string"==typeof n?+n:n,r),t),this}}function Ke(t,e,n,i){var o=e._milliseconds,a=Ne(e._days),s=Ne(e._months);t.isValid()&&(i=null==i||i,s&&jt(t,Pt(t,"Month")+s*n),a&&Rt(t,"Date",Pt(t,"Date")+a*n),o&&t._d.setTime(t._d.valueOf()+o*n),i&&r.updateOffset(t,a||s))}qe.fn=Fe.prototype,qe.invalid=function(){return qe(NaN)};var Xe=Ze(1,"add"),Qe=Ze(-1,"subtract");function tn(t,e){var n,r,i=12*(e.year()-t.year())+(e.month()-t.month()),o=t.clone().add(i,"months");return e-o<0?(n=t.clone().add(i-1,"months"),r=(e-o)/(o-n)):(n=t.clone().add(i+1,"months"),r=(e-o)/(n-o)),-(i+r)||0}function en(t){var e;return void 0===t?this._locale._abbr:(null!=(e=he(t))&&(this._locale=e),this)}r.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",r.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var nn=C("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(t){return void 0===t?this.localeData():this.locale(t)});function rn(){return this._locale}var on=1e3,an=60*on,sn=60*an,ln=3506328*sn;function un(t,e){return(t%e+e)%e}function cn(t,e,n){return t<100&&t>=0?new Date(t+400,e,n)-ln:new Date(t,e,n).valueOf()}function dn(t,e,n){return t<100&&t>=0?Date.UTC(t+400,e,n)-ln:Date.UTC(t,e,n)}function fn(t,e){U(0,[t,t.length],0,e)}function hn(t,e,n,r,i){var o;return null==t?Ht(this,r,i).year:(o=Vt(t,r,i),e>o&&(e=o),function(t,e,n,r,i){var o=Ut(t,e,n,r,i),a=Yt(o.year,0,o.dayOfYear);return this.year(a.getUTCFullYear()),this.month(a.getUTCMonth()),this.date(a.getUTCDate()),this}.call(this,t,e,n,r,i))}U(0,["gg",2],0,function(){return this.weekYear()%100}),U(0,["GG",2],0,function(){return this.isoWeekYear()%100}),fn("gggg","weekYear"),fn("ggggg","weekYear"),fn("GGGG","isoWeekYear"),fn("GGGGG","isoWeekYear"),L("weekYear","gg"),L("isoWeekYear","GG"),N("weekYear",1),N("isoWeekYear",1),ct("G",ot),ct("g",ot),ct("GG",X,G),ct("gg",X,G),ct("GGGG",nt,Z),ct("gggg",nt,Z),ct("GGGGG",rt,K),ct("ggggg",rt,K),vt(["gggg","ggggg","GGGG","GGGGG"],function(t,e,n,r){e[r.substr(0,2)]=k(t)}),vt(["gg","GG"],function(t,e,n,i){e[i]=r.parseTwoDigitYear(t)}),U("Q",0,"Qo","quarter"),L("quarter","Q"),N("quarter",7),ct("Q",q),pt("Q",function(t,e){e[yt]=3*(k(t)-1)}),U("D",["DD",2],"Do","date"),L("date","D"),N("date",9),ct("D",X),ct("DD",X,G),ct("Do",function(t,e){return t?e._dayOfMonthOrdinalParse||e._ordinalParse:e._dayOfMonthOrdinalParseLenient}),pt(["D","DD"],bt),pt("Do",function(t,e){e[bt]=k(t.match(X)[0])});var pn=Tt("Date",!0);U("DDD",["DDDD",3],"DDDo","dayOfYear"),L("dayOfYear","DDD"),N("dayOfYear",4),ct("DDD",et),ct("DDDD",J),pt(["DDD","DDDD"],function(t,e,n){n._dayOfYear=k(t)}),U("m",["mm",2],0,"minute"),L("minute","m"),N("minute",14),ct("m",X),ct("mm",X,G),pt(["m","mm"],wt);var vn=Tt("Minutes",!1);U("s",["ss",2],0,"second"),L("second","s"),N("second",15),ct("s",X),ct("ss",X,G),pt(["s","ss"],xt);var gn,mn=Tt("Seconds",!1);for(U("S",0,0,function(){return~~(this.millisecond()/100)}),U(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),U(0,["SSS",3],0,"millisecond"),U(0,["SSSS",4],0,function(){return 10*this.millisecond()}),U(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),U(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),U(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),U(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),U(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),L("millisecond","ms"),N("millisecond",16),ct("S",et,q),ct("SS",et,G),ct("SSS",et,J),gn="SSSS";gn.length<=9;gn+="S")ct(gn,it);function yn(t,e){e[kt]=k(1e3*("0."+t))}for(gn="S";gn.length<=9;gn+="S")pt(gn,yn);var bn=Tt("Milliseconds",!1);U("z",0,0,"zoneAbbr"),U("zz",0,0,"zoneName");var _n=_.prototype;function wn(t){return t}_n.add=Xe,_n.calendar=function(t,e){var n=t||Pe(),i=Ye(n,this).startOf("day"),o=r.calendarFormat(this,i)||"sameElse",a=e&&(T(e[o])?e[o].call(this,n):e[o]);return this.format(a||this.localeData().calendar(o,this,Pe(n)))},_n.clone=function(){return new _(this)},_n.diff=function(t,e,n){var r,i,o;if(!this.isValid())return NaN;if(!(r=Ye(t,this)).isValid())return NaN;switch(i=6e4*(r.utcOffset()-this.utcOffset()),e=E(e)){case"year":o=tn(this,r)/12;break;case"month":o=tn(this,r);break;case"quarter":o=tn(this,r)/3;break;case"second":o=(this-r)/1e3;break;case"minute":o=(this-r)/6e4;break;case"hour":o=(this-r)/36e5;break;case"day":o=(this-r-i)/864e5;break;case"week":o=(this-r-i)/6048e5;break;default:o=this-r}return n?o:x(o)},_n.endOf=function(t){var e;if(void 0===(t=E(t))||"millisecond"===t||!this.isValid())return this;var n=this._isUTC?dn:cn;switch(t){case"year":e=n(this.year()+1,0,1)-1;break;case"quarter":e=n(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":e=n(this.year(),this.month()+1,1)-1;break;case"week":e=n(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":e=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":e=n(this.year(),this.month(),this.date()+1)-1;break;case"hour":e=this._d.valueOf(),e+=sn-un(e+(this._isUTC?0:this.utcOffset()*an),sn)-1;break;case"minute":e=this._d.valueOf(),e+=an-un(e,an)-1;break;case"second":e=this._d.valueOf(),e+=on-un(e,on)-1}return this._d.setTime(e),r.updateOffset(this,!0),this},_n.format=function(t){t||(t=this.isUtc()?r.defaultFormatUtc:r.defaultFormat);var e=H(this,t);return this.localeData().postformat(e)},_n.from=function(t,e){return this.isValid()&&(w(t)&&t.isValid()||Pe(t).isValid())?qe({to:this,from:t}).locale(this.locale()).humanize(!e):this.localeData().invalidDate()},_n.fromNow=function(t){return this.from(Pe(),t)},_n.to=function(t,e){return this.isValid()&&(w(t)&&t.isValid()||Pe(t).isValid())?qe({from:this,to:t}).locale(this.locale()).humanize(!e):this.localeData().invalidDate()},_n.toNow=function(t){return this.to(Pe(),t)},_n.get=function(t){return T(this[t=E(t)])?this[t]():this},_n.invalidAt=function(){return p(this).overflow},_n.isAfter=function(t,e){var n=w(t)?t:Pe(t);return!(!this.isValid()||!n.isValid())&&("millisecond"===(e=E(e)||"millisecond")?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(e).valueOf())},_n.isBefore=function(t,e){var n=w(t)?t:Pe(t);return!(!this.isValid()||!n.isValid())&&("millisecond"===(e=E(e)||"millisecond")?this.valueOf()<n.valueOf():this.clone().endOf(e).valueOf()<n.valueOf())},_n.isBetween=function(t,e,n,r){var i=w(t)?t:Pe(t),o=w(e)?e:Pe(e);return!!(this.isValid()&&i.isValid()&&o.isValid())&&(("("===(r=r||"()")[0]?this.isAfter(i,n):!this.isBefore(i,n))&&(")"===r[1]?this.isBefore(o,n):!this.isAfter(o,n)))},_n.isSame=function(t,e){var n,r=w(t)?t:Pe(t);return!(!this.isValid()||!r.isValid())&&("millisecond"===(e=E(e)||"millisecond")?this.valueOf()===r.valueOf():(n=r.valueOf(),this.clone().startOf(e).valueOf()<=n&&n<=this.clone().endOf(e).valueOf()))},_n.isSameOrAfter=function(t,e){return this.isSame(t,e)||this.isAfter(t,e)},_n.isSameOrBefore=function(t,e){return this.isSame(t,e)||this.isBefore(t,e)},_n.isValid=function(){return v(this)},_n.lang=nn,_n.locale=en,_n.localeData=rn,_n.max=Ie,_n.min=Re,_n.parsingFlags=function(){return f({},p(this))},_n.set=function(t,e){if("object"===(void 0===t?"undefined":i(t)))for(var n=function(t){var e=[];for(var n in t)e.push({unit:n,priority:j[n]});return e.sort(function(t,e){return t.priority-e.priority}),e}(t=F(t)),r=0;r<n.length;r++)this[n[r].unit](t[n[r].unit]);else if(T(this[t=E(t)]))return this[t](e);return this},_n.startOf=function(t){var e;if(void 0===(t=E(t))||"millisecond"===t||!this.isValid())return this;var n=this._isUTC?dn:cn;switch(t){case"year":e=n(this.year(),0,1);break;case"quarter":e=n(this.year(),this.month()-this.month()%3,1);break;case"month":e=n(this.year(),this.month(),1);break;case"week":e=n(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":e=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":e=n(this.year(),this.month(),this.date());break;case"hour":e=this._d.valueOf(),e-=un(e+(this._isUTC?0:this.utcOffset()*an),sn);break;case"minute":e=this._d.valueOf(),e-=un(e,an);break;case"second":e=this._d.valueOf(),e-=un(e,on)}return this._d.setTime(e),r.updateOffset(this,!0),this},_n.subtract=Qe,_n.toArray=function(){var t=this;return[t.year(),t.month(),t.date(),t.hour(),t.minute(),t.second(),t.millisecond()]},_n.toObject=function(){var t=this;return{years:t.year(),months:t.month(),date:t.date(),hours:t.hours(),minutes:t.minutes(),seconds:t.seconds(),milliseconds:t.milliseconds()}},_n.toDate=function(){return new Date(this.valueOf())},_n.toISOString=function(t){if(!this.isValid())return null;var e=!0!==t,n=e?this.clone().utc():this;return n.year()<0||n.year()>9999?H(n,e?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):T(Date.prototype.toISOString)?e?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",H(n,"Z")):H(n,e?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},_n.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var t="moment",e="";this.isLocal()||(t=0===this.utcOffset()?"moment.utc":"moment.parseZone",e="Z");var n="["+t+'("]',r=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",i=e+'[")]';return this.format(n+r+"-MM-DD[T]HH:mm:ss.SSS"+i)},_n.toJSON=function(){return this.isValid()?this.toISOString():null},_n.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},_n.unix=function(){return Math.floor(this.valueOf()/1e3)},_n.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},_n.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},_n.year=Dt,_n.isLeapYear=function(){return At(this.year())},_n.weekYear=function(t){return hn.call(this,t,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},_n.isoWeekYear=function(t){return hn.call(this,t,this.isoWeek(),this.isoWeekday(),1,4)},_n.quarter=_n.quarters=function(t){return null==t?Math.ceil((this.month()+1)/3):this.month(3*(t-1)+this.month()%3)},_n.month=Nt,_n.daysInMonth=function(){return It(this.year(),this.month())},_n.week=_n.weeks=function(t){var e=this.localeData().week(this);return null==t?e:this.add(7*(t-e),"d")},_n.isoWeek=_n.isoWeeks=function(t){var e=Ht(this,1,4).week;return null==t?e:this.add(7*(t-e),"d")},_n.weeksInYear=function(){var t=this.localeData()._week;return Vt(this.year(),t.dow,t.doy)},_n.isoWeeksInYear=function(){return Vt(this.year(),1,4)},_n.date=pn,_n.day=_n.days=function(t){if(!this.isValid())return null!=t?this:NaN;var e=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=t?(t=function(t,e){return"string"!=typeof t?t:isNaN(t)?"number"==typeof(t=e.weekdaysParse(t))?t:null:parseInt(t,10)}(t,this.localeData()),this.add(t-e,"d")):e},_n.weekday=function(t){if(!this.isValid())return null!=t?this:NaN;var e=(this.day()+7-this.localeData()._week.dow)%7;return null==t?e:this.add(t-e,"d")},_n.isoWeekday=function(t){if(!this.isValid())return null!=t?this:NaN;if(null!=t){var e=function(t,e){return"string"==typeof t?e.weekdaysParse(t)%7||7:isNaN(t)?null:t}(t,this.localeData());return this.day(this.day()%7?e:e-7)}return this.day()||7},_n.dayOfYear=function(t){var e=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==t?e:this.add(t-e,"d")},_n.hour=_n.hours=oe,_n.minute=_n.minutes=vn,_n.second=_n.seconds=mn,_n.millisecond=_n.milliseconds=bn,_n.utcOffset=function(t,e,n){var i,o=this._offset||0;if(!this.isValid())return null!=t?this:NaN;if(null!=t){if("string"==typeof t){if(null===(t=Be(st,t)))return this}else Math.abs(t)<16&&!n&&(t*=60);return!this._isUTC&&e&&(i=We(this)),this._offset=t,this._isUTC=!0,null!=i&&this.add(i,"m"),o!==t&&(!e||this._changeInProgress?Ke(this,qe(t-o,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,r.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?o:We(this)},_n.utc=function(t){return this.utcOffset(0,t)},_n.local=function(t){return this._isUTC&&(this.utcOffset(0,t),this._isUTC=!1,t&&this.subtract(We(this),"m")),this},_n.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var t=Be(at,this._i);null!=t?this.utcOffset(t):this.utcOffset(0,!0)}return this},_n.hasAlignedHourOffset=function(t){return!!this.isValid()&&(t=t?Pe(t).utcOffset():0,(this.utcOffset()-t)%60==0)},_n.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},_n.isLocal=function(){return!!this.isValid()&&!this._isUTC},_n.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},_n.isUtc=Ue,_n.isUTC=Ue,_n.zoneAbbr=function(){return this._isUTC?"UTC":""},_n.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},_n.dates=C("dates accessor is deprecated. Use date instead.",pn),_n.months=C("months accessor is deprecated. Use month instead",Nt),_n.years=C("years accessor is deprecated. Use year instead",Dt),_n.zone=C("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",function(t,e){return null!=t?("string"!=typeof t&&(t=-t),this.utcOffset(t,e),this):-this.utcOffset()}),_n.isDSTShifted=C("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",function(){if(!s(this._isDSTShifted))return this._isDSTShifted;var t={};if(y(t,this),(t=De(t))._a){var e=t._isUTC?h(t._a):Pe(t._a);this._isDSTShifted=this.isValid()&&S(t._a,e.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted});var xn=R.prototype;function kn(t,e,n,r){var i=he(),o=h().set(r,e);return i[n](o,t)}function Sn(t,e,n){if(l(t)&&(e=t,t=void 0),t=t||"",null!=e)return kn(t,e,n,"month");var r,i=[];for(r=0;r<12;r++)i[r]=kn(t,r,n,"month");return i}function Mn(t,e,n,r){"boolean"==typeof t?(l(e)&&(n=e,e=void 0),e=e||""):(n=e=t,t=!1,l(e)&&(n=e,e=void 0),e=e||"");var i,o=he(),a=t?o._week.dow:0;if(null!=n)return kn(e,(n+a)%7,r,"day");var s=[];for(i=0;i<7;i++)s[i]=kn(e,(i+a)%7,r,"day");return s}xn.calendar=function(t,e,n){var r=this._calendar[t]||this._calendar.sameElse;return T(r)?r.call(e,n):r},xn.longDateFormat=function(t){var e=this._longDateFormat[t],n=this._longDateFormat[t.toUpperCase()];return e||!n?e:(this._longDateFormat[t]=n.replace(/MMMM|MM|DD|dddd/g,function(t){return t.slice(1)}),this._longDateFormat[t])},xn.invalidDate=function(){return this._invalidDate},xn.ordinal=function(t){return this._ordinal.replace("%d",t)},xn.preparse=wn,xn.postformat=wn,xn.relativeTime=function(t,e,n,r){var i=this._relativeTime[n];return T(i)?i(t,e,n,r):i.replace(/%d/i,t)},xn.pastFuture=function(t,e){var n=this._relativeTime[t>0?"future":"past"];return T(n)?n(e):n.replace(/%s/i,e)},xn.set=function(t){var e,n;for(n in t)T(e=t[n])?this[n]=e:this["_"+n]=e;this._config=t,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},xn.months=function(t,e){return t?o(this._months)?this._months[t.month()]:this._months[(this._months.isFormat||Lt).test(e)?"format":"standalone"][t.month()]:o(this._months)?this._months:this._months.standalone},xn.monthsShort=function(t,e){return t?o(this._monthsShort)?this._monthsShort[t.month()]:this._monthsShort[Lt.test(e)?"format":"standalone"][t.month()]:o(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},xn.monthsParse=function(t,e,n){var r,i,o;if(this._monthsParseExact)return function(t,e,n){var r,i,o,a=t.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],r=0;r<12;++r)o=h([2e3,r]),this._shortMonthsParse[r]=this.monthsShort(o,"").toLocaleLowerCase(),this._longMonthsParse[r]=this.months(o,"").toLocaleLowerCase();return n?"MMM"===e?-1!==(i=Ot.call(this._shortMonthsParse,a))?i:null:-1!==(i=Ot.call(this._longMonthsParse,a))?i:null:"MMM"===e?-1!==(i=Ot.call(this._shortMonthsParse,a))?i:-1!==(i=Ot.call(this._longMonthsParse,a))?i:null:-1!==(i=Ot.call(this._longMonthsParse,a))?i:-1!==(i=Ot.call(this._shortMonthsParse,a))?i:null}.call(this,t,e,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),r=0;r<12;r++){if(i=h([2e3,r]),n&&!this._longMonthsParse[r]&&(this._longMonthsParse[r]=new RegExp("^"+this.months(i,"").replace(".","")+"$","i"),this._shortMonthsParse[r]=new RegExp("^"+this.monthsShort(i,"").replace(".","")+"$","i")),n||this._monthsParse[r]||(o="^"+this.months(i,"")+"|^"+this.monthsShort(i,""),this._monthsParse[r]=new RegExp(o.replace(".",""),"i")),n&&"MMMM"===e&&this._longMonthsParse[r].test(t))return r;if(n&&"MMM"===e&&this._shortMonthsParse[r].test(t))return r;if(!n&&this._monthsParse[r].test(t))return r}},xn.monthsRegex=function(t){return this._monthsParseExact?(d(this,"_monthsRegex")||Bt.call(this),t?this._monthsStrictRegex:this._monthsRegex):(d(this,"_monthsRegex")||(this._monthsRegex=zt),this._monthsStrictRegex&&t?this._monthsStrictRegex:this._monthsRegex)},xn.monthsShortRegex=function(t){return this._monthsParseExact?(d(this,"_monthsRegex")||Bt.call(this),t?this._monthsShortStrictRegex:this._monthsShortRegex):(d(this,"_monthsShortRegex")||(this._monthsShortRegex=$t),this._monthsShortStrictRegex&&t?this._monthsShortStrictRegex:this._monthsShortRegex)},xn.week=function(t){return Ht(t,this._week.dow,this._week.doy).week},xn.firstDayOfYear=function(){return this._week.doy},xn.firstDayOfWeek=function(){return this._week.dow},xn.weekdays=function(t,e){var n=o(this._weekdays)?this._weekdays:this._weekdays[t&&!0!==t&&this._weekdays.isFormat.test(e)?"format":"standalone"];return!0===t?qt(n,this._week.dow):t?n[t.day()]:n},xn.weekdaysMin=function(t){return!0===t?qt(this._weekdaysMin,this._week.dow):t?this._weekdaysMin[t.day()]:this._weekdaysMin},xn.weekdaysShort=function(t){return!0===t?qt(this._weekdaysShort,this._week.dow):t?this._weekdaysShort[t.day()]:this._weekdaysShort},xn.weekdaysParse=function(t,e,n){var r,i,o;if(this._weekdaysParseExact)return function(t,e,n){var r,i,o,a=t.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],r=0;r<7;++r)o=h([2e3,1]).day(r),this._minWeekdaysParse[r]=this.weekdaysMin(o,"").toLocaleLowerCase(),this._shortWeekdaysParse[r]=this.weekdaysShort(o,"").toLocaleLowerCase(),this._weekdaysParse[r]=this.weekdays(o,"").toLocaleLowerCase();return n?"dddd"===e?-1!==(i=Ot.call(this._weekdaysParse,a))?i:null:"ddd"===e?-1!==(i=Ot.call(this._shortWeekdaysParse,a))?i:null:-1!==(i=Ot.call(this._minWeekdaysParse,a))?i:null:"dddd"===e?-1!==(i=Ot.call(this._weekdaysParse,a))?i:-1!==(i=Ot.call(this._shortWeekdaysParse,a))?i:-1!==(i=Ot.call(this._minWeekdaysParse,a))?i:null:"ddd"===e?-1!==(i=Ot.call(this._shortWeekdaysParse,a))?i:-1!==(i=Ot.call(this._weekdaysParse,a))?i:-1!==(i=Ot.call(this._minWeekdaysParse,a))?i:null:-1!==(i=Ot.call(this._minWeekdaysParse,a))?i:-1!==(i=Ot.call(this._weekdaysParse,a))?i:-1!==(i=Ot.call(this._shortWeekdaysParse,a))?i:null}.call(this,t,e,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),r=0;r<7;r++){if(i=h([2e3,1]).day(r),n&&!this._fullWeekdaysParse[r]&&(this._fullWeekdaysParse[r]=new RegExp("^"+this.weekdays(i,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[r]=new RegExp("^"+this.weekdaysShort(i,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[r]=new RegExp("^"+this.weekdaysMin(i,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[r]||(o="^"+this.weekdays(i,"")+"|^"+this.weekdaysShort(i,"")+"|^"+this.weekdaysMin(i,""),this._weekdaysParse[r]=new RegExp(o.replace(".",""),"i")),n&&"dddd"===e&&this._fullWeekdaysParse[r].test(t))return r;if(n&&"ddd"===e&&this._shortWeekdaysParse[r].test(t))return r;if(n&&"dd"===e&&this._minWeekdaysParse[r].test(t))return r;if(!n&&this._weekdaysParse[r].test(t))return r}},xn.weekdaysRegex=function(t){return this._weekdaysParseExact?(d(this,"_weekdaysRegex")||te.call(this),t?this._weekdaysStrictRegex:this._weekdaysRegex):(d(this,"_weekdaysRegex")||(this._weekdaysRegex=Kt),this._weekdaysStrictRegex&&t?this._weekdaysStrictRegex:this._weekdaysRegex)},xn.weekdaysShortRegex=function(t){return this._weekdaysParseExact?(d(this,"_weekdaysRegex")||te.call(this),t?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(d(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Xt),this._weekdaysShortStrictRegex&&t?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},xn.weekdaysMinRegex=function(t){return this._weekdaysParseExact?(d(this,"_weekdaysRegex")||te.call(this),t?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(d(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Qt),this._weekdaysMinStrictRegex&&t?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},xn.isPM=function(t){return"p"===(t+"").toLowerCase().charAt(0)},xn.meridiem=function(t,e,n){return t>11?n?"pm":"PM":n?"am":"AM"},de("en",{dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(t){var e=t%10,n=1===k(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th";return t+n}}),r.lang=C("moment.lang is deprecated. Use moment.locale instead.",de),r.langData=C("moment.langData is deprecated. Use moment.localeData instead.",he);var Cn=Math.abs;function An(t,e,n,r){var i=qe(e,n);return t._milliseconds+=r*i._milliseconds,t._days+=r*i._days,t._months+=r*i._months,t._bubble()}function On(t){return t<0?Math.floor(t):Math.ceil(t)}function Dn(t){return 4800*t/146097}function Tn(t){return 146097*t/4800}function Pn(t){return function(){return this.as(t)}}var Rn=Pn("ms"),In=Pn("s"),Ln=Pn("m"),En=Pn("h"),Fn=Pn("d"),jn=Pn("w"),Nn=Pn("M"),$n=Pn("Q"),zn=Pn("y");function Bn(t){return function(){return this.isValid()?this._data[t]:NaN}}var Yn=Bn("milliseconds"),Wn=Bn("seconds"),Un=Bn("minutes"),Hn=Bn("hours"),Vn=Bn("days"),qn=Bn("months"),Gn=Bn("years"),Jn=Math.round,Zn={ss:44,s:45,m:45,h:22,d:26,M:11},Kn=Math.abs;function Xn(t){return(t>0)-(t<0)||+t}function Qn(){if(!this.isValid())return this.localeData().invalidDate();var t,e,n=Kn(this._milliseconds)/1e3,r=Kn(this._days),i=Kn(this._months);t=x(n/60),e=x(t/60),n%=60,t%=60;var o=x(i/12),a=i%=12,s=r,l=e,u=t,c=n?n.toFixed(3).replace(/\.?0+$/,""):"",d=this.asSeconds();if(!d)return"P0D";var f=d<0?"-":"",h=Xn(this._months)!==Xn(d)?"-":"",p=Xn(this._days)!==Xn(d)?"-":"",v=Xn(this._milliseconds)!==Xn(d)?"-":"";return f+"P"+(o?h+o+"Y":"")+(a?h+a+"M":"")+(s?p+s+"D":"")+(l||u||c?"T":"")+(l?v+l+"H":"")+(u?v+u+"M":"")+(c?v+c+"S":"")}var tr=Fe.prototype;return tr.isValid=function(){return this._isValid},tr.abs=function(){var t=this._data;return this._milliseconds=Cn(this._milliseconds),this._days=Cn(this._days),this._months=Cn(this._months),t.milliseconds=Cn(t.milliseconds),t.seconds=Cn(t.seconds),t.minutes=Cn(t.minutes),t.hours=Cn(t.hours),t.months=Cn(t.months),t.years=Cn(t.years),this},tr.add=function(t,e){return An(this,t,e,1)},tr.subtract=function(t,e){return An(this,t,e,-1)},tr.as=function(t){if(!this.isValid())return NaN;var e,n,r=this._milliseconds;if("month"===(t=E(t))||"quarter"===t||"year"===t)switch(e=this._days+r/864e5,n=this._months+Dn(e),t){case"month":return n;case"quarter":return n/3;case"year":return n/12}else switch(e=this._days+Math.round(Tn(this._months)),t){case"week":return e/7+r/6048e5;case"day":return e+r/864e5;case"hour":return 24*e+r/36e5;case"minute":return 1440*e+r/6e4;case"second":return 86400*e+r/1e3;case"millisecond":return Math.floor(864e5*e)+r;default:throw new Error("Unknown unit "+t)}},tr.asMilliseconds=Rn,tr.asSeconds=In,tr.asMinutes=Ln,tr.asHours=En,tr.asDays=Fn,tr.asWeeks=jn,tr.asMonths=Nn,tr.asQuarters=$n,tr.asYears=zn,tr.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*k(this._months/12):NaN},tr._bubble=function(){var t,e,n,r,i,o=this._milliseconds,a=this._days,s=this._months,l=this._data;return o>=0&&a>=0&&s>=0||o<=0&&a<=0&&s<=0||(o+=864e5*On(Tn(s)+a),a=0,s=0),l.milliseconds=o%1e3,t=x(o/1e3),l.seconds=t%60,e=x(t/60),l.minutes=e%60,n=x(e/60),l.hours=n%24,a+=x(n/24),i=x(Dn(a)),s+=i,a-=On(Tn(i)),r=x(s/12),s%=12,l.days=a,l.months=s,l.years=r,this},tr.clone=function(){return qe(this)},tr.get=function(t){return t=E(t),this.isValid()?this[t+"s"]():NaN},tr.milliseconds=Yn,tr.seconds=Wn,tr.minutes=Un,tr.hours=Hn,tr.days=Vn,tr.weeks=function(){return x(this.days()/7)},tr.months=qn,tr.years=Gn,tr.humanize=function(t){if(!this.isValid())return this.localeData().invalidDate();var e=this.localeData(),n=function(t,e,n){var r=qe(t).abs(),i=Jn(r.as("s")),o=Jn(r.as("m")),a=Jn(r.as("h")),s=Jn(r.as("d")),l=Jn(r.as("M")),u=Jn(r.as("y")),c=i<=Zn.ss&&["s",i]||i<Zn.s&&["ss",i]||o<=1&&["m"]||o<Zn.m&&["mm",o]||a<=1&&["h"]||a<Zn.h&&["hh",a]||s<=1&&["d"]||s<Zn.d&&["dd",s]||l<=1&&["M"]||l<Zn.M&&["MM",l]||u<=1&&["y"]||["yy",u];return c[2]=e,c[3]=+t>0,c[4]=n,function(t,e,n,r,i){return i.relativeTime(e||1,!!n,t,r)}.apply(null,c)}(this,!t,e);return t&&(n=e.pastFuture(+this,n)),e.postformat(n)},tr.toISOString=Qn,tr.toString=Qn,tr.toJSON=Qn,tr.locale=en,tr.localeData=rn,tr.toIsoString=C("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Qn),tr.lang=nn,U("X",0,0,"unix"),U("x",0,0,"valueOf"),ct("x",ot),ct("X",/[+-]?\d+(\.\d{1,3})?/),pt("X",function(t,e,n){n._d=new Date(1e3*parseFloat(t,10))}),pt("x",function(t,e,n){n._d=new Date(k(t))}),r.version="2.24.0",e=Pe,r.fn=_n,r.min=function(){return Le("isBefore",[].slice.call(arguments,0))},r.max=function(){return Le("isAfter",[].slice.call(arguments,0))},r.now=function(){return Date.now?Date.now():+new Date},r.utc=h,r.unix=function(t){return Pe(1e3*t)},r.months=function(t,e){return Sn(t,e,"months")},r.isDate=u,r.locale=de,r.invalid=g,r.duration=qe,r.isMoment=w,r.weekdays=function(t,e,n){return Mn(t,e,n,"weekdays")},r.parseZone=function(){return Pe.apply(null,arguments).parseZone()},r.localeData=he,r.isDuration=je,r.monthsShort=function(t,e){return Sn(t,e,"monthsShort")},r.weekdaysMin=function(t,e,n){return Mn(t,e,n,"weekdaysMin")},r.defineLocale=fe,r.updateLocale=function(t,e){if(null!=e){var n,r,i=ae;null!=(r=ce(t))&&(i=r._config),e=P(i,e),(n=new R(e)).parentLocale=se[t],se[t]=n,de(t)}else null!=se[t]&&(null!=se[t].parentLocale?se[t]=se[t].parentLocale:null!=se[t]&&delete se[t]);return se[t]},r.locales=function(){return A(se)},r.weekdaysShort=function(t,e,n){return Mn(t,e,n,"weekdaysShort")},r.normalizeUnits=E,r.relativeTimeRounding=function(t){return void 0===t?Jn:"function"==typeof t&&(Jn=t,!0)},r.relativeTimeThreshold=function(t,e){return void 0!==Zn[t]&&(void 0===e?Zn[t]:(Zn[t]=e,"s"===t&&(Zn.ss=e-1),!0))},r.calendarFormat=function(t,e){var n=t.diff(e,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},r.prototype=_n,r.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},r}()});Lp="function"==typeof Lp?Lp:window.moment;var Ep=Number.MIN_SAFE_INTEGER||-9007199254740991,Fp=Number.MAX_SAFE_INTEGER||9007199254740991,jp={millisecond:{common:!0,size:1,steps:[1,2,5,10,20,50,100,250,500]},second:{common:!0,size:1e3,steps:[1,2,5,10,15,30]},minute:{common:!0,size:6e4,steps:[1,2,5,10,15,30]},hour:{common:!0,size:36e5,steps:[1,2,3,6,12]},day:{common:!0,size:864e5,steps:[1,2,5]},week:{common:!1,size:6048e5,steps:[1,2,3,4]},month:{common:!0,size:2628e6,steps:[1,2,3]},quarter:{common:!1,size:7884e6,steps:[1,2,3,4]},year:{common:!0,size:3154e7}},Np=Object.keys(jp);function $p(t,e){return t-e}function zp(t){var e,n,r,i={},o=[];for(e=0,n=t.length;e<n;++e)i[r=t[e]]||(i[r]=!0,o.push(r));return o}function Bp(t,e,n,r){var i=function(t,e,n){for(var r,i,o,a=0,s=t.length-1;a>=0&&a<=s;){if(i=t[(r=a+s>>1)-1]||null,o=t[r],!i)return{lo:null,hi:o};if(o[e]<n)a=r+1;else{if(!(i[e]>n))return{lo:i,hi:o};s=r-1}}return{lo:o,hi:null}}(t,e,n),o=i.lo?i.hi?i.lo:t[t.length-2]:t[0],a=i.lo?i.hi?i.hi:t[t.length-1]:t[1],s=a[e]-o[e],l=s?(n-o[e])/s:0,u=(a[r]-o[r])*l;return o[r]+u}function Yp(t,e){var n=e.parser,r=e.parser||e.format;return"function"==typeof n?n(t):"string"==typeof t&&"string"==typeof r?Lp(t,r):(t instanceof Lp||(t=Lp(t)),t.isValid()?t:"function"==typeof r?r(t):t)}function Wp(t,e){if(Bf.isNullOrUndef(t))return null;var n=e.options.time,r=Yp(e.getRightValue(t),n);return r.isValid()?(n.round&&r.startOf(n.round),r.valueOf()):null}function Up(t){for(var e=Np.indexOf(t)+1,n=Np.length;e<n;++e)if(jp[Np[e]].common)return Np[e]}function Hp(t,e,n,r){var i,o=r.time,a=o.unit||function(t,e,n,r){var i,o,a,s=Np.length;for(i=Np.indexOf(t);i<s-1;++i)if(a=(o=jp[Np[i]]).steps?o.steps[o.steps.length-1]:Fp,o.common&&Math.ceil((n-e)/(a*o.size))<=r)return Np[i];return Np[s-1]}(o.minUnit,t,e,n),s=Up(a),l=Bf.valueOrDefault(o.stepSize,o.unitStepSize),u="week"===a&&o.isoWeekday,c=r.ticks.major.enabled,d=jp[a],f=Lp(t),h=Lp(e),p=[];for(l||(l=function(t,e,n,r){var i,o,a,s=e-t,l=jp[n],u=l.size,c=l.steps;if(!c)return Math.ceil(s/(r*u));for(i=0,o=c.length;i<o&&(a=c[i],!(Math.ceil(s/(u*a))<=r));++i);return a}(t,e,a,n)),u&&(f=f.isoWeekday(u),h=h.isoWeekday(u)),f=f.startOf(u?"day":a),(h=h.startOf(u?"day":a))<e&&h.add(1,a),i=Lp(f),c&&s&&!u&&!o.round&&(i.startOf(s),i.add(~~((f-i)/(d.size*l))*l,a));i<h;i.add(l,a))p.push(+i);return p.push(+i),p}Hf._set("bar",{hover:{mode:"label"},scales:{xAxes:[{type:"category",categoryPercentage:.8,barPercentage:.9,offset:!0,gridLines:{offsetGridLines:!0}}],yAxes:[{type:"linear"}]}}),Hf._set("horizontalBar",{hover:{mode:"index",axis:"y"},scales:{xAxes:[{type:"linear",position:"bottom"}],yAxes:[{position:"left",type:"category",categoryPercentage:.8,barPercentage:.9,offset:!0,gridLines:{offsetGridLines:!0}}]},elements:{rectangle:{borderSkipped:"left"}},tooltips:{callbacks:{title:function(t,e){var n="";return t.length>0&&(t[0].yLabel?n=t[0].yLabel:e.labels.length>0&&t[0].index<e.labels.length&&(n=e.labels[t[0].index])),n},label:function(t,e){return(e.datasets[t.datasetIndex].label||"")+": "+t.xLabel}},mode:"index",axis:"y"}});Hf._set("bubble",{hover:{mode:"single"},scales:{xAxes:[{type:"linear",position:"bottom",id:"x-axis-0"}],yAxes:[{type:"linear",position:"left",id:"y-axis-0"}]},tooltips:{callbacks:{title:function(){return""},label:function(t,e){var n=e.datasets[t.datasetIndex].label||"",r=e.datasets[t.datasetIndex].data[t.index];return n+": ("+t.xLabel+", "+t.yLabel+", "+r.r+")"}}}});Hf._set("doughnut",{animation:{animateRotate:!0,animateScale:!1},hover:{mode:"single"},legendCallback:function(t){var e=[];e.push('<ul class="'+t.id+'-legend">');var n=t.data,r=n.datasets,i=n.labels;if(r.length)for(var o=0;o<r[0].data.length;++o)e.push('<li><span style="background-color:'+r[0].backgroundColor[o]+'"></span>'),i[o]&&e.push(i[o]),e.push("</li>");return e.push("</ul>"),e.join("")},legend:{labels:{generateLabels:function(t){var e=t.data;return e.labels.length&&e.datasets.length?e.labels.map(function(n,r){var i=t.getDatasetMeta(0),o=e.datasets[0],a=i.data[r],s=a&&a.custom||{},l=Bf.valueAtIndexOrDefault,u=t.options.elements.arc;return{text:n,fillStyle:s.backgroundColor?s.backgroundColor:l(o.backgroundColor,r,u.backgroundColor),strokeStyle:s.borderColor?s.borderColor:l(o.borderColor,r,u.borderColor),lineWidth:s.borderWidth?s.borderWidth:l(o.borderWidth,r,u.borderWidth),hidden:isNaN(o.data[r])||i.data[r].hidden,index:r}}):[]}},onClick:function(t,e){var n,r,i,o=e.index,a=this.chart;for(n=0,r=(a.data.datasets||[]).length;n<r;++n)(i=a.getDatasetMeta(n)).data[o]&&(i.data[o].hidden=!i.data[o].hidden);a.update()}},cutoutPercentage:50,rotation:-.5*Math.PI,circumference:2*Math.PI,tooltips:{callbacks:{title:function(){return""},label:function(t,e){var n=e.labels[t.index],r=": "+e.datasets[t.datasetIndex].data[t.index];return Bf.isArray(n)?(n=n.slice())[0]+=r:n+=r,n}}}}),Hf._set("pie",Bf.clone(Hf.doughnut)),Hf._set("pie",{cutoutPercentage:0});Hf._set("line",{showLines:!0,spanGaps:!1,hover:{mode:"label"},scales:{xAxes:[{type:"category",id:"x-axis-0"}],yAxes:[{type:"linear",id:"y-axis-0"}]}});Hf._set("polarArea",{scale:{type:"radialLinear",angleLines:{display:!1},gridLines:{circular:!0},pointLabels:{display:!1},ticks:{beginAtZero:!0}},animation:{animateRotate:!0,animateScale:!0},startAngle:-.5*Math.PI,legendCallback:function(t){var e=[];e.push('<ul class="'+t.id+'-legend">');var n=t.data,r=n.datasets,i=n.labels;if(r.length)for(var o=0;o<r[0].data.length;++o)e.push('<li><span style="background-color:'+r[0].backgroundColor[o]+'"></span>'),i[o]&&e.push(i[o]),e.push("</li>");return e.push("</ul>"),e.join("")},legend:{labels:{generateLabels:function(t){var e=t.data;return e.labels.length&&e.datasets.length?e.labels.map(function(n,r){var i=t.getDatasetMeta(0),o=e.datasets[0],a=i.data[r].custom||{},s=Bf.valueAtIndexOrDefault,l=t.options.elements.arc;return{text:n,fillStyle:a.backgroundColor?a.backgroundColor:s(o.backgroundColor,r,l.backgroundColor),strokeStyle:a.borderColor?a.borderColor:s(o.borderColor,r,l.borderColor),lineWidth:a.borderWidth?a.borderWidth:s(o.borderWidth,r,l.borderWidth),hidden:isNaN(o.data[r])||i.data[r].hidden,index:r}}):[]}},onClick:function(t,e){var n,r,i,o=e.index,a=this.chart;for(n=0,r=(a.data.datasets||[]).length;n<r;++n)(i=a.getDatasetMeta(n)).data[o].hidden=!i.data[o].hidden;a.update()}},tooltips:{callbacks:{title:function(){return""},label:function(t,e){return e.labels[t.index]+": "+t.yLabel}}}});Hf._set("radar",{scale:{type:"radialLinear"},elements:{line:{tension:0}}});Hf._set("scatter",{hover:{mode:"single"},scales:{xAxes:[{id:"x-axis-1",type:"linear",position:"bottom"}],yAxes:[{id:"y-axis-1",type:"linear",position:"left"}]},showLines:!1,tooltips:{callbacks:{title:function(){return""},label:function(t){return"("+t.xLabel+", "+t.yLabel+")"}}}});Hf._set("global",{plugins:{filler:{propagate:!0}}});var Vp={dataset:function(t){var e=t.fill,n=t.chart,r=n.getDatasetMeta(e),i=r&&n.isDatasetVisible(e)&&r.dataset._children||[],o=i.length||0;return o?function(t,e){return e<o&&i[e]._view||null}:null},boundary:function(t){var e=t.boundary,n=e?e.x:null,r=e?e.y:null;return function(t){return{x:null===n?t.x:n,y:null===r?t.y:r}}}};function qp(t,e,n){var r,i=t._model||{},o=i.fill;if(void 0===o&&(o=!!i.backgroundColor),!1===o||null===o)return!1;if(!0===o)return"origin";if(r=parseFloat(o,10),isFinite(r)&&Math.floor(r)===r)return"-"!==o[0]&&"+"!==o[0]||(r=e+r),!(r===e||r<0||r>=n)&&r;switch(o){case"bottom":return"start";case"top":return"end";case"zero":return"origin";case"origin":case"start":case"end":return o;default:return!1}}function Gp(t){var e,n=t.el._model||{},r=t.el._scale||{},i=t.fill,o=null;if(isFinite(i))return null;if("start"===i?o=void 0===n.scaleBottom?r.bottom:n.scaleBottom:"end"===i?o=void 0===n.scaleTop?r.top:n.scaleTop:void 0!==n.scaleZero?o=n.scaleZero:r.getBasePosition?o=r.getBasePosition():r.getBasePixel&&(o=r.getBasePixel()),void 0!==o&&null!==o){if(void 0!==o.x&&void 0!==o.y)return o;if("number"==typeof o&&isFinite(o))return{x:(e=r.isHorizontal())?o:null,y:e?null:o}}return null}function Jp(t,e,n){var r,i=t[e].fill,o=[e];if(!n)return i;for(;!1!==i&&-1===o.indexOf(i);){if(!isFinite(i))return i;if(!(r=t[i]))return!1;if(r.visible)return i;o.push(i),i=r.fill}return!1}function Zp(t){var e=t.fill,n="dataset";return!1===e?null:(isFinite(e)||(n="boundary"),Vp[n](t))}function Kp(t){return t&&!t.skip}function Xp(t,e,n,r,i){var o;if(r&&i){for(t.moveTo(e[0].x,e[0].y),o=1;o<r;++o)Bf.canvas.lineTo(t,e[o-1],e[o]);for(t.lineTo(n[i-1].x,n[i-1].y),o=i-1;o>0;--o)Bf.canvas.lineTo(t,n[o],n[o-1],!0)}}var Qp={id:"filler",afterDatasetsUpdate:function(t,e){var n,r,i,o,a=(t.data.datasets||[]).length,s=e.propagate,l=[];for(r=0;r<a;++r)o=null,(i=(n=t.getDatasetMeta(r)).dataset)&&i._model&&i instanceof Kh.Line&&(o={visible:t.isDatasetVisible(r),fill:qp(i,r,a),chart:t,el:i}),n.$filler=o,l.push(o);for(r=0;r<a;++r)(o=l[r])&&(o.fill=Jp(l,r,s),o.boundary=Gp(o),o.mapper=Zp(o))},beforeDatasetDraw:function(t,e){var n=e.meta.$filler;if(n){var r=t.ctx,i=n.el,o=i._view,a=i._children||[],s=n.mapper,l=o.backgroundColor||Hf.global.defaultColor;s&&l&&a.length&&(Bf.canvas.clipArea(r,t.chartArea),function(t,e,n,r,i,o){var a,s,l,u,c,d,f,h=e.length,p=r.spanGaps,v=[],g=[],m=0,y=0;for(t.beginPath(),a=0,s=h+!!o;a<s;++a)c=n(u=e[l=a%h]._view,l,r),d=Kp(u),f=Kp(c),d&&f?(m=v.push(u),y=g.push(c)):m&&y&&(p?(d&&v.push(u),f&&g.push(c)):(Xp(t,v,g,m,y),m=y=0,v=[],g=[]));Xp(t,v,g,m,y),t.closePath(),t.fillStyle=i,t.fill()}(r,a,s,o,l,i._loop),Bf.canvas.unclipArea(r))}}},tv=Bf.noop;function ev(t,e){return t.usePointStyle?e*Math.SQRT2:t.boxWidth}Hf._set("global",{legend:{display:!0,position:"top",fullWidth:!0,reverse:!1,weight:1e3,onClick:function(t,e){var n=e.datasetIndex,r=this.chart,i=r.getDatasetMeta(n);i.hidden=null===i.hidden?!r.data.datasets[n].hidden:null,r.update()},onHover:null,labels:{boxWidth:40,padding:10,generateLabels:function(t){var e=t.data;return Bf.isArray(e.datasets)?e.datasets.map(function(e,n){return{text:e.label,fillStyle:Bf.isArray(e.backgroundColor)?e.backgroundColor[0]:e.backgroundColor,hidden:!t.isDatasetVisible(n),lineCap:e.borderCapStyle,lineDash:e.borderDash,lineDashOffset:e.borderDashOffset,lineJoin:e.borderJoinStyle,lineWidth:e.borderWidth,strokeStyle:e.borderColor,pointStyle:e.pointStyle,datasetIndex:n}},this):[]}}},legendCallback:function(t){var e=[];e.push('<ul class="'+t.id+'-legend">');for(var n=0;n<t.data.datasets.length;n++)e.push('<li><span style="background-color:'+t.data.datasets[n].backgroundColor+'"></span>'),t.data.datasets[n].label&&e.push(t.data.datasets[n].label),e.push("</li>");return e.push("</ul>"),e.join("")}});var nv=zh.extend({initialize:function(t){Bf.extend(this,t),this.legendHitBoxes=[],this.doughnutMode=!1},beforeUpdate:tv,update:function(t,e,n){var r=this;return r.beforeUpdate(),r.maxWidth=t,r.maxHeight=e,r.margins=n,r.beforeSetDimensions(),r.setDimensions(),r.afterSetDimensions(),r.beforeBuildLabels(),r.buildLabels(),r.afterBuildLabels(),r.beforeFit(),r.fit(),r.afterFit(),r.afterUpdate(),r.minSize},afterUpdate:tv,beforeSetDimensions:tv,setDimensions:function(){var t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=0,t.right=t.width):(t.height=t.maxHeight,t.top=0,t.bottom=t.height),t.paddingLeft=0,t.paddingTop=0,t.paddingRight=0,t.paddingBottom=0,t.minSize={width:0,height:0}},afterSetDimensions:tv,beforeBuildLabels:tv,buildLabels:function(){var t=this,e=t.options.labels||{},n=Bf.callback(e.generateLabels,[t.chart],t)||[];e.filter&&(n=n.filter(function(n){return e.filter(n,t.chart.data)})),t.options.reverse&&n.reverse(),t.legendItems=n},afterBuildLabels:tv,beforeFit:tv,fit:function(){var t=this,e=t.options,n=e.labels,r=e.display,i=t.ctx,o=Hf.global,a=Bf.valueOrDefault,s=a(n.fontSize,o.defaultFontSize),l=a(n.fontStyle,o.defaultFontStyle),u=a(n.fontFamily,o.defaultFontFamily),c=Bf.fontString(s,l,u),d=t.legendHitBoxes=[],f=t.minSize,h=t.isHorizontal();if(h?(f.width=t.maxWidth,f.height=r?10:0):(f.width=r?10:0,f.height=t.maxHeight),r)if(i.font=c,h){var p=t.lineWidths=[0],v=t.legendItems.length?s+n.padding:0;i.textAlign="left",i.textBaseline="top",Bf.each(t.legendItems,function(e,r){var o=ev(n,s)+s/2+i.measureText(e.text).width;p[p.length-1]+o+n.padding>=t.width&&(v+=s+n.padding,p[p.length]=t.left),d[r]={left:0,top:0,width:o,height:s},p[p.length-1]+=o+n.padding}),f.height+=v}else{var g=n.padding,m=t.columnWidths=[],y=n.padding,b=0,_=0,w=s+g;Bf.each(t.legendItems,function(t,e){var r=ev(n,s)+s/2+i.measureText(t.text).width;_+w>f.height&&(y+=b+n.padding,m.push(b),b=0,_=0),b=Math.max(b,r),_+=w,d[e]={left:0,top:0,width:r,height:s}}),y+=b,m.push(b),f.width+=y}t.width=f.width,t.height=f.height},afterFit:tv,isHorizontal:function(){return"top"===this.options.position||"bottom"===this.options.position},draw:function(){var t=this,e=t.options,n=e.labels,r=Hf.global,i=r.elements.line,o=t.width,a=t.lineWidths;if(e.display){var s,l=t.ctx,u=Bf.valueOrDefault,c=u(n.fontColor,r.defaultFontColor),d=u(n.fontSize,r.defaultFontSize),f=u(n.fontStyle,r.defaultFontStyle),h=u(n.fontFamily,r.defaultFontFamily),p=Bf.fontString(d,f,h);l.textAlign="left",l.textBaseline="middle",l.lineWidth=.5,l.strokeStyle=c,l.fillStyle=c,l.font=p;var v=ev(n,d),g=t.legendHitBoxes,m=t.isHorizontal();s=m?{x:t.left+(o-a[0])/2,y:t.top+n.padding,line:0}:{x:t.left+n.padding,y:t.top+n.padding,line:0};var y=d+n.padding;Bf.each(t.legendItems,function(c,f){var h=l.measureText(c.text).width,p=v+d/2+h,b=s.x,_=s.y;m?b+p>=o&&(_=s.y+=y,s.line++,b=s.x=t.left+(o-a[s.line])/2):_+y>t.bottom&&(b=s.x=b+t.columnWidths[s.line]+n.padding,_=s.y=t.top+n.padding,s.line++),function(t,n,o){if(!(isNaN(v)||v<=0)){l.save(),l.fillStyle=u(o.fillStyle,r.defaultColor),l.lineCap=u(o.lineCap,i.borderCapStyle),l.lineDashOffset=u(o.lineDashOffset,i.borderDashOffset),l.lineJoin=u(o.lineJoin,i.borderJoinStyle),l.lineWidth=u(o.lineWidth,i.borderWidth),l.strokeStyle=u(o.strokeStyle,r.defaultColor);var a=0===u(o.lineWidth,i.borderWidth);if(l.setLineDash&&l.setLineDash(u(o.lineDash,i.borderDash)),e.labels&&e.labels.usePointStyle){var s=d*Math.SQRT2/2,c=s/Math.SQRT2,f=t+c,h=n+c;Bf.canvas.drawPoint(l,o.pointStyle,s,f,h)}else a||l.strokeRect(t,n,v,d),l.fillRect(t,n,v,d);l.restore()}}(b,_,c),g[f].left=b,g[f].top=_,function(t,e,n,r){var i=d/2,o=v+i+t,a=e+i;l.fillText(n.text,o,a),n.hidden&&(l.beginPath(),l.lineWidth=2,l.moveTo(o,a),l.lineTo(o+r,a),l.stroke())}(b,_,c,h),m?s.x+=p+n.padding:s.y+=y})}},handleEvent:function(t){var e=this,n=e.options,r="mouseup"===t.type?"click":t.type,i=!1;if("mousemove"===r){if(!n.onHover)return}else{if("click"!==r)return;if(!n.onClick)return}var o=t.x,a=t.y;if(o>=e.left&&o<=e.right&&a>=e.top&&a<=e.bottom)for(var s=e.legendHitBoxes,l=0;l<s.length;++l){var u=s[l];if(o>=u.left&&o<=u.left+u.width&&a>=u.top&&a<=u.top+u.height){if("click"===r){n.onClick.call(e,t.native,e.legendItems[l]),i=!0;break}if("mousemove"===r){n.onHover.call(e,t.native,e.legendItems[l]),i=!0;break}}}return i}});function rv(t,e){var n=new nv({ctx:t.ctx,options:e,chart:t});jh.configure(t,n,e),jh.addBox(t,n),t.legend=n}var iv={id:"legend",_element:nv,beforeInit:function(t){var e=t.options.legend;e&&rv(t,e)},beforeUpdate:function(t){var e=t.options.legend,n=t.legend;e?(Bf.mergeIf(e,Hf.global.legend),n?(jh.configure(t,n,e),n.options=e):rv(t,e)):n&&(jh.removeBox(t,n),delete t.legend)},afterEvent:function(t,e){var n=t.legend;n&&n.handleEvent(e)}},ov=Bf.noop;Hf._set("global",{title:{display:!1,fontStyle:"bold",fullWidth:!0,lineHeight:1.2,padding:10,position:"top",text:"",weight:2e3}});var av=zh.extend({initialize:function(t){Bf.extend(this,t),this.legendHitBoxes=[]},beforeUpdate:ov,update:function(t,e,n){var r=this;return r.beforeUpdate(),r.maxWidth=t,r.maxHeight=e,r.margins=n,r.beforeSetDimensions(),r.setDimensions(),r.afterSetDimensions(),r.beforeBuildLabels(),r.buildLabels(),r.afterBuildLabels(),r.beforeFit(),r.fit(),r.afterFit(),r.afterUpdate(),r.minSize},afterUpdate:ov,beforeSetDimensions:ov,setDimensions:function(){var t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=0,t.right=t.width):(t.height=t.maxHeight,t.top=0,t.bottom=t.height),t.paddingLeft=0,t.paddingTop=0,t.paddingRight=0,t.paddingBottom=0,t.minSize={width:0,height:0}},afterSetDimensions:ov,beforeBuildLabels:ov,buildLabels:ov,afterBuildLabels:ov,beforeFit:ov,fit:function(){var t=this,e=Bf.valueOrDefault,n=t.options,r=n.display,i=e(n.fontSize,Hf.global.defaultFontSize),o=t.minSize,a=Bf.isArray(n.text)?n.text.length:1,s=Bf.options.toLineHeight(n.lineHeight,i),l=r?a*s+2*n.padding:0;t.isHorizontal()?(o.width=t.maxWidth,o.height=l):(o.width=l,o.height=t.maxHeight),t.width=o.width,t.height=o.height},afterFit:ov,isHorizontal:function(){var t=this.options.position;return"top"===t||"bottom"===t},draw:function(){var t=this,e=t.ctx,n=Bf.valueOrDefault,r=t.options,i=Hf.global;if(r.display){var o,a,s,l=n(r.fontSize,i.defaultFontSize),u=n(r.fontStyle,i.defaultFontStyle),c=n(r.fontFamily,i.defaultFontFamily),d=Bf.fontString(l,u,c),f=Bf.options.toLineHeight(r.lineHeight,l),h=f/2+r.padding,p=0,v=t.top,g=t.left,m=t.bottom,y=t.right;e.fillStyle=n(r.fontColor,i.defaultFontColor),e.font=d,t.isHorizontal()?(a=g+(y-g)/2,s=v+h,o=y-g):(a="left"===r.position?g+h:y-h,s=v+(m-v)/2,o=m-v,p=Math.PI*("left"===r.position?-.5:.5)),e.save(),e.translate(a,s),e.rotate(p),e.textAlign="center",e.textBaseline="middle";var b=r.text;if(Bf.isArray(b))for(var _=0,w=0;w<b.length;++w)e.fillText(b[w],0,_,o),_+=f;else e.fillText(b,0,0,o);e.restore()}}});function sv(t,e){var n=new av({ctx:t.ctx,options:e,chart:t});jh.configure(t,n,e),jh.addBox(t,n),t.titleBlock=n}var lv={},uv=Qp,cv=iv,dv={id:"title",_element:av,beforeInit:function(t){var e=t.options.title;e&&sv(t,e)},beforeUpdate:function(t){var e=t.options.title,n=t.titleBlock;e?(Bf.mergeIf(e,Hf.global.title),n?(jh.configure(t,n,e),n.options=e):sv(t,e)):n&&(jh.removeBox(t,n),delete t.titleBlock)}};lv.filler=uv,lv.legend=cv,lv.title=dv;var fv,hv,pv=function(){var t=function(t,e){return this.construct(t,e),this};return t.Chart=t,t}();for(var vv in pv.helpers=Bf,function(){function t(t,e,n){var r;return"string"==typeof t?(r=parseInt(t,10),-1!==t.indexOf("%")&&(r=r/100*e.parentNode[n])):r=t,r}function e(t){return void 0!==t&&null!==t&&"none"!==t}function n(n,r,i){var o=document.defaultView,a=Bf._getParentNode(n),s=o.getComputedStyle(n)[r],l=o.getComputedStyle(a)[r],u=e(s),c=e(l),d=Number.POSITIVE_INFINITY;return u||c?Math.min(u?t(s,n,i):d,c?t(l,a,i):d):"none"}Bf.configMerge=function(){return Bf.merge(Bf.clone(arguments[0]),[].slice.call(arguments,1),{merger:function(t,e,n,r){var i=e[t]||{},o=n[t];"scales"===t?e[t]=Bf.scaleMerge(i,o):"scale"===t?e[t]=Bf.merge(i,[Nh.getScaleDefaults(o.type),o]):Bf._merger(t,e,n,r)}})},Bf.scaleMerge=function(){return Bf.merge(Bf.clone(arguments[0]),[].slice.call(arguments,1),{merger:function(t,e,n,r){if("xAxes"===t||"yAxes"===t){var i,o,a,s=n[t].length;for(e[t]||(e[t]=[]),i=0;i<s;++i)a=n[t][i],o=Bf.valueOrDefault(a.type,"xAxes"===t?"category":"linear"),i>=e[t].length&&e[t].push({}),!e[t][i].type||a.type&&a.type!==e[t][i].type?Bf.merge(e[t][i],[Nh.getScaleDefaults(o),a]):Bf.merge(e[t][i],a)}else Bf._merger(t,e,n,r)}})},Bf.where=function(t,e){if(Bf.isArray(t)&&Array.prototype.filter)return t.filter(e);var n=[];return Bf.each(t,function(t){e(t)&&n.push(t)}),n},Bf.findIndex=Array.prototype.findIndex?function(t,e,n){return t.findIndex(e,n)}:function(t,e,n){n=void 0===n?t:n;for(var r=0,i=t.length;r<i;++r)if(e.call(n,t[r],r,t))return r;return-1},Bf.findNextWhere=function(t,e,n){Bf.isNullOrUndef(n)&&(n=-1);for(var r=n+1;r<t.length;r++){var i=t[r];if(e(i))return i}},Bf.findPreviousWhere=function(t,e,n){Bf.isNullOrUndef(n)&&(n=t.length);for(var r=n-1;r>=0;r--){var i=t[r];if(e(i))return i}},Bf.isNumber=function(t){return!isNaN(parseFloat(t))&&isFinite(t)},Bf.almostEquals=function(t,e,n){return Math.abs(t-e)<n},Bf.almostWhole=function(t,e){var n=Math.round(t);return n-e<t&&n+e>t},Bf.max=function(t){return t.reduce(function(t,e){return isNaN(e)?t:Math.max(t,e)},Number.NEGATIVE_INFINITY)},Bf.min=function(t){return t.reduce(function(t,e){return isNaN(e)?t:Math.min(t,e)},Number.POSITIVE_INFINITY)},Bf.sign=Math.sign?function(t){return Math.sign(t)}:function(t){return 0==(t=+t)||isNaN(t)?t:t>0?1:-1},Bf.log10=Math.log10?function(t){return Math.log10(t)}:function(t){var e=Math.log(t)*Math.LOG10E,n=Math.round(e);return t===Math.pow(10,n)?n:e},Bf.toRadians=function(t){return t*(Math.PI/180)},Bf.toDegrees=function(t){return t*(180/Math.PI)},Bf.getAngleFromPoint=function(t,e){var n=e.x-t.x,r=e.y-t.y,i=Math.sqrt(n*n+r*r),o=Math.atan2(r,n);return o<-.5*Math.PI&&(o+=2*Math.PI),{angle:o,distance:i}},Bf.distanceBetweenPoints=function(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))},Bf.aliasPixel=function(t){return t%2==0?0:.5},Bf.splineCurve=function(t,e,n,r){var i=t.skip?e:t,o=e,a=n.skip?e:n,s=Math.sqrt(Math.pow(o.x-i.x,2)+Math.pow(o.y-i.y,2)),l=Math.sqrt(Math.pow(a.x-o.x,2)+Math.pow(a.y-o.y,2)),u=s/(s+l),c=l/(s+l),d=r*(u=isNaN(u)?0:u),f=r*(c=isNaN(c)?0:c);return{previous:{x:o.x-d*(a.x-i.x),y:o.y-d*(a.y-i.y)},next:{x:o.x+f*(a.x-i.x),y:o.y+f*(a.y-i.y)}}},Bf.EPSILON=Number.EPSILON||1e-14,Bf.splineCurveMonotone=function(t){var e,n,r,i,o,a,s,l,u,c=(t||[]).map(function(t){return{model:t._model,deltaK:0,mK:0}}),d=c.length;for(e=0;e<d;++e)if(!(r=c[e]).model.skip){if(n=e>0?c[e-1]:null,(i=e<d-1?c[e+1]:null)&&!i.model.skip){var f=i.model.x-r.model.x;r.deltaK=0!==f?(i.model.y-r.model.y)/f:0}!n||n.model.skip?r.mK=r.deltaK:!i||i.model.skip?r.mK=n.deltaK:this.sign(n.deltaK)!==this.sign(r.deltaK)?r.mK=0:r.mK=(n.deltaK+r.deltaK)/2}for(e=0;e<d-1;++e)r=c[e],i=c[e+1],r.model.skip||i.model.skip||(Bf.almostEquals(r.deltaK,0,this.EPSILON)?r.mK=i.mK=0:(o=r.mK/r.deltaK,a=i.mK/r.deltaK,(l=Math.pow(o,2)+Math.pow(a,2))<=9||(s=3/Math.sqrt(l),r.mK=o*s*r.deltaK,i.mK=a*s*r.deltaK)));for(e=0;e<d;++e)(r=c[e]).model.skip||(n=e>0?c[e-1]:null,i=e<d-1?c[e+1]:null,n&&!n.model.skip&&(u=(r.model.x-n.model.x)/3,r.model.controlPointPreviousX=r.model.x-u,r.model.controlPointPreviousY=r.model.y-u*r.mK),i&&!i.model.skip&&(u=(i.model.x-r.model.x)/3,r.model.controlPointNextX=r.model.x+u,r.model.controlPointNextY=r.model.y+u*r.mK))},Bf.nextItem=function(t,e,n){return n?e>=t.length-1?t[0]:t[e+1]:e>=t.length-1?t[t.length-1]:t[e+1]},Bf.previousItem=function(t,e,n){return n?e<=0?t[t.length-1]:t[e-1]:e<=0?t[0]:t[e-1]},Bf.niceNum=function(t,e){var n=Math.floor(Bf.log10(t)),r=t/Math.pow(10,n);return(e?r<1.5?1:r<3?2:r<7?5:10:r<=1?1:r<=2?2:r<=5?5:10)*Math.pow(10,n)},Bf.requestAnimFrame="undefined"==typeof window?function(t){t()}:window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(t){return window.setTimeout(t,1e3/60)},Bf.getRelativePosition=function(t,e){var n,r,i=t.originalEvent||t,o=t.target||t.srcElement,a=o.getBoundingClientRect(),s=i.touches;s&&s.length>0?(n=s[0].clientX,r=s[0].clientY):(n=i.clientX,r=i.clientY);var l=parseFloat(Bf.getStyle(o,"padding-left")),u=parseFloat(Bf.getStyle(o,"padding-top")),c=parseFloat(Bf.getStyle(o,"padding-right")),d=parseFloat(Bf.getStyle(o,"padding-bottom")),f=a.right-a.left-l-c,h=a.bottom-a.top-u-d;return{x:n=Math.round((n-a.left-l)/f*o.width/e.currentDevicePixelRatio),y:r=Math.round((r-a.top-u)/h*o.height/e.currentDevicePixelRatio)}},Bf.getConstraintWidth=function(t){return n(t,"max-width","clientWidth")},Bf.getConstraintHeight=function(t){return n(t,"max-height","clientHeight")},Bf._calculatePadding=function(t,e,n){return(e=Bf.getStyle(t,e)).indexOf("%")>-1?n/parseInt(e,10):parseInt(e,10)},Bf._getParentNode=function(t){var e=t.parentNode;return e&&e.host&&(e=e.host),e},Bf.getMaximumWidth=function(t){var e=Bf._getParentNode(t);if(!e)return t.clientWidth;var n=e.clientWidth,r=n-Bf._calculatePadding(e,"padding-left",n)-Bf._calculatePadding(e,"padding-right",n),i=Bf.getConstraintWidth(t);return isNaN(i)?r:Math.min(r,i)},Bf.getMaximumHeight=function(t){var e=Bf._getParentNode(t);if(!e)return t.clientHeight;var n=e.clientHeight,r=n-Bf._calculatePadding(e,"padding-top",n)-Bf._calculatePadding(e,"padding-bottom",n),i=Bf.getConstraintHeight(t);return isNaN(i)?r:Math.min(r,i)},Bf.getStyle=function(t,e){return t.currentStyle?t.currentStyle[e]:document.defaultView.getComputedStyle(t,null).getPropertyValue(e)},Bf.retinaScale=function(t,e){var n=t.currentDevicePixelRatio=e||"undefined"!=typeof window&&window.devicePixelRatio||1;if(1!==n){var r=t.canvas,i=t.height,o=t.width;r.height=i*n,r.width=o*n,t.ctx.scale(n,n),r.style.height||r.style.width||(r.style.height=i+"px",r.style.width=o+"px")}},Bf.fontString=function(t,e,n){return e+" "+t+"px "+n},Bf.longestText=function(t,e,n,r){var i=(r=r||{}).data=r.data||{},o=r.garbageCollect=r.garbageCollect||[];r.font!==e&&(i=r.data={},o=r.garbageCollect=[],r.font=e),t.font=e;var a=0;Bf.each(n,function(e){void 0!==e&&null!==e&&!0!==Bf.isArray(e)?a=Bf.measureText(t,i,o,a,e):Bf.isArray(e)&&Bf.each(e,function(e){void 0===e||null===e||Bf.isArray(e)||(a=Bf.measureText(t,i,o,a,e))})});var s=o.length/2;if(s>n.length){for(var l=0;l<s;l++)delete i[o[l]];o.splice(0,s)}return a},Bf.measureText=function(t,e,n,r,i){var o=e[i];return o||(o=e[i]=t.measureText(i).width,n.push(i)),o>r&&(r=o),r},Bf.numberOfLabelLines=function(t){var e=1;return Bf.each(t,function(t){Bf.isArray(t)&&t.length>e&&(e=t.length)}),e},Bf.color=Lh?function(t){return t instanceof CanvasGradient&&(t=Hf.global.defaultColor),Lh(t)}:function(t){return console.error("Color.js not found!"),t},Bf.getHoverColor=function(t){return t instanceof CanvasPattern?t:Bf.color(t).saturate(.5).darken(.1).rgbString()}}(),pv.Animation=Bh,pv.animationService=Yh,pv.defaults=Hf,pv.Element=zh,pv.elements=Kh,pv.Interaction=lp,pv.layouts=jh,pv.platform=Sp,pv.plugins=Mp,pv.Scale=Rp,pv.scaleService=Nh,pv.Ticks=Cp,pv.Tooltip=Ip,function(t){function e(t){return"top"===t||"bottom"===t}t.types={},t.instances={},t.controllers={},Bf.extend(t.prototype,{construct:function(e,n){var r=this;n=function(t){var e=(t=t||{}).data=t.data||{};return e.datasets=e.datasets||[],e.labels=e.labels||[],t.options=Bf.configMerge(Hf.global,Hf[t.type],t.options||{}),t}(n);var i=Sp.acquireContext(e,n),o=i&&i.canvas,a=o&&o.height,s=o&&o.width;r.id=Bf.uid(),r.ctx=i,r.canvas=o,r.config=n,r.width=s,r.height=a,r.aspectRatio=a?s/a:null,r.options=n.options,r._bufferedRender=!1,r.chart=r,r.controller=r,t.instances[r.id]=r,Object.defineProperty(r,"data",{get:function(){return r.config.data},set:function(t){r.config.data=t}}),i&&o?(r.initialize(),r.update()):console.error("Failed to create chart: can't acquire context from the given item")},initialize:function(){var t=this;return Mp.notify(t,"beforeInit"),Bf.retinaScale(t,t.options.devicePixelRatio),t.bindEvents(),t.options.responsive&&t.resize(!0),t.ensureScalesHaveIDs(),t.buildOrUpdateScales(),t.initToolTip(),Mp.notify(t,"afterInit"),t},clear:function(){return Bf.canvas.clear(this),this},stop:function(){return Yh.cancelAnimation(this),this},resize:function(t){var e=this,n=e.options,r=e.canvas,i=n.maintainAspectRatio&&e.aspectRatio||null,o=Math.max(0,Math.floor(Bf.getMaximumWidth(r))),a=Math.max(0,Math.floor(i?o/i:Bf.getMaximumHeight(r)));if((e.width!==o||e.height!==a)&&(r.width=e.width=o,r.height=e.height=a,r.style.width=o+"px",r.style.height=a+"px",Bf.retinaScale(e,n.devicePixelRatio),!t)){var s={width:o,height:a};Mp.notify(e,"resize",[s]),e.options.onResize&&e.options.onResize(e,s),e.stop(),e.update({duration:e.options.responsiveAnimationDuration})}},ensureScalesHaveIDs:function(){var t=this.options,e=t.scales||{},n=t.scale;Bf.each(e.xAxes,function(t,e){t.id=t.id||"x-axis-"+e}),Bf.each(e.yAxes,function(t,e){t.id=t.id||"y-axis-"+e}),n&&(n.id=n.id||"scale")},buildOrUpdateScales:function(){var t=this,n=t.options,r=t.scales||{},i=[],o=Object.keys(r).reduce(function(t,e){return t[e]=!1,t},{});n.scales&&(i=i.concat((n.scales.xAxes||[]).map(function(t){return{options:t,dtype:"category",dposition:"bottom"}}),(n.scales.yAxes||[]).map(function(t){return{options:t,dtype:"linear",dposition:"left"}}))),n.scale&&i.push({options:n.scale,dtype:"radialLinear",isDefault:!0,dposition:"chartArea"}),Bf.each(i,function(n){var i=n.options,a=i.id,s=Bf.valueOrDefault(i.type,n.dtype);e(i.position)!==e(n.dposition)&&(i.position=n.dposition),o[a]=!0;var l=null;if(a in r&&r[a].type===s)(l=r[a]).options=i,l.ctx=t.ctx,l.chart=t;else{var u=Nh.getScaleConstructor(s);if(!u)return;l=new u({id:a,type:s,options:i,ctx:t.ctx,chart:t}),r[l.id]=l}l.mergeTicksOptions(),n.isDefault&&(t.scale=l)}),Bf.each(o,function(t,e){t||delete r[e]}),t.scales=r,Nh.addScalesToLayout(this)},buildOrUpdateControllers:function(){var e=this,n=[],r=[];return Bf.each(e.data.datasets,function(i,o){var a=e.getDatasetMeta(o),s=i.type||e.config.type;if(a.type&&a.type!==s&&(e.destroyDatasetMeta(o),a=e.getDatasetMeta(o)),a.type=s,n.push(a.type),a.controller)a.controller.updateIndex(o),a.controller.linkScales();else{var l=t.controllers[a.type];if(void 0===l)throw new Error('"'+a.type+'" is not a chart type.');a.controller=new l(e,o),r.push(a.controller)}},e),r},resetElements:function(){var t=this;Bf.each(t.data.datasets,function(e,n){t.getDatasetMeta(n).controller.reset()},t)},reset:function(){this.resetElements(),this.tooltip.initialize()},update:function(e){var n,r,o=this;if(e&&"object"===(void 0===e?"undefined":i(e))||(e={duration:e,lazy:arguments[1]}),r=(n=o).options,Bf.each(n.scales,function(t){jh.removeBox(n,t)}),r=Bf.configMerge(t.defaults.global,t.defaults[n.config.type],r),n.options=n.config.options=r,n.ensureScalesHaveIDs(),n.buildOrUpdateScales(),n.tooltip._options=r.tooltips,n.tooltip.initialize(),Mp._invalidate(o),!1!==Mp.notify(o,"beforeUpdate")){o.tooltip._data=o.data;var a=o.buildOrUpdateControllers();Bf.each(o.data.datasets,function(t,e){o.getDatasetMeta(e).controller.buildOrUpdateElements()},o),o.updateLayout(),o.options.animation&&o.options.animation.duration&&Bf.each(a,function(t){t.reset()}),o.updateDatasets(),o.tooltip.initialize(),o.lastActive=[],Mp.notify(o,"afterUpdate"),o._bufferedRender?o._bufferedRequest={duration:e.duration,easing:e.easing,lazy:e.lazy}:o.render(e)}},updateLayout:function(){!1!==Mp.notify(this,"beforeLayout")&&(jh.update(this,this.width,this.height),Mp.notify(this,"afterScaleUpdate"),Mp.notify(this,"afterLayout"))},updateDatasets:function(){if(!1!==Mp.notify(this,"beforeDatasetsUpdate")){for(var t=0,e=this.data.datasets.length;t<e;++t)this.updateDataset(t);Mp.notify(this,"afterDatasetsUpdate")}},updateDataset:function(t){var e=this.getDatasetMeta(t),n={meta:e,index:t};!1!==Mp.notify(this,"beforeDatasetUpdate",[n])&&(e.controller.update(),Mp.notify(this,"afterDatasetUpdate",[n]))},render:function(t){var e=this;t&&"object"===(void 0===t?"undefined":i(t))||(t={duration:t,lazy:arguments[1]});var n=t.duration,r=t.lazy;if(!1!==Mp.notify(e,"beforeRender")){var o=e.options.animation,a=function(t){Mp.notify(e,"afterRender"),Bf.callback(o&&o.onComplete,[t],e)};if(o&&(void 0!==n&&0!==n||void 0===n&&0!==o.duration)){var s=new Bh({numSteps:(n||o.duration)/16.66,easing:t.easing||o.easing,render:function(t,e){var n=Bf.easing.effects[e.easing],r=e.currentStep,i=r/e.numSteps;t.draw(n(i),i,r)},onAnimationProgress:o.onProgress,onAnimationComplete:a});Yh.addAnimation(e,s,n,r)}else e.draw(),a(new Bh({numSteps:0,chart:e}));return e}},draw:function(t){var e=this;e.clear(),Bf.isNullOrUndef(t)&&(t=1),e.transition(t),e.width<=0||e.height<=0||!1!==Mp.notify(e,"beforeDraw",[t])&&(Bf.each(e.boxes,function(t){t.draw(e.chartArea)},e),e.scale&&e.scale.draw(),e.drawDatasets(t),e._drawTooltip(t),Mp.notify(e,"afterDraw",[t]))},transition:function(t){for(var e=0,n=(this.data.datasets||[]).length;e<n;++e)this.isDatasetVisible(e)&&this.getDatasetMeta(e).controller.transition(t);this.tooltip.transition(t)},drawDatasets:function(t){var e=this;if(!1!==Mp.notify(e,"beforeDatasetsDraw",[t])){for(var n=(e.data.datasets||[]).length-1;n>=0;--n)e.isDatasetVisible(n)&&e.drawDataset(n,t);Mp.notify(e,"afterDatasetsDraw",[t])}},drawDataset:function(t,e){var n=this.getDatasetMeta(t),r={meta:n,index:t,easingValue:e};!1!==Mp.notify(this,"beforeDatasetDraw",[r])&&(n.controller.draw(e),Mp.notify(this,"afterDatasetDraw",[r]))},_drawTooltip:function(t){var e=this.tooltip,n={tooltip:e,easingValue:t};!1!==Mp.notify(this,"beforeTooltipDraw",[n])&&(e.draw(),Mp.notify(this,"afterTooltipDraw",[n]))},getElementAtEvent:function(t){return lp.modes.single(this,t)},getElementsAtEvent:function(t){return lp.modes.label(this,t,{intersect:!0})},getElementsAtXAxis:function(t){return lp.modes["x-axis"](this,t,{intersect:!0})},getElementsAtEventForMode:function(t,e,n){var r=lp.modes[e];return"function"==typeof r?r(this,t,n):[]},getDatasetAtEvent:function(t){return lp.modes.dataset(this,t,{intersect:!0})},getDatasetMeta:function(t){var e=this.data.datasets[t];e._meta||(e._meta={});var n=e._meta[this.id];return n||(n=e._meta[this.id]={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null}),n},getVisibleDatasetCount:function(){for(var t=0,e=0,n=this.data.datasets.length;e<n;++e)this.isDatasetVisible(e)&&t++;return t},isDatasetVisible:function(t){var e=this.getDatasetMeta(t);return"boolean"==typeof e.hidden?!e.hidden:!this.data.datasets[t].hidden},generateLegend:function(){return this.options.legendCallback(this)},destroyDatasetMeta:function(t){var e=this.id,n=this.data.datasets[t],r=n._meta&&n._meta[e];r&&(r.controller.destroy(),delete n._meta[e])},destroy:function(){var e,n,r=this,i=r.canvas;for(r.stop(),e=0,n=r.data.datasets.length;e<n;++e)r.destroyDatasetMeta(e);i&&(r.unbindEvents(),Bf.canvas.clear(r),Sp.releaseContext(r.ctx),r.canvas=null,r.ctx=null),Mp.notify(r,"destroy"),delete t.instances[r.id]},toBase64Image:function(){return this.canvas.toDataURL.apply(this.canvas,arguments)},initToolTip:function(){var t=this;t.tooltip=new Ip({_chart:t,_chartInstance:t,_data:t.data,_options:t.options.tooltips},t)},bindEvents:function(){var t=this,e=t._listeners={},n=function(){t.eventHandler.apply(t,arguments)};Bf.each(t.options.events,function(r){Sp.addEventListener(t,r,n),e[r]=n}),t.options.responsive&&(n=function(){t.resize()},Sp.addEventListener(t,"resize",n),e.resize=n)},unbindEvents:function(){var t=this,e=t._listeners;e&&(delete t._listeners,Bf.each(e,function(e,n){Sp.removeEventListener(t,n,e)}))},updateHoverStyle:function(t,e,n){var r,i,o,a=n?"setHoverStyle":"removeHoverStyle";for(i=0,o=t.length;i<o;++i)(r=t[i])&&this.getDatasetMeta(r._datasetIndex).controller[a](r)},eventHandler:function(t){var e=this,n=e.tooltip;if(!1!==Mp.notify(e,"beforeEvent",[t])){e._bufferedRender=!0,e._bufferedRequest=null;var r=e.handleEvent(t);n&&(r=n._start?n.handleEvent(t):r|n.handleEvent(t)),Mp.notify(e,"afterEvent",[t]);var i=e._bufferedRequest;return i?e.render(i):r&&!e.animating&&(e.stop(),e.render({duration:e.options.hover.animationDuration,lazy:!0})),e._bufferedRender=!1,e._bufferedRequest=null,e}},handleEvent:function(t){var e,n=this,r=n.options||{},i=r.hover;return n.lastActive=n.lastActive||[],"mouseout"===t.type?n.active=[]:n.active=n.getElementsAtEventForMode(t,i.mode,i),Bf.callback(r.onHover||r.hover.onHover,[t.native,n.active],n),"mouseup"!==t.type&&"click"!==t.type||r.onClick&&r.onClick.call(n,t.native,n.active),n.lastActive.length&&n.updateHoverStyle(n.lastActive,i.mode,!1),n.active.length&&i.mode&&n.updateHoverStyle(n.active,i.mode,!0),e=!Bf.arrayEquals(n.active,n.lastActive),n.lastActive=n.active,e}}),t.Controller=t}(pv),function(t){var e=["push","pop","shift","splice","unshift"];function n(t,n){var r=t._chartjs;if(r){var i=r.listeners,o=i.indexOf(n);-1!==o&&i.splice(o,1),i.length>0||(e.forEach(function(e){delete t[e]}),delete t._chartjs)}}t.DatasetController=function(t,e){this.initialize(t,e)},Bf.extend(t.DatasetController.prototype,{datasetElementType:null,dataElementType:null,initialize:function(t,e){this.chart=t,this.index=e,this.linkScales(),this.addElements()},updateIndex:function(t){this.index=t},linkScales:function(){var t=this,e=t.getMeta(),n=t.getDataset();null!==e.xAxisID&&e.xAxisID in t.chart.scales||(e.xAxisID=n.xAxisID||t.chart.options.scales.xAxes[0].id),null!==e.yAxisID&&e.yAxisID in t.chart.scales||(e.yAxisID=n.yAxisID||t.chart.options.scales.yAxes[0].id)},getDataset:function(){return this.chart.data.datasets[this.index]},getMeta:function(){return this.chart.getDatasetMeta(this.index)},getScaleForId:function(t){return this.chart.scales[t]},reset:function(){this.update(!0)},destroy:function(){this._data&&n(this._data,this)},createMetaDataset:function(){var t=this.datasetElementType;return t&&new t({_chart:this.chart,_datasetIndex:this.index})},createMetaData:function(t){var e=this.dataElementType;return e&&new e({_chart:this.chart,_datasetIndex:this.index,_index:t})},addElements:function(){var t,e,n=this.getMeta(),r=this.getDataset().data||[],i=n.data;for(t=0,e=r.length;t<e;++t)i[t]=i[t]||this.createMetaData(t);n.dataset=n.dataset||this.createMetaDataset()},addElementAndReset:function(t){var e=this.createMetaData(t);this.getMeta().data.splice(t,0,e),this.updateElement(e,t,!0)},buildOrUpdateElements:function(){var t,r,i=this,o=i.getDataset(),a=o.data||(o.data=[]);i._data!==a&&(i._data&&n(i._data,i),r=i,(t=a)._chartjs?t._chartjs.listeners.push(r):(Object.defineProperty(t,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[r]}}),e.forEach(function(e){var n="onData"+e.charAt(0).toUpperCase()+e.slice(1),r=t[e];Object.defineProperty(t,e,{configurable:!0,enumerable:!1,value:function(){var e=Array.prototype.slice.call(arguments),i=r.apply(this,e);return Bf.each(t._chartjs.listeners,function(t){"function"==typeof t[n]&&t[n].apply(t,e)}),i}})})),i._data=a),i.resyncElements()},update:Bf.noop,transition:function(t){for(var e=this.getMeta(),n=e.data||[],r=n.length,i=0;i<r;++i)n[i].transition(t);e.dataset&&e.dataset.transition(t)},draw:function(){var t=this.getMeta(),e=t.data||[],n=e.length,r=0;for(t.dataset&&t.dataset.draw();r<n;++r)e[r].draw()},removeHoverStyle:function(t){Bf.merge(t._model,t.$previousStyle||{}),delete t.$previousStyle},setHoverStyle:function(t){var e=this.chart.data.datasets[t._datasetIndex],n=t._index,r=t.custom||{},i=Bf.valueAtIndexOrDefault,o=Bf.getHoverColor,a=t._model;t.$previousStyle={backgroundColor:a.backgroundColor,borderColor:a.borderColor,borderWidth:a.borderWidth},a.backgroundColor=r.hoverBackgroundColor?r.hoverBackgroundColor:i(e.hoverBackgroundColor,n,o(a.backgroundColor)),a.borderColor=r.hoverBorderColor?r.hoverBorderColor:i(e.hoverBorderColor,n,o(a.borderColor)),a.borderWidth=r.hoverBorderWidth?r.hoverBorderWidth:i(e.hoverBorderWidth,n,a.borderWidth)},resyncElements:function(){var t=this.getMeta(),e=this.getDataset().data,n=t.data.length,r=e.length;r<n?t.data.splice(r,n-r):r>n&&this.insertElements(n,r-n)},insertElements:function(t,e){for(var n=0;n<e;++n)this.addElementAndReset(t+n)},onDataPush:function(){this.insertElements(this.getDataset().data.length-1,arguments.length)},onDataPop:function(){this.getMeta().data.pop()},onDataShift:function(){this.getMeta().data.shift()},onDataSplice:function(t,e){this.getMeta().data.splice(t,e),this.insertElements(t,arguments.length-2)},onDataUnshift:function(){this.insertElements(0,arguments.length)}}),t.DatasetController.extend=Bf.inherits}(pv),function(t){var e=Bf.noop;t.LinearScaleBase=Rp.extend({getRightValue:function(t){return"string"==typeof t?+t:Rp.prototype.getRightValue.call(this,t)},handleTickRangeOptions:function(){var t=this,e=t.options.ticks;if(e.beginAtZero){var n=Bf.sign(t.min),r=Bf.sign(t.max);n<0&&r<0?t.max=0:n>0&&r>0&&(t.min=0)}var i=void 0!==e.min||void 0!==e.suggestedMin,o=void 0!==e.max||void 0!==e.suggestedMax;void 0!==e.min?t.min=e.min:void 0!==e.suggestedMin&&(null===t.min?t.min=e.suggestedMin:t.min=Math.min(t.min,e.suggestedMin)),void 0!==e.max?t.max=e.max:void 0!==e.suggestedMax&&(null===t.max?t.max=e.suggestedMax:t.max=Math.max(t.max,e.suggestedMax)),i!==o&&t.min>=t.max&&(i?t.max=t.min+1:t.min=t.max-1),t.min===t.max&&(t.max++,e.beginAtZero||t.min--)},getTickLimit:e,handleDirectionalChanges:e,buildTicks:function(){var t=this,e=t.options.ticks,n=t.getTickLimit(),r={maxTicks:n=Math.max(2,n),min:e.min,max:e.max,precision:e.precision,stepSize:Bf.valueOrDefault(e.fixedStepSize,e.stepSize)},i=t.ticks=function(t,e){var n,r,i,o=[];if(t.stepSize&&t.stepSize>0)i=t.stepSize;else{var a=Bf.niceNum(e.max-e.min,!1);i=Bf.niceNum(a/(t.maxTicks-1),!0),void 0!==(r=t.precision)&&(n=Math.pow(10,r),i=Math.ceil(i*n)/n)}var s=Math.floor(e.min/i)*i,l=Math.ceil(e.max/i)*i;Bf.isNullOrUndef(t.min)||Bf.isNullOrUndef(t.max)||!t.stepSize||Bf.almostWhole((t.max-t.min)/t.stepSize,i/1e3)&&(s=t.min,l=t.max);var u=(l-s)/i;u=Bf.almostEquals(u,Math.round(u),i/1e3)?Math.round(u):Math.ceil(u),r=1,i<1&&(r=Math.pow(10,1-Math.floor(Bf.log10(i))),s=Math.round(s*r)/r,l=Math.round(l*r)/r),o.push(void 0!==t.min?t.min:s);for(var c=1;c<u;++c)o.push(Math.round((s+c*i)*r)/r);return o.push(void 0!==t.max?t.max:l),o}(r,t);t.handleDirectionalChanges(),t.max=Bf.max(i),t.min=Bf.min(i),e.reverse?(i.reverse(),t.start=t.max,t.end=t.min):(t.start=t.min,t.end=t.max)},convertTicksToLabels:function(){var t=this;t.ticksAsNumbers=t.ticks.slice(),t.zeroLineIndex=t.ticks.indexOf(0),Rp.prototype.convertTicksToLabels.call(t)}})}(pv),fv=Rp.extend({getLabels:function(){var t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels},determineDataLimits:function(){var t,e=this,n=e.getLabels();e.minIndex=0,e.maxIndex=n.length-1,void 0!==e.options.ticks.min&&(t=n.indexOf(e.options.ticks.min),e.minIndex=-1!==t?t:e.minIndex),void 0!==e.options.ticks.max&&(t=n.indexOf(e.options.ticks.max),e.maxIndex=-1!==t?t:e.maxIndex),e.min=n[e.minIndex],e.max=n[e.maxIndex]},buildTicks:function(){var t=this,e=t.getLabels();t.ticks=0===t.minIndex&&t.maxIndex===e.length-1?e:e.slice(t.minIndex,t.maxIndex+1)},getLabelForIndex:function(t,e){var n=this,r=n.chart.data,i=n.isHorizontal();return r.yLabels&&!i?n.getRightValue(r.datasets[e].data[t]):n.ticks[t-n.minIndex]},getPixelForValue:function(t,e){var n,r=this,i=r.options.offset,o=Math.max(r.maxIndex+1-r.minIndex-(i?0:1),1);if(void 0!==t&&null!==t&&(n=r.isHorizontal()?t.x:t.y),void 0!==n||void 0!==t&&isNaN(e)){var a=r.getLabels();t=n||t;var s=a.indexOf(t);e=-1!==s?s:e}if(r.isHorizontal()){var l=r.width/o,u=l*(e-r.minIndex);return i&&(u+=l/2),r.left+Math.round(u)}var c=r.height/o,d=c*(e-r.minIndex);return i&&(d+=c/2),r.top+Math.round(d)},getPixelForTick:function(t){return this.getPixelForValue(this.ticks[t],t+this.minIndex,null)},getValueForPixel:function(t){var e=this,n=e.options.offset,r=Math.max(e._ticks.length-(n?0:1),1),i=e.isHorizontal(),o=(i?e.width:e.height)/r;return t-=i?e.left:e.top,n&&(t-=o/2),(t<=0?0:Math.round(t/o))+e.minIndex},getBasePixel:function(){return this.bottom}}),Nh.registerScaleType("category",fv,{position:"bottom"}),function(t){var e={position:"left",ticks:{callback:Cp.formatters.linear}},n=t.LinearScaleBase.extend({determineDataLimits:function(){var t=this,e=t.options,n=t.chart,r=n.data.datasets,i=t.isHorizontal();function o(e){return i?e.xAxisID===t.id:e.yAxisID===t.id}t.min=null,t.max=null;var a=e.stacked;if(void 0===a&&Bf.each(r,function(t,e){if(!a){var r=n.getDatasetMeta(e);n.isDatasetVisible(e)&&o(r)&&void 0!==r.stack&&(a=!0)}}),e.stacked||a){var s={};Bf.each(r,function(r,i){var a=n.getDatasetMeta(i),l=[a.type,void 0===e.stacked&&void 0===a.stack?i:"",a.stack].join(".");void 0===s[l]&&(s[l]={positiveValues:[],negativeValues:[]});var u=s[l].positiveValues,c=s[l].negativeValues;n.isDatasetVisible(i)&&o(a)&&Bf.each(r.data,function(n,r){var i=+t.getRightValue(n);isNaN(i)||a.data[r].hidden||(u[r]=u[r]||0,c[r]=c[r]||0,e.relativePoints?u[r]=100:i<0?c[r]+=i:u[r]+=i)})}),Bf.each(s,function(e){var n=e.positiveValues.concat(e.negativeValues),r=Bf.min(n),i=Bf.max(n);t.min=null===t.min?r:Math.min(t.min,r),t.max=null===t.max?i:Math.max(t.max,i)})}else Bf.each(r,function(e,r){var i=n.getDatasetMeta(r);n.isDatasetVisible(r)&&o(i)&&Bf.each(e.data,function(e,n){var r=+t.getRightValue(e);isNaN(r)||i.data[n].hidden||(null===t.min?t.min=r:r<t.min&&(t.min=r),null===t.max?t.max=r:r>t.max&&(t.max=r))})});t.min=isFinite(t.min)&&!isNaN(t.min)?t.min:0,t.max=isFinite(t.max)&&!isNaN(t.max)?t.max:1,this.handleTickRangeOptions()},getTickLimit:function(){var t,e=this.options.ticks;if(this.isHorizontal())t=Math.min(e.maxTicksLimit?e.maxTicksLimit:11,Math.ceil(this.width/50));else{var n=Bf.valueOrDefault(e.fontSize,Hf.global.defaultFontSize);t=Math.min(e.maxTicksLimit?e.maxTicksLimit:11,Math.ceil(this.height/(2*n)))}return t},handleDirectionalChanges:function(){this.isHorizontal()||this.ticks.reverse()},getLabelForIndex:function(t,e){return+this.getRightValue(this.chart.data.datasets[e].data[t])},getPixelForValue:function(t){var e=this,n=e.start,r=+e.getRightValue(t),i=e.end-n;return e.isHorizontal()?e.left+e.width/i*(r-n):e.bottom-e.height/i*(r-n)},getValueForPixel:function(t){var e=this,n=e.isHorizontal(),r=n?e.width:e.height,i=(n?t-e.left:e.bottom-t)/r;return e.start+(e.end-e.start)*i},getPixelForTick:function(t){return this.getPixelForValue(this.ticksAsNumbers[t])}});Nh.registerScaleType("linear",n,e)}(pv),function(t){var e={position:"left",ticks:{callback:Cp.formatters.logarithmic}},n=Rp.extend({determineDataLimits:function(){var t=this,e=t.options,n=t.chart,r=n.data.datasets,i=t.isHorizontal();function o(e){return i?e.xAxisID===t.id:e.yAxisID===t.id}t.min=null,t.max=null,t.minNotZero=null;var a=e.stacked;if(void 0===a&&Bf.each(r,function(t,e){if(!a){var r=n.getDatasetMeta(e);n.isDatasetVisible(e)&&o(r)&&void 0!==r.stack&&(a=!0)}}),e.stacked||a){var s={};Bf.each(r,function(r,i){var a=n.getDatasetMeta(i),l=[a.type,void 0===e.stacked&&void 0===a.stack?i:"",a.stack].join(".");n.isDatasetVisible(i)&&o(a)&&(void 0===s[l]&&(s[l]=[]),Bf.each(r.data,function(e,n){var r=s[l],i=+t.getRightValue(e);isNaN(i)||a.data[n].hidden||i<0||(r[n]=r[n]||0,r[n]+=i)}))}),Bf.each(s,function(e){if(e.length>0){var n=Bf.min(e),r=Bf.max(e);t.min=null===t.min?n:Math.min(t.min,n),t.max=null===t.max?r:Math.max(t.max,r)}})}else Bf.each(r,function(e,r){var i=n.getDatasetMeta(r);n.isDatasetVisible(r)&&o(i)&&Bf.each(e.data,function(e,n){var r=+t.getRightValue(e);isNaN(r)||i.data[n].hidden||r<0||(null===t.min?t.min=r:r<t.min&&(t.min=r),null===t.max?t.max=r:r>t.max&&(t.max=r),0!==r&&(null===t.minNotZero||r<t.minNotZero)&&(t.minNotZero=r))})});this.handleTickRangeOptions()},handleTickRangeOptions:function(){var t=this,e=t.options.ticks,n=Bf.valueOrDefault;t.min=n(e.min,t.min),t.max=n(e.max,t.max),t.min===t.max&&(0!==t.min&&null!==t.min?(t.min=Math.pow(10,Math.floor(Bf.log10(t.min))-1),t.max=Math.pow(10,Math.floor(Bf.log10(t.max))+1)):(t.min=1,t.max=10)),null===t.min&&(t.min=Math.pow(10,Math.floor(Bf.log10(t.max))-1)),null===t.max&&(t.max=0!==t.min?Math.pow(10,Math.floor(Bf.log10(t.min))+1):10),null===t.minNotZero&&(t.min>0?t.minNotZero=t.min:t.max<1?t.minNotZero=Math.pow(10,Math.floor(Bf.log10(t.max))):t.minNotZero=1)},buildTicks:function(){var t=this,e=t.options.ticks,n=!t.isHorizontal(),r={min:e.min,max:e.max},i=t.ticks=function(t,e){var n,r,i=[],o=Bf.valueOrDefault,a=o(t.min,Math.pow(10,Math.floor(Bf.log10(e.min)))),s=Math.floor(Bf.log10(e.max)),l=Math.ceil(e.max/Math.pow(10,s));0===a?(n=Math.floor(Bf.log10(e.minNotZero)),r=Math.floor(e.minNotZero/Math.pow(10,n)),i.push(a),a=r*Math.pow(10,n)):(n=Math.floor(Bf.log10(a)),r=Math.floor(a/Math.pow(10,n)));var u=n<0?Math.pow(10,Math.abs(n)):1;do{i.push(a),10==++r&&(r=1,u=++n>=0?1:u),a=Math.round(r*Math.pow(10,n)*u)/u}while(n<s||n===s&&r<l);var c=o(t.max,a);return i.push(c),i}(r,t);t.max=Bf.max(i),t.min=Bf.min(i),e.reverse?(n=!n,t.start=t.max,t.end=t.min):(t.start=t.min,t.end=t.max),n&&i.reverse()},convertTicksToLabels:function(){this.tickValues=this.ticks.slice(),Rp.prototype.convertTicksToLabels.call(this)},getLabelForIndex:function(t,e){return+this.getRightValue(this.chart.data.datasets[e].data[t])},getPixelForTick:function(t){return this.getPixelForValue(this.tickValues[t])},_getFirstTickValue:function(t){var e=Math.floor(Bf.log10(t));return Math.floor(t/Math.pow(10,e))*Math.pow(10,e)},getPixelForValue:function(e){var n,r,i,o,a,s=this,l=s.options.ticks.reverse,u=Bf.log10,c=s._getFirstTickValue(s.minNotZero),d=0;return e=+s.getRightValue(e),l?(i=s.end,o=s.start,a=-1):(i=s.start,o=s.end,a=1),s.isHorizontal()?(n=s.width,r=l?s.right:s.left):(n=s.height,a*=-1,r=l?s.top:s.bottom),e!==i&&(0===i&&(n-=d=Bf.getValueOrDefault(s.options.ticks.fontSize,t.defaults.global.defaultFontSize),i=c),0!==e&&(d+=n/(u(o)-u(i))*(u(e)-u(i))),r+=a*d),r},getValueForPixel:function(e){var n,r,i,o,a=this,s=a.options.ticks.reverse,l=Bf.log10,u=a._getFirstTickValue(a.minNotZero);if(s?(r=a.end,i=a.start):(r=a.start,i=a.end),a.isHorizontal()?(n=a.width,o=s?a.right-e:e-a.left):(n=a.height,o=s?e-a.top:a.bottom-e),o!==r){if(0===r){var c=Bf.getValueOrDefault(a.options.ticks.fontSize,t.defaults.global.defaultFontSize);o-=c,n-=c,r=u}o*=l(i)-l(r),o/=n,o=Math.pow(10,l(r)+o)}return o}});Nh.registerScaleType("logarithmic",n,e)}(pv),function(t){var e=Hf.global,n={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,color:"rgba(0, 0, 0, 0.1)",lineWidth:1},gridLines:{circular:!1},ticks:{showLabelBackdrop:!0,backdropColor:"rgba(255,255,255,0.75)",backdropPaddingY:2,backdropPaddingX:2,callback:Cp.formatters.linear},pointLabels:{display:!0,fontSize:10,callback:function(t){return t}}};function r(t){var e=t.options;return e.angleLines.display||e.pointLabels.display?t.chart.data.labels.length:0}function i(t){var n=t.options.pointLabels,r=Bf.valueOrDefault(n.fontSize,e.defaultFontSize),i=Bf.valueOrDefault(n.fontStyle,e.defaultFontStyle),o=Bf.valueOrDefault(n.fontFamily,e.defaultFontFamily);return{size:r,style:i,family:o,font:Bf.fontString(r,i,o)}}function o(t,e,n,r,i){return t===r||t===i?{start:e-n/2,end:e+n/2}:t<r||t>i?{start:e-n-5,end:e}:{start:e,end:e+n+5}}function a(t){return 0===t||180===t?"center":t<180?"left":"right"}function s(t,e,n,r){if(Bf.isArray(e))for(var i=n.y,o=1.5*r,a=0;a<e.length;++a)t.fillText(e[a],n.x,i),i+=o;else t.fillText(e,n.x,n.y)}function l(t,e,n){90===t||270===t?n.y-=e.h/2:(t>270||t<90)&&(n.y-=e.h)}function u(t){return Bf.isNumber(t)?t:0}var c=t.LinearScaleBase.extend({setDimensions:function(){var t=this,n=t.options,r=n.ticks;t.width=t.maxWidth,t.height=t.maxHeight,t.xCenter=Math.round(t.width/2),t.yCenter=Math.round(t.height/2);var i=Bf.min([t.height,t.width]),o=Bf.valueOrDefault(r.fontSize,e.defaultFontSize);t.drawingArea=n.display?i/2-(o/2+r.backdropPaddingY):i/2},determineDataLimits:function(){var t=this,e=t.chart,n=Number.POSITIVE_INFINITY,r=Number.NEGATIVE_INFINITY;Bf.each(e.data.datasets,function(i,o){if(e.isDatasetVisible(o)){var a=e.getDatasetMeta(o);Bf.each(i.data,function(e,i){var o=+t.getRightValue(e);isNaN(o)||a.data[i].hidden||(n=Math.min(o,n),r=Math.max(o,r))})}}),t.min=n===Number.POSITIVE_INFINITY?0:n,t.max=r===Number.NEGATIVE_INFINITY?0:r,t.handleTickRangeOptions()},getTickLimit:function(){var t=this.options.ticks,n=Bf.valueOrDefault(t.fontSize,e.defaultFontSize);return Math.min(t.maxTicksLimit?t.maxTicksLimit:11,Math.ceil(this.drawingArea/(1.5*n)))},convertTicksToLabels:function(){var e=this;t.LinearScaleBase.prototype.convertTicksToLabels.call(e),e.pointLabels=e.chart.data.labels.map(e.options.pointLabels.callback,e)},getLabelForIndex:function(t,e){return+this.getRightValue(this.chart.data.datasets[e].data[t])},fit:function(){var t,e;this.options.pointLabels.display?function(t){var e,n,a,s=i(t),l=Math.min(t.height/2,t.width/2),u={r:t.width,l:0,t:t.height,b:0},c={};t.ctx.font=s.font,t._pointLabelSizes=[];var d,f,h,p=r(t);for(e=0;e<p;e++){a=t.getPointPosition(e,l),d=t.ctx,f=s.size,h=t.pointLabels[e]||"",n=Bf.isArray(h)?{w:Bf.longestText(d,d.font,h),h:h.length*f+1.5*(h.length-1)*f}:{w:d.measureText(h).width,h:f},t._pointLabelSizes[e]=n;var v=t.getIndexAngle(e),g=Bf.toDegrees(v)%360,m=o(g,a.x,n.w,0,180),y=o(g,a.y,n.h,90,270);m.start<u.l&&(u.l=m.start,c.l=v),m.end>u.r&&(u.r=m.end,c.r=v),y.start<u.t&&(u.t=y.start,c.t=v),y.end>u.b&&(u.b=y.end,c.b=v)}t.setReductions(l,u,c)}(this):(t=this,e=Math.min(t.height/2,t.width/2),t.drawingArea=Math.round(e),t.setCenterPoint(0,0,0,0))},setReductions:function(t,e,n){var r=e.l/Math.sin(n.l),i=Math.max(e.r-this.width,0)/Math.sin(n.r),o=-e.t/Math.cos(n.t),a=-Math.max(e.b-this.height,0)/Math.cos(n.b);r=u(r),i=u(i),o=u(o),a=u(a),this.drawingArea=Math.min(Math.round(t-(r+i)/2),Math.round(t-(o+a)/2)),this.setCenterPoint(r,i,o,a)},setCenterPoint:function(t,e,n,r){var i=this,o=i.width-e-i.drawingArea,a=t+i.drawingArea,s=n+i.drawingArea,l=i.height-r-i.drawingArea;i.xCenter=Math.round((a+o)/2+i.left),i.yCenter=Math.round((s+l)/2+i.top)},getIndexAngle:function(t){return t*(2*Math.PI/r(this))+(this.chart.options&&this.chart.options.startAngle?this.chart.options.startAngle:0)*Math.PI*2/360},getDistanceFromCenterForValue:function(t){var e=this;if(null===t)return 0;var n=e.drawingArea/(e.max-e.min);return e.options.ticks.reverse?(e.max-t)*n:(t-e.min)*n},getPointPosition:function(t,e){var n=this.getIndexAngle(t)-Math.PI/2;return{x:Math.round(Math.cos(n)*e)+this.xCenter,y:Math.round(Math.sin(n)*e)+this.yCenter}},getPointPositionForValue:function(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))},getBasePosition:function(){var t=this.min,e=this.max;return this.getPointPositionForValue(0,this.beginAtZero?0:t<0&&e<0?e:t>0&&e>0?t:0)},draw:function(){var t=this,n=t.options,o=n.gridLines,u=n.ticks,c=Bf.valueOrDefault;if(n.display){var d=t.ctx,f=this.getIndexAngle(0),h=c(u.fontSize,e.defaultFontSize),p=c(u.fontStyle,e.defaultFontStyle),v=c(u.fontFamily,e.defaultFontFamily),g=Bf.fontString(h,p,v);Bf.each(t.ticks,function(n,i){if(i>0||u.reverse){var a=t.getDistanceFromCenterForValue(t.ticksAsNumbers[i]);if(o.display&&0!==i&&function(t,e,n,i){var o=t.ctx;if(o.strokeStyle=Bf.valueAtIndexOrDefault(e.color,i-1),o.lineWidth=Bf.valueAtIndexOrDefault(e.lineWidth,i-1),t.options.gridLines.circular)o.beginPath(),o.arc(t.xCenter,t.yCenter,n,0,2*Math.PI),o.closePath(),o.stroke();else{var a=r(t);if(0===a)return;o.beginPath();var s=t.getPointPosition(0,n);o.moveTo(s.x,s.y);for(var l=1;l<a;l++)s=t.getPointPosition(l,n),o.lineTo(s.x,s.y);o.closePath(),o.stroke()}}(t,o,a,i),u.display){var s=c(u.fontColor,e.defaultFontColor);if(d.font=g,d.save(),d.translate(t.xCenter,t.yCenter),d.rotate(f),u.showLabelBackdrop){var l=d.measureText(n).width;d.fillStyle=u.backdropColor,d.fillRect(-l/2-u.backdropPaddingX,-a-h/2-u.backdropPaddingY,l+2*u.backdropPaddingX,h+2*u.backdropPaddingY)}d.textAlign="center",d.textBaseline="middle",d.fillStyle=s,d.fillText(n,0,-a),d.restore()}}}),(n.angleLines.display||n.pointLabels.display)&&function(t){var n=t.ctx,o=t.options,u=o.angleLines,c=o.pointLabels;n.lineWidth=u.lineWidth,n.strokeStyle=u.color;var d=t.getDistanceFromCenterForValue(o.ticks.reverse?t.min:t.max),f=i(t);n.textBaseline="top";for(var h=r(t)-1;h>=0;h--){if(u.display){var p=t.getPointPosition(h,d);n.beginPath(),n.moveTo(t.xCenter,t.yCenter),n.lineTo(p.x,p.y),n.stroke(),n.closePath()}if(c.display){var v=t.getPointPosition(h,d+5),g=Bf.valueAtIndexOrDefault(c.fontColor,h,e.defaultFontColor);n.font=f.font,n.fillStyle=g;var m=t.getIndexAngle(h),y=Bf.toDegrees(m);n.textAlign=a(y),l(y,t._pointLabelSizes[h],v),s(n,t.pointLabels[h]||"",v,f.size)}}}(t)}}});Nh.registerScaleType("radialLinear",c,n)}(pv),hv=Rp.extend({initialize:function(){if(!Lp)throw new Error("Chart.js - Moment.js could not be found! You must include it before Chart.js to use the time scale. Download at https://momentjs.com");this.mergeTicksOptions(),Rp.prototype.initialize.call(this)},update:function(){var t=this.options;return t.time&&t.time.format&&console.warn("options.time.format is deprecated and replaced by options.time.parser."),Rp.prototype.update.apply(this,arguments)},getRightValue:function(t){return t&&void 0!==t.t&&(t=t.t),Rp.prototype.getRightValue.call(this,t)},determineDataLimits:function(){var t,e,n,r,i,o,a=this,s=a.chart,l=a.options.time,u=l.unit||"day",c=Fp,d=Ep,f=[],h=[],p=[];for(t=0,n=s.data.labels.length;t<n;++t)p.push(Wp(s.data.labels[t],a));for(t=0,n=(s.data.datasets||[]).length;t<n;++t)if(s.isDatasetVisible(t))if(i=s.data.datasets[t].data,Bf.isObject(i[0]))for(h[t]=[],e=0,r=i.length;e<r;++e)o=Wp(i[e],a),f.push(o),h[t][e]=o;else f.push.apply(f,p),h[t]=p.slice(0);else h[t]=[];p.length&&(p=zp(p).sort($p),c=Math.min(c,p[0]),d=Math.max(d,p[p.length-1])),f.length&&(f=zp(f).sort($p),c=Math.min(c,f[0]),d=Math.max(d,f[f.length-1])),c=Wp(l.min,a)||c,d=Wp(l.max,a)||d,c=c===Fp?+Lp().startOf(u):c,d=d===Ep?+Lp().endOf(u)+1:d,a.min=Math.min(c,d),a.max=Math.max(c+1,d),a._horizontal=a.isHorizontal(),a._table=[],a._timestamps={data:f,datasets:h,labels:p}},buildTicks:function(){var t,e,n,r=this,i=r.min,o=r.max,a=r.options,s=a.time,l=[],u=[];switch(a.ticks.source){case"data":l=r._timestamps.data;break;case"labels":l=r._timestamps.labels;break;case"auto":default:l=Hp(i,o,r.getLabelCapacity(i),a)}for("ticks"===a.bounds&&l.length&&(i=l[0],o=l[l.length-1]),i=Wp(s.min,r)||i,o=Wp(s.max,r)||o,t=0,e=l.length;t<e;++t)(n=l[t])>=i&&n<=o&&u.push(n);return r.min=i,r.max=o,r._unit=s.unit||function(t,e,n,r){var i,o,a=Lp.duration(Lp(r).diff(Lp(n)));for(i=Np.length-1;i>=Np.indexOf(e);i--)if(o=Np[i],jp[o].common&&a.as(o)>=t.length)return o;return Np[e?Np.indexOf(e):0]}(u,s.minUnit,r.min,r.max),r._majorUnit=Up(r._unit),r._table=function(t,e,n,r){if("linear"===r||!t.length)return[{time:e,pos:0},{time:n,pos:1}];var i,o,a,s,l,u=[],c=[e];for(i=0,o=t.length;i<o;++i)(s=t[i])>e&&s<n&&c.push(s);for(c.push(n),i=0,o=c.length;i<o;++i)l=c[i+1],a=c[i-1],s=c[i],void 0!==a&&void 0!==l&&Math.round((l+a)/2)===s||u.push({time:s,pos:i/(o-1)});return u}(r._timestamps.data,i,o,a.distribution),r._offsets=function(t,e,n,r,i){var o,a,s=0,l=0;return i.offset&&e.length&&(i.time.min||(o=e.length>1?e[1]:r,a=e[0],s=(Bp(t,"time",o,"pos")-Bp(t,"time",a,"pos"))/2),i.time.max||(o=e[e.length-1],a=e.length>1?e[e.length-2]:n,l=(Bp(t,"time",o,"pos")-Bp(t,"time",a,"pos"))/2)),{left:s,right:l}}(r._table,u,i,o,a),r._labelFormat=function(t,e){var n,r,i,o=t.length;for(n=0;n<o;n++){if(0!==(r=Yp(t[n],e)).millisecond())return"MMM D, YYYY h:mm:ss.SSS a";0===r.second()&&0===r.minute()&&0===r.hour()||(i=!0)}return i?"MMM D, YYYY h:mm:ss a":"MMM D, YYYY"}(r._timestamps.data,s),function(t,e){var n,r,i,o,a=[];for(n=0,r=t.length;n<r;++n)i=t[n],o=!!e&&i===+Lp(i).startOf(e),a.push({value:i,major:o});return a}(u,r._majorUnit)},getLabelForIndex:function(t,e){var n=this.chart.data,r=this.options.time,i=n.labels&&t<n.labels.length?n.labels[t]:"",o=n.datasets[e].data[t];return Bf.isObject(o)&&(i=this.getRightValue(o)),r.tooltipFormat?Yp(i,r).format(r.tooltipFormat):"string"==typeof i?i:Yp(i,r).format(this._labelFormat)},tickFormatFunction:function(t,e,n,r){var i=this.options,o=t.valueOf(),a=i.time.displayFormats,s=a[this._unit],l=this._majorUnit,u=a[l],c=t.clone().startOf(l).valueOf(),d=i.ticks.major,f=d.enabled&&l&&u&&o===c,h=t.format(r||(f?u:s)),p=f?d:i.ticks.minor,v=Bf.valueOrDefault(p.callback,p.userCallback);return v?v(h,e,n):h},convertTicksToLabels:function(t){var e,n,r=[];for(e=0,n=t.length;e<n;++e)r.push(this.tickFormatFunction(Lp(t[e].value),e,t));return r},getPixelForOffset:function(t){var e=this,n=e._horizontal?e.width:e.height,r=e._horizontal?e.left:e.top,i=Bp(e._table,"time",t,"pos");return r+n*(e._offsets.left+i)/(e._offsets.left+1+e._offsets.right)},getPixelForValue:function(t,e,n){var r=null;if(void 0!==e&&void 0!==n&&(r=this._timestamps.datasets[n][e]),null===r&&(r=Wp(t,this)),null!==r)return this.getPixelForOffset(r)},getPixelForTick:function(t){var e=this.getTicks();return t>=0&&t<e.length?this.getPixelForOffset(e[t].value):null},getValueForPixel:function(t){var e=this,n=e._horizontal?e.width:e.height,r=e._horizontal?e.left:e.top,i=(n?(t-r)/n:0)*(e._offsets.left+1+e._offsets.left)-e._offsets.right,o=Bp(e._table,"pos",i,"time");return Lp(o)},getLabelWidth:function(t){var e=this.options.ticks,n=this.ctx.measureText(t).width,r=Bf.toRadians(e.maxRotation),i=Math.cos(r),o=Math.sin(r);return n*i+Bf.valueOrDefault(e.fontSize,Hf.global.defaultFontSize)*o},getLabelCapacity:function(t){var e=this,n=e.options.time.displayFormats.millisecond,r=e.tickFormatFunction(Lp(t),0,[],n),i=e.getLabelWidth(r),o=e.isHorizontal()?e.width:e.height,a=Math.floor(o/i);return a>0?a:1}}),Nh.registerScaleType("time",hv,{position:"bottom",distribution:"linear",bounds:"data",time:{parser:!1,format:!1,unit:!1,round:!1,displayFormat:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{millisecond:"h:mm:ss.SSS a",second:"h:mm:ss a",minute:"h:mm a",hour:"hA",day:"MMM D",week:"ll",month:"MMM YYYY",quarter:"[Q]Q - YYYY",year:"YYYY"}},ticks:{autoSkip:!1,source:"auto",major:{enabled:!1}}}),function(t){t.controllers.bar=t.DatasetController.extend({dataElementType:Kh.Rectangle,initialize:function(){var e;t.DatasetController.prototype.initialize.apply(this,arguments),(e=this.getMeta()).stack=this.getDataset().stack,e.bar=!0},update:function(t){var e,n,r=this.getMeta().data;for(this._ruler=this.getRuler(),e=0,n=r.length;e<n;++e)this.updateElement(r[e],e,t)},updateElement:function(t,e,n){var r=this,i=r.chart,o=r.getMeta(),a=r.getDataset(),s=t.custom||{},l=i.options.elements.rectangle;t._xScale=r.getScaleForId(o.xAxisID),t._yScale=r.getScaleForId(o.yAxisID),t._datasetIndex=r.index,t._index=e,t._model={datasetLabel:a.label,label:i.data.labels[e],borderSkipped:s.borderSkipped?s.borderSkipped:l.borderSkipped,backgroundColor:s.backgroundColor?s.backgroundColor:Bf.valueAtIndexOrDefault(a.backgroundColor,e,l.backgroundColor),borderColor:s.borderColor?s.borderColor:Bf.valueAtIndexOrDefault(a.borderColor,e,l.borderColor),borderWidth:s.borderWidth?s.borderWidth:Bf.valueAtIndexOrDefault(a.borderWidth,e,l.borderWidth)},r.updateElementGeometry(t,e,n),t.pivot()},updateElementGeometry:function(t,e,n){var r=this,i=t._model,o=r.getValueScale(),a=o.getBasePixel(),s=o.isHorizontal(),l=r._ruler||r.getRuler(),u=r.calculateBarValuePixels(r.index,e),c=r.calculateBarIndexPixels(r.index,e,l);i.horizontal=s,i.base=n?a:u.base,i.x=s?n?a:u.head:c.center,i.y=s?c.center:n?a:u.head,i.height=s?c.size:void 0,i.width=s?void 0:c.size},getValueScaleId:function(){return this.getMeta().yAxisID},getIndexScaleId:function(){return this.getMeta().xAxisID},getValueScale:function(){return this.getScaleForId(this.getValueScaleId())},getIndexScale:function(){return this.getScaleForId(this.getIndexScaleId())},_getStacks:function(t){var e,n,r=this.chart,i=this.getIndexScale().options.stacked,o=void 0===t?r.data.datasets.length:t+1,a=[];for(e=0;e<o;++e)(n=r.getDatasetMeta(e)).bar&&r.isDatasetVisible(e)&&(!1===i||!0===i&&-1===a.indexOf(n.stack)||void 0===i&&(void 0===n.stack||-1===a.indexOf(n.stack)))&&a.push(n.stack);return a},getStackCount:function(){return this._getStacks().length},getStackIndex:function(t,e){var n=this._getStacks(t),r=void 0!==e?n.indexOf(e):-1;return-1===r?n.length-1:r},getRuler:function(){var t,e,n=this.getIndexScale(),r=this.getStackCount(),i=this.index,o=n.isHorizontal(),a=o?n.left:n.top,s=a+(o?n.width:n.height),l=[];for(t=0,e=this.getMeta().data.length;t<e;++t)l.push(n.getPixelForValue(null,t,i));return{min:Bf.isNullOrUndef(n.options.barThickness)?function(t,e){var n,r,i,o,a=t.isHorizontal()?t.width:t.height,s=t.getTicks();for(i=1,o=e.length;i<o;++i)a=Math.min(a,e[i]-e[i-1]);for(i=0,o=s.length;i<o;++i)r=t.getPixelForTick(i),a=i>0?Math.min(a,r-n):a,n=r;return a}(n,l):-1,pixels:l,start:a,end:s,stackCount:r,scale:n}},calculateBarValuePixels:function(t,e){var n,r,i,o,a,s,l=this.chart,u=this.getMeta(),c=this.getValueScale(),d=l.data.datasets,f=c.getRightValue(d[t].data[e]),h=c.options.stacked,p=u.stack,v=0;if(h||void 0===h&&void 0!==p)for(n=0;n<t;++n)(r=l.getDatasetMeta(n)).bar&&r.stack===p&&r.controller.getValueScaleId()===c.id&&l.isDatasetVisible(n)&&(i=c.getRightValue(d[n].data[e]),(f<0&&i<0||f>=0&&i>0)&&(v+=i));return o=c.getPixelForValue(v),{size:s=((a=c.getPixelForValue(v+f))-o)/2,base:o,head:a,center:a+s/2}},calculateBarIndexPixels:function(t,e,n){var r=n.scale.options,i="flex"===r.barThickness?function(t,e,n){var r,i=e.pixels,o=i[t],a=t>0?i[t-1]:null,s=t<i.length-1?i[t+1]:null,l=n.categoryPercentage;return null===a&&(a=o-(null===s?e.end-o:s-o)),null===s&&(s=o+o-a),r=o-(o-a)/2*l,{chunk:(s-a)/2*l/e.stackCount,ratio:n.barPercentage,start:r}}(e,n,r):function(t,e,n){var r,i,o=n.barThickness,a=e.stackCount,s=e.pixels[t];return Bf.isNullOrUndef(o)?(r=e.min*n.categoryPercentage,i=n.barPercentage):(r=o*a,i=1),{chunk:r/a,ratio:i,start:s-r/2}}(e,n,r),o=this.getStackIndex(t,this.getMeta().stack),a=i.start+i.chunk*o+i.chunk/2,s=Math.min(Bf.valueOrDefault(r.maxBarThickness,1/0),i.chunk*i.ratio);return{base:a-s/2,head:a+s/2,center:a,size:s}},draw:function(){var t=this.chart,e=this.getValueScale(),n=this.getMeta().data,r=this.getDataset(),i=n.length,o=0;for(Bf.canvas.clipArea(t.ctx,t.chartArea);o<i;++o)isNaN(e.getRightValue(r.data[o]))||n[o].draw();Bf.canvas.unclipArea(t.ctx)}}),t.controllers.horizontalBar=t.controllers.bar.extend({getValueScaleId:function(){return this.getMeta().xAxisID},getIndexScaleId:function(){return this.getMeta().yAxisID}})}(pv),function(t){t.controllers.bubble=t.DatasetController.extend({dataElementType:Kh.Point,update:function(t){var e=this,n=e.getMeta().data;Bf.each(n,function(n,r){e.updateElement(n,r,t)})},updateElement:function(t,e,n){var r=this,o=r.getMeta(),a=t.custom||{},s=r.getScaleForId(o.xAxisID),l=r.getScaleForId(o.yAxisID),u=r._resolveElementOptions(t,e),c=r.getDataset().data[e],d=r.index,f=n?s.getPixelForDecimal(.5):s.getPixelForValue("object"===(void 0===c?"undefined":i(c))?c:NaN,e,d),h=n?l.getBasePixel():l.getPixelForValue(c,e,d);t._xScale=s,t._yScale=l,t._options=u,t._datasetIndex=d,t._index=e,t._model={backgroundColor:u.backgroundColor,borderColor:u.borderColor,borderWidth:u.borderWidth,hitRadius:u.hitRadius,pointStyle:u.pointStyle,rotation:u.rotation,radius:n?0:u.radius,skip:a.skip||isNaN(f)||isNaN(h),x:f,y:h},t.pivot()},setHoverStyle:function(t){var e=t._model,n=t._options;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth,radius:e.radius},e.backgroundColor=Bf.valueOrDefault(n.hoverBackgroundColor,Bf.getHoverColor(n.backgroundColor)),e.borderColor=Bf.valueOrDefault(n.hoverBorderColor,Bf.getHoverColor(n.borderColor)),e.borderWidth=Bf.valueOrDefault(n.hoverBorderWidth,n.borderWidth),e.radius=n.radius+n.hoverRadius},_resolveElementOptions:function(t,e){var n,r,i,o=this.chart,a=o.data.datasets[this.index],s=t.custom||{},l=o.options.elements.point,u=Bf.options.resolve,c=a.data[e],d={},f={chart:o,dataIndex:e,dataset:a,datasetIndex:this.index},h=["backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth","hoverRadius","hitRadius","pointStyle","rotation"];for(n=0,r=h.length;n<r;++n)d[i=h[n]]=u([s[i],a[i],l[i]],f,e);return d.radius=u([s.radius,c?c.r:void 0,a.radius,l.radius],f,e),d}})}(pv),function(t){t.controllers.doughnut=t.controllers.pie=t.DatasetController.extend({dataElementType:Kh.Arc,linkScales:Bf.noop,getRingIndex:function(t){for(var e=0,n=0;n<t;++n)this.chart.isDatasetVisible(n)&&++e;return e},update:function(t){var e=this,n=e.chart,r=n.chartArea,i=n.options,o=i.elements.arc,a=r.right-r.left-o.borderWidth,s=r.bottom-r.top-o.borderWidth,l=Math.min(a,s),u={x:0,y:0},c=e.getMeta(),d=i.cutoutPercentage,f=i.circumference;if(f<2*Math.PI){var h=i.rotation%(2*Math.PI),p=(h+=2*Math.PI*(h>=Math.PI?-1:h<-Math.PI?1:0))+f,v={x:Math.cos(h),y:Math.sin(h)},g={x:Math.cos(p),y:Math.sin(p)},m=h<=0&&p>=0||h<=2*Math.PI&&2*Math.PI<=p,y=h<=.5*Math.PI&&.5*Math.PI<=p||h<=2.5*Math.PI&&2.5*Math.PI<=p,b=h<=-Math.PI&&-Math.PI<=p||h<=Math.PI&&Math.PI<=p,_=h<=.5*-Math.PI&&.5*-Math.PI<=p||h<=1.5*Math.PI&&1.5*Math.PI<=p,w=d/100,x={x:b?-1:Math.min(v.x*(v.x<0?1:w),g.x*(g.x<0?1:w)),y:_?-1:Math.min(v.y*(v.y<0?1:w),g.y*(g.y<0?1:w))},k={x:m?1:Math.max(v.x*(v.x>0?1:w),g.x*(g.x>0?1:w)),y:y?1:Math.max(v.y*(v.y>0?1:w),g.y*(g.y>0?1:w))},S={width:.5*(k.x-x.x),height:.5*(k.y-x.y)};l=Math.min(a/S.width,s/S.height),u={x:-.5*(k.x+x.x),y:-.5*(k.y+x.y)}}n.borderWidth=e.getMaxBorderWidth(c.data),n.outerRadius=Math.max((l-n.borderWidth)/2,0),n.innerRadius=Math.max(d?n.outerRadius/100*d:0,0),n.radiusLength=(n.outerRadius-n.innerRadius)/n.getVisibleDatasetCount(),n.offsetX=u.x*n.outerRadius,n.offsetY=u.y*n.outerRadius,c.total=e.calculateTotal(),e.outerRadius=n.outerRadius-n.radiusLength*e.getRingIndex(e.index),e.innerRadius=Math.max(e.outerRadius-n.radiusLength,0),Bf.each(c.data,function(n,r){e.updateElement(n,r,t)})},updateElement:function(t,e,n){var r=this,i=r.chart,o=i.chartArea,a=i.options,s=a.animation,l=(o.left+o.right)/2,u=(o.top+o.bottom)/2,c=a.rotation,d=a.rotation,f=r.getDataset(),h=n&&s.animateRotate?0:t.hidden?0:r.calculateCircumference(f.data[e])*(a.circumference/(2*Math.PI)),p=n&&s.animateScale?0:r.innerRadius,v=n&&s.animateScale?0:r.outerRadius,g=Bf.valueAtIndexOrDefault;Bf.extend(t,{_datasetIndex:r.index,_index:e,_model:{x:l+i.offsetX,y:u+i.offsetY,startAngle:c,endAngle:d,circumference:h,outerRadius:v,innerRadius:p,label:g(f.label,e,i.data.labels[e])}});var m=t._model,y=t.custom||{},b=Bf.valueAtIndexOrDefault,_=this.chart.options.elements.arc;m.backgroundColor=y.backgroundColor?y.backgroundColor:b(f.backgroundColor,e,_.backgroundColor),m.borderColor=y.borderColor?y.borderColor:b(f.borderColor,e,_.borderColor),m.borderWidth=y.borderWidth?y.borderWidth:b(f.borderWidth,e,_.borderWidth),n&&s.animateRotate||(m.startAngle=0===e?a.rotation:r.getMeta().data[e-1]._model.endAngle,m.endAngle=m.startAngle+m.circumference),t.pivot()},calculateTotal:function(){var t,e=this.getDataset(),n=this.getMeta(),r=0;return Bf.each(n.data,function(n,i){t=e.data[i],isNaN(t)||n.hidden||(r+=Math.abs(t))}),r},calculateCircumference:function(t){var e=this.getMeta().total;return e>0&&!isNaN(t)?2*Math.PI*(Math.abs(t)/e):0},getMaxBorderWidth:function(t){for(var e,n,r=0,i=this.index,o=t.length,a=0;a<o;a++)e=t[a]._model?t[a]._model.borderWidth:0,r=(n=t[a]._chart?t[a]._chart.config.data.datasets[i].hoverBorderWidth:0)>(r=e>r?e:r)?n:r;return r}})}(pv),function(t){function e(t,e){return Bf.valueOrDefault(t.showLine,e.showLines)}t.controllers.line=t.DatasetController.extend({datasetElementType:Kh.Line,dataElementType:Kh.Point,update:function(t){var n,r,i,o=this,a=o.getMeta(),s=a.dataset,l=a.data||[],u=o.chart.options,c=u.elements.line,d=o.getScaleForId(a.yAxisID),f=o.getDataset(),h=e(f,u);for(h&&(i=s.custom||{},void 0!==f.tension&&void 0===f.lineTension&&(f.lineTension=f.tension),s._scale=d,s._datasetIndex=o.index,s._children=l,s._model={spanGaps:f.spanGaps?f.spanGaps:u.spanGaps,tension:i.tension?i.tension:Bf.valueOrDefault(f.lineTension,c.tension),backgroundColor:i.backgroundColor?i.backgroundColor:f.backgroundColor||c.backgroundColor,borderWidth:i.borderWidth?i.borderWidth:f.borderWidth||c.borderWidth,borderColor:i.borderColor?i.borderColor:f.borderColor||c.borderColor,borderCapStyle:i.borderCapStyle?i.borderCapStyle:f.borderCapStyle||c.borderCapStyle,borderDash:i.borderDash?i.borderDash:f.borderDash||c.borderDash,borderDashOffset:i.borderDashOffset?i.borderDashOffset:f.borderDashOffset||c.borderDashOffset,borderJoinStyle:i.borderJoinStyle?i.borderJoinStyle:f.borderJoinStyle||c.borderJoinStyle,fill:i.fill?i.fill:void 0!==f.fill?f.fill:c.fill,steppedLine:i.steppedLine?i.steppedLine:Bf.valueOrDefault(f.steppedLine,c.stepped),cubicInterpolationMode:i.cubicInterpolationMode?i.cubicInterpolationMode:Bf.valueOrDefault(f.cubicInterpolationMode,c.cubicInterpolationMode)},s.pivot()),n=0,r=l.length;n<r;++n)o.updateElement(l[n],n,t);for(h&&0!==s._model.tension&&o.updateBezierControlPoints(),n=0,r=l.length;n<r;++n)l[n].pivot()},getPointBackgroundColor:function(t,e){var n=this.chart.options.elements.point.backgroundColor,r=this.getDataset(),i=t.custom||{};return i.backgroundColor?n=i.backgroundColor:r.pointBackgroundColor?n=Bf.valueAtIndexOrDefault(r.pointBackgroundColor,e,n):r.backgroundColor&&(n=r.backgroundColor),n},getPointBorderColor:function(t,e){var n=this.chart.options.elements.point.borderColor,r=this.getDataset(),i=t.custom||{};return i.borderColor?n=i.borderColor:r.pointBorderColor?n=Bf.valueAtIndexOrDefault(r.pointBorderColor,e,n):r.borderColor&&(n=r.borderColor),n},getPointBorderWidth:function(t,e){var n=this.chart.options.elements.point.borderWidth,r=this.getDataset(),i=t.custom||{};return isNaN(i.borderWidth)?!isNaN(r.pointBorderWidth)||Bf.isArray(r.pointBorderWidth)?n=Bf.valueAtIndexOrDefault(r.pointBorderWidth,e,n):isNaN(r.borderWidth)||(n=r.borderWidth):n=i.borderWidth,n},getPointRotation:function(t,e){var n=this.chart.options.elements.point.rotation,r=this.getDataset(),i=t.custom||{};return isNaN(i.rotation)?isNaN(r.pointRotation)&&!Bf.isArray(r.pointRotation)||(n=Bf.valueAtIndexOrDefault(r.pointRotation,e,n)):n=i.rotation,n},updateElement:function(t,e,n){var r,o,a=this,s=a.getMeta(),l=t.custom||{},u=a.getDataset(),c=a.index,d=u.data[e],f=a.getScaleForId(s.yAxisID),h=a.getScaleForId(s.xAxisID),p=a.chart.options.elements.point;void 0!==u.radius&&void 0===u.pointRadius&&(u.pointRadius=u.radius),void 0!==u.hitRadius&&void 0===u.pointHitRadius&&(u.pointHitRadius=u.hitRadius),r=h.getPixelForValue("object"===(void 0===d?"undefined":i(d))?d:NaN,e,c),o=n?f.getBasePixel():a.calculatePointY(d,e,c),t._xScale=h,t._yScale=f,t._datasetIndex=c,t._index=e,t._model={x:r,y:o,skip:l.skip||isNaN(r)||isNaN(o),radius:l.radius||Bf.valueAtIndexOrDefault(u.pointRadius,e,p.radius),pointStyle:l.pointStyle||Bf.valueAtIndexOrDefault(u.pointStyle,e,p.pointStyle),rotation:a.getPointRotation(t,e),backgroundColor:a.getPointBackgroundColor(t,e),borderColor:a.getPointBorderColor(t,e),borderWidth:a.getPointBorderWidth(t,e),tension:s.dataset._model?s.dataset._model.tension:0,steppedLine:!!s.dataset._model&&s.dataset._model.steppedLine,hitRadius:l.hitRadius||Bf.valueAtIndexOrDefault(u.pointHitRadius,e,p.hitRadius)}},calculatePointY:function(t,e,n){var r,i,o,a=this.chart,s=this.getMeta(),l=this.getScaleForId(s.yAxisID),u=0,c=0;if(l.options.stacked){for(r=0;r<n;r++)if(i=a.data.datasets[r],"line"===(o=a.getDatasetMeta(r)).type&&o.yAxisID===l.id&&a.isDatasetVisible(r)){var d=Number(l.getRightValue(i.data[e]));d<0?c+=d||0:u+=d||0}var f=Number(l.getRightValue(t));return f<0?l.getPixelForValue(c+f):l.getPixelForValue(u+f)}return l.getPixelForValue(t)},updateBezierControlPoints:function(){var t,e,n,r,i=this.getMeta(),o=this.chart.chartArea,a=i.data||[];function s(t,e,n){return Math.max(Math.min(t,n),e)}if(i.dataset._model.spanGaps&&(a=a.filter(function(t){return!t._model.skip})),"monotone"===i.dataset._model.cubicInterpolationMode)Bf.splineCurveMonotone(a);else for(t=0,e=a.length;t<e;++t)n=a[t]._model,r=Bf.splineCurve(Bf.previousItem(a,t)._model,n,Bf.nextItem(a,t)._model,i.dataset._model.tension),n.controlPointPreviousX=r.previous.x,n.controlPointPreviousY=r.previous.y,n.controlPointNextX=r.next.x,n.controlPointNextY=r.next.y;if(this.chart.options.elements.line.capBezierPoints)for(t=0,e=a.length;t<e;++t)(n=a[t]._model).controlPointPreviousX=s(n.controlPointPreviousX,o.left,o.right),n.controlPointPreviousY=s(n.controlPointPreviousY,o.top,o.bottom),n.controlPointNextX=s(n.controlPointNextX,o.left,o.right),n.controlPointNextY=s(n.controlPointNextY,o.top,o.bottom)},draw:function(){var t,n=this.chart,r=this.getMeta(),i=r.data||[],o=n.chartArea,a=i.length,s=0;for(e(this.getDataset(),n.options)&&(t=(r.dataset._model.borderWidth||0)/2,Bf.canvas.clipArea(n.ctx,{left:o.left,right:o.right,top:o.top-t,bottom:o.bottom+t}),r.dataset.draw(),Bf.canvas.unclipArea(n.ctx));s<a;++s)i[s].draw(o)},setHoverStyle:function(t){var e=this.chart.data.datasets[t._datasetIndex],n=t._index,r=t.custom||{},i=t._model;t.$previousStyle={backgroundColor:i.backgroundColor,borderColor:i.borderColor,borderWidth:i.borderWidth,radius:i.radius},i.backgroundColor=r.hoverBackgroundColor||Bf.valueAtIndexOrDefault(e.pointHoverBackgroundColor,n,Bf.getHoverColor(i.backgroundColor)),i.borderColor=r.hoverBorderColor||Bf.valueAtIndexOrDefault(e.pointHoverBorderColor,n,Bf.getHoverColor(i.borderColor)),i.borderWidth=r.hoverBorderWidth||Bf.valueAtIndexOrDefault(e.pointHoverBorderWidth,n,i.borderWidth),i.radius=r.hoverRadius||Bf.valueAtIndexOrDefault(e.pointHoverRadius,n,this.chart.options.elements.point.hoverRadius)}})}(pv),function(t){t.controllers.polarArea=t.DatasetController.extend({dataElementType:Kh.Arc,linkScales:Bf.noop,update:function(t){var e,n,r,i=this,o=i.getDataset(),a=i.getMeta(),s=i.chart.options.startAngle||0,l=i._starts=[],u=i._angles=[];for(i._updateRadius(),a.count=i.countVisibleElements(),e=0,n=o.data.length;e<n;e++)l[e]=s,r=i._computeAngle(e),u[e]=r,s+=r;Bf.each(a.data,function(e,n){i.updateElement(e,n,t)})},_updateRadius:function(){var t=this,e=t.chart,n=e.chartArea,r=e.options,i=r.elements.arc,o=Math.min(n.right-n.left,n.bottom-n.top);e.outerRadius=Math.max((o-i.borderWidth/2)/2,0),e.innerRadius=Math.max(r.cutoutPercentage?e.outerRadius/100*r.cutoutPercentage:1,0),e.radiusLength=(e.outerRadius-e.innerRadius)/e.getVisibleDatasetCount(),t.outerRadius=e.outerRadius-e.radiusLength*t.index,t.innerRadius=t.outerRadius-e.radiusLength},updateElement:function(t,e,n){var r=this,i=r.chart,o=r.getDataset(),a=i.options,s=a.animation,l=i.scale,u=i.data.labels,c=l.xCenter,d=l.yCenter,f=a.startAngle,h=t.hidden?0:l.getDistanceFromCenterForValue(o.data[e]),p=r._starts[e],v=p+(t.hidden?0:r._angles[e]),g=s.animateScale?0:l.getDistanceFromCenterForValue(o.data[e]);Bf.extend(t,{_datasetIndex:r.index,_index:e,_scale:l,_model:{x:c,y:d,innerRadius:0,outerRadius:n?g:h,startAngle:n&&s.animateRotate?f:p,endAngle:n&&s.animateRotate?f:v,label:Bf.valueAtIndexOrDefault(u,e,u[e])}});var m=this.chart.options.elements.arc,y=t.custom||{},b=Bf.valueAtIndexOrDefault,_=t._model;_.backgroundColor=y.backgroundColor?y.backgroundColor:b(o.backgroundColor,e,m.backgroundColor),_.borderColor=y.borderColor?y.borderColor:b(o.borderColor,e,m.borderColor),_.borderWidth=y.borderWidth?y.borderWidth:b(o.borderWidth,e,m.borderWidth),t.pivot()},countVisibleElements:function(){var t=this.getDataset(),e=this.getMeta(),n=0;return Bf.each(e.data,function(e,r){isNaN(t.data[r])||e.hidden||n++}),n},_computeAngle:function(t){var e=this,n=this.getMeta().count,r=e.getDataset(),i=e.getMeta();if(isNaN(r.data[t])||i.data[t].hidden)return 0;var o={chart:e.chart,dataIndex:t,dataset:r,datasetIndex:e.index};return Bf.options.resolve([e.chart.options.elements.arc.angle,2*Math.PI/n],o,t)}})}(pv),function(t){t.controllers.radar=t.DatasetController.extend({datasetElementType:Kh.Line,dataElementType:Kh.Point,linkScales:Bf.noop,update:function(t){var e=this,n=e.getMeta(),r=n.dataset,i=n.data,o=r.custom||{},a=e.getDataset(),s=e.chart.options.elements.line,l=e.chart.scale;void 0!==a.tension&&void 0===a.lineTension&&(a.lineTension=a.tension),Bf.extend(n.dataset,{_datasetIndex:e.index,_scale:l,_children:i,_loop:!0,_model:{tension:o.tension?o.tension:Bf.valueOrDefault(a.lineTension,s.tension),backgroundColor:o.backgroundColor?o.backgroundColor:a.backgroundColor||s.backgroundColor,borderWidth:o.borderWidth?o.borderWidth:a.borderWidth||s.borderWidth,borderColor:o.borderColor?o.borderColor:a.borderColor||s.borderColor,fill:o.fill?o.fill:void 0!==a.fill?a.fill:s.fill,borderCapStyle:o.borderCapStyle?o.borderCapStyle:a.borderCapStyle||s.borderCapStyle,borderDash:o.borderDash?o.borderDash:a.borderDash||s.borderDash,borderDashOffset:o.borderDashOffset?o.borderDashOffset:a.borderDashOffset||s.borderDashOffset,borderJoinStyle:o.borderJoinStyle?o.borderJoinStyle:a.borderJoinStyle||s.borderJoinStyle}}),n.dataset.pivot(),Bf.each(i,function(n,r){e.updateElement(n,r,t)},e),e.updateBezierControlPoints()},updateElement:function(t,e,n){var r=this,i=t.custom||{},o=r.getDataset(),a=r.chart.scale,s=r.chart.options.elements.point,l=a.getPointPositionForValue(e,o.data[e]);void 0!==o.radius&&void 0===o.pointRadius&&(o.pointRadius=o.radius),void 0!==o.hitRadius&&void 0===o.pointHitRadius&&(o.pointHitRadius=o.hitRadius),Bf.extend(t,{_datasetIndex:r.index,_index:e,_scale:a,_model:{x:n?a.xCenter:l.x,y:n?a.yCenter:l.y,tension:i.tension?i.tension:Bf.valueOrDefault(o.lineTension,r.chart.options.elements.line.tension),radius:i.radius?i.radius:Bf.valueAtIndexOrDefault(o.pointRadius,e,s.radius),backgroundColor:i.backgroundColor?i.backgroundColor:Bf.valueAtIndexOrDefault(o.pointBackgroundColor,e,s.backgroundColor),borderColor:i.borderColor?i.borderColor:Bf.valueAtIndexOrDefault(o.pointBorderColor,e,s.borderColor),borderWidth:i.borderWidth?i.borderWidth:Bf.valueAtIndexOrDefault(o.pointBorderWidth,e,s.borderWidth),pointStyle:i.pointStyle?i.pointStyle:Bf.valueAtIndexOrDefault(o.pointStyle,e,s.pointStyle),rotation:i.rotation?i.rotation:Bf.valueAtIndexOrDefault(o.pointRotation,e,s.rotation),hitRadius:i.hitRadius?i.hitRadius:Bf.valueAtIndexOrDefault(o.pointHitRadius,e,s.hitRadius)}}),t._model.skip=i.skip?i.skip:isNaN(t._model.x)||isNaN(t._model.y)},updateBezierControlPoints:function(){var t=this.chart.chartArea,e=this.getMeta();Bf.each(e.data,function(n,r){var i=n._model,o=Bf.splineCurve(Bf.previousItem(e.data,r,!0)._model,i,Bf.nextItem(e.data,r,!0)._model,i.tension);i.controlPointPreviousX=Math.max(Math.min(o.previous.x,t.right),t.left),i.controlPointPreviousY=Math.max(Math.min(o.previous.y,t.bottom),t.top),i.controlPointNextX=Math.max(Math.min(o.next.x,t.right),t.left),i.controlPointNextY=Math.max(Math.min(o.next.y,t.bottom),t.top),n.pivot()})},setHoverStyle:function(t){var e=this.chart.data.datasets[t._datasetIndex],n=t.custom||{},r=t._index,i=t._model;t.$previousStyle={backgroundColor:i.backgroundColor,borderColor:i.borderColor,borderWidth:i.borderWidth,radius:i.radius},i.radius=n.hoverRadius?n.hoverRadius:Bf.valueAtIndexOrDefault(e.pointHoverRadius,r,this.chart.options.elements.point.hoverRadius),i.backgroundColor=n.hoverBackgroundColor?n.hoverBackgroundColor:Bf.valueAtIndexOrDefault(e.pointHoverBackgroundColor,r,Bf.getHoverColor(i.backgroundColor)),i.borderColor=n.hoverBorderColor?n.hoverBorderColor:Bf.valueAtIndexOrDefault(e.pointHoverBorderColor,r,Bf.getHoverColor(i.borderColor)),i.borderWidth=n.hoverBorderWidth?n.hoverBorderWidth:Bf.valueAtIndexOrDefault(e.pointHoverBorderWidth,r,i.borderWidth)}})}(pv),function(t){t.controllers.scatter=t.controllers.line}(pv),function(t){t.Bar=function(e,n){return n.type="bar",new t(e,n)}}(pv),function(t){t.Bubble=function(e,n){return n.type="bubble",new t(e,n)}}(pv),function(t){t.Doughnut=function(e,n){return n.type="doughnut",new t(e,n)}}(pv),function(t){t.Line=function(e,n){return n.type="line",new t(e,n)}}(pv),function(t){t.PolarArea=function(e,n){return n.type="polarArea",new t(e,n)}}(pv),function(t){t.Radar=function(e,n){return n.type="radar",new t(e,n)}}(pv),function(t){t.Scatter=function(e,n){return n.type="scatter",new t(e,n)}}(pv),lv)lv.hasOwnProperty(vv)&&pv.plugins.register(lv[vv]);pv.platform.initialize();var gv=pv;function mv(t,e){return{render:function(t){return t("div",{style:this.styles,class:this.cssClasses},[t("canvas",{attrs:{id:this.chartId,width:this.width,height:this.height},ref:"canvas"})])},props:{chartId:{default:t,type:String},width:{default:400,type:Number},height:{default:400,type:Number},cssClasses:{type:String,default:""},styles:{type:Object},plugins:{type:Array,default:function(){return[]}}},data:function(){return{_chart:null,_plugins:this.plugins}},methods:{addPlugin:function(t){this.$data._plugins.push(t)},generateLegend:function(){if(this.$data._chart)return this.$data._chart.generateLegend()},renderChart:function(t,n){this.$data._chart&&this.$data._chart.destroy(),this.$data._chart=new gv(this.$refs.canvas.getContext("2d"),{type:e,data:t,options:n,plugins:this.$data._plugins})}},beforeDestroy:function(){this.$data._chart&&this.$data._chart.destroy()}}}"undefined"!=typeof window&&(window.Chart=pv),pv.Legend=lv.legend._element,pv.Title=lv.title._element,pv.pluginService=pv.plugins,pv.PluginBase=pv.Element.extend({}),pv.canvasHelpers=pv.helpers.canvas,pv.layoutService=pv.layouts;var yv=mv("bar-chart","bar"),bv=mv("horizontalbar-chart","horizontalBar"),_v=mv("line-chart","line"),wv=mv("pie-chart","pie"),xv=If.reactiveProp;Chart.defaults.global.title.padding=20,Chart.defaults.global.title.fontSize=16,Chart.defaults.global.title.lineHeight=1.6;var kv=xf({},void 0,{extends:yv,mixins:[xv],props:{options:{type:Object,default:function(){return{legend:{display:!1},lineTension:1}}}},mounted:function(){this.renderChart(this.chartData,this.options)}},void 0,void 0,void 0,void 0,void 0),Sv={data:{labels:["1980","1990","2000","2010","2020"],datasets:[{data:[6542564,7322564,8008278,8175133,5475133],fill:!1,backgroundColor:["#2F334F","#3155A6","#F2695D","#EBBCD8","#F9A137"],borderColor:["#ACAEB9"],borderWidth:1}]},bar:{options:{title:{display:!0,text:"Population Chart"},legend:{display:!1},lineTension:1,scales:{xAxes:[{scaleLabel:{display:!0,labelString:"Years"}}],yAxes:[{scaleLabel:{display:!0,labelString:"Population"},ticks:{padding:25}}]}}},horizontalBar:{options:{title:{display:!0,text:"Population Chart"},legend:{display:!1},lineTension:1,scales:{xAxes:[{scaleLabel:{display:!0,labelString:"Population"}}],yAxes:[{scaleLabel:{display:!0,labelString:"Years"},ticks:{padding:25}}]}}},pie:{options:{title:{display:!0,text:"Population Chart"},legend:{display:!0},lineTension:1}}},Mv=function(t,e){void 0===t&&(t={}),void 0===e&&(e={}),this.data=e,this.settings=t,this.init()};Mv.prototype.init=function(){_s.component("nyco-chart-bar",kv),new _s({el:'[data-js="chart-bar"]',delimiters:["v{","}"],data:function(){return{data:Sv.data,options:Sv.bar.options}}})},Mv.prototype._constants=function(t){console.dir(t)};var Cv=If.reactiveProp;Chart.defaults.global.title.padding=20,Chart.defaults.global.title.fontSize=16,Chart.defaults.global.title.lineHeight=1.6;var Av=xf({},void 0,{extends:bv,mixins:[Cv],props:{options:{type:Object,default:function(){return{legend:{display:!1},lineTension:1}}}},mounted:function(){this.renderChart(this.chartData,this.options)}},void 0,void 0,void 0,void 0,void 0),Ov=function(t,e){void 0===t&&(t={}),void 0===e&&(e={}),this.data=e,this.settings=t,this.init()};Ov.prototype.init=function(){_s.component("nyco-chart-horizontal-bar",Av),new _s({el:'[data-js="chart-horizontal-bar"]',delimiters:["v{","}"],data:function(){return{data:Sv.data,options:Sv.horizontalBar.options}}})},Ov.prototype._constants=function(t){console.dir(t)};var Dv=If.reactiveProp;Chart.defaults.global.title.padding=20,Chart.defaults.global.title.fontSize=16,Chart.defaults.global.title.lineHeight=1.6;var Tv=xf({},void 0,{extends:_v,mixins:[Dv],props:{options:{type:Object,default:function(){return{legend:{display:!1},lineTension:1}}}},mounted:function(){this.renderChart(this.chartData,this.options)}},void 0,void 0,void 0,void 0,void 0),Pv=function(t,e){void 0===t&&(t={}),void 0===e&&(e={}),this.data=e,this.settings=t,this.init()};Pv.prototype.init=function(){_s.component("nyco-chart-line",Tv),new _s({el:'[data-js="chart-line"]',delimiters:["v{","}"],data:function(){return{data:Sv.data,options:Sv.bar.options}}})},Pv.prototype._constants=function(t){console.dir(t)};var Rv=If.reactiveProp;Chart.defaults.global.title.padding=20,Chart.defaults.global.title.fontSize=16,Chart.defaults.global.title.lineHeight=1.6;var Iv=xf({},void 0,{extends:wv,mixins:[Rv],props:{options:{type:Object,default:function(){return{legend:{display:!0},lineTension:1}}}},mounted:function(){this.renderChart(this.chartData,this.options)}},void 0,void 0,void 0,void 0,void 0),Lv=function(t,e){void 0===t&&(t={}),void 0===e&&(e={}),this.data=e,this.settings=t,this.init()};Lv.prototype.init=function(){_s.component("nyco-chart-pie",Iv),new _s({el:'[data-js="chart-pie"]',delimiters:["v{","}"],data:function(){return{data:Sv.data,options:Sv.pie.options}}})},Lv.prototype._constants=function(t){console.dir(t)};var Ev={props:["data"],data:function(){return{map:null}},mounted:function(){this.initializeMap()},beforeDestroy:function(){},watch:{"data.boroughs":function(){this.createBoroughLayer(this.map,this.data.boroughs)},"data.neighborhoods":function(){this.createNeighborhoodLayer(this.map,this.data.neighborhoods)}},methods:{createBoroughLayer:function(t,e){if(!t||!e)throw Error("Required "+(t?"layerData":"map")+" param is empty");t.on("load",function(n){t.addSource("boroughs",{type:"geojson",data:e}),t.addLayer({id:"boroughs",type:"fill",source:"boroughs",paint:{"fill-color":"#ffa133","fill-opacity":.6}})})},createNeighborhoodLayer:function(t,e){if(!t||!e)throw Error("Required "+(t?"layerData":"map")+" param is empty");t.on("load",function(n){t.addSource("neighborhoods",{type:"geojson",data:e}),t.addLayer({id:"neighborhoods",type:"fill",source:"neighborhoods",paint:{"fill-color":"#f2695d","fill-opacity":.5}})})},initializeMap:function(){mapboxgl.accessToken=this.data.api_key,this.map=new mapboxgl.Map({container:"nyco-map",center:[-73.98671,40.693391],zoom:9,style:"mapbox://styles/mapbox/streets-v11"}),this.map.addControl(new mapboxgl.NavigationControl)}}},Fv=function(){var t=this.$createElement;this._self._c;return this._m(0)};Fv._withStripped=!0;var jv=xf({render:Fv,staticRenderFns:[function(){var t=this.$createElement,e=this._self._c||t;return e("div",[e("p",[this._v("Hello, I'm a map!")]),this._v(" "),e("div",{staticStyle:{height:"400px",width:"500px"},attrs:{id:"nyco-map"}})])}]},void 0,Ev,void 0,!1,void 0,void 0,void 0),Nv={data:{api_key:"XXX",boroughs:{},neighborhoods:{}}},$v=[],zv=[],Bv="undefined"!=typeof Uint8Array?Uint8Array:Array,Yv=!1;function Wv(){Yv=!0;for(var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",e=0,n=t.length;e<n;++e)$v[e]=t[e],zv[t.charCodeAt(e)]=e;zv["-".charCodeAt(0)]=62,zv["_".charCodeAt(0)]=63}function Uv(t,e,n){for(var r,i,o=[],a=e;a<n;a+=3)r=(t[a]<<16)+(t[a+1]<<8)+t[a+2],o.push($v[(i=r)>>18&63]+$v[i>>12&63]+$v[i>>6&63]+$v[63&i]);return o.join("")}function Hv(t){var e;Yv||Wv();for(var n=t.length,r=n%3,i="",o=[],a=0,s=n-r;a<s;a+=16383)o.push(Uv(t,a,a+16383>s?s:a+16383));return 1===r?(e=t[n-1],i+=$v[e>>2],i+=$v[e<<4&63],i+="=="):2===r&&(e=(t[n-2]<<8)+t[n-1],i+=$v[e>>10],i+=$v[e>>4&63],i+=$v[e<<2&63],i+="="),o.push(i),o.join("")}function Vv(t,e,n,r,i){var o,a,s=8*i-r-1,l=(1<<s)-1,u=l>>1,c=-7,d=n?i-1:0,f=n?-1:1,h=t[e+d];for(d+=f,o=h&(1<<-c)-1,h>>=-c,c+=s;c>0;o=256*o+t[e+d],d+=f,c-=8);for(a=o&(1<<-c)-1,o>>=-c,c+=r;c>0;a=256*a+t[e+d],d+=f,c-=8);if(0===o)o=1-u;else{if(o===l)return a?NaN:1/0*(h?-1:1);a+=Math.pow(2,r),o-=u}return(h?-1:1)*a*Math.pow(2,o-r)}function qv(t,e,n,r,i,o){var a,s,l,u=8*o-i-1,c=(1<<u)-1,d=c>>1,f=23===i?Math.pow(2,-24)-Math.pow(2,-77):0,h=r?0:o-1,p=r?1:-1,v=e<0||0===e&&1/e<0?1:0;for(e=Math.abs(e),isNaN(e)||e===1/0?(s=isNaN(e)?1:0,a=c):(a=Math.floor(Math.log(e)/Math.LN2),e*(l=Math.pow(2,-a))<1&&(a--,l*=2),(e+=a+d>=1?f/l:f*Math.pow(2,1-d))*l>=2&&(a++,l/=2),a+d>=c?(s=0,a=c):a+d>=1?(s=(e*l-1)*Math.pow(2,i),a+=d):(s=e*Math.pow(2,d-1)*Math.pow(2,i),a=0));i>=8;t[n+h]=255&s,h+=p,s/=256,i-=8);for(a=a<<i|s,u+=i;u>0;t[n+h]=255&a,h+=p,a/=256,u-=8);t[n+h-p]|=128*v}var Gv={}.toString,Jv=Array.isArray||function(t){return"[object Array]"==Gv.call(t)};function Zv(){return Xv.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function Kv(t,e){if(Zv()<e)throw new RangeError("Invalid typed array length");return Xv.TYPED_ARRAY_SUPPORT?(t=new Uint8Array(e)).__proto__=Xv.prototype:(null===t&&(t=new Xv(e)),t.length=e),t}function Xv(t,e,n){if(!(Xv.TYPED_ARRAY_SUPPORT||this instanceof Xv))return new Xv(t,e,n);if("number"==typeof t){if("string"==typeof e)throw new Error("If encoding is specified then the first argument must be a string");return eg(this,t)}return Qv(this,t,e,n)}function Qv(t,e,n,r){if("number"==typeof e)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&e instanceof ArrayBuffer?function(t,e,n,r){if(e.byteLength,n<0||e.byteLength<n)throw new RangeError("'offset' is out of bounds");if(e.byteLength<n+(r||0))throw new RangeError("'length' is out of bounds");e=void 0===n&&void 0===r?new Uint8Array(e):void 0===r?new Uint8Array(e,n):new Uint8Array(e,n,r);Xv.TYPED_ARRAY_SUPPORT?(t=e).__proto__=Xv.prototype:t=ng(t,e);return t}(t,e,n,r):"string"==typeof e?function(t,e,n){"string"==typeof n&&""!==n||(n="utf8");if(!Xv.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var r=0|og(e,n),i=(t=Kv(t,r)).write(e,n);i!==r&&(t=t.slice(0,i));return t}(t,e,n):function(t,e){if(ig(e)){var n=0|rg(e.length);return 0===(t=Kv(t,n)).length?t:(e.copy(t,0,0,n),t)}if(e){if("undefined"!=typeof ArrayBuffer&&e.buffer instanceof ArrayBuffer||"length"in e)return"number"!=typeof e.length||(r=e.length)!=r?Kv(t,0):ng(t,e);if("Buffer"===e.type&&Jv(e.data))return ng(t,e.data)}var r;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(t,e)}function tg(t){if("number"!=typeof t)throw new TypeError('"size" argument must be a number');if(t<0)throw new RangeError('"size" argument must not be negative')}function eg(t,e){if(tg(e),t=Kv(t,e<0?0:0|rg(e)),!Xv.TYPED_ARRAY_SUPPORT)for(var n=0;n<e;++n)t[n]=0;return t}function ng(t,e){var n=e.length<0?0:0|rg(e.length);t=Kv(t,n);for(var r=0;r<n;r+=1)t[r]=255&e[r];return t}function rg(t){if(t>=Zv())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+Zv().toString(16)+" bytes");return 0|t}function ig(t){return!(null==t||!t._isBuffer)}function og(t,e){if(ig(t))return t.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(t)||t instanceof ArrayBuffer))return t.byteLength;"string"!=typeof t&&(t=""+t);var n=t.length;if(0===n)return 0;for(var r=!1;;)switch(e){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return Pg(t).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return Rg(t).length;default:if(r)return Pg(t).length;e=(""+e).toLowerCase(),r=!0}}function ag(t,e,n){var r=t[e];t[e]=t[n],t[n]=r}function sg(t,e,n,r,i){if(0===t.length)return-1;if("string"==typeof n?(r=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=i?0:t.length-1),n<0&&(n=t.length+n),n>=t.length){if(i)return-1;n=t.length-1}else if(n<0){if(!i)return-1;n=0}if("string"==typeof e&&(e=Xv.from(e,r)),ig(e))return 0===e.length?-1:lg(t,e,n,r,i);if("number"==typeof e)return e&=255,Xv.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?i?Uint8Array.prototype.indexOf.call(t,e,n):Uint8Array.prototype.lastIndexOf.call(t,e,n):lg(t,[e],n,r,i);throw new TypeError("val must be string, number or Buffer")}function lg(t,e,n,r,i){var o,a=1,s=t.length,l=e.length;if(void 0!==r&&("ucs2"===(r=String(r).toLowerCase())||"ucs-2"===r||"utf16le"===r||"utf-16le"===r)){if(t.length<2||e.length<2)return-1;a=2,s/=2,l/=2,n/=2}function u(t,e){return 1===a?t[e]:t.readUInt16BE(e*a)}if(i){var c=-1;for(o=n;o<s;o++)if(u(t,o)===u(e,-1===c?0:o-c)){if(-1===c&&(c=o),o-c+1===l)return c*a}else-1!==c&&(o-=o-c),c=-1}else for(n+l>s&&(n=s-l),o=n;o>=0;o--){for(var d=!0,f=0;f<l;f++)if(u(t,o+f)!==u(e,f)){d=!1;break}if(d)return o}return-1}function ug(t,e,n,r){n=Number(n)||0;var i=t.length-n;r?(r=Number(r))>i&&(r=i):r=i;var o=e.length;if(o%2!=0)throw new TypeError("Invalid hex string");r>o/2&&(r=o/2);for(var a=0;a<r;++a){var s=parseInt(e.substr(2*a,2),16);if(isNaN(s))return a;t[n+a]=s}return a}function cg(t,e,n,r){return Ig(Pg(e,t.length-n),t,n,r)}function dg(t,e,n,r){return Ig(function(t){for(var e=[],n=0;n<t.length;++n)e.push(255&t.charCodeAt(n));return e}(e),t,n,r)}function fg(t,e,n,r){return dg(t,e,n,r)}function hg(t,e,n,r){return Ig(Rg(e),t,n,r)}function pg(t,e,n,r){return Ig(function(t,e){for(var n,r,i,o=[],a=0;a<t.length&&!((e-=2)<0);++a)n=t.charCodeAt(a),r=n>>8,i=n%256,o.push(i),o.push(r);return o}(e,t.length-n),t,n,r)}function vg(t,e,n){return 0===e&&n===t.length?Hv(t):Hv(t.slice(e,n))}function gg(t,e,n){n=Math.min(t.length,n);for(var r=[],i=e;i<n;){var o,a,s,l,u=t[i],c=null,d=u>239?4:u>223?3:u>191?2:1;if(i+d<=n)switch(d){case 1:u<128&&(c=u);break;case 2:128==(192&(o=t[i+1]))&&(l=(31&u)<<6|63&o)>127&&(c=l);break;case 3:o=t[i+1],a=t[i+2],128==(192&o)&&128==(192&a)&&(l=(15&u)<<12|(63&o)<<6|63&a)>2047&&(l<55296||l>57343)&&(c=l);break;case 4:o=t[i+1],a=t[i+2],s=t[i+3],128==(192&o)&&128==(192&a)&&128==(192&s)&&(l=(15&u)<<18|(63&o)<<12|(63&a)<<6|63&s)>65535&&l<1114112&&(c=l)}null===c?(c=65533,d=1):c>65535&&(c-=65536,r.push(c>>>10&1023|55296),c=56320|1023&c),r.push(c),i+=d}return function(t){var e=t.length;if(e<=mg)return String.fromCharCode.apply(String,t);var n="",r=0;for(;r<e;)n+=String.fromCharCode.apply(String,t.slice(r,r+=mg));return n}(r)}Xv.TYPED_ARRAY_SUPPORT=void 0===n.TYPED_ARRAY_SUPPORT||n.TYPED_ARRAY_SUPPORT,Xv.poolSize=8192,Xv._augment=function(t){return t.__proto__=Xv.prototype,t},Xv.from=function(t,e,n){return Qv(null,t,e,n)},Xv.TYPED_ARRAY_SUPPORT&&(Xv.prototype.__proto__=Uint8Array.prototype,Xv.__proto__=Uint8Array),Xv.alloc=function(t,e,n){return function(t,e,n,r){return tg(e),e<=0?Kv(t,e):void 0!==n?"string"==typeof r?Kv(t,e).fill(n,r):Kv(t,e).fill(n):Kv(t,e)}(null,t,e,n)},Xv.allocUnsafe=function(t){return eg(null,t)},Xv.allocUnsafeSlow=function(t){return eg(null,t)},Xv.isBuffer=Lg,Xv.compare=function(t,e){if(!ig(t)||!ig(e))throw new TypeError("Arguments must be Buffers");if(t===e)return 0;for(var n=t.length,r=e.length,i=0,o=Math.min(n,r);i<o;++i)if(t[i]!==e[i]){n=t[i],r=e[i];break}return n<r?-1:r<n?1:0},Xv.isEncoding=function(t){switch(String(t).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},Xv.concat=function(t,e){if(!Jv(t))throw new TypeError('"list" argument must be an Array of Buffers');if(0===t.length)return Xv.alloc(0);var n;if(void 0===e)for(e=0,n=0;n<t.length;++n)e+=t[n].length;var r=Xv.allocUnsafe(e),i=0;for(n=0;n<t.length;++n){var o=t[n];if(!ig(o))throw new TypeError('"list" argument must be an Array of Buffers');o.copy(r,i),i+=o.length}return r},Xv.byteLength=og,Xv.prototype._isBuffer=!0,Xv.prototype.swap16=function(){var t=this.length;if(t%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var e=0;e<t;e+=2)ag(this,e,e+1);return this},Xv.prototype.swap32=function(){var t=this.length;if(t%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var e=0;e<t;e+=4)ag(this,e,e+3),ag(this,e+1,e+2);return this},Xv.prototype.swap64=function(){var t=this.length;if(t%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var e=0;e<t;e+=8)ag(this,e,e+7),ag(this,e+1,e+6),ag(this,e+2,e+5),ag(this,e+3,e+4);return this},Xv.prototype.toString=function(){var t=0|this.length;return 0===t?"":0===arguments.length?gg(this,0,t):function(t,e,n){var r=!1;if((void 0===e||e<0)&&(e=0),e>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(e>>>=0))return"";for(t||(t="utf8");;)switch(t){case"hex":return _g(this,e,n);case"utf8":case"utf-8":return gg(this,e,n);case"ascii":return yg(this,e,n);case"latin1":case"binary":return bg(this,e,n);case"base64":return vg(this,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return wg(this,e,n);default:if(r)throw new TypeError("Unknown encoding: "+t);t=(t+"").toLowerCase(),r=!0}}.apply(this,arguments)},Xv.prototype.equals=function(t){if(!ig(t))throw new TypeError("Argument must be a Buffer");return this===t||0===Xv.compare(this,t)},Xv.prototype.inspect=function(){var t="";return this.length>0&&(t=this.toString("hex",0,50).match(/.{2}/g).join(" "),this.length>50&&(t+=" ... ")),"<Buffer "+t+">"},Xv.prototype.compare=function(t,e,n,r,i){if(!ig(t))throw new TypeError("Argument must be a Buffer");if(void 0===e&&(e=0),void 0===n&&(n=t?t.length:0),void 0===r&&(r=0),void 0===i&&(i=this.length),e<0||n>t.length||r<0||i>this.length)throw new RangeError("out of range index");if(r>=i&&e>=n)return 0;if(r>=i)return-1;if(e>=n)return 1;if(e>>>=0,n>>>=0,r>>>=0,i>>>=0,this===t)return 0;for(var o=i-r,a=n-e,s=Math.min(o,a),l=this.slice(r,i),u=t.slice(e,n),c=0;c<s;++c)if(l[c]!==u[c]){o=l[c],a=u[c];break}return o<a?-1:a<o?1:0},Xv.prototype.includes=function(t,e,n){return-1!==this.indexOf(t,e,n)},Xv.prototype.indexOf=function(t,e,n){return sg(this,t,e,n,!0)},Xv.prototype.lastIndexOf=function(t,e,n){return sg(this,t,e,n,!1)},Xv.prototype.write=function(t,e,n,r){if(void 0===e)r="utf8",n=this.length,e=0;else if(void 0===n&&"string"==typeof e)r=e,n=this.length,e=0;else{if(!isFinite(e))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");e|=0,isFinite(n)?(n|=0,void 0===r&&(r="utf8")):(r=n,n=void 0)}var i=this.length-e;if((void 0===n||n>i)&&(n=i),t.length>0&&(n<0||e<0)||e>this.length)throw new RangeError("Attempt to write outside buffer bounds");r||(r="utf8");for(var o=!1;;)switch(r){case"hex":return ug(this,t,e,n);case"utf8":case"utf-8":return cg(this,t,e,n);case"ascii":return dg(this,t,e,n);case"latin1":case"binary":return fg(this,t,e,n);case"base64":return hg(this,t,e,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return pg(this,t,e,n);default:if(o)throw new TypeError("Unknown encoding: "+r);r=(""+r).toLowerCase(),o=!0}},Xv.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var mg=4096;function yg(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(127&t[i]);return r}function bg(t,e,n){var r="";n=Math.min(t.length,n);for(var i=e;i<n;++i)r+=String.fromCharCode(t[i]);return r}function _g(t,e,n){var r=t.length;(!e||e<0)&&(e=0),(!n||n<0||n>r)&&(n=r);for(var i="",o=e;o<n;++o)i+=Tg(t[o]);return i}function wg(t,e,n){for(var r=t.slice(e,n),i="",o=0;o<r.length;o+=2)i+=String.fromCharCode(r[o]+256*r[o+1]);return i}function xg(t,e,n){if(t%1!=0||t<0)throw new RangeError("offset is not uint");if(t+e>n)throw new RangeError("Trying to access beyond buffer length")}function kg(t,e,n,r,i,o){if(!ig(t))throw new TypeError('"buffer" argument must be a Buffer instance');if(e>i||e<o)throw new RangeError('"value" argument is out of bounds');if(n+r>t.length)throw new RangeError("Index out of range")}function Sg(t,e,n,r){e<0&&(e=65535+e+1);for(var i=0,o=Math.min(t.length-n,2);i<o;++i)t[n+i]=(e&255<<8*(r?i:1-i))>>>8*(r?i:1-i)}function Mg(t,e,n,r){e<0&&(e=4294967295+e+1);for(var i=0,o=Math.min(t.length-n,4);i<o;++i)t[n+i]=e>>>8*(r?i:3-i)&255}function Cg(t,e,n,r,i,o){if(n+r>t.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function Ag(t,e,n,r,i){return i||Cg(t,0,n,4),qv(t,e,n,r,23,4),n+4}function Og(t,e,n,r,i){return i||Cg(t,0,n,8),qv(t,e,n,r,52,8),n+8}Xv.prototype.slice=function(t,e){var n,r=this.length;if(t=~~t,e=void 0===e?r:~~e,t<0?(t+=r)<0&&(t=0):t>r&&(t=r),e<0?(e+=r)<0&&(e=0):e>r&&(e=r),e<t&&(e=t),Xv.TYPED_ARRAY_SUPPORT)(n=this.subarray(t,e)).__proto__=Xv.prototype;else{var i=e-t;n=new Xv(i,void 0);for(var o=0;o<i;++o)n[o]=this[o+t]}return n},Xv.prototype.readUIntLE=function(t,e,n){t|=0,e|=0,n||xg(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r},Xv.prototype.readUIntBE=function(t,e,n){t|=0,e|=0,n||xg(t,e,this.length);for(var r=this[t+--e],i=1;e>0&&(i*=256);)r+=this[t+--e]*i;return r},Xv.prototype.readUInt8=function(t,e){return e||xg(t,1,this.length),this[t]},Xv.prototype.readUInt16LE=function(t,e){return e||xg(t,2,this.length),this[t]|this[t+1]<<8},Xv.prototype.readUInt16BE=function(t,e){return e||xg(t,2,this.length),this[t]<<8|this[t+1]},Xv.prototype.readUInt32LE=function(t,e){return e||xg(t,4,this.length),(this[t]|this[t+1]<<8|this[t+2]<<16)+16777216*this[t+3]},Xv.prototype.readUInt32BE=function(t,e){return e||xg(t,4,this.length),16777216*this[t]+(this[t+1]<<16|this[t+2]<<8|this[t+3])},Xv.prototype.readIntLE=function(t,e,n){t|=0,e|=0,n||xg(t,e,this.length);for(var r=this[t],i=1,o=0;++o<e&&(i*=256);)r+=this[t+o]*i;return r>=(i*=128)&&(r-=Math.pow(2,8*e)),r},Xv.prototype.readIntBE=function(t,e,n){t|=0,e|=0,n||xg(t,e,this.length);for(var r=e,i=1,o=this[t+--r];r>0&&(i*=256);)o+=this[t+--r]*i;return o>=(i*=128)&&(o-=Math.pow(2,8*e)),o},Xv.prototype.readInt8=function(t,e){return e||xg(t,1,this.length),128&this[t]?-1*(255-this[t]+1):this[t]},Xv.prototype.readInt16LE=function(t,e){e||xg(t,2,this.length);var n=this[t]|this[t+1]<<8;return 32768&n?4294901760|n:n},Xv.prototype.readInt16BE=function(t,e){e||xg(t,2,this.length);var n=this[t+1]|this[t]<<8;return 32768&n?4294901760|n:n},Xv.prototype.readInt32LE=function(t,e){return e||xg(t,4,this.length),this[t]|this[t+1]<<8|this[t+2]<<16|this[t+3]<<24},Xv.prototype.readInt32BE=function(t,e){return e||xg(t,4,this.length),this[t]<<24|this[t+1]<<16|this[t+2]<<8|this[t+3]},Xv.prototype.readFloatLE=function(t,e){return e||xg(t,4,this.length),Vv(this,t,!0,23,4)},Xv.prototype.readFloatBE=function(t,e){return e||xg(t,4,this.length),Vv(this,t,!1,23,4)},Xv.prototype.readDoubleLE=function(t,e){return e||xg(t,8,this.length),Vv(this,t,!0,52,8)},Xv.prototype.readDoubleBE=function(t,e){return e||xg(t,8,this.length),Vv(this,t,!1,52,8)},Xv.prototype.writeUIntLE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||kg(this,t,e,n,Math.pow(2,8*n)-1,0);var i=1,o=0;for(this[e]=255&t;++o<n&&(i*=256);)this[e+o]=t/i&255;return e+n},Xv.prototype.writeUIntBE=function(t,e,n,r){(t=+t,e|=0,n|=0,r)||kg(this,t,e,n,Math.pow(2,8*n)-1,0);var i=n-1,o=1;for(this[e+i]=255&t;--i>=0&&(o*=256);)this[e+i]=t/o&255;return e+n},Xv.prototype.writeUInt8=function(t,e,n){return t=+t,e|=0,n||kg(this,t,e,1,255,0),Xv.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),this[e]=255&t,e+1},Xv.prototype.writeUInt16LE=function(t,e,n){return t=+t,e|=0,n||kg(this,t,e,2,65535,0),Xv.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):Sg(this,t,e,!0),e+2},Xv.prototype.writeUInt16BE=function(t,e,n){return t=+t,e|=0,n||kg(this,t,e,2,65535,0),Xv.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):Sg(this,t,e,!1),e+2},Xv.prototype.writeUInt32LE=function(t,e,n){return t=+t,e|=0,n||kg(this,t,e,4,4294967295,0),Xv.TYPED_ARRAY_SUPPORT?(this[e+3]=t>>>24,this[e+2]=t>>>16,this[e+1]=t>>>8,this[e]=255&t):Mg(this,t,e,!0),e+4},Xv.prototype.writeUInt32BE=function(t,e,n){return t=+t,e|=0,n||kg(this,t,e,4,4294967295,0),Xv.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):Mg(this,t,e,!1),e+4},Xv.prototype.writeIntLE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);kg(this,t,e,n,i-1,-i)}var o=0,a=1,s=0;for(this[e]=255&t;++o<n&&(a*=256);)t<0&&0===s&&0!==this[e+o-1]&&(s=1),this[e+o]=(t/a>>0)-s&255;return e+n},Xv.prototype.writeIntBE=function(t,e,n,r){if(t=+t,e|=0,!r){var i=Math.pow(2,8*n-1);kg(this,t,e,n,i-1,-i)}var o=n-1,a=1,s=0;for(this[e+o]=255&t;--o>=0&&(a*=256);)t<0&&0===s&&0!==this[e+o+1]&&(s=1),this[e+o]=(t/a>>0)-s&255;return e+n},Xv.prototype.writeInt8=function(t,e,n){return t=+t,e|=0,n||kg(this,t,e,1,127,-128),Xv.TYPED_ARRAY_SUPPORT||(t=Math.floor(t)),t<0&&(t=255+t+1),this[e]=255&t,e+1},Xv.prototype.writeInt16LE=function(t,e,n){return t=+t,e|=0,n||kg(this,t,e,2,32767,-32768),Xv.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8):Sg(this,t,e,!0),e+2},Xv.prototype.writeInt16BE=function(t,e,n){return t=+t,e|=0,n||kg(this,t,e,2,32767,-32768),Xv.TYPED_ARRAY_SUPPORT?(this[e]=t>>>8,this[e+1]=255&t):Sg(this,t,e,!1),e+2},Xv.prototype.writeInt32LE=function(t,e,n){return t=+t,e|=0,n||kg(this,t,e,4,2147483647,-2147483648),Xv.TYPED_ARRAY_SUPPORT?(this[e]=255&t,this[e+1]=t>>>8,this[e+2]=t>>>16,this[e+3]=t>>>24):Mg(this,t,e,!0),e+4},Xv.prototype.writeInt32BE=function(t,e,n){return t=+t,e|=0,n||kg(this,t,e,4,2147483647,-2147483648),t<0&&(t=4294967295+t+1),Xv.TYPED_ARRAY_SUPPORT?(this[e]=t>>>24,this[e+1]=t>>>16,this[e+2]=t>>>8,this[e+3]=255&t):Mg(this,t,e,!1),e+4},Xv.prototype.writeFloatLE=function(t,e,n){return Ag(this,t,e,!0,n)},Xv.prototype.writeFloatBE=function(t,e,n){return Ag(this,t,e,!1,n)},Xv.prototype.writeDoubleLE=function(t,e,n){return Og(this,t,e,!0,n)},Xv.prototype.writeDoubleBE=function(t,e,n){return Og(this,t,e,!1,n)},Xv.prototype.copy=function(t,e,n,r){if(n||(n=0),r||0===r||(r=this.length),e>=t.length&&(e=t.length),e||(e=0),r>0&&r<n&&(r=n),r===n)return 0;if(0===t.length||0===this.length)return 0;if(e<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(r<0)throw new RangeError("sourceEnd out of bounds");r>this.length&&(r=this.length),t.length-e<r-n&&(r=t.length-e+n);var i,o=r-n;if(this===t&&n<e&&e<r)for(i=o-1;i>=0;--i)t[i+e]=this[i+n];else if(o<1e3||!Xv.TYPED_ARRAY_SUPPORT)for(i=0;i<o;++i)t[i+e]=this[i+n];else Uint8Array.prototype.set.call(t,this.subarray(n,n+o),e);return o},Xv.prototype.fill=function(t,e,n,r){if("string"==typeof t){if("string"==typeof e?(r=e,e=0,n=this.length):"string"==typeof n&&(r=n,n=this.length),1===t.length){var i=t.charCodeAt(0);i<256&&(t=i)}if(void 0!==r&&"string"!=typeof r)throw new TypeError("encoding must be a string");if("string"==typeof r&&!Xv.isEncoding(r))throw new TypeError("Unknown encoding: "+r)}else"number"==typeof t&&(t&=255);if(e<0||this.length<e||this.length<n)throw new RangeError("Out of range index");if(n<=e)return this;var o;if(e>>>=0,n=void 0===n?this.length:n>>>0,t||(t=0),"number"==typeof t)for(o=e;o<n;++o)this[o]=t;else{var a=ig(t)?t:Pg(new Xv(t,r).toString()),s=a.length;for(o=0;o<n-e;++o)this[o+e]=a[o%s]}return this};var Dg=/[^+\/0-9A-Za-z-_]/g;function Tg(t){return t<16?"0"+t.toString(16):t.toString(16)}function Pg(t,e){var n;e=e||1/0;for(var r=t.length,i=null,o=[],a=0;a<r;++a){if((n=t.charCodeAt(a))>55295&&n<57344){if(!i){if(n>56319){(e-=3)>-1&&o.push(239,191,189);continue}if(a+1===r){(e-=3)>-1&&o.push(239,191,189);continue}i=n;continue}if(n<56320){(e-=3)>-1&&o.push(239,191,189),i=n;continue}n=65536+(i-55296<<10|n-56320)}else i&&(e-=3)>-1&&o.push(239,191,189);if(i=null,n<128){if((e-=1)<0)break;o.push(n)}else if(n<2048){if((e-=2)<0)break;o.push(n>>6|192,63&n|128)}else if(n<65536){if((e-=3)<0)break;o.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((e-=4)<0)break;o.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return o}function Rg(t){return function(t){var e,n,r,i,o,a;Yv||Wv();var s=t.length;if(s%4>0)throw new Error("Invalid string. Length must be a multiple of 4");o="="===t[s-2]?2:"="===t[s-1]?1:0,a=new Bv(3*s/4-o),r=o>0?s-4:s;var l=0;for(e=0,n=0;e<r;e+=4,n+=3)i=zv[t.charCodeAt(e)]<<18|zv[t.charCodeAt(e+1)]<<12|zv[t.charCodeAt(e+2)]<<6|zv[t.charCodeAt(e+3)],a[l++]=i>>16&255,a[l++]=i>>8&255,a[l++]=255&i;return 2===o?(i=zv[t.charCodeAt(e)]<<2|zv[t.charCodeAt(e+1)]>>4,a[l++]=255&i):1===o&&(i=zv[t.charCodeAt(e)]<<10|zv[t.charCodeAt(e+1)]<<4|zv[t.charCodeAt(e+2)]>>2,a[l++]=i>>8&255,a[l++]=255&i),a}(function(t){if((t=function(t){return t.trim?t.trim():t.replace(/^\s+|\s+$/g,"")}(t).replace(Dg,"")).length<2)return"";for(;t.length%4!=0;)t+="=";return t}(t))}function Ig(t,e,n,r){for(var i=0;i<r&&!(i+n>=e.length||i>=t.length);++i)e[i+n]=t[i];return i}function Lg(t){return null!=t&&(!!t._isBuffer||Eg(t)||function(t){return"function"==typeof t.readFloatLE&&"function"==typeof t.slice&&Eg(t.slice(0,0))}(t))}function Eg(t){return!!t.constructor&&"function"==typeof t.constructor.isBuffer&&t.constructor.isBuffer(t)}function Fg(){throw new Error("setTimeout has not been defined")}function jg(){throw new Error("clearTimeout has not been defined")}var Ng=Fg,$g=jg;function zg(t){if(Ng===setTimeout)return setTimeout(t,0);if((Ng===Fg||!Ng)&&setTimeout)return Ng=setTimeout,setTimeout(t,0);try{return Ng(t,0)}catch(e){try{return Ng.call(null,t,0)}catch(e){return Ng.call(this,t,0)}}}"function"==typeof n.setTimeout&&(Ng=setTimeout),"function"==typeof n.clearTimeout&&($g=clearTimeout);var Bg,Yg=[],Wg=!1,Ug=-1;function Hg(){Wg&&Bg&&(Wg=!1,Bg.length?Yg=Bg.concat(Yg):Ug=-1,Yg.length&&Vg())}function Vg(){if(!Wg){var t=zg(Hg);Wg=!0;for(var e=Yg.length;e;){for(Bg=Yg,Yg=[];++Ug<e;)Bg&&Bg[Ug].run();Ug=-1,e=Yg.length}Bg=null,Wg=!1,function(t){if($g===clearTimeout)return clearTimeout(t);if(($g===jg||!$g)&&clearTimeout)return $g=clearTimeout,clearTimeout(t);try{$g(t)}catch(e){try{return $g.call(null,t)}catch(e){return $g.call(this,t)}}}(t)}}function qg(t){var e=arguments,n=new Array(arguments.length-1);if(arguments.length>1)for(var r=1;r<arguments.length;r++)n[r-1]=e[r];Yg.push(new Gg(t,n)),1!==Yg.length||Wg||zg(Vg)}function Gg(t,e){this.fun=t,this.array=e}Gg.prototype.run=function(){this.fun.apply(null,this.array)};function Jg(){}var Zg=Jg,Kg=Jg,Xg=Jg,Qg=Jg,tm=Jg,em=Jg,nm=Jg;var rm=n.performance||{},im=rm.now||rm.mozNow||rm.msNow||rm.oNow||rm.webkitNow||function(){return(new Date).getTime()};var om=new Date;var am,sm,lm={nextTick:qg,title:"browser",browser:!0,env:{},argv:[],version:"",versions:{},on:Zg,addListener:Kg,once:Xg,off:Qg,removeListener:tm,removeAllListeners:em,emit:nm,binding:function(t){throw new Error("process.binding is not supported")},cwd:function(){return"/"},chdir:function(t){throw new Error("process.chdir is not supported")},umask:function(){return 0},hrtime:function(t){var e=.001*im.call(rm),n=Math.floor(e),r=Math.floor(e%1*1e9);return t&&(n-=t[0],(r-=t[1])<0&&(n--,r+=1e9)),[n,r]},platform:"browser",release:{},config:{},uptime:function(){return(new Date-om)/1e3}},um=ym(n.fetch)&&ym(n.ReadableStream);function cm(t){sm||(sm=new n.XMLHttpRequest).open("GET",n.location.host?"/":"https://example.com");try{return sm.responseType=t,sm.responseType===t}catch(t){return!1}}var dm=void 0!==n.ArrayBuffer,fm=dm&&ym(n.ArrayBuffer.prototype.slice),hm=dm&&cm("arraybuffer"),pm=!um&&fm&&cm("ms-stream"),vm=!um&&dm&&cm("moz-chunked-arraybuffer"),gm=ym(sm.overrideMimeType),mm=ym(n.VBArray);function ym(t){return"function"==typeof t}sm=null;var bm="function"==typeof Object.create?function(t,e){t.super_=e,t.prototype=Object.create(e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}})}:function(t,e){t.super_=e;var n=function(){};n.prototype=e.prototype,t.prototype=new n,t.prototype.constructor=t},_m=/%[sdj%]/g;var wm,xm={};function km(t,e){var n={seen:[],stylize:Mm};return arguments.length>=3&&(n.depth=arguments[2]),arguments.length>=4&&(n.colors=arguments[3]),Dm(e)?n.showHidden=e:e&&function(t,e){if(!e||!Lm(e))return t;var n=Object.keys(e),r=n.length;for(;r--;)t[n[r]]=e[n[r]]}(n,e),Rm(n.showHidden)&&(n.showHidden=!1),Rm(n.depth)&&(n.depth=2),Rm(n.colors)&&(n.colors=!1),Rm(n.customInspect)&&(n.customInspect=!0),n.colors&&(n.stylize=Sm),Cm(n,t,n.depth)}function Sm(t,e){var n=km.styles[e];return n?"["+km.colors[n][0]+"m"+t+"["+km.colors[n][1]+"m":t}function Mm(t,e){return t}function Cm(t,e,n){if(t.customInspect&&e&&jm(e.inspect)&&e.inspect!==km&&(!e.constructor||e.constructor.prototype!==e)){var r=e.inspect(n,t);return Pm(r)||(r=Cm(t,r,n)),r}var i=function(t,e){if(Rm(e))return t.stylize("undefined","undefined");if(Pm(e)){var n="'"+JSON.stringify(e).replace(/^"|"$/g,"").replace(/'/g,"\\'").replace(/\\"/g,'"')+"'";return t.stylize(n,"string")}if(r=e,"number"==typeof r)return t.stylize(""+e,"number");var r;if(Dm(e))return t.stylize(""+e,"boolean");if(Tm(e))return t.stylize("null","null")}(t,e);if(i)return i;var o=Object.keys(e),a=function(t){var e={};return t.forEach(function(t,n){e[t]=!0}),e}(o);if(t.showHidden&&(o=Object.getOwnPropertyNames(e)),Fm(e)&&(o.indexOf("message")>=0||o.indexOf("description")>=0))return Am(e);if(0===o.length){if(jm(e)){var s=e.name?": "+e.name:"";return t.stylize("[Function"+s+"]","special")}if(Im(e))return t.stylize(RegExp.prototype.toString.call(e),"regexp");if(Em(e))return t.stylize(Date.prototype.toString.call(e),"date");if(Fm(e))return Am(e)}var l,u,c="",d=!1,f=["{","}"];(l=e,Array.isArray(l)&&(d=!0,f=["[","]"]),jm(e))&&(c=" [Function"+(e.name?": "+e.name:"")+"]");return Im(e)&&(c=" "+RegExp.prototype.toString.call(e)),Em(e)&&(c=" "+Date.prototype.toUTCString.call(e)),Fm(e)&&(c=" "+Am(e)),0!==o.length||d&&0!=e.length?n<0?Im(e)?t.stylize(RegExp.prototype.toString.call(e),"regexp"):t.stylize("[Object]","special"):(t.seen.push(e),u=d?function(t,e,n,r,i){for(var o=[],a=0,s=e.length;a<s;++a)$m(e,String(a))?o.push(Om(t,e,n,r,String(a),!0)):o.push("");return i.forEach(function(i){i.match(/^\d+$/)||o.push(Om(t,e,n,r,i,!0))}),o}(t,e,n,a,o):o.map(function(r){return Om(t,e,n,a,r,d)}),t.seen.pop(),function(t,e,n){if(t.reduce(function(t,e){return e.indexOf("\n"),t+e.replace(/\u001b\[\d\d?m/g,"").length+1},0)>60)return n[0]+(""===e?"":e+"\n ")+" "+t.join(",\n  ")+" "+n[1];return n[0]+e+" "+t.join(", ")+" "+n[1]}(u,c,f)):f[0]+c+f[1]}function Am(t){return"["+Error.prototype.toString.call(t)+"]"}function Om(t,e,n,r,i,o){var a,s,l;if((l=Object.getOwnPropertyDescriptor(e,i)||{value:e[i]}).get?s=l.set?t.stylize("[Getter/Setter]","special"):t.stylize("[Getter]","special"):l.set&&(s=t.stylize("[Setter]","special")),$m(r,i)||(a="["+i+"]"),s||(t.seen.indexOf(l.value)<0?(s=Tm(n)?Cm(t,l.value,null):Cm(t,l.value,n-1)).indexOf("\n")>-1&&(s=o?s.split("\n").map(function(t){return"  "+t}).join("\n").substr(2):"\n"+s.split("\n").map(function(t){return"   "+t}).join("\n")):s=t.stylize("[Circular]","special")),Rm(a)){if(o&&i.match(/^\d+$/))return s;(a=JSON.stringify(""+i)).match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)?(a=a.substr(1,a.length-2),a=t.stylize(a,"name")):(a=a.replace(/'/g,"\\'").replace(/\\"/g,'"').replace(/(^"|"$)/g,"'"),a=t.stylize(a,"string"))}return a+": "+s}function Dm(t){return"boolean"==typeof t}function Tm(t){return null===t}function Pm(t){return"string"==typeof t}function Rm(t){return void 0===t}function Im(t){return Lm(t)&&"[object RegExp]"===Nm(t)}function Lm(t){return"object"===(void 0===t?"undefined":i(t))&&null!==t}function Em(t){return Lm(t)&&"[object Date]"===Nm(t)}function Fm(t){return Lm(t)&&("[object Error]"===Nm(t)||t instanceof Error)}function jm(t){return"function"==typeof t}function Nm(t){return Object.prototype.toString.call(t)}function $m(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function zm(){}function Bm(){Bm.init.call(this)}function Ym(t){return void 0===t._maxListeners?Bm.defaultMaxListeners:t._maxListeners}function Wm(t,e,n,r){var i,o,a,s;if("function"!=typeof n)throw new TypeError('"listener" argument must be a function');if((o=t._events)?(o.newListener&&(t.emit("newListener",e,n.listener?n.listener:n),o=t._events),a=o[e]):(o=t._events=new zm,t._eventsCount=0),a){if("function"==typeof a?a=o[e]=r?[n,a]:[a,n]:r?a.unshift(n):a.push(n),!a.warned&&(i=Ym(t))&&i>0&&a.length>i){a.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+e+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=t,l.type=e,l.count=a.length,s=l,"function"==typeof console.warn?console.warn(s):console.log(s)}}else a=o[e]=n,++t._eventsCount;return t}function Um(t,e,n){var r=!1;function i(){t.removeListener(e,i),r||(r=!0,n.apply(t,arguments))}return i.listener=n,i}function Hm(t){var e=this._events;if(e){var n=e[t];if("function"==typeof n)return 1;if(n)return n.length}return 0}function Vm(t,e){for(var n=new Array(e);e--;)n[e]=t[e];return n}function qm(){this.head=null,this.tail=null,this.length=0}km.colors={bold:[1,22],italic:[3,23],underline:[4,24],inverse:[7,27],white:[37,39],grey:[90,39],black:[30,39],blue:[34,39],cyan:[36,39],green:[32,39],magenta:[35,39],red:[31,39],yellow:[33,39]},km.styles={special:"cyan",number:"yellow",boolean:"yellow",undefined:"grey",null:"bold",string:"green",date:"magenta",regexp:"red"},zm.prototype=Object.create(null),Bm.EventEmitter=Bm,Bm.usingDomains=!1,Bm.prototype.domain=void 0,Bm.prototype._events=void 0,Bm.prototype._maxListeners=void 0,Bm.defaultMaxListeners=10,Bm.init=function(){this.domain=null,Bm.usingDomains&&(!(void 0).active||this instanceof(void 0).Domain||(this.domain=(void 0).active)),this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=new zm,this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},Bm.prototype.setMaxListeners=function(t){if("number"!=typeof t||t<0||isNaN(t))throw new TypeError('"n" argument must be a positive number');return this._maxListeners=t,this},Bm.prototype.getMaxListeners=function(){return Ym(this)},Bm.prototype.emit=function(t){var e,n,r,i,o,a,s,l=arguments,u="error"===t;if(a=this._events)u=u&&null==a.error;else if(!u)return!1;if(s=this.domain,u){if(e=arguments[1],!s){if(e instanceof Error)throw e;var c=new Error('Uncaught, unspecified "error" event. ('+e+")");throw c.context=e,c}return e||(e=new Error('Uncaught, unspecified "error" event')),e.domainEmitter=this,e.domain=s,e.domainThrown=!1,s.emit("error",e),!1}if(!(n=a[t]))return!1;var d="function"==typeof n;switch(r=arguments.length){case 1:!function(t,e,n){if(e)t.call(n);else for(var r=t.length,i=Vm(t,r),o=0;o<r;++o)i[o].call(n)}(n,d,this);break;case 2:!function(t,e,n,r){if(e)t.call(n,r);else for(var i=t.length,o=Vm(t,i),a=0;a<i;++a)o[a].call(n,r)}(n,d,this,arguments[1]);break;case 3:!function(t,e,n,r,i){if(e)t.call(n,r,i);else for(var o=t.length,a=Vm(t,o),s=0;s<o;++s)a[s].call(n,r,i)}(n,d,this,arguments[1],arguments[2]);break;case 4:!function(t,e,n,r,i,o){if(e)t.call(n,r,i,o);else for(var a=t.length,s=Vm(t,a),l=0;l<a;++l)s[l].call(n,r,i,o)}(n,d,this,arguments[1],arguments[2],arguments[3]);break;default:for(i=new Array(r-1),o=1;o<r;o++)i[o-1]=l[o];!function(t,e,n,r){if(e)t.apply(n,r);else for(var i=t.length,o=Vm(t,i),a=0;a<i;++a)o[a].apply(n,r)}(n,d,this,i)}return!0},Bm.prototype.addListener=function(t,e){return Wm(this,t,e,!1)},Bm.prototype.on=Bm.prototype.addListener,Bm.prototype.prependListener=function(t,e){return Wm(this,t,e,!0)},Bm.prototype.once=function(t,e){if("function"!=typeof e)throw new TypeError('"listener" argument must be a function');return this.on(t,Um(this,t,e)),this},Bm.prototype.prependOnceListener=function(t,e){if("function"!=typeof e)throw new TypeError('"listener" argument must be a function');return this.prependListener(t,Um(this,t,e)),this},Bm.prototype.removeListener=function(t,e){var n,r,i,o,a;if("function"!=typeof e)throw new TypeError('"listener" argument must be a function');if(!(r=this._events))return this;if(!(n=r[t]))return this;if(n===e||n.listener&&n.listener===e)0==--this._eventsCount?this._events=new zm:(delete r[t],r.removeListener&&this.emit("removeListener",t,n.listener||e));else if("function"!=typeof n){for(i=-1,o=n.length;o-- >0;)if(n[o]===e||n[o].listener&&n[o].listener===e){a=n[o].listener,i=o;break}if(i<0)return this;if(1===n.length){if(n[0]=void 0,0==--this._eventsCount)return this._events=new zm,this;delete r[t]}else!function(t,e){for(var n=e,r=n+1,i=t.length;r<i;n+=1,r+=1)t[n]=t[r];t.pop()}(n,i);r.removeListener&&this.emit("removeListener",t,a||e)}return this},Bm.prototype.removeAllListeners=function(t){var e,n;if(!(n=this._events))return this;if(!n.removeListener)return 0===arguments.length?(this._events=new zm,this._eventsCount=0):n[t]&&(0==--this._eventsCount?this._events=new zm:delete n[t]),this;if(0===arguments.length){for(var r,i=Object.keys(n),o=0;o<i.length;++o)"removeListener"!==(r=i[o])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=new zm,this._eventsCount=0,this}if("function"==typeof(e=n[t]))this.removeListener(t,e);else if(e)do{this.removeListener(t,e[e.length-1])}while(e[0]);return this},Bm.prototype.listeners=function(t){var e,n=this._events;return n&&(e=n[t])?"function"==typeof e?[e.listener||e]:function(t){for(var e=new Array(t.length),n=0;n<e.length;++n)e[n]=t[n].listener||t[n];return e}(e):[]},Bm.listenerCount=function(t,e){return"function"==typeof t.listenerCount?t.listenerCount(e):Hm.call(t,e)},Bm.prototype.listenerCount=Hm,Bm.prototype.eventNames=function(){return this._eventsCount>0?Reflect.ownKeys(this._events):[]},qm.prototype.push=function(t){var e={data:t,next:null};this.length>0?this.tail.next=e:this.head=e,this.tail=e,++this.length},qm.prototype.unshift=function(t){var e={data:t,next:this.head};0===this.length&&(this.tail=e),this.head=e,++this.length},qm.prototype.shift=function(){if(0!==this.length){var t=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,t}},qm.prototype.clear=function(){this.head=this.tail=null,this.length=0},qm.prototype.join=function(t){if(0===this.length)return"";for(var e=this.head,n=""+e.data;e=e.next;)n+=t+e.data;return n},qm.prototype.concat=function(t){if(0===this.length)return Xv.alloc(0);if(1===this.length)return this.head.data;for(var e=Xv.allocUnsafe(t>>>0),n=this.head,r=0;n;)n.data.copy(e,r),r+=n.data.length,n=n.next;return e};var Gm=Xv.isEncoding||function(t){switch(t&&t.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function Jm(t){switch(this.encoding=(t||"utf8").toLowerCase().replace(/[-_]/,""),function(t){if(t&&!Gm(t))throw new Error("Unknown encoding: "+t)}(t),this.encoding){case"utf8":this.surrogateSize=3;break;case"ucs2":case"utf16le":this.surrogateSize=2,this.detectIncompleteChar=Km;break;case"base64":this.surrogateSize=3,this.detectIncompleteChar=Xm;break;default:return void(this.write=Zm)}this.charBuffer=new Xv(6),this.charReceived=0,this.charLength=0}function Zm(t){return t.toString(this.encoding)}function Km(t){this.charReceived=t.length%2,this.charLength=this.charReceived?2:0}function Xm(t){this.charReceived=t.length%3,this.charLength=this.charReceived?3:0}Jm.prototype.write=function(t){for(var e="";this.charLength;){var n=t.length>=this.charLength-this.charReceived?this.charLength-this.charReceived:t.length;if(t.copy(this.charBuffer,this.charReceived,0,n),this.charReceived+=n,this.charReceived<this.charLength)return"";if(t=t.slice(n,t.length),!((i=(e=this.charBuffer.slice(0,this.charLength).toString(this.encoding)).charCodeAt(e.length-1))>=55296&&i<=56319)){if(this.charReceived=this.charLength=0,0===t.length)return e;break}this.charLength+=this.surrogateSize,e=""}this.detectIncompleteChar(t);var r=t.length;this.charLength&&(t.copy(this.charBuffer,0,t.length-this.charReceived,r),r-=this.charReceived);var i;r=(e+=t.toString(this.encoding,0,r)).length-1;if((i=e.charCodeAt(r))>=55296&&i<=56319){var o=this.surrogateSize;return this.charLength+=o,this.charReceived+=o,this.charBuffer.copy(this.charBuffer,o,0,o),t.copy(this.charBuffer,0,0,o),e.substring(0,r)}return e},Jm.prototype.detectIncompleteChar=function(t){for(var e=t.length>=3?3:t.length;e>0;e--){var n=t[t.length-e];if(1==e&&n>>5==6){this.charLength=2;break}if(e<=2&&n>>4==14){this.charLength=3;break}if(e<=3&&n>>3==30){this.charLength=4;break}}this.charReceived=e},Jm.prototype.end=function(t){var e="";if(t&&t.length&&(e=this.write(t)),this.charReceived){var n=this.charReceived,r=this.charBuffer,i=this.encoding;e+=r.slice(0,n).toString(i)}return e},ey.ReadableState=ty;var Qm=function(t){Rm(wm)&&(wm=lm.env.NODE_DEBUG||""),t=t.toUpperCase(),xm[t]||(new RegExp("\\b"+t+"\\b","i").test(wm)?xm[t]=function(){var e=function(t){var e=arguments;if(!Pm(t)){for(var n=[],r=0;r<arguments.length;r++)n.push(km(e[r]));return n.join(" ")}r=1;for(var i=arguments,o=i.length,a=String(t).replace(_m,function(t){if("%%"===t)return"%";if(r>=o)return t;switch(t){case"%s":return String(i[r++]);case"%d":return Number(i[r++]);case"%j":try{return JSON.stringify(i[r++])}catch(t){return"[Circular]"}default:return t}}),s=i[r];r<o;s=i[++r])Tm(s)||!Lm(s)?a+=" "+s:a+=" "+km(s);return a}.apply(null,arguments);console.error("%s %d: %s",t,0,e)}:xm[t]=function(){});return xm[t]}("stream");function ty(t,e){t=t||{},this.objectMode=!!t.objectMode,e instanceof Oy&&(this.objectMode=this.objectMode||!!t.readableObjectMode);var n=t.highWaterMark,r=this.objectMode?16:16384;this.highWaterMark=n||0===n?n:r,this.highWaterMark=~~this.highWaterMark,this.buffer=new qm,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.defaultEncoding=t.defaultEncoding||"utf8",this.ranOut=!1,this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,t.encoding&&(this.decoder=new Jm(t.encoding),this.encoding=t.encoding)}function ey(t){if(!(this instanceof ey))return new ey(t);this._readableState=new ty(t,this),this.readable=!0,t&&"function"==typeof t.read&&(this._read=t.read),Bm.call(this)}function ny(t,e,n,r,i){var o=function(t,e){var n=null;Lg(e)||"string"==typeof e||null===e||void 0===e||t.objectMode||(n=new TypeError("Invalid non-string/buffer chunk"));return n}(e,n);if(o)t.emit("error",o);else if(null===n)e.reading=!1,function(t,e){if(e.ended)return;if(e.decoder){var n=e.decoder.end();n&&n.length&&(e.buffer.push(n),e.length+=e.objectMode?1:n.length)}e.ended=!0,oy(t)}(t,e);else if(e.objectMode||n&&n.length>0)if(e.ended&&!i){var a=new Error("stream.push() after EOF");t.emit("error",a)}else if(e.endEmitted&&i){var s=new Error("stream.unshift() after end event");t.emit("error",s)}else{var l;!e.decoder||i||r||(n=e.decoder.write(n),l=!e.objectMode&&0===n.length),i||(e.reading=!1),l||(e.flowing&&0===e.length&&!e.sync?(t.emit("data",n),t.read(0)):(e.length+=e.objectMode?1:n.length,i?e.buffer.unshift(n):e.buffer.push(n),e.needReadable&&oy(t))),function(t,e){e.readingMore||(e.readingMore=!0,qg(sy,t,e))}(t,e)}else i||(e.reading=!1);return function(t){return!t.ended&&(t.needReadable||t.length<t.highWaterMark||0===t.length)}(e)}bm(ey,Bm),ey.prototype.push=function(t,e){var n=this._readableState;return n.objectMode||"string"!=typeof t||(e=e||n.defaultEncoding)!==n.encoding&&(t=Xv.from(t,e),e=""),ny(this,n,t,e,!1)},ey.prototype.unshift=function(t){return ny(this,this._readableState,t,"",!0)},ey.prototype.isPaused=function(){return!1===this._readableState.flowing},ey.prototype.setEncoding=function(t){return this._readableState.decoder=new Jm(t),this._readableState.encoding=t,this};var ry=8388608;function iy(t,e){return t<=0||0===e.length&&e.ended?0:e.objectMode?1:t!=t?e.flowing&&e.length?e.buffer.head.data.length:e.length:(t>e.highWaterMark&&(e.highWaterMark=function(t){return t>=ry?t=ry:(t--,t|=t>>>1,t|=t>>>2,t|=t>>>4,t|=t>>>8,t|=t>>>16,t++),t}(t)),t<=e.length?t:e.ended?e.length:(e.needReadable=!0,0))}function oy(t){var e=t._readableState;e.needReadable=!1,e.emittedReadable||(Qm("emitReadable",e.flowing),e.emittedReadable=!0,e.sync?qg(ay,t):ay(t))}function ay(t){Qm("emit readable"),t.emit("readable"),cy(t)}function sy(t,e){for(var n=e.length;!e.reading&&!e.flowing&&!e.ended&&e.length<e.highWaterMark&&(Qm("maybeReadMore read 0"),t.read(0),n!==e.length);)n=e.length;e.readingMore=!1}function ly(t){Qm("readable nexttick read 0"),t.read(0)}function uy(t,e){e.reading||(Qm("resume read 0"),t.read(0)),e.resumeScheduled=!1,e.awaitDrain=0,t.emit("resume"),cy(t),e.flowing&&!e.reading&&t.read(0)}function cy(t){var e=t._readableState;for(Qm("flow",e.flowing);e.flowing&&null!==t.read(););}function dy(t,e){return 0===e.length?null:(e.objectMode?n=e.buffer.shift():!t||t>=e.length?(n=e.decoder?e.buffer.join(""):1===e.buffer.length?e.buffer.head.data:e.buffer.concat(e.length),e.buffer.clear()):n=function(t,e,n){var r;t<e.head.data.length?(r=e.head.data.slice(0,t),e.head.data=e.head.data.slice(t)):r=t===e.head.data.length?e.shift():n?function(t,e){var n=e.head,r=1,i=n.data;t-=i.length;for(;n=n.next;){var o=n.data,a=t>o.length?o.length:t;if(a===o.length?i+=o:i+=o.slice(0,t),0===(t-=a)){a===o.length?(++r,n.next?e.head=n.next:e.head=e.tail=null):(e.head=n,n.data=o.slice(a));break}++r}return e.length-=r,i}(t,e):function(t,e){var n=Xv.allocUnsafe(t),r=e.head,i=1;r.data.copy(n),t-=r.data.length;for(;r=r.next;){var o=r.data,a=t>o.length?o.length:t;if(o.copy(n,n.length-t,0,a),0===(t-=a)){a===o.length?(++i,r.next?e.head=r.next:e.head=e.tail=null):(e.head=r,r.data=o.slice(a));break}++i}return e.length-=i,n}(t,e);return r}(t,e.buffer,e.decoder),n);var n}function fy(t){var e=t._readableState;if(e.length>0)throw new Error('"endReadable()" called on non-empty stream');e.endEmitted||(e.ended=!0,qg(hy,e,t))}function hy(t,e){t.endEmitted||0!==t.length||(t.endEmitted=!0,e.readable=!1,e.emit("end"))}function py(t,e){for(var n=0,r=t.length;n<r;n++)if(t[n]===e)return n;return-1}function vy(){}function gy(t,e){Object.defineProperty(this,"buffer",{get:function t(e,r){if(Rm(n.process))return function(){return t(e,r).apply(this,arguments)};if(!0===lm.noDeprecation)return e;var i=!1;return function(){if(!i){if(lm.throwDeprecation)throw new Error(r);lm.traceDeprecation?console.trace(r):console.error(r),i=!0}return e.apply(this,arguments)}}(function(){return this.getBuffer()},"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.")}),t=t||{},this.objectMode=!!t.objectMode,e instanceof Oy&&(this.objectMode=this.objectMode||!!t.writableObjectMode);var r=t.highWaterMark,i=this.objectMode?16:16384;this.highWaterMark=r||0===r?r:i,this.highWaterMark=~~this.highWaterMark,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1;var o=!1===t.decodeStrings;this.decodeStrings=!o,this.defaultEncoding=t.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(t){!function(t,e){var n=t._writableState,r=n.sync,i=n.writecb;if(function(t){t.writing=!1,t.writecb=null,t.length-=t.writelen,t.writelen=0}(n),e)!function(t,e,n,r,i){--e.pendingcb,n?qg(i,r):i(r);t._writableState.errorEmitted=!0,t.emit("error",r)}(t,n,r,e,i);else{var o=wy(n);o||n.corked||n.bufferProcessing||!n.bufferedRequest||_y(t,n),r?qg(by,t,n,o,i):by(t,n,o,i)}}(e,t)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new Sy(this)}function my(t){if(!(this instanceof my||this instanceof Oy))return new my(t);this._writableState=new gy(t,this),this.writable=!0,t&&("function"==typeof t.write&&(this._write=t.write),"function"==typeof t.writev&&(this._writev=t.writev)),Bm.call(this)}function yy(t,e,n,r,i,o,a){e.writelen=r,e.writecb=a,e.writing=!0,e.sync=!0,n?t._writev(i,e.onwrite):t._write(i,o,e.onwrite),e.sync=!1}function by(t,e,n,r){n||function(t,e){0===e.length&&e.needDrain&&(e.needDrain=!1,t.emit("drain"))}(t,e),e.pendingcb--,r(),ky(t,e)}function _y(t,e){e.bufferProcessing=!0;var n=e.bufferedRequest;if(t._writev&&n&&n.next){var r=e.bufferedRequestCount,i=new Array(r),o=e.corkedRequestsFree;o.entry=n;for(var a=0;n;)i[a]=n,n=n.next,a+=1;yy(t,e,!0,e.length,i,"",o.finish),e.pendingcb++,e.lastBufferedRequest=null,o.next?(e.corkedRequestsFree=o.next,o.next=null):e.corkedRequestsFree=new Sy(e)}else{for(;n;){var s=n.chunk,l=n.encoding,u=n.callback;if(yy(t,e,!1,e.objectMode?1:s.length,s,l,u),n=n.next,e.writing)break}null===n&&(e.lastBufferedRequest=null)}e.bufferedRequestCount=0,e.bufferedRequest=n,e.bufferProcessing=!1}function wy(t){return t.ending&&0===t.length&&null===t.bufferedRequest&&!t.finished&&!t.writing}function xy(t,e){e.prefinished||(e.prefinished=!0,t.emit("prefinish"))}function ky(t,e){var n=wy(e);return n&&(0===e.pendingcb?(xy(t,e),e.finished=!0,t.emit("finish")):xy(t,e)),n}function Sy(t){var e=this;this.next=null,this.entry=null,this.finish=function(n){var r=e.entry;for(e.entry=null;r;){var i=r.callback;t.pendingcb--,i(n),r=r.next}t.corkedRequestsFree?t.corkedRequestsFree.next=e:t.corkedRequestsFree=e}}ey.prototype.read=function(t){Qm("read",t),t=parseInt(t,10);var e=this._readableState,n=t;if(0!==t&&(e.emittedReadable=!1),0===t&&e.needReadable&&(e.length>=e.highWaterMark||e.ended))return Qm("read: emitReadable",e.length,e.ended),0===e.length&&e.ended?fy(this):oy(this),null;if(0===(t=iy(t,e))&&e.ended)return 0===e.length&&fy(this),null;var r,i=e.needReadable;return Qm("need readable",i),(0===e.length||e.length-t<e.highWaterMark)&&Qm("length less than watermark",i=!0),e.ended||e.reading?Qm("reading or ended",i=!1):i&&(Qm("do read"),e.reading=!0,e.sync=!0,0===e.length&&(e.needReadable=!0),this._read(e.highWaterMark),e.sync=!1,e.reading||(t=iy(n,e))),null===(r=t>0?dy(t,e):null)?(e.needReadable=!0,t=0):e.length-=t,0===e.length&&(e.ended||(e.needReadable=!0),n!==t&&e.ended&&fy(this)),null!==r&&this.emit("data",r),r},ey.prototype._read=function(t){this.emit("error",new Error("not implemented"))},ey.prototype.pipe=function(t,e){var n=this,r=this._readableState;switch(r.pipesCount){case 0:r.pipes=t;break;case 1:r.pipes=[r.pipes,t];break;default:r.pipes.push(t)}r.pipesCount+=1,Qm("pipe count=%d opts=%j",r.pipesCount,e);var i=!e||!1!==e.end?a:u;function o(t){Qm("onunpipe"),t===n&&u()}function a(){Qm("onend"),t.end()}r.endEmitted?qg(i):n.once("end",i),t.on("unpipe",o);var s=function(t){return function(){var e=t._readableState;Qm("pipeOnDrain",e.awaitDrain),e.awaitDrain&&e.awaitDrain--,0===e.awaitDrain&&t.listeners("data").length&&(e.flowing=!0,cy(t))}}(n);t.on("drain",s);var l=!1;function u(){Qm("cleanup"),t.removeListener("close",h),t.removeListener("finish",p),t.removeListener("drain",s),t.removeListener("error",f),t.removeListener("unpipe",o),n.removeListener("end",a),n.removeListener("end",u),n.removeListener("data",d),l=!0,!r.awaitDrain||t._writableState&&!t._writableState.needDrain||s()}var c=!1;function d(e){Qm("ondata"),c=!1,!1!==t.write(e)||c||((1===r.pipesCount&&r.pipes===t||r.pipesCount>1&&-1!==py(r.pipes,t))&&!l&&(Qm("false write response, pause",n._readableState.awaitDrain),n._readableState.awaitDrain++,c=!0),n.pause())}function f(e){var n;Qm("onerror",e),v(),t.removeListener("error",f),0===(n="error",t.listeners(n).length)&&t.emit("error",e)}function h(){t.removeListener("finish",p),v()}function p(){Qm("onfinish"),t.removeListener("close",h),v()}function v(){Qm("unpipe"),n.unpipe(t)}return n.on("data",d),function(t,e,n){if("function"==typeof t.prependListener)return t.prependListener(e,n);t._events&&t._events[e]?Array.isArray(t._events[e])?t._events[e].unshift(n):t._events[e]=[n,t._events[e]]:t.on(e,n)}(t,"error",f),t.once("close",h),t.once("finish",p),t.emit("pipe",n),r.flowing||(Qm("pipe resume"),n.resume()),t},ey.prototype.unpipe=function(t){var e=this._readableState;if(0===e.pipesCount)return this;if(1===e.pipesCount)return t&&t!==e.pipes?this:(t||(t=e.pipes),e.pipes=null,e.pipesCount=0,e.flowing=!1,t&&t.emit("unpipe",this),this);if(!t){var n=e.pipes,r=e.pipesCount;e.pipes=null,e.pipesCount=0,e.flowing=!1;for(var i=0;i<r;i++)n[i].emit("unpipe",this);return this}var o=py(e.pipes,t);return-1===o?this:(e.pipes.splice(o,1),e.pipesCount-=1,1===e.pipesCount&&(e.pipes=e.pipes[0]),t.emit("unpipe",this),this)},ey.prototype.on=function(t,e){var n=Bm.prototype.on.call(this,t,e);if("data"===t)!1!==this._readableState.flowing&&this.resume();else if("readable"===t){var r=this._readableState;r.endEmitted||r.readableListening||(r.readableListening=r.needReadable=!0,r.emittedReadable=!1,r.reading?r.length&&oy(this):qg(ly,this))}return n},ey.prototype.addListener=ey.prototype.on,ey.prototype.resume=function(){var t=this._readableState;return t.flowing||(Qm("resume"),t.flowing=!0,function(t,e){e.resumeScheduled||(e.resumeScheduled=!0,qg(uy,t,e))}(this,t)),this},ey.prototype.pause=function(){return Qm("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(Qm("pause"),this._readableState.flowing=!1,this.emit("pause")),this},ey.prototype.wrap=function(t){var e=this._readableState,n=!1,r=this;for(var i in t.on("end",function(){if(Qm("wrapped end"),e.decoder&&!e.ended){var t=e.decoder.end();t&&t.length&&r.push(t)}r.push(null)}),t.on("data",function(i){(Qm("wrapped data"),e.decoder&&(i=e.decoder.write(i)),!e.objectMode||null!==i&&void 0!==i)&&((e.objectMode||i&&i.length)&&(r.push(i)||(n=!0,t.pause())))}),t)void 0===this[i]&&"function"==typeof t[i]&&(this[i]=function(e){return function(){return t[e].apply(t,arguments)}}(i));return function(t,e){for(var n=0,r=t.length;n<r;n++)e(t[n],n)}(["error","close","destroy","pause","resume"],function(e){t.on(e,r.emit.bind(r,e))}),r._read=function(e){Qm("wrapped _read",e),n&&(n=!1,t.resume())},r},ey._fromList=dy,my.WritableState=gy,bm(my,Bm),gy.prototype.getBuffer=function(){for(var t=this.bufferedRequest,e=[];t;)e.push(t),t=t.next;return e},my.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},my.prototype.write=function(t,e,n){var r=this._writableState,i=!1;return"function"==typeof e&&(n=e,e=null),Xv.isBuffer(t)?e="buffer":e||(e=r.defaultEncoding),"function"!=typeof n&&(n=vy),r.ended?function(t,e){var n=new Error("write after end");t.emit("error",n),qg(e,n)}(this,n):function(t,e,n,r){var i=!0,o=!1;return null===n?o=new TypeError("May not write null values to stream"):Xv.isBuffer(n)||"string"==typeof n||void 0===n||e.objectMode||(o=new TypeError("Invalid non-string/buffer chunk")),o&&(t.emit("error",o),qg(r,o),i=!1),i}(this,r,t,n)&&(r.pendingcb++,i=function(t,e,n,r,i){n=function(t,e,n){return t.objectMode||!1===t.decodeStrings||"string"!=typeof e||(e=Xv.from(e,n)),e}(e,n,r),Xv.isBuffer(n)&&(r="buffer");var o=e.objectMode?1:n.length;e.length+=o;var a=e.length<e.highWaterMark;a||(e.needDrain=!0);if(e.writing||e.corked){var s=e.lastBufferedRequest;e.lastBufferedRequest=new function(t,e,n){this.chunk=t,this.encoding=e,this.callback=n,this.next=null}(n,r,i),s?s.next=e.lastBufferedRequest:e.bufferedRequest=e.lastBufferedRequest,e.bufferedRequestCount+=1}else yy(t,e,!1,o,n,r,i);return a}(this,r,t,e,n)),i},my.prototype.cork=function(){this._writableState.corked++},my.prototype.uncork=function(){var t=this._writableState;t.corked&&(t.corked--,t.writing||t.corked||t.finished||t.bufferProcessing||!t.bufferedRequest||_y(this,t))},my.prototype.setDefaultEncoding=function(t){if("string"==typeof t&&(t=t.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((t+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+t);return this._writableState.defaultEncoding=t,this},my.prototype._write=function(t,e,n){n(new Error("not implemented"))},my.prototype._writev=null,my.prototype.end=function(t,e,n){var r=this._writableState;"function"==typeof t?(n=t,t=null,e=null):"function"==typeof e&&(n=e,e=null),null!==t&&void 0!==t&&this.write(t,e),r.corked&&(r.corked=1,this.uncork()),r.ending||r.finished||function(t,e,n){e.ending=!0,ky(t,e),n&&(e.finished?qg(n):t.once("finish",n));e.ended=!0,t.writable=!1}(this,r,n)},bm(Oy,ey);for(var My=Object.keys(my.prototype),Cy=0;Cy<My.length;Cy++){var Ay=My[Cy];Oy.prototype[Ay]||(Oy.prototype[Ay]=my.prototype[Ay])}function Oy(t){if(!(this instanceof Oy))return new Oy(t);ey.call(this,t),my.call(this,t),t&&!1===t.readable&&(this.readable=!1),t&&!1===t.writable&&(this.writable=!1),this.allowHalfOpen=!0,t&&!1===t.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",Dy)}function Dy(){this.allowHalfOpen||this._writableState.ended||qg(Ty,this)}function Ty(t){t.end()}function Py(t){this.afterTransform=function(e,n){return function(t,e,n){var r=t._transformState;r.transforming=!1;var i=r.writecb;if(!i)return t.emit("error",new Error("no writecb in Transform class"));r.writechunk=null,r.writecb=null,null!==n&&void 0!==n&&t.push(n);i(e);var o=t._readableState;o.reading=!1,(o.needReadable||o.length<o.highWaterMark)&&t._read(o.highWaterMark)}(t,e,n)},this.needTransform=!1,this.transforming=!1,this.writecb=null,this.writechunk=null,this.writeencoding=null}function Ry(t){if(!(this instanceof Ry))return new Ry(t);Oy.call(this,t),this._transformState=new Py(this);var e=this;this._readableState.needReadable=!0,this._readableState.sync=!1,t&&("function"==typeof t.transform&&(this._transform=t.transform),"function"==typeof t.flush&&(this._flush=t.flush)),this.once("prefinish",function(){"function"==typeof this._flush?this._flush(function(t){Iy(e,t)}):Iy(e)})}function Iy(t,e){if(e)return t.emit("error",e);var n=t._writableState,r=t._transformState;if(n.length)throw new Error("Calling transform done when ws.length != 0");if(r.transforming)throw new Error("Calling transform done when still transforming");return t.push(null)}function Ly(t){if(!(this instanceof Ly))return new Ly(t);Ry.call(this,t)}function Ey(){Bm.call(this)}bm(Ry,Oy),Ry.prototype.push=function(t,e){return this._transformState.needTransform=!1,Oy.prototype.push.call(this,t,e)},Ry.prototype._transform=function(t,e,n){throw new Error("Not implemented")},Ry.prototype._write=function(t,e,n){var r=this._transformState;if(r.writecb=n,r.writechunk=t,r.writeencoding=e,!r.transforming){var i=this._readableState;(r.needTransform||i.needReadable||i.length<i.highWaterMark)&&this._read(i.highWaterMark)}},Ry.prototype._read=function(t){var e=this._transformState;null!==e.writechunk&&e.writecb&&!e.transforming?(e.transforming=!0,this._transform(e.writechunk,e.writeencoding,e.afterTransform)):e.needTransform=!0},bm(Ly,Ry),Ly.prototype._transform=function(t,e,n){n(null,t)},bm(Ey,Bm),Ey.Readable=ey,Ey.Writable=my,Ey.Duplex=Oy,Ey.Transform=Ry,Ey.PassThrough=Ly,Ey.Stream=Ey,Ey.prototype.pipe=function(t,e){var n=this;function r(e){t.writable&&!1===t.write(e)&&n.pause&&n.pause()}function i(){n.readable&&n.resume&&n.resume()}n.on("data",r),t.on("drain",i),t._isStdio||e&&!1===e.end||(n.on("end",a),n.on("close",s));var o=!1;function a(){o||(o=!0,t.end())}function s(){o||(o=!0,"function"==typeof t.destroy&&t.destroy())}function l(t){if(u(),0===Bm.listenerCount(this,"error"))throw t}function u(){n.removeListener("data",r),t.removeListener("drain",i),n.removeListener("end",a),n.removeListener("close",s),n.removeListener("error",l),t.removeListener("error",l),n.removeListener("end",u),n.removeListener("close",u),t.removeListener("close",u)}return n.on("error",l),t.on("error",l),n.on("end",u),n.on("close",u),t.on("close",u),t.emit("pipe",n),t};var Fy=3,jy=4;function Ny(t,e,n){var r,i=this;if(ey.call(i),i._mode=n,i.headers={},i.rawHeaders=[],i.trailers={},i.rawTrailers=[],i.on("end",function(){qg(function(){i.emit("close")})}),"fetch"===n){i._fetchResponse=e,i.url=e.url,i.statusCode=e.status,i.statusMessage=e.statusText;for(var o,a,s=e.headers[Symbol.iterator]();o=(a=s.next()).value,!a.done;)i.headers[o[0].toLowerCase()]=o[1],i.rawHeaders.push(o[0],o[1]);var l=e.body.getReader();(r=function(){l.read().then(function(t){i._destroyed||(t.done?i.push(null):(i.push(new Xv(t.value)),r()))})})()}else{if(i._xhr=t,i._pos=0,i.url=t.responseURL,i.statusCode=t.status,i.statusMessage=t.statusText,t.getAllResponseHeaders().split(/\r?\n/).forEach(function(t){var e=t.match(/^([^:]+):\s*(.*)/);if(e){var n=e[1].toLowerCase();"set-cookie"===n?(void 0===i.headers[n]&&(i.headers[n]=[]),i.headers[n].push(e[2])):void 0!==i.headers[n]?i.headers[n]+=", "+e[2]:i.headers[n]=e[2],i.rawHeaders.push(e[1],e[2])}}),i._charset="x-user-defined",!gm){var u=i.rawHeaders["mime-type"];if(u){var c=u.match(/;\s*charset=([^;])(;|$)/);c&&(i._charset=c[1].toLowerCase())}i._charset||(i._charset="utf-8")}}}function $y(t){var e,n=this;my.call(n),n._opts=t,n._body=[],n._headers={},t.auth&&n.setHeader("Authorization","Basic "+new Xv(t.auth).toString("base64")),Object.keys(t.headers).forEach(function(e){n.setHeader(e,t.headers[e])});var r=!0;if("disable-fetch"===t.mode)r=!1,e=!0;else if("prefer-streaming"===t.mode)e=!1;else if("allow-wrong-content-type"===t.mode)e=!gm;else{if(t.mode&&"default"!==t.mode&&"prefer-fast"!==t.mode)throw new Error("Invalid value for opts.mode");e=!0}n._mode=function(t,e){return um&&e?"fetch":vm?"moz-chunked-arraybuffer":pm?"ms-stream":hm&&t?"arraybuffer":mm&&t?"text:vbarray":"text"}(e,r),n.on("finish",function(){n._onFinish()})}bm(Ny,ey),Ny.prototype._read=function(){},Ny.prototype._onXHRProgress=function(){var t=this,e=t._xhr,r=null;switch(t._mode){case"text:vbarray":if(e.readyState!==jy)break;try{r=new n.VBArray(e.responseBody).toArray()}catch(t){}if(null!==r){t.push(new Xv(r));break}case"text":try{r=e.responseText}catch(e){t._mode="text:vbarray";break}if(r.length>t._pos){var i=r.substr(t._pos);if("x-user-defined"===t._charset){for(var o=new Xv(i.length),a=0;a<i.length;a++)o[a]=255&i.charCodeAt(a);t.push(o)}else t.push(i,t._charset);t._pos=r.length}break;case"arraybuffer":if(e.readyState!==jy||!e.response)break;r=e.response,t.push(new Xv(new Uint8Array(r)));break;case"moz-chunked-arraybuffer":if(r=e.response,e.readyState!==Fy||!r)break;t.push(new Xv(new Uint8Array(r)));break;case"ms-stream":if(r=e.response,e.readyState!==Fy)break;var s=new n.MSStreamReader;s.onprogress=function(){s.result.byteLength>t._pos&&(t.push(new Xv(new Uint8Array(s.result.slice(t._pos)))),t._pos=s.result.byteLength)},s.onload=function(){t.push(null)},s.readAsArrayBuffer(r)}t._xhr.readyState===jy&&"ms-stream"!==t._mode&&t.push(null)},bm($y,my);var zy=["accept-charset","accept-encoding","access-control-request-headers","access-control-request-method","connection","content-length","cookie","cookie2","date","dnt","expect","host","keep-alive","origin","referer","te","trailer","transfer-encoding","upgrade","user-agent","via"];$y.prototype.setHeader=function(t,e){var n=t.toLowerCase();-1===zy.indexOf(n)&&(this._headers[n]={name:t,value:e})},$y.prototype.getHeader=function(t){return this._headers[t.toLowerCase()].value},$y.prototype.removeHeader=function(t){delete this._headers[t.toLowerCase()]},$y.prototype._onFinish=function(){var t=this;if(!t._destroyed){var e,r=t._opts,i=t._headers;if("POST"!==r.method&&"PUT"!==r.method&&"PATCH"!==r.method||(e=function(){if(void 0!==am)return am;try{new n.Blob([new ArrayBuffer(1)]),am=!0}catch(t){am=!1}return am}()?new n.Blob(t._body.map(function(t){return function(t){if(t instanceof Uint8Array){if(0===t.byteOffset&&t.byteLength===t.buffer.byteLength)return t.buffer;if("function"==typeof t.buffer.slice)return t.buffer.slice(t.byteOffset,t.byteOffset+t.byteLength)}if(Lg(t)){for(var e=new Uint8Array(t.length),n=t.length,r=0;r<n;r++)e[r]=t[r];return e.buffer}throw new Error("Argument must be a Buffer")}(t)}),{type:(i["content-type"]||{}).value||""}):Xv.concat(t._body).toString()),"fetch"===t._mode){var o=Object.keys(i).map(function(t){return[i[t].name,i[t].value]});n.fetch(t._opts.url,{method:t._opts.method,headers:o,body:e,mode:"cors",credentials:r.withCredentials?"include":"same-origin"}).then(function(e){t._fetchResponse=e,t._connect()},function(e){t.emit("error",e)})}else{var a=t._xhr=new n.XMLHttpRequest;try{a.open(t._opts.method,t._opts.url,!0)}catch(e){return void qg(function(){t.emit("error",e)})}"responseType"in a&&(a.responseType=t._mode.split(":")[0]),"withCredentials"in a&&(a.withCredentials=!!r.withCredentials),"text"===t._mode&&"overrideMimeType"in a&&a.overrideMimeType("text/plain; charset=x-user-defined"),Object.keys(i).forEach(function(t){a.setRequestHeader(i[t].name,i[t].value)}),t._response=null,a.onreadystatechange=function(){switch(a.readyState){case Fy:case jy:t._onXHRProgress()}},"moz-chunked-arraybuffer"===t._mode&&(a.onprogress=function(){t._onXHRProgress()}),a.onerror=function(){t._destroyed||t.emit("error",new Error("XHR error"))};try{a.send(e)}catch(e){return void qg(function(){t.emit("error",e)})}}}},$y.prototype._onXHRProgress=function(){(function(t){try{var e=t.status;return null!==e&&0!==e}catch(t){return!1}})(this._xhr)&&!this._destroyed&&(this._response||this._connect(),this._response._onXHRProgress())},$y.prototype._connect=function(){this._destroyed||(this._response=new Ny(this._xhr,this._fetchResponse,this._mode),this.emit("response",this._response))},$y.prototype._write=function(t,e,n){this._body.push(t),n()},$y.prototype.abort=$y.prototype.destroy=function(){this._destroyed=!0,this._response&&(this._response._destroyed=!0),this._xhr&&this._xhr.abort()},$y.prototype.end=function(t,e,n){"function"==typeof t&&(n=t,t=void 0),my.prototype.end.call(this,t,e,n)},$y.prototype.flushHeaders=function(){},$y.prototype.setTimeout=function(){},$y.prototype.setNoDelay=function(){},$y.prototype.setSocketKeepAlive=function(){};var By=2147483647,Yy=36,Wy=1,Uy=26,Hy=38,Vy=700,qy=72,Gy=128,Jy="-",Zy=/[^\x20-\x7E]/,Ky=/[\x2E\u3002\uFF0E\uFF61]/g,Xy={overflow:"Overflow: input needs wider integers to process","not-basic":"Illegal input >= 0x80 (not a basic code point)","invalid-input":"Invalid input"},Qy=Yy-Wy,tb=Math.floor,eb=String.fromCharCode;function nb(t){throw new RangeError(Xy[t])}function rb(t,e){return t+22+75*(t<26)-((0!=e)<<5)}function ib(t,e,n){var r=0;for(t=n?tb(t/Vy):t>>1,t+=tb(t/e);t>Qy*Uy>>1;r+=Yy)t=tb(t/Qy);return tb(r+(Qy+1)*t/(t+Hy))}function ob(t){return function(t,e){var n=t.split("@"),r="";n.length>1&&(r=n[0]+"@",t=n[1]);var i=function(t,e){for(var n=t.length,r=[];n--;)r[n]=e(t[n]);return r}((t=t.replace(Ky,".")).split("."),e).join(".");return r+i}(t,function(t){return Zy.test(t)?"xn--"+function(t){var e,n,r,i,o,a,s,l,u,c,d,f,h,p,v,g=[];for(f=(t=function(t){for(var e,n,r=[],i=0,o=t.length;i<o;)(e=t.charCodeAt(i++))>=55296&&e<=56319&&i<o?56320==(64512&(n=t.charCodeAt(i++)))?r.push(((1023&e)<<10)+(1023&n)+65536):(r.push(e),i--):r.push(e);return r}(t)).length,e=Gy,n=0,o=qy,a=0;a<f;++a)(d=t[a])<128&&g.push(eb(d));for(r=i=g.length,i&&g.push(Jy);r<f;){for(s=By,a=0;a<f;++a)(d=t[a])>=e&&d<s&&(s=d);for(s-e>tb((By-n)/(h=r+1))&&nb("overflow"),n+=(s-e)*h,e=s,a=0;a<f;++a)if((d=t[a])<e&&++n>By&&nb("overflow"),d==e){for(l=n,u=Yy;!(l<(c=u<=o?Wy:u>=o+Uy?Uy:u-o));u+=Yy)v=l-c,p=Yy-c,g.push(eb(rb(c+v%p,0))),l=tb(v/p);g.push(eb(rb(l,0))),o=ib(n,h,r==i),n=0,++r}++n,++e}return g.join("")}(t):t})}function ab(t,e){return Object.prototype.hasOwnProperty.call(t,e)}var sb=Array.isArray||function(t){return"[object Array]"===Object.prototype.toString.call(t)};function lb(t){switch(void 0===t?"undefined":i(t)){case"string":return t;case"boolean":return t?"true":"false";case"number":return isFinite(t)?t:"";default:return""}}function ub(t,e){if(t.map)return t.map(e);for(var n=[],r=0;r<t.length;r++)n.push(e(t[r],r));return n}var cb=Object.keys||function(t){var e=[];for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e.push(n);return e};function db(t,e,n,r){e=e||"&",n=n||"=";var i={};if("string"!=typeof t||0===t.length)return i;var o=/\+/g;t=t.split(e);var a=1e3;r&&"number"==typeof r.maxKeys&&(a=r.maxKeys);var s=t.length;a>0&&s>a&&(s=a);for(var l=0;l<s;++l){var u,c,d,f,h=t[l].replace(o,"%20"),p=h.indexOf(n);p>=0?(u=h.substr(0,p),c=h.substr(p+1)):(u=h,c=""),d=decodeURIComponent(u),f=decodeURIComponent(c),ab(i,d)?sb(i[d])?i[d].push(f):i[d]=[i[d],f]:i[d]=f}return i}function fb(){this.protocol=null,this.slashes=null,this.auth=null,this.host=null,this.port=null,this.hostname=null,this.hash=null,this.search=null,this.query=null,this.pathname=null,this.path=null,this.href=null}var hb=/^([a-z0-9.+-]+:)/i,pb=/:[0-9]*$/,vb=/^(\/\/?(?!\/)[^\?\s]*)(\?[^\s]*)?$/,gb=["{","}","|","\\","^","`"].concat(["<",">",'"',"`"," ","\r","\n","\t"]),mb=["'"].concat(gb),yb=["%","/","?",";","#"].concat(mb),bb=["/","?","#"],_b=255,wb=/^[+a-z0-9A-Z_-]{0,63}$/,xb=/^([+a-z0-9A-Z_-]{0,63})(.*)$/,kb={javascript:!0,"javascript:":!0},Sb={javascript:!0,"javascript:":!0},Mb={http:!0,https:!0,ftp:!0,gopher:!0,file:!0,"http:":!0,"https:":!0,"ftp:":!0,"gopher:":!0,"file:":!0};function Cb(t,e,n){if(t&&Lm(t)&&t instanceof fb)return t;var r=new fb;return r.parse(t,e,n),r}function Ab(t){var e=t.auth||"";e&&(e=(e=encodeURIComponent(e)).replace(/%3A/i,":"),e+="@");var n,r,o,a,s=t.protocol||"",l=t.pathname||"",u=t.hash||"",c=!1,d="";t.host?c=e+t.host:t.hostname&&(c=e+(-1===t.hostname.indexOf(":")?t.hostname:"["+this.hostname+"]"),t.port&&(c+=":"+t.port)),t.query&&Lm(t.query)&&Object.keys(t.query).length&&(n=t.query,r=r||"&",o=o||"=",null===n&&(n=void 0),d="object"===(void 0===n?"undefined":i(n))?ub(cb(n),function(t){var e=encodeURIComponent(lb(t))+o;return sb(n[t])?ub(n[t],function(t){return e+encodeURIComponent(lb(t))}).join(r):e+encodeURIComponent(lb(n[t]))}).join(r):a?encodeURIComponent(lb(a))+o+encodeURIComponent(lb(n)):"");var f=t.search||d&&"?"+d||"";return s&&":"!==s.substr(-1)&&(s+=":"),t.slashes||(!s||Mb[s])&&!1!==c?(c="//"+(c||""),l&&"/"!==l.charAt(0)&&(l="/"+l)):c||(c=""),u&&"#"!==u.charAt(0)&&(u="#"+u),f&&"?"!==f.charAt(0)&&(f="?"+f),s+c+(l=l.replace(/[?#]/g,function(t){return encodeURIComponent(t)}))+(f=f.replace("#","%23"))+u}function Ob(t){var e=t.host,n=pb.exec(e);n&&(":"!==(n=n[0])&&(t.port=n.substr(1)),e=e.substr(0,e.length-n.length)),e&&(t.hostname=e)}function Db(t,e){"string"==typeof t&&(t=Cb(t));var r=-1===n.location.protocol.search(/^https?:$/)?"http:":"",i=t.protocol||r,o=t.hostname||t.host,a=t.port,s=t.path||"/";o&&-1!==o.indexOf(":")&&(o="["+o+"]"),t.url=(o?i+"//"+o:"")+(a?":"+a:"")+s,t.method=(t.method||"GET").toUpperCase(),t.headers=t.headers||{};var l=new $y(t);return e&&l.on("response",e),l}function Tb(){}fb.prototype.parse=function(t,e,n){return function(t,e,n,r){if(!Pm(e))throw new TypeError("Parameter 'url' must be a string, not "+(void 0===e?"undefined":i(e)));var o=e.indexOf("?"),a=-1!==o&&o<e.indexOf("#")?"?":"#",s=e.split(a);s[0]=s[0].replace(/\\/g,"/");var l=e=s.join(a);if(l=l.trim(),!r&&1===e.split("#").length){var u=vb.exec(l);if(u)return t.path=l,t.href=l,t.pathname=u[1],u[2]?(t.search=u[2],t.query=n?db(t.search.substr(1)):t.search.substr(1)):n&&(t.search="",t.query={}),t}var c,d,f,h,p=hb.exec(l);if(p){var v=(p=p[0]).toLowerCase();t.protocol=v,l=l.substr(p.length)}if(r||p||l.match(/^\/\/[^@\/]+@[^@\/]+/)){var g="//"===l.substr(0,2);!g||p&&Sb[p]||(l=l.substr(2),t.slashes=!0)}if(!Sb[p]&&(g||p&&!Mb[p])){var m,y,b=-1;for(c=0;c<bb.length;c++)-1!==(d=l.indexOf(bb[c]))&&(-1===b||d<b)&&(b=d);for(-1!==(y=-1===b?l.lastIndexOf("@"):l.lastIndexOf("@",b))&&(m=l.slice(0,y),l=l.slice(y+1),t.auth=decodeURIComponent(m)),b=-1,c=0;c<yb.length;c++)-1!==(d=l.indexOf(yb[c]))&&(-1===b||d<b)&&(b=d);-1===b&&(b=l.length),t.host=l.slice(0,b),l=l.slice(b),Ob(t),t.hostname=t.hostname||"";var _="["===t.hostname[0]&&"]"===t.hostname[t.hostname.length-1];if(!_){var w=t.hostname.split(/\./);for(c=0,f=w.length;c<f;c++){var x=w[c];if(x&&!x.match(wb)){for(var k="",S=0,M=x.length;S<M;S++)x.charCodeAt(S)>127?k+="x":k+=x[S];if(!k.match(wb)){var C=w.slice(0,c),A=w.slice(c+1),O=x.match(xb);O&&(C.push(O[1]),A.unshift(O[2])),A.length&&(l="/"+A.join(".")+l),t.hostname=C.join(".");break}}}}t.hostname.length>_b?t.hostname="":t.hostname=t.hostname.toLowerCase(),_||(t.hostname=ob(t.hostname)),h=t.port?":"+t.port:"";var D=t.hostname||"";t.host=D+h,t.href+=t.host,_&&(t.hostname=t.hostname.substr(1,t.hostname.length-2),"/"!==l[0]&&(l="/"+l))}if(!kb[v])for(c=0,f=mb.length;c<f;c++){var T=mb[c];if(-1!==l.indexOf(T)){var P=encodeURIComponent(T);P===T&&(P=escape(T)),l=l.split(T).join(P)}}var R=l.indexOf("#");-1!==R&&(t.hash=l.substr(R),l=l.slice(0,R));var I=l.indexOf("?");-1!==I?(t.search=l.substr(I),t.query=l.substr(I+1),n&&(t.query=db(t.query)),l=l.slice(0,I)):n&&(t.search="",t.query={});l&&(t.pathname=l);Mb[v]&&t.hostname&&!t.pathname&&(t.pathname="/");if(t.pathname||t.search){h=t.pathname||"";var L=t.search||"";t.path=h+L}return t.href=Ab(t),t}(this,t,e,n)},fb.prototype.format=function(){return Ab(this)},fb.prototype.resolve=function(t){return this.resolveObject(Cb(t,!1,!0)).format()},fb.prototype.resolveObject=function(t){if(Pm(t)){var e=new fb;e.parse(t,!1,!0),t=e}for(var n,r=new fb,i=Object.keys(this),o=0;o<i.length;o++){var a=i[o];r[a]=this[a]}if(r.hash=t.hash,""===t.href)return r.href=r.format(),r;if(t.slashes&&!t.protocol){for(var s=Object.keys(t),l=0;l<s.length;l++){var u=s[l];"protocol"!==u&&(r[u]=t[u])}return Mb[r.protocol]&&r.hostname&&!r.pathname&&(r.path=r.pathname="/"),r.href=r.format(),r}if(t.protocol&&t.protocol!==r.protocol){if(!Mb[t.protocol]){for(var c=Object.keys(t),d=0;d<c.length;d++){var f=c[d];r[f]=t[f]}return r.href=r.format(),r}if(r.protocol=t.protocol,t.host||Sb[t.protocol])r.pathname=t.pathname;else{for(n=(t.pathname||"").split("/");n.length&&!(t.host=n.shift()););t.host||(t.host=""),t.hostname||(t.hostname=""),""!==n[0]&&n.unshift(""),n.length<2&&n.unshift(""),r.pathname=n.join("/")}if(r.search=t.search,r.query=t.query,r.host=t.host||"",r.auth=t.auth,r.hostname=t.hostname||t.host,r.port=t.port,r.pathname||r.search){var h=r.pathname||"",p=r.search||"";r.path=h+p}return r.slashes=r.slashes||t.slashes,r.href=r.format(),r}var v,g=r.pathname&&"/"===r.pathname.charAt(0),m=t.host||t.pathname&&"/"===t.pathname.charAt(0),y=m||g||r.host&&t.pathname,b=y,_=r.pathname&&r.pathname.split("/")||[],w=r.protocol&&!Mb[r.protocol];if(n=t.pathname&&t.pathname.split("/")||[],w&&(r.hostname="",r.port=null,r.host&&(""===_[0]?_[0]=r.host:_.unshift(r.host)),r.host="",t.protocol&&(t.hostname=null,t.port=null,t.host&&(""===n[0]?n[0]=t.host:n.unshift(t.host)),t.host=null),y=y&&(""===n[0]||""===_[0])),m)r.host=t.host||""===t.host?t.host:r.host,r.hostname=t.hostname||""===t.hostname?t.hostname:r.hostname,r.search=t.search,r.query=t.query,_=n;else if(n.length)_||(_=[]),_.pop(),_=_.concat(n),r.search=t.search,r.query=t.query;else if(null!=t.search)return w&&(r.hostname=r.host=_.shift(),(v=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=v.shift(),r.host=r.hostname=v.shift())),r.search=t.search,r.query=t.query,Tm(r.pathname)&&Tm(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.href=r.format(),r;if(!_.length)return r.pathname=null,r.search?r.path="/"+r.search:r.path=null,r.href=r.format(),r;for(var x=_.slice(-1)[0],k=(r.host||t.host||_.length>1)&&("."===x||".."===x)||""===x,S=0,M=_.length;M>=0;M--)"."===(x=_[M])?_.splice(M,1):".."===x?(_.splice(M,1),S++):S&&(_.splice(M,1),S--);if(!y&&!b)for(;S--;S)_.unshift("..");!y||""===_[0]||_[0]&&"/"===_[0].charAt(0)||_.unshift(""),k&&"/"!==_.join("/").substr(-1)&&_.push("");var C=""===_[0]||_[0]&&"/"===_[0].charAt(0);return w&&(r.hostname=r.host=C?"":_.length?_.shift():"",(v=!!(r.host&&r.host.indexOf("@")>0)&&r.host.split("@"))&&(r.auth=v.shift(),r.host=r.hostname=v.shift())),(y=y||r.host&&_.length)&&!C&&_.unshift(""),_.length?r.pathname=_.join("/"):(r.pathname=null,r.path=null),Tm(r.pathname)&&Tm(r.search)||(r.path=(r.pathname?r.pathname:"")+(r.search?r.search:"")),r.auth=t.auth||r.auth,r.slashes=r.slashes||t.slashes,r.href=r.format(),r},fb.prototype.parseHost=function(){return Ob(this)},Tb.defaultMaxSockets=4;var Pb={request:Db,get:function(t,e){var n=Db(t,e);return n.end(),n},Agent:Tb,METHODS:["CHECKOUT","CONNECT","COPY","DELETE","GET","HEAD","LOCK","M-SEARCH","MERGE","MKACTIVITY","MKCOL","MOVE","NOTIFY","OPTIONS","PATCH","POST","PROPFIND","PROPPATCH","PURGE","PUT","REPORT","SEARCH","SUBSCRIBE","TRACE","UNLOCK","UNSUBSCRIBE"],STATUS_CODES:{100:"Continue",101:"Switching Protocols",102:"Processing",200:"OK",201:"Created",202:"Accepted",203:"Non-Authoritative Information",204:"No Content",205:"Reset Content",206:"Partial Content",207:"Multi-Status",300:"Multiple Choices",301:"Moved Permanently",302:"Moved Temporarily",303:"See Other",304:"Not Modified",305:"Use Proxy",307:"Temporary Redirect",400:"Bad Request",401:"Unauthorized",402:"Payment Required",403:"Forbidden",404:"Not Found",405:"Method Not Allowed",406:"Not Acceptable",407:"Proxy Authentication Required",408:"Request Time-out",409:"Conflict",410:"Gone",411:"Length Required",412:"Precondition Failed",413:"Request Entity Too Large",414:"Request-URI Too Large",415:"Unsupported Media Type",416:"Requested Range Not Satisfiable",417:"Expectation Failed",418:"I'm a teapot",422:"Unprocessable Entity",423:"Locked",424:"Failed Dependency",425:"Unordered Collection",426:"Upgrade Required",428:"Precondition Required",429:"Too Many Requests",431:"Request Header Fields Too Large",500:"Internal Server Error",501:"Not Implemented",502:"Bad Gateway",503:"Service Unavailable",504:"Gateway Time-out",505:"HTTP Version Not Supported",506:"Variant Also Negotiates",507:"Insufficient Storage",509:"Bandwidth Limit Exceeded",510:"Not Extended",511:"Network Authentication Required"}},Rb=$f(function(t){!function(t){function e(){var t=1<=arguments.length?[].slice.call(arguments,0):[],e=t.shift(),n=t.shift();Error.apply(this,t),this.message=this.message||"Invalid Geometry: item: "+JSON.stringify(e)+", params: "+JSON.stringify(n)}t.version="0.5.0",t.defaults={doThrows:{invalidGeometry:!1}},e.prototype=Error,t.errors={InvalidGeometryError:e},t.isGeometryValid=function(t){return!(!t||!Object.keys(t).length)&&(!!t.type&&!!t.coordinates&&Array.isArray(t.coordinates)&&!!t.coordinates.length)},t.parse=function(t,e,s){var l,u,c=function(t,e){var n=t||{};for(var r in e)e.hasOwnProperty(r)&&!n[r]&&(n[r]=e[r]);return n}(e,this.defaults);if(r.length=0,function(t){for(var e in t.geom={},t)t.hasOwnProperty(e)&&-1!==n.indexOf(e)&&(t.geom[e]=t[e],delete t[e]);!function(t){for(var e in t)t.hasOwnProperty(e)&&("string"==typeof t[e]?r.push(t[e]):"object"===i(t[e])&&(r.push(t[e][0]),r.push(t[e][1])));if(0===r.length)throw new Error("No geometry attributes specified")}(t.geom)}(c),u=function(t){var e;t.exclude||t.include?t.include?e=function(e){t.include.forEach(function(t){e[t]=this[t]},this)}:t.exclude&&(e=function(e){for(var n in this)this.hasOwnProperty(n)&&-1===r.indexOf(n)&&-1===t.exclude.indexOf(n)&&(e[n]=this[n])}):e=function(t){for(var e in this)this.hasOwnProperty(e)&&-1===r.indexOf(e)&&(t[e]=this[e])};return function(){var n={};return e.call(this,n),t.extra&&function(t,e){for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n])}(n,t.extra),n}}(c),Array.isArray(t)?(l={type:"FeatureCollection",features:[]},t.forEach(function(t){l.features.push(a({item:t,params:c,propFunc:u}))}),o(l,c)):o(l=a({item:t,params:c,propFunc:u}),c),!s||"function"!=typeof s)return l;s(l)};var n=["Point","MultiPoint","LineString","MultiLineString","Polygon","MultiPolygon","GeoJSON"],r=[];function o(t,e){if(e.crs&&function(t){if("name"===t.type){if(t.properties&&t.properties.name)return!0;throw new Error('Invalid CRS. Properties must contain "name" key')}if("link"===t.type){if(t.properties&&t.properties.href&&t.properties.type)return!0;throw new Error('Invalid CRS. Properties must contain "href" and "type" key')}throw new Error('Invald CRS. Type attribute must be "name" or "link"')}(e.crs)&&(e.isPostgres?t.geometry.crs=e.crs:t.crs=e.crs),e.bbox&&(t.bbox=e.bbox),e.extraGlobal)for(var n in t.properties={},e.extraGlobal)t.properties[n]=e.extraGlobal[n]}function a(n){var r=n.item,o=n.params,a=n.propFunc,l={type:"Feature"};return l.geometry=function n(r,o){var a={};for(var l in o.geom){var u=o.geom[l];if("string"==typeof u&&r.hasOwnProperty(u))"GeoJSON"===l?a=r[u]:(a.type=l,a.coordinates=r[u]);else if("object"!==(void 0===u?"undefined":i(u))||Array.isArray(u)){if(Array.isArray(u)&&r.hasOwnProperty(u[0])&&r.hasOwnProperty(u[1]))a.type=l,a.coordinates=[Number(r[u[1]]),Number(r[u[0]])];else if(Array.isArray(u)&&s(u[0])&&s(u[1])){for(var c=[],d=0;d<u.length;d++){for(var f=u[d].split("."),h=r,p=0;p<f.length;p++){if(!h.hasOwnProperty(f[p]))return!1;h=h[f[p]]}c[d]=h}a.type=l,a.coordinates=[Number(c[1]),Number(c[0])]}}else{var v=Object.keys(u).map(function(t){var e=u[t],i=r[t];return n(i,{geom:{Point:e}})});a.type=l,a.coordinates=[].concat(v.map(function(t){return t.coordinates}))}}if(o.doThrows&&o.doThrows.invalidGeometry&&!t.isGeometryValid(a))throw new e(r,o);return a}(r,o),l.properties=a.call(r),l}function s(t){return/^.+\..+$/.test(t)}}(t.exports)}),Ib={RADIUS:6378137,FLATTENING:1/298.257223563,POLAR_RADIUS:6356752.3142};function Lb(t){var e=0;if(t&&t.length>0){e+=Math.abs(Eb(t[0]));for(var n=1;n<t.length;n++)e-=Math.abs(Eb(t[n]))}return e}function Eb(t){var e,n,r,i,o,a,s=0,l=t.length;if(l>2){for(a=0;a<l;a++)a===l-2?(r=l-2,i=l-1,o=0):a===l-1?(r=l-1,i=0,o=1):(r=a,i=a+1,o=a+2),e=t[r],n=t[i],s+=(Fb(t[o][0])-Fb(e[0]))*Math.sin(Fb(n[1]));s=s*Ib.RADIUS*Ib.RADIUS/2}return s}function Fb(t){return t*Math.PI/180}var jb={geometry:function t(e){var n,r=0;switch(e.type){case"Polygon":return Lb(e.coordinates);case"MultiPolygon":for(n=0;n<e.coordinates.length;n++)r+=Lb(e.coordinates[n]);return r;case"Point":case"MultiPoint":case"LineString":case"MultiLineString":return 0;case"GeometryCollection":for(n=0;n<e.geometries.length;n++)r+=t(e.geometries[n]);return r}},ring:Eb},Nb=function t(e,n){switch(e&&e.type||null){case"FeatureCollection":return e.features=e.features.map($b(t,n)),e;case"Feature":return e.geometry=t(e.geometry,n),e;case"Polygon":case"MultiPolygon":return function(t,e){"Polygon"===t.type?t.coordinates=zb(t.coordinates,e):"MultiPolygon"===t.type&&(t.coordinates=t.coordinates.map($b(zb,e)));return t}(e,n);default:return e}};function $b(t,e){return function(n){return t(n,e)}}function zb(t,e){e=!!e,t[0]=Bb(t[0],e);for(var n=1;n<t.length;n++)t[n]=Bb(t[n],!e);return t}function Bb(t,e){return function(t){return jb.ring(t)>=0}(t)===e?t:t.reverse()}var Yb=function(t,e){void 0===t&&(t={}),void 0===e&&(e={}),this.data=e,this.settings=t,this.init()};Yb.prototype.init=function(){_s.component("nyco-map",jv),new _s({el:'[data-js="map"]',delimiters:["v{","}"],data:function(){return{data:Nv.data}},created:function(){this.getBoroughData(),this.getNeighborhoodData()},methods:{getBoroughData:function(){var t=this;Pb.get("https://data.cityofnewyork.us/resource/7t3b-ywvw.json",function(e){var n="";e.on("data",function(t){n+=t}),e.on("end",function(){n=JSON.parse(n),Nv.data.boroughs=t.convertToGeoJSON(n)})}).on("error",function(t){Nv.data.boroughs={error:!0,message:t.message}})},getNeighborhoodData:function(){var t=this;Pb.get("https://data.cityofnewyork.us/resource/q2z5-ai38.json",function(e){var n="";e.on("data",function(t){n+=t}),e.on("end",function(){n=JSON.parse(n),Nv.data.neighborhoods=t.convertToGeoJSON(n)})}).on("error",function(t){Nv.data.neighborhoods={error:!0,message:t.message}})},convertToGeoJSON:function(t){return Nb(Rb.parse(t,{GeoJSON:"the_geom"}))}}})},Yb.prototype._constants=function(t){console.dir(t)};var Wb=function(){};return Wb.prototype.icons=function(t){return new e(t)},Wb.prototype.feed=function(t){return new xr(t)},Wb.prototype.toggle=function(t){return new kr},Wb.prototype.track=function(t){return new Sr},Wb.prototype.select=function(){return new Tf},Wb.prototype.chart=function(t){return"bar"===t?new Mv:"horizontalBar"===t?new Ov:"line"===t?new Pv:"pie"===t?new Lv:void 0},Wb.prototype.map=function(){return new Yb},Wb}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
