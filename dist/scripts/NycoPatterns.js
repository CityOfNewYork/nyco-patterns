var NycoPatterns = (function () {
  'use strict';

  function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
      throw new TypeError("Cannot call a class as a function");
    }
  }

  function _defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }

  function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
  }

  function _slicedToArray(arr, i) {
    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest();
  }

  function _arrayWithHoles(arr) {
    if (Array.isArray(arr)) return arr;
  }

  function _iterableToArrayLimit(arr, i) {
    if (!(Symbol.iterator in Object(arr) || Object.prototype.toString.call(arr) === "[object Arguments]")) {
      return;
    }

    var _arr = [];
    var _n = true;
    var _d = false;
    var _e = undefined;

    try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);

        if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;
      _e = err;
    } finally {
      try {
        if (!_n && _i["return"] != null) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }

    return _arr;
  }

  function _nonIterableRest() {
    throw new TypeError("Invalid attempt to destructure non-iterable instance");
  }

  /**
   * The Simple Toggle class. This will toggle the class 'active' and 'hidden'
   * on target elements, determined by a click event on a selected link or
   * element. This will also toggle the aria-hidden attribute for targeted
   * elements to support screen readers. Target settings and other functionality
   * can be controlled through data attributes.
   *
   * This uses the .matches() method which will require a polyfill for IE
   * https://polyfill.io/v2/docs/features/#Element_prototype_matches
   *
   * @class
   */

  var Toggle = function Toggle(s) {
    var this$1 = this;

    // Create an object to store existing toggle listeners (if it doesn't exist)
    if (!window.hasOwnProperty('ACCESS_TOGGLES')) { window.ACCESS_TOGGLES = []; }
    s = !s ? {} : s;
    this.settings = {
      selector: s.selector ? s.selector : Toggle.selector,
      namespace: s.namespace ? s.namespace : Toggle.namespace,
      inactiveClass: s.inactiveClass ? s.inactiveClass : Toggle.inactiveClass,
      activeClass: s.activeClass ? s.activeClass : Toggle.activeClass,
      before: s.before ? s.before : false,
      after: s.after ? s.after : false
    };
    this.element = s.element ? s.element : false;

    if (this.element) {
      this.element.addEventListener('click', function (event) {
        this$1.toggle(event);
      });
    } else {
      // If there isn't an existing instantiated toggle, add the event listener.
      if (!window.ACCESS_TOGGLES.hasOwnProperty(this.settings.selector)) { document.querySelector('body').addEventListener('click', function (event) {
        if (!event.target.matches(this$1.settings.selector)) { return; }
        this$1.toggle(event);
      }); }
    } // Record that a toggle using this selector has been instantiated. This
    // prevents double toggling.


    window.ACCESS_TOGGLES[this.settings.selector] = true;
    return this;
  };
  /**
   * Logs constants to the debugger
   * @param{object} eventThe main click event
   * @return {object}      The class
   */


  Toggle.prototype.toggle = function toggle (event) {
      var this$1 = this;

    var el = event.target;
    var target = false;
    event.preventDefault();
    /** Anchor Links */

    target = el.hasAttribute('href') ? document.querySelector(el.getAttribute('href')) : target;
    /** Toggle Controls */

    target = el.hasAttribute('aria-controls') ? document.querySelector(("#" + (el.getAttribute('aria-controls')))) : target;
    /** Main Functionality */

    if (!target) { return this; }
    this.elementToggle(el, target);
    /** Undo */

    if (el.dataset[((this.settings.namespace) + "Undo")]) {
      var undo = document.querySelector(el.dataset[((this.settings.namespace) + "Undo")]);
      undo.addEventListener('click', function (event) {
        event.preventDefault();
        this$1.elementToggle(el, target);
        undo.removeEventListener('click');
      });
    }

    return this;
  };
  /**
   * The main toggling method
   * @param{object} el   The current element to toggle active
   * @param{object} target The target element to toggle active/hidden
   * @return {object}      The class
   */


  Toggle.prototype.elementToggle = function elementToggle (el, target) {
      var this$1 = this;

    var i = 0;
    var attr = '';
    var value = ''; // Get other toggles that might control the same element

    var others = document.querySelectorAll(("[aria-controls=\"" + (el.getAttribute('aria-controls')) + "\"]"));
    /**
     * Toggling before hook.
     */

    if (this.settings.before) { this.settings.before(this); }
    /**
     * Toggle Element and Target classes
     */

    if (this.settings.activeClass) {
      el.classList.toggle(this.settings.activeClass);
      target.classList.toggle(this.settings.activeClass); // If there are other toggles that control the same element

      if (others) { others.forEach(function (other) {
        if (other !== el) { other.classList.toggle(this$1.settings.activeClass); }
      }); }
    }

    if (this.settings.inactiveClass) { target.classList.toggle(this.settings.inactiveClass); }
    /**
     * Target Element Aria Attributes
     */

    for (i = 0; i < Toggle.targetAriaRoles.length; i++) {
      attr = Toggle.targetAriaRoles[i];
      value = target.getAttribute(attr);
      if (value != '' && value) { target.setAttribute(attr, value === 'true' ? 'false' : 'true'); }
    }
    /**
     * Jump Links
     */


    if (el.hasAttribute('href')) {
      // Reset the history state, this will clear out
      // the hash when the jump item is toggled closed.
      history.pushState('', '', window.location.pathname + window.location.search); // Target element toggle.

      if (target.classList.contains(this.settings.activeClass)) {
        window.location.hash = el.getAttribute('href');
        target.setAttribute('tabindex', '-1');
        target.focus({
          preventScroll: true
        });
      } else { target.removeAttribute('tabindex'); }
    }
    /**
     * Toggle Element (including multi toggles) Aria Attributes
     */


    for (i = 0; i < Toggle.elAriaRoles.length; i++) {
      attr = Toggle.elAriaRoles[i];
      value = el.getAttribute(attr);
      if (value != '' && value) { el.setAttribute(attr, value === 'true' ? 'false' : 'true'); } // If there are other toggles that control the same element

      if (others) { others.forEach(function (other) {
        if (other !== el && other.getAttribute(attr)) { other.setAttribute(attr, value === 'true' ? 'false' : 'true'); }
      }); }
    }
    /**
     * Toggling complete hook.
     */


    if (this.settings.after) { this.settings.after(this); }
    return this;
  };
  /** @type {String} The main selector to add the toggling function to */


  Toggle.selector = '[data-js*="toggle"]';
  /** @type {String} The namespace for our data attribute settings */

  Toggle.namespace = 'toggle';
  /** @type {String} The hide class */

  Toggle.inactiveClass = 'hidden';
  /** @type {String} The active class */

  Toggle.activeClass = 'active';
  /** @type {Array} Aria roles to toggle true/false on the toggling element */

  Toggle.elAriaRoles = ['aria-pressed', 'aria-expanded'];
  /** @type {Array} Aria roles to toggle true/false on the target element */

  Toggle.targetAriaRoles = ['aria-hidden'];

  /**
   * The Icon module
   * @class
   */

  var Icons = function Icons(path) {
    path = path ? path : Icons.path;
    fetch(path).then(function (response) {
      if (response.ok) { return response.text(); }else // eslint-disable-next-line no-console
        { console.dir(response); }
    }).catch(function (error) {
      // eslint-disable-next-line no-console
      { console.dir(error); }
    }).then(function (data) {
      var sprite = document.createElement('div');
      sprite.innerHTML = data;
      sprite.setAttribute('aria-hidden', true);
      sprite.setAttribute('style', 'display: none;');
      document.body.appendChild(sprite);
    });
    return this;
  };
  /** @type {String} The path of the icon file */


  Icons.path = 'icons.svg';

  /*!
   * Vue.js v2.6.10
   * (c) 2014-2019 Evan You
   * Released under the MIT License.
   */
  /*  */

  var emptyObject = Object.freeze({});

  // These helpers produce better VM code in JS engines due to their
  // explicitness and function inlining.
  function isUndef (v) {
    return v === undefined || v === null
  }

  function isDef (v) {
    return v !== undefined && v !== null
  }

  function isTrue (v) {
    return v === true
  }

  function isFalse (v) {
    return v === false
  }

  /**
   * Check if value is primitive.
   */
  function isPrimitive (value) {
    return (
      typeof value === 'string' ||
      typeof value === 'number' ||
      // $flow-disable-line
      typeof value === 'symbol' ||
      typeof value === 'boolean'
    )
  }

  /**
   * Quick object check - this is primarily used to tell
   * Objects from primitive values when we know the value
   * is a JSON-compliant type.
   */
  function isObject (obj) {
    return obj !== null && typeof obj === 'object'
  }

  /**
   * Get the raw type string of a value, e.g., [object Object].
   */
  var _toString = Object.prototype.toString;

  function toRawType (value) {
    return _toString.call(value).slice(8, -1)
  }

  /**
   * Strict object type check. Only returns true
   * for plain JavaScript objects.
   */
  function isPlainObject (obj) {
    return _toString.call(obj) === '[object Object]'
  }

  function isRegExp (v) {
    return _toString.call(v) === '[object RegExp]'
  }

  /**
   * Check if val is a valid array index.
   */
  function isValidArrayIndex (val) {
    var n = parseFloat(String(val));
    return n >= 0 && Math.floor(n) === n && isFinite(val)
  }

  function isPromise (val) {
    return (
      isDef(val) &&
      typeof val.then === 'function' &&
      typeof val.catch === 'function'
    )
  }

  /**
   * Convert a value to a string that is actually rendered.
   */
  function toString (val) {
    return val == null
      ? ''
      : Array.isArray(val) || (isPlainObject(val) && val.toString === _toString)
        ? JSON.stringify(val, null, 2)
        : String(val)
  }

  /**
   * Convert an input value to a number for persistence.
   * If the conversion fails, return original string.
   */
  function toNumber (val) {
    var n = parseFloat(val);
    return isNaN(n) ? val : n
  }

  /**
   * Make a map and return a function for checking if a key
   * is in that map.
   */
  function makeMap (
    str,
    expectsLowerCase
  ) {
    var map = Object.create(null);
    var list = str.split(',');
    for (var i = 0; i < list.length; i++) {
      map[list[i]] = true;
    }
    return expectsLowerCase
      ? function (val) { return map[val.toLowerCase()]; }
      : function (val) { return map[val]; }
  }

  /**
   * Check if a tag is a built-in tag.
   */
  var isBuiltInTag = makeMap('slot,component', true);

  /**
   * Check if an attribute is a reserved attribute.
   */
  var isReservedAttribute = makeMap('key,ref,slot,slot-scope,is');

  /**
   * Remove an item from an array.
   */
  function remove (arr, item) {
    if (arr.length) {
      var index = arr.indexOf(item);
      if (index > -1) {
        return arr.splice(index, 1)
      }
    }
  }

  /**
   * Check whether an object has the property.
   */
  var hasOwnProperty = Object.prototype.hasOwnProperty;
  function hasOwn (obj, key) {
    return hasOwnProperty.call(obj, key)
  }

  /**
   * Create a cached version of a pure function.
   */
  function cached (fn) {
    var cache = Object.create(null);
    return (function cachedFn (str) {
      var hit = cache[str];
      return hit || (cache[str] = fn(str))
    })
  }

  /**
   * Camelize a hyphen-delimited string.
   */
  var camelizeRE = /-(\w)/g;
  var camelize = cached(function (str) {
    return str.replace(camelizeRE, function (_, c) { return c ? c.toUpperCase() : ''; })
  });

  /**
   * Capitalize a string.
   */
  var capitalize = cached(function (str) {
    return str.charAt(0).toUpperCase() + str.slice(1)
  });

  /**
   * Hyphenate a camelCase string.
   */
  var hyphenateRE = /\B([A-Z])/g;
  var hyphenate = cached(function (str) {
    return str.replace(hyphenateRE, '-$1').toLowerCase()
  });

  /**
   * Simple bind polyfill for environments that do not support it,
   * e.g., PhantomJS 1.x. Technically, we don't need this anymore
   * since native bind is now performant enough in most browsers.
   * But removing it would mean breaking code that was able to run in
   * PhantomJS 1.x, so this must be kept for backward compatibility.
   */

  /* istanbul ignore next */
  function polyfillBind (fn, ctx) {
    function boundFn (a) {
      var l = arguments.length;
      return l
        ? l > 1
          ? fn.apply(ctx, arguments)
          : fn.call(ctx, a)
        : fn.call(ctx)
    }

    boundFn._length = fn.length;
    return boundFn
  }

  function nativeBind (fn, ctx) {
    return fn.bind(ctx)
  }

  var bind = Function.prototype.bind
    ? nativeBind
    : polyfillBind;

  /**
   * Convert an Array-like object to a real Array.
   */
  function toArray (list, start) {
    start = start || 0;
    var i = list.length - start;
    var ret = new Array(i);
    while (i--) {
      ret[i] = list[i + start];
    }
    return ret
  }

  /**
   * Mix properties into target object.
   */
  function extend (to, _from) {
    for (var key in _from) {
      to[key] = _from[key];
    }
    return to
  }

  /**
   * Merge an Array of Objects into a single Object.
   */
  function toObject (arr) {
    var res = {};
    for (var i = 0; i < arr.length; i++) {
      if (arr[i]) {
        extend(res, arr[i]);
      }
    }
    return res
  }

  /* eslint-disable no-unused-vars */

  /**
   * Perform no operation.
   * Stubbing args to make Flow happy without leaving useless transpiled code
   * with ...rest (https://flow.org/blog/2017/05/07/Strict-Function-Call-Arity/).
   */
  function noop (a, b, c) {}

  /**
   * Always return false.
   */
  var no = function (a, b, c) { return false; };

  /* eslint-enable no-unused-vars */

  /**
   * Return the same value.
   */
  var identity = function (_) { return _; };

  /**
   * Generate a string containing static keys from compiler modules.
   */
  function genStaticKeys (modules) {
    return modules.reduce(function (keys, m) {
      return keys.concat(m.staticKeys || [])
    }, []).join(',')
  }

  /**
   * Check if two values are loosely equal - that is,
   * if they are plain objects, do they have the same shape?
   */
  function looseEqual (a, b) {
    if (a === b) { return true }
    var isObjectA = isObject(a);
    var isObjectB = isObject(b);
    if (isObjectA && isObjectB) {
      try {
        var isArrayA = Array.isArray(a);
        var isArrayB = Array.isArray(b);
        if (isArrayA && isArrayB) {
          return a.length === b.length && a.every(function (e, i) {
            return looseEqual(e, b[i])
          })
        } else if (a instanceof Date && b instanceof Date) {
          return a.getTime() === b.getTime()
        } else if (!isArrayA && !isArrayB) {
          var keysA = Object.keys(a);
          var keysB = Object.keys(b);
          return keysA.length === keysB.length && keysA.every(function (key) {
            return looseEqual(a[key], b[key])
          })
        } else {
          /* istanbul ignore next */
          return false
        }
      } catch (e) {
        /* istanbul ignore next */
        return false
      }
    } else if (!isObjectA && !isObjectB) {
      return String(a) === String(b)
    } else {
      return false
    }
  }

  /**
   * Return the first index at which a loosely equal value can be
   * found in the array (if value is a plain object, the array must
   * contain an object of the same shape), or -1 if it is not present.
   */
  function looseIndexOf (arr, val) {
    for (var i = 0; i < arr.length; i++) {
      if (looseEqual(arr[i], val)) { return i }
    }
    return -1
  }

  /**
   * Ensure a function is called only once.
   */
  function once (fn) {
    var called = false;
    return function () {
      if (!called) {
        called = true;
        fn.apply(this, arguments);
      }
    }
  }

  var SSR_ATTR = 'data-server-rendered';

  var ASSET_TYPES = [
    'component',
    'directive',
    'filter'
  ];

  var LIFECYCLE_HOOKS = [
    'beforeCreate',
    'created',
    'beforeMount',
    'mounted',
    'beforeUpdate',
    'updated',
    'beforeDestroy',
    'destroyed',
    'activated',
    'deactivated',
    'errorCaptured',
    'serverPrefetch'
  ];

  /*  */



  var config = ({
    /**
     * Option merge strategies (used in core/util/options)
     */
    // $flow-disable-line
    optionMergeStrategies: Object.create(null),

    /**
     * Whether to suppress warnings.
     */
    silent: false,

    /**
     * Show production mode tip message on boot?
     */
    productionTip: "development" !== 'production',

    /**
     * Whether to enable devtools
     */
    devtools: "development" !== 'production',

    /**
     * Whether to record perf
     */
    performance: false,

    /**
     * Error handler for watcher errors
     */
    errorHandler: null,

    /**
     * Warn handler for watcher warns
     */
    warnHandler: null,

    /**
     * Ignore certain custom elements
     */
    ignoredElements: [],

    /**
     * Custom user key aliases for v-on
     */
    // $flow-disable-line
    keyCodes: Object.create(null),

    /**
     * Check if a tag is reserved so that it cannot be registered as a
     * component. This is platform-dependent and may be overwritten.
     */
    isReservedTag: no,

    /**
     * Check if an attribute is reserved so that it cannot be used as a component
     * prop. This is platform-dependent and may be overwritten.
     */
    isReservedAttr: no,

    /**
     * Check if a tag is an unknown element.
     * Platform-dependent.
     */
    isUnknownElement: no,

    /**
     * Get the namespace of an element
     */
    getTagNamespace: noop,

    /**
     * Parse the real tag name for the specific platform.
     */
    parsePlatformTagName: identity,

    /**
     * Check if an attribute must be bound using property, e.g. value
     * Platform-dependent.
     */
    mustUseProp: no,

    /**
     * Perform updates asynchronously. Intended to be used by Vue Test Utils
     * This will significantly reduce performance if set to false.
     */
    async: true,

    /**
     * Exposed for legacy reasons
     */
    _lifecycleHooks: LIFECYCLE_HOOKS
  });

  /*  */

  /**
   * unicode letters used for parsing html tags, component names and property paths.
   * using https://www.w3.org/TR/html53/semantics-scripting.html#potentialcustomelementname
   * skipping \u10000-\uEFFFF due to it freezing up PhantomJS
   */
  var unicodeRegExp = /a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;

  /**
   * Check if a string starts with $ or _
   */
  function isReserved (str) {
    var c = (str + '').charCodeAt(0);
    return c === 0x24 || c === 0x5F
  }

  /**
   * Define a property.
   */
  function def (obj, key, val, enumerable) {
    Object.defineProperty(obj, key, {
      value: val,
      enumerable: !!enumerable,
      writable: true,
      configurable: true
    });
  }

  /**
   * Parse simple path.
   */
  var bailRE = new RegExp(("[^" + (unicodeRegExp.source) + ".$_\\d]"));
  function parsePath (path) {
    if (bailRE.test(path)) {
      return
    }
    var segments = path.split('.');
    return function (obj) {
      for (var i = 0; i < segments.length; i++) {
        if (!obj) { return }
        obj = obj[segments[i]];
      }
      return obj
    }
  }

  /*  */

  // can we use __proto__?
  var hasProto = '__proto__' in {};

  // Browser environment sniffing
  var inBrowser = typeof window !== 'undefined';
  var inWeex = typeof WXEnvironment !== 'undefined' && !!WXEnvironment.platform;
  var weexPlatform = inWeex && WXEnvironment.platform.toLowerCase();
  var UA = inBrowser && window.navigator.userAgent.toLowerCase();
  var isIE = UA && /msie|trident/.test(UA);
  var isIE9 = UA && UA.indexOf('msie 9.0') > 0;
  var isEdge = UA && UA.indexOf('edge/') > 0;
  var isAndroid = (UA && UA.indexOf('android') > 0) || (weexPlatform === 'android');
  var isIOS = (UA && /iphone|ipad|ipod|ios/.test(UA)) || (weexPlatform === 'ios');
  var isChrome = UA && /chrome\/\d+/.test(UA) && !isEdge;
  var isPhantomJS = UA && /phantomjs/.test(UA);
  var isFF = UA && UA.match(/firefox\/(\d+)/);

  // Firefox has a "watch" function on Object.prototype...
  var nativeWatch = ({}).watch;

  var supportsPassive = false;
  if (inBrowser) {
    try {
      var opts = {};
      Object.defineProperty(opts, 'passive', ({
        get: function get () {
          /* istanbul ignore next */
          supportsPassive = true;
        }
      })); // https://github.com/facebook/flow/issues/285
      window.addEventListener('test-passive', null, opts);
    } catch (e) {}
  }

  // this needs to be lazy-evaled because vue may be required before
  // vue-server-renderer can set VUE_ENV
  var _isServer;
  var isServerRendering = function () {
    if (_isServer === undefined) {
      /* istanbul ignore if */
      if (!inBrowser && !inWeex && typeof global !== 'undefined') {
        // detect presence of vue-server-renderer and avoid
        // Webpack shimming the process
        _isServer = global['process'] && global['process'].env.VUE_ENV === 'server';
      } else {
        _isServer = false;
      }
    }
    return _isServer
  };

  // detect devtools
  var devtools = inBrowser && window.__VUE_DEVTOOLS_GLOBAL_HOOK__;

  /* istanbul ignore next */
  function isNative (Ctor) {
    return typeof Ctor === 'function' && /native code/.test(Ctor.toString())
  }

  var hasSymbol =
    typeof Symbol !== 'undefined' && isNative(Symbol) &&
    typeof Reflect !== 'undefined' && isNative(Reflect.ownKeys);

  var _Set;
  /* istanbul ignore if */ // $flow-disable-line
  if (typeof Set !== 'undefined' && isNative(Set)) {
    // use native Set when available.
    _Set = Set;
  } else {
    // a non-standard Set polyfill that only works with primitive keys.
    _Set = /*@__PURE__*/(function () {
      function Set () {
        this.set = Object.create(null);
      }
      Set.prototype.has = function has (key) {
        return this.set[key] === true
      };
      Set.prototype.add = function add (key) {
        this.set[key] = true;
      };
      Set.prototype.clear = function clear () {
        this.set = Object.create(null);
      };

      return Set;
    }());
  }

  /*  */

  var warn = noop;
  var tip = noop;
  var generateComponentTrace = (noop); // work around flow check
  var formatComponentName = (noop);

  {
    var hasConsole = typeof console !== 'undefined';
    var classifyRE = /(?:^|[-_])(\w)/g;
    var classify = function (str) { return str
      .replace(classifyRE, function (c) { return c.toUpperCase(); })
      .replace(/[-_]/g, ''); };

    warn = function (msg, vm) {
      var trace = vm ? generateComponentTrace(vm) : '';

      if (config.warnHandler) {
        config.warnHandler.call(null, msg, vm, trace);
      } else if (hasConsole && (!config.silent)) {
        console.error(("[Vue warn]: " + msg + trace));
      }
    };

    tip = function (msg, vm) {
      if (hasConsole && (!config.silent)) {
        console.warn("[Vue tip]: " + msg + (
          vm ? generateComponentTrace(vm) : ''
        ));
      }
    };

    formatComponentName = function (vm, includeFile) {
      if (vm.$root === vm) {
        return '<Root>'
      }
      var options = typeof vm === 'function' && vm.cid != null
        ? vm.options
        : vm._isVue
          ? vm.$options || vm.constructor.options
          : vm;
      var name = options.name || options._componentTag;
      var file = options.__file;
      if (!name && file) {
        var match = file.match(/([^/\\]+)\.vue$/);
        name = match && match[1];
      }

      return (
        (name ? ("<" + (classify(name)) + ">") : "<Anonymous>") +
        (file && includeFile !== false ? (" at " + file) : '')
      )
    };

    var repeat$1 = function (str, n) {
      var res = '';
      while (n) {
        if (n % 2 === 1) { res += str; }
        if (n > 1) { str += str; }
        n >>= 1;
      }
      return res
    };

    generateComponentTrace = function (vm) {
      if (vm._isVue && vm.$parent) {
        var tree = [];
        var currentRecursiveSequence = 0;
        while (vm) {
          if (tree.length > 0) {
            var last = tree[tree.length - 1];
            if (last.constructor === vm.constructor) {
              currentRecursiveSequence++;
              vm = vm.$parent;
              continue
            } else if (currentRecursiveSequence > 0) {
              tree[tree.length - 1] = [last, currentRecursiveSequence];
              currentRecursiveSequence = 0;
            }
          }
          tree.push(vm);
          vm = vm.$parent;
        }
        return '\n\nfound in\n\n' + tree
          .map(function (vm, i) { return ("" + (i === 0 ? '---> ' : repeat$1(' ', 5 + i * 2)) + (Array.isArray(vm)
              ? ((formatComponentName(vm[0])) + "... (" + (vm[1]) + " recursive calls)")
              : formatComponentName(vm))); })
          .join('\n')
      } else {
        return ("\n\n(found in " + (formatComponentName(vm)) + ")")
      }
    };
  }

  /*  */

  var uid = 0;

  /**
   * A dep is an observable that can have multiple
   * directives subscribing to it.
   */
  var Dep = function Dep () {
    this.id = uid++;
    this.subs = [];
  };

  Dep.prototype.addSub = function addSub (sub) {
    this.subs.push(sub);
  };

  Dep.prototype.removeSub = function removeSub (sub) {
    remove(this.subs, sub);
  };

  Dep.prototype.depend = function depend () {
    if (Dep.target) {
      Dep.target.addDep(this);
    }
  };

  Dep.prototype.notify = function notify () {
    // stabilize the subscriber list first
    var subs = this.subs.slice();
    if (!config.async) {
      // subs aren't sorted in scheduler if not running async
      // we need to sort them now to make sure they fire in correct
      // order
      subs.sort(function (a, b) { return a.id - b.id; });
    }
    for (var i = 0, l = subs.length; i < l; i++) {
      subs[i].update();
    }
  };

  // The current target watcher being evaluated.
  // This is globally unique because only one watcher
  // can be evaluated at a time.
  Dep.target = null;
  var targetStack = [];

  function pushTarget (target) {
    targetStack.push(target);
    Dep.target = target;
  }

  function popTarget () {
    targetStack.pop();
    Dep.target = targetStack[targetStack.length - 1];
  }

  /*  */

  var VNode = function VNode (
    tag,
    data,
    children,
    text,
    elm,
    context,
    componentOptions,
    asyncFactory
  ) {
    this.tag = tag;
    this.data = data;
    this.children = children;
    this.text = text;
    this.elm = elm;
    this.ns = undefined;
    this.context = context;
    this.fnContext = undefined;
    this.fnOptions = undefined;
    this.fnScopeId = undefined;
    this.key = data && data.key;
    this.componentOptions = componentOptions;
    this.componentInstance = undefined;
    this.parent = undefined;
    this.raw = false;
    this.isStatic = false;
    this.isRootInsert = true;
    this.isComment = false;
    this.isCloned = false;
    this.isOnce = false;
    this.asyncFactory = asyncFactory;
    this.asyncMeta = undefined;
    this.isAsyncPlaceholder = false;
  };

  var prototypeAccessors = { child: { configurable: true } };

  // DEPRECATED: alias for componentInstance for backwards compat.
  /* istanbul ignore next */
  prototypeAccessors.child.get = function () {
    return this.componentInstance
  };

  Object.defineProperties( VNode.prototype, prototypeAccessors );

  var createEmptyVNode = function (text) {
    if ( text === void 0 ) text = '';

    var node = new VNode();
    node.text = text;
    node.isComment = true;
    return node
  };

  function createTextVNode (val) {
    return new VNode(undefined, undefined, undefined, String(val))
  }

  // optimized shallow clone
  // used for static nodes and slot nodes because they may be reused across
  // multiple renders, cloning them avoids errors when DOM manipulations rely
  // on their elm reference.
  function cloneVNode (vnode) {
    var cloned = new VNode(
      vnode.tag,
      vnode.data,
      // #7975
      // clone children array to avoid mutating original in case of cloning
      // a child.
      vnode.children && vnode.children.slice(),
      vnode.text,
      vnode.elm,
      vnode.context,
      vnode.componentOptions,
      vnode.asyncFactory
    );
    cloned.ns = vnode.ns;
    cloned.isStatic = vnode.isStatic;
    cloned.key = vnode.key;
    cloned.isComment = vnode.isComment;
    cloned.fnContext = vnode.fnContext;
    cloned.fnOptions = vnode.fnOptions;
    cloned.fnScopeId = vnode.fnScopeId;
    cloned.asyncMeta = vnode.asyncMeta;
    cloned.isCloned = true;
    return cloned
  }

  /*
   * not type checking this file because flow doesn't play well with
   * dynamically accessing methods on Array prototype
   */

  var arrayProto = Array.prototype;
  var arrayMethods = Object.create(arrayProto);

  var methodsToPatch = [
    'push',
    'pop',
    'shift',
    'unshift',
    'splice',
    'sort',
    'reverse'
  ];

  /**
   * Intercept mutating methods and emit events
   */
  methodsToPatch.forEach(function (method) {
    // cache original method
    var original = arrayProto[method];
    def(arrayMethods, method, function mutator () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];

      var result = original.apply(this, args);
      var ob = this.__ob__;
      var inserted;
      switch (method) {
        case 'push':
        case 'unshift':
          inserted = args;
          break
        case 'splice':
          inserted = args.slice(2);
          break
      }
      if (inserted) { ob.observeArray(inserted); }
      // notify change
      ob.dep.notify();
      return result
    });
  });

  /*  */

  var arrayKeys = Object.getOwnPropertyNames(arrayMethods);

  /**
   * In some cases we may want to disable observation inside a component's
   * update computation.
   */
  var shouldObserve = true;

  function toggleObserving (value) {
    shouldObserve = value;
  }

  /**
   * Observer class that is attached to each observed
   * object. Once attached, the observer converts the target
   * object's property keys into getter/setters that
   * collect dependencies and dispatch updates.
   */
  var Observer = function Observer (value) {
    this.value = value;
    this.dep = new Dep();
    this.vmCount = 0;
    def(value, '__ob__', this);
    if (Array.isArray(value)) {
      if (hasProto) {
        protoAugment(value, arrayMethods);
      } else {
        copyAugment(value, arrayMethods, arrayKeys);
      }
      this.observeArray(value);
    } else {
      this.walk(value);
    }
  };

  /**
   * Walk through all properties and convert them into
   * getter/setters. This method should only be called when
   * value type is Object.
   */
  Observer.prototype.walk = function walk (obj) {
    var keys = Object.keys(obj);
    for (var i = 0; i < keys.length; i++) {
      defineReactive$$1(obj, keys[i]);
    }
  };

  /**
   * Observe a list of Array items.
   */
  Observer.prototype.observeArray = function observeArray (items) {
    for (var i = 0, l = items.length; i < l; i++) {
      observe(items[i]);
    }
  };

  // helpers

  /**
   * Augment a target Object or Array by intercepting
   * the prototype chain using __proto__
   */
  function protoAugment (target, src) {
    /* eslint-disable no-proto */
    target.__proto__ = src;
    /* eslint-enable no-proto */
  }

  /**
   * Augment a target Object or Array by defining
   * hidden properties.
   */
  /* istanbul ignore next */
  function copyAugment (target, src, keys) {
    for (var i = 0, l = keys.length; i < l; i++) {
      var key = keys[i];
      def(target, key, src[key]);
    }
  }

  /**
   * Attempt to create an observer instance for a value,
   * returns the new observer if successfully observed,
   * or the existing observer if the value already has one.
   */
  function observe (value, asRootData) {
    if (!isObject(value) || value instanceof VNode) {
      return
    }
    var ob;
    if (hasOwn(value, '__ob__') && value.__ob__ instanceof Observer) {
      ob = value.__ob__;
    } else if (
      shouldObserve &&
      !isServerRendering() &&
      (Array.isArray(value) || isPlainObject(value)) &&
      Object.isExtensible(value) &&
      !value._isVue
    ) {
      ob = new Observer(value);
    }
    if (asRootData && ob) {
      ob.vmCount++;
    }
    return ob
  }

  /**
   * Define a reactive property on an Object.
   */
  function defineReactive$$1 (
    obj,
    key,
    val,
    customSetter,
    shallow
  ) {
    var dep = new Dep();

    var property = Object.getOwnPropertyDescriptor(obj, key);
    if (property && property.configurable === false) {
      return
    }

    // cater for pre-defined getter/setters
    var getter = property && property.get;
    var setter = property && property.set;
    if ((!getter || setter) && arguments.length === 2) {
      val = obj[key];
    }

    var childOb = !shallow && observe(val);
    Object.defineProperty(obj, key, {
      enumerable: true,
      configurable: true,
      get: function reactiveGetter () {
        var value = getter ? getter.call(obj) : val;
        if (Dep.target) {
          dep.depend();
          if (childOb) {
            childOb.dep.depend();
            if (Array.isArray(value)) {
              dependArray(value);
            }
          }
        }
        return value
      },
      set: function reactiveSetter (newVal) {
        var value = getter ? getter.call(obj) : val;
        /* eslint-disable no-self-compare */
        if (newVal === value || (newVal !== newVal && value !== value)) {
          return
        }
        /* eslint-enable no-self-compare */
        if (customSetter) {
          customSetter();
        }
        // #7981: for accessor properties without setter
        if (getter && !setter) { return }
        if (setter) {
          setter.call(obj, newVal);
        } else {
          val = newVal;
        }
        childOb = !shallow && observe(newVal);
        dep.notify();
      }
    });
  }

  /**
   * Set a property on an object. Adds the new property and
   * triggers change notification if the property doesn't
   * already exist.
   */
  function set (target, key, val) {
    if (isUndef(target) || isPrimitive(target)
    ) {
      warn(("Cannot set reactive property on undefined, null, or primitive value: " + ((target))));
    }
    if (Array.isArray(target) && isValidArrayIndex(key)) {
      target.length = Math.max(target.length, key);
      target.splice(key, 1, val);
      return val
    }
    if (key in target && !(key in Object.prototype)) {
      target[key] = val;
      return val
    }
    var ob = (target).__ob__;
    if (target._isVue || (ob && ob.vmCount)) {
      warn(
        'Avoid adding reactive properties to a Vue instance or its root $data ' +
        'at runtime - declare it upfront in the data option.'
      );
      return val
    }
    if (!ob) {
      target[key] = val;
      return val
    }
    defineReactive$$1(ob.value, key, val);
    ob.dep.notify();
    return val
  }

  /**
   * Delete a property and trigger change if necessary.
   */
  function del (target, key) {
    if (isUndef(target) || isPrimitive(target)
    ) {
      warn(("Cannot delete reactive property on undefined, null, or primitive value: " + ((target))));
    }
    if (Array.isArray(target) && isValidArrayIndex(key)) {
      target.splice(key, 1);
      return
    }
    var ob = (target).__ob__;
    if (target._isVue || (ob && ob.vmCount)) {
      warn(
        'Avoid deleting properties on a Vue instance or its root $data ' +
        '- just set it to null.'
      );
      return
    }
    if (!hasOwn(target, key)) {
      return
    }
    delete target[key];
    if (!ob) {
      return
    }
    ob.dep.notify();
  }

  /**
   * Collect dependencies on array elements when the array is touched, since
   * we cannot intercept array element access like property getters.
   */
  function dependArray (value) {
    for (var e = (void 0), i = 0, l = value.length; i < l; i++) {
      e = value[i];
      e && e.__ob__ && e.__ob__.dep.depend();
      if (Array.isArray(e)) {
        dependArray(e);
      }
    }
  }

  /*  */

  /**
   * Option overwriting strategies are functions that handle
   * how to merge a parent option value and a child option
   * value into the final value.
   */
  var strats = config.optionMergeStrategies;

  /**
   * Options with restrictions
   */
  {
    strats.el = strats.propsData = function (parent, child, vm, key) {
      if (!vm) {
        warn(
          "option \"" + key + "\" can only be used during instance " +
          'creation with the `new` keyword.'
        );
      }
      return defaultStrat(parent, child)
    };
  }

  /**
   * Helper that recursively merges two data objects together.
   */
  function mergeData (to, from) {
    if (!from) { return to }
    var key, toVal, fromVal;

    var keys = hasSymbol
      ? Reflect.ownKeys(from)
      : Object.keys(from);

    for (var i = 0; i < keys.length; i++) {
      key = keys[i];
      // in case the object is already observed...
      if (key === '__ob__') { continue }
      toVal = to[key];
      fromVal = from[key];
      if (!hasOwn(to, key)) {
        set(to, key, fromVal);
      } else if (
        toVal !== fromVal &&
        isPlainObject(toVal) &&
        isPlainObject(fromVal)
      ) {
        mergeData(toVal, fromVal);
      }
    }
    return to
  }

  /**
   * Data
   */
  function mergeDataOrFn (
    parentVal,
    childVal,
    vm
  ) {
    if (!vm) {
      // in a Vue.extend merge, both should be functions
      if (!childVal) {
        return parentVal
      }
      if (!parentVal) {
        return childVal
      }
      // when parentVal & childVal are both present,
      // we need to return a function that returns the
      // merged result of both functions... no need to
      // check if parentVal is a function here because
      // it has to be a function to pass previous merges.
      return function mergedDataFn () {
        return mergeData(
          typeof childVal === 'function' ? childVal.call(this, this) : childVal,
          typeof parentVal === 'function' ? parentVal.call(this, this) : parentVal
        )
      }
    } else {
      return function mergedInstanceDataFn () {
        // instance merge
        var instanceData = typeof childVal === 'function'
          ? childVal.call(vm, vm)
          : childVal;
        var defaultData = typeof parentVal === 'function'
          ? parentVal.call(vm, vm)
          : parentVal;
        if (instanceData) {
          return mergeData(instanceData, defaultData)
        } else {
          return defaultData
        }
      }
    }
  }

  strats.data = function (
    parentVal,
    childVal,
    vm
  ) {
    if (!vm) {
      if (childVal && typeof childVal !== 'function') {
        warn(
          'The "data" option should be a function ' +
          'that returns a per-instance value in component ' +
          'definitions.',
          vm
        );

        return parentVal
      }
      return mergeDataOrFn(parentVal, childVal)
    }

    return mergeDataOrFn(parentVal, childVal, vm)
  };

  /**
   * Hooks and props are merged as arrays.
   */
  function mergeHook (
    parentVal,
    childVal
  ) {
    var res = childVal
      ? parentVal
        ? parentVal.concat(childVal)
        : Array.isArray(childVal)
          ? childVal
          : [childVal]
      : parentVal;
    return res
      ? dedupeHooks(res)
      : res
  }

  function dedupeHooks (hooks) {
    var res = [];
    for (var i = 0; i < hooks.length; i++) {
      if (res.indexOf(hooks[i]) === -1) {
        res.push(hooks[i]);
      }
    }
    return res
  }

  LIFECYCLE_HOOKS.forEach(function (hook) {
    strats[hook] = mergeHook;
  });

  /**
   * Assets
   *
   * When a vm is present (instance creation), we need to do
   * a three-way merge between constructor options, instance
   * options and parent options.
   */
  function mergeAssets (
    parentVal,
    childVal,
    vm,
    key
  ) {
    var res = Object.create(parentVal || null);
    if (childVal) {
      assertObjectType(key, childVal, vm);
      return extend(res, childVal)
    } else {
      return res
    }
  }

  ASSET_TYPES.forEach(function (type) {
    strats[type + 's'] = mergeAssets;
  });

  /**
   * Watchers.
   *
   * Watchers hashes should not overwrite one
   * another, so we merge them as arrays.
   */
  strats.watch = function (
    parentVal,
    childVal,
    vm,
    key
  ) {
    // work around Firefox's Object.prototype.watch...
    if (parentVal === nativeWatch) { parentVal = undefined; }
    if (childVal === nativeWatch) { childVal = undefined; }
    /* istanbul ignore if */
    if (!childVal) { return Object.create(parentVal || null) }
    {
      assertObjectType(key, childVal, vm);
    }
    if (!parentVal) { return childVal }
    var ret = {};
    extend(ret, parentVal);
    for (var key$1 in childVal) {
      var parent = ret[key$1];
      var child = childVal[key$1];
      if (parent && !Array.isArray(parent)) {
        parent = [parent];
      }
      ret[key$1] = parent
        ? parent.concat(child)
        : Array.isArray(child) ? child : [child];
    }
    return ret
  };

  /**
   * Other object hashes.
   */
  strats.props =
  strats.methods =
  strats.inject =
  strats.computed = function (
    parentVal,
    childVal,
    vm,
    key
  ) {
    if (childVal && "development" !== 'production') {
      assertObjectType(key, childVal, vm);
    }
    if (!parentVal) { return childVal }
    var ret = Object.create(null);
    extend(ret, parentVal);
    if (childVal) { extend(ret, childVal); }
    return ret
  };
  strats.provide = mergeDataOrFn;

  /**
   * Default strategy.
   */
  var defaultStrat = function (parentVal, childVal) {
    return childVal === undefined
      ? parentVal
      : childVal
  };

  /**
   * Validate component names
   */
  function checkComponents (options) {
    for (var key in options.components) {
      validateComponentName(key);
    }
  }

  function validateComponentName (name) {
    if (!new RegExp(("^[a-zA-Z][\\-\\.0-9_" + (unicodeRegExp.source) + "]*$")).test(name)) {
      warn(
        'Invalid component name: "' + name + '". Component names ' +
        'should conform to valid custom element name in html5 specification.'
      );
    }
    if (isBuiltInTag(name) || config.isReservedTag(name)) {
      warn(
        'Do not use built-in or reserved HTML elements as component ' +
        'id: ' + name
      );
    }
  }

  /**
   * Ensure all props option syntax are normalized into the
   * Object-based format.
   */
  function normalizeProps (options, vm) {
    var props = options.props;
    if (!props) { return }
    var res = {};
    var i, val, name;
    if (Array.isArray(props)) {
      i = props.length;
      while (i--) {
        val = props[i];
        if (typeof val === 'string') {
          name = camelize(val);
          res[name] = { type: null };
        } else {
          warn('props must be strings when using array syntax.');
        }
      }
    } else if (isPlainObject(props)) {
      for (var key in props) {
        val = props[key];
        name = camelize(key);
        res[name] = isPlainObject(val)
          ? val
          : { type: val };
      }
    } else {
      warn(
        "Invalid value for option \"props\": expected an Array or an Object, " +
        "but got " + (toRawType(props)) + ".",
        vm
      );
    }
    options.props = res;
  }

  /**
   * Normalize all injections into Object-based format
   */
  function normalizeInject (options, vm) {
    var inject = options.inject;
    if (!inject) { return }
    var normalized = options.inject = {};
    if (Array.isArray(inject)) {
      for (var i = 0; i < inject.length; i++) {
        normalized[inject[i]] = { from: inject[i] };
      }
    } else if (isPlainObject(inject)) {
      for (var key in inject) {
        var val = inject[key];
        normalized[key] = isPlainObject(val)
          ? extend({ from: key }, val)
          : { from: val };
      }
    } else {
      warn(
        "Invalid value for option \"inject\": expected an Array or an Object, " +
        "but got " + (toRawType(inject)) + ".",
        vm
      );
    }
  }

  /**
   * Normalize raw function directives into object format.
   */
  function normalizeDirectives (options) {
    var dirs = options.directives;
    if (dirs) {
      for (var key in dirs) {
        var def$$1 = dirs[key];
        if (typeof def$$1 === 'function') {
          dirs[key] = { bind: def$$1, update: def$$1 };
        }
      }
    }
  }

  function assertObjectType (name, value, vm) {
    if (!isPlainObject(value)) {
      warn(
        "Invalid value for option \"" + name + "\": expected an Object, " +
        "but got " + (toRawType(value)) + ".",
        vm
      );
    }
  }

  /**
   * Merge two option objects into a new one.
   * Core utility used in both instantiation and inheritance.
   */
  function mergeOptions (
    parent,
    child,
    vm
  ) {
    {
      checkComponents(child);
    }

    if (typeof child === 'function') {
      child = child.options;
    }

    normalizeProps(child, vm);
    normalizeInject(child, vm);
    normalizeDirectives(child);

    // Apply extends and mixins on the child options,
    // but only if it is a raw options object that isn't
    // the result of another mergeOptions call.
    // Only merged options has the _base property.
    if (!child._base) {
      if (child.extends) {
        parent = mergeOptions(parent, child.extends, vm);
      }
      if (child.mixins) {
        for (var i = 0, l = child.mixins.length; i < l; i++) {
          parent = mergeOptions(parent, child.mixins[i], vm);
        }
      }
    }

    var options = {};
    var key;
    for (key in parent) {
      mergeField(key);
    }
    for (key in child) {
      if (!hasOwn(parent, key)) {
        mergeField(key);
      }
    }
    function mergeField (key) {
      var strat = strats[key] || defaultStrat;
      options[key] = strat(parent[key], child[key], vm, key);
    }
    return options
  }

  /**
   * Resolve an asset.
   * This function is used because child instances need access
   * to assets defined in its ancestor chain.
   */
  function resolveAsset (
    options,
    type,
    id,
    warnMissing
  ) {
    /* istanbul ignore if */
    if (typeof id !== 'string') {
      return
    }
    var assets = options[type];
    // check local registration variations first
    if (hasOwn(assets, id)) { return assets[id] }
    var camelizedId = camelize(id);
    if (hasOwn(assets, camelizedId)) { return assets[camelizedId] }
    var PascalCaseId = capitalize(camelizedId);
    if (hasOwn(assets, PascalCaseId)) { return assets[PascalCaseId] }
    // fallback to prototype chain
    var res = assets[id] || assets[camelizedId] || assets[PascalCaseId];
    if (warnMissing && !res) {
      warn(
        'Failed to resolve ' + type.slice(0, -1) + ': ' + id,
        options
      );
    }
    return res
  }

  /*  */



  function validateProp (
    key,
    propOptions,
    propsData,
    vm
  ) {
    var prop = propOptions[key];
    var absent = !hasOwn(propsData, key);
    var value = propsData[key];
    // boolean casting
    var booleanIndex = getTypeIndex(Boolean, prop.type);
    if (booleanIndex > -1) {
      if (absent && !hasOwn(prop, 'default')) {
        value = false;
      } else if (value === '' || value === hyphenate(key)) {
        // only cast empty string / same name to boolean if
        // boolean has higher priority
        var stringIndex = getTypeIndex(String, prop.type);
        if (stringIndex < 0 || booleanIndex < stringIndex) {
          value = true;
        }
      }
    }
    // check default value
    if (value === undefined) {
      value = getPropDefaultValue(vm, prop, key);
      // since the default value is a fresh copy,
      // make sure to observe it.
      var prevShouldObserve = shouldObserve;
      toggleObserving(true);
      observe(value);
      toggleObserving(prevShouldObserve);
    }
    {
      assertProp(prop, key, value, vm, absent);
    }
    return value
  }

  /**
   * Get the default value of a prop.
   */
  function getPropDefaultValue (vm, prop, key) {
    // no default, return undefined
    if (!hasOwn(prop, 'default')) {
      return undefined
    }
    var def = prop.default;
    // warn against non-factory defaults for Object & Array
    if (isObject(def)) {
      warn(
        'Invalid default value for prop "' + key + '": ' +
        'Props with type Object/Array must use a factory function ' +
        'to return the default value.',
        vm
      );
    }
    // the raw prop value was also undefined from previous render,
    // return previous default value to avoid unnecessary watcher trigger
    if (vm && vm.$options.propsData &&
      vm.$options.propsData[key] === undefined &&
      vm._props[key] !== undefined
    ) {
      return vm._props[key]
    }
    // call factory function for non-Function types
    // a value is Function if its prototype is function even across different execution context
    return typeof def === 'function' && getType(prop.type) !== 'Function'
      ? def.call(vm)
      : def
  }

  /**
   * Assert whether a prop is valid.
   */
  function assertProp (
    prop,
    name,
    value,
    vm,
    absent
  ) {
    if (prop.required && absent) {
      warn(
        'Missing required prop: "' + name + '"',
        vm
      );
      return
    }
    if (value == null && !prop.required) {
      return
    }
    var type = prop.type;
    var valid = !type || type === true;
    var expectedTypes = [];
    if (type) {
      if (!Array.isArray(type)) {
        type = [type];
      }
      for (var i = 0; i < type.length && !valid; i++) {
        var assertedType = assertType(value, type[i]);
        expectedTypes.push(assertedType.expectedType || '');
        valid = assertedType.valid;
      }
    }

    if (!valid) {
      warn(
        getInvalidTypeMessage(name, value, expectedTypes),
        vm
      );
      return
    }
    var validator = prop.validator;
    if (validator) {
      if (!validator(value)) {
        warn(
          'Invalid prop: custom validator check failed for prop "' + name + '".',
          vm
        );
      }
    }
  }

  var simpleCheckRE = /^(String|Number|Boolean|Function|Symbol)$/;

  function assertType (value, type) {
    var valid;
    var expectedType = getType(type);
    if (simpleCheckRE.test(expectedType)) {
      var t = typeof value;
      valid = t === expectedType.toLowerCase();
      // for primitive wrapper objects
      if (!valid && t === 'object') {
        valid = value instanceof type;
      }
    } else if (expectedType === 'Object') {
      valid = isPlainObject(value);
    } else if (expectedType === 'Array') {
      valid = Array.isArray(value);
    } else {
      valid = value instanceof type;
    }
    return {
      valid: valid,
      expectedType: expectedType
    }
  }

  /**
   * Use function string name to check built-in types,
   * because a simple equality check will fail when running
   * across different vms / iframes.
   */
  function getType (fn) {
    var match = fn && fn.toString().match(/^\s*function (\w+)/);
    return match ? match[1] : ''
  }

  function isSameType (a, b) {
    return getType(a) === getType(b)
  }

  function getTypeIndex (type, expectedTypes) {
    if (!Array.isArray(expectedTypes)) {
      return isSameType(expectedTypes, type) ? 0 : -1
    }
    for (var i = 0, len = expectedTypes.length; i < len; i++) {
      if (isSameType(expectedTypes[i], type)) {
        return i
      }
    }
    return -1
  }

  function getInvalidTypeMessage (name, value, expectedTypes) {
    var message = "Invalid prop: type check failed for prop \"" + name + "\"." +
      " Expected " + (expectedTypes.map(capitalize).join(', '));
    var expectedType = expectedTypes[0];
    var receivedType = toRawType(value);
    var expectedValue = styleValue(value, expectedType);
    var receivedValue = styleValue(value, receivedType);
    // check if we need to specify expected value
    if (expectedTypes.length === 1 &&
        isExplicable(expectedType) &&
        !isBoolean(expectedType, receivedType)) {
      message += " with value " + expectedValue;
    }
    message += ", got " + receivedType + " ";
    // check if we need to specify received value
    if (isExplicable(receivedType)) {
      message += "with value " + receivedValue + ".";
    }
    return message
  }

  function styleValue (value, type) {
    if (type === 'String') {
      return ("\"" + value + "\"")
    } else if (type === 'Number') {
      return ("" + (Number(value)))
    } else {
      return ("" + value)
    }
  }

  function isExplicable (value) {
    var explicitTypes = ['string', 'number', 'boolean'];
    return explicitTypes.some(function (elem) { return value.toLowerCase() === elem; })
  }

  function isBoolean () {
    var args = [], len = arguments.length;
    while ( len-- ) args[ len ] = arguments[ len ];

    return args.some(function (elem) { return elem.toLowerCase() === 'boolean'; })
  }

  /*  */

  function handleError (err, vm, info) {
    // Deactivate deps tracking while processing error handler to avoid possible infinite rendering.
    // See: https://github.com/vuejs/vuex/issues/1505
    pushTarget();
    try {
      if (vm) {
        var cur = vm;
        while ((cur = cur.$parent)) {
          var hooks = cur.$options.errorCaptured;
          if (hooks) {
            for (var i = 0; i < hooks.length; i++) {
              try {
                var capture = hooks[i].call(cur, err, vm, info) === false;
                if (capture) { return }
              } catch (e) {
                globalHandleError(e, cur, 'errorCaptured hook');
              }
            }
          }
        }
      }
      globalHandleError(err, vm, info);
    } finally {
      popTarget();
    }
  }

  function invokeWithErrorHandling (
    handler,
    context,
    args,
    vm,
    info
  ) {
    var res;
    try {
      res = args ? handler.apply(context, args) : handler.call(context);
      if (res && !res._isVue && isPromise(res) && !res._handled) {
        res.catch(function (e) { return handleError(e, vm, info + " (Promise/async)"); });
        // issue #9511
        // avoid catch triggering multiple times when nested calls
        res._handled = true;
      }
    } catch (e) {
      handleError(e, vm, info);
    }
    return res
  }

  function globalHandleError (err, vm, info) {
    if (config.errorHandler) {
      try {
        return config.errorHandler.call(null, err, vm, info)
      } catch (e) {
        // if the user intentionally throws the original error in the handler,
        // do not log it twice
        if (e !== err) {
          logError(e, null, 'config.errorHandler');
        }
      }
    }
    logError(err, vm, info);
  }

  function logError (err, vm, info) {
    {
      warn(("Error in " + info + ": \"" + (err.toString()) + "\""), vm);
    }
    /* istanbul ignore else */
    if ((inBrowser || inWeex) && typeof console !== 'undefined') {
      console.error(err);
    } else {
      throw err
    }
  }

  /*  */

  var isUsingMicroTask = false;

  var callbacks = [];
  var pending = false;

  function flushCallbacks () {
    pending = false;
    var copies = callbacks.slice(0);
    callbacks.length = 0;
    for (var i = 0; i < copies.length; i++) {
      copies[i]();
    }
  }

  // Here we have async deferring wrappers using microtasks.
  // In 2.5 we used (macro) tasks (in combination with microtasks).
  // However, it has subtle problems when state is changed right before repaint
  // (e.g. #6813, out-in transitions).
  // Also, using (macro) tasks in event handler would cause some weird behaviors
  // that cannot be circumvented (e.g. #7109, #7153, #7546, #7834, #8109).
  // So we now use microtasks everywhere, again.
  // A major drawback of this tradeoff is that there are some scenarios
  // where microtasks have too high a priority and fire in between supposedly
  // sequential events (e.g. #4521, #6690, which have workarounds)
  // or even between bubbling of the same event (#6566).
  var timerFunc;

  // The nextTick behavior leverages the microtask queue, which can be accessed
  // via either native Promise.then or MutationObserver.
  // MutationObserver has wider support, however it is seriously bugged in
  // UIWebView in iOS >= 9.3.3 when triggered in touch event handlers. It
  // completely stops working after triggering a few times... so, if native
  // Promise is available, we will use it:
  /* istanbul ignore next, $flow-disable-line */
  if (typeof Promise !== 'undefined' && isNative(Promise)) {
    var p = Promise.resolve();
    timerFunc = function () {
      p.then(flushCallbacks);
      // In problematic UIWebViews, Promise.then doesn't completely break, but
      // it can get stuck in a weird state where callbacks are pushed into the
      // microtask queue but the queue isn't being flushed, until the browser
      // needs to do some other work, e.g. handle a timer. Therefore we can
      // "force" the microtask queue to be flushed by adding an empty timer.
      if (isIOS) { setTimeout(noop); }
    };
    isUsingMicroTask = true;
  } else if (!isIE && typeof MutationObserver !== 'undefined' && (
    isNative(MutationObserver) ||
    // PhantomJS and iOS 7.x
    MutationObserver.toString() === '[object MutationObserverConstructor]'
  )) {
    // Use MutationObserver where native Promise is not available,
    // e.g. PhantomJS, iOS7, Android 4.4
    // (#6466 MutationObserver is unreliable in IE11)
    var counter = 1;
    var observer = new MutationObserver(flushCallbacks);
    var textNode = document.createTextNode(String(counter));
    observer.observe(textNode, {
      characterData: true
    });
    timerFunc = function () {
      counter = (counter + 1) % 2;
      textNode.data = String(counter);
    };
    isUsingMicroTask = true;
  } else if (typeof setImmediate !== 'undefined' && isNative(setImmediate)) {
    // Fallback to setImmediate.
    // Techinically it leverages the (macro) task queue,
    // but it is still a better choice than setTimeout.
    timerFunc = function () {
      setImmediate(flushCallbacks);
    };
  } else {
    // Fallback to setTimeout.
    timerFunc = function () {
      setTimeout(flushCallbacks, 0);
    };
  }

  function nextTick (cb, ctx) {
    var _resolve;
    callbacks.push(function () {
      if (cb) {
        try {
          cb.call(ctx);
        } catch (e) {
          handleError(e, ctx, 'nextTick');
        }
      } else if (_resolve) {
        _resolve(ctx);
      }
    });
    if (!pending) {
      pending = true;
      timerFunc();
    }
    // $flow-disable-line
    if (!cb && typeof Promise !== 'undefined') {
      return new Promise(function (resolve) {
        _resolve = resolve;
      })
    }
  }

  /*  */

  var mark;
  var measure;

  {
    var perf = inBrowser && window.performance;
    /* istanbul ignore if */
    if (
      perf &&
      perf.mark &&
      perf.measure &&
      perf.clearMarks &&
      perf.clearMeasures
    ) {
      mark = function (tag) { return perf.mark(tag); };
      measure = function (name, startTag, endTag) {
        perf.measure(name, startTag, endTag);
        perf.clearMarks(startTag);
        perf.clearMarks(endTag);
        // perf.clearMeasures(name)
      };
    }
  }

  /* not type checking this file because flow doesn't play well with Proxy */

  var initProxy;

  {
    var allowedGlobals = makeMap(
      'Infinity,undefined,NaN,isFinite,isNaN,' +
      'parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,' +
      'Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,' +
      'require' // for Webpack/Browserify
    );

    var warnNonPresent = function (target, key) {
      warn(
        "Property or method \"" + key + "\" is not defined on the instance but " +
        'referenced during render. Make sure that this property is reactive, ' +
        'either in the data option, or for class-based components, by ' +
        'initializing the property. ' +
        'See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',
        target
      );
    };

    var warnReservedPrefix = function (target, key) {
      warn(
        "Property \"" + key + "\" must be accessed with \"$data." + key + "\" because " +
        'properties starting with "$" or "_" are not proxied in the Vue instance to ' +
        'prevent conflicts with Vue internals' +
        'See: https://vuejs.org/v2/api/#data',
        target
      );
    };

    var hasProxy =
      typeof Proxy !== 'undefined' && isNative(Proxy);

    if (hasProxy) {
      var isBuiltInModifier = makeMap('stop,prevent,self,ctrl,shift,alt,meta,exact');
      config.keyCodes = new Proxy(config.keyCodes, {
        set: function set (target, key, value) {
          if (isBuiltInModifier(key)) {
            warn(("Avoid overwriting built-in modifier in config.keyCodes: ." + key));
            return false
          } else {
            target[key] = value;
            return true
          }
        }
      });
    }

    var hasHandler = {
      has: function has (target, key) {
        var has = key in target;
        var isAllowed = allowedGlobals(key) ||
          (typeof key === 'string' && key.charAt(0) === '_' && !(key in target.$data));
        if (!has && !isAllowed) {
          if (key in target.$data) { warnReservedPrefix(target, key); }
          else { warnNonPresent(target, key); }
        }
        return has || !isAllowed
      }
    };

    var getHandler = {
      get: function get (target, key) {
        if (typeof key === 'string' && !(key in target)) {
          if (key in target.$data) { warnReservedPrefix(target, key); }
          else { warnNonPresent(target, key); }
        }
        return target[key]
      }
    };

    initProxy = function initProxy (vm) {
      if (hasProxy) {
        // determine which proxy handler to use
        var options = vm.$options;
        var handlers = options.render && options.render._withStripped
          ? getHandler
          : hasHandler;
        vm._renderProxy = new Proxy(vm, handlers);
      } else {
        vm._renderProxy = vm;
      }
    };
  }

  /*  */

  var seenObjects = new _Set();

  /**
   * Recursively traverse an object to evoke all converted
   * getters, so that every nested property inside the object
   * is collected as a "deep" dependency.
   */
  function traverse (val) {
    _traverse(val, seenObjects);
    seenObjects.clear();
  }

  function _traverse (val, seen) {
    var i, keys;
    var isA = Array.isArray(val);
    if ((!isA && !isObject(val)) || Object.isFrozen(val) || val instanceof VNode) {
      return
    }
    if (val.__ob__) {
      var depId = val.__ob__.dep.id;
      if (seen.has(depId)) {
        return
      }
      seen.add(depId);
    }
    if (isA) {
      i = val.length;
      while (i--) { _traverse(val[i], seen); }
    } else {
      keys = Object.keys(val);
      i = keys.length;
      while (i--) { _traverse(val[keys[i]], seen); }
    }
  }

  /*  */

  var normalizeEvent = cached(function (name) {
    var passive = name.charAt(0) === '&';
    name = passive ? name.slice(1) : name;
    var once$$1 = name.charAt(0) === '~'; // Prefixed last, checked first
    name = once$$1 ? name.slice(1) : name;
    var capture = name.charAt(0) === '!';
    name = capture ? name.slice(1) : name;
    return {
      name: name,
      once: once$$1,
      capture: capture,
      passive: passive
    }
  });

  function createFnInvoker (fns, vm) {
    function invoker () {
      var arguments$1 = arguments;

      var fns = invoker.fns;
      if (Array.isArray(fns)) {
        var cloned = fns.slice();
        for (var i = 0; i < cloned.length; i++) {
          invokeWithErrorHandling(cloned[i], null, arguments$1, vm, "v-on handler");
        }
      } else {
        // return handler return value for single handlers
        return invokeWithErrorHandling(fns, null, arguments, vm, "v-on handler")
      }
    }
    invoker.fns = fns;
    return invoker
  }

  function updateListeners (
    on,
    oldOn,
    add,
    remove$$1,
    createOnceHandler,
    vm
  ) {
    var name, def$$1, cur, old, event;
    for (name in on) {
      def$$1 = cur = on[name];
      old = oldOn[name];
      event = normalizeEvent(name);
      if (isUndef(cur)) {
        warn(
          "Invalid handler for event \"" + (event.name) + "\": got " + String(cur),
          vm
        );
      } else if (isUndef(old)) {
        if (isUndef(cur.fns)) {
          cur = on[name] = createFnInvoker(cur, vm);
        }
        if (isTrue(event.once)) {
          cur = on[name] = createOnceHandler(event.name, cur, event.capture);
        }
        add(event.name, cur, event.capture, event.passive, event.params);
      } else if (cur !== old) {
        old.fns = cur;
        on[name] = old;
      }
    }
    for (name in oldOn) {
      if (isUndef(on[name])) {
        event = normalizeEvent(name);
        remove$$1(event.name, oldOn[name], event.capture);
      }
    }
  }

  /*  */

  function mergeVNodeHook (def, hookKey, hook) {
    if (def instanceof VNode) {
      def = def.data.hook || (def.data.hook = {});
    }
    var invoker;
    var oldHook = def[hookKey];

    function wrappedHook () {
      hook.apply(this, arguments);
      // important: remove merged hook to ensure it's called only once
      // and prevent memory leak
      remove(invoker.fns, wrappedHook);
    }

    if (isUndef(oldHook)) {
      // no existing hook
      invoker = createFnInvoker([wrappedHook]);
    } else {
      /* istanbul ignore if */
      if (isDef(oldHook.fns) && isTrue(oldHook.merged)) {
        // already a merged invoker
        invoker = oldHook;
        invoker.fns.push(wrappedHook);
      } else {
        // existing plain hook
        invoker = createFnInvoker([oldHook, wrappedHook]);
      }
    }

    invoker.merged = true;
    def[hookKey] = invoker;
  }

  /*  */

  function extractPropsFromVNodeData (
    data,
    Ctor,
    tag
  ) {
    // we are only extracting raw values here.
    // validation and default values are handled in the child
    // component itself.
    var propOptions = Ctor.options.props;
    if (isUndef(propOptions)) {
      return
    }
    var res = {};
    var attrs = data.attrs;
    var props = data.props;
    if (isDef(attrs) || isDef(props)) {
      for (var key in propOptions) {
        var altKey = hyphenate(key);
        {
          var keyInLowerCase = key.toLowerCase();
          if (
            key !== keyInLowerCase &&
            attrs && hasOwn(attrs, keyInLowerCase)
          ) {
            tip(
              "Prop \"" + keyInLowerCase + "\" is passed to component " +
              (formatComponentName(tag || Ctor)) + ", but the declared prop name is" +
              " \"" + key + "\". " +
              "Note that HTML attributes are case-insensitive and camelCased " +
              "props need to use their kebab-case equivalents when using in-DOM " +
              "templates. You should probably use \"" + altKey + "\" instead of \"" + key + "\"."
            );
          }
        }
        checkProp(res, props, key, altKey, true) ||
        checkProp(res, attrs, key, altKey, false);
      }
    }
    return res
  }

  function checkProp (
    res,
    hash,
    key,
    altKey,
    preserve
  ) {
    if (isDef(hash)) {
      if (hasOwn(hash, key)) {
        res[key] = hash[key];
        if (!preserve) {
          delete hash[key];
        }
        return true
      } else if (hasOwn(hash, altKey)) {
        res[key] = hash[altKey];
        if (!preserve) {
          delete hash[altKey];
        }
        return true
      }
    }
    return false
  }

  /*  */

  // The template compiler attempts to minimize the need for normalization by
  // statically analyzing the template at compile time.
  //
  // For plain HTML markup, normalization can be completely skipped because the
  // generated render function is guaranteed to return Array<VNode>. There are
  // two cases where extra normalization is needed:

  // 1. When the children contains components - because a functional component
  // may return an Array instead of a single root. In this case, just a simple
  // normalization is needed - if any child is an Array, we flatten the whole
  // thing with Array.prototype.concat. It is guaranteed to be only 1-level deep
  // because functional components already normalize their own children.
  function simpleNormalizeChildren (children) {
    for (var i = 0; i < children.length; i++) {
      if (Array.isArray(children[i])) {
        return Array.prototype.concat.apply([], children)
      }
    }
    return children
  }

  // 2. When the children contains constructs that always generated nested Arrays,
  // e.g. <template>, <slot>, v-for, or when the children is provided by user
  // with hand-written render functions / JSX. In such cases a full normalization
  // is needed to cater to all possible types of children values.
  function normalizeChildren (children) {
    return isPrimitive(children)
      ? [createTextVNode(children)]
      : Array.isArray(children)
        ? normalizeArrayChildren(children)
        : undefined
  }

  function isTextNode (node) {
    return isDef(node) && isDef(node.text) && isFalse(node.isComment)
  }

  function normalizeArrayChildren (children, nestedIndex) {
    var res = [];
    var i, c, lastIndex, last;
    for (i = 0; i < children.length; i++) {
      c = children[i];
      if (isUndef(c) || typeof c === 'boolean') { continue }
      lastIndex = res.length - 1;
      last = res[lastIndex];
      //  nested
      if (Array.isArray(c)) {
        if (c.length > 0) {
          c = normalizeArrayChildren(c, ((nestedIndex || '') + "_" + i));
          // merge adjacent text nodes
          if (isTextNode(c[0]) && isTextNode(last)) {
            res[lastIndex] = createTextVNode(last.text + (c[0]).text);
            c.shift();
          }
          res.push.apply(res, c);
        }
      } else if (isPrimitive(c)) {
        if (isTextNode(last)) {
          // merge adjacent text nodes
          // this is necessary for SSR hydration because text nodes are
          // essentially merged when rendered to HTML strings
          res[lastIndex] = createTextVNode(last.text + c);
        } else if (c !== '') {
          // convert primitive to vnode
          res.push(createTextVNode(c));
        }
      } else {
        if (isTextNode(c) && isTextNode(last)) {
          // merge adjacent text nodes
          res[lastIndex] = createTextVNode(last.text + c.text);
        } else {
          // default key for nested array children (likely generated by v-for)
          if (isTrue(children._isVList) &&
            isDef(c.tag) &&
            isUndef(c.key) &&
            isDef(nestedIndex)) {
            c.key = "__vlist" + nestedIndex + "_" + i + "__";
          }
          res.push(c);
        }
      }
    }
    return res
  }

  /*  */

  function initProvide (vm) {
    var provide = vm.$options.provide;
    if (provide) {
      vm._provided = typeof provide === 'function'
        ? provide.call(vm)
        : provide;
    }
  }

  function initInjections (vm) {
    var result = resolveInject(vm.$options.inject, vm);
    if (result) {
      toggleObserving(false);
      Object.keys(result).forEach(function (key) {
        /* istanbul ignore else */
        {
          defineReactive$$1(vm, key, result[key], function () {
            warn(
              "Avoid mutating an injected value directly since the changes will be " +
              "overwritten whenever the provided component re-renders. " +
              "injection being mutated: \"" + key + "\"",
              vm
            );
          });
        }
      });
      toggleObserving(true);
    }
  }

  function resolveInject (inject, vm) {
    if (inject) {
      // inject is :any because flow is not smart enough to figure out cached
      var result = Object.create(null);
      var keys = hasSymbol
        ? Reflect.ownKeys(inject)
        : Object.keys(inject);

      for (var i = 0; i < keys.length; i++) {
        var key = keys[i];
        // #6574 in case the inject object is observed...
        if (key === '__ob__') { continue }
        var provideKey = inject[key].from;
        var source = vm;
        while (source) {
          if (source._provided && hasOwn(source._provided, provideKey)) {
            result[key] = source._provided[provideKey];
            break
          }
          source = source.$parent;
        }
        if (!source) {
          if ('default' in inject[key]) {
            var provideDefault = inject[key].default;
            result[key] = typeof provideDefault === 'function'
              ? provideDefault.call(vm)
              : provideDefault;
          } else {
            warn(("Injection \"" + key + "\" not found"), vm);
          }
        }
      }
      return result
    }
  }

  /*  */



  /**
   * Runtime helper for resolving raw children VNodes into a slot object.
   */
  function resolveSlots (
    children,
    context
  ) {
    if (!children || !children.length) {
      return {}
    }
    var slots = {};
    for (var i = 0, l = children.length; i < l; i++) {
      var child = children[i];
      var data = child.data;
      // remove slot attribute if the node is resolved as a Vue slot node
      if (data && data.attrs && data.attrs.slot) {
        delete data.attrs.slot;
      }
      // named slots should only be respected if the vnode was rendered in the
      // same context.
      if ((child.context === context || child.fnContext === context) &&
        data && data.slot != null
      ) {
        var name = data.slot;
        var slot = (slots[name] || (slots[name] = []));
        if (child.tag === 'template') {
          slot.push.apply(slot, child.children || []);
        } else {
          slot.push(child);
        }
      } else {
        (slots.default || (slots.default = [])).push(child);
      }
    }
    // ignore slots that contains only whitespace
    for (var name$1 in slots) {
      if (slots[name$1].every(isWhitespace)) {
        delete slots[name$1];
      }
    }
    return slots
  }

  function isWhitespace (node) {
    return (node.isComment && !node.asyncFactory) || node.text === ' '
  }

  /*  */

  function normalizeScopedSlots (
    slots,
    normalSlots,
    prevSlots
  ) {
    var res;
    var hasNormalSlots = Object.keys(normalSlots).length > 0;
    var isStable = slots ? !!slots.$stable : !hasNormalSlots;
    var key = slots && slots.$key;
    if (!slots) {
      res = {};
    } else if (slots._normalized) {
      // fast path 1: child component re-render only, parent did not change
      return slots._normalized
    } else if (
      isStable &&
      prevSlots &&
      prevSlots !== emptyObject &&
      key === prevSlots.$key &&
      !hasNormalSlots &&
      !prevSlots.$hasNormal
    ) {
      // fast path 2: stable scoped slots w/ no normal slots to proxy,
      // only need to normalize once
      return prevSlots
    } else {
      res = {};
      for (var key$1 in slots) {
        if (slots[key$1] && key$1[0] !== '$') {
          res[key$1] = normalizeScopedSlot(normalSlots, key$1, slots[key$1]);
        }
      }
    }
    // expose normal slots on scopedSlots
    for (var key$2 in normalSlots) {
      if (!(key$2 in res)) {
        res[key$2] = proxyNormalSlot(normalSlots, key$2);
      }
    }
    // avoriaz seems to mock a non-extensible $scopedSlots object
    // and when that is passed down this would cause an error
    if (slots && Object.isExtensible(slots)) {
      (slots)._normalized = res;
    }
    def(res, '$stable', isStable);
    def(res, '$key', key);
    def(res, '$hasNormal', hasNormalSlots);
    return res
  }

  function normalizeScopedSlot(normalSlots, key, fn) {
    var normalized = function () {
      var res = arguments.length ? fn.apply(null, arguments) : fn({});
      res = res && typeof res === 'object' && !Array.isArray(res)
        ? [res] // single vnode
        : normalizeChildren(res);
      return res && (
        res.length === 0 ||
        (res.length === 1 && res[0].isComment) // #9658
      ) ? undefined
        : res
    };
    // this is a slot using the new v-slot syntax without scope. although it is
    // compiled as a scoped slot, render fn users would expect it to be present
    // on this.$slots because the usage is semantically a normal slot.
    if (fn.proxy) {
      Object.defineProperty(normalSlots, key, {
        get: normalized,
        enumerable: true,
        configurable: true
      });
    }
    return normalized
  }

  function proxyNormalSlot(slots, key) {
    return function () { return slots[key]; }
  }

  /*  */

  /**
   * Runtime helper for rendering v-for lists.
   */
  function renderList (
    val,
    render
  ) {
    var ret, i, l, keys, key;
    if (Array.isArray(val) || typeof val === 'string') {
      ret = new Array(val.length);
      for (i = 0, l = val.length; i < l; i++) {
        ret[i] = render(val[i], i);
      }
    } else if (typeof val === 'number') {
      ret = new Array(val);
      for (i = 0; i < val; i++) {
        ret[i] = render(i + 1, i);
      }
    } else if (isObject(val)) {
      if (hasSymbol && val[Symbol.iterator]) {
        ret = [];
        var iterator = val[Symbol.iterator]();
        var result = iterator.next();
        while (!result.done) {
          ret.push(render(result.value, ret.length));
          result = iterator.next();
        }
      } else {
        keys = Object.keys(val);
        ret = new Array(keys.length);
        for (i = 0, l = keys.length; i < l; i++) {
          key = keys[i];
          ret[i] = render(val[key], key, i);
        }
      }
    }
    if (!isDef(ret)) {
      ret = [];
    }
    (ret)._isVList = true;
    return ret
  }

  /*  */

  /**
   * Runtime helper for rendering <slot>
   */
  function renderSlot (
    name,
    fallback,
    props,
    bindObject
  ) {
    var scopedSlotFn = this.$scopedSlots[name];
    var nodes;
    if (scopedSlotFn) { // scoped slot
      props = props || {};
      if (bindObject) {
        if (!isObject(bindObject)) {
          warn(
            'slot v-bind without argument expects an Object',
            this
          );
        }
        props = extend(extend({}, bindObject), props);
      }
      nodes = scopedSlotFn(props) || fallback;
    } else {
      nodes = this.$slots[name] || fallback;
    }

    var target = props && props.slot;
    if (target) {
      return this.$createElement('template', { slot: target }, nodes)
    } else {
      return nodes
    }
  }

  /*  */

  /**
   * Runtime helper for resolving filters
   */
  function resolveFilter (id) {
    return resolveAsset(this.$options, 'filters', id, true) || identity
  }

  /*  */

  function isKeyNotMatch (expect, actual) {
    if (Array.isArray(expect)) {
      return expect.indexOf(actual) === -1
    } else {
      return expect !== actual
    }
  }

  /**
   * Runtime helper for checking keyCodes from config.
   * exposed as Vue.prototype._k
   * passing in eventKeyName as last argument separately for backwards compat
   */
  function checkKeyCodes (
    eventKeyCode,
    key,
    builtInKeyCode,
    eventKeyName,
    builtInKeyName
  ) {
    var mappedKeyCode = config.keyCodes[key] || builtInKeyCode;
    if (builtInKeyName && eventKeyName && !config.keyCodes[key]) {
      return isKeyNotMatch(builtInKeyName, eventKeyName)
    } else if (mappedKeyCode) {
      return isKeyNotMatch(mappedKeyCode, eventKeyCode)
    } else if (eventKeyName) {
      return hyphenate(eventKeyName) !== key
    }
  }

  /*  */

  /**
   * Runtime helper for merging v-bind="object" into a VNode's data.
   */
  function bindObjectProps (
    data,
    tag,
    value,
    asProp,
    isSync
  ) {
    if (value) {
      if (!isObject(value)) {
        warn(
          'v-bind without argument expects an Object or Array value',
          this
        );
      } else {
        if (Array.isArray(value)) {
          value = toObject(value);
        }
        var hash;
        var loop = function ( key ) {
          if (
            key === 'class' ||
            key === 'style' ||
            isReservedAttribute(key)
          ) {
            hash = data;
          } else {
            var type = data.attrs && data.attrs.type;
            hash = asProp || config.mustUseProp(tag, type, key)
              ? data.domProps || (data.domProps = {})
              : data.attrs || (data.attrs = {});
          }
          var camelizedKey = camelize(key);
          var hyphenatedKey = hyphenate(key);
          if (!(camelizedKey in hash) && !(hyphenatedKey in hash)) {
            hash[key] = value[key];

            if (isSync) {
              var on = data.on || (data.on = {});
              on[("update:" + key)] = function ($event) {
                value[key] = $event;
              };
            }
          }
        };

        for (var key in value) loop( key );
      }
    }
    return data
  }

  /*  */

  /**
   * Runtime helper for rendering static trees.
   */
  function renderStatic (
    index,
    isInFor
  ) {
    var cached = this._staticTrees || (this._staticTrees = []);
    var tree = cached[index];
    // if has already-rendered static tree and not inside v-for,
    // we can reuse the same tree.
    if (tree && !isInFor) {
      return tree
    }
    // otherwise, render a fresh tree.
    tree = cached[index] = this.$options.staticRenderFns[index].call(
      this._renderProxy,
      null,
      this // for render fns generated for functional component templates
    );
    markStatic(tree, ("__static__" + index), false);
    return tree
  }

  /**
   * Runtime helper for v-once.
   * Effectively it means marking the node as static with a unique key.
   */
  function markOnce (
    tree,
    index,
    key
  ) {
    markStatic(tree, ("__once__" + index + (key ? ("_" + key) : "")), true);
    return tree
  }

  function markStatic (
    tree,
    key,
    isOnce
  ) {
    if (Array.isArray(tree)) {
      for (var i = 0; i < tree.length; i++) {
        if (tree[i] && typeof tree[i] !== 'string') {
          markStaticNode(tree[i], (key + "_" + i), isOnce);
        }
      }
    } else {
      markStaticNode(tree, key, isOnce);
    }
  }

  function markStaticNode (node, key, isOnce) {
    node.isStatic = true;
    node.key = key;
    node.isOnce = isOnce;
  }

  /*  */

  function bindObjectListeners (data, value) {
    if (value) {
      if (!isPlainObject(value)) {
        warn(
          'v-on without argument expects an Object value',
          this
        );
      } else {
        var on = data.on = data.on ? extend({}, data.on) : {};
        for (var key in value) {
          var existing = on[key];
          var ours = value[key];
          on[key] = existing ? [].concat(existing, ours) : ours;
        }
      }
    }
    return data
  }

  /*  */

  function resolveScopedSlots (
    fns, // see flow/vnode
    res,
    // the following are added in 2.6
    hasDynamicKeys,
    contentHashKey
  ) {
    res = res || { $stable: !hasDynamicKeys };
    for (var i = 0; i < fns.length; i++) {
      var slot = fns[i];
      if (Array.isArray(slot)) {
        resolveScopedSlots(slot, res, hasDynamicKeys);
      } else if (slot) {
        // marker for reverse proxying v-slot without scope on this.$slots
        if (slot.proxy) {
          slot.fn.proxy = true;
        }
        res[slot.key] = slot.fn;
      }
    }
    if (contentHashKey) {
      (res).$key = contentHashKey;
    }
    return res
  }

  /*  */

  function bindDynamicKeys (baseObj, values) {
    for (var i = 0; i < values.length; i += 2) {
      var key = values[i];
      if (typeof key === 'string' && key) {
        baseObj[values[i]] = values[i + 1];
      } else if (key !== '' && key !== null) {
        // null is a speical value for explicitly removing a binding
        warn(
          ("Invalid value for dynamic directive argument (expected string or null): " + key),
          this
        );
      }
    }
    return baseObj
  }

  // helper to dynamically append modifier runtime markers to event names.
  // ensure only append when value is already string, otherwise it will be cast
  // to string and cause the type check to miss.
  function prependModifier (value, symbol) {
    return typeof value === 'string' ? symbol + value : value
  }

  /*  */

  function installRenderHelpers (target) {
    target._o = markOnce;
    target._n = toNumber;
    target._s = toString;
    target._l = renderList;
    target._t = renderSlot;
    target._q = looseEqual;
    target._i = looseIndexOf;
    target._m = renderStatic;
    target._f = resolveFilter;
    target._k = checkKeyCodes;
    target._b = bindObjectProps;
    target._v = createTextVNode;
    target._e = createEmptyVNode;
    target._u = resolveScopedSlots;
    target._g = bindObjectListeners;
    target._d = bindDynamicKeys;
    target._p = prependModifier;
  }

  /*  */

  function FunctionalRenderContext (
    data,
    props,
    children,
    parent,
    Ctor
  ) {
    var this$1 = this;

    var options = Ctor.options;
    // ensure the createElement function in functional components
    // gets a unique context - this is necessary for correct named slot check
    var contextVm;
    if (hasOwn(parent, '_uid')) {
      contextVm = Object.create(parent);
      // $flow-disable-line
      contextVm._original = parent;
    } else {
      // the context vm passed in is a functional context as well.
      // in this case we want to make sure we are able to get a hold to the
      // real context instance.
      contextVm = parent;
      // $flow-disable-line
      parent = parent._original;
    }
    var isCompiled = isTrue(options._compiled);
    var needNormalization = !isCompiled;

    this.data = data;
    this.props = props;
    this.children = children;
    this.parent = parent;
    this.listeners = data.on || emptyObject;
    this.injections = resolveInject(options.inject, parent);
    this.slots = function () {
      if (!this$1.$slots) {
        normalizeScopedSlots(
          data.scopedSlots,
          this$1.$slots = resolveSlots(children, parent)
        );
      }
      return this$1.$slots
    };

    Object.defineProperty(this, 'scopedSlots', ({
      enumerable: true,
      get: function get () {
        return normalizeScopedSlots(data.scopedSlots, this.slots())
      }
    }));

    // support for compiled functional template
    if (isCompiled) {
      // exposing $options for renderStatic()
      this.$options = options;
      // pre-resolve slots for renderSlot()
      this.$slots = this.slots();
      this.$scopedSlots = normalizeScopedSlots(data.scopedSlots, this.$slots);
    }

    if (options._scopeId) {
      this._c = function (a, b, c, d) {
        var vnode = createElement(contextVm, a, b, c, d, needNormalization);
        if (vnode && !Array.isArray(vnode)) {
          vnode.fnScopeId = options._scopeId;
          vnode.fnContext = parent;
        }
        return vnode
      };
    } else {
      this._c = function (a, b, c, d) { return createElement(contextVm, a, b, c, d, needNormalization); };
    }
  }

  installRenderHelpers(FunctionalRenderContext.prototype);

  function createFunctionalComponent (
    Ctor,
    propsData,
    data,
    contextVm,
    children
  ) {
    var options = Ctor.options;
    var props = {};
    var propOptions = options.props;
    if (isDef(propOptions)) {
      for (var key in propOptions) {
        props[key] = validateProp(key, propOptions, propsData || emptyObject);
      }
    } else {
      if (isDef(data.attrs)) { mergeProps(props, data.attrs); }
      if (isDef(data.props)) { mergeProps(props, data.props); }
    }

    var renderContext = new FunctionalRenderContext(
      data,
      props,
      children,
      contextVm,
      Ctor
    );

    var vnode = options.render.call(null, renderContext._c, renderContext);

    if (vnode instanceof VNode) {
      return cloneAndMarkFunctionalResult(vnode, data, renderContext.parent, options, renderContext)
    } else if (Array.isArray(vnode)) {
      var vnodes = normalizeChildren(vnode) || [];
      var res = new Array(vnodes.length);
      for (var i = 0; i < vnodes.length; i++) {
        res[i] = cloneAndMarkFunctionalResult(vnodes[i], data, renderContext.parent, options, renderContext);
      }
      return res
    }
  }

  function cloneAndMarkFunctionalResult (vnode, data, contextVm, options, renderContext) {
    // #7817 clone node before setting fnContext, otherwise if the node is reused
    // (e.g. it was from a cached normal slot) the fnContext causes named slots
    // that should not be matched to match.
    var clone = cloneVNode(vnode);
    clone.fnContext = contextVm;
    clone.fnOptions = options;
    {
      (clone.devtoolsMeta = clone.devtoolsMeta || {}).renderContext = renderContext;
    }
    if (data.slot) {
      (clone.data || (clone.data = {})).slot = data.slot;
    }
    return clone
  }

  function mergeProps (to, from) {
    for (var key in from) {
      to[camelize(key)] = from[key];
    }
  }

  /*  */

  /*  */

  /*  */

  /*  */

  // inline hooks to be invoked on component VNodes during patch
  var componentVNodeHooks = {
    init: function init (vnode, hydrating) {
      if (
        vnode.componentInstance &&
        !vnode.componentInstance._isDestroyed &&
        vnode.data.keepAlive
      ) {
        // kept-alive components, treat as a patch
        var mountedNode = vnode; // work around flow
        componentVNodeHooks.prepatch(mountedNode, mountedNode);
      } else {
        var child = vnode.componentInstance = createComponentInstanceForVnode(
          vnode,
          activeInstance
        );
        child.$mount(hydrating ? vnode.elm : undefined, hydrating);
      }
    },

    prepatch: function prepatch (oldVnode, vnode) {
      var options = vnode.componentOptions;
      var child = vnode.componentInstance = oldVnode.componentInstance;
      updateChildComponent(
        child,
        options.propsData, // updated props
        options.listeners, // updated listeners
        vnode, // new parent vnode
        options.children // new children
      );
    },

    insert: function insert (vnode) {
      var context = vnode.context;
      var componentInstance = vnode.componentInstance;
      if (!componentInstance._isMounted) {
        componentInstance._isMounted = true;
        callHook(componentInstance, 'mounted');
      }
      if (vnode.data.keepAlive) {
        if (context._isMounted) {
          // vue-router#1212
          // During updates, a kept-alive component's child components may
          // change, so directly walking the tree here may call activated hooks
          // on incorrect children. Instead we push them into a queue which will
          // be processed after the whole patch process ended.
          queueActivatedComponent(componentInstance);
        } else {
          activateChildComponent(componentInstance, true /* direct */);
        }
      }
    },

    destroy: function destroy (vnode) {
      var componentInstance = vnode.componentInstance;
      if (!componentInstance._isDestroyed) {
        if (!vnode.data.keepAlive) {
          componentInstance.$destroy();
        } else {
          deactivateChildComponent(componentInstance, true /* direct */);
        }
      }
    }
  };

  var hooksToMerge = Object.keys(componentVNodeHooks);

  function createComponent (
    Ctor,
    data,
    context,
    children,
    tag
  ) {
    if (isUndef(Ctor)) {
      return
    }

    var baseCtor = context.$options._base;

    // plain options object: turn it into a constructor
    if (isObject(Ctor)) {
      Ctor = baseCtor.extend(Ctor);
    }

    // if at this stage it's not a constructor or an async component factory,
    // reject.
    if (typeof Ctor !== 'function') {
      {
        warn(("Invalid Component definition: " + (String(Ctor))), context);
      }
      return
    }

    // async component
    var asyncFactory;
    if (isUndef(Ctor.cid)) {
      asyncFactory = Ctor;
      Ctor = resolveAsyncComponent(asyncFactory, baseCtor);
      if (Ctor === undefined) {
        // return a placeholder node for async component, which is rendered
        // as a comment node but preserves all the raw information for the node.
        // the information will be used for async server-rendering and hydration.
        return createAsyncPlaceholder(
          asyncFactory,
          data,
          context,
          children,
          tag
        )
      }
    }

    data = data || {};

    // resolve constructor options in case global mixins are applied after
    // component constructor creation
    resolveConstructorOptions(Ctor);

    // transform component v-model data into props & events
    if (isDef(data.model)) {
      transformModel(Ctor.options, data);
    }

    // extract props
    var propsData = extractPropsFromVNodeData(data, Ctor, tag);

    // functional component
    if (isTrue(Ctor.options.functional)) {
      return createFunctionalComponent(Ctor, propsData, data, context, children)
    }

    // extract listeners, since these needs to be treated as
    // child component listeners instead of DOM listeners
    var listeners = data.on;
    // replace with listeners with .native modifier
    // so it gets processed during parent component patch.
    data.on = data.nativeOn;

    if (isTrue(Ctor.options.abstract)) {
      // abstract components do not keep anything
      // other than props & listeners & slot

      // work around flow
      var slot = data.slot;
      data = {};
      if (slot) {
        data.slot = slot;
      }
    }

    // install component management hooks onto the placeholder node
    installComponentHooks(data);

    // return a placeholder vnode
    var name = Ctor.options.name || tag;
    var vnode = new VNode(
      ("vue-component-" + (Ctor.cid) + (name ? ("-" + name) : '')),
      data, undefined, undefined, undefined, context,
      { Ctor: Ctor, propsData: propsData, listeners: listeners, tag: tag, children: children },
      asyncFactory
    );

    return vnode
  }

  function createComponentInstanceForVnode (
    vnode, // we know it's MountedComponentVNode but flow doesn't
    parent // activeInstance in lifecycle state
  ) {
    var options = {
      _isComponent: true,
      _parentVnode: vnode,
      parent: parent
    };
    // check inline-template render functions
    var inlineTemplate = vnode.data.inlineTemplate;
    if (isDef(inlineTemplate)) {
      options.render = inlineTemplate.render;
      options.staticRenderFns = inlineTemplate.staticRenderFns;
    }
    return new vnode.componentOptions.Ctor(options)
  }

  function installComponentHooks (data) {
    var hooks = data.hook || (data.hook = {});
    for (var i = 0; i < hooksToMerge.length; i++) {
      var key = hooksToMerge[i];
      var existing = hooks[key];
      var toMerge = componentVNodeHooks[key];
      if (existing !== toMerge && !(existing && existing._merged)) {
        hooks[key] = existing ? mergeHook$1(toMerge, existing) : toMerge;
      }
    }
  }

  function mergeHook$1 (f1, f2) {
    var merged = function (a, b) {
      // flow complains about extra args which is why we use any
      f1(a, b);
      f2(a, b);
    };
    merged._merged = true;
    return merged
  }

  // transform component v-model info (value and callback) into
  // prop and event handler respectively.
  function transformModel (options, data) {
    var prop = (options.model && options.model.prop) || 'value';
    var event = (options.model && options.model.event) || 'input'
    ;(data.attrs || (data.attrs = {}))[prop] = data.model.value;
    var on = data.on || (data.on = {});
    var existing = on[event];
    var callback = data.model.callback;
    if (isDef(existing)) {
      if (
        Array.isArray(existing)
          ? existing.indexOf(callback) === -1
          : existing !== callback
      ) {
        on[event] = [callback].concat(existing);
      }
    } else {
      on[event] = callback;
    }
  }

  /*  */

  var SIMPLE_NORMALIZE = 1;
  var ALWAYS_NORMALIZE = 2;

  // wrapper function for providing a more flexible interface
  // without getting yelled at by flow
  function createElement (
    context,
    tag,
    data,
    children,
    normalizationType,
    alwaysNormalize
  ) {
    if (Array.isArray(data) || isPrimitive(data)) {
      normalizationType = children;
      children = data;
      data = undefined;
    }
    if (isTrue(alwaysNormalize)) {
      normalizationType = ALWAYS_NORMALIZE;
    }
    return _createElement(context, tag, data, children, normalizationType)
  }

  function _createElement (
    context,
    tag,
    data,
    children,
    normalizationType
  ) {
    if (isDef(data) && isDef((data).__ob__)) {
      warn(
        "Avoid using observed data object as vnode data: " + (JSON.stringify(data)) + "\n" +
        'Always create fresh vnode data objects in each render!',
        context
      );
      return createEmptyVNode()
    }
    // object syntax in v-bind
    if (isDef(data) && isDef(data.is)) {
      tag = data.is;
    }
    if (!tag) {
      // in case of component :is set to falsy value
      return createEmptyVNode()
    }
    // warn against non-primitive key
    if (isDef(data) && isDef(data.key) && !isPrimitive(data.key)
    ) {
      {
        warn(
          'Avoid using non-primitive value as key, ' +
          'use string/number value instead.',
          context
        );
      }
    }
    // support single function children as default scoped slot
    if (Array.isArray(children) &&
      typeof children[0] === 'function'
    ) {
      data = data || {};
      data.scopedSlots = { default: children[0] };
      children.length = 0;
    }
    if (normalizationType === ALWAYS_NORMALIZE) {
      children = normalizeChildren(children);
    } else if (normalizationType === SIMPLE_NORMALIZE) {
      children = simpleNormalizeChildren(children);
    }
    var vnode, ns;
    if (typeof tag === 'string') {
      var Ctor;
      ns = (context.$vnode && context.$vnode.ns) || config.getTagNamespace(tag);
      if (config.isReservedTag(tag)) {
        // platform built-in elements
        vnode = new VNode(
          config.parsePlatformTagName(tag), data, children,
          undefined, undefined, context
        );
      } else if ((!data || !data.pre) && isDef(Ctor = resolveAsset(context.$options, 'components', tag))) {
        // component
        vnode = createComponent(Ctor, data, context, children, tag);
      } else {
        // unknown or unlisted namespaced elements
        // check at runtime because it may get assigned a namespace when its
        // parent normalizes children
        vnode = new VNode(
          tag, data, children,
          undefined, undefined, context
        );
      }
    } else {
      // direct component options / constructor
      vnode = createComponent(tag, data, context, children);
    }
    if (Array.isArray(vnode)) {
      return vnode
    } else if (isDef(vnode)) {
      if (isDef(ns)) { applyNS(vnode, ns); }
      if (isDef(data)) { registerDeepBindings(data); }
      return vnode
    } else {
      return createEmptyVNode()
    }
  }

  function applyNS (vnode, ns, force) {
    vnode.ns = ns;
    if (vnode.tag === 'foreignObject') {
      // use default namespace inside foreignObject
      ns = undefined;
      force = true;
    }
    if (isDef(vnode.children)) {
      for (var i = 0, l = vnode.children.length; i < l; i++) {
        var child = vnode.children[i];
        if (isDef(child.tag) && (
          isUndef(child.ns) || (isTrue(force) && child.tag !== 'svg'))) {
          applyNS(child, ns, force);
        }
      }
    }
  }

  // ref #5318
  // necessary to ensure parent re-render when deep bindings like :style and
  // :class are used on slot nodes
  function registerDeepBindings (data) {
    if (isObject(data.style)) {
      traverse(data.style);
    }
    if (isObject(data.class)) {
      traverse(data.class);
    }
  }

  /*  */

  function initRender (vm) {
    vm._vnode = null; // the root of the child tree
    vm._staticTrees = null; // v-once cached trees
    var options = vm.$options;
    var parentVnode = vm.$vnode = options._parentVnode; // the placeholder node in parent tree
    var renderContext = parentVnode && parentVnode.context;
    vm.$slots = resolveSlots(options._renderChildren, renderContext);
    vm.$scopedSlots = emptyObject;
    // bind the createElement fn to this instance
    // so that we get proper render context inside it.
    // args order: tag, data, children, normalizationType, alwaysNormalize
    // internal version is used by render functions compiled from templates
    vm._c = function (a, b, c, d) { return createElement(vm, a, b, c, d, false); };
    // normalization is always applied for the public version, used in
    // user-written render functions.
    vm.$createElement = function (a, b, c, d) { return createElement(vm, a, b, c, d, true); };

    // $attrs & $listeners are exposed for easier HOC creation.
    // they need to be reactive so that HOCs using them are always updated
    var parentData = parentVnode && parentVnode.data;

    /* istanbul ignore else */
    {
      defineReactive$$1(vm, '$attrs', parentData && parentData.attrs || emptyObject, function () {
        !isUpdatingChildComponent && warn("$attrs is readonly.", vm);
      }, true);
      defineReactive$$1(vm, '$listeners', options._parentListeners || emptyObject, function () {
        !isUpdatingChildComponent && warn("$listeners is readonly.", vm);
      }, true);
    }
  }

  var currentRenderingInstance = null;

  function renderMixin (Vue) {
    // install runtime convenience helpers
    installRenderHelpers(Vue.prototype);

    Vue.prototype.$nextTick = function (fn) {
      return nextTick(fn, this)
    };

    Vue.prototype._render = function () {
      var vm = this;
      var ref = vm.$options;
      var render = ref.render;
      var _parentVnode = ref._parentVnode;

      if (_parentVnode) {
        vm.$scopedSlots = normalizeScopedSlots(
          _parentVnode.data.scopedSlots,
          vm.$slots,
          vm.$scopedSlots
        );
      }

      // set parent vnode. this allows render functions to have access
      // to the data on the placeholder node.
      vm.$vnode = _parentVnode;
      // render self
      var vnode;
      try {
        // There's no need to maintain a stack becaues all render fns are called
        // separately from one another. Nested component's render fns are called
        // when parent component is patched.
        currentRenderingInstance = vm;
        vnode = render.call(vm._renderProxy, vm.$createElement);
      } catch (e) {
        handleError(e, vm, "render");
        // return error render result,
        // or previous vnode to prevent render error causing blank component
        /* istanbul ignore else */
        if (vm.$options.renderError) {
          try {
            vnode = vm.$options.renderError.call(vm._renderProxy, vm.$createElement, e);
          } catch (e) {
            handleError(e, vm, "renderError");
            vnode = vm._vnode;
          }
        } else {
          vnode = vm._vnode;
        }
      } finally {
        currentRenderingInstance = null;
      }
      // if the returned array contains only a single node, allow it
      if (Array.isArray(vnode) && vnode.length === 1) {
        vnode = vnode[0];
      }
      // return empty vnode in case the render function errored out
      if (!(vnode instanceof VNode)) {
        if (Array.isArray(vnode)) {
          warn(
            'Multiple root nodes returned from render function. Render function ' +
            'should return a single root node.',
            vm
          );
        }
        vnode = createEmptyVNode();
      }
      // set parent
      vnode.parent = _parentVnode;
      return vnode
    };
  }

  /*  */

  function ensureCtor (comp, base) {
    if (
      comp.__esModule ||
      (hasSymbol && comp[Symbol.toStringTag] === 'Module')
    ) {
      comp = comp.default;
    }
    return isObject(comp)
      ? base.extend(comp)
      : comp
  }

  function createAsyncPlaceholder (
    factory,
    data,
    context,
    children,
    tag
  ) {
    var node = createEmptyVNode();
    node.asyncFactory = factory;
    node.asyncMeta = { data: data, context: context, children: children, tag: tag };
    return node
  }

  function resolveAsyncComponent (
    factory,
    baseCtor
  ) {
    if (isTrue(factory.error) && isDef(factory.errorComp)) {
      return factory.errorComp
    }

    if (isDef(factory.resolved)) {
      return factory.resolved
    }

    var owner = currentRenderingInstance;
    if (owner && isDef(factory.owners) && factory.owners.indexOf(owner) === -1) {
      // already pending
      factory.owners.push(owner);
    }

    if (isTrue(factory.loading) && isDef(factory.loadingComp)) {
      return factory.loadingComp
    }

    if (owner && !isDef(factory.owners)) {
      var owners = factory.owners = [owner];
      var sync = true;
      var timerLoading = null;
      var timerTimeout = null

      ;(owner).$on('hook:destroyed', function () { return remove(owners, owner); });

      var forceRender = function (renderCompleted) {
        for (var i = 0, l = owners.length; i < l; i++) {
          (owners[i]).$forceUpdate();
        }

        if (renderCompleted) {
          owners.length = 0;
          if (timerLoading !== null) {
            clearTimeout(timerLoading);
            timerLoading = null;
          }
          if (timerTimeout !== null) {
            clearTimeout(timerTimeout);
            timerTimeout = null;
          }
        }
      };

      var resolve = once(function (res) {
        // cache resolved
        factory.resolved = ensureCtor(res, baseCtor);
        // invoke callbacks only if this is not a synchronous resolve
        // (async resolves are shimmed as synchronous during SSR)
        if (!sync) {
          forceRender(true);
        } else {
          owners.length = 0;
        }
      });

      var reject = once(function (reason) {
        warn(
          "Failed to resolve async component: " + (String(factory)) +
          (reason ? ("\nReason: " + reason) : '')
        );
        if (isDef(factory.errorComp)) {
          factory.error = true;
          forceRender(true);
        }
      });

      var res = factory(resolve, reject);

      if (isObject(res)) {
        if (isPromise(res)) {
          // () => Promise
          if (isUndef(factory.resolved)) {
            res.then(resolve, reject);
          }
        } else if (isPromise(res.component)) {
          res.component.then(resolve, reject);

          if (isDef(res.error)) {
            factory.errorComp = ensureCtor(res.error, baseCtor);
          }

          if (isDef(res.loading)) {
            factory.loadingComp = ensureCtor(res.loading, baseCtor);
            if (res.delay === 0) {
              factory.loading = true;
            } else {
              timerLoading = setTimeout(function () {
                timerLoading = null;
                if (isUndef(factory.resolved) && isUndef(factory.error)) {
                  factory.loading = true;
                  forceRender(false);
                }
              }, res.delay || 200);
            }
          }

          if (isDef(res.timeout)) {
            timerTimeout = setTimeout(function () {
              timerTimeout = null;
              if (isUndef(factory.resolved)) {
                reject(
                  ("timeout (" + (res.timeout) + "ms)")
                );
              }
            }, res.timeout);
          }
        }
      }

      sync = false;
      // return in case resolved synchronously
      return factory.loading
        ? factory.loadingComp
        : factory.resolved
    }
  }

  /*  */

  function isAsyncPlaceholder (node) {
    return node.isComment && node.asyncFactory
  }

  /*  */

  function getFirstComponentChild (children) {
    if (Array.isArray(children)) {
      for (var i = 0; i < children.length; i++) {
        var c = children[i];
        if (isDef(c) && (isDef(c.componentOptions) || isAsyncPlaceholder(c))) {
          return c
        }
      }
    }
  }

  /*  */

  /*  */

  function initEvents (vm) {
    vm._events = Object.create(null);
    vm._hasHookEvent = false;
    // init parent attached events
    var listeners = vm.$options._parentListeners;
    if (listeners) {
      updateComponentListeners(vm, listeners);
    }
  }

  var target;

  function add (event, fn) {
    target.$on(event, fn);
  }

  function remove$1 (event, fn) {
    target.$off(event, fn);
  }

  function createOnceHandler (event, fn) {
    var _target = target;
    return function onceHandler () {
      var res = fn.apply(null, arguments);
      if (res !== null) {
        _target.$off(event, onceHandler);
      }
    }
  }

  function updateComponentListeners (
    vm,
    listeners,
    oldListeners
  ) {
    target = vm;
    updateListeners(listeners, oldListeners || {}, add, remove$1, createOnceHandler, vm);
    target = undefined;
  }

  function eventsMixin (Vue) {
    var hookRE = /^hook:/;
    Vue.prototype.$on = function (event, fn) {
      var vm = this;
      if (Array.isArray(event)) {
        for (var i = 0, l = event.length; i < l; i++) {
          vm.$on(event[i], fn);
        }
      } else {
        (vm._events[event] || (vm._events[event] = [])).push(fn);
        // optimize hook:event cost by using a boolean flag marked at registration
        // instead of a hash lookup
        if (hookRE.test(event)) {
          vm._hasHookEvent = true;
        }
      }
      return vm
    };

    Vue.prototype.$once = function (event, fn) {
      var vm = this;
      function on () {
        vm.$off(event, on);
        fn.apply(vm, arguments);
      }
      on.fn = fn;
      vm.$on(event, on);
      return vm
    };

    Vue.prototype.$off = function (event, fn) {
      var vm = this;
      // all
      if (!arguments.length) {
        vm._events = Object.create(null);
        return vm
      }
      // array of events
      if (Array.isArray(event)) {
        for (var i$1 = 0, l = event.length; i$1 < l; i$1++) {
          vm.$off(event[i$1], fn);
        }
        return vm
      }
      // specific event
      var cbs = vm._events[event];
      if (!cbs) {
        return vm
      }
      if (!fn) {
        vm._events[event] = null;
        return vm
      }
      // specific handler
      var cb;
      var i = cbs.length;
      while (i--) {
        cb = cbs[i];
        if (cb === fn || cb.fn === fn) {
          cbs.splice(i, 1);
          break
        }
      }
      return vm
    };

    Vue.prototype.$emit = function (event) {
      var vm = this;
      {
        var lowerCaseEvent = event.toLowerCase();
        if (lowerCaseEvent !== event && vm._events[lowerCaseEvent]) {
          tip(
            "Event \"" + lowerCaseEvent + "\" is emitted in component " +
            (formatComponentName(vm)) + " but the handler is registered for \"" + event + "\". " +
            "Note that HTML attributes are case-insensitive and you cannot use " +
            "v-on to listen to camelCase events when using in-DOM templates. " +
            "You should probably use \"" + (hyphenate(event)) + "\" instead of \"" + event + "\"."
          );
        }
      }
      var cbs = vm._events[event];
      if (cbs) {
        cbs = cbs.length > 1 ? toArray(cbs) : cbs;
        var args = toArray(arguments, 1);
        var info = "event handler for \"" + event + "\"";
        for (var i = 0, l = cbs.length; i < l; i++) {
          invokeWithErrorHandling(cbs[i], vm, args, vm, info);
        }
      }
      return vm
    };
  }

  /*  */

  var activeInstance = null;
  var isUpdatingChildComponent = false;

  function setActiveInstance(vm) {
    var prevActiveInstance = activeInstance;
    activeInstance = vm;
    return function () {
      activeInstance = prevActiveInstance;
    }
  }

  function initLifecycle (vm) {
    var options = vm.$options;

    // locate first non-abstract parent
    var parent = options.parent;
    if (parent && !options.abstract) {
      while (parent.$options.abstract && parent.$parent) {
        parent = parent.$parent;
      }
      parent.$children.push(vm);
    }

    vm.$parent = parent;
    vm.$root = parent ? parent.$root : vm;

    vm.$children = [];
    vm.$refs = {};

    vm._watcher = null;
    vm._inactive = null;
    vm._directInactive = false;
    vm._isMounted = false;
    vm._isDestroyed = false;
    vm._isBeingDestroyed = false;
  }

  function lifecycleMixin (Vue) {
    Vue.prototype._update = function (vnode, hydrating) {
      var vm = this;
      var prevEl = vm.$el;
      var prevVnode = vm._vnode;
      var restoreActiveInstance = setActiveInstance(vm);
      vm._vnode = vnode;
      // Vue.prototype.__patch__ is injected in entry points
      // based on the rendering backend used.
      if (!prevVnode) {
        // initial render
        vm.$el = vm.__patch__(vm.$el, vnode, hydrating, false /* removeOnly */);
      } else {
        // updates
        vm.$el = vm.__patch__(prevVnode, vnode);
      }
      restoreActiveInstance();
      // update __vue__ reference
      if (prevEl) {
        prevEl.__vue__ = null;
      }
      if (vm.$el) {
        vm.$el.__vue__ = vm;
      }
      // if parent is an HOC, update its $el as well
      if (vm.$vnode && vm.$parent && vm.$vnode === vm.$parent._vnode) {
        vm.$parent.$el = vm.$el;
      }
      // updated hook is called by the scheduler to ensure that children are
      // updated in a parent's updated hook.
    };

    Vue.prototype.$forceUpdate = function () {
      var vm = this;
      if (vm._watcher) {
        vm._watcher.update();
      }
    };

    Vue.prototype.$destroy = function () {
      var vm = this;
      if (vm._isBeingDestroyed) {
        return
      }
      callHook(vm, 'beforeDestroy');
      vm._isBeingDestroyed = true;
      // remove self from parent
      var parent = vm.$parent;
      if (parent && !parent._isBeingDestroyed && !vm.$options.abstract) {
        remove(parent.$children, vm);
      }
      // teardown watchers
      if (vm._watcher) {
        vm._watcher.teardown();
      }
      var i = vm._watchers.length;
      while (i--) {
        vm._watchers[i].teardown();
      }
      // remove reference from data ob
      // frozen object may not have observer.
      if (vm._data.__ob__) {
        vm._data.__ob__.vmCount--;
      }
      // call the last hook...
      vm._isDestroyed = true;
      // invoke destroy hooks on current rendered tree
      vm.__patch__(vm._vnode, null);
      // fire destroyed hook
      callHook(vm, 'destroyed');
      // turn off all instance listeners.
      vm.$off();
      // remove __vue__ reference
      if (vm.$el) {
        vm.$el.__vue__ = null;
      }
      // release circular reference (#6759)
      if (vm.$vnode) {
        vm.$vnode.parent = null;
      }
    };
  }

  function mountComponent (
    vm,
    el,
    hydrating
  ) {
    vm.$el = el;
    if (!vm.$options.render) {
      vm.$options.render = createEmptyVNode;
      {
        /* istanbul ignore if */
        if ((vm.$options.template && vm.$options.template.charAt(0) !== '#') ||
          vm.$options.el || el) {
          warn(
            'You are using the runtime-only build of Vue where the template ' +
            'compiler is not available. Either pre-compile the templates into ' +
            'render functions, or use the compiler-included build.',
            vm
          );
        } else {
          warn(
            'Failed to mount component: template or render function not defined.',
            vm
          );
        }
      }
    }
    callHook(vm, 'beforeMount');

    var updateComponent;
    /* istanbul ignore if */
    if (config.performance && mark) {
      updateComponent = function () {
        var name = vm._name;
        var id = vm._uid;
        var startTag = "vue-perf-start:" + id;
        var endTag = "vue-perf-end:" + id;

        mark(startTag);
        var vnode = vm._render();
        mark(endTag);
        measure(("vue " + name + " render"), startTag, endTag);

        mark(startTag);
        vm._update(vnode, hydrating);
        mark(endTag);
        measure(("vue " + name + " patch"), startTag, endTag);
      };
    } else {
      updateComponent = function () {
        vm._update(vm._render(), hydrating);
      };
    }

    // we set this to vm._watcher inside the watcher's constructor
    // since the watcher's initial patch may call $forceUpdate (e.g. inside child
    // component's mounted hook), which relies on vm._watcher being already defined
    new Watcher(vm, updateComponent, noop, {
      before: function before () {
        if (vm._isMounted && !vm._isDestroyed) {
          callHook(vm, 'beforeUpdate');
        }
      }
    }, true /* isRenderWatcher */);
    hydrating = false;

    // manually mounted instance, call mounted on self
    // mounted is called for render-created child components in its inserted hook
    if (vm.$vnode == null) {
      vm._isMounted = true;
      callHook(vm, 'mounted');
    }
    return vm
  }

  function updateChildComponent (
    vm,
    propsData,
    listeners,
    parentVnode,
    renderChildren
  ) {
    {
      isUpdatingChildComponent = true;
    }

    // determine whether component has slot children
    // we need to do this before overwriting $options._renderChildren.

    // check if there are dynamic scopedSlots (hand-written or compiled but with
    // dynamic slot names). Static scoped slots compiled from template has the
    // "$stable" marker.
    var newScopedSlots = parentVnode.data.scopedSlots;
    var oldScopedSlots = vm.$scopedSlots;
    var hasDynamicScopedSlot = !!(
      (newScopedSlots && !newScopedSlots.$stable) ||
      (oldScopedSlots !== emptyObject && !oldScopedSlots.$stable) ||
      (newScopedSlots && vm.$scopedSlots.$key !== newScopedSlots.$key)
    );

    // Any static slot children from the parent may have changed during parent's
    // update. Dynamic scoped slots may also have changed. In such cases, a forced
    // update is necessary to ensure correctness.
    var needsForceUpdate = !!(
      renderChildren ||               // has new static slots
      vm.$options._renderChildren ||  // has old static slots
      hasDynamicScopedSlot
    );

    vm.$options._parentVnode = parentVnode;
    vm.$vnode = parentVnode; // update vm's placeholder node without re-render

    if (vm._vnode) { // update child tree's parent
      vm._vnode.parent = parentVnode;
    }
    vm.$options._renderChildren = renderChildren;

    // update $attrs and $listeners hash
    // these are also reactive so they may trigger child update if the child
    // used them during render
    vm.$attrs = parentVnode.data.attrs || emptyObject;
    vm.$listeners = listeners || emptyObject;

    // update props
    if (propsData && vm.$options.props) {
      toggleObserving(false);
      var props = vm._props;
      var propKeys = vm.$options._propKeys || [];
      for (var i = 0; i < propKeys.length; i++) {
        var key = propKeys[i];
        var propOptions = vm.$options.props; // wtf flow?
        props[key] = validateProp(key, propOptions, propsData, vm);
      }
      toggleObserving(true);
      // keep a copy of raw propsData
      vm.$options.propsData = propsData;
    }

    // update listeners
    listeners = listeners || emptyObject;
    var oldListeners = vm.$options._parentListeners;
    vm.$options._parentListeners = listeners;
    updateComponentListeners(vm, listeners, oldListeners);

    // resolve slots + force update if has children
    if (needsForceUpdate) {
      vm.$slots = resolveSlots(renderChildren, parentVnode.context);
      vm.$forceUpdate();
    }

    {
      isUpdatingChildComponent = false;
    }
  }

  function isInInactiveTree (vm) {
    while (vm && (vm = vm.$parent)) {
      if (vm._inactive) { return true }
    }
    return false
  }

  function activateChildComponent (vm, direct) {
    if (direct) {
      vm._directInactive = false;
      if (isInInactiveTree(vm)) {
        return
      }
    } else if (vm._directInactive) {
      return
    }
    if (vm._inactive || vm._inactive === null) {
      vm._inactive = false;
      for (var i = 0; i < vm.$children.length; i++) {
        activateChildComponent(vm.$children[i]);
      }
      callHook(vm, 'activated');
    }
  }

  function deactivateChildComponent (vm, direct) {
    if (direct) {
      vm._directInactive = true;
      if (isInInactiveTree(vm)) {
        return
      }
    }
    if (!vm._inactive) {
      vm._inactive = true;
      for (var i = 0; i < vm.$children.length; i++) {
        deactivateChildComponent(vm.$children[i]);
      }
      callHook(vm, 'deactivated');
    }
  }

  function callHook (vm, hook) {
    // #7573 disable dep collection when invoking lifecycle hooks
    pushTarget();
    var handlers = vm.$options[hook];
    var info = hook + " hook";
    if (handlers) {
      for (var i = 0, j = handlers.length; i < j; i++) {
        invokeWithErrorHandling(handlers[i], vm, null, vm, info);
      }
    }
    if (vm._hasHookEvent) {
      vm.$emit('hook:' + hook);
    }
    popTarget();
  }

  /*  */

  var MAX_UPDATE_COUNT = 100;

  var queue = [];
  var activatedChildren = [];
  var has = {};
  var circular = {};
  var waiting = false;
  var flushing = false;
  var index = 0;

  /**
   * Reset the scheduler's state.
   */
  function resetSchedulerState () {
    index = queue.length = activatedChildren.length = 0;
    has = {};
    {
      circular = {};
    }
    waiting = flushing = false;
  }

  // Async edge case #6566 requires saving the timestamp when event listeners are
  // attached. However, calling performance.now() has a perf overhead especially
  // if the page has thousands of event listeners. Instead, we take a timestamp
  // every time the scheduler flushes and use that for all event listeners
  // attached during that flush.
  var currentFlushTimestamp = 0;

  // Async edge case fix requires storing an event listener's attach timestamp.
  var getNow = Date.now;

  // Determine what event timestamp the browser is using. Annoyingly, the
  // timestamp can either be hi-res (relative to page load) or low-res
  // (relative to UNIX epoch), so in order to compare time we have to use the
  // same timestamp type when saving the flush timestamp.
  // All IE versions use low-res event timestamps, and have problematic clock
  // implementations (#9632)
  if (inBrowser && !isIE) {
    var performance = window.performance;
    if (
      performance &&
      typeof performance.now === 'function' &&
      getNow() > document.createEvent('Event').timeStamp
    ) {
      // if the event timestamp, although evaluated AFTER the Date.now(), is
      // smaller than it, it means the event is using a hi-res timestamp,
      // and we need to use the hi-res version for event listener timestamps as
      // well.
      getNow = function () { return performance.now(); };
    }
  }

  /**
   * Flush both queues and run the watchers.
   */
  function flushSchedulerQueue () {
    currentFlushTimestamp = getNow();
    flushing = true;
    var watcher, id;

    // Sort queue before flush.
    // This ensures that:
    // 1. Components are updated from parent to child. (because parent is always
    //    created before the child)
    // 2. A component's user watchers are run before its render watcher (because
    //    user watchers are created before the render watcher)
    // 3. If a component is destroyed during a parent component's watcher run,
    //    its watchers can be skipped.
    queue.sort(function (a, b) { return a.id - b.id; });

    // do not cache length because more watchers might be pushed
    // as we run existing watchers
    for (index = 0; index < queue.length; index++) {
      watcher = queue[index];
      if (watcher.before) {
        watcher.before();
      }
      id = watcher.id;
      has[id] = null;
      watcher.run();
      // in dev build, check and stop circular updates.
      if (has[id] != null) {
        circular[id] = (circular[id] || 0) + 1;
        if (circular[id] > MAX_UPDATE_COUNT) {
          warn(
            'You may have an infinite update loop ' + (
              watcher.user
                ? ("in watcher with expression \"" + (watcher.expression) + "\"")
                : "in a component render function."
            ),
            watcher.vm
          );
          break
        }
      }
    }

    // keep copies of post queues before resetting state
    var activatedQueue = activatedChildren.slice();
    var updatedQueue = queue.slice();

    resetSchedulerState();

    // call component updated and activated hooks
    callActivatedHooks(activatedQueue);
    callUpdatedHooks(updatedQueue);

    // devtool hook
    /* istanbul ignore if */
    if (devtools && config.devtools) {
      devtools.emit('flush');
    }
  }

  function callUpdatedHooks (queue) {
    var i = queue.length;
    while (i--) {
      var watcher = queue[i];
      var vm = watcher.vm;
      if (vm._watcher === watcher && vm._isMounted && !vm._isDestroyed) {
        callHook(vm, 'updated');
      }
    }
  }

  /**
   * Queue a kept-alive component that was activated during patch.
   * The queue will be processed after the entire tree has been patched.
   */
  function queueActivatedComponent (vm) {
    // setting _inactive to false here so that a render function can
    // rely on checking whether it's in an inactive tree (e.g. router-view)
    vm._inactive = false;
    activatedChildren.push(vm);
  }

  function callActivatedHooks (queue) {
    for (var i = 0; i < queue.length; i++) {
      queue[i]._inactive = true;
      activateChildComponent(queue[i], true /* true */);
    }
  }

  /**
   * Push a watcher into the watcher queue.
   * Jobs with duplicate IDs will be skipped unless it's
   * pushed when the queue is being flushed.
   */
  function queueWatcher (watcher) {
    var id = watcher.id;
    if (has[id] == null) {
      has[id] = true;
      if (!flushing) {
        queue.push(watcher);
      } else {
        // if already flushing, splice the watcher based on its id
        // if already past its id, it will be run next immediately.
        var i = queue.length - 1;
        while (i > index && queue[i].id > watcher.id) {
          i--;
        }
        queue.splice(i + 1, 0, watcher);
      }
      // queue the flush
      if (!waiting) {
        waiting = true;

        if (!config.async) {
          flushSchedulerQueue();
          return
        }
        nextTick(flushSchedulerQueue);
      }
    }
  }

  /*  */



  var uid$2 = 0;

  /**
   * A watcher parses an expression, collects dependencies,
   * and fires callback when the expression value changes.
   * This is used for both the $watch() api and directives.
   */
  var Watcher = function Watcher (
    vm,
    expOrFn,
    cb,
    options,
    isRenderWatcher
  ) {
    this.vm = vm;
    if (isRenderWatcher) {
      vm._watcher = this;
    }
    vm._watchers.push(this);
    // options
    if (options) {
      this.deep = !!options.deep;
      this.user = !!options.user;
      this.lazy = !!options.lazy;
      this.sync = !!options.sync;
      this.before = options.before;
    } else {
      this.deep = this.user = this.lazy = this.sync = false;
    }
    this.cb = cb;
    this.id = ++uid$2; // uid for batching
    this.active = true;
    this.dirty = this.lazy; // for lazy watchers
    this.deps = [];
    this.newDeps = [];
    this.depIds = new _Set();
    this.newDepIds = new _Set();
    this.expression = expOrFn.toString();
    // parse expression for getter
    if (typeof expOrFn === 'function') {
      this.getter = expOrFn;
    } else {
      this.getter = parsePath(expOrFn);
      if (!this.getter) {
        this.getter = noop;
        warn(
          "Failed watching path: \"" + expOrFn + "\" " +
          'Watcher only accepts simple dot-delimited paths. ' +
          'For full control, use a function instead.',
          vm
        );
      }
    }
    this.value = this.lazy
      ? undefined
      : this.get();
  };

  /**
   * Evaluate the getter, and re-collect dependencies.
   */
  Watcher.prototype.get = function get () {
    pushTarget(this);
    var value;
    var vm = this.vm;
    try {
      value = this.getter.call(vm, vm);
    } catch (e) {
      if (this.user) {
        handleError(e, vm, ("getter for watcher \"" + (this.expression) + "\""));
      } else {
        throw e
      }
    } finally {
      // "touch" every property so they are all tracked as
      // dependencies for deep watching
      if (this.deep) {
        traverse(value);
      }
      popTarget();
      this.cleanupDeps();
    }
    return value
  };

  /**
   * Add a dependency to this directive.
   */
  Watcher.prototype.addDep = function addDep (dep) {
    var id = dep.id;
    if (!this.newDepIds.has(id)) {
      this.newDepIds.add(id);
      this.newDeps.push(dep);
      if (!this.depIds.has(id)) {
        dep.addSub(this);
      }
    }
  };

  /**
   * Clean up for dependency collection.
   */
  Watcher.prototype.cleanupDeps = function cleanupDeps () {
    var i = this.deps.length;
    while (i--) {
      var dep = this.deps[i];
      if (!this.newDepIds.has(dep.id)) {
        dep.removeSub(this);
      }
    }
    var tmp = this.depIds;
    this.depIds = this.newDepIds;
    this.newDepIds = tmp;
    this.newDepIds.clear();
    tmp = this.deps;
    this.deps = this.newDeps;
    this.newDeps = tmp;
    this.newDeps.length = 0;
  };

  /**
   * Subscriber interface.
   * Will be called when a dependency changes.
   */
  Watcher.prototype.update = function update () {
    /* istanbul ignore else */
    if (this.lazy) {
      this.dirty = true;
    } else if (this.sync) {
      this.run();
    } else {
      queueWatcher(this);
    }
  };

  /**
   * Scheduler job interface.
   * Will be called by the scheduler.
   */
  Watcher.prototype.run = function run () {
    if (this.active) {
      var value = this.get();
      if (
        value !== this.value ||
        // Deep watchers and watchers on Object/Arrays should fire even
        // when the value is the same, because the value may
        // have mutated.
        isObject(value) ||
        this.deep
      ) {
        // set new value
        var oldValue = this.value;
        this.value = value;
        if (this.user) {
          try {
            this.cb.call(this.vm, value, oldValue);
          } catch (e) {
            handleError(e, this.vm, ("callback for watcher \"" + (this.expression) + "\""));
          }
        } else {
          this.cb.call(this.vm, value, oldValue);
        }
      }
    }
  };

  /**
   * Evaluate the value of the watcher.
   * This only gets called for lazy watchers.
   */
  Watcher.prototype.evaluate = function evaluate () {
    this.value = this.get();
    this.dirty = false;
  };

  /**
   * Depend on all deps collected by this watcher.
   */
  Watcher.prototype.depend = function depend () {
    var i = this.deps.length;
    while (i--) {
      this.deps[i].depend();
    }
  };

  /**
   * Remove self from all dependencies' subscriber list.
   */
  Watcher.prototype.teardown = function teardown () {
    if (this.active) {
      // remove self from vm's watcher list
      // this is a somewhat expensive operation so we skip it
      // if the vm is being destroyed.
      if (!this.vm._isBeingDestroyed) {
        remove(this.vm._watchers, this);
      }
      var i = this.deps.length;
      while (i--) {
        this.deps[i].removeSub(this);
      }
      this.active = false;
    }
  };

  /*  */

  var sharedPropertyDefinition = {
    enumerable: true,
    configurable: true,
    get: noop,
    set: noop
  };

  function proxy (target, sourceKey, key) {
    sharedPropertyDefinition.get = function proxyGetter () {
      return this[sourceKey][key]
    };
    sharedPropertyDefinition.set = function proxySetter (val) {
      this[sourceKey][key] = val;
    };
    Object.defineProperty(target, key, sharedPropertyDefinition);
  }

  function initState (vm) {
    vm._watchers = [];
    var opts = vm.$options;
    if (opts.props) { initProps(vm, opts.props); }
    if (opts.methods) { initMethods(vm, opts.methods); }
    if (opts.data) {
      initData(vm);
    } else {
      observe(vm._data = {}, true /* asRootData */);
    }
    if (opts.computed) { initComputed(vm, opts.computed); }
    if (opts.watch && opts.watch !== nativeWatch) {
      initWatch(vm, opts.watch);
    }
  }

  function initProps (vm, propsOptions) {
    var propsData = vm.$options.propsData || {};
    var props = vm._props = {};
    // cache prop keys so that future props updates can iterate using Array
    // instead of dynamic object key enumeration.
    var keys = vm.$options._propKeys = [];
    var isRoot = !vm.$parent;
    // root instance props should be converted
    if (!isRoot) {
      toggleObserving(false);
    }
    var loop = function ( key ) {
      keys.push(key);
      var value = validateProp(key, propsOptions, propsData, vm);
      /* istanbul ignore else */
      {
        var hyphenatedKey = hyphenate(key);
        if (isReservedAttribute(hyphenatedKey) ||
            config.isReservedAttr(hyphenatedKey)) {
          warn(
            ("\"" + hyphenatedKey + "\" is a reserved attribute and cannot be used as component prop."),
            vm
          );
        }
        defineReactive$$1(props, key, value, function () {
          if (!isRoot && !isUpdatingChildComponent) {
            warn(
              "Avoid mutating a prop directly since the value will be " +
              "overwritten whenever the parent component re-renders. " +
              "Instead, use a data or computed property based on the prop's " +
              "value. Prop being mutated: \"" + key + "\"",
              vm
            );
          }
        });
      }
      // static props are already proxied on the component's prototype
      // during Vue.extend(). We only need to proxy props defined at
      // instantiation here.
      if (!(key in vm)) {
        proxy(vm, "_props", key);
      }
    };

    for (var key in propsOptions) loop( key );
    toggleObserving(true);
  }

  function initData (vm) {
    var data = vm.$options.data;
    data = vm._data = typeof data === 'function'
      ? getData(data, vm)
      : data || {};
    if (!isPlainObject(data)) {
      data = {};
      warn(
        'data functions should return an object:\n' +
        'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function',
        vm
      );
    }
    // proxy data on instance
    var keys = Object.keys(data);
    var props = vm.$options.props;
    var methods = vm.$options.methods;
    var i = keys.length;
    while (i--) {
      var key = keys[i];
      {
        if (methods && hasOwn(methods, key)) {
          warn(
            ("Method \"" + key + "\" has already been defined as a data property."),
            vm
          );
        }
      }
      if (props && hasOwn(props, key)) {
        warn(
          "The data property \"" + key + "\" is already declared as a prop. " +
          "Use prop default value instead.",
          vm
        );
      } else if (!isReserved(key)) {
        proxy(vm, "_data", key);
      }
    }
    // observe data
    observe(data, true /* asRootData */);
  }

  function getData (data, vm) {
    // #7573 disable dep collection when invoking data getters
    pushTarget();
    try {
      return data.call(vm, vm)
    } catch (e) {
      handleError(e, vm, "data()");
      return {}
    } finally {
      popTarget();
    }
  }

  var computedWatcherOptions = { lazy: true };

  function initComputed (vm, computed) {
    // $flow-disable-line
    var watchers = vm._computedWatchers = Object.create(null);
    // computed properties are just getters during SSR
    var isSSR = isServerRendering();

    for (var key in computed) {
      var userDef = computed[key];
      var getter = typeof userDef === 'function' ? userDef : userDef.get;
      if (getter == null) {
        warn(
          ("Getter is missing for computed property \"" + key + "\"."),
          vm
        );
      }

      if (!isSSR) {
        // create internal watcher for the computed property.
        watchers[key] = new Watcher(
          vm,
          getter || noop,
          noop,
          computedWatcherOptions
        );
      }

      // component-defined computed properties are already defined on the
      // component prototype. We only need to define computed properties defined
      // at instantiation here.
      if (!(key in vm)) {
        defineComputed(vm, key, userDef);
      } else {
        if (key in vm.$data) {
          warn(("The computed property \"" + key + "\" is already defined in data."), vm);
        } else if (vm.$options.props && key in vm.$options.props) {
          warn(("The computed property \"" + key + "\" is already defined as a prop."), vm);
        }
      }
    }
  }

  function defineComputed (
    target,
    key,
    userDef
  ) {
    var shouldCache = !isServerRendering();
    if (typeof userDef === 'function') {
      sharedPropertyDefinition.get = shouldCache
        ? createComputedGetter(key)
        : createGetterInvoker(userDef);
      sharedPropertyDefinition.set = noop;
    } else {
      sharedPropertyDefinition.get = userDef.get
        ? shouldCache && userDef.cache !== false
          ? createComputedGetter(key)
          : createGetterInvoker(userDef.get)
        : noop;
      sharedPropertyDefinition.set = userDef.set || noop;
    }
    if (sharedPropertyDefinition.set === noop) {
      sharedPropertyDefinition.set = function () {
        warn(
          ("Computed property \"" + key + "\" was assigned to but it has no setter."),
          this
        );
      };
    }
    Object.defineProperty(target, key, sharedPropertyDefinition);
  }

  function createComputedGetter (key) {
    return function computedGetter () {
      var watcher = this._computedWatchers && this._computedWatchers[key];
      if (watcher) {
        if (watcher.dirty) {
          watcher.evaluate();
        }
        if (Dep.target) {
          watcher.depend();
        }
        return watcher.value
      }
    }
  }

  function createGetterInvoker(fn) {
    return function computedGetter () {
      return fn.call(this, this)
    }
  }

  function initMethods (vm, methods) {
    var props = vm.$options.props;
    for (var key in methods) {
      {
        if (typeof methods[key] !== 'function') {
          warn(
            "Method \"" + key + "\" has type \"" + (typeof methods[key]) + "\" in the component definition. " +
            "Did you reference the function correctly?",
            vm
          );
        }
        if (props && hasOwn(props, key)) {
          warn(
            ("Method \"" + key + "\" has already been defined as a prop."),
            vm
          );
        }
        if ((key in vm) && isReserved(key)) {
          warn(
            "Method \"" + key + "\" conflicts with an existing Vue instance method. " +
            "Avoid defining component methods that start with _ or $."
          );
        }
      }
      vm[key] = typeof methods[key] !== 'function' ? noop : bind(methods[key], vm);
    }
  }

  function initWatch (vm, watch) {
    for (var key in watch) {
      var handler = watch[key];
      if (Array.isArray(handler)) {
        for (var i = 0; i < handler.length; i++) {
          createWatcher(vm, key, handler[i]);
        }
      } else {
        createWatcher(vm, key, handler);
      }
    }
  }

  function createWatcher (
    vm,
    expOrFn,
    handler,
    options
  ) {
    if (isPlainObject(handler)) {
      options = handler;
      handler = handler.handler;
    }
    if (typeof handler === 'string') {
      handler = vm[handler];
    }
    return vm.$watch(expOrFn, handler, options)
  }

  function stateMixin (Vue) {
    // flow somehow has problems with directly declared definition object
    // when using Object.defineProperty, so we have to procedurally build up
    // the object here.
    var dataDef = {};
    dataDef.get = function () { return this._data };
    var propsDef = {};
    propsDef.get = function () { return this._props };
    {
      dataDef.set = function () {
        warn(
          'Avoid replacing instance root $data. ' +
          'Use nested data properties instead.',
          this
        );
      };
      propsDef.set = function () {
        warn("$props is readonly.", this);
      };
    }
    Object.defineProperty(Vue.prototype, '$data', dataDef);
    Object.defineProperty(Vue.prototype, '$props', propsDef);

    Vue.prototype.$set = set;
    Vue.prototype.$delete = del;

    Vue.prototype.$watch = function (
      expOrFn,
      cb,
      options
    ) {
      var vm = this;
      if (isPlainObject(cb)) {
        return createWatcher(vm, expOrFn, cb, options)
      }
      options = options || {};
      options.user = true;
      var watcher = new Watcher(vm, expOrFn, cb, options);
      if (options.immediate) {
        try {
          cb.call(vm, watcher.value);
        } catch (error) {
          handleError(error, vm, ("callback for immediate watcher \"" + (watcher.expression) + "\""));
        }
      }
      return function unwatchFn () {
        watcher.teardown();
      }
    };
  }

  /*  */

  var uid$3 = 0;

  function initMixin (Vue) {
    Vue.prototype._init = function (options) {
      var vm = this;
      // a uid
      vm._uid = uid$3++;

      var startTag, endTag;
      /* istanbul ignore if */
      if (config.performance && mark) {
        startTag = "vue-perf-start:" + (vm._uid);
        endTag = "vue-perf-end:" + (vm._uid);
        mark(startTag);
      }

      // a flag to avoid this being observed
      vm._isVue = true;
      // merge options
      if (options && options._isComponent) {
        // optimize internal component instantiation
        // since dynamic options merging is pretty slow, and none of the
        // internal component options needs special treatment.
        initInternalComponent(vm, options);
      } else {
        vm.$options = mergeOptions(
          resolveConstructorOptions(vm.constructor),
          options || {},
          vm
        );
      }
      /* istanbul ignore else */
      {
        initProxy(vm);
      }
      // expose real self
      vm._self = vm;
      initLifecycle(vm);
      initEvents(vm);
      initRender(vm);
      callHook(vm, 'beforeCreate');
      initInjections(vm); // resolve injections before data/props
      initState(vm);
      initProvide(vm); // resolve provide after data/props
      callHook(vm, 'created');

      /* istanbul ignore if */
      if (config.performance && mark) {
        vm._name = formatComponentName(vm, false);
        mark(endTag);
        measure(("vue " + (vm._name) + " init"), startTag, endTag);
      }

      if (vm.$options.el) {
        vm.$mount(vm.$options.el);
      }
    };
  }

  function initInternalComponent (vm, options) {
    var opts = vm.$options = Object.create(vm.constructor.options);
    // doing this because it's faster than dynamic enumeration.
    var parentVnode = options._parentVnode;
    opts.parent = options.parent;
    opts._parentVnode = parentVnode;

    var vnodeComponentOptions = parentVnode.componentOptions;
    opts.propsData = vnodeComponentOptions.propsData;
    opts._parentListeners = vnodeComponentOptions.listeners;
    opts._renderChildren = vnodeComponentOptions.children;
    opts._componentTag = vnodeComponentOptions.tag;

    if (options.render) {
      opts.render = options.render;
      opts.staticRenderFns = options.staticRenderFns;
    }
  }

  function resolveConstructorOptions (Ctor) {
    var options = Ctor.options;
    if (Ctor.super) {
      var superOptions = resolveConstructorOptions(Ctor.super);
      var cachedSuperOptions = Ctor.superOptions;
      if (superOptions !== cachedSuperOptions) {
        // super option changed,
        // need to resolve new options.
        Ctor.superOptions = superOptions;
        // check if there are any late-modified/attached options (#4976)
        var modifiedOptions = resolveModifiedOptions(Ctor);
        // update base extend options
        if (modifiedOptions) {
          extend(Ctor.extendOptions, modifiedOptions);
        }
        options = Ctor.options = mergeOptions(superOptions, Ctor.extendOptions);
        if (options.name) {
          options.components[options.name] = Ctor;
        }
      }
    }
    return options
  }

  function resolveModifiedOptions (Ctor) {
    var modified;
    var latest = Ctor.options;
    var sealed = Ctor.sealedOptions;
    for (var key in latest) {
      if (latest[key] !== sealed[key]) {
        if (!modified) { modified = {}; }
        modified[key] = latest[key];
      }
    }
    return modified
  }

  function Vue (options) {
    if (!(this instanceof Vue)
    ) {
      warn('Vue is a constructor and should be called with the `new` keyword');
    }
    this._init(options);
  }

  initMixin(Vue);
  stateMixin(Vue);
  eventsMixin(Vue);
  lifecycleMixin(Vue);
  renderMixin(Vue);

  /*  */

  function initUse (Vue) {
    Vue.use = function (plugin) {
      var installedPlugins = (this._installedPlugins || (this._installedPlugins = []));
      if (installedPlugins.indexOf(plugin) > -1) {
        return this
      }

      // additional parameters
      var args = toArray(arguments, 1);
      args.unshift(this);
      if (typeof plugin.install === 'function') {
        plugin.install.apply(plugin, args);
      } else if (typeof plugin === 'function') {
        plugin.apply(null, args);
      }
      installedPlugins.push(plugin);
      return this
    };
  }

  /*  */

  function initMixin$1 (Vue) {
    Vue.mixin = function (mixin) {
      this.options = mergeOptions(this.options, mixin);
      return this
    };
  }

  /*  */

  function initExtend (Vue) {
    /**
     * Each instance constructor, including Vue, has a unique
     * cid. This enables us to create wrapped "child
     * constructors" for prototypal inheritance and cache them.
     */
    Vue.cid = 0;
    var cid = 1;

    /**
     * Class inheritance
     */
    Vue.extend = function (extendOptions) {
      extendOptions = extendOptions || {};
      var Super = this;
      var SuperId = Super.cid;
      var cachedCtors = extendOptions._Ctor || (extendOptions._Ctor = {});
      if (cachedCtors[SuperId]) {
        return cachedCtors[SuperId]
      }

      var name = extendOptions.name || Super.options.name;
      if (name) {
        validateComponentName(name);
      }

      var Sub = function VueComponent (options) {
        this._init(options);
      };
      Sub.prototype = Object.create(Super.prototype);
      Sub.prototype.constructor = Sub;
      Sub.cid = cid++;
      Sub.options = mergeOptions(
        Super.options,
        extendOptions
      );
      Sub['super'] = Super;

      // For props and computed properties, we define the proxy getters on
      // the Vue instances at extension time, on the extended prototype. This
      // avoids Object.defineProperty calls for each instance created.
      if (Sub.options.props) {
        initProps$1(Sub);
      }
      if (Sub.options.computed) {
        initComputed$1(Sub);
      }

      // allow further extension/mixin/plugin usage
      Sub.extend = Super.extend;
      Sub.mixin = Super.mixin;
      Sub.use = Super.use;

      // create asset registers, so extended classes
      // can have their private assets too.
      ASSET_TYPES.forEach(function (type) {
        Sub[type] = Super[type];
      });
      // enable recursive self-lookup
      if (name) {
        Sub.options.components[name] = Sub;
      }

      // keep a reference to the super options at extension time.
      // later at instantiation we can check if Super's options have
      // been updated.
      Sub.superOptions = Super.options;
      Sub.extendOptions = extendOptions;
      Sub.sealedOptions = extend({}, Sub.options);

      // cache constructor
      cachedCtors[SuperId] = Sub;
      return Sub
    };
  }

  function initProps$1 (Comp) {
    var props = Comp.options.props;
    for (var key in props) {
      proxy(Comp.prototype, "_props", key);
    }
  }

  function initComputed$1 (Comp) {
    var computed = Comp.options.computed;
    for (var key in computed) {
      defineComputed(Comp.prototype, key, computed[key]);
    }
  }

  /*  */

  function initAssetRegisters (Vue) {
    /**
     * Create asset registration methods.
     */
    ASSET_TYPES.forEach(function (type) {
      Vue[type] = function (
        id,
        definition
      ) {
        if (!definition) {
          return this.options[type + 's'][id]
        } else {
          /* istanbul ignore if */
          if (type === 'component') {
            validateComponentName(id);
          }
          if (type === 'component' && isPlainObject(definition)) {
            definition.name = definition.name || id;
            definition = this.options._base.extend(definition);
          }
          if (type === 'directive' && typeof definition === 'function') {
            definition = { bind: definition, update: definition };
          }
          this.options[type + 's'][id] = definition;
          return definition
        }
      };
    });
  }

  /*  */



  function getComponentName (opts) {
    return opts && (opts.Ctor.options.name || opts.tag)
  }

  function matches (pattern, name) {
    if (Array.isArray(pattern)) {
      return pattern.indexOf(name) > -1
    } else if (typeof pattern === 'string') {
      return pattern.split(',').indexOf(name) > -1
    } else if (isRegExp(pattern)) {
      return pattern.test(name)
    }
    /* istanbul ignore next */
    return false
  }

  function pruneCache (keepAliveInstance, filter) {
    var cache = keepAliveInstance.cache;
    var keys = keepAliveInstance.keys;
    var _vnode = keepAliveInstance._vnode;
    for (var key in cache) {
      var cachedNode = cache[key];
      if (cachedNode) {
        var name = getComponentName(cachedNode.componentOptions);
        if (name && !filter(name)) {
          pruneCacheEntry(cache, key, keys, _vnode);
        }
      }
    }
  }

  function pruneCacheEntry (
    cache,
    key,
    keys,
    current
  ) {
    var cached$$1 = cache[key];
    if (cached$$1 && (!current || cached$$1.tag !== current.tag)) {
      cached$$1.componentInstance.$destroy();
    }
    cache[key] = null;
    remove(keys, key);
  }

  var patternTypes = [String, RegExp, Array];

  var KeepAlive = {
    name: 'keep-alive',
    abstract: true,

    props: {
      include: patternTypes,
      exclude: patternTypes,
      max: [String, Number]
    },

    created: function created () {
      this.cache = Object.create(null);
      this.keys = [];
    },

    destroyed: function destroyed () {
      for (var key in this.cache) {
        pruneCacheEntry(this.cache, key, this.keys);
      }
    },

    mounted: function mounted () {
      var this$1 = this;

      this.$watch('include', function (val) {
        pruneCache(this$1, function (name) { return matches(val, name); });
      });
      this.$watch('exclude', function (val) {
        pruneCache(this$1, function (name) { return !matches(val, name); });
      });
    },

    render: function render () {
      var slot = this.$slots.default;
      var vnode = getFirstComponentChild(slot);
      var componentOptions = vnode && vnode.componentOptions;
      if (componentOptions) {
        // check pattern
        var name = getComponentName(componentOptions);
        var ref = this;
        var include = ref.include;
        var exclude = ref.exclude;
        if (
          // not included
          (include && (!name || !matches(include, name))) ||
          // excluded
          (exclude && name && matches(exclude, name))
        ) {
          return vnode
        }

        var ref$1 = this;
        var cache = ref$1.cache;
        var keys = ref$1.keys;
        var key = vnode.key == null
          // same constructor may get registered as different local components
          // so cid alone is not enough (#3269)
          ? componentOptions.Ctor.cid + (componentOptions.tag ? ("::" + (componentOptions.tag)) : '')
          : vnode.key;
        if (cache[key]) {
          vnode.componentInstance = cache[key].componentInstance;
          // make current key freshest
          remove(keys, key);
          keys.push(key);
        } else {
          cache[key] = vnode;
          keys.push(key);
          // prune oldest entry
          if (this.max && keys.length > parseInt(this.max)) {
            pruneCacheEntry(cache, keys[0], keys, this._vnode);
          }
        }

        vnode.data.keepAlive = true;
      }
      return vnode || (slot && slot[0])
    }
  };

  var builtInComponents = {
    KeepAlive: KeepAlive
  };

  /*  */

  function initGlobalAPI (Vue) {
    // config
    var configDef = {};
    configDef.get = function () { return config; };
    {
      configDef.set = function () {
        warn(
          'Do not replace the Vue.config object, set individual fields instead.'
        );
      };
    }
    Object.defineProperty(Vue, 'config', configDef);

    // exposed util methods.
    // NOTE: these are not considered part of the public API - avoid relying on
    // them unless you are aware of the risk.
    Vue.util = {
      warn: warn,
      extend: extend,
      mergeOptions: mergeOptions,
      defineReactive: defineReactive$$1
    };

    Vue.set = set;
    Vue.delete = del;
    Vue.nextTick = nextTick;

    // 2.6 explicit observable API
    Vue.observable = function (obj) {
      observe(obj);
      return obj
    };

    Vue.options = Object.create(null);
    ASSET_TYPES.forEach(function (type) {
      Vue.options[type + 's'] = Object.create(null);
    });

    // this is used to identify the "base" constructor to extend all plain-object
    // components with in Weex's multi-instance scenarios.
    Vue.options._base = Vue;

    extend(Vue.options.components, builtInComponents);

    initUse(Vue);
    initMixin$1(Vue);
    initExtend(Vue);
    initAssetRegisters(Vue);
  }

  initGlobalAPI(Vue);

  Object.defineProperty(Vue.prototype, '$isServer', {
    get: isServerRendering
  });

  Object.defineProperty(Vue.prototype, '$ssrContext', {
    get: function get () {
      /* istanbul ignore next */
      return this.$vnode && this.$vnode.ssrContext
    }
  });

  // expose FunctionalRenderContext for ssr runtime helper installation
  Object.defineProperty(Vue, 'FunctionalRenderContext', {
    value: FunctionalRenderContext
  });

  Vue.version = '2.6.10';

  /*  */

  // these are reserved for web because they are directly compiled away
  // during template compilation
  var isReservedAttr = makeMap('style,class');

  // attributes that should be using props for binding
  var acceptValue = makeMap('input,textarea,option,select,progress');
  var mustUseProp = function (tag, type, attr) {
    return (
      (attr === 'value' && acceptValue(tag)) && type !== 'button' ||
      (attr === 'selected' && tag === 'option') ||
      (attr === 'checked' && tag === 'input') ||
      (attr === 'muted' && tag === 'video')
    )
  };

  var isEnumeratedAttr = makeMap('contenteditable,draggable,spellcheck');

  var isValidContentEditableValue = makeMap('events,caret,typing,plaintext-only');

  var convertEnumeratedValue = function (key, value) {
    return isFalsyAttrValue(value) || value === 'false'
      ? 'false'
      // allow arbitrary string value for contenteditable
      : key === 'contenteditable' && isValidContentEditableValue(value)
        ? value
        : 'true'
  };

  var isBooleanAttr = makeMap(
    'allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,' +
    'default,defaultchecked,defaultmuted,defaultselected,defer,disabled,' +
    'enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,' +
    'muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,' +
    'required,reversed,scoped,seamless,selected,sortable,translate,' +
    'truespeed,typemustmatch,visible'
  );

  var xlinkNS = 'http://www.w3.org/1999/xlink';

  var isXlink = function (name) {
    return name.charAt(5) === ':' && name.slice(0, 5) === 'xlink'
  };

  var getXlinkProp = function (name) {
    return isXlink(name) ? name.slice(6, name.length) : ''
  };

  var isFalsyAttrValue = function (val) {
    return val == null || val === false
  };

  /*  */

  function genClassForVnode (vnode) {
    var data = vnode.data;
    var parentNode = vnode;
    var childNode = vnode;
    while (isDef(childNode.componentInstance)) {
      childNode = childNode.componentInstance._vnode;
      if (childNode && childNode.data) {
        data = mergeClassData(childNode.data, data);
      }
    }
    while (isDef(parentNode = parentNode.parent)) {
      if (parentNode && parentNode.data) {
        data = mergeClassData(data, parentNode.data);
      }
    }
    return renderClass(data.staticClass, data.class)
  }

  function mergeClassData (child, parent) {
    return {
      staticClass: concat(child.staticClass, parent.staticClass),
      class: isDef(child.class)
        ? [child.class, parent.class]
        : parent.class
    }
  }

  function renderClass (
    staticClass,
    dynamicClass
  ) {
    if (isDef(staticClass) || isDef(dynamicClass)) {
      return concat(staticClass, stringifyClass(dynamicClass))
    }
    /* istanbul ignore next */
    return ''
  }

  function concat (a, b) {
    return a ? b ? (a + ' ' + b) : a : (b || '')
  }

  function stringifyClass (value) {
    if (Array.isArray(value)) {
      return stringifyArray(value)
    }
    if (isObject(value)) {
      return stringifyObject(value)
    }
    if (typeof value === 'string') {
      return value
    }
    /* istanbul ignore next */
    return ''
  }

  function stringifyArray (value) {
    var res = '';
    var stringified;
    for (var i = 0, l = value.length; i < l; i++) {
      if (isDef(stringified = stringifyClass(value[i])) && stringified !== '') {
        if (res) { res += ' '; }
        res += stringified;
      }
    }
    return res
  }

  function stringifyObject (value) {
    var res = '';
    for (var key in value) {
      if (value[key]) {
        if (res) { res += ' '; }
        res += key;
      }
    }
    return res
  }

  /*  */

  var namespaceMap = {
    svg: 'http://www.w3.org/2000/svg',
    math: 'http://www.w3.org/1998/Math/MathML'
  };

  var isHTMLTag = makeMap(
    'html,body,base,head,link,meta,style,title,' +
    'address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,' +
    'div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,' +
    'a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,' +
    's,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,' +
    'embed,object,param,source,canvas,script,noscript,del,ins,' +
    'caption,col,colgroup,table,thead,tbody,td,th,tr,' +
    'button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,' +
    'output,progress,select,textarea,' +
    'details,dialog,menu,menuitem,summary,' +
    'content,element,shadow,template,blockquote,iframe,tfoot'
  );

  // this map is intentionally selective, only covering SVG elements that may
  // contain child elements.
  var isSVG = makeMap(
    'svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,' +
    'foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,' +
    'polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view',
    true
  );

  var isPreTag = function (tag) { return tag === 'pre'; };

  var isReservedTag = function (tag) {
    return isHTMLTag(tag) || isSVG(tag)
  };

  function getTagNamespace (tag) {
    if (isSVG(tag)) {
      return 'svg'
    }
    // basic support for MathML
    // note it doesn't support other MathML elements being component roots
    if (tag === 'math') {
      return 'math'
    }
  }

  var unknownElementCache = Object.create(null);
  function isUnknownElement (tag) {
    /* istanbul ignore if */
    if (!inBrowser) {
      return true
    }
    if (isReservedTag(tag)) {
      return false
    }
    tag = tag.toLowerCase();
    /* istanbul ignore if */
    if (unknownElementCache[tag] != null) {
      return unknownElementCache[tag]
    }
    var el = document.createElement(tag);
    if (tag.indexOf('-') > -1) {
      // http://stackoverflow.com/a/28210364/1070244
      return (unknownElementCache[tag] = (
        el.constructor === window.HTMLUnknownElement ||
        el.constructor === window.HTMLElement
      ))
    } else {
      return (unknownElementCache[tag] = /HTMLUnknownElement/.test(el.toString()))
    }
  }

  var isTextInputType = makeMap('text,number,password,search,email,tel,url');

  /*  */

  /**
   * Query an element selector if it's not an element already.
   */
  function query (el) {
    if (typeof el === 'string') {
      var selected = document.querySelector(el);
      if (!selected) {
        warn(
          'Cannot find element: ' + el
        );
        return document.createElement('div')
      }
      return selected
    } else {
      return el
    }
  }

  /*  */

  function createElement$1 (tagName, vnode) {
    var elm = document.createElement(tagName);
    if (tagName !== 'select') {
      return elm
    }
    // false or null will remove the attribute but undefined will not
    if (vnode.data && vnode.data.attrs && vnode.data.attrs.multiple !== undefined) {
      elm.setAttribute('multiple', 'multiple');
    }
    return elm
  }

  function createElementNS (namespace, tagName) {
    return document.createElementNS(namespaceMap[namespace], tagName)
  }

  function createTextNode (text) {
    return document.createTextNode(text)
  }

  function createComment (text) {
    return document.createComment(text)
  }

  function insertBefore (parentNode, newNode, referenceNode) {
    parentNode.insertBefore(newNode, referenceNode);
  }

  function removeChild (node, child) {
    node.removeChild(child);
  }

  function appendChild (node, child) {
    node.appendChild(child);
  }

  function parentNode (node) {
    return node.parentNode
  }

  function nextSibling (node) {
    return node.nextSibling
  }

  function tagName (node) {
    return node.tagName
  }

  function setTextContent (node, text) {
    node.textContent = text;
  }

  function setStyleScope (node, scopeId) {
    node.setAttribute(scopeId, '');
  }

  var nodeOps = /*#__PURE__*/Object.freeze({
    createElement: createElement$1,
    createElementNS: createElementNS,
    createTextNode: createTextNode,
    createComment: createComment,
    insertBefore: insertBefore,
    removeChild: removeChild,
    appendChild: appendChild,
    parentNode: parentNode,
    nextSibling: nextSibling,
    tagName: tagName,
    setTextContent: setTextContent,
    setStyleScope: setStyleScope
  });

  /*  */

  var ref = {
    create: function create (_, vnode) {
      registerRef(vnode);
    },
    update: function update (oldVnode, vnode) {
      if (oldVnode.data.ref !== vnode.data.ref) {
        registerRef(oldVnode, true);
        registerRef(vnode);
      }
    },
    destroy: function destroy (vnode) {
      registerRef(vnode, true);
    }
  };

  function registerRef (vnode, isRemoval) {
    var key = vnode.data.ref;
    if (!isDef(key)) { return }

    var vm = vnode.context;
    var ref = vnode.componentInstance || vnode.elm;
    var refs = vm.$refs;
    if (isRemoval) {
      if (Array.isArray(refs[key])) {
        remove(refs[key], ref);
      } else if (refs[key] === ref) {
        refs[key] = undefined;
      }
    } else {
      if (vnode.data.refInFor) {
        if (!Array.isArray(refs[key])) {
          refs[key] = [ref];
        } else if (refs[key].indexOf(ref) < 0) {
          // $flow-disable-line
          refs[key].push(ref);
        }
      } else {
        refs[key] = ref;
      }
    }
  }

  /**
   * Virtual DOM patching algorithm based on Snabbdom by
   * Simon Friis Vindum (@paldepind)
   * Licensed under the MIT License
   * https://github.com/paldepind/snabbdom/blob/master/LICENSE
   *
   * modified by Evan You (@yyx990803)
   *
   * Not type-checking this because this file is perf-critical and the cost
   * of making flow understand it is not worth it.
   */

  var emptyNode = new VNode('', {}, []);

  var hooks = ['create', 'activate', 'update', 'remove', 'destroy'];

  function sameVnode (a, b) {
    return (
      a.key === b.key && (
        (
          a.tag === b.tag &&
          a.isComment === b.isComment &&
          isDef(a.data) === isDef(b.data) &&
          sameInputType(a, b)
        ) || (
          isTrue(a.isAsyncPlaceholder) &&
          a.asyncFactory === b.asyncFactory &&
          isUndef(b.asyncFactory.error)
        )
      )
    )
  }

  function sameInputType (a, b) {
    if (a.tag !== 'input') { return true }
    var i;
    var typeA = isDef(i = a.data) && isDef(i = i.attrs) && i.type;
    var typeB = isDef(i = b.data) && isDef(i = i.attrs) && i.type;
    return typeA === typeB || isTextInputType(typeA) && isTextInputType(typeB)
  }

  function createKeyToOldIdx (children, beginIdx, endIdx) {
    var i, key;
    var map = {};
    for (i = beginIdx; i <= endIdx; ++i) {
      key = children[i].key;
      if (isDef(key)) { map[key] = i; }
    }
    return map
  }

  function createPatchFunction (backend) {
    var i, j;
    var cbs = {};

    var modules = backend.modules;
    var nodeOps = backend.nodeOps;

    for (i = 0; i < hooks.length; ++i) {
      cbs[hooks[i]] = [];
      for (j = 0; j < modules.length; ++j) {
        if (isDef(modules[j][hooks[i]])) {
          cbs[hooks[i]].push(modules[j][hooks[i]]);
        }
      }
    }

    function emptyNodeAt (elm) {
      return new VNode(nodeOps.tagName(elm).toLowerCase(), {}, [], undefined, elm)
    }

    function createRmCb (childElm, listeners) {
      function remove$$1 () {
        if (--remove$$1.listeners === 0) {
          removeNode(childElm);
        }
      }
      remove$$1.listeners = listeners;
      return remove$$1
    }

    function removeNode (el) {
      var parent = nodeOps.parentNode(el);
      // element may have already been removed due to v-html / v-text
      if (isDef(parent)) {
        nodeOps.removeChild(parent, el);
      }
    }

    function isUnknownElement$$1 (vnode, inVPre) {
      return (
        !inVPre &&
        !vnode.ns &&
        !(
          config.ignoredElements.length &&
          config.ignoredElements.some(function (ignore) {
            return isRegExp(ignore)
              ? ignore.test(vnode.tag)
              : ignore === vnode.tag
          })
        ) &&
        config.isUnknownElement(vnode.tag)
      )
    }

    var creatingElmInVPre = 0;

    function createElm (
      vnode,
      insertedVnodeQueue,
      parentElm,
      refElm,
      nested,
      ownerArray,
      index
    ) {
      if (isDef(vnode.elm) && isDef(ownerArray)) {
        // This vnode was used in a previous render!
        // now it's used as a new node, overwriting its elm would cause
        // potential patch errors down the road when it's used as an insertion
        // reference node. Instead, we clone the node on-demand before creating
        // associated DOM element for it.
        vnode = ownerArray[index] = cloneVNode(vnode);
      }

      vnode.isRootInsert = !nested; // for transition enter check
      if (createComponent(vnode, insertedVnodeQueue, parentElm, refElm)) {
        return
      }

      var data = vnode.data;
      var children = vnode.children;
      var tag = vnode.tag;
      if (isDef(tag)) {
        {
          if (data && data.pre) {
            creatingElmInVPre++;
          }
          if (isUnknownElement$$1(vnode, creatingElmInVPre)) {
            warn(
              'Unknown custom element: <' + tag + '> - did you ' +
              'register the component correctly? For recursive components, ' +
              'make sure to provide the "name" option.',
              vnode.context
            );
          }
        }

        vnode.elm = vnode.ns
          ? nodeOps.createElementNS(vnode.ns, tag)
          : nodeOps.createElement(tag, vnode);
        setScope(vnode);

        /* istanbul ignore if */
        {
          createChildren(vnode, children, insertedVnodeQueue);
          if (isDef(data)) {
            invokeCreateHooks(vnode, insertedVnodeQueue);
          }
          insert(parentElm, vnode.elm, refElm);
        }

        if (data && data.pre) {
          creatingElmInVPre--;
        }
      } else if (isTrue(vnode.isComment)) {
        vnode.elm = nodeOps.createComment(vnode.text);
        insert(parentElm, vnode.elm, refElm);
      } else {
        vnode.elm = nodeOps.createTextNode(vnode.text);
        insert(parentElm, vnode.elm, refElm);
      }
    }

    function createComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
      var i = vnode.data;
      if (isDef(i)) {
        var isReactivated = isDef(vnode.componentInstance) && i.keepAlive;
        if (isDef(i = i.hook) && isDef(i = i.init)) {
          i(vnode, false /* hydrating */);
        }
        // after calling the init hook, if the vnode is a child component
        // it should've created a child instance and mounted it. the child
        // component also has set the placeholder vnode's elm.
        // in that case we can just return the element and be done.
        if (isDef(vnode.componentInstance)) {
          initComponent(vnode, insertedVnodeQueue);
          insert(parentElm, vnode.elm, refElm);
          if (isTrue(isReactivated)) {
            reactivateComponent(vnode, insertedVnodeQueue, parentElm, refElm);
          }
          return true
        }
      }
    }

    function initComponent (vnode, insertedVnodeQueue) {
      if (isDef(vnode.data.pendingInsert)) {
        insertedVnodeQueue.push.apply(insertedVnodeQueue, vnode.data.pendingInsert);
        vnode.data.pendingInsert = null;
      }
      vnode.elm = vnode.componentInstance.$el;
      if (isPatchable(vnode)) {
        invokeCreateHooks(vnode, insertedVnodeQueue);
        setScope(vnode);
      } else {
        // empty component root.
        // skip all element-related modules except for ref (#3455)
        registerRef(vnode);
        // make sure to invoke the insert hook
        insertedVnodeQueue.push(vnode);
      }
    }

    function reactivateComponent (vnode, insertedVnodeQueue, parentElm, refElm) {
      var i;
      // hack for #4339: a reactivated component with inner transition
      // does not trigger because the inner node's created hooks are not called
      // again. It's not ideal to involve module-specific logic in here but
      // there doesn't seem to be a better way to do it.
      var innerNode = vnode;
      while (innerNode.componentInstance) {
        innerNode = innerNode.componentInstance._vnode;
        if (isDef(i = innerNode.data) && isDef(i = i.transition)) {
          for (i = 0; i < cbs.activate.length; ++i) {
            cbs.activate[i](emptyNode, innerNode);
          }
          insertedVnodeQueue.push(innerNode);
          break
        }
      }
      // unlike a newly created component,
      // a reactivated keep-alive component doesn't insert itself
      insert(parentElm, vnode.elm, refElm);
    }

    function insert (parent, elm, ref$$1) {
      if (isDef(parent)) {
        if (isDef(ref$$1)) {
          if (nodeOps.parentNode(ref$$1) === parent) {
            nodeOps.insertBefore(parent, elm, ref$$1);
          }
        } else {
          nodeOps.appendChild(parent, elm);
        }
      }
    }

    function createChildren (vnode, children, insertedVnodeQueue) {
      if (Array.isArray(children)) {
        {
          checkDuplicateKeys(children);
        }
        for (var i = 0; i < children.length; ++i) {
          createElm(children[i], insertedVnodeQueue, vnode.elm, null, true, children, i);
        }
      } else if (isPrimitive(vnode.text)) {
        nodeOps.appendChild(vnode.elm, nodeOps.createTextNode(String(vnode.text)));
      }
    }

    function isPatchable (vnode) {
      while (vnode.componentInstance) {
        vnode = vnode.componentInstance._vnode;
      }
      return isDef(vnode.tag)
    }

    function invokeCreateHooks (vnode, insertedVnodeQueue) {
      for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
        cbs.create[i$1](emptyNode, vnode);
      }
      i = vnode.data.hook; // Reuse variable
      if (isDef(i)) {
        if (isDef(i.create)) { i.create(emptyNode, vnode); }
        if (isDef(i.insert)) { insertedVnodeQueue.push(vnode); }
      }
    }

    // set scope id attribute for scoped CSS.
    // this is implemented as a special case to avoid the overhead
    // of going through the normal attribute patching process.
    function setScope (vnode) {
      var i;
      if (isDef(i = vnode.fnScopeId)) {
        nodeOps.setStyleScope(vnode.elm, i);
      } else {
        var ancestor = vnode;
        while (ancestor) {
          if (isDef(i = ancestor.context) && isDef(i = i.$options._scopeId)) {
            nodeOps.setStyleScope(vnode.elm, i);
          }
          ancestor = ancestor.parent;
        }
      }
      // for slot content they should also get the scopeId from the host instance.
      if (isDef(i = activeInstance) &&
        i !== vnode.context &&
        i !== vnode.fnContext &&
        isDef(i = i.$options._scopeId)
      ) {
        nodeOps.setStyleScope(vnode.elm, i);
      }
    }

    function addVnodes (parentElm, refElm, vnodes, startIdx, endIdx, insertedVnodeQueue) {
      for (; startIdx <= endIdx; ++startIdx) {
        createElm(vnodes[startIdx], insertedVnodeQueue, parentElm, refElm, false, vnodes, startIdx);
      }
    }

    function invokeDestroyHook (vnode) {
      var i, j;
      var data = vnode.data;
      if (isDef(data)) {
        if (isDef(i = data.hook) && isDef(i = i.destroy)) { i(vnode); }
        for (i = 0; i < cbs.destroy.length; ++i) { cbs.destroy[i](vnode); }
      }
      if (isDef(i = vnode.children)) {
        for (j = 0; j < vnode.children.length; ++j) {
          invokeDestroyHook(vnode.children[j]);
        }
      }
    }

    function removeVnodes (parentElm, vnodes, startIdx, endIdx) {
      for (; startIdx <= endIdx; ++startIdx) {
        var ch = vnodes[startIdx];
        if (isDef(ch)) {
          if (isDef(ch.tag)) {
            removeAndInvokeRemoveHook(ch);
            invokeDestroyHook(ch);
          } else { // Text node
            removeNode(ch.elm);
          }
        }
      }
    }

    function removeAndInvokeRemoveHook (vnode, rm) {
      if (isDef(rm) || isDef(vnode.data)) {
        var i;
        var listeners = cbs.remove.length + 1;
        if (isDef(rm)) {
          // we have a recursively passed down rm callback
          // increase the listeners count
          rm.listeners += listeners;
        } else {
          // directly removing
          rm = createRmCb(vnode.elm, listeners);
        }
        // recursively invoke hooks on child component root node
        if (isDef(i = vnode.componentInstance) && isDef(i = i._vnode) && isDef(i.data)) {
          removeAndInvokeRemoveHook(i, rm);
        }
        for (i = 0; i < cbs.remove.length; ++i) {
          cbs.remove[i](vnode, rm);
        }
        if (isDef(i = vnode.data.hook) && isDef(i = i.remove)) {
          i(vnode, rm);
        } else {
          rm();
        }
      } else {
        removeNode(vnode.elm);
      }
    }

    function updateChildren (parentElm, oldCh, newCh, insertedVnodeQueue, removeOnly) {
      var oldStartIdx = 0;
      var newStartIdx = 0;
      var oldEndIdx = oldCh.length - 1;
      var oldStartVnode = oldCh[0];
      var oldEndVnode = oldCh[oldEndIdx];
      var newEndIdx = newCh.length - 1;
      var newStartVnode = newCh[0];
      var newEndVnode = newCh[newEndIdx];
      var oldKeyToIdx, idxInOld, vnodeToMove, refElm;

      // removeOnly is a special flag used only by <transition-group>
      // to ensure removed elements stay in correct relative positions
      // during leaving transitions
      var canMove = !removeOnly;

      {
        checkDuplicateKeys(newCh);
      }

      while (oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx) {
        if (isUndef(oldStartVnode)) {
          oldStartVnode = oldCh[++oldStartIdx]; // Vnode has been moved left
        } else if (isUndef(oldEndVnode)) {
          oldEndVnode = oldCh[--oldEndIdx];
        } else if (sameVnode(oldStartVnode, newStartVnode)) {
          patchVnode(oldStartVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
          oldStartVnode = oldCh[++oldStartIdx];
          newStartVnode = newCh[++newStartIdx];
        } else if (sameVnode(oldEndVnode, newEndVnode)) {
          patchVnode(oldEndVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
          oldEndVnode = oldCh[--oldEndIdx];
          newEndVnode = newCh[--newEndIdx];
        } else if (sameVnode(oldStartVnode, newEndVnode)) { // Vnode moved right
          patchVnode(oldStartVnode, newEndVnode, insertedVnodeQueue, newCh, newEndIdx);
          canMove && nodeOps.insertBefore(parentElm, oldStartVnode.elm, nodeOps.nextSibling(oldEndVnode.elm));
          oldStartVnode = oldCh[++oldStartIdx];
          newEndVnode = newCh[--newEndIdx];
        } else if (sameVnode(oldEndVnode, newStartVnode)) { // Vnode moved left
          patchVnode(oldEndVnode, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
          canMove && nodeOps.insertBefore(parentElm, oldEndVnode.elm, oldStartVnode.elm);
          oldEndVnode = oldCh[--oldEndIdx];
          newStartVnode = newCh[++newStartIdx];
        } else {
          if (isUndef(oldKeyToIdx)) { oldKeyToIdx = createKeyToOldIdx(oldCh, oldStartIdx, oldEndIdx); }
          idxInOld = isDef(newStartVnode.key)
            ? oldKeyToIdx[newStartVnode.key]
            : findIdxInOld(newStartVnode, oldCh, oldStartIdx, oldEndIdx);
          if (isUndef(idxInOld)) { // New element
            createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
          } else {
            vnodeToMove = oldCh[idxInOld];
            if (sameVnode(vnodeToMove, newStartVnode)) {
              patchVnode(vnodeToMove, newStartVnode, insertedVnodeQueue, newCh, newStartIdx);
              oldCh[idxInOld] = undefined;
              canMove && nodeOps.insertBefore(parentElm, vnodeToMove.elm, oldStartVnode.elm);
            } else {
              // same key but different element. treat as new element
              createElm(newStartVnode, insertedVnodeQueue, parentElm, oldStartVnode.elm, false, newCh, newStartIdx);
            }
          }
          newStartVnode = newCh[++newStartIdx];
        }
      }
      if (oldStartIdx > oldEndIdx) {
        refElm = isUndef(newCh[newEndIdx + 1]) ? null : newCh[newEndIdx + 1].elm;
        addVnodes(parentElm, refElm, newCh, newStartIdx, newEndIdx, insertedVnodeQueue);
      } else if (newStartIdx > newEndIdx) {
        removeVnodes(parentElm, oldCh, oldStartIdx, oldEndIdx);
      }
    }

    function checkDuplicateKeys (children) {
      var seenKeys = {};
      for (var i = 0; i < children.length; i++) {
        var vnode = children[i];
        var key = vnode.key;
        if (isDef(key)) {
          if (seenKeys[key]) {
            warn(
              ("Duplicate keys detected: '" + key + "'. This may cause an update error."),
              vnode.context
            );
          } else {
            seenKeys[key] = true;
          }
        }
      }
    }

    function findIdxInOld (node, oldCh, start, end) {
      for (var i = start; i < end; i++) {
        var c = oldCh[i];
        if (isDef(c) && sameVnode(node, c)) { return i }
      }
    }

    function patchVnode (
      oldVnode,
      vnode,
      insertedVnodeQueue,
      ownerArray,
      index,
      removeOnly
    ) {
      if (oldVnode === vnode) {
        return
      }

      if (isDef(vnode.elm) && isDef(ownerArray)) {
        // clone reused vnode
        vnode = ownerArray[index] = cloneVNode(vnode);
      }

      var elm = vnode.elm = oldVnode.elm;

      if (isTrue(oldVnode.isAsyncPlaceholder)) {
        if (isDef(vnode.asyncFactory.resolved)) {
          hydrate(oldVnode.elm, vnode, insertedVnodeQueue);
        } else {
          vnode.isAsyncPlaceholder = true;
        }
        return
      }

      // reuse element for static trees.
      // note we only do this if the vnode is cloned -
      // if the new node is not cloned it means the render functions have been
      // reset by the hot-reload-api and we need to do a proper re-render.
      if (isTrue(vnode.isStatic) &&
        isTrue(oldVnode.isStatic) &&
        vnode.key === oldVnode.key &&
        (isTrue(vnode.isCloned) || isTrue(vnode.isOnce))
      ) {
        vnode.componentInstance = oldVnode.componentInstance;
        return
      }

      var i;
      var data = vnode.data;
      if (isDef(data) && isDef(i = data.hook) && isDef(i = i.prepatch)) {
        i(oldVnode, vnode);
      }

      var oldCh = oldVnode.children;
      var ch = vnode.children;
      if (isDef(data) && isPatchable(vnode)) {
        for (i = 0; i < cbs.update.length; ++i) { cbs.update[i](oldVnode, vnode); }
        if (isDef(i = data.hook) && isDef(i = i.update)) { i(oldVnode, vnode); }
      }
      if (isUndef(vnode.text)) {
        if (isDef(oldCh) && isDef(ch)) {
          if (oldCh !== ch) { updateChildren(elm, oldCh, ch, insertedVnodeQueue, removeOnly); }
        } else if (isDef(ch)) {
          {
            checkDuplicateKeys(ch);
          }
          if (isDef(oldVnode.text)) { nodeOps.setTextContent(elm, ''); }
          addVnodes(elm, null, ch, 0, ch.length - 1, insertedVnodeQueue);
        } else if (isDef(oldCh)) {
          removeVnodes(elm, oldCh, 0, oldCh.length - 1);
        } else if (isDef(oldVnode.text)) {
          nodeOps.setTextContent(elm, '');
        }
      } else if (oldVnode.text !== vnode.text) {
        nodeOps.setTextContent(elm, vnode.text);
      }
      if (isDef(data)) {
        if (isDef(i = data.hook) && isDef(i = i.postpatch)) { i(oldVnode, vnode); }
      }
    }

    function invokeInsertHook (vnode, queue, initial) {
      // delay insert hooks for component root nodes, invoke them after the
      // element is really inserted
      if (isTrue(initial) && isDef(vnode.parent)) {
        vnode.parent.data.pendingInsert = queue;
      } else {
        for (var i = 0; i < queue.length; ++i) {
          queue[i].data.hook.insert(queue[i]);
        }
      }
    }

    var hydrationBailed = false;
    // list of modules that can skip create hook during hydration because they
    // are already rendered on the client or has no need for initialization
    // Note: style is excluded because it relies on initial clone for future
    // deep updates (#7063).
    var isRenderedModule = makeMap('attrs,class,staticClass,staticStyle,key');

    // Note: this is a browser-only function so we can assume elms are DOM nodes.
    function hydrate (elm, vnode, insertedVnodeQueue, inVPre) {
      var i;
      var tag = vnode.tag;
      var data = vnode.data;
      var children = vnode.children;
      inVPre = inVPre || (data && data.pre);
      vnode.elm = elm;

      if (isTrue(vnode.isComment) && isDef(vnode.asyncFactory)) {
        vnode.isAsyncPlaceholder = true;
        return true
      }
      // assert node match
      {
        if (!assertNodeMatch(elm, vnode, inVPre)) {
          return false
        }
      }
      if (isDef(data)) {
        if (isDef(i = data.hook) && isDef(i = i.init)) { i(vnode, true /* hydrating */); }
        if (isDef(i = vnode.componentInstance)) {
          // child component. it should have hydrated its own tree.
          initComponent(vnode, insertedVnodeQueue);
          return true
        }
      }
      if (isDef(tag)) {
        if (isDef(children)) {
          // empty element, allow client to pick up and populate children
          if (!elm.hasChildNodes()) {
            createChildren(vnode, children, insertedVnodeQueue);
          } else {
            // v-html and domProps: innerHTML
            if (isDef(i = data) && isDef(i = i.domProps) && isDef(i = i.innerHTML)) {
              if (i !== elm.innerHTML) {
                /* istanbul ignore if */
                if (typeof console !== 'undefined' &&
                  !hydrationBailed
                ) {
                  hydrationBailed = true;
                  console.warn('Parent: ', elm);
                  console.warn('server innerHTML: ', i);
                  console.warn('client innerHTML: ', elm.innerHTML);
                }
                return false
              }
            } else {
              // iterate and compare children lists
              var childrenMatch = true;
              var childNode = elm.firstChild;
              for (var i$1 = 0; i$1 < children.length; i$1++) {
                if (!childNode || !hydrate(childNode, children[i$1], insertedVnodeQueue, inVPre)) {
                  childrenMatch = false;
                  break
                }
                childNode = childNode.nextSibling;
              }
              // if childNode is not null, it means the actual childNodes list is
              // longer than the virtual children list.
              if (!childrenMatch || childNode) {
                /* istanbul ignore if */
                if (typeof console !== 'undefined' &&
                  !hydrationBailed
                ) {
                  hydrationBailed = true;
                  console.warn('Parent: ', elm);
                  console.warn('Mismatching childNodes vs. VNodes: ', elm.childNodes, children);
                }
                return false
              }
            }
          }
        }
        if (isDef(data)) {
          var fullInvoke = false;
          for (var key in data) {
            if (!isRenderedModule(key)) {
              fullInvoke = true;
              invokeCreateHooks(vnode, insertedVnodeQueue);
              break
            }
          }
          if (!fullInvoke && data['class']) {
            // ensure collecting deps for deep class bindings for future updates
            traverse(data['class']);
          }
        }
      } else if (elm.data !== vnode.text) {
        elm.data = vnode.text;
      }
      return true
    }

    function assertNodeMatch (node, vnode, inVPre) {
      if (isDef(vnode.tag)) {
        return vnode.tag.indexOf('vue-component') === 0 || (
          !isUnknownElement$$1(vnode, inVPre) &&
          vnode.tag.toLowerCase() === (node.tagName && node.tagName.toLowerCase())
        )
      } else {
        return node.nodeType === (vnode.isComment ? 8 : 3)
      }
    }

    return function patch (oldVnode, vnode, hydrating, removeOnly) {
      if (isUndef(vnode)) {
        if (isDef(oldVnode)) { invokeDestroyHook(oldVnode); }
        return
      }

      var isInitialPatch = false;
      var insertedVnodeQueue = [];

      if (isUndef(oldVnode)) {
        // empty mount (likely as component), create new root element
        isInitialPatch = true;
        createElm(vnode, insertedVnodeQueue);
      } else {
        var isRealElement = isDef(oldVnode.nodeType);
        if (!isRealElement && sameVnode(oldVnode, vnode)) {
          // patch existing root node
          patchVnode(oldVnode, vnode, insertedVnodeQueue, null, null, removeOnly);
        } else {
          if (isRealElement) {
            // mounting to a real element
            // check if this is server-rendered content and if we can perform
            // a successful hydration.
            if (oldVnode.nodeType === 1 && oldVnode.hasAttribute(SSR_ATTR)) {
              oldVnode.removeAttribute(SSR_ATTR);
              hydrating = true;
            }
            if (isTrue(hydrating)) {
              if (hydrate(oldVnode, vnode, insertedVnodeQueue)) {
                invokeInsertHook(vnode, insertedVnodeQueue, true);
                return oldVnode
              } else {
                warn(
                  'The client-side rendered virtual DOM tree is not matching ' +
                  'server-rendered content. This is likely caused by incorrect ' +
                  'HTML markup, for example nesting block-level elements inside ' +
                  '<p>, or missing <tbody>. Bailing hydration and performing ' +
                  'full client-side render.'
                );
              }
            }
            // either not server-rendered, or hydration failed.
            // create an empty node and replace it
            oldVnode = emptyNodeAt(oldVnode);
          }

          // replacing existing element
          var oldElm = oldVnode.elm;
          var parentElm = nodeOps.parentNode(oldElm);

          // create new node
          createElm(
            vnode,
            insertedVnodeQueue,
            // extremely rare edge case: do not insert if old element is in a
            // leaving transition. Only happens when combining transition +
            // keep-alive + HOCs. (#4590)
            oldElm._leaveCb ? null : parentElm,
            nodeOps.nextSibling(oldElm)
          );

          // update parent placeholder node element, recursively
          if (isDef(vnode.parent)) {
            var ancestor = vnode.parent;
            var patchable = isPatchable(vnode);
            while (ancestor) {
              for (var i = 0; i < cbs.destroy.length; ++i) {
                cbs.destroy[i](ancestor);
              }
              ancestor.elm = vnode.elm;
              if (patchable) {
                for (var i$1 = 0; i$1 < cbs.create.length; ++i$1) {
                  cbs.create[i$1](emptyNode, ancestor);
                }
                // #6513
                // invoke insert hooks that may have been merged by create hooks.
                // e.g. for directives that uses the "inserted" hook.
                var insert = ancestor.data.hook.insert;
                if (insert.merged) {
                  // start at index 1 to avoid re-invoking component mounted hook
                  for (var i$2 = 1; i$2 < insert.fns.length; i$2++) {
                    insert.fns[i$2]();
                  }
                }
              } else {
                registerRef(ancestor);
              }
              ancestor = ancestor.parent;
            }
          }

          // destroy old node
          if (isDef(parentElm)) {
            removeVnodes(parentElm, [oldVnode], 0, 0);
          } else if (isDef(oldVnode.tag)) {
            invokeDestroyHook(oldVnode);
          }
        }
      }

      invokeInsertHook(vnode, insertedVnodeQueue, isInitialPatch);
      return vnode.elm
    }
  }

  /*  */

  var directives = {
    create: updateDirectives,
    update: updateDirectives,
    destroy: function unbindDirectives (vnode) {
      updateDirectives(vnode, emptyNode);
    }
  };

  function updateDirectives (oldVnode, vnode) {
    if (oldVnode.data.directives || vnode.data.directives) {
      _update(oldVnode, vnode);
    }
  }

  function _update (oldVnode, vnode) {
    var isCreate = oldVnode === emptyNode;
    var isDestroy = vnode === emptyNode;
    var oldDirs = normalizeDirectives$1(oldVnode.data.directives, oldVnode.context);
    var newDirs = normalizeDirectives$1(vnode.data.directives, vnode.context);

    var dirsWithInsert = [];
    var dirsWithPostpatch = [];

    var key, oldDir, dir;
    for (key in newDirs) {
      oldDir = oldDirs[key];
      dir = newDirs[key];
      if (!oldDir) {
        // new directive, bind
        callHook$1(dir, 'bind', vnode, oldVnode);
        if (dir.def && dir.def.inserted) {
          dirsWithInsert.push(dir);
        }
      } else {
        // existing directive, update
        dir.oldValue = oldDir.value;
        dir.oldArg = oldDir.arg;
        callHook$1(dir, 'update', vnode, oldVnode);
        if (dir.def && dir.def.componentUpdated) {
          dirsWithPostpatch.push(dir);
        }
      }
    }

    if (dirsWithInsert.length) {
      var callInsert = function () {
        for (var i = 0; i < dirsWithInsert.length; i++) {
          callHook$1(dirsWithInsert[i], 'inserted', vnode, oldVnode);
        }
      };
      if (isCreate) {
        mergeVNodeHook(vnode, 'insert', callInsert);
      } else {
        callInsert();
      }
    }

    if (dirsWithPostpatch.length) {
      mergeVNodeHook(vnode, 'postpatch', function () {
        for (var i = 0; i < dirsWithPostpatch.length; i++) {
          callHook$1(dirsWithPostpatch[i], 'componentUpdated', vnode, oldVnode);
        }
      });
    }

    if (!isCreate) {
      for (key in oldDirs) {
        if (!newDirs[key]) {
          // no longer present, unbind
          callHook$1(oldDirs[key], 'unbind', oldVnode, oldVnode, isDestroy);
        }
      }
    }
  }

  var emptyModifiers = Object.create(null);

  function normalizeDirectives$1 (
    dirs,
    vm
  ) {
    var res = Object.create(null);
    if (!dirs) {
      // $flow-disable-line
      return res
    }
    var i, dir;
    for (i = 0; i < dirs.length; i++) {
      dir = dirs[i];
      if (!dir.modifiers) {
        // $flow-disable-line
        dir.modifiers = emptyModifiers;
      }
      res[getRawDirName(dir)] = dir;
      dir.def = resolveAsset(vm.$options, 'directives', dir.name, true);
    }
    // $flow-disable-line
    return res
  }

  function getRawDirName (dir) {
    return dir.rawName || ((dir.name) + "." + (Object.keys(dir.modifiers || {}).join('.')))
  }

  function callHook$1 (dir, hook, vnode, oldVnode, isDestroy) {
    var fn = dir.def && dir.def[hook];
    if (fn) {
      try {
        fn(vnode.elm, dir, vnode, oldVnode, isDestroy);
      } catch (e) {
        handleError(e, vnode.context, ("directive " + (dir.name) + " " + hook + " hook"));
      }
    }
  }

  var baseModules = [
    ref,
    directives
  ];

  /*  */

  function updateAttrs (oldVnode, vnode) {
    var opts = vnode.componentOptions;
    if (isDef(opts) && opts.Ctor.options.inheritAttrs === false) {
      return
    }
    if (isUndef(oldVnode.data.attrs) && isUndef(vnode.data.attrs)) {
      return
    }
    var key, cur, old;
    var elm = vnode.elm;
    var oldAttrs = oldVnode.data.attrs || {};
    var attrs = vnode.data.attrs || {};
    // clone observed objects, as the user probably wants to mutate it
    if (isDef(attrs.__ob__)) {
      attrs = vnode.data.attrs = extend({}, attrs);
    }

    for (key in attrs) {
      cur = attrs[key];
      old = oldAttrs[key];
      if (old !== cur) {
        setAttr(elm, key, cur);
      }
    }
    // #4391: in IE9, setting type can reset value for input[type=radio]
    // #6666: IE/Edge forces progress value down to 1 before setting a max
    /* istanbul ignore if */
    if ((isIE || isEdge) && attrs.value !== oldAttrs.value) {
      setAttr(elm, 'value', attrs.value);
    }
    for (key in oldAttrs) {
      if (isUndef(attrs[key])) {
        if (isXlink(key)) {
          elm.removeAttributeNS(xlinkNS, getXlinkProp(key));
        } else if (!isEnumeratedAttr(key)) {
          elm.removeAttribute(key);
        }
      }
    }
  }

  function setAttr (el, key, value) {
    if (el.tagName.indexOf('-') > -1) {
      baseSetAttr(el, key, value);
    } else if (isBooleanAttr(key)) {
      // set attribute for blank value
      // e.g. <option disabled>Select one</option>
      if (isFalsyAttrValue(value)) {
        el.removeAttribute(key);
      } else {
        // technically allowfullscreen is a boolean attribute for <iframe>,
        // but Flash expects a value of "true" when used on <embed> tag
        value = key === 'allowfullscreen' && el.tagName === 'EMBED'
          ? 'true'
          : key;
        el.setAttribute(key, value);
      }
    } else if (isEnumeratedAttr(key)) {
      el.setAttribute(key, convertEnumeratedValue(key, value));
    } else if (isXlink(key)) {
      if (isFalsyAttrValue(value)) {
        el.removeAttributeNS(xlinkNS, getXlinkProp(key));
      } else {
        el.setAttributeNS(xlinkNS, key, value);
      }
    } else {
      baseSetAttr(el, key, value);
    }
  }

  function baseSetAttr (el, key, value) {
    if (isFalsyAttrValue(value)) {
      el.removeAttribute(key);
    } else {
      // #7138: IE10 & 11 fires input event when setting placeholder on
      // <textarea>... block the first input event and remove the blocker
      // immediately.
      /* istanbul ignore if */
      if (
        isIE && !isIE9 &&
        el.tagName === 'TEXTAREA' &&
        key === 'placeholder' && value !== '' && !el.__ieph
      ) {
        var blocker = function (e) {
          e.stopImmediatePropagation();
          el.removeEventListener('input', blocker);
        };
        el.addEventListener('input', blocker);
        // $flow-disable-line
        el.__ieph = true; /* IE placeholder patched */
      }
      el.setAttribute(key, value);
    }
  }

  var attrs = {
    create: updateAttrs,
    update: updateAttrs
  };

  /*  */

  function updateClass (oldVnode, vnode) {
    var el = vnode.elm;
    var data = vnode.data;
    var oldData = oldVnode.data;
    if (
      isUndef(data.staticClass) &&
      isUndef(data.class) && (
        isUndef(oldData) || (
          isUndef(oldData.staticClass) &&
          isUndef(oldData.class)
        )
      )
    ) {
      return
    }

    var cls = genClassForVnode(vnode);

    // handle transition classes
    var transitionClass = el._transitionClasses;
    if (isDef(transitionClass)) {
      cls = concat(cls, stringifyClass(transitionClass));
    }

    // set the class
    if (cls !== el._prevClass) {
      el.setAttribute('class', cls);
      el._prevClass = cls;
    }
  }

  var klass = {
    create: updateClass,
    update: updateClass
  };

  /*  */

  var validDivisionCharRE = /[\w).+\-_$\]]/;

  function parseFilters (exp) {
    var inSingle = false;
    var inDouble = false;
    var inTemplateString = false;
    var inRegex = false;
    var curly = 0;
    var square = 0;
    var paren = 0;
    var lastFilterIndex = 0;
    var c, prev, i, expression, filters;

    for (i = 0; i < exp.length; i++) {
      prev = c;
      c = exp.charCodeAt(i);
      if (inSingle) {
        if (c === 0x27 && prev !== 0x5C) { inSingle = false; }
      } else if (inDouble) {
        if (c === 0x22 && prev !== 0x5C) { inDouble = false; }
      } else if (inTemplateString) {
        if (c === 0x60 && prev !== 0x5C) { inTemplateString = false; }
      } else if (inRegex) {
        if (c === 0x2f && prev !== 0x5C) { inRegex = false; }
      } else if (
        c === 0x7C && // pipe
        exp.charCodeAt(i + 1) !== 0x7C &&
        exp.charCodeAt(i - 1) !== 0x7C &&
        !curly && !square && !paren
      ) {
        if (expression === undefined) {
          // first filter, end of expression
          lastFilterIndex = i + 1;
          expression = exp.slice(0, i).trim();
        } else {
          pushFilter();
        }
      } else {
        switch (c) {
          case 0x22: inDouble = true; break         // "
          case 0x27: inSingle = true; break         // '
          case 0x60: inTemplateString = true; break // `
          case 0x28: paren++; break                 // (
          case 0x29: paren--; break                 // )
          case 0x5B: square++; break                // [
          case 0x5D: square--; break                // ]
          case 0x7B: curly++; break                 // {
          case 0x7D: curly--; break                 // }
        }
        if (c === 0x2f) { // /
          var j = i - 1;
          var p = (void 0);
          // find first non-whitespace prev char
          for (; j >= 0; j--) {
            p = exp.charAt(j);
            if (p !== ' ') { break }
          }
          if (!p || !validDivisionCharRE.test(p)) {
            inRegex = true;
          }
        }
      }
    }

    if (expression === undefined) {
      expression = exp.slice(0, i).trim();
    } else if (lastFilterIndex !== 0) {
      pushFilter();
    }

    function pushFilter () {
      (filters || (filters = [])).push(exp.slice(lastFilterIndex, i).trim());
      lastFilterIndex = i + 1;
    }

    if (filters) {
      for (i = 0; i < filters.length; i++) {
        expression = wrapFilter(expression, filters[i]);
      }
    }

    return expression
  }

  function wrapFilter (exp, filter) {
    var i = filter.indexOf('(');
    if (i < 0) {
      // _f: resolveFilter
      return ("_f(\"" + filter + "\")(" + exp + ")")
    } else {
      var name = filter.slice(0, i);
      var args = filter.slice(i + 1);
      return ("_f(\"" + name + "\")(" + exp + (args !== ')' ? ',' + args : args))
    }
  }

  /*  */



  /* eslint-disable no-unused-vars */
  function baseWarn (msg, range) {
    console.error(("[Vue compiler]: " + msg));
  }
  /* eslint-enable no-unused-vars */

  function pluckModuleFunction (
    modules,
    key
  ) {
    return modules
      ? modules.map(function (m) { return m[key]; }).filter(function (_) { return _; })
      : []
  }

  function addProp (el, name, value, range, dynamic) {
    (el.props || (el.props = [])).push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));
    el.plain = false;
  }

  function addAttr (el, name, value, range, dynamic) {
    var attrs = dynamic
      ? (el.dynamicAttrs || (el.dynamicAttrs = []))
      : (el.attrs || (el.attrs = []));
    attrs.push(rangeSetItem({ name: name, value: value, dynamic: dynamic }, range));
    el.plain = false;
  }

  // add a raw attr (use this in preTransforms)
  function addRawAttr (el, name, value, range) {
    el.attrsMap[name] = value;
    el.attrsList.push(rangeSetItem({ name: name, value: value }, range));
  }

  function addDirective (
    el,
    name,
    rawName,
    value,
    arg,
    isDynamicArg,
    modifiers,
    range
  ) {
    (el.directives || (el.directives = [])).push(rangeSetItem({
      name: name,
      rawName: rawName,
      value: value,
      arg: arg,
      isDynamicArg: isDynamicArg,
      modifiers: modifiers
    }, range));
    el.plain = false;
  }

  function prependModifierMarker (symbol, name, dynamic) {
    return dynamic
      ? ("_p(" + name + ",\"" + symbol + "\")")
      : symbol + name // mark the event as captured
  }

  function addHandler (
    el,
    name,
    value,
    modifiers,
    important,
    warn,
    range,
    dynamic
  ) {
    modifiers = modifiers || emptyObject;
    // warn prevent and passive modifier
    /* istanbul ignore if */
    if (
      warn &&
      modifiers.prevent && modifiers.passive
    ) {
      warn(
        'passive and prevent can\'t be used together. ' +
        'Passive handler can\'t prevent default event.',
        range
      );
    }

    // normalize click.right and click.middle since they don't actually fire
    // this is technically browser-specific, but at least for now browsers are
    // the only target envs that have right/middle clicks.
    if (modifiers.right) {
      if (dynamic) {
        name = "(" + name + ")==='click'?'contextmenu':(" + name + ")";
      } else if (name === 'click') {
        name = 'contextmenu';
        delete modifiers.right;
      }
    } else if (modifiers.middle) {
      if (dynamic) {
        name = "(" + name + ")==='click'?'mouseup':(" + name + ")";
      } else if (name === 'click') {
        name = 'mouseup';
      }
    }

    // check capture modifier
    if (modifiers.capture) {
      delete modifiers.capture;
      name = prependModifierMarker('!', name, dynamic);
    }
    if (modifiers.once) {
      delete modifiers.once;
      name = prependModifierMarker('~', name, dynamic);
    }
    /* istanbul ignore if */
    if (modifiers.passive) {
      delete modifiers.passive;
      name = prependModifierMarker('&', name, dynamic);
    }

    var events;
    if (modifiers.native) {
      delete modifiers.native;
      events = el.nativeEvents || (el.nativeEvents = {});
    } else {
      events = el.events || (el.events = {});
    }

    var newHandler = rangeSetItem({ value: value.trim(), dynamic: dynamic }, range);
    if (modifiers !== emptyObject) {
      newHandler.modifiers = modifiers;
    }

    var handlers = events[name];
    /* istanbul ignore if */
    if (Array.isArray(handlers)) {
      important ? handlers.unshift(newHandler) : handlers.push(newHandler);
    } else if (handlers) {
      events[name] = important ? [newHandler, handlers] : [handlers, newHandler];
    } else {
      events[name] = newHandler;
    }

    el.plain = false;
  }

  function getRawBindingAttr (
    el,
    name
  ) {
    return el.rawAttrsMap[':' + name] ||
      el.rawAttrsMap['v-bind:' + name] ||
      el.rawAttrsMap[name]
  }

  function getBindingAttr (
    el,
    name,
    getStatic
  ) {
    var dynamicValue =
      getAndRemoveAttr(el, ':' + name) ||
      getAndRemoveAttr(el, 'v-bind:' + name);
    if (dynamicValue != null) {
      return parseFilters(dynamicValue)
    } else if (getStatic !== false) {
      var staticValue = getAndRemoveAttr(el, name);
      if (staticValue != null) {
        return JSON.stringify(staticValue)
      }
    }
  }

  // note: this only removes the attr from the Array (attrsList) so that it
  // doesn't get processed by processAttrs.
  // By default it does NOT remove it from the map (attrsMap) because the map is
  // needed during codegen.
  function getAndRemoveAttr (
    el,
    name,
    removeFromMap
  ) {
    var val;
    if ((val = el.attrsMap[name]) != null) {
      var list = el.attrsList;
      for (var i = 0, l = list.length; i < l; i++) {
        if (list[i].name === name) {
          list.splice(i, 1);
          break
        }
      }
    }
    if (removeFromMap) {
      delete el.attrsMap[name];
    }
    return val
  }

  function getAndRemoveAttrByRegex (
    el,
    name
  ) {
    var list = el.attrsList;
    for (var i = 0, l = list.length; i < l; i++) {
      var attr = list[i];
      if (name.test(attr.name)) {
        list.splice(i, 1);
        return attr
      }
    }
  }

  function rangeSetItem (
    item,
    range
  ) {
    if (range) {
      if (range.start != null) {
        item.start = range.start;
      }
      if (range.end != null) {
        item.end = range.end;
      }
    }
    return item
  }

  /*  */

  /**
   * Cross-platform code generation for component v-model
   */
  function genComponentModel (
    el,
    value,
    modifiers
  ) {
    var ref = modifiers || {};
    var number = ref.number;
    var trim = ref.trim;

    var baseValueExpression = '$$v';
    var valueExpression = baseValueExpression;
    if (trim) {
      valueExpression =
        "(typeof " + baseValueExpression + " === 'string'" +
        "? " + baseValueExpression + ".trim()" +
        ": " + baseValueExpression + ")";
    }
    if (number) {
      valueExpression = "_n(" + valueExpression + ")";
    }
    var assignment = genAssignmentCode(value, valueExpression);

    el.model = {
      value: ("(" + value + ")"),
      expression: JSON.stringify(value),
      callback: ("function (" + baseValueExpression + ") {" + assignment + "}")
    };
  }

  /**
   * Cross-platform codegen helper for generating v-model value assignment code.
   */
  function genAssignmentCode (
    value,
    assignment
  ) {
    var res = parseModel(value);
    if (res.key === null) {
      return (value + "=" + assignment)
    } else {
      return ("$set(" + (res.exp) + ", " + (res.key) + ", " + assignment + ")")
    }
  }

  /**
   * Parse a v-model expression into a base path and a final key segment.
   * Handles both dot-path and possible square brackets.
   *
   * Possible cases:
   *
   * - test
   * - test[key]
   * - test[test1[key]]
   * - test["a"][key]
   * - xxx.test[a[a].test1[key]]
   * - test.xxx.a["asa"][test1[key]]
   *
   */

  var len, str, chr, index$1, expressionPos, expressionEndPos;



  function parseModel (val) {
    // Fix https://github.com/vuejs/vue/pull/7730
    // allow v-model="obj.val " (trailing whitespace)
    val = val.trim();
    len = val.length;

    if (val.indexOf('[') < 0 || val.lastIndexOf(']') < len - 1) {
      index$1 = val.lastIndexOf('.');
      if (index$1 > -1) {
        return {
          exp: val.slice(0, index$1),
          key: '"' + val.slice(index$1 + 1) + '"'
        }
      } else {
        return {
          exp: val,
          key: null
        }
      }
    }

    str = val;
    index$1 = expressionPos = expressionEndPos = 0;

    while (!eof()) {
      chr = next();
      /* istanbul ignore if */
      if (isStringStart(chr)) {
        parseString(chr);
      } else if (chr === 0x5B) {
        parseBracket(chr);
      }
    }

    return {
      exp: val.slice(0, expressionPos),
      key: val.slice(expressionPos + 1, expressionEndPos)
    }
  }

  function next () {
    return str.charCodeAt(++index$1)
  }

  function eof () {
    return index$1 >= len
  }

  function isStringStart (chr) {
    return chr === 0x22 || chr === 0x27
  }

  function parseBracket (chr) {
    var inBracket = 1;
    expressionPos = index$1;
    while (!eof()) {
      chr = next();
      if (isStringStart(chr)) {
        parseString(chr);
        continue
      }
      if (chr === 0x5B) { inBracket++; }
      if (chr === 0x5D) { inBracket--; }
      if (inBracket === 0) {
        expressionEndPos = index$1;
        break
      }
    }
  }

  function parseString (chr) {
    var stringQuote = chr;
    while (!eof()) {
      chr = next();
      if (chr === stringQuote) {
        break
      }
    }
  }

  /*  */

  var warn$1;

  // in some cases, the event used has to be determined at runtime
  // so we used some reserved tokens during compile.
  var RANGE_TOKEN = '__r';
  var CHECKBOX_RADIO_TOKEN = '__c';

  function model (
    el,
    dir,
    _warn
  ) {
    warn$1 = _warn;
    var value = dir.value;
    var modifiers = dir.modifiers;
    var tag = el.tag;
    var type = el.attrsMap.type;

    {
      // inputs with type="file" are read only and setting the input's
      // value will throw an error.
      if (tag === 'input' && type === 'file') {
        warn$1(
          "<" + (el.tag) + " v-model=\"" + value + "\" type=\"file\">:\n" +
          "File inputs are read only. Use a v-on:change listener instead.",
          el.rawAttrsMap['v-model']
        );
      }
    }

    if (el.component) {
      genComponentModel(el, value, modifiers);
      // component v-model doesn't need extra runtime
      return false
    } else if (tag === 'select') {
      genSelect(el, value, modifiers);
    } else if (tag === 'input' && type === 'checkbox') {
      genCheckboxModel(el, value, modifiers);
    } else if (tag === 'input' && type === 'radio') {
      genRadioModel(el, value, modifiers);
    } else if (tag === 'input' || tag === 'textarea') {
      genDefaultModel(el, value, modifiers);
    } else if (!config.isReservedTag(tag)) {
      genComponentModel(el, value, modifiers);
      // component v-model doesn't need extra runtime
      return false
    } else {
      warn$1(
        "<" + (el.tag) + " v-model=\"" + value + "\">: " +
        "v-model is not supported on this element type. " +
        'If you are working with contenteditable, it\'s recommended to ' +
        'wrap a library dedicated for that purpose inside a custom component.',
        el.rawAttrsMap['v-model']
      );
    }

    // ensure runtime directive metadata
    return true
  }

  function genCheckboxModel (
    el,
    value,
    modifiers
  ) {
    var number = modifiers && modifiers.number;
    var valueBinding = getBindingAttr(el, 'value') || 'null';
    var trueValueBinding = getBindingAttr(el, 'true-value') || 'true';
    var falseValueBinding = getBindingAttr(el, 'false-value') || 'false';
    addProp(el, 'checked',
      "Array.isArray(" + value + ")" +
      "?_i(" + value + "," + valueBinding + ")>-1" + (
        trueValueBinding === 'true'
          ? (":(" + value + ")")
          : (":_q(" + value + "," + trueValueBinding + ")")
      )
    );
    addHandler(el, 'change',
      "var $$a=" + value + "," +
          '$$el=$event.target,' +
          "$$c=$$el.checked?(" + trueValueBinding + "):(" + falseValueBinding + ");" +
      'if(Array.isArray($$a)){' +
        "var $$v=" + (number ? '_n(' + valueBinding + ')' : valueBinding) + "," +
            '$$i=_i($$a,$$v);' +
        "if($$el.checked){$$i<0&&(" + (genAssignmentCode(value, '$$a.concat([$$v])')) + ")}" +
        "else{$$i>-1&&(" + (genAssignmentCode(value, '$$a.slice(0,$$i).concat($$a.slice($$i+1))')) + ")}" +
      "}else{" + (genAssignmentCode(value, '$$c')) + "}",
      null, true
    );
  }

  function genRadioModel (
    el,
    value,
    modifiers
  ) {
    var number = modifiers && modifiers.number;
    var valueBinding = getBindingAttr(el, 'value') || 'null';
    valueBinding = number ? ("_n(" + valueBinding + ")") : valueBinding;
    addProp(el, 'checked', ("_q(" + value + "," + valueBinding + ")"));
    addHandler(el, 'change', genAssignmentCode(value, valueBinding), null, true);
  }

  function genSelect (
    el,
    value,
    modifiers
  ) {
    var number = modifiers && modifiers.number;
    var selectedVal = "Array.prototype.filter" +
      ".call($event.target.options,function(o){return o.selected})" +
      ".map(function(o){var val = \"_value\" in o ? o._value : o.value;" +
      "return " + (number ? '_n(val)' : 'val') + "})";

    var assignment = '$event.target.multiple ? $$selectedVal : $$selectedVal[0]';
    var code = "var $$selectedVal = " + selectedVal + ";";
    code = code + " " + (genAssignmentCode(value, assignment));
    addHandler(el, 'change', code, null, true);
  }

  function genDefaultModel (
    el,
    value,
    modifiers
  ) {
    var type = el.attrsMap.type;

    // warn if v-bind:value conflicts with v-model
    // except for inputs with v-bind:type
    {
      var value$1 = el.attrsMap['v-bind:value'] || el.attrsMap[':value'];
      var typeBinding = el.attrsMap['v-bind:type'] || el.attrsMap[':type'];
      if (value$1 && !typeBinding) {
        var binding = el.attrsMap['v-bind:value'] ? 'v-bind:value' : ':value';
        warn$1(
          binding + "=\"" + value$1 + "\" conflicts with v-model on the same element " +
          'because the latter already expands to a value binding internally',
          el.rawAttrsMap[binding]
        );
      }
    }

    var ref = modifiers || {};
    var lazy = ref.lazy;
    var number = ref.number;
    var trim = ref.trim;
    var needCompositionGuard = !lazy && type !== 'range';
    var event = lazy
      ? 'change'
      : type === 'range'
        ? RANGE_TOKEN
        : 'input';

    var valueExpression = '$event.target.value';
    if (trim) {
      valueExpression = "$event.target.value.trim()";
    }
    if (number) {
      valueExpression = "_n(" + valueExpression + ")";
    }

    var code = genAssignmentCode(value, valueExpression);
    if (needCompositionGuard) {
      code = "if($event.target.composing)return;" + code;
    }

    addProp(el, 'value', ("(" + value + ")"));
    addHandler(el, event, code, null, true);
    if (trim || number) {
      addHandler(el, 'blur', '$forceUpdate()');
    }
  }

  /*  */

  // normalize v-model event tokens that can only be determined at runtime.
  // it's important to place the event as the first in the array because
  // the whole point is ensuring the v-model callback gets called before
  // user-attached handlers.
  function normalizeEvents (on) {
    /* istanbul ignore if */
    if (isDef(on[RANGE_TOKEN])) {
      // IE input[type=range] only supports `change` event
      var event = isIE ? 'change' : 'input';
      on[event] = [].concat(on[RANGE_TOKEN], on[event] || []);
      delete on[RANGE_TOKEN];
    }
    // This was originally intended to fix #4521 but no longer necessary
    // after 2.5. Keeping it for backwards compat with generated code from < 2.4
    /* istanbul ignore if */
    if (isDef(on[CHECKBOX_RADIO_TOKEN])) {
      on.change = [].concat(on[CHECKBOX_RADIO_TOKEN], on.change || []);
      delete on[CHECKBOX_RADIO_TOKEN];
    }
  }

  var target$1;

  function createOnceHandler$1 (event, handler, capture) {
    var _target = target$1; // save current target element in closure
    return function onceHandler () {
      var res = handler.apply(null, arguments);
      if (res !== null) {
        remove$2(event, onceHandler, capture, _target);
      }
    }
  }

  // #9446: Firefox <= 53 (in particular, ESR 52) has incorrect Event.timeStamp
  // implementation and does not fire microtasks in between event propagation, so
  // safe to exclude.
  var useMicrotaskFix = isUsingMicroTask && !(isFF && Number(isFF[1]) <= 53);

  function add$1 (
    name,
    handler,
    capture,
    passive
  ) {
    // async edge case #6566: inner click event triggers patch, event handler
    // attached to outer element during patch, and triggered again. This
    // happens because browsers fire microtask ticks between event propagation.
    // the solution is simple: we save the timestamp when a handler is attached,
    // and the handler would only fire if the event passed to it was fired
    // AFTER it was attached.
    if (useMicrotaskFix) {
      var attachedTimestamp = currentFlushTimestamp;
      var original = handler;
      handler = original._wrapper = function (e) {
        if (
          // no bubbling, should always fire.
          // this is just a safety net in case event.timeStamp is unreliable in
          // certain weird environments...
          e.target === e.currentTarget ||
          // event is fired after handler attachment
          e.timeStamp >= attachedTimestamp ||
          // bail for environments that have buggy event.timeStamp implementations
          // #9462 iOS 9 bug: event.timeStamp is 0 after history.pushState
          // #9681 QtWebEngine event.timeStamp is negative value
          e.timeStamp <= 0 ||
          // #9448 bail if event is fired in another document in a multi-page
          // electron/nw.js app, since event.timeStamp will be using a different
          // starting reference
          e.target.ownerDocument !== document
        ) {
          return original.apply(this, arguments)
        }
      };
    }
    target$1.addEventListener(
      name,
      handler,
      supportsPassive
        ? { capture: capture, passive: passive }
        : capture
    );
  }

  function remove$2 (
    name,
    handler,
    capture,
    _target
  ) {
    (_target || target$1).removeEventListener(
      name,
      handler._wrapper || handler,
      capture
    );
  }

  function updateDOMListeners (oldVnode, vnode) {
    if (isUndef(oldVnode.data.on) && isUndef(vnode.data.on)) {
      return
    }
    var on = vnode.data.on || {};
    var oldOn = oldVnode.data.on || {};
    target$1 = vnode.elm;
    normalizeEvents(on);
    updateListeners(on, oldOn, add$1, remove$2, createOnceHandler$1, vnode.context);
    target$1 = undefined;
  }

  var events = {
    create: updateDOMListeners,
    update: updateDOMListeners
  };

  /*  */

  var svgContainer;

  function updateDOMProps (oldVnode, vnode) {
    if (isUndef(oldVnode.data.domProps) && isUndef(vnode.data.domProps)) {
      return
    }
    var key, cur;
    var elm = vnode.elm;
    var oldProps = oldVnode.data.domProps || {};
    var props = vnode.data.domProps || {};
    // clone observed objects, as the user probably wants to mutate it
    if (isDef(props.__ob__)) {
      props = vnode.data.domProps = extend({}, props);
    }

    for (key in oldProps) {
      if (!(key in props)) {
        elm[key] = '';
      }
    }

    for (key in props) {
      cur = props[key];
      // ignore children if the node has textContent or innerHTML,
      // as these will throw away existing DOM nodes and cause removal errors
      // on subsequent patches (#3360)
      if (key === 'textContent' || key === 'innerHTML') {
        if (vnode.children) { vnode.children.length = 0; }
        if (cur === oldProps[key]) { continue }
        // #6601 work around Chrome version <= 55 bug where single textNode
        // replaced by innerHTML/textContent retains its parentNode property
        if (elm.childNodes.length === 1) {
          elm.removeChild(elm.childNodes[0]);
        }
      }

      if (key === 'value' && elm.tagName !== 'PROGRESS') {
        // store value as _value as well since
        // non-string values will be stringified
        elm._value = cur;
        // avoid resetting cursor position when value is the same
        var strCur = isUndef(cur) ? '' : String(cur);
        if (shouldUpdateValue(elm, strCur)) {
          elm.value = strCur;
        }
      } else if (key === 'innerHTML' && isSVG(elm.tagName) && isUndef(elm.innerHTML)) {
        // IE doesn't support innerHTML for SVG elements
        svgContainer = svgContainer || document.createElement('div');
        svgContainer.innerHTML = "<svg>" + cur + "</svg>";
        var svg = svgContainer.firstChild;
        while (elm.firstChild) {
          elm.removeChild(elm.firstChild);
        }
        while (svg.firstChild) {
          elm.appendChild(svg.firstChild);
        }
      } else if (
        // skip the update if old and new VDOM state is the same.
        // `value` is handled separately because the DOM value may be temporarily
        // out of sync with VDOM state due to focus, composition and modifiers.
        // This  #4521 by skipping the unnecesarry `checked` update.
        cur !== oldProps[key]
      ) {
        // some property updates can throw
        // e.g. `value` on <progress> w/ non-finite value
        try {
          elm[key] = cur;
        } catch (e) {}
      }
    }
  }

  // check platforms/web/util/attrs.js acceptValue


  function shouldUpdateValue (elm, checkVal) {
    return (!elm.composing && (
      elm.tagName === 'OPTION' ||
      isNotInFocusAndDirty(elm, checkVal) ||
      isDirtyWithModifiers(elm, checkVal)
    ))
  }

  function isNotInFocusAndDirty (elm, checkVal) {
    // return true when textbox (.number and .trim) loses focus and its value is
    // not equal to the updated value
    var notInFocus = true;
    // #6157
    // work around IE bug when accessing document.activeElement in an iframe
    try { notInFocus = document.activeElement !== elm; } catch (e) {}
    return notInFocus && elm.value !== checkVal
  }

  function isDirtyWithModifiers (elm, newVal) {
    var value = elm.value;
    var modifiers = elm._vModifiers; // injected by v-model runtime
    if (isDef(modifiers)) {
      if (modifiers.number) {
        return toNumber(value) !== toNumber(newVal)
      }
      if (modifiers.trim) {
        return value.trim() !== newVal.trim()
      }
    }
    return value !== newVal
  }

  var domProps = {
    create: updateDOMProps,
    update: updateDOMProps
  };

  /*  */

  var parseStyleText = cached(function (cssText) {
    var res = {};
    var listDelimiter = /;(?![^(]*\))/g;
    var propertyDelimiter = /:(.+)/;
    cssText.split(listDelimiter).forEach(function (item) {
      if (item) {
        var tmp = item.split(propertyDelimiter);
        tmp.length > 1 && (res[tmp[0].trim()] = tmp[1].trim());
      }
    });
    return res
  });

  // merge static and dynamic style data on the same vnode
  function normalizeStyleData (data) {
    var style = normalizeStyleBinding(data.style);
    // static style is pre-processed into an object during compilation
    // and is always a fresh object, so it's safe to merge into it
    return data.staticStyle
      ? extend(data.staticStyle, style)
      : style
  }

  // normalize possible array / string values into Object
  function normalizeStyleBinding (bindingStyle) {
    if (Array.isArray(bindingStyle)) {
      return toObject(bindingStyle)
    }
    if (typeof bindingStyle === 'string') {
      return parseStyleText(bindingStyle)
    }
    return bindingStyle
  }

  /**
   * parent component style should be after child's
   * so that parent component's style could override it
   */
  function getStyle (vnode, checkChild) {
    var res = {};
    var styleData;

    if (checkChild) {
      var childNode = vnode;
      while (childNode.componentInstance) {
        childNode = childNode.componentInstance._vnode;
        if (
          childNode && childNode.data &&
          (styleData = normalizeStyleData(childNode.data))
        ) {
          extend(res, styleData);
        }
      }
    }

    if ((styleData = normalizeStyleData(vnode.data))) {
      extend(res, styleData);
    }

    var parentNode = vnode;
    while ((parentNode = parentNode.parent)) {
      if (parentNode.data && (styleData = normalizeStyleData(parentNode.data))) {
        extend(res, styleData);
      }
    }
    return res
  }

  /*  */

  var cssVarRE = /^--/;
  var importantRE = /\s*!important$/;
  var setProp = function (el, name, val) {
    /* istanbul ignore if */
    if (cssVarRE.test(name)) {
      el.style.setProperty(name, val);
    } else if (importantRE.test(val)) {
      el.style.setProperty(hyphenate(name), val.replace(importantRE, ''), 'important');
    } else {
      var normalizedName = normalize(name);
      if (Array.isArray(val)) {
        // Support values array created by autoprefixer, e.g.
        // {display: ["-webkit-box", "-ms-flexbox", "flex"]}
        // Set them one by one, and the browser will only set those it can recognize
        for (var i = 0, len = val.length; i < len; i++) {
          el.style[normalizedName] = val[i];
        }
      } else {
        el.style[normalizedName] = val;
      }
    }
  };

  var vendorNames = ['Webkit', 'Moz', 'ms'];

  var emptyStyle;
  var normalize = cached(function (prop) {
    emptyStyle = emptyStyle || document.createElement('div').style;
    prop = camelize(prop);
    if (prop !== 'filter' && (prop in emptyStyle)) {
      return prop
    }
    var capName = prop.charAt(0).toUpperCase() + prop.slice(1);
    for (var i = 0; i < vendorNames.length; i++) {
      var name = vendorNames[i] + capName;
      if (name in emptyStyle) {
        return name
      }
    }
  });

  function updateStyle (oldVnode, vnode) {
    var data = vnode.data;
    var oldData = oldVnode.data;

    if (isUndef(data.staticStyle) && isUndef(data.style) &&
      isUndef(oldData.staticStyle) && isUndef(oldData.style)
    ) {
      return
    }

    var cur, name;
    var el = vnode.elm;
    var oldStaticStyle = oldData.staticStyle;
    var oldStyleBinding = oldData.normalizedStyle || oldData.style || {};

    // if static style exists, stylebinding already merged into it when doing normalizeStyleData
    var oldStyle = oldStaticStyle || oldStyleBinding;

    var style = normalizeStyleBinding(vnode.data.style) || {};

    // store normalized style under a different key for next diff
    // make sure to clone it if it's reactive, since the user likely wants
    // to mutate it.
    vnode.data.normalizedStyle = isDef(style.__ob__)
      ? extend({}, style)
      : style;

    var newStyle = getStyle(vnode, true);

    for (name in oldStyle) {
      if (isUndef(newStyle[name])) {
        setProp(el, name, '');
      }
    }
    for (name in newStyle) {
      cur = newStyle[name];
      if (cur !== oldStyle[name]) {
        // ie9 setting to null has no effect, must use empty string
        setProp(el, name, cur == null ? '' : cur);
      }
    }
  }

  var style = {
    create: updateStyle,
    update: updateStyle
  };

  /*  */

  var whitespaceRE = /\s+/;

  /**
   * Add class with compatibility for SVG since classList is not supported on
   * SVG elements in IE
   */
  function addClass (el, cls) {
    /* istanbul ignore if */
    if (!cls || !(cls = cls.trim())) {
      return
    }

    /* istanbul ignore else */
    if (el.classList) {
      if (cls.indexOf(' ') > -1) {
        cls.split(whitespaceRE).forEach(function (c) { return el.classList.add(c); });
      } else {
        el.classList.add(cls);
      }
    } else {
      var cur = " " + (el.getAttribute('class') || '') + " ";
      if (cur.indexOf(' ' + cls + ' ') < 0) {
        el.setAttribute('class', (cur + cls).trim());
      }
    }
  }

  /**
   * Remove class with compatibility for SVG since classList is not supported on
   * SVG elements in IE
   */
  function removeClass (el, cls) {
    /* istanbul ignore if */
    if (!cls || !(cls = cls.trim())) {
      return
    }

    /* istanbul ignore else */
    if (el.classList) {
      if (cls.indexOf(' ') > -1) {
        cls.split(whitespaceRE).forEach(function (c) { return el.classList.remove(c); });
      } else {
        el.classList.remove(cls);
      }
      if (!el.classList.length) {
        el.removeAttribute('class');
      }
    } else {
      var cur = " " + (el.getAttribute('class') || '') + " ";
      var tar = ' ' + cls + ' ';
      while (cur.indexOf(tar) >= 0) {
        cur = cur.replace(tar, ' ');
      }
      cur = cur.trim();
      if (cur) {
        el.setAttribute('class', cur);
      } else {
        el.removeAttribute('class');
      }
    }
  }

  /*  */

  function resolveTransition (def$$1) {
    if (!def$$1) {
      return
    }
    /* istanbul ignore else */
    if (typeof def$$1 === 'object') {
      var res = {};
      if (def$$1.css !== false) {
        extend(res, autoCssTransition(def$$1.name || 'v'));
      }
      extend(res, def$$1);
      return res
    } else if (typeof def$$1 === 'string') {
      return autoCssTransition(def$$1)
    }
  }

  var autoCssTransition = cached(function (name) {
    return {
      enterClass: (name + "-enter"),
      enterToClass: (name + "-enter-to"),
      enterActiveClass: (name + "-enter-active"),
      leaveClass: (name + "-leave"),
      leaveToClass: (name + "-leave-to"),
      leaveActiveClass: (name + "-leave-active")
    }
  });

  var hasTransition = inBrowser && !isIE9;
  var TRANSITION = 'transition';
  var ANIMATION = 'animation';

  // Transition property/event sniffing
  var transitionProp = 'transition';
  var transitionEndEvent = 'transitionend';
  var animationProp = 'animation';
  var animationEndEvent = 'animationend';
  if (hasTransition) {
    /* istanbul ignore if */
    if (window.ontransitionend === undefined &&
      window.onwebkittransitionend !== undefined
    ) {
      transitionProp = 'WebkitTransition';
      transitionEndEvent = 'webkitTransitionEnd';
    }
    if (window.onanimationend === undefined &&
      window.onwebkitanimationend !== undefined
    ) {
      animationProp = 'WebkitAnimation';
      animationEndEvent = 'webkitAnimationEnd';
    }
  }

  // binding to window is necessary to make hot reload work in IE in strict mode
  var raf = inBrowser
    ? window.requestAnimationFrame
      ? window.requestAnimationFrame.bind(window)
      : setTimeout
    : /* istanbul ignore next */ function (fn) { return fn(); };

  function nextFrame (fn) {
    raf(function () {
      raf(fn);
    });
  }

  function addTransitionClass (el, cls) {
    var transitionClasses = el._transitionClasses || (el._transitionClasses = []);
    if (transitionClasses.indexOf(cls) < 0) {
      transitionClasses.push(cls);
      addClass(el, cls);
    }
  }

  function removeTransitionClass (el, cls) {
    if (el._transitionClasses) {
      remove(el._transitionClasses, cls);
    }
    removeClass(el, cls);
  }

  function whenTransitionEnds (
    el,
    expectedType,
    cb
  ) {
    var ref = getTransitionInfo(el, expectedType);
    var type = ref.type;
    var timeout = ref.timeout;
    var propCount = ref.propCount;
    if (!type) { return cb() }
    var event = type === TRANSITION ? transitionEndEvent : animationEndEvent;
    var ended = 0;
    var end = function () {
      el.removeEventListener(event, onEnd);
      cb();
    };
    var onEnd = function (e) {
      if (e.target === el) {
        if (++ended >= propCount) {
          end();
        }
      }
    };
    setTimeout(function () {
      if (ended < propCount) {
        end();
      }
    }, timeout + 1);
    el.addEventListener(event, onEnd);
  }

  var transformRE = /\b(transform|all)(,|$)/;

  function getTransitionInfo (el, expectedType) {
    var styles = window.getComputedStyle(el);
    // JSDOM may return undefined for transition properties
    var transitionDelays = (styles[transitionProp + 'Delay'] || '').split(', ');
    var transitionDurations = (styles[transitionProp + 'Duration'] || '').split(', ');
    var transitionTimeout = getTimeout(transitionDelays, transitionDurations);
    var animationDelays = (styles[animationProp + 'Delay'] || '').split(', ');
    var animationDurations = (styles[animationProp + 'Duration'] || '').split(', ');
    var animationTimeout = getTimeout(animationDelays, animationDurations);

    var type;
    var timeout = 0;
    var propCount = 0;
    /* istanbul ignore if */
    if (expectedType === TRANSITION) {
      if (transitionTimeout > 0) {
        type = TRANSITION;
        timeout = transitionTimeout;
        propCount = transitionDurations.length;
      }
    } else if (expectedType === ANIMATION) {
      if (animationTimeout > 0) {
        type = ANIMATION;
        timeout = animationTimeout;
        propCount = animationDurations.length;
      }
    } else {
      timeout = Math.max(transitionTimeout, animationTimeout);
      type = timeout > 0
        ? transitionTimeout > animationTimeout
          ? TRANSITION
          : ANIMATION
        : null;
      propCount = type
        ? type === TRANSITION
          ? transitionDurations.length
          : animationDurations.length
        : 0;
    }
    var hasTransform =
      type === TRANSITION &&
      transformRE.test(styles[transitionProp + 'Property']);
    return {
      type: type,
      timeout: timeout,
      propCount: propCount,
      hasTransform: hasTransform
    }
  }

  function getTimeout (delays, durations) {
    /* istanbul ignore next */
    while (delays.length < durations.length) {
      delays = delays.concat(delays);
    }

    return Math.max.apply(null, durations.map(function (d, i) {
      return toMs(d) + toMs(delays[i])
    }))
  }

  // Old versions of Chromium (below 61.0.3163.100) formats floating pointer numbers
  // in a locale-dependent way, using a comma instead of a dot.
  // If comma is not replaced with a dot, the input will be rounded down (i.e. acting
  // as a floor function) causing unexpected behaviors
  function toMs (s) {
    return Number(s.slice(0, -1).replace(',', '.')) * 1000
  }

  /*  */

  function enter (vnode, toggleDisplay) {
    var el = vnode.elm;

    // call leave callback now
    if (isDef(el._leaveCb)) {
      el._leaveCb.cancelled = true;
      el._leaveCb();
    }

    var data = resolveTransition(vnode.data.transition);
    if (isUndef(data)) {
      return
    }

    /* istanbul ignore if */
    if (isDef(el._enterCb) || el.nodeType !== 1) {
      return
    }

    var css = data.css;
    var type = data.type;
    var enterClass = data.enterClass;
    var enterToClass = data.enterToClass;
    var enterActiveClass = data.enterActiveClass;
    var appearClass = data.appearClass;
    var appearToClass = data.appearToClass;
    var appearActiveClass = data.appearActiveClass;
    var beforeEnter = data.beforeEnter;
    var enter = data.enter;
    var afterEnter = data.afterEnter;
    var enterCancelled = data.enterCancelled;
    var beforeAppear = data.beforeAppear;
    var appear = data.appear;
    var afterAppear = data.afterAppear;
    var appearCancelled = data.appearCancelled;
    var duration = data.duration;

    // activeInstance will always be the <transition> component managing this
    // transition. One edge case to check is when the <transition> is placed
    // as the root node of a child component. In that case we need to check
    // <transition>'s parent for appear check.
    var context = activeInstance;
    var transitionNode = activeInstance.$vnode;
    while (transitionNode && transitionNode.parent) {
      context = transitionNode.context;
      transitionNode = transitionNode.parent;
    }

    var isAppear = !context._isMounted || !vnode.isRootInsert;

    if (isAppear && !appear && appear !== '') {
      return
    }

    var startClass = isAppear && appearClass
      ? appearClass
      : enterClass;
    var activeClass = isAppear && appearActiveClass
      ? appearActiveClass
      : enterActiveClass;
    var toClass = isAppear && appearToClass
      ? appearToClass
      : enterToClass;

    var beforeEnterHook = isAppear
      ? (beforeAppear || beforeEnter)
      : beforeEnter;
    var enterHook = isAppear
      ? (typeof appear === 'function' ? appear : enter)
      : enter;
    var afterEnterHook = isAppear
      ? (afterAppear || afterEnter)
      : afterEnter;
    var enterCancelledHook = isAppear
      ? (appearCancelled || enterCancelled)
      : enterCancelled;

    var explicitEnterDuration = toNumber(
      isObject(duration)
        ? duration.enter
        : duration
    );

    if (explicitEnterDuration != null) {
      checkDuration(explicitEnterDuration, 'enter', vnode);
    }

    var expectsCSS = css !== false && !isIE9;
    var userWantsControl = getHookArgumentsLength(enterHook);

    var cb = el._enterCb = once(function () {
      if (expectsCSS) {
        removeTransitionClass(el, toClass);
        removeTransitionClass(el, activeClass);
      }
      if (cb.cancelled) {
        if (expectsCSS) {
          removeTransitionClass(el, startClass);
        }
        enterCancelledHook && enterCancelledHook(el);
      } else {
        afterEnterHook && afterEnterHook(el);
      }
      el._enterCb = null;
    });

    if (!vnode.data.show) {
      // remove pending leave element on enter by injecting an insert hook
      mergeVNodeHook(vnode, 'insert', function () {
        var parent = el.parentNode;
        var pendingNode = parent && parent._pending && parent._pending[vnode.key];
        if (pendingNode &&
          pendingNode.tag === vnode.tag &&
          pendingNode.elm._leaveCb
        ) {
          pendingNode.elm._leaveCb();
        }
        enterHook && enterHook(el, cb);
      });
    }

    // start enter transition
    beforeEnterHook && beforeEnterHook(el);
    if (expectsCSS) {
      addTransitionClass(el, startClass);
      addTransitionClass(el, activeClass);
      nextFrame(function () {
        removeTransitionClass(el, startClass);
        if (!cb.cancelled) {
          addTransitionClass(el, toClass);
          if (!userWantsControl) {
            if (isValidDuration(explicitEnterDuration)) {
              setTimeout(cb, explicitEnterDuration);
            } else {
              whenTransitionEnds(el, type, cb);
            }
          }
        }
      });
    }

    if (vnode.data.show) {
      toggleDisplay && toggleDisplay();
      enterHook && enterHook(el, cb);
    }

    if (!expectsCSS && !userWantsControl) {
      cb();
    }
  }

  function leave (vnode, rm) {
    var el = vnode.elm;

    // call enter callback now
    if (isDef(el._enterCb)) {
      el._enterCb.cancelled = true;
      el._enterCb();
    }

    var data = resolveTransition(vnode.data.transition);
    if (isUndef(data) || el.nodeType !== 1) {
      return rm()
    }

    /* istanbul ignore if */
    if (isDef(el._leaveCb)) {
      return
    }

    var css = data.css;
    var type = data.type;
    var leaveClass = data.leaveClass;
    var leaveToClass = data.leaveToClass;
    var leaveActiveClass = data.leaveActiveClass;
    var beforeLeave = data.beforeLeave;
    var leave = data.leave;
    var afterLeave = data.afterLeave;
    var leaveCancelled = data.leaveCancelled;
    var delayLeave = data.delayLeave;
    var duration = data.duration;

    var expectsCSS = css !== false && !isIE9;
    var userWantsControl = getHookArgumentsLength(leave);

    var explicitLeaveDuration = toNumber(
      isObject(duration)
        ? duration.leave
        : duration
    );

    if (isDef(explicitLeaveDuration)) {
      checkDuration(explicitLeaveDuration, 'leave', vnode);
    }

    var cb = el._leaveCb = once(function () {
      if (el.parentNode && el.parentNode._pending) {
        el.parentNode._pending[vnode.key] = null;
      }
      if (expectsCSS) {
        removeTransitionClass(el, leaveToClass);
        removeTransitionClass(el, leaveActiveClass);
      }
      if (cb.cancelled) {
        if (expectsCSS) {
          removeTransitionClass(el, leaveClass);
        }
        leaveCancelled && leaveCancelled(el);
      } else {
        rm();
        afterLeave && afterLeave(el);
      }
      el._leaveCb = null;
    });

    if (delayLeave) {
      delayLeave(performLeave);
    } else {
      performLeave();
    }

    function performLeave () {
      // the delayed leave may have already been cancelled
      if (cb.cancelled) {
        return
      }
      // record leaving element
      if (!vnode.data.show && el.parentNode) {
        (el.parentNode._pending || (el.parentNode._pending = {}))[(vnode.key)] = vnode;
      }
      beforeLeave && beforeLeave(el);
      if (expectsCSS) {
        addTransitionClass(el, leaveClass);
        addTransitionClass(el, leaveActiveClass);
        nextFrame(function () {
          removeTransitionClass(el, leaveClass);
          if (!cb.cancelled) {
            addTransitionClass(el, leaveToClass);
            if (!userWantsControl) {
              if (isValidDuration(explicitLeaveDuration)) {
                setTimeout(cb, explicitLeaveDuration);
              } else {
                whenTransitionEnds(el, type, cb);
              }
            }
          }
        });
      }
      leave && leave(el, cb);
      if (!expectsCSS && !userWantsControl) {
        cb();
      }
    }
  }

  // only used in dev mode
  function checkDuration (val, name, vnode) {
    if (typeof val !== 'number') {
      warn(
        "<transition> explicit " + name + " duration is not a valid number - " +
        "got " + (JSON.stringify(val)) + ".",
        vnode.context
      );
    } else if (isNaN(val)) {
      warn(
        "<transition> explicit " + name + " duration is NaN - " +
        'the duration expression might be incorrect.',
        vnode.context
      );
    }
  }

  function isValidDuration (val) {
    return typeof val === 'number' && !isNaN(val)
  }

  /**
   * Normalize a transition hook's argument length. The hook may be:
   * - a merged hook (invoker) with the original in .fns
   * - a wrapped component method (check ._length)
   * - a plain function (.length)
   */
  function getHookArgumentsLength (fn) {
    if (isUndef(fn)) {
      return false
    }
    var invokerFns = fn.fns;
    if (isDef(invokerFns)) {
      // invoker
      return getHookArgumentsLength(
        Array.isArray(invokerFns)
          ? invokerFns[0]
          : invokerFns
      )
    } else {
      return (fn._length || fn.length) > 1
    }
  }

  function _enter (_, vnode) {
    if (vnode.data.show !== true) {
      enter(vnode);
    }
  }

  var transition = inBrowser ? {
    create: _enter,
    activate: _enter,
    remove: function remove (vnode, rm) {
      /* istanbul ignore else */
      if (vnode.data.show !== true) {
        leave(vnode, rm);
      } else {
        rm();
      }
    }
  } : {};

  var platformModules = [
    attrs,
    klass,
    events,
    domProps,
    style,
    transition
  ];

  /*  */

  // the directive module should be applied last, after all
  // built-in modules have been applied.
  var modules = platformModules.concat(baseModules);

  var patch = createPatchFunction({ nodeOps: nodeOps, modules: modules });

  /**
   * Not type checking this file because flow doesn't like attaching
   * properties to Elements.
   */

  /* istanbul ignore if */
  if (isIE9) {
    // http://www.matts411.com/post/internet-explorer-9-oninput/
    document.addEventListener('selectionchange', function () {
      var el = document.activeElement;
      if (el && el.vmodel) {
        trigger(el, 'input');
      }
    });
  }

  var directive = {
    inserted: function inserted (el, binding, vnode, oldVnode) {
      if (vnode.tag === 'select') {
        // #6903
        if (oldVnode.elm && !oldVnode.elm._vOptions) {
          mergeVNodeHook(vnode, 'postpatch', function () {
            directive.componentUpdated(el, binding, vnode);
          });
        } else {
          setSelected(el, binding, vnode.context);
        }
        el._vOptions = [].map.call(el.options, getValue);
      } else if (vnode.tag === 'textarea' || isTextInputType(el.type)) {
        el._vModifiers = binding.modifiers;
        if (!binding.modifiers.lazy) {
          el.addEventListener('compositionstart', onCompositionStart);
          el.addEventListener('compositionend', onCompositionEnd);
          // Safari < 10.2 & UIWebView doesn't fire compositionend when
          // switching focus before confirming composition choice
          // this also fixes the issue where some browsers e.g. iOS Chrome
          // fires "change" instead of "input" on autocomplete.
          el.addEventListener('change', onCompositionEnd);
          /* istanbul ignore if */
          if (isIE9) {
            el.vmodel = true;
          }
        }
      }
    },

    componentUpdated: function componentUpdated (el, binding, vnode) {
      if (vnode.tag === 'select') {
        setSelected(el, binding, vnode.context);
        // in case the options rendered by v-for have changed,
        // it's possible that the value is out-of-sync with the rendered options.
        // detect such cases and filter out values that no longer has a matching
        // option in the DOM.
        var prevOptions = el._vOptions;
        var curOptions = el._vOptions = [].map.call(el.options, getValue);
        if (curOptions.some(function (o, i) { return !looseEqual(o, prevOptions[i]); })) {
          // trigger change event if
          // no matching option found for at least one value
          var needReset = el.multiple
            ? binding.value.some(function (v) { return hasNoMatchingOption(v, curOptions); })
            : binding.value !== binding.oldValue && hasNoMatchingOption(binding.value, curOptions);
          if (needReset) {
            trigger(el, 'change');
          }
        }
      }
    }
  };

  function setSelected (el, binding, vm) {
    actuallySetSelected(el, binding, vm);
    /* istanbul ignore if */
    if (isIE || isEdge) {
      setTimeout(function () {
        actuallySetSelected(el, binding, vm);
      }, 0);
    }
  }

  function actuallySetSelected (el, binding, vm) {
    var value = binding.value;
    var isMultiple = el.multiple;
    if (isMultiple && !Array.isArray(value)) {
      warn(
        "<select multiple v-model=\"" + (binding.expression) + "\"> " +
        "expects an Array value for its binding, but got " + (Object.prototype.toString.call(value).slice(8, -1)),
        vm
      );
      return
    }
    var selected, option;
    for (var i = 0, l = el.options.length; i < l; i++) {
      option = el.options[i];
      if (isMultiple) {
        selected = looseIndexOf(value, getValue(option)) > -1;
        if (option.selected !== selected) {
          option.selected = selected;
        }
      } else {
        if (looseEqual(getValue(option), value)) {
          if (el.selectedIndex !== i) {
            el.selectedIndex = i;
          }
          return
        }
      }
    }
    if (!isMultiple) {
      el.selectedIndex = -1;
    }
  }

  function hasNoMatchingOption (value, options) {
    return options.every(function (o) { return !looseEqual(o, value); })
  }

  function getValue (option) {
    return '_value' in option
      ? option._value
      : option.value
  }

  function onCompositionStart (e) {
    e.target.composing = true;
  }

  function onCompositionEnd (e) {
    // prevent triggering an input event for no reason
    if (!e.target.composing) { return }
    e.target.composing = false;
    trigger(e.target, 'input');
  }

  function trigger (el, type) {
    var e = document.createEvent('HTMLEvents');
    e.initEvent(type, true, true);
    el.dispatchEvent(e);
  }

  /*  */

  // recursively search for possible transition defined inside the component root
  function locateNode (vnode) {
    return vnode.componentInstance && (!vnode.data || !vnode.data.transition)
      ? locateNode(vnode.componentInstance._vnode)
      : vnode
  }

  var show = {
    bind: function bind (el, ref, vnode) {
      var value = ref.value;

      vnode = locateNode(vnode);
      var transition$$1 = vnode.data && vnode.data.transition;
      var originalDisplay = el.__vOriginalDisplay =
        el.style.display === 'none' ? '' : el.style.display;
      if (value && transition$$1) {
        vnode.data.show = true;
        enter(vnode, function () {
          el.style.display = originalDisplay;
        });
      } else {
        el.style.display = value ? originalDisplay : 'none';
      }
    },

    update: function update (el, ref, vnode) {
      var value = ref.value;
      var oldValue = ref.oldValue;

      /* istanbul ignore if */
      if (!value === !oldValue) { return }
      vnode = locateNode(vnode);
      var transition$$1 = vnode.data && vnode.data.transition;
      if (transition$$1) {
        vnode.data.show = true;
        if (value) {
          enter(vnode, function () {
            el.style.display = el.__vOriginalDisplay;
          });
        } else {
          leave(vnode, function () {
            el.style.display = 'none';
          });
        }
      } else {
        el.style.display = value ? el.__vOriginalDisplay : 'none';
      }
    },

    unbind: function unbind (
      el,
      binding,
      vnode,
      oldVnode,
      isDestroy
    ) {
      if (!isDestroy) {
        el.style.display = el.__vOriginalDisplay;
      }
    }
  };

  var platformDirectives = {
    model: directive,
    show: show
  };

  /*  */

  var transitionProps = {
    name: String,
    appear: Boolean,
    css: Boolean,
    mode: String,
    type: String,
    enterClass: String,
    leaveClass: String,
    enterToClass: String,
    leaveToClass: String,
    enterActiveClass: String,
    leaveActiveClass: String,
    appearClass: String,
    appearActiveClass: String,
    appearToClass: String,
    duration: [Number, String, Object]
  };

  // in case the child is also an abstract component, e.g. <keep-alive>
  // we want to recursively retrieve the real component to be rendered
  function getRealChild (vnode) {
    var compOptions = vnode && vnode.componentOptions;
    if (compOptions && compOptions.Ctor.options.abstract) {
      return getRealChild(getFirstComponentChild(compOptions.children))
    } else {
      return vnode
    }
  }

  function extractTransitionData (comp) {
    var data = {};
    var options = comp.$options;
    // props
    for (var key in options.propsData) {
      data[key] = comp[key];
    }
    // events.
    // extract listeners and pass them directly to the transition methods
    var listeners = options._parentListeners;
    for (var key$1 in listeners) {
      data[camelize(key$1)] = listeners[key$1];
    }
    return data
  }

  function placeholder (h, rawChild) {
    if (/\d-keep-alive$/.test(rawChild.tag)) {
      return h('keep-alive', {
        props: rawChild.componentOptions.propsData
      })
    }
  }

  function hasParentTransition (vnode) {
    while ((vnode = vnode.parent)) {
      if (vnode.data.transition) {
        return true
      }
    }
  }

  function isSameChild (child, oldChild) {
    return oldChild.key === child.key && oldChild.tag === child.tag
  }

  var isNotTextNode = function (c) { return c.tag || isAsyncPlaceholder(c); };

  var isVShowDirective = function (d) { return d.name === 'show'; };

  var Transition = {
    name: 'transition',
    props: transitionProps,
    abstract: true,

    render: function render (h) {
      var this$1 = this;

      var children = this.$slots.default;
      if (!children) {
        return
      }

      // filter out text nodes (possible whitespaces)
      children = children.filter(isNotTextNode);
      /* istanbul ignore if */
      if (!children.length) {
        return
      }

      // warn multiple elements
      if (children.length > 1) {
        warn(
          '<transition> can only be used on a single element. Use ' +
          '<transition-group> for lists.',
          this.$parent
        );
      }

      var mode = this.mode;

      // warn invalid mode
      if (mode && mode !== 'in-out' && mode !== 'out-in'
      ) {
        warn(
          'invalid <transition> mode: ' + mode,
          this.$parent
        );
      }

      var rawChild = children[0];

      // if this is a component root node and the component's
      // parent container node also has transition, skip.
      if (hasParentTransition(this.$vnode)) {
        return rawChild
      }

      // apply transition data to child
      // use getRealChild() to ignore abstract components e.g. keep-alive
      var child = getRealChild(rawChild);
      /* istanbul ignore if */
      if (!child) {
        return rawChild
      }

      if (this._leaving) {
        return placeholder(h, rawChild)
      }

      // ensure a key that is unique to the vnode type and to this transition
      // component instance. This key will be used to remove pending leaving nodes
      // during entering.
      var id = "__transition-" + (this._uid) + "-";
      child.key = child.key == null
        ? child.isComment
          ? id + 'comment'
          : id + child.tag
        : isPrimitive(child.key)
          ? (String(child.key).indexOf(id) === 0 ? child.key : id + child.key)
          : child.key;

      var data = (child.data || (child.data = {})).transition = extractTransitionData(this);
      var oldRawChild = this._vnode;
      var oldChild = getRealChild(oldRawChild);

      // mark v-show
      // so that the transition module can hand over the control to the directive
      if (child.data.directives && child.data.directives.some(isVShowDirective)) {
        child.data.show = true;
      }

      if (
        oldChild &&
        oldChild.data &&
        !isSameChild(child, oldChild) &&
        !isAsyncPlaceholder(oldChild) &&
        // #6687 component root is a comment node
        !(oldChild.componentInstance && oldChild.componentInstance._vnode.isComment)
      ) {
        // replace old child transition data with fresh one
        // important for dynamic transitions!
        var oldData = oldChild.data.transition = extend({}, data);
        // handle transition mode
        if (mode === 'out-in') {
          // return placeholder node and queue update when leave finishes
          this._leaving = true;
          mergeVNodeHook(oldData, 'afterLeave', function () {
            this$1._leaving = false;
            this$1.$forceUpdate();
          });
          return placeholder(h, rawChild)
        } else if (mode === 'in-out') {
          if (isAsyncPlaceholder(child)) {
            return oldRawChild
          }
          var delayedLeave;
          var performLeave = function () { delayedLeave(); };
          mergeVNodeHook(data, 'afterEnter', performLeave);
          mergeVNodeHook(data, 'enterCancelled', performLeave);
          mergeVNodeHook(oldData, 'delayLeave', function (leave) { delayedLeave = leave; });
        }
      }

      return rawChild
    }
  };

  /*  */

  var props = extend({
    tag: String,
    moveClass: String
  }, transitionProps);

  delete props.mode;

  var TransitionGroup = {
    props: props,

    beforeMount: function beforeMount () {
      var this$1 = this;

      var update = this._update;
      this._update = function (vnode, hydrating) {
        var restoreActiveInstance = setActiveInstance(this$1);
        // force removing pass
        this$1.__patch__(
          this$1._vnode,
          this$1.kept,
          false, // hydrating
          true // removeOnly (!important, avoids unnecessary moves)
        );
        this$1._vnode = this$1.kept;
        restoreActiveInstance();
        update.call(this$1, vnode, hydrating);
      };
    },

    render: function render (h) {
      var tag = this.tag || this.$vnode.data.tag || 'span';
      var map = Object.create(null);
      var prevChildren = this.prevChildren = this.children;
      var rawChildren = this.$slots.default || [];
      var children = this.children = [];
      var transitionData = extractTransitionData(this);

      for (var i = 0; i < rawChildren.length; i++) {
        var c = rawChildren[i];
        if (c.tag) {
          if (c.key != null && String(c.key).indexOf('__vlist') !== 0) {
            children.push(c);
            map[c.key] = c
            ;(c.data || (c.data = {})).transition = transitionData;
          } else {
            var opts = c.componentOptions;
            var name = opts ? (opts.Ctor.options.name || opts.tag || '') : c.tag;
            warn(("<transition-group> children must be keyed: <" + name + ">"));
          }
        }
      }

      if (prevChildren) {
        var kept = [];
        var removed = [];
        for (var i$1 = 0; i$1 < prevChildren.length; i$1++) {
          var c$1 = prevChildren[i$1];
          c$1.data.transition = transitionData;
          c$1.data.pos = c$1.elm.getBoundingClientRect();
          if (map[c$1.key]) {
            kept.push(c$1);
          } else {
            removed.push(c$1);
          }
        }
        this.kept = h(tag, null, kept);
        this.removed = removed;
      }

      return h(tag, null, children)
    },

    updated: function updated () {
      var children = this.prevChildren;
      var moveClass = this.moveClass || ((this.name || 'v') + '-move');
      if (!children.length || !this.hasMove(children[0].elm, moveClass)) {
        return
      }

      // we divide the work into three loops to avoid mixing DOM reads and writes
      // in each iteration - which helps prevent layout thrashing.
      children.forEach(callPendingCbs);
      children.forEach(recordPosition);
      children.forEach(applyTranslation);

      // force reflow to put everything in position
      // assign to this to avoid being removed in tree-shaking
      // $flow-disable-line
      this._reflow = document.body.offsetHeight;

      children.forEach(function (c) {
        if (c.data.moved) {
          var el = c.elm;
          var s = el.style;
          addTransitionClass(el, moveClass);
          s.transform = s.WebkitTransform = s.transitionDuration = '';
          el.addEventListener(transitionEndEvent, el._moveCb = function cb (e) {
            if (e && e.target !== el) {
              return
            }
            if (!e || /transform$/.test(e.propertyName)) {
              el.removeEventListener(transitionEndEvent, cb);
              el._moveCb = null;
              removeTransitionClass(el, moveClass);
            }
          });
        }
      });
    },

    methods: {
      hasMove: function hasMove (el, moveClass) {
        /* istanbul ignore if */
        if (!hasTransition) {
          return false
        }
        /* istanbul ignore if */
        if (this._hasMove) {
          return this._hasMove
        }
        // Detect whether an element with the move class applied has
        // CSS transitions. Since the element may be inside an entering
        // transition at this very moment, we make a clone of it and remove
        // all other transition classes applied to ensure only the move class
        // is applied.
        var clone = el.cloneNode();
        if (el._transitionClasses) {
          el._transitionClasses.forEach(function (cls) { removeClass(clone, cls); });
        }
        addClass(clone, moveClass);
        clone.style.display = 'none';
        this.$el.appendChild(clone);
        var info = getTransitionInfo(clone);
        this.$el.removeChild(clone);
        return (this._hasMove = info.hasTransform)
      }
    }
  };

  function callPendingCbs (c) {
    /* istanbul ignore if */
    if (c.elm._moveCb) {
      c.elm._moveCb();
    }
    /* istanbul ignore if */
    if (c.elm._enterCb) {
      c.elm._enterCb();
    }
  }

  function recordPosition (c) {
    c.data.newPos = c.elm.getBoundingClientRect();
  }

  function applyTranslation (c) {
    var oldPos = c.data.pos;
    var newPos = c.data.newPos;
    var dx = oldPos.left - newPos.left;
    var dy = oldPos.top - newPos.top;
    if (dx || dy) {
      c.data.moved = true;
      var s = c.elm.style;
      s.transform = s.WebkitTransform = "translate(" + dx + "px," + dy + "px)";
      s.transitionDuration = '0s';
    }
  }

  var platformComponents = {
    Transition: Transition,
    TransitionGroup: TransitionGroup
  };

  /*  */

  // install platform specific utils
  Vue.config.mustUseProp = mustUseProp;
  Vue.config.isReservedTag = isReservedTag;
  Vue.config.isReservedAttr = isReservedAttr;
  Vue.config.getTagNamespace = getTagNamespace;
  Vue.config.isUnknownElement = isUnknownElement;

  // install platform runtime directives & components
  extend(Vue.options.directives, platformDirectives);
  extend(Vue.options.components, platformComponents);

  // install platform patch function
  Vue.prototype.__patch__ = inBrowser ? patch : noop;

  // public mount method
  Vue.prototype.$mount = function (
    el,
    hydrating
  ) {
    el = el && inBrowser ? query(el) : undefined;
    return mountComponent(this, el, hydrating)
  };

  // devtools global hook
  /* istanbul ignore next */
  if (inBrowser) {
    setTimeout(function () {
      if (config.devtools) {
        if (devtools) {
          devtools.emit('init', Vue);
        } else {
          console[console.info ? 'info' : 'log'](
            'Download the Vue Devtools extension for a better development experience:\n' +
            'https://github.com/vuejs/vue-devtools'
          );
        }
      }
      if (config.productionTip !== false &&
        typeof console !== 'undefined'
      ) {
        console[console.info ? 'info' : 'log'](
          "You are running Vue in development mode.\n" +
          "Make sure to turn on production mode when deploying for production.\n" +
          "See more tips at https://vuejs.org/guide/deployment.html"
        );
      }
    }, 0);
  }

  /*  */

  var defaultTagRE = /\{\{((?:.|\r?\n)+?)\}\}/g;
  var regexEscapeRE = /[-.*+?^${}()|[\]\/\\]/g;

  var buildRegex = cached(function (delimiters) {
    var open = delimiters[0].replace(regexEscapeRE, '\\$&');
    var close = delimiters[1].replace(regexEscapeRE, '\\$&');
    return new RegExp(open + '((?:.|\\n)+?)' + close, 'g')
  });



  function parseText (
    text,
    delimiters
  ) {
    var tagRE = delimiters ? buildRegex(delimiters) : defaultTagRE;
    if (!tagRE.test(text)) {
      return
    }
    var tokens = [];
    var rawTokens = [];
    var lastIndex = tagRE.lastIndex = 0;
    var match, index, tokenValue;
    while ((match = tagRE.exec(text))) {
      index = match.index;
      // push text token
      if (index > lastIndex) {
        rawTokens.push(tokenValue = text.slice(lastIndex, index));
        tokens.push(JSON.stringify(tokenValue));
      }
      // tag token
      var exp = parseFilters(match[1].trim());
      tokens.push(("_s(" + exp + ")"));
      rawTokens.push({ '@binding': exp });
      lastIndex = index + match[0].length;
    }
    if (lastIndex < text.length) {
      rawTokens.push(tokenValue = text.slice(lastIndex));
      tokens.push(JSON.stringify(tokenValue));
    }
    return {
      expression: tokens.join('+'),
      tokens: rawTokens
    }
  }

  /*  */

  function transformNode (el, options) {
    var warn = options.warn || baseWarn;
    var staticClass = getAndRemoveAttr(el, 'class');
    if (staticClass) {
      var res = parseText(staticClass, options.delimiters);
      if (res) {
        warn(
          "class=\"" + staticClass + "\": " +
          'Interpolation inside attributes has been removed. ' +
          'Use v-bind or the colon shorthand instead. For example, ' +
          'instead of <div class="{{ val }}">, use <div :class="val">.',
          el.rawAttrsMap['class']
        );
      }
    }
    if (staticClass) {
      el.staticClass = JSON.stringify(staticClass);
    }
    var classBinding = getBindingAttr(el, 'class', false /* getStatic */);
    if (classBinding) {
      el.classBinding = classBinding;
    }
  }

  function genData (el) {
    var data = '';
    if (el.staticClass) {
      data += "staticClass:" + (el.staticClass) + ",";
    }
    if (el.classBinding) {
      data += "class:" + (el.classBinding) + ",";
    }
    return data
  }

  var klass$1 = {
    staticKeys: ['staticClass'],
    transformNode: transformNode,
    genData: genData
  };

  /*  */

  function transformNode$1 (el, options) {
    var warn = options.warn || baseWarn;
    var staticStyle = getAndRemoveAttr(el, 'style');
    if (staticStyle) {
      /* istanbul ignore if */
      {
        var res = parseText(staticStyle, options.delimiters);
        if (res) {
          warn(
            "style=\"" + staticStyle + "\": " +
            'Interpolation inside attributes has been removed. ' +
            'Use v-bind or the colon shorthand instead. For example, ' +
            'instead of <div style="{{ val }}">, use <div :style="val">.',
            el.rawAttrsMap['style']
          );
        }
      }
      el.staticStyle = JSON.stringify(parseStyleText(staticStyle));
    }

    var styleBinding = getBindingAttr(el, 'style', false /* getStatic */);
    if (styleBinding) {
      el.styleBinding = styleBinding;
    }
  }

  function genData$1 (el) {
    var data = '';
    if (el.staticStyle) {
      data += "staticStyle:" + (el.staticStyle) + ",";
    }
    if (el.styleBinding) {
      data += "style:(" + (el.styleBinding) + "),";
    }
    return data
  }

  var style$1 = {
    staticKeys: ['staticStyle'],
    transformNode: transformNode$1,
    genData: genData$1
  };

  /*  */

  var decoder;

  var he = {
    decode: function decode (html) {
      decoder = decoder || document.createElement('div');
      decoder.innerHTML = html;
      return decoder.textContent
    }
  };

  /*  */

  var isUnaryTag = makeMap(
    'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,' +
    'link,meta,param,source,track,wbr'
  );

  // Elements that you can, intentionally, leave open
  // (and which close themselves)
  var canBeLeftOpenTag = makeMap(
    'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'
  );

  // HTML5 tags https://html.spec.whatwg.org/multipage/indices.html#elements-3
  // Phrasing Content https://html.spec.whatwg.org/multipage/dom.html#phrasing-content
  var isNonPhrasingTag = makeMap(
    'address,article,aside,base,blockquote,body,caption,col,colgroup,dd,' +
    'details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,' +
    'h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,' +
    'optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,' +
    'title,tr,track'
  );

  /**
   * Not type-checking this file because it's mostly vendor code.
   */

  // Regular Expressions for parsing tags and attributes
  var attribute = /^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
  var dynamicArgAttribute = /^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/;
  var ncname = "[a-zA-Z_][\\-\\.0-9_a-zA-Z" + (unicodeRegExp.source) + "]*";
  var qnameCapture = "((?:" + ncname + "\\:)?" + ncname + ")";
  var startTagOpen = new RegExp(("^<" + qnameCapture));
  var startTagClose = /^\s*(\/?)>/;
  var endTag = new RegExp(("^<\\/" + qnameCapture + "[^>]*>"));
  var doctype = /^<!DOCTYPE [^>]+>/i;
  // #7298: escape - to avoid being pased as HTML comment when inlined in page
  var comment = /^<!\--/;
  var conditionalComment = /^<!\[/;

  // Special Elements (can contain anything)
  var isPlainTextElement = makeMap('script,style,textarea', true);
  var reCache = {};

  var decodingMap = {
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&amp;': '&',
    '&#10;': '\n',
    '&#9;': '\t',
    '&#39;': "'"
  };
  var encodedAttr = /&(?:lt|gt|quot|amp|#39);/g;
  var encodedAttrWithNewLines = /&(?:lt|gt|quot|amp|#39|#10|#9);/g;

  // #5992
  var isIgnoreNewlineTag = makeMap('pre,textarea', true);
  var shouldIgnoreFirstNewline = function (tag, html) { return tag && isIgnoreNewlineTag(tag) && html[0] === '\n'; };

  function decodeAttr (value, shouldDecodeNewlines) {
    var re = shouldDecodeNewlines ? encodedAttrWithNewLines : encodedAttr;
    return value.replace(re, function (match) { return decodingMap[match]; })
  }

  function parseHTML (html, options) {
    var stack = [];
    var expectHTML = options.expectHTML;
    var isUnaryTag$$1 = options.isUnaryTag || no;
    var canBeLeftOpenTag$$1 = options.canBeLeftOpenTag || no;
    var index = 0;
    var last, lastTag;
    while (html) {
      last = html;
      // Make sure we're not in a plaintext content element like script/style
      if (!lastTag || !isPlainTextElement(lastTag)) {
        var textEnd = html.indexOf('<');
        if (textEnd === 0) {
          // Comment:
          if (comment.test(html)) {
            var commentEnd = html.indexOf('-->');

            if (commentEnd >= 0) {
              if (options.shouldKeepComment) {
                options.comment(html.substring(4, commentEnd), index, index + commentEnd + 3);
              }
              advance(commentEnd + 3);
              continue
            }
          }

          // http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment
          if (conditionalComment.test(html)) {
            var conditionalEnd = html.indexOf(']>');

            if (conditionalEnd >= 0) {
              advance(conditionalEnd + 2);
              continue
            }
          }

          // Doctype:
          var doctypeMatch = html.match(doctype);
          if (doctypeMatch) {
            advance(doctypeMatch[0].length);
            continue
          }

          // End tag:
          var endTagMatch = html.match(endTag);
          if (endTagMatch) {
            var curIndex = index;
            advance(endTagMatch[0].length);
            parseEndTag(endTagMatch[1], curIndex, index);
            continue
          }

          // Start tag:
          var startTagMatch = parseStartTag();
          if (startTagMatch) {
            handleStartTag(startTagMatch);
            if (shouldIgnoreFirstNewline(startTagMatch.tagName, html)) {
              advance(1);
            }
            continue
          }
        }

        var text = (void 0), rest = (void 0), next = (void 0);
        if (textEnd >= 0) {
          rest = html.slice(textEnd);
          while (
            !endTag.test(rest) &&
            !startTagOpen.test(rest) &&
            !comment.test(rest) &&
            !conditionalComment.test(rest)
          ) {
            // < in plain text, be forgiving and treat it as text
            next = rest.indexOf('<', 1);
            if (next < 0) { break }
            textEnd += next;
            rest = html.slice(textEnd);
          }
          text = html.substring(0, textEnd);
        }

        if (textEnd < 0) {
          text = html;
        }

        if (text) {
          advance(text.length);
        }

        if (options.chars && text) {
          options.chars(text, index - text.length, index);
        }
      } else {
        var endTagLength = 0;
        var stackedTag = lastTag.toLowerCase();
        var reStackedTag = reCache[stackedTag] || (reCache[stackedTag] = new RegExp('([\\s\\S]*?)(</' + stackedTag + '[^>]*>)', 'i'));
        var rest$1 = html.replace(reStackedTag, function (all, text, endTag) {
          endTagLength = endTag.length;
          if (!isPlainTextElement(stackedTag) && stackedTag !== 'noscript') {
            text = text
              .replace(/<!\--([\s\S]*?)-->/g, '$1') // #7298
              .replace(/<!\[CDATA\[([\s\S]*?)]]>/g, '$1');
          }
          if (shouldIgnoreFirstNewline(stackedTag, text)) {
            text = text.slice(1);
          }
          if (options.chars) {
            options.chars(text);
          }
          return ''
        });
        index += html.length - rest$1.length;
        html = rest$1;
        parseEndTag(stackedTag, index - endTagLength, index);
      }

      if (html === last) {
        options.chars && options.chars(html);
        if (!stack.length && options.warn) {
          options.warn(("Mal-formatted tag at end of template: \"" + html + "\""), { start: index + html.length });
        }
        break
      }
    }

    // Clean up any remaining tags
    parseEndTag();

    function advance (n) {
      index += n;
      html = html.substring(n);
    }

    function parseStartTag () {
      var start = html.match(startTagOpen);
      if (start) {
        var match = {
          tagName: start[1],
          attrs: [],
          start: index
        };
        advance(start[0].length);
        var end, attr;
        while (!(end = html.match(startTagClose)) && (attr = html.match(dynamicArgAttribute) || html.match(attribute))) {
          attr.start = index;
          advance(attr[0].length);
          attr.end = index;
          match.attrs.push(attr);
        }
        if (end) {
          match.unarySlash = end[1];
          advance(end[0].length);
          match.end = index;
          return match
        }
      }
    }

    function handleStartTag (match) {
      var tagName = match.tagName;
      var unarySlash = match.unarySlash;

      if (expectHTML) {
        if (lastTag === 'p' && isNonPhrasingTag(tagName)) {
          parseEndTag(lastTag);
        }
        if (canBeLeftOpenTag$$1(tagName) && lastTag === tagName) {
          parseEndTag(tagName);
        }
      }

      var unary = isUnaryTag$$1(tagName) || !!unarySlash;

      var l = match.attrs.length;
      var attrs = new Array(l);
      for (var i = 0; i < l; i++) {
        var args = match.attrs[i];
        var value = args[3] || args[4] || args[5] || '';
        var shouldDecodeNewlines = tagName === 'a' && args[1] === 'href'
          ? options.shouldDecodeNewlinesForHref
          : options.shouldDecodeNewlines;
        attrs[i] = {
          name: args[1],
          value: decodeAttr(value, shouldDecodeNewlines)
        };
        if (options.outputSourceRange) {
          attrs[i].start = args.start + args[0].match(/^\s*/).length;
          attrs[i].end = args.end;
        }
      }

      if (!unary) {
        stack.push({ tag: tagName, lowerCasedTag: tagName.toLowerCase(), attrs: attrs, start: match.start, end: match.end });
        lastTag = tagName;
      }

      if (options.start) {
        options.start(tagName, attrs, unary, match.start, match.end);
      }
    }

    function parseEndTag (tagName, start, end) {
      var pos, lowerCasedTagName;
      if (start == null) { start = index; }
      if (end == null) { end = index; }

      // Find the closest opened tag of the same type
      if (tagName) {
        lowerCasedTagName = tagName.toLowerCase();
        for (pos = stack.length - 1; pos >= 0; pos--) {
          if (stack[pos].lowerCasedTag === lowerCasedTagName) {
            break
          }
        }
      } else {
        // If no tag name is provided, clean shop
        pos = 0;
      }

      if (pos >= 0) {
        // Close all the open elements, up the stack
        for (var i = stack.length - 1; i >= pos; i--) {
          if (i > pos || !tagName &&
            options.warn
          ) {
            options.warn(
              ("tag <" + (stack[i].tag) + "> has no matching end tag."),
              { start: stack[i].start, end: stack[i].end }
            );
          }
          if (options.end) {
            options.end(stack[i].tag, start, end);
          }
        }

        // Remove the open elements from the stack
        stack.length = pos;
        lastTag = pos && stack[pos - 1].tag;
      } else if (lowerCasedTagName === 'br') {
        if (options.start) {
          options.start(tagName, [], true, start, end);
        }
      } else if (lowerCasedTagName === 'p') {
        if (options.start) {
          options.start(tagName, [], false, start, end);
        }
        if (options.end) {
          options.end(tagName, start, end);
        }
      }
    }
  }

  /*  */

  var onRE = /^@|^v-on:/;
  var dirRE = /^v-|^@|^:/;
  var forAliasRE = /([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/;
  var forIteratorRE = /,([^,\}\]]*)(?:,([^,\}\]]*))?$/;
  var stripParensRE = /^\(|\)$/g;
  var dynamicArgRE = /^\[.*\]$/;

  var argRE = /:(.*)$/;
  var bindRE = /^:|^\.|^v-bind:/;
  var modifierRE = /\.[^.\]]+(?=[^\]]*$)/g;

  var slotRE = /^v-slot(:|$)|^#/;

  var lineBreakRE = /[\r\n]/;
  var whitespaceRE$1 = /\s+/g;

  var invalidAttributeRE = /[\s"'<>\/=]/;

  var decodeHTMLCached = cached(he.decode);

  var emptySlotScopeToken = "_empty_";

  // configurable state
  var warn$2;
  var delimiters;
  var transforms;
  var preTransforms;
  var postTransforms;
  var platformIsPreTag;
  var platformMustUseProp;
  var platformGetTagNamespace;
  var maybeComponent;

  function createASTElement (
    tag,
    attrs,
    parent
  ) {
    return {
      type: 1,
      tag: tag,
      attrsList: attrs,
      attrsMap: makeAttrsMap(attrs),
      rawAttrsMap: {},
      parent: parent,
      children: []
    }
  }

  /**
   * Convert HTML string to AST.
   */
  function parse (
    template,
    options
  ) {
    warn$2 = options.warn || baseWarn;

    platformIsPreTag = options.isPreTag || no;
    platformMustUseProp = options.mustUseProp || no;
    platformGetTagNamespace = options.getTagNamespace || no;
    var isReservedTag = options.isReservedTag || no;
    maybeComponent = function (el) { return !!el.component || !isReservedTag(el.tag); };

    transforms = pluckModuleFunction(options.modules, 'transformNode');
    preTransforms = pluckModuleFunction(options.modules, 'preTransformNode');
    postTransforms = pluckModuleFunction(options.modules, 'postTransformNode');

    delimiters = options.delimiters;

    var stack = [];
    var preserveWhitespace = options.preserveWhitespace !== false;
    var whitespaceOption = options.whitespace;
    var root;
    var currentParent;
    var inVPre = false;
    var inPre = false;
    var warned = false;

    function warnOnce (msg, range) {
      if (!warned) {
        warned = true;
        warn$2(msg, range);
      }
    }

    function closeElement (element) {
      trimEndingWhitespace(element);
      if (!inVPre && !element.processed) {
        element = processElement(element, options);
      }
      // tree management
      if (!stack.length && element !== root) {
        // allow root elements with v-if, v-else-if and v-else
        if (root.if && (element.elseif || element.else)) {
          {
            checkRootConstraints(element);
          }
          addIfCondition(root, {
            exp: element.elseif,
            block: element
          });
        } else {
          warnOnce(
            "Component template should contain exactly one root element. " +
            "If you are using v-if on multiple elements, " +
            "use v-else-if to chain them instead.",
            { start: element.start }
          );
        }
      }
      if (currentParent && !element.forbidden) {
        if (element.elseif || element.else) {
          processIfConditions(element, currentParent);
        } else {
          if (element.slotScope) {
            // scoped slot
            // keep it in the children list so that v-else(-if) conditions can
            // find it as the prev node.
            var name = element.slotTarget || '"default"'
            ;(currentParent.scopedSlots || (currentParent.scopedSlots = {}))[name] = element;
          }
          currentParent.children.push(element);
          element.parent = currentParent;
        }
      }

      // final children cleanup
      // filter out scoped slots
      element.children = element.children.filter(function (c) { return !(c).slotScope; });
      // remove trailing whitespace node again
      trimEndingWhitespace(element);

      // check pre state
      if (element.pre) {
        inVPre = false;
      }
      if (platformIsPreTag(element.tag)) {
        inPre = false;
      }
      // apply post-transforms
      for (var i = 0; i < postTransforms.length; i++) {
        postTransforms[i](element, options);
      }
    }

    function trimEndingWhitespace (el) {
      // remove trailing whitespace node
      if (!inPre) {
        var lastNode;
        while (
          (lastNode = el.children[el.children.length - 1]) &&
          lastNode.type === 3 &&
          lastNode.text === ' '
        ) {
          el.children.pop();
        }
      }
    }

    function checkRootConstraints (el) {
      if (el.tag === 'slot' || el.tag === 'template') {
        warnOnce(
          "Cannot use <" + (el.tag) + "> as component root element because it may " +
          'contain multiple nodes.',
          { start: el.start }
        );
      }
      if (el.attrsMap.hasOwnProperty('v-for')) {
        warnOnce(
          'Cannot use v-for on stateful component root element because ' +
          'it renders multiple elements.',
          el.rawAttrsMap['v-for']
        );
      }
    }

    parseHTML(template, {
      warn: warn$2,
      expectHTML: options.expectHTML,
      isUnaryTag: options.isUnaryTag,
      canBeLeftOpenTag: options.canBeLeftOpenTag,
      shouldDecodeNewlines: options.shouldDecodeNewlines,
      shouldDecodeNewlinesForHref: options.shouldDecodeNewlinesForHref,
      shouldKeepComment: options.comments,
      outputSourceRange: options.outputSourceRange,
      start: function start (tag, attrs, unary, start$1, end) {
        // check namespace.
        // inherit parent ns if there is one
        var ns = (currentParent && currentParent.ns) || platformGetTagNamespace(tag);

        // handle IE svg bug
        /* istanbul ignore if */
        if (isIE && ns === 'svg') {
          attrs = guardIESVGBug(attrs);
        }

        var element = createASTElement(tag, attrs, currentParent);
        if (ns) {
          element.ns = ns;
        }

        {
          if (options.outputSourceRange) {
            element.start = start$1;
            element.end = end;
            element.rawAttrsMap = element.attrsList.reduce(function (cumulated, attr) {
              cumulated[attr.name] = attr;
              return cumulated
            }, {});
          }
          attrs.forEach(function (attr) {
            if (invalidAttributeRE.test(attr.name)) {
              warn$2(
                "Invalid dynamic argument expression: attribute names cannot contain " +
                "spaces, quotes, <, >, / or =.",
                {
                  start: attr.start + attr.name.indexOf("["),
                  end: attr.start + attr.name.length
                }
              );
            }
          });
        }

        if (isForbiddenTag(element) && !isServerRendering()) {
          element.forbidden = true;
          warn$2(
            'Templates should only be responsible for mapping the state to the ' +
            'UI. Avoid placing tags with side-effects in your templates, such as ' +
            "<" + tag + ">" + ', as they will not be parsed.',
            { start: element.start }
          );
        }

        // apply pre-transforms
        for (var i = 0; i < preTransforms.length; i++) {
          element = preTransforms[i](element, options) || element;
        }

        if (!inVPre) {
          processPre(element);
          if (element.pre) {
            inVPre = true;
          }
        }
        if (platformIsPreTag(element.tag)) {
          inPre = true;
        }
        if (inVPre) {
          processRawAttrs(element);
        } else if (!element.processed) {
          // structural directives
          processFor(element);
          processIf(element);
          processOnce(element);
        }

        if (!root) {
          root = element;
          {
            checkRootConstraints(root);
          }
        }

        if (!unary) {
          currentParent = element;
          stack.push(element);
        } else {
          closeElement(element);
        }
      },

      end: function end (tag, start, end$1) {
        var element = stack[stack.length - 1];
        // pop stack
        stack.length -= 1;
        currentParent = stack[stack.length - 1];
        if (options.outputSourceRange) {
          element.end = end$1;
        }
        closeElement(element);
      },

      chars: function chars (text, start, end) {
        if (!currentParent) {
          {
            if (text === template) {
              warnOnce(
                'Component template requires a root element, rather than just text.',
                { start: start }
              );
            } else if ((text = text.trim())) {
              warnOnce(
                ("text \"" + text + "\" outside root element will be ignored."),
                { start: start }
              );
            }
          }
          return
        }
        // IE textarea placeholder bug
        /* istanbul ignore if */
        if (isIE &&
          currentParent.tag === 'textarea' &&
          currentParent.attrsMap.placeholder === text
        ) {
          return
        }
        var children = currentParent.children;
        if (inPre || text.trim()) {
          text = isTextTag(currentParent) ? text : decodeHTMLCached(text);
        } else if (!children.length) {
          // remove the whitespace-only node right after an opening tag
          text = '';
        } else if (whitespaceOption) {
          if (whitespaceOption === 'condense') {
            // in condense mode, remove the whitespace node if it contains
            // line break, otherwise condense to a single space
            text = lineBreakRE.test(text) ? '' : ' ';
          } else {
            text = ' ';
          }
        } else {
          text = preserveWhitespace ? ' ' : '';
        }
        if (text) {
          if (!inPre && whitespaceOption === 'condense') {
            // condense consecutive whitespaces into single space
            text = text.replace(whitespaceRE$1, ' ');
          }
          var res;
          var child;
          if (!inVPre && text !== ' ' && (res = parseText(text, delimiters))) {
            child = {
              type: 2,
              expression: res.expression,
              tokens: res.tokens,
              text: text
            };
          } else if (text !== ' ' || !children.length || children[children.length - 1].text !== ' ') {
            child = {
              type: 3,
              text: text
            };
          }
          if (child) {
            if (options.outputSourceRange) {
              child.start = start;
              child.end = end;
            }
            children.push(child);
          }
        }
      },
      comment: function comment (text, start, end) {
        // adding anyting as a sibling to the root node is forbidden
        // comments should still be allowed, but ignored
        if (currentParent) {
          var child = {
            type: 3,
            text: text,
            isComment: true
          };
          if (options.outputSourceRange) {
            child.start = start;
            child.end = end;
          }
          currentParent.children.push(child);
        }
      }
    });
    return root
  }

  function processPre (el) {
    if (getAndRemoveAttr(el, 'v-pre') != null) {
      el.pre = true;
    }
  }

  function processRawAttrs (el) {
    var list = el.attrsList;
    var len = list.length;
    if (len) {
      var attrs = el.attrs = new Array(len);
      for (var i = 0; i < len; i++) {
        attrs[i] = {
          name: list[i].name,
          value: JSON.stringify(list[i].value)
        };
        if (list[i].start != null) {
          attrs[i].start = list[i].start;
          attrs[i].end = list[i].end;
        }
      }
    } else if (!el.pre) {
      // non root node in pre blocks with no attributes
      el.plain = true;
    }
  }

  function processElement (
    element,
    options
  ) {
    processKey(element);

    // determine whether this is a plain element after
    // removing structural attributes
    element.plain = (
      !element.key &&
      !element.scopedSlots &&
      !element.attrsList.length
    );

    processRef(element);
    processSlotContent(element);
    processSlotOutlet(element);
    processComponent(element);
    for (var i = 0; i < transforms.length; i++) {
      element = transforms[i](element, options) || element;
    }
    processAttrs(element);
    return element
  }

  function processKey (el) {
    var exp = getBindingAttr(el, 'key');
    if (exp) {
      {
        if (el.tag === 'template') {
          warn$2(
            "<template> cannot be keyed. Place the key on real elements instead.",
            getRawBindingAttr(el, 'key')
          );
        }
        if (el.for) {
          var iterator = el.iterator2 || el.iterator1;
          var parent = el.parent;
          if (iterator && iterator === exp && parent && parent.tag === 'transition-group') {
            warn$2(
              "Do not use v-for index as key on <transition-group> children, " +
              "this is the same as not using keys.",
              getRawBindingAttr(el, 'key'),
              true /* tip */
            );
          }
        }
      }
      el.key = exp;
    }
  }

  function processRef (el) {
    var ref = getBindingAttr(el, 'ref');
    if (ref) {
      el.ref = ref;
      el.refInFor = checkInFor(el);
    }
  }

  function processFor (el) {
    var exp;
    if ((exp = getAndRemoveAttr(el, 'v-for'))) {
      var res = parseFor(exp);
      if (res) {
        extend(el, res);
      } else {
        warn$2(
          ("Invalid v-for expression: " + exp),
          el.rawAttrsMap['v-for']
        );
      }
    }
  }



  function parseFor (exp) {
    var inMatch = exp.match(forAliasRE);
    if (!inMatch) { return }
    var res = {};
    res.for = inMatch[2].trim();
    var alias = inMatch[1].trim().replace(stripParensRE, '');
    var iteratorMatch = alias.match(forIteratorRE);
    if (iteratorMatch) {
      res.alias = alias.replace(forIteratorRE, '').trim();
      res.iterator1 = iteratorMatch[1].trim();
      if (iteratorMatch[2]) {
        res.iterator2 = iteratorMatch[2].trim();
      }
    } else {
      res.alias = alias;
    }
    return res
  }

  function processIf (el) {
    var exp = getAndRemoveAttr(el, 'v-if');
    if (exp) {
      el.if = exp;
      addIfCondition(el, {
        exp: exp,
        block: el
      });
    } else {
      if (getAndRemoveAttr(el, 'v-else') != null) {
        el.else = true;
      }
      var elseif = getAndRemoveAttr(el, 'v-else-if');
      if (elseif) {
        el.elseif = elseif;
      }
    }
  }

  function processIfConditions (el, parent) {
    var prev = findPrevElement(parent.children);
    if (prev && prev.if) {
      addIfCondition(prev, {
        exp: el.elseif,
        block: el
      });
    } else {
      warn$2(
        "v-" + (el.elseif ? ('else-if="' + el.elseif + '"') : 'else') + " " +
        "used on element <" + (el.tag) + "> without corresponding v-if.",
        el.rawAttrsMap[el.elseif ? 'v-else-if' : 'v-else']
      );
    }
  }

  function findPrevElement (children) {
    var i = children.length;
    while (i--) {
      if (children[i].type === 1) {
        return children[i]
      } else {
        if (children[i].text !== ' ') {
          warn$2(
            "text \"" + (children[i].text.trim()) + "\" between v-if and v-else(-if) " +
            "will be ignored.",
            children[i]
          );
        }
        children.pop();
      }
    }
  }

  function addIfCondition (el, condition) {
    if (!el.ifConditions) {
      el.ifConditions = [];
    }
    el.ifConditions.push(condition);
  }

  function processOnce (el) {
    var once$$1 = getAndRemoveAttr(el, 'v-once');
    if (once$$1 != null) {
      el.once = true;
    }
  }

  // handle content being passed to a component as slot,
  // e.g. <template slot="xxx">, <div slot-scope="xxx">
  function processSlotContent (el) {
    var slotScope;
    if (el.tag === 'template') {
      slotScope = getAndRemoveAttr(el, 'scope');
      /* istanbul ignore if */
      if (slotScope) {
        warn$2(
          "the \"scope\" attribute for scoped slots have been deprecated and " +
          "replaced by \"slot-scope\" since 2.5. The new \"slot-scope\" attribute " +
          "can also be used on plain elements in addition to <template> to " +
          "denote scoped slots.",
          el.rawAttrsMap['scope'],
          true
        );
      }
      el.slotScope = slotScope || getAndRemoveAttr(el, 'slot-scope');
    } else if ((slotScope = getAndRemoveAttr(el, 'slot-scope'))) {
      /* istanbul ignore if */
      if (el.attrsMap['v-for']) {
        warn$2(
          "Ambiguous combined usage of slot-scope and v-for on <" + (el.tag) + "> " +
          "(v-for takes higher priority). Use a wrapper <template> for the " +
          "scoped slot to make it clearer.",
          el.rawAttrsMap['slot-scope'],
          true
        );
      }
      el.slotScope = slotScope;
    }

    // slot="xxx"
    var slotTarget = getBindingAttr(el, 'slot');
    if (slotTarget) {
      el.slotTarget = slotTarget === '""' ? '"default"' : slotTarget;
      el.slotTargetDynamic = !!(el.attrsMap[':slot'] || el.attrsMap['v-bind:slot']);
      // preserve slot as an attribute for native shadow DOM compat
      // only for non-scoped slots.
      if (el.tag !== 'template' && !el.slotScope) {
        addAttr(el, 'slot', slotTarget, getRawBindingAttr(el, 'slot'));
      }
    }

    // 2.6 v-slot syntax
    {
      if (el.tag === 'template') {
        // v-slot on <template>
        var slotBinding = getAndRemoveAttrByRegex(el, slotRE);
        if (slotBinding) {
          {
            if (el.slotTarget || el.slotScope) {
              warn$2(
                "Unexpected mixed usage of different slot syntaxes.",
                el
              );
            }
            if (el.parent && !maybeComponent(el.parent)) {
              warn$2(
                "<template v-slot> can only appear at the root level inside " +
                "the receiving the component",
                el
              );
            }
          }
          var ref = getSlotName(slotBinding);
          var name = ref.name;
          var dynamic = ref.dynamic;
          el.slotTarget = name;
          el.slotTargetDynamic = dynamic;
          el.slotScope = slotBinding.value || emptySlotScopeToken; // force it into a scoped slot for perf
        }
      } else {
        // v-slot on component, denotes default slot
        var slotBinding$1 = getAndRemoveAttrByRegex(el, slotRE);
        if (slotBinding$1) {
          {
            if (!maybeComponent(el)) {
              warn$2(
                "v-slot can only be used on components or <template>.",
                slotBinding$1
              );
            }
            if (el.slotScope || el.slotTarget) {
              warn$2(
                "Unexpected mixed usage of different slot syntaxes.",
                el
              );
            }
            if (el.scopedSlots) {
              warn$2(
                "To avoid scope ambiguity, the default slot should also use " +
                "<template> syntax when there are other named slots.",
                slotBinding$1
              );
            }
          }
          // add the component's children to its default slot
          var slots = el.scopedSlots || (el.scopedSlots = {});
          var ref$1 = getSlotName(slotBinding$1);
          var name$1 = ref$1.name;
          var dynamic$1 = ref$1.dynamic;
          var slotContainer = slots[name$1] = createASTElement('template', [], el);
          slotContainer.slotTarget = name$1;
          slotContainer.slotTargetDynamic = dynamic$1;
          slotContainer.children = el.children.filter(function (c) {
            if (!c.slotScope) {
              c.parent = slotContainer;
              return true
            }
          });
          slotContainer.slotScope = slotBinding$1.value || emptySlotScopeToken;
          // remove children as they are returned from scopedSlots now
          el.children = [];
          // mark el non-plain so data gets generated
          el.plain = false;
        }
      }
    }
  }

  function getSlotName (binding) {
    var name = binding.name.replace(slotRE, '');
    if (!name) {
      if (binding.name[0] !== '#') {
        name = 'default';
      } else {
        warn$2(
          "v-slot shorthand syntax requires a slot name.",
          binding
        );
      }
    }
    return dynamicArgRE.test(name)
      // dynamic [name]
      ? { name: name.slice(1, -1), dynamic: true }
      // static name
      : { name: ("\"" + name + "\""), dynamic: false }
  }

  // handle <slot/> outlets
  function processSlotOutlet (el) {
    if (el.tag === 'slot') {
      el.slotName = getBindingAttr(el, 'name');
      if (el.key) {
        warn$2(
          "`key` does not work on <slot> because slots are abstract outlets " +
          "and can possibly expand into multiple elements. " +
          "Use the key on a wrapping element instead.",
          getRawBindingAttr(el, 'key')
        );
      }
    }
  }

  function processComponent (el) {
    var binding;
    if ((binding = getBindingAttr(el, 'is'))) {
      el.component = binding;
    }
    if (getAndRemoveAttr(el, 'inline-template') != null) {
      el.inlineTemplate = true;
    }
  }

  function processAttrs (el) {
    var list = el.attrsList;
    var i, l, name, rawName, value, modifiers, syncGen, isDynamic;
    for (i = 0, l = list.length; i < l; i++) {
      name = rawName = list[i].name;
      value = list[i].value;
      if (dirRE.test(name)) {
        // mark element as dynamic
        el.hasBindings = true;
        // modifiers
        modifiers = parseModifiers(name.replace(dirRE, ''));
        // support .foo shorthand syntax for the .prop modifier
        if (modifiers) {
          name = name.replace(modifierRE, '');
        }
        if (bindRE.test(name)) { // v-bind
          name = name.replace(bindRE, '');
          value = parseFilters(value);
          isDynamic = dynamicArgRE.test(name);
          if (isDynamic) {
            name = name.slice(1, -1);
          }
          if (
            value.trim().length === 0
          ) {
            warn$2(
              ("The value for a v-bind expression cannot be empty. Found in \"v-bind:" + name + "\"")
            );
          }
          if (modifiers) {
            if (modifiers.prop && !isDynamic) {
              name = camelize(name);
              if (name === 'innerHtml') { name = 'innerHTML'; }
            }
            if (modifiers.camel && !isDynamic) {
              name = camelize(name);
            }
            if (modifiers.sync) {
              syncGen = genAssignmentCode(value, "$event");
              if (!isDynamic) {
                addHandler(
                  el,
                  ("update:" + (camelize(name))),
                  syncGen,
                  null,
                  false,
                  warn$2,
                  list[i]
                );
                if (hyphenate(name) !== camelize(name)) {
                  addHandler(
                    el,
                    ("update:" + (hyphenate(name))),
                    syncGen,
                    null,
                    false,
                    warn$2,
                    list[i]
                  );
                }
              } else {
                // handler w/ dynamic event name
                addHandler(
                  el,
                  ("\"update:\"+(" + name + ")"),
                  syncGen,
                  null,
                  false,
                  warn$2,
                  list[i],
                  true // dynamic
                );
              }
            }
          }
          if ((modifiers && modifiers.prop) || (
            !el.component && platformMustUseProp(el.tag, el.attrsMap.type, name)
          )) {
            addProp(el, name, value, list[i], isDynamic);
          } else {
            addAttr(el, name, value, list[i], isDynamic);
          }
        } else if (onRE.test(name)) { // v-on
          name = name.replace(onRE, '');
          isDynamic = dynamicArgRE.test(name);
          if (isDynamic) {
            name = name.slice(1, -1);
          }
          addHandler(el, name, value, modifiers, false, warn$2, list[i], isDynamic);
        } else { // normal directives
          name = name.replace(dirRE, '');
          // parse arg
          var argMatch = name.match(argRE);
          var arg = argMatch && argMatch[1];
          isDynamic = false;
          if (arg) {
            name = name.slice(0, -(arg.length + 1));
            if (dynamicArgRE.test(arg)) {
              arg = arg.slice(1, -1);
              isDynamic = true;
            }
          }
          addDirective(el, name, rawName, value, arg, isDynamic, modifiers, list[i]);
          if (name === 'model') {
            checkForAliasModel(el, value);
          }
        }
      } else {
        // literal attribute
        {
          var res = parseText(value, delimiters);
          if (res) {
            warn$2(
              name + "=\"" + value + "\": " +
              'Interpolation inside attributes has been removed. ' +
              'Use v-bind or the colon shorthand instead. For example, ' +
              'instead of <div id="{{ val }}">, use <div :id="val">.',
              list[i]
            );
          }
        }
        addAttr(el, name, JSON.stringify(value), list[i]);
        // #6887 firefox doesn't update muted state if set via attribute
        // even immediately after element creation
        if (!el.component &&
            name === 'muted' &&
            platformMustUseProp(el.tag, el.attrsMap.type, name)) {
          addProp(el, name, 'true', list[i]);
        }
      }
    }
  }

  function checkInFor (el) {
    var parent = el;
    while (parent) {
      if (parent.for !== undefined) {
        return true
      }
      parent = parent.parent;
    }
    return false
  }

  function parseModifiers (name) {
    var match = name.match(modifierRE);
    if (match) {
      var ret = {};
      match.forEach(function (m) { ret[m.slice(1)] = true; });
      return ret
    }
  }

  function makeAttrsMap (attrs) {
    var map = {};
    for (var i = 0, l = attrs.length; i < l; i++) {
      if (
        map[attrs[i].name] && !isIE && !isEdge
      ) {
        warn$2('duplicate attribute: ' + attrs[i].name, attrs[i]);
      }
      map[attrs[i].name] = attrs[i].value;
    }
    return map
  }

  // for script (e.g. type="x/template") or style, do not decode content
  function isTextTag (el) {
    return el.tag === 'script' || el.tag === 'style'
  }

  function isForbiddenTag (el) {
    return (
      el.tag === 'style' ||
      (el.tag === 'script' && (
        !el.attrsMap.type ||
        el.attrsMap.type === 'text/javascript'
      ))
    )
  }

  var ieNSBug = /^xmlns:NS\d+/;
  var ieNSPrefix = /^NS\d+:/;

  /* istanbul ignore next */
  function guardIESVGBug (attrs) {
    var res = [];
    for (var i = 0; i < attrs.length; i++) {
      var attr = attrs[i];
      if (!ieNSBug.test(attr.name)) {
        attr.name = attr.name.replace(ieNSPrefix, '');
        res.push(attr);
      }
    }
    return res
  }

  function checkForAliasModel (el, value) {
    var _el = el;
    while (_el) {
      if (_el.for && _el.alias === value) {
        warn$2(
          "<" + (el.tag) + " v-model=\"" + value + "\">: " +
          "You are binding v-model directly to a v-for iteration alias. " +
          "This will not be able to modify the v-for source array because " +
          "writing to the alias is like modifying a function local variable. " +
          "Consider using an array of objects and use v-model on an object property instead.",
          el.rawAttrsMap['v-model']
        );
      }
      _el = _el.parent;
    }
  }

  /*  */

  function preTransformNode (el, options) {
    if (el.tag === 'input') {
      var map = el.attrsMap;
      if (!map['v-model']) {
        return
      }

      var typeBinding;
      if (map[':type'] || map['v-bind:type']) {
        typeBinding = getBindingAttr(el, 'type');
      }
      if (!map.type && !typeBinding && map['v-bind']) {
        typeBinding = "(" + (map['v-bind']) + ").type";
      }

      if (typeBinding) {
        var ifCondition = getAndRemoveAttr(el, 'v-if', true);
        var ifConditionExtra = ifCondition ? ("&&(" + ifCondition + ")") : "";
        var hasElse = getAndRemoveAttr(el, 'v-else', true) != null;
        var elseIfCondition = getAndRemoveAttr(el, 'v-else-if', true);
        // 1. checkbox
        var branch0 = cloneASTElement(el);
        // process for on the main node
        processFor(branch0);
        addRawAttr(branch0, 'type', 'checkbox');
        processElement(branch0, options);
        branch0.processed = true; // prevent it from double-processed
        branch0.if = "(" + typeBinding + ")==='checkbox'" + ifConditionExtra;
        addIfCondition(branch0, {
          exp: branch0.if,
          block: branch0
        });
        // 2. add radio else-if condition
        var branch1 = cloneASTElement(el);
        getAndRemoveAttr(branch1, 'v-for', true);
        addRawAttr(branch1, 'type', 'radio');
        processElement(branch1, options);
        addIfCondition(branch0, {
          exp: "(" + typeBinding + ")==='radio'" + ifConditionExtra,
          block: branch1
        });
        // 3. other
        var branch2 = cloneASTElement(el);
        getAndRemoveAttr(branch2, 'v-for', true);
        addRawAttr(branch2, ':type', typeBinding);
        processElement(branch2, options);
        addIfCondition(branch0, {
          exp: ifCondition,
          block: branch2
        });

        if (hasElse) {
          branch0.else = true;
        } else if (elseIfCondition) {
          branch0.elseif = elseIfCondition;
        }

        return branch0
      }
    }
  }

  function cloneASTElement (el) {
    return createASTElement(el.tag, el.attrsList.slice(), el.parent)
  }

  var model$1 = {
    preTransformNode: preTransformNode
  };

  var modules$1 = [
    klass$1,
    style$1,
    model$1
  ];

  /*  */

  function text (el, dir) {
    if (dir.value) {
      addProp(el, 'textContent', ("_s(" + (dir.value) + ")"), dir);
    }
  }

  /*  */

  function html (el, dir) {
    if (dir.value) {
      addProp(el, 'innerHTML', ("_s(" + (dir.value) + ")"), dir);
    }
  }

  var directives$1 = {
    model: model,
    text: text,
    html: html
  };

  /*  */

  var baseOptions = {
    expectHTML: true,
    modules: modules$1,
    directives: directives$1,
    isPreTag: isPreTag,
    isUnaryTag: isUnaryTag,
    mustUseProp: mustUseProp,
    canBeLeftOpenTag: canBeLeftOpenTag,
    isReservedTag: isReservedTag,
    getTagNamespace: getTagNamespace,
    staticKeys: genStaticKeys(modules$1)
  };

  /*  */

  var isStaticKey;
  var isPlatformReservedTag;

  var genStaticKeysCached = cached(genStaticKeys$1);

  /**
   * Goal of the optimizer: walk the generated template AST tree
   * and detect sub-trees that are purely static, i.e. parts of
   * the DOM that never needs to change.
   *
   * Once we detect these sub-trees, we can:
   *
   * 1. Hoist them into constants, so that we no longer need to
   *    create fresh nodes for them on each re-render;
   * 2. Completely skip them in the patching process.
   */
  function optimize (root, options) {
    if (!root) { return }
    isStaticKey = genStaticKeysCached(options.staticKeys || '');
    isPlatformReservedTag = options.isReservedTag || no;
    // first pass: mark all non-static nodes.
    markStatic$1(root);
    // second pass: mark static roots.
    markStaticRoots(root, false);
  }

  function genStaticKeys$1 (keys) {
    return makeMap(
      'type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap' +
      (keys ? ',' + keys : '')
    )
  }

  function markStatic$1 (node) {
    node.static = isStatic(node);
    if (node.type === 1) {
      // do not make component slot content static. this avoids
      // 1. components not able to mutate slot nodes
      // 2. static slot content fails for hot-reloading
      if (
        !isPlatformReservedTag(node.tag) &&
        node.tag !== 'slot' &&
        node.attrsMap['inline-template'] == null
      ) {
        return
      }
      for (var i = 0, l = node.children.length; i < l; i++) {
        var child = node.children[i];
        markStatic$1(child);
        if (!child.static) {
          node.static = false;
        }
      }
      if (node.ifConditions) {
        for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
          var block = node.ifConditions[i$1].block;
          markStatic$1(block);
          if (!block.static) {
            node.static = false;
          }
        }
      }
    }
  }

  function markStaticRoots (node, isInFor) {
    if (node.type === 1) {
      if (node.static || node.once) {
        node.staticInFor = isInFor;
      }
      // For a node to qualify as a static root, it should have children that
      // are not just static text. Otherwise the cost of hoisting out will
      // outweigh the benefits and it's better off to just always render it fresh.
      if (node.static && node.children.length && !(
        node.children.length === 1 &&
        node.children[0].type === 3
      )) {
        node.staticRoot = true;
        return
      } else {
        node.staticRoot = false;
      }
      if (node.children) {
        for (var i = 0, l = node.children.length; i < l; i++) {
          markStaticRoots(node.children[i], isInFor || !!node.for);
        }
      }
      if (node.ifConditions) {
        for (var i$1 = 1, l$1 = node.ifConditions.length; i$1 < l$1; i$1++) {
          markStaticRoots(node.ifConditions[i$1].block, isInFor);
        }
      }
    }
  }

  function isStatic (node) {
    if (node.type === 2) { // expression
      return false
    }
    if (node.type === 3) { // text
      return true
    }
    return !!(node.pre || (
      !node.hasBindings && // no dynamic bindings
      !node.if && !node.for && // not v-if or v-for or v-else
      !isBuiltInTag(node.tag) && // not a built-in
      isPlatformReservedTag(node.tag) && // not a component
      !isDirectChildOfTemplateFor(node) &&
      Object.keys(node).every(isStaticKey)
    ))
  }

  function isDirectChildOfTemplateFor (node) {
    while (node.parent) {
      node = node.parent;
      if (node.tag !== 'template') {
        return false
      }
      if (node.for) {
        return true
      }
    }
    return false
  }

  /*  */

  var fnExpRE = /^([\w$_]+|\([^)]*?\))\s*=>|^function\s*(?:[\w$]+)?\s*\(/;
  var fnInvokeRE = /\([^)]*?\);*$/;
  var simplePathRE = /^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/;

  // KeyboardEvent.keyCode aliases
  var keyCodes = {
    esc: 27,
    tab: 9,
    enter: 13,
    space: 32,
    up: 38,
    left: 37,
    right: 39,
    down: 40,
    'delete': [8, 46]
  };

  // KeyboardEvent.key aliases
  var keyNames = {
    // #7880: IE11 and Edge use `Esc` for Escape key name.
    esc: ['Esc', 'Escape'],
    tab: 'Tab',
    enter: 'Enter',
    // #9112: IE11 uses `Spacebar` for Space key name.
    space: [' ', 'Spacebar'],
    // #7806: IE11 uses key names without `Arrow` prefix for arrow keys.
    up: ['Up', 'ArrowUp'],
    left: ['Left', 'ArrowLeft'],
    right: ['Right', 'ArrowRight'],
    down: ['Down', 'ArrowDown'],
    // #9112: IE11 uses `Del` for Delete key name.
    'delete': ['Backspace', 'Delete', 'Del']
  };

  // #4868: modifiers that prevent the execution of the listener
  // need to explicitly return null so that we can determine whether to remove
  // the listener for .once
  var genGuard = function (condition) { return ("if(" + condition + ")return null;"); };

  var modifierCode = {
    stop: '$event.stopPropagation();',
    prevent: '$event.preventDefault();',
    self: genGuard("$event.target !== $event.currentTarget"),
    ctrl: genGuard("!$event.ctrlKey"),
    shift: genGuard("!$event.shiftKey"),
    alt: genGuard("!$event.altKey"),
    meta: genGuard("!$event.metaKey"),
    left: genGuard("'button' in $event && $event.button !== 0"),
    middle: genGuard("'button' in $event && $event.button !== 1"),
    right: genGuard("'button' in $event && $event.button !== 2")
  };

  function genHandlers (
    events,
    isNative
  ) {
    var prefix = isNative ? 'nativeOn:' : 'on:';
    var staticHandlers = "";
    var dynamicHandlers = "";
    for (var name in events) {
      var handlerCode = genHandler(events[name]);
      if (events[name] && events[name].dynamic) {
        dynamicHandlers += name + "," + handlerCode + ",";
      } else {
        staticHandlers += "\"" + name + "\":" + handlerCode + ",";
      }
    }
    staticHandlers = "{" + (staticHandlers.slice(0, -1)) + "}";
    if (dynamicHandlers) {
      return prefix + "_d(" + staticHandlers + ",[" + (dynamicHandlers.slice(0, -1)) + "])"
    } else {
      return prefix + staticHandlers
    }
  }

  function genHandler (handler) {
    if (!handler) {
      return 'function(){}'
    }

    if (Array.isArray(handler)) {
      return ("[" + (handler.map(function (handler) { return genHandler(handler); }).join(',')) + "]")
    }

    var isMethodPath = simplePathRE.test(handler.value);
    var isFunctionExpression = fnExpRE.test(handler.value);
    var isFunctionInvocation = simplePathRE.test(handler.value.replace(fnInvokeRE, ''));

    if (!handler.modifiers) {
      if (isMethodPath || isFunctionExpression) {
        return handler.value
      }
      return ("function($event){" + (isFunctionInvocation ? ("return " + (handler.value)) : handler.value) + "}") // inline statement
    } else {
      var code = '';
      var genModifierCode = '';
      var keys = [];
      for (var key in handler.modifiers) {
        if (modifierCode[key]) {
          genModifierCode += modifierCode[key];
          // left/right
          if (keyCodes[key]) {
            keys.push(key);
          }
        } else if (key === 'exact') {
          var modifiers = (handler.modifiers);
          genModifierCode += genGuard(
            ['ctrl', 'shift', 'alt', 'meta']
              .filter(function (keyModifier) { return !modifiers[keyModifier]; })
              .map(function (keyModifier) { return ("$event." + keyModifier + "Key"); })
              .join('||')
          );
        } else {
          keys.push(key);
        }
      }
      if (keys.length) {
        code += genKeyFilter(keys);
      }
      // Make sure modifiers like prevent and stop get executed after key filtering
      if (genModifierCode) {
        code += genModifierCode;
      }
      var handlerCode = isMethodPath
        ? ("return " + (handler.value) + "($event)")
        : isFunctionExpression
          ? ("return (" + (handler.value) + ")($event)")
          : isFunctionInvocation
            ? ("return " + (handler.value))
            : handler.value;
      return ("function($event){" + code + handlerCode + "}")
    }
  }

  function genKeyFilter (keys) {
    return (
      // make sure the key filters only apply to KeyboardEvents
      // #9441: can't use 'keyCode' in $event because Chrome autofill fires fake
      // key events that do not have keyCode property...
      "if(!$event.type.indexOf('key')&&" +
      (keys.map(genFilterCode).join('&&')) + ")return null;"
    )
  }

  function genFilterCode (key) {
    var keyVal = parseInt(key, 10);
    if (keyVal) {
      return ("$event.keyCode!==" + keyVal)
    }
    var keyCode = keyCodes[key];
    var keyName = keyNames[key];
    return (
      "_k($event.keyCode," +
      (JSON.stringify(key)) + "," +
      (JSON.stringify(keyCode)) + "," +
      "$event.key," +
      "" + (JSON.stringify(keyName)) +
      ")"
    )
  }

  /*  */

  function on (el, dir) {
    if (dir.modifiers) {
      warn("v-on without argument does not support modifiers.");
    }
    el.wrapListeners = function (code) { return ("_g(" + code + "," + (dir.value) + ")"); };
  }

  /*  */

  function bind$1 (el, dir) {
    el.wrapData = function (code) {
      return ("_b(" + code + ",'" + (el.tag) + "'," + (dir.value) + "," + (dir.modifiers && dir.modifiers.prop ? 'true' : 'false') + (dir.modifiers && dir.modifiers.sync ? ',true' : '') + ")")
    };
  }

  /*  */

  var baseDirectives = {
    on: on,
    bind: bind$1,
    cloak: noop
  };

  /*  */





  var CodegenState = function CodegenState (options) {
    this.options = options;
    this.warn = options.warn || baseWarn;
    this.transforms = pluckModuleFunction(options.modules, 'transformCode');
    this.dataGenFns = pluckModuleFunction(options.modules, 'genData');
    this.directives = extend(extend({}, baseDirectives), options.directives);
    var isReservedTag = options.isReservedTag || no;
    this.maybeComponent = function (el) { return !!el.component || !isReservedTag(el.tag); };
    this.onceId = 0;
    this.staticRenderFns = [];
    this.pre = false;
  };



  function generate (
    ast,
    options
  ) {
    var state = new CodegenState(options);
    var code = ast ? genElement(ast, state) : '_c("div")';
    return {
      render: ("with(this){return " + code + "}"),
      staticRenderFns: state.staticRenderFns
    }
  }

  function genElement (el, state) {
    if (el.parent) {
      el.pre = el.pre || el.parent.pre;
    }

    if (el.staticRoot && !el.staticProcessed) {
      return genStatic(el, state)
    } else if (el.once && !el.onceProcessed) {
      return genOnce(el, state)
    } else if (el.for && !el.forProcessed) {
      return genFor(el, state)
    } else if (el.if && !el.ifProcessed) {
      return genIf(el, state)
    } else if (el.tag === 'template' && !el.slotTarget && !state.pre) {
      return genChildren(el, state) || 'void 0'
    } else if (el.tag === 'slot') {
      return genSlot(el, state)
    } else {
      // component or element
      var code;
      if (el.component) {
        code = genComponent(el.component, el, state);
      } else {
        var data;
        if (!el.plain || (el.pre && state.maybeComponent(el))) {
          data = genData$2(el, state);
        }

        var children = el.inlineTemplate ? null : genChildren(el, state, true);
        code = "_c('" + (el.tag) + "'" + (data ? ("," + data) : '') + (children ? ("," + children) : '') + ")";
      }
      // module transforms
      for (var i = 0; i < state.transforms.length; i++) {
        code = state.transforms[i](el, code);
      }
      return code
    }
  }

  // hoist static sub-trees out
  function genStatic (el, state) {
    el.staticProcessed = true;
    // Some elements (templates) need to behave differently inside of a v-pre
    // node.  All pre nodes are static roots, so we can use this as a location to
    // wrap a state change and reset it upon exiting the pre node.
    var originalPreState = state.pre;
    if (el.pre) {
      state.pre = el.pre;
    }
    state.staticRenderFns.push(("with(this){return " + (genElement(el, state)) + "}"));
    state.pre = originalPreState;
    return ("_m(" + (state.staticRenderFns.length - 1) + (el.staticInFor ? ',true' : '') + ")")
  }

  // v-once
  function genOnce (el, state) {
    el.onceProcessed = true;
    if (el.if && !el.ifProcessed) {
      return genIf(el, state)
    } else if (el.staticInFor) {
      var key = '';
      var parent = el.parent;
      while (parent) {
        if (parent.for) {
          key = parent.key;
          break
        }
        parent = parent.parent;
      }
      if (!key) {
        state.warn(
          "v-once can only be used inside v-for that is keyed. ",
          el.rawAttrsMap['v-once']
        );
        return genElement(el, state)
      }
      return ("_o(" + (genElement(el, state)) + "," + (state.onceId++) + "," + key + ")")
    } else {
      return genStatic(el, state)
    }
  }

  function genIf (
    el,
    state,
    altGen,
    altEmpty
  ) {
    el.ifProcessed = true; // avoid recursion
    return genIfConditions(el.ifConditions.slice(), state, altGen, altEmpty)
  }

  function genIfConditions (
    conditions,
    state,
    altGen,
    altEmpty
  ) {
    if (!conditions.length) {
      return altEmpty || '_e()'
    }

    var condition = conditions.shift();
    if (condition.exp) {
      return ("(" + (condition.exp) + ")?" + (genTernaryExp(condition.block)) + ":" + (genIfConditions(conditions, state, altGen, altEmpty)))
    } else {
      return ("" + (genTernaryExp(condition.block)))
    }

    // v-if with v-once should generate code like (a)?_m(0):_m(1)
    function genTernaryExp (el) {
      return altGen
        ? altGen(el, state)
        : el.once
          ? genOnce(el, state)
          : genElement(el, state)
    }
  }

  function genFor (
    el,
    state,
    altGen,
    altHelper
  ) {
    var exp = el.for;
    var alias = el.alias;
    var iterator1 = el.iterator1 ? ("," + (el.iterator1)) : '';
    var iterator2 = el.iterator2 ? ("," + (el.iterator2)) : '';

    if (state.maybeComponent(el) &&
      el.tag !== 'slot' &&
      el.tag !== 'template' &&
      !el.key
    ) {
      state.warn(
        "<" + (el.tag) + " v-for=\"" + alias + " in " + exp + "\">: component lists rendered with " +
        "v-for should have explicit keys. " +
        "See https://vuejs.org/guide/list.html#key for more info.",
        el.rawAttrsMap['v-for'],
        true /* tip */
      );
    }

    el.forProcessed = true; // avoid recursion
    return (altHelper || '_l') + "((" + exp + ")," +
      "function(" + alias + iterator1 + iterator2 + "){" +
        "return " + ((altGen || genElement)(el, state)) +
      '})'
  }

  function genData$2 (el, state) {
    var data = '{';

    // directives first.
    // directives may mutate the el's other properties before they are generated.
    var dirs = genDirectives(el, state);
    if (dirs) { data += dirs + ','; }

    // key
    if (el.key) {
      data += "key:" + (el.key) + ",";
    }
    // ref
    if (el.ref) {
      data += "ref:" + (el.ref) + ",";
    }
    if (el.refInFor) {
      data += "refInFor:true,";
    }
    // pre
    if (el.pre) {
      data += "pre:true,";
    }
    // record original tag name for components using "is" attribute
    if (el.component) {
      data += "tag:\"" + (el.tag) + "\",";
    }
    // module data generation functions
    for (var i = 0; i < state.dataGenFns.length; i++) {
      data += state.dataGenFns[i](el);
    }
    // attributes
    if (el.attrs) {
      data += "attrs:" + (genProps(el.attrs)) + ",";
    }
    // DOM props
    if (el.props) {
      data += "domProps:" + (genProps(el.props)) + ",";
    }
    // event handlers
    if (el.events) {
      data += (genHandlers(el.events, false)) + ",";
    }
    if (el.nativeEvents) {
      data += (genHandlers(el.nativeEvents, true)) + ",";
    }
    // slot target
    // only for non-scoped slots
    if (el.slotTarget && !el.slotScope) {
      data += "slot:" + (el.slotTarget) + ",";
    }
    // scoped slots
    if (el.scopedSlots) {
      data += (genScopedSlots(el, el.scopedSlots, state)) + ",";
    }
    // component v-model
    if (el.model) {
      data += "model:{value:" + (el.model.value) + ",callback:" + (el.model.callback) + ",expression:" + (el.model.expression) + "},";
    }
    // inline-template
    if (el.inlineTemplate) {
      var inlineTemplate = genInlineTemplate(el, state);
      if (inlineTemplate) {
        data += inlineTemplate + ",";
      }
    }
    data = data.replace(/,$/, '') + '}';
    // v-bind dynamic argument wrap
    // v-bind with dynamic arguments must be applied using the same v-bind object
    // merge helper so that class/style/mustUseProp attrs are handled correctly.
    if (el.dynamicAttrs) {
      data = "_b(" + data + ",\"" + (el.tag) + "\"," + (genProps(el.dynamicAttrs)) + ")";
    }
    // v-bind data wrap
    if (el.wrapData) {
      data = el.wrapData(data);
    }
    // v-on data wrap
    if (el.wrapListeners) {
      data = el.wrapListeners(data);
    }
    return data
  }

  function genDirectives (el, state) {
    var dirs = el.directives;
    if (!dirs) { return }
    var res = 'directives:[';
    var hasRuntime = false;
    var i, l, dir, needRuntime;
    for (i = 0, l = dirs.length; i < l; i++) {
      dir = dirs[i];
      needRuntime = true;
      var gen = state.directives[dir.name];
      if (gen) {
        // compile-time directive that manipulates AST.
        // returns true if it also needs a runtime counterpart.
        needRuntime = !!gen(el, dir, state.warn);
      }
      if (needRuntime) {
        hasRuntime = true;
        res += "{name:\"" + (dir.name) + "\",rawName:\"" + (dir.rawName) + "\"" + (dir.value ? (",value:(" + (dir.value) + "),expression:" + (JSON.stringify(dir.value))) : '') + (dir.arg ? (",arg:" + (dir.isDynamicArg ? dir.arg : ("\"" + (dir.arg) + "\""))) : '') + (dir.modifiers ? (",modifiers:" + (JSON.stringify(dir.modifiers))) : '') + "},";
      }
    }
    if (hasRuntime) {
      return res.slice(0, -1) + ']'
    }
  }

  function genInlineTemplate (el, state) {
    var ast = el.children[0];
    if (el.children.length !== 1 || ast.type !== 1) {
      state.warn(
        'Inline-template components must have exactly one child element.',
        { start: el.start }
      );
    }
    if (ast && ast.type === 1) {
      var inlineRenderFns = generate(ast, state.options);
      return ("inlineTemplate:{render:function(){" + (inlineRenderFns.render) + "},staticRenderFns:[" + (inlineRenderFns.staticRenderFns.map(function (code) { return ("function(){" + code + "}"); }).join(',')) + "]}")
    }
  }

  function genScopedSlots (
    el,
    slots,
    state
  ) {
    // by default scoped slots are considered "stable", this allows child
    // components with only scoped slots to skip forced updates from parent.
    // but in some cases we have to bail-out of this optimization
    // for example if the slot contains dynamic names, has v-if or v-for on them...
    var needsForceUpdate = el.for || Object.keys(slots).some(function (key) {
      var slot = slots[key];
      return (
        slot.slotTargetDynamic ||
        slot.if ||
        slot.for ||
        containsSlotChild(slot) // is passing down slot from parent which may be dynamic
      )
    });

    // #9534: if a component with scoped slots is inside a conditional branch,
    // it's possible for the same component to be reused but with different
    // compiled slot content. To avoid that, we generate a unique key based on
    // the generated code of all the slot contents.
    var needsKey = !!el.if;

    // OR when it is inside another scoped slot or v-for (the reactivity may be
    // disconnected due to the intermediate scope variable)
    // #9438, #9506
    // TODO: this can be further optimized by properly analyzing in-scope bindings
    // and skip force updating ones that do not actually use scope variables.
    if (!needsForceUpdate) {
      var parent = el.parent;
      while (parent) {
        if (
          (parent.slotScope && parent.slotScope !== emptySlotScopeToken) ||
          parent.for
        ) {
          needsForceUpdate = true;
          break
        }
        if (parent.if) {
          needsKey = true;
        }
        parent = parent.parent;
      }
    }

    var generatedSlots = Object.keys(slots)
      .map(function (key) { return genScopedSlot(slots[key], state); })
      .join(',');

    return ("scopedSlots:_u([" + generatedSlots + "]" + (needsForceUpdate ? ",null,true" : "") + (!needsForceUpdate && needsKey ? (",null,false," + (hash(generatedSlots))) : "") + ")")
  }

  function hash(str) {
    var hash = 5381;
    var i = str.length;
    while(i) {
      hash = (hash * 33) ^ str.charCodeAt(--i);
    }
    return hash >>> 0
  }

  function containsSlotChild (el) {
    if (el.type === 1) {
      if (el.tag === 'slot') {
        return true
      }
      return el.children.some(containsSlotChild)
    }
    return false
  }

  function genScopedSlot (
    el,
    state
  ) {
    var isLegacySyntax = el.attrsMap['slot-scope'];
    if (el.if && !el.ifProcessed && !isLegacySyntax) {
      return genIf(el, state, genScopedSlot, "null")
    }
    if (el.for && !el.forProcessed) {
      return genFor(el, state, genScopedSlot)
    }
    var slotScope = el.slotScope === emptySlotScopeToken
      ? ""
      : String(el.slotScope);
    var fn = "function(" + slotScope + "){" +
      "return " + (el.tag === 'template'
        ? el.if && isLegacySyntax
          ? ("(" + (el.if) + ")?" + (genChildren(el, state) || 'undefined') + ":undefined")
          : genChildren(el, state) || 'undefined'
        : genElement(el, state)) + "}";
    // reverse proxy v-slot without scope on this.$slots
    var reverseProxy = slotScope ? "" : ",proxy:true";
    return ("{key:" + (el.slotTarget || "\"default\"") + ",fn:" + fn + reverseProxy + "}")
  }

  function genChildren (
    el,
    state,
    checkSkip,
    altGenElement,
    altGenNode
  ) {
    var children = el.children;
    if (children.length) {
      var el$1 = children[0];
      // optimize single v-for
      if (children.length === 1 &&
        el$1.for &&
        el$1.tag !== 'template' &&
        el$1.tag !== 'slot'
      ) {
        var normalizationType = checkSkip
          ? state.maybeComponent(el$1) ? ",1" : ",0"
          : "";
        return ("" + ((altGenElement || genElement)(el$1, state)) + normalizationType)
      }
      var normalizationType$1 = checkSkip
        ? getNormalizationType(children, state.maybeComponent)
        : 0;
      var gen = altGenNode || genNode;
      return ("[" + (children.map(function (c) { return gen(c, state); }).join(',')) + "]" + (normalizationType$1 ? ("," + normalizationType$1) : ''))
    }
  }

  // determine the normalization needed for the children array.
  // 0: no normalization needed
  // 1: simple normalization needed (possible 1-level deep nested array)
  // 2: full normalization needed
  function getNormalizationType (
    children,
    maybeComponent
  ) {
    var res = 0;
    for (var i = 0; i < children.length; i++) {
      var el = children[i];
      if (el.type !== 1) {
        continue
      }
      if (needsNormalization(el) ||
          (el.ifConditions && el.ifConditions.some(function (c) { return needsNormalization(c.block); }))) {
        res = 2;
        break
      }
      if (maybeComponent(el) ||
          (el.ifConditions && el.ifConditions.some(function (c) { return maybeComponent(c.block); }))) {
        res = 1;
      }
    }
    return res
  }

  function needsNormalization (el) {
    return el.for !== undefined || el.tag === 'template' || el.tag === 'slot'
  }

  function genNode (node, state) {
    if (node.type === 1) {
      return genElement(node, state)
    } else if (node.type === 3 && node.isComment) {
      return genComment(node)
    } else {
      return genText(node)
    }
  }

  function genText (text) {
    return ("_v(" + (text.type === 2
      ? text.expression // no need for () because already wrapped in _s()
      : transformSpecialNewlines(JSON.stringify(text.text))) + ")")
  }

  function genComment (comment) {
    return ("_e(" + (JSON.stringify(comment.text)) + ")")
  }

  function genSlot (el, state) {
    var slotName = el.slotName || '"default"';
    var children = genChildren(el, state);
    var res = "_t(" + slotName + (children ? ("," + children) : '');
    var attrs = el.attrs || el.dynamicAttrs
      ? genProps((el.attrs || []).concat(el.dynamicAttrs || []).map(function (attr) { return ({
          // slot props are camelized
          name: camelize(attr.name),
          value: attr.value,
          dynamic: attr.dynamic
        }); }))
      : null;
    var bind$$1 = el.attrsMap['v-bind'];
    if ((attrs || bind$$1) && !children) {
      res += ",null";
    }
    if (attrs) {
      res += "," + attrs;
    }
    if (bind$$1) {
      res += (attrs ? '' : ',null') + "," + bind$$1;
    }
    return res + ')'
  }

  // componentName is el.component, take it as argument to shun flow's pessimistic refinement
  function genComponent (
    componentName,
    el,
    state
  ) {
    var children = el.inlineTemplate ? null : genChildren(el, state, true);
    return ("_c(" + componentName + "," + (genData$2(el, state)) + (children ? ("," + children) : '') + ")")
  }

  function genProps (props) {
    var staticProps = "";
    var dynamicProps = "";
    for (var i = 0; i < props.length; i++) {
      var prop = props[i];
      var value = transformSpecialNewlines(prop.value);
      if (prop.dynamic) {
        dynamicProps += (prop.name) + "," + value + ",";
      } else {
        staticProps += "\"" + (prop.name) + "\":" + value + ",";
      }
    }
    staticProps = "{" + (staticProps.slice(0, -1)) + "}";
    if (dynamicProps) {
      return ("_d(" + staticProps + ",[" + (dynamicProps.slice(0, -1)) + "])")
    } else {
      return staticProps
    }
  }

  // #3895, #4268
  function transformSpecialNewlines (text) {
    return text
      .replace(/\u2028/g, '\\u2028')
      .replace(/\u2029/g, '\\u2029')
  }

  /*  */



  // these keywords should not appear inside expressions, but operators like
  // typeof, instanceof and in are allowed
  var prohibitedKeywordRE = new RegExp('\\b' + (
    'do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,' +
    'super,throw,while,yield,delete,export,import,return,switch,default,' +
    'extends,finally,continue,debugger,function,arguments'
  ).split(',').join('\\b|\\b') + '\\b');

  // these unary operators should not be used as property/method names
  var unaryOperatorsRE = new RegExp('\\b' + (
    'delete,typeof,void'
  ).split(',').join('\\s*\\([^\\)]*\\)|\\b') + '\\s*\\([^\\)]*\\)');

  // strip strings in expressions
  var stripStringRE = /'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;

  // detect problematic expressions in a template
  function detectErrors (ast, warn) {
    if (ast) {
      checkNode(ast, warn);
    }
  }

  function checkNode (node, warn) {
    if (node.type === 1) {
      for (var name in node.attrsMap) {
        if (dirRE.test(name)) {
          var value = node.attrsMap[name];
          if (value) {
            var range = node.rawAttrsMap[name];
            if (name === 'v-for') {
              checkFor(node, ("v-for=\"" + value + "\""), warn, range);
            } else if (onRE.test(name)) {
              checkEvent(value, (name + "=\"" + value + "\""), warn, range);
            } else {
              checkExpression(value, (name + "=\"" + value + "\""), warn, range);
            }
          }
        }
      }
      if (node.children) {
        for (var i = 0; i < node.children.length; i++) {
          checkNode(node.children[i], warn);
        }
      }
    } else if (node.type === 2) {
      checkExpression(node.expression, node.text, warn, node);
    }
  }

  function checkEvent (exp, text, warn, range) {
    var stipped = exp.replace(stripStringRE, '');
    var keywordMatch = stipped.match(unaryOperatorsRE);
    if (keywordMatch && stipped.charAt(keywordMatch.index - 1) !== '$') {
      warn(
        "avoid using JavaScript unary operator as property name: " +
        "\"" + (keywordMatch[0]) + "\" in expression " + (text.trim()),
        range
      );
    }
    checkExpression(exp, text, warn, range);
  }

  function checkFor (node, text, warn, range) {
    checkExpression(node.for || '', text, warn, range);
    checkIdentifier(node.alias, 'v-for alias', text, warn, range);
    checkIdentifier(node.iterator1, 'v-for iterator', text, warn, range);
    checkIdentifier(node.iterator2, 'v-for iterator', text, warn, range);
  }

  function checkIdentifier (
    ident,
    type,
    text,
    warn,
    range
  ) {
    if (typeof ident === 'string') {
      try {
        new Function(("var " + ident + "=_"));
      } catch (e) {
        warn(("invalid " + type + " \"" + ident + "\" in expression: " + (text.trim())), range);
      }
    }
  }

  function checkExpression (exp, text, warn, range) {
    try {
      new Function(("return " + exp));
    } catch (e) {
      var keywordMatch = exp.replace(stripStringRE, '').match(prohibitedKeywordRE);
      if (keywordMatch) {
        warn(
          "avoid using JavaScript keyword as property name: " +
          "\"" + (keywordMatch[0]) + "\"\n  Raw expression: " + (text.trim()),
          range
        );
      } else {
        warn(
          "invalid expression: " + (e.message) + " in\n\n" +
          "    " + exp + "\n\n" +
          "  Raw expression: " + (text.trim()) + "\n",
          range
        );
      }
    }
  }

  /*  */

  var range = 2;

  function generateCodeFrame (
    source,
    start,
    end
  ) {
    if ( start === void 0 ) start = 0;
    if ( end === void 0 ) end = source.length;

    var lines = source.split(/\r?\n/);
    var count = 0;
    var res = [];
    for (var i = 0; i < lines.length; i++) {
      count += lines[i].length + 1;
      if (count >= start) {
        for (var j = i - range; j <= i + range || end > count; j++) {
          if (j < 0 || j >= lines.length) { continue }
          res.push(("" + (j + 1) + (repeat(" ", 3 - String(j + 1).length)) + "|  " + (lines[j])));
          var lineLength = lines[j].length;
          if (j === i) {
            // push underline
            var pad = start - (count - lineLength) + 1;
            var length = end > count ? lineLength - pad : end - start;
            res.push("   |  " + repeat(" ", pad) + repeat("^", length));
          } else if (j > i) {
            if (end > count) {
              var length$1 = Math.min(end - count, lineLength);
              res.push("   |  " + repeat("^", length$1));
            }
            count += lineLength + 1;
          }
        }
        break
      }
    }
    return res.join('\n')
  }

  function repeat (str, n) {
    var result = '';
    if (n > 0) {
      while (true) { // eslint-disable-line
        if (n & 1) { result += str; }
        n >>>= 1;
        if (n <= 0) { break }
        str += str;
      }
    }
    return result
  }

  /*  */



  function createFunction (code, errors) {
    try {
      return new Function(code)
    } catch (err) {
      errors.push({ err: err, code: code });
      return noop
    }
  }

  function createCompileToFunctionFn (compile) {
    var cache = Object.create(null);

    return function compileToFunctions (
      template,
      options,
      vm
    ) {
      options = extend({}, options);
      var warn$$1 = options.warn || warn;
      delete options.warn;

      /* istanbul ignore if */
      {
        // detect possible CSP restriction
        try {
          new Function('return 1');
        } catch (e) {
          if (e.toString().match(/unsafe-eval|CSP/)) {
            warn$$1(
              'It seems you are using the standalone build of Vue.js in an ' +
              'environment with Content Security Policy that prohibits unsafe-eval. ' +
              'The template compiler cannot work in this environment. Consider ' +
              'relaxing the policy to allow unsafe-eval or pre-compiling your ' +
              'templates into render functions.'
            );
          }
        }
      }

      // check cache
      var key = options.delimiters
        ? String(options.delimiters) + template
        : template;
      if (cache[key]) {
        return cache[key]
      }

      // compile
      var compiled = compile(template, options);

      // check compilation errors/tips
      {
        if (compiled.errors && compiled.errors.length) {
          if (options.outputSourceRange) {
            compiled.errors.forEach(function (e) {
              warn$$1(
                "Error compiling template:\n\n" + (e.msg) + "\n\n" +
                generateCodeFrame(template, e.start, e.end),
                vm
              );
            });
          } else {
            warn$$1(
              "Error compiling template:\n\n" + template + "\n\n" +
              compiled.errors.map(function (e) { return ("- " + e); }).join('\n') + '\n',
              vm
            );
          }
        }
        if (compiled.tips && compiled.tips.length) {
          if (options.outputSourceRange) {
            compiled.tips.forEach(function (e) { return tip(e.msg, vm); });
          } else {
            compiled.tips.forEach(function (msg) { return tip(msg, vm); });
          }
        }
      }

      // turn code into functions
      var res = {};
      var fnGenErrors = [];
      res.render = createFunction(compiled.render, fnGenErrors);
      res.staticRenderFns = compiled.staticRenderFns.map(function (code) {
        return createFunction(code, fnGenErrors)
      });

      // check function generation errors.
      // this should only happen if there is a bug in the compiler itself.
      // mostly for codegen development use
      /* istanbul ignore if */
      {
        if ((!compiled.errors || !compiled.errors.length) && fnGenErrors.length) {
          warn$$1(
            "Failed to generate render function:\n\n" +
            fnGenErrors.map(function (ref) {
              var err = ref.err;
              var code = ref.code;

              return ((err.toString()) + " in\n\n" + code + "\n");
          }).join('\n'),
            vm
          );
        }
      }

      return (cache[key] = res)
    }
  }

  /*  */

  function createCompilerCreator (baseCompile) {
    return function createCompiler (baseOptions) {
      function compile (
        template,
        options
      ) {
        var finalOptions = Object.create(baseOptions);
        var errors = [];
        var tips = [];

        var warn = function (msg, range, tip) {
          (tip ? tips : errors).push(msg);
        };

        if (options) {
          if (options.outputSourceRange) {
            // $flow-disable-line
            var leadingSpaceLength = template.match(/^\s*/)[0].length;

            warn = function (msg, range, tip) {
              var data = { msg: msg };
              if (range) {
                if (range.start != null) {
                  data.start = range.start + leadingSpaceLength;
                }
                if (range.end != null) {
                  data.end = range.end + leadingSpaceLength;
                }
              }
              (tip ? tips : errors).push(data);
            };
          }
          // merge custom modules
          if (options.modules) {
            finalOptions.modules =
              (baseOptions.modules || []).concat(options.modules);
          }
          // merge custom directives
          if (options.directives) {
            finalOptions.directives = extend(
              Object.create(baseOptions.directives || null),
              options.directives
            );
          }
          // copy other options
          for (var key in options) {
            if (key !== 'modules' && key !== 'directives') {
              finalOptions[key] = options[key];
            }
          }
        }

        finalOptions.warn = warn;

        var compiled = baseCompile(template.trim(), finalOptions);
        {
          detectErrors(compiled.ast, warn);
        }
        compiled.errors = errors;
        compiled.tips = tips;
        return compiled
      }

      return {
        compile: compile,
        compileToFunctions: createCompileToFunctionFn(compile)
      }
    }
  }

  /*  */

  // `createCompilerCreator` allows creating compilers that use alternative
  // parser/optimizer/codegen, e.g the SSR optimizing compiler.
  // Here we just export a default compiler using the default parts.
  var createCompiler = createCompilerCreator(function baseCompile (
    template,
    options
  ) {
    var ast = parse(template.trim(), options);
    if (options.optimize !== false) {
      optimize(ast, options);
    }
    var code = generate(ast, options);
    return {
      ast: ast,
      render: code.render,
      staticRenderFns: code.staticRenderFns
    }
  });

  /*  */

  var ref$1 = createCompiler(baseOptions);
  var compileToFunctions = ref$1.compileToFunctions;

  /*  */

  // check whether current browser encodes a char inside attribute values
  var div;
  function getShouldDecode (href) {
    div = div || document.createElement('div');
    div.innerHTML = href ? "<a href=\"\n\"/>" : "<div a=\"\n\"/>";
    return div.innerHTML.indexOf('&#10;') > 0
  }

  // #3663: IE encodes newlines inside attribute values while other browsers don't
  var shouldDecodeNewlines = inBrowser ? getShouldDecode(false) : false;
  // #6828: chrome encodes content in a[href]
  var shouldDecodeNewlinesForHref = inBrowser ? getShouldDecode(true) : false;

  /*  */

  var idToTemplate = cached(function (id) {
    var el = query(id);
    return el && el.innerHTML
  });

  var mount = Vue.prototype.$mount;
  Vue.prototype.$mount = function (
    el,
    hydrating
  ) {
    el = el && query(el);

    /* istanbul ignore if */
    if (el === document.body || el === document.documentElement) {
      warn(
        "Do not mount Vue to <html> or <body> - mount to normal elements instead."
      );
      return this
    }

    var options = this.$options;
    // resolve template/el and convert to render function
    if (!options.render) {
      var template = options.template;
      if (template) {
        if (typeof template === 'string') {
          if (template.charAt(0) === '#') {
            template = idToTemplate(template);
            /* istanbul ignore if */
            if (!template) {
              warn(
                ("Template element not found or is empty: " + (options.template)),
                this
              );
            }
          }
        } else if (template.nodeType) {
          template = template.innerHTML;
        } else {
          {
            warn('invalid template option:' + template, this);
          }
          return this
        }
      } else if (el) {
        template = getOuterHTML(el);
      }
      if (template) {
        /* istanbul ignore if */
        if (config.performance && mark) {
          mark('compile');
        }

        var ref = compileToFunctions(template, {
          outputSourceRange: "development" !== 'production',
          shouldDecodeNewlines: shouldDecodeNewlines,
          shouldDecodeNewlinesForHref: shouldDecodeNewlinesForHref,
          delimiters: options.delimiters,
          comments: options.comments
        }, this);
        var render = ref.render;
        var staticRenderFns = ref.staticRenderFns;
        options.render = render;
        options.staticRenderFns = staticRenderFns;

        /* istanbul ignore if */
        if (config.performance && mark) {
          mark('compile end');
          measure(("vue " + (this._name) + " compile"), 'compile', 'compile end');
        }
      }
    }
    return mount.call(this, el, hydrating)
  };

  /**
   * Get outerHTML of elements, taking care
   * of SVG elements in IE as well.
   */
  function getOuterHTML (el) {
    if (el.outerHTML) {
      return el.outerHTML
    } else {
      var container = document.createElement('div');
      container.appendChild(el.cloneNode(true));
      return container.innerHTML
    }
  }

  Vue.compile = compileToFunctions;

  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  //
  var script = {
    props: ['options', 'value'],
    data: function data() {
      return {
        selected: null
      };
    },
    mounted: function mounted() {
      this.selected = this.value;
    },
    watch: {
      value: function value(newValue) {
        this.selected = newValue;
      }
    }
  };

  function normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier
  /* server only */
  , shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {
    if (typeof shadowMode !== 'boolean') {
      createInjectorSSR = createInjector;
      createInjector = shadowMode;
      shadowMode = false;
    } // Vue.extend constructor export interop.


    var options = typeof script === 'function' ? script.options : script; // render functions

    if (template && template.render) {
      options.render = template.render;
      options.staticRenderFns = template.staticRenderFns;
      options._compiled = true; // functional template

      if (isFunctionalTemplate) {
        options.functional = true;
      }
    } // scopedId


    if (scopeId) {
      options._scopeId = scopeId;
    }

    var hook;

    if (moduleIdentifier) {
      // server build
      hook = function hook(context) {
        // 2.3 injection
        context = context || // cached call
        this.$vnode && this.$vnode.ssrContext || // stateful
        this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext; // functional
        // 2.2 with runInNewContext: true

        if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {
          context = __VUE_SSR_CONTEXT__;
        } // inject component styles


        if (style) {
          style.call(this, createInjectorSSR(context));
        } // register component module identifier for async chunk inference


        if (context && context._registeredComponents) {
          context._registeredComponents.add(moduleIdentifier);
        }
      }; // used by ssr in case component is cached and beforeCreate
      // never gets called


      options._ssrRegister = hook;
    } else if (style) {
      hook = shadowMode ? function () {
        style.call(this, createInjectorShadow(this.$root.$options.shadowRoot));
      } : function (context) {
        style.call(this, createInjector(context));
      };
    }

    if (hook) {
      if (options.functional) {
        // register for functional component in vue file
        var originalRender = options.render;

        options.render = function renderWithStyleInjection(h, context) {
          hook.call(context);
          return originalRender(h, context);
        };
      } else {
        // inject component registration as beforeCreate hook
        var existing = options.beforeCreate;
        options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
      }
    }

    return script;
  }

  var normalizeComponent_1 = normalizeComponent;

  var isOldIE = typeof navigator !== 'undefined' && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
  function createInjector(context) {
    return function (id, style) {
      return addStyle(id, style);
    };
  }
  var HEAD = document.head || document.getElementsByTagName('head')[0];
  var styles = {};

  function addStyle(id, css) {
    var group = isOldIE ? css.media || 'default' : id;
    var style = styles[group] || (styles[group] = {
      ids: new Set(),
      styles: []
    });

    if (!style.ids.has(id)) {
      style.ids.add(id);
      var code = css.source;

      if (css.map) {
        // https://developer.chrome.com/devtools/docs/javascript-debugging
        // this makes source maps inside style tags work properly in Chrome
        code += '\n/*# sourceURL=' + css.map.sources[0] + ' */'; // http://stackoverflow.com/a/26603875

        code += '\n/*# sourceMappingURL=data:application/json;base64,' + btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) + ' */';
      }

      if (!style.element) {
        style.element = document.createElement('style');
        style.element.type = 'text/css';
        if (css.media) { style.element.setAttribute('media', css.media); }
        HEAD.appendChild(style.element);
      }

      if ('styleSheet' in style.element) {
        style.styles.push(code);
        style.element.styleSheet.cssText = style.styles.filter(Boolean).join('\n');
      } else {
        var index = style.ids.size - 1;
        var textNode = document.createTextNode(code);
        var nodes = style.element.childNodes;
        if (nodes[index]) { style.element.removeChild(nodes[index]); }
        if (nodes.length) { style.element.insertBefore(textNode, nodes[index]); }else { style.element.appendChild(textNode); }
      }
    }
  }

  var browser = createInjector;

  /* script */
  var __vue_script__ = script;

  /* template */
  var __vue_render__ = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("div", [
      _c(
        "select",
        {
          directives: [
            {
              name: "model",
              rawName: "v-model",
              value: _vm.selected,
              expression: "selected"
            }
          ],
          staticClass: "select",
          on: {
            input: function(event) {
              _vm.$emit("input", event.target.value);
            },
            change: function($event) {
              var $$selectedVal = Array.prototype.filter
                .call($event.target.options, function(o) {
                  return o.selected
                })
                .map(function(o) {
                  var val = "_value" in o ? o._value : o.value;
                  return val
                });
              _vm.selected = $event.target.multiple
                ? $$selectedVal
                : $$selectedVal[0];
            }
          }
        },
        _vm._l(_vm.options, function(option) {
          return _c(
            "option",
            { key: option.value, domProps: { value: option.value } },
            [_vm._v("\n      " + _vm._s(option.text) + "\n    ")]
          )
        }),
        0
      )
    ])
  };
  var __vue_staticRenderFns__ = [];
  __vue_render__._withStripped = true;

    /* style */
    var __vue_inject_styles__ = function (inject) {
      if (!inject) { return }
      inject("data-v-2b359194_0", { source: "\n\n\n\n\n\n\n\n\n\n", map: {"version":3,"sources":[],"names":[],"mappings":"","file":"select.vue"}, media: undefined });

    };
    /* scoped */
    var __vue_scope_id__ = undefined;
    /* module identifier */
    var __vue_module_identifier__ = undefined;
    /* functional template */
    var __vue_is_functional_template__ = false;
    /* style inject SSR */
    

    
    var SelectComponent = normalizeComponent_1(
      { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
      __vue_inject_styles__,
      __vue_script__,
      __vue_scope_id__,
      __vue_is_functional_template__,
      __vue_module_identifier__,
      browser,
      undefined
    );

  var SelectData = [{
    text: 'All Boroughs',
    value: 'all'
  }, {
    text: 'Brooklyn',
    value: 'brooklyn'
  }, {
    text: 'Queens',
    value: 'queens'
  }, {
    text: 'Manhattan',
    value: 'manhattan'
  }, {
    text: 'Staten Island',
    value: 'staten island'
  }, {
    text: 'The Bronx',
    value: 'bronx'
  }];

  var Select =
  /*#__PURE__*/
  function () {
    function Select() {
      var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, Select);

      this.data = data;
      this.settings = settings;
      this.init();
    }
    /**
     * Initializes the module
     */


    _createClass(Select, [{
      key: "init",
      value: function init() {
        Vue.component('nyco-select', SelectComponent);
        new Vue({
          el: '[data-js="app"]',
          delimiters: ['v{', '}'],
          data: function data() {
            return {
              options: Select.data,
              selected: 'all'
            };
          },
          methods: {}
        });
      }
      /**
       * Logs constants to the debugger
       * @param  {object} param - our constants
       */

    }, {
      key: "_constants",
      value: function _constants(param) {
        console.dir(param);
      }
    }]);

    return Select;
  }();

  Select.data = SelectData;

  /**
   * JaroWinkler function.
   * https://en.wikipedia.org/wiki/Jaro%E2%80%93Winkler_distance
   * @param {string} s1 string one.
   * @param {string} s2 second string.
   * @return {number} amount of matches.
   */
  function jaro(s1, s2) {
    var shorter;
    var longer;

    var _ref = s1.length > s2.length ? [s1, s2] : [s2, s1];

    var _ref2 = _slicedToArray(_ref, 2);

    longer = _ref2[0];
    shorter = _ref2[1];
    var matchingWindow = Math.floor(longer.length / 2) - 1;
    var shorterMatches = [];
    var longerMatches = [];

    for (var i = 0; i < shorter.length; i++) {
      var ch = shorter[i];
      var windowStart = Math.max(0, i - matchingWindow);
      var windowEnd = Math.min(i + matchingWindow + 1, longer.length);

      for (var j = windowStart; j < windowEnd; j++) {
        if (longerMatches[j] === undefined && ch === longer[j]) {
          shorterMatches[i] = longerMatches[j] = ch;
          break;
        }
      }
    }

    var shorterMatchesString = shorterMatches.join('');
    var longerMatchesString = longerMatches.join('');
    var numMatches = shorterMatchesString.length;
    var transpositions = 0;

    for (var _i = 0; _i < shorterMatchesString.length; _i++) {
      if (shorterMatchesString[_i] !== longerMatchesString[_i]) { transpositions++; }
    }

    return numMatches > 0 ? (numMatches / shorter.length + numMatches / longer.length + (numMatches - Math.floor(transpositions / 2)) / numMatches) / 3.0 : 0;
  }
  /**
   * @param {string} s1 string one.
   * @param {string} s2 second string.
   * @param {number} prefixScalingFactor
   * @return {number} jaroSimilarity
   */


  function jaroWinkler (s1, s2) {
    var prefixScalingFactor = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0.2;
    var jaroSimilarity = jaro(s1, s2);
    var commonPrefixLength = 0;

    for (var i = 0; i < s1.length; i++) {
      if (s1[i] === s2[i]) { commonPrefixLength++; }else { break; }
    }

    return jaroSimilarity + Math.min(commonPrefixLength, 4) * prefixScalingFactor * (1 - jaroSimilarity);
  }

  var memoize = (function (fn) {
    var cache = {};
    return function () {
      var arguments$1 = arguments;

      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
        args[_key] = arguments$1[_key];
      }

      var key = JSON.stringify(args);
      return cache[key] || (cache[key] = fn.apply(void 0, args));
    };
  });

  /* eslint-env browser */
  /**
   * Autocomplete for autocomplete.
   * Forked and modified from https://github.com/xavi/miss-plete
   */

  var Autocomplete =
  /*#__PURE__*/
  function () {
    /**
     * @param   {object} settings  Configuration options
     * @return  {this}             The class
     * @constructor
     */
    function Autocomplete() {
      var _this = this;

      var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, Autocomplete);

      this.settings = {
        'selector': settings.selector,
        // required
        'options': settings.options,
        // required
        'classname': settings.classname,
        // required
        'selected': settings.hasOwnProperty('selected') ? settings.selected : false,
        'score': settings.hasOwnProperty('score') ? settings.score : memoize(Autocomplete.score),
        'listItem': settings.hasOwnProperty('listItem') ? settings.listItem : Autocomplete.listItem,
        'getSiblingIndex': settings.hasOwnProperty('getSiblingIndex') ? settings.getSiblingIndex : Autocomplete.getSiblingIndex
      };
      this.scoredOptions = null;
      this.container = null;
      this.ul = null;
      this.highlighted = -1;
      this.SELECTORS = Autocomplete.selectors;
      this.STRINGS = Autocomplete.strings;
      this.MAX_ITEMS = Autocomplete.maxItems;
      window.addEventListener('keydown', function (e) {
        _this.keydownEvent(e);
      });
      window.addEventListener('keyup', function (e) {
        _this.keyupEvent(e);
      });
      window.addEventListener('input', function (e) {
        _this.inputEvent(e);
      });
      var body = document.querySelector('body');
      body.addEventListener('focus', function (e) {
        _this.focusEvent(e);
      }, true);
      body.addEventListener('blur', function (e) {
        _this.blurEvent(e);
      }, true);
      return this;
    }
    /**
     * EVENTS
     */

    /**
     * The input focus event
     * @param   {object}  event  The event object
     */


    _createClass(Autocomplete, [{
      key: "focusEvent",
      value: function focusEvent(event) {
        if (!event.target.matches(this.settings.selector)) { return; }
        this.input = event.target;
        if (this.input.value === '') { this.message('INIT'); }
      }
      /**
       * The input keydown event
       * @param   {object}  event  The event object
       */

    }, {
      key: "keydownEvent",
      value: function keydownEvent(event) {
        if (!event.target.matches(this.settings.selector)) { return; }
        this.input = event.target;
        if (this.ul) { switch (event.keyCode) {
          case 13:
            this.keyEnter(event);
            break;

          case 27:
            this.keyEscape(event);
            break;

          case 40:
            this.keyDown(event);
            break;

          case 38:
            this.keyUp(event);
            break;
        } }
      }
      /**
       * The input keyup event
       * @param   {object}  event  The event object
       */

    }, {
      key: "keyupEvent",
      value: function keyupEvent(event) {
        if (!event.target.matches(this.settings.selector)) { return; }
        this.input = event.target;
      }
      /**
       * The input event
       * @param   {object}  event  The event object
       */

    }, {
      key: "inputEvent",
      value: function inputEvent(event) {
        var _this2 = this;

        if (!event.target.matches(this.settings.selector)) { return; }
        this.input = event.target;
        if (this.input.value.length > 0) { this.scoredOptions = this.settings.options.map(function (option) {
          return _this2.settings.score(_this2.input.value, option);
        }).sort(function (a, b) {
          return b.score - a.score;
        }); }else { this.scoredOptions = []; }
        this.dropdown();
      }
      /**
       * The input blur event
       * @param   {object}  event  The event object
       */

    }, {
      key: "blurEvent",
      value: function blurEvent(event) {
        if (event.target === window || !event.target.matches(this.settings.selector)) { return; }
        this.input = event.target;
        if (this.input.dataset.persistDropdown === 'true') { return; }
        this.remove();
        this.highlighted = -1;
      }
      /**
       * KEY INPUT EVENTS
       */

      /**
       * What happens when the user presses the down arrow
       * @param   {object}  event  The event object
       * @return  {object}         The Class
       */

    }, {
      key: "keyDown",
      value: function keyDown(event) {
        event.preventDefault();
        this.highlight(this.highlighted < this.ul.children.length - 1 ? this.highlighted + 1 : -1);
        return this;
      }
      /**
       * What happens when the user presses the up arrow
       * @param   {object}  event  The event object
       * @return  {object}         The Class
       */

    }, {
      key: "keyUp",
      value: function keyUp(event) {
        event.preventDefault();
        this.highlight(this.highlighted > -1 ? this.highlighted - 1 : this.ul.children.length - 1);
        return this;
      }
      /**
       * What happens when the user presses the enter key
       * @param   {object}  event  The event object
       * @return  {object}         The Class
       */

    }, {
      key: "keyEnter",
      value: function keyEnter(event) {
        this.selected();
        return this;
      }
      /**
       * What happens when the user presses the escape key
       * @param   {object}  event  The event object
       * @return  {object}         The Class
       */

    }, {
      key: "keyEscape",
      value: function keyEscape(event) {
        this.remove();
        return this;
      }
      /**
       * STATIC
       */

      /**
       * It must return an object with at least the properties 'score'
       * and 'displayValue.' Default is a Jaro–Winkler similarity function.
       * @param  {array}  value
       * @param  {array}  synonyms
       * @return {int}    Score or displayValue
       */

    }, {
      key: "dropdown",

      /**
       * PUBLIC METHODS
       */

      /**
       * Display options as a list.
       * @return  {object} The Class
       */
      value: function dropdown() {
        var _this3 = this;

        var documentFragment = document.createDocumentFragment();
        this.scoredOptions.every(function (scoredOption, i) {
          var listItem = _this3.settings.listItem(scoredOption, i, _this3.MAX_ITEMS);

          listItem && documentFragment.appendChild(listItem);
          return !!listItem;
        });
        this.remove();
        this.highlighted = -1;

        if (documentFragment.hasChildNodes()) {
          var newUl = document.createElement('ul');
          newUl.setAttribute('role', 'listbox');
          newUl.setAttribute('tabindex', '0');
          newUl.setAttribute('id', this.SELECTORS.OPTIONS);
          newUl.addEventListener('mouseover', function (event) {
            if (event.target.tagName === 'LI') { _this3.highlight(_this3.settings.getSiblingIndex(event.target)); }
          });
          newUl.addEventListener('mousedown', function (event) {
            return event.preventDefault();
          });
          newUl.addEventListener('click', function (event) {
            if (event.target.tagName === 'LI') { _this3.selected(); }
          });
          newUl.appendChild(documentFragment); // See CSS to understand why the <ul> has to be wrapped in a <div>

          var newContainer = document.createElement('div');
          newContainer.className = this.settings.classname;
          newContainer.appendChild(newUl);
          this.input.setAttribute('aria-expanded', 'true'); // Inserts the dropdown just after the <input> element

          this.input.parentNode.insertBefore(newContainer, this.input.nextSibling);
          this.container = newContainer;
          this.ul = newUl;
          this.message('TYPING', this.settings.options.length);
        }

        return this;
      }
      /**
       * Highlight new option selected.
       * @param   {Number}  newIndex
       * @return  {object}  The Class
       */

    }, {
      key: "highlight",
      value: function highlight(newIndex) {
        if (newIndex > -1 && newIndex < this.ul.children.length) {
          // If any option already selected, then unselect it
          if (this.highlighted !== -1) {
            this.ul.children[this.highlighted].classList.remove(this.SELECTORS.HIGHLIGHT);
            this.ul.children[this.highlighted].removeAttribute('aria-selected');
            this.ul.children[this.highlighted].removeAttribute('id');
            this.input.removeAttribute('aria-activedescendant');
          }

          this.highlighted = newIndex;

          if (this.highlighted !== -1) {
            this.ul.children[this.highlighted].classList.add(this.SELECTORS.HIGHLIGHT);
            this.ul.children[this.highlighted].setAttribute('aria-selected', 'true');
            this.ul.children[this.highlighted].setAttribute('id', this.SELECTORS.ACTIVE_DESCENDANT);
            this.input.setAttribute('aria-activedescendant', this.SELECTORS.ACTIVE_DESCENDANT);
          }
        }

        return this;
      }
      /**
       * Selects an option from a list of items.
       * @return  {object} The Class
       */

    }, {
      key: "selected",
      value: function selected() {
        if (this.highlighted !== -1) {
          this.input.value = this.scoredOptions[this.highlighted].displayValue;
          this.remove();
          this.message('SELECTED', this.input.value);
          if (window.innerWidth <= 768) { this.input.scrollIntoView(true); }
        } // User provided callback method for selected option.


        if (this.settings.selected) { this.settings.selected(this.input.value, this); }
        return this;
      }
      /**
       * Remove dropdown list once a list item is selected.
       * @return  {object} The Class
       */

    }, {
      key: "remove",
      value: function remove() {
        this.container && this.container.remove();
        this.input.setAttribute('aria-expanded', 'false');
        this.container = null;
        this.ul = null;
        return this;
      }
      /**
       * Messaging that is passed to the screen reader
       * @param   {string}  key       The Key of the message to write
       * @param   {string}  variable  A variable to provide to the string.
       * @return  {object}            The Class
       */

    }, {
      key: "message",
      value: function message() {
        var _this4 = this;

        var key = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
        var variable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
        if (!key) { return this; }
        var messages = {
          'INIT': function INIT() {
            return _this4.STRINGS.DIRECTIONS_TYPE;
          },
          'TYPING': function TYPING() {
            return [_this4.STRINGS.OPTION_AVAILABLE.replace('{{ NUMBER }}', variable), _this4.STRINGS.DIRECTIONS_REVIEW].join('. ');
          },
          'SELECTED': function SELECTED() {
            return [_this4.STRINGS.OPTION_SELECTED.replace('{{ VALUE }}', variable), _this4.STRINGS.DIRECTIONS_TYPE].join('. ');
          }
        };
        document.querySelector("#".concat(this.input.getAttribute('aria-describedby'))).innerHTML = messages[key]();
        return this;
      }
    }], [{
      key: "score",
      value: function score(value, synonyms) {
        var closestSynonym = null;
        synonyms.forEach(function (synonym) {
          var similarity = jaroWinkler(synonym.trim().toLowerCase(), value.trim().toLowerCase());

          if (closestSynonym === null || similarity > closestSynonym.similarity) {
            closestSynonym = {
              similarity: similarity,
              value: synonym
            };
            if (similarity === 1) { return; }
          }
        });
        return {
          score: closestSynonym.similarity,
          displayValue: synonyms[0]
        };
      }
      /**
       * List item for dropdown list.
       * @param  {Number}  scoredOption
       * @param  {Number}  index
       * @return {string}  The a list item <li>.
       */

    }, {
      key: "listItem",
      value: function listItem(scoredOption, index, maxItems) {
        var normalizedIndex = index + 1; // start at 1

        var li = normalizedIndex > maxItems ? null : document.createElement('li');

        if (li) {
          li.setAttribute('role', 'option');
          li.setAttribute('tabindex', '-1');
          li.setAttribute('aria-selected', 'false');
        }

        li && li.appendChild(document.createTextNode(scoredOption.displayValue));
        return li;
      }
      /**
       * Get index of previous element.
       * @param  {array}   node
       * @return {number}  index of previous element.
       */

    }, {
      key: "getSiblingIndex",
      value: function getSiblingIndex(node) {
        var index = -1;
        var n = node;

        do {
          index++;
          n = n.previousElementSibling;
        } while (n);

        return index;
      }
    }]);

    return Autocomplete;
  }();
  /** Selectors for the Autocomplete class. */


  Autocomplete.selectors = {
    'HIGHLIGHT': 'input-autocomplete__highlight',
    'OPTIONS': 'input-autocomplete__options',
    'ACTIVE_DESCENDANT': 'input-autocomplete__selected',
    'SCREEN_READER_ONLY': 'sr-only'
  };
  /**  */

  Autocomplete.strings = {
    'DIRECTIONS_TYPE': 'Start typing to generate a list of potential input options',
    'DIRECTIONS_REVIEW': ['Keyboard users can use the up and down arrows to ', 'review options and press enter to select an option'].join(''),
    'OPTION_AVAILABLE': '{{ NUMBER }} options available',
    'OPTION_SELECTED': '{{ VALUE }} selected'
  };
  /** Maximum amount of results to be returned. */

  Autocomplete.maxItems = 5;

  /**
   * The InputAutocomplete class.
   */

  var InputAutocomplete =
  /*#__PURE__*/
  function () {
    /**
     * @param  {object} settings This could be some configuration options.
     *                           for the pattern module.
     * @constructor
     */
    function InputAutocomplete() {
      var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

      _classCallCheck(this, InputAutocomplete);

      this.library = new Autocomplete({
        options: settings.hasOwnProperty('options') ? settings.options : InputAutocomplete.options,
        selected: settings.hasOwnProperty('selected') ? settings.selected : false,
        selector: settings.hasOwnProperty('selector') ? settings.selector : InputAutocomplete.selector,
        classname: settings.hasOwnProperty('classname') ? settings.classname : InputAutocomplete.classname
      });
      return this;
    }
    /**
     * Setter for the Autocomplete options
     * @param  {object} reset Set of array options for the Autocomplete class
     * @return {object} InputAutocomplete object with new options.
     */


    _createClass(InputAutocomplete, [{
      key: "options",
      value: function options(reset) {
        this.library.settings.options = reset;
        return this;
      }
      /**
       * Setter for the Autocomplete strings
       * @param  {object}  localizedStrings  Object containing strings.
       * @return {object} Autocomplete strings
       */

    }, {
      key: "strings",
      value: function strings(localizedStrings) {
        Object.assign(this.library.STRINGS, localizedStrings);
        return this;
      }
    }]);

    return InputAutocomplete;
  }();
  /** @type {array} Default options for the autocomplete class */


  InputAutocomplete.options = [];
  /** @type {string} The search box dom selector */

  InputAutocomplete.selector = '[data-js="input-autocomplete__input"]';
  /** @type {string} The classname for the dropdown element */

  InputAutocomplete.classname = 'input-autocomplete__dropdown';

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Built-in value references. */
  var Symbol$1 = root.Symbol;

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$1 = objectProto.hasOwnProperty;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString = objectProto.toString;

  /** Built-in value references. */
  var symToStringTag = Symbol$1 ? Symbol$1.toStringTag : undefined;

  /**
   * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the raw `toStringTag`.
   */
  function getRawTag(value) {
    var isOwn = hasOwnProperty$1.call(value, symToStringTag),
        tag = value[symToStringTag];

    try {
      value[symToStringTag] = undefined;
      var unmasked = true;
    } catch (e) {}

    var result = nativeObjectToString.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag] = tag;
      } else {
        delete value[symToStringTag];
      }
    }
    return result;
  }

  /** Used for built-in method references. */
  var objectProto$1 = Object.prototype;

  /**
   * Used to resolve the
   * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
   * of values.
   */
  var nativeObjectToString$1 = objectProto$1.toString;

  /**
   * Converts `value` to a string using `Object.prototype.toString`.
   *
   * @private
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   */
  function objectToString(value) {
    return nativeObjectToString$1.call(value);
  }

  /** `Object#toString` result references. */
  var nullTag = '[object Null]',
      undefinedTag = '[object Undefined]';

  /** Built-in value references. */
  var symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;

  /**
   * The base implementation of `getTag` without fallbacks for buggy environments.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  function baseGetTag(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }
    return (symToStringTag$1 && symToStringTag$1 in Object(value))
      ? getRawTag(value)
      : objectToString(value);
  }

  /**
   * Checks if `value` is the
   * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
   * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an object, else `false`.
   * @example
   *
   * _.isObject({});
   * // => true
   *
   * _.isObject([1, 2, 3]);
   * // => true
   *
   * _.isObject(_.noop);
   * // => true
   *
   * _.isObject(null);
   * // => false
   */
  function isObject$1(value) {
    var type = typeof value;
    return value != null && (type == 'object' || type == 'function');
  }

  /** `Object#toString` result references. */
  var asyncTag = '[object AsyncFunction]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      proxyTag = '[object Proxy]';

  /**
   * Checks if `value` is classified as a `Function` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a function, else `false`.
   * @example
   *
   * _.isFunction(_);
   * // => true
   *
   * _.isFunction(/abc/);
   * // => false
   */
  function isFunction(value) {
    if (!isObject$1(value)) {
      return false;
    }
    // The use of `Object#toString` avoids issues with the `typeof` operator
    // in Safari 9 which returns 'object' for typed arrays and other constructors.
    var tag = baseGetTag(value);
    return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
  }

  /** Used to detect overreaching core-js shims. */
  var coreJsData = root['__core-js_shared__'];

  /** Used to detect methods masquerading as native. */
  var maskSrcKey = (function() {
    var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
    return uid ? ('Symbol(src)_1.' + uid) : '';
  }());

  /**
   * Checks if `func` has its source masked.
   *
   * @private
   * @param {Function} func The function to check.
   * @returns {boolean} Returns `true` if `func` is masked, else `false`.
   */
  function isMasked(func) {
    return !!maskSrcKey && (maskSrcKey in func);
  }

  /** Used for built-in method references. */
  var funcProto = Function.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString = funcProto.toString;

  /**
   * Converts `func` to its source code.
   *
   * @private
   * @param {Function} func The function to convert.
   * @returns {string} Returns the source code.
   */
  function toSource(func) {
    if (func != null) {
      try {
        return funcToString.call(func);
      } catch (e) {}
      try {
        return (func + '');
      } catch (e) {}
    }
    return '';
  }

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used for built-in method references. */
  var funcProto$1 = Function.prototype,
      objectProto$2 = Object.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString$1 = funcProto$1.toString;

  /** Used to check objects for own properties. */
  var hasOwnProperty$2 = objectProto$2.hasOwnProperty;

  /** Used to detect if a method is native. */
  var reIsNative = RegExp('^' +
    funcToString$1.call(hasOwnProperty$2).replace(reRegExpChar, '\\$&')
    .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
  );

  /**
   * The base implementation of `_.isNative` without bad shim checks.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a native function,
   *  else `false`.
   */
  function baseIsNative(value) {
    if (!isObject$1(value) || isMasked(value)) {
      return false;
    }
    var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
    return pattern.test(toSource(value));
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue$1(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Gets the native function at `key` of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the method to get.
   * @returns {*} Returns the function if it's native, else `undefined`.
   */
  function getNative(object, key) {
    var value = getValue$1(object, key);
    return baseIsNative(value) ? value : undefined;
  }

  var defineProperty = (function() {
    try {
      var func = getNative(Object, 'defineProperty');
      func({}, '', {});
      return func;
    } catch (e) {}
  }());

  /**
   * The base implementation of `assignValue` and `assignMergeValue` without
   * value checks.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function baseAssignValue(object, key, value) {
    if (key == '__proto__' && defineProperty) {
      defineProperty(object, key, {
        'configurable': true,
        'enumerable': true,
        'value': value,
        'writable': true
      });
    } else {
      object[key] = value;
    }
  }

  /**
   * Performs a
   * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * comparison between two values to determine if they are equivalent.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   * @example
   *
   * var object = { 'a': 1 };
   * var other = { 'a': 1 };
   *
   * _.eq(object, object);
   * // => true
   *
   * _.eq(object, other);
   * // => false
   *
   * _.eq('a', 'a');
   * // => true
   *
   * _.eq('a', Object('a'));
   * // => false
   *
   * _.eq(NaN, NaN);
   * // => true
   */
  function eq(value, other) {
    return value === other || (value !== value && other !== other);
  }

  /** Used for built-in method references. */
  var objectProto$3 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$3 = objectProto$3.hasOwnProperty;

  /**
   * Assigns `value` to `key` of `object` if the existing value is not equivalent
   * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
   * for equality comparisons.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function assignValue(object, key, value) {
    var objValue = object[key];
    if (!(hasOwnProperty$3.call(object, key) && eq(objValue, value)) ||
        (value === undefined && !(key in object))) {
      baseAssignValue(object, key, value);
    }
  }

  /**
   * Copies properties of `source` to `object`.
   *
   * @private
   * @param {Object} source The object to copy properties from.
   * @param {Array} props The property identifiers to copy.
   * @param {Object} [object={}] The object to copy properties to.
   * @param {Function} [customizer] The function to customize copied values.
   * @returns {Object} Returns `object`.
   */
  function copyObject(source, props, object, customizer) {
    var isNew = !object;
    object || (object = {});

    var index = -1,
        length = props.length;

    while (++index < length) {
      var key = props[index];

      var newValue = customizer
        ? customizer(object[key], source[key], key, object, source)
        : undefined;

      if (newValue === undefined) {
        newValue = source[key];
      }
      if (isNew) {
        baseAssignValue(object, key, newValue);
      } else {
        assignValue(object, key, newValue);
      }
    }
    return object;
  }

  /**
   * This method returns the first argument it receives.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Util
   * @param {*} value Any value.
   * @returns {*} Returns `value`.
   * @example
   *
   * var object = { 'a': 1 };
   *
   * console.log(_.identity(object) === object);
   * // => true
   */
  function identity$1(value) {
    return value;
  }

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax = Math.max;

  /**
   * A specialized version of `baseRest` which transforms the rest array.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @param {Function} transform The rest array transform.
   * @returns {Function} Returns the new function.
   */
  function overRest(func, start, transform) {
    start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
    return function() {
      var args = arguments,
          index = -1,
          length = nativeMax(args.length - start, 0),
          array = Array(length);

      while (++index < length) {
        array[index] = args[start + index];
      }
      index = -1;
      var otherArgs = Array(start + 1);
      while (++index < start) {
        otherArgs[index] = args[index];
      }
      otherArgs[start] = transform(array);
      return apply(func, this, otherArgs);
    };
  }

  /**
   * Creates a function that returns `value`.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {*} value The value to return from the new function.
   * @returns {Function} Returns the new constant function.
   * @example
   *
   * var objects = _.times(2, _.constant({ 'a': 1 }));
   *
   * console.log(objects);
   * // => [{ 'a': 1 }, { 'a': 1 }]
   *
   * console.log(objects[0] === objects[1]);
   * // => true
   */
  function constant(value) {
    return function() {
      return value;
    };
  }

  /**
   * The base implementation of `setToString` without support for hot loop shorting.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */
  var baseSetToString = !defineProperty ? identity$1 : function(func, string) {
    return defineProperty(func, 'toString', {
      'configurable': true,
      'enumerable': false,
      'value': constant(string),
      'writable': true
    });
  };

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeNow = Date.now;

  /**
   * Creates a function that'll short out and invoke `identity` instead
   * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
   * milliseconds.
   *
   * @private
   * @param {Function} func The function to restrict.
   * @returns {Function} Returns the new shortable function.
   */
  function shortOut(func) {
    var count = 0,
        lastCalled = 0;

    return function() {
      var stamp = nativeNow(),
          remaining = HOT_SPAN - (stamp - lastCalled);

      lastCalled = stamp;
      if (remaining > 0) {
        if (++count >= HOT_COUNT) {
          return arguments[0];
        }
      } else {
        count = 0;
      }
      return func.apply(undefined, arguments);
    };
  }

  /**
   * Sets the `toString` method of `func` to return `string`.
   *
   * @private
   * @param {Function} func The function to modify.
   * @param {Function} string The `toString` result.
   * @returns {Function} Returns `func`.
   */
  var setToString = shortOut(baseSetToString);

  /**
   * The base implementation of `_.rest` which doesn't validate or coerce arguments.
   *
   * @private
   * @param {Function} func The function to apply a rest parameter to.
   * @param {number} [start=func.length-1] The start position of the rest parameter.
   * @returns {Function} Returns the new function.
   */
  function baseRest(func, start) {
    return setToString(overRest(func, start, identity$1), func + '');
  }

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER = 9007199254740991;

  /**
   * Checks if `value` is a valid array-like length.
   *
   * **Note:** This method is loosely based on
   * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
   * @example
   *
   * _.isLength(3);
   * // => true
   *
   * _.isLength(Number.MIN_VALUE);
   * // => false
   *
   * _.isLength(Infinity);
   * // => false
   *
   * _.isLength('3');
   * // => false
   */
  function isLength(value) {
    return typeof value == 'number' &&
      value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
  }

  /**
   * Checks if `value` is array-like. A value is considered array-like if it's
   * not a function and has a `value.length` that's an integer greater than or
   * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
   * @example
   *
   * _.isArrayLike([1, 2, 3]);
   * // => true
   *
   * _.isArrayLike(document.body.children);
   * // => true
   *
   * _.isArrayLike('abc');
   * // => true
   *
   * _.isArrayLike(_.noop);
   * // => false
   */
  function isArrayLike(value) {
    return value != null && isLength(value.length) && !isFunction(value);
  }

  /** Used as references for various `Number` constants. */
  var MAX_SAFE_INTEGER$1 = 9007199254740991;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /**
   * Checks if `value` is a valid array-like index.
   *
   * @private
   * @param {*} value The value to check.
   * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
   * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
   */
  function isIndex(value, length) {
    var type = typeof value;
    length = length == null ? MAX_SAFE_INTEGER$1 : length;

    return !!length &&
      (type == 'number' ||
        (type != 'symbol' && reIsUint.test(value))) &&
          (value > -1 && value % 1 == 0 && value < length);
  }

  /**
   * Checks if the given arguments are from an iteratee call.
   *
   * @private
   * @param {*} value The potential iteratee value argument.
   * @param {*} index The potential iteratee index or key argument.
   * @param {*} object The potential iteratee object argument.
   * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
   *  else `false`.
   */
  function isIterateeCall(value, index, object) {
    if (!isObject$1(object)) {
      return false;
    }
    var type = typeof index;
    if (type == 'number'
          ? (isArrayLike(object) && isIndex(index, object.length))
          : (type == 'string' && index in object)
        ) {
      return eq(object[index], value);
    }
    return false;
  }

  /**
   * Creates a function like `_.assign`.
   *
   * @private
   * @param {Function} assigner The function to assign values.
   * @returns {Function} Returns the new assigner function.
   */
  function createAssigner(assigner) {
    return baseRest(function(object, sources) {
      var index = -1,
          length = sources.length,
          customizer = length > 1 ? sources[length - 1] : undefined,
          guard = length > 2 ? sources[2] : undefined;

      customizer = (assigner.length > 3 && typeof customizer == 'function')
        ? (length--, customizer)
        : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        customizer = length < 3 ? undefined : customizer;
        length = 1;
      }
      object = Object(object);
      while (++index < length) {
        var source = sources[index];
        if (source) {
          assigner(object, source, index, customizer);
        }
      }
      return object;
    });
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * Checks if `value` is object-like. A value is object-like if it's not `null`
   * and has a `typeof` result of "object".
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
   * @example
   *
   * _.isObjectLike({});
   * // => true
   *
   * _.isObjectLike([1, 2, 3]);
   * // => true
   *
   * _.isObjectLike(_.noop);
   * // => false
   *
   * _.isObjectLike(null);
   * // => false
   */
  function isObjectLike(value) {
    return value != null && typeof value == 'object';
  }

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]';

  /**
   * The base implementation of `_.isArguments`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   */
  function baseIsArguments(value) {
    return isObjectLike(value) && baseGetTag(value) == argsTag;
  }

  /** Used for built-in method references. */
  var objectProto$4 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$4 = objectProto$4.hasOwnProperty;

  /** Built-in value references. */
  var propertyIsEnumerable = objectProto$4.propertyIsEnumerable;

  /**
   * Checks if `value` is likely an `arguments` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an `arguments` object,
   *  else `false`.
   * @example
   *
   * _.isArguments(function() { return arguments; }());
   * // => true
   *
   * _.isArguments([1, 2, 3]);
   * // => false
   */
  var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
    return isObjectLike(value) && hasOwnProperty$4.call(value, 'callee') &&
      !propertyIsEnumerable.call(value, 'callee');
  };

  /**
   * Checks if `value` is classified as an `Array` object.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array, else `false`.
   * @example
   *
   * _.isArray([1, 2, 3]);
   * // => true
   *
   * _.isArray(document.body.children);
   * // => false
   *
   * _.isArray('abc');
   * // => false
   *
   * _.isArray(_.noop);
   * // => false
   */
  var isArray = Array.isArray;

  /**
   * This method returns `false`.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {boolean} Returns `false`.
   * @example
   *
   * _.times(2, _.stubFalse);
   * // => [false, false]
   */
  function stubFalse() {
    return false;
  }

  /** Detect free variable `exports`. */
  var freeExports = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Built-in value references. */
  var Buffer = moduleExports ? root.Buffer : undefined;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined;

  /**
   * Checks if `value` is a buffer.
   *
   * @static
   * @memberOf _
   * @since 4.3.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
   * @example
   *
   * _.isBuffer(new Buffer(2));
   * // => true
   *
   * _.isBuffer(new Uint8Array(2));
   * // => false
   */
  var isBuffer = nativeIsBuffer || stubFalse;

  /** `Object#toString` result references. */
  var argsTag$1 = '[object Arguments]',
      arrayTag = '[object Array]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      errorTag = '[object Error]',
      funcTag$1 = '[object Function]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      objectTag = '[object Object]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      weakMapTag = '[object WeakMap]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag$1] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag$1] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /**
   * The base implementation of `_.isTypedArray` without Node.js optimizations.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   */
  function baseIsTypedArray(value) {
    return isObjectLike(value) &&
      isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /** Detect free variable `exports`. */
  var freeExports$1 = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule$1 = freeExports$1 && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports$1 = freeModule$1 && freeModule$1.exports === freeExports$1;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports$1 && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule$1 && freeModule$1.require && freeModule$1.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /**
   * Checks if `value` is classified as a typed array.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
   * @example
   *
   * _.isTypedArray(new Uint8Array);
   * // => true
   *
   * _.isTypedArray([]);
   * // => false
   */
  var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

  /** Used for built-in method references. */
  var objectProto$5 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$5 = objectProto$5.hasOwnProperty;

  /**
   * Creates an array of the enumerable property names of the array-like `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @param {boolean} inherited Specify returning inherited property names.
   * @returns {Array} Returns the array of property names.
   */
  function arrayLikeKeys(value, inherited) {
    var isArr = isArray(value),
        isArg = !isArr && isArguments(value),
        isBuff = !isArr && !isArg && isBuffer(value),
        isType = !isArr && !isArg && !isBuff && isTypedArray(value),
        skipIndexes = isArr || isArg || isBuff || isType,
        result = skipIndexes ? baseTimes(value.length, String) : [],
        length = result.length;

    for (var key in value) {
      if ((inherited || hasOwnProperty$5.call(value, key)) &&
          !(skipIndexes && (
             // Safari 9 has enumerable `arguments.length` in strict mode.
             key == 'length' ||
             // Node.js 0.10 has enumerable non-index properties on buffers.
             (isBuff && (key == 'offset' || key == 'parent')) ||
             // PhantomJS 2 has enumerable non-index properties on typed arrays.
             (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
             // Skip index properties.
             isIndex(key, length)
          ))) {
        result.push(key);
      }
    }
    return result;
  }

  /** Used for built-in method references. */
  var objectProto$6 = Object.prototype;

  /**
   * Checks if `value` is likely a prototype object.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
   */
  function isPrototype(value) {
    var Ctor = value && value.constructor,
        proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto$6;

    return value === proto;
  }

  /**
   * This function is like
   * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * except that it includes inherited enumerable properties.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function nativeKeysIn(object) {
    var result = [];
    if (object != null) {
      for (var key in Object(object)) {
        result.push(key);
      }
    }
    return result;
  }

  /** Used for built-in method references. */
  var objectProto$7 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$6 = objectProto$7.hasOwnProperty;

  /**
   * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeysIn(object) {
    if (!isObject$1(object)) {
      return nativeKeysIn(object);
    }
    var isProto = isPrototype(object),
        result = [];

    for (var key in object) {
      if (!(key == 'constructor' && (isProto || !hasOwnProperty$6.call(object, key)))) {
        result.push(key);
      }
    }
    return result;
  }

  /**
   * Creates an array of the own and inherited enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keysIn(new Foo);
   * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
   */
  function keysIn(object) {
    return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
  }

  /**
   * This method is like `_.assignIn` except that it accepts `customizer`
   * which is invoked to produce the assigned values. If `customizer` returns
   * `undefined`, assignment is handled by the method instead. The `customizer`
   * is invoked with five arguments: (objValue, srcValue, key, object, source).
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @alias extendWith
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} sources The source objects.
   * @param {Function} [customizer] The function to customize assigned values.
   * @returns {Object} Returns `object`.
   * @see _.assignWith
   * @example
   *
   * function customizer(objValue, srcValue) {
   *   return _.isUndefined(objValue) ? srcValue : objValue;
   * }
   *
   * var defaults = _.partialRight(_.assignInWith, customizer);
   *
   * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
   * // => { 'a': 1, 'b': 2 }
   */
  var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
    copyObject(source, keysIn(source), object, customizer);
  });

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /** Built-in value references. */
  var getPrototype = overArg(Object.getPrototypeOf, Object);

  /** `Object#toString` result references. */
  var objectTag$1 = '[object Object]';

  /** Used for built-in method references. */
  var funcProto$2 = Function.prototype,
      objectProto$8 = Object.prototype;

  /** Used to resolve the decompiled source of functions. */
  var funcToString$2 = funcProto$2.toString;

  /** Used to check objects for own properties. */
  var hasOwnProperty$7 = objectProto$8.hasOwnProperty;

  /** Used to infer the `Object` constructor. */
  var objectCtorString = funcToString$2.call(Object);

  /**
   * Checks if `value` is a plain object, that is, an object created by the
   * `Object` constructor or one with a `[[Prototype]]` of `null`.
   *
   * @static
   * @memberOf _
   * @since 0.8.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   * }
   *
   * _.isPlainObject(new Foo);
   * // => false
   *
   * _.isPlainObject([1, 2, 3]);
   * // => false
   *
   * _.isPlainObject({ 'x': 0, 'y': 0 });
   * // => true
   *
   * _.isPlainObject(Object.create(null));
   * // => true
   */
  function isPlainObject$1(value) {
    if (!isObjectLike(value) || baseGetTag(value) != objectTag$1) {
      return false;
    }
    var proto = getPrototype(value);
    if (proto === null) {
      return true;
    }
    var Ctor = hasOwnProperty$7.call(proto, 'constructor') && proto.constructor;
    return typeof Ctor == 'function' && Ctor instanceof Ctor &&
      funcToString$2.call(Ctor) == objectCtorString;
  }

  /** `Object#toString` result references. */
  var domExcTag = '[object DOMException]',
      errorTag$1 = '[object Error]';

  /**
   * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
   * `SyntaxError`, `TypeError`, or `URIError` object.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
   * @example
   *
   * _.isError(new Error);
   * // => true
   *
   * _.isError(Error);
   * // => false
   */
  function isError(value) {
    if (!isObjectLike(value)) {
      return false;
    }
    var tag = baseGetTag(value);
    return tag == errorTag$1 || tag == domExcTag ||
      (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject$1(value));
  }

  /**
   * Attempts to invoke `func`, returning either the result or the caught error
   * object. Any additional arguments are provided to `func` when it's invoked.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Util
   * @param {Function} func The function to attempt.
   * @param {...*} [args] The arguments to invoke `func` with.
   * @returns {*} Returns the `func` result or error object.
   * @example
   *
   * // Avoid throwing errors for invalid selectors.
   * var elements = _.attempt(function(selector) {
   *   return document.querySelectorAll(selector);
   * }, '>_>');
   *
   * if (_.isError(elements)) {
   *   elements = [];
   * }
   */
  var attempt = baseRest(function(func, args) {
    try {
      return apply(func, undefined, args);
    } catch (e) {
      return isError(e) ? e : new Error(e);
    }
  });

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /** Used for built-in method references. */
  var objectProto$9 = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$8 = objectProto$9.hasOwnProperty;

  /**
   * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
   * of source objects to the destination object for all destination properties
   * that resolve to `undefined`.
   *
   * @private
   * @param {*} objValue The destination value.
   * @param {*} srcValue The source value.
   * @param {string} key The key of the property to assign.
   * @param {Object} object The parent object of `objValue`.
   * @returns {*} Returns the value to assign.
   */
  function customDefaultsAssignIn(objValue, srcValue, key, object) {
    if (objValue === undefined ||
        (eq(objValue, objectProto$9[key]) && !hasOwnProperty$8.call(object, key))) {
      return srcValue;
    }
    return objValue;
  }

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeKeys = overArg(Object.keys, Object);

  /** Used for built-in method references. */
  var objectProto$a = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$9 = objectProto$a.hasOwnProperty;

  /**
   * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   */
  function baseKeys(object) {
    if (!isPrototype(object)) {
      return nativeKeys(object);
    }
    var result = [];
    for (var key in Object(object)) {
      if (hasOwnProperty$9.call(object, key) && key != 'constructor') {
        result.push(key);
      }
    }
    return result;
  }

  /**
   * Creates an array of the own enumerable property names of `object`.
   *
   * **Note:** Non-object values are coerced to objects. See the
   * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
   * for more details.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.keys(new Foo);
   * // => ['a', 'b'] (iteration order is not guaranteed)
   *
   * _.keys('hi');
   * // => ['0', '1']
   */
  function keys(object) {
    return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
  }

  /** Used to match template delimiters. */
  var reInterpolate = /<%=([\s\S]+?)%>/g;

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /** `Object#toString` result references. */
  var symbolTag = '[object Symbol]';

  /**
   * Checks if `value` is classified as a `Symbol` primitive or object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
   * @example
   *
   * _.isSymbol(Symbol.iterator);
   * // => true
   *
   * _.isSymbol('abc');
   * // => false
   */
  function isSymbol(value) {
    return typeof value == 'symbol' ||
      (isObjectLike(value) && baseGetTag(value) == symbolTag);
  }

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0;

  /** Used to convert symbols to primitives and strings. */
  var symbolProto = Symbol$1 ? Symbol$1.prototype : undefined,
      symbolToString = symbolProto ? symbolProto.toString : undefined;

  /**
   * The base implementation of `_.toString` which doesn't convert nullish
   * values to empty strings.
   *
   * @private
   * @param {*} value The value to process.
   * @returns {string} Returns the string.
   */
  function baseToString(value) {
    // Exit early for strings to avoid a performance hit in some environments.
    if (typeof value == 'string') {
      return value;
    }
    if (isArray(value)) {
      // Recursively convert values (susceptible to call stack limits).
      return arrayMap(value, baseToString) + '';
    }
    if (isSymbol(value)) {
      return symbolToString ? symbolToString.call(value) : '';
    }
    var result = (value + '');
    return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
  }

  /**
   * Converts `value` to a string. An empty string is returned for `null`
   * and `undefined` values. The sign of `-0` is preserved.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {string} Returns the converted string.
   * @example
   *
   * _.toString(null);
   * // => ''
   *
   * _.toString(-0);
   * // => '-0'
   *
   * _.toString([1, 2, 3]);
   * // => '1,2,3'
   */
  function toString$1(value) {
    return value == null ? '' : baseToString(value);
  }

  /** Used to match HTML entities and HTML characters. */
  var reUnescapedHtml = /[&<>"']/g,
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /**
   * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
   * corresponding HTML entities.
   *
   * **Note:** No other characters are escaped. To escape additional
   * characters use a third-party library like [_he_](https://mths.be/he).
   *
   * Though the ">" character is escaped for symmetry, characters like
   * ">" and "/" don't need escaping in HTML and have no special meaning
   * unless they're part of a tag or unquoted attribute value. See
   * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
   * (under "semi-related fun fact") for more details.
   *
   * When working with HTML you should always
   * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
   * XSS vectors.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category String
   * @param {string} [string=''] The string to escape.
   * @returns {string} Returns the escaped string.
   * @example
   *
   * _.escape('fred, barney, & pebbles');
   * // => 'fred, barney, &amp; pebbles'
   */
  function escape(string) {
    string = toString$1(string);
    return (string && reHasUnescapedHtml.test(string))
      ? string.replace(reUnescapedHtml, escapeHtmlChar)
      : string;
  }

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g;

  /** Used to match template delimiters. */
  var reEvaluate = /<%([\s\S]+?)%>/g;

  /**
   * By default, the template delimiters used by lodash are like those in
   * embedded Ruby (ERB) as well as ES2015 template strings. Change the
   * following template settings to use alternative delimiters.
   *
   * @static
   * @memberOf _
   * @type {Object}
   */
  var templateSettings = {

    /**
     * Used to detect `data` property values to be HTML-escaped.
     *
     * @memberOf _.templateSettings
     * @type {RegExp}
     */
    'escape': reEscape,

    /**
     * Used to detect code to be evaluated.
     *
     * @memberOf _.templateSettings
     * @type {RegExp}
     */
    'evaluate': reEvaluate,

    /**
     * Used to detect `data` property values to inject.
     *
     * @memberOf _.templateSettings
     * @type {RegExp}
     */
    'interpolate': reInterpolate,

    /**
     * Used to reference the data object in the template text.
     *
     * @memberOf _.templateSettings
     * @type {string}
     */
    'variable': '',

    /**
     * Used to import variables into the compiled template.
     *
     * @memberOf _.templateSettings
     * @type {Object}
     */
    'imports': {

      /**
       * A reference to the `lodash` function.
       *
       * @memberOf _.templateSettings.imports
       * @type {Function}
       */
      '_': { 'escape': escape }
    }
  };

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used for built-in method references. */
  var objectProto$b = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$a = objectProto$b.hasOwnProperty;

  /**
   * Creates a compiled template function that can interpolate data properties
   * in "interpolate" delimiters, HTML-escape interpolated data properties in
   * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
   * properties may be accessed as free variables in the template. If a setting
   * object is given, it takes precedence over `_.templateSettings` values.
   *
   * **Note:** In the development build `_.template` utilizes
   * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
   * for easier debugging.
   *
   * For more information on precompiling templates see
   * [lodash's custom builds documentation](https://lodash.com/custom-builds).
   *
   * For more information on Chrome extension sandboxes see
   * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category String
   * @param {string} [string=''] The template string.
   * @param {Object} [options={}] The options object.
   * @param {RegExp} [options.escape=_.templateSettings.escape]
   *  The HTML "escape" delimiter.
   * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
   *  The "evaluate" delimiter.
   * @param {Object} [options.imports=_.templateSettings.imports]
   *  An object to import into the template as free variables.
   * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
   *  The "interpolate" delimiter.
   * @param {string} [options.sourceURL='templateSources[n]']
   *  The sourceURL of the compiled template.
   * @param {string} [options.variable='obj']
   *  The data object variable name.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
   * @returns {Function} Returns the compiled template function.
   * @example
   *
   * // Use the "interpolate" delimiter to create a compiled template.
   * var compiled = _.template('hello <%= user %>!');
   * compiled({ 'user': 'fred' });
   * // => 'hello fred!'
   *
   * // Use the HTML "escape" delimiter to escape data property values.
   * var compiled = _.template('<b><%- value %></b>');
   * compiled({ 'value': '<script>' });
   * // => '<b>&lt;script&gt;</b>'
   *
   * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
   * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
   * compiled({ 'users': ['fred', 'barney'] });
   * // => '<li>fred</li><li>barney</li>'
   *
   * // Use the internal `print` function in "evaluate" delimiters.
   * var compiled = _.template('<% print("hello " + user); %>!');
   * compiled({ 'user': 'barney' });
   * // => 'hello barney!'
   *
   * // Use the ES template literal delimiter as an "interpolate" delimiter.
   * // Disable support by replacing the "interpolate" delimiter.
   * var compiled = _.template('hello ${ user }!');
   * compiled({ 'user': 'pebbles' });
   * // => 'hello pebbles!'
   *
   * // Use backslashes to treat delimiters as plain text.
   * var compiled = _.template('<%= "\\<%- value %\\>" %>');
   * compiled({ 'value': 'ignored' });
   * // => '<%- value %>'
   *
   * // Use the `imports` option to import `jQuery` as `jq`.
   * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
   * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
   * compiled({ 'users': ['fred', 'barney'] });
   * // => '<li>fred</li><li>barney</li>'
   *
   * // Use the `sourceURL` option to specify a custom sourceURL for the template.
   * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
   * compiled(data);
   * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
   *
   * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
   * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
   * compiled.source;
   * // => function(data) {
   * //   var __t, __p = '';
   * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
   * //   return __p;
   * // }
   *
   * // Use custom template delimiters.
   * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
   * var compiled = _.template('hello {{ user }}!');
   * compiled({ 'user': 'mustache' });
   * // => 'hello mustache!'
   *
   * // Use the `source` property to inline compiled templates for meaningful
   * // line numbers in error messages and stack traces.
   * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
   *   var JST = {\
   *     "main": ' + _.template(mainText).source + '\
   *   };\
   * ');
   */
  function template(string, options, guard) {
    // Based on John Resig's `tmpl` implementation
    // (http://ejohn.org/blog/javascript-micro-templating/)
    // and Laura Doktorova's doT.js (https://github.com/olado/doT).
    var settings = templateSettings.imports._.templateSettings || templateSettings;

    if (guard && isIterateeCall(string, options, guard)) {
      options = undefined;
    }
    string = toString$1(string);
    options = assignInWith({}, options, settings, customDefaultsAssignIn);

    var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
        importsKeys = keys(imports),
        importsValues = baseValues(imports, importsKeys);

    var isEscaping,
        isEvaluating,
        index = 0,
        interpolate = options.interpolate || reNoMatch,
        source = "__p += '";

    // Compile the regexp to match each delimiter.
    var reDelimiters = RegExp(
      (options.escape || reNoMatch).source + '|' +
      interpolate.source + '|' +
      (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
      (options.evaluate || reNoMatch).source + '|$'
    , 'g');

    // Use a sourceURL for easier debugging.
    // The sourceURL gets injected into the source that's eval-ed, so be careful
    // with lookup (in case of e.g. prototype pollution), and strip newlines if any.
    // A newline wouldn't be a valid sourceURL anyway, and it'd enable code injection.
    var sourceURL = hasOwnProperty$a.call(options, 'sourceURL')
      ? ('//# sourceURL=' +
         (options.sourceURL + '').replace(/[\r\n]/g, ' ') +
         '\n')
      : '';

    string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
      interpolateValue || (interpolateValue = esTemplateValue);

      // Escape characters that can't be included in string literals.
      source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

      // Replace delimiters with snippets.
      if (escapeValue) {
        isEscaping = true;
        source += "' +\n__e(" + escapeValue + ") +\n'";
      }
      if (evaluateValue) {
        isEvaluating = true;
        source += "';\n" + evaluateValue + ";\n__p += '";
      }
      if (interpolateValue) {
        source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
      }
      index = offset + match.length;

      // The JS engine embedded in Adobe products needs `match` returned in
      // order to produce the correct `offset` value.
      return match;
    });

    source += "';\n";

    // If `variable` is not specified wrap a with-statement around the generated
    // code to add the data object to the top of the scope chain.
    // Like with sourceURL, we take care to not check the option's prototype,
    // as this configuration is a code injection vector.
    var variable = hasOwnProperty$a.call(options, 'variable') && options.variable;
    if (!variable) {
      source = 'with (obj) {\n' + source + '\n}\n';
    }
    // Cleanup code by stripping empty strings.
    source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
      .replace(reEmptyStringMiddle, '$1')
      .replace(reEmptyStringTrailing, '$1;');

    // Frame code as the function body.
    source = 'function(' + (variable || 'obj') + ') {\n' +
      (variable
        ? ''
        : 'obj || (obj = {});\n'
      ) +
      "var __t, __p = ''" +
      (isEscaping
         ? ', __e = _.escape'
         : ''
      ) +
      (isEvaluating
        ? ', __j = Array.prototype.join;\n' +
          "function print() { __p += __j.call(arguments, '') }\n"
        : ';\n'
      ) +
      source +
      'return __p\n}';

    var result = attempt(function() {
      return Function(importsKeys, sourceURL + 'return ' + source)
        .apply(undefined, importsValues);
    });

    // Provide the compiled function's source by its `toString` method or
    // the `source` property as a convenience for inlining compiled templates.
    result.source = source;
    if (isError(result)) {
      throw result;
    }
    return result;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * Creates a base function for methods like `_.forIn` and `_.forOwn`.
   *
   * @private
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */
  function createBaseFor(fromRight) {
    return function(object, iteratee, keysFunc) {
      var index = -1,
          iterable = Object(object),
          props = keysFunc(object),
          length = props.length;

      while (length--) {
        var key = props[fromRight ? length : ++index];
        if (iteratee(iterable[key], key, iterable) === false) {
          break;
        }
      }
      return object;
    };
  }

  /**
   * The base implementation of `baseForOwn` which iterates over `object`
   * properties returned by `keysFunc` and invokes `iteratee` for each property.
   * Iteratee functions may exit iteration early by explicitly returning `false`.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @returns {Object} Returns `object`.
   */
  var baseFor = createBaseFor();

  /**
   * The base implementation of `_.forOwn` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The object to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Object} Returns `object`.
   */
  function baseForOwn(object, iteratee) {
    return object && baseFor(object, iteratee, keys);
  }

  /**
   * Creates a `baseEach` or `baseEachRight` function.
   *
   * @private
   * @param {Function} eachFunc The function to iterate over a collection.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {Function} Returns the new base function.
   */
  function createBaseEach(eachFunc, fromRight) {
    return function(collection, iteratee) {
      if (collection == null) {
        return collection;
      }
      if (!isArrayLike(collection)) {
        return eachFunc(collection, iteratee);
      }
      var length = collection.length,
          index = fromRight ? length : -1,
          iterable = Object(collection);

      while ((fromRight ? index-- : ++index < length)) {
        if (iteratee(iterable[index], index, iterable) === false) {
          break;
        }
      }
      return collection;
    };
  }

  /**
   * The base implementation of `_.forEach` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array|Object} Returns `collection`.
   */
  var baseEach = createBaseEach(baseForOwn);

  /**
   * Casts `value` to `identity` if it's not a function.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {Function} Returns cast function.
   */
  function castFunction(value) {
    return typeof value == 'function' ? value : identity$1;
  }

  /**
   * Iterates over elements of `collection` and invokes `iteratee` for each element.
   * The iteratee is invoked with three arguments: (value, index|key, collection).
   * Iteratee functions may exit iteration early by explicitly returning `false`.
   *
   * **Note:** As with other "Collections" methods, objects with a "length"
   * property are iterated like arrays. To avoid this behavior use `_.forIn`
   * or `_.forOwn` for object iteration.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @alias each
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} [iteratee=_.identity] The function invoked per iteration.
   * @returns {Array|Object} Returns `collection`.
   * @see _.forEachRight
   * @example
   *
   * _.forEach([1, 2], function(value) {
   *   console.log(value);
   * });
   * // => Logs `1` then `2`.
   *
   * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
   *   console.log(key);
   * });
   * // => Logs 'a' then 'b' (iteration order is not guaranteed).
   */
  function forEach(collection, iteratee) {
    var func = isArray(collection) ? arrayEach : baseEach;
    return func(collection, castFunction(iteratee));
  }

  /**
   * Removes all key-value entries from the list cache.
   *
   * @private
   * @name clear
   * @memberOf ListCache
   */
  function listCacheClear() {
    this.__data__ = [];
    this.size = 0;
  }

  /**
   * Gets the index at which the `key` is found in `array` of key-value pairs.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} key The key to search for.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function assocIndexOf(array, key) {
    var length = array.length;
    while (length--) {
      if (eq(array[length][0], key)) {
        return length;
      }
    }
    return -1;
  }

  /** Used for built-in method references. */
  var arrayProto$1 = Array.prototype;

  /** Built-in value references. */
  var splice = arrayProto$1.splice;

  /**
   * Removes `key` and its value from the list cache.
   *
   * @private
   * @name delete
   * @memberOf ListCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function listCacheDelete(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      return false;
    }
    var lastIndex = data.length - 1;
    if (index == lastIndex) {
      data.pop();
    } else {
      splice.call(data, index, 1);
    }
    --this.size;
    return true;
  }

  /**
   * Gets the list cache value for `key`.
   *
   * @private
   * @name get
   * @memberOf ListCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function listCacheGet(key) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    return index < 0 ? undefined : data[index][1];
  }

  /**
   * Checks if a list cache value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf ListCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function listCacheHas(key) {
    return assocIndexOf(this.__data__, key) > -1;
  }

  /**
   * Sets the list cache `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf ListCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the list cache instance.
   */
  function listCacheSet(key, value) {
    var data = this.__data__,
        index = assocIndexOf(data, key);

    if (index < 0) {
      ++this.size;
      data.push([key, value]);
    } else {
      data[index][1] = value;
    }
    return this;
  }

  /**
   * Creates an list cache object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function ListCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `ListCache`.
  ListCache.prototype.clear = listCacheClear;
  ListCache.prototype['delete'] = listCacheDelete;
  ListCache.prototype.get = listCacheGet;
  ListCache.prototype.has = listCacheHas;
  ListCache.prototype.set = listCacheSet;

  /**
   * Removes all key-value entries from the stack.
   *
   * @private
   * @name clear
   * @memberOf Stack
   */
  function stackClear() {
    this.__data__ = new ListCache;
    this.size = 0;
  }

  /**
   * Removes `key` and its value from the stack.
   *
   * @private
   * @name delete
   * @memberOf Stack
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function stackDelete(key) {
    var data = this.__data__,
        result = data['delete'](key);

    this.size = data.size;
    return result;
  }

  /**
   * Gets the stack value for `key`.
   *
   * @private
   * @name get
   * @memberOf Stack
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function stackGet(key) {
    return this.__data__.get(key);
  }

  /**
   * Checks if a stack value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Stack
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function stackHas(key) {
    return this.__data__.has(key);
  }

  /* Built-in method references that are verified to be native. */
  var Map = getNative(root, 'Map');

  /* Built-in method references that are verified to be native. */
  var nativeCreate = getNative(Object, 'create');

  /**
   * Removes all key-value entries from the hash.
   *
   * @private
   * @name clear
   * @memberOf Hash
   */
  function hashClear() {
    this.__data__ = nativeCreate ? nativeCreate(null) : {};
    this.size = 0;
  }

  /**
   * Removes `key` and its value from the hash.
   *
   * @private
   * @name delete
   * @memberOf Hash
   * @param {Object} hash The hash to modify.
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function hashDelete(key) {
    var result = this.has(key) && delete this.__data__[key];
    this.size -= result ? 1 : 0;
    return result;
  }

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used for built-in method references. */
  var objectProto$c = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$b = objectProto$c.hasOwnProperty;

  /**
   * Gets the hash value for `key`.
   *
   * @private
   * @name get
   * @memberOf Hash
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function hashGet(key) {
    var data = this.__data__;
    if (nativeCreate) {
      var result = data[key];
      return result === HASH_UNDEFINED ? undefined : result;
    }
    return hasOwnProperty$b.call(data, key) ? data[key] : undefined;
  }

  /** Used for built-in method references. */
  var objectProto$d = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$c = objectProto$d.hasOwnProperty;

  /**
   * Checks if a hash value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf Hash
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function hashHas(key) {
    var data = this.__data__;
    return nativeCreate ? (data[key] !== undefined) : hasOwnProperty$c.call(data, key);
  }

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED$1 = '__lodash_hash_undefined__';

  /**
   * Sets the hash `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Hash
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the hash instance.
   */
  function hashSet(key, value) {
    var data = this.__data__;
    this.size += this.has(key) ? 0 : 1;
    data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED$1 : value;
    return this;
  }

  /**
   * Creates a hash object.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Hash(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `Hash`.
  Hash.prototype.clear = hashClear;
  Hash.prototype['delete'] = hashDelete;
  Hash.prototype.get = hashGet;
  Hash.prototype.has = hashHas;
  Hash.prototype.set = hashSet;

  /**
   * Removes all key-value entries from the map.
   *
   * @private
   * @name clear
   * @memberOf MapCache
   */
  function mapCacheClear() {
    this.size = 0;
    this.__data__ = {
      'hash': new Hash,
      'map': new (Map || ListCache),
      'string': new Hash
    };
  }

  /**
   * Checks if `value` is suitable for use as unique object key.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
   */
  function isKeyable(value) {
    var type = typeof value;
    return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
      ? (value !== '__proto__')
      : (value === null);
  }

  /**
   * Gets the data for `map`.
   *
   * @private
   * @param {Object} map The map to query.
   * @param {string} key The reference key.
   * @returns {*} Returns the map data.
   */
  function getMapData(map, key) {
    var data = map.__data__;
    return isKeyable(key)
      ? data[typeof key == 'string' ? 'string' : 'hash']
      : data.map;
  }

  /**
   * Removes `key` and its value from the map.
   *
   * @private
   * @name delete
   * @memberOf MapCache
   * @param {string} key The key of the value to remove.
   * @returns {boolean} Returns `true` if the entry was removed, else `false`.
   */
  function mapCacheDelete(key) {
    var result = getMapData(this, key)['delete'](key);
    this.size -= result ? 1 : 0;
    return result;
  }

  /**
   * Gets the map value for `key`.
   *
   * @private
   * @name get
   * @memberOf MapCache
   * @param {string} key The key of the value to get.
   * @returns {*} Returns the entry value.
   */
  function mapCacheGet(key) {
    return getMapData(this, key).get(key);
  }

  /**
   * Checks if a map value for `key` exists.
   *
   * @private
   * @name has
   * @memberOf MapCache
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function mapCacheHas(key) {
    return getMapData(this, key).has(key);
  }

  /**
   * Sets the map `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf MapCache
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the map cache instance.
   */
  function mapCacheSet(key, value) {
    var data = getMapData(this, key),
        size = data.size;

    data.set(key, value);
    this.size += data.size == size ? 0 : 1;
    return this;
  }

  /**
   * Creates a map cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function MapCache(entries) {
    var index = -1,
        length = entries == null ? 0 : entries.length;

    this.clear();
    while (++index < length) {
      var entry = entries[index];
      this.set(entry[0], entry[1]);
    }
  }

  // Add methods to `MapCache`.
  MapCache.prototype.clear = mapCacheClear;
  MapCache.prototype['delete'] = mapCacheDelete;
  MapCache.prototype.get = mapCacheGet;
  MapCache.prototype.has = mapCacheHas;
  MapCache.prototype.set = mapCacheSet;

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /**
   * Sets the stack `key` to `value`.
   *
   * @private
   * @name set
   * @memberOf Stack
   * @param {string} key The key of the value to set.
   * @param {*} value The value to set.
   * @returns {Object} Returns the stack cache instance.
   */
  function stackSet(key, value) {
    var data = this.__data__;
    if (data instanceof ListCache) {
      var pairs = data.__data__;
      if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
        pairs.push([key, value]);
        this.size = ++data.size;
        return this;
      }
      data = this.__data__ = new MapCache(pairs);
    }
    data.set(key, value);
    this.size = data.size;
    return this;
  }

  /**
   * Creates a stack cache object to store key-value pairs.
   *
   * @private
   * @constructor
   * @param {Array} [entries] The key-value pairs to cache.
   */
  function Stack(entries) {
    var data = this.__data__ = new ListCache(entries);
    this.size = data.size;
  }

  // Add methods to `Stack`.
  Stack.prototype.clear = stackClear;
  Stack.prototype['delete'] = stackDelete;
  Stack.prototype.get = stackGet;
  Stack.prototype.has = stackHas;
  Stack.prototype.set = stackSet;

  /**
   * This function is like `assignValue` except that it doesn't assign
   * `undefined` values.
   *
   * @private
   * @param {Object} object The object to modify.
   * @param {string} key The key of the property to assign.
   * @param {*} value The value to assign.
   */
  function assignMergeValue(object, key, value) {
    if ((value !== undefined && !eq(object[key], value)) ||
        (value === undefined && !(key in object))) {
      baseAssignValue(object, key, value);
    }
  }

  /** Detect free variable `exports`. */
  var freeExports$2 = typeof exports == 'object' && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule$2 = freeExports$2 && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports$2 = freeModule$2 && freeModule$2.exports === freeExports$2;

  /** Built-in value references. */
  var Buffer$1 = moduleExports$2 ? root.Buffer : undefined,
      allocUnsafe = Buffer$1 ? Buffer$1.allocUnsafe : undefined;

  /**
   * Creates a clone of  `buffer`.
   *
   * @private
   * @param {Buffer} buffer The buffer to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Buffer} Returns the cloned buffer.
   */
  function cloneBuffer(buffer, isDeep) {
    if (isDeep) {
      return buffer.slice();
    }
    var length = buffer.length,
        result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

    buffer.copy(result);
    return result;
  }

  /** Built-in value references. */
  var Uint8Array = root.Uint8Array;

  /**
   * Creates a clone of `arrayBuffer`.
   *
   * @private
   * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
   * @returns {ArrayBuffer} Returns the cloned array buffer.
   */
  function cloneArrayBuffer(arrayBuffer) {
    var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
    new Uint8Array(result).set(new Uint8Array(arrayBuffer));
    return result;
  }

  /**
   * Creates a clone of `typedArray`.
   *
   * @private
   * @param {Object} typedArray The typed array to clone.
   * @param {boolean} [isDeep] Specify a deep clone.
   * @returns {Object} Returns the cloned typed array.
   */
  function cloneTypedArray(typedArray, isDeep) {
    var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
    return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
  }

  /**
   * Copies the values of `source` to `array`.
   *
   * @private
   * @param {Array} source The array to copy values from.
   * @param {Array} [array=[]] The array to copy values to.
   * @returns {Array} Returns `array`.
   */
  function copyArray(source, array) {
    var index = -1,
        length = source.length;

    array || (array = Array(length));
    while (++index < length) {
      array[index] = source[index];
    }
    return array;
  }

  /** Built-in value references. */
  var objectCreate = Object.create;

  /**
   * The base implementation of `_.create` without support for assigning
   * properties to the created object.
   *
   * @private
   * @param {Object} proto The object to inherit from.
   * @returns {Object} Returns the new object.
   */
  var baseCreate = (function() {
    function object() {}
    return function(proto) {
      if (!isObject$1(proto)) {
        return {};
      }
      if (objectCreate) {
        return objectCreate(proto);
      }
      object.prototype = proto;
      var result = new object;
      object.prototype = undefined;
      return result;
    };
  }());

  /**
   * Initializes an object clone.
   *
   * @private
   * @param {Object} object The object to clone.
   * @returns {Object} Returns the initialized clone.
   */
  function initCloneObject(object) {
    return (typeof object.constructor == 'function' && !isPrototype(object))
      ? baseCreate(getPrototype(object))
      : {};
  }

  /**
   * This method is like `_.isArrayLike` except that it also checks if `value`
   * is an object.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Lang
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is an array-like object,
   *  else `false`.
   * @example
   *
   * _.isArrayLikeObject([1, 2, 3]);
   * // => true
   *
   * _.isArrayLikeObject(document.body.children);
   * // => true
   *
   * _.isArrayLikeObject('abc');
   * // => false
   *
   * _.isArrayLikeObject(_.noop);
   * // => false
   */
  function isArrayLikeObject(value) {
    return isObjectLike(value) && isArrayLike(value);
  }

  /**
   * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
   *
   * @private
   * @param {Object} object The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function safeGet(object, key) {
    if (key === 'constructor' && typeof object[key] === 'function') {
      return;
    }

    if (key == '__proto__') {
      return;
    }

    return object[key];
  }

  /**
   * Converts `value` to a plain object flattening inherited enumerable string
   * keyed properties of `value` to own properties of the plain object.
   *
   * @static
   * @memberOf _
   * @since 3.0.0
   * @category Lang
   * @param {*} value The value to convert.
   * @returns {Object} Returns the converted plain object.
   * @example
   *
   * function Foo() {
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.assign({ 'a': 1 }, new Foo);
   * // => { 'a': 1, 'b': 2 }
   *
   * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
   * // => { 'a': 1, 'b': 2, 'c': 3 }
   */
  function toPlainObject(value) {
    return copyObject(value, keysIn(value));
  }

  /**
   * A specialized version of `baseMerge` for arrays and objects which performs
   * deep merges and tracks traversed objects enabling objects with circular
   * references to be merged.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @param {string} key The key of the value to merge.
   * @param {number} srcIndex The index of `source`.
   * @param {Function} mergeFunc The function to merge values.
   * @param {Function} [customizer] The function to customize assigned values.
   * @param {Object} [stack] Tracks traversed source values and their merged
   *  counterparts.
   */
  function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
    var objValue = safeGet(object, key),
        srcValue = safeGet(source, key),
        stacked = stack.get(srcValue);

    if (stacked) {
      assignMergeValue(object, key, stacked);
      return;
    }
    var newValue = customizer
      ? customizer(objValue, srcValue, (key + ''), object, source, stack)
      : undefined;

    var isCommon = newValue === undefined;

    if (isCommon) {
      var isArr = isArray(srcValue),
          isBuff = !isArr && isBuffer(srcValue),
          isTyped = !isArr && !isBuff && isTypedArray(srcValue);

      newValue = srcValue;
      if (isArr || isBuff || isTyped) {
        if (isArray(objValue)) {
          newValue = objValue;
        }
        else if (isArrayLikeObject(objValue)) {
          newValue = copyArray(objValue);
        }
        else if (isBuff) {
          isCommon = false;
          newValue = cloneBuffer(srcValue, true);
        }
        else if (isTyped) {
          isCommon = false;
          newValue = cloneTypedArray(srcValue, true);
        }
        else {
          newValue = [];
        }
      }
      else if (isPlainObject$1(srcValue) || isArguments(srcValue)) {
        newValue = objValue;
        if (isArguments(objValue)) {
          newValue = toPlainObject(objValue);
        }
        else if (!isObject$1(objValue) || isFunction(objValue)) {
          newValue = initCloneObject(srcValue);
        }
      }
      else {
        isCommon = false;
      }
    }
    if (isCommon) {
      // Recursively merge objects and arrays (susceptible to call stack limits).
      stack.set(srcValue, newValue);
      mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
      stack['delete'](srcValue);
    }
    assignMergeValue(object, key, newValue);
  }

  /**
   * The base implementation of `_.merge` without support for multiple sources.
   *
   * @private
   * @param {Object} object The destination object.
   * @param {Object} source The source object.
   * @param {number} srcIndex The index of `source`.
   * @param {Function} [customizer] The function to customize merged values.
   * @param {Object} [stack] Tracks traversed source values and their merged
   *  counterparts.
   */
  function baseMerge(object, source, srcIndex, customizer, stack) {
    if (object === source) {
      return;
    }
    baseFor(source, function(srcValue, key) {
      stack || (stack = new Stack);
      if (isObject$1(srcValue)) {
        baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
      }
      else {
        var newValue = customizer
          ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
          : undefined;

        if (newValue === undefined) {
          newValue = srcValue;
        }
        assignMergeValue(object, key, newValue);
      }
    }, keysIn);
  }

  /**
   * This method is like `_.assign` except that it recursively merges own and
   * inherited enumerable string keyed properties of source objects into the
   * destination object. Source properties that resolve to `undefined` are
   * skipped if a destination value exists. Array and plain object properties
   * are merged recursively. Other objects and value types are overridden by
   * assignment. Source objects are applied from left to right. Subsequent
   * sources overwrite property assignments of previous sources.
   *
   * **Note:** This method mutates `object`.
   *
   * @static
   * @memberOf _
   * @since 0.5.0
   * @category Object
   * @param {Object} object The destination object.
   * @param {...Object} [sources] The source objects.
   * @returns {Object} Returns `object`.
   * @example
   *
   * var object = {
   *   'a': [{ 'b': 2 }, { 'd': 4 }]
   * };
   *
   * var other = {
   *   'a': [{ 'c': 3 }, { 'e': 5 }]
   * };
   *
   * _.merge(object, other);
   * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
   */
  var merge = createAssigner(function(object, source, srcIndex) {
    baseMerge(object, source, srcIndex);
  });

  /**
   * Creates an array of the own enumerable string keyed property values of `object`.
   *
   * **Note:** Non-object values are coerced to objects.
   *
   * @static
   * @since 0.1.0
   * @memberOf _
   * @category Object
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property values.
   * @example
   *
   * function Foo() {
   *   this.a = 1;
   *   this.b = 2;
   * }
   *
   * Foo.prototype.c = 3;
   *
   * _.values(new Foo);
   * // => [1, 2] (iteration order is not guaranteed)
   *
   * _.values('hi');
   * // => ['h', 'i']
   */
  function values(object) {
    return object == null ? [] : baseValues(object, keys(object));
  }

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED$2 = '__lodash_hash_undefined__';

  /**
   * Adds `value` to the array cache.
   *
   * @private
   * @name add
   * @memberOf SetCache
   * @alias push
   * @param {*} value The value to cache.
   * @returns {Object} Returns the cache instance.
   */
  function setCacheAdd(value) {
    this.__data__.set(value, HASH_UNDEFINED$2);
    return this;
  }

  /**
   * Checks if `value` is in the array cache.
   *
   * @private
   * @name has
   * @memberOf SetCache
   * @param {*} value The value to search for.
   * @returns {number} Returns `true` if `value` is found, else `false`.
   */
  function setCacheHas(value) {
    return this.__data__.has(value);
  }

  /**
   *
   * Creates an array cache object to store unique values.
   *
   * @private
   * @constructor
   * @param {Array} [values] The values to cache.
   */
  function SetCache(values) {
    var index = -1,
        length = values == null ? 0 : values.length;

    this.__data__ = new MapCache;
    while (++index < length) {
      this.add(values[index]);
    }
  }

  // Add methods to `SetCache`.
  SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
  SetCache.prototype.has = setCacheHas;

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /**
   * A specialized version of `baseIsEqualDeep` for arrays with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Array} array The array to compare.
   * @param {Array} other The other array to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `array` and `other` objects.
   * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
   */
  function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
        arrLength = array.length,
        othLength = other.length;

    if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
      return false;
    }
    // Assume cyclic values are equal.
    var stacked = stack.get(array);
    if (stacked && stack.get(other)) {
      return stacked == other;
    }
    var index = -1,
        result = true,
        seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

    stack.set(array, other);
    stack.set(other, array);

    // Ignore non-index properties.
    while (++index < arrLength) {
      var arrValue = array[index],
          othValue = other[index];

      if (customizer) {
        var compared = isPartial
          ? customizer(othValue, arrValue, index, other, array, stack)
          : customizer(arrValue, othValue, index, array, other, stack);
      }
      if (compared !== undefined) {
        if (compared) {
          continue;
        }
        result = false;
        break;
      }
      // Recursively compare arrays (susceptible to call stack limits).
      if (seen) {
        if (!arraySome(other, function(othValue, othIndex) {
              if (!cacheHas(seen, othIndex) &&
                  (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                return seen.push(othIndex);
              }
            })) {
          result = false;
          break;
        }
      } else if (!(
            arrValue === othValue ||
              equalFunc(arrValue, othValue, bitmask, customizer, stack)
          )) {
        result = false;
        break;
      }
    }
    stack['delete'](array);
    stack['delete'](other);
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$1 = 1,
      COMPARE_UNORDERED_FLAG$1 = 2;

  /** `Object#toString` result references. */
  var boolTag$1 = '[object Boolean]',
      dateTag$1 = '[object Date]',
      errorTag$2 = '[object Error]',
      mapTag$1 = '[object Map]',
      numberTag$1 = '[object Number]',
      regexpTag$1 = '[object RegExp]',
      setTag$1 = '[object Set]',
      stringTag$1 = '[object String]',
      symbolTag$1 = '[object Symbol]';

  var arrayBufferTag$1 = '[object ArrayBuffer]',
      dataViewTag$1 = '[object DataView]';

  /** Used to convert symbols to primitives and strings. */
  var symbolProto$1 = Symbol$1 ? Symbol$1.prototype : undefined,
      symbolValueOf = symbolProto$1 ? symbolProto$1.valueOf : undefined;

  /**
   * A specialized version of `baseIsEqualDeep` for comparing objects of
   * the same `toStringTag`.
   *
   * **Note:** This function only supports comparing values with tags of
   * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {string} tag The `toStringTag` of the objects to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
    switch (tag) {
      case dataViewTag$1:
        if ((object.byteLength != other.byteLength) ||
            (object.byteOffset != other.byteOffset)) {
          return false;
        }
        object = object.buffer;
        other = other.buffer;

      case arrayBufferTag$1:
        if ((object.byteLength != other.byteLength) ||
            !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
          return false;
        }
        return true;

      case boolTag$1:
      case dateTag$1:
      case numberTag$1:
        // Coerce booleans to `1` or `0` and dates to milliseconds.
        // Invalid dates are coerced to `NaN`.
        return eq(+object, +other);

      case errorTag$2:
        return object.name == other.name && object.message == other.message;

      case regexpTag$1:
      case stringTag$1:
        // Coerce regexes to strings and treat strings, primitives and objects,
        // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
        // for more details.
        return object == (other + '');

      case mapTag$1:
        var convert = mapToArray;

      case setTag$1:
        var isPartial = bitmask & COMPARE_PARTIAL_FLAG$1;
        convert || (convert = setToArray);

        if (object.size != other.size && !isPartial) {
          return false;
        }
        // Assume cyclic values are equal.
        var stacked = stack.get(object);
        if (stacked) {
          return stacked == other;
        }
        bitmask |= COMPARE_UNORDERED_FLAG$1;

        // Recursively compare objects (susceptible to call stack limits).
        stack.set(object, other);
        var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
        stack['delete'](object);
        return result;

      case symbolTag$1:
        if (symbolValueOf) {
          return symbolValueOf.call(object) == symbolValueOf.call(other);
        }
    }
    return false;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
   * `keysFunc` and `symbolsFunc` to get the enumerable property names and
   * symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Function} keysFunc The function to get the keys of `object`.
   * @param {Function} symbolsFunc The function to get the symbols of `object`.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function baseGetAllKeys(object, keysFunc, symbolsFunc) {
    var result = keysFunc(object);
    return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * This method returns a new empty array.
   *
   * @static
   * @memberOf _
   * @since 4.13.0
   * @category Util
   * @returns {Array} Returns the new empty array.
   * @example
   *
   * var arrays = _.times(2, _.stubArray);
   *
   * console.log(arrays);
   * // => [[], []]
   *
   * console.log(arrays[0] === arrays[1]);
   * // => false
   */
  function stubArray() {
    return [];
  }

  /** Used for built-in method references. */
  var objectProto$e = Object.prototype;

  /** Built-in value references. */
  var propertyIsEnumerable$1 = objectProto$e.propertyIsEnumerable;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeGetSymbols = Object.getOwnPropertySymbols;

  /**
   * Creates an array of the own enumerable symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of symbols.
   */
  var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
    if (object == null) {
      return [];
    }
    object = Object(object);
    return arrayFilter(nativeGetSymbols(object), function(symbol) {
      return propertyIsEnumerable$1.call(object, symbol);
    });
  };

  /**
   * Creates an array of own enumerable property names and symbols of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the array of property names and symbols.
   */
  function getAllKeys(object) {
    return baseGetAllKeys(object, keys, getSymbols);
  }

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$2 = 1;

  /** Used for built-in method references. */
  var objectProto$f = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$d = objectProto$f.hasOwnProperty;

  /**
   * A specialized version of `baseIsEqualDeep` for objects with support for
   * partial deep comparisons.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} stack Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
    var isPartial = bitmask & COMPARE_PARTIAL_FLAG$2,
        objProps = getAllKeys(object),
        objLength = objProps.length,
        othProps = getAllKeys(other),
        othLength = othProps.length;

    if (objLength != othLength && !isPartial) {
      return false;
    }
    var index = objLength;
    while (index--) {
      var key = objProps[index];
      if (!(isPartial ? key in other : hasOwnProperty$d.call(other, key))) {
        return false;
      }
    }
    // Assume cyclic values are equal.
    var stacked = stack.get(object);
    if (stacked && stack.get(other)) {
      return stacked == other;
    }
    var result = true;
    stack.set(object, other);
    stack.set(other, object);

    var skipCtor = isPartial;
    while (++index < objLength) {
      key = objProps[index];
      var objValue = object[key],
          othValue = other[key];

      if (customizer) {
        var compared = isPartial
          ? customizer(othValue, objValue, key, other, object, stack)
          : customizer(objValue, othValue, key, object, other, stack);
      }
      // Recursively compare objects (susceptible to call stack limits).
      if (!(compared === undefined
            ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
            : compared
          )) {
        result = false;
        break;
      }
      skipCtor || (skipCtor = key == 'constructor');
    }
    if (result && !skipCtor) {
      var objCtor = object.constructor,
          othCtor = other.constructor;

      // Non `Object` object instances with different constructors are not equal.
      if (objCtor != othCtor &&
          ('constructor' in object && 'constructor' in other) &&
          !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
            typeof othCtor == 'function' && othCtor instanceof othCtor)) {
        result = false;
      }
    }
    stack['delete'](object);
    stack['delete'](other);
    return result;
  }

  /* Built-in method references that are verified to be native. */
  var DataView = getNative(root, 'DataView');

  /* Built-in method references that are verified to be native. */
  var Promise$1 = getNative(root, 'Promise');

  /* Built-in method references that are verified to be native. */
  var Set$1 = getNative(root, 'Set');

  /* Built-in method references that are verified to be native. */
  var WeakMap = getNative(root, 'WeakMap');

  /** `Object#toString` result references. */
  var mapTag$2 = '[object Map]',
      objectTag$2 = '[object Object]',
      promiseTag = '[object Promise]',
      setTag$2 = '[object Set]',
      weakMapTag$1 = '[object WeakMap]';

  var dataViewTag$2 = '[object DataView]';

  /** Used to detect maps, sets, and weakmaps. */
  var dataViewCtorString = toSource(DataView),
      mapCtorString = toSource(Map),
      promiseCtorString = toSource(Promise$1),
      setCtorString = toSource(Set$1),
      weakMapCtorString = toSource(WeakMap);

  /**
   * Gets the `toStringTag` of `value`.
   *
   * @private
   * @param {*} value The value to query.
   * @returns {string} Returns the `toStringTag`.
   */
  var getTag = baseGetTag;

  // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
  if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag$2) ||
      (Map && getTag(new Map) != mapTag$2) ||
      (Promise$1 && getTag(Promise$1.resolve()) != promiseTag) ||
      (Set$1 && getTag(new Set$1) != setTag$2) ||
      (WeakMap && getTag(new WeakMap) != weakMapTag$1)) {
    getTag = function(value) {
      var result = baseGetTag(value),
          Ctor = result == objectTag$2 ? value.constructor : undefined,
          ctorString = Ctor ? toSource(Ctor) : '';

      if (ctorString) {
        switch (ctorString) {
          case dataViewCtorString: return dataViewTag$2;
          case mapCtorString: return mapTag$2;
          case promiseCtorString: return promiseTag;
          case setCtorString: return setTag$2;
          case weakMapCtorString: return weakMapTag$1;
        }
      }
      return result;
    };
  }

  var getTag$1 = getTag;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$3 = 1;

  /** `Object#toString` result references. */
  var argsTag$2 = '[object Arguments]',
      arrayTag$1 = '[object Array]',
      objectTag$3 = '[object Object]';

  /** Used for built-in method references. */
  var objectProto$g = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty$e = objectProto$g.hasOwnProperty;

  /**
   * A specialized version of `baseIsEqual` for arrays and objects which performs
   * deep comparisons and tracks traversed objects enabling objects with circular
   * references to be compared.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
   * @param {Function} customizer The function to customize comparisons.
   * @param {Function} equalFunc The function to determine equivalents of values.
   * @param {Object} [stack] Tracks traversed `object` and `other` objects.
   * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
   */
  function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
    var objIsArr = isArray(object),
        othIsArr = isArray(other),
        objTag = objIsArr ? arrayTag$1 : getTag$1(object),
        othTag = othIsArr ? arrayTag$1 : getTag$1(other);

    objTag = objTag == argsTag$2 ? objectTag$3 : objTag;
    othTag = othTag == argsTag$2 ? objectTag$3 : othTag;

    var objIsObj = objTag == objectTag$3,
        othIsObj = othTag == objectTag$3,
        isSameTag = objTag == othTag;

    if (isSameTag && isBuffer(object)) {
      if (!isBuffer(other)) {
        return false;
      }
      objIsArr = true;
      objIsObj = false;
    }
    if (isSameTag && !objIsObj) {
      stack || (stack = new Stack);
      return (objIsArr || isTypedArray(object))
        ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
        : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
    }
    if (!(bitmask & COMPARE_PARTIAL_FLAG$3)) {
      var objIsWrapped = objIsObj && hasOwnProperty$e.call(object, '__wrapped__'),
          othIsWrapped = othIsObj && hasOwnProperty$e.call(other, '__wrapped__');

      if (objIsWrapped || othIsWrapped) {
        var objUnwrapped = objIsWrapped ? object.value() : object,
            othUnwrapped = othIsWrapped ? other.value() : other;

        stack || (stack = new Stack);
        return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
      }
    }
    if (!isSameTag) {
      return false;
    }
    stack || (stack = new Stack);
    return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
  }

  /**
   * The base implementation of `_.isEqual` which supports partial comparisons
   * and tracks traversed objects.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @param {boolean} bitmask The bitmask flags.
   *  1 - Unordered comparison
   *  2 - Partial comparison
   * @param {Function} [customizer] The function to customize comparisons.
   * @param {Object} [stack] Tracks traversed `value` and `other` objects.
   * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
   */
  function baseIsEqual(value, other, bitmask, customizer, stack) {
    if (value === other) {
      return true;
    }
    if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
      return value !== value && other !== other;
    }
    return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
  }

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$4 = 1,
      COMPARE_UNORDERED_FLAG$2 = 2;

  /**
   * The base implementation of `_.isMatch` without support for iteratee shorthands.
   *
   * @private
   * @param {Object} object The object to inspect.
   * @param {Object} source The object of property values to match.
   * @param {Array} matchData The property names, values, and compare flags to match.
   * @param {Function} [customizer] The function to customize comparisons.
   * @returns {boolean} Returns `true` if `object` is a match, else `false`.
   */
  function baseIsMatch(object, source, matchData, customizer) {
    var index = matchData.length,
        length = index,
        noCustomizer = !customizer;

    if (object == null) {
      return !length;
    }
    object = Object(object);
    while (index--) {
      var data = matchData[index];
      if ((noCustomizer && data[2])
            ? data[1] !== object[data[0]]
            : !(data[0] in object)
          ) {
        return false;
      }
    }
    while (++index < length) {
      data = matchData[index];
      var key = data[0],
          objValue = object[key],
          srcValue = data[1];

      if (noCustomizer && data[2]) {
        if (objValue === undefined && !(key in object)) {
          return false;
        }
      } else {
        var stack = new Stack;
        if (customizer) {
          var result = customizer(objValue, srcValue, key, object, source, stack);
        }
        if (!(result === undefined
              ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$4 | COMPARE_UNORDERED_FLAG$2, customizer, stack)
              : result
            )) {
          return false;
        }
      }
    }
    return true;
  }

  /**
   * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` if suitable for strict
   *  equality comparisons, else `false`.
   */
  function isStrictComparable(value) {
    return value === value && !isObject$1(value);
  }

  /**
   * Gets the property names, values, and compare flags of `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Array} Returns the match data of `object`.
   */
  function getMatchData(object) {
    var result = keys(object),
        length = result.length;

    while (length--) {
      var key = result[length],
          value = object[key];

      result[length] = [key, value, isStrictComparable(value)];
    }
    return result;
  }

  /**
   * A specialized version of `matchesProperty` for source values suitable
   * for strict equality comparisons, i.e. `===`.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @param {*} srcValue The value to match.
   * @returns {Function} Returns the new spec function.
   */
  function matchesStrictComparable(key, srcValue) {
    return function(object) {
      if (object == null) {
        return false;
      }
      return object[key] === srcValue &&
        (srcValue !== undefined || (key in Object(object)));
    };
  }

  /**
   * The base implementation of `_.matches` which doesn't clone `source`.
   *
   * @private
   * @param {Object} source The object of property values to match.
   * @returns {Function} Returns the new spec function.
   */
  function baseMatches(source) {
    var matchData = getMatchData(source);
    if (matchData.length == 1 && matchData[0][2]) {
      return matchesStrictComparable(matchData[0][0], matchData[0][1]);
    }
    return function(object) {
      return object === source || baseIsMatch(object, source, matchData);
    };
  }

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/;

  /**
   * Checks if `value` is a property name and not a property path.
   *
   * @private
   * @param {*} value The value to check.
   * @param {Object} [object] The object to query keys on.
   * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
   */
  function isKey(value, object) {
    if (isArray(value)) {
      return false;
    }
    var type = typeof value;
    if (type == 'number' || type == 'symbol' || type == 'boolean' ||
        value == null || isSymbol(value)) {
      return true;
    }
    return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
      (object != null && value in Object(object));
  }

  /** Error message constants. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /**
   * Creates a function that memoizes the result of `func`. If `resolver` is
   * provided, it determines the cache key for storing the result based on the
   * arguments provided to the memoized function. By default, the first argument
   * provided to the memoized function is used as the map cache key. The `func`
   * is invoked with the `this` binding of the memoized function.
   *
   * **Note:** The cache is exposed as the `cache` property on the memoized
   * function. Its creation may be customized by replacing the `_.memoize.Cache`
   * constructor with one whose instances implement the
   * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
   * method interface of `clear`, `delete`, `get`, `has`, and `set`.
   *
   * @static
   * @memberOf _
   * @since 0.1.0
   * @category Function
   * @param {Function} func The function to have its output memoized.
   * @param {Function} [resolver] The function to resolve the cache key.
   * @returns {Function} Returns the new memoized function.
   * @example
   *
   * var object = { 'a': 1, 'b': 2 };
   * var other = { 'c': 3, 'd': 4 };
   *
   * var values = _.memoize(_.values);
   * values(object);
   * // => [1, 2]
   *
   * values(other);
   * // => [3, 4]
   *
   * object.a = 2;
   * values(object);
   * // => [1, 2]
   *
   * // Modify the result cache.
   * values.cache.set(object, ['a', 'b']);
   * values(object);
   * // => ['a', 'b']
   *
   * // Replace `_.memoize.Cache`.
   * _.memoize.Cache = WeakMap;
   */
  function memoize$1(func, resolver) {
    if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    var memoized = function() {
      var args = arguments,
          key = resolver ? resolver.apply(this, args) : args[0],
          cache = memoized.cache;

      if (cache.has(key)) {
        return cache.get(key);
      }
      var result = func.apply(this, args);
      memoized.cache = cache.set(key, result) || cache;
      return result;
    };
    memoized.cache = new (memoize$1.Cache || MapCache);
    return memoized;
  }

  // Expose `MapCache`.
  memoize$1.Cache = MapCache;

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /**
   * A specialized version of `_.memoize` which clears the memoized function's
   * cache when it exceeds `MAX_MEMOIZE_SIZE`.
   *
   * @private
   * @param {Function} func The function to have its output memoized.
   * @returns {Function} Returns the new memoized function.
   */
  function memoizeCapped(func) {
    var result = memoize$1(func, function(key) {
      if (cache.size === MAX_MEMOIZE_SIZE) {
        cache.clear();
      }
      return key;
    });

    var cache = result.cache;
    return result;
  }

  /** Used to match property names within property paths. */
  var rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Converts `string` to a property path array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the property path array.
   */
  var stringToPath = memoizeCapped(function(string) {
    var result = [];
    if (string.charCodeAt(0) === 46 /* . */) {
      result.push('');
    }
    string.replace(rePropName, function(match, number, quote, subString) {
      result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
    });
    return result;
  });

  /**
   * Casts `value` to a path array if it's not one.
   *
   * @private
   * @param {*} value The value to inspect.
   * @param {Object} [object] The object to query keys on.
   * @returns {Array} Returns the cast property path array.
   */
  function castPath(value, object) {
    if (isArray(value)) {
      return value;
    }
    return isKey(value, object) ? [value] : stringToPath(toString$1(value));
  }

  /** Used as references for various `Number` constants. */
  var INFINITY$1 = 1 / 0;

  /**
   * Converts `value` to a string key if it's not a string or symbol.
   *
   * @private
   * @param {*} value The value to inspect.
   * @returns {string|symbol} Returns the key.
   */
  function toKey(value) {
    if (typeof value == 'string' || isSymbol(value)) {
      return value;
    }
    var result = (value + '');
    return (result == '0' && (1 / value) == -INFINITY$1) ? '-0' : result;
  }

  /**
   * The base implementation of `_.get` without support for default values.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @returns {*} Returns the resolved value.
   */
  function baseGet(object, path) {
    path = castPath(path, object);

    var index = 0,
        length = path.length;

    while (object != null && index < length) {
      object = object[toKey(path[index++])];
    }
    return (index && index == length) ? object : undefined;
  }

  /**
   * Gets the value at `path` of `object`. If the resolved value is
   * `undefined`, the `defaultValue` is returned in its place.
   *
   * @static
   * @memberOf _
   * @since 3.7.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path of the property to get.
   * @param {*} [defaultValue] The value returned for `undefined` resolved values.
   * @returns {*} Returns the resolved value.
   * @example
   *
   * var object = { 'a': [{ 'b': { 'c': 3 } }] };
   *
   * _.get(object, 'a[0].b.c');
   * // => 3
   *
   * _.get(object, ['a', '0', 'b', 'c']);
   * // => 3
   *
   * _.get(object, 'a.b.c', 'default');
   * // => 'default'
   */
  function get(object, path, defaultValue) {
    var result = object == null ? undefined : baseGet(object, path);
    return result === undefined ? defaultValue : result;
  }

  /**
   * The base implementation of `_.hasIn` without support for deep paths.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {Array|string} key The key to check.
   * @returns {boolean} Returns `true` if `key` exists, else `false`.
   */
  function baseHasIn(object, key) {
    return object != null && key in Object(object);
  }

  /**
   * Checks if `path` exists on `object`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @param {Function} hasFunc The function to check properties.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   */
  function hasPath(object, path, hasFunc) {
    path = castPath(path, object);

    var index = -1,
        length = path.length,
        result = false;

    while (++index < length) {
      var key = toKey(path[index]);
      if (!(result = object != null && hasFunc(object, key))) {
        break;
      }
      object = object[key];
    }
    if (result || ++index != length) {
      return result;
    }
    length = object == null ? 0 : object.length;
    return !!length && isLength(length) && isIndex(key, length) &&
      (isArray(object) || isArguments(object));
  }

  /**
   * Checks if `path` is a direct or inherited property of `object`.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Object
   * @param {Object} object The object to query.
   * @param {Array|string} path The path to check.
   * @returns {boolean} Returns `true` if `path` exists, else `false`.
   * @example
   *
   * var object = _.create({ 'a': _.create({ 'b': 2 }) });
   *
   * _.hasIn(object, 'a');
   * // => true
   *
   * _.hasIn(object, 'a.b');
   * // => true
   *
   * _.hasIn(object, ['a', 'b']);
   * // => true
   *
   * _.hasIn(object, 'b');
   * // => false
   */
  function hasIn(object, path) {
    return object != null && hasPath(object, path, baseHasIn);
  }

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG$5 = 1,
      COMPARE_UNORDERED_FLAG$3 = 2;

  /**
   * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
   *
   * @private
   * @param {string} path The path of the property to get.
   * @param {*} srcValue The value to match.
   * @returns {Function} Returns the new spec function.
   */
  function baseMatchesProperty(path, srcValue) {
    if (isKey(path) && isStrictComparable(srcValue)) {
      return matchesStrictComparable(toKey(path), srcValue);
    }
    return function(object) {
      var objValue = get(object, path);
      return (objValue === undefined && objValue === srcValue)
        ? hasIn(object, path)
        : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG$5 | COMPARE_UNORDERED_FLAG$3);
    };
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * A specialized version of `baseProperty` which supports deep paths.
   *
   * @private
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyDeep(path) {
    return function(object) {
      return baseGet(object, path);
    };
  }

  /**
   * Creates a function that returns the value at `path` of a given object.
   *
   * @static
   * @memberOf _
   * @since 2.4.0
   * @category Util
   * @param {Array|string} path The path of the property to get.
   * @returns {Function} Returns the new accessor function.
   * @example
   *
   * var objects = [
   *   { 'a': { 'b': 2 } },
   *   { 'a': { 'b': 1 } }
   * ];
   *
   * _.map(objects, _.property('a.b'));
   * // => [2, 1]
   *
   * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
   * // => [1, 2]
   */
  function property(path) {
    return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
  }

  /**
   * The base implementation of `_.iteratee`.
   *
   * @private
   * @param {*} [value=_.identity] The value to convert to an iteratee.
   * @returns {Function} Returns the iteratee.
   */
  function baseIteratee(value) {
    // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
    // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
    if (typeof value == 'function') {
      return value;
    }
    if (value == null) {
      return identity$1;
    }
    if (typeof value == 'object') {
      return isArray(value)
        ? baseMatchesProperty(value[0], value[1])
        : baseMatches(value);
    }
    return property(value);
  }

  /**
   * The base implementation of `_.map` without support for iteratee shorthands.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function baseMap(collection, iteratee) {
    var index = -1,
        result = isArrayLike(collection) ? Array(collection.length) : [];

    baseEach(collection, function(value, key, collection) {
      result[++index] = iteratee(value, key, collection);
    });
    return result;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * Compares values to sort them in ascending order.
   *
   * @private
   * @param {*} value The value to compare.
   * @param {*} other The other value to compare.
   * @returns {number} Returns the sort order indicator for `value`.
   */
  function compareAscending(value, other) {
    if (value !== other) {
      var valIsDefined = value !== undefined,
          valIsNull = value === null,
          valIsReflexive = value === value,
          valIsSymbol = isSymbol(value);

      var othIsDefined = other !== undefined,
          othIsNull = other === null,
          othIsReflexive = other === other,
          othIsSymbol = isSymbol(other);

      if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
          (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
          (valIsNull && othIsDefined && othIsReflexive) ||
          (!valIsDefined && othIsReflexive) ||
          !valIsReflexive) {
        return 1;
      }
      if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
          (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
          (othIsNull && valIsDefined && valIsReflexive) ||
          (!othIsDefined && valIsReflexive) ||
          !othIsReflexive) {
        return -1;
      }
    }
    return 0;
  }

  /**
   * Used by `_.orderBy` to compare multiple properties of a value to another
   * and stable sort them.
   *
   * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
   * specify an order of "desc" for descending or "asc" for ascending sort order
   * of corresponding values.
   *
   * @private
   * @param {Object} object The object to compare.
   * @param {Object} other The other object to compare.
   * @param {boolean[]|string[]} orders The order to sort by for each property.
   * @returns {number} Returns the sort order indicator for `object`.
   */
  function compareMultiple(object, other, orders) {
    var index = -1,
        objCriteria = object.criteria,
        othCriteria = other.criteria,
        length = objCriteria.length,
        ordersLength = orders.length;

    while (++index < length) {
      var result = compareAscending(objCriteria[index], othCriteria[index]);
      if (result) {
        if (index >= ordersLength) {
          return result;
        }
        var order = orders[index];
        return result * (order == 'desc' ? -1 : 1);
      }
    }
    // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
    // that causes it, under certain circumstances, to provide the same value for
    // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
    // for more details.
    //
    // This also ensures a stable sort in V8 and other engines.
    // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
    return object.index - other.index;
  }

  /**
   * The base implementation of `_.orderBy` without param guards.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
   * @param {string[]} orders The sort orders of `iteratees`.
   * @returns {Array} Returns the new sorted array.
   */
  function baseOrderBy(collection, iteratees, orders) {
    var index = -1;
    iteratees = arrayMap(iteratees.length ? iteratees : [identity$1], baseUnary(baseIteratee));

    var result = baseMap(collection, function(value, key, collection) {
      var criteria = arrayMap(iteratees, function(iteratee) {
        return iteratee(value);
      });
      return { 'criteria': criteria, 'index': ++index, 'value': value };
    });

    return baseSortBy(result, function(object, other) {
      return compareMultiple(object, other, orders);
    });
  }

  /**
   * This method is like `_.sortBy` except that it allows specifying the sort
   * orders of the iteratees to sort by. If `orders` is unspecified, all values
   * are sorted in ascending order. Otherwise, specify an order of "desc" for
   * descending or "asc" for ascending sort order of corresponding values.
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Collection
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
   *  The iteratees to sort by.
   * @param {string[]} [orders] The sort orders of `iteratees`.
   * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
   * @returns {Array} Returns the new sorted array.
   * @example
   *
   * var users = [
   *   { 'user': 'fred',   'age': 48 },
   *   { 'user': 'barney', 'age': 34 },
   *   { 'user': 'fred',   'age': 40 },
   *   { 'user': 'barney', 'age': 36 }
   * ];
   *
   * // Sort by `user` in ascending order and by `age` in descending order.
   * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
   * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
   */
  function orderBy(collection, iteratees, orders, guard) {
    if (collection == null) {
      return [];
    }
    if (!isArray(iteratees)) {
      iteratees = iteratees == null ? [] : [iteratees];
    }
    orders = guard ? undefined : orders;
    if (!isArray(orders)) {
      orders = orders == null ? [] : [orders];
    }
    return baseOrderBy(collection, iteratees, orders);
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * This method returns `undefined`.
   *
   * @static
   * @memberOf _
   * @since 2.3.0
   * @category Util
   * @example
   *
   * _.times(2, _.noop);
   * // => [undefined, undefined]
   */
  function noop$1() {
    // No operation performed.
  }

  /** Used as references for various `Number` constants. */
  var INFINITY$2 = 1 / 0;

  /**
   * Creates a set object of `values`.
   *
   * @private
   * @param {Array} values The values to add to the set.
   * @returns {Object} Returns the new set.
   */
  var createSet = !(Set$1 && (1 / setToArray(new Set$1([,-0]))[1]) == INFINITY$2) ? noop$1 : function(values) {
    return new Set$1(values);
  };

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE$1 = 200;

  /**
   * The base implementation of `_.uniqBy` without support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} [iteratee] The iteratee invoked per element.
   * @param {Function} [comparator] The comparator invoked per element.
   * @returns {Array} Returns the new duplicate free array.
   */
  function baseUniq(array, iteratee, comparator) {
    var index = -1,
        includes = arrayIncludes,
        length = array.length,
        isCommon = true,
        result = [],
        seen = result;

    if (comparator) {
      isCommon = false;
      includes = arrayIncludesWith;
    }
    else if (length >= LARGE_ARRAY_SIZE$1) {
      var set = iteratee ? null : createSet(array);
      if (set) {
        return setToArray(set);
      }
      isCommon = false;
      includes = cacheHas;
      seen = new SetCache;
    }
    else {
      seen = iteratee ? [] : result;
    }
    outer:
    while (++index < length) {
      var value = array[index],
          computed = iteratee ? iteratee(value) : value;

      value = (comparator || value !== 0) ? value : 0;
      if (isCommon && computed === computed) {
        var seenIndex = seen.length;
        while (seenIndex--) {
          if (seen[seenIndex] === computed) {
            continue outer;
          }
        }
        if (iteratee) {
          seen.push(computed);
        }
        result.push(value);
      }
      else if (!includes(seen, computed, comparator)) {
        if (seen !== result) {
          seen.push(computed);
        }
        result.push(value);
      }
    }
    return result;
  }

  /**
   * This method is like `_.uniq` except that it accepts `iteratee` which is
   * invoked for each element in `array` to generate the criterion by which
   * uniqueness is computed. The order of result values is determined by the
   * order they occur in the array. The iteratee is invoked with one argument:
   * (value).
   *
   * @static
   * @memberOf _
   * @since 4.0.0
   * @category Array
   * @param {Array} array The array to inspect.
   * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
   * @returns {Array} Returns the new duplicate free array.
   * @example
   *
   * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
   * // => [2.1, 1.2]
   *
   * // The `_.property` iteratee shorthand.
   * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
   * // => [{ 'x': 1 }, { 'x': 2 }]
   */
  function uniqBy(array, iteratee) {
    return (array && array.length) ? baseUniq(array, baseIteratee(iteratee)) : [];
  }

  /**
   *
   */

  var Feed =
  /*#__PURE__*/
  function () {
    function Feed(config) {
      _classCallCheck(this, Feed);

      this["default"] = Feed["default"];
      this._settings = merge({}, Feed["default"], config);
      this.init();
    }
    /**
     * Initializes the module
     */


    _createClass(Feed, [{
      key: "init",
      value: function init() {
        var _this = this;

        var data = [];
        var feed = this._settings.feed;
        var config = {
          rssToJson: this._settings.rssToJson,
          rssUrl: Array.isArray(feed) ? feed : [feed]
        }; // Go through each feed

        forEach(config.rssUrl, function (url, index) {
          // Make the request
          _this._request(config, url).then(function (response) {
            var json = JSON.parse(response);
            /**
             * If using the free Rss2Json converter
             * @source https://rss2json.com
             * else if using the NYCO self hosted Rss2Json converter
             * @source https://github.com/CityOfNewYork/nyco-rss-2-json
             */

            if (config.rssToJson === Feed.rssToJson) {
              json = json; // do nothing
            } else if (config.rssToJson.includes('convertRssIntoJson?rssFeed=')) {
              json = Feed.nycoRssToJson(json);
            } else {
              console.warn('NYCO Feed Object: This RSS to JSON converter is not recognized.');
            } // Process the data


            data.push(_this._process(json, _this._settings)); // When all feeds have been requested, merge the data and compile

            if (data.length === config.rssUrl.length) {
              var compiled = _this._render(_this._merge(data, _this._settings), _this._settings);

              var el = document.querySelector(_this._settings.selector);

              if (el) {
                el.innerHTML = compiled;
              } else {
                console.warn("NYCO Feed Object: Couldn't find the element \"".concat(_this._settings.selector, "\""));
              }
            }
          });
        });

        return this;
      }
      /**
       * Create an XHR request for the feed data
       *
       * @param  {object} config The request data
       * @param  {string} url    The request url
       *
       * @return {Promise}       Resolves when the response is ready, rejects when
       *                         the operation times out or there is an error.
       */

    }, {
      key: "_request",
      value: function _request(config, url) {
        return new Promise(function (resolve, reject) {
          var xhr = new XMLHttpRequest();

          xhr.onreadystatechange = function (event) {
            var _xhr = event.target;

            if (_xhr.readyState === 4) {
              if (_xhr.status >= 200 && _xhr.status < 400) {
                resolve(_xhr.response);
              } else {
                reject(new Error(_xhr.status));
              }
            }
          };

          xhr.ontimeout = function () {
            reject(new Error('The Feed request timed out'));
          };

          xhr.open('GET', "".concat(config.rssToJson).concat(url), true);
          xhr.send();
          xhr = null;
        });
      }
      /**
       * Pass data to the appropriate processing function based on type
       *
       * @param  {object} data     The requested feed data to pass
       * @param  {object} settings The application settings
       *
       * @return {object}          The processed data
       */

    }, {
      key: "_process",
      value: function _process(data, settings) {
        return Feed.process[settings.type](data, settings);
      }
      /**
       * Pass data to the appropriate merge function based on type
       *
       * @param  {object} data     The requested feed data to pass
       * @param  {object} settings The application settings
       *
       * @return {object}          The merged feed data
       */

    }, {
      key: "_merge",
      value: function _merge(data, settings) {
        return Feed.merge[settings.type](data, settings);
      }
      /**
       * Combine template components, pass data, and return compiled temlate
       *
       * @param  {object} data     The requested feed data to pass
       * @param  {object} settings The application settings
       *
       * @return {string}          The complied html string
       */

    }, {
      key: "_render",
      value: function _render(data, settings) {
        data.settings = settings;
        if (settings.log) { console.dir(data); }

        var template$1 = values(settings.templates).join('');

        var compiled = template(template$1, {
          'imports': {
            '_each': forEach
          }
        });

        return compiled(data);
      }
    }]);

    return Feed;
  }();
  /**
   * An open RSS to JSON api, see https://rss2json.com
   * @type {String}
   */


  Feed.rssToJson = 'https://api.rss2json.com/v1/api.json?rss_url=';
  /**
   * The template for the widget.
   * @type {String}
   */

  Feed.templates = {
    medium: {
      opener: ['<section class="o-feed <%- settings.classes.wrapper %>" style="', '<% if (settings.fontSize) { %>font-size: <%- settings.fontSize %>;<% } %>', '<% if (settings.postBorderColor) { %>border-color: <%- settings.postBorderColor %>;<% } %>', '">'],
      header: ['<header class="o-feed__header <%- settings.classes.header %>">', '<div class="o-feed__avatar <%- settings.classes.avatar %>">', '<img src="', '<% if (settings.profileImg !== "") { %>', '<%- settings.profileImg %>', '<% } else { %>', '<%- feed.profileImg %>', '<% } %>" ', 'width="<%- settings.ratioProfile[0] %>" ', 'height="<%- settings.ratioProfile[1] %>">', '</div>', '<a class="o-feed__url <%- settings.classes.avatar %>" ', 'href="<% if (settings.titleUrl !== "") { %>', '<%- settings.titleUrl %>', '<% } else { %>', '<%- feed.url %>', '<% } %>" ', 'target="_blank" rel="noopener noreferrer nofollow">', '<% if (settings.title !== "") { %>', '<%- settings.title %>', '<% } else { %>', '<%- feed.title %>', '<% } %>', '</a>', '</header>'],
      posts: ['<div class="o-feed__items" style="', 'border-color: <%- settings.postBorderColor %>;', '">', '<% _each(items, function(post) { %>', '<div class="c-feed-item <%- settings.classes.feedItem %>">', '<h4 class="c-feed-item__title <%- settings.classes.title %>">', '<a class="c-feed-item__link <%- settings.classes.link %>"', 'href="<%- post.guid %>"', 'target="_blank"', 'rel="noopener noreferrer nofollow">', '<%- post.title %>', '</a>', '</h4>', '<p class="c-feed-item__date <%- settings.classes.date %>" ', 'title="<%- settings.postDateTitle %>">', '<small><em><%- post.date %></em></small>', '</p>', '<div class="c-feed-item__thumbnail <%- settings.classes.thumbnail %>"', 'style="', 'background-image: url(<%- post.thumbnail %>);', 'height: <%- settings.postImgHeight %>;"', 'aria-hidden="true">', '<img style="display: none;" src="<%- post.thumbnail %>" alt="<%- post.title %>">', '</div>', '<p class="c-feed-item__excerpt <%- settings.classes.excerpt %>">', '<%- post.excerpt %><%- settings.postExcerptTrail %>', '</p>', '<div class="c-feed-item__footer <%- settings.classes.itemFooter %>">', '<a class="c-feed-item__cta <%- settings.classes.cta %>" ', 'href="<%- post.guid %>" ', 'target="_blank" ', 'rel="noopener noreferrer nofollow">', '<%- settings.postCtaText %>', '</a>', '</div>', '</div>', '<% }); %>', '</div>'],
      closer: ['</section>']
    }
  };
  /**
   * Data map for the NYCO RSS to JSON coverter.
   *
   * @param   {Object}  json  A json object containing the feed
   *
   * @return  {Object}        A json object that matches the template format
   */

  Feed.nycoRssToJson = function (json) {
    var feed = json[0];
    return {
      'status': 'ok',
      'feed': {
        'url': feed['atom:link'][0]['$']['href'],
        'title': feed['title'],
        'link': feed['link'],
        'author': '',
        'description': feed['description'],
        'image': feed['image'][0]['url']
      },
      'items': feed['item'].map(function (i) {
        // Get and parse the date
        var date = new Date(Date.parse(i['pubDate'])).toISOString().replace('.000Z', ''); // Get the GUID, they are inconsistently nested

        var guid = Array.isArray(i['guid']) ? i['guid'][0]['_'] : i['guid']['_']; // Get the first image of the content for the thumbnail. It
        // seems the medium feed doesn't return this by default
        // but rss2json.com provides it (but why!?)

        var regex = /<img[^>]+src="?([^"\s]+)"?\s*\/>/g;
        var thumbnail = regex.exec(i['content:encoded'])[1];
        return {
          'title': i['title'],
          'pubDate': date,
          'link': i['link'],
          'guid': guid,
          'author': i['dc:creator'],
          'thumbnail': thumbnail,
          'description': i['content:encoded'],
          'content': i['content:encoded'],
          'enclosure': {},
          'categories': i['category']
        };
      })
    };
  };
  /**
   * Functions for processing the data based on the feed type.
   * @type {Object}
   */


  Feed.process = {
    medium: function medium(data, settings) {
      var length = settings.postExcerptLength;

      forEach(data.items, function (post, index) {
        var excerpt = '';
        var date = ''; // Remove figures first

        excerpt = post.description.replace(/<figure.*>.*?<\/figure>/g, ''); // Replace break tags with spaces

        excerpt = excerpt.replace('<br>', ' '); // Remove all tags

        excerpt = excerpt.replace(/<(.|\n)*?>/g, ''); // Trim the excerpt

        excerpt = excerpt.substr(0, length);
        excerpt = excerpt.substr(0, Math.min(excerpt.length, excerpt.lastIndexOf(' ')));
        post.excerpt = excerpt; // Format the date

        date = new Date(Date.parse(post.pubDate.replace(' ', 'T'))).toLocaleDateString(settings.postDateLocal, settings.postDateFormat);
        post.date = date;
        return post;
      });

      return data;
    }
  };
  /**
   * Functions for merging the data feeds together, based on the feed type.
   * @type {Object}
   */

  Feed.merge = {
    medium: function medium(data, settings) {
      var merged = {};
      var items = []; // Combine the post items

      data.forEach(function (feed) {
        items = items.concat(feed.items);
      }); // Merge the data, this will override values, it probably won't be
      // particularly useful for feeds that are the same, but potentially
      // different feed types could use this and combine unique data

      data.forEach(function (feed) {
        merged = merge(merged, feed);
      }); // Get unique posts

      if (settings.unique) {
        items = uniqBy(items, function (item) {
          return item.guid;
        });
      }

      merged.items = orderBy(items, 'pubDate', 'desc');
      console.dir(merged);
      return merged;
    }
  };
  /**
   * See https://rss2json.com/docs for details on default parameters
   * @type {Object}
   */

  Feed["default"] = {
    feed: '',
    rssToJson: Feed.rssToJson,
    selector: '[data-js="feed"]',
    type: 'medium',
    title: '',
    titleUrl: '',
    profileImg: '',
    fontSize: '',
    ratioProfile: ['50', '50'],
    postBorderColor: 'lightsteelblue',
    postImgHeight: '168px',
    postExcerptLength: 120,
    postExcerptTrail: '…',
    postCtaText: 'Read the full post',
    postDateLocal: 'en-US',
    postDateFormat: {
      year: 'numeric',
      month: 'long',
      day: 'numeric'
    },
    postDateTitle: 'Published Date',
    classes: {
      wrapper: '',
      header: '',
      url: '',
      feedItem: '',
      title: '',
      link: '',
      thumbnail: '',
      excerpt: '',
      itemFooter: '',
      cta: '',
      date: ''
    },
    templates: {
      opener: Feed.templates.medium.opener.join(''),
      header: Feed.templates.medium.header.join(''),
      posts: Feed.templates.medium.posts.join(''),
      closer: Feed.templates.medium.closer.join('')
    },
    log: false,
    unique: true
  };

  function dataHandler(newData, oldData) {
    if (oldData) {
      var chart = this.$data._chart;
      var newDatasetLabels = newData.datasets.map(function (dataset) {
        return dataset.label;
      });
      var oldDatasetLabels = oldData.datasets.map(function (dataset) {
        return dataset.label;
      });
      var oldLabels = JSON.stringify(oldDatasetLabels);
      var newLabels = JSON.stringify(newDatasetLabels);

      if (newLabels === oldLabels && oldData.datasets.length === newData.datasets.length) {
        newData.datasets.forEach(function (dataset, i) {
          var oldDatasetKeys = Object.keys(oldData.datasets[i]);
          var newDatasetKeys = Object.keys(dataset);
          var deletionKeys = oldDatasetKeys.filter(function (key) {
            return key !== '_meta' && newDatasetKeys.indexOf(key) === -1;
          });
          deletionKeys.forEach(function (deletionKey) {
            delete chart.data.datasets[i][deletionKey];
          });

          for (var attribute in dataset) {
            if (dataset.hasOwnProperty(attribute)) {
              chart.data.datasets[i][attribute] = dataset[attribute];
            }
          }
        });

        if (newData.hasOwnProperty('labels')) {
          chart.data.labels = newData.labels;
          this.$emit('labels:update');
        }

        if (newData.hasOwnProperty('xLabels')) {
          chart.data.xLabels = newData.xLabels;
          this.$emit('xlabels:update');
        }

        if (newData.hasOwnProperty('yLabels')) {
          chart.data.yLabels = newData.yLabels;
          this.$emit('ylabels:update');
        }

        chart.update();
        this.$emit('chart:update');
      } else {
        if (chart) {
          chart.destroy();
          this.$emit('chart:destroy');
        }

        this.renderChart(this.chartData, this.options);
        this.$emit('chart:render');
      }
    } else {
      if (this.$data._chart) {
        this.$data._chart.destroy();

        this.$emit('chart:destroy');
      }

      this.renderChart(this.chartData, this.options);
      this.$emit('chart:render');
    }
  }

  var reactiveData = {
    data: function data() {
      return {
        chartData: null
      };
    },
    watch: {
      'chartData': dataHandler
    }
  };
  var reactiveProp = {
    props: {
      chartData: {
        type: Object,
        required: true,
        default: function _default() {}
      }
    },
    watch: {
      'chartData': dataHandler
    }
  };
  var mixins = {
    reactiveData: reactiveData,
    reactiveProp: reactiveProp
  };

  var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

  function commonjsRequire () {
  	throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');
  }

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  var moment = createCommonjsModule(function (module, exports) {
  (function (global, factory) {
       module.exports = factory() ;
  }(commonjsGlobal, (function () {
      var hookCallback;

      function hooks () {
          return hookCallback.apply(null, arguments);
      }

      // This is done to register the method called with moment()
      // without creating circular dependencies.
      function setHookCallback (callback) {
          hookCallback = callback;
      }

      function isArray(input) {
          return input instanceof Array || Object.prototype.toString.call(input) === '[object Array]';
      }

      function isObject(input) {
          // IE8 will treat undefined and null as object if it wasn't for
          // input != null
          return input != null && Object.prototype.toString.call(input) === '[object Object]';
      }

      function isObjectEmpty(obj) {
          if (Object.getOwnPropertyNames) {
              return (Object.getOwnPropertyNames(obj).length === 0);
          } else {
              var k;
              for (k in obj) {
                  if (obj.hasOwnProperty(k)) {
                      return false;
                  }
              }
              return true;
          }
      }

      function isUndefined(input) {
          return input === void 0;
      }

      function isNumber(input) {
          return typeof input === 'number' || Object.prototype.toString.call(input) === '[object Number]';
      }

      function isDate(input) {
          return input instanceof Date || Object.prototype.toString.call(input) === '[object Date]';
      }

      function map(arr, fn) {
          var res = [], i;
          for (i = 0; i < arr.length; ++i) {
              res.push(fn(arr[i], i));
          }
          return res;
      }

      function hasOwnProp(a, b) {
          return Object.prototype.hasOwnProperty.call(a, b);
      }

      function extend(a, b) {
          for (var i in b) {
              if (hasOwnProp(b, i)) {
                  a[i] = b[i];
              }
          }

          if (hasOwnProp(b, 'toString')) {
              a.toString = b.toString;
          }

          if (hasOwnProp(b, 'valueOf')) {
              a.valueOf = b.valueOf;
          }

          return a;
      }

      function createUTC (input, format, locale, strict) {
          return createLocalOrUTC(input, format, locale, strict, true).utc();
      }

      function defaultParsingFlags() {
          // We need to deep clone this object.
          return {
              empty           : false,
              unusedTokens    : [],
              unusedInput     : [],
              overflow        : -2,
              charsLeftOver   : 0,
              nullInput       : false,
              invalidMonth    : null,
              invalidFormat   : false,
              userInvalidated : false,
              iso             : false,
              parsedDateParts : [],
              meridiem        : null,
              rfc2822         : false,
              weekdayMismatch : false
          };
      }

      function getParsingFlags(m) {
          if (m._pf == null) {
              m._pf = defaultParsingFlags();
          }
          return m._pf;
      }

      var some;
      if (Array.prototype.some) {
          some = Array.prototype.some;
      } else {
          some = function (fun) {
              var t = Object(this);
              var len = t.length >>> 0;

              for (var i = 0; i < len; i++) {
                  if (i in t && fun.call(this, t[i], i, t)) {
                      return true;
                  }
              }

              return false;
          };
      }

      function isValid(m) {
          if (m._isValid == null) {
              var flags = getParsingFlags(m);
              var parsedParts = some.call(flags.parsedDateParts, function (i) {
                  return i != null;
              });
              var isNowValid = !isNaN(m._d.getTime()) &&
                  flags.overflow < 0 &&
                  !flags.empty &&
                  !flags.invalidMonth &&
                  !flags.invalidWeekday &&
                  !flags.weekdayMismatch &&
                  !flags.nullInput &&
                  !flags.invalidFormat &&
                  !flags.userInvalidated &&
                  (!flags.meridiem || (flags.meridiem && parsedParts));

              if (m._strict) {
                  isNowValid = isNowValid &&
                      flags.charsLeftOver === 0 &&
                      flags.unusedTokens.length === 0 &&
                      flags.bigHour === undefined;
              }

              if (Object.isFrozen == null || !Object.isFrozen(m)) {
                  m._isValid = isNowValid;
              }
              else {
                  return isNowValid;
              }
          }
          return m._isValid;
      }

      function createInvalid (flags) {
          var m = createUTC(NaN);
          if (flags != null) {
              extend(getParsingFlags(m), flags);
          }
          else {
              getParsingFlags(m).userInvalidated = true;
          }

          return m;
      }

      // Plugins that add properties should also add the key here (null value),
      // so we can properly clone ourselves.
      var momentProperties = hooks.momentProperties = [];

      function copyConfig(to, from) {
          var i, prop, val;

          if (!isUndefined(from._isAMomentObject)) {
              to._isAMomentObject = from._isAMomentObject;
          }
          if (!isUndefined(from._i)) {
              to._i = from._i;
          }
          if (!isUndefined(from._f)) {
              to._f = from._f;
          }
          if (!isUndefined(from._l)) {
              to._l = from._l;
          }
          if (!isUndefined(from._strict)) {
              to._strict = from._strict;
          }
          if (!isUndefined(from._tzm)) {
              to._tzm = from._tzm;
          }
          if (!isUndefined(from._isUTC)) {
              to._isUTC = from._isUTC;
          }
          if (!isUndefined(from._offset)) {
              to._offset = from._offset;
          }
          if (!isUndefined(from._pf)) {
              to._pf = getParsingFlags(from);
          }
          if (!isUndefined(from._locale)) {
              to._locale = from._locale;
          }

          if (momentProperties.length > 0) {
              for (i = 0; i < momentProperties.length; i++) {
                  prop = momentProperties[i];
                  val = from[prop];
                  if (!isUndefined(val)) {
                      to[prop] = val;
                  }
              }
          }

          return to;
      }

      var updateInProgress = false;

      // Moment prototype object
      function Moment(config) {
          copyConfig(this, config);
          this._d = new Date(config._d != null ? config._d.getTime() : NaN);
          if (!this.isValid()) {
              this._d = new Date(NaN);
          }
          // Prevent infinite loop in case updateOffset creates new moment
          // objects.
          if (updateInProgress === false) {
              updateInProgress = true;
              hooks.updateOffset(this);
              updateInProgress = false;
          }
      }

      function isMoment (obj) {
          return obj instanceof Moment || (obj != null && obj._isAMomentObject != null);
      }

      function absFloor (number) {
          if (number < 0) {
              // -0 -> 0
              return Math.ceil(number) || 0;
          } else {
              return Math.floor(number);
          }
      }

      function toInt(argumentForCoercion) {
          var coercedNumber = +argumentForCoercion,
              value = 0;

          if (coercedNumber !== 0 && isFinite(coercedNumber)) {
              value = absFloor(coercedNumber);
          }

          return value;
      }

      // compare two arrays, return the number of differences
      function compareArrays(array1, array2, dontConvert) {
          var len = Math.min(array1.length, array2.length),
              lengthDiff = Math.abs(array1.length - array2.length),
              diffs = 0,
              i;
          for (i = 0; i < len; i++) {
              if ((dontConvert && array1[i] !== array2[i]) ||
                  (!dontConvert && toInt(array1[i]) !== toInt(array2[i]))) {
                  diffs++;
              }
          }
          return diffs + lengthDiff;
      }

      function warn(msg) {
          if (hooks.suppressDeprecationWarnings === false &&
                  (typeof console !==  'undefined') && console.warn) {
              console.warn('Deprecation warning: ' + msg);
          }
      }

      function deprecate(msg, fn) {
          var firstTime = true;

          return extend(function () {
              var arguments$1 = arguments;

              if (hooks.deprecationHandler != null) {
                  hooks.deprecationHandler(null, msg);
              }
              if (firstTime) {
                  var args = [];
                  var arg;
                  for (var i = 0; i < arguments.length; i++) {
                      arg = '';
                      if (typeof arguments$1[i] === 'object') {
                          arg += '\n[' + i + '] ';
                          for (var key in arguments[0]) {
                              arg += key + ': ' + arguments$1[0][key] + ', ';
                          }
                          arg = arg.slice(0, -2); // Remove trailing comma and space
                      } else {
                          arg = arguments$1[i];
                      }
                      args.push(arg);
                  }
                  warn(msg + '\nArguments: ' + Array.prototype.slice.call(args).join('') + '\n' + (new Error()).stack);
                  firstTime = false;
              }
              return fn.apply(this, arguments);
          }, fn);
      }

      var deprecations = {};

      function deprecateSimple(name, msg) {
          if (hooks.deprecationHandler != null) {
              hooks.deprecationHandler(name, msg);
          }
          if (!deprecations[name]) {
              warn(msg);
              deprecations[name] = true;
          }
      }

      hooks.suppressDeprecationWarnings = false;
      hooks.deprecationHandler = null;

      function isFunction(input) {
          return input instanceof Function || Object.prototype.toString.call(input) === '[object Function]';
      }

      function set (config) {
          var prop, i;
          for (i in config) {
              prop = config[i];
              if (isFunction(prop)) {
                  this[i] = prop;
              } else {
                  this['_' + i] = prop;
              }
          }
          this._config = config;
          // Lenient ordinal parsing accepts just a number in addition to
          // number + (possibly) stuff coming from _dayOfMonthOrdinalParse.
          // TODO: Remove "ordinalParse" fallback in next major release.
          this._dayOfMonthOrdinalParseLenient = new RegExp(
              (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) +
                  '|' + (/\d{1,2}/).source);
      }

      function mergeConfigs(parentConfig, childConfig) {
          var res = extend({}, parentConfig), prop;
          for (prop in childConfig) {
              if (hasOwnProp(childConfig, prop)) {
                  if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
                      res[prop] = {};
                      extend(res[prop], parentConfig[prop]);
                      extend(res[prop], childConfig[prop]);
                  } else if (childConfig[prop] != null) {
                      res[prop] = childConfig[prop];
                  } else {
                      delete res[prop];
                  }
              }
          }
          for (prop in parentConfig) {
              if (hasOwnProp(parentConfig, prop) &&
                      !hasOwnProp(childConfig, prop) &&
                      isObject(parentConfig[prop])) {
                  // make sure changes to properties don't modify parent config
                  res[prop] = extend({}, res[prop]);
              }
          }
          return res;
      }

      function Locale(config) {
          if (config != null) {
              this.set(config);
          }
      }

      var keys;

      if (Object.keys) {
          keys = Object.keys;
      } else {
          keys = function (obj) {
              var i, res = [];
              for (i in obj) {
                  if (hasOwnProp(obj, i)) {
                      res.push(i);
                  }
              }
              return res;
          };
      }

      var defaultCalendar = {
          sameDay : '[Today at] LT',
          nextDay : '[Tomorrow at] LT',
          nextWeek : 'dddd [at] LT',
          lastDay : '[Yesterday at] LT',
          lastWeek : '[Last] dddd [at] LT',
          sameElse : 'L'
      };

      function calendar (key, mom, now) {
          var output = this._calendar[key] || this._calendar['sameElse'];
          return isFunction(output) ? output.call(mom, now) : output;
      }

      var defaultLongDateFormat = {
          LTS  : 'h:mm:ss A',
          LT   : 'h:mm A',
          L    : 'MM/DD/YYYY',
          LL   : 'MMMM D, YYYY',
          LLL  : 'MMMM D, YYYY h:mm A',
          LLLL : 'dddd, MMMM D, YYYY h:mm A'
      };

      function longDateFormat (key) {
          var format = this._longDateFormat[key],
              formatUpper = this._longDateFormat[key.toUpperCase()];

          if (format || !formatUpper) {
              return format;
          }

          this._longDateFormat[key] = formatUpper.replace(/MMMM|MM|DD|dddd/g, function (val) {
              return val.slice(1);
          });

          return this._longDateFormat[key];
      }

      var defaultInvalidDate = 'Invalid date';

      function invalidDate () {
          return this._invalidDate;
      }

      var defaultOrdinal = '%d';
      var defaultDayOfMonthOrdinalParse = /\d{1,2}/;

      function ordinal (number) {
          return this._ordinal.replace('%d', number);
      }

      var defaultRelativeTime = {
          future : 'in %s',
          past   : '%s ago',
          s  : 'a few seconds',
          ss : '%d seconds',
          m  : 'a minute',
          mm : '%d minutes',
          h  : 'an hour',
          hh : '%d hours',
          d  : 'a day',
          dd : '%d days',
          M  : 'a month',
          MM : '%d months',
          y  : 'a year',
          yy : '%d years'
      };

      function relativeTime (number, withoutSuffix, string, isFuture) {
          var output = this._relativeTime[string];
          return (isFunction(output)) ?
              output(number, withoutSuffix, string, isFuture) :
              output.replace(/%d/i, number);
      }

      function pastFuture (diff, output) {
          var format = this._relativeTime[diff > 0 ? 'future' : 'past'];
          return isFunction(format) ? format(output) : format.replace(/%s/i, output);
      }

      var aliases = {};

      function addUnitAlias (unit, shorthand) {
          var lowerCase = unit.toLowerCase();
          aliases[lowerCase] = aliases[lowerCase + 's'] = aliases[shorthand] = unit;
      }

      function normalizeUnits(units) {
          return typeof units === 'string' ? aliases[units] || aliases[units.toLowerCase()] : undefined;
      }

      function normalizeObjectUnits(inputObject) {
          var normalizedInput = {},
              normalizedProp,
              prop;

          for (prop in inputObject) {
              if (hasOwnProp(inputObject, prop)) {
                  normalizedProp = normalizeUnits(prop);
                  if (normalizedProp) {
                      normalizedInput[normalizedProp] = inputObject[prop];
                  }
              }
          }

          return normalizedInput;
      }

      var priorities = {};

      function addUnitPriority(unit, priority) {
          priorities[unit] = priority;
      }

      function getPrioritizedUnits(unitsObj) {
          var units = [];
          for (var u in unitsObj) {
              units.push({unit: u, priority: priorities[u]});
          }
          units.sort(function (a, b) {
              return a.priority - b.priority;
          });
          return units;
      }

      function zeroFill(number, targetLength, forceSign) {
          var absNumber = '' + Math.abs(number),
              zerosToFill = targetLength - absNumber.length,
              sign = number >= 0;
          return (sign ? (forceSign ? '+' : '') : '-') +
              Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
      }

      var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g;

      var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g;

      var formatFunctions = {};

      var formatTokenFunctions = {};

      // token:    'M'
      // padded:   ['MM', 2]
      // ordinal:  'Mo'
      // callback: function () { this.month() + 1 }
      function addFormatToken (token, padded, ordinal, callback) {
          var func = callback;
          if (typeof callback === 'string') {
              func = function () {
                  return this[callback]();
              };
          }
          if (token) {
              formatTokenFunctions[token] = func;
          }
          if (padded) {
              formatTokenFunctions[padded[0]] = function () {
                  return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
              };
          }
          if (ordinal) {
              formatTokenFunctions[ordinal] = function () {
                  return this.localeData().ordinal(func.apply(this, arguments), token);
              };
          }
      }

      function removeFormattingTokens(input) {
          if (input.match(/\[[\s\S]/)) {
              return input.replace(/^\[|\]$/g, '');
          }
          return input.replace(/\\/g, '');
      }

      function makeFormatFunction(format) {
          var array = format.match(formattingTokens), i, length;

          for (i = 0, length = array.length; i < length; i++) {
              if (formatTokenFunctions[array[i]]) {
                  array[i] = formatTokenFunctions[array[i]];
              } else {
                  array[i] = removeFormattingTokens(array[i]);
              }
          }

          return function (mom) {
              var output = '', i;
              for (i = 0; i < length; i++) {
                  output += isFunction(array[i]) ? array[i].call(mom, format) : array[i];
              }
              return output;
          };
      }

      // format date using native date object
      function formatMoment(m, format) {
          if (!m.isValid()) {
              return m.localeData().invalidDate();
          }

          format = expandFormat(format, m.localeData());
          formatFunctions[format] = formatFunctions[format] || makeFormatFunction(format);

          return formatFunctions[format](m);
      }

      function expandFormat(format, locale) {
          var i = 5;

          function replaceLongDateFormatTokens(input) {
              return locale.longDateFormat(input) || input;
          }

          localFormattingTokens.lastIndex = 0;
          while (i >= 0 && localFormattingTokens.test(format)) {
              format = format.replace(localFormattingTokens, replaceLongDateFormatTokens);
              localFormattingTokens.lastIndex = 0;
              i -= 1;
          }

          return format;
      }

      var match1         = /\d/;            //       0 - 9
      var match2         = /\d\d/;          //      00 - 99
      var match3         = /\d{3}/;         //     000 - 999
      var match4         = /\d{4}/;         //    0000 - 9999
      var match6         = /[+-]?\d{6}/;    // -999999 - 999999
      var match1to2      = /\d\d?/;         //       0 - 99
      var match3to4      = /\d\d\d\d?/;     //     999 - 9999
      var match5to6      = /\d\d\d\d\d\d?/; //   99999 - 999999
      var match1to3      = /\d{1,3}/;       //       0 - 999
      var match1to4      = /\d{1,4}/;       //       0 - 9999
      var match1to6      = /[+-]?\d{1,6}/;  // -999999 - 999999

      var matchUnsigned  = /\d+/;           //       0 - inf
      var matchSigned    = /[+-]?\d+/;      //    -inf - inf

      var matchOffset    = /Z|[+-]\d\d:?\d\d/gi; // +00:00 -00:00 +0000 -0000 or Z
      var matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi; // +00 -00 +00:00 -00:00 +0000 -0000 or Z

      var matchTimestamp = /[+-]?\d+(\.\d{1,3})?/; // 123456789 123456789.123

      // any word (or two) characters or numbers including two/three word month in arabic.
      // includes scottish gaelic two word and hyphenated months
      var matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;

      var regexes = {};

      function addRegexToken (token, regex, strictRegex) {
          regexes[token] = isFunction(regex) ? regex : function (isStrict, localeData) {
              return (isStrict && strictRegex) ? strictRegex : regex;
          };
      }

      function getParseRegexForToken (token, config) {
          if (!hasOwnProp(regexes, token)) {
              return new RegExp(unescapeFormat(token));
          }

          return regexes[token](config._strict, config._locale);
      }

      // Code from http://stackoverflow.com/questions/3561493/is-there-a-regexp-escape-function-in-javascript
      function unescapeFormat(s) {
          return regexEscape(s.replace('\\', '').replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (matched, p1, p2, p3, p4) {
              return p1 || p2 || p3 || p4;
          }));
      }

      function regexEscape(s) {
          return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
      }

      var tokens = {};

      function addParseToken (token, callback) {
          var i, func = callback;
          if (typeof token === 'string') {
              token = [token];
          }
          if (isNumber(callback)) {
              func = function (input, array) {
                  array[callback] = toInt(input);
              };
          }
          for (i = 0; i < token.length; i++) {
              tokens[token[i]] = func;
          }
      }

      function addWeekParseToken (token, callback) {
          addParseToken(token, function (input, array, config, token) {
              config._w = config._w || {};
              callback(input, config._w, config, token);
          });
      }

      function addTimeToArrayFromToken(token, input, config) {
          if (input != null && hasOwnProp(tokens, token)) {
              tokens[token](input, config._a, config, token);
          }
      }

      var YEAR = 0;
      var MONTH = 1;
      var DATE = 2;
      var HOUR = 3;
      var MINUTE = 4;
      var SECOND = 5;
      var MILLISECOND = 6;
      var WEEK = 7;
      var WEEKDAY = 8;

      // FORMATTING

      addFormatToken('Y', 0, 0, function () {
          var y = this.year();
          return y <= 9999 ? '' + y : '+' + y;
      });

      addFormatToken(0, ['YY', 2], 0, function () {
          return this.year() % 100;
      });

      addFormatToken(0, ['YYYY',   4],       0, 'year');
      addFormatToken(0, ['YYYYY',  5],       0, 'year');
      addFormatToken(0, ['YYYYYY', 6, true], 0, 'year');

      // ALIASES

      addUnitAlias('year', 'y');

      // PRIORITIES

      addUnitPriority('year', 1);

      // PARSING

      addRegexToken('Y',      matchSigned);
      addRegexToken('YY',     match1to2, match2);
      addRegexToken('YYYY',   match1to4, match4);
      addRegexToken('YYYYY',  match1to6, match6);
      addRegexToken('YYYYYY', match1to6, match6);

      addParseToken(['YYYYY', 'YYYYYY'], YEAR);
      addParseToken('YYYY', function (input, array) {
          array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
      });
      addParseToken('YY', function (input, array) {
          array[YEAR] = hooks.parseTwoDigitYear(input);
      });
      addParseToken('Y', function (input, array) {
          array[YEAR] = parseInt(input, 10);
      });

      // HELPERS

      function daysInYear(year) {
          return isLeapYear(year) ? 366 : 365;
      }

      function isLeapYear(year) {
          return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
      }

      // HOOKS

      hooks.parseTwoDigitYear = function (input) {
          return toInt(input) + (toInt(input) > 68 ? 1900 : 2000);
      };

      // MOMENTS

      var getSetYear = makeGetSet('FullYear', true);

      function getIsLeapYear () {
          return isLeapYear(this.year());
      }

      function makeGetSet (unit, keepTime) {
          return function (value) {
              if (value != null) {
                  set$1(this, unit, value);
                  hooks.updateOffset(this, keepTime);
                  return this;
              } else {
                  return get(this, unit);
              }
          };
      }

      function get (mom, unit) {
          return mom.isValid() ?
              mom._d['get' + (mom._isUTC ? 'UTC' : '') + unit]() : NaN;
      }

      function set$1 (mom, unit, value) {
          if (mom.isValid() && !isNaN(value)) {
              if (unit === 'FullYear' && isLeapYear(mom.year()) && mom.month() === 1 && mom.date() === 29) {
                  mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value, mom.month(), daysInMonth(value, mom.month()));
              }
              else {
                  mom._d['set' + (mom._isUTC ? 'UTC' : '') + unit](value);
              }
          }
      }

      // MOMENTS

      function stringGet (units) {
          units = normalizeUnits(units);
          if (isFunction(this[units])) {
              return this[units]();
          }
          return this;
      }


      function stringSet (units, value) {
          if (typeof units === 'object') {
              units = normalizeObjectUnits(units);
              var prioritized = getPrioritizedUnits(units);
              for (var i = 0; i < prioritized.length; i++) {
                  this[prioritized[i].unit](units[prioritized[i].unit]);
              }
          } else {
              units = normalizeUnits(units);
              if (isFunction(this[units])) {
                  return this[units](value);
              }
          }
          return this;
      }

      function mod(n, x) {
          return ((n % x) + x) % x;
      }

      var indexOf;

      if (Array.prototype.indexOf) {
          indexOf = Array.prototype.indexOf;
      } else {
          indexOf = function (o) {
              // I know
              var i;
              for (i = 0; i < this.length; ++i) {
                  if (this[i] === o) {
                      return i;
                  }
              }
              return -1;
          };
      }

      function daysInMonth(year, month) {
          if (isNaN(year) || isNaN(month)) {
              return NaN;
          }
          var modMonth = mod(month, 12);
          year += (month - modMonth) / 12;
          return modMonth === 1 ? (isLeapYear(year) ? 29 : 28) : (31 - modMonth % 7 % 2);
      }

      // FORMATTING

      addFormatToken('M', ['MM', 2], 'Mo', function () {
          return this.month() + 1;
      });

      addFormatToken('MMM', 0, 0, function (format) {
          return this.localeData().monthsShort(this, format);
      });

      addFormatToken('MMMM', 0, 0, function (format) {
          return this.localeData().months(this, format);
      });

      // ALIASES

      addUnitAlias('month', 'M');

      // PRIORITY

      addUnitPriority('month', 8);

      // PARSING

      addRegexToken('M',    match1to2);
      addRegexToken('MM',   match1to2, match2);
      addRegexToken('MMM',  function (isStrict, locale) {
          return locale.monthsShortRegex(isStrict);
      });
      addRegexToken('MMMM', function (isStrict, locale) {
          return locale.monthsRegex(isStrict);
      });

      addParseToken(['M', 'MM'], function (input, array) {
          array[MONTH] = toInt(input) - 1;
      });

      addParseToken(['MMM', 'MMMM'], function (input, array, config, token) {
          var month = config._locale.monthsParse(input, token, config._strict);
          // if we didn't find a month name, mark the date as invalid.
          if (month != null) {
              array[MONTH] = month;
          } else {
              getParsingFlags(config).invalidMonth = input;
          }
      });

      // LOCALES

      var MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/;
      var defaultLocaleMonths = 'January_February_March_April_May_June_July_August_September_October_November_December'.split('_');
      function localeMonths (m, format) {
          if (!m) {
              return isArray(this._months) ? this._months :
                  this._months['standalone'];
          }
          return isArray(this._months) ? this._months[m.month()] :
              this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format) ? 'format' : 'standalone'][m.month()];
      }

      var defaultLocaleMonthsShort = 'Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec'.split('_');
      function localeMonthsShort (m, format) {
          if (!m) {
              return isArray(this._monthsShort) ? this._monthsShort :
                  this._monthsShort['standalone'];
          }
          return isArray(this._monthsShort) ? this._monthsShort[m.month()] :
              this._monthsShort[MONTHS_IN_FORMAT.test(format) ? 'format' : 'standalone'][m.month()];
      }

      function handleStrictParse(monthName, format, strict) {
          var i, ii, mom, llc = monthName.toLocaleLowerCase();
          if (!this._monthsParse) {
              // this is not used
              this._monthsParse = [];
              this._longMonthsParse = [];
              this._shortMonthsParse = [];
              for (i = 0; i < 12; ++i) {
                  mom = createUTC([2000, i]);
                  this._shortMonthsParse[i] = this.monthsShort(mom, '').toLocaleLowerCase();
                  this._longMonthsParse[i] = this.months(mom, '').toLocaleLowerCase();
              }
          }

          if (strict) {
              if (format === 'MMM') {
                  ii = indexOf.call(this._shortMonthsParse, llc);
                  return ii !== -1 ? ii : null;
              } else {
                  ii = indexOf.call(this._longMonthsParse, llc);
                  return ii !== -1 ? ii : null;
              }
          } else {
              if (format === 'MMM') {
                  ii = indexOf.call(this._shortMonthsParse, llc);
                  if (ii !== -1) {
                      return ii;
                  }
                  ii = indexOf.call(this._longMonthsParse, llc);
                  return ii !== -1 ? ii : null;
              } else {
                  ii = indexOf.call(this._longMonthsParse, llc);
                  if (ii !== -1) {
                      return ii;
                  }
                  ii = indexOf.call(this._shortMonthsParse, llc);
                  return ii !== -1 ? ii : null;
              }
          }
      }

      function localeMonthsParse (monthName, format, strict) {
          var i, mom, regex;

          if (this._monthsParseExact) {
              return handleStrictParse.call(this, monthName, format, strict);
          }

          if (!this._monthsParse) {
              this._monthsParse = [];
              this._longMonthsParse = [];
              this._shortMonthsParse = [];
          }

          // TODO: add sorting
          // Sorting makes sure if one month (or abbr) is a prefix of another
          // see sorting in computeMonthsParse
          for (i = 0; i < 12; i++) {
              // make the regex if we don't have it already
              mom = createUTC([2000, i]);
              if (strict && !this._longMonthsParse[i]) {
                  this._longMonthsParse[i] = new RegExp('^' + this.months(mom, '').replace('.', '') + '$', 'i');
                  this._shortMonthsParse[i] = new RegExp('^' + this.monthsShort(mom, '').replace('.', '') + '$', 'i');
              }
              if (!strict && !this._monthsParse[i]) {
                  regex = '^' + this.months(mom, '') + '|^' + this.monthsShort(mom, '');
                  this._monthsParse[i] = new RegExp(regex.replace('.', ''), 'i');
              }
              // test the regex
              if (strict && format === 'MMMM' && this._longMonthsParse[i].test(monthName)) {
                  return i;
              } else if (strict && format === 'MMM' && this._shortMonthsParse[i].test(monthName)) {
                  return i;
              } else if (!strict && this._monthsParse[i].test(monthName)) {
                  return i;
              }
          }
      }

      // MOMENTS

      function setMonth (mom, value) {
          var dayOfMonth;

          if (!mom.isValid()) {
              // No op
              return mom;
          }

          if (typeof value === 'string') {
              if (/^\d+$/.test(value)) {
                  value = toInt(value);
              } else {
                  value = mom.localeData().monthsParse(value);
                  // TODO: Another silent failure?
                  if (!isNumber(value)) {
                      return mom;
                  }
              }
          }

          dayOfMonth = Math.min(mom.date(), daysInMonth(mom.year(), value));
          mom._d['set' + (mom._isUTC ? 'UTC' : '') + 'Month'](value, dayOfMonth);
          return mom;
      }

      function getSetMonth (value) {
          if (value != null) {
              setMonth(this, value);
              hooks.updateOffset(this, true);
              return this;
          } else {
              return get(this, 'Month');
          }
      }

      function getDaysInMonth () {
          return daysInMonth(this.year(), this.month());
      }

      var defaultMonthsShortRegex = matchWord;
      function monthsShortRegex (isStrict) {
          if (this._monthsParseExact) {
              if (!hasOwnProp(this, '_monthsRegex')) {
                  computeMonthsParse.call(this);
              }
              if (isStrict) {
                  return this._monthsShortStrictRegex;
              } else {
                  return this._monthsShortRegex;
              }
          } else {
              if (!hasOwnProp(this, '_monthsShortRegex')) {
                  this._monthsShortRegex = defaultMonthsShortRegex;
              }
              return this._monthsShortStrictRegex && isStrict ?
                  this._monthsShortStrictRegex : this._monthsShortRegex;
          }
      }

      var defaultMonthsRegex = matchWord;
      function monthsRegex (isStrict) {
          if (this._monthsParseExact) {
              if (!hasOwnProp(this, '_monthsRegex')) {
                  computeMonthsParse.call(this);
              }
              if (isStrict) {
                  return this._monthsStrictRegex;
              } else {
                  return this._monthsRegex;
              }
          } else {
              if (!hasOwnProp(this, '_monthsRegex')) {
                  this._monthsRegex = defaultMonthsRegex;
              }
              return this._monthsStrictRegex && isStrict ?
                  this._monthsStrictRegex : this._monthsRegex;
          }
      }

      function computeMonthsParse () {
          function cmpLenRev(a, b) {
              return b.length - a.length;
          }

          var shortPieces = [], longPieces = [], mixedPieces = [],
              i, mom;
          for (i = 0; i < 12; i++) {
              // make the regex if we don't have it already
              mom = createUTC([2000, i]);
              shortPieces.push(this.monthsShort(mom, ''));
              longPieces.push(this.months(mom, ''));
              mixedPieces.push(this.months(mom, ''));
              mixedPieces.push(this.monthsShort(mom, ''));
          }
          // Sorting makes sure if one month (or abbr) is a prefix of another it
          // will match the longer piece.
          shortPieces.sort(cmpLenRev);
          longPieces.sort(cmpLenRev);
          mixedPieces.sort(cmpLenRev);
          for (i = 0; i < 12; i++) {
              shortPieces[i] = regexEscape(shortPieces[i]);
              longPieces[i] = regexEscape(longPieces[i]);
          }
          for (i = 0; i < 24; i++) {
              mixedPieces[i] = regexEscape(mixedPieces[i]);
          }

          this._monthsRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
          this._monthsShortRegex = this._monthsRegex;
          this._monthsStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
          this._monthsShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
      }

      function createDate (y, m, d, h, M, s, ms) {
          // can't just apply() to create a date:
          // https://stackoverflow.com/q/181348
          var date;
          // the date constructor remaps years 0-99 to 1900-1999
          if (y < 100 && y >= 0) {
              // preserve leap years using a full 400 year cycle, then reset
              date = new Date(y + 400, m, d, h, M, s, ms);
              if (isFinite(date.getFullYear())) {
                  date.setFullYear(y);
              }
          } else {
              date = new Date(y, m, d, h, M, s, ms);
          }

          return date;
      }

      function createUTCDate (y) {
          var date;
          // the Date.UTC function remaps years 0-99 to 1900-1999
          if (y < 100 && y >= 0) {
              var args = Array.prototype.slice.call(arguments);
              // preserve leap years using a full 400 year cycle, then reset
              args[0] = y + 400;
              date = new Date(Date.UTC.apply(null, args));
              if (isFinite(date.getUTCFullYear())) {
                  date.setUTCFullYear(y);
              }
          } else {
              date = new Date(Date.UTC.apply(null, arguments));
          }

          return date;
      }

      // start-of-first-week - start-of-year
      function firstWeekOffset(year, dow, doy) {
          var // first-week day -- which january is always in the first week (4 for iso, 1 for other)
              fwd = 7 + dow - doy,
              // first-week day local weekday -- which local weekday is fwd
              fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;

          return -fwdlw + fwd - 1;
      }

      // https://en.wikipedia.org/wiki/ISO_week_date#Calculating_a_date_given_the_year.2C_week_number_and_weekday
      function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
          var localWeekday = (7 + weekday - dow) % 7,
              weekOffset = firstWeekOffset(year, dow, doy),
              dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset,
              resYear, resDayOfYear;

          if (dayOfYear <= 0) {
              resYear = year - 1;
              resDayOfYear = daysInYear(resYear) + dayOfYear;
          } else if (dayOfYear > daysInYear(year)) {
              resYear = year + 1;
              resDayOfYear = dayOfYear - daysInYear(year);
          } else {
              resYear = year;
              resDayOfYear = dayOfYear;
          }

          return {
              year: resYear,
              dayOfYear: resDayOfYear
          };
      }

      function weekOfYear(mom, dow, doy) {
          var weekOffset = firstWeekOffset(mom.year(), dow, doy),
              week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1,
              resWeek, resYear;

          if (week < 1) {
              resYear = mom.year() - 1;
              resWeek = week + weeksInYear(resYear, dow, doy);
          } else if (week > weeksInYear(mom.year(), dow, doy)) {
              resWeek = week - weeksInYear(mom.year(), dow, doy);
              resYear = mom.year() + 1;
          } else {
              resYear = mom.year();
              resWeek = week;
          }

          return {
              week: resWeek,
              year: resYear
          };
      }

      function weeksInYear(year, dow, doy) {
          var weekOffset = firstWeekOffset(year, dow, doy),
              weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
          return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
      }

      // FORMATTING

      addFormatToken('w', ['ww', 2], 'wo', 'week');
      addFormatToken('W', ['WW', 2], 'Wo', 'isoWeek');

      // ALIASES

      addUnitAlias('week', 'w');
      addUnitAlias('isoWeek', 'W');

      // PRIORITIES

      addUnitPriority('week', 5);
      addUnitPriority('isoWeek', 5);

      // PARSING

      addRegexToken('w',  match1to2);
      addRegexToken('ww', match1to2, match2);
      addRegexToken('W',  match1to2);
      addRegexToken('WW', match1to2, match2);

      addWeekParseToken(['w', 'ww', 'W', 'WW'], function (input, week, config, token) {
          week[token.substr(0, 1)] = toInt(input);
      });

      // HELPERS

      // LOCALES

      function localeWeek (mom) {
          return weekOfYear(mom, this._week.dow, this._week.doy).week;
      }

      var defaultLocaleWeek = {
          dow : 0, // Sunday is the first day of the week.
          doy : 6  // The week that contains Jan 6th is the first week of the year.
      };

      function localeFirstDayOfWeek () {
          return this._week.dow;
      }

      function localeFirstDayOfYear () {
          return this._week.doy;
      }

      // MOMENTS

      function getSetWeek (input) {
          var week = this.localeData().week(this);
          return input == null ? week : this.add((input - week) * 7, 'd');
      }

      function getSetISOWeek (input) {
          var week = weekOfYear(this, 1, 4).week;
          return input == null ? week : this.add((input - week) * 7, 'd');
      }

      // FORMATTING

      addFormatToken('d', 0, 'do', 'day');

      addFormatToken('dd', 0, 0, function (format) {
          return this.localeData().weekdaysMin(this, format);
      });

      addFormatToken('ddd', 0, 0, function (format) {
          return this.localeData().weekdaysShort(this, format);
      });

      addFormatToken('dddd', 0, 0, function (format) {
          return this.localeData().weekdays(this, format);
      });

      addFormatToken('e', 0, 0, 'weekday');
      addFormatToken('E', 0, 0, 'isoWeekday');

      // ALIASES

      addUnitAlias('day', 'd');
      addUnitAlias('weekday', 'e');
      addUnitAlias('isoWeekday', 'E');

      // PRIORITY
      addUnitPriority('day', 11);
      addUnitPriority('weekday', 11);
      addUnitPriority('isoWeekday', 11);

      // PARSING

      addRegexToken('d',    match1to2);
      addRegexToken('e',    match1to2);
      addRegexToken('E',    match1to2);
      addRegexToken('dd',   function (isStrict, locale) {
          return locale.weekdaysMinRegex(isStrict);
      });
      addRegexToken('ddd',   function (isStrict, locale) {
          return locale.weekdaysShortRegex(isStrict);
      });
      addRegexToken('dddd',   function (isStrict, locale) {
          return locale.weekdaysRegex(isStrict);
      });

      addWeekParseToken(['dd', 'ddd', 'dddd'], function (input, week, config, token) {
          var weekday = config._locale.weekdaysParse(input, token, config._strict);
          // if we didn't get a weekday name, mark the date as invalid
          if (weekday != null) {
              week.d = weekday;
          } else {
              getParsingFlags(config).invalidWeekday = input;
          }
      });

      addWeekParseToken(['d', 'e', 'E'], function (input, week, config, token) {
          week[token] = toInt(input);
      });

      // HELPERS

      function parseWeekday(input, locale) {
          if (typeof input !== 'string') {
              return input;
          }

          if (!isNaN(input)) {
              return parseInt(input, 10);
          }

          input = locale.weekdaysParse(input);
          if (typeof input === 'number') {
              return input;
          }

          return null;
      }

      function parseIsoWeekday(input, locale) {
          if (typeof input === 'string') {
              return locale.weekdaysParse(input) % 7 || 7;
          }
          return isNaN(input) ? null : input;
      }

      // LOCALES
      function shiftWeekdays (ws, n) {
          return ws.slice(n, 7).concat(ws.slice(0, n));
      }

      var defaultLocaleWeekdays = 'Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday'.split('_');
      function localeWeekdays (m, format) {
          var weekdays = isArray(this._weekdays) ? this._weekdays :
              this._weekdays[(m && m !== true && this._weekdays.isFormat.test(format)) ? 'format' : 'standalone'];
          return (m === true) ? shiftWeekdays(weekdays, this._week.dow)
              : (m) ? weekdays[m.day()] : weekdays;
      }

      var defaultLocaleWeekdaysShort = 'Sun_Mon_Tue_Wed_Thu_Fri_Sat'.split('_');
      function localeWeekdaysShort (m) {
          return (m === true) ? shiftWeekdays(this._weekdaysShort, this._week.dow)
              : (m) ? this._weekdaysShort[m.day()] : this._weekdaysShort;
      }

      var defaultLocaleWeekdaysMin = 'Su_Mo_Tu_We_Th_Fr_Sa'.split('_');
      function localeWeekdaysMin (m) {
          return (m === true) ? shiftWeekdays(this._weekdaysMin, this._week.dow)
              : (m) ? this._weekdaysMin[m.day()] : this._weekdaysMin;
      }

      function handleStrictParse$1(weekdayName, format, strict) {
          var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
          if (!this._weekdaysParse) {
              this._weekdaysParse = [];
              this._shortWeekdaysParse = [];
              this._minWeekdaysParse = [];

              for (i = 0; i < 7; ++i) {
                  mom = createUTC([2000, 1]).day(i);
                  this._minWeekdaysParse[i] = this.weekdaysMin(mom, '').toLocaleLowerCase();
                  this._shortWeekdaysParse[i] = this.weekdaysShort(mom, '').toLocaleLowerCase();
                  this._weekdaysParse[i] = this.weekdays(mom, '').toLocaleLowerCase();
              }
          }

          if (strict) {
              if (format === 'dddd') {
                  ii = indexOf.call(this._weekdaysParse, llc);
                  return ii !== -1 ? ii : null;
              } else if (format === 'ddd') {
                  ii = indexOf.call(this._shortWeekdaysParse, llc);
                  return ii !== -1 ? ii : null;
              } else {
                  ii = indexOf.call(this._minWeekdaysParse, llc);
                  return ii !== -1 ? ii : null;
              }
          } else {
              if (format === 'dddd') {
                  ii = indexOf.call(this._weekdaysParse, llc);
                  if (ii !== -1) {
                      return ii;
                  }
                  ii = indexOf.call(this._shortWeekdaysParse, llc);
                  if (ii !== -1) {
                      return ii;
                  }
                  ii = indexOf.call(this._minWeekdaysParse, llc);
                  return ii !== -1 ? ii : null;
              } else if (format === 'ddd') {
                  ii = indexOf.call(this._shortWeekdaysParse, llc);
                  if (ii !== -1) {
                      return ii;
                  }
                  ii = indexOf.call(this._weekdaysParse, llc);
                  if (ii !== -1) {
                      return ii;
                  }
                  ii = indexOf.call(this._minWeekdaysParse, llc);
                  return ii !== -1 ? ii : null;
              } else {
                  ii = indexOf.call(this._minWeekdaysParse, llc);
                  if (ii !== -1) {
                      return ii;
                  }
                  ii = indexOf.call(this._weekdaysParse, llc);
                  if (ii !== -1) {
                      return ii;
                  }
                  ii = indexOf.call(this._shortWeekdaysParse, llc);
                  return ii !== -1 ? ii : null;
              }
          }
      }

      function localeWeekdaysParse (weekdayName, format, strict) {
          var i, mom, regex;

          if (this._weekdaysParseExact) {
              return handleStrictParse$1.call(this, weekdayName, format, strict);
          }

          if (!this._weekdaysParse) {
              this._weekdaysParse = [];
              this._minWeekdaysParse = [];
              this._shortWeekdaysParse = [];
              this._fullWeekdaysParse = [];
          }

          for (i = 0; i < 7; i++) {
              // make the regex if we don't have it already

              mom = createUTC([2000, 1]).day(i);
              if (strict && !this._fullWeekdaysParse[i]) {
                  this._fullWeekdaysParse[i] = new RegExp('^' + this.weekdays(mom, '').replace('.', '\\.?') + '$', 'i');
                  this._shortWeekdaysParse[i] = new RegExp('^' + this.weekdaysShort(mom, '').replace('.', '\\.?') + '$', 'i');
                  this._minWeekdaysParse[i] = new RegExp('^' + this.weekdaysMin(mom, '').replace('.', '\\.?') + '$', 'i');
              }
              if (!this._weekdaysParse[i]) {
                  regex = '^' + this.weekdays(mom, '') + '|^' + this.weekdaysShort(mom, '') + '|^' + this.weekdaysMin(mom, '');
                  this._weekdaysParse[i] = new RegExp(regex.replace('.', ''), 'i');
              }
              // test the regex
              if (strict && format === 'dddd' && this._fullWeekdaysParse[i].test(weekdayName)) {
                  return i;
              } else if (strict && format === 'ddd' && this._shortWeekdaysParse[i].test(weekdayName)) {
                  return i;
              } else if (strict && format === 'dd' && this._minWeekdaysParse[i].test(weekdayName)) {
                  return i;
              } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
                  return i;
              }
          }
      }

      // MOMENTS

      function getSetDayOfWeek (input) {
          if (!this.isValid()) {
              return input != null ? this : NaN;
          }
          var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
          if (input != null) {
              input = parseWeekday(input, this.localeData());
              return this.add(input - day, 'd');
          } else {
              return day;
          }
      }

      function getSetLocaleDayOfWeek (input) {
          if (!this.isValid()) {
              return input != null ? this : NaN;
          }
          var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
          return input == null ? weekday : this.add(input - weekday, 'd');
      }

      function getSetISODayOfWeek (input) {
          if (!this.isValid()) {
              return input != null ? this : NaN;
          }

          // behaves the same as moment#day except
          // as a getter, returns 7 instead of 0 (1-7 range instead of 0-6)
          // as a setter, sunday should belong to the previous week.

          if (input != null) {
              var weekday = parseIsoWeekday(input, this.localeData());
              return this.day(this.day() % 7 ? weekday : weekday - 7);
          } else {
              return this.day() || 7;
          }
      }

      var defaultWeekdaysRegex = matchWord;
      function weekdaysRegex (isStrict) {
          if (this._weekdaysParseExact) {
              if (!hasOwnProp(this, '_weekdaysRegex')) {
                  computeWeekdaysParse.call(this);
              }
              if (isStrict) {
                  return this._weekdaysStrictRegex;
              } else {
                  return this._weekdaysRegex;
              }
          } else {
              if (!hasOwnProp(this, '_weekdaysRegex')) {
                  this._weekdaysRegex = defaultWeekdaysRegex;
              }
              return this._weekdaysStrictRegex && isStrict ?
                  this._weekdaysStrictRegex : this._weekdaysRegex;
          }
      }

      var defaultWeekdaysShortRegex = matchWord;
      function weekdaysShortRegex (isStrict) {
          if (this._weekdaysParseExact) {
              if (!hasOwnProp(this, '_weekdaysRegex')) {
                  computeWeekdaysParse.call(this);
              }
              if (isStrict) {
                  return this._weekdaysShortStrictRegex;
              } else {
                  return this._weekdaysShortRegex;
              }
          } else {
              if (!hasOwnProp(this, '_weekdaysShortRegex')) {
                  this._weekdaysShortRegex = defaultWeekdaysShortRegex;
              }
              return this._weekdaysShortStrictRegex && isStrict ?
                  this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
          }
      }

      var defaultWeekdaysMinRegex = matchWord;
      function weekdaysMinRegex (isStrict) {
          if (this._weekdaysParseExact) {
              if (!hasOwnProp(this, '_weekdaysRegex')) {
                  computeWeekdaysParse.call(this);
              }
              if (isStrict) {
                  return this._weekdaysMinStrictRegex;
              } else {
                  return this._weekdaysMinRegex;
              }
          } else {
              if (!hasOwnProp(this, '_weekdaysMinRegex')) {
                  this._weekdaysMinRegex = defaultWeekdaysMinRegex;
              }
              return this._weekdaysMinStrictRegex && isStrict ?
                  this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
          }
      }


      function computeWeekdaysParse () {
          function cmpLenRev(a, b) {
              return b.length - a.length;
          }

          var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [],
              i, mom, minp, shortp, longp;
          for (i = 0; i < 7; i++) {
              // make the regex if we don't have it already
              mom = createUTC([2000, 1]).day(i);
              minp = this.weekdaysMin(mom, '');
              shortp = this.weekdaysShort(mom, '');
              longp = this.weekdays(mom, '');
              minPieces.push(minp);
              shortPieces.push(shortp);
              longPieces.push(longp);
              mixedPieces.push(minp);
              mixedPieces.push(shortp);
              mixedPieces.push(longp);
          }
          // Sorting makes sure if one weekday (or abbr) is a prefix of another it
          // will match the longer piece.
          minPieces.sort(cmpLenRev);
          shortPieces.sort(cmpLenRev);
          longPieces.sort(cmpLenRev);
          mixedPieces.sort(cmpLenRev);
          for (i = 0; i < 7; i++) {
              shortPieces[i] = regexEscape(shortPieces[i]);
              longPieces[i] = regexEscape(longPieces[i]);
              mixedPieces[i] = regexEscape(mixedPieces[i]);
          }

          this._weekdaysRegex = new RegExp('^(' + mixedPieces.join('|') + ')', 'i');
          this._weekdaysShortRegex = this._weekdaysRegex;
          this._weekdaysMinRegex = this._weekdaysRegex;

          this._weekdaysStrictRegex = new RegExp('^(' + longPieces.join('|') + ')', 'i');
          this._weekdaysShortStrictRegex = new RegExp('^(' + shortPieces.join('|') + ')', 'i');
          this._weekdaysMinStrictRegex = new RegExp('^(' + minPieces.join('|') + ')', 'i');
      }

      // FORMATTING

      function hFormat() {
          return this.hours() % 12 || 12;
      }

      function kFormat() {
          return this.hours() || 24;
      }

      addFormatToken('H', ['HH', 2], 0, 'hour');
      addFormatToken('h', ['hh', 2], 0, hFormat);
      addFormatToken('k', ['kk', 2], 0, kFormat);

      addFormatToken('hmm', 0, 0, function () {
          return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2);
      });

      addFormatToken('hmmss', 0, 0, function () {
          return '' + hFormat.apply(this) + zeroFill(this.minutes(), 2) +
              zeroFill(this.seconds(), 2);
      });

      addFormatToken('Hmm', 0, 0, function () {
          return '' + this.hours() + zeroFill(this.minutes(), 2);
      });

      addFormatToken('Hmmss', 0, 0, function () {
          return '' + this.hours() + zeroFill(this.minutes(), 2) +
              zeroFill(this.seconds(), 2);
      });

      function meridiem (token, lowercase) {
          addFormatToken(token, 0, 0, function () {
              return this.localeData().meridiem(this.hours(), this.minutes(), lowercase);
          });
      }

      meridiem('a', true);
      meridiem('A', false);

      // ALIASES

      addUnitAlias('hour', 'h');

      // PRIORITY
      addUnitPriority('hour', 13);

      // PARSING

      function matchMeridiem (isStrict, locale) {
          return locale._meridiemParse;
      }

      addRegexToken('a',  matchMeridiem);
      addRegexToken('A',  matchMeridiem);
      addRegexToken('H',  match1to2);
      addRegexToken('h',  match1to2);
      addRegexToken('k',  match1to2);
      addRegexToken('HH', match1to2, match2);
      addRegexToken('hh', match1to2, match2);
      addRegexToken('kk', match1to2, match2);

      addRegexToken('hmm', match3to4);
      addRegexToken('hmmss', match5to6);
      addRegexToken('Hmm', match3to4);
      addRegexToken('Hmmss', match5to6);

      addParseToken(['H', 'HH'], HOUR);
      addParseToken(['k', 'kk'], function (input, array, config) {
          var kInput = toInt(input);
          array[HOUR] = kInput === 24 ? 0 : kInput;
      });
      addParseToken(['a', 'A'], function (input, array, config) {
          config._isPm = config._locale.isPM(input);
          config._meridiem = input;
      });
      addParseToken(['h', 'hh'], function (input, array, config) {
          array[HOUR] = toInt(input);
          getParsingFlags(config).bigHour = true;
      });
      addParseToken('hmm', function (input, array, config) {
          var pos = input.length - 2;
          array[HOUR] = toInt(input.substr(0, pos));
          array[MINUTE] = toInt(input.substr(pos));
          getParsingFlags(config).bigHour = true;
      });
      addParseToken('hmmss', function (input, array, config) {
          var pos1 = input.length - 4;
          var pos2 = input.length - 2;
          array[HOUR] = toInt(input.substr(0, pos1));
          array[MINUTE] = toInt(input.substr(pos1, 2));
          array[SECOND] = toInt(input.substr(pos2));
          getParsingFlags(config).bigHour = true;
      });
      addParseToken('Hmm', function (input, array, config) {
          var pos = input.length - 2;
          array[HOUR] = toInt(input.substr(0, pos));
          array[MINUTE] = toInt(input.substr(pos));
      });
      addParseToken('Hmmss', function (input, array, config) {
          var pos1 = input.length - 4;
          var pos2 = input.length - 2;
          array[HOUR] = toInt(input.substr(0, pos1));
          array[MINUTE] = toInt(input.substr(pos1, 2));
          array[SECOND] = toInt(input.substr(pos2));
      });

      // LOCALES

      function localeIsPM (input) {
          // IE8 Quirks Mode & IE7 Standards Mode do not allow accessing strings like arrays
          // Using charAt should be more compatible.
          return ((input + '').toLowerCase().charAt(0) === 'p');
      }

      var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i;
      function localeMeridiem (hours, minutes, isLower) {
          if (hours > 11) {
              return isLower ? 'pm' : 'PM';
          } else {
              return isLower ? 'am' : 'AM';
          }
      }


      // MOMENTS

      // Setting the hour should keep the time, because the user explicitly
      // specified which hour they want. So trying to maintain the same hour (in
      // a new timezone) makes sense. Adding/subtracting hours does not follow
      // this rule.
      var getSetHour = makeGetSet('Hours', true);

      var baseConfig = {
          calendar: defaultCalendar,
          longDateFormat: defaultLongDateFormat,
          invalidDate: defaultInvalidDate,
          ordinal: defaultOrdinal,
          dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
          relativeTime: defaultRelativeTime,

          months: defaultLocaleMonths,
          monthsShort: defaultLocaleMonthsShort,

          week: defaultLocaleWeek,

          weekdays: defaultLocaleWeekdays,
          weekdaysMin: defaultLocaleWeekdaysMin,
          weekdaysShort: defaultLocaleWeekdaysShort,

          meridiemParse: defaultLocaleMeridiemParse
      };

      // internal storage for locale config files
      var locales = {};
      var localeFamilies = {};
      var globalLocale;

      function normalizeLocale(key) {
          return key ? key.toLowerCase().replace('_', '-') : key;
      }

      // pick the locale from the array
      // try ['en-au', 'en-gb'] as 'en-au', 'en-gb', 'en', as in move through the list trying each
      // substring from most specific to least, but move to the next array item if it's a more specific variant than the current root
      function chooseLocale(names) {
          var i = 0, j, next, locale, split;

          while (i < names.length) {
              split = normalizeLocale(names[i]).split('-');
              j = split.length;
              next = normalizeLocale(names[i + 1]);
              next = next ? next.split('-') : null;
              while (j > 0) {
                  locale = loadLocale(split.slice(0, j).join('-'));
                  if (locale) {
                      return locale;
                  }
                  if (next && next.length >= j && compareArrays(split, next, true) >= j - 1) {
                      //the next array item is better than a shallower substring of this one
                      break;
                  }
                  j--;
              }
              i++;
          }
          return globalLocale;
      }

      function loadLocale(name) {
          var oldLocale = null;
          // TODO: Find a better way to register and load all the locales in Node
          if (!locales[name] && ('object' !== 'undefined') &&
                  module && module.exports) {
              try {
                  oldLocale = globalLocale._abbr;
                  var aliasedRequire = commonjsRequire;
                  aliasedRequire('./locale/' + name);
                  getSetGlobalLocale(oldLocale);
              } catch (e) {}
          }
          return locales[name];
      }

      // This function will load locale and then set the global locale.  If
      // no arguments are passed in, it will simply return the current global
      // locale key.
      function getSetGlobalLocale (key, values) {
          var data;
          if (key) {
              if (isUndefined(values)) {
                  data = getLocale(key);
              }
              else {
                  data = defineLocale(key, values);
              }

              if (data) {
                  // moment.duration._locale = moment._locale = data;
                  globalLocale = data;
              }
              else {
                  if ((typeof console !==  'undefined') && console.warn) {
                      //warn user if arguments are passed but the locale could not be set
                      console.warn('Locale ' + key +  ' not found. Did you forget to load it?');
                  }
              }
          }

          return globalLocale._abbr;
      }

      function defineLocale (name, config) {
          if (config !== null) {
              var locale, parentConfig = baseConfig;
              config.abbr = name;
              if (locales[name] != null) {
                  deprecateSimple('defineLocaleOverride',
                          'use moment.updateLocale(localeName, config) to change ' +
                          'an existing locale. moment.defineLocale(localeName, ' +
                          'config) should only be used for creating a new locale ' +
                          'See http://momentjs.com/guides/#/warnings/define-locale/ for more info.');
                  parentConfig = locales[name]._config;
              } else if (config.parentLocale != null) {
                  if (locales[config.parentLocale] != null) {
                      parentConfig = locales[config.parentLocale]._config;
                  } else {
                      locale = loadLocale(config.parentLocale);
                      if (locale != null) {
                          parentConfig = locale._config;
                      } else {
                          if (!localeFamilies[config.parentLocale]) {
                              localeFamilies[config.parentLocale] = [];
                          }
                          localeFamilies[config.parentLocale].push({
                              name: name,
                              config: config
                          });
                          return null;
                      }
                  }
              }
              locales[name] = new Locale(mergeConfigs(parentConfig, config));

              if (localeFamilies[name]) {
                  localeFamilies[name].forEach(function (x) {
                      defineLocale(x.name, x.config);
                  });
              }

              // backwards compat for now: also set the locale
              // make sure we set the locale AFTER all child locales have been
              // created, so we won't end up with the child locale set.
              getSetGlobalLocale(name);


              return locales[name];
          } else {
              // useful for testing
              delete locales[name];
              return null;
          }
      }

      function updateLocale(name, config) {
          if (config != null) {
              var locale, tmpLocale, parentConfig = baseConfig;
              // MERGE
              tmpLocale = loadLocale(name);
              if (tmpLocale != null) {
                  parentConfig = tmpLocale._config;
              }
              config = mergeConfigs(parentConfig, config);
              locale = new Locale(config);
              locale.parentLocale = locales[name];
              locales[name] = locale;

              // backwards compat for now: also set the locale
              getSetGlobalLocale(name);
          } else {
              // pass null for config to unupdate, useful for tests
              if (locales[name] != null) {
                  if (locales[name].parentLocale != null) {
                      locales[name] = locales[name].parentLocale;
                  } else if (locales[name] != null) {
                      delete locales[name];
                  }
              }
          }
          return locales[name];
      }

      // returns locale data
      function getLocale (key) {
          var locale;

          if (key && key._locale && key._locale._abbr) {
              key = key._locale._abbr;
          }

          if (!key) {
              return globalLocale;
          }

          if (!isArray(key)) {
              //short-circuit everything else
              locale = loadLocale(key);
              if (locale) {
                  return locale;
              }
              key = [key];
          }

          return chooseLocale(key);
      }

      function listLocales() {
          return keys(locales);
      }

      function checkOverflow (m) {
          var overflow;
          var a = m._a;

          if (a && getParsingFlags(m).overflow === -2) {
              overflow =
                  a[MONTH]       < 0 || a[MONTH]       > 11  ? MONTH :
                  a[DATE]        < 1 || a[DATE]        > daysInMonth(a[YEAR], a[MONTH]) ? DATE :
                  a[HOUR]        < 0 || a[HOUR]        > 24 || (a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0)) ? HOUR :
                  a[MINUTE]      < 0 || a[MINUTE]      > 59  ? MINUTE :
                  a[SECOND]      < 0 || a[SECOND]      > 59  ? SECOND :
                  a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND :
                  -1;

              if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
                  overflow = DATE;
              }
              if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
                  overflow = WEEK;
              }
              if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
                  overflow = WEEKDAY;
              }

              getParsingFlags(m).overflow = overflow;
          }

          return m;
      }

      // Pick the first defined of two or three arguments.
      function defaults(a, b, c) {
          if (a != null) {
              return a;
          }
          if (b != null) {
              return b;
          }
          return c;
      }

      function currentDateArray(config) {
          // hooks is actually the exported moment object
          var nowValue = new Date(hooks.now());
          if (config._useUTC) {
              return [nowValue.getUTCFullYear(), nowValue.getUTCMonth(), nowValue.getUTCDate()];
          }
          return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
      }

      // convert an array to a date.
      // the array should mirror the parameters below
      // note: all values past the year are optional and will default to the lowest possible value.
      // [year, month, day , hour, minute, second, millisecond]
      function configFromArray (config) {
          var i, date, input = [], currentDate, expectedWeekday, yearToUse;

          if (config._d) {
              return;
          }

          currentDate = currentDateArray(config);

          //compute day of the year from weeks and weekdays
          if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
              dayOfYearFromWeekInfo(config);
          }

          //if the day of the year is set, figure out what it is
          if (config._dayOfYear != null) {
              yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);

              if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
                  getParsingFlags(config)._overflowDayOfYear = true;
              }

              date = createUTCDate(yearToUse, 0, config._dayOfYear);
              config._a[MONTH] = date.getUTCMonth();
              config._a[DATE] = date.getUTCDate();
          }

          // Default to current date.
          // * if no year, month, day of month are given, default to today
          // * if day of month is given, default month and year
          // * if month is given, default only year
          // * if year is given, don't default anything
          for (i = 0; i < 3 && config._a[i] == null; ++i) {
              config._a[i] = input[i] = currentDate[i];
          }

          // Zero out whatever was not defaulted, including time
          for (; i < 7; i++) {
              config._a[i] = input[i] = (config._a[i] == null) ? (i === 2 ? 1 : 0) : config._a[i];
          }

          // Check for 24:00:00.000
          if (config._a[HOUR] === 24 &&
                  config._a[MINUTE] === 0 &&
                  config._a[SECOND] === 0 &&
                  config._a[MILLISECOND] === 0) {
              config._nextDay = true;
              config._a[HOUR] = 0;
          }

          config._d = (config._useUTC ? createUTCDate : createDate).apply(null, input);
          expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();

          // Apply timezone offset from input. The actual utcOffset can be changed
          // with parseZone.
          if (config._tzm != null) {
              config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
          }

          if (config._nextDay) {
              config._a[HOUR] = 24;
          }

          // check for mismatching day of week
          if (config._w && typeof config._w.d !== 'undefined' && config._w.d !== expectedWeekday) {
              getParsingFlags(config).weekdayMismatch = true;
          }
      }

      function dayOfYearFromWeekInfo(config) {
          var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow;

          w = config._w;
          if (w.GG != null || w.W != null || w.E != null) {
              dow = 1;
              doy = 4;

              // TODO: We need to take the current isoWeekYear, but that depends on
              // how we interpret now (local, utc, fixed offset). So create
              // a now version of current config (take local/utc/offset flags, and
              // create now).
              weekYear = defaults(w.GG, config._a[YEAR], weekOfYear(createLocal(), 1, 4).year);
              week = defaults(w.W, 1);
              weekday = defaults(w.E, 1);
              if (weekday < 1 || weekday > 7) {
                  weekdayOverflow = true;
              }
          } else {
              dow = config._locale._week.dow;
              doy = config._locale._week.doy;

              var curWeek = weekOfYear(createLocal(), dow, doy);

              weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);

              // Default to current week.
              week = defaults(w.w, curWeek.week);

              if (w.d != null) {
                  // weekday -- low day numbers are considered next week
                  weekday = w.d;
                  if (weekday < 0 || weekday > 6) {
                      weekdayOverflow = true;
                  }
              } else if (w.e != null) {
                  // local weekday -- counting starts from beginning of week
                  weekday = w.e + dow;
                  if (w.e < 0 || w.e > 6) {
                      weekdayOverflow = true;
                  }
              } else {
                  // default to beginning of week
                  weekday = dow;
              }
          }
          if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
              getParsingFlags(config)._overflowWeeks = true;
          } else if (weekdayOverflow != null) {
              getParsingFlags(config)._overflowWeekday = true;
          } else {
              temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
              config._a[YEAR] = temp.year;
              config._dayOfYear = temp.dayOfYear;
          }
      }

      // iso 8601 regex
      // 0000-00-00 0000-W00 or 0000-W00-0 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000 or +00)
      var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;
      var basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/;

      var tzRegex = /Z|[+-]\d\d(?::?\d\d)?/;

      var isoDates = [
          ['YYYYYY-MM-DD', /[+-]\d{6}-\d\d-\d\d/],
          ['YYYY-MM-DD', /\d{4}-\d\d-\d\d/],
          ['GGGG-[W]WW-E', /\d{4}-W\d\d-\d/],
          ['GGGG-[W]WW', /\d{4}-W\d\d/, false],
          ['YYYY-DDD', /\d{4}-\d{3}/],
          ['YYYY-MM', /\d{4}-\d\d/, false],
          ['YYYYYYMMDD', /[+-]\d{10}/],
          ['YYYYMMDD', /\d{8}/],
          // YYYYMM is NOT allowed by the standard
          ['GGGG[W]WWE', /\d{4}W\d{3}/],
          ['GGGG[W]WW', /\d{4}W\d{2}/, false],
          ['YYYYDDD', /\d{7}/]
      ];

      // iso time formats and regexes
      var isoTimes = [
          ['HH:mm:ss.SSSS', /\d\d:\d\d:\d\d\.\d+/],
          ['HH:mm:ss,SSSS', /\d\d:\d\d:\d\d,\d+/],
          ['HH:mm:ss', /\d\d:\d\d:\d\d/],
          ['HH:mm', /\d\d:\d\d/],
          ['HHmmss.SSSS', /\d\d\d\d\d\d\.\d+/],
          ['HHmmss,SSSS', /\d\d\d\d\d\d,\d+/],
          ['HHmmss', /\d\d\d\d\d\d/],
          ['HHmm', /\d\d\d\d/],
          ['HH', /\d\d/]
      ];

      var aspNetJsonRegex = /^\/?Date\((\-?\d+)/i;

      // date from iso format
      function configFromISO(config) {
          var i, l,
              string = config._i,
              match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string),
              allowTime, dateFormat, timeFormat, tzFormat;

          if (match) {
              getParsingFlags(config).iso = true;

              for (i = 0, l = isoDates.length; i < l; i++) {
                  if (isoDates[i][1].exec(match[1])) {
                      dateFormat = isoDates[i][0];
                      allowTime = isoDates[i][2] !== false;
                      break;
                  }
              }
              if (dateFormat == null) {
                  config._isValid = false;
                  return;
              }
              if (match[3]) {
                  for (i = 0, l = isoTimes.length; i < l; i++) {
                      if (isoTimes[i][1].exec(match[3])) {
                          // match[2] should be 'T' or space
                          timeFormat = (match[2] || ' ') + isoTimes[i][0];
                          break;
                      }
                  }
                  if (timeFormat == null) {
                      config._isValid = false;
                      return;
                  }
              }
              if (!allowTime && timeFormat != null) {
                  config._isValid = false;
                  return;
              }
              if (match[4]) {
                  if (tzRegex.exec(match[4])) {
                      tzFormat = 'Z';
                  } else {
                      config._isValid = false;
                      return;
                  }
              }
              config._f = dateFormat + (timeFormat || '') + (tzFormat || '');
              configFromStringAndFormat(config);
          } else {
              config._isValid = false;
          }
      }

      // RFC 2822 regex: For details see https://tools.ietf.org/html/rfc2822#section-3.3
      var rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;

      function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
          var result = [
              untruncateYear(yearStr),
              defaultLocaleMonthsShort.indexOf(monthStr),
              parseInt(dayStr, 10),
              parseInt(hourStr, 10),
              parseInt(minuteStr, 10)
          ];

          if (secondStr) {
              result.push(parseInt(secondStr, 10));
          }

          return result;
      }

      function untruncateYear(yearStr) {
          var year = parseInt(yearStr, 10);
          if (year <= 49) {
              return 2000 + year;
          } else if (year <= 999) {
              return 1900 + year;
          }
          return year;
      }

      function preprocessRFC2822(s) {
          // Remove comments and folding whitespace and replace multiple-spaces with a single space
          return s.replace(/\([^)]*\)|[\n\t]/g, ' ').replace(/(\s\s+)/g, ' ').replace(/^\s\s*/, '').replace(/\s\s*$/, '');
      }

      function checkWeekday(weekdayStr, parsedInput, config) {
          if (weekdayStr) {
              // TODO: Replace the vanilla JS Date object with an indepentent day-of-week check.
              var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr),
                  weekdayActual = new Date(parsedInput[0], parsedInput[1], parsedInput[2]).getDay();
              if (weekdayProvided !== weekdayActual) {
                  getParsingFlags(config).weekdayMismatch = true;
                  config._isValid = false;
                  return false;
              }
          }
          return true;
      }

      var obsOffsets = {
          UT: 0,
          GMT: 0,
          EDT: -4 * 60,
          EST: -5 * 60,
          CDT: -5 * 60,
          CST: -6 * 60,
          MDT: -6 * 60,
          MST: -7 * 60,
          PDT: -7 * 60,
          PST: -8 * 60
      };

      function calculateOffset(obsOffset, militaryOffset, numOffset) {
          if (obsOffset) {
              return obsOffsets[obsOffset];
          } else if (militaryOffset) {
              // the only allowed military tz is Z
              return 0;
          } else {
              var hm = parseInt(numOffset, 10);
              var m = hm % 100, h = (hm - m) / 100;
              return h * 60 + m;
          }
      }

      // date and time from ref 2822 format
      function configFromRFC2822(config) {
          var match = rfc2822.exec(preprocessRFC2822(config._i));
          if (match) {
              var parsedArray = extractFromRFC2822Strings(match[4], match[3], match[2], match[5], match[6], match[7]);
              if (!checkWeekday(match[1], parsedArray, config)) {
                  return;
              }

              config._a = parsedArray;
              config._tzm = calculateOffset(match[8], match[9], match[10]);

              config._d = createUTCDate.apply(null, config._a);
              config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);

              getParsingFlags(config).rfc2822 = true;
          } else {
              config._isValid = false;
          }
      }

      // date from iso format or fallback
      function configFromString(config) {
          var matched = aspNetJsonRegex.exec(config._i);

          if (matched !== null) {
              config._d = new Date(+matched[1]);
              return;
          }

          configFromISO(config);
          if (config._isValid === false) {
              delete config._isValid;
          } else {
              return;
          }

          configFromRFC2822(config);
          if (config._isValid === false) {
              delete config._isValid;
          } else {
              return;
          }

          // Final attempt, use Input Fallback
          hooks.createFromInputFallback(config);
      }

      hooks.createFromInputFallback = deprecate(
          'value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), ' +
          'which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are ' +
          'discouraged and will be removed in an upcoming major release. Please refer to ' +
          'http://momentjs.com/guides/#/warnings/js-date/ for more info.',
          function (config) {
              config._d = new Date(config._i + (config._useUTC ? ' UTC' : ''));
          }
      );

      // constant that refers to the ISO standard
      hooks.ISO_8601 = function () {};

      // constant that refers to the RFC 2822 form
      hooks.RFC_2822 = function () {};

      // date from string and format string
      function configFromStringAndFormat(config) {
          // TODO: Move this to another part of the creation flow to prevent circular deps
          if (config._f === hooks.ISO_8601) {
              configFromISO(config);
              return;
          }
          if (config._f === hooks.RFC_2822) {
              configFromRFC2822(config);
              return;
          }
          config._a = [];
          getParsingFlags(config).empty = true;

          // This array is used to make a Date, either with `new Date` or `Date.UTC`
          var string = '' + config._i,
              i, parsedInput, tokens, token, skipped,
              stringLength = string.length,
              totalParsedInputLength = 0;

          tokens = expandFormat(config._f, config._locale).match(formattingTokens) || [];

          for (i = 0; i < tokens.length; i++) {
              token = tokens[i];
              parsedInput = (string.match(getParseRegexForToken(token, config)) || [])[0];
              // console.log('token', token, 'parsedInput', parsedInput,
              //         'regex', getParseRegexForToken(token, config));
              if (parsedInput) {
                  skipped = string.substr(0, string.indexOf(parsedInput));
                  if (skipped.length > 0) {
                      getParsingFlags(config).unusedInput.push(skipped);
                  }
                  string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
                  totalParsedInputLength += parsedInput.length;
              }
              // don't parse if it's not a known token
              if (formatTokenFunctions[token]) {
                  if (parsedInput) {
                      getParsingFlags(config).empty = false;
                  }
                  else {
                      getParsingFlags(config).unusedTokens.push(token);
                  }
                  addTimeToArrayFromToken(token, parsedInput, config);
              }
              else if (config._strict && !parsedInput) {
                  getParsingFlags(config).unusedTokens.push(token);
              }
          }

          // add remaining unparsed input length to the string
          getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
          if (string.length > 0) {
              getParsingFlags(config).unusedInput.push(string);
          }

          // clear _12h flag if hour is <= 12
          if (config._a[HOUR] <= 12 &&
              getParsingFlags(config).bigHour === true &&
              config._a[HOUR] > 0) {
              getParsingFlags(config).bigHour = undefined;
          }

          getParsingFlags(config).parsedDateParts = config._a.slice(0);
          getParsingFlags(config).meridiem = config._meridiem;
          // handle meridiem
          config._a[HOUR] = meridiemFixWrap(config._locale, config._a[HOUR], config._meridiem);

          configFromArray(config);
          checkOverflow(config);
      }


      function meridiemFixWrap (locale, hour, meridiem) {
          var isPm;

          if (meridiem == null) {
              // nothing to do
              return hour;
          }
          if (locale.meridiemHour != null) {
              return locale.meridiemHour(hour, meridiem);
          } else if (locale.isPM != null) {
              // Fallback
              isPm = locale.isPM(meridiem);
              if (isPm && hour < 12) {
                  hour += 12;
              }
              if (!isPm && hour === 12) {
                  hour = 0;
              }
              return hour;
          } else {
              // this is not supposed to happen
              return hour;
          }
      }

      // date from string and array of format strings
      function configFromStringAndArray(config) {
          var tempConfig,
              bestMoment,

              scoreToBeat,
              i,
              currentScore;

          if (config._f.length === 0) {
              getParsingFlags(config).invalidFormat = true;
              config._d = new Date(NaN);
              return;
          }

          for (i = 0; i < config._f.length; i++) {
              currentScore = 0;
              tempConfig = copyConfig({}, config);
              if (config._useUTC != null) {
                  tempConfig._useUTC = config._useUTC;
              }
              tempConfig._f = config._f[i];
              configFromStringAndFormat(tempConfig);

              if (!isValid(tempConfig)) {
                  continue;
              }

              // if there is any input that was not parsed add a penalty for that format
              currentScore += getParsingFlags(tempConfig).charsLeftOver;

              //or tokens
              currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;

              getParsingFlags(tempConfig).score = currentScore;

              if (scoreToBeat == null || currentScore < scoreToBeat) {
                  scoreToBeat = currentScore;
                  bestMoment = tempConfig;
              }
          }

          extend(config, bestMoment || tempConfig);
      }

      function configFromObject(config) {
          if (config._d) {
              return;
          }

          var i = normalizeObjectUnits(config._i);
          config._a = map([i.year, i.month, i.day || i.date, i.hour, i.minute, i.second, i.millisecond], function (obj) {
              return obj && parseInt(obj, 10);
          });

          configFromArray(config);
      }

      function createFromConfig (config) {
          var res = new Moment(checkOverflow(prepareConfig(config)));
          if (res._nextDay) {
              // Adding is smart enough around DST
              res.add(1, 'd');
              res._nextDay = undefined;
          }

          return res;
      }

      function prepareConfig (config) {
          var input = config._i,
              format = config._f;

          config._locale = config._locale || getLocale(config._l);

          if (input === null || (format === undefined && input === '')) {
              return createInvalid({nullInput: true});
          }

          if (typeof input === 'string') {
              config._i = input = config._locale.preparse(input);
          }

          if (isMoment(input)) {
              return new Moment(checkOverflow(input));
          } else if (isDate(input)) {
              config._d = input;
          } else if (isArray(format)) {
              configFromStringAndArray(config);
          } else if (format) {
              configFromStringAndFormat(config);
          }  else {
              configFromInput(config);
          }

          if (!isValid(config)) {
              config._d = null;
          }

          return config;
      }

      function configFromInput(config) {
          var input = config._i;
          if (isUndefined(input)) {
              config._d = new Date(hooks.now());
          } else if (isDate(input)) {
              config._d = new Date(input.valueOf());
          } else if (typeof input === 'string') {
              configFromString(config);
          } else if (isArray(input)) {
              config._a = map(input.slice(0), function (obj) {
                  return parseInt(obj, 10);
              });
              configFromArray(config);
          } else if (isObject(input)) {
              configFromObject(config);
          } else if (isNumber(input)) {
              // from milliseconds
              config._d = new Date(input);
          } else {
              hooks.createFromInputFallback(config);
          }
      }

      function createLocalOrUTC (input, format, locale, strict, isUTC) {
          var c = {};

          if (locale === true || locale === false) {
              strict = locale;
              locale = undefined;
          }

          if ((isObject(input) && isObjectEmpty(input)) ||
                  (isArray(input) && input.length === 0)) {
              input = undefined;
          }
          // object construction must be done this way.
          // https://github.com/moment/moment/issues/1423
          c._isAMomentObject = true;
          c._useUTC = c._isUTC = isUTC;
          c._l = locale;
          c._i = input;
          c._f = format;
          c._strict = strict;

          return createFromConfig(c);
      }

      function createLocal (input, format, locale, strict) {
          return createLocalOrUTC(input, format, locale, strict, false);
      }

      var prototypeMin = deprecate(
          'moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/',
          function () {
              var other = createLocal.apply(null, arguments);
              if (this.isValid() && other.isValid()) {
                  return other < this ? this : other;
              } else {
                  return createInvalid();
              }
          }
      );

      var prototypeMax = deprecate(
          'moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/',
          function () {
              var other = createLocal.apply(null, arguments);
              if (this.isValid() && other.isValid()) {
                  return other > this ? this : other;
              } else {
                  return createInvalid();
              }
          }
      );

      // Pick a moment m from moments so that m[fn](other) is true for all
      // other. This relies on the function fn to be transitive.
      //
      // moments should either be an array of moment objects or an array, whose
      // first element is an array of moment objects.
      function pickBy(fn, moments) {
          var res, i;
          if (moments.length === 1 && isArray(moments[0])) {
              moments = moments[0];
          }
          if (!moments.length) {
              return createLocal();
          }
          res = moments[0];
          for (i = 1; i < moments.length; ++i) {
              if (!moments[i].isValid() || moments[i][fn](res)) {
                  res = moments[i];
              }
          }
          return res;
      }

      // TODO: Use [].sort instead?
      function min () {
          var args = [].slice.call(arguments, 0);

          return pickBy('isBefore', args);
      }

      function max () {
          var args = [].slice.call(arguments, 0);

          return pickBy('isAfter', args);
      }

      var now = function () {
          return Date.now ? Date.now() : +(new Date());
      };

      var ordering = ['year', 'quarter', 'month', 'week', 'day', 'hour', 'minute', 'second', 'millisecond'];

      function isDurationValid(m) {
          for (var key in m) {
              if (!(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
                  return false;
              }
          }

          var unitHasDecimal = false;
          for (var i = 0; i < ordering.length; ++i) {
              if (m[ordering[i]]) {
                  if (unitHasDecimal) {
                      return false; // only allow non-integers for smallest unit
                  }
                  if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
                      unitHasDecimal = true;
                  }
              }
          }

          return true;
      }

      function isValid$1() {
          return this._isValid;
      }

      function createInvalid$1() {
          return createDuration(NaN);
      }

      function Duration (duration) {
          var normalizedInput = normalizeObjectUnits(duration),
              years = normalizedInput.year || 0,
              quarters = normalizedInput.quarter || 0,
              months = normalizedInput.month || 0,
              weeks = normalizedInput.week || normalizedInput.isoWeek || 0,
              days = normalizedInput.day || 0,
              hours = normalizedInput.hour || 0,
              minutes = normalizedInput.minute || 0,
              seconds = normalizedInput.second || 0,
              milliseconds = normalizedInput.millisecond || 0;

          this._isValid = isDurationValid(normalizedInput);

          // representation for dateAddRemove
          this._milliseconds = +milliseconds +
              seconds * 1e3 + // 1000
              minutes * 6e4 + // 1000 * 60
              hours * 1000 * 60 * 60; //using 1000 * 60 * 60 instead of 36e5 to avoid floating point rounding errors https://github.com/moment/moment/issues/2978
          // Because of dateAddRemove treats 24 hours as different from a
          // day when working around DST, we need to store them separately
          this._days = +days +
              weeks * 7;
          // It is impossible to translate months into days without knowing
          // which months you are are talking about, so we have to store
          // it separately.
          this._months = +months +
              quarters * 3 +
              years * 12;

          this._data = {};

          this._locale = getLocale();

          this._bubble();
      }

      function isDuration (obj) {
          return obj instanceof Duration;
      }

      function absRound (number) {
          if (number < 0) {
              return Math.round(-1 * number) * -1;
          } else {
              return Math.round(number);
          }
      }

      // FORMATTING

      function offset (token, separator) {
          addFormatToken(token, 0, 0, function () {
              var offset = this.utcOffset();
              var sign = '+';
              if (offset < 0) {
                  offset = -offset;
                  sign = '-';
              }
              return sign + zeroFill(~~(offset / 60), 2) + separator + zeroFill(~~(offset) % 60, 2);
          });
      }

      offset('Z', ':');
      offset('ZZ', '');

      // PARSING

      addRegexToken('Z',  matchShortOffset);
      addRegexToken('ZZ', matchShortOffset);
      addParseToken(['Z', 'ZZ'], function (input, array, config) {
          config._useUTC = true;
          config._tzm = offsetFromString(matchShortOffset, input);
      });

      // HELPERS

      // timezone chunker
      // '+10:00' > ['10',  '00']
      // '-1530'  > ['-15', '30']
      var chunkOffset = /([\+\-]|\d\d)/gi;

      function offsetFromString(matcher, string) {
          var matches = (string || '').match(matcher);

          if (matches === null) {
              return null;
          }

          var chunk   = matches[matches.length - 1] || [];
          var parts   = (chunk + '').match(chunkOffset) || ['-', 0, 0];
          var minutes = +(parts[1] * 60) + toInt(parts[2]);

          return minutes === 0 ?
            0 :
            parts[0] === '+' ? minutes : -minutes;
      }

      // Return a moment from input, that is local/utc/zone equivalent to model.
      function cloneWithOffset(input, model) {
          var res, diff;
          if (model._isUTC) {
              res = model.clone();
              diff = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
              // Use low-level api, because this fn is low-level api.
              res._d.setTime(res._d.valueOf() + diff);
              hooks.updateOffset(res, false);
              return res;
          } else {
              return createLocal(input).local();
          }
      }

      function getDateOffset (m) {
          // On Firefox.24 Date#getTimezoneOffset returns a floating point.
          // https://github.com/moment/moment/pull/1871
          return -Math.round(m._d.getTimezoneOffset() / 15) * 15;
      }

      // HOOKS

      // This function will be called whenever a moment is mutated.
      // It is intended to keep the offset in sync with the timezone.
      hooks.updateOffset = function () {};

      // MOMENTS

      // keepLocalTime = true means only change the timezone, without
      // affecting the local hour. So 5:31:26 +0300 --[utcOffset(2, true)]-->
      // 5:31:26 +0200 It is possible that 5:31:26 doesn't exist with offset
      // +0200, so we adjust the time as needed, to be valid.
      //
      // Keeping the time actually adds/subtracts (one hour)
      // from the actual represented time. That is why we call updateOffset
      // a second time. In case it wants us to change the offset again
      // _changeInProgress == true case, then we have to adjust, because
      // there is no such time in the given timezone.
      function getSetOffset (input, keepLocalTime, keepMinutes) {
          var offset = this._offset || 0,
              localAdjust;
          if (!this.isValid()) {
              return input != null ? this : NaN;
          }
          if (input != null) {
              if (typeof input === 'string') {
                  input = offsetFromString(matchShortOffset, input);
                  if (input === null) {
                      return this;
                  }
              } else if (Math.abs(input) < 16 && !keepMinutes) {
                  input = input * 60;
              }
              if (!this._isUTC && keepLocalTime) {
                  localAdjust = getDateOffset(this);
              }
              this._offset = input;
              this._isUTC = true;
              if (localAdjust != null) {
                  this.add(localAdjust, 'm');
              }
              if (offset !== input) {
                  if (!keepLocalTime || this._changeInProgress) {
                      addSubtract(this, createDuration(input - offset, 'm'), 1, false);
                  } else if (!this._changeInProgress) {
                      this._changeInProgress = true;
                      hooks.updateOffset(this, true);
                      this._changeInProgress = null;
                  }
              }
              return this;
          } else {
              return this._isUTC ? offset : getDateOffset(this);
          }
      }

      function getSetZone (input, keepLocalTime) {
          if (input != null) {
              if (typeof input !== 'string') {
                  input = -input;
              }

              this.utcOffset(input, keepLocalTime);

              return this;
          } else {
              return -this.utcOffset();
          }
      }

      function setOffsetToUTC (keepLocalTime) {
          return this.utcOffset(0, keepLocalTime);
      }

      function setOffsetToLocal (keepLocalTime) {
          if (this._isUTC) {
              this.utcOffset(0, keepLocalTime);
              this._isUTC = false;

              if (keepLocalTime) {
                  this.subtract(getDateOffset(this), 'm');
              }
          }
          return this;
      }

      function setOffsetToParsedOffset () {
          if (this._tzm != null) {
              this.utcOffset(this._tzm, false, true);
          } else if (typeof this._i === 'string') {
              var tZone = offsetFromString(matchOffset, this._i);
              if (tZone != null) {
                  this.utcOffset(tZone);
              }
              else {
                  this.utcOffset(0, true);
              }
          }
          return this;
      }

      function hasAlignedHourOffset (input) {
          if (!this.isValid()) {
              return false;
          }
          input = input ? createLocal(input).utcOffset() : 0;

          return (this.utcOffset() - input) % 60 === 0;
      }

      function isDaylightSavingTime () {
          return (
              this.utcOffset() > this.clone().month(0).utcOffset() ||
              this.utcOffset() > this.clone().month(5).utcOffset()
          );
      }

      function isDaylightSavingTimeShifted () {
          if (!isUndefined(this._isDSTShifted)) {
              return this._isDSTShifted;
          }

          var c = {};

          copyConfig(c, this);
          c = prepareConfig(c);

          if (c._a) {
              var other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
              this._isDSTShifted = this.isValid() &&
                  compareArrays(c._a, other.toArray()) > 0;
          } else {
              this._isDSTShifted = false;
          }

          return this._isDSTShifted;
      }

      function isLocal () {
          return this.isValid() ? !this._isUTC : false;
      }

      function isUtcOffset () {
          return this.isValid() ? this._isUTC : false;
      }

      function isUtc () {
          return this.isValid() ? this._isUTC && this._offset === 0 : false;
      }

      // ASP.NET json date format regex
      var aspNetRegex = /^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/;

      // from http://docs.closure-library.googlecode.com/git/closure_goog_date_date.js.source.html
      // somewhat more in line with 4.4.3.2 2004 spec, but allows decimal anywhere
      // and further modified to allow for strings containing both week and day
      var isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;

      function createDuration (input, key) {
          var duration = input,
              // matching against regexp is expensive, do it on demand
              match = null,
              sign,
              ret,
              diffRes;

          if (isDuration(input)) {
              duration = {
                  ms : input._milliseconds,
                  d  : input._days,
                  M  : input._months
              };
          } else if (isNumber(input)) {
              duration = {};
              if (key) {
                  duration[key] = input;
              } else {
                  duration.milliseconds = input;
              }
          } else if (!!(match = aspNetRegex.exec(input))) {
              sign = (match[1] === '-') ? -1 : 1;
              duration = {
                  y  : 0,
                  d  : toInt(match[DATE])                         * sign,
                  h  : toInt(match[HOUR])                         * sign,
                  m  : toInt(match[MINUTE])                       * sign,
                  s  : toInt(match[SECOND])                       * sign,
                  ms : toInt(absRound(match[MILLISECOND] * 1000)) * sign // the millisecond decimal point is included in the match
              };
          } else if (!!(match = isoRegex.exec(input))) {
              sign = (match[1] === '-') ? -1 : 1;
              duration = {
                  y : parseIso(match[2], sign),
                  M : parseIso(match[3], sign),
                  w : parseIso(match[4], sign),
                  d : parseIso(match[5], sign),
                  h : parseIso(match[6], sign),
                  m : parseIso(match[7], sign),
                  s : parseIso(match[8], sign)
              };
          } else if (duration == null) {// checks for null or undefined
              duration = {};
          } else if (typeof duration === 'object' && ('from' in duration || 'to' in duration)) {
              diffRes = momentsDifference(createLocal(duration.from), createLocal(duration.to));

              duration = {};
              duration.ms = diffRes.milliseconds;
              duration.M = diffRes.months;
          }

          ret = new Duration(duration);

          if (isDuration(input) && hasOwnProp(input, '_locale')) {
              ret._locale = input._locale;
          }

          return ret;
      }

      createDuration.fn = Duration.prototype;
      createDuration.invalid = createInvalid$1;

      function parseIso (inp, sign) {
          // We'd normally use ~~inp for this, but unfortunately it also
          // converts floats to ints.
          // inp may be undefined, so careful calling replace on it.
          var res = inp && parseFloat(inp.replace(',', '.'));
          // apply sign while we're at it
          return (isNaN(res) ? 0 : res) * sign;
      }

      function positiveMomentsDifference(base, other) {
          var res = {};

          res.months = other.month() - base.month() +
              (other.year() - base.year()) * 12;
          if (base.clone().add(res.months, 'M').isAfter(other)) {
              --res.months;
          }

          res.milliseconds = +other - +(base.clone().add(res.months, 'M'));

          return res;
      }

      function momentsDifference(base, other) {
          var res;
          if (!(base.isValid() && other.isValid())) {
              return {milliseconds: 0, months: 0};
          }

          other = cloneWithOffset(other, base);
          if (base.isBefore(other)) {
              res = positiveMomentsDifference(base, other);
          } else {
              res = positiveMomentsDifference(other, base);
              res.milliseconds = -res.milliseconds;
              res.months = -res.months;
          }

          return res;
      }

      // TODO: remove 'name' arg after deprecation is removed
      function createAdder(direction, name) {
          return function (val, period) {
              var dur, tmp;
              //invert the arguments, but complain about it
              if (period !== null && !isNaN(+period)) {
                  deprecateSimple(name, 'moment().' + name  + '(period, number) is deprecated. Please use moment().' + name + '(number, period). ' +
                  'See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info.');
                  tmp = val; val = period; period = tmp;
              }

              val = typeof val === 'string' ? +val : val;
              dur = createDuration(val, period);
              addSubtract(this, dur, direction);
              return this;
          };
      }

      function addSubtract (mom, duration, isAdding, updateOffset) {
          var milliseconds = duration._milliseconds,
              days = absRound(duration._days),
              months = absRound(duration._months);

          if (!mom.isValid()) {
              // No op
              return;
          }

          updateOffset = updateOffset == null ? true : updateOffset;

          if (months) {
              setMonth(mom, get(mom, 'Month') + months * isAdding);
          }
          if (days) {
              set$1(mom, 'Date', get(mom, 'Date') + days * isAdding);
          }
          if (milliseconds) {
              mom._d.setTime(mom._d.valueOf() + milliseconds * isAdding);
          }
          if (updateOffset) {
              hooks.updateOffset(mom, days || months);
          }
      }

      var add      = createAdder(1, 'add');
      var subtract = createAdder(-1, 'subtract');

      function getCalendarFormat(myMoment, now) {
          var diff = myMoment.diff(now, 'days', true);
          return diff < -6 ? 'sameElse' :
                  diff < -1 ? 'lastWeek' :
                  diff < 0 ? 'lastDay' :
                  diff < 1 ? 'sameDay' :
                  diff < 2 ? 'nextDay' :
                  diff < 7 ? 'nextWeek' : 'sameElse';
      }

      function calendar$1 (time, formats) {
          // We want to compare the start of today, vs this.
          // Getting start-of-today depends on whether we're local/utc/offset or not.
          var now = time || createLocal(),
              sod = cloneWithOffset(now, this).startOf('day'),
              format = hooks.calendarFormat(this, sod) || 'sameElse';

          var output = formats && (isFunction(formats[format]) ? formats[format].call(this, now) : formats[format]);

          return this.format(output || this.localeData().calendar(format, this, createLocal(now)));
      }

      function clone () {
          return new Moment(this);
      }

      function isAfter (input, units) {
          var localInput = isMoment(input) ? input : createLocal(input);
          if (!(this.isValid() && localInput.isValid())) {
              return false;
          }
          units = normalizeUnits(units) || 'millisecond';
          if (units === 'millisecond') {
              return this.valueOf() > localInput.valueOf();
          } else {
              return localInput.valueOf() < this.clone().startOf(units).valueOf();
          }
      }

      function isBefore (input, units) {
          var localInput = isMoment(input) ? input : createLocal(input);
          if (!(this.isValid() && localInput.isValid())) {
              return false;
          }
          units = normalizeUnits(units) || 'millisecond';
          if (units === 'millisecond') {
              return this.valueOf() < localInput.valueOf();
          } else {
              return this.clone().endOf(units).valueOf() < localInput.valueOf();
          }
      }

      function isBetween (from, to, units, inclusivity) {
          var localFrom = isMoment(from) ? from : createLocal(from),
              localTo = isMoment(to) ? to : createLocal(to);
          if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
              return false;
          }
          inclusivity = inclusivity || '()';
          return (inclusivity[0] === '(' ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) &&
              (inclusivity[1] === ')' ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
      }

      function isSame (input, units) {
          var localInput = isMoment(input) ? input : createLocal(input),
              inputMs;
          if (!(this.isValid() && localInput.isValid())) {
              return false;
          }
          units = normalizeUnits(units) || 'millisecond';
          if (units === 'millisecond') {
              return this.valueOf() === localInput.valueOf();
          } else {
              inputMs = localInput.valueOf();
              return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
          }
      }

      function isSameOrAfter (input, units) {
          return this.isSame(input, units) || this.isAfter(input, units);
      }

      function isSameOrBefore (input, units) {
          return this.isSame(input, units) || this.isBefore(input, units);
      }

      function diff (input, units, asFloat) {
          var that,
              zoneDelta,
              output;

          if (!this.isValid()) {
              return NaN;
          }

          that = cloneWithOffset(input, this);

          if (!that.isValid()) {
              return NaN;
          }

          zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;

          units = normalizeUnits(units);

          switch (units) {
              case 'year': output = monthDiff(this, that) / 12; break;
              case 'month': output = monthDiff(this, that); break;
              case 'quarter': output = monthDiff(this, that) / 3; break;
              case 'second': output = (this - that) / 1e3; break; // 1000
              case 'minute': output = (this - that) / 6e4; break; // 1000 * 60
              case 'hour': output = (this - that) / 36e5; break; // 1000 * 60 * 60
              case 'day': output = (this - that - zoneDelta) / 864e5; break; // 1000 * 60 * 60 * 24, negate dst
              case 'week': output = (this - that - zoneDelta) / 6048e5; break; // 1000 * 60 * 60 * 24 * 7, negate dst
              default: output = this - that;
          }

          return asFloat ? output : absFloor(output);
      }

      function monthDiff (a, b) {
          // difference in months
          var wholeMonthDiff = ((b.year() - a.year()) * 12) + (b.month() - a.month()),
              // b is in (anchor - 1 month, anchor + 1 month)
              anchor = a.clone().add(wholeMonthDiff, 'months'),
              anchor2, adjust;

          if (b - anchor < 0) {
              anchor2 = a.clone().add(wholeMonthDiff - 1, 'months');
              // linear across the month
              adjust = (b - anchor) / (anchor - anchor2);
          } else {
              anchor2 = a.clone().add(wholeMonthDiff + 1, 'months');
              // linear across the month
              adjust = (b - anchor) / (anchor2 - anchor);
          }

          //check for negative zero, return zero if negative zero
          return -(wholeMonthDiff + adjust) || 0;
      }

      hooks.defaultFormat = 'YYYY-MM-DDTHH:mm:ssZ';
      hooks.defaultFormatUtc = 'YYYY-MM-DDTHH:mm:ss[Z]';

      function toString () {
          return this.clone().locale('en').format('ddd MMM DD YYYY HH:mm:ss [GMT]ZZ');
      }

      function toISOString(keepOffset) {
          if (!this.isValid()) {
              return null;
          }
          var utc = keepOffset !== true;
          var m = utc ? this.clone().utc() : this;
          if (m.year() < 0 || m.year() > 9999) {
              return formatMoment(m, utc ? 'YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYYYY-MM-DD[T]HH:mm:ss.SSSZ');
          }
          if (isFunction(Date.prototype.toISOString)) {
              // native implementation is ~50x faster, use it when we can
              if (utc) {
                  return this.toDate().toISOString();
              } else {
                  return new Date(this.valueOf() + this.utcOffset() * 60 * 1000).toISOString().replace('Z', formatMoment(m, 'Z'));
              }
          }
          return formatMoment(m, utc ? 'YYYY-MM-DD[T]HH:mm:ss.SSS[Z]' : 'YYYY-MM-DD[T]HH:mm:ss.SSSZ');
      }

      /**
       * Return a human readable representation of a moment that can
       * also be evaluated to get a new moment which is the same
       *
       * @link https://nodejs.org/dist/latest/docs/api/util.html#util_custom_inspect_function_on_objects
       */
      function inspect () {
          if (!this.isValid()) {
              return 'moment.invalid(/* ' + this._i + ' */)';
          }
          var func = 'moment';
          var zone = '';
          if (!this.isLocal()) {
              func = this.utcOffset() === 0 ? 'moment.utc' : 'moment.parseZone';
              zone = 'Z';
          }
          var prefix = '[' + func + '("]';
          var year = (0 <= this.year() && this.year() <= 9999) ? 'YYYY' : 'YYYYYY';
          var datetime = '-MM-DD[T]HH:mm:ss.SSS';
          var suffix = zone + '[")]';

          return this.format(prefix + year + datetime + suffix);
      }

      function format (inputString) {
          if (!inputString) {
              inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
          }
          var output = formatMoment(this, inputString);
          return this.localeData().postformat(output);
      }

      function from (time, withoutSuffix) {
          if (this.isValid() &&
                  ((isMoment(time) && time.isValid()) ||
                   createLocal(time).isValid())) {
              return createDuration({to: this, from: time}).locale(this.locale()).humanize(!withoutSuffix);
          } else {
              return this.localeData().invalidDate();
          }
      }

      function fromNow (withoutSuffix) {
          return this.from(createLocal(), withoutSuffix);
      }

      function to (time, withoutSuffix) {
          if (this.isValid() &&
                  ((isMoment(time) && time.isValid()) ||
                   createLocal(time).isValid())) {
              return createDuration({from: this, to: time}).locale(this.locale()).humanize(!withoutSuffix);
          } else {
              return this.localeData().invalidDate();
          }
      }

      function toNow (withoutSuffix) {
          return this.to(createLocal(), withoutSuffix);
      }

      // If passed a locale key, it will set the locale for this
      // instance.  Otherwise, it will return the locale configuration
      // variables for this instance.
      function locale (key) {
          var newLocaleData;

          if (key === undefined) {
              return this._locale._abbr;
          } else {
              newLocaleData = getLocale(key);
              if (newLocaleData != null) {
                  this._locale = newLocaleData;
              }
              return this;
          }
      }

      var lang = deprecate(
          'moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.',
          function (key) {
              if (key === undefined) {
                  return this.localeData();
              } else {
                  return this.locale(key);
              }
          }
      );

      function localeData () {
          return this._locale;
      }

      var MS_PER_SECOND = 1000;
      var MS_PER_MINUTE = 60 * MS_PER_SECOND;
      var MS_PER_HOUR = 60 * MS_PER_MINUTE;
      var MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;

      // actual modulo - handles negative numbers (for dates before 1970):
      function mod$1(dividend, divisor) {
          return (dividend % divisor + divisor) % divisor;
      }

      function localStartOfDate(y, m, d) {
          // the date constructor remaps years 0-99 to 1900-1999
          if (y < 100 && y >= 0) {
              // preserve leap years using a full 400 year cycle, then reset
              return new Date(y + 400, m, d) - MS_PER_400_YEARS;
          } else {
              return new Date(y, m, d).valueOf();
          }
      }

      function utcStartOfDate(y, m, d) {
          // Date.UTC remaps years 0-99 to 1900-1999
          if (y < 100 && y >= 0) {
              // preserve leap years using a full 400 year cycle, then reset
              return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
          } else {
              return Date.UTC(y, m, d);
          }
      }

      function startOf (units) {
          var time;
          units = normalizeUnits(units);
          if (units === undefined || units === 'millisecond' || !this.isValid()) {
              return this;
          }

          var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

          switch (units) {
              case 'year':
                  time = startOfDate(this.year(), 0, 1);
                  break;
              case 'quarter':
                  time = startOfDate(this.year(), this.month() - this.month() % 3, 1);
                  break;
              case 'month':
                  time = startOfDate(this.year(), this.month(), 1);
                  break;
              case 'week':
                  time = startOfDate(this.year(), this.month(), this.date() - this.weekday());
                  break;
              case 'isoWeek':
                  time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1));
                  break;
              case 'day':
              case 'date':
                  time = startOfDate(this.year(), this.month(), this.date());
                  break;
              case 'hour':
                  time = this._d.valueOf();
                  time -= mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR);
                  break;
              case 'minute':
                  time = this._d.valueOf();
                  time -= mod$1(time, MS_PER_MINUTE);
                  break;
              case 'second':
                  time = this._d.valueOf();
                  time -= mod$1(time, MS_PER_SECOND);
                  break;
          }

          this._d.setTime(time);
          hooks.updateOffset(this, true);
          return this;
      }

      function endOf (units) {
          var time;
          units = normalizeUnits(units);
          if (units === undefined || units === 'millisecond' || !this.isValid()) {
              return this;
          }

          var startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;

          switch (units) {
              case 'year':
                  time = startOfDate(this.year() + 1, 0, 1) - 1;
                  break;
              case 'quarter':
                  time = startOfDate(this.year(), this.month() - this.month() % 3 + 3, 1) - 1;
                  break;
              case 'month':
                  time = startOfDate(this.year(), this.month() + 1, 1) - 1;
                  break;
              case 'week':
                  time = startOfDate(this.year(), this.month(), this.date() - this.weekday() + 7) - 1;
                  break;
              case 'isoWeek':
                  time = startOfDate(this.year(), this.month(), this.date() - (this.isoWeekday() - 1) + 7) - 1;
                  break;
              case 'day':
              case 'date':
                  time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
                  break;
              case 'hour':
                  time = this._d.valueOf();
                  time += MS_PER_HOUR - mod$1(time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE), MS_PER_HOUR) - 1;
                  break;
              case 'minute':
                  time = this._d.valueOf();
                  time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
                  break;
              case 'second':
                  time = this._d.valueOf();
                  time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
                  break;
          }

          this._d.setTime(time);
          hooks.updateOffset(this, true);
          return this;
      }

      function valueOf () {
          return this._d.valueOf() - ((this._offset || 0) * 60000);
      }

      function unix () {
          return Math.floor(this.valueOf() / 1000);
      }

      function toDate () {
          return new Date(this.valueOf());
      }

      function toArray () {
          var m = this;
          return [m.year(), m.month(), m.date(), m.hour(), m.minute(), m.second(), m.millisecond()];
      }

      function toObject () {
          var m = this;
          return {
              years: m.year(),
              months: m.month(),
              date: m.date(),
              hours: m.hours(),
              minutes: m.minutes(),
              seconds: m.seconds(),
              milliseconds: m.milliseconds()
          };
      }

      function toJSON () {
          // new Date(NaN).toJSON() === null
          return this.isValid() ? this.toISOString() : null;
      }

      function isValid$2 () {
          return isValid(this);
      }

      function parsingFlags () {
          return extend({}, getParsingFlags(this));
      }

      function invalidAt () {
          return getParsingFlags(this).overflow;
      }

      function creationData() {
          return {
              input: this._i,
              format: this._f,
              locale: this._locale,
              isUTC: this._isUTC,
              strict: this._strict
          };
      }

      // FORMATTING

      addFormatToken(0, ['gg', 2], 0, function () {
          return this.weekYear() % 100;
      });

      addFormatToken(0, ['GG', 2], 0, function () {
          return this.isoWeekYear() % 100;
      });

      function addWeekYearFormatToken (token, getter) {
          addFormatToken(0, [token, token.length], 0, getter);
      }

      addWeekYearFormatToken('gggg',     'weekYear');
      addWeekYearFormatToken('ggggg',    'weekYear');
      addWeekYearFormatToken('GGGG',  'isoWeekYear');
      addWeekYearFormatToken('GGGGG', 'isoWeekYear');

      // ALIASES

      addUnitAlias('weekYear', 'gg');
      addUnitAlias('isoWeekYear', 'GG');

      // PRIORITY

      addUnitPriority('weekYear', 1);
      addUnitPriority('isoWeekYear', 1);


      // PARSING

      addRegexToken('G',      matchSigned);
      addRegexToken('g',      matchSigned);
      addRegexToken('GG',     match1to2, match2);
      addRegexToken('gg',     match1to2, match2);
      addRegexToken('GGGG',   match1to4, match4);
      addRegexToken('gggg',   match1to4, match4);
      addRegexToken('GGGGG',  match1to6, match6);
      addRegexToken('ggggg',  match1to6, match6);

      addWeekParseToken(['gggg', 'ggggg', 'GGGG', 'GGGGG'], function (input, week, config, token) {
          week[token.substr(0, 2)] = toInt(input);
      });

      addWeekParseToken(['gg', 'GG'], function (input, week, config, token) {
          week[token] = hooks.parseTwoDigitYear(input);
      });

      // MOMENTS

      function getSetWeekYear (input) {
          return getSetWeekYearHelper.call(this,
                  input,
                  this.week(),
                  this.weekday(),
                  this.localeData()._week.dow,
                  this.localeData()._week.doy);
      }

      function getSetISOWeekYear (input) {
          return getSetWeekYearHelper.call(this,
                  input, this.isoWeek(), this.isoWeekday(), 1, 4);
      }

      function getISOWeeksInYear () {
          return weeksInYear(this.year(), 1, 4);
      }

      function getWeeksInYear () {
          var weekInfo = this.localeData()._week;
          return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
      }

      function getSetWeekYearHelper(input, week, weekday, dow, doy) {
          var weeksTarget;
          if (input == null) {
              return weekOfYear(this, dow, doy).year;
          } else {
              weeksTarget = weeksInYear(input, dow, doy);
              if (week > weeksTarget) {
                  week = weeksTarget;
              }
              return setWeekAll.call(this, input, week, weekday, dow, doy);
          }
      }

      function setWeekAll(weekYear, week, weekday, dow, doy) {
          var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy),
              date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);

          this.year(date.getUTCFullYear());
          this.month(date.getUTCMonth());
          this.date(date.getUTCDate());
          return this;
      }

      // FORMATTING

      addFormatToken('Q', 0, 'Qo', 'quarter');

      // ALIASES

      addUnitAlias('quarter', 'Q');

      // PRIORITY

      addUnitPriority('quarter', 7);

      // PARSING

      addRegexToken('Q', match1);
      addParseToken('Q', function (input, array) {
          array[MONTH] = (toInt(input) - 1) * 3;
      });

      // MOMENTS

      function getSetQuarter (input) {
          return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
      }

      // FORMATTING

      addFormatToken('D', ['DD', 2], 'Do', 'date');

      // ALIASES

      addUnitAlias('date', 'D');

      // PRIORITY
      addUnitPriority('date', 9);

      // PARSING

      addRegexToken('D',  match1to2);
      addRegexToken('DD', match1to2, match2);
      addRegexToken('Do', function (isStrict, locale) {
          // TODO: Remove "ordinalParse" fallback in next major release.
          return isStrict ?
            (locale._dayOfMonthOrdinalParse || locale._ordinalParse) :
            locale._dayOfMonthOrdinalParseLenient;
      });

      addParseToken(['D', 'DD'], DATE);
      addParseToken('Do', function (input, array) {
          array[DATE] = toInt(input.match(match1to2)[0]);
      });

      // MOMENTS

      var getSetDayOfMonth = makeGetSet('Date', true);

      // FORMATTING

      addFormatToken('DDD', ['DDDD', 3], 'DDDo', 'dayOfYear');

      // ALIASES

      addUnitAlias('dayOfYear', 'DDD');

      // PRIORITY
      addUnitPriority('dayOfYear', 4);

      // PARSING

      addRegexToken('DDD',  match1to3);
      addRegexToken('DDDD', match3);
      addParseToken(['DDD', 'DDDD'], function (input, array, config) {
          config._dayOfYear = toInt(input);
      });

      // HELPERS

      // MOMENTS

      function getSetDayOfYear (input) {
          var dayOfYear = Math.round((this.clone().startOf('day') - this.clone().startOf('year')) / 864e5) + 1;
          return input == null ? dayOfYear : this.add((input - dayOfYear), 'd');
      }

      // FORMATTING

      addFormatToken('m', ['mm', 2], 0, 'minute');

      // ALIASES

      addUnitAlias('minute', 'm');

      // PRIORITY

      addUnitPriority('minute', 14);

      // PARSING

      addRegexToken('m',  match1to2);
      addRegexToken('mm', match1to2, match2);
      addParseToken(['m', 'mm'], MINUTE);

      // MOMENTS

      var getSetMinute = makeGetSet('Minutes', false);

      // FORMATTING

      addFormatToken('s', ['ss', 2], 0, 'second');

      // ALIASES

      addUnitAlias('second', 's');

      // PRIORITY

      addUnitPriority('second', 15);

      // PARSING

      addRegexToken('s',  match1to2);
      addRegexToken('ss', match1to2, match2);
      addParseToken(['s', 'ss'], SECOND);

      // MOMENTS

      var getSetSecond = makeGetSet('Seconds', false);

      // FORMATTING

      addFormatToken('S', 0, 0, function () {
          return ~~(this.millisecond() / 100);
      });

      addFormatToken(0, ['SS', 2], 0, function () {
          return ~~(this.millisecond() / 10);
      });

      addFormatToken(0, ['SSS', 3], 0, 'millisecond');
      addFormatToken(0, ['SSSS', 4], 0, function () {
          return this.millisecond() * 10;
      });
      addFormatToken(0, ['SSSSS', 5], 0, function () {
          return this.millisecond() * 100;
      });
      addFormatToken(0, ['SSSSSS', 6], 0, function () {
          return this.millisecond() * 1000;
      });
      addFormatToken(0, ['SSSSSSS', 7], 0, function () {
          return this.millisecond() * 10000;
      });
      addFormatToken(0, ['SSSSSSSS', 8], 0, function () {
          return this.millisecond() * 100000;
      });
      addFormatToken(0, ['SSSSSSSSS', 9], 0, function () {
          return this.millisecond() * 1000000;
      });


      // ALIASES

      addUnitAlias('millisecond', 'ms');

      // PRIORITY

      addUnitPriority('millisecond', 16);

      // PARSING

      addRegexToken('S',    match1to3, match1);
      addRegexToken('SS',   match1to3, match2);
      addRegexToken('SSS',  match1to3, match3);

      var token;
      for (token = 'SSSS'; token.length <= 9; token += 'S') {
          addRegexToken(token, matchUnsigned);
      }

      function parseMs(input, array) {
          array[MILLISECOND] = toInt(('0.' + input) * 1000);
      }

      for (token = 'S'; token.length <= 9; token += 'S') {
          addParseToken(token, parseMs);
      }
      // MOMENTS

      var getSetMillisecond = makeGetSet('Milliseconds', false);

      // FORMATTING

      addFormatToken('z',  0, 0, 'zoneAbbr');
      addFormatToken('zz', 0, 0, 'zoneName');

      // MOMENTS

      function getZoneAbbr () {
          return this._isUTC ? 'UTC' : '';
      }

      function getZoneName () {
          return this._isUTC ? 'Coordinated Universal Time' : '';
      }

      var proto = Moment.prototype;

      proto.add               = add;
      proto.calendar          = calendar$1;
      proto.clone             = clone;
      proto.diff              = diff;
      proto.endOf             = endOf;
      proto.format            = format;
      proto.from              = from;
      proto.fromNow           = fromNow;
      proto.to                = to;
      proto.toNow             = toNow;
      proto.get               = stringGet;
      proto.invalidAt         = invalidAt;
      proto.isAfter           = isAfter;
      proto.isBefore          = isBefore;
      proto.isBetween         = isBetween;
      proto.isSame            = isSame;
      proto.isSameOrAfter     = isSameOrAfter;
      proto.isSameOrBefore    = isSameOrBefore;
      proto.isValid           = isValid$2;
      proto.lang              = lang;
      proto.locale            = locale;
      proto.localeData        = localeData;
      proto.max               = prototypeMax;
      proto.min               = prototypeMin;
      proto.parsingFlags      = parsingFlags;
      proto.set               = stringSet;
      proto.startOf           = startOf;
      proto.subtract          = subtract;
      proto.toArray           = toArray;
      proto.toObject          = toObject;
      proto.toDate            = toDate;
      proto.toISOString       = toISOString;
      proto.inspect           = inspect;
      proto.toJSON            = toJSON;
      proto.toString          = toString;
      proto.unix              = unix;
      proto.valueOf           = valueOf;
      proto.creationData      = creationData;
      proto.year       = getSetYear;
      proto.isLeapYear = getIsLeapYear;
      proto.weekYear    = getSetWeekYear;
      proto.isoWeekYear = getSetISOWeekYear;
      proto.quarter = proto.quarters = getSetQuarter;
      proto.month       = getSetMonth;
      proto.daysInMonth = getDaysInMonth;
      proto.week           = proto.weeks        = getSetWeek;
      proto.isoWeek        = proto.isoWeeks     = getSetISOWeek;
      proto.weeksInYear    = getWeeksInYear;
      proto.isoWeeksInYear = getISOWeeksInYear;
      proto.date       = getSetDayOfMonth;
      proto.day        = proto.days             = getSetDayOfWeek;
      proto.weekday    = getSetLocaleDayOfWeek;
      proto.isoWeekday = getSetISODayOfWeek;
      proto.dayOfYear  = getSetDayOfYear;
      proto.hour = proto.hours = getSetHour;
      proto.minute = proto.minutes = getSetMinute;
      proto.second = proto.seconds = getSetSecond;
      proto.millisecond = proto.milliseconds = getSetMillisecond;
      proto.utcOffset            = getSetOffset;
      proto.utc                  = setOffsetToUTC;
      proto.local                = setOffsetToLocal;
      proto.parseZone            = setOffsetToParsedOffset;
      proto.hasAlignedHourOffset = hasAlignedHourOffset;
      proto.isDST                = isDaylightSavingTime;
      proto.isLocal              = isLocal;
      proto.isUtcOffset          = isUtcOffset;
      proto.isUtc                = isUtc;
      proto.isUTC                = isUtc;
      proto.zoneAbbr = getZoneAbbr;
      proto.zoneName = getZoneName;
      proto.dates  = deprecate('dates accessor is deprecated. Use date instead.', getSetDayOfMonth);
      proto.months = deprecate('months accessor is deprecated. Use month instead', getSetMonth);
      proto.years  = deprecate('years accessor is deprecated. Use year instead', getSetYear);
      proto.zone   = deprecate('moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/', getSetZone);
      proto.isDSTShifted = deprecate('isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information', isDaylightSavingTimeShifted);

      function createUnix (input) {
          return createLocal(input * 1000);
      }

      function createInZone () {
          return createLocal.apply(null, arguments).parseZone();
      }

      function preParsePostFormat (string) {
          return string;
      }

      var proto$1 = Locale.prototype;

      proto$1.calendar        = calendar;
      proto$1.longDateFormat  = longDateFormat;
      proto$1.invalidDate     = invalidDate;
      proto$1.ordinal         = ordinal;
      proto$1.preparse        = preParsePostFormat;
      proto$1.postformat      = preParsePostFormat;
      proto$1.relativeTime    = relativeTime;
      proto$1.pastFuture      = pastFuture;
      proto$1.set             = set;

      proto$1.months            =        localeMonths;
      proto$1.monthsShort       =        localeMonthsShort;
      proto$1.monthsParse       =        localeMonthsParse;
      proto$1.monthsRegex       = monthsRegex;
      proto$1.monthsShortRegex  = monthsShortRegex;
      proto$1.week = localeWeek;
      proto$1.firstDayOfYear = localeFirstDayOfYear;
      proto$1.firstDayOfWeek = localeFirstDayOfWeek;

      proto$1.weekdays       =        localeWeekdays;
      proto$1.weekdaysMin    =        localeWeekdaysMin;
      proto$1.weekdaysShort  =        localeWeekdaysShort;
      proto$1.weekdaysParse  =        localeWeekdaysParse;

      proto$1.weekdaysRegex       =        weekdaysRegex;
      proto$1.weekdaysShortRegex  =        weekdaysShortRegex;
      proto$1.weekdaysMinRegex    =        weekdaysMinRegex;

      proto$1.isPM = localeIsPM;
      proto$1.meridiem = localeMeridiem;

      function get$1 (format, index, field, setter) {
          var locale = getLocale();
          var utc = createUTC().set(setter, index);
          return locale[field](utc, format);
      }

      function listMonthsImpl (format, index, field) {
          if (isNumber(format)) {
              index = format;
              format = undefined;
          }

          format = format || '';

          if (index != null) {
              return get$1(format, index, field, 'month');
          }

          var i;
          var out = [];
          for (i = 0; i < 12; i++) {
              out[i] = get$1(format, i, field, 'month');
          }
          return out;
      }

      // ()
      // (5)
      // (fmt, 5)
      // (fmt)
      // (true)
      // (true, 5)
      // (true, fmt, 5)
      // (true, fmt)
      function listWeekdaysImpl (localeSorted, format, index, field) {
          if (typeof localeSorted === 'boolean') {
              if (isNumber(format)) {
                  index = format;
                  format = undefined;
              }

              format = format || '';
          } else {
              format = localeSorted;
              index = format;
              localeSorted = false;

              if (isNumber(format)) {
                  index = format;
                  format = undefined;
              }

              format = format || '';
          }

          var locale = getLocale(),
              shift = localeSorted ? locale._week.dow : 0;

          if (index != null) {
              return get$1(format, (index + shift) % 7, field, 'day');
          }

          var i;
          var out = [];
          for (i = 0; i < 7; i++) {
              out[i] = get$1(format, (i + shift) % 7, field, 'day');
          }
          return out;
      }

      function listMonths (format, index) {
          return listMonthsImpl(format, index, 'months');
      }

      function listMonthsShort (format, index) {
          return listMonthsImpl(format, index, 'monthsShort');
      }

      function listWeekdays (localeSorted, format, index) {
          return listWeekdaysImpl(localeSorted, format, index, 'weekdays');
      }

      function listWeekdaysShort (localeSorted, format, index) {
          return listWeekdaysImpl(localeSorted, format, index, 'weekdaysShort');
      }

      function listWeekdaysMin (localeSorted, format, index) {
          return listWeekdaysImpl(localeSorted, format, index, 'weekdaysMin');
      }

      getSetGlobalLocale('en', {
          dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
          ordinal : function (number) {
              var b = number % 10,
                  output = (toInt(number % 100 / 10) === 1) ? 'th' :
                  (b === 1) ? 'st' :
                  (b === 2) ? 'nd' :
                  (b === 3) ? 'rd' : 'th';
              return number + output;
          }
      });

      // Side effect imports

      hooks.lang = deprecate('moment.lang is deprecated. Use moment.locale instead.', getSetGlobalLocale);
      hooks.langData = deprecate('moment.langData is deprecated. Use moment.localeData instead.', getLocale);

      var mathAbs = Math.abs;

      function abs () {
          var data           = this._data;

          this._milliseconds = mathAbs(this._milliseconds);
          this._days         = mathAbs(this._days);
          this._months       = mathAbs(this._months);

          data.milliseconds  = mathAbs(data.milliseconds);
          data.seconds       = mathAbs(data.seconds);
          data.minutes       = mathAbs(data.minutes);
          data.hours         = mathAbs(data.hours);
          data.months        = mathAbs(data.months);
          data.years         = mathAbs(data.years);

          return this;
      }

      function addSubtract$1 (duration, input, value, direction) {
          var other = createDuration(input, value);

          duration._milliseconds += direction * other._milliseconds;
          duration._days         += direction * other._days;
          duration._months       += direction * other._months;

          return duration._bubble();
      }

      // supports only 2.0-style add(1, 's') or add(duration)
      function add$1 (input, value) {
          return addSubtract$1(this, input, value, 1);
      }

      // supports only 2.0-style subtract(1, 's') or subtract(duration)
      function subtract$1 (input, value) {
          return addSubtract$1(this, input, value, -1);
      }

      function absCeil (number) {
          if (number < 0) {
              return Math.floor(number);
          } else {
              return Math.ceil(number);
          }
      }

      function bubble () {
          var milliseconds = this._milliseconds;
          var days         = this._days;
          var months       = this._months;
          var data         = this._data;
          var seconds, minutes, hours, years, monthsFromDays;

          // if we have a mix of positive and negative values, bubble down first
          // check: https://github.com/moment/moment/issues/2166
          if (!((milliseconds >= 0 && days >= 0 && months >= 0) ||
                  (milliseconds <= 0 && days <= 0 && months <= 0))) {
              milliseconds += absCeil(monthsToDays(months) + days) * 864e5;
              days = 0;
              months = 0;
          }

          // The following code bubbles up values, see the tests for
          // examples of what that means.
          data.milliseconds = milliseconds % 1000;

          seconds           = absFloor(milliseconds / 1000);
          data.seconds      = seconds % 60;

          minutes           = absFloor(seconds / 60);
          data.minutes      = minutes % 60;

          hours             = absFloor(minutes / 60);
          data.hours        = hours % 24;

          days += absFloor(hours / 24);

          // convert days to months
          monthsFromDays = absFloor(daysToMonths(days));
          months += monthsFromDays;
          days -= absCeil(monthsToDays(monthsFromDays));

          // 12 months -> 1 year
          years = absFloor(months / 12);
          months %= 12;

          data.days   = days;
          data.months = months;
          data.years  = years;

          return this;
      }

      function daysToMonths (days) {
          // 400 years have 146097 days (taking into account leap year rules)
          // 400 years have 12 months === 4800
          return days * 4800 / 146097;
      }

      function monthsToDays (months) {
          // the reverse of daysToMonths
          return months * 146097 / 4800;
      }

      function as (units) {
          if (!this.isValid()) {
              return NaN;
          }
          var days;
          var months;
          var milliseconds = this._milliseconds;

          units = normalizeUnits(units);

          if (units === 'month' || units === 'quarter' || units === 'year') {
              days = this._days + milliseconds / 864e5;
              months = this._months + daysToMonths(days);
              switch (units) {
                  case 'month':   return months;
                  case 'quarter': return months / 3;
                  case 'year':    return months / 12;
              }
          } else {
              // handle milliseconds separately because of floating point math errors (issue #1867)
              days = this._days + Math.round(monthsToDays(this._months));
              switch (units) {
                  case 'week'   : return days / 7     + milliseconds / 6048e5;
                  case 'day'    : return days         + milliseconds / 864e5;
                  case 'hour'   : return days * 24    + milliseconds / 36e5;
                  case 'minute' : return days * 1440  + milliseconds / 6e4;
                  case 'second' : return days * 86400 + milliseconds / 1000;
                  // Math.floor prevents floating point math errors here
                  case 'millisecond': return Math.floor(days * 864e5) + milliseconds;
                  default: throw new Error('Unknown unit ' + units);
              }
          }
      }

      // TODO: Use this.as('ms')?
      function valueOf$1 () {
          if (!this.isValid()) {
              return NaN;
          }
          return (
              this._milliseconds +
              this._days * 864e5 +
              (this._months % 12) * 2592e6 +
              toInt(this._months / 12) * 31536e6
          );
      }

      function makeAs (alias) {
          return function () {
              return this.as(alias);
          };
      }

      var asMilliseconds = makeAs('ms');
      var asSeconds      = makeAs('s');
      var asMinutes      = makeAs('m');
      var asHours        = makeAs('h');
      var asDays         = makeAs('d');
      var asWeeks        = makeAs('w');
      var asMonths       = makeAs('M');
      var asQuarters     = makeAs('Q');
      var asYears        = makeAs('y');

      function clone$1 () {
          return createDuration(this);
      }

      function get$2 (units) {
          units = normalizeUnits(units);
          return this.isValid() ? this[units + 's']() : NaN;
      }

      function makeGetter(name) {
          return function () {
              return this.isValid() ? this._data[name] : NaN;
          };
      }

      var milliseconds = makeGetter('milliseconds');
      var seconds      = makeGetter('seconds');
      var minutes      = makeGetter('minutes');
      var hours        = makeGetter('hours');
      var days         = makeGetter('days');
      var months       = makeGetter('months');
      var years        = makeGetter('years');

      function weeks () {
          return absFloor(this.days() / 7);
      }

      var round = Math.round;
      var thresholds = {
          ss: 44,         // a few seconds to seconds
          s : 45,         // seconds to minute
          m : 45,         // minutes to hour
          h : 22,         // hours to day
          d : 26,         // days to month
          M : 11          // months to year
      };

      // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
      function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale) {
          return locale.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
      }

      function relativeTime$1 (posNegDuration, withoutSuffix, locale) {
          var duration = createDuration(posNegDuration).abs();
          var seconds  = round(duration.as('s'));
          var minutes  = round(duration.as('m'));
          var hours    = round(duration.as('h'));
          var days     = round(duration.as('d'));
          var months   = round(duration.as('M'));
          var years    = round(duration.as('y'));

          var a = seconds <= thresholds.ss && ['s', seconds]  ||
                  seconds < thresholds.s   && ['ss', seconds] ||
                  minutes <= 1             && ['m']           ||
                  minutes < thresholds.m   && ['mm', minutes] ||
                  hours   <= 1             && ['h']           ||
                  hours   < thresholds.h   && ['hh', hours]   ||
                  days    <= 1             && ['d']           ||
                  days    < thresholds.d   && ['dd', days]    ||
                  months  <= 1             && ['M']           ||
                  months  < thresholds.M   && ['MM', months]  ||
                  years   <= 1             && ['y']           || ['yy', years];

          a[2] = withoutSuffix;
          a[3] = +posNegDuration > 0;
          a[4] = locale;
          return substituteTimeAgo.apply(null, a);
      }

      // This function allows you to set the rounding function for relative time strings
      function getSetRelativeTimeRounding (roundingFunction) {
          if (roundingFunction === undefined) {
              return round;
          }
          if (typeof(roundingFunction) === 'function') {
              round = roundingFunction;
              return true;
          }
          return false;
      }

      // This function allows you to set a threshold for relative time strings
      function getSetRelativeTimeThreshold (threshold, limit) {
          if (thresholds[threshold] === undefined) {
              return false;
          }
          if (limit === undefined) {
              return thresholds[threshold];
          }
          thresholds[threshold] = limit;
          if (threshold === 's') {
              thresholds.ss = limit - 1;
          }
          return true;
      }

      function humanize (withSuffix) {
          if (!this.isValid()) {
              return this.localeData().invalidDate();
          }

          var locale = this.localeData();
          var output = relativeTime$1(this, !withSuffix, locale);

          if (withSuffix) {
              output = locale.pastFuture(+this, output);
          }

          return locale.postformat(output);
      }

      var abs$1 = Math.abs;

      function sign(x) {
          return ((x > 0) - (x < 0)) || +x;
      }

      function toISOString$1() {
          // for ISO strings we do not use the normal bubbling rules:
          //  * milliseconds bubble up until they become hours
          //  * days do not bubble at all
          //  * months bubble up until they become years
          // This is because there is no context-free conversion between hours and days
          // (think of clock changes)
          // and also not between days and months (28-31 days per month)
          if (!this.isValid()) {
              return this.localeData().invalidDate();
          }

          var seconds = abs$1(this._milliseconds) / 1000;
          var days         = abs$1(this._days);
          var months       = abs$1(this._months);
          var minutes, hours, years;

          // 3600 seconds -> 60 minutes -> 1 hour
          minutes           = absFloor(seconds / 60);
          hours             = absFloor(minutes / 60);
          seconds %= 60;
          minutes %= 60;

          // 12 months -> 1 year
          years  = absFloor(months / 12);
          months %= 12;


          // inspired by https://github.com/dordille/moment-isoduration/blob/master/moment.isoduration.js
          var Y = years;
          var M = months;
          var D = days;
          var h = hours;
          var m = minutes;
          var s = seconds ? seconds.toFixed(3).replace(/\.?0+$/, '') : '';
          var total = this.asSeconds();

          if (!total) {
              // this is the same as C#'s (Noda) and python (isodate)...
              // but not other JS (goog.date)
              return 'P0D';
          }

          var totalSign = total < 0 ? '-' : '';
          var ymSign = sign(this._months) !== sign(total) ? '-' : '';
          var daysSign = sign(this._days) !== sign(total) ? '-' : '';
          var hmsSign = sign(this._milliseconds) !== sign(total) ? '-' : '';

          return totalSign + 'P' +
              (Y ? ymSign + Y + 'Y' : '') +
              (M ? ymSign + M + 'M' : '') +
              (D ? daysSign + D + 'D' : '') +
              ((h || m || s) ? 'T' : '') +
              (h ? hmsSign + h + 'H' : '') +
              (m ? hmsSign + m + 'M' : '') +
              (s ? hmsSign + s + 'S' : '');
      }

      var proto$2 = Duration.prototype;

      proto$2.isValid        = isValid$1;
      proto$2.abs            = abs;
      proto$2.add            = add$1;
      proto$2.subtract       = subtract$1;
      proto$2.as             = as;
      proto$2.asMilliseconds = asMilliseconds;
      proto$2.asSeconds      = asSeconds;
      proto$2.asMinutes      = asMinutes;
      proto$2.asHours        = asHours;
      proto$2.asDays         = asDays;
      proto$2.asWeeks        = asWeeks;
      proto$2.asMonths       = asMonths;
      proto$2.asQuarters     = asQuarters;
      proto$2.asYears        = asYears;
      proto$2.valueOf        = valueOf$1;
      proto$2._bubble        = bubble;
      proto$2.clone          = clone$1;
      proto$2.get            = get$2;
      proto$2.milliseconds   = milliseconds;
      proto$2.seconds        = seconds;
      proto$2.minutes        = minutes;
      proto$2.hours          = hours;
      proto$2.days           = days;
      proto$2.weeks          = weeks;
      proto$2.months         = months;
      proto$2.years          = years;
      proto$2.humanize       = humanize;
      proto$2.toISOString    = toISOString$1;
      proto$2.toString       = toISOString$1;
      proto$2.toJSON         = toISOString$1;
      proto$2.locale         = locale;
      proto$2.localeData     = localeData;

      proto$2.toIsoString = deprecate('toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)', toISOString$1);
      proto$2.lang = lang;

      // Side effect imports

      // FORMATTING

      addFormatToken('X', 0, 0, 'unix');
      addFormatToken('x', 0, 0, 'valueOf');

      // PARSING

      addRegexToken('x', matchSigned);
      addRegexToken('X', matchTimestamp);
      addParseToken('X', function (input, array, config) {
          config._d = new Date(parseFloat(input, 10) * 1000);
      });
      addParseToken('x', function (input, array, config) {
          config._d = new Date(toInt(input));
      });

      // Side effect imports


      hooks.version = '2.24.0';

      setHookCallback(createLocal);

      hooks.fn                    = proto;
      hooks.min                   = min;
      hooks.max                   = max;
      hooks.now                   = now;
      hooks.utc                   = createUTC;
      hooks.unix                  = createUnix;
      hooks.months                = listMonths;
      hooks.isDate                = isDate;
      hooks.locale                = getSetGlobalLocale;
      hooks.invalid               = createInvalid;
      hooks.duration              = createDuration;
      hooks.isMoment              = isMoment;
      hooks.weekdays              = listWeekdays;
      hooks.parseZone             = createInZone;
      hooks.localeData            = getLocale;
      hooks.isDuration            = isDuration;
      hooks.monthsShort           = listMonthsShort;
      hooks.weekdaysMin           = listWeekdaysMin;
      hooks.defineLocale          = defineLocale;
      hooks.updateLocale          = updateLocale;
      hooks.locales               = listLocales;
      hooks.weekdaysShort         = listWeekdaysShort;
      hooks.normalizeUnits        = normalizeUnits;
      hooks.relativeTimeRounding  = getSetRelativeTimeRounding;
      hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
      hooks.calendarFormat        = getCalendarFormat;
      hooks.prototype             = proto;

      // currently HTML5 input type only supports 24-hour formats
      hooks.HTML5_FMT = {
          DATETIME_LOCAL: 'YYYY-MM-DDTHH:mm',             // <input type="datetime-local" />
          DATETIME_LOCAL_SECONDS: 'YYYY-MM-DDTHH:mm:ss',  // <input type="datetime-local" step="1" />
          DATETIME_LOCAL_MS: 'YYYY-MM-DDTHH:mm:ss.SSS',   // <input type="datetime-local" step="0.001" />
          DATE: 'YYYY-MM-DD',                             // <input type="date" />
          TIME: 'HH:mm',                                  // <input type="time" />
          TIME_SECONDS: 'HH:mm:ss',                       // <input type="time" step="1" />
          TIME_MS: 'HH:mm:ss.SSS',                        // <input type="time" step="0.001" />
          WEEK: 'GGGG-[W]WW',                             // <input type="week" />
          MONTH: 'YYYY-MM'                                // <input type="month" />
      };

      return hooks;

  })));
  });

  var Chart$1 = createCommonjsModule(function (module, exports) {
  /*!
   * Chart.js v2.9.3
   * https://www.chartjs.org
   * (c) 2019 Chart.js Contributors
   * Released under the MIT License
   */
  (function (global, factory) {
   module.exports = factory(function() { try { return moment; } catch(e) { } }()) ;
  }(commonjsGlobal, (function (moment) {
  moment = moment && moment.hasOwnProperty('default') ? moment['default'] : moment;

  function createCommonjsModule(fn, module) {
  	return module = { exports: {} }, fn(module, module.exports), module.exports;
  }

  function getCjsExportFromNamespace (n) {
  	return n && n['default'] || n;
  }

  var colorName = {
  	"aliceblue": [240, 248, 255],
  	"antiquewhite": [250, 235, 215],
  	"aqua": [0, 255, 255],
  	"aquamarine": [127, 255, 212],
  	"azure": [240, 255, 255],
  	"beige": [245, 245, 220],
  	"bisque": [255, 228, 196],
  	"black": [0, 0, 0],
  	"blanchedalmond": [255, 235, 205],
  	"blue": [0, 0, 255],
  	"blueviolet": [138, 43, 226],
  	"brown": [165, 42, 42],
  	"burlywood": [222, 184, 135],
  	"cadetblue": [95, 158, 160],
  	"chartreuse": [127, 255, 0],
  	"chocolate": [210, 105, 30],
  	"coral": [255, 127, 80],
  	"cornflowerblue": [100, 149, 237],
  	"cornsilk": [255, 248, 220],
  	"crimson": [220, 20, 60],
  	"cyan": [0, 255, 255],
  	"darkblue": [0, 0, 139],
  	"darkcyan": [0, 139, 139],
  	"darkgoldenrod": [184, 134, 11],
  	"darkgray": [169, 169, 169],
  	"darkgreen": [0, 100, 0],
  	"darkgrey": [169, 169, 169],
  	"darkkhaki": [189, 183, 107],
  	"darkmagenta": [139, 0, 139],
  	"darkolivegreen": [85, 107, 47],
  	"darkorange": [255, 140, 0],
  	"darkorchid": [153, 50, 204],
  	"darkred": [139, 0, 0],
  	"darksalmon": [233, 150, 122],
  	"darkseagreen": [143, 188, 143],
  	"darkslateblue": [72, 61, 139],
  	"darkslategray": [47, 79, 79],
  	"darkslategrey": [47, 79, 79],
  	"darkturquoise": [0, 206, 209],
  	"darkviolet": [148, 0, 211],
  	"deeppink": [255, 20, 147],
  	"deepskyblue": [0, 191, 255],
  	"dimgray": [105, 105, 105],
  	"dimgrey": [105, 105, 105],
  	"dodgerblue": [30, 144, 255],
  	"firebrick": [178, 34, 34],
  	"floralwhite": [255, 250, 240],
  	"forestgreen": [34, 139, 34],
  	"fuchsia": [255, 0, 255],
  	"gainsboro": [220, 220, 220],
  	"ghostwhite": [248, 248, 255],
  	"gold": [255, 215, 0],
  	"goldenrod": [218, 165, 32],
  	"gray": [128, 128, 128],
  	"green": [0, 128, 0],
  	"greenyellow": [173, 255, 47],
  	"grey": [128, 128, 128],
  	"honeydew": [240, 255, 240],
  	"hotpink": [255, 105, 180],
  	"indianred": [205, 92, 92],
  	"indigo": [75, 0, 130],
  	"ivory": [255, 255, 240],
  	"khaki": [240, 230, 140],
  	"lavender": [230, 230, 250],
  	"lavenderblush": [255, 240, 245],
  	"lawngreen": [124, 252, 0],
  	"lemonchiffon": [255, 250, 205],
  	"lightblue": [173, 216, 230],
  	"lightcoral": [240, 128, 128],
  	"lightcyan": [224, 255, 255],
  	"lightgoldenrodyellow": [250, 250, 210],
  	"lightgray": [211, 211, 211],
  	"lightgreen": [144, 238, 144],
  	"lightgrey": [211, 211, 211],
  	"lightpink": [255, 182, 193],
  	"lightsalmon": [255, 160, 122],
  	"lightseagreen": [32, 178, 170],
  	"lightskyblue": [135, 206, 250],
  	"lightslategray": [119, 136, 153],
  	"lightslategrey": [119, 136, 153],
  	"lightsteelblue": [176, 196, 222],
  	"lightyellow": [255, 255, 224],
  	"lime": [0, 255, 0],
  	"limegreen": [50, 205, 50],
  	"linen": [250, 240, 230],
  	"magenta": [255, 0, 255],
  	"maroon": [128, 0, 0],
  	"mediumaquamarine": [102, 205, 170],
  	"mediumblue": [0, 0, 205],
  	"mediumorchid": [186, 85, 211],
  	"mediumpurple": [147, 112, 219],
  	"mediumseagreen": [60, 179, 113],
  	"mediumslateblue": [123, 104, 238],
  	"mediumspringgreen": [0, 250, 154],
  	"mediumturquoise": [72, 209, 204],
  	"mediumvioletred": [199, 21, 133],
  	"midnightblue": [25, 25, 112],
  	"mintcream": [245, 255, 250],
  	"mistyrose": [255, 228, 225],
  	"moccasin": [255, 228, 181],
  	"navajowhite": [255, 222, 173],
  	"navy": [0, 0, 128],
  	"oldlace": [253, 245, 230],
  	"olive": [128, 128, 0],
  	"olivedrab": [107, 142, 35],
  	"orange": [255, 165, 0],
  	"orangered": [255, 69, 0],
  	"orchid": [218, 112, 214],
  	"palegoldenrod": [238, 232, 170],
  	"palegreen": [152, 251, 152],
  	"paleturquoise": [175, 238, 238],
  	"palevioletred": [219, 112, 147],
  	"papayawhip": [255, 239, 213],
  	"peachpuff": [255, 218, 185],
  	"peru": [205, 133, 63],
  	"pink": [255, 192, 203],
  	"plum": [221, 160, 221],
  	"powderblue": [176, 224, 230],
  	"purple": [128, 0, 128],
  	"rebeccapurple": [102, 51, 153],
  	"red": [255, 0, 0],
  	"rosybrown": [188, 143, 143],
  	"royalblue": [65, 105, 225],
  	"saddlebrown": [139, 69, 19],
  	"salmon": [250, 128, 114],
  	"sandybrown": [244, 164, 96],
  	"seagreen": [46, 139, 87],
  	"seashell": [255, 245, 238],
  	"sienna": [160, 82, 45],
  	"silver": [192, 192, 192],
  	"skyblue": [135, 206, 235],
  	"slateblue": [106, 90, 205],
  	"slategray": [112, 128, 144],
  	"slategrey": [112, 128, 144],
  	"snow": [255, 250, 250],
  	"springgreen": [0, 255, 127],
  	"steelblue": [70, 130, 180],
  	"tan": [210, 180, 140],
  	"teal": [0, 128, 128],
  	"thistle": [216, 191, 216],
  	"tomato": [255, 99, 71],
  	"turquoise": [64, 224, 208],
  	"violet": [238, 130, 238],
  	"wheat": [245, 222, 179],
  	"white": [255, 255, 255],
  	"whitesmoke": [245, 245, 245],
  	"yellow": [255, 255, 0],
  	"yellowgreen": [154, 205, 50]
  };

  var conversions = createCommonjsModule(function (module) {
  /* MIT license */


  // NOTE: conversions should only return primitive values (i.e. arrays, or
  //       values that give correct `typeof` results).
  //       do not use box values types (i.e. Number(), String(), etc.)

  var reverseKeywords = {};
  for (var key in colorName) {
  	if (colorName.hasOwnProperty(key)) {
  		reverseKeywords[colorName[key]] = key;
  	}
  }

  var convert = module.exports = {
  	rgb: {channels: 3, labels: 'rgb'},
  	hsl: {channels: 3, labels: 'hsl'},
  	hsv: {channels: 3, labels: 'hsv'},
  	hwb: {channels: 3, labels: 'hwb'},
  	cmyk: {channels: 4, labels: 'cmyk'},
  	xyz: {channels: 3, labels: 'xyz'},
  	lab: {channels: 3, labels: 'lab'},
  	lch: {channels: 3, labels: 'lch'},
  	hex: {channels: 1, labels: ['hex']},
  	keyword: {channels: 1, labels: ['keyword']},
  	ansi16: {channels: 1, labels: ['ansi16']},
  	ansi256: {channels: 1, labels: ['ansi256']},
  	hcg: {channels: 3, labels: ['h', 'c', 'g']},
  	apple: {channels: 3, labels: ['r16', 'g16', 'b16']},
  	gray: {channels: 1, labels: ['gray']}
  };

  // hide .channels and .labels properties
  for (var model in convert) {
  	if (convert.hasOwnProperty(model)) {
  		if (!('channels' in convert[model])) {
  			throw new Error('missing channels property: ' + model);
  		}

  		if (!('labels' in convert[model])) {
  			throw new Error('missing channel labels property: ' + model);
  		}

  		if (convert[model].labels.length !== convert[model].channels) {
  			throw new Error('channel and label counts mismatch: ' + model);
  		}

  		var channels = convert[model].channels;
  		var labels = convert[model].labels;
  		delete convert[model].channels;
  		delete convert[model].labels;
  		Object.defineProperty(convert[model], 'channels', {value: channels});
  		Object.defineProperty(convert[model], 'labels', {value: labels});
  	}
  }

  convert.rgb.hsl = function (rgb) {
  	var r = rgb[0] / 255;
  	var g = rgb[1] / 255;
  	var b = rgb[2] / 255;
  	var min = Math.min(r, g, b);
  	var max = Math.max(r, g, b);
  	var delta = max - min;
  	var h;
  	var s;
  	var l;

  	if (max === min) {
  		h = 0;
  	} else if (r === max) {
  		h = (g - b) / delta;
  	} else if (g === max) {
  		h = 2 + (b - r) / delta;
  	} else if (b === max) {
  		h = 4 + (r - g) / delta;
  	}

  	h = Math.min(h * 60, 360);

  	if (h < 0) {
  		h += 360;
  	}

  	l = (min + max) / 2;

  	if (max === min) {
  		s = 0;
  	} else if (l <= 0.5) {
  		s = delta / (max + min);
  	} else {
  		s = delta / (2 - max - min);
  	}

  	return [h, s * 100, l * 100];
  };

  convert.rgb.hsv = function (rgb) {
  	var rdif;
  	var gdif;
  	var bdif;
  	var h;
  	var s;

  	var r = rgb[0] / 255;
  	var g = rgb[1] / 255;
  	var b = rgb[2] / 255;
  	var v = Math.max(r, g, b);
  	var diff = v - Math.min(r, g, b);
  	var diffc = function (c) {
  		return (v - c) / 6 / diff + 1 / 2;
  	};

  	if (diff === 0) {
  		h = s = 0;
  	} else {
  		s = diff / v;
  		rdif = diffc(r);
  		gdif = diffc(g);
  		bdif = diffc(b);

  		if (r === v) {
  			h = bdif - gdif;
  		} else if (g === v) {
  			h = (1 / 3) + rdif - bdif;
  		} else if (b === v) {
  			h = (2 / 3) + gdif - rdif;
  		}
  		if (h < 0) {
  			h += 1;
  		} else if (h > 1) {
  			h -= 1;
  		}
  	}

  	return [
  		h * 360,
  		s * 100,
  		v * 100
  	];
  };

  convert.rgb.hwb = function (rgb) {
  	var r = rgb[0];
  	var g = rgb[1];
  	var b = rgb[2];
  	var h = convert.rgb.hsl(rgb)[0];
  	var w = 1 / 255 * Math.min(r, Math.min(g, b));

  	b = 1 - 1 / 255 * Math.max(r, Math.max(g, b));

  	return [h, w * 100, b * 100];
  };

  convert.rgb.cmyk = function (rgb) {
  	var r = rgb[0] / 255;
  	var g = rgb[1] / 255;
  	var b = rgb[2] / 255;
  	var c;
  	var m;
  	var y;
  	var k;

  	k = Math.min(1 - r, 1 - g, 1 - b);
  	c = (1 - r - k) / (1 - k) || 0;
  	m = (1 - g - k) / (1 - k) || 0;
  	y = (1 - b - k) / (1 - k) || 0;

  	return [c * 100, m * 100, y * 100, k * 100];
  };

  /**
   * See https://en.m.wikipedia.org/wiki/Euclidean_distance#Squared_Euclidean_distance
   * */
  function comparativeDistance(x, y) {
  	return (
  		Math.pow(x[0] - y[0], 2) +
  		Math.pow(x[1] - y[1], 2) +
  		Math.pow(x[2] - y[2], 2)
  	);
  }

  convert.rgb.keyword = function (rgb) {
  	var reversed = reverseKeywords[rgb];
  	if (reversed) {
  		return reversed;
  	}

  	var currentClosestDistance = Infinity;
  	var currentClosestKeyword;

  	for (var keyword in colorName) {
  		if (colorName.hasOwnProperty(keyword)) {
  			var value = colorName[keyword];

  			// Compute comparative distance
  			var distance = comparativeDistance(rgb, value);

  			// Check if its less, if so set as closest
  			if (distance < currentClosestDistance) {
  				currentClosestDistance = distance;
  				currentClosestKeyword = keyword;
  			}
  		}
  	}

  	return currentClosestKeyword;
  };

  convert.keyword.rgb = function (keyword) {
  	return colorName[keyword];
  };

  convert.rgb.xyz = function (rgb) {
  	var r = rgb[0] / 255;
  	var g = rgb[1] / 255;
  	var b = rgb[2] / 255;

  	// assume sRGB
  	r = r > 0.04045 ? Math.pow(((r + 0.055) / 1.055), 2.4) : (r / 12.92);
  	g = g > 0.04045 ? Math.pow(((g + 0.055) / 1.055), 2.4) : (g / 12.92);
  	b = b > 0.04045 ? Math.pow(((b + 0.055) / 1.055), 2.4) : (b / 12.92);

  	var x = (r * 0.4124) + (g * 0.3576) + (b * 0.1805);
  	var y = (r * 0.2126) + (g * 0.7152) + (b * 0.0722);
  	var z = (r * 0.0193) + (g * 0.1192) + (b * 0.9505);

  	return [x * 100, y * 100, z * 100];
  };

  convert.rgb.lab = function (rgb) {
  	var xyz = convert.rgb.xyz(rgb);
  	var x = xyz[0];
  	var y = xyz[1];
  	var z = xyz[2];
  	var l;
  	var a;
  	var b;

  	x /= 95.047;
  	y /= 100;
  	z /= 108.883;

  	x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
  	y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
  	z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

  	l = (116 * y) - 16;
  	a = 500 * (x - y);
  	b = 200 * (y - z);

  	return [l, a, b];
  };

  convert.hsl.rgb = function (hsl) {
  	var h = hsl[0] / 360;
  	var s = hsl[1] / 100;
  	var l = hsl[2] / 100;
  	var t1;
  	var t2;
  	var t3;
  	var rgb;
  	var val;

  	if (s === 0) {
  		val = l * 255;
  		return [val, val, val];
  	}

  	if (l < 0.5) {
  		t2 = l * (1 + s);
  	} else {
  		t2 = l + s - l * s;
  	}

  	t1 = 2 * l - t2;

  	rgb = [0, 0, 0];
  	for (var i = 0; i < 3; i++) {
  		t3 = h + 1 / 3 * -(i - 1);
  		if (t3 < 0) {
  			t3++;
  		}
  		if (t3 > 1) {
  			t3--;
  		}

  		if (6 * t3 < 1) {
  			val = t1 + (t2 - t1) * 6 * t3;
  		} else if (2 * t3 < 1) {
  			val = t2;
  		} else if (3 * t3 < 2) {
  			val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
  		} else {
  			val = t1;
  		}

  		rgb[i] = val * 255;
  	}

  	return rgb;
  };

  convert.hsl.hsv = function (hsl) {
  	var h = hsl[0];
  	var s = hsl[1] / 100;
  	var l = hsl[2] / 100;
  	var smin = s;
  	var lmin = Math.max(l, 0.01);
  	var sv;
  	var v;

  	l *= 2;
  	s *= (l <= 1) ? l : 2 - l;
  	smin *= lmin <= 1 ? lmin : 2 - lmin;
  	v = (l + s) / 2;
  	sv = l === 0 ? (2 * smin) / (lmin + smin) : (2 * s) / (l + s);

  	return [h, sv * 100, v * 100];
  };

  convert.hsv.rgb = function (hsv) {
  	var h = hsv[0] / 60;
  	var s = hsv[1] / 100;
  	var v = hsv[2] / 100;
  	var hi = Math.floor(h) % 6;

  	var f = h - Math.floor(h);
  	var p = 255 * v * (1 - s);
  	var q = 255 * v * (1 - (s * f));
  	var t = 255 * v * (1 - (s * (1 - f)));
  	v *= 255;

  	switch (hi) {
  		case 0:
  			return [v, t, p];
  		case 1:
  			return [q, v, p];
  		case 2:
  			return [p, v, t];
  		case 3:
  			return [p, q, v];
  		case 4:
  			return [t, p, v];
  		case 5:
  			return [v, p, q];
  	}
  };

  convert.hsv.hsl = function (hsv) {
  	var h = hsv[0];
  	var s = hsv[1] / 100;
  	var v = hsv[2] / 100;
  	var vmin = Math.max(v, 0.01);
  	var lmin;
  	var sl;
  	var l;

  	l = (2 - s) * v;
  	lmin = (2 - s) * vmin;
  	sl = s * vmin;
  	sl /= (lmin <= 1) ? lmin : 2 - lmin;
  	sl = sl || 0;
  	l /= 2;

  	return [h, sl * 100, l * 100];
  };

  // http://dev.w3.org/csswg/css-color/#hwb-to-rgb
  convert.hwb.rgb = function (hwb) {
  	var h = hwb[0] / 360;
  	var wh = hwb[1] / 100;
  	var bl = hwb[2] / 100;
  	var ratio = wh + bl;
  	var i;
  	var v;
  	var f;
  	var n;

  	// wh + bl cant be > 1
  	if (ratio > 1) {
  		wh /= ratio;
  		bl /= ratio;
  	}

  	i = Math.floor(6 * h);
  	v = 1 - bl;
  	f = 6 * h - i;

  	if ((i & 0x01) !== 0) {
  		f = 1 - f;
  	}

  	n = wh + f * (v - wh); // linear interpolation

  	var r;
  	var g;
  	var b;
  	switch (i) {
  		default:
  		case 6:
  		case 0: r = v; g = n; b = wh; break;
  		case 1: r = n; g = v; b = wh; break;
  		case 2: r = wh; g = v; b = n; break;
  		case 3: r = wh; g = n; b = v; break;
  		case 4: r = n; g = wh; b = v; break;
  		case 5: r = v; g = wh; b = n; break;
  	}

  	return [r * 255, g * 255, b * 255];
  };

  convert.cmyk.rgb = function (cmyk) {
  	var c = cmyk[0] / 100;
  	var m = cmyk[1] / 100;
  	var y = cmyk[2] / 100;
  	var k = cmyk[3] / 100;
  	var r;
  	var g;
  	var b;

  	r = 1 - Math.min(1, c * (1 - k) + k);
  	g = 1 - Math.min(1, m * (1 - k) + k);
  	b = 1 - Math.min(1, y * (1 - k) + k);

  	return [r * 255, g * 255, b * 255];
  };

  convert.xyz.rgb = function (xyz) {
  	var x = xyz[0] / 100;
  	var y = xyz[1] / 100;
  	var z = xyz[2] / 100;
  	var r;
  	var g;
  	var b;

  	r = (x * 3.2406) + (y * -1.5372) + (z * -0.4986);
  	g = (x * -0.9689) + (y * 1.8758) + (z * 0.0415);
  	b = (x * 0.0557) + (y * -0.2040) + (z * 1.0570);

  	// assume sRGB
  	r = r > 0.0031308
  		? ((1.055 * Math.pow(r, 1.0 / 2.4)) - 0.055)
  		: r * 12.92;

  	g = g > 0.0031308
  		? ((1.055 * Math.pow(g, 1.0 / 2.4)) - 0.055)
  		: g * 12.92;

  	b = b > 0.0031308
  		? ((1.055 * Math.pow(b, 1.0 / 2.4)) - 0.055)
  		: b * 12.92;

  	r = Math.min(Math.max(0, r), 1);
  	g = Math.min(Math.max(0, g), 1);
  	b = Math.min(Math.max(0, b), 1);

  	return [r * 255, g * 255, b * 255];
  };

  convert.xyz.lab = function (xyz) {
  	var x = xyz[0];
  	var y = xyz[1];
  	var z = xyz[2];
  	var l;
  	var a;
  	var b;

  	x /= 95.047;
  	y /= 100;
  	z /= 108.883;

  	x = x > 0.008856 ? Math.pow(x, 1 / 3) : (7.787 * x) + (16 / 116);
  	y = y > 0.008856 ? Math.pow(y, 1 / 3) : (7.787 * y) + (16 / 116);
  	z = z > 0.008856 ? Math.pow(z, 1 / 3) : (7.787 * z) + (16 / 116);

  	l = (116 * y) - 16;
  	a = 500 * (x - y);
  	b = 200 * (y - z);

  	return [l, a, b];
  };

  convert.lab.xyz = function (lab) {
  	var l = lab[0];
  	var a = lab[1];
  	var b = lab[2];
  	var x;
  	var y;
  	var z;

  	y = (l + 16) / 116;
  	x = a / 500 + y;
  	z = y - b / 200;

  	var y2 = Math.pow(y, 3);
  	var x2 = Math.pow(x, 3);
  	var z2 = Math.pow(z, 3);
  	y = y2 > 0.008856 ? y2 : (y - 16 / 116) / 7.787;
  	x = x2 > 0.008856 ? x2 : (x - 16 / 116) / 7.787;
  	z = z2 > 0.008856 ? z2 : (z - 16 / 116) / 7.787;

  	x *= 95.047;
  	y *= 100;
  	z *= 108.883;

  	return [x, y, z];
  };

  convert.lab.lch = function (lab) {
  	var l = lab[0];
  	var a = lab[1];
  	var b = lab[2];
  	var hr;
  	var h;
  	var c;

  	hr = Math.atan2(b, a);
  	h = hr * 360 / 2 / Math.PI;

  	if (h < 0) {
  		h += 360;
  	}

  	c = Math.sqrt(a * a + b * b);

  	return [l, c, h];
  };

  convert.lch.lab = function (lch) {
  	var l = lch[0];
  	var c = lch[1];
  	var h = lch[2];
  	var a;
  	var b;
  	var hr;

  	hr = h / 360 * 2 * Math.PI;
  	a = c * Math.cos(hr);
  	b = c * Math.sin(hr);

  	return [l, a, b];
  };

  convert.rgb.ansi16 = function (args) {
  	var r = args[0];
  	var g = args[1];
  	var b = args[2];
  	var value = 1 in arguments ? arguments[1] : convert.rgb.hsv(args)[2]; // hsv -> ansi16 optimization

  	value = Math.round(value / 50);

  	if (value === 0) {
  		return 30;
  	}

  	var ansi = 30
  		+ ((Math.round(b / 255) << 2)
  		| (Math.round(g / 255) << 1)
  		| Math.round(r / 255));

  	if (value === 2) {
  		ansi += 60;
  	}

  	return ansi;
  };

  convert.hsv.ansi16 = function (args) {
  	// optimization here; we already know the value and don't need to get
  	// it converted for us.
  	return convert.rgb.ansi16(convert.hsv.rgb(args), args[2]);
  };

  convert.rgb.ansi256 = function (args) {
  	var r = args[0];
  	var g = args[1];
  	var b = args[2];

  	// we use the extended greyscale palette here, with the exception of
  	// black and white. normal palette only has 4 greyscale shades.
  	if (r === g && g === b) {
  		if (r < 8) {
  			return 16;
  		}

  		if (r > 248) {
  			return 231;
  		}

  		return Math.round(((r - 8) / 247) * 24) + 232;
  	}

  	var ansi = 16
  		+ (36 * Math.round(r / 255 * 5))
  		+ (6 * Math.round(g / 255 * 5))
  		+ Math.round(b / 255 * 5);

  	return ansi;
  };

  convert.ansi16.rgb = function (args) {
  	var color = args % 10;

  	// handle greyscale
  	if (color === 0 || color === 7) {
  		if (args > 50) {
  			color += 3.5;
  		}

  		color = color / 10.5 * 255;

  		return [color, color, color];
  	}

  	var mult = (~~(args > 50) + 1) * 0.5;
  	var r = ((color & 1) * mult) * 255;
  	var g = (((color >> 1) & 1) * mult) * 255;
  	var b = (((color >> 2) & 1) * mult) * 255;

  	return [r, g, b];
  };

  convert.ansi256.rgb = function (args) {
  	// handle greyscale
  	if (args >= 232) {
  		var c = (args - 232) * 10 + 8;
  		return [c, c, c];
  	}

  	args -= 16;

  	var rem;
  	var r = Math.floor(args / 36) / 5 * 255;
  	var g = Math.floor((rem = args % 36) / 6) / 5 * 255;
  	var b = (rem % 6) / 5 * 255;

  	return [r, g, b];
  };

  convert.rgb.hex = function (args) {
  	var integer = ((Math.round(args[0]) & 0xFF) << 16)
  		+ ((Math.round(args[1]) & 0xFF) << 8)
  		+ (Math.round(args[2]) & 0xFF);

  	var string = integer.toString(16).toUpperCase();
  	return '000000'.substring(string.length) + string;
  };

  convert.hex.rgb = function (args) {
  	var match = args.toString(16).match(/[a-f0-9]{6}|[a-f0-9]{3}/i);
  	if (!match) {
  		return [0, 0, 0];
  	}

  	var colorString = match[0];

  	if (match[0].length === 3) {
  		colorString = colorString.split('').map(function (char) {
  			return char + char;
  		}).join('');
  	}

  	var integer = parseInt(colorString, 16);
  	var r = (integer >> 16) & 0xFF;
  	var g = (integer >> 8) & 0xFF;
  	var b = integer & 0xFF;

  	return [r, g, b];
  };

  convert.rgb.hcg = function (rgb) {
  	var r = rgb[0] / 255;
  	var g = rgb[1] / 255;
  	var b = rgb[2] / 255;
  	var max = Math.max(Math.max(r, g), b);
  	var min = Math.min(Math.min(r, g), b);
  	var chroma = (max - min);
  	var grayscale;
  	var hue;

  	if (chroma < 1) {
  		grayscale = min / (1 - chroma);
  	} else {
  		grayscale = 0;
  	}

  	if (chroma <= 0) {
  		hue = 0;
  	} else
  	if (max === r) {
  		hue = ((g - b) / chroma) % 6;
  	} else
  	if (max === g) {
  		hue = 2 + (b - r) / chroma;
  	} else {
  		hue = 4 + (r - g) / chroma + 4;
  	}

  	hue /= 6;
  	hue %= 1;

  	return [hue * 360, chroma * 100, grayscale * 100];
  };

  convert.hsl.hcg = function (hsl) {
  	var s = hsl[1] / 100;
  	var l = hsl[2] / 100;
  	var c = 1;
  	var f = 0;

  	if (l < 0.5) {
  		c = 2.0 * s * l;
  	} else {
  		c = 2.0 * s * (1.0 - l);
  	}

  	if (c < 1.0) {
  		f = (l - 0.5 * c) / (1.0 - c);
  	}

  	return [hsl[0], c * 100, f * 100];
  };

  convert.hsv.hcg = function (hsv) {
  	var s = hsv[1] / 100;
  	var v = hsv[2] / 100;

  	var c = s * v;
  	var f = 0;

  	if (c < 1.0) {
  		f = (v - c) / (1 - c);
  	}

  	return [hsv[0], c * 100, f * 100];
  };

  convert.hcg.rgb = function (hcg) {
  	var h = hcg[0] / 360;
  	var c = hcg[1] / 100;
  	var g = hcg[2] / 100;

  	if (c === 0.0) {
  		return [g * 255, g * 255, g * 255];
  	}

  	var pure = [0, 0, 0];
  	var hi = (h % 1) * 6;
  	var v = hi % 1;
  	var w = 1 - v;
  	var mg = 0;

  	switch (Math.floor(hi)) {
  		case 0:
  			pure[0] = 1; pure[1] = v; pure[2] = 0; break;
  		case 1:
  			pure[0] = w; pure[1] = 1; pure[2] = 0; break;
  		case 2:
  			pure[0] = 0; pure[1] = 1; pure[2] = v; break;
  		case 3:
  			pure[0] = 0; pure[1] = w; pure[2] = 1; break;
  		case 4:
  			pure[0] = v; pure[1] = 0; pure[2] = 1; break;
  		default:
  			pure[0] = 1; pure[1] = 0; pure[2] = w;
  	}

  	mg = (1.0 - c) * g;

  	return [
  		(c * pure[0] + mg) * 255,
  		(c * pure[1] + mg) * 255,
  		(c * pure[2] + mg) * 255
  	];
  };

  convert.hcg.hsv = function (hcg) {
  	var c = hcg[1] / 100;
  	var g = hcg[2] / 100;

  	var v = c + g * (1.0 - c);
  	var f = 0;

  	if (v > 0.0) {
  		f = c / v;
  	}

  	return [hcg[0], f * 100, v * 100];
  };

  convert.hcg.hsl = function (hcg) {
  	var c = hcg[1] / 100;
  	var g = hcg[2] / 100;

  	var l = g * (1.0 - c) + 0.5 * c;
  	var s = 0;

  	if (l > 0.0 && l < 0.5) {
  		s = c / (2 * l);
  	} else
  	if (l >= 0.5 && l < 1.0) {
  		s = c / (2 * (1 - l));
  	}

  	return [hcg[0], s * 100, l * 100];
  };

  convert.hcg.hwb = function (hcg) {
  	var c = hcg[1] / 100;
  	var g = hcg[2] / 100;
  	var v = c + g * (1.0 - c);
  	return [hcg[0], (v - c) * 100, (1 - v) * 100];
  };

  convert.hwb.hcg = function (hwb) {
  	var w = hwb[1] / 100;
  	var b = hwb[2] / 100;
  	var v = 1 - b;
  	var c = v - w;
  	var g = 0;

  	if (c < 1) {
  		g = (v - c) / (1 - c);
  	}

  	return [hwb[0], c * 100, g * 100];
  };

  convert.apple.rgb = function (apple) {
  	return [(apple[0] / 65535) * 255, (apple[1] / 65535) * 255, (apple[2] / 65535) * 255];
  };

  convert.rgb.apple = function (rgb) {
  	return [(rgb[0] / 255) * 65535, (rgb[1] / 255) * 65535, (rgb[2] / 255) * 65535];
  };

  convert.gray.rgb = function (args) {
  	return [args[0] / 100 * 255, args[0] / 100 * 255, args[0] / 100 * 255];
  };

  convert.gray.hsl = convert.gray.hsv = function (args) {
  	return [0, 0, args[0]];
  };

  convert.gray.hwb = function (gray) {
  	return [0, 100, gray[0]];
  };

  convert.gray.cmyk = function (gray) {
  	return [0, 0, 0, gray[0]];
  };

  convert.gray.lab = function (gray) {
  	return [gray[0], 0, 0];
  };

  convert.gray.hex = function (gray) {
  	var val = Math.round(gray[0] / 100 * 255) & 0xFF;
  	var integer = (val << 16) + (val << 8) + val;

  	var string = integer.toString(16).toUpperCase();
  	return '000000'.substring(string.length) + string;
  };

  convert.rgb.gray = function (rgb) {
  	var val = (rgb[0] + rgb[1] + rgb[2]) / 3;
  	return [val / 255 * 100];
  };
  });
  var conversions_1 = conversions.rgb;
  var conversions_2 = conversions.hsl;
  var conversions_3 = conversions.hsv;
  var conversions_4 = conversions.hwb;
  var conversions_5 = conversions.cmyk;
  var conversions_6 = conversions.xyz;
  var conversions_7 = conversions.lab;
  var conversions_8 = conversions.lch;
  var conversions_9 = conversions.hex;
  var conversions_10 = conversions.keyword;
  var conversions_11 = conversions.ansi16;
  var conversions_12 = conversions.ansi256;
  var conversions_13 = conversions.hcg;
  var conversions_14 = conversions.apple;
  var conversions_15 = conversions.gray;

  /*
  	this function routes a model to all other models.

  	all functions that are routed have a property `.conversion` attached
  	to the returned synthetic function. This property is an array
  	of strings, each with the steps in between the 'from' and 'to'
  	color models (inclusive).

  	conversions that are not possible simply are not included.
  */

  function buildGraph() {
  	var graph = {};
  	// https://jsperf.com/object-keys-vs-for-in-with-closure/3
  	var models = Object.keys(conversions);

  	for (var len = models.length, i = 0; i < len; i++) {
  		graph[models[i]] = {
  			// http://jsperf.com/1-vs-infinity
  			// micro-opt, but this is simple.
  			distance: -1,
  			parent: null
  		};
  	}

  	return graph;
  }

  // https://en.wikipedia.org/wiki/Breadth-first_search
  function deriveBFS(fromModel) {
  	var graph = buildGraph();
  	var queue = [fromModel]; // unshift -> queue -> pop

  	graph[fromModel].distance = 0;

  	while (queue.length) {
  		var current = queue.pop();
  		var adjacents = Object.keys(conversions[current]);

  		for (var len = adjacents.length, i = 0; i < len; i++) {
  			var adjacent = adjacents[i];
  			var node = graph[adjacent];

  			if (node.distance === -1) {
  				node.distance = graph[current].distance + 1;
  				node.parent = current;
  				queue.unshift(adjacent);
  			}
  		}
  	}

  	return graph;
  }

  function link(from, to) {
  	return function (args) {
  		return to(from(args));
  	};
  }

  function wrapConversion(toModel, graph) {
  	var path = [graph[toModel].parent, toModel];
  	var fn = conversions[graph[toModel].parent][toModel];

  	var cur = graph[toModel].parent;
  	while (graph[cur].parent) {
  		path.unshift(graph[cur].parent);
  		fn = link(conversions[graph[cur].parent][cur], fn);
  		cur = graph[cur].parent;
  	}

  	fn.conversion = path;
  	return fn;
  }

  var route = function (fromModel) {
  	var graph = deriveBFS(fromModel);
  	var conversion = {};

  	var models = Object.keys(graph);
  	for (var len = models.length, i = 0; i < len; i++) {
  		var toModel = models[i];
  		var node = graph[toModel];

  		if (node.parent === null) {
  			// no possible conversion, or this node is the source model.
  			continue;
  		}

  		conversion[toModel] = wrapConversion(toModel, graph);
  	}

  	return conversion;
  };

  var convert = {};

  var models = Object.keys(conversions);

  function wrapRaw(fn) {
  	var wrappedFn = function (args) {
  		if (args === undefined || args === null) {
  			return args;
  		}

  		if (arguments.length > 1) {
  			args = Array.prototype.slice.call(arguments);
  		}

  		return fn(args);
  	};

  	// preserve .conversion property if there is one
  	if ('conversion' in fn) {
  		wrappedFn.conversion = fn.conversion;
  	}

  	return wrappedFn;
  }

  function wrapRounded(fn) {
  	var wrappedFn = function (args) {
  		if (args === undefined || args === null) {
  			return args;
  		}

  		if (arguments.length > 1) {
  			args = Array.prototype.slice.call(arguments);
  		}

  		var result = fn(args);

  		// we're assuming the result is an array here.
  		// see notice in conversions.js; don't use box types
  		// in conversion functions.
  		if (typeof result === 'object') {
  			for (var len = result.length, i = 0; i < len; i++) {
  				result[i] = Math.round(result[i]);
  			}
  		}

  		return result;
  	};

  	// preserve .conversion property if there is one
  	if ('conversion' in fn) {
  		wrappedFn.conversion = fn.conversion;
  	}

  	return wrappedFn;
  }

  models.forEach(function (fromModel) {
  	convert[fromModel] = {};

  	Object.defineProperty(convert[fromModel], 'channels', {value: conversions[fromModel].channels});
  	Object.defineProperty(convert[fromModel], 'labels', {value: conversions[fromModel].labels});

  	var routes = route(fromModel);
  	var routeModels = Object.keys(routes);

  	routeModels.forEach(function (toModel) {
  		var fn = routes[toModel];

  		convert[fromModel][toModel] = wrapRounded(fn);
  		convert[fromModel][toModel].raw = wrapRaw(fn);
  	});
  });

  var colorConvert = convert;

  var colorName$1 = {
  	"aliceblue": [240, 248, 255],
  	"antiquewhite": [250, 235, 215],
  	"aqua": [0, 255, 255],
  	"aquamarine": [127, 255, 212],
  	"azure": [240, 255, 255],
  	"beige": [245, 245, 220],
  	"bisque": [255, 228, 196],
  	"black": [0, 0, 0],
  	"blanchedalmond": [255, 235, 205],
  	"blue": [0, 0, 255],
  	"blueviolet": [138, 43, 226],
  	"brown": [165, 42, 42],
  	"burlywood": [222, 184, 135],
  	"cadetblue": [95, 158, 160],
  	"chartreuse": [127, 255, 0],
  	"chocolate": [210, 105, 30],
  	"coral": [255, 127, 80],
  	"cornflowerblue": [100, 149, 237],
  	"cornsilk": [255, 248, 220],
  	"crimson": [220, 20, 60],
  	"cyan": [0, 255, 255],
  	"darkblue": [0, 0, 139],
  	"darkcyan": [0, 139, 139],
  	"darkgoldenrod": [184, 134, 11],
  	"darkgray": [169, 169, 169],
  	"darkgreen": [0, 100, 0],
  	"darkgrey": [169, 169, 169],
  	"darkkhaki": [189, 183, 107],
  	"darkmagenta": [139, 0, 139],
  	"darkolivegreen": [85, 107, 47],
  	"darkorange": [255, 140, 0],
  	"darkorchid": [153, 50, 204],
  	"darkred": [139, 0, 0],
  	"darksalmon": [233, 150, 122],
  	"darkseagreen": [143, 188, 143],
  	"darkslateblue": [72, 61, 139],
  	"darkslategray": [47, 79, 79],
  	"darkslategrey": [47, 79, 79],
  	"darkturquoise": [0, 206, 209],
  	"darkviolet": [148, 0, 211],
  	"deeppink": [255, 20, 147],
  	"deepskyblue": [0, 191, 255],
  	"dimgray": [105, 105, 105],
  	"dimgrey": [105, 105, 105],
  	"dodgerblue": [30, 144, 255],
  	"firebrick": [178, 34, 34],
  	"floralwhite": [255, 250, 240],
  	"forestgreen": [34, 139, 34],
  	"fuchsia": [255, 0, 255],
  	"gainsboro": [220, 220, 220],
  	"ghostwhite": [248, 248, 255],
  	"gold": [255, 215, 0],
  	"goldenrod": [218, 165, 32],
  	"gray": [128, 128, 128],
  	"green": [0, 128, 0],
  	"greenyellow": [173, 255, 47],
  	"grey": [128, 128, 128],
  	"honeydew": [240, 255, 240],
  	"hotpink": [255, 105, 180],
  	"indianred": [205, 92, 92],
  	"indigo": [75, 0, 130],
  	"ivory": [255, 255, 240],
  	"khaki": [240, 230, 140],
  	"lavender": [230, 230, 250],
  	"lavenderblush": [255, 240, 245],
  	"lawngreen": [124, 252, 0],
  	"lemonchiffon": [255, 250, 205],
  	"lightblue": [173, 216, 230],
  	"lightcoral": [240, 128, 128],
  	"lightcyan": [224, 255, 255],
  	"lightgoldenrodyellow": [250, 250, 210],
  	"lightgray": [211, 211, 211],
  	"lightgreen": [144, 238, 144],
  	"lightgrey": [211, 211, 211],
  	"lightpink": [255, 182, 193],
  	"lightsalmon": [255, 160, 122],
  	"lightseagreen": [32, 178, 170],
  	"lightskyblue": [135, 206, 250],
  	"lightslategray": [119, 136, 153],
  	"lightslategrey": [119, 136, 153],
  	"lightsteelblue": [176, 196, 222],
  	"lightyellow": [255, 255, 224],
  	"lime": [0, 255, 0],
  	"limegreen": [50, 205, 50],
  	"linen": [250, 240, 230],
  	"magenta": [255, 0, 255],
  	"maroon": [128, 0, 0],
  	"mediumaquamarine": [102, 205, 170],
  	"mediumblue": [0, 0, 205],
  	"mediumorchid": [186, 85, 211],
  	"mediumpurple": [147, 112, 219],
  	"mediumseagreen": [60, 179, 113],
  	"mediumslateblue": [123, 104, 238],
  	"mediumspringgreen": [0, 250, 154],
  	"mediumturquoise": [72, 209, 204],
  	"mediumvioletred": [199, 21, 133],
  	"midnightblue": [25, 25, 112],
  	"mintcream": [245, 255, 250],
  	"mistyrose": [255, 228, 225],
  	"moccasin": [255, 228, 181],
  	"navajowhite": [255, 222, 173],
  	"navy": [0, 0, 128],
  	"oldlace": [253, 245, 230],
  	"olive": [128, 128, 0],
  	"olivedrab": [107, 142, 35],
  	"orange": [255, 165, 0],
  	"orangered": [255, 69, 0],
  	"orchid": [218, 112, 214],
  	"palegoldenrod": [238, 232, 170],
  	"palegreen": [152, 251, 152],
  	"paleturquoise": [175, 238, 238],
  	"palevioletred": [219, 112, 147],
  	"papayawhip": [255, 239, 213],
  	"peachpuff": [255, 218, 185],
  	"peru": [205, 133, 63],
  	"pink": [255, 192, 203],
  	"plum": [221, 160, 221],
  	"powderblue": [176, 224, 230],
  	"purple": [128, 0, 128],
  	"rebeccapurple": [102, 51, 153],
  	"red": [255, 0, 0],
  	"rosybrown": [188, 143, 143],
  	"royalblue": [65, 105, 225],
  	"saddlebrown": [139, 69, 19],
  	"salmon": [250, 128, 114],
  	"sandybrown": [244, 164, 96],
  	"seagreen": [46, 139, 87],
  	"seashell": [255, 245, 238],
  	"sienna": [160, 82, 45],
  	"silver": [192, 192, 192],
  	"skyblue": [135, 206, 235],
  	"slateblue": [106, 90, 205],
  	"slategray": [112, 128, 144],
  	"slategrey": [112, 128, 144],
  	"snow": [255, 250, 250],
  	"springgreen": [0, 255, 127],
  	"steelblue": [70, 130, 180],
  	"tan": [210, 180, 140],
  	"teal": [0, 128, 128],
  	"thistle": [216, 191, 216],
  	"tomato": [255, 99, 71],
  	"turquoise": [64, 224, 208],
  	"violet": [238, 130, 238],
  	"wheat": [245, 222, 179],
  	"white": [255, 255, 255],
  	"whitesmoke": [245, 245, 245],
  	"yellow": [255, 255, 0],
  	"yellowgreen": [154, 205, 50]
  };

  /* MIT license */


  var colorString = {
     getRgba: getRgba,
     getHsla: getHsla,
     getRgb: getRgb,
     getHsl: getHsl,
     getHwb: getHwb,
     getAlpha: getAlpha,

     hexString: hexString,
     rgbString: rgbString,
     rgbaString: rgbaString,
     percentString: percentString,
     percentaString: percentaString,
     hslString: hslString,
     hslaString: hslaString,
     hwbString: hwbString,
     keyword: keyword
  };

  function getRgba(string) {
     if (!string) {
        return;
     }
     var abbr =  /^#([a-fA-F0-9]{3,4})$/i,
         hex =  /^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i,
         rgba = /^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i,
         per = /^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i,
         keyword = /(\w+)/;

     var rgb = [0, 0, 0],
         a = 1,
         match = string.match(abbr),
         hexAlpha = "";
     if (match) {
        match = match[1];
        hexAlpha = match[3];
        for (var i = 0; i < rgb.length; i++) {
           rgb[i] = parseInt(match[i] + match[i], 16);
        }
        if (hexAlpha) {
           a = Math.round((parseInt(hexAlpha + hexAlpha, 16) / 255) * 100) / 100;
        }
     }
     else if (match = string.match(hex)) {
        hexAlpha = match[2];
        match = match[1];
        for (var i = 0; i < rgb.length; i++) {
           rgb[i] = parseInt(match.slice(i * 2, i * 2 + 2), 16);
        }
        if (hexAlpha) {
           a = Math.round((parseInt(hexAlpha, 16) / 255) * 100) / 100;
        }
     }
     else if (match = string.match(rgba)) {
        for (var i = 0; i < rgb.length; i++) {
           rgb[i] = parseInt(match[i + 1]);
        }
        a = parseFloat(match[4]);
     }
     else if (match = string.match(per)) {
        for (var i = 0; i < rgb.length; i++) {
           rgb[i] = Math.round(parseFloat(match[i + 1]) * 2.55);
        }
        a = parseFloat(match[4]);
     }
     else if (match = string.match(keyword)) {
        if (match[1] == "transparent") {
           return [0, 0, 0, 0];
        }
        rgb = colorName$1[match[1]];
        if (!rgb) {
           return;
        }
     }

     for (var i = 0; i < rgb.length; i++) {
        rgb[i] = scale(rgb[i], 0, 255);
     }
     if (!a && a != 0) {
        a = 1;
     }
     else {
        a = scale(a, 0, 1);
     }
     rgb[3] = a;
     return rgb;
  }

  function getHsla(string) {
     if (!string) {
        return;
     }
     var hsl = /^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
     var match = string.match(hsl);
     if (match) {
        var alpha = parseFloat(match[4]);
        var h = scale(parseInt(match[1]), 0, 360),
            s = scale(parseFloat(match[2]), 0, 100),
            l = scale(parseFloat(match[3]), 0, 100),
            a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
        return [h, s, l, a];
     }
  }

  function getHwb(string) {
     if (!string) {
        return;
     }
     var hwb = /^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/;
     var match = string.match(hwb);
     if (match) {
      var alpha = parseFloat(match[4]);
        var h = scale(parseInt(match[1]), 0, 360),
            w = scale(parseFloat(match[2]), 0, 100),
            b = scale(parseFloat(match[3]), 0, 100),
            a = scale(isNaN(alpha) ? 1 : alpha, 0, 1);
        return [h, w, b, a];
     }
  }

  function getRgb(string) {
     var rgba = getRgba(string);
     return rgba && rgba.slice(0, 3);
  }

  function getHsl(string) {
    var hsla = getHsla(string);
    return hsla && hsla.slice(0, 3);
  }

  function getAlpha(string) {
     var vals = getRgba(string);
     if (vals) {
        return vals[3];
     }
     else if (vals = getHsla(string)) {
        return vals[3];
     }
     else if (vals = getHwb(string)) {
        return vals[3];
     }
  }

  // generators
  function hexString(rgba, a) {
     var a = (a !== undefined && rgba.length === 3) ? a : rgba[3];
     return "#" + hexDouble(rgba[0]) 
                + hexDouble(rgba[1])
                + hexDouble(rgba[2])
                + (
                   (a >= 0 && a < 1)
                   ? hexDouble(Math.round(a * 255))
                   : ""
                );
  }

  function rgbString(rgba, alpha) {
     if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
        return rgbaString(rgba, alpha);
     }
     return "rgb(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2] + ")";
  }

  function rgbaString(rgba, alpha) {
     if (alpha === undefined) {
        alpha = (rgba[3] !== undefined ? rgba[3] : 1);
     }
     return "rgba(" + rgba[0] + ", " + rgba[1] + ", " + rgba[2]
             + ", " + alpha + ")";
  }

  function percentString(rgba, alpha) {
     if (alpha < 1 || (rgba[3] && rgba[3] < 1)) {
        return percentaString(rgba, alpha);
     }
     var r = Math.round(rgba[0]/255 * 100),
         g = Math.round(rgba[1]/255 * 100),
         b = Math.round(rgba[2]/255 * 100);

     return "rgb(" + r + "%, " + g + "%, " + b + "%)";
  }

  function percentaString(rgba, alpha) {
     var r = Math.round(rgba[0]/255 * 100),
         g = Math.round(rgba[1]/255 * 100),
         b = Math.round(rgba[2]/255 * 100);
     return "rgba(" + r + "%, " + g + "%, " + b + "%, " + (alpha || rgba[3] || 1) + ")";
  }

  function hslString(hsla, alpha) {
     if (alpha < 1 || (hsla[3] && hsla[3] < 1)) {
        return hslaString(hsla, alpha);
     }
     return "hsl(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%)";
  }

  function hslaString(hsla, alpha) {
     if (alpha === undefined) {
        alpha = (hsla[3] !== undefined ? hsla[3] : 1);
     }
     return "hsla(" + hsla[0] + ", " + hsla[1] + "%, " + hsla[2] + "%, "
             + alpha + ")";
  }

  // hwb is a bit different than rgb(a) & hsl(a) since there is no alpha specific syntax
  // (hwb have alpha optional & 1 is default value)
  function hwbString(hwb, alpha) {
     if (alpha === undefined) {
        alpha = (hwb[3] !== undefined ? hwb[3] : 1);
     }
     return "hwb(" + hwb[0] + ", " + hwb[1] + "%, " + hwb[2] + "%"
             + (alpha !== undefined && alpha !== 1 ? ", " + alpha : "") + ")";
  }

  function keyword(rgb) {
    return reverseNames[rgb.slice(0, 3)];
  }

  // helpers
  function scale(num, min, max) {
     return Math.min(Math.max(min, num), max);
  }

  function hexDouble(num) {
    var str = num.toString(16).toUpperCase();
    return (str.length < 2) ? "0" + str : str;
  }


  //create a list of reverse color names
  var reverseNames = {};
  for (var name in colorName$1) {
     reverseNames[colorName$1[name]] = name;
  }

  /* MIT license */



  var Color = function (obj) {
  	if (obj instanceof Color) {
  		return obj;
  	}
  	if (!(this instanceof Color)) {
  		return new Color(obj);
  	}

  	this.valid = false;
  	this.values = {
  		rgb: [0, 0, 0],
  		hsl: [0, 0, 0],
  		hsv: [0, 0, 0],
  		hwb: [0, 0, 0],
  		cmyk: [0, 0, 0, 0],
  		alpha: 1
  	};

  	// parse Color() argument
  	var vals;
  	if (typeof obj === 'string') {
  		vals = colorString.getRgba(obj);
  		if (vals) {
  			this.setValues('rgb', vals);
  		} else if (vals = colorString.getHsla(obj)) {
  			this.setValues('hsl', vals);
  		} else if (vals = colorString.getHwb(obj)) {
  			this.setValues('hwb', vals);
  		}
  	} else if (typeof obj === 'object') {
  		vals = obj;
  		if (vals.r !== undefined || vals.red !== undefined) {
  			this.setValues('rgb', vals);
  		} else if (vals.l !== undefined || vals.lightness !== undefined) {
  			this.setValues('hsl', vals);
  		} else if (vals.v !== undefined || vals.value !== undefined) {
  			this.setValues('hsv', vals);
  		} else if (vals.w !== undefined || vals.whiteness !== undefined) {
  			this.setValues('hwb', vals);
  		} else if (vals.c !== undefined || vals.cyan !== undefined) {
  			this.setValues('cmyk', vals);
  		}
  	}
  };

  Color.prototype = {
  	isValid: function () {
  		return this.valid;
  	},
  	rgb: function () {
  		return this.setSpace('rgb', arguments);
  	},
  	hsl: function () {
  		return this.setSpace('hsl', arguments);
  	},
  	hsv: function () {
  		return this.setSpace('hsv', arguments);
  	},
  	hwb: function () {
  		return this.setSpace('hwb', arguments);
  	},
  	cmyk: function () {
  		return this.setSpace('cmyk', arguments);
  	},

  	rgbArray: function () {
  		return this.values.rgb;
  	},
  	hslArray: function () {
  		return this.values.hsl;
  	},
  	hsvArray: function () {
  		return this.values.hsv;
  	},
  	hwbArray: function () {
  		var values = this.values;
  		if (values.alpha !== 1) {
  			return values.hwb.concat([values.alpha]);
  		}
  		return values.hwb;
  	},
  	cmykArray: function () {
  		return this.values.cmyk;
  	},
  	rgbaArray: function () {
  		var values = this.values;
  		return values.rgb.concat([values.alpha]);
  	},
  	hslaArray: function () {
  		var values = this.values;
  		return values.hsl.concat([values.alpha]);
  	},
  	alpha: function (val) {
  		if (val === undefined) {
  			return this.values.alpha;
  		}
  		this.setValues('alpha', val);
  		return this;
  	},

  	red: function (val) {
  		return this.setChannel('rgb', 0, val);
  	},
  	green: function (val) {
  		return this.setChannel('rgb', 1, val);
  	},
  	blue: function (val) {
  		return this.setChannel('rgb', 2, val);
  	},
  	hue: function (val) {
  		if (val) {
  			val %= 360;
  			val = val < 0 ? 360 + val : val;
  		}
  		return this.setChannel('hsl', 0, val);
  	},
  	saturation: function (val) {
  		return this.setChannel('hsl', 1, val);
  	},
  	lightness: function (val) {
  		return this.setChannel('hsl', 2, val);
  	},
  	saturationv: function (val) {
  		return this.setChannel('hsv', 1, val);
  	},
  	whiteness: function (val) {
  		return this.setChannel('hwb', 1, val);
  	},
  	blackness: function (val) {
  		return this.setChannel('hwb', 2, val);
  	},
  	value: function (val) {
  		return this.setChannel('hsv', 2, val);
  	},
  	cyan: function (val) {
  		return this.setChannel('cmyk', 0, val);
  	},
  	magenta: function (val) {
  		return this.setChannel('cmyk', 1, val);
  	},
  	yellow: function (val) {
  		return this.setChannel('cmyk', 2, val);
  	},
  	black: function (val) {
  		return this.setChannel('cmyk', 3, val);
  	},

  	hexString: function () {
  		return colorString.hexString(this.values.rgb);
  	},
  	rgbString: function () {
  		return colorString.rgbString(this.values.rgb, this.values.alpha);
  	},
  	rgbaString: function () {
  		return colorString.rgbaString(this.values.rgb, this.values.alpha);
  	},
  	percentString: function () {
  		return colorString.percentString(this.values.rgb, this.values.alpha);
  	},
  	hslString: function () {
  		return colorString.hslString(this.values.hsl, this.values.alpha);
  	},
  	hslaString: function () {
  		return colorString.hslaString(this.values.hsl, this.values.alpha);
  	},
  	hwbString: function () {
  		return colorString.hwbString(this.values.hwb, this.values.alpha);
  	},
  	keyword: function () {
  		return colorString.keyword(this.values.rgb, this.values.alpha);
  	},

  	rgbNumber: function () {
  		var rgb = this.values.rgb;
  		return (rgb[0] << 16) | (rgb[1] << 8) | rgb[2];
  	},

  	luminosity: function () {
  		// http://www.w3.org/TR/WCAG20/#relativeluminancedef
  		var rgb = this.values.rgb;
  		var lum = [];
  		for (var i = 0; i < rgb.length; i++) {
  			var chan = rgb[i] / 255;
  			lum[i] = (chan <= 0.03928) ? chan / 12.92 : Math.pow(((chan + 0.055) / 1.055), 2.4);
  		}
  		return 0.2126 * lum[0] + 0.7152 * lum[1] + 0.0722 * lum[2];
  	},

  	contrast: function (color2) {
  		// http://www.w3.org/TR/WCAG20/#contrast-ratiodef
  		var lum1 = this.luminosity();
  		var lum2 = color2.luminosity();
  		if (lum1 > lum2) {
  			return (lum1 + 0.05) / (lum2 + 0.05);
  		}
  		return (lum2 + 0.05) / (lum1 + 0.05);
  	},

  	level: function (color2) {
  		var contrastRatio = this.contrast(color2);
  		if (contrastRatio >= 7.1) {
  			return 'AAA';
  		}

  		return (contrastRatio >= 4.5) ? 'AA' : '';
  	},

  	dark: function () {
  		// YIQ equation from http://24ways.org/2010/calculating-color-contrast
  		var rgb = this.values.rgb;
  		var yiq = (rgb[0] * 299 + rgb[1] * 587 + rgb[2] * 114) / 1000;
  		return yiq < 128;
  	},

  	light: function () {
  		return !this.dark();
  	},

  	negate: function () {
  		var rgb = [];
  		for (var i = 0; i < 3; i++) {
  			rgb[i] = 255 - this.values.rgb[i];
  		}
  		this.setValues('rgb', rgb);
  		return this;
  	},

  	lighten: function (ratio) {
  		var hsl = this.values.hsl;
  		hsl[2] += hsl[2] * ratio;
  		this.setValues('hsl', hsl);
  		return this;
  	},

  	darken: function (ratio) {
  		var hsl = this.values.hsl;
  		hsl[2] -= hsl[2] * ratio;
  		this.setValues('hsl', hsl);
  		return this;
  	},

  	saturate: function (ratio) {
  		var hsl = this.values.hsl;
  		hsl[1] += hsl[1] * ratio;
  		this.setValues('hsl', hsl);
  		return this;
  	},

  	desaturate: function (ratio) {
  		var hsl = this.values.hsl;
  		hsl[1] -= hsl[1] * ratio;
  		this.setValues('hsl', hsl);
  		return this;
  	},

  	whiten: function (ratio) {
  		var hwb = this.values.hwb;
  		hwb[1] += hwb[1] * ratio;
  		this.setValues('hwb', hwb);
  		return this;
  	},

  	blacken: function (ratio) {
  		var hwb = this.values.hwb;
  		hwb[2] += hwb[2] * ratio;
  		this.setValues('hwb', hwb);
  		return this;
  	},

  	greyscale: function () {
  		var rgb = this.values.rgb;
  		// http://en.wikipedia.org/wiki/Grayscale#Converting_color_to_grayscale
  		var val = rgb[0] * 0.3 + rgb[1] * 0.59 + rgb[2] * 0.11;
  		this.setValues('rgb', [val, val, val]);
  		return this;
  	},

  	clearer: function (ratio) {
  		var alpha = this.values.alpha;
  		this.setValues('alpha', alpha - (alpha * ratio));
  		return this;
  	},

  	opaquer: function (ratio) {
  		var alpha = this.values.alpha;
  		this.setValues('alpha', alpha + (alpha * ratio));
  		return this;
  	},

  	rotate: function (degrees) {
  		var hsl = this.values.hsl;
  		var hue = (hsl[0] + degrees) % 360;
  		hsl[0] = hue < 0 ? 360 + hue : hue;
  		this.setValues('hsl', hsl);
  		return this;
  	},

  	/**
  	 * Ported from sass implementation in C
  	 * https://github.com/sass/libsass/blob/0e6b4a2850092356aa3ece07c6b249f0221caced/functions.cpp#L209
  	 */
  	mix: function (mixinColor, weight) {
  		var color1 = this;
  		var color2 = mixinColor;
  		var p = weight === undefined ? 0.5 : weight;

  		var w = 2 * p - 1;
  		var a = color1.alpha() - color2.alpha();

  		var w1 = (((w * a === -1) ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
  		var w2 = 1 - w1;

  		return this
  			.rgb(
  				w1 * color1.red() + w2 * color2.red(),
  				w1 * color1.green() + w2 * color2.green(),
  				w1 * color1.blue() + w2 * color2.blue()
  			)
  			.alpha(color1.alpha() * p + color2.alpha() * (1 - p));
  	},

  	toJSON: function () {
  		return this.rgb();
  	},

  	clone: function () {
  		// NOTE(SB): using node-clone creates a dependency to Buffer when using browserify,
  		// making the final build way to big to embed in Chart.js. So let's do it manually,
  		// assuming that values to clone are 1 dimension arrays containing only numbers,
  		// except 'alpha' which is a number.
  		var result = new Color();
  		var source = this.values;
  		var target = result.values;
  		var value, type;

  		for (var prop in source) {
  			if (source.hasOwnProperty(prop)) {
  				value = source[prop];
  				type = ({}).toString.call(value);
  				if (type === '[object Array]') {
  					target[prop] = value.slice(0);
  				} else if (type === '[object Number]') {
  					target[prop] = value;
  				} else {
  					console.error('unexpected color value:', value);
  				}
  			}
  		}

  		return result;
  	}
  };

  Color.prototype.spaces = {
  	rgb: ['red', 'green', 'blue'],
  	hsl: ['hue', 'saturation', 'lightness'],
  	hsv: ['hue', 'saturation', 'value'],
  	hwb: ['hue', 'whiteness', 'blackness'],
  	cmyk: ['cyan', 'magenta', 'yellow', 'black']
  };

  Color.prototype.maxes = {
  	rgb: [255, 255, 255],
  	hsl: [360, 100, 100],
  	hsv: [360, 100, 100],
  	hwb: [360, 100, 100],
  	cmyk: [100, 100, 100, 100]
  };

  Color.prototype.getValues = function (space) {
  	var values = this.values;
  	var vals = {};

  	for (var i = 0; i < space.length; i++) {
  		vals[space.charAt(i)] = values[space][i];
  	}

  	if (values.alpha !== 1) {
  		vals.a = values.alpha;
  	}

  	// {r: 255, g: 255, b: 255, a: 0.4}
  	return vals;
  };

  Color.prototype.setValues = function (space, vals) {
  	var values = this.values;
  	var spaces = this.spaces;
  	var maxes = this.maxes;
  	var alpha = 1;
  	var i;

  	this.valid = true;

  	if (space === 'alpha') {
  		alpha = vals;
  	} else if (vals.length) {
  		// [10, 10, 10]
  		values[space] = vals.slice(0, space.length);
  		alpha = vals[space.length];
  	} else if (vals[space.charAt(0)] !== undefined) {
  		// {r: 10, g: 10, b: 10}
  		for (i = 0; i < space.length; i++) {
  			values[space][i] = vals[space.charAt(i)];
  		}

  		alpha = vals.a;
  	} else if (vals[spaces[space][0]] !== undefined) {
  		// {red: 10, green: 10, blue: 10}
  		var chans = spaces[space];

  		for (i = 0; i < space.length; i++) {
  			values[space][i] = vals[chans[i]];
  		}

  		alpha = vals.alpha;
  	}

  	values.alpha = Math.max(0, Math.min(1, (alpha === undefined ? values.alpha : alpha)));

  	if (space === 'alpha') {
  		return false;
  	}

  	var capped;

  	// cap values of the space prior converting all values
  	for (i = 0; i < space.length; i++) {
  		capped = Math.max(0, Math.min(maxes[space][i], values[space][i]));
  		values[space][i] = Math.round(capped);
  	}

  	// convert to all the other color spaces
  	for (var sname in spaces) {
  		if (sname !== space) {
  			values[sname] = colorConvert[space][sname](values[space]);
  		}
  	}

  	return true;
  };

  Color.prototype.setSpace = function (space, args) {
  	var vals = args[0];

  	if (vals === undefined) {
  		// color.rgb()
  		return this.getValues(space);
  	}

  	// color.rgb(10, 10, 10)
  	if (typeof vals === 'number') {
  		vals = Array.prototype.slice.call(args);
  	}

  	this.setValues(space, vals);
  	return this;
  };

  Color.prototype.setChannel = function (space, index, val) {
  	var svalues = this.values[space];
  	if (val === undefined) {
  		// color.red()
  		return svalues[index];
  	} else if (val === svalues[index]) {
  		// color.red(color.red())
  		return this;
  	}

  	// color.red(100)
  	svalues[index] = val;
  	this.setValues(space, svalues);

  	return this;
  };

  if (typeof window !== 'undefined') {
  	window.Color = Color;
  }

  var chartjsColor = Color;

  /**
   * @namespace Chart.helpers
   */
  var helpers = {
  	/**
  	 * An empty function that can be used, for example, for optional callback.
  	 */
  	noop: function() {},

  	/**
  	 * Returns a unique id, sequentially generated from a global variable.
  	 * @returns {number}
  	 * @function
  	 */
  	uid: (function() {
  		var id = 0;
  		return function() {
  			return id++;
  		};
  	}()),

  	/**
  	 * Returns true if `value` is neither null nor undefined, else returns false.
  	 * @param {*} value - The value to test.
  	 * @returns {boolean}
  	 * @since 2.7.0
  	 */
  	isNullOrUndef: function(value) {
  		return value === null || typeof value === 'undefined';
  	},

  	/**
  	 * Returns true if `value` is an array (including typed arrays), else returns false.
  	 * @param {*} value - The value to test.
  	 * @returns {boolean}
  	 * @function
  	 */
  	isArray: function(value) {
  		if (Array.isArray && Array.isArray(value)) {
  			return true;
  		}
  		var type = Object.prototype.toString.call(value);
  		if (type.substr(0, 7) === '[object' && type.substr(-6) === 'Array]') {
  			return true;
  		}
  		return false;
  	},

  	/**
  	 * Returns true if `value` is an object (excluding null), else returns false.
  	 * @param {*} value - The value to test.
  	 * @returns {boolean}
  	 * @since 2.7.0
  	 */
  	isObject: function(value) {
  		return value !== null && Object.prototype.toString.call(value) === '[object Object]';
  	},

  	/**
  	 * Returns true if `value` is a finite number, else returns false
  	 * @param {*} value  - The value to test.
  	 * @returns {boolean}
  	 */
  	isFinite: function(value) {
  		return (typeof value === 'number' || value instanceof Number) && isFinite(value);
  	},

  	/**
  	 * Returns `value` if defined, else returns `defaultValue`.
  	 * @param {*} value - The value to return if defined.
  	 * @param {*} defaultValue - The value to return if `value` is undefined.
  	 * @returns {*}
  	 */
  	valueOrDefault: function(value, defaultValue) {
  		return typeof value === 'undefined' ? defaultValue : value;
  	},

  	/**
  	 * Returns value at the given `index` in array if defined, else returns `defaultValue`.
  	 * @param {Array} value - The array to lookup for value at `index`.
  	 * @param {number} index - The index in `value` to lookup for value.
  	 * @param {*} defaultValue - The value to return if `value[index]` is undefined.
  	 * @returns {*}
  	 */
  	valueAtIndexOrDefault: function(value, index, defaultValue) {
  		return helpers.valueOrDefault(helpers.isArray(value) ? value[index] : value, defaultValue);
  	},

  	/**
  	 * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the
  	 * value returned by `fn`. If `fn` is not a function, this method returns undefined.
  	 * @param {function} fn - The function to call.
  	 * @param {Array|undefined|null} args - The arguments with which `fn` should be called.
  	 * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.
  	 * @returns {*}
  	 */
  	callback: function(fn, args, thisArg) {
  		if (fn && typeof fn.call === 'function') {
  			return fn.apply(thisArg, args);
  		}
  	},

  	/**
  	 * Note(SB) for performance sake, this method should only be used when loopable type
  	 * is unknown or in none intensive code (not called often and small loopable). Else
  	 * it's preferable to use a regular for() loop and save extra function calls.
  	 * @param {object|Array} loopable - The object or array to be iterated.
  	 * @param {function} fn - The function to call for each item.
  	 * @param {object} [thisArg] - The value of `this` provided for the call to `fn`.
  	 * @param {boolean} [reverse] - If true, iterates backward on the loopable.
  	 */
  	each: function(loopable, fn, thisArg, reverse) {
  		var i, len, keys;
  		if (helpers.isArray(loopable)) {
  			len = loopable.length;
  			if (reverse) {
  				for (i = len - 1; i >= 0; i--) {
  					fn.call(thisArg, loopable[i], i);
  				}
  			} else {
  				for (i = 0; i < len; i++) {
  					fn.call(thisArg, loopable[i], i);
  				}
  			}
  		} else if (helpers.isObject(loopable)) {
  			keys = Object.keys(loopable);
  			len = keys.length;
  			for (i = 0; i < len; i++) {
  				fn.call(thisArg, loopable[keys[i]], keys[i]);
  			}
  		}
  	},

  	/**
  	 * Returns true if the `a0` and `a1` arrays have the same content, else returns false.
  	 * @see https://stackoverflow.com/a/14853974
  	 * @param {Array} a0 - The array to compare
  	 * @param {Array} a1 - The array to compare
  	 * @returns {boolean}
  	 */
  	arrayEquals: function(a0, a1) {
  		var i, ilen, v0, v1;

  		if (!a0 || !a1 || a0.length !== a1.length) {
  			return false;
  		}

  		for (i = 0, ilen = a0.length; i < ilen; ++i) {
  			v0 = a0[i];
  			v1 = a1[i];

  			if (v0 instanceof Array && v1 instanceof Array) {
  				if (!helpers.arrayEquals(v0, v1)) {
  					return false;
  				}
  			} else if (v0 !== v1) {
  				// NOTE: two different object instances will never be equal: {x:20} != {x:20}
  				return false;
  			}
  		}

  		return true;
  	},

  	/**
  	 * Returns a deep copy of `source` without keeping references on objects and arrays.
  	 * @param {*} source - The value to clone.
  	 * @returns {*}
  	 */
  	clone: function(source) {
  		if (helpers.isArray(source)) {
  			return source.map(helpers.clone);
  		}

  		if (helpers.isObject(source)) {
  			var target = {};
  			var keys = Object.keys(source);
  			var klen = keys.length;
  			var k = 0;

  			for (; k < klen; ++k) {
  				target[keys[k]] = helpers.clone(source[keys[k]]);
  			}

  			return target;
  		}

  		return source;
  	},

  	/**
  	 * The default merger when Chart.helpers.merge is called without merger option.
  	 * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.
  	 * @private
  	 */
  	_merger: function(key, target, source, options) {
  		var tval = target[key];
  		var sval = source[key];

  		if (helpers.isObject(tval) && helpers.isObject(sval)) {
  			helpers.merge(tval, sval, options);
  		} else {
  			target[key] = helpers.clone(sval);
  		}
  	},

  	/**
  	 * Merges source[key] in target[key] only if target[key] is undefined.
  	 * @private
  	 */
  	_mergerIf: function(key, target, source) {
  		var tval = target[key];
  		var sval = source[key];

  		if (helpers.isObject(tval) && helpers.isObject(sval)) {
  			helpers.mergeIf(tval, sval);
  		} else if (!target.hasOwnProperty(key)) {
  			target[key] = helpers.clone(sval);
  		}
  	},

  	/**
  	 * Recursively deep copies `source` properties into `target` with the given `options`.
  	 * IMPORTANT: `target` is not cloned and will be updated with `source` properties.
  	 * @param {object} target - The target object in which all sources are merged into.
  	 * @param {object|object[]} source - Object(s) to merge into `target`.
  	 * @param {object} [options] - Merging options:
  	 * @param {function} [options.merger] - The merge method (key, target, source, options)
  	 * @returns {object} The `target` object.
  	 */
  	merge: function(target, source, options) {
  		var sources = helpers.isArray(source) ? source : [source];
  		var ilen = sources.length;
  		var merge, i, keys, klen, k;

  		if (!helpers.isObject(target)) {
  			return target;
  		}

  		options = options || {};
  		merge = options.merger || helpers._merger;

  		for (i = 0; i < ilen; ++i) {
  			source = sources[i];
  			if (!helpers.isObject(source)) {
  				continue;
  			}

  			keys = Object.keys(source);
  			for (k = 0, klen = keys.length; k < klen; ++k) {
  				merge(keys[k], target, source, options);
  			}
  		}

  		return target;
  	},

  	/**
  	 * Recursively deep copies `source` properties into `target` *only* if not defined in target.
  	 * IMPORTANT: `target` is not cloned and will be updated with `source` properties.
  	 * @param {object} target - The target object in which all sources are merged into.
  	 * @param {object|object[]} source - Object(s) to merge into `target`.
  	 * @returns {object} The `target` object.
  	 */
  	mergeIf: function(target, source) {
  		return helpers.merge(target, source, {merger: helpers._mergerIf});
  	},

  	/**
  	 * Applies the contents of two or more objects together into the first object.
  	 * @param {object} target - The target object in which all objects are merged into.
  	 * @param {object} arg1 - Object containing additional properties to merge in target.
  	 * @param {object} argN - Additional objects containing properties to merge in target.
  	 * @returns {object} The `target` object.
  	 */
  	extend: Object.assign || function(target) {
  		return helpers.merge(target, [].slice.call(arguments, 1), {
  			merger: function(key, dst, src) {
  				dst[key] = src[key];
  			}
  		});
  	},

  	/**
  	 * Basic javascript inheritance based on the model created in Backbone.js
  	 */
  	inherits: function(extensions) {
  		var me = this;
  		var ChartElement = (extensions && extensions.hasOwnProperty('constructor')) ? extensions.constructor : function() {
  			return me.apply(this, arguments);
  		};

  		var Surrogate = function() {
  			this.constructor = ChartElement;
  		};

  		Surrogate.prototype = me.prototype;
  		ChartElement.prototype = new Surrogate();
  		ChartElement.extend = helpers.inherits;

  		if (extensions) {
  			helpers.extend(ChartElement.prototype, extensions);
  		}

  		ChartElement.__super__ = me.prototype;
  		return ChartElement;
  	},

  	_deprecated: function(scope, value, previous, current) {
  		if (value !== undefined) {
  			console.warn(scope + ': "' + previous +
  				'" is deprecated. Please use "' + current + '" instead');
  		}
  	}
  };

  var helpers_core = helpers;

  // DEPRECATIONS

  /**
   * Provided for backward compatibility, use Chart.helpers.callback instead.
   * @function Chart.helpers.callCallback
   * @deprecated since version 2.6.0
   * @todo remove at version 3
   * @private
   */
  helpers.callCallback = helpers.callback;

  /**
   * Provided for backward compatibility, use Array.prototype.indexOf instead.
   * Array.prototype.indexOf compatibility: Chrome, Opera, Safari, FF1.5+, IE9+
   * @function Chart.helpers.indexOf
   * @deprecated since version 2.7.0
   * @todo remove at version 3
   * @private
   */
  helpers.indexOf = function(array, item, fromIndex) {
  	return Array.prototype.indexOf.call(array, item, fromIndex);
  };

  /**
   * Provided for backward compatibility, use Chart.helpers.valueOrDefault instead.
   * @function Chart.helpers.getValueOrDefault
   * @deprecated since version 2.7.0
   * @todo remove at version 3
   * @private
   */
  helpers.getValueOrDefault = helpers.valueOrDefault;

  /**
   * Provided for backward compatibility, use Chart.helpers.valueAtIndexOrDefault instead.
   * @function Chart.helpers.getValueAtIndexOrDefault
   * @deprecated since version 2.7.0
   * @todo remove at version 3
   * @private
   */
  helpers.getValueAtIndexOrDefault = helpers.valueAtIndexOrDefault;

  /**
   * Easing functions adapted from Robert Penner's easing equations.
   * @namespace Chart.helpers.easingEffects
   * @see http://www.robertpenner.com/easing/
   */
  var effects = {
  	linear: function(t) {
  		return t;
  	},

  	easeInQuad: function(t) {
  		return t * t;
  	},

  	easeOutQuad: function(t) {
  		return -t * (t - 2);
  	},

  	easeInOutQuad: function(t) {
  		if ((t /= 0.5) < 1) {
  			return 0.5 * t * t;
  		}
  		return -0.5 * ((--t) * (t - 2) - 1);
  	},

  	easeInCubic: function(t) {
  		return t * t * t;
  	},

  	easeOutCubic: function(t) {
  		return (t = t - 1) * t * t + 1;
  	},

  	easeInOutCubic: function(t) {
  		if ((t /= 0.5) < 1) {
  			return 0.5 * t * t * t;
  		}
  		return 0.5 * ((t -= 2) * t * t + 2);
  	},

  	easeInQuart: function(t) {
  		return t * t * t * t;
  	},

  	easeOutQuart: function(t) {
  		return -((t = t - 1) * t * t * t - 1);
  	},

  	easeInOutQuart: function(t) {
  		if ((t /= 0.5) < 1) {
  			return 0.5 * t * t * t * t;
  		}
  		return -0.5 * ((t -= 2) * t * t * t - 2);
  	},

  	easeInQuint: function(t) {
  		return t * t * t * t * t;
  	},

  	easeOutQuint: function(t) {
  		return (t = t - 1) * t * t * t * t + 1;
  	},

  	easeInOutQuint: function(t) {
  		if ((t /= 0.5) < 1) {
  			return 0.5 * t * t * t * t * t;
  		}
  		return 0.5 * ((t -= 2) * t * t * t * t + 2);
  	},

  	easeInSine: function(t) {
  		return -Math.cos(t * (Math.PI / 2)) + 1;
  	},

  	easeOutSine: function(t) {
  		return Math.sin(t * (Math.PI / 2));
  	},

  	easeInOutSine: function(t) {
  		return -0.5 * (Math.cos(Math.PI * t) - 1);
  	},

  	easeInExpo: function(t) {
  		return (t === 0) ? 0 : Math.pow(2, 10 * (t - 1));
  	},

  	easeOutExpo: function(t) {
  		return (t === 1) ? 1 : -Math.pow(2, -10 * t) + 1;
  	},

  	easeInOutExpo: function(t) {
  		if (t === 0) {
  			return 0;
  		}
  		if (t === 1) {
  			return 1;
  		}
  		if ((t /= 0.5) < 1) {
  			return 0.5 * Math.pow(2, 10 * (t - 1));
  		}
  		return 0.5 * (-Math.pow(2, -10 * --t) + 2);
  	},

  	easeInCirc: function(t) {
  		if (t >= 1) {
  			return t;
  		}
  		return -(Math.sqrt(1 - t * t) - 1);
  	},

  	easeOutCirc: function(t) {
  		return Math.sqrt(1 - (t = t - 1) * t);
  	},

  	easeInOutCirc: function(t) {
  		if ((t /= 0.5) < 1) {
  			return -0.5 * (Math.sqrt(1 - t * t) - 1);
  		}
  		return 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1);
  	},

  	easeInElastic: function(t) {
  		var s = 1.70158;
  		var p = 0;
  		var a = 1;
  		if (t === 0) {
  			return 0;
  		}
  		if (t === 1) {
  			return 1;
  		}
  		if (!p) {
  			p = 0.3;
  		}
  		if (a < 1) {
  			a = 1;
  			s = p / 4;
  		} else {
  			s = p / (2 * Math.PI) * Math.asin(1 / a);
  		}
  		return -(a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
  	},

  	easeOutElastic: function(t) {
  		var s = 1.70158;
  		var p = 0;
  		var a = 1;
  		if (t === 0) {
  			return 0;
  		}
  		if (t === 1) {
  			return 1;
  		}
  		if (!p) {
  			p = 0.3;
  		}
  		if (a < 1) {
  			a = 1;
  			s = p / 4;
  		} else {
  			s = p / (2 * Math.PI) * Math.asin(1 / a);
  		}
  		return a * Math.pow(2, -10 * t) * Math.sin((t - s) * (2 * Math.PI) / p) + 1;
  	},

  	easeInOutElastic: function(t) {
  		var s = 1.70158;
  		var p = 0;
  		var a = 1;
  		if (t === 0) {
  			return 0;
  		}
  		if ((t /= 0.5) === 2) {
  			return 1;
  		}
  		if (!p) {
  			p = 0.45;
  		}
  		if (a < 1) {
  			a = 1;
  			s = p / 4;
  		} else {
  			s = p / (2 * Math.PI) * Math.asin(1 / a);
  		}
  		if (t < 1) {
  			return -0.5 * (a * Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p));
  		}
  		return a * Math.pow(2, -10 * (t -= 1)) * Math.sin((t - s) * (2 * Math.PI) / p) * 0.5 + 1;
  	},
  	easeInBack: function(t) {
  		var s = 1.70158;
  		return t * t * ((s + 1) * t - s);
  	},

  	easeOutBack: function(t) {
  		var s = 1.70158;
  		return (t = t - 1) * t * ((s + 1) * t + s) + 1;
  	},

  	easeInOutBack: function(t) {
  		var s = 1.70158;
  		if ((t /= 0.5) < 1) {
  			return 0.5 * (t * t * (((s *= (1.525)) + 1) * t - s));
  		}
  		return 0.5 * ((t -= 2) * t * (((s *= (1.525)) + 1) * t + s) + 2);
  	},

  	easeInBounce: function(t) {
  		return 1 - effects.easeOutBounce(1 - t);
  	},

  	easeOutBounce: function(t) {
  		if (t < (1 / 2.75)) {
  			return 7.5625 * t * t;
  		}
  		if (t < (2 / 2.75)) {
  			return 7.5625 * (t -= (1.5 / 2.75)) * t + 0.75;
  		}
  		if (t < (2.5 / 2.75)) {
  			return 7.5625 * (t -= (2.25 / 2.75)) * t + 0.9375;
  		}
  		return 7.5625 * (t -= (2.625 / 2.75)) * t + 0.984375;
  	},

  	easeInOutBounce: function(t) {
  		if (t < 0.5) {
  			return effects.easeInBounce(t * 2) * 0.5;
  		}
  		return effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5;
  	}
  };

  var helpers_easing = {
  	effects: effects
  };

  // DEPRECATIONS

  /**
   * Provided for backward compatibility, use Chart.helpers.easing.effects instead.
   * @function Chart.helpers.easingEffects
   * @deprecated since version 2.7.0
   * @todo remove at version 3
   * @private
   */
  helpers_core.easingEffects = effects;

  var PI = Math.PI;
  var RAD_PER_DEG = PI / 180;
  var DOUBLE_PI = PI * 2;
  var HALF_PI = PI / 2;
  var QUARTER_PI = PI / 4;
  var TWO_THIRDS_PI = PI * 2 / 3;

  /**
   * @namespace Chart.helpers.canvas
   */
  var exports$1 = {
  	/**
  	 * Clears the entire canvas associated to the given `chart`.
  	 * @param {Chart} chart - The chart for which to clear the canvas.
  	 */
  	clear: function(chart) {
  		chart.ctx.clearRect(0, 0, chart.width, chart.height);
  	},

  	/**
  	 * Creates a "path" for a rectangle with rounded corners at position (x, y) with a
  	 * given size (width, height) and the same `radius` for all corners.
  	 * @param {CanvasRenderingContext2D} ctx - The canvas 2D Context.
  	 * @param {number} x - The x axis of the coordinate for the rectangle starting point.
  	 * @param {number} y - The y axis of the coordinate for the rectangle starting point.
  	 * @param {number} width - The rectangle's width.
  	 * @param {number} height - The rectangle's height.
  	 * @param {number} radius - The rounded amount (in pixels) for the four corners.
  	 * @todo handle `radius` as top-left, top-right, bottom-right, bottom-left array/object?
  	 */
  	roundedRect: function(ctx, x, y, width, height, radius) {
  		if (radius) {
  			var r = Math.min(radius, height / 2, width / 2);
  			var left = x + r;
  			var top = y + r;
  			var right = x + width - r;
  			var bottom = y + height - r;

  			ctx.moveTo(x, top);
  			if (left < right && top < bottom) {
  				ctx.arc(left, top, r, -PI, -HALF_PI);
  				ctx.arc(right, top, r, -HALF_PI, 0);
  				ctx.arc(right, bottom, r, 0, HALF_PI);
  				ctx.arc(left, bottom, r, HALF_PI, PI);
  			} else if (left < right) {
  				ctx.moveTo(left, y);
  				ctx.arc(right, top, r, -HALF_PI, HALF_PI);
  				ctx.arc(left, top, r, HALF_PI, PI + HALF_PI);
  			} else if (top < bottom) {
  				ctx.arc(left, top, r, -PI, 0);
  				ctx.arc(left, bottom, r, 0, PI);
  			} else {
  				ctx.arc(left, top, r, -PI, PI);
  			}
  			ctx.closePath();
  			ctx.moveTo(x, y);
  		} else {
  			ctx.rect(x, y, width, height);
  		}
  	},

  	drawPoint: function(ctx, style, radius, x, y, rotation) {
  		var type, xOffset, yOffset, size, cornerRadius;
  		var rad = (rotation || 0) * RAD_PER_DEG;

  		if (style && typeof style === 'object') {
  			type = style.toString();
  			if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {
  				ctx.save();
  				ctx.translate(x, y);
  				ctx.rotate(rad);
  				ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
  				ctx.restore();
  				return;
  			}
  		}

  		if (isNaN(radius) || radius <= 0) {
  			return;
  		}

  		ctx.beginPath();

  		switch (style) {
  		// Default includes circle
  		default:
  			ctx.arc(x, y, radius, 0, DOUBLE_PI);
  			ctx.closePath();
  			break;
  		case 'triangle':
  			ctx.moveTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
  			rad += TWO_THIRDS_PI;
  			ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
  			rad += TWO_THIRDS_PI;
  			ctx.lineTo(x + Math.sin(rad) * radius, y - Math.cos(rad) * radius);
  			ctx.closePath();
  			break;
  		case 'rectRounded':
  			// NOTE: the rounded rect implementation changed to use `arc` instead of
  			// `quadraticCurveTo` since it generates better results when rect is
  			// almost a circle. 0.516 (instead of 0.5) produces results with visually
  			// closer proportion to the previous impl and it is inscribed in the
  			// circle with `radius`. For more details, see the following PRs:
  			// https://github.com/chartjs/Chart.js/issues/5597
  			// https://github.com/chartjs/Chart.js/issues/5858
  			cornerRadius = radius * 0.516;
  			size = radius - cornerRadius;
  			xOffset = Math.cos(rad + QUARTER_PI) * size;
  			yOffset = Math.sin(rad + QUARTER_PI) * size;
  			ctx.arc(x - xOffset, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
  			ctx.arc(x + yOffset, y - xOffset, cornerRadius, rad - HALF_PI, rad);
  			ctx.arc(x + xOffset, y + yOffset, cornerRadius, rad, rad + HALF_PI);
  			ctx.arc(x - yOffset, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
  			ctx.closePath();
  			break;
  		case 'rect':
  			if (!rotation) {
  				size = Math.SQRT1_2 * radius;
  				ctx.rect(x - size, y - size, 2 * size, 2 * size);
  				break;
  			}
  			rad += QUARTER_PI;
  			/* falls through */
  		case 'rectRot':
  			xOffset = Math.cos(rad) * radius;
  			yOffset = Math.sin(rad) * radius;
  			ctx.moveTo(x - xOffset, y - yOffset);
  			ctx.lineTo(x + yOffset, y - xOffset);
  			ctx.lineTo(x + xOffset, y + yOffset);
  			ctx.lineTo(x - yOffset, y + xOffset);
  			ctx.closePath();
  			break;
  		case 'crossRot':
  			rad += QUARTER_PI;
  			/* falls through */
  		case 'cross':
  			xOffset = Math.cos(rad) * radius;
  			yOffset = Math.sin(rad) * radius;
  			ctx.moveTo(x - xOffset, y - yOffset);
  			ctx.lineTo(x + xOffset, y + yOffset);
  			ctx.moveTo(x + yOffset, y - xOffset);
  			ctx.lineTo(x - yOffset, y + xOffset);
  			break;
  		case 'star':
  			xOffset = Math.cos(rad) * radius;
  			yOffset = Math.sin(rad) * radius;
  			ctx.moveTo(x - xOffset, y - yOffset);
  			ctx.lineTo(x + xOffset, y + yOffset);
  			ctx.moveTo(x + yOffset, y - xOffset);
  			ctx.lineTo(x - yOffset, y + xOffset);
  			rad += QUARTER_PI;
  			xOffset = Math.cos(rad) * radius;
  			yOffset = Math.sin(rad) * radius;
  			ctx.moveTo(x - xOffset, y - yOffset);
  			ctx.lineTo(x + xOffset, y + yOffset);
  			ctx.moveTo(x + yOffset, y - xOffset);
  			ctx.lineTo(x - yOffset, y + xOffset);
  			break;
  		case 'line':
  			xOffset = Math.cos(rad) * radius;
  			yOffset = Math.sin(rad) * radius;
  			ctx.moveTo(x - xOffset, y - yOffset);
  			ctx.lineTo(x + xOffset, y + yOffset);
  			break;
  		case 'dash':
  			ctx.moveTo(x, y);
  			ctx.lineTo(x + Math.cos(rad) * radius, y + Math.sin(rad) * radius);
  			break;
  		}

  		ctx.fill();
  		ctx.stroke();
  	},

  	/**
  	 * Returns true if the point is inside the rectangle
  	 * @param {object} point - The point to test
  	 * @param {object} area - The rectangle
  	 * @returns {boolean}
  	 * @private
  	 */
  	_isPointInArea: function(point, area) {
  		var epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.

  		return point.x > area.left - epsilon && point.x < area.right + epsilon &&
  			point.y > area.top - epsilon && point.y < area.bottom + epsilon;
  	},

  	clipArea: function(ctx, area) {
  		ctx.save();
  		ctx.beginPath();
  		ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
  		ctx.clip();
  	},

  	unclipArea: function(ctx) {
  		ctx.restore();
  	},

  	lineTo: function(ctx, previous, target, flip) {
  		var stepped = target.steppedLine;
  		if (stepped) {
  			if (stepped === 'middle') {
  				var midpoint = (previous.x + target.x) / 2.0;
  				ctx.lineTo(midpoint, flip ? target.y : previous.y);
  				ctx.lineTo(midpoint, flip ? previous.y : target.y);
  			} else if ((stepped === 'after' && !flip) || (stepped !== 'after' && flip)) {
  				ctx.lineTo(previous.x, target.y);
  			} else {
  				ctx.lineTo(target.x, previous.y);
  			}
  			ctx.lineTo(target.x, target.y);
  			return;
  		}

  		if (!target.tension) {
  			ctx.lineTo(target.x, target.y);
  			return;
  		}

  		ctx.bezierCurveTo(
  			flip ? previous.controlPointPreviousX : previous.controlPointNextX,
  			flip ? previous.controlPointPreviousY : previous.controlPointNextY,
  			flip ? target.controlPointNextX : target.controlPointPreviousX,
  			flip ? target.controlPointNextY : target.controlPointPreviousY,
  			target.x,
  			target.y);
  	}
  };

  var helpers_canvas = exports$1;

  // DEPRECATIONS

  /**
   * Provided for backward compatibility, use Chart.helpers.canvas.clear instead.
   * @namespace Chart.helpers.clear
   * @deprecated since version 2.7.0
   * @todo remove at version 3
   * @private
   */
  helpers_core.clear = exports$1.clear;

  /**
   * Provided for backward compatibility, use Chart.helpers.canvas.roundedRect instead.
   * @namespace Chart.helpers.drawRoundedRectangle
   * @deprecated since version 2.7.0
   * @todo remove at version 3
   * @private
   */
  helpers_core.drawRoundedRectangle = function(ctx) {
  	ctx.beginPath();
  	exports$1.roundedRect.apply(exports$1, arguments);
  };

  var defaults = {
  	/**
  	 * @private
  	 */
  	_set: function(scope, values) {
  		return helpers_core.merge(this[scope] || (this[scope] = {}), values);
  	}
  };

  // TODO(v3): remove 'global' from namespace.  all default are global and
  // there's inconsistency around which options are under 'global'
  defaults._set('global', {
  	defaultColor: 'rgba(0,0,0,0.1)',
  	defaultFontColor: '#666',
  	defaultFontFamily: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
  	defaultFontSize: 12,
  	defaultFontStyle: 'normal',
  	defaultLineHeight: 1.2,
  	showLines: true
  });

  var core_defaults = defaults;

  var valueOrDefault = helpers_core.valueOrDefault;

  /**
   * Converts the given font object into a CSS font string.
   * @param {object} font - A font object.
   * @return {string} The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font
   * @private
   */
  function toFontString(font) {
  	if (!font || helpers_core.isNullOrUndef(font.size) || helpers_core.isNullOrUndef(font.family)) {
  		return null;
  	}

  	return (font.style ? font.style + ' ' : '')
  		+ (font.weight ? font.weight + ' ' : '')
  		+ font.size + 'px '
  		+ font.family;
  }

  /**
   * @alias Chart.helpers.options
   * @namespace
   */
  var helpers_options = {
  	/**
  	 * Converts the given line height `value` in pixels for a specific font `size`.
  	 * @param {number|string} value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').
  	 * @param {number} size - The font size (in pixels) used to resolve relative `value`.
  	 * @returns {number} The effective line height in pixels (size * 1.2 if value is invalid).
  	 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height
  	 * @since 2.7.0
  	 */
  	toLineHeight: function(value, size) {
  		var matches = ('' + value).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);
  		if (!matches || matches[1] === 'normal') {
  			return size * 1.2;
  		}

  		value = +matches[2];

  		switch (matches[3]) {
  		case 'px':
  			return value;
  		case '%':
  			value /= 100;
  			break;
  		}

  		return size * value;
  	},

  	/**
  	 * Converts the given value into a padding object with pre-computed width/height.
  	 * @param {number|object} value - If a number, set the value to all TRBL component,
  	 *  else, if and object, use defined properties and sets undefined ones to 0.
  	 * @returns {object} The padding values (top, right, bottom, left, width, height)
  	 * @since 2.7.0
  	 */
  	toPadding: function(value) {
  		var t, r, b, l;

  		if (helpers_core.isObject(value)) {
  			t = +value.top || 0;
  			r = +value.right || 0;
  			b = +value.bottom || 0;
  			l = +value.left || 0;
  		} else {
  			t = r = b = l = +value || 0;
  		}

  		return {
  			top: t,
  			right: r,
  			bottom: b,
  			left: l,
  			height: t + b,
  			width: l + r
  		};
  	},

  	/**
  	 * Parses font options and returns the font object.
  	 * @param {object} options - A object that contains font options to be parsed.
  	 * @return {object} The font object.
  	 * @todo Support font.* options and renamed to toFont().
  	 * @private
  	 */
  	_parseFont: function(options) {
  		var globalDefaults = core_defaults.global;
  		var size = valueOrDefault(options.fontSize, globalDefaults.defaultFontSize);
  		var font = {
  			family: valueOrDefault(options.fontFamily, globalDefaults.defaultFontFamily),
  			lineHeight: helpers_core.options.toLineHeight(valueOrDefault(options.lineHeight, globalDefaults.defaultLineHeight), size),
  			size: size,
  			style: valueOrDefault(options.fontStyle, globalDefaults.defaultFontStyle),
  			weight: null,
  			string: ''
  		};

  		font.string = toFontString(font);
  		return font;
  	},

  	/**
  	 * Evaluates the given `inputs` sequentially and returns the first defined value.
  	 * @param {Array} inputs - An array of values, falling back to the last value.
  	 * @param {object} [context] - If defined and the current value is a function, the value
  	 * is called with `context` as first argument and the result becomes the new input.
  	 * @param {number} [index] - If defined and the current value is an array, the value
  	 * at `index` become the new input.
  	 * @param {object} [info] - object to return information about resolution in
  	 * @param {boolean} [info.cacheable] - Will be set to `false` if option is not cacheable.
  	 * @since 2.7.0
  	 */
  	resolve: function(inputs, context, index, info) {
  		var cacheable = true;
  		var i, ilen, value;

  		for (i = 0, ilen = inputs.length; i < ilen; ++i) {
  			value = inputs[i];
  			if (value === undefined) {
  				continue;
  			}
  			if (context !== undefined && typeof value === 'function') {
  				value = value(context);
  				cacheable = false;
  			}
  			if (index !== undefined && helpers_core.isArray(value)) {
  				value = value[index];
  				cacheable = false;
  			}
  			if (value !== undefined) {
  				if (info && !cacheable) {
  					info.cacheable = false;
  				}
  				return value;
  			}
  		}
  	}
  };

  /**
   * @alias Chart.helpers.math
   * @namespace
   */
  var exports$2 = {
  	/**
  	 * Returns an array of factors sorted from 1 to sqrt(value)
  	 * @private
  	 */
  	_factorize: function(value) {
  		var result = [];
  		var sqrt = Math.sqrt(value);
  		var i;

  		for (i = 1; i < sqrt; i++) {
  			if (value % i === 0) {
  				result.push(i);
  				result.push(value / i);
  			}
  		}
  		if (sqrt === (sqrt | 0)) { // if value is a square number
  			result.push(sqrt);
  		}

  		result.sort(function(a, b) {
  			return a - b;
  		}).pop();
  		return result;
  	},

  	log10: Math.log10 || function(x) {
  		var exponent = Math.log(x) * Math.LOG10E; // Math.LOG10E = 1 / Math.LN10.
  		// Check for whole powers of 10,
  		// which due to floating point rounding error should be corrected.
  		var powerOf10 = Math.round(exponent);
  		var isPowerOf10 = x === Math.pow(10, powerOf10);

  		return isPowerOf10 ? powerOf10 : exponent;
  	}
  };

  var helpers_math = exports$2;

  // DEPRECATIONS

  /**
   * Provided for backward compatibility, use Chart.helpers.math.log10 instead.
   * @namespace Chart.helpers.log10
   * @deprecated since version 2.9.0
   * @todo remove at version 3
   * @private
   */
  helpers_core.log10 = exports$2.log10;

  var getRtlAdapter = function(rectX, width) {
  	return {
  		x: function(x) {
  			return rectX + rectX + width - x;
  		},
  		setWidth: function(w) {
  			width = w;
  		},
  		textAlign: function(align) {
  			if (align === 'center') {
  				return align;
  			}
  			return align === 'right' ? 'left' : 'right';
  		},
  		xPlus: function(x, value) {
  			return x - value;
  		},
  		leftForLtr: function(x, itemWidth) {
  			return x - itemWidth;
  		},
  	};
  };

  var getLtrAdapter = function() {
  	return {
  		x: function(x) {
  			return x;
  		},
  		setWidth: function(w) { // eslint-disable-line no-unused-vars
  		},
  		textAlign: function(align) {
  			return align;
  		},
  		xPlus: function(x, value) {
  			return x + value;
  		},
  		leftForLtr: function(x, _itemWidth) { // eslint-disable-line no-unused-vars
  			return x;
  		},
  	};
  };

  var getAdapter = function(rtl, rectX, width) {
  	return rtl ? getRtlAdapter(rectX, width) : getLtrAdapter();
  };

  var overrideTextDirection = function(ctx, direction) {
  	var style, original;
  	if (direction === 'ltr' || direction === 'rtl') {
  		style = ctx.canvas.style;
  		original = [
  			style.getPropertyValue('direction'),
  			style.getPropertyPriority('direction') ];

  		style.setProperty('direction', direction, 'important');
  		ctx.prevTextDirection = original;
  	}
  };

  var restoreTextDirection = function(ctx) {
  	var original = ctx.prevTextDirection;
  	if (original !== undefined) {
  		delete ctx.prevTextDirection;
  		ctx.canvas.style.setProperty('direction', original[0], original[1]);
  	}
  };

  var helpers_rtl = {
  	getRtlAdapter: getAdapter,
  	overrideTextDirection: overrideTextDirection,
  	restoreTextDirection: restoreTextDirection,
  };

  var helpers$1 = helpers_core;
  var easing = helpers_easing;
  var canvas = helpers_canvas;
  var options = helpers_options;
  var math = helpers_math;
  var rtl = helpers_rtl;
  helpers$1.easing = easing;
  helpers$1.canvas = canvas;
  helpers$1.options = options;
  helpers$1.math = math;
  helpers$1.rtl = rtl;

  function interpolate(start, view, model, ease) {
  	var keys = Object.keys(model);
  	var i, ilen, key, actual, origin, target, type, c0, c1;

  	for (i = 0, ilen = keys.length; i < ilen; ++i) {
  		key = keys[i];

  		target = model[key];

  		// if a value is added to the model after pivot() has been called, the view
  		// doesn't contain it, so let's initialize the view to the target value.
  		if (!view.hasOwnProperty(key)) {
  			view[key] = target;
  		}

  		actual = view[key];

  		if (actual === target || key[0] === '_') {
  			continue;
  		}

  		if (!start.hasOwnProperty(key)) {
  			start[key] = actual;
  		}

  		origin = start[key];

  		type = typeof target;

  		if (type === typeof origin) {
  			if (type === 'string') {
  				c0 = chartjsColor(origin);
  				if (c0.valid) {
  					c1 = chartjsColor(target);
  					if (c1.valid) {
  						view[key] = c1.mix(c0, ease).rgbString();
  						continue;
  					}
  				}
  			} else if (helpers$1.isFinite(origin) && helpers$1.isFinite(target)) {
  				view[key] = origin + (target - origin) * ease;
  				continue;
  			}
  		}

  		view[key] = target;
  	}
  }

  var Element = function(configuration) {
  	helpers$1.extend(this, configuration);
  	this.initialize.apply(this, arguments);
  };

  helpers$1.extend(Element.prototype, {
  	_type: undefined,

  	initialize: function() {
  		this.hidden = false;
  	},

  	pivot: function() {
  		var me = this;
  		if (!me._view) {
  			me._view = helpers$1.extend({}, me._model);
  		}
  		me._start = {};
  		return me;
  	},

  	transition: function(ease) {
  		var me = this;
  		var model = me._model;
  		var start = me._start;
  		var view = me._view;

  		// No animation -> No Transition
  		if (!model || ease === 1) {
  			me._view = helpers$1.extend({}, model);
  			me._start = null;
  			return me;
  		}

  		if (!view) {
  			view = me._view = {};
  		}

  		if (!start) {
  			start = me._start = {};
  		}

  		interpolate(start, view, model, ease);

  		return me;
  	},

  	tooltipPosition: function() {
  		return {
  			x: this._model.x,
  			y: this._model.y
  		};
  	},

  	hasValue: function() {
  		return helpers$1.isNumber(this._model.x) && helpers$1.isNumber(this._model.y);
  	}
  });

  Element.extend = helpers$1.inherits;

  var core_element = Element;

  var exports$3 = core_element.extend({
  	chart: null, // the animation associated chart instance
  	currentStep: 0, // the current animation step
  	numSteps: 60, // default number of steps
  	easing: '', // the easing to use for this animation
  	render: null, // render function used by the animation service

  	onAnimationProgress: null, // user specified callback to fire on each step of the animation
  	onAnimationComplete: null, // user specified callback to fire when the animation finishes
  });

  var core_animation = exports$3;

  // DEPRECATIONS

  /**
   * Provided for backward compatibility, use Chart.Animation instead
   * @prop Chart.Animation#animationObject
   * @deprecated since version 2.6.0
   * @todo remove at version 3
   */
  Object.defineProperty(exports$3.prototype, 'animationObject', {
  	get: function() {
  		return this;
  	}
  });

  /**
   * Provided for backward compatibility, use Chart.Animation#chart instead
   * @prop Chart.Animation#chartInstance
   * @deprecated since version 2.6.0
   * @todo remove at version 3
   */
  Object.defineProperty(exports$3.prototype, 'chartInstance', {
  	get: function() {
  		return this.chart;
  	},
  	set: function(value) {
  		this.chart = value;
  	}
  });

  core_defaults._set('global', {
  	animation: {
  		duration: 1000,
  		easing: 'easeOutQuart',
  		onProgress: helpers$1.noop,
  		onComplete: helpers$1.noop
  	}
  });

  var core_animations = {
  	animations: [],
  	request: null,

  	/**
  	 * @param {Chart} chart - The chart to animate.
  	 * @param {Chart.Animation} animation - The animation that we will animate.
  	 * @param {number} duration - The animation duration in ms.
  	 * @param {boolean} lazy - if true, the chart is not marked as animating to enable more responsive interactions
  	 */
  	addAnimation: function(chart, animation, duration, lazy) {
  		var animations = this.animations;
  		var i, ilen;

  		animation.chart = chart;
  		animation.startTime = Date.now();
  		animation.duration = duration;

  		if (!lazy) {
  			chart.animating = true;
  		}

  		for (i = 0, ilen = animations.length; i < ilen; ++i) {
  			if (animations[i].chart === chart) {
  				animations[i] = animation;
  				return;
  			}
  		}

  		animations.push(animation);

  		// If there are no animations queued, manually kickstart a digest, for lack of a better word
  		if (animations.length === 1) {
  			this.requestAnimationFrame();
  		}
  	},

  	cancelAnimation: function(chart) {
  		var index = helpers$1.findIndex(this.animations, function(animation) {
  			return animation.chart === chart;
  		});

  		if (index !== -1) {
  			this.animations.splice(index, 1);
  			chart.animating = false;
  		}
  	},

  	requestAnimationFrame: function() {
  		var me = this;
  		if (me.request === null) {
  			// Skip animation frame requests until the active one is executed.
  			// This can happen when processing mouse events, e.g. 'mousemove'
  			// and 'mouseout' events will trigger multiple renders.
  			me.request = helpers$1.requestAnimFrame.call(window, function() {
  				me.request = null;
  				me.startDigest();
  			});
  		}
  	},

  	/**
  	 * @private
  	 */
  	startDigest: function() {
  		var me = this;

  		me.advance();

  		// Do we have more stuff to animate?
  		if (me.animations.length > 0) {
  			me.requestAnimationFrame();
  		}
  	},

  	/**
  	 * @private
  	 */
  	advance: function() {
  		var animations = this.animations;
  		var animation, chart, numSteps, nextStep;
  		var i = 0;

  		// 1 animation per chart, so we are looping charts here
  		while (i < animations.length) {
  			animation = animations[i];
  			chart = animation.chart;
  			numSteps = animation.numSteps;

  			// Make sure that currentStep starts at 1
  			// https://github.com/chartjs/Chart.js/issues/6104
  			nextStep = Math.floor((Date.now() - animation.startTime) / animation.duration * numSteps) + 1;
  			animation.currentStep = Math.min(nextStep, numSteps);

  			helpers$1.callback(animation.render, [chart, animation], chart);
  			helpers$1.callback(animation.onAnimationProgress, [animation], chart);

  			if (animation.currentStep >= numSteps) {
  				helpers$1.callback(animation.onAnimationComplete, [animation], chart);
  				chart.animating = false;
  				animations.splice(i, 1);
  			} else {
  				++i;
  			}
  		}
  	}
  };

  var resolve = helpers$1.options.resolve;

  var arrayEvents = ['push', 'pop', 'shift', 'splice', 'unshift'];

  /**
   * Hooks the array methods that add or remove values ('push', pop', 'shift', 'splice',
   * 'unshift') and notify the listener AFTER the array has been altered. Listeners are
   * called on the 'onData*' callbacks (e.g. onDataPush, etc.) with same arguments.
   */
  function listenArrayEvents(array, listener) {
  	if (array._chartjs) {
  		array._chartjs.listeners.push(listener);
  		return;
  	}

  	Object.defineProperty(array, '_chartjs', {
  		configurable: true,
  		enumerable: false,
  		value: {
  			listeners: [listener]
  		}
  	});

  	arrayEvents.forEach(function(key) {
  		var method = 'onData' + key.charAt(0).toUpperCase() + key.slice(1);
  		var base = array[key];

  		Object.defineProperty(array, key, {
  			configurable: true,
  			enumerable: false,
  			value: function() {
  				var args = Array.prototype.slice.call(arguments);
  				var res = base.apply(this, args);

  				helpers$1.each(array._chartjs.listeners, function(object) {
  					if (typeof object[method] === 'function') {
  						object[method].apply(object, args);
  					}
  				});

  				return res;
  			}
  		});
  	});
  }

  /**
   * Removes the given array event listener and cleanup extra attached properties (such as
   * the _chartjs stub and overridden methods) if array doesn't have any more listeners.
   */
  function unlistenArrayEvents(array, listener) {
  	var stub = array._chartjs;
  	if (!stub) {
  		return;
  	}

  	var listeners = stub.listeners;
  	var index = listeners.indexOf(listener);
  	if (index !== -1) {
  		listeners.splice(index, 1);
  	}

  	if (listeners.length > 0) {
  		return;
  	}

  	arrayEvents.forEach(function(key) {
  		delete array[key];
  	});

  	delete array._chartjs;
  }

  // Base class for all dataset controllers (line, bar, etc)
  var DatasetController = function(chart, datasetIndex) {
  	this.initialize(chart, datasetIndex);
  };

  helpers$1.extend(DatasetController.prototype, {

  	/**
  	 * Element type used to generate a meta dataset (e.g. Chart.element.Line).
  	 * @type {Chart.core.element}
  	 */
  	datasetElementType: null,

  	/**
  	 * Element type used to generate a meta data (e.g. Chart.element.Point).
  	 * @type {Chart.core.element}
  	 */
  	dataElementType: null,

  	/**
  	 * Dataset element option keys to be resolved in _resolveDatasetElementOptions.
  	 * A derived controller may override this to resolve controller-specific options.
  	 * The keys defined here are for backward compatibility for legend styles.
  	 * @private
  	 */
  	_datasetElementOptions: [
  		'backgroundColor',
  		'borderCapStyle',
  		'borderColor',
  		'borderDash',
  		'borderDashOffset',
  		'borderJoinStyle',
  		'borderWidth'
  	],

  	/**
  	 * Data element option keys to be resolved in _resolveDataElementOptions.
  	 * A derived controller may override this to resolve controller-specific options.
  	 * The keys defined here are for backward compatibility for legend styles.
  	 * @private
  	 */
  	_dataElementOptions: [
  		'backgroundColor',
  		'borderColor',
  		'borderWidth',
  		'pointStyle'
  	],

  	initialize: function(chart, datasetIndex) {
  		var me = this;
  		me.chart = chart;
  		me.index = datasetIndex;
  		me.linkScales();
  		me.addElements();
  		me._type = me.getMeta().type;
  	},

  	updateIndex: function(datasetIndex) {
  		this.index = datasetIndex;
  	},

  	linkScales: function() {
  		var me = this;
  		var meta = me.getMeta();
  		var chart = me.chart;
  		var scales = chart.scales;
  		var dataset = me.getDataset();
  		var scalesOpts = chart.options.scales;

  		if (meta.xAxisID === null || !(meta.xAxisID in scales) || dataset.xAxisID) {
  			meta.xAxisID = dataset.xAxisID || scalesOpts.xAxes[0].id;
  		}
  		if (meta.yAxisID === null || !(meta.yAxisID in scales) || dataset.yAxisID) {
  			meta.yAxisID = dataset.yAxisID || scalesOpts.yAxes[0].id;
  		}
  	},

  	getDataset: function() {
  		return this.chart.data.datasets[this.index];
  	},

  	getMeta: function() {
  		return this.chart.getDatasetMeta(this.index);
  	},

  	getScaleForId: function(scaleID) {
  		return this.chart.scales[scaleID];
  	},

  	/**
  	 * @private
  	 */
  	_getValueScaleId: function() {
  		return this.getMeta().yAxisID;
  	},

  	/**
  	 * @private
  	 */
  	_getIndexScaleId: function() {
  		return this.getMeta().xAxisID;
  	},

  	/**
  	 * @private
  	 */
  	_getValueScale: function() {
  		return this.getScaleForId(this._getValueScaleId());
  	},

  	/**
  	 * @private
  	 */
  	_getIndexScale: function() {
  		return this.getScaleForId(this._getIndexScaleId());
  	},

  	reset: function() {
  		this._update(true);
  	},

  	/**
  	 * @private
  	 */
  	destroy: function() {
  		if (this._data) {
  			unlistenArrayEvents(this._data, this);
  		}
  	},

  	createMetaDataset: function() {
  		var me = this;
  		var type = me.datasetElementType;
  		return type && new type({
  			_chart: me.chart,
  			_datasetIndex: me.index
  		});
  	},

  	createMetaData: function(index) {
  		var me = this;
  		var type = me.dataElementType;
  		return type && new type({
  			_chart: me.chart,
  			_datasetIndex: me.index,
  			_index: index
  		});
  	},

  	addElements: function() {
  		var me = this;
  		var meta = me.getMeta();
  		var data = me.getDataset().data || [];
  		var metaData = meta.data;
  		var i, ilen;

  		for (i = 0, ilen = data.length; i < ilen; ++i) {
  			metaData[i] = metaData[i] || me.createMetaData(i);
  		}

  		meta.dataset = meta.dataset || me.createMetaDataset();
  	},

  	addElementAndReset: function(index) {
  		var element = this.createMetaData(index);
  		this.getMeta().data.splice(index, 0, element);
  		this.updateElement(element, index, true);
  	},

  	buildOrUpdateElements: function() {
  		var me = this;
  		var dataset = me.getDataset();
  		var data = dataset.data || (dataset.data = []);

  		// In order to correctly handle data addition/deletion animation (an thus simulate
  		// real-time charts), we need to monitor these data modifications and synchronize
  		// the internal meta data accordingly.
  		if (me._data !== data) {
  			if (me._data) {
  				// This case happens when the user replaced the data array instance.
  				unlistenArrayEvents(me._data, me);
  			}

  			if (data && Object.isExtensible(data)) {
  				listenArrayEvents(data, me);
  			}
  			me._data = data;
  		}

  		// Re-sync meta data in case the user replaced the data array or if we missed
  		// any updates and so make sure that we handle number of datapoints changing.
  		me.resyncElements();
  	},

  	/**
  	 * Returns the merged user-supplied and default dataset-level options
  	 * @private
  	 */
  	_configure: function() {
  		var me = this;
  		me._config = helpers$1.merge({}, [
  			me.chart.options.datasets[me._type],
  			me.getDataset() ], {
  			merger: function(key, target, source) {
  				if (key !== '_meta' && key !== 'data') {
  					helpers$1._merger(key, target, source);
  				}
  			}
  		});
  	},

  	_update: function(reset) {
  		var me = this;
  		me._configure();
  		me._cachedDataOpts = null;
  		me.update(reset);
  	},

  	update: helpers$1.noop,

  	transition: function(easingValue) {
  		var meta = this.getMeta();
  		var elements = meta.data || [];
  		var ilen = elements.length;
  		var i = 0;

  		for (; i < ilen; ++i) {
  			elements[i].transition(easingValue);
  		}

  		if (meta.dataset) {
  			meta.dataset.transition(easingValue);
  		}
  	},

  	draw: function() {
  		var meta = this.getMeta();
  		var elements = meta.data || [];
  		var ilen = elements.length;
  		var i = 0;

  		if (meta.dataset) {
  			meta.dataset.draw();
  		}

  		for (; i < ilen; ++i) {
  			elements[i].draw();
  		}
  	},

  	/**
  	 * Returns a set of predefined style properties that should be used to represent the dataset
  	 * or the data if the index is specified
  	 * @param {number} index - data index
  	 * @return {IStyleInterface} style object
  	 */
  	getStyle: function(index) {
  		var me = this;
  		var meta = me.getMeta();
  		var dataset = meta.dataset;
  		var style;

  		me._configure();
  		if (dataset && index === undefined) {
  			style = me._resolveDatasetElementOptions(dataset || {});
  		} else {
  			index = index || 0;
  			style = me._resolveDataElementOptions(meta.data[index] || {}, index);
  		}

  		if (style.fill === false || style.fill === null) {
  			style.backgroundColor = style.borderColor;
  		}

  		return style;
  	},

  	/**
  	 * @private
  	 */
  	_resolveDatasetElementOptions: function(element, hover) {
  		var me = this;
  		var chart = me.chart;
  		var datasetOpts = me._config;
  		var custom = element.custom || {};
  		var options = chart.options.elements[me.datasetElementType.prototype._type] || {};
  		var elementOptions = me._datasetElementOptions;
  		var values = {};
  		var i, ilen, key, readKey;

  		// Scriptable options
  		var context = {
  			chart: chart,
  			dataset: me.getDataset(),
  			datasetIndex: me.index,
  			hover: hover
  		};

  		for (i = 0, ilen = elementOptions.length; i < ilen; ++i) {
  			key = elementOptions[i];
  			readKey = hover ? 'hover' + key.charAt(0).toUpperCase() + key.slice(1) : key;
  			values[key] = resolve([
  				custom[readKey],
  				datasetOpts[readKey],
  				options[readKey]
  			], context);
  		}

  		return values;
  	},

  	/**
  	 * @private
  	 */
  	_resolveDataElementOptions: function(element, index) {
  		var me = this;
  		var custom = element && element.custom;
  		var cached = me._cachedDataOpts;
  		if (cached && !custom) {
  			return cached;
  		}
  		var chart = me.chart;
  		var datasetOpts = me._config;
  		var options = chart.options.elements[me.dataElementType.prototype._type] || {};
  		var elementOptions = me._dataElementOptions;
  		var values = {};

  		// Scriptable options
  		var context = {
  			chart: chart,
  			dataIndex: index,
  			dataset: me.getDataset(),
  			datasetIndex: me.index
  		};

  		// `resolve` sets cacheable to `false` if any option is indexed or scripted
  		var info = {cacheable: !custom};

  		var keys, i, ilen, key;

  		custom = custom || {};

  		if (helpers$1.isArray(elementOptions)) {
  			for (i = 0, ilen = elementOptions.length; i < ilen; ++i) {
  				key = elementOptions[i];
  				values[key] = resolve([
  					custom[key],
  					datasetOpts[key],
  					options[key]
  				], context, index, info);
  			}
  		} else {
  			keys = Object.keys(elementOptions);
  			for (i = 0, ilen = keys.length; i < ilen; ++i) {
  				key = keys[i];
  				values[key] = resolve([
  					custom[key],
  					datasetOpts[elementOptions[key]],
  					datasetOpts[key],
  					options[key]
  				], context, index, info);
  			}
  		}

  		if (info.cacheable) {
  			me._cachedDataOpts = Object.freeze(values);
  		}

  		return values;
  	},

  	removeHoverStyle: function(element) {
  		helpers$1.merge(element._model, element.$previousStyle || {});
  		delete element.$previousStyle;
  	},

  	setHoverStyle: function(element) {
  		var dataset = this.chart.data.datasets[element._datasetIndex];
  		var index = element._index;
  		var custom = element.custom || {};
  		var model = element._model;
  		var getHoverColor = helpers$1.getHoverColor;

  		element.$previousStyle = {
  			backgroundColor: model.backgroundColor,
  			borderColor: model.borderColor,
  			borderWidth: model.borderWidth
  		};

  		model.backgroundColor = resolve([custom.hoverBackgroundColor, dataset.hoverBackgroundColor, getHoverColor(model.backgroundColor)], undefined, index);
  		model.borderColor = resolve([custom.hoverBorderColor, dataset.hoverBorderColor, getHoverColor(model.borderColor)], undefined, index);
  		model.borderWidth = resolve([custom.hoverBorderWidth, dataset.hoverBorderWidth, model.borderWidth], undefined, index);
  	},

  	/**
  	 * @private
  	 */
  	_removeDatasetHoverStyle: function() {
  		var element = this.getMeta().dataset;

  		if (element) {
  			this.removeHoverStyle(element);
  		}
  	},

  	/**
  	 * @private
  	 */
  	_setDatasetHoverStyle: function() {
  		var element = this.getMeta().dataset;
  		var prev = {};
  		var i, ilen, key, keys, hoverOptions, model;

  		if (!element) {
  			return;
  		}

  		model = element._model;
  		hoverOptions = this._resolveDatasetElementOptions(element, true);

  		keys = Object.keys(hoverOptions);
  		for (i = 0, ilen = keys.length; i < ilen; ++i) {
  			key = keys[i];
  			prev[key] = model[key];
  			model[key] = hoverOptions[key];
  		}

  		element.$previousStyle = prev;
  	},

  	/**
  	 * @private
  	 */
  	resyncElements: function() {
  		var me = this;
  		var meta = me.getMeta();
  		var data = me.getDataset().data;
  		var numMeta = meta.data.length;
  		var numData = data.length;

  		if (numData < numMeta) {
  			meta.data.splice(numData, numMeta - numData);
  		} else if (numData > numMeta) {
  			me.insertElements(numMeta, numData - numMeta);
  		}
  	},

  	/**
  	 * @private
  	 */
  	insertElements: function(start, count) {
  		for (var i = 0; i < count; ++i) {
  			this.addElementAndReset(start + i);
  		}
  	},

  	/**
  	 * @private
  	 */
  	onDataPush: function() {
  		var count = arguments.length;
  		this.insertElements(this.getDataset().data.length - count, count);
  	},

  	/**
  	 * @private
  	 */
  	onDataPop: function() {
  		this.getMeta().data.pop();
  	},

  	/**
  	 * @private
  	 */
  	onDataShift: function() {
  		this.getMeta().data.shift();
  	},

  	/**
  	 * @private
  	 */
  	onDataSplice: function(start, count) {
  		this.getMeta().data.splice(start, count);
  		this.insertElements(start, arguments.length - 2);
  	},

  	/**
  	 * @private
  	 */
  	onDataUnshift: function() {
  		this.insertElements(0, arguments.length);
  	}
  });

  DatasetController.extend = helpers$1.inherits;

  var core_datasetController = DatasetController;

  var TAU = Math.PI * 2;

  core_defaults._set('global', {
  	elements: {
  		arc: {
  			backgroundColor: core_defaults.global.defaultColor,
  			borderColor: '#fff',
  			borderWidth: 2,
  			borderAlign: 'center'
  		}
  	}
  });

  function clipArc(ctx, arc) {
  	var startAngle = arc.startAngle;
  	var endAngle = arc.endAngle;
  	var pixelMargin = arc.pixelMargin;
  	var angleMargin = pixelMargin / arc.outerRadius;
  	var x = arc.x;
  	var y = arc.y;

  	// Draw an inner border by cliping the arc and drawing a double-width border
  	// Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders
  	ctx.beginPath();
  	ctx.arc(x, y, arc.outerRadius, startAngle - angleMargin, endAngle + angleMargin);
  	if (arc.innerRadius > pixelMargin) {
  		angleMargin = pixelMargin / arc.innerRadius;
  		ctx.arc(x, y, arc.innerRadius - pixelMargin, endAngle + angleMargin, startAngle - angleMargin, true);
  	} else {
  		ctx.arc(x, y, pixelMargin, endAngle + Math.PI / 2, startAngle - Math.PI / 2);
  	}
  	ctx.closePath();
  	ctx.clip();
  }

  function drawFullCircleBorders(ctx, vm, arc, inner) {
  	var endAngle = arc.endAngle;
  	var i;

  	if (inner) {
  		arc.endAngle = arc.startAngle + TAU;
  		clipArc(ctx, arc);
  		arc.endAngle = endAngle;
  		if (arc.endAngle === arc.startAngle && arc.fullCircles) {
  			arc.endAngle += TAU;
  			arc.fullCircles--;
  		}
  	}

  	ctx.beginPath();
  	ctx.arc(arc.x, arc.y, arc.innerRadius, arc.startAngle + TAU, arc.startAngle, true);
  	for (i = 0; i < arc.fullCircles; ++i) {
  		ctx.stroke();
  	}

  	ctx.beginPath();
  	ctx.arc(arc.x, arc.y, vm.outerRadius, arc.startAngle, arc.startAngle + TAU);
  	for (i = 0; i < arc.fullCircles; ++i) {
  		ctx.stroke();
  	}
  }

  function drawBorder(ctx, vm, arc) {
  	var inner = vm.borderAlign === 'inner';

  	if (inner) {
  		ctx.lineWidth = vm.borderWidth * 2;
  		ctx.lineJoin = 'round';
  	} else {
  		ctx.lineWidth = vm.borderWidth;
  		ctx.lineJoin = 'bevel';
  	}

  	if (arc.fullCircles) {
  		drawFullCircleBorders(ctx, vm, arc, inner);
  	}

  	if (inner) {
  		clipArc(ctx, arc);
  	}

  	ctx.beginPath();
  	ctx.arc(arc.x, arc.y, vm.outerRadius, arc.startAngle, arc.endAngle);
  	ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
  	ctx.closePath();
  	ctx.stroke();
  }

  var element_arc = core_element.extend({
  	_type: 'arc',

  	inLabelRange: function(mouseX) {
  		var vm = this._view;

  		if (vm) {
  			return (Math.pow(mouseX - vm.x, 2) < Math.pow(vm.radius + vm.hoverRadius, 2));
  		}
  		return false;
  	},

  	inRange: function(chartX, chartY) {
  		var vm = this._view;

  		if (vm) {
  			var pointRelativePosition = helpers$1.getAngleFromPoint(vm, {x: chartX, y: chartY});
  			var angle = pointRelativePosition.angle;
  			var distance = pointRelativePosition.distance;

  			// Sanitise angle range
  			var startAngle = vm.startAngle;
  			var endAngle = vm.endAngle;
  			while (endAngle < startAngle) {
  				endAngle += TAU;
  			}
  			while (angle > endAngle) {
  				angle -= TAU;
  			}
  			while (angle < startAngle) {
  				angle += TAU;
  			}

  			// Check if within the range of the open/close angle
  			var betweenAngles = (angle >= startAngle && angle <= endAngle);
  			var withinRadius = (distance >= vm.innerRadius && distance <= vm.outerRadius);

  			return (betweenAngles && withinRadius);
  		}
  		return false;
  	},

  	getCenterPoint: function() {
  		var vm = this._view;
  		var halfAngle = (vm.startAngle + vm.endAngle) / 2;
  		var halfRadius = (vm.innerRadius + vm.outerRadius) / 2;
  		return {
  			x: vm.x + Math.cos(halfAngle) * halfRadius,
  			y: vm.y + Math.sin(halfAngle) * halfRadius
  		};
  	},

  	getArea: function() {
  		var vm = this._view;
  		return Math.PI * ((vm.endAngle - vm.startAngle) / (2 * Math.PI)) * (Math.pow(vm.outerRadius, 2) - Math.pow(vm.innerRadius, 2));
  	},

  	tooltipPosition: function() {
  		var vm = this._view;
  		var centreAngle = vm.startAngle + ((vm.endAngle - vm.startAngle) / 2);
  		var rangeFromCentre = (vm.outerRadius - vm.innerRadius) / 2 + vm.innerRadius;

  		return {
  			x: vm.x + (Math.cos(centreAngle) * rangeFromCentre),
  			y: vm.y + (Math.sin(centreAngle) * rangeFromCentre)
  		};
  	},

  	draw: function() {
  		var ctx = this._chart.ctx;
  		var vm = this._view;
  		var pixelMargin = (vm.borderAlign === 'inner') ? 0.33 : 0;
  		var arc = {
  			x: vm.x,
  			y: vm.y,
  			innerRadius: vm.innerRadius,
  			outerRadius: Math.max(vm.outerRadius - pixelMargin, 0),
  			pixelMargin: pixelMargin,
  			startAngle: vm.startAngle,
  			endAngle: vm.endAngle,
  			fullCircles: Math.floor(vm.circumference / TAU)
  		};
  		var i;

  		ctx.save();

  		ctx.fillStyle = vm.backgroundColor;
  		ctx.strokeStyle = vm.borderColor;

  		if (arc.fullCircles) {
  			arc.endAngle = arc.startAngle + TAU;
  			ctx.beginPath();
  			ctx.arc(arc.x, arc.y, arc.outerRadius, arc.startAngle, arc.endAngle);
  			ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
  			ctx.closePath();
  			for (i = 0; i < arc.fullCircles; ++i) {
  				ctx.fill();
  			}
  			arc.endAngle = arc.startAngle + vm.circumference % TAU;
  		}

  		ctx.beginPath();
  		ctx.arc(arc.x, arc.y, arc.outerRadius, arc.startAngle, arc.endAngle);
  		ctx.arc(arc.x, arc.y, arc.innerRadius, arc.endAngle, arc.startAngle, true);
  		ctx.closePath();
  		ctx.fill();

  		if (vm.borderWidth) {
  			drawBorder(ctx, vm, arc);
  		}

  		ctx.restore();
  	}
  });

  var valueOrDefault$1 = helpers$1.valueOrDefault;

  var defaultColor = core_defaults.global.defaultColor;

  core_defaults._set('global', {
  	elements: {
  		line: {
  			tension: 0.4,
  			backgroundColor: defaultColor,
  			borderWidth: 3,
  			borderColor: defaultColor,
  			borderCapStyle: 'butt',
  			borderDash: [],
  			borderDashOffset: 0.0,
  			borderJoinStyle: 'miter',
  			capBezierPoints: true,
  			fill: true, // do we fill in the area between the line and its base axis
  		}
  	}
  });

  var element_line = core_element.extend({
  	_type: 'line',

  	draw: function() {
  		var me = this;
  		var vm = me._view;
  		var ctx = me._chart.ctx;
  		var spanGaps = vm.spanGaps;
  		var points = me._children.slice(); // clone array
  		var globalDefaults = core_defaults.global;
  		var globalOptionLineElements = globalDefaults.elements.line;
  		var lastDrawnIndex = -1;
  		var closePath = me._loop;
  		var index, previous, currentVM;

  		if (!points.length) {
  			return;
  		}

  		if (me._loop) {
  			for (index = 0; index < points.length; ++index) {
  				previous = helpers$1.previousItem(points, index);
  				// If the line has an open path, shift the point array
  				if (!points[index]._view.skip && previous._view.skip) {
  					points = points.slice(index).concat(points.slice(0, index));
  					closePath = spanGaps;
  					break;
  				}
  			}
  			// If the line has a close path, add the first point again
  			if (closePath) {
  				points.push(points[0]);
  			}
  		}

  		ctx.save();

  		// Stroke Line Options
  		ctx.lineCap = vm.borderCapStyle || globalOptionLineElements.borderCapStyle;

  		// IE 9 and 10 do not support line dash
  		if (ctx.setLineDash) {
  			ctx.setLineDash(vm.borderDash || globalOptionLineElements.borderDash);
  		}

  		ctx.lineDashOffset = valueOrDefault$1(vm.borderDashOffset, globalOptionLineElements.borderDashOffset);
  		ctx.lineJoin = vm.borderJoinStyle || globalOptionLineElements.borderJoinStyle;
  		ctx.lineWidth = valueOrDefault$1(vm.borderWidth, globalOptionLineElements.borderWidth);
  		ctx.strokeStyle = vm.borderColor || globalDefaults.defaultColor;

  		// Stroke Line
  		ctx.beginPath();

  		// First point moves to it's starting position no matter what
  		currentVM = points[0]._view;
  		if (!currentVM.skip) {
  			ctx.moveTo(currentVM.x, currentVM.y);
  			lastDrawnIndex = 0;
  		}

  		for (index = 1; index < points.length; ++index) {
  			currentVM = points[index]._view;
  			previous = lastDrawnIndex === -1 ? helpers$1.previousItem(points, index) : points[lastDrawnIndex];

  			if (!currentVM.skip) {
  				if ((lastDrawnIndex !== (index - 1) && !spanGaps) || lastDrawnIndex === -1) {
  					// There was a gap and this is the first point after the gap
  					ctx.moveTo(currentVM.x, currentVM.y);
  				} else {
  					// Line to next point
  					helpers$1.canvas.lineTo(ctx, previous._view, currentVM);
  				}
  				lastDrawnIndex = index;
  			}
  		}

  		if (closePath) {
  			ctx.closePath();
  		}

  		ctx.stroke();
  		ctx.restore();
  	}
  });

  var valueOrDefault$2 = helpers$1.valueOrDefault;

  var defaultColor$1 = core_defaults.global.defaultColor;

  core_defaults._set('global', {
  	elements: {
  		point: {
  			radius: 3,
  			pointStyle: 'circle',
  			backgroundColor: defaultColor$1,
  			borderColor: defaultColor$1,
  			borderWidth: 1,
  			// Hover
  			hitRadius: 1,
  			hoverRadius: 4,
  			hoverBorderWidth: 1
  		}
  	}
  });

  function xRange(mouseX) {
  	var vm = this._view;
  	return vm ? (Math.abs(mouseX - vm.x) < vm.radius + vm.hitRadius) : false;
  }

  function yRange(mouseY) {
  	var vm = this._view;
  	return vm ? (Math.abs(mouseY - vm.y) < vm.radius + vm.hitRadius) : false;
  }

  var element_point = core_element.extend({
  	_type: 'point',

  	inRange: function(mouseX, mouseY) {
  		var vm = this._view;
  		return vm ? ((Math.pow(mouseX - vm.x, 2) + Math.pow(mouseY - vm.y, 2)) < Math.pow(vm.hitRadius + vm.radius, 2)) : false;
  	},

  	inLabelRange: xRange,
  	inXRange: xRange,
  	inYRange: yRange,

  	getCenterPoint: function() {
  		var vm = this._view;
  		return {
  			x: vm.x,
  			y: vm.y
  		};
  	},

  	getArea: function() {
  		return Math.PI * Math.pow(this._view.radius, 2);
  	},

  	tooltipPosition: function() {
  		var vm = this._view;
  		return {
  			x: vm.x,
  			y: vm.y,
  			padding: vm.radius + vm.borderWidth
  		};
  	},

  	draw: function(chartArea) {
  		var vm = this._view;
  		var ctx = this._chart.ctx;
  		var pointStyle = vm.pointStyle;
  		var rotation = vm.rotation;
  		var radius = vm.radius;
  		var x = vm.x;
  		var y = vm.y;
  		var globalDefaults = core_defaults.global;
  		var defaultColor = globalDefaults.defaultColor; // eslint-disable-line no-shadow

  		if (vm.skip) {
  			return;
  		}

  		// Clipping for Points.
  		if (chartArea === undefined || helpers$1.canvas._isPointInArea(vm, chartArea)) {
  			ctx.strokeStyle = vm.borderColor || defaultColor;
  			ctx.lineWidth = valueOrDefault$2(vm.borderWidth, globalDefaults.elements.point.borderWidth);
  			ctx.fillStyle = vm.backgroundColor || defaultColor;
  			helpers$1.canvas.drawPoint(ctx, pointStyle, radius, x, y, rotation);
  		}
  	}
  });

  var defaultColor$2 = core_defaults.global.defaultColor;

  core_defaults._set('global', {
  	elements: {
  		rectangle: {
  			backgroundColor: defaultColor$2,
  			borderColor: defaultColor$2,
  			borderSkipped: 'bottom',
  			borderWidth: 0
  		}
  	}
  });

  function isVertical(vm) {
  	return vm && vm.width !== undefined;
  }

  /**
   * Helper function to get the bounds of the bar regardless of the orientation
   * @param bar {Chart.Element.Rectangle} the bar
   * @return {Bounds} bounds of the bar
   * @private
   */
  function getBarBounds(vm) {
  	var x1, x2, y1, y2, half;

  	if (isVertical(vm)) {
  		half = vm.width / 2;
  		x1 = vm.x - half;
  		x2 = vm.x + half;
  		y1 = Math.min(vm.y, vm.base);
  		y2 = Math.max(vm.y, vm.base);
  	} else {
  		half = vm.height / 2;
  		x1 = Math.min(vm.x, vm.base);
  		x2 = Math.max(vm.x, vm.base);
  		y1 = vm.y - half;
  		y2 = vm.y + half;
  	}

  	return {
  		left: x1,
  		top: y1,
  		right: x2,
  		bottom: y2
  	};
  }

  function swap(orig, v1, v2) {
  	return orig === v1 ? v2 : orig === v2 ? v1 : orig;
  }

  function parseBorderSkipped(vm) {
  	var edge = vm.borderSkipped;
  	var res = {};

  	if (!edge) {
  		return res;
  	}

  	if (vm.horizontal) {
  		if (vm.base > vm.x) {
  			edge = swap(edge, 'left', 'right');
  		}
  	} else if (vm.base < vm.y) {
  		edge = swap(edge, 'bottom', 'top');
  	}

  	res[edge] = true;
  	return res;
  }

  function parseBorderWidth(vm, maxW, maxH) {
  	var value = vm.borderWidth;
  	var skip = parseBorderSkipped(vm);
  	var t, r, b, l;

  	if (helpers$1.isObject(value)) {
  		t = +value.top || 0;
  		r = +value.right || 0;
  		b = +value.bottom || 0;
  		l = +value.left || 0;
  	} else {
  		t = r = b = l = +value || 0;
  	}

  	return {
  		t: skip.top || (t < 0) ? 0 : t > maxH ? maxH : t,
  		r: skip.right || (r < 0) ? 0 : r > maxW ? maxW : r,
  		b: skip.bottom || (b < 0) ? 0 : b > maxH ? maxH : b,
  		l: skip.left || (l < 0) ? 0 : l > maxW ? maxW : l
  	};
  }

  function boundingRects(vm) {
  	var bounds = getBarBounds(vm);
  	var width = bounds.right - bounds.left;
  	var height = bounds.bottom - bounds.top;
  	var border = parseBorderWidth(vm, width / 2, height / 2);

  	return {
  		outer: {
  			x: bounds.left,
  			y: bounds.top,
  			w: width,
  			h: height
  		},
  		inner: {
  			x: bounds.left + border.l,
  			y: bounds.top + border.t,
  			w: width - border.l - border.r,
  			h: height - border.t - border.b
  		}
  	};
  }

  function inRange(vm, x, y) {
  	var skipX = x === null;
  	var skipY = y === null;
  	var bounds = !vm || (skipX && skipY) ? false : getBarBounds(vm);

  	return bounds
  		&& (skipX || x >= bounds.left && x <= bounds.right)
  		&& (skipY || y >= bounds.top && y <= bounds.bottom);
  }

  var element_rectangle = core_element.extend({
  	_type: 'rectangle',

  	draw: function() {
  		var ctx = this._chart.ctx;
  		var vm = this._view;
  		var rects = boundingRects(vm);
  		var outer = rects.outer;
  		var inner = rects.inner;

  		ctx.fillStyle = vm.backgroundColor;
  		ctx.fillRect(outer.x, outer.y, outer.w, outer.h);

  		if (outer.w === inner.w && outer.h === inner.h) {
  			return;
  		}

  		ctx.save();
  		ctx.beginPath();
  		ctx.rect(outer.x, outer.y, outer.w, outer.h);
  		ctx.clip();
  		ctx.fillStyle = vm.borderColor;
  		ctx.rect(inner.x, inner.y, inner.w, inner.h);
  		ctx.fill('evenodd');
  		ctx.restore();
  	},

  	height: function() {
  		var vm = this._view;
  		return vm.base - vm.y;
  	},

  	inRange: function(mouseX, mouseY) {
  		return inRange(this._view, mouseX, mouseY);
  	},

  	inLabelRange: function(mouseX, mouseY) {
  		var vm = this._view;
  		return isVertical(vm)
  			? inRange(vm, mouseX, null)
  			: inRange(vm, null, mouseY);
  	},

  	inXRange: function(mouseX) {
  		return inRange(this._view, mouseX, null);
  	},

  	inYRange: function(mouseY) {
  		return inRange(this._view, null, mouseY);
  	},

  	getCenterPoint: function() {
  		var vm = this._view;
  		var x, y;
  		if (isVertical(vm)) {
  			x = vm.x;
  			y = (vm.y + vm.base) / 2;
  		} else {
  			x = (vm.x + vm.base) / 2;
  			y = vm.y;
  		}

  		return {x: x, y: y};
  	},

  	getArea: function() {
  		var vm = this._view;

  		return isVertical(vm)
  			? vm.width * Math.abs(vm.y - vm.base)
  			: vm.height * Math.abs(vm.x - vm.base);
  	},

  	tooltipPosition: function() {
  		var vm = this._view;
  		return {
  			x: vm.x,
  			y: vm.y
  		};
  	}
  });

  var elements = {};
  var Arc = element_arc;
  var Line = element_line;
  var Point = element_point;
  var Rectangle = element_rectangle;
  elements.Arc = Arc;
  elements.Line = Line;
  elements.Point = Point;
  elements.Rectangle = Rectangle;

  var deprecated = helpers$1._deprecated;
  var valueOrDefault$3 = helpers$1.valueOrDefault;

  core_defaults._set('bar', {
  	hover: {
  		mode: 'label'
  	},

  	scales: {
  		xAxes: [{
  			type: 'category',
  			offset: true,
  			gridLines: {
  				offsetGridLines: true
  			}
  		}],

  		yAxes: [{
  			type: 'linear'
  		}]
  	}
  });

  core_defaults._set('global', {
  	datasets: {
  		bar: {
  			categoryPercentage: 0.8,
  			barPercentage: 0.9
  		}
  	}
  });

  /**
   * Computes the "optimal" sample size to maintain bars equally sized while preventing overlap.
   * @private
   */
  function computeMinSampleSize(scale, pixels) {
  	var min = scale._length;
  	var prev, curr, i, ilen;

  	for (i = 1, ilen = pixels.length; i < ilen; ++i) {
  		min = Math.min(min, Math.abs(pixels[i] - pixels[i - 1]));
  	}

  	for (i = 0, ilen = scale.getTicks().length; i < ilen; ++i) {
  		curr = scale.getPixelForTick(i);
  		min = i > 0 ? Math.min(min, Math.abs(curr - prev)) : min;
  		prev = curr;
  	}

  	return min;
  }

  /**
   * Computes an "ideal" category based on the absolute bar thickness or, if undefined or null,
   * uses the smallest interval (see computeMinSampleSize) that prevents bar overlapping. This
   * mode currently always generates bars equally sized (until we introduce scriptable options?).
   * @private
   */
  function computeFitCategoryTraits(index, ruler, options) {
  	var thickness = options.barThickness;
  	var count = ruler.stackCount;
  	var curr = ruler.pixels[index];
  	var min = helpers$1.isNullOrUndef(thickness)
  		? computeMinSampleSize(ruler.scale, ruler.pixels)
  		: -1;
  	var size, ratio;

  	if (helpers$1.isNullOrUndef(thickness)) {
  		size = min * options.categoryPercentage;
  		ratio = options.barPercentage;
  	} else {
  		// When bar thickness is enforced, category and bar percentages are ignored.
  		// Note(SB): we could add support for relative bar thickness (e.g. barThickness: '50%')
  		// and deprecate barPercentage since this value is ignored when thickness is absolute.
  		size = thickness * count;
  		ratio = 1;
  	}

  	return {
  		chunk: size / count,
  		ratio: ratio,
  		start: curr - (size / 2)
  	};
  }

  /**
   * Computes an "optimal" category that globally arranges bars side by side (no gap when
   * percentage options are 1), based on the previous and following categories. This mode
   * generates bars with different widths when data are not evenly spaced.
   * @private
   */
  function computeFlexCategoryTraits(index, ruler, options) {
  	var pixels = ruler.pixels;
  	var curr = pixels[index];
  	var prev = index > 0 ? pixels[index - 1] : null;
  	var next = index < pixels.length - 1 ? pixels[index + 1] : null;
  	var percent = options.categoryPercentage;
  	var start, size;

  	if (prev === null) {
  		// first data: its size is double based on the next point or,
  		// if it's also the last data, we use the scale size.
  		prev = curr - (next === null ? ruler.end - ruler.start : next - curr);
  	}

  	if (next === null) {
  		// last data: its size is also double based on the previous point.
  		next = curr + curr - prev;
  	}

  	start = curr - (curr - Math.min(prev, next)) / 2 * percent;
  	size = Math.abs(next - prev) / 2 * percent;

  	return {
  		chunk: size / ruler.stackCount,
  		ratio: options.barPercentage,
  		start: start
  	};
  }

  var controller_bar = core_datasetController.extend({

  	dataElementType: elements.Rectangle,

  	/**
  	 * @private
  	 */
  	_dataElementOptions: [
  		'backgroundColor',
  		'borderColor',
  		'borderSkipped',
  		'borderWidth',
  		'barPercentage',
  		'barThickness',
  		'categoryPercentage',
  		'maxBarThickness',
  		'minBarLength'
  	],

  	initialize: function() {
  		var me = this;
  		var meta, scaleOpts;

  		core_datasetController.prototype.initialize.apply(me, arguments);

  		meta = me.getMeta();
  		meta.stack = me.getDataset().stack;
  		meta.bar = true;

  		scaleOpts = me._getIndexScale().options;
  		deprecated('bar chart', scaleOpts.barPercentage, 'scales.[x/y]Axes.barPercentage', 'dataset.barPercentage');
  		deprecated('bar chart', scaleOpts.barThickness, 'scales.[x/y]Axes.barThickness', 'dataset.barThickness');
  		deprecated('bar chart', scaleOpts.categoryPercentage, 'scales.[x/y]Axes.categoryPercentage', 'dataset.categoryPercentage');
  		deprecated('bar chart', me._getValueScale().options.minBarLength, 'scales.[x/y]Axes.minBarLength', 'dataset.minBarLength');
  		deprecated('bar chart', scaleOpts.maxBarThickness, 'scales.[x/y]Axes.maxBarThickness', 'dataset.maxBarThickness');
  	},

  	update: function(reset) {
  		var me = this;
  		var rects = me.getMeta().data;
  		var i, ilen;

  		me._ruler = me.getRuler();

  		for (i = 0, ilen = rects.length; i < ilen; ++i) {
  			me.updateElement(rects[i], i, reset);
  		}
  	},

  	updateElement: function(rectangle, index, reset) {
  		var me = this;
  		var meta = me.getMeta();
  		var dataset = me.getDataset();
  		var options = me._resolveDataElementOptions(rectangle, index);

  		rectangle._xScale = me.getScaleForId(meta.xAxisID);
  		rectangle._yScale = me.getScaleForId(meta.yAxisID);
  		rectangle._datasetIndex = me.index;
  		rectangle._index = index;
  		rectangle._model = {
  			backgroundColor: options.backgroundColor,
  			borderColor: options.borderColor,
  			borderSkipped: options.borderSkipped,
  			borderWidth: options.borderWidth,
  			datasetLabel: dataset.label,
  			label: me.chart.data.labels[index]
  		};

  		if (helpers$1.isArray(dataset.data[index])) {
  			rectangle._model.borderSkipped = null;
  		}

  		me._updateElementGeometry(rectangle, index, reset, options);

  		rectangle.pivot();
  	},

  	/**
  	 * @private
  	 */
  	_updateElementGeometry: function(rectangle, index, reset, options) {
  		var me = this;
  		var model = rectangle._model;
  		var vscale = me._getValueScale();
  		var base = vscale.getBasePixel();
  		var horizontal = vscale.isHorizontal();
  		var ruler = me._ruler || me.getRuler();
  		var vpixels = me.calculateBarValuePixels(me.index, index, options);
  		var ipixels = me.calculateBarIndexPixels(me.index, index, ruler, options);

  		model.horizontal = horizontal;
  		model.base = reset ? base : vpixels.base;
  		model.x = horizontal ? reset ? base : vpixels.head : ipixels.center;
  		model.y = horizontal ? ipixels.center : reset ? base : vpixels.head;
  		model.height = horizontal ? ipixels.size : undefined;
  		model.width = horizontal ? undefined : ipixels.size;
  	},

  	/**
  	 * Returns the stacks based on groups and bar visibility.
  	 * @param {number} [last] - The dataset index
  	 * @returns {string[]} The list of stack IDs
  	 * @private
  	 */
  	_getStacks: function(last) {
  		var me = this;
  		var scale = me._getIndexScale();
  		var metasets = scale._getMatchingVisibleMetas(me._type);
  		var stacked = scale.options.stacked;
  		var ilen = metasets.length;
  		var stacks = [];
  		var i, meta;

  		for (i = 0; i < ilen; ++i) {
  			meta = metasets[i];
  			// stacked   | meta.stack
  			//           | found | not found | undefined
  			// false     |   x   |     x     |     x
  			// true      |       |     x     |
  			// undefined |       |     x     |     x
  			if (stacked === false || stacks.indexOf(meta.stack) === -1 ||
  				(stacked === undefined && meta.stack === undefined)) {
  				stacks.push(meta.stack);
  			}
  			if (meta.index === last) {
  				break;
  			}
  		}

  		return stacks;
  	},

  	/**
  	 * Returns the effective number of stacks based on groups and bar visibility.
  	 * @private
  	 */
  	getStackCount: function() {
  		return this._getStacks().length;
  	},

  	/**
  	 * Returns the stack index for the given dataset based on groups and bar visibility.
  	 * @param {number} [datasetIndex] - The dataset index
  	 * @param {string} [name] - The stack name to find
  	 * @returns {number} The stack index
  	 * @private
  	 */
  	getStackIndex: function(datasetIndex, name) {
  		var stacks = this._getStacks(datasetIndex);
  		var index = (name !== undefined)
  			? stacks.indexOf(name)
  			: -1; // indexOf returns -1 if element is not present

  		return (index === -1)
  			? stacks.length - 1
  			: index;
  	},

  	/**
  	 * @private
  	 */
  	getRuler: function() {
  		var me = this;
  		var scale = me._getIndexScale();
  		var pixels = [];
  		var i, ilen;

  		for (i = 0, ilen = me.getMeta().data.length; i < ilen; ++i) {
  			pixels.push(scale.getPixelForValue(null, i, me.index));
  		}

  		return {
  			pixels: pixels,
  			start: scale._startPixel,
  			end: scale._endPixel,
  			stackCount: me.getStackCount(),
  			scale: scale
  		};
  	},

  	/**
  	 * Note: pixel values are not clamped to the scale area.
  	 * @private
  	 */
  	calculateBarValuePixels: function(datasetIndex, index, options) {
  		var me = this;
  		var chart = me.chart;
  		var scale = me._getValueScale();
  		var isHorizontal = scale.isHorizontal();
  		var datasets = chart.data.datasets;
  		var metasets = scale._getMatchingVisibleMetas(me._type);
  		var value = scale._parseValue(datasets[datasetIndex].data[index]);
  		var minBarLength = options.minBarLength;
  		var stacked = scale.options.stacked;
  		var stack = me.getMeta().stack;
  		var start = value.start === undefined ? 0 : value.max >= 0 && value.min >= 0 ? value.min : value.max;
  		var length = value.start === undefined ? value.end : value.max >= 0 && value.min >= 0 ? value.max - value.min : value.min - value.max;
  		var ilen = metasets.length;
  		var i, imeta, ivalue, base, head, size, stackLength;

  		if (stacked || (stacked === undefined && stack !== undefined)) {
  			for (i = 0; i < ilen; ++i) {
  				imeta = metasets[i];

  				if (imeta.index === datasetIndex) {
  					break;
  				}

  				if (imeta.stack === stack) {
  					stackLength = scale._parseValue(datasets[imeta.index].data[index]);
  					ivalue = stackLength.start === undefined ? stackLength.end : stackLength.min >= 0 && stackLength.max >= 0 ? stackLength.max : stackLength.min;

  					if ((value.min < 0 && ivalue < 0) || (value.max >= 0 && ivalue > 0)) {
  						start += ivalue;
  					}
  				}
  			}
  		}

  		base = scale.getPixelForValue(start);
  		head = scale.getPixelForValue(start + length);
  		size = head - base;

  		if (minBarLength !== undefined && Math.abs(size) < minBarLength) {
  			size = minBarLength;
  			if (length >= 0 && !isHorizontal || length < 0 && isHorizontal) {
  				head = base - minBarLength;
  			} else {
  				head = base + minBarLength;
  			}
  		}

  		return {
  			size: size,
  			base: base,
  			head: head,
  			center: head + size / 2
  		};
  	},

  	/**
  	 * @private
  	 */
  	calculateBarIndexPixels: function(datasetIndex, index, ruler, options) {
  		var me = this;
  		var range = options.barThickness === 'flex'
  			? computeFlexCategoryTraits(index, ruler, options)
  			: computeFitCategoryTraits(index, ruler, options);

  		var stackIndex = me.getStackIndex(datasetIndex, me.getMeta().stack);
  		var center = range.start + (range.chunk * stackIndex) + (range.chunk / 2);
  		var size = Math.min(
  			valueOrDefault$3(options.maxBarThickness, Infinity),
  			range.chunk * range.ratio);

  		return {
  			base: center - size / 2,
  			head: center + size / 2,
  			center: center,
  			size: size
  		};
  	},

  	draw: function() {
  		var me = this;
  		var chart = me.chart;
  		var scale = me._getValueScale();
  		var rects = me.getMeta().data;
  		var dataset = me.getDataset();
  		var ilen = rects.length;
  		var i = 0;

  		helpers$1.canvas.clipArea(chart.ctx, chart.chartArea);

  		for (; i < ilen; ++i) {
  			var val = scale._parseValue(dataset.data[i]);
  			if (!isNaN(val.min) && !isNaN(val.max)) {
  				rects[i].draw();
  			}
  		}

  		helpers$1.canvas.unclipArea(chart.ctx);
  	},

  	/**
  	 * @private
  	 */
  	_resolveDataElementOptions: function() {
  		var me = this;
  		var values = helpers$1.extend({}, core_datasetController.prototype._resolveDataElementOptions.apply(me, arguments));
  		var indexOpts = me._getIndexScale().options;
  		var valueOpts = me._getValueScale().options;

  		values.barPercentage = valueOrDefault$3(indexOpts.barPercentage, values.barPercentage);
  		values.barThickness = valueOrDefault$3(indexOpts.barThickness, values.barThickness);
  		values.categoryPercentage = valueOrDefault$3(indexOpts.categoryPercentage, values.categoryPercentage);
  		values.maxBarThickness = valueOrDefault$3(indexOpts.maxBarThickness, values.maxBarThickness);
  		values.minBarLength = valueOrDefault$3(valueOpts.minBarLength, values.minBarLength);

  		return values;
  	}

  });

  var valueOrDefault$4 = helpers$1.valueOrDefault;
  var resolve$1 = helpers$1.options.resolve;

  core_defaults._set('bubble', {
  	hover: {
  		mode: 'single'
  	},

  	scales: {
  		xAxes: [{
  			type: 'linear', // bubble should probably use a linear scale by default
  			position: 'bottom',
  			id: 'x-axis-0' // need an ID so datasets can reference the scale
  		}],
  		yAxes: [{
  			type: 'linear',
  			position: 'left',
  			id: 'y-axis-0'
  		}]
  	},

  	tooltips: {
  		callbacks: {
  			title: function() {
  				// Title doesn't make sense for scatter since we format the data as a point
  				return '';
  			},
  			label: function(item, data) {
  				var datasetLabel = data.datasets[item.datasetIndex].label || '';
  				var dataPoint = data.datasets[item.datasetIndex].data[item.index];
  				return datasetLabel + ': (' + item.xLabel + ', ' + item.yLabel + ', ' + dataPoint.r + ')';
  			}
  		}
  	}
  });

  var controller_bubble = core_datasetController.extend({
  	/**
  	 * @protected
  	 */
  	dataElementType: elements.Point,

  	/**
  	 * @private
  	 */
  	_dataElementOptions: [
  		'backgroundColor',
  		'borderColor',
  		'borderWidth',
  		'hoverBackgroundColor',
  		'hoverBorderColor',
  		'hoverBorderWidth',
  		'hoverRadius',
  		'hitRadius',
  		'pointStyle',
  		'rotation'
  	],

  	/**
  	 * @protected
  	 */
  	update: function(reset) {
  		var me = this;
  		var meta = me.getMeta();
  		var points = meta.data;

  		// Update Points
  		helpers$1.each(points, function(point, index) {
  			me.updateElement(point, index, reset);
  		});
  	},

  	/**
  	 * @protected
  	 */
  	updateElement: function(point, index, reset) {
  		var me = this;
  		var meta = me.getMeta();
  		var custom = point.custom || {};
  		var xScale = me.getScaleForId(meta.xAxisID);
  		var yScale = me.getScaleForId(meta.yAxisID);
  		var options = me._resolveDataElementOptions(point, index);
  		var data = me.getDataset().data[index];
  		var dsIndex = me.index;

  		var x = reset ? xScale.getPixelForDecimal(0.5) : xScale.getPixelForValue(typeof data === 'object' ? data : NaN, index, dsIndex);
  		var y = reset ? yScale.getBasePixel() : yScale.getPixelForValue(data, index, dsIndex);

  		point._xScale = xScale;
  		point._yScale = yScale;
  		point._options = options;
  		point._datasetIndex = dsIndex;
  		point._index = index;
  		point._model = {
  			backgroundColor: options.backgroundColor,
  			borderColor: options.borderColor,
  			borderWidth: options.borderWidth,
  			hitRadius: options.hitRadius,
  			pointStyle: options.pointStyle,
  			rotation: options.rotation,
  			radius: reset ? 0 : options.radius,
  			skip: custom.skip || isNaN(x) || isNaN(y),
  			x: x,
  			y: y,
  		};

  		point.pivot();
  	},

  	/**
  	 * @protected
  	 */
  	setHoverStyle: function(point) {
  		var model = point._model;
  		var options = point._options;
  		var getHoverColor = helpers$1.getHoverColor;

  		point.$previousStyle = {
  			backgroundColor: model.backgroundColor,
  			borderColor: model.borderColor,
  			borderWidth: model.borderWidth,
  			radius: model.radius
  		};

  		model.backgroundColor = valueOrDefault$4(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
  		model.borderColor = valueOrDefault$4(options.hoverBorderColor, getHoverColor(options.borderColor));
  		model.borderWidth = valueOrDefault$4(options.hoverBorderWidth, options.borderWidth);
  		model.radius = options.radius + options.hoverRadius;
  	},

  	/**
  	 * @private
  	 */
  	_resolveDataElementOptions: function(point, index) {
  		var me = this;
  		var chart = me.chart;
  		var dataset = me.getDataset();
  		var custom = point.custom || {};
  		var data = dataset.data[index] || {};
  		var values = core_datasetController.prototype._resolveDataElementOptions.apply(me, arguments);

  		// Scriptable options
  		var context = {
  			chart: chart,
  			dataIndex: index,
  			dataset: dataset,
  			datasetIndex: me.index
  		};

  		// In case values were cached (and thus frozen), we need to clone the values
  		if (me._cachedDataOpts === values) {
  			values = helpers$1.extend({}, values);
  		}

  		// Custom radius resolution
  		values.radius = resolve$1([
  			custom.radius,
  			data.r,
  			me._config.radius,
  			chart.options.elements.point.radius
  		], context, index);

  		return values;
  	}
  });

  var valueOrDefault$5 = helpers$1.valueOrDefault;

  var PI$1 = Math.PI;
  var DOUBLE_PI$1 = PI$1 * 2;
  var HALF_PI$1 = PI$1 / 2;

  core_defaults._set('doughnut', {
  	animation: {
  		// Boolean - Whether we animate the rotation of the Doughnut
  		animateRotate: true,
  		// Boolean - Whether we animate scaling the Doughnut from the centre
  		animateScale: false
  	},
  	hover: {
  		mode: 'single'
  	},
  	legendCallback: function(chart) {
  		var list = document.createElement('ul');
  		var data = chart.data;
  		var datasets = data.datasets;
  		var labels = data.labels;
  		var i, ilen, listItem, listItemSpan;

  		list.setAttribute('class', chart.id + '-legend');
  		if (datasets.length) {
  			for (i = 0, ilen = datasets[0].data.length; i < ilen; ++i) {
  				listItem = list.appendChild(document.createElement('li'));
  				listItemSpan = listItem.appendChild(document.createElement('span'));
  				listItemSpan.style.backgroundColor = datasets[0].backgroundColor[i];
  				if (labels[i]) {
  					listItem.appendChild(document.createTextNode(labels[i]));
  				}
  			}
  		}

  		return list.outerHTML;
  	},
  	legend: {
  		labels: {
  			generateLabels: function(chart) {
  				var data = chart.data;
  				if (data.labels.length && data.datasets.length) {
  					return data.labels.map(function(label, i) {
  						var meta = chart.getDatasetMeta(0);
  						var style = meta.controller.getStyle(i);

  						return {
  							text: label,
  							fillStyle: style.backgroundColor,
  							strokeStyle: style.borderColor,
  							lineWidth: style.borderWidth,
  							hidden: isNaN(data.datasets[0].data[i]) || meta.data[i].hidden,

  							// Extra data used for toggling the correct item
  							index: i
  						};
  					});
  				}
  				return [];
  			}
  		},

  		onClick: function(e, legendItem) {
  			var index = legendItem.index;
  			var chart = this.chart;
  			var i, ilen, meta;

  			for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
  				meta = chart.getDatasetMeta(i);
  				// toggle visibility of index if exists
  				if (meta.data[index]) {
  					meta.data[index].hidden = !meta.data[index].hidden;
  				}
  			}

  			chart.update();
  		}
  	},

  	// The percentage of the chart that we cut out of the middle.
  	cutoutPercentage: 50,

  	// The rotation of the chart, where the first data arc begins.
  	rotation: -HALF_PI$1,

  	// The total circumference of the chart.
  	circumference: DOUBLE_PI$1,

  	// Need to override these to give a nice default
  	tooltips: {
  		callbacks: {
  			title: function() {
  				return '';
  			},
  			label: function(tooltipItem, data) {
  				var dataLabel = data.labels[tooltipItem.index];
  				var value = ': ' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];

  				if (helpers$1.isArray(dataLabel)) {
  					// show value on first line of multiline label
  					// need to clone because we are changing the value
  					dataLabel = dataLabel.slice();
  					dataLabel[0] += value;
  				} else {
  					dataLabel += value;
  				}

  				return dataLabel;
  			}
  		}
  	}
  });

  var controller_doughnut = core_datasetController.extend({

  	dataElementType: elements.Arc,

  	linkScales: helpers$1.noop,

  	/**
  	 * @private
  	 */
  	_dataElementOptions: [
  		'backgroundColor',
  		'borderColor',
  		'borderWidth',
  		'borderAlign',
  		'hoverBackgroundColor',
  		'hoverBorderColor',
  		'hoverBorderWidth' ],

  	// Get index of the dataset in relation to the visible datasets. This allows determining the inner and outer radius correctly
  	getRingIndex: function(datasetIndex) {
  		var ringIndex = 0;

  		for (var j = 0; j < datasetIndex; ++j) {
  			if (this.chart.isDatasetVisible(j)) {
  				++ringIndex;
  			}
  		}

  		return ringIndex;
  	},

  	update: function(reset) {
  		var me = this;
  		var chart = me.chart;
  		var chartArea = chart.chartArea;
  		var opts = chart.options;
  		var ratioX = 1;
  		var ratioY = 1;
  		var offsetX = 0;
  		var offsetY = 0;
  		var meta = me.getMeta();
  		var arcs = meta.data;
  		var cutout = opts.cutoutPercentage / 100 || 0;
  		var circumference = opts.circumference;
  		var chartWeight = me._getRingWeight(me.index);
  		var maxWidth, maxHeight, i, ilen;

  		// If the chart's circumference isn't a full circle, calculate size as a ratio of the width/height of the arc
  		if (circumference < DOUBLE_PI$1) {
  			var startAngle = opts.rotation % DOUBLE_PI$1;
  			startAngle += startAngle >= PI$1 ? -DOUBLE_PI$1 : startAngle < -PI$1 ? DOUBLE_PI$1 : 0;
  			var endAngle = startAngle + circumference;
  			var startX = Math.cos(startAngle);
  			var startY = Math.sin(startAngle);
  			var endX = Math.cos(endAngle);
  			var endY = Math.sin(endAngle);
  			var contains0 = (startAngle <= 0 && endAngle >= 0) || endAngle >= DOUBLE_PI$1;
  			var contains90 = (startAngle <= HALF_PI$1 && endAngle >= HALF_PI$1) || endAngle >= DOUBLE_PI$1 + HALF_PI$1;
  			var contains180 = startAngle === -PI$1 || endAngle >= PI$1;
  			var contains270 = (startAngle <= -HALF_PI$1 && endAngle >= -HALF_PI$1) || endAngle >= PI$1 + HALF_PI$1;
  			var minX = contains180 ? -1 : Math.min(startX, startX * cutout, endX, endX * cutout);
  			var minY = contains270 ? -1 : Math.min(startY, startY * cutout, endY, endY * cutout);
  			var maxX = contains0 ? 1 : Math.max(startX, startX * cutout, endX, endX * cutout);
  			var maxY = contains90 ? 1 : Math.max(startY, startY * cutout, endY, endY * cutout);
  			ratioX = (maxX - minX) / 2;
  			ratioY = (maxY - minY) / 2;
  			offsetX = -(maxX + minX) / 2;
  			offsetY = -(maxY + minY) / 2;
  		}

  		for (i = 0, ilen = arcs.length; i < ilen; ++i) {
  			arcs[i]._options = me._resolveDataElementOptions(arcs[i], i);
  		}

  		chart.borderWidth = me.getMaxBorderWidth();
  		maxWidth = (chartArea.right - chartArea.left - chart.borderWidth) / ratioX;
  		maxHeight = (chartArea.bottom - chartArea.top - chart.borderWidth) / ratioY;
  		chart.outerRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);
  		chart.innerRadius = Math.max(chart.outerRadius * cutout, 0);
  		chart.radiusLength = (chart.outerRadius - chart.innerRadius) / (me._getVisibleDatasetWeightTotal() || 1);
  		chart.offsetX = offsetX * chart.outerRadius;
  		chart.offsetY = offsetY * chart.outerRadius;

  		meta.total = me.calculateTotal();

  		me.outerRadius = chart.outerRadius - chart.radiusLength * me._getRingWeightOffset(me.index);
  		me.innerRadius = Math.max(me.outerRadius - chart.radiusLength * chartWeight, 0);

  		for (i = 0, ilen = arcs.length; i < ilen; ++i) {
  			me.updateElement(arcs[i], i, reset);
  		}
  	},

  	updateElement: function(arc, index, reset) {
  		var me = this;
  		var chart = me.chart;
  		var chartArea = chart.chartArea;
  		var opts = chart.options;
  		var animationOpts = opts.animation;
  		var centerX = (chartArea.left + chartArea.right) / 2;
  		var centerY = (chartArea.top + chartArea.bottom) / 2;
  		var startAngle = opts.rotation; // non reset case handled later
  		var endAngle = opts.rotation; // non reset case handled later
  		var dataset = me.getDataset();
  		var circumference = reset && animationOpts.animateRotate ? 0 : arc.hidden ? 0 : me.calculateCircumference(dataset.data[index]) * (opts.circumference / DOUBLE_PI$1);
  		var innerRadius = reset && animationOpts.animateScale ? 0 : me.innerRadius;
  		var outerRadius = reset && animationOpts.animateScale ? 0 : me.outerRadius;
  		var options = arc._options || {};

  		helpers$1.extend(arc, {
  			// Utility
  			_datasetIndex: me.index,
  			_index: index,

  			// Desired view properties
  			_model: {
  				backgroundColor: options.backgroundColor,
  				borderColor: options.borderColor,
  				borderWidth: options.borderWidth,
  				borderAlign: options.borderAlign,
  				x: centerX + chart.offsetX,
  				y: centerY + chart.offsetY,
  				startAngle: startAngle,
  				endAngle: endAngle,
  				circumference: circumference,
  				outerRadius: outerRadius,
  				innerRadius: innerRadius,
  				label: helpers$1.valueAtIndexOrDefault(dataset.label, index, chart.data.labels[index])
  			}
  		});

  		var model = arc._model;

  		// Set correct angles if not resetting
  		if (!reset || !animationOpts.animateRotate) {
  			if (index === 0) {
  				model.startAngle = opts.rotation;
  			} else {
  				model.startAngle = me.getMeta().data[index - 1]._model.endAngle;
  			}

  			model.endAngle = model.startAngle + model.circumference;
  		}

  		arc.pivot();
  	},

  	calculateTotal: function() {
  		var dataset = this.getDataset();
  		var meta = this.getMeta();
  		var total = 0;
  		var value;

  		helpers$1.each(meta.data, function(element, index) {
  			value = dataset.data[index];
  			if (!isNaN(value) && !element.hidden) {
  				total += Math.abs(value);
  			}
  		});

  		/* if (total === 0) {
  			total = NaN;
  		}*/

  		return total;
  	},

  	calculateCircumference: function(value) {
  		var total = this.getMeta().total;
  		if (total > 0 && !isNaN(value)) {
  			return DOUBLE_PI$1 * (Math.abs(value) / total);
  		}
  		return 0;
  	},

  	// gets the max border or hover width to properly scale pie charts
  	getMaxBorderWidth: function(arcs) {
  		var me = this;
  		var max = 0;
  		var chart = me.chart;
  		var i, ilen, meta, arc, controller, options, borderWidth, hoverWidth;

  		if (!arcs) {
  			// Find the outmost visible dataset
  			for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {
  				if (chart.isDatasetVisible(i)) {
  					meta = chart.getDatasetMeta(i);
  					arcs = meta.data;
  					if (i !== me.index) {
  						controller = meta.controller;
  					}
  					break;
  				}
  			}
  		}

  		if (!arcs) {
  			return 0;
  		}

  		for (i = 0, ilen = arcs.length; i < ilen; ++i) {
  			arc = arcs[i];
  			if (controller) {
  				controller._configure();
  				options = controller._resolveDataElementOptions(arc, i);
  			} else {
  				options = arc._options;
  			}
  			if (options.borderAlign !== 'inner') {
  				borderWidth = options.borderWidth;
  				hoverWidth = options.hoverBorderWidth;

  				max = borderWidth > max ? borderWidth : max;
  				max = hoverWidth > max ? hoverWidth : max;
  			}
  		}
  		return max;
  	},

  	/**
  	 * @protected
  	 */
  	setHoverStyle: function(arc) {
  		var model = arc._model;
  		var options = arc._options;
  		var getHoverColor = helpers$1.getHoverColor;

  		arc.$previousStyle = {
  			backgroundColor: model.backgroundColor,
  			borderColor: model.borderColor,
  			borderWidth: model.borderWidth,
  		};

  		model.backgroundColor = valueOrDefault$5(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
  		model.borderColor = valueOrDefault$5(options.hoverBorderColor, getHoverColor(options.borderColor));
  		model.borderWidth = valueOrDefault$5(options.hoverBorderWidth, options.borderWidth);
  	},

  	/**
  	 * Get radius length offset of the dataset in relation to the visible datasets weights. This allows determining the inner and outer radius correctly
  	 * @private
  	 */
  	_getRingWeightOffset: function(datasetIndex) {
  		var ringWeightOffset = 0;

  		for (var i = 0; i < datasetIndex; ++i) {
  			if (this.chart.isDatasetVisible(i)) {
  				ringWeightOffset += this._getRingWeight(i);
  			}
  		}

  		return ringWeightOffset;
  	},

  	/**
  	 * @private
  	 */
  	_getRingWeight: function(dataSetIndex) {
  		return Math.max(valueOrDefault$5(this.chart.data.datasets[dataSetIndex].weight, 1), 0);
  	},

  	/**
  	 * Returns the sum of all visibile data set weights.  This value can be 0.
  	 * @private
  	 */
  	_getVisibleDatasetWeightTotal: function() {
  		return this._getRingWeightOffset(this.chart.data.datasets.length);
  	}
  });

  core_defaults._set('horizontalBar', {
  	hover: {
  		mode: 'index',
  		axis: 'y'
  	},

  	scales: {
  		xAxes: [{
  			type: 'linear',
  			position: 'bottom'
  		}],

  		yAxes: [{
  			type: 'category',
  			position: 'left',
  			offset: true,
  			gridLines: {
  				offsetGridLines: true
  			}
  		}]
  	},

  	elements: {
  		rectangle: {
  			borderSkipped: 'left'
  		}
  	},

  	tooltips: {
  		mode: 'index',
  		axis: 'y'
  	}
  });

  core_defaults._set('global', {
  	datasets: {
  		horizontalBar: {
  			categoryPercentage: 0.8,
  			barPercentage: 0.9
  		}
  	}
  });

  var controller_horizontalBar = controller_bar.extend({
  	/**
  	 * @private
  	 */
  	_getValueScaleId: function() {
  		return this.getMeta().xAxisID;
  	},

  	/**
  	 * @private
  	 */
  	_getIndexScaleId: function() {
  		return this.getMeta().yAxisID;
  	}
  });

  var valueOrDefault$6 = helpers$1.valueOrDefault;
  var resolve$2 = helpers$1.options.resolve;
  var isPointInArea = helpers$1.canvas._isPointInArea;

  core_defaults._set('line', {
  	showLines: true,
  	spanGaps: false,

  	hover: {
  		mode: 'label'
  	},

  	scales: {
  		xAxes: [{
  			type: 'category',
  			id: 'x-axis-0'
  		}],
  		yAxes: [{
  			type: 'linear',
  			id: 'y-axis-0'
  		}]
  	}
  });

  function scaleClip(scale, halfBorderWidth) {
  	var tickOpts = scale && scale.options.ticks || {};
  	var reverse = tickOpts.reverse;
  	var min = tickOpts.min === undefined ? halfBorderWidth : 0;
  	var max = tickOpts.max === undefined ? halfBorderWidth : 0;
  	return {
  		start: reverse ? max : min,
  		end: reverse ? min : max
  	};
  }

  function defaultClip(xScale, yScale, borderWidth) {
  	var halfBorderWidth = borderWidth / 2;
  	var x = scaleClip(xScale, halfBorderWidth);
  	var y = scaleClip(yScale, halfBorderWidth);

  	return {
  		top: y.end,
  		right: x.end,
  		bottom: y.start,
  		left: x.start
  	};
  }

  function toClip(value) {
  	var t, r, b, l;

  	if (helpers$1.isObject(value)) {
  		t = value.top;
  		r = value.right;
  		b = value.bottom;
  		l = value.left;
  	} else {
  		t = r = b = l = value;
  	}

  	return {
  		top: t,
  		right: r,
  		bottom: b,
  		left: l
  	};
  }


  var controller_line = core_datasetController.extend({

  	datasetElementType: elements.Line,

  	dataElementType: elements.Point,

  	/**
  	 * @private
  	 */
  	_datasetElementOptions: [
  		'backgroundColor',
  		'borderCapStyle',
  		'borderColor',
  		'borderDash',
  		'borderDashOffset',
  		'borderJoinStyle',
  		'borderWidth',
  		'cubicInterpolationMode',
  		'fill'
  	],

  	/**
  	 * @private
  	 */
  	_dataElementOptions: {
  		backgroundColor: 'pointBackgroundColor',
  		borderColor: 'pointBorderColor',
  		borderWidth: 'pointBorderWidth',
  		hitRadius: 'pointHitRadius',
  		hoverBackgroundColor: 'pointHoverBackgroundColor',
  		hoverBorderColor: 'pointHoverBorderColor',
  		hoverBorderWidth: 'pointHoverBorderWidth',
  		hoverRadius: 'pointHoverRadius',
  		pointStyle: 'pointStyle',
  		radius: 'pointRadius',
  		rotation: 'pointRotation'
  	},

  	update: function(reset) {
  		var me = this;
  		var meta = me.getMeta();
  		var line = meta.dataset;
  		var points = meta.data || [];
  		var options = me.chart.options;
  		var config = me._config;
  		var showLine = me._showLine = valueOrDefault$6(config.showLine, options.showLines);
  		var i, ilen;

  		me._xScale = me.getScaleForId(meta.xAxisID);
  		me._yScale = me.getScaleForId(meta.yAxisID);

  		// Update Line
  		if (showLine) {
  			// Compatibility: If the properties are defined with only the old name, use those values
  			if (config.tension !== undefined && config.lineTension === undefined) {
  				config.lineTension = config.tension;
  			}

  			// Utility
  			line._scale = me._yScale;
  			line._datasetIndex = me.index;
  			// Data
  			line._children = points;
  			// Model
  			line._model = me._resolveDatasetElementOptions(line);

  			line.pivot();
  		}

  		// Update Points
  		for (i = 0, ilen = points.length; i < ilen; ++i) {
  			me.updateElement(points[i], i, reset);
  		}

  		if (showLine && line._model.tension !== 0) {
  			me.updateBezierControlPoints();
  		}

  		// Now pivot the point for animation
  		for (i = 0, ilen = points.length; i < ilen; ++i) {
  			points[i].pivot();
  		}
  	},

  	updateElement: function(point, index, reset) {
  		var me = this;
  		var meta = me.getMeta();
  		var custom = point.custom || {};
  		var dataset = me.getDataset();
  		var datasetIndex = me.index;
  		var value = dataset.data[index];
  		var xScale = me._xScale;
  		var yScale = me._yScale;
  		var lineModel = meta.dataset._model;
  		var x, y;

  		var options = me._resolveDataElementOptions(point, index);

  		x = xScale.getPixelForValue(typeof value === 'object' ? value : NaN, index, datasetIndex);
  		y = reset ? yScale.getBasePixel() : me.calculatePointY(value, index, datasetIndex);

  		// Utility
  		point._xScale = xScale;
  		point._yScale = yScale;
  		point._options = options;
  		point._datasetIndex = datasetIndex;
  		point._index = index;

  		// Desired view properties
  		point._model = {
  			x: x,
  			y: y,
  			skip: custom.skip || isNaN(x) || isNaN(y),
  			// Appearance
  			radius: options.radius,
  			pointStyle: options.pointStyle,
  			rotation: options.rotation,
  			backgroundColor: options.backgroundColor,
  			borderColor: options.borderColor,
  			borderWidth: options.borderWidth,
  			tension: valueOrDefault$6(custom.tension, lineModel ? lineModel.tension : 0),
  			steppedLine: lineModel ? lineModel.steppedLine : false,
  			// Tooltip
  			hitRadius: options.hitRadius
  		};
  	},

  	/**
  	 * @private
  	 */
  	_resolveDatasetElementOptions: function(element) {
  		var me = this;
  		var config = me._config;
  		var custom = element.custom || {};
  		var options = me.chart.options;
  		var lineOptions = options.elements.line;
  		var values = core_datasetController.prototype._resolveDatasetElementOptions.apply(me, arguments);

  		// The default behavior of lines is to break at null values, according
  		// to https://github.com/chartjs/Chart.js/issues/2435#issuecomment-216718158
  		// This option gives lines the ability to span gaps
  		values.spanGaps = valueOrDefault$6(config.spanGaps, options.spanGaps);
  		values.tension = valueOrDefault$6(config.lineTension, lineOptions.tension);
  		values.steppedLine = resolve$2([custom.steppedLine, config.steppedLine, lineOptions.stepped]);
  		values.clip = toClip(valueOrDefault$6(config.clip, defaultClip(me._xScale, me._yScale, values.borderWidth)));

  		return values;
  	},

  	calculatePointY: function(value, index, datasetIndex) {
  		var me = this;
  		var chart = me.chart;
  		var yScale = me._yScale;
  		var sumPos = 0;
  		var sumNeg = 0;
  		var i, ds, dsMeta, stackedRightValue, rightValue, metasets, ilen;

  		if (yScale.options.stacked) {
  			rightValue = +yScale.getRightValue(value);
  			metasets = chart._getSortedVisibleDatasetMetas();
  			ilen = metasets.length;

  			for (i = 0; i < ilen; ++i) {
  				dsMeta = metasets[i];
  				if (dsMeta.index === datasetIndex) {
  					break;
  				}

  				ds = chart.data.datasets[dsMeta.index];
  				if (dsMeta.type === 'line' && dsMeta.yAxisID === yScale.id) {
  					stackedRightValue = +yScale.getRightValue(ds.data[index]);
  					if (stackedRightValue < 0) {
  						sumNeg += stackedRightValue || 0;
  					} else {
  						sumPos += stackedRightValue || 0;
  					}
  				}
  			}

  			if (rightValue < 0) {
  				return yScale.getPixelForValue(sumNeg + rightValue);
  			}
  			return yScale.getPixelForValue(sumPos + rightValue);
  		}
  		return yScale.getPixelForValue(value);
  	},

  	updateBezierControlPoints: function() {
  		var me = this;
  		var chart = me.chart;
  		var meta = me.getMeta();
  		var lineModel = meta.dataset._model;
  		var area = chart.chartArea;
  		var points = meta.data || [];
  		var i, ilen, model, controlPoints;

  		// Only consider points that are drawn in case the spanGaps option is used
  		if (lineModel.spanGaps) {
  			points = points.filter(function(pt) {
  				return !pt._model.skip;
  			});
  		}

  		function capControlPoint(pt, min, max) {
  			return Math.max(Math.min(pt, max), min);
  		}

  		if (lineModel.cubicInterpolationMode === 'monotone') {
  			helpers$1.splineCurveMonotone(points);
  		} else {
  			for (i = 0, ilen = points.length; i < ilen; ++i) {
  				model = points[i]._model;
  				controlPoints = helpers$1.splineCurve(
  					helpers$1.previousItem(points, i)._model,
  					model,
  					helpers$1.nextItem(points, i)._model,
  					lineModel.tension
  				);
  				model.controlPointPreviousX = controlPoints.previous.x;
  				model.controlPointPreviousY = controlPoints.previous.y;
  				model.controlPointNextX = controlPoints.next.x;
  				model.controlPointNextY = controlPoints.next.y;
  			}
  		}

  		if (chart.options.elements.line.capBezierPoints) {
  			for (i = 0, ilen = points.length; i < ilen; ++i) {
  				model = points[i]._model;
  				if (isPointInArea(model, area)) {
  					if (i > 0 && isPointInArea(points[i - 1]._model, area)) {
  						model.controlPointPreviousX = capControlPoint(model.controlPointPreviousX, area.left, area.right);
  						model.controlPointPreviousY = capControlPoint(model.controlPointPreviousY, area.top, area.bottom);
  					}
  					if (i < points.length - 1 && isPointInArea(points[i + 1]._model, area)) {
  						model.controlPointNextX = capControlPoint(model.controlPointNextX, area.left, area.right);
  						model.controlPointNextY = capControlPoint(model.controlPointNextY, area.top, area.bottom);
  					}
  				}
  			}
  		}
  	},

  	draw: function() {
  		var me = this;
  		var chart = me.chart;
  		var meta = me.getMeta();
  		var points = meta.data || [];
  		var area = chart.chartArea;
  		var canvas = chart.canvas;
  		var i = 0;
  		var ilen = points.length;
  		var clip;

  		if (me._showLine) {
  			clip = meta.dataset._model.clip;

  			helpers$1.canvas.clipArea(chart.ctx, {
  				left: clip.left === false ? 0 : area.left - clip.left,
  				right: clip.right === false ? canvas.width : area.right + clip.right,
  				top: clip.top === false ? 0 : area.top - clip.top,
  				bottom: clip.bottom === false ? canvas.height : area.bottom + clip.bottom
  			});

  			meta.dataset.draw();

  			helpers$1.canvas.unclipArea(chart.ctx);
  		}

  		// Draw the points
  		for (; i < ilen; ++i) {
  			points[i].draw(area);
  		}
  	},

  	/**
  	 * @protected
  	 */
  	setHoverStyle: function(point) {
  		var model = point._model;
  		var options = point._options;
  		var getHoverColor = helpers$1.getHoverColor;

  		point.$previousStyle = {
  			backgroundColor: model.backgroundColor,
  			borderColor: model.borderColor,
  			borderWidth: model.borderWidth,
  			radius: model.radius
  		};

  		model.backgroundColor = valueOrDefault$6(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
  		model.borderColor = valueOrDefault$6(options.hoverBorderColor, getHoverColor(options.borderColor));
  		model.borderWidth = valueOrDefault$6(options.hoverBorderWidth, options.borderWidth);
  		model.radius = valueOrDefault$6(options.hoverRadius, options.radius);
  	},
  });

  var resolve$3 = helpers$1.options.resolve;

  core_defaults._set('polarArea', {
  	scale: {
  		type: 'radialLinear',
  		angleLines: {
  			display: false
  		},
  		gridLines: {
  			circular: true
  		},
  		pointLabels: {
  			display: false
  		},
  		ticks: {
  			beginAtZero: true
  		}
  	},

  	// Boolean - Whether to animate the rotation of the chart
  	animation: {
  		animateRotate: true,
  		animateScale: true
  	},

  	startAngle: -0.5 * Math.PI,
  	legendCallback: function(chart) {
  		var list = document.createElement('ul');
  		var data = chart.data;
  		var datasets = data.datasets;
  		var labels = data.labels;
  		var i, ilen, listItem, listItemSpan;

  		list.setAttribute('class', chart.id + '-legend');
  		if (datasets.length) {
  			for (i = 0, ilen = datasets[0].data.length; i < ilen; ++i) {
  				listItem = list.appendChild(document.createElement('li'));
  				listItemSpan = listItem.appendChild(document.createElement('span'));
  				listItemSpan.style.backgroundColor = datasets[0].backgroundColor[i];
  				if (labels[i]) {
  					listItem.appendChild(document.createTextNode(labels[i]));
  				}
  			}
  		}

  		return list.outerHTML;
  	},
  	legend: {
  		labels: {
  			generateLabels: function(chart) {
  				var data = chart.data;
  				if (data.labels.length && data.datasets.length) {
  					return data.labels.map(function(label, i) {
  						var meta = chart.getDatasetMeta(0);
  						var style = meta.controller.getStyle(i);

  						return {
  							text: label,
  							fillStyle: style.backgroundColor,
  							strokeStyle: style.borderColor,
  							lineWidth: style.borderWidth,
  							hidden: isNaN(data.datasets[0].data[i]) || meta.data[i].hidden,

  							// Extra data used for toggling the correct item
  							index: i
  						};
  					});
  				}
  				return [];
  			}
  		},

  		onClick: function(e, legendItem) {
  			var index = legendItem.index;
  			var chart = this.chart;
  			var i, ilen, meta;

  			for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
  				meta = chart.getDatasetMeta(i);
  				meta.data[index].hidden = !meta.data[index].hidden;
  			}

  			chart.update();
  		}
  	},

  	// Need to override these to give a nice default
  	tooltips: {
  		callbacks: {
  			title: function() {
  				return '';
  			},
  			label: function(item, data) {
  				return data.labels[item.index] + ': ' + item.yLabel;
  			}
  		}
  	}
  });

  var controller_polarArea = core_datasetController.extend({

  	dataElementType: elements.Arc,

  	linkScales: helpers$1.noop,

  	/**
  	 * @private
  	 */
  	_dataElementOptions: [
  		'backgroundColor',
  		'borderColor',
  		'borderWidth',
  		'borderAlign',
  		'hoverBackgroundColor',
  		'hoverBorderColor',
  		'hoverBorderWidth' ],

  	/**
  	 * @private
  	 */
  	_getIndexScaleId: function() {
  		return this.chart.scale.id;
  	},

  	/**
  	 * @private
  	 */
  	_getValueScaleId: function() {
  		return this.chart.scale.id;
  	},

  	update: function(reset) {
  		var me = this;
  		var dataset = me.getDataset();
  		var meta = me.getMeta();
  		var start = me.chart.options.startAngle || 0;
  		var starts = me._starts = [];
  		var angles = me._angles = [];
  		var arcs = meta.data;
  		var i, ilen, angle;

  		me._updateRadius();

  		meta.count = me.countVisibleElements();

  		for (i = 0, ilen = dataset.data.length; i < ilen; i++) {
  			starts[i] = start;
  			angle = me._computeAngle(i);
  			angles[i] = angle;
  			start += angle;
  		}

  		for (i = 0, ilen = arcs.length; i < ilen; ++i) {
  			arcs[i]._options = me._resolveDataElementOptions(arcs[i], i);
  			me.updateElement(arcs[i], i, reset);
  		}
  	},

  	/**
  	 * @private
  	 */
  	_updateRadius: function() {
  		var me = this;
  		var chart = me.chart;
  		var chartArea = chart.chartArea;
  		var opts = chart.options;
  		var minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);

  		chart.outerRadius = Math.max(minSize / 2, 0);
  		chart.innerRadius = Math.max(opts.cutoutPercentage ? (chart.outerRadius / 100) * (opts.cutoutPercentage) : 1, 0);
  		chart.radiusLength = (chart.outerRadius - chart.innerRadius) / chart.getVisibleDatasetCount();

  		me.outerRadius = chart.outerRadius - (chart.radiusLength * me.index);
  		me.innerRadius = me.outerRadius - chart.radiusLength;
  	},

  	updateElement: function(arc, index, reset) {
  		var me = this;
  		var chart = me.chart;
  		var dataset = me.getDataset();
  		var opts = chart.options;
  		var animationOpts = opts.animation;
  		var scale = chart.scale;
  		var labels = chart.data.labels;

  		var centerX = scale.xCenter;
  		var centerY = scale.yCenter;

  		// var negHalfPI = -0.5 * Math.PI;
  		var datasetStartAngle = opts.startAngle;
  		var distance = arc.hidden ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
  		var startAngle = me._starts[index];
  		var endAngle = startAngle + (arc.hidden ? 0 : me._angles[index]);

  		var resetRadius = animationOpts.animateScale ? 0 : scale.getDistanceFromCenterForValue(dataset.data[index]);
  		var options = arc._options || {};

  		helpers$1.extend(arc, {
  			// Utility
  			_datasetIndex: me.index,
  			_index: index,
  			_scale: scale,

  			// Desired view properties
  			_model: {
  				backgroundColor: options.backgroundColor,
  				borderColor: options.borderColor,
  				borderWidth: options.borderWidth,
  				borderAlign: options.borderAlign,
  				x: centerX,
  				y: centerY,
  				innerRadius: 0,
  				outerRadius: reset ? resetRadius : distance,
  				startAngle: reset && animationOpts.animateRotate ? datasetStartAngle : startAngle,
  				endAngle: reset && animationOpts.animateRotate ? datasetStartAngle : endAngle,
  				label: helpers$1.valueAtIndexOrDefault(labels, index, labels[index])
  			}
  		});

  		arc.pivot();
  	},

  	countVisibleElements: function() {
  		var dataset = this.getDataset();
  		var meta = this.getMeta();
  		var count = 0;

  		helpers$1.each(meta.data, function(element, index) {
  			if (!isNaN(dataset.data[index]) && !element.hidden) {
  				count++;
  			}
  		});

  		return count;
  	},

  	/**
  	 * @protected
  	 */
  	setHoverStyle: function(arc) {
  		var model = arc._model;
  		var options = arc._options;
  		var getHoverColor = helpers$1.getHoverColor;
  		var valueOrDefault = helpers$1.valueOrDefault;

  		arc.$previousStyle = {
  			backgroundColor: model.backgroundColor,
  			borderColor: model.borderColor,
  			borderWidth: model.borderWidth,
  		};

  		model.backgroundColor = valueOrDefault(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
  		model.borderColor = valueOrDefault(options.hoverBorderColor, getHoverColor(options.borderColor));
  		model.borderWidth = valueOrDefault(options.hoverBorderWidth, options.borderWidth);
  	},

  	/**
  	 * @private
  	 */
  	_computeAngle: function(index) {
  		var me = this;
  		var count = this.getMeta().count;
  		var dataset = me.getDataset();
  		var meta = me.getMeta();

  		if (isNaN(dataset.data[index]) || meta.data[index].hidden) {
  			return 0;
  		}

  		// Scriptable options
  		var context = {
  			chart: me.chart,
  			dataIndex: index,
  			dataset: dataset,
  			datasetIndex: me.index
  		};

  		return resolve$3([
  			me.chart.options.elements.arc.angle,
  			(2 * Math.PI) / count
  		], context, index);
  	}
  });

  core_defaults._set('pie', helpers$1.clone(core_defaults.doughnut));
  core_defaults._set('pie', {
  	cutoutPercentage: 0
  });

  // Pie charts are Doughnut chart with different defaults
  var controller_pie = controller_doughnut;

  var valueOrDefault$7 = helpers$1.valueOrDefault;

  core_defaults._set('radar', {
  	spanGaps: false,
  	scale: {
  		type: 'radialLinear'
  	},
  	elements: {
  		line: {
  			fill: 'start',
  			tension: 0 // no bezier in radar
  		}
  	}
  });

  var controller_radar = core_datasetController.extend({
  	datasetElementType: elements.Line,

  	dataElementType: elements.Point,

  	linkScales: helpers$1.noop,

  	/**
  	 * @private
  	 */
  	_datasetElementOptions: [
  		'backgroundColor',
  		'borderWidth',
  		'borderColor',
  		'borderCapStyle',
  		'borderDash',
  		'borderDashOffset',
  		'borderJoinStyle',
  		'fill'
  	],

  	/**
  	 * @private
  	 */
  	_dataElementOptions: {
  		backgroundColor: 'pointBackgroundColor',
  		borderColor: 'pointBorderColor',
  		borderWidth: 'pointBorderWidth',
  		hitRadius: 'pointHitRadius',
  		hoverBackgroundColor: 'pointHoverBackgroundColor',
  		hoverBorderColor: 'pointHoverBorderColor',
  		hoverBorderWidth: 'pointHoverBorderWidth',
  		hoverRadius: 'pointHoverRadius',
  		pointStyle: 'pointStyle',
  		radius: 'pointRadius',
  		rotation: 'pointRotation'
  	},

  	/**
  	 * @private
  	 */
  	_getIndexScaleId: function() {
  		return this.chart.scale.id;
  	},

  	/**
  	 * @private
  	 */
  	_getValueScaleId: function() {
  		return this.chart.scale.id;
  	},

  	update: function(reset) {
  		var me = this;
  		var meta = me.getMeta();
  		var line = meta.dataset;
  		var points = meta.data || [];
  		var scale = me.chart.scale;
  		var config = me._config;
  		var i, ilen;

  		// Compatibility: If the properties are defined with only the old name, use those values
  		if (config.tension !== undefined && config.lineTension === undefined) {
  			config.lineTension = config.tension;
  		}

  		// Utility
  		line._scale = scale;
  		line._datasetIndex = me.index;
  		// Data
  		line._children = points;
  		line._loop = true;
  		// Model
  		line._model = me._resolveDatasetElementOptions(line);

  		line.pivot();

  		// Update Points
  		for (i = 0, ilen = points.length; i < ilen; ++i) {
  			me.updateElement(points[i], i, reset);
  		}

  		// Update bezier control points
  		me.updateBezierControlPoints();

  		// Now pivot the point for animation
  		for (i = 0, ilen = points.length; i < ilen; ++i) {
  			points[i].pivot();
  		}
  	},

  	updateElement: function(point, index, reset) {
  		var me = this;
  		var custom = point.custom || {};
  		var dataset = me.getDataset();
  		var scale = me.chart.scale;
  		var pointPosition = scale.getPointPositionForValue(index, dataset.data[index]);
  		var options = me._resolveDataElementOptions(point, index);
  		var lineModel = me.getMeta().dataset._model;
  		var x = reset ? scale.xCenter : pointPosition.x;
  		var y = reset ? scale.yCenter : pointPosition.y;

  		// Utility
  		point._scale = scale;
  		point._options = options;
  		point._datasetIndex = me.index;
  		point._index = index;

  		// Desired view properties
  		point._model = {
  			x: x, // value not used in dataset scale, but we want a consistent API between scales
  			y: y,
  			skip: custom.skip || isNaN(x) || isNaN(y),
  			// Appearance
  			radius: options.radius,
  			pointStyle: options.pointStyle,
  			rotation: options.rotation,
  			backgroundColor: options.backgroundColor,
  			borderColor: options.borderColor,
  			borderWidth: options.borderWidth,
  			tension: valueOrDefault$7(custom.tension, lineModel ? lineModel.tension : 0),

  			// Tooltip
  			hitRadius: options.hitRadius
  		};
  	},

  	/**
  	 * @private
  	 */
  	_resolveDatasetElementOptions: function() {
  		var me = this;
  		var config = me._config;
  		var options = me.chart.options;
  		var values = core_datasetController.prototype._resolveDatasetElementOptions.apply(me, arguments);

  		values.spanGaps = valueOrDefault$7(config.spanGaps, options.spanGaps);
  		values.tension = valueOrDefault$7(config.lineTension, options.elements.line.tension);

  		return values;
  	},

  	updateBezierControlPoints: function() {
  		var me = this;
  		var meta = me.getMeta();
  		var area = me.chart.chartArea;
  		var points = meta.data || [];
  		var i, ilen, model, controlPoints;

  		// Only consider points that are drawn in case the spanGaps option is used
  		if (meta.dataset._model.spanGaps) {
  			points = points.filter(function(pt) {
  				return !pt._model.skip;
  			});
  		}

  		function capControlPoint(pt, min, max) {
  			return Math.max(Math.min(pt, max), min);
  		}

  		for (i = 0, ilen = points.length; i < ilen; ++i) {
  			model = points[i]._model;
  			controlPoints = helpers$1.splineCurve(
  				helpers$1.previousItem(points, i, true)._model,
  				model,
  				helpers$1.nextItem(points, i, true)._model,
  				model.tension
  			);

  			// Prevent the bezier going outside of the bounds of the graph
  			model.controlPointPreviousX = capControlPoint(controlPoints.previous.x, area.left, area.right);
  			model.controlPointPreviousY = capControlPoint(controlPoints.previous.y, area.top, area.bottom);
  			model.controlPointNextX = capControlPoint(controlPoints.next.x, area.left, area.right);
  			model.controlPointNextY = capControlPoint(controlPoints.next.y, area.top, area.bottom);
  		}
  	},

  	setHoverStyle: function(point) {
  		var model = point._model;
  		var options = point._options;
  		var getHoverColor = helpers$1.getHoverColor;

  		point.$previousStyle = {
  			backgroundColor: model.backgroundColor,
  			borderColor: model.borderColor,
  			borderWidth: model.borderWidth,
  			radius: model.radius
  		};

  		model.backgroundColor = valueOrDefault$7(options.hoverBackgroundColor, getHoverColor(options.backgroundColor));
  		model.borderColor = valueOrDefault$7(options.hoverBorderColor, getHoverColor(options.borderColor));
  		model.borderWidth = valueOrDefault$7(options.hoverBorderWidth, options.borderWidth);
  		model.radius = valueOrDefault$7(options.hoverRadius, options.radius);
  	}
  });

  core_defaults._set('scatter', {
  	hover: {
  		mode: 'single'
  	},

  	scales: {
  		xAxes: [{
  			id: 'x-axis-1',    // need an ID so datasets can reference the scale
  			type: 'linear',    // scatter should not use a category axis
  			position: 'bottom'
  		}],
  		yAxes: [{
  			id: 'y-axis-1',
  			type: 'linear',
  			position: 'left'
  		}]
  	},

  	tooltips: {
  		callbacks: {
  			title: function() {
  				return '';     // doesn't make sense for scatter since data are formatted as a point
  			},
  			label: function(item) {
  				return '(' + item.xLabel + ', ' + item.yLabel + ')';
  			}
  		}
  	}
  });

  core_defaults._set('global', {
  	datasets: {
  		scatter: {
  			showLine: false
  		}
  	}
  });

  // Scatter charts use line controllers
  var controller_scatter = controller_line;

  // NOTE export a map in which the key represents the controller type, not
  // the class, and so must be CamelCase in order to be correctly retrieved
  // by the controller in core.controller.js (`controllers[meta.type]`).

  var controllers = {
  	bar: controller_bar,
  	bubble: controller_bubble,
  	doughnut: controller_doughnut,
  	horizontalBar: controller_horizontalBar,
  	line: controller_line,
  	polarArea: controller_polarArea,
  	pie: controller_pie,
  	radar: controller_radar,
  	scatter: controller_scatter
  };

  /**
   * Helper function to get relative position for an event
   * @param {Event|IEvent} event - The event to get the position for
   * @param {Chart} chart - The chart
   * @returns {object} the event position
   */
  function getRelativePosition(e, chart) {
  	if (e.native) {
  		return {
  			x: e.x,
  			y: e.y
  		};
  	}

  	return helpers$1.getRelativePosition(e, chart);
  }

  /**
   * Helper function to traverse all of the visible elements in the chart
   * @param {Chart} chart - the chart
   * @param {function} handler - the callback to execute for each visible item
   */
  function parseVisibleItems(chart, handler) {
  	var metasets = chart._getSortedVisibleDatasetMetas();
  	var metadata, i, j, ilen, jlen, element;

  	for (i = 0, ilen = metasets.length; i < ilen; ++i) {
  		metadata = metasets[i].data;
  		for (j = 0, jlen = metadata.length; j < jlen; ++j) {
  			element = metadata[j];
  			if (!element._view.skip) {
  				handler(element);
  			}
  		}
  	}
  }

  /**
   * Helper function to get the items that intersect the event position
   * @param {ChartElement[]} items - elements to filter
   * @param {object} position - the point to be nearest to
   * @return {ChartElement[]} the nearest items
   */
  function getIntersectItems(chart, position) {
  	var elements = [];

  	parseVisibleItems(chart, function(element) {
  		if (element.inRange(position.x, position.y)) {
  			elements.push(element);
  		}
  	});

  	return elements;
  }

  /**
   * Helper function to get the items nearest to the event position considering all visible items in teh chart
   * @param {Chart} chart - the chart to look at elements from
   * @param {object} position - the point to be nearest to
   * @param {boolean} intersect - if true, only consider items that intersect the position
   * @param {function} distanceMetric - function to provide the distance between points
   * @return {ChartElement[]} the nearest items
   */
  function getNearestItems(chart, position, intersect, distanceMetric) {
  	var minDistance = Number.POSITIVE_INFINITY;
  	var nearestItems = [];

  	parseVisibleItems(chart, function(element) {
  		if (intersect && !element.inRange(position.x, position.y)) {
  			return;
  		}

  		var center = element.getCenterPoint();
  		var distance = distanceMetric(position, center);
  		if (distance < minDistance) {
  			nearestItems = [element];
  			minDistance = distance;
  		} else if (distance === minDistance) {
  			// Can have multiple items at the same distance in which case we sort by size
  			nearestItems.push(element);
  		}
  	});

  	return nearestItems;
  }

  /**
   * Get a distance metric function for two points based on the
   * axis mode setting
   * @param {string} axis - the axis mode. x|y|xy
   */
  function getDistanceMetricForAxis(axis) {
  	var useX = axis.indexOf('x') !== -1;
  	var useY = axis.indexOf('y') !== -1;

  	return function(pt1, pt2) {
  		var deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
  		var deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
  		return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
  	};
  }

  function indexMode(chart, e, options) {
  	var position = getRelativePosition(e, chart);
  	// Default axis for index mode is 'x' to match old behaviour
  	options.axis = options.axis || 'x';
  	var distanceMetric = getDistanceMetricForAxis(options.axis);
  	var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);
  	var elements = [];

  	if (!items.length) {
  		return [];
  	}

  	chart._getSortedVisibleDatasetMetas().forEach(function(meta) {
  		var element = meta.data[items[0]._index];

  		// don't count items that are skipped (null data)
  		if (element && !element._view.skip) {
  			elements.push(element);
  		}
  	});

  	return elements;
  }

  /**
   * @interface IInteractionOptions
   */
  /**
   * If true, only consider items that intersect the point
   * @name IInterfaceOptions#boolean
   * @type Boolean
   */

  /**
   * Contains interaction related functions
   * @namespace Chart.Interaction
   */
  var core_interaction = {
  	// Helper function for different modes
  	modes: {
  		single: function(chart, e) {
  			var position = getRelativePosition(e, chart);
  			var elements = [];

  			parseVisibleItems(chart, function(element) {
  				if (element.inRange(position.x, position.y)) {
  					elements.push(element);
  					return elements;
  				}
  			});

  			return elements.slice(0, 1);
  		},

  		/**
  		 * @function Chart.Interaction.modes.label
  		 * @deprecated since version 2.4.0
  		 * @todo remove at version 3
  		 * @private
  		 */
  		label: indexMode,

  		/**
  		 * Returns items at the same index. If the options.intersect parameter is true, we only return items if we intersect something
  		 * If the options.intersect mode is false, we find the nearest item and return the items at the same index as that item
  		 * @function Chart.Interaction.modes.index
  		 * @since v2.4.0
  		 * @param {Chart} chart - the chart we are returning items from
  		 * @param {Event} e - the event we are find things at
  		 * @param {IInteractionOptions} options - options to use during interaction
  		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
  		 */
  		index: indexMode,

  		/**
  		 * Returns items in the same dataset. If the options.intersect parameter is true, we only return items if we intersect something
  		 * If the options.intersect is false, we find the nearest item and return the items in that dataset
  		 * @function Chart.Interaction.modes.dataset
  		 * @param {Chart} chart - the chart we are returning items from
  		 * @param {Event} e - the event we are find things at
  		 * @param {IInteractionOptions} options - options to use during interaction
  		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
  		 */
  		dataset: function(chart, e, options) {
  			var position = getRelativePosition(e, chart);
  			options.axis = options.axis || 'xy';
  			var distanceMetric = getDistanceMetricForAxis(options.axis);
  			var items = options.intersect ? getIntersectItems(chart, position) : getNearestItems(chart, position, false, distanceMetric);

  			if (items.length > 0) {
  				items = chart.getDatasetMeta(items[0]._datasetIndex).data;
  			}

  			return items;
  		},

  		/**
  		 * @function Chart.Interaction.modes.x-axis
  		 * @deprecated since version 2.4.0. Use index mode and intersect == true
  		 * @todo remove at version 3
  		 * @private
  		 */
  		'x-axis': function(chart, e) {
  			return indexMode(chart, e, {intersect: false});
  		},

  		/**
  		 * Point mode returns all elements that hit test based on the event position
  		 * of the event
  		 * @function Chart.Interaction.modes.intersect
  		 * @param {Chart} chart - the chart we are returning items from
  		 * @param {Event} e - the event we are find things at
  		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
  		 */
  		point: function(chart, e) {
  			var position = getRelativePosition(e, chart);
  			return getIntersectItems(chart, position);
  		},

  		/**
  		 * nearest mode returns the element closest to the point
  		 * @function Chart.Interaction.modes.intersect
  		 * @param {Chart} chart - the chart we are returning items from
  		 * @param {Event} e - the event we are find things at
  		 * @param {IInteractionOptions} options - options to use
  		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
  		 */
  		nearest: function(chart, e, options) {
  			var position = getRelativePosition(e, chart);
  			options.axis = options.axis || 'xy';
  			var distanceMetric = getDistanceMetricForAxis(options.axis);
  			return getNearestItems(chart, position, options.intersect, distanceMetric);
  		},

  		/**
  		 * x mode returns the elements that hit-test at the current x coordinate
  		 * @function Chart.Interaction.modes.x
  		 * @param {Chart} chart - the chart we are returning items from
  		 * @param {Event} e - the event we are find things at
  		 * @param {IInteractionOptions} options - options to use
  		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
  		 */
  		x: function(chart, e, options) {
  			var position = getRelativePosition(e, chart);
  			var items = [];
  			var intersectsItem = false;

  			parseVisibleItems(chart, function(element) {
  				if (element.inXRange(position.x)) {
  					items.push(element);
  				}

  				if (element.inRange(position.x, position.y)) {
  					intersectsItem = true;
  				}
  			});

  			// If we want to trigger on an intersect and we don't have any items
  			// that intersect the position, return nothing
  			if (options.intersect && !intersectsItem) {
  				items = [];
  			}
  			return items;
  		},

  		/**
  		 * y mode returns the elements that hit-test at the current y coordinate
  		 * @function Chart.Interaction.modes.y
  		 * @param {Chart} chart - the chart we are returning items from
  		 * @param {Event} e - the event we are find things at
  		 * @param {IInteractionOptions} options - options to use
  		 * @return {Chart.Element[]} Array of elements that are under the point. If none are found, an empty array is returned
  		 */
  		y: function(chart, e, options) {
  			var position = getRelativePosition(e, chart);
  			var items = [];
  			var intersectsItem = false;

  			parseVisibleItems(chart, function(element) {
  				if (element.inYRange(position.y)) {
  					items.push(element);
  				}

  				if (element.inRange(position.x, position.y)) {
  					intersectsItem = true;
  				}
  			});

  			// If we want to trigger on an intersect and we don't have any items
  			// that intersect the position, return nothing
  			if (options.intersect && !intersectsItem) {
  				items = [];
  			}
  			return items;
  		}
  	}
  };

  var extend = helpers$1.extend;

  function filterByPosition(array, position) {
  	return helpers$1.where(array, function(v) {
  		return v.pos === position;
  	});
  }

  function sortByWeight(array, reverse) {
  	return array.sort(function(a, b) {
  		var v0 = reverse ? b : a;
  		var v1 = reverse ? a : b;
  		return v0.weight === v1.weight ?
  			v0.index - v1.index :
  			v0.weight - v1.weight;
  	});
  }

  function wrapBoxes(boxes) {
  	var layoutBoxes = [];
  	var i, ilen, box;

  	for (i = 0, ilen = (boxes || []).length; i < ilen; ++i) {
  		box = boxes[i];
  		layoutBoxes.push({
  			index: i,
  			box: box,
  			pos: box.position,
  			horizontal: box.isHorizontal(),
  			weight: box.weight
  		});
  	}
  	return layoutBoxes;
  }

  function setLayoutDims(layouts, params) {
  	var i, ilen, layout;
  	for (i = 0, ilen = layouts.length; i < ilen; ++i) {
  		layout = layouts[i];
  		// store width used instead of chartArea.w in fitBoxes
  		layout.width = layout.horizontal
  			? layout.box.fullWidth && params.availableWidth
  			: params.vBoxMaxWidth;
  		// store height used instead of chartArea.h in fitBoxes
  		layout.height = layout.horizontal && params.hBoxMaxHeight;
  	}
  }

  function buildLayoutBoxes(boxes) {
  	var layoutBoxes = wrapBoxes(boxes);
  	var left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);
  	var right = sortByWeight(filterByPosition(layoutBoxes, 'right'));
  	var top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);
  	var bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));

  	return {
  		leftAndTop: left.concat(top),
  		rightAndBottom: right.concat(bottom),
  		chartArea: filterByPosition(layoutBoxes, 'chartArea'),
  		vertical: left.concat(right),
  		horizontal: top.concat(bottom)
  	};
  }

  function getCombinedMax(maxPadding, chartArea, a, b) {
  	return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);
  }

  function updateDims(chartArea, params, layout) {
  	var box = layout.box;
  	var maxPadding = chartArea.maxPadding;
  	var newWidth, newHeight;

  	if (layout.size) {
  		// this layout was already counted for, lets first reduce old size
  		chartArea[layout.pos] -= layout.size;
  	}
  	layout.size = layout.horizontal ? box.height : box.width;
  	chartArea[layout.pos] += layout.size;

  	if (box.getPadding) {
  		var boxPadding = box.getPadding();
  		maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
  		maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
  		maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
  		maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
  	}

  	newWidth = params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right');
  	newHeight = params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom');

  	if (newWidth !== chartArea.w || newHeight !== chartArea.h) {
  		chartArea.w = newWidth;
  		chartArea.h = newHeight;

  		// return true if chart area changed in layout's direction
  		return layout.horizontal ? newWidth !== chartArea.w : newHeight !== chartArea.h;
  	}
  }

  function handleMaxPadding(chartArea) {
  	var maxPadding = chartArea.maxPadding;

  	function updatePos(pos) {
  		var change = Math.max(maxPadding[pos] - chartArea[pos], 0);
  		chartArea[pos] += change;
  		return change;
  	}
  	chartArea.y += updatePos('top');
  	chartArea.x += updatePos('left');
  	updatePos('right');
  	updatePos('bottom');
  }

  function getMargins(horizontal, chartArea) {
  	var maxPadding = chartArea.maxPadding;

  	function marginForPositions(positions) {
  		var margin = {left: 0, top: 0, right: 0, bottom: 0};
  		positions.forEach(function(pos) {
  			margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
  		});
  		return margin;
  	}

  	return horizontal
  		? marginForPositions(['left', 'right'])
  		: marginForPositions(['top', 'bottom']);
  }

  function fitBoxes(boxes, chartArea, params) {
  	var refitBoxes = [];
  	var i, ilen, layout, box, refit, changed;

  	for (i = 0, ilen = boxes.length; i < ilen; ++i) {
  		layout = boxes[i];
  		box = layout.box;

  		box.update(
  			layout.width || chartArea.w,
  			layout.height || chartArea.h,
  			getMargins(layout.horizontal, chartArea)
  		);
  		if (updateDims(chartArea, params, layout)) {
  			changed = true;
  			if (refitBoxes.length) {
  				// Dimensions changed and there were non full width boxes before this
  				// -> we have to refit those
  				refit = true;
  			}
  		}
  		if (!box.fullWidth) { // fullWidth boxes don't need to be re-fitted in any case
  			refitBoxes.push(layout);
  		}
  	}

  	return refit ? fitBoxes(refitBoxes, chartArea, params) || changed : changed;
  }

  function placeBoxes(boxes, chartArea, params) {
  	var userPadding = params.padding;
  	var x = chartArea.x;
  	var y = chartArea.y;
  	var i, ilen, layout, box;

  	for (i = 0, ilen = boxes.length; i < ilen; ++i) {
  		layout = boxes[i];
  		box = layout.box;
  		if (layout.horizontal) {
  			box.left = box.fullWidth ? userPadding.left : chartArea.left;
  			box.right = box.fullWidth ? params.outerWidth - userPadding.right : chartArea.left + chartArea.w;
  			box.top = y;
  			box.bottom = y + box.height;
  			box.width = box.right - box.left;
  			y = box.bottom;
  		} else {
  			box.left = x;
  			box.right = x + box.width;
  			box.top = chartArea.top;
  			box.bottom = chartArea.top + chartArea.h;
  			box.height = box.bottom - box.top;
  			x = box.right;
  		}
  	}

  	chartArea.x = x;
  	chartArea.y = y;
  }

  core_defaults._set('global', {
  	layout: {
  		padding: {
  			top: 0,
  			right: 0,
  			bottom: 0,
  			left: 0
  		}
  	}
  });

  /**
   * @interface ILayoutItem
   * @prop {string} position - The position of the item in the chart layout. Possible values are
   * 'left', 'top', 'right', 'bottom', and 'chartArea'
   * @prop {number} weight - The weight used to sort the item. Higher weights are further away from the chart area
   * @prop {boolean} fullWidth - if true, and the item is horizontal, then push vertical boxes down
   * @prop {function} isHorizontal - returns true if the layout item is horizontal (ie. top or bottom)
   * @prop {function} update - Takes two parameters: width and height. Returns size of item
   * @prop {function} getPadding -  Returns an object with padding on the edges
   * @prop {number} width - Width of item. Must be valid after update()
   * @prop {number} height - Height of item. Must be valid after update()
   * @prop {number} left - Left edge of the item. Set by layout system and cannot be used in update
   * @prop {number} top - Top edge of the item. Set by layout system and cannot be used in update
   * @prop {number} right - Right edge of the item. Set by layout system and cannot be used in update
   * @prop {number} bottom - Bottom edge of the item. Set by layout system and cannot be used in update
   */

  // The layout service is very self explanatory.  It's responsible for the layout within a chart.
  // Scales, Legends and Plugins all rely on the layout service and can easily register to be placed anywhere they need
  // It is this service's responsibility of carrying out that layout.
  var core_layouts = {
  	defaults: {},

  	/**
  	 * Register a box to a chart.
  	 * A box is simply a reference to an object that requires layout. eg. Scales, Legend, Title.
  	 * @param {Chart} chart - the chart to use
  	 * @param {ILayoutItem} item - the item to add to be layed out
  	 */
  	addBox: function(chart, item) {
  		if (!chart.boxes) {
  			chart.boxes = [];
  		}

  		// initialize item with default values
  		item.fullWidth = item.fullWidth || false;
  		item.position = item.position || 'top';
  		item.weight = item.weight || 0;
  		item._layers = item._layers || function() {
  			return [{
  				z: 0,
  				draw: function() {
  					item.draw.apply(item, arguments);
  				}
  			}];
  		};

  		chart.boxes.push(item);
  	},

  	/**
  	 * Remove a layoutItem from a chart
  	 * @param {Chart} chart - the chart to remove the box from
  	 * @param {ILayoutItem} layoutItem - the item to remove from the layout
  	 */
  	removeBox: function(chart, layoutItem) {
  		var index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
  		if (index !== -1) {
  			chart.boxes.splice(index, 1);
  		}
  	},

  	/**
  	 * Sets (or updates) options on the given `item`.
  	 * @param {Chart} chart - the chart in which the item lives (or will be added to)
  	 * @param {ILayoutItem} item - the item to configure with the given options
  	 * @param {object} options - the new item options.
  	 */
  	configure: function(chart, item, options) {
  		var props = ['fullWidth', 'position', 'weight'];
  		var ilen = props.length;
  		var i = 0;
  		var prop;

  		for (; i < ilen; ++i) {
  			prop = props[i];
  			if (options.hasOwnProperty(prop)) {
  				item[prop] = options[prop];
  			}
  		}
  	},

  	/**
  	 * Fits boxes of the given chart into the given size by having each box measure itself
  	 * then running a fitting algorithm
  	 * @param {Chart} chart - the chart
  	 * @param {number} width - the width to fit into
  	 * @param {number} height - the height to fit into
  	 */
  	update: function(chart, width, height) {
  		if (!chart) {
  			return;
  		}

  		var layoutOptions = chart.options.layout || {};
  		var padding = helpers$1.options.toPadding(layoutOptions.padding);

  		var availableWidth = width - padding.width;
  		var availableHeight = height - padding.height;
  		var boxes = buildLayoutBoxes(chart.boxes);
  		var verticalBoxes = boxes.vertical;
  		var horizontalBoxes = boxes.horizontal;

  		// Essentially we now have any number of boxes on each of the 4 sides.
  		// Our canvas looks like the following.
  		// The areas L1 and L2 are the left axes. R1 is the right axis, T1 is the top axis and
  		// B1 is the bottom axis
  		// There are also 4 quadrant-like locations (left to right instead of clockwise) reserved for chart overlays
  		// These locations are single-box locations only, when trying to register a chartArea location that is already taken,
  		// an error will be thrown.
  		//
  		// |----------------------------------------------------|
  		// |                  T1 (Full Width)                   |
  		// |----------------------------------------------------|
  		// |    |    |                 T2                  |    |
  		// |    |----|-------------------------------------|----|
  		// |    |    | C1 |                           | C2 |    |
  		// |    |    |----|                           |----|    |
  		// |    |    |                                     |    |
  		// | L1 | L2 |           ChartArea (C0)            | R1 |
  		// |    |    |                                     |    |
  		// |    |    |----|                           |----|    |
  		// |    |    | C3 |                           | C4 |    |
  		// |    |----|-------------------------------------|----|
  		// |    |    |                 B1                  |    |
  		// |----------------------------------------------------|
  		// |                  B2 (Full Width)                   |
  		// |----------------------------------------------------|
  		//

  		var params = Object.freeze({
  			outerWidth: width,
  			outerHeight: height,
  			padding: padding,
  			availableWidth: availableWidth,
  			vBoxMaxWidth: availableWidth / 2 / verticalBoxes.length,
  			hBoxMaxHeight: availableHeight / 2
  		});
  		var chartArea = extend({
  			maxPadding: extend({}, padding),
  			w: availableWidth,
  			h: availableHeight,
  			x: padding.left,
  			y: padding.top
  		}, padding);

  		setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);

  		// First fit vertical boxes
  		fitBoxes(verticalBoxes, chartArea, params);

  		// Then fit horizontal boxes
  		if (fitBoxes(horizontalBoxes, chartArea, params)) {
  			// if the area changed, re-fit vertical boxes
  			fitBoxes(verticalBoxes, chartArea, params);
  		}

  		handleMaxPadding(chartArea);

  		// Finally place the boxes to correct coordinates
  		placeBoxes(boxes.leftAndTop, chartArea, params);

  		// Move to opposite side of chart
  		chartArea.x += chartArea.w;
  		chartArea.y += chartArea.h;

  		placeBoxes(boxes.rightAndBottom, chartArea, params);

  		chart.chartArea = {
  			left: chartArea.left,
  			top: chartArea.top,
  			right: chartArea.left + chartArea.w,
  			bottom: chartArea.top + chartArea.h
  		};

  		// Finally update boxes in chartArea (radial scale for example)
  		helpers$1.each(boxes.chartArea, function(layout) {
  			var box = layout.box;
  			extend(box, chart.chartArea);
  			box.update(chartArea.w, chartArea.h);
  		});
  	}
  };

  /**
   * Platform fallback implementation (minimal).
   * @see https://github.com/chartjs/Chart.js/pull/4591#issuecomment-319575939
   */

  var platform_basic = {
  	acquireContext: function(item) {
  		if (item && item.canvas) {
  			// Support for any object associated to a canvas (including a context2d)
  			item = item.canvas;
  		}

  		return item && item.getContext('2d') || null;
  	}
  };

  var platform_dom = "/*\n * DOM element rendering detection\n * https://davidwalsh.name/detect-node-insertion\n */\n@keyframes chartjs-render-animation {\n\tfrom { opacity: 0.99; }\n\tto { opacity: 1; }\n}\n\n.chartjs-render-monitor {\n\tanimation: chartjs-render-animation 0.001s;\n}\n\n/*\n * DOM element resizing detection\n * https://github.com/marcj/css-element-queries\n */\n.chartjs-size-monitor,\n.chartjs-size-monitor-expand,\n.chartjs-size-monitor-shrink {\n\tposition: absolute;\n\tdirection: ltr;\n\tleft: 0;\n\ttop: 0;\n\tright: 0;\n\tbottom: 0;\n\toverflow: hidden;\n\tpointer-events: none;\n\tvisibility: hidden;\n\tz-index: -1;\n}\n\n.chartjs-size-monitor-expand > div {\n\tposition: absolute;\n\twidth: 1000000px;\n\theight: 1000000px;\n\tleft: 0;\n\ttop: 0;\n}\n\n.chartjs-size-monitor-shrink > div {\n\tposition: absolute;\n\twidth: 200%;\n\theight: 200%;\n\tleft: 0;\n\ttop: 0;\n}\n";

  var platform_dom$1 = /*#__PURE__*/Object.freeze({
  __proto__: null,
  'default': platform_dom
  });

  var stylesheet = getCjsExportFromNamespace(platform_dom$1);

  var EXPANDO_KEY = '$chartjs';
  var CSS_PREFIX = 'chartjs-';
  var CSS_SIZE_MONITOR = CSS_PREFIX + 'size-monitor';
  var CSS_RENDER_MONITOR = CSS_PREFIX + 'render-monitor';
  var CSS_RENDER_ANIMATION = CSS_PREFIX + 'render-animation';
  var ANIMATION_START_EVENTS = ['animationstart', 'webkitAnimationStart'];

  /**
   * DOM event types -> Chart.js event types.
   * Note: only events with different types are mapped.
   * @see https://developer.mozilla.org/en-US/docs/Web/Events
   */
  var EVENT_TYPES = {
  	touchstart: 'mousedown',
  	touchmove: 'mousemove',
  	touchend: 'mouseup',
  	pointerenter: 'mouseenter',
  	pointerdown: 'mousedown',
  	pointermove: 'mousemove',
  	pointerup: 'mouseup',
  	pointerleave: 'mouseout',
  	pointerout: 'mouseout'
  };

  /**
   * The "used" size is the final value of a dimension property after all calculations have
   * been performed. This method uses the computed style of `element` but returns undefined
   * if the computed style is not expressed in pixels. That can happen in some cases where
   * `element` has a size relative to its parent and this last one is not yet displayed,
   * for example because of `display: none` on a parent node.
   * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value
   * @returns {number} Size in pixels or undefined if unknown.
   */
  function readUsedSize(element, property) {
  	var value = helpers$1.getStyle(element, property);
  	var matches = value && value.match(/^(\d+)(\.\d+)?px$/);
  	return matches ? Number(matches[1]) : undefined;
  }

  /**
   * Initializes the canvas style and render size without modifying the canvas display size,
   * since responsiveness is handled by the controller.resize() method. The config is used
   * to determine the aspect ratio to apply in case no explicit height has been specified.
   */
  function initCanvas(canvas, config) {
  	var style = canvas.style;

  	// NOTE(SB) canvas.getAttribute('width') !== canvas.width: in the first case it
  	// returns null or '' if no explicit value has been set to the canvas attribute.
  	var renderHeight = canvas.getAttribute('height');
  	var renderWidth = canvas.getAttribute('width');

  	// Chart.js modifies some canvas values that we want to restore on destroy
  	canvas[EXPANDO_KEY] = {
  		initial: {
  			height: renderHeight,
  			width: renderWidth,
  			style: {
  				display: style.display,
  				height: style.height,
  				width: style.width
  			}
  		}
  	};

  	// Force canvas to display as block to avoid extra space caused by inline
  	// elements, which would interfere with the responsive resize process.
  	// https://github.com/chartjs/Chart.js/issues/2538
  	style.display = style.display || 'block';

  	if (renderWidth === null || renderWidth === '') {
  		var displayWidth = readUsedSize(canvas, 'width');
  		if (displayWidth !== undefined) {
  			canvas.width = displayWidth;
  		}
  	}

  	if (renderHeight === null || renderHeight === '') {
  		if (canvas.style.height === '') {
  			// If no explicit render height and style height, let's apply the aspect ratio,
  			// which one can be specified by the user but also by charts as default option
  			// (i.e. options.aspectRatio). If not specified, use canvas aspect ratio of 2.
  			canvas.height = canvas.width / (config.options.aspectRatio || 2);
  		} else {
  			var displayHeight = readUsedSize(canvas, 'height');
  			if (displayWidth !== undefined) {
  				canvas.height = displayHeight;
  			}
  		}
  	}

  	return canvas;
  }

  /**
   * Detects support for options object argument in addEventListener.
   * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
   * @private
   */
  var supportsEventListenerOptions = (function() {
  	var supports = false;
  	try {
  		var options = Object.defineProperty({}, 'passive', {
  			// eslint-disable-next-line getter-return
  			get: function() {
  				supports = true;
  			}
  		});
  		window.addEventListener('e', null, options);
  	} catch (e) {
  		// continue regardless of error
  	}
  	return supports;
  }());

  // Default passive to true as expected by Chrome for 'touchstart' and 'touchend' events.
  // https://github.com/chartjs/Chart.js/issues/4287
  var eventListenerOptions = supportsEventListenerOptions ? {passive: true} : false;

  function addListener(node, type, listener) {
  	node.addEventListener(type, listener, eventListenerOptions);
  }

  function removeListener(node, type, listener) {
  	node.removeEventListener(type, listener, eventListenerOptions);
  }

  function createEvent(type, chart, x, y, nativeEvent) {
  	return {
  		type: type,
  		chart: chart,
  		native: nativeEvent || null,
  		x: x !== undefined ? x : null,
  		y: y !== undefined ? y : null,
  	};
  }

  function fromNativeEvent(event, chart) {
  	var type = EVENT_TYPES[event.type] || event.type;
  	var pos = helpers$1.getRelativePosition(event, chart);
  	return createEvent(type, chart, pos.x, pos.y, event);
  }

  function throttled(fn, thisArg) {
  	var ticking = false;
  	var args = [];

  	return function() {
  		args = Array.prototype.slice.call(arguments);
  		thisArg = thisArg || this;

  		if (!ticking) {
  			ticking = true;
  			helpers$1.requestAnimFrame.call(window, function() {
  				ticking = false;
  				fn.apply(thisArg, args);
  			});
  		}
  	};
  }

  function createDiv(cls) {
  	var el = document.createElement('div');
  	el.className = cls || '';
  	return el;
  }

  // Implementation based on https://github.com/marcj/css-element-queries
  function createResizer(handler) {
  	var maxSize = 1000000;

  	// NOTE(SB) Don't use innerHTML because it could be considered unsafe.
  	// https://github.com/chartjs/Chart.js/issues/5902
  	var resizer = createDiv(CSS_SIZE_MONITOR);
  	var expand = createDiv(CSS_SIZE_MONITOR + '-expand');
  	var shrink = createDiv(CSS_SIZE_MONITOR + '-shrink');

  	expand.appendChild(createDiv());
  	shrink.appendChild(createDiv());

  	resizer.appendChild(expand);
  	resizer.appendChild(shrink);
  	resizer._reset = function() {
  		expand.scrollLeft = maxSize;
  		expand.scrollTop = maxSize;
  		shrink.scrollLeft = maxSize;
  		shrink.scrollTop = maxSize;
  	};

  	var onScroll = function() {
  		resizer._reset();
  		handler();
  	};

  	addListener(expand, 'scroll', onScroll.bind(expand, 'expand'));
  	addListener(shrink, 'scroll', onScroll.bind(shrink, 'shrink'));

  	return resizer;
  }

  // https://davidwalsh.name/detect-node-insertion
  function watchForRender(node, handler) {
  	var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});
  	var proxy = expando.renderProxy = function(e) {
  		if (e.animationName === CSS_RENDER_ANIMATION) {
  			handler();
  		}
  	};

  	helpers$1.each(ANIMATION_START_EVENTS, function(type) {
  		addListener(node, type, proxy);
  	});

  	// #4737: Chrome might skip the CSS animation when the CSS_RENDER_MONITOR class
  	// is removed then added back immediately (same animation frame?). Accessing the
  	// `offsetParent` property will force a reflow and re-evaluate the CSS animation.
  	// https://gist.github.com/paulirish/5d52fb081b3570c81e3a#box-metrics
  	// https://github.com/chartjs/Chart.js/issues/4737
  	expando.reflow = !!node.offsetParent;

  	node.classList.add(CSS_RENDER_MONITOR);
  }

  function unwatchForRender(node) {
  	var expando = node[EXPANDO_KEY] || {};
  	var proxy = expando.renderProxy;

  	if (proxy) {
  		helpers$1.each(ANIMATION_START_EVENTS, function(type) {
  			removeListener(node, type, proxy);
  		});

  		delete expando.renderProxy;
  	}

  	node.classList.remove(CSS_RENDER_MONITOR);
  }

  function addResizeListener(node, listener, chart) {
  	var expando = node[EXPANDO_KEY] || (node[EXPANDO_KEY] = {});

  	// Let's keep track of this added resizer and thus avoid DOM query when removing it.
  	var resizer = expando.resizer = createResizer(throttled(function() {
  		if (expando.resizer) {
  			var container = chart.options.maintainAspectRatio && node.parentNode;
  			var w = container ? container.clientWidth : 0;
  			listener(createEvent('resize', chart));
  			if (container && container.clientWidth < w && chart.canvas) {
  				// If the container size shrank during chart resize, let's assume
  				// scrollbar appeared. So we resize again with the scrollbar visible -
  				// effectively making chart smaller and the scrollbar hidden again.
  				// Because we are inside `throttled`, and currently `ticking`, scroll
  				// events are ignored during this whole 2 resize process.
  				// If we assumed wrong and something else happened, we are resizing
  				// twice in a frame (potential performance issue)
  				listener(createEvent('resize', chart));
  			}
  		}
  	}));

  	// The resizer needs to be attached to the node parent, so we first need to be
  	// sure that `node` is attached to the DOM before injecting the resizer element.
  	watchForRender(node, function() {
  		if (expando.resizer) {
  			var container = node.parentNode;
  			if (container && container !== resizer.parentNode) {
  				container.insertBefore(resizer, container.firstChild);
  			}

  			// The container size might have changed, let's reset the resizer state.
  			resizer._reset();
  		}
  	});
  }

  function removeResizeListener(node) {
  	var expando = node[EXPANDO_KEY] || {};
  	var resizer = expando.resizer;

  	delete expando.resizer;
  	unwatchForRender(node);

  	if (resizer && resizer.parentNode) {
  		resizer.parentNode.removeChild(resizer);
  	}
  }

  /**
   * Injects CSS styles inline if the styles are not already present.
   * @param {HTMLDocument|ShadowRoot} rootNode - the node to contain the <style>.
   * @param {string} css - the CSS to be injected.
   */
  function injectCSS(rootNode, css) {
  	// https://stackoverflow.com/q/3922139
  	var expando = rootNode[EXPANDO_KEY] || (rootNode[EXPANDO_KEY] = {});
  	if (!expando.containsStyles) {
  		expando.containsStyles = true;
  		css = '/* Chart.js */\n' + css;
  		var style = document.createElement('style');
  		style.setAttribute('type', 'text/css');
  		style.appendChild(document.createTextNode(css));
  		rootNode.appendChild(style);
  	}
  }

  var platform_dom$2 = {
  	/**
  	 * When `true`, prevents the automatic injection of the stylesheet required to
  	 * correctly detect when the chart is added to the DOM and then resized. This
  	 * switch has been added to allow external stylesheet (`dist/Chart(.min)?.js`)
  	 * to be manually imported to make this library compatible with any CSP.
  	 * See https://github.com/chartjs/Chart.js/issues/5208
  	 */
  	disableCSSInjection: false,

  	/**
  	 * This property holds whether this platform is enabled for the current environment.
  	 * Currently used by platform.js to select the proper implementation.
  	 * @private
  	 */
  	_enabled: typeof window !== 'undefined' && typeof document !== 'undefined',

  	/**
  	 * Initializes resources that depend on platform options.
  	 * @param {HTMLCanvasElement} canvas - The Canvas element.
  	 * @private
  	 */
  	_ensureLoaded: function(canvas) {
  		if (!this.disableCSSInjection) {
  			// If the canvas is in a shadow DOM, then the styles must also be inserted
  			// into the same shadow DOM.
  			// https://github.com/chartjs/Chart.js/issues/5763
  			var root = canvas.getRootNode ? canvas.getRootNode() : document;
  			var targetNode = root.host ? root : document.head;
  			injectCSS(targetNode, stylesheet);
  		}
  	},

  	acquireContext: function(item, config) {
  		if (typeof item === 'string') {
  			item = document.getElementById(item);
  		} else if (item.length) {
  			// Support for array based queries (such as jQuery)
  			item = item[0];
  		}

  		if (item && item.canvas) {
  			// Support for any object associated to a canvas (including a context2d)
  			item = item.canvas;
  		}

  		// To prevent canvas fingerprinting, some add-ons undefine the getContext
  		// method, for example: https://github.com/kkapsner/CanvasBlocker
  		// https://github.com/chartjs/Chart.js/issues/2807
  		var context = item && item.getContext && item.getContext('2d');

  		// `instanceof HTMLCanvasElement/CanvasRenderingContext2D` fails when the item is
  		// inside an iframe or when running in a protected environment. We could guess the
  		// types from their toString() value but let's keep things flexible and assume it's
  		// a sufficient condition if the item has a context2D which has item as `canvas`.
  		// https://github.com/chartjs/Chart.js/issues/3887
  		// https://github.com/chartjs/Chart.js/issues/4102
  		// https://github.com/chartjs/Chart.js/issues/4152
  		if (context && context.canvas === item) {
  			// Load platform resources on first chart creation, to make it possible to
  			// import the library before setting platform options.
  			this._ensureLoaded(item);
  			initCanvas(item, config);
  			return context;
  		}

  		return null;
  	},

  	releaseContext: function(context) {
  		var canvas = context.canvas;
  		if (!canvas[EXPANDO_KEY]) {
  			return;
  		}

  		var initial = canvas[EXPANDO_KEY].initial;
  		['height', 'width'].forEach(function(prop) {
  			var value = initial[prop];
  			if (helpers$1.isNullOrUndef(value)) {
  				canvas.removeAttribute(prop);
  			} else {
  				canvas.setAttribute(prop, value);
  			}
  		});

  		helpers$1.each(initial.style || {}, function(value, key) {
  			canvas.style[key] = value;
  		});

  		// The canvas render size might have been changed (and thus the state stack discarded),
  		// we can't use save() and restore() to restore the initial state. So make sure that at
  		// least the canvas context is reset to the default state by setting the canvas width.
  		// https://www.w3.org/TR/2011/WD-html5-20110525/the-canvas-element.html
  		// eslint-disable-next-line no-self-assign
  		canvas.width = canvas.width;

  		delete canvas[EXPANDO_KEY];
  	},

  	addEventListener: function(chart, type, listener) {
  		var canvas = chart.canvas;
  		if (type === 'resize') {
  			// Note: the resize event is not supported on all browsers.
  			addResizeListener(canvas, listener, chart);
  			return;
  		}

  		var expando = listener[EXPANDO_KEY] || (listener[EXPANDO_KEY] = {});
  		var proxies = expando.proxies || (expando.proxies = {});
  		var proxy = proxies[chart.id + '_' + type] = function(event) {
  			listener(fromNativeEvent(event, chart));
  		};

  		addListener(canvas, type, proxy);
  	},

  	removeEventListener: function(chart, type, listener) {
  		var canvas = chart.canvas;
  		if (type === 'resize') {
  			// Note: the resize event is not supported on all browsers.
  			removeResizeListener(canvas);
  			return;
  		}

  		var expando = listener[EXPANDO_KEY] || {};
  		var proxies = expando.proxies || {};
  		var proxy = proxies[chart.id + '_' + type];
  		if (!proxy) {
  			return;
  		}

  		removeListener(canvas, type, proxy);
  	}
  };

  // DEPRECATIONS

  /**
   * Provided for backward compatibility, use EventTarget.addEventListener instead.
   * EventTarget.addEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+
   * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener
   * @function Chart.helpers.addEvent
   * @deprecated since version 2.7.0
   * @todo remove at version 3
   * @private
   */
  helpers$1.addEvent = addListener;

  /**
   * Provided for backward compatibility, use EventTarget.removeEventListener instead.
   * EventTarget.removeEventListener compatibility: Chrome, Opera 7, Safari, FF1.5+, IE9+
   * @see https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/removeEventListener
   * @function Chart.helpers.removeEvent
   * @deprecated since version 2.7.0
   * @todo remove at version 3
   * @private
   */
  helpers$1.removeEvent = removeListener;

  // @TODO Make possible to select another platform at build time.
  var implementation = platform_dom$2._enabled ? platform_dom$2 : platform_basic;

  /**
   * @namespace Chart.platform
   * @see https://chartjs.gitbooks.io/proposals/content/Platform.html
   * @since 2.4.0
   */
  var platform = helpers$1.extend({
  	/**
  	 * @since 2.7.0
  	 */
  	initialize: function() {},

  	/**
  	 * Called at chart construction time, returns a context2d instance implementing
  	 * the [W3C Canvas 2D Context API standard]{@link https://www.w3.org/TR/2dcontext/}.
  	 * @param {*} item - The native item from which to acquire context (platform specific)
  	 * @param {object} options - The chart options
  	 * @returns {CanvasRenderingContext2D} context2d instance
  	 */
  	acquireContext: function() {},

  	/**
  	 * Called at chart destruction time, releases any resources associated to the context
  	 * previously returned by the acquireContext() method.
  	 * @param {CanvasRenderingContext2D} context - The context2d instance
  	 * @returns {boolean} true if the method succeeded, else false
  	 */
  	releaseContext: function() {},

  	/**
  	 * Registers the specified listener on the given chart.
  	 * @param {Chart} chart - Chart from which to listen for event
  	 * @param {string} type - The ({@link IEvent}) type to listen for
  	 * @param {function} listener - Receives a notification (an object that implements
  	 * the {@link IEvent} interface) when an event of the specified type occurs.
  	 */
  	addEventListener: function() {},

  	/**
  	 * Removes the specified listener previously registered with addEventListener.
  	 * @param {Chart} chart - Chart from which to remove the listener
  	 * @param {string} type - The ({@link IEvent}) type to remove
  	 * @param {function} listener - The listener function to remove from the event target.
  	 */
  	removeEventListener: function() {}

  }, implementation);

  core_defaults._set('global', {
  	plugins: {}
  });

  /**
   * The plugin service singleton
   * @namespace Chart.plugins
   * @since 2.1.0
   */
  var core_plugins = {
  	/**
  	 * Globally registered plugins.
  	 * @private
  	 */
  	_plugins: [],

  	/**
  	 * This identifier is used to invalidate the descriptors cache attached to each chart
  	 * when a global plugin is registered or unregistered. In this case, the cache ID is
  	 * incremented and descriptors are regenerated during following API calls.
  	 * @private
  	 */
  	_cacheId: 0,

  	/**
  	 * Registers the given plugin(s) if not already registered.
  	 * @param {IPlugin[]|IPlugin} plugins plugin instance(s).
  	 */
  	register: function(plugins) {
  		var p = this._plugins;
  		([]).concat(plugins).forEach(function(plugin) {
  			if (p.indexOf(plugin) === -1) {
  				p.push(plugin);
  			}
  		});

  		this._cacheId++;
  	},

  	/**
  	 * Unregisters the given plugin(s) only if registered.
  	 * @param {IPlugin[]|IPlugin} plugins plugin instance(s).
  	 */
  	unregister: function(plugins) {
  		var p = this._plugins;
  		([]).concat(plugins).forEach(function(plugin) {
  			var idx = p.indexOf(plugin);
  			if (idx !== -1) {
  				p.splice(idx, 1);
  			}
  		});

  		this._cacheId++;
  	},

  	/**
  	 * Remove all registered plugins.
  	 * @since 2.1.5
  	 */
  	clear: function() {
  		this._plugins = [];
  		this._cacheId++;
  	},

  	/**
  	 * Returns the number of registered plugins?
  	 * @returns {number}
  	 * @since 2.1.5
  	 */
  	count: function() {
  		return this._plugins.length;
  	},

  	/**
  	 * Returns all registered plugin instances.
  	 * @returns {IPlugin[]} array of plugin objects.
  	 * @since 2.1.5
  	 */
  	getAll: function() {
  		return this._plugins;
  	},

  	/**
  	 * Calls enabled plugins for `chart` on the specified hook and with the given args.
  	 * This method immediately returns as soon as a plugin explicitly returns false. The
  	 * returned value can be used, for instance, to interrupt the current action.
  	 * @param {Chart} chart - The chart instance for which plugins should be called.
  	 * @param {string} hook - The name of the plugin method to call (e.g. 'beforeUpdate').
  	 * @param {Array} [args] - Extra arguments to apply to the hook call.
  	 * @returns {boolean} false if any of the plugins return false, else returns true.
  	 */
  	notify: function(chart, hook, args) {
  		var descriptors = this.descriptors(chart);
  		var ilen = descriptors.length;
  		var i, descriptor, plugin, params, method;

  		for (i = 0; i < ilen; ++i) {
  			descriptor = descriptors[i];
  			plugin = descriptor.plugin;
  			method = plugin[hook];
  			if (typeof method === 'function') {
  				params = [chart].concat(args || []);
  				params.push(descriptor.options);
  				if (method.apply(plugin, params) === false) {
  					return false;
  				}
  			}
  		}

  		return true;
  	},

  	/**
  	 * Returns descriptors of enabled plugins for the given chart.
  	 * @returns {object[]} [{ plugin, options }]
  	 * @private
  	 */
  	descriptors: function(chart) {
  		var cache = chart.$plugins || (chart.$plugins = {});
  		if (cache.id === this._cacheId) {
  			return cache.descriptors;
  		}

  		var plugins = [];
  		var descriptors = [];
  		var config = (chart && chart.config) || {};
  		var options = (config.options && config.options.plugins) || {};

  		this._plugins.concat(config.plugins || []).forEach(function(plugin) {
  			var idx = plugins.indexOf(plugin);
  			if (idx !== -1) {
  				return;
  			}

  			var id = plugin.id;
  			var opts = options[id];
  			if (opts === false) {
  				return;
  			}

  			if (opts === true) {
  				opts = helpers$1.clone(core_defaults.global.plugins[id]);
  			}

  			plugins.push(plugin);
  			descriptors.push({
  				plugin: plugin,
  				options: opts || {}
  			});
  		});

  		cache.descriptors = descriptors;
  		cache.id = this._cacheId;
  		return descriptors;
  	},

  	/**
  	 * Invalidates cache for the given chart: descriptors hold a reference on plugin option,
  	 * but in some cases, this reference can be changed by the user when updating options.
  	 * https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167
  	 * @private
  	 */
  	_invalidate: function(chart) {
  		delete chart.$plugins;
  	}
  };

  var core_scaleService = {
  	// Scale registration object. Extensions can register new scale types (such as log or DB scales) and then
  	// use the new chart options to grab the correct scale
  	constructors: {},
  	// Use a registration function so that we can move to an ES6 map when we no longer need to support
  	// old browsers

  	// Scale config defaults
  	defaults: {},
  	registerScaleType: function(type, scaleConstructor, scaleDefaults) {
  		this.constructors[type] = scaleConstructor;
  		this.defaults[type] = helpers$1.clone(scaleDefaults);
  	},
  	getScaleConstructor: function(type) {
  		return this.constructors.hasOwnProperty(type) ? this.constructors[type] : undefined;
  	},
  	getScaleDefaults: function(type) {
  		// Return the scale defaults merged with the global settings so that we always use the latest ones
  		return this.defaults.hasOwnProperty(type) ? helpers$1.merge({}, [core_defaults.scale, this.defaults[type]]) : {};
  	},
  	updateScaleDefaults: function(type, additions) {
  		var me = this;
  		if (me.defaults.hasOwnProperty(type)) {
  			me.defaults[type] = helpers$1.extend(me.defaults[type], additions);
  		}
  	},
  	addScalesToLayout: function(chart) {
  		// Adds each scale to the chart.boxes array to be sized accordingly
  		helpers$1.each(chart.scales, function(scale) {
  			// Set ILayoutItem parameters for backwards compatibility
  			scale.fullWidth = scale.options.fullWidth;
  			scale.position = scale.options.position;
  			scale.weight = scale.options.weight;
  			core_layouts.addBox(chart, scale);
  		});
  	}
  };

  var valueOrDefault$8 = helpers$1.valueOrDefault;
  var getRtlHelper = helpers$1.rtl.getRtlAdapter;

  core_defaults._set('global', {
  	tooltips: {
  		enabled: true,
  		custom: null,
  		mode: 'nearest',
  		position: 'average',
  		intersect: true,
  		backgroundColor: 'rgba(0,0,0,0.8)',
  		titleFontStyle: 'bold',
  		titleSpacing: 2,
  		titleMarginBottom: 6,
  		titleFontColor: '#fff',
  		titleAlign: 'left',
  		bodySpacing: 2,
  		bodyFontColor: '#fff',
  		bodyAlign: 'left',
  		footerFontStyle: 'bold',
  		footerSpacing: 2,
  		footerMarginTop: 6,
  		footerFontColor: '#fff',
  		footerAlign: 'left',
  		yPadding: 6,
  		xPadding: 6,
  		caretPadding: 2,
  		caretSize: 5,
  		cornerRadius: 6,
  		multiKeyBackground: '#fff',
  		displayColors: true,
  		borderColor: 'rgba(0,0,0,0)',
  		borderWidth: 0,
  		callbacks: {
  			// Args are: (tooltipItems, data)
  			beforeTitle: helpers$1.noop,
  			title: function(tooltipItems, data) {
  				var title = '';
  				var labels = data.labels;
  				var labelCount = labels ? labels.length : 0;

  				if (tooltipItems.length > 0) {
  					var item = tooltipItems[0];
  					if (item.label) {
  						title = item.label;
  					} else if (item.xLabel) {
  						title = item.xLabel;
  					} else if (labelCount > 0 && item.index < labelCount) {
  						title = labels[item.index];
  					}
  				}

  				return title;
  			},
  			afterTitle: helpers$1.noop,

  			// Args are: (tooltipItems, data)
  			beforeBody: helpers$1.noop,

  			// Args are: (tooltipItem, data)
  			beforeLabel: helpers$1.noop,
  			label: function(tooltipItem, data) {
  				var label = data.datasets[tooltipItem.datasetIndex].label || '';

  				if (label) {
  					label += ': ';
  				}
  				if (!helpers$1.isNullOrUndef(tooltipItem.value)) {
  					label += tooltipItem.value;
  				} else {
  					label += tooltipItem.yLabel;
  				}
  				return label;
  			},
  			labelColor: function(tooltipItem, chart) {
  				var meta = chart.getDatasetMeta(tooltipItem.datasetIndex);
  				var activeElement = meta.data[tooltipItem.index];
  				var view = activeElement._view;
  				return {
  					borderColor: view.borderColor,
  					backgroundColor: view.backgroundColor
  				};
  			},
  			labelTextColor: function() {
  				return this._options.bodyFontColor;
  			},
  			afterLabel: helpers$1.noop,

  			// Args are: (tooltipItems, data)
  			afterBody: helpers$1.noop,

  			// Args are: (tooltipItems, data)
  			beforeFooter: helpers$1.noop,
  			footer: helpers$1.noop,
  			afterFooter: helpers$1.noop
  		}
  	}
  });

  var positioners = {
  	/**
  	 * Average mode places the tooltip at the average position of the elements shown
  	 * @function Chart.Tooltip.positioners.average
  	 * @param elements {ChartElement[]} the elements being displayed in the tooltip
  	 * @returns {object} tooltip position
  	 */
  	average: function(elements) {
  		if (!elements.length) {
  			return false;
  		}

  		var i, len;
  		var x = 0;
  		var y = 0;
  		var count = 0;

  		for (i = 0, len = elements.length; i < len; ++i) {
  			var el = elements[i];
  			if (el && el.hasValue()) {
  				var pos = el.tooltipPosition();
  				x += pos.x;
  				y += pos.y;
  				++count;
  			}
  		}

  		return {
  			x: x / count,
  			y: y / count
  		};
  	},

  	/**
  	 * Gets the tooltip position nearest of the item nearest to the event position
  	 * @function Chart.Tooltip.positioners.nearest
  	 * @param elements {Chart.Element[]} the tooltip elements
  	 * @param eventPosition {object} the position of the event in canvas coordinates
  	 * @returns {object} the tooltip position
  	 */
  	nearest: function(elements, eventPosition) {
  		var x = eventPosition.x;
  		var y = eventPosition.y;
  		var minDistance = Number.POSITIVE_INFINITY;
  		var i, len, nearestElement;

  		for (i = 0, len = elements.length; i < len; ++i) {
  			var el = elements[i];
  			if (el && el.hasValue()) {
  				var center = el.getCenterPoint();
  				var d = helpers$1.distanceBetweenPoints(eventPosition, center);

  				if (d < minDistance) {
  					minDistance = d;
  					nearestElement = el;
  				}
  			}
  		}

  		if (nearestElement) {
  			var tp = nearestElement.tooltipPosition();
  			x = tp.x;
  			y = tp.y;
  		}

  		return {
  			x: x,
  			y: y
  		};
  	}
  };

  // Helper to push or concat based on if the 2nd parameter is an array or not
  function pushOrConcat(base, toPush) {
  	if (toPush) {
  		if (helpers$1.isArray(toPush)) {
  			// base = base.concat(toPush);
  			Array.prototype.push.apply(base, toPush);
  		} else {
  			base.push(toPush);
  		}
  	}

  	return base;
  }

  /**
   * Returns array of strings split by newline
   * @param {string} value - The value to split by newline.
   * @returns {string[]} value if newline present - Returned from String split() method
   * @function
   */
  function splitNewlines(str) {
  	if ((typeof str === 'string' || str instanceof String) && str.indexOf('\n') > -1) {
  		return str.split('\n');
  	}
  	return str;
  }


  /**
   * Private helper to create a tooltip item model
   * @param element - the chart element (point, arc, bar) to create the tooltip item for
   * @return new tooltip item
   */
  function createTooltipItem(element) {
  	var xScale = element._xScale;
  	var yScale = element._yScale || element._scale; // handle radar || polarArea charts
  	var index = element._index;
  	var datasetIndex = element._datasetIndex;
  	var controller = element._chart.getDatasetMeta(datasetIndex).controller;
  	var indexScale = controller._getIndexScale();
  	var valueScale = controller._getValueScale();

  	return {
  		xLabel: xScale ? xScale.getLabelForIndex(index, datasetIndex) : '',
  		yLabel: yScale ? yScale.getLabelForIndex(index, datasetIndex) : '',
  		label: indexScale ? '' + indexScale.getLabelForIndex(index, datasetIndex) : '',
  		value: valueScale ? '' + valueScale.getLabelForIndex(index, datasetIndex) : '',
  		index: index,
  		datasetIndex: datasetIndex,
  		x: element._model.x,
  		y: element._model.y
  	};
  }

  /**
   * Helper to get the reset model for the tooltip
   * @param tooltipOpts {object} the tooltip options
   */
  function getBaseModel(tooltipOpts) {
  	var globalDefaults = core_defaults.global;

  	return {
  		// Positioning
  		xPadding: tooltipOpts.xPadding,
  		yPadding: tooltipOpts.yPadding,
  		xAlign: tooltipOpts.xAlign,
  		yAlign: tooltipOpts.yAlign,

  		// Drawing direction and text direction
  		rtl: tooltipOpts.rtl,
  		textDirection: tooltipOpts.textDirection,

  		// Body
  		bodyFontColor: tooltipOpts.bodyFontColor,
  		_bodyFontFamily: valueOrDefault$8(tooltipOpts.bodyFontFamily, globalDefaults.defaultFontFamily),
  		_bodyFontStyle: valueOrDefault$8(tooltipOpts.bodyFontStyle, globalDefaults.defaultFontStyle),
  		_bodyAlign: tooltipOpts.bodyAlign,
  		bodyFontSize: valueOrDefault$8(tooltipOpts.bodyFontSize, globalDefaults.defaultFontSize),
  		bodySpacing: tooltipOpts.bodySpacing,

  		// Title
  		titleFontColor: tooltipOpts.titleFontColor,
  		_titleFontFamily: valueOrDefault$8(tooltipOpts.titleFontFamily, globalDefaults.defaultFontFamily),
  		_titleFontStyle: valueOrDefault$8(tooltipOpts.titleFontStyle, globalDefaults.defaultFontStyle),
  		titleFontSize: valueOrDefault$8(tooltipOpts.titleFontSize, globalDefaults.defaultFontSize),
  		_titleAlign: tooltipOpts.titleAlign,
  		titleSpacing: tooltipOpts.titleSpacing,
  		titleMarginBottom: tooltipOpts.titleMarginBottom,

  		// Footer
  		footerFontColor: tooltipOpts.footerFontColor,
  		_footerFontFamily: valueOrDefault$8(tooltipOpts.footerFontFamily, globalDefaults.defaultFontFamily),
  		_footerFontStyle: valueOrDefault$8(tooltipOpts.footerFontStyle, globalDefaults.defaultFontStyle),
  		footerFontSize: valueOrDefault$8(tooltipOpts.footerFontSize, globalDefaults.defaultFontSize),
  		_footerAlign: tooltipOpts.footerAlign,
  		footerSpacing: tooltipOpts.footerSpacing,
  		footerMarginTop: tooltipOpts.footerMarginTop,

  		// Appearance
  		caretSize: tooltipOpts.caretSize,
  		cornerRadius: tooltipOpts.cornerRadius,
  		backgroundColor: tooltipOpts.backgroundColor,
  		opacity: 0,
  		legendColorBackground: tooltipOpts.multiKeyBackground,
  		displayColors: tooltipOpts.displayColors,
  		borderColor: tooltipOpts.borderColor,
  		borderWidth: tooltipOpts.borderWidth
  	};
  }

  /**
   * Get the size of the tooltip
   */
  function getTooltipSize(tooltip, model) {
  	var ctx = tooltip._chart.ctx;

  	var height = model.yPadding * 2; // Tooltip Padding
  	var width = 0;

  	// Count of all lines in the body
  	var body = model.body;
  	var combinedBodyLength = body.reduce(function(count, bodyItem) {
  		return count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length;
  	}, 0);
  	combinedBodyLength += model.beforeBody.length + model.afterBody.length;

  	var titleLineCount = model.title.length;
  	var footerLineCount = model.footer.length;
  	var titleFontSize = model.titleFontSize;
  	var bodyFontSize = model.bodyFontSize;
  	var footerFontSize = model.footerFontSize;

  	height += titleLineCount * titleFontSize; // Title Lines
  	height += titleLineCount ? (titleLineCount - 1) * model.titleSpacing : 0; // Title Line Spacing
  	height += titleLineCount ? model.titleMarginBottom : 0; // Title's bottom Margin
  	height += combinedBodyLength * bodyFontSize; // Body Lines
  	height += combinedBodyLength ? (combinedBodyLength - 1) * model.bodySpacing : 0; // Body Line Spacing
  	height += footerLineCount ? model.footerMarginTop : 0; // Footer Margin
  	height += footerLineCount * (footerFontSize); // Footer Lines
  	height += footerLineCount ? (footerLineCount - 1) * model.footerSpacing : 0; // Footer Line Spacing

  	// Title width
  	var widthPadding = 0;
  	var maxLineWidth = function(line) {
  		width = Math.max(width, ctx.measureText(line).width + widthPadding);
  	};

  	ctx.font = helpers$1.fontString(titleFontSize, model._titleFontStyle, model._titleFontFamily);
  	helpers$1.each(model.title, maxLineWidth);

  	// Body width
  	ctx.font = helpers$1.fontString(bodyFontSize, model._bodyFontStyle, model._bodyFontFamily);
  	helpers$1.each(model.beforeBody.concat(model.afterBody), maxLineWidth);

  	// Body lines may include some extra width due to the color box
  	widthPadding = model.displayColors ? (bodyFontSize + 2) : 0;
  	helpers$1.each(body, function(bodyItem) {
  		helpers$1.each(bodyItem.before, maxLineWidth);
  		helpers$1.each(bodyItem.lines, maxLineWidth);
  		helpers$1.each(bodyItem.after, maxLineWidth);
  	});

  	// Reset back to 0
  	widthPadding = 0;

  	// Footer width
  	ctx.font = helpers$1.fontString(footerFontSize, model._footerFontStyle, model._footerFontFamily);
  	helpers$1.each(model.footer, maxLineWidth);

  	// Add padding
  	width += 2 * model.xPadding;

  	return {
  		width: width,
  		height: height
  	};
  }

  /**
   * Helper to get the alignment of a tooltip given the size
   */
  function determineAlignment(tooltip, size) {
  	var model = tooltip._model;
  	var chart = tooltip._chart;
  	var chartArea = tooltip._chart.chartArea;
  	var xAlign = 'center';
  	var yAlign = 'center';

  	if (model.y < size.height) {
  		yAlign = 'top';
  	} else if (model.y > (chart.height - size.height)) {
  		yAlign = 'bottom';
  	}

  	var lf, rf; // functions to determine left, right alignment
  	var olf, orf; // functions to determine if left/right alignment causes tooltip to go outside chart
  	var yf; // function to get the y alignment if the tooltip goes outside of the left or right edges
  	var midX = (chartArea.left + chartArea.right) / 2;
  	var midY = (chartArea.top + chartArea.bottom) / 2;

  	if (yAlign === 'center') {
  		lf = function(x) {
  			return x <= midX;
  		};
  		rf = function(x) {
  			return x > midX;
  		};
  	} else {
  		lf = function(x) {
  			return x <= (size.width / 2);
  		};
  		rf = function(x) {
  			return x >= (chart.width - (size.width / 2));
  		};
  	}

  	olf = function(x) {
  		return x + size.width + model.caretSize + model.caretPadding > chart.width;
  	};
  	orf = function(x) {
  		return x - size.width - model.caretSize - model.caretPadding < 0;
  	};
  	yf = function(y) {
  		return y <= midY ? 'top' : 'bottom';
  	};

  	if (lf(model.x)) {
  		xAlign = 'left';

  		// Is tooltip too wide and goes over the right side of the chart.?
  		if (olf(model.x)) {
  			xAlign = 'center';
  			yAlign = yf(model.y);
  		}
  	} else if (rf(model.x)) {
  		xAlign = 'right';

  		// Is tooltip too wide and goes outside left edge of canvas?
  		if (orf(model.x)) {
  			xAlign = 'center';
  			yAlign = yf(model.y);
  		}
  	}

  	var opts = tooltip._options;
  	return {
  		xAlign: opts.xAlign ? opts.xAlign : xAlign,
  		yAlign: opts.yAlign ? opts.yAlign : yAlign
  	};
  }

  /**
   * Helper to get the location a tooltip needs to be placed at given the initial position (via the vm) and the size and alignment
   */
  function getBackgroundPoint(vm, size, alignment, chart) {
  	// Background Position
  	var x = vm.x;
  	var y = vm.y;

  	var caretSize = vm.caretSize;
  	var caretPadding = vm.caretPadding;
  	var cornerRadius = vm.cornerRadius;
  	var xAlign = alignment.xAlign;
  	var yAlign = alignment.yAlign;
  	var paddingAndSize = caretSize + caretPadding;
  	var radiusAndPadding = cornerRadius + caretPadding;

  	if (xAlign === 'right') {
  		x -= size.width;
  	} else if (xAlign === 'center') {
  		x -= (size.width / 2);
  		if (x + size.width > chart.width) {
  			x = chart.width - size.width;
  		}
  		if (x < 0) {
  			x = 0;
  		}
  	}

  	if (yAlign === 'top') {
  		y += paddingAndSize;
  	} else if (yAlign === 'bottom') {
  		y -= size.height + paddingAndSize;
  	} else {
  		y -= (size.height / 2);
  	}

  	if (yAlign === 'center') {
  		if (xAlign === 'left') {
  			x += paddingAndSize;
  		} else if (xAlign === 'right') {
  			x -= paddingAndSize;
  		}
  	} else if (xAlign === 'left') {
  		x -= radiusAndPadding;
  	} else if (xAlign === 'right') {
  		x += radiusAndPadding;
  	}

  	return {
  		x: x,
  		y: y
  	};
  }

  function getAlignedX(vm, align) {
  	return align === 'center'
  		? vm.x + vm.width / 2
  		: align === 'right'
  			? vm.x + vm.width - vm.xPadding
  			: vm.x + vm.xPadding;
  }

  /**
   * Helper to build before and after body lines
   */
  function getBeforeAfterBodyLines(callback) {
  	return pushOrConcat([], splitNewlines(callback));
  }

  var exports$4 = core_element.extend({
  	initialize: function() {
  		this._model = getBaseModel(this._options);
  		this._lastActive = [];
  	},

  	// Get the title
  	// Args are: (tooltipItem, data)
  	getTitle: function() {
  		var me = this;
  		var opts = me._options;
  		var callbacks = opts.callbacks;

  		var beforeTitle = callbacks.beforeTitle.apply(me, arguments);
  		var title = callbacks.title.apply(me, arguments);
  		var afterTitle = callbacks.afterTitle.apply(me, arguments);

  		var lines = [];
  		lines = pushOrConcat(lines, splitNewlines(beforeTitle));
  		lines = pushOrConcat(lines, splitNewlines(title));
  		lines = pushOrConcat(lines, splitNewlines(afterTitle));

  		return lines;
  	},

  	// Args are: (tooltipItem, data)
  	getBeforeBody: function() {
  		return getBeforeAfterBodyLines(this._options.callbacks.beforeBody.apply(this, arguments));
  	},

  	// Args are: (tooltipItem, data)
  	getBody: function(tooltipItems, data) {
  		var me = this;
  		var callbacks = me._options.callbacks;
  		var bodyItems = [];

  		helpers$1.each(tooltipItems, function(tooltipItem) {
  			var bodyItem = {
  				before: [],
  				lines: [],
  				after: []
  			};
  			pushOrConcat(bodyItem.before, splitNewlines(callbacks.beforeLabel.call(me, tooltipItem, data)));
  			pushOrConcat(bodyItem.lines, callbacks.label.call(me, tooltipItem, data));
  			pushOrConcat(bodyItem.after, splitNewlines(callbacks.afterLabel.call(me, tooltipItem, data)));

  			bodyItems.push(bodyItem);
  		});

  		return bodyItems;
  	},

  	// Args are: (tooltipItem, data)
  	getAfterBody: function() {
  		return getBeforeAfterBodyLines(this._options.callbacks.afterBody.apply(this, arguments));
  	},

  	// Get the footer and beforeFooter and afterFooter lines
  	// Args are: (tooltipItem, data)
  	getFooter: function() {
  		var me = this;
  		var callbacks = me._options.callbacks;

  		var beforeFooter = callbacks.beforeFooter.apply(me, arguments);
  		var footer = callbacks.footer.apply(me, arguments);
  		var afterFooter = callbacks.afterFooter.apply(me, arguments);

  		var lines = [];
  		lines = pushOrConcat(lines, splitNewlines(beforeFooter));
  		lines = pushOrConcat(lines, splitNewlines(footer));
  		lines = pushOrConcat(lines, splitNewlines(afterFooter));

  		return lines;
  	},

  	update: function(changed) {
  		var me = this;
  		var opts = me._options;

  		// Need to regenerate the model because its faster than using extend and it is necessary due to the optimization in Chart.Element.transition
  		// that does _view = _model if ease === 1. This causes the 2nd tooltip update to set properties in both the view and model at the same time
  		// which breaks any animations.
  		var existingModel = me._model;
  		var model = me._model = getBaseModel(opts);
  		var active = me._active;

  		var data = me._data;

  		// In the case where active.length === 0 we need to keep these at existing values for good animations
  		var alignment = {
  			xAlign: existingModel.xAlign,
  			yAlign: existingModel.yAlign
  		};
  		var backgroundPoint = {
  			x: existingModel.x,
  			y: existingModel.y
  		};
  		var tooltipSize = {
  			width: existingModel.width,
  			height: existingModel.height
  		};
  		var tooltipPosition = {
  			x: existingModel.caretX,
  			y: existingModel.caretY
  		};

  		var i, len;

  		if (active.length) {
  			model.opacity = 1;

  			var labelColors = [];
  			var labelTextColors = [];
  			tooltipPosition = positioners[opts.position].call(me, active, me._eventPosition);

  			var tooltipItems = [];
  			for (i = 0, len = active.length; i < len; ++i) {
  				tooltipItems.push(createTooltipItem(active[i]));
  			}

  			// If the user provided a filter function, use it to modify the tooltip items
  			if (opts.filter) {
  				tooltipItems = tooltipItems.filter(function(a) {
  					return opts.filter(a, data);
  				});
  			}

  			// If the user provided a sorting function, use it to modify the tooltip items
  			if (opts.itemSort) {
  				tooltipItems = tooltipItems.sort(function(a, b) {
  					return opts.itemSort(a, b, data);
  				});
  			}

  			// Determine colors for boxes
  			helpers$1.each(tooltipItems, function(tooltipItem) {
  				labelColors.push(opts.callbacks.labelColor.call(me, tooltipItem, me._chart));
  				labelTextColors.push(opts.callbacks.labelTextColor.call(me, tooltipItem, me._chart));
  			});


  			// Build the Text Lines
  			model.title = me.getTitle(tooltipItems, data);
  			model.beforeBody = me.getBeforeBody(tooltipItems, data);
  			model.body = me.getBody(tooltipItems, data);
  			model.afterBody = me.getAfterBody(tooltipItems, data);
  			model.footer = me.getFooter(tooltipItems, data);

  			// Initial positioning and colors
  			model.x = tooltipPosition.x;
  			model.y = tooltipPosition.y;
  			model.caretPadding = opts.caretPadding;
  			model.labelColors = labelColors;
  			model.labelTextColors = labelTextColors;

  			// data points
  			model.dataPoints = tooltipItems;

  			// We need to determine alignment of the tooltip
  			tooltipSize = getTooltipSize(this, model);
  			alignment = determineAlignment(this, tooltipSize);
  			// Final Size and Position
  			backgroundPoint = getBackgroundPoint(model, tooltipSize, alignment, me._chart);
  		} else {
  			model.opacity = 0;
  		}

  		model.xAlign = alignment.xAlign;
  		model.yAlign = alignment.yAlign;
  		model.x = backgroundPoint.x;
  		model.y = backgroundPoint.y;
  		model.width = tooltipSize.width;
  		model.height = tooltipSize.height;

  		// Point where the caret on the tooltip points to
  		model.caretX = tooltipPosition.x;
  		model.caretY = tooltipPosition.y;

  		me._model = model;

  		if (changed && opts.custom) {
  			opts.custom.call(me, model);
  		}

  		return me;
  	},

  	drawCaret: function(tooltipPoint, size) {
  		var ctx = this._chart.ctx;
  		var vm = this._view;
  		var caretPosition = this.getCaretPosition(tooltipPoint, size, vm);

  		ctx.lineTo(caretPosition.x1, caretPosition.y1);
  		ctx.lineTo(caretPosition.x2, caretPosition.y2);
  		ctx.lineTo(caretPosition.x3, caretPosition.y3);
  	},
  	getCaretPosition: function(tooltipPoint, size, vm) {
  		var x1, x2, x3, y1, y2, y3;
  		var caretSize = vm.caretSize;
  		var cornerRadius = vm.cornerRadius;
  		var xAlign = vm.xAlign;
  		var yAlign = vm.yAlign;
  		var ptX = tooltipPoint.x;
  		var ptY = tooltipPoint.y;
  		var width = size.width;
  		var height = size.height;

  		if (yAlign === 'center') {
  			y2 = ptY + (height / 2);

  			if (xAlign === 'left') {
  				x1 = ptX;
  				x2 = x1 - caretSize;
  				x3 = x1;

  				y1 = y2 + caretSize;
  				y3 = y2 - caretSize;
  			} else {
  				x1 = ptX + width;
  				x2 = x1 + caretSize;
  				x3 = x1;

  				y1 = y2 - caretSize;
  				y3 = y2 + caretSize;
  			}
  		} else {
  			if (xAlign === 'left') {
  				x2 = ptX + cornerRadius + (caretSize);
  				x1 = x2 - caretSize;
  				x3 = x2 + caretSize;
  			} else if (xAlign === 'right') {
  				x2 = ptX + width - cornerRadius - caretSize;
  				x1 = x2 - caretSize;
  				x3 = x2 + caretSize;
  			} else {
  				x2 = vm.caretX;
  				x1 = x2 - caretSize;
  				x3 = x2 + caretSize;
  			}
  			if (yAlign === 'top') {
  				y1 = ptY;
  				y2 = y1 - caretSize;
  				y3 = y1;
  			} else {
  				y1 = ptY + height;
  				y2 = y1 + caretSize;
  				y3 = y1;
  				// invert drawing order
  				var tmp = x3;
  				x3 = x1;
  				x1 = tmp;
  			}
  		}
  		return {x1: x1, x2: x2, x3: x3, y1: y1, y2: y2, y3: y3};
  	},

  	drawTitle: function(pt, vm, ctx) {
  		var title = vm.title;
  		var length = title.length;
  		var titleFontSize, titleSpacing, i;

  		if (length) {
  			var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);

  			pt.x = getAlignedX(vm, vm._titleAlign);

  			ctx.textAlign = rtlHelper.textAlign(vm._titleAlign);
  			ctx.textBaseline = 'middle';

  			titleFontSize = vm.titleFontSize;
  			titleSpacing = vm.titleSpacing;

  			ctx.fillStyle = vm.titleFontColor;
  			ctx.font = helpers$1.fontString(titleFontSize, vm._titleFontStyle, vm._titleFontFamily);

  			for (i = 0; i < length; ++i) {
  				ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFontSize / 2);
  				pt.y += titleFontSize + titleSpacing; // Line Height and spacing

  				if (i + 1 === length) {
  					pt.y += vm.titleMarginBottom - titleSpacing; // If Last, add margin, remove spacing
  				}
  			}
  		}
  	},

  	drawBody: function(pt, vm, ctx) {
  		var bodyFontSize = vm.bodyFontSize;
  		var bodySpacing = vm.bodySpacing;
  		var bodyAlign = vm._bodyAlign;
  		var body = vm.body;
  		var drawColorBoxes = vm.displayColors;
  		var xLinePadding = 0;
  		var colorX = drawColorBoxes ? getAlignedX(vm, 'left') : 0;

  		var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);

  		var fillLineOfText = function(line) {
  			ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyFontSize / 2);
  			pt.y += bodyFontSize + bodySpacing;
  		};

  		var bodyItem, textColor, labelColors, lines, i, j, ilen, jlen;
  		var bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);

  		ctx.textAlign = bodyAlign;
  		ctx.textBaseline = 'middle';
  		ctx.font = helpers$1.fontString(bodyFontSize, vm._bodyFontStyle, vm._bodyFontFamily);

  		pt.x = getAlignedX(vm, bodyAlignForCalculation);

  		// Before body lines
  		ctx.fillStyle = vm.bodyFontColor;
  		helpers$1.each(vm.beforeBody, fillLineOfText);

  		xLinePadding = drawColorBoxes && bodyAlignForCalculation !== 'right'
  			? bodyAlign === 'center' ? (bodyFontSize / 2 + 1) : (bodyFontSize + 2)
  			: 0;

  		// Draw body lines now
  		for (i = 0, ilen = body.length; i < ilen; ++i) {
  			bodyItem = body[i];
  			textColor = vm.labelTextColors[i];
  			labelColors = vm.labelColors[i];

  			ctx.fillStyle = textColor;
  			helpers$1.each(bodyItem.before, fillLineOfText);

  			lines = bodyItem.lines;
  			for (j = 0, jlen = lines.length; j < jlen; ++j) {
  				// Draw Legend-like boxes if needed
  				if (drawColorBoxes) {
  					var rtlColorX = rtlHelper.x(colorX);

  					// Fill a white rect so that colours merge nicely if the opacity is < 1
  					ctx.fillStyle = vm.legendColorBackground;
  					ctx.fillRect(rtlHelper.leftForLtr(rtlColorX, bodyFontSize), pt.y, bodyFontSize, bodyFontSize);

  					// Border
  					ctx.lineWidth = 1;
  					ctx.strokeStyle = labelColors.borderColor;
  					ctx.strokeRect(rtlHelper.leftForLtr(rtlColorX, bodyFontSize), pt.y, bodyFontSize, bodyFontSize);

  					// Inner square
  					ctx.fillStyle = labelColors.backgroundColor;
  					ctx.fillRect(rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), bodyFontSize - 2), pt.y + 1, bodyFontSize - 2, bodyFontSize - 2);
  					ctx.fillStyle = textColor;
  				}

  				fillLineOfText(lines[j]);
  			}

  			helpers$1.each(bodyItem.after, fillLineOfText);
  		}

  		// Reset back to 0 for after body
  		xLinePadding = 0;

  		// After body lines
  		helpers$1.each(vm.afterBody, fillLineOfText);
  		pt.y -= bodySpacing; // Remove last body spacing
  	},

  	drawFooter: function(pt, vm, ctx) {
  		var footer = vm.footer;
  		var length = footer.length;
  		var footerFontSize, i;

  		if (length) {
  			var rtlHelper = getRtlHelper(vm.rtl, vm.x, vm.width);

  			pt.x = getAlignedX(vm, vm._footerAlign);
  			pt.y += vm.footerMarginTop;

  			ctx.textAlign = rtlHelper.textAlign(vm._footerAlign);
  			ctx.textBaseline = 'middle';

  			footerFontSize = vm.footerFontSize;

  			ctx.fillStyle = vm.footerFontColor;
  			ctx.font = helpers$1.fontString(footerFontSize, vm._footerFontStyle, vm._footerFontFamily);

  			for (i = 0; i < length; ++i) {
  				ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFontSize / 2);
  				pt.y += footerFontSize + vm.footerSpacing;
  			}
  		}
  	},

  	drawBackground: function(pt, vm, ctx, tooltipSize) {
  		ctx.fillStyle = vm.backgroundColor;
  		ctx.strokeStyle = vm.borderColor;
  		ctx.lineWidth = vm.borderWidth;
  		var xAlign = vm.xAlign;
  		var yAlign = vm.yAlign;
  		var x = pt.x;
  		var y = pt.y;
  		var width = tooltipSize.width;
  		var height = tooltipSize.height;
  		var radius = vm.cornerRadius;

  		ctx.beginPath();
  		ctx.moveTo(x + radius, y);
  		if (yAlign === 'top') {
  			this.drawCaret(pt, tooltipSize);
  		}
  		ctx.lineTo(x + width - radius, y);
  		ctx.quadraticCurveTo(x + width, y, x + width, y + radius);
  		if (yAlign === 'center' && xAlign === 'right') {
  			this.drawCaret(pt, tooltipSize);
  		}
  		ctx.lineTo(x + width, y + height - radius);
  		ctx.quadraticCurveTo(x + width, y + height, x + width - radius, y + height);
  		if (yAlign === 'bottom') {
  			this.drawCaret(pt, tooltipSize);
  		}
  		ctx.lineTo(x + radius, y + height);
  		ctx.quadraticCurveTo(x, y + height, x, y + height - radius);
  		if (yAlign === 'center' && xAlign === 'left') {
  			this.drawCaret(pt, tooltipSize);
  		}
  		ctx.lineTo(x, y + radius);
  		ctx.quadraticCurveTo(x, y, x + radius, y);
  		ctx.closePath();

  		ctx.fill();

  		if (vm.borderWidth > 0) {
  			ctx.stroke();
  		}
  	},

  	draw: function() {
  		var ctx = this._chart.ctx;
  		var vm = this._view;

  		if (vm.opacity === 0) {
  			return;
  		}

  		var tooltipSize = {
  			width: vm.width,
  			height: vm.height
  		};
  		var pt = {
  			x: vm.x,
  			y: vm.y
  		};

  		// IE11/Edge does not like very small opacities, so snap to 0
  		var opacity = Math.abs(vm.opacity < 1e-3) ? 0 : vm.opacity;

  		// Truthy/falsey value for empty tooltip
  		var hasTooltipContent = vm.title.length || vm.beforeBody.length || vm.body.length || vm.afterBody.length || vm.footer.length;

  		if (this._options.enabled && hasTooltipContent) {
  			ctx.save();
  			ctx.globalAlpha = opacity;

  			// Draw Background
  			this.drawBackground(pt, vm, ctx, tooltipSize);

  			// Draw Title, Body, and Footer
  			pt.y += vm.yPadding;

  			helpers$1.rtl.overrideTextDirection(ctx, vm.textDirection);

  			// Titles
  			this.drawTitle(pt, vm, ctx);

  			// Body
  			this.drawBody(pt, vm, ctx);

  			// Footer
  			this.drawFooter(pt, vm, ctx);

  			helpers$1.rtl.restoreTextDirection(ctx, vm.textDirection);

  			ctx.restore();
  		}
  	},

  	/**
  	 * Handle an event
  	 * @private
  	 * @param {IEvent} event - The event to handle
  	 * @returns {boolean} true if the tooltip changed
  	 */
  	handleEvent: function(e) {
  		var me = this;
  		var options = me._options;
  		var changed = false;

  		me._lastActive = me._lastActive || [];

  		// Find Active Elements for tooltips
  		if (e.type === 'mouseout') {
  			me._active = [];
  		} else {
  			me._active = me._chart.getElementsAtEventForMode(e, options.mode, options);
  			if (options.reverse) {
  				me._active.reverse();
  			}
  		}

  		// Remember Last Actives
  		changed = !helpers$1.arrayEquals(me._active, me._lastActive);

  		// Only handle target event on tooltip change
  		if (changed) {
  			me._lastActive = me._active;

  			if (options.enabled || options.custom) {
  				me._eventPosition = {
  					x: e.x,
  					y: e.y
  				};

  				me.update(true);
  				me.pivot();
  			}
  		}

  		return changed;
  	}
  });

  /**
   * @namespace Chart.Tooltip.positioners
   */
  var positioners_1 = positioners;

  var core_tooltip = exports$4;
  core_tooltip.positioners = positioners_1;

  var valueOrDefault$9 = helpers$1.valueOrDefault;

  core_defaults._set('global', {
  	elements: {},
  	events: [
  		'mousemove',
  		'mouseout',
  		'click',
  		'touchstart',
  		'touchmove'
  	],
  	hover: {
  		onHover: null,
  		mode: 'nearest',
  		intersect: true,
  		animationDuration: 400
  	},
  	onClick: null,
  	maintainAspectRatio: true,
  	responsive: true,
  	responsiveAnimationDuration: 0
  });

  /**
   * Recursively merge the given config objects representing the `scales` option
   * by incorporating scale defaults in `xAxes` and `yAxes` array items, then
   * returns a deep copy of the result, thus doesn't alter inputs.
   */
  function mergeScaleConfig(/* config objects ... */) {
  	return helpers$1.merge({}, [].slice.call(arguments), {
  		merger: function(key, target, source, options) {
  			if (key === 'xAxes' || key === 'yAxes') {
  				var slen = source[key].length;
  				var i, type, scale;

  				if (!target[key]) {
  					target[key] = [];
  				}

  				for (i = 0; i < slen; ++i) {
  					scale = source[key][i];
  					type = valueOrDefault$9(scale.type, key === 'xAxes' ? 'category' : 'linear');

  					if (i >= target[key].length) {
  						target[key].push({});
  					}

  					if (!target[key][i].type || (scale.type && scale.type !== target[key][i].type)) {
  						// new/untyped scale or type changed: let's apply the new defaults
  						// then merge source scale to correctly overwrite the defaults.
  						helpers$1.merge(target[key][i], [core_scaleService.getScaleDefaults(type), scale]);
  					} else {
  						// scales type are the same
  						helpers$1.merge(target[key][i], scale);
  					}
  				}
  			} else {
  				helpers$1._merger(key, target, source, options);
  			}
  		}
  	});
  }

  /**
   * Recursively merge the given config objects as the root options by handling
   * default scale options for the `scales` and `scale` properties, then returns
   * a deep copy of the result, thus doesn't alter inputs.
   */
  function mergeConfig(/* config objects ... */) {
  	return helpers$1.merge({}, [].slice.call(arguments), {
  		merger: function(key, target, source, options) {
  			var tval = target[key] || {};
  			var sval = source[key];

  			if (key === 'scales') {
  				// scale config merging is complex. Add our own function here for that
  				target[key] = mergeScaleConfig(tval, sval);
  			} else if (key === 'scale') {
  				// used in polar area & radar charts since there is only one scale
  				target[key] = helpers$1.merge(tval, [core_scaleService.getScaleDefaults(sval.type), sval]);
  			} else {
  				helpers$1._merger(key, target, source, options);
  			}
  		}
  	});
  }

  function initConfig(config) {
  	config = config || {};

  	// Do NOT use mergeConfig for the data object because this method merges arrays
  	// and so would change references to labels and datasets, preventing data updates.
  	var data = config.data = config.data || {};
  	data.datasets = data.datasets || [];
  	data.labels = data.labels || [];

  	config.options = mergeConfig(
  		core_defaults.global,
  		core_defaults[config.type],
  		config.options || {});

  	return config;
  }

  function updateConfig(chart) {
  	var newOptions = chart.options;

  	helpers$1.each(chart.scales, function(scale) {
  		core_layouts.removeBox(chart, scale);
  	});

  	newOptions = mergeConfig(
  		core_defaults.global,
  		core_defaults[chart.config.type],
  		newOptions);

  	chart.options = chart.config.options = newOptions;
  	chart.ensureScalesHaveIDs();
  	chart.buildOrUpdateScales();

  	// Tooltip
  	chart.tooltip._options = newOptions.tooltips;
  	chart.tooltip.initialize();
  }

  function nextAvailableScaleId(axesOpts, prefix, index) {
  	var id;
  	var hasId = function(obj) {
  		return obj.id === id;
  	};

  	do {
  		id = prefix + index++;
  	} while (helpers$1.findIndex(axesOpts, hasId) >= 0);

  	return id;
  }

  function positionIsHorizontal(position) {
  	return position === 'top' || position === 'bottom';
  }

  function compare2Level(l1, l2) {
  	return function(a, b) {
  		return a[l1] === b[l1]
  			? a[l2] - b[l2]
  			: a[l1] - b[l1];
  	};
  }

  var Chart = function(item, config) {
  	this.construct(item, config);
  	return this;
  };

  helpers$1.extend(Chart.prototype, /** @lends Chart */ {
  	/**
  	 * @private
  	 */
  	construct: function(item, config) {
  		var me = this;

  		config = initConfig(config);

  		var context = platform.acquireContext(item, config);
  		var canvas = context && context.canvas;
  		var height = canvas && canvas.height;
  		var width = canvas && canvas.width;

  		me.id = helpers$1.uid();
  		me.ctx = context;
  		me.canvas = canvas;
  		me.config = config;
  		me.width = width;
  		me.height = height;
  		me.aspectRatio = height ? width / height : null;
  		me.options = config.options;
  		me._bufferedRender = false;
  		me._layers = [];

  		/**
  		 * Provided for backward compatibility, Chart and Chart.Controller have been merged,
  		 * the "instance" still need to be defined since it might be called from plugins.
  		 * @prop Chart#chart
  		 * @deprecated since version 2.6.0
  		 * @todo remove at version 3
  		 * @private
  		 */
  		me.chart = me;
  		me.controller = me; // chart.chart.controller #inception

  		// Add the chart instance to the global namespace
  		Chart.instances[me.id] = me;

  		// Define alias to the config data: `chart.data === chart.config.data`
  		Object.defineProperty(me, 'data', {
  			get: function() {
  				return me.config.data;
  			},
  			set: function(value) {
  				me.config.data = value;
  			}
  		});

  		if (!context || !canvas) {
  			// The given item is not a compatible context2d element, let's return before finalizing
  			// the chart initialization but after setting basic chart / controller properties that
  			// can help to figure out that the chart is not valid (e.g chart.canvas !== null);
  			// https://github.com/chartjs/Chart.js/issues/2807
  			console.error("Failed to create chart: can't acquire context from the given item");
  			return;
  		}

  		me.initialize();
  		me.update();
  	},

  	/**
  	 * @private
  	 */
  	initialize: function() {
  		var me = this;

  		// Before init plugin notification
  		core_plugins.notify(me, 'beforeInit');

  		helpers$1.retinaScale(me, me.options.devicePixelRatio);

  		me.bindEvents();

  		if (me.options.responsive) {
  			// Initial resize before chart draws (must be silent to preserve initial animations).
  			me.resize(true);
  		}

  		me.initToolTip();

  		// After init plugin notification
  		core_plugins.notify(me, 'afterInit');

  		return me;
  	},

  	clear: function() {
  		helpers$1.canvas.clear(this);
  		return this;
  	},

  	stop: function() {
  		// Stops any current animation loop occurring
  		core_animations.cancelAnimation(this);
  		return this;
  	},

  	resize: function(silent) {
  		var me = this;
  		var options = me.options;
  		var canvas = me.canvas;
  		var aspectRatio = (options.maintainAspectRatio && me.aspectRatio) || null;

  		// the canvas render width and height will be casted to integers so make sure that
  		// the canvas display style uses the same integer values to avoid blurring effect.

  		// Set to 0 instead of canvas.size because the size defaults to 300x150 if the element is collapsed
  		var newWidth = Math.max(0, Math.floor(helpers$1.getMaximumWidth(canvas)));
  		var newHeight = Math.max(0, Math.floor(aspectRatio ? newWidth / aspectRatio : helpers$1.getMaximumHeight(canvas)));

  		if (me.width === newWidth && me.height === newHeight) {
  			return;
  		}

  		canvas.width = me.width = newWidth;
  		canvas.height = me.height = newHeight;
  		canvas.style.width = newWidth + 'px';
  		canvas.style.height = newHeight + 'px';

  		helpers$1.retinaScale(me, options.devicePixelRatio);

  		if (!silent) {
  			// Notify any plugins about the resize
  			var newSize = {width: newWidth, height: newHeight};
  			core_plugins.notify(me, 'resize', [newSize]);

  			// Notify of resize
  			if (options.onResize) {
  				options.onResize(me, newSize);
  			}

  			me.stop();
  			me.update({
  				duration: options.responsiveAnimationDuration
  			});
  		}
  	},

  	ensureScalesHaveIDs: function() {
  		var options = this.options;
  		var scalesOptions = options.scales || {};
  		var scaleOptions = options.scale;

  		helpers$1.each(scalesOptions.xAxes, function(xAxisOptions, index) {
  			if (!xAxisOptions.id) {
  				xAxisOptions.id = nextAvailableScaleId(scalesOptions.xAxes, 'x-axis-', index);
  			}
  		});

  		helpers$1.each(scalesOptions.yAxes, function(yAxisOptions, index) {
  			if (!yAxisOptions.id) {
  				yAxisOptions.id = nextAvailableScaleId(scalesOptions.yAxes, 'y-axis-', index);
  			}
  		});

  		if (scaleOptions) {
  			scaleOptions.id = scaleOptions.id || 'scale';
  		}
  	},

  	/**
  	 * Builds a map of scale ID to scale object for future lookup.
  	 */
  	buildOrUpdateScales: function() {
  		var me = this;
  		var options = me.options;
  		var scales = me.scales || {};
  		var items = [];
  		var updated = Object.keys(scales).reduce(function(obj, id) {
  			obj[id] = false;
  			return obj;
  		}, {});

  		if (options.scales) {
  			items = items.concat(
  				(options.scales.xAxes || []).map(function(xAxisOptions) {
  					return {options: xAxisOptions, dtype: 'category', dposition: 'bottom'};
  				}),
  				(options.scales.yAxes || []).map(function(yAxisOptions) {
  					return {options: yAxisOptions, dtype: 'linear', dposition: 'left'};
  				})
  			);
  		}

  		if (options.scale) {
  			items.push({
  				options: options.scale,
  				dtype: 'radialLinear',
  				isDefault: true,
  				dposition: 'chartArea'
  			});
  		}

  		helpers$1.each(items, function(item) {
  			var scaleOptions = item.options;
  			var id = scaleOptions.id;
  			var scaleType = valueOrDefault$9(scaleOptions.type, item.dtype);

  			if (positionIsHorizontal(scaleOptions.position) !== positionIsHorizontal(item.dposition)) {
  				scaleOptions.position = item.dposition;
  			}

  			updated[id] = true;
  			var scale = null;
  			if (id in scales && scales[id].type === scaleType) {
  				scale = scales[id];
  				scale.options = scaleOptions;
  				scale.ctx = me.ctx;
  				scale.chart = me;
  			} else {
  				var scaleClass = core_scaleService.getScaleConstructor(scaleType);
  				if (!scaleClass) {
  					return;
  				}
  				scale = new scaleClass({
  					id: id,
  					type: scaleType,
  					options: scaleOptions,
  					ctx: me.ctx,
  					chart: me
  				});
  				scales[scale.id] = scale;
  			}

  			scale.mergeTicksOptions();

  			// TODO(SB): I think we should be able to remove this custom case (options.scale)
  			// and consider it as a regular scale part of the "scales"" map only! This would
  			// make the logic easier and remove some useless? custom code.
  			if (item.isDefault) {
  				me.scale = scale;
  			}
  		});
  		// clear up discarded scales
  		helpers$1.each(updated, function(hasUpdated, id) {
  			if (!hasUpdated) {
  				delete scales[id];
  			}
  		});

  		me.scales = scales;

  		core_scaleService.addScalesToLayout(this);
  	},

  	buildOrUpdateControllers: function() {
  		var me = this;
  		var newControllers = [];
  		var datasets = me.data.datasets;
  		var i, ilen;

  		for (i = 0, ilen = datasets.length; i < ilen; i++) {
  			var dataset = datasets[i];
  			var meta = me.getDatasetMeta(i);
  			var type = dataset.type || me.config.type;

  			if (meta.type && meta.type !== type) {
  				me.destroyDatasetMeta(i);
  				meta = me.getDatasetMeta(i);
  			}
  			meta.type = type;
  			meta.order = dataset.order || 0;
  			meta.index = i;

  			if (meta.controller) {
  				meta.controller.updateIndex(i);
  				meta.controller.linkScales();
  			} else {
  				var ControllerClass = controllers[meta.type];
  				if (ControllerClass === undefined) {
  					throw new Error('"' + meta.type + '" is not a chart type.');
  				}

  				meta.controller = new ControllerClass(me, i);
  				newControllers.push(meta.controller);
  			}
  		}

  		return newControllers;
  	},

  	/**
  	 * Reset the elements of all datasets
  	 * @private
  	 */
  	resetElements: function() {
  		var me = this;
  		helpers$1.each(me.data.datasets, function(dataset, datasetIndex) {
  			me.getDatasetMeta(datasetIndex).controller.reset();
  		}, me);
  	},

  	/**
  	* Resets the chart back to it's state before the initial animation
  	*/
  	reset: function() {
  		this.resetElements();
  		this.tooltip.initialize();
  	},

  	update: function(config) {
  		var me = this;
  		var i, ilen;

  		if (!config || typeof config !== 'object') {
  			// backwards compatibility
  			config = {
  				duration: config,
  				lazy: arguments[1]
  			};
  		}

  		updateConfig(me);

  		// plugins options references might have change, let's invalidate the cache
  		// https://github.com/chartjs/Chart.js/issues/5111#issuecomment-355934167
  		core_plugins._invalidate(me);

  		if (core_plugins.notify(me, 'beforeUpdate') === false) {
  			return;
  		}

  		// In case the entire data object changed
  		me.tooltip._data = me.data;

  		// Make sure dataset controllers are updated and new controllers are reset
  		var newControllers = me.buildOrUpdateControllers();

  		// Make sure all dataset controllers have correct meta data counts
  		for (i = 0, ilen = me.data.datasets.length; i < ilen; i++) {
  			me.getDatasetMeta(i).controller.buildOrUpdateElements();
  		}

  		me.updateLayout();

  		// Can only reset the new controllers after the scales have been updated
  		if (me.options.animation && me.options.animation.duration) {
  			helpers$1.each(newControllers, function(controller) {
  				controller.reset();
  			});
  		}

  		me.updateDatasets();

  		// Need to reset tooltip in case it is displayed with elements that are removed
  		// after update.
  		me.tooltip.initialize();

  		// Last active contains items that were previously in the tooltip.
  		// When we reset the tooltip, we need to clear it
  		me.lastActive = [];

  		// Do this before render so that any plugins that need final scale updates can use it
  		core_plugins.notify(me, 'afterUpdate');

  		me._layers.sort(compare2Level('z', '_idx'));

  		if (me._bufferedRender) {
  			me._bufferedRequest = {
  				duration: config.duration,
  				easing: config.easing,
  				lazy: config.lazy
  			};
  		} else {
  			me.render(config);
  		}
  	},

  	/**
  	 * Updates the chart layout unless a plugin returns `false` to the `beforeLayout`
  	 * hook, in which case, plugins will not be called on `afterLayout`.
  	 * @private
  	 */
  	updateLayout: function() {
  		var me = this;

  		if (core_plugins.notify(me, 'beforeLayout') === false) {
  			return;
  		}

  		core_layouts.update(this, this.width, this.height);

  		me._layers = [];
  		helpers$1.each(me.boxes, function(box) {
  			// _configure is called twice, once in core.scale.update and once here.
  			// Here the boxes are fully updated and at their final positions.
  			if (box._configure) {
  				box._configure();
  			}
  			me._layers.push.apply(me._layers, box._layers());
  		}, me);

  		me._layers.forEach(function(item, index) {
  			item._idx = index;
  		});

  		/**
  		 * Provided for backward compatibility, use `afterLayout` instead.
  		 * @method IPlugin#afterScaleUpdate
  		 * @deprecated since version 2.5.0
  		 * @todo remove at version 3
  		 * @private
  		 */
  		core_plugins.notify(me, 'afterScaleUpdate');
  		core_plugins.notify(me, 'afterLayout');
  	},

  	/**
  	 * Updates all datasets unless a plugin returns `false` to the `beforeDatasetsUpdate`
  	 * hook, in which case, plugins will not be called on `afterDatasetsUpdate`.
  	 * @private
  	 */
  	updateDatasets: function() {
  		var me = this;

  		if (core_plugins.notify(me, 'beforeDatasetsUpdate') === false) {
  			return;
  		}

  		for (var i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
  			me.updateDataset(i);
  		}

  		core_plugins.notify(me, 'afterDatasetsUpdate');
  	},

  	/**
  	 * Updates dataset at index unless a plugin returns `false` to the `beforeDatasetUpdate`
  	 * hook, in which case, plugins will not be called on `afterDatasetUpdate`.
  	 * @private
  	 */
  	updateDataset: function(index) {
  		var me = this;
  		var meta = me.getDatasetMeta(index);
  		var args = {
  			meta: meta,
  			index: index
  		};

  		if (core_plugins.notify(me, 'beforeDatasetUpdate', [args]) === false) {
  			return;
  		}

  		meta.controller._update();

  		core_plugins.notify(me, 'afterDatasetUpdate', [args]);
  	},

  	render: function(config) {
  		var me = this;

  		if (!config || typeof config !== 'object') {
  			// backwards compatibility
  			config = {
  				duration: config,
  				lazy: arguments[1]
  			};
  		}

  		var animationOptions = me.options.animation;
  		var duration = valueOrDefault$9(config.duration, animationOptions && animationOptions.duration);
  		var lazy = config.lazy;

  		if (core_plugins.notify(me, 'beforeRender') === false) {
  			return;
  		}

  		var onComplete = function(animation) {
  			core_plugins.notify(me, 'afterRender');
  			helpers$1.callback(animationOptions && animationOptions.onComplete, [animation], me);
  		};

  		if (animationOptions && duration) {
  			var animation = new core_animation({
  				numSteps: duration / 16.66, // 60 fps
  				easing: config.easing || animationOptions.easing,

  				render: function(chart, animationObject) {
  					var easingFunction = helpers$1.easing.effects[animationObject.easing];
  					var currentStep = animationObject.currentStep;
  					var stepDecimal = currentStep / animationObject.numSteps;

  					chart.draw(easingFunction(stepDecimal), stepDecimal, currentStep);
  				},

  				onAnimationProgress: animationOptions.onProgress,
  				onAnimationComplete: onComplete
  			});

  			core_animations.addAnimation(me, animation, duration, lazy);
  		} else {
  			me.draw();

  			// See https://github.com/chartjs/Chart.js/issues/3781
  			onComplete(new core_animation({numSteps: 0, chart: me}));
  		}

  		return me;
  	},

  	draw: function(easingValue) {
  		var me = this;
  		var i, layers;

  		me.clear();

  		if (helpers$1.isNullOrUndef(easingValue)) {
  			easingValue = 1;
  		}

  		me.transition(easingValue);

  		if (me.width <= 0 || me.height <= 0) {
  			return;
  		}

  		if (core_plugins.notify(me, 'beforeDraw', [easingValue]) === false) {
  			return;
  		}

  		// Because of plugin hooks (before/afterDatasetsDraw), datasets can't
  		// currently be part of layers. Instead, we draw
  		// layers <= 0 before(default, backward compat), and the rest after
  		layers = me._layers;
  		for (i = 0; i < layers.length && layers[i].z <= 0; ++i) {
  			layers[i].draw(me.chartArea);
  		}

  		me.drawDatasets(easingValue);

  		// Rest of layers
  		for (; i < layers.length; ++i) {
  			layers[i].draw(me.chartArea);
  		}

  		me._drawTooltip(easingValue);

  		core_plugins.notify(me, 'afterDraw', [easingValue]);
  	},

  	/**
  	 * @private
  	 */
  	transition: function(easingValue) {
  		var me = this;

  		for (var i = 0, ilen = (me.data.datasets || []).length; i < ilen; ++i) {
  			if (me.isDatasetVisible(i)) {
  				me.getDatasetMeta(i).controller.transition(easingValue);
  			}
  		}

  		me.tooltip.transition(easingValue);
  	},

  	/**
  	 * @private
  	 */
  	_getSortedDatasetMetas: function(filterVisible) {
  		var me = this;
  		var datasets = me.data.datasets || [];
  		var result = [];
  		var i, ilen;

  		for (i = 0, ilen = datasets.length; i < ilen; ++i) {
  			if (!filterVisible || me.isDatasetVisible(i)) {
  				result.push(me.getDatasetMeta(i));
  			}
  		}

  		result.sort(compare2Level('order', 'index'));

  		return result;
  	},

  	/**
  	 * @private
  	 */
  	_getSortedVisibleDatasetMetas: function() {
  		return this._getSortedDatasetMetas(true);
  	},

  	/**
  	 * Draws all datasets unless a plugin returns `false` to the `beforeDatasetsDraw`
  	 * hook, in which case, plugins will not be called on `afterDatasetsDraw`.
  	 * @private
  	 */
  	drawDatasets: function(easingValue) {
  		var me = this;
  		var metasets, i;

  		if (core_plugins.notify(me, 'beforeDatasetsDraw', [easingValue]) === false) {
  			return;
  		}

  		metasets = me._getSortedVisibleDatasetMetas();
  		for (i = metasets.length - 1; i >= 0; --i) {
  			me.drawDataset(metasets[i], easingValue);
  		}

  		core_plugins.notify(me, 'afterDatasetsDraw', [easingValue]);
  	},

  	/**
  	 * Draws dataset at index unless a plugin returns `false` to the `beforeDatasetDraw`
  	 * hook, in which case, plugins will not be called on `afterDatasetDraw`.
  	 * @private
  	 */
  	drawDataset: function(meta, easingValue) {
  		var me = this;
  		var args = {
  			meta: meta,
  			index: meta.index,
  			easingValue: easingValue
  		};

  		if (core_plugins.notify(me, 'beforeDatasetDraw', [args]) === false) {
  			return;
  		}

  		meta.controller.draw(easingValue);

  		core_plugins.notify(me, 'afterDatasetDraw', [args]);
  	},

  	/**
  	 * Draws tooltip unless a plugin returns `false` to the `beforeTooltipDraw`
  	 * hook, in which case, plugins will not be called on `afterTooltipDraw`.
  	 * @private
  	 */
  	_drawTooltip: function(easingValue) {
  		var me = this;
  		var tooltip = me.tooltip;
  		var args = {
  			tooltip: tooltip,
  			easingValue: easingValue
  		};

  		if (core_plugins.notify(me, 'beforeTooltipDraw', [args]) === false) {
  			return;
  		}

  		tooltip.draw();

  		core_plugins.notify(me, 'afterTooltipDraw', [args]);
  	},

  	/**
  	 * Get the single element that was clicked on
  	 * @return An object containing the dataset index and element index of the matching element. Also contains the rectangle that was draw
  	 */
  	getElementAtEvent: function(e) {
  		return core_interaction.modes.single(this, e);
  	},

  	getElementsAtEvent: function(e) {
  		return core_interaction.modes.label(this, e, {intersect: true});
  	},

  	getElementsAtXAxis: function(e) {
  		return core_interaction.modes['x-axis'](this, e, {intersect: true});
  	},

  	getElementsAtEventForMode: function(e, mode, options) {
  		var method = core_interaction.modes[mode];
  		if (typeof method === 'function') {
  			return method(this, e, options);
  		}

  		return [];
  	},

  	getDatasetAtEvent: function(e) {
  		return core_interaction.modes.dataset(this, e, {intersect: true});
  	},

  	getDatasetMeta: function(datasetIndex) {
  		var me = this;
  		var dataset = me.data.datasets[datasetIndex];
  		if (!dataset._meta) {
  			dataset._meta = {};
  		}

  		var meta = dataset._meta[me.id];
  		if (!meta) {
  			meta = dataset._meta[me.id] = {
  				type: null,
  				data: [],
  				dataset: null,
  				controller: null,
  				hidden: null,			// See isDatasetVisible() comment
  				xAxisID: null,
  				yAxisID: null,
  				order: dataset.order || 0,
  				index: datasetIndex
  			};
  		}

  		return meta;
  	},

  	getVisibleDatasetCount: function() {
  		var count = 0;
  		for (var i = 0, ilen = this.data.datasets.length; i < ilen; ++i) {
  			if (this.isDatasetVisible(i)) {
  				count++;
  			}
  		}
  		return count;
  	},

  	isDatasetVisible: function(datasetIndex) {
  		var meta = this.getDatasetMeta(datasetIndex);

  		// meta.hidden is a per chart dataset hidden flag override with 3 states: if true or false,
  		// the dataset.hidden value is ignored, else if null, the dataset hidden state is returned.
  		return typeof meta.hidden === 'boolean' ? !meta.hidden : !this.data.datasets[datasetIndex].hidden;
  	},

  	generateLegend: function() {
  		return this.options.legendCallback(this);
  	},

  	/**
  	 * @private
  	 */
  	destroyDatasetMeta: function(datasetIndex) {
  		var id = this.id;
  		var dataset = this.data.datasets[datasetIndex];
  		var meta = dataset._meta && dataset._meta[id];

  		if (meta) {
  			meta.controller.destroy();
  			delete dataset._meta[id];
  		}
  	},

  	destroy: function() {
  		var me = this;
  		var canvas = me.canvas;
  		var i, ilen;

  		me.stop();

  		// dataset controllers need to cleanup associated data
  		for (i = 0, ilen = me.data.datasets.length; i < ilen; ++i) {
  			me.destroyDatasetMeta(i);
  		}

  		if (canvas) {
  			me.unbindEvents();
  			helpers$1.canvas.clear(me);
  			platform.releaseContext(me.ctx);
  			me.canvas = null;
  			me.ctx = null;
  		}

  		core_plugins.notify(me, 'destroy');

  		delete Chart.instances[me.id];
  	},

  	toBase64Image: function() {
  		return this.canvas.toDataURL.apply(this.canvas, arguments);
  	},

  	initToolTip: function() {
  		var me = this;
  		me.tooltip = new core_tooltip({
  			_chart: me,
  			_chartInstance: me, // deprecated, backward compatibility
  			_data: me.data,
  			_options: me.options.tooltips
  		}, me);
  	},

  	/**
  	 * @private
  	 */
  	bindEvents: function() {
  		var me = this;
  		var listeners = me._listeners = {};
  		var listener = function() {
  			me.eventHandler.apply(me, arguments);
  		};

  		helpers$1.each(me.options.events, function(type) {
  			platform.addEventListener(me, type, listener);
  			listeners[type] = listener;
  		});

  		// Elements used to detect size change should not be injected for non responsive charts.
  		// See https://github.com/chartjs/Chart.js/issues/2210
  		if (me.options.responsive) {
  			listener = function() {
  				me.resize();
  			};

  			platform.addEventListener(me, 'resize', listener);
  			listeners.resize = listener;
  		}
  	},

  	/**
  	 * @private
  	 */
  	unbindEvents: function() {
  		var me = this;
  		var listeners = me._listeners;
  		if (!listeners) {
  			return;
  		}

  		delete me._listeners;
  		helpers$1.each(listeners, function(listener, type) {
  			platform.removeEventListener(me, type, listener);
  		});
  	},

  	updateHoverStyle: function(elements, mode, enabled) {
  		var prefix = enabled ? 'set' : 'remove';
  		var element, i, ilen;

  		for (i = 0, ilen = elements.length; i < ilen; ++i) {
  			element = elements[i];
  			if (element) {
  				this.getDatasetMeta(element._datasetIndex).controller[prefix + 'HoverStyle'](element);
  			}
  		}

  		if (mode === 'dataset') {
  			this.getDatasetMeta(elements[0]._datasetIndex).controller['_' + prefix + 'DatasetHoverStyle']();
  		}
  	},

  	/**
  	 * @private
  	 */
  	eventHandler: function(e) {
  		var me = this;
  		var tooltip = me.tooltip;

  		if (core_plugins.notify(me, 'beforeEvent', [e]) === false) {
  			return;
  		}

  		// Buffer any update calls so that renders do not occur
  		me._bufferedRender = true;
  		me._bufferedRequest = null;

  		var changed = me.handleEvent(e);
  		// for smooth tooltip animations issue #4989
  		// the tooltip should be the source of change
  		// Animation check workaround:
  		// tooltip._start will be null when tooltip isn't animating
  		if (tooltip) {
  			changed = tooltip._start
  				? tooltip.handleEvent(e)
  				: changed | tooltip.handleEvent(e);
  		}

  		core_plugins.notify(me, 'afterEvent', [e]);

  		var bufferedRequest = me._bufferedRequest;
  		if (bufferedRequest) {
  			// If we have an update that was triggered, we need to do a normal render
  			me.render(bufferedRequest);
  		} else if (changed && !me.animating) {
  			// If entering, leaving, or changing elements, animate the change via pivot
  			me.stop();

  			// We only need to render at this point. Updating will cause scales to be
  			// recomputed generating flicker & using more memory than necessary.
  			me.render({
  				duration: me.options.hover.animationDuration,
  				lazy: true
  			});
  		}

  		me._bufferedRender = false;
  		me._bufferedRequest = null;

  		return me;
  	},

  	/**
  	 * Handle an event
  	 * @private
  	 * @param {IEvent} event the event to handle
  	 * @return {boolean} true if the chart needs to re-render
  	 */
  	handleEvent: function(e) {
  		var me = this;
  		var options = me.options || {};
  		var hoverOptions = options.hover;
  		var changed = false;

  		me.lastActive = me.lastActive || [];

  		// Find Active Elements for hover and tooltips
  		if (e.type === 'mouseout') {
  			me.active = [];
  		} else {
  			me.active = me.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions);
  		}

  		// Invoke onHover hook
  		// Need to call with native event here to not break backwards compatibility
  		helpers$1.callback(options.onHover || options.hover.onHover, [e.native, me.active], me);

  		if (e.type === 'mouseup' || e.type === 'click') {
  			if (options.onClick) {
  				// Use e.native here for backwards compatibility
  				options.onClick.call(me, e.native, me.active);
  			}
  		}

  		// Remove styling for last active (even if it may still be active)
  		if (me.lastActive.length) {
  			me.updateHoverStyle(me.lastActive, hoverOptions.mode, false);
  		}

  		// Built in hover styling
  		if (me.active.length && hoverOptions.mode) {
  			me.updateHoverStyle(me.active, hoverOptions.mode, true);
  		}

  		changed = !helpers$1.arrayEquals(me.active, me.lastActive);

  		// Remember Last Actives
  		me.lastActive = me.active;

  		return changed;
  	}
  });

  /**
   * NOTE(SB) We actually don't use this container anymore but we need to keep it
   * for backward compatibility. Though, it can still be useful for plugins that
   * would need to work on multiple charts?!
   */
  Chart.instances = {};

  var core_controller = Chart;

  // DEPRECATIONS

  /**
   * Provided for backward compatibility, use Chart instead.
   * @class Chart.Controller
   * @deprecated since version 2.6
   * @todo remove at version 3
   * @private
   */
  Chart.Controller = Chart;

  /**
   * Provided for backward compatibility, not available anymore.
   * @namespace Chart
   * @deprecated since version 2.8
   * @todo remove at version 3
   * @private
   */
  Chart.types = {};

  /**
   * Provided for backward compatibility, not available anymore.
   * @namespace Chart.helpers.configMerge
   * @deprecated since version 2.8.0
   * @todo remove at version 3
   * @private
   */
  helpers$1.configMerge = mergeConfig;

  /**
   * Provided for backward compatibility, not available anymore.
   * @namespace Chart.helpers.scaleMerge
   * @deprecated since version 2.8.0
   * @todo remove at version 3
   * @private
   */
  helpers$1.scaleMerge = mergeScaleConfig;

  var core_helpers = function() {

  	// -- Basic js utility methods

  	helpers$1.where = function(collection, filterCallback) {
  		if (helpers$1.isArray(collection) && Array.prototype.filter) {
  			return collection.filter(filterCallback);
  		}
  		var filtered = [];

  		helpers$1.each(collection, function(item) {
  			if (filterCallback(item)) {
  				filtered.push(item);
  			}
  		});

  		return filtered;
  	};
  	helpers$1.findIndex = Array.prototype.findIndex ?
  		function(array, callback, scope) {
  			return array.findIndex(callback, scope);
  		} :
  		function(array, callback, scope) {
  			scope = scope === undefined ? array : scope;
  			for (var i = 0, ilen = array.length; i < ilen; ++i) {
  				if (callback.call(scope, array[i], i, array)) {
  					return i;
  				}
  			}
  			return -1;
  		};
  	helpers$1.findNextWhere = function(arrayToSearch, filterCallback, startIndex) {
  		// Default to start of the array
  		if (helpers$1.isNullOrUndef(startIndex)) {
  			startIndex = -1;
  		}
  		for (var i = startIndex + 1; i < arrayToSearch.length; i++) {
  			var currentItem = arrayToSearch[i];
  			if (filterCallback(currentItem)) {
  				return currentItem;
  			}
  		}
  	};
  	helpers$1.findPreviousWhere = function(arrayToSearch, filterCallback, startIndex) {
  		// Default to end of the array
  		if (helpers$1.isNullOrUndef(startIndex)) {
  			startIndex = arrayToSearch.length;
  		}
  		for (var i = startIndex - 1; i >= 0; i--) {
  			var currentItem = arrayToSearch[i];
  			if (filterCallback(currentItem)) {
  				return currentItem;
  			}
  		}
  	};

  	// -- Math methods
  	helpers$1.isNumber = function(n) {
  		return !isNaN(parseFloat(n)) && isFinite(n);
  	};
  	helpers$1.almostEquals = function(x, y, epsilon) {
  		return Math.abs(x - y) < epsilon;
  	};
  	helpers$1.almostWhole = function(x, epsilon) {
  		var rounded = Math.round(x);
  		return ((rounded - epsilon) <= x) && ((rounded + epsilon) >= x);
  	};
  	helpers$1.max = function(array) {
  		return array.reduce(function(max, value) {
  			if (!isNaN(value)) {
  				return Math.max(max, value);
  			}
  			return max;
  		}, Number.NEGATIVE_INFINITY);
  	};
  	helpers$1.min = function(array) {
  		return array.reduce(function(min, value) {
  			if (!isNaN(value)) {
  				return Math.min(min, value);
  			}
  			return min;
  		}, Number.POSITIVE_INFINITY);
  	};
  	helpers$1.sign = Math.sign ?
  		function(x) {
  			return Math.sign(x);
  		} :
  		function(x) {
  			x = +x; // convert to a number
  			if (x === 0 || isNaN(x)) {
  				return x;
  			}
  			return x > 0 ? 1 : -1;
  		};
  	helpers$1.toRadians = function(degrees) {
  		return degrees * (Math.PI / 180);
  	};
  	helpers$1.toDegrees = function(radians) {
  		return radians * (180 / Math.PI);
  	};

  	/**
  	 * Returns the number of decimal places
  	 * i.e. the number of digits after the decimal point, of the value of this Number.
  	 * @param {number} x - A number.
  	 * @returns {number} The number of decimal places.
  	 * @private
  	 */
  	helpers$1._decimalPlaces = function(x) {
  		if (!helpers$1.isFinite(x)) {
  			return;
  		}
  		var e = 1;
  		var p = 0;
  		while (Math.round(x * e) / e !== x) {
  			e *= 10;
  			p++;
  		}
  		return p;
  	};

  	// Gets the angle from vertical upright to the point about a centre.
  	helpers$1.getAngleFromPoint = function(centrePoint, anglePoint) {
  		var distanceFromXCenter = anglePoint.x - centrePoint.x;
  		var distanceFromYCenter = anglePoint.y - centrePoint.y;
  		var radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);

  		var angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);

  		if (angle < (-0.5 * Math.PI)) {
  			angle += 2.0 * Math.PI; // make sure the returned angle is in the range of (-PI/2, 3PI/2]
  		}

  		return {
  			angle: angle,
  			distance: radialDistanceFromCenter
  		};
  	};
  	helpers$1.distanceBetweenPoints = function(pt1, pt2) {
  		return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
  	};

  	/**
  	 * Provided for backward compatibility, not available anymore
  	 * @function Chart.helpers.aliasPixel
  	 * @deprecated since version 2.8.0
  	 * @todo remove at version 3
  	 */
  	helpers$1.aliasPixel = function(pixelWidth) {
  		return (pixelWidth % 2 === 0) ? 0 : 0.5;
  	};

  	/**
  	 * Returns the aligned pixel value to avoid anti-aliasing blur
  	 * @param {Chart} chart - The chart instance.
  	 * @param {number} pixel - A pixel value.
  	 * @param {number} width - The width of the element.
  	 * @returns {number} The aligned pixel value.
  	 * @private
  	 */
  	helpers$1._alignPixel = function(chart, pixel, width) {
  		var devicePixelRatio = chart.currentDevicePixelRatio;
  		var halfWidth = width / 2;
  		return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
  	};

  	helpers$1.splineCurve = function(firstPoint, middlePoint, afterPoint, t) {
  		// Props to Rob Spencer at scaled innovation for his post on splining between points
  		// http://scaledinnovation.com/analytics/splines/aboutSplines.html

  		// This function must also respect "skipped" points

  		var previous = firstPoint.skip ? middlePoint : firstPoint;
  		var current = middlePoint;
  		var next = afterPoint.skip ? middlePoint : afterPoint;

  		var d01 = Math.sqrt(Math.pow(current.x - previous.x, 2) + Math.pow(current.y - previous.y, 2));
  		var d12 = Math.sqrt(Math.pow(next.x - current.x, 2) + Math.pow(next.y - current.y, 2));

  		var s01 = d01 / (d01 + d12);
  		var s12 = d12 / (d01 + d12);

  		// If all points are the same, s01 & s02 will be inf
  		s01 = isNaN(s01) ? 0 : s01;
  		s12 = isNaN(s12) ? 0 : s12;

  		var fa = t * s01; // scaling factor for triangle Ta
  		var fb = t * s12;

  		return {
  			previous: {
  				x: current.x - fa * (next.x - previous.x),
  				y: current.y - fa * (next.y - previous.y)
  			},
  			next: {
  				x: current.x + fb * (next.x - previous.x),
  				y: current.y + fb * (next.y - previous.y)
  			}
  		};
  	};
  	helpers$1.EPSILON = Number.EPSILON || 1e-14;
  	helpers$1.splineCurveMonotone = function(points) {
  		// This function calculates Bézier control points in a similar way than |splineCurve|,
  		// but preserves monotonicity of the provided data and ensures no local extremums are added
  		// between the dataset discrete points due to the interpolation.
  		// See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation

  		var pointsWithTangents = (points || []).map(function(point) {
  			return {
  				model: point._model,
  				deltaK: 0,
  				mK: 0
  			};
  		});

  		// Calculate slopes (deltaK) and initialize tangents (mK)
  		var pointsLen = pointsWithTangents.length;
  		var i, pointBefore, pointCurrent, pointAfter;
  		for (i = 0; i < pointsLen; ++i) {
  			pointCurrent = pointsWithTangents[i];
  			if (pointCurrent.model.skip) {
  				continue;
  			}

  			pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
  			pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
  			if (pointAfter && !pointAfter.model.skip) {
  				var slopeDeltaX = (pointAfter.model.x - pointCurrent.model.x);

  				// In the case of two points that appear at the same x pixel, slopeDeltaX is 0
  				pointCurrent.deltaK = slopeDeltaX !== 0 ? (pointAfter.model.y - pointCurrent.model.y) / slopeDeltaX : 0;
  			}

  			if (!pointBefore || pointBefore.model.skip) {
  				pointCurrent.mK = pointCurrent.deltaK;
  			} else if (!pointAfter || pointAfter.model.skip) {
  				pointCurrent.mK = pointBefore.deltaK;
  			} else if (this.sign(pointBefore.deltaK) !== this.sign(pointCurrent.deltaK)) {
  				pointCurrent.mK = 0;
  			} else {
  				pointCurrent.mK = (pointBefore.deltaK + pointCurrent.deltaK) / 2;
  			}
  		}

  		// Adjust tangents to ensure monotonic properties
  		var alphaK, betaK, tauK, squaredMagnitude;
  		for (i = 0; i < pointsLen - 1; ++i) {
  			pointCurrent = pointsWithTangents[i];
  			pointAfter = pointsWithTangents[i + 1];
  			if (pointCurrent.model.skip || pointAfter.model.skip) {
  				continue;
  			}

  			if (helpers$1.almostEquals(pointCurrent.deltaK, 0, this.EPSILON)) {
  				pointCurrent.mK = pointAfter.mK = 0;
  				continue;
  			}

  			alphaK = pointCurrent.mK / pointCurrent.deltaK;
  			betaK = pointAfter.mK / pointCurrent.deltaK;
  			squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
  			if (squaredMagnitude <= 9) {
  				continue;
  			}

  			tauK = 3 / Math.sqrt(squaredMagnitude);
  			pointCurrent.mK = alphaK * tauK * pointCurrent.deltaK;
  			pointAfter.mK = betaK * tauK * pointCurrent.deltaK;
  		}

  		// Compute control points
  		var deltaX;
  		for (i = 0; i < pointsLen; ++i) {
  			pointCurrent = pointsWithTangents[i];
  			if (pointCurrent.model.skip) {
  				continue;
  			}

  			pointBefore = i > 0 ? pointsWithTangents[i - 1] : null;
  			pointAfter = i < pointsLen - 1 ? pointsWithTangents[i + 1] : null;
  			if (pointBefore && !pointBefore.model.skip) {
  				deltaX = (pointCurrent.model.x - pointBefore.model.x) / 3;
  				pointCurrent.model.controlPointPreviousX = pointCurrent.model.x - deltaX;
  				pointCurrent.model.controlPointPreviousY = pointCurrent.model.y - deltaX * pointCurrent.mK;
  			}
  			if (pointAfter && !pointAfter.model.skip) {
  				deltaX = (pointAfter.model.x - pointCurrent.model.x) / 3;
  				pointCurrent.model.controlPointNextX = pointCurrent.model.x + deltaX;
  				pointCurrent.model.controlPointNextY = pointCurrent.model.y + deltaX * pointCurrent.mK;
  			}
  		}
  	};
  	helpers$1.nextItem = function(collection, index, loop) {
  		if (loop) {
  			return index >= collection.length - 1 ? collection[0] : collection[index + 1];
  		}
  		return index >= collection.length - 1 ? collection[collection.length - 1] : collection[index + 1];
  	};
  	helpers$1.previousItem = function(collection, index, loop) {
  		if (loop) {
  			return index <= 0 ? collection[collection.length - 1] : collection[index - 1];
  		}
  		return index <= 0 ? collection[0] : collection[index - 1];
  	};
  	// Implementation of the nice number algorithm used in determining where axis labels will go
  	helpers$1.niceNum = function(range, round) {
  		var exponent = Math.floor(helpers$1.log10(range));
  		var fraction = range / Math.pow(10, exponent);
  		var niceFraction;

  		if (round) {
  			if (fraction < 1.5) {
  				niceFraction = 1;
  			} else if (fraction < 3) {
  				niceFraction = 2;
  			} else if (fraction < 7) {
  				niceFraction = 5;
  			} else {
  				niceFraction = 10;
  			}
  		} else if (fraction <= 1.0) {
  			niceFraction = 1;
  		} else if (fraction <= 2) {
  			niceFraction = 2;
  		} else if (fraction <= 5) {
  			niceFraction = 5;
  		} else {
  			niceFraction = 10;
  		}

  		return niceFraction * Math.pow(10, exponent);
  	};
  	// Request animation polyfill - https://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
  	helpers$1.requestAnimFrame = (function() {
  		if (typeof window === 'undefined') {
  			return function(callback) {
  				callback();
  			};
  		}
  		return window.requestAnimationFrame ||
  			window.webkitRequestAnimationFrame ||
  			window.mozRequestAnimationFrame ||
  			window.oRequestAnimationFrame ||
  			window.msRequestAnimationFrame ||
  			function(callback) {
  				return window.setTimeout(callback, 1000 / 60);
  			};
  	}());
  	// -- DOM methods
  	helpers$1.getRelativePosition = function(evt, chart) {
  		var mouseX, mouseY;
  		var e = evt.originalEvent || evt;
  		var canvas = evt.target || evt.srcElement;
  		var boundingRect = canvas.getBoundingClientRect();

  		var touches = e.touches;
  		if (touches && touches.length > 0) {
  			mouseX = touches[0].clientX;
  			mouseY = touches[0].clientY;

  		} else {
  			mouseX = e.clientX;
  			mouseY = e.clientY;
  		}

  		// Scale mouse coordinates into canvas coordinates
  		// by following the pattern laid out by 'jerryj' in the comments of
  		// https://www.html5canvastutorials.com/advanced/html5-canvas-mouse-coordinates/
  		var paddingLeft = parseFloat(helpers$1.getStyle(canvas, 'padding-left'));
  		var paddingTop = parseFloat(helpers$1.getStyle(canvas, 'padding-top'));
  		var paddingRight = parseFloat(helpers$1.getStyle(canvas, 'padding-right'));
  		var paddingBottom = parseFloat(helpers$1.getStyle(canvas, 'padding-bottom'));
  		var width = boundingRect.right - boundingRect.left - paddingLeft - paddingRight;
  		var height = boundingRect.bottom - boundingRect.top - paddingTop - paddingBottom;

  		// We divide by the current device pixel ratio, because the canvas is scaled up by that amount in each direction. However
  		// the backend model is in unscaled coordinates. Since we are going to deal with our model coordinates, we go back here
  		mouseX = Math.round((mouseX - boundingRect.left - paddingLeft) / (width) * canvas.width / chart.currentDevicePixelRatio);
  		mouseY = Math.round((mouseY - boundingRect.top - paddingTop) / (height) * canvas.height / chart.currentDevicePixelRatio);

  		return {
  			x: mouseX,
  			y: mouseY
  		};

  	};

  	// Private helper function to convert max-width/max-height values that may be percentages into a number
  	function parseMaxStyle(styleValue, node, parentProperty) {
  		var valueInPixels;
  		if (typeof styleValue === 'string') {
  			valueInPixels = parseInt(styleValue, 10);

  			if (styleValue.indexOf('%') !== -1) {
  				// percentage * size in dimension
  				valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
  			}
  		} else {
  			valueInPixels = styleValue;
  		}

  		return valueInPixels;
  	}

  	/**
  	 * Returns if the given value contains an effective constraint.
  	 * @private
  	 */
  	function isConstrainedValue(value) {
  		return value !== undefined && value !== null && value !== 'none';
  	}

  	/**
  	 * Returns the max width or height of the given DOM node in a cross-browser compatible fashion
  	 * @param {HTMLElement} domNode - the node to check the constraint on
  	 * @param {string} maxStyle - the style that defines the maximum for the direction we are using ('max-width' / 'max-height')
  	 * @param {string} percentageProperty - property of parent to use when calculating width as a percentage
  	 * @see {@link https://www.nathanaeljones.com/blog/2013/reading-max-width-cross-browser}
  	 */
  	function getConstraintDimension(domNode, maxStyle, percentageProperty) {
  		var view = document.defaultView;
  		var parentNode = helpers$1._getParentNode(domNode);
  		var constrainedNode = view.getComputedStyle(domNode)[maxStyle];
  		var constrainedContainer = view.getComputedStyle(parentNode)[maxStyle];
  		var hasCNode = isConstrainedValue(constrainedNode);
  		var hasCContainer = isConstrainedValue(constrainedContainer);
  		var infinity = Number.POSITIVE_INFINITY;

  		if (hasCNode || hasCContainer) {
  			return Math.min(
  				hasCNode ? parseMaxStyle(constrainedNode, domNode, percentageProperty) : infinity,
  				hasCContainer ? parseMaxStyle(constrainedContainer, parentNode, percentageProperty) : infinity);
  		}

  		return 'none';
  	}
  	// returns Number or undefined if no constraint
  	helpers$1.getConstraintWidth = function(domNode) {
  		return getConstraintDimension(domNode, 'max-width', 'clientWidth');
  	};
  	// returns Number or undefined if no constraint
  	helpers$1.getConstraintHeight = function(domNode) {
  		return getConstraintDimension(domNode, 'max-height', 'clientHeight');
  	};
  	/**
  	 * @private
   	 */
  	helpers$1._calculatePadding = function(container, padding, parentDimension) {
  		padding = helpers$1.getStyle(container, padding);

  		return padding.indexOf('%') > -1 ? parentDimension * parseInt(padding, 10) / 100 : parseInt(padding, 10);
  	};
  	/**
  	 * @private
  	 */
  	helpers$1._getParentNode = function(domNode) {
  		var parent = domNode.parentNode;
  		if (parent && parent.toString() === '[object ShadowRoot]') {
  			parent = parent.host;
  		}
  		return parent;
  	};
  	helpers$1.getMaximumWidth = function(domNode) {
  		var container = helpers$1._getParentNode(domNode);
  		if (!container) {
  			return domNode.clientWidth;
  		}

  		var clientWidth = container.clientWidth;
  		var paddingLeft = helpers$1._calculatePadding(container, 'padding-left', clientWidth);
  		var paddingRight = helpers$1._calculatePadding(container, 'padding-right', clientWidth);

  		var w = clientWidth - paddingLeft - paddingRight;
  		var cw = helpers$1.getConstraintWidth(domNode);
  		return isNaN(cw) ? w : Math.min(w, cw);
  	};
  	helpers$1.getMaximumHeight = function(domNode) {
  		var container = helpers$1._getParentNode(domNode);
  		if (!container) {
  			return domNode.clientHeight;
  		}

  		var clientHeight = container.clientHeight;
  		var paddingTop = helpers$1._calculatePadding(container, 'padding-top', clientHeight);
  		var paddingBottom = helpers$1._calculatePadding(container, 'padding-bottom', clientHeight);

  		var h = clientHeight - paddingTop - paddingBottom;
  		var ch = helpers$1.getConstraintHeight(domNode);
  		return isNaN(ch) ? h : Math.min(h, ch);
  	};
  	helpers$1.getStyle = function(el, property) {
  		return el.currentStyle ?
  			el.currentStyle[property] :
  			document.defaultView.getComputedStyle(el, null).getPropertyValue(property);
  	};
  	helpers$1.retinaScale = function(chart, forceRatio) {
  		var pixelRatio = chart.currentDevicePixelRatio = forceRatio || (typeof window !== 'undefined' && window.devicePixelRatio) || 1;
  		if (pixelRatio === 1) {
  			return;
  		}

  		var canvas = chart.canvas;
  		var height = chart.height;
  		var width = chart.width;

  		canvas.height = height * pixelRatio;
  		canvas.width = width * pixelRatio;
  		chart.ctx.scale(pixelRatio, pixelRatio);

  		// If no style has been set on the canvas, the render size is used as display size,
  		// making the chart visually bigger, so let's enforce it to the "correct" values.
  		// See https://github.com/chartjs/Chart.js/issues/3575
  		if (!canvas.style.height && !canvas.style.width) {
  			canvas.style.height = height + 'px';
  			canvas.style.width = width + 'px';
  		}
  	};
  	// -- Canvas methods
  	helpers$1.fontString = function(pixelSize, fontStyle, fontFamily) {
  		return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;
  	};
  	helpers$1.longestText = function(ctx, font, arrayOfThings, cache) {
  		cache = cache || {};
  		var data = cache.data = cache.data || {};
  		var gc = cache.garbageCollect = cache.garbageCollect || [];

  		if (cache.font !== font) {
  			data = cache.data = {};
  			gc = cache.garbageCollect = [];
  			cache.font = font;
  		}

  		ctx.font = font;
  		var longest = 0;
  		var ilen = arrayOfThings.length;
  		var i, j, jlen, thing, nestedThing;
  		for (i = 0; i < ilen; i++) {
  			thing = arrayOfThings[i];

  			// Undefined strings and arrays should not be measured
  			if (thing !== undefined && thing !== null && helpers$1.isArray(thing) !== true) {
  				longest = helpers$1.measureText(ctx, data, gc, longest, thing);
  			} else if (helpers$1.isArray(thing)) {
  				// if it is an array lets measure each element
  				// to do maybe simplify this function a bit so we can do this more recursively?
  				for (j = 0, jlen = thing.length; j < jlen; j++) {
  					nestedThing = thing[j];
  					// Undefined strings and arrays should not be measured
  					if (nestedThing !== undefined && nestedThing !== null && !helpers$1.isArray(nestedThing)) {
  						longest = helpers$1.measureText(ctx, data, gc, longest, nestedThing);
  					}
  				}
  			}
  		}

  		var gcLen = gc.length / 2;
  		if (gcLen > arrayOfThings.length) {
  			for (i = 0; i < gcLen; i++) {
  				delete data[gc[i]];
  			}
  			gc.splice(0, gcLen);
  		}
  		return longest;
  	};
  	helpers$1.measureText = function(ctx, data, gc, longest, string) {
  		var textWidth = data[string];
  		if (!textWidth) {
  			textWidth = data[string] = ctx.measureText(string).width;
  			gc.push(string);
  		}
  		if (textWidth > longest) {
  			longest = textWidth;
  		}
  		return longest;
  	};

  	/**
  	 * @deprecated
  	 */
  	helpers$1.numberOfLabelLines = function(arrayOfThings) {
  		var numberOfLines = 1;
  		helpers$1.each(arrayOfThings, function(thing) {
  			if (helpers$1.isArray(thing)) {
  				if (thing.length > numberOfLines) {
  					numberOfLines = thing.length;
  				}
  			}
  		});
  		return numberOfLines;
  	};

  	helpers$1.color = !chartjsColor ?
  		function(value) {
  			console.error('Color.js not found!');
  			return value;
  		} :
  		function(value) {
  			/* global CanvasGradient */
  			if (value instanceof CanvasGradient) {
  				value = core_defaults.global.defaultColor;
  			}

  			return chartjsColor(value);
  		};

  	helpers$1.getHoverColor = function(colorValue) {
  		/* global CanvasPattern */
  		return (colorValue instanceof CanvasPattern || colorValue instanceof CanvasGradient) ?
  			colorValue :
  			helpers$1.color(colorValue).saturate(0.5).darken(0.1).rgbString();
  	};
  };

  function abstract() {
  	throw new Error(
  		'This method is not implemented: either no adapter can ' +
  		'be found or an incomplete integration was provided.'
  	);
  }

  /**
   * Date adapter (current used by the time scale)
   * @namespace Chart._adapters._date
   * @memberof Chart._adapters
   * @private
   */

  /**
   * Currently supported unit string values.
   * @typedef {('millisecond'|'second'|'minute'|'hour'|'day'|'week'|'month'|'quarter'|'year')}
   * @memberof Chart._adapters._date
   * @name Unit
   */

  /**
   * @class
   */
  function DateAdapter(options) {
  	this.options = options || {};
  }

  helpers$1.extend(DateAdapter.prototype, /** @lends DateAdapter */ {
  	/**
  	 * Returns a map of time formats for the supported formatting units defined
  	 * in Unit as well as 'datetime' representing a detailed date/time string.
  	 * @returns {{string: string}}
  	 */
  	formats: abstract,

  	/**
  	 * Parses the given `value` and return the associated timestamp.
  	 * @param {any} value - the value to parse (usually comes from the data)
  	 * @param {string} [format] - the expected data format
  	 * @returns {(number|null)}
  	 * @function
  	 */
  	parse: abstract,

  	/**
  	 * Returns the formatted date in the specified `format` for a given `timestamp`.
  	 * @param {number} timestamp - the timestamp to format
  	 * @param {string} format - the date/time token
  	 * @return {string}
  	 * @function
  	 */
  	format: abstract,

  	/**
  	 * Adds the specified `amount` of `unit` to the given `timestamp`.
  	 * @param {number} timestamp - the input timestamp
  	 * @param {number} amount - the amount to add
  	 * @param {Unit} unit - the unit as string
  	 * @return {number}
  	 * @function
  	 */
  	add: abstract,

  	/**
  	 * Returns the number of `unit` between the given timestamps.
  	 * @param {number} max - the input timestamp (reference)
  	 * @param {number} min - the timestamp to substract
  	 * @param {Unit} unit - the unit as string
  	 * @return {number}
  	 * @function
  	 */
  	diff: abstract,

  	/**
  	 * Returns start of `unit` for the given `timestamp`.
  	 * @param {number} timestamp - the input timestamp
  	 * @param {Unit} unit - the unit as string
  	 * @param {number} [weekday] - the ISO day of the week with 1 being Monday
  	 * and 7 being Sunday (only needed if param *unit* is `isoWeek`).
  	 * @function
  	 */
  	startOf: abstract,

  	/**
  	 * Returns end of `unit` for the given `timestamp`.
  	 * @param {number} timestamp - the input timestamp
  	 * @param {Unit} unit - the unit as string
  	 * @function
  	 */
  	endOf: abstract,

  	// DEPRECATIONS

  	/**
  	 * Provided for backward compatibility for scale.getValueForPixel(),
  	 * this method should be overridden only by the moment adapter.
  	 * @deprecated since version 2.8.0
  	 * @todo remove at version 3
  	 * @private
  	 */
  	_create: function(value) {
  		return value;
  	}
  });

  DateAdapter.override = function(members) {
  	helpers$1.extend(DateAdapter.prototype, members);
  };

  var _date = DateAdapter;

  var core_adapters = {
  	_date: _date
  };

  /**
   * Namespace to hold static tick generation functions
   * @namespace Chart.Ticks
   */
  var core_ticks = {
  	/**
  	 * Namespace to hold formatters for different types of ticks
  	 * @namespace Chart.Ticks.formatters
  	 */
  	formatters: {
  		/**
  		 * Formatter for value labels
  		 * @method Chart.Ticks.formatters.values
  		 * @param value the value to display
  		 * @return {string|string[]} the label to display
  		 */
  		values: function(value) {
  			return helpers$1.isArray(value) ? value : '' + value;
  		},

  		/**
  		 * Formatter for linear numeric ticks
  		 * @method Chart.Ticks.formatters.linear
  		 * @param tickValue {number} the value to be formatted
  		 * @param index {number} the position of the tickValue parameter in the ticks array
  		 * @param ticks {number[]} the list of ticks being converted
  		 * @return {string} string representation of the tickValue parameter
  		 */
  		linear: function(tickValue, index, ticks) {
  			// If we have lots of ticks, don't use the ones
  			var delta = ticks.length > 3 ? ticks[2] - ticks[1] : ticks[1] - ticks[0];

  			// If we have a number like 2.5 as the delta, figure out how many decimal places we need
  			if (Math.abs(delta) > 1) {
  				if (tickValue !== Math.floor(tickValue)) {
  					// not an integer
  					delta = tickValue - Math.floor(tickValue);
  				}
  			}

  			var logDelta = helpers$1.log10(Math.abs(delta));
  			var tickString = '';

  			if (tickValue !== 0) {
  				var maxTick = Math.max(Math.abs(ticks[0]), Math.abs(ticks[ticks.length - 1]));
  				if (maxTick < 1e-4) { // all ticks are small numbers; use scientific notation
  					var logTick = helpers$1.log10(Math.abs(tickValue));
  					var numExponential = Math.floor(logTick) - Math.floor(logDelta);
  					numExponential = Math.max(Math.min(numExponential, 20), 0);
  					tickString = tickValue.toExponential(numExponential);
  				} else {
  					var numDecimal = -1 * Math.floor(logDelta);
  					numDecimal = Math.max(Math.min(numDecimal, 20), 0); // toFixed has a max of 20 decimal places
  					tickString = tickValue.toFixed(numDecimal);
  				}
  			} else {
  				tickString = '0'; // never show decimal places for 0
  			}

  			return tickString;
  		},

  		logarithmic: function(tickValue, index, ticks) {
  			var remain = tickValue / (Math.pow(10, Math.floor(helpers$1.log10(tickValue))));

  			if (tickValue === 0) {
  				return '0';
  			} else if (remain === 1 || remain === 2 || remain === 5 || index === 0 || index === ticks.length - 1) {
  				return tickValue.toExponential();
  			}
  			return '';
  		}
  	}
  };

  var isArray = helpers$1.isArray;
  var isNullOrUndef = helpers$1.isNullOrUndef;
  var valueOrDefault$a = helpers$1.valueOrDefault;
  var valueAtIndexOrDefault = helpers$1.valueAtIndexOrDefault;

  core_defaults._set('scale', {
  	display: true,
  	position: 'left',
  	offset: false,

  	// grid line settings
  	gridLines: {
  		display: true,
  		color: 'rgba(0,0,0,0.1)',
  		lineWidth: 1,
  		drawBorder: true,
  		drawOnChartArea: true,
  		drawTicks: true,
  		tickMarkLength: 10,
  		zeroLineWidth: 1,
  		zeroLineColor: 'rgba(0,0,0,0.25)',
  		zeroLineBorderDash: [],
  		zeroLineBorderDashOffset: 0.0,
  		offsetGridLines: false,
  		borderDash: [],
  		borderDashOffset: 0.0
  	},

  	// scale label
  	scaleLabel: {
  		// display property
  		display: false,

  		// actual label
  		labelString: '',

  		// top/bottom padding
  		padding: {
  			top: 4,
  			bottom: 4
  		}
  	},

  	// label settings
  	ticks: {
  		beginAtZero: false,
  		minRotation: 0,
  		maxRotation: 50,
  		mirror: false,
  		padding: 0,
  		reverse: false,
  		display: true,
  		autoSkip: true,
  		autoSkipPadding: 0,
  		labelOffset: 0,
  		// We pass through arrays to be rendered as multiline labels, we convert Others to strings here.
  		callback: core_ticks.formatters.values,
  		minor: {},
  		major: {}
  	}
  });

  /** Returns a new array containing numItems from arr */
  function sample(arr, numItems) {
  	var result = [];
  	var increment = arr.length / numItems;
  	var i = 0;
  	var len = arr.length;

  	for (; i < len; i += increment) {
  		result.push(arr[Math.floor(i)]);
  	}
  	return result;
  }

  function getPixelForGridLine(scale, index, offsetGridLines) {
  	var length = scale.getTicks().length;
  	var validIndex = Math.min(index, length - 1);
  	var lineValue = scale.getPixelForTick(validIndex);
  	var start = scale._startPixel;
  	var end = scale._endPixel;
  	var epsilon = 1e-6; // 1e-6 is margin in pixels for accumulated error.
  	var offset;

  	if (offsetGridLines) {
  		if (length === 1) {
  			offset = Math.max(lineValue - start, end - lineValue);
  		} else if (index === 0) {
  			offset = (scale.getPixelForTick(1) - lineValue) / 2;
  		} else {
  			offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;
  		}
  		lineValue += validIndex < index ? offset : -offset;

  		// Return undefined if the pixel is out of the range
  		if (lineValue < start - epsilon || lineValue > end + epsilon) {
  			return;
  		}
  	}
  	return lineValue;
  }

  function garbageCollect(caches, length) {
  	helpers$1.each(caches, function(cache) {
  		var gc = cache.gc;
  		var gcLen = gc.length / 2;
  		var i;
  		if (gcLen > length) {
  			for (i = 0; i < gcLen; ++i) {
  				delete cache.data[gc[i]];
  			}
  			gc.splice(0, gcLen);
  		}
  	});
  }

  /**
   * Returns {width, height, offset} objects for the first, last, widest, highest tick
   * labels where offset indicates the anchor point offset from the top in pixels.
   */
  function computeLabelSizes(ctx, tickFonts, ticks, caches) {
  	var length = ticks.length;
  	var widths = [];
  	var heights = [];
  	var offsets = [];
  	var i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel, widest, highest;

  	for (i = 0; i < length; ++i) {
  		label = ticks[i].label;
  		tickFont = ticks[i].major ? tickFonts.major : tickFonts.minor;
  		ctx.font = fontString = tickFont.string;
  		cache = caches[fontString] = caches[fontString] || {data: {}, gc: []};
  		lineHeight = tickFont.lineHeight;
  		width = height = 0;
  		// Undefined labels and arrays should not be measured
  		if (!isNullOrUndef(label) && !isArray(label)) {
  			width = helpers$1.measureText(ctx, cache.data, cache.gc, width, label);
  			height = lineHeight;
  		} else if (isArray(label)) {
  			// if it is an array let's measure each element
  			for (j = 0, jlen = label.length; j < jlen; ++j) {
  				nestedLabel = label[j];
  				// Undefined labels and arrays should not be measured
  				if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {
  					width = helpers$1.measureText(ctx, cache.data, cache.gc, width, nestedLabel);
  					height += lineHeight;
  				}
  			}
  		}
  		widths.push(width);
  		heights.push(height);
  		offsets.push(lineHeight / 2);
  	}
  	garbageCollect(caches, length);

  	widest = widths.indexOf(Math.max.apply(null, widths));
  	highest = heights.indexOf(Math.max.apply(null, heights));

  	function valueAt(idx) {
  		return {
  			width: widths[idx] || 0,
  			height: heights[idx] || 0,
  			offset: offsets[idx] || 0
  		};
  	}

  	return {
  		first: valueAt(0),
  		last: valueAt(length - 1),
  		widest: valueAt(widest),
  		highest: valueAt(highest)
  	};
  }

  function getTickMarkLength(options) {
  	return options.drawTicks ? options.tickMarkLength : 0;
  }

  function getScaleLabelHeight(options) {
  	var font, padding;

  	if (!options.display) {
  		return 0;
  	}

  	font = helpers$1.options._parseFont(options);
  	padding = helpers$1.options.toPadding(options.padding);

  	return font.lineHeight + padding.height;
  }

  function parseFontOptions(options, nestedOpts) {
  	return helpers$1.extend(helpers$1.options._parseFont({
  		fontFamily: valueOrDefault$a(nestedOpts.fontFamily, options.fontFamily),
  		fontSize: valueOrDefault$a(nestedOpts.fontSize, options.fontSize),
  		fontStyle: valueOrDefault$a(nestedOpts.fontStyle, options.fontStyle),
  		lineHeight: valueOrDefault$a(nestedOpts.lineHeight, options.lineHeight)
  	}), {
  		color: helpers$1.options.resolve([nestedOpts.fontColor, options.fontColor, core_defaults.global.defaultFontColor])
  	});
  }

  function parseTickFontOptions(options) {
  	var minor = parseFontOptions(options, options.minor);
  	var major = options.major.enabled ? parseFontOptions(options, options.major) : minor;

  	return {minor: minor, major: major};
  }

  function nonSkipped(ticksToFilter) {
  	var filtered = [];
  	var item, index, len;
  	for (index = 0, len = ticksToFilter.length; index < len; ++index) {
  		item = ticksToFilter[index];
  		if (typeof item._index !== 'undefined') {
  			filtered.push(item);
  		}
  	}
  	return filtered;
  }

  function getEvenSpacing(arr) {
  	var len = arr.length;
  	var i, diff;

  	if (len < 2) {
  		return false;
  	}

  	for (diff = arr[0], i = 1; i < len; ++i) {
  		if (arr[i] - arr[i - 1] !== diff) {
  			return false;
  		}
  	}
  	return diff;
  }

  function calculateSpacing(majorIndices, ticks, axisLength, ticksLimit) {
  	var evenMajorSpacing = getEvenSpacing(majorIndices);
  	var spacing = (ticks.length - 1) / ticksLimit;
  	var factors, factor, i, ilen;

  	// If the major ticks are evenly spaced apart, place the minor ticks
  	// so that they divide the major ticks into even chunks
  	if (!evenMajorSpacing) {
  		return Math.max(spacing, 1);
  	}

  	factors = helpers$1.math._factorize(evenMajorSpacing);
  	for (i = 0, ilen = factors.length - 1; i < ilen; i++) {
  		factor = factors[i];
  		if (factor > spacing) {
  			return factor;
  		}
  	}
  	return Math.max(spacing, 1);
  }

  function getMajorIndices(ticks) {
  	var result = [];
  	var i, ilen;
  	for (i = 0, ilen = ticks.length; i < ilen; i++) {
  		if (ticks[i].major) {
  			result.push(i);
  		}
  	}
  	return result;
  }

  function skipMajors(ticks, majorIndices, spacing) {
  	var count = 0;
  	var next = majorIndices[0];
  	var i, tick;

  	spacing = Math.ceil(spacing);
  	for (i = 0; i < ticks.length; i++) {
  		tick = ticks[i];
  		if (i === next) {
  			tick._index = i;
  			count++;
  			next = majorIndices[count * spacing];
  		} else {
  			delete tick.label;
  		}
  	}
  }

  function skip(ticks, spacing, majorStart, majorEnd) {
  	var start = valueOrDefault$a(majorStart, 0);
  	var end = Math.min(valueOrDefault$a(majorEnd, ticks.length), ticks.length);
  	var count = 0;
  	var length, i, tick, next;

  	spacing = Math.ceil(spacing);
  	if (majorEnd) {
  		length = majorEnd - majorStart;
  		spacing = length / Math.floor(length / spacing);
  	}

  	next = start;

  	while (next < 0) {
  		count++;
  		next = Math.round(start + count * spacing);
  	}

  	for (i = Math.max(start, 0); i < end; i++) {
  		tick = ticks[i];
  		if (i === next) {
  			tick._index = i;
  			count++;
  			next = Math.round(start + count * spacing);
  		} else {
  			delete tick.label;
  		}
  	}
  }

  var Scale = core_element.extend({

  	zeroLineIndex: 0,

  	/**
  	 * Get the padding needed for the scale
  	 * @method getPadding
  	 * @private
  	 * @returns {Padding} the necessary padding
  	 */
  	getPadding: function() {
  		var me = this;
  		return {
  			left: me.paddingLeft || 0,
  			top: me.paddingTop || 0,
  			right: me.paddingRight || 0,
  			bottom: me.paddingBottom || 0
  		};
  	},

  	/**
  	 * Returns the scale tick objects ({label, major})
  	 * @since 2.7
  	 */
  	getTicks: function() {
  		return this._ticks;
  	},

  	/**
  	* @private
  	*/
  	_getLabels: function() {
  		var data = this.chart.data;
  		return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
  	},

  	// These methods are ordered by lifecyle. Utilities then follow.
  	// Any function defined here is inherited by all scale types.
  	// Any function can be extended by the scale type

  	/**
  	 * Provided for backward compatibility, not available anymore
  	 * @function Chart.Scale.mergeTicksOptions
  	 * @deprecated since version 2.8.0
  	 * @todo remove at version 3
  	 */
  	mergeTicksOptions: function() {
  		// noop
  	},

  	beforeUpdate: function() {
  		helpers$1.callback(this.options.beforeUpdate, [this]);
  	},

  	/**
  	 * @param {number} maxWidth - the max width in pixels
  	 * @param {number} maxHeight - the max height in pixels
  	 * @param {object} margins - the space between the edge of the other scales and edge of the chart
  	 *   This space comes from two sources:
  	 *     - padding - space that's required to show the labels at the edges of the scale
  	 *     - thickness of scales or legends in another orientation
  	 */
  	update: function(maxWidth, maxHeight, margins) {
  		var me = this;
  		var tickOpts = me.options.ticks;
  		var sampleSize = tickOpts.sampleSize;
  		var i, ilen, labels, ticks, samplingEnabled;

  		// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
  		me.beforeUpdate();

  		// Absorb the master measurements
  		me.maxWidth = maxWidth;
  		me.maxHeight = maxHeight;
  		me.margins = helpers$1.extend({
  			left: 0,
  			right: 0,
  			top: 0,
  			bottom: 0
  		}, margins);

  		me._ticks = null;
  		me.ticks = null;
  		me._labelSizes = null;
  		me._maxLabelLines = 0;
  		me.longestLabelWidth = 0;
  		me.longestTextCache = me.longestTextCache || {};
  		me._gridLineItems = null;
  		me._labelItems = null;

  		// Dimensions
  		me.beforeSetDimensions();
  		me.setDimensions();
  		me.afterSetDimensions();

  		// Data min/max
  		me.beforeDataLimits();
  		me.determineDataLimits();
  		me.afterDataLimits();

  		// Ticks - `this.ticks` is now DEPRECATED!
  		// Internal ticks are now stored as objects in the PRIVATE `this._ticks` member
  		// and must not be accessed directly from outside this class. `this.ticks` being
  		// around for long time and not marked as private, we can't change its structure
  		// without unexpected breaking changes. If you need to access the scale ticks,
  		// use scale.getTicks() instead.

  		me.beforeBuildTicks();

  		// New implementations should return an array of objects but for BACKWARD COMPAT,
  		// we still support no return (`this.ticks` internally set by calling this method).
  		ticks = me.buildTicks() || [];

  		// Allow modification of ticks in callback.
  		ticks = me.afterBuildTicks(ticks) || ticks;

  		// Ensure ticks contains ticks in new tick format
  		if ((!ticks || !ticks.length) && me.ticks) {
  			ticks = [];
  			for (i = 0, ilen = me.ticks.length; i < ilen; ++i) {
  				ticks.push({
  					value: me.ticks[i],
  					major: false
  				});
  			}
  		}

  		me._ticks = ticks;

  		// Compute tick rotation and fit using a sampled subset of labels
  		// We generally don't need to compute the size of every single label for determining scale size
  		samplingEnabled = sampleSize < ticks.length;
  		labels = me._convertTicksToLabels(samplingEnabled ? sample(ticks, sampleSize) : ticks);

  		// _configure is called twice, once here, once from core.controller.updateLayout.
  		// Here we haven't been positioned yet, but dimensions are correct.
  		// Variables set in _configure are needed for calculateTickRotation, and
  		// it's ok that coordinates are not correct there, only dimensions matter.
  		me._configure();

  		// Tick Rotation
  		me.beforeCalculateTickRotation();
  		me.calculateTickRotation();
  		me.afterCalculateTickRotation();

  		me.beforeFit();
  		me.fit();
  		me.afterFit();

  		// Auto-skip
  		me._ticksToDraw = tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto') ? me._autoSkip(ticks) : ticks;

  		if (samplingEnabled) {
  			// Generate labels using all non-skipped ticks
  			labels = me._convertTicksToLabels(me._ticksToDraw);
  		}

  		me.ticks = labels;   // BACKWARD COMPATIBILITY

  		// IMPORTANT: after this point, we consider that `this.ticks` will NEVER change!

  		me.afterUpdate();

  		// TODO(v3): remove minSize as a public property and return value from all layout boxes. It is unused
  		// make maxWidth and maxHeight private
  		return me.minSize;
  	},

  	/**
  	 * @private
  	 */
  	_configure: function() {
  		var me = this;
  		var reversePixels = me.options.ticks.reverse;
  		var startPixel, endPixel;

  		if (me.isHorizontal()) {
  			startPixel = me.left;
  			endPixel = me.right;
  		} else {
  			startPixel = me.top;
  			endPixel = me.bottom;
  			// by default vertical scales are from bottom to top, so pixels are reversed
  			reversePixels = !reversePixels;
  		}
  		me._startPixel = startPixel;
  		me._endPixel = endPixel;
  		me._reversePixels = reversePixels;
  		me._length = endPixel - startPixel;
  	},

  	afterUpdate: function() {
  		helpers$1.callback(this.options.afterUpdate, [this]);
  	},

  	//

  	beforeSetDimensions: function() {
  		helpers$1.callback(this.options.beforeSetDimensions, [this]);
  	},
  	setDimensions: function() {
  		var me = this;
  		// Set the unconstrained dimension before label rotation
  		if (me.isHorizontal()) {
  			// Reset position before calculating rotation
  			me.width = me.maxWidth;
  			me.left = 0;
  			me.right = me.width;
  		} else {
  			me.height = me.maxHeight;

  			// Reset position before calculating rotation
  			me.top = 0;
  			me.bottom = me.height;
  		}

  		// Reset padding
  		me.paddingLeft = 0;
  		me.paddingTop = 0;
  		me.paddingRight = 0;
  		me.paddingBottom = 0;
  	},
  	afterSetDimensions: function() {
  		helpers$1.callback(this.options.afterSetDimensions, [this]);
  	},

  	// Data limits
  	beforeDataLimits: function() {
  		helpers$1.callback(this.options.beforeDataLimits, [this]);
  	},
  	determineDataLimits: helpers$1.noop,
  	afterDataLimits: function() {
  		helpers$1.callback(this.options.afterDataLimits, [this]);
  	},

  	//
  	beforeBuildTicks: function() {
  		helpers$1.callback(this.options.beforeBuildTicks, [this]);
  	},
  	buildTicks: helpers$1.noop,
  	afterBuildTicks: function(ticks) {
  		var me = this;
  		// ticks is empty for old axis implementations here
  		if (isArray(ticks) && ticks.length) {
  			return helpers$1.callback(me.options.afterBuildTicks, [me, ticks]);
  		}
  		// Support old implementations (that modified `this.ticks` directly in buildTicks)
  		me.ticks = helpers$1.callback(me.options.afterBuildTicks, [me, me.ticks]) || me.ticks;
  		return ticks;
  	},

  	beforeTickToLabelConversion: function() {
  		helpers$1.callback(this.options.beforeTickToLabelConversion, [this]);
  	},
  	convertTicksToLabels: function() {
  		var me = this;
  		// Convert ticks to strings
  		var tickOpts = me.options.ticks;
  		me.ticks = me.ticks.map(tickOpts.userCallback || tickOpts.callback, this);
  	},
  	afterTickToLabelConversion: function() {
  		helpers$1.callback(this.options.afterTickToLabelConversion, [this]);
  	},

  	//

  	beforeCalculateTickRotation: function() {
  		helpers$1.callback(this.options.beforeCalculateTickRotation, [this]);
  	},
  	calculateTickRotation: function() {
  		var me = this;
  		var options = me.options;
  		var tickOpts = options.ticks;
  		var numTicks = me.getTicks().length;
  		var minRotation = tickOpts.minRotation || 0;
  		var maxRotation = tickOpts.maxRotation;
  		var labelRotation = minRotation;
  		var labelSizes, maxLabelWidth, maxLabelHeight, maxWidth, tickWidth, maxHeight, maxLabelDiagonal;

  		if (!me._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !me.isHorizontal()) {
  			me.labelRotation = minRotation;
  			return;
  		}

  		labelSizes = me._getLabelSizes();
  		maxLabelWidth = labelSizes.widest.width;
  		maxLabelHeight = labelSizes.highest.height - labelSizes.highest.offset;

  		// Estimate the width of each grid based on the canvas width, the maximum
  		// label width and the number of tick intervals
  		maxWidth = Math.min(me.maxWidth, me.chart.width - maxLabelWidth);
  		tickWidth = options.offset ? me.maxWidth / numTicks : maxWidth / (numTicks - 1);

  		// Allow 3 pixels x2 padding either side for label readability
  		if (maxLabelWidth + 6 > tickWidth) {
  			tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));
  			maxHeight = me.maxHeight - getTickMarkLength(options.gridLines)
  				- tickOpts.padding - getScaleLabelHeight(options.scaleLabel);
  			maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
  			labelRotation = helpers$1.toDegrees(Math.min(
  				Math.asin(Math.min((labelSizes.highest.height + 6) / tickWidth, 1)),
  				Math.asin(Math.min(maxHeight / maxLabelDiagonal, 1)) - Math.asin(maxLabelHeight / maxLabelDiagonal)
  			));
  			labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
  		}

  		me.labelRotation = labelRotation;
  	},
  	afterCalculateTickRotation: function() {
  		helpers$1.callback(this.options.afterCalculateTickRotation, [this]);
  	},

  	//

  	beforeFit: function() {
  		helpers$1.callback(this.options.beforeFit, [this]);
  	},
  	fit: function() {
  		var me = this;
  		// Reset
  		var minSize = me.minSize = {
  			width: 0,
  			height: 0
  		};

  		var chart = me.chart;
  		var opts = me.options;
  		var tickOpts = opts.ticks;
  		var scaleLabelOpts = opts.scaleLabel;
  		var gridLineOpts = opts.gridLines;
  		var display = me._isVisible();
  		var isBottom = opts.position === 'bottom';
  		var isHorizontal = me.isHorizontal();

  		// Width
  		if (isHorizontal) {
  			minSize.width = me.maxWidth;
  		} else if (display) {
  			minSize.width = getTickMarkLength(gridLineOpts) + getScaleLabelHeight(scaleLabelOpts);
  		}

  		// height
  		if (!isHorizontal) {
  			minSize.height = me.maxHeight; // fill all the height
  		} else if (display) {
  			minSize.height = getTickMarkLength(gridLineOpts) + getScaleLabelHeight(scaleLabelOpts);
  		}

  		// Don't bother fitting the ticks if we are not showing the labels
  		if (tickOpts.display && display) {
  			var tickFonts = parseTickFontOptions(tickOpts);
  			var labelSizes = me._getLabelSizes();
  			var firstLabelSize = labelSizes.first;
  			var lastLabelSize = labelSizes.last;
  			var widestLabelSize = labelSizes.widest;
  			var highestLabelSize = labelSizes.highest;
  			var lineSpace = tickFonts.minor.lineHeight * 0.4;
  			var tickPadding = tickOpts.padding;

  			if (isHorizontal) {
  				// A horizontal axis is more constrained by the height.
  				var isRotated = me.labelRotation !== 0;
  				var angleRadians = helpers$1.toRadians(me.labelRotation);
  				var cosRotation = Math.cos(angleRadians);
  				var sinRotation = Math.sin(angleRadians);

  				var labelHeight = sinRotation * widestLabelSize.width
  					+ cosRotation * (highestLabelSize.height - (isRotated ? highestLabelSize.offset : 0))
  					+ (isRotated ? 0 : lineSpace); // padding

  				minSize.height = Math.min(me.maxHeight, minSize.height + labelHeight + tickPadding);

  				var offsetLeft = me.getPixelForTick(0) - me.left;
  				var offsetRight = me.right - me.getPixelForTick(me.getTicks().length - 1);
  				var paddingLeft, paddingRight;

  				// Ensure that our ticks are always inside the canvas. When rotated, ticks are right aligned
  				// which means that the right padding is dominated by the font height
  				if (isRotated) {
  					paddingLeft = isBottom ?
  						cosRotation * firstLabelSize.width + sinRotation * firstLabelSize.offset :
  						sinRotation * (firstLabelSize.height - firstLabelSize.offset);
  					paddingRight = isBottom ?
  						sinRotation * (lastLabelSize.height - lastLabelSize.offset) :
  						cosRotation * lastLabelSize.width + sinRotation * lastLabelSize.offset;
  				} else {
  					paddingLeft = firstLabelSize.width / 2;
  					paddingRight = lastLabelSize.width / 2;
  				}

  				// Adjust padding taking into account changes in offsets
  				// and add 3 px to move away from canvas edges
  				me.paddingLeft = Math.max((paddingLeft - offsetLeft) * me.width / (me.width - offsetLeft), 0) + 3;
  				me.paddingRight = Math.max((paddingRight - offsetRight) * me.width / (me.width - offsetRight), 0) + 3;
  			} else {
  				// A vertical axis is more constrained by the width. Labels are the
  				// dominant factor here, so get that length first and account for padding
  				var labelWidth = tickOpts.mirror ? 0 :
  					// use lineSpace for consistency with horizontal axis
  					// tickPadding is not implemented for horizontal
  					widestLabelSize.width + tickPadding + lineSpace;

  				minSize.width = Math.min(me.maxWidth, minSize.width + labelWidth);

  				me.paddingTop = firstLabelSize.height / 2;
  				me.paddingBottom = lastLabelSize.height / 2;
  			}
  		}

  		me.handleMargins();

  		if (isHorizontal) {
  			me.width = me._length = chart.width - me.margins.left - me.margins.right;
  			me.height = minSize.height;
  		} else {
  			me.width = minSize.width;
  			me.height = me._length = chart.height - me.margins.top - me.margins.bottom;
  		}
  	},

  	/**
  	 * Handle margins and padding interactions
  	 * @private
  	 */
  	handleMargins: function() {
  		var me = this;
  		if (me.margins) {
  			me.margins.left = Math.max(me.paddingLeft, me.margins.left);
  			me.margins.top = Math.max(me.paddingTop, me.margins.top);
  			me.margins.right = Math.max(me.paddingRight, me.margins.right);
  			me.margins.bottom = Math.max(me.paddingBottom, me.margins.bottom);
  		}
  	},

  	afterFit: function() {
  		helpers$1.callback(this.options.afterFit, [this]);
  	},

  	// Shared Methods
  	isHorizontal: function() {
  		var pos = this.options.position;
  		return pos === 'top' || pos === 'bottom';
  	},
  	isFullWidth: function() {
  		return this.options.fullWidth;
  	},

  	// Get the correct value. NaN bad inputs, If the value type is object get the x or y based on whether we are horizontal or not
  	getRightValue: function(rawValue) {
  		// Null and undefined values first
  		if (isNullOrUndef(rawValue)) {
  			return NaN;
  		}
  		// isNaN(object) returns true, so make sure NaN is checking for a number; Discard Infinite values
  		if ((typeof rawValue === 'number' || rawValue instanceof Number) && !isFinite(rawValue)) {
  			return NaN;
  		}

  		// If it is in fact an object, dive in one more level
  		if (rawValue) {
  			if (this.isHorizontal()) {
  				if (rawValue.x !== undefined) {
  					return this.getRightValue(rawValue.x);
  				}
  			} else if (rawValue.y !== undefined) {
  				return this.getRightValue(rawValue.y);
  			}
  		}

  		// Value is good, return it
  		return rawValue;
  	},

  	_convertTicksToLabels: function(ticks) {
  		var me = this;
  		var labels, i, ilen;

  		me.ticks = ticks.map(function(tick) {
  			return tick.value;
  		});

  		me.beforeTickToLabelConversion();

  		// New implementations should return the formatted tick labels but for BACKWARD
  		// COMPAT, we still support no return (`this.ticks` internally changed by calling
  		// this method and supposed to contain only string values).
  		labels = me.convertTicksToLabels(ticks) || me.ticks;

  		me.afterTickToLabelConversion();

  		// BACKWARD COMPAT: synchronize `_ticks` with labels (so potentially `this.ticks`)
  		for (i = 0, ilen = ticks.length; i < ilen; ++i) {
  			ticks[i].label = labels[i];
  		}

  		return labels;
  	},

  	/**
  	 * @private
  	 */
  	_getLabelSizes: function() {
  		var me = this;
  		var labelSizes = me._labelSizes;

  		if (!labelSizes) {
  			me._labelSizes = labelSizes = computeLabelSizes(me.ctx, parseTickFontOptions(me.options.ticks), me.getTicks(), me.longestTextCache);
  			me.longestLabelWidth = labelSizes.widest.width;
  		}

  		return labelSizes;
  	},

  	/**
  	 * @private
  	 */
  	_parseValue: function(value) {
  		var start, end, min, max;

  		if (isArray(value)) {
  			start = +this.getRightValue(value[0]);
  			end = +this.getRightValue(value[1]);
  			min = Math.min(start, end);
  			max = Math.max(start, end);
  		} else {
  			value = +this.getRightValue(value);
  			start = undefined;
  			end = value;
  			min = value;
  			max = value;
  		}

  		return {
  			min: min,
  			max: max,
  			start: start,
  			end: end
  		};
  	},

  	/**
  	* @private
  	*/
  	_getScaleLabel: function(rawValue) {
  		var v = this._parseValue(rawValue);
  		if (v.start !== undefined) {
  			return '[' + v.start + ', ' + v.end + ']';
  		}

  		return +this.getRightValue(rawValue);
  	},

  	/**
  	 * Used to get the value to display in the tooltip for the data at the given index
  	 * @param index
  	 * @param datasetIndex
  	 */
  	getLabelForIndex: helpers$1.noop,

  	/**
  	 * Returns the location of the given data point. Value can either be an index or a numerical value
  	 * The coordinate (0, 0) is at the upper-left corner of the canvas
  	 * @param value
  	 * @param index
  	 * @param datasetIndex
  	 */
  	getPixelForValue: helpers$1.noop,

  	/**
  	 * Used to get the data value from a given pixel. This is the inverse of getPixelForValue
  	 * The coordinate (0, 0) is at the upper-left corner of the canvas
  	 * @param pixel
  	 */
  	getValueForPixel: helpers$1.noop,

  	/**
  	 * Returns the location of the tick at the given index
  	 * The coordinate (0, 0) is at the upper-left corner of the canvas
  	 */
  	getPixelForTick: function(index) {
  		var me = this;
  		var offset = me.options.offset;
  		var numTicks = me._ticks.length;
  		var tickWidth = 1 / Math.max(numTicks - (offset ? 0 : 1), 1);

  		return index < 0 || index > numTicks - 1
  			? null
  			: me.getPixelForDecimal(index * tickWidth + (offset ? tickWidth / 2 : 0));
  	},

  	/**
  	 * Utility for getting the pixel location of a percentage of scale
  	 * The coordinate (0, 0) is at the upper-left corner of the canvas
  	 */
  	getPixelForDecimal: function(decimal) {
  		var me = this;

  		if (me._reversePixels) {
  			decimal = 1 - decimal;
  		}

  		return me._startPixel + decimal * me._length;
  	},

  	getDecimalForPixel: function(pixel) {
  		var decimal = (pixel - this._startPixel) / this._length;
  		return this._reversePixels ? 1 - decimal : decimal;
  	},

  	/**
  	 * Returns the pixel for the minimum chart value
  	 * The coordinate (0, 0) is at the upper-left corner of the canvas
  	 */
  	getBasePixel: function() {
  		return this.getPixelForValue(this.getBaseValue());
  	},

  	getBaseValue: function() {
  		var me = this;
  		var min = me.min;
  		var max = me.max;

  		return me.beginAtZero ? 0 :
  			min < 0 && max < 0 ? max :
  			min > 0 && max > 0 ? min :
  			0;
  	},

  	/**
  	 * Returns a subset of ticks to be plotted to avoid overlapping labels.
  	 * @private
  	 */
  	_autoSkip: function(ticks) {
  		var me = this;
  		var tickOpts = me.options.ticks;
  		var axisLength = me._length;
  		var ticksLimit = tickOpts.maxTicksLimit || axisLength / me._tickSize() + 1;
  		var majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];
  		var numMajorIndices = majorIndices.length;
  		var first = majorIndices[0];
  		var last = majorIndices[numMajorIndices - 1];
  		var i, ilen, spacing, avgMajorSpacing;

  		// If there are too many major ticks to display them all
  		if (numMajorIndices > ticksLimit) {
  			skipMajors(ticks, majorIndices, numMajorIndices / ticksLimit);
  			return nonSkipped(ticks);
  		}

  		spacing = calculateSpacing(majorIndices, ticks, axisLength, ticksLimit);

  		if (numMajorIndices > 0) {
  			for (i = 0, ilen = numMajorIndices - 1; i < ilen; i++) {
  				skip(ticks, spacing, majorIndices[i], majorIndices[i + 1]);
  			}
  			avgMajorSpacing = numMajorIndices > 1 ? (last - first) / (numMajorIndices - 1) : null;
  			skip(ticks, spacing, helpers$1.isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
  			skip(ticks, spacing, last, helpers$1.isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);
  			return nonSkipped(ticks);
  		}
  		skip(ticks, spacing);
  		return nonSkipped(ticks);
  	},

  	/**
  	 * @private
  	 */
  	_tickSize: function() {
  		var me = this;
  		var optionTicks = me.options.ticks;

  		// Calculate space needed by label in axis direction.
  		var rot = helpers$1.toRadians(me.labelRotation);
  		var cos = Math.abs(Math.cos(rot));
  		var sin = Math.abs(Math.sin(rot));

  		var labelSizes = me._getLabelSizes();
  		var padding = optionTicks.autoSkipPadding || 0;
  		var w = labelSizes ? labelSizes.widest.width + padding : 0;
  		var h = labelSizes ? labelSizes.highest.height + padding : 0;

  		// Calculate space needed for 1 tick in axis direction.
  		return me.isHorizontal()
  			? h * cos > w * sin ? w / cos : h / sin
  			: h * sin < w * cos ? h / cos : w / sin;
  	},

  	/**
  	 * @private
  	 */
  	_isVisible: function() {
  		var me = this;
  		var chart = me.chart;
  		var display = me.options.display;
  		var i, ilen, meta;

  		if (display !== 'auto') {
  			return !!display;
  		}

  		// When 'auto', the scale is visible if at least one associated dataset is visible.
  		for (i = 0, ilen = chart.data.datasets.length; i < ilen; ++i) {
  			if (chart.isDatasetVisible(i)) {
  				meta = chart.getDatasetMeta(i);
  				if (meta.xAxisID === me.id || meta.yAxisID === me.id) {
  					return true;
  				}
  			}
  		}

  		return false;
  	},

  	/**
  	 * @private
  	 */
  	_computeGridLineItems: function(chartArea) {
  		var me = this;
  		var chart = me.chart;
  		var options = me.options;
  		var gridLines = options.gridLines;
  		var position = options.position;
  		var offsetGridLines = gridLines.offsetGridLines;
  		var isHorizontal = me.isHorizontal();
  		var ticks = me._ticksToDraw;
  		var ticksLength = ticks.length + (offsetGridLines ? 1 : 0);

  		var tl = getTickMarkLength(gridLines);
  		var items = [];
  		var axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;
  		var axisHalfWidth = axisWidth / 2;
  		var alignPixel = helpers$1._alignPixel;
  		var alignBorderValue = function(pixel) {
  			return alignPixel(chart, pixel, axisWidth);
  		};
  		var borderValue, i, tick, lineValue, alignedLineValue;
  		var tx1, ty1, tx2, ty2, x1, y1, x2, y2, lineWidth, lineColor, borderDash, borderDashOffset;

  		if (position === 'top') {
  			borderValue = alignBorderValue(me.bottom);
  			ty1 = me.bottom - tl;
  			ty2 = borderValue - axisHalfWidth;
  			y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
  			y2 = chartArea.bottom;
  		} else if (position === 'bottom') {
  			borderValue = alignBorderValue(me.top);
  			y1 = chartArea.top;
  			y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
  			ty1 = borderValue + axisHalfWidth;
  			ty2 = me.top + tl;
  		} else if (position === 'left') {
  			borderValue = alignBorderValue(me.right);
  			tx1 = me.right - tl;
  			tx2 = borderValue - axisHalfWidth;
  			x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
  			x2 = chartArea.right;
  		} else {
  			borderValue = alignBorderValue(me.left);
  			x1 = chartArea.left;
  			x2 = alignBorderValue(chartArea.right) - axisHalfWidth;
  			tx1 = borderValue + axisHalfWidth;
  			tx2 = me.left + tl;
  		}

  		for (i = 0; i < ticksLength; ++i) {
  			tick = ticks[i] || {};

  			// autoskipper skipped this tick (#4635)
  			if (isNullOrUndef(tick.label) && i < ticks.length) {
  				continue;
  			}

  			if (i === me.zeroLineIndex && options.offset === offsetGridLines) {
  				// Draw the first index specially
  				lineWidth = gridLines.zeroLineWidth;
  				lineColor = gridLines.zeroLineColor;
  				borderDash = gridLines.zeroLineBorderDash || [];
  				borderDashOffset = gridLines.zeroLineBorderDashOffset || 0.0;
  			} else {
  				lineWidth = valueAtIndexOrDefault(gridLines.lineWidth, i, 1);
  				lineColor = valueAtIndexOrDefault(gridLines.color, i, 'rgba(0,0,0,0.1)');
  				borderDash = gridLines.borderDash || [];
  				borderDashOffset = gridLines.borderDashOffset || 0.0;
  			}

  			lineValue = getPixelForGridLine(me, tick._index || i, offsetGridLines);

  			// Skip if the pixel is out of the range
  			if (lineValue === undefined) {
  				continue;
  			}

  			alignedLineValue = alignPixel(chart, lineValue, lineWidth);

  			if (isHorizontal) {
  				tx1 = tx2 = x1 = x2 = alignedLineValue;
  			} else {
  				ty1 = ty2 = y1 = y2 = alignedLineValue;
  			}

  			items.push({
  				tx1: tx1,
  				ty1: ty1,
  				tx2: tx2,
  				ty2: ty2,
  				x1: x1,
  				y1: y1,
  				x2: x2,
  				y2: y2,
  				width: lineWidth,
  				color: lineColor,
  				borderDash: borderDash,
  				borderDashOffset: borderDashOffset,
  			});
  		}

  		items.ticksLength = ticksLength;
  		items.borderValue = borderValue;

  		return items;
  	},

  	/**
  	 * @private
  	 */
  	_computeLabelItems: function() {
  		var me = this;
  		var options = me.options;
  		var optionTicks = options.ticks;
  		var position = options.position;
  		var isMirrored = optionTicks.mirror;
  		var isHorizontal = me.isHorizontal();
  		var ticks = me._ticksToDraw;
  		var fonts = parseTickFontOptions(optionTicks);
  		var tickPadding = optionTicks.padding;
  		var tl = getTickMarkLength(options.gridLines);
  		var rotation = -helpers$1.toRadians(me.labelRotation);
  		var items = [];
  		var i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;

  		if (position === 'top') {
  			y = me.bottom - tl - tickPadding;
  			textAlign = !rotation ? 'center' : 'left';
  		} else if (position === 'bottom') {
  			y = me.top + tl + tickPadding;
  			textAlign = !rotation ? 'center' : 'right';
  		} else if (position === 'left') {
  			x = me.right - (isMirrored ? 0 : tl) - tickPadding;
  			textAlign = isMirrored ? 'left' : 'right';
  		} else {
  			x = me.left + (isMirrored ? 0 : tl) + tickPadding;
  			textAlign = isMirrored ? 'right' : 'left';
  		}

  		for (i = 0, ilen = ticks.length; i < ilen; ++i) {
  			tick = ticks[i];
  			label = tick.label;

  			// autoskipper skipped this tick (#4635)
  			if (isNullOrUndef(label)) {
  				continue;
  			}

  			pixel = me.getPixelForTick(tick._index || i) + optionTicks.labelOffset;
  			font = tick.major ? fonts.major : fonts.minor;
  			lineHeight = font.lineHeight;
  			lineCount = isArray(label) ? label.length : 1;

  			if (isHorizontal) {
  				x = pixel;
  				textOffset = position === 'top'
  					? ((!rotation ? 0.5 : 1) - lineCount) * lineHeight
  					: (!rotation ? 0.5 : 0) * lineHeight;
  			} else {
  				y = pixel;
  				textOffset = (1 - lineCount) * lineHeight / 2;
  			}

  			items.push({
  				x: x,
  				y: y,
  				rotation: rotation,
  				label: label,
  				font: font,
  				textOffset: textOffset,
  				textAlign: textAlign
  			});
  		}

  		return items;
  	},

  	/**
  	 * @private
  	 */
  	_drawGrid: function(chartArea) {
  		var me = this;
  		var gridLines = me.options.gridLines;

  		if (!gridLines.display) {
  			return;
  		}

  		var ctx = me.ctx;
  		var chart = me.chart;
  		var alignPixel = helpers$1._alignPixel;
  		var axisWidth = gridLines.drawBorder ? valueAtIndexOrDefault(gridLines.lineWidth, 0, 0) : 0;
  		var items = me._gridLineItems || (me._gridLineItems = me._computeGridLineItems(chartArea));
  		var width, color, i, ilen, item;

  		for (i = 0, ilen = items.length; i < ilen; ++i) {
  			item = items[i];
  			width = item.width;
  			color = item.color;

  			if (width && color) {
  				ctx.save();
  				ctx.lineWidth = width;
  				ctx.strokeStyle = color;
  				if (ctx.setLineDash) {
  					ctx.setLineDash(item.borderDash);
  					ctx.lineDashOffset = item.borderDashOffset;
  				}

  				ctx.beginPath();

  				if (gridLines.drawTicks) {
  					ctx.moveTo(item.tx1, item.ty1);
  					ctx.lineTo(item.tx2, item.ty2);
  				}

  				if (gridLines.drawOnChartArea) {
  					ctx.moveTo(item.x1, item.y1);
  					ctx.lineTo(item.x2, item.y2);
  				}

  				ctx.stroke();
  				ctx.restore();
  			}
  		}

  		if (axisWidth) {
  			// Draw the line at the edge of the axis
  			var firstLineWidth = axisWidth;
  			var lastLineWidth = valueAtIndexOrDefault(gridLines.lineWidth, items.ticksLength - 1, 1);
  			var borderValue = items.borderValue;
  			var x1, x2, y1, y2;

  			if (me.isHorizontal()) {
  				x1 = alignPixel(chart, me.left, firstLineWidth) - firstLineWidth / 2;
  				x2 = alignPixel(chart, me.right, lastLineWidth) + lastLineWidth / 2;
  				y1 = y2 = borderValue;
  			} else {
  				y1 = alignPixel(chart, me.top, firstLineWidth) - firstLineWidth / 2;
  				y2 = alignPixel(chart, me.bottom, lastLineWidth) + lastLineWidth / 2;
  				x1 = x2 = borderValue;
  			}

  			ctx.lineWidth = axisWidth;
  			ctx.strokeStyle = valueAtIndexOrDefault(gridLines.color, 0);
  			ctx.beginPath();
  			ctx.moveTo(x1, y1);
  			ctx.lineTo(x2, y2);
  			ctx.stroke();
  		}
  	},

  	/**
  	 * @private
  	 */
  	_drawLabels: function() {
  		var me = this;
  		var optionTicks = me.options.ticks;

  		if (!optionTicks.display) {
  			return;
  		}

  		var ctx = me.ctx;
  		var items = me._labelItems || (me._labelItems = me._computeLabelItems());
  		var i, j, ilen, jlen, item, tickFont, label, y;

  		for (i = 0, ilen = items.length; i < ilen; ++i) {
  			item = items[i];
  			tickFont = item.font;

  			// Make sure we draw text in the correct color and font
  			ctx.save();
  			ctx.translate(item.x, item.y);
  			ctx.rotate(item.rotation);
  			ctx.font = tickFont.string;
  			ctx.fillStyle = tickFont.color;
  			ctx.textBaseline = 'middle';
  			ctx.textAlign = item.textAlign;

  			label = item.label;
  			y = item.textOffset;
  			if (isArray(label)) {
  				for (j = 0, jlen = label.length; j < jlen; ++j) {
  					// We just make sure the multiline element is a string here..
  					ctx.fillText('' + label[j], 0, y);
  					y += tickFont.lineHeight;
  				}
  			} else {
  				ctx.fillText(label, 0, y);
  			}
  			ctx.restore();
  		}
  	},

  	/**
  	 * @private
  	 */
  	_drawTitle: function() {
  		var me = this;
  		var ctx = me.ctx;
  		var options = me.options;
  		var scaleLabel = options.scaleLabel;

  		if (!scaleLabel.display) {
  			return;
  		}

  		var scaleLabelFontColor = valueOrDefault$a(scaleLabel.fontColor, core_defaults.global.defaultFontColor);
  		var scaleLabelFont = helpers$1.options._parseFont(scaleLabel);
  		var scaleLabelPadding = helpers$1.options.toPadding(scaleLabel.padding);
  		var halfLineHeight = scaleLabelFont.lineHeight / 2;
  		var position = options.position;
  		var rotation = 0;
  		var scaleLabelX, scaleLabelY;

  		if (me.isHorizontal()) {
  			scaleLabelX = me.left + me.width / 2; // midpoint of the width
  			scaleLabelY = position === 'bottom'
  				? me.bottom - halfLineHeight - scaleLabelPadding.bottom
  				: me.top + halfLineHeight + scaleLabelPadding.top;
  		} else {
  			var isLeft = position === 'left';
  			scaleLabelX = isLeft
  				? me.left + halfLineHeight + scaleLabelPadding.top
  				: me.right - halfLineHeight - scaleLabelPadding.top;
  			scaleLabelY = me.top + me.height / 2;
  			rotation = isLeft ? -0.5 * Math.PI : 0.5 * Math.PI;
  		}

  		ctx.save();
  		ctx.translate(scaleLabelX, scaleLabelY);
  		ctx.rotate(rotation);
  		ctx.textAlign = 'center';
  		ctx.textBaseline = 'middle';
  		ctx.fillStyle = scaleLabelFontColor; // render in correct colour
  		ctx.font = scaleLabelFont.string;
  		ctx.fillText(scaleLabel.labelString, 0, 0);
  		ctx.restore();
  	},

  	draw: function(chartArea) {
  		var me = this;

  		if (!me._isVisible()) {
  			return;
  		}

  		me._drawGrid(chartArea);
  		me._drawTitle();
  		me._drawLabels();
  	},

  	/**
  	 * @private
  	 */
  	_layers: function() {
  		var me = this;
  		var opts = me.options;
  		var tz = opts.ticks && opts.ticks.z || 0;
  		var gz = opts.gridLines && opts.gridLines.z || 0;

  		if (!me._isVisible() || tz === gz || me.draw !== me._draw) {
  			// backward compatibility: draw has been overridden by custom scale
  			return [{
  				z: tz,
  				draw: function() {
  					me.draw.apply(me, arguments);
  				}
  			}];
  		}

  		return [{
  			z: gz,
  			draw: function() {
  				me._drawGrid.apply(me, arguments);
  				me._drawTitle.apply(me, arguments);
  			}
  		}, {
  			z: tz,
  			draw: function() {
  				me._drawLabels.apply(me, arguments);
  			}
  		}];
  	},

  	/**
  	 * @private
  	 */
  	_getMatchingVisibleMetas: function(type) {
  		var me = this;
  		var isHorizontal = me.isHorizontal();
  		return me.chart._getSortedVisibleDatasetMetas()
  			.filter(function(meta) {
  				return (!type || meta.type === type)
  					&& (isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id);
  			});
  	}
  });

  Scale.prototype._draw = Scale.prototype.draw;

  var core_scale = Scale;

  var isNullOrUndef$1 = helpers$1.isNullOrUndef;

  var defaultConfig = {
  	position: 'bottom'
  };

  var scale_category = core_scale.extend({
  	determineDataLimits: function() {
  		var me = this;
  		var labels = me._getLabels();
  		var ticksOpts = me.options.ticks;
  		var min = ticksOpts.min;
  		var max = ticksOpts.max;
  		var minIndex = 0;
  		var maxIndex = labels.length - 1;
  		var findIndex;

  		if (min !== undefined) {
  			// user specified min value
  			findIndex = labels.indexOf(min);
  			if (findIndex >= 0) {
  				minIndex = findIndex;
  			}
  		}

  		if (max !== undefined) {
  			// user specified max value
  			findIndex = labels.indexOf(max);
  			if (findIndex >= 0) {
  				maxIndex = findIndex;
  			}
  		}

  		me.minIndex = minIndex;
  		me.maxIndex = maxIndex;
  		me.min = labels[minIndex];
  		me.max = labels[maxIndex];
  	},

  	buildTicks: function() {
  		var me = this;
  		var labels = me._getLabels();
  		var minIndex = me.minIndex;
  		var maxIndex = me.maxIndex;

  		// If we are viewing some subset of labels, slice the original array
  		me.ticks = (minIndex === 0 && maxIndex === labels.length - 1) ? labels : labels.slice(minIndex, maxIndex + 1);
  	},

  	getLabelForIndex: function(index, datasetIndex) {
  		var me = this;
  		var chart = me.chart;

  		if (chart.getDatasetMeta(datasetIndex).controller._getValueScaleId() === me.id) {
  			return me.getRightValue(chart.data.datasets[datasetIndex].data[index]);
  		}

  		return me._getLabels()[index];
  	},

  	_configure: function() {
  		var me = this;
  		var offset = me.options.offset;
  		var ticks = me.ticks;

  		core_scale.prototype._configure.call(me);

  		if (!me.isHorizontal()) {
  			// For backward compatibility, vertical category scale reverse is inverted.
  			me._reversePixels = !me._reversePixels;
  		}

  		if (!ticks) {
  			return;
  		}

  		me._startValue = me.minIndex - (offset ? 0.5 : 0);
  		me._valueRange = Math.max(ticks.length - (offset ? 0 : 1), 1);
  	},

  	// Used to get data value locations.  Value can either be an index or a numerical value
  	getPixelForValue: function(value, index, datasetIndex) {
  		var me = this;
  		var valueCategory, labels, idx;

  		if (!isNullOrUndef$1(index) && !isNullOrUndef$1(datasetIndex)) {
  			value = me.chart.data.datasets[datasetIndex].data[index];
  		}

  		// If value is a data object, then index is the index in the data array,
  		// not the index of the scale. We need to change that.
  		if (!isNullOrUndef$1(value)) {
  			valueCategory = me.isHorizontal() ? value.x : value.y;
  		}
  		if (valueCategory !== undefined || (value !== undefined && isNaN(index))) {
  			labels = me._getLabels();
  			value = helpers$1.valueOrDefault(valueCategory, value);
  			idx = labels.indexOf(value);
  			index = idx !== -1 ? idx : index;
  			if (isNaN(index)) {
  				index = value;
  			}
  		}
  		return me.getPixelForDecimal((index - me._startValue) / me._valueRange);
  	},

  	getPixelForTick: function(index) {
  		var ticks = this.ticks;
  		return index < 0 || index > ticks.length - 1
  			? null
  			: this.getPixelForValue(ticks[index], index + this.minIndex);
  	},

  	getValueForPixel: function(pixel) {
  		var me = this;
  		var value = Math.round(me._startValue + me.getDecimalForPixel(pixel) * me._valueRange);
  		return Math.min(Math.max(value, 0), me.ticks.length - 1);
  	},

  	getBasePixel: function() {
  		return this.bottom;
  	}
  });

  // INTERNAL: static default options, registered in src/index.js
  var _defaults = defaultConfig;
  scale_category._defaults = _defaults;

  var noop = helpers$1.noop;
  var isNullOrUndef$2 = helpers$1.isNullOrUndef;

  /**
   * Generate a set of linear ticks
   * @param generationOptions the options used to generate the ticks
   * @param dataRange the range of the data
   * @returns {number[]} array of tick values
   */
  function generateTicks(generationOptions, dataRange) {
  	var ticks = [];
  	// To get a "nice" value for the tick spacing, we will use the appropriately named
  	// "nice number" algorithm. See https://stackoverflow.com/questions/8506881/nice-label-algorithm-for-charts-with-minimum-ticks
  	// for details.

  	var MIN_SPACING = 1e-14;
  	var stepSize = generationOptions.stepSize;
  	var unit = stepSize || 1;
  	var maxNumSpaces = generationOptions.maxTicks - 1;
  	var min = generationOptions.min;
  	var max = generationOptions.max;
  	var precision = generationOptions.precision;
  	var rmin = dataRange.min;
  	var rmax = dataRange.max;
  	var spacing = helpers$1.niceNum((rmax - rmin) / maxNumSpaces / unit) * unit;
  	var factor, niceMin, niceMax, numSpaces;

  	// Beyond MIN_SPACING floating point numbers being to lose precision
  	// such that we can't do the math necessary to generate ticks
  	if (spacing < MIN_SPACING && isNullOrUndef$2(min) && isNullOrUndef$2(max)) {
  		return [rmin, rmax];
  	}

  	numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);
  	if (numSpaces > maxNumSpaces) {
  		// If the calculated num of spaces exceeds maxNumSpaces, recalculate it
  		spacing = helpers$1.niceNum(numSpaces * spacing / maxNumSpaces / unit) * unit;
  	}

  	if (stepSize || isNullOrUndef$2(precision)) {
  		// If a precision is not specified, calculate factor based on spacing
  		factor = Math.pow(10, helpers$1._decimalPlaces(spacing));
  	} else {
  		// If the user specified a precision, round to that number of decimal places
  		factor = Math.pow(10, precision);
  		spacing = Math.ceil(spacing * factor) / factor;
  	}

  	niceMin = Math.floor(rmin / spacing) * spacing;
  	niceMax = Math.ceil(rmax / spacing) * spacing;

  	// If min, max and stepSize is set and they make an evenly spaced scale use it.
  	if (stepSize) {
  		// If very close to our whole number, use it.
  		if (!isNullOrUndef$2(min) && helpers$1.almostWhole(min / spacing, spacing / 1000)) {
  			niceMin = min;
  		}
  		if (!isNullOrUndef$2(max) && helpers$1.almostWhole(max / spacing, spacing / 1000)) {
  			niceMax = max;
  		}
  	}

  	numSpaces = (niceMax - niceMin) / spacing;
  	// If very close to our rounded value, use it.
  	if (helpers$1.almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {
  		numSpaces = Math.round(numSpaces);
  	} else {
  		numSpaces = Math.ceil(numSpaces);
  	}

  	niceMin = Math.round(niceMin * factor) / factor;
  	niceMax = Math.round(niceMax * factor) / factor;
  	ticks.push(isNullOrUndef$2(min) ? niceMin : min);
  	for (var j = 1; j < numSpaces; ++j) {
  		ticks.push(Math.round((niceMin + j * spacing) * factor) / factor);
  	}
  	ticks.push(isNullOrUndef$2(max) ? niceMax : max);

  	return ticks;
  }

  var scale_linearbase = core_scale.extend({
  	getRightValue: function(value) {
  		if (typeof value === 'string') {
  			return +value;
  		}
  		return core_scale.prototype.getRightValue.call(this, value);
  	},

  	handleTickRangeOptions: function() {
  		var me = this;
  		var opts = me.options;
  		var tickOpts = opts.ticks;

  		// If we are forcing it to begin at 0, but 0 will already be rendered on the chart,
  		// do nothing since that would make the chart weird. If the user really wants a weird chart
  		// axis, they can manually override it
  		if (tickOpts.beginAtZero) {
  			var minSign = helpers$1.sign(me.min);
  			var maxSign = helpers$1.sign(me.max);

  			if (minSign < 0 && maxSign < 0) {
  				// move the top up to 0
  				me.max = 0;
  			} else if (minSign > 0 && maxSign > 0) {
  				// move the bottom down to 0
  				me.min = 0;
  			}
  		}

  		var setMin = tickOpts.min !== undefined || tickOpts.suggestedMin !== undefined;
  		var setMax = tickOpts.max !== undefined || tickOpts.suggestedMax !== undefined;

  		if (tickOpts.min !== undefined) {
  			me.min = tickOpts.min;
  		} else if (tickOpts.suggestedMin !== undefined) {
  			if (me.min === null) {
  				me.min = tickOpts.suggestedMin;
  			} else {
  				me.min = Math.min(me.min, tickOpts.suggestedMin);
  			}
  		}

  		if (tickOpts.max !== undefined) {
  			me.max = tickOpts.max;
  		} else if (tickOpts.suggestedMax !== undefined) {
  			if (me.max === null) {
  				me.max = tickOpts.suggestedMax;
  			} else {
  				me.max = Math.max(me.max, tickOpts.suggestedMax);
  			}
  		}

  		if (setMin !== setMax) {
  			// We set the min or the max but not both.
  			// So ensure that our range is good
  			// Inverted or 0 length range can happen when
  			// ticks.min is set, and no datasets are visible
  			if (me.min >= me.max) {
  				if (setMin) {
  					me.max = me.min + 1;
  				} else {
  					me.min = me.max - 1;
  				}
  			}
  		}

  		if (me.min === me.max) {
  			me.max++;

  			if (!tickOpts.beginAtZero) {
  				me.min--;
  			}
  		}
  	},

  	getTickLimit: function() {
  		var me = this;
  		var tickOpts = me.options.ticks;
  		var stepSize = tickOpts.stepSize;
  		var maxTicksLimit = tickOpts.maxTicksLimit;
  		var maxTicks;

  		if (stepSize) {
  			maxTicks = Math.ceil(me.max / stepSize) - Math.floor(me.min / stepSize) + 1;
  		} else {
  			maxTicks = me._computeTickLimit();
  			maxTicksLimit = maxTicksLimit || 11;
  		}

  		if (maxTicksLimit) {
  			maxTicks = Math.min(maxTicksLimit, maxTicks);
  		}

  		return maxTicks;
  	},

  	_computeTickLimit: function() {
  		return Number.POSITIVE_INFINITY;
  	},

  	handleDirectionalChanges: noop,

  	buildTicks: function() {
  		var me = this;
  		var opts = me.options;
  		var tickOpts = opts.ticks;

  		// Figure out what the max number of ticks we can support it is based on the size of
  		// the axis area. For now, we say that the minimum tick spacing in pixels must be 40
  		// We also limit the maximum number of ticks to 11 which gives a nice 10 squares on
  		// the graph. Make sure we always have at least 2 ticks
  		var maxTicks = me.getTickLimit();
  		maxTicks = Math.max(2, maxTicks);

  		var numericGeneratorOptions = {
  			maxTicks: maxTicks,
  			min: tickOpts.min,
  			max: tickOpts.max,
  			precision: tickOpts.precision,
  			stepSize: helpers$1.valueOrDefault(tickOpts.fixedStepSize, tickOpts.stepSize)
  		};
  		var ticks = me.ticks = generateTicks(numericGeneratorOptions, me);

  		me.handleDirectionalChanges();

  		// At this point, we need to update our max and min given the tick values since we have expanded the
  		// range of the scale
  		me.max = helpers$1.max(ticks);
  		me.min = helpers$1.min(ticks);

  		if (tickOpts.reverse) {
  			ticks.reverse();

  			me.start = me.max;
  			me.end = me.min;
  		} else {
  			me.start = me.min;
  			me.end = me.max;
  		}
  	},

  	convertTicksToLabels: function() {
  		var me = this;
  		me.ticksAsNumbers = me.ticks.slice();
  		me.zeroLineIndex = me.ticks.indexOf(0);

  		core_scale.prototype.convertTicksToLabels.call(me);
  	},

  	_configure: function() {
  		var me = this;
  		var ticks = me.getTicks();
  		var start = me.min;
  		var end = me.max;
  		var offset;

  		core_scale.prototype._configure.call(me);

  		if (me.options.offset && ticks.length) {
  			offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;
  			start -= offset;
  			end += offset;
  		}
  		me._startValue = start;
  		me._endValue = end;
  		me._valueRange = end - start;
  	}
  });

  var defaultConfig$1 = {
  	position: 'left',
  	ticks: {
  		callback: core_ticks.formatters.linear
  	}
  };

  var DEFAULT_MIN = 0;
  var DEFAULT_MAX = 1;

  function getOrCreateStack(stacks, stacked, meta) {
  	var key = [
  		meta.type,
  		// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
  		stacked === undefined && meta.stack === undefined ? meta.index : '',
  		meta.stack
  	].join('.');

  	if (stacks[key] === undefined) {
  		stacks[key] = {
  			pos: [],
  			neg: []
  		};
  	}

  	return stacks[key];
  }

  function stackData(scale, stacks, meta, data) {
  	var opts = scale.options;
  	var stacked = opts.stacked;
  	var stack = getOrCreateStack(stacks, stacked, meta);
  	var pos = stack.pos;
  	var neg = stack.neg;
  	var ilen = data.length;
  	var i, value;

  	for (i = 0; i < ilen; ++i) {
  		value = scale._parseValue(data[i]);
  		if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden) {
  			continue;
  		}

  		pos[i] = pos[i] || 0;
  		neg[i] = neg[i] || 0;

  		if (opts.relativePoints) {
  			pos[i] = 100;
  		} else if (value.min < 0 || value.max < 0) {
  			neg[i] += value.min;
  		} else {
  			pos[i] += value.max;
  		}
  	}
  }

  function updateMinMax(scale, meta, data) {
  	var ilen = data.length;
  	var i, value;

  	for (i = 0; i < ilen; ++i) {
  		value = scale._parseValue(data[i]);
  		if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden) {
  			continue;
  		}

  		scale.min = Math.min(scale.min, value.min);
  		scale.max = Math.max(scale.max, value.max);
  	}
  }

  var scale_linear = scale_linearbase.extend({
  	determineDataLimits: function() {
  		var me = this;
  		var opts = me.options;
  		var chart = me.chart;
  		var datasets = chart.data.datasets;
  		var metasets = me._getMatchingVisibleMetas();
  		var hasStacks = opts.stacked;
  		var stacks = {};
  		var ilen = metasets.length;
  		var i, meta, data, values;

  		me.min = Number.POSITIVE_INFINITY;
  		me.max = Number.NEGATIVE_INFINITY;

  		if (hasStacks === undefined) {
  			for (i = 0; !hasStacks && i < ilen; ++i) {
  				meta = metasets[i];
  				hasStacks = meta.stack !== undefined;
  			}
  		}

  		for (i = 0; i < ilen; ++i) {
  			meta = metasets[i];
  			data = datasets[meta.index].data;
  			if (hasStacks) {
  				stackData(me, stacks, meta, data);
  			} else {
  				updateMinMax(me, meta, data);
  			}
  		}

  		helpers$1.each(stacks, function(stackValues) {
  			values = stackValues.pos.concat(stackValues.neg);
  			me.min = Math.min(me.min, helpers$1.min(values));
  			me.max = Math.max(me.max, helpers$1.max(values));
  		});

  		me.min = helpers$1.isFinite(me.min) && !isNaN(me.min) ? me.min : DEFAULT_MIN;
  		me.max = helpers$1.isFinite(me.max) && !isNaN(me.max) ? me.max : DEFAULT_MAX;

  		// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero
  		me.handleTickRangeOptions();
  	},

  	// Returns the maximum number of ticks based on the scale dimension
  	_computeTickLimit: function() {
  		var me = this;
  		var tickFont;

  		if (me.isHorizontal()) {
  			return Math.ceil(me.width / 40);
  		}
  		tickFont = helpers$1.options._parseFont(me.options.ticks);
  		return Math.ceil(me.height / tickFont.lineHeight);
  	},

  	// Called after the ticks are built. We need
  	handleDirectionalChanges: function() {
  		if (!this.isHorizontal()) {
  			// We are in a vertical orientation. The top value is the highest. So reverse the array
  			this.ticks.reverse();
  		}
  	},

  	getLabelForIndex: function(index, datasetIndex) {
  		return this._getScaleLabel(this.chart.data.datasets[datasetIndex].data[index]);
  	},

  	// Utils
  	getPixelForValue: function(value) {
  		var me = this;
  		return me.getPixelForDecimal((+me.getRightValue(value) - me._startValue) / me._valueRange);
  	},

  	getValueForPixel: function(pixel) {
  		return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
  	},

  	getPixelForTick: function(index) {
  		var ticks = this.ticksAsNumbers;
  		if (index < 0 || index > ticks.length - 1) {
  			return null;
  		}
  		return this.getPixelForValue(ticks[index]);
  	}
  });

  // INTERNAL: static default options, registered in src/index.js
  var _defaults$1 = defaultConfig$1;
  scale_linear._defaults = _defaults$1;

  var valueOrDefault$b = helpers$1.valueOrDefault;
  var log10 = helpers$1.math.log10;

  /**
   * Generate a set of logarithmic ticks
   * @param generationOptions the options used to generate the ticks
   * @param dataRange the range of the data
   * @returns {number[]} array of tick values
   */
  function generateTicks$1(generationOptions, dataRange) {
  	var ticks = [];

  	var tickVal = valueOrDefault$b(generationOptions.min, Math.pow(10, Math.floor(log10(dataRange.min))));

  	var endExp = Math.floor(log10(dataRange.max));
  	var endSignificand = Math.ceil(dataRange.max / Math.pow(10, endExp));
  	var exp, significand;

  	if (tickVal === 0) {
  		exp = Math.floor(log10(dataRange.minNotZero));
  		significand = Math.floor(dataRange.minNotZero / Math.pow(10, exp));

  		ticks.push(tickVal);
  		tickVal = significand * Math.pow(10, exp);
  	} else {
  		exp = Math.floor(log10(tickVal));
  		significand = Math.floor(tickVal / Math.pow(10, exp));
  	}
  	var precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;

  	do {
  		ticks.push(tickVal);

  		++significand;
  		if (significand === 10) {
  			significand = 1;
  			++exp;
  			precision = exp >= 0 ? 1 : precision;
  		}

  		tickVal = Math.round(significand * Math.pow(10, exp) * precision) / precision;
  	} while (exp < endExp || (exp === endExp && significand < endSignificand));

  	var lastTick = valueOrDefault$b(generationOptions.max, tickVal);
  	ticks.push(lastTick);

  	return ticks;
  }

  var defaultConfig$2 = {
  	position: 'left',

  	// label settings
  	ticks: {
  		callback: core_ticks.formatters.logarithmic
  	}
  };

  // TODO(v3): change this to positiveOrDefault
  function nonNegativeOrDefault(value, defaultValue) {
  	return helpers$1.isFinite(value) && value >= 0 ? value : defaultValue;
  }

  var scale_logarithmic = core_scale.extend({
  	determineDataLimits: function() {
  		var me = this;
  		var opts = me.options;
  		var chart = me.chart;
  		var datasets = chart.data.datasets;
  		var isHorizontal = me.isHorizontal();
  		function IDMatches(meta) {
  			return isHorizontal ? meta.xAxisID === me.id : meta.yAxisID === me.id;
  		}
  		var datasetIndex, meta, value, data, i, ilen;

  		// Calculate Range
  		me.min = Number.POSITIVE_INFINITY;
  		me.max = Number.NEGATIVE_INFINITY;
  		me.minNotZero = Number.POSITIVE_INFINITY;

  		var hasStacks = opts.stacked;
  		if (hasStacks === undefined) {
  			for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
  				meta = chart.getDatasetMeta(datasetIndex);
  				if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta) &&
  					meta.stack !== undefined) {
  					hasStacks = true;
  					break;
  				}
  			}
  		}

  		if (opts.stacked || hasStacks) {
  			var valuesPerStack = {};

  			for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
  				meta = chart.getDatasetMeta(datasetIndex);
  				var key = [
  					meta.type,
  					// we have a separate stack for stack=undefined datasets when the opts.stacked is undefined
  					((opts.stacked === undefined && meta.stack === undefined) ? datasetIndex : ''),
  					meta.stack
  				].join('.');

  				if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
  					if (valuesPerStack[key] === undefined) {
  						valuesPerStack[key] = [];
  					}

  					data = datasets[datasetIndex].data;
  					for (i = 0, ilen = data.length; i < ilen; i++) {
  						var values = valuesPerStack[key];
  						value = me._parseValue(data[i]);
  						// invalid, hidden and negative values are ignored
  						if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden || value.min < 0 || value.max < 0) {
  							continue;
  						}
  						values[i] = values[i] || 0;
  						values[i] += value.max;
  					}
  				}
  			}

  			helpers$1.each(valuesPerStack, function(valuesForType) {
  				if (valuesForType.length > 0) {
  					var minVal = helpers$1.min(valuesForType);
  					var maxVal = helpers$1.max(valuesForType);
  					me.min = Math.min(me.min, minVal);
  					me.max = Math.max(me.max, maxVal);
  				}
  			});

  		} else {
  			for (datasetIndex = 0; datasetIndex < datasets.length; datasetIndex++) {
  				meta = chart.getDatasetMeta(datasetIndex);
  				if (chart.isDatasetVisible(datasetIndex) && IDMatches(meta)) {
  					data = datasets[datasetIndex].data;
  					for (i = 0, ilen = data.length; i < ilen; i++) {
  						value = me._parseValue(data[i]);
  						// invalid, hidden and negative values are ignored
  						if (isNaN(value.min) || isNaN(value.max) || meta.data[i].hidden || value.min < 0 || value.max < 0) {
  							continue;
  						}

  						me.min = Math.min(value.min, me.min);
  						me.max = Math.max(value.max, me.max);

  						if (value.min !== 0) {
  							me.minNotZero = Math.min(value.min, me.minNotZero);
  						}
  					}
  				}
  			}
  		}

  		me.min = helpers$1.isFinite(me.min) ? me.min : null;
  		me.max = helpers$1.isFinite(me.max) ? me.max : null;
  		me.minNotZero = helpers$1.isFinite(me.minNotZero) ? me.minNotZero : null;

  		// Common base implementation to handle ticks.min, ticks.max
  		this.handleTickRangeOptions();
  	},

  	handleTickRangeOptions: function() {
  		var me = this;
  		var tickOpts = me.options.ticks;
  		var DEFAULT_MIN = 1;
  		var DEFAULT_MAX = 10;

  		me.min = nonNegativeOrDefault(tickOpts.min, me.min);
  		me.max = nonNegativeOrDefault(tickOpts.max, me.max);

  		if (me.min === me.max) {
  			if (me.min !== 0 && me.min !== null) {
  				me.min = Math.pow(10, Math.floor(log10(me.min)) - 1);
  				me.max = Math.pow(10, Math.floor(log10(me.max)) + 1);
  			} else {
  				me.min = DEFAULT_MIN;
  				me.max = DEFAULT_MAX;
  			}
  		}
  		if (me.min === null) {
  			me.min = Math.pow(10, Math.floor(log10(me.max)) - 1);
  		}
  		if (me.max === null) {
  			me.max = me.min !== 0
  				? Math.pow(10, Math.floor(log10(me.min)) + 1)
  				: DEFAULT_MAX;
  		}
  		if (me.minNotZero === null) {
  			if (me.min > 0) {
  				me.minNotZero = me.min;
  			} else if (me.max < 1) {
  				me.minNotZero = Math.pow(10, Math.floor(log10(me.max)));
  			} else {
  				me.minNotZero = DEFAULT_MIN;
  			}
  		}
  	},

  	buildTicks: function() {
  		var me = this;
  		var tickOpts = me.options.ticks;
  		var reverse = !me.isHorizontal();

  		var generationOptions = {
  			min: nonNegativeOrDefault(tickOpts.min),
  			max: nonNegativeOrDefault(tickOpts.max)
  		};
  		var ticks = me.ticks = generateTicks$1(generationOptions, me);

  		// At this point, we need to update our max and min given the tick values since we have expanded the
  		// range of the scale
  		me.max = helpers$1.max(ticks);
  		me.min = helpers$1.min(ticks);

  		if (tickOpts.reverse) {
  			reverse = !reverse;
  			me.start = me.max;
  			me.end = me.min;
  		} else {
  			me.start = me.min;
  			me.end = me.max;
  		}
  		if (reverse) {
  			ticks.reverse();
  		}
  	},

  	convertTicksToLabels: function() {
  		this.tickValues = this.ticks.slice();

  		core_scale.prototype.convertTicksToLabels.call(this);
  	},

  	// Get the correct tooltip label
  	getLabelForIndex: function(index, datasetIndex) {
  		return this._getScaleLabel(this.chart.data.datasets[datasetIndex].data[index]);
  	},

  	getPixelForTick: function(index) {
  		var ticks = this.tickValues;
  		if (index < 0 || index > ticks.length - 1) {
  			return null;
  		}
  		return this.getPixelForValue(ticks[index]);
  	},

  	/**
  	 * Returns the value of the first tick.
  	 * @param {number} value - The minimum not zero value.
  	 * @return {number} The first tick value.
  	 * @private
  	 */
  	_getFirstTickValue: function(value) {
  		var exp = Math.floor(log10(value));
  		var significand = Math.floor(value / Math.pow(10, exp));

  		return significand * Math.pow(10, exp);
  	},

  	_configure: function() {
  		var me = this;
  		var start = me.min;
  		var offset = 0;

  		core_scale.prototype._configure.call(me);

  		if (start === 0) {
  			start = me._getFirstTickValue(me.minNotZero);
  			offset = valueOrDefault$b(me.options.ticks.fontSize, core_defaults.global.defaultFontSize) / me._length;
  		}

  		me._startValue = log10(start);
  		me._valueOffset = offset;
  		me._valueRange = (log10(me.max) - log10(start)) / (1 - offset);
  	},

  	getPixelForValue: function(value) {
  		var me = this;
  		var decimal = 0;

  		value = +me.getRightValue(value);

  		if (value > me.min && value > 0) {
  			decimal = (log10(value) - me._startValue) / me._valueRange + me._valueOffset;
  		}
  		return me.getPixelForDecimal(decimal);
  	},

  	getValueForPixel: function(pixel) {
  		var me = this;
  		var decimal = me.getDecimalForPixel(pixel);
  		return decimal === 0 && me.min === 0
  			? 0
  			: Math.pow(10, me._startValue + (decimal - me._valueOffset) * me._valueRange);
  	}
  });

  // INTERNAL: static default options, registered in src/index.js
  var _defaults$2 = defaultConfig$2;
  scale_logarithmic._defaults = _defaults$2;

  var valueOrDefault$c = helpers$1.valueOrDefault;
  var valueAtIndexOrDefault$1 = helpers$1.valueAtIndexOrDefault;
  var resolve$4 = helpers$1.options.resolve;

  var defaultConfig$3 = {
  	display: true,

  	// Boolean - Whether to animate scaling the chart from the centre
  	animate: true,
  	position: 'chartArea',

  	angleLines: {
  		display: true,
  		color: 'rgba(0,0,0,0.1)',
  		lineWidth: 1,
  		borderDash: [],
  		borderDashOffset: 0.0
  	},

  	gridLines: {
  		circular: false
  	},

  	// label settings
  	ticks: {
  		// Boolean - Show a backdrop to the scale label
  		showLabelBackdrop: true,

  		// String - The colour of the label backdrop
  		backdropColor: 'rgba(255,255,255,0.75)',

  		// Number - The backdrop padding above & below the label in pixels
  		backdropPaddingY: 2,

  		// Number - The backdrop padding to the side of the label in pixels
  		backdropPaddingX: 2,

  		callback: core_ticks.formatters.linear
  	},

  	pointLabels: {
  		// Boolean - if true, show point labels
  		display: true,

  		// Number - Point label font size in pixels
  		fontSize: 10,

  		// Function - Used to convert point labels
  		callback: function(label) {
  			return label;
  		}
  	}
  };

  function getTickBackdropHeight(opts) {
  	var tickOpts = opts.ticks;

  	if (tickOpts.display && opts.display) {
  		return valueOrDefault$c(tickOpts.fontSize, core_defaults.global.defaultFontSize) + tickOpts.backdropPaddingY * 2;
  	}
  	return 0;
  }

  function measureLabelSize(ctx, lineHeight, label) {
  	if (helpers$1.isArray(label)) {
  		return {
  			w: helpers$1.longestText(ctx, ctx.font, label),
  			h: label.length * lineHeight
  		};
  	}

  	return {
  		w: ctx.measureText(label).width,
  		h: lineHeight
  	};
  }

  function determineLimits(angle, pos, size, min, max) {
  	if (angle === min || angle === max) {
  		return {
  			start: pos - (size / 2),
  			end: pos + (size / 2)
  		};
  	} else if (angle < min || angle > max) {
  		return {
  			start: pos - size,
  			end: pos
  		};
  	}

  	return {
  		start: pos,
  		end: pos + size
  	};
  }

  /**
   * Helper function to fit a radial linear scale with point labels
   */
  function fitWithPointLabels(scale) {

  	// Right, this is really confusing and there is a lot of maths going on here
  	// The gist of the problem is here: https://gist.github.com/nnnick/696cc9c55f4b0beb8fe9
  	//
  	// Reaction: https://dl.dropboxusercontent.com/u/34601363/toomuchscience.gif
  	//
  	// Solution:
  	//
  	// We assume the radius of the polygon is half the size of the canvas at first
  	// at each index we check if the text overlaps.
  	//
  	// Where it does, we store that angle and that index.
  	//
  	// After finding the largest index and angle we calculate how much we need to remove
  	// from the shape radius to move the point inwards by that x.
  	//
  	// We average the left and right distances to get the maximum shape radius that can fit in the box
  	// along with labels.
  	//
  	// Once we have that, we can find the centre point for the chart, by taking the x text protrusion
  	// on each side, removing that from the size, halving it and adding the left x protrusion width.
  	//
  	// This will mean we have a shape fitted to the canvas, as large as it can be with the labels
  	// and position it in the most space efficient manner
  	//
  	// https://dl.dropboxusercontent.com/u/34601363/yeahscience.gif

  	var plFont = helpers$1.options._parseFont(scale.options.pointLabels);

  	// Get maximum radius of the polygon. Either half the height (minus the text width) or half the width.
  	// Use this to calculate the offset + change. - Make sure L/R protrusion is at least 0 to stop issues with centre points
  	var furthestLimits = {
  		l: 0,
  		r: scale.width,
  		t: 0,
  		b: scale.height - scale.paddingTop
  	};
  	var furthestAngles = {};
  	var i, textSize, pointPosition;

  	scale.ctx.font = plFont.string;
  	scale._pointLabelSizes = [];

  	var valueCount = scale.chart.data.labels.length;
  	for (i = 0; i < valueCount; i++) {
  		pointPosition = scale.getPointPosition(i, scale.drawingArea + 5);
  		textSize = measureLabelSize(scale.ctx, plFont.lineHeight, scale.pointLabels[i]);
  		scale._pointLabelSizes[i] = textSize;

  		// Add quarter circle to make degree 0 mean top of circle
  		var angleRadians = scale.getIndexAngle(i);
  		var angle = helpers$1.toDegrees(angleRadians) % 360;
  		var hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
  		var vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);

  		if (hLimits.start < furthestLimits.l) {
  			furthestLimits.l = hLimits.start;
  			furthestAngles.l = angleRadians;
  		}

  		if (hLimits.end > furthestLimits.r) {
  			furthestLimits.r = hLimits.end;
  			furthestAngles.r = angleRadians;
  		}

  		if (vLimits.start < furthestLimits.t) {
  			furthestLimits.t = vLimits.start;
  			furthestAngles.t = angleRadians;
  		}

  		if (vLimits.end > furthestLimits.b) {
  			furthestLimits.b = vLimits.end;
  			furthestAngles.b = angleRadians;
  		}
  	}

  	scale.setReductions(scale.drawingArea, furthestLimits, furthestAngles);
  }

  function getTextAlignForAngle(angle) {
  	if (angle === 0 || angle === 180) {
  		return 'center';
  	} else if (angle < 180) {
  		return 'left';
  	}

  	return 'right';
  }

  function fillText(ctx, text, position, lineHeight) {
  	var y = position.y + lineHeight / 2;
  	var i, ilen;

  	if (helpers$1.isArray(text)) {
  		for (i = 0, ilen = text.length; i < ilen; ++i) {
  			ctx.fillText(text[i], position.x, y);
  			y += lineHeight;
  		}
  	} else {
  		ctx.fillText(text, position.x, y);
  	}
  }

  function adjustPointPositionForLabelHeight(angle, textSize, position) {
  	if (angle === 90 || angle === 270) {
  		position.y -= (textSize.h / 2);
  	} else if (angle > 270 || angle < 90) {
  		position.y -= textSize.h;
  	}
  }

  function drawPointLabels(scale) {
  	var ctx = scale.ctx;
  	var opts = scale.options;
  	var pointLabelOpts = opts.pointLabels;
  	var tickBackdropHeight = getTickBackdropHeight(opts);
  	var outerDistance = scale.getDistanceFromCenterForValue(opts.ticks.reverse ? scale.min : scale.max);
  	var plFont = helpers$1.options._parseFont(pointLabelOpts);

  	ctx.save();

  	ctx.font = plFont.string;
  	ctx.textBaseline = 'middle';

  	for (var i = scale.chart.data.labels.length - 1; i >= 0; i--) {
  		// Extra pixels out for some label spacing
  		var extra = (i === 0 ? tickBackdropHeight / 2 : 0);
  		var pointLabelPosition = scale.getPointPosition(i, outerDistance + extra + 5);

  		// Keep this in loop since we may support array properties here
  		var pointLabelFontColor = valueAtIndexOrDefault$1(pointLabelOpts.fontColor, i, core_defaults.global.defaultFontColor);
  		ctx.fillStyle = pointLabelFontColor;

  		var angleRadians = scale.getIndexAngle(i);
  		var angle = helpers$1.toDegrees(angleRadians);
  		ctx.textAlign = getTextAlignForAngle(angle);
  		adjustPointPositionForLabelHeight(angle, scale._pointLabelSizes[i], pointLabelPosition);
  		fillText(ctx, scale.pointLabels[i], pointLabelPosition, plFont.lineHeight);
  	}
  	ctx.restore();
  }

  function drawRadiusLine(scale, gridLineOpts, radius, index) {
  	var ctx = scale.ctx;
  	var circular = gridLineOpts.circular;
  	var valueCount = scale.chart.data.labels.length;
  	var lineColor = valueAtIndexOrDefault$1(gridLineOpts.color, index - 1);
  	var lineWidth = valueAtIndexOrDefault$1(gridLineOpts.lineWidth, index - 1);
  	var pointPosition;

  	if ((!circular && !valueCount) || !lineColor || !lineWidth) {
  		return;
  	}

  	ctx.save();
  	ctx.strokeStyle = lineColor;
  	ctx.lineWidth = lineWidth;
  	if (ctx.setLineDash) {
  		ctx.setLineDash(gridLineOpts.borderDash || []);
  		ctx.lineDashOffset = gridLineOpts.borderDashOffset || 0.0;
  	}

  	ctx.beginPath();
  	if (circular) {
  		// Draw circular arcs between the points
  		ctx.arc(scale.xCenter, scale.yCenter, radius, 0, Math.PI * 2);
  	} else {
  		// Draw straight lines connecting each index
  		pointPosition = scale.getPointPosition(0, radius);
  		ctx.moveTo(pointPosition.x, pointPosition.y);

  		for (var i = 1; i < valueCount; i++) {
  			pointPosition = scale.getPointPosition(i, radius);
  			ctx.lineTo(pointPosition.x, pointPosition.y);
  		}
  	}
  	ctx.closePath();
  	ctx.stroke();
  	ctx.restore();
  }

  function numberOrZero(param) {
  	return helpers$1.isNumber(param) ? param : 0;
  }

  var scale_radialLinear = scale_linearbase.extend({
  	setDimensions: function() {
  		var me = this;

  		// Set the unconstrained dimension before label rotation
  		me.width = me.maxWidth;
  		me.height = me.maxHeight;
  		me.paddingTop = getTickBackdropHeight(me.options) / 2;
  		me.xCenter = Math.floor(me.width / 2);
  		me.yCenter = Math.floor((me.height - me.paddingTop) / 2);
  		me.drawingArea = Math.min(me.height - me.paddingTop, me.width) / 2;
  	},

  	determineDataLimits: function() {
  		var me = this;
  		var chart = me.chart;
  		var min = Number.POSITIVE_INFINITY;
  		var max = Number.NEGATIVE_INFINITY;

  		helpers$1.each(chart.data.datasets, function(dataset, datasetIndex) {
  			if (chart.isDatasetVisible(datasetIndex)) {
  				var meta = chart.getDatasetMeta(datasetIndex);

  				helpers$1.each(dataset.data, function(rawValue, index) {
  					var value = +me.getRightValue(rawValue);
  					if (isNaN(value) || meta.data[index].hidden) {
  						return;
  					}

  					min = Math.min(value, min);
  					max = Math.max(value, max);
  				});
  			}
  		});

  		me.min = (min === Number.POSITIVE_INFINITY ? 0 : min);
  		me.max = (max === Number.NEGATIVE_INFINITY ? 0 : max);

  		// Common base implementation to handle ticks.min, ticks.max, ticks.beginAtZero
  		me.handleTickRangeOptions();
  	},

  	// Returns the maximum number of ticks based on the scale dimension
  	_computeTickLimit: function() {
  		return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));
  	},

  	convertTicksToLabels: function() {
  		var me = this;

  		scale_linearbase.prototype.convertTicksToLabels.call(me);

  		// Point labels
  		me.pointLabels = me.chart.data.labels.map(function() {
  			var label = helpers$1.callback(me.options.pointLabels.callback, arguments, me);
  			return label || label === 0 ? label : '';
  		});
  	},

  	getLabelForIndex: function(index, datasetIndex) {
  		return +this.getRightValue(this.chart.data.datasets[datasetIndex].data[index]);
  	},

  	fit: function() {
  		var me = this;
  		var opts = me.options;

  		if (opts.display && opts.pointLabels.display) {
  			fitWithPointLabels(me);
  		} else {
  			me.setCenterPoint(0, 0, 0, 0);
  		}
  	},

  	/**
  	 * Set radius reductions and determine new radius and center point
  	 * @private
  	 */
  	setReductions: function(largestPossibleRadius, furthestLimits, furthestAngles) {
  		var me = this;
  		var radiusReductionLeft = furthestLimits.l / Math.sin(furthestAngles.l);
  		var radiusReductionRight = Math.max(furthestLimits.r - me.width, 0) / Math.sin(furthestAngles.r);
  		var radiusReductionTop = -furthestLimits.t / Math.cos(furthestAngles.t);
  		var radiusReductionBottom = -Math.max(furthestLimits.b - (me.height - me.paddingTop), 0) / Math.cos(furthestAngles.b);

  		radiusReductionLeft = numberOrZero(radiusReductionLeft);
  		radiusReductionRight = numberOrZero(radiusReductionRight);
  		radiusReductionTop = numberOrZero(radiusReductionTop);
  		radiusReductionBottom = numberOrZero(radiusReductionBottom);

  		me.drawingArea = Math.min(
  			Math.floor(largestPossibleRadius - (radiusReductionLeft + radiusReductionRight) / 2),
  			Math.floor(largestPossibleRadius - (radiusReductionTop + radiusReductionBottom) / 2));
  		me.setCenterPoint(radiusReductionLeft, radiusReductionRight, radiusReductionTop, radiusReductionBottom);
  	},

  	setCenterPoint: function(leftMovement, rightMovement, topMovement, bottomMovement) {
  		var me = this;
  		var maxRight = me.width - rightMovement - me.drawingArea;
  		var maxLeft = leftMovement + me.drawingArea;
  		var maxTop = topMovement + me.drawingArea;
  		var maxBottom = (me.height - me.paddingTop) - bottomMovement - me.drawingArea;

  		me.xCenter = Math.floor(((maxLeft + maxRight) / 2) + me.left);
  		me.yCenter = Math.floor(((maxTop + maxBottom) / 2) + me.top + me.paddingTop);
  	},

  	getIndexAngle: function(index) {
  		var chart = this.chart;
  		var angleMultiplier = 360 / chart.data.labels.length;
  		var options = chart.options || {};
  		var startAngle = options.startAngle || 0;

  		// Start from the top instead of right, so remove a quarter of the circle
  		var angle = (index * angleMultiplier + startAngle) % 360;

  		return (angle < 0 ? angle + 360 : angle) * Math.PI * 2 / 360;
  	},

  	getDistanceFromCenterForValue: function(value) {
  		var me = this;

  		if (helpers$1.isNullOrUndef(value)) {
  			return NaN;
  		}

  		// Take into account half font size + the yPadding of the top value
  		var scalingFactor = me.drawingArea / (me.max - me.min);
  		if (me.options.ticks.reverse) {
  			return (me.max - value) * scalingFactor;
  		}
  		return (value - me.min) * scalingFactor;
  	},

  	getPointPosition: function(index, distanceFromCenter) {
  		var me = this;
  		var thisAngle = me.getIndexAngle(index) - (Math.PI / 2);
  		return {
  			x: Math.cos(thisAngle) * distanceFromCenter + me.xCenter,
  			y: Math.sin(thisAngle) * distanceFromCenter + me.yCenter
  		};
  	},

  	getPointPositionForValue: function(index, value) {
  		return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
  	},

  	getBasePosition: function(index) {
  		var me = this;
  		var min = me.min;
  		var max = me.max;

  		return me.getPointPositionForValue(index || 0,
  			me.beginAtZero ? 0 :
  			min < 0 && max < 0 ? max :
  			min > 0 && max > 0 ? min :
  			0);
  	},

  	/**
  	 * @private
  	 */
  	_drawGrid: function() {
  		var me = this;
  		var ctx = me.ctx;
  		var opts = me.options;
  		var gridLineOpts = opts.gridLines;
  		var angleLineOpts = opts.angleLines;
  		var lineWidth = valueOrDefault$c(angleLineOpts.lineWidth, gridLineOpts.lineWidth);
  		var lineColor = valueOrDefault$c(angleLineOpts.color, gridLineOpts.color);
  		var i, offset, position;

  		if (opts.pointLabels.display) {
  			drawPointLabels(me);
  		}

  		if (gridLineOpts.display) {
  			helpers$1.each(me.ticks, function(label, index) {
  				if (index !== 0) {
  					offset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);
  					drawRadiusLine(me, gridLineOpts, offset, index);
  				}
  			});
  		}

  		if (angleLineOpts.display && lineWidth && lineColor) {
  			ctx.save();
  			ctx.lineWidth = lineWidth;
  			ctx.strokeStyle = lineColor;
  			if (ctx.setLineDash) {
  				ctx.setLineDash(resolve$4([angleLineOpts.borderDash, gridLineOpts.borderDash, []]));
  				ctx.lineDashOffset = resolve$4([angleLineOpts.borderDashOffset, gridLineOpts.borderDashOffset, 0.0]);
  			}

  			for (i = me.chart.data.labels.length - 1; i >= 0; i--) {
  				offset = me.getDistanceFromCenterForValue(opts.ticks.reverse ? me.min : me.max);
  				position = me.getPointPosition(i, offset);
  				ctx.beginPath();
  				ctx.moveTo(me.xCenter, me.yCenter);
  				ctx.lineTo(position.x, position.y);
  				ctx.stroke();
  			}

  			ctx.restore();
  		}
  	},

  	/**
  	 * @private
  	 */
  	_drawLabels: function() {
  		var me = this;
  		var ctx = me.ctx;
  		var opts = me.options;
  		var tickOpts = opts.ticks;

  		if (!tickOpts.display) {
  			return;
  		}

  		var startAngle = me.getIndexAngle(0);
  		var tickFont = helpers$1.options._parseFont(tickOpts);
  		var tickFontColor = valueOrDefault$c(tickOpts.fontColor, core_defaults.global.defaultFontColor);
  		var offset, width;

  		ctx.save();
  		ctx.font = tickFont.string;
  		ctx.translate(me.xCenter, me.yCenter);
  		ctx.rotate(startAngle);
  		ctx.textAlign = 'center';
  		ctx.textBaseline = 'middle';

  		helpers$1.each(me.ticks, function(label, index) {
  			if (index === 0 && !tickOpts.reverse) {
  				return;
  			}

  			offset = me.getDistanceFromCenterForValue(me.ticksAsNumbers[index]);

  			if (tickOpts.showLabelBackdrop) {
  				width = ctx.measureText(label).width;
  				ctx.fillStyle = tickOpts.backdropColor;

  				ctx.fillRect(
  					-width / 2 - tickOpts.backdropPaddingX,
  					-offset - tickFont.size / 2 - tickOpts.backdropPaddingY,
  					width + tickOpts.backdropPaddingX * 2,
  					tickFont.size + tickOpts.backdropPaddingY * 2
  				);
  			}

  			ctx.fillStyle = tickFontColor;
  			ctx.fillText(label, 0, -offset);
  		});

  		ctx.restore();
  	},

  	/**
  	 * @private
  	 */
  	_drawTitle: helpers$1.noop
  });

  // INTERNAL: static default options, registered in src/index.js
  var _defaults$3 = defaultConfig$3;
  scale_radialLinear._defaults = _defaults$3;

  var deprecated$1 = helpers$1._deprecated;
  var resolve$5 = helpers$1.options.resolve;
  var valueOrDefault$d = helpers$1.valueOrDefault;

  // Integer constants are from the ES6 spec.
  var MIN_INTEGER = Number.MIN_SAFE_INTEGER || -9007199254740991;
  var MAX_INTEGER = Number.MAX_SAFE_INTEGER || 9007199254740991;

  var INTERVALS = {
  	millisecond: {
  		common: true,
  		size: 1,
  		steps: 1000
  	},
  	second: {
  		common: true,
  		size: 1000,
  		steps: 60
  	},
  	minute: {
  		common: true,
  		size: 60000,
  		steps: 60
  	},
  	hour: {
  		common: true,
  		size: 3600000,
  		steps: 24
  	},
  	day: {
  		common: true,
  		size: 86400000,
  		steps: 30
  	},
  	week: {
  		common: false,
  		size: 604800000,
  		steps: 4
  	},
  	month: {
  		common: true,
  		size: 2.628e9,
  		steps: 12
  	},
  	quarter: {
  		common: false,
  		size: 7.884e9,
  		steps: 4
  	},
  	year: {
  		common: true,
  		size: 3.154e10
  	}
  };

  var UNITS = Object.keys(INTERVALS);

  function sorter(a, b) {
  	return a - b;
  }

  function arrayUnique(items) {
  	var hash = {};
  	var out = [];
  	var i, ilen, item;

  	for (i = 0, ilen = items.length; i < ilen; ++i) {
  		item = items[i];
  		if (!hash[item]) {
  			hash[item] = true;
  			out.push(item);
  		}
  	}

  	return out;
  }

  function getMin(options) {
  	return helpers$1.valueOrDefault(options.time.min, options.ticks.min);
  }

  function getMax(options) {
  	return helpers$1.valueOrDefault(options.time.max, options.ticks.max);
  }

  /**
   * Returns an array of {time, pos} objects used to interpolate a specific `time` or position
   * (`pos`) on the scale, by searching entries before and after the requested value. `pos` is
   * a decimal between 0 and 1: 0 being the start of the scale (left or top) and 1 the other
   * extremity (left + width or top + height). Note that it would be more optimized to directly
   * store pre-computed pixels, but the scale dimensions are not guaranteed at the time we need
   * to create the lookup table. The table ALWAYS contains at least two items: min and max.
   *
   * @param {number[]} timestamps - timestamps sorted from lowest to highest.
   * @param {string} distribution - If 'linear', timestamps will be spread linearly along the min
   * and max range, so basically, the table will contains only two items: {min, 0} and {max, 1}.
   * If 'series', timestamps will be positioned at the same distance from each other. In this
   * case, only timestamps that break the time linearity are registered, meaning that in the
   * best case, all timestamps are linear, the table contains only min and max.
   */
  function buildLookupTable(timestamps, min, max, distribution) {
  	if (distribution === 'linear' || !timestamps.length) {
  		return [
  			{time: min, pos: 0},
  			{time: max, pos: 1}
  		];
  	}

  	var table = [];
  	var items = [min];
  	var i, ilen, prev, curr, next;

  	for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
  		curr = timestamps[i];
  		if (curr > min && curr < max) {
  			items.push(curr);
  		}
  	}

  	items.push(max);

  	for (i = 0, ilen = items.length; i < ilen; ++i) {
  		next = items[i + 1];
  		prev = items[i - 1];
  		curr = items[i];

  		// only add points that breaks the scale linearity
  		if (prev === undefined || next === undefined || Math.round((next + prev) / 2) !== curr) {
  			table.push({time: curr, pos: i / (ilen - 1)});
  		}
  	}

  	return table;
  }

  // @see adapted from https://www.anujgakhar.com/2014/03/01/binary-search-in-javascript/
  function lookup(table, key, value) {
  	var lo = 0;
  	var hi = table.length - 1;
  	var mid, i0, i1;

  	while (lo >= 0 && lo <= hi) {
  		mid = (lo + hi) >> 1;
  		i0 = table[mid - 1] || null;
  		i1 = table[mid];

  		if (!i0) {
  			// given value is outside table (before first item)
  			return {lo: null, hi: i1};
  		} else if (i1[key] < value) {
  			lo = mid + 1;
  		} else if (i0[key] > value) {
  			hi = mid - 1;
  		} else {
  			return {lo: i0, hi: i1};
  		}
  	}

  	// given value is outside table (after last item)
  	return {lo: i1, hi: null};
  }

  /**
   * Linearly interpolates the given source `value` using the table items `skey` values and
   * returns the associated `tkey` value. For example, interpolate(table, 'time', 42, 'pos')
   * returns the position for a timestamp equal to 42. If value is out of bounds, values at
   * index [0, 1] or [n - 1, n] are used for the interpolation.
   */
  function interpolate$1(table, skey, sval, tkey) {
  	var range = lookup(table, skey, sval);

  	// Note: the lookup table ALWAYS contains at least 2 items (min and max)
  	var prev = !range.lo ? table[0] : !range.hi ? table[table.length - 2] : range.lo;
  	var next = !range.lo ? table[1] : !range.hi ? table[table.length - 1] : range.hi;

  	var span = next[skey] - prev[skey];
  	var ratio = span ? (sval - prev[skey]) / span : 0;
  	var offset = (next[tkey] - prev[tkey]) * ratio;

  	return prev[tkey] + offset;
  }

  function toTimestamp(scale, input) {
  	var adapter = scale._adapter;
  	var options = scale.options.time;
  	var parser = options.parser;
  	var format = parser || options.format;
  	var value = input;

  	if (typeof parser === 'function') {
  		value = parser(value);
  	}

  	// Only parse if its not a timestamp already
  	if (!helpers$1.isFinite(value)) {
  		value = typeof format === 'string'
  			? adapter.parse(value, format)
  			: adapter.parse(value);
  	}

  	if (value !== null) {
  		return +value;
  	}

  	// Labels are in an incompatible format and no `parser` has been provided.
  	// The user might still use the deprecated `format` option for parsing.
  	if (!parser && typeof format === 'function') {
  		value = format(input);

  		// `format` could return something else than a timestamp, if so, parse it
  		if (!helpers$1.isFinite(value)) {
  			value = adapter.parse(value);
  		}
  	}

  	return value;
  }

  function parse(scale, input) {
  	if (helpers$1.isNullOrUndef(input)) {
  		return null;
  	}

  	var options = scale.options.time;
  	var value = toTimestamp(scale, scale.getRightValue(input));
  	if (value === null) {
  		return value;
  	}

  	if (options.round) {
  		value = +scale._adapter.startOf(value, options.round);
  	}

  	return value;
  }

  /**
   * Figures out what unit results in an appropriate number of auto-generated ticks
   */
  function determineUnitForAutoTicks(minUnit, min, max, capacity) {
  	var ilen = UNITS.length;
  	var i, interval, factor;

  	for (i = UNITS.indexOf(minUnit); i < ilen - 1; ++i) {
  		interval = INTERVALS[UNITS[i]];
  		factor = interval.steps ? interval.steps : MAX_INTEGER;

  		if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {
  			return UNITS[i];
  		}
  	}

  	return UNITS[ilen - 1];
  }

  /**
   * Figures out what unit to format a set of ticks with
   */
  function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {
  	var i, unit;

  	for (i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--) {
  		unit = UNITS[i];
  		if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {
  			return unit;
  		}
  	}

  	return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
  }

  function determineMajorUnit(unit) {
  	for (var i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i) {
  		if (INTERVALS[UNITS[i]].common) {
  			return UNITS[i];
  		}
  	}
  }

  /**
   * Generates a maximum of `capacity` timestamps between min and max, rounded to the
   * `minor` unit using the given scale time `options`.
   * Important: this method can return ticks outside the min and max range, it's the
   * responsibility of the calling code to clamp values if needed.
   */
  function generate(scale, min, max, capacity) {
  	var adapter = scale._adapter;
  	var options = scale.options;
  	var timeOpts = options.time;
  	var minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, capacity);
  	var stepSize = resolve$5([timeOpts.stepSize, timeOpts.unitStepSize, 1]);
  	var weekday = minor === 'week' ? timeOpts.isoWeekday : false;
  	var first = min;
  	var ticks = [];
  	var time;

  	// For 'week' unit, handle the first day of week option
  	if (weekday) {
  		first = +adapter.startOf(first, 'isoWeek', weekday);
  	}

  	// Align first ticks on unit
  	first = +adapter.startOf(first, weekday ? 'day' : minor);

  	// Prevent browser from freezing in case user options request millions of milliseconds
  	if (adapter.diff(max, min, minor) > 100000 * stepSize) {
  		throw min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor;
  	}

  	for (time = first; time < max; time = +adapter.add(time, stepSize, minor)) {
  		ticks.push(time);
  	}

  	if (time === max || options.bounds === 'ticks') {
  		ticks.push(time);
  	}

  	return ticks;
  }

  /**
   * Returns the start and end offsets from edges in the form of {start, end}
   * where each value is a relative width to the scale and ranges between 0 and 1.
   * They add extra margins on the both sides by scaling down the original scale.
   * Offsets are added when the `offset` option is true.
   */
  function computeOffsets(table, ticks, min, max, options) {
  	var start = 0;
  	var end = 0;
  	var first, last;

  	if (options.offset && ticks.length) {
  		first = interpolate$1(table, 'time', ticks[0], 'pos');
  		if (ticks.length === 1) {
  			start = 1 - first;
  		} else {
  			start = (interpolate$1(table, 'time', ticks[1], 'pos') - first) / 2;
  		}
  		last = interpolate$1(table, 'time', ticks[ticks.length - 1], 'pos');
  		if (ticks.length === 1) {
  			end = last;
  		} else {
  			end = (last - interpolate$1(table, 'time', ticks[ticks.length - 2], 'pos')) / 2;
  		}
  	}

  	return {start: start, end: end, factor: 1 / (start + 1 + end)};
  }

  function setMajorTicks(scale, ticks, map, majorUnit) {
  	var adapter = scale._adapter;
  	var first = +adapter.startOf(ticks[0].value, majorUnit);
  	var last = ticks[ticks.length - 1].value;
  	var major, index;

  	for (major = first; major <= last; major = +adapter.add(major, 1, majorUnit)) {
  		index = map[major];
  		if (index >= 0) {
  			ticks[index].major = true;
  		}
  	}
  	return ticks;
  }

  function ticksFromTimestamps(scale, values, majorUnit) {
  	var ticks = [];
  	var map = {};
  	var ilen = values.length;
  	var i, value;

  	for (i = 0; i < ilen; ++i) {
  		value = values[i];
  		map[value] = i;

  		ticks.push({
  			value: value,
  			major: false
  		});
  	}

  	// We set the major ticks separately from the above loop because calling startOf for every tick
  	// is expensive when there is a large number of ticks
  	return (ilen === 0 || !majorUnit) ? ticks : setMajorTicks(scale, ticks, map, majorUnit);
  }

  var defaultConfig$4 = {
  	position: 'bottom',

  	/**
  	 * Data distribution along the scale:
  	 * - 'linear': data are spread according to their time (distances can vary),
  	 * - 'series': data are spread at the same distance from each other.
  	 * @see https://github.com/chartjs/Chart.js/pull/4507
  	 * @since 2.7.0
  	 */
  	distribution: 'linear',

  	/**
  	 * Scale boundary strategy (bypassed by min/max time options)
  	 * - `data`: make sure data are fully visible, ticks outside are removed
  	 * - `ticks`: make sure ticks are fully visible, data outside are truncated
  	 * @see https://github.com/chartjs/Chart.js/pull/4556
  	 * @since 2.7.0
  	 */
  	bounds: 'data',

  	adapters: {},
  	time: {
  		parser: false, // false == a pattern string from https://momentjs.com/docs/#/parsing/string-format/ or a custom callback that converts its argument to a moment
  		unit: false, // false == automatic or override with week, month, year, etc.
  		round: false, // none, or override with week, month, year, etc.
  		displayFormat: false, // DEPRECATED
  		isoWeekday: false, // override week start day - see https://momentjs.com/docs/#/get-set/iso-weekday/
  		minUnit: 'millisecond',
  		displayFormats: {}
  	},
  	ticks: {
  		autoSkip: false,

  		/**
  		 * Ticks generation input values:
  		 * - 'auto': generates "optimal" ticks based on scale size and time options.
  		 * - 'data': generates ticks from data (including labels from data {t|x|y} objects).
  		 * - 'labels': generates ticks from user given `data.labels` values ONLY.
  		 * @see https://github.com/chartjs/Chart.js/pull/4507
  		 * @since 2.7.0
  		 */
  		source: 'auto',

  		major: {
  			enabled: false
  		}
  	}
  };

  var scale_time = core_scale.extend({
  	initialize: function() {
  		this.mergeTicksOptions();
  		core_scale.prototype.initialize.call(this);
  	},

  	update: function() {
  		var me = this;
  		var options = me.options;
  		var time = options.time || (options.time = {});
  		var adapter = me._adapter = new core_adapters._date(options.adapters.date);

  		// DEPRECATIONS: output a message only one time per update
  		deprecated$1('time scale', time.format, 'time.format', 'time.parser');
  		deprecated$1('time scale', time.min, 'time.min', 'ticks.min');
  		deprecated$1('time scale', time.max, 'time.max', 'ticks.max');

  		// Backward compatibility: before introducing adapter, `displayFormats` was
  		// supposed to contain *all* unit/string pairs but this can't be resolved
  		// when loading the scale (adapters are loaded afterward), so let's populate
  		// missing formats on update
  		helpers$1.mergeIf(time.displayFormats, adapter.formats());

  		return core_scale.prototype.update.apply(me, arguments);
  	},

  	/**
  	 * Allows data to be referenced via 't' attribute
  	 */
  	getRightValue: function(rawValue) {
  		if (rawValue && rawValue.t !== undefined) {
  			rawValue = rawValue.t;
  		}
  		return core_scale.prototype.getRightValue.call(this, rawValue);
  	},

  	determineDataLimits: function() {
  		var me = this;
  		var chart = me.chart;
  		var adapter = me._adapter;
  		var options = me.options;
  		var unit = options.time.unit || 'day';
  		var min = MAX_INTEGER;
  		var max = MIN_INTEGER;
  		var timestamps = [];
  		var datasets = [];
  		var labels = [];
  		var i, j, ilen, jlen, data, timestamp, labelsAdded;
  		var dataLabels = me._getLabels();

  		for (i = 0, ilen = dataLabels.length; i < ilen; ++i) {
  			labels.push(parse(me, dataLabels[i]));
  		}

  		for (i = 0, ilen = (chart.data.datasets || []).length; i < ilen; ++i) {
  			if (chart.isDatasetVisible(i)) {
  				data = chart.data.datasets[i].data;

  				// Let's consider that all data have the same format.
  				if (helpers$1.isObject(data[0])) {
  					datasets[i] = [];

  					for (j = 0, jlen = data.length; j < jlen; ++j) {
  						timestamp = parse(me, data[j]);
  						timestamps.push(timestamp);
  						datasets[i][j] = timestamp;
  					}
  				} else {
  					datasets[i] = labels.slice(0);
  					if (!labelsAdded) {
  						timestamps = timestamps.concat(labels);
  						labelsAdded = true;
  					}
  				}
  			} else {
  				datasets[i] = [];
  			}
  		}

  		if (labels.length) {
  			min = Math.min(min, labels[0]);
  			max = Math.max(max, labels[labels.length - 1]);
  		}

  		if (timestamps.length) {
  			timestamps = ilen > 1 ? arrayUnique(timestamps).sort(sorter) : timestamps.sort(sorter);
  			min = Math.min(min, timestamps[0]);
  			max = Math.max(max, timestamps[timestamps.length - 1]);
  		}

  		min = parse(me, getMin(options)) || min;
  		max = parse(me, getMax(options)) || max;

  		// In case there is no valid min/max, set limits based on unit time option
  		min = min === MAX_INTEGER ? +adapter.startOf(Date.now(), unit) : min;
  		max = max === MIN_INTEGER ? +adapter.endOf(Date.now(), unit) + 1 : max;

  		// Make sure that max is strictly higher than min (required by the lookup table)
  		me.min = Math.min(min, max);
  		me.max = Math.max(min + 1, max);

  		// PRIVATE
  		me._table = [];
  		me._timestamps = {
  			data: timestamps,
  			datasets: datasets,
  			labels: labels
  		};
  	},

  	buildTicks: function() {
  		var me = this;
  		var min = me.min;
  		var max = me.max;
  		var options = me.options;
  		var tickOpts = options.ticks;
  		var timeOpts = options.time;
  		var timestamps = me._timestamps;
  		var ticks = [];
  		var capacity = me.getLabelCapacity(min);
  		var source = tickOpts.source;
  		var distribution = options.distribution;
  		var i, ilen, timestamp;

  		if (source === 'data' || (source === 'auto' && distribution === 'series')) {
  			timestamps = timestamps.data;
  		} else if (source === 'labels') {
  			timestamps = timestamps.labels;
  		} else {
  			timestamps = generate(me, min, max, capacity);
  		}

  		if (options.bounds === 'ticks' && timestamps.length) {
  			min = timestamps[0];
  			max = timestamps[timestamps.length - 1];
  		}

  		// Enforce limits with user min/max options
  		min = parse(me, getMin(options)) || min;
  		max = parse(me, getMax(options)) || max;

  		// Remove ticks outside the min/max range
  		for (i = 0, ilen = timestamps.length; i < ilen; ++i) {
  			timestamp = timestamps[i];
  			if (timestamp >= min && timestamp <= max) {
  				ticks.push(timestamp);
  			}
  		}

  		me.min = min;
  		me.max = max;

  		// PRIVATE
  		// determineUnitForFormatting relies on the number of ticks so we don't use it when
  		// autoSkip is enabled because we don't yet know what the final number of ticks will be
  		me._unit = timeOpts.unit || (tickOpts.autoSkip
  			? determineUnitForAutoTicks(timeOpts.minUnit, me.min, me.max, capacity)
  			: determineUnitForFormatting(me, ticks.length, timeOpts.minUnit, me.min, me.max));
  		me._majorUnit = !tickOpts.major.enabled || me._unit === 'year' ? undefined
  			: determineMajorUnit(me._unit);
  		me._table = buildLookupTable(me._timestamps.data, min, max, distribution);
  		me._offsets = computeOffsets(me._table, ticks, min, max, options);

  		if (tickOpts.reverse) {
  			ticks.reverse();
  		}

  		return ticksFromTimestamps(me, ticks, me._majorUnit);
  	},

  	getLabelForIndex: function(index, datasetIndex) {
  		var me = this;
  		var adapter = me._adapter;
  		var data = me.chart.data;
  		var timeOpts = me.options.time;
  		var label = data.labels && index < data.labels.length ? data.labels[index] : '';
  		var value = data.datasets[datasetIndex].data[index];

  		if (helpers$1.isObject(value)) {
  			label = me.getRightValue(value);
  		}
  		if (timeOpts.tooltipFormat) {
  			return adapter.format(toTimestamp(me, label), timeOpts.tooltipFormat);
  		}
  		if (typeof label === 'string') {
  			return label;
  		}
  		return adapter.format(toTimestamp(me, label), timeOpts.displayFormats.datetime);
  	},

  	/**
  	 * Function to format an individual tick mark
  	 * @private
  	 */
  	tickFormatFunction: function(time, index, ticks, format) {
  		var me = this;
  		var adapter = me._adapter;
  		var options = me.options;
  		var formats = options.time.displayFormats;
  		var minorFormat = formats[me._unit];
  		var majorUnit = me._majorUnit;
  		var majorFormat = formats[majorUnit];
  		var tick = ticks[index];
  		var tickOpts = options.ticks;
  		var major = majorUnit && majorFormat && tick && tick.major;
  		var label = adapter.format(time, format ? format : major ? majorFormat : minorFormat);
  		var nestedTickOpts = major ? tickOpts.major : tickOpts.minor;
  		var formatter = resolve$5([
  			nestedTickOpts.callback,
  			nestedTickOpts.userCallback,
  			tickOpts.callback,
  			tickOpts.userCallback
  		]);

  		return formatter ? formatter(label, index, ticks) : label;
  	},

  	convertTicksToLabels: function(ticks) {
  		var labels = [];
  		var i, ilen;

  		for (i = 0, ilen = ticks.length; i < ilen; ++i) {
  			labels.push(this.tickFormatFunction(ticks[i].value, i, ticks));
  		}

  		return labels;
  	},

  	/**
  	 * @private
  	 */
  	getPixelForOffset: function(time) {
  		var me = this;
  		var offsets = me._offsets;
  		var pos = interpolate$1(me._table, 'time', time, 'pos');
  		return me.getPixelForDecimal((offsets.start + pos) * offsets.factor);
  	},

  	getPixelForValue: function(value, index, datasetIndex) {
  		var me = this;
  		var time = null;

  		if (index !== undefined && datasetIndex !== undefined) {
  			time = me._timestamps.datasets[datasetIndex][index];
  		}

  		if (time === null) {
  			time = parse(me, value);
  		}

  		if (time !== null) {
  			return me.getPixelForOffset(time);
  		}
  	},

  	getPixelForTick: function(index) {
  		var ticks = this.getTicks();
  		return index >= 0 && index < ticks.length ?
  			this.getPixelForOffset(ticks[index].value) :
  			null;
  	},

  	getValueForPixel: function(pixel) {
  		var me = this;
  		var offsets = me._offsets;
  		var pos = me.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
  		var time = interpolate$1(me._table, 'pos', pos, 'time');

  		// DEPRECATION, we should return time directly
  		return me._adapter._create(time);
  	},

  	/**
  	 * @private
  	 */
  	_getLabelSize: function(label) {
  		var me = this;
  		var ticksOpts = me.options.ticks;
  		var tickLabelWidth = me.ctx.measureText(label).width;
  		var angle = helpers$1.toRadians(me.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
  		var cosRotation = Math.cos(angle);
  		var sinRotation = Math.sin(angle);
  		var tickFontSize = valueOrDefault$d(ticksOpts.fontSize, core_defaults.global.defaultFontSize);

  		return {
  			w: (tickLabelWidth * cosRotation) + (tickFontSize * sinRotation),
  			h: (tickLabelWidth * sinRotation) + (tickFontSize * cosRotation)
  		};
  	},

  	/**
  	 * Crude approximation of what the label width might be
  	 * @private
  	 */
  	getLabelWidth: function(label) {
  		return this._getLabelSize(label).w;
  	},

  	/**
  	 * @private
  	 */
  	getLabelCapacity: function(exampleTime) {
  		var me = this;
  		var timeOpts = me.options.time;
  		var displayFormats = timeOpts.displayFormats;

  		// pick the longest format (milliseconds) for guestimation
  		var format = displayFormats[timeOpts.unit] || displayFormats.millisecond;
  		var exampleLabel = me.tickFormatFunction(exampleTime, 0, ticksFromTimestamps(me, [exampleTime], me._majorUnit), format);
  		var size = me._getLabelSize(exampleLabel);
  		var capacity = Math.floor(me.isHorizontal() ? me.width / size.w : me.height / size.h);

  		if (me.options.offset) {
  			capacity--;
  		}

  		return capacity > 0 ? capacity : 1;
  	}
  });

  // INTERNAL: static default options, registered in src/index.js
  var _defaults$4 = defaultConfig$4;
  scale_time._defaults = _defaults$4;

  var scales = {
  	category: scale_category,
  	linear: scale_linear,
  	logarithmic: scale_logarithmic,
  	radialLinear: scale_radialLinear,
  	time: scale_time
  };

  var FORMATS = {
  	datetime: 'MMM D, YYYY, h:mm:ss a',
  	millisecond: 'h:mm:ss.SSS a',
  	second: 'h:mm:ss a',
  	minute: 'h:mm a',
  	hour: 'hA',
  	day: 'MMM D',
  	week: 'll',
  	month: 'MMM YYYY',
  	quarter: '[Q]Q - YYYY',
  	year: 'YYYY'
  };

  core_adapters._date.override(typeof moment === 'function' ? {
  	_id: 'moment', // DEBUG ONLY

  	formats: function() {
  		return FORMATS;
  	},

  	parse: function(value, format) {
  		if (typeof value === 'string' && typeof format === 'string') {
  			value = moment(value, format);
  		} else if (!(value instanceof moment)) {
  			value = moment(value);
  		}
  		return value.isValid() ? value.valueOf() : null;
  	},

  	format: function(time, format) {
  		return moment(time).format(format);
  	},

  	add: function(time, amount, unit) {
  		return moment(time).add(amount, unit).valueOf();
  	},

  	diff: function(max, min, unit) {
  		return moment(max).diff(moment(min), unit);
  	},

  	startOf: function(time, unit, weekday) {
  		time = moment(time);
  		if (unit === 'isoWeek') {
  			return time.isoWeekday(weekday).valueOf();
  		}
  		return time.startOf(unit).valueOf();
  	},

  	endOf: function(time, unit) {
  		return moment(time).endOf(unit).valueOf();
  	},

  	// DEPRECATIONS

  	/**
  	 * Provided for backward compatibility with scale.getValueForPixel().
  	 * @deprecated since version 2.8.0
  	 * @todo remove at version 3
  	 * @private
  	 */
  	_create: function(time) {
  		return moment(time);
  	},
  } : {});

  core_defaults._set('global', {
  	plugins: {
  		filler: {
  			propagate: true
  		}
  	}
  });

  var mappers = {
  	dataset: function(source) {
  		var index = source.fill;
  		var chart = source.chart;
  		var meta = chart.getDatasetMeta(index);
  		var visible = meta && chart.isDatasetVisible(index);
  		var points = (visible && meta.dataset._children) || [];
  		var length = points.length || 0;

  		return !length ? null : function(point, i) {
  			return (i < length && points[i]._view) || null;
  		};
  	},

  	boundary: function(source) {
  		var boundary = source.boundary;
  		var x = boundary ? boundary.x : null;
  		var y = boundary ? boundary.y : null;

  		if (helpers$1.isArray(boundary)) {
  			return function(point, i) {
  				return boundary[i];
  			};
  		}

  		return function(point) {
  			return {
  				x: x === null ? point.x : x,
  				y: y === null ? point.y : y,
  			};
  		};
  	}
  };

  // @todo if (fill[0] === '#')
  function decodeFill(el, index, count) {
  	var model = el._model || {};
  	var fill = model.fill;
  	var target;

  	if (fill === undefined) {
  		fill = !!model.backgroundColor;
  	}

  	if (fill === false || fill === null) {
  		return false;
  	}

  	if (fill === true) {
  		return 'origin';
  	}

  	target = parseFloat(fill, 10);
  	if (isFinite(target) && Math.floor(target) === target) {
  		if (fill[0] === '-' || fill[0] === '+') {
  			target = index + target;
  		}

  		if (target === index || target < 0 || target >= count) {
  			return false;
  		}

  		return target;
  	}

  	switch (fill) {
  	// compatibility
  	case 'bottom':
  		return 'start';
  	case 'top':
  		return 'end';
  	case 'zero':
  		return 'origin';
  	// supported boundaries
  	case 'origin':
  	case 'start':
  	case 'end':
  		return fill;
  	// invalid fill values
  	default:
  		return false;
  	}
  }

  function computeLinearBoundary(source) {
  	var model = source.el._model || {};
  	var scale = source.el._scale || {};
  	var fill = source.fill;
  	var target = null;
  	var horizontal;

  	if (isFinite(fill)) {
  		return null;
  	}

  	// Backward compatibility: until v3, we still need to support boundary values set on
  	// the model (scaleTop, scaleBottom and scaleZero) because some external plugins and
  	// controllers might still use it (e.g. the Smith chart).

  	if (fill === 'start') {
  		target = model.scaleBottom === undefined ? scale.bottom : model.scaleBottom;
  	} else if (fill === 'end') {
  		target = model.scaleTop === undefined ? scale.top : model.scaleTop;
  	} else if (model.scaleZero !== undefined) {
  		target = model.scaleZero;
  	} else if (scale.getBasePixel) {
  		target = scale.getBasePixel();
  	}

  	if (target !== undefined && target !== null) {
  		if (target.x !== undefined && target.y !== undefined) {
  			return target;
  		}

  		if (helpers$1.isFinite(target)) {
  			horizontal = scale.isHorizontal();
  			return {
  				x: horizontal ? target : null,
  				y: horizontal ? null : target
  			};
  		}
  	}

  	return null;
  }

  function computeCircularBoundary(source) {
  	var scale = source.el._scale;
  	var options = scale.options;
  	var length = scale.chart.data.labels.length;
  	var fill = source.fill;
  	var target = [];
  	var start, end, center, i, point;

  	if (!length) {
  		return null;
  	}

  	start = options.ticks.reverse ? scale.max : scale.min;
  	end = options.ticks.reverse ? scale.min : scale.max;
  	center = scale.getPointPositionForValue(0, start);
  	for (i = 0; i < length; ++i) {
  		point = fill === 'start' || fill === 'end'
  			? scale.getPointPositionForValue(i, fill === 'start' ? start : end)
  			: scale.getBasePosition(i);
  		if (options.gridLines.circular) {
  			point.cx = center.x;
  			point.cy = center.y;
  			point.angle = scale.getIndexAngle(i) - Math.PI / 2;
  		}
  		target.push(point);
  	}
  	return target;
  }

  function computeBoundary(source) {
  	var scale = source.el._scale || {};

  	if (scale.getPointPositionForValue) {
  		return computeCircularBoundary(source);
  	}
  	return computeLinearBoundary(source);
  }

  function resolveTarget(sources, index, propagate) {
  	var source = sources[index];
  	var fill = source.fill;
  	var visited = [index];
  	var target;

  	if (!propagate) {
  		return fill;
  	}

  	while (fill !== false && visited.indexOf(fill) === -1) {
  		if (!isFinite(fill)) {
  			return fill;
  		}

  		target = sources[fill];
  		if (!target) {
  			return false;
  		}

  		if (target.visible) {
  			return fill;
  		}

  		visited.push(fill);
  		fill = target.fill;
  	}

  	return false;
  }

  function createMapper(source) {
  	var fill = source.fill;
  	var type = 'dataset';

  	if (fill === false) {
  		return null;
  	}

  	if (!isFinite(fill)) {
  		type = 'boundary';
  	}

  	return mappers[type](source);
  }

  function isDrawable(point) {
  	return point && !point.skip;
  }

  function drawArea(ctx, curve0, curve1, len0, len1) {
  	var i, cx, cy, r;

  	if (!len0 || !len1) {
  		return;
  	}

  	// building first area curve (normal)
  	ctx.moveTo(curve0[0].x, curve0[0].y);
  	for (i = 1; i < len0; ++i) {
  		helpers$1.canvas.lineTo(ctx, curve0[i - 1], curve0[i]);
  	}

  	if (curve1[0].angle !== undefined) {
  		cx = curve1[0].cx;
  		cy = curve1[0].cy;
  		r = Math.sqrt(Math.pow(curve1[0].x - cx, 2) + Math.pow(curve1[0].y - cy, 2));
  		for (i = len1 - 1; i > 0; --i) {
  			ctx.arc(cx, cy, r, curve1[i].angle, curve1[i - 1].angle, true);
  		}
  		return;
  	}

  	// joining the two area curves
  	ctx.lineTo(curve1[len1 - 1].x, curve1[len1 - 1].y);

  	// building opposite area curve (reverse)
  	for (i = len1 - 1; i > 0; --i) {
  		helpers$1.canvas.lineTo(ctx, curve1[i], curve1[i - 1], true);
  	}
  }

  function doFill(ctx, points, mapper, view, color, loop) {
  	var count = points.length;
  	var span = view.spanGaps;
  	var curve0 = [];
  	var curve1 = [];
  	var len0 = 0;
  	var len1 = 0;
  	var i, ilen, index, p0, p1, d0, d1, loopOffset;

  	ctx.beginPath();

  	for (i = 0, ilen = count; i < ilen; ++i) {
  		index = i % count;
  		p0 = points[index]._view;
  		p1 = mapper(p0, index, view);
  		d0 = isDrawable(p0);
  		d1 = isDrawable(p1);

  		if (loop && loopOffset === undefined && d0) {
  			loopOffset = i + 1;
  			ilen = count + loopOffset;
  		}

  		if (d0 && d1) {
  			len0 = curve0.push(p0);
  			len1 = curve1.push(p1);
  		} else if (len0 && len1) {
  			if (!span) {
  				drawArea(ctx, curve0, curve1, len0, len1);
  				len0 = len1 = 0;
  				curve0 = [];
  				curve1 = [];
  			} else {
  				if (d0) {
  					curve0.push(p0);
  				}
  				if (d1) {
  					curve1.push(p1);
  				}
  			}
  		}
  	}

  	drawArea(ctx, curve0, curve1, len0, len1);

  	ctx.closePath();
  	ctx.fillStyle = color;
  	ctx.fill();
  }

  var plugin_filler = {
  	id: 'filler',

  	afterDatasetsUpdate: function(chart, options) {
  		var count = (chart.data.datasets || []).length;
  		var propagate = options.propagate;
  		var sources = [];
  		var meta, i, el, source;

  		for (i = 0; i < count; ++i) {
  			meta = chart.getDatasetMeta(i);
  			el = meta.dataset;
  			source = null;

  			if (el && el._model && el instanceof elements.Line) {
  				source = {
  					visible: chart.isDatasetVisible(i),
  					fill: decodeFill(el, i, count),
  					chart: chart,
  					el: el
  				};
  			}

  			meta.$filler = source;
  			sources.push(source);
  		}

  		for (i = 0; i < count; ++i) {
  			source = sources[i];
  			if (!source) {
  				continue;
  			}

  			source.fill = resolveTarget(sources, i, propagate);
  			source.boundary = computeBoundary(source);
  			source.mapper = createMapper(source);
  		}
  	},

  	beforeDatasetsDraw: function(chart) {
  		var metasets = chart._getSortedVisibleDatasetMetas();
  		var ctx = chart.ctx;
  		var meta, i, el, view, points, mapper, color;

  		for (i = metasets.length - 1; i >= 0; --i) {
  			meta = metasets[i].$filler;

  			if (!meta || !meta.visible) {
  				continue;
  			}

  			el = meta.el;
  			view = el._view;
  			points = el._children || [];
  			mapper = meta.mapper;
  			color = view.backgroundColor || core_defaults.global.defaultColor;

  			if (mapper && color && points.length) {
  				helpers$1.canvas.clipArea(ctx, chart.chartArea);
  				doFill(ctx, points, mapper, view, color, el._loop);
  				helpers$1.canvas.unclipArea(ctx);
  			}
  		}
  	}
  };

  var getRtlHelper$1 = helpers$1.rtl.getRtlAdapter;
  var noop$1 = helpers$1.noop;
  var valueOrDefault$e = helpers$1.valueOrDefault;

  core_defaults._set('global', {
  	legend: {
  		display: true,
  		position: 'top',
  		align: 'center',
  		fullWidth: true,
  		reverse: false,
  		weight: 1000,

  		// a callback that will handle
  		onClick: function(e, legendItem) {
  			var index = legendItem.datasetIndex;
  			var ci = this.chart;
  			var meta = ci.getDatasetMeta(index);

  			// See controller.isDatasetVisible comment
  			meta.hidden = meta.hidden === null ? !ci.data.datasets[index].hidden : null;

  			// We hid a dataset ... rerender the chart
  			ci.update();
  		},

  		onHover: null,
  		onLeave: null,

  		labels: {
  			boxWidth: 40,
  			padding: 10,
  			// Generates labels shown in the legend
  			// Valid properties to return:
  			// text : text to display
  			// fillStyle : fill of coloured box
  			// strokeStyle: stroke of coloured box
  			// hidden : if this legend item refers to a hidden item
  			// lineCap : cap style for line
  			// lineDash
  			// lineDashOffset :
  			// lineJoin :
  			// lineWidth :
  			generateLabels: function(chart) {
  				var datasets = chart.data.datasets;
  				var options = chart.options.legend || {};
  				var usePointStyle = options.labels && options.labels.usePointStyle;

  				return chart._getSortedDatasetMetas().map(function(meta) {
  					var style = meta.controller.getStyle(usePointStyle ? 0 : undefined);

  					return {
  						text: datasets[meta.index].label,
  						fillStyle: style.backgroundColor,
  						hidden: !chart.isDatasetVisible(meta.index),
  						lineCap: style.borderCapStyle,
  						lineDash: style.borderDash,
  						lineDashOffset: style.borderDashOffset,
  						lineJoin: style.borderJoinStyle,
  						lineWidth: style.borderWidth,
  						strokeStyle: style.borderColor,
  						pointStyle: style.pointStyle,
  						rotation: style.rotation,

  						// Below is extra data used for toggling the datasets
  						datasetIndex: meta.index
  					};
  				}, this);
  			}
  		}
  	},

  	legendCallback: function(chart) {
  		var list = document.createElement('ul');
  		var datasets = chart.data.datasets;
  		var i, ilen, listItem, listItemSpan;

  		list.setAttribute('class', chart.id + '-legend');

  		for (i = 0, ilen = datasets.length; i < ilen; i++) {
  			listItem = list.appendChild(document.createElement('li'));
  			listItemSpan = listItem.appendChild(document.createElement('span'));
  			listItemSpan.style.backgroundColor = datasets[i].backgroundColor;
  			if (datasets[i].label) {
  				listItem.appendChild(document.createTextNode(datasets[i].label));
  			}
  		}

  		return list.outerHTML;
  	}
  });

  /**
   * Helper function to get the box width based on the usePointStyle option
   * @param {object} labelopts - the label options on the legend
   * @param {number} fontSize - the label font size
   * @return {number} width of the color box area
   */
  function getBoxWidth(labelOpts, fontSize) {
  	return labelOpts.usePointStyle && labelOpts.boxWidth > fontSize ?
  		fontSize :
  		labelOpts.boxWidth;
  }

  /**
   * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!
   */
  var Legend = core_element.extend({

  	initialize: function(config) {
  		var me = this;
  		helpers$1.extend(me, config);

  		// Contains hit boxes for each dataset (in dataset order)
  		me.legendHitBoxes = [];

  		/**
   		 * @private
   		 */
  		me._hoveredItem = null;

  		// Are we in doughnut mode which has a different data type
  		me.doughnutMode = false;
  	},

  	// These methods are ordered by lifecycle. Utilities then follow.
  	// Any function defined here is inherited by all legend types.
  	// Any function can be extended by the legend type

  	beforeUpdate: noop$1,
  	update: function(maxWidth, maxHeight, margins) {
  		var me = this;

  		// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
  		me.beforeUpdate();

  		// Absorb the master measurements
  		me.maxWidth = maxWidth;
  		me.maxHeight = maxHeight;
  		me.margins = margins;

  		// Dimensions
  		me.beforeSetDimensions();
  		me.setDimensions();
  		me.afterSetDimensions();
  		// Labels
  		me.beforeBuildLabels();
  		me.buildLabels();
  		me.afterBuildLabels();

  		// Fit
  		me.beforeFit();
  		me.fit();
  		me.afterFit();
  		//
  		me.afterUpdate();

  		return me.minSize;
  	},
  	afterUpdate: noop$1,

  	//

  	beforeSetDimensions: noop$1,
  	setDimensions: function() {
  		var me = this;
  		// Set the unconstrained dimension before label rotation
  		if (me.isHorizontal()) {
  			// Reset position before calculating rotation
  			me.width = me.maxWidth;
  			me.left = 0;
  			me.right = me.width;
  		} else {
  			me.height = me.maxHeight;

  			// Reset position before calculating rotation
  			me.top = 0;
  			me.bottom = me.height;
  		}

  		// Reset padding
  		me.paddingLeft = 0;
  		me.paddingTop = 0;
  		me.paddingRight = 0;
  		me.paddingBottom = 0;

  		// Reset minSize
  		me.minSize = {
  			width: 0,
  			height: 0
  		};
  	},
  	afterSetDimensions: noop$1,

  	//

  	beforeBuildLabels: noop$1,
  	buildLabels: function() {
  		var me = this;
  		var labelOpts = me.options.labels || {};
  		var legendItems = helpers$1.callback(labelOpts.generateLabels, [me.chart], me) || [];

  		if (labelOpts.filter) {
  			legendItems = legendItems.filter(function(item) {
  				return labelOpts.filter(item, me.chart.data);
  			});
  		}

  		if (me.options.reverse) {
  			legendItems.reverse();
  		}

  		me.legendItems = legendItems;
  	},
  	afterBuildLabels: noop$1,

  	//

  	beforeFit: noop$1,
  	fit: function() {
  		var me = this;
  		var opts = me.options;
  		var labelOpts = opts.labels;
  		var display = opts.display;

  		var ctx = me.ctx;

  		var labelFont = helpers$1.options._parseFont(labelOpts);
  		var fontSize = labelFont.size;

  		// Reset hit boxes
  		var hitboxes = me.legendHitBoxes = [];

  		var minSize = me.minSize;
  		var isHorizontal = me.isHorizontal();

  		if (isHorizontal) {
  			minSize.width = me.maxWidth; // fill all the width
  			minSize.height = display ? 10 : 0;
  		} else {
  			minSize.width = display ? 10 : 0;
  			minSize.height = me.maxHeight; // fill all the height
  		}

  		// Increase sizes here
  		if (!display) {
  			me.width = minSize.width = me.height = minSize.height = 0;
  			return;
  		}
  		ctx.font = labelFont.string;

  		if (isHorizontal) {
  			// Labels

  			// Width of each line of legend boxes. Labels wrap onto multiple lines when there are too many to fit on one
  			var lineWidths = me.lineWidths = [0];
  			var totalHeight = 0;

  			ctx.textAlign = 'left';
  			ctx.textBaseline = 'middle';

  			helpers$1.each(me.legendItems, function(legendItem, i) {
  				var boxWidth = getBoxWidth(labelOpts, fontSize);
  				var width = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;

  				if (i === 0 || lineWidths[lineWidths.length - 1] + width + 2 * labelOpts.padding > minSize.width) {
  					totalHeight += fontSize + labelOpts.padding;
  					lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;
  				}

  				// Store the hitbox width and height here. Final position will be updated in `draw`
  				hitboxes[i] = {
  					left: 0,
  					top: 0,
  					width: width,
  					height: fontSize
  				};

  				lineWidths[lineWidths.length - 1] += width + labelOpts.padding;
  			});

  			minSize.height += totalHeight;

  		} else {
  			var vPadding = labelOpts.padding;
  			var columnWidths = me.columnWidths = [];
  			var columnHeights = me.columnHeights = [];
  			var totalWidth = labelOpts.padding;
  			var currentColWidth = 0;
  			var currentColHeight = 0;

  			helpers$1.each(me.legendItems, function(legendItem, i) {
  				var boxWidth = getBoxWidth(labelOpts, fontSize);
  				var itemWidth = boxWidth + (fontSize / 2) + ctx.measureText(legendItem.text).width;

  				// If too tall, go to new column
  				if (i > 0 && currentColHeight + fontSize + 2 * vPadding > minSize.height) {
  					totalWidth += currentColWidth + labelOpts.padding;
  					columnWidths.push(currentColWidth); // previous column width
  					columnHeights.push(currentColHeight);
  					currentColWidth = 0;
  					currentColHeight = 0;
  				}

  				// Get max width
  				currentColWidth = Math.max(currentColWidth, itemWidth);
  				currentColHeight += fontSize + vPadding;

  				// Store the hitbox width and height here. Final position will be updated in `draw`
  				hitboxes[i] = {
  					left: 0,
  					top: 0,
  					width: itemWidth,
  					height: fontSize
  				};
  			});

  			totalWidth += currentColWidth;
  			columnWidths.push(currentColWidth);
  			columnHeights.push(currentColHeight);
  			minSize.width += totalWidth;
  		}

  		me.width = minSize.width;
  		me.height = minSize.height;
  	},
  	afterFit: noop$1,

  	// Shared Methods
  	isHorizontal: function() {
  		return this.options.position === 'top' || this.options.position === 'bottom';
  	},

  	// Actually draw the legend on the canvas
  	draw: function() {
  		var me = this;
  		var opts = me.options;
  		var labelOpts = opts.labels;
  		var globalDefaults = core_defaults.global;
  		var defaultColor = globalDefaults.defaultColor;
  		var lineDefault = globalDefaults.elements.line;
  		var legendHeight = me.height;
  		var columnHeights = me.columnHeights;
  		var legendWidth = me.width;
  		var lineWidths = me.lineWidths;

  		if (!opts.display) {
  			return;
  		}

  		var rtlHelper = getRtlHelper$1(opts.rtl, me.left, me.minSize.width);
  		var ctx = me.ctx;
  		var fontColor = valueOrDefault$e(labelOpts.fontColor, globalDefaults.defaultFontColor);
  		var labelFont = helpers$1.options._parseFont(labelOpts);
  		var fontSize = labelFont.size;
  		var cursor;

  		// Canvas setup
  		ctx.textAlign = rtlHelper.textAlign('left');
  		ctx.textBaseline = 'middle';
  		ctx.lineWidth = 0.5;
  		ctx.strokeStyle = fontColor; // for strikethrough effect
  		ctx.fillStyle = fontColor; // render in correct colour
  		ctx.font = labelFont.string;

  		var boxWidth = getBoxWidth(labelOpts, fontSize);
  		var hitboxes = me.legendHitBoxes;

  		// current position
  		var drawLegendBox = function(x, y, legendItem) {
  			if (isNaN(boxWidth) || boxWidth <= 0) {
  				return;
  			}

  			// Set the ctx for the box
  			ctx.save();

  			var lineWidth = valueOrDefault$e(legendItem.lineWidth, lineDefault.borderWidth);
  			ctx.fillStyle = valueOrDefault$e(legendItem.fillStyle, defaultColor);
  			ctx.lineCap = valueOrDefault$e(legendItem.lineCap, lineDefault.borderCapStyle);
  			ctx.lineDashOffset = valueOrDefault$e(legendItem.lineDashOffset, lineDefault.borderDashOffset);
  			ctx.lineJoin = valueOrDefault$e(legendItem.lineJoin, lineDefault.borderJoinStyle);
  			ctx.lineWidth = lineWidth;
  			ctx.strokeStyle = valueOrDefault$e(legendItem.strokeStyle, defaultColor);

  			if (ctx.setLineDash) {
  				// IE 9 and 10 do not support line dash
  				ctx.setLineDash(valueOrDefault$e(legendItem.lineDash, lineDefault.borderDash));
  			}

  			if (labelOpts && labelOpts.usePointStyle) {
  				// Recalculate x and y for drawPoint() because its expecting
  				// x and y to be center of figure (instead of top left)
  				var radius = boxWidth * Math.SQRT2 / 2;
  				var centerX = rtlHelper.xPlus(x, boxWidth / 2);
  				var centerY = y + fontSize / 2;

  				// Draw pointStyle as legend symbol
  				helpers$1.canvas.drawPoint(ctx, legendItem.pointStyle, radius, centerX, centerY, legendItem.rotation);
  			} else {
  				// Draw box as legend symbol
  				ctx.fillRect(rtlHelper.leftForLtr(x, boxWidth), y, boxWidth, fontSize);
  				if (lineWidth !== 0) {
  					ctx.strokeRect(rtlHelper.leftForLtr(x, boxWidth), y, boxWidth, fontSize);
  				}
  			}

  			ctx.restore();
  		};

  		var fillText = function(x, y, legendItem, textWidth) {
  			var halfFontSize = fontSize / 2;
  			var xLeft = rtlHelper.xPlus(x, boxWidth + halfFontSize);
  			var yMiddle = y + halfFontSize;

  			ctx.fillText(legendItem.text, xLeft, yMiddle);

  			if (legendItem.hidden) {
  				// Strikethrough the text if hidden
  				ctx.beginPath();
  				ctx.lineWidth = 2;
  				ctx.moveTo(xLeft, yMiddle);
  				ctx.lineTo(rtlHelper.xPlus(xLeft, textWidth), yMiddle);
  				ctx.stroke();
  			}
  		};

  		var alignmentOffset = function(dimension, blockSize) {
  			switch (opts.align) {
  			case 'start':
  				return labelOpts.padding;
  			case 'end':
  				return dimension - blockSize;
  			default: // center
  				return (dimension - blockSize + labelOpts.padding) / 2;
  			}
  		};

  		// Horizontal
  		var isHorizontal = me.isHorizontal();
  		if (isHorizontal) {
  			cursor = {
  				x: me.left + alignmentOffset(legendWidth, lineWidths[0]),
  				y: me.top + labelOpts.padding,
  				line: 0
  			};
  		} else {
  			cursor = {
  				x: me.left + labelOpts.padding,
  				y: me.top + alignmentOffset(legendHeight, columnHeights[0]),
  				line: 0
  			};
  		}

  		helpers$1.rtl.overrideTextDirection(me.ctx, opts.textDirection);

  		var itemHeight = fontSize + labelOpts.padding;
  		helpers$1.each(me.legendItems, function(legendItem, i) {
  			var textWidth = ctx.measureText(legendItem.text).width;
  			var width = boxWidth + (fontSize / 2) + textWidth;
  			var x = cursor.x;
  			var y = cursor.y;

  			rtlHelper.setWidth(me.minSize.width);

  			// Use (me.left + me.minSize.width) and (me.top + me.minSize.height)
  			// instead of me.right and me.bottom because me.width and me.height
  			// may have been changed since me.minSize was calculated
  			if (isHorizontal) {
  				if (i > 0 && x + width + labelOpts.padding > me.left + me.minSize.width) {
  					y = cursor.y += itemHeight;
  					cursor.line++;
  					x = cursor.x = me.left + alignmentOffset(legendWidth, lineWidths[cursor.line]);
  				}
  			} else if (i > 0 && y + itemHeight > me.top + me.minSize.height) {
  				x = cursor.x = x + me.columnWidths[cursor.line] + labelOpts.padding;
  				cursor.line++;
  				y = cursor.y = me.top + alignmentOffset(legendHeight, columnHeights[cursor.line]);
  			}

  			var realX = rtlHelper.x(x);

  			drawLegendBox(realX, y, legendItem);

  			hitboxes[i].left = rtlHelper.leftForLtr(realX, hitboxes[i].width);
  			hitboxes[i].top = y;

  			// Fill the actual label
  			fillText(realX, y, legendItem, textWidth);

  			if (isHorizontal) {
  				cursor.x += width + labelOpts.padding;
  			} else {
  				cursor.y += itemHeight;
  			}
  		});

  		helpers$1.rtl.restoreTextDirection(me.ctx, opts.textDirection);
  	},

  	/**
  	 * @private
  	 */
  	_getLegendItemAt: function(x, y) {
  		var me = this;
  		var i, hitBox, lh;

  		if (x >= me.left && x <= me.right && y >= me.top && y <= me.bottom) {
  			// See if we are touching one of the dataset boxes
  			lh = me.legendHitBoxes;
  			for (i = 0; i < lh.length; ++i) {
  				hitBox = lh[i];

  				if (x >= hitBox.left && x <= hitBox.left + hitBox.width && y >= hitBox.top && y <= hitBox.top + hitBox.height) {
  					// Touching an element
  					return me.legendItems[i];
  				}
  			}
  		}

  		return null;
  	},

  	/**
  	 * Handle an event
  	 * @private
  	 * @param {IEvent} event - The event to handle
  	 */
  	handleEvent: function(e) {
  		var me = this;
  		var opts = me.options;
  		var type = e.type === 'mouseup' ? 'click' : e.type;
  		var hoveredItem;

  		if (type === 'mousemove') {
  			if (!opts.onHover && !opts.onLeave) {
  				return;
  			}
  		} else if (type === 'click') {
  			if (!opts.onClick) {
  				return;
  			}
  		} else {
  			return;
  		}

  		// Chart event already has relative position in it
  		hoveredItem = me._getLegendItemAt(e.x, e.y);

  		if (type === 'click') {
  			if (hoveredItem && opts.onClick) {
  				// use e.native for backwards compatibility
  				opts.onClick.call(me, e.native, hoveredItem);
  			}
  		} else {
  			if (opts.onLeave && hoveredItem !== me._hoveredItem) {
  				if (me._hoveredItem) {
  					opts.onLeave.call(me, e.native, me._hoveredItem);
  				}
  				me._hoveredItem = hoveredItem;
  			}

  			if (opts.onHover && hoveredItem) {
  				// use e.native for backwards compatibility
  				opts.onHover.call(me, e.native, hoveredItem);
  			}
  		}
  	}
  });

  function createNewLegendAndAttach(chart, legendOpts) {
  	var legend = new Legend({
  		ctx: chart.ctx,
  		options: legendOpts,
  		chart: chart
  	});

  	core_layouts.configure(chart, legend, legendOpts);
  	core_layouts.addBox(chart, legend);
  	chart.legend = legend;
  }

  var plugin_legend = {
  	id: 'legend',

  	/**
  	 * Backward compatibility: since 2.1.5, the legend is registered as a plugin, making
  	 * Chart.Legend obsolete. To avoid a breaking change, we export the Legend as part of
  	 * the plugin, which one will be re-exposed in the chart.js file.
  	 * https://github.com/chartjs/Chart.js/pull/2640
  	 * @private
  	 */
  	_element: Legend,

  	beforeInit: function(chart) {
  		var legendOpts = chart.options.legend;

  		if (legendOpts) {
  			createNewLegendAndAttach(chart, legendOpts);
  		}
  	},

  	beforeUpdate: function(chart) {
  		var legendOpts = chart.options.legend;
  		var legend = chart.legend;

  		if (legendOpts) {
  			helpers$1.mergeIf(legendOpts, core_defaults.global.legend);

  			if (legend) {
  				core_layouts.configure(chart, legend, legendOpts);
  				legend.options = legendOpts;
  			} else {
  				createNewLegendAndAttach(chart, legendOpts);
  			}
  		} else if (legend) {
  			core_layouts.removeBox(chart, legend);
  			delete chart.legend;
  		}
  	},

  	afterEvent: function(chart, e) {
  		var legend = chart.legend;
  		if (legend) {
  			legend.handleEvent(e);
  		}
  	}
  };

  var noop$2 = helpers$1.noop;

  core_defaults._set('global', {
  	title: {
  		display: false,
  		fontStyle: 'bold',
  		fullWidth: true,
  		padding: 10,
  		position: 'top',
  		text: '',
  		weight: 2000         // by default greater than legend (1000) to be above
  	}
  });

  /**
   * IMPORTANT: this class is exposed publicly as Chart.Legend, backward compatibility required!
   */
  var Title = core_element.extend({
  	initialize: function(config) {
  		var me = this;
  		helpers$1.extend(me, config);

  		// Contains hit boxes for each dataset (in dataset order)
  		me.legendHitBoxes = [];
  	},

  	// These methods are ordered by lifecycle. Utilities then follow.

  	beforeUpdate: noop$2,
  	update: function(maxWidth, maxHeight, margins) {
  		var me = this;

  		// Update Lifecycle - Probably don't want to ever extend or overwrite this function ;)
  		me.beforeUpdate();

  		// Absorb the master measurements
  		me.maxWidth = maxWidth;
  		me.maxHeight = maxHeight;
  		me.margins = margins;

  		// Dimensions
  		me.beforeSetDimensions();
  		me.setDimensions();
  		me.afterSetDimensions();
  		// Labels
  		me.beforeBuildLabels();
  		me.buildLabels();
  		me.afterBuildLabels();

  		// Fit
  		me.beforeFit();
  		me.fit();
  		me.afterFit();
  		//
  		me.afterUpdate();

  		return me.minSize;

  	},
  	afterUpdate: noop$2,

  	//

  	beforeSetDimensions: noop$2,
  	setDimensions: function() {
  		var me = this;
  		// Set the unconstrained dimension before label rotation
  		if (me.isHorizontal()) {
  			// Reset position before calculating rotation
  			me.width = me.maxWidth;
  			me.left = 0;
  			me.right = me.width;
  		} else {
  			me.height = me.maxHeight;

  			// Reset position before calculating rotation
  			me.top = 0;
  			me.bottom = me.height;
  		}

  		// Reset padding
  		me.paddingLeft = 0;
  		me.paddingTop = 0;
  		me.paddingRight = 0;
  		me.paddingBottom = 0;

  		// Reset minSize
  		me.minSize = {
  			width: 0,
  			height: 0
  		};
  	},
  	afterSetDimensions: noop$2,

  	//

  	beforeBuildLabels: noop$2,
  	buildLabels: noop$2,
  	afterBuildLabels: noop$2,

  	//

  	beforeFit: noop$2,
  	fit: function() {
  		var me = this;
  		var opts = me.options;
  		var minSize = me.minSize = {};
  		var isHorizontal = me.isHorizontal();
  		var lineCount, textSize;

  		if (!opts.display) {
  			me.width = minSize.width = me.height = minSize.height = 0;
  			return;
  		}

  		lineCount = helpers$1.isArray(opts.text) ? opts.text.length : 1;
  		textSize = lineCount * helpers$1.options._parseFont(opts).lineHeight + opts.padding * 2;

  		me.width = minSize.width = isHorizontal ? me.maxWidth : textSize;
  		me.height = minSize.height = isHorizontal ? textSize : me.maxHeight;
  	},
  	afterFit: noop$2,

  	// Shared Methods
  	isHorizontal: function() {
  		var pos = this.options.position;
  		return pos === 'top' || pos === 'bottom';
  	},

  	// Actually draw the title block on the canvas
  	draw: function() {
  		var me = this;
  		var ctx = me.ctx;
  		var opts = me.options;

  		if (!opts.display) {
  			return;
  		}

  		var fontOpts = helpers$1.options._parseFont(opts);
  		var lineHeight = fontOpts.lineHeight;
  		var offset = lineHeight / 2 + opts.padding;
  		var rotation = 0;
  		var top = me.top;
  		var left = me.left;
  		var bottom = me.bottom;
  		var right = me.right;
  		var maxWidth, titleX, titleY;

  		ctx.fillStyle = helpers$1.valueOrDefault(opts.fontColor, core_defaults.global.defaultFontColor); // render in correct colour
  		ctx.font = fontOpts.string;

  		// Horizontal
  		if (me.isHorizontal()) {
  			titleX = left + ((right - left) / 2); // midpoint of the width
  			titleY = top + offset;
  			maxWidth = right - left;
  		} else {
  			titleX = opts.position === 'left' ? left + offset : right - offset;
  			titleY = top + ((bottom - top) / 2);
  			maxWidth = bottom - top;
  			rotation = Math.PI * (opts.position === 'left' ? -0.5 : 0.5);
  		}

  		ctx.save();
  		ctx.translate(titleX, titleY);
  		ctx.rotate(rotation);
  		ctx.textAlign = 'center';
  		ctx.textBaseline = 'middle';

  		var text = opts.text;
  		if (helpers$1.isArray(text)) {
  			var y = 0;
  			for (var i = 0; i < text.length; ++i) {
  				ctx.fillText(text[i], 0, y, maxWidth);
  				y += lineHeight;
  			}
  		} else {
  			ctx.fillText(text, 0, 0, maxWidth);
  		}

  		ctx.restore();
  	}
  });

  function createNewTitleBlockAndAttach(chart, titleOpts) {
  	var title = new Title({
  		ctx: chart.ctx,
  		options: titleOpts,
  		chart: chart
  	});

  	core_layouts.configure(chart, title, titleOpts);
  	core_layouts.addBox(chart, title);
  	chart.titleBlock = title;
  }

  var plugin_title = {
  	id: 'title',

  	/**
  	 * Backward compatibility: since 2.1.5, the title is registered as a plugin, making
  	 * Chart.Title obsolete. To avoid a breaking change, we export the Title as part of
  	 * the plugin, which one will be re-exposed in the chart.js file.
  	 * https://github.com/chartjs/Chart.js/pull/2640
  	 * @private
  	 */
  	_element: Title,

  	beforeInit: function(chart) {
  		var titleOpts = chart.options.title;

  		if (titleOpts) {
  			createNewTitleBlockAndAttach(chart, titleOpts);
  		}
  	},

  	beforeUpdate: function(chart) {
  		var titleOpts = chart.options.title;
  		var titleBlock = chart.titleBlock;

  		if (titleOpts) {
  			helpers$1.mergeIf(titleOpts, core_defaults.global.title);

  			if (titleBlock) {
  				core_layouts.configure(chart, titleBlock, titleOpts);
  				titleBlock.options = titleOpts;
  			} else {
  				createNewTitleBlockAndAttach(chart, titleOpts);
  			}
  		} else if (titleBlock) {
  			core_layouts.removeBox(chart, titleBlock);
  			delete chart.titleBlock;
  		}
  	}
  };

  var plugins = {};
  var filler = plugin_filler;
  var legend = plugin_legend;
  var title = plugin_title;
  plugins.filler = filler;
  plugins.legend = legend;
  plugins.title = title;

  /**
   * @namespace Chart
   */


  core_controller.helpers = helpers$1;

  // @todo dispatch these helpers into appropriated helpers/helpers.* file and write unit tests!
  core_helpers();

  core_controller._adapters = core_adapters;
  core_controller.Animation = core_animation;
  core_controller.animationService = core_animations;
  core_controller.controllers = controllers;
  core_controller.DatasetController = core_datasetController;
  core_controller.defaults = core_defaults;
  core_controller.Element = core_element;
  core_controller.elements = elements;
  core_controller.Interaction = core_interaction;
  core_controller.layouts = core_layouts;
  core_controller.platform = platform;
  core_controller.plugins = core_plugins;
  core_controller.Scale = core_scale;
  core_controller.scaleService = core_scaleService;
  core_controller.Ticks = core_ticks;
  core_controller.Tooltip = core_tooltip;

  // Register built-in scales

  core_controller.helpers.each(scales, function(scale, type) {
  	core_controller.scaleService.registerScaleType(type, scale, scale._defaults);
  });

  // Load to register built-in adapters (as side effects)


  // Loading built-in plugins

  for (var k in plugins) {
  	if (plugins.hasOwnProperty(k)) {
  		core_controller.plugins.register(plugins[k]);
  	}
  }

  core_controller.platform.initialize();

  var src = core_controller;
  if (typeof window !== 'undefined') {
  	window.Chart = core_controller;
  }

  // DEPRECATIONS

  /**
   * Provided for backward compatibility, not available anymore
   * @namespace Chart.Chart
   * @deprecated since version 2.8.0
   * @todo remove at version 3
   * @private
   */
  core_controller.Chart = core_controller;

  /**
   * Provided for backward compatibility, not available anymore
   * @namespace Chart.Legend
   * @deprecated since version 2.1.5
   * @todo remove at version 3
   * @private
   */
  core_controller.Legend = plugins.legend._element;

  /**
   * Provided for backward compatibility, not available anymore
   * @namespace Chart.Title
   * @deprecated since version 2.1.5
   * @todo remove at version 3
   * @private
   */
  core_controller.Title = plugins.title._element;

  /**
   * Provided for backward compatibility, use Chart.plugins instead
   * @namespace Chart.pluginService
   * @deprecated since version 2.1.5
   * @todo remove at version 3
   * @private
   */
  core_controller.pluginService = core_controller.plugins;

  /**
   * Provided for backward compatibility, inheriting from Chart.PlugingBase has no
   * effect, instead simply create/register plugins via plain JavaScript objects.
   * @interface Chart.PluginBase
   * @deprecated since version 2.5.0
   * @todo remove at version 3
   * @private
   */
  core_controller.PluginBase = core_controller.Element.extend({});

  /**
   * Provided for backward compatibility, use Chart.helpers.canvas instead.
   * @namespace Chart.canvasHelpers
   * @deprecated since version 2.6.0
   * @todo remove at version 3
   * @private
   */
  core_controller.canvasHelpers = core_controller.helpers.canvas;

  /**
   * Provided for backward compatibility, use Chart.layouts instead.
   * @namespace Chart.layoutService
   * @deprecated since version 2.7.3
   * @todo remove at version 3
   * @private
   */
  core_controller.layoutService = core_controller.layouts;

  /**
   * Provided for backward compatibility, not available anymore.
   * @namespace Chart.LinearScaleBase
   * @deprecated since version 2.8
   * @todo remove at version 3
   * @private
   */
  core_controller.LinearScaleBase = scale_linearbase;

  /**
   * Provided for backward compatibility, instead we should create a new Chart
   * by setting the type in the config (`new Chart(id, {type: '{chart-type}'}`).
   * @deprecated since version 2.8.0
   * @todo remove at version 3
   */
  core_controller.helpers.each(
  	[
  		'Bar',
  		'Bubble',
  		'Doughnut',
  		'Line',
  		'PolarArea',
  		'Radar',
  		'Scatter'
  	],
  	function(klass) {
  		core_controller[klass] = function(ctx, cfg) {
  			return new core_controller(ctx, core_controller.helpers.merge(cfg || {}, {
  				type: klass.charAt(0).toLowerCase() + klass.slice(1)
  			}));
  		};
  	}
  );

  return src;

  })));
  });

  function generateChart(chartId, chartType) {
    return {
      render: function render(createElement) {
        return createElement('div', {
          style: this.styles,
          class: this.cssClasses
        }, [createElement('canvas', {
          attrs: {
            id: this.chartId,
            width: this.width,
            height: this.height
          },
          ref: 'canvas'
        })]);
      },
      props: {
        chartId: {
          default: chartId,
          type: String
        },
        width: {
          default: 400,
          type: Number
        },
        height: {
          default: 400,
          type: Number
        },
        cssClasses: {
          type: String,
          default: ''
        },
        styles: {
          type: Object
        },
        plugins: {
          type: Array,
          default: function _default() {
            return [];
          }
        }
      },
      data: function data() {
        return {
          _chart: null,
          _plugins: this.plugins
        };
      },
      methods: {
        addPlugin: function addPlugin(plugin) {
          this.$data._plugins.push(plugin);
        },
        generateLegend: function generateLegend() {
          if (this.$data._chart) {
            return this.$data._chart.generateLegend();
          }
        },
        renderChart: function renderChart(data, options) {
          if (this.$data._chart) { this.$data._chart.destroy(); }
          this.$data._chart = new Chart$1(this.$refs.canvas.getContext('2d'), {
            type: chartType,
            data: data,
            options: options,
            plugins: this.$data._plugins
          });
        }
      },
      beforeDestroy: function beforeDestroy() {
        if (this.$data._chart) {
          this.$data._chart.destroy();
        }
      }
    };
  }
  var Bar = generateChart('bar-chart', 'bar');
  var HorizontalBar = generateChart('horizontalbar-chart', 'horizontalBar');
  var Line = generateChart('line-chart', 'line');
  var Pie = generateChart('pie-chart', 'pie');

  var reactiveProp$1 = mixins.reactiveProp;
  Chart.defaults.global.title.padding = 20;
  Chart.defaults.global.title.fontSize = 16;
  Chart.defaults.global.title.lineHeight = 1.6;
  var script$1 = {
    "extends": Bar,
    mixins: [reactiveProp$1],
    props: {
      options: {
        type: Object,
        "default": function _default() {
          return {
            legend: {
              display: false
            },
            lineTension: 1
          };
        }
      }
    },
    mounted: function mounted() {
      this.renderChart(this.chartData, this.options);
    }
  };

  /* script */
  var __vue_script__$1 = script$1;

  /* template */

    /* style */
    var __vue_inject_styles__$1 = undefined;
    /* scoped */
    var __vue_scope_id__$1 = undefined;
    /* module identifier */
    var __vue_module_identifier__$1 = undefined;
    /* functional template */
    var __vue_is_functional_template__$1 = undefined;
    /* style inject */
    
    /* style inject SSR */
    

    
    var ChartComponent = normalizeComponent_1(
      {},
      __vue_inject_styles__$1,
      __vue_script__$1,
      __vue_scope_id__$1,
      __vue_is_functional_template__$1,
      __vue_module_identifier__$1,
      undefined,
      undefined
    );

  var chartLabels = ['1980', '1990', '2000', '2010', '2020'];
  var chartDataList = [6542564, 7322564, 8008278, 8175133, 5475133];
  var ChartData = {
    data: {
      labels: chartLabels,
      datasets: [{
        data: chartDataList,
        fill: false,
        // used by line chart
        backgroundColor: ['#2F334F', '#3155A6', '#F2695D', '#EBBCD8', '#F9A137'],
        borderColor: ['#ACAEB9'],
        borderWidth: 1
      }]
    },
    bar: {
      options: {
        title: {
          display: true,
          text: 'Population Chart'
        },
        legend: {
          display: false
        },
        lineTension: 1,
        scales: {
          xAxes: [{
            scaleLabel: {
              display: true,
              labelString: 'Years'
            }
          }],
          yAxes: [{
            scaleLabel: {
              display: true,
              labelString: 'Population'
            },
            ticks: {
              padding: 25
            }
          }]
        }
      }
    },
    horizontalBar: {
      options: {
        title: {
          display: true,
          text: 'Population Chart'
        },
        legend: {
          display: false
        },
        lineTension: 1,
        scales: {
          xAxes: [{
            scaleLabel: {
              display: true,
              labelString: 'Population'
            }
          }],
          yAxes: [{
            scaleLabel: {
              display: true,
              labelString: 'Years'
            },
            ticks: {
              padding: 25
            }
          }]
        }
      }
    },
    pie: {
      options: {
        title: {
          display: true,
          text: 'Population Chart'
        },
        legend: {
          display: true
        },
        lineTension: 1
      }
    }
  };

  var chartType = 'bar';

  var ChartBar =
  /*#__PURE__*/
  function () {
    function ChartBar() {
      var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, ChartBar);

      this.data = data;
      this.settings = settings;
      this.init();
    }
    /**
     * Initializes the module
     */


    _createClass(ChartBar, [{
      key: "init",
      value: function init() {
        Vue.component("nyco-chart-".concat(chartType), ChartComponent);
        new Vue({
          el: "[data-js=\"chart-".concat(chartType, "\"]"),
          delimiters: ['v{', '}'],
          data: function data() {
            return {
              data: ChartData.data,
              options: ChartData.bar.options
            };
          }
        });
      }
      /**
       * Logs constants to the debugger
       * @param  {object} param - our constants
       */

    }, {
      key: "_constants",
      value: function _constants(param) {
        console.dir(param);
      }
    }]);

    return ChartBar;
  }();

  var reactiveProp$2 = mixins.reactiveProp;
  Chart.defaults.global.title.padding = 20;
  Chart.defaults.global.title.fontSize = 16;
  Chart.defaults.global.title.lineHeight = 1.6;
  var script$2 = {
    "extends": HorizontalBar,
    mixins: [reactiveProp$2],
    props: {
      options: {
        type: Object,
        "default": function _default() {
          return {
            legend: {
              display: false
            },
            lineTension: 1
          };
        }
      }
    },
    mounted: function mounted() {
      this.renderChart(this.chartData, this.options);
    }
  };

  /* script */
  var __vue_script__$2 = script$2;

  /* template */

    /* style */
    var __vue_inject_styles__$2 = undefined;
    /* scoped */
    var __vue_scope_id__$2 = undefined;
    /* module identifier */
    var __vue_module_identifier__$2 = undefined;
    /* functional template */
    var __vue_is_functional_template__$2 = undefined;
    /* style inject */
    
    /* style inject SSR */
    

    
    var ChartComponent$1 = normalizeComponent_1(
      {},
      __vue_inject_styles__$2,
      __vue_script__$2,
      __vue_scope_id__$2,
      __vue_is_functional_template__$2,
      __vue_module_identifier__$2,
      undefined,
      undefined
    );

  var chartType$1 = 'horizontal-bar';

  var ChartHorizontalBar =
  /*#__PURE__*/
  function () {
    function ChartHorizontalBar() {
      var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, ChartHorizontalBar);

      this.data = data;
      this.settings = settings;
      this.init();
    }
    /**
     * Initializes the module
     */


    _createClass(ChartHorizontalBar, [{
      key: "init",
      value: function init() {
        Vue.component("nyco-chart-".concat(chartType$1), ChartComponent$1);
        new Vue({
          el: "[data-js=\"chart-".concat(chartType$1, "\"]"),
          delimiters: ['v{', '}'],
          data: function data() {
            return {
              data: ChartData.data,
              options: ChartData.horizontalBar.options
            };
          }
        });
      }
      /**
       * Logs constants to the debugger
       * @param  {object} param - our constants
       */

    }, {
      key: "_constants",
      value: function _constants(param) {
        console.dir(param);
      }
    }]);

    return ChartHorizontalBar;
  }();

  var reactiveProp$3 = mixins.reactiveProp;
  Chart.defaults.global.title.padding = 20;
  Chart.defaults.global.title.fontSize = 16;
  Chart.defaults.global.title.lineHeight = 1.6;
  var script$3 = {
    "extends": Line,
    mixins: [reactiveProp$3],
    props: {
      options: {
        type: Object,
        "default": function _default() {
          return {
            legend: {
              display: false
            },
            lineTension: 1
          };
        }
      }
    },
    mounted: function mounted() {
      this.renderChart(this.chartData, this.options);
    }
  };

  /* script */
  var __vue_script__$3 = script$3;

  /* template */

    /* style */
    var __vue_inject_styles__$3 = undefined;
    /* scoped */
    var __vue_scope_id__$3 = undefined;
    /* module identifier */
    var __vue_module_identifier__$3 = undefined;
    /* functional template */
    var __vue_is_functional_template__$3 = undefined;
    /* style inject */
    
    /* style inject SSR */
    

    
    var ChartComponent$2 = normalizeComponent_1(
      {},
      __vue_inject_styles__$3,
      __vue_script__$3,
      __vue_scope_id__$3,
      __vue_is_functional_template__$3,
      __vue_module_identifier__$3,
      undefined,
      undefined
    );

  var chartType$2 = 'line';

  var ChartLine =
  /*#__PURE__*/
  function () {
    function ChartLine() {
      var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, ChartLine);

      this.data = data;
      this.settings = settings;
      this.init();
    }
    /**
     * Initializes the module
     */


    _createClass(ChartLine, [{
      key: "init",
      value: function init() {
        Vue.component("nyco-chart-".concat(chartType$2), ChartComponent$2);
        new Vue({
          el: "[data-js=\"chart-".concat(chartType$2, "\"]"),
          delimiters: ['v{', '}'],
          data: function data() {
            return {
              data: ChartData.data,
              options: ChartData.bar.options
            };
          }
        });
      }
      /**
       * Logs constants to the debugger
       * @param  {object} param - our constants
       */

    }, {
      key: "_constants",
      value: function _constants(param) {
        console.dir(param);
      }
    }]);

    return ChartLine;
  }();

  var reactiveProp$4 = mixins.reactiveProp;
  Chart.defaults.global.title.padding = 20;
  Chart.defaults.global.title.fontSize = 16;
  Chart.defaults.global.title.lineHeight = 1.6;
  var script$4 = {
    "extends": Pie,
    mixins: [reactiveProp$4],
    props: {
      options: {
        type: Object,
        "default": function _default() {
          return {
            legend: {
              display: true
            },
            lineTension: 1
          };
        }
      }
    },
    mounted: function mounted() {
      this.renderChart(this.chartData, this.options);
    }
  };

  /* script */
  var __vue_script__$4 = script$4;

  /* template */

    /* style */
    var __vue_inject_styles__$4 = undefined;
    /* scoped */
    var __vue_scope_id__$4 = undefined;
    /* module identifier */
    var __vue_module_identifier__$4 = undefined;
    /* functional template */
    var __vue_is_functional_template__$4 = undefined;
    /* style inject */
    
    /* style inject SSR */
    

    
    var ChartComponent$3 = normalizeComponent_1(
      {},
      __vue_inject_styles__$4,
      __vue_script__$4,
      __vue_scope_id__$4,
      __vue_is_functional_template__$4,
      __vue_module_identifier__$4,
      undefined,
      undefined
    );

  var chartType$3 = 'pie';

  var ChartPie =
  /*#__PURE__*/
  function () {
    function ChartPie() {
      var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, ChartPie);

      this.data = data;
      this.settings = settings;
      this.init();
    }
    /**
     * Initializes the module
     */


    _createClass(ChartPie, [{
      key: "init",
      value: function init() {
        Vue.component("nyco-chart-".concat(chartType$3), ChartComponent$3);
        new Vue({
          el: "[data-js=\"chart-".concat(chartType$3, "\"]"),
          delimiters: ['v{', '}'],
          data: function data() {
            return {
              data: ChartData.data,
              options: ChartData.pie.options
            };
          }
        });
      }
      /**
       * Logs constants to the debugger
       * @param  {object} param - our constants
       */

    }, {
      key: "_constants",
      value: function _constants(param) {
        console.dir(param);
      }
    }]);

    return ChartPie;
  }();

  //
  //
  var script$5 = {
    props: {
      'layers': {
        type: Array
      },
      'config': {
        type: Object
      }
    },
    data: function data() {
      return {
        map: null,
        mapPopup: null,
        mapFilter: null,
        activeLayer: null,
        mapLoaded: false,
        menuItems: [],
        selectedItems: []
      };
    },
    mounted: function mounted() {
      this.initializeMap();
    },
    destroyed: function destroyed() {
      this.map.remove();
    },
    watch: {
      'layers': function layers() {
        var layers = this.layers;

        if (this.config.mapType === 'multi') {
          for (var i = 0; i < layers.length; i++) {
            var layer = layers[i];
            this.trackLayer(layer.name);
            if (layer["default"] || this.layers.length === 1) { this.activeLayer = layer.name; }
            if (this.mapLoaded) { this.initializeLayer(layer); }
          }
        } else if (this.config.mapType === 'single') {
          var _layer = this.layers[0];
          this.activeLayer = _layer.name;
          this.generateLegend(_layer.data);
          if (this.mapLoaded) { this.initializeLayer(_layer); }
        } else {
          throw new Error('mapType must be defined');
        }
      },
      'mapLoaded': function mapLoaded() {
        if (this.mapLoaded && this.layers.length) {
          var layers = this.layers;

          for (var i = 0; i < layers.length; i++) {
            this.initializeLayer(layers[i]);
          }
        }
      },
      'menuItems': function menuItems() {
        if (this.menuItems.length > 1) { this.initializeToggle(this.menuItems); }
      },
      'selectedItems': function selectedItems() {
        var layer = this.layers[0];
        var filter = ['in', layer.legendColumn];

        for (var i = 0; i < this.selectedItems.length; i++) {
          filter.push(this.selectedItems[i]);
        }

        if (this.selectedItems.length > 0) {
          var relatedFeatures = this.map.querySourceFeatures(layer.name, {
            sourceLayer: layer.name,
            filter: filter
          }); // set filter when legend item selected

          this.map.setFilter("".concat(layer.name, "-highlighted"), filter);
          this.map.setLayoutProperty("".concat(layer.name, "-highlighted"), 'visibility', 'visible');
        }

        if (!this.selectedItems.length && !this.mapPopup) {
          this.map.setFilter("".concat(layer.name, "-highlighted"), null);
          this.map.setLayoutProperty("".concat(layer.name, "-highlighted"), 'visibility', 'none');
        }
      }
    },
    methods: {
      initializeMap: function initializeMap() {
        var _this = this;

        var mapConfig = this.config;
        var options = {
          container: mapConfig.containerId
        };
        if (mapConfig.center) { options.center = mapConfig.center; }
        if (mapConfig.style) { options.style = mapConfig.style; }
        if (mapConfig.zoom) { options.zoom = mapConfig.zoom; }
        mapboxgl.accessToken = mapConfig.APIKey;
        this.map = new mapboxgl.Map(options);
        this.map.addControl(new mapboxgl.NavigationControl()); // disable map zoom when using scroll

        if (mapConfig.disableScroll) { this.map.scrollZoom.disable(); }
        this.map.on('load', function () {
          return _this.mapLoaded = true;
        });
      },
      initializeLayer: function initializeLayer(layer) {
        if (this.map.getLayer(layer.name) === undefined && Object.entries(layer.data).length !== 0) {
          var visibility = layer.name === this.activeLayer ? 'visible' : 'none';
          var filter = layer.filterBy ? ['in', layer.filterBy, ''] : [];
          var fill = this.config.colors ? this.generateFillColor(this.config.colors) : layer.fill;
          this.map.addSource(layer.name, {
            'type': 'geojson',
            'data': layer.data
          });
          this.map.addLayer({
            'id': layer.name,
            'type': 'fill',
            'source': layer.name,
            'paint': {
              'fill-outline-color': fill[0],
              'fill-color': fill[1],
              'fill-opacity': 0.7
            },
            'layout': {
              'visibility': visibility
            }
          });
          this.map.addLayer({
            'id': "".concat(layer.name, "-highlighted"),
            'type': 'fill',
            'source': layer.name,
            'paint': {
              'fill-outline-color': fill[0],
              'fill-color': fill[1],
              'fill-opacity': 1
            },
            'filter': filter,
            'layout': {
              'visibility': visibility
            }
          });
          this.initializeFilter(layer);
          this.updateCursorOnHover(layer.name);
        }
      },
      initializePopup: function initializePopup(event, layer) {
        this.config.mapType === 'multi' ? this.popupMultiLayer(event, layer) : this.popupSingleLayer(event, layer);
      },
      initializeToggle: function initializeToggle(toggleList) {
        this.config.mapType === 'multi' ? this.toggleMultiLayer(toggleList) : this.toggleSingleLayer(toggleList);
      },
      initializeFilter: function initializeFilter(layer) {
        this.config.mapType === 'multi' ? this.filterMultiLayer(layer) : this.filterSingleLayer(layer);
      },
      updateCursorOnHover: function updateCursorOnHover(layerId) {
        var map = this.map; // change the cursor to a pointer when the mouse is over the layer.

        map.on('mouseenter', layerId, function () {
          map.getCanvas().style.cursor = 'pointer';
        }); // change the cursor back to the default when it leaves the layer.

        map.on('mouseleave', layerId, function () {
          map.getCanvas().style.cursor = '';
        });
      },
      generateFillColor: function generateFillColor(colors) {
        return colors[Math.floor(Math.random() * colors.length)];
      },
      // multi layer
      trackLayer: function trackLayer(reference) {
        if (!this.menuItems.includes(reference)) { this.menuItems.push(reference); }
      },
      popupMultiLayer: function popupMultiLayer(event, layer) {
        var $this = this;
        var map = $this.map;
        var layerName = "".concat(layer.name, "-highlighted");
        var popup = new mapboxgl.Popup().setLngLat(event.lngLat).setHTML(event.features[0].properties[layer.filterBy]).addTo(map);

        if (popup.isOpen()) {
          $this.mapPopup = popup;
          map.setLayoutProperty(layerName, 'visibility', 'visible');
          map.setFilter(layerName, $this.mapFilter);
        }

        popup.on('close', function () {
          // reset associated states when popup dismissed while active
          if ($this.mapPopup === popup) {
            $this.mapPopup = null;
            $this.mapFilter = null;
            map.setFilter(layerName, null);
            map.setLayoutProperty(layerName, 'visibility', 'none');
          }
        });
      },
      filterMultiLayer: function filterMultiLayer(layer) {
        var $this = this;
        var map = $this.map;
        map.on('click', layer.name, function (e) {
          // set bbox as reactangle area around clicked point
          var bbox = [[e.point.x, e.point.y], [e.point.x, e.point.y]];
          var features = map.queryRenderedFeatures(bbox, {
            layers: [layer.name]
          });
          var filter = features.reduce(function (memo, feature) {
            memo.push(feature.properties[layer.filterBy]);
            return memo;
          }, ['in', "".concat(layer.filterBy)]);
          $this.mapFilter = filter;
          $this.initializePopup(e, layer);
        });
      },
      toggleMultiLayer: function toggleMultiLayer(layersToToggle) {
        var $this = this;
        var map = $this.map;
        var activeLayer = $this.activeLayer;
        var linkContainer = document.getElementById(this.config.legendId); // clear all links before appending new ones to prevent duplicates

        while (linkContainer.firstChild) {
          linkContainer.removeChild(linkContainer.firstChild);
        }

        for (var i = 0; i < layersToToggle.length; i++) {
          var layerRef = layersToToggle[i];
          var link = document.createElement('a');
          link.href = '#';
          link.textContent = layerRef;
          if (layerRef === activeLayer) { link.classList.add('active'); } // on click update link state, active layer reference, and layer visibility

          link.onclick = function (e) {
            e.preventDefault();
            e.stopPropagation();
            var selectedLayer = this.textContent;
            var links = linkContainer.getElementsByTagName('a'); // remove active popup

            if ($this.mapPopup) { $this.mapPopup.remove(); }

            for (var _i = 0; _i < links.length; _i++) {
              var currentLink = links[_i];
              var currentLayer = currentLink.textContent;
              var currentLayerHighlight = "".concat(currentLayer, "-highlighted");
              var layerVisibility = map.getLayoutProperty(currentLayer, 'visibility');

              if (currentLayer === selectedLayer) {
                // return if layer is already selected
                if (layerVisibility === 'visible' && currentLink.classList.contains('active')) { return; } // set our current layer as the global active layer,
                // add active class to link, set layer as visible

                $this.activeLayer = currentLayer;
                currentLink.classList.add('active');
                map.setLayoutProperty(currentLayer, 'visibility', 'visible');
              } else {
                // remove links active class, set layer visibility to none and remove filters
                currentLink.classList.remove('active');
                map.setLayoutProperty(currentLayer, 'visibility', 'none');
                map.setLayoutProperty(currentLayerHighlight, 'visibility', 'none');
                map.setFilter(currentLayerHighlight, null);
              }
            }
          };

          linkContainer.appendChild(link);
        }
      },
      // single layer
      generateLegend: function generateLegend(layerData) {
        var _this2 = this;

        layerData.features.forEach(function (feature) {
          var item = feature.properties[_this2.layers[0].legendColumn];
          if (!_this2.menuItems.includes(item) && item) { _this2.menuItems.push(item); }
        });
      },
      popupSingleLayer: function popupSingleLayer(event, layer) {
        var $this = this;
        var map = $this.map;
        var layerName = "".concat(layer.name, "-highlighted"); // check whether shape falls under current legend selection

        var inCurrentSelection = true;
        var columnFilter = event.features[0].properties[layer.legendColumn];
        if (!$this.selectedItems.includes(columnFilter)) { inCurrentSelection = false; }
        var popup = new mapboxgl.Popup().setLngLat(event.lngLat).setHTML(event.features[0].properties[layer.filterBy]).addTo(map);

        if (popup.isOpen()) {
          $this.mapPopup = popup; // if there are no legend items selected, highlight selected map shape

          if (!$this.selectedItems.length) {
            map.setLayoutProperty(layerName, 'visibility', 'visible');
            map.setFilter(layerName, $this.mapFilter);
          } // if there are legend items selected and selected map shape isn't
          // within any of the selected legend items, highlight selected
          // map shape and clear legend


          if ($this.selectedItems.length > 0 && !inCurrentSelection) {
            map.setLayoutProperty(layerName, 'visibility', 'visible');
            map.setFilter(layerName, $this.mapFilter); // reset all checked legend items

            $this.selectedItems = [];
            var filterGroupInputs = document.getElementById(this.config.legendId).querySelectorAll('input:checked');

            for (var i = 0; i < filterGroupInputs.length; i++) {
              filterGroupInputs[i].checked = false;
            }
          }
        }

        popup.on('close', function () {
          // reset associated states when popup dismissed while active
          if ($this.mapPopup === popup) {
            $this.mapPopup = null;
            $this.mapFilter = null; // if there are no legend items selected, reset all filters

            if (!$this.selectedItems.length) {
              map.setFilter(layerName, null);
              map.setLayoutProperty(layerName, 'visibility', 'none');
            }
          }
        });
      },
      filterSingleLayer: function filterSingleLayer(layer) {
        var $this = this;
        var map = $this.map;
        map.on('click', layer.name, function (e) {
          // set bbox as reactangle area around clicked point
          var bbox = [[e.point.x, e.point.y], [e.point.x, e.point.y]];
          var features = map.queryRenderedFeatures(bbox, {
            layers: [layer.name]
          });
          var legendColumnValue = null;
          var filter = features.reduce(function (memo, feature) {
            legendColumnValue = feature.properties[layer.legendColumn];
            memo.push(feature.properties[layer.filterBy]);
            return memo;
          }, ['in', "".concat(layer.filterBy)]);
          $this.mapFilter = filter;
          $this.initializePopup(e, layer);
        });
      },
      toggleSingleLayer: function toggleSingleLayer(filtersToToggle) {
        var $this = this;
        var map = $this.map;
        var filterGroup = document.getElementById(this.config.legendId);
        var layer = $this.layers[0];
        var legendColumn = layer.legendColumn; // clear all links before appending new ones to prevent duplicates

        while (filterGroup.firstChild) {
          filterGroup.removeChild(filterGroup.firstChild);
        } // initilize an input element for each filter type


        for (var i = 0; i < filtersToToggle.length; i++) {
          var layerRef = filtersToToggle[i]; // checkbox

          var input = document.createElement('input');
          input.type = 'checkbox';
          input.id = layerRef;
          input.value = layerRef;
          filterGroup.appendChild(input); // checkbox label

          var label = document.createElement('label');
          label.setAttribute('for', layerRef);
          label.setAttribute('title', layerRef);
          label.textContent = layerRef;
          filterGroup.appendChild(label); // when the checkbox changes state, update the selected items array.

          input.addEventListener('change', function (e) {
            var item = e.target.value; // reset the checkboxes checked state

            e.target.checked ? 'visible' : 'none'; // remove popup if one exists

            if ($this.mapPopup) { $this.mapPopup.remove(); }
            if (e.target.checked && !$this.selectedItems.includes(item)) { $this.selectedItems.push(item); }

            if (!e.target.checked && $this.selectedItems.includes(item)) {
              $this.selectedItems = $this.selectedItems.filter(function (val) {
                return val !== item;
              });
            }
          });
        }
      }
    }
  };

  /* script */
  var __vue_script__$5 = script$5;

  /* template */
  var __vue_render__$1 = function() {
    var _vm = this;
    var _h = _vm.$createElement;
    var _c = _vm._self._c || _h;
    return _c("div")
  };
  var __vue_staticRenderFns__$1 = [];
  __vue_render__$1._withStripped = true;

    /* style */
    var __vue_inject_styles__$5 = undefined;
    /* scoped */
    var __vue_scope_id__$5 = undefined;
    /* module identifier */
    var __vue_module_identifier__$5 = undefined;
    /* functional template */
    var __vue_is_functional_template__$5 = false;
    /* style inject */
    
    /* style inject SSR */
    

    
    var MapComponent = normalizeComponent_1(
      { render: __vue_render__$1, staticRenderFns: __vue_staticRenderFns__$1 },
      __vue_inject_styles__$5,
      __vue_script__$5,
      __vue_scope_id__$5,
      __vue_is_functional_template__$5,
      __vue_module_identifier__$5,
      undefined,
      undefined
    );

  /**
   * Config
   */
  var nycoColors = {
    colors: {
      'primary-navy': '#2F334F',
      'primary-navy-70t': '#6E7085',
      'primary-navy-50t': '#9698A7',
      'primary-navy-30t': '#C0C2CA',
      'primary-blue': '#3155A6',
      'primary-blue-70t': '#6C88C1',
      'primary-blue-50t': '#96ABD2',
      'primary-blue-30t': '#C0CCE3',
      'primary-red': '#F2695D',
      'primary-red-70t': '#F6958D',
      'primary-red-50t': '#F8B2AD',
      'primary-red-30t': '#FBD1CE',
      'secondary-grey': '#ACAEB9',
      'secondary-grey-70t': '#C4C6CD',
      'secondary-grey-50t': '#D5D6DC',
      'secondary-grey-30t': '#E8E7E9',
      'secondary-white': '#F3F3F3',
      'secondary-white-70t': '#F6F6F6',
      'secondary-white-50t': '#F9F9FA',
      'secondary-white-30t': '#FBFCFC',
      'secondary-orange': '#F9A137',
      'secondary-orange-70t': '#FFA133',
      'secondary-orange-50t': '#FED09A',
      'secondary-orange-30t': '#FFE3C2',
      'secondary-pink': '#EBBCD8',
      'secondary-pink-70t': '#F2D0E3',
      'secondary-pink-50t': '#F7DDEB',
      'secondary-pink-30t': '#FDEBF3',
      'base-black': '#000000',
      'base-white': '#FFFFFF'
    },
    colorCombinations: {
      'light-background': {
        'color': 'base-black',
        'headings': 'primary-navy',
        'hyperlinks': 'primary-blue',
        'visited': 'primary-blue',
        'hover': 'primary-navy',
        'background-color': 'base-white',
        'border': 'secondary-grey',
        'placeholder': 'secondary-grey',
        'checkbox-background': 'primary-navy',
        'error': 'primary-red'
      },
      'mid-background': {
        'color': 'base-black',
        'headings': 'primary-navy',
        'hyperlinks': 'primary-blue',
        'visited': 'primary-blue',
        'hover': 'primary-navy',
        'background-color': 'secondary-white'
      },
      'dark-background': {
        'color': 'base-white',
        'font-smooth': true,
        'headings': 'base-white',
        'hyperlinks': 'base-white',
        'visited': 'base-white',
        'hover': 'base-white',
        'background-color': 'primary-navy'
      },
      'primary-button': {
        'font-weight': 'bold',
        'color': 'base-white',
        'font-smooth': true,
        'background-color': 'primary-blue'
      },
      'secondary-button': {
        'font-weight': 'bold',
        'color': 'base-white',
        'font-smooth': true,
        'background-color': 'primary-red'
      }
    }
  };
  var color = nycoColors.colors;
  var mapColorCombinations = [[color['primary-navy'], color['primary-navy-70t']], [color['base-black'], color['secondary-orange']], [color['primary-navy'], color['secondary-grey']], [color['primary-blue'], color['secondary-orange']]];
  var colors = {
    nycoColors: nycoColors,
    mapColorCombinations: mapColorCombinations
  };
  var colors_2 = colors.mapColorCombinations;

  var MapData = {
    single: {
      layers: [],
      config: {
        APIKey: 'pk.eyJ1Ijoibnljby1wcm9kdWN0cyIsImEiOiJjanZjZ3Y4b2IxNXYwM3l0ZDN6bWN4ajA5In0.XSt-hoz5p3j2siyli0g0og',
        containerId: 'nyco-map-sl',
        legendId: 'nyco-map-legend',
        center: [-73.986710, 40.693391],
        zoom: 9,
        disableScroll: true,
        style: 'mapbox://styles/nyco-products/cjv6wjq8812ys1gp39mnvuk2w',
        mapType: 'single'
      }
    },
    multi: {
      layers: [],
      config: {
        APIKey: 'pk.eyJ1Ijoibnljby1wcm9kdWN0cyIsImEiOiJjanZjZ3Y4b2IxNXYwM3l0ZDN6bWN4ajA5In0.XSt-hoz5p3j2siyli0g0og',
        containerId: 'nyco-map-ml',
        legendId: 'nyco-map-menu',
        center: [-73.986710, 40.693391],
        zoom: 9,
        disableScroll: true,
        style: 'mapbox://styles/nyco-products/cjv6wjq8812ys1gp39mnvuk2w',
        mapType: 'multi',
        colors: colors_2
      }
    }
  };

  var geojson = createCommonjsModule(function (module) {
  (function(GeoJSON) {
    GeoJSON.version = '0.5.0';

    // Allow user to specify default parameters
    GeoJSON.defaults = {
      doThrows: {
        invalidGeometry: false
      }
    };

    function InvalidGeometryError() {
      var args = 1 <= arguments.length ? [].slice.call(arguments, 0) : [];
      var item = args.shift();
      var params = args.shift();

      Error.apply(this, args);
      this.message = this.message || "Invalid Geometry: " + 'item: ' + JSON.stringify(item) + ', params: ' + JSON.stringify(params);
    }

    InvalidGeometryError.prototype = Error;


    GeoJSON.errors = {
      InvalidGeometryError: InvalidGeometryError
    };

    //exposing so this can be overriden maybe by geojson-validation or the like
    GeoJSON.isGeometryValid = function(geometry){
      if(!geometry || !Object.keys(geometry).length)
        { return false; }

      return !!geometry.type && !!geometry.coordinates && Array.isArray(geometry.coordinates) && !!geometry.coordinates.length;
    };

    // The one and only public function.
    // Converts an array of objects into a GeoJSON feature collection
    GeoJSON.parse = function(objects, params, callback) {
      var geojson,
          settings = applyDefaults(params, this.defaults),
          propFunc;

      geomAttrs.length = 0; // Reset the list of geometry fields
      setGeom(settings);
      propFunc = getPropFunction(settings);

      if (Array.isArray(objects)) {
        geojson = {"type": "FeatureCollection", "features": []};
        objects.forEach(function(item){
          geojson.features.push(getFeature({item:item, params: settings, propFunc:propFunc}));
        });
        addOptionals(geojson, settings);
      } else {
        geojson = getFeature({item:objects, params: settings, propFunc:propFunc});
        addOptionals(geojson, settings);
      }

      if (callback && typeof callback === 'function') {
        callback(geojson);
      } else {
        return geojson;
      }
    };

    // Helper functions
    var geoms = ['Point', 'MultiPoint', 'LineString', 'MultiLineString', 'Polygon', 'MultiPolygon', 'GeoJSON'],
        geomAttrs = [];

    // Adds default settings to user-specified params
    // Does not overwrite any settings--only adds defaults
    // the the user did not specify
    function applyDefaults(params, defaults) {
      var settings = params || {};

      for(var setting in defaults) {
        if(defaults.hasOwnProperty(setting) && !settings[setting]) {
          settings[setting] = defaults[setting];
        }
      }

      return settings;
    }

    // Adds the optional GeoJSON properties crs and bbox
    // if they have been specified
    function addOptionals(geojson, settings){
      if(settings.crs && checkCRS(settings.crs)) {
        if(settings.isPostgres)
          { geojson.geometry.crs = settings.crs; }
        else
          { geojson.crs = settings.crs; }
      }
      if (settings.bbox) {
        geojson.bbox = settings.bbox;
      }
      if (settings.extraGlobal) {
        geojson.properties = {};
        for (var key in settings.extraGlobal) {
          geojson.properties[key] = settings.extraGlobal[key];
        }
      }
    }

    // Verify that the structure of CRS object is valid
    function checkCRS(crs) {
      if (crs.type === 'name') {
          if (crs.properties && crs.properties.name) {
              return true;
          } else {
              throw new Error('Invalid CRS. Properties must contain "name" key');
          }
      } else if (crs.type === 'link') {
          if (crs.properties && crs.properties.href && crs.properties.type) {
              return true;
          } else {
              throw new Error('Invalid CRS. Properties must contain "href" and "type" key');
          }
      } else {
          throw new Error('Invald CRS. Type attribute must be "name" or "link"');
      }
    }

    // Moves the user-specified geometry parameters
    // under the `geom` key in param for easier access
    function setGeom(params) {
      params.geom = {};

      for(var param in params) {
        if(params.hasOwnProperty(param) && geoms.indexOf(param) !== -1){
          params.geom[param] = params[param];
          delete params[param];
        }
      }

      setGeomAttrList(params.geom);
    }

    // Adds fields which contain geometry data
    // to geomAttrs. This list is used when adding
    // properties to the features so that no geometry
    // fields are added the properties key
    function setGeomAttrList(params) {
      for(var param in params) {
        if(params.hasOwnProperty(param)) {
          if(typeof params[param] === 'string') {
            geomAttrs.push(params[param]);
          } else if (typeof params[param] === 'object') { // Array of coordinates for Point
            geomAttrs.push(params[param][0]);
            geomAttrs.push(params[param][1]);
          }
        }
      }

      if(geomAttrs.length === 0) { throw new Error('No geometry attributes specified'); }
    }

    // Creates a feature object to be added
    // to the GeoJSON features array
    function getFeature(args) {
      var item = args.item,
        params = args.params,
        propFunc = args.propFunc;

      var feature = { "type": "Feature" };

      feature.geometry = buildGeom(item, params);
      feature.properties = propFunc.call(item);

      return feature;
    }

    function isNested(val){
      return (/^.+\..+$/.test(val));
    }

    // Assembles the `geometry` property
    // for the feature output
    function buildGeom(item, params) {
      var geom = {};

      for(var gtype in params.geom) {
        var val = params.geom[gtype];

        // Geometry parameter specified as: {Point: 'coords'}
        if(typeof val === 'string' && item.hasOwnProperty(val)) {
          if(gtype === 'GeoJSON') {
            geom = item[val];
          } else {
            geom.type = gtype;
            geom.coordinates = item[val];
          }
        }

        /* Handle things like:
        Polygon: {
          northeast: ['lat', 'lng'],
          southwest: ['lat', 'lng']
        }
        */
        else if(typeof val === 'object' && !Array.isArray(val)) {
          /*jshint loopfunc: true */
          var points = Object.keys(val).map(function(key){
            var order = val[key];
            var newItem = item[key];
            return buildGeom(newItem, {geom:{ Point: order}});
          });
          geom.type = gtype;
          /*jshint loopfunc: true */
          geom.coordinates = [].concat(points.map(function(p){
            return p.coordinates;
          }));
        }

        // Geometry parameter specified as: {Point: ['lat', 'lng']}
        else if(Array.isArray(val) && item.hasOwnProperty(val[0]) && item.hasOwnProperty(val[1])){
          geom.type = gtype;
          geom.coordinates = [Number(item[val[1]]), Number(item[val[0]])];
        }

        // Geometry parameter specified as: {Point: ['container.lat', 'container.lng']}
        else if(Array.isArray(val) && isNested(val[0]) && isNested(val[1])){
          var coordinates = [];
          for (var i = 0; i < val.length; i++) {	// i.e. 0 and 1
            var paths = val[i].split('.');
            var itemClone = item;
            for (var j = 0; j < paths.length; j++) {
              if (!itemClone.hasOwnProperty(paths[j])) {
                return false;
              }
              itemClone = itemClone[paths[j]];	// Iterate deeper into the object
            }
            coordinates[i] = itemClone;
          }
          geom.type = gtype;
          geom.coordinates = [Number(coordinates[1]), Number(coordinates[0])];
        }
      }

      if(params.doThrows && params.doThrows.invalidGeometry && !GeoJSON.isGeometryValid(geom)){
        throw new InvalidGeometryError(item, params);
      }

      return geom;
    }

    // Returns the function to be used to
    // build the properties object for each feature
    function getPropFunction(params) {
      var func;

      if(!params.exclude && !params.include) {
        func = function(properties) {
          for(var attr in this) {
            if(this.hasOwnProperty(attr) && (geomAttrs.indexOf(attr) === -1)) {
              properties[attr] = this[attr];
            }
          }
        };
      } else if(params.include) {
        func = function(properties) {
          params.include.forEach(function(attr){
            properties[attr] = this[attr];
          }, this);
        };
      } else if(params.exclude) {
        func = function(properties) {
          for(var attr in this) {
            if(this.hasOwnProperty(attr) && (geomAttrs.indexOf(attr) === -1) && (params.exclude.indexOf(attr) === -1)) {
              properties[attr] = this[attr];
            }
          }
        };
      }

      return function() {
        var properties = {};

        func.call(this, properties);

        if(params.extra) { addExtra(properties, params.extra); }
        return properties;
      };
    }

    // Adds data contained in the `extra`
    // parameter if it has been specified
    function addExtra(properties, extra) {
      for(var key in extra){
        if(extra.hasOwnProperty(key)) {
          properties[key] = extra[key];
        }
      }

      return properties;
    }

  }( module.exports ));
  });

  var RADIUS = 6378137;
  var FLATTENING = 1/298.257223563;
  var POLAR_RADIUS = 6356752.3142;

  var wgs84 = {
  	RADIUS: RADIUS,
  	FLATTENING: FLATTENING,
  	POLAR_RADIUS: POLAR_RADIUS
  };

  var geometry_1 = geometry;
  var ring = ringArea;

  function geometry(_) {
      var area = 0, i;
      switch (_.type) {
          case 'Polygon':
              return polygonArea(_.coordinates);
          case 'MultiPolygon':
              for (i = 0; i < _.coordinates.length; i++) {
                  area += polygonArea(_.coordinates[i]);
              }
              return area;
          case 'Point':
          case 'MultiPoint':
          case 'LineString':
          case 'MultiLineString':
              return 0;
          case 'GeometryCollection':
              for (i = 0; i < _.geometries.length; i++) {
                  area += geometry(_.geometries[i]);
              }
              return area;
      }
  }

  function polygonArea(coords) {
      var area = 0;
      if (coords && coords.length > 0) {
          area += Math.abs(ringArea(coords[0]));
          for (var i = 1; i < coords.length; i++) {
              area -= Math.abs(ringArea(coords[i]));
          }
      }
      return area;
  }

  /**
   * Calculate the approximate area of the polygon were it projected onto
   *     the earth.  Note that this area will be positive if ring is oriented
   *     clockwise, otherwise it will be negative.
   *
   * Reference:
   * Robert. G. Chamberlain and William H. Duquette, "Some Algorithms for
   *     Polygons on a Sphere", JPL Publication 07-03, Jet Propulsion
   *     Laboratory, Pasadena, CA, June 2007 http://trs-new.jpl.nasa.gov/dspace/handle/2014/40409
   *
   * Returns:
   * {float} The approximate signed geodesic area of the polygon in square
   *     meters.
   */

  function ringArea(coords) {
      var p1, p2, p3, lowerIndex, middleIndex, upperIndex, i,
      area = 0,
      coordsLength = coords.length;

      if (coordsLength > 2) {
          for (i = 0; i < coordsLength; i++) {
              if (i === coordsLength - 2) {// i = N-2
                  lowerIndex = coordsLength - 2;
                  middleIndex = coordsLength -1;
                  upperIndex = 0;
              } else if (i === coordsLength - 1) {// i = N-1
                  lowerIndex = coordsLength - 1;
                  middleIndex = 0;
                  upperIndex = 1;
              } else { // i = 0 to N-3
                  lowerIndex = i;
                  middleIndex = i+1;
                  upperIndex = i+2;
              }
              p1 = coords[lowerIndex];
              p2 = coords[middleIndex];
              p3 = coords[upperIndex];
              area += ( rad(p3[0]) - rad(p1[0]) ) * Math.sin( rad(p2[1]));
          }

          area = area * wgs84.RADIUS * wgs84.RADIUS / 2;
      }

      return area;
  }

  function rad(_) {
      return _ * Math.PI / 180;
  }

  var geojsonArea = {
  	geometry: geometry_1,
  	ring: ring
  };

  var geojsonRewind = rewind;

  function rewind(gj, outer) {
      switch ((gj && gj.type) || null) {
          case 'FeatureCollection':
              gj.features = gj.features.map(curryOuter(rewind, outer));
              return gj;
          case 'Feature':
              gj.geometry = rewind(gj.geometry, outer);
              return gj;
          case 'Polygon':
          case 'MultiPolygon':
              return correct(gj, outer);
          default:
              return gj;
      }
  }

  function curryOuter(a, b) {
      return function(_) { return a(_, b); };
  }

  function correct(_, outer) {
      if (_.type === 'Polygon') {
          _.coordinates = correctRings(_.coordinates, outer);
      } else if (_.type === 'MultiPolygon') {
          _.coordinates = _.coordinates.map(curryOuter(correctRings, outer));
      }
      return _;
  }

  function correctRings(_, outer) {
      outer = !!outer;
      _[0] = wind(_[0], outer);
      for (var i = 1; i < _.length; i++) {
          _[i] = wind(_[i], !outer);
      }
      return _;
  }

  function wind(_, dir) {
      return cw(_) === dir ? _ : _.reverse();
  }

  function cw(_) {
      return geojsonArea.ring(_) >= 0;
  }

  var MapMultiLayer =
  /*#__PURE__*/
  function () {
    function MapMultiLayer() {
      var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, MapMultiLayer);

      this.data = data;
      this.settings = settings;
      this.init();
    }
    /**
     * Initializes the module
     */


    _createClass(MapMultiLayer, [{
      key: "init",
      value: function init() {
        Vue.component('nyco-map-ml', MapComponent);
        new Vue({
          el: '[data-js="nyco-map-ml"]',
          delimiters: ['v{', '}'],
          data: function data() {
            return {
              layers: MapData.multi.layers,
              config: MapData.multi.config
            };
          },
          created: function created() {
            this.getZipcodeData();
            this.getBoroughData();
            this.getNeighborhoodData();
          },
          methods: {
            getZipcodeData: function getZipcodeData() {
              fetch('https://cdn.jsdelivr.net/gh/kimpenguin/geoJSON@master/tiger-zcta.geojson').then(function (response) {
                if (response.ok) { return response.text(); }else // eslint-disable-next-line no-console
                  if (Utility.debug()) { console.dir(response); }
              })["catch"](function (error) {
                // eslint-disable-next-line no-console
                if (Utility.debug()) { console.dir(error); }
              }).then(function (data) {
                MapData.multi.layers.push({
                  name: 'zipcodes',
                  data: JSON.parse(data),
                  "default": true,
                  filterBy: 'GEOID10'
                });
              });
            },
            getBoroughData: function getBoroughData() {
              var _this = this;

              fetch('https://data.cityofnewyork.us/resource/7t3b-ywvw.json').then(function (response) {
                if (response.ok) { return response.text(); }else // eslint-disable-next-line no-console
                  if (Utility.debug()) { console.dir(response); }
              })["catch"](function (error) {
                // eslint-disable-next-line no-console
                if (Utility.debug()) { console.dir(error); }
              }).then(function (data) {
                data = JSON.parse(data);
                MapData.multi.layers.push({
                  name: 'boroughs',
                  data: _this.convertToGeoJSON(data),
                  "default": false,
                  filterBy: 'boro_name'
                });
              });
            },
            getNeighborhoodData: function getNeighborhoodData() {
              var _this2 = this;

              fetch('https://data.cityofnewyork.us/resource/q2z5-ai38.json').then(function (response) {
                if (response.ok) { return response.text(); }else // eslint-disable-next-line no-console
                  if (Utility.debug()) { console.dir(response); }
              })["catch"](function (error) {
                // eslint-disable-next-line no-console
                if (Utility.debug()) { console.dir(error); }
              }).then(function (data) {
                data = JSON.parse(data);
                MapData.multi.layers.push({
                  name: 'neighborhoods',
                  data: _this2.convertToGeoJSON(data),
                  "default": false,
                  filterBy: 'ntaname'
                });
              });
            },
            convertToGeoJSON: function convertToGeoJSON(jsonData) {
              // ensure geojson satisfies right-hand rule
              var data = geojsonRewind(geojson.parse(jsonData, {
                GeoJSON: 'the_geom'
              }));
              return data;
            }
          }
        });
      }
      /**
       * Logs constants to the debugger
       * @param  {object} param - our constants
       */

    }, {
      key: "_constants",
      value: function _constants(param) {
        console.dir(param);
      }
    }]);

    return MapMultiLayer;
  }();

  var MapSingleLayer =
  /*#__PURE__*/
  function () {
    function MapSingleLayer() {
      var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
      var data = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

      _classCallCheck(this, MapSingleLayer);

      this.data = data;
      this.settings = settings;
      this.init();
    }
    /**
     * Initializes the module
     */


    _createClass(MapSingleLayer, [{
      key: "init",
      value: function init() {
        Vue.component('nyco-map-sl', MapComponent);
        new Vue({
          el: '[data-js="nyco-map-sl"]',
          delimiters: ['v{', '}'],
          data: function data() {
            return {
              layers: MapData.single.layers,
              config: MapData.single.config
            };
          },
          created: function created() {
            this.getData();
          },
          methods: {
            getData: function getData() {
              fetch('https://cdn.jsdelivr.net/gh/kimpenguin/geoJSON@master/nyco-nyc_zipcodes.geojson').then(function (response) {
                if (response.ok) { return response.text(); }else // eslint-disable-next-line no-console
                  if (Utility.debug()) { console.dir(response); }
              })["catch"](function (error) {
                // eslint-disable-next-line no-console
                if (Utility.debug()) { console.dir(error); }
              }).then(function (data) {
                MapData.single.layers.push({
                  name: 'nyco-nyc_zipcodes',
                  data: JSON.parse(data),
                  filterBy: 'ZCTA5CE10',
                  legendColumn: 'BORO',
                  fill: colors_2[3]
                });
              });
            }
          }
        });
      }
      /**
       * Logs constants to the debugger
       * @param  {object} param - our constants
       */

    }, {
      key: "_constants",
      value: function _constants(param) {
        console.dir(param);
      }
    }]);

    return MapSingleLayer;
  }();

  /** import modules here as they are written */

  /**
   * Methods for the global NycoPatterns instance
   */

  var nyco =
  /*#__PURE__*/
  function () {
    function nyco() {
      _classCallCheck(this, nyco);
    }

    _createClass(nyco, [{
      key: "icons",

      /**
       * Method for the Icons Element
       * @param  {String}  path  The path of the icon file
       * @return {Object}        Icons instance
       */
      value: function icons(path) {
        return new Icons(path);
      }
      /**
       * Method for the Feed Object
       * @param   {Object}  settings  Setting for the feed
       * @return  {Object}            Feed instance
       */

    }, {
      key: "feed",
      value: function feed(settings) {
        return new Feed(settings);
      }
      /**
       * Method for the Toggle Utility
       * @return  {Object}  Toggle instance
       */

    }, {
      key: "toggle",
      value: function toggle(settings) {
        return new Toggle();
      }
      /**
       * Method for the Select Elements
       * @return  {Object}  Select instance
       */

    }, {
      key: "select",
      value: function select() {
        return new Select();
      }
      /**
       * Method for the Chart Objects
       * @return  {Object}  Chart instance
       */

    }, {
      key: "chart",
      value: function chart(type) {
        if (type === 'bar') { return new ChartBar(); }
        if (type === 'horizontalBar') { return new ChartHorizontalBar(); }
        if (type === 'line') { return new ChartLine(); }
        if (type === 'pie') { return new ChartPie(); }
      }
      /**
       * Method for the Map Module
       * @return  {Object}  Map Module
       */

    }, {
      key: "map",
      value: function map(type) {
        if (type === 'multi') { return new MapMultiLayer(); }
        if (type === 'single') { return new MapSingleLayer(); }
      }
      /**
       * Method for the Input Autocomplete Element
       * @return  {Object}  Input Autocomplete instance
       */

    }, {
      key: "inputAutocomplete",
      value: function inputAutocomplete() {
        var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
        return new InputAutocomplete(settings);
      }
      /** add APIs here as they are written */

    }]);

    return nyco;
  }();

  return nyco;

}());
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
