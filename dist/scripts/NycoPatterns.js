var NycoPatterns=function(){"use strict";var t=function(){return this};t.debug=function(){return"1"===t.getUrlParameter(t.PARAMS.DEBUG)},t.getUrlParameter=function(t,e){var n=e||window.location.search,r=t.replace(/[\[]/,"\\[").replace(/[\]]/,"\\]"),i=new RegExp("[\\?&]"+r+"=([^&#]*)").exec(n);return null===i?"":decodeURIComponent(i[1].replace(/\+/g," "))},t.localize=function(t){var e=t||"",n=(window.LOCALIZED_STRINGS||[]).filter(function(e){return!(!e.hasOwnProperty("slug")||e.slug!==t)&&e});return n[0]&&n[0].hasOwnProperty("label")?n[0].label:e},t.PARAMS={DEBUG:"debug"},t.SELECTORS={parseMarkdown:'[data-js="markdown"]'};var e=function e(n){return n=n||e.path,fetch(n).then(function(e){if(e.ok)return e.text();t.debug()&&console.dir(e)}).catch(function(e){t.debug()&&console.dir(e)}).then(function(t){var e=document.createElement("div");e.innerHTML=t,e.setAttribute("aria-hidden",!0),e.setAttribute("style","display: none;"),document.body.appendChild(e)}),this};e.path="icons.svg";var n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},i="object"==("undefined"==typeof global?"undefined":n(global))&&global&&global.Object===Object&&global,a="object"==("undefined"==typeof self?"undefined":n(self))&&self&&self.Object===Object&&self,o=i||a||Function("return this")(),s=o.Symbol,l=Object.prototype,u=l.hasOwnProperty,c=l.toString,d=s?s.toStringTag:void 0;var f=Object.prototype.toString;var h="[object Null]",p="[object Undefined]",v=s?s.toStringTag:void 0;function m(t){return null==t?void 0===t?p:h:v&&v in Object(t)?function(t){var e=u.call(t,d),n=t[d];try{t[d]=void 0;var r=!0}catch(t){}var i=c.call(t);return r&&(e?t[d]=n:delete t[d]),i}(t):function(t){return f.call(t)}(t)}function y(t){var e=void 0===t?"undefined":n(t);return null!=t&&("object"==e||"function"==e)}var _="[object AsyncFunction]",x="[object Function]",w="[object GeneratorFunction]",k="[object Proxy]";function S(t){if(!y(t))return!1;var e=m(t);return e==x||e==w||e==_||e==k}var M=o["__core-js_shared__"],C=function(){var t=/[^.]+$/.exec(M&&M.keys&&M.keys.IE_PROTO||"");return t?"Symbol(src)_1."+t:""}();var D=Function.prototype.toString;function A(t){if(null!=t){try{return D.call(t)}catch(t){}try{return t+""}catch(t){}}return""}var O=/^\[object .+?Constructor\]$/,T=Function.prototype,P=Object.prototype,I=T.toString,F=P.hasOwnProperty,L=RegExp("^"+I.call(F).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");function R(t){return!(!y(t)||C&&C in t)&&(S(t)?L:O).test(A(t))}function j(t,e){var n=function(t,e){return null==t?void 0:t[e]}(t,e);return R(n)?n:void 0}var N=function(){try{var t=j(Object,"defineProperty");return t({},"",{}),t}catch(t){}}();function $(t,e,n){"__proto__"==e&&N?N(t,e,{configurable:!0,enumerable:!0,value:n,writable:!0}):t[e]=n}function E(t,e){return t===e||t!=t&&e!=e}var z=Object.prototype.hasOwnProperty;function W(t,e,n){var r=t[e];z.call(t,e)&&E(r,n)&&(void 0!==n||e in t)||$(t,e,n)}function Y(t,e,n,r){var i=!n;n||(n={});for(var a=-1,o=e.length;++a<o;){var s=e[a],l=r?r(n[s],t[s],s,n,t):void 0;void 0===l&&(l=t[s]),i?$(n,s,l):W(n,s,l)}return n}function V(t){return t}function H(t,e,n){switch(n.length){case 0:return t.call(e);case 1:return t.call(e,n[0]);case 2:return t.call(e,n[0],n[1]);case 3:return t.call(e,n[0],n[1],n[2])}return t.apply(e,n)}var B=Math.max;var U=N?function(t,e){return N(t,"toString",{configurable:!0,enumerable:!1,value:(n=e,function(){return n}),writable:!0});var n}:V,q=800,G=16,J=Date.now;var Z=function(t){var e=0,n=0;return function(){var r=J(),i=G-(r-n);if(n=r,i>0){if(++e>=q)return arguments[0]}else e=0;return t.apply(void 0,arguments)}}(U);function K(t,e){return Z(function(t,e,n){return e=B(void 0===e?t.length-1:e,0),function(){for(var r=arguments,i=-1,a=B(r.length-e,0),o=Array(a);++i<a;)o[i]=r[e+i];i=-1;for(var s=Array(e+1);++i<e;)s[i]=r[i];return s[e]=n(o),H(t,this,s)}}(t,e,V),t+"")}var X=9007199254740991;function Q(t){return"number"==typeof t&&t>-1&&t%1==0&&t<=X}function tt(t){return null!=t&&Q(t.length)&&!S(t)}var et=9007199254740991,nt=/^(?:0|[1-9]\d*)$/;function rt(t,e){var r=void 0===t?"undefined":n(t);return!!(e=null==e?et:e)&&("number"==r||"symbol"!=r&&nt.test(t))&&t>-1&&t%1==0&&t<e}function it(t,e,r){if(!y(r))return!1;var i=void 0===e?"undefined":n(e);return!!("number"==i?tt(r)&&rt(e,r.length):"string"==i&&e in r)&&E(r[e],t)}function at(t){return K(function(e,n){var r=-1,i=n.length,a=i>1?n[i-1]:void 0,o=i>2?n[2]:void 0;for(a=t.length>3&&"function"==typeof a?(i--,a):void 0,o&&it(n[0],n[1],o)&&(a=i<3?void 0:a,i=1),e=Object(e);++r<i;){var s=n[r];s&&t(e,s,r,a)}return e})}function ot(t){return null!=t&&"object"==(void 0===t?"undefined":n(t))}var st="[object Arguments]";function lt(t){return ot(t)&&m(t)==st}var ut=Object.prototype,ct=ut.hasOwnProperty,dt=ut.propertyIsEnumerable,ft=lt(function(){return arguments}())?lt:function(t){return ot(t)&&ct.call(t,"callee")&&!dt.call(t,"callee")},ht=Array.isArray;var pt="object"==("undefined"==typeof exports?"undefined":n(exports))&&exports&&!exports.nodeType&&exports,vt=pt&&"object"==("undefined"==typeof module?"undefined":n(module))&&module&&!module.nodeType&&module,gt=vt&&vt.exports===pt?o.Buffer:void 0,mt=(gt?gt.isBuffer:void 0)||function(){return!1},yt={};function bt(t){return function(e){return t(e)}}yt["[object Float32Array]"]=yt["[object Float64Array]"]=yt["[object Int8Array]"]=yt["[object Int16Array]"]=yt["[object Int32Array]"]=yt["[object Uint8Array]"]=yt["[object Uint8ClampedArray]"]=yt["[object Uint16Array]"]=yt["[object Uint32Array]"]=!0,yt["[object Arguments]"]=yt["[object Array]"]=yt["[object ArrayBuffer]"]=yt["[object Boolean]"]=yt["[object DataView]"]=yt["[object Date]"]=yt["[object Error]"]=yt["[object Function]"]=yt["[object Map]"]=yt["[object Number]"]=yt["[object Object]"]=yt["[object RegExp]"]=yt["[object Set]"]=yt["[object String]"]=yt["[object WeakMap]"]=!1;var _t="object"==("undefined"==typeof exports?"undefined":n(exports))&&exports&&!exports.nodeType&&exports,xt=_t&&"object"==("undefined"==typeof module?"undefined":n(module))&&module&&!module.nodeType&&module,wt=xt&&xt.exports===_t&&i.process,kt=function(){try{var t=xt&&xt.require&&xt.require("util").types;return t||wt&&wt.binding&&wt.binding("util")}catch(t){}}(),St=kt&&kt.isTypedArray,Mt=St?bt(St):function(t){return ot(t)&&Q(t.length)&&!!yt[m(t)]},Ct=Object.prototype.hasOwnProperty;function Dt(t,e){var n=ht(t),r=!n&&ft(t),i=!n&&!r&&mt(t),a=!n&&!r&&!i&&Mt(t),o=n||r||i||a,s=o?function(t,e){for(var n=-1,r=Array(t);++n<t;)r[n]=e(n);return r}(t.length,String):[],l=s.length;for(var u in t)!e&&!Ct.call(t,u)||o&&("length"==u||i&&("offset"==u||"parent"==u)||a&&("buffer"==u||"byteLength"==u||"byteOffset"==u)||rt(u,l))||s.push(u);return s}var At=Object.prototype;function Ot(t){var e=t&&t.constructor;return t===("function"==typeof e&&e.prototype||At)}var Tt=Object.prototype.hasOwnProperty;function Pt(t){if(!y(t))return function(t){var e=[];if(null!=t)for(var n in Object(t))e.push(n);return e}(t);var e=Ot(t),n=[];for(var r in t)("constructor"!=r||!e&&Tt.call(t,r))&&n.push(r);return n}function It(t){return tt(t)?Dt(t,!0):Pt(t)}var Ft=at(function(t,e,n,r){Y(e,It(e),t,r)});function Lt(t,e){return function(n){return t(e(n))}}var Rt=Lt(Object.getPrototypeOf,Object),jt="[object Object]",Nt=Function.prototype,$t=Object.prototype,Et=Nt.toString,zt=$t.hasOwnProperty,Wt=Et.call(Object);function Yt(t){if(!ot(t)||m(t)!=jt)return!1;var e=Rt(t);if(null===e)return!0;var n=zt.call(e,"constructor")&&e.constructor;return"function"==typeof n&&n instanceof n&&Et.call(n)==Wt}var Vt="[object DOMException]",Ht="[object Error]";function Bt(t){if(!ot(t))return!1;var e=m(t);return e==Ht||e==Vt||"string"==typeof t.message&&"string"==typeof t.name&&!Yt(t)}var Ut=K(function(t,e){try{return H(t,void 0,e)}catch(t){return Bt(t)?t:new Error(t)}});function qt(t,e){for(var n=-1,r=null==t?0:t.length,i=Array(r);++n<r;)i[n]=e(t[n],n,t);return i}function Gt(t,e){return qt(e,function(e){return t[e]})}var Jt=Object.prototype,Zt=Jt.hasOwnProperty;function Kt(t,e,n,r){return void 0===t||E(t,Jt[n])&&!Zt.call(r,n)?e:t}var Xt={"\\":"\\","'":"'","\n":"n","\r":"r","\u2028":"u2028","\u2029":"u2029"};function Qt(t){return"\\"+Xt[t]}var te=Lt(Object.keys,Object),ee=Object.prototype.hasOwnProperty;function ne(t){return tt(t)?Dt(t):function(t){if(!Ot(t))return te(t);var e=[];for(var n in Object(t))ee.call(t,n)&&"constructor"!=n&&e.push(n);return e}(t)}var re=/<%=([\s\S]+?)%>/g;var ie,ae=(ie={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;"},function(t){return null==ie?void 0:ie[t]}),oe="[object Symbol]";function se(t){return"symbol"==(void 0===t?"undefined":n(t))||ot(t)&&m(t)==oe}var le=1/0,ue=s?s.prototype:void 0,ce=ue?ue.toString:void 0;function de(t){if("string"==typeof t)return t;if(ht(t))return qt(t,de)+"";if(se(t))return ce?ce.call(t):"";var e=t+"";return"0"==e&&1/t==-le?"-0":e}function fe(t){return null==t?"":de(t)}var he=/[&<>"']/g,pe=RegExp(he.source);var ve={escape:/<%-([\s\S]+?)%>/g,evaluate:/<%([\s\S]+?)%>/g,interpolate:re,variable:"",imports:{_:{escape:function(t){return(t=fe(t))&&pe.test(t)?t.replace(he,ae):t}}}},ge=/\b__p \+= '';/g,me=/\b(__p \+=) '' \+/g,ye=/(__e\(.*?\)|\b__t\)) \+\n'';/g,be=/\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g,_e=/($^)/,xe=/['\n\r\u2028\u2029\\]/g;function we(t,e){for(var n=-1,r=null==t?0:t.length;++n<r&&!1!==e(t[n],n,t););return t}var ke,Se=function(t,e,n){for(var r=-1,i=Object(t),a=n(t),o=a.length;o--;){var s=a[ke?o:++r];if(!1===e(i[s],s,i))break}return t};var Me=function(t,e){return function(n,r){if(null==n)return n;if(!tt(n))return t(n,r);for(var i=n.length,a=e?i:-1,o=Object(n);(e?a--:++a<i)&&!1!==r(o[a],a,o););return n}}(function(t,e){return t&&Se(t,e,ne)});function Ce(t,e){var n;return(ht(t)?we:Me)(t,"function"==typeof(n=e)?n:V)}function De(t,e){for(var n=t.length;n--;)if(E(t[n][0],e))return n;return-1}var Ae=Array.prototype.splice;function Oe(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}Oe.prototype.clear=function(){this.__data__=[],this.size=0},Oe.prototype.delete=function(t){var e=this.__data__,n=De(e,t);return!(n<0||(n==e.length-1?e.pop():Ae.call(e,n,1),--this.size,0))},Oe.prototype.get=function(t){var e=this.__data__,n=De(e,t);return n<0?void 0:e[n][1]},Oe.prototype.has=function(t){return De(this.__data__,t)>-1},Oe.prototype.set=function(t,e){var n=this.__data__,r=De(n,t);return r<0?(++this.size,n.push([t,e])):n[r][1]=e,this};var Te=j(o,"Map"),Pe=j(Object,"create");var Ie="__lodash_hash_undefined__",Fe=Object.prototype.hasOwnProperty;var Le=Object.prototype.hasOwnProperty;var Re="__lodash_hash_undefined__";function je(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}function Ne(t,e){var r,i,a=t.__data__;return("string"==(i=void 0===(r=e)?"undefined":n(r))||"number"==i||"symbol"==i||"boolean"==i?"__proto__"!==r:null===r)?a["string"==typeof e?"string":"hash"]:a.map}function $e(t){var e=-1,n=null==t?0:t.length;for(this.clear();++e<n;){var r=t[e];this.set(r[0],r[1])}}je.prototype.clear=function(){this.__data__=Pe?Pe(null):{},this.size=0},je.prototype.delete=function(t){var e=this.has(t)&&delete this.__data__[t];return this.size-=e?1:0,e},je.prototype.get=function(t){var e=this.__data__;if(Pe){var n=e[t];return n===Ie?void 0:n}return Fe.call(e,t)?e[t]:void 0},je.prototype.has=function(t){var e=this.__data__;return Pe?void 0!==e[t]:Le.call(e,t)},je.prototype.set=function(t,e){var n=this.__data__;return this.size+=this.has(t)?0:1,n[t]=Pe&&void 0===e?Re:e,this},$e.prototype.clear=function(){this.size=0,this.__data__={hash:new je,map:new(Te||Oe),string:new je}},$e.prototype.delete=function(t){var e=Ne(this,t).delete(t);return this.size-=e?1:0,e},$e.prototype.get=function(t){return Ne(this,t).get(t)},$e.prototype.has=function(t){return Ne(this,t).has(t)},$e.prototype.set=function(t,e){var n=Ne(this,t),r=n.size;return n.set(t,e),this.size+=n.size==r?0:1,this};var Ee=200;function ze(t){var e=this.__data__=new Oe(t);this.size=e.size}function We(t,e,n){(void 0===n||E(t[e],n))&&(void 0!==n||e in t)||$(t,e,n)}ze.prototype.clear=function(){this.__data__=new Oe,this.size=0},ze.prototype.delete=function(t){var e=this.__data__,n=e.delete(t);return this.size=e.size,n},ze.prototype.get=function(t){return this.__data__.get(t)},ze.prototype.has=function(t){return this.__data__.has(t)},ze.prototype.set=function(t,e){var n=this.__data__;if(n instanceof Oe){var r=n.__data__;if(!Te||r.length<Ee-1)return r.push([t,e]),this.size=++n.size,this;n=this.__data__=new $e(r)}return n.set(t,e),this.size=n.size,this};var Ye="object"==("undefined"==typeof exports?"undefined":n(exports))&&exports&&!exports.nodeType&&exports,Ve=Ye&&"object"==("undefined"==typeof module?"undefined":n(module))&&module&&!module.nodeType&&module,He=Ve&&Ve.exports===Ye?o.Buffer:void 0,Be=He?He.allocUnsafe:void 0;var Ue=o.Uint8Array;function qe(t,e){var n,r,i=e?(n=t.buffer,r=new n.constructor(n.byteLength),new Ue(r).set(new Ue(n)),r):t.buffer;return new t.constructor(i,t.byteOffset,t.length)}var Ge=Object.create,Je=function(){function t(){}return function(e){if(!y(e))return{};if(Ge)return Ge(e);t.prototype=e;var n=new t;return t.prototype=void 0,n}}();function Ze(t,e){if("__proto__"!=e)return t[e]}function Ke(t,e,n,r,i,a,o){var s=Ze(t,n),l=Ze(e,n),u=o.get(l);if(u)We(t,n,u);else{var c,d=a?a(s,l,n+"",t,e,o):void 0,f=void 0===d;if(f){var h=ht(l),p=!h&&mt(l),v=!h&&!p&&Mt(l);d=l,h||p||v?ht(s)?d=s:ot(c=s)&&tt(c)?d=function(t,e){var n=-1,r=t.length;for(e||(e=Array(r));++n<r;)e[n]=t[n];return e}(s):p?(f=!1,d=function(t,e){if(e)return t.slice();var n=t.length,r=Be?Be(n):new t.constructor(n);return t.copy(r),r}(l,!0)):v?(f=!1,d=qe(l,!0)):d=[]:Yt(l)||ft(l)?(d=s,ft(s)?d=function(t){return Y(t,It(t))}(s):y(s)&&!S(s)||(d=function(t){return"function"!=typeof t.constructor||Ot(t)?{}:Je(Rt(t))}(l))):f=!1}f&&(o.set(l,d),i(d,l,r,a,o),o.delete(l)),We(t,n,d)}}function Xe(t,e,n,r,i){t!==e&&Se(e,function(a,o){if(y(a))i||(i=new ze),Ke(t,e,o,n,Xe,r,i);else{var s=r?r(Ze(t,o),a,o+"",t,e,i):void 0;void 0===s&&(s=a),We(t,o,s)}},It)}var Qe=at(function(t,e,n){Xe(t,e,n)});var tn="__lodash_hash_undefined__";function en(t){var e=-1,n=null==t?0:t.length;for(this.__data__=new $e;++e<n;)this.add(t[e])}function nn(t,e){for(var n=-1,r=null==t?0:t.length;++n<r;)if(e(t[n],n,t))return!0;return!1}en.prototype.add=en.prototype.push=function(t){return this.__data__.set(t,tn),this},en.prototype.has=function(t){return this.__data__.has(t)};var rn=1,an=2;function on(t,e,n,r,i,a){var o=n&rn,s=t.length,l=e.length;if(s!=l&&!(o&&l>s))return!1;var u=a.get(t);if(u&&a.get(e))return u==e;var c=-1,d=!0,f=n&an?new en:void 0;for(a.set(t,e),a.set(e,t);++c<s;){var h=t[c],p=e[c];if(r)var v=o?r(p,h,c,e,t,a):r(h,p,c,t,e,a);if(void 0!==v){if(v)continue;d=!1;break}if(f){if(!nn(e,function(t,e){if(o=e,!f.has(o)&&(h===t||i(h,t,n,r,a)))return f.push(e);var o})){d=!1;break}}else if(h!==p&&!i(h,p,n,r,a)){d=!1;break}}return a.delete(t),a.delete(e),d}function sn(t){var e=-1,n=Array(t.size);return t.forEach(function(t,r){n[++e]=[r,t]}),n}function ln(t){var e=-1,n=Array(t.size);return t.forEach(function(t){n[++e]=t}),n}var un=1,cn=2,dn="[object Boolean]",fn="[object Date]",hn="[object Error]",pn="[object Map]",vn="[object Number]",gn="[object RegExp]",mn="[object Set]",yn="[object String]",bn="[object Symbol]",_n="[object ArrayBuffer]",xn="[object DataView]",wn=s?s.prototype:void 0,kn=wn?wn.valueOf:void 0;var Sn=Object.prototype.propertyIsEnumerable,Mn=Object.getOwnPropertySymbols,Cn=Mn?function(t){return null==t?[]:(t=Object(t),function(t,e){for(var n=-1,r=null==t?0:t.length,i=0,a=[];++n<r;){var o=t[n];e(o,n,t)&&(a[i++]=o)}return a}(Mn(t),function(e){return Sn.call(t,e)}))}:function(){return[]};function Dn(t){return function(t,e,n){var r=e(t);return ht(t)?r:function(t,e){for(var n=-1,r=e.length,i=t.length;++n<r;)t[i+n]=e[n];return t}(r,n(t))}(t,ne,Cn)}var An=1,On=Object.prototype.hasOwnProperty;var Tn=j(o,"DataView"),Pn=j(o,"Promise"),In=j(o,"Set"),Fn=j(o,"WeakMap"),Ln=A(Tn),Rn=A(Te),jn=A(Pn),Nn=A(In),$n=A(Fn),En=m;(Tn&&"[object DataView]"!=En(new Tn(new ArrayBuffer(1)))||Te&&"[object Map]"!=En(new Te)||Pn&&"[object Promise]"!=En(Pn.resolve())||In&&"[object Set]"!=En(new In)||Fn&&"[object WeakMap]"!=En(new Fn))&&(En=function(t){var e=m(t),n="[object Object]"==e?t.constructor:void 0,r=n?A(n):"";if(r)switch(r){case Ln:return"[object DataView]";case Rn:return"[object Map]";case jn:return"[object Promise]";case Nn:return"[object Set]";case $n:return"[object WeakMap]"}return e});var zn=En,Wn=1,Yn="[object Arguments]",Vn="[object Array]",Hn="[object Object]",Bn=Object.prototype.hasOwnProperty;function Un(t,e,n,r,i,a){var o=ht(t),s=ht(e),l=o?Vn:zn(t),u=s?Vn:zn(e),c=(l=l==Yn?Hn:l)==Hn,d=(u=u==Yn?Hn:u)==Hn,f=l==u;if(f&&mt(t)){if(!mt(e))return!1;o=!0,c=!1}if(f&&!c)return a||(a=new ze),o||Mt(t)?on(t,e,n,r,i,a):function(t,e,n,r,i,a,o){switch(n){case xn:if(t.byteLength!=e.byteLength||t.byteOffset!=e.byteOffset)return!1;t=t.buffer,e=e.buffer;case _n:return!(t.byteLength!=e.byteLength||!a(new Ue(t),new Ue(e)));case dn:case fn:case vn:return E(+t,+e);case hn:return t.name==e.name&&t.message==e.message;case gn:case yn:return t==e+"";case pn:var s=sn;case mn:var l=r&un;if(s||(s=ln),t.size!=e.size&&!l)return!1;var u=o.get(t);if(u)return u==e;r|=cn,o.set(t,e);var c=on(s(t),s(e),r,i,a,o);return o.delete(t),c;case bn:if(kn)return kn.call(t)==kn.call(e)}return!1}(t,e,l,n,r,i,a);if(!(n&Wn)){var h=c&&Bn.call(t,"__wrapped__"),p=d&&Bn.call(e,"__wrapped__");if(h||p){var v=h?t.value():t,g=p?e.value():e;return a||(a=new ze),i(v,g,n,r,a)}}return!!f&&(a||(a=new ze),function(t,e,n,r,i,a){var o=n&An,s=Dn(t),l=s.length;if(l!=Dn(e).length&&!o)return!1;for(var u=l;u--;){var c=s[u];if(!(o?c in e:On.call(e,c)))return!1}var d=a.get(t);if(d&&a.get(e))return d==e;var f=!0;a.set(t,e),a.set(e,t);for(var h=o;++u<l;){var p=t[c=s[u]],v=e[c];if(r)var g=o?r(v,p,c,e,t,a):r(p,v,c,t,e,a);if(!(void 0===g?p===v||i(p,v,n,r,a):g)){f=!1;break}h||(h="constructor"==c)}if(f&&!h){var m=t.constructor,y=e.constructor;m!=y&&"constructor"in t&&"constructor"in e&&!("function"==typeof m&&m instanceof m&&"function"==typeof y&&y instanceof y)&&(f=!1)}return a.delete(t),a.delete(e),f}(t,e,n,r,i,a))}function qn(t,e,n,r,i){return t===e||(null==t||null==e||!ot(t)&&!ot(e)?t!=t&&e!=e:Un(t,e,n,r,qn,i))}var Gn=1,Jn=2;function Zn(t){return t==t&&!y(t)}function Kn(t,e){return function(n){return null!=n&&(n[t]===e&&(void 0!==e||t in Object(n)))}}function Xn(t){var e=function(t){for(var e=ne(t),n=e.length;n--;){var r=e[n],i=t[r];e[n]=[r,i,Zn(i)]}return e}(t);return 1==e.length&&e[0][2]?Kn(e[0][0],e[0][1]):function(n){return n===t||function(t,e,n,r){var i=n.length,a=i,o=!r;if(null==t)return!a;for(t=Object(t);i--;){var s=n[i];if(o&&s[2]?s[1]!==t[s[0]]:!(s[0]in t))return!1}for(;++i<a;){var l=(s=n[i])[0],u=t[l],c=s[1];if(o&&s[2]){if(void 0===u&&!(l in t))return!1}else{var d=new ze;if(r)var f=r(u,c,l,t,e,d);if(!(void 0===f?qn(c,u,Gn|Jn,r,d):f))return!1}}return!0}(n,t,e)}}var Qn=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,tr=/^\w*$/;function er(t,e){if(ht(t))return!1;var r=void 0===t?"undefined":n(t);return!("number"!=r&&"symbol"!=r&&"boolean"!=r&&null!=t&&!se(t))||(tr.test(t)||!Qn.test(t)||null!=e&&t in Object(e))}var nr="Expected a function";function rr(t,e){if("function"!=typeof t||null!=e&&"function"!=typeof e)throw new TypeError(nr);var n=function n(){var r=arguments,i=e?e.apply(this,r):r[0],a=n.cache;if(a.has(i))return a.get(i);var o=t.apply(this,r);return n.cache=a.set(i,o)||a,o};return n.cache=new(rr.Cache||$e),n}rr.Cache=$e;var ir=500;var ar=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,or=/\\(\\)?/g,sr=function(t){var e=rr(t,function(t){return n.size===ir&&n.clear(),t}),n=e.cache;return e}(function(t){var e=[];return 46===t.charCodeAt(0)&&e.push(""),t.replace(ar,function(t,n,r,i){e.push(r?i.replace(or,"$1"):n||t)}),e});function lr(t,e){return ht(t)?t:er(t,e)?[t]:sr(fe(t))}var ur=1/0;function cr(t){if("string"==typeof t||se(t))return t;var e=t+"";return"0"==e&&1/t==-ur?"-0":e}function dr(t,e){for(var n=0,r=(e=lr(e,t)).length;null!=t&&n<r;)t=t[cr(e[n++])];return n&&n==r?t:void 0}function fr(t,e){return null!=t&&e in Object(t)}function hr(t,e){return null!=t&&function(t,e,n){for(var r=-1,i=(e=lr(e,t)).length,a=!1;++r<i;){var o=cr(e[r]);if(!(a=null!=t&&n(t,o)))break;t=t[o]}return a||++r!=i?a:!!(i=null==t?0:t.length)&&Q(i)&&rt(o,i)&&(ht(t)||ft(t))}(t,e,fr)}var pr=1,vr=2;function gr(t,e){return er(t)&&Zn(e)?Kn(cr(t),e):function(n){var r=function(t,e,n){var r=null==t?void 0:dr(t,e);return void 0===r?n:r}(n,t);return void 0===r&&r===e?hr(n,t):qn(e,r,pr|vr)}}function mr(t){return er(t)?(e=cr(t),function(t){return null==t?void 0:t[e]}):function(t){return function(e){return dr(e,t)}}(t);var e}function yr(t){return"function"==typeof t?t:null==t?V:"object"==(void 0===t?"undefined":n(t))?ht(t)?gr(t[0],t[1]):Xn(t):mr(t)}function br(t,e){if(t!==e){var n=void 0!==t,r=null===t,i=t==t,a=se(t),o=void 0!==e,s=null===e,l=e==e,u=se(e);if(!s&&!u&&!a&&t>e||a&&o&&l&&!s&&!u||r&&o&&l||!n&&l||!i)return 1;if(!r&&!a&&!u&&t<e||u&&n&&i&&!r&&!a||s&&n&&i||!o&&i||!l)return-1}return 0}function _r(t,e,n){var r=-1;return e=qt(e.length?e:[V],bt(yr)),function(t,e){var n=t.length;for(t.sort(e);n--;)t[n]=t[n].value;return t}(function(t,e){var n=-1,r=tt(t)?Array(t.length):[];return Me(t,function(t,i,a){r[++n]=e(t,i,a)}),r}(t,function(t,n,i){return{criteria:qt(e,function(e){return e(t)}),index:++r,value:t}}),function(t,e){return function(t,e,n){for(var r=-1,i=t.criteria,a=e.criteria,o=i.length,s=n.length;++r<o;){var l=br(i[r],a[r]);if(l)return r>=s?l:l*("desc"==n[r]?-1:1)}return t.index-e.index}(t,e,n)})}In&&ln(new In([,-0]))[1];var xr=function t(e){this.default=t.default,this._settings=Qe({},t.default,e),this.init()};xr.prototype.init=function(){var t=this,e=[],n=this._settings.feed,r={rssToJson:xr.rssToJson,rssUrl:Array.isArray(n)?n:[n]};return Ce(r.rssUrl,function(n,i){t._request(r,n).then(function(n){if(e.push(t._process(JSON.parse(n),t._settings)),e.length===r.rssUrl.length){t._merge(e,t._settings);var i=t._render(t._merge(e,t._settings),t._settings),a=document.querySelector(t._settings.selector);a&&(a.innerHTML=i)}})}),this},xr.prototype._request=function(t,e){return new Promise(function(n,r){var i=new XMLHttpRequest;i.onreadystatechange=function(t){var e=t.target;4===e.readyState&&(e.status>=200&&e.status<400?n(e.response):r(new Error(e.status)))},i.ontimeout=function(){r(new Error("The Feed request timed out"))},i.open("GET",t.rssToJson+"?rss_url="+e,!0),i.send(),i=null})},xr.prototype._process=function(t,e){return xr.process[e.type](t,e)},xr.prototype._merge=function(t,e){return xr.merge[e.type](t)},xr.prototype._render=function(t,e){var n;return t.settings=e,e.log&&console.dir(t),function(t,e,n){var r=ve.imports._.templateSettings||ve;n&&it(t,e,n)&&(e=void 0),t=fe(t),e=Ft({},e,r,Kt);var i,a,o=Ft({},e.imports,r.imports,Kt),s=ne(o),l=Gt(o,s),u=0,c=e.interpolate||_e,d="__p += '",f=RegExp((e.escape||_e).source+"|"+c.source+"|"+(c===re?be:_e).source+"|"+(e.evaluate||_e).source+"|$","g"),h="sourceURL"in e?"//# sourceURL="+e.sourceURL+"\n":"";t.replace(f,function(e,n,r,o,s,l){return r||(r=o),d+=t.slice(u,l).replace(xe,Qt),n&&(i=!0,d+="' +\n__e("+n+") +\n'"),s&&(a=!0,d+="';\n"+s+";\n__p += '"),r&&(d+="' +\n((__t = ("+r+")) == null ? '' : __t) +\n'"),u=l+e.length,e}),d+="';\n";var p=e.variable;p||(d="with (obj) {\n"+d+"\n}\n"),d=(a?d.replace(ge,""):d).replace(me,"$1").replace(ye,"$1;"),d="function("+(p||"obj")+") {\n"+(p?"":"obj || (obj = {});\n")+"var __t, __p = ''"+(i?", __e = _.escape":"")+(a?", __j = Array.prototype.join;\nfunction print() { __p += __j.call(arguments, '') }\n":";\n")+d+"return __p\n}";var v=Ut(function(){return Function(s,h+"return "+d).apply(void 0,l)});if(v.source=d,Bt(v))throw v;return v}((n=e.templates,null==n?[]:Gt(n,ne(n))).join(""),{imports:{_each:Ce}})(t)},xr.rssToJson="https://api.rss2json.com/v1/api.json",xr.templates={medium:{opener:['<section class="o-feed <%- settings.classes.wrapper %>" style="',"<% if (settings.fontSize) { %>font-size: <%- settings.fontSize %>;<% } %>","<% if (settings.postBorderColor) { %>border-color: <%- settings.postBorderColor %>;<% } %>",'">'],header:['<header class="o-feed__header <%- settings.classes.header %>">','<div class="o-feed__avatar <%- settings.classes.avatar %>">','<img src="','<% if (settings.profileImg !== "") { %>',"<%- settings.profileImg %>","<% } else { %>","<%- feed.profileImg %>",'<% } %>" ','width="<%- settings.ratioProfile[0] %>" ','height="<%- settings.ratioProfile[1] %>">',"</div>",'<a class="o-feed__url <%- settings.classes.avatar %>" ','href="<% if (settings.titleUrl !== "") { %>',"<%- settings.titleUrl %>","<% } else { %>","<%- feed.url %>",'<% } %>" ','target="_blank" rel="noopener noreferrer nofollow">','<% if (settings.title !== "") { %>',"<%- settings.title %>","<% } else { %>","<%- feed.title %>","<% } %>","</a>","</header>"],posts:['<div class="o-feed__items" style="',"border-color: <%- settings.postBorderColor %>;",'">',"<% _each(items, function(post) { %>",'<div class="c-feed-item <%- settings.classes.feedItem %>">','<h4 class="c-feed-item__title <%- settings.classes.title %>">','<a class="c-feed-item__link <%- settings.classes.link %>"','href="<%- post.guid %>"','target="_blank"','rel="noopener noreferrer nofollow">',"<%- post.title %>","</a>","</h4>",'<span class="c-feed-item__date <%- settings.classes.date %>" ','title="<%- settings.postDateTitle %>">',"<%- post.date %>","</span>",'<div class="c-feed-item__thumbnail <%- settings.classes.thumbnail %>"','style="',"background-image: url(<%- post.thumbnail %>);",'height: <%- settings.postImgHeight %>;"','aria-hidden="true">','<img style="display: none;" src="<%- post.thumbnail %>" alt="<%- post.title %>">',"</div>",'<p class="c-feed-item__excerpt <%- settings.classes.excerpt %>">',"<%- post.excerpt %><%- settings.postExcerptTrail %>","</p>",'<div class="c-feed-item__footer <%- settings.classes.itemFooter %>">','<a class="c-feed-item__cta <%- settings.classes.cta %>" ','href="<%- post.guid %>" ','target="_blank" ','rel="noopener noreferrer nofollow">',"<%- settings.postCtaText %>","</a>","</div>","</div>","<% }); %>","</div>"],closer:["</section>"]}},xr.process={medium:function(t,e){var n=e.postExcerptLength;return Ce(t.items,function(t,r){var i,a="";return a=(a=(a=(a=t.description.replace(/<figure.*>.*?<\/figure>/g,"")).replace(/<(.|\n)*?>/g,"")).substr(0,n)).substr(0,Math.min(a.length,a.lastIndexOf(" "))),t.excerpt=a,i=new Date(Date.parse(t.pubDate.replace(" ","T"))).toLocaleDateString(e.postDateLocal,e.postDateFormat),t.date=i,t}),t}},xr.merge={medium:function(t){var e,n,r,i,a={},o=[];return t.forEach(function(t){o=o.concat(t.items)}),t.forEach(function(t){a=Qe(a,t)}),a.items=(n="pubDate",r="desc",null==(e=o)?[]:(ht(n)||(n=null==n?[]:[n]),ht(r=i?void 0:r)||(r=null==r?[]:[r]),_r(e,n,r))),a}},xr.default={feed:"",selector:"#js-feed",type:"medium",title:"",titleUrl:"",profileImg:"",fontSize:"",ratioProfile:["50","50"],postBorderColor:"lightsteelblue",postImgHeight:"200px",postExcerptLength:120,postExcerptTrail:"…",postCtaText:"Read the full post",postDateLocal:"en-US",postDateFormat:{year:"numeric",month:"long",day:"numeric"},postDateTitle:"Published Date",classes:{wrapper:"",header:"",url:"",feedItem:"",title:"",link:"",thumbnail:"",excerpt:"",itemFooter:"",cta:"",date:""},templates:{opener:xr.templates.medium.opener.join(""),header:xr.templates.medium.header.join(""),posts:xr.templates.medium.posts.join(""),closer:xr.templates.medium.closer.join("")},log:!1,unique:!1};var wr=function t(e){var n=this,r=document.querySelector("body");return e=e||{},this._settings={selector:e.selector?e.selector:t.selector,namespace:e.namespace?e.namespace:t.namespace,inactiveClass:e.inactiveClass?e.inactiveClass:t.inactiveClass,activeClass:e.activeClass?e.activeClass:t.activeClass},r.addEventListener("click",function(t){t.target.matches(n._settings.selector)&&(t.preventDefault(),n._toggle(t))}),this};wr.prototype._toggle=function(t){var e=this,n=t.target,r=!1;if(r=n.getAttribute("href")?document.querySelector(n.getAttribute("href")):r,!(r=n.getAttribute("aria-controls")?document.querySelector("#"+n.getAttribute("aria-controls")):r))return this;if(this.elementToggle(n,r),n.dataset[this._settings.namespace+"Undo"]){var i=document.querySelector(n.dataset[this._settings.namespace+"Undo"]);i.addEventListener("click",function(t){t.preventDefault(),e.elementToggle(n,r),i.removeEventListener("click")})}return this},wr.prototype.elementToggle=function(t,e){""!==this._settings.activeClass&&(t.classList.toggle(this._settings.activeClass),e.classList.toggle(this._settings.activeClass)),""!==this._settings.inactiveClass&&e.classList.toggle(this._settings.inactiveClass);for(var n=0;n<wr.elAriaRoles.length;n++)t.getAttribute(wr.elAriaRoles[n])&&t.setAttribute(wr.elAriaRoles[n],!("true"===t.getAttribute(wr.elAriaRoles[n])));for(var r=0;r<wr.targetAriaRoles.length;r++)e.getAttribute(wr.targetAriaRoles[r])&&e.setAttribute(wr.targetAriaRoles[r],!("true"===e.getAttribute(wr.targetAriaRoles[r])));return t.getAttribute("href")&&e.classList.contains(this._settings.activeClass)&&(window.location.hash="",window.location.hash=t.getAttribute("href")),this},wr.selector='[data-js*="toggle"]',wr.namespace="toggle",wr.inactiveClass="hidden",wr.activeClass="active",wr.elAriaRoles=["aria-pressed","aria-expanded"],wr.targetAriaRoles=["aria-hidden"];var kr=function t(e){var n=this,r=document.querySelector("body");return e=e||{},this._settings={selector:e.selector?e.selector:t.selector},r.addEventListener("click",function(t){if(t.target.matches(n._settings.selector)){var e=t.target.dataset.trackKey,r=JSON.parse(t.target.dataset.trackData);n.click(e,r)}}),this};kr.prototype.click=function(e,n){var r=n.map(function(t){return t.hasOwnProperty(kr.key)&&(t[kr.key]=window.location.pathname+"/"+t[kr.key]),t}),i=this.webtrends(e,r),a=this.gtag(e,r);return t.debug()&&console.dir({Track:[i,a]}),r},kr.prototype.view=function(e,n,r){var i=this.webtrends(n,r),a=this.gtagView(e,n);t.debug()&&console.dir({Track:[i,a]})},kr.prototype.webtrends=function(t,e){var n=[{"WT.ti":t}];e[0]&&e[0].hasOwnProperty(kr.key)?n.push({"DCS.dcsuri":e[0][kr.key]}):Object.assign(n,e);var r={argsa:n.flatMap(function(t){return Object.keys(t).flatMap(function(e){return[e,t[e]]})})};return"undefined"!=typeof Webtrends&&Webtrends.multiTrack(r),["Webtrends",r]},kr.prototype.gtag=function(t,e){var n=e.find(function(t){return t.hasOwnProperty(kr.key)}),r={event_category:t};return"undefined"!=typeof gtag&&gtag(kr.key,n[kr.key],r),["gtag",kr.key,n[kr.key],r]},kr.prototype.gtagView=function(t,e){var n={app_name:t,screen_name:e};return"undefined"!=typeof gtag&&gtag("event","screen_view",n),["gtag",kr.key,"screen_view",n]},kr.selector='[data-js*="track"]',kr.key="event";var Sr=Object.freeze({});function Mr(t){return void 0===t||null===t}function Cr(t){return void 0!==t&&null!==t}function Dr(t){return!0===t}function Ar(t){return"string"==typeof t||"number"==typeof t||"symbol"===(void 0===t?"undefined":n(t))||"boolean"==typeof t}function Or(t){return null!==t&&"object"===(void 0===t?"undefined":n(t))}var Tr=Object.prototype.toString;function Pr(t){return Tr.call(t).slice(8,-1)}function Ir(t){return"[object Object]"===Tr.call(t)}function Fr(t){return"[object RegExp]"===Tr.call(t)}function Lr(t){var e=parseFloat(String(t));return e>=0&&Math.floor(e)===e&&isFinite(t)}function Rr(t){return Cr(t)&&"function"==typeof t.then&&"function"==typeof t.catch}function jr(t){return null==t?"":Array.isArray(t)||Ir(t)&&t.toString===Tr?JSON.stringify(t,null,2):String(t)}function Nr(t){var e=parseFloat(t);return isNaN(e)?t:e}function $r(t,e){for(var n=Object.create(null),r=t.split(","),i=0;i<r.length;i++)n[r[i]]=!0;return e?function(t){return n[t.toLowerCase()]}:function(t){return n[t]}}var Er=$r("slot,component",!0),zr=$r("key,ref,slot,slot-scope,is");function Wr(t,e){if(t.length){var n=t.indexOf(e);if(n>-1)return t.splice(n,1)}}var Yr=Object.prototype.hasOwnProperty;function Vr(t,e){return Yr.call(t,e)}function Hr(t){var e=Object.create(null);return function(n){return e[n]||(e[n]=t(n))}}var Br=/-(\w)/g,Ur=Hr(function(t){return t.replace(Br,function(t,e){return e?e.toUpperCase():""})}),qr=Hr(function(t){return t.charAt(0).toUpperCase()+t.slice(1)}),Gr=/\B([A-Z])/g,Jr=Hr(function(t){return t.replace(Gr,"-$1").toLowerCase()});var Zr=Function.prototype.bind?function(t,e){return t.bind(e)}:function(t,e){function n(n){var r=arguments.length;return r?r>1?t.apply(e,arguments):t.call(e,n):t.call(e)}return n._length=t.length,n};function Kr(t,e){e=e||0;for(var n=t.length-e,r=new Array(n);n--;)r[n]=t[n+e];return r}function Xr(t,e){for(var n in e)t[n]=e[n];return t}function Qr(t){for(var e={},n=0;n<t.length;n++)t[n]&&Xr(e,t[n]);return e}function ti(t,e,n){}var ei=function(t,e,n){return!1},ni=function(t){return t};function ri(t,e){if(t===e)return!0;var n=Or(t),r=Or(e);if(!n||!r)return!n&&!r&&String(t)===String(e);try{var i=Array.isArray(t),a=Array.isArray(e);if(i&&a)return t.length===e.length&&t.every(function(t,n){return ri(t,e[n])});if(t instanceof Date&&e instanceof Date)return t.getTime()===e.getTime();if(i||a)return!1;var o=Object.keys(t),s=Object.keys(e);return o.length===s.length&&o.every(function(n){return ri(t[n],e[n])})}catch(t){return!1}}function ii(t,e){for(var n=0;n<t.length;n++)if(ri(t[n],e))return n;return-1}function ai(t){var e=!1;return function(){e||(e=!0,t.apply(this,arguments))}}var oi="data-server-rendered",si=["component","directive","filter"],li=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],ui={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!0,devtools:!0,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:ei,isReservedAttr:ei,isUnknownElement:ei,getTagNamespace:ti,parsePlatformTagName:ni,mustUseProp:ei,async:!0,_lifecycleHooks:li},ci="a-zA-Z·À-ÖØ-öø-ͽͿ-῿‌-‍‿-⁀⁰-↏Ⰰ-⿯、-퟿豈-﷏ﷰ-�";function di(t){var e=(t+"").charCodeAt(0);return 36===e||95===e}function fi(t,e,n,r){Object.defineProperty(t,e,{value:n,enumerable:!!r,writable:!0,configurable:!0})}var hi=new RegExp("[^"+ci+".$_\\d]");var pi,vi="__proto__"in{},gi="undefined"!=typeof window,mi="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,yi=mi&&WXEnvironment.platform.toLowerCase(),bi=gi&&window.navigator.userAgent.toLowerCase(),_i=bi&&/msie|trident/.test(bi),xi=bi&&bi.indexOf("msie 9.0")>0,wi=bi&&bi.indexOf("edge/")>0,ki=(bi&&bi.indexOf("android"),bi&&/iphone|ipad|ipod|ios/.test(bi)||"ios"===yi),Si=(bi&&/chrome\/\d+/.test(bi),bi&&/phantomjs/.test(bi),bi&&bi.match(/firefox\/(\d+)/)),Mi={}.watch,Ci=!1;if(gi)try{var Di={};Object.defineProperty(Di,"passive",{get:function(){Ci=!0}}),window.addEventListener("test-passive",null,Di)}catch(t){}var Ai=function(){return void 0===pi&&(pi=!gi&&!mi&&"undefined"!=typeof global&&(global.process&&"server"===global.process.env.VUE_ENV)),pi},Oi=gi&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function Ti(t){return"function"==typeof t&&/native code/.test(t.toString())}var Pi,Ii="undefined"!=typeof Symbol&&Ti(Symbol)&&"undefined"!=typeof Reflect&&Ti(Reflect.ownKeys);Pi="undefined"!=typeof Set&&Ti(Set)?Set:function(){function t(){this.set=Object.create(null)}return t.prototype.has=function(t){return!0===this.set[t]},t.prototype.add=function(t){this.set[t]=!0},t.prototype.clear=function(){this.set=Object.create(null)},t}();var Fi=ti,Li=ti,Ri=ti,ji=ti,Ni="undefined"!=typeof console,$i=/(?:^|[-_])(\w)/g;Fi=function(t,e){var n=e?Ri(e):"";ui.warnHandler?ui.warnHandler.call(null,t,e,n):Ni&&!ui.silent&&console.error("[Vue warn]: "+t+n)},Li=function(t,e){Ni&&!ui.silent&&console.warn("[Vue tip]: "+t+(e?Ri(e):""))},ji=function(t,e){if(t.$root===t)return"<Root>";var n="function"==typeof t&&null!=t.cid?t.options:t._isVue?t.$options||t.constructor.options:t,r=n.name||n._componentTag,i=n.__file;if(!r&&i){var a=i.match(/([^/\\]+)\.vue$/);r=a&&a[1]}return(r?"<"+r.replace($i,function(t){return t.toUpperCase()}).replace(/[-_]/g,"")+">":"<Anonymous>")+(i&&!1!==e?" at "+i:"")};Ri=function(t){if(t._isVue&&t.$parent){for(var e=[],n=0;t;){if(e.length>0){var r=e[e.length-1];if(r.constructor===t.constructor){n++,t=t.$parent;continue}n>0&&(e[e.length-1]=[r,n],n=0)}e.push(t),t=t.$parent}return"\n\nfound in\n\n"+e.map(function(t,e){return""+(0===e?"---\x3e ":function(t,e){for(var n="";e;)e%2==1&&(n+=t),e>1&&(t+=t),e>>=1;return n}(" ",5+2*e))+(Array.isArray(t)?ji(t[0])+"... ("+t[1]+" recursive calls)":ji(t))}).join("\n")}return"\n\n(found in "+ji(t)+")"};var Ei=0,zi=function(){this.id=Ei++,this.subs=[]};zi.prototype.addSub=function(t){this.subs.push(t)},zi.prototype.removeSub=function(t){Wr(this.subs,t)},zi.prototype.depend=function(){zi.target&&zi.target.addDep(this)},zi.prototype.notify=function(){var t=this.subs.slice();ui.async||t.sort(function(t,e){return t.id-e.id});for(var e=0,n=t.length;e<n;e++)t[e].update()},zi.target=null;var Wi=[];function Yi(t){Wi.push(t),zi.target=t}function Vi(){Wi.pop(),zi.target=Wi[Wi.length-1]}var Hi=function(t,e,n,r,i,a,o,s){this.tag=t,this.data=e,this.children=n,this.text=r,this.elm=i,this.ns=void 0,this.context=a,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=o,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},Bi={child:{configurable:!0}};Bi.child.get=function(){return this.componentInstance},Object.defineProperties(Hi.prototype,Bi);var Ui=function(t){void 0===t&&(t="");var e=new Hi;return e.text=t,e.isComment=!0,e};function qi(t){return new Hi(void 0,void 0,void 0,String(t))}function Gi(t){var e=new Hi(t.tag,t.data,t.children&&t.children.slice(),t.text,t.elm,t.context,t.componentOptions,t.asyncFactory);return e.ns=t.ns,e.isStatic=t.isStatic,e.key=t.key,e.isComment=t.isComment,e.fnContext=t.fnContext,e.fnOptions=t.fnOptions,e.fnScopeId=t.fnScopeId,e.asyncMeta=t.asyncMeta,e.isCloned=!0,e}var Ji=Array.prototype,Zi=Object.create(Ji);["push","pop","shift","unshift","splice","sort","reverse"].forEach(function(t){var e=Ji[t];fi(Zi,t,function(){for(var n=[],r=arguments.length;r--;)n[r]=arguments[r];var i,a=e.apply(this,n),o=this.__ob__;switch(t){case"push":case"unshift":i=n;break;case"splice":i=n.slice(2)}return i&&o.observeArray(i),o.dep.notify(),a})});var Ki=Object.getOwnPropertyNames(Zi),Xi=!0;function Qi(t){Xi=t}var ta=function(t){var e;this.value=t,this.dep=new zi,this.vmCount=0,fi(t,"__ob__",this),Array.isArray(t)?(vi?(e=Zi,t.__proto__=e):function(t,e,n){for(var r=0,i=n.length;r<i;r++){var a=n[r];fi(t,a,e[a])}}(t,Zi,Ki),this.observeArray(t)):this.walk(t)};function ea(t,e){var n;if(Or(t)&&!(t instanceof Hi))return Vr(t,"__ob__")&&t.__ob__ instanceof ta?n=t.__ob__:Xi&&!Ai()&&(Array.isArray(t)||Ir(t))&&Object.isExtensible(t)&&!t._isVue&&(n=new ta(t)),e&&n&&n.vmCount++,n}function na(t,e,n,r,i){var a=new zi,o=Object.getOwnPropertyDescriptor(t,e);if(!o||!1!==o.configurable){var s=o&&o.get,l=o&&o.set;s&&!l||2!==arguments.length||(n=t[e]);var u=!i&&ea(n);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:function(){var e=s?s.call(t):n;return zi.target&&(a.depend(),u&&(u.dep.depend(),Array.isArray(e)&&function t(e){for(var n=void 0,r=0,i=e.length;r<i;r++)(n=e[r])&&n.__ob__&&n.__ob__.dep.depend(),Array.isArray(n)&&t(n)}(e))),e},set:function(e){var o=s?s.call(t):n;e===o||e!=e&&o!=o||(r&&r(),s&&!l||(l?l.call(t,e):n=e,u=!i&&ea(e),a.notify()))}})}}function ra(t,e,n){if((Mr(t)||Ar(t))&&Fi("Cannot set reactive property on undefined, null, or primitive value: "+t),Array.isArray(t)&&Lr(e))return t.length=Math.max(t.length,e),t.splice(e,1,n),n;if(e in t&&!(e in Object.prototype))return t[e]=n,n;var r=t.__ob__;return t._isVue||r&&r.vmCount?(Fi("Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option."),n):r?(na(r.value,e,n),r.dep.notify(),n):(t[e]=n,n)}function ia(t,e){if((Mr(t)||Ar(t))&&Fi("Cannot delete reactive property on undefined, null, or primitive value: "+t),Array.isArray(t)&&Lr(e))t.splice(e,1);else{var n=t.__ob__;t._isVue||n&&n.vmCount?Fi("Avoid deleting properties on a Vue instance or its root $data - just set it to null."):Vr(t,e)&&(delete t[e],n&&n.dep.notify())}}ta.prototype.walk=function(t){for(var e=Object.keys(t),n=0;n<e.length;n++)na(t,e[n])},ta.prototype.observeArray=function(t){for(var e=0,n=t.length;e<n;e++)ea(t[e])};var aa=ui.optionMergeStrategies;function oa(t,e){if(!e)return t;for(var n,r,i,a=Ii?Reflect.ownKeys(e):Object.keys(e),o=0;o<a.length;o++)"__ob__"!==(n=a[o])&&(r=t[n],i=e[n],Vr(t,n)?r!==i&&Ir(r)&&Ir(i)&&oa(r,i):ra(t,n,i));return t}function sa(t,e,n){return n?function(){var r="function"==typeof e?e.call(n,n):e,i="function"==typeof t?t.call(n,n):t;return r?oa(r,i):i}:e?t?function(){return oa("function"==typeof e?e.call(this,this):e,"function"==typeof t?t.call(this,this):t)}:e:t}function la(t,e){var n=e?t?t.concat(e):Array.isArray(e)?e:[e]:t;return n?function(t){for(var e=[],n=0;n<t.length;n++)-1===e.indexOf(t[n])&&e.push(t[n]);return e}(n):n}function ua(t,e,n,r){var i=Object.create(t||null);return e?(fa(r,e,n),Xr(i,e)):i}aa.el=aa.propsData=function(t,e,n,r){return n||Fi('option "'+r+'" can only be used during instance creation with the `new` keyword.'),ca(t,e)},aa.data=function(t,e,n){return n?sa(t,e,n):e&&"function"!=typeof e?(Fi('The "data" option should be a function that returns a per-instance value in component definitions.',n),t):sa(t,e)},li.forEach(function(t){aa[t]=la}),si.forEach(function(t){aa[t+"s"]=ua}),aa.watch=function(t,e,n,r){if(t===Mi&&(t=void 0),e===Mi&&(e=void 0),!e)return Object.create(t||null);if(fa(r,e,n),!t)return e;var i={};for(var a in Xr(i,t),e){var o=i[a],s=e[a];o&&!Array.isArray(o)&&(o=[o]),i[a]=o?o.concat(s):Array.isArray(s)?s:[s]}return i},aa.props=aa.methods=aa.inject=aa.computed=function(t,e,n,r){if(e&&fa(r,e,n),!t)return e;var i=Object.create(null);return Xr(i,t),e&&Xr(i,e),i},aa.provide=sa;var ca=function(t,e){return void 0===e?t:e};function da(t){new RegExp("^[a-zA-Z][\\-\\.0-9_"+ci+"]*$").test(t)||Fi('Invalid component name: "'+t+'". Component names should conform to valid custom element name in html5 specification.'),(Er(t)||ui.isReservedTag(t))&&Fi("Do not use built-in or reserved HTML elements as component id: "+t)}function fa(t,e,n){Ir(e)||Fi('Invalid value for option "'+t+'": expected an Object, but got '+Pr(e)+".",n)}function ha(t,e,n){if(function(t){for(var e in t.components)da(e)}(e),"function"==typeof e&&(e=e.options),function(t,e){var n=t.props;if(n){var r,i,a={};if(Array.isArray(n))for(r=n.length;r--;)"string"==typeof(i=n[r])?a[Ur(i)]={type:null}:Fi("props must be strings when using array syntax.");else if(Ir(n))for(var o in n)i=n[o],a[Ur(o)]=Ir(i)?i:{type:i};else Fi('Invalid value for option "props": expected an Array or an Object, but got '+Pr(n)+".",e);t.props=a}}(e,n),function(t,e){var n=t.inject;if(n){var r=t.inject={};if(Array.isArray(n))for(var i=0;i<n.length;i++)r[n[i]]={from:n[i]};else if(Ir(n))for(var a in n){var o=n[a];r[a]=Ir(o)?Xr({from:a},o):{from:o}}else Fi('Invalid value for option "inject": expected an Array or an Object, but got '+Pr(n)+".",e)}}(e,n),function(t){var e=t.directives;if(e)for(var n in e){var r=e[n];"function"==typeof r&&(e[n]={bind:r,update:r})}}(e),!e._base&&(e.extends&&(t=ha(t,e.extends,n)),e.mixins))for(var r=0,i=e.mixins.length;r<i;r++)t=ha(t,e.mixins[r],n);var a,o={};for(a in t)s(a);for(a in e)Vr(t,a)||s(a);function s(r){var i=aa[r]||ca;o[r]=i(t[r],e[r],n,r)}return o}function pa(t,e,n,r){if("string"==typeof n){var i=t[e];if(Vr(i,n))return i[n];var a=Ur(n);if(Vr(i,a))return i[a];var o=qr(a);if(Vr(i,o))return i[o];var s=i[n]||i[a]||i[o];return r&&!s&&Fi("Failed to resolve "+e.slice(0,-1)+": "+n,t),s}}function va(t,e,n,r){var i=e[t],a=!Vr(n,t),o=n[t],s=_a(Boolean,i.type);if(s>-1)if(a&&!Vr(i,"default"))o=!1;else if(""===o||o===Jr(t)){var l=_a(String,i.type);(l<0||s<l)&&(o=!0)}if(void 0===o){o=function(t,e,n){if(!Vr(e,"default"))return;var r=e.default;Or(r)&&Fi('Invalid default value for prop "'+n+'": Props with type Object/Array must use a factory function to return the default value.',t);if(t&&t.$options.propsData&&void 0===t.$options.propsData[n]&&void 0!==t._props[n])return t._props[n];return"function"==typeof r&&"Function"!==ya(e.type)?r.call(t):r}(r,i,t);var u=Xi;Qi(!0),ea(o),Qi(u)}return function(t,e,n,r,i){if(t.required&&i)return void Fi('Missing required prop: "'+e+'"',r);if(null==n&&!t.required)return;var a=t.type,o=!a||!0===a,s=[];if(a){Array.isArray(a)||(a=[a]);for(var l=0;l<a.length&&!o;l++){var u=ma(n,a[l]);s.push(u.expectedType||""),o=u.valid}}if(!o)return void Fi(function(t,e,n){var r='Invalid prop: type check failed for prop "'+t+'". Expected '+n.map(qr).join(", "),i=n[0],a=Pr(e),o=xa(e,i),s=xa(e,a);1===n.length&&wa(i)&&!function(){var t=[],e=arguments.length;for(;e--;)t[e]=arguments[e];return t.some(function(t){return"boolean"===t.toLowerCase()})}(i,a)&&(r+=" with value "+o);r+=", got "+a+" ",wa(a)&&(r+="with value "+s+".");return r}(e,n,s),r);var c=t.validator;c&&(c(n)||Fi('Invalid prop: custom validator check failed for prop "'+e+'".',r))}(i,t,o,r,a),o}var ga=/^(String|Number|Boolean|Function|Symbol)$/;function ma(t,e){var r,i=ya(e);if(ga.test(i)){var a=void 0===t?"undefined":n(t);(r=a===i.toLowerCase())||"object"!==a||(r=t instanceof e)}else r="Object"===i?Ir(t):"Array"===i?Array.isArray(t):t instanceof e;return{valid:r,expectedType:i}}function ya(t){var e=t&&t.toString().match(/^\s*function (\w+)/);return e?e[1]:""}function ba(t,e){return ya(t)===ya(e)}function _a(t,e){if(!Array.isArray(e))return ba(e,t)?0:-1;for(var n=0,r=e.length;n<r;n++)if(ba(e[n],t))return n;return-1}function xa(t,e){return"String"===e?'"'+t+'"':"Number"===e?""+Number(t):""+t}function wa(t){return["string","number","boolean"].some(function(e){return t.toLowerCase()===e})}function ka(t,e,n){if(e)for(var r=e;r=r.$parent;){var i=r.$options.errorCaptured;if(i)for(var a=0;a<i.length;a++)try{if(!1===i[a].call(r,t,e,n))return}catch(t){Ma(t,r,"errorCaptured hook")}}Ma(t,e,n)}function Sa(t,e,n,r,i){var a;try{(a=n?t.apply(e,n):t.call(e))&&!a._isVue&&Rr(a)&&a.catch(function(t){return ka(t,r,i+" (Promise/async)")})}catch(t){ka(t,r,i)}return a}function Ma(t,e,n){if(ui.errorHandler)try{return ui.errorHandler.call(null,t,e,n)}catch(e){e!==t&&Ca(e,null,"config.errorHandler")}Ca(t,e,n)}function Ca(t,e,n){if(Fi("Error in "+n+': "'+t.toString()+'"',e),!gi&&!mi||"undefined"==typeof console)throw t;console.error(t)}var Da,Aa,Oa,Ta=!1,Pa=[],Ia=!1;function Fa(){Ia=!1;var t=Pa.slice(0);Pa.length=0;for(var e=0;e<t.length;e++)t[e]()}if("undefined"!=typeof Promise&&Ti(Promise)){var La=Promise.resolve();Da=function(){La.then(Fa),ki&&setTimeout(ti)},Ta=!0}else if(_i||"undefined"==typeof MutationObserver||!Ti(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())Da="undefined"!=typeof setImmediate&&Ti(setImmediate)?function(){setImmediate(Fa)}:function(){setTimeout(Fa,0)};else{var Ra=1,ja=new MutationObserver(Fa),Na=document.createTextNode(String(Ra));ja.observe(Na,{characterData:!0}),Da=function(){Ra=(Ra+1)%2,Na.data=String(Ra)},Ta=!0}function $a(t,e){var n;if(Pa.push(function(){if(t)try{t.call(e)}catch(t){ka(t,e,"nextTick")}else n&&n(e)}),Ia||(Ia=!0,Da()),!t&&"undefined"!=typeof Promise)return new Promise(function(t){n=t})}var Ea,za=gi&&window.performance;za&&za.mark&&za.measure&&za.clearMarks&&za.clearMeasures&&(Aa=function(t){return za.mark(t)},Oa=function(t,e,n){za.measure(t,e,n),za.clearMarks(e),za.clearMarks(n)});var Wa=$r("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,require"),Ya=function(t,e){Fi('Property or method "'+e+'" is not defined on the instance but referenced during render. Make sure that this property is reactive, either in the data option, or for class-based components, by initializing the property. See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',t)},Va=function(t,e){Fi('Property "'+e+'" must be accessed with "$data.'+e+'" because properties starting with "$" or "_" are not proxied in the Vue instance to prevent conflicts with Vue internalsSee: https://vuejs.org/v2/api/#data',t)},Ha="undefined"!=typeof Proxy&&Ti(Proxy);if(Ha){var Ba=$r("stop,prevent,self,ctrl,shift,alt,meta,exact");ui.keyCodes=new Proxy(ui.keyCodes,{set:function(t,e,n){return Ba(e)?(Fi("Avoid overwriting built-in modifier in config.keyCodes: ."+e),!1):(t[e]=n,!0)}})}var Ua={has:function(t,e){var n=e in t,r=Wa(e)||"string"==typeof e&&"_"===e.charAt(0)&&!(e in t.$data);return n||r||(e in t.$data?Va(t,e):Ya(t,e)),n||!r}},qa={get:function(t,e){return"string"!=typeof e||e in t||(e in t.$data?Va(t,e):Ya(t,e)),t[e]}};Ea=function(t){if(Ha){var e=t.$options,n=e.render&&e.render._withStripped?qa:Ua;t._renderProxy=new Proxy(t,n)}else t._renderProxy=t};var Ga=new Pi;function Ja(t){!function t(e,n){var r,i;var a=Array.isArray(e);if(!a&&!Or(e)||Object.isFrozen(e)||e instanceof Hi)return;if(e.__ob__){var o=e.__ob__.dep.id;if(n.has(o))return;n.add(o)}if(a)for(r=e.length;r--;)t(e[r],n);else for(i=Object.keys(e),r=i.length;r--;)t(e[i[r]],n)}(t,Ga),Ga.clear()}var Za=Hr(function(t){var e="&"===t.charAt(0),n="~"===(t=e?t.slice(1):t).charAt(0),r="!"===(t=n?t.slice(1):t).charAt(0);return{name:t=r?t.slice(1):t,once:n,capture:r,passive:e}});function Ka(t,e){function n(){var t=arguments,r=n.fns;if(!Array.isArray(r))return Sa(r,null,arguments,e,"v-on handler");for(var i=r.slice(),a=0;a<i.length;a++)Sa(i[a],null,t,e,"v-on handler")}return n.fns=t,n}function Xa(t,e,n,r,i,a){var o,s,l,u;for(o in t)s=t[o],l=e[o],u=Za(o),Mr(s)?Fi('Invalid handler for event "'+u.name+'": got '+String(s),a):Mr(l)?(Mr(s.fns)&&(s=t[o]=Ka(s,a)),Dr(u.once)&&(s=t[o]=i(u.name,s,u.capture)),n(u.name,s,u.capture,u.passive,u.params)):s!==l&&(l.fns=s,t[o]=l);for(o in e)Mr(t[o])&&r((u=Za(o)).name,e[o],u.capture)}function Qa(t,e,n){var r;t instanceof Hi&&(t=t.data.hook||(t.data.hook={}));var i=t[e];function a(){n.apply(this,arguments),Wr(r.fns,a)}Mr(i)?r=Ka([a]):Cr(i.fns)&&Dr(i.merged)?(r=i).fns.push(a):r=Ka([i,a]),r.merged=!0,t[e]=r}function to(t,e,n,r,i){if(Cr(e)){if(Vr(e,n))return t[n]=e[n],i||delete e[n],!0;if(Vr(e,r))return t[n]=e[r],i||delete e[r],!0}return!1}function eo(t){return Ar(t)?[qi(t)]:Array.isArray(t)?function t(e,n){var r=[];var i,a,o,s;for(i=0;i<e.length;i++)Mr(a=e[i])||"boolean"==typeof a||(o=r.length-1,s=r[o],Array.isArray(a)?a.length>0&&(no((a=t(a,(n||"")+"_"+i))[0])&&no(s)&&(r[o]=qi(s.text+a[0].text),a.shift()),r.push.apply(r,a)):Ar(a)?no(s)?r[o]=qi(s.text+a):""!==a&&r.push(qi(a)):no(a)&&no(s)?r[o]=qi(s.text+a.text):(Dr(e._isVList)&&Cr(a.tag)&&Mr(a.key)&&Cr(n)&&(a.key="__vlist"+n+"_"+i+"__"),r.push(a)));return r}(t):void 0}function no(t){return Cr(t)&&Cr(t.text)&&!1===t.isComment}function ro(t,e){if(t){for(var n=Object.create(null),r=Ii?Reflect.ownKeys(t):Object.keys(t),i=0;i<r.length;i++){var a=r[i];if("__ob__"!==a){for(var o=t[a].from,s=e;s;){if(s._provided&&Vr(s._provided,o)){n[a]=s._provided[o];break}s=s.$parent}if(!s)if("default"in t[a]){var l=t[a].default;n[a]="function"==typeof l?l.call(e):l}else Fi('Injection "'+a+'" not found',e)}}return n}}function io(t,e){if(!t||!t.length)return{};for(var n={},r=0,i=t.length;r<i;r++){var a=t[r],o=a.data;if(o&&o.attrs&&o.attrs.slot&&delete o.attrs.slot,a.context!==e&&a.fnContext!==e||!o||null==o.slot)(n.default||(n.default=[])).push(a);else{var s=o.slot,l=n[s]||(n[s]=[]);"template"===a.tag?l.push.apply(l,a.children||[]):l.push(a)}}for(var u in n)n[u].every(ao)&&delete n[u];return n}function ao(t){return t.isComment&&!t.asyncFactory||" "===t.text}function oo(t,e,n){var r;if(t){if(t._normalized)return t._normalized;if(t.$stable&&n&&n!==Sr&&0===Object.keys(e).length)return n;for(var i in r={},t)t[i]&&"$"!==i[0]&&(r[i]=so(e,i,t[i]))}else r={};for(var a in e)a in r||(r[a]=lo(e,a));return t&&Object.isExtensible(t)&&(t._normalized=r),fi(r,"$stable",!t||!!t.$stable),r}function so(t,e,r){var i=function(){var t=arguments.length?r.apply(null,arguments):r({});return(t=t&&"object"===(void 0===t?"undefined":n(t))&&!Array.isArray(t)?[t]:eo(t))&&0===t.length?void 0:t};return r.proxy&&Object.defineProperty(t,e,{get:i,enumerable:!0,configurable:!0}),i}function lo(t,e){return function(){return t[e]}}function uo(t,e){var n,r,i,a,o;if(Array.isArray(t)||"string"==typeof t)for(n=new Array(t.length),r=0,i=t.length;r<i;r++)n[r]=e(t[r],r);else if("number"==typeof t)for(n=new Array(t),r=0;r<t;r++)n[r]=e(r+1,r);else if(Or(t))if(Ii&&t[Symbol.iterator]){n=[];for(var s=t[Symbol.iterator](),l=s.next();!l.done;)n.push(e(l.value,n.length)),l=s.next()}else for(a=Object.keys(t),n=new Array(a.length),r=0,i=a.length;r<i;r++)o=a[r],n[r]=e(t[o],o,r);return Cr(n)||(n=[]),n._isVList=!0,n}function co(t,e,n,r){var i,a=this.$scopedSlots[t];a?(n=n||{},r&&(Or(r)||Fi("slot v-bind without argument expects an Object",this),n=Xr(Xr({},r),n)),i=a(n)||e):i=this.$slots[t]||e;var o=n&&n.slot;return o?this.$createElement("template",{slot:o},i):i}function fo(t){return pa(this.$options,"filters",t,!0)||ni}function ho(t,e){return Array.isArray(t)?-1===t.indexOf(e):t!==e}function po(t,e,n,r,i){var a=ui.keyCodes[e]||n;return i&&r&&!ui.keyCodes[e]?ho(i,r):a?ho(a,t):r?Jr(r)!==e:void 0}function vo(t,e,n,r,i){if(n)if(Or(n)){var a;Array.isArray(n)&&(n=Qr(n));var o=function(o){if("class"===o||"style"===o||zr(o))a=t;else{var s=t.attrs&&t.attrs.type;a=r||ui.mustUseProp(e,s,o)?t.domProps||(t.domProps={}):t.attrs||(t.attrs={})}var l=Ur(o);o in a||l in a||(a[o]=n[o],i&&((t.on||(t.on={}))["update:"+l]=function(t){n[o]=t}))};for(var s in n)o(s)}else Fi("v-bind without argument expects an Object or Array value",this);return t}function go(t,e){var n=this._staticTrees||(this._staticTrees=[]),r=n[t];return r&&!e?r:(yo(r=n[t]=this.$options.staticRenderFns[t].call(this._renderProxy,null,this),"__static__"+t,!1),r)}function mo(t,e,n){return yo(t,"__once__"+e+(n?"_"+n:""),!0),t}function yo(t,e,n){if(Array.isArray(t))for(var r=0;r<t.length;r++)t[r]&&"string"!=typeof t[r]&&bo(t[r],e+"_"+r,n);else bo(t,e,n)}function bo(t,e,n){t.isStatic=!0,t.key=e,t.isOnce=n}function _o(t,e){if(e)if(Ir(e)){var n=t.on=t.on?Xr({},t.on):{};for(var r in e){var i=n[r],a=e[r];n[r]=i?[].concat(i,a):a}}else Fi("v-on without argument expects an Object value",this);return t}function xo(t,e,n){n=n||{$stable:!e};for(var r=0;r<t.length;r++){var i=t[r];Array.isArray(i)?xo(i,e,n):i&&(i.proxy&&(i.fn.proxy=!0),n[i.key]=i.fn)}return n}function wo(t,e){for(var n=0;n<e.length;n+=2){var r=e[n];"string"==typeof r&&r?t[e[n]]=e[n+1]:""!==r&&null!==r&&Fi("Invalid value for dynamic directive argument (expected string or null): "+r,this)}return t}function ko(t,e){return"string"==typeof t?e+t:t}function So(t){t._o=mo,t._n=Nr,t._s=jr,t._l=uo,t._t=co,t._q=ri,t._i=ii,t._m=go,t._f=fo,t._k=po,t._b=vo,t._v=qi,t._e=Ui,t._u=xo,t._g=_o,t._d=wo,t._p=ko}function Mo(t,e,n,r,i){var a,o=this,s=i.options;Vr(r,"_uid")?(a=Object.create(r))._original=r:(a=r,r=r._original);var l=Dr(s._compiled),u=!l;this.data=t,this.props=e,this.children=n,this.parent=r,this.listeners=t.on||Sr,this.injections=ro(s.inject,r),this.slots=function(){return o.$slots||oo(t.scopedSlots,o.$slots=io(n,r)),o.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return oo(t.scopedSlots,this.slots())}}),l&&(this.$options=s,this.$slots=this.slots(),this.$scopedSlots=oo(t.scopedSlots,this.$slots)),s._scopeId?this._c=function(t,e,n,i){var o=Lo(a,t,e,n,i,u);return o&&!Array.isArray(o)&&(o.fnScopeId=s._scopeId,o.fnContext=r),o}:this._c=function(t,e,n,r){return Lo(a,t,e,n,r,u)}}function Co(t,e,n,r,i){var a=Gi(t);return a.fnContext=n,a.fnOptions=r,(a.devtoolsMeta=a.devtoolsMeta||{}).renderContext=i,e.slot&&((a.data||(a.data={})).slot=e.slot),a}function Do(t,e){for(var n in e)t[Ur(n)]=e[n]}So(Mo.prototype);var Ao={init:function(t,e){if(t.componentInstance&&!t.componentInstance._isDestroyed&&t.data.keepAlive){var n=t;Ao.prepatch(n,n)}else{(t.componentInstance=function(t,e){var n={_isComponent:!0,_parentVnode:t,parent:e},r=t.data.inlineTemplate;Cr(r)&&(n.render=r.render,n.staticRenderFns=r.staticRenderFns);return new t.componentOptions.Ctor(n)}(t,Ho)).$mount(e?t.elm:void 0,e)}},prepatch:function(t,e){var n=e.componentOptions;!function(t,e,n,r,i){Bo=!0;var a=!!(r.data.scopedSlots&&!r.data.scopedSlots.$stable||t.$scopedSlots!==Sr&&!t.$scopedSlots.$stable),o=!!(i||t.$options._renderChildren||a);t.$options._parentVnode=r,t.$vnode=r,t._vnode&&(t._vnode.parent=r);if(t.$options._renderChildren=i,t.$attrs=r.data.attrs||Sr,t.$listeners=n||Sr,e&&t.$options.props){Qi(!1);for(var s=t._props,l=t.$options._propKeys||[],u=0;u<l.length;u++){var c=l[u],d=t.$options.props;s[c]=va(c,d,e,t)}Qi(!0),t.$options.propsData=e}n=n||Sr;var f=t.$options._parentListeners;t.$options._parentListeners=n,Vo(t,n,f),o&&(t.$slots=io(i,r.context),t.$forceUpdate());Bo=!1}(e.componentInstance=t.componentInstance,n.propsData,n.listeners,e,n.children)},insert:function(t){var e,n=t.context,r=t.componentInstance;r._isMounted||(r._isMounted=!0,Jo(r,"mounted")),t.data.keepAlive&&(n._isMounted?((e=r)._inactive=!1,Xo.push(e)):Go(r,!0))},destroy:function(t){var e=t.componentInstance;e._isDestroyed||(t.data.keepAlive?function t(e,n){if(n&&(e._directInactive=!0,qo(e)))return;if(!e._inactive){e._inactive=!0;for(var r=0;r<e.$children.length;r++)t(e.$children[r]);Jo(e,"deactivated")}}(e,!0):e.$destroy())}},Oo=Object.keys(Ao);function To(t,e,n,r,i){if(!Mr(t)){var a=n.$options._base;if(Or(t)&&(t=a.extend(t)),"function"==typeof t){var o;if(Mr(t.cid)&&void 0===(t=function(t,e){if(Dr(t.error)&&Cr(t.errorComp))return t.errorComp;if(Cr(t.resolved))return t.resolved;if(Dr(t.loading)&&Cr(t.loadingComp))return t.loadingComp;var n=jo;if(!Cr(t.owners)){var r=t.owners=[n],i=!0,a=function(t){for(var e=0,n=r.length;e<n;e++)r[e].$forceUpdate();t&&(r.length=0)},o=ai(function(n){t.resolved=No(n,e),i?r.length=0:a(!0)}),s=ai(function(e){Fi("Failed to resolve async component: "+String(t)+(e?"\nReason: "+e:"")),Cr(t.errorComp)&&(t.error=!0,a(!0))}),l=t(o,s);return Or(l)&&(Rr(l)?Mr(t.resolved)&&l.then(o,s):Rr(l.component)&&(l.component.then(o,s),Cr(l.error)&&(t.errorComp=No(l.error,e)),Cr(l.loading)&&(t.loadingComp=No(l.loading,e),0===l.delay?t.loading=!0:setTimeout(function(){Mr(t.resolved)&&Mr(t.error)&&(t.loading=!0,a(!1))},l.delay||200)),Cr(l.timeout)&&setTimeout(function(){Mr(t.resolved)&&s("timeout ("+l.timeout+"ms)")},l.timeout))),i=!1,t.loading?t.loadingComp:t.resolved}t.owners.push(n)}(o=t,a)))return function(t,e,n,r,i){var a=Ui();return a.asyncFactory=t,a.asyncMeta={data:e,context:n,children:r,tag:i},a}(o,e,n,r,i);e=e||{},ys(t),Cr(e.model)&&function(t,e){var n=t.model&&t.model.prop||"value",r=t.model&&t.model.event||"input";(e.attrs||(e.attrs={}))[n]=e.model.value;var i=e.on||(e.on={}),a=i[r],o=e.model.callback;Cr(a)?(Array.isArray(a)?-1===a.indexOf(o):a!==o)&&(i[r]=[o].concat(a)):i[r]=o}(t.options,e);var s=function(t,e,n){var r=e.options.props;if(!Mr(r)){var i={},a=t.attrs,o=t.props;if(Cr(a)||Cr(o))for(var s in r){var l=Jr(s),u=s.toLowerCase();s!==u&&a&&Vr(a,u)&&Li('Prop "'+u+'" is passed to component '+ji(n||e)+', but the declared prop name is "'+s+'". Note that HTML attributes are case-insensitive and camelCased props need to use their kebab-case equivalents when using in-DOM templates. You should probably use "'+l+'" instead of "'+s+'".'),to(i,o,s,l,!0)||to(i,a,s,l,!1)}return i}}(e,t,i);if(Dr(t.options.functional))return function(t,e,n,r,i){var a=t.options,o={},s=a.props;if(Cr(s))for(var l in s)o[l]=va(l,s,e||Sr);else Cr(n.attrs)&&Do(o,n.attrs),Cr(n.props)&&Do(o,n.props);var u=new Mo(n,o,i,r,t),c=a.render.call(null,u._c,u);if(c instanceof Hi)return Co(c,n,u.parent,a,u);if(Array.isArray(c)){for(var d=eo(c)||[],f=new Array(d.length),h=0;h<d.length;h++)f[h]=Co(d[h],n,u.parent,a,u);return f}}(t,s,e,n,r);var l=e.on;if(e.on=e.nativeOn,Dr(t.options.abstract)){var u=e.slot;e={},u&&(e.slot=u)}!function(t){for(var e=t.hook||(t.hook={}),n=0;n<Oo.length;n++){var r=Oo[n],i=e[r],a=Ao[r];i===a||i&&i._merged||(e[r]=i?Po(a,i):a)}}(e);var c=t.options.name||i;return new Hi("vue-component-"+t.cid+(c?"-"+c:""),e,void 0,void 0,void 0,n,{Ctor:t,propsData:s,listeners:l,tag:i,children:r},o)}Fi("Invalid Component definition: "+String(t),n)}}function Po(t,e){var n=function(n,r){t(n,r),e(n,r)};return n._merged=!0,n}var Io=1,Fo=2;function Lo(t,e,n,r,i,a){return(Array.isArray(n)||Ar(n))&&(i=r,r=n,n=void 0),Dr(a)&&(i=Fo),function(t,e,n,r,i){if(Cr(n)&&Cr(n.__ob__))return Fi("Avoid using observed data object as vnode data: "+JSON.stringify(n)+"\nAlways create fresh vnode data objects in each render!",t),Ui();Cr(n)&&Cr(n.is)&&(e=n.is);if(!e)return Ui();Cr(n)&&Cr(n.key)&&!Ar(n.key)&&Fi("Avoid using non-primitive value as key, use string/number value instead.",t);Array.isArray(r)&&"function"==typeof r[0]&&((n=n||{}).scopedSlots={default:r[0]},r.length=0);i===Fo?r=eo(r):i===Io&&(r=function(t){for(var e=0;e<t.length;e++)if(Array.isArray(t[e]))return Array.prototype.concat.apply([],t);return t}(r));var a,o;if("string"==typeof e){var s;o=t.$vnode&&t.$vnode.ns||ui.getTagNamespace(e),a=ui.isReservedTag(e)?new Hi(ui.parsePlatformTagName(e),n,r,void 0,void 0,t):n&&n.pre||!Cr(s=pa(t.$options,"components",e))?new Hi(e,n,r,void 0,void 0,t):To(s,n,t,r,e)}else a=To(e,n,t,r);return Array.isArray(a)?a:Cr(a)?(Cr(o)&&function t(e,n,r){e.ns=n;"foreignObject"===e.tag&&(n=void 0,r=!0);if(Cr(e.children))for(var i=0,a=e.children.length;i<a;i++){var o=e.children[i];Cr(o.tag)&&(Mr(o.ns)||Dr(r)&&"svg"!==o.tag)&&t(o,n,r)}}(a,o),Cr(n)&&function(t){Or(t.style)&&Ja(t.style);Or(t.class)&&Ja(t.class)}(n),a):Ui()}(t,e,n,r,i)}var Ro,jo=null;function No(t,e){return(t.__esModule||Ii&&"Module"===t[Symbol.toStringTag])&&(t=t.default),Or(t)?e.extend(t):t}function $o(t){return t.isComment&&t.asyncFactory}function Eo(t){if(Array.isArray(t))for(var e=0;e<t.length;e++){var n=t[e];if(Cr(n)&&(Cr(n.componentOptions)||$o(n)))return n}}function zo(t,e){Ro.$on(t,e)}function Wo(t,e){Ro.$off(t,e)}function Yo(t,e){var n=Ro;return function r(){null!==e.apply(null,arguments)&&n.$off(t,r)}}function Vo(t,e,n){Ro=t,Xa(e,n||{},zo,Wo,Yo,t),Ro=void 0}var Ho=null,Bo=!1;function Uo(t){var e=Ho;return Ho=t,function(){Ho=e}}function qo(t){for(;t&&(t=t.$parent);)if(t._inactive)return!0;return!1}function Go(t,e){if(e){if(t._directInactive=!1,qo(t))return}else if(t._directInactive)return;if(t._inactive||null===t._inactive){t._inactive=!1;for(var n=0;n<t.$children.length;n++)Go(t.$children[n]);Jo(t,"activated")}}function Jo(t,e){Yi();var n=t.$options[e],r=e+" hook";if(n)for(var i=0,a=n.length;i<a;i++)Sa(n[i],t,null,t,r);t._hasHookEvent&&t.$emit("hook:"+e),Vi()}var Zo=100,Ko=[],Xo=[],Qo={},ts={},es=!1,ns=!1,rs=0;var is=0,as=Date.now;function os(){var t,e;for(is=as(),ns=!0,Ko.sort(function(t,e){return t.id-e.id}),rs=0;rs<Ko.length;rs++)if((t=Ko[rs]).before&&t.before(),e=t.id,Qo[e]=null,t.run(),null!=Qo[e]&&(ts[e]=(ts[e]||0)+1,ts[e]>Zo)){Fi("You may have an infinite update loop "+(t.user?'in watcher with expression "'+t.expression+'"':"in a component render function."),t.vm);break}var n=Xo.slice(),r=Ko.slice();rs=Ko.length=Xo.length=0,Qo={},ts={},es=ns=!1,function(t){for(var e=0;e<t.length;e++)t[e]._inactive=!0,Go(t[e],!0)}(n),function(t){var e=t.length;for(;e--;){var n=t[e],r=n.vm;r._watcher===n&&r._isMounted&&!r._isDestroyed&&Jo(r,"updated")}}(r),Oi&&ui.devtools&&Oi.emit("flush")}gi&&as()>document.createEvent("Event").timeStamp&&(as=function(){return performance.now()});var ss=0,ls=function(t,e,n,r,i){this.vm=t,i&&(t._watcher=this),t._watchers.push(this),r?(this.deep=!!r.deep,this.user=!!r.user,this.lazy=!!r.lazy,this.sync=!!r.sync,this.before=r.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++ss,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new Pi,this.newDepIds=new Pi,this.expression=e.toString(),"function"==typeof e?this.getter=e:(this.getter=function(t){if(!hi.test(t)){var e=t.split(".");return function(t){for(var n=0;n<e.length;n++){if(!t)return;t=t[e[n]]}return t}}}(e),this.getter||(this.getter=ti,Fi('Failed watching path: "'+e+'" Watcher only accepts simple dot-delimited paths. For full control, use a function instead.',t))),this.value=this.lazy?void 0:this.get()};ls.prototype.get=function(){var t;Yi(this);var e=this.vm;try{t=this.getter.call(e,e)}catch(t){if(!this.user)throw t;ka(t,e,'getter for watcher "'+this.expression+'"')}finally{this.deep&&Ja(t),Vi(),this.cleanupDeps()}return t},ls.prototype.addDep=function(t){var e=t.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(t),this.depIds.has(e)||t.addSub(this))},ls.prototype.cleanupDeps=function(){for(var t=this.deps.length;t--;){var e=this.deps[t];this.newDepIds.has(e.id)||e.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},ls.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(t){var e=t.id;if(null==Qo[e]){if(Qo[e]=!0,ns){for(var n=Ko.length-1;n>rs&&Ko[n].id>t.id;)n--;Ko.splice(n+1,0,t)}else Ko.push(t);if(!es){if(es=!0,!ui.async)return void os();$a(os)}}}(this)},ls.prototype.run=function(){if(this.active){var t=this.get();if(t!==this.value||Or(t)||this.deep){var e=this.value;if(this.value=t,this.user)try{this.cb.call(this.vm,t,e)}catch(t){ka(t,this.vm,'callback for watcher "'+this.expression+'"')}else this.cb.call(this.vm,t,e)}}},ls.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},ls.prototype.depend=function(){for(var t=this.deps.length;t--;)this.deps[t].depend()},ls.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||Wr(this.vm._watchers,this);for(var t=this.deps.length;t--;)this.deps[t].removeSub(this);this.active=!1}};var us={enumerable:!0,configurable:!0,get:ti,set:ti};function cs(t,e,n){us.get=function(){return this[e][n]},us.set=function(t){this[e][n]=t},Object.defineProperty(t,n,us)}function ds(t){t._watchers=[];var e=t.$options;e.props&&function(t,e){var n=t.$options.propsData||{},r=t._props={},i=t.$options._propKeys=[],a=!t.$parent;a||Qi(!1);var o=function(o){i.push(o);var s=va(o,e,n,t),l=Jr(o);(zr(l)||ui.isReservedAttr(l))&&Fi('"'+l+'" is a reserved attribute and cannot be used as component prop.',t),na(r,o,s,function(){a||Bo||Fi("Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value. Prop being mutated: \""+o+'"',t)}),o in t||cs(t,"_props",o)};for(var s in e)o(s);Qi(!0)}(t,e.props),e.methods&&function(t,e){var r=t.$options.props;for(var i in e)"function"!=typeof e[i]&&Fi('Method "'+i+'" has type "'+n(e[i])+'" in the component definition. Did you reference the function correctly?',t),r&&Vr(r,i)&&Fi('Method "'+i+'" has already been defined as a prop.',t),i in t&&di(i)&&Fi('Method "'+i+'" conflicts with an existing Vue instance method. Avoid defining component methods that start with _ or $.'),t[i]="function"!=typeof e[i]?ti:Zr(e[i],t)}(t,e.methods),e.data?function(t){var e=t.$options.data;Ir(e=t._data="function"==typeof e?function(t,e){Yi();try{return t.call(e,e)}catch(t){return ka(t,e,"data()"),{}}finally{Vi()}}(e,t):e||{})||(e={},Fi("data functions should return an object:\nhttps://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function",t));var n=Object.keys(e),r=t.$options.props,i=t.$options.methods,a=n.length;for(;a--;){var o=n[a];i&&Vr(i,o)&&Fi('Method "'+o+'" has already been defined as a data property.',t),r&&Vr(r,o)?Fi('The data property "'+o+'" is already declared as a prop. Use prop default value instead.',t):di(o)||cs(t,"_data",o)}ea(e,!0)}(t):ea(t._data={},!0),e.computed&&function(t,e){var n=t._computedWatchers=Object.create(null),r=Ai();for(var i in e){var a=e[i],o="function"==typeof a?a:a.get;null==o&&Fi('Getter is missing for computed property "'+i+'".',t),r||(n[i]=new ls(t,o||ti,ti,fs)),i in t?i in t.$data?Fi('The computed property "'+i+'" is already defined in data.',t):t.$options.props&&i in t.$options.props&&Fi('The computed property "'+i+'" is already defined as a prop.',t):hs(t,i,a)}}(t,e.computed),e.watch&&e.watch!==Mi&&function(t,e){for(var n in e){var r=e[n];if(Array.isArray(r))for(var i=0;i<r.length;i++)gs(t,n,r[i]);else gs(t,n,r)}}(t,e.watch)}var fs={lazy:!0};function hs(t,e,n){var r=!Ai();"function"==typeof n?(us.get=r?ps(e):vs(n),us.set=ti):(us.get=n.get?r&&!1!==n.cache?ps(e):vs(n.get):ti,us.set=n.set||ti),us.set===ti&&(us.set=function(){Fi('Computed property "'+e+'" was assigned to but it has no setter.',this)}),Object.defineProperty(t,e,us)}function ps(t){return function(){var e=this._computedWatchers&&this._computedWatchers[t];if(e)return e.dirty&&e.evaluate(),zi.target&&e.depend(),e.value}}function vs(t){return function(){return t.call(this,this)}}function gs(t,e,n,r){return Ir(n)&&(r=n,n=n.handler),"string"==typeof n&&(n=t[n]),t.$watch(e,n,r)}var ms=0;function ys(t){var e=t.options;if(t.super){var n=ys(t.super);if(n!==t.superOptions){t.superOptions=n;var r=function(t){var e,n=t.options,r=t.sealedOptions;for(var i in n)n[i]!==r[i]&&(e||(e={}),e[i]=n[i]);return e}(t);r&&Xr(t.extendOptions,r),(e=t.options=ha(n,t.extendOptions)).name&&(e.components[e.name]=t)}}return e}function bs(t){this instanceof bs||Fi("Vue is a constructor and should be called with the `new` keyword"),this._init(t)}function _s(t){t.cid=0;var e=1;t.extend=function(t){t=t||{};var n=this,r=n.cid,i=t._Ctor||(t._Ctor={});if(i[r])return i[r];var a=t.name||n.options.name;a&&da(a);var o=function(t){this._init(t)};return(o.prototype=Object.create(n.prototype)).constructor=o,o.cid=e++,o.options=ha(n.options,t),o.super=n,o.options.props&&function(t){var e=t.options.props;for(var n in e)cs(t.prototype,"_props",n)}(o),o.options.computed&&function(t){var e=t.options.computed;for(var n in e)hs(t.prototype,n,e[n])}(o),o.extend=n.extend,o.mixin=n.mixin,o.use=n.use,si.forEach(function(t){o[t]=n[t]}),a&&(o.options.components[a]=o),o.superOptions=n.options,o.extendOptions=t,o.sealedOptions=Xr({},o.options),i[r]=o,o}}function xs(t){return t&&(t.Ctor.options.name||t.tag)}function ws(t,e){return Array.isArray(t)?t.indexOf(e)>-1:"string"==typeof t?t.split(",").indexOf(e)>-1:!!Fr(t)&&t.test(e)}function ks(t,e){var n=t.cache,r=t.keys,i=t._vnode;for(var a in n){var o=n[a];if(o){var s=xs(o.componentOptions);s&&!e(s)&&Ss(n,a,r,i)}}}function Ss(t,e,n,r){var i=t[e];!i||r&&i.tag===r.tag||i.componentInstance.$destroy(),t[e]=null,Wr(n,e)}!function(t){t.prototype._init=function(t){var e,n,r=this;r._uid=ms++,ui.performance&&Aa&&(e="vue-perf-start:"+r._uid,n="vue-perf-end:"+r._uid,Aa(e)),r._isVue=!0,t&&t._isComponent?function(t,e){var n=t.$options=Object.create(t.constructor.options),r=e._parentVnode;n.parent=e.parent,n._parentVnode=r;var i=r.componentOptions;n.propsData=i.propsData,n._parentListeners=i.listeners,n._renderChildren=i.children,n._componentTag=i.tag,e.render&&(n.render=e.render,n.staticRenderFns=e.staticRenderFns)}(r,t):r.$options=ha(ys(r.constructor),t||{},r),Ea(r),r._self=r,function(t){var e=t.$options,n=e.parent;if(n&&!e.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(t)}t.$parent=n,t.$root=n?n.$root:t,t.$children=[],t.$refs={},t._watcher=null,t._inactive=null,t._directInactive=!1,t._isMounted=!1,t._isDestroyed=!1,t._isBeingDestroyed=!1}(r),function(t){t._events=Object.create(null),t._hasHookEvent=!1;var e=t.$options._parentListeners;e&&Vo(t,e)}(r),function(t){t._vnode=null,t._staticTrees=null;var e=t.$options,n=t.$vnode=e._parentVnode,r=n&&n.context;t.$slots=io(e._renderChildren,r),t.$scopedSlots=Sr,t._c=function(e,n,r,i){return Lo(t,e,n,r,i,!1)},t.$createElement=function(e,n,r,i){return Lo(t,e,n,r,i,!0)};var i=n&&n.data;na(t,"$attrs",i&&i.attrs||Sr,function(){!Bo&&Fi("$attrs is readonly.",t)},!0),na(t,"$listeners",e._parentListeners||Sr,function(){!Bo&&Fi("$listeners is readonly.",t)},!0)}(r),Jo(r,"beforeCreate"),function(t){var e=ro(t.$options.inject,t);e&&(Qi(!1),Object.keys(e).forEach(function(n){na(t,n,e[n],function(){Fi('Avoid mutating an injected value directly since the changes will be overwritten whenever the provided component re-renders. injection being mutated: "'+n+'"',t)})}),Qi(!0))}(r),ds(r),function(t){var e=t.$options.provide;e&&(t._provided="function"==typeof e?e.call(t):e)}(r),Jo(r,"created"),ui.performance&&Aa&&(r._name=ji(r,!1),Aa(n),Oa("vue "+r._name+" init",e,n)),r.$options.el&&r.$mount(r.$options.el)}}(bs),function(t){var e={get:function(){return this._data}},n={get:function(){return this._props}};e.set=function(){Fi("Avoid replacing instance root $data. Use nested data properties instead.",this)},n.set=function(){Fi("$props is readonly.",this)},Object.defineProperty(t.prototype,"$data",e),Object.defineProperty(t.prototype,"$props",n),t.prototype.$set=ra,t.prototype.$delete=ia,t.prototype.$watch=function(t,e,n){if(Ir(e))return gs(this,t,e,n);(n=n||{}).user=!0;var r=new ls(this,t,e,n);if(n.immediate)try{e.call(this,r.value)}catch(t){ka(t,this,'callback for immediate watcher "'+r.expression+'"')}return function(){r.teardown()}}}(bs),function(t){var e=/^hook:/;t.prototype.$on=function(t,n){var r=this;if(Array.isArray(t))for(var i=0,a=t.length;i<a;i++)r.$on(t[i],n);else(r._events[t]||(r._events[t]=[])).push(n),e.test(t)&&(r._hasHookEvent=!0);return r},t.prototype.$once=function(t,e){var n=this;function r(){n.$off(t,r),e.apply(n,arguments)}return r.fn=e,n.$on(t,r),n},t.prototype.$off=function(t,e){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(t)){for(var r=0,i=t.length;r<i;r++)n.$off(t[r],e);return n}var a,o=n._events[t];if(!o)return n;if(!e)return n._events[t]=null,n;for(var s=o.length;s--;)if((a=o[s])===e||a.fn===e){o.splice(s,1);break}return n},t.prototype.$emit=function(t){var e=this,n=t.toLowerCase();n!==t&&e._events[n]&&Li('Event "'+n+'" is emitted in component '+ji(e)+' but the handler is registered for "'+t+'". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "'+Jr(t)+'" instead of "'+t+'".');var r=e._events[t];if(r){r=r.length>1?Kr(r):r;for(var i=Kr(arguments,1),a='event handler for "'+t+'"',o=0,s=r.length;o<s;o++)Sa(r[o],e,i,e,a)}return e}}(bs),function(t){t.prototype._update=function(t,e){var n=this,r=n.$el,i=n._vnode,a=Uo(n);n._vnode=t,n.$el=i?n.__patch__(i,t):n.__patch__(n.$el,t,e,!1),a(),r&&(r.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},t.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},t.prototype.$destroy=function(){var t=this;if(!t._isBeingDestroyed){Jo(t,"beforeDestroy"),t._isBeingDestroyed=!0;var e=t.$parent;!e||e._isBeingDestroyed||t.$options.abstract||Wr(e.$children,t),t._watcher&&t._watcher.teardown();for(var n=t._watchers.length;n--;)t._watchers[n].teardown();t._data.__ob__&&t._data.__ob__.vmCount--,t._isDestroyed=!0,t.__patch__(t._vnode,null),Jo(t,"destroyed"),t.$off(),t.$el&&(t.$el.__vue__=null),t.$vnode&&(t.$vnode.parent=null)}}}(bs),function(t){So(t.prototype),t.prototype.$nextTick=function(t){return $a(t,this)},t.prototype._render=function(){var t,e=this,n=e.$options,r=n.render,i=n._parentVnode;i&&(e.$scopedSlots=oo(i.data.scopedSlots,e.$slots,e.$scopedSlots)),e.$vnode=i;try{jo=e,t=r.call(e._renderProxy,e.$createElement)}catch(n){if(ka(n,e,"render"),e.$options.renderError)try{t=e.$options.renderError.call(e._renderProxy,e.$createElement,n)}catch(n){ka(n,e,"renderError"),t=e._vnode}else t=e._vnode}finally{jo=null}return Array.isArray(t)&&1===t.length&&(t=t[0]),t instanceof Hi||(Array.isArray(t)&&Fi("Multiple root nodes returned from render function. Render function should return a single root node.",e),t=Ui()),t.parent=i,t}}(bs);var Ms=[String,RegExp,Array],Cs={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:Ms,exclude:Ms,max:[String,Number]},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var t in this.cache)Ss(this.cache,t,this.keys)},mounted:function(){var t=this;this.$watch("include",function(e){ks(t,function(t){return ws(e,t)})}),this.$watch("exclude",function(e){ks(t,function(t){return!ws(e,t)})})},render:function(){var t=this.$slots.default,e=Eo(t),n=e&&e.componentOptions;if(n){var r=xs(n),i=this.include,a=this.exclude;if(i&&(!r||!ws(i,r))||a&&r&&ws(a,r))return e;var o=this.cache,s=this.keys,l=null==e.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):e.key;o[l]?(e.componentInstance=o[l].componentInstance,Wr(s,l),s.push(l)):(o[l]=e,s.push(l),this.max&&s.length>parseInt(this.max)&&Ss(o,s[0],s,this._vnode)),e.data.keepAlive=!0}return e||t&&t[0]}}};!function(t){var e={get:function(){return ui},set:function(){Fi("Do not replace the Vue.config object, set individual fields instead.")}};Object.defineProperty(t,"config",e),t.util={warn:Fi,extend:Xr,mergeOptions:ha,defineReactive:na},t.set=ra,t.delete=ia,t.nextTick=$a,t.observable=function(t){return ea(t),t},t.options=Object.create(null),si.forEach(function(e){t.options[e+"s"]=Object.create(null)}),t.options._base=t,Xr(t.options.components,Cs),function(t){t.use=function(t){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(t)>-1)return this;var n=Kr(arguments,1);return n.unshift(this),"function"==typeof t.install?t.install.apply(t,n):"function"==typeof t&&t.apply(null,n),e.push(t),this}}(t),function(t){t.mixin=function(t){return this.options=ha(this.options,t),this}}(t),_s(t),function(t){si.forEach(function(e){t[e]=function(t,n){return n?("component"===e&&da(t),"component"===e&&Ir(n)&&(n.name=n.name||t,n=this.options._base.extend(n)),"directive"===e&&"function"==typeof n&&(n={bind:n,update:n}),this.options[e+"s"][t]=n,n):this.options[e+"s"][t]}})}(t)}(bs),Object.defineProperty(bs.prototype,"$isServer",{get:Ai}),Object.defineProperty(bs.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(bs,"FunctionalRenderContext",{value:Mo}),bs.version="2.6.6";var Ds=$r("style,class"),As=$r("input,textarea,option,select,progress"),Os=function(t,e,n){return"value"===n&&As(t)&&"button"!==e||"selected"===n&&"option"===t||"checked"===n&&"input"===t||"muted"===n&&"video"===t},Ts=$r("contenteditable,draggable,spellcheck"),Ps=$r("events,caret,typing,plaintext-only"),Is=function(t,e){return Ns(e)||"false"===e?"false":"contenteditable"===t&&Ps(e)?e:"true"},Fs=$r("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,translate,truespeed,typemustmatch,visible"),Ls="http://www.w3.org/1999/xlink",Rs=function(t){return":"===t.charAt(5)&&"xlink"===t.slice(0,5)},js=function(t){return Rs(t)?t.slice(6,t.length):""},Ns=function(t){return null==t||!1===t};function $s(t){for(var e=t.data,n=t,r=t;Cr(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(e=Es(r.data,e));for(;Cr(n=n.parent);)n&&n.data&&(e=Es(e,n.data));return function(t,e){if(Cr(t)||Cr(e))return zs(t,Ws(e));return""}(e.staticClass,e.class)}function Es(t,e){return{staticClass:zs(t.staticClass,e.staticClass),class:Cr(t.class)?[t.class,e.class]:e.class}}function zs(t,e){return t?e?t+" "+e:t:e||""}function Ws(t){return Array.isArray(t)?function(t){for(var e,n="",r=0,i=t.length;r<i;r++)Cr(e=Ws(t[r]))&&""!==e&&(n&&(n+=" "),n+=e);return n}(t):Or(t)?function(t){var e="";for(var n in t)t[n]&&(e&&(e+=" "),e+=n);return e}(t):"string"==typeof t?t:""}var Ys={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Vs=$r("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),Hs=$r("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignObject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Bs=function(t){return Vs(t)||Hs(t)};function Us(t){return Hs(t)?"svg":"math"===t?"math":void 0}var qs=Object.create(null);var Gs=$r("text,number,password,search,email,tel,url");function Js(t){if("string"==typeof t){var e=document.querySelector(t);return e||(Fi("Cannot find element: "+t),document.createElement("div"))}return t}var Zs=Object.freeze({createElement:function(t,e){var n=document.createElement(t);return"select"!==t?n:(e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n)},createElementNS:function(t,e){return document.createElementNS(Ys[t],e)},createTextNode:function(t){return document.createTextNode(t)},createComment:function(t){return document.createComment(t)},insertBefore:function(t,e,n){t.insertBefore(e,n)},removeChild:function(t,e){t.removeChild(e)},appendChild:function(t,e){t.appendChild(e)},parentNode:function(t){return t.parentNode},nextSibling:function(t){return t.nextSibling},tagName:function(t){return t.tagName},setTextContent:function(t,e){t.textContent=e},setStyleScope:function(t,e){t.setAttribute(e,"")}}),Ks={create:function(t,e){Xs(e)},update:function(t,e){t.data.ref!==e.data.ref&&(Xs(t,!0),Xs(e))},destroy:function(t){Xs(t,!0)}};function Xs(t,e){var n=t.data.ref;if(Cr(n)){var r=t.context,i=t.componentInstance||t.elm,a=r.$refs;e?Array.isArray(a[n])?Wr(a[n],i):a[n]===i&&(a[n]=void 0):t.data.refInFor?Array.isArray(a[n])?a[n].indexOf(i)<0&&a[n].push(i):a[n]=[i]:a[n]=i}}var Qs=new Hi("",{},[]),tl=["create","activate","update","remove","destroy"];function el(t,e){return t.key===e.key&&(t.tag===e.tag&&t.isComment===e.isComment&&Cr(t.data)===Cr(e.data)&&function(t,e){if("input"!==t.tag)return!0;var n,r=Cr(n=t.data)&&Cr(n=n.attrs)&&n.type,i=Cr(n=e.data)&&Cr(n=n.attrs)&&n.type;return r===i||Gs(r)&&Gs(i)}(t,e)||Dr(t.isAsyncPlaceholder)&&t.asyncFactory===e.asyncFactory&&Mr(e.asyncFactory.error))}function nl(t,e,n){var r,i,a={};for(r=e;r<=n;++r)Cr(i=t[r].key)&&(a[i]=r);return a}var rl={create:il,update:il,destroy:function(t){il(t,Qs)}};function il(t,e){(t.data.directives||e.data.directives)&&function(t,e){var n,r,i,a=t===Qs,o=e===Qs,s=ol(t.data.directives,t.context),l=ol(e.data.directives,e.context),u=[],c=[];for(n in l)r=s[n],i=l[n],r?(i.oldValue=r.value,i.oldArg=r.arg,ll(i,"update",e,t),i.def&&i.def.componentUpdated&&c.push(i)):(ll(i,"bind",e,t),i.def&&i.def.inserted&&u.push(i));if(u.length){var d=function(){for(var n=0;n<u.length;n++)ll(u[n],"inserted",e,t)};a?Qa(e,"insert",d):d()}c.length&&Qa(e,"postpatch",function(){for(var n=0;n<c.length;n++)ll(c[n],"componentUpdated",e,t)});if(!a)for(n in s)l[n]||ll(s[n],"unbind",t,t,o)}(t,e)}var al=Object.create(null);function ol(t,e){var n,r,i=Object.create(null);if(!t)return i;for(n=0;n<t.length;n++)(r=t[n]).modifiers||(r.modifiers=al),i[sl(r)]=r,r.def=pa(e.$options,"directives",r.name,!0);return i}function sl(t){return t.rawName||t.name+"."+Object.keys(t.modifiers||{}).join(".")}function ll(t,e,n,r,i){var a=t.def&&t.def[e];if(a)try{a(n.elm,t,n,r,i)}catch(r){ka(r,n.context,"directive "+t.name+" "+e+" hook")}}var ul=[Ks,rl];function cl(t,e){var n=e.componentOptions;if(!(Cr(n)&&!1===n.Ctor.options.inheritAttrs||Mr(t.data.attrs)&&Mr(e.data.attrs))){var r,i,a=e.elm,o=t.data.attrs||{},s=e.data.attrs||{};for(r in Cr(s.__ob__)&&(s=e.data.attrs=Xr({},s)),s)i=s[r],o[r]!==i&&dl(a,r,i);for(r in(_i||wi)&&s.value!==o.value&&dl(a,"value",s.value),o)Mr(s[r])&&(Rs(r)?a.removeAttributeNS(Ls,js(r)):Ts(r)||a.removeAttribute(r))}}function dl(t,e,n){t.tagName.indexOf("-")>-1?fl(t,e,n):Fs(e)?Ns(n)?t.removeAttribute(e):(n="allowfullscreen"===e&&"EMBED"===t.tagName?"true":e,t.setAttribute(e,n)):Ts(e)?t.setAttribute(e,Is(e,n)):Rs(e)?Ns(n)?t.removeAttributeNS(Ls,js(e)):t.setAttributeNS(Ls,e,n):fl(t,e,n)}function fl(t,e,n){if(Ns(n))t.removeAttribute(e);else{if(_i&&!xi&&"TEXTAREA"===t.tagName&&"placeholder"===e&&""!==n&&!t.__ieph){t.addEventListener("input",function e(n){n.stopImmediatePropagation(),t.removeEventListener("input",e)}),t.__ieph=!0}t.setAttribute(e,n)}}var hl={create:cl,update:cl};function pl(t,e){var n=e.elm,r=e.data,i=t.data;if(!(Mr(r.staticClass)&&Mr(r.class)&&(Mr(i)||Mr(i.staticClass)&&Mr(i.class)))){var a=$s(e),o=n._transitionClasses;Cr(o)&&(a=zs(a,Ws(o))),a!==n._prevClass&&(n.setAttribute("class",a),n._prevClass=a)}}var vl,gl,ml,yl,bl,_l,xl,wl={create:pl,update:pl},kl=/[\w).+\-_$\]]/;function Sl(t){var e,n,r,i,a,o=!1,s=!1,l=!1,u=!1,c=0,d=0,f=0,h=0;for(r=0;r<t.length;r++)if(n=e,e=t.charCodeAt(r),o)39===e&&92!==n&&(o=!1);else if(s)34===e&&92!==n&&(s=!1);else if(l)96===e&&92!==n&&(l=!1);else if(u)47===e&&92!==n&&(u=!1);else if(124!==e||124===t.charCodeAt(r+1)||124===t.charCodeAt(r-1)||c||d||f){switch(e){case 34:s=!0;break;case 39:o=!0;break;case 96:l=!0;break;case 40:f++;break;case 41:f--;break;case 91:d++;break;case 93:d--;break;case 123:c++;break;case 125:c--}if(47===e){for(var p=r-1,v=void 0;p>=0&&" "===(v=t.charAt(p));p--);v&&kl.test(v)||(u=!0)}}else void 0===i?(h=r+1,i=t.slice(0,r).trim()):g();function g(){(a||(a=[])).push(t.slice(h,r).trim()),h=r+1}if(void 0===i?i=t.slice(0,r).trim():0!==h&&g(),a)for(r=0;r<a.length;r++)i=Ml(i,a[r]);return i}function Ml(t,e){var n=e.indexOf("(");if(n<0)return'_f("'+e+'")('+t+")";var r=e.slice(0,n),i=e.slice(n+1);return'_f("'+r+'")('+t+(")"!==i?","+i:i)}function Cl(t,e){console.error("[Vue compiler]: "+t)}function Dl(t,e){return t?t.map(function(t){return t[e]}).filter(function(t){return t}):[]}function Al(t,e,n,r,i){(t.props||(t.props=[])).push($l({name:e,value:n,dynamic:i},r)),t.plain=!1}function Ol(t,e,n,r,i){(i?t.dynamicAttrs||(t.dynamicAttrs=[]):t.attrs||(t.attrs=[])).push($l({name:e,value:n,dynamic:i},r)),t.plain=!1}function Tl(t,e,n,r){t.attrsMap[e]=n,t.attrsList.push($l({name:e,value:n},r))}function Pl(t,e,n,r,i,a,o,s){(t.directives||(t.directives=[])).push($l({name:e,rawName:n,value:r,arg:i,isDynamicArg:a,modifiers:o},s)),t.plain=!1}function Il(t,e,n){return n?"_p("+e+',"'+t+'")':t+e}function Fl(t,e,n,r,i,a,o,s){var l;r=r||Sr,a&&r.prevent&&r.passive&&a("passive and prevent can't be used together. Passive handler can't prevent default event.",o),r.right?s?e="("+e+")==='click'?'contextmenu':("+e+")":"click"===e&&(e="contextmenu",delete r.right):r.middle&&(s?e="("+e+")==='click'?'mouseup':("+e+")":"click"===e&&(e="mouseup")),r.capture&&(delete r.capture,e=Il("!",e,s)),r.once&&(delete r.once,e=Il("~",e,s)),r.passive&&(delete r.passive,e=Il("&",e,s)),r.native?(delete r.native,l=t.nativeEvents||(t.nativeEvents={})):l=t.events||(t.events={});var u=$l({value:n.trim(),dynamic:s},o);r!==Sr&&(u.modifiers=r);var c=l[e];Array.isArray(c)?i?c.unshift(u):c.push(u):l[e]=c?i?[u,c]:[c,u]:u,t.plain=!1}function Ll(t,e){return t.rawAttrsMap[":"+e]||t.rawAttrsMap["v-bind:"+e]||t.rawAttrsMap[e]}function Rl(t,e,n){var r=jl(t,":"+e)||jl(t,"v-bind:"+e);if(null!=r)return Sl(r);if(!1!==n){var i=jl(t,e);if(null!=i)return JSON.stringify(i)}}function jl(t,e,n){var r;if(null!=(r=t.attrsMap[e]))for(var i=t.attrsList,a=0,o=i.length;a<o;a++)if(i[a].name===e){i.splice(a,1);break}return n&&delete t.attrsMap[e],r}function Nl(t,e){for(var n=t.attrsList,r=0,i=n.length;r<i;r++){var a=n[r];if(e.test(a.name))return n.splice(r,1),a}}function $l(t,e){return e&&(null!=e.start&&(t.start=e.start),null!=e.end&&(t.end=e.end)),t}function El(t,e,n){var r=n||{},i=r.number,a="$$v";r.trim&&(a="(typeof $$v === 'string'? $$v.trim(): $$v)"),i&&(a="_n("+a+")");var o=zl(e,a);t.model={value:"("+e+")",expression:JSON.stringify(e),callback:"function ($$v) {"+o+"}"}}function zl(t,e){var n=function(t){if(t=t.trim(),vl=t.length,t.indexOf("[")<0||t.lastIndexOf("]")<vl-1)return(yl=t.lastIndexOf("."))>-1?{exp:t.slice(0,yl),key:'"'+t.slice(yl+1)+'"'}:{exp:t,key:null};gl=t,yl=bl=_l=0;for(;!Yl();)Vl(ml=Wl())?Bl(ml):91===ml&&Hl(ml);return{exp:t.slice(0,bl),key:t.slice(bl+1,_l)}}(t);return null===n.key?t+"="+e:"$set("+n.exp+", "+n.key+", "+e+")"}function Wl(){return gl.charCodeAt(++yl)}function Yl(){return yl>=vl}function Vl(t){return 34===t||39===t}function Hl(t){var e=1;for(bl=yl;!Yl();)if(Vl(t=Wl()))Bl(t);else if(91===t&&e++,93===t&&e--,0===e){_l=yl;break}}function Bl(t){for(var e=t;!Yl()&&(t=Wl())!==e;);}var Ul,ql="__r",Gl="__c";function Jl(t,e,n){var r=Ul;return function i(){null!==e.apply(null,arguments)&&Xl(t,i,n,r)}}var Zl=Ta&&!(Si&&Number(Si[1])<=53);function Kl(t,e,n,r){if(Zl){var i=is,a=e;e=a._wrapper=function(t){if(t.target===t.currentTarget||t.timeStamp>=i||0===t.timeStamp||t.target.ownerDocument!==document)return a.apply(this,arguments)}}Ul.addEventListener(t,e,Ci?{capture:n,passive:r}:n)}function Xl(t,e,n,r){(r||Ul).removeEventListener(t,e._wrapper||e,n)}function Ql(t,e){if(!Mr(t.data.on)||!Mr(e.data.on)){var n=e.data.on||{},r=t.data.on||{};Ul=e.elm,function(t){if(Cr(t[ql])){var e=_i?"change":"input";t[e]=[].concat(t[ql],t[e]||[]),delete t[ql]}Cr(t[Gl])&&(t.change=[].concat(t[Gl],t.change||[]),delete t[Gl])}(n),Xa(n,r,Kl,Xl,Jl,e.context),Ul=void 0}}var tu,eu={create:Ql,update:Ql};function nu(t,e){if(!Mr(t.data.domProps)||!Mr(e.data.domProps)){var n,r,i=e.elm,a=t.data.domProps||{},o=e.data.domProps||{};for(n in Cr(o.__ob__)&&(o=e.data.domProps=Xr({},o)),a)Mr(o[n])&&(i[n]="");for(n in o){if(r=o[n],"textContent"===n||"innerHTML"===n){if(e.children&&(e.children.length=0),r===a[n])continue;1===i.childNodes.length&&i.removeChild(i.childNodes[0])}if("value"===n||r!==a[n])if("value"===n){i._value=r;var s=Mr(r)?"":String(r);ru(i,s)&&(i.value=s)}else if("innerHTML"===n&&Hs(i.tagName)&&Mr(i.innerHTML)){(tu=tu||document.createElement("div")).innerHTML="<svg>"+r+"</svg>";for(var l=tu.firstChild;i.firstChild;)i.removeChild(i.firstChild);for(;l.firstChild;)i.appendChild(l.firstChild)}else i[n]=r}}}function ru(t,e){return!t.composing&&("OPTION"===t.tagName||function(t,e){var n=!0;try{n=document.activeElement!==t}catch(t){}return n&&t.value!==e}(t,e)||function(t,e){var n=t.value,r=t._vModifiers;if(Cr(r)){if(r.number)return Nr(n)!==Nr(e);if(r.trim)return n.trim()!==e.trim()}return n!==e}(t,e))}var iu={create:nu,update:nu},au=Hr(function(t){var e={},n=/:(.+)/;return t.split(/;(?![^(]*\))/g).forEach(function(t){if(t){var r=t.split(n);r.length>1&&(e[r[0].trim()]=r[1].trim())}}),e});function ou(t){var e=su(t.style);return t.staticStyle?Xr(t.staticStyle,e):e}function su(t){return Array.isArray(t)?Qr(t):"string"==typeof t?au(t):t}var lu,uu=/^--/,cu=/\s*!important$/,du=function(t,e,n){if(uu.test(e))t.style.setProperty(e,n);else if(cu.test(n))t.style.setProperty(Jr(e),n.replace(cu,""),"important");else{var r=hu(e);if(Array.isArray(n))for(var i=0,a=n.length;i<a;i++)t.style[r]=n[i];else t.style[r]=n}},fu=["Webkit","Moz","ms"],hu=Hr(function(t){if(lu=lu||document.createElement("div").style,"filter"!==(t=Ur(t))&&t in lu)return t;for(var e=t.charAt(0).toUpperCase()+t.slice(1),n=0;n<fu.length;n++){var r=fu[n]+e;if(r in lu)return r}});function pu(t,e){var n=e.data,r=t.data;if(!(Mr(n.staticStyle)&&Mr(n.style)&&Mr(r.staticStyle)&&Mr(r.style))){var i,a,o=e.elm,s=r.staticStyle,l=r.normalizedStyle||r.style||{},u=s||l,c=su(e.data.style)||{};e.data.normalizedStyle=Cr(c.__ob__)?Xr({},c):c;var d=function(t,e){var n,r={};if(e)for(var i=t;i.componentInstance;)(i=i.componentInstance._vnode)&&i.data&&(n=ou(i.data))&&Xr(r,n);(n=ou(t.data))&&Xr(r,n);for(var a=t;a=a.parent;)a.data&&(n=ou(a.data))&&Xr(r,n);return r}(e,!0);for(a in u)Mr(d[a])&&du(o,a,"");for(a in d)(i=d[a])!==u[a]&&du(o,a,null==i?"":i)}}var vu={create:pu,update:pu},gu=/\s+/;function mu(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(gu).forEach(function(e){return t.classList.add(e)}):t.classList.add(e);else{var n=" "+(t.getAttribute("class")||"")+" ";n.indexOf(" "+e+" ")<0&&t.setAttribute("class",(n+e).trim())}}function yu(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(gu).forEach(function(e){return t.classList.remove(e)}):t.classList.remove(e),t.classList.length||t.removeAttribute("class");else{for(var n=" "+(t.getAttribute("class")||"")+" ",r=" "+e+" ";n.indexOf(r)>=0;)n=n.replace(r," ");(n=n.trim())?t.setAttribute("class",n):t.removeAttribute("class")}}function bu(t){if(t){if("object"===(void 0===t?"undefined":n(t))){var e={};return!1!==t.css&&Xr(e,_u(t.name||"v")),Xr(e,t),e}return"string"==typeof t?_u(t):void 0}}var _u=Hr(function(t){return{enterClass:t+"-enter",enterToClass:t+"-enter-to",enterActiveClass:t+"-enter-active",leaveClass:t+"-leave",leaveToClass:t+"-leave-to",leaveActiveClass:t+"-leave-active"}}),xu=gi&&!xi,wu="transition",ku="animation",Su="transition",Mu="transitionend",Cu="animation",Du="animationend";xu&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(Su="WebkitTransition",Mu="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(Cu="WebkitAnimation",Du="webkitAnimationEnd"));var Au=gi?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(t){return t()};function Ou(t){Au(function(){Au(t)})}function Tu(t,e){var n=t._transitionClasses||(t._transitionClasses=[]);n.indexOf(e)<0&&(n.push(e),mu(t,e))}function Pu(t,e){t._transitionClasses&&Wr(t._transitionClasses,e),yu(t,e)}function Iu(t,e,n){var r=Lu(t,e),i=r.type,a=r.timeout,o=r.propCount;if(!i)return n();var s=i===wu?Mu:Du,l=0,u=function(){t.removeEventListener(s,c),n()},c=function(e){e.target===t&&++l>=o&&u()};setTimeout(function(){l<o&&u()},a+1),t.addEventListener(s,c)}var Fu=/\b(transform|all)(,|$)/;function Lu(t,e){var n,r=window.getComputedStyle(t),i=(r[Su+"Delay"]||"").split(", "),a=(r[Su+"Duration"]||"").split(", "),o=Ru(i,a),s=(r[Cu+"Delay"]||"").split(", "),l=(r[Cu+"Duration"]||"").split(", "),u=Ru(s,l),c=0,d=0;return e===wu?o>0&&(n=wu,c=o,d=a.length):e===ku?u>0&&(n=ku,c=u,d=l.length):d=(n=(c=Math.max(o,u))>0?o>u?wu:ku:null)?n===wu?a.length:l.length:0,{type:n,timeout:c,propCount:d,hasTransform:n===wu&&Fu.test(r[Su+"Property"])}}function Ru(t,e){for(;t.length<e.length;)t=t.concat(t);return Math.max.apply(null,e.map(function(e,n){return ju(e)+ju(t[n])}))}function ju(t){return 1e3*Number(t.slice(0,-1).replace(",","."))}function Nu(t,e){var n=t.elm;Cr(n._leaveCb)&&(n._leaveCb.cancelled=!0,n._leaveCb());var r=bu(t.data.transition);if(!Mr(r)&&!Cr(n._enterCb)&&1===n.nodeType){for(var i=r.css,a=r.type,o=r.enterClass,s=r.enterToClass,l=r.enterActiveClass,u=r.appearClass,c=r.appearToClass,d=r.appearActiveClass,f=r.beforeEnter,h=r.enter,p=r.afterEnter,v=r.enterCancelled,g=r.beforeAppear,m=r.appear,y=r.afterAppear,b=r.appearCancelled,_=r.duration,x=Ho,w=Ho.$vnode;w&&w.parent;)x=(w=w.parent).context;var k=!x._isMounted||!t.isRootInsert;if(!k||m||""===m){var S=k&&u?u:o,M=k&&d?d:l,C=k&&c?c:s,D=k&&g||f,A=k&&"function"==typeof m?m:h,O=k&&y||p,T=k&&b||v,P=Nr(Or(_)?_.enter:_);null!=P&&Eu(P,"enter",t);var I=!1!==i&&!xi,F=Wu(A),L=n._enterCb=ai(function(){I&&(Pu(n,C),Pu(n,M)),L.cancelled?(I&&Pu(n,S),T&&T(n)):O&&O(n),n._enterCb=null});t.data.show||Qa(t,"insert",function(){var e=n.parentNode,r=e&&e._pending&&e._pending[t.key];r&&r.tag===t.tag&&r.elm._leaveCb&&r.elm._leaveCb(),A&&A(n,L)}),D&&D(n),I&&(Tu(n,S),Tu(n,M),Ou(function(){Pu(n,S),L.cancelled||(Tu(n,C),F||(zu(P)?setTimeout(L,P):Iu(n,a,L)))})),t.data.show&&(e&&e(),A&&A(n,L)),I||F||L()}}}function $u(t,e){var n=t.elm;Cr(n._enterCb)&&(n._enterCb.cancelled=!0,n._enterCb());var r=bu(t.data.transition);if(Mr(r)||1!==n.nodeType)return e();if(!Cr(n._leaveCb)){var i=r.css,a=r.type,o=r.leaveClass,s=r.leaveToClass,l=r.leaveActiveClass,u=r.beforeLeave,c=r.leave,d=r.afterLeave,f=r.leaveCancelled,h=r.delayLeave,p=r.duration,v=!1!==i&&!xi,g=Wu(c),m=Nr(Or(p)?p.leave:p);Cr(m)&&Eu(m,"leave",t);var y=n._leaveCb=ai(function(){n.parentNode&&n.parentNode._pending&&(n.parentNode._pending[t.key]=null),v&&(Pu(n,s),Pu(n,l)),y.cancelled?(v&&Pu(n,o),f&&f(n)):(e(),d&&d(n)),n._leaveCb=null});h?h(b):b()}function b(){y.cancelled||(!t.data.show&&n.parentNode&&((n.parentNode._pending||(n.parentNode._pending={}))[t.key]=t),u&&u(n),v&&(Tu(n,o),Tu(n,l),Ou(function(){Pu(n,o),y.cancelled||(Tu(n,s),g||(zu(m)?setTimeout(y,m):Iu(n,a,y)))})),c&&c(n,y),v||g||y())}}function Eu(t,e,n){"number"!=typeof t?Fi("<transition> explicit "+e+" duration is not a valid number - got "+JSON.stringify(t)+".",n.context):isNaN(t)&&Fi("<transition> explicit "+e+" duration is NaN - the duration expression might be incorrect.",n.context)}function zu(t){return"number"==typeof t&&!isNaN(t)}function Wu(t){if(Mr(t))return!1;var e=t.fns;return Cr(e)?Wu(Array.isArray(e)?e[0]:e):(t._length||t.length)>1}function Yu(t,e){!0!==e.data.show&&Nu(e)}var Vu=function(t){var e,n,r={},i=t.modules,a=t.nodeOps;for(e=0;e<tl.length;++e)for(r[tl[e]]=[],n=0;n<i.length;++n)Cr(i[n][tl[e]])&&r[tl[e]].push(i[n][tl[e]]);function o(t){var e=a.parentNode(t);Cr(e)&&a.removeChild(e,t)}function s(t,e){return!e&&!t.ns&&!(ui.ignoredElements.length&&ui.ignoredElements.some(function(e){return Fr(e)?e.test(t.tag):e===t.tag}))&&ui.isUnknownElement(t.tag)}var l=0;function u(t,e,n,i,o,u,h){if(Cr(t.elm)&&Cr(u)&&(t=u[h]=Gi(t)),t.isRootInsert=!o,!function(t,e,n,i){var a=t.data;if(Cr(a)){var o=Cr(t.componentInstance)&&a.keepAlive;if(Cr(a=a.hook)&&Cr(a=a.init)&&a(t,!1),Cr(t.componentInstance))return c(t,e),d(n,t.elm,i),Dr(o)&&function(t,e,n,i){for(var a,o=t;o.componentInstance;)if(o=o.componentInstance._vnode,Cr(a=o.data)&&Cr(a=a.transition)){for(a=0;a<r.activate.length;++a)r.activate[a](Qs,o);e.push(o);break}d(n,t.elm,i)}(t,e,n,i),!0}}(t,e,n,i)){var g=t.data,m=t.children,y=t.tag;Cr(y)?(g&&g.pre&&l++,s(t,l)&&Fi("Unknown custom element: <"+y+'> - did you register the component correctly? For recursive components, make sure to provide the "name" option.',t.context),t.elm=t.ns?a.createElementNS(t.ns,y):a.createElement(y,t),v(t),f(t,m,e),Cr(g)&&p(t,e),d(n,t.elm,i),g&&g.pre&&l--):Dr(t.isComment)?(t.elm=a.createComment(t.text),d(n,t.elm,i)):(t.elm=a.createTextNode(t.text),d(n,t.elm,i))}}function c(t,e){Cr(t.data.pendingInsert)&&(e.push.apply(e,t.data.pendingInsert),t.data.pendingInsert=null),t.elm=t.componentInstance.$el,h(t)?(p(t,e),v(t)):(Xs(t),e.push(t))}function d(t,e,n){Cr(t)&&(Cr(n)?a.parentNode(n)===t&&a.insertBefore(t,e,n):a.appendChild(t,e))}function f(t,e,n){if(Array.isArray(e)){_(e);for(var r=0;r<e.length;++r)u(e[r],n,t.elm,null,!0,e,r)}else Ar(t.text)&&a.appendChild(t.elm,a.createTextNode(String(t.text)))}function h(t){for(;t.componentInstance;)t=t.componentInstance._vnode;return Cr(t.tag)}function p(t,n){for(var i=0;i<r.create.length;++i)r.create[i](Qs,t);Cr(e=t.data.hook)&&(Cr(e.create)&&e.create(Qs,t),Cr(e.insert)&&n.push(t))}function v(t){var e;if(Cr(e=t.fnScopeId))a.setStyleScope(t.elm,e);else for(var n=t;n;)Cr(e=n.context)&&Cr(e=e.$options._scopeId)&&a.setStyleScope(t.elm,e),n=n.parent;Cr(e=Ho)&&e!==t.context&&e!==t.fnContext&&Cr(e=e.$options._scopeId)&&a.setStyleScope(t.elm,e)}function g(t,e,n,r,i,a){for(;r<=i;++r)u(n[r],a,t,e,!1,n,r)}function m(t){var e,n,i=t.data;if(Cr(i))for(Cr(e=i.hook)&&Cr(e=e.destroy)&&e(t),e=0;e<r.destroy.length;++e)r.destroy[e](t);if(Cr(e=t.children))for(n=0;n<t.children.length;++n)m(t.children[n])}function y(t,e,n,r){for(;n<=r;++n){var i=e[n];Cr(i)&&(Cr(i.tag)?(b(i),m(i)):o(i.elm))}}function b(t,e){if(Cr(e)||Cr(t.data)){var n,i=r.remove.length+1;for(Cr(e)?e.listeners+=i:e=function(t,e){function n(){0==--n.listeners&&o(t)}return n.listeners=e,n}(t.elm,i),Cr(n=t.componentInstance)&&Cr(n=n._vnode)&&Cr(n.data)&&b(n,e),n=0;n<r.remove.length;++n)r.remove[n](t,e);Cr(n=t.data.hook)&&Cr(n=n.remove)?n(t,e):e()}else o(t.elm)}function _(t){for(var e={},n=0;n<t.length;n++){var r=t[n],i=r.key;Cr(i)&&(e[i]?Fi("Duplicate keys detected: '"+i+"'. This may cause an update error.",r.context):e[i]=!0)}}function x(t,e,n,r){for(var i=n;i<r;i++){var a=e[i];if(Cr(a)&&el(t,a))return i}}function w(t,e,n,i,o,s){if(t!==e){Cr(e.elm)&&Cr(i)&&(e=i[o]=Gi(e));var l=e.elm=t.elm;if(Dr(t.isAsyncPlaceholder))Cr(e.asyncFactory.resolved)?C(t.elm,e,n):e.isAsyncPlaceholder=!0;else if(Dr(e.isStatic)&&Dr(t.isStatic)&&e.key===t.key&&(Dr(e.isCloned)||Dr(e.isOnce)))e.componentInstance=t.componentInstance;else{var c,d=e.data;Cr(d)&&Cr(c=d.hook)&&Cr(c=c.prepatch)&&c(t,e);var f=t.children,p=e.children;if(Cr(d)&&h(e)){for(c=0;c<r.update.length;++c)r.update[c](t,e);Cr(c=d.hook)&&Cr(c=c.update)&&c(t,e)}Mr(e.text)?Cr(f)&&Cr(p)?f!==p&&function(t,e,n,r,i){var o,s,l,c=0,d=0,f=e.length-1,h=e[0],p=e[f],v=n.length-1,m=n[0],b=n[v],k=!i;for(_(n);c<=f&&d<=v;)Mr(h)?h=e[++c]:Mr(p)?p=e[--f]:el(h,m)?(w(h,m,r,n,d),h=e[++c],m=n[++d]):el(p,b)?(w(p,b,r,n,v),p=e[--f],b=n[--v]):el(h,b)?(w(h,b,r,n,v),k&&a.insertBefore(t,h.elm,a.nextSibling(p.elm)),h=e[++c],b=n[--v]):el(p,m)?(w(p,m,r,n,d),k&&a.insertBefore(t,p.elm,h.elm),p=e[--f],m=n[++d]):(Mr(o)&&(o=nl(e,c,f)),Mr(s=Cr(m.key)?o[m.key]:x(m,e,c,f))?u(m,r,t,h.elm,!1,n,d):el(l=e[s],m)?(w(l,m,r,n,d),e[s]=void 0,k&&a.insertBefore(t,l.elm,h.elm)):u(m,r,t,h.elm,!1,n,d),m=n[++d]);c>f?g(t,Mr(n[v+1])?null:n[v+1].elm,n,d,v,r):d>v&&y(0,e,c,f)}(l,f,p,n,s):Cr(p)?(_(p),Cr(t.text)&&a.setTextContent(l,""),g(l,null,p,0,p.length-1,n)):Cr(f)?y(0,f,0,f.length-1):Cr(t.text)&&a.setTextContent(l,""):t.text!==e.text&&a.setTextContent(l,e.text),Cr(d)&&Cr(c=d.hook)&&Cr(c=c.postpatch)&&c(t,e)}}}function k(t,e,n){if(Dr(n)&&Cr(t.parent))t.parent.data.pendingInsert=e;else for(var r=0;r<e.length;++r)e[r].data.hook.insert(e[r])}var S=!1,M=$r("attrs,class,staticClass,staticStyle,key");function C(t,e,n,r){var i,a=e.tag,o=e.data,l=e.children;if(r=r||o&&o.pre,e.elm=t,Dr(e.isComment)&&Cr(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(!function(t,e,n){return Cr(e.tag)?0===e.tag.indexOf("vue-component")||!s(e,n)&&e.tag.toLowerCase()===(t.tagName&&t.tagName.toLowerCase()):t.nodeType===(e.isComment?8:3)}(t,e,r))return!1;if(Cr(o)&&(Cr(i=o.hook)&&Cr(i=i.init)&&i(e,!0),Cr(i=e.componentInstance)))return c(e,n),!0;if(Cr(a)){if(Cr(l))if(t.hasChildNodes())if(Cr(i=o)&&Cr(i=i.domProps)&&Cr(i=i.innerHTML)){if(i!==t.innerHTML)return"undefined"==typeof console||S||(S=!0,console.warn("Parent: ",t),console.warn("server innerHTML: ",i),console.warn("client innerHTML: ",t.innerHTML)),!1}else{for(var u=!0,d=t.firstChild,h=0;h<l.length;h++){if(!d||!C(d,l[h],n,r)){u=!1;break}d=d.nextSibling}if(!u||d)return"undefined"==typeof console||S||(S=!0,console.warn("Parent: ",t),console.warn("Mismatching childNodes vs. VNodes: ",t.childNodes,l)),!1}else f(e,l,n);if(Cr(o)){var v=!1;for(var g in o)if(!M(g)){v=!0,p(e,n);break}!v&&o.class&&Ja(o.class)}}else t.data!==e.text&&(t.data=e.text);return!0}return function(t,e,n,i){if(!Mr(e)){var o,s=!1,l=[];if(Mr(t))s=!0,u(e,l);else{var c=Cr(t.nodeType);if(!c&&el(t,e))w(t,e,l,null,null,i);else{if(c){if(1===t.nodeType&&t.hasAttribute(oi)&&(t.removeAttribute(oi),n=!0),Dr(n)){if(C(t,e,l))return k(e,l,!0),t;Fi("The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside <p>, or missing <tbody>. Bailing hydration and performing full client-side render.")}o=t,t=new Hi(a.tagName(o).toLowerCase(),{},[],void 0,o)}var d=t.elm,f=a.parentNode(d);if(u(e,l,d._leaveCb?null:f,a.nextSibling(d)),Cr(e.parent))for(var p=e.parent,v=h(e);p;){for(var g=0;g<r.destroy.length;++g)r.destroy[g](p);if(p.elm=e.elm,v){for(var b=0;b<r.create.length;++b)r.create[b](Qs,p);var _=p.data.hook.insert;if(_.merged)for(var x=1;x<_.fns.length;x++)_.fns[x]()}else Xs(p);p=p.parent}Cr(f)?y(0,[t],0,0):Cr(t.tag)&&m(t)}}return k(e,l,s),e.elm}Cr(t)&&m(t)}}({nodeOps:Zs,modules:[hl,wl,eu,iu,vu,gi?{create:Yu,activate:Yu,remove:function(t,e){!0!==t.data.show?$u(t,e):e()}}:{}].concat(ul)});xi&&document.addEventListener("selectionchange",function(){var t=document.activeElement;t&&t.vmodel&&Ku(t,"input")});var Hu={inserted:function(t,e,n,r){"select"===n.tag?(r.elm&&!r.elm._vOptions?Qa(n,"postpatch",function(){Hu.componentUpdated(t,e,n)}):Bu(t,e,n.context),t._vOptions=[].map.call(t.options,Gu)):("textarea"===n.tag||Gs(t.type))&&(t._vModifiers=e.modifiers,e.modifiers.lazy||(t.addEventListener("compositionstart",Ju),t.addEventListener("compositionend",Zu),t.addEventListener("change",Zu),xi&&(t.vmodel=!0)))},componentUpdated:function(t,e,n){if("select"===n.tag){Bu(t,e,n.context);var r=t._vOptions,i=t._vOptions=[].map.call(t.options,Gu);if(i.some(function(t,e){return!ri(t,r[e])}))(t.multiple?e.value.some(function(t){return qu(t,i)}):e.value!==e.oldValue&&qu(e.value,i))&&Ku(t,"change")}}};function Bu(t,e,n){Uu(t,e,n),(_i||wi)&&setTimeout(function(){Uu(t,e,n)},0)}function Uu(t,e,n){var r=e.value,i=t.multiple;if(!i||Array.isArray(r)){for(var a,o,s=0,l=t.options.length;s<l;s++)if(o=t.options[s],i)a=ii(r,Gu(o))>-1,o.selected!==a&&(o.selected=a);else if(ri(Gu(o),r))return void(t.selectedIndex!==s&&(t.selectedIndex=s));i||(t.selectedIndex=-1)}else Fi('<select multiple v-model="'+e.expression+'"> expects an Array value for its binding, but got '+Object.prototype.toString.call(r).slice(8,-1),n)}function qu(t,e){return e.every(function(e){return!ri(e,t)})}function Gu(t){return"_value"in t?t._value:t.value}function Ju(t){t.target.composing=!0}function Zu(t){t.target.composing&&(t.target.composing=!1,Ku(t.target,"input"))}function Ku(t,e){var n=document.createEvent("HTMLEvents");n.initEvent(e,!0,!0),t.dispatchEvent(n)}function Xu(t){return!t.componentInstance||t.data&&t.data.transition?t:Xu(t.componentInstance._vnode)}var Qu={model:Hu,show:{bind:function(t,e,n){var r=e.value,i=(n=Xu(n)).data&&n.data.transition,a=t.__vOriginalDisplay="none"===t.style.display?"":t.style.display;r&&i?(n.data.show=!0,Nu(n,function(){t.style.display=a})):t.style.display=r?a:"none"},update:function(t,e,n){var r=e.value;!r!=!e.oldValue&&((n=Xu(n)).data&&n.data.transition?(n.data.show=!0,r?Nu(n,function(){t.style.display=t.__vOriginalDisplay}):$u(n,function(){t.style.display="none"})):t.style.display=r?t.__vOriginalDisplay:"none")},unbind:function(t,e,n,r,i){i||(t.style.display=t.__vOriginalDisplay)}}},tc={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function ec(t){var e=t&&t.componentOptions;return e&&e.Ctor.options.abstract?ec(Eo(e.children)):t}function nc(t){var e={},n=t.$options;for(var r in n.propsData)e[r]=t[r];var i=n._parentListeners;for(var a in i)e[Ur(a)]=i[a];return e}function rc(t,e){if(/\d-keep-alive$/.test(e.tag))return t("keep-alive",{props:e.componentOptions.propsData})}var ic=function(t){return t.tag||$o(t)},ac=function(t){return"show"===t.name},oc={name:"transition",props:tc,abstract:!0,render:function(t){var e=this,n=this.$slots.default;if(n&&(n=n.filter(ic)).length){n.length>1&&Fi("<transition> can only be used on a single element. Use <transition-group> for lists.",this.$parent);var r=this.mode;r&&"in-out"!==r&&"out-in"!==r&&Fi("invalid <transition> mode: "+r,this.$parent);var i=n[0];if(function(t){for(;t=t.parent;)if(t.data.transition)return!0}(this.$vnode))return i;var a=ec(i);if(!a)return i;if(this._leaving)return rc(t,i);var o="__transition-"+this._uid+"-";a.key=null==a.key?a.isComment?o+"comment":o+a.tag:Ar(a.key)?0===String(a.key).indexOf(o)?a.key:o+a.key:a.key;var s=(a.data||(a.data={})).transition=nc(this),l=this._vnode,u=ec(l);if(a.data.directives&&a.data.directives.some(ac)&&(a.data.show=!0),u&&u.data&&!function(t,e){return e.key===t.key&&e.tag===t.tag}(a,u)&&!$o(u)&&(!u.componentInstance||!u.componentInstance._vnode.isComment)){var c=u.data.transition=Xr({},s);if("out-in"===r)return this._leaving=!0,Qa(c,"afterLeave",function(){e._leaving=!1,e.$forceUpdate()}),rc(t,i);if("in-out"===r){if($o(a))return l;var d,f=function(){d()};Qa(s,"afterEnter",f),Qa(s,"enterCancelled",f),Qa(c,"delayLeave",function(t){d=t})}}return i}}},sc=Xr({tag:String,moveClass:String},tc);function lc(t){t.elm._moveCb&&t.elm._moveCb(),t.elm._enterCb&&t.elm._enterCb()}function uc(t){t.data.newPos=t.elm.getBoundingClientRect()}function cc(t){var e=t.data.pos,n=t.data.newPos,r=e.left-n.left,i=e.top-n.top;if(r||i){t.data.moved=!0;var a=t.elm.style;a.transform=a.WebkitTransform="translate("+r+"px,"+i+"px)",a.transitionDuration="0s"}}delete sc.mode;var dc={Transition:oc,TransitionGroup:{props:sc,beforeMount:function(){var t=this,e=this._update;this._update=function(n,r){var i=Uo(t);t.__patch__(t._vnode,t.kept,!1,!0),t._vnode=t.kept,i(),e.call(t,n,r)}},render:function(t){for(var e=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),r=this.prevChildren=this.children,i=this.$slots.default||[],a=this.children=[],o=nc(this),s=0;s<i.length;s++){var l=i[s];if(l.tag)if(null!=l.key&&0!==String(l.key).indexOf("__vlist"))a.push(l),n[l.key]=l,(l.data||(l.data={})).transition=o;else{var u=l.componentOptions,c=u?u.Ctor.options.name||u.tag||"":l.tag;Fi("<transition-group> children must be keyed: <"+c+">")}}if(r){for(var d=[],f=[],h=0;h<r.length;h++){var p=r[h];p.data.transition=o,p.data.pos=p.elm.getBoundingClientRect(),n[p.key]?d.push(p):f.push(p)}this.kept=t(e,null,d),this.removed=f}return t(e,null,a)},updated:function(){var t=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";t.length&&this.hasMove(t[0].elm,e)&&(t.forEach(lc),t.forEach(uc),t.forEach(cc),this._reflow=document.body.offsetHeight,t.forEach(function(t){if(t.data.moved){var n=t.elm,r=n.style;Tu(n,e),r.transform=r.WebkitTransform=r.transitionDuration="",n.addEventListener(Mu,n._moveCb=function t(r){r&&r.target!==n||r&&!/transform$/.test(r.propertyName)||(n.removeEventListener(Mu,t),n._moveCb=null,Pu(n,e))})}}))},methods:{hasMove:function(t,e){if(!xu)return!1;if(this._hasMove)return this._hasMove;var n=t.cloneNode();t._transitionClasses&&t._transitionClasses.forEach(function(t){yu(n,t)}),mu(n,e),n.style.display="none",this.$el.appendChild(n);var r=Lu(n);return this.$el.removeChild(n),this._hasMove=r.hasTransform}}}};bs.config.mustUseProp=Os,bs.config.isReservedTag=Bs,bs.config.isReservedAttr=Ds,bs.config.getTagNamespace=Us,bs.config.isUnknownElement=function(t){if(!gi)return!0;if(Bs(t))return!1;if(t=t.toLowerCase(),null!=qs[t])return qs[t];var e=document.createElement(t);return t.indexOf("-")>-1?qs[t]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:qs[t]=/HTMLUnknownElement/.test(e.toString())},Xr(bs.options.directives,Qu),Xr(bs.options.components,dc),bs.prototype.__patch__=gi?Vu:ti,bs.prototype.$mount=function(t,e){return function(t,e,n){var r;return t.$el=e,t.$options.render||(t.$options.render=Ui,t.$options.template&&"#"!==t.$options.template.charAt(0)||t.$options.el||e?Fi("You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.",t):Fi("Failed to mount component: template or render function not defined.",t)),Jo(t,"beforeMount"),r=ui.performance&&Aa?function(){var e=t._name,r=t._uid,i="vue-perf-start:"+r,a="vue-perf-end:"+r;Aa(i);var o=t._render();Aa(a),Oa("vue "+e+" render",i,a),Aa(i),t._update(o,n),Aa(a),Oa("vue "+e+" patch",i,a)}:function(){t._update(t._render(),n)},new ls(t,r,ti,{before:function(){t._isMounted&&!t._isDestroyed&&Jo(t,"beforeUpdate")}},!0),n=!1,null==t.$vnode&&(t._isMounted=!0,Jo(t,"mounted")),t}(this,t=t&&gi?Js(t):void 0,e)},gi&&setTimeout(function(){ui.devtools&&(Oi?Oi.emit("init",bs):console[console.info?"info":"log"]("Download the Vue Devtools extension for a better development experience:\nhttps://github.com/vuejs/vue-devtools")),!1!==ui.productionTip&&"undefined"!=typeof console&&console[console.info?"info":"log"]("You are running Vue in development mode.\nMake sure to turn on production mode when deploying for production.\nSee more tips at https://vuejs.org/guide/deployment.html")},0);var fc=/\{\{((?:.|\r?\n)+?)\}\}/g,hc=/[-.*+?^${}()|[\]\/\\]/g,pc=Hr(function(t){var e=t[0].replace(hc,"\\$&"),n=t[1].replace(hc,"\\$&");return new RegExp(e+"((?:.|\\n)+?)"+n,"g")});function vc(t,e){var n=e?pc(e):fc;if(n.test(t)){for(var r,i,a,o=[],s=[],l=n.lastIndex=0;r=n.exec(t);){(i=r.index)>l&&(s.push(a=t.slice(l,i)),o.push(JSON.stringify(a)));var u=Sl(r[1].trim());o.push("_s("+u+")"),s.push({"@binding":u}),l=i+r[0].length}return l<t.length&&(s.push(a=t.slice(l)),o.push(JSON.stringify(a))),{expression:o.join("+"),tokens:s}}}var gc={staticKeys:["staticClass"],transformNode:function(t,e){var n=e.warn||Cl,r=jl(t,"class");r&&vc(r,e.delimiters)&&n('class="'+r+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div class="{{ val }}">, use <div :class="val">.',t.rawAttrsMap.class),r&&(t.staticClass=JSON.stringify(r));var i=Rl(t,"class",!1);i&&(t.classBinding=i)},genData:function(t){var e="";return t.staticClass&&(e+="staticClass:"+t.staticClass+","),t.classBinding&&(e+="class:"+t.classBinding+","),e}};var mc,yc={staticKeys:["staticStyle"],transformNode:function(t,e){var n=e.warn||Cl,r=jl(t,"style");r&&(vc(r,e.delimiters)&&n('style="'+r+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div style="{{ val }}">, use <div :style="val">.',t.rawAttrsMap.style),t.staticStyle=JSON.stringify(au(r)));var i=Rl(t,"style",!1);i&&(t.styleBinding=i)},genData:function(t){var e="";return t.staticStyle&&(e+="staticStyle:"+t.staticStyle+","),t.styleBinding&&(e+="style:("+t.styleBinding+"),"),e}},bc=function(t){return(mc=mc||document.createElement("div")).innerHTML=t,mc.textContent},_c=$r("area,base,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr"),xc=$r("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source"),wc=$r("address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track"),kc=/^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,Sc=/^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,Mc="[a-zA-Z_][\\-\\.0-9_a-zA-Z"+ci+"]*",Cc="((?:"+Mc+"\\:)?"+Mc+")",Dc=new RegExp("^<"+Cc),Ac=/^\s*(\/?)>/,Oc=new RegExp("^<\\/"+Cc+"[^>]*>"),Tc=/^<!DOCTYPE [^>]+>/i,Pc=/^<!\--/,Ic=/^<!\[/,Fc=$r("script,style,textarea",!0),Lc={},Rc={"&lt;":"<","&gt;":">","&quot;":'"',"&amp;":"&","&#10;":"\n","&#9;":"\t","&#39;":"'"},jc=/&(?:lt|gt|quot|amp|#39);/g,Nc=/&(?:lt|gt|quot|amp|#39|#10|#9);/g,$c=$r("pre,textarea",!0),Ec=function(t,e){return t&&$c(t)&&"\n"===e[0]};function zc(t,e){var n=e?Nc:jc;return t.replace(n,function(t){return Rc[t]})}var Wc,Yc,Vc,Hc,Bc,Uc,qc,Gc,Jc,Zc=/^@|^v-on:/,Kc=/^v-|^@|^:/,Xc=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,Qc=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,td=/^\(|\)$/g,ed=/^\[.*\]$/,nd=/:(.*)$/,rd=/^:|^\.|^v-bind:/,id=/\.[^.]+/g,ad=/^v-slot(:|$)|^#/,od=/[\r\n]/,sd=/\s+/g,ld=/[\s"'<>\/=]/,ud=Hr(bc),cd="_empty_";function dd(t,e,n){return{type:1,tag:t,attrsList:e,attrsMap:function(t){for(var e={},n=0,r=t.length;n<r;n++)!e[t[n].name]||_i||wi||Wc("duplicate attribute: "+t[n].name,t[n]),e[t[n].name]=t[n].value;return e}(e),rawAttrsMap:{},parent:n,children:[]}}function fd(t,e){Wc=e.warn||Cl,Uc=e.isPreTag||ei,qc=e.mustUseProp||ei,Gc=e.getTagNamespace||ei;var n=e.isReservedTag||ei;Jc=function(t){return!!t.component||!n(t.tag)},Vc=Dl(e.modules,"transformNode"),Hc=Dl(e.modules,"preTransformNode"),Bc=Dl(e.modules,"postTransformNode"),Yc=e.delimiters;var r,i,a=[],o=!1!==e.preserveWhitespace,s=e.whitespace,l=!1,u=!1,c=!1;function d(t,e){c||(c=!0,Wc(t,e))}function f(t){if(h(t),l||t.processed||(t=hd(t,e)),a.length||t===r||(r.if&&(t.elseif||t.else)?(p(t),vd(r,{exp:t.elseif,block:t})):d("Component template should contain exactly one root element. If you are using v-if on multiple elements, use v-else-if to chain them instead.",{start:t.start})),i&&!t.forbidden)if(t.elseif||t.else)o=t,(s=function(t){var e=t.length;for(;e--;){if(1===t[e].type)return t[e];" "!==t[e].text&&Wc('text "'+t[e].text.trim()+'" between v-if and v-else(-if) will be ignored.',t[e]),t.pop()}}(i.children))&&s.if?vd(s,{exp:o.elseif,block:o}):Wc("v-"+(o.elseif?'else-if="'+o.elseif+'"':"else")+" used on element <"+o.tag+"> without corresponding v-if.",o.rawAttrsMap[o.elseif?"v-else-if":"v-else"]);else{if(t.slotScope){var n=t.slotTarget||'"default"';(i.scopedSlots||(i.scopedSlots={}))[n]=t}i.children.push(t),t.parent=i}var o,s;t.children=t.children.filter(function(t){return!t.slotScope}),h(t),t.pre&&(l=!1),Uc(t.tag)&&(u=!1);for(var c=0;c<Bc.length;c++)Bc[c](t,e)}function h(t){if(!u)for(var e;(e=t.children[t.children.length-1])&&3===e.type&&" "===e.text;)t.children.pop()}function p(t){"slot"!==t.tag&&"template"!==t.tag||d("Cannot use <"+t.tag+"> as component root element because it may contain multiple nodes.",{start:t.start}),t.attrsMap.hasOwnProperty("v-for")&&d("Cannot use v-for on stateful component root element because it renders multiple elements.",t.rawAttrsMap["v-for"])}return function(t,e){for(var n,r,i=[],a=e.expectHTML,o=e.isUnaryTag||ei,s=e.canBeLeftOpenTag||ei,l=0;t;){if(n=t,r&&Fc(r)){var u=0,c=r.toLowerCase(),d=Lc[c]||(Lc[c]=new RegExp("([\\s\\S]*?)(</"+c+"[^>]*>)","i")),f=t.replace(d,function(t,n,r){return u=r.length,Fc(c)||"noscript"===c||(n=n.replace(/<!\--([\s\S]*?)-->/g,"$1").replace(/<!\[CDATA\[([\s\S]*?)]]>/g,"$1")),Ec(c,n)&&(n=n.slice(1)),e.chars&&e.chars(n),""});l+=t.length-f.length,t=f,C(c,l-u,l)}else{var h=t.indexOf("<");if(0===h){if(Pc.test(t)){var p=t.indexOf("--\x3e");if(p>=0){e.shouldKeepComment&&e.comment(t.substring(4,p),l,l+p+3),k(p+3);continue}}if(Ic.test(t)){var v=t.indexOf("]>");if(v>=0){k(v+2);continue}}var g=t.match(Tc);if(g){k(g[0].length);continue}var m=t.match(Oc);if(m){var y=l;k(m[0].length),C(m[1],y,l);continue}var b=S();if(b){M(b),Ec(b.tagName,t)&&k(1);continue}}var _=void 0,x=void 0,w=void 0;if(h>=0){for(x=t.slice(h);!(Oc.test(x)||Dc.test(x)||Pc.test(x)||Ic.test(x)||(w=x.indexOf("<",1))<0);)h+=w,x=t.slice(h);_=t.substring(0,h)}h<0&&(_=t),_&&k(_.length),e.chars&&_&&e.chars(_,l-_.length,l)}if(t===n){e.chars&&e.chars(t),!i.length&&e.warn&&e.warn('Mal-formatted tag at end of template: "'+t+'"',{start:l+t.length});break}}function k(e){l+=e,t=t.substring(e)}function S(){var e=t.match(Dc);if(e){var n,r,i={tagName:e[1],attrs:[],start:l};for(k(e[0].length);!(n=t.match(Ac))&&(r=t.match(Sc)||t.match(kc));)r.start=l,k(r[0].length),r.end=l,i.attrs.push(r);if(n)return i.unarySlash=n[1],k(n[0].length),i.end=l,i}}function M(t){var n=t.tagName,l=t.unarySlash;a&&("p"===r&&wc(n)&&C(r),s(n)&&r===n&&C(n));for(var u=o(n)||!!l,c=t.attrs.length,d=new Array(c),f=0;f<c;f++){var h=t.attrs[f],p=h[3]||h[4]||h[5]||"",v="a"===n&&"href"===h[1]?e.shouldDecodeNewlinesForHref:e.shouldDecodeNewlines;d[f]={name:h[1],value:zc(p,v)},e.outputSourceRange&&(d[f].start=h.start+h[0].match(/^\s*/).length,d[f].end=h.end)}u||(i.push({tag:n,lowerCasedTag:n.toLowerCase(),attrs:d,start:t.start,end:t.end}),r=n),e.start&&e.start(n,d,u,t.start,t.end)}function C(t,n,a){var o,s;if(null==n&&(n=l),null==a&&(a=l),t)for(s=t.toLowerCase(),o=i.length-1;o>=0&&i[o].lowerCasedTag!==s;o--);else o=0;if(o>=0){for(var u=i.length-1;u>=o;u--)(u>o||!t&&e.warn)&&e.warn("tag <"+i[u].tag+"> has no matching end tag.",{start:i[u].start}),e.end&&e.end(i[u].tag,n,a);i.length=o,r=o&&i[o-1].tag}else"br"===s?e.start&&e.start(t,[],!0,n,a):"p"===s&&(e.start&&e.start(t,[],!1,n,a),e.end&&e.end(t,n,a))}C()}(t,{warn:Wc,expectHTML:e.expectHTML,isUnaryTag:e.isUnaryTag,canBeLeftOpenTag:e.canBeLeftOpenTag,shouldDecodeNewlines:e.shouldDecodeNewlines,shouldDecodeNewlinesForHref:e.shouldDecodeNewlinesForHref,shouldKeepComment:e.comments,outputSourceRange:e.outputSourceRange,start:function(t,n,o,s){var c=i&&i.ns||Gc(t);_i&&"svg"===c&&(n=function(t){for(var e=[],n=0;n<t.length;n++){var r=t[n];yd.test(r.name)||(r.name=r.name.replace(bd,""),e.push(r))}return e}(n));var d,h=dd(t,n,i);c&&(h.ns=c),e.outputSourceRange&&(h.start=s,h.rawAttrsMap=h.attrsList.reduce(function(t,e){return t[e.name]=e,t},{})),n.forEach(function(t){ld.test(t.name)&&Wc("Invalid dynamic argument expression: attribute names cannot contain spaces, quotes, <, >, / or =.",{start:t.start+t.name.indexOf("["),end:t.start+t.name.length})}),"style"!==(d=h).tag&&("script"!==d.tag||d.attrsMap.type&&"text/javascript"!==d.attrsMap.type)||Ai()||(h.forbidden=!0,Wc("Templates should only be responsible for mapping the state to the UI. Avoid placing tags with side-effects in your templates, such as <"+t+">, as they will not be parsed.",{start:h.start}));for(var v=0;v<Hc.length;v++)h=Hc[v](h,e)||h;l||(!function(t){null!=jl(t,"v-pre")&&(t.pre=!0)}(h),h.pre&&(l=!0)),Uc(h.tag)&&(u=!0),l?function(t){var e=t.attrsList,n=e.length;if(n)for(var r=t.attrs=new Array(n),i=0;i<n;i++)r[i]={name:e[i].name,value:JSON.stringify(e[i].value)},null!=e[i].start&&(r[i].start=e[i].start,r[i].end=e[i].end);else t.pre||(t.plain=!0)}(h):h.processed||(pd(h),function(t){var e=jl(t,"v-if");if(e)t.if=e,vd(t,{exp:e,block:t});else{null!=jl(t,"v-else")&&(t.else=!0);var n=jl(t,"v-else-if");n&&(t.elseif=n)}}(h),function(t){null!=jl(t,"v-once")&&(t.once=!0)}(h)),r||p(r=h),o?f(h):(i=h,a.push(h))},end:function(t,n,r){var o=a[a.length-1];a.length-=1,i=a[a.length-1],e.outputSourceRange&&(o.end=r),f(o)},chars:function(n,r,a){if(i){if(!_i||"textarea"!==i.tag||i.attrsMap.placeholder!==n){var c,f,h,p=i.children;if(n=u||n.trim()?"script"===(c=i).tag||"style"===c.tag?n:ud(n):p.length?s?"condense"===s&&od.test(n)?"":" ":o?" ":"":"")"condense"===s&&(n=n.replace(sd," ")),!l&&" "!==n&&(f=vc(n,Yc))?h={type:2,expression:f.expression,tokens:f.tokens,text:n}:" "===n&&p.length&&" "===p[p.length-1].text||(h={type:3,text:n}),h&&(e.outputSourceRange&&(h.start=r,h.end=a),p.push(h))}}else n===t?d("Component template requires a root element, rather than just text.",{start:r}):(n=n.trim())&&d('text "'+n+'" outside root element will be ignored.',{start:r})},comment:function(t,n,r){if(i){var a={type:3,text:t,isComment:!0};e.outputSourceRange&&(a.start=n,a.end=r),i.children.push(a)}}}),r}function hd(t,e){var n,r;!function(t){var e=Rl(t,"key");if(e){if("template"===t.tag&&Wc("<template> cannot be keyed. Place the key on real elements instead.",Ll(t,"key")),t.for){var n=t.iterator2||t.iterator1,r=t.parent;n&&n===e&&r&&"transition-group"===r.tag&&Wc("Do not use v-for index as key on <transition-group> children, this is the same as not using keys.",Ll(t,"key"),!0)}t.key=e}}(t),t.plain=!t.key&&!t.scopedSlots&&!t.attrsList.length,(r=Rl(n=t,"ref"))&&(n.ref=r,n.refInFor=function(t){for(var e=t;e;){if(void 0!==e.for)return!0;e=e.parent}return!1}(n)),function(t){var e;"template"===t.tag?((e=jl(t,"scope"))&&Wc('the "scope" attribute for scoped slots have been deprecated and replaced by "slot-scope" since 2.5. The new "slot-scope" attribute can also be used on plain elements in addition to <template> to denote scoped slots.',t.rawAttrsMap.scope,!0),t.slotScope=e||jl(t,"slot-scope")):(e=jl(t,"slot-scope"))&&(t.attrsMap["v-for"]&&Wc("Ambiguous combined usage of slot-scope and v-for on <"+t.tag+"> (v-for takes higher priority). Use a wrapper <template> for the scoped slot to make it clearer.",t.rawAttrsMap["slot-scope"],!0),t.slotScope=e);var n=Rl(t,"slot");n&&(t.slotTarget='""'===n?'"default"':n,t.slotTargetDynamic=!(!t.attrsMap[":slot"]&&!t.attrsMap["v-bind:slot"]),"template"===t.tag||t.slotScope||Ol(t,"slot",n,Ll(t,"slot")));if("template"===t.tag){var r=Nl(t,ad);if(r){(t.slotTarget||t.slotScope)&&Wc("Unexpected mixed usage of different slot syntaxes.",t),t.parent&&!Jc(t.parent)&&Wc("<template v-slot> can only appear at the root level inside the receiving the component",t);var i=gd(r),a=i.name,o=i.dynamic;t.slotTarget=a,t.slotTargetDynamic=o,t.slotScope=r.value||cd}}else{var s=Nl(t,ad);if(s){Jc(t)||Wc("v-slot can only be used on components or <template>.",s),(t.slotScope||t.slotTarget)&&Wc("Unexpected mixed usage of different slot syntaxes.",t),t.scopedSlots&&Wc("To avoid scope ambiguity, the default slot should also use <template> syntax when there are other named slots.",s);var l=t.scopedSlots||(t.scopedSlots={}),u=gd(s),c=u.name,d=u.dynamic,f=l[c]=dd("template",[],t);f.slotTarget=c,f.slotTargetDynamic=d,f.children=t.children.filter(function(t){if(!t.slotScope)return t.parent=f,!0}),f.slotScope=s.value||cd,t.children=[],t.plain=!1}}}(t),function(t){"slot"===t.tag&&(t.slotName=Rl(t,"name"),t.key&&Wc("`key` does not work on <slot> because slots are abstract outlets and can possibly expand into multiple elements. Use the key on a wrapping element instead.",Ll(t,"key")))}(t),function(t){var e;(e=Rl(t,"is"))&&(t.component=e);null!=jl(t,"inline-template")&&(t.inlineTemplate=!0)}(t);for(var i=0;i<Vc.length;i++)t=Vc[i](t,e)||t;return function(t){var e,n,r,i,a,o,s,l,u=t.attrsList;for(e=0,n=u.length;e<n;e++)if(r=i=u[e].name,a=u[e].value,Kc.test(r))if(t.hasBindings=!0,(o=md(r.replace(Kc,"")))&&(r=r.replace(id,"")),rd.test(r))r=r.replace(rd,""),a=Sl(a),(l=ed.test(r))&&(r=r.slice(1,-1)),0===a.trim().length&&Wc('The value for a v-bind expression cannot be empty. Found in "v-bind:'+r+'"'),o&&(o.prop&&!l&&"innerHtml"===(r=Ur(r))&&(r="innerHTML"),o.camel&&!l&&(r=Ur(r)),o.sync&&(s=zl(a,"$event"),l?Fl(t,'"update:"+('+r+")",s,null,!1,Wc,u[e],!0):(Fl(t,"update:"+Ur(r),s,null,!1,Wc,u[e]),Jr(r)!==Ur(r)&&Fl(t,"update:"+Jr(r),s,null,!1,Wc,u[e])))),o&&o.prop||!t.component&&qc(t.tag,t.attrsMap.type,r)?Al(t,r,a,u[e],l):Ol(t,r,a,u[e],l);else if(Zc.test(r))r=r.replace(Zc,""),(l=ed.test(r))&&(r=r.slice(1,-1)),Fl(t,r,a,o,!1,Wc,u[e],l);else{var c=(r=r.replace(Kc,"")).match(nd),d=c&&c[1];l=!1,d&&(r=r.slice(0,-(d.length+1)),ed.test(d)&&(d=d.slice(1,-1),l=!0)),Pl(t,r,i,a,d,l,o,u[e]),"model"===r&&_d(t,a)}else{var f=vc(a,Yc);f&&Wc(r+'="'+a+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div id="{{ val }}">, use <div :id="val">.',u[e]),Ol(t,r,JSON.stringify(a),u[e]),!t.component&&"muted"===r&&qc(t.tag,t.attrsMap.type,r)&&Al(t,r,"true",u[e])}}(t),t}function pd(t){var e;if(e=jl(t,"v-for")){var n=function(t){var e=t.match(Xc);if(!e)return;var n={};n.for=e[2].trim();var r=e[1].trim().replace(td,""),i=r.match(Qc);i?(n.alias=r.replace(Qc,"").trim(),n.iterator1=i[1].trim(),i[2]&&(n.iterator2=i[2].trim())):n.alias=r;return n}(e);n?Xr(t,n):Wc("Invalid v-for expression: "+e,t.rawAttrsMap["v-for"])}}function vd(t,e){t.ifConditions||(t.ifConditions=[]),t.ifConditions.push(e)}function gd(t){var e=t.name.replace(ad,"");return e||("#"!==t.name[0]?e="default":Wc("v-slot shorthand syntax requires a slot name.",t)),ed.test(e)?{name:e.slice(1,-1),dynamic:!0}:{name:'"'+e+'"',dynamic:!1}}function md(t){var e=t.match(id);if(e){var n={};return e.forEach(function(t){n[t.slice(1)]=!0}),n}}var yd=/^xmlns:NS\d+/,bd=/^NS\d+:/;function _d(t,e){for(var n=t;n;)n.for&&n.alias===e&&Wc("<"+t.tag+' v-model="'+e+'">: You are binding v-model directly to a v-for iteration alias. This will not be able to modify the v-for source array because writing to the alias is like modifying a function local variable. Consider using an array of objects and use v-model on an object property instead.',t.rawAttrsMap["v-model"]),n=n.parent}function xd(t){return dd(t.tag,t.attrsList.slice(),t.parent)}var wd=[gc,yc,{preTransformNode:function(t,e){if("input"===t.tag){var n,r=t.attrsMap;if(!r["v-model"])return;if((r[":type"]||r["v-bind:type"])&&(n=Rl(t,"type")),r.type||n||!r["v-bind"]||(n="("+r["v-bind"]+").type"),n){var i=jl(t,"v-if",!0),a=i?"&&("+i+")":"",o=null!=jl(t,"v-else",!0),s=jl(t,"v-else-if",!0),l=xd(t);pd(l),Tl(l,"type","checkbox"),hd(l,e),l.processed=!0,l.if="("+n+")==='checkbox'"+a,vd(l,{exp:l.if,block:l});var u=xd(t);jl(u,"v-for",!0),Tl(u,"type","radio"),hd(u,e),vd(l,{exp:"("+n+")==='radio'"+a,block:u});var c=xd(t);return jl(c,"v-for",!0),Tl(c,":type",n),hd(c,e),vd(l,{exp:i,block:c}),o?l.else=!0:s&&(l.elseif=s),l}}}}];var kd,Sd,Md={expectHTML:!0,modules:wd,directives:{model:function(t,e,n){xl=n;var r=e.value,i=e.modifiers,a=t.tag,o=t.attrsMap.type;if("input"===a&&"file"===o&&xl("<"+t.tag+' v-model="'+r+'" type="file">:\nFile inputs are read only. Use a v-on:change listener instead.',t.rawAttrsMap["v-model"]),t.component)return El(t,r,i),!1;if("select"===a)!function(t,e,n){var r='var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return '+(n&&n.number?"_n(val)":"val")+"});";r=r+" "+zl(e,"$event.target.multiple ? $$selectedVal : $$selectedVal[0]"),Fl(t,"change",r,null,!0)}(t,r,i);else if("input"===a&&"checkbox"===o)!function(t,e,n){var r=n&&n.number,i=Rl(t,"value")||"null",a=Rl(t,"true-value")||"true",o=Rl(t,"false-value")||"false";Al(t,"checked","Array.isArray("+e+")?_i("+e+","+i+")>-1"+("true"===a?":("+e+")":":_q("+e+","+a+")")),Fl(t,"change","var $$a="+e+",$$el=$event.target,$$c=$$el.checked?("+a+"):("+o+");if(Array.isArray($$a)){var $$v="+(r?"_n("+i+")":i)+",$$i=_i($$a,$$v);if($$el.checked){$$i<0&&("+zl(e,"$$a.concat([$$v])")+")}else{$$i>-1&&("+zl(e,"$$a.slice(0,$$i).concat($$a.slice($$i+1))")+")}}else{"+zl(e,"$$c")+"}",null,!0)}(t,r,i);else if("input"===a&&"radio"===o)!function(t,e,n){var r=n&&n.number,i=Rl(t,"value")||"null";Al(t,"checked","_q("+e+","+(i=r?"_n("+i+")":i)+")"),Fl(t,"change",zl(e,i),null,!0)}(t,r,i);else if("input"===a||"textarea"===a)!function(t,e,n){var r=t.attrsMap.type,i=t.attrsMap["v-bind:value"]||t.attrsMap[":value"],a=t.attrsMap["v-bind:type"]||t.attrsMap[":type"];if(i&&!a){var o=t.attrsMap["v-bind:value"]?"v-bind:value":":value";xl(o+'="'+i+'" conflicts with v-model on the same element because the latter already expands to a value binding internally',t.rawAttrsMap[o])}var s=n||{},l=s.lazy,u=s.number,c=s.trim,d=!l&&"range"!==r,f=l?"change":"range"===r?ql:"input",h="$event.target.value";c&&(h="$event.target.value.trim()"),u&&(h="_n("+h+")");var p=zl(e,h);d&&(p="if($event.target.composing)return;"+p),Al(t,"value","("+e+")"),Fl(t,f,p,null,!0),(c||u)&&Fl(t,"blur","$forceUpdate()")}(t,r,i);else{if(!ui.isReservedTag(a))return El(t,r,i),!1;xl("<"+t.tag+' v-model="'+r+"\">: v-model is not supported on this element type. If you are working with contenteditable, it's recommended to wrap a library dedicated for that purpose inside a custom component.",t.rawAttrsMap["v-model"])}return!0},text:function(t,e){e.value&&Al(t,"textContent","_s("+e.value+")",e)},html:function(t,e){e.value&&Al(t,"innerHTML","_s("+e.value+")",e)}},isPreTag:function(t){return"pre"===t},isUnaryTag:_c,mustUseProp:Os,canBeLeftOpenTag:xc,isReservedTag:Bs,getTagNamespace:Us,staticKeys:function(t){return t.reduce(function(t,e){return t.concat(e.staticKeys||[])},[]).join(",")}(wd)},Cd=Hr(function(t){return $r("type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap"+(t?","+t:""))});function Dd(t,e){t&&(kd=Cd(e.staticKeys||""),Sd=e.isReservedTag||ei,function t(e){e.static=function(t){if(2===t.type)return!1;if(3===t.type)return!0;return!(!t.pre&&(t.hasBindings||t.if||t.for||Er(t.tag)||!Sd(t.tag)||function(t){for(;t.parent;){if("template"!==(t=t.parent).tag)return!1;if(t.for)return!0}return!1}(t)||!Object.keys(t).every(kd)))}(e);if(1===e.type){if(!Sd(e.tag)&&"slot"!==e.tag&&null==e.attrsMap["inline-template"])return;for(var n=0,r=e.children.length;n<r;n++){var i=e.children[n];t(i),i.static||(e.static=!1)}if(e.ifConditions)for(var a=1,o=e.ifConditions.length;a<o;a++){var s=e.ifConditions[a].block;t(s),s.static||(e.static=!1)}}}(t),function t(e,n){if(1===e.type){if((e.static||e.once)&&(e.staticInFor=n),e.static&&e.children.length&&(1!==e.children.length||3!==e.children[0].type))return void(e.staticRoot=!0);if(e.staticRoot=!1,e.children)for(var r=0,i=e.children.length;r<i;r++)t(e.children[r],n||!!e.for);if(e.ifConditions)for(var a=1,o=e.ifConditions.length;a<o;a++)t(e.ifConditions[a].block,n)}}(t,!1))}var Ad=/^([\w$_]+|\([^)]*?\))\s*=>|^function\s*\(/,Od=/\([^)]*?\);*$/,Td=/^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/,Pd={esc:27,tab:9,enter:13,space:32,up:38,left:37,right:39,down:40,delete:[8,46]},Id={esc:["Esc","Escape"],tab:"Tab",enter:"Enter",space:[" ","Spacebar"],up:["Up","ArrowUp"],left:["Left","ArrowLeft"],right:["Right","ArrowRight"],down:["Down","ArrowDown"],delete:["Backspace","Delete","Del"]},Fd=function(t){return"if("+t+")return null;"},Ld={stop:"$event.stopPropagation();",prevent:"$event.preventDefault();",self:Fd("$event.target !== $event.currentTarget"),ctrl:Fd("!$event.ctrlKey"),shift:Fd("!$event.shiftKey"),alt:Fd("!$event.altKey"),meta:Fd("!$event.metaKey"),left:Fd("'button' in $event && $event.button !== 0"),middle:Fd("'button' in $event && $event.button !== 1"),right:Fd("'button' in $event && $event.button !== 2")};function Rd(t,e){var n=e?"nativeOn:":"on:",r="",i="";for(var a in t){var o=jd(t[a]);t[a]&&t[a].dynamic?i+=a+","+o+",":r+='"'+a+'":'+o+","}return r="{"+r.slice(0,-1)+"}",i?n+"_d("+r+",["+i.slice(0,-1)+"])":n+r}function jd(t){if(!t)return"function(){}";if(Array.isArray(t))return"["+t.map(function(t){return jd(t)}).join(",")+"]";var e=Td.test(t.value),n=Ad.test(t.value),r=Td.test(t.value.replace(Od,""));if(t.modifiers){var i="",a="",o=[];for(var s in t.modifiers)if(Ld[s])a+=Ld[s],Pd[s]&&o.push(s);else if("exact"===s){var l=t.modifiers;a+=Fd(["ctrl","shift","alt","meta"].filter(function(t){return!l[t]}).map(function(t){return"$event."+t+"Key"}).join("||"))}else o.push(s);return o.length&&(i+=function(t){return"if(!$event.type.indexOf('key')&&"+t.map(Nd).join("&&")+")return null;"}(o)),a&&(i+=a),"function($event){"+i+(e?"return "+t.value+"($event)":n?"return ("+t.value+")($event)":r?"return "+t.value:t.value)+"}"}return e||n?t.value:"function($event){"+(r?"return "+t.value:t.value)+"}"}function Nd(t){var e=parseInt(t,10);if(e)return"$event.keyCode!=="+e;var n=Pd[t],r=Id[t];return"_k($event.keyCode,"+JSON.stringify(t)+","+JSON.stringify(n)+",$event.key,"+JSON.stringify(r)+")"}var $d={on:function(t,e){e.modifiers&&Fi("v-on without argument does not support modifiers."),t.wrapListeners=function(t){return"_g("+t+","+e.value+")"}},bind:function(t,e){t.wrapData=function(n){return"_b("+n+",'"+t.tag+"',"+e.value+","+(e.modifiers&&e.modifiers.prop?"true":"false")+(e.modifiers&&e.modifiers.sync?",true":"")+")"}},cloak:ti},Ed=function(t){this.options=t,this.warn=t.warn||Cl,this.transforms=Dl(t.modules,"transformCode"),this.dataGenFns=Dl(t.modules,"genData"),this.directives=Xr(Xr({},$d),t.directives);var e=t.isReservedTag||ei;this.maybeComponent=function(t){return!!t.component||!e(t.tag)},this.onceId=0,this.staticRenderFns=[],this.pre=!1};function zd(t,e){var n=new Ed(e);return{render:"with(this){return "+(t?Wd(t,n):'_c("div")')+"}",staticRenderFns:n.staticRenderFns}}function Wd(t,e){if(t.parent&&(t.pre=t.pre||t.parent.pre),t.staticRoot&&!t.staticProcessed)return Yd(t,e);if(t.once&&!t.onceProcessed)return Vd(t,e);if(t.for&&!t.forProcessed)return Bd(t,e);if(t.if&&!t.ifProcessed)return Hd(t,e);if("template"!==t.tag||t.slotTarget||e.pre){if("slot"===t.tag)return function(t,e){var n=t.slotName||'"default"',r=Jd(t,e),i="_t("+n+(r?","+r:""),a=t.attrs||t.dynamicAttrs?Xd((t.attrs||[]).concat(t.dynamicAttrs||[]).map(function(t){return{name:Ur(t.name),value:t.value,dynamic:t.dynamic}})):null,o=t.attrsMap["v-bind"];!a&&!o||r||(i+=",null");a&&(i+=","+a);o&&(i+=(a?"":",null")+","+o);return i+")"}(t,e);var n;if(t.component)n=function(t,e,n){var r=e.inlineTemplate?null:Jd(e,n,!0);return"_c("+t+","+Ud(e,n)+(r?","+r:"")+")"}(t.component,t,e);else{var r;(!t.plain||t.pre&&e.maybeComponent(t))&&(r=Ud(t,e));var i=t.inlineTemplate?null:Jd(t,e,!0);n="_c('"+t.tag+"'"+(r?","+r:"")+(i?","+i:"")+")"}for(var a=0;a<e.transforms.length;a++)n=e.transforms[a](t,n);return n}return Jd(t,e)||"void 0"}function Yd(t,e){t.staticProcessed=!0;var n=e.pre;return t.pre&&(e.pre=t.pre),e.staticRenderFns.push("with(this){return "+Wd(t,e)+"}"),e.pre=n,"_m("+(e.staticRenderFns.length-1)+(t.staticInFor?",true":"")+")"}function Vd(t,e){if(t.onceProcessed=!0,t.if&&!t.ifProcessed)return Hd(t,e);if(t.staticInFor){for(var n="",r=t.parent;r;){if(r.for){n=r.key;break}r=r.parent}return n?"_o("+Wd(t,e)+","+e.onceId+++","+n+")":(e.warn("v-once can only be used inside v-for that is keyed. ",t.rawAttrsMap["v-once"]),Wd(t,e))}return Yd(t,e)}function Hd(t,e,n,r){return t.ifProcessed=!0,function t(e,n,r,i){if(!e.length)return i||"_e()";var a=e.shift();return a.exp?"("+a.exp+")?"+o(a.block)+":"+t(e,n,r,i):""+o(a.block);function o(t){return r?r(t,n):t.once?Vd(t,n):Wd(t,n)}}(t.ifConditions.slice(),e,n,r)}function Bd(t,e,n,r){var i=t.for,a=t.alias,o=t.iterator1?","+t.iterator1:"",s=t.iterator2?","+t.iterator2:"";return e.maybeComponent(t)&&"slot"!==t.tag&&"template"!==t.tag&&!t.key&&e.warn("<"+t.tag+' v-for="'+a+" in "+i+'">: component lists rendered with v-for should have explicit keys. See https://vuejs.org/guide/list.html#key for more info.',t.rawAttrsMap["v-for"],!0),t.forProcessed=!0,(r||"_l")+"(("+i+"),function("+a+o+s+"){return "+(n||Wd)(t,e)+"})"}function Ud(t,e){var n="{",r=function(t,e){var n=t.directives;if(!n)return;var r,i,a,o,s="directives:[",l=!1;for(r=0,i=n.length;r<i;r++){a=n[r],o=!0;var u=e.directives[a.name];u&&(o=!!u(t,a,e.warn)),o&&(l=!0,s+='{name:"'+a.name+'",rawName:"'+a.rawName+'"'+(a.value?",value:("+a.value+"),expression:"+JSON.stringify(a.value):"")+(a.arg?",arg:"+(a.isDynamicArg?a.arg:'"'+a.arg+'"'):"")+(a.modifiers?",modifiers:"+JSON.stringify(a.modifiers):"")+"},")}if(l)return s.slice(0,-1)+"]"}(t,e);r&&(n+=r+","),t.key&&(n+="key:"+t.key+","),t.ref&&(n+="ref:"+t.ref+","),t.refInFor&&(n+="refInFor:true,"),t.pre&&(n+="pre:true,"),t.component&&(n+='tag:"'+t.tag+'",');for(var i=0;i<e.dataGenFns.length;i++)n+=e.dataGenFns[i](t);if(t.attrs&&(n+="attrs:"+Xd(t.attrs)+","),t.props&&(n+="domProps:"+Xd(t.props)+","),t.events&&(n+=Rd(t.events,!1)+","),t.nativeEvents&&(n+=Rd(t.nativeEvents,!0)+","),t.slotTarget&&!t.slotScope&&(n+="slot:"+t.slotTarget+","),t.scopedSlots&&(n+=function(t,e,n){var r=Object.keys(e).some(function(t){var n=e[t];return n.slotTargetDynamic||n.if||n.for||qd(n)});if(!r)for(var i=t.parent;i;){if(i.slotScope&&i.slotScope!==cd){r=!0;break}i=i.parent}return"scopedSlots:_u(["+Object.keys(e).map(function(t){return Gd(e[t],n)}).join(",")+"]"+(r?",true":"")+")"}(t,t.scopedSlots,e)+","),t.model&&(n+="model:{value:"+t.model.value+",callback:"+t.model.callback+",expression:"+t.model.expression+"},"),t.inlineTemplate){var a=function(t,e){var n=t.children[0];1===t.children.length&&1===n.type||e.warn("Inline-template components must have exactly one child element.",{start:t.start});if(n&&1===n.type){var r=zd(n,e.options);return"inlineTemplate:{render:function(){"+r.render+"},staticRenderFns:["+r.staticRenderFns.map(function(t){return"function(){"+t+"}"}).join(",")+"]}"}}(t,e);a&&(n+=a+",")}return n=n.replace(/,$/,"")+"}",t.dynamicAttrs&&(n="_b("+n+',"'+t.tag+'",'+Xd(t.dynamicAttrs)+")"),t.wrapData&&(n=t.wrapData(n)),t.wrapListeners&&(n=t.wrapListeners(n)),n}function qd(t){return 1===t.type&&("slot"===t.tag||t.children.some(qd))}function Gd(t,e){var n=t.attrsMap["slot-scope"];if(t.if&&!t.ifProcessed&&!n)return Hd(t,e,Gd,"null");if(t.for&&!t.forProcessed)return Bd(t,e,Gd);var r=t.slotScope===cd?"":String(t.slotScope),i="function("+r+"){return "+("template"===t.tag?t.if&&n?"("+t.if+")?"+(Jd(t,e)||"undefined")+":undefined":Jd(t,e)||"undefined":Wd(t,e))+"}",a=r?"":",proxy:true";return"{key:"+(t.slotTarget||'"default"')+",fn:"+i+a+"}"}function Jd(t,e,n,r,i){var a=t.children;if(a.length){var o=a[0];if(1===a.length&&o.for&&"template"!==o.tag&&"slot"!==o.tag){var s=n?e.maybeComponent(o)?",1":",0":"";return""+(r||Wd)(o,e)+s}var l=n?function(t,e){for(var n=0,r=0;r<t.length;r++){var i=t[r];if(1===i.type){if(Zd(i)||i.ifConditions&&i.ifConditions.some(function(t){return Zd(t.block)})){n=2;break}(e(i)||i.ifConditions&&i.ifConditions.some(function(t){return e(t.block)}))&&(n=1)}}return n}(a,e.maybeComponent):0,u=i||Kd;return"["+a.map(function(t){return u(t,e)}).join(",")+"]"+(l?","+l:"")}}function Zd(t){return void 0!==t.for||"template"===t.tag||"slot"===t.tag}function Kd(t,e){return 1===t.type?Wd(t,e):3===t.type&&t.isComment?(r=t,"_e("+JSON.stringify(r.text)+")"):"_v("+(2===(n=t).type?n.expression:Qd(JSON.stringify(n.text)))+")";var n,r}function Xd(t){for(var e="",n="",r=0;r<t.length;r++){var i=t[r],a=Qd(i.value);i.dynamic?n+=i.name+","+a+",":e+='"'+i.name+'":'+a+","}return e="{"+e.slice(0,-1)+"}",n?"_d("+e+",["+n.slice(0,-1)+"])":e}function Qd(t){return t.replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}var tf=new RegExp("\\b"+"do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments".split(",").join("\\b|\\b")+"\\b"),ef=new RegExp("\\b"+"delete,typeof,void".split(",").join("\\s*\\([^\\)]*\\)|\\b")+"\\s*\\([^\\)]*\\)"),nf=/'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;function rf(t,e){t&&function t(e,n){if(1===e.type){for(var r in e.attrsMap)if(Kc.test(r)){var i=e.attrsMap[r];if(i){var a=e.rawAttrsMap[r];"v-for"===r?of(e,'v-for="'+i+'"',n,a):Zc.test(r)?af(i,r+'="'+i+'"',n,a):lf(i,r+'="'+i+'"',n,a)}}if(e.children)for(var o=0;o<e.children.length;o++)t(e.children[o],n)}else 2===e.type&&lf(e.expression,e.text,n,e)}(t,e)}function af(t,e,n,r){var i=t.replace(nf,""),a=i.match(ef);a&&"$"!==i.charAt(a.index-1)&&n('avoid using JavaScript unary operator as property name: "'+a[0]+'" in expression '+e.trim(),r),lf(t,e,n,r)}function of(t,e,n,r){lf(t.for||"",e,n,r),sf(t.alias,"v-for alias",e,n,r),sf(t.iterator1,"v-for iterator",e,n,r),sf(t.iterator2,"v-for iterator",e,n,r)}function sf(t,e,n,r,i){if("string"==typeof t)try{new Function("var "+t+"=_")}catch(a){r("invalid "+e+' "'+t+'" in expression: '+n.trim(),i)}}function lf(t,e,n,r){try{new Function("return "+t)}catch(a){var i=t.replace(nf,"").match(tf);n(i?'avoid using JavaScript keyword as property name: "'+i[0]+'"\n  Raw expression: '+e.trim():"invalid expression: "+a.message+" in\n\n    "+t+"\n\n  Raw expression: "+e.trim()+"\n",r)}}var uf=2;function cf(t,e){for(var n="";1&e&&(n+=t),!((e>>>=1)<=0);)t+=t;return n}function df(t,e){try{return new Function(t)}catch(n){return e.push({err:n,code:t}),ti}}function ff(t){var e=Object.create(null);return function(n,r,i){var a=(r=Xr({},r)).warn||Fi;delete r.warn;try{new Function("return 1")}catch(t){t.toString().match(/unsafe-eval|CSP/)&&a("It seems you are using the standalone build of Vue.js in an environment with Content Security Policy that prohibits unsafe-eval. The template compiler cannot work in this environment. Consider relaxing the policy to allow unsafe-eval or pre-compiling your templates into render functions.")}var o=r.delimiters?String(r.delimiters)+n:n;if(e[o])return e[o];var s=t(n,r);s.errors&&s.errors.length&&(r.outputSourceRange?s.errors.forEach(function(t){a("Error compiling template:\n\n"+t.msg+"\n\n"+function(t,e,n){void 0===e&&(e=0),void 0===n&&(n=t.length);for(var r=t.split(/\r?\n/),i=0,a=[],o=0;o<r.length;o++)if((i+=r[o].length+1)>=e){for(var s=o-uf;s<=o+uf||n>i;s++)if(!(s<0||s>=r.length)){a.push(""+(s+1)+cf(" ",3-String(s+1).length)+"|  "+r[s]);var l=r[s].length;if(s===o){var u=e-(i-l)+1,c=n>i?l-u:n-e;a.push("   |  "+cf(" ",u)+cf("^",c))}else if(s>o){if(n>i){var d=Math.min(n-i,l);a.push("   |  "+cf("^",d))}i+=l+1}}break}return a.join("\n")}(n,t.start,t.end),i)}):a("Error compiling template:\n\n"+n+"\n\n"+s.errors.map(function(t){return"- "+t}).join("\n")+"\n",i)),s.tips&&s.tips.length&&(r.outputSourceRange?s.tips.forEach(function(t){return Li(t.msg,i)}):s.tips.forEach(function(t){return Li(t,i)}));var l={},u=[];return l.render=df(s.render,u),l.staticRenderFns=s.staticRenderFns.map(function(t){return df(t,u)}),s.errors&&s.errors.length||!u.length||a("Failed to generate render function:\n\n"+u.map(function(t){var e=t.err,n=t.code;return e.toString()+" in\n\n"+n+"\n"}).join("\n"),i),e[o]=l}}var hf,pf,vf=(hf=function(t,e){var n=fd(t.trim(),e);!1!==e.optimize&&Dd(n,e);var r=zd(n,e);return{ast:n,render:r.render,staticRenderFns:r.staticRenderFns}},function(t){function e(e,n){var r=Object.create(t),i=[],a=[],o=function(t,e,n){(n?a:i).push(t)};if(n){if(n.outputSourceRange){var s=e.match(/^\s*/)[0].length;o=function(t,e,n){var r={msg:t};e&&(null!=e.start&&(r.start=e.start+s),null!=e.end&&(r.end=e.end+s)),(n?a:i).push(r)}}for(var l in n.modules&&(r.modules=(t.modules||[]).concat(n.modules)),n.directives&&(r.directives=Xr(Object.create(t.directives||null),n.directives)),n)"modules"!==l&&"directives"!==l&&(r[l]=n[l])}r.warn=o;var u=hf(e.trim(),r);return rf(u.ast,o),u.errors=i,u.tips=a,u}return{compile:e,compileToFunctions:ff(e)}})(Md).compileToFunctions;function gf(t){return(pf=pf||document.createElement("div")).innerHTML=t?'<a href="\n"/>':'<div a="\n"/>',pf.innerHTML.indexOf("&#10;")>0}var mf=!!gi&&gf(!1),yf=!!gi&&gf(!0),bf=Hr(function(t){var e=Js(t);return e&&e.innerHTML}),_f=bs.prototype.$mount;function xf(t,e){if(e){var n=this.$data._chart,r=t.datasets.map(function(t){return t.label}),i=e.datasets.map(function(t){return t.label}),a=JSON.stringify(i);JSON.stringify(r)===a&&e.datasets.length===t.datasets.length?(t.datasets.forEach(function(t,r){var i=Object.keys(e.datasets[r]),a=Object.keys(t),o=i.filter(function(t){return"_meta"!==t&&-1===a.indexOf(t)});for(var s in o.forEach(function(t){delete n.data.datasets[r][t]}),t)t.hasOwnProperty(s)&&(n.data.datasets[r][s]=t[s])}),t.hasOwnProperty("labels")&&(n.data.labels=t.labels,this.$emit("labels:update")),t.hasOwnProperty("xLabels")&&(n.data.xLabels=t.xLabels,this.$emit("xlabels:update")),t.hasOwnProperty("yLabels")&&(n.data.yLabels=t.yLabels,this.$emit("ylabels:update")),n.update(),this.$emit("chart:update")):(n&&(n.destroy(),this.$emit("chart:destroy")),this.renderChart(this.chartData,this.options),this.$emit("chart:render"))}else this.$data._chart&&(this.$data._chart.destroy(),this.$emit("chart:destroy")),this.renderChart(this.chartData,this.options),this.$emit("chart:render")}bs.prototype.$mount=function(t,e){if((t=t&&Js(t))===document.body||t===document.documentElement)return Fi("Do not mount Vue to <html> or <body> - mount to normal elements instead."),this;var n=this.$options;if(!n.render){var r=n.template;if(r)if("string"==typeof r)"#"===r.charAt(0)&&((r=bf(r))||Fi("Template element not found or is empty: "+n.template,this));else{if(!r.nodeType)return Fi("invalid template option:"+r,this),this;r=r.innerHTML}else t&&(r=function(t){if(t.outerHTML)return t.outerHTML;var e=document.createElement("div");return e.appendChild(t.cloneNode(!0)),e.innerHTML}(t));if(r){ui.performance&&Aa&&Aa("compile");var i=vf(r,{outputSourceRange:!0,shouldDecodeNewlines:mf,shouldDecodeNewlinesForHref:yf,delimiters:n.delimiters,comments:n.comments},this),a=i.render,o=i.staticRenderFns;n.render=a,n.staticRenderFns=o,ui.performance&&Aa&&(Aa("compile end"),Oa("vue "+this._name+" compile","compile","compile end"))}}return _f.call(this,t,e)},bs.compile=vf;var wf,kf={reactiveData:{data:function(){return{chartData:null}},watch:{chartData:xf}},reactiveProp:{props:{chartData:{required:!0}},watch:{chartData:xf}}},Sf={noop:function(){},uid:(wf=0,function(){return wf++}),isNullOrUndef:function(t){return null===t||void 0===t},isArray:Array.isArray?Array.isArray:function(t){return"[object Array]"===Object.prototype.toString.call(t)},isObject:function(t){return null!==t&&"[object Object]"===Object.prototype.toString.call(t)},valueOrDefault:function(t,e){return void 0===t?e:t},valueAtIndexOrDefault:function(t,e,n){return Sf.valueOrDefault(Sf.isArray(t)?t[e]:t,n)},callback:function(t,e,n){if(t&&"function"==typeof t.call)return t.apply(n,e)},each:function(t,e,n,r){var i,a,o;if(Sf.isArray(t))if(a=t.length,r)for(i=a-1;i>=0;i--)e.call(n,t[i],i);else for(i=0;i<a;i++)e.call(n,t[i],i);else if(Sf.isObject(t))for(a=(o=Object.keys(t)).length,i=0;i<a;i++)e.call(n,t[o[i]],o[i])},arrayEquals:function(t,e){var n,r,i,a;if(!t||!e||t.length!==e.length)return!1;for(n=0,r=t.length;n<r;++n)if(i=t[n],a=e[n],i instanceof Array&&a instanceof Array){if(!Sf.arrayEquals(i,a))return!1}else if(i!==a)return!1;return!0},clone:function(t){if(Sf.isArray(t))return t.map(Sf.clone);if(Sf.isObject(t)){for(var e={},n=Object.keys(t),r=n.length,i=0;i<r;++i)e[n[i]]=Sf.clone(t[n[i]]);return e}return t},_merger:function(t,e,n,r){var i=e[t],a=n[t];Sf.isObject(i)&&Sf.isObject(a)?Sf.merge(i,a,r):e[t]=Sf.clone(a)},_mergerIf:function(t,e,n){var r=e[t],i=n[t];Sf.isObject(r)&&Sf.isObject(i)?Sf.mergeIf(r,i):e.hasOwnProperty(t)||(e[t]=Sf.clone(i))},merge:function(t,e,n){var r,i,a,o,s,l=Sf.isArray(e)?e:[e],u=l.length;if(!Sf.isObject(t))return t;for(r=(n=n||{}).merger||Sf._merger,i=0;i<u;++i)if(e=l[i],Sf.isObject(e))for(s=0,o=(a=Object.keys(e)).length;s<o;++s)r(a[s],t,e,n);return t},mergeIf:function(t,e){return Sf.merge(t,e,{merger:Sf._mergerIf})},extend:function(t){for(var e=arguments,n=function(e,n){t[n]=e},r=1,i=arguments.length;r<i;++r)Sf.each(e[r],n);return t},inherits:function(t){var e=this,n=t&&t.hasOwnProperty("constructor")?t.constructor:function(){return e.apply(this,arguments)},r=function(){this.constructor=n};return r.prototype=e.prototype,n.prototype=new r,n.extend=Sf.inherits,t&&Sf.extend(n.prototype,t),n.__super__=e.prototype,n}},Mf=Sf;Sf.callCallback=Sf.callback,Sf.indexOf=function(t,e,n){return Array.prototype.indexOf.call(t,e,n)},Sf.getValueOrDefault=Sf.valueOrDefault,Sf.getValueAtIndexOrDefault=Sf.valueAtIndexOrDefault;var Cf={linear:function(t){return t},easeInQuad:function(t){return t*t},easeOutQuad:function(t){return-t*(t-2)},easeInOutQuad:function(t){return(t/=.5)<1?.5*t*t:-.5*(--t*(t-2)-1)},easeInCubic:function(t){return t*t*t},easeOutCubic:function(t){return(t-=1)*t*t+1},easeInOutCubic:function(t){return(t/=.5)<1?.5*t*t*t:.5*((t-=2)*t*t+2)},easeInQuart:function(t){return t*t*t*t},easeOutQuart:function(t){return-((t-=1)*t*t*t-1)},easeInOutQuart:function(t){return(t/=.5)<1?.5*t*t*t*t:-.5*((t-=2)*t*t*t-2)},easeInQuint:function(t){return t*t*t*t*t},easeOutQuint:function(t){return(t-=1)*t*t*t*t+1},easeInOutQuint:function(t){return(t/=.5)<1?.5*t*t*t*t*t:.5*((t-=2)*t*t*t*t+2)},easeInSine:function(t){return 1-Math.cos(t*(Math.PI/2))},easeOutSine:function(t){return Math.sin(t*(Math.PI/2))},easeInOutSine:function(t){return-.5*(Math.cos(Math.PI*t)-1)},easeInExpo:function(t){return 0===t?0:Math.pow(2,10*(t-1))},easeOutExpo:function(t){return 1===t?1:1-Math.pow(2,-10*t)},easeInOutExpo:function(t){return 0===t?0:1===t?1:(t/=.5)<1?.5*Math.pow(2,10*(t-1)):.5*(2-Math.pow(2,-10*--t))},easeInCirc:function(t){return t>=1?t:-(Math.sqrt(1-t*t)-1)},easeOutCirc:function(t){return Math.sqrt(1-(t-=1)*t)},easeInOutCirc:function(t){return(t/=.5)<1?-.5*(Math.sqrt(1-t*t)-1):.5*(Math.sqrt(1-(t-=2)*t)+1)},easeInElastic:function(t){var e=1.70158,n=0,r=1;return 0===t?0:1===t?1:(n||(n=.3),r<1?(r=1,e=n/4):e=n/(2*Math.PI)*Math.asin(1/r),-r*Math.pow(2,10*(t-=1))*Math.sin((t-e)*(2*Math.PI)/n))},easeOutElastic:function(t){var e=1.70158,n=0,r=1;return 0===t?0:1===t?1:(n||(n=.3),r<1?(r=1,e=n/4):e=n/(2*Math.PI)*Math.asin(1/r),r*Math.pow(2,-10*t)*Math.sin((t-e)*(2*Math.PI)/n)+1)},easeInOutElastic:function(t){var e=1.70158,n=0,r=1;return 0===t?0:2==(t/=.5)?1:(n||(n=.45),r<1?(r=1,e=n/4):e=n/(2*Math.PI)*Math.asin(1/r),t<1?r*Math.pow(2,10*(t-=1))*Math.sin((t-e)*(2*Math.PI)/n)*-.5:r*Math.pow(2,-10*(t-=1))*Math.sin((t-e)*(2*Math.PI)/n)*.5+1)},easeInBack:function(t){var e=1.70158;return t*t*((e+1)*t-e)},easeOutBack:function(t){var e=1.70158;return(t-=1)*t*((e+1)*t+e)+1},easeInOutBack:function(t){var e=1.70158;return(t/=.5)<1?t*t*((1+(e*=1.525))*t-e)*.5:.5*((t-=2)*t*((1+(e*=1.525))*t+e)+2)},easeInBounce:function(t){return 1-Cf.easeOutBounce(1-t)},easeOutBounce:function(t){return t<1/2.75?7.5625*t*t:t<2/2.75?7.5625*(t-=1.5/2.75)*t+.75:t<2.5/2.75?7.5625*(t-=2.25/2.75)*t+.9375:7.5625*(t-=2.625/2.75)*t+.984375},easeInOutBounce:function(t){return t<.5?.5*Cf.easeInBounce(2*t):.5*Cf.easeOutBounce(2*t-1)+.5}},Df={effects:Cf};Mf.easingEffects=Cf;"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;function Af(){throw new Error("Dynamic requires are not currently supported by rollup-plugin-commonjs")}function Of(t,e){return t(e={exports:{}},e.exports),e.exports}var Tf=Of(function(t){var e=t.exports={clear:function(t){t.ctx.clearRect(0,0,t.width,t.height)},roundedRect:function(t,e,n,r,i,a){if(a){var o=Math.min(a,i/2-1e-7,r/2-1e-7);t.moveTo(e+o,n),t.lineTo(e+r-o,n),t.arcTo(e+r,n,e+r,n+o,o),t.lineTo(e+r,n+i-o),t.arcTo(e+r,n+i,e+r-o,n+i,o),t.lineTo(e+o,n+i),t.arcTo(e,n+i,e,n+i-o,o),t.lineTo(e,n+o),t.arcTo(e,n,e+o,n,o),t.closePath(),t.moveTo(e,n)}else t.rect(e,n,r,i)},drawPoint:function(t,e,r,i,a,o){var s,l,u,c,d,f;if(o=o||0,!e||"object"!==(void 0===e?"undefined":n(e))||"[object HTMLImageElement]"!==(s=e.toString())&&"[object HTMLCanvasElement]"!==s){if(!(isNaN(r)||r<=0)){switch(t.save(),t.translate(i,a),t.rotate(o*Math.PI/180),t.beginPath(),e){default:t.arc(0,0,r,0,2*Math.PI),t.closePath();break;case"triangle":d=(l=3*r/Math.sqrt(3))*Math.sqrt(3)/2,t.moveTo(-l/2,d/3),t.lineTo(l/2,d/3),t.lineTo(0,-2*d/3),t.closePath();break;case"rect":f=1/Math.SQRT2*r,t.rect(-f,-f,2*f,2*f);break;case"rectRounded":var h=r/Math.SQRT2,p=-h,v=-h,g=Math.SQRT2*r;this.roundedRect(t,p,v,g,g,.425*r);break;case"rectRot":f=1/Math.SQRT2*r,t.moveTo(-f,0),t.lineTo(0,f),t.lineTo(f,0),t.lineTo(0,-f),t.closePath();break;case"cross":t.moveTo(0,r),t.lineTo(0,-r),t.moveTo(-r,0),t.lineTo(r,0);break;case"crossRot":u=Math.cos(Math.PI/4)*r,c=Math.sin(Math.PI/4)*r,t.moveTo(-u,-c),t.lineTo(u,c),t.moveTo(-u,c),t.lineTo(u,-c);break;case"star":t.moveTo(0,r),t.lineTo(0,-r),t.moveTo(-r,0),t.lineTo(r,0),u=Math.cos(Math.PI/4)*r,c=Math.sin(Math.PI/4)*r,t.moveTo(-u,-c),t.lineTo(u,c),t.moveTo(-u,c),t.lineTo(u,-c);break;case"line":t.moveTo(-r,0),t.lineTo(r,0);break;case"dash":t.moveTo(0,0),t.lineTo(r,0)}t.fill(),t.stroke(),t.restore()}}else t.drawImage(e,i-e.width/2,a-e.height/2,e.width,e.height)},clipArea:function(t,e){t.save(),t.beginPath(),t.rect(e.left,e.top,e.right-e.left,e.bottom-e.top),t.clip()},unclipArea:function(t){t.restore()},lineTo:function(t,e,n,r){if(n.steppedLine)return"after"===n.steppedLine&&!r||"after"!==n.steppedLine&&r?t.lineTo(e.x,n.y):t.lineTo(n.x,e.y),void t.lineTo(n.x,n.y);n.tension?t.bezierCurveTo(r?e.controlPointPreviousX:e.controlPointNextX,r?e.controlPointPreviousY:e.controlPointNextY,r?n.controlPointNextX:n.controlPointPreviousX,r?n.controlPointNextY:n.controlPointPreviousY,n.x,n.y):t.lineTo(n.x,n.y)}};Mf.clear=e.clear,Mf.drawRoundedRectangle=function(t){t.beginPath(),e.roundedRect.apply(e,arguments)}}),Pf=(Tf.clear,Tf.roundedRect,Tf.drawPoint,Tf.clipArea,Tf.unclipArea,Tf.lineTo,Mf),If=Df,Ff=Tf,Lf={toLineHeight:function(t,e){var n=(""+t).match(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/);if(!n||"normal"===n[1])return 1.2*e;switch(t=+n[2],n[3]){case"px":return t;case"%":t/=100}return e*t},toPadding:function(t){var e,n,r,i;return Mf.isObject(t)?(e=+t.top||0,n=+t.right||0,r=+t.bottom||0,i=+t.left||0):e=n=r=i=+t||0,{top:e,right:n,bottom:r,left:i,height:e+r,width:i+n}},resolve:function(t,e,n){var r,i,a;for(r=0,i=t.length;r<i;++r)if(void 0!==(a=t[r])&&(void 0!==e&&"function"==typeof a&&(a=a(e)),void 0!==n&&Mf.isArray(a)&&(a=a[n]),void 0!==a))return a}};Pf.easing=If,Pf.canvas=Ff,Pf.options=Lf;var Rf={_set:function(t,e){return Pf.merge(this[t]||(this[t]={}),e)}};Rf._set("global",{responsive:!0,responsiveAnimationDuration:0,maintainAspectRatio:!0,events:["mousemove","mouseout","click","touchstart","touchmove"],hover:{onHover:null,mode:"nearest",intersect:!0,animationDuration:400},onClick:null,defaultColor:"rgba(0,0,0,0.1)",defaultFontColor:"#666",defaultFontFamily:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",defaultFontSize:12,defaultFontStyle:"normal",showLines:!0,elements:{},layout:{padding:{top:0,right:0,bottom:0,left:0}}});var jf={rgb2hsl:Nf,rgb2hsv:$f,rgb2hwb:Ef,rgb2cmyk:zf,rgb2keyword:Wf,rgb2xyz:Yf,rgb2lab:Vf,rgb2lch:function(t){return Kf(Vf(t))},hsl2rgb:Hf,hsl2hsv:function(t){var e=t[0],n=t[1]/100,r=t[2]/100;if(0===r)return[0,0,0];return[e,100*(2*(n*=(r*=2)<=1?r:2-r)/(r+n)),100*((r+n)/2)]},hsl2hwb:function(t){return Ef(Hf(t))},hsl2cmyk:function(t){return zf(Hf(t))},hsl2keyword:function(t){return Wf(Hf(t))},hsv2rgb:Bf,hsv2hsl:function(t){var e,n,r=t[0],i=t[1]/100,a=t[2]/100;return e=i*a,[r,100*(e=(e/=(n=(2-i)*a)<=1?n:2-n)||0),100*(n/=2)]},hsv2hwb:function(t){return Ef(Bf(t))},hsv2cmyk:function(t){return zf(Bf(t))},hsv2keyword:function(t){return Wf(Bf(t))},hwb2rgb:Uf,hwb2hsl:function(t){return Nf(Uf(t))},hwb2hsv:function(t){return $f(Uf(t))},hwb2cmyk:function(t){return zf(Uf(t))},hwb2keyword:function(t){return Wf(Uf(t))},cmyk2rgb:qf,cmyk2hsl:function(t){return Nf(qf(t))},cmyk2hsv:function(t){return $f(qf(t))},cmyk2hwb:function(t){return Ef(qf(t))},cmyk2keyword:function(t){return Wf(qf(t))},keyword2rgb:th,keyword2hsl:function(t){return Nf(th(t))},keyword2hsv:function(t){return $f(th(t))},keyword2hwb:function(t){return Ef(th(t))},keyword2cmyk:function(t){return zf(th(t))},keyword2lab:function(t){return Vf(th(t))},keyword2xyz:function(t){return Yf(th(t))},xyz2rgb:Gf,xyz2lab:Jf,xyz2lch:function(t){return Kf(Jf(t))},lab2xyz:Zf,lab2rgb:Xf,lab2lch:Kf,lch2lab:Qf,lch2xyz:function(t){return Zf(Qf(t))},lch2rgb:function(t){return Xf(Qf(t))}};function Nf(t){var e,n,r=t[0]/255,i=t[1]/255,a=t[2]/255,o=Math.min(r,i,a),s=Math.max(r,i,a),l=s-o;return s==o?e=0:r==s?e=(i-a)/l:i==s?e=2+(a-r)/l:a==s&&(e=4+(r-i)/l),(e=Math.min(60*e,360))<0&&(e+=360),n=(o+s)/2,[e,100*(s==o?0:n<=.5?l/(s+o):l/(2-s-o)),100*n]}function $f(t){var e,n,r=t[0],i=t[1],a=t[2],o=Math.min(r,i,a),s=Math.max(r,i,a),l=s-o;return n=0==s?0:l/s*1e3/10,s==o?e=0:r==s?e=(i-a)/l:i==s?e=2+(a-r)/l:a==s&&(e=4+(r-i)/l),(e=Math.min(60*e,360))<0&&(e+=360),[e,n,s/255*1e3/10]}function Ef(t){var e=t[0],n=t[1],r=t[2];return[Nf(t)[0],100*(1/255*Math.min(e,Math.min(n,r))),100*(r=1-1/255*Math.max(e,Math.max(n,r)))]}function zf(t){var e,n=t[0]/255,r=t[1]/255,i=t[2]/255;return[100*((1-n-(e=Math.min(1-n,1-r,1-i)))/(1-e)||0),100*((1-r-e)/(1-e)||0),100*((1-i-e)/(1-e)||0),100*e]}function Wf(t){return nh[JSON.stringify(t)]}function Yf(t){var e=t[0]/255,n=t[1]/255,r=t[2]/255;return[100*(.4124*(e=e>.04045?Math.pow((e+.055)/1.055,2.4):e/12.92)+.3576*(n=n>.04045?Math.pow((n+.055)/1.055,2.4):n/12.92)+.1805*(r=r>.04045?Math.pow((r+.055)/1.055,2.4):r/12.92)),100*(.2126*e+.7152*n+.0722*r),100*(.0193*e+.1192*n+.9505*r)]}function Vf(t){var e=Yf(t),n=e[0],r=e[1],i=e[2];return r/=100,i/=108.883,n=(n/=95.047)>.008856?Math.pow(n,1/3):7.787*n+16/116,[116*(r=r>.008856?Math.pow(r,1/3):7.787*r+16/116)-16,500*(n-r),200*(r-(i=i>.008856?Math.pow(i,1/3):7.787*i+16/116))]}function Hf(t){var e,n,r,i,a,o=t[0]/360,s=t[1]/100,l=t[2]/100;if(0==s)return[a=255*l,a,a];e=2*l-(n=l<.5?l*(1+s):l+s-l*s),i=[0,0,0];for(var u=0;u<3;u++)(r=o+1/3*-(u-1))<0&&r++,r>1&&r--,a=6*r<1?e+6*(n-e)*r:2*r<1?n:3*r<2?e+(n-e)*(2/3-r)*6:e,i[u]=255*a;return i}function Bf(t){var e=t[0]/60,n=t[1]/100,r=t[2]/100,i=Math.floor(e)%6,a=e-Math.floor(e),o=255*r*(1-n),s=255*r*(1-n*a),l=255*r*(1-n*(1-a));r*=255;switch(i){case 0:return[r,l,o];case 1:return[s,r,o];case 2:return[o,r,l];case 3:return[o,s,r];case 4:return[l,o,r];case 5:return[r,o,s]}}function Uf(t){var e,n,i,a,o=t[0]/360,s=t[1]/100,l=t[2]/100,u=s+l;switch(u>1&&(s/=u,l/=u),n=1-l,i=6*o-(e=Math.floor(6*o)),0!=(1&e)&&(i=1-i),a=s+i*(n-s),e){default:case 6:case 0:r=n,g=a,b=s;break;case 1:r=a,g=n,b=s;break;case 2:r=s,g=n,b=a;break;case 3:r=s,g=a,b=n;break;case 4:r=a,g=s,b=n;break;case 5:r=n,g=s,b=a}return[255*r,255*g,255*b]}function qf(t){var e=t[0]/100,n=t[1]/100,r=t[2]/100,i=t[3]/100;return[255*(1-Math.min(1,e*(1-i)+i)),255*(1-Math.min(1,n*(1-i)+i)),255*(1-Math.min(1,r*(1-i)+i))]}function Gf(t){var e,n,r,i=t[0]/100,a=t[1]/100,o=t[2]/100;return n=-.9689*i+1.8758*a+.0415*o,r=.0557*i+-.204*a+1.057*o,e=(e=3.2406*i+-1.5372*a+-.4986*o)>.0031308?1.055*Math.pow(e,1/2.4)-.055:e*=12.92,n=n>.0031308?1.055*Math.pow(n,1/2.4)-.055:n*=12.92,r=r>.0031308?1.055*Math.pow(r,1/2.4)-.055:r*=12.92,[255*(e=Math.min(Math.max(0,e),1)),255*(n=Math.min(Math.max(0,n),1)),255*(r=Math.min(Math.max(0,r),1))]}function Jf(t){var e=t[0],n=t[1],r=t[2];return n/=100,r/=108.883,e=(e/=95.047)>.008856?Math.pow(e,1/3):7.787*e+16/116,[116*(n=n>.008856?Math.pow(n,1/3):7.787*n+16/116)-16,500*(e-n),200*(n-(r=r>.008856?Math.pow(r,1/3):7.787*r+16/116))]}function Zf(t){var e,n,r,i,a=t[0],o=t[1],s=t[2];return a<=8?i=(n=100*a/903.3)/100*7.787+16/116:(n=100*Math.pow((a+16)/116,3),i=Math.pow(n/100,1/3)),[e=e/95.047<=.008856?e=95.047*(o/500+i-16/116)/7.787:95.047*Math.pow(o/500+i,3),n,r=r/108.883<=.008859?r=108.883*(i-s/200-16/116)/7.787:108.883*Math.pow(i-s/200,3)]}function Kf(t){var e,n=t[0],r=t[1],i=t[2];return(e=360*Math.atan2(i,r)/2/Math.PI)<0&&(e+=360),[n,Math.sqrt(r*r+i*i),e]}function Xf(t){return Gf(Zf(t))}function Qf(t){var e,n=t[0],r=t[1];return e=t[2]/360*2*Math.PI,[n,r*Math.cos(e),r*Math.sin(e)]}function th(t){return eh[t]}var eh={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},nh={};for(var rh in eh)nh[JSON.stringify(eh[rh])]=rh;var ih=function(){return new uh};for(var ah in jf){ih[ah+"Raw"]=function(t){return function(e){return"number"==typeof e&&(e=Array.prototype.slice.call(arguments)),jf[t](e)}}(ah);var oh=/(\w+)2(\w+)/.exec(ah),sh=oh[1],lh=oh[2];(ih[sh]=ih[sh]||{})[lh]=ih[ah]=function(t){return function(e){"number"==typeof e&&(e=Array.prototype.slice.call(arguments));var n=jf[t](e);if("string"==typeof n||void 0===n)return n;for(var r=0;r<n.length;r++)n[r]=Math.round(n[r]);return n}}(ah)}var uh=function(){this.convs={}};uh.prototype.routeSpace=function(t,e){var n=e[0];return void 0===n?this.getValues(t):("number"==typeof n&&(n=Array.prototype.slice.call(e)),this.setValues(t,n))},uh.prototype.setValues=function(t,e){return this.space=t,this.convs={},this.convs[t]=e,this},uh.prototype.getValues=function(t){var e=this.convs[t];if(!e){var n=this.space,r=this.convs[n];e=ih[n][t](r),this.convs[t]=e}return e},["rgb","hsl","hsv","cmyk","keyword"].forEach(function(t){uh.prototype[t]=function(e){return this.routeSpace(t,arguments)}});var ch=ih,dh={aliceblue:[240,248,255],antiquewhite:[250,235,215],aqua:[0,255,255],aquamarine:[127,255,212],azure:[240,255,255],beige:[245,245,220],bisque:[255,228,196],black:[0,0,0],blanchedalmond:[255,235,205],blue:[0,0,255],blueviolet:[138,43,226],brown:[165,42,42],burlywood:[222,184,135],cadetblue:[95,158,160],chartreuse:[127,255,0],chocolate:[210,105,30],coral:[255,127,80],cornflowerblue:[100,149,237],cornsilk:[255,248,220],crimson:[220,20,60],cyan:[0,255,255],darkblue:[0,0,139],darkcyan:[0,139,139],darkgoldenrod:[184,134,11],darkgray:[169,169,169],darkgreen:[0,100,0],darkgrey:[169,169,169],darkkhaki:[189,183,107],darkmagenta:[139,0,139],darkolivegreen:[85,107,47],darkorange:[255,140,0],darkorchid:[153,50,204],darkred:[139,0,0],darksalmon:[233,150,122],darkseagreen:[143,188,143],darkslateblue:[72,61,139],darkslategray:[47,79,79],darkslategrey:[47,79,79],darkturquoise:[0,206,209],darkviolet:[148,0,211],deeppink:[255,20,147],deepskyblue:[0,191,255],dimgray:[105,105,105],dimgrey:[105,105,105],dodgerblue:[30,144,255],firebrick:[178,34,34],floralwhite:[255,250,240],forestgreen:[34,139,34],fuchsia:[255,0,255],gainsboro:[220,220,220],ghostwhite:[248,248,255],gold:[255,215,0],goldenrod:[218,165,32],gray:[128,128,128],green:[0,128,0],greenyellow:[173,255,47],grey:[128,128,128],honeydew:[240,255,240],hotpink:[255,105,180],indianred:[205,92,92],indigo:[75,0,130],ivory:[255,255,240],khaki:[240,230,140],lavender:[230,230,250],lavenderblush:[255,240,245],lawngreen:[124,252,0],lemonchiffon:[255,250,205],lightblue:[173,216,230],lightcoral:[240,128,128],lightcyan:[224,255,255],lightgoldenrodyellow:[250,250,210],lightgray:[211,211,211],lightgreen:[144,238,144],lightgrey:[211,211,211],lightpink:[255,182,193],lightsalmon:[255,160,122],lightseagreen:[32,178,170],lightskyblue:[135,206,250],lightslategray:[119,136,153],lightslategrey:[119,136,153],lightsteelblue:[176,196,222],lightyellow:[255,255,224],lime:[0,255,0],limegreen:[50,205,50],linen:[250,240,230],magenta:[255,0,255],maroon:[128,0,0],mediumaquamarine:[102,205,170],mediumblue:[0,0,205],mediumorchid:[186,85,211],mediumpurple:[147,112,219],mediumseagreen:[60,179,113],mediumslateblue:[123,104,238],mediumspringgreen:[0,250,154],mediumturquoise:[72,209,204],mediumvioletred:[199,21,133],midnightblue:[25,25,112],mintcream:[245,255,250],mistyrose:[255,228,225],moccasin:[255,228,181],navajowhite:[255,222,173],navy:[0,0,128],oldlace:[253,245,230],olive:[128,128,0],olivedrab:[107,142,35],orange:[255,165,0],orangered:[255,69,0],orchid:[218,112,214],palegoldenrod:[238,232,170],palegreen:[152,251,152],paleturquoise:[175,238,238],palevioletred:[219,112,147],papayawhip:[255,239,213],peachpuff:[255,218,185],peru:[205,133,63],pink:[255,192,203],plum:[221,160,221],powderblue:[176,224,230],purple:[128,0,128],rebeccapurple:[102,51,153],red:[255,0,0],rosybrown:[188,143,143],royalblue:[65,105,225],saddlebrown:[139,69,19],salmon:[250,128,114],sandybrown:[244,164,96],seagreen:[46,139,87],seashell:[255,245,238],sienna:[160,82,45],silver:[192,192,192],skyblue:[135,206,235],slateblue:[106,90,205],slategray:[112,128,144],slategrey:[112,128,144],snow:[255,250,250],springgreen:[0,255,127],steelblue:[70,130,180],tan:[210,180,140],teal:[0,128,128],thistle:[216,191,216],tomato:[255,99,71],turquoise:[64,224,208],violet:[238,130,238],wheat:[245,222,179],white:[255,255,255],whitesmoke:[245,245,245],yellow:[255,255,0],yellowgreen:[154,205,50]},fh={getRgba:hh,getHsla:ph,getRgb:function(t){var e=hh(t);return e&&e.slice(0,3)},getHsl:function(t){var e=ph(t);return e&&e.slice(0,3)},getHwb:vh,getAlpha:function(t){var e=hh(t);if(e)return e[3];if(e=ph(t))return e[3];if(e=vh(t))return e[3]},hexString:function(t,e){var e=void 0!==e&&3===t.length?e:t[3];return"#"+_h(t[0])+_h(t[1])+_h(t[2])+(e>=0&&e<1?_h(Math.round(255*e)):"")},rgbString:function(t,e){if(e<1||t[3]&&t[3]<1)return gh(t,e);return"rgb("+t[0]+", "+t[1]+", "+t[2]+")"},rgbaString:gh,percentString:function(t,e){if(e<1||t[3]&&t[3]<1)return mh(t,e);var n=Math.round(t[0]/255*100),r=Math.round(t[1]/255*100),i=Math.round(t[2]/255*100);return"rgb("+n+"%, "+r+"%, "+i+"%)"},percentaString:mh,hslString:function(t,e){if(e<1||t[3]&&t[3]<1)return yh(t,e);return"hsl("+t[0]+", "+t[1]+"%, "+t[2]+"%)"},hslaString:yh,hwbString:function(t,e){void 0===e&&(e=void 0!==t[3]?t[3]:1);return"hwb("+t[0]+", "+t[1]+"%, "+t[2]+"%"+(void 0!==e&&1!==e?", "+e:"")+")"},keyword:function(t){return xh[t.slice(0,3)]}};function hh(t){if(t){var e=[0,0,0],n=1,r=t.match(/^#([a-fA-F0-9]{3,4})$/i),i="";if(r){i=(r=r[1])[3];for(var a=0;a<e.length;a++)e[a]=parseInt(r[a]+r[a],16);i&&(n=Math.round(parseInt(i+i,16)/255*100)/100)}else if(r=t.match(/^#([a-fA-F0-9]{6}([a-fA-F0-9]{2})?)$/i)){i=r[2],r=r[1];for(a=0;a<e.length;a++)e[a]=parseInt(r.slice(2*a,2*a+2),16);i&&(n=Math.round(parseInt(i,16)/255*100)/100)}else if(r=t.match(/^rgba?\(\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*,\s*([+-]?\d+)\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)){for(a=0;a<e.length;a++)e[a]=parseInt(r[a+1]);n=parseFloat(r[4])}else if(r=t.match(/^rgba?\(\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*,\s*([+-]?[\d\.]+)\%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)$/i)){for(a=0;a<e.length;a++)e[a]=Math.round(2.55*parseFloat(r[a+1]));n=parseFloat(r[4])}else if(r=t.match(/(\w+)/)){if("transparent"==r[1])return[0,0,0,0];if(!(e=dh[r[1]]))return}for(a=0;a<e.length;a++)e[a]=bh(e[a],0,255);return n=n||0==n?bh(n,0,1):1,e[3]=n,e}}function ph(t){if(t){var e=t.match(/^hsla?\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/);if(e){var n=parseFloat(e[4]);return[bh(parseInt(e[1]),0,360),bh(parseFloat(e[2]),0,100),bh(parseFloat(e[3]),0,100),bh(isNaN(n)?1:n,0,1)]}}}function vh(t){if(t){var e=t.match(/^hwb\(\s*([+-]?\d+)(?:deg)?\s*,\s*([+-]?[\d\.]+)%\s*,\s*([+-]?[\d\.]+)%\s*(?:,\s*([+-]?[\d\.]+)\s*)?\)/);if(e){var n=parseFloat(e[4]);return[bh(parseInt(e[1]),0,360),bh(parseFloat(e[2]),0,100),bh(parseFloat(e[3]),0,100),bh(isNaN(n)?1:n,0,1)]}}}function gh(t,e){return void 0===e&&(e=void 0!==t[3]?t[3]:1),"rgba("+t[0]+", "+t[1]+", "+t[2]+", "+e+")"}function mh(t,e){return"rgba("+Math.round(t[0]/255*100)+"%, "+Math.round(t[1]/255*100)+"%, "+Math.round(t[2]/255*100)+"%, "+(e||t[3]||1)+")"}function yh(t,e){return void 0===e&&(e=void 0!==t[3]?t[3]:1),"hsla("+t[0]+", "+t[1]+"%, "+t[2]+"%, "+e+")"}function bh(t,e,n){return Math.min(Math.max(e,t),n)}function _h(t){var e=t.toString(16).toUpperCase();return e.length<2?"0"+e:e}var xh={};for(var wh in dh)xh[dh[wh]]=wh;var kh=function t(e){return e instanceof t?e:this instanceof t?(this.valid=!1,this.values={rgb:[0,0,0],hsl:[0,0,0],hsv:[0,0,0],hwb:[0,0,0],cmyk:[0,0,0,0],alpha:1},void("string"==typeof e?(r=fh.getRgba(e))?this.setValues("rgb",r):(r=fh.getHsla(e))?this.setValues("hsl",r):(r=fh.getHwb(e))&&this.setValues("hwb",r):"object"===(void 0===e?"undefined":n(e))&&(void 0!==(r=e).r||void 0!==r.red?this.setValues("rgb",r):void 0!==r.l||void 0!==r.lightness?this.setValues("hsl",r):void 0!==r.v||void 0!==r.value?this.setValues("hsv",r):void 0!==r.w||void 0!==r.whiteness?this.setValues("hwb",r):void 0===r.c&&void 0===r.cyan||this.setValues("cmyk",r)))):new t(e);var r};(kh.prototype={isValid:function(){return this.valid},rgb:function(){return this.setSpace("rgb",arguments)},hsl:function(){return this.setSpace("hsl",arguments)},hsv:function(){return this.setSpace("hsv",arguments)},hwb:function(){return this.setSpace("hwb",arguments)},cmyk:function(){return this.setSpace("cmyk",arguments)},rgbArray:function(){return this.values.rgb},hslArray:function(){return this.values.hsl},hsvArray:function(){return this.values.hsv},hwbArray:function(){var t=this.values;return 1!==t.alpha?t.hwb.concat([t.alpha]):t.hwb},cmykArray:function(){return this.values.cmyk},rgbaArray:function(){var t=this.values;return t.rgb.concat([t.alpha])},hslaArray:function(){var t=this.values;return t.hsl.concat([t.alpha])},alpha:function(t){return void 0===t?this.values.alpha:(this.setValues("alpha",t),this)},red:function(t){return this.setChannel("rgb",0,t)},green:function(t){return this.setChannel("rgb",1,t)},blue:function(t){return this.setChannel("rgb",2,t)},hue:function(t){return t&&(t=(t%=360)<0?360+t:t),this.setChannel("hsl",0,t)},saturation:function(t){return this.setChannel("hsl",1,t)},lightness:function(t){return this.setChannel("hsl",2,t)},saturationv:function(t){return this.setChannel("hsv",1,t)},whiteness:function(t){return this.setChannel("hwb",1,t)},blackness:function(t){return this.setChannel("hwb",2,t)},value:function(t){return this.setChannel("hsv",2,t)},cyan:function(t){return this.setChannel("cmyk",0,t)},magenta:function(t){return this.setChannel("cmyk",1,t)},yellow:function(t){return this.setChannel("cmyk",2,t)},black:function(t){return this.setChannel("cmyk",3,t)},hexString:function(){return fh.hexString(this.values.rgb)},rgbString:function(){return fh.rgbString(this.values.rgb,this.values.alpha)},rgbaString:function(){return fh.rgbaString(this.values.rgb,this.values.alpha)},percentString:function(){return fh.percentString(this.values.rgb,this.values.alpha)},hslString:function(){return fh.hslString(this.values.hsl,this.values.alpha)},hslaString:function(){return fh.hslaString(this.values.hsl,this.values.alpha)},hwbString:function(){return fh.hwbString(this.values.hwb,this.values.alpha)},keyword:function(){return fh.keyword(this.values.rgb,this.values.alpha)},rgbNumber:function(){var t=this.values.rgb;return t[0]<<16|t[1]<<8|t[2]},luminosity:function(){for(var t=this.values.rgb,e=[],n=0;n<t.length;n++){var r=t[n]/255;e[n]=r<=.03928?r/12.92:Math.pow((r+.055)/1.055,2.4)}return.2126*e[0]+.7152*e[1]+.0722*e[2]},contrast:function(t){var e=this.luminosity(),n=t.luminosity();return e>n?(e+.05)/(n+.05):(n+.05)/(e+.05)},level:function(t){var e=this.contrast(t);return e>=7.1?"AAA":e>=4.5?"AA":""},dark:function(){var t=this.values.rgb;return(299*t[0]+587*t[1]+114*t[2])/1e3<128},light:function(){return!this.dark()},negate:function(){for(var t=[],e=0;e<3;e++)t[e]=255-this.values.rgb[e];return this.setValues("rgb",t),this},lighten:function(t){var e=this.values.hsl;return e[2]+=e[2]*t,this.setValues("hsl",e),this},darken:function(t){var e=this.values.hsl;return e[2]-=e[2]*t,this.setValues("hsl",e),this},saturate:function(t){var e=this.values.hsl;return e[1]+=e[1]*t,this.setValues("hsl",e),this},desaturate:function(t){var e=this.values.hsl;return e[1]-=e[1]*t,this.setValues("hsl",e),this},whiten:function(t){var e=this.values.hwb;return e[1]+=e[1]*t,this.setValues("hwb",e),this},blacken:function(t){var e=this.values.hwb;return e[2]+=e[2]*t,this.setValues("hwb",e),this},greyscale:function(){var t=this.values.rgb,e=.3*t[0]+.59*t[1]+.11*t[2];return this.setValues("rgb",[e,e,e]),this},clearer:function(t){var e=this.values.alpha;return this.setValues("alpha",e-e*t),this},opaquer:function(t){var e=this.values.alpha;return this.setValues("alpha",e+e*t),this},rotate:function(t){var e=this.values.hsl,n=(e[0]+t)%360;return e[0]=n<0?360+n:n,this.setValues("hsl",e),this},mix:function(t,e){var n=t,r=void 0===e?.5:e,i=2*r-1,a=this.alpha()-n.alpha(),o=((i*a==-1?i:(i+a)/(1+i*a))+1)/2,s=1-o;return this.rgb(o*this.red()+s*n.red(),o*this.green()+s*n.green(),o*this.blue()+s*n.blue()).alpha(this.alpha()*r+n.alpha()*(1-r))},toJSON:function(){return this.rgb()},clone:function(){var t,e,n=new kh,r=this.values,i=n.values;for(var a in r)r.hasOwnProperty(a)&&(t=r[a],"[object Array]"===(e={}.toString.call(t))?i[a]=t.slice(0):"[object Number]"===e?i[a]=t:console.error("unexpected color value:",t));return n}}).spaces={rgb:["red","green","blue"],hsl:["hue","saturation","lightness"],hsv:["hue","saturation","value"],hwb:["hue","whiteness","blackness"],cmyk:["cyan","magenta","yellow","black"]},kh.prototype.maxes={rgb:[255,255,255],hsl:[360,100,100],hsv:[360,100,100],hwb:[360,100,100],cmyk:[100,100,100,100]},kh.prototype.getValues=function(t){for(var e=this.values,n={},r=0;r<t.length;r++)n[t.charAt(r)]=e[t][r];return 1!==e.alpha&&(n.a=e.alpha),n},kh.prototype.setValues=function(t,e){var n,r,i=this.values,a=this.spaces,o=this.maxes,s=1;if(this.valid=!0,"alpha"===t)s=e;else if(e.length)i[t]=e.slice(0,t.length),s=e[t.length];else if(void 0!==e[t.charAt(0)]){for(n=0;n<t.length;n++)i[t][n]=e[t.charAt(n)];s=e.a}else if(void 0!==e[a[t][0]]){var l=a[t];for(n=0;n<t.length;n++)i[t][n]=e[l[n]];s=e.alpha}if(i.alpha=Math.max(0,Math.min(1,void 0===s?i.alpha:s)),"alpha"===t)return!1;for(n=0;n<t.length;n++)r=Math.max(0,Math.min(o[t][n],i[t][n])),i[t][n]=Math.round(r);for(var u in a)u!==t&&(i[u]=ch[t][u](i[t]));return!0},kh.prototype.setSpace=function(t,e){var n=e[0];return void 0===n?this.getValues(t):("number"==typeof n&&(n=Array.prototype.slice.call(e)),this.setValues(t,n),this)},kh.prototype.setChannel=function(t,e,n){var r=this.values[t];return void 0===n?r[e]:n===r[e]?this:(r[e]=n,this.setValues(t,r),this)},"undefined"!=typeof window&&(window.Color=kh);var Sh=kh;function Mh(t,e){return Pf.where(t,function(t){return t.position===e})}function Ch(t,e){t.forEach(function(t,e){return t._tmpIndex_=e,t}),t.sort(function(t,n){var r=e?n:t,i=e?t:n;return r.weight===i.weight?r._tmpIndex_-i._tmpIndex_:r.weight-i.weight}),t.forEach(function(t){delete t._tmpIndex_})}var Dh={defaults:{},addBox:function(t,e){t.boxes||(t.boxes=[]),e.fullWidth=e.fullWidth||!1,e.position=e.position||"top",e.weight=e.weight||0,t.boxes.push(e)},removeBox:function(t,e){var n=t.boxes?t.boxes.indexOf(e):-1;-1!==n&&t.boxes.splice(n,1)},configure:function(t,e,n){for(var r,i=["fullWidth","position","weight"],a=i.length,o=0;o<a;++o)r=i[o],n.hasOwnProperty(r)&&(e[r]=n[r])},update:function(t,e,n){if(t){var r=t.options.layout||{},i=Pf.options.toPadding(r.padding),a=i.left,o=i.right,s=i.top,l=i.bottom,u=Mh(t.boxes,"left"),c=Mh(t.boxes,"right"),d=Mh(t.boxes,"top"),f=Mh(t.boxes,"bottom"),h=Mh(t.boxes,"chartArea");Ch(u,!0),Ch(c,!1),Ch(d,!0),Ch(f,!1);var p=e-a-o,v=n-s-l,g=v/2,m=(e-p/2)/(u.length+c.length),y=(n-g)/(d.length+f.length),b=p,_=v,x=[];Pf.each(u.concat(c,d,f),function(t){var e,n=t.isHorizontal();n?(e=t.update(t.fullWidth?p:b,y),_-=e.height):(e=t.update(m,_),b-=e.width),x.push({horizontal:n,minSize:e,box:t})});var w=0,k=0,S=0,M=0;Pf.each(d.concat(f),function(t){if(t.getPadding){var e=t.getPadding();w=Math.max(w,e.left),k=Math.max(k,e.right)}}),Pf.each(u.concat(c),function(t){if(t.getPadding){var e=t.getPadding();S=Math.max(S,e.top),M=Math.max(M,e.bottom)}});var C=a,D=o,A=s,O=l;Pf.each(u.concat(c),j),Pf.each(u,function(t){C+=t.width}),Pf.each(c,function(t){D+=t.width}),Pf.each(d.concat(f),j),Pf.each(d,function(t){A+=t.height}),Pf.each(f,function(t){O+=t.height}),Pf.each(u.concat(c),function(t){var e=Pf.findNextWhere(x,function(e){return e.box===t}),n={left:0,right:0,top:A,bottom:O};e&&t.update(e.minSize.width,_,n)}),C=a,D=o,A=s,O=l,Pf.each(u,function(t){C+=t.width}),Pf.each(c,function(t){D+=t.width}),Pf.each(d,function(t){A+=t.height}),Pf.each(f,function(t){O+=t.height});var T=Math.max(w-C,0);C+=T,D+=Math.max(k-D,0);var P=Math.max(S-A,0);A+=P,O+=Math.max(M-O,0);var I=n-A-O,F=e-C-D;F===b&&I===_||(Pf.each(u,function(t){t.height=I}),Pf.each(c,function(t){t.height=I}),Pf.each(d,function(t){t.fullWidth||(t.width=F)}),Pf.each(f,function(t){t.fullWidth||(t.width=F)}),_=I,b=F);var L=a+T,R=s+P;Pf.each(u.concat(d),N),L+=b,R+=_,Pf.each(c,N),Pf.each(f,N),t.chartArea={left:C,top:A,right:C+b,bottom:A+_},Pf.each(h,function(e){e.left=t.chartArea.left,e.top=t.chartArea.top,e.right=t.chartArea.right,e.bottom=t.chartArea.bottom,e.update(b,_)})}function j(t){var e=Pf.findNextWhere(x,function(e){return e.box===t});if(e)if(t.isHorizontal()){var n={left:Math.max(C,w),right:Math.max(D,k),top:0,bottom:0};t.update(t.fullWidth?p:b,v/2,n)}else t.update(e.minSize.width,_)}function N(t){t.isHorizontal()?(t.left=t.fullWidth?a:C,t.right=t.fullWidth?e-o:C+b,t.top=R,t.bottom=R+t.height,R=t.bottom):(t.left=L,t.right=L+t.width,t.top=A,t.bottom=A+_,L=t.right)}}},Ah={constructors:{},defaults:{},registerScaleType:function(t,e,n){this.constructors[t]=e,this.defaults[t]=Pf.clone(n)},getScaleConstructor:function(t){return this.constructors.hasOwnProperty(t)?this.constructors[t]:void 0},getScaleDefaults:function(t){return this.defaults.hasOwnProperty(t)?Pf.merge({},[Rf.scale,this.defaults[t]]):{}},updateScaleDefaults:function(t,e){this.defaults.hasOwnProperty(t)&&(this.defaults[t]=Pf.extend(this.defaults[t],e))},addScalesToLayout:function(t){Pf.each(t.scales,function(e){e.fullWidth=e.options.fullWidth,e.position=e.options.position,e.weight=e.options.weight,Dh.addBox(t,e)})}};var Oh=function(t){Pf.extend(this,t),this.initialize.apply(this,arguments)};Pf.extend(Oh.prototype,{initialize:function(){this.hidden=!1},pivot:function(){var t=this;return t._view||(t._view=Pf.clone(t._model)),t._start={},t},transition:function(t){var e=this,r=e._model,i=e._start,a=e._view;return r&&1!==t?(a||(a=e._view={}),i||(i=e._start={}),function(t,e,r,i){var a,o,s,l,u,c,d,f,h,p=Object.keys(r);for(a=0,o=p.length;a<o;++a)if(c=r[s=p[a]],e.hasOwnProperty(s)||(e[s]=c),(l=e[s])!==c&&"_"!==s[0]){if(t.hasOwnProperty(s)||(t[s]=l),u=t[s],(d=void 0===c?"undefined":n(c))===(void 0===u?"undefined":n(u)))if("string"===d){if((f=Sh(u)).valid&&(h=Sh(c)).valid){e[s]=h.mix(f,i).rgbString();continue}}else if("number"===d&&isFinite(u)&&isFinite(c)){e[s]=u+(c-u)*i;continue}e[s]=c}}(i,a,r,t),e):(e._view=r,e._start=null,e)},tooltipPosition:function(){return{x:this._model.x,y:this._model.y}},hasValue:function(){return Pf.isNumber(this._model.x)&&Pf.isNumber(this._model.y)}}),Oh.extend=Pf.inherits;var Th=Oh,Ph=Of(function(t){var e=t.exports=Th.extend({chart:null,currentStep:0,numSteps:60,easing:"",render:null,onAnimationProgress:null,onAnimationComplete:null});Object.defineProperty(e.prototype,"animationObject",{get:function(){return this}}),Object.defineProperty(e.prototype,"chartInstance",{get:function(){return this.chart},set:function(t){this.chart=t}})});Rf._set("global",{animation:{duration:1e3,easing:"easeOutQuart",onProgress:Pf.noop,onComplete:Pf.noop}});var Ih={frameDuration:17,animations:[],dropFrames:0,request:null,addAnimation:function(t,e,n,r){var i,a,o=this.animations;for(e.chart=t,r||(t.animating=!0),i=0,a=o.length;i<a;++i)if(o[i].chart===t)return void(o[i]=e);o.push(e),1===o.length&&this.requestAnimationFrame()},cancelAnimation:function(t){var e=Pf.findIndex(this.animations,function(e){return e.chart===t});-1!==e&&(this.animations.splice(e,1),t.animating=!1)},requestAnimationFrame:function(){var t=this;null===t.request&&(t.request=Pf.requestAnimFrame.call(window,function(){t.request=null,t.startDigest()}))},startDigest:function(){var t=this,e=Date.now(),n=0;t.dropFrames>1&&(n=Math.floor(t.dropFrames),t.dropFrames=t.dropFrames%1),t.advance(1+n);var r=Date.now();t.dropFrames+=(r-e)/t.frameDuration,t.animations.length>0&&t.requestAnimationFrame()},advance:function(t){for(var e,n,r=this.animations,i=0;i<r.length;)n=(e=r[i]).chart,e.currentStep=(e.currentStep||0)+t,e.currentStep=Math.min(e.currentStep,e.numSteps),Pf.callback(e.render,[n,e],n),Pf.callback(e.onAnimationProgress,[e],n),e.currentStep>=e.numSteps?(Pf.callback(e.onAnimationComplete,[e],n),n.animating=!1,r.splice(i,1)):++i}};Rf._set("global",{elements:{arc:{backgroundColor:Rf.global.defaultColor,borderColor:"#fff",borderWidth:2}}});var Fh=Th.extend({inLabelRange:function(t){var e=this._view;return!!e&&Math.pow(t-e.x,2)<Math.pow(e.radius+e.hoverRadius,2)},inRange:function(t,e){var n=this._view;if(n){for(var r=Pf.getAngleFromPoint(n,{x:t,y:e}),i=r.angle,a=r.distance,o=n.startAngle,s=n.endAngle;s<o;)s+=2*Math.PI;for(;i>s;)i-=2*Math.PI;for(;i<o;)i+=2*Math.PI;var l=i>=o&&i<=s,u=a>=n.innerRadius&&a<=n.outerRadius;return l&&u}return!1},getCenterPoint:function(){var t=this._view,e=(t.startAngle+t.endAngle)/2,n=(t.innerRadius+t.outerRadius)/2;return{x:t.x+Math.cos(e)*n,y:t.y+Math.sin(e)*n}},getArea:function(){var t=this._view;return Math.PI*((t.endAngle-t.startAngle)/(2*Math.PI))*(Math.pow(t.outerRadius,2)-Math.pow(t.innerRadius,2))},tooltipPosition:function(){var t=this._view,e=t.startAngle+(t.endAngle-t.startAngle)/2,n=(t.outerRadius-t.innerRadius)/2+t.innerRadius;return{x:t.x+Math.cos(e)*n,y:t.y+Math.sin(e)*n}},draw:function(){var t=this._chart.ctx,e=this._view,n=e.startAngle,r=e.endAngle;t.beginPath(),t.arc(e.x,e.y,e.outerRadius,n,r),t.arc(e.x,e.y,e.innerRadius,r,n,!0),t.closePath(),t.strokeStyle=e.borderColor,t.lineWidth=e.borderWidth,t.fillStyle=e.backgroundColor,t.fill(),t.lineJoin="bevel",e.borderWidth&&t.stroke()}}),Lh=Rf.global;Rf._set("global",{elements:{line:{tension:.4,backgroundColor:Lh.defaultColor,borderWidth:3,borderColor:Lh.defaultColor,borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",capBezierPoints:!0,fill:!0}}});var Rh=Th.extend({draw:function(){var t,e,n,r,i=this._view,a=this._chart.ctx,o=i.spanGaps,s=this._children.slice(),l=Lh.elements.line,u=-1;for(this._loop&&s.length&&s.push(s[0]),a.save(),a.lineCap=i.borderCapStyle||l.borderCapStyle,a.setLineDash&&a.setLineDash(i.borderDash||l.borderDash),a.lineDashOffset=i.borderDashOffset||l.borderDashOffset,a.lineJoin=i.borderJoinStyle||l.borderJoinStyle,a.lineWidth=i.borderWidth||l.borderWidth,a.strokeStyle=i.borderColor||Lh.defaultColor,a.beginPath(),u=-1,t=0;t<s.length;++t)e=s[t],n=Pf.previousItem(s,t),r=e._view,0===t?r.skip||(a.moveTo(r.x,r.y),u=t):(n=-1===u?n:s[u],r.skip||(u!==t-1&&!o||-1===u?a.moveTo(r.x,r.y):Pf.canvas.lineTo(a,n._view,e._view),u=t));a.stroke(),a.restore()}}),jh=Rf.global.defaultColor;function Nh(t){var e=this._view;return!!e&&Math.abs(t-e.x)<e.radius+e.hitRadius}Rf._set("global",{elements:{point:{radius:3,pointStyle:"circle",backgroundColor:jh,borderColor:jh,borderWidth:1,hitRadius:1,hoverRadius:4,hoverBorderWidth:1}}});var $h=Th.extend({inRange:function(t,e){var n=this._view;return!!n&&Math.pow(t-n.x,2)+Math.pow(e-n.y,2)<Math.pow(n.hitRadius+n.radius,2)},inLabelRange:Nh,inXRange:Nh,inYRange:function(t){var e=this._view;return!!e&&Math.abs(t-e.y)<e.radius+e.hitRadius},getCenterPoint:function(){var t=this._view;return{x:t.x,y:t.y}},getArea:function(){return Math.PI*Math.pow(this._view.radius,2)},tooltipPosition:function(){var t=this._view;return{x:t.x,y:t.y,padding:t.radius+t.borderWidth}},draw:function(t){var e=this._view,n=this._model,r=this._chart.ctx,i=e.pointStyle,a=e.rotation,o=e.radius,s=e.x,l=e.y;e.skip||(void 0===t||n.x>=t.left&&1.01*t.right>=n.x&&n.y>=t.top&&1.01*t.bottom>=n.y)&&(r.strokeStyle=e.borderColor||jh,r.lineWidth=Pf.valueOrDefault(e.borderWidth,Rf.global.elements.point.borderWidth),r.fillStyle=e.backgroundColor||jh,Pf.canvas.drawPoint(r,i,o,s,l,a))}});function Eh(t){return void 0!==t._view.width}function zh(t){var e,n,r,i,a=t._view;if(Eh(t)){var o=a.width/2;e=a.x-o,n=a.x+o,r=Math.min(a.y,a.base),i=Math.max(a.y,a.base)}else{var s=a.height/2;e=Math.min(a.x,a.base),n=Math.max(a.x,a.base),r=a.y-s,i=a.y+s}return{left:e,top:r,right:n,bottom:i}}Rf._set("global",{elements:{rectangle:{backgroundColor:Rf.global.defaultColor,borderColor:Rf.global.defaultColor,borderSkipped:"bottom",borderWidth:0}}});var Wh={},Yh=Fh,Vh=Rh,Hh=$h,Bh=Th.extend({draw:function(){var t,e,n,r,i,a,o,s=this._chart.ctx,l=this._view,u=l.borderWidth;if(l.horizontal?(t=l.base,e=l.x,n=l.y-l.height/2,r=l.y+l.height/2,i=e>t?1:-1,a=1,o=l.borderSkipped||"left"):(t=l.x-l.width/2,e=l.x+l.width/2,n=l.y,i=1,a=(r=l.base)>n?1:-1,o=l.borderSkipped||"bottom"),u){var c=Math.min(Math.abs(t-e),Math.abs(n-r)),d=(u=u>c?c:u)/2,f=t+("left"!==o?d*i:0),h=e+("right"!==o?-d*i:0),p=n+("top"!==o?d*a:0),v=r+("bottom"!==o?-d*a:0);f!==h&&(n=p,r=v),p!==v&&(t=f,e=h)}s.beginPath(),s.fillStyle=l.backgroundColor,s.strokeStyle=l.borderColor,s.lineWidth=u;var g=[[t,r],[t,n],[e,n],[e,r]],m=["bottom","left","top","right"].indexOf(o,0);function y(t){return g[(m+t)%4]}-1===m&&(m=0);var b=y(0);s.moveTo(b[0],b[1]);for(var _=1;_<4;_++)b=y(_),s.lineTo(b[0],b[1]);s.fill(),u&&s.stroke()},height:function(){var t=this._view;return t.base-t.y},inRange:function(t,e){var n=!1;if(this._view){var r=zh(this);n=t>=r.left&&t<=r.right&&e>=r.top&&e<=r.bottom}return n},inLabelRange:function(t,e){if(!this._view)return!1;var n=zh(this);return Eh(this)?t>=n.left&&t<=n.right:e>=n.top&&e<=n.bottom},inXRange:function(t){var e=zh(this);return t>=e.left&&t<=e.right},inYRange:function(t){var e=zh(this);return t>=e.top&&t<=e.bottom},getCenterPoint:function(){var t,e,n=this._view;return Eh(this)?(t=n.x,e=(n.y+n.base)/2):(t=(n.x+n.base)/2,e=n.y),{x:t,y:e}},getArea:function(){var t=this._view;return t.width*Math.abs(t.y-t.base)},tooltipPosition:function(){var t=this._view;return{x:t.x,y:t.y}}});function Uh(t,e){return t.native?{x:t.x,y:t.y}:Pf.getRelativePosition(t,e)}function qh(t,e){var n,r,i,a,o;for(r=0,a=t.data.datasets.length;r<a;++r)if(t.isDatasetVisible(r))for(i=0,o=(n=t.getDatasetMeta(r)).data.length;i<o;++i){var s=n.data[i];s._view.skip||e(s)}}function Gh(t,e){var n=[];return qh(t,function(t){t.inRange(e.x,e.y)&&n.push(t)}),n}function Jh(t,e,n,r){var i=Number.POSITIVE_INFINITY,a=[];return qh(t,function(t){if(!n||t.inRange(e.x,e.y)){var o=t.getCenterPoint(),s=r(e,o);s<i?(a=[t],i=s):s===i&&a.push(t)}}),a}function Zh(t){var e=-1!==t.indexOf("x"),n=-1!==t.indexOf("y");return function(t,r){var i=e?Math.abs(t.x-r.x):0,a=n?Math.abs(t.y-r.y):0;return Math.sqrt(Math.pow(i,2)+Math.pow(a,2))}}function Kh(t,e,n){var r=Uh(e,t);n.axis=n.axis||"x";var i=Zh(n.axis),a=n.intersect?Gh(t,r):Jh(t,r,!1,i),o=[];return a.length?(t.data.datasets.forEach(function(e,n){if(t.isDatasetVisible(n)){var r=t.getDatasetMeta(n).data[a[0]._index];r&&!r._view.skip&&o.push(r)}}),o):[]}Wh.Arc=Yh,Wh.Line=Vh,Wh.Point=Hh,Wh.Rectangle=Bh;var Xh={modes:{single:function(t,e){var n=Uh(e,t),r=[];return qh(t,function(t){if(t.inRange(n.x,n.y))return r.push(t),r}),r.slice(0,1)},label:Kh,index:Kh,dataset:function(t,e,n){var r=Uh(e,t);n.axis=n.axis||"xy";var i=Zh(n.axis),a=n.intersect?Gh(t,r):Jh(t,r,!1,i);return a.length>0&&(a=t.getDatasetMeta(a[0]._datasetIndex).data),a},"x-axis":function(t,e){return Kh(t,e,{intersect:!1})},point:function(t,e){return Gh(t,Uh(e,t))},nearest:function(t,e,n){var r=Uh(e,t);n.axis=n.axis||"xy";var i=Zh(n.axis),a=Jh(t,r,n.intersect,i);return a.length>1&&a.sort(function(t,e){var n=t.getArea()-e.getArea();return 0===n&&(n=t._datasetIndex-e._datasetIndex),n}),a.slice(0,1)},x:function(t,e,n){var r=Uh(e,t),i=[],a=!1;return qh(t,function(t){t.inXRange(r.x)&&i.push(t),t.inRange(r.x,r.y)&&(a=!0)}),n.intersect&&!a&&(i=[]),i},y:function(t,e,n){var r=Uh(e,t),i=[],a=!1;return qh(t,function(t){t.inYRange(r.y)&&i.push(t),t.inRange(r.x,r.y)&&(a=!0)}),n.intersect&&!a&&(i=[]),i}}},Qh="$chartjs",tp="chartjs-",ep=tp+"render-monitor",np=tp+"render-animation",rp=["animationstart","webkitAnimationStart"],ip={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"};function ap(t,e){var n=Pf.getStyle(t,e),r=n&&n.match(/^(\d+)(\.\d+)?px$/);return r?Number(r[1]):void 0}var op=!!function(){var t=!1;try{var e=Object.defineProperty({},"passive",{get:function(){t=!0}});window.addEventListener("e",null,e)}catch(t){}return t}()&&{passive:!0};function sp(t,e,n){t.addEventListener(e,n,op)}function lp(t,e,n){t.removeEventListener(e,n,op)}function up(t,e,n,r,i){return{type:t,chart:e,native:i||null,x:void 0!==n?n:null,y:void 0!==r?r:null}}function cp(t,e,n){var r,i,a,o,s=t[Qh]||(t[Qh]={}),l=s.resizer=function(t){var e=document.createElement("div"),n=tp+"size-monitor",r="position:absolute;left:0;top:0;right:0;bottom:0;overflow:hidden;pointer-events:none;visibility:hidden;z-index:-1;";e.style.cssText=r,e.className=n,e.innerHTML='<div class="'+n+'-expand" style="'+r+'"><div style="position:absolute;width:1000000px;height:1000000px;left:0;top:0"></div></div><div class="'+n+'-shrink" style="'+r+'"><div style="position:absolute;width:200%;height:200%;left:0; top:0"></div></div>';var i=e.childNodes[0],a=e.childNodes[1];e._reset=function(){i.scrollLeft=1e6,i.scrollTop=1e6,a.scrollLeft=1e6,a.scrollTop=1e6};var o=function(){e._reset(),t()};return sp(i,"scroll",o.bind(i,"expand")),sp(a,"scroll",o.bind(a,"shrink")),e}((r=function(){if(s.resizer)return e(up("resize",n))},a=!1,o=[],function(){o=Array.prototype.slice.call(arguments),i=i||this,a||(a=!0,Pf.requestAnimFrame.call(window,function(){a=!1,r.apply(i,o)}))}));!function(t,e){var n=t[Qh]||(t[Qh]={}),r=n.renderProxy=function(t){t.animationName===np&&e()};Pf.each(rp,function(e){sp(t,e,r)}),n.reflow=!!t.offsetParent,t.classList.add(ep)}(t,function(){if(s.resizer){var e=t.parentNode;e&&e!==l.parentNode&&e.insertBefore(l,e.firstChild),l._reset()}})}function dp(t){var e=t[Qh]||{},n=e.resizer;delete e.resizer,function(t){var e=t[Qh]||{},n=e.renderProxy;n&&(Pf.each(rp,function(e){lp(t,e,n)}),delete e.renderProxy),t.classList.remove(ep)}(t),n&&n.parentNode&&n.parentNode.removeChild(n)}var fp={_enabled:"undefined"!=typeof window&&"undefined"!=typeof document,initialize:function(){var t,e,n,r="from{opacity:0.99}to{opacity:1}";e="@-webkit-keyframes "+np+"{"+r+"}@keyframes "+np+"{"+r+"}."+ep+"{-webkit-animation:"+np+" 0.001s;animation:"+np+" 0.001s;}",n=(t=this)._style||document.createElement("style"),t._style||(t._style=n,e="/* Chart.js */\n"+e,n.setAttribute("type","text/css"),document.getElementsByTagName("head")[0].appendChild(n)),n.appendChild(document.createTextNode(e))},acquireContext:function(t,e){"string"==typeof t?t=document.getElementById(t):t.length&&(t=t[0]),t&&t.canvas&&(t=t.canvas);var n=t&&t.getContext&&t.getContext("2d");return n&&n.canvas===t?(function(t,e){var n=t.style,r=t.getAttribute("height"),i=t.getAttribute("width");if(t[Qh]={initial:{height:r,width:i,style:{display:n.display,height:n.height,width:n.width}}},n.display=n.display||"block",null===i||""===i){var a=ap(t,"width");void 0!==a&&(t.width=a)}if(null===r||""===r)if(""===t.style.height)t.height=t.width/(e.options.aspectRatio||2);else{var o=ap(t,"height");void 0!==a&&(t.height=o)}}(t,e),n):null},releaseContext:function(t){var e=t.canvas;if(e[Qh]){var n=e[Qh].initial;["height","width"].forEach(function(t){var r=n[t];Pf.isNullOrUndef(r)?e.removeAttribute(t):e.setAttribute(t,r)}),Pf.each(n.style||{},function(t,n){e.style[n]=t}),e.width=e.width,delete e[Qh]}},addEventListener:function(t,e,n){var r=t.canvas;if("resize"!==e){var i=n[Qh]||(n[Qh]={});sp(r,e,(i.proxies||(i.proxies={}))[t.id+"_"+e]=function(e){n(function(t,e){var n=ip[t.type]||t.type,r=Pf.getRelativePosition(t,e);return up(n,e,r.x,r.y,t)}(e,t))})}else cp(r,n,t)},removeEventListener:function(t,e,n){var r=t.canvas;if("resize"!==e){var i=((n[Qh]||{}).proxies||{})[t.id+"_"+e];i&&lp(r,e,i)}else dp(r)}};Pf.addEvent=sp,Pf.removeEvent=lp;var hp=fp._enabled?fp:{acquireContext:function(t){return t&&t.canvas&&(t=t.canvas),t&&t.getContext("2d")||null}},pp=Pf.extend({initialize:function(){},acquireContext:function(){},releaseContext:function(){},addEventListener:function(){},removeEventListener:function(){}},hp);Rf._set("global",{plugins:{}});var vp={_plugins:[],_cacheId:0,register:function(t){var e=this._plugins;[].concat(t).forEach(function(t){-1===e.indexOf(t)&&e.push(t)}),this._cacheId++},unregister:function(t){var e=this._plugins;[].concat(t).forEach(function(t){var n=e.indexOf(t);-1!==n&&e.splice(n,1)}),this._cacheId++},clear:function(){this._plugins=[],this._cacheId++},count:function(){return this._plugins.length},getAll:function(){return this._plugins},notify:function(t,e,n){var r,i,a,o,s,l=this.descriptors(t),u=l.length;for(r=0;r<u;++r)if("function"==typeof(s=(a=(i=l[r]).plugin)[e])&&((o=[t].concat(n||[])).push(i.options),!1===s.apply(a,o)))return!1;return!0},descriptors:function(t){var e=t.$plugins||(t.$plugins={});if(e.id===this._cacheId)return e.descriptors;var n=[],r=[],i=t&&t.config||{},a=i.options&&i.options.plugins||{};return this._plugins.concat(i.plugins||[]).forEach(function(t){if(-1===n.indexOf(t)){var e=t.id,i=a[e];!1!==i&&(!0===i&&(i=Pf.clone(Rf.global.plugins[e])),n.push(t),r.push({plugin:t,options:i||{}}))}}),e.descriptors=r,e.id=this._cacheId,r},_invalidate:function(t){delete t.$plugins}},gp={formatters:{values:function(t){return Pf.isArray(t)?t:""+t},linear:function(t,e,n){var r=n.length>3?n[2]-n[1]:n[1]-n[0];Math.abs(r)>1&&t!==Math.floor(t)&&(r=t-Math.floor(t));var i=Pf.log10(Math.abs(r)),a="";if(0!==t)if(Math.max(Math.abs(n[0]),Math.abs(n[n.length-1]))<1e-4){var o=Pf.log10(Math.abs(t));a=t.toExponential(Math.floor(o)-Math.floor(i))}else{var s=-1*Math.floor(i);s=Math.max(Math.min(s,20),0),a=t.toFixed(s)}else a="0";return a},logarithmic:function(t,e,n){var r=t/Math.pow(10,Math.floor(Pf.log10(t)));return 0===t?"0":1===r||2===r||5===r||0===e||e===n.length-1?t.toExponential():""}}};function mp(t){var e,n,r=[];for(e=0,n=t.length;e<n;++e)r.push(t[e].label);return r}function yp(t,e,n){var r=t.getPixelForTick(e);return n&&(r-=0===e?(t.getPixelForTick(1)-r)/2:(r-t.getPixelForTick(e-1))/2),r}function bp(t,e,n){return Pf.isArray(e)?Pf.longestText(t,n,e):t.measureText(e).width}function _p(t){var e=Pf.valueOrDefault,n=Rf.global,r=e(t.fontSize,n.defaultFontSize),i=e(t.fontStyle,n.defaultFontStyle),a=e(t.fontFamily,n.defaultFontFamily);return{size:r,style:i,family:a,font:Pf.fontString(r,i,a)}}function xp(t){return Pf.options.toLineHeight(Pf.valueOrDefault(t.lineHeight,1.2),Pf.valueOrDefault(t.fontSize,Rf.global.defaultFontSize))}Rf._set("scale",{display:!0,position:"left",offset:!1,gridLines:{display:!0,color:"rgba(0, 0, 0, 0.1)",lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickMarkLength:10,zeroLineWidth:1,zeroLineColor:"rgba(0,0,0,0.25)",zeroLineBorderDash:[],zeroLineBorderDashOffset:0,offsetGridLines:!1,borderDash:[],borderDashOffset:0},scaleLabel:{display:!1,labelString:"",lineHeight:1.2,padding:{top:4,bottom:4}},ticks:{beginAtZero:!1,minRotation:0,maxRotation:50,mirror:!1,padding:0,reverse:!1,display:!0,autoSkip:!0,autoSkipPadding:0,labelOffset:0,callback:gp.formatters.values,minor:{},major:{}}});var wp=Th.extend({getPadding:function(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}},getTicks:function(){return this._ticks},mergeTicksOptions:function(){var t=this.options.ticks;for(var e in!1===t.minor&&(t.minor={display:!1}),!1===t.major&&(t.major={display:!1}),t)"major"!==e&&"minor"!==e&&(void 0===t.minor[e]&&(t.minor[e]=t[e]),void 0===t.major[e]&&(t.major[e]=t[e]))},beforeUpdate:function(){Pf.callback(this.options.beforeUpdate,[this])},update:function(t,e,n){var r,i,a,o,s,l,u=this;for(u.beforeUpdate(),u.maxWidth=t,u.maxHeight=e,u.margins=Pf.extend({left:0,right:0,top:0,bottom:0},n),u.longestTextCache=u.longestTextCache||{},u.beforeSetDimensions(),u.setDimensions(),u.afterSetDimensions(),u.beforeDataLimits(),u.determineDataLimits(),u.afterDataLimits(),u.beforeBuildTicks(),s=u.buildTicks()||[],u.afterBuildTicks(),u.beforeTickToLabelConversion(),a=u.convertTicksToLabels(s)||u.ticks,u.afterTickToLabelConversion(),u.ticks=a,r=0,i=a.length;r<i;++r)o=a[r],(l=s[r])?l.label=o:s.push(l={label:o,major:!1});return u._ticks=s,u.beforeCalculateTickRotation(),u.calculateTickRotation(),u.afterCalculateTickRotation(),u.beforeFit(),u.fit(),u.afterFit(),u.afterUpdate(),u.minSize},afterUpdate:function(){Pf.callback(this.options.afterUpdate,[this])},beforeSetDimensions:function(){Pf.callback(this.options.beforeSetDimensions,[this])},setDimensions:function(){var t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=0,t.right=t.width):(t.height=t.maxHeight,t.top=0,t.bottom=t.height),t.paddingLeft=0,t.paddingTop=0,t.paddingRight=0,t.paddingBottom=0},afterSetDimensions:function(){Pf.callback(this.options.afterSetDimensions,[this])},beforeDataLimits:function(){Pf.callback(this.options.beforeDataLimits,[this])},determineDataLimits:Pf.noop,afterDataLimits:function(){Pf.callback(this.options.afterDataLimits,[this])},beforeBuildTicks:function(){Pf.callback(this.options.beforeBuildTicks,[this])},buildTicks:Pf.noop,afterBuildTicks:function(){Pf.callback(this.options.afterBuildTicks,[this])},beforeTickToLabelConversion:function(){Pf.callback(this.options.beforeTickToLabelConversion,[this])},convertTicksToLabels:function(){var t=this.options.ticks;this.ticks=this.ticks.map(t.userCallback||t.callback,this)},afterTickToLabelConversion:function(){Pf.callback(this.options.afterTickToLabelConversion,[this])},beforeCalculateTickRotation:function(){Pf.callback(this.options.beforeCalculateTickRotation,[this])},calculateTickRotation:function(){var t=this,e=t.ctx,n=t.options.ticks,r=mp(t._ticks),i=_p(n);e.font=i.font;var a=n.minRotation||0;if(r.length&&t.options.display&&t.isHorizontal())for(var o,s=Pf.longestText(e,i.font,r,t.longestTextCache),l=s,u=t.getPixelForTick(1)-t.getPixelForTick(0)-6;l>u&&a<n.maxRotation;){var c=Pf.toRadians(a);if(o=Math.cos(c),Math.sin(c)*s>t.maxHeight){a--;break}a++,l=o*s}t.labelRotation=a},afterCalculateTickRotation:function(){Pf.callback(this.options.afterCalculateTickRotation,[this])},beforeFit:function(){Pf.callback(this.options.beforeFit,[this])},fit:function(){var t=this,e=t.minSize={width:0,height:0},n=mp(t._ticks),r=t.options,i=r.ticks,a=r.scaleLabel,o=r.gridLines,s=r.display,l=t.isHorizontal(),u=_p(i),c=r.gridLines.tickMarkLength;if(e.width=l?t.isFullWidth()?t.maxWidth-t.margins.left-t.margins.right:t.maxWidth:s&&o.drawTicks?c:0,e.height=l?s&&o.drawTicks?c:0:t.maxHeight,a.display&&s){var d=xp(a)+Pf.options.toPadding(a.padding).height;l?e.height+=d:e.width+=d}if(i.display&&s){var f=Pf.longestText(t.ctx,u.font,n,t.longestTextCache),h=Pf.numberOfLabelLines(n),p=.5*u.size,v=t.options.ticks.padding;if(l){t.longestLabelWidth=f;var g=Pf.toRadians(t.labelRotation),m=Math.cos(g),y=Math.sin(g)*f+u.size*h+p*(h-1)+p;e.height=Math.min(t.maxHeight,e.height+y+v),t.ctx.font=u.font;var b=bp(t.ctx,n[0],u.font),_=bp(t.ctx,n[n.length-1],u.font);0!==t.labelRotation?(t.paddingLeft="bottom"===r.position?m*b+3:m*p+3,t.paddingRight="bottom"===r.position?m*p+3:m*_+3):(t.paddingLeft=b/2+3,t.paddingRight=_/2+3)}else i.mirror?f=0:f+=v+p,e.width=Math.min(t.maxWidth,e.width+f),t.paddingTop=u.size/2,t.paddingBottom=u.size/2}t.handleMargins(),t.width=e.width,t.height=e.height},handleMargins:function(){var t=this;t.margins&&(t.paddingLeft=Math.max(t.paddingLeft-t.margins.left,0),t.paddingTop=Math.max(t.paddingTop-t.margins.top,0),t.paddingRight=Math.max(t.paddingRight-t.margins.right,0),t.paddingBottom=Math.max(t.paddingBottom-t.margins.bottom,0))},afterFit:function(){Pf.callback(this.options.afterFit,[this])},isHorizontal:function(){return"top"===this.options.position||"bottom"===this.options.position},isFullWidth:function(){return this.options.fullWidth},getRightValue:function(t){if(Pf.isNullOrUndef(t))return NaN;if("number"==typeof t&&!isFinite(t))return NaN;if(t)if(this.isHorizontal()){if(void 0!==t.x)return this.getRightValue(t.x)}else if(void 0!==t.y)return this.getRightValue(t.y);return t},getLabelForIndex:Pf.noop,getPixelForValue:Pf.noop,getValueForPixel:Pf.noop,getPixelForTick:function(t){var e=this,n=e.options.offset;if(e.isHorizontal()){var r=(e.width-(e.paddingLeft+e.paddingRight))/Math.max(e._ticks.length-(n?0:1),1),i=r*t+e.paddingLeft;n&&(i+=r/2);var a=e.left+Math.round(i);return a+=e.isFullWidth()?e.margins.left:0}var o=e.height-(e.paddingTop+e.paddingBottom);return e.top+t*(o/(e._ticks.length-1))},getPixelForDecimal:function(t){var e=this;if(e.isHorizontal()){var n=(e.width-(e.paddingLeft+e.paddingRight))*t+e.paddingLeft,r=e.left+Math.round(n);return r+=e.isFullWidth()?e.margins.left:0}return e.top+t*e.height},getBasePixel:function(){return this.getPixelForValue(this.getBaseValue())},getBaseValue:function(){var t=this.min,e=this.max;return this.beginAtZero?0:t<0&&e<0?e:t>0&&e>0?t:0},_autoSkip:function(t){var e,n,r,i,a=this,o=a.isHorizontal(),s=a.options.ticks.minor,l=t.length,u=Pf.toRadians(a.labelRotation),c=Math.cos(u),d=a.longestLabelWidth*c,f=[];for(s.maxTicksLimit&&(i=s.maxTicksLimit),o&&(e=!1,(d+s.autoSkipPadding)*l>a.width-(a.paddingLeft+a.paddingRight)&&(e=1+Math.floor((d+s.autoSkipPadding)*l/(a.width-(a.paddingLeft+a.paddingRight)))),i&&l>i&&(e=Math.max(e,Math.floor(l/i)))),n=0;n<l;n++)r=t[n],(e>1&&n%e>0||n%e==0&&n+e>=l)&&n!==l-1&&delete r.label,f.push(r);return f},draw:function(t){var e=this,n=e.options;if(n.display){var r=e.ctx,i=Rf.global,a=n.ticks.minor,o=n.ticks.major||a,s=n.gridLines,l=n.scaleLabel,u=0!==e.labelRotation,c=e.isHorizontal(),d=a.autoSkip?e._autoSkip(e.getTicks()):e.getTicks(),f=Pf.valueOrDefault(a.fontColor,i.defaultFontColor),h=_p(a),p=Pf.valueOrDefault(o.fontColor,i.defaultFontColor),v=_p(o),g=s.drawTicks?s.tickMarkLength:0,m=Pf.valueOrDefault(l.fontColor,i.defaultFontColor),y=_p(l),b=Pf.options.toPadding(l.padding),_=Pf.toRadians(e.labelRotation),x=[],w=e.options.gridLines.lineWidth,k="right"===n.position?e.left:e.right-w-g,S="right"===n.position?e.left+g:e.right,M="bottom"===n.position?e.top+w:e.bottom-g-w,C="bottom"===n.position?e.top+w+g:e.bottom+w;if(Pf.each(d,function(r,o){if(!Pf.isNullOrUndef(r.label)){var l,f,h,p,v,m,y,b,D,A,O,T,P,I,F=r.label;o===e.zeroLineIndex&&n.offset===s.offsetGridLines?(l=s.zeroLineWidth,f=s.zeroLineColor,h=s.zeroLineBorderDash,p=s.zeroLineBorderDashOffset):(l=Pf.valueAtIndexOrDefault(s.lineWidth,o),f=Pf.valueAtIndexOrDefault(s.color,o),h=Pf.valueOrDefault(s.borderDash,i.borderDash),p=Pf.valueOrDefault(s.borderDashOffset,i.borderDashOffset));var L="middle",R="middle",j=a.padding;if(c){var N=g+j;"bottom"===n.position?(R=u?"middle":"top",L=u?"right":"center",I=e.top+N):(R=u?"middle":"bottom",L=u?"left":"center",I=e.bottom-N);var $=yp(e,o,s.offsetGridLines&&d.length>1);$<e.left&&(f="rgba(0,0,0,0)"),$+=Pf.aliasPixel(l),P=e.getPixelForTick(o)+a.labelOffset,v=y=D=O=$,m=M,b=C,A=t.top,T=t.bottom+w}else{var E,z="left"===n.position;a.mirror?(L=z?"left":"right",E=j):(L=z?"right":"left",E=g+j),P=z?e.right-E:e.left+E;var W=yp(e,o,s.offsetGridLines&&d.length>1);W<e.top&&(f="rgba(0,0,0,0)"),W+=Pf.aliasPixel(l),I=e.getPixelForTick(o)+a.labelOffset,v=k,y=S,D=t.left,O=t.right+w,m=b=A=T=W}x.push({tx1:v,ty1:m,tx2:y,ty2:b,x1:D,y1:A,x2:O,y2:T,labelX:P,labelY:I,glWidth:l,glColor:f,glBorderDash:h,glBorderDashOffset:p,rotation:-1*_,label:F,major:r.major,textBaseline:R,textAlign:L})}}),Pf.each(x,function(t){if(s.display&&(r.save(),r.lineWidth=t.glWidth,r.strokeStyle=t.glColor,r.setLineDash&&(r.setLineDash(t.glBorderDash),r.lineDashOffset=t.glBorderDashOffset),r.beginPath(),s.drawTicks&&(r.moveTo(t.tx1,t.ty1),r.lineTo(t.tx2,t.ty2)),s.drawOnChartArea&&(r.moveTo(t.x1,t.y1),r.lineTo(t.x2,t.y2)),r.stroke(),r.restore()),a.display){r.save(),r.translate(t.labelX,t.labelY),r.rotate(t.rotation),r.font=t.major?v.font:h.font,r.fillStyle=t.major?p:f,r.textBaseline=t.textBaseline,r.textAlign=t.textAlign;var n=t.label;if(Pf.isArray(n))for(var i=n.length,o=1.5*h.size,l=e.isHorizontal()?0:-o*(i-1)/2,u=0;u<i;++u)r.fillText(""+n[u],0,l),l+=o;else r.fillText(n,0,0);r.restore()}}),l.display){var D,A,O=0,T=xp(l)/2;if(c)D=e.left+(e.right-e.left)/2,A="bottom"===n.position?e.bottom-T-b.bottom:e.top+T+b.top;else{var P="left"===n.position;D=P?e.left+T+b.top:e.right-T-b.top,A=e.top+(e.bottom-e.top)/2,O=P?-.5*Math.PI:.5*Math.PI}r.save(),r.translate(D,A),r.rotate(O),r.textAlign="center",r.textBaseline="middle",r.fillStyle=m,r.font=y.font,r.fillText(l.labelString,0,0),r.restore()}if(s.drawBorder){r.lineWidth=Pf.valueAtIndexOrDefault(s.lineWidth,0),r.strokeStyle=Pf.valueAtIndexOrDefault(s.color,0);var I=e.left,F=e.right+w,L=e.top,R=e.bottom+w,j=Pf.aliasPixel(r.lineWidth);c?(L=R="top"===n.position?e.bottom:e.top,L+=j,R+=j):(I=F="left"===n.position?e.right:e.left,I+=j,F+=j),r.beginPath(),r.moveTo(I,L),r.lineTo(F,R),r.stroke()}}}}),kp=Of(function(t){Rf._set("global",{tooltips:{enabled:!0,custom:null,mode:"nearest",position:"average",intersect:!0,backgroundColor:"rgba(0,0,0,0.8)",titleFontStyle:"bold",titleSpacing:2,titleMarginBottom:6,titleFontColor:"#fff",titleAlign:"left",bodySpacing:2,bodyFontColor:"#fff",bodyAlign:"left",footerFontStyle:"bold",footerSpacing:2,footerMarginTop:6,footerFontColor:"#fff",footerAlign:"left",yPadding:6,xPadding:6,caretPadding:2,caretSize:5,cornerRadius:6,multiKeyBackground:"#fff",displayColors:!0,borderColor:"rgba(0,0,0,0)",borderWidth:0,callbacks:{beforeTitle:Pf.noop,title:function(t,e){var n="",r=e.labels,i=r?r.length:0;if(t.length>0){var a=t[0];a.xLabel?n=a.xLabel:i>0&&a.index<i&&(n=r[a.index])}return n},afterTitle:Pf.noop,beforeBody:Pf.noop,beforeLabel:Pf.noop,label:function(t,e){var n=e.datasets[t.datasetIndex].label||"";return n&&(n+=": "),n+=t.yLabel,n},labelColor:function(t,e){var n=e.getDatasetMeta(t.datasetIndex).data[t.index]._view;return{borderColor:n.borderColor,backgroundColor:n.backgroundColor}},labelTextColor:function(){return this._options.bodyFontColor},afterLabel:Pf.noop,afterBody:Pf.noop,beforeFooter:Pf.noop,footer:Pf.noop,afterFooter:Pf.noop}}});var e={average:function(t){if(!t.length)return!1;var e,n,r=0,i=0,a=0;for(e=0,n=t.length;e<n;++e){var o=t[e];if(o&&o.hasValue()){var s=o.tooltipPosition();r+=s.x,i+=s.y,++a}}return{x:Math.round(r/a),y:Math.round(i/a)}},nearest:function(t,e){var n,r,i,a=e.x,o=e.y,s=Number.POSITIVE_INFINITY;for(n=0,r=t.length;n<r;++n){var l=t[n];if(l&&l.hasValue()){var u=l.getCenterPoint(),c=Pf.distanceBetweenPoints(e,u);c<s&&(s=c,i=l)}}if(i){var d=i.tooltipPosition();a=d.x,o=d.y}return{x:a,y:o}}};function n(t,e){var n=Pf.color(t);return n.alpha(e*n.alpha()).rgbaString()}function r(t,e){return e&&(Pf.isArray(e)?Array.prototype.push.apply(t,e):t.push(e)),t}function i(t){return("string"==typeof t||t instanceof String)&&t.indexOf("\n")>-1?t.split("\n"):t}function a(t){var e=Rf.global,n=Pf.valueOrDefault;return{xPadding:t.xPadding,yPadding:t.yPadding,xAlign:t.xAlign,yAlign:t.yAlign,bodyFontColor:t.bodyFontColor,_bodyFontFamily:n(t.bodyFontFamily,e.defaultFontFamily),_bodyFontStyle:n(t.bodyFontStyle,e.defaultFontStyle),_bodyAlign:t.bodyAlign,bodyFontSize:n(t.bodyFontSize,e.defaultFontSize),bodySpacing:t.bodySpacing,titleFontColor:t.titleFontColor,_titleFontFamily:n(t.titleFontFamily,e.defaultFontFamily),_titleFontStyle:n(t.titleFontStyle,e.defaultFontStyle),titleFontSize:n(t.titleFontSize,e.defaultFontSize),_titleAlign:t.titleAlign,titleSpacing:t.titleSpacing,titleMarginBottom:t.titleMarginBottom,footerFontColor:t.footerFontColor,_footerFontFamily:n(t.footerFontFamily,e.defaultFontFamily),_footerFontStyle:n(t.footerFontStyle,e.defaultFontStyle),footerFontSize:n(t.footerFontSize,e.defaultFontSize),_footerAlign:t.footerAlign,footerSpacing:t.footerSpacing,footerMarginTop:t.footerMarginTop,caretSize:t.caretSize,cornerRadius:t.cornerRadius,backgroundColor:t.backgroundColor,opacity:0,legendColorBackground:t.multiKeyBackground,displayColors:t.displayColors,borderColor:t.borderColor,borderWidth:t.borderWidth}}function o(t){return r([],i(t))}(t.exports=Th.extend({initialize:function(){this._model=a(this._options),this._lastActive=[]},getTitle:function(){var t=this._options.callbacks,e=t.beforeTitle.apply(this,arguments),n=t.title.apply(this,arguments),a=t.afterTitle.apply(this,arguments),o=[];return o=r(o=r(o=r(o,i(e)),i(n)),i(a))},getBeforeBody:function(){return o(this._options.callbacks.beforeBody.apply(this,arguments))},getBody:function(t,e){var n=this,a=n._options.callbacks,o=[];return Pf.each(t,function(t){var s={before:[],lines:[],after:[]};r(s.before,i(a.beforeLabel.call(n,t,e))),r(s.lines,a.label.call(n,t,e)),r(s.after,i(a.afterLabel.call(n,t,e))),o.push(s)}),o},getAfterBody:function(){return o(this._options.callbacks.afterBody.apply(this,arguments))},getFooter:function(){var t=this._options.callbacks,e=t.beforeFooter.apply(this,arguments),n=t.footer.apply(this,arguments),a=t.afterFooter.apply(this,arguments),o=[];return o=r(o=r(o=r(o,i(e)),i(n)),i(a))},update:function(t){var n,r,i,o,s,l,u,c=this,d=c._options,f=c._model,h=c._model=a(d),p=c._active,v=c._data,g={xAlign:f.xAlign,yAlign:f.yAlign},m={x:f.x,y:f.y},y={width:f.width,height:f.height},b={x:f.caretX,y:f.caretY};if(p.length){h.opacity=1;var _=[],x=[];b=e[d.position].call(c,p,c._eventPosition);var w=[];for(n=0,r=p.length;n<r;++n)w.push((i=p[n],o=void 0,s=void 0,void 0,void 0,o=i._xScale,s=i._yScale||i._scale,l=i._index,u=i._datasetIndex,{xLabel:o?o.getLabelForIndex(l,u):"",yLabel:s?s.getLabelForIndex(l,u):"",index:l,datasetIndex:u,x:i._model.x,y:i._model.y}));d.filter&&(w=w.filter(function(t){return d.filter(t,v)})),d.itemSort&&(w=w.sort(function(t,e){return d.itemSort(t,e,v)})),Pf.each(w,function(t){_.push(d.callbacks.labelColor.call(c,t,c._chart)),x.push(d.callbacks.labelTextColor.call(c,t,c._chart))}),h.title=c.getTitle(w,v),h.beforeBody=c.getBeforeBody(w,v),h.body=c.getBody(w,v),h.afterBody=c.getAfterBody(w,v),h.footer=c.getFooter(w,v),h.x=Math.round(b.x),h.y=Math.round(b.y),h.caretPadding=d.caretPadding,h.labelColors=_,h.labelTextColors=x,h.dataPoints=w,m=function(t,e,n,r){var i=t.x,a=t.y,o=t.caretSize,s=t.caretPadding,l=t.cornerRadius,u=n.xAlign,c=n.yAlign,d=o+s,f=l+s;return"right"===u?i-=e.width:"center"===u&&((i-=e.width/2)+e.width>r.width&&(i=r.width-e.width),i<0&&(i=0)),"top"===c?a+=d:a-="bottom"===c?e.height+d:e.height/2,"center"===c?"left"===u?i+=d:"right"===u&&(i-=d):"left"===u?i-=f:"right"===u&&(i+=f),{x:i,y:a}}(h,y=function(t,e){var n=t._chart.ctx,r=2*e.yPadding,i=0,a=e.body,o=a.reduce(function(t,e){return t+e.before.length+e.lines.length+e.after.length},0);o+=e.beforeBody.length+e.afterBody.length;var s=e.title.length,l=e.footer.length,u=e.titleFontSize,c=e.bodyFontSize,d=e.footerFontSize;r+=s*u,r+=s?(s-1)*e.titleSpacing:0,r+=s?e.titleMarginBottom:0,r+=o*c,r+=o?(o-1)*e.bodySpacing:0,r+=l?e.footerMarginTop:0,r+=l*d,r+=l?(l-1)*e.footerSpacing:0;var f=0,h=function(t){i=Math.max(i,n.measureText(t).width+f)};return n.font=Pf.fontString(u,e._titleFontStyle,e._titleFontFamily),Pf.each(e.title,h),n.font=Pf.fontString(c,e._bodyFontStyle,e._bodyFontFamily),Pf.each(e.beforeBody.concat(e.afterBody),h),f=e.displayColors?c+2:0,Pf.each(a,function(t){Pf.each(t.before,h),Pf.each(t.lines,h),Pf.each(t.after,h)}),f=0,n.font=Pf.fontString(d,e._footerFontStyle,e._footerFontFamily),Pf.each(e.footer,h),{width:i+=2*e.xPadding,height:r}}(this,h),g=function(t,e){var n,r,i,a,o,s=t._model,l=t._chart,u=t._chart.chartArea,c="center",d="center";s.y<e.height?d="top":s.y>l.height-e.height&&(d="bottom");var f=(u.left+u.right)/2,h=(u.top+u.bottom)/2;"center"===d?(n=function(t){return t<=f},r=function(t){return t>f}):(n=function(t){return t<=e.width/2},r=function(t){return t>=l.width-e.width/2}),i=function(t){return t+e.width+s.caretSize+s.caretPadding>l.width},a=function(t){return t-e.width-s.caretSize-s.caretPadding<0},o=function(t){return t<=h?"top":"bottom"},n(s.x)?(c="left",i(s.x)&&(c="center",d=o(s.y))):r(s.x)&&(c="right",a(s.x)&&(c="center",d=o(s.y)));var p=t._options;return{xAlign:p.xAlign?p.xAlign:c,yAlign:p.yAlign?p.yAlign:d}}(this,y),c._chart)}else h.opacity=0;return h.xAlign=g.xAlign,h.yAlign=g.yAlign,h.x=m.x,h.y=m.y,h.width=y.width,h.height=y.height,h.caretX=b.x,h.caretY=b.y,c._model=h,t&&d.custom&&d.custom.call(c,h),c},drawCaret:function(t,e){var n=this._chart.ctx,r=this._view,i=this.getCaretPosition(t,e,r);n.lineTo(i.x1,i.y1),n.lineTo(i.x2,i.y2),n.lineTo(i.x3,i.y3)},getCaretPosition:function(t,e,n){var r,i,a,o,s,l,u=n.caretSize,c=n.cornerRadius,d=n.xAlign,f=n.yAlign,h=t.x,p=t.y,v=e.width,g=e.height;if("center"===f)s=p+g/2,"left"===d?(i=(r=h)-u,a=r,o=s+u,l=s-u):(i=(r=h+v)+u,a=r,o=s-u,l=s+u);else if("left"===d?(r=(i=h+c+u)-u,a=i+u):"right"===d?(r=(i=h+v-c-u)-u,a=i+u):(r=(i=n.caretX)-u,a=i+u),"top"===f)s=(o=p)-u,l=o;else{s=(o=p+g)+u,l=o;var m=a;a=r,r=m}return{x1:r,x2:i,x3:a,y1:o,y2:s,y3:l}},drawTitle:function(t,e,r,i){var a=e.title;if(a.length){r.textAlign=e._titleAlign,r.textBaseline="top";var o,s,l=e.titleFontSize,u=e.titleSpacing;for(r.fillStyle=n(e.titleFontColor,i),r.font=Pf.fontString(l,e._titleFontStyle,e._titleFontFamily),o=0,s=a.length;o<s;++o)r.fillText(a[o],t.x,t.y),t.y+=l+u,o+1===a.length&&(t.y+=e.titleMarginBottom-u)}},drawBody:function(t,e,r,i){var a=e.bodyFontSize,o=e.bodySpacing,s=e.body;r.textAlign=e._bodyAlign,r.textBaseline="top",r.font=Pf.fontString(a,e._bodyFontStyle,e._bodyFontFamily);var l=0,u=function(e){r.fillText(e,t.x+l,t.y),t.y+=a+o};r.fillStyle=n(e.bodyFontColor,i),Pf.each(e.beforeBody,u);var c=e.displayColors;l=c?a+2:0,Pf.each(s,function(o,s){var l=n(e.labelTextColors[s],i);r.fillStyle=l,Pf.each(o.before,u),Pf.each(o.lines,function(o){c&&(r.fillStyle=n(e.legendColorBackground,i),r.fillRect(t.x,t.y,a,a),r.lineWidth=1,r.strokeStyle=n(e.labelColors[s].borderColor,i),r.strokeRect(t.x,t.y,a,a),r.fillStyle=n(e.labelColors[s].backgroundColor,i),r.fillRect(t.x+1,t.y+1,a-2,a-2),r.fillStyle=l),u(o)}),Pf.each(o.after,u)}),l=0,Pf.each(e.afterBody,u),t.y-=o},drawFooter:function(t,e,r,i){var a=e.footer;a.length&&(t.y+=e.footerMarginTop,r.textAlign=e._footerAlign,r.textBaseline="top",r.fillStyle=n(e.footerFontColor,i),r.font=Pf.fontString(e.footerFontSize,e._footerFontStyle,e._footerFontFamily),Pf.each(a,function(n){r.fillText(n,t.x,t.y),t.y+=e.footerFontSize+e.footerSpacing}))},drawBackground:function(t,e,r,i,a){r.fillStyle=n(e.backgroundColor,a),r.strokeStyle=n(e.borderColor,a),r.lineWidth=e.borderWidth;var o=e.xAlign,s=e.yAlign,l=t.x,u=t.y,c=i.width,d=i.height,f=e.cornerRadius;r.beginPath(),r.moveTo(l+f,u),"top"===s&&this.drawCaret(t,i),r.lineTo(l+c-f,u),r.quadraticCurveTo(l+c,u,l+c,u+f),"center"===s&&"right"===o&&this.drawCaret(t,i),r.lineTo(l+c,u+d-f),r.quadraticCurveTo(l+c,u+d,l+c-f,u+d),"bottom"===s&&this.drawCaret(t,i),r.lineTo(l+f,u+d),r.quadraticCurveTo(l,u+d,l,u+d-f),"center"===s&&"left"===o&&this.drawCaret(t,i),r.lineTo(l,u+f),r.quadraticCurveTo(l,u,l+f,u),r.closePath(),r.fill(),e.borderWidth>0&&r.stroke()},draw:function(){var t=this._chart.ctx,e=this._view;if(0!==e.opacity){var n={width:e.width,height:e.height},r={x:e.x,y:e.y},i=Math.abs(e.opacity<.001)?0:e.opacity,a=e.title.length||e.beforeBody.length||e.body.length||e.afterBody.length||e.footer.length;this._options.enabled&&a&&(this.drawBackground(r,e,t,n,i),r.x+=e.xPadding,r.y+=e.yPadding,this.drawTitle(r,e,t,i),this.drawBody(r,e,t,i),this.drawFooter(r,e,t,i))}},handleEvent:function(t){var e,n=this,r=n._options;return n._lastActive=n._lastActive||[],"mouseout"===t.type?n._active=[]:n._active=n._chart.getElementsAtEventForMode(t,r.mode,r),(e=!Pf.arrayEquals(n._active,n._lastActive))&&(n._lastActive=n._active,(r.enabled||r.custom)&&(n._eventPosition={x:t.x,y:t.y},n.update(!0),n.pivot())),e}})).positioners=e});var Sp=Of(function(t,e){t.exports=function(){var e,r;function i(){return e.apply(null,arguments)}function a(t){return t instanceof Array||"[object Array]"===Object.prototype.toString.call(t)}function o(t){return null!=t&&"[object Object]"===Object.prototype.toString.call(t)}function s(t){return void 0===t}function l(t){return"number"==typeof t||"[object Number]"===Object.prototype.toString.call(t)}function u(t){return t instanceof Date||"[object Date]"===Object.prototype.toString.call(t)}function c(t,e){var n,r=[];for(n=0;n<t.length;++n)r.push(e(t[n],n));return r}function d(t,e){return Object.prototype.hasOwnProperty.call(t,e)}function f(t,e){for(var n in e)d(e,n)&&(t[n]=e[n]);return d(e,"toString")&&(t.toString=e.toString),d(e,"valueOf")&&(t.valueOf=e.valueOf),t}function h(t,e,n,r){return Te(t,e,n,r,!0).utc()}function p(t){return null==t._pf&&(t._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],meridiem:null,rfc2822:!1,weekdayMismatch:!1}),t._pf}function v(t){if(null==t._isValid){var e=p(t),n=r.call(e.parsedDateParts,function(t){return null!=t}),i=!isNaN(t._d.getTime())&&e.overflow<0&&!e.empty&&!e.invalidMonth&&!e.invalidWeekday&&!e.weekdayMismatch&&!e.nullInput&&!e.invalidFormat&&!e.userInvalidated&&(!e.meridiem||e.meridiem&&n);if(t._strict&&(i=i&&0===e.charsLeftOver&&0===e.unusedTokens.length&&void 0===e.bigHour),null!=Object.isFrozen&&Object.isFrozen(t))return i;t._isValid=i}return t._isValid}function g(t){var e=h(NaN);return null!=t?f(p(e),t):p(e).userInvalidated=!0,e}r=Array.prototype.some?Array.prototype.some:function(t){for(var e=Object(this),n=e.length>>>0,r=0;r<n;r++)if(r in e&&t.call(this,e[r],r,e))return!0;return!1};var m=i.momentProperties=[];function y(t,e){var n,r,i;if(s(e._isAMomentObject)||(t._isAMomentObject=e._isAMomentObject),s(e._i)||(t._i=e._i),s(e._f)||(t._f=e._f),s(e._l)||(t._l=e._l),s(e._strict)||(t._strict=e._strict),s(e._tzm)||(t._tzm=e._tzm),s(e._isUTC)||(t._isUTC=e._isUTC),s(e._offset)||(t._offset=e._offset),s(e._pf)||(t._pf=p(e)),s(e._locale)||(t._locale=e._locale),m.length>0)for(n=0;n<m.length;n++)r=m[n],s(i=e[r])||(t[r]=i);return t}var b=!1;function _(t){y(this,t),this._d=new Date(null!=t._d?t._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===b&&(b=!0,i.updateOffset(this),b=!1)}function x(t){return t instanceof _||null!=t&&null!=t._isAMomentObject}function w(t){return t<0?Math.ceil(t)||0:Math.floor(t)}function k(t){var e=+t,n=0;return 0!==e&&isFinite(e)&&(n=w(e)),n}function S(t,e,n){var r,i=Math.min(t.length,e.length),a=Math.abs(t.length-e.length),o=0;for(r=0;r<i;r++)(n&&t[r]!==e[r]||!n&&k(t[r])!==k(e[r]))&&o++;return o+a}function M(t){!1===i.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+t)}function C(t,e){var r=!0;return f(function(){var a=arguments;if(null!=i.deprecationHandler&&i.deprecationHandler(null,t),r){for(var o,s=[],l=0;l<arguments.length;l++){if(o="","object"===n(a[l])){for(var u in o+="\n["+l+"] ",arguments[0])o+=u+": "+a[0][u]+", ";o=o.slice(0,-2)}else o=a[l];s.push(o)}M(t+"\nArguments: "+Array.prototype.slice.call(s).join("")+"\n"+(new Error).stack),r=!1}return e.apply(this,arguments)},e)}var D,A={};function O(t,e){null!=i.deprecationHandler&&i.deprecationHandler(t,e),A[t]||(M(e),A[t]=!0)}function T(t){return t instanceof Function||"[object Function]"===Object.prototype.toString.call(t)}function P(t,e){var n,r=f({},t);for(n in e)d(e,n)&&(o(t[n])&&o(e[n])?(r[n]={},f(r[n],t[n]),f(r[n],e[n])):null!=e[n]?r[n]=e[n]:delete r[n]);for(n in t)d(t,n)&&!d(e,n)&&o(t[n])&&(r[n]=f({},r[n]));return r}function I(t){null!=t&&this.set(t)}i.suppressDeprecationWarnings=!1,i.deprecationHandler=null,D=Object.keys?Object.keys:function(t){var e,n=[];for(e in t)d(t,e)&&n.push(e);return n};var F={};function L(t,e){var n=t.toLowerCase();F[n]=F[n+"s"]=F[e]=t}function R(t){return"string"==typeof t?F[t]||F[t.toLowerCase()]:void 0}function j(t){var e,n,r={};for(n in t)d(t,n)&&(e=R(n))&&(r[e]=t[n]);return r}var N={};function $(t,e){N[t]=e}function E(t,e,n){var r=""+Math.abs(t),i=e-r.length,a=t>=0;return(a?n?"+":"":"-")+Math.pow(10,Math.max(0,i)).toString().substr(1)+r}var z=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,W=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,Y={},V={};function H(t,e,n,r){var i=r;"string"==typeof r&&(i=function(){return this[r]()}),t&&(V[t]=i),e&&(V[e[0]]=function(){return E(i.apply(this,arguments),e[1],e[2])}),n&&(V[n]=function(){return this.localeData().ordinal(i.apply(this,arguments),t)})}function B(t,e){return t.isValid()?(e=U(e,t.localeData()),Y[e]=Y[e]||function(t){var e,n,r,i=t.match(z);for(e=0,n=i.length;e<n;e++)V[i[e]]?i[e]=V[i[e]]:i[e]=(r=i[e]).match(/\[[\s\S]/)?r.replace(/^\[|\]$/g,""):r.replace(/\\/g,"");return function(e){var r,a="";for(r=0;r<n;r++)a+=T(i[r])?i[r].call(e,t):i[r];return a}}(e),Y[e](t)):t.localeData().invalidDate()}function U(t,e){var n=5;function r(t){return e.longDateFormat(t)||t}for(W.lastIndex=0;n>=0&&W.test(t);)t=t.replace(W,r),W.lastIndex=0,n-=1;return t}var q=/\d/,G=/\d\d/,J=/\d{3}/,Z=/\d{4}/,K=/[+-]?\d{6}/,X=/\d\d?/,Q=/\d\d\d\d?/,tt=/\d\d\d\d\d\d?/,et=/\d{1,3}/,nt=/\d{1,4}/,rt=/[+-]?\d{1,6}/,it=/\d+/,at=/[+-]?\d+/,ot=/Z|[+-]\d\d:?\d\d/gi,st=/Z|[+-]\d\d(?::?\d\d)?/gi,lt=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i,ut={};function ct(t,e,n){ut[t]=T(e)?e:function(t,r){return t&&n?n:e}}function dt(t,e){return d(ut,t)?ut[t](e._strict,e._locale):new RegExp(ft(t.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,function(t,e,n,r,i){return e||n||r||i})))}function ft(t){return t.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}var ht={};function pt(t,e){var n,r=e;for("string"==typeof t&&(t=[t]),l(e)&&(r=function(t,n){n[e]=k(t)}),n=0;n<t.length;n++)ht[t[n]]=r}function vt(t,e){pt(t,function(t,n,r,i){r._w=r._w||{},e(t,r._w,r,i)})}function gt(t,e,n){null!=e&&d(ht,t)&&ht[t](e,n._a,n,t)}var mt=0,yt=1,bt=2,_t=3,xt=4,wt=5,kt=6,St=7,Mt=8;function Ct(t){return Dt(t)?366:365}function Dt(t){return t%4==0&&t%100!=0||t%400==0}H("Y",0,0,function(){var t=this.year();return t<=9999?""+t:"+"+t}),H(0,["YY",2],0,function(){return this.year()%100}),H(0,["YYYY",4],0,"year"),H(0,["YYYYY",5],0,"year"),H(0,["YYYYYY",6,!0],0,"year"),L("year","y"),$("year",1),ct("Y",at),ct("YY",X,G),ct("YYYY",nt,Z),ct("YYYYY",rt,K),ct("YYYYYY",rt,K),pt(["YYYYY","YYYYYY"],mt),pt("YYYY",function(t,e){e[mt]=2===t.length?i.parseTwoDigitYear(t):k(t)}),pt("YY",function(t,e){e[mt]=i.parseTwoDigitYear(t)}),pt("Y",function(t,e){e[mt]=parseInt(t,10)}),i.parseTwoDigitYear=function(t){return k(t)+(k(t)>68?1900:2e3)};var At,Ot=Tt("FullYear",!0);function Tt(t,e){return function(n){return null!=n?(It(this,t,n),i.updateOffset(this,e),this):Pt(this,t)}}function Pt(t,e){return t.isValid()?t._d["get"+(t._isUTC?"UTC":"")+e]():NaN}function It(t,e,n){t.isValid()&&!isNaN(n)&&("FullYear"===e&&Dt(t.year())&&1===t.month()&&29===t.date()?t._d["set"+(t._isUTC?"UTC":"")+e](n,t.month(),Ft(n,t.month())):t._d["set"+(t._isUTC?"UTC":"")+e](n))}function Ft(t,e){if(isNaN(t)||isNaN(e))return NaN;var n,r=(e%(n=12)+n)%n;return t+=(e-r)/12,1===r?Dt(t)?29:28:31-r%7%2}At=Array.prototype.indexOf?Array.prototype.indexOf:function(t){var e;for(e=0;e<this.length;++e)if(this[e]===t)return e;return-1},H("M",["MM",2],"Mo",function(){return this.month()+1}),H("MMM",0,0,function(t){return this.localeData().monthsShort(this,t)}),H("MMMM",0,0,function(t){return this.localeData().months(this,t)}),L("month","M"),$("month",8),ct("M",X),ct("MM",X,G),ct("MMM",function(t,e){return e.monthsShortRegex(t)}),ct("MMMM",function(t,e){return e.monthsRegex(t)}),pt(["M","MM"],function(t,e){e[yt]=k(t)-1}),pt(["MMM","MMMM"],function(t,e,n,r){var i=n._locale.monthsParse(t,r,n._strict);null!=i?e[yt]=i:p(n).invalidMonth=t});var Lt=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,Rt="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),jt="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_");function Nt(t,e){var n;if(!t.isValid())return t;if("string"==typeof e)if(/^\d+$/.test(e))e=k(e);else if(!l(e=t.localeData().monthsParse(e)))return t;return n=Math.min(t.date(),Ft(t.year(),e)),t._d["set"+(t._isUTC?"UTC":"")+"Month"](e,n),t}function $t(t){return null!=t?(Nt(this,t),i.updateOffset(this,!0),this):Pt(this,"Month")}var Et=lt,zt=lt;function Wt(){function t(t,e){return e.length-t.length}var e,n,r=[],i=[],a=[];for(e=0;e<12;e++)n=h([2e3,e]),r.push(this.monthsShort(n,"")),i.push(this.months(n,"")),a.push(this.months(n,"")),a.push(this.monthsShort(n,""));for(r.sort(t),i.sort(t),a.sort(t),e=0;e<12;e++)r[e]=ft(r[e]),i[e]=ft(i[e]);for(e=0;e<24;e++)a[e]=ft(a[e]);this._monthsRegex=new RegExp("^("+a.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+i.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+r.join("|")+")","i")}function Yt(t){var e;if(t<100&&t>=0){var n=Array.prototype.slice.call(arguments);n[0]=t+400,e=new Date(Date.UTC.apply(null,n)),isFinite(e.getUTCFullYear())&&e.setUTCFullYear(t)}else e=new Date(Date.UTC.apply(null,arguments));return e}function Vt(t,e,n){var r=7+e-n,i=(7+Yt(t,0,r).getUTCDay()-e)%7;return-i+r-1}function Ht(t,e,n,r,i){var a,o,s=(7+n-r)%7,l=Vt(t,r,i),u=1+7*(e-1)+s+l;return u<=0?o=Ct(a=t-1)+u:u>Ct(t)?(a=t+1,o=u-Ct(t)):(a=t,o=u),{year:a,dayOfYear:o}}function Bt(t,e,n){var r,i,a=Vt(t.year(),e,n),o=Math.floor((t.dayOfYear()-a-1)/7)+1;return o<1?(i=t.year()-1,r=o+Ut(i,e,n)):o>Ut(t.year(),e,n)?(r=o-Ut(t.year(),e,n),i=t.year()+1):(i=t.year(),r=o),{week:r,year:i}}function Ut(t,e,n){var r=Vt(t,e,n),i=Vt(t+1,e,n);return(Ct(t)-r+i)/7}function qt(t,e){return t.slice(e,7).concat(t.slice(0,e))}H("w",["ww",2],"wo","week"),H("W",["WW",2],"Wo","isoWeek"),L("week","w"),L("isoWeek","W"),$("week",5),$("isoWeek",5),ct("w",X),ct("ww",X,G),ct("W",X),ct("WW",X,G),vt(["w","ww","W","WW"],function(t,e,n,r){e[r.substr(0,1)]=k(t)}),H("d",0,"do","day"),H("dd",0,0,function(t){return this.localeData().weekdaysMin(this,t)}),H("ddd",0,0,function(t){return this.localeData().weekdaysShort(this,t)}),H("dddd",0,0,function(t){return this.localeData().weekdays(this,t)}),H("e",0,0,"weekday"),H("E",0,0,"isoWeekday"),L("day","d"),L("weekday","e"),L("isoWeekday","E"),$("day",11),$("weekday",11),$("isoWeekday",11),ct("d",X),ct("e",X),ct("E",X),ct("dd",function(t,e){return e.weekdaysMinRegex(t)}),ct("ddd",function(t,e){return e.weekdaysShortRegex(t)}),ct("dddd",function(t,e){return e.weekdaysRegex(t)}),vt(["dd","ddd","dddd"],function(t,e,n,r){var i=n._locale.weekdaysParse(t,r,n._strict);null!=i?e.d=i:p(n).invalidWeekday=t}),vt(["d","e","E"],function(t,e,n,r){e[r]=k(t)});var Gt="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Jt="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Zt="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),Kt=lt,Xt=lt,Qt=lt;function te(){function t(t,e){return e.length-t.length}var e,n,r,i,a,o=[],s=[],l=[],u=[];for(e=0;e<7;e++)n=h([2e3,1]).day(e),r=this.weekdaysMin(n,""),i=this.weekdaysShort(n,""),a=this.weekdays(n,""),o.push(r),s.push(i),l.push(a),u.push(r),u.push(i),u.push(a);for(o.sort(t),s.sort(t),l.sort(t),u.sort(t),e=0;e<7;e++)s[e]=ft(s[e]),l[e]=ft(l[e]),u[e]=ft(u[e]);this._weekdaysRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+s.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+o.join("|")+")","i")}function ee(){return this.hours()%12||12}function ne(t,e){H(t,0,0,function(){return this.localeData().meridiem(this.hours(),this.minutes(),e)})}function re(t,e){return e._meridiemParse}H("H",["HH",2],0,"hour"),H("h",["hh",2],0,ee),H("k",["kk",2],0,function(){return this.hours()||24}),H("hmm",0,0,function(){return""+ee.apply(this)+E(this.minutes(),2)}),H("hmmss",0,0,function(){return""+ee.apply(this)+E(this.minutes(),2)+E(this.seconds(),2)}),H("Hmm",0,0,function(){return""+this.hours()+E(this.minutes(),2)}),H("Hmmss",0,0,function(){return""+this.hours()+E(this.minutes(),2)+E(this.seconds(),2)}),ne("a",!0),ne("A",!1),L("hour","h"),$("hour",13),ct("a",re),ct("A",re),ct("H",X),ct("h",X),ct("k",X),ct("HH",X,G),ct("hh",X,G),ct("kk",X,G),ct("hmm",Q),ct("hmmss",tt),ct("Hmm",Q),ct("Hmmss",tt),pt(["H","HH"],_t),pt(["k","kk"],function(t,e,n){var r=k(t);e[_t]=24===r?0:r}),pt(["a","A"],function(t,e,n){n._isPm=n._locale.isPM(t),n._meridiem=t}),pt(["h","hh"],function(t,e,n){e[_t]=k(t),p(n).bigHour=!0}),pt("hmm",function(t,e,n){var r=t.length-2;e[_t]=k(t.substr(0,r)),e[xt]=k(t.substr(r)),p(n).bigHour=!0}),pt("hmmss",function(t,e,n){var r=t.length-4,i=t.length-2;e[_t]=k(t.substr(0,r)),e[xt]=k(t.substr(r,2)),e[wt]=k(t.substr(i)),p(n).bigHour=!0}),pt("Hmm",function(t,e,n){var r=t.length-2;e[_t]=k(t.substr(0,r)),e[xt]=k(t.substr(r))}),pt("Hmmss",function(t,e,n){var r=t.length-4,i=t.length-2;e[_t]=k(t.substr(0,r)),e[xt]=k(t.substr(r,2)),e[wt]=k(t.substr(i))});var ie,ae=Tt("Hours",!0),oe={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:Rt,monthsShort:jt,week:{dow:0,doy:6},weekdays:Gt,weekdaysMin:Zt,weekdaysShort:Jt,meridiemParse:/[ap]\.?m?\.?/i},se={},le={};function ue(t){return t?t.toLowerCase().replace("_","-"):t}function ce(e){var n=null;if(!se[e]&&t&&t.exports)try{n=ie._abbr;var r=Af;r("./locale/"+e),de(n)}catch(t){}return se[e]}function de(t,e){var n;return t&&((n=s(e)?he(t):fe(t,e))?ie=n:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+t+" not found. Did you forget to load it?")),ie._abbr}function fe(t,e){if(null!==e){var n,r=oe;if(e.abbr=t,null!=se[t])O("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),r=se[t]._config;else if(null!=e.parentLocale)if(null!=se[e.parentLocale])r=se[e.parentLocale]._config;else{if(null==(n=ce(e.parentLocale)))return le[e.parentLocale]||(le[e.parentLocale]=[]),le[e.parentLocale].push({name:t,config:e}),null;r=n._config}return se[t]=new I(P(r,e)),le[t]&&le[t].forEach(function(t){fe(t.name,t.config)}),de(t),se[t]}return delete se[t],null}function he(t){var e;if(t&&t._locale&&t._locale._abbr&&(t=t._locale._abbr),!t)return ie;if(!a(t)){if(e=ce(t))return e;t=[t]}return function(t){for(var e,n,r,i,a=0;a<t.length;){for(i=ue(t[a]).split("-"),e=i.length,n=(n=ue(t[a+1]))?n.split("-"):null;e>0;){if(r=ce(i.slice(0,e).join("-")))return r;if(n&&n.length>=e&&S(i,n,!0)>=e-1)break;e--}a++}return ie}(t)}function pe(t){var e,n=t._a;return n&&-2===p(t).overflow&&(e=n[yt]<0||n[yt]>11?yt:n[bt]<1||n[bt]>Ft(n[mt],n[yt])?bt:n[_t]<0||n[_t]>24||24===n[_t]&&(0!==n[xt]||0!==n[wt]||0!==n[kt])?_t:n[xt]<0||n[xt]>59?xt:n[wt]<0||n[wt]>59?wt:n[kt]<0||n[kt]>999?kt:-1,p(t)._overflowDayOfYear&&(e<mt||e>bt)&&(e=bt),p(t)._overflowWeeks&&-1===e&&(e=St),p(t)._overflowWeekday&&-1===e&&(e=Mt),p(t).overflow=e),t}function ve(t,e,n){return null!=t?t:null!=e?e:n}function ge(t){var e,n,r,a,o,s=[];if(!t._d){for(r=function(t){var e=new Date(i.now());return t._useUTC?[e.getUTCFullYear(),e.getUTCMonth(),e.getUTCDate()]:[e.getFullYear(),e.getMonth(),e.getDate()]}(t),t._w&&null==t._a[bt]&&null==t._a[yt]&&function(t){var e,n,r,i,a,o,s,l;if(null!=(e=t._w).GG||null!=e.W||null!=e.E)a=1,o=4,n=ve(e.GG,t._a[mt],Bt(Pe(),1,4).year),r=ve(e.W,1),((i=ve(e.E,1))<1||i>7)&&(l=!0);else{a=t._locale._week.dow,o=t._locale._week.doy;var u=Bt(Pe(),a,o);n=ve(e.gg,t._a[mt],u.year),r=ve(e.w,u.week),null!=e.d?((i=e.d)<0||i>6)&&(l=!0):null!=e.e?(i=e.e+a,(e.e<0||e.e>6)&&(l=!0)):i=a}r<1||r>Ut(n,a,o)?p(t)._overflowWeeks=!0:null!=l?p(t)._overflowWeekday=!0:(s=Ht(n,r,i,a,o),t._a[mt]=s.year,t._dayOfYear=s.dayOfYear)}(t),null!=t._dayOfYear&&(o=ve(t._a[mt],r[mt]),(t._dayOfYear>Ct(o)||0===t._dayOfYear)&&(p(t)._overflowDayOfYear=!0),n=Yt(o,0,t._dayOfYear),t._a[yt]=n.getUTCMonth(),t._a[bt]=n.getUTCDate()),e=0;e<3&&null==t._a[e];++e)t._a[e]=s[e]=r[e];for(;e<7;e++)t._a[e]=s[e]=null==t._a[e]?2===e?1:0:t._a[e];24===t._a[_t]&&0===t._a[xt]&&0===t._a[wt]&&0===t._a[kt]&&(t._nextDay=!0,t._a[_t]=0),t._d=(t._useUTC?Yt:function(t,e,n,r,i,a,o){var s;return t<100&&t>=0?(s=new Date(t+400,e,n,r,i,a,o),isFinite(s.getFullYear())&&s.setFullYear(t)):s=new Date(t,e,n,r,i,a,o),s}).apply(null,s),a=t._useUTC?t._d.getUTCDay():t._d.getDay(),null!=t._tzm&&t._d.setUTCMinutes(t._d.getUTCMinutes()-t._tzm),t._nextDay&&(t._a[_t]=24),t._w&&void 0!==t._w.d&&t._w.d!==a&&(p(t).weekdayMismatch=!0)}}var me=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,ye=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/,be=/Z|[+-]\d\d(?::?\d\d)?/,_e=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/]],xe=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],we=/^\/?Date\((\-?\d+)/i;function ke(t){var e,n,r,i,a,o,s=t._i,l=me.exec(s)||ye.exec(s);if(l){for(p(t).iso=!0,e=0,n=_e.length;e<n;e++)if(_e[e][1].exec(l[1])){i=_e[e][0],r=!1!==_e[e][2];break}if(null==i)return void(t._isValid=!1);if(l[3]){for(e=0,n=xe.length;e<n;e++)if(xe[e][1].exec(l[3])){a=(l[2]||" ")+xe[e][0];break}if(null==a)return void(t._isValid=!1)}if(!r&&null!=a)return void(t._isValid=!1);if(l[4]){if(!be.exec(l[4]))return void(t._isValid=!1);o="Z"}t._f=i+(a||"")+(o||""),Ae(t)}else t._isValid=!1}var Se=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/;function Me(t,e,n,r,i,a){var o=[function(t){var e=parseInt(t,10);return e<=49?2e3+e:e<=999?1900+e:e}(t),jt.indexOf(e),parseInt(n,10),parseInt(r,10),parseInt(i,10)];return a&&o.push(parseInt(a,10)),o}var Ce={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function De(t){var e=Se.exec(t._i.replace(/\([^)]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(e){var n=Me(e[4],e[3],e[2],e[5],e[6],e[7]);if(!function(t,e,n){if(t){var r=Jt.indexOf(t),i=new Date(e[0],e[1],e[2]).getDay();if(r!==i)return p(n).weekdayMismatch=!0,n._isValid=!1,!1}return!0}(e[1],n,t))return;t._a=n,t._tzm=function(t,e,n){if(t)return Ce[t];if(e)return 0;var r=parseInt(n,10),i=r%100,a=(r-i)/100;return 60*a+i}(e[8],e[9],e[10]),t._d=Yt.apply(null,t._a),t._d.setUTCMinutes(t._d.getUTCMinutes()-t._tzm),p(t).rfc2822=!0}else t._isValid=!1}function Ae(t){if(t._f!==i.ISO_8601)if(t._f!==i.RFC_2822){t._a=[],p(t).empty=!0;var e,n,r,a,o,s=""+t._i,l=s.length,u=0;for(r=U(t._f,t._locale).match(z)||[],e=0;e<r.length;e++)a=r[e],(n=(s.match(dt(a,t))||[])[0])&&((o=s.substr(0,s.indexOf(n))).length>0&&p(t).unusedInput.push(o),s=s.slice(s.indexOf(n)+n.length),u+=n.length),V[a]?(n?p(t).empty=!1:p(t).unusedTokens.push(a),gt(a,n,t)):t._strict&&!n&&p(t).unusedTokens.push(a);p(t).charsLeftOver=l-u,s.length>0&&p(t).unusedInput.push(s),t._a[_t]<=12&&!0===p(t).bigHour&&t._a[_t]>0&&(p(t).bigHour=void 0),p(t).parsedDateParts=t._a.slice(0),p(t).meridiem=t._meridiem,t._a[_t]=(c=t._locale,d=t._a[_t],null==(f=t._meridiem)?d:null!=c.meridiemHour?c.meridiemHour(d,f):null!=c.isPM?((h=c.isPM(f))&&d<12&&(d+=12),h||12!==d||(d=0),d):d),ge(t),pe(t)}else De(t);else ke(t);var c,d,f,h}function Oe(t){var e=t._i,n=t._f;return t._locale=t._locale||he(t._l),null===e||void 0===n&&""===e?g({nullInput:!0}):("string"==typeof e&&(t._i=e=t._locale.preparse(e)),x(e)?new _(pe(e)):(u(e)?t._d=e:a(n)?function(t){var e,n,r,i,a;if(0===t._f.length)return p(t).invalidFormat=!0,void(t._d=new Date(NaN));for(i=0;i<t._f.length;i++)a=0,e=y({},t),null!=t._useUTC&&(e._useUTC=t._useUTC),e._f=t._f[i],Ae(e),v(e)&&(a+=p(e).charsLeftOver,a+=10*p(e).unusedTokens.length,p(e).score=a,(null==r||a<r)&&(r=a,n=e));f(t,n||e)}(t):n?Ae(t):function(t){var e=t._i;s(e)?t._d=new Date(i.now()):u(e)?t._d=new Date(e.valueOf()):"string"==typeof e?function(t){var e=we.exec(t._i);null===e?(ke(t),!1===t._isValid&&(delete t._isValid,De(t),!1===t._isValid&&(delete t._isValid,i.createFromInputFallback(t)))):t._d=new Date(+e[1])}(t):a(e)?(t._a=c(e.slice(0),function(t){return parseInt(t,10)}),ge(t)):o(e)?function(t){if(!t._d){var e=j(t._i);t._a=c([e.year,e.month,e.day||e.date,e.hour,e.minute,e.second,e.millisecond],function(t){return t&&parseInt(t,10)}),ge(t)}}(t):l(e)?t._d=new Date(e):i.createFromInputFallback(t)}(t),v(t)||(t._d=null),t))}function Te(t,e,n,r,i){var s,l={};return!0!==n&&!1!==n||(r=n,n=void 0),(o(t)&&function(t){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(t).length;var e;for(e in t)if(t.hasOwnProperty(e))return!1;return!0}(t)||a(t)&&0===t.length)&&(t=void 0),l._isAMomentObject=!0,l._useUTC=l._isUTC=i,l._l=n,l._i=t,l._f=e,l._strict=r,(s=new _(pe(Oe(l))))._nextDay&&(s.add(1,"d"),s._nextDay=void 0),s}function Pe(t,e,n,r){return Te(t,e,n,r,!1)}i.createFromInputFallback=C("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged and will be removed in an upcoming major release. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",function(t){t._d=new Date(t._i+(t._useUTC?" UTC":""))}),i.ISO_8601=function(){},i.RFC_2822=function(){};var Ie=C("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var t=Pe.apply(null,arguments);return this.isValid()&&t.isValid()?t<this?this:t:g()}),Fe=C("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",function(){var t=Pe.apply(null,arguments);return this.isValid()&&t.isValid()?t>this?this:t:g()});function Le(t,e){var n,r;if(1===e.length&&a(e[0])&&(e=e[0]),!e.length)return Pe();for(n=e[0],r=1;r<e.length;++r)e[r].isValid()&&!e[r][t](n)||(n=e[r]);return n}var Re=["year","quarter","month","week","day","hour","minute","second","millisecond"];function je(t){var e=j(t),n=e.year||0,r=e.quarter||0,i=e.month||0,a=e.week||e.isoWeek||0,o=e.day||0,s=e.hour||0,l=e.minute||0,u=e.second||0,c=e.millisecond||0;this._isValid=function(t){for(var e in t)if(-1===At.call(Re,e)||null!=t[e]&&isNaN(t[e]))return!1;for(var n=!1,r=0;r<Re.length;++r)if(t[Re[r]]){if(n)return!1;parseFloat(t[Re[r]])!==k(t[Re[r]])&&(n=!0)}return!0}(e),this._milliseconds=+c+1e3*u+6e4*l+1e3*s*60*60,this._days=+o+7*a,this._months=+i+3*r+12*n,this._data={},this._locale=he(),this._bubble()}function Ne(t){return t instanceof je}function $e(t){return t<0?-1*Math.round(-1*t):Math.round(t)}function Ee(t,e){H(t,0,0,function(){var t=this.utcOffset(),n="+";return t<0&&(t=-t,n="-"),n+E(~~(t/60),2)+e+E(~~t%60,2)})}Ee("Z",":"),Ee("ZZ",""),ct("Z",st),ct("ZZ",st),pt(["Z","ZZ"],function(t,e,n){n._useUTC=!0,n._tzm=We(st,t)});var ze=/([\+\-]|\d\d)/gi;function We(t,e){var n=(e||"").match(t);if(null===n)return null;var r=n[n.length-1]||[],i=(r+"").match(ze)||["-",0,0],a=60*i[1]+k(i[2]);return 0===a?0:"+"===i[0]?a:-a}function Ye(t,e){var n,r;return e._isUTC?(n=e.clone(),r=(x(t)||u(t)?t.valueOf():Pe(t).valueOf())-n.valueOf(),n._d.setTime(n._d.valueOf()+r),i.updateOffset(n,!1),n):Pe(t).local()}function Ve(t){return 15*-Math.round(t._d.getTimezoneOffset()/15)}function He(){return!!this.isValid()&&this._isUTC&&0===this._offset}i.updateOffset=function(){};var Be=/^(\-|\+)?(?:(\d*)[. ])?(\d+)\:(\d+)(?:\:(\d+)(\.\d*)?)?$/,Ue=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function qe(t,e){var r,i,a,o,s,u,c=t,f=null;return Ne(t)?c={ms:t._milliseconds,d:t._days,M:t._months}:l(t)?(c={},e?c[e]=t:c.milliseconds=t):(f=Be.exec(t))?(r="-"===f[1]?-1:1,c={y:0,d:k(f[bt])*r,h:k(f[_t])*r,m:k(f[xt])*r,s:k(f[wt])*r,ms:k($e(1e3*f[kt]))*r}):(f=Ue.exec(t))?(r="-"===f[1]?-1:1,c={y:Ge(f[2],r),M:Ge(f[3],r),w:Ge(f[4],r),d:Ge(f[5],r),h:Ge(f[6],r),m:Ge(f[7],r),s:Ge(f[8],r)}):null==c?c={}:"object"===(void 0===c?"undefined":n(c))&&("from"in c||"to"in c)&&(o=Pe(c.from),s=Pe(c.to),a=o.isValid()&&s.isValid()?(s=Ye(s,o),o.isBefore(s)?u=Je(o,s):((u=Je(s,o)).milliseconds=-u.milliseconds,u.months=-u.months),u):{milliseconds:0,months:0},(c={}).ms=a.milliseconds,c.M=a.months),i=new je(c),Ne(t)&&d(t,"_locale")&&(i._locale=t._locale),i}function Ge(t,e){var n=t&&parseFloat(t.replace(",","."));return(isNaN(n)?0:n)*e}function Je(t,e){var n={};return n.months=e.month()-t.month()+12*(e.year()-t.year()),t.clone().add(n.months,"M").isAfter(e)&&--n.months,n.milliseconds=+e-+t.clone().add(n.months,"M"),n}function Ze(t,e){return function(n,r){var i;return null===r||isNaN(+r)||(O(e,"moment()."+e+"(period, number) is deprecated. Please use moment()."+e+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),i=n,n=r,r=i),Ke(this,qe(n="string"==typeof n?+n:n,r),t),this}}function Ke(t,e,n,r){var a=e._milliseconds,o=$e(e._days),s=$e(e._months);t.isValid()&&(r=null==r||r,s&&Nt(t,Pt(t,"Month")+s*n),o&&It(t,"Date",Pt(t,"Date")+o*n),a&&t._d.setTime(t._d.valueOf()+a*n),r&&i.updateOffset(t,o||s))}qe.fn=je.prototype,qe.invalid=function(){return qe(NaN)};var Xe=Ze(1,"add"),Qe=Ze(-1,"subtract");function tn(t,e){var n,r,i=12*(e.year()-t.year())+(e.month()-t.month()),a=t.clone().add(i,"months");return e-a<0?(n=t.clone().add(i-1,"months"),r=(e-a)/(a-n)):(n=t.clone().add(i+1,"months"),r=(e-a)/(n-a)),-(i+r)||0}function en(t){var e;return void 0===t?this._locale._abbr:(null!=(e=he(t))&&(this._locale=e),this)}i.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",i.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var nn=C("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",function(t){return void 0===t?this.localeData():this.locale(t)});function rn(){return this._locale}var an=1e3,on=60*an,sn=60*on,ln=3506328*sn;function un(t,e){return(t%e+e)%e}function cn(t,e,n){return t<100&&t>=0?new Date(t+400,e,n)-ln:new Date(t,e,n).valueOf()}function dn(t,e,n){return t<100&&t>=0?Date.UTC(t+400,e,n)-ln:Date.UTC(t,e,n)}function fn(t,e){H(0,[t,t.length],0,e)}function hn(t,e,n,r,i){var a;return null==t?Bt(this,r,i).year:(a=Ut(t,r,i),e>a&&(e=a),function(t,e,n,r,i){var a=Ht(t,e,n,r,i),o=Yt(a.year,0,a.dayOfYear);return this.year(o.getUTCFullYear()),this.month(o.getUTCMonth()),this.date(o.getUTCDate()),this}.call(this,t,e,n,r,i))}H(0,["gg",2],0,function(){return this.weekYear()%100}),H(0,["GG",2],0,function(){return this.isoWeekYear()%100}),fn("gggg","weekYear"),fn("ggggg","weekYear"),fn("GGGG","isoWeekYear"),fn("GGGGG","isoWeekYear"),L("weekYear","gg"),L("isoWeekYear","GG"),$("weekYear",1),$("isoWeekYear",1),ct("G",at),ct("g",at),ct("GG",X,G),ct("gg",X,G),ct("GGGG",nt,Z),ct("gggg",nt,Z),ct("GGGGG",rt,K),ct("ggggg",rt,K),vt(["gggg","ggggg","GGGG","GGGGG"],function(t,e,n,r){e[r.substr(0,2)]=k(t)}),vt(["gg","GG"],function(t,e,n,r){e[r]=i.parseTwoDigitYear(t)}),H("Q",0,"Qo","quarter"),L("quarter","Q"),$("quarter",7),ct("Q",q),pt("Q",function(t,e){e[yt]=3*(k(t)-1)}),H("D",["DD",2],"Do","date"),L("date","D"),$("date",9),ct("D",X),ct("DD",X,G),ct("Do",function(t,e){return t?e._dayOfMonthOrdinalParse||e._ordinalParse:e._dayOfMonthOrdinalParseLenient}),pt(["D","DD"],bt),pt("Do",function(t,e){e[bt]=k(t.match(X)[0])});var pn=Tt("Date",!0);H("DDD",["DDDD",3],"DDDo","dayOfYear"),L("dayOfYear","DDD"),$("dayOfYear",4),ct("DDD",et),ct("DDDD",J),pt(["DDD","DDDD"],function(t,e,n){n._dayOfYear=k(t)}),H("m",["mm",2],0,"minute"),L("minute","m"),$("minute",14),ct("m",X),ct("mm",X,G),pt(["m","mm"],xt);var vn=Tt("Minutes",!1);H("s",["ss",2],0,"second"),L("second","s"),$("second",15),ct("s",X),ct("ss",X,G),pt(["s","ss"],wt);var gn,mn=Tt("Seconds",!1);for(H("S",0,0,function(){return~~(this.millisecond()/100)}),H(0,["SS",2],0,function(){return~~(this.millisecond()/10)}),H(0,["SSS",3],0,"millisecond"),H(0,["SSSS",4],0,function(){return 10*this.millisecond()}),H(0,["SSSSS",5],0,function(){return 100*this.millisecond()}),H(0,["SSSSSS",6],0,function(){return 1e3*this.millisecond()}),H(0,["SSSSSSS",7],0,function(){return 1e4*this.millisecond()}),H(0,["SSSSSSSS",8],0,function(){return 1e5*this.millisecond()}),H(0,["SSSSSSSSS",9],0,function(){return 1e6*this.millisecond()}),L("millisecond","ms"),$("millisecond",16),ct("S",et,q),ct("SS",et,G),ct("SSS",et,J),gn="SSSS";gn.length<=9;gn+="S")ct(gn,it);function yn(t,e){e[kt]=k(1e3*("0."+t))}for(gn="S";gn.length<=9;gn+="S")pt(gn,yn);var bn=Tt("Milliseconds",!1);H("z",0,0,"zoneAbbr"),H("zz",0,0,"zoneName");var _n=_.prototype;function xn(t){return t}_n.add=Xe,_n.calendar=function(t,e){var n=t||Pe(),r=Ye(n,this).startOf("day"),a=i.calendarFormat(this,r)||"sameElse",o=e&&(T(e[a])?e[a].call(this,n):e[a]);return this.format(o||this.localeData().calendar(a,this,Pe(n)))},_n.clone=function(){return new _(this)},_n.diff=function(t,e,n){var r,i,a;if(!this.isValid())return NaN;if(!(r=Ye(t,this)).isValid())return NaN;switch(i=6e4*(r.utcOffset()-this.utcOffset()),e=R(e)){case"year":a=tn(this,r)/12;break;case"month":a=tn(this,r);break;case"quarter":a=tn(this,r)/3;break;case"second":a=(this-r)/1e3;break;case"minute":a=(this-r)/6e4;break;case"hour":a=(this-r)/36e5;break;case"day":a=(this-r-i)/864e5;break;case"week":a=(this-r-i)/6048e5;break;default:a=this-r}return n?a:w(a)},_n.endOf=function(t){var e;if(void 0===(t=R(t))||"millisecond"===t||!this.isValid())return this;var n=this._isUTC?dn:cn;switch(t){case"year":e=n(this.year()+1,0,1)-1;break;case"quarter":e=n(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":e=n(this.year(),this.month()+1,1)-1;break;case"week":e=n(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":e=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":e=n(this.year(),this.month(),this.date()+1)-1;break;case"hour":e=this._d.valueOf(),e+=sn-un(e+(this._isUTC?0:this.utcOffset()*on),sn)-1;break;case"minute":e=this._d.valueOf(),e+=on-un(e,on)-1;break;case"second":e=this._d.valueOf(),e+=an-un(e,an)-1}return this._d.setTime(e),i.updateOffset(this,!0),this},_n.format=function(t){t||(t=this.isUtc()?i.defaultFormatUtc:i.defaultFormat);var e=B(this,t);return this.localeData().postformat(e)},_n.from=function(t,e){return this.isValid()&&(x(t)&&t.isValid()||Pe(t).isValid())?qe({to:this,from:t}).locale(this.locale()).humanize(!e):this.localeData().invalidDate()},_n.fromNow=function(t){return this.from(Pe(),t)},_n.to=function(t,e){return this.isValid()&&(x(t)&&t.isValid()||Pe(t).isValid())?qe({from:this,to:t}).locale(this.locale()).humanize(!e):this.localeData().invalidDate()},_n.toNow=function(t){return this.to(Pe(),t)},_n.get=function(t){return T(this[t=R(t)])?this[t]():this},_n.invalidAt=function(){return p(this).overflow},_n.isAfter=function(t,e){var n=x(t)?t:Pe(t);return!(!this.isValid()||!n.isValid())&&("millisecond"===(e=R(e)||"millisecond")?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(e).valueOf())},_n.isBefore=function(t,e){var n=x(t)?t:Pe(t);return!(!this.isValid()||!n.isValid())&&("millisecond"===(e=R(e)||"millisecond")?this.valueOf()<n.valueOf():this.clone().endOf(e).valueOf()<n.valueOf())},_n.isBetween=function(t,e,n,r){var i=x(t)?t:Pe(t),a=x(e)?e:Pe(e);return!!(this.isValid()&&i.isValid()&&a.isValid())&&(("("===(r=r||"()")[0]?this.isAfter(i,n):!this.isBefore(i,n))&&(")"===r[1]?this.isBefore(a,n):!this.isAfter(a,n)))},_n.isSame=function(t,e){var n,r=x(t)?t:Pe(t);return!(!this.isValid()||!r.isValid())&&("millisecond"===(e=R(e)||"millisecond")?this.valueOf()===r.valueOf():(n=r.valueOf(),this.clone().startOf(e).valueOf()<=n&&n<=this.clone().endOf(e).valueOf()))},_n.isSameOrAfter=function(t,e){return this.isSame(t,e)||this.isAfter(t,e)},_n.isSameOrBefore=function(t,e){return this.isSame(t,e)||this.isBefore(t,e)},_n.isValid=function(){return v(this)},_n.lang=nn,_n.locale=en,_n.localeData=rn,_n.max=Fe,_n.min=Ie,_n.parsingFlags=function(){return f({},p(this))},_n.set=function(t,e){if("object"===(void 0===t?"undefined":n(t)))for(var r=function(t){var e=[];for(var n in t)e.push({unit:n,priority:N[n]});return e.sort(function(t,e){return t.priority-e.priority}),e}(t=j(t)),i=0;i<r.length;i++)this[r[i].unit](t[r[i].unit]);else if(T(this[t=R(t)]))return this[t](e);return this},_n.startOf=function(t){var e;if(void 0===(t=R(t))||"millisecond"===t||!this.isValid())return this;var n=this._isUTC?dn:cn;switch(t){case"year":e=n(this.year(),0,1);break;case"quarter":e=n(this.year(),this.month()-this.month()%3,1);break;case"month":e=n(this.year(),this.month(),1);break;case"week":e=n(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":e=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":e=n(this.year(),this.month(),this.date());break;case"hour":e=this._d.valueOf(),e-=un(e+(this._isUTC?0:this.utcOffset()*on),sn);break;case"minute":e=this._d.valueOf(),e-=un(e,on);break;case"second":e=this._d.valueOf(),e-=un(e,an)}return this._d.setTime(e),i.updateOffset(this,!0),this},_n.subtract=Qe,_n.toArray=function(){var t=this;return[t.year(),t.month(),t.date(),t.hour(),t.minute(),t.second(),t.millisecond()]},_n.toObject=function(){var t=this;return{years:t.year(),months:t.month(),date:t.date(),hours:t.hours(),minutes:t.minutes(),seconds:t.seconds(),milliseconds:t.milliseconds()}},_n.toDate=function(){return new Date(this.valueOf())},_n.toISOString=function(t){if(!this.isValid())return null;var e=!0!==t,n=e?this.clone().utc():this;return n.year()<0||n.year()>9999?B(n,e?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):T(Date.prototype.toISOString)?e?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",B(n,"Z")):B(n,e?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},_n.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var t="moment",e="";this.isLocal()||(t=0===this.utcOffset()?"moment.utc":"moment.parseZone",e="Z");var n="["+t+'("]',r=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",i=e+'[")]';return this.format(n+r+"-MM-DD[T]HH:mm:ss.SSS"+i)},_n.toJSON=function(){return this.isValid()?this.toISOString():null},_n.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},_n.unix=function(){return Math.floor(this.valueOf()/1e3)},_n.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},_n.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},_n.year=Ot,_n.isLeapYear=function(){return Dt(this.year())},_n.weekYear=function(t){return hn.call(this,t,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},_n.isoWeekYear=function(t){return hn.call(this,t,this.isoWeek(),this.isoWeekday(),1,4)},_n.quarter=_n.quarters=function(t){return null==t?Math.ceil((this.month()+1)/3):this.month(3*(t-1)+this.month()%3)},_n.month=$t,_n.daysInMonth=function(){return Ft(this.year(),this.month())},_n.week=_n.weeks=function(t){var e=this.localeData().week(this);return null==t?e:this.add(7*(t-e),"d")},_n.isoWeek=_n.isoWeeks=function(t){var e=Bt(this,1,4).week;return null==t?e:this.add(7*(t-e),"d")},_n.weeksInYear=function(){var t=this.localeData()._week;return Ut(this.year(),t.dow,t.doy)},_n.isoWeeksInYear=function(){return Ut(this.year(),1,4)},_n.date=pn,_n.day=_n.days=function(t){if(!this.isValid())return null!=t?this:NaN;var e=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=t?(t=function(t,e){return"string"!=typeof t?t:isNaN(t)?"number"==typeof(t=e.weekdaysParse(t))?t:null:parseInt(t,10)}(t,this.localeData()),this.add(t-e,"d")):e},_n.weekday=function(t){if(!this.isValid())return null!=t?this:NaN;var e=(this.day()+7-this.localeData()._week.dow)%7;return null==t?e:this.add(t-e,"d")},_n.isoWeekday=function(t){if(!this.isValid())return null!=t?this:NaN;if(null!=t){var e=function(t,e){return"string"==typeof t?e.weekdaysParse(t)%7||7:isNaN(t)?null:t}(t,this.localeData());return this.day(this.day()%7?e:e-7)}return this.day()||7},_n.dayOfYear=function(t){var e=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==t?e:this.add(t-e,"d")},_n.hour=_n.hours=ae,_n.minute=_n.minutes=vn,_n.second=_n.seconds=mn,_n.millisecond=_n.milliseconds=bn,_n.utcOffset=function(t,e,n){var r,a=this._offset||0;if(!this.isValid())return null!=t?this:NaN;if(null!=t){if("string"==typeof t){if(null===(t=We(st,t)))return this}else Math.abs(t)<16&&!n&&(t*=60);return!this._isUTC&&e&&(r=Ve(this)),this._offset=t,this._isUTC=!0,null!=r&&this.add(r,"m"),a!==t&&(!e||this._changeInProgress?Ke(this,qe(t-a,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,i.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?a:Ve(this)},_n.utc=function(t){return this.utcOffset(0,t)},_n.local=function(t){return this._isUTC&&(this.utcOffset(0,t),this._isUTC=!1,t&&this.subtract(Ve(this),"m")),this},_n.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var t=We(ot,this._i);null!=t?this.utcOffset(t):this.utcOffset(0,!0)}return this},_n.hasAlignedHourOffset=function(t){return!!this.isValid()&&(t=t?Pe(t).utcOffset():0,(this.utcOffset()-t)%60==0)},_n.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},_n.isLocal=function(){return!!this.isValid()&&!this._isUTC},_n.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},_n.isUtc=He,_n.isUTC=He,_n.zoneAbbr=function(){return this._isUTC?"UTC":""},_n.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},_n.dates=C("dates accessor is deprecated. Use date instead.",pn),_n.months=C("months accessor is deprecated. Use month instead",$t),_n.years=C("years accessor is deprecated. Use year instead",Ot),_n.zone=C("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",function(t,e){return null!=t?("string"!=typeof t&&(t=-t),this.utcOffset(t,e),this):-this.utcOffset()}),_n.isDSTShifted=C("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",function(){if(!s(this._isDSTShifted))return this._isDSTShifted;var t={};if(y(t,this),(t=Oe(t))._a){var e=t._isUTC?h(t._a):Pe(t._a);this._isDSTShifted=this.isValid()&&S(t._a,e.toArray())>0}else this._isDSTShifted=!1;return this._isDSTShifted});var wn=I.prototype;function kn(t,e,n,r){var i=he(),a=h().set(r,e);return i[n](a,t)}function Sn(t,e,n){if(l(t)&&(e=t,t=void 0),t=t||"",null!=e)return kn(t,e,n,"month");var r,i=[];for(r=0;r<12;r++)i[r]=kn(t,r,n,"month");return i}function Mn(t,e,n,r){"boolean"==typeof t?(l(e)&&(n=e,e=void 0),e=e||""):(n=e=t,t=!1,l(e)&&(n=e,e=void 0),e=e||"");var i,a=he(),o=t?a._week.dow:0;if(null!=n)return kn(e,(n+o)%7,r,"day");var s=[];for(i=0;i<7;i++)s[i]=kn(e,(i+o)%7,r,"day");return s}wn.calendar=function(t,e,n){var r=this._calendar[t]||this._calendar.sameElse;return T(r)?r.call(e,n):r},wn.longDateFormat=function(t){var e=this._longDateFormat[t],n=this._longDateFormat[t.toUpperCase()];return e||!n?e:(this._longDateFormat[t]=n.replace(/MMMM|MM|DD|dddd/g,function(t){return t.slice(1)}),this._longDateFormat[t])},wn.invalidDate=function(){return this._invalidDate},wn.ordinal=function(t){return this._ordinal.replace("%d",t)},wn.preparse=xn,wn.postformat=xn,wn.relativeTime=function(t,e,n,r){var i=this._relativeTime[n];return T(i)?i(t,e,n,r):i.replace(/%d/i,t)},wn.pastFuture=function(t,e){var n=this._relativeTime[t>0?"future":"past"];return T(n)?n(e):n.replace(/%s/i,e)},wn.set=function(t){var e,n;for(n in t)T(e=t[n])?this[n]=e:this["_"+n]=e;this._config=t,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},wn.months=function(t,e){return t?a(this._months)?this._months[t.month()]:this._months[(this._months.isFormat||Lt).test(e)?"format":"standalone"][t.month()]:a(this._months)?this._months:this._months.standalone},wn.monthsShort=function(t,e){return t?a(this._monthsShort)?this._monthsShort[t.month()]:this._monthsShort[Lt.test(e)?"format":"standalone"][t.month()]:a(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},wn.monthsParse=function(t,e,n){var r,i,a;if(this._monthsParseExact)return function(t,e,n){var r,i,a,o=t.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],r=0;r<12;++r)a=h([2e3,r]),this._shortMonthsParse[r]=this.monthsShort(a,"").toLocaleLowerCase(),this._longMonthsParse[r]=this.months(a,"").toLocaleLowerCase();return n?"MMM"===e?-1!==(i=At.call(this._shortMonthsParse,o))?i:null:-1!==(i=At.call(this._longMonthsParse,o))?i:null:"MMM"===e?-1!==(i=At.call(this._shortMonthsParse,o))?i:-1!==(i=At.call(this._longMonthsParse,o))?i:null:-1!==(i=At.call(this._longMonthsParse,o))?i:-1!==(i=At.call(this._shortMonthsParse,o))?i:null}.call(this,t,e,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),r=0;r<12;r++){if(i=h([2e3,r]),n&&!this._longMonthsParse[r]&&(this._longMonthsParse[r]=new RegExp("^"+this.months(i,"").replace(".","")+"$","i"),this._shortMonthsParse[r]=new RegExp("^"+this.monthsShort(i,"").replace(".","")+"$","i")),n||this._monthsParse[r]||(a="^"+this.months(i,"")+"|^"+this.monthsShort(i,""),this._monthsParse[r]=new RegExp(a.replace(".",""),"i")),n&&"MMMM"===e&&this._longMonthsParse[r].test(t))return r;if(n&&"MMM"===e&&this._shortMonthsParse[r].test(t))return r;if(!n&&this._monthsParse[r].test(t))return r}},wn.monthsRegex=function(t){return this._monthsParseExact?(d(this,"_monthsRegex")||Wt.call(this),t?this._monthsStrictRegex:this._monthsRegex):(d(this,"_monthsRegex")||(this._monthsRegex=zt),this._monthsStrictRegex&&t?this._monthsStrictRegex:this._monthsRegex)},wn.monthsShortRegex=function(t){return this._monthsParseExact?(d(this,"_monthsRegex")||Wt.call(this),t?this._monthsShortStrictRegex:this._monthsShortRegex):(d(this,"_monthsShortRegex")||(this._monthsShortRegex=Et),this._monthsShortStrictRegex&&t?this._monthsShortStrictRegex:this._monthsShortRegex)},wn.week=function(t){return Bt(t,this._week.dow,this._week.doy).week},wn.firstDayOfYear=function(){return this._week.doy},wn.firstDayOfWeek=function(){return this._week.dow},wn.weekdays=function(t,e){var n=a(this._weekdays)?this._weekdays:this._weekdays[t&&!0!==t&&this._weekdays.isFormat.test(e)?"format":"standalone"];return!0===t?qt(n,this._week.dow):t?n[t.day()]:n},wn.weekdaysMin=function(t){return!0===t?qt(this._weekdaysMin,this._week.dow):t?this._weekdaysMin[t.day()]:this._weekdaysMin},wn.weekdaysShort=function(t){return!0===t?qt(this._weekdaysShort,this._week.dow):t?this._weekdaysShort[t.day()]:this._weekdaysShort},wn.weekdaysParse=function(t,e,n){var r,i,a;if(this._weekdaysParseExact)return function(t,e,n){var r,i,a,o=t.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],r=0;r<7;++r)a=h([2e3,1]).day(r),this._minWeekdaysParse[r]=this.weekdaysMin(a,"").toLocaleLowerCase(),this._shortWeekdaysParse[r]=this.weekdaysShort(a,"").toLocaleLowerCase(),this._weekdaysParse[r]=this.weekdays(a,"").toLocaleLowerCase();return n?"dddd"===e?-1!==(i=At.call(this._weekdaysParse,o))?i:null:"ddd"===e?-1!==(i=At.call(this._shortWeekdaysParse,o))?i:null:-1!==(i=At.call(this._minWeekdaysParse,o))?i:null:"dddd"===e?-1!==(i=At.call(this._weekdaysParse,o))?i:-1!==(i=At.call(this._shortWeekdaysParse,o))?i:-1!==(i=At.call(this._minWeekdaysParse,o))?i:null:"ddd"===e?-1!==(i=At.call(this._shortWeekdaysParse,o))?i:-1!==(i=At.call(this._weekdaysParse,o))?i:-1!==(i=At.call(this._minWeekdaysParse,o))?i:null:-1!==(i=At.call(this._minWeekdaysParse,o))?i:-1!==(i=At.call(this._weekdaysParse,o))?i:-1!==(i=At.call(this._shortWeekdaysParse,o))?i:null}.call(this,t,e,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),r=0;r<7;r++){if(i=h([2e3,1]).day(r),n&&!this._fullWeekdaysParse[r]&&(this._fullWeekdaysParse[r]=new RegExp("^"+this.weekdays(i,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[r]=new RegExp("^"+this.weekdaysShort(i,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[r]=new RegExp("^"+this.weekdaysMin(i,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[r]||(a="^"+this.weekdays(i,"")+"|^"+this.weekdaysShort(i,"")+"|^"+this.weekdaysMin(i,""),this._weekdaysParse[r]=new RegExp(a.replace(".",""),"i")),n&&"dddd"===e&&this._fullWeekdaysParse[r].test(t))return r;if(n&&"ddd"===e&&this._shortWeekdaysParse[r].test(t))return r;if(n&&"dd"===e&&this._minWeekdaysParse[r].test(t))return r;if(!n&&this._weekdaysParse[r].test(t))return r}},wn.weekdaysRegex=function(t){return this._weekdaysParseExact?(d(this,"_weekdaysRegex")||te.call(this),t?this._weekdaysStrictRegex:this._weekdaysRegex):(d(this,"_weekdaysRegex")||(this._weekdaysRegex=Kt),this._weekdaysStrictRegex&&t?this._weekdaysStrictRegex:this._weekdaysRegex)},wn.weekdaysShortRegex=function(t){return this._weekdaysParseExact?(d(this,"_weekdaysRegex")||te.call(this),t?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(d(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=Xt),this._weekdaysShortStrictRegex&&t?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},wn.weekdaysMinRegex=function(t){return this._weekdaysParseExact?(d(this,"_weekdaysRegex")||te.call(this),t?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(d(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=Qt),this._weekdaysMinStrictRegex&&t?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},wn.isPM=function(t){return"p"===(t+"").toLowerCase().charAt(0)},wn.meridiem=function(t,e,n){return t>11?n?"pm":"PM":n?"am":"AM"},de("en",{dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(t){var e=t%10,n=1===k(t%100/10)?"th":1===e?"st":2===e?"nd":3===e?"rd":"th";return t+n}}),i.lang=C("moment.lang is deprecated. Use moment.locale instead.",de),i.langData=C("moment.langData is deprecated. Use moment.localeData instead.",he);var Cn=Math.abs;function Dn(t,e,n,r){var i=qe(e,n);return t._milliseconds+=r*i._milliseconds,t._days+=r*i._days,t._months+=r*i._months,t._bubble()}function An(t){return t<0?Math.floor(t):Math.ceil(t)}function On(t){return 4800*t/146097}function Tn(t){return 146097*t/4800}function Pn(t){return function(){return this.as(t)}}var In=Pn("ms"),Fn=Pn("s"),Ln=Pn("m"),Rn=Pn("h"),jn=Pn("d"),Nn=Pn("w"),$n=Pn("M"),En=Pn("Q"),zn=Pn("y");function Wn(t){return function(){return this.isValid()?this._data[t]:NaN}}var Yn=Wn("milliseconds"),Vn=Wn("seconds"),Hn=Wn("minutes"),Bn=Wn("hours"),Un=Wn("days"),qn=Wn("months"),Gn=Wn("years"),Jn=Math.round,Zn={ss:44,s:45,m:45,h:22,d:26,M:11},Kn=Math.abs;function Xn(t){return(t>0)-(t<0)||+t}function Qn(){if(!this.isValid())return this.localeData().invalidDate();var t,e,n=Kn(this._milliseconds)/1e3,r=Kn(this._days),i=Kn(this._months);t=w(n/60),e=w(t/60),n%=60,t%=60;var a=w(i/12),o=i%=12,s=r,l=e,u=t,c=n?n.toFixed(3).replace(/\.?0+$/,""):"",d=this.asSeconds();if(!d)return"P0D";var f=d<0?"-":"",h=Xn(this._months)!==Xn(d)?"-":"",p=Xn(this._days)!==Xn(d)?"-":"",v=Xn(this._milliseconds)!==Xn(d)?"-":"";return f+"P"+(a?h+a+"Y":"")+(o?h+o+"M":"")+(s?p+s+"D":"")+(l||u||c?"T":"")+(l?v+l+"H":"")+(u?v+u+"M":"")+(c?v+c+"S":"")}var tr=je.prototype;return tr.isValid=function(){return this._isValid},tr.abs=function(){var t=this._data;return this._milliseconds=Cn(this._milliseconds),this._days=Cn(this._days),this._months=Cn(this._months),t.milliseconds=Cn(t.milliseconds),t.seconds=Cn(t.seconds),t.minutes=Cn(t.minutes),t.hours=Cn(t.hours),t.months=Cn(t.months),t.years=Cn(t.years),this},tr.add=function(t,e){return Dn(this,t,e,1)},tr.subtract=function(t,e){return Dn(this,t,e,-1)},tr.as=function(t){if(!this.isValid())return NaN;var e,n,r=this._milliseconds;if("month"===(t=R(t))||"quarter"===t||"year"===t)switch(e=this._days+r/864e5,n=this._months+On(e),t){case"month":return n;case"quarter":return n/3;case"year":return n/12}else switch(e=this._days+Math.round(Tn(this._months)),t){case"week":return e/7+r/6048e5;case"day":return e+r/864e5;case"hour":return 24*e+r/36e5;case"minute":return 1440*e+r/6e4;case"second":return 86400*e+r/1e3;case"millisecond":return Math.floor(864e5*e)+r;default:throw new Error("Unknown unit "+t)}},tr.asMilliseconds=In,tr.asSeconds=Fn,tr.asMinutes=Ln,tr.asHours=Rn,tr.asDays=jn,tr.asWeeks=Nn,tr.asMonths=$n,tr.asQuarters=En,tr.asYears=zn,tr.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*k(this._months/12):NaN},tr._bubble=function(){var t,e,n,r,i,a=this._milliseconds,o=this._days,s=this._months,l=this._data;return a>=0&&o>=0&&s>=0||a<=0&&o<=0&&s<=0||(a+=864e5*An(Tn(s)+o),o=0,s=0),l.milliseconds=a%1e3,t=w(a/1e3),l.seconds=t%60,e=w(t/60),l.minutes=e%60,n=w(e/60),l.hours=n%24,o+=w(n/24),i=w(On(o)),s+=i,o-=An(Tn(i)),r=w(s/12),s%=12,l.days=o,l.months=s,l.years=r,this},tr.clone=function(){return qe(this)},tr.get=function(t){return t=R(t),this.isValid()?this[t+"s"]():NaN},tr.milliseconds=Yn,tr.seconds=Vn,tr.minutes=Hn,tr.hours=Bn,tr.days=Un,tr.weeks=function(){return w(this.days()/7)},tr.months=qn,tr.years=Gn,tr.humanize=function(t){if(!this.isValid())return this.localeData().invalidDate();var e=this.localeData(),n=function(t,e,n){var r=qe(t).abs(),i=Jn(r.as("s")),a=Jn(r.as("m")),o=Jn(r.as("h")),s=Jn(r.as("d")),l=Jn(r.as("M")),u=Jn(r.as("y")),c=i<=Zn.ss&&["s",i]||i<Zn.s&&["ss",i]||a<=1&&["m"]||a<Zn.m&&["mm",a]||o<=1&&["h"]||o<Zn.h&&["hh",o]||s<=1&&["d"]||s<Zn.d&&["dd",s]||l<=1&&["M"]||l<Zn.M&&["MM",l]||u<=1&&["y"]||["yy",u];return c[2]=e,c[3]=+t>0,c[4]=n,function(t,e,n,r,i){return i.relativeTime(e||1,!!n,t,r)}.apply(null,c)}(this,!t,e);return t&&(n=e.pastFuture(+this,n)),e.postformat(n)},tr.toISOString=Qn,tr.toString=Qn,tr.toJSON=Qn,tr.locale=en,tr.localeData=rn,tr.toIsoString=C("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",Qn),tr.lang=nn,H("X",0,0,"unix"),H("x",0,0,"valueOf"),ct("x",at),ct("X",/[+-]?\d+(\.\d{1,3})?/),pt("X",function(t,e,n){n._d=new Date(1e3*parseFloat(t,10))}),pt("x",function(t,e,n){n._d=new Date(k(t))}),i.version="2.24.0",e=Pe,i.fn=_n,i.min=function(){return Le("isBefore",[].slice.call(arguments,0))},i.max=function(){return Le("isAfter",[].slice.call(arguments,0))},i.now=function(){return Date.now?Date.now():+new Date},i.utc=h,i.unix=function(t){return Pe(1e3*t)},i.months=function(t,e){return Sn(t,e,"months")},i.isDate=u,i.locale=de,i.invalid=g,i.duration=qe,i.isMoment=x,i.weekdays=function(t,e,n){return Mn(t,e,n,"weekdays")},i.parseZone=function(){return Pe.apply(null,arguments).parseZone()},i.localeData=he,i.isDuration=Ne,i.monthsShort=function(t,e){return Sn(t,e,"monthsShort")},i.weekdaysMin=function(t,e,n){return Mn(t,e,n,"weekdaysMin")},i.defineLocale=fe,i.updateLocale=function(t,e){if(null!=e){var n,r,i=oe;null!=(r=ce(t))&&(i=r._config),e=P(i,e),(n=new I(e)).parentLocale=se[t],se[t]=n,de(t)}else null!=se[t]&&(null!=se[t].parentLocale?se[t]=se[t].parentLocale:null!=se[t]&&delete se[t]);return se[t]},i.locales=function(){return D(se)},i.weekdaysShort=function(t,e,n){return Mn(t,e,n,"weekdaysShort")},i.normalizeUnits=R,i.relativeTimeRounding=function(t){return void 0===t?Jn:"function"==typeof t&&(Jn=t,!0)},i.relativeTimeThreshold=function(t,e){return void 0!==Zn[t]&&(void 0===e?Zn[t]:(Zn[t]=e,"s"===t&&(Zn.ss=e-1),!0))},i.calendarFormat=function(t,e){var n=t.diff(e,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},i.prototype=_n,i.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},i}()});Sp="function"==typeof Sp?Sp:window.moment;var Mp=Number.MIN_SAFE_INTEGER||-9007199254740991,Cp=Number.MAX_SAFE_INTEGER||9007199254740991,Dp={millisecond:{common:!0,size:1,steps:[1,2,5,10,20,50,100,250,500]},second:{common:!0,size:1e3,steps:[1,2,5,10,15,30]},minute:{common:!0,size:6e4,steps:[1,2,5,10,15,30]},hour:{common:!0,size:36e5,steps:[1,2,3,6,12]},day:{common:!0,size:864e5,steps:[1,2,5]},week:{common:!1,size:6048e5,steps:[1,2,3,4]},month:{common:!0,size:2628e6,steps:[1,2,3]},quarter:{common:!1,size:7884e6,steps:[1,2,3,4]},year:{common:!0,size:3154e7}},Ap=Object.keys(Dp);function Op(t,e){return t-e}function Tp(t){var e,n,r,i={},a=[];for(e=0,n=t.length;e<n;++e)i[r=t[e]]||(i[r]=!0,a.push(r));return a}function Pp(t,e,n,r){var i=function(t,e,n){for(var r,i,a,o=0,s=t.length-1;o>=0&&o<=s;){if(i=t[(r=o+s>>1)-1]||null,a=t[r],!i)return{lo:null,hi:a};if(a[e]<n)o=r+1;else{if(!(i[e]>n))return{lo:i,hi:a};s=r-1}}return{lo:a,hi:null}}(t,e,n),a=i.lo?i.hi?i.lo:t[t.length-2]:t[0],o=i.lo?i.hi?i.hi:t[t.length-1]:t[1],s=o[e]-a[e],l=s?(n-a[e])/s:0,u=(o[r]-a[r])*l;return a[r]+u}function Ip(t,e){var n=e.parser,r=e.parser||e.format;return"function"==typeof n?n(t):"string"==typeof t&&"string"==typeof r?Sp(t,r):(t instanceof Sp||(t=Sp(t)),t.isValid()?t:"function"==typeof r?r(t):t)}function Fp(t,e){if(Pf.isNullOrUndef(t))return null;var n=e.options.time,r=Ip(e.getRightValue(t),n);return r.isValid()?(n.round&&r.startOf(n.round),r.valueOf()):null}function Lp(t){for(var e=Ap.indexOf(t)+1,n=Ap.length;e<n;++e)if(Dp[Ap[e]].common)return Ap[e]}function Rp(t,e,n,r){var i,a=r.time,o=a.unit||function(t,e,n,r){var i,a,o,s=Ap.length;for(i=Ap.indexOf(t);i<s-1;++i)if(o=(a=Dp[Ap[i]]).steps?a.steps[a.steps.length-1]:Cp,a.common&&Math.ceil((n-e)/(o*a.size))<=r)return Ap[i];return Ap[s-1]}(a.minUnit,t,e,n),s=Lp(o),l=Pf.valueOrDefault(a.stepSize,a.unitStepSize),u="week"===o&&a.isoWeekday,c=r.ticks.major.enabled,d=Dp[o],f=Sp(t),h=Sp(e),p=[];for(l||(l=function(t,e,n,r){var i,a,o,s=e-t,l=Dp[n],u=l.size,c=l.steps;if(!c)return Math.ceil(s/(r*u));for(i=0,a=c.length;i<a&&(o=c[i],!(Math.ceil(s/(u*o))<=r));++i);return o}(t,e,o,n)),u&&(f=f.isoWeekday(u),h=h.isoWeekday(u)),f=f.startOf(u?"day":o),(h=h.startOf(u?"day":o))<e&&h.add(1,o),i=Sp(f),c&&s&&!u&&!a.round&&(i.startOf(s),i.add(~~((f-i)/(d.size*l))*l,o));i<h;i.add(l,o))p.push(+i);return p.push(+i),p}Rf._set("bar",{hover:{mode:"label"},scales:{xAxes:[{type:"category",categoryPercentage:.8,barPercentage:.9,offset:!0,gridLines:{offsetGridLines:!0}}],yAxes:[{type:"linear"}]}}),Rf._set("horizontalBar",{hover:{mode:"index",axis:"y"},scales:{xAxes:[{type:"linear",position:"bottom"}],yAxes:[{position:"left",type:"category",categoryPercentage:.8,barPercentage:.9,offset:!0,gridLines:{offsetGridLines:!0}}]},elements:{rectangle:{borderSkipped:"left"}},tooltips:{callbacks:{title:function(t,e){var n="";return t.length>0&&(t[0].yLabel?n=t[0].yLabel:e.labels.length>0&&t[0].index<e.labels.length&&(n=e.labels[t[0].index])),n},label:function(t,e){return(e.datasets[t.datasetIndex].label||"")+": "+t.xLabel}},mode:"index",axis:"y"}});Rf._set("bubble",{hover:{mode:"single"},scales:{xAxes:[{type:"linear",position:"bottom",id:"x-axis-0"}],yAxes:[{type:"linear",position:"left",id:"y-axis-0"}]},tooltips:{callbacks:{title:function(){return""},label:function(t,e){var n=e.datasets[t.datasetIndex].label||"",r=e.datasets[t.datasetIndex].data[t.index];return n+": ("+t.xLabel+", "+t.yLabel+", "+r.r+")"}}}});Rf._set("doughnut",{animation:{animateRotate:!0,animateScale:!1},hover:{mode:"single"},legendCallback:function(t){var e=[];e.push('<ul class="'+t.id+'-legend">');var n=t.data,r=n.datasets,i=n.labels;if(r.length)for(var a=0;a<r[0].data.length;++a)e.push('<li><span style="background-color:'+r[0].backgroundColor[a]+'"></span>'),i[a]&&e.push(i[a]),e.push("</li>");return e.push("</ul>"),e.join("")},legend:{labels:{generateLabels:function(t){var e=t.data;return e.labels.length&&e.datasets.length?e.labels.map(function(n,r){var i=t.getDatasetMeta(0),a=e.datasets[0],o=i.data[r],s=o&&o.custom||{},l=Pf.valueAtIndexOrDefault,u=t.options.elements.arc;return{text:n,fillStyle:s.backgroundColor?s.backgroundColor:l(a.backgroundColor,r,u.backgroundColor),strokeStyle:s.borderColor?s.borderColor:l(a.borderColor,r,u.borderColor),lineWidth:s.borderWidth?s.borderWidth:l(a.borderWidth,r,u.borderWidth),hidden:isNaN(a.data[r])||i.data[r].hidden,index:r}}):[]}},onClick:function(t,e){var n,r,i,a=e.index,o=this.chart;for(n=0,r=(o.data.datasets||[]).length;n<r;++n)(i=o.getDatasetMeta(n)).data[a]&&(i.data[a].hidden=!i.data[a].hidden);o.update()}},cutoutPercentage:50,rotation:-.5*Math.PI,circumference:2*Math.PI,tooltips:{callbacks:{title:function(){return""},label:function(t,e){var n=e.labels[t.index],r=": "+e.datasets[t.datasetIndex].data[t.index];return Pf.isArray(n)?(n=n.slice())[0]+=r:n+=r,n}}}}),Rf._set("pie",Pf.clone(Rf.doughnut)),Rf._set("pie",{cutoutPercentage:0});Rf._set("line",{showLines:!0,spanGaps:!1,hover:{mode:"label"},scales:{xAxes:[{type:"category",id:"x-axis-0"}],yAxes:[{type:"linear",id:"y-axis-0"}]}});Rf._set("polarArea",{scale:{type:"radialLinear",angleLines:{display:!1},gridLines:{circular:!0},pointLabels:{display:!1},ticks:{beginAtZero:!0}},animation:{animateRotate:!0,animateScale:!0},startAngle:-.5*Math.PI,legendCallback:function(t){var e=[];e.push('<ul class="'+t.id+'-legend">');var n=t.data,r=n.datasets,i=n.labels;if(r.length)for(var a=0;a<r[0].data.length;++a)e.push('<li><span style="background-color:'+r[0].backgroundColor[a]+'"></span>'),i[a]&&e.push(i[a]),e.push("</li>");return e.push("</ul>"),e.join("")},legend:{labels:{generateLabels:function(t){var e=t.data;return e.labels.length&&e.datasets.length?e.labels.map(function(n,r){var i=t.getDatasetMeta(0),a=e.datasets[0],o=i.data[r].custom||{},s=Pf.valueAtIndexOrDefault,l=t.options.elements.arc;return{text:n,fillStyle:o.backgroundColor?o.backgroundColor:s(a.backgroundColor,r,l.backgroundColor),strokeStyle:o.borderColor?o.borderColor:s(a.borderColor,r,l.borderColor),lineWidth:o.borderWidth?o.borderWidth:s(a.borderWidth,r,l.borderWidth),hidden:isNaN(a.data[r])||i.data[r].hidden,index:r}}):[]}},onClick:function(t,e){var n,r,i,a=e.index,o=this.chart;for(n=0,r=(o.data.datasets||[]).length;n<r;++n)(i=o.getDatasetMeta(n)).data[a].hidden=!i.data[a].hidden;o.update()}},tooltips:{callbacks:{title:function(){return""},label:function(t,e){return e.labels[t.index]+": "+t.yLabel}}}});Rf._set("radar",{scale:{type:"radialLinear"},elements:{line:{tension:0}}});Rf._set("scatter",{hover:{mode:"single"},scales:{xAxes:[{id:"x-axis-1",type:"linear",position:"bottom"}],yAxes:[{id:"y-axis-1",type:"linear",position:"left"}]},showLines:!1,tooltips:{callbacks:{title:function(){return""},label:function(t){return"("+t.xLabel+", "+t.yLabel+")"}}}});Rf._set("global",{plugins:{filler:{propagate:!0}}});var jp={dataset:function(t){var e=t.fill,n=t.chart,r=n.getDatasetMeta(e),i=r&&n.isDatasetVisible(e)&&r.dataset._children||[],a=i.length||0;return a?function(t,e){return e<a&&i[e]._view||null}:null},boundary:function(t){var e=t.boundary,n=e?e.x:null,r=e?e.y:null;return function(t){return{x:null===n?t.x:n,y:null===r?t.y:r}}}};function Np(t,e,n){var r,i=t._model||{},a=i.fill;if(void 0===a&&(a=!!i.backgroundColor),!1===a||null===a)return!1;if(!0===a)return"origin";if(r=parseFloat(a,10),isFinite(r)&&Math.floor(r)===r)return"-"!==a[0]&&"+"!==a[0]||(r=e+r),!(r===e||r<0||r>=n)&&r;switch(a){case"bottom":return"start";case"top":return"end";case"zero":return"origin";case"origin":case"start":case"end":return a;default:return!1}}function $p(t){var e,n=t.el._model||{},r=t.el._scale||{},i=t.fill,a=null;if(isFinite(i))return null;if("start"===i?a=void 0===n.scaleBottom?r.bottom:n.scaleBottom:"end"===i?a=void 0===n.scaleTop?r.top:n.scaleTop:void 0!==n.scaleZero?a=n.scaleZero:r.getBasePosition?a=r.getBasePosition():r.getBasePixel&&(a=r.getBasePixel()),void 0!==a&&null!==a){if(void 0!==a.x&&void 0!==a.y)return a;if("number"==typeof a&&isFinite(a))return{x:(e=r.isHorizontal())?a:null,y:e?null:a}}return null}function Ep(t,e,n){var r,i=t[e].fill,a=[e];if(!n)return i;for(;!1!==i&&-1===a.indexOf(i);){if(!isFinite(i))return i;if(!(r=t[i]))return!1;if(r.visible)return i;a.push(i),i=r.fill}return!1}function zp(t){var e=t.fill,n="dataset";return!1===e?null:(isFinite(e)||(n="boundary"),jp[n](t))}function Wp(t){return t&&!t.skip}function Yp(t,e,n,r,i){var a;if(r&&i){for(t.moveTo(e[0].x,e[0].y),a=1;a<r;++a)Pf.canvas.lineTo(t,e[a-1],e[a]);for(t.lineTo(n[i-1].x,n[i-1].y),a=i-1;a>0;--a)Pf.canvas.lineTo(t,n[a],n[a-1],!0)}}var Vp={id:"filler",afterDatasetsUpdate:function(t,e){var n,r,i,a,o=(t.data.datasets||[]).length,s=e.propagate,l=[];for(r=0;r<o;++r)a=null,(i=(n=t.getDatasetMeta(r)).dataset)&&i._model&&i instanceof Wh.Line&&(a={visible:t.isDatasetVisible(r),fill:Np(i,r,o),chart:t,el:i}),n.$filler=a,l.push(a);for(r=0;r<o;++r)(a=l[r])&&(a.fill=Ep(l,r,s),a.boundary=$p(a),a.mapper=zp(a))},beforeDatasetDraw:function(t,e){var n=e.meta.$filler;if(n){var r=t.ctx,i=n.el,a=i._view,o=i._children||[],s=n.mapper,l=a.backgroundColor||Rf.global.defaultColor;s&&l&&o.length&&(Pf.canvas.clipArea(r,t.chartArea),function(t,e,n,r,i,a){var o,s,l,u,c,d,f,h=e.length,p=r.spanGaps,v=[],g=[],m=0,y=0;for(t.beginPath(),o=0,s=h+!!a;o<s;++o)c=n(u=e[l=o%h]._view,l,r),d=Wp(u),f=Wp(c),d&&f?(m=v.push(u),y=g.push(c)):m&&y&&(p?(d&&v.push(u),f&&g.push(c)):(Yp(t,v,g,m,y),m=y=0,v=[],g=[]));Yp(t,v,g,m,y),t.closePath(),t.fillStyle=i,t.fill()}(r,o,s,a,l,i._loop),Pf.canvas.unclipArea(r))}}},Hp=Pf.noop;function Bp(t,e){return t.usePointStyle?e*Math.SQRT2:t.boxWidth}Rf._set("global",{legend:{display:!0,position:"top",fullWidth:!0,reverse:!1,weight:1e3,onClick:function(t,e){var n=e.datasetIndex,r=this.chart,i=r.getDatasetMeta(n);i.hidden=null===i.hidden?!r.data.datasets[n].hidden:null,r.update()},onHover:null,labels:{boxWidth:40,padding:10,generateLabels:function(t){var e=t.data;return Pf.isArray(e.datasets)?e.datasets.map(function(e,n){return{text:e.label,fillStyle:Pf.isArray(e.backgroundColor)?e.backgroundColor[0]:e.backgroundColor,hidden:!t.isDatasetVisible(n),lineCap:e.borderCapStyle,lineDash:e.borderDash,lineDashOffset:e.borderDashOffset,lineJoin:e.borderJoinStyle,lineWidth:e.borderWidth,strokeStyle:e.borderColor,pointStyle:e.pointStyle,datasetIndex:n}},this):[]}}},legendCallback:function(t){var e=[];e.push('<ul class="'+t.id+'-legend">');for(var n=0;n<t.data.datasets.length;n++)e.push('<li><span style="background-color:'+t.data.datasets[n].backgroundColor+'"></span>'),t.data.datasets[n].label&&e.push(t.data.datasets[n].label),e.push("</li>");return e.push("</ul>"),e.join("")}});var Up=Th.extend({initialize:function(t){Pf.extend(this,t),this.legendHitBoxes=[],this.doughnutMode=!1},beforeUpdate:Hp,update:function(t,e,n){var r=this;return r.beforeUpdate(),r.maxWidth=t,r.maxHeight=e,r.margins=n,r.beforeSetDimensions(),r.setDimensions(),r.afterSetDimensions(),r.beforeBuildLabels(),r.buildLabels(),r.afterBuildLabels(),r.beforeFit(),r.fit(),r.afterFit(),r.afterUpdate(),r.minSize},afterUpdate:Hp,beforeSetDimensions:Hp,setDimensions:function(){var t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=0,t.right=t.width):(t.height=t.maxHeight,t.top=0,t.bottom=t.height),t.paddingLeft=0,t.paddingTop=0,t.paddingRight=0,t.paddingBottom=0,t.minSize={width:0,height:0}},afterSetDimensions:Hp,beforeBuildLabels:Hp,buildLabels:function(){var t=this,e=t.options.labels||{},n=Pf.callback(e.generateLabels,[t.chart],t)||[];e.filter&&(n=n.filter(function(n){return e.filter(n,t.chart.data)})),t.options.reverse&&n.reverse(),t.legendItems=n},afterBuildLabels:Hp,beforeFit:Hp,fit:function(){var t=this,e=t.options,n=e.labels,r=e.display,i=t.ctx,a=Rf.global,o=Pf.valueOrDefault,s=o(n.fontSize,a.defaultFontSize),l=o(n.fontStyle,a.defaultFontStyle),u=o(n.fontFamily,a.defaultFontFamily),c=Pf.fontString(s,l,u),d=t.legendHitBoxes=[],f=t.minSize,h=t.isHorizontal();if(h?(f.width=t.maxWidth,f.height=r?10:0):(f.width=r?10:0,f.height=t.maxHeight),r)if(i.font=c,h){var p=t.lineWidths=[0],v=t.legendItems.length?s+n.padding:0;i.textAlign="left",i.textBaseline="top",Pf.each(t.legendItems,function(e,r){var a=Bp(n,s)+s/2+i.measureText(e.text).width;p[p.length-1]+a+n.padding>=t.width&&(v+=s+n.padding,p[p.length]=t.left),d[r]={left:0,top:0,width:a,height:s},p[p.length-1]+=a+n.padding}),f.height+=v}else{var g=n.padding,m=t.columnWidths=[],y=n.padding,b=0,_=0,x=s+g;Pf.each(t.legendItems,function(t,e){var r=Bp(n,s)+s/2+i.measureText(t.text).width;_+x>f.height&&(y+=b+n.padding,m.push(b),b=0,_=0),b=Math.max(b,r),_+=x,d[e]={left:0,top:0,width:r,height:s}}),y+=b,m.push(b),f.width+=y}t.width=f.width,t.height=f.height},afterFit:Hp,isHorizontal:function(){return"top"===this.options.position||"bottom"===this.options.position},draw:function(){var t=this,e=t.options,n=e.labels,r=Rf.global,i=r.elements.line,a=t.width,o=t.lineWidths;if(e.display){var s,l=t.ctx,u=Pf.valueOrDefault,c=u(n.fontColor,r.defaultFontColor),d=u(n.fontSize,r.defaultFontSize),f=u(n.fontStyle,r.defaultFontStyle),h=u(n.fontFamily,r.defaultFontFamily),p=Pf.fontString(d,f,h);l.textAlign="left",l.textBaseline="middle",l.lineWidth=.5,l.strokeStyle=c,l.fillStyle=c,l.font=p;var v=Bp(n,d),g=t.legendHitBoxes,m=t.isHorizontal();s=m?{x:t.left+(a-o[0])/2,y:t.top+n.padding,line:0}:{x:t.left+n.padding,y:t.top+n.padding,line:0};var y=d+n.padding;Pf.each(t.legendItems,function(c,f){var h=l.measureText(c.text).width,p=v+d/2+h,b=s.x,_=s.y;m?b+p>=a&&(_=s.y+=y,s.line++,b=s.x=t.left+(a-o[s.line])/2):_+y>t.bottom&&(b=s.x=b+t.columnWidths[s.line]+n.padding,_=s.y=t.top+n.padding,s.line++),function(t,n,a){if(!(isNaN(v)||v<=0)){l.save(),l.fillStyle=u(a.fillStyle,r.defaultColor),l.lineCap=u(a.lineCap,i.borderCapStyle),l.lineDashOffset=u(a.lineDashOffset,i.borderDashOffset),l.lineJoin=u(a.lineJoin,i.borderJoinStyle),l.lineWidth=u(a.lineWidth,i.borderWidth),l.strokeStyle=u(a.strokeStyle,r.defaultColor);var o=0===u(a.lineWidth,i.borderWidth);if(l.setLineDash&&l.setLineDash(u(a.lineDash,i.borderDash)),e.labels&&e.labels.usePointStyle){var s=d*Math.SQRT2/2,c=s/Math.SQRT2,f=t+c,h=n+c;Pf.canvas.drawPoint(l,a.pointStyle,s,f,h)}else o||l.strokeRect(t,n,v,d),l.fillRect(t,n,v,d);l.restore()}}(b,_,c),g[f].left=b,g[f].top=_,function(t,e,n,r){var i=d/2,a=v+i+t,o=e+i;l.fillText(n.text,a,o),n.hidden&&(l.beginPath(),l.lineWidth=2,l.moveTo(a,o),l.lineTo(a+r,o),l.stroke())}(b,_,c,h),m?s.x+=p+n.padding:s.y+=y})}},handleEvent:function(t){var e=this,n=e.options,r="mouseup"===t.type?"click":t.type,i=!1;if("mousemove"===r){if(!n.onHover)return}else{if("click"!==r)return;if(!n.onClick)return}var a=t.x,o=t.y;if(a>=e.left&&a<=e.right&&o>=e.top&&o<=e.bottom)for(var s=e.legendHitBoxes,l=0;l<s.length;++l){var u=s[l];if(a>=u.left&&a<=u.left+u.width&&o>=u.top&&o<=u.top+u.height){if("click"===r){n.onClick.call(e,t.native,e.legendItems[l]),i=!0;break}if("mousemove"===r){n.onHover.call(e,t.native,e.legendItems[l]),i=!0;break}}}return i}});function qp(t,e){var n=new Up({ctx:t.ctx,options:e,chart:t});Dh.configure(t,n,e),Dh.addBox(t,n),t.legend=n}var Gp={id:"legend",_element:Up,beforeInit:function(t){var e=t.options.legend;e&&qp(t,e)},beforeUpdate:function(t){var e=t.options.legend,n=t.legend;e?(Pf.mergeIf(e,Rf.global.legend),n?(Dh.configure(t,n,e),n.options=e):qp(t,e)):n&&(Dh.removeBox(t,n),delete t.legend)},afterEvent:function(t,e){var n=t.legend;n&&n.handleEvent(e)}},Jp=Pf.noop;Rf._set("global",{title:{display:!1,fontStyle:"bold",fullWidth:!0,lineHeight:1.2,padding:10,position:"top",text:"",weight:2e3}});var Zp=Th.extend({initialize:function(t){Pf.extend(this,t),this.legendHitBoxes=[]},beforeUpdate:Jp,update:function(t,e,n){var r=this;return r.beforeUpdate(),r.maxWidth=t,r.maxHeight=e,r.margins=n,r.beforeSetDimensions(),r.setDimensions(),r.afterSetDimensions(),r.beforeBuildLabels(),r.buildLabels(),r.afterBuildLabels(),r.beforeFit(),r.fit(),r.afterFit(),r.afterUpdate(),r.minSize},afterUpdate:Jp,beforeSetDimensions:Jp,setDimensions:function(){var t=this;t.isHorizontal()?(t.width=t.maxWidth,t.left=0,t.right=t.width):(t.height=t.maxHeight,t.top=0,t.bottom=t.height),t.paddingLeft=0,t.paddingTop=0,t.paddingRight=0,t.paddingBottom=0,t.minSize={width:0,height:0}},afterSetDimensions:Jp,beforeBuildLabels:Jp,buildLabels:Jp,afterBuildLabels:Jp,beforeFit:Jp,fit:function(){var t=this,e=Pf.valueOrDefault,n=t.options,r=n.display,i=e(n.fontSize,Rf.global.defaultFontSize),a=t.minSize,o=Pf.isArray(n.text)?n.text.length:1,s=Pf.options.toLineHeight(n.lineHeight,i),l=r?o*s+2*n.padding:0;t.isHorizontal()?(a.width=t.maxWidth,a.height=l):(a.width=l,a.height=t.maxHeight),t.width=a.width,t.height=a.height},afterFit:Jp,isHorizontal:function(){var t=this.options.position;return"top"===t||"bottom"===t},draw:function(){var t=this,e=t.ctx,n=Pf.valueOrDefault,r=t.options,i=Rf.global;if(r.display){var a,o,s,l=n(r.fontSize,i.defaultFontSize),u=n(r.fontStyle,i.defaultFontStyle),c=n(r.fontFamily,i.defaultFontFamily),d=Pf.fontString(l,u,c),f=Pf.options.toLineHeight(r.lineHeight,l),h=f/2+r.padding,p=0,v=t.top,g=t.left,m=t.bottom,y=t.right;e.fillStyle=n(r.fontColor,i.defaultFontColor),e.font=d,t.isHorizontal()?(o=g+(y-g)/2,s=v+h,a=y-g):(o="left"===r.position?g+h:y-h,s=v+(m-v)/2,a=m-v,p=Math.PI*("left"===r.position?-.5:.5)),e.save(),e.translate(o,s),e.rotate(p),e.textAlign="center",e.textBaseline="middle";var b=r.text;if(Pf.isArray(b))for(var _=0,x=0;x<b.length;++x)e.fillText(b[x],0,_,a),_+=f;else e.fillText(b,0,0,a);e.restore()}}});function Kp(t,e){var n=new Zp({ctx:t.ctx,options:e,chart:t});Dh.configure(t,n,e),Dh.addBox(t,n),t.titleBlock=n}var Xp={},Qp=Vp,tv=Gp,ev={id:"title",_element:Zp,beforeInit:function(t){var e=t.options.title;e&&Kp(t,e)},beforeUpdate:function(t){var e=t.options.title,n=t.titleBlock;e?(Pf.mergeIf(e,Rf.global.title),n?(Dh.configure(t,n,e),n.options=e):Kp(t,e)):n&&(Dh.removeBox(t,n),delete t.titleBlock)}};Xp.filler=Qp,Xp.legend=tv,Xp.title=ev;var nv,rv,iv=function(){var t=function(t,e){return this.construct(t,e),this};return t.Chart=t,t}();for(var av in iv.helpers=Pf,function(){function t(t,e,n){var r;return"string"==typeof t?(r=parseInt(t,10),-1!==t.indexOf("%")&&(r=r/100*e.parentNode[n])):r=t,r}function e(t){return void 0!==t&&null!==t&&"none"!==t}function n(n,r,i){var a=document.defaultView,o=Pf._getParentNode(n),s=a.getComputedStyle(n)[r],l=a.getComputedStyle(o)[r],u=e(s),c=e(l),d=Number.POSITIVE_INFINITY;return u||c?Math.min(u?t(s,n,i):d,c?t(l,o,i):d):"none"}Pf.configMerge=function(){return Pf.merge(Pf.clone(arguments[0]),[].slice.call(arguments,1),{merger:function(t,e,n,r){var i=e[t]||{},a=n[t];"scales"===t?e[t]=Pf.scaleMerge(i,a):"scale"===t?e[t]=Pf.merge(i,[Ah.getScaleDefaults(a.type),a]):Pf._merger(t,e,n,r)}})},Pf.scaleMerge=function(){return Pf.merge(Pf.clone(arguments[0]),[].slice.call(arguments,1),{merger:function(t,e,n,r){if("xAxes"===t||"yAxes"===t){var i,a,o,s=n[t].length;for(e[t]||(e[t]=[]),i=0;i<s;++i)o=n[t][i],a=Pf.valueOrDefault(o.type,"xAxes"===t?"category":"linear"),i>=e[t].length&&e[t].push({}),!e[t][i].type||o.type&&o.type!==e[t][i].type?Pf.merge(e[t][i],[Ah.getScaleDefaults(a),o]):Pf.merge(e[t][i],o)}else Pf._merger(t,e,n,r)}})},Pf.where=function(t,e){if(Pf.isArray(t)&&Array.prototype.filter)return t.filter(e);var n=[];return Pf.each(t,function(t){e(t)&&n.push(t)}),n},Pf.findIndex=Array.prototype.findIndex?function(t,e,n){return t.findIndex(e,n)}:function(t,e,n){n=void 0===n?t:n;for(var r=0,i=t.length;r<i;++r)if(e.call(n,t[r],r,t))return r;return-1},Pf.findNextWhere=function(t,e,n){Pf.isNullOrUndef(n)&&(n=-1);for(var r=n+1;r<t.length;r++){var i=t[r];if(e(i))return i}},Pf.findPreviousWhere=function(t,e,n){Pf.isNullOrUndef(n)&&(n=t.length);for(var r=n-1;r>=0;r--){var i=t[r];if(e(i))return i}},Pf.isNumber=function(t){return!isNaN(parseFloat(t))&&isFinite(t)},Pf.almostEquals=function(t,e,n){return Math.abs(t-e)<n},Pf.almostWhole=function(t,e){var n=Math.round(t);return n-e<t&&n+e>t},Pf.max=function(t){return t.reduce(function(t,e){return isNaN(e)?t:Math.max(t,e)},Number.NEGATIVE_INFINITY)},Pf.min=function(t){return t.reduce(function(t,e){return isNaN(e)?t:Math.min(t,e)},Number.POSITIVE_INFINITY)},Pf.sign=Math.sign?function(t){return Math.sign(t)}:function(t){return 0==(t=+t)||isNaN(t)?t:t>0?1:-1},Pf.log10=Math.log10?function(t){return Math.log10(t)}:function(t){var e=Math.log(t)*Math.LOG10E,n=Math.round(e);return t===Math.pow(10,n)?n:e},Pf.toRadians=function(t){return t*(Math.PI/180)},Pf.toDegrees=function(t){return t*(180/Math.PI)},Pf.getAngleFromPoint=function(t,e){var n=e.x-t.x,r=e.y-t.y,i=Math.sqrt(n*n+r*r),a=Math.atan2(r,n);return a<-.5*Math.PI&&(a+=2*Math.PI),{angle:a,distance:i}},Pf.distanceBetweenPoints=function(t,e){return Math.sqrt(Math.pow(e.x-t.x,2)+Math.pow(e.y-t.y,2))},Pf.aliasPixel=function(t){return t%2==0?0:.5},Pf.splineCurve=function(t,e,n,r){var i=t.skip?e:t,a=e,o=n.skip?e:n,s=Math.sqrt(Math.pow(a.x-i.x,2)+Math.pow(a.y-i.y,2)),l=Math.sqrt(Math.pow(o.x-a.x,2)+Math.pow(o.y-a.y,2)),u=s/(s+l),c=l/(s+l),d=r*(u=isNaN(u)?0:u),f=r*(c=isNaN(c)?0:c);return{previous:{x:a.x-d*(o.x-i.x),y:a.y-d*(o.y-i.y)},next:{x:a.x+f*(o.x-i.x),y:a.y+f*(o.y-i.y)}}},Pf.EPSILON=Number.EPSILON||1e-14,Pf.splineCurveMonotone=function(t){var e,n,r,i,a,o,s,l,u,c=(t||[]).map(function(t){return{model:t._model,deltaK:0,mK:0}}),d=c.length;for(e=0;e<d;++e)if(!(r=c[e]).model.skip){if(n=e>0?c[e-1]:null,(i=e<d-1?c[e+1]:null)&&!i.model.skip){var f=i.model.x-r.model.x;r.deltaK=0!==f?(i.model.y-r.model.y)/f:0}!n||n.model.skip?r.mK=r.deltaK:!i||i.model.skip?r.mK=n.deltaK:this.sign(n.deltaK)!==this.sign(r.deltaK)?r.mK=0:r.mK=(n.deltaK+r.deltaK)/2}for(e=0;e<d-1;++e)r=c[e],i=c[e+1],r.model.skip||i.model.skip||(Pf.almostEquals(r.deltaK,0,this.EPSILON)?r.mK=i.mK=0:(a=r.mK/r.deltaK,o=i.mK/r.deltaK,(l=Math.pow(a,2)+Math.pow(o,2))<=9||(s=3/Math.sqrt(l),r.mK=a*s*r.deltaK,i.mK=o*s*r.deltaK)));for(e=0;e<d;++e)(r=c[e]).model.skip||(n=e>0?c[e-1]:null,i=e<d-1?c[e+1]:null,n&&!n.model.skip&&(u=(r.model.x-n.model.x)/3,r.model.controlPointPreviousX=r.model.x-u,r.model.controlPointPreviousY=r.model.y-u*r.mK),i&&!i.model.skip&&(u=(i.model.x-r.model.x)/3,r.model.controlPointNextX=r.model.x+u,r.model.controlPointNextY=r.model.y+u*r.mK))},Pf.nextItem=function(t,e,n){return n?e>=t.length-1?t[0]:t[e+1]:e>=t.length-1?t[t.length-1]:t[e+1]},Pf.previousItem=function(t,e,n){return n?e<=0?t[t.length-1]:t[e-1]:e<=0?t[0]:t[e-1]},Pf.niceNum=function(t,e){var n=Math.floor(Pf.log10(t)),r=t/Math.pow(10,n);return(e?r<1.5?1:r<3?2:r<7?5:10:r<=1?1:r<=2?2:r<=5?5:10)*Math.pow(10,n)},Pf.requestAnimFrame="undefined"==typeof window?function(t){t()}:window.requestAnimationFrame||window.webkitRequestAnimationFrame||window.mozRequestAnimationFrame||window.oRequestAnimationFrame||window.msRequestAnimationFrame||function(t){return window.setTimeout(t,1e3/60)},Pf.getRelativePosition=function(t,e){var n,r,i=t.originalEvent||t,a=t.target||t.srcElement,o=a.getBoundingClientRect(),s=i.touches;s&&s.length>0?(n=s[0].clientX,r=s[0].clientY):(n=i.clientX,r=i.clientY);var l=parseFloat(Pf.getStyle(a,"padding-left")),u=parseFloat(Pf.getStyle(a,"padding-top")),c=parseFloat(Pf.getStyle(a,"padding-right")),d=parseFloat(Pf.getStyle(a,"padding-bottom")),f=o.right-o.left-l-c,h=o.bottom-o.top-u-d;return{x:n=Math.round((n-o.left-l)/f*a.width/e.currentDevicePixelRatio),y:r=Math.round((r-o.top-u)/h*a.height/e.currentDevicePixelRatio)}},Pf.getConstraintWidth=function(t){return n(t,"max-width","clientWidth")},Pf.getConstraintHeight=function(t){return n(t,"max-height","clientHeight")},Pf._calculatePadding=function(t,e,n){return(e=Pf.getStyle(t,e)).indexOf("%")>-1?n/parseInt(e,10):parseInt(e,10)},Pf._getParentNode=function(t){var e=t.parentNode;return e&&e.host&&(e=e.host),e},Pf.getMaximumWidth=function(t){var e=Pf._getParentNode(t);if(!e)return t.clientWidth;var n=e.clientWidth,r=n-Pf._calculatePadding(e,"padding-left",n)-Pf._calculatePadding(e,"padding-right",n),i=Pf.getConstraintWidth(t);return isNaN(i)?r:Math.min(r,i)},Pf.getMaximumHeight=function(t){var e=Pf._getParentNode(t);if(!e)return t.clientHeight;var n=e.clientHeight,r=n-Pf._calculatePadding(e,"padding-top",n)-Pf._calculatePadding(e,"padding-bottom",n),i=Pf.getConstraintHeight(t);return isNaN(i)?r:Math.min(r,i)},Pf.getStyle=function(t,e){return t.currentStyle?t.currentStyle[e]:document.defaultView.getComputedStyle(t,null).getPropertyValue(e)},Pf.retinaScale=function(t,e){var n=t.currentDevicePixelRatio=e||"undefined"!=typeof window&&window.devicePixelRatio||1;if(1!==n){var r=t.canvas,i=t.height,a=t.width;r.height=i*n,r.width=a*n,t.ctx.scale(n,n),r.style.height||r.style.width||(r.style.height=i+"px",r.style.width=a+"px")}},Pf.fontString=function(t,e,n){return e+" "+t+"px "+n},Pf.longestText=function(t,e,n,r){var i=(r=r||{}).data=r.data||{},a=r.garbageCollect=r.garbageCollect||[];r.font!==e&&(i=r.data={},a=r.garbageCollect=[],r.font=e),t.font=e;var o=0;Pf.each(n,function(e){void 0!==e&&null!==e&&!0!==Pf.isArray(e)?o=Pf.measureText(t,i,a,o,e):Pf.isArray(e)&&Pf.each(e,function(e){void 0===e||null===e||Pf.isArray(e)||(o=Pf.measureText(t,i,a,o,e))})});var s=a.length/2;if(s>n.length){for(var l=0;l<s;l++)delete i[a[l]];a.splice(0,s)}return o},Pf.measureText=function(t,e,n,r,i){var a=e[i];return a||(a=e[i]=t.measureText(i).width,n.push(i)),a>r&&(r=a),r},Pf.numberOfLabelLines=function(t){var e=1;return Pf.each(t,function(t){Pf.isArray(t)&&t.length>e&&(e=t.length)}),e},Pf.color=Sh?function(t){return t instanceof CanvasGradient&&(t=Rf.global.defaultColor),Sh(t)}:function(t){return console.error("Color.js not found!"),t},Pf.getHoverColor=function(t){return t instanceof CanvasPattern?t:Pf.color(t).saturate(.5).darken(.1).rgbString()}}(),iv.Animation=Ph,iv.animationService=Ih,iv.defaults=Rf,iv.Element=Th,iv.elements=Wh,iv.Interaction=Xh,iv.layouts=Dh,iv.platform=pp,iv.plugins=vp,iv.Scale=wp,iv.scaleService=Ah,iv.Ticks=gp,iv.Tooltip=kp,function(t){function e(t){return"top"===t||"bottom"===t}t.types={},t.instances={},t.controllers={},Pf.extend(t.prototype,{construct:function(e,n){var r=this;n=function(t){var e=(t=t||{}).data=t.data||{};return e.datasets=e.datasets||[],e.labels=e.labels||[],t.options=Pf.configMerge(Rf.global,Rf[t.type],t.options||{}),t}(n);var i=pp.acquireContext(e,n),a=i&&i.canvas,o=a&&a.height,s=a&&a.width;r.id=Pf.uid(),r.ctx=i,r.canvas=a,r.config=n,r.width=s,r.height=o,r.aspectRatio=o?s/o:null,r.options=n.options,r._bufferedRender=!1,r.chart=r,r.controller=r,t.instances[r.id]=r,Object.defineProperty(r,"data",{get:function(){return r.config.data},set:function(t){r.config.data=t}}),i&&a?(r.initialize(),r.update()):console.error("Failed to create chart: can't acquire context from the given item")},initialize:function(){var t=this;return vp.notify(t,"beforeInit"),Pf.retinaScale(t,t.options.devicePixelRatio),t.bindEvents(),t.options.responsive&&t.resize(!0),t.ensureScalesHaveIDs(),t.buildOrUpdateScales(),t.initToolTip(),vp.notify(t,"afterInit"),t},clear:function(){return Pf.canvas.clear(this),this},stop:function(){return Ih.cancelAnimation(this),this},resize:function(t){var e=this,n=e.options,r=e.canvas,i=n.maintainAspectRatio&&e.aspectRatio||null,a=Math.max(0,Math.floor(Pf.getMaximumWidth(r))),o=Math.max(0,Math.floor(i?a/i:Pf.getMaximumHeight(r)));if((e.width!==a||e.height!==o)&&(r.width=e.width=a,r.height=e.height=o,r.style.width=a+"px",r.style.height=o+"px",Pf.retinaScale(e,n.devicePixelRatio),!t)){var s={width:a,height:o};vp.notify(e,"resize",[s]),e.options.onResize&&e.options.onResize(e,s),e.stop(),e.update({duration:e.options.responsiveAnimationDuration})}},ensureScalesHaveIDs:function(){var t=this.options,e=t.scales||{},n=t.scale;Pf.each(e.xAxes,function(t,e){t.id=t.id||"x-axis-"+e}),Pf.each(e.yAxes,function(t,e){t.id=t.id||"y-axis-"+e}),n&&(n.id=n.id||"scale")},buildOrUpdateScales:function(){var t=this,n=t.options,r=t.scales||{},i=[],a=Object.keys(r).reduce(function(t,e){return t[e]=!1,t},{});n.scales&&(i=i.concat((n.scales.xAxes||[]).map(function(t){return{options:t,dtype:"category",dposition:"bottom"}}),(n.scales.yAxes||[]).map(function(t){return{options:t,dtype:"linear",dposition:"left"}}))),n.scale&&i.push({options:n.scale,dtype:"radialLinear",isDefault:!0,dposition:"chartArea"}),Pf.each(i,function(n){var i=n.options,o=i.id,s=Pf.valueOrDefault(i.type,n.dtype);e(i.position)!==e(n.dposition)&&(i.position=n.dposition),a[o]=!0;var l=null;if(o in r&&r[o].type===s)(l=r[o]).options=i,l.ctx=t.ctx,l.chart=t;else{var u=Ah.getScaleConstructor(s);if(!u)return;l=new u({id:o,type:s,options:i,ctx:t.ctx,chart:t}),r[l.id]=l}l.mergeTicksOptions(),n.isDefault&&(t.scale=l)}),Pf.each(a,function(t,e){t||delete r[e]}),t.scales=r,Ah.addScalesToLayout(this)},buildOrUpdateControllers:function(){var e=this,n=[],r=[];return Pf.each(e.data.datasets,function(i,a){var o=e.getDatasetMeta(a),s=i.type||e.config.type;if(o.type&&o.type!==s&&(e.destroyDatasetMeta(a),o=e.getDatasetMeta(a)),o.type=s,n.push(o.type),o.controller)o.controller.updateIndex(a),o.controller.linkScales();else{var l=t.controllers[o.type];if(void 0===l)throw new Error('"'+o.type+'" is not a chart type.');o.controller=new l(e,a),r.push(o.controller)}},e),r},resetElements:function(){var t=this;Pf.each(t.data.datasets,function(e,n){t.getDatasetMeta(n).controller.reset()},t)},reset:function(){this.resetElements(),this.tooltip.initialize()},update:function(e){var r,i,a=this;if(e&&"object"===(void 0===e?"undefined":n(e))||(e={duration:e,lazy:arguments[1]}),i=(r=a).options,Pf.each(r.scales,function(t){Dh.removeBox(r,t)}),i=Pf.configMerge(t.defaults.global,t.defaults[r.config.type],i),r.options=r.config.options=i,r.ensureScalesHaveIDs(),r.buildOrUpdateScales(),r.tooltip._options=i.tooltips,r.tooltip.initialize(),vp._invalidate(a),!1!==vp.notify(a,"beforeUpdate")){a.tooltip._data=a.data;var o=a.buildOrUpdateControllers();Pf.each(a.data.datasets,function(t,e){a.getDatasetMeta(e).controller.buildOrUpdateElements()},a),a.updateLayout(),a.options.animation&&a.options.animation.duration&&Pf.each(o,function(t){t.reset()}),a.updateDatasets(),a.tooltip.initialize(),a.lastActive=[],vp.notify(a,"afterUpdate"),a._bufferedRender?a._bufferedRequest={duration:e.duration,easing:e.easing,lazy:e.lazy}:a.render(e)}},updateLayout:function(){!1!==vp.notify(this,"beforeLayout")&&(Dh.update(this,this.width,this.height),vp.notify(this,"afterScaleUpdate"),vp.notify(this,"afterLayout"))},updateDatasets:function(){if(!1!==vp.notify(this,"beforeDatasetsUpdate")){for(var t=0,e=this.data.datasets.length;t<e;++t)this.updateDataset(t);vp.notify(this,"afterDatasetsUpdate")}},updateDataset:function(t){var e=this.getDatasetMeta(t),n={meta:e,index:t};!1!==vp.notify(this,"beforeDatasetUpdate",[n])&&(e.controller.update(),vp.notify(this,"afterDatasetUpdate",[n]))},render:function(t){var e=this;t&&"object"===(void 0===t?"undefined":n(t))||(t={duration:t,lazy:arguments[1]});var r=t.duration,i=t.lazy;if(!1!==vp.notify(e,"beforeRender")){var a=e.options.animation,o=function(t){vp.notify(e,"afterRender"),Pf.callback(a&&a.onComplete,[t],e)};if(a&&(void 0!==r&&0!==r||void 0===r&&0!==a.duration)){var s=new Ph({numSteps:(r||a.duration)/16.66,easing:t.easing||a.easing,render:function(t,e){var n=Pf.easing.effects[e.easing],r=e.currentStep,i=r/e.numSteps;t.draw(n(i),i,r)},onAnimationProgress:a.onProgress,onAnimationComplete:o});Ih.addAnimation(e,s,r,i)}else e.draw(),o(new Ph({numSteps:0,chart:e}));return e}},draw:function(t){var e=this;e.clear(),Pf.isNullOrUndef(t)&&(t=1),e.transition(t),e.width<=0||e.height<=0||!1!==vp.notify(e,"beforeDraw",[t])&&(Pf.each(e.boxes,function(t){t.draw(e.chartArea)},e),e.scale&&e.scale.draw(),e.drawDatasets(t),e._drawTooltip(t),vp.notify(e,"afterDraw",[t]))},transition:function(t){for(var e=0,n=(this.data.datasets||[]).length;e<n;++e)this.isDatasetVisible(e)&&this.getDatasetMeta(e).controller.transition(t);this.tooltip.transition(t)},drawDatasets:function(t){var e=this;if(!1!==vp.notify(e,"beforeDatasetsDraw",[t])){for(var n=(e.data.datasets||[]).length-1;n>=0;--n)e.isDatasetVisible(n)&&e.drawDataset(n,t);vp.notify(e,"afterDatasetsDraw",[t])}},drawDataset:function(t,e){var n=this.getDatasetMeta(t),r={meta:n,index:t,easingValue:e};!1!==vp.notify(this,"beforeDatasetDraw",[r])&&(n.controller.draw(e),vp.notify(this,"afterDatasetDraw",[r]))},_drawTooltip:function(t){var e=this.tooltip,n={tooltip:e,easingValue:t};!1!==vp.notify(this,"beforeTooltipDraw",[n])&&(e.draw(),vp.notify(this,"afterTooltipDraw",[n]))},getElementAtEvent:function(t){return Xh.modes.single(this,t)},getElementsAtEvent:function(t){return Xh.modes.label(this,t,{intersect:!0})},getElementsAtXAxis:function(t){return Xh.modes["x-axis"](this,t,{intersect:!0})},getElementsAtEventForMode:function(t,e,n){var r=Xh.modes[e];return"function"==typeof r?r(this,t,n):[]},getDatasetAtEvent:function(t){return Xh.modes.dataset(this,t,{intersect:!0})},getDatasetMeta:function(t){var e=this.data.datasets[t];e._meta||(e._meta={});var n=e._meta[this.id];return n||(n=e._meta[this.id]={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null}),n},getVisibleDatasetCount:function(){for(var t=0,e=0,n=this.data.datasets.length;e<n;++e)this.isDatasetVisible(e)&&t++;return t},isDatasetVisible:function(t){var e=this.getDatasetMeta(t);return"boolean"==typeof e.hidden?!e.hidden:!this.data.datasets[t].hidden},generateLegend:function(){return this.options.legendCallback(this)},destroyDatasetMeta:function(t){var e=this.id,n=this.data.datasets[t],r=n._meta&&n._meta[e];r&&(r.controller.destroy(),delete n._meta[e])},destroy:function(){var e,n,r=this,i=r.canvas;for(r.stop(),e=0,n=r.data.datasets.length;e<n;++e)r.destroyDatasetMeta(e);i&&(r.unbindEvents(),Pf.canvas.clear(r),pp.releaseContext(r.ctx),r.canvas=null,r.ctx=null),vp.notify(r,"destroy"),delete t.instances[r.id]},toBase64Image:function(){return this.canvas.toDataURL.apply(this.canvas,arguments)},initToolTip:function(){var t=this;t.tooltip=new kp({_chart:t,_chartInstance:t,_data:t.data,_options:t.options.tooltips},t)},bindEvents:function(){var t=this,e=t._listeners={},n=function(){t.eventHandler.apply(t,arguments)};Pf.each(t.options.events,function(r){pp.addEventListener(t,r,n),e[r]=n}),t.options.responsive&&(n=function(){t.resize()},pp.addEventListener(t,"resize",n),e.resize=n)},unbindEvents:function(){var t=this,e=t._listeners;e&&(delete t._listeners,Pf.each(e,function(e,n){pp.removeEventListener(t,n,e)}))},updateHoverStyle:function(t,e,n){var r,i,a,o=n?"setHoverStyle":"removeHoverStyle";for(i=0,a=t.length;i<a;++i)(r=t[i])&&this.getDatasetMeta(r._datasetIndex).controller[o](r)},eventHandler:function(t){var e=this,n=e.tooltip;if(!1!==vp.notify(e,"beforeEvent",[t])){e._bufferedRender=!0,e._bufferedRequest=null;var r=e.handleEvent(t);n&&(r=n._start?n.handleEvent(t):r|n.handleEvent(t)),vp.notify(e,"afterEvent",[t]);var i=e._bufferedRequest;return i?e.render(i):r&&!e.animating&&(e.stop(),e.render({duration:e.options.hover.animationDuration,lazy:!0})),e._bufferedRender=!1,e._bufferedRequest=null,e}},handleEvent:function(t){var e,n=this,r=n.options||{},i=r.hover;return n.lastActive=n.lastActive||[],"mouseout"===t.type?n.active=[]:n.active=n.getElementsAtEventForMode(t,i.mode,i),Pf.callback(r.onHover||r.hover.onHover,[t.native,n.active],n),"mouseup"!==t.type&&"click"!==t.type||r.onClick&&r.onClick.call(n,t.native,n.active),n.lastActive.length&&n.updateHoverStyle(n.lastActive,i.mode,!1),n.active.length&&i.mode&&n.updateHoverStyle(n.active,i.mode,!0),e=!Pf.arrayEquals(n.active,n.lastActive),n.lastActive=n.active,e}}),t.Controller=t}(iv),function(t){var e=["push","pop","shift","splice","unshift"];function n(t,n){var r=t._chartjs;if(r){var i=r.listeners,a=i.indexOf(n);-1!==a&&i.splice(a,1),i.length>0||(e.forEach(function(e){delete t[e]}),delete t._chartjs)}}t.DatasetController=function(t,e){this.initialize(t,e)},Pf.extend(t.DatasetController.prototype,{datasetElementType:null,dataElementType:null,initialize:function(t,e){this.chart=t,this.index=e,this.linkScales(),this.addElements()},updateIndex:function(t){this.index=t},linkScales:function(){var t=this,e=t.getMeta(),n=t.getDataset();null!==e.xAxisID&&e.xAxisID in t.chart.scales||(e.xAxisID=n.xAxisID||t.chart.options.scales.xAxes[0].id),null!==e.yAxisID&&e.yAxisID in t.chart.scales||(e.yAxisID=n.yAxisID||t.chart.options.scales.yAxes[0].id)},getDataset:function(){return this.chart.data.datasets[this.index]},getMeta:function(){return this.chart.getDatasetMeta(this.index)},getScaleForId:function(t){return this.chart.scales[t]},reset:function(){this.update(!0)},destroy:function(){this._data&&n(this._data,this)},createMetaDataset:function(){var t=this.datasetElementType;return t&&new t({_chart:this.chart,_datasetIndex:this.index})},createMetaData:function(t){var e=this.dataElementType;return e&&new e({_chart:this.chart,_datasetIndex:this.index,_index:t})},addElements:function(){var t,e,n=this.getMeta(),r=this.getDataset().data||[],i=n.data;for(t=0,e=r.length;t<e;++t)i[t]=i[t]||this.createMetaData(t);n.dataset=n.dataset||this.createMetaDataset()},addElementAndReset:function(t){var e=this.createMetaData(t);this.getMeta().data.splice(t,0,e),this.updateElement(e,t,!0)},buildOrUpdateElements:function(){var t,r,i=this,a=i.getDataset(),o=a.data||(a.data=[]);i._data!==o&&(i._data&&n(i._data,i),r=i,(t=o)._chartjs?t._chartjs.listeners.push(r):(Object.defineProperty(t,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[r]}}),e.forEach(function(e){var n="onData"+e.charAt(0).toUpperCase()+e.slice(1),r=t[e];Object.defineProperty(t,e,{configurable:!0,enumerable:!1,value:function(){var e=Array.prototype.slice.call(arguments),i=r.apply(this,e);return Pf.each(t._chartjs.listeners,function(t){"function"==typeof t[n]&&t[n].apply(t,e)}),i}})})),i._data=o),i.resyncElements()},update:Pf.noop,transition:function(t){for(var e=this.getMeta(),n=e.data||[],r=n.length,i=0;i<r;++i)n[i].transition(t);e.dataset&&e.dataset.transition(t)},draw:function(){var t=this.getMeta(),e=t.data||[],n=e.length,r=0;for(t.dataset&&t.dataset.draw();r<n;++r)e[r].draw()},removeHoverStyle:function(t){Pf.merge(t._model,t.$previousStyle||{}),delete t.$previousStyle},setHoverStyle:function(t){var e=this.chart.data.datasets[t._datasetIndex],n=t._index,r=t.custom||{},i=Pf.valueAtIndexOrDefault,a=Pf.getHoverColor,o=t._model;t.$previousStyle={backgroundColor:o.backgroundColor,borderColor:o.borderColor,borderWidth:o.borderWidth},o.backgroundColor=r.hoverBackgroundColor?r.hoverBackgroundColor:i(e.hoverBackgroundColor,n,a(o.backgroundColor)),o.borderColor=r.hoverBorderColor?r.hoverBorderColor:i(e.hoverBorderColor,n,a(o.borderColor)),o.borderWidth=r.hoverBorderWidth?r.hoverBorderWidth:i(e.hoverBorderWidth,n,o.borderWidth)},resyncElements:function(){var t=this.getMeta(),e=this.getDataset().data,n=t.data.length,r=e.length;r<n?t.data.splice(r,n-r):r>n&&this.insertElements(n,r-n)},insertElements:function(t,e){for(var n=0;n<e;++n)this.addElementAndReset(t+n)},onDataPush:function(){this.insertElements(this.getDataset().data.length-1,arguments.length)},onDataPop:function(){this.getMeta().data.pop()},onDataShift:function(){this.getMeta().data.shift()},onDataSplice:function(t,e){this.getMeta().data.splice(t,e),this.insertElements(t,arguments.length-2)},onDataUnshift:function(){this.insertElements(0,arguments.length)}}),t.DatasetController.extend=Pf.inherits}(iv),function(t){var e=Pf.noop;t.LinearScaleBase=wp.extend({getRightValue:function(t){return"string"==typeof t?+t:wp.prototype.getRightValue.call(this,t)},handleTickRangeOptions:function(){var t=this,e=t.options.ticks;if(e.beginAtZero){var n=Pf.sign(t.min),r=Pf.sign(t.max);n<0&&r<0?t.max=0:n>0&&r>0&&(t.min=0)}var i=void 0!==e.min||void 0!==e.suggestedMin,a=void 0!==e.max||void 0!==e.suggestedMax;void 0!==e.min?t.min=e.min:void 0!==e.suggestedMin&&(null===t.min?t.min=e.suggestedMin:t.min=Math.min(t.min,e.suggestedMin)),void 0!==e.max?t.max=e.max:void 0!==e.suggestedMax&&(null===t.max?t.max=e.suggestedMax:t.max=Math.max(t.max,e.suggestedMax)),i!==a&&t.min>=t.max&&(i?t.max=t.min+1:t.min=t.max-1),t.min===t.max&&(t.max++,e.beginAtZero||t.min--)},getTickLimit:e,handleDirectionalChanges:e,buildTicks:function(){var t=this,e=t.options.ticks,n=t.getTickLimit(),r={maxTicks:n=Math.max(2,n),min:e.min,max:e.max,precision:e.precision,stepSize:Pf.valueOrDefault(e.fixedStepSize,e.stepSize)},i=t.ticks=function(t,e){var n,r,i,a=[];if(t.stepSize&&t.stepSize>0)i=t.stepSize;else{var o=Pf.niceNum(e.max-e.min,!1);i=Pf.niceNum(o/(t.maxTicks-1),!0),void 0!==(r=t.precision)&&(n=Math.pow(10,r),i=Math.ceil(i*n)/n)}var s=Math.floor(e.min/i)*i,l=Math.ceil(e.max/i)*i;Pf.isNullOrUndef(t.min)||Pf.isNullOrUndef(t.max)||!t.stepSize||Pf.almostWhole((t.max-t.min)/t.stepSize,i/1e3)&&(s=t.min,l=t.max);var u=(l-s)/i;u=Pf.almostEquals(u,Math.round(u),i/1e3)?Math.round(u):Math.ceil(u),r=1,i<1&&(r=Math.pow(10,1-Math.floor(Pf.log10(i))),s=Math.round(s*r)/r,l=Math.round(l*r)/r),a.push(void 0!==t.min?t.min:s);for(var c=1;c<u;++c)a.push(Math.round((s+c*i)*r)/r);return a.push(void 0!==t.max?t.max:l),a}(r,t);t.handleDirectionalChanges(),t.max=Pf.max(i),t.min=Pf.min(i),e.reverse?(i.reverse(),t.start=t.max,t.end=t.min):(t.start=t.min,t.end=t.max)},convertTicksToLabels:function(){var t=this;t.ticksAsNumbers=t.ticks.slice(),t.zeroLineIndex=t.ticks.indexOf(0),wp.prototype.convertTicksToLabels.call(t)}})}(iv),nv=wp.extend({getLabels:function(){var t=this.chart.data;return this.options.labels||(this.isHorizontal()?t.xLabels:t.yLabels)||t.labels},determineDataLimits:function(){var t,e=this,n=e.getLabels();e.minIndex=0,e.maxIndex=n.length-1,void 0!==e.options.ticks.min&&(t=n.indexOf(e.options.ticks.min),e.minIndex=-1!==t?t:e.minIndex),void 0!==e.options.ticks.max&&(t=n.indexOf(e.options.ticks.max),e.maxIndex=-1!==t?t:e.maxIndex),e.min=n[e.minIndex],e.max=n[e.maxIndex]},buildTicks:function(){var t=this,e=t.getLabels();t.ticks=0===t.minIndex&&t.maxIndex===e.length-1?e:e.slice(t.minIndex,t.maxIndex+1)},getLabelForIndex:function(t,e){var n=this,r=n.chart.data,i=n.isHorizontal();return r.yLabels&&!i?n.getRightValue(r.datasets[e].data[t]):n.ticks[t-n.minIndex]},getPixelForValue:function(t,e){var n,r=this,i=r.options.offset,a=Math.max(r.maxIndex+1-r.minIndex-(i?0:1),1);if(void 0!==t&&null!==t&&(n=r.isHorizontal()?t.x:t.y),void 0!==n||void 0!==t&&isNaN(e)){var o=r.getLabels();t=n||t;var s=o.indexOf(t);e=-1!==s?s:e}if(r.isHorizontal()){var l=r.width/a,u=l*(e-r.minIndex);return i&&(u+=l/2),r.left+Math.round(u)}var c=r.height/a,d=c*(e-r.minIndex);return i&&(d+=c/2),r.top+Math.round(d)},getPixelForTick:function(t){return this.getPixelForValue(this.ticks[t],t+this.minIndex,null)},getValueForPixel:function(t){var e=this,n=e.options.offset,r=Math.max(e._ticks.length-(n?0:1),1),i=e.isHorizontal(),a=(i?e.width:e.height)/r;return t-=i?e.left:e.top,n&&(t-=a/2),(t<=0?0:Math.round(t/a))+e.minIndex},getBasePixel:function(){return this.bottom}}),Ah.registerScaleType("category",nv,{position:"bottom"}),function(t){var e={position:"left",ticks:{callback:gp.formatters.linear}},n=t.LinearScaleBase.extend({determineDataLimits:function(){var t=this,e=t.options,n=t.chart,r=n.data.datasets,i=t.isHorizontal();function a(e){return i?e.xAxisID===t.id:e.yAxisID===t.id}t.min=null,t.max=null;var o=e.stacked;if(void 0===o&&Pf.each(r,function(t,e){if(!o){var r=n.getDatasetMeta(e);n.isDatasetVisible(e)&&a(r)&&void 0!==r.stack&&(o=!0)}}),e.stacked||o){var s={};Pf.each(r,function(r,i){var o=n.getDatasetMeta(i),l=[o.type,void 0===e.stacked&&void 0===o.stack?i:"",o.stack].join(".");void 0===s[l]&&(s[l]={positiveValues:[],negativeValues:[]});var u=s[l].positiveValues,c=s[l].negativeValues;n.isDatasetVisible(i)&&a(o)&&Pf.each(r.data,function(n,r){var i=+t.getRightValue(n);isNaN(i)||o.data[r].hidden||(u[r]=u[r]||0,c[r]=c[r]||0,e.relativePoints?u[r]=100:i<0?c[r]+=i:u[r]+=i)})}),Pf.each(s,function(e){var n=e.positiveValues.concat(e.negativeValues),r=Pf.min(n),i=Pf.max(n);t.min=null===t.min?r:Math.min(t.min,r),t.max=null===t.max?i:Math.max(t.max,i)})}else Pf.each(r,function(e,r){var i=n.getDatasetMeta(r);n.isDatasetVisible(r)&&a(i)&&Pf.each(e.data,function(e,n){var r=+t.getRightValue(e);isNaN(r)||i.data[n].hidden||(null===t.min?t.min=r:r<t.min&&(t.min=r),null===t.max?t.max=r:r>t.max&&(t.max=r))})});t.min=isFinite(t.min)&&!isNaN(t.min)?t.min:0,t.max=isFinite(t.max)&&!isNaN(t.max)?t.max:1,this.handleTickRangeOptions()},getTickLimit:function(){var t,e=this.options.ticks;if(this.isHorizontal())t=Math.min(e.maxTicksLimit?e.maxTicksLimit:11,Math.ceil(this.width/50));else{var n=Pf.valueOrDefault(e.fontSize,Rf.global.defaultFontSize);t=Math.min(e.maxTicksLimit?e.maxTicksLimit:11,Math.ceil(this.height/(2*n)))}return t},handleDirectionalChanges:function(){this.isHorizontal()||this.ticks.reverse()},getLabelForIndex:function(t,e){return+this.getRightValue(this.chart.data.datasets[e].data[t])},getPixelForValue:function(t){var e=this,n=e.start,r=+e.getRightValue(t),i=e.end-n;return e.isHorizontal()?e.left+e.width/i*(r-n):e.bottom-e.height/i*(r-n)},getValueForPixel:function(t){var e=this,n=e.isHorizontal(),r=n?e.width:e.height,i=(n?t-e.left:e.bottom-t)/r;return e.start+(e.end-e.start)*i},getPixelForTick:function(t){return this.getPixelForValue(this.ticksAsNumbers[t])}});Ah.registerScaleType("linear",n,e)}(iv),function(t){var e={position:"left",ticks:{callback:gp.formatters.logarithmic}},n=wp.extend({determineDataLimits:function(){var t=this,e=t.options,n=t.chart,r=n.data.datasets,i=t.isHorizontal();function a(e){return i?e.xAxisID===t.id:e.yAxisID===t.id}t.min=null,t.max=null,t.minNotZero=null;var o=e.stacked;if(void 0===o&&Pf.each(r,function(t,e){if(!o){var r=n.getDatasetMeta(e);n.isDatasetVisible(e)&&a(r)&&void 0!==r.stack&&(o=!0)}}),e.stacked||o){var s={};Pf.each(r,function(r,i){var o=n.getDatasetMeta(i),l=[o.type,void 0===e.stacked&&void 0===o.stack?i:"",o.stack].join(".");n.isDatasetVisible(i)&&a(o)&&(void 0===s[l]&&(s[l]=[]),Pf.each(r.data,function(e,n){var r=s[l],i=+t.getRightValue(e);isNaN(i)||o.data[n].hidden||i<0||(r[n]=r[n]||0,r[n]+=i)}))}),Pf.each(s,function(e){if(e.length>0){var n=Pf.min(e),r=Pf.max(e);t.min=null===t.min?n:Math.min(t.min,n),t.max=null===t.max?r:Math.max(t.max,r)}})}else Pf.each(r,function(e,r){var i=n.getDatasetMeta(r);n.isDatasetVisible(r)&&a(i)&&Pf.each(e.data,function(e,n){var r=+t.getRightValue(e);isNaN(r)||i.data[n].hidden||r<0||(null===t.min?t.min=r:r<t.min&&(t.min=r),null===t.max?t.max=r:r>t.max&&(t.max=r),0!==r&&(null===t.minNotZero||r<t.minNotZero)&&(t.minNotZero=r))})});this.handleTickRangeOptions()},handleTickRangeOptions:function(){var t=this,e=t.options.ticks,n=Pf.valueOrDefault;t.min=n(e.min,t.min),t.max=n(e.max,t.max),t.min===t.max&&(0!==t.min&&null!==t.min?(t.min=Math.pow(10,Math.floor(Pf.log10(t.min))-1),t.max=Math.pow(10,Math.floor(Pf.log10(t.max))+1)):(t.min=1,t.max=10)),null===t.min&&(t.min=Math.pow(10,Math.floor(Pf.log10(t.max))-1)),null===t.max&&(t.max=0!==t.min?Math.pow(10,Math.floor(Pf.log10(t.min))+1):10),null===t.minNotZero&&(t.min>0?t.minNotZero=t.min:t.max<1?t.minNotZero=Math.pow(10,Math.floor(Pf.log10(t.max))):t.minNotZero=1)},buildTicks:function(){var t=this,e=t.options.ticks,n=!t.isHorizontal(),r={min:e.min,max:e.max},i=t.ticks=function(t,e){var n,r,i=[],a=Pf.valueOrDefault,o=a(t.min,Math.pow(10,Math.floor(Pf.log10(e.min)))),s=Math.floor(Pf.log10(e.max)),l=Math.ceil(e.max/Math.pow(10,s));0===o?(n=Math.floor(Pf.log10(e.minNotZero)),r=Math.floor(e.minNotZero/Math.pow(10,n)),i.push(o),o=r*Math.pow(10,n)):(n=Math.floor(Pf.log10(o)),r=Math.floor(o/Math.pow(10,n)));var u=n<0?Math.pow(10,Math.abs(n)):1;do{i.push(o),10==++r&&(r=1,u=++n>=0?1:u),o=Math.round(r*Math.pow(10,n)*u)/u}while(n<s||n===s&&r<l);var c=a(t.max,o);return i.push(c),i}(r,t);t.max=Pf.max(i),t.min=Pf.min(i),e.reverse?(n=!n,t.start=t.max,t.end=t.min):(t.start=t.min,t.end=t.max),n&&i.reverse()},convertTicksToLabels:function(){this.tickValues=this.ticks.slice(),wp.prototype.convertTicksToLabels.call(this)},getLabelForIndex:function(t,e){return+this.getRightValue(this.chart.data.datasets[e].data[t])},getPixelForTick:function(t){return this.getPixelForValue(this.tickValues[t])},_getFirstTickValue:function(t){var e=Math.floor(Pf.log10(t));return Math.floor(t/Math.pow(10,e))*Math.pow(10,e)},getPixelForValue:function(e){var n,r,i,a,o,s=this,l=s.options.ticks.reverse,u=Pf.log10,c=s._getFirstTickValue(s.minNotZero),d=0;return e=+s.getRightValue(e),l?(i=s.end,a=s.start,o=-1):(i=s.start,a=s.end,o=1),s.isHorizontal()?(n=s.width,r=l?s.right:s.left):(n=s.height,o*=-1,r=l?s.top:s.bottom),e!==i&&(0===i&&(n-=d=Pf.getValueOrDefault(s.options.ticks.fontSize,t.defaults.global.defaultFontSize),i=c),0!==e&&(d+=n/(u(a)-u(i))*(u(e)-u(i))),r+=o*d),r},getValueForPixel:function(e){var n,r,i,a,o=this,s=o.options.ticks.reverse,l=Pf.log10,u=o._getFirstTickValue(o.minNotZero);if(s?(r=o.end,i=o.start):(r=o.start,i=o.end),o.isHorizontal()?(n=o.width,a=s?o.right-e:e-o.left):(n=o.height,a=s?e-o.top:o.bottom-e),a!==r){if(0===r){var c=Pf.getValueOrDefault(o.options.ticks.fontSize,t.defaults.global.defaultFontSize);a-=c,n-=c,r=u}a*=l(i)-l(r),a/=n,a=Math.pow(10,l(r)+a)}return a}});Ah.registerScaleType("logarithmic",n,e)}(iv),function(t){var e=Rf.global,n={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,color:"rgba(0, 0, 0, 0.1)",lineWidth:1},gridLines:{circular:!1},ticks:{showLabelBackdrop:!0,backdropColor:"rgba(255,255,255,0.75)",backdropPaddingY:2,backdropPaddingX:2,callback:gp.formatters.linear},pointLabels:{display:!0,fontSize:10,callback:function(t){return t}}};function r(t){var e=t.options;return e.angleLines.display||e.pointLabels.display?t.chart.data.labels.length:0}function i(t){var n=t.options.pointLabels,r=Pf.valueOrDefault(n.fontSize,e.defaultFontSize),i=Pf.valueOrDefault(n.fontStyle,e.defaultFontStyle),a=Pf.valueOrDefault(n.fontFamily,e.defaultFontFamily);return{size:r,style:i,family:a,font:Pf.fontString(r,i,a)}}function a(t,e,n,r,i){return t===r||t===i?{start:e-n/2,end:e+n/2}:t<r||t>i?{start:e-n-5,end:e}:{start:e,end:e+n+5}}function o(t){return 0===t||180===t?"center":t<180?"left":"right"}function s(t,e,n,r){if(Pf.isArray(e))for(var i=n.y,a=1.5*r,o=0;o<e.length;++o)t.fillText(e[o],n.x,i),i+=a;else t.fillText(e,n.x,n.y)}function l(t,e,n){90===t||270===t?n.y-=e.h/2:(t>270||t<90)&&(n.y-=e.h)}function u(t){return Pf.isNumber(t)?t:0}var c=t.LinearScaleBase.extend({setDimensions:function(){var t=this,n=t.options,r=n.ticks;t.width=t.maxWidth,t.height=t.maxHeight,t.xCenter=Math.round(t.width/2),t.yCenter=Math.round(t.height/2);var i=Pf.min([t.height,t.width]),a=Pf.valueOrDefault(r.fontSize,e.defaultFontSize);t.drawingArea=n.display?i/2-(a/2+r.backdropPaddingY):i/2},determineDataLimits:function(){var t=this,e=t.chart,n=Number.POSITIVE_INFINITY,r=Number.NEGATIVE_INFINITY;Pf.each(e.data.datasets,function(i,a){if(e.isDatasetVisible(a)){var o=e.getDatasetMeta(a);Pf.each(i.data,function(e,i){var a=+t.getRightValue(e);isNaN(a)||o.data[i].hidden||(n=Math.min(a,n),r=Math.max(a,r))})}}),t.min=n===Number.POSITIVE_INFINITY?0:n,t.max=r===Number.NEGATIVE_INFINITY?0:r,t.handleTickRangeOptions()},getTickLimit:function(){var t=this.options.ticks,n=Pf.valueOrDefault(t.fontSize,e.defaultFontSize);return Math.min(t.maxTicksLimit?t.maxTicksLimit:11,Math.ceil(this.drawingArea/(1.5*n)))},convertTicksToLabels:function(){var e=this;t.LinearScaleBase.prototype.convertTicksToLabels.call(e),e.pointLabels=e.chart.data.labels.map(e.options.pointLabels.callback,e)},getLabelForIndex:function(t,e){return+this.getRightValue(this.chart.data.datasets[e].data[t])},fit:function(){var t,e;this.options.pointLabels.display?function(t){var e,n,o,s=i(t),l=Math.min(t.height/2,t.width/2),u={r:t.width,l:0,t:t.height,b:0},c={};t.ctx.font=s.font,t._pointLabelSizes=[];var d,f,h,p=r(t);for(e=0;e<p;e++){o=t.getPointPosition(e,l),d=t.ctx,f=s.size,h=t.pointLabels[e]||"",n=Pf.isArray(h)?{w:Pf.longestText(d,d.font,h),h:h.length*f+1.5*(h.length-1)*f}:{w:d.measureText(h).width,h:f},t._pointLabelSizes[e]=n;var v=t.getIndexAngle(e),g=Pf.toDegrees(v)%360,m=a(g,o.x,n.w,0,180),y=a(g,o.y,n.h,90,270);m.start<u.l&&(u.l=m.start,c.l=v),m.end>u.r&&(u.r=m.end,c.r=v),y.start<u.t&&(u.t=y.start,c.t=v),y.end>u.b&&(u.b=y.end,c.b=v)}t.setReductions(l,u,c)}(this):(t=this,e=Math.min(t.height/2,t.width/2),t.drawingArea=Math.round(e),t.setCenterPoint(0,0,0,0))},setReductions:function(t,e,n){var r=e.l/Math.sin(n.l),i=Math.max(e.r-this.width,0)/Math.sin(n.r),a=-e.t/Math.cos(n.t),o=-Math.max(e.b-this.height,0)/Math.cos(n.b);r=u(r),i=u(i),a=u(a),o=u(o),this.drawingArea=Math.min(Math.round(t-(r+i)/2),Math.round(t-(a+o)/2)),this.setCenterPoint(r,i,a,o)},setCenterPoint:function(t,e,n,r){var i=this,a=i.width-e-i.drawingArea,o=t+i.drawingArea,s=n+i.drawingArea,l=i.height-r-i.drawingArea;i.xCenter=Math.round((o+a)/2+i.left),i.yCenter=Math.round((s+l)/2+i.top)},getIndexAngle:function(t){return t*(2*Math.PI/r(this))+(this.chart.options&&this.chart.options.startAngle?this.chart.options.startAngle:0)*Math.PI*2/360},getDistanceFromCenterForValue:function(t){var e=this;if(null===t)return 0;var n=e.drawingArea/(e.max-e.min);return e.options.ticks.reverse?(e.max-t)*n:(t-e.min)*n},getPointPosition:function(t,e){var n=this.getIndexAngle(t)-Math.PI/2;return{x:Math.round(Math.cos(n)*e)+this.xCenter,y:Math.round(Math.sin(n)*e)+this.yCenter}},getPointPositionForValue:function(t,e){return this.getPointPosition(t,this.getDistanceFromCenterForValue(e))},getBasePosition:function(){var t=this.min,e=this.max;return this.getPointPositionForValue(0,this.beginAtZero?0:t<0&&e<0?e:t>0&&e>0?t:0)},draw:function(){var t=this,n=t.options,a=n.gridLines,u=n.ticks,c=Pf.valueOrDefault;if(n.display){var d=t.ctx,f=this.getIndexAngle(0),h=c(u.fontSize,e.defaultFontSize),p=c(u.fontStyle,e.defaultFontStyle),v=c(u.fontFamily,e.defaultFontFamily),g=Pf.fontString(h,p,v);Pf.each(t.ticks,function(n,i){if(i>0||u.reverse){var o=t.getDistanceFromCenterForValue(t.ticksAsNumbers[i]);if(a.display&&0!==i&&function(t,e,n,i){var a=t.ctx;if(a.strokeStyle=Pf.valueAtIndexOrDefault(e.color,i-1),a.lineWidth=Pf.valueAtIndexOrDefault(e.lineWidth,i-1),t.options.gridLines.circular)a.beginPath(),a.arc(t.xCenter,t.yCenter,n,0,2*Math.PI),a.closePath(),a.stroke();else{var o=r(t);if(0===o)return;a.beginPath();var s=t.getPointPosition(0,n);a.moveTo(s.x,s.y);for(var l=1;l<o;l++)s=t.getPointPosition(l,n),a.lineTo(s.x,s.y);a.closePath(),a.stroke()}}(t,a,o,i),u.display){var s=c(u.fontColor,e.defaultFontColor);if(d.font=g,d.save(),d.translate(t.xCenter,t.yCenter),d.rotate(f),u.showLabelBackdrop){var l=d.measureText(n).width;d.fillStyle=u.backdropColor,d.fillRect(-l/2-u.backdropPaddingX,-o-h/2-u.backdropPaddingY,l+2*u.backdropPaddingX,h+2*u.backdropPaddingY)}d.textAlign="center",d.textBaseline="middle",d.fillStyle=s,d.fillText(n,0,-o),d.restore()}}}),(n.angleLines.display||n.pointLabels.display)&&function(t){var n=t.ctx,a=t.options,u=a.angleLines,c=a.pointLabels;n.lineWidth=u.lineWidth,n.strokeStyle=u.color;var d=t.getDistanceFromCenterForValue(a.ticks.reverse?t.min:t.max),f=i(t);n.textBaseline="top";for(var h=r(t)-1;h>=0;h--){if(u.display){var p=t.getPointPosition(h,d);n.beginPath(),n.moveTo(t.xCenter,t.yCenter),n.lineTo(p.x,p.y),n.stroke(),n.closePath()}if(c.display){var v=t.getPointPosition(h,d+5),g=Pf.valueAtIndexOrDefault(c.fontColor,h,e.defaultFontColor);n.font=f.font,n.fillStyle=g;var m=t.getIndexAngle(h),y=Pf.toDegrees(m);n.textAlign=o(y),l(y,t._pointLabelSizes[h],v),s(n,t.pointLabels[h]||"",v,f.size)}}}(t)}}});Ah.registerScaleType("radialLinear",c,n)}(iv),rv=wp.extend({initialize:function(){if(!Sp)throw new Error("Chart.js - Moment.js could not be found! You must include it before Chart.js to use the time scale. Download at https://momentjs.com");this.mergeTicksOptions(),wp.prototype.initialize.call(this)},update:function(){var t=this.options;return t.time&&t.time.format&&console.warn("options.time.format is deprecated and replaced by options.time.parser."),wp.prototype.update.apply(this,arguments)},getRightValue:function(t){return t&&void 0!==t.t&&(t=t.t),wp.prototype.getRightValue.call(this,t)},determineDataLimits:function(){var t,e,n,r,i,a,o=this,s=o.chart,l=o.options.time,u=l.unit||"day",c=Cp,d=Mp,f=[],h=[],p=[];for(t=0,n=s.data.labels.length;t<n;++t)p.push(Fp(s.data.labels[t],o));for(t=0,n=(s.data.datasets||[]).length;t<n;++t)if(s.isDatasetVisible(t))if(i=s.data.datasets[t].data,Pf.isObject(i[0]))for(h[t]=[],e=0,r=i.length;e<r;++e)a=Fp(i[e],o),f.push(a),h[t][e]=a;else f.push.apply(f,p),h[t]=p.slice(0);else h[t]=[];p.length&&(p=Tp(p).sort(Op),c=Math.min(c,p[0]),d=Math.max(d,p[p.length-1])),f.length&&(f=Tp(f).sort(Op),c=Math.min(c,f[0]),d=Math.max(d,f[f.length-1])),c=Fp(l.min,o)||c,d=Fp(l.max,o)||d,c=c===Cp?+Sp().startOf(u):c,d=d===Mp?+Sp().endOf(u)+1:d,o.min=Math.min(c,d),o.max=Math.max(c+1,d),o._horizontal=o.isHorizontal(),o._table=[],o._timestamps={data:f,datasets:h,labels:p}},buildTicks:function(){var t,e,n,r=this,i=r.min,a=r.max,o=r.options,s=o.time,l=[],u=[];switch(o.ticks.source){case"data":l=r._timestamps.data;break;case"labels":l=r._timestamps.labels;break;case"auto":default:l=Rp(i,a,r.getLabelCapacity(i),o)}for("ticks"===o.bounds&&l.length&&(i=l[0],a=l[l.length-1]),i=Fp(s.min,r)||i,a=Fp(s.max,r)||a,t=0,e=l.length;t<e;++t)(n=l[t])>=i&&n<=a&&u.push(n);return r.min=i,r.max=a,r._unit=s.unit||function(t,e,n,r){var i,a,o=Sp.duration(Sp(r).diff(Sp(n)));for(i=Ap.length-1;i>=Ap.indexOf(e);i--)if(a=Ap[i],Dp[a].common&&o.as(a)>=t.length)return a;return Ap[e?Ap.indexOf(e):0]}(u,s.minUnit,r.min,r.max),r._majorUnit=Lp(r._unit),r._table=function(t,e,n,r){if("linear"===r||!t.length)return[{time:e,pos:0},{time:n,pos:1}];var i,a,o,s,l,u=[],c=[e];for(i=0,a=t.length;i<a;++i)(s=t[i])>e&&s<n&&c.push(s);for(c.push(n),i=0,a=c.length;i<a;++i)l=c[i+1],o=c[i-1],s=c[i],void 0!==o&&void 0!==l&&Math.round((l+o)/2)===s||u.push({time:s,pos:i/(a-1)});return u}(r._timestamps.data,i,a,o.distribution),r._offsets=function(t,e,n,r,i){var a,o,s=0,l=0;return i.offset&&e.length&&(i.time.min||(a=e.length>1?e[1]:r,o=e[0],s=(Pp(t,"time",a,"pos")-Pp(t,"time",o,"pos"))/2),i.time.max||(a=e[e.length-1],o=e.length>1?e[e.length-2]:n,l=(Pp(t,"time",a,"pos")-Pp(t,"time",o,"pos"))/2)),{left:s,right:l}}(r._table,u,i,a,o),r._labelFormat=function(t,e){var n,r,i,a=t.length;for(n=0;n<a;n++){if(0!==(r=Ip(t[n],e)).millisecond())return"MMM D, YYYY h:mm:ss.SSS a";0===r.second()&&0===r.minute()&&0===r.hour()||(i=!0)}return i?"MMM D, YYYY h:mm:ss a":"MMM D, YYYY"}(r._timestamps.data,s),function(t,e){var n,r,i,a,o=[];for(n=0,r=t.length;n<r;++n)i=t[n],a=!!e&&i===+Sp(i).startOf(e),o.push({value:i,major:a});return o}(u,r._majorUnit)},getLabelForIndex:function(t,e){var n=this.chart.data,r=this.options.time,i=n.labels&&t<n.labels.length?n.labels[t]:"",a=n.datasets[e].data[t];return Pf.isObject(a)&&(i=this.getRightValue(a)),r.tooltipFormat?Ip(i,r).format(r.tooltipFormat):"string"==typeof i?i:Ip(i,r).format(this._labelFormat)},tickFormatFunction:function(t,e,n,r){var i=this.options,a=t.valueOf(),o=i.time.displayFormats,s=o[this._unit],l=this._majorUnit,u=o[l],c=t.clone().startOf(l).valueOf(),d=i.ticks.major,f=d.enabled&&l&&u&&a===c,h=t.format(r||(f?u:s)),p=f?d:i.ticks.minor,v=Pf.valueOrDefault(p.callback,p.userCallback);return v?v(h,e,n):h},convertTicksToLabels:function(t){var e,n,r=[];for(e=0,n=t.length;e<n;++e)r.push(this.tickFormatFunction(Sp(t[e].value),e,t));return r},getPixelForOffset:function(t){var e=this,n=e._horizontal?e.width:e.height,r=e._horizontal?e.left:e.top,i=Pp(e._table,"time",t,"pos");return r+n*(e._offsets.left+i)/(e._offsets.left+1+e._offsets.right)},getPixelForValue:function(t,e,n){var r=null;if(void 0!==e&&void 0!==n&&(r=this._timestamps.datasets[n][e]),null===r&&(r=Fp(t,this)),null!==r)return this.getPixelForOffset(r)},getPixelForTick:function(t){var e=this.getTicks();return t>=0&&t<e.length?this.getPixelForOffset(e[t].value):null},getValueForPixel:function(t){var e=this,n=e._horizontal?e.width:e.height,r=e._horizontal?e.left:e.top,i=(n?(t-r)/n:0)*(e._offsets.left+1+e._offsets.left)-e._offsets.right,a=Pp(e._table,"pos",i,"time");return Sp(a)},getLabelWidth:function(t){var e=this.options.ticks,n=this.ctx.measureText(t).width,r=Pf.toRadians(e.maxRotation),i=Math.cos(r),a=Math.sin(r);return n*i+Pf.valueOrDefault(e.fontSize,Rf.global.defaultFontSize)*a},getLabelCapacity:function(t){var e=this,n=e.options.time.displayFormats.millisecond,r=e.tickFormatFunction(Sp(t),0,[],n),i=e.getLabelWidth(r),a=e.isHorizontal()?e.width:e.height,o=Math.floor(a/i);return o>0?o:1}}),Ah.registerScaleType("time",rv,{position:"bottom",distribution:"linear",bounds:"data",time:{parser:!1,format:!1,unit:!1,round:!1,displayFormat:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{millisecond:"h:mm:ss.SSS a",second:"h:mm:ss a",minute:"h:mm a",hour:"hA",day:"MMM D",week:"ll",month:"MMM YYYY",quarter:"[Q]Q - YYYY",year:"YYYY"}},ticks:{autoSkip:!1,source:"auto",major:{enabled:!1}}}),function(t){t.controllers.bar=t.DatasetController.extend({dataElementType:Wh.Rectangle,initialize:function(){var e;t.DatasetController.prototype.initialize.apply(this,arguments),(e=this.getMeta()).stack=this.getDataset().stack,e.bar=!0},update:function(t){var e,n,r=this.getMeta().data;for(this._ruler=this.getRuler(),e=0,n=r.length;e<n;++e)this.updateElement(r[e],e,t)},updateElement:function(t,e,n){var r=this,i=r.chart,a=r.getMeta(),o=r.getDataset(),s=t.custom||{},l=i.options.elements.rectangle;t._xScale=r.getScaleForId(a.xAxisID),t._yScale=r.getScaleForId(a.yAxisID),t._datasetIndex=r.index,t._index=e,t._model={datasetLabel:o.label,label:i.data.labels[e],borderSkipped:s.borderSkipped?s.borderSkipped:l.borderSkipped,backgroundColor:s.backgroundColor?s.backgroundColor:Pf.valueAtIndexOrDefault(o.backgroundColor,e,l.backgroundColor),borderColor:s.borderColor?s.borderColor:Pf.valueAtIndexOrDefault(o.borderColor,e,l.borderColor),borderWidth:s.borderWidth?s.borderWidth:Pf.valueAtIndexOrDefault(o.borderWidth,e,l.borderWidth)},r.updateElementGeometry(t,e,n),t.pivot()},updateElementGeometry:function(t,e,n){var r=this,i=t._model,a=r.getValueScale(),o=a.getBasePixel(),s=a.isHorizontal(),l=r._ruler||r.getRuler(),u=r.calculateBarValuePixels(r.index,e),c=r.calculateBarIndexPixels(r.index,e,l);i.horizontal=s,i.base=n?o:u.base,i.x=s?n?o:u.head:c.center,i.y=s?c.center:n?o:u.head,i.height=s?c.size:void 0,i.width=s?void 0:c.size},getValueScaleId:function(){return this.getMeta().yAxisID},getIndexScaleId:function(){return this.getMeta().xAxisID},getValueScale:function(){return this.getScaleForId(this.getValueScaleId())},getIndexScale:function(){return this.getScaleForId(this.getIndexScaleId())},_getStacks:function(t){var e,n,r=this.chart,i=this.getIndexScale().options.stacked,a=void 0===t?r.data.datasets.length:t+1,o=[];for(e=0;e<a;++e)(n=r.getDatasetMeta(e)).bar&&r.isDatasetVisible(e)&&(!1===i||!0===i&&-1===o.indexOf(n.stack)||void 0===i&&(void 0===n.stack||-1===o.indexOf(n.stack)))&&o.push(n.stack);return o},getStackCount:function(){return this._getStacks().length},getStackIndex:function(t,e){var n=this._getStacks(t),r=void 0!==e?n.indexOf(e):-1;return-1===r?n.length-1:r},getRuler:function(){var t,e,n=this.getIndexScale(),r=this.getStackCount(),i=this.index,a=n.isHorizontal(),o=a?n.left:n.top,s=o+(a?n.width:n.height),l=[];for(t=0,e=this.getMeta().data.length;t<e;++t)l.push(n.getPixelForValue(null,t,i));return{min:Pf.isNullOrUndef(n.options.barThickness)?function(t,e){var n,r,i,a,o=t.isHorizontal()?t.width:t.height,s=t.getTicks();for(i=1,a=e.length;i<a;++i)o=Math.min(o,e[i]-e[i-1]);for(i=0,a=s.length;i<a;++i)r=t.getPixelForTick(i),o=i>0?Math.min(o,r-n):o,n=r;return o}(n,l):-1,pixels:l,start:o,end:s,stackCount:r,scale:n}},calculateBarValuePixels:function(t,e){var n,r,i,a,o,s,l=this.chart,u=this.getMeta(),c=this.getValueScale(),d=l.data.datasets,f=c.getRightValue(d[t].data[e]),h=c.options.stacked,p=u.stack,v=0;if(h||void 0===h&&void 0!==p)for(n=0;n<t;++n)(r=l.getDatasetMeta(n)).bar&&r.stack===p&&r.controller.getValueScaleId()===c.id&&l.isDatasetVisible(n)&&(i=c.getRightValue(d[n].data[e]),(f<0&&i<0||f>=0&&i>0)&&(v+=i));return a=c.getPixelForValue(v),{size:s=((o=c.getPixelForValue(v+f))-a)/2,base:a,head:o,center:o+s/2}},calculateBarIndexPixels:function(t,e,n){var r=n.scale.options,i="flex"===r.barThickness?function(t,e,n){var r,i=e.pixels,a=i[t],o=t>0?i[t-1]:null,s=t<i.length-1?i[t+1]:null,l=n.categoryPercentage;return null===o&&(o=a-(null===s?e.end-a:s-a)),null===s&&(s=a+a-o),r=a-(a-o)/2*l,{chunk:(s-o)/2*l/e.stackCount,ratio:n.barPercentage,start:r}}(e,n,r):function(t,e,n){var r,i,a=n.barThickness,o=e.stackCount,s=e.pixels[t];return Pf.isNullOrUndef(a)?(r=e.min*n.categoryPercentage,i=n.barPercentage):(r=a*o,i=1),{chunk:r/o,ratio:i,start:s-r/2}}(e,n,r),a=this.getStackIndex(t,this.getMeta().stack),o=i.start+i.chunk*a+i.chunk/2,s=Math.min(Pf.valueOrDefault(r.maxBarThickness,1/0),i.chunk*i.ratio);return{base:o-s/2,head:o+s/2,center:o,size:s}},draw:function(){var t=this.chart,e=this.getValueScale(),n=this.getMeta().data,r=this.getDataset(),i=n.length,a=0;for(Pf.canvas.clipArea(t.ctx,t.chartArea);a<i;++a)isNaN(e.getRightValue(r.data[a]))||n[a].draw();Pf.canvas.unclipArea(t.ctx)}}),t.controllers.horizontalBar=t.controllers.bar.extend({getValueScaleId:function(){return this.getMeta().xAxisID},getIndexScaleId:function(){return this.getMeta().yAxisID}})}(iv),function(t){t.controllers.bubble=t.DatasetController.extend({dataElementType:Wh.Point,update:function(t){var e=this,n=e.getMeta().data;Pf.each(n,function(n,r){e.updateElement(n,r,t)})},updateElement:function(t,e,r){var i=this,a=i.getMeta(),o=t.custom||{},s=i.getScaleForId(a.xAxisID),l=i.getScaleForId(a.yAxisID),u=i._resolveElementOptions(t,e),c=i.getDataset().data[e],d=i.index,f=r?s.getPixelForDecimal(.5):s.getPixelForValue("object"===(void 0===c?"undefined":n(c))?c:NaN,e,d),h=r?l.getBasePixel():l.getPixelForValue(c,e,d);t._xScale=s,t._yScale=l,t._options=u,t._datasetIndex=d,t._index=e,t._model={backgroundColor:u.backgroundColor,borderColor:u.borderColor,borderWidth:u.borderWidth,hitRadius:u.hitRadius,pointStyle:u.pointStyle,rotation:u.rotation,radius:r?0:u.radius,skip:o.skip||isNaN(f)||isNaN(h),x:f,y:h},t.pivot()},setHoverStyle:function(t){var e=t._model,n=t._options;t.$previousStyle={backgroundColor:e.backgroundColor,borderColor:e.borderColor,borderWidth:e.borderWidth,radius:e.radius},e.backgroundColor=Pf.valueOrDefault(n.hoverBackgroundColor,Pf.getHoverColor(n.backgroundColor)),e.borderColor=Pf.valueOrDefault(n.hoverBorderColor,Pf.getHoverColor(n.borderColor)),e.borderWidth=Pf.valueOrDefault(n.hoverBorderWidth,n.borderWidth),e.radius=n.radius+n.hoverRadius},_resolveElementOptions:function(t,e){var n,r,i,a=this.chart,o=a.data.datasets[this.index],s=t.custom||{},l=a.options.elements.point,u=Pf.options.resolve,c=o.data[e],d={},f={chart:a,dataIndex:e,dataset:o,datasetIndex:this.index},h=["backgroundColor","borderColor","borderWidth","hoverBackgroundColor","hoverBorderColor","hoverBorderWidth","hoverRadius","hitRadius","pointStyle","rotation"];for(n=0,r=h.length;n<r;++n)d[i=h[n]]=u([s[i],o[i],l[i]],f,e);return d.radius=u([s.radius,c?c.r:void 0,o.radius,l.radius],f,e),d}})}(iv),function(t){t.controllers.doughnut=t.controllers.pie=t.DatasetController.extend({dataElementType:Wh.Arc,linkScales:Pf.noop,getRingIndex:function(t){for(var e=0,n=0;n<t;++n)this.chart.isDatasetVisible(n)&&++e;return e},update:function(t){var e=this,n=e.chart,r=n.chartArea,i=n.options,a=i.elements.arc,o=r.right-r.left-a.borderWidth,s=r.bottom-r.top-a.borderWidth,l=Math.min(o,s),u={x:0,y:0},c=e.getMeta(),d=i.cutoutPercentage,f=i.circumference;if(f<2*Math.PI){var h=i.rotation%(2*Math.PI),p=(h+=2*Math.PI*(h>=Math.PI?-1:h<-Math.PI?1:0))+f,v={x:Math.cos(h),y:Math.sin(h)},g={x:Math.cos(p),y:Math.sin(p)},m=h<=0&&p>=0||h<=2*Math.PI&&2*Math.PI<=p,y=h<=.5*Math.PI&&.5*Math.PI<=p||h<=2.5*Math.PI&&2.5*Math.PI<=p,b=h<=-Math.PI&&-Math.PI<=p||h<=Math.PI&&Math.PI<=p,_=h<=.5*-Math.PI&&.5*-Math.PI<=p||h<=1.5*Math.PI&&1.5*Math.PI<=p,x=d/100,w={x:b?-1:Math.min(v.x*(v.x<0?1:x),g.x*(g.x<0?1:x)),y:_?-1:Math.min(v.y*(v.y<0?1:x),g.y*(g.y<0?1:x))},k={x:m?1:Math.max(v.x*(v.x>0?1:x),g.x*(g.x>0?1:x)),y:y?1:Math.max(v.y*(v.y>0?1:x),g.y*(g.y>0?1:x))},S={width:.5*(k.x-w.x),height:.5*(k.y-w.y)};l=Math.min(o/S.width,s/S.height),u={x:-.5*(k.x+w.x),y:-.5*(k.y+w.y)}}n.borderWidth=e.getMaxBorderWidth(c.data),n.outerRadius=Math.max((l-n.borderWidth)/2,0),n.innerRadius=Math.max(d?n.outerRadius/100*d:0,0),n.radiusLength=(n.outerRadius-n.innerRadius)/n.getVisibleDatasetCount(),n.offsetX=u.x*n.outerRadius,n.offsetY=u.y*n.outerRadius,c.total=e.calculateTotal(),e.outerRadius=n.outerRadius-n.radiusLength*e.getRingIndex(e.index),e.innerRadius=Math.max(e.outerRadius-n.radiusLength,0),Pf.each(c.data,function(n,r){e.updateElement(n,r,t)})},updateElement:function(t,e,n){var r=this,i=r.chart,a=i.chartArea,o=i.options,s=o.animation,l=(a.left+a.right)/2,u=(a.top+a.bottom)/2,c=o.rotation,d=o.rotation,f=r.getDataset(),h=n&&s.animateRotate?0:t.hidden?0:r.calculateCircumference(f.data[e])*(o.circumference/(2*Math.PI)),p=n&&s.animateScale?0:r.innerRadius,v=n&&s.animateScale?0:r.outerRadius,g=Pf.valueAtIndexOrDefault;Pf.extend(t,{_datasetIndex:r.index,_index:e,_model:{x:l+i.offsetX,y:u+i.offsetY,startAngle:c,endAngle:d,circumference:h,outerRadius:v,innerRadius:p,label:g(f.label,e,i.data.labels[e])}});var m=t._model,y=t.custom||{},b=Pf.valueAtIndexOrDefault,_=this.chart.options.elements.arc;m.backgroundColor=y.backgroundColor?y.backgroundColor:b(f.backgroundColor,e,_.backgroundColor),m.borderColor=y.borderColor?y.borderColor:b(f.borderColor,e,_.borderColor),m.borderWidth=y.borderWidth?y.borderWidth:b(f.borderWidth,e,_.borderWidth),n&&s.animateRotate||(m.startAngle=0===e?o.rotation:r.getMeta().data[e-1]._model.endAngle,m.endAngle=m.startAngle+m.circumference),t.pivot()},calculateTotal:function(){var t,e=this.getDataset(),n=this.getMeta(),r=0;return Pf.each(n.data,function(n,i){t=e.data[i],isNaN(t)||n.hidden||(r+=Math.abs(t))}),r},calculateCircumference:function(t){var e=this.getMeta().total;return e>0&&!isNaN(t)?2*Math.PI*(Math.abs(t)/e):0},getMaxBorderWidth:function(t){for(var e,n,r=0,i=this.index,a=t.length,o=0;o<a;o++)e=t[o]._model?t[o]._model.borderWidth:0,r=(n=t[o]._chart?t[o]._chart.config.data.datasets[i].hoverBorderWidth:0)>(r=e>r?e:r)?n:r;return r}})}(iv),function(t){function e(t,e){return Pf.valueOrDefault(t.showLine,e.showLines)}t.controllers.line=t.DatasetController.extend({datasetElementType:Wh.Line,dataElementType:Wh.Point,update:function(t){var n,r,i,a=this,o=a.getMeta(),s=o.dataset,l=o.data||[],u=a.chart.options,c=u.elements.line,d=a.getScaleForId(o.yAxisID),f=a.getDataset(),h=e(f,u);for(h&&(i=s.custom||{},void 0!==f.tension&&void 0===f.lineTension&&(f.lineTension=f.tension),s._scale=d,s._datasetIndex=a.index,s._children=l,s._model={spanGaps:f.spanGaps?f.spanGaps:u.spanGaps,tension:i.tension?i.tension:Pf.valueOrDefault(f.lineTension,c.tension),backgroundColor:i.backgroundColor?i.backgroundColor:f.backgroundColor||c.backgroundColor,borderWidth:i.borderWidth?i.borderWidth:f.borderWidth||c.borderWidth,borderColor:i.borderColor?i.borderColor:f.borderColor||c.borderColor,borderCapStyle:i.borderCapStyle?i.borderCapStyle:f.borderCapStyle||c.borderCapStyle,borderDash:i.borderDash?i.borderDash:f.borderDash||c.borderDash,borderDashOffset:i.borderDashOffset?i.borderDashOffset:f.borderDashOffset||c.borderDashOffset,borderJoinStyle:i.borderJoinStyle?i.borderJoinStyle:f.borderJoinStyle||c.borderJoinStyle,fill:i.fill?i.fill:void 0!==f.fill?f.fill:c.fill,steppedLine:i.steppedLine?i.steppedLine:Pf.valueOrDefault(f.steppedLine,c.stepped),cubicInterpolationMode:i.cubicInterpolationMode?i.cubicInterpolationMode:Pf.valueOrDefault(f.cubicInterpolationMode,c.cubicInterpolationMode)},s.pivot()),n=0,r=l.length;n<r;++n)a.updateElement(l[n],n,t);for(h&&0!==s._model.tension&&a.updateBezierControlPoints(),n=0,r=l.length;n<r;++n)l[n].pivot()},getPointBackgroundColor:function(t,e){var n=this.chart.options.elements.point.backgroundColor,r=this.getDataset(),i=t.custom||{};return i.backgroundColor?n=i.backgroundColor:r.pointBackgroundColor?n=Pf.valueAtIndexOrDefault(r.pointBackgroundColor,e,n):r.backgroundColor&&(n=r.backgroundColor),n},getPointBorderColor:function(t,e){var n=this.chart.options.elements.point.borderColor,r=this.getDataset(),i=t.custom||{};return i.borderColor?n=i.borderColor:r.pointBorderColor?n=Pf.valueAtIndexOrDefault(r.pointBorderColor,e,n):r.borderColor&&(n=r.borderColor),n},getPointBorderWidth:function(t,e){var n=this.chart.options.elements.point.borderWidth,r=this.getDataset(),i=t.custom||{};return isNaN(i.borderWidth)?!isNaN(r.pointBorderWidth)||Pf.isArray(r.pointBorderWidth)?n=Pf.valueAtIndexOrDefault(r.pointBorderWidth,e,n):isNaN(r.borderWidth)||(n=r.borderWidth):n=i.borderWidth,n},getPointRotation:function(t,e){var n=this.chart.options.elements.point.rotation,r=this.getDataset(),i=t.custom||{};return isNaN(i.rotation)?isNaN(r.pointRotation)&&!Pf.isArray(r.pointRotation)||(n=Pf.valueAtIndexOrDefault(r.pointRotation,e,n)):n=i.rotation,n},updateElement:function(t,e,r){var i,a,o=this,s=o.getMeta(),l=t.custom||{},u=o.getDataset(),c=o.index,d=u.data[e],f=o.getScaleForId(s.yAxisID),h=o.getScaleForId(s.xAxisID),p=o.chart.options.elements.point;void 0!==u.radius&&void 0===u.pointRadius&&(u.pointRadius=u.radius),void 0!==u.hitRadius&&void 0===u.pointHitRadius&&(u.pointHitRadius=u.hitRadius),i=h.getPixelForValue("object"===(void 0===d?"undefined":n(d))?d:NaN,e,c),a=r?f.getBasePixel():o.calculatePointY(d,e,c),t._xScale=h,t._yScale=f,t._datasetIndex=c,t._index=e,t._model={x:i,y:a,skip:l.skip||isNaN(i)||isNaN(a),radius:l.radius||Pf.valueAtIndexOrDefault(u.pointRadius,e,p.radius),pointStyle:l.pointStyle||Pf.valueAtIndexOrDefault(u.pointStyle,e,p.pointStyle),rotation:o.getPointRotation(t,e),backgroundColor:o.getPointBackgroundColor(t,e),borderColor:o.getPointBorderColor(t,e),borderWidth:o.getPointBorderWidth(t,e),tension:s.dataset._model?s.dataset._model.tension:0,steppedLine:!!s.dataset._model&&s.dataset._model.steppedLine,hitRadius:l.hitRadius||Pf.valueAtIndexOrDefault(u.pointHitRadius,e,p.hitRadius)}},calculatePointY:function(t,e,n){var r,i,a,o=this.chart,s=this.getMeta(),l=this.getScaleForId(s.yAxisID),u=0,c=0;if(l.options.stacked){for(r=0;r<n;r++)if(i=o.data.datasets[r],"line"===(a=o.getDatasetMeta(r)).type&&a.yAxisID===l.id&&o.isDatasetVisible(r)){var d=Number(l.getRightValue(i.data[e]));d<0?c+=d||0:u+=d||0}var f=Number(l.getRightValue(t));return f<0?l.getPixelForValue(c+f):l.getPixelForValue(u+f)}return l.getPixelForValue(t)},updateBezierControlPoints:function(){var t,e,n,r,i=this.getMeta(),a=this.chart.chartArea,o=i.data||[];function s(t,e,n){return Math.max(Math.min(t,n),e)}if(i.dataset._model.spanGaps&&(o=o.filter(function(t){return!t._model.skip})),"monotone"===i.dataset._model.cubicInterpolationMode)Pf.splineCurveMonotone(o);else for(t=0,e=o.length;t<e;++t)n=o[t]._model,r=Pf.splineCurve(Pf.previousItem(o,t)._model,n,Pf.nextItem(o,t)._model,i.dataset._model.tension),n.controlPointPreviousX=r.previous.x,n.controlPointPreviousY=r.previous.y,n.controlPointNextX=r.next.x,n.controlPointNextY=r.next.y;if(this.chart.options.elements.line.capBezierPoints)for(t=0,e=o.length;t<e;++t)(n=o[t]._model).controlPointPreviousX=s(n.controlPointPreviousX,a.left,a.right),n.controlPointPreviousY=s(n.controlPointPreviousY,a.top,a.bottom),n.controlPointNextX=s(n.controlPointNextX,a.left,a.right),n.controlPointNextY=s(n.controlPointNextY,a.top,a.bottom)},draw:function(){var t,n=this.chart,r=this.getMeta(),i=r.data||[],a=n.chartArea,o=i.length,s=0;for(e(this.getDataset(),n.options)&&(t=(r.dataset._model.borderWidth||0)/2,Pf.canvas.clipArea(n.ctx,{left:a.left,right:a.right,top:a.top-t,bottom:a.bottom+t}),r.dataset.draw(),Pf.canvas.unclipArea(n.ctx));s<o;++s)i[s].draw(a)},setHoverStyle:function(t){var e=this.chart.data.datasets[t._datasetIndex],n=t._index,r=t.custom||{},i=t._model;t.$previousStyle={backgroundColor:i.backgroundColor,borderColor:i.borderColor,borderWidth:i.borderWidth,radius:i.radius},i.backgroundColor=r.hoverBackgroundColor||Pf.valueAtIndexOrDefault(e.pointHoverBackgroundColor,n,Pf.getHoverColor(i.backgroundColor)),i.borderColor=r.hoverBorderColor||Pf.valueAtIndexOrDefault(e.pointHoverBorderColor,n,Pf.getHoverColor(i.borderColor)),i.borderWidth=r.hoverBorderWidth||Pf.valueAtIndexOrDefault(e.pointHoverBorderWidth,n,i.borderWidth),i.radius=r.hoverRadius||Pf.valueAtIndexOrDefault(e.pointHoverRadius,n,this.chart.options.elements.point.hoverRadius)}})}(iv),function(t){t.controllers.polarArea=t.DatasetController.extend({dataElementType:Wh.Arc,linkScales:Pf.noop,update:function(t){var e,n,r,i=this,a=i.getDataset(),o=i.getMeta(),s=i.chart.options.startAngle||0,l=i._starts=[],u=i._angles=[];for(i._updateRadius(),o.count=i.countVisibleElements(),e=0,n=a.data.length;e<n;e++)l[e]=s,r=i._computeAngle(e),u[e]=r,s+=r;Pf.each(o.data,function(e,n){i.updateElement(e,n,t)})},_updateRadius:function(){var t=this,e=t.chart,n=e.chartArea,r=e.options,i=r.elements.arc,a=Math.min(n.right-n.left,n.bottom-n.top);e.outerRadius=Math.max((a-i.borderWidth/2)/2,0),e.innerRadius=Math.max(r.cutoutPercentage?e.outerRadius/100*r.cutoutPercentage:1,0),e.radiusLength=(e.outerRadius-e.innerRadius)/e.getVisibleDatasetCount(),t.outerRadius=e.outerRadius-e.radiusLength*t.index,t.innerRadius=t.outerRadius-e.radiusLength},updateElement:function(t,e,n){var r=this,i=r.chart,a=r.getDataset(),o=i.options,s=o.animation,l=i.scale,u=i.data.labels,c=l.xCenter,d=l.yCenter,f=o.startAngle,h=t.hidden?0:l.getDistanceFromCenterForValue(a.data[e]),p=r._starts[e],v=p+(t.hidden?0:r._angles[e]),g=s.animateScale?0:l.getDistanceFromCenterForValue(a.data[e]);Pf.extend(t,{_datasetIndex:r.index,_index:e,_scale:l,_model:{x:c,y:d,innerRadius:0,outerRadius:n?g:h,startAngle:n&&s.animateRotate?f:p,endAngle:n&&s.animateRotate?f:v,label:Pf.valueAtIndexOrDefault(u,e,u[e])}});var m=this.chart.options.elements.arc,y=t.custom||{},b=Pf.valueAtIndexOrDefault,_=t._model;_.backgroundColor=y.backgroundColor?y.backgroundColor:b(a.backgroundColor,e,m.backgroundColor),_.borderColor=y.borderColor?y.borderColor:b(a.borderColor,e,m.borderColor),_.borderWidth=y.borderWidth?y.borderWidth:b(a.borderWidth,e,m.borderWidth),t.pivot()},countVisibleElements:function(){var t=this.getDataset(),e=this.getMeta(),n=0;return Pf.each(e.data,function(e,r){isNaN(t.data[r])||e.hidden||n++}),n},_computeAngle:function(t){var e=this,n=this.getMeta().count,r=e.getDataset(),i=e.getMeta();if(isNaN(r.data[t])||i.data[t].hidden)return 0;var a={chart:e.chart,dataIndex:t,dataset:r,datasetIndex:e.index};return Pf.options.resolve([e.chart.options.elements.arc.angle,2*Math.PI/n],a,t)}})}(iv),function(t){t.controllers.radar=t.DatasetController.extend({datasetElementType:Wh.Line,dataElementType:Wh.Point,linkScales:Pf.noop,update:function(t){var e=this,n=e.getMeta(),r=n.dataset,i=n.data,a=r.custom||{},o=e.getDataset(),s=e.chart.options.elements.line,l=e.chart.scale;void 0!==o.tension&&void 0===o.lineTension&&(o.lineTension=o.tension),Pf.extend(n.dataset,{_datasetIndex:e.index,_scale:l,_children:i,_loop:!0,_model:{tension:a.tension?a.tension:Pf.valueOrDefault(o.lineTension,s.tension),backgroundColor:a.backgroundColor?a.backgroundColor:o.backgroundColor||s.backgroundColor,borderWidth:a.borderWidth?a.borderWidth:o.borderWidth||s.borderWidth,borderColor:a.borderColor?a.borderColor:o.borderColor||s.borderColor,fill:a.fill?a.fill:void 0!==o.fill?o.fill:s.fill,borderCapStyle:a.borderCapStyle?a.borderCapStyle:o.borderCapStyle||s.borderCapStyle,borderDash:a.borderDash?a.borderDash:o.borderDash||s.borderDash,borderDashOffset:a.borderDashOffset?a.borderDashOffset:o.borderDashOffset||s.borderDashOffset,borderJoinStyle:a.borderJoinStyle?a.borderJoinStyle:o.borderJoinStyle||s.borderJoinStyle}}),n.dataset.pivot(),Pf.each(i,function(n,r){e.updateElement(n,r,t)},e),e.updateBezierControlPoints()},updateElement:function(t,e,n){var r=this,i=t.custom||{},a=r.getDataset(),o=r.chart.scale,s=r.chart.options.elements.point,l=o.getPointPositionForValue(e,a.data[e]);void 0!==a.radius&&void 0===a.pointRadius&&(a.pointRadius=a.radius),void 0!==a.hitRadius&&void 0===a.pointHitRadius&&(a.pointHitRadius=a.hitRadius),Pf.extend(t,{_datasetIndex:r.index,_index:e,_scale:o,_model:{x:n?o.xCenter:l.x,y:n?o.yCenter:l.y,tension:i.tension?i.tension:Pf.valueOrDefault(a.lineTension,r.chart.options.elements.line.tension),radius:i.radius?i.radius:Pf.valueAtIndexOrDefault(a.pointRadius,e,s.radius),backgroundColor:i.backgroundColor?i.backgroundColor:Pf.valueAtIndexOrDefault(a.pointBackgroundColor,e,s.backgroundColor),borderColor:i.borderColor?i.borderColor:Pf.valueAtIndexOrDefault(a.pointBorderColor,e,s.borderColor),borderWidth:i.borderWidth?i.borderWidth:Pf.valueAtIndexOrDefault(a.pointBorderWidth,e,s.borderWidth),pointStyle:i.pointStyle?i.pointStyle:Pf.valueAtIndexOrDefault(a.pointStyle,e,s.pointStyle),rotation:i.rotation?i.rotation:Pf.valueAtIndexOrDefault(a.pointRotation,e,s.rotation),hitRadius:i.hitRadius?i.hitRadius:Pf.valueAtIndexOrDefault(a.pointHitRadius,e,s.hitRadius)}}),t._model.skip=i.skip?i.skip:isNaN(t._model.x)||isNaN(t._model.y)},updateBezierControlPoints:function(){var t=this.chart.chartArea,e=this.getMeta();Pf.each(e.data,function(n,r){var i=n._model,a=Pf.splineCurve(Pf.previousItem(e.data,r,!0)._model,i,Pf.nextItem(e.data,r,!0)._model,i.tension);i.controlPointPreviousX=Math.max(Math.min(a.previous.x,t.right),t.left),i.controlPointPreviousY=Math.max(Math.min(a.previous.y,t.bottom),t.top),i.controlPointNextX=Math.max(Math.min(a.next.x,t.right),t.left),i.controlPointNextY=Math.max(Math.min(a.next.y,t.bottom),t.top),n.pivot()})},setHoverStyle:function(t){var e=this.chart.data.datasets[t._datasetIndex],n=t.custom||{},r=t._index,i=t._model;t.$previousStyle={backgroundColor:i.backgroundColor,borderColor:i.borderColor,borderWidth:i.borderWidth,radius:i.radius},i.radius=n.hoverRadius?n.hoverRadius:Pf.valueAtIndexOrDefault(e.pointHoverRadius,r,this.chart.options.elements.point.hoverRadius),i.backgroundColor=n.hoverBackgroundColor?n.hoverBackgroundColor:Pf.valueAtIndexOrDefault(e.pointHoverBackgroundColor,r,Pf.getHoverColor(i.backgroundColor)),i.borderColor=n.hoverBorderColor?n.hoverBorderColor:Pf.valueAtIndexOrDefault(e.pointHoverBorderColor,r,Pf.getHoverColor(i.borderColor)),i.borderWidth=n.hoverBorderWidth?n.hoverBorderWidth:Pf.valueAtIndexOrDefault(e.pointHoverBorderWidth,r,i.borderWidth)}})}(iv),function(t){t.controllers.scatter=t.controllers.line}(iv),function(t){t.Bar=function(e,n){return n.type="bar",new t(e,n)}}(iv),function(t){t.Bubble=function(e,n){return n.type="bubble",new t(e,n)}}(iv),function(t){t.Doughnut=function(e,n){return n.type="doughnut",new t(e,n)}}(iv),function(t){t.Line=function(e,n){return n.type="line",new t(e,n)}}(iv),function(t){t.PolarArea=function(e,n){return n.type="polarArea",new t(e,n)}}(iv),function(t){t.Radar=function(e,n){return n.type="radar",new t(e,n)}}(iv),function(t){t.Scatter=function(e,n){return n.type="scatter",new t(e,n)}}(iv),Xp)Xp.hasOwnProperty(av)&&iv.plugins.register(Xp[av]);iv.platform.initialize();var ov=iv;function sv(t,e){return{render:function(t){return t("div",{style:this.styles,class:this.cssClasses},[t("canvas",{attrs:{id:this.chartId,width:this.width,height:this.height},ref:"canvas"})])},props:{chartId:{default:t,type:String},width:{default:400,type:Number},height:{default:400,type:Number},cssClasses:{type:String,default:""},styles:{type:Object},plugins:{type:Array,default:function(){return[]}}},data:function(){return{_chart:null,_plugins:this.plugins}},methods:{addPlugin:function(t){this.$data._plugins.push(t)},generateLegend:function(){if(this.$data._chart)return this.$data._chart.generateLegend()},renderChart:function(t,n){this.$data._chart&&this.$data._chart.destroy(),this.$data._chart=new ov(this.$refs.canvas.getContext("2d"),{type:e,data:t,options:n,plugins:this.$data._plugins})}},beforeDestroy:function(){this.$data._chart&&this.$data._chart.destroy()}}}"undefined"!=typeof window&&(window.Chart=iv),iv.Legend=Xp.legend._element,iv.Title=Xp.title._element,iv.pluginService=iv.plugins,iv.PluginBase=iv.Element.extend({}),iv.canvasHelpers=iv.helpers.canvas,iv.layoutService=iv.layouts;var lv=sv("bar-chart","bar"),uv=sv("horizontalbar-chart","horizontalBar"),cv=sv("line-chart","line"),dv=kf.reactiveProp;Chart.defaults.global.title.padding=20,Chart.defaults.global.title.fontSize=16,Chart.defaults.global.title.lineHeight=1.6;var fv=function(t,e,n,r,i,a,o,s,l,u){"boolean"!=typeof o&&(l=s,s=o,o=!1);var c,d="function"==typeof n?n.options:n;if(t&&t.render&&(d.render=t.render,d.staticRenderFns=t.staticRenderFns,d._compiled=!0,i&&(d.functional=!0)),r&&(d._scopeId=r),a?(c=function(t){(t=t||this.$vnode&&this.$vnode.ssrContext||this.parent&&this.parent.$vnode&&this.parent.$vnode.ssrContext)||"undefined"==typeof __VUE_SSR_CONTEXT__||(t=__VUE_SSR_CONTEXT__),e&&e.call(this,l(t)),t&&t._registeredComponents&&t._registeredComponents.add(a)},d._ssrRegister=c):e&&(c=o?function(){e.call(this,u(this.$root.$options.shadowRoot))}:function(t){e.call(this,s(t))}),c)if(d.functional){var f=d.render;d.render=function(t,e){return c.call(e),f(t,e)}}else{var h=d.beforeCreate;d.beforeCreate=h?[].concat(h,c):[c]}return n},hv=fv({},void 0,{extends:lv,mixins:[dv],props:{options:{type:Object,default:function(){return{legend:{display:!1},lineTension:1}}}},mounted:function(){this.renderChart(this.chartData,this.options)}},void 0,void 0,void 0,void 0,void 0),pv={data:{labels:["1980","1990","2000","2010","2020"],datasets:[{data:[6542564,7322564,8008278,8175133,5475133],fill:!1,backgroundColor:["#2F334F","#3155A6","#F2695D","#EBBCD8","#F9A137"],borderColor:["#ACAEB9"],borderWidth:1}]},bar:{options:{title:{display:!0,text:"Population Chart"},legend:{display:!1},lineTension:1,scales:{xAxes:[{scaleLabel:{display:!0,labelString:"Years"}}],yAxes:[{scaleLabel:{display:!0,labelString:"Population"},ticks:{padding:25}}]}}},horizontalBar:{options:{title:{display:!0,text:"Population Chart"},legend:{display:!1},lineTension:1,scales:{xAxes:[{scaleLabel:{display:!0,labelString:"Population"}}],yAxes:[{scaleLabel:{display:!0,labelString:"Years"},ticks:{padding:25}}]}}}},vv=function(t,e){void 0===t&&(t={}),void 0===e&&(e={}),this.data=e,this.settings=t};vv.prototype.init=function(){bs.component("nyco-chart-bar",hv),new bs({el:'[data-js="app"]',delimiters:["v{","}"],data:function(){return{data:pv.data,options:pv.bar.options}}}),console.log("Hello World!")},vv.prototype._constants=function(t){console.dir(t)};var gv=kf.reactiveProp;Chart.defaults.global.title.padding=20,Chart.defaults.global.title.fontSize=16,Chart.defaults.global.title.lineHeight=1.6;var mv=fv({},void 0,{extends:uv,mixins:[gv],props:{options:{type:Object,default:function(){return{legend:{display:!1},lineTension:1}}}},mounted:function(){this.renderChart(this.chartData,this.options)}},void 0,void 0,void 0,void 0,void 0),yv=function(t,e){void 0===t&&(t={}),void 0===e&&(e={}),this.data=e,this.settings=t};yv.prototype.init=function(){bs.component("nyco-chart-horizontal-bar",mv),new bs({el:'[data-js="app-horizontal-bar"]',delimiters:["v{","}"],data:function(){return{data:pv.data,options:pv.horizontalBar.options}}})},yv.prototype._constants=function(t){console.dir(t)};var bv=kf.reactiveProp;Chart.defaults.global.title.padding=20,Chart.defaults.global.title.fontSize=16,Chart.defaults.global.title.lineHeight=1.6;var _v=fv({},void 0,{extends:cv,mixins:[bv],props:{options:{type:Object,default:function(){return{legend:{display:!1},lineTension:1}}}},mounted:function(){this.renderChart(this.chartData,this.options)}},void 0,void 0,void 0,void 0,void 0),xv=function(t,e){void 0===t&&(t={}),void 0===e&&(e={}),this.data=e,this.settings=t};xv.prototype.init=function(){bs.component("nyco-chart-line",_v),new bs({el:'[data-js="app-line"]',delimiters:["v{","}"],data:function(){return{data:pv.data,options:pv.bar.options}}})},xv.prototype._constants=function(t){console.dir(t)};var wv=function(){};return wv.prototype.icons=function(t){return new e(t)},wv.prototype.feed=function(t){return new xr(t)},wv.prototype.toggle=function(t){return new wr},wv.prototype.track=function(t){return new kr},wv.prototype.chart=function(t){return"bar"===t?(new vv).init():"horizontalBar"===t?(new yv).init():"line"===t?(new xv).init():void 0},wv}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
