"use strict";var classCallCheck=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},createClass=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),Utility=function e(){return classCallCheck(this,e),this};Utility.debug=function(){return"1"===Utility.getUrlParameter(Utility.PARAMS.DEBUG)},Utility.getUrlParameter=function(e,t){var r=t||window.location.search,n=e.replace(/[\[]/,"\\[").replace(/[\]]/,"\\]"),a=new RegExp("[\\?&]"+n+"=([^&#]*)").exec(r);return null===a?"":decodeURIComponent(a[1].replace(/\+/g," "))},Utility.localize=function(e){var t=e||"",r=(window.LOCALIZED_STRINGS||[]).filter(function(t){return!(!t.hasOwnProperty("slug")||t.slug!==e)&&t});return r[0]&&r[0].hasOwnProperty("label")?r[0].label:t},Utility.PARAMS={DEBUG:"debug"},Utility.SELECTORS={parseMarkdown:'[data-js="markdown"]'};var Track=function(){function e(t){var r=this;classCallCheck(this,e);var n=document.querySelector("body");return t=t||{},this._settings={selector:t.selector?t.selector:e.selector},n.addEventListener("click",function(e){if(e.target.matches(r._settings.selector)){var t=e.target.dataset.trackKey,n=JSON.parse(e.target.dataset.trackData);r.click(t,n)}}),this}return createClass(e,[{key:"click",value:function(t,r){var n=r.map(function(t){return t.hasOwnProperty(e.key)&&(t[e.key]=window.location.pathname+"/"+t[e.key]),t}),a=this.webtrends(t,n),i=this.gtag(t,n);return Utility.debug()&&console.dir({Track:[a,i]}),n}},{key:"view",value:function(e,t,r){var n=this.webtrends(t,r),a=this.gtagView(e,t);Utility.debug()&&console.dir({Track:[n,a]})}},{key:"webtrends",value:function(t,r){var n=[{"WT.ti":t}];r[0]&&r[0].hasOwnProperty(e.key)?n.push({"DCS.dcsuri":r[0][e.key]}):Object.assign(n,r);var a={argsa:n.flatMap(function(e){return Object.keys(e).flatMap(function(t){return[t,e[t]]})})};return"undefined"!=typeof Webtrends&&Webtrends.multiTrack(a),["Webtrends",a]}},{key:"gtag",value:function(e){function t(t,r){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(t,r){var n=r.find(function(t){return t.hasOwnProperty(e.key)}),a={event_category:t};return"undefined"!=typeof gtag&&gtag(e.key,n[e.key],a),["gtag",e.key,n[e.key],a]})},{key:"gtagView",value:function(t,r){var n={app_name:t,screen_name:r};return"undefined"!=typeof gtag&&gtag("event","screen_view",n),["gtag",e.key,"screen_view",n]}}]),e}();Track.selector='[data-js*="track"]',Track.key="event",module.exports=Track;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
