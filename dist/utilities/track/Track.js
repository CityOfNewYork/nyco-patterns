var Track=function(){"use strict";var e=function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")},t=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),n=function t(){return e(this,t),this};n.debug=function(){return"1"===n.getUrlParameter(n.PARAMS.DEBUG)},n.getUrlParameter=function(e,t){var n=t||window.location.search,r=e.replace(/[\[]/,"\\[").replace(/[\]]/,"\\]"),a=new RegExp("[\\?&]"+r+"=([^&#]*)").exec(n);return null===a?"":decodeURIComponent(a[1].replace(/\+/g," "))},n.localize=function(e){var t=e||"",n=(window.LOCALIZED_STRINGS||[]).filter(function(t){return!(!t.hasOwnProperty("slug")||t.slug!==e)&&t});return n[0]&&n[0].hasOwnProperty("label")?n[0].label:t},n.PARAMS={DEBUG:"debug"},n.SELECTORS={parseMarkdown:'[data-js="markdown"]'};var r=function(){function r(t){var n=this;e(this,r);var a=document.querySelector("body");return t=t||{},this._settings={selector:t.selector?t.selector:r.selector},a.addEventListener("click",function(e){if(e.target.matches(n._settings.selector)){var t=e.target.dataset.trackKey,r=JSON.parse(e.target.dataset.trackData);n.click(t,r)}}),this}return t(r,[{key:"click",value:function(e,t){var a=t.map(function(e){return e.hasOwnProperty(r.key)&&(e[r.key]=window.location.pathname+"/"+e[r.key]),e}),i=this.webtrends(e,a),c=this.gtag(e,a);return n.debug()&&console.dir({Track:[i,c]}),a}},{key:"view",value:function(e,t,r){var a=this.webtrends(t,r),i=this.gtagView(e,t);n.debug()&&console.dir({Track:[a,i]})}},{key:"webtrends",value:function(e,t){var n=[{"WT.ti":e}];t[0]&&t[0].hasOwnProperty(r.key)?n.push({"DCS.dcsuri":t[0][r.key]}):Object.assign(n,t);var a={argsa:n.flatMap(function(e){return Object.keys(e).flatMap(function(t){return[t,e[t]]})})};return"undefined"!=typeof Webtrends&&Webtrends.multiTrack(a),["Webtrends",a]}},{key:"gtag",value:function(e){function t(t,n){return e.apply(this,arguments)}return t.toString=function(){return e.toString()},t}(function(e,t){var n=t.find(function(e){return e.hasOwnProperty(r.key)}),a={event_category:e};return"undefined"!=typeof gtag&&gtag(r.key,n[r.key],a),["gtag",r.key,n[r.key],a]})},{key:"gtagView",value:function(e,t){var n={app_name:e,screen_name:t};return"undefined"!=typeof gtag&&gtag("event","screen_view",n),["gtag",r.key,"screen_view",n]}}]),r}();return r.selector='[data-js*="track"]',r.key="event",r}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
